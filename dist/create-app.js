"use strict";var M0=Object.create;var un=Object.defineProperty;var q0=Object.getOwnPropertyDescriptor;var B0=Object.getOwnPropertyNames;var U0=Object.getPrototypeOf,$0=Object.prototype.hasOwnProperty;var k=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),cl=(e,t)=>{for(var i in t)un(e,i,{get:t[i],enumerable:!0})},ul=(e,t,i,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of B0(t))!$0.call(e,n)&&n!==i&&un(e,n,{get:()=>t[n],enumerable:!(r=q0(t,n))||r.enumerable});return e};var se=(e,t,i)=>(i=e!=null?M0(U0(e)):{},ul(t||!e||!e.__esModule?un(i,"default",{value:e,enumerable:!0}):i,e)),z0=e=>ul(un({},"__esModule",{value:!0}),e);var lo=k((mR,ll)=>{"use strict";ll.exports={LOCHDR:30,LOCSIG:67324752,LOCVER:4,LOCFLG:6,LOCHOW:8,LOCTIM:10,LOCCRC:14,LOCSIZ:18,LOCLEN:22,LOCNAM:26,LOCEXT:28,EXTSIG:134695760,EXTHDR:16,EXTCRC:4,EXTSIZ:8,EXTLEN:12,CENHDR:46,CENSIG:33639248,CENVEM:4,CENVER:6,CENFLG:8,CENHOW:10,CENTIM:12,CENCRC:16,CENSIZ:20,CENLEN:24,CENNAM:28,CENEXT:30,CENCOM:32,CENDSK:34,CENATT:36,CENATX:38,CENOFF:42,ENDHDR:22,ENDSIG:101010256,ENDSUB:8,ENDTOT:10,ENDSIZ:12,ENDOFF:16,ENDCOM:20,END64HDR:20,END64SIG:117853008,END64START:4,END64OFF:8,END64NUMDISKS:16,ZIP64SIG:101075792,ZIP64HDR:56,ZIP64LEAD:12,ZIP64SIZE:4,ZIP64VEM:12,ZIP64VER:14,ZIP64DSK:16,ZIP64DSKDIR:20,ZIP64SUB:24,ZIP64TOT:32,ZIP64SIZB:40,ZIP64OFF:48,ZIP64EXTRA:56,STORED:0,SHRUNK:1,REDUCED1:2,REDUCED2:3,REDUCED3:4,REDUCED4:5,IMPLODED:6,DEFLATED:8,ENHANCED_DEFLATED:9,PKWARE:10,BZIP2:12,LZMA:14,IBM_TERSE:18,IBM_LZ77:19,AES_ENCRYPT:99,FLG_ENC:1,FLG_COMP1:2,FLG_COMP2:4,FLG_DESC:8,FLG_ENH:16,FLG_PATCH:32,FLG_STR:64,FLG_EFS:2048,FLG_MSK:4096,FILE:2,BUFFER:1,NONE:0,EF_ID:0,EF_SIZE:2,ID_ZIP64:1,ID_AVINFO:7,ID_PFS:8,ID_OS2:9,ID_NTFS:10,ID_OPENVMS:12,ID_UNIX:13,ID_FORK:14,ID_PATCH:15,ID_X509_PKCS7:20,ID_X509_CERTID_F:21,ID_X509_CERTID_C:22,ID_STRONGENC:23,ID_RECORD_MGT:24,ID_X509_PKCS7_RL:25,ID_IBM1:101,ID_IBM2:102,ID_POSZIP:18064,EF_ZIP64_OR_32:4294967295,EF_ZIP64_OR_16:65535,EF_ZIP64_SUNCOMP:0,EF_ZIP64_SCOMP:8,EF_ZIP64_RHO:16,EF_ZIP64_DSN:24}});var ln=k(dl=>{"use strict";var pl={INVALID_LOC:"Invalid LOC header (bad signature)",INVALID_CEN:"Invalid CEN header (bad signature)",INVALID_END:"Invalid END header (bad signature)",DESCRIPTOR_NOT_EXIST:"No descriptor present",DESCRIPTOR_UNKNOWN:"Unknown descriptor format",DESCRIPTOR_FAULTY:"Descriptor data is malformed",NO_DATA:"Nothing to decompress",BAD_CRC:"CRC32 checksum failed {0}",FILE_IN_THE_WAY:"There is a file in the way: {0}",UNKNOWN_METHOD:"Invalid/unsupported compression method",AVAIL_DATA:"inflate::Available inflate data did not terminate",INVALID_DISTANCE:"inflate::Invalid literal/length or distance code in fixed or dynamic block",TO_MANY_CODES:"inflate::Dynamic block code description: too many length or distance codes",INVALID_REPEAT_LEN:"inflate::Dynamic block code description: repeat more than specified lengths",INVALID_REPEAT_FIRST:"inflate::Dynamic block code description: repeat lengths with no first length",INCOMPLETE_CODES:"inflate::Dynamic block code description: code lengths codes incomplete",INVALID_DYN_DISTANCE:"inflate::Dynamic block code description: invalid distance code lengths",INVALID_CODES_LEN:"inflate::Dynamic block code description: invalid literal/length code lengths",INVALID_STORE_BLOCK:"inflate::Stored block length did not match one's complement",INVALID_BLOCK_TYPE:"inflate::Invalid block type (type == 3)",CANT_EXTRACT_FILE:"Could not extract the file",CANT_OVERRIDE:"Target file already exists",DISK_ENTRY_TOO_LARGE:"Number of disk entries is too large",NO_ZIP:"No zip file was loaded",NO_ENTRY:"Entry doesn't exist",DIRECTORY_CONTENT_ERROR:"A directory cannot have content",FILE_NOT_FOUND:'File not found: "{0}"',NOT_IMPLEMENTED:"Not implemented",INVALID_FILENAME:"Invalid filename",INVALID_FORMAT:"Invalid or unsupported zip format. No END header found",INVALID_PASS_PARAM:"Incompatible password parameter",WRONG_PASSWORD:"Wrong Password",COMMENT_TOO_LONG:"Comment is too long",EXTRA_FIELD_PARSE_ERROR:"Extra field parsing error"};function H0(e){return function(...t){return t.length&&(e=e.replace(/\{(\d)\}/g,(i,r)=>t[r]||"")),new Error("ADM-ZIP: "+e)}}for(let e of Object.keys(pl))dl[e]=H0(pl[e])});var xl=k((xR,gl)=>{"use strict";var G0=require("fs"),ke=require("path"),fl=lo(),V0=ln(),X0=typeof process=="object"&&process.platform==="win32",hl=e=>typeof e=="object"&&e!==null,ml=new Uint32Array(256).map((e,t)=>{for(let i=0;i<8;i++)t&1?t=3988292384^t>>>1:t>>>=1;return t>>>0});function ge(e){this.sep=ke.sep,this.fs=G0,hl(e)&&hl(e.fs)&&typeof e.fs.statSync=="function"&&(this.fs=e.fs)}gl.exports=ge;ge.prototype.makeDir=function(e){let t=this;function i(r){let n=r.split(t.sep)[0];r.split(t.sep).forEach(function(s){if(!(!s||s.substr(-1,1)===":")){n+=t.sep+s;var o;try{o=t.fs.statSync(n)}catch{t.fs.mkdirSync(n)}if(o&&o.isFile())throw V0.FILE_IN_THE_WAY(`"${n}"`)}})}i(e)};ge.prototype.writeFileTo=function(e,t,i,r){let n=this;if(n.fs.existsSync(e)){if(!i)return!1;var s=n.fs.statSync(e);if(s.isDirectory())return!1}var o=ke.dirname(e);n.fs.existsSync(o)||n.makeDir(o);var a;try{a=n.fs.openSync(e,"w",438)}catch{n.fs.chmodSync(e,438),a=n.fs.openSync(e,"w",438)}if(a)try{n.fs.writeSync(a,t,0,t.length,0)}finally{n.fs.closeSync(a)}return n.fs.chmodSync(e,r||438),!0};ge.prototype.writeFileToAsync=function(e,t,i,r,n){typeof r=="function"&&(n=r,r=void 0);let s=this;s.fs.exists(e,function(o){if(o&&!i)return n(!1);s.fs.stat(e,function(a,c){if(o&&c.isDirectory())return n(!1);var u=ke.dirname(e);s.fs.exists(u,function(f){f||s.makeDir(u),s.fs.open(e,"w",438,function(g,x){g?s.fs.chmod(e,438,function(){s.fs.open(e,"w",438,function(l,m){s.fs.write(m,t,0,t.length,0,function(){s.fs.close(m,function(){s.fs.chmod(e,r||438,function(){n(!0)})})})})}):x?s.fs.write(x,t,0,t.length,0,function(){s.fs.close(x,function(){s.fs.chmod(e,r||438,function(){n(!0)})})}):s.fs.chmod(e,r||438,function(){n(!0)})})})})})};ge.prototype.findFiles=function(e){let t=this;function i(r,n,s){typeof n=="boolean"&&(s=n,n=void 0);let o=[];return t.fs.readdirSync(r).forEach(function(a){let c=ke.join(r,a),u=t.fs.statSync(c);(!n||n.test(c))&&o.push(ke.normalize(c)+(u.isDirectory()?t.sep:"")),u.isDirectory()&&s&&(o=o.concat(i(c,n,s)))}),o}return i(e,void 0,!0)};ge.prototype.findFilesAsync=function(e,t){let i=this,r=[];i.fs.readdir(e,function(n,s){if(n)return t(n);let o=s.length;if(!o)return t(null,r);s.forEach(function(a){a=ke.join(e,a),i.fs.stat(a,function(c,u){if(c)return t(c);u&&(r.push(ke.normalize(a)+(u.isDirectory()?i.sep:"")),u.isDirectory()?i.findFilesAsync(a,function(f,g){if(f)return t(f);r=r.concat(g),--o||t(null,r)}):--o||t(null,r))})})})};ge.prototype.getAttributes=function(){};ge.prototype.setAttributes=function(){};ge.crc32update=function(e,t){return ml[(e^t)&255]^e>>>8};ge.crc32=function(e){typeof e=="string"&&(e=Buffer.from(e,"utf8"));let t=e.length,i=-1;for(let r=0;r<t;)i=ge.crc32update(i,e[r++]);return~i>>>0};ge.methodToString=function(e){switch(e){case fl.STORED:return"STORED ("+e+")";case fl.DEFLATED:return"DEFLATED ("+e+")";default:return"UNSUPPORTED ("+e+")"}};ge.canonical=function(e){if(!e)return"";let t=ke.posix.normalize("/"+e.split("\\").join("/"));return ke.join(".",t)};ge.zipnamefix=function(e){if(!e)return"";let t=ke.posix.normalize("/"+e.split("\\").join("/"));return ke.posix.join(".",t)};ge.findLast=function(e,t){if(!Array.isArray(e))throw new TypeError("arr is not array");let i=e.length>>>0;for(let r=i-1;r>=0;r--)if(t(e[r],r,e))return e[r]};ge.sanitize=function(e,t){e=ke.resolve(ke.normalize(e));for(var i=t.split("/"),r=0,n=i.length;r<n;r++){var s=ke.normalize(ke.join(e,i.slice(r,n).join(ke.sep)));if(s.indexOf(e)===0)return s}return ke.normalize(ke.join(e,ke.basename(t)))};ge.toBuffer=function(t,i){return Buffer.isBuffer(t)?t:t instanceof Uint8Array?Buffer.from(t):typeof t=="string"?i(t):Buffer.alloc(0)};ge.readBigUInt64LE=function(e,t){var i=Buffer.from(e.slice(t,t+8));return i.swap64(),parseInt(`0x${i.toString("hex")}`)};ge.fromDOS2Date=function(e){return new Date((e>>25&127)+1980,Math.max((e>>21&15)-1,0),Math.max(e>>16&31,1),e>>11&31,e>>5&63,(e&31)<<1)};ge.fromDate2DOS=function(e){let t=0,i=0;return e.getFullYear()>1979&&(t=(e.getFullYear()-1980&127)<<9|e.getMonth()+1<<5|e.getDate(),i=e.getHours()<<11|e.getMinutes()<<5|e.getSeconds()>>1),t<<16|i};ge.isWin=X0;ge.crcTable=ml});var yl=k((vR,vl)=>{"use strict";var Y0=require("path");vl.exports=function(e,{fs:t}){var i=e||"",r=s(),n=null;function s(){return{directory:!1,readonly:!1,hidden:!1,executable:!1,mtime:0,atime:0}}return i&&t.existsSync(i)?(n=t.statSync(i),r.directory=n.isDirectory(),r.mtime=n.mtime,r.atime=n.atime,r.executable=(73&n.mode)!==0,r.readonly=(128&n.mode)===0,r.hidden=Y0.basename(i)[0]==="."):console.warn("Invalid path: "+i),{get directory(){return r.directory},get readOnly(){return r.readonly},get hidden(){return r.hidden},get mtime(){return r.mtime},get atime(){return r.atime},get executable(){return r.executable},decodeAttributes:function(){},encodeAttributes:function(){},toJSON:function(){return{path:i,isDirectory:r.directory,isReadOnly:r.readonly,isHidden:r.hidden,isExecutable:r.executable,mTime:r.mtime,aTime:r.atime}},toString:function(){return JSON.stringify(this.toJSON(),null,"	")}}}});var wl=k((yR,bl)=>{"use strict";bl.exports={efs:!0,encode:e=>Buffer.from(e,"utf8"),decode:e=>e.toString("utf8")}});var Li=k((bR,Ni)=>{"use strict";Ni.exports=xl();Ni.exports.Constants=lo();Ni.exports.Errors=ln();Ni.exports.FileAttr=yl();Ni.exports.decoder=wl()});var _l=k((wR,El)=>{"use strict";var Wt=Li(),U=Wt.Constants;El.exports=function(){var e=20,t=10,i=0,r=0,n=0,s=0,o=0,a=0,c=0,u=0,f=0,g=0,x=0,l=0,m=0;e|=Wt.isWin?2560:768,i|=U.FLG_EFS;let v={extraLen:0},_=p=>Math.max(0,p)>>>0,E=p=>Math.max(0,p)&65535,w=p=>Math.max(0,p)&255;return n=Wt.fromDate2DOS(new Date),{get made(){return e},set made(p){e=p},get version(){return t},set version(p){t=p},get flags(){return i},set flags(p){i=p},get flags_efs(){return(i&U.FLG_EFS)>0},set flags_efs(p){p?i|=U.FLG_EFS:i&=~U.FLG_EFS},get flags_desc(){return(i&U.FLG_DESC)>0},set flags_desc(p){p?i|=U.FLG_DESC:i&=~U.FLG_DESC},get method(){return r},set method(p){switch(p){case U.STORED:this.version=10;case U.DEFLATED:default:this.version=20}r=p},get time(){return Wt.fromDOS2Date(this.timeval)},set time(p){this.timeval=Wt.fromDate2DOS(p)},get timeval(){return n},set timeval(p){n=_(p)},get timeHighByte(){return w(n>>>8)},get crc(){return s},set crc(p){s=_(p)},get compressedSize(){return o},set compressedSize(p){o=_(p)},get size(){return a},set size(p){a=_(p)},get fileNameLength(){return c},set fileNameLength(p){c=p},get extraLength(){return u},set extraLength(p){u=p},get extraLocalLength(){return v.extraLen},set extraLocalLength(p){v.extraLen=p},get commentLength(){return f},set commentLength(p){f=p},get diskNumStart(){return g},set diskNumStart(p){g=_(p)},get inAttr(){return x},set inAttr(p){x=_(p)},get attr(){return l},set attr(p){l=_(p)},get fileAttr(){return(l||0)>>16&4095},get offset(){return m},set offset(p){m=_(p)},get encrypted(){return(i&U.FLG_ENC)===U.FLG_ENC},get centralHeaderSize(){return U.CENHDR+c+u+f},get realDataOffset(){return m+U.LOCHDR+v.fnameLen+v.extraLen},get localHeader(){return v},loadLocalHeaderFromBinary:function(p){var d=p.slice(m,m+U.LOCHDR);if(d.readUInt32LE(0)!==U.LOCSIG)throw Wt.Errors.INVALID_LOC();v.version=d.readUInt16LE(U.LOCVER),v.flags=d.readUInt16LE(U.LOCFLG),v.method=d.readUInt16LE(U.LOCHOW),v.time=d.readUInt32LE(U.LOCTIM),v.crc=d.readUInt32LE(U.LOCCRC),v.compressedSize=d.readUInt32LE(U.LOCSIZ),v.size=d.readUInt32LE(U.LOCLEN),v.fnameLen=d.readUInt16LE(U.LOCNAM),v.extraLen=d.readUInt16LE(U.LOCEXT);let h=m+U.LOCHDR+v.fnameLen,b=h+v.extraLen;return p.slice(h,b)},loadFromBinary:function(p){if(p.length!==U.CENHDR||p.readUInt32LE(0)!==U.CENSIG)throw Wt.Errors.INVALID_CEN();e=p.readUInt16LE(U.CENVEM),t=p.readUInt16LE(U.CENVER),i=p.readUInt16LE(U.CENFLG),r=p.readUInt16LE(U.CENHOW),n=p.readUInt32LE(U.CENTIM),s=p.readUInt32LE(U.CENCRC),o=p.readUInt32LE(U.CENSIZ),a=p.readUInt32LE(U.CENLEN),c=p.readUInt16LE(U.CENNAM),u=p.readUInt16LE(U.CENEXT),f=p.readUInt16LE(U.CENCOM),g=p.readUInt16LE(U.CENDSK),x=p.readUInt16LE(U.CENATT),l=p.readUInt32LE(U.CENATX),m=p.readUInt32LE(U.CENOFF)},localHeaderToBinary:function(){var p=Buffer.alloc(U.LOCHDR);return p.writeUInt32LE(U.LOCSIG,0),p.writeUInt16LE(t,U.LOCVER),p.writeUInt16LE(i,U.LOCFLG),p.writeUInt16LE(r,U.LOCHOW),p.writeUInt32LE(n,U.LOCTIM),p.writeUInt32LE(s,U.LOCCRC),p.writeUInt32LE(o,U.LOCSIZ),p.writeUInt32LE(a,U.LOCLEN),p.writeUInt16LE(c,U.LOCNAM),p.writeUInt16LE(v.extraLen,U.LOCEXT),p},centralHeaderToBinary:function(){var p=Buffer.alloc(U.CENHDR+c+u+f);return p.writeUInt32LE(U.CENSIG,0),p.writeUInt16LE(e,U.CENVEM),p.writeUInt16LE(t,U.CENVER),p.writeUInt16LE(i,U.CENFLG),p.writeUInt16LE(r,U.CENHOW),p.writeUInt32LE(n,U.CENTIM),p.writeUInt32LE(s,U.CENCRC),p.writeUInt32LE(o,U.CENSIZ),p.writeUInt32LE(a,U.CENLEN),p.writeUInt16LE(c,U.CENNAM),p.writeUInt16LE(u,U.CENEXT),p.writeUInt16LE(f,U.CENCOM),p.writeUInt16LE(g,U.CENDSK),p.writeUInt16LE(x,U.CENATT),p.writeUInt32LE(l,U.CENATX),p.writeUInt32LE(m,U.CENOFF),p},toJSON:function(){let p=function(d){return d+" bytes"};return{made:e,version:t,flags:i,method:Wt.methodToString(r),time:this.time,crc:"0x"+s.toString(16).toUpperCase(),compressedSize:p(o),size:p(a),fileNameLength:p(c),extraLength:p(u),commentLength:p(f),diskNumStart:g,inAttr:x,attr:l,offset:m,centralHeaderSize:p(U.CENHDR+c+u+f)}},toString:function(){return JSON.stringify(this.toJSON(),null,"	")}}}});var Sl=k((ER,Tl)=>{"use strict";var ki=Li(),ue=ki.Constants;Tl.exports=function(){var e=0,t=0,i=0,r=0,n=0;return{get diskEntries(){return e},set diskEntries(s){e=t=s},get totalEntries(){return t},set totalEntries(s){t=e=s},get size(){return i},set size(s){i=s},get offset(){return r},set offset(s){r=s},get commentLength(){return n},set commentLength(s){n=s},get mainHeaderSize(){return ue.ENDHDR+n},loadFromBinary:function(s){if((s.length!==ue.ENDHDR||s.readUInt32LE(0)!==ue.ENDSIG)&&(s.length<ue.ZIP64HDR||s.readUInt32LE(0)!==ue.ZIP64SIG))throw ki.Errors.INVALID_END();s.readUInt32LE(0)===ue.ENDSIG?(e=s.readUInt16LE(ue.ENDSUB),t=s.readUInt16LE(ue.ENDTOT),i=s.readUInt32LE(ue.ENDSIZ),r=s.readUInt32LE(ue.ENDOFF),n=s.readUInt16LE(ue.ENDCOM)):(e=ki.readBigUInt64LE(s,ue.ZIP64SUB),t=ki.readBigUInt64LE(s,ue.ZIP64TOT),i=ki.readBigUInt64LE(s,ue.ZIP64SIZE),r=ki.readBigUInt64LE(s,ue.ZIP64OFF),n=0)},toBinary:function(){var s=Buffer.alloc(ue.ENDHDR+n);return s.writeUInt32LE(ue.ENDSIG,0),s.writeUInt32LE(0,4),s.writeUInt16LE(e,ue.ENDSUB),s.writeUInt16LE(t,ue.ENDTOT),s.writeUInt32LE(i,ue.ENDSIZ),s.writeUInt32LE(r,ue.ENDOFF),s.writeUInt16LE(n,ue.ENDCOM),s.fill(" ",ue.ENDHDR),s},toJSON:function(){let s=function(o,a){let c=o.toString(16).toUpperCase();for(;c.length<a;)c="0"+c;return"0x"+c};return{diskEntries:e,totalEntries:t,size:i+" bytes",offset:s(r,4),commentLength:n}},toString:function(){return JSON.stringify(this.toJSON(),null,"	")}}}});var fo=k(po=>{"use strict";po.EntryHeader=_l();po.MainHeader=Sl()});var Ol=k((TR,Cl)=>{"use strict";Cl.exports=function(e){var t=require("zlib"),i={chunkSize:(parseInt(e.length/1024)+1)*1024};return{deflate:function(){return t.deflateRawSync(e,i)},deflateAsync:function(r){var n=t.createDeflateRaw(i),s=[],o=0;n.on("data",function(a){s.push(a),o+=a.length}),n.on("end",function(){var a=Buffer.alloc(o),c=0;a.fill(0);for(var u=0;u<s.length;u++){var f=s[u];f.copy(a,c),c+=f.length}r&&r(a)}),n.end(e)}}}});var Dl=k((SR,Al)=>{"use strict";var W0=+(process.versions?process.versions.node:"").split(".")[0]||0;Al.exports=function(e,t){var i=require("zlib");let r=W0>=15&&t>0?{maxOutputLength:t}:{};return{inflate:function(){return i.inflateRawSync(e,r)},inflateAsync:function(n){var s=i.createInflateRaw(r),o=[],a=0;s.on("data",function(c){o.push(c),a+=c.length}),s.on("end",function(){var c=Buffer.alloc(a),u=0;c.fill(0);for(var f=0;f<o.length;f++){var g=o[f];g.copy(c,u),u+=g.length}n&&n(c)}),s.end(e)}}}});var Rl=k((CR,kl)=>{"use strict";var{randomFillSync:Il}=require("crypto"),K0=ln(),J0=new Uint32Array(256).map((e,t)=>{for(let i=0;i<8;i++)t&1?t=t>>>1^3988292384:t>>>=1;return t>>>0}),Ll=(e,t)=>Math.imul(e,t)>>>0,Nl=(e,t)=>J0[(e^t)&255]^e>>>8,ur=()=>typeof Il=="function"?Il(Buffer.alloc(12)):ur.node();ur.node=()=>{let e=Buffer.alloc(12),t=e.length;for(let i=0;i<t;i++)e[i]=Math.random()*256&255;return e};var pn={genSalt:ur};function dn(e){let t=Buffer.isBuffer(e)?e:Buffer.from(e);this.keys=new Uint32Array([305419896,591751049,878082192]);for(let i=0;i<t.length;i++)this.updateKeys(t[i])}dn.prototype.updateKeys=function(e){let t=this.keys;return t[0]=Nl(t[0],e),t[1]+=t[0]&255,t[1]=Ll(t[1],134775813)+1,t[2]=Nl(t[2],t[1]>>>24),e};dn.prototype.next=function(){let e=(this.keys[2]|2)>>>0;return Ll(e,e^1)>>8&255};function Z0(e){let t=new dn(e);return function(i){let r=Buffer.alloc(i.length),n=0;for(let s of i)r[n++]=t.updateKeys(s^t.next());return r}}function Q0(e){let t=new dn(e);return function(i,r,n=0){r||(r=Buffer.alloc(i.length));for(let s of i){let o=t.next();r[n++]=s^o,t.updateKeys(s)}return r}}function eE(e,t,i){if(!e||!Buffer.isBuffer(e)||e.length<12)return Buffer.alloc(0);let r=Z0(i),n=r(e.slice(0,12)),s=(t.flags&8)===8?t.timeHighByte:t.crc>>>24;if(n[11]!==s)throw K0.WRONG_PASSWORD();return r(e.slice(12))}function tE(e){Buffer.isBuffer(e)&&e.length>=12?pn.genSalt=function(){return e.slice(0,12)}:e==="node"?pn.genSalt=ur.node:pn.genSalt=ur}function iE(e,t,i,r=!1){e==null&&(e=Buffer.alloc(0)),Buffer.isBuffer(e)||(e=Buffer.from(e.toString()));let n=Q0(i),s=pn.genSalt();s[11]=t.crc>>>24&255,r&&(s[10]=t.crc>>>16&255);let o=Buffer.alloc(e.length+12);return n(s,o),n(e,o,12)}kl.exports={decrypt:eE,encrypt:iE,_salter:tE}});var Pl=k(fn=>{"use strict";fn.Deflater=Ol();fn.Inflater=Dl();fn.ZipCrypto=Rl()});var mo=k((AR,Fl)=>{"use strict";var re=Li(),rE=fo(),xe=re.Constants,ho=Pl();Fl.exports=function(e,t){var i=new rE.EntryHeader,r=Buffer.alloc(0),n=Buffer.alloc(0),s=!1,o=null,a=Buffer.alloc(0),c=Buffer.alloc(0),u=!0;let f=e,g=typeof f.decoder=="object"?f.decoder:re.decoder;u=g.hasOwnProperty("efs")?g.efs:!1;function x(){return!t||!(t instanceof Uint8Array)?Buffer.alloc(0):(c=i.loadLocalHeaderFromBinary(t),t.slice(i.realDataOffset,i.realDataOffset+i.compressedSize))}function l(p){if(i.flags_desc){let d={},h=i.realDataOffset+i.compressedSize;if(t.readUInt32LE(h)==xe.LOCSIG||t.readUInt32LE(h)==xe.CENSIG)throw re.Errors.DESCRIPTOR_NOT_EXIST();if(t.readUInt32LE(h)==xe.EXTSIG)d.crc=t.readUInt32LE(h+xe.EXTCRC),d.compressedSize=t.readUInt32LE(h+xe.EXTSIZ),d.size=t.readUInt32LE(h+xe.EXTLEN);else if(t.readUInt16LE(h+12)===19280)d.crc=t.readUInt32LE(h+xe.EXTCRC-4),d.compressedSize=t.readUInt32LE(h+xe.EXTSIZ-4),d.size=t.readUInt32LE(h+xe.EXTLEN-4);else throw re.Errors.DESCRIPTOR_UNKNOWN();if(d.compressedSize!==i.compressedSize||d.size!==i.size||d.crc!==i.crc)throw re.Errors.DESCRIPTOR_FAULTY();if(re.crc32(p)!==d.crc)return!1}else if(re.crc32(p)!==i.localHeader.crc)return!1;return!0}function m(p,d,h){if(typeof d>"u"&&typeof p=="string"&&(h=p,p=void 0),s)return p&&d&&d(Buffer.alloc(0),re.Errors.DIRECTORY_CONTENT_ERROR()),Buffer.alloc(0);var b=x();if(b.length===0)return p&&d&&d(b),b;if(i.encrypted){if(typeof h!="string"&&!Buffer.isBuffer(h))throw re.Errors.INVALID_PASS_PARAM();b=ho.ZipCrypto.decrypt(b,i,h)}var O=Buffer.alloc(i.size);switch(i.method){case re.Constants.STORED:if(b.copy(O),l(O))return p&&d&&d(O),O;throw p&&d&&d(O,re.Errors.BAD_CRC()),re.Errors.BAD_CRC();case re.Constants.DEFLATED:var D=new ho.Inflater(b,i.size);if(p)D.inflateAsync(function(A){A.copy(A,0),d&&(l(A)?d(A):d(A,re.Errors.BAD_CRC()))});else{if(D.inflate(O).copy(O,0),!l(O))throw re.Errors.BAD_CRC(`"${g.decode(r)}"`);return O}break;default:throw p&&d&&d(Buffer.alloc(0),re.Errors.UNKNOWN_METHOD()),re.Errors.UNKNOWN_METHOD()}}function v(p,d){if((!o||!o.length)&&Buffer.isBuffer(t))return p&&d&&d(x()),x();if(o.length&&!s){var h;switch(i.method){case re.Constants.STORED:return i.compressedSize=i.size,h=Buffer.alloc(o.length),o.copy(h),p&&d&&d(h),h;default:case re.Constants.DEFLATED:var b=new ho.Deflater(o);if(p)b.deflateAsync(function(D){h=Buffer.alloc(D.length),i.compressedSize=D.length,D.copy(h),d&&d(h)});else{var O=b.deflate();return i.compressedSize=O.length,O}b=null;break}}else if(p&&d)d(Buffer.alloc(0));else return Buffer.alloc(0)}function _(p,d){return(p.readUInt32LE(d+4)<<4)+p.readUInt32LE(d)}function E(p){try{for(var d=0,h,b,O;d+4<p.length;)h=p.readUInt16LE(d),d+=2,b=p.readUInt16LE(d),d+=2,O=p.slice(d,d+b),d+=b,xe.ID_ZIP64===h&&w(O)}catch{throw re.Errors.EXTRA_FIELD_PARSE_ERROR()}}function w(p){var d,h,b,O;p.length>=xe.EF_ZIP64_SCOMP&&(d=_(p,xe.EF_ZIP64_SUNCOMP),i.size===xe.EF_ZIP64_OR_32&&(i.size=d)),p.length>=xe.EF_ZIP64_RHO&&(h=_(p,xe.EF_ZIP64_SCOMP),i.compressedSize===xe.EF_ZIP64_OR_32&&(i.compressedSize=h)),p.length>=xe.EF_ZIP64_DSN&&(b=_(p,xe.EF_ZIP64_RHO),i.offset===xe.EF_ZIP64_OR_32&&(i.offset=b)),p.length>=xe.EF_ZIP64_DSN+4&&(O=p.readUInt32LE(xe.EF_ZIP64_DSN),i.diskNumStart===xe.EF_ZIP64_OR_16&&(i.diskNumStart=O))}return{get entryName(){return g.decode(r)},get rawEntryName(){return r},set entryName(p){r=re.toBuffer(p,g.encode);var d=r[r.length-1];s=d===47||d===92,i.fileNameLength=r.length},get efs(){return typeof u=="function"?u(this.entryName):u},get extra(){return a},set extra(p){a=p,i.extraLength=p.length,E(p)},get comment(){return g.decode(n)},set comment(p){if(n=re.toBuffer(p,g.encode),i.commentLength=n.length,n.length>65535)throw re.Errors.COMMENT_TOO_LONG()},get name(){var p=g.decode(r);return s?p.substr(p.length-1).split("/").pop():p.split("/").pop()},get isDirectory(){return s},getCompressedData:function(){return v(!1,null)},getCompressedDataAsync:function(p){v(!0,p)},setData:function(p){o=re.toBuffer(p,re.decoder.encode),!s&&o.length?(i.size=o.length,i.method=re.Constants.DEFLATED,i.crc=re.crc32(p),i.changed=!0):i.method=re.Constants.STORED},getData:function(p){return i.changed?o:m(!1,null,p)},getDataAsync:function(p,d){i.changed?p(o):m(!0,p,d)},set attr(p){i.attr=p},get attr(){return i.attr},set header(p){i.loadFromBinary(p)},get header(){return i},packCentralHeader:function(){i.flags_efs=this.efs,i.extraLength=a.length;var p=i.centralHeaderToBinary(),d=re.Constants.CENHDR;return r.copy(p,d),d+=r.length,a.copy(p,d),d+=i.extraLength,n.copy(p,d),p},packLocalHeader:function(){let p=0;i.flags_efs=this.efs,i.extraLocalLength=c.length;let d=i.localHeaderToBinary(),h=Buffer.alloc(d.length+r.length+i.extraLocalLength);return d.copy(h,p),p+=d.length,r.copy(h,p),p+=r.length,c.copy(h,p),p+=c.length,h},toJSON:function(){let p=function(d){return"<"+(d&&d.length+" bytes buffer"||"null")+">"};return{entryName:this.entryName,name:this.name,comment:this.comment,isDirectory:this.isDirectory,header:i.toJSON(),compressedData:p(t),data:p(o)}},toString:function(){return JSON.stringify(this.toJSON(),null,"	")}}}});var ql=k((DR,Ml)=>{"use strict";var jl=mo(),nE=fo(),Be=Li();Ml.exports=function(e,t){var i=[],r={},n=Buffer.alloc(0),s=new nE.MainHeader,o=!1,a=null;let c=new Set,u=t,{noSort:f,decoder:g}=u;e?m(u.readEntries):o=!0;function x(){let _=new Set;for(let E of Object.keys(r)){let w=E.split("/");if(w.pop(),!!w.length)for(let p=0;p<w.length;p++){let d=w.slice(0,p+1).join("/")+"/";_.add(d)}}for(let E of _)if(!(E in r)){let w=new jl(u);w.entryName=E,w.attr=16,w.temporary=!0,i.push(w),r[w.entryName]=w,c.add(w)}}function l(){if(o=!0,r={},s.diskEntries>(e.length-s.offset)/Be.Constants.CENHDR)throw Be.Errors.DISK_ENTRY_TOO_LARGE();i=new Array(s.diskEntries);for(var _=s.offset,E=0;E<i.length;E++){var w=_,p=new jl(u,e);p.header=e.slice(w,w+=Be.Constants.CENHDR),p.entryName=e.slice(w,w+=p.header.fileNameLength),p.header.extraLength&&(p.extra=e.slice(w,w+=p.header.extraLength)),p.header.commentLength&&(p.comment=e.slice(w,w+p.header.commentLength)),_+=p.header.centralHeaderSize,i[E]=p,r[p.entryName]=p}c.clear(),x()}function m(_){var E=e.length-Be.Constants.ENDHDR,w=Math.max(0,E-65535),p=w,d=e.length,h=-1,b=0;for((typeof u.trailingSpace=="boolean"?u.trailingSpace:!1)&&(w=0),E;E>=p;E--)if(e[E]===80){if(e.readUInt32LE(E)===Be.Constants.ENDSIG){h=E,b=E,d=E+Be.Constants.ENDHDR,p=E-Be.Constants.END64HDR;continue}if(e.readUInt32LE(E)===Be.Constants.END64SIG){p=w;continue}if(e.readUInt32LE(E)===Be.Constants.ZIP64SIG){h=E,d=E+Be.readBigUInt64LE(e,E+Be.Constants.ZIP64SIZE)+Be.Constants.ZIP64LEAD;break}}if(h==-1)throw Be.Errors.INVALID_FORMAT();s.loadFromBinary(e.slice(h,d)),s.commentLength&&(n=e.slice(b+Be.Constants.ENDHDR)),_&&l()}function v(){i.length>1&&!f&&i.sort((_,E)=>_.entryName.toLowerCase().localeCompare(E.entryName.toLowerCase()))}return{get entries(){return o||l(),i.filter(_=>!c.has(_))},get comment(){return g.decode(n)},set comment(_){n=Be.toBuffer(_,g.encode),s.commentLength=n.length},getEntryCount:function(){return o?i.length:s.diskEntries},forEach:function(_){this.entries.forEach(_)},getEntry:function(_){return o||l(),r[_]||null},setEntry:function(_){o||l(),i.push(_),r[_.entryName]=_,s.totalEntries=i.length},deleteFile:function(_,E=!0){o||l();let w=r[_];this.getEntryChildren(w,E).map(d=>d.entryName).forEach(this.deleteEntry)},deleteEntry:function(_){o||l();let E=r[_],w=i.indexOf(E);w>=0&&(i.splice(w,1),delete r[_],s.totalEntries=i.length)},getEntryChildren:function(_,E=!0){if(o||l(),typeof _=="object")if(_.isDirectory&&E){let w=[],p=_.entryName;for(let d of i)d.entryName.startsWith(p)&&w.push(d);return w}else return[_];return[]},getChildCount:function(_){if(_&&_.isDirectory){let E=this.getEntryChildren(_);return E.includes(_)?E.length-1:E.length}return 0},compressToBuffer:function(){o||l(),v();let _=[],E=[],w=0,p=0;s.size=0,s.offset=0;let d=0;for(let O of this.entries){let D=O.getCompressedData();O.header.offset=p;let A=O.packLocalHeader(),T=A.length+D.length;p+=T,_.push(A),_.push(D);let N=O.packCentralHeader();E.push(N),s.size+=N.length,w+=T+N.length,d++}w+=s.mainHeaderSize,s.offset=p,s.totalEntries=d,p=0;let h=Buffer.alloc(w);for(let O of _)O.copy(h,p),p+=O.length;for(let O of E)O.copy(h,p),p+=O.length;let b=s.toBinary();return n&&n.copy(b,Be.Constants.ENDHDR),b.copy(h,p),e=h,o=!1,h},toAsyncBuffer:function(_,E,w,p){try{o||l(),v();let d=[],h=[],b=0,O=0,D=0;s.size=0,s.offset=0;let A=function(T){if(T.length>0){let N=T.shift(),C=N.entryName+N.extra.toString();w&&w(C),N.getCompressedDataAsync(function(F){p&&p(C),N.header.offset=O;let z=N.packLocalHeader(),H=z.length+F.length;O+=H,d.push(z),d.push(F);let V=N.packCentralHeader();h.push(V),s.size+=V.length,b+=H+V.length,D++,A(T)})}else{b+=s.mainHeaderSize,s.offset=O,s.totalEntries=D,O=0;let N=Buffer.alloc(b);d.forEach(function(F){F.copy(N,O),O+=F.length}),h.forEach(function(F){F.copy(N,O),O+=F.length});let C=s.toBinary();n&&n.copy(C,Be.Constants.ENDHDR),C.copy(N,O),e=N,o=!1,_(N)}};A(Array.from(this.entries))}catch(d){E(d)}}}}});var $l=k((IR,Ul)=>{"use strict";var le=Li(),ve=require("path"),sE=mo(),oE=ql(),ui=(...e)=>le.findLast(e,t=>typeof t=="boolean"),Bl=(...e)=>le.findLast(e,t=>typeof t=="string"),aE=(...e)=>le.findLast(e,t=>typeof t=="function"),cE={noSort:!1,readEntries:!1,method:le.Constants.NONE,fs:null};Ul.exports=function(e,t){let i=null,r=Object.assign(Object.create(null),cE);e&&typeof e=="object"&&(e instanceof Uint8Array||(Object.assign(r,e),e=r.input?r.input:void 0,r.input&&delete r.input),Buffer.isBuffer(e)&&(i=e,r.method=le.Constants.BUFFER,e=void 0)),Object.assign(r,t);let n=new le(r);if((typeof r.decoder!="object"||typeof r.decoder.encode!="function"||typeof r.decoder.decode!="function")&&(r.decoder=le.decoder),e&&typeof e=="string")if(n.fs.existsSync(e))r.method=le.Constants.FILE,r.filename=e,i=n.fs.readFileSync(e);else throw le.Errors.INVALID_FILENAME();let s=new oE(i,r),{canonical:o,sanitize:a,zipnamefix:c}=le;function u(l){if(l&&s){var m;if(typeof l=="string"&&(m=s.getEntry(ve.posix.normalize(l))),typeof l=="object"&&typeof l.entryName<"u"&&typeof l.header<"u"&&(m=s.getEntry(l.entryName)),m)return m}return null}function f(l){let{join:m,normalize:v,sep:_}=ve.posix;return m(".",v(_+l.split("\\").join(_)+_))}function g(l){return l instanceof RegExp?function(m){return function(v){return m.test(v)}}(l):typeof l!="function"?()=>!0:l}let x=(l,m)=>{let v=m.slice(-1);return v=v===n.sep?n.sep:"",ve.relative(l,m)+v};return{readFile:function(l,m){var v=u(l);return v&&v.getData(m)||null},childCount:function(l){let m=u(l);if(m)return s.getChildCount(m)},readFileAsync:function(l,m){var v=u(l);v?v.getDataAsync(m):m(null,"getEntry failed for:"+l)},readAsText:function(l,m){var v=u(l);if(v){var _=v.getData();if(_&&_.length)return _.toString(m||"utf8")}return""},readAsTextAsync:function(l,m,v){var _=u(l);_?_.getDataAsync(function(E,w){if(w){m(E,w);return}E&&E.length?m(E.toString(v||"utf8")):m("")}):m("")},deleteFile:function(l,m=!0){var v=u(l);v&&s.deleteFile(v.entryName,m)},deleteEntry:function(l){var m=u(l);m&&s.deleteEntry(m.entryName)},addZipComment:function(l){s.comment=l},getZipComment:function(){return s.comment||""},addZipEntryComment:function(l,m){var v=u(l);v&&(v.comment=m)},getZipEntryComment:function(l){var m=u(l);return m&&m.comment||""},updateFile:function(l,m){var v=u(l);v&&v.setData(m)},addLocalFile:function(l,m,v,_){if(n.fs.existsSync(l)){m=m?f(m):"";let E=ve.win32.basename(ve.win32.normalize(l));m+=v||E;let w=n.fs.statSync(l),p=w.isFile()?n.fs.readFileSync(l):Buffer.alloc(0);w.isDirectory()&&(m+=n.sep),this.addFile(m,p,_,w)}else throw le.Errors.FILE_NOT_FOUND(l)},addLocalFileAsync:function(l,m){l=typeof l=="object"?l:{localPath:l};let v=ve.resolve(l.localPath),{comment:_}=l,{zipPath:E,zipName:w}=l,p=this;n.fs.stat(v,function(d,h){if(d)return m(d,!1);E=E?f(E):"";let b=ve.win32.basename(ve.win32.normalize(v));if(E+=w||b,h.isFile())n.fs.readFile(v,function(O,D){return O?m(O,!1):(p.addFile(E,D,_,h),setImmediate(m,void 0,!0))});else if(h.isDirectory())return E+=n.sep,p.addFile(E,Buffer.alloc(0),_,h),setImmediate(m,void 0,!0)})},addLocalFolder:function(l,m,v){if(v=g(v),m=m?f(m):"",l=ve.normalize(l),n.fs.existsSync(l)){let _=n.findFiles(l),E=this;if(_.length)for(let w of _){let p=ve.join(m,x(l,w));v(p)&&E.addLocalFile(w,ve.dirname(p))}}else throw le.Errors.FILE_NOT_FOUND(l)},addLocalFolderAsync:function(l,m,v,_){_=g(_),v=v?f(v):"",l=ve.normalize(l);var E=this;n.fs.open(l,"r",function(w){if(w&&w.code==="ENOENT")m(void 0,le.Errors.FILE_NOT_FOUND(l));else if(w)m(void 0,w);else{var p=n.findFiles(l),d=-1,h=function(){if(d+=1,d<p.length){var b=p[d],O=x(l,b).split("\\").join("/");O=O.normalize("NFD").replace(/[\u0300-\u036f]/g,"").replace(/[^\x20-\x7E]/g,""),_(O)?n.fs.stat(b,function(D,A){D&&m(void 0,D),A.isFile()?n.fs.readFile(b,function(T,N){T?m(void 0,T):(E.addFile(v+O,N,"",A),h())}):(E.addFile(v+O+"/",Buffer.alloc(0),"",A),h())}):process.nextTick(()=>{h()})}else m(!0,void 0)};h()}})},addLocalFolderAsync2:function(l,m){let v=this;l=typeof l=="object"?l:{localPath:l},localPath=ve.resolve(f(l.localPath));let{zipPath:_,filter:E,namefix:w}=l;E instanceof RegExp?E=function(h){return function(b){return h.test(b)}}(E):typeof E!="function"&&(E=function(){return!0}),_=_?f(_):"",w=="latin1"&&(w=h=>h.normalize("NFD").replace(/[\u0300-\u036f]/g,"").replace(/[^\x20-\x7E]/g,"")),typeof w!="function"&&(w=h=>h);let p=h=>ve.join(_,w(x(localPath,h))),d=h=>ve.win32.basename(ve.win32.normalize(w(h)));n.fs.open(localPath,"r",function(h){h&&h.code==="ENOENT"?m(void 0,le.Errors.FILE_NOT_FOUND(localPath)):h?m(void 0,h):n.findFilesAsync(localPath,function(b,O){if(b)return m(b);O=O.filter(D=>E(p(D))),O.length||m(void 0,!1),setImmediate(O.reverse().reduce(function(D,A){return function(T,N){if(T||N===!1)return setImmediate(D,T,!1);v.addLocalFileAsync({localPath:A,zipPath:ve.dirname(p(A)),zipName:d(A)},D)}},m))})})},addLocalFolderPromise:function(l,m){return new Promise((v,_)=>{this.addLocalFolderAsync2(Object.assign({localPath:l},m),(E,w)=>{E&&_(E),w&&v(this)})})},addFile:function(l,m,v,_){l=c(l);let E=u(l),w=E!=null;w||(E=new sE(r),E.entryName=l),E.comment=v||"";let p=typeof _=="object"&&_ instanceof n.fs.Stats;p&&(E.header.time=_.mtime);var d=E.isDirectory?16:0;let h=E.isDirectory?16384:32768;return p?h|=4095&_.mode:typeof _=="number"?h|=4095&_:h|=E.isDirectory?493:420,d=(d|h<<16)>>>0,E.attr=d,E.setData(m),w||s.setEntry(E),E},getEntries:function(l){return s.password=l,s?s.entries:[]},getEntry:function(l){return u(l)},getEntryCount:function(){return s.getEntryCount()},forEach:function(l){return s.forEach(l)},extractEntryTo:function(l,m,v,_,E,w){_=ui(!1,_),E=ui(!1,E),v=ui(!0,v),w=Bl(E,w);var p=u(l);if(!p)throw le.Errors.NO_ENTRY();var d=o(p.entryName),h=a(m,w&&!p.isDirectory?w:v?d:ve.basename(d));if(p.isDirectory){var b=s.getEntryChildren(p);return b.forEach(function(A){if(A.isDirectory)return;var T=A.getData();if(!T)throw le.Errors.CANT_EXTRACT_FILE();var N=o(A.entryName),C=a(m,v?N:ve.basename(N));let F=E?A.header.fileAttr:void 0;n.writeFileTo(C,T,_,F)}),!0}var O=p.getData(s.password);if(!O)throw le.Errors.CANT_EXTRACT_FILE();if(n.fs.existsSync(h)&&!_)throw le.Errors.CANT_OVERRIDE();let D=E?l.header.fileAttr:void 0;return n.writeFileTo(h,O,_,D),!0},test:function(l){if(!s)return!1;for(var m in s.entries)try{if(m.isDirectory)continue;var v=s.entries[m].getData(l);if(!v)return!1}catch{return!1}return!0},extractAllTo:function(l,m,v,_){if(v=ui(!1,v),_=Bl(v,_),m=ui(!1,m),!s)throw le.Errors.NO_ZIP();s.entries.forEach(function(E){var w=a(l,o(E.entryName));if(E.isDirectory){n.makeDir(w);return}var p=E.getData(_);if(!p)throw le.Errors.CANT_EXTRACT_FILE();let d=v?E.header.fileAttr:void 0;n.writeFileTo(w,p,m,d);try{n.fs.utimesSync(w,E.header.time,E.header.time)}catch{throw le.Errors.CANT_EXTRACT_FILE()}})},extractAllToAsync:function(l,m,v,_){if(_=aE(m,v,_),v=ui(!1,v),m=ui(!1,m),!_)return new Promise((h,b)=>{this.extractAllToAsync(l,m,v,function(O){O?b(O):h(this)})});if(!s){_(le.Errors.NO_ZIP());return}l=ve.resolve(l);let E=h=>a(l,ve.normalize(o(h.entryName))),w=(h,b)=>new Error(h+': "'+b+'"'),p=[],d=[];s.entries.forEach(h=>{h.isDirectory?p.push(h):d.push(h)});for(let h of p){let b=E(h),O=v?h.header.fileAttr:void 0;try{n.makeDir(b),O&&n.fs.chmodSync(b,O),n.fs.utimesSync(b,h.header.time,h.header.time)}catch{_(w("Unable to create folder",b))}}d.reverse().reduce(function(h,b){return function(O){if(O)h(O);else{let D=ve.normalize(o(b.entryName)),A=a(l,D);b.getDataAsync(function(T,N){if(N)h(N);else if(!T)h(le.Errors.CANT_EXTRACT_FILE());else{let C=v?b.header.fileAttr:void 0;n.writeFileToAsync(A,T,m,C,function(F){F||h(w("Unable to write file",A)),n.fs.utimes(A,b.header.time,b.header.time,function(z){z?h(w("Unable to set times",A)):h()})})}})}}},_)()},writeZip:function(l,m){if(arguments.length===1&&typeof l=="function"&&(m=l,l=""),!l&&r.filename&&(l=r.filename),!!l){var v=s.compressToBuffer();if(v){var _=n.writeFileTo(l,v,!0);typeof m=="function"&&m(_?null:new Error("failed"),"")}}},writeZipPromise:function(l,m){let{overwrite:v,perm:_}=Object.assign({overwrite:!0},m);return new Promise((E,w)=>{!l&&r.filename&&(l=r.filename),l||w("ADM-ZIP: ZIP File Name Missing"),this.toBufferPromise().then(p=>{let d=h=>h?E(h):w("ADM-ZIP: Wasn't able to write zip file");n.writeFileToAsync(l,p,v,_,d)},w)})},toBufferPromise:function(){return new Promise((l,m)=>{s.toAsyncBuffer(l,m)})},toBuffer:function(l,m,v,_){return typeof l=="function"?(s.toAsyncBuffer(l,m,v,_),null):s.compressToBuffer()}}}});var Vl=k((NR,Gl)=>{"use strict";function uE(e,t){var i=e;t.slice(0,-1).forEach(function(n){i=i[n]||{}});var r=t[t.length-1];return r in i}function zl(e){return typeof e=="number"||/^0x[0-9a-f]+$/i.test(e)?!0:/^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(e)}function Hl(e,t){return t==="constructor"&&typeof e[t]=="function"||t==="__proto__"}Gl.exports=function(e,t){t||(t={});var i={bools:{},strings:{},unknownFn:null};typeof t.unknown=="function"&&(i.unknownFn=t.unknown),typeof t.boolean=="boolean"&&t.boolean?i.allBools=!0:[].concat(t.boolean).filter(Boolean).forEach(function(d){i.bools[d]=!0});var r={};function n(d){return r[d].some(function(h){return i.bools[h]})}Object.keys(t.alias||{}).forEach(function(d){r[d]=[].concat(t.alias[d]),r[d].forEach(function(h){r[h]=[d].concat(r[d].filter(function(b){return h!==b}))})}),[].concat(t.string).filter(Boolean).forEach(function(d){i.strings[d]=!0,r[d]&&[].concat(r[d]).forEach(function(h){i.strings[h]=!0})});var s=t.default||{},o={_:[]};function a(d,h){return i.allBools&&/^--[^=]+$/.test(h)||i.strings[d]||i.bools[d]||r[d]}function c(d,h,b){for(var O=d,D=0;D<h.length-1;D++){var A=h[D];if(Hl(O,A))return;O[A]===void 0&&(O[A]={}),(O[A]===Object.prototype||O[A]===Number.prototype||O[A]===String.prototype)&&(O[A]={}),O[A]===Array.prototype&&(O[A]=[]),O=O[A]}var T=h[h.length-1];Hl(O,T)||((O===Object.prototype||O===Number.prototype||O===String.prototype)&&(O={}),O===Array.prototype&&(O=[]),O[T]===void 0||i.bools[T]||typeof O[T]=="boolean"?O[T]=b:Array.isArray(O[T])?O[T].push(b):O[T]=[O[T],b])}function u(d,h,b){if(!(b&&i.unknownFn&&!a(d,b)&&i.unknownFn(b)===!1)){var O=!i.strings[d]&&zl(h)?Number(h):h;c(o,d.split("."),O),(r[d]||[]).forEach(function(D){c(o,D.split("."),O)})}}Object.keys(i.bools).forEach(function(d){u(d,s[d]===void 0?!1:s[d])});var f=[];e.indexOf("--")!==-1&&(f=e.slice(e.indexOf("--")+1),e=e.slice(0,e.indexOf("--")));for(var g=0;g<e.length;g++){var x=e[g],l,m;if(/^--.+=/.test(x)){var v=x.match(/^--([^=]+)=([\s\S]*)$/);l=v[1];var _=v[2];i.bools[l]&&(_=_!=="false"),u(l,_,x)}else if(/^--no-.+/.test(x))l=x.match(/^--no-(.+)/)[1],u(l,!1,x);else if(/^--.+/.test(x))l=x.match(/^--(.+)/)[1],m=e[g+1],m!==void 0&&!/^(-|--)[^-]/.test(m)&&!i.bools[l]&&!i.allBools&&(!r[l]||!n(l))?(u(l,m,x),g+=1):/^(true|false)$/.test(m)?(u(l,m==="true",x),g+=1):u(l,i.strings[l]?"":!0,x);else if(/^-[^-]+/.test(x)){for(var E=x.slice(1,-1).split(""),w=!1,p=0;p<E.length;p++){if(m=x.slice(p+2),m==="-"){u(E[p],m,x);continue}if(/[A-Za-z]/.test(E[p])&&m[0]==="="){u(E[p],m.slice(1),x),w=!0;break}if(/[A-Za-z]/.test(E[p])&&/-?\d+(\.\d*)?(e-?\d+)?$/.test(m)){u(E[p],m,x),w=!0;break}if(E[p+1]&&E[p+1].match(/\W/)){u(E[p],x.slice(p+2),x),w=!0;break}else u(E[p],i.strings[E[p]]?"":!0,x)}l=x.slice(-1)[0],!w&&l!=="-"&&(e[g+1]&&!/^(-|--)[^-]/.test(e[g+1])&&!i.bools[l]&&(!r[l]||!n(l))?(u(l,e[g+1],x),g+=1):e[g+1]&&/^(true|false)$/.test(e[g+1])?(u(l,e[g+1]==="true",x),g+=1):u(l,i.strings[l]?"":!0,x))}else if((!i.unknownFn||i.unknownFn(x)!==!1)&&o._.push(i.strings._||!zl(x)?x:Number(x)),t.stopEarly){o._.push.apply(o._,e.slice(g+1));break}}return Object.keys(s).forEach(function(d){uE(o,d.split("."))||(c(o,d.split("."),s[d]),(r[d]||[]).forEach(function(h){c(o,h.split("."),s[d])}))}),t["--"]?o["--"]=f.slice():f.forEach(function(d){o._.push(d)}),o}});var pe=k((LR,Yl)=>{"use strict";var{FORCE_COLOR:lE,NODE_DISABLE_COLORS:pE,TERM:dE}=process.env,ne={enabled:!pE&&dE!=="dumb"&&lE!=="0",reset:oe(0,0),bold:oe(1,22),dim:oe(2,22),italic:oe(3,23),underline:oe(4,24),inverse:oe(7,27),hidden:oe(8,28),strikethrough:oe(9,29),black:oe(30,39),red:oe(31,39),green:oe(32,39),yellow:oe(33,39),blue:oe(34,39),magenta:oe(35,39),cyan:oe(36,39),white:oe(37,39),gray:oe(90,39),grey:oe(90,39),bgBlack:oe(40,49),bgRed:oe(41,49),bgGreen:oe(42,49),bgYellow:oe(43,49),bgBlue:oe(44,49),bgMagenta:oe(45,49),bgCyan:oe(46,49),bgWhite:oe(47,49)};function Xl(e,t){let i=0,r,n="",s="";for(;i<e.length;i++)r=e[i],n+=r.open,s+=r.close,t.includes(r.close)&&(t=t.replace(r.rgx,r.close+r.open));return n+t+s}function fE(e,t){let i={has:e,keys:t};return i.reset=ne.reset.bind(i),i.bold=ne.bold.bind(i),i.dim=ne.dim.bind(i),i.italic=ne.italic.bind(i),i.underline=ne.underline.bind(i),i.inverse=ne.inverse.bind(i),i.hidden=ne.hidden.bind(i),i.strikethrough=ne.strikethrough.bind(i),i.black=ne.black.bind(i),i.red=ne.red.bind(i),i.green=ne.green.bind(i),i.yellow=ne.yellow.bind(i),i.blue=ne.blue.bind(i),i.magenta=ne.magenta.bind(i),i.cyan=ne.cyan.bind(i),i.white=ne.white.bind(i),i.gray=ne.gray.bind(i),i.grey=ne.grey.bind(i),i.bgBlack=ne.bgBlack.bind(i),i.bgRed=ne.bgRed.bind(i),i.bgGreen=ne.bgGreen.bind(i),i.bgYellow=ne.bgYellow.bind(i),i.bgBlue=ne.bgBlue.bind(i),i.bgMagenta=ne.bgMagenta.bind(i),i.bgCyan=ne.bgCyan.bind(i),i.bgWhite=ne.bgWhite.bind(i),i}function oe(e,t){let i={open:`\x1B[${e}m`,close:`\x1B[${t}m`,rgx:new RegExp(`\\x1b\\[${t}m`,"g")};return function(r){return this!==void 0&&this.has!==void 0?(this.has.includes(e)||(this.has.push(e),this.keys.push(i)),r===void 0?this:ne.enabled?Xl(this.keys,r+""):r+""):r===void 0?fE([e],[i]):ne.enabled?Xl([i],r+""):r+""}}Yl.exports=ne});var Kl=k((kR,Wl)=>{"use strict";Wl.exports=(e,t)=>{if(!(e.meta&&e.name!=="escape")){if(e.ctrl){if(e.name==="a")return"first";if(e.name==="c"||e.name==="d")return"abort";if(e.name==="e")return"last";if(e.name==="g")return"reset"}if(t){if(e.name==="j")return"down";if(e.name==="k")return"up"}return e.name==="return"||e.name==="enter"?"submit":e.name==="backspace"?"delete":e.name==="delete"?"deleteForward":e.name==="abort"?"abort":e.name==="escape"?"exit":e.name==="tab"?"next":e.name==="pagedown"?"nextPage":e.name==="pageup"?"prevPage":e.name==="home"?"home":e.name==="end"?"end":e.name==="up"?"up":e.name==="down"?"down":e.name==="right"?"right":e.name==="left"?"left":!1}}});var hn=k((RR,Jl)=>{"use strict";Jl.exports=e=>{let t=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))"].join("|"),i=new RegExp(t,"g");return typeof e=="string"?e.replace(i,""):e}});var fe=k((PR,Zl)=>{"use strict";var go="\x1B",de=`${go}[`,hE="\x07",xo={to(e,t){return t?`${de}${t+1};${e+1}H`:`${de}${e+1}G`},move(e,t){let i="";return e<0?i+=`${de}${-e}D`:e>0&&(i+=`${de}${e}C`),t<0?i+=`${de}${-t}A`:t>0&&(i+=`${de}${t}B`),i},up:(e=1)=>`${de}${e}A`,down:(e=1)=>`${de}${e}B`,forward:(e=1)=>`${de}${e}C`,backward:(e=1)=>`${de}${e}D`,nextLine:(e=1)=>`${de}E`.repeat(e),prevLine:(e=1)=>`${de}F`.repeat(e),left:`${de}G`,hide:`${de}?25l`,show:`${de}?25h`,save:`${go}7`,restore:`${go}8`},mE={up:(e=1)=>`${de}S`.repeat(e),down:(e=1)=>`${de}T`.repeat(e)},gE={screen:`${de}2J`,up:(e=1)=>`${de}1J`.repeat(e),down:(e=1)=>`${de}J`.repeat(e),line:`${de}2K`,lineEnd:`${de}K`,lineStart:`${de}1K`,lines(e){let t="";for(let i=0;i<e;i++)t+=this.line+(i<e-1?xo.up():"");return e&&(t+=xo.left),t}};Zl.exports={cursor:xo,scroll:mE,erase:gE,beep:hE}});var rp=k((FR,ip)=>{"use strict";function xE(e,t){var i=typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(!i){if(Array.isArray(e)||(i=vE(e))||t&&e&&typeof e.length=="number"){i&&(e=i);var r=0,n=function(){};return{s:n,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(u){throw u},f:n}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var s=!0,o=!1,a;return{s:function(){i=i.call(e)},n:function(){var u=i.next();return s=u.done,u},e:function(u){o=!0,a=u},f:function(){try{!s&&i.return!=null&&i.return()}finally{if(o)throw a}}}}function vE(e,t){if(e){if(typeof e=="string")return Ql(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);if(i==="Object"&&e.constructor&&(i=e.constructor.name),i==="Map"||i==="Set")return Array.from(e);if(i==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return Ql(e,t)}}function Ql(e,t){(t==null||t>e.length)&&(t=e.length);for(var i=0,r=new Array(t);i<t;i++)r[i]=e[i];return r}var yE=hn(),tp=fe(),ep=tp.erase,bE=tp.cursor,wE=e=>[...yE(e)].length;ip.exports=function(e,t){if(!t)return ep.line+bE.to(0);let i=0,r=e.split(/\r?\n/);var n=xE(r),s;try{for(n.s();!(s=n.n()).done;){let o=s.value;i+=1+Math.floor(Math.max(wE(o)-1,0)/t)}}catch(o){n.e(o)}finally{n.f()}return ep.lines(i)}});var vo=k((jR,np)=>{"use strict";var lr={arrowUp:"\u2191",arrowDown:"\u2193",arrowLeft:"\u2190",arrowRight:"\u2192",radioOn:"\u25C9",radioOff:"\u25EF",tick:"\u2714",cross:"\u2716",ellipsis:"\u2026",pointerSmall:"\u203A",line:"\u2500",pointer:"\u276F"},EE={arrowUp:lr.arrowUp,arrowDown:lr.arrowDown,arrowLeft:lr.arrowLeft,arrowRight:lr.arrowRight,radioOn:"(*)",radioOff:"( )",tick:"\u221A",cross:"\xD7",ellipsis:"...",pointerSmall:"\xBB",line:"\u2500",pointer:">"},_E=process.platform==="win32"?EE:lr;np.exports=_E});var op=k((MR,sp)=>{"use strict";var Ri=pe(),li=vo(),yo=Object.freeze({password:{scale:1,render:e=>"*".repeat(e.length)},emoji:{scale:2,render:e=>"\u{1F603}".repeat(e.length)},invisible:{scale:0,render:e=>""},default:{scale:1,render:e=>`${e}`}}),TE=e=>yo[e]||yo.default,pr=Object.freeze({aborted:Ri.red(li.cross),done:Ri.green(li.tick),exited:Ri.yellow(li.cross),default:Ri.cyan("?")}),SE=(e,t,i)=>t?pr.aborted:i?pr.exited:e?pr.done:pr.default,CE=e=>Ri.gray(e?li.ellipsis:li.pointerSmall),OE=(e,t)=>Ri.gray(e?t?li.pointerSmall:"+":li.line);sp.exports={styles:yo,render:TE,symbols:pr,symbol:SE,delimiter:CE,item:OE}});var cp=k((qR,ap)=>{"use strict";var AE=hn();ap.exports=function(e,t){let i=String(AE(e)||"").split(/\r?\n/);return t?i.map(r=>Math.ceil(r.length/t)).reduce((r,n)=>r+n):i.length}});var lp=k((BR,up)=>{"use strict";up.exports=(e,t={})=>{let i=Number.isSafeInteger(parseInt(t.margin))?new Array(parseInt(t.margin)).fill(" ").join(""):t.margin||"",r=t.width;return(e||"").split(/\r?\n/g).map(n=>n.split(/\s+/g).reduce((s,o)=>(o.length+i.length>=r||s[s.length-1].length+o.length+1<r?s[s.length-1]+=` ${o}`:s.push(`${i}${o}`),s),[i]).join(`
`)).join(`
`)}});var dp=k((UR,pp)=>{"use strict";pp.exports=(e,t,i)=>{i=i||t;let r=Math.min(t-i,e-Math.floor(i/2));r<0&&(r=0);let n=Math.min(r+i,t);return{startIndex:r,endIndex:n}}});var ht=k(($R,fp)=>{"use strict";fp.exports={action:Kl(),clear:rp(),style:op(),strip:hn(),figures:vo(),lines:cp(),wrap:lp(),entriesToDisplay:dp()}});var kt=k((zR,gp)=>{"use strict";var hp=require("readline"),DE=ht(),IE=DE.action,NE=require("events"),mp=fe(),LE=mp.beep,kE=mp.cursor,RE=pe(),bo=class extends NE{constructor(t={}){super(),this.firstRender=!0,this.in=t.stdin||process.stdin,this.out=t.stdout||process.stdout,this.onRender=(t.onRender||(()=>{})).bind(this);let i=hp.createInterface({input:this.in,escapeCodeTimeout:50});hp.emitKeypressEvents(this.in,i),this.in.isTTY&&this.in.setRawMode(!0);let r=["SelectPrompt","MultiselectPrompt"].indexOf(this.constructor.name)>-1,n=(s,o)=>{let a=IE(o,r);a===!1?this._&&this._(s,o):typeof this[a]=="function"?this[a](o):this.bell()};this.close=()=>{this.out.write(kE.show),this.in.removeListener("keypress",n),this.in.isTTY&&this.in.setRawMode(!1),i.close(),this.emit(this.aborted?"abort":this.exited?"exit":"submit",this.value),this.closed=!0},this.in.on("keypress",n)}fire(){this.emit("state",{value:this.value,aborted:!!this.aborted,exited:!!this.exited})}bell(){this.out.write(LE)}render(){this.onRender(RE),this.firstRender&&(this.firstRender=!1)}};gp.exports=bo});var wp=k((HR,bp)=>{"use strict";function xp(e,t,i,r,n,s,o){try{var a=e[s](o),c=a.value}catch(u){i(u);return}a.done?t(c):Promise.resolve(c).then(r,n)}function vp(e){return function(){var t=this,i=arguments;return new Promise(function(r,n){var s=e.apply(t,i);function o(c){xp(s,r,n,o,a,"next",c)}function a(c){xp(s,r,n,o,a,"throw",c)}o(void 0)})}}var mn=pe(),PE=kt(),yp=fe(),FE=yp.erase,dr=yp.cursor,gn=ht(),wo=gn.style,Eo=gn.clear,jE=gn.lines,ME=gn.figures,_o=class extends PE{constructor(t={}){super(t),this.transform=wo.render(t.style),this.scale=this.transform.scale,this.msg=t.message,this.initial=t.initial||"",this.validator=t.validate||(()=>!0),this.value="",this.errorMsg=t.error||"Please Enter A Valid Value",this.cursor=+!!this.initial,this.cursorOffset=0,this.clear=Eo("",this.out.columns),this.render()}set value(t){!t&&this.initial?(this.placeholder=!0,this.rendered=mn.gray(this.transform.render(this.initial))):(this.placeholder=!1,this.rendered=this.transform.render(t)),this._value=t,this.fire()}get value(){return this._value}reset(){this.value="",this.cursor=+!!this.initial,this.cursorOffset=0,this.fire(),this.render()}exit(){this.abort()}abort(){this.value=this.value||this.initial,this.done=this.aborted=!0,this.error=!1,this.red=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}validate(){var t=this;return vp(function*(){let i=yield t.validator(t.value);typeof i=="string"&&(t.errorMsg=i,i=!1),t.error=!i})()}submit(){var t=this;return vp(function*(){if(t.value=t.value||t.initial,t.cursorOffset=0,t.cursor=t.rendered.length,yield t.validate(),t.error){t.red=!0,t.fire(),t.render();return}t.done=!0,t.aborted=!1,t.fire(),t.render(),t.out.write(`
`),t.close()})()}next(){if(!this.placeholder)return this.bell();this.value=this.initial,this.cursor=this.rendered.length,this.fire(),this.render()}moveCursor(t){this.placeholder||(this.cursor=this.cursor+t,this.cursorOffset+=t)}_(t,i){let r=this.value.slice(0,this.cursor),n=this.value.slice(this.cursor);this.value=`${r}${t}${n}`,this.red=!1,this.cursor=this.placeholder?0:r.length+1,this.render()}delete(){if(this.isCursorAtStart())return this.bell();let t=this.value.slice(0,this.cursor-1),i=this.value.slice(this.cursor);this.value=`${t}${i}`,this.red=!1,this.isCursorAtStart()?this.cursorOffset=0:(this.cursorOffset++,this.moveCursor(-1)),this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();let t=this.value.slice(0,this.cursor),i=this.value.slice(this.cursor+1);this.value=`${t}${i}`,this.red=!1,this.isCursorAtEnd()?this.cursorOffset=0:this.cursorOffset++,this.render()}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length,this.render()}left(){if(this.cursor<=0||this.placeholder)return this.bell();this.moveCursor(-1),this.render()}right(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();this.moveCursor(1),this.render()}isCursorAtStart(){return this.cursor===0||this.placeholder&&this.cursor===1}isCursorAtEnd(){return this.cursor===this.rendered.length||this.placeholder&&this.cursor===this.rendered.length+1}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(dr.down(jE(this.outputError,this.out.columns)-1)+Eo(this.outputError,this.out.columns)),this.out.write(Eo(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[wo.symbol(this.done,this.aborted),mn.bold(this.msg),wo.delimiter(this.done),this.red?mn.red(this.rendered):this.rendered].join(" "),this.error&&(this.outputError+=this.errorMsg.split(`
`).reduce((t,i,r)=>t+`
${r?" ":ME.pointerSmall} ${mn.red().italic(i)}`,"")),this.out.write(FE.line+dr.to(0)+this.outputText+dr.save+this.outputError+dr.restore+dr.move(this.cursorOffset,0)))}};bp.exports=_o});var Sp=k((GR,Tp)=>{"use strict";var Rt=pe(),qE=kt(),fr=ht(),Ep=fr.style,_p=fr.clear,xn=fr.figures,BE=fr.wrap,UE=fr.entriesToDisplay,$E=fe(),zE=$E.cursor,To=class extends qE{constructor(t={}){super(t),this.msg=t.message,this.hint=t.hint||"- Use arrow-keys. Return to submit.",this.warn=t.warn||"- This option is disabled",this.cursor=t.initial||0,this.choices=t.choices.map((i,r)=>(typeof i=="string"&&(i={title:i,value:r}),{title:i&&(i.title||i.value||i),value:i&&(i.value===void 0?r:i.value),description:i&&i.description,selected:i&&i.selected,disabled:i&&i.disabled})),this.optionsPerPage=t.optionsPerPage||10,this.value=(this.choices[this.cursor]||{}).value,this.clear=_p("",this.out.columns),this.render()}moveCursor(t){this.cursor=t,this.value=this.choices[t].value,this.fire()}reset(){this.moveCursor(0),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.selection.disabled?this.bell():(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close())}first(){this.moveCursor(0),this.render()}last(){this.moveCursor(this.choices.length-1),this.render()}up(){this.cursor===0?this.moveCursor(this.choices.length-1):this.moveCursor(this.cursor-1),this.render()}down(){this.cursor===this.choices.length-1?this.moveCursor(0):this.moveCursor(this.cursor+1),this.render()}next(){this.moveCursor((this.cursor+1)%this.choices.length),this.render()}_(t,i){if(t===" ")return this.submit()}get selection(){return this.choices[this.cursor]}render(){if(this.closed)return;this.firstRender?this.out.write(zE.hide):this.out.write(_p(this.outputText,this.out.columns)),super.render();let t=UE(this.cursor,this.choices.length,this.optionsPerPage),i=t.startIndex,r=t.endIndex;if(this.outputText=[Ep.symbol(this.done,this.aborted),Rt.bold(this.msg),Ep.delimiter(!1),this.done?this.selection.title:this.selection.disabled?Rt.yellow(this.warn):Rt.gray(this.hint)].join(" "),!this.done){this.outputText+=`
`;for(let n=i;n<r;n++){let s,o,a="",c=this.choices[n];n===i&&i>0?o=xn.arrowUp:n===r-1&&r<this.choices.length?o=xn.arrowDown:o=" ",c.disabled?(s=this.cursor===n?Rt.gray().underline(c.title):Rt.strikethrough().gray(c.title),o=(this.cursor===n?Rt.bold().gray(xn.pointer)+" ":"  ")+o):(s=this.cursor===n?Rt.cyan().underline(c.title):c.title,o=(this.cursor===n?Rt.cyan(xn.pointer)+" ":"  ")+o,c.description&&this.cursor===n&&(a=` - ${c.description}`,(o.length+s.length+a.length>=this.out.columns||c.description.split(/\r?\n/).length>1)&&(a=`
`+BE(c.description,{margin:3,width:this.out.columns})))),this.outputText+=`${o} ${s}${Rt.gray(a)}
`}}this.out.write(this.outputText)}};Tp.exports=To});var Np=k((VR,Ip)=>{"use strict";var vn=pe(),HE=kt(),Ap=ht(),Cp=Ap.style,GE=Ap.clear,Dp=fe(),Op=Dp.cursor,VE=Dp.erase,So=class extends HE{constructor(t={}){super(t),this.msg=t.message,this.value=!!t.initial,this.active=t.active||"on",this.inactive=t.inactive||"off",this.initialValue=this.value,this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}deactivate(){if(this.value===!1)return this.bell();this.value=!1,this.render()}activate(){if(this.value===!0)return this.bell();this.value=!0,this.render()}delete(){this.deactivate()}left(){this.deactivate()}right(){this.activate()}down(){this.deactivate()}up(){this.activate()}next(){this.value=!this.value,this.fire(),this.render()}_(t,i){if(t===" ")this.value=!this.value;else if(t==="1")this.value=!0;else if(t==="0")this.value=!1;else return this.bell();this.render()}render(){this.closed||(this.firstRender?this.out.write(Op.hide):this.out.write(GE(this.outputText,this.out.columns)),super.render(),this.outputText=[Cp.symbol(this.done,this.aborted),vn.bold(this.msg),Cp.delimiter(this.done),this.value?this.inactive:vn.cyan().underline(this.inactive),vn.gray("/"),this.value?vn.cyan().underline(this.active):this.active].join(" "),this.out.write(VE.line+Op.to(0)+this.outputText))}};Ip.exports=So});var bt=k((XR,Lp)=>{"use strict";var Co=class e{constructor({token:t,date:i,parts:r,locales:n}){this.token=t,this.date=i||new Date,this.parts=r||[this],this.locales=n||{}}up(){}down(){}next(){let t=this.parts.indexOf(this);return this.parts.find((i,r)=>r>t&&i instanceof e)}setTo(t){}prev(){let t=[].concat(this.parts).reverse(),i=t.indexOf(this);return t.find((r,n)=>n>i&&r instanceof e)}toString(){return String(this.date)}};Lp.exports=Co});var Rp=k((YR,kp)=>{"use strict";var XE=bt(),Oo=class extends XE{constructor(t={}){super(t)}up(){this.date.setHours((this.date.getHours()+12)%24)}down(){this.up()}toString(){let t=this.date.getHours()>12?"pm":"am";return/\A/.test(this.token)?t.toUpperCase():t}};kp.exports=Oo});var Fp=k((WR,Pp)=>{"use strict";var YE=bt(),WE=e=>(e=e%10,e===1?"st":e===2?"nd":e===3?"rd":"th"),Ao=class extends YE{constructor(t={}){super(t)}up(){this.date.setDate(this.date.getDate()+1)}down(){this.date.setDate(this.date.getDate()-1)}setTo(t){this.date.setDate(parseInt(t.substr(-2)))}toString(){let t=this.date.getDate(),i=this.date.getDay();return this.token==="DD"?String(t).padStart(2,"0"):this.token==="Do"?t+WE(t):this.token==="d"?i+1:this.token==="ddd"?this.locales.weekdaysShort[i]:this.token==="dddd"?this.locales.weekdays[i]:t}};Pp.exports=Ao});var Mp=k((KR,jp)=>{"use strict";var KE=bt(),Do=class extends KE{constructor(t={}){super(t)}up(){this.date.setHours(this.date.getHours()+1)}down(){this.date.setHours(this.date.getHours()-1)}setTo(t){this.date.setHours(parseInt(t.substr(-2)))}toString(){let t=this.date.getHours();return/h/.test(this.token)&&(t=t%12||12),this.token.length>1?String(t).padStart(2,"0"):t}};jp.exports=Do});var Bp=k((JR,qp)=>{"use strict";var JE=bt(),Io=class extends JE{constructor(t={}){super(t)}up(){this.date.setMilliseconds(this.date.getMilliseconds()+1)}down(){this.date.setMilliseconds(this.date.getMilliseconds()-1)}setTo(t){this.date.setMilliseconds(parseInt(t.substr(-this.token.length)))}toString(){return String(this.date.getMilliseconds()).padStart(4,"0").substr(0,this.token.length)}};qp.exports=Io});var $p=k((ZR,Up)=>{"use strict";var ZE=bt(),No=class extends ZE{constructor(t={}){super(t)}up(){this.date.setMinutes(this.date.getMinutes()+1)}down(){this.date.setMinutes(this.date.getMinutes()-1)}setTo(t){this.date.setMinutes(parseInt(t.substr(-2)))}toString(){let t=this.date.getMinutes();return this.token.length>1?String(t).padStart(2,"0"):t}};Up.exports=No});var Hp=k((QR,zp)=>{"use strict";var QE=bt(),Lo=class extends QE{constructor(t={}){super(t)}up(){this.date.setMonth(this.date.getMonth()+1)}down(){this.date.setMonth(this.date.getMonth()-1)}setTo(t){t=parseInt(t.substr(-2))-1,this.date.setMonth(t<0?0:t)}toString(){let t=this.date.getMonth(),i=this.token.length;return i===2?String(t+1).padStart(2,"0"):i===3?this.locales.monthsShort[t]:i===4?this.locales.months[t]:String(t+1)}};zp.exports=Lo});var Vp=k((eP,Gp)=>{"use strict";var e_=bt(),ko=class extends e_{constructor(t={}){super(t)}up(){this.date.setSeconds(this.date.getSeconds()+1)}down(){this.date.setSeconds(this.date.getSeconds()-1)}setTo(t){this.date.setSeconds(parseInt(t.substr(-2)))}toString(){let t=this.date.getSeconds();return this.token.length>1?String(t).padStart(2,"0"):t}};Gp.exports=ko});var Yp=k((tP,Xp)=>{"use strict";var t_=bt(),Ro=class extends t_{constructor(t={}){super(t)}up(){this.date.setFullYear(this.date.getFullYear()+1)}down(){this.date.setFullYear(this.date.getFullYear()-1)}setTo(t){this.date.setFullYear(t.substr(-4))}toString(){let t=String(this.date.getFullYear()).padStart(4,"0");return this.token.length===2?t.substr(-2):t}};Xp.exports=Ro});var Kp=k((iP,Wp)=>{"use strict";Wp.exports={DatePart:bt(),Meridiem:Rp(),Day:Fp(),Hours:Mp(),Milliseconds:Bp(),Minutes:$p(),Month:Hp(),Seconds:Vp(),Year:Yp()}});var od=k((rP,sd)=>{"use strict";function Jp(e,t,i,r,n,s,o){try{var a=e[s](o),c=a.value}catch(u){i(u);return}a.done?t(c):Promise.resolve(c).then(r,n)}function Zp(e){return function(){var t=this,i=arguments;return new Promise(function(r,n){var s=e.apply(t,i);function o(c){Jp(s,r,n,o,a,"next",c)}function a(c){Jp(s,r,n,o,a,"throw",c)}o(void 0)})}}var Po=pe(),i_=kt(),jo=ht(),Qp=jo.style,ed=jo.clear,r_=jo.figures,nd=fe(),n_=nd.erase,td=nd.cursor,Pt=Kp(),id=Pt.DatePart,s_=Pt.Meridiem,o_=Pt.Day,a_=Pt.Hours,c_=Pt.Milliseconds,u_=Pt.Minutes,l_=Pt.Month,p_=Pt.Seconds,d_=Pt.Year,f_=/\\(.)|"((?:\\["\\]|[^"])+)"|(D[Do]?|d{3,4}|d)|(M{1,4})|(YY(?:YY)?)|([aA])|([Hh]{1,2})|(m{1,2})|(s{1,2})|(S{1,4})|./g,rd={1:({token:e})=>e.replace(/\\(.)/g,"$1"),2:e=>new o_(e),3:e=>new l_(e),4:e=>new d_(e),5:e=>new s_(e),6:e=>new a_(e),7:e=>new u_(e),8:e=>new p_(e),9:e=>new c_(e)},h_={months:"January,February,March,April,May,June,July,August,September,October,November,December".split(","),monthsShort:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),weekdays:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),weekdaysShort:"Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(",")},Fo=class extends i_{constructor(t={}){super(t),this.msg=t.message,this.cursor=0,this.typed="",this.locales=Object.assign(h_,t.locales),this._date=t.initial||new Date,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.mask=t.mask||"YYYY-MM-DD HH:mm:ss",this.clear=ed("",this.out.columns),this.render()}get value(){return this.date}get date(){return this._date}set date(t){t&&this._date.setTime(t.getTime())}set mask(t){let i;for(this.parts=[];i=f_.exec(t);){let n=i.shift(),s=i.findIndex(o=>o!=null);this.parts.push(s in rd?rd[s]({token:i[s]||n,date:this.date,parts:this.parts,locales:this.locales}):i[s]||n)}let r=this.parts.reduce((n,s)=>(typeof s=="string"&&typeof n[n.length-1]=="string"?n[n.length-1]+=s:n.push(s),n),[]);this.parts.splice(0),this.parts.push(...r),this.reset()}moveCursor(t){this.typed="",this.cursor=t,this.fire()}reset(){this.moveCursor(this.parts.findIndex(t=>t instanceof id)),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}validate(){var t=this;return Zp(function*(){let i=yield t.validator(t.value);typeof i=="string"&&(t.errorMsg=i,i=!1),t.error=!i})()}submit(){var t=this;return Zp(function*(){if(yield t.validate(),t.error){t.color="red",t.fire(),t.render();return}t.done=!0,t.aborted=!1,t.fire(),t.render(),t.out.write(`
`),t.close()})()}up(){this.typed="",this.parts[this.cursor].up(),this.render()}down(){this.typed="",this.parts[this.cursor].down(),this.render()}left(){let t=this.parts[this.cursor].prev();if(t==null)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}right(){let t=this.parts[this.cursor].next();if(t==null)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}next(){let t=this.parts[this.cursor].next();this.moveCursor(t?this.parts.indexOf(t):this.parts.findIndex(i=>i instanceof id)),this.render()}_(t){/\d/.test(t)&&(this.typed+=t,this.parts[this.cursor].setTo(this.typed),this.render())}render(){this.closed||(this.firstRender?this.out.write(td.hide):this.out.write(ed(this.outputText,this.out.columns)),super.render(),this.outputText=[Qp.symbol(this.done,this.aborted),Po.bold(this.msg),Qp.delimiter(!1),this.parts.reduce((t,i,r)=>t.concat(r===this.cursor&&!this.done?Po.cyan().underline(i.toString()):i),[]).join("")].join(" "),this.error&&(this.outputText+=this.errorMsg.split(`
`).reduce((t,i,r)=>t+`
${r?" ":r_.pointerSmall} ${Po.red().italic(i)}`,"")),this.out.write(n_.line+td.to(0)+this.outputText))}};sd.exports=Fo});var fd=k((nP,dd)=>{"use strict";function ad(e,t,i,r,n,s,o){try{var a=e[s](o),c=a.value}catch(u){i(u);return}a.done?t(c):Promise.resolve(c).then(r,n)}function cd(e){return function(){var t=this,i=arguments;return new Promise(function(r,n){var s=e.apply(t,i);function o(c){ad(s,r,n,o,a,"next",c)}function a(c){ad(s,r,n,o,a,"throw",c)}o(void 0)})}}var yn=pe(),m_=kt(),pd=fe(),bn=pd.cursor,g_=pd.erase,wn=ht(),Mo=wn.style,x_=wn.figures,ud=wn.clear,v_=wn.lines,y_=/[0-9]/,qo=e=>e!==void 0,ld=(e,t)=>{let i=Math.pow(10,t);return Math.round(e*i)/i},Bo=class extends m_{constructor(t={}){super(t),this.transform=Mo.render(t.style),this.msg=t.message,this.initial=qo(t.initial)?t.initial:"",this.float=!!t.float,this.round=t.round||2,this.inc=t.increment||1,this.min=qo(t.min)?t.min:-1/0,this.max=qo(t.max)?t.max:1/0,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.color="cyan",this.value="",this.typed="",this.lastHit=0,this.render()}set value(t){!t&&t!==0?(this.placeholder=!0,this.rendered=yn.gray(this.transform.render(`${this.initial}`)),this._value=""):(this.placeholder=!1,this.rendered=this.transform.render(`${ld(t,this.round)}`),this._value=ld(t,this.round)),this.fire()}get value(){return this._value}parse(t){return this.float?parseFloat(t):parseInt(t)}valid(t){return t==="-"||t==="."&&this.float||y_.test(t)}reset(){this.typed="",this.value="",this.fire(),this.render()}exit(){this.abort()}abort(){let t=this.value;this.value=t!==""?t:this.initial,this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}validate(){var t=this;return cd(function*(){let i=yield t.validator(t.value);typeof i=="string"&&(t.errorMsg=i,i=!1),t.error=!i})()}submit(){var t=this;return cd(function*(){if(yield t.validate(),t.error){t.color="red",t.fire(),t.render();return}let i=t.value;t.value=i!==""?i:t.initial,t.done=!0,t.aborted=!1,t.error=!1,t.fire(),t.render(),t.out.write(`
`),t.close()})()}up(){if(this.typed="",this.value===""&&(this.value=this.min-this.inc),this.value>=this.max)return this.bell();this.value+=this.inc,this.color="cyan",this.fire(),this.render()}down(){if(this.typed="",this.value===""&&(this.value=this.min+this.inc),this.value<=this.min)return this.bell();this.value-=this.inc,this.color="cyan",this.fire(),this.render()}delete(){let t=this.value.toString();if(t.length===0)return this.bell();this.value=this.parse(t=t.slice(0,-1))||"",this.value!==""&&this.value<this.min&&(this.value=this.min),this.color="cyan",this.fire(),this.render()}next(){this.value=this.initial,this.fire(),this.render()}_(t,i){if(!this.valid(t))return this.bell();let r=Date.now();if(r-this.lastHit>1e3&&(this.typed=""),this.typed+=t,this.lastHit=r,this.color="cyan",t===".")return this.fire();this.value=Math.min(this.parse(this.typed),this.max),this.value>this.max&&(this.value=this.max),this.value<this.min&&(this.value=this.min),this.fire(),this.render()}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(bn.down(v_(this.outputError,this.out.columns)-1)+ud(this.outputError,this.out.columns)),this.out.write(ud(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[Mo.symbol(this.done,this.aborted),yn.bold(this.msg),Mo.delimiter(this.done),!this.done||!this.done&&!this.placeholder?yn[this.color]().underline(this.rendered):this.rendered].join(" "),this.error&&(this.outputError+=this.errorMsg.split(`
`).reduce((t,i,r)=>t+`
${r?" ":x_.pointerSmall} ${yn.red().italic(i)}`,"")),this.out.write(g_.line+bn.to(0)+this.outputText+bn.save+this.outputError+bn.restore))}};dd.exports=Bo});var $o=k((sP,gd)=>{"use strict";var wt=pe(),b_=fe(),w_=b_.cursor,E_=kt(),hr=ht(),hd=hr.clear,Kt=hr.figures,md=hr.style,__=hr.wrap,T_=hr.entriesToDisplay,Uo=class extends E_{constructor(t={}){super(t),this.msg=t.message,this.cursor=t.cursor||0,this.scrollIndex=t.cursor||0,this.hint=t.hint||"",this.warn=t.warn||"- This option is disabled -",this.minSelected=t.min,this.showMinError=!1,this.maxChoices=t.max,this.instructions=t.instructions,this.optionsPerPage=t.optionsPerPage||10,this.value=t.choices.map((i,r)=>(typeof i=="string"&&(i={title:i,value:r}),{title:i&&(i.title||i.value||i),description:i&&i.description,value:i&&(i.value===void 0?r:i.value),selected:i&&i.selected,disabled:i&&i.disabled})),this.clear=hd("",this.out.columns),t.overrideRender||this.render()}reset(){this.value.map(t=>!t.selected),this.cursor=0,this.fire(),this.render()}selected(){return this.value.filter(t=>t.selected)}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){let t=this.value.filter(i=>i.selected);this.minSelected&&t.length<this.minSelected?(this.showMinError=!0,this.render()):(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close())}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.value.length,this.render()}up(){this.cursor===0?this.cursor=this.value.length-1:this.cursor--,this.render()}down(){this.cursor===this.value.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.value[this.cursor].selected=!1,this.render()}right(){if(this.value.filter(t=>t.selected).length>=this.maxChoices)return this.bell();this.value[this.cursor].selected=!0,this.render()}handleSpaceToggle(){let t=this.value[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter(i=>i.selected).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}toggleAll(){if(this.maxChoices!==void 0||this.value[this.cursor].disabled)return this.bell();let t=!this.value[this.cursor].selected;this.value.filter(i=>!i.disabled).forEach(i=>i.selected=t),this.render()}_(t,i){if(t===" ")this.handleSpaceToggle();else if(t==="a")this.toggleAll();else return this.bell()}renderInstructions(){return this.instructions===void 0||this.instructions?typeof this.instructions=="string"?this.instructions:`
Instructions:
    ${Kt.arrowUp}/${Kt.arrowDown}: Highlight option
    ${Kt.arrowLeft}/${Kt.arrowRight}/[space]: Toggle selection
`+(this.maxChoices===void 0?`    a: Toggle all
`:"")+"    enter/return: Complete answer":""}renderOption(t,i,r,n){let s=(i.selected?wt.green(Kt.radioOn):Kt.radioOff)+" "+n+" ",o,a;return i.disabled?o=t===r?wt.gray().underline(i.title):wt.strikethrough().gray(i.title):(o=t===r?wt.cyan().underline(i.title):i.title,t===r&&i.description&&(a=` - ${i.description}`,(s.length+o.length+a.length>=this.out.columns||i.description.split(/\r?\n/).length>1)&&(a=`
`+__(i.description,{margin:s.length,width:this.out.columns})))),s+o+wt.gray(a||"")}paginateOptions(t){if(t.length===0)return wt.red("No matches for this query.");let i=T_(this.cursor,t.length,this.optionsPerPage),r=i.startIndex,n=i.endIndex,s,o=[];for(let a=r;a<n;a++)a===r&&r>0?s=Kt.arrowUp:a===n-1&&n<t.length?s=Kt.arrowDown:s=" ",o.push(this.renderOption(this.cursor,t[a],a,s));return`
`+o.join(`
`)}renderOptions(t){return this.done?"":this.paginateOptions(t)}renderDoneOrInstructions(){if(this.done)return this.value.filter(i=>i.selected).map(i=>i.title).join(", ");let t=[wt.gray(this.hint),this.renderInstructions()];return this.value[this.cursor].disabled&&t.push(wt.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(w_.hide),super.render();let t=[md.symbol(this.done,this.aborted),wt.bold(this.msg),md.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=wt.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.value),this.out.write(this.clear+t),this.clear=hd(t,this.out.columns)}};gd.exports=Uo});var _d=k((oP,Ed)=>{"use strict";function xd(e,t,i,r,n,s,o){try{var a=e[s](o),c=a.value}catch(u){i(u);return}a.done?t(c):Promise.resolve(c).then(r,n)}function S_(e){return function(){var t=this,i=arguments;return new Promise(function(r,n){var s=e.apply(t,i);function o(c){xd(s,r,n,o,a,"next",c)}function a(c){xd(s,r,n,o,a,"throw",c)}o(void 0)})}}var mr=pe(),C_=kt(),wd=fe(),O_=wd.erase,vd=wd.cursor,gr=ht(),zo=gr.style,yd=gr.clear,Ho=gr.figures,A_=gr.wrap,D_=gr.entriesToDisplay,bd=(e,t)=>e[t]&&(e[t].value||e[t].title||e[t]),I_=(e,t)=>e[t]&&(e[t].title||e[t].value||e[t]),N_=(e,t)=>{let i=e.findIndex(r=>r.value===t||r.title===t);return i>-1?i:void 0},Go=class extends C_{constructor(t={}){super(t),this.msg=t.message,this.suggest=t.suggest,this.choices=t.choices,this.initial=typeof t.initial=="number"?t.initial:N_(t.choices,t.initial),this.select=this.initial||t.cursor||0,this.i18n={noMatches:t.noMatches||"no matches found"},this.fallback=t.fallback||this.initial,this.clearFirst=t.clearFirst||!1,this.suggestions=[],this.input="",this.limit=t.limit||10,this.cursor=0,this.transform=zo.render(t.style),this.scale=this.transform.scale,this.render=this.render.bind(this),this.complete=this.complete.bind(this),this.clear=yd("",this.out.columns),this.complete(this.render),this.render()}set fallback(t){this._fb=Number.isSafeInteger(parseInt(t))?parseInt(t):t}get fallback(){let t;return typeof this._fb=="number"?t=this.choices[this._fb]:typeof this._fb=="string"&&(t={title:this._fb}),t||this._fb||{title:this.i18n.noMatches}}moveSelect(t){this.select=t,this.suggestions.length>0?this.value=bd(this.suggestions,t):this.value=this.fallback.value,this.fire()}complete(t){var i=this;return S_(function*(){let r=i.completing=i.suggest(i.input,i.choices),n=yield r;if(i.completing!==r)return;i.suggestions=n.map((o,a,c)=>({title:I_(c,a),value:bd(c,a),description:o.description})),i.completing=!1;let s=Math.max(n.length-1,0);i.moveSelect(Math.min(s,i.select)),t&&t()})()}reset(){this.input="",this.complete(()=>{this.moveSelect(this.initial!==void 0?this.initial:0),this.render()}),this.render()}exit(){this.clearFirst&&this.input.length>0?this.reset():(this.done=this.exited=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close())}abort(){this.done=this.aborted=!0,this.exited=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.done=!0,this.aborted=this.exited=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}_(t,i){let r=this.input.slice(0,this.cursor),n=this.input.slice(this.cursor);this.input=`${r}${t}${n}`,this.cursor=r.length+1,this.complete(this.render),this.render()}delete(){if(this.cursor===0)return this.bell();let t=this.input.slice(0,this.cursor-1),i=this.input.slice(this.cursor);this.input=`${t}${i}`,this.complete(this.render),this.cursor=this.cursor-1,this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();let t=this.input.slice(0,this.cursor),i=this.input.slice(this.cursor+1);this.input=`${t}${i}`,this.complete(this.render),this.render()}first(){this.moveSelect(0),this.render()}last(){this.moveSelect(this.suggestions.length-1),this.render()}up(){this.select===0?this.moveSelect(this.suggestions.length-1):this.moveSelect(this.select-1),this.render()}down(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}next(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}nextPage(){this.moveSelect(Math.min(this.select+this.limit,this.suggestions.length-1)),this.render()}prevPage(){this.moveSelect(Math.max(this.select-this.limit,0)),this.render()}left(){if(this.cursor<=0)return this.bell();this.cursor=this.cursor-1,this.render()}right(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();this.cursor=this.cursor+1,this.render()}renderOption(t,i,r,n){let s,o=r?Ho.arrowUp:n?Ho.arrowDown:" ",a=i?mr.cyan().underline(t.title):t.title;return o=(i?mr.cyan(Ho.pointer)+" ":"  ")+o,t.description&&(s=` - ${t.description}`,(o.length+a.length+s.length>=this.out.columns||t.description.split(/\r?\n/).length>1)&&(s=`
`+A_(t.description,{margin:3,width:this.out.columns}))),o+" "+a+mr.gray(s||"")}render(){if(this.closed)return;this.firstRender?this.out.write(vd.hide):this.out.write(yd(this.outputText,this.out.columns)),super.render();let t=D_(this.select,this.choices.length,this.limit),i=t.startIndex,r=t.endIndex;if(this.outputText=[zo.symbol(this.done,this.aborted,this.exited),mr.bold(this.msg),zo.delimiter(this.completing),this.done&&this.suggestions[this.select]?this.suggestions[this.select].title:this.rendered=this.transform.render(this.input)].join(" "),!this.done){let n=this.suggestions.slice(i,r).map((s,o)=>this.renderOption(s,this.select===o+i,o===0&&i>0,o+i===r-1&&r<this.choices.length)).join(`
`);this.outputText+=`
`+(n||mr.gray(this.fallback.title))}this.out.write(O_.line+vd.to(0)+this.outputText)}};Ed.exports=Go});var Od=k((aP,Cd)=>{"use strict";var Ft=pe(),L_=fe(),k_=L_.cursor,R_=$o(),Xo=ht(),Td=Xo.clear,Sd=Xo.style,Pi=Xo.figures,Vo=class extends R_{constructor(t={}){t.overrideRender=!0,super(t),this.inputValue="",this.clear=Td("",this.out.columns),this.filteredOptions=this.value,this.render()}last(){this.cursor=this.filteredOptions.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.filteredOptions.length,this.render()}up(){this.cursor===0?this.cursor=this.filteredOptions.length-1:this.cursor--,this.render()}down(){this.cursor===this.filteredOptions.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.filteredOptions[this.cursor].selected=!1,this.render()}right(){if(this.value.filter(t=>t.selected).length>=this.maxChoices)return this.bell();this.filteredOptions[this.cursor].selected=!0,this.render()}delete(){this.inputValue.length&&(this.inputValue=this.inputValue.substr(0,this.inputValue.length-1),this.updateFilteredOptions())}updateFilteredOptions(){let t=this.filteredOptions[this.cursor];this.filteredOptions=this.value.filter(r=>this.inputValue?!!(typeof r.title=="string"&&r.title.toLowerCase().includes(this.inputValue.toLowerCase())||typeof r.value=="string"&&r.value.toLowerCase().includes(this.inputValue.toLowerCase())):!0);let i=this.filteredOptions.findIndex(r=>r===t);this.cursor=i<0?0:i,this.render()}handleSpaceToggle(){let t=this.filteredOptions[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter(i=>i.selected).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}handleInputChange(t){this.inputValue=this.inputValue+t,this.updateFilteredOptions()}_(t,i){t===" "?this.handleSpaceToggle():this.handleInputChange(t)}renderInstructions(){return this.instructions===void 0||this.instructions?typeof this.instructions=="string"?this.instructions:`
Instructions:
    ${Pi.arrowUp}/${Pi.arrowDown}: Highlight option
    ${Pi.arrowLeft}/${Pi.arrowRight}/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer
`:""}renderCurrentInput(){return`
Filtered results for: ${this.inputValue?this.inputValue:Ft.gray("Enter something to filter")}
`}renderOption(t,i,r){let n;return i.disabled?n=t===r?Ft.gray().underline(i.title):Ft.strikethrough().gray(i.title):n=t===r?Ft.cyan().underline(i.title):i.title,(i.selected?Ft.green(Pi.radioOn):Pi.radioOff)+"  "+n}renderDoneOrInstructions(){if(this.done)return this.value.filter(i=>i.selected).map(i=>i.title).join(", ");let t=[Ft.gray(this.hint),this.renderInstructions(),this.renderCurrentInput()];return this.filteredOptions.length&&this.filteredOptions[this.cursor].disabled&&t.push(Ft.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(k_.hide),super.render();let t=[Sd.symbol(this.done,this.aborted),Ft.bold(this.msg),Sd.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=Ft.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.filteredOptions),this.out.write(this.clear+t),this.clear=Td(t,this.out.columns)}};Cd.exports=Vo});var Rd=k((cP,kd)=>{"use strict";var Ad=pe(),P_=kt(),Nd=ht(),Dd=Nd.style,F_=Nd.clear,Ld=fe(),j_=Ld.erase,Id=Ld.cursor,Yo=class extends P_{constructor(t={}){super(t),this.msg=t.message,this.value=t.initial,this.initialValue=!!t.initial,this.yesMsg=t.yes||"yes",this.yesOption=t.yesOption||"(Y/n)",this.noMsg=t.no||"no",this.noOption=t.noOption||"(y/N)",this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.value=this.value||!1,this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}_(t,i){return t.toLowerCase()==="y"?(this.value=!0,this.submit()):t.toLowerCase()==="n"?(this.value=!1,this.submit()):this.bell()}render(){this.closed||(this.firstRender?this.out.write(Id.hide):this.out.write(F_(this.outputText,this.out.columns)),super.render(),this.outputText=[Dd.symbol(this.done,this.aborted),Ad.bold(this.msg),Dd.delimiter(this.done),this.done?this.value?this.yesMsg:this.noMsg:Ad.gray(this.initialValue?this.yesOption:this.noOption)].join(" "),this.out.write(j_.line+Id.to(0)+this.outputText))}};kd.exports=Yo});var Fd=k((uP,Pd)=>{"use strict";Pd.exports={TextPrompt:wp(),SelectPrompt:Sp(),TogglePrompt:Np(),DatePrompt:od(),NumberPrompt:fd(),MultiselectPrompt:$o(),AutocompletePrompt:_d(),AutocompleteMultiselectPrompt:Od(),ConfirmPrompt:Rd()}});var Md=k(jd=>{"use strict";var Xe=jd,M_=Fd(),En=e=>e;function Et(e,t,i={}){return new Promise((r,n)=>{let s=new M_[e](t),o=i.onAbort||En,a=i.onSubmit||En,c=i.onExit||En;s.on("state",t.onState||En),s.on("submit",u=>r(a(u))),s.on("exit",u=>r(c(u))),s.on("abort",u=>n(o(u)))})}Xe.text=e=>Et("TextPrompt",e);Xe.password=e=>(e.style="password",Xe.text(e));Xe.invisible=e=>(e.style="invisible",Xe.text(e));Xe.number=e=>Et("NumberPrompt",e);Xe.date=e=>Et("DatePrompt",e);Xe.confirm=e=>Et("ConfirmPrompt",e);Xe.list=e=>{let t=e.separator||",";return Et("TextPrompt",e,{onSubmit:i=>i.split(t).map(r=>r.trim())})};Xe.toggle=e=>Et("TogglePrompt",e);Xe.select=e=>Et("SelectPrompt",e);Xe.multiselect=e=>{e.choices=[].concat(e.choices||[]);let t=i=>i.filter(r=>r.selected).map(r=>r.value);return Et("MultiselectPrompt",e,{onAbort:t,onSubmit:t})};Xe.autocompleteMultiselect=e=>{e.choices=[].concat(e.choices||[]);let t=i=>i.filter(r=>r.selected).map(r=>r.value);return Et("AutocompleteMultiselectPrompt",e,{onAbort:t,onSubmit:t})};var q_=(e,t)=>Promise.resolve(t.filter(i=>i.title.slice(0,e.length).toLowerCase()===e.toLowerCase()));Xe.autocomplete=e=>(e.suggest=e.suggest||q_,e.choices=[].concat(e.choices||[]),Et("AutocompletePrompt",e))});var Vd=k((pP,Gd)=>{"use strict";function qd(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),i.push.apply(i,r)}return i}function Bd(e){for(var t=1;t<arguments.length;t++){var i=arguments[t]!=null?arguments[t]:{};t%2?qd(Object(i),!0).forEach(function(r){B_(e,r,i[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):qd(Object(i)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(i,r))})}return e}function B_(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function U_(e,t){var i=typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(!i){if(Array.isArray(e)||(i=$_(e))||t&&e&&typeof e.length=="number"){i&&(e=i);var r=0,n=function(){};return{s:n,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(u){throw u},f:n}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var s=!0,o=!1,a;return{s:function(){i=i.call(e)},n:function(){var u=i.next();return s=u.done,u},e:function(u){o=!0,a=u},f:function(){try{!s&&i.return!=null&&i.return()}finally{if(o)throw a}}}}function $_(e,t){if(e){if(typeof e=="string")return Ud(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);if(i==="Object"&&e.constructor&&(i=e.constructor.name),i==="Map"||i==="Set")return Array.from(e);if(i==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return Ud(e,t)}}function Ud(e,t){(t==null||t>e.length)&&(t=e.length);for(var i=0,r=new Array(t);i<t;i++)r[i]=e[i];return r}function $d(e,t,i,r,n,s,o){try{var a=e[s](o),c=a.value}catch(u){i(u);return}a.done?t(c):Promise.resolve(c).then(r,n)}function zd(e){return function(){var t=this,i=arguments;return new Promise(function(r,n){var s=e.apply(t,i);function o(c){$d(s,r,n,o,a,"next",c)}function a(c){$d(s,r,n,o,a,"throw",c)}o(void 0)})}}var Wo=Md(),z_=["suggest","format","onState","validate","onRender","type"],Hd=()=>{};function Jt(){return Ko.apply(this,arguments)}function Ko(){return Ko=zd(function*(e=[],{onSubmit:t=Hd,onCancel:i=Hd}={}){let r={},n=Jt._override||{};e=[].concat(e);let s,o,a,c,u,f,g=function(){var _=zd(function*(E,w,p=!1){if(!(!p&&E.validate&&E.validate(w)!==!0))return E.format?yield E.format(w,r):w});return function(w,p){return _.apply(this,arguments)}}();var x=U_(e),l;try{for(x.s();!(l=x.n()).done;){o=l.value;var m=o;if(c=m.name,u=m.type,typeof u=="function"&&(u=yield u(s,Bd({},r),o),o.type=u),!!u){for(let _ in o){if(z_.includes(_))continue;let E=o[_];o[_]=typeof E=="function"?yield E(s,Bd({},r),f):E}if(f=o,typeof o.message!="string")throw new Error("prompt message is required");var v=o;if(c=v.name,u=v.type,Wo[u]===void 0)throw new Error(`prompt type (${u}) is not defined`);if(n[o.name]!==void 0&&(s=yield g(o,n[o.name]),s!==void 0)){r[c]=s;continue}try{s=Jt._injected?H_(Jt._injected,o.initial):yield Wo[u](o),r[c]=s=yield g(o,s,!0),a=yield t(o,s,r)}catch{a=!(yield i(o,r))}if(a)return r}}}catch(_){x.e(_)}finally{x.f()}return r}),Ko.apply(this,arguments)}function H_(e,t){let i=e.shift();if(i instanceof Error)throw i;return i===void 0?t:i}function G_(e){Jt._injected=(Jt._injected||[]).concat(e)}function V_(e){Jt._override=Object.assign({},e)}Gd.exports=Object.assign(Jt,{prompt:Jt,prompts:Wo,inject:G_,override:V_})});var Yd=k((dP,Xd)=>{"use strict";Xd.exports=(e,t)=>{if(!(e.meta&&e.name!=="escape")){if(e.ctrl){if(e.name==="a")return"first";if(e.name==="c"||e.name==="d")return"abort";if(e.name==="e")return"last";if(e.name==="g")return"reset"}if(t){if(e.name==="j")return"down";if(e.name==="k")return"up"}return e.name==="return"||e.name==="enter"?"submit":e.name==="backspace"?"delete":e.name==="delete"?"deleteForward":e.name==="abort"?"abort":e.name==="escape"?"exit":e.name==="tab"?"next":e.name==="pagedown"?"nextPage":e.name==="pageup"?"prevPage":e.name==="home"?"home":e.name==="end"?"end":e.name==="up"?"up":e.name==="down"?"down":e.name==="right"?"right":e.name==="left"?"left":!1}}});var _n=k((fP,Wd)=>{"use strict";Wd.exports=e=>{let t=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))"].join("|"),i=new RegExp(t,"g");return typeof e=="string"?e.replace(i,""):e}});var Zd=k((hP,Jd)=>{"use strict";var X_=_n(),{erase:Kd,cursor:Y_}=fe(),W_=e=>[...X_(e)].length;Jd.exports=function(e,t){if(!t)return Kd.line+Y_.to(0);let i=0,r=e.split(/\r?\n/);for(let n of r)i+=1+Math.floor(Math.max(W_(n)-1,0)/t);return Kd.lines(i)}});var Jo=k((mP,Qd)=>{"use strict";var xr={arrowUp:"\u2191",arrowDown:"\u2193",arrowLeft:"\u2190",arrowRight:"\u2192",radioOn:"\u25C9",radioOff:"\u25EF",tick:"\u2714",cross:"\u2716",ellipsis:"\u2026",pointerSmall:"\u203A",line:"\u2500",pointer:"\u276F"},K_={arrowUp:xr.arrowUp,arrowDown:xr.arrowDown,arrowLeft:xr.arrowLeft,arrowRight:xr.arrowRight,radioOn:"(*)",radioOff:"( )",tick:"\u221A",cross:"\xD7",ellipsis:"...",pointerSmall:"\xBB",line:"\u2500",pointer:">"},J_=process.platform==="win32"?K_:xr;Qd.exports=J_});var tf=k((gP,ef)=>{"use strict";var Fi=pe(),pi=Jo(),Zo=Object.freeze({password:{scale:1,render:e=>"*".repeat(e.length)},emoji:{scale:2,render:e=>"\u{1F603}".repeat(e.length)},invisible:{scale:0,render:e=>""},default:{scale:1,render:e=>`${e}`}}),Z_=e=>Zo[e]||Zo.default,vr=Object.freeze({aborted:Fi.red(pi.cross),done:Fi.green(pi.tick),exited:Fi.yellow(pi.cross),default:Fi.cyan("?")}),Q_=(e,t,i)=>t?vr.aborted:i?vr.exited:e?vr.done:vr.default,eT=e=>Fi.gray(e?pi.ellipsis:pi.pointerSmall),tT=(e,t)=>Fi.gray(e?t?pi.pointerSmall:"+":pi.line);ef.exports={styles:Zo,render:Z_,symbols:vr,symbol:Q_,delimiter:eT,item:tT}});var nf=k((xP,rf)=>{"use strict";var iT=_n();rf.exports=function(e,t){let i=String(iT(e)||"").split(/\r?\n/);return t?i.map(r=>Math.ceil(r.length/t)).reduce((r,n)=>r+n):i.length}});var of=k((vP,sf)=>{"use strict";sf.exports=(e,t={})=>{let i=Number.isSafeInteger(parseInt(t.margin))?new Array(parseInt(t.margin)).fill(" ").join(""):t.margin||"",r=t.width;return(e||"").split(/\r?\n/g).map(n=>n.split(/\s+/g).reduce((s,o)=>(o.length+i.length>=r||s[s.length-1].length+o.length+1<r?s[s.length-1]+=` ${o}`:s.push(`${i}${o}`),s),[i]).join(`
`)).join(`
`)}});var cf=k((yP,af)=>{"use strict";af.exports=(e,t,i)=>{i=i||t;let r=Math.min(t-i,e-Math.floor(i/2));r<0&&(r=0);let n=Math.min(r+i,t);return{startIndex:r,endIndex:n}}});var mt=k((bP,uf)=>{"use strict";uf.exports={action:Yd(),clear:Zd(),style:tf(),strip:_n(),figures:Jo(),lines:nf(),wrap:of(),entriesToDisplay:cf()}});var jt=k((wP,pf)=>{"use strict";var lf=require("readline"),{action:rT}=mt(),nT=require("events"),{beep:sT,cursor:oT}=fe(),aT=pe(),Qo=class extends nT{constructor(t={}){super(),this.firstRender=!0,this.in=t.stdin||process.stdin,this.out=t.stdout||process.stdout,this.onRender=(t.onRender||(()=>{})).bind(this);let i=lf.createInterface({input:this.in,escapeCodeTimeout:50});lf.emitKeypressEvents(this.in,i),this.in.isTTY&&this.in.setRawMode(!0);let r=["SelectPrompt","MultiselectPrompt"].indexOf(this.constructor.name)>-1,n=(s,o)=>{let a=rT(o,r);a===!1?this._&&this._(s,o):typeof this[a]=="function"?this[a](o):this.bell()};this.close=()=>{this.out.write(oT.show),this.in.removeListener("keypress",n),this.in.isTTY&&this.in.setRawMode(!1),i.close(),this.emit(this.aborted?"abort":this.exited?"exit":"submit",this.value),this.closed=!0},this.in.on("keypress",n)}fire(){this.emit("state",{value:this.value,aborted:!!this.aborted,exited:!!this.exited})}bell(){this.out.write(sT)}render(){this.onRender(aT),this.firstRender&&(this.firstRender=!1)}};pf.exports=Qo});var ff=k((EP,df)=>{"use strict";var Tn=pe(),cT=jt(),{erase:uT,cursor:yr}=fe(),{style:ea,clear:ta,lines:lT,figures:pT}=mt(),ia=class extends cT{constructor(t={}){super(t),this.transform=ea.render(t.style),this.scale=this.transform.scale,this.msg=t.message,this.initial=t.initial||"",this.validator=t.validate||(()=>!0),this.value="",this.errorMsg=t.error||"Please Enter A Valid Value",this.cursor=+!!this.initial,this.cursorOffset=0,this.clear=ta("",this.out.columns),this.render()}set value(t){!t&&this.initial?(this.placeholder=!0,this.rendered=Tn.gray(this.transform.render(this.initial))):(this.placeholder=!1,this.rendered=this.transform.render(t)),this._value=t,this.fire()}get value(){return this._value}reset(){this.value="",this.cursor=+!!this.initial,this.cursorOffset=0,this.fire(),this.render()}exit(){this.abort()}abort(){this.value=this.value||this.initial,this.done=this.aborted=!0,this.error=!1,this.red=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}async validate(){let t=await this.validator(this.value);typeof t=="string"&&(this.errorMsg=t,t=!1),this.error=!t}async submit(){if(this.value=this.value||this.initial,this.cursorOffset=0,this.cursor=this.rendered.length,await this.validate(),this.error){this.red=!0,this.fire(),this.render();return}this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}next(){if(!this.placeholder)return this.bell();this.value=this.initial,this.cursor=this.rendered.length,this.fire(),this.render()}moveCursor(t){this.placeholder||(this.cursor=this.cursor+t,this.cursorOffset+=t)}_(t,i){let r=this.value.slice(0,this.cursor),n=this.value.slice(this.cursor);this.value=`${r}${t}${n}`,this.red=!1,this.cursor=this.placeholder?0:r.length+1,this.render()}delete(){if(this.isCursorAtStart())return this.bell();let t=this.value.slice(0,this.cursor-1),i=this.value.slice(this.cursor);this.value=`${t}${i}`,this.red=!1,this.isCursorAtStart()?this.cursorOffset=0:(this.cursorOffset++,this.moveCursor(-1)),this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();let t=this.value.slice(0,this.cursor),i=this.value.slice(this.cursor+1);this.value=`${t}${i}`,this.red=!1,this.isCursorAtEnd()?this.cursorOffset=0:this.cursorOffset++,this.render()}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length,this.render()}left(){if(this.cursor<=0||this.placeholder)return this.bell();this.moveCursor(-1),this.render()}right(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();this.moveCursor(1),this.render()}isCursorAtStart(){return this.cursor===0||this.placeholder&&this.cursor===1}isCursorAtEnd(){return this.cursor===this.rendered.length||this.placeholder&&this.cursor===this.rendered.length+1}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(yr.down(lT(this.outputError,this.out.columns)-1)+ta(this.outputError,this.out.columns)),this.out.write(ta(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[ea.symbol(this.done,this.aborted),Tn.bold(this.msg),ea.delimiter(this.done),this.red?Tn.red(this.rendered):this.rendered].join(" "),this.error&&(this.outputError+=this.errorMsg.split(`
`).reduce((t,i,r)=>t+`
${r?" ":pT.pointerSmall} ${Tn.red().italic(i)}`,"")),this.out.write(uT.line+yr.to(0)+this.outputText+yr.save+this.outputError+yr.restore+yr.move(this.cursorOffset,0)))}};df.exports=ia});var xf=k((_P,gf)=>{"use strict";var Mt=pe(),dT=jt(),{style:hf,clear:mf,figures:Sn,wrap:fT,entriesToDisplay:hT}=mt(),{cursor:mT}=fe(),ra=class extends dT{constructor(t={}){super(t),this.msg=t.message,this.hint=t.hint||"- Use arrow-keys. Return to submit.",this.warn=t.warn||"- This option is disabled",this.cursor=t.initial||0,this.choices=t.choices.map((i,r)=>(typeof i=="string"&&(i={title:i,value:r}),{title:i&&(i.title||i.value||i),value:i&&(i.value===void 0?r:i.value),description:i&&i.description,selected:i&&i.selected,disabled:i&&i.disabled})),this.optionsPerPage=t.optionsPerPage||10,this.value=(this.choices[this.cursor]||{}).value,this.clear=mf("",this.out.columns),this.render()}moveCursor(t){this.cursor=t,this.value=this.choices[t].value,this.fire()}reset(){this.moveCursor(0),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.selection.disabled?this.bell():(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close())}first(){this.moveCursor(0),this.render()}last(){this.moveCursor(this.choices.length-1),this.render()}up(){this.cursor===0?this.moveCursor(this.choices.length-1):this.moveCursor(this.cursor-1),this.render()}down(){this.cursor===this.choices.length-1?this.moveCursor(0):this.moveCursor(this.cursor+1),this.render()}next(){this.moveCursor((this.cursor+1)%this.choices.length),this.render()}_(t,i){if(t===" ")return this.submit()}get selection(){return this.choices[this.cursor]}render(){if(this.closed)return;this.firstRender?this.out.write(mT.hide):this.out.write(mf(this.outputText,this.out.columns)),super.render();let{startIndex:t,endIndex:i}=hT(this.cursor,this.choices.length,this.optionsPerPage);if(this.outputText=[hf.symbol(this.done,this.aborted),Mt.bold(this.msg),hf.delimiter(!1),this.done?this.selection.title:this.selection.disabled?Mt.yellow(this.warn):Mt.gray(this.hint)].join(" "),!this.done){this.outputText+=`
`;for(let r=t;r<i;r++){let n,s,o="",a=this.choices[r];r===t&&t>0?s=Sn.arrowUp:r===i-1&&i<this.choices.length?s=Sn.arrowDown:s=" ",a.disabled?(n=this.cursor===r?Mt.gray().underline(a.title):Mt.strikethrough().gray(a.title),s=(this.cursor===r?Mt.bold().gray(Sn.pointer)+" ":"  ")+s):(n=this.cursor===r?Mt.cyan().underline(a.title):a.title,s=(this.cursor===r?Mt.cyan(Sn.pointer)+" ":"  ")+s,a.description&&this.cursor===r&&(o=` - ${a.description}`,(s.length+n.length+o.length>=this.out.columns||a.description.split(/\r?\n/).length>1)&&(o=`
`+fT(a.description,{margin:3,width:this.out.columns})))),this.outputText+=`${s} ${n}${Mt.gray(o)}
`}}this.out.write(this.outputText)}};gf.exports=ra});var wf=k((TP,bf)=>{"use strict";var Cn=pe(),gT=jt(),{style:vf,clear:xT}=mt(),{cursor:yf,erase:vT}=fe(),na=class extends gT{constructor(t={}){super(t),this.msg=t.message,this.value=!!t.initial,this.active=t.active||"on",this.inactive=t.inactive||"off",this.initialValue=this.value,this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}deactivate(){if(this.value===!1)return this.bell();this.value=!1,this.render()}activate(){if(this.value===!0)return this.bell();this.value=!0,this.render()}delete(){this.deactivate()}left(){this.deactivate()}right(){this.activate()}down(){this.deactivate()}up(){this.activate()}next(){this.value=!this.value,this.fire(),this.render()}_(t,i){if(t===" ")this.value=!this.value;else if(t==="1")this.value=!0;else if(t==="0")this.value=!1;else return this.bell();this.render()}render(){this.closed||(this.firstRender?this.out.write(yf.hide):this.out.write(xT(this.outputText,this.out.columns)),super.render(),this.outputText=[vf.symbol(this.done,this.aborted),Cn.bold(this.msg),vf.delimiter(this.done),this.value?this.inactive:Cn.cyan().underline(this.inactive),Cn.gray("/"),this.value?Cn.cyan().underline(this.active):this.active].join(" "),this.out.write(vT.line+yf.to(0)+this.outputText))}};bf.exports=na});var _t=k((SP,Ef)=>{"use strict";var sa=class e{constructor({token:t,date:i,parts:r,locales:n}){this.token=t,this.date=i||new Date,this.parts=r||[this],this.locales=n||{}}up(){}down(){}next(){let t=this.parts.indexOf(this);return this.parts.find((i,r)=>r>t&&i instanceof e)}setTo(t){}prev(){let t=[].concat(this.parts).reverse(),i=t.indexOf(this);return t.find((r,n)=>n>i&&r instanceof e)}toString(){return String(this.date)}};Ef.exports=sa});var Tf=k((CP,_f)=>{"use strict";var yT=_t(),oa=class extends yT{constructor(t={}){super(t)}up(){this.date.setHours((this.date.getHours()+12)%24)}down(){this.up()}toString(){let t=this.date.getHours()>12?"pm":"am";return/\A/.test(this.token)?t.toUpperCase():t}};_f.exports=oa});var Cf=k((OP,Sf)=>{"use strict";var bT=_t(),wT=e=>(e=e%10,e===1?"st":e===2?"nd":e===3?"rd":"th"),aa=class extends bT{constructor(t={}){super(t)}up(){this.date.setDate(this.date.getDate()+1)}down(){this.date.setDate(this.date.getDate()-1)}setTo(t){this.date.setDate(parseInt(t.substr(-2)))}toString(){let t=this.date.getDate(),i=this.date.getDay();return this.token==="DD"?String(t).padStart(2,"0"):this.token==="Do"?t+wT(t):this.token==="d"?i+1:this.token==="ddd"?this.locales.weekdaysShort[i]:this.token==="dddd"?this.locales.weekdays[i]:t}};Sf.exports=aa});var Af=k((AP,Of)=>{"use strict";var ET=_t(),ca=class extends ET{constructor(t={}){super(t)}up(){this.date.setHours(this.date.getHours()+1)}down(){this.date.setHours(this.date.getHours()-1)}setTo(t){this.date.setHours(parseInt(t.substr(-2)))}toString(){let t=this.date.getHours();return/h/.test(this.token)&&(t=t%12||12),this.token.length>1?String(t).padStart(2,"0"):t}};Of.exports=ca});var If=k((DP,Df)=>{"use strict";var _T=_t(),ua=class extends _T{constructor(t={}){super(t)}up(){this.date.setMilliseconds(this.date.getMilliseconds()+1)}down(){this.date.setMilliseconds(this.date.getMilliseconds()-1)}setTo(t){this.date.setMilliseconds(parseInt(t.substr(-this.token.length)))}toString(){return String(this.date.getMilliseconds()).padStart(4,"0").substr(0,this.token.length)}};Df.exports=ua});var Lf=k((IP,Nf)=>{"use strict";var TT=_t(),la=class extends TT{constructor(t={}){super(t)}up(){this.date.setMinutes(this.date.getMinutes()+1)}down(){this.date.setMinutes(this.date.getMinutes()-1)}setTo(t){this.date.setMinutes(parseInt(t.substr(-2)))}toString(){let t=this.date.getMinutes();return this.token.length>1?String(t).padStart(2,"0"):t}};Nf.exports=la});var Rf=k((NP,kf)=>{"use strict";var ST=_t(),pa=class extends ST{constructor(t={}){super(t)}up(){this.date.setMonth(this.date.getMonth()+1)}down(){this.date.setMonth(this.date.getMonth()-1)}setTo(t){t=parseInt(t.substr(-2))-1,this.date.setMonth(t<0?0:t)}toString(){let t=this.date.getMonth(),i=this.token.length;return i===2?String(t+1).padStart(2,"0"):i===3?this.locales.monthsShort[t]:i===4?this.locales.months[t]:String(t+1)}};kf.exports=pa});var Ff=k((LP,Pf)=>{"use strict";var CT=_t(),da=class extends CT{constructor(t={}){super(t)}up(){this.date.setSeconds(this.date.getSeconds()+1)}down(){this.date.setSeconds(this.date.getSeconds()-1)}setTo(t){this.date.setSeconds(parseInt(t.substr(-2)))}toString(){let t=this.date.getSeconds();return this.token.length>1?String(t).padStart(2,"0"):t}};Pf.exports=da});var Mf=k((kP,jf)=>{"use strict";var OT=_t(),fa=class extends OT{constructor(t={}){super(t)}up(){this.date.setFullYear(this.date.getFullYear()+1)}down(){this.date.setFullYear(this.date.getFullYear()-1)}setTo(t){this.date.setFullYear(t.substr(-4))}toString(){let t=String(this.date.getFullYear()).padStart(4,"0");return this.token.length===2?t.substr(-2):t}};jf.exports=fa});var Bf=k((RP,qf)=>{"use strict";qf.exports={DatePart:_t(),Meridiem:Tf(),Day:Cf(),Hours:Af(),Milliseconds:If(),Minutes:Lf(),Month:Rf(),Seconds:Ff(),Year:Mf()}});var Xf=k((PP,Vf)=>{"use strict";var ha=pe(),AT=jt(),{style:Uf,clear:$f,figures:DT}=mt(),{erase:IT,cursor:zf}=fe(),{DatePart:Hf,Meridiem:NT,Day:LT,Hours:kT,Milliseconds:RT,Minutes:PT,Month:FT,Seconds:jT,Year:MT}=Bf(),qT=/\\(.)|"((?:\\["\\]|[^"])+)"|(D[Do]?|d{3,4}|d)|(M{1,4})|(YY(?:YY)?)|([aA])|([Hh]{1,2})|(m{1,2})|(s{1,2})|(S{1,4})|./g,Gf={1:({token:e})=>e.replace(/\\(.)/g,"$1"),2:e=>new LT(e),3:e=>new FT(e),4:e=>new MT(e),5:e=>new NT(e),6:e=>new kT(e),7:e=>new PT(e),8:e=>new jT(e),9:e=>new RT(e)},BT={months:"January,February,March,April,May,June,July,August,September,October,November,December".split(","),monthsShort:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),weekdays:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),weekdaysShort:"Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(",")},ma=class extends AT{constructor(t={}){super(t),this.msg=t.message,this.cursor=0,this.typed="",this.locales=Object.assign(BT,t.locales),this._date=t.initial||new Date,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.mask=t.mask||"YYYY-MM-DD HH:mm:ss",this.clear=$f("",this.out.columns),this.render()}get value(){return this.date}get date(){return this._date}set date(t){t&&this._date.setTime(t.getTime())}set mask(t){let i;for(this.parts=[];i=qT.exec(t);){let n=i.shift(),s=i.findIndex(o=>o!=null);this.parts.push(s in Gf?Gf[s]({token:i[s]||n,date:this.date,parts:this.parts,locales:this.locales}):i[s]||n)}let r=this.parts.reduce((n,s)=>(typeof s=="string"&&typeof n[n.length-1]=="string"?n[n.length-1]+=s:n.push(s),n),[]);this.parts.splice(0),this.parts.push(...r),this.reset()}moveCursor(t){this.typed="",this.cursor=t,this.fire()}reset(){this.moveCursor(this.parts.findIndex(t=>t instanceof Hf)),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}async validate(){let t=await this.validator(this.value);typeof t=="string"&&(this.errorMsg=t,t=!1),this.error=!t}async submit(){if(await this.validate(),this.error){this.color="red",this.fire(),this.render();return}this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}up(){this.typed="",this.parts[this.cursor].up(),this.render()}down(){this.typed="",this.parts[this.cursor].down(),this.render()}left(){let t=this.parts[this.cursor].prev();if(t==null)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}right(){let t=this.parts[this.cursor].next();if(t==null)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}next(){let t=this.parts[this.cursor].next();this.moveCursor(t?this.parts.indexOf(t):this.parts.findIndex(i=>i instanceof Hf)),this.render()}_(t){/\d/.test(t)&&(this.typed+=t,this.parts[this.cursor].setTo(this.typed),this.render())}render(){this.closed||(this.firstRender?this.out.write(zf.hide):this.out.write($f(this.outputText,this.out.columns)),super.render(),this.outputText=[Uf.symbol(this.done,this.aborted),ha.bold(this.msg),Uf.delimiter(!1),this.parts.reduce((t,i,r)=>t.concat(r===this.cursor&&!this.done?ha.cyan().underline(i.toString()):i),[]).join("")].join(" "),this.error&&(this.outputText+=this.errorMsg.split(`
`).reduce((t,i,r)=>t+`
${r?" ":DT.pointerSmall} ${ha.red().italic(i)}`,"")),this.out.write(IT.line+zf.to(0)+this.outputText))}};Vf.exports=ma});var Jf=k((FP,Kf)=>{"use strict";var On=pe(),UT=jt(),{cursor:An,erase:$T}=fe(),{style:ga,figures:zT,clear:Yf,lines:HT}=mt(),GT=/[0-9]/,xa=e=>e!==void 0,Wf=(e,t)=>{let i=Math.pow(10,t);return Math.round(e*i)/i},va=class extends UT{constructor(t={}){super(t),this.transform=ga.render(t.style),this.msg=t.message,this.initial=xa(t.initial)?t.initial:"",this.float=!!t.float,this.round=t.round||2,this.inc=t.increment||1,this.min=xa(t.min)?t.min:-1/0,this.max=xa(t.max)?t.max:1/0,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.color="cyan",this.value="",this.typed="",this.lastHit=0,this.render()}set value(t){!t&&t!==0?(this.placeholder=!0,this.rendered=On.gray(this.transform.render(`${this.initial}`)),this._value=""):(this.placeholder=!1,this.rendered=this.transform.render(`${Wf(t,this.round)}`),this._value=Wf(t,this.round)),this.fire()}get value(){return this._value}parse(t){return this.float?parseFloat(t):parseInt(t)}valid(t){return t==="-"||t==="."&&this.float||GT.test(t)}reset(){this.typed="",this.value="",this.fire(),this.render()}exit(){this.abort()}abort(){let t=this.value;this.value=t!==""?t:this.initial,this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}async validate(){let t=await this.validator(this.value);typeof t=="string"&&(this.errorMsg=t,t=!1),this.error=!t}async submit(){if(await this.validate(),this.error){this.color="red",this.fire(),this.render();return}let t=this.value;this.value=t!==""?t:this.initial,this.done=!0,this.aborted=!1,this.error=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}up(){if(this.typed="",this.value===""&&(this.value=this.min-this.inc),this.value>=this.max)return this.bell();this.value+=this.inc,this.color="cyan",this.fire(),this.render()}down(){if(this.typed="",this.value===""&&(this.value=this.min+this.inc),this.value<=this.min)return this.bell();this.value-=this.inc,this.color="cyan",this.fire(),this.render()}delete(){let t=this.value.toString();if(t.length===0)return this.bell();this.value=this.parse(t=t.slice(0,-1))||"",this.value!==""&&this.value<this.min&&(this.value=this.min),this.color="cyan",this.fire(),this.render()}next(){this.value=this.initial,this.fire(),this.render()}_(t,i){if(!this.valid(t))return this.bell();let r=Date.now();if(r-this.lastHit>1e3&&(this.typed=""),this.typed+=t,this.lastHit=r,this.color="cyan",t===".")return this.fire();this.value=Math.min(this.parse(this.typed),this.max),this.value>this.max&&(this.value=this.max),this.value<this.min&&(this.value=this.min),this.fire(),this.render()}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(An.down(HT(this.outputError,this.out.columns)-1)+Yf(this.outputError,this.out.columns)),this.out.write(Yf(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[ga.symbol(this.done,this.aborted),On.bold(this.msg),ga.delimiter(this.done),!this.done||!this.done&&!this.placeholder?On[this.color]().underline(this.rendered):this.rendered].join(" "),this.error&&(this.outputError+=this.errorMsg.split(`
`).reduce((t,i,r)=>t+`
${r?" ":zT.pointerSmall} ${On.red().italic(i)}`,"")),this.out.write($T.line+An.to(0)+this.outputText+An.save+this.outputError+An.restore))}};Kf.exports=va});var ba=k((jP,eh)=>{"use strict";var Tt=pe(),{cursor:VT}=fe(),XT=jt(),{clear:Zf,figures:Zt,style:Qf,wrap:YT,entriesToDisplay:WT}=mt(),ya=class extends XT{constructor(t={}){super(t),this.msg=t.message,this.cursor=t.cursor||0,this.scrollIndex=t.cursor||0,this.hint=t.hint||"",this.warn=t.warn||"- This option is disabled -",this.minSelected=t.min,this.showMinError=!1,this.maxChoices=t.max,this.instructions=t.instructions,this.optionsPerPage=t.optionsPerPage||10,this.value=t.choices.map((i,r)=>(typeof i=="string"&&(i={title:i,value:r}),{title:i&&(i.title||i.value||i),description:i&&i.description,value:i&&(i.value===void 0?r:i.value),selected:i&&i.selected,disabled:i&&i.disabled})),this.clear=Zf("",this.out.columns),t.overrideRender||this.render()}reset(){this.value.map(t=>!t.selected),this.cursor=0,this.fire(),this.render()}selected(){return this.value.filter(t=>t.selected)}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){let t=this.value.filter(i=>i.selected);this.minSelected&&t.length<this.minSelected?(this.showMinError=!0,this.render()):(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close())}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.value.length,this.render()}up(){this.cursor===0?this.cursor=this.value.length-1:this.cursor--,this.render()}down(){this.cursor===this.value.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.value[this.cursor].selected=!1,this.render()}right(){if(this.value.filter(t=>t.selected).length>=this.maxChoices)return this.bell();this.value[this.cursor].selected=!0,this.render()}handleSpaceToggle(){let t=this.value[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter(i=>i.selected).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}toggleAll(){if(this.maxChoices!==void 0||this.value[this.cursor].disabled)return this.bell();let t=!this.value[this.cursor].selected;this.value.filter(i=>!i.disabled).forEach(i=>i.selected=t),this.render()}_(t,i){if(t===" ")this.handleSpaceToggle();else if(t==="a")this.toggleAll();else return this.bell()}renderInstructions(){return this.instructions===void 0||this.instructions?typeof this.instructions=="string"?this.instructions:`
Instructions:
    ${Zt.arrowUp}/${Zt.arrowDown}: Highlight option
    ${Zt.arrowLeft}/${Zt.arrowRight}/[space]: Toggle selection
`+(this.maxChoices===void 0?`    a: Toggle all
`:"")+"    enter/return: Complete answer":""}renderOption(t,i,r,n){let s=(i.selected?Tt.green(Zt.radioOn):Zt.radioOff)+" "+n+" ",o,a;return i.disabled?o=t===r?Tt.gray().underline(i.title):Tt.strikethrough().gray(i.title):(o=t===r?Tt.cyan().underline(i.title):i.title,t===r&&i.description&&(a=` - ${i.description}`,(s.length+o.length+a.length>=this.out.columns||i.description.split(/\r?\n/).length>1)&&(a=`
`+YT(i.description,{margin:s.length,width:this.out.columns})))),s+o+Tt.gray(a||"")}paginateOptions(t){if(t.length===0)return Tt.red("No matches for this query.");let{startIndex:i,endIndex:r}=WT(this.cursor,t.length,this.optionsPerPage),n,s=[];for(let o=i;o<r;o++)o===i&&i>0?n=Zt.arrowUp:o===r-1&&r<t.length?n=Zt.arrowDown:n=" ",s.push(this.renderOption(this.cursor,t[o],o,n));return`
`+s.join(`
`)}renderOptions(t){return this.done?"":this.paginateOptions(t)}renderDoneOrInstructions(){if(this.done)return this.value.filter(i=>i.selected).map(i=>i.title).join(", ");let t=[Tt.gray(this.hint),this.renderInstructions()];return this.value[this.cursor].disabled&&t.push(Tt.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(VT.hide),super.render();let t=[Qf.symbol(this.done,this.aborted),Tt.bold(this.msg),Qf.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=Tt.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.value),this.out.write(this.clear+t),this.clear=Zf(t,this.out.columns)}};eh.exports=ya});var sh=k((MP,nh)=>{"use strict";var br=pe(),KT=jt(),{erase:JT,cursor:th}=fe(),{style:wa,clear:ih,figures:Ea,wrap:ZT,entriesToDisplay:QT}=mt(),rh=(e,t)=>e[t]&&(e[t].value||e[t].title||e[t]),eS=(e,t)=>e[t]&&(e[t].title||e[t].value||e[t]),tS=(e,t)=>{let i=e.findIndex(r=>r.value===t||r.title===t);return i>-1?i:void 0},_a=class extends KT{constructor(t={}){super(t),this.msg=t.message,this.suggest=t.suggest,this.choices=t.choices,this.initial=typeof t.initial=="number"?t.initial:tS(t.choices,t.initial),this.select=this.initial||t.cursor||0,this.i18n={noMatches:t.noMatches||"no matches found"},this.fallback=t.fallback||this.initial,this.clearFirst=t.clearFirst||!1,this.suggestions=[],this.input="",this.limit=t.limit||10,this.cursor=0,this.transform=wa.render(t.style),this.scale=this.transform.scale,this.render=this.render.bind(this),this.complete=this.complete.bind(this),this.clear=ih("",this.out.columns),this.complete(this.render),this.render()}set fallback(t){this._fb=Number.isSafeInteger(parseInt(t))?parseInt(t):t}get fallback(){let t;return typeof this._fb=="number"?t=this.choices[this._fb]:typeof this._fb=="string"&&(t={title:this._fb}),t||this._fb||{title:this.i18n.noMatches}}moveSelect(t){this.select=t,this.suggestions.length>0?this.value=rh(this.suggestions,t):this.value=this.fallback.value,this.fire()}async complete(t){let i=this.completing=this.suggest(this.input,this.choices),r=await i;if(this.completing!==i)return;this.suggestions=r.map((s,o,a)=>({title:eS(a,o),value:rh(a,o),description:s.description})),this.completing=!1;let n=Math.max(r.length-1,0);this.moveSelect(Math.min(n,this.select)),t&&t()}reset(){this.input="",this.complete(()=>{this.moveSelect(this.initial!==void 0?this.initial:0),this.render()}),this.render()}exit(){this.clearFirst&&this.input.length>0?this.reset():(this.done=this.exited=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close())}abort(){this.done=this.aborted=!0,this.exited=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.done=!0,this.aborted=this.exited=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}_(t,i){let r=this.input.slice(0,this.cursor),n=this.input.slice(this.cursor);this.input=`${r}${t}${n}`,this.cursor=r.length+1,this.complete(this.render),this.render()}delete(){if(this.cursor===0)return this.bell();let t=this.input.slice(0,this.cursor-1),i=this.input.slice(this.cursor);this.input=`${t}${i}`,this.complete(this.render),this.cursor=this.cursor-1,this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();let t=this.input.slice(0,this.cursor),i=this.input.slice(this.cursor+1);this.input=`${t}${i}`,this.complete(this.render),this.render()}first(){this.moveSelect(0),this.render()}last(){this.moveSelect(this.suggestions.length-1),this.render()}up(){this.select===0?this.moveSelect(this.suggestions.length-1):this.moveSelect(this.select-1),this.render()}down(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}next(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}nextPage(){this.moveSelect(Math.min(this.select+this.limit,this.suggestions.length-1)),this.render()}prevPage(){this.moveSelect(Math.max(this.select-this.limit,0)),this.render()}left(){if(this.cursor<=0)return this.bell();this.cursor=this.cursor-1,this.render()}right(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();this.cursor=this.cursor+1,this.render()}renderOption(t,i,r,n){let s,o=r?Ea.arrowUp:n?Ea.arrowDown:" ",a=i?br.cyan().underline(t.title):t.title;return o=(i?br.cyan(Ea.pointer)+" ":"  ")+o,t.description&&(s=` - ${t.description}`,(o.length+a.length+s.length>=this.out.columns||t.description.split(/\r?\n/).length>1)&&(s=`
`+ZT(t.description,{margin:3,width:this.out.columns}))),o+" "+a+br.gray(s||"")}render(){if(this.closed)return;this.firstRender?this.out.write(th.hide):this.out.write(ih(this.outputText,this.out.columns)),super.render();let{startIndex:t,endIndex:i}=QT(this.select,this.choices.length,this.limit);if(this.outputText=[wa.symbol(this.done,this.aborted,this.exited),br.bold(this.msg),wa.delimiter(this.completing),this.done&&this.suggestions[this.select]?this.suggestions[this.select].title:this.rendered=this.transform.render(this.input)].join(" "),!this.done){let r=this.suggestions.slice(t,i).map((n,s)=>this.renderOption(n,this.select===s+t,s===0&&t>0,s+t===i-1&&i<this.choices.length)).join(`
`);this.outputText+=`
`+(r||br.gray(this.fallback.title))}this.out.write(JT.line+th.to(0)+this.outputText)}};nh.exports=_a});var uh=k((qP,ch)=>{"use strict";var qt=pe(),{cursor:iS}=fe(),rS=ba(),{clear:oh,style:ah,figures:ji}=mt(),Ta=class extends rS{constructor(t={}){t.overrideRender=!0,super(t),this.inputValue="",this.clear=oh("",this.out.columns),this.filteredOptions=this.value,this.render()}last(){this.cursor=this.filteredOptions.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.filteredOptions.length,this.render()}up(){this.cursor===0?this.cursor=this.filteredOptions.length-1:this.cursor--,this.render()}down(){this.cursor===this.filteredOptions.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.filteredOptions[this.cursor].selected=!1,this.render()}right(){if(this.value.filter(t=>t.selected).length>=this.maxChoices)return this.bell();this.filteredOptions[this.cursor].selected=!0,this.render()}delete(){this.inputValue.length&&(this.inputValue=this.inputValue.substr(0,this.inputValue.length-1),this.updateFilteredOptions())}updateFilteredOptions(){let t=this.filteredOptions[this.cursor];this.filteredOptions=this.value.filter(r=>this.inputValue?!!(typeof r.title=="string"&&r.title.toLowerCase().includes(this.inputValue.toLowerCase())||typeof r.value=="string"&&r.value.toLowerCase().includes(this.inputValue.toLowerCase())):!0);let i=this.filteredOptions.findIndex(r=>r===t);this.cursor=i<0?0:i,this.render()}handleSpaceToggle(){let t=this.filteredOptions[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter(i=>i.selected).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}handleInputChange(t){this.inputValue=this.inputValue+t,this.updateFilteredOptions()}_(t,i){t===" "?this.handleSpaceToggle():this.handleInputChange(t)}renderInstructions(){return this.instructions===void 0||this.instructions?typeof this.instructions=="string"?this.instructions:`
Instructions:
    ${ji.arrowUp}/${ji.arrowDown}: Highlight option
    ${ji.arrowLeft}/${ji.arrowRight}/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer
`:""}renderCurrentInput(){return`
Filtered results for: ${this.inputValue?this.inputValue:qt.gray("Enter something to filter")}
`}renderOption(t,i,r){let n;return i.disabled?n=t===r?qt.gray().underline(i.title):qt.strikethrough().gray(i.title):n=t===r?qt.cyan().underline(i.title):i.title,(i.selected?qt.green(ji.radioOn):ji.radioOff)+"  "+n}renderDoneOrInstructions(){if(this.done)return this.value.filter(i=>i.selected).map(i=>i.title).join(", ");let t=[qt.gray(this.hint),this.renderInstructions(),this.renderCurrentInput()];return this.filteredOptions.length&&this.filteredOptions[this.cursor].disabled&&t.push(qt.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(iS.hide),super.render();let t=[ah.symbol(this.done,this.aborted),qt.bold(this.msg),ah.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=qt.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.filteredOptions),this.out.write(this.clear+t),this.clear=oh(t,this.out.columns)}};ch.exports=Ta});var hh=k((BP,fh)=>{"use strict";var lh=pe(),nS=jt(),{style:ph,clear:sS}=mt(),{erase:oS,cursor:dh}=fe(),Sa=class extends nS{constructor(t={}){super(t),this.msg=t.message,this.value=t.initial,this.initialValue=!!t.initial,this.yesMsg=t.yes||"yes",this.yesOption=t.yesOption||"(Y/n)",this.noMsg=t.no||"no",this.noOption=t.noOption||"(y/N)",this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.value=this.value||!1,this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}_(t,i){return t.toLowerCase()==="y"?(this.value=!0,this.submit()):t.toLowerCase()==="n"?(this.value=!1,this.submit()):this.bell()}render(){this.closed||(this.firstRender?this.out.write(dh.hide):this.out.write(sS(this.outputText,this.out.columns)),super.render(),this.outputText=[ph.symbol(this.done,this.aborted),lh.bold(this.msg),ph.delimiter(this.done),this.done?this.value?this.yesMsg:this.noMsg:lh.gray(this.initialValue?this.yesOption:this.noOption)].join(" "),this.out.write(oS.line+dh.to(0)+this.outputText))}};fh.exports=Sa});var gh=k((UP,mh)=>{"use strict";mh.exports={TextPrompt:ff(),SelectPrompt:xf(),TogglePrompt:wf(),DatePrompt:Xf(),NumberPrompt:Jf(),MultiselectPrompt:ba(),AutocompletePrompt:sh(),AutocompleteMultiselectPrompt:uh(),ConfirmPrompt:hh()}});var vh=k(xh=>{"use strict";var Ye=xh,aS=gh(),Dn=e=>e;function St(e,t,i={}){return new Promise((r,n)=>{let s=new aS[e](t),o=i.onAbort||Dn,a=i.onSubmit||Dn,c=i.onExit||Dn;s.on("state",t.onState||Dn),s.on("submit",u=>r(a(u))),s.on("exit",u=>r(c(u))),s.on("abort",u=>n(o(u)))})}Ye.text=e=>St("TextPrompt",e);Ye.password=e=>(e.style="password",Ye.text(e));Ye.invisible=e=>(e.style="invisible",Ye.text(e));Ye.number=e=>St("NumberPrompt",e);Ye.date=e=>St("DatePrompt",e);Ye.confirm=e=>St("ConfirmPrompt",e);Ye.list=e=>{let t=e.separator||",";return St("TextPrompt",e,{onSubmit:i=>i.split(t).map(r=>r.trim())})};Ye.toggle=e=>St("TogglePrompt",e);Ye.select=e=>St("SelectPrompt",e);Ye.multiselect=e=>{e.choices=[].concat(e.choices||[]);let t=i=>i.filter(r=>r.selected).map(r=>r.value);return St("MultiselectPrompt",e,{onAbort:t,onSubmit:t})};Ye.autocompleteMultiselect=e=>{e.choices=[].concat(e.choices||[]);let t=i=>i.filter(r=>r.selected).map(r=>r.value);return St("AutocompleteMultiselectPrompt",e,{onAbort:t,onSubmit:t})};var cS=(e,t)=>Promise.resolve(t.filter(i=>i.title.slice(0,e.length).toLowerCase()===e.toLowerCase()));Ye.autocomplete=e=>(e.suggest=e.suggest||cS,e.choices=[].concat(e.choices||[]),St("AutocompletePrompt",e))});var wh=k((zP,bh)=>{"use strict";var Ca=vh(),uS=["suggest","format","onState","validate","onRender","type"],yh=()=>{};async function Qt(e=[],{onSubmit:t=yh,onCancel:i=yh}={}){let r={},n=Qt._override||{};e=[].concat(e);let s,o,a,c,u,f,g=async(x,l,m=!1)=>{if(!(!m&&x.validate&&x.validate(l)!==!0))return x.format?await x.format(l,r):l};for(o of e)if({name:c,type:u}=o,typeof u=="function"&&(u=await u(s,{...r},o),o.type=u),!!u){for(let x in o){if(uS.includes(x))continue;let l=o[x];o[x]=typeof l=="function"?await l(s,{...r},f):l}if(f=o,typeof o.message!="string")throw new Error("prompt message is required");if({name:c,type:u}=o,Ca[u]===void 0)throw new Error(`prompt type (${u}) is not defined`);if(n[o.name]!==void 0&&(s=await g(o,n[o.name]),s!==void 0)){r[c]=s;continue}try{s=Qt._injected?lS(Qt._injected,o.initial):await Ca[u](o),r[c]=s=await g(o,s,!0),a=await t(o,s,r)}catch{a=!await i(o,r)}if(a)return r}return r}function lS(e,t){let i=e.shift();if(i instanceof Error)throw i;return i===void 0?t:i}function pS(e){Qt._injected=(Qt._injected||[]).concat(e)}function dS(e){Qt._override=Object.assign({},e)}bh.exports=Object.assign(Qt,{prompt:Qt,prompts:Ca,inject:pS,override:dS})});var _h=k((HP,Eh)=>{"use strict";function fS(e){e=(Array.isArray(e)?e:e.split(".")).map(Number);let t=0,i=process.versions.node.split(".").map(Number);for(;t<e.length;t++){if(i[t]>e[t])return!1;if(e[t]>i[t])return!0}return!1}Eh.exports=fS("8.6.0")?Vd():wh()});var Mh=k((R2,jh)=>{"use strict";var Fh=require("stream").Stream,ZS=require("util");jh.exports=xt;function xt(){this.source=null,this.dataSize=0,this.maxDataSize=1024*1024,this.pauseStream=!0,this._maxDataSizeExceeded=!1,this._released=!1,this._bufferedEvents=[]}ZS.inherits(xt,Fh);xt.create=function(e,t){var i=new this;t=t||{};for(var r in t)i[r]=t[r];i.source=e;var n=e.emit;return e.emit=function(){return i._handleEmit(arguments),n.apply(e,arguments)},e.on("error",function(){}),i.pauseStream&&e.pause(),i};Object.defineProperty(xt.prototype,"readable",{configurable:!0,enumerable:!0,get:function(){return this.source.readable}});xt.prototype.setEncoding=function(){return this.source.setEncoding.apply(this.source,arguments)};xt.prototype.resume=function(){this._released||this.release(),this.source.resume()};xt.prototype.pause=function(){this.source.pause()};xt.prototype.release=function(){this._released=!0,this._bufferedEvents.forEach(function(e){this.emit.apply(this,e)}.bind(this)),this._bufferedEvents=[]};xt.prototype.pipe=function(){var e=Fh.prototype.pipe.apply(this,arguments);return this.resume(),e};xt.prototype._handleEmit=function(e){if(this._released){this.emit.apply(this,e);return}e[0]==="data"&&(this.dataSize+=e[1].length,this._checkIfMaxDataSizeExceeded()),this._bufferedEvents.push(e)};xt.prototype._checkIfMaxDataSizeExceeded=function(){if(!this._maxDataSizeExceeded&&!(this.dataSize<=this.maxDataSize)){this._maxDataSizeExceeded=!0;var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this.emit("error",new Error(e))}}});var $h=k((P2,Uh)=>{"use strict";var QS=require("util"),Bh=require("stream").Stream,qh=Mh();Uh.exports=ye;function ye(){this.writable=!1,this.readable=!0,this.dataSize=0,this.maxDataSize=2*1024*1024,this.pauseStreams=!0,this._released=!1,this._streams=[],this._currentStream=null,this._insideLoop=!1,this._pendingNext=!1}QS.inherits(ye,Bh);ye.create=function(e){var t=new this;e=e||{};for(var i in e)t[i]=e[i];return t};ye.isStreamLike=function(e){return typeof e!="function"&&typeof e!="string"&&typeof e!="boolean"&&typeof e!="number"&&!Buffer.isBuffer(e)};ye.prototype.append=function(e){var t=ye.isStreamLike(e);if(t){if(!(e instanceof qh)){var i=qh.create(e,{maxDataSize:1/0,pauseStream:this.pauseStreams});e.on("data",this._checkDataSize.bind(this)),e=i}this._handleErrors(e),this.pauseStreams&&e.pause()}return this._streams.push(e),this};ye.prototype.pipe=function(e,t){return Bh.prototype.pipe.call(this,e,t),this.resume(),e};ye.prototype._getNext=function(){if(this._currentStream=null,this._insideLoop){this._pendingNext=!0;return}this._insideLoop=!0;try{do this._pendingNext=!1,this._realGetNext();while(this._pendingNext)}finally{this._insideLoop=!1}};ye.prototype._realGetNext=function(){var e=this._streams.shift();if(typeof e>"u"){this.end();return}if(typeof e!="function"){this._pipeNext(e);return}var t=e;t(function(i){var r=ye.isStreamLike(i);r&&(i.on("data",this._checkDataSize.bind(this)),this._handleErrors(i)),this._pipeNext(i)}.bind(this))};ye.prototype._pipeNext=function(e){this._currentStream=e;var t=ye.isStreamLike(e);if(t){e.on("end",this._getNext.bind(this)),e.pipe(this,{end:!1});return}var i=e;this.write(i),this._getNext()};ye.prototype._handleErrors=function(e){var t=this;e.on("error",function(i){t._emitError(i)})};ye.prototype.write=function(e){this.emit("data",e)};ye.prototype.pause=function(){this.pauseStreams&&(this.pauseStreams&&this._currentStream&&typeof this._currentStream.pause=="function"&&this._currentStream.pause(),this.emit("pause"))};ye.prototype.resume=function(){this._released||(this._released=!0,this.writable=!0,this._getNext()),this.pauseStreams&&this._currentStream&&typeof this._currentStream.resume=="function"&&this._currentStream.resume(),this.emit("resume")};ye.prototype.end=function(){this._reset(),this.emit("end")};ye.prototype.destroy=function(){this._reset(),this.emit("close")};ye.prototype._reset=function(){this.writable=!1,this._streams=[],this._currentStream=null};ye.prototype._checkDataSize=function(){if(this._updateDataSize(),!(this.dataSize<=this.maxDataSize)){var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this._emitError(new Error(e))}};ye.prototype._updateDataSize=function(){this.dataSize=0;var e=this;this._streams.forEach(function(t){t.dataSize&&(e.dataSize+=t.dataSize)}),this._currentStream&&this._currentStream.dataSize&&(this.dataSize+=this._currentStream.dataSize)};ye.prototype._emitError=function(e){this._reset(),this.emit("error",e)}});var zh=k((F2,eC)=>{eC.exports={"application/1d-interleaved-parityfec":{source:"iana"},"application/3gpdash-qoe-report+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/3gpp-ims+xml":{source:"iana",compressible:!0},"application/3gpphal+json":{source:"iana",compressible:!0},"application/3gpphalforms+json":{source:"iana",compressible:!0},"application/a2l":{source:"iana"},"application/ace+cbor":{source:"iana"},"application/activemessage":{source:"iana"},"application/activity+json":{source:"iana",compressible:!0},"application/alto-costmap+json":{source:"iana",compressible:!0},"application/alto-costmapfilter+json":{source:"iana",compressible:!0},"application/alto-directory+json":{source:"iana",compressible:!0},"application/alto-endpointcost+json":{source:"iana",compressible:!0},"application/alto-endpointcostparams+json":{source:"iana",compressible:!0},"application/alto-endpointprop+json":{source:"iana",compressible:!0},"application/alto-endpointpropparams+json":{source:"iana",compressible:!0},"application/alto-error+json":{source:"iana",compressible:!0},"application/alto-networkmap+json":{source:"iana",compressible:!0},"application/alto-networkmapfilter+json":{source:"iana",compressible:!0},"application/alto-updatestreamcontrol+json":{source:"iana",compressible:!0},"application/alto-updatestreamparams+json":{source:"iana",compressible:!0},"application/aml":{source:"iana"},"application/andrew-inset":{source:"iana",extensions:["ez"]},"application/applefile":{source:"iana"},"application/applixware":{source:"apache",extensions:["aw"]},"application/at+jwt":{source:"iana"},"application/atf":{source:"iana"},"application/atfx":{source:"iana"},"application/atom+xml":{source:"iana",compressible:!0,extensions:["atom"]},"application/atomcat+xml":{source:"iana",compressible:!0,extensions:["atomcat"]},"application/atomdeleted+xml":{source:"iana",compressible:!0,extensions:["atomdeleted"]},"application/atomicmail":{source:"iana"},"application/atomsvc+xml":{source:"iana",compressible:!0,extensions:["atomsvc"]},"application/atsc-dwd+xml":{source:"iana",compressible:!0,extensions:["dwd"]},"application/atsc-dynamic-event-message":{source:"iana"},"application/atsc-held+xml":{source:"iana",compressible:!0,extensions:["held"]},"application/atsc-rdt+json":{source:"iana",compressible:!0},"application/atsc-rsat+xml":{source:"iana",compressible:!0,extensions:["rsat"]},"application/atxml":{source:"iana"},"application/auth-policy+xml":{source:"iana",compressible:!0},"application/bacnet-xdd+zip":{source:"iana",compressible:!1},"application/batch-smtp":{source:"iana"},"application/bdoc":{compressible:!1,extensions:["bdoc"]},"application/beep+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/calendar+json":{source:"iana",compressible:!0},"application/calendar+xml":{source:"iana",compressible:!0,extensions:["xcs"]},"application/call-completion":{source:"iana"},"application/cals-1840":{source:"iana"},"application/captive+json":{source:"iana",compressible:!0},"application/cbor":{source:"iana"},"application/cbor-seq":{source:"iana"},"application/cccex":{source:"iana"},"application/ccmp+xml":{source:"iana",compressible:!0},"application/ccxml+xml":{source:"iana",compressible:!0,extensions:["ccxml"]},"application/cdfx+xml":{source:"iana",compressible:!0,extensions:["cdfx"]},"application/cdmi-capability":{source:"iana",extensions:["cdmia"]},"application/cdmi-container":{source:"iana",extensions:["cdmic"]},"application/cdmi-domain":{source:"iana",extensions:["cdmid"]},"application/cdmi-object":{source:"iana",extensions:["cdmio"]},"application/cdmi-queue":{source:"iana",extensions:["cdmiq"]},"application/cdni":{source:"iana"},"application/cea":{source:"iana"},"application/cea-2018+xml":{source:"iana",compressible:!0},"application/cellml+xml":{source:"iana",compressible:!0},"application/cfw":{source:"iana"},"application/city+json":{source:"iana",compressible:!0},"application/clr":{source:"iana"},"application/clue+xml":{source:"iana",compressible:!0},"application/clue_info+xml":{source:"iana",compressible:!0},"application/cms":{source:"iana"},"application/cnrp+xml":{source:"iana",compressible:!0},"application/coap-group+json":{source:"iana",compressible:!0},"application/coap-payload":{source:"iana"},"application/commonground":{source:"iana"},"application/conference-info+xml":{source:"iana",compressible:!0},"application/cose":{source:"iana"},"application/cose-key":{source:"iana"},"application/cose-key-set":{source:"iana"},"application/cpl+xml":{source:"iana",compressible:!0,extensions:["cpl"]},"application/csrattrs":{source:"iana"},"application/csta+xml":{source:"iana",compressible:!0},"application/cstadata+xml":{source:"iana",compressible:!0},"application/csvm+json":{source:"iana",compressible:!0},"application/cu-seeme":{source:"apache",extensions:["cu"]},"application/cwt":{source:"iana"},"application/cybercash":{source:"iana"},"application/dart":{compressible:!0},"application/dash+xml":{source:"iana",compressible:!0,extensions:["mpd"]},"application/dash-patch+xml":{source:"iana",compressible:!0,extensions:["mpp"]},"application/dashdelta":{source:"iana"},"application/davmount+xml":{source:"iana",compressible:!0,extensions:["davmount"]},"application/dca-rft":{source:"iana"},"application/dcd":{source:"iana"},"application/dec-dx":{source:"iana"},"application/dialog-info+xml":{source:"iana",compressible:!0},"application/dicom":{source:"iana"},"application/dicom+json":{source:"iana",compressible:!0},"application/dicom+xml":{source:"iana",compressible:!0},"application/dii":{source:"iana"},"application/dit":{source:"iana"},"application/dns":{source:"iana"},"application/dns+json":{source:"iana",compressible:!0},"application/dns-message":{source:"iana"},"application/docbook+xml":{source:"apache",compressible:!0,extensions:["dbk"]},"application/dots+cbor":{source:"iana"},"application/dskpp+xml":{source:"iana",compressible:!0},"application/dssc+der":{source:"iana",extensions:["dssc"]},"application/dssc+xml":{source:"iana",compressible:!0,extensions:["xdssc"]},"application/dvcs":{source:"iana"},"application/ecmascript":{source:"iana",compressible:!0,extensions:["es","ecma"]},"application/edi-consent":{source:"iana"},"application/edi-x12":{source:"iana",compressible:!1},"application/edifact":{source:"iana",compressible:!1},"application/efi":{source:"iana"},"application/elm+json":{source:"iana",charset:"UTF-8",compressible:!0},"application/elm+xml":{source:"iana",compressible:!0},"application/emergencycalldata.cap+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/emergencycalldata.comment+xml":{source:"iana",compressible:!0},"application/emergencycalldata.control+xml":{source:"iana",compressible:!0},"application/emergencycalldata.deviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.ecall.msd":{source:"iana"},"application/emergencycalldata.providerinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.serviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.subscriberinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.veds+xml":{source:"iana",compressible:!0},"application/emma+xml":{source:"iana",compressible:!0,extensions:["emma"]},"application/emotionml+xml":{source:"iana",compressible:!0,extensions:["emotionml"]},"application/encaprtp":{source:"iana"},"application/epp+xml":{source:"iana",compressible:!0},"application/epub+zip":{source:"iana",compressible:!1,extensions:["epub"]},"application/eshop":{source:"iana"},"application/exi":{source:"iana",extensions:["exi"]},"application/expect-ct-report+json":{source:"iana",compressible:!0},"application/express":{source:"iana",extensions:["exp"]},"application/fastinfoset":{source:"iana"},"application/fastsoap":{source:"iana"},"application/fdt+xml":{source:"iana",compressible:!0,extensions:["fdt"]},"application/fhir+json":{source:"iana",charset:"UTF-8",compressible:!0},"application/fhir+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/fido.trusted-apps+json":{compressible:!0},"application/fits":{source:"iana"},"application/flexfec":{source:"iana"},"application/font-sfnt":{source:"iana"},"application/font-tdpfr":{source:"iana",extensions:["pfr"]},"application/font-woff":{source:"iana",compressible:!1},"application/framework-attributes+xml":{source:"iana",compressible:!0},"application/geo+json":{source:"iana",compressible:!0,extensions:["geojson"]},"application/geo+json-seq":{source:"iana"},"application/geopackage+sqlite3":{source:"iana"},"application/geoxacml+xml":{source:"iana",compressible:!0},"application/gltf-buffer":{source:"iana"},"application/gml+xml":{source:"iana",compressible:!0,extensions:["gml"]},"application/gpx+xml":{source:"apache",compressible:!0,extensions:["gpx"]},"application/gxf":{source:"apache",extensions:["gxf"]},"application/gzip":{source:"iana",compressible:!1,extensions:["gz"]},"application/h224":{source:"iana"},"application/held+xml":{source:"iana",compressible:!0},"application/hjson":{extensions:["hjson"]},"application/http":{source:"iana"},"application/hyperstudio":{source:"iana",extensions:["stk"]},"application/ibe-key-request+xml":{source:"iana",compressible:!0},"application/ibe-pkg-reply+xml":{source:"iana",compressible:!0},"application/ibe-pp-data":{source:"iana"},"application/iges":{source:"iana"},"application/im-iscomposing+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/index":{source:"iana"},"application/index.cmd":{source:"iana"},"application/index.obj":{source:"iana"},"application/index.response":{source:"iana"},"application/index.vnd":{source:"iana"},"application/inkml+xml":{source:"iana",compressible:!0,extensions:["ink","inkml"]},"application/iotp":{source:"iana"},"application/ipfix":{source:"iana",extensions:["ipfix"]},"application/ipp":{source:"iana"},"application/isup":{source:"iana"},"application/its+xml":{source:"iana",compressible:!0,extensions:["its"]},"application/java-archive":{source:"apache",compressible:!1,extensions:["jar","war","ear"]},"application/java-serialized-object":{source:"apache",compressible:!1,extensions:["ser"]},"application/java-vm":{source:"apache",compressible:!1,extensions:["class"]},"application/javascript":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["js","mjs"]},"application/jf2feed+json":{source:"iana",compressible:!0},"application/jose":{source:"iana"},"application/jose+json":{source:"iana",compressible:!0},"application/jrd+json":{source:"iana",compressible:!0},"application/jscalendar+json":{source:"iana",compressible:!0},"application/json":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["json","map"]},"application/json-patch+json":{source:"iana",compressible:!0},"application/json-seq":{source:"iana"},"application/json5":{extensions:["json5"]},"application/jsonml+json":{source:"apache",compressible:!0,extensions:["jsonml"]},"application/jwk+json":{source:"iana",compressible:!0},"application/jwk-set+json":{source:"iana",compressible:!0},"application/jwt":{source:"iana"},"application/kpml-request+xml":{source:"iana",compressible:!0},"application/kpml-response+xml":{source:"iana",compressible:!0},"application/ld+json":{source:"iana",compressible:!0,extensions:["jsonld"]},"application/lgr+xml":{source:"iana",compressible:!0,extensions:["lgr"]},"application/link-format":{source:"iana"},"application/load-control+xml":{source:"iana",compressible:!0},"application/lost+xml":{source:"iana",compressible:!0,extensions:["lostxml"]},"application/lostsync+xml":{source:"iana",compressible:!0},"application/lpf+zip":{source:"iana",compressible:!1},"application/lxf":{source:"iana"},"application/mac-binhex40":{source:"iana",extensions:["hqx"]},"application/mac-compactpro":{source:"apache",extensions:["cpt"]},"application/macwriteii":{source:"iana"},"application/mads+xml":{source:"iana",compressible:!0,extensions:["mads"]},"application/manifest+json":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["webmanifest"]},"application/marc":{source:"iana",extensions:["mrc"]},"application/marcxml+xml":{source:"iana",compressible:!0,extensions:["mrcx"]},"application/mathematica":{source:"iana",extensions:["ma","nb","mb"]},"application/mathml+xml":{source:"iana",compressible:!0,extensions:["mathml"]},"application/mathml-content+xml":{source:"iana",compressible:!0},"application/mathml-presentation+xml":{source:"iana",compressible:!0},"application/mbms-associated-procedure-description+xml":{source:"iana",compressible:!0},"application/mbms-deregister+xml":{source:"iana",compressible:!0},"application/mbms-envelope+xml":{source:"iana",compressible:!0},"application/mbms-msk+xml":{source:"iana",compressible:!0},"application/mbms-msk-response+xml":{source:"iana",compressible:!0},"application/mbms-protection-description+xml":{source:"iana",compressible:!0},"application/mbms-reception-report+xml":{source:"iana",compressible:!0},"application/mbms-register+xml":{source:"iana",compressible:!0},"application/mbms-register-response+xml":{source:"iana",compressible:!0},"application/mbms-schedule+xml":{source:"iana",compressible:!0},"application/mbms-user-service-description+xml":{source:"iana",compressible:!0},"application/mbox":{source:"iana",extensions:["mbox"]},"application/media-policy-dataset+xml":{source:"iana",compressible:!0,extensions:["mpf"]},"application/media_control+xml":{source:"iana",compressible:!0},"application/mediaservercontrol+xml":{source:"iana",compressible:!0,extensions:["mscml"]},"application/merge-patch+json":{source:"iana",compressible:!0},"application/metalink+xml":{source:"apache",compressible:!0,extensions:["metalink"]},"application/metalink4+xml":{source:"iana",compressible:!0,extensions:["meta4"]},"application/mets+xml":{source:"iana",compressible:!0,extensions:["mets"]},"application/mf4":{source:"iana"},"application/mikey":{source:"iana"},"application/mipc":{source:"iana"},"application/missing-blocks+cbor-seq":{source:"iana"},"application/mmt-aei+xml":{source:"iana",compressible:!0,extensions:["maei"]},"application/mmt-usd+xml":{source:"iana",compressible:!0,extensions:["musd"]},"application/mods+xml":{source:"iana",compressible:!0,extensions:["mods"]},"application/moss-keys":{source:"iana"},"application/moss-signature":{source:"iana"},"application/mosskey-data":{source:"iana"},"application/mosskey-request":{source:"iana"},"application/mp21":{source:"iana",extensions:["m21","mp21"]},"application/mp4":{source:"iana",extensions:["mp4s","m4p"]},"application/mpeg4-generic":{source:"iana"},"application/mpeg4-iod":{source:"iana"},"application/mpeg4-iod-xmt":{source:"iana"},"application/mrb-consumer+xml":{source:"iana",compressible:!0},"application/mrb-publish+xml":{source:"iana",compressible:!0},"application/msc-ivr+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/msc-mixer+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/msword":{source:"iana",compressible:!1,extensions:["doc","dot"]},"application/mud+json":{source:"iana",compressible:!0},"application/multipart-core":{source:"iana"},"application/mxf":{source:"iana",extensions:["mxf"]},"application/n-quads":{source:"iana",extensions:["nq"]},"application/n-triples":{source:"iana",extensions:["nt"]},"application/nasdata":{source:"iana"},"application/news-checkgroups":{source:"iana",charset:"US-ASCII"},"application/news-groupinfo":{source:"iana",charset:"US-ASCII"},"application/news-transmission":{source:"iana"},"application/nlsml+xml":{source:"iana",compressible:!0},"application/node":{source:"iana",extensions:["cjs"]},"application/nss":{source:"iana"},"application/oauth-authz-req+jwt":{source:"iana"},"application/oblivious-dns-message":{source:"iana"},"application/ocsp-request":{source:"iana"},"application/ocsp-response":{source:"iana"},"application/octet-stream":{source:"iana",compressible:!1,extensions:["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{source:"iana",extensions:["oda"]},"application/odm+xml":{source:"iana",compressible:!0},"application/odx":{source:"iana"},"application/oebps-package+xml":{source:"iana",compressible:!0,extensions:["opf"]},"application/ogg":{source:"iana",compressible:!1,extensions:["ogx"]},"application/omdoc+xml":{source:"apache",compressible:!0,extensions:["omdoc"]},"application/onenote":{source:"apache",extensions:["onetoc","onetoc2","onetmp","onepkg"]},"application/opc-nodeset+xml":{source:"iana",compressible:!0},"application/oscore":{source:"iana"},"application/oxps":{source:"iana",extensions:["oxps"]},"application/p21":{source:"iana"},"application/p21+zip":{source:"iana",compressible:!1},"application/p2p-overlay+xml":{source:"iana",compressible:!0,extensions:["relo"]},"application/parityfec":{source:"iana"},"application/passport":{source:"iana"},"application/patch-ops-error+xml":{source:"iana",compressible:!0,extensions:["xer"]},"application/pdf":{source:"iana",compressible:!1,extensions:["pdf"]},"application/pdx":{source:"iana"},"application/pem-certificate-chain":{source:"iana"},"application/pgp-encrypted":{source:"iana",compressible:!1,extensions:["pgp"]},"application/pgp-keys":{source:"iana",extensions:["asc"]},"application/pgp-signature":{source:"iana",extensions:["asc","sig"]},"application/pics-rules":{source:"apache",extensions:["prf"]},"application/pidf+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/pidf-diff+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/pkcs10":{source:"iana",extensions:["p10"]},"application/pkcs12":{source:"iana"},"application/pkcs7-mime":{source:"iana",extensions:["p7m","p7c"]},"application/pkcs7-signature":{source:"iana",extensions:["p7s"]},"application/pkcs8":{source:"iana",extensions:["p8"]},"application/pkcs8-encrypted":{source:"iana"},"application/pkix-attr-cert":{source:"iana",extensions:["ac"]},"application/pkix-cert":{source:"iana",extensions:["cer"]},"application/pkix-crl":{source:"iana",extensions:["crl"]},"application/pkix-pkipath":{source:"iana",extensions:["pkipath"]},"application/pkixcmp":{source:"iana",extensions:["pki"]},"application/pls+xml":{source:"iana",compressible:!0,extensions:["pls"]},"application/poc-settings+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/postscript":{source:"iana",compressible:!0,extensions:["ai","eps","ps"]},"application/ppsp-tracker+json":{source:"iana",compressible:!0},"application/problem+json":{source:"iana",compressible:!0},"application/problem+xml":{source:"iana",compressible:!0},"application/provenance+xml":{source:"iana",compressible:!0,extensions:["provx"]},"application/prs.alvestrand.titrax-sheet":{source:"iana"},"application/prs.cww":{source:"iana",extensions:["cww"]},"application/prs.cyn":{source:"iana",charset:"7-BIT"},"application/prs.hpub+zip":{source:"iana",compressible:!1},"application/prs.nprend":{source:"iana"},"application/prs.plucker":{source:"iana"},"application/prs.rdf-xml-crypt":{source:"iana"},"application/prs.xsf+xml":{source:"iana",compressible:!0},"application/pskc+xml":{source:"iana",compressible:!0,extensions:["pskcxml"]},"application/pvd+json":{source:"iana",compressible:!0},"application/qsig":{source:"iana"},"application/raml+yaml":{compressible:!0,extensions:["raml"]},"application/raptorfec":{source:"iana"},"application/rdap+json":{source:"iana",compressible:!0},"application/rdf+xml":{source:"iana",compressible:!0,extensions:["rdf","owl"]},"application/reginfo+xml":{source:"iana",compressible:!0,extensions:["rif"]},"application/relax-ng-compact-syntax":{source:"iana",extensions:["rnc"]},"application/remote-printing":{source:"iana"},"application/reputon+json":{source:"iana",compressible:!0},"application/resource-lists+xml":{source:"iana",compressible:!0,extensions:["rl"]},"application/resource-lists-diff+xml":{source:"iana",compressible:!0,extensions:["rld"]},"application/rfc+xml":{source:"iana",compressible:!0},"application/riscos":{source:"iana"},"application/rlmi+xml":{source:"iana",compressible:!0},"application/rls-services+xml":{source:"iana",compressible:!0,extensions:["rs"]},"application/route-apd+xml":{source:"iana",compressible:!0,extensions:["rapd"]},"application/route-s-tsid+xml":{source:"iana",compressible:!0,extensions:["sls"]},"application/route-usd+xml":{source:"iana",compressible:!0,extensions:["rusd"]},"application/rpki-ghostbusters":{source:"iana",extensions:["gbr"]},"application/rpki-manifest":{source:"iana",extensions:["mft"]},"application/rpki-publication":{source:"iana"},"application/rpki-roa":{source:"iana",extensions:["roa"]},"application/rpki-updown":{source:"iana"},"application/rsd+xml":{source:"apache",compressible:!0,extensions:["rsd"]},"application/rss+xml":{source:"apache",compressible:!0,extensions:["rss"]},"application/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"application/rtploopback":{source:"iana"},"application/rtx":{source:"iana"},"application/samlassertion+xml":{source:"iana",compressible:!0},"application/samlmetadata+xml":{source:"iana",compressible:!0},"application/sarif+json":{source:"iana",compressible:!0},"application/sarif-external-properties+json":{source:"iana",compressible:!0},"application/sbe":{source:"iana"},"application/sbml+xml":{source:"iana",compressible:!0,extensions:["sbml"]},"application/scaip+xml":{source:"iana",compressible:!0},"application/scim+json":{source:"iana",compressible:!0},"application/scvp-cv-request":{source:"iana",extensions:["scq"]},"application/scvp-cv-response":{source:"iana",extensions:["scs"]},"application/scvp-vp-request":{source:"iana",extensions:["spq"]},"application/scvp-vp-response":{source:"iana",extensions:["spp"]},"application/sdp":{source:"iana",extensions:["sdp"]},"application/secevent+jwt":{source:"iana"},"application/senml+cbor":{source:"iana"},"application/senml+json":{source:"iana",compressible:!0},"application/senml+xml":{source:"iana",compressible:!0,extensions:["senmlx"]},"application/senml-etch+cbor":{source:"iana"},"application/senml-etch+json":{source:"iana",compressible:!0},"application/senml-exi":{source:"iana"},"application/sensml+cbor":{source:"iana"},"application/sensml+json":{source:"iana",compressible:!0},"application/sensml+xml":{source:"iana",compressible:!0,extensions:["sensmlx"]},"application/sensml-exi":{source:"iana"},"application/sep+xml":{source:"iana",compressible:!0},"application/sep-exi":{source:"iana"},"application/session-info":{source:"iana"},"application/set-payment":{source:"iana"},"application/set-payment-initiation":{source:"iana",extensions:["setpay"]},"application/set-registration":{source:"iana"},"application/set-registration-initiation":{source:"iana",extensions:["setreg"]},"application/sgml":{source:"iana"},"application/sgml-open-catalog":{source:"iana"},"application/shf+xml":{source:"iana",compressible:!0,extensions:["shf"]},"application/sieve":{source:"iana",extensions:["siv","sieve"]},"application/simple-filter+xml":{source:"iana",compressible:!0},"application/simple-message-summary":{source:"iana"},"application/simplesymbolcontainer":{source:"iana"},"application/sipc":{source:"iana"},"application/slate":{source:"iana"},"application/smil":{source:"iana"},"application/smil+xml":{source:"iana",compressible:!0,extensions:["smi","smil"]},"application/smpte336m":{source:"iana"},"application/soap+fastinfoset":{source:"iana"},"application/soap+xml":{source:"iana",compressible:!0},"application/sparql-query":{source:"iana",extensions:["rq"]},"application/sparql-results+xml":{source:"iana",compressible:!0,extensions:["srx"]},"application/spdx+json":{source:"iana",compressible:!0},"application/spirits-event+xml":{source:"iana",compressible:!0},"application/sql":{source:"iana"},"application/srgs":{source:"iana",extensions:["gram"]},"application/srgs+xml":{source:"iana",compressible:!0,extensions:["grxml"]},"application/sru+xml":{source:"iana",compressible:!0,extensions:["sru"]},"application/ssdl+xml":{source:"apache",compressible:!0,extensions:["ssdl"]},"application/ssml+xml":{source:"iana",compressible:!0,extensions:["ssml"]},"application/stix+json":{source:"iana",compressible:!0},"application/swid+xml":{source:"iana",compressible:!0,extensions:["swidtag"]},"application/tamp-apex-update":{source:"iana"},"application/tamp-apex-update-confirm":{source:"iana"},"application/tamp-community-update":{source:"iana"},"application/tamp-community-update-confirm":{source:"iana"},"application/tamp-error":{source:"iana"},"application/tamp-sequence-adjust":{source:"iana"},"application/tamp-sequence-adjust-confirm":{source:"iana"},"application/tamp-status-query":{source:"iana"},"application/tamp-status-response":{source:"iana"},"application/tamp-update":{source:"iana"},"application/tamp-update-confirm":{source:"iana"},"application/tar":{compressible:!0},"application/taxii+json":{source:"iana",compressible:!0},"application/td+json":{source:"iana",compressible:!0},"application/tei+xml":{source:"iana",compressible:!0,extensions:["tei","teicorpus"]},"application/tetra_isi":{source:"iana"},"application/thraud+xml":{source:"iana",compressible:!0,extensions:["tfi"]},"application/timestamp-query":{source:"iana"},"application/timestamp-reply":{source:"iana"},"application/timestamped-data":{source:"iana",extensions:["tsd"]},"application/tlsrpt+gzip":{source:"iana"},"application/tlsrpt+json":{source:"iana",compressible:!0},"application/tnauthlist":{source:"iana"},"application/token-introspection+jwt":{source:"iana"},"application/toml":{compressible:!0,extensions:["toml"]},"application/trickle-ice-sdpfrag":{source:"iana"},"application/trig":{source:"iana",extensions:["trig"]},"application/ttml+xml":{source:"iana",compressible:!0,extensions:["ttml"]},"application/tve-trigger":{source:"iana"},"application/tzif":{source:"iana"},"application/tzif-leap":{source:"iana"},"application/ubjson":{compressible:!1,extensions:["ubj"]},"application/ulpfec":{source:"iana"},"application/urc-grpsheet+xml":{source:"iana",compressible:!0},"application/urc-ressheet+xml":{source:"iana",compressible:!0,extensions:["rsheet"]},"application/urc-targetdesc+xml":{source:"iana",compressible:!0,extensions:["td"]},"application/urc-uisocketdesc+xml":{source:"iana",compressible:!0},"application/vcard+json":{source:"iana",compressible:!0},"application/vcard+xml":{source:"iana",compressible:!0},"application/vemmi":{source:"iana"},"application/vividence.scriptfile":{source:"apache"},"application/vnd.1000minds.decision-model+xml":{source:"iana",compressible:!0,extensions:["1km"]},"application/vnd.3gpp-prose+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-prose-pc3ch+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-v2x-local-service-information":{source:"iana"},"application/vnd.3gpp.5gnas":{source:"iana"},"application/vnd.3gpp.access-transfer-events+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.bsf+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.gmop+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.gtpc":{source:"iana"},"application/vnd.3gpp.interworking-data":{source:"iana"},"application/vnd.3gpp.lpp":{source:"iana"},"application/vnd.3gpp.mc-signalling-ear":{source:"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-payload":{source:"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-signalling":{source:"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-floor-request+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-location-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-signed+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-ue-init-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-location-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-transmission-request+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mid-call+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.ngap":{source:"iana"},"application/vnd.3gpp.pfcp":{source:"iana"},"application/vnd.3gpp.pic-bw-large":{source:"iana",extensions:["plb"]},"application/vnd.3gpp.pic-bw-small":{source:"iana",extensions:["psb"]},"application/vnd.3gpp.pic-bw-var":{source:"iana",extensions:["pvb"]},"application/vnd.3gpp.s1ap":{source:"iana"},"application/vnd.3gpp.sms":{source:"iana"},"application/vnd.3gpp.sms+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-ext+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.state-and-event-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.ussd+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.bcmcsinfo+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.sms":{source:"iana"},"application/vnd.3gpp2.tcap":{source:"iana",extensions:["tcap"]},"application/vnd.3lightssoftware.imagescal":{source:"iana"},"application/vnd.3m.post-it-notes":{source:"iana",extensions:["pwn"]},"application/vnd.accpac.simply.aso":{source:"iana",extensions:["aso"]},"application/vnd.accpac.simply.imp":{source:"iana",extensions:["imp"]},"application/vnd.acucobol":{source:"iana",extensions:["acu"]},"application/vnd.acucorp":{source:"iana",extensions:["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{source:"apache",compressible:!1,extensions:["air"]},"application/vnd.adobe.flash.movie":{source:"iana"},"application/vnd.adobe.formscentral.fcdt":{source:"iana",extensions:["fcdt"]},"application/vnd.adobe.fxp":{source:"iana",extensions:["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{source:"iana"},"application/vnd.adobe.xdp+xml":{source:"iana",compressible:!0,extensions:["xdp"]},"application/vnd.adobe.xfdf":{source:"iana",extensions:["xfdf"]},"application/vnd.aether.imp":{source:"iana"},"application/vnd.afpc.afplinedata":{source:"iana"},"application/vnd.afpc.afplinedata-pagedef":{source:"iana"},"application/vnd.afpc.cmoca-cmresource":{source:"iana"},"application/vnd.afpc.foca-charset":{source:"iana"},"application/vnd.afpc.foca-codedfont":{source:"iana"},"application/vnd.afpc.foca-codepage":{source:"iana"},"application/vnd.afpc.modca":{source:"iana"},"application/vnd.afpc.modca-cmtable":{source:"iana"},"application/vnd.afpc.modca-formdef":{source:"iana"},"application/vnd.afpc.modca-mediummap":{source:"iana"},"application/vnd.afpc.modca-objectcontainer":{source:"iana"},"application/vnd.afpc.modca-overlay":{source:"iana"},"application/vnd.afpc.modca-pagesegment":{source:"iana"},"application/vnd.age":{source:"iana",extensions:["age"]},"application/vnd.ah-barcode":{source:"iana"},"application/vnd.ahead.space":{source:"iana",extensions:["ahead"]},"application/vnd.airzip.filesecure.azf":{source:"iana",extensions:["azf"]},"application/vnd.airzip.filesecure.azs":{source:"iana",extensions:["azs"]},"application/vnd.amadeus+json":{source:"iana",compressible:!0},"application/vnd.amazon.ebook":{source:"apache",extensions:["azw"]},"application/vnd.amazon.mobi8-ebook":{source:"iana"},"application/vnd.americandynamics.acc":{source:"iana",extensions:["acc"]},"application/vnd.amiga.ami":{source:"iana",extensions:["ami"]},"application/vnd.amundsen.maze+xml":{source:"iana",compressible:!0},"application/vnd.android.ota":{source:"iana"},"application/vnd.android.package-archive":{source:"apache",compressible:!1,extensions:["apk"]},"application/vnd.anki":{source:"iana"},"application/vnd.anser-web-certificate-issue-initiation":{source:"iana",extensions:["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{source:"apache",extensions:["fti"]},"application/vnd.antix.game-component":{source:"iana",extensions:["atx"]},"application/vnd.apache.arrow.file":{source:"iana"},"application/vnd.apache.arrow.stream":{source:"iana"},"application/vnd.apache.thrift.binary":{source:"iana"},"application/vnd.apache.thrift.compact":{source:"iana"},"application/vnd.apache.thrift.json":{source:"iana"},"application/vnd.api+json":{source:"iana",compressible:!0},"application/vnd.aplextor.warrp+json":{source:"iana",compressible:!0},"application/vnd.apothekende.reservation+json":{source:"iana",compressible:!0},"application/vnd.apple.installer+xml":{source:"iana",compressible:!0,extensions:["mpkg"]},"application/vnd.apple.keynote":{source:"iana",extensions:["key"]},"application/vnd.apple.mpegurl":{source:"iana",extensions:["m3u8"]},"application/vnd.apple.numbers":{source:"iana",extensions:["numbers"]},"application/vnd.apple.pages":{source:"iana",extensions:["pages"]},"application/vnd.apple.pkpass":{compressible:!1,extensions:["pkpass"]},"application/vnd.arastra.swi":{source:"iana"},"application/vnd.aristanetworks.swi":{source:"iana",extensions:["swi"]},"application/vnd.artisan+json":{source:"iana",compressible:!0},"application/vnd.artsquare":{source:"iana"},"application/vnd.astraea-software.iota":{source:"iana",extensions:["iota"]},"application/vnd.audiograph":{source:"iana",extensions:["aep"]},"application/vnd.autopackage":{source:"iana"},"application/vnd.avalon+json":{source:"iana",compressible:!0},"application/vnd.avistar+xml":{source:"iana",compressible:!0},"application/vnd.balsamiq.bmml+xml":{source:"iana",compressible:!0,extensions:["bmml"]},"application/vnd.balsamiq.bmpr":{source:"iana"},"application/vnd.banana-accounting":{source:"iana"},"application/vnd.bbf.usp.error":{source:"iana"},"application/vnd.bbf.usp.msg":{source:"iana"},"application/vnd.bbf.usp.msg+json":{source:"iana",compressible:!0},"application/vnd.bekitzur-stech+json":{source:"iana",compressible:!0},"application/vnd.bint.med-content":{source:"iana"},"application/vnd.biopax.rdf+xml":{source:"iana",compressible:!0},"application/vnd.blink-idb-value-wrapper":{source:"iana"},"application/vnd.blueice.multipass":{source:"iana",extensions:["mpm"]},"application/vnd.bluetooth.ep.oob":{source:"iana"},"application/vnd.bluetooth.le.oob":{source:"iana"},"application/vnd.bmi":{source:"iana",extensions:["bmi"]},"application/vnd.bpf":{source:"iana"},"application/vnd.bpf3":{source:"iana"},"application/vnd.businessobjects":{source:"iana",extensions:["rep"]},"application/vnd.byu.uapi+json":{source:"iana",compressible:!0},"application/vnd.cab-jscript":{source:"iana"},"application/vnd.canon-cpdl":{source:"iana"},"application/vnd.canon-lips":{source:"iana"},"application/vnd.capasystems-pg+json":{source:"iana",compressible:!0},"application/vnd.cendio.thinlinc.clientconf":{source:"iana"},"application/vnd.century-systems.tcp_stream":{source:"iana"},"application/vnd.chemdraw+xml":{source:"iana",compressible:!0,extensions:["cdxml"]},"application/vnd.chess-pgn":{source:"iana"},"application/vnd.chipnuts.karaoke-mmd":{source:"iana",extensions:["mmd"]},"application/vnd.ciedi":{source:"iana"},"application/vnd.cinderella":{source:"iana",extensions:["cdy"]},"application/vnd.cirpack.isdn-ext":{source:"iana"},"application/vnd.citationstyles.style+xml":{source:"iana",compressible:!0,extensions:["csl"]},"application/vnd.claymore":{source:"iana",extensions:["cla"]},"application/vnd.cloanto.rp9":{source:"iana",extensions:["rp9"]},"application/vnd.clonk.c4group":{source:"iana",extensions:["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{source:"iana",extensions:["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{source:"iana",extensions:["c11amz"]},"application/vnd.coffeescript":{source:"iana"},"application/vnd.collabio.xodocuments.document":{source:"iana"},"application/vnd.collabio.xodocuments.document-template":{source:"iana"},"application/vnd.collabio.xodocuments.presentation":{source:"iana"},"application/vnd.collabio.xodocuments.presentation-template":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{source:"iana"},"application/vnd.collection+json":{source:"iana",compressible:!0},"application/vnd.collection.doc+json":{source:"iana",compressible:!0},"application/vnd.collection.next+json":{source:"iana",compressible:!0},"application/vnd.comicbook+zip":{source:"iana",compressible:!1},"application/vnd.comicbook-rar":{source:"iana"},"application/vnd.commerce-battelle":{source:"iana"},"application/vnd.commonspace":{source:"iana",extensions:["csp"]},"application/vnd.contact.cmsg":{source:"iana",extensions:["cdbcmsg"]},"application/vnd.coreos.ignition+json":{source:"iana",compressible:!0},"application/vnd.cosmocaller":{source:"iana",extensions:["cmc"]},"application/vnd.crick.clicker":{source:"iana",extensions:["clkx"]},"application/vnd.crick.clicker.keyboard":{source:"iana",extensions:["clkk"]},"application/vnd.crick.clicker.palette":{source:"iana",extensions:["clkp"]},"application/vnd.crick.clicker.template":{source:"iana",extensions:["clkt"]},"application/vnd.crick.clicker.wordbank":{source:"iana",extensions:["clkw"]},"application/vnd.criticaltools.wbs+xml":{source:"iana",compressible:!0,extensions:["wbs"]},"application/vnd.cryptii.pipe+json":{source:"iana",compressible:!0},"application/vnd.crypto-shade-file":{source:"iana"},"application/vnd.cryptomator.encrypted":{source:"iana"},"application/vnd.cryptomator.vault":{source:"iana"},"application/vnd.ctc-posml":{source:"iana",extensions:["pml"]},"application/vnd.ctct.ws+xml":{source:"iana",compressible:!0},"application/vnd.cups-pdf":{source:"iana"},"application/vnd.cups-postscript":{source:"iana"},"application/vnd.cups-ppd":{source:"iana",extensions:["ppd"]},"application/vnd.cups-raster":{source:"iana"},"application/vnd.cups-raw":{source:"iana"},"application/vnd.curl":{source:"iana"},"application/vnd.curl.car":{source:"apache",extensions:["car"]},"application/vnd.curl.pcurl":{source:"apache",extensions:["pcurl"]},"application/vnd.cyan.dean.root+xml":{source:"iana",compressible:!0},"application/vnd.cybank":{source:"iana"},"application/vnd.cyclonedx+json":{source:"iana",compressible:!0},"application/vnd.cyclonedx+xml":{source:"iana",compressible:!0},"application/vnd.d2l.coursepackage1p0+zip":{source:"iana",compressible:!1},"application/vnd.d3m-dataset":{source:"iana"},"application/vnd.d3m-problem":{source:"iana"},"application/vnd.dart":{source:"iana",compressible:!0,extensions:["dart"]},"application/vnd.data-vision.rdz":{source:"iana",extensions:["rdz"]},"application/vnd.datapackage+json":{source:"iana",compressible:!0},"application/vnd.dataresource+json":{source:"iana",compressible:!0},"application/vnd.dbf":{source:"iana",extensions:["dbf"]},"application/vnd.debian.binary-package":{source:"iana"},"application/vnd.dece.data":{source:"iana",extensions:["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{source:"iana",compressible:!0,extensions:["uvt","uvvt"]},"application/vnd.dece.unspecified":{source:"iana",extensions:["uvx","uvvx"]},"application/vnd.dece.zip":{source:"iana",extensions:["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{source:"iana",extensions:["fe_launch"]},"application/vnd.desmume.movie":{source:"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{source:"iana"},"application/vnd.dm.delegation+xml":{source:"iana",compressible:!0},"application/vnd.dna":{source:"iana",extensions:["dna"]},"application/vnd.document+json":{source:"iana",compressible:!0},"application/vnd.dolby.mlp":{source:"apache",extensions:["mlp"]},"application/vnd.dolby.mobile.1":{source:"iana"},"application/vnd.dolby.mobile.2":{source:"iana"},"application/vnd.doremir.scorecloud-binary-document":{source:"iana"},"application/vnd.dpgraph":{source:"iana",extensions:["dpg"]},"application/vnd.dreamfactory":{source:"iana",extensions:["dfac"]},"application/vnd.drive+json":{source:"iana",compressible:!0},"application/vnd.ds-keypoint":{source:"apache",extensions:["kpxx"]},"application/vnd.dtg.local":{source:"iana"},"application/vnd.dtg.local.flash":{source:"iana"},"application/vnd.dtg.local.html":{source:"iana"},"application/vnd.dvb.ait":{source:"iana",extensions:["ait"]},"application/vnd.dvb.dvbisl+xml":{source:"iana",compressible:!0},"application/vnd.dvb.dvbj":{source:"iana"},"application/vnd.dvb.esgcontainer":{source:"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess2":{source:"iana"},"application/vnd.dvb.ipdcesgpdd":{source:"iana"},"application/vnd.dvb.ipdcroaming":{source:"iana"},"application/vnd.dvb.iptv.alfec-base":{source:"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{source:"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-container+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-generic+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-msglist+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-request+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-response+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-init+xml":{source:"iana",compressible:!0},"application/vnd.dvb.pfr":{source:"iana"},"application/vnd.dvb.service":{source:"iana",extensions:["svc"]},"application/vnd.dxr":{source:"iana"},"application/vnd.dynageo":{source:"iana",extensions:["geo"]},"application/vnd.dzr":{source:"iana"},"application/vnd.easykaraoke.cdgdownload":{source:"iana"},"application/vnd.ecdis-update":{source:"iana"},"application/vnd.ecip.rlp":{source:"iana"},"application/vnd.eclipse.ditto+json":{source:"iana",compressible:!0},"application/vnd.ecowin.chart":{source:"iana",extensions:["mag"]},"application/vnd.ecowin.filerequest":{source:"iana"},"application/vnd.ecowin.fileupdate":{source:"iana"},"application/vnd.ecowin.series":{source:"iana"},"application/vnd.ecowin.seriesrequest":{source:"iana"},"application/vnd.ecowin.seriesupdate":{source:"iana"},"application/vnd.efi.img":{source:"iana"},"application/vnd.efi.iso":{source:"iana"},"application/vnd.emclient.accessrequest+xml":{source:"iana",compressible:!0},"application/vnd.enliven":{source:"iana",extensions:["nml"]},"application/vnd.enphase.envoy":{source:"iana"},"application/vnd.eprints.data+xml":{source:"iana",compressible:!0},"application/vnd.epson.esf":{source:"iana",extensions:["esf"]},"application/vnd.epson.msf":{source:"iana",extensions:["msf"]},"application/vnd.epson.quickanime":{source:"iana",extensions:["qam"]},"application/vnd.epson.salt":{source:"iana",extensions:["slt"]},"application/vnd.epson.ssf":{source:"iana",extensions:["ssf"]},"application/vnd.ericsson.quickcall":{source:"iana"},"application/vnd.espass-espass+zip":{source:"iana",compressible:!1},"application/vnd.eszigno3+xml":{source:"iana",compressible:!0,extensions:["es3","et3"]},"application/vnd.etsi.aoc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.asic-e+zip":{source:"iana",compressible:!1},"application/vnd.etsi.asic-s+zip":{source:"iana",compressible:!1},"application/vnd.etsi.cug+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvcommand+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-bc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-cod+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-npvr+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvservice+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsync+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvueprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mcid+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mheg5":{source:"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{source:"iana",compressible:!0},"application/vnd.etsi.pstn+xml":{source:"iana",compressible:!0},"application/vnd.etsi.sci+xml":{source:"iana",compressible:!0},"application/vnd.etsi.simservs+xml":{source:"iana",compressible:!0},"application/vnd.etsi.timestamp-token":{source:"iana"},"application/vnd.etsi.tsl+xml":{source:"iana",compressible:!0},"application/vnd.etsi.tsl.der":{source:"iana"},"application/vnd.eu.kasparian.car+json":{source:"iana",compressible:!0},"application/vnd.eudora.data":{source:"iana"},"application/vnd.evolv.ecig.profile":{source:"iana"},"application/vnd.evolv.ecig.settings":{source:"iana"},"application/vnd.evolv.ecig.theme":{source:"iana"},"application/vnd.exstream-empower+zip":{source:"iana",compressible:!1},"application/vnd.exstream-package":{source:"iana"},"application/vnd.ezpix-album":{source:"iana",extensions:["ez2"]},"application/vnd.ezpix-package":{source:"iana",extensions:["ez3"]},"application/vnd.f-secure.mobile":{source:"iana"},"application/vnd.familysearch.gedcom+zip":{source:"iana",compressible:!1},"application/vnd.fastcopy-disk-image":{source:"iana"},"application/vnd.fdf":{source:"iana",extensions:["fdf"]},"application/vnd.fdsn.mseed":{source:"iana",extensions:["mseed"]},"application/vnd.fdsn.seed":{source:"iana",extensions:["seed","dataless"]},"application/vnd.ffsns":{source:"iana"},"application/vnd.ficlab.flb+zip":{source:"iana",compressible:!1},"application/vnd.filmit.zfc":{source:"iana"},"application/vnd.fints":{source:"iana"},"application/vnd.firemonkeys.cloudcell":{source:"iana"},"application/vnd.flographit":{source:"iana",extensions:["gph"]},"application/vnd.fluxtime.clip":{source:"iana",extensions:["ftc"]},"application/vnd.font-fontforge-sfd":{source:"iana"},"application/vnd.framemaker":{source:"iana",extensions:["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{source:"iana",extensions:["fnc"]},"application/vnd.frogans.ltf":{source:"iana",extensions:["ltf"]},"application/vnd.fsc.weblaunch":{source:"iana",extensions:["fsc"]},"application/vnd.fujifilm.fb.docuworks":{source:"iana"},"application/vnd.fujifilm.fb.docuworks.binder":{source:"iana"},"application/vnd.fujifilm.fb.docuworks.container":{source:"iana"},"application/vnd.fujifilm.fb.jfi+xml":{source:"iana",compressible:!0},"application/vnd.fujitsu.oasys":{source:"iana",extensions:["oas"]},"application/vnd.fujitsu.oasys2":{source:"iana",extensions:["oa2"]},"application/vnd.fujitsu.oasys3":{source:"iana",extensions:["oa3"]},"application/vnd.fujitsu.oasysgp":{source:"iana",extensions:["fg5"]},"application/vnd.fujitsu.oasysprs":{source:"iana",extensions:["bh2"]},"application/vnd.fujixerox.art-ex":{source:"iana"},"application/vnd.fujixerox.art4":{source:"iana"},"application/vnd.fujixerox.ddd":{source:"iana",extensions:["ddd"]},"application/vnd.fujixerox.docuworks":{source:"iana",extensions:["xdw"]},"application/vnd.fujixerox.docuworks.binder":{source:"iana",extensions:["xbd"]},"application/vnd.fujixerox.docuworks.container":{source:"iana"},"application/vnd.fujixerox.hbpl":{source:"iana"},"application/vnd.fut-misnet":{source:"iana"},"application/vnd.futoin+cbor":{source:"iana"},"application/vnd.futoin+json":{source:"iana",compressible:!0},"application/vnd.fuzzysheet":{source:"iana",extensions:["fzs"]},"application/vnd.genomatix.tuxedo":{source:"iana",extensions:["txd"]},"application/vnd.gentics.grd+json":{source:"iana",compressible:!0},"application/vnd.geo+json":{source:"iana",compressible:!0},"application/vnd.geocube+xml":{source:"iana",compressible:!0},"application/vnd.geogebra.file":{source:"iana",extensions:["ggb"]},"application/vnd.geogebra.slides":{source:"iana"},"application/vnd.geogebra.tool":{source:"iana",extensions:["ggt"]},"application/vnd.geometry-explorer":{source:"iana",extensions:["gex","gre"]},"application/vnd.geonext":{source:"iana",extensions:["gxt"]},"application/vnd.geoplan":{source:"iana",extensions:["g2w"]},"application/vnd.geospace":{source:"iana",extensions:["g3w"]},"application/vnd.gerber":{source:"iana"},"application/vnd.globalplatform.card-content-mgt":{source:"iana"},"application/vnd.globalplatform.card-content-mgt-response":{source:"iana"},"application/vnd.gmx":{source:"iana",extensions:["gmx"]},"application/vnd.google-apps.document":{compressible:!1,extensions:["gdoc"]},"application/vnd.google-apps.presentation":{compressible:!1,extensions:["gslides"]},"application/vnd.google-apps.spreadsheet":{compressible:!1,extensions:["gsheet"]},"application/vnd.google-earth.kml+xml":{source:"iana",compressible:!0,extensions:["kml"]},"application/vnd.google-earth.kmz":{source:"iana",compressible:!1,extensions:["kmz"]},"application/vnd.gov.sk.e-form+xml":{source:"iana",compressible:!0},"application/vnd.gov.sk.e-form+zip":{source:"iana",compressible:!1},"application/vnd.gov.sk.xmldatacontainer+xml":{source:"iana",compressible:!0},"application/vnd.grafeq":{source:"iana",extensions:["gqf","gqs"]},"application/vnd.gridmp":{source:"iana"},"application/vnd.groove-account":{source:"iana",extensions:["gac"]},"application/vnd.groove-help":{source:"iana",extensions:["ghf"]},"application/vnd.groove-identity-message":{source:"iana",extensions:["gim"]},"application/vnd.groove-injector":{source:"iana",extensions:["grv"]},"application/vnd.groove-tool-message":{source:"iana",extensions:["gtm"]},"application/vnd.groove-tool-template":{source:"iana",extensions:["tpl"]},"application/vnd.groove-vcard":{source:"iana",extensions:["vcg"]},"application/vnd.hal+json":{source:"iana",compressible:!0},"application/vnd.hal+xml":{source:"iana",compressible:!0,extensions:["hal"]},"application/vnd.handheld-entertainment+xml":{source:"iana",compressible:!0,extensions:["zmm"]},"application/vnd.hbci":{source:"iana",extensions:["hbci"]},"application/vnd.hc+json":{source:"iana",compressible:!0},"application/vnd.hcl-bireports":{source:"iana"},"application/vnd.hdt":{source:"iana"},"application/vnd.heroku+json":{source:"iana",compressible:!0},"application/vnd.hhe.lesson-player":{source:"iana",extensions:["les"]},"application/vnd.hl7cda+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.hl7v2+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.hp-hpgl":{source:"iana",extensions:["hpgl"]},"application/vnd.hp-hpid":{source:"iana",extensions:["hpid"]},"application/vnd.hp-hps":{source:"iana",extensions:["hps"]},"application/vnd.hp-jlyt":{source:"iana",extensions:["jlt"]},"application/vnd.hp-pcl":{source:"iana",extensions:["pcl"]},"application/vnd.hp-pclxl":{source:"iana",extensions:["pclxl"]},"application/vnd.httphone":{source:"iana"},"application/vnd.hydrostatix.sof-data":{source:"iana",extensions:["sfd-hdstx"]},"application/vnd.hyper+json":{source:"iana",compressible:!0},"application/vnd.hyper-item+json":{source:"iana",compressible:!0},"application/vnd.hyperdrive+json":{source:"iana",compressible:!0},"application/vnd.hzn-3d-crossword":{source:"iana"},"application/vnd.ibm.afplinedata":{source:"iana"},"application/vnd.ibm.electronic-media":{source:"iana"},"application/vnd.ibm.minipay":{source:"iana",extensions:["mpy"]},"application/vnd.ibm.modcap":{source:"iana",extensions:["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{source:"iana",extensions:["irm"]},"application/vnd.ibm.secure-container":{source:"iana",extensions:["sc"]},"application/vnd.iccprofile":{source:"iana",extensions:["icc","icm"]},"application/vnd.ieee.1905":{source:"iana"},"application/vnd.igloader":{source:"iana",extensions:["igl"]},"application/vnd.imagemeter.folder+zip":{source:"iana",compressible:!1},"application/vnd.imagemeter.image+zip":{source:"iana",compressible:!1},"application/vnd.immervision-ivp":{source:"iana",extensions:["ivp"]},"application/vnd.immervision-ivu":{source:"iana",extensions:["ivu"]},"application/vnd.ims.imsccv1p1":{source:"iana"},"application/vnd.ims.imsccv1p2":{source:"iana"},"application/vnd.ims.imsccv1p3":{source:"iana"},"application/vnd.ims.lis.v2.result+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy.id+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings.simple+json":{source:"iana",compressible:!0},"application/vnd.informedcontrol.rms+xml":{source:"iana",compressible:!0},"application/vnd.informix-visionary":{source:"iana"},"application/vnd.infotech.project":{source:"iana"},"application/vnd.infotech.project+xml":{source:"iana",compressible:!0},"application/vnd.innopath.wamp.notification":{source:"iana"},"application/vnd.insors.igm":{source:"iana",extensions:["igm"]},"application/vnd.intercon.formnet":{source:"iana",extensions:["xpw","xpx"]},"application/vnd.intergeo":{source:"iana",extensions:["i2g"]},"application/vnd.intertrust.digibox":{source:"iana"},"application/vnd.intertrust.nncp":{source:"iana"},"application/vnd.intu.qbo":{source:"iana",extensions:["qbo"]},"application/vnd.intu.qfx":{source:"iana",extensions:["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.conceptitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.knowledgeitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsmessage+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.packageitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.planningitem+xml":{source:"iana",compressible:!0},"application/vnd.ipunplugged.rcprofile":{source:"iana",extensions:["rcprofile"]},"application/vnd.irepository.package+xml":{source:"iana",compressible:!0,extensions:["irp"]},"application/vnd.is-xpr":{source:"iana",extensions:["xpr"]},"application/vnd.isac.fcs":{source:"iana",extensions:["fcs"]},"application/vnd.iso11783-10+zip":{source:"iana",compressible:!1},"application/vnd.jam":{source:"iana",extensions:["jam"]},"application/vnd.japannet-directory-service":{source:"iana"},"application/vnd.japannet-jpnstore-wakeup":{source:"iana"},"application/vnd.japannet-payment-wakeup":{source:"iana"},"application/vnd.japannet-registration":{source:"iana"},"application/vnd.japannet-registration-wakeup":{source:"iana"},"application/vnd.japannet-setstore-wakeup":{source:"iana"},"application/vnd.japannet-verification":{source:"iana"},"application/vnd.japannet-verification-wakeup":{source:"iana"},"application/vnd.jcp.javame.midlet-rms":{source:"iana",extensions:["rms"]},"application/vnd.jisp":{source:"iana",extensions:["jisp"]},"application/vnd.joost.joda-archive":{source:"iana",extensions:["joda"]},"application/vnd.jsk.isdn-ngn":{source:"iana"},"application/vnd.kahootz":{source:"iana",extensions:["ktz","ktr"]},"application/vnd.kde.karbon":{source:"iana",extensions:["karbon"]},"application/vnd.kde.kchart":{source:"iana",extensions:["chrt"]},"application/vnd.kde.kformula":{source:"iana",extensions:["kfo"]},"application/vnd.kde.kivio":{source:"iana",extensions:["flw"]},"application/vnd.kde.kontour":{source:"iana",extensions:["kon"]},"application/vnd.kde.kpresenter":{source:"iana",extensions:["kpr","kpt"]},"application/vnd.kde.kspread":{source:"iana",extensions:["ksp"]},"application/vnd.kde.kword":{source:"iana",extensions:["kwd","kwt"]},"application/vnd.kenameaapp":{source:"iana",extensions:["htke"]},"application/vnd.kidspiration":{source:"iana",extensions:["kia"]},"application/vnd.kinar":{source:"iana",extensions:["kne","knp"]},"application/vnd.koan":{source:"iana",extensions:["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{source:"iana",extensions:["sse"]},"application/vnd.las":{source:"iana"},"application/vnd.las.las+json":{source:"iana",compressible:!0},"application/vnd.las.las+xml":{source:"iana",compressible:!0,extensions:["lasxml"]},"application/vnd.laszip":{source:"iana"},"application/vnd.leap+json":{source:"iana",compressible:!0},"application/vnd.liberty-request+xml":{source:"iana",compressible:!0},"application/vnd.llamagraphics.life-balance.desktop":{source:"iana",extensions:["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{source:"iana",compressible:!0,extensions:["lbe"]},"application/vnd.logipipe.circuit+zip":{source:"iana",compressible:!1},"application/vnd.loom":{source:"iana"},"application/vnd.lotus-1-2-3":{source:"iana",extensions:["123"]},"application/vnd.lotus-approach":{source:"iana",extensions:["apr"]},"application/vnd.lotus-freelance":{source:"iana",extensions:["pre"]},"application/vnd.lotus-notes":{source:"iana",extensions:["nsf"]},"application/vnd.lotus-organizer":{source:"iana",extensions:["org"]},"application/vnd.lotus-screencam":{source:"iana",extensions:["scm"]},"application/vnd.lotus-wordpro":{source:"iana",extensions:["lwp"]},"application/vnd.macports.portpkg":{source:"iana",extensions:["portpkg"]},"application/vnd.mapbox-vector-tile":{source:"iana",extensions:["mvt"]},"application/vnd.marlin.drm.actiontoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.conftoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.license+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.mdcf":{source:"iana"},"application/vnd.mason+json":{source:"iana",compressible:!0},"application/vnd.maxar.archive.3tz+zip":{source:"iana",compressible:!1},"application/vnd.maxmind.maxmind-db":{source:"iana"},"application/vnd.mcd":{source:"iana",extensions:["mcd"]},"application/vnd.medcalcdata":{source:"iana",extensions:["mc1"]},"application/vnd.mediastation.cdkey":{source:"iana",extensions:["cdkey"]},"application/vnd.meridian-slingshot":{source:"iana"},"application/vnd.mfer":{source:"iana",extensions:["mwf"]},"application/vnd.mfmp":{source:"iana",extensions:["mfm"]},"application/vnd.micro+json":{source:"iana",compressible:!0},"application/vnd.micrografx.flo":{source:"iana",extensions:["flo"]},"application/vnd.micrografx.igx":{source:"iana",extensions:["igx"]},"application/vnd.microsoft.portable-executable":{source:"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{source:"iana"},"application/vnd.miele+json":{source:"iana",compressible:!0},"application/vnd.mif":{source:"iana",extensions:["mif"]},"application/vnd.minisoft-hp3000-save":{source:"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{source:"iana"},"application/vnd.mobius.daf":{source:"iana",extensions:["daf"]},"application/vnd.mobius.dis":{source:"iana",extensions:["dis"]},"application/vnd.mobius.mbk":{source:"iana",extensions:["mbk"]},"application/vnd.mobius.mqy":{source:"iana",extensions:["mqy"]},"application/vnd.mobius.msl":{source:"iana",extensions:["msl"]},"application/vnd.mobius.plc":{source:"iana",extensions:["plc"]},"application/vnd.mobius.txf":{source:"iana",extensions:["txf"]},"application/vnd.mophun.application":{source:"iana",extensions:["mpn"]},"application/vnd.mophun.certificate":{source:"iana",extensions:["mpc"]},"application/vnd.motorola.flexsuite":{source:"iana"},"application/vnd.motorola.flexsuite.adsi":{source:"iana"},"application/vnd.motorola.flexsuite.fis":{source:"iana"},"application/vnd.motorola.flexsuite.gotap":{source:"iana"},"application/vnd.motorola.flexsuite.kmr":{source:"iana"},"application/vnd.motorola.flexsuite.ttc":{source:"iana"},"application/vnd.motorola.flexsuite.wem":{source:"iana"},"application/vnd.motorola.iprm":{source:"iana"},"application/vnd.mozilla.xul+xml":{source:"iana",compressible:!0,extensions:["xul"]},"application/vnd.ms-3mfdocument":{source:"iana"},"application/vnd.ms-artgalry":{source:"iana",extensions:["cil"]},"application/vnd.ms-asf":{source:"iana"},"application/vnd.ms-cab-compressed":{source:"iana",extensions:["cab"]},"application/vnd.ms-color.iccprofile":{source:"apache"},"application/vnd.ms-excel":{source:"iana",compressible:!1,extensions:["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{source:"iana",extensions:["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{source:"iana",extensions:["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{source:"iana",extensions:["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{source:"iana",extensions:["xltm"]},"application/vnd.ms-fontobject":{source:"iana",compressible:!0,extensions:["eot"]},"application/vnd.ms-htmlhelp":{source:"iana",extensions:["chm"]},"application/vnd.ms-ims":{source:"iana",extensions:["ims"]},"application/vnd.ms-lrm":{source:"iana",extensions:["lrm"]},"application/vnd.ms-office.activex+xml":{source:"iana",compressible:!0},"application/vnd.ms-officetheme":{source:"iana",extensions:["thmx"]},"application/vnd.ms-opentype":{source:"apache",compressible:!0},"application/vnd.ms-outlook":{compressible:!1,extensions:["msg"]},"application/vnd.ms-package.obfuscated-opentype":{source:"apache"},"application/vnd.ms-pki.seccat":{source:"apache",extensions:["cat"]},"application/vnd.ms-pki.stl":{source:"apache",extensions:["stl"]},"application/vnd.ms-playready.initiator+xml":{source:"iana",compressible:!0},"application/vnd.ms-powerpoint":{source:"iana",compressible:!1,extensions:["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{source:"iana",extensions:["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{source:"iana",extensions:["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{source:"iana",extensions:["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{source:"iana",extensions:["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{source:"iana",extensions:["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{source:"iana",compressible:!0},"application/vnd.ms-printing.printticket+xml":{source:"apache",compressible:!0},"application/vnd.ms-printschematicket+xml":{source:"iana",compressible:!0},"application/vnd.ms-project":{source:"iana",extensions:["mpp","mpt"]},"application/vnd.ms-tnef":{source:"iana"},"application/vnd.ms-windows.devicepairing":{source:"iana"},"application/vnd.ms-windows.nwprinting.oob":{source:"iana"},"application/vnd.ms-windows.printerpairing":{source:"iana"},"application/vnd.ms-windows.wsd.oob":{source:"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.lic-resp":{source:"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.meter-resp":{source:"iana"},"application/vnd.ms-word.document.macroenabled.12":{source:"iana",extensions:["docm"]},"application/vnd.ms-word.template.macroenabled.12":{source:"iana",extensions:["dotm"]},"application/vnd.ms-works":{source:"iana",extensions:["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{source:"iana",extensions:["wpl"]},"application/vnd.ms-xpsdocument":{source:"iana",compressible:!1,extensions:["xps"]},"application/vnd.msa-disk-image":{source:"iana"},"application/vnd.mseq":{source:"iana",extensions:["mseq"]},"application/vnd.msign":{source:"iana"},"application/vnd.multiad.creator":{source:"iana"},"application/vnd.multiad.creator.cif":{source:"iana"},"application/vnd.music-niff":{source:"iana"},"application/vnd.musician":{source:"iana",extensions:["mus"]},"application/vnd.muvee.style":{source:"iana",extensions:["msty"]},"application/vnd.mynfc":{source:"iana",extensions:["taglet"]},"application/vnd.nacamar.ybrid+json":{source:"iana",compressible:!0},"application/vnd.ncd.control":{source:"iana"},"application/vnd.ncd.reference":{source:"iana"},"application/vnd.nearst.inv+json":{source:"iana",compressible:!0},"application/vnd.nebumind.line":{source:"iana"},"application/vnd.nervana":{source:"iana"},"application/vnd.netfpx":{source:"iana"},"application/vnd.neurolanguage.nlu":{source:"iana",extensions:["nlu"]},"application/vnd.nimn":{source:"iana"},"application/vnd.nintendo.nitro.rom":{source:"iana"},"application/vnd.nintendo.snes.rom":{source:"iana"},"application/vnd.nitf":{source:"iana",extensions:["ntf","nitf"]},"application/vnd.noblenet-directory":{source:"iana",extensions:["nnd"]},"application/vnd.noblenet-sealer":{source:"iana",extensions:["nns"]},"application/vnd.noblenet-web":{source:"iana",extensions:["nnw"]},"application/vnd.nokia.catalogs":{source:"iana"},"application/vnd.nokia.conml+wbxml":{source:"iana"},"application/vnd.nokia.conml+xml":{source:"iana",compressible:!0},"application/vnd.nokia.iptv.config+xml":{source:"iana",compressible:!0},"application/vnd.nokia.isds-radio-presets":{source:"iana"},"application/vnd.nokia.landmark+wbxml":{source:"iana"},"application/vnd.nokia.landmark+xml":{source:"iana",compressible:!0},"application/vnd.nokia.landmarkcollection+xml":{source:"iana",compressible:!0},"application/vnd.nokia.n-gage.ac+xml":{source:"iana",compressible:!0,extensions:["ac"]},"application/vnd.nokia.n-gage.data":{source:"iana",extensions:["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{source:"iana",extensions:["n-gage"]},"application/vnd.nokia.ncd":{source:"iana"},"application/vnd.nokia.pcd+wbxml":{source:"iana"},"application/vnd.nokia.pcd+xml":{source:"iana",compressible:!0},"application/vnd.nokia.radio-preset":{source:"iana",extensions:["rpst"]},"application/vnd.nokia.radio-presets":{source:"iana",extensions:["rpss"]},"application/vnd.novadigm.edm":{source:"iana",extensions:["edm"]},"application/vnd.novadigm.edx":{source:"iana",extensions:["edx"]},"application/vnd.novadigm.ext":{source:"iana",extensions:["ext"]},"application/vnd.ntt-local.content-share":{source:"iana"},"application/vnd.ntt-local.file-transfer":{source:"iana"},"application/vnd.ntt-local.ogw_remote-access":{source:"iana"},"application/vnd.ntt-local.sip-ta_remote":{source:"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{source:"iana"},"application/vnd.oasis.opendocument.chart":{source:"iana",extensions:["odc"]},"application/vnd.oasis.opendocument.chart-template":{source:"iana",extensions:["otc"]},"application/vnd.oasis.opendocument.database":{source:"iana",extensions:["odb"]},"application/vnd.oasis.opendocument.formula":{source:"iana",extensions:["odf"]},"application/vnd.oasis.opendocument.formula-template":{source:"iana",extensions:["odft"]},"application/vnd.oasis.opendocument.graphics":{source:"iana",compressible:!1,extensions:["odg"]},"application/vnd.oasis.opendocument.graphics-template":{source:"iana",extensions:["otg"]},"application/vnd.oasis.opendocument.image":{source:"iana",extensions:["odi"]},"application/vnd.oasis.opendocument.image-template":{source:"iana",extensions:["oti"]},"application/vnd.oasis.opendocument.presentation":{source:"iana",compressible:!1,extensions:["odp"]},"application/vnd.oasis.opendocument.presentation-template":{source:"iana",extensions:["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{source:"iana",compressible:!1,extensions:["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{source:"iana",extensions:["ots"]},"application/vnd.oasis.opendocument.text":{source:"iana",compressible:!1,extensions:["odt"]},"application/vnd.oasis.opendocument.text-master":{source:"iana",extensions:["odm"]},"application/vnd.oasis.opendocument.text-template":{source:"iana",extensions:["ott"]},"application/vnd.oasis.opendocument.text-web":{source:"iana",extensions:["oth"]},"application/vnd.obn":{source:"iana"},"application/vnd.ocf+cbor":{source:"iana"},"application/vnd.oci.image.manifest.v1+json":{source:"iana",compressible:!0},"application/vnd.oftn.l10n+json":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessdownload+xml":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessstreaming+xml":{source:"iana",compressible:!0},"application/vnd.oipf.cspg-hexbinary":{source:"iana"},"application/vnd.oipf.dae.svg+xml":{source:"iana",compressible:!0},"application/vnd.oipf.dae.xhtml+xml":{source:"iana",compressible:!0},"application/vnd.oipf.mippvcontrolmessage+xml":{source:"iana",compressible:!0},"application/vnd.oipf.pae.gem":{source:"iana"},"application/vnd.oipf.spdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.oipf.spdlist+xml":{source:"iana",compressible:!0},"application/vnd.oipf.ueprofile+xml":{source:"iana",compressible:!0},"application/vnd.oipf.userprofile+xml":{source:"iana",compressible:!0},"application/vnd.olpc-sugar":{source:"iana",extensions:["xo"]},"application/vnd.oma-scws-config":{source:"iana"},"application/vnd.oma-scws-http-request":{source:"iana"},"application/vnd.oma-scws-http-response":{source:"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.drm-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.imd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.ltkm":{source:"iana"},"application/vnd.oma.bcast.notification+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.provisioningtrigger":{source:"iana"},"application/vnd.oma.bcast.sgboot":{source:"iana"},"application/vnd.oma.bcast.sgdd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sgdu":{source:"iana"},"application/vnd.oma.bcast.simple-symbol-container":{source:"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sprov+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.stkm":{source:"iana"},"application/vnd.oma.cab-address-book+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-feature-handler+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-pcc+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-subs-invite+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-user-prefs+xml":{source:"iana",compressible:!0},"application/vnd.oma.dcd":{source:"iana"},"application/vnd.oma.dcdc":{source:"iana"},"application/vnd.oma.dd2+xml":{source:"iana",compressible:!0,extensions:["dd2"]},"application/vnd.oma.drm.risd+xml":{source:"iana",compressible:!0},"application/vnd.oma.group-usage-list+xml":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+cbor":{source:"iana"},"application/vnd.oma.lwm2m+json":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+tlv":{source:"iana"},"application/vnd.oma.pal+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.detailed-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.final-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.groups+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.invocation-descriptor+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.optimized-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.push":{source:"iana"},"application/vnd.oma.scidm.messages+xml":{source:"iana",compressible:!0},"application/vnd.oma.xcap-directory+xml":{source:"iana",compressible:!0},"application/vnd.omads-email+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omads-file+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omads-folder+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omaloc-supl-init":{source:"iana"},"application/vnd.onepager":{source:"iana"},"application/vnd.onepagertamp":{source:"iana"},"application/vnd.onepagertamx":{source:"iana"},"application/vnd.onepagertat":{source:"iana"},"application/vnd.onepagertatp":{source:"iana"},"application/vnd.onepagertatx":{source:"iana"},"application/vnd.openblox.game+xml":{source:"iana",compressible:!0,extensions:["obgx"]},"application/vnd.openblox.game-binary":{source:"iana"},"application/vnd.openeye.oeb":{source:"iana"},"application/vnd.openofficeorg.extension":{source:"apache",extensions:["oxt"]},"application/vnd.openstreetmap.data+xml":{source:"iana",compressible:!0,extensions:["osm"]},"application/vnd.opentimestamps.ots":{source:"iana"},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawing+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{source:"iana",compressible:!1,extensions:["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slide":{source:"iana",extensions:["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{source:"iana",extensions:["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.template":{source:"iana",extensions:["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{source:"iana",compressible:!1,extensions:["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{source:"iana",extensions:["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.theme+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.vmldrawing":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{source:"iana",compressible:!1,extensions:["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{source:"iana",extensions:["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.core-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.relationships+xml":{source:"iana",compressible:!0},"application/vnd.oracle.resource+json":{source:"iana",compressible:!0},"application/vnd.orange.indata":{source:"iana"},"application/vnd.osa.netdeploy":{source:"iana"},"application/vnd.osgeo.mapguide.package":{source:"iana",extensions:["mgp"]},"application/vnd.osgi.bundle":{source:"iana"},"application/vnd.osgi.dp":{source:"iana",extensions:["dp"]},"application/vnd.osgi.subsystem":{source:"iana",extensions:["esa"]},"application/vnd.otps.ct-kip+xml":{source:"iana",compressible:!0},"application/vnd.oxli.countgraph":{source:"iana"},"application/vnd.pagerduty+json":{source:"iana",compressible:!0},"application/vnd.palm":{source:"iana",extensions:["pdb","pqa","oprc"]},"application/vnd.panoply":{source:"iana"},"application/vnd.paos.xml":{source:"iana"},"application/vnd.patentdive":{source:"iana"},"application/vnd.patientecommsdoc":{source:"iana"},"application/vnd.pawaafile":{source:"iana",extensions:["paw"]},"application/vnd.pcos":{source:"iana"},"application/vnd.pg.format":{source:"iana",extensions:["str"]},"application/vnd.pg.osasli":{source:"iana",extensions:["ei6"]},"application/vnd.piaccess.application-licence":{source:"iana"},"application/vnd.picsel":{source:"iana",extensions:["efif"]},"application/vnd.pmi.widget":{source:"iana",extensions:["wg"]},"application/vnd.poc.group-advertisement+xml":{source:"iana",compressible:!0},"application/vnd.pocketlearn":{source:"iana",extensions:["plf"]},"application/vnd.powerbuilder6":{source:"iana",extensions:["pbd"]},"application/vnd.powerbuilder6-s":{source:"iana"},"application/vnd.powerbuilder7":{source:"iana"},"application/vnd.powerbuilder7-s":{source:"iana"},"application/vnd.powerbuilder75":{source:"iana"},"application/vnd.powerbuilder75-s":{source:"iana"},"application/vnd.preminet":{source:"iana"},"application/vnd.previewsystems.box":{source:"iana",extensions:["box"]},"application/vnd.proteus.magazine":{source:"iana",extensions:["mgz"]},"application/vnd.psfs":{source:"iana"},"application/vnd.publishare-delta-tree":{source:"iana",extensions:["qps"]},"application/vnd.pvi.ptid1":{source:"iana",extensions:["ptid"]},"application/vnd.pwg-multiplexed":{source:"iana"},"application/vnd.pwg-xhtml-print+xml":{source:"iana",compressible:!0},"application/vnd.qualcomm.brew-app-res":{source:"iana"},"application/vnd.quarantainenet":{source:"iana"},"application/vnd.quark.quarkxpress":{source:"iana",extensions:["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{source:"iana"},"application/vnd.radisys.moml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conn+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-stream+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-base+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-detect+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-group+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-speech+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-transform+xml":{source:"iana",compressible:!0},"application/vnd.rainstor.data":{source:"iana"},"application/vnd.rapid":{source:"iana"},"application/vnd.rar":{source:"iana",extensions:["rar"]},"application/vnd.realvnc.bed":{source:"iana",extensions:["bed"]},"application/vnd.recordare.musicxml":{source:"iana",extensions:["mxl"]},"application/vnd.recordare.musicxml+xml":{source:"iana",compressible:!0,extensions:["musicxml"]},"application/vnd.renlearn.rlprint":{source:"iana"},"application/vnd.resilient.logic":{source:"iana"},"application/vnd.restful+json":{source:"iana",compressible:!0},"application/vnd.rig.cryptonote":{source:"iana",extensions:["cryptonote"]},"application/vnd.rim.cod":{source:"apache",extensions:["cod"]},"application/vnd.rn-realmedia":{source:"apache",extensions:["rm"]},"application/vnd.rn-realmedia-vbr":{source:"apache",extensions:["rmvb"]},"application/vnd.route66.link66+xml":{source:"iana",compressible:!0,extensions:["link66"]},"application/vnd.rs-274x":{source:"iana"},"application/vnd.ruckus.download":{source:"iana"},"application/vnd.s3sms":{source:"iana"},"application/vnd.sailingtracker.track":{source:"iana",extensions:["st"]},"application/vnd.sar":{source:"iana"},"application/vnd.sbm.cid":{source:"iana"},"application/vnd.sbm.mid2":{source:"iana"},"application/vnd.scribus":{source:"iana"},"application/vnd.sealed.3df":{source:"iana"},"application/vnd.sealed.csf":{source:"iana"},"application/vnd.sealed.doc":{source:"iana"},"application/vnd.sealed.eml":{source:"iana"},"application/vnd.sealed.mht":{source:"iana"},"application/vnd.sealed.net":{source:"iana"},"application/vnd.sealed.ppt":{source:"iana"},"application/vnd.sealed.tiff":{source:"iana"},"application/vnd.sealed.xls":{source:"iana"},"application/vnd.sealedmedia.softseal.html":{source:"iana"},"application/vnd.sealedmedia.softseal.pdf":{source:"iana"},"application/vnd.seemail":{source:"iana",extensions:["see"]},"application/vnd.seis+json":{source:"iana",compressible:!0},"application/vnd.sema":{source:"iana",extensions:["sema"]},"application/vnd.semd":{source:"iana",extensions:["semd"]},"application/vnd.semf":{source:"iana",extensions:["semf"]},"application/vnd.shade-save-file":{source:"iana"},"application/vnd.shana.informed.formdata":{source:"iana",extensions:["ifm"]},"application/vnd.shana.informed.formtemplate":{source:"iana",extensions:["itp"]},"application/vnd.shana.informed.interchange":{source:"iana",extensions:["iif"]},"application/vnd.shana.informed.package":{source:"iana",extensions:["ipk"]},"application/vnd.shootproof+json":{source:"iana",compressible:!0},"application/vnd.shopkick+json":{source:"iana",compressible:!0},"application/vnd.shp":{source:"iana"},"application/vnd.shx":{source:"iana"},"application/vnd.sigrok.session":{source:"iana"},"application/vnd.simtech-mindmapper":{source:"iana",extensions:["twd","twds"]},"application/vnd.siren+json":{source:"iana",compressible:!0},"application/vnd.smaf":{source:"iana",extensions:["mmf"]},"application/vnd.smart.notebook":{source:"iana"},"application/vnd.smart.teacher":{source:"iana",extensions:["teacher"]},"application/vnd.snesdev-page-table":{source:"iana"},"application/vnd.software602.filler.form+xml":{source:"iana",compressible:!0,extensions:["fo"]},"application/vnd.software602.filler.form-xml-zip":{source:"iana"},"application/vnd.solent.sdkm+xml":{source:"iana",compressible:!0,extensions:["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{source:"iana",extensions:["dxp"]},"application/vnd.spotfire.sfs":{source:"iana",extensions:["sfs"]},"application/vnd.sqlite3":{source:"iana"},"application/vnd.sss-cod":{source:"iana"},"application/vnd.sss-dtf":{source:"iana"},"application/vnd.sss-ntf":{source:"iana"},"application/vnd.stardivision.calc":{source:"apache",extensions:["sdc"]},"application/vnd.stardivision.draw":{source:"apache",extensions:["sda"]},"application/vnd.stardivision.impress":{source:"apache",extensions:["sdd"]},"application/vnd.stardivision.math":{source:"apache",extensions:["smf"]},"application/vnd.stardivision.writer":{source:"apache",extensions:["sdw","vor"]},"application/vnd.stardivision.writer-global":{source:"apache",extensions:["sgl"]},"application/vnd.stepmania.package":{source:"iana",extensions:["smzip"]},"application/vnd.stepmania.stepchart":{source:"iana",extensions:["sm"]},"application/vnd.street-stream":{source:"iana"},"application/vnd.sun.wadl+xml":{source:"iana",compressible:!0,extensions:["wadl"]},"application/vnd.sun.xml.calc":{source:"apache",extensions:["sxc"]},"application/vnd.sun.xml.calc.template":{source:"apache",extensions:["stc"]},"application/vnd.sun.xml.draw":{source:"apache",extensions:["sxd"]},"application/vnd.sun.xml.draw.template":{source:"apache",extensions:["std"]},"application/vnd.sun.xml.impress":{source:"apache",extensions:["sxi"]},"application/vnd.sun.xml.impress.template":{source:"apache",extensions:["sti"]},"application/vnd.sun.xml.math":{source:"apache",extensions:["sxm"]},"application/vnd.sun.xml.writer":{source:"apache",extensions:["sxw"]},"application/vnd.sun.xml.writer.global":{source:"apache",extensions:["sxg"]},"application/vnd.sun.xml.writer.template":{source:"apache",extensions:["stw"]},"application/vnd.sus-calendar":{source:"iana",extensions:["sus","susp"]},"application/vnd.svd":{source:"iana",extensions:["svd"]},"application/vnd.swiftview-ics":{source:"iana"},"application/vnd.sycle+xml":{source:"iana",compressible:!0},"application/vnd.syft+json":{source:"iana",compressible:!0},"application/vnd.symbian.install":{source:"apache",extensions:["sis","sisx"]},"application/vnd.syncml+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["xsm"]},"application/vnd.syncml.dm+wbxml":{source:"iana",charset:"UTF-8",extensions:["bdm"]},"application/vnd.syncml.dm+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["xdm"]},"application/vnd.syncml.dm.notification":{source:"iana"},"application/vnd.syncml.dmddf+wbxml":{source:"iana"},"application/vnd.syncml.dmddf+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{source:"iana"},"application/vnd.syncml.dmtnds+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.syncml.ds.notification":{source:"iana"},"application/vnd.tableschema+json":{source:"iana",compressible:!0},"application/vnd.tao.intent-module-archive":{source:"iana",extensions:["tao"]},"application/vnd.tcpdump.pcap":{source:"iana",extensions:["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{source:"iana",compressible:!0},"application/vnd.tmd.mediaflex.api+xml":{source:"iana",compressible:!0},"application/vnd.tml":{source:"iana"},"application/vnd.tmobile-livetv":{source:"iana",extensions:["tmo"]},"application/vnd.tri.onesource":{source:"iana"},"application/vnd.trid.tpt":{source:"iana",extensions:["tpt"]},"application/vnd.triscape.mxs":{source:"iana",extensions:["mxs"]},"application/vnd.trueapp":{source:"iana",extensions:["tra"]},"application/vnd.truedoc":{source:"iana"},"application/vnd.ubisoft.webplayer":{source:"iana"},"application/vnd.ufdl":{source:"iana",extensions:["ufd","ufdl"]},"application/vnd.uiq.theme":{source:"iana",extensions:["utz"]},"application/vnd.umajin":{source:"iana",extensions:["umj"]},"application/vnd.unity":{source:"iana",extensions:["unityweb"]},"application/vnd.uoml+xml":{source:"iana",compressible:!0,extensions:["uoml"]},"application/vnd.uplanet.alert":{source:"iana"},"application/vnd.uplanet.alert-wbxml":{source:"iana"},"application/vnd.uplanet.bearer-choice":{source:"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{source:"iana"},"application/vnd.uplanet.cacheop":{source:"iana"},"application/vnd.uplanet.cacheop-wbxml":{source:"iana"},"application/vnd.uplanet.channel":{source:"iana"},"application/vnd.uplanet.channel-wbxml":{source:"iana"},"application/vnd.uplanet.list":{source:"iana"},"application/vnd.uplanet.list-wbxml":{source:"iana"},"application/vnd.uplanet.listcmd":{source:"iana"},"application/vnd.uplanet.listcmd-wbxml":{source:"iana"},"application/vnd.uplanet.signal":{source:"iana"},"application/vnd.uri-map":{source:"iana"},"application/vnd.valve.source.material":{source:"iana"},"application/vnd.vcx":{source:"iana",extensions:["vcx"]},"application/vnd.vd-study":{source:"iana"},"application/vnd.vectorworks":{source:"iana"},"application/vnd.vel+json":{source:"iana",compressible:!0},"application/vnd.verimatrix.vcas":{source:"iana"},"application/vnd.veritone.aion+json":{source:"iana",compressible:!0},"application/vnd.veryant.thin":{source:"iana"},"application/vnd.ves.encrypted":{source:"iana"},"application/vnd.vidsoft.vidconference":{source:"iana"},"application/vnd.visio":{source:"iana",extensions:["vsd","vst","vss","vsw"]},"application/vnd.visionary":{source:"iana",extensions:["vis"]},"application/vnd.vividence.scriptfile":{source:"iana"},"application/vnd.vsf":{source:"iana",extensions:["vsf"]},"application/vnd.wap.sic":{source:"iana"},"application/vnd.wap.slc":{source:"iana"},"application/vnd.wap.wbxml":{source:"iana",charset:"UTF-8",extensions:["wbxml"]},"application/vnd.wap.wmlc":{source:"iana",extensions:["wmlc"]},"application/vnd.wap.wmlscriptc":{source:"iana",extensions:["wmlsc"]},"application/vnd.webturbo":{source:"iana",extensions:["wtb"]},"application/vnd.wfa.dpp":{source:"iana"},"application/vnd.wfa.p2p":{source:"iana"},"application/vnd.wfa.wsc":{source:"iana"},"application/vnd.windows.devicepairing":{source:"iana"},"application/vnd.wmc":{source:"iana"},"application/vnd.wmf.bootstrap":{source:"iana"},"application/vnd.wolfram.mathematica":{source:"iana"},"application/vnd.wolfram.mathematica.package":{source:"iana"},"application/vnd.wolfram.player":{source:"iana",extensions:["nbp"]},"application/vnd.wordperfect":{source:"iana",extensions:["wpd"]},"application/vnd.wqd":{source:"iana",extensions:["wqd"]},"application/vnd.wrq-hp3000-labelled":{source:"iana"},"application/vnd.wt.stf":{source:"iana",extensions:["stf"]},"application/vnd.wv.csp+wbxml":{source:"iana"},"application/vnd.wv.csp+xml":{source:"iana",compressible:!0},"application/vnd.wv.ssp+xml":{source:"iana",compressible:!0},"application/vnd.xacml+json":{source:"iana",compressible:!0},"application/vnd.xara":{source:"iana",extensions:["xar"]},"application/vnd.xfdl":{source:"iana",extensions:["xfdl"]},"application/vnd.xfdl.webform":{source:"iana"},"application/vnd.xmi+xml":{source:"iana",compressible:!0},"application/vnd.xmpie.cpkg":{source:"iana"},"application/vnd.xmpie.dpkg":{source:"iana"},"application/vnd.xmpie.plan":{source:"iana"},"application/vnd.xmpie.ppkg":{source:"iana"},"application/vnd.xmpie.xlim":{source:"iana"},"application/vnd.yamaha.hv-dic":{source:"iana",extensions:["hvd"]},"application/vnd.yamaha.hv-script":{source:"iana",extensions:["hvs"]},"application/vnd.yamaha.hv-voice":{source:"iana",extensions:["hvp"]},"application/vnd.yamaha.openscoreformat":{source:"iana",extensions:["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{source:"iana",compressible:!0,extensions:["osfpvg"]},"application/vnd.yamaha.remote-setup":{source:"iana"},"application/vnd.yamaha.smaf-audio":{source:"iana",extensions:["saf"]},"application/vnd.yamaha.smaf-phrase":{source:"iana",extensions:["spf"]},"application/vnd.yamaha.through-ngn":{source:"iana"},"application/vnd.yamaha.tunnel-udpencap":{source:"iana"},"application/vnd.yaoweme":{source:"iana"},"application/vnd.yellowriver-custom-menu":{source:"iana",extensions:["cmp"]},"application/vnd.youtube.yt":{source:"iana"},"application/vnd.zul":{source:"iana",extensions:["zir","zirz"]},"application/vnd.zzazz.deck+xml":{source:"iana",compressible:!0,extensions:["zaz"]},"application/voicexml+xml":{source:"iana",compressible:!0,extensions:["vxml"]},"application/voucher-cms+json":{source:"iana",compressible:!0},"application/vq-rtcpxr":{source:"iana"},"application/wasm":{source:"iana",compressible:!0,extensions:["wasm"]},"application/watcherinfo+xml":{source:"iana",compressible:!0,extensions:["wif"]},"application/webpush-options+json":{source:"iana",compressible:!0},"application/whoispp-query":{source:"iana"},"application/whoispp-response":{source:"iana"},"application/widget":{source:"iana",extensions:["wgt"]},"application/winhlp":{source:"apache",extensions:["hlp"]},"application/wita":{source:"iana"},"application/wordperfect5.1":{source:"iana"},"application/wsdl+xml":{source:"iana",compressible:!0,extensions:["wsdl"]},"application/wspolicy+xml":{source:"iana",compressible:!0,extensions:["wspolicy"]},"application/x-7z-compressed":{source:"apache",compressible:!1,extensions:["7z"]},"application/x-abiword":{source:"apache",extensions:["abw"]},"application/x-ace-compressed":{source:"apache",extensions:["ace"]},"application/x-amf":{source:"apache"},"application/x-apple-diskimage":{source:"apache",extensions:["dmg"]},"application/x-arj":{compressible:!1,extensions:["arj"]},"application/x-authorware-bin":{source:"apache",extensions:["aab","x32","u32","vox"]},"application/x-authorware-map":{source:"apache",extensions:["aam"]},"application/x-authorware-seg":{source:"apache",extensions:["aas"]},"application/x-bcpio":{source:"apache",extensions:["bcpio"]},"application/x-bdoc":{compressible:!1,extensions:["bdoc"]},"application/x-bittorrent":{source:"apache",extensions:["torrent"]},"application/x-blorb":{source:"apache",extensions:["blb","blorb"]},"application/x-bzip":{source:"apache",compressible:!1,extensions:["bz"]},"application/x-bzip2":{source:"apache",compressible:!1,extensions:["bz2","boz"]},"application/x-cbr":{source:"apache",extensions:["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{source:"apache",extensions:["vcd"]},"application/x-cfs-compressed":{source:"apache",extensions:["cfs"]},"application/x-chat":{source:"apache",extensions:["chat"]},"application/x-chess-pgn":{source:"apache",extensions:["pgn"]},"application/x-chrome-extension":{extensions:["crx"]},"application/x-cocoa":{source:"nginx",extensions:["cco"]},"application/x-compress":{source:"apache"},"application/x-conference":{source:"apache",extensions:["nsc"]},"application/x-cpio":{source:"apache",extensions:["cpio"]},"application/x-csh":{source:"apache",extensions:["csh"]},"application/x-deb":{compressible:!1},"application/x-debian-package":{source:"apache",extensions:["deb","udeb"]},"application/x-dgc-compressed":{source:"apache",extensions:["dgc"]},"application/x-director":{source:"apache",extensions:["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{source:"apache",extensions:["wad"]},"application/x-dtbncx+xml":{source:"apache",compressible:!0,extensions:["ncx"]},"application/x-dtbook+xml":{source:"apache",compressible:!0,extensions:["dtb"]},"application/x-dtbresource+xml":{source:"apache",compressible:!0,extensions:["res"]},"application/x-dvi":{source:"apache",compressible:!1,extensions:["dvi"]},"application/x-envoy":{source:"apache",extensions:["evy"]},"application/x-eva":{source:"apache",extensions:["eva"]},"application/x-font-bdf":{source:"apache",extensions:["bdf"]},"application/x-font-dos":{source:"apache"},"application/x-font-framemaker":{source:"apache"},"application/x-font-ghostscript":{source:"apache",extensions:["gsf"]},"application/x-font-libgrx":{source:"apache"},"application/x-font-linux-psf":{source:"apache",extensions:["psf"]},"application/x-font-pcf":{source:"apache",extensions:["pcf"]},"application/x-font-snf":{source:"apache",extensions:["snf"]},"application/x-font-speedo":{source:"apache"},"application/x-font-sunos-news":{source:"apache"},"application/x-font-type1":{source:"apache",extensions:["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{source:"apache"},"application/x-freearc":{source:"apache",extensions:["arc"]},"application/x-futuresplash":{source:"apache",extensions:["spl"]},"application/x-gca-compressed":{source:"apache",extensions:["gca"]},"application/x-glulx":{source:"apache",extensions:["ulx"]},"application/x-gnumeric":{source:"apache",extensions:["gnumeric"]},"application/x-gramps-xml":{source:"apache",extensions:["gramps"]},"application/x-gtar":{source:"apache",extensions:["gtar"]},"application/x-gzip":{source:"apache"},"application/x-hdf":{source:"apache",extensions:["hdf"]},"application/x-httpd-php":{compressible:!0,extensions:["php"]},"application/x-install-instructions":{source:"apache",extensions:["install"]},"application/x-iso9660-image":{source:"apache",extensions:["iso"]},"application/x-iwork-keynote-sffkey":{extensions:["key"]},"application/x-iwork-numbers-sffnumbers":{extensions:["numbers"]},"application/x-iwork-pages-sffpages":{extensions:["pages"]},"application/x-java-archive-diff":{source:"nginx",extensions:["jardiff"]},"application/x-java-jnlp-file":{source:"apache",compressible:!1,extensions:["jnlp"]},"application/x-javascript":{compressible:!0},"application/x-keepass2":{extensions:["kdbx"]},"application/x-latex":{source:"apache",compressible:!1,extensions:["latex"]},"application/x-lua-bytecode":{extensions:["luac"]},"application/x-lzh-compressed":{source:"apache",extensions:["lzh","lha"]},"application/x-makeself":{source:"nginx",extensions:["run"]},"application/x-mie":{source:"apache",extensions:["mie"]},"application/x-mobipocket-ebook":{source:"apache",extensions:["prc","mobi"]},"application/x-mpegurl":{compressible:!1},"application/x-ms-application":{source:"apache",extensions:["application"]},"application/x-ms-shortcut":{source:"apache",extensions:["lnk"]},"application/x-ms-wmd":{source:"apache",extensions:["wmd"]},"application/x-ms-wmz":{source:"apache",extensions:["wmz"]},"application/x-ms-xbap":{source:"apache",extensions:["xbap"]},"application/x-msaccess":{source:"apache",extensions:["mdb"]},"application/x-msbinder":{source:"apache",extensions:["obd"]},"application/x-mscardfile":{source:"apache",extensions:["crd"]},"application/x-msclip":{source:"apache",extensions:["clp"]},"application/x-msdos-program":{extensions:["exe"]},"application/x-msdownload":{source:"apache",extensions:["exe","dll","com","bat","msi"]},"application/x-msmediaview":{source:"apache",extensions:["mvb","m13","m14"]},"application/x-msmetafile":{source:"apache",extensions:["wmf","wmz","emf","emz"]},"application/x-msmoney":{source:"apache",extensions:["mny"]},"application/x-mspublisher":{source:"apache",extensions:["pub"]},"application/x-msschedule":{source:"apache",extensions:["scd"]},"application/x-msterminal":{source:"apache",extensions:["trm"]},"application/x-mswrite":{source:"apache",extensions:["wri"]},"application/x-netcdf":{source:"apache",extensions:["nc","cdf"]},"application/x-ns-proxy-autoconfig":{compressible:!0,extensions:["pac"]},"application/x-nzb":{source:"apache",extensions:["nzb"]},"application/x-perl":{source:"nginx",extensions:["pl","pm"]},"application/x-pilot":{source:"nginx",extensions:["prc","pdb"]},"application/x-pkcs12":{source:"apache",compressible:!1,extensions:["p12","pfx"]},"application/x-pkcs7-certificates":{source:"apache",extensions:["p7b","spc"]},"application/x-pkcs7-certreqresp":{source:"apache",extensions:["p7r"]},"application/x-pki-message":{source:"iana"},"application/x-rar-compressed":{source:"apache",compressible:!1,extensions:["rar"]},"application/x-redhat-package-manager":{source:"nginx",extensions:["rpm"]},"application/x-research-info-systems":{source:"apache",extensions:["ris"]},"application/x-sea":{source:"nginx",extensions:["sea"]},"application/x-sh":{source:"apache",compressible:!0,extensions:["sh"]},"application/x-shar":{source:"apache",extensions:["shar"]},"application/x-shockwave-flash":{source:"apache",compressible:!1,extensions:["swf"]},"application/x-silverlight-app":{source:"apache",extensions:["xap"]},"application/x-sql":{source:"apache",extensions:["sql"]},"application/x-stuffit":{source:"apache",compressible:!1,extensions:["sit"]},"application/x-stuffitx":{source:"apache",extensions:["sitx"]},"application/x-subrip":{source:"apache",extensions:["srt"]},"application/x-sv4cpio":{source:"apache",extensions:["sv4cpio"]},"application/x-sv4crc":{source:"apache",extensions:["sv4crc"]},"application/x-t3vm-image":{source:"apache",extensions:["t3"]},"application/x-tads":{source:"apache",extensions:["gam"]},"application/x-tar":{source:"apache",compressible:!0,extensions:["tar"]},"application/x-tcl":{source:"apache",extensions:["tcl","tk"]},"application/x-tex":{source:"apache",extensions:["tex"]},"application/x-tex-tfm":{source:"apache",extensions:["tfm"]},"application/x-texinfo":{source:"apache",extensions:["texinfo","texi"]},"application/x-tgif":{source:"apache",extensions:["obj"]},"application/x-ustar":{source:"apache",extensions:["ustar"]},"application/x-virtualbox-hdd":{compressible:!0,extensions:["hdd"]},"application/x-virtualbox-ova":{compressible:!0,extensions:["ova"]},"application/x-virtualbox-ovf":{compressible:!0,extensions:["ovf"]},"application/x-virtualbox-vbox":{compressible:!0,extensions:["vbox"]},"application/x-virtualbox-vbox-extpack":{compressible:!1,extensions:["vbox-extpack"]},"application/x-virtualbox-vdi":{compressible:!0,extensions:["vdi"]},"application/x-virtualbox-vhd":{compressible:!0,extensions:["vhd"]},"application/x-virtualbox-vmdk":{compressible:!0,extensions:["vmdk"]},"application/x-wais-source":{source:"apache",extensions:["src"]},"application/x-web-app-manifest+json":{compressible:!0,extensions:["webapp"]},"application/x-www-form-urlencoded":{source:"iana",compressible:!0},"application/x-x509-ca-cert":{source:"iana",extensions:["der","crt","pem"]},"application/x-x509-ca-ra-cert":{source:"iana"},"application/x-x509-next-ca-cert":{source:"iana"},"application/x-xfig":{source:"apache",extensions:["fig"]},"application/x-xliff+xml":{source:"apache",compressible:!0,extensions:["xlf"]},"application/x-xpinstall":{source:"apache",compressible:!1,extensions:["xpi"]},"application/x-xz":{source:"apache",extensions:["xz"]},"application/x-zmachine":{source:"apache",extensions:["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{source:"iana"},"application/xacml+xml":{source:"iana",compressible:!0},"application/xaml+xml":{source:"apache",compressible:!0,extensions:["xaml"]},"application/xcap-att+xml":{source:"iana",compressible:!0,extensions:["xav"]},"application/xcap-caps+xml":{source:"iana",compressible:!0,extensions:["xca"]},"application/xcap-diff+xml":{source:"iana",compressible:!0,extensions:["xdf"]},"application/xcap-el+xml":{source:"iana",compressible:!0,extensions:["xel"]},"application/xcap-error+xml":{source:"iana",compressible:!0},"application/xcap-ns+xml":{source:"iana",compressible:!0,extensions:["xns"]},"application/xcon-conference-info+xml":{source:"iana",compressible:!0},"application/xcon-conference-info-diff+xml":{source:"iana",compressible:!0},"application/xenc+xml":{source:"iana",compressible:!0,extensions:["xenc"]},"application/xhtml+xml":{source:"iana",compressible:!0,extensions:["xhtml","xht"]},"application/xhtml-voice+xml":{source:"apache",compressible:!0},"application/xliff+xml":{source:"iana",compressible:!0,extensions:["xlf"]},"application/xml":{source:"iana",compressible:!0,extensions:["xml","xsl","xsd","rng"]},"application/xml-dtd":{source:"iana",compressible:!0,extensions:["dtd"]},"application/xml-external-parsed-entity":{source:"iana"},"application/xml-patch+xml":{source:"iana",compressible:!0},"application/xmpp+xml":{source:"iana",compressible:!0},"application/xop+xml":{source:"iana",compressible:!0,extensions:["xop"]},"application/xproc+xml":{source:"apache",compressible:!0,extensions:["xpl"]},"application/xslt+xml":{source:"iana",compressible:!0,extensions:["xsl","xslt"]},"application/xspf+xml":{source:"apache",compressible:!0,extensions:["xspf"]},"application/xv+xml":{source:"iana",compressible:!0,extensions:["mxml","xhvml","xvml","xvm"]},"application/yang":{source:"iana",extensions:["yang"]},"application/yang-data+json":{source:"iana",compressible:!0},"application/yang-data+xml":{source:"iana",compressible:!0},"application/yang-patch+json":{source:"iana",compressible:!0},"application/yang-patch+xml":{source:"iana",compressible:!0},"application/yin+xml":{source:"iana",compressible:!0,extensions:["yin"]},"application/zip":{source:"iana",compressible:!1,extensions:["zip"]},"application/zlib":{source:"iana"},"application/zstd":{source:"iana"},"audio/1d-interleaved-parityfec":{source:"iana"},"audio/32kadpcm":{source:"iana"},"audio/3gpp":{source:"iana",compressible:!1,extensions:["3gpp"]},"audio/3gpp2":{source:"iana"},"audio/aac":{source:"iana"},"audio/ac3":{source:"iana"},"audio/adpcm":{source:"apache",extensions:["adp"]},"audio/amr":{source:"iana",extensions:["amr"]},"audio/amr-wb":{source:"iana"},"audio/amr-wb+":{source:"iana"},"audio/aptx":{source:"iana"},"audio/asc":{source:"iana"},"audio/atrac-advanced-lossless":{source:"iana"},"audio/atrac-x":{source:"iana"},"audio/atrac3":{source:"iana"},"audio/basic":{source:"iana",compressible:!1,extensions:["au","snd"]},"audio/bv16":{source:"iana"},"audio/bv32":{source:"iana"},"audio/clearmode":{source:"iana"},"audio/cn":{source:"iana"},"audio/dat12":{source:"iana"},"audio/dls":{source:"iana"},"audio/dsr-es201108":{source:"iana"},"audio/dsr-es202050":{source:"iana"},"audio/dsr-es202211":{source:"iana"},"audio/dsr-es202212":{source:"iana"},"audio/dv":{source:"iana"},"audio/dvi4":{source:"iana"},"audio/eac3":{source:"iana"},"audio/encaprtp":{source:"iana"},"audio/evrc":{source:"iana"},"audio/evrc-qcp":{source:"iana"},"audio/evrc0":{source:"iana"},"audio/evrc1":{source:"iana"},"audio/evrcb":{source:"iana"},"audio/evrcb0":{source:"iana"},"audio/evrcb1":{source:"iana"},"audio/evrcnw":{source:"iana"},"audio/evrcnw0":{source:"iana"},"audio/evrcnw1":{source:"iana"},"audio/evrcwb":{source:"iana"},"audio/evrcwb0":{source:"iana"},"audio/evrcwb1":{source:"iana"},"audio/evs":{source:"iana"},"audio/flexfec":{source:"iana"},"audio/fwdred":{source:"iana"},"audio/g711-0":{source:"iana"},"audio/g719":{source:"iana"},"audio/g722":{source:"iana"},"audio/g7221":{source:"iana"},"audio/g723":{source:"iana"},"audio/g726-16":{source:"iana"},"audio/g726-24":{source:"iana"},"audio/g726-32":{source:"iana"},"audio/g726-40":{source:"iana"},"audio/g728":{source:"iana"},"audio/g729":{source:"iana"},"audio/g7291":{source:"iana"},"audio/g729d":{source:"iana"},"audio/g729e":{source:"iana"},"audio/gsm":{source:"iana"},"audio/gsm-efr":{source:"iana"},"audio/gsm-hr-08":{source:"iana"},"audio/ilbc":{source:"iana"},"audio/ip-mr_v2.5":{source:"iana"},"audio/isac":{source:"apache"},"audio/l16":{source:"iana"},"audio/l20":{source:"iana"},"audio/l24":{source:"iana",compressible:!1},"audio/l8":{source:"iana"},"audio/lpc":{source:"iana"},"audio/melp":{source:"iana"},"audio/melp1200":{source:"iana"},"audio/melp2400":{source:"iana"},"audio/melp600":{source:"iana"},"audio/mhas":{source:"iana"},"audio/midi":{source:"apache",extensions:["mid","midi","kar","rmi"]},"audio/mobile-xmf":{source:"iana",extensions:["mxmf"]},"audio/mp3":{compressible:!1,extensions:["mp3"]},"audio/mp4":{source:"iana",compressible:!1,extensions:["m4a","mp4a"]},"audio/mp4a-latm":{source:"iana"},"audio/mpa":{source:"iana"},"audio/mpa-robust":{source:"iana"},"audio/mpeg":{source:"iana",compressible:!1,extensions:["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{source:"iana"},"audio/musepack":{source:"apache"},"audio/ogg":{source:"iana",compressible:!1,extensions:["oga","ogg","spx","opus"]},"audio/opus":{source:"iana"},"audio/parityfec":{source:"iana"},"audio/pcma":{source:"iana"},"audio/pcma-wb":{source:"iana"},"audio/pcmu":{source:"iana"},"audio/pcmu-wb":{source:"iana"},"audio/prs.sid":{source:"iana"},"audio/qcelp":{source:"iana"},"audio/raptorfec":{source:"iana"},"audio/red":{source:"iana"},"audio/rtp-enc-aescm128":{source:"iana"},"audio/rtp-midi":{source:"iana"},"audio/rtploopback":{source:"iana"},"audio/rtx":{source:"iana"},"audio/s3m":{source:"apache",extensions:["s3m"]},"audio/scip":{source:"iana"},"audio/silk":{source:"apache",extensions:["sil"]},"audio/smv":{source:"iana"},"audio/smv-qcp":{source:"iana"},"audio/smv0":{source:"iana"},"audio/sofa":{source:"iana"},"audio/sp-midi":{source:"iana"},"audio/speex":{source:"iana"},"audio/t140c":{source:"iana"},"audio/t38":{source:"iana"},"audio/telephone-event":{source:"iana"},"audio/tetra_acelp":{source:"iana"},"audio/tetra_acelp_bb":{source:"iana"},"audio/tone":{source:"iana"},"audio/tsvcis":{source:"iana"},"audio/uemclip":{source:"iana"},"audio/ulpfec":{source:"iana"},"audio/usac":{source:"iana"},"audio/vdvi":{source:"iana"},"audio/vmr-wb":{source:"iana"},"audio/vnd.3gpp.iufp":{source:"iana"},"audio/vnd.4sb":{source:"iana"},"audio/vnd.audiokoz":{source:"iana"},"audio/vnd.celp":{source:"iana"},"audio/vnd.cisco.nse":{source:"iana"},"audio/vnd.cmles.radio-events":{source:"iana"},"audio/vnd.cns.anp1":{source:"iana"},"audio/vnd.cns.inf1":{source:"iana"},"audio/vnd.dece.audio":{source:"iana",extensions:["uva","uvva"]},"audio/vnd.digital-winds":{source:"iana",extensions:["eol"]},"audio/vnd.dlna.adts":{source:"iana"},"audio/vnd.dolby.heaac.1":{source:"iana"},"audio/vnd.dolby.heaac.2":{source:"iana"},"audio/vnd.dolby.mlp":{source:"iana"},"audio/vnd.dolby.mps":{source:"iana"},"audio/vnd.dolby.pl2":{source:"iana"},"audio/vnd.dolby.pl2x":{source:"iana"},"audio/vnd.dolby.pl2z":{source:"iana"},"audio/vnd.dolby.pulse.1":{source:"iana"},"audio/vnd.dra":{source:"iana",extensions:["dra"]},"audio/vnd.dts":{source:"iana",extensions:["dts"]},"audio/vnd.dts.hd":{source:"iana",extensions:["dtshd"]},"audio/vnd.dts.uhd":{source:"iana"},"audio/vnd.dvb.file":{source:"iana"},"audio/vnd.everad.plj":{source:"iana"},"audio/vnd.hns.audio":{source:"iana"},"audio/vnd.lucent.voice":{source:"iana",extensions:["lvp"]},"audio/vnd.ms-playready.media.pya":{source:"iana",extensions:["pya"]},"audio/vnd.nokia.mobile-xmf":{source:"iana"},"audio/vnd.nortel.vbk":{source:"iana"},"audio/vnd.nuera.ecelp4800":{source:"iana",extensions:["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{source:"iana",extensions:["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{source:"iana",extensions:["ecelp9600"]},"audio/vnd.octel.sbc":{source:"iana"},"audio/vnd.presonus.multitrack":{source:"iana"},"audio/vnd.qcelp":{source:"iana"},"audio/vnd.rhetorex.32kadpcm":{source:"iana"},"audio/vnd.rip":{source:"iana",extensions:["rip"]},"audio/vnd.rn-realaudio":{compressible:!1},"audio/vnd.sealedmedia.softseal.mpeg":{source:"iana"},"audio/vnd.vmx.cvsd":{source:"iana"},"audio/vnd.wave":{compressible:!1},"audio/vorbis":{source:"iana",compressible:!1},"audio/vorbis-config":{source:"iana"},"audio/wav":{compressible:!1,extensions:["wav"]},"audio/wave":{compressible:!1,extensions:["wav"]},"audio/webm":{source:"apache",compressible:!1,extensions:["weba"]},"audio/x-aac":{source:"apache",compressible:!1,extensions:["aac"]},"audio/x-aiff":{source:"apache",extensions:["aif","aiff","aifc"]},"audio/x-caf":{source:"apache",compressible:!1,extensions:["caf"]},"audio/x-flac":{source:"apache",extensions:["flac"]},"audio/x-m4a":{source:"nginx",extensions:["m4a"]},"audio/x-matroska":{source:"apache",extensions:["mka"]},"audio/x-mpegurl":{source:"apache",extensions:["m3u"]},"audio/x-ms-wax":{source:"apache",extensions:["wax"]},"audio/x-ms-wma":{source:"apache",extensions:["wma"]},"audio/x-pn-realaudio":{source:"apache",extensions:["ram","ra"]},"audio/x-pn-realaudio-plugin":{source:"apache",extensions:["rmp"]},"audio/x-realaudio":{source:"nginx",extensions:["ra"]},"audio/x-tta":{source:"apache"},"audio/x-wav":{source:"apache",extensions:["wav"]},"audio/xm":{source:"apache",extensions:["xm"]},"chemical/x-cdx":{source:"apache",extensions:["cdx"]},"chemical/x-cif":{source:"apache",extensions:["cif"]},"chemical/x-cmdf":{source:"apache",extensions:["cmdf"]},"chemical/x-cml":{source:"apache",extensions:["cml"]},"chemical/x-csml":{source:"apache",extensions:["csml"]},"chemical/x-pdb":{source:"apache"},"chemical/x-xyz":{source:"apache",extensions:["xyz"]},"font/collection":{source:"iana",extensions:["ttc"]},"font/otf":{source:"iana",compressible:!0,extensions:["otf"]},"font/sfnt":{source:"iana"},"font/ttf":{source:"iana",compressible:!0,extensions:["ttf"]},"font/woff":{source:"iana",extensions:["woff"]},"font/woff2":{source:"iana",extensions:["woff2"]},"image/aces":{source:"iana",extensions:["exr"]},"image/apng":{compressible:!1,extensions:["apng"]},"image/avci":{source:"iana",extensions:["avci"]},"image/avcs":{source:"iana",extensions:["avcs"]},"image/avif":{source:"iana",compressible:!1,extensions:["avif"]},"image/bmp":{source:"iana",compressible:!0,extensions:["bmp"]},"image/cgm":{source:"iana",extensions:["cgm"]},"image/dicom-rle":{source:"iana",extensions:["drle"]},"image/emf":{source:"iana",extensions:["emf"]},"image/fits":{source:"iana",extensions:["fits"]},"image/g3fax":{source:"iana",extensions:["g3"]},"image/gif":{source:"iana",compressible:!1,extensions:["gif"]},"image/heic":{source:"iana",extensions:["heic"]},"image/heic-sequence":{source:"iana",extensions:["heics"]},"image/heif":{source:"iana",extensions:["heif"]},"image/heif-sequence":{source:"iana",extensions:["heifs"]},"image/hej2k":{source:"iana",extensions:["hej2"]},"image/hsj2":{source:"iana",extensions:["hsj2"]},"image/ief":{source:"iana",extensions:["ief"]},"image/jls":{source:"iana",extensions:["jls"]},"image/jp2":{source:"iana",compressible:!1,extensions:["jp2","jpg2"]},"image/jpeg":{source:"iana",compressible:!1,extensions:["jpeg","jpg","jpe"]},"image/jph":{source:"iana",extensions:["jph"]},"image/jphc":{source:"iana",extensions:["jhc"]},"image/jpm":{source:"iana",compressible:!1,extensions:["jpm"]},"image/jpx":{source:"iana",compressible:!1,extensions:["jpx","jpf"]},"image/jxr":{source:"iana",extensions:["jxr"]},"image/jxra":{source:"iana",extensions:["jxra"]},"image/jxrs":{source:"iana",extensions:["jxrs"]},"image/jxs":{source:"iana",extensions:["jxs"]},"image/jxsc":{source:"iana",extensions:["jxsc"]},"image/jxsi":{source:"iana",extensions:["jxsi"]},"image/jxss":{source:"iana",extensions:["jxss"]},"image/ktx":{source:"iana",extensions:["ktx"]},"image/ktx2":{source:"iana",extensions:["ktx2"]},"image/naplps":{source:"iana"},"image/pjpeg":{compressible:!1},"image/png":{source:"iana",compressible:!1,extensions:["png"]},"image/prs.btif":{source:"iana",extensions:["btif"]},"image/prs.pti":{source:"iana",extensions:["pti"]},"image/pwg-raster":{source:"iana"},"image/sgi":{source:"apache",extensions:["sgi"]},"image/svg+xml":{source:"iana",compressible:!0,extensions:["svg","svgz"]},"image/t38":{source:"iana",extensions:["t38"]},"image/tiff":{source:"iana",compressible:!1,extensions:["tif","tiff"]},"image/tiff-fx":{source:"iana",extensions:["tfx"]},"image/vnd.adobe.photoshop":{source:"iana",compressible:!0,extensions:["psd"]},"image/vnd.airzip.accelerator.azv":{source:"iana",extensions:["azv"]},"image/vnd.cns.inf2":{source:"iana"},"image/vnd.dece.graphic":{source:"iana",extensions:["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{source:"iana",extensions:["djvu","djv"]},"image/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"image/vnd.dwg":{source:"iana",extensions:["dwg"]},"image/vnd.dxf":{source:"iana",extensions:["dxf"]},"image/vnd.fastbidsheet":{source:"iana",extensions:["fbs"]},"image/vnd.fpx":{source:"iana",extensions:["fpx"]},"image/vnd.fst":{source:"iana",extensions:["fst"]},"image/vnd.fujixerox.edmics-mmr":{source:"iana",extensions:["mmr"]},"image/vnd.fujixerox.edmics-rlc":{source:"iana",extensions:["rlc"]},"image/vnd.globalgraphics.pgb":{source:"iana"},"image/vnd.microsoft.icon":{source:"iana",compressible:!0,extensions:["ico"]},"image/vnd.mix":{source:"iana"},"image/vnd.mozilla.apng":{source:"iana"},"image/vnd.ms-dds":{compressible:!0,extensions:["dds"]},"image/vnd.ms-modi":{source:"iana",extensions:["mdi"]},"image/vnd.ms-photo":{source:"apache",extensions:["wdp"]},"image/vnd.net-fpx":{source:"iana",extensions:["npx"]},"image/vnd.pco.b16":{source:"iana",extensions:["b16"]},"image/vnd.radiance":{source:"iana"},"image/vnd.sealed.png":{source:"iana"},"image/vnd.sealedmedia.softseal.gif":{source:"iana"},"image/vnd.sealedmedia.softseal.jpg":{source:"iana"},"image/vnd.svf":{source:"iana"},"image/vnd.tencent.tap":{source:"iana",extensions:["tap"]},"image/vnd.valve.source.texture":{source:"iana",extensions:["vtf"]},"image/vnd.wap.wbmp":{source:"iana",extensions:["wbmp"]},"image/vnd.xiff":{source:"iana",extensions:["xif"]},"image/vnd.zbrush.pcx":{source:"iana",extensions:["pcx"]},"image/webp":{source:"apache",extensions:["webp"]},"image/wmf":{source:"iana",extensions:["wmf"]},"image/x-3ds":{source:"apache",extensions:["3ds"]},"image/x-cmu-raster":{source:"apache",extensions:["ras"]},"image/x-cmx":{source:"apache",extensions:["cmx"]},"image/x-freehand":{source:"apache",extensions:["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{source:"apache",compressible:!0,extensions:["ico"]},"image/x-jng":{source:"nginx",extensions:["jng"]},"image/x-mrsid-image":{source:"apache",extensions:["sid"]},"image/x-ms-bmp":{source:"nginx",compressible:!0,extensions:["bmp"]},"image/x-pcx":{source:"apache",extensions:["pcx"]},"image/x-pict":{source:"apache",extensions:["pic","pct"]},"image/x-portable-anymap":{source:"apache",extensions:["pnm"]},"image/x-portable-bitmap":{source:"apache",extensions:["pbm"]},"image/x-portable-graymap":{source:"apache",extensions:["pgm"]},"image/x-portable-pixmap":{source:"apache",extensions:["ppm"]},"image/x-rgb":{source:"apache",extensions:["rgb"]},"image/x-tga":{source:"apache",extensions:["tga"]},"image/x-xbitmap":{source:"apache",extensions:["xbm"]},"image/x-xcf":{compressible:!1},"image/x-xpixmap":{source:"apache",extensions:["xpm"]},"image/x-xwindowdump":{source:"apache",extensions:["xwd"]},"message/cpim":{source:"iana"},"message/delivery-status":{source:"iana"},"message/disposition-notification":{source:"iana",extensions:["disposition-notification"]},"message/external-body":{source:"iana"},"message/feedback-report":{source:"iana"},"message/global":{source:"iana",extensions:["u8msg"]},"message/global-delivery-status":{source:"iana",extensions:["u8dsn"]},"message/global-disposition-notification":{source:"iana",extensions:["u8mdn"]},"message/global-headers":{source:"iana",extensions:["u8hdr"]},"message/http":{source:"iana",compressible:!1},"message/imdn+xml":{source:"iana",compressible:!0},"message/news":{source:"iana"},"message/partial":{source:"iana",compressible:!1},"message/rfc822":{source:"iana",compressible:!0,extensions:["eml","mime"]},"message/s-http":{source:"iana"},"message/sip":{source:"iana"},"message/sipfrag":{source:"iana"},"message/tracking-status":{source:"iana"},"message/vnd.si.simp":{source:"iana"},"message/vnd.wfa.wsc":{source:"iana",extensions:["wsc"]},"model/3mf":{source:"iana",extensions:["3mf"]},"model/e57":{source:"iana"},"model/gltf+json":{source:"iana",compressible:!0,extensions:["gltf"]},"model/gltf-binary":{source:"iana",compressible:!0,extensions:["glb"]},"model/iges":{source:"iana",compressible:!1,extensions:["igs","iges"]},"model/mesh":{source:"iana",compressible:!1,extensions:["msh","mesh","silo"]},"model/mtl":{source:"iana",extensions:["mtl"]},"model/obj":{source:"iana",extensions:["obj"]},"model/step":{source:"iana"},"model/step+xml":{source:"iana",compressible:!0,extensions:["stpx"]},"model/step+zip":{source:"iana",compressible:!1,extensions:["stpz"]},"model/step-xml+zip":{source:"iana",compressible:!1,extensions:["stpxz"]},"model/stl":{source:"iana",extensions:["stl"]},"model/vnd.collada+xml":{source:"iana",compressible:!0,extensions:["dae"]},"model/vnd.dwf":{source:"iana",extensions:["dwf"]},"model/vnd.flatland.3dml":{source:"iana"},"model/vnd.gdl":{source:"iana",extensions:["gdl"]},"model/vnd.gs-gdl":{source:"apache"},"model/vnd.gs.gdl":{source:"iana"},"model/vnd.gtw":{source:"iana",extensions:["gtw"]},"model/vnd.moml+xml":{source:"iana",compressible:!0},"model/vnd.mts":{source:"iana",extensions:["mts"]},"model/vnd.opengex":{source:"iana",extensions:["ogex"]},"model/vnd.parasolid.transmit.binary":{source:"iana",extensions:["x_b"]},"model/vnd.parasolid.transmit.text":{source:"iana",extensions:["x_t"]},"model/vnd.pytha.pyox":{source:"iana"},"model/vnd.rosette.annotated-data-model":{source:"iana"},"model/vnd.sap.vds":{source:"iana",extensions:["vds"]},"model/vnd.usdz+zip":{source:"iana",compressible:!1,extensions:["usdz"]},"model/vnd.valve.source.compiled-map":{source:"iana",extensions:["bsp"]},"model/vnd.vtu":{source:"iana",extensions:["vtu"]},"model/vrml":{source:"iana",compressible:!1,extensions:["wrl","vrml"]},"model/x3d+binary":{source:"apache",compressible:!1,extensions:["x3db","x3dbz"]},"model/x3d+fastinfoset":{source:"iana",extensions:["x3db"]},"model/x3d+vrml":{source:"apache",compressible:!1,extensions:["x3dv","x3dvz"]},"model/x3d+xml":{source:"iana",compressible:!0,extensions:["x3d","x3dz"]},"model/x3d-vrml":{source:"iana",extensions:["x3dv"]},"multipart/alternative":{source:"iana",compressible:!1},"multipart/appledouble":{source:"iana"},"multipart/byteranges":{source:"iana"},"multipart/digest":{source:"iana"},"multipart/encrypted":{source:"iana",compressible:!1},"multipart/form-data":{source:"iana",compressible:!1},"multipart/header-set":{source:"iana"},"multipart/mixed":{source:"iana"},"multipart/multilingual":{source:"iana"},"multipart/parallel":{source:"iana"},"multipart/related":{source:"iana",compressible:!1},"multipart/report":{source:"iana"},"multipart/signed":{source:"iana",compressible:!1},"multipart/vnd.bint.med-plus":{source:"iana"},"multipart/voice-message":{source:"iana"},"multipart/x-mixed-replace":{source:"iana"},"text/1d-interleaved-parityfec":{source:"iana"},"text/cache-manifest":{source:"iana",compressible:!0,extensions:["appcache","manifest"]},"text/calendar":{source:"iana",extensions:["ics","ifb"]},"text/calender":{compressible:!0},"text/cmd":{compressible:!0},"text/coffeescript":{extensions:["coffee","litcoffee"]},"text/cql":{source:"iana"},"text/cql-expression":{source:"iana"},"text/cql-identifier":{source:"iana"},"text/css":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["css"]},"text/csv":{source:"iana",compressible:!0,extensions:["csv"]},"text/csv-schema":{source:"iana"},"text/directory":{source:"iana"},"text/dns":{source:"iana"},"text/ecmascript":{source:"iana"},"text/encaprtp":{source:"iana"},"text/enriched":{source:"iana"},"text/fhirpath":{source:"iana"},"text/flexfec":{source:"iana"},"text/fwdred":{source:"iana"},"text/gff3":{source:"iana"},"text/grammar-ref-list":{source:"iana"},"text/html":{source:"iana",compressible:!0,extensions:["html","htm","shtml"]},"text/jade":{extensions:["jade"]},"text/javascript":{source:"iana",compressible:!0},"text/jcr-cnd":{source:"iana"},"text/jsx":{compressible:!0,extensions:["jsx"]},"text/less":{compressible:!0,extensions:["less"]},"text/markdown":{source:"iana",compressible:!0,extensions:["markdown","md"]},"text/mathml":{source:"nginx",extensions:["mml"]},"text/mdx":{compressible:!0,extensions:["mdx"]},"text/mizar":{source:"iana"},"text/n3":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["n3"]},"text/parameters":{source:"iana",charset:"UTF-8"},"text/parityfec":{source:"iana"},"text/plain":{source:"iana",compressible:!0,extensions:["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{source:"iana",charset:"UTF-8"},"text/prs.fallenstein.rst":{source:"iana"},"text/prs.lines.tag":{source:"iana",extensions:["dsc"]},"text/prs.prop.logic":{source:"iana"},"text/raptorfec":{source:"iana"},"text/red":{source:"iana"},"text/rfc822-headers":{source:"iana"},"text/richtext":{source:"iana",compressible:!0,extensions:["rtx"]},"text/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"text/rtp-enc-aescm128":{source:"iana"},"text/rtploopback":{source:"iana"},"text/rtx":{source:"iana"},"text/sgml":{source:"iana",extensions:["sgml","sgm"]},"text/shaclc":{source:"iana"},"text/shex":{source:"iana",extensions:["shex"]},"text/slim":{extensions:["slim","slm"]},"text/spdx":{source:"iana",extensions:["spdx"]},"text/strings":{source:"iana"},"text/stylus":{extensions:["stylus","styl"]},"text/t140":{source:"iana"},"text/tab-separated-values":{source:"iana",compressible:!0,extensions:["tsv"]},"text/troff":{source:"iana",extensions:["t","tr","roff","man","me","ms"]},"text/turtle":{source:"iana",charset:"UTF-8",extensions:["ttl"]},"text/ulpfec":{source:"iana"},"text/uri-list":{source:"iana",compressible:!0,extensions:["uri","uris","urls"]},"text/vcard":{source:"iana",compressible:!0,extensions:["vcard"]},"text/vnd.a":{source:"iana"},"text/vnd.abc":{source:"iana"},"text/vnd.ascii-art":{source:"iana"},"text/vnd.curl":{source:"iana",extensions:["curl"]},"text/vnd.curl.dcurl":{source:"apache",extensions:["dcurl"]},"text/vnd.curl.mcurl":{source:"apache",extensions:["mcurl"]},"text/vnd.curl.scurl":{source:"apache",extensions:["scurl"]},"text/vnd.debian.copyright":{source:"iana",charset:"UTF-8"},"text/vnd.dmclientscript":{source:"iana"},"text/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"text/vnd.esmertec.theme-descriptor":{source:"iana",charset:"UTF-8"},"text/vnd.familysearch.gedcom":{source:"iana",extensions:["ged"]},"text/vnd.ficlab.flt":{source:"iana"},"text/vnd.fly":{source:"iana",extensions:["fly"]},"text/vnd.fmi.flexstor":{source:"iana",extensions:["flx"]},"text/vnd.gml":{source:"iana"},"text/vnd.graphviz":{source:"iana",extensions:["gv"]},"text/vnd.hans":{source:"iana"},"text/vnd.hgl":{source:"iana"},"text/vnd.in3d.3dml":{source:"iana",extensions:["3dml"]},"text/vnd.in3d.spot":{source:"iana",extensions:["spot"]},"text/vnd.iptc.newsml":{source:"iana"},"text/vnd.iptc.nitf":{source:"iana"},"text/vnd.latex-z":{source:"iana"},"text/vnd.motorola.reflex":{source:"iana"},"text/vnd.ms-mediapackage":{source:"iana"},"text/vnd.net2phone.commcenter.command":{source:"iana"},"text/vnd.radisys.msml-basic-layout":{source:"iana"},"text/vnd.senx.warpscript":{source:"iana"},"text/vnd.si.uricatalogue":{source:"iana"},"text/vnd.sosi":{source:"iana"},"text/vnd.sun.j2me.app-descriptor":{source:"iana",charset:"UTF-8",extensions:["jad"]},"text/vnd.trolltech.linguist":{source:"iana",charset:"UTF-8"},"text/vnd.wap.si":{source:"iana"},"text/vnd.wap.sl":{source:"iana"},"text/vnd.wap.wml":{source:"iana",extensions:["wml"]},"text/vnd.wap.wmlscript":{source:"iana",extensions:["wmls"]},"text/vtt":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["vtt"]},"text/x-asm":{source:"apache",extensions:["s","asm"]},"text/x-c":{source:"apache",extensions:["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{source:"nginx",extensions:["htc"]},"text/x-fortran":{source:"apache",extensions:["f","for","f77","f90"]},"text/x-gwt-rpc":{compressible:!0},"text/x-handlebars-template":{extensions:["hbs"]},"text/x-java-source":{source:"apache",extensions:["java"]},"text/x-jquery-tmpl":{compressible:!0},"text/x-lua":{extensions:["lua"]},"text/x-markdown":{compressible:!0,extensions:["mkd"]},"text/x-nfo":{source:"apache",extensions:["nfo"]},"text/x-opml":{source:"apache",extensions:["opml"]},"text/x-org":{compressible:!0,extensions:["org"]},"text/x-pascal":{source:"apache",extensions:["p","pas"]},"text/x-processing":{compressible:!0,extensions:["pde"]},"text/x-sass":{extensions:["sass"]},"text/x-scss":{extensions:["scss"]},"text/x-setext":{source:"apache",extensions:["etx"]},"text/x-sfv":{source:"apache",extensions:["sfv"]},"text/x-suse-ymp":{compressible:!0,extensions:["ymp"]},"text/x-uuencode":{source:"apache",extensions:["uu"]},"text/x-vcalendar":{source:"apache",extensions:["vcs"]},"text/x-vcard":{source:"apache",extensions:["vcf"]},"text/xml":{source:"iana",compressible:!0,extensions:["xml"]},"text/xml-external-parsed-entity":{source:"iana"},"text/yaml":{compressible:!0,extensions:["yaml","yml"]},"video/1d-interleaved-parityfec":{source:"iana"},"video/3gpp":{source:"iana",extensions:["3gp","3gpp"]},"video/3gpp-tt":{source:"iana"},"video/3gpp2":{source:"iana",extensions:["3g2"]},"video/av1":{source:"iana"},"video/bmpeg":{source:"iana"},"video/bt656":{source:"iana"},"video/celb":{source:"iana"},"video/dv":{source:"iana"},"video/encaprtp":{source:"iana"},"video/ffv1":{source:"iana"},"video/flexfec":{source:"iana"},"video/h261":{source:"iana",extensions:["h261"]},"video/h263":{source:"iana",extensions:["h263"]},"video/h263-1998":{source:"iana"},"video/h263-2000":{source:"iana"},"video/h264":{source:"iana",extensions:["h264"]},"video/h264-rcdo":{source:"iana"},"video/h264-svc":{source:"iana"},"video/h265":{source:"iana"},"video/iso.segment":{source:"iana",extensions:["m4s"]},"video/jpeg":{source:"iana",extensions:["jpgv"]},"video/jpeg2000":{source:"iana"},"video/jpm":{source:"apache",extensions:["jpm","jpgm"]},"video/jxsv":{source:"iana"},"video/mj2":{source:"iana",extensions:["mj2","mjp2"]},"video/mp1s":{source:"iana"},"video/mp2p":{source:"iana"},"video/mp2t":{source:"iana",extensions:["ts"]},"video/mp4":{source:"iana",compressible:!1,extensions:["mp4","mp4v","mpg4"]},"video/mp4v-es":{source:"iana"},"video/mpeg":{source:"iana",compressible:!1,extensions:["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{source:"iana"},"video/mpv":{source:"iana"},"video/nv":{source:"iana"},"video/ogg":{source:"iana",compressible:!1,extensions:["ogv"]},"video/parityfec":{source:"iana"},"video/pointer":{source:"iana"},"video/quicktime":{source:"iana",compressible:!1,extensions:["qt","mov"]},"video/raptorfec":{source:"iana"},"video/raw":{source:"iana"},"video/rtp-enc-aescm128":{source:"iana"},"video/rtploopback":{source:"iana"},"video/rtx":{source:"iana"},"video/scip":{source:"iana"},"video/smpte291":{source:"iana"},"video/smpte292m":{source:"iana"},"video/ulpfec":{source:"iana"},"video/vc1":{source:"iana"},"video/vc2":{source:"iana"},"video/vnd.cctv":{source:"iana"},"video/vnd.dece.hd":{source:"iana",extensions:["uvh","uvvh"]},"video/vnd.dece.mobile":{source:"iana",extensions:["uvm","uvvm"]},"video/vnd.dece.mp4":{source:"iana"},"video/vnd.dece.pd":{source:"iana",extensions:["uvp","uvvp"]},"video/vnd.dece.sd":{source:"iana",extensions:["uvs","uvvs"]},"video/vnd.dece.video":{source:"iana",extensions:["uvv","uvvv"]},"video/vnd.directv.mpeg":{source:"iana"},"video/vnd.directv.mpeg-tts":{source:"iana"},"video/vnd.dlna.mpeg-tts":{source:"iana"},"video/vnd.dvb.file":{source:"iana",extensions:["dvb"]},"video/vnd.fvt":{source:"iana",extensions:["fvt"]},"video/vnd.hns.video":{source:"iana"},"video/vnd.iptvforum.1dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.1dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.2dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.2dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.ttsavc":{source:"iana"},"video/vnd.iptvforum.ttsmpeg2":{source:"iana"},"video/vnd.motorola.video":{source:"iana"},"video/vnd.motorola.videop":{source:"iana"},"video/vnd.mpegurl":{source:"iana",extensions:["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{source:"iana",extensions:["pyv"]},"video/vnd.nokia.interleaved-multimedia":{source:"iana"},"video/vnd.nokia.mp4vr":{source:"iana"},"video/vnd.nokia.videovoip":{source:"iana"},"video/vnd.objectvideo":{source:"iana"},"video/vnd.radgamettools.bink":{source:"iana"},"video/vnd.radgamettools.smacker":{source:"iana"},"video/vnd.sealed.mpeg1":{source:"iana"},"video/vnd.sealed.mpeg4":{source:"iana"},"video/vnd.sealed.swf":{source:"iana"},"video/vnd.sealedmedia.softseal.mov":{source:"iana"},"video/vnd.uvvu.mp4":{source:"iana",extensions:["uvu","uvvu"]},"video/vnd.vivo":{source:"iana",extensions:["viv"]},"video/vnd.youtube.yt":{source:"iana"},"video/vp8":{source:"iana"},"video/vp9":{source:"iana"},"video/webm":{source:"apache",compressible:!1,extensions:["webm"]},"video/x-f4v":{source:"apache",extensions:["f4v"]},"video/x-fli":{source:"apache",extensions:["fli"]},"video/x-flv":{source:"apache",compressible:!1,extensions:["flv"]},"video/x-m4v":{source:"apache",extensions:["m4v"]},"video/x-matroska":{source:"apache",compressible:!1,extensions:["mkv","mk3d","mks"]},"video/x-mng":{source:"apache",extensions:["mng"]},"video/x-ms-asf":{source:"apache",extensions:["asf","asx"]},"video/x-ms-vob":{source:"apache",extensions:["vob"]},"video/x-ms-wm":{source:"apache",extensions:["wm"]},"video/x-ms-wmv":{source:"apache",compressible:!1,extensions:["wmv"]},"video/x-ms-wmx":{source:"apache",extensions:["wmx"]},"video/x-ms-wvx":{source:"apache",extensions:["wvx"]},"video/x-msvideo":{source:"apache",extensions:["avi"]},"video/x-sgi-movie":{source:"apache",extensions:["movie"]},"video/x-smv":{source:"apache",extensions:["smv"]},"x-conference/x-cooltalk":{source:"apache",extensions:["ice"]},"x-shader/x-fragment":{compressible:!0},"x-shader/x-vertex":{compressible:!0}}});var Gh=k((j2,Hh)=>{"use strict";Hh.exports=zh()});var Yh=k(We=>{"use strict";var Rn=Gh(),tC=require("path").extname,Vh=/^\s*([^;\s]*)(?:;|\s|$)/,iC=/^text\//i;We.charset=Xh;We.charsets={lookup:Xh};We.contentType=rC;We.extension=nC;We.extensions=Object.create(null);We.lookup=sC;We.types=Object.create(null);oC(We.extensions,We.types);function Xh(e){if(!e||typeof e!="string")return!1;var t=Vh.exec(e),i=t&&Rn[t[1].toLowerCase()];return i&&i.charset?i.charset:t&&iC.test(t[1])?"UTF-8":!1}function rC(e){if(!e||typeof e!="string")return!1;var t=e.indexOf("/")===-1?We.lookup(e):e;if(!t)return!1;if(t.indexOf("charset")===-1){var i=We.charset(t);i&&(t+="; charset="+i.toLowerCase())}return t}function nC(e){if(!e||typeof e!="string")return!1;var t=Vh.exec(e),i=t&&We.extensions[t[1].toLowerCase()];return!i||!i.length?!1:i[0]}function sC(e){if(!e||typeof e!="string")return!1;var t=tC("x."+e).toLowerCase().substr(1);return t&&We.types[t]||!1}function oC(e,t){var i=["nginx","apache",void 0,"iana"];Object.keys(Rn).forEach(function(n){var s=Rn[n],o=s.extensions;if(!(!o||!o.length)){e[n]=o;for(var a=0;a<o.length;a++){var c=o[a];if(t[c]){var u=i.indexOf(Rn[t[c]].source),f=i.indexOf(s.source);if(t[c]!=="application/octet-stream"&&(u>f||u===f&&t[c].substr(0,12)==="application/"))continue}t[c]=n}}})}});var Kh=k((q2,Wh)=>{"use strict";Wh.exports=aC;function aC(e){var t=typeof setImmediate=="function"?setImmediate:typeof process=="object"&&typeof process.nextTick=="function"?process.nextTick:null;t?t(e):setTimeout(e,0)}});var La=k((B2,Zh)=>{"use strict";var Jh=Kh();Zh.exports=cC;function cC(e){var t=!1;return Jh(function(){t=!0}),function(r,n){t?e(r,n):Jh(function(){e(r,n)})}}});var ka=k((U2,Qh)=>{"use strict";Qh.exports=uC;function uC(e){Object.keys(e.jobs).forEach(lC.bind(e)),e.jobs={}}function lC(e){typeof this.jobs[e]=="function"&&this.jobs[e]()}});var Ra=k(($2,tm)=>{"use strict";var em=La(),pC=ka();tm.exports=dC;function dC(e,t,i,r){var n=i.keyedList?i.keyedList[i.index]:i.index;i.jobs[n]=fC(t,n,e[n],function(s,o){n in i.jobs&&(delete i.jobs[n],s?pC(i):i.results[n]=o,r(s,i.results))})}function fC(e,t,i,r){var n;return e.length==2?n=e(i,em(r)):n=e(i,t,em(r)),n}});var Pa=k((z2,im)=>{"use strict";im.exports=hC;function hC(e,t){var i=!Array.isArray(e),r={index:0,keyedList:i||t?Object.keys(e):null,jobs:{},results:i?{}:[],size:i?Object.keys(e).length:e.length};return t&&r.keyedList.sort(i?t:function(n,s){return t(e[n],e[s])}),r}});var Fa=k((H2,rm)=>{"use strict";var mC=ka(),gC=La();rm.exports=xC;function xC(e){Object.keys(this.jobs).length&&(this.index=this.size,mC(this),gC(e)(null,this.results))}});var sm=k((G2,nm)=>{"use strict";var vC=Ra(),yC=Pa(),bC=Fa();nm.exports=wC;function wC(e,t,i){for(var r=yC(e);r.index<(r.keyedList||e).length;)vC(e,t,r,function(n,s){if(n){i(n,s);return}if(Object.keys(r.jobs).length===0){i(null,r.results);return}}),r.index++;return bC.bind(r,i)}});var ja=k((V2,Pn)=>{"use strict";var om=Ra(),EC=Pa(),_C=Fa();Pn.exports=TC;Pn.exports.ascending=am;Pn.exports.descending=SC;function TC(e,t,i,r){var n=EC(e,i);return om(e,t,n,function s(o,a){if(o){r(o,a);return}if(n.index++,n.index<(n.keyedList||e).length){om(e,t,n,s);return}r(null,n.results)}),_C.bind(n,r)}function am(e,t){return e<t?-1:e>t?1:0}function SC(e,t){return-1*am(e,t)}});var um=k((X2,cm)=>{"use strict";var CC=ja();cm.exports=OC;function OC(e,t,i){return CC(e,t,null,i)}});var pm=k((Y2,lm)=>{"use strict";lm.exports={parallel:sm(),serial:um(),serialOrdered:ja()}});var fm=k((W2,dm)=>{"use strict";dm.exports=function(e,t){return Object.keys(t).forEach(function(i){e[i]=e[i]||t[i]}),e}});var gm=k((K2,mm)=>{"use strict";var Ua=$h(),hm=require("util"),Ma=require("path"),AC=require("http"),DC=require("https"),IC=require("url").parse,NC=require("fs"),LC=require("stream").Stream,qa=Yh(),kC=pm(),Ba=fm();mm.exports=Q;hm.inherits(Q,Ua);function Q(e){if(!(this instanceof Q))return new Q(e);this._overheadLength=0,this._valueLength=0,this._valuesToMeasure=[],Ua.call(this),e=e||{};for(var t in e)this[t]=e[t]}Q.LINE_BREAK=`\r
`;Q.DEFAULT_CONTENT_TYPE="application/octet-stream";Q.prototype.append=function(e,t,i){i=i||{},typeof i=="string"&&(i={filename:i});var r=Ua.prototype.append.bind(this);if(typeof t=="number"&&(t=""+t),hm.isArray(t)){this._error(new Error("Arrays are not supported."));return}var n=this._multiPartHeader(e,t,i),s=this._multiPartFooter();r(n),r(t),r(s),this._trackLength(n,t,i)};Q.prototype._trackLength=function(e,t,i){var r=0;i.knownLength!=null?r+=+i.knownLength:Buffer.isBuffer(t)?r=t.length:typeof t=="string"&&(r=Buffer.byteLength(t)),this._valueLength+=r,this._overheadLength+=Buffer.byteLength(e)+Q.LINE_BREAK.length,!(!t||!t.path&&!(t.readable&&t.hasOwnProperty("httpVersion"))&&!(t instanceof LC))&&(i.knownLength||this._valuesToMeasure.push(t))};Q.prototype._lengthRetriever=function(e,t){e.hasOwnProperty("fd")?e.end!=null&&e.end!=1/0&&e.start!=null?t(null,e.end+1-(e.start?e.start:0)):NC.stat(e.path,function(i,r){var n;if(i){t(i);return}n=r.size-(e.start?e.start:0),t(null,n)}):e.hasOwnProperty("httpVersion")?t(null,+e.headers["content-length"]):e.hasOwnProperty("httpModule")?(e.on("response",function(i){e.pause(),t(null,+i.headers["content-length"])}),e.resume()):t("Unknown stream")};Q.prototype._multiPartHeader=function(e,t,i){if(typeof i.header=="string")return i.header;var r=this._getContentDisposition(t,i),n=this._getContentType(t,i),s="",o={"Content-Disposition":["form-data",'name="'+e+'"'].concat(r||[]),"Content-Type":[].concat(n||[])};typeof i.header=="object"&&Ba(o,i.header);var a;for(var c in o)o.hasOwnProperty(c)&&(a=o[c],a!=null&&(Array.isArray(a)||(a=[a]),a.length&&(s+=c+": "+a.join("; ")+Q.LINE_BREAK)));return"--"+this.getBoundary()+Q.LINE_BREAK+s+Q.LINE_BREAK};Q.prototype._getContentDisposition=function(e,t){var i,r;return typeof t.filepath=="string"?i=Ma.normalize(t.filepath).replace(/\\/g,"/"):t.filename||e.name||e.path?i=Ma.basename(t.filename||e.name||e.path):e.readable&&e.hasOwnProperty("httpVersion")&&(i=Ma.basename(e.client._httpMessage.path||"")),i&&(r='filename="'+i+'"'),r};Q.prototype._getContentType=function(e,t){var i=t.contentType;return!i&&e.name&&(i=qa.lookup(e.name)),!i&&e.path&&(i=qa.lookup(e.path)),!i&&e.readable&&e.hasOwnProperty("httpVersion")&&(i=e.headers["content-type"]),!i&&(t.filepath||t.filename)&&(i=qa.lookup(t.filepath||t.filename)),!i&&typeof e=="object"&&(i=Q.DEFAULT_CONTENT_TYPE),i};Q.prototype._multiPartFooter=function(){return function(e){var t=Q.LINE_BREAK,i=this._streams.length===0;i&&(t+=this._lastBoundary()),e(t)}.bind(this)};Q.prototype._lastBoundary=function(){return"--"+this.getBoundary()+"--"+Q.LINE_BREAK};Q.prototype.getHeaders=function(e){var t,i={"content-type":"multipart/form-data; boundary="+this.getBoundary()};for(t in e)e.hasOwnProperty(t)&&(i[t.toLowerCase()]=e[t]);return i};Q.prototype.setBoundary=function(e){this._boundary=e};Q.prototype.getBoundary=function(){return this._boundary||this._generateBoundary(),this._boundary};Q.prototype.getBuffer=function(){for(var e=new Buffer.alloc(0),t=this.getBoundary(),i=0,r=this._streams.length;i<r;i++)typeof this._streams[i]!="function"&&(Buffer.isBuffer(this._streams[i])?e=Buffer.concat([e,this._streams[i]]):e=Buffer.concat([e,Buffer.from(this._streams[i])]),(typeof this._streams[i]!="string"||this._streams[i].substring(2,t.length+2)!==t)&&(e=Buffer.concat([e,Buffer.from(Q.LINE_BREAK)])));return Buffer.concat([e,Buffer.from(this._lastBoundary())])};Q.prototype._generateBoundary=function(){for(var e="--------------------------",t=0;t<24;t++)e+=Math.floor(Math.random()*10).toString(16);this._boundary=e};Q.prototype.getLengthSync=function(){var e=this._overheadLength+this._valueLength;return this._streams.length&&(e+=this._lastBoundary().length),this.hasKnownLength()||this._error(new Error("Cannot calculate proper length in synchronous way.")),e};Q.prototype.hasKnownLength=function(){var e=!0;return this._valuesToMeasure.length&&(e=!1),e};Q.prototype.getLength=function(e){var t=this._overheadLength+this._valueLength;if(this._streams.length&&(t+=this._lastBoundary().length),!this._valuesToMeasure.length){process.nextTick(e.bind(this,null,t));return}kC.parallel(this._valuesToMeasure,this._lengthRetriever,function(i,r){if(i){e(i);return}r.forEach(function(n){t+=n}),e(null,t)})};Q.prototype.submit=function(e,t){var i,r,n={method:"post"};return typeof e=="string"?(e=IC(e),r=Ba({port:e.port,path:e.pathname,host:e.hostname,protocol:e.protocol},n)):(r=Ba(e,n),r.port||(r.port=r.protocol=="https:"?443:80)),r.headers=this.getHeaders(e.headers),r.protocol=="https:"?i=DC.request(r):i=AC.request(r),this.getLength(function(s,o){if(s&&s!=="Unknown stream"){this._error(s);return}if(o&&i.setHeader("Content-Length",o),this.pipe(i),t){var a,c=function(u,f){return i.removeListener("error",c),i.removeListener("response",a),t.call(this,u,f)};a=c.bind(this,null),i.on("error",c),i.on("response",a)}}.bind(this)),i};Q.prototype._error=function(e){this.error||(this.error=e,this.pause(),this.emit("error",e))};Q.prototype.toString=function(){return"[object FormData]"}});var Nm=k(Im=>{"use strict";var KC=require("url").parse,JC={ftp:21,gopher:70,http:80,https:443,ws:80,wss:443},ZC=String.prototype.endsWith||function(e){return e.length<=this.length&&this.indexOf(e,this.length-e.length)!==-1};function QC(e){var t=typeof e=="string"?KC(e):e||{},i=t.protocol,r=t.host,n=t.port;if(typeof r!="string"||!r||typeof i!="string"||(i=i.split(":",1)[0],r=r.replace(/:\d*$/,""),n=parseInt(n)||JC[i]||0,!eO(r,n)))return"";var s=Gi("npm_config_"+i+"_proxy")||Gi(i+"_proxy")||Gi("npm_config_proxy")||Gi("all_proxy");return s&&s.indexOf("://")===-1&&(s=i+"://"+s),s}function eO(e,t){var i=(Gi("npm_config_no_proxy")||Gi("no_proxy")).toLowerCase();return i?i==="*"?!1:i.split(/[,\s]/).every(function(r){if(!r)return!0;var n=r.match(/^(.+):(\d+)$/),s=n?n[1]:r,o=n?parseInt(n[2]):0;return o&&o!==t?!0:/^[.*]/.test(s)?(s.charAt(0)==="*"&&(s=s.slice(1)),!ZC.call(e,s)):e!==s}):!0}function Gi(e){return process.env[e.toLowerCase()]||process.env[e.toUpperCase()]||""}Im.getProxyForUrl=QC});var km=k((JF,Lm)=>{"use strict";var Vi=1e3,Xi=Vi*60,Yi=Xi*60,mi=Yi*24,tO=mi*7,iO=mi*365.25;Lm.exports=function(e,t){t=t||{};var i=typeof e;if(i==="string"&&e.length>0)return rO(e);if(i==="number"&&isFinite(e))return t.long?sO(e):nO(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))};function rO(e){if(e=String(e),!(e.length>100)){var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(t){var i=parseFloat(t[1]),r=(t[2]||"ms").toLowerCase();switch(r){case"years":case"year":case"yrs":case"yr":case"y":return i*iO;case"weeks":case"week":case"w":return i*tO;case"days":case"day":case"d":return i*mi;case"hours":case"hour":case"hrs":case"hr":case"h":return i*Yi;case"minutes":case"minute":case"mins":case"min":case"m":return i*Xi;case"seconds":case"second":case"secs":case"sec":case"s":return i*Vi;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return i;default:return}}}}function nO(e){var t=Math.abs(e);return t>=mi?Math.round(e/mi)+"d":t>=Yi?Math.round(e/Yi)+"h":t>=Xi?Math.round(e/Xi)+"m":t>=Vi?Math.round(e/Vi)+"s":e+"ms"}function sO(e){var t=Math.abs(e);return t>=mi?qn(e,t,mi,"day"):t>=Yi?qn(e,t,Yi,"hour"):t>=Xi?qn(e,t,Xi,"minute"):t>=Vi?qn(e,t,Vi,"second"):e+" ms"}function qn(e,t,i,r){var n=t>=i*1.5;return Math.round(e/i)+" "+r+(n?"s":"")}});var Za=k((ZF,Rm)=>{"use strict";function oO(e){i.debug=i,i.default=i,i.coerce=c,i.disable=s,i.enable=n,i.enabled=o,i.humanize=km(),i.destroy=u,Object.keys(e).forEach(f=>{i[f]=e[f]}),i.names=[],i.skips=[],i.formatters={};function t(f){let g=0;for(let x=0;x<f.length;x++)g=(g<<5)-g+f.charCodeAt(x),g|=0;return i.colors[Math.abs(g)%i.colors.length]}i.selectColor=t;function i(f){let g,x=null,l,m;function v(..._){if(!v.enabled)return;let E=v,w=Number(new Date),p=w-(g||w);E.diff=p,E.prev=g,E.curr=w,g=w,_[0]=i.coerce(_[0]),typeof _[0]!="string"&&_.unshift("%O");let d=0;_[0]=_[0].replace(/%([a-zA-Z%])/g,(b,O)=>{if(b==="%%")return"%";d++;let D=i.formatters[O];if(typeof D=="function"){let A=_[d];b=D.call(E,A),_.splice(d,1),d--}return b}),i.formatArgs.call(E,_),(E.log||i.log).apply(E,_)}return v.namespace=f,v.useColors=i.useColors(),v.color=i.selectColor(f),v.extend=r,v.destroy=i.destroy,Object.defineProperty(v,"enabled",{enumerable:!0,configurable:!1,get:()=>x!==null?x:(l!==i.namespaces&&(l=i.namespaces,m=i.enabled(f)),m),set:_=>{x=_}}),typeof i.init=="function"&&i.init(v),v}function r(f,g){let x=i(this.namespace+(typeof g>"u"?":":g)+f);return x.log=this.log,x}function n(f){i.save(f),i.namespaces=f,i.names=[],i.skips=[];let g,x=(typeof f=="string"?f:"").split(/[\s,]+/),l=x.length;for(g=0;g<l;g++)x[g]&&(f=x[g].replace(/\*/g,".*?"),f[0]==="-"?i.skips.push(new RegExp("^"+f.slice(1)+"$")):i.names.push(new RegExp("^"+f+"$")))}function s(){let f=[...i.names.map(a),...i.skips.map(a).map(g=>"-"+g)].join(",");return i.enable(""),f}function o(f){if(f[f.length-1]==="*")return!0;let g,x;for(g=0,x=i.skips.length;g<x;g++)if(i.skips[g].test(f))return!1;for(g=0,x=i.names.length;g<x;g++)if(i.names[g].test(f))return!0;return!1}function a(f){return f.toString().substring(2,f.toString().length-2).replace(/\.\*\?$/,"*")}function c(f){return f instanceof Error?f.stack||f.message:f}function u(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return i.enable(i.load()),i}Rm.exports=oO});var Pm=k((nt,Bn)=>{"use strict";nt.formatArgs=cO;nt.save=uO;nt.load=lO;nt.useColors=aO;nt.storage=pO();nt.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})();nt.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function aO(){return typeof window<"u"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs)?!0:typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)?!1:typeof document<"u"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window<"u"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function cO(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+Bn.exports.humanize(this.diff),!this.useColors)return;let t="color: "+this.color;e.splice(1,0,t,"color: inherit");let i=0,r=0;e[0].replace(/%[a-zA-Z%]/g,n=>{n!=="%%"&&(i++,n==="%c"&&(r=i))}),e.splice(r,0,t)}nt.log=console.debug||console.log||(()=>{});function uO(e){try{e?nt.storage.setItem("debug",e):nt.storage.removeItem("debug")}catch{}}function lO(){let e;try{e=nt.storage.getItem("debug")}catch{}return!e&&typeof process<"u"&&"env"in process&&(e=process.env.DEBUG),e}function pO(){try{return localStorage}catch{}}Bn.exports=Za()(nt);var{formatters:dO}=Bn.exports;dO.j=function(e){try{return JSON.stringify(e)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}});var jm=k((QF,Fm)=>{"use strict";Fm.exports=(e,t=process.argv)=>{let i=e.startsWith("-")?"":e.length===1?"-":"--",r=t.indexOf(i+e),n=t.indexOf("--");return r!==-1&&(n===-1||r<n)}});var Bm=k((ej,qm)=>{"use strict";var fO=require("os"),Mm=require("tty"),pt=jm(),{env:Fe}=process,Un;pt("no-color")||pt("no-colors")||pt("color=false")||pt("color=never")?Un=0:(pt("color")||pt("colors")||pt("color=true")||pt("color=always"))&&(Un=1);function hO(){if("FORCE_COLOR"in Fe)return Fe.FORCE_COLOR==="true"?1:Fe.FORCE_COLOR==="false"?0:Fe.FORCE_COLOR.length===0?1:Math.min(Number.parseInt(Fe.FORCE_COLOR,10),3)}function mO(e){return e===0?!1:{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}function gO(e,{streamIsTTY:t,sniffFlags:i=!0}={}){let r=hO();r!==void 0&&(Un=r);let n=i?Un:r;if(n===0)return 0;if(i){if(pt("color=16m")||pt("color=full")||pt("color=truecolor"))return 3;if(pt("color=256"))return 2}if(e&&!t&&n===void 0)return 0;let s=n||0;if(Fe.TERM==="dumb")return s;if(process.platform==="win32"){let o=fO.release().split(".");return Number(o[0])>=10&&Number(o[2])>=10586?Number(o[2])>=14931?3:2:1}if("CI"in Fe)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI","GITHUB_ACTIONS","BUILDKITE","DRONE"].some(o=>o in Fe)||Fe.CI_NAME==="codeship"?1:s;if("TEAMCITY_VERSION"in Fe)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(Fe.TEAMCITY_VERSION)?1:0;if(Fe.COLORTERM==="truecolor")return 3;if("TERM_PROGRAM"in Fe){let o=Number.parseInt((Fe.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(Fe.TERM_PROGRAM){case"iTerm.app":return o>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(Fe.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(Fe.TERM)||"COLORTERM"in Fe?1:s}function Qa(e,t={}){let i=gO(e,{streamIsTTY:e&&e.isTTY,...t});return mO(i)}qm.exports={supportsColor:Qa,stdout:Qa({isTTY:Mm.isatty(1)}),stderr:Qa({isTTY:Mm.isatty(2)})}});var $m=k((je,zn)=>{"use strict";var xO=require("tty"),$n=require("util");je.init=TO;je.log=wO;je.formatArgs=yO;je.save=EO;je.load=_O;je.useColors=vO;je.destroy=$n.deprecate(()=>{},"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");je.colors=[6,2,3,4,5,1];try{let e=Bm();e&&(e.stderr||e).level>=2&&(je.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch{}je.inspectOpts=Object.keys(process.env).filter(e=>/^debug_/i.test(e)).reduce((e,t)=>{let i=t.substring(6).toLowerCase().replace(/_([a-z])/g,(n,s)=>s.toUpperCase()),r=process.env[t];return/^(yes|on|true|enabled)$/i.test(r)?r=!0:/^(no|off|false|disabled)$/i.test(r)?r=!1:r==="null"?r=null:r=Number(r),e[i]=r,e},{});function vO(){return"colors"in je.inspectOpts?!!je.inspectOpts.colors:xO.isatty(process.stderr.fd)}function yO(e){let{namespace:t,useColors:i}=this;if(i){let r=this.color,n="\x1B[3"+(r<8?r:"8;5;"+r),s=`  ${n};1m${t} \x1B[0m`;e[0]=s+e[0].split(`
`).join(`
`+s),e.push(n+"m+"+zn.exports.humanize(this.diff)+"\x1B[0m")}else e[0]=bO()+t+" "+e[0]}function bO(){return je.inspectOpts.hideDate?"":new Date().toISOString()+" "}function wO(...e){return process.stderr.write($n.formatWithOptions(je.inspectOpts,...e)+`
`)}function EO(e){e?process.env.DEBUG=e:delete process.env.DEBUG}function _O(){return process.env.DEBUG}function TO(e){e.inspectOpts={};let t=Object.keys(je.inspectOpts);for(let i=0;i<t.length;i++)e.inspectOpts[t[i]]=je.inspectOpts[t[i]]}zn.exports=Za()(je);var{formatters:Um}=zn.exports;Um.o=function(e){return this.inspectOpts.colors=this.useColors,$n.inspect(e,this.inspectOpts).split(`
`).map(t=>t.trim()).join(" ")};Um.O=function(e){return this.inspectOpts.colors=this.useColors,$n.inspect(e,this.inspectOpts)}});var Hn=k((tj,ec)=>{"use strict";typeof process>"u"||process.type==="renderer"||process.browser===!0||process.__nwjs?ec.exports=Pm():ec.exports=$m()});var Hm=k((ij,zm)=>{"use strict";var Ar;zm.exports=function(){if(!Ar){try{Ar=Hn()("follow-redirects")}catch{}typeof Ar!="function"&&(Ar=function(){})}Ar.apply(null,arguments)}});var Wm=k((rj,dc)=>{"use strict";var Nr=require("url"),Dr=Nr.URL,SO=require("http"),CO=require("https"),sc=require("stream").Writable,oc=require("assert"),Gm=Hm(),ac=!1;try{oc(new Dr)}catch(e){ac=e.code==="ERR_INVALID_URL"}var OO=["auth","host","hostname","href","path","pathname","port","protocol","query","search","hash"],cc=["abort","aborted","connect","error","socket","timeout"],uc=Object.create(null);cc.forEach(function(e){uc[e]=function(t,i,r){this._redirectable.emit(e,t,i,r)}});var ic=Lr("ERR_INVALID_URL","Invalid URL",TypeError),rc=Lr("ERR_FR_REDIRECTION_FAILURE","Redirected request failed"),AO=Lr("ERR_FR_TOO_MANY_REDIRECTS","Maximum number of redirects exceeded",rc),DO=Lr("ERR_FR_MAX_BODY_LENGTH_EXCEEDED","Request body larger than maxBodyLength limit"),IO=Lr("ERR_STREAM_WRITE_AFTER_END","write after end"),NO=sc.prototype.destroy||Xm;function Ke(e,t){sc.call(this),this._sanitizeOptions(e),this._options=e,this._ended=!1,this._ending=!1,this._redirectCount=0,this._redirects=[],this._requestBodyLength=0,this._requestBodyBuffers=[],t&&this.on("response",t);var i=this;this._onNativeResponse=function(r){try{i._processResponse(r)}catch(n){i.emit("error",n instanceof rc?n:new rc({cause:n}))}},this._performRequest()}Ke.prototype=Object.create(sc.prototype);Ke.prototype.abort=function(){pc(this._currentRequest),this._currentRequest.abort(),this.emit("abort")};Ke.prototype.destroy=function(e){return pc(this._currentRequest,e),NO.call(this,e),this};Ke.prototype.write=function(e,t,i){if(this._ending)throw new IO;if(!gi(e)&&!RO(e))throw new TypeError("data should be a string, Buffer or Uint8Array");if(Ir(t)&&(i=t,t=null),e.length===0){i&&i();return}this._requestBodyLength+e.length<=this._options.maxBodyLength?(this._requestBodyLength+=e.length,this._requestBodyBuffers.push({data:e,encoding:t}),this._currentRequest.write(e,t,i)):(this.emit("error",new DO),this.abort())};Ke.prototype.end=function(e,t,i){if(Ir(e)?(i=e,e=t=null):Ir(t)&&(i=t,t=null),!e)this._ended=this._ending=!0,this._currentRequest.end(null,null,i);else{var r=this,n=this._currentRequest;this.write(e,t,function(){r._ended=!0,n.end(null,null,i)}),this._ending=!0}};Ke.prototype.setHeader=function(e,t){this._options.headers[e]=t,this._currentRequest.setHeader(e,t)};Ke.prototype.removeHeader=function(e){delete this._options.headers[e],this._currentRequest.removeHeader(e)};Ke.prototype.setTimeout=function(e,t){var i=this;function r(o){o.setTimeout(e),o.removeListener("timeout",o.destroy),o.addListener("timeout",o.destroy)}function n(o){i._timeout&&clearTimeout(i._timeout),i._timeout=setTimeout(function(){i.emit("timeout"),s()},e),r(o)}function s(){i._timeout&&(clearTimeout(i._timeout),i._timeout=null),i.removeListener("abort",s),i.removeListener("error",s),i.removeListener("response",s),i.removeListener("close",s),t&&i.removeListener("timeout",t),i.socket||i._currentRequest.removeListener("socket",n)}return t&&this.on("timeout",t),this.socket?n(this.socket):this._currentRequest.once("socket",n),this.on("socket",r),this.on("abort",s),this.on("error",s),this.on("response",s),this.on("close",s),this};["flushHeaders","getHeader","setNoDelay","setSocketKeepAlive"].forEach(function(e){Ke.prototype[e]=function(t,i){return this._currentRequest[e](t,i)}});["aborted","connection","socket"].forEach(function(e){Object.defineProperty(Ke.prototype,e,{get:function(){return this._currentRequest[e]}})});Ke.prototype._sanitizeOptions=function(e){if(e.headers||(e.headers={}),e.host&&(e.hostname||(e.hostname=e.host),delete e.host),!e.pathname&&e.path){var t=e.path.indexOf("?");t<0?e.pathname=e.path:(e.pathname=e.path.substring(0,t),e.search=e.path.substring(t))}};Ke.prototype._performRequest=function(){var e=this._options.protocol,t=this._options.nativeProtocols[e];if(!t)throw new TypeError("Unsupported protocol "+e);if(this._options.agents){var i=e.slice(0,-1);this._options.agent=this._options.agents[i]}var r=this._currentRequest=t.request(this._options,this._onNativeResponse);r._redirectable=this;for(var n of cc)r.on(n,uc[n]);if(this._currentUrl=/^\//.test(this._options.path)?Nr.format(this._options):this._options.path,this._isRedirect){var s=0,o=this,a=this._requestBodyBuffers;(function c(u){if(r===o._currentRequest)if(u)o.emit("error",u);else if(s<a.length){var f=a[s++];r.finished||r.write(f.data,f.encoding,c)}else o._ended&&r.end()})()}};Ke.prototype._processResponse=function(e){var t=e.statusCode;this._options.trackRedirects&&this._redirects.push({url:this._currentUrl,headers:e.headers,statusCode:t});var i=e.headers.location;if(!i||this._options.followRedirects===!1||t<300||t>=400){e.responseUrl=this._currentUrl,e.redirects=this._redirects,this.emit("response",e),this._requestBodyBuffers=[];return}if(pc(this._currentRequest),e.destroy(),++this._redirectCount>this._options.maxRedirects)throw new AO;var r,n=this._options.beforeRedirect;n&&(r=Object.assign({Host:e.req.getHeader("host")},this._options.headers));var s=this._options.method;((t===301||t===302)&&this._options.method==="POST"||t===303&&!/^(?:GET|HEAD)$/.test(this._options.method))&&(this._options.method="GET",this._requestBodyBuffers=[],tc(/^content-/i,this._options.headers));var o=tc(/^host$/i,this._options.headers),a=lc(this._currentUrl),c=o||a.host,u=/^\w+:/.test(i)?this._currentUrl:Nr.format(Object.assign(a,{host:c})),f=LO(i,u);if(Gm("redirecting to",f.href),this._isRedirect=!0,nc(f,this._options),(f.protocol!==a.protocol&&f.protocol!=="https:"||f.host!==c&&!kO(f.host,c))&&tc(/^(?:(?:proxy-)?authorization|cookie)$/i,this._options.headers),Ir(n)){var g={headers:e.headers,statusCode:t},x={url:u,method:s,headers:r};n(this._options,g,x),this._sanitizeOptions(this._options)}this._performRequest()};function Vm(e){var t={maxRedirects:21,maxBodyLength:10485760},i={};return Object.keys(e).forEach(function(r){var n=r+":",s=i[n]=e[r],o=t[r]=Object.create(s);function a(u,f,g){return PO(u)?u=nc(u):gi(u)?u=nc(lc(u)):(g=f,f=Ym(u),u={protocol:n}),Ir(f)&&(g=f,f=null),f=Object.assign({maxRedirects:t.maxRedirects,maxBodyLength:t.maxBodyLength},u,f),f.nativeProtocols=i,!gi(f.host)&&!gi(f.hostname)&&(f.hostname="::1"),oc.equal(f.protocol,n,"protocol mismatch"),Gm("options",f),new Ke(f,g)}function c(u,f,g){var x=o.request(u,f,g);return x.end(),x}Object.defineProperties(o,{request:{value:a,configurable:!0,enumerable:!0,writable:!0},get:{value:c,configurable:!0,enumerable:!0,writable:!0}})}),t}function Xm(){}function lc(e){var t;if(ac)t=new Dr(e);else if(t=Ym(Nr.parse(e)),!gi(t.protocol))throw new ic({input:e});return t}function LO(e,t){return ac?new Dr(e,t):lc(Nr.resolve(t,e))}function Ym(e){if(/^\[/.test(e.hostname)&&!/^\[[:0-9a-f]+\]$/i.test(e.hostname))throw new ic({input:e.href||e});if(/^\[/.test(e.host)&&!/^\[[:0-9a-f]+\](:\d+)?$/i.test(e.host))throw new ic({input:e.href||e});return e}function nc(e,t){var i=t||{};for(var r of OO)i[r]=e[r];return i.hostname.startsWith("[")&&(i.hostname=i.hostname.slice(1,-1)),i.port!==""&&(i.port=Number(i.port)),i.path=i.search?i.pathname+i.search:i.pathname,i}function tc(e,t){var i;for(var r in t)e.test(r)&&(i=t[r],delete t[r]);return i===null||typeof i>"u"?void 0:String(i).trim()}function Lr(e,t,i){function r(n){Error.captureStackTrace(this,this.constructor),Object.assign(this,n||{}),this.code=e,this.message=this.cause?t+": "+this.cause.message:t}return r.prototype=new(i||Error),Object.defineProperties(r.prototype,{constructor:{value:r,enumerable:!1},name:{value:"Error ["+e+"]",enumerable:!1}}),r}function pc(e,t){for(var i of cc)e.removeListener(i,uc[i]);e.on("error",Xm),e.destroy(t)}function kO(e,t){oc(gi(e)&&gi(t));var i=e.length-t.length-1;return i>0&&e[i]==="."&&e.endsWith(t)}function gi(e){return typeof e=="string"||e instanceof String}function Ir(e){return typeof e=="function"}function RO(e){return typeof e=="object"&&"length"in e}function PO(e){return Dr&&e instanceof Dr}dc.exports=Vm({http:SO,https:CO});dc.exports.wrap=Vm});var Ig=k(st=>{"use strict";var c1=st&&st.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(st,"__esModule",{value:!0});var u1=require("fs"),l1=c1(Hn()),Zi=l1.default("@kwsites/file-exists");function p1(e,t,i){Zi("checking %s",e);try{let r=u1.statSync(e);return r.isFile()&&t?(Zi("[OK] path represents a file"),!0):r.isDirectory()&&i?(Zi("[OK] path represents a directory"),!0):(Zi("[FAIL] path represents something other than a file or directory"),!1)}catch(r){if(r.code==="ENOENT")return Zi("[FAIL] path is not accessible: %o",r),!1;throw Zi("[FATAL] %o",r),r}}function d1(e,t=st.READABLE){return p1(e,(t&st.FILE)>0,(t&st.FOLDER)>0)}st.exists=d1;st.FILE=1;st.FOLDER=2;st.READABLE=st.FILE+st.FOLDER});var Ng=k(ts=>{"use strict";function f1(e){for(var t in e)ts.hasOwnProperty(t)||(ts[t]=e[t])}Object.defineProperty(ts,"__esModule",{value:!0});f1(Ig())});var Dc=k(yi=>{"use strict";Object.defineProperty(yi,"__esModule",{value:!0});yi.createDeferred=yi.deferred=void 0;function Ac(){let e,t,i="pending";return{promise:new Promise((n,s)=>{e=n,t=s}),done(n){i==="pending"&&(i="resolved",e(n))},fail(n){i==="pending"&&(i="rejected",t(n))},get fulfilled(){return i!=="pending"},get status(){return i}}}yi.deferred=Ac;yi.createDeferred=Ac;yi.default=Ac});var yy=k((T3,vy)=>{"use strict";vy.exports=xy;xy.sync=SI;var my=require("fs");function TI(e,t){var i=t.pathExt!==void 0?t.pathExt:process.env.PATHEXT;if(!i||(i=i.split(";"),i.indexOf("")!==-1))return!0;for(var r=0;r<i.length;r++){var n=i[r].toLowerCase();if(n&&e.substr(-n.length).toLowerCase()===n)return!0}return!1}function gy(e,t,i){return!e.isSymbolicLink()&&!e.isFile()?!1:TI(t,i)}function xy(e,t,i){my.stat(e,function(r,n){i(r,r?!1:gy(n,e,t))})}function SI(e,t){return gy(my.statSync(e),e,t)}});var Ty=k((S3,_y)=>{"use strict";_y.exports=wy;wy.sync=CI;var by=require("fs");function wy(e,t,i){by.stat(e,function(r,n){i(r,r?!1:Ey(n,t))})}function CI(e,t){return Ey(by.statSync(e),t)}function Ey(e,t){return e.isFile()&&OI(e,t)}function OI(e,t){var i=e.mode,r=e.uid,n=e.gid,s=t.uid!==void 0?t.uid:process.getuid&&process.getuid(),o=t.gid!==void 0?t.gid:process.getgid&&process.getgid(),a=parseInt("100",8),c=parseInt("010",8),u=parseInt("001",8),f=a|c,g=i&u||i&c&&n===o||i&a&&r===s||i&f&&s===0;return g}});var Cy=k((O3,Sy)=>{"use strict";var C3=require("fs"),Es;process.platform==="win32"||global.TESTING_WINDOWS?Es=yy():Es=Ty();Sy.exports=vu;vu.sync=AI;function vu(e,t,i){if(typeof t=="function"&&(i=t,t={}),!i){if(typeof Promise!="function")throw new TypeError("callback not provided");return new Promise(function(r,n){vu(e,t||{},function(s,o){s?n(s):r(o)})})}Es(e,t||{},function(r,n){r&&(r.code==="EACCES"||t&&t.ignoreErrors)&&(r=null,n=!1),i(r,n)})}function AI(e,t){try{return Es.sync(e,t||{})}catch(i){if(t&&t.ignoreErrors||i.code==="EACCES")return!1;throw i}}});var ky=k((A3,Ly)=>{"use strict";var ir=process.platform==="win32"||process.env.OSTYPE==="cygwin"||process.env.OSTYPE==="msys",Oy=require("path"),DI=ir?";":":",Ay=Cy(),Dy=e=>Object.assign(new Error(`not found: ${e}`),{code:"ENOENT"}),Iy=(e,t)=>{let i=t.colon||DI,r=e.match(/\//)||ir&&e.match(/\\/)?[""]:[...ir?[process.cwd()]:[],...(t.path||process.env.PATH||"").split(i)],n=ir?t.pathExt||process.env.PATHEXT||".EXE;.CMD;.BAT;.COM":"",s=ir?n.split(i):[""];return ir&&e.indexOf(".")!==-1&&s[0]!==""&&s.unshift(""),{pathEnv:r,pathExt:s,pathExtExe:n}},Ny=(e,t,i)=>{typeof t=="function"&&(i=t,t={}),t||(t={});let{pathEnv:r,pathExt:n,pathExtExe:s}=Iy(e,t),o=[],a=u=>new Promise((f,g)=>{if(u===r.length)return t.all&&o.length?f(o):g(Dy(e));let x=r[u],l=/^".*"$/.test(x)?x.slice(1,-1):x,m=Oy.join(l,e),v=!l&&/^\.[\\\/]/.test(e)?e.slice(0,2)+m:m;f(c(v,u,0))}),c=(u,f,g)=>new Promise((x,l)=>{if(g===n.length)return x(a(f+1));let m=n[g];Ay(u+m,{pathExt:s},(v,_)=>{if(!v&&_)if(t.all)o.push(u+m);else return x(u+m);return x(c(u,f,g+1))})});return i?a(0).then(u=>i(null,u),i):a(0)},II=(e,t)=>{t=t||{};let{pathEnv:i,pathExt:r,pathExtExe:n}=Iy(e,t),s=[];for(let o=0;o<i.length;o++){let a=i[o],c=/^".*"$/.test(a)?a.slice(1,-1):a,u=Oy.join(c,e),f=!c&&/^\.[\\\/]/.test(e)?e.slice(0,2)+u:u;for(let g=0;g<r.length;g++){let x=f+r[g];try{if(Ay.sync(x,{pathExt:n}))if(t.all)s.push(x);else return x}catch{}}}if(t.all&&s.length)return s;if(t.nothrow)return null;throw Dy(e)};Ly.exports=Ny;Ny.sync=II});var zy=k((I3,$y)=>{"use strict";function Py(e){return Array.isArray(e)?e:[e]}var _u="",Fy=" ",wu="\\",jI=/^\s+$/,MI=/(?:[^\\]|^)\\$/,qI=/^\\!/,BI=/^\\#/,UI=/\r?\n/g,$I=/^\.*\/|^\.+$/,Eu="/",qy="node-ignore";typeof Symbol<"u"&&(qy=Symbol.for("node-ignore"));var jy=qy,zI=(e,t,i)=>Object.defineProperty(e,t,{value:i}),HI=/([0-z])-([0-z])/g,By=()=>!1,GI=e=>e.replace(HI,(t,i,r)=>i.charCodeAt(0)<=r.charCodeAt(0)?t:_u),VI=e=>{let{length:t}=e;return e.slice(0,t-t%2)},XI=[[/^\uFEFF/,()=>_u],[/((?:\\\\)*?)(\\?\s+)$/,(e,t,i)=>t+(i.indexOf("\\")===0?Fy:_u)],[/(\\+?)\s/g,(e,t)=>{let{length:i}=t;return t.slice(0,i-i%2)+Fy}],[/[\\$.|*+(){^]/g,e=>`\\${e}`],[/(?!\\)\?/g,()=>"[^/]"],[/^\//,()=>"^"],[/\//g,()=>"\\/"],[/^\^*\\\*\\\*\\\//,()=>"^(?:.*\\/)?"],[/^(?=[^^])/,function(){return/\/(?!$)/.test(this)?"^":"(?:^|\\/)"}],[/\\\/\\\*\\\*(?=\\\/|$)/g,(e,t,i)=>t+6<i.length?"(?:\\/[^\\/]+)*":"\\/.+"],[/(^|[^\\]+)(\\\*)+(?=.+)/g,(e,t,i)=>{let r=i.replace(/\\\*/g,"[^\\/]*");return t+r}],[/\\\\\\(?=[$.|*+(){^])/g,()=>wu],[/\\\\/g,()=>wu],[/(\\)?\[([^\]/]*?)(\\*)($|\])/g,(e,t,i,r,n)=>t===wu?`\\[${i}${VI(r)}${n}`:n==="]"&&r.length%2===0?`[${GI(i)}${r}]`:"[]"],[/(?:[^*])$/,e=>/\/$/.test(e)?`${e}$`:`${e}(?=$|\\/$)`],[/(\^|\\\/)?\\\*$/,(e,t)=>`${t?`${t}[^/]+`:"[^/]*"}(?=$|\\/$)`]],My=Object.create(null),YI=(e,t)=>{let i=My[e];return i||(i=XI.reduce((r,[n,s])=>r.replace(n,s.bind(e)),e),My[e]=i),t?new RegExp(i,"i"):new RegExp(i)},Cu=e=>typeof e=="string",WI=e=>e&&Cu(e)&&!jI.test(e)&&!MI.test(e)&&e.indexOf("#")!==0,KI=e=>e.split(UI),Tu=class{constructor(t,i,r,n){this.origin=t,this.pattern=i,this.negative=r,this.regex=n}},JI=(e,t)=>{let i=e,r=!1;e.indexOf("!")===0&&(r=!0,e=e.substr(1)),e=e.replace(qI,"!").replace(BI,"#");let n=YI(e,t);return new Tu(i,e,r,n)},ZI=(e,t)=>{throw new t(e)},zt=(e,t,i)=>Cu(e)?e?zt.isNotRelative(e)?i(`path should be a \`path.relative()\`d string, but got "${t}"`,RangeError):!0:i("path must not be empty",TypeError):i(`path must be a string, but got \`${t}\``,TypeError),Uy=e=>$I.test(e);zt.isNotRelative=Uy;zt.convert=e=>e;var Su=class{constructor({ignorecase:t=!0,ignoreCase:i=t,allowRelativePaths:r=!1}={}){zI(this,jy,!0),this._rules=[],this._ignoreCase=i,this._allowRelativePaths=r,this._initCache()}_initCache(){this._ignoreCache=Object.create(null),this._testCache=Object.create(null)}_addPattern(t){if(t&&t[jy]){this._rules=this._rules.concat(t._rules),this._added=!0;return}if(WI(t)){let i=JI(t,this._ignoreCase);this._added=!0,this._rules.push(i)}}add(t){return this._added=!1,Py(Cu(t)?KI(t):t).forEach(this._addPattern,this),this._added&&this._initCache(),this}addPattern(t){return this.add(t)}_testOne(t,i){let r=!1,n=!1;return this._rules.forEach(s=>{let{negative:o}=s;if(n===o&&r!==n||o&&!r&&!n&&!i)return;s.regex.test(t)&&(r=!o,n=o)}),{ignored:r,unignored:n}}_test(t,i,r,n){let s=t&&zt.convert(t);return zt(s,t,this._allowRelativePaths?By:ZI),this._t(s,i,r,n)}_t(t,i,r,n){if(t in i)return i[t];if(n||(n=t.split(Eu)),n.pop(),!n.length)return i[t]=this._testOne(t,r);let s=this._t(n.join(Eu)+Eu,i,r,n);return i[t]=s.ignored?s:this._testOne(t,r)}ignores(t){return this._test(t,this._ignoreCache,!1).ignored}createFilter(){return t=>!this.ignores(t)}filter(t){return Py(t).filter(this.createFilter())}test(t){return this._test(t,this._testCache,!0)}},_s=e=>new Su(e),QI=e=>zt(e&&zt.convert(e),e,By);_s.isPathValid=QI;_s.default=_s;$y.exports=_s;if(typeof process<"u"&&(process.env&&process.env.IGNORE_TEST_WIN32||process.platform==="win32")){let e=i=>/^\\\\\?\\/.test(i)||/["<>|\u0000-\u001F]+/u.test(i)?i:i.replace(/\\/g,"/");zt.convert=e;let t=/^[a-z]:\//i;zt.isNotRelative=i=>t.test(i)||Uy(i)}});var Fs=k(Bu=>{"use strict";(function(){Bu.defaults={"0.1":{explicitCharkey:!1,trim:!0,normalize:!0,normalizeTags:!1,attrkey:"@",charkey:"#",explicitArray:!1,ignoreAttrs:!1,mergeAttrs:!1,explicitRoot:!1,validator:null,xmlns:!1,explicitChildren:!1,childkey:"@@",charsAsChildren:!1,includeWhiteChars:!1,async:!1,strict:!0,attrNameProcessors:null,attrValueProcessors:null,tagNameProcessors:null,valueProcessors:null,emptyTag:""},"0.2":{explicitCharkey:!1,trim:!1,normalize:!1,normalizeTags:!1,attrkey:"$",charkey:"_",explicitArray:!0,ignoreAttrs:!1,mergeAttrs:!1,explicitRoot:!0,validator:null,xmlns:!1,explicitChildren:!1,preserveChildrenOrder:!1,childkey:"$$",charsAsChildren:!1,includeWhiteChars:!1,async:!1,strict:!0,attrNameProcessors:null,attrValueProcessors:null,tagNameProcessors:null,valueProcessors:null,rootName:"root",xmldec:{version:"1.0",encoding:"UTF-8",standalone:!0},doctype:null,renderOpts:{pretty:!0,indent:"  ",newline:`
`},headless:!1,chunkSize:1e4,emptyTag:"",cdata:!1}}}).call(Bu)});var It=k((Fb,ai)=>{"use strict";(function(){var e,t,i,r,n,s,o,a=[].slice,c={}.hasOwnProperty;e=function(){var u,f,g,x,l,m;if(m=arguments[0],l=2<=arguments.length?a.call(arguments,1):[],n(Object.assign))Object.assign.apply(null,arguments);else for(u=0,g=l.length;u<g;u++)if(x=l[u],x!=null)for(f in x)c.call(x,f)&&(m[f]=x[f]);return m},n=function(u){return!!u&&Object.prototype.toString.call(u)==="[object Function]"},s=function(u){var f;return!!u&&((f=typeof u)=="function"||f==="object")},i=function(u){return n(Array.isArray)?Array.isArray(u):Object.prototype.toString.call(u)==="[object Array]"},r=function(u){var f;if(i(u))return!u.length;for(f in u)if(c.call(u,f))return!1;return!0},o=function(u){var f,g;return s(u)&&(g=Object.getPrototypeOf(u))&&(f=g.constructor)&&typeof f=="function"&&f instanceof f&&Function.prototype.toString.call(f)===Function.prototype.toString.call(Object)},t=function(u){return n(u.valueOf)?u.valueOf():u},ai.exports.assign=e,ai.exports.isFunction=n,ai.exports.isObject=s,ai.exports.isArray=i,ai.exports.isEmpty=r,ai.exports.isPlainObject=o,ai.exports.getValue=t}).call(Fb)});var Uu=k((jb,Mb)=>{"use strict";(function(){var e;Mb.exports=e=function(){function t(){}return t.prototype.hasFeature=function(i,r){return!0},t.prototype.createDocumentType=function(i,r,n){throw new Error("This DOM method is not implemented.")},t.prototype.createDocument=function(i,r,n){throw new Error("This DOM method is not implemented.")},t.prototype.createHTMLDocument=function(i){throw new Error("This DOM method is not implemented.")},t.prototype.getFeature=function(i,r){throw new Error("This DOM method is not implemented.")},t}()}).call(jb)});var Ub=k((qb,Bb)=>{"use strict";(function(){var e;Bb.exports=e=function(){function t(){}return t.prototype.handleError=function(i){throw new Error(i)},t}()}).call(qb)});var Hb=k(($b,zb)=>{"use strict";(function(){var e;zb.exports=e=function(){function t(i){this.arr=i||[]}return Object.defineProperty(t.prototype,"length",{get:function(){return this.arr.length}}),t.prototype.item=function(i){return this.arr[i]||null},t.prototype.contains=function(i){return this.arr.indexOf(i)!==-1},t}()}).call($b)});var Xb=k((Gb,Vb)=>{"use strict";(function(){var e,t,i;t=Ub(),i=Hb(),Vb.exports=e=function(){function r(){var n;this.defaultParams={"canonical-form":!1,"cdata-sections":!1,comments:!1,"datatype-normalization":!1,"element-content-whitespace":!0,entities:!0,"error-handler":new t,infoset:!0,"validate-if-schema":!1,namespaces:!0,"namespace-declarations":!0,"normalize-characters":!1,"schema-location":"","schema-type":"","split-cdata-sections":!0,validate:!1,"well-formed":!0},this.params=n=Object.create(this.defaultParams)}return Object.defineProperty(r.prototype,"parameterNames",{get:function(){return new i(Object.keys(this.defaultParams))}}),r.prototype.getParameter=function(n){return this.params.hasOwnProperty(n)?this.params[n]:null},r.prototype.canSetParameter=function(n,s){return!0},r.prototype.setParameter=function(n,s){return s!=null?this.params[n]=s:delete this.params[n]},r}()}).call(Gb)});var Ce=k((Yb,Wb)=>{"use strict";(function(){Wb.exports={Element:1,Attribute:2,Text:3,CData:4,EntityReference:5,EntityDeclaration:6,ProcessingInstruction:7,Comment:8,Document:9,DocType:10,DocumentFragment:11,NotationDeclaration:12,Declaration:201,Raw:202,AttributeDeclaration:203,ElementDeclaration:204,Dummy:205}}).call(Yb)});var $u=k((Kb,Jb)=>{"use strict";(function(){var e,t,i;e=Ce(),i=ct(),Jb.exports=t=function(){function r(n,s,o){if(this.parent=n,this.parent&&(this.options=this.parent.options,this.stringify=this.parent.stringify),s==null)throw new Error("Missing attribute name. "+this.debugInfo(s));this.name=this.stringify.name(s),this.value=this.stringify.attValue(o),this.type=e.Attribute,this.isId=!1,this.schemaTypeInfo=null}return Object.defineProperty(r.prototype,"nodeType",{get:function(){return this.type}}),Object.defineProperty(r.prototype,"ownerElement",{get:function(){return this.parent}}),Object.defineProperty(r.prototype,"textContent",{get:function(){return this.value},set:function(n){return this.value=n||""}}),Object.defineProperty(r.prototype,"namespaceURI",{get:function(){return""}}),Object.defineProperty(r.prototype,"prefix",{get:function(){return""}}),Object.defineProperty(r.prototype,"localName",{get:function(){return this.name}}),Object.defineProperty(r.prototype,"specified",{get:function(){return!0}}),r.prototype.clone=function(){return Object.create(this)},r.prototype.toString=function(n){return this.options.writer.attribute(this,this.options.writer.filterOptions(n))},r.prototype.debugInfo=function(n){return n=n||this.name,n==null?"parent: <"+this.parent.name+">":"attribute: {"+n+"}, parent: <"+this.parent.name+">"},r.prototype.isEqualNode=function(n){return!(n.namespaceURI!==this.namespaceURI||n.prefix!==this.prefix||n.localName!==this.localName||n.value!==this.value)},r}()}).call(Kb)});var js=k((Zb,Qb)=>{"use strict";(function(){var e;Qb.exports=e=function(){function t(i){this.nodes=i}return Object.defineProperty(t.prototype,"length",{get:function(){return Object.keys(this.nodes).length||0}}),t.prototype.clone=function(){return this.nodes=null},t.prototype.getNamedItem=function(i){return this.nodes[i]},t.prototype.setNamedItem=function(i){var r;return r=this.nodes[i.nodeName],this.nodes[i.nodeName]=i,r||null},t.prototype.removeNamedItem=function(i){var r;return r=this.nodes[i],delete this.nodes[i],r||null},t.prototype.item=function(i){return this.nodes[Object.keys(this.nodes)[i]]||null},t.prototype.getNamedItemNS=function(i,r){throw new Error("This DOM method is not implemented.")},t.prototype.setNamedItemNS=function(i){throw new Error("This DOM method is not implemented.")},t.prototype.removeNamedItemNS=function(i,r){throw new Error("This DOM method is not implemented.")},t}()}).call(Zb)});var Ms=k((ew,tw)=>{"use strict";(function(){var e,t,i,r,n,s,o,a,c,u=function(g,x){for(var l in x)f.call(x,l)&&(g[l]=x[l]);function m(){this.constructor=g}return m.prototype=x.prototype,g.prototype=new m,g.__super__=x.prototype,g},f={}.hasOwnProperty;c=It(),a=c.isObject,o=c.isFunction,s=c.getValue,n=ct(),e=Ce(),t=$u(),r=js(),tw.exports=i=function(g){u(x,g);function x(l,m,v){var _,E,w,p;if(x.__super__.constructor.call(this,l),m==null)throw new Error("Missing element name. "+this.debugInfo());if(this.name=this.stringify.name(m),this.type=e.Element,this.attribs={},this.schemaTypeInfo=null,v!=null&&this.attribute(v),l.type===e.Document&&(this.isRoot=!0,this.documentObject=l,l.rootObject=this,l.children)){for(p=l.children,E=0,w=p.length;E<w;E++)if(_=p[E],_.type===e.DocType){_.name=this.name;break}}}return Object.defineProperty(x.prototype,"tagName",{get:function(){return this.name}}),Object.defineProperty(x.prototype,"namespaceURI",{get:function(){return""}}),Object.defineProperty(x.prototype,"prefix",{get:function(){return""}}),Object.defineProperty(x.prototype,"localName",{get:function(){return this.name}}),Object.defineProperty(x.prototype,"id",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(x.prototype,"className",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(x.prototype,"classList",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(x.prototype,"attributes",{get:function(){return(!this.attributeMap||!this.attributeMap.nodes)&&(this.attributeMap=new r(this.attribs)),this.attributeMap}}),x.prototype.clone=function(){var l,m,v,_;v=Object.create(this),v.isRoot&&(v.documentObject=null),v.attribs={},_=this.attribs;for(m in _)f.call(_,m)&&(l=_[m],v.attribs[m]=l.clone());return v.children=[],this.children.forEach(function(E){var w;return w=E.clone(),w.parent=v,v.children.push(w)}),v},x.prototype.attribute=function(l,m){var v,_;if(l!=null&&(l=s(l)),a(l))for(v in l)f.call(l,v)&&(_=l[v],this.attribute(v,_));else o(m)&&(m=m.apply()),this.options.keepNullAttributes&&m==null?this.attribs[l]=new t(this,l,""):m!=null&&(this.attribs[l]=new t(this,l,m));return this},x.prototype.removeAttribute=function(l){var m,v,_;if(l==null)throw new Error("Missing attribute name. "+this.debugInfo());if(l=s(l),Array.isArray(l))for(v=0,_=l.length;v<_;v++)m=l[v],delete this.attribs[m];else delete this.attribs[l];return this},x.prototype.toString=function(l){return this.options.writer.element(this,this.options.writer.filterOptions(l))},x.prototype.att=function(l,m){return this.attribute(l,m)},x.prototype.a=function(l,m){return this.attribute(l,m)},x.prototype.getAttribute=function(l){return this.attribs.hasOwnProperty(l)?this.attribs[l].value:null},x.prototype.setAttribute=function(l,m){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getAttributeNode=function(l){return this.attribs.hasOwnProperty(l)?this.attribs[l]:null},x.prototype.setAttributeNode=function(l){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.removeAttributeNode=function(l){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getElementsByTagName=function(l){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getAttributeNS=function(l,m){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.setAttributeNS=function(l,m,v){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.removeAttributeNS=function(l,m){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getAttributeNodeNS=function(l,m){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.setAttributeNodeNS=function(l){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getElementsByTagNameNS=function(l,m){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.hasAttribute=function(l){return this.attribs.hasOwnProperty(l)},x.prototype.hasAttributeNS=function(l,m){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.setIdAttribute=function(l,m){return this.attribs.hasOwnProperty(l)?this.attribs[l].isId:m},x.prototype.setIdAttributeNS=function(l,m,v){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.setIdAttributeNode=function(l,m){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getElementsByTagName=function(l){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getElementsByTagNameNS=function(l,m){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getElementsByClassName=function(l){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.isEqualNode=function(l){var m,v,_;if(!x.__super__.isEqualNode.apply(this,arguments).isEqualNode(l)||l.namespaceURI!==this.namespaceURI||l.prefix!==this.prefix||l.localName!==this.localName||l.attribs.length!==this.attribs.length)return!1;for(m=v=0,_=this.attribs.length-1;0<=_?v<=_:v>=_;m=0<=_?++v:--v)if(!this.attribs[m].isEqualNode(l.attribs[m]))return!1;return!0},x}(n)}).call(ew)});var en=k((iw,rw)=>{"use strict";(function(){var e,t,i=function(n,s){for(var o in s)r.call(s,o)&&(n[o]=s[o]);function a(){this.constructor=n}return a.prototype=s.prototype,n.prototype=new a,n.__super__=s.prototype,n},r={}.hasOwnProperty;t=ct(),rw.exports=e=function(n){i(s,n);function s(o){s.__super__.constructor.call(this,o),this.value=""}return Object.defineProperty(s.prototype,"data",{get:function(){return this.value},set:function(o){return this.value=o||""}}),Object.defineProperty(s.prototype,"length",{get:function(){return this.value.length}}),Object.defineProperty(s.prototype,"textContent",{get:function(){return this.value},set:function(o){return this.value=o||""}}),s.prototype.clone=function(){return Object.create(this)},s.prototype.substringData=function(o,a){throw new Error("This DOM method is not implemented."+this.debugInfo())},s.prototype.appendData=function(o){throw new Error("This DOM method is not implemented."+this.debugInfo())},s.prototype.insertData=function(o,a){throw new Error("This DOM method is not implemented."+this.debugInfo())},s.prototype.deleteData=function(o,a){throw new Error("This DOM method is not implemented."+this.debugInfo())},s.prototype.replaceData=function(o,a,c){throw new Error("This DOM method is not implemented."+this.debugInfo())},s.prototype.isEqualNode=function(o){return!(!s.__super__.isEqualNode.apply(this,arguments).isEqualNode(o)||o.data!==this.data)},s}(t)}).call(iw)});var qs=k((nw,sw)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;e=Ce(),i=en(),sw.exports=t=function(s){r(o,s);function o(a,c){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing CDATA text. "+this.debugInfo());this.name="#cdata-section",this.type=e.CData,this.value=this.stringify.cdata(c)}return o.prototype.clone=function(){return Object.create(this)},o.prototype.toString=function(a){return this.options.writer.cdata(this,this.options.writer.filterOptions(a))},o}(i)}).call(nw)});var Bs=k((ow,aw)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;e=Ce(),t=en(),aw.exports=i=function(s){r(o,s);function o(a,c){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing comment text. "+this.debugInfo());this.name="#comment",this.type=e.Comment,this.value=this.stringify.comment(c)}return o.prototype.clone=function(){return Object.create(this)},o.prototype.toString=function(a){return this.options.writer.comment(this,this.options.writer.filterOptions(a))},o}(t)}).call(ow)});var Us=k((cw,uw)=>{"use strict";(function(){var e,t,i,r,n=function(o,a){for(var c in a)s.call(a,c)&&(o[c]=a[c]);function u(){this.constructor=o}return u.prototype=a.prototype,o.prototype=new u,o.__super__=a.prototype,o},s={}.hasOwnProperty;r=It().isObject,i=ct(),e=Ce(),uw.exports=t=function(o){n(a,o);function a(c,u,f,g){var x;a.__super__.constructor.call(this,c),r(u)&&(x=u,u=x.version,f=x.encoding,g=x.standalone),u||(u="1.0"),this.type=e.Declaration,this.version=this.stringify.xmlVersion(u),f!=null&&(this.encoding=this.stringify.xmlEncoding(f)),g!=null&&(this.standalone=this.stringify.xmlStandalone(g))}return a.prototype.toString=function(c){return this.options.writer.declaration(this,this.options.writer.filterOptions(c))},a}(i)}).call(cw)});var $s=k((lw,pw)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;i=ct(),e=Ce(),pw.exports=t=function(s){r(o,s);function o(a,c,u,f,g,x){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing DTD element name. "+this.debugInfo());if(u==null)throw new Error("Missing DTD attribute name. "+this.debugInfo(c));if(!f)throw new Error("Missing DTD attribute type. "+this.debugInfo(c));if(!g)throw new Error("Missing DTD attribute default. "+this.debugInfo(c));if(g.indexOf("#")!==0&&(g="#"+g),!g.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/))throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. "+this.debugInfo(c));if(x&&!g.match(/^(#FIXED|#DEFAULT)$/))throw new Error("Default value only applies to #FIXED or #DEFAULT. "+this.debugInfo(c));this.elementName=this.stringify.name(c),this.type=e.AttributeDeclaration,this.attributeName=this.stringify.name(u),this.attributeType=this.stringify.dtdAttType(f),x&&(this.defaultValue=this.stringify.dtdAttDefault(x)),this.defaultValueType=g}return o.prototype.toString=function(a){return this.options.writer.dtdAttList(this,this.options.writer.filterOptions(a))},o}(i)}).call(lw)});var zs=k((dw,fw)=>{"use strict";(function(){var e,t,i,r,n=function(o,a){for(var c in a)s.call(a,c)&&(o[c]=a[c]);function u(){this.constructor=o}return u.prototype=a.prototype,o.prototype=new u,o.__super__=a.prototype,o},s={}.hasOwnProperty;r=It().isObject,i=ct(),e=Ce(),fw.exports=t=function(o){n(a,o);function a(c,u,f,g){if(a.__super__.constructor.call(this,c),f==null)throw new Error("Missing DTD entity name. "+this.debugInfo(f));if(g==null)throw new Error("Missing DTD entity value. "+this.debugInfo(f));if(this.pe=!!u,this.name=this.stringify.name(f),this.type=e.EntityDeclaration,!r(g))this.value=this.stringify.dtdEntityValue(g),this.internal=!0;else{if(!g.pubID&&!g.sysID)throw new Error("Public and/or system identifiers are required for an external entity. "+this.debugInfo(f));if(g.pubID&&!g.sysID)throw new Error("System identifier is required for a public external entity. "+this.debugInfo(f));if(this.internal=!1,g.pubID!=null&&(this.pubID=this.stringify.dtdPubID(g.pubID)),g.sysID!=null&&(this.sysID=this.stringify.dtdSysID(g.sysID)),g.nData!=null&&(this.nData=this.stringify.dtdNData(g.nData)),this.pe&&this.nData)throw new Error("Notation declaration is not allowed in a parameter entity. "+this.debugInfo(f))}}return Object.defineProperty(a.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(a.prototype,"systemId",{get:function(){return this.sysID}}),Object.defineProperty(a.prototype,"notationName",{get:function(){return this.nData||null}}),Object.defineProperty(a.prototype,"inputEncoding",{get:function(){return null}}),Object.defineProperty(a.prototype,"xmlEncoding",{get:function(){return null}}),Object.defineProperty(a.prototype,"xmlVersion",{get:function(){return null}}),a.prototype.toString=function(c){return this.options.writer.dtdEntity(this,this.options.writer.filterOptions(c))},a}(i)}).call(dw)});var Hs=k((hw,mw)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;i=ct(),e=Ce(),mw.exports=t=function(s){r(o,s);function o(a,c,u){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing DTD element name. "+this.debugInfo());u||(u="(#PCDATA)"),Array.isArray(u)&&(u="("+u.join(",")+")"),this.name=this.stringify.name(c),this.type=e.ElementDeclaration,this.value=this.stringify.dtdElementValue(u)}return o.prototype.toString=function(a){return this.options.writer.dtdElement(this,this.options.writer.filterOptions(a))},o}(i)}).call(hw)});var Gs=k((gw,xw)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;i=ct(),e=Ce(),xw.exports=t=function(s){r(o,s);function o(a,c,u){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing DTD notation name. "+this.debugInfo(c));if(!u.pubID&&!u.sysID)throw new Error("Public or system identifiers are required for an external entity. "+this.debugInfo(c));this.name=this.stringify.name(c),this.type=e.NotationDeclaration,u.pubID!=null&&(this.pubID=this.stringify.dtdPubID(u.pubID)),u.sysID!=null&&(this.sysID=this.stringify.dtdSysID(u.sysID))}return Object.defineProperty(o.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(o.prototype,"systemId",{get:function(){return this.sysID}}),o.prototype.toString=function(a){return this.options.writer.dtdNotation(this,this.options.writer.filterOptions(a))},o}(i)}).call(gw)});var Vs=k((vw,yw)=>{"use strict";(function(){var e,t,i,r,n,s,o,a,c,u=function(g,x){for(var l in x)f.call(x,l)&&(g[l]=x[l]);function m(){this.constructor=g}return m.prototype=x.prototype,g.prototype=new m,g.__super__=x.prototype,g},f={}.hasOwnProperty;c=It().isObject,a=ct(),e=Ce(),t=$s(),r=zs(),i=Hs(),n=Gs(),o=js(),yw.exports=s=function(g){u(x,g);function x(l,m,v){var _,E,w,p,d,h;if(x.__super__.constructor.call(this,l),this.type=e.DocType,l.children){for(p=l.children,E=0,w=p.length;E<w;E++)if(_=p[E],_.type===e.Element){this.name=_.name;break}}this.documentObject=l,c(m)&&(d=m,m=d.pubID,v=d.sysID),v==null&&(h=[m,v],v=h[0],m=h[1]),m!=null&&(this.pubID=this.stringify.dtdPubID(m)),v!=null&&(this.sysID=this.stringify.dtdSysID(v))}return Object.defineProperty(x.prototype,"entities",{get:function(){var l,m,v,_,E;for(_={},E=this.children,m=0,v=E.length;m<v;m++)l=E[m],l.type===e.EntityDeclaration&&!l.pe&&(_[l.name]=l);return new o(_)}}),Object.defineProperty(x.prototype,"notations",{get:function(){var l,m,v,_,E;for(_={},E=this.children,m=0,v=E.length;m<v;m++)l=E[m],l.type===e.NotationDeclaration&&(_[l.name]=l);return new o(_)}}),Object.defineProperty(x.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(x.prototype,"systemId",{get:function(){return this.sysID}}),Object.defineProperty(x.prototype,"internalSubset",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),x.prototype.element=function(l,m){var v;return v=new i(this,l,m),this.children.push(v),this},x.prototype.attList=function(l,m,v,_,E){var w;return w=new t(this,l,m,v,_,E),this.children.push(w),this},x.prototype.entity=function(l,m){var v;return v=new r(this,!1,l,m),this.children.push(v),this},x.prototype.pEntity=function(l,m){var v;return v=new r(this,!0,l,m),this.children.push(v),this},x.prototype.notation=function(l,m){var v;return v=new n(this,l,m),this.children.push(v),this},x.prototype.toString=function(l){return this.options.writer.docType(this,this.options.writer.filterOptions(l))},x.prototype.ele=function(l,m){return this.element(l,m)},x.prototype.att=function(l,m,v,_,E){return this.attList(l,m,v,_,E)},x.prototype.ent=function(l,m){return this.entity(l,m)},x.prototype.pent=function(l,m){return this.pEntity(l,m)},x.prototype.not=function(l,m){return this.notation(l,m)},x.prototype.up=function(){return this.root()||this.documentObject},x.prototype.isEqualNode=function(l){return!(!x.__super__.isEqualNode.apply(this,arguments).isEqualNode(l)||l.name!==this.name||l.publicId!==this.publicId||l.systemId!==this.systemId)},x}(a)}).call(vw)});var Xs=k((bw,ww)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;e=Ce(),t=ct(),ww.exports=i=function(s){r(o,s);function o(a,c){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing raw text. "+this.debugInfo());this.type=e.Raw,this.value=this.stringify.raw(c)}return o.prototype.clone=function(){return Object.create(this)},o.prototype.toString=function(a){return this.options.writer.raw(this,this.options.writer.filterOptions(a))},o}(t)}).call(bw)});var Ys=k((Ew,_w)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;e=Ce(),t=en(),_w.exports=i=function(s){r(o,s);function o(a,c){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing element text. "+this.debugInfo());this.name="#text",this.type=e.Text,this.value=this.stringify.text(c)}return Object.defineProperty(o.prototype,"isElementContentWhitespace",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(o.prototype,"wholeText",{get:function(){var a,c,u;for(u="",c=this.previousSibling;c;)u=c.data+u,c=c.previousSibling;for(u+=this.data,a=this.nextSibling;a;)u=u+a.data,a=a.nextSibling;return u}}),o.prototype.clone=function(){return Object.create(this)},o.prototype.toString=function(a){return this.options.writer.text(this,this.options.writer.filterOptions(a))},o.prototype.splitText=function(a){throw new Error("This DOM method is not implemented."+this.debugInfo())},o.prototype.replaceWholeText=function(a){throw new Error("This DOM method is not implemented."+this.debugInfo())},o}(t)}).call(Ew)});var Ws=k((Tw,Sw)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;e=Ce(),t=en(),Sw.exports=i=function(s){r(o,s);function o(a,c,u){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing instruction target. "+this.debugInfo());this.type=e.ProcessingInstruction,this.target=this.stringify.insTarget(c),this.name=this.target,u&&(this.value=this.stringify.insValue(u))}return o.prototype.clone=function(){return Object.create(this)},o.prototype.toString=function(a){return this.options.writer.processingInstruction(this,this.options.writer.filterOptions(a))},o.prototype.isEqualNode=function(a){return!(!o.__super__.isEqualNode.apply(this,arguments).isEqualNode(a)||a.target!==this.target)},o}(t)}).call(Tw)});var zu=k((Cw,Ow)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;i=ct(),e=Ce(),Ow.exports=t=function(s){r(o,s);function o(a){o.__super__.constructor.call(this,a),this.type=e.Dummy}return o.prototype.clone=function(){return Object.create(this)},o.prototype.toString=function(a){return""},o}(i)}).call(Cw)});var Iw=k((Aw,Dw)=>{"use strict";(function(){var e;Dw.exports=e=function(){function t(i){this.nodes=i}return Object.defineProperty(t.prototype,"length",{get:function(){return this.nodes.length||0}}),t.prototype.clone=function(){return this.nodes=null},t.prototype.item=function(i){return this.nodes[i]||null},t}()}).call(Aw)});var kw=k((Nw,Lw)=>{"use strict";(function(){Lw.exports={Disconnected:1,Preceding:2,Following:4,Contains:8,ContainedBy:16,ImplementationSpecific:32}}).call(Nw)});var ct=k((Rw,Pw)=>{"use strict";(function(){var e,t,i,r,n,s,o,a,c,u,f,g,x,l,m,v,_,E,w,p={}.hasOwnProperty;w=It(),E=w.isObject,_=w.isFunction,v=w.isEmpty,m=w.getValue,a=null,i=null,r=null,n=null,s=null,x=null,l=null,g=null,o=null,t=null,f=null,c=null,e=null,Pw.exports=u=function(){function d(h){this.parent=h,this.parent&&(this.options=this.parent.options,this.stringify=this.parent.stringify),this.value=null,this.children=[],this.baseURI=null,a||(a=Ms(),i=qs(),r=Bs(),n=Us(),s=Vs(),x=Xs(),l=Ys(),g=Ws(),o=zu(),t=Ce(),f=Iw(),c=js(),e=kw())}return Object.defineProperty(d.prototype,"nodeName",{get:function(){return this.name}}),Object.defineProperty(d.prototype,"nodeType",{get:function(){return this.type}}),Object.defineProperty(d.prototype,"nodeValue",{get:function(){return this.value}}),Object.defineProperty(d.prototype,"parentNode",{get:function(){return this.parent}}),Object.defineProperty(d.prototype,"childNodes",{get:function(){return(!this.childNodeList||!this.childNodeList.nodes)&&(this.childNodeList=new f(this.children)),this.childNodeList}}),Object.defineProperty(d.prototype,"firstChild",{get:function(){return this.children[0]||null}}),Object.defineProperty(d.prototype,"lastChild",{get:function(){return this.children[this.children.length-1]||null}}),Object.defineProperty(d.prototype,"previousSibling",{get:function(){var h;return h=this.parent.children.indexOf(this),this.parent.children[h-1]||null}}),Object.defineProperty(d.prototype,"nextSibling",{get:function(){var h;return h=this.parent.children.indexOf(this),this.parent.children[h+1]||null}}),Object.defineProperty(d.prototype,"ownerDocument",{get:function(){return this.document()||null}}),Object.defineProperty(d.prototype,"textContent",{get:function(){var h,b,O,D,A;if(this.nodeType===t.Element||this.nodeType===t.DocumentFragment){for(A="",D=this.children,b=0,O=D.length;b<O;b++)h=D[b],h.textContent&&(A+=h.textContent);return A}else return null},set:function(h){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),d.prototype.setParent=function(h){var b,O,D,A,T;for(this.parent=h,h&&(this.options=h.options,this.stringify=h.stringify),A=this.children,T=[],O=0,D=A.length;O<D;O++)b=A[O],T.push(b.setParent(this));return T},d.prototype.element=function(h,b,O){var D,A,T,N,C,F,z,H,V,$,j;if(F=null,b===null&&O==null&&(V=[{},null],b=V[0],O=V[1]),b==null&&(b={}),b=m(b),E(b)||($=[b,O],O=$[0],b=$[1]),h!=null&&(h=m(h)),Array.isArray(h))for(T=0,z=h.length;T<z;T++)A=h[T],F=this.element(A);else if(_(h))F=this.element(h.apply());else if(E(h)){for(C in h)if(p.call(h,C))if(j=h[C],_(j)&&(j=j.apply()),!this.options.ignoreDecorators&&this.stringify.convertAttKey&&C.indexOf(this.stringify.convertAttKey)===0)F=this.attribute(C.substr(this.stringify.convertAttKey.length),j);else if(!this.options.separateArrayItems&&Array.isArray(j)&&v(j))F=this.dummy();else if(E(j)&&v(j))F=this.element(C);else if(!this.options.keepNullNodes&&j==null)F=this.dummy();else if(!this.options.separateArrayItems&&Array.isArray(j))for(N=0,H=j.length;N<H;N++)A=j[N],D={},D[C]=A,F=this.element(D);else E(j)?!this.options.ignoreDecorators&&this.stringify.convertTextKey&&C.indexOf(this.stringify.convertTextKey)===0?F=this.element(j):(F=this.element(C),F.element(j)):F=this.element(C,j)}else!this.options.keepNullNodes&&O===null?F=this.dummy():!this.options.ignoreDecorators&&this.stringify.convertTextKey&&h.indexOf(this.stringify.convertTextKey)===0?F=this.text(O):!this.options.ignoreDecorators&&this.stringify.convertCDataKey&&h.indexOf(this.stringify.convertCDataKey)===0?F=this.cdata(O):!this.options.ignoreDecorators&&this.stringify.convertCommentKey&&h.indexOf(this.stringify.convertCommentKey)===0?F=this.comment(O):!this.options.ignoreDecorators&&this.stringify.convertRawKey&&h.indexOf(this.stringify.convertRawKey)===0?F=this.raw(O):!this.options.ignoreDecorators&&this.stringify.convertPIKey&&h.indexOf(this.stringify.convertPIKey)===0?F=this.instruction(h.substr(this.stringify.convertPIKey.length),O):F=this.node(h,b,O);if(F==null)throw new Error("Could not create any elements with: "+h+". "+this.debugInfo());return F},d.prototype.insertBefore=function(h,b,O){var D,A,T,N,C;if(h?.type)return T=h,N=b,T.setParent(this),N?(A=children.indexOf(N),C=children.splice(A),children.push(T),Array.prototype.push.apply(children,C)):children.push(T),T;if(this.isRoot)throw new Error("Cannot insert elements at root level. "+this.debugInfo(h));return A=this.parent.children.indexOf(this),C=this.parent.children.splice(A),D=this.parent.element(h,b,O),Array.prototype.push.apply(this.parent.children,C),D},d.prototype.insertAfter=function(h,b,O){var D,A,T;if(this.isRoot)throw new Error("Cannot insert elements at root level. "+this.debugInfo(h));return A=this.parent.children.indexOf(this),T=this.parent.children.splice(A+1),D=this.parent.element(h,b,O),Array.prototype.push.apply(this.parent.children,T),D},d.prototype.remove=function(){var h,b;if(this.isRoot)throw new Error("Cannot remove the root element. "+this.debugInfo());return h=this.parent.children.indexOf(this),[].splice.apply(this.parent.children,[h,h-h+1].concat(b=[])),this.parent},d.prototype.node=function(h,b,O){var D,A;return h!=null&&(h=m(h)),b||(b={}),b=m(b),E(b)||(A=[b,O],O=A[0],b=A[1]),D=new a(this,h,b),O!=null&&D.text(O),this.children.push(D),D},d.prototype.text=function(h){var b;return E(h)&&this.element(h),b=new l(this,h),this.children.push(b),this},d.prototype.cdata=function(h){var b;return b=new i(this,h),this.children.push(b),this},d.prototype.comment=function(h){var b;return b=new r(this,h),this.children.push(b),this},d.prototype.commentBefore=function(h){var b,O,D;return O=this.parent.children.indexOf(this),D=this.parent.children.splice(O),b=this.parent.comment(h),Array.prototype.push.apply(this.parent.children,D),this},d.prototype.commentAfter=function(h){var b,O,D;return O=this.parent.children.indexOf(this),D=this.parent.children.splice(O+1),b=this.parent.comment(h),Array.prototype.push.apply(this.parent.children,D),this},d.prototype.raw=function(h){var b;return b=new x(this,h),this.children.push(b),this},d.prototype.dummy=function(){var h;return h=new o(this),h},d.prototype.instruction=function(h,b){var O,D,A,T,N;if(h!=null&&(h=m(h)),b!=null&&(b=m(b)),Array.isArray(h))for(T=0,N=h.length;T<N;T++)O=h[T],this.instruction(O);else if(E(h))for(O in h)p.call(h,O)&&(D=h[O],this.instruction(O,D));else _(b)&&(b=b.apply()),A=new g(this,h,b),this.children.push(A);return this},d.prototype.instructionBefore=function(h,b){var O,D,A;return D=this.parent.children.indexOf(this),A=this.parent.children.splice(D),O=this.parent.instruction(h,b),Array.prototype.push.apply(this.parent.children,A),this},d.prototype.instructionAfter=function(h,b){var O,D,A;return D=this.parent.children.indexOf(this),A=this.parent.children.splice(D+1),O=this.parent.instruction(h,b),Array.prototype.push.apply(this.parent.children,A),this},d.prototype.declaration=function(h,b,O){var D,A;return D=this.document(),A=new n(D,h,b,O),D.children.length===0?D.children.unshift(A):D.children[0].type===t.Declaration?D.children[0]=A:D.children.unshift(A),D.root()||D},d.prototype.dtd=function(h,b){var O,D,A,T,N,C,F,z,H,V;for(D=this.document(),A=new s(D,h,b),H=D.children,T=N=0,F=H.length;N<F;T=++N)if(O=H[T],O.type===t.DocType)return D.children[T]=A,A;for(V=D.children,T=C=0,z=V.length;C<z;T=++C)if(O=V[T],O.isRoot)return D.children.splice(T,0,A),A;return D.children.push(A),A},d.prototype.up=function(){if(this.isRoot)throw new Error("The root node has no parent. Use doc() if you need to get the document object.");return this.parent},d.prototype.root=function(){var h;for(h=this;h;){if(h.type===t.Document)return h.rootObject;if(h.isRoot)return h;h=h.parent}},d.prototype.document=function(){var h;for(h=this;h;){if(h.type===t.Document)return h;h=h.parent}},d.prototype.end=function(h){return this.document().end(h)},d.prototype.prev=function(){var h;if(h=this.parent.children.indexOf(this),h<1)throw new Error("Already at the first node. "+this.debugInfo());return this.parent.children[h-1]},d.prototype.next=function(){var h;if(h=this.parent.children.indexOf(this),h===-1||h===this.parent.children.length-1)throw new Error("Already at the last node. "+this.debugInfo());return this.parent.children[h+1]},d.prototype.importDocument=function(h){var b;return b=h.root().clone(),b.parent=this,b.isRoot=!1,this.children.push(b),this},d.prototype.debugInfo=function(h){var b,O;return h=h||this.name,h==null&&!((b=this.parent)!=null&&b.name)?"":h==null?"parent: <"+this.parent.name+">":(O=this.parent)!=null&&O.name?"node: <"+h+">, parent: <"+this.parent.name+">":"node: <"+h+">"},d.prototype.ele=function(h,b,O){return this.element(h,b,O)},d.prototype.nod=function(h,b,O){return this.node(h,b,O)},d.prototype.txt=function(h){return this.text(h)},d.prototype.dat=function(h){return this.cdata(h)},d.prototype.com=function(h){return this.comment(h)},d.prototype.ins=function(h,b){return this.instruction(h,b)},d.prototype.doc=function(){return this.document()},d.prototype.dec=function(h,b,O){return this.declaration(h,b,O)},d.prototype.e=function(h,b,O){return this.element(h,b,O)},d.prototype.n=function(h,b,O){return this.node(h,b,O)},d.prototype.t=function(h){return this.text(h)},d.prototype.d=function(h){return this.cdata(h)},d.prototype.c=function(h){return this.comment(h)},d.prototype.r=function(h){return this.raw(h)},d.prototype.i=function(h,b){return this.instruction(h,b)},d.prototype.u=function(){return this.up()},d.prototype.importXMLBuilder=function(h){return this.importDocument(h)},d.prototype.replaceChild=function(h,b){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.removeChild=function(h){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.appendChild=function(h){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.hasChildNodes=function(){return this.children.length!==0},d.prototype.cloneNode=function(h){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.normalize=function(){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.isSupported=function(h,b){return!0},d.prototype.hasAttributes=function(){return this.attribs.length!==0},d.prototype.compareDocumentPosition=function(h){var b,O;return b=this,b===h?0:this.document()!==h.document()?(O=e.Disconnected|e.ImplementationSpecific,Math.random()<.5?O|=e.Preceding:O|=e.Following,O):b.isAncestor(h)?e.Contains|e.Preceding:b.isDescendant(h)?e.Contains|e.Following:b.isPreceding(h)?e.Preceding:e.Following},d.prototype.isSameNode=function(h){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.lookupPrefix=function(h){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.isDefaultNamespace=function(h){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.lookupNamespaceURI=function(h){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.isEqualNode=function(h){var b,O,D;if(h.nodeType!==this.nodeType||h.children.length!==this.children.length)return!1;for(b=O=0,D=this.children.length-1;0<=D?O<=D:O>=D;b=0<=D?++O:--O)if(!this.children[b].isEqualNode(h.children[b]))return!1;return!0},d.prototype.getFeature=function(h,b){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.setUserData=function(h,b,O){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.getUserData=function(h){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.contains=function(h){return h?h===this||this.isDescendant(h):!1},d.prototype.isDescendant=function(h){var b,O,D,A,T;for(T=this.children,D=0,A=T.length;D<A;D++)if(b=T[D],h===b||(O=b.isDescendant(h),O))return!0;return!1},d.prototype.isAncestor=function(h){return h.isDescendant(this)},d.prototype.isPreceding=function(h){var b,O;return b=this.treePosition(h),O=this.treePosition(this),b===-1||O===-1?!1:b<O},d.prototype.isFollowing=function(h){var b,O;return b=this.treePosition(h),O=this.treePosition(this),b===-1||O===-1?!1:b>O},d.prototype.treePosition=function(h){var b,O;return O=0,b=!1,this.foreachTreeNode(this.document(),function(D){if(O++,!b&&D===h)return b=!0}),b?O:-1},d.prototype.foreachTreeNode=function(h,b){var O,D,A,T,N;for(h||(h=this.document()),T=h.children,D=0,A=T.length;D<A;D++){if(O=T[D],N=b(O))return N;if(N=this.foreachTreeNode(O,b),N)return N}},d}()}).call(Rw)});var Hu=k((Fw,jw)=>{"use strict";(function(){var e,t=function(r,n){return function(){return r.apply(n,arguments)}},i={}.hasOwnProperty;jw.exports=e=function(){function r(n){this.assertLegalName=t(this.assertLegalName,this),this.assertLegalChar=t(this.assertLegalChar,this);var s,o,a;n||(n={}),this.options=n,this.options.version||(this.options.version="1.0"),o=n.stringify||{};for(s in o)i.call(o,s)&&(a=o[s],this[s]=a)}return r.prototype.name=function(n){return this.options.noValidation?n:this.assertLegalName(""+n||"")},r.prototype.text=function(n){return this.options.noValidation?n:this.assertLegalChar(this.textEscape(""+n||""))},r.prototype.cdata=function(n){return this.options.noValidation?n:(n=""+n||"",n=n.replace("]]>","]]]]><![CDATA[>"),this.assertLegalChar(n))},r.prototype.comment=function(n){if(this.options.noValidation)return n;if(n=""+n||"",n.match(/--/))throw new Error("Comment text cannot contain double-hypen: "+n);return this.assertLegalChar(n)},r.prototype.raw=function(n){return this.options.noValidation?n:""+n||""},r.prototype.attValue=function(n){return this.options.noValidation?n:this.assertLegalChar(this.attEscape(n=""+n||""))},r.prototype.insTarget=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.insValue=function(n){if(this.options.noValidation)return n;if(n=""+n||"",n.match(/\?>/))throw new Error("Invalid processing instruction value: "+n);return this.assertLegalChar(n)},r.prototype.xmlVersion=function(n){if(this.options.noValidation)return n;if(n=""+n||"",!n.match(/1\.[0-9]+/))throw new Error("Invalid version number: "+n);return n},r.prototype.xmlEncoding=function(n){if(this.options.noValidation)return n;if(n=""+n||"",!n.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/))throw new Error("Invalid encoding: "+n);return this.assertLegalChar(n)},r.prototype.xmlStandalone=function(n){return this.options.noValidation?n:n?"yes":"no"},r.prototype.dtdPubID=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.dtdSysID=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.dtdElementValue=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.dtdAttType=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.dtdAttDefault=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.dtdEntityValue=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.dtdNData=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.convertAttKey="@",r.prototype.convertPIKey="?",r.prototype.convertTextKey="#text",r.prototype.convertCDataKey="#cdata",r.prototype.convertCommentKey="#comment",r.prototype.convertRawKey="#raw",r.prototype.assertLegalChar=function(n){var s,o;if(this.options.noValidation)return n;if(s="",this.options.version==="1.0"){if(s=/[\0-\x08\x0B\f\x0E-\x1F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,o=n.match(s))throw new Error("Invalid character in string: "+n+" at index "+o.index)}else if(this.options.version==="1.1"&&(s=/[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,o=n.match(s)))throw new Error("Invalid character in string: "+n+" at index "+o.index);return n},r.prototype.assertLegalName=function(n){var s;if(this.options.noValidation)return n;if(this.assertLegalChar(n),s=/^([:A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])([\x2D\.0-:A-Z_a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*$/,!n.match(s))throw new Error("Invalid character in name");return n},r.prototype.textEscape=function(n){var s;return this.options.noValidation?n:(s=this.options.noDoubleEncoding?/(?!&\S+;)&/g:/&/g,n.replace(s,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/\r/g,"&#xD;"))},r.prototype.attEscape=function(n){var s;return this.options.noValidation?n:(s=this.options.noDoubleEncoding?/(?!&\S+;)&/g:/&/g,n.replace(s,"&amp;").replace(/</g,"&lt;").replace(/"/g,"&quot;").replace(/\t/g,"&#x9;").replace(/\n/g,"&#xA;").replace(/\r/g,"&#xD;"))},r}()}).call(Fw)});var tn=k((Mw,qw)=>{"use strict";(function(){qw.exports={None:0,OpenTag:1,InsideTag:2,CloseTag:3}}).call(Mw)});var Gu=k((Bw,Uw)=>{"use strict";(function(){var e,t,i,r,n,s,o,a,c,u,f,g,x,l,m,v,_,E={}.hasOwnProperty;_=It().assign,e=Ce(),c=Us(),u=Vs(),i=qs(),r=Bs(),g=Ms(),l=Xs(),m=Ys(),x=Ws(),f=zu(),n=$s(),s=Hs(),o=zs(),a=Gs(),t=tn(),Uw.exports=v=function(){function w(p){var d,h,b;p||(p={}),this.options=p,h=p.writer||{};for(d in h)E.call(h,d)&&(b=h[d],this["_"+d]=this[d],this[d]=b)}return w.prototype.filterOptions=function(p){var d,h,b,O,D,A,T,N;return p||(p={}),p=_({},this.options,p),d={writer:this},d.pretty=p.pretty||!1,d.allowEmpty=p.allowEmpty||!1,d.indent=(h=p.indent)!=null?h:"  ",d.newline=(b=p.newline)!=null?b:`
`,d.offset=(O=p.offset)!=null?O:0,d.dontPrettyTextNodes=(D=(A=p.dontPrettyTextNodes)!=null?A:p.dontprettytextnodes)!=null?D:0,d.spaceBeforeSlash=(T=(N=p.spaceBeforeSlash)!=null?N:p.spacebeforeslash)!=null?T:"",d.spaceBeforeSlash===!0&&(d.spaceBeforeSlash=" "),d.suppressPrettyCount=0,d.user={},d.state=t.None,d},w.prototype.indent=function(p,d,h){var b;return!d.pretty||d.suppressPrettyCount?"":d.pretty&&(b=(h||0)+d.offset+1,b>0)?new Array(b).join(d.indent):""},w.prototype.endline=function(p,d,h){return!d.pretty||d.suppressPrettyCount?"":d.newline},w.prototype.attribute=function(p,d,h){var b;return this.openAttribute(p,d,h),b=" "+p.name+'="'+p.value+'"',this.closeAttribute(p,d,h),b},w.prototype.cdata=function(p,d,h){var b;return this.openNode(p,d,h),d.state=t.OpenTag,b=this.indent(p,d,h)+"<![CDATA[",d.state=t.InsideTag,b+=p.value,d.state=t.CloseTag,b+="]]>"+this.endline(p,d,h),d.state=t.None,this.closeNode(p,d,h),b},w.prototype.comment=function(p,d,h){var b;return this.openNode(p,d,h),d.state=t.OpenTag,b=this.indent(p,d,h)+"<!-- ",d.state=t.InsideTag,b+=p.value,d.state=t.CloseTag,b+=" -->"+this.endline(p,d,h),d.state=t.None,this.closeNode(p,d,h),b},w.prototype.declaration=function(p,d,h){var b;return this.openNode(p,d,h),d.state=t.OpenTag,b=this.indent(p,d,h)+"<?xml",d.state=t.InsideTag,b+=' version="'+p.version+'"',p.encoding!=null&&(b+=' encoding="'+p.encoding+'"'),p.standalone!=null&&(b+=' standalone="'+p.standalone+'"'),d.state=t.CloseTag,b+=d.spaceBeforeSlash+"?>",b+=this.endline(p,d,h),d.state=t.None,this.closeNode(p,d,h),b},w.prototype.docType=function(p,d,h){var b,O,D,A,T;if(h||(h=0),this.openNode(p,d,h),d.state=t.OpenTag,A=this.indent(p,d,h),A+="<!DOCTYPE "+p.root().name,p.pubID&&p.sysID?A+=' PUBLIC "'+p.pubID+'" "'+p.sysID+'"':p.sysID&&(A+=' SYSTEM "'+p.sysID+'"'),p.children.length>0){for(A+=" [",A+=this.endline(p,d,h),d.state=t.InsideTag,T=p.children,O=0,D=T.length;O<D;O++)b=T[O],A+=this.writeChildNode(b,d,h+1);d.state=t.CloseTag,A+="]"}return d.state=t.CloseTag,A+=d.spaceBeforeSlash+">",A+=this.endline(p,d,h),d.state=t.None,this.closeNode(p,d,h),A},w.prototype.element=function(p,d,h){var b,O,D,A,T,N,C,F,z,H,V,$,j,ae;h||(h=0),H=!1,V="",this.openNode(p,d,h),d.state=t.OpenTag,V+=this.indent(p,d,h)+"<"+p.name,$=p.attribs;for(z in $)E.call($,z)&&(b=$[z],V+=this.attribute(b,d,h));if(D=p.children.length,A=D===0?null:p.children[0],D===0||p.children.every(function(J){return(J.type===e.Text||J.type===e.Raw)&&J.value===""}))d.allowEmpty?(V+=">",d.state=t.CloseTag,V+="</"+p.name+">"+this.endline(p,d,h)):(d.state=t.CloseTag,V+=d.spaceBeforeSlash+"/>"+this.endline(p,d,h));else if(d.pretty&&D===1&&(A.type===e.Text||A.type===e.Raw)&&A.value!=null)V+=">",d.state=t.InsideTag,d.suppressPrettyCount++,H=!0,V+=this.writeChildNode(A,d,h+1),d.suppressPrettyCount--,H=!1,d.state=t.CloseTag,V+="</"+p.name+">"+this.endline(p,d,h);else{if(d.dontPrettyTextNodes){for(j=p.children,T=0,C=j.length;T<C;T++)if(O=j[T],(O.type===e.Text||O.type===e.Raw)&&O.value!=null){d.suppressPrettyCount++,H=!0;break}}for(V+=">"+this.endline(p,d,h),d.state=t.InsideTag,ae=p.children,N=0,F=ae.length;N<F;N++)O=ae[N],V+=this.writeChildNode(O,d,h+1);d.state=t.CloseTag,V+=this.indent(p,d,h)+"</"+p.name+">",H&&d.suppressPrettyCount--,V+=this.endline(p,d,h),d.state=t.None}return this.closeNode(p,d,h),V},w.prototype.writeChildNode=function(p,d,h){switch(p.type){case e.CData:return this.cdata(p,d,h);case e.Comment:return this.comment(p,d,h);case e.Element:return this.element(p,d,h);case e.Raw:return this.raw(p,d,h);case e.Text:return this.text(p,d,h);case e.ProcessingInstruction:return this.processingInstruction(p,d,h);case e.Dummy:return"";case e.Declaration:return this.declaration(p,d,h);case e.DocType:return this.docType(p,d,h);case e.AttributeDeclaration:return this.dtdAttList(p,d,h);case e.ElementDeclaration:return this.dtdElement(p,d,h);case e.EntityDeclaration:return this.dtdEntity(p,d,h);case e.NotationDeclaration:return this.dtdNotation(p,d,h);default:throw new Error("Unknown XML node type: "+p.constructor.name)}},w.prototype.processingInstruction=function(p,d,h){var b;return this.openNode(p,d,h),d.state=t.OpenTag,b=this.indent(p,d,h)+"<?",d.state=t.InsideTag,b+=p.target,p.value&&(b+=" "+p.value),d.state=t.CloseTag,b+=d.spaceBeforeSlash+"?>",b+=this.endline(p,d,h),d.state=t.None,this.closeNode(p,d,h),b},w.prototype.raw=function(p,d,h){var b;return this.openNode(p,d,h),d.state=t.OpenTag,b=this.indent(p,d,h),d.state=t.InsideTag,b+=p.value,d.state=t.CloseTag,b+=this.endline(p,d,h),d.state=t.None,this.closeNode(p,d,h),b},w.prototype.text=function(p,d,h){var b;return this.openNode(p,d,h),d.state=t.OpenTag,b=this.indent(p,d,h),d.state=t.InsideTag,b+=p.value,d.state=t.CloseTag,b+=this.endline(p,d,h),d.state=t.None,this.closeNode(p,d,h),b},w.prototype.dtdAttList=function(p,d,h){var b;return this.openNode(p,d,h),d.state=t.OpenTag,b=this.indent(p,d,h)+"<!ATTLIST",d.state=t.InsideTag,b+=" "+p.elementName+" "+p.attributeName+" "+p.attributeType,p.defaultValueType!=="#DEFAULT"&&(b+=" "+p.defaultValueType),p.defaultValue&&(b+=' "'+p.defaultValue+'"'),d.state=t.CloseTag,b+=d.spaceBeforeSlash+">"+this.endline(p,d,h),d.state=t.None,this.closeNode(p,d,h),b},w.prototype.dtdElement=function(p,d,h){var b;return this.openNode(p,d,h),d.state=t.OpenTag,b=this.indent(p,d,h)+"<!ELEMENT",d.state=t.InsideTag,b+=" "+p.name+" "+p.value,d.state=t.CloseTag,b+=d.spaceBeforeSlash+">"+this.endline(p,d,h),d.state=t.None,this.closeNode(p,d,h),b},w.prototype.dtdEntity=function(p,d,h){var b;return this.openNode(p,d,h),d.state=t.OpenTag,b=this.indent(p,d,h)+"<!ENTITY",d.state=t.InsideTag,p.pe&&(b+=" %"),b+=" "+p.name,p.value?b+=' "'+p.value+'"':(p.pubID&&p.sysID?b+=' PUBLIC "'+p.pubID+'" "'+p.sysID+'"':p.sysID&&(b+=' SYSTEM "'+p.sysID+'"'),p.nData&&(b+=" NDATA "+p.nData)),d.state=t.CloseTag,b+=d.spaceBeforeSlash+">"+this.endline(p,d,h),d.state=t.None,this.closeNode(p,d,h),b},w.prototype.dtdNotation=function(p,d,h){var b;return this.openNode(p,d,h),d.state=t.OpenTag,b=this.indent(p,d,h)+"<!NOTATION",d.state=t.InsideTag,b+=" "+p.name,p.pubID&&p.sysID?b+=' PUBLIC "'+p.pubID+'" "'+p.sysID+'"':p.pubID?b+=' PUBLIC "'+p.pubID+'"':p.sysID&&(b+=' SYSTEM "'+p.sysID+'"'),d.state=t.CloseTag,b+=d.spaceBeforeSlash+">"+this.endline(p,d,h),d.state=t.None,this.closeNode(p,d,h),b},w.prototype.openNode=function(p,d,h){},w.prototype.closeNode=function(p,d,h){},w.prototype.openAttribute=function(p,d,h){},w.prototype.closeAttribute=function(p,d,h){},w}()}).call(Bw)});var Ks=k(($w,zw)=>{"use strict";(function(){var e,t,i=function(n,s){for(var o in s)r.call(s,o)&&(n[o]=s[o]);function a(){this.constructor=n}return a.prototype=s.prototype,n.prototype=new a,n.__super__=s.prototype,n},r={}.hasOwnProperty;t=Gu(),zw.exports=e=function(n){i(s,n);function s(o){s.__super__.constructor.call(this,o)}return s.prototype.document=function(o,a){var c,u,f,g,x;for(a=this.filterOptions(a),g="",x=o.children,u=0,f=x.length;u<f;u++)c=x[u],g+=this.writeChildNode(c,a,0);return a.pretty&&g.slice(-a.newline.length)===a.newline&&(g=g.slice(0,-a.newline.length)),g},s}(t)}).call($w)});var Vu=k((Hw,Gw)=>{"use strict";(function(){var e,t,i,r,n,s,o,a,c=function(f,g){for(var x in g)u.call(g,x)&&(f[x]=g[x]);function l(){this.constructor=f}return l.prototype=g.prototype,f.prototype=new l,f.__super__=g.prototype,f},u={}.hasOwnProperty;a=It().isPlainObject,i=Uu(),t=Xb(),n=ct(),e=Ce(),o=Hu(),s=Ks(),Gw.exports=r=function(f){c(g,f);function g(x){g.__super__.constructor.call(this,null),this.name="#document",this.type=e.Document,this.documentURI=null,this.domConfig=new t,x||(x={}),x.writer||(x.writer=new s),this.options=x,this.stringify=new o(x)}return Object.defineProperty(g.prototype,"implementation",{value:new i}),Object.defineProperty(g.prototype,"doctype",{get:function(){var x,l,m,v;for(v=this.children,l=0,m=v.length;l<m;l++)if(x=v[l],x.type===e.DocType)return x;return null}}),Object.defineProperty(g.prototype,"documentElement",{get:function(){return this.rootObject||null}}),Object.defineProperty(g.prototype,"inputEncoding",{get:function(){return null}}),Object.defineProperty(g.prototype,"strictErrorChecking",{get:function(){return!1}}),Object.defineProperty(g.prototype,"xmlEncoding",{get:function(){return this.children.length!==0&&this.children[0].type===e.Declaration?this.children[0].encoding:null}}),Object.defineProperty(g.prototype,"xmlStandalone",{get:function(){return this.children.length!==0&&this.children[0].type===e.Declaration?this.children[0].standalone==="yes":!1}}),Object.defineProperty(g.prototype,"xmlVersion",{get:function(){return this.children.length!==0&&this.children[0].type===e.Declaration?this.children[0].version:"1.0"}}),Object.defineProperty(g.prototype,"URL",{get:function(){return this.documentURI}}),Object.defineProperty(g.prototype,"origin",{get:function(){return null}}),Object.defineProperty(g.prototype,"compatMode",{get:function(){return null}}),Object.defineProperty(g.prototype,"characterSet",{get:function(){return null}}),Object.defineProperty(g.prototype,"contentType",{get:function(){return null}}),g.prototype.end=function(x){var l;return l={},x?a(x)&&(l=x,x=this.options.writer):x=this.options.writer,x.document(this,x.filterOptions(l))},g.prototype.toString=function(x){return this.options.writer.document(this,this.options.writer.filterOptions(x))},g.prototype.createElement=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createDocumentFragment=function(){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createTextNode=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createComment=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createCDATASection=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createProcessingInstruction=function(x,l){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createAttribute=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createEntityReference=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.getElementsByTagName=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.importNode=function(x,l){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createElementNS=function(x,l){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createAttributeNS=function(x,l){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.getElementsByTagNameNS=function(x,l){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.getElementById=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.adoptNode=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.normalizeDocument=function(){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.renameNode=function(x,l,m){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.getElementsByClassName=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createEvent=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createRange=function(){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createNodeIterator=function(x,l,m){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createTreeWalker=function(x,l,m){throw new Error("This DOM method is not implemented."+this.debugInfo())},g}(n)}).call(Hw)});var Yw=k((Vw,Xw)=>{"use strict";(function(){var e,t,i,r,n,s,o,a,c,u,f,g,x,l,m,v,_,E,w,p,d,h,b,O,D={}.hasOwnProperty;O=It(),h=O.isObject,d=O.isFunction,b=O.isPlainObject,p=O.getValue,e=Ce(),g=Vu(),l=Ms(),r=qs(),n=Bs(),v=Xs(),w=Ys(),m=Ws(),u=Us(),f=Vs(),s=$s(),a=zs(),o=Hs(),c=Gs(),i=$u(),E=Hu(),_=Ks(),t=tn(),Xw.exports=x=function(){function A(T,N,C){var F;this.name="?xml",this.type=e.Document,T||(T={}),F={},T.writer?b(T.writer)&&(F=T.writer,T.writer=new _):T.writer=new _,this.options=T,this.writer=T.writer,this.writerOptions=this.writer.filterOptions(F),this.stringify=new E(T),this.onDataCallback=N||function(){},this.onEndCallback=C||function(){},this.currentNode=null,this.currentLevel=-1,this.openTags={},this.documentStarted=!1,this.documentCompleted=!1,this.root=null}return A.prototype.createChildNode=function(T){var N,C,F,z,H,V,$,j;switch(T.type){case e.CData:this.cdata(T.value);break;case e.Comment:this.comment(T.value);break;case e.Element:F={},$=T.attribs;for(C in $)D.call($,C)&&(N=$[C],F[C]=N.value);this.node(T.name,F);break;case e.Dummy:this.dummy();break;case e.Raw:this.raw(T.value);break;case e.Text:this.text(T.value);break;case e.ProcessingInstruction:this.instruction(T.target,T.value);break;default:throw new Error("This XML node type is not supported in a JS object: "+T.constructor.name)}for(j=T.children,H=0,V=j.length;H<V;H++)z=j[H],this.createChildNode(z),z.type===e.Element&&this.up();return this},A.prototype.dummy=function(){return this},A.prototype.node=function(T,N,C){var F;if(T==null)throw new Error("Missing node name.");if(this.root&&this.currentLevel===-1)throw new Error("Document can only have one root node. "+this.debugInfo(T));return this.openCurrent(),T=p(T),N==null&&(N={}),N=p(N),h(N)||(F=[N,C],C=F[0],N=F[1]),this.currentNode=new l(this,T,N),this.currentNode.children=!1,this.currentLevel++,this.openTags[this.currentLevel]=this.currentNode,C!=null&&this.text(C),this},A.prototype.element=function(T,N,C){var F,z,H,V,$,j;if(this.currentNode&&this.currentNode.type===e.DocType)this.dtdElement.apply(this,arguments);else if(Array.isArray(T)||h(T)||d(T))for(V=this.options.noValidation,this.options.noValidation=!0,j=new g(this.options).element("TEMP_ROOT"),j.element(T),this.options.noValidation=V,$=j.children,z=0,H=$.length;z<H;z++)F=$[z],this.createChildNode(F),F.type===e.Element&&this.up();else this.node(T,N,C);return this},A.prototype.attribute=function(T,N){var C,F;if(!this.currentNode||this.currentNode.children)throw new Error("att() can only be used immediately after an ele() call in callback mode. "+this.debugInfo(T));if(T!=null&&(T=p(T)),h(T))for(C in T)D.call(T,C)&&(F=T[C],this.attribute(C,F));else d(N)&&(N=N.apply()),this.options.keepNullAttributes&&N==null?this.currentNode.attribs[T]=new i(this,T,""):N!=null&&(this.currentNode.attribs[T]=new i(this,T,N));return this},A.prototype.text=function(T){var N;return this.openCurrent(),N=new w(this,T),this.onData(this.writer.text(N,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},A.prototype.cdata=function(T){var N;return this.openCurrent(),N=new r(this,T),this.onData(this.writer.cdata(N,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},A.prototype.comment=function(T){var N;return this.openCurrent(),N=new n(this,T),this.onData(this.writer.comment(N,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},A.prototype.raw=function(T){var N;return this.openCurrent(),N=new v(this,T),this.onData(this.writer.raw(N,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},A.prototype.instruction=function(T,N){var C,F,z,H,V;if(this.openCurrent(),T!=null&&(T=p(T)),N!=null&&(N=p(N)),Array.isArray(T))for(C=0,H=T.length;C<H;C++)F=T[C],this.instruction(F);else if(h(T))for(F in T)D.call(T,F)&&(z=T[F],this.instruction(F,z));else d(N)&&(N=N.apply()),V=new m(this,T,N),this.onData(this.writer.processingInstruction(V,this.writerOptions,this.currentLevel+1),this.currentLevel+1);return this},A.prototype.declaration=function(T,N,C){var F;if(this.openCurrent(),this.documentStarted)throw new Error("declaration() must be the first node.");return F=new u(this,T,N,C),this.onData(this.writer.declaration(F,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},A.prototype.doctype=function(T,N,C){if(this.openCurrent(),T==null)throw new Error("Missing root node name.");if(this.root)throw new Error("dtd() must come before the root node.");return this.currentNode=new f(this,N,C),this.currentNode.rootNodeName=T,this.currentNode.children=!1,this.currentLevel++,this.openTags[this.currentLevel]=this.currentNode,this},A.prototype.dtdElement=function(T,N){var C;return this.openCurrent(),C=new o(this,T,N),this.onData(this.writer.dtdElement(C,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},A.prototype.attList=function(T,N,C,F,z){var H;return this.openCurrent(),H=new s(this,T,N,C,F,z),this.onData(this.writer.dtdAttList(H,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},A.prototype.entity=function(T,N){var C;return this.openCurrent(),C=new a(this,!1,T,N),this.onData(this.writer.dtdEntity(C,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},A.prototype.pEntity=function(T,N){var C;return this.openCurrent(),C=new a(this,!0,T,N),this.onData(this.writer.dtdEntity(C,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},A.prototype.notation=function(T,N){var C;return this.openCurrent(),C=new c(this,T,N),this.onData(this.writer.dtdNotation(C,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},A.prototype.up=function(){if(this.currentLevel<0)throw new Error("The document node has no parent.");return this.currentNode?(this.currentNode.children?this.closeNode(this.currentNode):this.openNode(this.currentNode),this.currentNode=null):this.closeNode(this.openTags[this.currentLevel]),delete this.openTags[this.currentLevel],this.currentLevel--,this},A.prototype.end=function(){for(;this.currentLevel>=0;)this.up();return this.onEnd()},A.prototype.openCurrent=function(){if(this.currentNode)return this.currentNode.children=!0,this.openNode(this.currentNode)},A.prototype.openNode=function(T){var N,C,F,z;if(!T.isOpen){if(!this.root&&this.currentLevel===0&&T.type===e.Element&&(this.root=T),C="",T.type===e.Element){this.writerOptions.state=t.OpenTag,C=this.writer.indent(T,this.writerOptions,this.currentLevel)+"<"+T.name,z=T.attribs;for(F in z)D.call(z,F)&&(N=z[F],C+=this.writer.attribute(N,this.writerOptions,this.currentLevel));C+=(T.children?">":"/>")+this.writer.endline(T,this.writerOptions,this.currentLevel),this.writerOptions.state=t.InsideTag}else this.writerOptions.state=t.OpenTag,C=this.writer.indent(T,this.writerOptions,this.currentLevel)+"<!DOCTYPE "+T.rootNodeName,T.pubID&&T.sysID?C+=' PUBLIC "'+T.pubID+'" "'+T.sysID+'"':T.sysID&&(C+=' SYSTEM "'+T.sysID+'"'),T.children?(C+=" [",this.writerOptions.state=t.InsideTag):(this.writerOptions.state=t.CloseTag,C+=">"),C+=this.writer.endline(T,this.writerOptions,this.currentLevel);return this.onData(C,this.currentLevel),T.isOpen=!0}},A.prototype.closeNode=function(T){var N;if(!T.isClosed)return N="",this.writerOptions.state=t.CloseTag,T.type===e.Element?N=this.writer.indent(T,this.writerOptions,this.currentLevel)+"</"+T.name+">"+this.writer.endline(T,this.writerOptions,this.currentLevel):N=this.writer.indent(T,this.writerOptions,this.currentLevel)+"]>"+this.writer.endline(T,this.writerOptions,this.currentLevel),this.writerOptions.state=t.None,this.onData(N,this.currentLevel),T.isClosed=!0},A.prototype.onData=function(T,N){return this.documentStarted=!0,this.onDataCallback(T,N+1)},A.prototype.onEnd=function(){return this.documentCompleted=!0,this.onEndCallback()},A.prototype.debugInfo=function(T){return T==null?"":"node: <"+T+">"},A.prototype.ele=function(){return this.element.apply(this,arguments)},A.prototype.nod=function(T,N,C){return this.node(T,N,C)},A.prototype.txt=function(T){return this.text(T)},A.prototype.dat=function(T){return this.cdata(T)},A.prototype.com=function(T){return this.comment(T)},A.prototype.ins=function(T,N){return this.instruction(T,N)},A.prototype.dec=function(T,N,C){return this.declaration(T,N,C)},A.prototype.dtd=function(T,N,C){return this.doctype(T,N,C)},A.prototype.e=function(T,N,C){return this.element(T,N,C)},A.prototype.n=function(T,N,C){return this.node(T,N,C)},A.prototype.t=function(T){return this.text(T)},A.prototype.d=function(T){return this.cdata(T)},A.prototype.c=function(T){return this.comment(T)},A.prototype.r=function(T){return this.raw(T)},A.prototype.i=function(T,N){return this.instruction(T,N)},A.prototype.att=function(){return this.currentNode&&this.currentNode.type===e.DocType?this.attList.apply(this,arguments):this.attribute.apply(this,arguments)},A.prototype.a=function(){return this.currentNode&&this.currentNode.type===e.DocType?this.attList.apply(this,arguments):this.attribute.apply(this,arguments)},A.prototype.ent=function(T,N){return this.entity(T,N)},A.prototype.pent=function(T,N){return this.pEntity(T,N)},A.prototype.not=function(T,N){return this.notation(T,N)},A}()}).call(Vw)});var Jw=k((Ww,Kw)=>{"use strict";(function(){var e,t,i,r,n=function(o,a){for(var c in a)s.call(a,c)&&(o[c]=a[c]);function u(){this.constructor=o}return u.prototype=a.prototype,o.prototype=new u,o.__super__=a.prototype,o},s={}.hasOwnProperty;e=Ce(),r=Gu(),t=tn(),Kw.exports=i=function(o){n(a,o);function a(c,u){this.stream=c,a.__super__.constructor.call(this,u)}return a.prototype.endline=function(c,u,f){return c.isLastRootNode&&u.state===t.CloseTag?"":a.__super__.endline.call(this,c,u,f)},a.prototype.document=function(c,u){var f,g,x,l,m,v,_,E,w;for(_=c.children,g=x=0,m=_.length;x<m;g=++x)f=_[g],f.isLastRootNode=g===c.children.length-1;for(u=this.filterOptions(u),E=c.children,w=[],l=0,v=E.length;l<v;l++)f=E[l],w.push(this.writeChildNode(f,u,0));return w},a.prototype.attribute=function(c,u,f){return this.stream.write(a.__super__.attribute.call(this,c,u,f))},a.prototype.cdata=function(c,u,f){return this.stream.write(a.__super__.cdata.call(this,c,u,f))},a.prototype.comment=function(c,u,f){return this.stream.write(a.__super__.comment.call(this,c,u,f))},a.prototype.declaration=function(c,u,f){return this.stream.write(a.__super__.declaration.call(this,c,u,f))},a.prototype.docType=function(c,u,f){var g,x,l,m;if(f||(f=0),this.openNode(c,u,f),u.state=t.OpenTag,this.stream.write(this.indent(c,u,f)),this.stream.write("<!DOCTYPE "+c.root().name),c.pubID&&c.sysID?this.stream.write(' PUBLIC "'+c.pubID+'" "'+c.sysID+'"'):c.sysID&&this.stream.write(' SYSTEM "'+c.sysID+'"'),c.children.length>0){for(this.stream.write(" ["),this.stream.write(this.endline(c,u,f)),u.state=t.InsideTag,m=c.children,x=0,l=m.length;x<l;x++)g=m[x],this.writeChildNode(g,u,f+1);u.state=t.CloseTag,this.stream.write("]")}return u.state=t.CloseTag,this.stream.write(u.spaceBeforeSlash+">"),this.stream.write(this.endline(c,u,f)),u.state=t.None,this.closeNode(c,u,f)},a.prototype.element=function(c,u,f){var g,x,l,m,v,_,E,w,p,d;f||(f=0),this.openNode(c,u,f),u.state=t.OpenTag,this.stream.write(this.indent(c,u,f)+"<"+c.name),p=c.attribs;for(E in p)s.call(p,E)&&(g=p[E],this.attribute(g,u,f));if(l=c.children.length,m=l===0?null:c.children[0],l===0||c.children.every(function(h){return(h.type===e.Text||h.type===e.Raw)&&h.value===""}))u.allowEmpty?(this.stream.write(">"),u.state=t.CloseTag,this.stream.write("</"+c.name+">")):(u.state=t.CloseTag,this.stream.write(u.spaceBeforeSlash+"/>"));else if(u.pretty&&l===1&&(m.type===e.Text||m.type===e.Raw)&&m.value!=null)this.stream.write(">"),u.state=t.InsideTag,u.suppressPrettyCount++,w=!0,this.writeChildNode(m,u,f+1),u.suppressPrettyCount--,w=!1,u.state=t.CloseTag,this.stream.write("</"+c.name+">");else{for(this.stream.write(">"+this.endline(c,u,f)),u.state=t.InsideTag,d=c.children,v=0,_=d.length;v<_;v++)x=d[v],this.writeChildNode(x,u,f+1);u.state=t.CloseTag,this.stream.write(this.indent(c,u,f)+"</"+c.name+">")}return this.stream.write(this.endline(c,u,f)),u.state=t.None,this.closeNode(c,u,f)},a.prototype.processingInstruction=function(c,u,f){return this.stream.write(a.__super__.processingInstruction.call(this,c,u,f))},a.prototype.raw=function(c,u,f){return this.stream.write(a.__super__.raw.call(this,c,u,f))},a.prototype.text=function(c,u,f){return this.stream.write(a.__super__.text.call(this,c,u,f))},a.prototype.dtdAttList=function(c,u,f){return this.stream.write(a.__super__.dtdAttList.call(this,c,u,f))},a.prototype.dtdElement=function(c,u,f){return this.stream.write(a.__super__.dtdElement.call(this,c,u,f))},a.prototype.dtdEntity=function(c,u,f){return this.stream.write(a.__super__.dtdEntity.call(this,c,u,f))},a.prototype.dtdNotation=function(c,u,f){return this.stream.write(a.__super__.dtdNotation.call(this,c,u,f))},a}(r)}).call(Ww)});var Qw=k((Zw,ci)=>{"use strict";(function(){var e,t,i,r,n,s,o,a,c,u;u=It(),a=u.assign,c=u.isFunction,i=Uu(),r=Vu(),n=Yw(),o=Ks(),s=Jw(),e=Ce(),t=tn(),ci.exports.create=function(f,g,x,l){var m,v;if(f==null)throw new Error("Root element needs a name.");return l=a({},g,x,l),m=new r(l),v=m.element(f),l.headless||(m.declaration(l),(l.pubID!=null||l.sysID!=null)&&m.dtd(l)),v},ci.exports.begin=function(f,g,x){var l;return c(f)&&(l=[f,g],g=l[0],x=l[1],f={}),g?new n(f,g,x):new r(f)},ci.exports.stringWriter=function(f){return new o(f)},ci.exports.streamWriter=function(f,g){return new s(f,g)},ci.exports.implementation=new i,ci.exports.nodeType=e,ci.exports.writerState=t}).call(Zw)});var e0=k(Xu=>{"use strict";(function(){"use strict";var e,t,i,r,n,s={}.hasOwnProperty;e=Qw(),t=Fs().defaults,r=function(o){return typeof o=="string"&&(o.indexOf("&")>=0||o.indexOf(">")>=0||o.indexOf("<")>=0)},n=function(o){return"<![CDATA["+i(o)+"]]>"},i=function(o){return o.replace("]]>","]]]]><![CDATA[>")},Xu.Builder=function(){function o(a){var c,u,f;this.options={},u=t["0.2"];for(c in u)s.call(u,c)&&(f=u[c],this.options[c]=f);for(c in a)s.call(a,c)&&(f=a[c],this.options[c]=f)}return o.prototype.buildObject=function(a){var c,u,f,g,x;return c=this.options.attrkey,u=this.options.charkey,Object.keys(a).length===1&&this.options.rootName===t["0.2"].rootName?(x=Object.keys(a)[0],a=a[x]):x=this.options.rootName,f=function(l){return function(m,v){var _,E,w,p,d,h;if(typeof v!="object")l.options.cdata&&r(v)?m.raw(n(v)):m.txt(v);else if(Array.isArray(v)){for(p in v)if(s.call(v,p)){E=v[p];for(d in E)w=E[d],m=f(m.ele(d),w).up()}}else for(d in v)if(s.call(v,d))if(E=v[d],d===c){if(typeof E=="object")for(_ in E)h=E[_],m=m.att(_,h)}else if(d===u)l.options.cdata&&r(E)?m=m.raw(n(E)):m=m.txt(E);else if(Array.isArray(E))for(p in E)s.call(E,p)&&(w=E[p],typeof w=="string"?l.options.cdata&&r(w)?m=m.ele(d).raw(n(w)).up():m=m.ele(d,w).up():m=f(m.ele(d),w).up());else typeof E=="object"?m=f(m.ele(d),E).up():typeof E=="string"&&l.options.cdata&&r(E)?m=m.ele(d).raw(n(E)).up():(E==null&&(E=""),m=m.ele(d,E.toString()).up());return m}}(this),g=e.create(x,this.options.xmldec,this.options.doctype,{headless:this.options.headless,allowSurrogateChars:this.options.allowSurrogateChars}),f(g,a).end(this.options.renderOpts)},o}()}).call(Xu)});var t0=k(Js=>{"use strict";(function(e){e.parser=function(S,y){return new i(S,y)},e.SAXParser=i,e.SAXStream=u,e.createStream=c,e.MAX_BUFFER_LENGTH=64*1024;var t=["comment","sgmlDecl","textNode","tagName","doctype","procInstName","procInstBody","entity","attribName","attribValue","cdata","script"];e.EVENTS=["text","processinginstruction","sgmldeclaration","doctype","comment","opentagstart","attribute","opentag","closetag","opencdata","cdata","closecdata","error","end","ready","script","opennamespace","closenamespace"];function i(S,y){if(!(this instanceof i))return new i(S,y);var R=this;n(R),R.q=R.c="",R.bufferCheckPosition=e.MAX_BUFFER_LENGTH,R.opt=y||{},R.opt.lowercase=R.opt.lowercase||R.opt.lowercasetags,R.looseCase=R.opt.lowercase?"toLowerCase":"toUpperCase",R.tags=[],R.closed=R.closedRoot=R.sawRoot=!1,R.tag=R.error=null,R.strict=!!S,R.noscript=!!(S||R.opt.noscript),R.state=C.BEGIN,R.strictEntities=R.opt.strictEntities,R.ENTITIES=R.strictEntities?Object.create(e.XML_ENTITIES):Object.create(e.ENTITIES),R.attribList=[],R.opt.xmlns&&(R.ns=Object.create(p)),R.trackPosition=R.opt.position!==!1,R.trackPosition&&(R.position=R.line=R.column=0),z(R,"onready")}Object.create||(Object.create=function(S){function y(){}y.prototype=S;var R=new y;return R}),Object.keys||(Object.keys=function(S){var y=[];for(var R in S)S.hasOwnProperty(R)&&y.push(R);return y});function r(S){for(var y=Math.max(e.MAX_BUFFER_LENGTH,10),R=0,L=0,P=t.length;L<P;L++){var q=S[t[L]].length;if(q>y)switch(t[L]){case"textNode":V(S);break;case"cdata":H(S,"oncdata",S.cdata),S.cdata="";break;case"script":H(S,"onscript",S.script),S.script="";break;default:j(S,"Max buffer length exceeded: "+t[L])}R=Math.max(R,q)}var X=e.MAX_BUFFER_LENGTH-R;S.bufferCheckPosition=X+S.position}function n(S){for(var y=0,R=t.length;y<R;y++)S[t[y]]=""}function s(S){V(S),S.cdata!==""&&(H(S,"oncdata",S.cdata),S.cdata=""),S.script!==""&&(H(S,"onscript",S.script),S.script="")}i.prototype={end:function(){ae(this)},write:co,resume:function(){return this.error=null,this},close:function(){return this.write(null)},flush:function(){s(this)}};var o;try{o=require("stream").Stream}catch{o=function(){}}var a=e.EVENTS.filter(function(S){return S!=="error"&&S!=="end"});function c(S,y){return new u(S,y)}function u(S,y){if(!(this instanceof u))return new u(S,y);o.apply(this),this._parser=new i(S,y),this.writable=!0,this.readable=!0;var R=this;this._parser.onend=function(){R.emit("end")},this._parser.onerror=function(L){R.emit("error",L),R._parser.error=null},this._decoder=null,a.forEach(function(L){Object.defineProperty(R,"on"+L,{get:function(){return R._parser["on"+L]},set:function(P){if(!P)return R.removeAllListeners(L),R._parser["on"+L]=P,P;R.on(L,P)},enumerable:!0,configurable:!1})})}u.prototype=Object.create(o.prototype,{constructor:{value:u}}),u.prototype.write=function(S){if(typeof Buffer=="function"&&typeof Buffer.isBuffer=="function"&&Buffer.isBuffer(S)){if(!this._decoder){var y=require("string_decoder").StringDecoder;this._decoder=new y("utf8")}S=this._decoder.write(S)}return this._parser.write(S.toString()),this.emit("data",S),!0},u.prototype.end=function(S){return S&&S.length&&this.write(S),this._parser.end(),!0},u.prototype.on=function(S,y){var R=this;return!R._parser["on"+S]&&a.indexOf(S)!==-1&&(R._parser["on"+S]=function(){var L=arguments.length===1?[arguments[0]]:Array.apply(null,arguments);L.splice(0,0,S),R.emit.apply(R,L)}),o.prototype.on.call(R,S,y)};var f=`\r
	 `,g="0124356789",x="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",l=`'"`,m=f+">",v="[CDATA[",_="DOCTYPE",E="http://www.w3.org/XML/1998/namespace",w="http://www.w3.org/2000/xmlns/",p={xml:E,xmlns:w};f=D(f),g=D(g),x=D(x);var d=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,h=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/,b=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,O=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/;l=D(l),m=D(m);function D(S){return S.split("").reduce(function(y,R){return y[R]=!0,y},{})}function A(S){return Object.prototype.toString.call(S)==="[object RegExp]"}function T(S,y){return A(S)?!!y.match(S):S[y]}function N(S,y){return!T(S,y)}var C=0;e.STATE={BEGIN:C++,BEGIN_WHITESPACE:C++,TEXT:C++,TEXT_ENTITY:C++,OPEN_WAKA:C++,SGML_DECL:C++,SGML_DECL_QUOTED:C++,DOCTYPE:C++,DOCTYPE_QUOTED:C++,DOCTYPE_DTD:C++,DOCTYPE_DTD_QUOTED:C++,COMMENT_STARTING:C++,COMMENT:C++,COMMENT_ENDING:C++,COMMENT_ENDED:C++,CDATA:C++,CDATA_ENDING:C++,CDATA_ENDING_2:C++,PROC_INST:C++,PROC_INST_BODY:C++,PROC_INST_ENDING:C++,OPEN_TAG:C++,OPEN_TAG_SLASH:C++,ATTRIB:C++,ATTRIB_NAME:C++,ATTRIB_NAME_SAW_WHITE:C++,ATTRIB_VALUE:C++,ATTRIB_VALUE_QUOTED:C++,ATTRIB_VALUE_CLOSED:C++,ATTRIB_VALUE_UNQUOTED:C++,ATTRIB_VALUE_ENTITY_Q:C++,ATTRIB_VALUE_ENTITY_U:C++,CLOSE_TAG:C++,CLOSE_TAG_SAW_WHITE:C++,SCRIPT:C++,SCRIPT_ENDING:C++},e.XML_ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'"},e.ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'",AElig:198,Aacute:193,Acirc:194,Agrave:192,Aring:197,Atilde:195,Auml:196,Ccedil:199,ETH:208,Eacute:201,Ecirc:202,Egrave:200,Euml:203,Iacute:205,Icirc:206,Igrave:204,Iuml:207,Ntilde:209,Oacute:211,Ocirc:212,Ograve:210,Oslash:216,Otilde:213,Ouml:214,THORN:222,Uacute:218,Ucirc:219,Ugrave:217,Uuml:220,Yacute:221,aacute:225,acirc:226,aelig:230,agrave:224,aring:229,atilde:227,auml:228,ccedil:231,eacute:233,ecirc:234,egrave:232,eth:240,euml:235,iacute:237,icirc:238,igrave:236,iuml:239,ntilde:241,oacute:243,ocirc:244,ograve:242,oslash:248,otilde:245,ouml:246,szlig:223,thorn:254,uacute:250,ucirc:251,ugrave:249,uuml:252,yacute:253,yuml:255,copy:169,reg:174,nbsp:160,iexcl:161,cent:162,pound:163,curren:164,yen:165,brvbar:166,sect:167,uml:168,ordf:170,laquo:171,not:172,shy:173,macr:175,deg:176,plusmn:177,sup1:185,sup2:178,sup3:179,acute:180,micro:181,para:182,middot:183,cedil:184,ordm:186,raquo:187,frac14:188,frac12:189,frac34:190,iquest:191,times:215,divide:247,OElig:338,oelig:339,Scaron:352,scaron:353,Yuml:376,fnof:402,circ:710,tilde:732,Alpha:913,Beta:914,Gamma:915,Delta:916,Epsilon:917,Zeta:918,Eta:919,Theta:920,Iota:921,Kappa:922,Lambda:923,Mu:924,Nu:925,Xi:926,Omicron:927,Pi:928,Rho:929,Sigma:931,Tau:932,Upsilon:933,Phi:934,Chi:935,Psi:936,Omega:937,alpha:945,beta:946,gamma:947,delta:948,epsilon:949,zeta:950,eta:951,theta:952,iota:953,kappa:954,lambda:955,mu:956,nu:957,xi:958,omicron:959,pi:960,rho:961,sigmaf:962,sigma:963,tau:964,upsilon:965,phi:966,chi:967,psi:968,omega:969,thetasym:977,upsih:978,piv:982,ensp:8194,emsp:8195,thinsp:8201,zwnj:8204,zwj:8205,lrm:8206,rlm:8207,ndash:8211,mdash:8212,lsquo:8216,rsquo:8217,sbquo:8218,ldquo:8220,rdquo:8221,bdquo:8222,dagger:8224,Dagger:8225,bull:8226,hellip:8230,permil:8240,prime:8242,Prime:8243,lsaquo:8249,rsaquo:8250,oline:8254,frasl:8260,euro:8364,image:8465,weierp:8472,real:8476,trade:8482,alefsym:8501,larr:8592,uarr:8593,rarr:8594,darr:8595,harr:8596,crarr:8629,lArr:8656,uArr:8657,rArr:8658,dArr:8659,hArr:8660,forall:8704,part:8706,exist:8707,empty:8709,nabla:8711,isin:8712,notin:8713,ni:8715,prod:8719,sum:8721,minus:8722,lowast:8727,radic:8730,prop:8733,infin:8734,ang:8736,and:8743,or:8744,cap:8745,cup:8746,int:8747,there4:8756,sim:8764,cong:8773,asymp:8776,ne:8800,equiv:8801,le:8804,ge:8805,sub:8834,sup:8835,nsub:8836,sube:8838,supe:8839,oplus:8853,otimes:8855,perp:8869,sdot:8901,lceil:8968,rceil:8969,lfloor:8970,rfloor:8971,lang:9001,rang:9002,loz:9674,spades:9824,clubs:9827,hearts:9829,diams:9830},Object.keys(e.ENTITIES).forEach(function(S){var y=e.ENTITIES[S],R=typeof y=="number"?String.fromCharCode(y):y;e.ENTITIES[S]=R});for(var F in e.STATE)e.STATE[e.STATE[F]]=F;C=e.STATE;function z(S,y,R){S[y]&&S[y](R)}function H(S,y,R){S.textNode&&V(S),z(S,y,R)}function V(S){S.textNode=$(S.opt,S.textNode),S.textNode&&z(S,"ontext",S.textNode),S.textNode=""}function $(S,y){return S.trim&&(y=y.trim()),S.normalize&&(y=y.replace(/\s+/g," ")),y}function j(S,y){return V(S),S.trackPosition&&(y+=`
Line: `+S.line+`
Column: `+S.column+`
Char: `+S.c),y=new Error(y),S.error=y,z(S,"onerror",y),S}function ae(S){return S.sawRoot&&!S.closedRoot&&J(S,"Unclosed root tag"),S.state!==C.BEGIN&&S.state!==C.BEGIN_WHITESPACE&&S.state!==C.TEXT&&j(S,"Unexpected end"),V(S),S.c="",S.closed=!0,z(S,"onend"),i.call(S,S.strict,S.opt),S}function J(S,y){if(typeof S!="object"||!(S instanceof i))throw new Error("bad call to strictFail");S.strict&&j(S,y)}function _e(S){S.strict||(S.tagName=S.tagName[S.looseCase]());var y=S.tags[S.tags.length-1]||S,R=S.tag={name:S.tagName,attributes:{}};S.opt.xmlns&&(R.ns=y.ns),S.attribList.length=0,H(S,"onopentagstart",R)}function Ve(S,y){var R=S.indexOf(":"),L=R<0?["",S]:S.split(":"),P=L[0],q=L[1];return y&&S==="xmlns"&&(P="xmlns",q=""),{prefix:P,local:q}}function Nt(S){if(S.strict||(S.attribName=S.attribName[S.looseCase]()),S.attribList.indexOf(S.attribName)!==-1||S.tag.attributes.hasOwnProperty(S.attribName)){S.attribName=S.attribValue="";return}if(S.opt.xmlns){var y=Ve(S.attribName,!0),R=y.prefix,L=y.local;if(R==="xmlns")if(L==="xml"&&S.attribValue!==E)J(S,"xml: prefix must be bound to "+E+`
Actual: `+S.attribValue);else if(L==="xmlns"&&S.attribValue!==w)J(S,"xmlns: prefix must be bound to "+w+`
Actual: `+S.attribValue);else{var P=S.tag,q=S.tags[S.tags.length-1]||S;P.ns===q.ns&&(P.ns=Object.create(q.ns)),P.ns[L]=S.attribValue}S.attribList.push([S.attribName,S.attribValue])}else S.tag.attributes[S.attribName]=S.attribValue,H(S,"onattribute",{name:S.attribName,value:S.attribValue});S.attribName=S.attribValue=""}function De(S,y){if(S.opt.xmlns){var R=S.tag,L=Ve(S.tagName);R.prefix=L.prefix,R.local=L.local,R.uri=R.ns[L.prefix]||"",R.prefix&&!R.uri&&(J(S,"Unbound namespace prefix: "+JSON.stringify(S.tagName)),R.uri=L.prefix);var P=S.tags[S.tags.length-1]||S;R.ns&&P.ns!==R.ns&&Object.keys(R.ns).forEach(function(al){H(S,"onopennamespace",{prefix:al,uri:R.ns[al]})});for(var q=0,X=S.attribList.length;q<X;q++){var ie=S.attribList[q],me=ie[0],yt=ie[1],qe=Ve(me,!0),Lt=qe.prefix,j0=qe.local,ol=Lt===""?"":R.ns[Lt]||"",uo={name:me,value:yt,prefix:Lt,local:j0,uri:ol};Lt&&Lt!=="xmlns"&&!ol&&(J(S,"Unbound namespace prefix: "+JSON.stringify(Lt)),uo.uri=Lt),S.tag.attributes[me]=uo,H(S,"onattribute",uo)}S.attribList.length=0}S.tag.isSelfClosing=!!y,S.sawRoot=!0,S.tags.push(S.tag),H(S,"onopentag",S.tag),y||(!S.noscript&&S.tagName.toLowerCase()==="script"?S.state=C.SCRIPT:S.state=C.TEXT,S.tag=null,S.tagName=""),S.attribName=S.attribValue="",S.attribList.length=0}function Me(S){if(!S.tagName){J(S,"Weird empty close tag."),S.textNode+="</>",S.state=C.TEXT;return}if(S.script){if(S.tagName!=="script"){S.script+="</"+S.tagName+">",S.tagName="",S.state=C.SCRIPT;return}H(S,"onscript",S.script),S.script=""}var y=S.tags.length,R=S.tagName;S.strict||(R=R[S.looseCase]());for(var L=R;y--;){var P=S.tags[y];if(P.name!==L)J(S,"Unexpected close tag");else break}if(y<0){J(S,"Unmatched closing tag: "+S.tagName),S.textNode+="</"+S.tagName+">",S.state=C.TEXT;return}S.tagName=R;for(var q=S.tags.length;q-- >y;){var X=S.tag=S.tags.pop();S.tagName=S.tag.name,H(S,"onclosetag",S.tagName);var ie={};for(var me in X.ns)ie[me]=X.ns[me];var yt=S.tags[S.tags.length-1]||S;S.opt.xmlns&&X.ns!==yt.ns&&Object.keys(X.ns).forEach(function(qe){var Lt=X.ns[qe];H(S,"onclosenamespace",{prefix:qe,uri:Lt})})}y===0&&(S.closedRoot=!0),S.tagName=S.attribValue=S.attribName="",S.attribList.length=0,S.state=C.TEXT}function Xt(S){var y=S.entity,R=y.toLowerCase(),L,P="";return S.ENTITIES[y]?S.ENTITIES[y]:S.ENTITIES[R]?S.ENTITIES[R]:(y=R,y.charAt(0)==="#"&&(y.charAt(1)==="x"?(y=y.slice(2),L=parseInt(y,16),P=L.toString(16)):(y=y.slice(1),L=parseInt(y,10),P=L.toString(10))),y=y.replace(/^0+/,""),P.toLowerCase()!==y?(J(S,"Invalid character entity"),"&"+S.entity+";"):String.fromCodePoint(L))}function Yt(S,y){y==="<"?(S.state=C.OPEN_WAKA,S.startTagPosition=S.position):N(f,y)&&(J(S,"Non-whitespace before first tag."),S.textNode=y,S.state=C.TEXT)}function Ie(S,y){var R="";return y<S.length&&(R=S.charAt(y)),R}function co(S){var y=this;if(this.error)throw this.error;if(y.closed)return j(y,"Cannot write after close. Assign an onready handler.");if(S===null)return ae(y);typeof S=="object"&&(S=S.toString());for(var R=0,L="";L=Ie(S,R++),y.c=L,!!L;)switch(y.trackPosition&&(y.position++,L===`
`?(y.line++,y.column=0):y.column++),y.state){case C.BEGIN:if(y.state=C.BEGIN_WHITESPACE,L==="\uFEFF")continue;Yt(y,L);continue;case C.BEGIN_WHITESPACE:Yt(y,L);continue;case C.TEXT:if(y.sawRoot&&!y.closedRoot){for(var P=R-1;L&&L!=="<"&&L!=="&";)L=Ie(S,R++),L&&y.trackPosition&&(y.position++,L===`
`?(y.line++,y.column=0):y.column++);y.textNode+=S.substring(P,R-1)}L==="<"&&!(y.sawRoot&&y.closedRoot&&!y.strict)?(y.state=C.OPEN_WAKA,y.startTagPosition=y.position):(N(f,L)&&(!y.sawRoot||y.closedRoot)&&J(y,"Text data outside of root node."),L==="&"?y.state=C.TEXT_ENTITY:y.textNode+=L);continue;case C.SCRIPT:L==="<"?y.state=C.SCRIPT_ENDING:y.script+=L;continue;case C.SCRIPT_ENDING:L==="/"?y.state=C.CLOSE_TAG:(y.script+="<"+L,y.state=C.SCRIPT);continue;case C.OPEN_WAKA:if(L==="!")y.state=C.SGML_DECL,y.sgmlDecl="";else if(!T(f,L))if(T(d,L))y.state=C.OPEN_TAG,y.tagName=L;else if(L==="/")y.state=C.CLOSE_TAG,y.tagName="";else if(L==="?")y.state=C.PROC_INST,y.procInstName=y.procInstBody="";else{if(J(y,"Unencoded <"),y.startTagPosition+1<y.position){var q=y.position-y.startTagPosition;L=new Array(q).join(" ")+L}y.textNode+="<"+L,y.state=C.TEXT}continue;case C.SGML_DECL:(y.sgmlDecl+L).toUpperCase()===v?(H(y,"onopencdata"),y.state=C.CDATA,y.sgmlDecl="",y.cdata=""):y.sgmlDecl+L==="--"?(y.state=C.COMMENT,y.comment="",y.sgmlDecl=""):(y.sgmlDecl+L).toUpperCase()===_?(y.state=C.DOCTYPE,(y.doctype||y.sawRoot)&&J(y,"Inappropriately located doctype declaration"),y.doctype="",y.sgmlDecl=""):L===">"?(H(y,"onsgmldeclaration",y.sgmlDecl),y.sgmlDecl="",y.state=C.TEXT):(T(l,L)&&(y.state=C.SGML_DECL_QUOTED),y.sgmlDecl+=L);continue;case C.SGML_DECL_QUOTED:L===y.q&&(y.state=C.SGML_DECL,y.q=""),y.sgmlDecl+=L;continue;case C.DOCTYPE:L===">"?(y.state=C.TEXT,H(y,"ondoctype",y.doctype),y.doctype=!0):(y.doctype+=L,L==="["?y.state=C.DOCTYPE_DTD:T(l,L)&&(y.state=C.DOCTYPE_QUOTED,y.q=L));continue;case C.DOCTYPE_QUOTED:y.doctype+=L,L===y.q&&(y.q="",y.state=C.DOCTYPE);continue;case C.DOCTYPE_DTD:y.doctype+=L,L==="]"?y.state=C.DOCTYPE:T(l,L)&&(y.state=C.DOCTYPE_DTD_QUOTED,y.q=L);continue;case C.DOCTYPE_DTD_QUOTED:y.doctype+=L,L===y.q&&(y.state=C.DOCTYPE_DTD,y.q="");continue;case C.COMMENT:L==="-"?y.state=C.COMMENT_ENDING:y.comment+=L;continue;case C.COMMENT_ENDING:L==="-"?(y.state=C.COMMENT_ENDED,y.comment=$(y.opt,y.comment),y.comment&&H(y,"oncomment",y.comment),y.comment=""):(y.comment+="-"+L,y.state=C.COMMENT);continue;case C.COMMENT_ENDED:L!==">"?(J(y,"Malformed comment"),y.comment+="--"+L,y.state=C.COMMENT):y.state=C.TEXT;continue;case C.CDATA:L==="]"?y.state=C.CDATA_ENDING:y.cdata+=L;continue;case C.CDATA_ENDING:L==="]"?y.state=C.CDATA_ENDING_2:(y.cdata+="]"+L,y.state=C.CDATA);continue;case C.CDATA_ENDING_2:L===">"?(y.cdata&&H(y,"oncdata",y.cdata),H(y,"onclosecdata"),y.cdata="",y.state=C.TEXT):L==="]"?y.cdata+="]":(y.cdata+="]]"+L,y.state=C.CDATA);continue;case C.PROC_INST:L==="?"?y.state=C.PROC_INST_ENDING:T(f,L)?y.state=C.PROC_INST_BODY:y.procInstName+=L;continue;case C.PROC_INST_BODY:if(!y.procInstBody&&T(f,L))continue;L==="?"?y.state=C.PROC_INST_ENDING:y.procInstBody+=L;continue;case C.PROC_INST_ENDING:L===">"?(H(y,"onprocessinginstruction",{name:y.procInstName,body:y.procInstBody}),y.procInstName=y.procInstBody="",y.state=C.TEXT):(y.procInstBody+="?"+L,y.state=C.PROC_INST_BODY);continue;case C.OPEN_TAG:T(h,L)?y.tagName+=L:(_e(y),L===">"?De(y):L==="/"?y.state=C.OPEN_TAG_SLASH:(N(f,L)&&J(y,"Invalid character in tag name"),y.state=C.ATTRIB));continue;case C.OPEN_TAG_SLASH:L===">"?(De(y,!0),Me(y)):(J(y,"Forward-slash in opening tag not followed by >"),y.state=C.ATTRIB);continue;case C.ATTRIB:if(T(f,L))continue;L===">"?De(y):L==="/"?y.state=C.OPEN_TAG_SLASH:T(d,L)?(y.attribName=L,y.attribValue="",y.state=C.ATTRIB_NAME):J(y,"Invalid attribute name");continue;case C.ATTRIB_NAME:L==="="?y.state=C.ATTRIB_VALUE:L===">"?(J(y,"Attribute without value"),y.attribValue=y.attribName,Nt(y),De(y)):T(f,L)?y.state=C.ATTRIB_NAME_SAW_WHITE:T(h,L)?y.attribName+=L:J(y,"Invalid attribute name");continue;case C.ATTRIB_NAME_SAW_WHITE:if(L==="=")y.state=C.ATTRIB_VALUE;else{if(T(f,L))continue;J(y,"Attribute without value"),y.tag.attributes[y.attribName]="",y.attribValue="",H(y,"onattribute",{name:y.attribName,value:""}),y.attribName="",L===">"?De(y):T(d,L)?(y.attribName=L,y.state=C.ATTRIB_NAME):(J(y,"Invalid attribute name"),y.state=C.ATTRIB)}continue;case C.ATTRIB_VALUE:if(T(f,L))continue;T(l,L)?(y.q=L,y.state=C.ATTRIB_VALUE_QUOTED):(J(y,"Unquoted attribute value"),y.state=C.ATTRIB_VALUE_UNQUOTED,y.attribValue=L);continue;case C.ATTRIB_VALUE_QUOTED:if(L!==y.q){L==="&"?y.state=C.ATTRIB_VALUE_ENTITY_Q:y.attribValue+=L;continue}Nt(y),y.q="",y.state=C.ATTRIB_VALUE_CLOSED;continue;case C.ATTRIB_VALUE_CLOSED:T(f,L)?y.state=C.ATTRIB:L===">"?De(y):L==="/"?y.state=C.OPEN_TAG_SLASH:T(d,L)?(J(y,"No whitespace between attributes"),y.attribName=L,y.attribValue="",y.state=C.ATTRIB_NAME):J(y,"Invalid attribute name");continue;case C.ATTRIB_VALUE_UNQUOTED:if(N(m,L)){L==="&"?y.state=C.ATTRIB_VALUE_ENTITY_U:y.attribValue+=L;continue}Nt(y),L===">"?De(y):y.state=C.ATTRIB;continue;case C.CLOSE_TAG:if(y.tagName)L===">"?Me(y):T(h,L)?y.tagName+=L:y.script?(y.script+="</"+y.tagName,y.tagName="",y.state=C.SCRIPT):(N(f,L)&&J(y,"Invalid tagname in closing tag"),y.state=C.CLOSE_TAG_SAW_WHITE);else{if(T(f,L))continue;N(d,L)?y.script?(y.script+="</"+L,y.state=C.SCRIPT):J(y,"Invalid tagname in closing tag."):y.tagName=L}continue;case C.CLOSE_TAG_SAW_WHITE:if(T(f,L))continue;L===">"?Me(y):J(y,"Invalid characters in closing tag");continue;case C.TEXT_ENTITY:case C.ATTRIB_VALUE_ENTITY_Q:case C.ATTRIB_VALUE_ENTITY_U:var X,ie;switch(y.state){case C.TEXT_ENTITY:X=C.TEXT,ie="textNode";break;case C.ATTRIB_VALUE_ENTITY_Q:X=C.ATTRIB_VALUE_QUOTED,ie="attribValue";break;case C.ATTRIB_VALUE_ENTITY_U:X=C.ATTRIB_VALUE_UNQUOTED,ie="attribValue";break}L===";"?(y[ie]+=Xt(y),y.entity="",y.state=X):T(y.entity.length?O:b,L)?y.entity+=L:(J(y,"Invalid character in entity name"),y[ie]+="&"+y.entity+L,y.entity="",y.state=X);continue;default:throw new Error(y,"Unknown state: "+y.state)}return y.position>=y.bufferCheckPosition&&r(y),y}String.fromCodePoint||function(){var S=String.fromCharCode,y=Math.floor,R=function(){var L=16384,P=[],q,X,ie=-1,me=arguments.length;if(!me)return"";for(var yt="";++ie<me;){var qe=Number(arguments[ie]);if(!isFinite(qe)||qe<0||qe>1114111||y(qe)!==qe)throw RangeError("Invalid code point: "+qe);qe<=65535?P.push(qe):(qe-=65536,q=(qe>>10)+55296,X=qe%1024+56320,P.push(q,X)),(ie+1===me||P.length>L)&&(yt+=S.apply(null,P),P.length=0)}return yt};Object.defineProperty?Object.defineProperty(String,"fromCodePoint",{value:R,configurable:!0,writable:!0}):String.fromCodePoint=R}()})(typeof Js>"u"?Js.sax={}:Js)});var i0=k(Yu=>{"use strict";(function(){"use strict";Yu.stripBOM=function(e){return e[0]==="\uFEFF"?e.substring(1):e}}).call(Yu)});var Wu=k(Oi=>{"use strict";(function(){"use strict";var e;e=new RegExp(/(?!xmlns)^.*:/),Oi.normalize=function(t){return t.toLowerCase()},Oi.firstCharLowerCase=function(t){return t.charAt(0).toLowerCase()+t.slice(1)},Oi.stripPrefix=function(t){return t.replace(e,"")},Oi.parseNumbers=function(t){return isNaN(t)||(t=t%1===0?parseInt(t,10):parseFloat(t)),t},Oi.parseBooleans=function(t){return/^(?:true|false)$/i.test(t)&&(t=t.toLowerCase()==="true"),t}}).call(Oi)});var r0=k(Gt=>{"use strict";(function(){"use strict";var e,t,i,r,n,s,o,a,c,u=function(x,l){return function(){return x.apply(l,arguments)}},f=function(x,l){for(var m in l)g.call(l,m)&&(x[m]=l[m]);function v(){this.constructor=x}return v.prototype=l.prototype,x.prototype=new v,x.__super__=l.prototype,x},g={}.hasOwnProperty;a=t0(),r=require("events"),e=i0(),o=Wu(),c=require("timers").setImmediate,t=Fs().defaults,n=function(x){return typeof x=="object"&&x!=null&&Object.keys(x).length===0},s=function(x,l,m){var v,_,E;for(v=0,_=x.length;v<_;v++)E=x[v],l=E(l,m);return l},i=function(x,l,m){var v;return v=Object.create(null),v.value=m,v.writable=!0,v.enumerable=!0,v.configurable=!0,Object.defineProperty(x,l,v)},Gt.Parser=function(x){f(l,x);function l(m){this.parseStringPromise=u(this.parseStringPromise,this),this.parseString=u(this.parseString,this),this.reset=u(this.reset,this),this.assignOrPush=u(this.assignOrPush,this),this.processAsync=u(this.processAsync,this);var v,_,E;if(!(this instanceof Gt.Parser))return new Gt.Parser(m);this.options={},_=t["0.2"];for(v in _)g.call(_,v)&&(E=_[v],this.options[v]=E);for(v in m)g.call(m,v)&&(E=m[v],this.options[v]=E);this.options.xmlns&&(this.options.xmlnskey=this.options.attrkey+"ns"),this.options.normalizeTags&&(this.options.tagNameProcessors||(this.options.tagNameProcessors=[]),this.options.tagNameProcessors.unshift(o.normalize)),this.reset()}return l.prototype.processAsync=function(){var m,v;try{return this.remaining.length<=this.options.chunkSize?(m=this.remaining,this.remaining="",this.saxParser=this.saxParser.write(m),this.saxParser.close()):(m=this.remaining.substr(0,this.options.chunkSize),this.remaining=this.remaining.substr(this.options.chunkSize,this.remaining.length),this.saxParser=this.saxParser.write(m),c(this.processAsync))}catch(_){if(v=_,!this.saxParser.errThrown)return this.saxParser.errThrown=!0,this.emit(v)}},l.prototype.assignOrPush=function(m,v,_){return v in m?(m[v]instanceof Array||i(m,v,[m[v]]),m[v].push(_)):this.options.explicitArray?i(m,v,[_]):i(m,v,_)},l.prototype.reset=function(){var m,v,_,E;return this.removeAllListeners(),this.saxParser=a.parser(this.options.strict,{trim:!1,normalize:!1,xmlns:this.options.xmlns}),this.saxParser.errThrown=!1,this.saxParser.onerror=function(w){return function(p){if(w.saxParser.resume(),!w.saxParser.errThrown)return w.saxParser.errThrown=!0,w.emit("error",p)}}(this),this.saxParser.onend=function(w){return function(){if(!w.saxParser.ended)return w.saxParser.ended=!0,w.emit("end",w.resultObject)}}(this),this.saxParser.ended=!1,this.EXPLICIT_CHARKEY=this.options.explicitCharkey,this.resultObject=null,E=[],m=this.options.attrkey,v=this.options.charkey,this.saxParser.onopentag=function(w){return function(p){var d,h,b,O,D;if(b={},b[v]="",!w.options.ignoreAttrs){D=p.attributes;for(d in D)g.call(D,d)&&(!(m in b)&&!w.options.mergeAttrs&&(b[m]={}),h=w.options.attrValueProcessors?s(w.options.attrValueProcessors,p.attributes[d],d):p.attributes[d],O=w.options.attrNameProcessors?s(w.options.attrNameProcessors,d):d,w.options.mergeAttrs?w.assignOrPush(b,O,h):i(b[m],O,h))}return b["#name"]=w.options.tagNameProcessors?s(w.options.tagNameProcessors,p.name):p.name,w.options.xmlns&&(b[w.options.xmlnskey]={uri:p.uri,local:p.local}),E.push(b)}}(this),this.saxParser.onclosetag=function(w){return function(){var p,d,h,b,O,D,A,T,N,C;if(D=E.pop(),O=D["#name"],(!w.options.explicitChildren||!w.options.preserveChildrenOrder)&&delete D["#name"],D.cdata===!0&&(p=D.cdata,delete D.cdata),N=E[E.length-1],D[v].match(/^\s*$/)&&!p?(d=D[v],delete D[v]):(w.options.trim&&(D[v]=D[v].trim()),w.options.normalize&&(D[v]=D[v].replace(/\s{2,}/g," ").trim()),D[v]=w.options.valueProcessors?s(w.options.valueProcessors,D[v],O):D[v],Object.keys(D).length===1&&v in D&&!w.EXPLICIT_CHARKEY&&(D=D[v])),n(D)&&(typeof w.options.emptyTag=="function"?D=w.options.emptyTag():D=w.options.emptyTag!==""?w.options.emptyTag:d),w.options.validator!=null&&(C="/"+function(){var F,z,H;for(H=[],F=0,z=E.length;F<z;F++)b=E[F],H.push(b["#name"]);return H}().concat(O).join("/"),function(){var F;try{return D=w.options.validator(C,N&&N[O],D)}catch(z){return F=z,w.emit("error",F)}}()),w.options.explicitChildren&&!w.options.mergeAttrs&&typeof D=="object"){if(!w.options.preserveChildrenOrder)b={},w.options.attrkey in D&&(b[w.options.attrkey]=D[w.options.attrkey],delete D[w.options.attrkey]),!w.options.charsAsChildren&&w.options.charkey in D&&(b[w.options.charkey]=D[w.options.charkey],delete D[w.options.charkey]),Object.getOwnPropertyNames(D).length>0&&(b[w.options.childkey]=D),D=b;else if(N){N[w.options.childkey]=N[w.options.childkey]||[],A={};for(h in D)g.call(D,h)&&i(A,h,D[h]);N[w.options.childkey].push(A),delete D["#name"],Object.keys(D).length===1&&v in D&&!w.EXPLICIT_CHARKEY&&(D=D[v])}}return E.length>0?w.assignOrPush(N,O,D):(w.options.explicitRoot&&(T=D,D={},i(D,O,T)),w.resultObject=D,w.saxParser.ended=!0,w.emit("end",w.resultObject))}}(this),_=function(w){return function(p){var d,h;if(h=E[E.length-1],h)return h[v]+=p,w.options.explicitChildren&&w.options.preserveChildrenOrder&&w.options.charsAsChildren&&(w.options.includeWhiteChars||p.replace(/\\n/g,"").trim()!=="")&&(h[w.options.childkey]=h[w.options.childkey]||[],d={"#name":"__text__"},d[v]=p,w.options.normalize&&(d[v]=d[v].replace(/\s{2,}/g," ").trim()),h[w.options.childkey].push(d)),h}}(this),this.saxParser.ontext=_,this.saxParser.oncdata=function(w){return function(p){var d;if(d=_(p),d)return d.cdata=!0}}(this)},l.prototype.parseString=function(m,v){var _;v!=null&&typeof v=="function"&&(this.on("end",function(E){return this.reset(),v(null,E)}),this.on("error",function(E){return this.reset(),v(E)}));try{return m=m.toString(),m.trim()===""?(this.emit("end",null),!0):(m=e.stripBOM(m),this.options.async?(this.remaining=m,c(this.processAsync),this.saxParser):this.saxParser.write(m).close())}catch(E){if(_=E,this.saxParser.errThrown||this.saxParser.ended){if(this.saxParser.ended)throw _}else return this.emit("error",_),this.saxParser.errThrown=!0}},l.prototype.parseStringPromise=function(m){return new Promise(function(v){return function(_,E){return v.parseString(m,function(w,p){return w?E(w):_(p)})}}(this))},l}(r),Gt.parseString=function(x,l,m){var v,_,E;return m!=null?(typeof m=="function"&&(v=m),typeof l=="object"&&(_=l)):(typeof l=="function"&&(v=l),_={}),E=new Gt.Parser(_),E.parseString(x,v)},Gt.parseStringPromise=function(x,l){var m,v;return typeof l=="object"&&(m=l),v=new Gt.Parser(m),v.parseStringPromise(x)}}).call(Gt)});var n0=k(Vt=>{"use strict";(function(){"use strict";var e,t,i,r,n=function(o,a){for(var c in a)s.call(a,c)&&(o[c]=a[c]);function u(){this.constructor=o}return u.prototype=a.prototype,o.prototype=new u,o.__super__=a.prototype,o},s={}.hasOwnProperty;t=Fs(),e=e0(),i=r0(),r=Wu(),Vt.defaults=t.defaults,Vt.processors=r,Vt.ValidationError=function(o){n(a,o);function a(c){this.message=c}return a}(Error),Vt.Builder=e.Builder,Vt.Parser=i.Parser,Vt.parseString=i.parseString,Vt.parseStringPromise=i.parseStringPromise}).call(Vt)});var g0=k(ft=>{"use strict";var Mk=/[|\\{}()[\]^$+*?.]/g,qk=Object.prototype.hasOwnProperty,el=function(e,t){return qk.apply(e,[t])};ft.escapeRegExpChars=function(e){return e?String(e).replace(Mk,"\\$&"):""};var Bk={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&#34;","'":"&#39;"},Uk=/[&<>'"]/g;function $k(e){return Bk[e]||e}var zk=`var _ENCODE_HTML_RULES = {
      "&": "&amp;"
    , "<": "&lt;"
    , ">": "&gt;"
    , '"': "&#34;"
    , "'": "&#39;"
    }
  , _MATCH_HTML = /[&<>'"]/g;
function encode_char(c) {
  return _ENCODE_HTML_RULES[c] || c;
};
`;ft.escapeXML=function(e){return e==null?"":String(e).replace(Uk,$k)};function m0(){return Function.prototype.toString.call(this)+`;
`+zk}try{typeof Object.defineProperty=="function"?Object.defineProperty(ft.escapeXML,"toString",{value:m0}):ft.escapeXML.toString=m0}catch{console.warn("Unable to set escapeXML.toString (is the Function prototype frozen?)")}ft.shallowCopy=function(e,t){if(t=t||{},e!=null)for(var i in t)el(t,i)&&(i==="__proto__"||i==="constructor"||(e[i]=t[i]));return e};ft.shallowCopyFromList=function(e,t,i){if(i=i||[],t=t||{},e!=null)for(var r=0;r<i.length;r++){var n=i[r];if(typeof t[n]<"u"){if(!el(t,n)||n==="__proto__"||n==="constructor")continue;e[n]=t[n]}}return e};ft.cache={_data:{},set:function(e,t){this._data[e]=t},get:function(e){return this._data[e]},remove:function(e){delete this._data[e]},reset:function(){this._data={}}};ft.hyphenToCamel=function(e){return e.replace(/-[a-z]/g,function(t){return t[1].toUpperCase()})};ft.createNullProtoObjWherePossible=function(){return typeof Object.create=="function"?function(){return Object.create(null)}:{__proto__:null}instanceof Object?function(){return{}}:function(){return{__proto__:null}}}();ft.hasOwnOnlyObject=function(e){var t=ft.createNullProtoObjWherePossible();for(var i in e)el(e,i)&&(t[i]=e[i]);return t}});var x0=k((qB,Hk)=>{Hk.exports={name:"ejs",description:"Embedded JavaScript templates",keywords:["template","engine","ejs"],version:"3.1.10",author:"Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)",license:"Apache-2.0",bin:{ejs:"./bin/cli.js"},main:"./lib/ejs.js",jsdelivr:"ejs.min.js",unpkg:"ejs.min.js",repository:{type:"git",url:"git://github.com/mde/ejs.git"},bugs:"https://github.com/mde/ejs/issues",homepage:"https://github.com/mde/ejs",dependencies:{jake:"^10.8.5"},devDependencies:{browserify:"^16.5.1",eslint:"^6.8.0","git-directory-deploy":"^1.5.1",jsdoc:"^4.0.2","lru-cache":"^4.0.1",mocha:"^10.2.0","uglify-js":"^3.3.16"},engines:{node:">=0.10.0"},scripts:{test:"npx jake test"}}});var C0=k(te=>{"use strict";var il=require("fs"),an=require("path"),Oe=g0(),v0=!1,Gk=x0().version,Vk="<",Xk=">",Yk="%",T0="locals",Wk="ejs",Kk="(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)",S0=["delimiter","scope","context","debug","compileDebug","client","_with","rmWhitespace","strict","filename","async"],Jk=S0.concat("cache"),y0=/^\uFEFF/,tl=/^[a-zA-Z_$][0-9a-zA-Z_$]*$/;te.cache=Oe.cache;te.fileLoader=il.readFileSync;te.localsName=T0;te.promiseImpl=new Function("return this;")().Promise;te.resolveInclude=function(e,t,i){var r=an.dirname,n=an.extname,s=an.resolve,o=s(i?t:r(t),e),a=n(e);return a||(o+=".ejs"),o};function b0(e,t){var i;if(t.some(function(r){return i=te.resolveInclude(e,r,!0),il.existsSync(i)}))return i}function Zk(e,t){var i,r,n=t.views,s=/^[A-Za-z]+:\\|^\//.exec(e);if(s&&s.length)e=e.replace(/^\/*/,""),Array.isArray(t.root)?i=b0(e,t.root):i=te.resolveInclude(e,t.root||"/",!0);else if(t.filename&&(r=te.resolveInclude(e,t.filename),il.existsSync(r)&&(i=r)),!i&&Array.isArray(n)&&(i=b0(e,n)),!i&&typeof t.includer!="function")throw new Error('Could not find the include file "'+t.escapeFunction(e)+'"');return i}function cn(e,t){var i,r=e.filename,n=arguments.length>1;if(e.cache){if(!r)throw new Error("cache option requires a filename");if(i=te.cache.get(r),i)return i;n||(t=w0(r).toString().replace(y0,""))}else if(!n){if(!r)throw new Error("Internal EJS error: no file name or template provided");t=w0(r).toString().replace(y0,"")}return i=te.compile(t,e),e.cache&&te.cache.set(r,i),i}function Qk(e,t,i){var r;if(i){try{r=cn(e)(t)}catch(n){return i(n)}i(null,r)}else{if(typeof te.promiseImpl=="function")return new te.promiseImpl(function(n,s){try{r=cn(e)(t),n(r)}catch(o){s(o)}});throw new Error("Please provide a callback function")}}function w0(e){return te.fileLoader(e)}function eR(e,t){var i=Oe.shallowCopy(Oe.createNullProtoObjWherePossible(),t);if(i.filename=Zk(e,i),typeof t.includer=="function"){var r=t.includer(e,i.filename);if(r&&(r.filename&&(i.filename=r.filename),r.template))return cn(i,r.template)}return cn(i)}function E0(e,t,i,r,n){var s=t.split(`
`),o=Math.max(r-3,0),a=Math.min(s.length,r+3),c=n(i),u=s.slice(o,a).map(function(f,g){var x=g+o+1;return(x==r?" >> ":"    ")+x+"| "+f}).join(`
`);throw e.path=c,e.message=(c||"ejs")+":"+r+`
`+u+`

`+e.message,e}function _0(e){return e.replace(/;(\s*$)/,"$1")}te.compile=function(t,i){var r;return i&&i.scope&&(v0||(console.warn("`scope` option is deprecated and will be removed in EJS 3"),v0=!0),i.context||(i.context=i.scope),delete i.scope),r=new Pe(t,i),r.compile()};te.render=function(e,t,i){var r=t||Oe.createNullProtoObjWherePossible(),n=i||Oe.createNullProtoObjWherePossible();return arguments.length==2&&Oe.shallowCopyFromList(n,r,S0),cn(n,e)(r)};te.renderFile=function(){var e=Array.prototype.slice.call(arguments),t=e.shift(),i,r={filename:t},n,s;return typeof arguments[arguments.length-1]=="function"&&(i=e.pop()),e.length?(n=e.shift(),e.length?Oe.shallowCopy(r,e.pop()):(n.settings&&(n.settings.views&&(r.views=n.settings.views),n.settings["view cache"]&&(r.cache=!0),s=n.settings["view options"],s&&Oe.shallowCopy(r,s)),Oe.shallowCopyFromList(r,n,Jk)),r.filename=t):n=Oe.createNullProtoObjWherePossible(),Qk(r,n,i)};te.Template=Pe;te.clearCache=function(){te.cache.reset()};function Pe(e,t){var i=Oe.hasOwnOnlyObject(t),r=Oe.createNullProtoObjWherePossible();this.templateText=e,this.mode=null,this.truncate=!1,this.currentLine=1,this.source="",r.client=i.client||!1,r.escapeFunction=i.escape||i.escapeFunction||Oe.escapeXML,r.compileDebug=i.compileDebug!==!1,r.debug=!!i.debug,r.filename=i.filename,r.openDelimiter=i.openDelimiter||te.openDelimiter||Vk,r.closeDelimiter=i.closeDelimiter||te.closeDelimiter||Xk,r.delimiter=i.delimiter||te.delimiter||Yk,r.strict=i.strict||!1,r.context=i.context,r.cache=i.cache||!1,r.rmWhitespace=i.rmWhitespace,r.root=i.root,r.includer=i.includer,r.outputFunctionName=i.outputFunctionName,r.localsName=i.localsName||te.localsName||T0,r.views=i.views,r.async=i.async,r.destructuredLocals=i.destructuredLocals,r.legacyInclude=typeof i.legacyInclude<"u"?!!i.legacyInclude:!0,r.strict?r._with=!1:r._with=typeof i._with<"u"?i._with:!0,this.opts=r,this.regex=this.createRegex()}Pe.modes={EVAL:"eval",ESCAPED:"escaped",RAW:"raw",COMMENT:"comment",LITERAL:"literal"};Pe.prototype={createRegex:function(){var e=Kk,t=Oe.escapeRegExpChars(this.opts.delimiter),i=Oe.escapeRegExpChars(this.opts.openDelimiter),r=Oe.escapeRegExpChars(this.opts.closeDelimiter);return e=e.replace(/%/g,t).replace(/</g,i).replace(/>/g,r),new RegExp(e)},compile:function(){var e,t,i=this.opts,r="",n="",s=i.escapeFunction,o,a=i.filename?JSON.stringify(i.filename):"undefined";if(!this.source){if(this.generateSource(),r+=`  var __output = "";
  function __append(s) { if (s !== undefined && s !== null) __output += s }
`,i.outputFunctionName){if(!tl.test(i.outputFunctionName))throw new Error("outputFunctionName is not a valid JS identifier.");r+="  var "+i.outputFunctionName+` = __append;
`}if(i.localsName&&!tl.test(i.localsName))throw new Error("localsName is not a valid JS identifier.");if(i.destructuredLocals&&i.destructuredLocals.length){for(var c="  var __locals = ("+i.localsName+` || {}),
`,u=0;u<i.destructuredLocals.length;u++){var f=i.destructuredLocals[u];if(!tl.test(f))throw new Error("destructuredLocals["+u+"] is not a valid JS identifier.");u>0&&(c+=`,
  `),c+=f+" = __locals."+f}r+=c+`;
`}i._with!==!1&&(r+="  with ("+i.localsName+` || {}) {
`,n+=`  }
`),n+=`  return __output;
`,this.source=r+this.source+n}i.compileDebug?e=`var __line = 1
  , __lines = `+JSON.stringify(this.templateText)+`
  , __filename = `+a+`;
try {
`+this.source+`} catch (e) {
  rethrow(e, __lines, __filename, __line, escapeFn);
}
`:e=this.source,i.client&&(e="escapeFn = escapeFn || "+s.toString()+`;
`+e,i.compileDebug&&(e="rethrow = rethrow || "+E0.toString()+`;
`+e)),i.strict&&(e=`"use strict";
`+e),i.debug&&console.log(e),i.compileDebug&&i.filename&&(e=e+`
//# sourceURL=`+a+`
`);try{if(i.async)try{o=new Function("return (async function(){}).constructor;")()}catch(m){throw m instanceof SyntaxError?new Error("This environment does not support async/await"):m}else o=Function;t=new o(i.localsName+", escapeFn, include, rethrow",e)}catch(m){throw m instanceof SyntaxError&&(i.filename&&(m.message+=" in "+i.filename),m.message+=` while compiling ejs

`,m.message+=`If the above error is not helpful, you may want to try EJS-Lint:
`,m.message+="https://github.com/RyanZim/EJS-Lint",i.async||(m.message+=`
`,m.message+="Or, if you meant to create an async function, pass `async: true` as an option.")),m}var g=i.client?t:function(v){var _=function(E,w){var p=Oe.shallowCopy(Oe.createNullProtoObjWherePossible(),v);return w&&(p=Oe.shallowCopy(p,w)),eR(E,i)(p)};return t.apply(i.context,[v||Oe.createNullProtoObjWherePossible(),s,_,E0])};if(i.filename&&typeof Object.defineProperty=="function"){var x=i.filename,l=an.basename(x,an.extname(x));try{Object.defineProperty(g,"name",{value:l,writable:!1,enumerable:!1,configurable:!0})}catch{}}return g},generateSource:function(){var e=this.opts;e.rmWhitespace&&(this.templateText=this.templateText.replace(/[\r\n]+/g,`
`).replace(/^\s+|\s+$/gm,"")),this.templateText=this.templateText.replace(/[ \t]*<%_/gm,"<%_").replace(/_%>[ \t]*/gm,"_%>");var t=this,i=this.parseTemplateText(),r=this.opts.delimiter,n=this.opts.openDelimiter,s=this.opts.closeDelimiter;i&&i.length&&i.forEach(function(o,a){var c;if(o.indexOf(n+r)===0&&o.indexOf(n+r+r)!==0&&(c=i[a+2],!(c==r+s||c=="-"+r+s||c=="_"+r+s)))throw new Error('Could not find matching close tag for "'+o+'".');t.scanLine(o)})},parseTemplateText:function(){for(var e=this.templateText,t=this.regex,i=t.exec(e),r=[],n;i;)n=i.index,n!==0&&(r.push(e.substring(0,n)),e=e.slice(n)),r.push(i[0]),e=e.slice(i[0].length),i=t.exec(e);return e&&r.push(e),r},_addOutput:function(e){if(this.truncate&&(e=e.replace(/^(?:\r\n|\r|\n)/,""),this.truncate=!1),!e)return e;e=e.replace(/\\/g,"\\\\"),e=e.replace(/\n/g,"\\n"),e=e.replace(/\r/g,"\\r"),e=e.replace(/"/g,'\\"'),this.source+='    ; __append("'+e+`")
`},scanLine:function(e){var t=this,i=this.opts.delimiter,r=this.opts.openDelimiter,n=this.opts.closeDelimiter,s=0;switch(s=e.split(`
`).length-1,e){case r+i:case r+i+"_":this.mode=Pe.modes.EVAL;break;case r+i+"=":this.mode=Pe.modes.ESCAPED;break;case r+i+"-":this.mode=Pe.modes.RAW;break;case r+i+"#":this.mode=Pe.modes.COMMENT;break;case r+i+i:this.mode=Pe.modes.LITERAL,this.source+='    ; __append("'+e.replace(r+i+i,r+i)+`")
`;break;case i+i+n:this.mode=Pe.modes.LITERAL,this.source+='    ; __append("'+e.replace(i+i+n,i+n)+`")
`;break;case i+n:case"-"+i+n:case"_"+i+n:this.mode==Pe.modes.LITERAL&&this._addOutput(e),this.mode=null,this.truncate=e.indexOf("-")===0||e.indexOf("_")===0;break;default:if(this.mode){switch(this.mode){case Pe.modes.EVAL:case Pe.modes.ESCAPED:case Pe.modes.RAW:e.lastIndexOf("//")>e.lastIndexOf(`
`)&&(e+=`
`)}switch(this.mode){case Pe.modes.EVAL:this.source+="    ; "+e+`
`;break;case Pe.modes.ESCAPED:this.source+="    ; __append(escapeFn("+_0(e)+`))
`;break;case Pe.modes.RAW:this.source+="    ; __append("+_0(e)+`)
`;break;case Pe.modes.COMMENT:break;case Pe.modes.LITERAL:this._addOutput(e);break}}else this._addOutput(e)}t.opts.compileDebug&&s&&(this.currentLine+=s,this.source+="    ; __line = "+this.currentLine+`
`)}};te.escapeXML=Oe.escapeXML;te.__express=te.renderFile;te.VERSION=Gk;te.name=Wk;typeof window<"u"&&(window.ejs=te)});var fR={};cl(fR,{run:()=>dR});module.exports=z0(fR);var Ae=se(require("fs")),I0=se(require("os")),Ue=se(require("path")),N0=se($l()),L0=se(Vl()),sl=se(_h());var di=!0,Mi=typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{},wr=0;if(Mi.process&&Mi.process.env&&Mi.process.stdout){let{FORCE_COLOR:e,NODE_DISABLE_COLORS:t,NO_COLOR:i,TERM:r,COLORTERM:n}=Mi.process.env;t||i||e==="0"?di=!1:e==="1"||e==="2"||e==="3"?di=!0:r==="dumb"?di=!1:"CI"in Mi.process.env&&["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI","GITHUB_ACTIONS","BUILDKITE","DRONE"].some(s=>s in Mi.process.env)?di=!0:di=process.stdout.isTTY,di&&(process.platform==="win32"||n&&(n==="truecolor"||n==="24bit")?wr=3:r&&(r.endsWith("-256color")||r.endsWith("256"))?wr=2:wr=1)}var Th={enabled:di,supportLevel:wr};function Z(e,t,i=1){let r=`\x1B[${e}m`,n=`\x1B[${t}m`,s=new RegExp(`\\x1b\\[${t}m`,"g");return o=>Th.enabled&&Th.supportLevel>=i?r+(""+o).replace(s,r)+n:""+o}var qi=Z(0,0),GP=Z(1,22),VP=Z(2,22),XP=Z(3,23),YP=Z(4,24),WP=Z(7,27),KP=Z(8,28),JP=Z(9,29),ZP=Z(30,39),Oa=Z(31,39),QP=Z(32,39),Aa=Z(33,39),e2=Z(34,39),t2=Z(35,39),i2=Z(36,39),r2=Z(97,39),n2=Z(90,39),s2=Z(37,39),o2=Z(91,39),a2=Z(92,39),c2=Z(93,39),u2=Z(94,39),l2=Z(95,39),p2=Z(96,39),d2=Z(40,49),f2=Z(41,49),h2=Z(42,49),m2=Z(43,49),g2=Z(44,49),x2=Z(45,49),v2=Z(46,49),y2=Z(107,49),b2=Z(100,49),w2=Z(101,49),E2=Z(102,49),_2=Z(103,49),T2=Z(104,49),S2=Z(105,49),C2=Z(106,49),O2=Z(47,49);function Er(e,t){return function(){return e.apply(t,arguments)}}var{toString:hS}=Object.prototype,{getPrototypeOf:Na}=Object,Nn=(e=>t=>{let i=hS.call(t);return e[i]||(e[i]=i.slice(8,-1).toLowerCase())})(Object.create(null)),gt=e=>(e=e.toLowerCase(),t=>Nn(t)===e),Ln=e=>t=>typeof t===e,{isArray:Bi}=Array,_r=Ln("undefined");function mS(e){return e!==null&&!_r(e)&&e.constructor!==null&&!_r(e.constructor)&&lt(e.constructor.isBuffer)&&e.constructor.isBuffer(e)}var Oh=gt("ArrayBuffer");function gS(e){let t;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?t=ArrayBuffer.isView(e):t=e&&e.buffer&&Oh(e.buffer),t}var xS=Ln("string"),lt=Ln("function"),Ah=Ln("number"),kn=e=>e!==null&&typeof e=="object",vS=e=>e===!0||e===!1,In=e=>{if(Nn(e)!=="object")return!1;let t=Na(e);return(t===null||t===Object.prototype||Object.getPrototypeOf(t)===null)&&!(Symbol.toStringTag in e)&&!(Symbol.iterator in e)},yS=gt("Date"),bS=gt("File"),wS=gt("Blob"),ES=gt("FileList"),_S=e=>kn(e)&&lt(e.pipe),TS=e=>{let t;return e&&(typeof FormData=="function"&&e instanceof FormData||lt(e.append)&&((t=Nn(e))==="formdata"||t==="object"&&lt(e.toString)&&e.toString()==="[object FormData]"))},SS=gt("URLSearchParams"),[CS,OS,AS,DS]=["ReadableStream","Request","Response","Headers"].map(gt),IS=e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"");function Tr(e,t,{allOwnKeys:i=!1}={}){if(e===null||typeof e>"u")return;let r,n;if(typeof e!="object"&&(e=[e]),Bi(e))for(r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else{let s=i?Object.getOwnPropertyNames(e):Object.keys(e),o=s.length,a;for(r=0;r<o;r++)a=s[r],t.call(null,e[a],a,e)}}function Dh(e,t){t=t.toLowerCase();let i=Object.keys(e),r=i.length,n;for(;r-- >0;)if(n=i[r],t===n.toLowerCase())return n;return null}var Ih=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:global,Nh=e=>!_r(e)&&e!==Ih;function Ia(){let{caseless:e}=Nh(this)&&this||{},t={},i=(r,n)=>{let s=e&&Dh(t,n)||n;In(t[s])&&In(r)?t[s]=Ia(t[s],r):In(r)?t[s]=Ia({},r):Bi(r)?t[s]=r.slice():t[s]=r};for(let r=0,n=arguments.length;r<n;r++)arguments[r]&&Tr(arguments[r],i);return t}var NS=(e,t,i,{allOwnKeys:r}={})=>(Tr(t,(n,s)=>{i&&lt(n)?e[s]=Er(n,i):e[s]=n},{allOwnKeys:r}),e),LS=e=>(e.charCodeAt(0)===65279&&(e=e.slice(1)),e),kS=(e,t,i,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),i&&Object.assign(e.prototype,i)},RS=(e,t,i,r)=>{let n,s,o,a={};if(t=t||{},e==null)return t;do{for(n=Object.getOwnPropertyNames(e),s=n.length;s-- >0;)o=n[s],(!r||r(o,e,t))&&!a[o]&&(t[o]=e[o],a[o]=!0);e=i!==!1&&Na(e)}while(e&&(!i||i(e,t))&&e!==Object.prototype);return t},PS=(e,t,i)=>{e=String(e),(i===void 0||i>e.length)&&(i=e.length),i-=t.length;let r=e.indexOf(t,i);return r!==-1&&r===i},FS=e=>{if(!e)return null;if(Bi(e))return e;let t=e.length;if(!Ah(t))return null;let i=new Array(t);for(;t-- >0;)i[t]=e[t];return i},jS=(e=>t=>e&&t instanceof e)(typeof Uint8Array<"u"&&Na(Uint8Array)),MS=(e,t)=>{let r=(e&&e[Symbol.iterator]).call(e),n;for(;(n=r.next())&&!n.done;){let s=n.value;t.call(e,s[0],s[1])}},qS=(e,t)=>{let i,r=[];for(;(i=e.exec(t))!==null;)r.push(i);return r},BS=gt("HTMLFormElement"),US=e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(i,r,n){return r.toUpperCase()+n}),Sh=(({hasOwnProperty:e})=>(t,i)=>e.call(t,i))(Object.prototype),$S=gt("RegExp"),Lh=(e,t)=>{let i=Object.getOwnPropertyDescriptors(e),r={};Tr(i,(n,s)=>{let o;(o=t(n,s,e))!==!1&&(r[s]=o||n)}),Object.defineProperties(e,r)},zS=e=>{Lh(e,(t,i)=>{if(lt(e)&&["arguments","caller","callee"].indexOf(i)!==-1)return!1;let r=e[i];if(lt(r)){if(t.enumerable=!1,"writable"in t){t.writable=!1;return}t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+i+"'")})}})},HS=(e,t)=>{let i={},r=n=>{n.forEach(s=>{i[s]=!0})};return Bi(e)?r(e):r(String(e).split(t)),i},GS=()=>{},VS=(e,t)=>e!=null&&Number.isFinite(e=+e)?e:t,Da="abcdefghijklmnopqrstuvwxyz",Ch="0123456789",kh={DIGIT:Ch,ALPHA:Da,ALPHA_DIGIT:Da+Da.toUpperCase()+Ch},XS=(e=16,t=kh.ALPHA_DIGIT)=>{let i="",{length:r}=t;for(;e--;)i+=t[Math.random()*r|0];return i};function YS(e){return!!(e&&lt(e.append)&&e[Symbol.toStringTag]==="FormData"&&e[Symbol.iterator])}var WS=e=>{let t=new Array(10),i=(r,n)=>{if(kn(r)){if(t.indexOf(r)>=0)return;if(!("toJSON"in r)){t[n]=r;let s=Bi(r)?[]:{};return Tr(r,(o,a)=>{let c=i(o,n+1);!_r(c)&&(s[a]=c)}),t[n]=void 0,s}}return r};return i(e,0)},KS=gt("AsyncFunction"),JS=e=>e&&(kn(e)||lt(e))&&lt(e.then)&&lt(e.catch),I={isArray:Bi,isArrayBuffer:Oh,isBuffer:mS,isFormData:TS,isArrayBufferView:gS,isString:xS,isNumber:Ah,isBoolean:vS,isObject:kn,isPlainObject:In,isReadableStream:CS,isRequest:OS,isResponse:AS,isHeaders:DS,isUndefined:_r,isDate:yS,isFile:bS,isBlob:wS,isRegExp:$S,isFunction:lt,isStream:_S,isURLSearchParams:SS,isTypedArray:jS,isFileList:ES,forEach:Tr,merge:Ia,extend:NS,trim:IS,stripBOM:LS,inherits:kS,toFlatObject:RS,kindOf:Nn,kindOfTest:gt,endsWith:PS,toArray:FS,forEachEntry:MS,matchAll:qS,isHTMLForm:BS,hasOwnProperty:Sh,hasOwnProp:Sh,reduceDescriptors:Lh,freezeMethods:zS,toObjectSet:HS,toCamelCase:US,noop:GS,toFiniteNumber:VS,findKey:Dh,global:Ih,isContextDefined:Nh,ALPHABET:kh,generateString:XS,isSpecCompliantForm:YS,toJSONObject:WS,isAsyncFn:KS,isThenable:JS};function Ui(e,t,i,r,n){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack,this.message=e,this.name="AxiosError",t&&(this.code=t),i&&(this.config=i),r&&(this.request=r),n&&(this.response=n)}I.inherits(Ui,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:I.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var Rh=Ui.prototype,Ph={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(e=>{Ph[e]={value:e}});Object.defineProperties(Ui,Ph);Object.defineProperty(Rh,"isAxiosError",{value:!0});Ui.from=(e,t,i,r,n,s)=>{let o=Object.create(Rh);return I.toFlatObject(e,o,function(c){return c!==Error.prototype},a=>a!=="isAxiosError"),Ui.call(o,e.message,t,i,r,n),o.cause=e,o.name=e.name,s&&Object.assign(o,s),o};var B=Ui;var xm=se(gm(),1),Fn=xm.default;function $a(e){return I.isPlainObject(e)||I.isArray(e)}function ym(e){return I.endsWith(e,"[]")?e.slice(0,-2):e}function vm(e,t,i){return e?e.concat(t).map(function(n,s){return n=ym(n),!i&&s?"["+n+"]":n}).join(i?".":""):t}function RC(e){return I.isArray(e)&&!e.some($a)}var PC=I.toFlatObject(I,{},null,function(t){return/^is[A-Z]/.test(t)});function FC(e,t,i){if(!I.isObject(e))throw new TypeError("target must be an object");t=t||new(Fn||FormData),i=I.toFlatObject(i,{metaTokens:!0,dots:!1,indexes:!1},!1,function(v,_){return!I.isUndefined(_[v])});let r=i.metaTokens,n=i.visitor||f,s=i.dots,o=i.indexes,c=(i.Blob||typeof Blob<"u"&&Blob)&&I.isSpecCompliantForm(t);if(!I.isFunction(n))throw new TypeError("visitor must be a function");function u(m){if(m===null)return"";if(I.isDate(m))return m.toISOString();if(!c&&I.isBlob(m))throw new B("Blob is not supported. Use a Buffer instead.");return I.isArrayBuffer(m)||I.isTypedArray(m)?c&&typeof Blob=="function"?new Blob([m]):Buffer.from(m):m}function f(m,v,_){let E=m;if(m&&!_&&typeof m=="object"){if(I.endsWith(v,"{}"))v=r?v:v.slice(0,-2),m=JSON.stringify(m);else if(I.isArray(m)&&RC(m)||(I.isFileList(m)||I.endsWith(v,"[]"))&&(E=I.toArray(m)))return v=ym(v),E.forEach(function(p,d){!(I.isUndefined(p)||p===null)&&t.append(o===!0?vm([v],d,s):o===null?v:v+"[]",u(p))}),!1}return $a(m)?!0:(t.append(vm(_,v,s),u(m)),!1)}let g=[],x=Object.assign(PC,{defaultVisitor:f,convertValue:u,isVisitable:$a});function l(m,v){if(!I.isUndefined(m)){if(g.indexOf(m)!==-1)throw Error("Circular reference detected in "+v.join("."));g.push(m),I.forEach(m,function(E,w){(!(I.isUndefined(E)||E===null)&&n.call(t,E,I.isString(w)?w.trim():w,v,x))===!0&&l(E,v?v.concat(w):[w])}),g.pop()}}if(!I.isObject(e))throw new TypeError("data must be an object");return l(e),t}var ei=FC;function bm(e){let t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,function(r){return t[r]})}function wm(e,t){this._pairs=[],e&&ei(e,this,t)}var Em=wm.prototype;Em.append=function(t,i){this._pairs.push([t,i])};Em.toString=function(t){let i=t?function(r){return t.call(this,r,bm)}:bm;return this._pairs.map(function(n){return i(n[0])+"="+i(n[1])},"").join("&")};var _m=wm;function jC(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function fi(e,t,i){if(!t)return e;let r=i&&i.encode||jC,n=i&&i.serialize,s;if(n?s=n(t,i):s=I.isURLSearchParams(t)?t.toString():new _m(t,i).toString(r),s){let o=e.indexOf("#");o!==-1&&(e=e.slice(0,o)),e+=(e.indexOf("?")===-1?"?":"&")+s}return e}var za=class{constructor(){this.handlers=[]}use(t,i,r){return this.handlers.push({fulfilled:t,rejected:i,synchronous:r?r.synchronous:!1,runWhen:r?r.runWhen:null}),this.handlers.length-1}eject(t){this.handlers[t]&&(this.handlers[t]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(t){I.forEach(this.handlers,function(r){r!==null&&t(r)})}},Ha=za;var $i={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1};var Tm=se(require("url"),1),Sm=Tm.default.URLSearchParams;var Cm={isNode:!0,classes:{URLSearchParams:Sm,FormData:Fn,Blob:typeof Blob<"u"&&Blob||null},protocols:["http","https","file","data"]};var Va={};cl(Va,{hasBrowserEnv:()=>Ga,hasStandardBrowserEnv:()=>MC,hasStandardBrowserWebWorkerEnv:()=>qC,origin:()=>BC});var Ga=typeof window<"u"&&typeof document<"u",MC=(e=>Ga&&["ReactNative","NativeScript","NS"].indexOf(e)<0)(typeof navigator<"u"&&navigator.product),qC=typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&typeof self.importScripts=="function",BC=Ga&&window.location.href||"http://localhost";var be={...Va,...Cm};function Xa(e,t){return ei(e,new be.classes.URLSearchParams,Object.assign({visitor:function(i,r,n,s){return be.isNode&&I.isBuffer(i)?(this.append(r,i.toString("base64")),!1):s.defaultVisitor.apply(this,arguments)}},t))}function UC(e){return I.matchAll(/\w+|\[(\w*)]/g,e).map(t=>t[0]==="[]"?"":t[1]||t[0])}function $C(e){let t={},i=Object.keys(e),r,n=i.length,s;for(r=0;r<n;r++)s=i[r],t[s]=e[s];return t}function zC(e){function t(i,r,n,s){let o=i[s++];if(o==="__proto__")return!0;let a=Number.isFinite(+o),c=s>=i.length;return o=!o&&I.isArray(n)?n.length:o,c?(I.hasOwnProp(n,o)?n[o]=[n[o],r]:n[o]=r,!a):((!n[o]||!I.isObject(n[o]))&&(n[o]=[]),t(i,r,n[o],s)&&I.isArray(n[o])&&(n[o]=$C(n[o])),!a)}if(I.isFormData(e)&&I.isFunction(e.entries)){let i={};return I.forEachEntry(e,(r,n)=>{t(UC(r),n,i,0)}),i}return null}var jn=zC;function HC(e,t,i){if(I.isString(e))try{return(t||JSON.parse)(e),I.trim(e)}catch(r){if(r.name!=="SyntaxError")throw r}return(i||JSON.stringify)(e)}var Ya={transitional:$i,adapter:["xhr","http","fetch"],transformRequest:[function(t,i){let r=i.getContentType()||"",n=r.indexOf("application/json")>-1,s=I.isObject(t);if(s&&I.isHTMLForm(t)&&(t=new FormData(t)),I.isFormData(t))return n?JSON.stringify(jn(t)):t;if(I.isArrayBuffer(t)||I.isBuffer(t)||I.isStream(t)||I.isFile(t)||I.isBlob(t)||I.isReadableStream(t))return t;if(I.isArrayBufferView(t))return t.buffer;if(I.isURLSearchParams(t))return i.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),t.toString();let a;if(s){if(r.indexOf("application/x-www-form-urlencoded")>-1)return Xa(t,this.formSerializer).toString();if((a=I.isFileList(t))||r.indexOf("multipart/form-data")>-1){let c=this.env&&this.env.FormData;return ei(a?{"files[]":t}:t,c&&new c,this.formSerializer)}}return s||n?(i.setContentType("application/json",!1),HC(t)):t}],transformResponse:[function(t){let i=this.transitional||Ya.transitional,r=i&&i.forcedJSONParsing,n=this.responseType==="json";if(I.isResponse(t)||I.isReadableStream(t))return t;if(t&&I.isString(t)&&(r&&!this.responseType||n)){let o=!(i&&i.silentJSONParsing)&&n;try{return JSON.parse(t)}catch(a){if(o)throw a.name==="SyntaxError"?B.from(a,B.ERR_BAD_RESPONSE,this,null,this.response):a}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:be.classes.FormData,Blob:be.classes.Blob},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};I.forEach(["delete","get","head","post","put","patch"],e=>{Ya.headers[e]={}});var zi=Ya;var GC=I.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Om=e=>{let t={},i,r,n;return e&&e.split(`
`).forEach(function(o){n=o.indexOf(":"),i=o.substring(0,n).trim().toLowerCase(),r=o.substring(n+1).trim(),!(!i||t[i]&&GC[i])&&(i==="set-cookie"?t[i]?t[i].push(r):t[i]=[r]:t[i]=t[i]?t[i]+", "+r:r)}),t};var Am=Symbol("internals");function Sr(e){return e&&String(e).trim().toLowerCase()}function Mn(e){return e===!1||e==null?e:I.isArray(e)?e.map(Mn):String(e)}function VC(e){let t=Object.create(null),i=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g,r;for(;r=i.exec(e);)t[r[1]]=r[2];return t}var XC=e=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim());function Wa(e,t,i,r,n){if(I.isFunction(r))return r.call(this,t,i);if(n&&(t=i),!!I.isString(t)){if(I.isString(r))return t.indexOf(r)!==-1;if(I.isRegExp(r))return r.test(t)}}function YC(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(t,i,r)=>i.toUpperCase()+r)}function WC(e,t){let i=I.toCamelCase(" "+t);["get","set","has"].forEach(r=>{Object.defineProperty(e,r+i,{value:function(n,s,o){return this[r].call(this,t,n,s,o)},configurable:!0})})}var Hi=class{constructor(t){t&&this.set(t)}set(t,i,r){let n=this;function s(a,c,u){let f=Sr(c);if(!f)throw new Error("header name must be a non-empty string");let g=I.findKey(n,f);(!g||n[g]===void 0||u===!0||u===void 0&&n[g]!==!1)&&(n[g||c]=Mn(a))}let o=(a,c)=>I.forEach(a,(u,f)=>s(u,f,c));if(I.isPlainObject(t)||t instanceof this.constructor)o(t,i);else if(I.isString(t)&&(t=t.trim())&&!XC(t))o(Om(t),i);else if(I.isHeaders(t))for(let[a,c]of t.entries())s(c,a,r);else t!=null&&s(i,t,r);return this}get(t,i){if(t=Sr(t),t){let r=I.findKey(this,t);if(r){let n=this[r];if(!i)return n;if(i===!0)return VC(n);if(I.isFunction(i))return i.call(this,n,r);if(I.isRegExp(i))return i.exec(n);throw new TypeError("parser must be boolean|regexp|function")}}}has(t,i){if(t=Sr(t),t){let r=I.findKey(this,t);return!!(r&&this[r]!==void 0&&(!i||Wa(this,this[r],r,i)))}return!1}delete(t,i){let r=this,n=!1;function s(o){if(o=Sr(o),o){let a=I.findKey(r,o);a&&(!i||Wa(r,r[a],a,i))&&(delete r[a],n=!0)}}return I.isArray(t)?t.forEach(s):s(t),n}clear(t){let i=Object.keys(this),r=i.length,n=!1;for(;r--;){let s=i[r];(!t||Wa(this,this[s],s,t,!0))&&(delete this[s],n=!0)}return n}normalize(t){let i=this,r={};return I.forEach(this,(n,s)=>{let o=I.findKey(r,s);if(o){i[o]=Mn(n),delete i[s];return}let a=t?YC(s):String(s).trim();a!==s&&delete i[s],i[a]=Mn(n),r[a]=!0}),this}concat(...t){return this.constructor.concat(this,...t)}toJSON(t){let i=Object.create(null);return I.forEach(this,(r,n)=>{r!=null&&r!==!1&&(i[n]=t&&I.isArray(r)?r.join(", "):r)}),i}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([t,i])=>t+": "+i).join(`
`)}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(t){return t instanceof this?t:new this(t)}static concat(t,...i){let r=new this(t);return i.forEach(n=>r.set(n)),r}static accessor(t){let r=(this[Am]=this[Am]={accessors:{}}).accessors,n=this.prototype;function s(o){let a=Sr(o);r[a]||(WC(n,o),r[a]=!0)}return I.isArray(t)?t.forEach(s):s(t),this}};Hi.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]);I.reduceDescriptors(Hi.prototype,({value:e},t)=>{let i=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(r){this[i]=r}}});I.freezeMethods(Hi);var he=Hi;function Cr(e,t){let i=this||zi,r=t||i,n=he.from(r.headers),s=r.data;return I.forEach(e,function(a){s=a.call(i,s,n.normalize(),t?t.status:void 0)}),n.normalize(),s}function Or(e){return!!(e&&e.__CANCEL__)}function Dm(e,t,i){B.call(this,e??"canceled",B.ERR_CANCELED,t,i),this.name="CanceledError"}I.inherits(Dm,B,{__CANCEL__:!0});var rt=Dm;function Ct(e,t,i){let r=i.config.validateStatus;!i.status||!r||r(i.status)?e(i):t(new B("Request failed with status code "+i.status,[B.ERR_BAD_REQUEST,B.ERR_BAD_RESPONSE][Math.floor(i.status/100)-4],i.config,i.request,i))}function Ka(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}function Ja(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}function hi(e,t){return e&&!Ka(t)?Ja(e,t):t}var cg=se(Nm(),1),ug=se(require("http"),1),lg=se(require("https"),1),pg=se(require("util"),1),dg=se(Wm(),1),Bt=se(require("zlib"),1);var xi="1.7.2";function kr(e){let t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}var FO=/^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\s\S]*)$/;function fc(e,t,i){let r=i&&i.Blob||be.classes.Blob,n=kr(e);if(t===void 0&&r&&(t=!0),n==="data"){e=n.length?e.slice(n.length+1):e;let s=FO.exec(e);if(!s)throw new B("Invalid URL",B.ERR_INVALID_URL);let o=s[1],a=s[2],c=s[3],u=Buffer.from(decodeURIComponent(c),a?"base64":"utf8");if(t){if(!r)throw new B("Blob is not supported",B.ERR_NOT_SUPPORT);return new r([u],{type:o})}return u}throw new B("Unsupported protocol "+n,B.ERR_NOT_SUPPORT)}var vi=se(require("stream"),1);var Km=se(require("stream"),1);function jO(e,t){let i=0,r=1e3/t,n=null;return function(){let o=this===!0,a=Date.now();if(o||a-i>r)return n&&(clearTimeout(n),n=null),i=a,e.apply(null,arguments);n||(n=setTimeout(()=>(n=null,i=Date.now(),e.apply(null,arguments)),r-(a-i)))}}var Gn=jO;function MO(e,t){e=e||10;let i=new Array(e),r=new Array(e),n=0,s=0,o;return t=t!==void 0?t:1e3,function(c){let u=Date.now(),f=r[s];o||(o=u),i[n]=c,r[n]=u;let g=s,x=0;for(;g!==n;)x+=i[g++],g=g%e;if(n=(n+1)%e,n===s&&(s=(s+1)%e),u-o<t)return;let l=f&&u-f;return l?Math.round(x*1e3/l):void 0}}var Vn=MO;var Xn=Symbol("internals"),hc=class extends Km.default.Transform{constructor(t){t=I.toFlatObject(t,{maxRate:0,chunkSize:64*1024,minChunkSize:100,timeWindow:500,ticksRate:2,samplesCount:15},null,(a,c)=>!I.isUndefined(c[a])),super({readableHighWaterMark:t.chunkSize});let i=this,r=this[Xn]={length:t.length,timeWindow:t.timeWindow,ticksRate:t.ticksRate,chunkSize:t.chunkSize,maxRate:t.maxRate,minChunkSize:t.minChunkSize,bytesSeen:0,isCaptured:!1,notifiedBytesLoaded:0,ts:Date.now(),bytes:0,onReadCallback:null},n=Vn(r.ticksRate*t.samplesCount,r.timeWindow);this.on("newListener",a=>{a==="progress"&&(r.isCaptured||(r.isCaptured=!0))});let s=0;r.updateProgress=Gn(function(){let c=r.length,u=r.bytesSeen,f=u-s;if(!f||i.destroyed)return;let g=n(f);s=u,process.nextTick(()=>{i.emit("progress",{loaded:u,total:c,progress:c?u/c:void 0,bytes:f,rate:g||void 0,estimated:g&&c&&u<=c?(c-u)/g:void 0,lengthComputable:c!=null})})},r.ticksRate);let o=()=>{r.updateProgress.call(!0)};this.once("end",o),this.once("error",o)}_read(t){let i=this[Xn];return i.onReadCallback&&i.onReadCallback(),super._read(t)}_transform(t,i,r){let n=this,s=this[Xn],o=s.maxRate,a=this.readableHighWaterMark,c=s.timeWindow,u=1e3/c,f=o/u,g=s.minChunkSize!==!1?Math.max(s.minChunkSize,f*.01):0;function x(m,v){let _=Buffer.byteLength(m);s.bytesSeen+=_,s.bytes+=_,s.isCaptured&&s.updateProgress(),n.push(m)?process.nextTick(v):s.onReadCallback=()=>{s.onReadCallback=null,process.nextTick(v)}}let l=(m,v)=>{let _=Buffer.byteLength(m),E=null,w=a,p,d=0;if(o){let h=Date.now();(!s.ts||(d=h-s.ts)>=c)&&(s.ts=h,p=f-s.bytes,s.bytes=p<0?-p:0,d=0),p=f-s.bytes}if(o){if(p<=0)return setTimeout(()=>{v(null,m)},c-d);p<w&&(w=p)}w&&_>w&&_-w>g&&(E=m.subarray(w),m=m.subarray(0,w)),x(m,E?()=>{process.nextTick(v,null,E)}:v)};l(t,function m(v,_){if(v)return r(v);_?l(_,m):r(null)})}setLength(t){return this[Xn].length=+t,this}},mc=hc;var fg=require("events");var Zm=require("util"),Qm=require("stream");var{asyncIterator:Jm}=Symbol,qO=async function*(e){e.stream?yield*e.stream():e.arrayBuffer?yield await e.arrayBuffer():e[Jm]?yield*e[Jm]():yield e},Yn=qO;var BO=I.ALPHABET.ALPHA_DIGIT+"-_",Rr=new Zm.TextEncoder,ti=`\r
`,UO=Rr.encode(ti),$O=2,gc=class{constructor(t,i){let{escapeName:r}=this.constructor,n=I.isString(i),s=`Content-Disposition: form-data; name="${r(t)}"${!n&&i.name?`; filename="${r(i.name)}"`:""}${ti}`;n?i=Rr.encode(String(i).replace(/\r?\n|\r\n?/g,ti)):s+=`Content-Type: ${i.type||"application/octet-stream"}${ti}`,this.headers=Rr.encode(s+ti),this.contentLength=n?i.byteLength:i.size,this.size=this.headers.byteLength+this.contentLength+$O,this.name=t,this.value=i}async*encode(){yield this.headers;let{value:t}=this;I.isTypedArray(t)?yield t:yield*Yn(t),yield UO}static escapeName(t){return String(t).replace(/[\r\n"]/g,i=>({"\r":"%0D","\n":"%0A",'"':"%22"})[i])}},zO=(e,t,i)=>{let{tag:r="form-data-boundary",size:n=25,boundary:s=r+"-"+I.generateString(n,BO)}=i||{};if(!I.isFormData(e))throw TypeError("FormData instance required");if(s.length<1||s.length>70)throw Error("boundary must be 10-70 characters long");let o=Rr.encode("--"+s+ti),a=Rr.encode("--"+s+"--"+ti+ti),c=a.byteLength,u=Array.from(e.entries()).map(([g,x])=>{let l=new gc(g,x);return c+=l.size,l});c+=o.byteLength*u.length,c=I.toFiniteNumber(c);let f={"Content-Type":`multipart/form-data; boundary=${s}`};return Number.isFinite(c)&&(f["Content-Length"]=c),t&&t(f),Qm.Readable.from(async function*(){for(let g of u)yield o,yield*g.encode();yield a}())},eg=zO;var tg=se(require("stream"),1),xc=class extends tg.default.Transform{__transform(t,i,r){this.push(t),r()}_transform(t,i,r){if(t.length!==0&&(this._transform=this.__transform,t[0]!==120)){let n=Buffer.alloc(2);n[0]=120,n[1]=156,this.push(n,i)}this.__transform(t,i,r)}},ig=xc;var HO=(e,t)=>I.isAsyncFn(e)?function(...i){let r=i.pop();e.apply(this,i).then(n=>{try{t?r(null,...t(n)):r(null,n)}catch(s){r(s)}},r)}:e,rg=HO;var ng={flush:Bt.default.constants.Z_SYNC_FLUSH,finishFlush:Bt.default.constants.Z_SYNC_FLUSH},GO={flush:Bt.default.constants.BROTLI_OPERATION_FLUSH,finishFlush:Bt.default.constants.BROTLI_OPERATION_FLUSH},sg=I.isFunction(Bt.default.createBrotliDecompress),{http:VO,https:XO}=dg.default,YO=/https:?/,og=be.protocols.map(e=>e+":");function WO(e,t){e.beforeRedirects.proxy&&e.beforeRedirects.proxy(e),e.beforeRedirects.config&&e.beforeRedirects.config(e,t)}function hg(e,t,i){let r=t;if(!r&&r!==!1){let n=(0,cg.getProxyForUrl)(i);n&&(r=new URL(n))}if(r){if(r.username&&(r.auth=(r.username||"")+":"+(r.password||"")),r.auth){(r.auth.username||r.auth.password)&&(r.auth=(r.auth.username||"")+":"+(r.auth.password||""));let s=Buffer.from(r.auth,"utf8").toString("base64");e.headers["Proxy-Authorization"]="Basic "+s}e.headers.host=e.hostname+(e.port?":"+e.port:"");let n=r.hostname||r.host;e.hostname=n,e.host=n,e.port=r.port,e.path=i,r.protocol&&(e.protocol=r.protocol.includes(":")?r.protocol:`${r.protocol}:`)}e.beforeRedirects.proxy=function(s){hg(s,t,s.href)}}var KO=typeof process<"u"&&I.kindOf(process)==="process",JO=e=>new Promise((t,i)=>{let r,n,s=(c,u)=>{n||(n=!0,r&&r(c,u))},o=c=>{s(c),t(c)},a=c=>{s(c,!0),i(c)};e(o,a,c=>r=c).catch(a)}),ZO=({address:e,family:t})=>{if(!I.isString(e))throw TypeError("address must be a string");return{address:e,family:t||(e.indexOf(".")<0?6:4)}},ag=(e,t)=>ZO(I.isObject(e)?e:{address:e,family:t}),mg=KO&&function(t){return JO(async function(r,n,s){let{data:o,lookup:a,family:c}=t,{responseType:u,responseEncoding:f}=t,g=t.method.toUpperCase(),x,l=!1,m;if(a){let $=rg(a,j=>I.isArray(j)?j:[j]);a=(j,ae,J)=>{$(j,ae,(_e,Ve,Nt)=>{if(_e)return J(_e);let De=I.isArray(Ve)?Ve.map(Me=>ag(Me)):[ag(Ve,Nt)];ae.all?J(_e,De):J(_e,De[0].address,De[0].family)})}}let v=new fg.EventEmitter,_=()=>{t.cancelToken&&t.cancelToken.unsubscribe(E),t.signal&&t.signal.removeEventListener("abort",E),v.removeAllListeners()};s(($,j)=>{x=!0,j&&(l=!0,_())});function E($){v.emit("abort",!$||$.type?new rt(null,t,m):$)}v.once("abort",n),(t.cancelToken||t.signal)&&(t.cancelToken&&t.cancelToken.subscribe(E),t.signal&&(t.signal.aborted?E():t.signal.addEventListener("abort",E)));let w=hi(t.baseURL,t.url),p=new URL(w,"http://localhost"),d=p.protocol||og[0];if(d==="data:"){let $;if(g!=="GET")return Ct(r,n,{status:405,statusText:"method not allowed",headers:{},config:t});try{$=fc(t.url,u==="blob",{Blob:t.env&&t.env.Blob})}catch(j){throw B.from(j,B.ERR_BAD_REQUEST,t)}return u==="text"?($=$.toString(f),(!f||f==="utf8")&&($=I.stripBOM($))):u==="stream"&&($=vi.default.Readable.from($)),Ct(r,n,{data:$,status:200,statusText:"OK",headers:new he,config:t})}if(og.indexOf(d)===-1)return n(new B("Unsupported protocol "+d,B.ERR_BAD_REQUEST,t));let h=he.from(t.headers).normalize();h.set("User-Agent","axios/"+xi,!1);let b=t.onDownloadProgress,O=t.onUploadProgress,D=t.maxRate,A,T;if(I.isSpecCompliantForm(o)){let $=h.getContentType(/boundary=([-_\w\d]{10,70})/i);o=eg(o,j=>{h.set(j)},{tag:`axios-${xi}-boundary`,boundary:$&&$[1]||void 0})}else if(I.isFormData(o)&&I.isFunction(o.getHeaders)){if(h.set(o.getHeaders()),!h.hasContentLength())try{let $=await pg.default.promisify(o.getLength).call(o);Number.isFinite($)&&$>=0&&h.setContentLength($)}catch{}}else if(I.isBlob(o))o.size&&h.setContentType(o.type||"application/octet-stream"),h.setContentLength(o.size||0),o=vi.default.Readable.from(Yn(o));else if(o&&!I.isStream(o)){if(!Buffer.isBuffer(o))if(I.isArrayBuffer(o))o=Buffer.from(new Uint8Array(o));else if(I.isString(o))o=Buffer.from(o,"utf-8");else return n(new B("Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream",B.ERR_BAD_REQUEST,t));if(h.setContentLength(o.length,!1),t.maxBodyLength>-1&&o.length>t.maxBodyLength)return n(new B("Request body larger than maxBodyLength limit",B.ERR_BAD_REQUEST,t))}let N=I.toFiniteNumber(h.getContentLength());I.isArray(D)?(A=D[0],T=D[1]):A=T=D,o&&(O||A)&&(I.isStream(o)||(o=vi.default.Readable.from(o,{objectMode:!1})),o=vi.default.pipeline([o,new mc({length:N,maxRate:I.toFiniteNumber(A)})],I.noop),O&&o.on("progress",$=>{O(Object.assign($,{upload:!0}))}));let C;if(t.auth){let $=t.auth.username||"",j=t.auth.password||"";C=$+":"+j}if(!C&&p.username){let $=p.username,j=p.password;C=$+":"+j}C&&h.delete("authorization");let F;try{F=fi(p.pathname+p.search,t.params,t.paramsSerializer).replace(/^\?/,"")}catch($){let j=new Error($.message);return j.config=t,j.url=t.url,j.exists=!0,n(j)}h.set("Accept-Encoding","gzip, compress, deflate"+(sg?", br":""),!1);let z={path:F,method:g,headers:h.toJSON(),agents:{http:t.httpAgent,https:t.httpsAgent},auth:C,protocol:d,family:c,beforeRedirect:WO,beforeRedirects:{}};!I.isUndefined(a)&&(z.lookup=a),t.socketPath?z.socketPath=t.socketPath:(z.hostname=p.hostname,z.port=p.port,hg(z,t.proxy,d+"//"+p.hostname+(p.port?":"+p.port:"")+z.path));let H,V=YO.test(z.protocol);if(z.agent=V?t.httpsAgent:t.httpAgent,t.transport?H=t.transport:t.maxRedirects===0?H=V?lg.default:ug.default:(t.maxRedirects&&(z.maxRedirects=t.maxRedirects),t.beforeRedirect&&(z.beforeRedirects.config=t.beforeRedirect),H=V?XO:VO),t.maxBodyLength>-1?z.maxBodyLength=t.maxBodyLength:z.maxBodyLength=1/0,t.insecureHTTPParser&&(z.insecureHTTPParser=t.insecureHTTPParser),m=H.request(z,function(j){if(m.destroyed)return;let ae=[j],J=+j.headers["content-length"];if(b){let Me=new mc({length:I.toFiniteNumber(J),maxRate:I.toFiniteNumber(T)});b&&Me.on("progress",Xt=>{b(Object.assign(Xt,{download:!0}))}),ae.push(Me)}let _e=j,Ve=j.req||m;if(t.decompress!==!1&&j.headers["content-encoding"])switch((g==="HEAD"||j.statusCode===204)&&delete j.headers["content-encoding"],(j.headers["content-encoding"]||"").toLowerCase()){case"gzip":case"x-gzip":case"compress":case"x-compress":ae.push(Bt.default.createUnzip(ng)),delete j.headers["content-encoding"];break;case"deflate":ae.push(new ig),ae.push(Bt.default.createUnzip(ng)),delete j.headers["content-encoding"];break;case"br":sg&&(ae.push(Bt.default.createBrotliDecompress(GO)),delete j.headers["content-encoding"])}_e=ae.length>1?vi.default.pipeline(ae,I.noop):ae[0];let Nt=vi.default.finished(_e,()=>{Nt(),_()}),De={status:j.statusCode,statusText:j.statusMessage,headers:new he(j.headers),config:t,request:Ve};if(u==="stream")De.data=_e,Ct(r,n,De);else{let Me=[],Xt=0;_e.on("data",function(Ie){Me.push(Ie),Xt+=Ie.length,t.maxContentLength>-1&&Xt>t.maxContentLength&&(l=!0,_e.destroy(),n(new B("maxContentLength size of "+t.maxContentLength+" exceeded",B.ERR_BAD_RESPONSE,t,Ve)))}),_e.on("aborted",function(){if(l)return;let Ie=new B("maxContentLength size of "+t.maxContentLength+" exceeded",B.ERR_BAD_RESPONSE,t,Ve);_e.destroy(Ie),n(Ie)}),_e.on("error",function(Ie){m.destroyed||n(B.from(Ie,null,t,Ve))}),_e.on("end",function(){try{let Ie=Me.length===1?Me[0]:Buffer.concat(Me);u!=="arraybuffer"&&(Ie=Ie.toString(f),(!f||f==="utf8")&&(Ie=I.stripBOM(Ie))),De.data=Ie}catch(Ie){return n(B.from(Ie,null,t,De.request,De))}Ct(r,n,De)})}v.once("abort",Me=>{_e.destroyed||(_e.emit("error",Me),_e.destroy())})}),v.once("abort",$=>{n($),m.destroy($)}),m.on("error",function(j){n(B.from(j,null,t,m))}),m.on("socket",function(j){j.setKeepAlive(!0,1e3*60)}),t.timeout){let $=parseInt(t.timeout,10);if(Number.isNaN($)){n(new B("error trying to parse `config.timeout` to int",B.ERR_BAD_OPTION_VALUE,t,m));return}m.setTimeout($,function(){if(x)return;let ae=t.timeout?"timeout of "+t.timeout+"ms exceeded":"timeout exceeded",J=t.transitional||$i;t.timeoutErrorMessage&&(ae=t.timeoutErrorMessage),n(new B(ae,J.clarifyTimeoutError?B.ETIMEDOUT:B.ECONNABORTED,t,m)),E()})}if(I.isStream(o)){let $=!1,j=!1;o.on("end",()=>{$=!0}),o.once("error",ae=>{j=!0,m.destroy(ae)}),o.on("close",()=>{!$&&!j&&E(new rt("Request stream has been aborted",t,m))}),o.pipe(m)}else m.end(o)})};var Wi=(e,t,i=3)=>{let r=0,n=Vn(50,250);return Gn(s=>{let o=s.loaded,a=s.lengthComputable?s.total:void 0,c=o-r,u=n(c),f=o<=a;r=o;let g={loaded:o,total:a,progress:a?o/a:void 0,bytes:c,rate:u||void 0,estimated:u&&a&&f?(a-o)/u:void 0,event:s,lengthComputable:a!=null};g[t?"download":"upload"]=!0,e(g)},i)};var gg=be.hasStandardBrowserEnv?function(){let t=/(msie|trident)/i.test(navigator.userAgent),i=document.createElement("a"),r;function n(s){let o=s;return t&&(i.setAttribute("href",o),o=i.href),i.setAttribute("href",o),{href:i.href,protocol:i.protocol?i.protocol.replace(/:$/,""):"",host:i.host,search:i.search?i.search.replace(/^\?/,""):"",hash:i.hash?i.hash.replace(/^#/,""):"",hostname:i.hostname,port:i.port,pathname:i.pathname.charAt(0)==="/"?i.pathname:"/"+i.pathname}}return r=n(window.location.href),function(o){let a=I.isString(o)?n(o):o;return a.protocol===r.protocol&&a.host===r.host}}():function(){return function(){return!0}}();var xg=be.hasStandardBrowserEnv?{write(e,t,i,r,n,s){let o=[e+"="+encodeURIComponent(t)];I.isNumber(i)&&o.push("expires="+new Date(i).toGMTString()),I.isString(r)&&o.push("path="+r),I.isString(n)&&o.push("domain="+n),s===!0&&o.push("secure"),document.cookie=o.join("; ")},read(e){let t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read(){return null},remove(){}};var vg=e=>e instanceof he?{...e}:e;function vt(e,t){t=t||{};let i={};function r(u,f,g){return I.isPlainObject(u)&&I.isPlainObject(f)?I.merge.call({caseless:g},u,f):I.isPlainObject(f)?I.merge({},f):I.isArray(f)?f.slice():f}function n(u,f,g){if(I.isUndefined(f)){if(!I.isUndefined(u))return r(void 0,u,g)}else return r(u,f,g)}function s(u,f){if(!I.isUndefined(f))return r(void 0,f)}function o(u,f){if(I.isUndefined(f)){if(!I.isUndefined(u))return r(void 0,u)}else return r(void 0,f)}function a(u,f,g){if(g in t)return r(u,f);if(g in e)return r(void 0,u)}let c={url:s,method:s,data:s,baseURL:o,transformRequest:o,transformResponse:o,paramsSerializer:o,timeout:o,timeoutMessage:o,withCredentials:o,withXSRFToken:o,adapter:o,responseType:o,xsrfCookieName:o,xsrfHeaderName:o,onUploadProgress:o,onDownloadProgress:o,decompress:o,maxContentLength:o,maxBodyLength:o,beforeRedirect:o,transport:o,httpAgent:o,httpsAgent:o,cancelToken:o,socketPath:o,responseEncoding:o,validateStatus:a,headers:(u,f)=>n(vg(u),vg(f),!0)};return I.forEach(Object.keys(Object.assign({},e,t)),function(f){let g=c[f]||n,x=g(e[f],t[f],f);I.isUndefined(x)&&g!==a||(i[f]=x)}),i}var Wn=e=>{let t=vt({},e),{data:i,withXSRFToken:r,xsrfHeaderName:n,xsrfCookieName:s,headers:o,auth:a}=t;t.headers=o=he.from(o),t.url=fi(hi(t.baseURL,t.url),e.params,e.paramsSerializer),a&&o.set("Authorization","Basic "+btoa((a.username||"")+":"+(a.password?unescape(encodeURIComponent(a.password)):"")));let c;if(I.isFormData(i)){if(be.hasStandardBrowserEnv||be.hasStandardBrowserWebWorkerEnv)o.setContentType(void 0);else if((c=o.getContentType())!==!1){let[u,...f]=c?c.split(";").map(g=>g.trim()).filter(Boolean):[];o.setContentType([u||"multipart/form-data",...f].join("; "))}}if(be.hasStandardBrowserEnv&&(r&&I.isFunction(r)&&(r=r(t)),r||r!==!1&&gg(t.url))){let u=n&&s&&xg.read(s);u&&o.set(n,u)}return t};var QO=typeof XMLHttpRequest<"u",yg=QO&&function(e){return new Promise(function(i,r){let n=Wn(e),s=n.data,o=he.from(n.headers).normalize(),{responseType:a}=n,c;function u(){n.cancelToken&&n.cancelToken.unsubscribe(c),n.signal&&n.signal.removeEventListener("abort",c)}let f=new XMLHttpRequest;f.open(n.method.toUpperCase(),n.url,!0),f.timeout=n.timeout;function g(){if(!f)return;let l=he.from("getAllResponseHeaders"in f&&f.getAllResponseHeaders()),v={data:!a||a==="text"||a==="json"?f.responseText:f.response,status:f.status,statusText:f.statusText,headers:l,config:e,request:f};Ct(function(E){i(E),u()},function(E){r(E),u()},v),f=null}"onloadend"in f?f.onloadend=g:f.onreadystatechange=function(){!f||f.readyState!==4||f.status===0&&!(f.responseURL&&f.responseURL.indexOf("file:")===0)||setTimeout(g)},f.onabort=function(){f&&(r(new B("Request aborted",B.ECONNABORTED,n,f)),f=null)},f.onerror=function(){r(new B("Network Error",B.ERR_NETWORK,n,f)),f=null},f.ontimeout=function(){let m=n.timeout?"timeout of "+n.timeout+"ms exceeded":"timeout exceeded",v=n.transitional||$i;n.timeoutErrorMessage&&(m=n.timeoutErrorMessage),r(new B(m,v.clarifyTimeoutError?B.ETIMEDOUT:B.ECONNABORTED,n,f)),f=null},s===void 0&&o.setContentType(null),"setRequestHeader"in f&&I.forEach(o.toJSON(),function(m,v){f.setRequestHeader(v,m)}),I.isUndefined(n.withCredentials)||(f.withCredentials=!!n.withCredentials),a&&a!=="json"&&(f.responseType=n.responseType),typeof n.onDownloadProgress=="function"&&f.addEventListener("progress",Wi(n.onDownloadProgress,!0)),typeof n.onUploadProgress=="function"&&f.upload&&f.upload.addEventListener("progress",Wi(n.onUploadProgress)),(n.cancelToken||n.signal)&&(c=l=>{f&&(r(!l||l.type?new rt(null,e,f):l),f.abort(),f=null)},n.cancelToken&&n.cancelToken.subscribe(c),n.signal&&(n.signal.aborted?c():n.signal.addEventListener("abort",c)));let x=kr(n.url);if(x&&be.protocols.indexOf(x)===-1){r(new B("Unsupported protocol "+x+":",B.ERR_BAD_REQUEST,e));return}f.send(s||null)})};var e1=(e,t)=>{let i=new AbortController,r,n=function(c){if(!r){r=!0,o();let u=c instanceof Error?c:this.reason;i.abort(u instanceof B?u:new rt(u instanceof Error?u.message:u))}},s=t&&setTimeout(()=>{n(new B(`timeout ${t} of ms exceeded`,B.ETIMEDOUT))},t),o=()=>{e&&(s&&clearTimeout(s),s=null,e.forEach(c=>{c&&(c.removeEventListener?c.removeEventListener("abort",n):c.unsubscribe(n))}),e=null)};e.forEach(c=>c&&c.addEventListener&&c.addEventListener("abort",n));let{signal:a}=i;return a.unsubscribe=o,[a,()=>{s&&clearTimeout(s),s=null}]},bg=e1;var t1=function*(e,t){let i=e.byteLength;if(!t||i<t){yield e;return}let r=0,n;for(;r<i;)n=r+t,yield e.slice(r,n),r=n},i1=async function*(e,t,i){for await(let r of e)yield*t1(ArrayBuffer.isView(r)?r:await i(String(r)),t)},vc=(e,t,i,r,n)=>{let s=i1(e,t,n),o=0;return new ReadableStream({type:"bytes",async pull(a){let{done:c,value:u}=await s.next();if(c){a.close(),r();return}let f=u.byteLength;i&&i(o+=f),a.enqueue(new Uint8Array(u))},cancel(a){return r(a),s.return()}},{highWaterMark:2})};var wg=(e,t)=>{let i=e!=null;return r=>setTimeout(()=>t({lengthComputable:i,total:e,loaded:r}))},Jn=typeof fetch=="function"&&typeof Request=="function"&&typeof Response=="function",_g=Jn&&typeof ReadableStream=="function",yc=Jn&&(typeof TextEncoder=="function"?(e=>t=>e.encode(t))(new TextEncoder):async e=>new Uint8Array(await new Response(e).arrayBuffer())),r1=_g&&(()=>{let e=!1,t=new Request(be.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!t})(),Eg=64*1024,bc=_g&&!!(()=>{try{return I.isReadableStream(new Response("").body)}catch{}})(),Kn={stream:bc&&(e=>e.body)};Jn&&(e=>{["text","arrayBuffer","blob","formData","stream"].forEach(t=>{!Kn[t]&&(Kn[t]=I.isFunction(e[t])?i=>i[t]():(i,r)=>{throw new B(`Response type '${t}' is not supported`,B.ERR_NOT_SUPPORT,r)})})})(new Response);var n1=async e=>{if(e==null)return 0;if(I.isBlob(e))return e.size;if(I.isSpecCompliantForm(e))return(await new Request(e).arrayBuffer()).byteLength;if(I.isArrayBufferView(e))return e.byteLength;if(I.isURLSearchParams(e)&&(e=e+""),I.isString(e))return(await yc(e)).byteLength},s1=async(e,t)=>{let i=I.toFiniteNumber(e.getContentLength());return i??n1(t)},Tg=Jn&&(async e=>{let{url:t,method:i,data:r,signal:n,cancelToken:s,timeout:o,onDownloadProgress:a,onUploadProgress:c,responseType:u,headers:f,withCredentials:g="same-origin",fetchOptions:x}=Wn(e);u=u?(u+"").toLowerCase():"text";let[l,m]=n||s||o?bg([n,s],o):[],v,_,E=()=>{!v&&setTimeout(()=>{l&&l.unsubscribe()}),v=!0},w;try{if(c&&r1&&i!=="get"&&i!=="head"&&(w=await s1(f,r))!==0){let b=new Request(t,{method:"POST",body:r,duplex:"half"}),O;I.isFormData(r)&&(O=b.headers.get("content-type"))&&f.setContentType(O),b.body&&(r=vc(b.body,Eg,wg(w,Wi(c)),null,yc))}I.isString(g)||(g=g?"cors":"omit"),_=new Request(t,{...x,signal:l,method:i.toUpperCase(),headers:f.normalize().toJSON(),body:r,duplex:"half",withCredentials:g});let p=await fetch(_),d=bc&&(u==="stream"||u==="response");if(bc&&(a||d)){let b={};["status","statusText","headers"].forEach(D=>{b[D]=p[D]});let O=I.toFiniteNumber(p.headers.get("content-length"));p=new Response(vc(p.body,Eg,a&&wg(O,Wi(a,!0)),d&&E,yc),b)}u=u||"text";let h=await Kn[I.findKey(Kn,u)||"text"](p,e);return!d&&E(),m&&m(),await new Promise((b,O)=>{Ct(b,O,{data:h,headers:he.from(p.headers),status:p.status,statusText:p.statusText,config:e,request:_})})}catch(p){throw E(),p&&p.name==="TypeError"&&/fetch/i.test(p.message)?Object.assign(new B("Network Error",B.ERR_NETWORK,e,_),{cause:p.cause||p}):B.from(p,p&&p.code,e,_)}});var wc={http:mg,xhr:yg,fetch:Tg};I.forEach(wc,(e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch{}Object.defineProperty(e,"adapterName",{value:t})}});var Sg=e=>`- ${e}`,o1=e=>I.isFunction(e)||e===null||e===!1,Zn={getAdapter:e=>{e=I.isArray(e)?e:[e];let{length:t}=e,i,r,n={};for(let s=0;s<t;s++){i=e[s];let o;if(r=i,!o1(i)&&(r=wc[(o=String(i)).toLowerCase()],r===void 0))throw new B(`Unknown adapter '${o}'`);if(r)break;n[o||"#"+s]=r}if(!r){let s=Object.entries(n).map(([a,c])=>`adapter ${a} `+(c===!1?"is not supported by the environment":"is not available in the build")),o=t?s.length>1?`since :
`+s.map(Sg).join(`
`):" "+Sg(s[0]):"as no adapter specified";throw new B("There is no suitable adapter to dispatch the request "+o,"ERR_NOT_SUPPORT")}return r},adapters:wc};function Ec(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new rt(null,e)}function Qn(e){return Ec(e),e.headers=he.from(e.headers),e.data=Cr.call(e,e.transformRequest),["post","put","patch"].indexOf(e.method)!==-1&&e.headers.setContentType("application/x-www-form-urlencoded",!1),Zn.getAdapter(e.adapter||zi.adapter)(e).then(function(r){return Ec(e),r.data=Cr.call(e,e.transformResponse,r),r.headers=he.from(r.headers),r},function(r){return Or(r)||(Ec(e),r&&r.response&&(r.response.data=Cr.call(e,e.transformResponse,r.response),r.response.headers=he.from(r.response.headers))),Promise.reject(r)})}var _c={};["object","boolean","number","function","string","symbol"].forEach((e,t)=>{_c[e]=function(r){return typeof r===e||"a"+(t<1?"n ":" ")+e}});var Cg={};_c.transitional=function(t,i,r){function n(s,o){return"[Axios v"+xi+"] Transitional option '"+s+"'"+o+(r?". "+r:"")}return(s,o,a)=>{if(t===!1)throw new B(n(o," has been removed"+(i?" in "+i:"")),B.ERR_DEPRECATED);return i&&!Cg[o]&&(Cg[o]=!0,console.warn(n(o," has been deprecated since v"+i+" and will be removed in the near future"))),t?t(s,o,a):!0}};function a1(e,t,i){if(typeof e!="object")throw new B("options must be an object",B.ERR_BAD_OPTION_VALUE);let r=Object.keys(e),n=r.length;for(;n-- >0;){let s=r[n],o=t[s];if(o){let a=e[s],c=a===void 0||o(a,s,e);if(c!==!0)throw new B("option "+s+" must be "+c,B.ERR_BAD_OPTION_VALUE);continue}if(i!==!0)throw new B("Unknown option "+s,B.ERR_BAD_OPTION)}}var es={assertOptions:a1,validators:_c};var ii=es.validators,Ki=class{constructor(t){this.defaults=t,this.interceptors={request:new Ha,response:new Ha}}async request(t,i){try{return await this._request(t,i)}catch(r){if(r instanceof Error){let n;Error.captureStackTrace?Error.captureStackTrace(n={}):n=new Error;let s=n.stack?n.stack.replace(/^.+\n/,""):"";try{r.stack?s&&!String(r.stack).endsWith(s.replace(/^.+\n.+\n/,""))&&(r.stack+=`
`+s):r.stack=s}catch{}}throw r}}_request(t,i){typeof t=="string"?(i=i||{},i.url=t):i=t||{},i=vt(this.defaults,i);let{transitional:r,paramsSerializer:n,headers:s}=i;r!==void 0&&es.assertOptions(r,{silentJSONParsing:ii.transitional(ii.boolean),forcedJSONParsing:ii.transitional(ii.boolean),clarifyTimeoutError:ii.transitional(ii.boolean)},!1),n!=null&&(I.isFunction(n)?i.paramsSerializer={serialize:n}:es.assertOptions(n,{encode:ii.function,serialize:ii.function},!0)),i.method=(i.method||this.defaults.method||"get").toLowerCase();let o=s&&I.merge(s.common,s[i.method]);s&&I.forEach(["delete","get","head","post","put","patch","common"],m=>{delete s[m]}),i.headers=he.concat(o,s);let a=[],c=!0;this.interceptors.request.forEach(function(v){typeof v.runWhen=="function"&&v.runWhen(i)===!1||(c=c&&v.synchronous,a.unshift(v.fulfilled,v.rejected))});let u=[];this.interceptors.response.forEach(function(v){u.push(v.fulfilled,v.rejected)});let f,g=0,x;if(!c){let m=[Qn.bind(this),void 0];for(m.unshift.apply(m,a),m.push.apply(m,u),x=m.length,f=Promise.resolve(i);g<x;)f=f.then(m[g++],m[g++]);return f}x=a.length;let l=i;for(g=0;g<x;){let m=a[g++],v=a[g++];try{l=m(l)}catch(_){v.call(this,_);break}}try{f=Qn.call(this,l)}catch(m){return Promise.reject(m)}for(g=0,x=u.length;g<x;)f=f.then(u[g++],u[g++]);return f}getUri(t){t=vt(this.defaults,t);let i=hi(t.baseURL,t.url);return fi(i,t.params,t.paramsSerializer)}};I.forEach(["delete","get","head","options"],function(t){Ki.prototype[t]=function(i,r){return this.request(vt(r||{},{method:t,url:i,data:(r||{}).data}))}});I.forEach(["post","put","patch"],function(t){function i(r){return function(s,o,a){return this.request(vt(a||{},{method:t,headers:r?{"Content-Type":"multipart/form-data"}:{},url:s,data:o}))}}Ki.prototype[t]=i(),Ki.prototype[t+"Form"]=i(!0)});var Pr=Ki;var Tc=class e{constructor(t){if(typeof t!="function")throw new TypeError("executor must be a function.");let i;this.promise=new Promise(function(s){i=s});let r=this;this.promise.then(n=>{if(!r._listeners)return;let s=r._listeners.length;for(;s-- >0;)r._listeners[s](n);r._listeners=null}),this.promise.then=n=>{let s,o=new Promise(a=>{r.subscribe(a),s=a}).then(n);return o.cancel=function(){r.unsubscribe(s)},o},t(function(s,o,a){r.reason||(r.reason=new rt(s,o,a),i(r.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(t){if(this.reason){t(this.reason);return}this._listeners?this._listeners.push(t):this._listeners=[t]}unsubscribe(t){if(!this._listeners)return;let i=this._listeners.indexOf(t);i!==-1&&this._listeners.splice(i,1)}static source(){let t;return{token:new e(function(n){t=n}),cancel:t}}},Og=Tc;function Sc(e){return function(i){return e.apply(null,i)}}function Cc(e){return I.isObject(e)&&e.isAxiosError===!0}var Oc={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Oc).forEach(([e,t])=>{Oc[t]=e});var Ag=Oc;function Dg(e){let t=new Pr(e),i=Er(Pr.prototype.request,t);return I.extend(i,Pr.prototype,t,{allOwnKeys:!0}),I.extend(i,t,null,{allOwnKeys:!0}),i.create=function(n){return Dg(vt(e,n))},i}var Ne=Dg(zi);Ne.Axios=Pr;Ne.CanceledError=rt;Ne.CancelToken=Og;Ne.isCancel=Or;Ne.VERSION=xi;Ne.toFormData=ei;Ne.AxiosError=B;Ne.Cancel=Ne.CanceledError;Ne.all=function(t){return Promise.all(t)};Ne.spread=Sc;Ne.isAxiosError=Cc;Ne.mergeConfig=vt;Ne.AxiosHeaders=he;Ne.formToJSON=e=>jn(I.isHTMLForm(e)?new FormData(e):e);Ne.getAdapter=Zn.getAdapter;Ne.HttpStatusCode=Ag;Ne.default=Ne;var Ji=Ne;var{Axios:Aq,AxiosError:Dq,CanceledError:Iq,isCancel:Nq,CancelToken:Lq,VERSION:kq,all:Rq,Cancel:Pq,isAxiosError:Fq,spread:jq,toFormData:Mq,AxiosHeaders:qq,HttpStatusCode:Bq,formToJSON:Uq,getAdapter:$q,mergeConfig:zq}=Ji;var hs=se(Ng(),1),ls=se(Hn(),1),nv=require("child_process"),Uv=se(Dc(),1),Qi=se(Dc(),1),fy=require("events"),ds=Object.defineProperty,h1=Object.defineProperties,m1=Object.getOwnPropertyDescriptor,g1=Object.getOwnPropertyDescriptors,Yc=Object.getOwnPropertyNames,Lg=Object.getOwnPropertySymbols,px=Object.prototype.hasOwnProperty,x1=Object.prototype.propertyIsEnumerable,kg=(e,t,i)=>t in e?ds(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i,dt=(e,t)=>{for(var i in t||(t={}))px.call(t,i)&&kg(e,i,t[i]);if(Lg)for(var i of Lg(t))x1.call(t,i)&&kg(e,i,t[i]);return e},Mr=(e,t)=>h1(e,g1(t)),M=(e,t)=>function(){return e&&(t=(0,e[Yc(e)[0]])(e=0)),t},v1=(e,t)=>function(){return t||(0,e[Yc(e)[0]])((t={exports:{}}).exports,t),t.exports},Se=(e,t)=>{for(var i in t)ds(e,i,{get:t[i],enumerable:!0})},y1=(e,t,i,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Yc(t))!px.call(e,n)&&n!==i&&ds(e,n,{get:()=>t[n],enumerable:!(r=m1(t,n))||r.enumerable});return e},we=e=>y1(ds({},"__esModule",{value:!0}),e),jr=(e,t,i)=>new Promise((r,n)=>{var s=c=>{try{a(i.next(c))}catch(u){n(u)}},o=c=>{try{a(i.throw(c))}catch(u){n(u)}},a=c=>c.done?r(c.value):Promise.resolve(c.value).then(s,o);a((i=i.apply(e,t)).next())});function b1(...e){let t=new String(e);return fs.set(t,e),t}function cs(e){return e instanceof String&&fs.has(e)}function Rg(e){return fs.get(e)||[]}var fs,$r=M({"src/lib/args/pathspec.ts"(){"use strict";fs=new WeakMap}}),$t,ni=M({"src/lib/errors/git-error.ts"(){"use strict";$t=class extends Error{constructor(e,t){super(t),this.task=e,Object.setPrototypeOf(this,new.target.prototype)}}}}),zr,tr=M({"src/lib/errors/git-response-error.ts"(){"use strict";ni(),zr=class extends $t{constructor(e,t){super(void 0,t||String(e)),this.git=e}}}}),dx,fx=M({"src/lib/errors/task-configuration-error.ts"(){"use strict";ni(),dx=class extends $t{constructor(e){super(void 0,e)}}}});function hx(e){return typeof e=="function"?e:Ei}function mx(e){return typeof e=="function"&&e!==Ei}function gx(e,t){let i=e.indexOf(t);return i<=0?[e,""]:[e.substr(0,i),e.substr(i+1)]}function xx(e,t=0){return vx(e)&&e.length>t?e[t]:void 0}function wi(e,t=0){if(vx(e)&&e.length>t)return e[e.length-1-t]}function vx(e){return!!(e&&typeof e.length=="number")}function Hr(e="",t=!0,i=`
`){return e.split(i).reduce((r,n)=>{let s=t?n.trim():n;return s&&r.push(s),r},[])}function Wc(e,t){return Hr(e,!0).map(i=>t(i))}function Kc(e){return(0,hs.exists)(e,hs.FOLDER)}function ee(e,t){return Array.isArray(e)?e.includes(t)||e.push(t):e.add(t),t}function yx(e,t){return Array.isArray(e)&&!e.includes(t)&&e.push(t),e}function ms(e,t){if(Array.isArray(e)){let i=e.indexOf(t);i>=0&&e.splice(i,1)}else e.delete(t);return t}function Ot(e){return Array.isArray(e)?e:[e]}function bx(e){return e.replace(/[\s-]+(.)/g,(t,i)=>i.toUpperCase())}function wx(e){return Ot(e).map(String)}function ce(e,t=0){if(e==null)return t;let i=parseInt(e,10);return isNaN(i)?t:i}function qr(e,t){let i=[];for(let r=0,n=e.length;r<n;r++)i.push(t,e[r]);return i}function Br(e){return(Array.isArray(e)?Buffer.concat(e):e).toString("utf-8")}function Ex(e,t){return Object.assign({},...t.map(i=>i in e?{[i]:e[i]}:{}))}function Fc(e=0){return new Promise(t=>setTimeout(t,e))}function _x(e){if(e!==!1)return e}var er,Ei,Gr,gs=M({"src/lib/utils/util.ts"(){"use strict";er="\0",Ei=()=>{},Gr=Object.prototype.toString.call.bind(Object.prototype.toString)}});function At(e,t,i){return t(e)?e:arguments.length>2?i:void 0}function Jc(e,t){let i=cs(e)?"string":typeof e;return/number|string|boolean/.test(i)&&(!t||!t.includes(i))}function Zc(e){return!!e&&Gr(e)==="[object Object]"}function Tx(e){return typeof e=="function"}var Vr,$e,Sx,us,Qc,Cx=M({"src/lib/utils/argument-filters.ts"(){"use strict";gs(),$r(),Vr=e=>Array.isArray(e),$e=e=>typeof e=="string",Sx=e=>Array.isArray(e)&&e.every($e),us=e=>$e(e)||Array.isArray(e)&&e.every($e),Qc=e=>e==null||"number|boolean|function".includes(typeof e)?!1:Array.isArray(e)||typeof e=="string"||typeof e.length=="number"}}),jc,w1=M({"src/lib/utils/exit-codes.ts"(){"use strict";jc=(e=>(e[e.SUCCESS=0]="SUCCESS",e[e.ERROR=1]="ERROR",e[e.NOT_FOUND=-2]="NOT_FOUND",e[e.UNCLEAN=128]="UNCLEAN",e))(jc||{})}}),Ur,E1=M({"src/lib/utils/git-output-streams.ts"(){"use strict";Ur=class{constructor(e,t){this.stdOut=e,this.stdErr=t}asStrings(){return new Ur(this.stdOut.toString("utf8"),this.stdErr.toString("utf8"))}}}}),K,ri,_1=M({"src/lib/utils/line-parser.ts"(){"use strict";K=class{constructor(e,t){this.matches=[],this.parse=(i,r)=>(this.resetMatches(),this._regExp.every((n,s)=>this.addMatch(n,s,i(s)))?this.useMatches(r,this.prepareMatches())!==!1:!1),this._regExp=Array.isArray(e)?e:[e],t&&(this.useMatches=t)}useMatches(e,t){throw new Error("LineParser:useMatches not implemented")}resetMatches(){this.matches.length=0}prepareMatches(){return this.matches}addMatch(e,t,i){let r=i&&e.exec(i);return r&&this.pushMatch(t,r),!!r}pushMatch(e,t){this.matches.push(...t.slice(1))}},ri=class extends K{addMatch(e,t,i){return/^remote:\s/.test(String(i))&&super.addMatch(e,t,i)}pushMatch(e,t){(e>0||t.length>1)&&super.pushMatch(e,t)}}}});function Ox(...e){let t=process.cwd(),i=Object.assign(dt({baseDir:t},Ax),...e.filter(r=>typeof r=="object"&&r));return i.baseDir=i.baseDir||t,i.trimmed=i.trimmed===!0,i}var Ax,T1=M({"src/lib/utils/simple-git-options.ts"(){"use strict";Ax={binary:"git",maxConcurrentProcesses:5,config:[],trimmed:!1}}});function eu(e,t=[]){return Zc(e)?Object.keys(e).reduce((i,r)=>{let n=e[r];return cs(n)?i.push(n):Jc(n,["boolean"])?i.push(r+"="+n):i.push(r),i},t):t}function Je(e,t=0,i=!1){let r=[];for(let n=0,s=t<0?e.length:t;n<s;n++)"string|number".includes(typeof e[n])&&r.push(String(e[n]));return eu(tu(e),r),i||r.push(...S1(e)),r}function S1(e){let t=typeof wi(e)=="function";return At(wi(e,t?1:0),Vr,[])}function tu(e){let t=Tx(wi(e));return At(wi(e,t?1:0),Zc)}function Ee(e,t=!0){let i=hx(wi(e));return t||mx(i)?i:void 0}var C1=M({"src/lib/utils/task-options.ts"(){"use strict";Cx(),gs(),$r()}});function Mc(e,t){return e(t.stdOut,t.stdErr)}function Qe(e,t,i,r=!0){return Ot(i).forEach(n=>{for(let s=Hr(n,r),o=0,a=s.length;o<a;o++){let c=(u=0)=>{if(!(o+u>=a))return s[o+u]};t.some(({parse:u})=>u(c,e))}}),e}var O1=M({"src/lib/utils/task-parser.ts"(){"use strict";gs()}}),Dx={};Se(Dx,{ExitCodes:()=>jc,GitOutputStreams:()=>Ur,LineParser:()=>K,NOOP:()=>Ei,NULL:()=>er,RemoteLineParser:()=>ri,append:()=>ee,appendTaskOptions:()=>eu,asArray:()=>Ot,asCamelCase:()=>bx,asFunction:()=>hx,asNumber:()=>ce,asStringArray:()=>wx,bufferToString:()=>Br,callTaskParser:()=>Mc,createInstanceConfig:()=>Ox,delay:()=>Fc,filterArray:()=>Vr,filterFunction:()=>Tx,filterHasLength:()=>Qc,filterPlainObject:()=>Zc,filterPrimitives:()=>Jc,filterString:()=>$e,filterStringArray:()=>Sx,filterStringOrStringArray:()=>us,filterType:()=>At,first:()=>xx,folderExists:()=>Kc,forEachLineWithContent:()=>Wc,getTrailingOptions:()=>Je,including:()=>yx,isUserFunction:()=>mx,last:()=>wi,objectToString:()=>Gr,orVoid:()=>_x,parseStringResponse:()=>Qe,pick:()=>Ex,prefixedArray:()=>qr,remove:()=>ms,splitOn:()=>gx,toLinesWithContent:()=>Hr,trailingFunctionArgument:()=>Ee,trailingOptionsArgument:()=>tu});var Y=M({"src/lib/utils/index.ts"(){"use strict";Cx(),w1(),E1(),_1(),T1(),C1(),O1(),gs()}}),Ix={};Se(Ix,{CheckRepoActions:()=>qc,checkIsBareRepoTask:()=>Lx,checkIsRepoRootTask:()=>Nx,checkIsRepoTask:()=>A1});function A1(e){switch(e){case"bare":return Lx();case"root":return Nx()}return{commands:["rev-parse","--is-inside-work-tree"],format:"utf-8",onError:xs,parser:iu}}function Nx(){return{commands:["rev-parse","--git-dir"],format:"utf-8",onError:xs,parser(t){return/^\.(git)?$/.test(t.trim())}}}function Lx(){return{commands:["rev-parse","--is-bare-repository"],format:"utf-8",onError:xs,parser:iu}}function D1(e){return/(Not a git repository|Kein Git-Repository)/i.test(String(e))}var qc,xs,iu,kx=M({"src/lib/tasks/check-is-repo.ts"(){"use strict";Y(),qc=(e=>(e.BARE="bare",e.IN_TREE="tree",e.IS_REPO_ROOT="root",e))(qc||{}),xs=({exitCode:e},t,i,r)=>{if(e===128&&D1(t))return i(Buffer.from("false"));r(t)},iu=e=>e.trim()==="true"}});function I1(e,t){let i=new Rx(e),r=e?Fx:Px;return Hr(t).forEach(n=>{let s=n.replace(r,"");i.paths.push(s),(jx.test(s)?i.folders:i.files).push(s)}),i}var Rx,Px,Fx,jx,N1=M({"src/lib/responses/CleanSummary.ts"(){"use strict";Y(),Rx=class{constructor(e){this.dryRun=e,this.paths=[],this.files=[],this.folders=[]}},Px=/^[a-z]+\s*/i,Fx=/^[a-z]+\s+[a-z]+\s*/i,jx=/\/$/}}),Bc={};Se(Bc,{EMPTY_COMMANDS:()=>vs,adhocExecTask:()=>Mx,configurationErrorTask:()=>Ze,isBufferTask:()=>Bx,isEmptyTask:()=>Ux,straightThroughBufferTask:()=>qx,straightThroughStringTask:()=>Ge});function Mx(e){return{commands:vs,format:"empty",parser:e}}function Ze(e){return{commands:vs,format:"empty",parser(){throw typeof e=="string"?new dx(e):e}}}function Ge(e,t=!1){return{commands:e,format:"utf-8",parser(i){return t?String(i).trim():i}}}function qx(e){return{commands:e,format:"buffer",parser(t){return t}}}function Bx(e){return e.format==="buffer"}function Ux(e){return e.format==="empty"||!e.commands.length}var vs,Te=M({"src/lib/tasks/task.ts"(){"use strict";fx(),vs=[]}}),$x={};Se($x,{CONFIG_ERROR_INTERACTIVE_MODE:()=>ru,CONFIG_ERROR_MODE_REQUIRED:()=>nu,CONFIG_ERROR_UNKNOWN_OPTION:()=>su,CleanOptions:()=>ns,cleanTask:()=>zx,cleanWithOptionsTask:()=>L1,isCleanOptionsArray:()=>k1});function L1(e,t){let{cleanMode:i,options:r,valid:n}=R1(e);return i?n.options?(r.push(...t),r.some(j1)?Ze(ru):zx(i,r)):Ze(su+JSON.stringify(e)):Ze(nu)}function zx(e,t){return{commands:["clean",`-${e}`,...t],format:"utf-8",parser(r){return I1(e==="n",r)}}}function k1(e){return Array.isArray(e)&&e.every(t=>ou.has(t))}function R1(e){let t,i=[],r={cleanMode:!1,options:!0};return e.replace(/[^a-z]i/g,"").split("").forEach(n=>{P1(n)?(t=n,r.cleanMode=!0):r.options=r.options&&F1(i[i.length]=`-${n}`)}),{cleanMode:t,options:i,valid:r}}function P1(e){return e==="f"||e==="n"}function F1(e){return/^-[a-z]$/i.test(e)&&ou.has(e.charAt(1))}function j1(e){return/^-[^\-]/.test(e)?e.indexOf("i")>0:e==="--interactive"}var ru,nu,su,ns,ou,Hx=M({"src/lib/tasks/clean.ts"(){"use strict";N1(),Y(),Te(),ru="Git clean interactive mode is not supported",nu='Git clean mode parameter ("n" or "f") is required',su="Git clean unknown option found in: ",ns=(e=>(e.DRY_RUN="n",e.FORCE="f",e.IGNORED_INCLUDED="x",e.IGNORED_ONLY="X",e.EXCLUDING="e",e.QUIET="q",e.RECURSIVE="d",e))(ns||{}),ou=new Set(["i",...wx(Object.values(ns))])}});function M1(e){let t=new Vx;for(let i of Gx(e))t.addValue(i.file,String(i.key),i.value);return t}function q1(e,t){let i=null,r=[],n=new Map;for(let s of Gx(e,t))s.key===t&&(r.push(i=s.value),n.has(s.file)||n.set(s.file,[]),n.get(s.file).push(i));return{key:t,paths:Array.from(n.keys()),scopes:n,value:i,values:r}}function B1(e){return e.replace(/^(file):/,"")}function*Gx(e,t=null){let i=e.split("\0");for(let r=0,n=i.length-1;r<n;){let s=B1(i[r++]),o=i[r++],a=t;if(o.includes(`
`)){let c=gx(o,`
`);a=c[0],o=c[1]}yield{file:s,key:a,value:o}}}var Vx,U1=M({"src/lib/responses/ConfigList.ts"(){"use strict";Y(),Vx=class{constructor(){this.files=[],this.values=Object.create(null)}get all(){return this._all||(this._all=this.files.reduce((e,t)=>Object.assign(e,this.values[t]),{})),this._all}addFile(e){if(!(e in this.values)){let t=wi(this.files);this.values[e]=t?Object.create(this.values[t]):{},this.files.push(e)}return this.values[e]}addValue(e,t,i){let r=this.addFile(e);r.hasOwnProperty(t)?Array.isArray(r[t])?r[t].push(i):r[t]=[r[t],i]:r[t]=i,this._all=void 0}}}});function Ic(e,t){return typeof e=="string"&&Uc.hasOwnProperty(e)?e:t}function $1(e,t,i,r){let n=["config",`--${r}`];return i&&n.push("--add"),n.push(e,t),{commands:n,format:"utf-8",parser(s){return s}}}function z1(e,t){let i=["config","--null","--show-origin","--get-all",e];return t&&i.splice(1,0,`--${t}`),{commands:i,format:"utf-8",parser(r){return q1(r,e)}}}function H1(e){let t=["config","--list","--show-origin","--null"];return e&&t.push(`--${e}`),{commands:t,format:"utf-8",parser(i){return M1(i)}}}function G1(){return{addConfig(e,t,...i){return this._runTask($1(e,t,i[0]===!0,Ic(i[1],"local")),Ee(arguments))},getConfig(e,t){return this._runTask(z1(e,Ic(t,void 0)),Ee(arguments))},listConfig(...e){return this._runTask(H1(Ic(e[0],void 0)),Ee(arguments))}}}var Uc,Xx=M({"src/lib/tasks/config.ts"(){"use strict";U1(),Y(),Uc=(e=>(e.system="system",e.global="global",e.local="local",e.worktree="worktree",e))(Uc||{})}});function V1(e){return Yx.has(e)}var Nc,Yx,Wx=M({"src/lib/tasks/diff-name-status.ts"(){"use strict";Nc=(e=>(e.ADDED="A",e.COPIED="C",e.DELETED="D",e.MODIFIED="M",e.RENAMED="R",e.CHANGED="T",e.UNMERGED="U",e.UNKNOWN="X",e.BROKEN="B",e))(Nc||{}),Yx=new Set(Object.values(Nc))}});function X1(...e){return new Jx().param(...e)}function Y1(e){let t=new Set,i={};return Wc(e,r=>{let[n,s,o]=r.split(er);t.add(n),(i[n]=i[n]||[]).push({line:ce(s),path:n,preview:o})}),{paths:t,results:i}}function W1(){return{grep(e){let t=Ee(arguments),i=Je(arguments);for(let n of Kx)if(i.includes(n))return this._runTask(Ze(`git.grep: use of "${n}" is not supported.`),t);typeof e=="string"&&(e=X1().param(e));let r=["grep","--null","-n","--full-name",...i,...e];return this._runTask({commands:r,format:"utf-8",parser(n){return Y1(n)}},t)}}}var Kx,Fr,Pg,Jx,Zx=M({"src/lib/tasks/grep.ts"(){"use strict";Y(),Te(),Kx=["-h"],Fr=Symbol("grepQuery"),Jx=class{constructor(){this[Pg]=[]}*[(Pg=Fr,Symbol.iterator)](){for(let e of this[Fr])yield e}and(...e){return e.length&&this[Fr].push("--and","(",...qr(e,"-e"),")"),this}param(...e){return this[Fr].push(...qr(e,"-e")),this}}}}),Qx={};Se(Qx,{ResetMode:()=>ss,getResetMode:()=>J1,resetTask:()=>K1});function K1(e,t){let i=["reset"];return ev(e)&&i.push(`--${e}`),i.push(...t),Ge(i)}function J1(e){if(ev(e))return e;switch(typeof e){case"string":case"undefined":return"soft"}}function ev(e){return tv.includes(e)}var ss,tv,iv=M({"src/lib/tasks/reset.ts"(){"use strict";Te(),ss=(e=>(e.MIXED="mixed",e.SOFT="soft",e.HARD="hard",e.MERGE="merge",e.KEEP="keep",e))(ss||{}),tv=Array.from(Object.values(ss))}});function Z1(){return(0,ls.default)("simple-git")}function Fg(e,t,i){return!t||!String(t).replace(/\s*/,"")?i?(r,...n)=>{e(r,...n),i(r,...n)}:e:(r,...n)=>{e(`%s ${r}`,t,...n),i&&i(r,...n)}}function Q1(e,t,{namespace:i}){if(typeof e=="string")return e;let r=t&&t.namespace||"";return r.startsWith(i)?r.substr(i.length+1):r||i}function au(e,t,i,r=Z1()){let n=e&&`[${e}]`||"",s=[],o=typeof t=="string"?r.extend(t):t,a=Q1(At(t,$e),o,r);return u(i);function c(f,g){return ee(s,au(e,a.replace(/^[^:]+/,f),g,r))}function u(f){let g=f&&`[${f}]`||"",x=o&&Fg(o,g)||Ei,l=Fg(r,`${n} ${g}`,x);return Object.assign(o?x:l,{label:e,sibling:c,info:l,step:u})}}var rv=M({"src/lib/git-logger.ts"(){"use strict";Y(),ls.default.formatters.L=e=>String(Qc(e)?e.length:"-"),ls.default.formatters.B=e=>Buffer.isBuffer(e)?e.toString("utf8"):Gr(e)}}),is,$c,eA=M({"src/lib/runners/tasks-pending-queue.ts"(){"use strict";ni(),rv(),is=class{constructor(e="GitExecutor"){this.logLabel=e,this._queue=new Map}withProgress(e){return this._queue.get(e)}createProgress(e){let t=is.getName(e.commands[0]),i=au(this.logLabel,t);return{task:e,logger:i,name:t}}push(e){let t=this.createProgress(e);return t.logger("Adding task to the queue, commands = %o",e.commands),this._queue.set(e,t),t}fatal(e){for(let[t,{logger:i}]of Array.from(this._queue.entries()))t===e.task?(i.info("Failed %o",e),i("Fatal exception, any as-yet un-started tasks run through this executor will not be attempted")):i.info("A fatal exception occurred in a previous task, the queue has been purged: %o",e.message),this.complete(t);if(this._queue.size!==0)throw new Error(`Queue size should be zero after fatal: ${this._queue.size}`)}complete(e){this.withProgress(e)&&this._queue.delete(e)}attempt(e){let t=this.withProgress(e);if(!t)throw new $t(void 0,"TasksPendingQueue: attempt called for an unknown task");return t.logger("Starting task"),t}static getName(e="empty"){return`task:${e}:${++is.counter}`}},$c=is,$c.counter=0}});function bi(e,t){return{method:xx(e.commands)||"",commands:t}}function tA(e,t){return i=>{t("[ERROR] child process exception %o",i),e.push(Buffer.from(String(i.stack),"ascii"))}}function jg(e,t,i,r){return n=>{i("%s received %L bytes",t,n),r("%B",n),e.push(n)}}var zc,iA=M({"src/lib/runners/git-executor-chain.ts"(){"use strict";ni(),Te(),Y(),eA(),zc=class{constructor(e,t,i){this._executor=e,this._scheduler=t,this._plugins=i,this._chain=Promise.resolve(),this._queue=new $c}get cwd(){return this._cwd||this._executor.cwd}set cwd(e){this._cwd=e}get env(){return this._executor.env}get outputHandler(){return this._executor.outputHandler}chain(){return this}push(e){return this._queue.push(e),this._chain=this._chain.then(()=>this.attemptTask(e))}attemptTask(e){return jr(this,null,function*(){let t=yield this._scheduler.next(),i=()=>this._queue.complete(e);try{let{logger:r}=this._queue.attempt(e);return yield Ux(e)?this.attemptEmptyTask(e,r):this.attemptRemoteTask(e,r)}catch(r){throw this.onFatalException(e,r)}finally{i(),t()}})}onFatalException(e,t){let i=t instanceof $t?Object.assign(t,{task:e}):new $t(e,t&&String(t));return this._chain=Promise.resolve(),this._queue.fatal(i),i}attemptRemoteTask(e,t){return jr(this,null,function*(){let i=this._plugins.exec("spawn.binary","",bi(e,e.commands)),r=this._plugins.exec("spawn.args",[...e.commands],bi(e,e.commands)),n=yield this.gitResponse(e,i,r,this.outputHandler,t.step("SPAWN")),s=yield this.handleTaskData(e,r,n,t.step("HANDLE"));return t("passing response to task's parser as a %s",e.format),Bx(e)?Mc(e.parser,s):Mc(e.parser,s.asStrings())})}attemptEmptyTask(e,t){return jr(this,null,function*(){return t("empty task bypassing child process to call to task's parser"),e.parser(this)})}handleTaskData(e,t,i,r){let{exitCode:n,rejection:s,stdOut:o,stdErr:a}=i;return new Promise((c,u)=>{r("Preparing to handle process response exitCode=%d stdOut=",n);let{error:f}=this._plugins.exec("task.error",{error:s},dt(dt({},bi(e,t)),i));if(f&&e.onError)return r.info("exitCode=%s handling with custom error handler"),e.onError(i,f,g=>{r.info("custom error handler treated as success"),r("custom error returned a %s",Gr(g)),c(new Ur(Array.isArray(g)?Buffer.concat(g):g,Buffer.concat(a)))},u);if(f)return r.info("handling as error: exitCode=%s stdErr=%s rejection=%o",n,a.length,s),u(f);r.info("retrieving task output complete"),c(new Ur(Buffer.concat(o),Buffer.concat(a)))})}gitResponse(e,t,i,r,n){return jr(this,null,function*(){let s=n.sibling("output"),o=this._plugins.exec("spawn.options",{cwd:this.cwd,env:this.env,windowsHide:!0},bi(e,e.commands));return new Promise(a=>{let c=[],u=[];n.info("%s %o",t,i),n("%O",o);let f=this._beforeSpawn(e,i);if(f)return a({stdOut:c,stdErr:u,exitCode:9901,rejection:f});this._plugins.exec("spawn.before",void 0,Mr(dt({},bi(e,i)),{kill(x){f=x||f}}));let g=(0,nv.spawn)(t,i,o);g.stdout.on("data",jg(c,"stdOut",n,s.step("stdOut"))),g.stderr.on("data",jg(u,"stdErr",n,s.step("stdErr"))),g.on("error",tA(u,n)),r&&(n("Passing child process stdOut/stdErr to custom outputHandler"),r(t,g.stdout,g.stderr,[...i])),this._plugins.exec("spawn.after",void 0,Mr(dt({},bi(e,i)),{spawned:g,close(x,l){a({stdOut:c,stdErr:u,exitCode:x,rejection:f||l})},kill(x){g.killed||(f=x,g.kill("SIGINT"))}}))})})}_beforeSpawn(e,t){let i;return this._plugins.exec("spawn.before",void 0,Mr(dt({},bi(e,t)),{kill(r){i=r||i}})),i}}}}),sv={};Se(sv,{GitExecutor:()=>ov});var ov,rA=M({"src/lib/runners/git-executor.ts"(){"use strict";iA(),ov=class{constructor(e,t,i){this.cwd=e,this._scheduler=t,this._plugins=i,this._chain=new zc(this,this._scheduler,this._plugins)}chain(){return new zc(this,this._scheduler,this._plugins)}push(e){return this._chain.push(e)}}}});function nA(e,t,i=Ei){let r=s=>{i(null,s)},n=s=>{s?.task===e&&i(s instanceof zr?sA(s):s,void 0)};t.then(r,n)}function sA(e){let t=r=>{console.warn(`simple-git deprecation notice: accessing GitResponseError.${r} should be GitResponseError.git.${r}, this will no longer be available in version 3`),t=Ei};return Object.create(e,Object.getOwnPropertyNames(e.git).reduce(i,{}));function i(r,n){return n in e||(r[n]={enumerable:!1,configurable:!1,get(){return t(n),e.git[n]}}),r}}var oA=M({"src/lib/task-callback.ts"(){"use strict";tr(),Y()}});function Mg(e,t){return Mx(i=>{if(!Kc(e))throw new Error(`Git.cwd: cannot change to non-directory "${e}"`);return(t||i).cwd=e})}var aA=M({"src/lib/tasks/change-working-directory.ts"(){"use strict";Y(),Te()}});function Lc(e){let t=["checkout",...e];return t[1]==="-b"&&t.includes("-B")&&(t[1]=ms(t,"-B")),Ge(t)}function cA(){return{checkout(){return this._runTask(Lc(Je(arguments,1)),Ee(arguments))},checkoutBranch(e,t){return this._runTask(Lc(["-b",e,t,...Je(arguments)]),Ee(arguments))},checkoutLocalBranch(e){return this._runTask(Lc(["-b",e,...Je(arguments)]),Ee(arguments))}}}var uA=M({"src/lib/tasks/checkout.ts"(){"use strict";Y(),Te()}});function lA(){return{count:0,garbage:0,inPack:0,packs:0,prunePackable:0,size:0,sizeGarbage:0,sizePack:0}}function pA(){return{countObjects(){return this._runTask({commands:["count-objects","--verbose"],format:"utf-8",parser(e){return Qe(lA(),[av],e)}})}}}var av,dA=M({"src/lib/tasks/count-objects.ts"(){"use strict";Y(),av=new K(/([a-z-]+): (\d+)$/,(e,[t,i])=>{let r=bx(t);e.hasOwnProperty(r)&&(e[r]=ce(i))})}});function fA(e){return Qe({author:null,branch:"",commit:"",root:!1,summary:{changes:0,insertions:0,deletions:0}},cv,e)}var cv,hA=M({"src/lib/parsers/parse-commit.ts"(){"use strict";Y(),cv=[new K(/^\[([^\s]+)( \([^)]+\))? ([^\]]+)/,(e,[t,i,r])=>{e.branch=t,e.commit=r,e.root=!!i}),new K(/\s*Author:\s(.+)/i,(e,[t])=>{let i=t.split("<"),r=i.pop();!r||!r.includes("@")||(e.author={email:r.substr(0,r.length-1),name:i.join("<").trim()})}),new K(/(\d+)[^,]*(?:,\s*(\d+)[^,]*)(?:,\s*(\d+))/g,(e,[t,i,r])=>{e.summary.changes=parseInt(t,10)||0,e.summary.insertions=parseInt(i,10)||0,e.summary.deletions=parseInt(r,10)||0}),new K(/^(\d+)[^,]*(?:,\s*(\d+)[^(]+\(([+-]))?/,(e,[t,i,r])=>{e.summary.changes=parseInt(t,10)||0;let n=parseInt(i,10)||0;r==="-"?e.summary.deletions=n:r==="+"&&(e.summary.insertions=n)})]}});function mA(e,t,i){return{commands:["-c","core.abbrev=40","commit",...qr(e,"-m"),...t,...i],format:"utf-8",parser:fA}}function gA(){return{commit(t,...i){let r=Ee(arguments),n=e(t)||mA(Ot(t),Ot(At(i[0],us,[])),[...At(i[1],Vr,[]),...Je(arguments,0,!0)]);return this._runTask(n,r)}};function e(t){return!us(t)&&Ze("git.commit: requires the commit message to be supplied as a string/string[]")}}var xA=M({"src/lib/tasks/commit.ts"(){"use strict";hA(),Y(),Te()}});function vA(){return{firstCommit(){return this._runTask(Ge(["rev-list","--max-parents=0","HEAD"],!0),Ee(arguments))}}}var yA=M({"src/lib/tasks/first-commit.ts"(){"use strict";Y(),Te()}});function bA(e,t){let i=["hash-object",e];return t&&i.push("-w"),Ge(i,!0)}var wA=M({"src/lib/tasks/hash-object.ts"(){"use strict";Te()}});function EA(e,t,i){let r=String(i).trim(),n;if(n=uv.exec(r))return new os(e,t,!1,n[1]);if(n=lv.exec(r))return new os(e,t,!0,n[1]);let s="",o=r.split(" ");for(;o.length;)if(o.shift()==="in"){s=o.join(" ");break}return new os(e,t,/^re/i.test(r),s)}var os,uv,lv,_A=M({"src/lib/responses/InitSummary.ts"(){"use strict";os=class{constructor(e,t,i,r){this.bare=e,this.path=t,this.existing=i,this.gitDir=r}},uv=/^Init.+ repository in (.+)$/,lv=/^Rein.+ in (.+)$/}});function TA(e){return e.includes(cu)}function SA(e=!1,t,i){let r=["init",...i];return e&&!TA(r)&&r.splice(1,0,cu),{commands:r,format:"utf-8",parser(n){return EA(r.includes("--bare"),t,n)}}}var cu,CA=M({"src/lib/tasks/init.ts"(){"use strict";_A(),cu="--bare"}});function uu(e){for(let t=0;t<e.length;t++){let i=lu.exec(e[t]);if(i)return`--${i[1]}`}return""}function OA(e){return lu.test(e)}var lu,Xr=M({"src/lib/args/log-format.ts"(){"use strict";lu=/^--(stat|numstat|name-only|name-status)(=|$)/}}),pv,AA=M({"src/lib/responses/DiffSummary.ts"(){"use strict";pv=class{constructor(){this.changed=0,this.deletions=0,this.insertions=0,this.files=[]}}}});function dv(e=""){let t=fv[e];return i=>Qe(new pv,t,i,!1)}var kc,qg,Bg,Ug,fv,hv=M({"src/lib/parsers/parse-diff-summary.ts"(){"use strict";Xr(),AA(),Wx(),Y(),kc=[new K(/^(.+)\s+\|\s+(\d+)(\s+[+\-]+)?$/,(e,[t,i,r=""])=>{e.files.push({file:t.trim(),changes:ce(i),insertions:r.replace(/[^+]/g,"").length,deletions:r.replace(/[^-]/g,"").length,binary:!1})}),new K(/^(.+) \|\s+Bin ([0-9.]+) -> ([0-9.]+) ([a-z]+)/,(e,[t,i,r])=>{e.files.push({file:t.trim(),before:ce(i),after:ce(r),binary:!0})}),new K(/(\d+) files? changed\s*((?:, \d+ [^,]+){0,2})/,(e,[t,i])=>{let r=/(\d+) i/.exec(i),n=/(\d+) d/.exec(i);e.changed=ce(t),e.insertions=ce(r?.[1]),e.deletions=ce(n?.[1])})],qg=[new K(/(\d+)\t(\d+)\t(.+)$/,(e,[t,i,r])=>{let n=ce(t),s=ce(i);e.changed++,e.insertions+=n,e.deletions+=s,e.files.push({file:r,changes:n+s,insertions:n,deletions:s,binary:!1})}),new K(/-\t-\t(.+)$/,(e,[t])=>{e.changed++,e.files.push({file:t,after:0,before:0,binary:!0})})],Bg=[new K(/(.+)$/,(e,[t])=>{e.changed++,e.files.push({file:t,changes:0,insertions:0,deletions:0,binary:!1})})],Ug=[new K(/([ACDMRTUXB])([0-9]{0,3})\t(.[^\t]*)(\t(.[^\t]*))?$/,(e,[t,i,r,n,s])=>{e.changed++,e.files.push({file:s??r,changes:0,status:_x(V1(t)&&t),insertions:0,deletions:0,binary:!1})})],fv={"":kc,"--stat":kc,"--numstat":qg,"--name-status":Ug,"--name-only":Bg}}});function DA(e,t){return t.reduce((i,r,n)=>(i[r]=e[n]||"",i),Object.create({diff:null}))}function mv(e=fu,t=gv,i=""){let r=dv(i);return function(n){let s=Hr(n,!0,pu).map(function(o){let a=o.trim().split(du),c=DA(a[0].trim().split(e),t);return a.length>1&&a[1].trim()&&(c.diff=r(a[1])),c});return{all:s,latest:s.length&&s[0]||null,total:s.length}}}var pu,du,fu,gv,xv=M({"src/lib/parsers/parse-list-log-summary.ts"(){"use strict";Y(),hv(),Xr(),pu="\xF2\xF2\xF2\xF2\xF2\xF2 ",du=" \xF2\xF2",fu=" \xF2 ",gv=["hash","date","message","refs","author_name","author_email"]}}),vv={};Se(vv,{diffSummaryTask:()=>IA,validateLogFormatConfig:()=>ys});function IA(e){let t=uu(e),i=["diff"];return t===""&&(t="--stat",i.push("--stat=4096")),i.push(...e),ys(i)||{commands:i,format:"utf-8",parser:dv(t)}}function ys(e){let t=e.filter(OA);if(t.length>1)return Ze(`Summary flags are mutually exclusive - pick one of ${t.join(",")}`);if(t.length&&e.includes("-z"))return Ze(`Summary flag ${t} parsing is not compatible with null termination option '-z'`)}var hu=M({"src/lib/tasks/diff.ts"(){"use strict";Xr(),hv(),Te()}});function NA(e,t){let i=[],r=[];return Object.keys(e).forEach(n=>{i.push(n),r.push(String(e[n]))}),[i,r.join(t)]}function LA(e){return Object.keys(e).reduce((t,i)=>(i in Hc||(t[i]=e[i]),t),{})}function yv(e={},t=[]){let i=At(e.splitter,$e,fu),r=!Jc(e.format)&&e.format?e.format:{hash:"%H",date:e.strictDate===!1?"%ai":"%aI",message:"%s",refs:"%D",body:e.multiLine?"%B":"%b",author_name:e.mailMap!==!1?"%aN":"%an",author_email:e.mailMap!==!1?"%aE":"%ae"},[n,s]=NA(r,i),o=[],a=[`--pretty=format:${pu}${s}${du}`,...t],c=e.n||e["max-count"]||e.maxCount;if(c&&a.push(`--max-count=${c}`),e.from||e.to){let u=e.symmetric!==!1?"...":"..";o.push(`${e.from||""}${u}${e.to||""}`)}return $e(e.file)&&a.push("--follow",b1(e.file)),eu(LA(e),a),{fields:n,splitter:i,commands:[...a,...o]}}function kA(e,t,i){let r=mv(e,t,uu(i));return{commands:["log",...i],format:"utf-8",parser:r}}function RA(){return{log(...i){let r=Ee(arguments),n=yv(tu(arguments),At(arguments[0],Vr)),s=t(...i)||ys(n.commands)||e(n);return this._runTask(s,r)}};function e(i){return kA(i.splitter,i.fields,i.commands)}function t(i,r){return $e(i)&&$e(r)&&Ze("git.log(string, string) should be replaced with git.log({ from: string, to: string })")}}var Hc,bv=M({"src/lib/tasks/log.ts"(){"use strict";Xr(),$r(),xv(),Y(),Te(),hu(),Hc=(e=>(e[e["--pretty"]=0]="--pretty",e[e["max-count"]=1]="max-count",e[e.maxCount=2]="maxCount",e[e.n=3]="n",e[e.file=4]="file",e[e.format=5]="format",e[e.from=6]="from",e[e.to=7]="to",e[e.splitter=8]="splitter",e[e.symmetric=9]="symmetric",e[e.mailMap=10]="mailMap",e[e.multiLine=11]="multiLine",e[e.strictDate=12]="strictDate",e))(Hc||{})}}),as,wv,PA=M({"src/lib/responses/MergeSummary.ts"(){"use strict";as=class{constructor(e,t=null,i){this.reason=e,this.file=t,this.meta=i}toString(){return`${this.file}:${this.reason}`}},wv=class{constructor(){this.conflicts=[],this.merges=[],this.result="success"}get failed(){return this.conflicts.length>0}get reason(){return this.result}toString(){return this.conflicts.length?`CONFLICTS: ${this.conflicts.join(", ")}`:"OK"}}}}),Gc,Ev,FA=M({"src/lib/responses/PullSummary.ts"(){"use strict";Gc=class{constructor(){this.remoteMessages={all:[]},this.created=[],this.deleted=[],this.files=[],this.deletions={},this.insertions={},this.summary={changes:0,deletions:0,insertions:0}}},Ev=class{constructor(){this.remote="",this.hash={local:"",remote:""},this.branch={local:"",remote:""},this.message=""}toString(){return this.message}}}});function Rc(e){return e.objects=e.objects||{compressing:0,counting:0,enumerating:0,packReused:0,reused:{count:0,delta:0},total:{count:0,delta:0}}}function $g(e){let t=/^\s*(\d+)/.exec(e),i=/delta (\d+)/i.exec(e);return{count:ce(t&&t[1]||"0"),delta:ce(i&&i[1]||"0")}}var _v,jA=M({"src/lib/parsers/parse-remote-objects.ts"(){"use strict";Y(),_v=[new ri(/^remote:\s*(enumerating|counting|compressing) objects: (\d+),/i,(e,[t,i])=>{let r=t.toLowerCase(),n=Rc(e.remoteMessages);Object.assign(n,{[r]:ce(i)})}),new ri(/^remote:\s*(enumerating|counting|compressing) objects: \d+% \(\d+\/(\d+)\),/i,(e,[t,i])=>{let r=t.toLowerCase(),n=Rc(e.remoteMessages);Object.assign(n,{[r]:ce(i)})}),new ri(/total ([^,]+), reused ([^,]+), pack-reused (\d+)/i,(e,[t,i,r])=>{let n=Rc(e.remoteMessages);n.total=$g(t),n.reused=$g(i),n.packReused=ce(r)})]}});function Tv(e,t){return Qe({remoteMessages:new Cv},Sv,t)}var Sv,Cv,Ov=M({"src/lib/parsers/parse-remote-messages.ts"(){"use strict";Y(),jA(),Sv=[new ri(/^remote:\s*(.+)$/,(e,[t])=>(e.remoteMessages.all.push(t.trim()),!1)),..._v,new ri([/create a (?:pull|merge) request/i,/\s(https?:\/\/\S+)$/],(e,[t])=>{e.remoteMessages.pullRequestUrl=t}),new ri([/found (\d+) vulnerabilities.+\(([^)]+)\)/i,/\s(https?:\/\/\S+)$/],(e,[t,i,r])=>{e.remoteMessages.vulnerabilities={count:ce(t),summary:i,url:r}})],Cv=class{constructor(){this.all=[]}}}});function MA(e,t){let i=Qe(new Ev,Av,[e,t]);return i.message&&i}var zg,Hg,Gg,Vg,Av,Xg,mu,Dv=M({"src/lib/parsers/parse-pull.ts"(){"use strict";FA(),Y(),Ov(),zg=/^\s*(.+?)\s+\|\s+\d+\s*(\+*)(-*)/,Hg=/(\d+)\D+((\d+)\D+\(\+\))?(\D+(\d+)\D+\(-\))?/,Gg=/^(create|delete) mode \d+ (.+)/,Vg=[new K(zg,(e,[t,i,r])=>{e.files.push(t),i&&(e.insertions[t]=i.length),r&&(e.deletions[t]=r.length)}),new K(Hg,(e,[t,,i,,r])=>i!==void 0||r!==void 0?(e.summary.changes=+t||0,e.summary.insertions=+i||0,e.summary.deletions=+r||0,!0):!1),new K(Gg,(e,[t,i])=>{ee(e.files,i),ee(t==="create"?e.created:e.deleted,i)})],Av=[new K(/^from\s(.+)$/i,(e,[t])=>void(e.remote=t)),new K(/^fatal:\s(.+)$/,(e,[t])=>void(e.message=t)),new K(/([a-z0-9]+)\.\.([a-z0-9]+)\s+(\S+)\s+->\s+(\S+)$/,(e,[t,i,r,n])=>{e.branch.local=r,e.hash.local=t,e.branch.remote=n,e.hash.remote=i})],Xg=(e,t)=>Qe(new Gc,Vg,[e,t]),mu=(e,t)=>Object.assign(new Gc,Xg(e,t),Tv(e,t))}}),Yg,Iv,Wg,qA=M({"src/lib/parsers/parse-merge.ts"(){"use strict";PA(),Y(),Dv(),Yg=[new K(/^Auto-merging\s+(.+)$/,(e,[t])=>{e.merges.push(t)}),new K(/^CONFLICT\s+\((.+)\): Merge conflict in (.+)$/,(e,[t,i])=>{e.conflicts.push(new as(t,i))}),new K(/^CONFLICT\s+\((.+\/delete)\): (.+) deleted in (.+) and/,(e,[t,i,r])=>{e.conflicts.push(new as(t,i,{deleteRef:r}))}),new K(/^CONFLICT\s+\((.+)\):/,(e,[t])=>{e.conflicts.push(new as(t,null))}),new K(/^Automatic merge failed;\s+(.+)$/,(e,[t])=>{e.result=t})],Iv=(e,t)=>Object.assign(Wg(e,t),mu(e,t)),Wg=e=>Qe(new wv,Yg,e)}});function Kg(e){return e.length?{commands:["merge",...e],format:"utf-8",parser(t,i){let r=Iv(t,i);if(r.failed)throw new zr(r);return r}}:Ze("Git.merge requires at least one option")}var BA=M({"src/lib/tasks/merge.ts"(){"use strict";tr(),qA(),Te()}});function UA(e,t,i){let r=i.includes("deleted"),n=i.includes("tag")||/^refs\/tags/.test(e),s=!i.includes("new");return{deleted:r,tag:n,branch:!n,new:!s,alreadyUpdated:s,local:e,remote:t}}var Jg,Nv,Zg,$A=M({"src/lib/parsers/parse-push.ts"(){"use strict";Y(),Ov(),Jg=[new K(/^Pushing to (.+)$/,(e,[t])=>{e.repo=t}),new K(/^updating local tracking ref '(.+)'/,(e,[t])=>{e.ref=Mr(dt({},e.ref||{}),{local:t})}),new K(/^[=*-]\s+([^:]+):(\S+)\s+\[(.+)]$/,(e,[t,i,r])=>{e.pushed.push(UA(t,i,r))}),new K(/^Branch '([^']+)' set up to track remote branch '([^']+)' from '([^']+)'/,(e,[t,i,r])=>{e.branch=Mr(dt({},e.branch||{}),{local:t,remote:i,remoteName:r})}),new K(/^([^:]+):(\S+)\s+([a-z0-9]+)\.\.([a-z0-9]+)$/,(e,[t,i,r,n])=>{e.update={head:{local:t,remote:i},hash:{from:r,to:n}}})],Nv=(e,t)=>{let i=Zg(e,t),r=Tv(e,t);return dt(dt({},i),r)},Zg=(e,t)=>Qe({pushed:[]},Jg,[e,t])}}),Lv={};Se(Lv,{pushTagsTask:()=>zA,pushTask:()=>gu});function zA(e={},t){return ee(t,"--tags"),gu(e,t)}function gu(e={},t){let i=["push",...t];return e.branch&&i.splice(1,0,e.branch),e.remote&&i.splice(1,0,e.remote),ms(i,"-v"),ee(i,"--verbose"),ee(i,"--porcelain"),{commands:i,format:"utf-8",parser:Nv}}var kv=M({"src/lib/tasks/push.ts"(){"use strict";$A(),Y()}});function HA(){return{showBuffer(){let e=["show",...Je(arguments,1)];return e.includes("--binary")||e.splice(1,0,"--binary"),this._runTask(qx(e),Ee(arguments))},show(){let e=["show",...Je(arguments,1)];return this._runTask(Ge(e),Ee(arguments))}}}var GA=M({"src/lib/tasks/show.ts"(){"use strict";Y(),Te()}}),Qg,Rv,VA=M({"src/lib/responses/FileStatusSummary.ts"(){"use strict";Qg=/^(.+) -> (.+)$/,Rv=class{constructor(e,t,i){if(this.path=e,this.index=t,this.working_dir=i,t+i==="R"){let r=Qg.exec(e)||[null,e,e];this.from=r[1]||"",this.path=r[2]||""}}}}});function ex(e){let[t,i]=e.split(er);return{from:i||t,to:t}}function ot(e,t,i){return[`${e}${t}`,i]}function Pc(e,...t){return t.map(i=>ot(e,i,(r,n)=>ee(r.conflicted,n)))}function XA(e,t){let i=t.trim();switch(" "){case i.charAt(2):return r(i.charAt(0),i.charAt(1),i.substr(3));case i.charAt(1):return r(" ",i.charAt(0),i.substr(2));default:return}function r(n,s,o){let a=`${n}${s}`,c=Pv.get(a);c&&c(e,o),a!=="##"&&a!=="!!"&&e.files.push(new Rv(o.replace(/\0.+$/,""),n,s))}}var tx,Pv,Fv,YA=M({"src/lib/responses/StatusSummary.ts"(){"use strict";Y(),VA(),tx=class{constructor(){this.not_added=[],this.conflicted=[],this.created=[],this.deleted=[],this.ignored=void 0,this.modified=[],this.renamed=[],this.files=[],this.staged=[],this.ahead=0,this.behind=0,this.current=null,this.tracking=null,this.detached=!1,this.isClean=()=>!this.files.length}},Pv=new Map([ot(" ","A",(e,t)=>ee(e.created,t)),ot(" ","D",(e,t)=>ee(e.deleted,t)),ot(" ","M",(e,t)=>ee(e.modified,t)),ot("A"," ",(e,t)=>ee(e.created,t)&&ee(e.staged,t)),ot("A","M",(e,t)=>ee(e.created,t)&&ee(e.staged,t)&&ee(e.modified,t)),ot("D"," ",(e,t)=>ee(e.deleted,t)&&ee(e.staged,t)),ot("M"," ",(e,t)=>ee(e.modified,t)&&ee(e.staged,t)),ot("M","M",(e,t)=>ee(e.modified,t)&&ee(e.staged,t)),ot("R"," ",(e,t)=>{ee(e.renamed,ex(t))}),ot("R","M",(e,t)=>{let i=ex(t);ee(e.renamed,i),ee(e.modified,i.to)}),ot("!","!",(e,t)=>{ee(e.ignored=e.ignored||[],t)}),ot("?","?",(e,t)=>ee(e.not_added,t)),...Pc("A","A","U"),...Pc("D","D","U"),...Pc("U","A","D","U"),["##",(e,t)=>{let i=/ahead (\d+)/,r=/behind (\d+)/,n=/^(.+?(?=(?:\.{3}|\s|$)))/,s=/\.{3}(\S*)/,o=/\son\s([\S]+)$/,a;a=i.exec(t),e.ahead=a&&+a[1]||0,a=r.exec(t),e.behind=a&&+a[1]||0,a=n.exec(t),e.current=a&&a[1],a=s.exec(t),e.tracking=a&&a[1],a=o.exec(t),e.current=a&&a[1]||e.current,e.detached=/\(no branch\)/.test(t)}]]),Fv=function(e){let t=e.split(er),i=new tx;for(let r=0,n=t.length;r<n;){let s=t[r++].trim();s&&(s.charAt(0)==="R"&&(s+=er+(t[r++]||"")),XA(i,s))}return i}}});function WA(e){return{format:"utf-8",commands:["status","--porcelain","-b","-u","--null",...e.filter(i=>!jv.includes(i))],parser(i){return Fv(i)}}}var jv,KA=M({"src/lib/tasks/status.ts"(){"use strict";YA(),jv=["--null","-z"]}});function ps(e=0,t=0,i=0,r="",n=!0){return Object.defineProperty({major:e,minor:t,patch:i,agent:r,installed:n},"toString",{value(){return`${this.major}.${this.minor}.${this.patch}`},configurable:!1,enumerable:!1})}function JA(){return ps(0,0,0,"",!1)}function ZA(){return{version(){return this._runTask({commands:["--version"],format:"utf-8",parser:QA,onError(e,t,i,r){if(e.exitCode===-2)return i(Buffer.from(xu));r(t)}})}}}function QA(e){return e===xu?JA():Qe(ps(0,0,0,e),Mv,e)}var xu,Mv,eD=M({"src/lib/tasks/version.ts"(){"use strict";Y(),xu="installed=false",Mv=[new K(/version (\d+)\.(\d+)\.(\d+)(?:\s*\((.+)\))?/,(e,[t,i,r,n=""])=>{Object.assign(e,ps(ce(t),ce(i),ce(r),n))}),new K(/version (\d+)\.(\d+)\.(\D+)(.+)?$/,(e,[t,i,r,n=""])=>{Object.assign(e,ps(ce(t),ce(i),r,n))})]}}),qv={};Se(qv,{SimpleGitApi:()=>Vc});var Vc,tD=M({"src/lib/simple-git-api.ts"(){"use strict";oA(),aA(),uA(),dA(),xA(),Xx(),yA(),Zx(),wA(),CA(),bv(),BA(),kv(),GA(),KA(),Te(),eD(),Y(),Vc=class{constructor(e){this._executor=e}_runTask(e,t){let i=this._executor.chain(),r=i.push(e);return t&&nA(e,r,t),Object.create(this,{then:{value:r.then.bind(r)},catch:{value:r.catch.bind(r)},_executor:{value:i}})}add(e){return this._runTask(Ge(["add",...Ot(e)]),Ee(arguments))}cwd(e){let t=Ee(arguments);return typeof e=="string"?this._runTask(Mg(e,this._executor),t):typeof e?.path=="string"?this._runTask(Mg(e.path,e.root&&this._executor||void 0),t):this._runTask(Ze("Git.cwd: workingDirectory must be supplied as a string"),t)}hashObject(e,t){return this._runTask(bA(e,t===!0),Ee(arguments))}init(e){return this._runTask(SA(e===!0,this._executor.cwd,Je(arguments)),Ee(arguments))}merge(){return this._runTask(Kg(Je(arguments)),Ee(arguments))}mergeFromTo(e,t){return $e(e)&&$e(t)?this._runTask(Kg([e,t,...Je(arguments)]),Ee(arguments,!1)):this._runTask(Ze("Git.mergeFromTo requires that the 'remote' and 'branch' arguments are supplied as strings"))}outputHandler(e){return this._executor.outputHandler=e,this}push(){let e=gu({remote:At(arguments[0],$e),branch:At(arguments[1],$e)},Je(arguments));return this._runTask(e,Ee(arguments))}stash(){return this._runTask(Ge(["stash",...Je(arguments)]),Ee(arguments))}status(){return this._runTask(WA(Je(arguments)),Ee(arguments))}},Object.assign(Vc.prototype,cA(),gA(),G1(),pA(),vA(),W1(),RA(),HA(),ZA())}}),Bv={};Se(Bv,{Scheduler:()=>$v});var ix,$v,iD=M({"src/lib/runners/scheduler.ts"(){"use strict";Y(),rv(),ix=(()=>{let e=0;return()=>{e++;let{promise:t,done:i}=(0,Uv.createDeferred)();return{promise:t,done:i,id:e}}})(),$v=class{constructor(e=2){this.concurrency=e,this.logger=au("","scheduler"),this.pending=[],this.running=[],this.logger("Constructed, concurrency=%s",e)}schedule(){if(!this.pending.length||this.running.length>=this.concurrency){this.logger("Schedule attempt ignored, pending=%s running=%s concurrency=%s",this.pending.length,this.running.length,this.concurrency);return}let e=ee(this.running,this.pending.shift());this.logger("Attempting id=%s",e.id),e.done(()=>{this.logger("Completing id=",e.id),ms(this.running,e),this.schedule()})}next(){let{promise:e,id:t}=ee(this.pending,ix());return this.logger("Scheduling id=%s",t),this.schedule(),e}}}}),zv={};Se(zv,{applyPatchTask:()=>rD});function rD(e,t){return Ge(["apply",...t,...e])}var nD=M({"src/lib/tasks/apply-patch.ts"(){"use strict";Te()}});function sD(e,t){return{branch:e,hash:t,success:!0}}function oD(e){return{branch:e,hash:null,success:!1}}var Hv,aD=M({"src/lib/responses/BranchDeleteSummary.ts"(){"use strict";Hv=class{constructor(){this.all=[],this.branches={},this.errors=[]}get success(){return!this.errors.length}}}});function Gv(e,t){return t===1&&Xc.test(e)}var rx,Xc,nx,bs,cD=M({"src/lib/parsers/parse-branch-delete.ts"(){"use strict";aD(),Y(),rx=/(\S+)\s+\(\S+\s([^)]+)\)/,Xc=/^error[^']+'([^']+)'/m,nx=[new K(rx,(e,[t,i])=>{let r=sD(t,i);e.all.push(r),e.branches[t]=r}),new K(Xc,(e,[t])=>{let i=oD(t);e.errors.push(i),e.all.push(i),e.branches[t]=i})],bs=(e,t)=>Qe(new Hv,nx,[e,t])}}),Vv,uD=M({"src/lib/responses/BranchSummary.ts"(){"use strict";Vv=class{constructor(){this.all=[],this.branches={},this.current="",this.detached=!1}push(e,t,i,r,n){e==="*"&&(this.detached=t,this.current=i),this.all.push(i),this.branches[i]={current:e==="*",linkedWorkTree:e==="+",name:i,commit:r,label:n}}}}});function sx(e){return e?e.charAt(0):""}function Xv(e){return Qe(new Vv,Yv,e)}var Yv,lD=M({"src/lib/parsers/parse-branch.ts"(){"use strict";uD(),Y(),Yv=[new K(/^([*+]\s)?\((?:HEAD )?detached (?:from|at) (\S+)\)\s+([a-z0-9]+)\s(.*)$/,(e,[t,i,r,n])=>{e.push(sx(t),!0,i,r,n)}),new K(new RegExp("^([*+]\\s)?(\\S+)\\s+([a-z0-9]+)\\s?(.*)$","s"),(e,[t,i,r,n])=>{e.push(sx(t),!1,i,r,n)})]}}),Wv={};Se(Wv,{branchLocalTask:()=>dD,branchTask:()=>pD,containsDeleteBranchCommand:()=>Kv,deleteBranchTask:()=>hD,deleteBranchesTask:()=>fD});function Kv(e){let t=["-d","-D","--delete"];return e.some(i=>t.includes(i))}function pD(e){let t=Kv(e),i=["branch",...e];return i.length===1&&i.push("-a"),i.includes("-v")||i.splice(1,0,"-v"),{format:"utf-8",commands:i,parser(r,n){return t?bs(r,n).all[0]:Xv(r)}}}function dD(){return{format:"utf-8",commands:["branch","-v"],parser:Xv}}function fD(e,t=!1){return{format:"utf-8",commands:["branch","-v",t?"-D":"-d",...e],parser(i,r){return bs(i,r)},onError({exitCode:i,stdOut:r},n,s,o){if(!Gv(String(n),i))return o(n);s(r)}}}function hD(e,t=!1){let i={format:"utf-8",commands:["branch","-v",t?"-D":"-d",e],parser(r,n){return bs(r,n).branches[e]},onError({exitCode:r,stdErr:n,stdOut:s},o,a,c){if(!Gv(String(o),r))return c(o);throw new zr(i.parser(Br(s),Br(n)),String(o))}};return i}var mD=M({"src/lib/tasks/branch.ts"(){"use strict";tr(),cD(),lD(),Y()}}),Jv,gD=M({"src/lib/responses/CheckIgnore.ts"(){"use strict";Jv=e=>e.split(/\n/g).map(t=>t.trim()).filter(t=>!!t)}}),Zv={};Se(Zv,{checkIgnoreTask:()=>xD});function xD(e){return{commands:["check-ignore",...e],format:"utf-8",parser:Jv}}var vD=M({"src/lib/tasks/check-ignore.ts"(){"use strict";gD()}}),Qv={};Se(Qv,{cloneMirrorTask:()=>bD,cloneTask:()=>ey});function yD(e){return/^--upload-pack(=|$)/.test(e)}function ey(e,t,i){let r=["clone",...i];return $e(e)&&r.push(e),$e(t)&&r.push(t),r.find(yD)?Ze("git.fetch: potential exploit argument blocked."):Ge(r)}function bD(e,t,i){return ee(i,"--mirror"),ey(e,t,i)}var wD=M({"src/lib/tasks/clone.ts"(){"use strict";Te(),Y()}});function ED(e,t){return Qe({raw:e,remote:null,branches:[],tags:[],updated:[],deleted:[]},ty,[e,t])}var ty,_D=M({"src/lib/parsers/parse-fetch.ts"(){"use strict";Y(),ty=[new K(/From (.+)$/,(e,[t])=>{e.remote=t}),new K(/\* \[new branch]\s+(\S+)\s*-> (.+)$/,(e,[t,i])=>{e.branches.push({name:t,tracking:i})}),new K(/\* \[new tag]\s+(\S+)\s*-> (.+)$/,(e,[t,i])=>{e.tags.push({name:t,tracking:i})}),new K(/- \[deleted]\s+\S+\s*-> (.+)$/,(e,[t])=>{e.deleted.push({tracking:t})}),new K(/\s*([^.]+)\.\.(\S+)\s+(\S+)\s*-> (.+)$/,(e,[t,i,r,n])=>{e.updated.push({name:r,tracking:n,to:i,from:t})})]}}),iy={};Se(iy,{fetchTask:()=>SD});function TD(e){return/^--upload-pack(=|$)/.test(e)}function SD(e,t,i){let r=["fetch",...i];return e&&t&&r.push(e,t),r.find(TD)?Ze("git.fetch: potential exploit argument blocked."):{commands:r,format:"utf-8",parser:ED}}var CD=M({"src/lib/tasks/fetch.ts"(){"use strict";_D(),Te()}});function OD(e){return Qe({moves:[]},ry,e)}var ry,AD=M({"src/lib/parsers/parse-move.ts"(){"use strict";Y(),ry=[new K(/^Renaming (.+) to (.+)$/,(e,[t,i])=>{e.moves.push({from:t,to:i})})]}}),ny={};Se(ny,{moveTask:()=>DD});function DD(e,t){return{commands:["mv","-v",...Ot(e),t],format:"utf-8",parser:OD}}var ID=M({"src/lib/tasks/move.ts"(){"use strict";AD(),Y()}}),sy={};Se(sy,{pullTask:()=>ND});function ND(e,t,i){let r=["pull",...i];return e&&t&&r.splice(1,0,e,t),{commands:r,format:"utf-8",parser(n,s){return mu(n,s)},onError(n,s,o,a){let c=MA(Br(n.stdOut),Br(n.stdErr));if(c)return a(new zr(c));a(s)}}}var LD=M({"src/lib/tasks/pull.ts"(){"use strict";tr(),Dv(),Y()}});function kD(e){let t={};return oy(e,([i])=>t[i]={name:i}),Object.values(t)}function RD(e){let t={};return oy(e,([i,r,n])=>{t.hasOwnProperty(i)||(t[i]={name:i,refs:{fetch:"",push:""}}),n&&r&&(t[i].refs[n.replace(/[^a-z]/g,"")]=r)}),Object.values(t)}function oy(e,t){Wc(e,i=>t(i.split(/\s+/)))}var PD=M({"src/lib/responses/GetRemoteSummary.ts"(){"use strict";Y()}}),ay={};Se(ay,{addRemoteTask:()=>FD,getRemotesTask:()=>jD,listRemotesTask:()=>MD,remoteTask:()=>qD,removeRemoteTask:()=>BD});function FD(e,t,i){return Ge(["remote","add",...i,e,t])}function jD(e){let t=["remote"];return e&&t.push("-v"),{commands:t,format:"utf-8",parser:e?RD:kD}}function MD(e){let t=[...e];return t[0]!=="ls-remote"&&t.unshift("ls-remote"),Ge(t)}function qD(e){let t=[...e];return t[0]!=="remote"&&t.unshift("remote"),Ge(t)}function BD(e){return Ge(["remote","remove",e])}var UD=M({"src/lib/tasks/remote.ts"(){"use strict";PD(),Te()}}),cy={};Se(cy,{stashListTask:()=>$D});function $D(e={},t){let i=yv(e),r=["stash","list",...i.commands,...t],n=mv(i.splitter,i.fields,uu(r));return ys(r)||{commands:r,format:"utf-8",parser:n}}var zD=M({"src/lib/tasks/stash-list.ts"(){"use strict";Xr(),xv(),hu(),bv()}}),uy={};Se(uy,{addSubModuleTask:()=>HD,initSubModuleTask:()=>GD,subModuleTask:()=>ws,updateSubModuleTask:()=>VD});function HD(e,t){return ws(["add",e,t])}function GD(e){return ws(["init",...e])}function ws(e){let t=[...e];return t[0]!=="submodule"&&t.unshift("submodule"),Ge(t)}function VD(e){return ws(["update",...e])}var XD=M({"src/lib/tasks/sub-module.ts"(){"use strict";Te()}});function YD(e,t){let i=isNaN(e),r=isNaN(t);return i!==r?i?1:-1:i?ly(e,t):0}function ly(e,t){return e===t?0:e>t?1:-1}function WD(e){return e.trim()}function rs(e){return typeof e=="string"&&parseInt(e.replace(/^\D+/g,""),10)||0}var ox,py,KD=M({"src/lib/responses/TagList.ts"(){"use strict";ox=class{constructor(e,t){this.all=e,this.latest=t}},py=function(e,t=!1){let i=e.split(`
`).map(WD).filter(Boolean);t||i.sort(function(n,s){let o=n.split("."),a=s.split(".");if(o.length===1||a.length===1)return YD(rs(o[0]),rs(a[0]));for(let c=0,u=Math.max(o.length,a.length);c<u;c++){let f=ly(rs(o[c]),rs(a[c]));if(f)return f}return 0});let r=t?i[0]:[...i].reverse().find(n=>n.indexOf(".")>=0);return new ox(i,r)}}}),dy={};Se(dy,{addAnnotatedTagTask:()=>QD,addTagTask:()=>ZD,tagListTask:()=>JD});function JD(e=[]){let t=e.some(i=>/^--sort=/.test(i));return{format:"utf-8",commands:["tag","-l",...e],parser(i){return py(i,t)}}}function ZD(e){return{format:"utf-8",commands:["tag",e],parser(){return{name:e}}}}function QD(e,t){return{format:"utf-8",commands:["tag","-a","-m",t,e],parser(){return{name:e}}}}var eI=M({"src/lib/tasks/tag.ts"(){"use strict";KD()}}),tI=v1({"src/git.js"(e,t){"use strict";var{GitExecutor:i}=(rA(),we(sv)),{SimpleGitApi:r}=(tD(),we(qv)),{Scheduler:n}=(iD(),we(Bv)),{configurationErrorTask:s}=(Te(),we(Bc)),{asArray:o,filterArray:a,filterPrimitives:c,filterString:u,filterStringOrStringArray:f,filterType:g,getTrailingOptions:x,trailingFunctionArgument:l,trailingOptionsArgument:m}=(Y(),we(Dx)),{applyPatchTask:v}=(nD(),we(zv)),{branchTask:_,branchLocalTask:E,deleteBranchesTask:w,deleteBranchTask:p}=(mD(),we(Wv)),{checkIgnoreTask:d}=(vD(),we(Zv)),{checkIsRepoTask:h}=(kx(),we(Ix)),{cloneTask:b,cloneMirrorTask:O}=(wD(),we(Qv)),{cleanWithOptionsTask:D,isCleanOptionsArray:A}=(Hx(),we($x)),{diffSummaryTask:T}=(hu(),we(vv)),{fetchTask:N}=(CD(),we(iy)),{moveTask:C}=(ID(),we(ny)),{pullTask:F}=(LD(),we(sy)),{pushTagsTask:z}=(kv(),we(Lv)),{addRemoteTask:H,getRemotesTask:V,listRemotesTask:$,remoteTask:j,removeRemoteTask:ae}=(UD(),we(ay)),{getResetMode:J,resetTask:_e}=(iv(),we(Qx)),{stashListTask:Ve}=(zD(),we(cy)),{addSubModuleTask:Nt,initSubModuleTask:De,subModuleTask:Me,updateSubModuleTask:Xt}=(XD(),we(uy)),{addAnnotatedTagTask:Yt,addTagTask:Ie,tagListTask:co}=(eI(),we(dy)),{straightThroughBufferTask:S,straightThroughStringTask:y}=(Te(),we(Bc));function R(P,q){this._plugins=q,this._executor=new i(P.baseDir,new n(P.maxConcurrentProcesses),q),this._trimmed=P.trimmed}(R.prototype=Object.create(r.prototype)).constructor=R,R.prototype.customBinary=function(P){return this._plugins.reconfigure("binary",P),this},R.prototype.env=function(P,q){return arguments.length===1&&typeof P=="object"?this._executor.env=P:(this._executor.env=this._executor.env||{})[P]=q,this},R.prototype.stashList=function(P){return this._runTask(Ve(m(arguments)||{},a(P)&&P||[]),l(arguments))};function L(P,q,X,ie){return typeof X!="string"?s(`git.${P}() requires a string 'repoPath'`):q(X,g(ie,u),x(arguments))}R.prototype.clone=function(){return this._runTask(L("clone",b,...arguments),l(arguments))},R.prototype.mirror=function(){return this._runTask(L("mirror",O,...arguments),l(arguments))},R.prototype.mv=function(P,q){return this._runTask(C(P,q),l(arguments))},R.prototype.checkoutLatestTag=function(P){var q=this;return this.pull(function(){q.tags(function(X,ie){q.checkout(ie.latest,P)})})},R.prototype.pull=function(P,q,X,ie){return this._runTask(F(g(P,u),g(q,u),x(arguments)),l(arguments))},R.prototype.fetch=function(P,q){return this._runTask(N(g(P,u),g(q,u),x(arguments)),l(arguments))},R.prototype.silent=function(P){return console.warn("simple-git deprecation notice: git.silent: logging should be configured using the `debug` library / `DEBUG` environment variable, this will be an error in version 3"),this},R.prototype.tags=function(P,q){return this._runTask(co(x(arguments)),l(arguments))},R.prototype.rebase=function(){return this._runTask(y(["rebase",...x(arguments)]),l(arguments))},R.prototype.reset=function(P){return this._runTask(_e(J(P),x(arguments)),l(arguments))},R.prototype.revert=function(P){let q=l(arguments);return typeof P!="string"?this._runTask(s("Commit must be a string"),q):this._runTask(y(["revert",...x(arguments,0,!0),P]),q)},R.prototype.addTag=function(P){let q=typeof P=="string"?Ie(P):s("Git.addTag requires a tag name");return this._runTask(q,l(arguments))},R.prototype.addAnnotatedTag=function(P,q){return this._runTask(Yt(P,q),l(arguments))},R.prototype.deleteLocalBranch=function(P,q,X){return this._runTask(p(P,typeof q=="boolean"?q:!1),l(arguments))},R.prototype.deleteLocalBranches=function(P,q,X){return this._runTask(w(P,typeof q=="boolean"?q:!1),l(arguments))},R.prototype.branch=function(P,q){return this._runTask(_(x(arguments)),l(arguments))},R.prototype.branchLocal=function(P){return this._runTask(E(),l(arguments))},R.prototype.raw=function(P){let q=!Array.isArray(P),X=[].slice.call(q?arguments:P,0);for(let me=0;me<X.length&&q;me++)if(!c(X[me])){X.splice(me,X.length-me);break}X.push(...x(arguments,0,!0));var ie=l(arguments);return X.length?this._runTask(y(X,this._trimmed),ie):this._runTask(s("Raw: must supply one or more command to execute"),ie)},R.prototype.submoduleAdd=function(P,q,X){return this._runTask(Nt(P,q),l(arguments))},R.prototype.submoduleUpdate=function(P,q){return this._runTask(Xt(x(arguments,!0)),l(arguments))},R.prototype.submoduleInit=function(P,q){return this._runTask(De(x(arguments,!0)),l(arguments))},R.prototype.subModule=function(P,q){return this._runTask(Me(x(arguments)),l(arguments))},R.prototype.listRemote=function(){return this._runTask($(x(arguments)),l(arguments))},R.prototype.addRemote=function(P,q,X){return this._runTask(H(P,q,x(arguments)),l(arguments))},R.prototype.removeRemote=function(P,q){return this._runTask(ae(P),l(arguments))},R.prototype.getRemotes=function(P,q){return this._runTask(V(P===!0),l(arguments))},R.prototype.remote=function(P,q){return this._runTask(j(x(arguments)),l(arguments))},R.prototype.tag=function(P,q){let X=x(arguments);return X[0]!=="tag"&&X.unshift("tag"),this._runTask(y(X),l(arguments))},R.prototype.updateServerInfo=function(P){return this._runTask(y(["update-server-info"]),l(arguments))},R.prototype.pushTags=function(P,q){let X=z({remote:g(P,u)},x(arguments));return this._runTask(X,l(arguments))},R.prototype.rm=function(P){return this._runTask(y(["rm","-f",...o(P)]),l(arguments))},R.prototype.rmKeepLocal=function(P){return this._runTask(y(["rm","--cached",...o(P)]),l(arguments))},R.prototype.catFile=function(P,q){return this._catFile("utf-8",arguments)},R.prototype.binaryCatFile=function(){return this._catFile("buffer",arguments)},R.prototype._catFile=function(P,q){var X=l(q),ie=["cat-file"],me=q[0];if(typeof me=="string")return this._runTask(s("Git.catFile: options must be supplied as an array of strings"),X);Array.isArray(me)&&ie.push.apply(ie,me);let yt=P==="buffer"?S(ie):y(ie);return this._runTask(yt,X)},R.prototype.diff=function(P,q){let X=u(P)?s("git.diff: supplying options as a single string is no longer supported, switch to an array of strings"):y(["diff",...x(arguments)]);return this._runTask(X,l(arguments))},R.prototype.diffSummary=function(){return this._runTask(T(x(arguments,1)),l(arguments))},R.prototype.applyPatch=function(P){let q=f(P)?v(o(P),x([].slice.call(arguments,1))):s("git.applyPatch requires one or more string patches as the first argument");return this._runTask(q,l(arguments))},R.prototype.revparse=function(){let P=["rev-parse",...x(arguments,!0)];return this._runTask(y(P,!0),l(arguments))},R.prototype.clean=function(P,q,X){let ie=A(P),me=ie&&P.join("")||g(P,u)||"",yt=x([].slice.call(arguments,ie?1:0));return this._runTask(D(me,yt),l(arguments))},R.prototype.exec=function(P){let q={commands:[],format:"utf-8",parser(){typeof P=="function"&&P()}};return this._runTask(q)},R.prototype.clearQueue=function(){return this},R.prototype.checkIgnore=function(P,q){return this._runTask(d(o(g(P,f,[]))),l(arguments))},R.prototype.checkIsRepo=function(P,q){return this._runTask(h(g(P,u)),l(arguments))},t.exports=R}});$r();ni();var iI=class extends $t{constructor(e,t){super(void 0,t),this.config=e}};ni();ni();var Ut=class extends $t{constructor(e,t,i){super(e,i),this.task=e,this.plugin=t,Object.setPrototypeOf(this,new.target.prototype)}};tr();fx();kx();Hx();Xx();Wx();Zx();iv();function rI(e){return e?[{type:"spawn.before",action(r,n){e.aborted&&n.kill(new Ut(void 0,"abort","Abort already signaled"))}},{type:"spawn.after",action(r,n){function s(){n.kill(new Ut(void 0,"abort","Abort signal received"))}e.addEventListener("abort",s),n.spawned.on("close",()=>e.removeEventListener("abort",s))}}]:void 0}function nI(e){return typeof e=="string"&&e.trim().toLowerCase()==="-c"}function sI(e,t){if(nI(e)&&/^\s*protocol(.[a-z]+)?.allow/.test(t))throw new Ut(void 0,"unsafe","Configuring protocol.allow is not permitted without enabling allowUnsafeExtProtocol")}function oI(e,t){if(/^\s*--(upload|receive)-pack/.test(e))throw new Ut(void 0,"unsafe","Use of --upload-pack or --receive-pack is not permitted without enabling allowUnsafePack");if(t==="clone"&&/^\s*-u\b/.test(e))throw new Ut(void 0,"unsafe","Use of clone with option -u is not permitted without enabling allowUnsafePack");if(t==="push"&&/^\s*--exec\b/.test(e))throw new Ut(void 0,"unsafe","Use of push with option --exec is not permitted without enabling allowUnsafePack")}function aI({allowUnsafeProtocolOverride:e=!1,allowUnsafePack:t=!1}={}){return{type:"spawn.args",action(i,r){return i.forEach((n,s)=>{let o=s<i.length?i[s+1]:"";e||sI(n,o),t||oI(n,r.method)}),i}}}Y();function cI(e){let t=qr(e,"-c");return{type:"spawn.args",action(i){return[...t,...i]}}}Y();var ax=(0,Qi.deferred)().promise;function uI({onClose:e=!0,onExit:t=50}={}){function i(){let n=-1,s={close:(0,Qi.deferred)(),closeTimeout:(0,Qi.deferred)(),exit:(0,Qi.deferred)(),exitTimeout:(0,Qi.deferred)()},o=Promise.race([e===!1?ax:s.closeTimeout.promise,t===!1?ax:s.exitTimeout.promise]);return r(e,s.close,s.closeTimeout),r(t,s.exit,s.exitTimeout),{close(a){n=a,s.close.done()},exit(a){n=a,s.exit.done()},get exitCode(){return n},result:o}}function r(n,s,o){n!==!1&&(n===!0?s.promise:s.promise.then(()=>Fc(n))).then(o.done)}return{type:"spawn.after",action(n,s){return jr(this,arguments,function*(o,{spawned:a,close:c}){var u,f;let g=i(),x=!0,l=()=>void(x=!1);(u=a.stdout)==null||u.on("data",l),(f=a.stderr)==null||f.on("data",l),a.on("error",l),a.on("close",m=>g.close(m)),a.on("exit",m=>g.exit(m));try{yield g.result,x&&(yield Fc(50)),c(g.exitCode)}catch(m){c(g.exitCode,m)}})}}}Y();var lI="Invalid value supplied for custom binary, requires a single string or an array containing either one or two strings",cx="Invalid value supplied for custom binary, restricted characters must be removed or supply the unsafe.allowUnsafeCustomBinary option";function pI(e){return!e||!/^([a-z]:)?([a-z0-9/.\\_-]+)$/i.test(e)}function ux(e,t){if(e.length<1||e.length>2)throw new Ut(void 0,"binary",lI);if(e.some(pI))if(t)console.warn(cx);else throw new Ut(void 0,"binary",cx);let[r,n]=e;return{binary:r,prefix:n}}function dI(e,t=["git"],i=!1){let r=ux(Ot(t),i);e.on("binary",n=>{r=ux(Ot(n),i)}),e.append("spawn.binary",()=>r.binary),e.append("spawn.args",n=>r.prefix?[r.prefix,...n]:n)}ni();function fI(e){return!!(e.exitCode&&e.stdErr.length)}function hI(e){return Buffer.concat([...e.stdOut,...e.stdErr])}function mI(e=!1,t=fI,i=hI){return(r,n)=>!e&&r||!t(n)?r:i(n)}function lx(e){return{type:"task.error",action(t,i){let r=e(t.error,{stdErr:i.stdErr,stdOut:i.stdOut,exitCode:i.exitCode});return Buffer.isBuffer(r)?{error:new $t(void 0,r.toString("utf-8"))}:{error:r}}}}Y();var gI=class{constructor(){this.plugins=new Set,this.events=new fy.EventEmitter}on(e,t){this.events.on(e,t)}reconfigure(e,t){this.events.emit(e,t)}append(e,t){let i=ee(this.plugins,{type:e,action:t});return()=>this.plugins.delete(i)}add(e){let t=[];return Ot(e).forEach(i=>i&&this.plugins.add(ee(t,i))),()=>{t.forEach(i=>this.plugins.delete(i))}}exec(e,t,i){let r=t,n=Object.freeze(Object.create(i));for(let s of this.plugins)s.type===e&&(r=s.action(r,n));return r}};Y();function xI(e){let t="--progress",i=["checkout","clone","fetch","pull","push"];return[{type:"spawn.args",action(s,o){return i.includes(o.method)?yx(s,t):s}},{type:"spawn.after",action(s,o){var a;o.commands.includes(t)&&((a=o.spawned.stderr)==null||a.on("data",c=>{let u=/^([\s\S]+?):\s*(\d+)% \((\d+)\/(\d+)\)/.exec(c.toString("utf8"));u&&e({method:o.method,stage:vI(u[1]),progress:ce(u[2]),processed:ce(u[3]),total:ce(u[4])})}))}}]}function vI(e){return String(e.toLowerCase().split(" ",1))||"unknown"}Y();function yI(e){let t=Ex(e,["uid","gid"]);return{type:"spawn.options",action(i){return dt(dt({},t),i)}}}function bI({block:e,stdErr:t=!0,stdOut:i=!0}){if(e>0)return{type:"spawn.after",action(r,n){var s,o;let a;function c(){a&&clearTimeout(a),a=setTimeout(f,e)}function u(){var g,x;(g=n.spawned.stdout)==null||g.off("data",c),(x=n.spawned.stderr)==null||x.off("data",c),n.spawned.off("exit",u),n.spawned.off("close",u),a&&clearTimeout(a)}function f(){u(),n.kill(new Ut(void 0,"timeout","block timeout reached"))}i&&((s=n.spawned.stdout)==null||s.on("data",c)),t&&((o=n.spawned.stderr)==null||o.on("data",c)),n.spawned.on("exit",u),n.spawned.on("close",u),c()}}}$r();function wI(){return{type:"spawn.args",action(e){let t=[],i;function r(n){(i=i||[]).push(...n)}for(let n=0;n<e.length;n++){let s=e[n];if(cs(s)){r(Rg(s));continue}if(s==="--"){r(e.slice(n+1).flatMap(o=>cs(o)&&Rg(o)||o));break}t.push(s)}return i?[...t,"--",...i.map(String)]:t}}}Y();var EI=tI();function _I(e,t){var i;let r=new gI,n=Ox(e&&(typeof e=="string"?{baseDir:e}:e)||{},t);if(!Kc(n.baseDir))throw new iI(n,"Cannot use simple-git on a directory that does not exist");return Array.isArray(n.config)&&r.add(cI(n.config)),r.add(aI(n.unsafe)),r.add(wI()),r.add(uI(n.completion)),n.abort&&r.add(rI(n.abort)),n.progress&&r.add(xI(n.progress)),n.timeout&&r.add(bI(n.timeout)),n.spawnOptions&&r.add(yI(n.spawnOptions)),r.add(lx(mI(!0))),n.errors&&r.add(lx(n.errors)),dI(r,n.binary,(i=n.unsafe)==null?void 0:i.allowUnsafeCustomBinary),new EI(n,r)}tr();var hy=_I;var k0=se(require("child_process")),R0=se(ky());var _i=require("fs"),Xy=require("path");var Os=require("fs");function yu(e){if(!Number.isSafeInteger(e))throw new Error(`Wrong integer: ${e}`)}function NI(e){return e instanceof Uint8Array||e!=null&&typeof e=="object"&&e.constructor.name==="Uint8Array"}function LI(...e){let t=s=>s,i=(s,o)=>a=>s(o(a)),r=e.map(s=>s.encode).reduceRight(i,t),n=e.map(s=>s.decode).reduce(i,t);return{encode:r,decode:n}}function kI(e){return{encode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="number")throw new Error("alphabet.encode input should be an array of numbers");return t.map(i=>{if(i<0||i>=e.length)throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${e.length})`);return e[i]})},decode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="string")throw new Error("alphabet.decode input should be array of strings");return t.map(i=>{if(typeof i!="string")throw new Error(`alphabet.decode: not string element=${i}`);let r=e.indexOf(i);if(r===-1)throw new Error(`Unknown letter: "${i}". Allowed: ${e}`);return r})}}}function RI(e=""){if(typeof e!="string")throw new Error("join separator should be string");return{encode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="string")throw new Error("join.encode input should be array of strings");for(let i of t)if(typeof i!="string")throw new Error(`join.encode: non-string input=${i}`);return t.join(e)},decode:t=>{if(typeof t!="string")throw new Error("join.decode input should be string");return t.split(e)}}}function Ry(e,t,i){if(t<2)throw new Error(`convertRadix: wrong from=${t}, base cannot be less than 2`);if(i<2)throw new Error(`convertRadix: wrong to=${i}, base cannot be less than 2`);if(!Array.isArray(e))throw new Error("convertRadix: data should be array");if(!e.length)return[];let r=0,n=[],s=Array.from(e);for(s.forEach(o=>{if(o<0||o>=t)throw new Error(`Wrong integer: ${o}`)});;){let o=0,a=!0;for(let c=r;c<s.length;c++){let u=s[c],f=t*o+u;if(!Number.isSafeInteger(f)||t*o/t!==o||f-u!==t*o)throw new Error("convertRadix: carry overflow");o=f%i;let g=Math.floor(f/i);if(s[c]=g,!Number.isSafeInteger(g)||g*i+o!==f)throw new Error("convertRadix: carry overflow");if(a)g?a=!1:r=c;else continue}if(n.push(o),a)break}for(let o=0;o<e.length-1&&e[o]===0;o++)n.push(0);return n.reverse()}function PI(e){return{encode:t=>{if(!NI(t))throw new Error("radix.encode input should be Uint8Array");return Ry(Array.from(t),2**8,e)},decode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="number")throw new Error("radix.decode input should be array of numbers");return Uint8Array.from(Ry(t,e,2**8))}}}var FI=e=>LI(PI(58),kI(e),RI("")),bu=FI("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");var at=require("path"),Gy=se(zy()),rr=require("fs"),Yr=".",Hy="/*",Ts="scaffoldly/scaffoldly:1";var eN=(0,at.join)(at.sep,"var","task"),tN=e=>{if(e.startsWith(`${Ts}:`))return JSON.parse(new TextDecoder().decode(bu.decode(e.split(`${Ts}:`)[1])));throw new Error(`Invalid config: ${e}`)},iN=e=>`${Ts}:${bu.encode(new TextEncoder().encode(JSON.stringify(e)))}`,Ss=class e{commands;constructor(){this.commands=[]}add=t=>(this.commands.push(t),this);isEmpty=t=>(t?this.commands.filter(r=>r.schedule===t.schedule):this.commands).length===0;toString=t=>(t?this.commands.filter(r=>r.schedule===t.schedule):this.commands).map(r=>r.workdir?`( cd ${r.workdir} && ${r.cmd} )`:`( ${r.cmd} )`).join(" & ");encode=()=>iN(this.commands);static decode=t=>{let i=tN(t),r=new e;return i.forEach(n=>{r.add(n)}),r}},Cs=class e{constructor(t,i,r={},n="production"){this.baseDir=t;this.workDir=i;this.mode=n;let{projectJson:s,serviceConfig:o}=r;if(this.projectJson=s,s){let{scaffoldly:a={},name:c="unknown",version:u="0.0.0-0"}=s;this.scaffoldly=a,this._name=c,this._version=u,this._bin={...s.bin||{},...a.bin||{}},this._files=[...s.files||[],...a.files||[]],this._packages=a.packages||[],o&&(this.scaffoldly={...a,runtime:o.runtime||a.runtime,services:[],routes:void 0},this.serviceConfig=o,this._name=o.name,this._packages=[...o.packages||[]],this._files=[...new Set([...this._files||[],...o.files||[]])],this._bin={...this._bin||{},...o.bin||{}});return}throw new Error("Unable to create scaffoldly config")}projectJson;scaffoldly;serviceConfig;mode;_id="";_name;_version;_bin;_files;_packages;_ignoreFilter;set id(t){this._id=t}get id(){let{_id:t}=this;return t||""}get name(){let t=this.serviceConfig?.name||this._name||"unknown-service",i=/[a-z0-9]+(?:[._-][a-z0-9]+)*/,n=t.replace(/\//g,"-").toLowerCase().replace(/[^a-z0-9._-]/g,""),s=n.match(i);if(!s||!s[0])throw new Error(`Invalid service name: '${t}' (sanitized: ${n})`);t=s[0];let o=this.serviceConfig?.id||this._id;return o&&(t=`${t}-${o}`),t}get version(){let{_version:t}=this;return t}get runtime(){let{runtime:t="alpine:3"}=this.serviceConfig||this.scaffoldly;return t}get handler(){let{handler:t="localhost:3000"}=this.serviceConfig||this.scaffoldly;return t}get files(){let{_files:t=[]}=this;return[...new Set(t)]}get src(){let{src:t=Yr}=this.serviceConfig||this.scaffoldly;return t}get bin(){let{_bin:t={}}=this;return t}get scripts(){let{scripts:t={}}=this.serviceConfig||this.scaffoldly;return t}get services(){let{services:t=[]}=this.scaffoldly;return t.map((i,r)=>new e(this.baseDir,this.workDir,{projectJson:this.projectJson,serviceConfig:{id:i.id||"",name:i.name||`${r+1}`,runtime:i.runtime||this.runtime,handler:i.handler||this.handler,src:i.src||this.src,files:i.files||[],bin:i.bin||{},packages:i.packages||[],shell:i.shell,scripts:i.scripts||{},schedules:i.schedules||{}}},this.mode))}get routes(){let{routes:t}=this.scaffoldly;return t||(t={}),t[Hy]||(t[Hy]=this.handler),t}get installCommands(){let t="install",i=new Ss,r=this.src!==Yr?this.src:void 0;return this.scripts[t]&&i.add({cmd:this.scripts[t],workdir:r}),this.services.forEach(n=>{r=n.src!==Yr?n.src:void 0,n.scripts[t]&&i.add({cmd:n.scripts[t],workdir:r})}),i}get serveCommands(){let t=this.mode==="development"?"dev":"start",i=new Ss,r=this.src!==Yr?this.src:void 0;return this.scripts[t]&&i.add({cmd:this.scripts[t],workdir:r}),Object.entries(this.schedules).forEach(([n,s])=>{i.add({cmd:s,workdir:r,schedule:n})}),this.services.forEach(n=>{r=n.src!==Yr?n.src:void 0,n.scripts[t]&&i.add({cmd:n.scripts[t],workdir:r}),Object.entries(n.schedules).forEach(([s,o])=>{i.add({cmd:o,workdir:r,schedule:s})})}),i}get rootdir(){let{taskdir:t}=this.scaffoldly;return t||(t=eN),t}get taskdir(){let{rootdir:t}=this;return(0,at.join)(t,(0,at.relative)(this.baseDir,(0,at.join)(this.workDir)))}get packages(){return this._packages||[]}get shell(){let{shell:t}=this.serviceConfig||this.scaffoldly;return t}get schedules(){let{schedules:t={}}=this.serviceConfig||this.scaffoldly;return t}get resources(){let{resources:t=[]}=this.scaffoldly;return t}get runtimes(){let t=[Ts,this.runtime,...this.services.map(i=>i.runtime)];return[...new Set(t)]}get timeout(){let{timeout:t=900}=this.scaffoldly;return t}get memorySize(){let{memorySize:t=1024}=this.scaffoldly;return t}get ignoreFilter(){if(this._ignoreFilter)return this._ignoreFilter;let t=(0,Gy.default)();return[".gitignore",".dockerignore"].map(i=>{[(0,at.join)(this.baseDir,i),(0,at.join)(this.workDir,i),(0,at.join)(this.workDir,this.src,i)].forEach(r=>{(0,rr.existsSync)(r)&&t.add((0,rr.readFileSync)(r).toString())})}),this._ignoreFilter=t.createFilter(),this._ignoreFilter}get ignoredFiles(){let t=(0,at.join)(this.workDir,this.src);return(0,rr.readdirSync)(t).filter(r=>{let n=(0,at.relative)(this.workDir,r);return!this.ignoreFilter(n)})}get generatedFiles(){let{generatedFiles:t=[]}=this.scaffoldly;return t}get user(){let{user:t}=this.scaffoldly;return t}};var Vy=require("path"),et=class{constructor(t,i){this.gitService=t;this.workDir=i}get workdir(){if(this.gitService)return this.gitService.workDir;if(this.workDir)return Promise.resolve(this.workDir);throw new Error("Workdir is unknown")}get standaloneConfigFile(){return this.workdir.then(t=>{let i=(0,Vy.join)(t,"scaffoldly.json");if((0,Os.existsSync)(i))return i})}get standaloneConfig(){return this.standaloneConfigFile.then(t=>{if(!t)return;let i={},r=JSON.parse((0,Os.readFileSync)(t,"utf-8"));return Object.assign(i,r),i})}get installCommands(){return Promise.all([this.workDir,this.projectJson]).then(([t,i])=>!i||!t?void 0:new Cs(t,t,{projectJson:i}).installCommands)}};var As=class extends et{async setProject(t){return this.packageJsonFile.then(i=>{if(!i)return;let r=JSON.parse((0,_i.readFileSync)(i,"utf8"));r.name=t,delete r.license,delete r.description,(0,_i.writeFileSync)(i,JSON.stringify(r,null,2))})}get packageJsonFile(){return this.workdir.then(t=>(0,Xy.join)(t,"package.json")).then(t=>{if((0,_i.existsSync)(t))return t})}get packageJson(){return this.packageJsonFile.then(t=>{if(t)try{let i=JSON.parse((0,_i.readFileSync)(t,"utf8"));return i.type="node",i}catch{return}})}get projectJson(){return this.packageJson}};function ub(e){return typeof e>"u"||e===null}function rN(e){return typeof e=="object"&&e!==null}function nN(e){return Array.isArray(e)?e:ub(e)?[]:[e]}function sN(e,t){var i,r,n,s;if(t)for(s=Object.keys(t),i=0,r=s.length;i<r;i+=1)n=s[i],e[n]=t[n];return e}function oN(e,t){var i="",r;for(r=0;r<t;r+=1)i+=e;return i}function aN(e){return e===0&&Number.NEGATIVE_INFINITY===1/e}var cN=ub,uN=rN,lN=nN,pN=oN,dN=aN,fN=sN,Re={isNothing:cN,isObject:uN,toArray:lN,repeat:pN,isNegativeZero:dN,extend:fN};function lb(e,t){var i="",r=e.reason||"(unknown reason)";return e.mark?(e.mark.name&&(i+='in "'+e.mark.name+'" '),i+="("+(e.mark.line+1)+":"+(e.mark.column+1)+")",!t&&e.mark.snippet&&(i+=`

`+e.mark.snippet),r+" "+i):r}function Kr(e,t){Error.call(this),this.name="YAMLException",this.reason=e,this.mark=t,this.message=lb(this,!1),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack||""}Kr.prototype=Object.create(Error.prototype);Kr.prototype.constructor=Kr;Kr.prototype.toString=function(t){return this.name+": "+lb(this,t)};var tt=Kr;function Ou(e,t,i,r,n){var s="",o="",a=Math.floor(n/2)-1;return r-t>a&&(s=" ... ",t=r-a+s.length),i-r>a&&(o=" ...",i=r+a-o.length),{str:s+e.slice(t,i).replace(/\t/g,"\u2192")+o,pos:r-t+s.length}}function Au(e,t){return Re.repeat(" ",t-e.length)+e}function hN(e,t){if(t=Object.create(t||null),!e.buffer)return null;t.maxLength||(t.maxLength=79),typeof t.indent!="number"&&(t.indent=1),typeof t.linesBefore!="number"&&(t.linesBefore=3),typeof t.linesAfter!="number"&&(t.linesAfter=2);for(var i=/\r?\n|\r|\0/g,r=[0],n=[],s,o=-1;s=i.exec(e.buffer);)n.push(s.index),r.push(s.index+s[0].length),e.position<=s.index&&o<0&&(o=r.length-2);o<0&&(o=r.length-1);var a="",c,u,f=Math.min(e.line+t.linesAfter,n.length).toString().length,g=t.maxLength-(t.indent+f+3);for(c=1;c<=t.linesBefore&&!(o-c<0);c++)u=Ou(e.buffer,r[o-c],n[o-c],e.position-(r[o]-r[o-c]),g),a=Re.repeat(" ",t.indent)+Au((e.line-c+1).toString(),f)+" | "+u.str+`
`+a;for(u=Ou(e.buffer,r[o],n[o],e.position,g),a+=Re.repeat(" ",t.indent)+Au((e.line+1).toString(),f)+" | "+u.str+`
`,a+=Re.repeat("-",t.indent+f+3+u.pos)+`^
`,c=1;c<=t.linesAfter&&!(o+c>=n.length);c++)u=Ou(e.buffer,r[o+c],n[o+c],e.position-(r[o]-r[o+c]),g),a+=Re.repeat(" ",t.indent)+Au((e.line+c+1).toString(),f)+" | "+u.str+`
`;return a.replace(/\n$/,"")}var mN=hN,gN=["kind","multi","resolve","construct","instanceOf","predicate","represent","representName","defaultStyle","styleAliases"],xN=["scalar","sequence","mapping"];function vN(e){var t={};return e!==null&&Object.keys(e).forEach(function(i){e[i].forEach(function(r){t[String(r)]=i})}),t}function yN(e,t){if(t=t||{},Object.keys(t).forEach(function(i){if(gN.indexOf(i)===-1)throw new tt('Unknown option "'+i+'" is met in definition of "'+e+'" YAML type.')}),this.options=t,this.tag=e,this.kind=t.kind||null,this.resolve=t.resolve||function(){return!0},this.construct=t.construct||function(i){return i},this.instanceOf=t.instanceOf||null,this.predicate=t.predicate||null,this.represent=t.represent||null,this.representName=t.representName||null,this.defaultStyle=t.defaultStyle||null,this.multi=t.multi||!1,this.styleAliases=vN(t.styleAliases||null),xN.indexOf(this.kind)===-1)throw new tt('Unknown kind "'+this.kind+'" is specified for "'+e+'" YAML type.')}var ze=yN;function Yy(e,t){var i=[];return e[t].forEach(function(r){var n=i.length;i.forEach(function(s,o){s.tag===r.tag&&s.kind===r.kind&&s.multi===r.multi&&(n=o)}),i[n]=r}),i}function bN(){var e={scalar:{},sequence:{},mapping:{},fallback:{},multi:{scalar:[],sequence:[],mapping:[],fallback:[]}},t,i;function r(n){n.multi?(e.multi[n.kind].push(n),e.multi.fallback.push(n)):e[n.kind][n.tag]=e.fallback[n.tag]=n}for(t=0,i=arguments.length;t<i;t+=1)arguments[t].forEach(r);return e}function Iu(e){return this.extend(e)}Iu.prototype.extend=function(t){var i=[],r=[];if(t instanceof ze)r.push(t);else if(Array.isArray(t))r=r.concat(t);else if(t&&(Array.isArray(t.implicit)||Array.isArray(t.explicit)))t.implicit&&(i=i.concat(t.implicit)),t.explicit&&(r=r.concat(t.explicit));else throw new tt("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");i.forEach(function(s){if(!(s instanceof ze))throw new tt("Specified list of YAML types (or a single Type object) contains a non-Type object.");if(s.loadKind&&s.loadKind!=="scalar")throw new tt("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");if(s.multi)throw new tt("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.")}),r.forEach(function(s){if(!(s instanceof ze))throw new tt("Specified list of YAML types (or a single Type object) contains a non-Type object.")});var n=Object.create(Iu.prototype);return n.implicit=(this.implicit||[]).concat(i),n.explicit=(this.explicit||[]).concat(r),n.compiledImplicit=Yy(n,"implicit"),n.compiledExplicit=Yy(n,"explicit"),n.compiledTypeMap=bN(n.compiledImplicit,n.compiledExplicit),n};var wN=Iu,EN=new ze("tag:yaml.org,2002:str",{kind:"scalar",construct:function(e){return e!==null?e:""}}),_N=new ze("tag:yaml.org,2002:seq",{kind:"sequence",construct:function(e){return e!==null?e:[]}}),TN=new ze("tag:yaml.org,2002:map",{kind:"mapping",construct:function(e){return e!==null?e:{}}}),SN=new wN({explicit:[EN,_N,TN]});function CN(e){if(e===null)return!0;var t=e.length;return t===1&&e==="~"||t===4&&(e==="null"||e==="Null"||e==="NULL")}function ON(){return null}function AN(e){return e===null}var DN=new ze("tag:yaml.org,2002:null",{kind:"scalar",resolve:CN,construct:ON,predicate:AN,represent:{canonical:function(){return"~"},lowercase:function(){return"null"},uppercase:function(){return"NULL"},camelcase:function(){return"Null"},empty:function(){return""}},defaultStyle:"lowercase"});function IN(e){if(e===null)return!1;var t=e.length;return t===4&&(e==="true"||e==="True"||e==="TRUE")||t===5&&(e==="false"||e==="False"||e==="FALSE")}function NN(e){return e==="true"||e==="True"||e==="TRUE"}function LN(e){return Object.prototype.toString.call(e)==="[object Boolean]"}var kN=new ze("tag:yaml.org,2002:bool",{kind:"scalar",resolve:IN,construct:NN,predicate:LN,represent:{lowercase:function(e){return e?"true":"false"},uppercase:function(e){return e?"TRUE":"FALSE"},camelcase:function(e){return e?"True":"False"}},defaultStyle:"lowercase"});function RN(e){return 48<=e&&e<=57||65<=e&&e<=70||97<=e&&e<=102}function PN(e){return 48<=e&&e<=55}function FN(e){return 48<=e&&e<=57}function jN(e){if(e===null)return!1;var t=e.length,i=0,r=!1,n;if(!t)return!1;if(n=e[i],(n==="-"||n==="+")&&(n=e[++i]),n==="0"){if(i+1===t)return!0;if(n=e[++i],n==="b"){for(i++;i<t;i++)if(n=e[i],n!=="_"){if(n!=="0"&&n!=="1")return!1;r=!0}return r&&n!=="_"}if(n==="x"){for(i++;i<t;i++)if(n=e[i],n!=="_"){if(!RN(e.charCodeAt(i)))return!1;r=!0}return r&&n!=="_"}if(n==="o"){for(i++;i<t;i++)if(n=e[i],n!=="_"){if(!PN(e.charCodeAt(i)))return!1;r=!0}return r&&n!=="_"}}if(n==="_")return!1;for(;i<t;i++)if(n=e[i],n!=="_"){if(!FN(e.charCodeAt(i)))return!1;r=!0}return!(!r||n==="_")}function MN(e){var t=e,i=1,r;if(t.indexOf("_")!==-1&&(t=t.replace(/_/g,"")),r=t[0],(r==="-"||r==="+")&&(r==="-"&&(i=-1),t=t.slice(1),r=t[0]),t==="0")return 0;if(r==="0"){if(t[1]==="b")return i*parseInt(t.slice(2),2);if(t[1]==="x")return i*parseInt(t.slice(2),16);if(t[1]==="o")return i*parseInt(t.slice(2),8)}return i*parseInt(t,10)}function qN(e){return Object.prototype.toString.call(e)==="[object Number]"&&e%1===0&&!Re.isNegativeZero(e)}var BN=new ze("tag:yaml.org,2002:int",{kind:"scalar",resolve:jN,construct:MN,predicate:qN,represent:{binary:function(e){return e>=0?"0b"+e.toString(2):"-0b"+e.toString(2).slice(1)},octal:function(e){return e>=0?"0o"+e.toString(8):"-0o"+e.toString(8).slice(1)},decimal:function(e){return e.toString(10)},hexadecimal:function(e){return e>=0?"0x"+e.toString(16).toUpperCase():"-0x"+e.toString(16).toUpperCase().slice(1)}},defaultStyle:"decimal",styleAliases:{binary:[2,"bin"],octal:[8,"oct"],decimal:[10,"dec"],hexadecimal:[16,"hex"]}}),UN=new RegExp("^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");function $N(e){return!(e===null||!UN.test(e)||e[e.length-1]==="_")}function zN(e){var t,i;return t=e.replace(/_/g,"").toLowerCase(),i=t[0]==="-"?-1:1,"+-".indexOf(t[0])>=0&&(t=t.slice(1)),t===".inf"?i===1?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY:t===".nan"?NaN:i*parseFloat(t,10)}var HN=/^[-+]?[0-9]+e/;function GN(e,t){var i;if(isNaN(e))switch(t){case"lowercase":return".nan";case"uppercase":return".NAN";case"camelcase":return".NaN"}else if(Number.POSITIVE_INFINITY===e)switch(t){case"lowercase":return".inf";case"uppercase":return".INF";case"camelcase":return".Inf"}else if(Number.NEGATIVE_INFINITY===e)switch(t){case"lowercase":return"-.inf";case"uppercase":return"-.INF";case"camelcase":return"-.Inf"}else if(Re.isNegativeZero(e))return"-0.0";return i=e.toString(10),HN.test(i)?i.replace("e",".e"):i}function VN(e){return Object.prototype.toString.call(e)==="[object Number]"&&(e%1!==0||Re.isNegativeZero(e))}var XN=new ze("tag:yaml.org,2002:float",{kind:"scalar",resolve:$N,construct:zN,predicate:VN,represent:GN,defaultStyle:"lowercase"}),YN=SN.extend({implicit:[DN,kN,BN,XN]}),WN=YN,pb=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"),db=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");function KN(e){return e===null?!1:pb.exec(e)!==null||db.exec(e)!==null}function JN(e){var t,i,r,n,s,o,a,c=0,u=null,f,g,x;if(t=pb.exec(e),t===null&&(t=db.exec(e)),t===null)throw new Error("Date resolve error");if(i=+t[1],r=+t[2]-1,n=+t[3],!t[4])return new Date(Date.UTC(i,r,n));if(s=+t[4],o=+t[5],a=+t[6],t[7]){for(c=t[7].slice(0,3);c.length<3;)c+="0";c=+c}return t[9]&&(f=+t[10],g=+(t[11]||0),u=(f*60+g)*6e4,t[9]==="-"&&(u=-u)),x=new Date(Date.UTC(i,r,n,s,o,a,c)),u&&x.setTime(x.getTime()-u),x}function ZN(e){return e.toISOString()}var QN=new ze("tag:yaml.org,2002:timestamp",{kind:"scalar",resolve:KN,construct:JN,instanceOf:Date,represent:ZN});function eL(e){return e==="<<"||e===null}var tL=new ze("tag:yaml.org,2002:merge",{kind:"scalar",resolve:eL}),Pu=`ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=
\r`;function iL(e){if(e===null)return!1;var t,i,r=0,n=e.length,s=Pu;for(i=0;i<n;i++)if(t=s.indexOf(e.charAt(i)),!(t>64)){if(t<0)return!1;r+=6}return r%8===0}function rL(e){var t,i,r=e.replace(/[\r\n=]/g,""),n=r.length,s=Pu,o=0,a=[];for(t=0;t<n;t++)t%4===0&&t&&(a.push(o>>16&255),a.push(o>>8&255),a.push(o&255)),o=o<<6|s.indexOf(r.charAt(t));return i=n%4*6,i===0?(a.push(o>>16&255),a.push(o>>8&255),a.push(o&255)):i===18?(a.push(o>>10&255),a.push(o>>2&255)):i===12&&a.push(o>>4&255),new Uint8Array(a)}function nL(e){var t="",i=0,r,n,s=e.length,o=Pu;for(r=0;r<s;r++)r%3===0&&r&&(t+=o[i>>18&63],t+=o[i>>12&63],t+=o[i>>6&63],t+=o[i&63]),i=(i<<8)+e[r];return n=s%3,n===0?(t+=o[i>>18&63],t+=o[i>>12&63],t+=o[i>>6&63],t+=o[i&63]):n===2?(t+=o[i>>10&63],t+=o[i>>4&63],t+=o[i<<2&63],t+=o[64]):n===1&&(t+=o[i>>2&63],t+=o[i<<4&63],t+=o[64],t+=o[64]),t}function sL(e){return Object.prototype.toString.call(e)==="[object Uint8Array]"}var oL=new ze("tag:yaml.org,2002:binary",{kind:"scalar",resolve:iL,construct:rL,predicate:sL,represent:nL}),aL=Object.prototype.hasOwnProperty,cL=Object.prototype.toString;function uL(e){if(e===null)return!0;var t=[],i,r,n,s,o,a=e;for(i=0,r=a.length;i<r;i+=1){if(n=a[i],o=!1,cL.call(n)!=="[object Object]")return!1;for(s in n)if(aL.call(n,s))if(!o)o=!0;else return!1;if(!o)return!1;if(t.indexOf(s)===-1)t.push(s);else return!1}return!0}function lL(e){return e!==null?e:[]}var pL=new ze("tag:yaml.org,2002:omap",{kind:"sequence",resolve:uL,construct:lL}),dL=Object.prototype.toString;function fL(e){if(e===null)return!0;var t,i,r,n,s,o=e;for(s=new Array(o.length),t=0,i=o.length;t<i;t+=1){if(r=o[t],dL.call(r)!=="[object Object]"||(n=Object.keys(r),n.length!==1))return!1;s[t]=[n[0],r[n[0]]]}return!0}function hL(e){if(e===null)return[];var t,i,r,n,s,o=e;for(s=new Array(o.length),t=0,i=o.length;t<i;t+=1)r=o[t],n=Object.keys(r),s[t]=[n[0],r[n[0]]];return s}var mL=new ze("tag:yaml.org,2002:pairs",{kind:"sequence",resolve:fL,construct:hL}),gL=Object.prototype.hasOwnProperty;function xL(e){if(e===null)return!0;var t,i=e;for(t in i)if(gL.call(i,t)&&i[t]!==null)return!1;return!0}function vL(e){return e!==null?e:{}}var yL=new ze("tag:yaml.org,2002:set",{kind:"mapping",resolve:xL,construct:vL}),fb=WN.extend({implicit:[QN,tL],explicit:[oL,pL,mL,yL]}),oi=Object.prototype.hasOwnProperty,Ds=1,hb=2,mb=3,Is=4,Du=1,bL=2,Wy=3,wL=/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,EL=/[\x85\u2028\u2029]/,_L=/[,\[\]\{\}]/,gb=/^(?:!|!!|![a-z\-]+!)$/i,xb=/^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;function Ky(e){return Object.prototype.toString.call(e)}function Dt(e){return e===10||e===13}function Si(e){return e===9||e===32}function it(e){return e===9||e===32||e===10||e===13}function sr(e){return e===44||e===91||e===93||e===123||e===125}function TL(e){var t;return 48<=e&&e<=57?e-48:(t=e|32,97<=t&&t<=102?t-97+10:-1)}function SL(e){return e===120?2:e===117?4:e===85?8:0}function CL(e){return 48<=e&&e<=57?e-48:-1}function Jy(e){return e===48?"\0":e===97?"\x07":e===98?"\b":e===116||e===9?"	":e===110?`
`:e===118?"\v":e===102?"\f":e===114?"\r":e===101?"\x1B":e===32?" ":e===34?'"':e===47?"/":e===92?"\\":e===78?"\x85":e===95?"\xA0":e===76?"\u2028":e===80?"\u2029":""}function OL(e){return e<=65535?String.fromCharCode(e):String.fromCharCode((e-65536>>10)+55296,(e-65536&1023)+56320)}var vb=new Array(256),yb=new Array(256);for(Ti=0;Ti<256;Ti++)vb[Ti]=Jy(Ti)?1:0,yb[Ti]=Jy(Ti);var Ti;function AL(e,t){this.input=e,this.filename=t.filename||null,this.schema=t.schema||fb,this.onWarning=t.onWarning||null,this.legacy=t.legacy||!1,this.json=t.json||!1,this.listener=t.listener||null,this.implicitTypes=this.schema.compiledImplicit,this.typeMap=this.schema.compiledTypeMap,this.length=e.length,this.position=0,this.line=0,this.lineStart=0,this.lineIndent=0,this.firstTabInLine=-1,this.documents=[]}function bb(e,t){var i={name:e.filename,buffer:e.input.slice(0,-1),position:e.position,line:e.line,column:e.position-e.lineStart};return i.snippet=mN(i),new tt(t,i)}function G(e,t){throw bb(e,t)}function Ns(e,t){e.onWarning&&e.onWarning.call(null,bb(e,t))}var Zy={YAML:function(t,i,r){var n,s,o;t.version!==null&&G(t,"duplication of %YAML directive"),r.length!==1&&G(t,"YAML directive accepts exactly one argument"),n=/^([0-9]+)\.([0-9]+)$/.exec(r[0]),n===null&&G(t,"ill-formed argument of the YAML directive"),s=parseInt(n[1],10),o=parseInt(n[2],10),s!==1&&G(t,"unacceptable YAML version of the document"),t.version=r[0],t.checkLineBreaks=o<2,o!==1&&o!==2&&Ns(t,"unsupported YAML version of the document")},TAG:function(t,i,r){var n,s;r.length!==2&&G(t,"TAG directive accepts exactly two arguments"),n=r[0],s=r[1],gb.test(n)||G(t,"ill-formed tag handle (first argument) of the TAG directive"),oi.call(t.tagMap,n)&&G(t,'there is a previously declared suffix for "'+n+'" tag handle'),xb.test(s)||G(t,"ill-formed tag prefix (second argument) of the TAG directive");try{s=decodeURIComponent(s)}catch{G(t,"tag prefix is malformed: "+s)}t.tagMap[n]=s}};function si(e,t,i,r){var n,s,o,a;if(t<i){if(a=e.input.slice(t,i),r)for(n=0,s=a.length;n<s;n+=1)o=a.charCodeAt(n),o===9||32<=o&&o<=1114111||G(e,"expected valid JSON character");else wL.test(a)&&G(e,"the stream contains non-printable characters");e.result+=a}}function Qy(e,t,i,r){var n,s,o,a;for(Re.isObject(i)||G(e,"cannot merge mappings; the provided source object is unacceptable"),n=Object.keys(i),o=0,a=n.length;o<a;o+=1)s=n[o],oi.call(t,s)||(t[s]=i[s],r[s]=!0)}function or(e,t,i,r,n,s,o,a,c){var u,f;if(Array.isArray(n))for(n=Array.prototype.slice.call(n),u=0,f=n.length;u<f;u+=1)Array.isArray(n[u])&&G(e,"nested arrays are not supported inside keys"),typeof n=="object"&&Ky(n[u])==="[object Object]"&&(n[u]="[object Object]");if(typeof n=="object"&&Ky(n)==="[object Object]"&&(n="[object Object]"),n=String(n),t===null&&(t={}),r==="tag:yaml.org,2002:merge")if(Array.isArray(s))for(u=0,f=s.length;u<f;u+=1)Qy(e,t,s[u],i);else Qy(e,t,s,i);else!e.json&&!oi.call(i,n)&&oi.call(t,n)&&(e.line=o||e.line,e.lineStart=a||e.lineStart,e.position=c||e.position,G(e,"duplicated mapping key")),n==="__proto__"?Object.defineProperty(t,n,{configurable:!0,enumerable:!0,writable:!0,value:s}):t[n]=s,delete i[n];return t}function Fu(e){var t;t=e.input.charCodeAt(e.position),t===10?e.position++:t===13?(e.position++,e.input.charCodeAt(e.position)===10&&e.position++):G(e,"a line break is expected"),e.line+=1,e.lineStart=e.position,e.firstTabInLine=-1}function Le(e,t,i){for(var r=0,n=e.input.charCodeAt(e.position);n!==0;){for(;Si(n);)n===9&&e.firstTabInLine===-1&&(e.firstTabInLine=e.position),n=e.input.charCodeAt(++e.position);if(t&&n===35)do n=e.input.charCodeAt(++e.position);while(n!==10&&n!==13&&n!==0);if(Dt(n))for(Fu(e),n=e.input.charCodeAt(e.position),r++,e.lineIndent=0;n===32;)e.lineIndent++,n=e.input.charCodeAt(++e.position);else break}return i!==-1&&r!==0&&e.lineIndent<i&&Ns(e,"deficient indentation"),r}function Rs(e){var t=e.position,i;return i=e.input.charCodeAt(t),!!((i===45||i===46)&&i===e.input.charCodeAt(t+1)&&i===e.input.charCodeAt(t+2)&&(t+=3,i=e.input.charCodeAt(t),i===0||it(i)))}function ju(e,t){t===1?e.result+=" ":t>1&&(e.result+=Re.repeat(`
`,t-1))}function DL(e,t,i){var r,n,s,o,a,c,u,f,g=e.kind,x=e.result,l;if(l=e.input.charCodeAt(e.position),it(l)||sr(l)||l===35||l===38||l===42||l===33||l===124||l===62||l===39||l===34||l===37||l===64||l===96||(l===63||l===45)&&(n=e.input.charCodeAt(e.position+1),it(n)||i&&sr(n)))return!1;for(e.kind="scalar",e.result="",s=o=e.position,a=!1;l!==0;){if(l===58){if(n=e.input.charCodeAt(e.position+1),it(n)||i&&sr(n))break}else if(l===35){if(r=e.input.charCodeAt(e.position-1),it(r))break}else{if(e.position===e.lineStart&&Rs(e)||i&&sr(l))break;if(Dt(l))if(c=e.line,u=e.lineStart,f=e.lineIndent,Le(e,!1,-1),e.lineIndent>=t){a=!0,l=e.input.charCodeAt(e.position);continue}else{e.position=o,e.line=c,e.lineStart=u,e.lineIndent=f;break}}a&&(si(e,s,o,!1),ju(e,e.line-c),s=o=e.position,a=!1),Si(l)||(o=e.position+1),l=e.input.charCodeAt(++e.position)}return si(e,s,o,!1),e.result?!0:(e.kind=g,e.result=x,!1)}function IL(e,t){var i,r,n;if(i=e.input.charCodeAt(e.position),i!==39)return!1;for(e.kind="scalar",e.result="",e.position++,r=n=e.position;(i=e.input.charCodeAt(e.position))!==0;)if(i===39)if(si(e,r,e.position,!0),i=e.input.charCodeAt(++e.position),i===39)r=e.position,e.position++,n=e.position;else return!0;else Dt(i)?(si(e,r,n,!0),ju(e,Le(e,!1,t)),r=n=e.position):e.position===e.lineStart&&Rs(e)?G(e,"unexpected end of the document within a single quoted scalar"):(e.position++,n=e.position);G(e,"unexpected end of the stream within a single quoted scalar")}function NL(e,t){var i,r,n,s,o,a;if(a=e.input.charCodeAt(e.position),a!==34)return!1;for(e.kind="scalar",e.result="",e.position++,i=r=e.position;(a=e.input.charCodeAt(e.position))!==0;){if(a===34)return si(e,i,e.position,!0),e.position++,!0;if(a===92){if(si(e,i,e.position,!0),a=e.input.charCodeAt(++e.position),Dt(a))Le(e,!1,t);else if(a<256&&vb[a])e.result+=yb[a],e.position++;else if((o=SL(a))>0){for(n=o,s=0;n>0;n--)a=e.input.charCodeAt(++e.position),(o=TL(a))>=0?s=(s<<4)+o:G(e,"expected hexadecimal character");e.result+=OL(s),e.position++}else G(e,"unknown escape sequence");i=r=e.position}else Dt(a)?(si(e,i,r,!0),ju(e,Le(e,!1,t)),i=r=e.position):e.position===e.lineStart&&Rs(e)?G(e,"unexpected end of the document within a double quoted scalar"):(e.position++,r=e.position)}G(e,"unexpected end of the stream within a double quoted scalar")}function LL(e,t){var i=!0,r,n,s,o=e.tag,a,c=e.anchor,u,f,g,x,l,m=Object.create(null),v,_,E,w;if(w=e.input.charCodeAt(e.position),w===91)f=93,l=!1,a=[];else if(w===123)f=125,l=!0,a={};else return!1;for(e.anchor!==null&&(e.anchorMap[e.anchor]=a),w=e.input.charCodeAt(++e.position);w!==0;){if(Le(e,!0,t),w=e.input.charCodeAt(e.position),w===f)return e.position++,e.tag=o,e.anchor=c,e.kind=l?"mapping":"sequence",e.result=a,!0;i?w===44&&G(e,"expected the node content, but found ','"):G(e,"missed comma between flow collection entries"),_=v=E=null,g=x=!1,w===63&&(u=e.input.charCodeAt(e.position+1),it(u)&&(g=x=!0,e.position++,Le(e,!0,t))),r=e.line,n=e.lineStart,s=e.position,ar(e,t,Ds,!1,!0),_=e.tag,v=e.result,Le(e,!0,t),w=e.input.charCodeAt(e.position),(x||e.line===r)&&w===58&&(g=!0,w=e.input.charCodeAt(++e.position),Le(e,!0,t),ar(e,t,Ds,!1,!0),E=e.result),l?or(e,a,m,_,v,E,r,n,s):g?a.push(or(e,null,m,_,v,E,r,n,s)):a.push(v),Le(e,!0,t),w=e.input.charCodeAt(e.position),w===44?(i=!0,w=e.input.charCodeAt(++e.position)):i=!1}G(e,"unexpected end of the stream within a flow collection")}function kL(e,t){var i,r,n=Du,s=!1,o=!1,a=t,c=0,u=!1,f,g;if(g=e.input.charCodeAt(e.position),g===124)r=!1;else if(g===62)r=!0;else return!1;for(e.kind="scalar",e.result="";g!==0;)if(g=e.input.charCodeAt(++e.position),g===43||g===45)Du===n?n=g===43?Wy:bL:G(e,"repeat of a chomping mode identifier");else if((f=CL(g))>=0)f===0?G(e,"bad explicit indentation width of a block scalar; it cannot be less than one"):o?G(e,"repeat of an indentation width identifier"):(a=t+f-1,o=!0);else break;if(Si(g)){do g=e.input.charCodeAt(++e.position);while(Si(g));if(g===35)do g=e.input.charCodeAt(++e.position);while(!Dt(g)&&g!==0)}for(;g!==0;){for(Fu(e),e.lineIndent=0,g=e.input.charCodeAt(e.position);(!o||e.lineIndent<a)&&g===32;)e.lineIndent++,g=e.input.charCodeAt(++e.position);if(!o&&e.lineIndent>a&&(a=e.lineIndent),Dt(g)){c++;continue}if(e.lineIndent<a){n===Wy?e.result+=Re.repeat(`
`,s?1+c:c):n===Du&&s&&(e.result+=`
`);break}for(r?Si(g)?(u=!0,e.result+=Re.repeat(`
`,s?1+c:c)):u?(u=!1,e.result+=Re.repeat(`
`,c+1)):c===0?s&&(e.result+=" "):e.result+=Re.repeat(`
`,c):e.result+=Re.repeat(`
`,s?1+c:c),s=!0,o=!0,c=0,i=e.position;!Dt(g)&&g!==0;)g=e.input.charCodeAt(++e.position);si(e,i,e.position,!1)}return!0}function eb(e,t){var i,r=e.tag,n=e.anchor,s=[],o,a=!1,c;if(e.firstTabInLine!==-1)return!1;for(e.anchor!==null&&(e.anchorMap[e.anchor]=s),c=e.input.charCodeAt(e.position);c!==0&&(e.firstTabInLine!==-1&&(e.position=e.firstTabInLine,G(e,"tab characters must not be used in indentation")),!(c!==45||(o=e.input.charCodeAt(e.position+1),!it(o))));){if(a=!0,e.position++,Le(e,!0,-1)&&e.lineIndent<=t){s.push(null),c=e.input.charCodeAt(e.position);continue}if(i=e.line,ar(e,t,mb,!1,!0),s.push(e.result),Le(e,!0,-1),c=e.input.charCodeAt(e.position),(e.line===i||e.lineIndent>t)&&c!==0)G(e,"bad indentation of a sequence entry");else if(e.lineIndent<t)break}return a?(e.tag=r,e.anchor=n,e.kind="sequence",e.result=s,!0):!1}function RL(e,t,i){var r,n,s,o,a,c,u=e.tag,f=e.anchor,g={},x=Object.create(null),l=null,m=null,v=null,_=!1,E=!1,w;if(e.firstTabInLine!==-1)return!1;for(e.anchor!==null&&(e.anchorMap[e.anchor]=g),w=e.input.charCodeAt(e.position);w!==0;){if(!_&&e.firstTabInLine!==-1&&(e.position=e.firstTabInLine,G(e,"tab characters must not be used in indentation")),r=e.input.charCodeAt(e.position+1),s=e.line,(w===63||w===58)&&it(r))w===63?(_&&(or(e,g,x,l,m,null,o,a,c),l=m=v=null),E=!0,_=!0,n=!0):_?(_=!1,n=!0):G(e,"incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line"),e.position+=1,w=r;else{if(o=e.line,a=e.lineStart,c=e.position,!ar(e,i,hb,!1,!0))break;if(e.line===s){for(w=e.input.charCodeAt(e.position);Si(w);)w=e.input.charCodeAt(++e.position);if(w===58)w=e.input.charCodeAt(++e.position),it(w)||G(e,"a whitespace character is expected after the key-value separator within a block mapping"),_&&(or(e,g,x,l,m,null,o,a,c),l=m=v=null),E=!0,_=!1,n=!1,l=e.tag,m=e.result;else if(E)G(e,"can not read an implicit mapping pair; a colon is missed");else return e.tag=u,e.anchor=f,!0}else if(E)G(e,"can not read a block mapping entry; a multiline key may not be an implicit key");else return e.tag=u,e.anchor=f,!0}if((e.line===s||e.lineIndent>t)&&(_&&(o=e.line,a=e.lineStart,c=e.position),ar(e,t,Is,!0,n)&&(_?m=e.result:v=e.result),_||(or(e,g,x,l,m,v,o,a,c),l=m=v=null),Le(e,!0,-1),w=e.input.charCodeAt(e.position)),(e.line===s||e.lineIndent>t)&&w!==0)G(e,"bad indentation of a mapping entry");else if(e.lineIndent<t)break}return _&&or(e,g,x,l,m,null,o,a,c),E&&(e.tag=u,e.anchor=f,e.kind="mapping",e.result=g),E}function PL(e){var t,i=!1,r=!1,n,s,o;if(o=e.input.charCodeAt(e.position),o!==33)return!1;if(e.tag!==null&&G(e,"duplication of a tag property"),o=e.input.charCodeAt(++e.position),o===60?(i=!0,o=e.input.charCodeAt(++e.position)):o===33?(r=!0,n="!!",o=e.input.charCodeAt(++e.position)):n="!",t=e.position,i){do o=e.input.charCodeAt(++e.position);while(o!==0&&o!==62);e.position<e.length?(s=e.input.slice(t,e.position),o=e.input.charCodeAt(++e.position)):G(e,"unexpected end of the stream within a verbatim tag")}else{for(;o!==0&&!it(o);)o===33&&(r?G(e,"tag suffix cannot contain exclamation marks"):(n=e.input.slice(t-1,e.position+1),gb.test(n)||G(e,"named tag handle cannot contain such characters"),r=!0,t=e.position+1)),o=e.input.charCodeAt(++e.position);s=e.input.slice(t,e.position),_L.test(s)&&G(e,"tag suffix cannot contain flow indicator characters")}s&&!xb.test(s)&&G(e,"tag name cannot contain such characters: "+s);try{s=decodeURIComponent(s)}catch{G(e,"tag name is malformed: "+s)}return i?e.tag=s:oi.call(e.tagMap,n)?e.tag=e.tagMap[n]+s:n==="!"?e.tag="!"+s:n==="!!"?e.tag="tag:yaml.org,2002:"+s:G(e,'undeclared tag handle "'+n+'"'),!0}function FL(e){var t,i;if(i=e.input.charCodeAt(e.position),i!==38)return!1;for(e.anchor!==null&&G(e,"duplication of an anchor property"),i=e.input.charCodeAt(++e.position),t=e.position;i!==0&&!it(i)&&!sr(i);)i=e.input.charCodeAt(++e.position);return e.position===t&&G(e,"name of an anchor node must contain at least one character"),e.anchor=e.input.slice(t,e.position),!0}function jL(e){var t,i,r;if(r=e.input.charCodeAt(e.position),r!==42)return!1;for(r=e.input.charCodeAt(++e.position),t=e.position;r!==0&&!it(r)&&!sr(r);)r=e.input.charCodeAt(++e.position);return e.position===t&&G(e,"name of an alias node must contain at least one character"),i=e.input.slice(t,e.position),oi.call(e.anchorMap,i)||G(e,'unidentified alias "'+i+'"'),e.result=e.anchorMap[i],Le(e,!0,-1),!0}function ar(e,t,i,r,n){var s,o,a,c=1,u=!1,f=!1,g,x,l,m,v,_;if(e.listener!==null&&e.listener("open",e),e.tag=null,e.anchor=null,e.kind=null,e.result=null,s=o=a=Is===i||mb===i,r&&Le(e,!0,-1)&&(u=!0,e.lineIndent>t?c=1:e.lineIndent===t?c=0:e.lineIndent<t&&(c=-1)),c===1)for(;PL(e)||FL(e);)Le(e,!0,-1)?(u=!0,a=s,e.lineIndent>t?c=1:e.lineIndent===t?c=0:e.lineIndent<t&&(c=-1)):a=!1;if(a&&(a=u||n),(c===1||Is===i)&&(Ds===i||hb===i?v=t:v=t+1,_=e.position-e.lineStart,c===1?a&&(eb(e,_)||RL(e,_,v))||LL(e,v)?f=!0:(o&&kL(e,v)||IL(e,v)||NL(e,v)?f=!0:jL(e)?(f=!0,(e.tag!==null||e.anchor!==null)&&G(e,"alias node should not have any properties")):DL(e,v,Ds===i)&&(f=!0,e.tag===null&&(e.tag="?")),e.anchor!==null&&(e.anchorMap[e.anchor]=e.result)):c===0&&(f=a&&eb(e,_))),e.tag===null)e.anchor!==null&&(e.anchorMap[e.anchor]=e.result);else if(e.tag==="?"){for(e.result!==null&&e.kind!=="scalar"&&G(e,'unacceptable node kind for !<?> tag; it should be "scalar", not "'+e.kind+'"'),g=0,x=e.implicitTypes.length;g<x;g+=1)if(m=e.implicitTypes[g],m.resolve(e.result)){e.result=m.construct(e.result),e.tag=m.tag,e.anchor!==null&&(e.anchorMap[e.anchor]=e.result);break}}else if(e.tag!=="!"){if(oi.call(e.typeMap[e.kind||"fallback"],e.tag))m=e.typeMap[e.kind||"fallback"][e.tag];else for(m=null,l=e.typeMap.multi[e.kind||"fallback"],g=0,x=l.length;g<x;g+=1)if(e.tag.slice(0,l[g].tag.length)===l[g].tag){m=l[g];break}m||G(e,"unknown tag !<"+e.tag+">"),e.result!==null&&m.kind!==e.kind&&G(e,"unacceptable node kind for !<"+e.tag+'> tag; it should be "'+m.kind+'", not "'+e.kind+'"'),m.resolve(e.result,e.tag)?(e.result=m.construct(e.result,e.tag),e.anchor!==null&&(e.anchorMap[e.anchor]=e.result)):G(e,"cannot resolve a node with !<"+e.tag+"> explicit tag")}return e.listener!==null&&e.listener("close",e),e.tag!==null||e.anchor!==null||f}function ML(e){var t=e.position,i,r,n,s=!1,o;for(e.version=null,e.checkLineBreaks=e.legacy,e.tagMap=Object.create(null),e.anchorMap=Object.create(null);(o=e.input.charCodeAt(e.position))!==0&&(Le(e,!0,-1),o=e.input.charCodeAt(e.position),!(e.lineIndent>0||o!==37));){for(s=!0,o=e.input.charCodeAt(++e.position),i=e.position;o!==0&&!it(o);)o=e.input.charCodeAt(++e.position);for(r=e.input.slice(i,e.position),n=[],r.length<1&&G(e,"directive name must not be less than one character in length");o!==0;){for(;Si(o);)o=e.input.charCodeAt(++e.position);if(o===35){do o=e.input.charCodeAt(++e.position);while(o!==0&&!Dt(o));break}if(Dt(o))break;for(i=e.position;o!==0&&!it(o);)o=e.input.charCodeAt(++e.position);n.push(e.input.slice(i,e.position))}o!==0&&Fu(e),oi.call(Zy,r)?Zy[r](e,r,n):Ns(e,'unknown document directive "'+r+'"')}if(Le(e,!0,-1),e.lineIndent===0&&e.input.charCodeAt(e.position)===45&&e.input.charCodeAt(e.position+1)===45&&e.input.charCodeAt(e.position+2)===45?(e.position+=3,Le(e,!0,-1)):s&&G(e,"directives end mark is expected"),ar(e,e.lineIndent-1,Is,!1,!0),Le(e,!0,-1),e.checkLineBreaks&&EL.test(e.input.slice(t,e.position))&&Ns(e,"non-ASCII line breaks are interpreted as content"),e.documents.push(e.result),e.position===e.lineStart&&Rs(e)){e.input.charCodeAt(e.position)===46&&(e.position+=3,Le(e,!0,-1));return}if(e.position<e.length-1)G(e,"end of the stream or a document separator is expected");else return}function wb(e,t){e=String(e),t=t||{},e.length!==0&&(e.charCodeAt(e.length-1)!==10&&e.charCodeAt(e.length-1)!==13&&(e+=`
`),e.charCodeAt(0)===65279&&(e=e.slice(1)));var i=new AL(e,t),r=e.indexOf("\0");for(r!==-1&&(i.position=r,G(i,"null byte is not allowed in input")),i.input+="\0";i.input.charCodeAt(i.position)===32;)i.lineIndent+=1,i.position+=1;for(;i.position<i.length-1;)ML(i);return i.documents}function qL(e,t,i){t!==null&&typeof t=="object"&&typeof i>"u"&&(i=t,t=null);var r=wb(e,i);if(typeof t!="function")return r;for(var n=0,s=r.length;n<s;n+=1)t(r[n])}function BL(e,t){var i=wb(e,t);if(i.length!==0){if(i.length===1)return i[0];throw new tt("expected a single document in the stream, but found more")}}var UL=qL,$L=BL,Eb={loadAll:UL,load:$L},_b=Object.prototype.toString,Tb=Object.prototype.hasOwnProperty,Mu=65279,zL=9,Jr=10,HL=13,GL=32,VL=33,XL=34,Nu=35,YL=37,WL=38,KL=39,JL=42,Sb=44,ZL=45,Ls=58,QL=61,ek=62,tk=63,ik=64,Cb=91,Ob=93,rk=96,Ab=123,nk=124,Db=125,He={};He[0]="\\0";He[7]="\\a";He[8]="\\b";He[9]="\\t";He[10]="\\n";He[11]="\\v";He[12]="\\f";He[13]="\\r";He[27]="\\e";He[34]='\\"';He[92]="\\\\";He[133]="\\N";He[160]="\\_";He[8232]="\\L";He[8233]="\\P";var sk=["y","Y","yes","Yes","YES","on","On","ON","n","N","no","No","NO","off","Off","OFF"],ok=/^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;function ak(e,t){var i,r,n,s,o,a,c;if(t===null)return{};for(i={},r=Object.keys(t),n=0,s=r.length;n<s;n+=1)o=r[n],a=String(t[o]),o.slice(0,2)==="!!"&&(o="tag:yaml.org,2002:"+o.slice(2)),c=e.compiledTypeMap.fallback[o],c&&Tb.call(c.styleAliases,a)&&(a=c.styleAliases[a]),i[o]=a;return i}function ck(e){var t,i,r;if(t=e.toString(16).toUpperCase(),e<=255)i="x",r=2;else if(e<=65535)i="u",r=4;else if(e<=4294967295)i="U",r=8;else throw new tt("code point within a string may not be greater than 0xFFFFFFFF");return"\\"+i+Re.repeat("0",r-t.length)+t}var uk=1,Zr=2;function lk(e){this.schema=e.schema||fb,this.indent=Math.max(1,e.indent||2),this.noArrayIndent=e.noArrayIndent||!1,this.skipInvalid=e.skipInvalid||!1,this.flowLevel=Re.isNothing(e.flowLevel)?-1:e.flowLevel,this.styleMap=ak(this.schema,e.styles||null),this.sortKeys=e.sortKeys||!1,this.lineWidth=e.lineWidth||80,this.noRefs=e.noRefs||!1,this.noCompatMode=e.noCompatMode||!1,this.condenseFlow=e.condenseFlow||!1,this.quotingType=e.quotingType==='"'?Zr:uk,this.forceQuotes=e.forceQuotes||!1,this.replacer=typeof e.replacer=="function"?e.replacer:null,this.implicitTypes=this.schema.compiledImplicit,this.explicitTypes=this.schema.compiledExplicit,this.tag=null,this.result="",this.duplicates=[],this.usedDuplicates=null}function tb(e,t){for(var i=Re.repeat(" ",t),r=0,n=-1,s="",o,a=e.length;r<a;)n=e.indexOf(`
`,r),n===-1?(o=e.slice(r),r=a):(o=e.slice(r,n+1),r=n+1),o.length&&o!==`
`&&(s+=i),s+=o;return s}function Lu(e,t){return`
`+Re.repeat(" ",e.indent*t)}function pk(e,t){var i,r,n;for(i=0,r=e.implicitTypes.length;i<r;i+=1)if(n=e.implicitTypes[i],n.resolve(t))return!0;return!1}function ks(e){return e===GL||e===zL}function Qr(e){return 32<=e&&e<=126||161<=e&&e<=55295&&e!==8232&&e!==8233||57344<=e&&e<=65533&&e!==Mu||65536<=e&&e<=1114111}function ib(e){return Qr(e)&&e!==Mu&&e!==HL&&e!==Jr}function rb(e,t,i){var r=ib(e),n=r&&!ks(e);return(i?r:r&&e!==Sb&&e!==Cb&&e!==Ob&&e!==Ab&&e!==Db)&&e!==Nu&&!(t===Ls&&!n)||ib(t)&&!ks(t)&&e===Nu||t===Ls&&n}function dk(e){return Qr(e)&&e!==Mu&&!ks(e)&&e!==ZL&&e!==tk&&e!==Ls&&e!==Sb&&e!==Cb&&e!==Ob&&e!==Ab&&e!==Db&&e!==Nu&&e!==WL&&e!==JL&&e!==VL&&e!==nk&&e!==QL&&e!==ek&&e!==KL&&e!==XL&&e!==YL&&e!==ik&&e!==rk}function fk(e){return!ks(e)&&e!==Ls}function Wr(e,t){var i=e.charCodeAt(t),r;return i>=55296&&i<=56319&&t+1<e.length&&(r=e.charCodeAt(t+1),r>=56320&&r<=57343)?(i-55296)*1024+r-56320+65536:i}function Ib(e){var t=/^\n* /;return t.test(e)}var Nb=1,ku=2,Lb=3,kb=4,nr=5;function hk(e,t,i,r,n,s,o,a){var c,u=0,f=null,g=!1,x=!1,l=r!==-1,m=-1,v=dk(Wr(e,0))&&fk(Wr(e,e.length-1));if(t||o)for(c=0;c<e.length;u>=65536?c+=2:c++){if(u=Wr(e,c),!Qr(u))return nr;v=v&&rb(u,f,a),f=u}else{for(c=0;c<e.length;u>=65536?c+=2:c++){if(u=Wr(e,c),u===Jr)g=!0,l&&(x=x||c-m-1>r&&e[m+1]!==" ",m=c);else if(!Qr(u))return nr;v=v&&rb(u,f,a),f=u}x=x||l&&c-m-1>r&&e[m+1]!==" "}return!g&&!x?v&&!o&&!n(e)?Nb:s===Zr?nr:ku:i>9&&Ib(e)?nr:o?s===Zr?nr:ku:x?kb:Lb}function mk(e,t,i,r,n){e.dump=function(){if(t.length===0)return e.quotingType===Zr?'""':"''";if(!e.noCompatMode&&(sk.indexOf(t)!==-1||ok.test(t)))return e.quotingType===Zr?'"'+t+'"':"'"+t+"'";var s=e.indent*Math.max(1,i),o=e.lineWidth===-1?-1:Math.max(Math.min(e.lineWidth,40),e.lineWidth-s),a=r||e.flowLevel>-1&&i>=e.flowLevel;function c(u){return pk(e,u)}switch(hk(t,a,e.indent,o,c,e.quotingType,e.forceQuotes&&!r,n)){case Nb:return t;case ku:return"'"+t.replace(/'/g,"''")+"'";case Lb:return"|"+nb(t,e.indent)+sb(tb(t,s));case kb:return">"+nb(t,e.indent)+sb(tb(gk(t,o),s));case nr:return'"'+xk(t)+'"';default:throw new tt("impossible error: invalid scalar style")}}()}function nb(e,t){var i=Ib(e)?String(t):"",r=e[e.length-1]===`
`,n=r&&(e[e.length-2]===`
`||e===`
`),s=n?"+":r?"":"-";return i+s+`
`}function sb(e){return e[e.length-1]===`
`?e.slice(0,-1):e}function gk(e,t){for(var i=/(\n+)([^\n]*)/g,r=function(){var u=e.indexOf(`
`);return u=u!==-1?u:e.length,i.lastIndex=u,ob(e.slice(0,u),t)}(),n=e[0]===`
`||e[0]===" ",s,o;o=i.exec(e);){var a=o[1],c=o[2];s=c[0]===" ",r+=a+(!n&&!s&&c!==""?`
`:"")+ob(c,t),n=s}return r}function ob(e,t){if(e===""||e[0]===" ")return e;for(var i=/ [^ ]/g,r,n=0,s,o=0,a=0,c="";r=i.exec(e);)a=r.index,a-n>t&&(s=o>n?o:a,c+=`
`+e.slice(n,s),n=s+1),o=a;return c+=`
`,e.length-n>t&&o>n?c+=e.slice(n,o)+`
`+e.slice(o+1):c+=e.slice(n),c.slice(1)}function xk(e){for(var t="",i=0,r,n=0;n<e.length;i>=65536?n+=2:n++)i=Wr(e,n),r=He[i],!r&&Qr(i)?(t+=e[n],i>=65536&&(t+=e[n+1])):t+=r||ck(i);return t}function vk(e,t,i){var r="",n=e.tag,s,o,a;for(s=0,o=i.length;s<o;s+=1)a=i[s],e.replacer&&(a=e.replacer.call(i,String(s),a)),(Ht(e,t,a,!1,!1)||typeof a>"u"&&Ht(e,t,null,!1,!1))&&(r!==""&&(r+=","+(e.condenseFlow?"":" ")),r+=e.dump);e.tag=n,e.dump="["+r+"]"}function ab(e,t,i,r){var n="",s=e.tag,o,a,c;for(o=0,a=i.length;o<a;o+=1)c=i[o],e.replacer&&(c=e.replacer.call(i,String(o),c)),(Ht(e,t+1,c,!0,!0,!1,!0)||typeof c>"u"&&Ht(e,t+1,null,!0,!0,!1,!0))&&((!r||n!=="")&&(n+=Lu(e,t)),e.dump&&Jr===e.dump.charCodeAt(0)?n+="-":n+="- ",n+=e.dump);e.tag=s,e.dump=n||"[]"}function yk(e,t,i){var r="",n=e.tag,s=Object.keys(i),o,a,c,u,f;for(o=0,a=s.length;o<a;o+=1)f="",r!==""&&(f+=", "),e.condenseFlow&&(f+='"'),c=s[o],u=i[c],e.replacer&&(u=e.replacer.call(i,c,u)),Ht(e,t,c,!1,!1)&&(e.dump.length>1024&&(f+="? "),f+=e.dump+(e.condenseFlow?'"':"")+":"+(e.condenseFlow?"":" "),Ht(e,t,u,!1,!1)&&(f+=e.dump,r+=f));e.tag=n,e.dump="{"+r+"}"}function bk(e,t,i,r){var n="",s=e.tag,o=Object.keys(i),a,c,u,f,g,x;if(e.sortKeys===!0)o.sort();else if(typeof e.sortKeys=="function")o.sort(e.sortKeys);else if(e.sortKeys)throw new tt("sortKeys must be a boolean or a function");for(a=0,c=o.length;a<c;a+=1)x="",(!r||n!=="")&&(x+=Lu(e,t)),u=o[a],f=i[u],e.replacer&&(f=e.replacer.call(i,u,f)),Ht(e,t+1,u,!0,!0,!0)&&(g=e.tag!==null&&e.tag!=="?"||e.dump&&e.dump.length>1024,g&&(e.dump&&Jr===e.dump.charCodeAt(0)?x+="?":x+="? "),x+=e.dump,g&&(x+=Lu(e,t)),Ht(e,t+1,f,!0,g)&&(e.dump&&Jr===e.dump.charCodeAt(0)?x+=":":x+=": ",x+=e.dump,n+=x));e.tag=s,e.dump=n||"{}"}function cb(e,t,i){var r,n,s,o,a,c;for(n=i?e.explicitTypes:e.implicitTypes,s=0,o=n.length;s<o;s+=1)if(a=n[s],(a.instanceOf||a.predicate)&&(!a.instanceOf||typeof t=="object"&&t instanceof a.instanceOf)&&(!a.predicate||a.predicate(t))){if(i?a.multi&&a.representName?e.tag=a.representName(t):e.tag=a.tag:e.tag="?",a.represent){if(c=e.styleMap[a.tag]||a.defaultStyle,_b.call(a.represent)==="[object Function]")r=a.represent(t,c);else if(Tb.call(a.represent,c))r=a.represent[c](t,c);else throw new tt("!<"+a.tag+'> tag resolver accepts not "'+c+'" style');e.dump=r}return!0}return!1}function Ht(e,t,i,r,n,s,o){e.tag=null,e.dump=i,cb(e,i,!1)||cb(e,i,!0);var a=_b.call(e.dump),c=r,u;r&&(r=e.flowLevel<0||e.flowLevel>t);var f=a==="[object Object]"||a==="[object Array]",g,x;if(f&&(g=e.duplicates.indexOf(i),x=g!==-1),(e.tag!==null&&e.tag!=="?"||x||e.indent!==2&&t>0)&&(n=!1),x&&e.usedDuplicates[g])e.dump="*ref_"+g;else{if(f&&x&&!e.usedDuplicates[g]&&(e.usedDuplicates[g]=!0),a==="[object Object]")r&&Object.keys(e.dump).length!==0?(bk(e,t,e.dump,n),x&&(e.dump="&ref_"+g+e.dump)):(yk(e,t,e.dump),x&&(e.dump="&ref_"+g+" "+e.dump));else if(a==="[object Array]")r&&e.dump.length!==0?(e.noArrayIndent&&!o&&t>0?ab(e,t-1,e.dump,n):ab(e,t,e.dump,n),x&&(e.dump="&ref_"+g+e.dump)):(vk(e,t,e.dump),x&&(e.dump="&ref_"+g+" "+e.dump));else if(a==="[object String]")e.tag!=="?"&&mk(e,e.dump,t,s,c);else{if(a==="[object Undefined]")return!1;if(e.skipInvalid)return!1;throw new tt("unacceptable kind of an object to dump "+a)}e.tag!==null&&e.tag!=="?"&&(u=encodeURI(e.tag[0]==="!"?e.tag.slice(1):e.tag).replace(/!/g,"%21"),e.tag[0]==="!"?u="!"+u:u.slice(0,18)==="tag:yaml.org,2002:"?u="!!"+u.slice(18):u="!<"+u+">",e.dump=u+" "+e.dump)}return!0}function wk(e,t){var i=[],r=[],n,s;for(Ru(e,i,r),n=0,s=r.length;n<s;n+=1)t.duplicates.push(i[r[n]]);t.usedDuplicates=new Array(s)}function Ru(e,t,i){var r,n,s;if(e!==null&&typeof e=="object")if(n=t.indexOf(e),n!==-1)i.indexOf(n)===-1&&i.push(n);else if(t.push(e),Array.isArray(e))for(n=0,s=e.length;n<s;n+=1)Ru(e[n],t,i);else for(r=Object.keys(e),n=0,s=r.length;n<s;n+=1)Ru(e[r[n]],t,i)}function Ek(e,t){t=t||{};var i=new lk(t);i.noRefs||wk(e,i);var r=e;return i.replacer&&(r=i.replacer.call({"":r},"",r)),Ht(i,0,r,!0,!0)?i.dump+`
`:""}var _k=Ek,Tk={dump:_k};function qu(e,t){return function(){throw new Error("Function yaml."+e+" is removed in js-yaml 4. Use yaml."+t+" instead, which is now safe by default.")}}var Rb=Eb.load,B3=Eb.loadAll,U3=Tk.dump;var $3=qu("safeLoad","load"),z3=qu("safeLoadAll","loadAll"),H3=qu("safeDump","dump");var Ci=require("fs"),Pb=require("path");var Ps=class extends et{async setProject(t){this.goModFile.then(i=>{if(!i)return;let n=(0,Ci.readFileSync)(i,"utf8").split(`
`).map(s=>s.match(/^module\s+(\S+)/)?`module ${t}`:s);(0,Ci.writeFileSync)(i,n.join(`
`))})}get goModFile(){return this.workdir.then(t=>(0,Pb.join)(t,"go.mod")).then(t=>{if((0,Ci.existsSync)(t))return t})}get goProject(){return this.goModFile.then(t=>{if(!t)return;let i=(0,Ci.readFileSync)(t,"utf8").split(`
`),r,n=!1,s={};return i.forEach(o=>{let a=o.match(/^module\s+(\S+)/),c=o.match(/^require\s+(\S+)\s+(\S+)/),u=o.match(/^require\s*\(\s*$/),f=o.match(/^\s*\)\s*$/);if(a){s.module=a[1];let g=o.match(/(?:^module\s+|\/)([^/\s]+)$/);g&&(r=g[1])}else if(u)n=!0;else if(f)n=!1;else if(n){let g=o.match(/^\s*(\S+)\s+(\S+)\s(.*)$/);g&&(s.require||(s.require=[]),s.require.push({module:g[1],version:g[2]}))}else c&&(s.require||(s.require=[]),s.require.push({module:c[1],version:c[2]}))}),{projectName:r,goMod:s}})}get projectJson(){return Promise.all([this.goProject,this.standaloneConfig]).then(([t,i])=>{let r={type:"golang"};if(!t)return;let{projectName:n,goMod:s}=t;return r.name=n,r.dependencies=s.require?.reduce((o,a)=>(o[a.module]=a.version,o),{}),i&&(r.scaffoldly=i),r})}};var Qs=require("fs"),s0=require("path");var o0=se(n0()),Zs=class extends et{async setProject(t){throw new Error("Not implemented")}get projectFile(){return this.workdir.then(t=>{let i=(0,Qs.readdirSync)(t).filter(r=>r.endsWith(".csproj"));if(i.length!==0){if(i.length>1)throw new Error(`Multiple .csproj files found: ${i.join(", ")}.`);return i[0]}})}get project(){return Promise.all([this.projectFile,this.workdir]).then(([t,i])=>{if(t)return(0,o0.parseStringPromise)((0,Qs.readFileSync)((0,s0.join)(i,t))).then(r=>({projectName:t.replace(".csproj",""),csProj:r}))})}get projectJson(){return this.project.then(t=>{let i={type:"dotnet"};if(!t)return;let{projectName:r,csProj:n}=t;i.name=r;let s=n?.Project;if(!s)return;let o=s.PropertyGroup?.[0];if(!o)return;let a=o.Version?.[0];i.version=a;let c=o.Scaffoldly?.[0];if(!c)return;let u=(c.Bin||[]).reduce((g,x)=>{let l=x.$?.name,m=x._;return!l||!m||(g[l]=m),g},{}),f=(c.Service||[]).map(g=>{let x=(g.Script||[]).reduce((l,m)=>{let v=m.$?.name,_=m._;return!v||!_||(l[v]=_),l},{});return{name:g.$?.name,scripts:x,files:g.File}});return i.scaffoldly={runtime:c.Runtime?.[0],handler:c.Handler?.[0],bin:u,services:f},i})}};var Di=require("fs"),f0=require("path");function Sk(e,t){let i=e.slice(0,t).split(/\r\n|\n|\r/g);return[i.length,i.pop().length+1]}function Ck(e,t,i){let r=e.split(/\r\n|\n|\r/g),n="",s=(Math.log10(t+1)|0)+1;for(let o=t-1;o<=t+1;o++){let a=r[o-1];a&&(n+=o.toString().padEnd(s," "),n+=":  ",n+=a,n+=`
`,o===t&&(n+=" ".repeat(s+i+2),n+=`^
`))}return n}var W=class extends Error{line;column;codeblock;constructor(t,i){let[r,n]=Sk(i.toml,i.ptr),s=Ck(i.toml,r,n);super(`Invalid TOML document: ${t}

${s}`,i),this.line=r,this.column=n,this.codeblock=s}};function cr(e,t=0,i=e.length){let r=e.indexOf(`
`,t);return e[r-1]==="\r"&&r--,r<=i?r:-1}function rn(e,t){for(let i=t;i<e.length;i++){let r=e[i];if(r===`
`)return i;if(r==="\r"&&e[i+1]===`
`)return i+1;if(r<" "&&r!=="	"||r==="\x7F")throw new W("control characters are not allowed in comments",{toml:e,ptr:t})}return e.length}function ut(e,t,i,r){let n;for(;(n=e[t])===" "||n==="	"||!i&&(n===`
`||n==="\r"&&e[t+1]===`
`);)t++;return r||n!=="#"?t:ut(e,rn(e,t),i)}function Ku(e,t,i,r,n=!1){if(!r)return t=cr(e,t),t<0?e.length:t;for(let s=t;s<e.length;s++){let o=e[s];if(o==="#")s=cr(e,s);else{if(o===i)return s+1;if(o===r)return s;if(n&&(o===`
`||o==="\r"&&e[s+1]===`
`))return s}}throw new W("cannot find end of structure",{toml:e,ptr:t})}function eo(e,t){let i=e[t],r=i===e[t+1]&&e[t+1]===e[t+2]?e.slice(t,t+3):i;t+=r.length-1;do t=e.indexOf(r,++t);while(t>-1&&i!=="'"&&e[t-1]==="\\"&&e[t-2]!=="\\");return t>-1&&(t+=r.length,r.length>1&&(e[t]===i&&t++,e[t]===i&&t++)),t}var Ok=/^(\d{4}-\d{2}-\d{2})?[T ]?(?:(\d{2}):\d{2}:\d{2}(?:\.\d+)?)?(Z|[-+]\d{2}:\d{2})?$/i,nn=class e extends Date{#t=!1;#i=!1;#e=null;constructor(t){let i=!0,r=!0,n="Z";if(typeof t=="string"){let s=t.match(Ok);s?(s[1]||(i=!1,t=`0000-01-01T${t}`),r=!!s[2],s[2]&&+s[2]>23?t="":(n=s[3]||null,t=t.toUpperCase(),!n&&r&&(t+="Z"))):t=""}super(t),isNaN(this.getTime())||(this.#t=i,this.#i=r,this.#e=n)}isDateTime(){return this.#t&&this.#i}isLocal(){return!this.#t||!this.#i||!this.#e}isDate(){return this.#t&&!this.#i}isTime(){return this.#i&&!this.#t}isValid(){return this.#t||this.#i}toISOString(){let t=super.toISOString();if(this.isDate())return t.slice(0,10);if(this.isTime())return t.slice(11,23);if(this.#e===null)return t.slice(0,-1);if(this.#e==="Z")return t;let i=+this.#e.slice(1,3)*60+ +this.#e.slice(4,6);return i=this.#e[0]==="-"?i:-i,new Date(this.getTime()-i*6e4).toISOString().slice(0,-1)+this.#e}static wrapAsOffsetDateTime(t,i="Z"){let r=new e(t);return r.#e=i,r}static wrapAsLocalDateTime(t){let i=new e(t);return i.#e=null,i}static wrapAsLocalDate(t){let i=new e(t);return i.#i=!1,i.#e=null,i}static wrapAsLocalTime(t){let i=new e(t);return i.#t=!1,i.#e=null,i}};var Ak=/^((0x[0-9a-fA-F](_?[0-9a-fA-F])*)|(([+-]|0[ob])?\d(_?\d)*))$/,Dk=/^[+-]?\d(_?\d)*(\.\d(_?\d)*)?([eE][+-]?\d(_?\d)*)?$/,Ik=/^[+-]?0[0-9_]/,Nk=/^[0-9a-f]{4,8}$/i,a0={b:"\b",t:"	",n:`
`,f:"\f",r:"\r",'"':'"',"\\":"\\"};function to(e,t=0,i=e.length){let r=e[t]==="'",n=e[t++]===e[t]&&e[t]===e[t+1];n&&(i-=2,e[t+=2]==="\r"&&t++,e[t]===`
`&&t++);let s=0,o,a="",c=t;for(;t<i-1;){let u=e[t++];if(u===`
`||u==="\r"&&e[t]===`
`){if(!n)throw new W("newlines are not allowed in strings",{toml:e,ptr:t-1})}else if(u<" "&&u!=="	"||u==="\x7F")throw new W("control characters are not allowed in strings",{toml:e,ptr:t-1});if(o){if(o=!1,u==="u"||u==="U"){let f=e.slice(t,t+=u==="u"?4:8);if(!Nk.test(f))throw new W("invalid unicode escape",{toml:e,ptr:s});try{a+=String.fromCodePoint(parseInt(f,16))}catch{throw new W("invalid unicode escape",{toml:e,ptr:s})}}else if(n&&(u===`
`||u===" "||u==="	"||u==="\r")){if(t=ut(e,t-1,!0),e[t]!==`
`&&e[t]!=="\r")throw new W("invalid escape: only line-ending whitespace may be escaped",{toml:e,ptr:s});t=ut(e,t)}else if(u in a0)a+=a0[u];else throw new W("unrecognized escape sequence",{toml:e,ptr:s});c=t}else!r&&u==="\\"&&(s=t-1,o=!0,a+=e.slice(c,s))}return a+e.slice(c,i-1)}function c0(e,t,i){if(e==="true")return!0;if(e==="false")return!1;if(e==="-inf")return-1/0;if(e==="inf"||e==="+inf")return 1/0;if(e==="nan"||e==="+nan"||e==="-nan")return NaN;if(e==="-0")return 0;let r;if((r=Ak.test(e))||Dk.test(e)){if(Ik.test(e))throw new W("leading zeroes are not allowed",{toml:t,ptr:i});let s=+e.replace(/_/g,"");if(isNaN(s))throw new W("invalid number",{toml:t,ptr:i});if(r&&!Number.isSafeInteger(s))throw new W("integer value cannot be represented losslessly",{toml:t,ptr:i});return s}let n=new nn(e);if(!n.isValid())throw new W("invalid value",{toml:t,ptr:i});return n}function Lk(e,t,i,r){let n=e.slice(t,i),s=n.indexOf("#");s>-1&&(rn(e,s),n=n.slice(0,s));let o=n.trimEnd();if(!r){let a=n.indexOf(`
`,o.length);if(a>-1)throw new W("newlines are not allowed in inline tables",{toml:e,ptr:t+a})}return[o,s]}function sn(e,t,i){let r=e[t];if(r==="["||r==="{"){let[o,a]=r==="["?l0(e,t):u0(e,t),c=Ku(e,a,",",i);if(i==="}"){let u=cr(e,a,c);if(u>-1)throw new W("newlines are not allowed in inline tables",{toml:e,ptr:u})}return[o,c]}let n;if(r==='"'||r==="'"){n=eo(e,t);let o=to(e,t,n);if(i){if(n=ut(e,n,i!=="]"),e[n]&&e[n]!==","&&e[n]!==i&&e[n]!==`
`&&e[n]!=="\r")throw new W("unexpected character encountered",{toml:e,ptr:n});n+=+(e[n]===",")}return[o,n]}n=Ku(e,t,",",i);let s=Lk(e,t,n-+(e[n-1]===","),i==="]");if(!s[0])throw new W("incomplete key-value declaration: no value specified",{toml:e,ptr:t});return i&&s[1]>-1&&(n=ut(e,t+s[1]),n+=+(e[n]===",")),[c0(s[0],e,t),n]}var kk=/^[a-zA-Z0-9-_]+[ \t]*$/;function io(e,t,i="="){let r=t-1,n=[],s=e.indexOf(i,t);if(s<0)throw new W("incomplete key-value: cannot find end of key",{toml:e,ptr:t});do{let o=e[t=++r];if(o!==" "&&o!=="	")if(o==='"'||o==="'"){if(o===e[t+1]&&o===e[t+2])throw new W("multiline strings are not allowed in keys",{toml:e,ptr:t});let a=eo(e,t);if(a<0)throw new W("unfinished string encountered",{toml:e,ptr:t});r=e.indexOf(".",a);let c=e.slice(a,r<0||r>s?s:r),u=cr(c);if(u>-1)throw new W("newlines are not allowed in keys",{toml:e,ptr:t+r+u});if(c.trimStart())throw new W("found extra tokens after the string part",{toml:e,ptr:a});if(s<a&&(s=e.indexOf(i,a),s<0))throw new W("incomplete key-value: cannot find end of key",{toml:e,ptr:t});n.push(to(e,t,a))}else{r=e.indexOf(".",t);let a=e.slice(t,r<0||r>s?s:r);if(!kk.test(a))throw new W("only letter, numbers, dashes and underscores are allowed in keys",{toml:e,ptr:t});n.push(a.trimEnd())}}while(r+1&&r<s);return[n,ut(e,s+1,!0,!0)]}function u0(e,t){let i={},r=new Set,n,s=0;for(t++;(n=e[t++])!=="}"&&n;){if(n===`
`)throw new W("newlines are not allowed in inline tables",{toml:e,ptr:t-1});if(n==="#")throw new W("inline tables cannot contain comments",{toml:e,ptr:t-1});if(n===",")throw new W("expected key-value, found comma",{toml:e,ptr:t-1});if(n!==" "&&n!=="	"){let o,a=i,c=!1,[u,f]=io(e,t-1);for(let l=0;l<u.length;l++){if(l&&(a=c?a[o]:a[o]={}),o=u[l],(c=Object.hasOwn(a,o))&&(typeof a[o]!="object"||r.has(a[o])))throw new W("trying to redefine an already defined value",{toml:e,ptr:t});!c&&o==="__proto__"&&Object.defineProperty(a,o,{enumerable:!0,configurable:!0,writable:!0})}if(c)throw new W("trying to redefine an already defined value",{toml:e,ptr:t});let[g,x]=sn(e,f,"}");r.add(g),a[o]=g,t=x,s=e[t-1]===","?t-1:0}}if(s)throw new W("trailing commas are not allowed in inline tables",{toml:e,ptr:s});if(!n)throw new W("unfinished table encountered",{toml:e,ptr:t});return[i,t]}function l0(e,t){let i=[],r;for(t++;(r=e[t++])!=="]"&&r;){if(r===",")throw new W("expected value, found comma",{toml:e,ptr:t-1});if(r==="#")t=rn(e,t);else if(r!==" "&&r!=="	"&&r!==`
`&&r!=="\r"){let n=sn(e,t-1,"]");i.push(n[0]),t=n[1]}}if(!r)throw new W("unfinished array encountered",{toml:e,ptr:t});return[i,t]}function p0(e,t,i,r){let n=t,s=i,o,a=!1,c;for(let u=0;u<e.length;u++){if(u){if(n=a?n[o]:n[o]={},s=(c=s[o]).c,r===0&&(c.t===1||c.t===2))return null;if(c.t===2){let f=n.length-1;n=n[f],s=s[f].c}}if(o=e[u],(a=Object.hasOwn(n,o))&&s[o]?.t===0&&s[o]?.d)return null;a||(o==="__proto__"&&(Object.defineProperty(n,o,{enumerable:!0,configurable:!0,writable:!0}),Object.defineProperty(s,o,{enumerable:!0,configurable:!0,writable:!0})),s[o]={t:u<e.length-1&&r===2?3:r,d:!1,i:0,c:{}})}if(c=s[o],c.t!==r&&!(r===1&&c.t===3)||(r===2&&(c.d||(c.d=!0,n[o]=[]),n[o].push(n={}),c.c[c.i++]=c={t:1,d:!1,i:0,c:{}}),c.d))return null;if(c.d=!0,r===1)n=a?n[o]:n[o]={};else if(r===0&&a)return null;return[o,n,c.c]}function Ai(e){let t={},i={},r=t,n=i;for(let s=ut(e,0);s<e.length;){if(e[s]==="["){let o=e[++s]==="[",a=io(e,s+=+o,"]");if(o){if(e[a[1]-1]!=="]")throw new W("expected end of table declaration",{toml:e,ptr:a[1]-1});a[1]++}let c=p0(a[0],t,i,o?2:1);if(!c)throw new W("trying to redefine an already defined table or value",{toml:e,ptr:s});n=c[2],r=c[1],s=a[1]}else{let o=io(e,s),a=p0(o[0],r,n,0);if(!a)throw new W("trying to redefine an already defined table or value",{toml:e,ptr:s});let c=sn(e,o[1]);a[1][a[0]]=c[0],s=c[1]}if(s=ut(e,s,!0),e[s]&&e[s]!==`
`&&e[s]!=="\r")throw new W("each key-value declaration must be followed by an end-of-line",{toml:e,ptr:s});s=ut(e,s)}return t}var d0=/^[a-z0-9-_]+$/i;function ro(e){let t=typeof e;if(t==="object"){if(Array.isArray(e))return"array";if(e instanceof Date)return"date"}return t}function Rk(e){for(let t=0;t<e.length;t++)if(ro(e[t])!=="object")return!1;return e.length!=0}function Ju(e){return JSON.stringify(e).replace(/\x7f/g,"\\u007f")}function Zu(e,t=ro(e)){if(t==="number")return isNaN(e)?"nan":e===1/0?"inf":e===-1/0?"-inf":e.toString();if(t==="bigint"||t==="boolean")return e.toString();if(t==="string")return Ju(e);if(t==="date"){if(isNaN(e.getTime()))throw new TypeError("cannot serialize invalid date");return e.toISOString()}if(t==="object")return Pk(e);if(t==="array")return Fk(e)}function Pk(e){let t=Object.keys(e);if(t.length===0)return"{}";let i="{ ";for(let r=0;r<t.length;r++){let n=t[r];r&&(i+=", "),i+=d0.test(n)?n:Ju(n),i+=" = ",i+=Zu(e[n])}return i+" }"}function Fk(e){if(e.length===0)return"[]";let t="[ ";for(let i=0;i<e.length;i++){if(i&&(t+=", "),e[i]===null||e[i]===void 0)throw new TypeError("arrays cannot contain null or undefined values");t+=Zu(e[i])}return t+" ]"}function jk(e,t){let i="";for(let r=0;r<e.length;r++)i+=`[[${t}]]
`,i+=Qu(e[r],t),i+=`

`;return i}function Qu(e,t=""){let i="",r="",n=Object.keys(e);for(let s=0;s<n.length;s++){let o=n[s];if(e[o]!==null&&e[o]!==void 0){let a=ro(e[o]);if(a==="symbol"||a==="function")throw new TypeError(`cannot serialize values of type '${a}'`);let c=d0.test(o)?o:Ju(o);if(a==="array"&&Rk(e[o]))r+=jk(e[o],t?`${t}.${c}`:c);else if(a==="object"){let u=t?`${t}.${c}`:c;r+=`[${u}]
`,r+=Qu(e[o],u),r+=`

`}else i+=c,i+=" = ",i+=Zu(e[o],a),i+=`
`}}return`${i}
${r}`.trim()}function on(e){if(ro(e)!=="object")throw new TypeError("stringify can only be called with an object");return Qu(e)}var no=class extends et{async setProject(t){return this.pyProjectFile.then(i=>{if(!i)return;let r=Ai((0,Di.readFileSync)(i,"utf-8"));r.tool?.poetry&&(r.tool.poetry.name=t),(0,Di.writeFileSync)(i,on(r))})}get pyProjectFile(){return this.workdir.then(t=>(0,f0.join)(t,"pyproject.toml")).then(t=>{if((0,Di.existsSync)(t))return t})}get pyProject(){return this.pyProjectFile.then(t=>t?{pyprojectToml:Ai((0,Di.readFileSync)(t,"utf-8"))}:void 0)}get projectJson(){return Promise.all([this.pyProject]).then(([t])=>{let i={type:"python"};if(!t)return;let{pyprojectToml:r}=t,n=r.tool?.poetry?.dependencies||{};r.tool?.poetry&&(i.name=r.tool.poetry.name,i.version=r.tool.poetry.version),i.dependencies=Object.entries(n||{}).reduce((a,[c,u])=>(typeof u=="string"?a[c]=u:typeof u=="object"&&typeof u.version=="string"&&(a[c]=u.version),a),{});let s=r.tool?.scaffoldly?.services&&Array.isArray(r.tool?.scaffoldly?.services)?r.tool.scaffoldly.services:Object.entries(r.tool?.scaffoldly?.services||{}).map(([a,c])=>({...c,name:a})),o={...r.tool?.scaffoldly,packages:[...r.tool?.scaffoldly?.packages||[],...(r["build-system"]?.requires||[]).map(a=>`pip:${a}`)],services:s};return i.scaffoldly=o,i})}};var Ii=require("fs"),h0=require("path");var so=class extends et{async setProject(t){return this.cargoTomlFile.then(i=>{if(!i)return;let r=Ai((0,Ii.readFileSync)(i,"utf-8"));r.package&&(r.package&&(r.package.name=t),(0,Ii.writeFileSync)(i,on(r)))})}get cargoTomlFile(){return this.workdir.then(t=>(0,h0.join)(t,"Cargo.toml")).then(t=>{if((0,Ii.existsSync)(t))return t})}get rustProject(){return this.cargoTomlFile.then(t=>t?{cargoToml:Ai((0,Ii.readFileSync)(t,"utf-8"))}:void 0)}get projectJson(){return Promise.all([this.rustProject]).then(([t])=>{let i={type:"rust"};if(!t)return;let{cargoToml:r}=t;return i.name=r.package?.name,i.version=r.package?.version,i.dependencies=Object.entries(r.dependencies||{}).reduce((n,[s,o])=>(typeof o=="string"?n[s]=o:typeof o=="object"&&typeof o.version=="string"&&(n[s]=o.version),n),{}),i.scaffoldly=r.package?.metadata?.scaffoldly,i})}};var P0=se(C0());var ao=require("fs"),oo=class extends et{async setProject(t){return this.standaloneConfigFile.then(i=>{if(!i)return;let r=JSON.parse((0,ao.readFileSync)(i,"utf8"));r.name=t,(0,ao.writeFileSync)(i,JSON.stringify(r,null,2))})}get projectJson(){return this.standaloneConfig.then(t=>{if(!t)return;let i={type:"standalone"};return i.name=t.name,i.version=t.version,i.scaffoldly=t,i})}};var rl=process.cwd(),tR=async()=>{let{data:e}=await Ji.get("https://raw.githubusercontent.com/scaffoldly/scaffoldly-examples/refs/heads/main/index.yml",{headers:{"Cache-Control":"no-cache, no-store, must-revalidate",Pragma:"no-cache",Expires:"0"}}),t=Rb(e);return Object.entries(t.Frameworks).reduce((r,[n,s])=>(r.push({display:n,downloadUrl:"https://codeload.github.com/scaffoldly",repo:"scaffoldly-examples",color:Aa,variants:Object.entries(s).reduce((o,[a,c])=>(o.push({configFile:c.projectFile,...c,display:a,color:Aa}),o),[])}),r),[])},iR=async e=>{let{data:t}=await Ji.get("https://raw.githubusercontent.com/scaffoldly/scaffoldly-examples/refs/heads/main/.templates/csa/README.md.tpl",{headers:{"Cache-Control":"no-cache, no-store, must-revalidate",Pragma:"no-cache",Expires:"0"}});return P0.default.render(t,e,{async:!0})};function O0(e){return e.map(t=>t.variants&&t.variants.map(i=>i.branch)||[t.repo]).reduce((t,i)=>t.concat(i),[])}function rR(e,t){for(let i of e){let r=i.variants.find(n=>n.branch===t);if(r)return{framework:i,variant:r}}return{}}var nR={_gitignore:".gitignore"},nl="my-app",sR=async(e,t)=>new Promise((i,r)=>{let n={...process.env},s;try{s=R0.default.sync(t[0])}catch{r(new Error(`Unable to locate the \`${t[0]}\` command on this system.`));return}let o=k0.default.spawn(`"${s}"`,t.slice(1),{cwd:e,shell:!0,env:n});o.on("error",a=>{console.error(a),r(a)}),o.on("exit",a=>{if(a!==0){r(new Error(`Command failed with code ${a}`));return}i()}),o.stdin.pipe(process.stdin),o.stdout.pipe(process.stdout),o.stderr.pipe(process.stderr)});function A0(e){return e?.trim().replace(/\/+$/g,"")}function oR(e){let t=Ae.default.readdirSync(e);return t.length===0||t.length===1&&t[0]===".git"}function D0(e){return/^(?:@[a-z\d\-*~][a-z\d\-*._~]*\/)?[a-z\d\-~][a-z\d\-._~]*$/.test(e)}function aR(e){return e.trim().toLowerCase().replace(/\s+/g,"-").replace(/^[._]/,"").replace(/[^a-z\d\-~]+/g,"-")}function cR(e){if(Ae.default.existsSync(e))for(let t of Ae.default.readdirSync(e))t!==".git"&&Ae.default.rmSync(Ue.default.resolve(e,t),{recursive:!0,force:!0})}async function uR(e,t){let{downloadUrl:i,repo:r}=e,n=new URL(`${i}/${r}/zip/refs/heads/${t}`);console.log(""),console.log(`Downloading template from the \`${t}\` branch from \`${r}\`...`),console.log("");try{let s=await Ji({method:"get",url:n.toString(),responseType:"arraybuffer"}),o=Ae.default.mkdtempSync(Ue.default.join(I0.default.tmpdir(),"template-")),a=n.pathname.split("/").pop();if(!a)throw new Error(`Error extracting ZIP file: ${n}`);let c=Ue.default.join(o,a);return Ae.default.writeFileSync(c,s.data),new N0.default(c).extractAllTo(o,!0),Ae.default.unlinkSync(c),Ue.default.join(o,`${r}-${t}`)}catch(s){throw new Error(`Error downloading or extracting ZIP file: ${s}`)}}function F0(e,t){if(Ae.default.statSync(e).isDirectory()){Ae.default.mkdirSync(t,{recursive:!0});for(let r of Ae.default.readdirSync(e)){let n=Ue.default.resolve(e,r),s=Ue.default.resolve(t,r);F0(n,s)}}else Ae.default.copyFileSync(e,t)}function lR(e,t,i){let n=Ae.default.readFileSync(e,"utf-8").split(`
`),s=-1,o=-1;for(let a=0;a<n.length;a++)if(n[a].includes(t))s=a;else if(n[a].includes(i)){o=a;break}s!==-1&&o!==-1&&n.splice(s,o-s+1),Ae.default.writeFileSync(e,n.join(`
`),{encoding:"utf-8"})}var pR=(e,t)=>{switch(e){case"node":return new As(void 0,t);case"go":return new Ps(void 0,t);case"dotnet":return new Zs(void 0,t);case"python":return new no(void 0,t);case"rust":return new so(void 0,t);case"standalone":return new oo(void 0,t);default:return}},dR=async()=>{let e=await tR(),t=(0,L0.default)(process.argv.slice(2).filter(A=>A.toLowerCase()!=="create"&&A.toLowerCase()!=="app"),{string:["_"]}),i=A0(t._[0]),r=t.template||t.t,n=i||nl,s=()=>n==="."?Ue.default.basename(Ue.default.resolve()):n,o;sl.default.override({overwrite:t.overwrite});try{o=await(0,sl.default)([{type:i?null:"text",name:"projectName",message:qi("Project name:"),initial:nl,onState:A=>{n=A0(A.value)||nl}},{type:()=>!Ae.default.existsSync(n)||oR(n)?null:"select",name:"overwrite",message:()=>(n==="."?"Current directory":`Target directory "${n}"`)+" is not empty. Please choose how to proceed:",initial:0,choices:[{title:"Remove existing files and continue",value:"yes"},{title:"Cancel operation",value:"no"},{title:"Ignore files and continue",value:"ignore"}]},{type:(A,{overwrite:T})=>{if(T==="no")throw new Error(Oa("\u2716")+" Operation cancelled");return null},name:"overwriteChecker"},{type:()=>D0(s())?null:"text",name:"packageName",message:qi("Package name:"),initial:()=>aR(s()),validate:A=>D0(A)||"Invalid name"},{type:r&&O0(e).includes(r)?null:"select",name:"framework",message:typeof r=="string"&&!O0(e).includes(r)?qi(`"${r}" isn't a valid template. Please choose from below: `):qi("Select a framework:"),initial:0,choices:e.map(A=>{let T=A.color;return{title:T(A.display||A.repo),value:A}})},{type:A=>A&&A.variants?"select":null,name:"variant",message:qi("Select a variant:"),choices:A=>A.variants.map(T=>{let N=T.color;return{title:N(T.display),value:T.branch}})}],{onCancel:()=>{throw new Error(Oa("\u2716")+" Operation cancelled")}})}catch(A){console.log(A.message);return}let{overwrite:a,packageName:c,variant:u}=o,{framework:f,variant:g}=rR(e,u||r);if(!f||!g)throw new Error(`Invalid variant: ${g}`);let{rm:x,type:l,setupCommands:m,devCommand:v,branch:_}=g;if(!l)throw new Error("Invalid or missing project type");if(!_)throw new Error("Invalid or missing variant branch");let E=Ue.default.join(rl,n);a==="yes"?cR(E):Ae.default.existsSync(E)||Ae.default.mkdirSync(E,{recursive:!0}),console.log(`
Creating project in ${E}...`);let w=await uR(f,_),p=(A,T)=>{let N=Ue.default.join(E,nR[A]??A);T?Ae.default.writeFileSync(N,T):F0(Ue.default.join(w,A),N)},d=Ae.default.readdirSync(w);for(let A of d.filter(T=>T!=="README.md"&&T!=="LICENSE"&&T!=="LICENSE.md"&&x&&!x.includes(T)))p(A);let h=pR(l,E);if(!h)throw new Error(`Invalid project type: ${g.type}`);await h.setProject(c||s()),(0,Ae.writeFileSync)(Ue.default.join(E,"README.md"),await iR(g)),lR(Ue.default.join(E,".gitignore"),"### +CSA-OMIT ###","### -CSA-OMIT ###");let b=await h.installCommands;b&&await Promise.all(b.commands.map(A=>{let T=(0,Ue.join)(E,A.workdir||".");return console.log(`Installing dependencies using \`${A.cmd}\` in ${T}...`),sR(T,A.cmd.split(" "))})),console.log(""),console.log(`Initializing git in ${E}...`);let O=hy(E);await O.init({"--initial-branch":"main"}),await O.add("."),await O.commit("Initial commit");let D=Ue.default.relative(rl,E);console.log(""),console.log("\u2728 Done. Begin development with the following commands:"),console.log(""),E!==rl&&console.log(`    cd ${D.includes(" ")?`"${D}"`:D}`),m&&m.forEach(A=>{console.log(`    ${A}`)}),console.log(`    ${v}`),console.log(""),console.log("Push this repository to GitHub:"),console.log(""),console.log("    1) Create a new repository on GitHub"),console.log("    2) Run: `git remote add origin <repository-url>`"),console.log("    3) Run: `git push -u origin main`"),console.log(""),console.log("Scaffoldly can package and deploy your application:"),console.log(""),console.log("    1) Run: `npx scaffoldly deploy`"),console.log(""),console.log("    \u{1F4A1} A `git push` will also package and deploy using GitHub Actions!"),console.log(""),console.log("See our documentation at https://scaffoldly.dev/docs"),console.log(""),console.log("\u{1F680} Happy coding, and thanks for using Scaffoldly!"),console.log("")};0&&(module.exports={run});
/*! Bundled license information:

mime-db/index.js:
  (*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   *)

mime-types/index.js:
  (*!
   * mime-types
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

sax/lib/sax.js:
  (*! http://mths.be/fromcodepoint v0.1.0 by @mathias *)

ejs/lib/ejs.js:
  (**
   * @file Embedded JavaScript templating engine. {@link http://ejs.co}
   * @author Matthew Eernisse <mde@fleegix.org>
   * @author Tiancheng "Timothy" Gu <timothygu99@gmail.com>
   * @project EJS
   * @license {@link http://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0}
   *)

@scure/base/lib/esm/index.js:
  (*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

js-yaml/dist/js-yaml.mjs:
  (*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT *)

smol-toml/dist/error.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/util.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/date.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/primitive.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/extract.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/struct.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/parse.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/stringify.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/index.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vbm9kZV9tb2R1bGVzL2FkbS16aXAvdXRpbC9jb25zdGFudHMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FkbS16aXAvdXRpbC9lcnJvcnMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FkbS16aXAvdXRpbC91dGlscy5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWRtLXppcC91dGlsL2ZhdHRyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hZG0temlwL3V0aWwvZGVjb2Rlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWRtLXppcC91dGlsL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hZG0temlwL2hlYWRlcnMvZW50cnlIZWFkZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FkbS16aXAvaGVhZGVycy9tYWluSGVhZGVyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hZG0temlwL2hlYWRlcnMvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FkbS16aXAvbWV0aG9kcy9kZWZsYXRlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWRtLXppcC9tZXRob2RzL2luZmxhdGVyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hZG0temlwL21ldGhvZHMvemlwY3J5cHRvLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hZG0temlwL21ldGhvZHMvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FkbS16aXAvemlwRW50cnkuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FkbS16aXAvemlwRmlsZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWRtLXppcC9hZG0temlwLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9taW5pbWlzdC9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMva2xldXIvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC91dGlsL2FjdGlvbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L3V0aWwvc3RyaXAuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Npc3RlcmFuc2kvc3JjL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvdXRpbC9jbGVhci5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L3V0aWwvZmlndXJlcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L3V0aWwvc3R5bGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC91dGlsL2xpbmVzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvdXRpbC93cmFwLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvdXRpbC9lbnRyaWVzVG9EaXNwbGF5LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvdXRpbC9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2VsZW1lbnRzL3Byb21wdC5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2VsZW1lbnRzL3RleHQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC9lbGVtZW50cy9zZWxlY3QuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC9lbGVtZW50cy90b2dnbGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC9kYXRlcGFydHMvZGF0ZXBhcnQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC9kYXRlcGFydHMvbWVyaWRpZW0uanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC9kYXRlcGFydHMvZGF5LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvZGF0ZXBhcnRzL2hvdXJzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvZGF0ZXBhcnRzL21pbGxpc2Vjb25kcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2RhdGVwYXJ0cy9taW51dGVzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvZGF0ZXBhcnRzL21vbnRoLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvZGF0ZXBhcnRzL3NlY29uZHMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC9kYXRlcGFydHMveWVhci5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2RhdGVwYXJ0cy9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2VsZW1lbnRzL2RhdGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC9lbGVtZW50cy9udW1iZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC9lbGVtZW50cy9tdWx0aXNlbGVjdC5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2VsZW1lbnRzL2F1dG9jb21wbGV0ZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2VsZW1lbnRzL2F1dG9jb21wbGV0ZU11bHRpc2VsZWN0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvZWxlbWVudHMvY29uZmlybS5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2VsZW1lbnRzL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvcHJvbXB0cy5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi91dGlsL2FjdGlvbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvdXRpbC9zdHJpcC5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvdXRpbC9jbGVhci5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvdXRpbC9maWd1cmVzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi91dGlsL3N0eWxlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi91dGlsL2xpbmVzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi91dGlsL3dyYXAuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL3V0aWwvZW50cmllc1RvRGlzcGxheS5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvdXRpbC9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvZWxlbWVudHMvcHJvbXB0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi9lbGVtZW50cy90ZXh0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi9lbGVtZW50cy9zZWxlY3QuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2VsZW1lbnRzL3RvZ2dsZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvZGF0ZXBhcnRzL2RhdGVwYXJ0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi9kYXRlcGFydHMvbWVyaWRpZW0uanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2RhdGVwYXJ0cy9kYXkuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2RhdGVwYXJ0cy9ob3Vycy5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvZGF0ZXBhcnRzL21pbGxpc2Vjb25kcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvZGF0ZXBhcnRzL21pbnV0ZXMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2RhdGVwYXJ0cy9tb250aC5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvZGF0ZXBhcnRzL3NlY29uZHMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2RhdGVwYXJ0cy95ZWFyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi9kYXRlcGFydHMvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2VsZW1lbnRzL2RhdGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2VsZW1lbnRzL251bWJlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvZWxlbWVudHMvbXVsdGlzZWxlY3QuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2VsZW1lbnRzL2F1dG9jb21wbGV0ZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvZWxlbWVudHMvYXV0b2NvbXBsZXRlTXVsdGlzZWxlY3QuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2VsZW1lbnRzL2NvbmZpcm0uanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2VsZW1lbnRzL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi9wcm9tcHRzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvZGVsYXllZC1zdHJlYW0vbGliL2RlbGF5ZWRfc3RyZWFtLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9jb21iaW5lZC1zdHJlYW0vbGliL2NvbWJpbmVkX3N0cmVhbS5qcyIsICIuLi9ub2RlX21vZHVsZXMvbWltZS1kYi9kYi5qc29uIiwgIi4uL25vZGVfbW9kdWxlcy9taW1lLWRiL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9taW1lLXR5cGVzL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9saWIvZGVmZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FzeW5ja2l0L2xpYi9hc3luYy5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXN5bmNraXQvbGliL2Fib3J0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9saWIvaXRlcmF0ZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXN5bmNraXQvbGliL3N0YXRlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9saWIvdGVybWluYXRvci5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXN5bmNraXQvcGFyYWxsZWwuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FzeW5ja2l0L3NlcmlhbE9yZGVyZWQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FzeW5ja2l0L3NlcmlhbC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXN5bmNraXQvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Zvcm0tZGF0YS9saWIvcG9wdWxhdGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Zvcm0tZGF0YS9saWIvZm9ybV9kYXRhLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm94eS1mcm9tLWVudi9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9jb21tb24uanMiLCAiLi4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9oYXMtZmxhZy9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvc3VwcG9ydHMtY29sb3IvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9ub2RlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL2ZvbGxvdy1yZWRpcmVjdHMvZGVidWcuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2ZvbGxvdy1yZWRpcmVjdHMvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL0Brd3NpdGVzL2ZpbGUtZXhpc3RzL3NyYy9pbmRleC50cyIsICIuLi9ub2RlX21vZHVsZXMvQGt3c2l0ZXMvZmlsZS1leGlzdHMvaW5kZXgudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0Brd3NpdGVzL3Byb21pc2UtZGVmZXJyZWQvc3JjL2luZGV4LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9pc2V4ZS93aW5kb3dzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9pc2V4ZS9tb2RlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9pc2V4ZS9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvd2hpY2gvd2hpY2guanMiLCAiLi4vbm9kZV9tb2R1bGVzL2lnbm9yZS9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sMmpzL2xpYi9kZWZhdWx0cy5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvVXRpbGl0eS5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRE9NSW1wbGVtZW50YXRpb24uanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERPTUVycm9ySGFuZGxlci5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRE9NU3RyaW5nTGlzdC5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRE9NQ29uZmlndXJhdGlvbi5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvTm9kZVR5cGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTEF0dHJpYnV0ZS5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MTmFtZWROb2RlTWFwLmpzIiwgIi4uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxFbGVtZW50LmpzIiwgIi4uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxDaGFyYWN0ZXJEYXRhLmpzIiwgIi4uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxDRGF0YS5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MQ29tbWVudC5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRGVjbGFyYXRpb24uanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERUREF0dExpc3QuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERUREVudGl0eS5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRFRERWxlbWVudC5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRFRETm90YXRpb24uanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERvY1R5cGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFJhdy5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MVGV4dC5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLmpzIiwgIi4uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEdW1teS5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MTm9kZUxpc3QuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL0RvY3VtZW50UG9zaXRpb24uanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTE5vZGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFN0cmluZ2lmaWVyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9Xcml0ZXJTdGF0ZS5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MV3JpdGVyQmFzZS5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MU3RyaW5nV3JpdGVyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEb2N1bWVudC5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRG9jdW1lbnRDQi5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MU3RyZWFtV3JpdGVyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sMmpzL2xpYi9idWlsZGVyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9zYXgvbGliL3NheC5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sMmpzL2xpYi9ib20uanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbDJqcy9saWIvcHJvY2Vzc29ycy5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sMmpzL2xpYi9wYXJzZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbDJqcy9saWIveG1sMmpzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9lanMvbGliL3V0aWxzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9lanMvcGFja2FnZS5qc29uIiwgIi4uL25vZGVfbW9kdWxlcy9lanMvbGliL2Vqcy5qcyIsICIuLi9zcmMvY3JlYXRlLWFwcC50cyIsICIuLi9ub2RlX21vZHVsZXMva29sb3Jpc3Qvc3JjL2luZGV4LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zRXJyb3IuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9ub2RlL2NsYXNzZXMvRm9ybURhdGEuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RvRm9ybURhdGEuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vbm9kZS9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL25vZGUvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9jb21tb24vdXRpbHMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9VUkxFbmNvZGVkRm9ybS5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvc0hlYWRlcnMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL2h0dHAuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9lbnYvZGF0YS5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VQcm90b2NvbC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvZnJvbURhdGFVUkkuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL0F4aW9zVHJhbnNmb3JtU3RyZWFtLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90aHJvdHRsZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3BlZWRvbWV0ZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Zvcm1EYXRhVG9TdHJlYW0uanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3JlYWRCbG9iLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9abGliSGVhZGVyVHJhbnNmb3JtU3RyZWFtLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jYWxsYmFja2lmeS5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcHJvZ3Jlc3NFdmVudFJlZHVjZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3Jlc29sdmVDb25maWcuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbXBvc2VTaWduYWxzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90cmFja1N0cmVhbS5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL2ZldGNoLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMvYWRhcHRlcnMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdmFsaWRhdG9yLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL0h0dHBTdGF0dXNDb2RlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvYXJncy9wYXRoc3BlYy50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL2Vycm9ycy9naXQtZXJyb3IudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9lcnJvcnMvZ2l0LXJlc3BvbnNlLWVycm9yLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvZXJyb3JzL3Rhc2stY29uZmlndXJhdGlvbi1lcnJvci50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3V0aWxzL3V0aWwudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi91dGlscy9hcmd1bWVudC1maWx0ZXJzLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdXRpbHMvZXhpdC1jb2Rlcy50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3V0aWxzL2dpdC1vdXRwdXQtc3RyZWFtcy50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3V0aWxzL2xpbmUtcGFyc2VyLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdXRpbHMvc2ltcGxlLWdpdC1vcHRpb25zLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdXRpbHMvdGFzay1vcHRpb25zLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdXRpbHMvdGFzay1wYXJzZXIudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi91dGlscy9pbmRleC50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL2NoZWNrLWlzLXJlcG8udHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9yZXNwb25zZXMvQ2xlYW5TdW1tYXJ5LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdGFza3MvdGFzay50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL2NsZWFuLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcmVzcG9uc2VzL0NvbmZpZ0xpc3QudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrcy9jb25maWcudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrcy9kaWZmLW5hbWUtc3RhdHVzLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdGFza3MvZ3JlcC50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL3Jlc2V0LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvZ2l0LWxvZ2dlci50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3J1bm5lcnMvdGFza3MtcGVuZGluZy1xdWV1ZS50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3J1bm5lcnMvZ2l0LWV4ZWN1dG9yLWNoYWluLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcnVubmVycy9naXQtZXhlY3V0b3IudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrLWNhbGxiYWNrLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdGFza3MvY2hhbmdlLXdvcmtpbmctZGlyZWN0b3J5LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdGFza3MvY2hlY2tvdXQudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrcy9jb3VudC1vYmplY3RzLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcGFyc2Vycy9wYXJzZS1jb21taXQudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrcy9jb21taXQudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrcy9maXJzdC1jb21taXQudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrcy9oYXNoLW9iamVjdC50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Jlc3BvbnNlcy9Jbml0U3VtbWFyeS50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL2luaXQudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9hcmdzL2xvZy1mb3JtYXQudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9yZXNwb25zZXMvRGlmZlN1bW1hcnkudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9wYXJzZXJzL3BhcnNlLWRpZmYtc3VtbWFyeS50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3BhcnNlcnMvcGFyc2UtbGlzdC1sb2ctc3VtbWFyeS50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL2RpZmYudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrcy9sb2cudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9yZXNwb25zZXMvTWVyZ2VTdW1tYXJ5LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcmVzcG9uc2VzL1B1bGxTdW1tYXJ5LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcGFyc2Vycy9wYXJzZS1yZW1vdGUtb2JqZWN0cy50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3BhcnNlcnMvcGFyc2UtcmVtb3RlLW1lc3NhZ2VzLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcGFyc2Vycy9wYXJzZS1wdWxsLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcGFyc2Vycy9wYXJzZS1tZXJnZS50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL21lcmdlLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcGFyc2Vycy9wYXJzZS1wdXNoLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdGFza3MvcHVzaC50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL3Nob3cudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9yZXNwb25zZXMvRmlsZVN0YXR1c1N1bW1hcnkudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9yZXNwb25zZXMvU3RhdHVzU3VtbWFyeS50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL3N0YXR1cy50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL3ZlcnNpb24udHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9zaW1wbGUtZ2l0LWFwaS50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3J1bm5lcnMvc2NoZWR1bGVyLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdGFza3MvYXBwbHktcGF0Y2gudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9yZXNwb25zZXMvQnJhbmNoRGVsZXRlU3VtbWFyeS50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3BhcnNlcnMvcGFyc2UtYnJhbmNoLWRlbGV0ZS50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Jlc3BvbnNlcy9CcmFuY2hTdW1tYXJ5LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcGFyc2Vycy9wYXJzZS1icmFuY2gudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrcy9icmFuY2gudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9yZXNwb25zZXMvQ2hlY2tJZ25vcmUudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrcy9jaGVjay1pZ25vcmUudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrcy9jbG9uZS50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3BhcnNlcnMvcGFyc2UtZmV0Y2gudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrcy9mZXRjaC50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3BhcnNlcnMvcGFyc2UtbW92ZS50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL21vdmUudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrcy9wdWxsLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcmVzcG9uc2VzL0dldFJlbW90ZVN1bW1hcnkudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrcy9yZW1vdGUudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrcy9zdGFzaC1saXN0LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdGFza3Mvc3ViLW1vZHVsZS50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Jlc3BvbnNlcy9UYWdMaXN0LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdGFza3MvdGFnLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9naXQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9hcGkudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9lcnJvcnMvZ2l0LWNvbnN0cnVjdC1lcnJvci50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL2Vycm9ycy9naXQtcGx1Z2luLWVycm9yLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcGx1Z2lucy9hYm9ydC1wbHVnaW4udHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9wbHVnaW5zL2Jsb2NrLXVuc2FmZS1vcGVyYXRpb25zLXBsdWdpbi50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3BsdWdpbnMvY29tbWFuZC1jb25maWctcHJlZml4aW5nLXBsdWdpbi50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3BsdWdpbnMvY29tcGxldGlvbi1kZXRlY3Rpb24ucGx1Z2luLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcGx1Z2lucy9jdXN0b20tYmluYXJ5LnBsdWdpbi50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3BsdWdpbnMvZXJyb3ItZGV0ZWN0aW9uLnBsdWdpbi50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3BsdWdpbnMvcGx1Z2luLXN0b3JlLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcGx1Z2lucy9wcm9ncmVzcy1tb25pdG9yLXBsdWdpbi50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3BsdWdpbnMvc3Bhd24tb3B0aW9ucy1wbHVnaW4udHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9wbHVnaW5zL3RpbW91dC1wbHVnaW4udHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9wbHVnaW5zL3N1ZmZpeC1wYXRocy5wbHVnaW4udHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9naXQtZmFjdG9yeS50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3J1bm5lcnMvcHJvbWlzZS13cmFwcGVkLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9lc20ubWpzIiwgIi4uL3NyYy9jb25maWcvcHJvamVjdHMvbm9kZS50cyIsICIuLi9zcmMvY29uZmlnL3Byb2plY3RzL2luZGV4LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9Ac2N1cmUvYmFzZS9pbmRleC50cyIsICIuLi9zcmMvY29uZmlnL2luZGV4LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9qcy15YW1sL2Rpc3QvanMteWFtbC5tanMiLCAiLi4vc3JjL2NvbmZpZy9wcm9qZWN0cy9nb2xhbmcudHMiLCAiLi4vc3JjL2NvbmZpZy9wcm9qZWN0cy9kb3RuZXQudHMiLCAiLi4vc3JjL2NvbmZpZy9wcm9qZWN0cy9weXRob24udHMiLCAiLi4vbm9kZV9tb2R1bGVzL3Ntb2wtdG9tbC9kaXN0L2Vycm9yLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9zbW9sLXRvbWwvZGlzdC91dGlsLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9zbW9sLXRvbWwvZGlzdC9kYXRlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9zbW9sLXRvbWwvZGlzdC9wcmltaXRpdmUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Ntb2wtdG9tbC9kaXN0L2V4dHJhY3QuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Ntb2wtdG9tbC9kaXN0L3N0cnVjdC5qcyIsICIuLi9ub2RlX21vZHVsZXMvc21vbC10b21sL2Rpc3QvcGFyc2UuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Ntb2wtdG9tbC9kaXN0L3N0cmluZ2lmeS5qcyIsICIuLi9zcmMvY29uZmlnL3Byb2plY3RzL3J1c3QudHMiLCAiLi4vc3JjL2NvbmZpZy9wcm9qZWN0cy9zdGFuZGFsb25lLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvKiBUaGUgbG9jYWwgZmlsZSBoZWFkZXIgKi9cbiAgICBMT0NIRFIgICAgICAgICAgIDogMzAsIC8vIExPQyBoZWFkZXIgc2l6ZVxuICAgIExPQ1NJRyAgICAgICAgICAgOiAweDA0MDM0YjUwLCAvLyBcIlBLXFwwMDNcXDAwNFwiXG4gICAgTE9DVkVSICAgICAgICAgICA6IDQsXHQvLyB2ZXJzaW9uIG5lZWRlZCB0byBleHRyYWN0XG4gICAgTE9DRkxHICAgICAgICAgICA6IDYsIC8vIGdlbmVyYWwgcHVycG9zZSBiaXQgZmxhZ1xuICAgIExPQ0hPVyAgICAgICAgICAgOiA4LCAvLyBjb21wcmVzc2lvbiBtZXRob2RcbiAgICBMT0NUSU0gICAgICAgICAgIDogMTAsIC8vIG1vZGlmaWNhdGlvbiB0aW1lICgyIGJ5dGVzIHRpbWUsIDIgYnl0ZXMgZGF0ZSlcbiAgICBMT0NDUkMgICAgICAgICAgIDogMTQsIC8vIHVuY29tcHJlc3NlZCBmaWxlIGNyYy0zMiB2YWx1ZVxuICAgIExPQ1NJWiAgICAgICAgICAgOiAxOCwgLy8gY29tcHJlc3NlZCBzaXplXG4gICAgTE9DTEVOICAgICAgICAgICA6IDIyLCAvLyB1bmNvbXByZXNzZWQgc2l6ZVxuICAgIExPQ05BTSAgICAgICAgICAgOiAyNiwgLy8gZmlsZW5hbWUgbGVuZ3RoXG4gICAgTE9DRVhUICAgICAgICAgICA6IDI4LCAvLyBleHRyYSBmaWVsZCBsZW5ndGhcblxuICAgIC8qIFRoZSBEYXRhIGRlc2NyaXB0b3IgKi9cbiAgICBFWFRTSUcgICAgICAgICAgIDogMHgwODA3NGI1MCwgLy8gXCJQS1xcMDA3XFwwMDhcIlxuICAgIEVYVEhEUiAgICAgICAgICAgOiAxNiwgLy8gRVhUIGhlYWRlciBzaXplXG4gICAgRVhUQ1JDICAgICAgICAgICA6IDQsIC8vIHVuY29tcHJlc3NlZCBmaWxlIGNyYy0zMiB2YWx1ZVxuICAgIEVYVFNJWiAgICAgICAgICAgOiA4LCAvLyBjb21wcmVzc2VkIHNpemVcbiAgICBFWFRMRU4gICAgICAgICAgIDogMTIsIC8vIHVuY29tcHJlc3NlZCBzaXplXG5cbiAgICAvKiBUaGUgY2VudHJhbCBkaXJlY3RvcnkgZmlsZSBoZWFkZXIgKi9cbiAgICBDRU5IRFIgICAgICAgICAgIDogNDYsIC8vIENFTiBoZWFkZXIgc2l6ZVxuICAgIENFTlNJRyAgICAgICAgICAgOiAweDAyMDE0YjUwLCAvLyBcIlBLXFwwMDFcXDAwMlwiXG4gICAgQ0VOVkVNICAgICAgICAgICA6IDQsIC8vIHZlcnNpb24gbWFkZSBieVxuICAgIENFTlZFUiAgICAgICAgICAgOiA2LCAvLyB2ZXJzaW9uIG5lZWRlZCB0byBleHRyYWN0XG4gICAgQ0VORkxHICAgICAgICAgICA6IDgsIC8vIGVuY3J5cHQsIGRlY3J5cHQgZmxhZ3NcbiAgICBDRU5IT1cgICAgICAgICAgIDogMTAsIC8vIGNvbXByZXNzaW9uIG1ldGhvZFxuICAgIENFTlRJTSAgICAgICAgICAgOiAxMiwgLy8gbW9kaWZpY2F0aW9uIHRpbWUgKDIgYnl0ZXMgdGltZSwgMiBieXRlcyBkYXRlKVxuICAgIENFTkNSQyAgICAgICAgICAgOiAxNiwgLy8gdW5jb21wcmVzc2VkIGZpbGUgY3JjLTMyIHZhbHVlXG4gICAgQ0VOU0laICAgICAgICAgICA6IDIwLCAvLyBjb21wcmVzc2VkIHNpemVcbiAgICBDRU5MRU4gICAgICAgICAgIDogMjQsIC8vIHVuY29tcHJlc3NlZCBzaXplXG4gICAgQ0VOTkFNICAgICAgICAgICA6IDI4LCAvLyBmaWxlbmFtZSBsZW5ndGhcbiAgICBDRU5FWFQgICAgICAgICAgIDogMzAsIC8vIGV4dHJhIGZpZWxkIGxlbmd0aFxuICAgIENFTkNPTSAgICAgICAgICAgOiAzMiwgLy8gZmlsZSBjb21tZW50IGxlbmd0aFxuICAgIENFTkRTSyAgICAgICAgICAgOiAzNCwgLy8gdm9sdW1lIG51bWJlciBzdGFydFxuICAgIENFTkFUVCAgICAgICAgICAgOiAzNiwgLy8gaW50ZXJuYWwgZmlsZSBhdHRyaWJ1dGVzXG4gICAgQ0VOQVRYICAgICAgICAgICA6IDM4LCAvLyBleHRlcm5hbCBmaWxlIGF0dHJpYnV0ZXMgKGhvc3Qgc3lzdGVtIGRlcGVuZGVudClcbiAgICBDRU5PRkYgICAgICAgICAgIDogNDIsIC8vIExPQyBoZWFkZXIgb2Zmc2V0XG5cbiAgICAvKiBUaGUgZW50cmllcyBpbiB0aGUgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5ICovXG4gICAgRU5ESERSICAgICAgICAgICA6IDIyLCAvLyBFTkQgaGVhZGVyIHNpemVcbiAgICBFTkRTSUcgICAgICAgICAgIDogMHgwNjA1NGI1MCwgLy8gXCJQS1xcMDA1XFwwMDZcIlxuICAgIEVORFNVQiAgICAgICAgICAgOiA4LCAvLyBudW1iZXIgb2YgZW50cmllcyBvbiB0aGlzIGRpc2tcbiAgICBFTkRUT1QgICAgICAgICAgIDogMTAsIC8vIHRvdGFsIG51bWJlciBvZiBlbnRyaWVzXG4gICAgRU5EU0laICAgICAgICAgICA6IDEyLCAvLyBjZW50cmFsIGRpcmVjdG9yeSBzaXplIGluIGJ5dGVzXG4gICAgRU5ET0ZGICAgICAgICAgICA6IDE2LCAvLyBvZmZzZXQgb2YgZmlyc3QgQ0VOIGhlYWRlclxuICAgIEVORENPTSAgICAgICAgICAgOiAyMCwgLy8gemlwIGZpbGUgY29tbWVudCBsZW5ndGhcblxuICAgIEVORDY0SERSICAgICAgICAgOiAyMCwgLy8gemlwNjQgRU5EIGhlYWRlciBzaXplXG4gICAgRU5ENjRTSUcgICAgICAgICA6IDB4MDcwNjRiNTAsIC8vIHppcDY0IExvY2F0b3Igc2lnbmF0dXJlLCBcIlBLXFwwMDZcXDAwN1wiXG4gICAgRU5ENjRTVEFSVCAgICAgICA6IDQsIC8vIG51bWJlciBvZiB0aGUgZGlzayB3aXRoIHRoZSBzdGFydCBvZiB0aGUgemlwNjRcbiAgICBFTkQ2NE9GRiAgICAgICAgIDogOCwgLy8gcmVsYXRpdmUgb2Zmc2V0IG9mIHRoZSB6aXA2NCBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnlcbiAgICBFTkQ2NE5VTURJU0tTICAgIDogMTYsIC8vIHRvdGFsIG51bWJlciBvZiBkaXNrc1xuXG4gICAgWklQNjRTSUcgICAgICAgICA6IDB4MDYwNjRiNTAsIC8vIHppcDY0IHNpZ25hdHVyZSwgXCJQS1xcMDA2XFwwMDZcIlxuICAgIFpJUDY0SERSICAgICAgICAgOiA1NiwgLy8gemlwNjQgcmVjb3JkIG1pbmltdW0gc2l6ZVxuICAgIFpJUDY0TEVBRCAgICAgICAgOiAxMiwgLy8gbGVhZGluZyBieXRlcyBhdCB0aGUgc3RhcnQgb2YgdGhlIHJlY29yZCwgbm90IGNvdW50ZWQgYnkgdGhlIHZhbHVlIHN0b3JlZCBpbiBaSVA2NFNJWkVcbiAgICBaSVA2NFNJWkUgICAgICAgIDogNCwgLy8gemlwNjQgc2l6ZSBvZiB0aGUgY2VudHJhbCBkaXJlY3RvcnkgcmVjb3JkXG4gICAgWklQNjRWRU0gICAgICAgICA6IDEyLCAvLyB6aXA2NCB2ZXJzaW9uIG1hZGUgYnlcbiAgICBaSVA2NFZFUiAgICAgICAgIDogMTQsIC8vIHppcDY0IHZlcnNpb24gbmVlZGVkIHRvIGV4dHJhY3RcbiAgICBaSVA2NERTSyAgICAgICAgIDogMTYsIC8vIHppcDY0IG51bWJlciBvZiB0aGlzIGRpc2tcbiAgICBaSVA2NERTS0RJUiAgICAgIDogMjAsIC8vIG51bWJlciBvZiB0aGUgZGlzayB3aXRoIHRoZSBzdGFydCBvZiB0aGUgcmVjb3JkIGRpcmVjdG9yeVxuICAgIFpJUDY0U1VCICAgICAgICAgOiAyNCwgLy8gbnVtYmVyIG9mIGVudHJpZXMgb24gdGhpcyBkaXNrXG4gICAgWklQNjRUT1QgICAgICAgICA6IDMyLCAvLyB0b3RhbCBudW1iZXIgb2YgZW50cmllc1xuICAgIFpJUDY0U0laQiAgICAgICAgOiA0MCwgLy8gemlwNjQgY2VudHJhbCBkaXJlY3Rvcnkgc2l6ZSBpbiBieXRlc1xuICAgIFpJUDY0T0ZGICAgICAgICAgOiA0OCwgLy8gb2Zmc2V0IG9mIHN0YXJ0IG9mIGNlbnRyYWwgZGlyZWN0b3J5IHdpdGggcmVzcGVjdCB0byB0aGUgc3RhcnRpbmcgZGlzayBudW1iZXJcbiAgICBaSVA2NEVYVFJBICAgICAgIDogNTYsIC8vIGV4dGVuc2libGUgZGF0YSBzZWN0b3JcblxuICAgIC8qIENvbXByZXNzaW9uIG1ldGhvZHMgKi9cbiAgICBTVE9SRUQgICAgICAgICAgIDogMCwgLy8gbm8gY29tcHJlc3Npb25cbiAgICBTSFJVTksgICAgICAgICAgIDogMSwgLy8gc2hydW5rXG4gICAgUkVEVUNFRDEgICAgICAgICA6IDIsIC8vIHJlZHVjZWQgd2l0aCBjb21wcmVzc2lvbiBmYWN0b3IgMVxuICAgIFJFRFVDRUQyICAgICAgICAgOiAzLCAvLyByZWR1Y2VkIHdpdGggY29tcHJlc3Npb24gZmFjdG9yIDJcbiAgICBSRURVQ0VEMyAgICAgICAgIDogNCwgLy8gcmVkdWNlZCB3aXRoIGNvbXByZXNzaW9uIGZhY3RvciAzXG4gICAgUkVEVUNFRDQgICAgICAgICA6IDUsIC8vIHJlZHVjZWQgd2l0aCBjb21wcmVzc2lvbiBmYWN0b3IgNFxuICAgIElNUExPREVEICAgICAgICAgOiA2LCAvLyBpbXBsb2RlZFxuICAgIC8vIDcgcmVzZXJ2ZWQgZm9yIFRva2VuaXppbmcgY29tcHJlc3Npb24gYWxnb3JpdGhtXG4gICAgREVGTEFURUQgICAgICAgICA6IDgsIC8vIGRlZmxhdGVkXG4gICAgRU5IQU5DRURfREVGTEFURUQ6IDksIC8vIGVuaGFuY2VkIGRlZmxhdGVkXG4gICAgUEtXQVJFICAgICAgICAgICA6IDEwLC8vIFBLV2FyZSBEQ0wgaW1wbG9kZWRcbiAgICAvLyAxMSByZXNlcnZlZCBieSBQS1dBUkVcbiAgICBCWklQMiAgICAgICAgICAgIDogMTIsIC8vICBjb21wcmVzc2VkIHVzaW5nIEJaSVAyXG4gICAgLy8gMTMgcmVzZXJ2ZWQgYnkgUEtXQVJFXG4gICAgTFpNQSAgICAgICAgICAgICA6IDE0LCAvLyBMWk1BXG4gICAgLy8gMTUtMTcgcmVzZXJ2ZWQgYnkgUEtXQVJFXG4gICAgSUJNX1RFUlNFICAgICAgICA6IDE4LCAvLyBjb21wcmVzc2VkIHVzaW5nIElCTSBURVJTRVxuICAgIElCTV9MWjc3ICAgICAgICAgOiAxOSwgLy8gSUJNIExaNzcgelxuICAgIEFFU19FTkNSWVBUICAgICAgOiA5OSwgLy8gV2luWklQIEFFUyBlbmNyeXB0aW9uIG1ldGhvZFxuXG4gICAgLyogR2VuZXJhbCBwdXJwb3NlIGJpdCBmbGFnICovXG4gICAgLy8gdmFsdWVzIGNhbiBvYnRhaW5lZCB3aXRoIGV4cHJlc3Npb24gMioqYml0bnJcbiAgICBGTEdfRU5DICAgICAgICAgIDogMSwgICAgLy8gQml0IDA6IGVuY3J5cHRlZCBmaWxlXG4gICAgRkxHX0NPTVAxICAgICAgICA6IDIsICAgIC8vIEJpdCAxLCBjb21wcmVzc2lvbiBvcHRpb25cbiAgICBGTEdfQ09NUDIgICAgICAgIDogNCwgICAgLy8gQml0IDIsIGNvbXByZXNzaW9uIG9wdGlvblxuICAgIEZMR19ERVNDICAgICAgICAgOiA4LCAgICAvLyBCaXQgMywgZGF0YSBkZXNjcmlwdG9yXG4gICAgRkxHX0VOSCAgICAgICAgICA6IDE2LCAgIC8vIEJpdCA0LCBlbmhhbmNlZCBkZWZsYXRpbmdcbiAgICBGTEdfUEFUQ0ggICAgICAgIDogMzIsICAgLy8gQml0IDUsIGluZGljYXRlcyB0aGF0IHRoZSBmaWxlIGlzIGNvbXByZXNzZWQgcGF0Y2hlZCBkYXRhLlxuICAgIEZMR19TVFIgICAgICAgICAgOiA2NCwgICAvLyBCaXQgNiwgc3Ryb25nIGVuY3J5cHRpb24gKHBhdGVudGVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCaXRzIDctMTA6IEN1cnJlbnRseSB1bnVzZWQuXG4gICAgRkxHX0VGUyAgICAgICAgICA6IDIwNDgsIC8vIEJpdCAxMTogTGFuZ3VhZ2UgZW5jb2RpbmcgZmxhZyAoRUZTKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCaXQgMTI6IFJlc2VydmVkIGJ5IFBLV0FSRSBmb3IgZW5oYW5jZWQgY29tcHJlc3Npb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJpdCAxMzogZW5jcnlwdGVkIHRoZSBDZW50cmFsIERpcmVjdG9yeSAocGF0ZW50ZWQpLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCaXRzIDE0LTE1OiBSZXNlcnZlZCBieSBQS1dBUkUuXG4gICAgRkxHX01TSyAgICAgICAgICA6IDQwOTYsIC8vIG1hc2sgaGVhZGVyIHZhbHVlc1xuXG4gICAgLyogTG9hZCB0eXBlICovXG4gICAgRklMRSAgICAgICAgICAgICA6IDIsXG4gICAgQlVGRkVSICAgICAgICAgICA6IDEsXG4gICAgTk9ORSAgICAgICAgICAgICA6IDAsXG5cbiAgICAvKiA0LjUgRXh0ZW5zaWJsZSBkYXRhIGZpZWxkcyAqL1xuICAgIEVGX0lEICAgICAgICAgICAgOiAwLFxuICAgIEVGX1NJWkUgICAgICAgICAgOiAyLFxuXG4gICAgLyogSGVhZGVyIElEcyAqL1xuICAgIElEX1pJUDY0ICAgICAgICAgOiAweDAwMDEsXG4gICAgSURfQVZJTkZPICAgICAgICA6IDB4MDAwNyxcbiAgICBJRF9QRlMgICAgICAgICAgIDogMHgwMDA4LFxuICAgIElEX09TMiAgICAgICAgICAgOiAweDAwMDksXG4gICAgSURfTlRGUyAgICAgICAgICA6IDB4MDAwYSxcbiAgICBJRF9PUEVOVk1TICAgICAgIDogMHgwMDBjLFxuICAgIElEX1VOSVggICAgICAgICAgOiAweDAwMGQsXG4gICAgSURfRk9SSyAgICAgICAgICA6IDB4MDAwZSxcbiAgICBJRF9QQVRDSCAgICAgICAgIDogMHgwMDBmLFxuICAgIElEX1g1MDlfUEtDUzcgICAgOiAweDAwMTQsXG4gICAgSURfWDUwOV9DRVJUSURfRiA6IDB4MDAxNSxcbiAgICBJRF9YNTA5X0NFUlRJRF9DIDogMHgwMDE2LFxuICAgIElEX1NUUk9OR0VOQyAgICAgOiAweDAwMTcsXG4gICAgSURfUkVDT1JEX01HVCAgICA6IDB4MDAxOCxcbiAgICBJRF9YNTA5X1BLQ1M3X1JMIDogMHgwMDE5LFxuICAgIElEX0lCTTEgICAgICAgICAgOiAweDAwNjUsXG4gICAgSURfSUJNMiAgICAgICAgICA6IDB4MDA2NixcbiAgICBJRF9QT1NaSVAgICAgICAgIDogMHg0NjkwLFxuXG4gICAgRUZfWklQNjRfT1JfMzIgICA6IDB4ZmZmZmZmZmYsXG4gICAgRUZfWklQNjRfT1JfMTYgICA6IDB4ZmZmZixcbiAgICBFRl9aSVA2NF9TVU5DT01QIDogMCxcbiAgICBFRl9aSVA2NF9TQ09NUCAgIDogOCxcbiAgICBFRl9aSVA2NF9SSE8gICAgIDogMTYsXG4gICAgRUZfWklQNjRfRFNOICAgICA6IDI0XG59O1xuIiwgImNvbnN0IGVycm9ycyA9IHtcbiAgICAvKiBIZWFkZXIgZXJyb3IgbWVzc2FnZXMgKi9cbiAgICBJTlZBTElEX0xPQzogXCJJbnZhbGlkIExPQyBoZWFkZXIgKGJhZCBzaWduYXR1cmUpXCIsXG4gICAgSU5WQUxJRF9DRU46IFwiSW52YWxpZCBDRU4gaGVhZGVyIChiYWQgc2lnbmF0dXJlKVwiLFxuICAgIElOVkFMSURfRU5EOiBcIkludmFsaWQgRU5EIGhlYWRlciAoYmFkIHNpZ25hdHVyZSlcIixcblxuICAgIC8qIERlc2NyaXB0b3IgKi9cbiAgICBERVNDUklQVE9SX05PVF9FWElTVDogXCJObyBkZXNjcmlwdG9yIHByZXNlbnRcIixcbiAgICBERVNDUklQVE9SX1VOS05PV046IFwiVW5rbm93biBkZXNjcmlwdG9yIGZvcm1hdFwiLFxuICAgIERFU0NSSVBUT1JfRkFVTFRZOiBcIkRlc2NyaXB0b3IgZGF0YSBpcyBtYWxmb3JtZWRcIixcblxuICAgIC8qIFppcEVudHJ5IGVycm9yIG1lc3NhZ2VzKi9cbiAgICBOT19EQVRBOiBcIk5vdGhpbmcgdG8gZGVjb21wcmVzc1wiLFxuICAgIEJBRF9DUkM6IFwiQ1JDMzIgY2hlY2tzdW0gZmFpbGVkIHswfVwiLFxuICAgIEZJTEVfSU5fVEhFX1dBWTogXCJUaGVyZSBpcyBhIGZpbGUgaW4gdGhlIHdheTogezB9XCIsXG4gICAgVU5LTk9XTl9NRVRIT0Q6IFwiSW52YWxpZC91bnN1cHBvcnRlZCBjb21wcmVzc2lvbiBtZXRob2RcIixcblxuICAgIC8qIEluZmxhdGVyIGVycm9yIG1lc3NhZ2VzICovXG4gICAgQVZBSUxfREFUQTogXCJpbmZsYXRlOjpBdmFpbGFibGUgaW5mbGF0ZSBkYXRhIGRpZCBub3QgdGVybWluYXRlXCIsXG4gICAgSU5WQUxJRF9ESVNUQU5DRTogXCJpbmZsYXRlOjpJbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIG9yIGRpc3RhbmNlIGNvZGUgaW4gZml4ZWQgb3IgZHluYW1pYyBibG9ja1wiLFxuICAgIFRPX01BTllfQ09ERVM6IFwiaW5mbGF0ZTo6RHluYW1pYyBibG9jayBjb2RlIGRlc2NyaXB0aW9uOiB0b28gbWFueSBsZW5ndGggb3IgZGlzdGFuY2UgY29kZXNcIixcbiAgICBJTlZBTElEX1JFUEVBVF9MRU46IFwiaW5mbGF0ZTo6RHluYW1pYyBibG9jayBjb2RlIGRlc2NyaXB0aW9uOiByZXBlYXQgbW9yZSB0aGFuIHNwZWNpZmllZCBsZW5ndGhzXCIsXG4gICAgSU5WQUxJRF9SRVBFQVRfRklSU1Q6IFwiaW5mbGF0ZTo6RHluYW1pYyBibG9jayBjb2RlIGRlc2NyaXB0aW9uOiByZXBlYXQgbGVuZ3RocyB3aXRoIG5vIGZpcnN0IGxlbmd0aFwiLFxuICAgIElOQ09NUExFVEVfQ09ERVM6IFwiaW5mbGF0ZTo6RHluYW1pYyBibG9jayBjb2RlIGRlc2NyaXB0aW9uOiBjb2RlIGxlbmd0aHMgY29kZXMgaW5jb21wbGV0ZVwiLFxuICAgIElOVkFMSURfRFlOX0RJU1RBTkNFOiBcImluZmxhdGU6OkR5bmFtaWMgYmxvY2sgY29kZSBkZXNjcmlwdGlvbjogaW52YWxpZCBkaXN0YW5jZSBjb2RlIGxlbmd0aHNcIixcbiAgICBJTlZBTElEX0NPREVTX0xFTjogXCJpbmZsYXRlOjpEeW5hbWljIGJsb2NrIGNvZGUgZGVzY3JpcHRpb246IGludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZSBsZW5ndGhzXCIsXG4gICAgSU5WQUxJRF9TVE9SRV9CTE9DSzogXCJpbmZsYXRlOjpTdG9yZWQgYmxvY2sgbGVuZ3RoIGRpZCBub3QgbWF0Y2ggb25lJ3MgY29tcGxlbWVudFwiLFxuICAgIElOVkFMSURfQkxPQ0tfVFlQRTogXCJpbmZsYXRlOjpJbnZhbGlkIGJsb2NrIHR5cGUgKHR5cGUgPT0gMylcIixcblxuICAgIC8qIEFETS1aSVAgZXJyb3IgbWVzc2FnZXMgKi9cbiAgICBDQU5UX0VYVFJBQ1RfRklMRTogXCJDb3VsZCBub3QgZXh0cmFjdCB0aGUgZmlsZVwiLFxuICAgIENBTlRfT1ZFUlJJREU6IFwiVGFyZ2V0IGZpbGUgYWxyZWFkeSBleGlzdHNcIixcbiAgICBESVNLX0VOVFJZX1RPT19MQVJHRTogXCJOdW1iZXIgb2YgZGlzayBlbnRyaWVzIGlzIHRvbyBsYXJnZVwiLFxuICAgIE5PX1pJUDogXCJObyB6aXAgZmlsZSB3YXMgbG9hZGVkXCIsXG4gICAgTk9fRU5UUlk6IFwiRW50cnkgZG9lc24ndCBleGlzdFwiLFxuICAgIERJUkVDVE9SWV9DT05URU5UX0VSUk9SOiBcIkEgZGlyZWN0b3J5IGNhbm5vdCBoYXZlIGNvbnRlbnRcIixcbiAgICBGSUxFX05PVF9GT1VORDogJ0ZpbGUgbm90IGZvdW5kOiBcInswfVwiJyxcbiAgICBOT1RfSU1QTEVNRU5URUQ6IFwiTm90IGltcGxlbWVudGVkXCIsXG4gICAgSU5WQUxJRF9GSUxFTkFNRTogXCJJbnZhbGlkIGZpbGVuYW1lXCIsXG4gICAgSU5WQUxJRF9GT1JNQVQ6IFwiSW52YWxpZCBvciB1bnN1cHBvcnRlZCB6aXAgZm9ybWF0LiBObyBFTkQgaGVhZGVyIGZvdW5kXCIsXG4gICAgSU5WQUxJRF9QQVNTX1BBUkFNOiBcIkluY29tcGF0aWJsZSBwYXNzd29yZCBwYXJhbWV0ZXJcIixcbiAgICBXUk9OR19QQVNTV09SRDogXCJXcm9uZyBQYXNzd29yZFwiLFxuXG4gICAgLyogQURNLVpJUCAqL1xuICAgIENPTU1FTlRfVE9PX0xPTkc6IFwiQ29tbWVudCBpcyB0b28gbG9uZ1wiLCAvLyBDb21tZW50IGNhbiBiZSBtYXggNjU1MzUgYnl0ZXMgbG9uZyAoTk9URTogc29tZSBub24tVVMgY2hhcmFjdGVycyBtYXkgdGFrZSBtb3JlIHNwYWNlKVxuICAgIEVYVFJBX0ZJRUxEX1BBUlNFX0VSUk9SOiBcIkV4dHJhIGZpZWxkIHBhcnNpbmcgZXJyb3JcIlxufTtcblxuLy8gdGVtcGxhdGVcbmZ1bmN0aW9uIEUobWVzc2FnZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICBpZiAoYXJncy5sZW5ndGgpIHsgLy8gQWxsb3cgezB9IC4uIHs5fSBhcmd1bWVudHMgaW4gZXJyb3IgbWVzc2FnZSwgYmFzZWQgb24gYXJndW1lbnQgbnVtYmVyXG4gICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKC9cXHsoXFxkKVxcfS9nLCAoXywgbikgPT4gYXJnc1tuXSB8fCAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdBRE0tWklQOiAnICsgbWVzc2FnZSk7XG4gICAgfTtcbn1cblxuLy8gSW5pdCBlcnJvcnMgd2l0aCB0ZW1wbGF0ZVxuZm9yIChjb25zdCBtc2cgb2YgT2JqZWN0LmtleXMoZXJyb3JzKSkge1xuICAgIGV4cG9ydHNbbXNnXSA9IEUoZXJyb3JzW21zZ10pO1xufVxuIiwgImNvbnN0IGZzeXN0ZW0gPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCBwdGggPSByZXF1aXJlKFwicGF0aFwiKTtcbmNvbnN0IENvbnN0YW50cyA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbmNvbnN0IEVycm9ycyA9IHJlcXVpcmUoXCIuL2Vycm9yc1wiKTtcbmNvbnN0IGlzV2luID0gdHlwZW9mIHByb2Nlc3MgPT09IFwib2JqZWN0XCIgJiYgXCJ3aW4zMlwiID09PSBwcm9jZXNzLnBsYXRmb3JtO1xuXG5jb25zdCBpc19PYmogPSAob2JqKSA9PiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiICYmIG9iaiAhPT0gbnVsbDtcblxuLy8gZ2VuZXJhdGUgQ1JDMzIgbG9va3VwIHRhYmxlXG5jb25zdCBjcmNUYWJsZSA9IG5ldyBVaW50MzJBcnJheSgyNTYpLm1hcCgodCwgYykgPT4ge1xuICAgIGZvciAobGV0IGsgPSAwOyBrIDwgODsgaysrKSB7XG4gICAgICAgIGlmICgoYyAmIDEpICE9PSAwKSB7XG4gICAgICAgICAgICBjID0gMHhlZGI4ODMyMCBeIChjID4+PiAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGMgPj4+PSAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjID4+PiAwO1xufSk7XG5cbi8vIFVUSUxTIGZ1bmN0aW9uc1xuXG5mdW5jdGlvbiBVdGlscyhvcHRzKSB7XG4gICAgdGhpcy5zZXAgPSBwdGguc2VwO1xuICAgIHRoaXMuZnMgPSBmc3lzdGVtO1xuXG4gICAgaWYgKGlzX09iaihvcHRzKSkge1xuICAgICAgICAvLyBjdXN0b20gZmlsZXN5c3RlbVxuICAgICAgICBpZiAoaXNfT2JqKG9wdHMuZnMpICYmIHR5cGVvZiBvcHRzLmZzLnN0YXRTeW5jID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRoaXMuZnMgPSBvcHRzLmZzO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFV0aWxzO1xuXG4vLyBJTlNUQU5USUFCTEUgZnVuY3Rpb25zXG5cblV0aWxzLnByb3RvdHlwZS5tYWtlRGlyID0gZnVuY3Rpb24gKC8qU3RyaW5nKi8gZm9sZGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBTeW5jIC0gbWFrZSBkaXJlY3RvcmllcyB0cmVlXG4gICAgZnVuY3Rpb24gbWtkaXJTeW5jKC8qU3RyaW5nKi8gZnBhdGgpIHtcbiAgICAgICAgbGV0IHJlc29sdmVkUGF0aCA9IGZwYXRoLnNwbGl0KHNlbGYuc2VwKVswXTtcbiAgICAgICAgZnBhdGguc3BsaXQoc2VsZi5zZXApLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIGlmICghbmFtZSB8fCBuYW1lLnN1YnN0cigtMSwgMSkgPT09IFwiOlwiKSByZXR1cm47XG4gICAgICAgICAgICByZXNvbHZlZFBhdGggKz0gc2VsZi5zZXAgKyBuYW1lO1xuICAgICAgICAgICAgdmFyIHN0YXQ7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHN0YXQgPSBzZWxmLmZzLnN0YXRTeW5jKHJlc29sdmVkUGF0aCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5mcy5ta2RpclN5bmMocmVzb2x2ZWRQYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGF0ICYmIHN0YXQuaXNGaWxlKCkpIHRocm93IEVycm9ycy5GSUxFX0lOX1RIRV9XQVkoYFwiJHtyZXNvbHZlZFBhdGh9XCJgKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbWtkaXJTeW5jKGZvbGRlcik7XG59O1xuXG5VdGlscy5wcm90b3R5cGUud3JpdGVGaWxlVG8gPSBmdW5jdGlvbiAoLypTdHJpbmcqLyBwYXRoLCAvKkJ1ZmZlciovIGNvbnRlbnQsIC8qQm9vbGVhbiovIG92ZXJ3cml0ZSwgLypOdW1iZXIqLyBhdHRyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHNlbGYuZnMuZXhpc3RzU3luYyhwYXRoKSkge1xuICAgICAgICBpZiAoIW92ZXJ3cml0ZSkgcmV0dXJuIGZhbHNlOyAvLyBjYW5ub3Qgb3ZlcndyaXRlXG5cbiAgICAgICAgdmFyIHN0YXQgPSBzZWxmLmZzLnN0YXRTeW5jKHBhdGgpO1xuICAgICAgICBpZiAoc3RhdC5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGZvbGRlciA9IHB0aC5kaXJuYW1lKHBhdGgpO1xuICAgIGlmICghc2VsZi5mcy5leGlzdHNTeW5jKGZvbGRlcikpIHtcbiAgICAgICAgc2VsZi5tYWtlRGlyKGZvbGRlcik7XG4gICAgfVxuXG4gICAgdmFyIGZkO1xuICAgIHRyeSB7XG4gICAgICAgIGZkID0gc2VsZi5mcy5vcGVuU3luYyhwYXRoLCBcIndcIiwgMG82NjYpOyAvLyAwNjY2XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBzZWxmLmZzLmNobW9kU3luYyhwYXRoLCAwbzY2Nik7XG4gICAgICAgIGZkID0gc2VsZi5mcy5vcGVuU3luYyhwYXRoLCBcIndcIiwgMG82NjYpO1xuICAgIH1cbiAgICBpZiAoZmQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNlbGYuZnMud3JpdGVTeW5jKGZkLCBjb250ZW50LCAwLCBjb250ZW50Lmxlbmd0aCwgMCk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBzZWxmLmZzLmNsb3NlU3luYyhmZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2VsZi5mcy5jaG1vZFN5bmMocGF0aCwgYXR0ciB8fCAwbzY2Nik7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuXG5VdGlscy5wcm90b3R5cGUud3JpdGVGaWxlVG9Bc3luYyA9IGZ1bmN0aW9uICgvKlN0cmluZyovIHBhdGgsIC8qQnVmZmVyKi8gY29udGVudCwgLypCb29sZWFuKi8gb3ZlcndyaXRlLCAvKk51bWJlciovIGF0dHIsIC8qRnVuY3Rpb24qLyBjYWxsYmFjaykge1xuICAgIGlmICh0eXBlb2YgYXR0ciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gYXR0cjtcbiAgICAgICAgYXR0ciA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIHNlbGYuZnMuZXhpc3RzKHBhdGgsIGZ1bmN0aW9uIChleGlzdCkge1xuICAgICAgICBpZiAoZXhpc3QgJiYgIW92ZXJ3cml0ZSkgcmV0dXJuIGNhbGxiYWNrKGZhbHNlKTtcblxuICAgICAgICBzZWxmLmZzLnN0YXQocGF0aCwgZnVuY3Rpb24gKGVyciwgc3RhdCkge1xuICAgICAgICAgICAgaWYgKGV4aXN0ICYmIHN0YXQuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhmYWxzZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBmb2xkZXIgPSBwdGguZGlybmFtZShwYXRoKTtcbiAgICAgICAgICAgIHNlbGYuZnMuZXhpc3RzKGZvbGRlciwgZnVuY3Rpb24gKGV4aXN0cykge1xuICAgICAgICAgICAgICAgIGlmICghZXhpc3RzKSBzZWxmLm1ha2VEaXIoZm9sZGVyKTtcblxuICAgICAgICAgICAgICAgIHNlbGYuZnMub3BlbihwYXRoLCBcIndcIiwgMG82NjYsIGZ1bmN0aW9uIChlcnIsIGZkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZnMuY2htb2QocGF0aCwgMG82NjYsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmZzLm9wZW4ocGF0aCwgXCJ3XCIsIDBvNjY2LCBmdW5jdGlvbiAoZXJyLCBmZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmZzLndyaXRlKGZkLCBjb250ZW50LCAwLCBjb250ZW50Lmxlbmd0aCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mcy5jbG9zZShmZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZnMuY2htb2QocGF0aCwgYXR0ciB8fCAwbzY2NiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmZzLndyaXRlKGZkLCBjb250ZW50LCAwLCBjb250ZW50Lmxlbmd0aCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZnMuY2xvc2UoZmQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mcy5jaG1vZChwYXRoLCBhdHRyIHx8IDBvNjY2LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZnMuY2htb2QocGF0aCwgYXR0ciB8fCAwbzY2NiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG5cblV0aWxzLnByb3RvdHlwZS5maW5kRmlsZXMgPSBmdW5jdGlvbiAoLypTdHJpbmcqLyBwYXRoKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBmdW5jdGlvbiBmaW5kU3luYygvKlN0cmluZyovIGRpciwgLypSZWdFeHAqLyBwYXR0ZXJuLCAvKkJvb2xlYW4qLyByZWN1cnNpdmUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgcmVjdXJzaXZlID0gcGF0dGVybjtcbiAgICAgICAgICAgIHBhdHRlcm4gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGZpbGVzID0gW107XG4gICAgICAgIHNlbGYuZnMucmVhZGRpclN5bmMoZGlyKS5mb3JFYWNoKGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICAgICAgICBjb25zdCBwYXRoID0gcHRoLmpvaW4oZGlyLCBmaWxlKTtcbiAgICAgICAgICAgIGNvbnN0IHN0YXQgPSBzZWxmLmZzLnN0YXRTeW5jKHBhdGgpO1xuXG4gICAgICAgICAgICBpZiAoIXBhdHRlcm4gfHwgcGF0dGVybi50ZXN0KHBhdGgpKSB7XG4gICAgICAgICAgICAgICAgZmlsZXMucHVzaChwdGgubm9ybWFsaXplKHBhdGgpICsgKHN0YXQuaXNEaXJlY3RvcnkoKSA/IHNlbGYuc2VwIDogXCJcIikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3RhdC5pc0RpcmVjdG9yeSgpICYmIHJlY3Vyc2l2ZSkgZmlsZXMgPSBmaWxlcy5jb25jYXQoZmluZFN5bmMocGF0aCwgcGF0dGVybiwgcmVjdXJzaXZlKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmlsZXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbmRTeW5jKHBhdGgsIHVuZGVmaW5lZCwgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIENhbGxiYWNrIGZvciBzaG93aW5nIGlmIGV2ZXJ5dGhpbmcgd2FzIGRvbmUuXG4gKlxuICogQGNhbGxiYWNrIGZpbGVsaXN0Q2FsbGJhY2tcbiAqIEBwYXJhbSB7RXJyb3J9IGVyciAtIEVycm9yIG9iamVjdFxuICogQHBhcmFtIHtzdHJpbmdbXX0gbGlzdCAtIHdhcyByZXF1ZXN0IGZ1bGx5IGNvbXBsZXRlZFxuICovXG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXJcbiAqIEBwYXJhbSB7ZmlsZWxpc3RDYWxsYmFja30gY2JcbiAqL1xuVXRpbHMucHJvdG90eXBlLmZpbmRGaWxlc0FzeW5jID0gZnVuY3Rpb24gKGRpciwgY2IpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBsZXQgcmVzdWx0cyA9IFtdO1xuICAgIHNlbGYuZnMucmVhZGRpcihkaXIsIGZ1bmN0aW9uIChlcnIsIGxpc3QpIHtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIGNiKGVycik7XG4gICAgICAgIGxldCBsaXN0X2xlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgICAgICBpZiAoIWxpc3RfbGVuZ3RoKSByZXR1cm4gY2IobnVsbCwgcmVzdWx0cyk7XG4gICAgICAgIGxpc3QuZm9yRWFjaChmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICAgICAgZmlsZSA9IHB0aC5qb2luKGRpciwgZmlsZSk7XG4gICAgICAgICAgICBzZWxmLmZzLnN0YXQoZmlsZSwgZnVuY3Rpb24gKGVyciwgc3RhdCkge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChwdGgubm9ybWFsaXplKGZpbGUpICsgKHN0YXQuaXNEaXJlY3RvcnkoKSA/IHNlbGYuc2VwIDogXCJcIikpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdC5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmZpbmRGaWxlc0FzeW5jKGZpbGUsIGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmNvbmNhdChyZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghLS1saXN0X2xlbmd0aCkgY2IobnVsbCwgcmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghLS1saXN0X2xlbmd0aCkgY2IobnVsbCwgcmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuXG5VdGlscy5wcm90b3R5cGUuZ2V0QXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHt9O1xuXG5VdGlscy5wcm90b3R5cGUuc2V0QXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHt9O1xuXG4vLyBTVEFUSUMgZnVuY3Rpb25zXG5cbi8vIGNyYzMyIHNpbmdsZSB1cGRhdGUgKGl0IGlzIHBhcnQgb2YgY3JjMzIpXG5VdGlscy5jcmMzMnVwZGF0ZSA9IGZ1bmN0aW9uIChjcmMsIGJ5dGUpIHtcbiAgICByZXR1cm4gY3JjVGFibGVbKGNyYyBeIGJ5dGUpICYgMHhmZl0gXiAoY3JjID4+PiA4KTtcbn07XG5cblV0aWxzLmNyYzMyID0gZnVuY3Rpb24gKGJ1Zikge1xuICAgIGlmICh0eXBlb2YgYnVmID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGJ1ZiA9IEJ1ZmZlci5mcm9tKGJ1ZiwgXCJ1dGY4XCIpO1xuICAgIH1cblxuICAgIGxldCBsZW4gPSBidWYubGVuZ3RoO1xuICAgIGxldCBjcmMgPSB+MDtcbiAgICBmb3IgKGxldCBvZmYgPSAwOyBvZmYgPCBsZW47ICkgY3JjID0gVXRpbHMuY3JjMzJ1cGRhdGUoY3JjLCBidWZbb2ZmKytdKTtcbiAgICAvLyB4b3IgYW5kIGNhc3QgYXMgdWludDMyIG51bWJlclxuICAgIHJldHVybiB+Y3JjID4+PiAwO1xufTtcblxuVXRpbHMubWV0aG9kVG9TdHJpbmcgPSBmdW5jdGlvbiAoLypOdW1iZXIqLyBtZXRob2QpIHtcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgICBjYXNlIENvbnN0YW50cy5TVE9SRUQ6XG4gICAgICAgICAgICByZXR1cm4gXCJTVE9SRUQgKFwiICsgbWV0aG9kICsgXCIpXCI7XG4gICAgICAgIGNhc2UgQ29uc3RhbnRzLkRFRkxBVEVEOlxuICAgICAgICAgICAgcmV0dXJuIFwiREVGTEFURUQgKFwiICsgbWV0aG9kICsgXCIpXCI7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gXCJVTlNVUFBPUlRFRCAoXCIgKyBtZXRob2QgKyBcIilcIjtcbiAgICB9XG59O1xuXG4vKipcbiAqIHJlbW92ZXMgXCIuLlwiIHN0eWxlIHBhdGggZWxlbWVudHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gZml4YWJsZSBwYXRoXG4gKiBAcmV0dXJucyBzdHJpbmcgLSBmaXhlZCBmaWxlcGF0aFxuICovXG5VdGlscy5jYW5vbmljYWwgPSBmdW5jdGlvbiAoLypzdHJpbmcqLyBwYXRoKSB7XG4gICAgaWYgKCFwYXRoKSByZXR1cm4gXCJcIjtcbiAgICAvLyB0cmljayBub3JtYWxpemUgdGhpbmsgcGF0aCBpcyBhYnNvbHV0ZVxuICAgIGNvbnN0IHNhZmVTdWZmaXggPSBwdGgucG9zaXgubm9ybWFsaXplKFwiL1wiICsgcGF0aC5zcGxpdChcIlxcXFxcIikuam9pbihcIi9cIikpO1xuICAgIHJldHVybiBwdGguam9pbihcIi5cIiwgc2FmZVN1ZmZpeCk7XG59O1xuXG4vKipcbiAqIGZpeCBmaWxlIG5hbWVzIGluIGFjaGl2ZVxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBmaXhhYmxlIHBhdGhcbiAqIEByZXR1cm5zIHN0cmluZyAtIGZpeGVkIGZpbGVwYXRoXG4gKi9cblxuVXRpbHMuemlwbmFtZWZpeCA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgaWYgKCFwYXRoKSByZXR1cm4gXCJcIjtcbiAgICAvLyB0cmljayBub3JtYWxpemUgdGhpbmsgcGF0aCBpcyBhYnNvbHV0ZVxuICAgIGNvbnN0IHNhZmVTdWZmaXggPSBwdGgucG9zaXgubm9ybWFsaXplKFwiL1wiICsgcGF0aC5zcGxpdChcIlxcXFxcIikuam9pbihcIi9cIikpO1xuICAgIHJldHVybiBwdGgucG9zaXguam9pbihcIi5cIiwgc2FmZVN1ZmZpeCk7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuc1xuICovXG5VdGlscy5maW5kTGFzdCA9IGZ1bmN0aW9uIChhcnIsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhcnIgaXMgbm90IGFycmF5XCIpO1xuXG4gICAgY29uc3QgbGVuID0gYXJyLmxlbmd0aCA+Pj4gMDtcbiAgICBmb3IgKGxldCBpID0gbGVuIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKGFycltpXSwgaSwgYXJyKSkge1xuICAgICAgICAgICAgcmV0dXJuIGFycltpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm9pZCAwO1xufTtcblxuLy8gbWFrZSBhYm9sdXRlIHBhdGhzIHRha2luZyBwcmVmaXggYXMgcm9vdCBmb2xkZXJcblV0aWxzLnNhbml0aXplID0gZnVuY3Rpb24gKC8qc3RyaW5nKi8gcHJlZml4LCAvKnN0cmluZyovIG5hbWUpIHtcbiAgICBwcmVmaXggPSBwdGgucmVzb2x2ZShwdGgubm9ybWFsaXplKHByZWZpeCkpO1xuICAgIHZhciBwYXJ0cyA9IG5hbWUuc3BsaXQoXCIvXCIpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gcGFydHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXRoID0gcHRoLm5vcm1hbGl6ZShwdGguam9pbihwcmVmaXgsIHBhcnRzLnNsaWNlKGksIGwpLmpvaW4ocHRoLnNlcCkpKTtcbiAgICAgICAgaWYgKHBhdGguaW5kZXhPZihwcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHRoLm5vcm1hbGl6ZShwdGguam9pbihwcmVmaXgsIHB0aC5iYXNlbmFtZShuYW1lKSkpO1xufTtcblxuLy8gY29udmVydHMgYnVmZmVyLCBVaW50OEFycmF5LCBzdHJpbmcgdHlwZXMgdG8gYnVmZmVyXG5VdGlscy50b0J1ZmZlciA9IGZ1bmN0aW9uIHRvQnVmZmVyKC8qYnVmZmVyLCBVaW50OEFycmF5LCBzdHJpbmcqLyBpbnB1dCwgLyogZnVuY3Rpb24gKi8gZW5jb2Rlcikge1xuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoaW5wdXQpKSB7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9IGVsc2UgaWYgKGlucHV0IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oaW5wdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGV4cGVjdCBzdHJpbmcgYWxsIG90aGVyIHZhbHVlcyBhcmUgaW52YWxpZCBhbmQgcmV0dXJuIGVtcHR5IGJ1ZmZlclxuICAgICAgICByZXR1cm4gdHlwZW9mIGlucHV0ID09PSBcInN0cmluZ1wiID8gZW5jb2RlcihpbnB1dCkgOiBCdWZmZXIuYWxsb2MoMCk7XG4gICAgfVxufTtcblxuVXRpbHMucmVhZEJpZ1VJbnQ2NExFID0gZnVuY3Rpb24gKC8qQnVmZmVyKi8gYnVmZmVyLCAvKmludCovIGluZGV4KSB7XG4gICAgdmFyIHNsaWNlID0gQnVmZmVyLmZyb20oYnVmZmVyLnNsaWNlKGluZGV4LCBpbmRleCArIDgpKTtcbiAgICBzbGljZS5zd2FwNjQoKTtcblxuICAgIHJldHVybiBwYXJzZUludChgMHgke3NsaWNlLnRvU3RyaW5nKFwiaGV4XCIpfWApO1xufTtcblxuVXRpbHMuZnJvbURPUzJEYXRlID0gZnVuY3Rpb24gKHZhbCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSgoKHZhbCA+PiAyNSkgJiAweDdmKSArIDE5ODAsIE1hdGgubWF4KCgodmFsID4+IDIxKSAmIDB4MGYpIC0gMSwgMCksIE1hdGgubWF4KCh2YWwgPj4gMTYpICYgMHgxZiwgMSksICh2YWwgPj4gMTEpICYgMHgxZiwgKHZhbCA+PiA1KSAmIDB4M2YsICh2YWwgJiAweDFmKSA8PCAxKTtcbn07XG5cblV0aWxzLmZyb21EYXRlMkRPUyA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICBsZXQgZGF0ZSA9IDA7XG4gICAgbGV0IHRpbWUgPSAwO1xuICAgIGlmICh2YWwuZ2V0RnVsbFllYXIoKSA+IDE5NzkpIHtcbiAgICAgICAgZGF0ZSA9ICgoKHZhbC5nZXRGdWxsWWVhcigpIC0gMTk4MCkgJiAweDdmKSA8PCA5KSB8ICgodmFsLmdldE1vbnRoKCkgKyAxKSA8PCA1KSB8IHZhbC5nZXREYXRlKCk7XG4gICAgICAgIHRpbWUgPSAodmFsLmdldEhvdXJzKCkgPDwgMTEpIHwgKHZhbC5nZXRNaW51dGVzKCkgPDwgNSkgfCAodmFsLmdldFNlY29uZHMoKSA+PiAxKTtcbiAgICB9XG4gICAgcmV0dXJuIChkYXRlIDw8IDE2KSB8IHRpbWU7XG59O1xuXG5VdGlscy5pc1dpbiA9IGlzV2luOyAvLyBEbyB3ZSBoYXZlIHdpbmRvd3Mgc3lzdGVtXG5VdGlscy5jcmNUYWJsZSA9IGNyY1RhYmxlO1xuIiwgImNvbnN0IHB0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgvKlN0cmluZyovIHBhdGgsIC8qVXRpbHMgb2JqZWN0Ki8geyBmcyB9KSB7XG4gICAgdmFyIF9wYXRoID0gcGF0aCB8fCBcIlwiLFxuICAgICAgICBfb2JqID0gbmV3QXR0cigpLFxuICAgICAgICBfc3RhdCA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBuZXdBdHRyKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGlyZWN0b3J5OiBmYWxzZSxcbiAgICAgICAgICAgIHJlYWRvbmx5OiBmYWxzZSxcbiAgICAgICAgICAgIGhpZGRlbjogZmFsc2UsXG4gICAgICAgICAgICBleGVjdXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIG10aW1lOiAwLFxuICAgICAgICAgICAgYXRpbWU6IDBcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoX3BhdGggJiYgZnMuZXhpc3RzU3luYyhfcGF0aCkpIHtcbiAgICAgICAgX3N0YXQgPSBmcy5zdGF0U3luYyhfcGF0aCk7XG4gICAgICAgIF9vYmouZGlyZWN0b3J5ID0gX3N0YXQuaXNEaXJlY3RvcnkoKTtcbiAgICAgICAgX29iai5tdGltZSA9IF9zdGF0Lm10aW1lO1xuICAgICAgICBfb2JqLmF0aW1lID0gX3N0YXQuYXRpbWU7XG4gICAgICAgIF9vYmouZXhlY3V0YWJsZSA9ICgwbzExMSAmIF9zdGF0Lm1vZGUpICE9PSAwOyAvLyBmaWxlIGlzIGV4ZWN1dGFibGUgd2hvIGV2ZXIgaGFyIHJpZ2h0IG5vdCBqdXN0IG93bmVyXG4gICAgICAgIF9vYmoucmVhZG9ubHkgPSAoMG8yMDAgJiBfc3RhdC5tb2RlKSA9PT0gMDsgLy8gcmVhZG9ubHkgaWYgb3duZXIgaGFzIG5vIHdyaXRlIHJpZ2h0XG4gICAgICAgIF9vYmouaGlkZGVuID0gcHRoLmJhc2VuYW1lKF9wYXRoKVswXSA9PT0gXCIuXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiSW52YWxpZCBwYXRoOiBcIiArIF9wYXRoKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBnZXQgZGlyZWN0b3J5KCkge1xuICAgICAgICAgICAgcmV0dXJuIF9vYmouZGlyZWN0b3J5O1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCByZWFkT25seSgpIHtcbiAgICAgICAgICAgIHJldHVybiBfb2JqLnJlYWRvbmx5O1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBoaWRkZW4oKSB7XG4gICAgICAgICAgICByZXR1cm4gX29iai5oaWRkZW47XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IG10aW1lKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9vYmoubXRpbWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IGF0aW1lKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9vYmouYXRpbWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IGV4ZWN1dGFibGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gX29iai5leGVjdXRhYmxlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRlY29kZUF0dHJpYnV0ZXM6IGZ1bmN0aW9uICgpIHt9LFxuXG4gICAgICAgIGVuY29kZUF0dHJpYnV0ZXM6IGZ1bmN0aW9uICgpIHt9LFxuXG4gICAgICAgIHRvSlNPTjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwYXRoOiBfcGF0aCxcbiAgICAgICAgICAgICAgICBpc0RpcmVjdG9yeTogX29iai5kaXJlY3RvcnksXG4gICAgICAgICAgICAgICAgaXNSZWFkT25seTogX29iai5yZWFkb25seSxcbiAgICAgICAgICAgICAgICBpc0hpZGRlbjogX29iai5oaWRkZW4sXG4gICAgICAgICAgICAgICAgaXNFeGVjdXRhYmxlOiBfb2JqLmV4ZWN1dGFibGUsXG4gICAgICAgICAgICAgICAgbVRpbWU6IF9vYmoubXRpbWUsXG4gICAgICAgICAgICAgICAgYVRpbWU6IF9vYmouYXRpbWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvSlNPTigpLCBudWxsLCBcIlxcdFwiKTtcbiAgICAgICAgfVxuICAgIH07XG59O1xuIiwgIm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGVmczogdHJ1ZSxcbiAgICBlbmNvZGU6IChkYXRhKSA9PiBCdWZmZXIuZnJvbShkYXRhLCBcInV0ZjhcIiksXG4gICAgZGVjb2RlOiAoZGF0YSkgPT4gZGF0YS50b1N0cmluZyhcInV0ZjhcIilcbn07XG4iLCAibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbm1vZHVsZS5leHBvcnRzLkNvbnN0YW50cyA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbm1vZHVsZS5leHBvcnRzLkVycm9ycyA9IHJlcXVpcmUoXCIuL2Vycm9yc1wiKTtcbm1vZHVsZS5leHBvcnRzLkZpbGVBdHRyID0gcmVxdWlyZShcIi4vZmF0dHJcIik7XG5tb2R1bGUuZXhwb3J0cy5kZWNvZGVyID0gcmVxdWlyZShcIi4vZGVjb2RlclwiKTtcbiIsICJ2YXIgVXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbFwiKSxcbiAgICBDb25zdGFudHMgPSBVdGlscy5Db25zdGFudHM7XG5cbi8qIFRoZSBjZW50cmFsIGRpcmVjdG9yeSBmaWxlIGhlYWRlciAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92ZXJNYWRlID0gMjAsIC8vIHYyLjBcbiAgICAgICAgX3ZlcnNpb24gPSAxMCwgLy8gdjEuMFxuICAgICAgICBfZmxhZ3MgPSAwLFxuICAgICAgICBfbWV0aG9kID0gMCxcbiAgICAgICAgX3RpbWUgPSAwLFxuICAgICAgICBfY3JjID0gMCxcbiAgICAgICAgX2NvbXByZXNzZWRTaXplID0gMCxcbiAgICAgICAgX3NpemUgPSAwLFxuICAgICAgICBfZm5hbWVMZW4gPSAwLFxuICAgICAgICBfZXh0cmFMZW4gPSAwLFxuICAgICAgICBfY29tTGVuID0gMCxcbiAgICAgICAgX2Rpc2tTdGFydCA9IDAsXG4gICAgICAgIF9pbmF0dHIgPSAwLFxuICAgICAgICBfYXR0ciA9IDAsXG4gICAgICAgIF9vZmZzZXQgPSAwO1xuXG4gICAgX3Zlck1hZGUgfD0gVXRpbHMuaXNXaW4gPyAweDBhMDAgOiAweDAzMDA7XG5cbiAgICAvLyBTZXQgRUZTIGZsYWcgc2luY2UgZmlsZW5hbWUgYW5kIGNvbW1lbnQgZmllbGRzIGFyZSBhbGwgYnkgZGVmYXVsdCBlbmNvZGVkIHVzaW5nIFVURi04LlxuICAgIC8vIFdpdGhvdXQgaXQgZmlsZSBuYW1lcyBtYXkgYmUgY29ycnVwdGVkIGZvciBvdGhlciBhcHBzIHdoZW4gZmlsZSBuYW1lcyB1c2UgdW5pY29kZSBjaGFyc1xuICAgIF9mbGFncyB8PSBDb25zdGFudHMuRkxHX0VGUztcblxuICAgIGNvbnN0IF9sb2NhbEhlYWRlciA9IHtcbiAgICAgICAgZXh0cmFMZW46IDBcbiAgICB9O1xuXG4gICAgLy8gY2FzdGluZ1xuICAgIGNvbnN0IHVpbnQzMiA9ICh2YWwpID0+IE1hdGgubWF4KDAsIHZhbCkgPj4+IDA7XG4gICAgY29uc3QgdWludDE2ID0gKHZhbCkgPT4gTWF0aC5tYXgoMCwgdmFsKSAmIDB4ZmZmZjtcbiAgICBjb25zdCB1aW50OCA9ICh2YWwpID0+IE1hdGgubWF4KDAsIHZhbCkgJiAweGZmO1xuXG4gICAgX3RpbWUgPSBVdGlscy5mcm9tRGF0ZTJET1MobmV3IERhdGUoKSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBnZXQgbWFkZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdmVyTWFkZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IG1hZGUodmFsKSB7XG4gICAgICAgICAgICBfdmVyTWFkZSA9IHZhbDtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgdmVyc2lvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBfdmVyc2lvbjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IHZlcnNpb24odmFsKSB7XG4gICAgICAgICAgICBfdmVyc2lvbiA9IHZhbDtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgZmxhZ3MoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2ZsYWdzO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgZmxhZ3ModmFsKSB7XG4gICAgICAgICAgICBfZmxhZ3MgPSB2YWw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IGZsYWdzX2VmcygpIHtcbiAgICAgICAgICAgIHJldHVybiAoX2ZsYWdzICYgQ29uc3RhbnRzLkZMR19FRlMpID4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IGZsYWdzX2Vmcyh2YWwpIHtcbiAgICAgICAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgICAgICAgICBfZmxhZ3MgfD0gQ29uc3RhbnRzLkZMR19FRlM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF9mbGFncyAmPSB+Q29uc3RhbnRzLkZMR19FRlM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IGZsYWdzX2Rlc2MoKSB7XG4gICAgICAgICAgICByZXR1cm4gKF9mbGFncyAmIENvbnN0YW50cy5GTEdfREVTQykgPiAwO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgZmxhZ3NfZGVzYyh2YWwpIHtcbiAgICAgICAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgICAgICAgICBfZmxhZ3MgfD0gQ29uc3RhbnRzLkZMR19ERVNDO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfZmxhZ3MgJj0gfkNvbnN0YW50cy5GTEdfREVTQztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgbWV0aG9kKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9tZXRob2Q7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCBtZXRob2QodmFsKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHZhbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgQ29uc3RhbnRzLlNUT1JFRDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52ZXJzaW9uID0gMTA7XG4gICAgICAgICAgICAgICAgY2FzZSBDb25zdGFudHMuREVGTEFURUQ6XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52ZXJzaW9uID0gMjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfbWV0aG9kID0gdmFsO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCB0aW1lKCkge1xuICAgICAgICAgICAgcmV0dXJuIFV0aWxzLmZyb21ET1MyRGF0ZSh0aGlzLnRpbWV2YWwpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgdGltZSh2YWwpIHtcbiAgICAgICAgICAgIHRoaXMudGltZXZhbCA9IFV0aWxzLmZyb21EYXRlMkRPUyh2YWwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCB0aW1ldmFsKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aW1lO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgdGltZXZhbCh2YWwpIHtcbiAgICAgICAgICAgIF90aW1lID0gdWludDMyKHZhbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IHRpbWVIaWdoQnl0ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB1aW50OChfdGltZSA+Pj4gOCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBjcmMoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2NyYztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IGNyYyh2YWwpIHtcbiAgICAgICAgICAgIF9jcmMgPSB1aW50MzIodmFsKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgY29tcHJlc3NlZFNpemUoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2NvbXByZXNzZWRTaXplO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgY29tcHJlc3NlZFNpemUodmFsKSB7XG4gICAgICAgICAgICBfY29tcHJlc3NlZFNpemUgPSB1aW50MzIodmFsKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBfc2l6ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IHNpemUodmFsKSB7XG4gICAgICAgICAgICBfc2l6ZSA9IHVpbnQzMih2YWwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBmaWxlTmFtZUxlbmd0aCgpIHtcbiAgICAgICAgICAgIHJldHVybiBfZm5hbWVMZW47XG4gICAgICAgIH0sXG4gICAgICAgIHNldCBmaWxlTmFtZUxlbmd0aCh2YWwpIHtcbiAgICAgICAgICAgIF9mbmFtZUxlbiA9IHZhbDtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgZXh0cmFMZW5ndGgoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2V4dHJhTGVuO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgZXh0cmFMZW5ndGgodmFsKSB7XG4gICAgICAgICAgICBfZXh0cmFMZW4gPSB2YWw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IGV4dHJhTG9jYWxMZW5ndGgoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2xvY2FsSGVhZGVyLmV4dHJhTGVuO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgZXh0cmFMb2NhbExlbmd0aCh2YWwpIHtcbiAgICAgICAgICAgIF9sb2NhbEhlYWRlci5leHRyYUxlbiA9IHZhbDtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgY29tbWVudExlbmd0aCgpIHtcbiAgICAgICAgICAgIHJldHVybiBfY29tTGVuO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgY29tbWVudExlbmd0aCh2YWwpIHtcbiAgICAgICAgICAgIF9jb21MZW4gPSB2YWw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IGRpc2tOdW1TdGFydCgpIHtcbiAgICAgICAgICAgIHJldHVybiBfZGlza1N0YXJ0O1xuICAgICAgICB9LFxuICAgICAgICBzZXQgZGlza051bVN0YXJ0KHZhbCkge1xuICAgICAgICAgICAgX2Rpc2tTdGFydCA9IHVpbnQzMih2YWwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBpbkF0dHIoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2luYXR0cjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IGluQXR0cih2YWwpIHtcbiAgICAgICAgICAgIF9pbmF0dHIgPSB1aW50MzIodmFsKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgYXR0cigpIHtcbiAgICAgICAgICAgIHJldHVybiBfYXR0cjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IGF0dHIodmFsKSB7XG4gICAgICAgICAgICBfYXR0ciA9IHVpbnQzMih2YWwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIGdldCBVbml4IGZpbGUgcGVybWlzc2lvbnNcbiAgICAgICAgZ2V0IGZpbGVBdHRyKCkge1xuICAgICAgICAgICAgcmV0dXJuIChfYXR0ciB8fCAwKSA+PiAxNiAmIDB4ZmZmO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBvZmZzZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gX29mZnNldDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IG9mZnNldCh2YWwpIHtcbiAgICAgICAgICAgIF9vZmZzZXQgPSB1aW50MzIodmFsKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgZW5jcnlwdGVkKCkge1xuICAgICAgICAgICAgcmV0dXJuIChfZmxhZ3MgJiBDb25zdGFudHMuRkxHX0VOQykgPT09IENvbnN0YW50cy5GTEdfRU5DO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBjZW50cmFsSGVhZGVyU2l6ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBDb25zdGFudHMuQ0VOSERSICsgX2ZuYW1lTGVuICsgX2V4dHJhTGVuICsgX2NvbUxlbjtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgcmVhbERhdGFPZmZzZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gX29mZnNldCArIENvbnN0YW50cy5MT0NIRFIgKyBfbG9jYWxIZWFkZXIuZm5hbWVMZW4gKyBfbG9jYWxIZWFkZXIuZXh0cmFMZW47XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IGxvY2FsSGVhZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9sb2NhbEhlYWRlcjtcbiAgICAgICAgfSxcblxuICAgICAgICBsb2FkTG9jYWxIZWFkZXJGcm9tQmluYXJ5OiBmdW5jdGlvbiAoLypCdWZmZXIqLyBpbnB1dCkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBpbnB1dC5zbGljZShfb2Zmc2V0LCBfb2Zmc2V0ICsgQ29uc3RhbnRzLkxPQ0hEUik7XG4gICAgICAgICAgICAvLyAzMCBieXRlcyBhbmQgc2hvdWxkIHN0YXJ0IHdpdGggXCJQS1xcMDAzXFwwMDRcIlxuICAgICAgICAgICAgaWYgKGRhdGEucmVhZFVJbnQzMkxFKDApICE9PSBDb25zdGFudHMuTE9DU0lHKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgVXRpbHMuRXJyb3JzLklOVkFMSURfTE9DKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHZlcnNpb24gbmVlZGVkIHRvIGV4dHJhY3RcbiAgICAgICAgICAgIF9sb2NhbEhlYWRlci52ZXJzaW9uID0gZGF0YS5yZWFkVUludDE2TEUoQ29uc3RhbnRzLkxPQ1ZFUik7XG4gICAgICAgICAgICAvLyBnZW5lcmFsIHB1cnBvc2UgYml0IGZsYWdcbiAgICAgICAgICAgIF9sb2NhbEhlYWRlci5mbGFncyA9IGRhdGEucmVhZFVJbnQxNkxFKENvbnN0YW50cy5MT0NGTEcpO1xuICAgICAgICAgICAgLy8gY29tcHJlc3Npb24gbWV0aG9kXG4gICAgICAgICAgICBfbG9jYWxIZWFkZXIubWV0aG9kID0gZGF0YS5yZWFkVUludDE2TEUoQ29uc3RhbnRzLkxPQ0hPVyk7XG4gICAgICAgICAgICAvLyBtb2RpZmljYXRpb24gdGltZSAoMiBieXRlcyB0aW1lLCAyIGJ5dGVzIGRhdGUpXG4gICAgICAgICAgICBfbG9jYWxIZWFkZXIudGltZSA9IGRhdGEucmVhZFVJbnQzMkxFKENvbnN0YW50cy5MT0NUSU0pO1xuICAgICAgICAgICAgLy8gdW5jb21wcmVzc2VkIGZpbGUgY3JjLTMyIHZhbHVcbiAgICAgICAgICAgIF9sb2NhbEhlYWRlci5jcmMgPSBkYXRhLnJlYWRVSW50MzJMRShDb25zdGFudHMuTE9DQ1JDKTtcbiAgICAgICAgICAgIC8vIGNvbXByZXNzZWQgc2l6ZVxuICAgICAgICAgICAgX2xvY2FsSGVhZGVyLmNvbXByZXNzZWRTaXplID0gZGF0YS5yZWFkVUludDMyTEUoQ29uc3RhbnRzLkxPQ1NJWik7XG4gICAgICAgICAgICAvLyB1bmNvbXByZXNzZWQgc2l6ZVxuICAgICAgICAgICAgX2xvY2FsSGVhZGVyLnNpemUgPSBkYXRhLnJlYWRVSW50MzJMRShDb25zdGFudHMuTE9DTEVOKTtcbiAgICAgICAgICAgIC8vIGZpbGVuYW1lIGxlbmd0aFxuICAgICAgICAgICAgX2xvY2FsSGVhZGVyLmZuYW1lTGVuID0gZGF0YS5yZWFkVUludDE2TEUoQ29uc3RhbnRzLkxPQ05BTSk7XG4gICAgICAgICAgICAvLyBleHRyYSBmaWVsZCBsZW5ndGhcbiAgICAgICAgICAgIF9sb2NhbEhlYWRlci5leHRyYUxlbiA9IGRhdGEucmVhZFVJbnQxNkxFKENvbnN0YW50cy5MT0NFWFQpO1xuXG4gICAgICAgICAgICAvLyByZWFkIGV4dHJhIGRhdGFcbiAgICAgICAgICAgIGNvbnN0IGV4dHJhU3RhcnQgPSBfb2Zmc2V0ICsgQ29uc3RhbnRzLkxPQ0hEUiArIF9sb2NhbEhlYWRlci5mbmFtZUxlbjtcbiAgICAgICAgICAgIGNvbnN0IGV4dHJhRW5kID0gZXh0cmFTdGFydCArIF9sb2NhbEhlYWRlci5leHRyYUxlbjtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5zbGljZShleHRyYVN0YXJ0LCBleHRyYUVuZCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbG9hZEZyb21CaW5hcnk6IGZ1bmN0aW9uICgvKkJ1ZmZlciovIGRhdGEpIHtcbiAgICAgICAgICAgIC8vIGRhdGEgc2hvdWxkIGJlIDQ2IGJ5dGVzIGFuZCBzdGFydCB3aXRoIFwiUEsgMDEgMDJcIlxuICAgICAgICAgICAgaWYgKGRhdGEubGVuZ3RoICE9PSBDb25zdGFudHMuQ0VOSERSIHx8IGRhdGEucmVhZFVJbnQzMkxFKDApICE9PSBDb25zdGFudHMuQ0VOU0lHKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgVXRpbHMuRXJyb3JzLklOVkFMSURfQ0VOKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB2ZXJzaW9uIG1hZGUgYnlcbiAgICAgICAgICAgIF92ZXJNYWRlID0gZGF0YS5yZWFkVUludDE2TEUoQ29uc3RhbnRzLkNFTlZFTSk7XG4gICAgICAgICAgICAvLyB2ZXJzaW9uIG5lZWRlZCB0byBleHRyYWN0XG4gICAgICAgICAgICBfdmVyc2lvbiA9IGRhdGEucmVhZFVJbnQxNkxFKENvbnN0YW50cy5DRU5WRVIpO1xuICAgICAgICAgICAgLy8gZW5jcnlwdCwgZGVjcnlwdCBmbGFnc1xuICAgICAgICAgICAgX2ZsYWdzID0gZGF0YS5yZWFkVUludDE2TEUoQ29uc3RhbnRzLkNFTkZMRyk7XG4gICAgICAgICAgICAvLyBjb21wcmVzc2lvbiBtZXRob2RcbiAgICAgICAgICAgIF9tZXRob2QgPSBkYXRhLnJlYWRVSW50MTZMRShDb25zdGFudHMuQ0VOSE9XKTtcbiAgICAgICAgICAgIC8vIG1vZGlmaWNhdGlvbiB0aW1lICgyIGJ5dGVzIHRpbWUsIDIgYnl0ZXMgZGF0ZSlcbiAgICAgICAgICAgIF90aW1lID0gZGF0YS5yZWFkVUludDMyTEUoQ29uc3RhbnRzLkNFTlRJTSk7XG4gICAgICAgICAgICAvLyB1bmNvbXByZXNzZWQgZmlsZSBjcmMtMzIgdmFsdWVcbiAgICAgICAgICAgIF9jcmMgPSBkYXRhLnJlYWRVSW50MzJMRShDb25zdGFudHMuQ0VOQ1JDKTtcbiAgICAgICAgICAgIC8vIGNvbXByZXNzZWQgc2l6ZVxuICAgICAgICAgICAgX2NvbXByZXNzZWRTaXplID0gZGF0YS5yZWFkVUludDMyTEUoQ29uc3RhbnRzLkNFTlNJWik7XG4gICAgICAgICAgICAvLyB1bmNvbXByZXNzZWQgc2l6ZVxuICAgICAgICAgICAgX3NpemUgPSBkYXRhLnJlYWRVSW50MzJMRShDb25zdGFudHMuQ0VOTEVOKTtcbiAgICAgICAgICAgIC8vIGZpbGVuYW1lIGxlbmd0aFxuICAgICAgICAgICAgX2ZuYW1lTGVuID0gZGF0YS5yZWFkVUludDE2TEUoQ29uc3RhbnRzLkNFTk5BTSk7XG4gICAgICAgICAgICAvLyBleHRyYSBmaWVsZCBsZW5ndGhcbiAgICAgICAgICAgIF9leHRyYUxlbiA9IGRhdGEucmVhZFVJbnQxNkxFKENvbnN0YW50cy5DRU5FWFQpO1xuICAgICAgICAgICAgLy8gZmlsZSBjb21tZW50IGxlbmd0aFxuICAgICAgICAgICAgX2NvbUxlbiA9IGRhdGEucmVhZFVJbnQxNkxFKENvbnN0YW50cy5DRU5DT00pO1xuICAgICAgICAgICAgLy8gdm9sdW1lIG51bWJlciBzdGFydFxuICAgICAgICAgICAgX2Rpc2tTdGFydCA9IGRhdGEucmVhZFVJbnQxNkxFKENvbnN0YW50cy5DRU5EU0spO1xuICAgICAgICAgICAgLy8gaW50ZXJuYWwgZmlsZSBhdHRyaWJ1dGVzXG4gICAgICAgICAgICBfaW5hdHRyID0gZGF0YS5yZWFkVUludDE2TEUoQ29uc3RhbnRzLkNFTkFUVCk7XG4gICAgICAgICAgICAvLyBleHRlcm5hbCBmaWxlIGF0dHJpYnV0ZXNcbiAgICAgICAgICAgIF9hdHRyID0gZGF0YS5yZWFkVUludDMyTEUoQ29uc3RhbnRzLkNFTkFUWCk7XG4gICAgICAgICAgICAvLyBMT0MgaGVhZGVyIG9mZnNldFxuICAgICAgICAgICAgX29mZnNldCA9IGRhdGEucmVhZFVJbnQzMkxFKENvbnN0YW50cy5DRU5PRkYpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGxvY2FsSGVhZGVyVG9CaW5hcnk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIExPQyBoZWFkZXIgc2l6ZSAoMzAgYnl0ZXMpXG4gICAgICAgICAgICB2YXIgZGF0YSA9IEJ1ZmZlci5hbGxvYyhDb25zdGFudHMuTE9DSERSKTtcbiAgICAgICAgICAgIC8vIFwiUEtcXDAwM1xcMDA0XCJcbiAgICAgICAgICAgIGRhdGEud3JpdGVVSW50MzJMRShDb25zdGFudHMuTE9DU0lHLCAwKTtcbiAgICAgICAgICAgIC8vIHZlcnNpb24gbmVlZGVkIHRvIGV4dHJhY3RcbiAgICAgICAgICAgIGRhdGEud3JpdGVVSW50MTZMRShfdmVyc2lvbiwgQ29uc3RhbnRzLkxPQ1ZFUik7XG4gICAgICAgICAgICAvLyBnZW5lcmFsIHB1cnBvc2UgYml0IGZsYWdcbiAgICAgICAgICAgIGRhdGEud3JpdGVVSW50MTZMRShfZmxhZ3MsIENvbnN0YW50cy5MT0NGTEcpO1xuICAgICAgICAgICAgLy8gY29tcHJlc3Npb24gbWV0aG9kXG4gICAgICAgICAgICBkYXRhLndyaXRlVUludDE2TEUoX21ldGhvZCwgQ29uc3RhbnRzLkxPQ0hPVyk7XG4gICAgICAgICAgICAvLyBtb2RpZmljYXRpb24gdGltZSAoMiBieXRlcyB0aW1lLCAyIGJ5dGVzIGRhdGUpXG4gICAgICAgICAgICBkYXRhLndyaXRlVUludDMyTEUoX3RpbWUsIENvbnN0YW50cy5MT0NUSU0pO1xuICAgICAgICAgICAgLy8gdW5jb21wcmVzc2VkIGZpbGUgY3JjLTMyIHZhbHVlXG4gICAgICAgICAgICBkYXRhLndyaXRlVUludDMyTEUoX2NyYywgQ29uc3RhbnRzLkxPQ0NSQyk7XG4gICAgICAgICAgICAvLyBjb21wcmVzc2VkIHNpemVcbiAgICAgICAgICAgIGRhdGEud3JpdGVVSW50MzJMRShfY29tcHJlc3NlZFNpemUsIENvbnN0YW50cy5MT0NTSVopO1xuICAgICAgICAgICAgLy8gdW5jb21wcmVzc2VkIHNpemVcbiAgICAgICAgICAgIGRhdGEud3JpdGVVSW50MzJMRShfc2l6ZSwgQ29uc3RhbnRzLkxPQ0xFTik7XG4gICAgICAgICAgICAvLyBmaWxlbmFtZSBsZW5ndGhcbiAgICAgICAgICAgIGRhdGEud3JpdGVVSW50MTZMRShfZm5hbWVMZW4sIENvbnN0YW50cy5MT0NOQU0pO1xuICAgICAgICAgICAgLy8gZXh0cmEgZmllbGQgbGVuZ3RoXG4gICAgICAgICAgICBkYXRhLndyaXRlVUludDE2TEUoX2xvY2FsSGVhZGVyLmV4dHJhTGVuLCBDb25zdGFudHMuTE9DRVhUKTtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNlbnRyYWxIZWFkZXJUb0JpbmFyeTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gQ0VOIGhlYWRlciBzaXplICg0NiBieXRlcylcbiAgICAgICAgICAgIHZhciBkYXRhID0gQnVmZmVyLmFsbG9jKENvbnN0YW50cy5DRU5IRFIgKyBfZm5hbWVMZW4gKyBfZXh0cmFMZW4gKyBfY29tTGVuKTtcbiAgICAgICAgICAgIC8vIFwiUEtcXDAwMVxcMDAyXCJcbiAgICAgICAgICAgIGRhdGEud3JpdGVVSW50MzJMRShDb25zdGFudHMuQ0VOU0lHLCAwKTtcbiAgICAgICAgICAgIC8vIHZlcnNpb24gbWFkZSBieVxuICAgICAgICAgICAgZGF0YS53cml0ZVVJbnQxNkxFKF92ZXJNYWRlLCBDb25zdGFudHMuQ0VOVkVNKTtcbiAgICAgICAgICAgIC8vIHZlcnNpb24gbmVlZGVkIHRvIGV4dHJhY3RcbiAgICAgICAgICAgIGRhdGEud3JpdGVVSW50MTZMRShfdmVyc2lvbiwgQ29uc3RhbnRzLkNFTlZFUik7XG4gICAgICAgICAgICAvLyBlbmNyeXB0LCBkZWNyeXB0IGZsYWdzXG4gICAgICAgICAgICBkYXRhLndyaXRlVUludDE2TEUoX2ZsYWdzLCBDb25zdGFudHMuQ0VORkxHKTtcbiAgICAgICAgICAgIC8vIGNvbXByZXNzaW9uIG1ldGhvZFxuICAgICAgICAgICAgZGF0YS53cml0ZVVJbnQxNkxFKF9tZXRob2QsIENvbnN0YW50cy5DRU5IT1cpO1xuICAgICAgICAgICAgLy8gbW9kaWZpY2F0aW9uIHRpbWUgKDIgYnl0ZXMgdGltZSwgMiBieXRlcyBkYXRlKVxuICAgICAgICAgICAgZGF0YS53cml0ZVVJbnQzMkxFKF90aW1lLCBDb25zdGFudHMuQ0VOVElNKTtcbiAgICAgICAgICAgIC8vIHVuY29tcHJlc3NlZCBmaWxlIGNyYy0zMiB2YWx1ZVxuICAgICAgICAgICAgZGF0YS53cml0ZVVJbnQzMkxFKF9jcmMsIENvbnN0YW50cy5DRU5DUkMpO1xuICAgICAgICAgICAgLy8gY29tcHJlc3NlZCBzaXplXG4gICAgICAgICAgICBkYXRhLndyaXRlVUludDMyTEUoX2NvbXByZXNzZWRTaXplLCBDb25zdGFudHMuQ0VOU0laKTtcbiAgICAgICAgICAgIC8vIHVuY29tcHJlc3NlZCBzaXplXG4gICAgICAgICAgICBkYXRhLndyaXRlVUludDMyTEUoX3NpemUsIENvbnN0YW50cy5DRU5MRU4pO1xuICAgICAgICAgICAgLy8gZmlsZW5hbWUgbGVuZ3RoXG4gICAgICAgICAgICBkYXRhLndyaXRlVUludDE2TEUoX2ZuYW1lTGVuLCBDb25zdGFudHMuQ0VOTkFNKTtcbiAgICAgICAgICAgIC8vIGV4dHJhIGZpZWxkIGxlbmd0aFxuICAgICAgICAgICAgZGF0YS53cml0ZVVJbnQxNkxFKF9leHRyYUxlbiwgQ29uc3RhbnRzLkNFTkVYVCk7XG4gICAgICAgICAgICAvLyBmaWxlIGNvbW1lbnQgbGVuZ3RoXG4gICAgICAgICAgICBkYXRhLndyaXRlVUludDE2TEUoX2NvbUxlbiwgQ29uc3RhbnRzLkNFTkNPTSk7XG4gICAgICAgICAgICAvLyB2b2x1bWUgbnVtYmVyIHN0YXJ0XG4gICAgICAgICAgICBkYXRhLndyaXRlVUludDE2TEUoX2Rpc2tTdGFydCwgQ29uc3RhbnRzLkNFTkRTSyk7XG4gICAgICAgICAgICAvLyBpbnRlcm5hbCBmaWxlIGF0dHJpYnV0ZXNcbiAgICAgICAgICAgIGRhdGEud3JpdGVVSW50MTZMRShfaW5hdHRyLCBDb25zdGFudHMuQ0VOQVRUKTtcbiAgICAgICAgICAgIC8vIGV4dGVybmFsIGZpbGUgYXR0cmlidXRlc1xuICAgICAgICAgICAgZGF0YS53cml0ZVVJbnQzMkxFKF9hdHRyLCBDb25zdGFudHMuQ0VOQVRYKTtcbiAgICAgICAgICAgIC8vIExPQyBoZWFkZXIgb2Zmc2V0XG4gICAgICAgICAgICBkYXRhLndyaXRlVUludDMyTEUoX29mZnNldCwgQ29uc3RhbnRzLkNFTk9GRik7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSxcblxuICAgICAgICB0b0pTT046IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gZnVuY3Rpb24gKG5yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5yICsgXCIgYnl0ZXNcIjtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbWFkZTogX3Zlck1hZGUsXG4gICAgICAgICAgICAgICAgdmVyc2lvbjogX3ZlcnNpb24sXG4gICAgICAgICAgICAgICAgZmxhZ3M6IF9mbGFncyxcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFV0aWxzLm1ldGhvZFRvU3RyaW5nKF9tZXRob2QpLFxuICAgICAgICAgICAgICAgIHRpbWU6IHRoaXMudGltZSxcbiAgICAgICAgICAgICAgICBjcmM6IFwiMHhcIiArIF9jcmMudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgY29tcHJlc3NlZFNpemU6IGJ5dGVzKF9jb21wcmVzc2VkU2l6ZSksXG4gICAgICAgICAgICAgICAgc2l6ZTogYnl0ZXMoX3NpemUpLFxuICAgICAgICAgICAgICAgIGZpbGVOYW1lTGVuZ3RoOiBieXRlcyhfZm5hbWVMZW4pLFxuICAgICAgICAgICAgICAgIGV4dHJhTGVuZ3RoOiBieXRlcyhfZXh0cmFMZW4pLFxuICAgICAgICAgICAgICAgIGNvbW1lbnRMZW5ndGg6IGJ5dGVzKF9jb21MZW4pLFxuICAgICAgICAgICAgICAgIGRpc2tOdW1TdGFydDogX2Rpc2tTdGFydCxcbiAgICAgICAgICAgICAgICBpbkF0dHI6IF9pbmF0dHIsXG4gICAgICAgICAgICAgICAgYXR0cjogX2F0dHIsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBfb2Zmc2V0LFxuICAgICAgICAgICAgICAgIGNlbnRyYWxIZWFkZXJTaXplOiBieXRlcyhDb25zdGFudHMuQ0VOSERSICsgX2ZuYW1lTGVuICsgX2V4dHJhTGVuICsgX2NvbUxlbilcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvSlNPTigpLCBudWxsLCBcIlxcdFwiKTtcbiAgICAgICAgfVxuICAgIH07XG59O1xuIiwgInZhciBVdGlscyA9IHJlcXVpcmUoXCIuLi91dGlsXCIpLFxuICAgIENvbnN0YW50cyA9IFV0aWxzLkNvbnN0YW50cztcblxuLyogVGhlIGVudHJpZXMgaW4gdGhlIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92b2x1bWVFbnRyaWVzID0gMCxcbiAgICAgICAgX3RvdGFsRW50cmllcyA9IDAsXG4gICAgICAgIF9zaXplID0gMCxcbiAgICAgICAgX29mZnNldCA9IDAsXG4gICAgICAgIF9jb21tZW50TGVuZ3RoID0gMDtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGdldCBkaXNrRW50cmllcygpIHtcbiAgICAgICAgICAgIHJldHVybiBfdm9sdW1lRW50cmllcztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IGRpc2tFbnRyaWVzKC8qTnVtYmVyKi8gdmFsKSB7XG4gICAgICAgICAgICBfdm9sdW1lRW50cmllcyA9IF90b3RhbEVudHJpZXMgPSB2YWw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IHRvdGFsRW50cmllcygpIHtcbiAgICAgICAgICAgIHJldHVybiBfdG90YWxFbnRyaWVzO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgdG90YWxFbnRyaWVzKC8qTnVtYmVyKi8gdmFsKSB7XG4gICAgICAgICAgICBfdG90YWxFbnRyaWVzID0gX3ZvbHVtZUVudHJpZXMgPSB2YWw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IHNpemUoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3NpemU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCBzaXplKC8qTnVtYmVyKi8gdmFsKSB7XG4gICAgICAgICAgICBfc2l6ZSA9IHZhbDtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgb2Zmc2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIF9vZmZzZXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCBvZmZzZXQoLypOdW1iZXIqLyB2YWwpIHtcbiAgICAgICAgICAgIF9vZmZzZXQgPSB2YWw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IGNvbW1lbnRMZW5ndGgoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2NvbW1lbnRMZW5ndGg7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCBjb21tZW50TGVuZ3RoKC8qTnVtYmVyKi8gdmFsKSB7XG4gICAgICAgICAgICBfY29tbWVudExlbmd0aCA9IHZhbDtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgbWFpbkhlYWRlclNpemUoKSB7XG4gICAgICAgICAgICByZXR1cm4gQ29uc3RhbnRzLkVOREhEUiArIF9jb21tZW50TGVuZ3RoO1xuICAgICAgICB9LFxuXG4gICAgICAgIGxvYWRGcm9tQmluYXJ5OiBmdW5jdGlvbiAoLypCdWZmZXIqLyBkYXRhKSB7XG4gICAgICAgICAgICAvLyBkYXRhIHNob3VsZCBiZSAyMiBieXRlcyBhbmQgc3RhcnQgd2l0aCBcIlBLIDA1IDA2XCJcbiAgICAgICAgICAgIC8vIG9yIGJlIDU2KyBieXRlcyBhbmQgc3RhcnQgd2l0aCBcIlBLIDA2IDA2XCIgZm9yIFppcDY0XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKGRhdGEubGVuZ3RoICE9PSBDb25zdGFudHMuRU5ESERSIHx8IGRhdGEucmVhZFVJbnQzMkxFKDApICE9PSBDb25zdGFudHMuRU5EU0lHKSAmJlxuICAgICAgICAgICAgICAgIChkYXRhLmxlbmd0aCA8IENvbnN0YW50cy5aSVA2NEhEUiB8fCBkYXRhLnJlYWRVSW50MzJMRSgwKSAhPT0gQ29uc3RhbnRzLlpJUDY0U0lHKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgVXRpbHMuRXJyb3JzLklOVkFMSURfRU5EKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkYXRhLnJlYWRVSW50MzJMRSgwKSA9PT0gQ29uc3RhbnRzLkVORFNJRykge1xuICAgICAgICAgICAgICAgIC8vIG51bWJlciBvZiBlbnRyaWVzIG9uIHRoaXMgdm9sdW1lXG4gICAgICAgICAgICAgICAgX3ZvbHVtZUVudHJpZXMgPSBkYXRhLnJlYWRVSW50MTZMRShDb25zdGFudHMuRU5EU1VCKTtcbiAgICAgICAgICAgICAgICAvLyB0b3RhbCBudW1iZXIgb2YgZW50cmllc1xuICAgICAgICAgICAgICAgIF90b3RhbEVudHJpZXMgPSBkYXRhLnJlYWRVSW50MTZMRShDb25zdGFudHMuRU5EVE9UKTtcbiAgICAgICAgICAgICAgICAvLyBjZW50cmFsIGRpcmVjdG9yeSBzaXplIGluIGJ5dGVzXG4gICAgICAgICAgICAgICAgX3NpemUgPSBkYXRhLnJlYWRVSW50MzJMRShDb25zdGFudHMuRU5EU0laKTtcbiAgICAgICAgICAgICAgICAvLyBvZmZzZXQgb2YgZmlyc3QgQ0VOIGhlYWRlclxuICAgICAgICAgICAgICAgIF9vZmZzZXQgPSBkYXRhLnJlYWRVSW50MzJMRShDb25zdGFudHMuRU5ET0ZGKTtcbiAgICAgICAgICAgICAgICAvLyB6aXAgZmlsZSBjb21tZW50IGxlbmd0aFxuICAgICAgICAgICAgICAgIF9jb21tZW50TGVuZ3RoID0gZGF0YS5yZWFkVUludDE2TEUoQ29uc3RhbnRzLkVORENPTSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG51bWJlciBvZiBlbnRyaWVzIG9uIHRoaXMgdm9sdW1lXG4gICAgICAgICAgICAgICAgX3ZvbHVtZUVudHJpZXMgPSBVdGlscy5yZWFkQmlnVUludDY0TEUoZGF0YSwgQ29uc3RhbnRzLlpJUDY0U1VCKTtcbiAgICAgICAgICAgICAgICAvLyB0b3RhbCBudW1iZXIgb2YgZW50cmllc1xuICAgICAgICAgICAgICAgIF90b3RhbEVudHJpZXMgPSBVdGlscy5yZWFkQmlnVUludDY0TEUoZGF0YSwgQ29uc3RhbnRzLlpJUDY0VE9UKTtcbiAgICAgICAgICAgICAgICAvLyBjZW50cmFsIGRpcmVjdG9yeSBzaXplIGluIGJ5dGVzXG4gICAgICAgICAgICAgICAgX3NpemUgPSBVdGlscy5yZWFkQmlnVUludDY0TEUoZGF0YSwgQ29uc3RhbnRzLlpJUDY0U0laRSk7XG4gICAgICAgICAgICAgICAgLy8gb2Zmc2V0IG9mIGZpcnN0IENFTiBoZWFkZXJcbiAgICAgICAgICAgICAgICBfb2Zmc2V0ID0gVXRpbHMucmVhZEJpZ1VJbnQ2NExFKGRhdGEsIENvbnN0YW50cy5aSVA2NE9GRik7XG5cbiAgICAgICAgICAgICAgICBfY29tbWVudExlbmd0aCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9CaW5hcnk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBiID0gQnVmZmVyLmFsbG9jKENvbnN0YW50cy5FTkRIRFIgKyBfY29tbWVudExlbmd0aCk7XG4gICAgICAgICAgICAvLyBcIlBLIDA1IDA2XCIgc2lnbmF0dXJlXG4gICAgICAgICAgICBiLndyaXRlVUludDMyTEUoQ29uc3RhbnRzLkVORFNJRywgMCk7XG4gICAgICAgICAgICBiLndyaXRlVUludDMyTEUoMCwgNCk7XG4gICAgICAgICAgICAvLyBudW1iZXIgb2YgZW50cmllcyBvbiB0aGlzIHZvbHVtZVxuICAgICAgICAgICAgYi53cml0ZVVJbnQxNkxFKF92b2x1bWVFbnRyaWVzLCBDb25zdGFudHMuRU5EU1VCKTtcbiAgICAgICAgICAgIC8vIHRvdGFsIG51bWJlciBvZiBlbnRyaWVzXG4gICAgICAgICAgICBiLndyaXRlVUludDE2TEUoX3RvdGFsRW50cmllcywgQ29uc3RhbnRzLkVORFRPVCk7XG4gICAgICAgICAgICAvLyBjZW50cmFsIGRpcmVjdG9yeSBzaXplIGluIGJ5dGVzXG4gICAgICAgICAgICBiLndyaXRlVUludDMyTEUoX3NpemUsIENvbnN0YW50cy5FTkRTSVopO1xuICAgICAgICAgICAgLy8gb2Zmc2V0IG9mIGZpcnN0IENFTiBoZWFkZXJcbiAgICAgICAgICAgIGIud3JpdGVVSW50MzJMRShfb2Zmc2V0LCBDb25zdGFudHMuRU5ET0ZGKTtcbiAgICAgICAgICAgIC8vIHppcCBmaWxlIGNvbW1lbnQgbGVuZ3RoXG4gICAgICAgICAgICBiLndyaXRlVUludDE2TEUoX2NvbW1lbnRMZW5ndGgsIENvbnN0YW50cy5FTkRDT00pO1xuICAgICAgICAgICAgLy8gZmlsbCBjb21tZW50IG1lbW9yeSB3aXRoIHNwYWNlcyBzbyBubyBnYXJiYWdlIGlzIGxlZnQgdGhlcmVcbiAgICAgICAgICAgIGIuZmlsbChcIiBcIiwgQ29uc3RhbnRzLkVOREhEUik7XG5cbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRvSlNPTjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gY3JlYXRlcyAweDAwMDAgc3R5bGUgb3V0cHV0XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBmdW5jdGlvbiAobnIsIGxlbikge1xuICAgICAgICAgICAgICAgIGxldCBvZmZzID0gbnIudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKG9mZnMubGVuZ3RoIDwgbGVuKSBvZmZzID0gXCIwXCIgKyBvZmZzO1xuICAgICAgICAgICAgICAgIHJldHVybiBcIjB4XCIgKyBvZmZzO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkaXNrRW50cmllczogX3ZvbHVtZUVudHJpZXMsXG4gICAgICAgICAgICAgICAgdG90YWxFbnRyaWVzOiBfdG90YWxFbnRyaWVzLFxuICAgICAgICAgICAgICAgIHNpemU6IF9zaXplICsgXCIgYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IG9mZnNldChfb2Zmc2V0LCA0KSxcbiAgICAgICAgICAgICAgICBjb21tZW50TGVuZ3RoOiBfY29tbWVudExlbmd0aFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudG9KU09OKCksIG51bGwsIFwiXFx0XCIpO1xuICAgICAgICB9XG4gICAgfTtcbn07XG4vLyBNaXNzcGVsbGVkXG4iLCAiZXhwb3J0cy5FbnRyeUhlYWRlciA9IHJlcXVpcmUoXCIuL2VudHJ5SGVhZGVyXCIpO1xuZXhwb3J0cy5NYWluSGVhZGVyID0gcmVxdWlyZShcIi4vbWFpbkhlYWRlclwiKTtcbiIsICJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgvKkJ1ZmZlciovIGluYnVmKSB7XG4gICAgdmFyIHpsaWIgPSByZXF1aXJlKFwiemxpYlwiKTtcblxuICAgIHZhciBvcHRzID0geyBjaHVua1NpemU6IChwYXJzZUludChpbmJ1Zi5sZW5ndGggLyAxMDI0KSArIDEpICogMTAyNCB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVmbGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHpsaWIuZGVmbGF0ZVJhd1N5bmMoaW5idWYsIG9wdHMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRlZmxhdGVBc3luYzogZnVuY3Rpb24gKC8qRnVuY3Rpb24qLyBjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIHRtcCA9IHpsaWIuY3JlYXRlRGVmbGF0ZVJhdyhvcHRzKSxcbiAgICAgICAgICAgICAgICBwYXJ0cyA9IFtdLFxuICAgICAgICAgICAgICAgIHRvdGFsID0gMDtcbiAgICAgICAgICAgIHRtcC5vbihcImRhdGFcIiwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgICAgIHRvdGFsICs9IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0bXAub24oXCJlbmRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBidWYgPSBCdWZmZXIuYWxsb2ModG90YWwpLFxuICAgICAgICAgICAgICAgICAgICB3cml0dGVuID0gMDtcbiAgICAgICAgICAgICAgICBidWYuZmlsbCgwKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0ID0gcGFydHNbaV07XG4gICAgICAgICAgICAgICAgICAgIHBhcnQuY29weShidWYsIHdyaXR0ZW4pO1xuICAgICAgICAgICAgICAgICAgICB3cml0dGVuICs9IHBhcnQubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhidWYpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0bXAuZW5kKGluYnVmKTtcbiAgICAgICAgfVxuICAgIH07XG59O1xuIiwgImNvbnN0IHZlcnNpb24gPSArKHByb2Nlc3MudmVyc2lvbnMgPyBwcm9jZXNzLnZlcnNpb25zLm5vZGUgOiBcIlwiKS5zcGxpdChcIi5cIilbMF0gfHwgMDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoLypCdWZmZXIqLyBpbmJ1ZiwgLypudW1iZXIqLyBleHBlY3RlZExlbmd0aCkge1xuICAgIHZhciB6bGliID0gcmVxdWlyZShcInpsaWJcIik7XG4gICAgY29uc3Qgb3B0aW9uID0gdmVyc2lvbiA+PSAxNSAmJiBleHBlY3RlZExlbmd0aCA+IDAgPyB7IG1heE91dHB1dExlbmd0aDogZXhwZWN0ZWRMZW5ndGggfSA6IHt9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5mbGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHpsaWIuaW5mbGF0ZVJhd1N5bmMoaW5idWYsIG9wdGlvbik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5mbGF0ZUFzeW5jOiBmdW5jdGlvbiAoLypGdW5jdGlvbiovIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgdG1wID0gemxpYi5jcmVhdGVJbmZsYXRlUmF3KG9wdGlvbiksXG4gICAgICAgICAgICAgICAgcGFydHMgPSBbXSxcbiAgICAgICAgICAgICAgICB0b3RhbCA9IDA7XG4gICAgICAgICAgICB0bXAub24oXCJkYXRhXCIsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgcGFydHMucHVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICB0b3RhbCArPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdG1wLm9uKFwiZW5kXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jKHRvdGFsKSxcbiAgICAgICAgICAgICAgICAgICAgd3JpdHRlbiA9IDA7XG4gICAgICAgICAgICAgICAgYnVmLmZpbGwoMCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFydCA9IHBhcnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICBwYXJ0LmNvcHkoYnVmLCB3cml0dGVuKTtcbiAgICAgICAgICAgICAgICAgICAgd3JpdHRlbiArPSBwYXJ0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soYnVmKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdG1wLmVuZChpbmJ1Zik7XG4gICAgICAgIH1cbiAgICB9O1xufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcblxuLy8gbm9kZSBjcnlwdCwgd2UgdXNlIGl0IGZvciBnZW5lcmF0ZSBzYWx0XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG5jb25zdCB7IHJhbmRvbUZpbGxTeW5jIH0gPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY29uc3QgRXJyb3JzID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzXCIpO1xuXG4vLyBnZW5lcmF0ZSBDUkMzMiBsb29rdXAgdGFibGVcbmNvbnN0IGNyY3RhYmxlID0gbmV3IFVpbnQzMkFycmF5KDI1NikubWFwKCh0LCBjcmMpID0+IHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDg7IGorKykge1xuICAgICAgICBpZiAoMCAhPT0gKGNyYyAmIDEpKSB7XG4gICAgICAgICAgICBjcmMgPSAoY3JjID4+PiAxKSBeIDB4ZWRiODgzMjA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjcmMgPj4+PSAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjcmMgPj4+IDA7XG59KTtcblxuLy8gQy1zdHlsZSB1SW50MzIgTXVsdGlwbHkgKGRpc2NhcmRzIGhpZ2hlciBiaXRzLCB3aGVuIEpTIG11bHRpcGx5IGRpc2NhcmRzIGxvd2VyIGJpdHMpXG5jb25zdCB1TXVsID0gKGEsIGIpID0+IE1hdGguaW11bChhLCBiKSA+Pj4gMDtcblxuLy8gY3JjMzIgYnl0ZSBzaW5nbGUgdXBkYXRlIChhY3R1YWxseSBzYW1lIGZ1bmN0aW9uIGlzIHBhcnQgb2YgdXRpbHMuY3JjMzIgZnVuY3Rpb24gOikgKVxuY29uc3QgY3JjMzJ1cGRhdGUgPSAocENyYzMyLCBidmFsKSA9PiB7XG4gICAgcmV0dXJuIGNyY3RhYmxlWyhwQ3JjMzIgXiBidmFsKSAmIDB4ZmZdIF4gKHBDcmMzMiA+Pj4gOCk7XG59O1xuXG4vLyBmdW5jdGlvbiBmb3IgZ2VuZXJhdGluZyBzYWx0IGZvciBlbmNyeXRpb24gaGVhZGVyXG5jb25zdCBnZW5TYWx0ID0gKCkgPT4ge1xuICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByYW5kb21GaWxsU3luYykge1xuICAgICAgICByZXR1cm4gcmFuZG9tRmlsbFN5bmMoQnVmZmVyLmFsbG9jKDEyKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZmFsbGJhY2sgaWYgZnVuY3Rpb24gaXMgbm90IGRlZmluZWRcbiAgICAgICAgcmV0dXJuIGdlblNhbHQubm9kZSgpO1xuICAgIH1cbn07XG5cbi8vIHNhbHQgZ2VuZXJhdGlvbiB3aXRoIG5vZGUgcmFuZG9tIGZ1bmN0aW9uIChtYWlubHkgYXMgZmFsbGJhY2spXG5nZW5TYWx0Lm5vZGUgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2FsdCA9IEJ1ZmZlci5hbGxvYygxMik7XG4gICAgY29uc3QgbGVuID0gc2FsdC5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykgc2FsdFtpXSA9IChNYXRoLnJhbmRvbSgpICogMjU2KSAmIDB4ZmY7XG4gICAgcmV0dXJuIHNhbHQ7XG59O1xuXG4vLyBnZW5lcmFsIGNvbmZpZ1xuY29uc3QgY29uZmlnID0ge1xuICAgIGdlblNhbHRcbn07XG5cbi8vIENsYXNzIEluaXRrZXlzIGhhbmRsZXMgc2FtZSBiYXNpYyBvcHMgd2l0aCBrZXlzXG5mdW5jdGlvbiBJbml0a2V5cyhwdykge1xuICAgIGNvbnN0IHBhc3MgPSBCdWZmZXIuaXNCdWZmZXIocHcpID8gcHcgOiBCdWZmZXIuZnJvbShwdyk7XG4gICAgdGhpcy5rZXlzID0gbmV3IFVpbnQzMkFycmF5KFsweDEyMzQ1Njc4LCAweDIzNDU2Nzg5LCAweDM0NTY3ODkwXSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMudXBkYXRlS2V5cyhwYXNzW2ldKTtcbiAgICB9XG59XG5cbkluaXRrZXlzLnByb3RvdHlwZS51cGRhdGVLZXlzID0gZnVuY3Rpb24gKGJ5dGVWYWx1ZSkge1xuICAgIGNvbnN0IGtleXMgPSB0aGlzLmtleXM7XG4gICAga2V5c1swXSA9IGNyYzMydXBkYXRlKGtleXNbMF0sIGJ5dGVWYWx1ZSk7XG4gICAga2V5c1sxXSArPSBrZXlzWzBdICYgMHhmZjtcbiAgICBrZXlzWzFdID0gdU11bChrZXlzWzFdLCAxMzQ3NzU4MTMpICsgMTtcbiAgICBrZXlzWzJdID0gY3JjMzJ1cGRhdGUoa2V5c1syXSwga2V5c1sxXSA+Pj4gMjQpO1xuICAgIHJldHVybiBieXRlVmFsdWU7XG59O1xuXG5Jbml0a2V5cy5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBrID0gKHRoaXMua2V5c1syXSB8IDIpID4+PiAwOyAvLyBrZXlcbiAgICByZXR1cm4gKHVNdWwoaywgayBeIDEpID4+IDgpICYgMHhmZjsgLy8gZGVjb2RlXG59O1xuXG5mdW5jdGlvbiBtYWtlX2RlY3J5cHRlcigvKkJ1ZmZlciovIHB3ZCkge1xuICAgIC8vIDEuIFN0YWdlIGluaXRpYWxpemUga2V5XG4gICAgY29uc3Qga2V5cyA9IG5ldyBJbml0a2V5cyhwd2QpO1xuXG4gICAgLy8gcmV0dXJuIGRlY3J5cHRlciBmdW5jdGlvblxuICAgIHJldHVybiBmdW5jdGlvbiAoLypCdWZmZXIqLyBkYXRhKSB7XG4gICAgICAgIC8vIHJlc3VsdCAtIHdlIGNyZWF0ZSBuZXcgQnVmZmVyIGZvciByZXN1bHRzXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IEJ1ZmZlci5hbGxvYyhkYXRhLmxlbmd0aCk7XG4gICAgICAgIGxldCBwb3MgPSAwO1xuICAgICAgICAvLyBwcm9jZXNzIGlucHV0IGRhdGFcbiAgICAgICAgZm9yIChsZXQgYyBvZiBkYXRhKSB7XG4gICAgICAgICAgICAvL2MgXj0ga2V5cy5uZXh0KCk7XG4gICAgICAgICAgICAvL3Jlc3VsdFtwb3MrK10gPSBjOyAvLyBkZWNvZGUgJiBTYXZlIFZhbHVlXG4gICAgICAgICAgICByZXN1bHRbcG9zKytdID0ga2V5cy51cGRhdGVLZXlzKGMgXiBrZXlzLm5leHQoKSk7IC8vIHVwZGF0ZSBrZXlzIHdpdGggZGVjb2RlZCBieXRlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBtYWtlX2VuY3J5cHRlcigvKkJ1ZmZlciovIHB3ZCkge1xuICAgIC8vIDEuIFN0YWdlIGluaXRpYWxpemUga2V5XG4gICAgY29uc3Qga2V5cyA9IG5ldyBJbml0a2V5cyhwd2QpO1xuXG4gICAgLy8gcmV0dXJuIGVuY3J5cHRpbmcgZnVuY3Rpb24sIHJlc3VsdCBhbmQgcG9zIGlzIGhlcmUgc28gd2UgZG9udCBoYXZlIHRvIG1lcmdlIGJ1ZmZlcnMgbGF0ZXJcbiAgICByZXR1cm4gZnVuY3Rpb24gKC8qQnVmZmVyKi8gZGF0YSwgLypCdWZmZXIqLyByZXN1bHQsIC8qIE51bWJlciAqLyBwb3MgPSAwKSB7XG4gICAgICAgIC8vIHJlc3VsdCAtIHdlIGNyZWF0ZSBuZXcgQnVmZmVyIGZvciByZXN1bHRzXG4gICAgICAgIGlmICghcmVzdWx0KSByZXN1bHQgPSBCdWZmZXIuYWxsb2MoZGF0YS5sZW5ndGgpO1xuICAgICAgICAvLyBwcm9jZXNzIGlucHV0IGRhdGFcbiAgICAgICAgZm9yIChsZXQgYyBvZiBkYXRhKSB7XG4gICAgICAgICAgICBjb25zdCBrID0ga2V5cy5uZXh0KCk7IC8vIHNhdmUga2V5IGJ5dGVcbiAgICAgICAgICAgIHJlc3VsdFtwb3MrK10gPSBjIF4gazsgLy8gc2F2ZSB2YWxcbiAgICAgICAgICAgIGtleXMudXBkYXRlS2V5cyhjKTsgLy8gdXBkYXRlIGtleXMgd2l0aCBkZWNvZGVkIGJ5dGVcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGRlY3J5cHQoLypCdWZmZXIqLyBkYXRhLCAvKk9iamVjdCovIGhlYWRlciwgLypTdHJpbmcsIEJ1ZmZlciovIHB3ZCkge1xuICAgIGlmICghZGF0YSB8fCAhQnVmZmVyLmlzQnVmZmVyKGRhdGEpIHx8IGRhdGEubGVuZ3RoIDwgMTIpIHtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKTtcbiAgICB9XG5cbiAgICAvLyAxLiBXZSBJbml0aWFsaXplIGFuZCBnZW5lcmF0ZSBkZWNyeXB0aW5nIGZ1bmN0aW9uXG4gICAgY29uc3QgZGVjcnlwdGVyID0gbWFrZV9kZWNyeXB0ZXIocHdkKTtcblxuICAgIC8vIDIuIGRlY3J5cHQgc2FsdCB3aGF0IGlzIGFsd2F5cyAxMiBieXRlcyBhbmQgaXMgYSBwYXJ0IG9mIGZpbGUgY29udGVudFxuICAgIGNvbnN0IHNhbHQgPSBkZWNyeXB0ZXIoZGF0YS5zbGljZSgwLCAxMikpO1xuXG4gICAgLy8gaWYgYml0IDMgKDB4MDgpIG9mIHRoZSBnZW5lcmFsLXB1cnBvc2UgZmxhZ3MgZmllbGQgaXMgc2V0LCBjaGVjayBzYWx0WzExXSB3aXRoIHRoZSBoaWdoIGJ5dGUgb2YgdGhlIGhlYWRlciB0aW1lXG4gICAgLy8gMiBieXRlIGRhdGEgYmxvY2sgKGFzIHBlciBJbmZvLVppcCBzcGVjKSwgb3RoZXJ3aXNlIGNoZWNrIHdpdGggdGhlIGhpZ2ggYnl0ZSBvZiB0aGUgaGVhZGVyIGVudHJ5XG4gICAgY29uc3QgdmVyaWZ5Qnl0ZSA9IChoZWFkZXIuZmxhZ3MgJiAweDgpID09PSAweDggPyBoZWFkZXIudGltZUhpZ2hCeXRlIDogaGVhZGVyLmNyYyA+Pj4gMjQ7XG5cbiAgICAvLzMuIGRvZXMgcGFzc3dvcmQgbWVldCBleHBlY3RhdGlvbnNcbiAgICBpZiAoc2FsdFsxMV0gIT09IHZlcmlmeUJ5dGUpIHtcbiAgICAgICAgdGhyb3cgRXJyb3JzLldST05HX1BBU1NXT1JEKCk7XG4gICAgfVxuXG4gICAgLy8gNC4gZGVjb2RlIGNvbnRlbnRcbiAgICByZXR1cm4gZGVjcnlwdGVyKGRhdGEuc2xpY2UoMTIpKTtcbn1cblxuLy8gbGV0cyBhZGQgd2F5IHRvIHBvcHVsYXRlIHNhbHQsIE5PVCBSRUNPTU1FTkRFRCBmb3IgcHJvZHVjdGlvbiBidXQgbWF5YmUgdXNlZnVsIGZvciB0ZXN0aW5nIGdlbmVyYWwgZnVuY3Rpb25hbGl0eVxuZnVuY3Rpb24gX3NhbHRlcihkYXRhKSB7XG4gICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSAmJiBkYXRhLmxlbmd0aCA+PSAxMikge1xuICAgICAgICAvLyBiZSBhd2FyZSAtIGN1cnJlbnRseSBzYWx0aW5nIGJ1ZmZlciBkYXRhIGlzIG1vZGlmaWVkXG4gICAgICAgIGNvbmZpZy5nZW5TYWx0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEuc2xpY2UoMCwgMTIpO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZGF0YSA9PT0gXCJub2RlXCIpIHtcbiAgICAgICAgLy8gdGVzdCBzYWx0IGdlbmVyYXRpb24gd2l0aCBub2RlIHJhbmRvbSBmdW5jdGlvblxuICAgICAgICBjb25maWcuZ2VuU2FsdCA9IGdlblNhbHQubm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpZiB2YWx1ZSBpcyBub3QgYWNjZXB0YWJsZSBjb25maWcgZ2V0cyByZXNldC5cbiAgICAgICAgY29uZmlnLmdlblNhbHQgPSBnZW5TYWx0O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZW5jcnlwdCgvKkJ1ZmZlciovIGRhdGEsIC8qT2JqZWN0Ki8gaGVhZGVyLCAvKlN0cmluZywgQnVmZmVyKi8gcHdkLCAvKkJvb2xlYW4qLyBvbGRsaWtlID0gZmFsc2UpIHtcbiAgICAvLyAxLiB0ZXN0IGRhdGEgaWYgZGF0YSBpcyBub3QgQnVmZmVyIHdlIG1ha2UgYnVmZmVyIGZyb20gaXRcbiAgICBpZiAoZGF0YSA9PSBudWxsKSBkYXRhID0gQnVmZmVyLmFsbG9jKDApO1xuICAgIC8vIGlmIGRhdGEgaXMgbm90IGJ1ZmZlciBiZSBtYWtlIGJ1ZmZlciBmcm9tIGl0XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLnRvU3RyaW5nKCkpO1xuXG4gICAgLy8gMi4gV2UgSW5pdGlhbGl6ZSBhbmQgZ2VuZXJhdGUgZW5jcnlwdGluZyBmdW5jdGlvblxuICAgIGNvbnN0IGVuY3J5cHRlciA9IG1ha2VfZW5jcnlwdGVyKHB3ZCk7XG5cbiAgICAvLyAzLiBnZW5lcmF0ZSBzYWx0ICgxMi1ieXRlcyBvZiByYW5kb20gZGF0YSlcbiAgICBjb25zdCBzYWx0ID0gY29uZmlnLmdlblNhbHQoKTtcbiAgICBzYWx0WzExXSA9IChoZWFkZXIuY3JjID4+PiAyNCkgJiAweGZmO1xuXG4gICAgLy8gb2xkIGltcGxlbWVudGF0aW9ucyAoYmVmb3JlIFBLWmlwIDIuMDRnKSB1c2VkIHR3byBieXRlIGNoZWNrXG4gICAgaWYgKG9sZGxpa2UpIHNhbHRbMTBdID0gKGhlYWRlci5jcmMgPj4+IDE2KSAmIDB4ZmY7XG5cbiAgICAvLyA0LiBjcmVhdGUgb3V0cHV0XG4gICAgY29uc3QgcmVzdWx0ID0gQnVmZmVyLmFsbG9jKGRhdGEubGVuZ3RoICsgMTIpO1xuICAgIGVuY3J5cHRlcihzYWx0LCByZXN1bHQpO1xuXG4gICAgLy8gZmluYWxseSBlbmNvZGUgY29udGVudFxuICAgIHJldHVybiBlbmNyeXB0ZXIoZGF0YSwgcmVzdWx0LCAxMik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBkZWNyeXB0LCBlbmNyeXB0LCBfc2FsdGVyIH07XG4iLCAiZXhwb3J0cy5EZWZsYXRlciA9IHJlcXVpcmUoXCIuL2RlZmxhdGVyXCIpO1xuZXhwb3J0cy5JbmZsYXRlciA9IHJlcXVpcmUoXCIuL2luZmxhdGVyXCIpO1xuZXhwb3J0cy5aaXBDcnlwdG8gPSByZXF1aXJlKFwiLi96aXBjcnlwdG9cIik7XG4iLCAidmFyIFV0aWxzID0gcmVxdWlyZShcIi4vdXRpbFwiKSxcbiAgICBIZWFkZXJzID0gcmVxdWlyZShcIi4vaGVhZGVyc1wiKSxcbiAgICBDb25zdGFudHMgPSBVdGlscy5Db25zdGFudHMsXG4gICAgTWV0aG9kcyA9IHJlcXVpcmUoXCIuL21ldGhvZHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKC8qKiBvYmplY3QgKi8gb3B0aW9ucywgLypCdWZmZXIqLyBpbnB1dCkge1xuICAgIHZhciBfY2VudHJhbEhlYWRlciA9IG5ldyBIZWFkZXJzLkVudHJ5SGVhZGVyKCksXG4gICAgICAgIF9lbnRyeU5hbWUgPSBCdWZmZXIuYWxsb2MoMCksXG4gICAgICAgIF9jb21tZW50ID0gQnVmZmVyLmFsbG9jKDApLFxuICAgICAgICBfaXNEaXJlY3RvcnkgPSBmYWxzZSxcbiAgICAgICAgdW5jb21wcmVzc2VkRGF0YSA9IG51bGwsXG4gICAgICAgIF9leHRyYSA9IEJ1ZmZlci5hbGxvYygwKSxcbiAgICAgICAgX2V4dHJhbG9jYWwgPSBCdWZmZXIuYWxsb2MoMCksXG4gICAgICAgIF9lZnMgPSB0cnVlO1xuXG4gICAgLy8gYXNzaWduIG9wdGlvbnNcbiAgICBjb25zdCBvcHRzID0gb3B0aW9ucztcblxuICAgIGNvbnN0IGRlY29kZXIgPSB0eXBlb2Ygb3B0cy5kZWNvZGVyID09PSBcIm9iamVjdFwiID8gb3B0cy5kZWNvZGVyIDogVXRpbHMuZGVjb2RlcjtcbiAgICBfZWZzID0gZGVjb2Rlci5oYXNPd25Qcm9wZXJ0eShcImVmc1wiKSA/IGRlY29kZXIuZWZzIDogZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBnZXRDb21wcmVzc2VkRGF0YUZyb21aaXAoKSB7XG4gICAgICAgIC8vaWYgKCFpbnB1dCB8fCAhQnVmZmVyLmlzQnVmZmVyKGlucHV0KSkge1xuICAgICAgICBpZiAoIWlucHV0IHx8ICEoaW5wdXQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICAgICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKTtcbiAgICAgICAgfVxuICAgICAgICBfZXh0cmFsb2NhbCA9IF9jZW50cmFsSGVhZGVyLmxvYWRMb2NhbEhlYWRlckZyb21CaW5hcnkoaW5wdXQpO1xuICAgICAgICByZXR1cm4gaW5wdXQuc2xpY2UoX2NlbnRyYWxIZWFkZXIucmVhbERhdGFPZmZzZXQsIF9jZW50cmFsSGVhZGVyLnJlYWxEYXRhT2Zmc2V0ICsgX2NlbnRyYWxIZWFkZXIuY29tcHJlc3NlZFNpemUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyYzMyT0soZGF0YSkge1xuICAgICAgICAvLyBpZiBiaXQgMyAoMHgwOCkgb2YgdGhlIGdlbmVyYWwtcHVycG9zZSBmbGFncyBmaWVsZCBpcyBzZXQsIHRoZW4gdGhlIENSQy0zMiBhbmQgZmlsZSBzaXplcyBhcmUgbm90IGtub3duIHdoZW4gdGhlIGxvY2FsIGhlYWRlciBpcyB3cml0dGVuXG4gICAgICAgIGlmICghX2NlbnRyYWxIZWFkZXIuZmxhZ3NfZGVzYykge1xuICAgICAgICAgICAgaWYgKFV0aWxzLmNyYzMyKGRhdGEpICE9PSBfY2VudHJhbEhlYWRlci5sb2NhbEhlYWRlci5jcmMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0ge307XG4gICAgICAgICAgICBjb25zdCBkYXRhRW5kT2Zmc2V0ID0gX2NlbnRyYWxIZWFkZXIucmVhbERhdGFPZmZzZXQgKyBfY2VudHJhbEhlYWRlci5jb21wcmVzc2VkU2l6ZTtcbiAgICAgICAgICAgIC8vIG5vIGRlc2NyaXB0b3IgYWZ0ZXIgY29tcHJlc3NlZCBkYXRhLCBpbnN0ZWFkIG5ldyBsb2NhbCBoZWFkZXJcbiAgICAgICAgICAgIGlmIChpbnB1dC5yZWFkVUludDMyTEUoZGF0YUVuZE9mZnNldCkgPT0gQ29uc3RhbnRzLkxPQ1NJRyB8fCBpbnB1dC5yZWFkVUludDMyTEUoZGF0YUVuZE9mZnNldCkgPT0gQ29uc3RhbnRzLkNFTlNJRykge1xuICAgICAgICAgICAgICAgIHRocm93IFV0aWxzLkVycm9ycy5ERVNDUklQVE9SX05PVF9FWElTVCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBnZXQgZGVjcmlwdG9yIGRhdGFcbiAgICAgICAgICAgIGlmIChpbnB1dC5yZWFkVUludDMyTEUoZGF0YUVuZE9mZnNldCkgPT0gQ29uc3RhbnRzLkVYVFNJRykge1xuICAgICAgICAgICAgICAgIC8vIGRlc2NyaXB0b3Igd2l0aCBzaWduYXR1cmVcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLmNyYyA9IGlucHV0LnJlYWRVSW50MzJMRShkYXRhRW5kT2Zmc2V0ICsgQ29uc3RhbnRzLkVYVENSQyk7XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRvci5jb21wcmVzc2VkU2l6ZSA9IGlucHV0LnJlYWRVSW50MzJMRShkYXRhRW5kT2Zmc2V0ICsgQ29uc3RhbnRzLkVYVFNJWik7XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRvci5zaXplID0gaW5wdXQucmVhZFVJbnQzMkxFKGRhdGFFbmRPZmZzZXQgKyBDb25zdGFudHMuRVhUTEVOKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQucmVhZFVJbnQxNkxFKGRhdGFFbmRPZmZzZXQgKyAxMikgPT09IDB4NGI1MCkge1xuICAgICAgICAgICAgICAgIC8vIGRlc2NyaXB0b3Igd2l0aG91dCBzaWduYXR1cmUgKHdlIGNoZWNrIGlzIG5ldyBoZWFkZXIgc3RhcnRpbmcgd2hlcmUgd2UgZXhwZWN0KVxuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IuY3JjID0gaW5wdXQucmVhZFVJbnQzMkxFKGRhdGFFbmRPZmZzZXQgKyBDb25zdGFudHMuRVhUQ1JDIC0gNCk7XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRvci5jb21wcmVzc2VkU2l6ZSA9IGlucHV0LnJlYWRVSW50MzJMRShkYXRhRW5kT2Zmc2V0ICsgQ29uc3RhbnRzLkVYVFNJWiAtIDQpO1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3Iuc2l6ZSA9IGlucHV0LnJlYWRVSW50MzJMRShkYXRhRW5kT2Zmc2V0ICsgQ29uc3RhbnRzLkVYVExFTiAtIDQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBVdGlscy5FcnJvcnMuREVTQ1JJUFRPUl9VTktOT1dOKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNoZWNrIGRhdGEgaW50ZWdyaXR5XG4gICAgICAgICAgICBpZiAoZGVzY3JpcHRvci5jb21wcmVzc2VkU2l6ZSAhPT0gX2NlbnRyYWxIZWFkZXIuY29tcHJlc3NlZFNpemUgfHwgZGVzY3JpcHRvci5zaXplICE9PSBfY2VudHJhbEhlYWRlci5zaXplIHx8IGRlc2NyaXB0b3IuY3JjICE9PSBfY2VudHJhbEhlYWRlci5jcmMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBVdGlscy5FcnJvcnMuREVTQ1JJUFRPUl9GQVVMVFkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChVdGlscy5jcmMzMihkYXRhKSAhPT0gZGVzY3JpcHRvci5jcmMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEBUT0RPOiB6aXA2NCBiaXQgZGVzY3JpcHRvciBmaWVsZHNcbiAgICAgICAgICAgIC8vIGlmIGJpdCAzIGlzIHNldCBhbmQgYW55IHZhbHVlIGluIGxvY2FsIGhlYWRlciBcInppcDY0IEV4dGVuZGVkIGluZm9ybWF0aW9uXCIgZXh0cmEgZmllbGQgYXJlIHNldCAwIChwbGFjZSBob2xkZXIpXG4gICAgICAgICAgICAvLyB0aGVuIDY0LWJpdCBkZXNjcmlwdG9yIGZvcm1hdCBpcyB1c2VkIGluc3RlYWQgb2YgMzItYml0XG4gICAgICAgICAgICAvLyBjZW50cmFsIGhlYWRlciAtIFwiemlwNjQgRXh0ZW5kZWQgaW5mb3JtYXRpb25cIiBleHRyYSBmaWVsZCBzaG91bGQgc3RvcmUgcmVhbCB2YWx1ZXMgYW5kIG5vdCBwbGFjZSBob2xkZXJzXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVjb21wcmVzcygvKkJvb2xlYW4qLyBhc3luYywgLypGdW5jdGlvbiovIGNhbGxiYWNrLCAvKlN0cmluZywgQnVmZmVyKi8gcGFzcykge1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBhc3luYyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcGFzcyA9IGFzeW5jO1xuICAgICAgICAgICAgYXN5bmMgPSB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9pc0RpcmVjdG9yeSkge1xuICAgICAgICAgICAgaWYgKGFzeW5jICYmIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soQnVmZmVyLmFsbG9jKDApLCBVdGlscy5FcnJvcnMuRElSRUNUT1JZX0NPTlRFTlRfRVJST1IoKSk7IC8vc2kgYWRkZWQgZXJyb3IuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvbXByZXNzZWREYXRhID0gZ2V0Q29tcHJlc3NlZERhdGFGcm9tWmlwKCk7XG5cbiAgICAgICAgaWYgKGNvbXByZXNzZWREYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgLy8gRmlsZSBpcyBlbXB0eSwgbm90aGluZyB0byBkZWNvbXByZXNzLlxuICAgICAgICAgICAgaWYgKGFzeW5jICYmIGNhbGxiYWNrKSBjYWxsYmFjayhjb21wcmVzc2VkRGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gY29tcHJlc3NlZERhdGE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX2NlbnRyYWxIZWFkZXIuZW5jcnlwdGVkKSB7XG4gICAgICAgICAgICBpZiAoXCJzdHJpbmdcIiAhPT0gdHlwZW9mIHBhc3MgJiYgIUJ1ZmZlci5pc0J1ZmZlcihwYXNzKSkge1xuICAgICAgICAgICAgICAgIHRocm93IFV0aWxzLkVycm9ycy5JTlZBTElEX1BBU1NfUEFSQU0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXByZXNzZWREYXRhID0gTWV0aG9kcy5aaXBDcnlwdG8uZGVjcnlwdChjb21wcmVzc2VkRGF0YSwgX2NlbnRyYWxIZWFkZXIsIHBhc3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRhdGEgPSBCdWZmZXIuYWxsb2MoX2NlbnRyYWxIZWFkZXIuc2l6ZSk7XG5cbiAgICAgICAgc3dpdGNoIChfY2VudHJhbEhlYWRlci5tZXRob2QpIHtcbiAgICAgICAgICAgIGNhc2UgVXRpbHMuQ29uc3RhbnRzLlNUT1JFRDpcbiAgICAgICAgICAgICAgICBjb21wcmVzc2VkRGF0YS5jb3B5KGRhdGEpO1xuICAgICAgICAgICAgICAgIGlmICghY3JjMzJPSyhkYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXN5bmMgJiYgY2FsbGJhY2spIGNhbGxiYWNrKGRhdGEsIFV0aWxzLkVycm9ycy5CQURfQ1JDKCkpOyAvL3NpIGFkZGVkIGVycm9yXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFV0aWxzLkVycm9ycy5CQURfQ1JDKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9zaSBhZGRlZCBvdGhlcndpc2UgZGlkIG5vdCBzZWVtIHRvIHJldHVybiBkYXRhLlxuICAgICAgICAgICAgICAgICAgICBpZiAoYXN5bmMgJiYgY2FsbGJhY2spIGNhbGxiYWNrKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFV0aWxzLkNvbnN0YW50cy5ERUZMQVRFRDpcbiAgICAgICAgICAgICAgICB2YXIgaW5mbGF0ZXIgPSBuZXcgTWV0aG9kcy5JbmZsYXRlcihjb21wcmVzc2VkRGF0YSwgX2NlbnRyYWxIZWFkZXIuc2l6ZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFhc3luYykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBpbmZsYXRlci5pbmZsYXRlKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuY29weShkYXRhLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjcmMzMk9LKGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBVdGlscy5FcnJvcnMuQkFEX0NSQyhgXCIke2RlY29kZXIuZGVjb2RlKF9lbnRyeU5hbWUpfVwiYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW5mbGF0ZXIuaW5mbGF0ZUFzeW5jKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5jb3B5KHJlc3VsdCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNyYzMyT0socmVzdWx0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXN1bHQsIFV0aWxzLkVycm9ycy5CQURfQ1JDKCkpOyAvL3NpIGFkZGVkIGVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2socmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaWYgKGFzeW5jICYmIGNhbGxiYWNrKSBjYWxsYmFjayhCdWZmZXIuYWxsb2MoMCksIFV0aWxzLkVycm9ycy5VTktOT1dOX01FVEhPRCgpKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBVdGlscy5FcnJvcnMuVU5LTk9XTl9NRVRIT0QoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXByZXNzKC8qQm9vbGVhbiovIGFzeW5jLCAvKkZ1bmN0aW9uKi8gY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCghdW5jb21wcmVzc2VkRGF0YSB8fCAhdW5jb21wcmVzc2VkRGF0YS5sZW5ndGgpICYmIEJ1ZmZlci5pc0J1ZmZlcihpbnB1dCkpIHtcbiAgICAgICAgICAgIC8vIG5vIGRhdGEgc2V0IG9yIHRoZSBkYXRhIHdhc24ndCBjaGFuZ2VkIHRvIHJlcXVpcmUgcmVjb21wcmVzc2lvblxuICAgICAgICAgICAgaWYgKGFzeW5jICYmIGNhbGxiYWNrKSBjYWxsYmFjayhnZXRDb21wcmVzc2VkRGF0YUZyb21aaXAoKSk7XG4gICAgICAgICAgICByZXR1cm4gZ2V0Q29tcHJlc3NlZERhdGFGcm9tWmlwKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodW5jb21wcmVzc2VkRGF0YS5sZW5ndGggJiYgIV9pc0RpcmVjdG9yeSkge1xuICAgICAgICAgICAgdmFyIGNvbXByZXNzZWREYXRhO1xuICAgICAgICAgICAgLy8gTG9jYWwgZmlsZSBoZWFkZXJcbiAgICAgICAgICAgIHN3aXRjaCAoX2NlbnRyYWxIZWFkZXIubWV0aG9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBVdGlscy5Db25zdGFudHMuU1RPUkVEOlxuICAgICAgICAgICAgICAgICAgICBfY2VudHJhbEhlYWRlci5jb21wcmVzc2VkU2l6ZSA9IF9jZW50cmFsSGVhZGVyLnNpemU7XG5cbiAgICAgICAgICAgICAgICAgICAgY29tcHJlc3NlZERhdGEgPSBCdWZmZXIuYWxsb2ModW5jb21wcmVzc2VkRGF0YS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICB1bmNvbXByZXNzZWREYXRhLmNvcHkoY29tcHJlc3NlZERhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhc3luYyAmJiBjYWxsYmFjaykgY2FsbGJhY2soY29tcHJlc3NlZERhdGEpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29tcHJlc3NlZERhdGE7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjYXNlIFV0aWxzLkNvbnN0YW50cy5ERUZMQVRFRDpcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmxhdGVyID0gbmV3IE1ldGhvZHMuRGVmbGF0ZXIodW5jb21wcmVzc2VkRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghYXN5bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWZsYXRlZCA9IGRlZmxhdGVyLmRlZmxhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jZW50cmFsSGVhZGVyLmNvbXByZXNzZWRTaXplID0gZGVmbGF0ZWQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZmxhdGVkO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmbGF0ZXIuZGVmbGF0ZUFzeW5jKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcHJlc3NlZERhdGEgPSBCdWZmZXIuYWxsb2MoZGF0YS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jZW50cmFsSGVhZGVyLmNvbXByZXNzZWRTaXplID0gZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5jb3B5KGNvbXByZXNzZWREYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhjb21wcmVzc2VkRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkZWZsYXRlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGFzeW5jICYmIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhCdWZmZXIuYWxsb2MoMCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlYWRVSW50NjRMRShidWZmZXIsIG9mZnNldCkge1xuICAgICAgICByZXR1cm4gKGJ1ZmZlci5yZWFkVUludDMyTEUob2Zmc2V0ICsgNCkgPDwgNCkgKyBidWZmZXIucmVhZFVJbnQzMkxFKG9mZnNldCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VFeHRyYShkYXRhKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIHZhciBzaWduYXR1cmUsIHNpemUsIHBhcnQ7XG4gICAgICAgICAgICB3aGlsZSAob2Zmc2V0ICsgNCA8IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc2lnbmF0dXJlID0gZGF0YS5yZWFkVUludDE2TEUob2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gMjtcbiAgICAgICAgICAgICAgICBzaXplID0gZGF0YS5yZWFkVUludDE2TEUob2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gMjtcbiAgICAgICAgICAgICAgICBwYXJ0ID0gZGF0YS5zbGljZShvZmZzZXQsIG9mZnNldCArIHNpemUpO1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSBzaXplO1xuICAgICAgICAgICAgICAgIGlmIChDb25zdGFudHMuSURfWklQNjQgPT09IHNpZ25hdHVyZSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJzZVppcDY0RXh0ZW5kZWRJbmZvcm1hdGlvbihwYXJ0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBVdGlscy5FcnJvcnMuRVhUUkFfRklFTERfUEFSU0VfRVJST1IoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vT3ZlcnJpZGUgaGVhZGVyIGZpZWxkIHZhbHVlcyB3aXRoIHZhbHVlcyBmcm9tIHRoZSBaSVA2NCBleHRyYSBmaWVsZFxuICAgIGZ1bmN0aW9uIHBhcnNlWmlwNjRFeHRlbmRlZEluZm9ybWF0aW9uKGRhdGEpIHtcbiAgICAgICAgdmFyIHNpemUsIGNvbXByZXNzZWRTaXplLCBvZmZzZXQsIGRpc2tOdW1TdGFydDtcblxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPj0gQ29uc3RhbnRzLkVGX1pJUDY0X1NDT01QKSB7XG4gICAgICAgICAgICBzaXplID0gcmVhZFVJbnQ2NExFKGRhdGEsIENvbnN0YW50cy5FRl9aSVA2NF9TVU5DT01QKTtcbiAgICAgICAgICAgIGlmIChfY2VudHJhbEhlYWRlci5zaXplID09PSBDb25zdGFudHMuRUZfWklQNjRfT1JfMzIpIHtcbiAgICAgICAgICAgICAgICBfY2VudHJhbEhlYWRlci5zaXplID0gc2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPj0gQ29uc3RhbnRzLkVGX1pJUDY0X1JITykge1xuICAgICAgICAgICAgY29tcHJlc3NlZFNpemUgPSByZWFkVUludDY0TEUoZGF0YSwgQ29uc3RhbnRzLkVGX1pJUDY0X1NDT01QKTtcbiAgICAgICAgICAgIGlmIChfY2VudHJhbEhlYWRlci5jb21wcmVzc2VkU2l6ZSA9PT0gQ29uc3RhbnRzLkVGX1pJUDY0X09SXzMyKSB7XG4gICAgICAgICAgICAgICAgX2NlbnRyYWxIZWFkZXIuY29tcHJlc3NlZFNpemUgPSBjb21wcmVzc2VkU2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPj0gQ29uc3RhbnRzLkVGX1pJUDY0X0RTTikge1xuICAgICAgICAgICAgb2Zmc2V0ID0gcmVhZFVJbnQ2NExFKGRhdGEsIENvbnN0YW50cy5FRl9aSVA2NF9SSE8pO1xuICAgICAgICAgICAgaWYgKF9jZW50cmFsSGVhZGVyLm9mZnNldCA9PT0gQ29uc3RhbnRzLkVGX1pJUDY0X09SXzMyKSB7XG4gICAgICAgICAgICAgICAgX2NlbnRyYWxIZWFkZXIub2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA+PSBDb25zdGFudHMuRUZfWklQNjRfRFNOICsgNCkge1xuICAgICAgICAgICAgZGlza051bVN0YXJ0ID0gZGF0YS5yZWFkVUludDMyTEUoQ29uc3RhbnRzLkVGX1pJUDY0X0RTTik7XG4gICAgICAgICAgICBpZiAoX2NlbnRyYWxIZWFkZXIuZGlza051bVN0YXJ0ID09PSBDb25zdGFudHMuRUZfWklQNjRfT1JfMTYpIHtcbiAgICAgICAgICAgICAgICBfY2VudHJhbEhlYWRlci5kaXNrTnVtU3RhcnQgPSBkaXNrTnVtU3RhcnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBnZXQgZW50cnlOYW1lKCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlY29kZXIuZGVjb2RlKF9lbnRyeU5hbWUpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgcmF3RW50cnlOYW1lKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9lbnRyeU5hbWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCBlbnRyeU5hbWUodmFsKSB7XG4gICAgICAgICAgICBfZW50cnlOYW1lID0gVXRpbHMudG9CdWZmZXIodmFsLCBkZWNvZGVyLmVuY29kZSk7XG4gICAgICAgICAgICB2YXIgbGFzdENoYXIgPSBfZW50cnlOYW1lW19lbnRyeU5hbWUubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBfaXNEaXJlY3RvcnkgPSBsYXN0Q2hhciA9PT0gNDcgfHwgbGFzdENoYXIgPT09IDkyO1xuICAgICAgICAgICAgX2NlbnRyYWxIZWFkZXIuZmlsZU5hbWVMZW5ndGggPSBfZW50cnlOYW1lLmxlbmd0aDtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgZWZzKCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBfZWZzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2Vmcyh0aGlzLmVudHJ5TmFtZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBfZWZzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBleHRyYSgpIHtcbiAgICAgICAgICAgIHJldHVybiBfZXh0cmE7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCBleHRyYSh2YWwpIHtcbiAgICAgICAgICAgIF9leHRyYSA9IHZhbDtcbiAgICAgICAgICAgIF9jZW50cmFsSGVhZGVyLmV4dHJhTGVuZ3RoID0gdmFsLmxlbmd0aDtcbiAgICAgICAgICAgIHBhcnNlRXh0cmEodmFsKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgY29tbWVudCgpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWNvZGVyLmRlY29kZShfY29tbWVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCBjb21tZW50KHZhbCkge1xuICAgICAgICAgICAgX2NvbW1lbnQgPSBVdGlscy50b0J1ZmZlcih2YWwsIGRlY29kZXIuZW5jb2RlKTtcbiAgICAgICAgICAgIF9jZW50cmFsSGVhZGVyLmNvbW1lbnRMZW5ndGggPSBfY29tbWVudC5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoX2NvbW1lbnQubGVuZ3RoID4gMHhmZmZmKSB0aHJvdyBVdGlscy5FcnJvcnMuQ09NTUVOVF9UT09fTE9ORygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBuYW1lKCkge1xuICAgICAgICAgICAgdmFyIG4gPSBkZWNvZGVyLmRlY29kZShfZW50cnlOYW1lKTtcbiAgICAgICAgICAgIHJldHVybiBfaXNEaXJlY3RvcnlcbiAgICAgICAgICAgICAgICA/IG5cbiAgICAgICAgICAgICAgICAgICAgICAuc3Vic3RyKG4ubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgICAgICAgICAgICAuc3BsaXQoXCIvXCIpXG4gICAgICAgICAgICAgICAgICAgICAgLnBvcCgpXG4gICAgICAgICAgICAgICAgOiBuLnNwbGl0KFwiL1wiKS5wb3AoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IGlzRGlyZWN0b3J5KCkge1xuICAgICAgICAgICAgcmV0dXJuIF9pc0RpcmVjdG9yeTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRDb21wcmVzc2VkRGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbXByZXNzKGZhbHNlLCBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRDb21wcmVzc2VkRGF0YUFzeW5jOiBmdW5jdGlvbiAoLypGdW5jdGlvbiovIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjb21wcmVzcyh0cnVlLCBjYWxsYmFjayk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0RGF0YTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB1bmNvbXByZXNzZWREYXRhID0gVXRpbHMudG9CdWZmZXIodmFsdWUsIFV0aWxzLmRlY29kZXIuZW5jb2RlKTtcbiAgICAgICAgICAgIGlmICghX2lzRGlyZWN0b3J5ICYmIHVuY29tcHJlc3NlZERhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgX2NlbnRyYWxIZWFkZXIuc2l6ZSA9IHVuY29tcHJlc3NlZERhdGEubGVuZ3RoO1xuICAgICAgICAgICAgICAgIF9jZW50cmFsSGVhZGVyLm1ldGhvZCA9IFV0aWxzLkNvbnN0YW50cy5ERUZMQVRFRDtcbiAgICAgICAgICAgICAgICBfY2VudHJhbEhlYWRlci5jcmMgPSBVdGlscy5jcmMzMih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgX2NlbnRyYWxIZWFkZXIuY2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGZvbGRlcnMgYW5kIGJsYW5rIGZpbGVzIHNob3VsZCBiZSBzdG9yZWRcbiAgICAgICAgICAgICAgICBfY2VudHJhbEhlYWRlci5tZXRob2QgPSBVdGlscy5Db25zdGFudHMuU1RPUkVEO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGdldERhdGE6IGZ1bmN0aW9uIChwYXNzKSB7XG4gICAgICAgICAgICBpZiAoX2NlbnRyYWxIZWFkZXIuY2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmNvbXByZXNzZWREYXRhO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVjb21wcmVzcyhmYWxzZSwgbnVsbCwgcGFzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0RGF0YUFzeW5jOiBmdW5jdGlvbiAoLypGdW5jdGlvbiovIGNhbGxiYWNrLCBwYXNzKSB7XG4gICAgICAgICAgICBpZiAoX2NlbnRyYWxIZWFkZXIuY2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHVuY29tcHJlc3NlZERhdGEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWNvbXByZXNzKHRydWUsIGNhbGxiYWNrLCBwYXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBzZXQgYXR0cihhdHRyKSB7XG4gICAgICAgICAgICBfY2VudHJhbEhlYWRlci5hdHRyID0gYXR0cjtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IGF0dHIoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2NlbnRyYWxIZWFkZXIuYXR0cjtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXQgaGVhZGVyKC8qQnVmZmVyKi8gZGF0YSkge1xuICAgICAgICAgICAgX2NlbnRyYWxIZWFkZXIubG9hZEZyb21CaW5hcnkoZGF0YSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IGhlYWRlcigpIHtcbiAgICAgICAgICAgIHJldHVybiBfY2VudHJhbEhlYWRlcjtcbiAgICAgICAgfSxcblxuICAgICAgICBwYWNrQ2VudHJhbEhlYWRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX2NlbnRyYWxIZWFkZXIuZmxhZ3NfZWZzID0gdGhpcy5lZnM7XG4gICAgICAgICAgICBfY2VudHJhbEhlYWRlci5leHRyYUxlbmd0aCA9IF9leHRyYS5sZW5ndGg7XG4gICAgICAgICAgICAvLyAxLiBjcmVhdGUgaGVhZGVyIChidWZmZXIpXG4gICAgICAgICAgICB2YXIgaGVhZGVyID0gX2NlbnRyYWxIZWFkZXIuY2VudHJhbEhlYWRlclRvQmluYXJ5KCk7XG4gICAgICAgICAgICB2YXIgYWRkcG9zID0gVXRpbHMuQ29uc3RhbnRzLkNFTkhEUjtcbiAgICAgICAgICAgIC8vIDIuIGFkZCBmaWxlIG5hbWVcbiAgICAgICAgICAgIF9lbnRyeU5hbWUuY29weShoZWFkZXIsIGFkZHBvcyk7XG4gICAgICAgICAgICBhZGRwb3MgKz0gX2VudHJ5TmFtZS5sZW5ndGg7XG4gICAgICAgICAgICAvLyAzLiBhZGQgZXh0cmEgZGF0YVxuICAgICAgICAgICAgX2V4dHJhLmNvcHkoaGVhZGVyLCBhZGRwb3MpO1xuICAgICAgICAgICAgYWRkcG9zICs9IF9jZW50cmFsSGVhZGVyLmV4dHJhTGVuZ3RoO1xuICAgICAgICAgICAgLy8gNC4gYWRkIGZpbGUgY29tbWVudFxuICAgICAgICAgICAgX2NvbW1lbnQuY29weShoZWFkZXIsIGFkZHBvcyk7XG4gICAgICAgICAgICByZXR1cm4gaGVhZGVyO1xuICAgICAgICB9LFxuXG4gICAgICAgIHBhY2tMb2NhbEhlYWRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGV0IGFkZHBvcyA9IDA7XG4gICAgICAgICAgICBfY2VudHJhbEhlYWRlci5mbGFnc19lZnMgPSB0aGlzLmVmcztcbiAgICAgICAgICAgIF9jZW50cmFsSGVhZGVyLmV4dHJhTG9jYWxMZW5ndGggPSBfZXh0cmFsb2NhbC5sZW5ndGg7XG4gICAgICAgICAgICAvLyAxLiBjb25zdHJ1Y3QgbG9jYWwgaGVhZGVyIEJ1ZmZlclxuICAgICAgICAgICAgY29uc3QgbG9jYWxIZWFkZXJCdWYgPSBfY2VudHJhbEhlYWRlci5sb2NhbEhlYWRlclRvQmluYXJ5KCk7XG4gICAgICAgICAgICAvLyAyLiBsb2NhbEhlYWRlciAtIGNyYXRlIGhlYWRlciBidWZmZXJcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsSGVhZGVyID0gQnVmZmVyLmFsbG9jKGxvY2FsSGVhZGVyQnVmLmxlbmd0aCArIF9lbnRyeU5hbWUubGVuZ3RoICsgX2NlbnRyYWxIZWFkZXIuZXh0cmFMb2NhbExlbmd0aCk7XG4gICAgICAgICAgICAvLyAyLjEgYWRkIGxvY2FsaGVhZGVyXG4gICAgICAgICAgICBsb2NhbEhlYWRlckJ1Zi5jb3B5KGxvY2FsSGVhZGVyLCBhZGRwb3MpO1xuICAgICAgICAgICAgYWRkcG9zICs9IGxvY2FsSGVhZGVyQnVmLmxlbmd0aDtcbiAgICAgICAgICAgIC8vIDIuMiBhZGQgZmlsZSBuYW1lXG4gICAgICAgICAgICBfZW50cnlOYW1lLmNvcHkobG9jYWxIZWFkZXIsIGFkZHBvcyk7XG4gICAgICAgICAgICBhZGRwb3MgKz0gX2VudHJ5TmFtZS5sZW5ndGg7XG4gICAgICAgICAgICAvLyAyLjMgYWRkIGV4dHJhIGZpZWxkXG4gICAgICAgICAgICBfZXh0cmFsb2NhbC5jb3B5KGxvY2FsSGVhZGVyLCBhZGRwb3MpO1xuICAgICAgICAgICAgYWRkcG9zICs9IF9leHRyYWxvY2FsLmxlbmd0aDtcblxuICAgICAgICAgICAgcmV0dXJuIGxvY2FsSGVhZGVyO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRvSlNPTjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSBmdW5jdGlvbiAobnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCI8XCIgKyAoKG5yICYmIG5yLmxlbmd0aCArIFwiIGJ5dGVzIGJ1ZmZlclwiKSB8fCBcIm51bGxcIikgKyBcIj5cIjtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZW50cnlOYW1lOiB0aGlzLmVudHJ5TmFtZSxcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICAgICAgY29tbWVudDogdGhpcy5jb21tZW50LFxuICAgICAgICAgICAgICAgIGlzRGlyZWN0b3J5OiB0aGlzLmlzRGlyZWN0b3J5LFxuICAgICAgICAgICAgICAgIGhlYWRlcjogX2NlbnRyYWxIZWFkZXIudG9KU09OKCksXG4gICAgICAgICAgICAgICAgY29tcHJlc3NlZERhdGE6IGJ5dGVzKGlucHV0KSxcbiAgICAgICAgICAgICAgICBkYXRhOiBieXRlcyh1bmNvbXByZXNzZWREYXRhKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudG9KU09OKCksIG51bGwsIFwiXFx0XCIpO1xuICAgICAgICB9XG4gICAgfTtcbn07XG4iLCAiY29uc3QgWmlwRW50cnkgPSByZXF1aXJlKFwiLi96aXBFbnRyeVwiKTtcbmNvbnN0IEhlYWRlcnMgPSByZXF1aXJlKFwiLi9oZWFkZXJzXCIpO1xuY29uc3QgVXRpbHMgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgvKkJ1ZmZlcnxudWxsKi8gaW5CdWZmZXIsIC8qKiBvYmplY3QgKi8gb3B0aW9ucykge1xuICAgIHZhciBlbnRyeUxpc3QgPSBbXSxcbiAgICAgICAgZW50cnlUYWJsZSA9IHt9LFxuICAgICAgICBfY29tbWVudCA9IEJ1ZmZlci5hbGxvYygwKSxcbiAgICAgICAgbWFpbkhlYWRlciA9IG5ldyBIZWFkZXJzLk1haW5IZWFkZXIoKSxcbiAgICAgICAgbG9hZGVkRW50cmllcyA9IGZhbHNlO1xuICAgIHZhciBwYXNzd29yZCA9IG51bGw7XG4gICAgY29uc3QgdGVtcG9yYXJ5ID0gbmV3IFNldCgpO1xuXG4gICAgLy8gYXNzaWduIG9wdGlvbnNcbiAgICBjb25zdCBvcHRzID0gb3B0aW9ucztcblxuICAgIGNvbnN0IHsgbm9Tb3J0LCBkZWNvZGVyIH0gPSBvcHRzO1xuXG4gICAgaWYgKGluQnVmZmVyKSB7XG4gICAgICAgIC8vIGlzIGEgbWVtb3J5IGJ1ZmZlclxuICAgICAgICByZWFkTWFpbkhlYWRlcihvcHRzLnJlYWRFbnRyaWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBub25lLiBpcyBhIG5ldyBmaWxlXG4gICAgICAgIGxvYWRlZEVudHJpZXMgPSB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VUZW1wb3JhcnlGb2xkZXJzKCkge1xuICAgICAgICBjb25zdCBmb2xkZXJzTGlzdCA9IG5ldyBTZXQoKTtcblxuICAgICAgICAvLyBNYWtlIGxpc3Qgb2YgYWxsIGZvbGRlcnMgaW4gZmlsZVxuICAgICAgICBmb3IgKGNvbnN0IGVsZW0gb2YgT2JqZWN0LmtleXMoZW50cnlUYWJsZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRzID0gZWxlbS5zcGxpdChcIi9cIik7XG4gICAgICAgICAgICBlbGVtZW50cy5wb3AoKTsgLy8gZmlsZW5hbWVcbiAgICAgICAgICAgIGlmICghZWxlbWVudHMubGVuZ3RoKSBjb250aW51ZTsgLy8gbm8gZm9sZGVyc1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN1YiA9IGVsZW1lbnRzLnNsaWNlKDAsIGkgKyAxKS5qb2luKFwiL1wiKSArIFwiL1wiO1xuICAgICAgICAgICAgICAgIGZvbGRlcnNMaXN0LmFkZChzdWIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY3JlYXRlIG1pc3NpbmcgZm9sZGVycyBhcyB0ZW1wb3JhcnlcbiAgICAgICAgZm9yIChjb25zdCBlbGVtIG9mIGZvbGRlcnNMaXN0KSB7XG4gICAgICAgICAgICBpZiAoIShlbGVtIGluIGVudHJ5VGFibGUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcGZvbGRlciA9IG5ldyBaaXBFbnRyeShvcHRzKTtcbiAgICAgICAgICAgICAgICB0ZW1wZm9sZGVyLmVudHJ5TmFtZSA9IGVsZW07XG4gICAgICAgICAgICAgICAgdGVtcGZvbGRlci5hdHRyID0gMHgxMDtcbiAgICAgICAgICAgICAgICB0ZW1wZm9sZGVyLnRlbXBvcmFyeSA9IHRydWU7XG4gICAgICAgICAgICAgICAgZW50cnlMaXN0LnB1c2godGVtcGZvbGRlcik7XG4gICAgICAgICAgICAgICAgZW50cnlUYWJsZVt0ZW1wZm9sZGVyLmVudHJ5TmFtZV0gPSB0ZW1wZm9sZGVyO1xuICAgICAgICAgICAgICAgIHRlbXBvcmFyeS5hZGQodGVtcGZvbGRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWFkRW50cmllcygpIHtcbiAgICAgICAgbG9hZGVkRW50cmllcyA9IHRydWU7XG4gICAgICAgIGVudHJ5VGFibGUgPSB7fTtcbiAgICAgICAgaWYgKG1haW5IZWFkZXIuZGlza0VudHJpZXMgPiAoaW5CdWZmZXIubGVuZ3RoIC0gbWFpbkhlYWRlci5vZmZzZXQpIC8gVXRpbHMuQ29uc3RhbnRzLkNFTkhEUikge1xuICAgICAgICAgICAgdGhyb3cgVXRpbHMuRXJyb3JzLkRJU0tfRU5UUllfVE9PX0xBUkdFKCk7XG4gICAgICAgIH1cbiAgICAgICAgZW50cnlMaXN0ID0gbmV3IEFycmF5KG1haW5IZWFkZXIuZGlza0VudHJpZXMpOyAvLyB0b3RhbCBudW1iZXIgb2YgZW50cmllc1xuICAgICAgICB2YXIgaW5kZXggPSBtYWluSGVhZGVyLm9mZnNldDsgLy8gb2Zmc2V0IG9mIGZpcnN0IENFTiBoZWFkZXJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbnRyeUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciB0bXAgPSBpbmRleCxcbiAgICAgICAgICAgICAgICBlbnRyeSA9IG5ldyBaaXBFbnRyeShvcHRzLCBpbkJ1ZmZlcik7XG4gICAgICAgICAgICBlbnRyeS5oZWFkZXIgPSBpbkJ1ZmZlci5zbGljZSh0bXAsICh0bXAgKz0gVXRpbHMuQ29uc3RhbnRzLkNFTkhEUikpO1xuXG4gICAgICAgICAgICBlbnRyeS5lbnRyeU5hbWUgPSBpbkJ1ZmZlci5zbGljZSh0bXAsICh0bXAgKz0gZW50cnkuaGVhZGVyLmZpbGVOYW1lTGVuZ3RoKSk7XG5cbiAgICAgICAgICAgIGlmIChlbnRyeS5oZWFkZXIuZXh0cmFMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBlbnRyeS5leHRyYSA9IGluQnVmZmVyLnNsaWNlKHRtcCwgKHRtcCArPSBlbnRyeS5oZWFkZXIuZXh0cmFMZW5ndGgpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVudHJ5LmhlYWRlci5jb21tZW50TGVuZ3RoKSBlbnRyeS5jb21tZW50ID0gaW5CdWZmZXIuc2xpY2UodG1wLCB0bXAgKyBlbnRyeS5oZWFkZXIuY29tbWVudExlbmd0aCk7XG5cbiAgICAgICAgICAgIGluZGV4ICs9IGVudHJ5LmhlYWRlci5jZW50cmFsSGVhZGVyU2l6ZTtcblxuICAgICAgICAgICAgZW50cnlMaXN0W2ldID0gZW50cnk7XG4gICAgICAgICAgICBlbnRyeVRhYmxlW2VudHJ5LmVudHJ5TmFtZV0gPSBlbnRyeTtcbiAgICAgICAgfVxuICAgICAgICB0ZW1wb3JhcnkuY2xlYXIoKTtcbiAgICAgICAgbWFrZVRlbXBvcmFyeUZvbGRlcnMoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWFkTWFpbkhlYWRlcigvKkJvb2xlYW4qLyByZWFkTm93KSB7XG4gICAgICAgIHZhciBpID0gaW5CdWZmZXIubGVuZ3RoIC0gVXRpbHMuQ29uc3RhbnRzLkVOREhEUiwgLy8gRU5EIGhlYWRlciBzaXplXG4gICAgICAgICAgICBtYXggPSBNYXRoLm1heCgwLCBpIC0gMHhmZmZmKSwgLy8gMHhGRkZGIGlzIHRoZSBtYXggemlwIGZpbGUgY29tbWVudCBsZW5ndGhcbiAgICAgICAgICAgIG4gPSBtYXgsXG4gICAgICAgICAgICBlbmRTdGFydCA9IGluQnVmZmVyLmxlbmd0aCxcbiAgICAgICAgICAgIGVuZE9mZnNldCA9IC0xLCAvLyBTdGFydCBvZmZzZXQgb2YgdGhlIEVORCBoZWFkZXJcbiAgICAgICAgICAgIGNvbW1lbnRFbmQgPSAwO1xuXG4gICAgICAgIC8vIG9wdGlvbiB0byBzZWFyY2ggaGVhZGVyIGZvcm0gZW50aXJlIGZpbGVcbiAgICAgICAgY29uc3QgdHJhaWxpbmdTcGFjZSA9IHR5cGVvZiBvcHRzLnRyYWlsaW5nU3BhY2UgPT09IFwiYm9vbGVhblwiID8gb3B0cy50cmFpbGluZ1NwYWNlIDogZmFsc2U7XG4gICAgICAgIGlmICh0cmFpbGluZ1NwYWNlKSBtYXggPSAwO1xuXG4gICAgICAgIGZvciAoaTsgaSA+PSBuOyBpLS0pIHtcbiAgICAgICAgICAgIGlmIChpbkJ1ZmZlcltpXSAhPT0gMHg1MCkgY29udGludWU7IC8vIHF1aWNrIGNoZWNrIHRoYXQgdGhlIGJ5dGUgaXMgJ1AnXG4gICAgICAgICAgICBpZiAoaW5CdWZmZXIucmVhZFVJbnQzMkxFKGkpID09PSBVdGlscy5Db25zdGFudHMuRU5EU0lHKSB7XG4gICAgICAgICAgICAgICAgLy8gXCJQS1xcMDA1XFwwMDZcIlxuICAgICAgICAgICAgICAgIGVuZE9mZnNldCA9IGk7XG4gICAgICAgICAgICAgICAgY29tbWVudEVuZCA9IGk7XG4gICAgICAgICAgICAgICAgZW5kU3RhcnQgPSBpICsgVXRpbHMuQ29uc3RhbnRzLkVOREhEUjtcbiAgICAgICAgICAgICAgICAvLyBXZSBhbHJlYWR5IGZvdW5kIGEgcmVndWxhciBzaWduYXR1cmUsIGxldCdzIGxvb2sganVzdCBhIGJpdCBmdXJ0aGVyIHRvIGNoZWNrIGlmIHRoZXJlJ3MgYW55IHppcDY0IHNpZ25hdHVyZVxuICAgICAgICAgICAgICAgIG4gPSBpIC0gVXRpbHMuQ29uc3RhbnRzLkVORDY0SERSO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaW5CdWZmZXIucmVhZFVJbnQzMkxFKGkpID09PSBVdGlscy5Db25zdGFudHMuRU5ENjRTSUcpIHtcbiAgICAgICAgICAgICAgICAvLyBGb3VuZCBhIHppcDY0IHNpZ25hdHVyZSwgbGV0J3MgY29udGludWUgcmVhZGluZyB0aGUgd2hvbGUgemlwNjQgcmVjb3JkXG4gICAgICAgICAgICAgICAgbiA9IG1heDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGluQnVmZmVyLnJlYWRVSW50MzJMRShpKSA9PT0gVXRpbHMuQ29uc3RhbnRzLlpJUDY0U0lHKSB7XG4gICAgICAgICAgICAgICAgLy8gRm91bmQgdGhlIHppcDY0IHJlY29yZCwgbGV0J3MgZGV0ZXJtaW5lIGl0J3Mgc2l6ZVxuICAgICAgICAgICAgICAgIGVuZE9mZnNldCA9IGk7XG4gICAgICAgICAgICAgICAgZW5kU3RhcnQgPSBpICsgVXRpbHMucmVhZEJpZ1VJbnQ2NExFKGluQnVmZmVyLCBpICsgVXRpbHMuQ29uc3RhbnRzLlpJUDY0U0laRSkgKyBVdGlscy5Db25zdGFudHMuWklQNjRMRUFEO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVuZE9mZnNldCA9PSAtMSkgdGhyb3cgVXRpbHMuRXJyb3JzLklOVkFMSURfRk9STUFUKCk7XG5cbiAgICAgICAgbWFpbkhlYWRlci5sb2FkRnJvbUJpbmFyeShpbkJ1ZmZlci5zbGljZShlbmRPZmZzZXQsIGVuZFN0YXJ0KSk7XG4gICAgICAgIGlmIChtYWluSGVhZGVyLmNvbW1lbnRMZW5ndGgpIHtcbiAgICAgICAgICAgIF9jb21tZW50ID0gaW5CdWZmZXIuc2xpY2UoY29tbWVudEVuZCArIFV0aWxzLkNvbnN0YW50cy5FTkRIRFIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZWFkTm93KSByZWFkRW50cmllcygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNvcnRFbnRyaWVzKCkge1xuICAgICAgICBpZiAoZW50cnlMaXN0Lmxlbmd0aCA+IDEgJiYgIW5vU29ydCkge1xuICAgICAgICAgICAgZW50cnlMaXN0LnNvcnQoKGEsIGIpID0+IGEuZW50cnlOYW1lLnRvTG93ZXJDYXNlKCkubG9jYWxlQ29tcGFyZShiLmVudHJ5TmFtZS50b0xvd2VyQ2FzZSgpKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBaaXBFbnRyeSBvYmplY3RzIGV4aXN0ZW50IGluIHRoZSBjdXJyZW50IG9wZW5lZCBhcmNoaXZlXG4gICAgICAgICAqIEByZXR1cm4gQXJyYXlcbiAgICAgICAgICovXG4gICAgICAgIGdldCBlbnRyaWVzKCkge1xuICAgICAgICAgICAgaWYgKCFsb2FkZWRFbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgcmVhZEVudHJpZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlbnRyeUxpc3QuZmlsdGVyKChlKSA9PiAhdGVtcG9yYXJ5LmhhcyhlKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFyY2hpdmUgY29tbWVudFxuICAgICAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICBnZXQgY29tbWVudCgpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWNvZGVyLmRlY29kZShfY29tbWVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCBjb21tZW50KHZhbCkge1xuICAgICAgICAgICAgX2NvbW1lbnQgPSBVdGlscy50b0J1ZmZlcih2YWwsIGRlY29kZXIuZW5jb2RlKTtcbiAgICAgICAgICAgIG1haW5IZWFkZXIuY29tbWVudExlbmd0aCA9IF9jb21tZW50Lmxlbmd0aDtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRFbnRyeUNvdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWxvYWRlZEVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFpbkhlYWRlci5kaXNrRW50cmllcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGVudHJ5TGlzdC5sZW5ndGg7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZm9yRWFjaDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLmVudHJpZXMuZm9yRWFjaChjYWxsYmFjayk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhlIGVudHJ5IHdpdGggdGhlIGdpdmVuIG5hbWUgb3IgbnVsbCBpZiBlbnRyeSBpcyBpbmV4aXN0ZW50XG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBlbnRyeU5hbWVcbiAgICAgICAgICogQHJldHVybiBaaXBFbnRyeVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0RW50cnk6IGZ1bmN0aW9uICgvKlN0cmluZyovIGVudHJ5TmFtZSkge1xuICAgICAgICAgICAgaWYgKCFsb2FkZWRFbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgcmVhZEVudHJpZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlbnRyeVRhYmxlW2VudHJ5TmFtZV0gfHwgbnVsbDtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkcyB0aGUgZ2l2ZW4gZW50cnkgdG8gdGhlIGVudHJ5IGxpc3RcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGVudHJ5XG4gICAgICAgICAqL1xuICAgICAgICBzZXRFbnRyeTogZnVuY3Rpb24gKC8qWmlwRW50cnkqLyBlbnRyeSkge1xuICAgICAgICAgICAgaWYgKCFsb2FkZWRFbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgcmVhZEVudHJpZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVudHJ5TGlzdC5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgIGVudHJ5VGFibGVbZW50cnkuZW50cnlOYW1lXSA9IGVudHJ5O1xuICAgICAgICAgICAgbWFpbkhlYWRlci50b3RhbEVudHJpZXMgPSBlbnRyeUxpc3QubGVuZ3RoO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW1vdmVzIHRoZSBmaWxlIHdpdGggdGhlIGdpdmVuIG5hbWUgZnJvbSB0aGUgZW50cnkgbGlzdC5cbiAgICAgICAgICpcbiAgICAgICAgICogSWYgdGhlIGVudHJ5IGlzIGEgZGlyZWN0b3J5LCB0aGVuIGFsbCBuZXN0ZWQgZmlsZXMgYW5kIGRpcmVjdG9yaWVzIHdpbGwgYmUgcmVtb3ZlZFxuICAgICAgICAgKiBAcGFyYW0gZW50cnlOYW1lXG4gICAgICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAgICAgKi9cbiAgICAgICAgZGVsZXRlRmlsZTogZnVuY3Rpb24gKC8qU3RyaW5nKi8gZW50cnlOYW1lLCB3aXRoc3ViZm9sZGVycyA9IHRydWUpIHtcbiAgICAgICAgICAgIGlmICghbG9hZGVkRW50cmllcykge1xuICAgICAgICAgICAgICAgIHJlYWRFbnRyaWVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBlbnRyeSA9IGVudHJ5VGFibGVbZW50cnlOYW1lXTtcbiAgICAgICAgICAgIGNvbnN0IGxpc3QgPSB0aGlzLmdldEVudHJ5Q2hpbGRyZW4oZW50cnksIHdpdGhzdWJmb2xkZXJzKS5tYXAoKGNoaWxkKSA9PiBjaGlsZC5lbnRyeU5hbWUpO1xuXG4gICAgICAgICAgICBsaXN0LmZvckVhY2godGhpcy5kZWxldGVFbnRyeSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW92ZXMgdGhlIGVudHJ5IHdpdGggdGhlIGdpdmVuIG5hbWUgZnJvbSB0aGUgZW50cnkgbGlzdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGVudHJ5TmFtZVxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgICAgICovXG4gICAgICAgIGRlbGV0ZUVudHJ5OiBmdW5jdGlvbiAoLypTdHJpbmcqLyBlbnRyeU5hbWUpIHtcbiAgICAgICAgICAgIGlmICghbG9hZGVkRW50cmllcykge1xuICAgICAgICAgICAgICAgIHJlYWRFbnRyaWVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBlbnRyeSA9IGVudHJ5VGFibGVbZW50cnlOYW1lXTtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gZW50cnlMaXN0LmluZGV4T2YoZW50cnkpO1xuICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICBlbnRyeUxpc3Quc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgZW50cnlUYWJsZVtlbnRyeU5hbWVdO1xuICAgICAgICAgICAgICAgIG1haW5IZWFkZXIudG90YWxFbnRyaWVzID0gZW50cnlMaXN0Lmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogIEl0ZXJhdGVzIGFuZCByZXR1cm5zIGFsbCBuZXN0ZWQgZmlsZXMgYW5kIGRpcmVjdG9yaWVzIG9mIHRoZSBnaXZlbiBlbnRyeVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gZW50cnlcbiAgICAgICAgICogQHJldHVybiBBcnJheVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0RW50cnlDaGlsZHJlbjogZnVuY3Rpb24gKC8qWmlwRW50cnkqLyBlbnRyeSwgc3ViZm9sZGVycyA9IHRydWUpIHtcbiAgICAgICAgICAgIGlmICghbG9hZGVkRW50cmllcykge1xuICAgICAgICAgICAgICAgIHJlYWRFbnRyaWVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVudHJ5ID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5LmlzRGlyZWN0b3J5ICYmIHN1YmZvbGRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlzdCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gZW50cnkuZW50cnlOYW1lO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgemlwRW50cnkgb2YgZW50cnlMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoemlwRW50cnkuZW50cnlOYW1lLnN0YXJ0c1dpdGgobmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LnB1c2goemlwRW50cnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsaXN0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbZW50cnldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogIEhvdyBtYW55IGNoaWxkIGVsZW1lbnRzIGVudHJ5IGhhc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1ppcEVudHJ5fSBlbnRyeVxuICAgICAgICAgKiBAcmV0dXJuIHtpbnRlZ2VyfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0Q2hpbGRDb3VudDogZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICBpZiAoZW50cnkgJiYgZW50cnkuaXNEaXJlY3RvcnkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsaXN0ID0gdGhpcy5nZXRFbnRyeUNoaWxkcmVuKGVudHJ5KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGlzdC5pbmNsdWRlcyhlbnRyeSkgPyBsaXN0Lmxlbmd0aCAtIDEgOiBsaXN0Lmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSB6aXAgZmlsZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJuIEJ1ZmZlclxuICAgICAgICAgKi9cbiAgICAgICAgY29tcHJlc3NUb0J1ZmZlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFsb2FkZWRFbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgcmVhZEVudHJpZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNvcnRFbnRyaWVzKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGFCbG9jayA9IFtdO1xuICAgICAgICAgICAgY29uc3QgaGVhZGVyQmxvY2tzID0gW107XG4gICAgICAgICAgICBsZXQgdG90YWxTaXplID0gMDtcbiAgICAgICAgICAgIGxldCBkaW5kZXggPSAwO1xuXG4gICAgICAgICAgICBtYWluSGVhZGVyLnNpemUgPSAwO1xuICAgICAgICAgICAgbWFpbkhlYWRlci5vZmZzZXQgPSAwO1xuICAgICAgICAgICAgbGV0IHRvdGFsRW50cmllcyA9IDA7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgdGhpcy5lbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgLy8gY29tcHJlc3MgZGF0YSBhbmQgc2V0IGxvY2FsIGFuZCBlbnRyeSBoZWFkZXIgYWNjb3JkaW5nbHkuIFJlYXNvbiB3aHkgaXMgY2FsbGVkIGZpcnN0XG4gICAgICAgICAgICAgICAgY29uc3QgY29tcHJlc3NlZERhdGEgPSBlbnRyeS5nZXRDb21wcmVzc2VkRGF0YSgpO1xuICAgICAgICAgICAgICAgIGVudHJ5LmhlYWRlci5vZmZzZXQgPSBkaW5kZXg7XG5cbiAgICAgICAgICAgICAgICAvLyAxLiBjb25zdHJ1Y3QgbG9jYWwgaGVhZGVyXG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxIZWFkZXIgPSBlbnRyeS5wYWNrTG9jYWxIZWFkZXIoKTtcblxuICAgICAgICAgICAgICAgIC8vIDIuIG9mZnNldHNcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhTGVuZ3RoID0gbG9jYWxIZWFkZXIubGVuZ3RoICsgY29tcHJlc3NlZERhdGEubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGRpbmRleCArPSBkYXRhTGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgLy8gMy4gc3RvcmUgdmFsdWVzIGluIHNlcXVlbmNlXG4gICAgICAgICAgICAgICAgZGF0YUJsb2NrLnB1c2gobG9jYWxIZWFkZXIpO1xuICAgICAgICAgICAgICAgIGRhdGFCbG9jay5wdXNoKGNvbXByZXNzZWREYXRhKTtcblxuICAgICAgICAgICAgICAgIC8vIDQuIGNvbnN0cnVjdCBjZW50cmFsIGhlYWRlclxuICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRyYWxIZWFkZXIgPSBlbnRyeS5wYWNrQ2VudHJhbEhlYWRlcigpO1xuICAgICAgICAgICAgICAgIGhlYWRlckJsb2Nrcy5wdXNoKGNlbnRyYWxIZWFkZXIpO1xuICAgICAgICAgICAgICAgIC8vIDUuIHVwZGF0ZSBtYWluIGhlYWRlclxuICAgICAgICAgICAgICAgIG1haW5IZWFkZXIuc2l6ZSArPSBjZW50cmFsSGVhZGVyLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB0b3RhbFNpemUgKz0gZGF0YUxlbmd0aCArIGNlbnRyYWxIZWFkZXIubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHRvdGFsRW50cmllcysrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0b3RhbFNpemUgKz0gbWFpbkhlYWRlci5tYWluSGVhZGVyU2l6ZTsgLy8gYWxzbyBpbmNsdWRlcyB6aXAgZmlsZSBjb21tZW50IGxlbmd0aFxuICAgICAgICAgICAgLy8gcG9pbnQgdG8gZW5kIG9mIGRhdGEgYW5kIGJlZ2lubmluZyBvZiBjZW50cmFsIGRpcmVjdG9yeSBmaXJzdCByZWNvcmRcbiAgICAgICAgICAgIG1haW5IZWFkZXIub2Zmc2V0ID0gZGluZGV4O1xuICAgICAgICAgICAgbWFpbkhlYWRlci50b3RhbEVudHJpZXMgPSB0b3RhbEVudHJpZXM7XG5cbiAgICAgICAgICAgIGRpbmRleCA9IDA7XG4gICAgICAgICAgICBjb25zdCBvdXRCdWZmZXIgPSBCdWZmZXIuYWxsb2ModG90YWxTaXplKTtcbiAgICAgICAgICAgIC8vIHdyaXRlIGRhdGEgYmxvY2tzXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvbnRlbnQgb2YgZGF0YUJsb2NrKSB7XG4gICAgICAgICAgICAgICAgY29udGVudC5jb3B5KG91dEJ1ZmZlciwgZGluZGV4KTtcbiAgICAgICAgICAgICAgICBkaW5kZXggKz0gY29udGVudC5sZW5ndGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHdyaXRlIGNlbnRyYWwgZGlyZWN0b3J5IGVudHJpZXNcbiAgICAgICAgICAgIGZvciAoY29uc3QgY29udGVudCBvZiBoZWFkZXJCbG9ja3MpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50LmNvcHkob3V0QnVmZmVyLCBkaW5kZXgpO1xuICAgICAgICAgICAgICAgIGRpbmRleCArPSBjb250ZW50Lmxlbmd0aDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gd3JpdGUgbWFpbiBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IG1oID0gbWFpbkhlYWRlci50b0JpbmFyeSgpO1xuICAgICAgICAgICAgaWYgKF9jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgX2NvbW1lbnQuY29weShtaCwgVXRpbHMuQ29uc3RhbnRzLkVOREhEUik7IC8vIGFkZCB6aXAgZmlsZSBjb21tZW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtaC5jb3B5KG91dEJ1ZmZlciwgZGluZGV4KTtcblxuICAgICAgICAgICAgLy8gU2luY2Ugd2UgdXBkYXRlIGVudHJ5IGFuZCBtYWluIGhlYWRlciBvZmZzZXRzLFxuICAgICAgICAgICAgLy8gdGhleSBhcmUgbm8gbG9uZ2VyIHZhbGlkIGFuZCB3ZSBoYXZlIHRvIHJlc2V0IGNvbnRlbnRcbiAgICAgICAgICAgIC8vIChJc3N1ZSA2NClcblxuICAgICAgICAgICAgaW5CdWZmZXIgPSBvdXRCdWZmZXI7XG4gICAgICAgICAgICBsb2FkZWRFbnRyaWVzID0gZmFsc2U7XG5cbiAgICAgICAgICAgIHJldHVybiBvdXRCdWZmZXI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9Bc3luY0J1ZmZlcjogZnVuY3Rpb24gKC8qRnVuY3Rpb24qLyBvblN1Y2Nlc3MsIC8qRnVuY3Rpb24qLyBvbkZhaWwsIC8qRnVuY3Rpb24qLyBvbkl0ZW1TdGFydCwgLypGdW5jdGlvbiovIG9uSXRlbUVuZCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIWxvYWRlZEVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVhZEVudHJpZXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc29ydEVudHJpZXMoKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFCbG9jayA9IFtdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRyYWxIZWFkZXJzID0gW107XG4gICAgICAgICAgICAgICAgbGV0IHRvdGFsU2l6ZSA9IDA7XG4gICAgICAgICAgICAgICAgbGV0IGRpbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgbGV0IHRvdGFsRW50cmllcyA9IDA7XG5cbiAgICAgICAgICAgICAgICBtYWluSGVhZGVyLnNpemUgPSAwO1xuICAgICAgICAgICAgICAgIG1haW5IZWFkZXIub2Zmc2V0ID0gMDtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXByZXNzMkJ1ZmZlciA9IGZ1bmN0aW9uIChlbnRyeUxpc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnRyeUxpc3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVudHJ5ID0gZW50cnlMaXN0cy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGVudHJ5LmVudHJ5TmFtZSArIGVudHJ5LmV4dHJhLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob25JdGVtU3RhcnQpIG9uSXRlbVN0YXJ0KG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkuZ2V0Q29tcHJlc3NlZERhdGFBc3luYyhmdW5jdGlvbiAoY29tcHJlc3NlZERhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob25JdGVtRW5kKSBvbkl0ZW1FbmQobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkuaGVhZGVyLm9mZnNldCA9IGRpbmRleDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDEuIGNvbnN0cnVjdCBsb2NhbCBoZWFkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2NhbEhlYWRlciA9IGVudHJ5LnBhY2tMb2NhbEhlYWRlcigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMi4gb2Zmc2V0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFMZW5ndGggPSBsb2NhbEhlYWRlci5sZW5ndGggKyBjb21wcmVzc2VkRGF0YS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGluZGV4ICs9IGRhdGFMZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAzLiBzdG9yZSB2YWx1ZXMgaW4gc2VxdWVuY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhQmxvY2sucHVzaChsb2NhbEhlYWRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUJsb2NrLnB1c2goY29tcHJlc3NlZERhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2VudHJhbCBoZWFkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjZW50YWxIZWFkZXIgPSBlbnRyeS5wYWNrQ2VudHJhbEhlYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRyYWxIZWFkZXJzLnB1c2goY2VudGFsSGVhZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluSGVhZGVyLnNpemUgKz0gY2VudGFsSGVhZGVyLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbFNpemUgKz0gZGF0YUxlbmd0aCArIGNlbnRhbEhlYWRlci5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxFbnRyaWVzKys7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wcmVzczJCdWZmZXIoZW50cnlMaXN0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsU2l6ZSArPSBtYWluSGVhZGVyLm1haW5IZWFkZXJTaXplOyAvLyBhbHNvIGluY2x1ZGVzIHppcCBmaWxlIGNvbW1lbnQgbGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwb2ludCB0byBlbmQgb2YgZGF0YSBhbmQgYmVnaW5uaW5nIG9mIGNlbnRyYWwgZGlyZWN0b3J5IGZpcnN0IHJlY29yZFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkhlYWRlci5vZmZzZXQgPSBkaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluSGVhZGVyLnRvdGFsRW50cmllcyA9IHRvdGFsRW50cmllcztcblxuICAgICAgICAgICAgICAgICAgICAgICAgZGluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG91dEJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyh0b3RhbFNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUJsb2NrLmZvckVhY2goZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LmNvcHkob3V0QnVmZmVyLCBkaW5kZXgpOyAvLyB3cml0ZSBkYXRhIGJsb2Nrc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpbmRleCArPSBjb250ZW50Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VudHJhbEhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAoY29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQuY29weShvdXRCdWZmZXIsIGRpbmRleCk7IC8vIHdyaXRlIGNlbnRyYWwgZGlyZWN0b3J5IGVudHJpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaW5kZXggKz0gY29udGVudC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWggPSBtYWluSGVhZGVyLnRvQmluYXJ5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2NvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29tbWVudC5jb3B5KG1oLCBVdGlscy5Db25zdGFudHMuRU5ESERSKTsgLy8gYWRkIHppcCBmaWxlIGNvbW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbWguY29weShvdXRCdWZmZXIsIGRpbmRleCk7IC8vIHdyaXRlIG1haW4gaGVhZGVyXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpbmNlIHdlIHVwZGF0ZSBlbnRyeSBhbmQgbWFpbiBoZWFkZXIgb2Zmc2V0cywgdGhleSBhcmUgbm9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvbmdlciB2YWxpZCBhbmQgd2UgaGF2ZSB0byByZXNldCBjb250ZW50IHVzaW5nIG91ciBuZXcgYnVmZmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAoSXNzdWUgNjQpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGluQnVmZmVyID0gb3V0QnVmZmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVkRW50cmllcyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBvblN1Y2Nlc3Mob3V0QnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBjb21wcmVzczJCdWZmZXIoQXJyYXkuZnJvbSh0aGlzLmVudHJpZXMpKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBvbkZhaWwoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufTtcbiIsICJjb25zdCBVdGlscyA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5jb25zdCBwdGggPSByZXF1aXJlKFwicGF0aFwiKTtcbmNvbnN0IFppcEVudHJ5ID0gcmVxdWlyZShcIi4vemlwRW50cnlcIik7XG5jb25zdCBaaXBGaWxlID0gcmVxdWlyZShcIi4vemlwRmlsZVwiKTtcblxuY29uc3QgZ2V0X0Jvb2wgPSAoLi4udmFsKSA9PiBVdGlscy5maW5kTGFzdCh2YWwsIChjKSA9PiB0eXBlb2YgYyA9PT0gXCJib29sZWFuXCIpO1xuY29uc3QgZ2V0X1N0ciA9ICguLi52YWwpID0+IFV0aWxzLmZpbmRMYXN0KHZhbCwgKGMpID0+IHR5cGVvZiBjID09PSBcInN0cmluZ1wiKTtcbmNvbnN0IGdldF9GdW4gPSAoLi4udmFsKSA9PiBVdGlscy5maW5kTGFzdCh2YWwsIChjKSA9PiB0eXBlb2YgYyA9PT0gXCJmdW5jdGlvblwiKTtcblxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgLy8gb3B0aW9uIFwibm9Tb3J0XCIgOiBpZiB0cnVlIGl0IGRpc2FibGVzIGZpbGVzIHNvcnRpbmdcbiAgICBub1NvcnQ6IGZhbHNlLFxuICAgIC8vIHJlYWQgZW50cmllcyBkdXJpbmcgbG9hZCAoaW5pdGlhbCBsb2FkaW5nIG1heSBiZSBzbG93ZXIpXG4gICAgcmVhZEVudHJpZXM6IGZhbHNlLFxuICAgIC8vIGRlZmF1bHQgbWV0aG9kIGlzIG5vbmVcbiAgICBtZXRob2Q6IFV0aWxzLkNvbnN0YW50cy5OT05FLFxuICAgIC8vIGZpbGUgc3lzdGVtXG4gICAgZnM6IG51bGxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKC8qKlN0cmluZyovIGlucHV0LCAvKiogb2JqZWN0ICovIG9wdGlvbnMpIHtcbiAgICBsZXQgaW5CdWZmZXIgPSBudWxsO1xuXG4gICAgLy8gY3JlYXRlIG9iamVjdCBiYXNlZCBkZWZhdWx0IG9wdGlvbnMsIGFsbG93aW5nIHRoZW0gdG8gYmUgb3ZlcndyaXR0ZW5cbiAgICBjb25zdCBvcHRzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKG51bGwpLCBkZWZhdWx0T3B0aW9ucyk7XG5cbiAgICAvLyB0ZXN0IGlucHV0IHZhcmlhYmxlXG4gICAgaWYgKGlucHV0ICYmIFwib2JqZWN0XCIgPT09IHR5cGVvZiBpbnB1dCkge1xuICAgICAgICAvLyBpZiB2YWx1ZSBpcyBub3QgYnVmZmVyIHdlIGFjY2VwdCBpdCB0byBiZSBvYmplY3Qgd2l0aCBvcHRpb25zXG4gICAgICAgIGlmICghKGlucHV0IGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ob3B0cywgaW5wdXQpO1xuICAgICAgICAgICAgaW5wdXQgPSBvcHRzLmlucHV0ID8gb3B0cy5pbnB1dCA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChvcHRzLmlucHV0KSBkZWxldGUgb3B0cy5pbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIGlucHV0IGlzIGJ1ZmZlclxuICAgICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGlucHV0KSkge1xuICAgICAgICAgICAgaW5CdWZmZXIgPSBpbnB1dDtcbiAgICAgICAgICAgIG9wdHMubWV0aG9kID0gVXRpbHMuQ29uc3RhbnRzLkJVRkZFUjtcbiAgICAgICAgICAgIGlucHV0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gYXNzaWduIG9wdGlvbnNcbiAgICBPYmplY3QuYXNzaWduKG9wdHMsIG9wdGlvbnMpO1xuXG4gICAgLy8gaW5zdGFuY2lhdGUgdXRpbHMgZmlsZXN5c3RlbVxuICAgIGNvbnN0IGZpbGV0b29scyA9IG5ldyBVdGlscyhvcHRzKTtcblxuICAgIGlmICh0eXBlb2Ygb3B0cy5kZWNvZGVyICE9PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvcHRzLmRlY29kZXIuZW5jb2RlICE9PSBcImZ1bmN0aW9uXCIgfHwgdHlwZW9mIG9wdHMuZGVjb2Rlci5kZWNvZGUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBvcHRzLmRlY29kZXIgPSBVdGlscy5kZWNvZGVyO1xuICAgIH1cblxuICAgIC8vIGlmIGlucHV0IGlzIGZpbGUgbmFtZSB3ZSByZXRyaWV2ZSBpdHMgY29udGVudFxuICAgIGlmIChpbnB1dCAmJiBcInN0cmluZ1wiID09PSB0eXBlb2YgaW5wdXQpIHtcbiAgICAgICAgLy8gbG9hZCB6aXAgZmlsZVxuICAgICAgICBpZiAoZmlsZXRvb2xzLmZzLmV4aXN0c1N5bmMoaW5wdXQpKSB7XG4gICAgICAgICAgICBvcHRzLm1ldGhvZCA9IFV0aWxzLkNvbnN0YW50cy5GSUxFO1xuICAgICAgICAgICAgb3B0cy5maWxlbmFtZSA9IGlucHV0O1xuICAgICAgICAgICAgaW5CdWZmZXIgPSBmaWxldG9vbHMuZnMucmVhZEZpbGVTeW5jKGlucHV0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IFV0aWxzLkVycm9ycy5JTlZBTElEX0ZJTEVOQU1FKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjcmVhdGUgdmFyaWFibGVcbiAgICBjb25zdCBfemlwID0gbmV3IFppcEZpbGUoaW5CdWZmZXIsIG9wdHMpO1xuXG4gICAgY29uc3QgeyBjYW5vbmljYWwsIHNhbml0aXplLCB6aXBuYW1lZml4IH0gPSBVdGlscztcblxuICAgIGZ1bmN0aW9uIGdldEVudHJ5KC8qKk9iamVjdCovIGVudHJ5KSB7XG4gICAgICAgIGlmIChlbnRyeSAmJiBfemlwKSB7XG4gICAgICAgICAgICB2YXIgaXRlbTtcbiAgICAgICAgICAgIC8vIElmIGVudHJ5IHdhcyBnaXZlbiBhcyBhIGZpbGUgbmFtZVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSA9PT0gXCJzdHJpbmdcIikgaXRlbSA9IF96aXAuZ2V0RW50cnkocHRoLnBvc2l4Lm5vcm1hbGl6ZShlbnRyeSkpO1xuICAgICAgICAgICAgLy8gaWYgZW50cnkgd2FzIGdpdmVuIGFzIGEgWmlwRW50cnkgb2JqZWN0XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVudHJ5ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBlbnRyeS5lbnRyeU5hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIGVudHJ5LmhlYWRlciAhPT0gXCJ1bmRlZmluZWRcIikgaXRlbSA9IF96aXAuZ2V0RW50cnkoZW50cnkuZW50cnlOYW1lKTtcblxuICAgICAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaXhQYXRoKHppcFBhdGgpIHtcbiAgICAgICAgY29uc3QgeyBqb2luLCBub3JtYWxpemUsIHNlcCB9ID0gcHRoLnBvc2l4O1xuICAgICAgICAvLyBjb252ZXJ0IHdpbmRvd3MgZmlsZSBzZXBhcmF0b3JzIGFuZCBub3JtYWxpemVcbiAgICAgICAgcmV0dXJuIGpvaW4oXCIuXCIsIG5vcm1hbGl6ZShzZXAgKyB6aXBQYXRoLnNwbGl0KFwiXFxcXFwiKS5qb2luKHNlcCkgKyBzZXApKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaWxlbmFtZUZpbHRlcihmaWx0ZXJmbikge1xuICAgICAgICBpZiAoZmlsdGVyZm4gaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgICAgIC8vIGlmIGZpbHRlciBpcyBSZWdFeHAgd3JhcCBpdFxuICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocngpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGZpbGVuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByeC50ZXN0KGZpbGVuYW1lKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkoZmlsdGVyZm4pO1xuICAgICAgICB9IGVsc2UgaWYgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGZpbHRlcmZuKSB7XG4gICAgICAgICAgICAvLyBpZiBmaWx0ZXIgaXMgbm90IGZ1bmN0aW9uIHdlIHdpbGwgcmVwbGFjZSBpdFxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbHRlcmZuO1xuICAgIH1cblxuICAgIC8vIGtlZXAgbGFzdCBjaGFyYWN0ZXIgb24gZm9sZGVyc1xuICAgIGNvbnN0IHJlbGF0aXZlUGF0aCA9IChsb2NhbCwgZW50cnkpID0+IHtcbiAgICAgICAgbGV0IGxhc3RDaGFyID0gZW50cnkuc2xpY2UoLTEpO1xuICAgICAgICBsYXN0Q2hhciA9IGxhc3RDaGFyID09PSBmaWxldG9vbHMuc2VwID8gZmlsZXRvb2xzLnNlcCA6IFwiXCI7XG4gICAgICAgIHJldHVybiBwdGgucmVsYXRpdmUobG9jYWwsIGVudHJ5KSArIGxhc3RDaGFyO1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogRXh0cmFjdHMgdGhlIGdpdmVuIGVudHJ5IGZyb20gdGhlIGFyY2hpdmUgYW5kIHJldHVybnMgdGhlIGNvbnRlbnQgYXMgYSBCdWZmZXIgb2JqZWN0XG4gICAgICAgICAqIEBwYXJhbSB7WmlwRW50cnl8c3RyaW5nfSBlbnRyeSBaaXBFbnRyeSBvYmplY3Qgb3IgU3RyaW5nIHdpdGggdGhlIGZ1bGwgcGF0aCBvZiB0aGUgZW50cnlcbiAgICAgICAgICogQHBhcmFtIHtCdWZmZXJ8c3RyaW5nfSBbcGFzc10gLSBwYXNzd29yZFxuICAgICAgICAgKiBAcmV0dXJuIEJ1ZmZlciBvciBOdWxsIGluIGNhc2Ugb2YgZXJyb3JcbiAgICAgICAgICovXG4gICAgICAgIHJlYWRGaWxlOiBmdW5jdGlvbiAoZW50cnksIHBhc3MpIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gZ2V0RW50cnkoZW50cnkpO1xuICAgICAgICAgICAgcmV0dXJuIChpdGVtICYmIGl0ZW0uZ2V0RGF0YShwYXNzKSkgfHwgbnVsbDtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyBob3cgbWFueSBjaGlsZCBlbGVtZW50cyBoYXMgb24gZW50cnkgKGRpcmVjdG9yaWVzKSBvbiBmaWxlcyBpdCBpcyBhbHdheXMgMFxuICAgICAgICAgKiBAcGFyYW0ge1ppcEVudHJ5fHN0cmluZ30gZW50cnkgWmlwRW50cnkgb2JqZWN0IG9yIFN0cmluZyB3aXRoIHRoZSBmdWxsIHBhdGggb2YgdGhlIGVudHJ5XG4gICAgICAgICAqIEByZXR1cm5zIHtpbnRlZ2VyfVxuICAgICAgICAgKi9cbiAgICAgICAgY2hpbGRDb3VudDogZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gZ2V0RW50cnkoZW50cnkpO1xuICAgICAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3ppcC5nZXRDaGlsZENvdW50KGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBc3luY2hyb25vdXMgcmVhZEZpbGVcbiAgICAgICAgICogQHBhcmFtIHtaaXBFbnRyeXxzdHJpbmd9IGVudHJ5IFppcEVudHJ5IG9iamVjdCBvciBTdHJpbmcgd2l0aCB0aGUgZnVsbCBwYXRoIG9mIHRoZSBlbnRyeVxuICAgICAgICAgKiBAcGFyYW0ge2NhbGxiYWNrfSBjYWxsYmFja1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJuIEJ1ZmZlciBvciBOdWxsIGluIGNhc2Ugb2YgZXJyb3JcbiAgICAgICAgICovXG4gICAgICAgIHJlYWRGaWxlQXN5bmM6IGZ1bmN0aW9uIChlbnRyeSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gZ2V0RW50cnkoZW50cnkpO1xuICAgICAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICBpdGVtLmdldERhdGFBc3luYyhjYWxsYmFjayk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIFwiZ2V0RW50cnkgZmFpbGVkIGZvcjpcIiArIGVudHJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogRXh0cmFjdHMgdGhlIGdpdmVuIGVudHJ5IGZyb20gdGhlIGFyY2hpdmUgYW5kIHJldHVybnMgdGhlIGNvbnRlbnQgYXMgcGxhaW4gdGV4dCBpbiB0aGUgZ2l2ZW4gZW5jb2RpbmdcbiAgICAgICAgICogQHBhcmFtIHtaaXBFbnRyeXxzdHJpbmd9IGVudHJ5IC0gWmlwRW50cnkgb2JqZWN0IG9yIFN0cmluZyB3aXRoIHRoZSBmdWxsIHBhdGggb2YgdGhlIGVudHJ5XG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlbmNvZGluZyAtIE9wdGlvbmFsLiBJZiBubyBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdXRmOCBpcyB1c2VkXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm4gU3RyaW5nXG4gICAgICAgICAqL1xuICAgICAgICByZWFkQXNUZXh0OiBmdW5jdGlvbiAoZW50cnksIGVuY29kaW5nKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IGdldEVudHJ5KGVudHJ5KTtcbiAgICAgICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBpdGVtLmdldERhdGEoKTtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS50b1N0cmluZyhlbmNvZGluZyB8fCBcInV0ZjhcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFzeW5jaHJvbm91cyByZWFkQXNUZXh0XG4gICAgICAgICAqIEBwYXJhbSB7WmlwRW50cnl8c3RyaW5nfSBlbnRyeSBaaXBFbnRyeSBvYmplY3Qgb3IgU3RyaW5nIHdpdGggdGhlIGZ1bGwgcGF0aCBvZiB0aGUgZW50cnlcbiAgICAgICAgICogQHBhcmFtIHtjYWxsYmFja30gY2FsbGJhY2tcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtlbmNvZGluZ10gLSBPcHRpb25hbC4gSWYgbm8gZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHV0ZjggaXMgdXNlZFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJuIFN0cmluZ1xuICAgICAgICAgKi9cbiAgICAgICAgcmVhZEFzVGV4dEFzeW5jOiBmdW5jdGlvbiAoZW50cnksIGNhbGxiYWNrLCBlbmNvZGluZykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBnZXRFbnRyeShlbnRyeSk7XG4gICAgICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIGl0ZW0uZ2V0RGF0YUFzeW5jKGZ1bmN0aW9uIChkYXRhLCBlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhICYmIGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhLnRvU3RyaW5nKGVuY29kaW5nIHx8IFwidXRmOFwiKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhcIlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlIHRoZSBlbnRyeSBmcm9tIHRoZSBmaWxlIG9yIHRoZSBlbnRyeSBhbmQgYWxsIGl0J3MgbmVzdGVkIGRpcmVjdG9yaWVzIGFuZCBmaWxlcyBpZiB0aGUgZ2l2ZW4gZW50cnkgaXMgYSBkaXJlY3RvcnlcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtaaXBFbnRyeXxzdHJpbmd9IGVudHJ5XG4gICAgICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAgICAgKi9cbiAgICAgICAgZGVsZXRlRmlsZTogZnVuY3Rpb24gKGVudHJ5LCB3aXRoc3ViZm9sZGVycyA9IHRydWUpIHtcbiAgICAgICAgICAgIC8vIEBUT0RPOiB0ZXN0IGRlbGV0ZUZpbGVcbiAgICAgICAgICAgIHZhciBpdGVtID0gZ2V0RW50cnkoZW50cnkpO1xuICAgICAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICBfemlwLmRlbGV0ZUZpbGUoaXRlbS5lbnRyeU5hbWUsIHdpdGhzdWJmb2xkZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlIHRoZSBlbnRyeSBmcm9tIHRoZSBmaWxlIG9yIGRpcmVjdG9yeSB3aXRob3V0IGFmZmVjdGluZyBhbnkgbmVzdGVkIGVudHJpZXNcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtaaXBFbnRyeXxzdHJpbmd9IGVudHJ5XG4gICAgICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAgICAgKi9cbiAgICAgICAgZGVsZXRlRW50cnk6IGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgLy8gQFRPRE86IHRlc3QgZGVsZXRlRW50cnlcbiAgICAgICAgICAgIHZhciBpdGVtID0gZ2V0RW50cnkoZW50cnkpO1xuICAgICAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICBfemlwLmRlbGV0ZUVudHJ5KGl0ZW0uZW50cnlOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkcyBhIGNvbW1lbnQgdG8gdGhlIHppcC4gVGhlIHppcCBtdXN0IGJlIHJld3JpdHRlbiBhZnRlciBhZGRpbmcgdGhlIGNvbW1lbnQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb21tZW50XG4gICAgICAgICAqL1xuICAgICAgICBhZGRaaXBDb21tZW50OiBmdW5jdGlvbiAoY29tbWVudCkge1xuICAgICAgICAgICAgLy8gQFRPRE86IHRlc3QgYWRkWmlwQ29tbWVudFxuICAgICAgICAgICAgX3ppcC5jb21tZW50ID0gY29tbWVudDtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgemlwIGNvbW1lbnRcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybiBTdHJpbmdcbiAgICAgICAgICovXG4gICAgICAgIGdldFppcENvbW1lbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfemlwLmNvbW1lbnQgfHwgXCJcIjtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkcyBhIGNvbW1lbnQgdG8gYSBzcGVjaWZpZWQgemlwRW50cnkuIFRoZSB6aXAgbXVzdCBiZSByZXdyaXR0ZW4gYWZ0ZXIgYWRkaW5nIHRoZSBjb21tZW50XG4gICAgICAgICAqIFRoZSBjb21tZW50IGNhbm5vdCBleGNlZWQgNjU1MzUgY2hhcmFjdGVycyBpbiBsZW5ndGhcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtaaXBFbnRyeX0gZW50cnlcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbW1lbnRcbiAgICAgICAgICovXG4gICAgICAgIGFkZFppcEVudHJ5Q29tbWVudDogZnVuY3Rpb24gKGVudHJ5LCBjb21tZW50KSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IGdldEVudHJ5KGVudHJ5KTtcbiAgICAgICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgaXRlbS5jb21tZW50ID0gY29tbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgY29tbWVudCBvZiB0aGUgc3BlY2lmaWVkIGVudHJ5XG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7WmlwRW50cnl9IGVudHJ5XG4gICAgICAgICAqIEByZXR1cm4gU3RyaW5nXG4gICAgICAgICAqL1xuICAgICAgICBnZXRaaXBFbnRyeUNvbW1lbnQ6IGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBnZXRFbnRyeShlbnRyeSk7XG4gICAgICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmNvbW1lbnQgfHwgXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVcGRhdGVzIHRoZSBjb250ZW50IG9mIGFuIGV4aXN0aW5nIGVudHJ5IGluc2lkZSB0aGUgYXJjaGl2ZS4gVGhlIHppcCBtdXN0IGJlIHJld3JpdHRlbiBhZnRlciB1cGRhdGluZyB0aGUgY29udGVudFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1ppcEVudHJ5fSBlbnRyeVxuICAgICAgICAgKiBAcGFyYW0ge0J1ZmZlcn0gY29udGVudFxuICAgICAgICAgKi9cbiAgICAgICAgdXBkYXRlRmlsZTogZnVuY3Rpb24gKGVudHJ5LCBjb250ZW50KSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IGdldEVudHJ5KGVudHJ5KTtcbiAgICAgICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgaXRlbS5zZXREYXRhKGNvbnRlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGRzIGEgZmlsZSBmcm9tIHRoZSBkaXNrIHRvIHRoZSBhcmNoaXZlXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbFBhdGggRmlsZSB0byBhZGQgdG8gemlwXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbemlwUGF0aF0gT3B0aW9uYWwgcGF0aCBpbnNpZGUgdGhlIHppcFxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3ppcE5hbWVdIE9wdGlvbmFsIG5hbWUgZm9yIHRoZSBmaWxlXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY29tbWVudF0gT3B0aW9uYWwgZmlsZSBjb21tZW50XG4gICAgICAgICAqL1xuICAgICAgICBhZGRMb2NhbEZpbGU6IGZ1bmN0aW9uIChsb2NhbFBhdGgsIHppcFBhdGgsIHppcE5hbWUsIGNvbW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChmaWxldG9vbHMuZnMuZXhpc3RzU3luYyhsb2NhbFBhdGgpKSB7XG4gICAgICAgICAgICAgICAgLy8gZml4IFppcFBhdGhcbiAgICAgICAgICAgICAgICB6aXBQYXRoID0gemlwUGF0aCA/IGZpeFBhdGgoemlwUGF0aCkgOiBcIlwiO1xuXG4gICAgICAgICAgICAgICAgLy8gcCAtIGxvY2FsIGZpbGUgbmFtZVxuICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBwdGgud2luMzIuYmFzZW5hbWUocHRoLndpbjMyLm5vcm1hbGl6ZShsb2NhbFBhdGgpKTtcblxuICAgICAgICAgICAgICAgIC8vIGFkZCBmaWxlIG5hbWUgaW50byB6aXBwYXRoXG4gICAgICAgICAgICAgICAgemlwUGF0aCArPSB6aXBOYW1lID8gemlwTmFtZSA6IHA7XG5cbiAgICAgICAgICAgICAgICAvLyByZWFkIGZpbGUgYXR0cmlidXRlc1xuICAgICAgICAgICAgICAgIGNvbnN0IF9hdHRyID0gZmlsZXRvb2xzLmZzLnN0YXRTeW5jKGxvY2FsUGF0aCk7XG5cbiAgICAgICAgICAgICAgICAvLyBnZXQgZmlsZSBjb250ZW50XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IF9hdHRyLmlzRmlsZSgpID8gZmlsZXRvb2xzLmZzLnJlYWRGaWxlU3luYyhsb2NhbFBhdGgpIDogQnVmZmVyLmFsbG9jKDApO1xuXG4gICAgICAgICAgICAgICAgLy8gaWYgZm9sZGVyXG4gICAgICAgICAgICAgICAgaWYgKF9hdHRyLmlzRGlyZWN0b3J5KCkpIHppcFBhdGggKz0gZmlsZXRvb2xzLnNlcDtcblxuICAgICAgICAgICAgICAgIC8vIGFkZCBmaWxlIGludG8gemlwIGZpbGVcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEZpbGUoemlwUGF0aCwgZGF0YSwgY29tbWVudCwgX2F0dHIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBVdGlscy5FcnJvcnMuRklMRV9OT1RfRk9VTkQobG9jYWxQYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbGJhY2sgZm9yIHNob3dpbmcgaWYgZXZlcnl0aGluZyB3YXMgZG9uZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQGNhbGxiYWNrIGRvbmVDYWxsYmFja1xuICAgICAgICAgKiBAcGFyYW0ge0Vycm9yfSBlcnIgLSBFcnJvciBvYmplY3RcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBkb25lIC0gd2FzIHJlcXVlc3QgZnVsbHkgY29tcGxldGVkXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGRzIGEgZmlsZSBmcm9tIHRoZSBkaXNrIHRvIHRoZSBhcmNoaXZlXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7KG9iamVjdHxzdHJpbmcpfSBvcHRpb25zIC0gb3B0aW9ucyBvYmplY3QsIGlmIGl0IGlzIHN0cmluZyBpdCB1cyB1c2VkIGFzIGxvY2FsUGF0aC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubG9jYWxQYXRoIC0gTG9jYWwgcGF0aCB0byB0aGUgZmlsZS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmNvbW1lbnRdIC0gT3B0aW9uYWwgZmlsZSBjb21tZW50LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuemlwUGF0aF0gLSBPcHRpb25hbCBwYXRoIGluc2lkZSB0aGUgemlwXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy56aXBOYW1lXSAtIE9wdGlvbmFsIG5hbWUgZm9yIHRoZSBmaWxlXG4gICAgICAgICAqIEBwYXJhbSB7ZG9uZUNhbGxiYWNrfSBjYWxsYmFjayAtIFRoZSBjYWxsYmFjayB0aGF0IGhhbmRsZXMgdGhlIHJlc3BvbnNlLlxuICAgICAgICAgKi9cbiAgICAgICAgYWRkTG9jYWxGaWxlQXN5bmM6IGZ1bmN0aW9uIChvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcIm9iamVjdFwiID8gb3B0aW9ucyA6IHsgbG9jYWxQYXRoOiBvcHRpb25zIH07XG4gICAgICAgICAgICBjb25zdCBsb2NhbFBhdGggPSBwdGgucmVzb2x2ZShvcHRpb25zLmxvY2FsUGF0aCk7XG4gICAgICAgICAgICBjb25zdCB7IGNvbW1lbnQgfSA9IG9wdGlvbnM7XG4gICAgICAgICAgICBsZXQgeyB6aXBQYXRoLCB6aXBOYW1lIH0gPSBvcHRpb25zO1xuICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIGZpbGV0b29scy5mcy5zdGF0KGxvY2FsUGF0aCwgZnVuY3Rpb24gKGVyciwgc3RhdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgLy8gZml4IFppcFBhdGhcbiAgICAgICAgICAgICAgICB6aXBQYXRoID0gemlwUGF0aCA/IGZpeFBhdGgoemlwUGF0aCkgOiBcIlwiO1xuICAgICAgICAgICAgICAgIC8vIHAgLSBsb2NhbCBmaWxlIG5hbWVcbiAgICAgICAgICAgICAgICBjb25zdCBwID0gcHRoLndpbjMyLmJhc2VuYW1lKHB0aC53aW4zMi5ub3JtYWxpemUobG9jYWxQYXRoKSk7XG4gICAgICAgICAgICAgICAgLy8gYWRkIGZpbGUgbmFtZSBpbnRvIHppcHBhdGhcbiAgICAgICAgICAgICAgICB6aXBQYXRoICs9IHppcE5hbWUgPyB6aXBOYW1lIDogcDtcblxuICAgICAgICAgICAgICAgIGlmIChzdGF0cy5pc0ZpbGUoKSkge1xuICAgICAgICAgICAgICAgICAgICBmaWxldG9vbHMuZnMucmVhZEZpbGUobG9jYWxQYXRoLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFkZEZpbGUoemlwUGF0aCwgZGF0YSwgY29tbWVudCwgc3RhdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldEltbWVkaWF0ZShjYWxsYmFjaywgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0cy5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHppcFBhdGggKz0gZmlsZXRvb2xzLnNlcDtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hZGRGaWxlKHppcFBhdGgsIEJ1ZmZlci5hbGxvYygwKSwgY29tbWVudCwgc3RhdHMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2V0SW1tZWRpYXRlKGNhbGxiYWNrLCB1bmRlZmluZWQsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGRzIGEgbG9jYWwgZGlyZWN0b3J5IGFuZCBhbGwgaXRzIG5lc3RlZCBmaWxlcyBhbmQgZGlyZWN0b3JpZXMgdG8gdGhlIGFyY2hpdmVcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsUGF0aCAtIGxvY2FsIHBhdGggdG8gdGhlIGZvbGRlclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3ppcFBhdGhdIC0gb3B0aW9uYWwgcGF0aCBpbnNpZGUgemlwXG4gICAgICAgICAqIEBwYXJhbSB7KFJlZ0V4cHxmdW5jdGlvbil9IFtmaWx0ZXJdIC0gb3B0aW9uYWwgUmVnRXhwIG9yIEZ1bmN0aW9uIGlmIGZpbGVzIG1hdGNoIHdpbGwgYmUgaW5jbHVkZWQuXG4gICAgICAgICAqL1xuICAgICAgICBhZGRMb2NhbEZvbGRlcjogZnVuY3Rpb24gKGxvY2FsUGF0aCwgemlwUGF0aCwgZmlsdGVyKSB7XG4gICAgICAgICAgICAvLyBQcmVwYXJlIGZpbHRlclxuICAgICAgICAgICAgZmlsdGVyID0gZmlsZW5hbWVGaWx0ZXIoZmlsdGVyKTtcblxuICAgICAgICAgICAgLy8gZml4IFppcFBhdGhcbiAgICAgICAgICAgIHppcFBhdGggPSB6aXBQYXRoID8gZml4UGF0aCh6aXBQYXRoKSA6IFwiXCI7XG5cbiAgICAgICAgICAgIC8vIG5vcm1hbGl6ZSB0aGUgcGF0aCBmaXJzdFxuICAgICAgICAgICAgbG9jYWxQYXRoID0gcHRoLm5vcm1hbGl6ZShsb2NhbFBhdGgpO1xuXG4gICAgICAgICAgICBpZiAoZmlsZXRvb2xzLmZzLmV4aXN0c1N5bmMobG9jYWxQYXRoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gZmlsZXRvb2xzLmZpbmRGaWxlcyhsb2NhbFBhdGgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGZpbGVwYXRoIG9mIGl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwID0gcHRoLmpvaW4oemlwUGF0aCwgcmVsYXRpdmVQYXRoKGxvY2FsUGF0aCwgZmlsZXBhdGgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIocCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFkZExvY2FsRmlsZShmaWxlcGF0aCwgcHRoLmRpcm5hbWUocCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBVdGlscy5FcnJvcnMuRklMRV9OT1RfRk9VTkQobG9jYWxQYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQXN5bmNocm9ub3VzIGFkZExvY2FsRm9sZGVyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbFBhdGhcbiAgICAgICAgICogQHBhcmFtIHtjYWxsYmFja30gY2FsbGJhY2tcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFt6aXBQYXRoXSBvcHRpb25hbCBwYXRoIGluc2lkZSB6aXBcbiAgICAgICAgICogQHBhcmFtIHtSZWdFeHB8ZnVuY3Rpb259IFtmaWx0ZXJdIG9wdGlvbmFsIFJlZ0V4cCBvciBGdW5jdGlvbiBpZiBmaWxlcyBtYXRjaCB3aWxsXG4gICAgICAgICAqICAgICAgICAgICAgICAgYmUgaW5jbHVkZWQuXG4gICAgICAgICAqL1xuICAgICAgICBhZGRMb2NhbEZvbGRlckFzeW5jOiBmdW5jdGlvbiAobG9jYWxQYXRoLCBjYWxsYmFjaywgemlwUGF0aCwgZmlsdGVyKSB7XG4gICAgICAgICAgICAvLyBQcmVwYXJlIGZpbHRlclxuICAgICAgICAgICAgZmlsdGVyID0gZmlsZW5hbWVGaWx0ZXIoZmlsdGVyKTtcblxuICAgICAgICAgICAgLy8gZml4IFppcFBhdGhcbiAgICAgICAgICAgIHppcFBhdGggPSB6aXBQYXRoID8gZml4UGF0aCh6aXBQYXRoKSA6IFwiXCI7XG5cbiAgICAgICAgICAgIC8vIG5vcm1hbGl6ZSB0aGUgcGF0aCBmaXJzdFxuICAgICAgICAgICAgbG9jYWxQYXRoID0gcHRoLm5vcm1hbGl6ZShsb2NhbFBhdGgpO1xuXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBmaWxldG9vbHMuZnMub3Blbihsb2NhbFBhdGgsIFwiclwiLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVyciAmJiBlcnIuY29kZSA9PT0gXCJFTk9FTlRcIikge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh1bmRlZmluZWQsIFV0aWxzLkVycm9ycy5GSUxFX05PVF9GT1VORChsb2NhbFBhdGgpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh1bmRlZmluZWQsIGVycik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW1zID0gZmlsZXRvb2xzLmZpbmRGaWxlcyhsb2NhbFBhdGgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IC0xO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPCBpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZXBhdGggPSBpdGVtc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IHJlbGF0aXZlUGF0aChsb2NhbFBhdGgsIGZpbGVwYXRoKS5zcGxpdChcIlxcXFxcIikuam9pbihcIi9cIik7IC8vd2luZG93cyBmaXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwID0gcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubm9ybWFsaXplKFwiTkZEXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXFx1MDMwMC1cXHUwMzZmXS9nLCBcIlwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvW15cXHgyMC1cXHg3RV0vZywgXCJcIik7IC8vIGFjY2VudCBmaXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyKHApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGV0b29scy5mcy5zdGF0KGZpbGVwYXRoLCBmdW5jdGlvbiAoZXIwLCBzdGF0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVyMCkgY2FsbGJhY2sodW5kZWZpbmVkLCBlcjApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRzLmlzRmlsZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXRvb2xzLmZzLnJlYWRGaWxlKGZpbGVwYXRoLCBmdW5jdGlvbiAoZXIxLCBkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcjEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgZXIxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWRkRmlsZSh6aXBQYXRoICsgcCwgZGF0YSwgXCJcIiwgc3RhdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWRkRmlsZSh6aXBQYXRoICsgcCArIFwiL1wiLCBCdWZmZXIuYWxsb2MoMCksIFwiXCIsIHN0YXRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRydWUsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGRzIGEgbG9jYWwgZGlyZWN0b3J5IGFuZCBhbGwgaXRzIG5lc3RlZCBmaWxlcyBhbmQgZGlyZWN0b3JpZXMgdG8gdGhlIGFyY2hpdmVcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3QgfCBzdHJpbmd9IG9wdGlvbnMgLSBvcHRpb25zIG9iamVjdCwgaWYgaXQgaXMgc3RyaW5nIGl0IHVzIHVzZWQgYXMgbG9jYWxQYXRoLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5sb2NhbFBhdGggLSBMb2NhbCBwYXRoIHRvIHRoZSBmb2xkZXIuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy56aXBQYXRoXSAtIG9wdGlvbmFsIHBhdGggaW5zaWRlIHppcC5cbiAgICAgICAgICogQHBhcmFtIHtSZWdFeHB8ZnVuY3Rpb259IFtvcHRpb25zLmZpbHRlcl0gLSBvcHRpb25hbCBSZWdFeHAgb3IgRnVuY3Rpb24gaWYgZmlsZXMgbWF0Y2ggd2lsbCBiZSBpbmNsdWRlZC5cbiAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbnxzdHJpbmd9IFtvcHRpb25zLm5hbWVmaXhdIC0gb3B0aW9uYWwgZnVuY3Rpb24gdG8gaGVscCBmaXggZmlsZW5hbWVcbiAgICAgICAgICogQHBhcmFtIHtkb25lQ2FsbGJhY2t9IGNhbGxiYWNrIC0gVGhlIGNhbGxiYWNrIHRoYXQgaGFuZGxlcyB0aGUgcmVzcG9uc2UuXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBhZGRMb2NhbEZvbGRlckFzeW5jMjogZnVuY3Rpb24gKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMgOiB7IGxvY2FsUGF0aDogb3B0aW9ucyB9O1xuICAgICAgICAgICAgbG9jYWxQYXRoID0gcHRoLnJlc29sdmUoZml4UGF0aChvcHRpb25zLmxvY2FsUGF0aCkpO1xuICAgICAgICAgICAgbGV0IHsgemlwUGF0aCwgZmlsdGVyLCBuYW1lZml4IH0gPSBvcHRpb25zO1xuXG4gICAgICAgICAgICBpZiAoZmlsdGVyIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgICAgICAgICAgZmlsdGVyID0gKGZ1bmN0aW9uIChyeCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGZpbGVuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcngudGVzdChmaWxlbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSkoZmlsdGVyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgZmlsdGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBmaXggWmlwUGF0aFxuICAgICAgICAgICAgemlwUGF0aCA9IHppcFBhdGggPyBmaXhQYXRoKHppcFBhdGgpIDogXCJcIjtcblxuICAgICAgICAgICAgLy8gQ2hlY2sgTmFtZWZpeCBmdW5jdGlvblxuICAgICAgICAgICAgaWYgKG5hbWVmaXggPT0gXCJsYXRpbjFcIikge1xuICAgICAgICAgICAgICAgIG5hbWVmaXggPSAoc3RyKSA9PlxuICAgICAgICAgICAgICAgICAgICBzdHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5ub3JtYWxpemUoXCJORkRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXFx1MDMwMC1cXHUwMzZmXS9nLCBcIlwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1teXFx4MjAtXFx4N0VdL2csIFwiXCIpOyAvLyBhY2NlbnQgZml4IChsYXRpbjEgY2hhcmFjZXJzIG9ubHkpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmFtZWZpeCAhPT0gXCJmdW5jdGlvblwiKSBuYW1lZml4ID0gKHN0cikgPT4gc3RyO1xuXG4gICAgICAgICAgICAvLyBpbnRlcm5hbCwgY3JlYXRlIHJlbGF0aXZlIHBhdGggKyBmaXggdGhlIG5hbWVcbiAgICAgICAgICAgIGNvbnN0IHJlbFBhdGhGaXggPSAoZW50cnkpID0+IHB0aC5qb2luKHppcFBhdGgsIG5hbWVmaXgocmVsYXRpdmVQYXRoKGxvY2FsUGF0aCwgZW50cnkpKSk7XG4gICAgICAgICAgICBjb25zdCBmaWxlTmFtZUZpeCA9IChlbnRyeSkgPT4gcHRoLndpbjMyLmJhc2VuYW1lKHB0aC53aW4zMi5ub3JtYWxpemUobmFtZWZpeChlbnRyeSkpKTtcblxuICAgICAgICAgICAgZmlsZXRvb2xzLmZzLm9wZW4obG9jYWxQYXRoLCBcInJcIiwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgPT09IFwiRU5PRU5UXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCBVdGlscy5FcnJvcnMuRklMRV9OT1RfRk9VTkQobG9jYWxQYXRoKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCBlcnIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGV0b29scy5maW5kRmlsZXNBc3luYyhsb2NhbFBhdGgsIGZ1bmN0aW9uIChlcnIsIGZpbGVFbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVFbnRyaWVzID0gZmlsZUVudHJpZXMuZmlsdGVyKChkaXIpID0+IGZpbHRlcihyZWxQYXRoRml4KGRpcikpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZmlsZUVudHJpZXMubGVuZ3RoKSBjYWxsYmFjayh1bmRlZmluZWQsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SW1tZWRpYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVFbnRyaWVzLnJldmVyc2UoKS5yZWR1Y2UoZnVuY3Rpb24gKG5leHQsIGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZXJyLCBkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyIHx8IGRvbmUgPT09IGZhbHNlKSByZXR1cm4gc2V0SW1tZWRpYXRlKG5leHQsIGVyciwgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFkZExvY2FsRmlsZUFzeW5jKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxQYXRoOiBlbnRyeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgemlwUGF0aDogcHRoLmRpcm5hbWUocmVsUGF0aEZpeChlbnRyeSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6aXBOYW1lOiBmaWxlTmFtZUZpeChlbnRyeSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkcyBhIGxvY2FsIGRpcmVjdG9yeSBhbmQgYWxsIGl0cyBuZXN0ZWQgZmlsZXMgYW5kIGRpcmVjdG9yaWVzIHRvIHRoZSBhcmNoaXZlXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbFBhdGggLSBwYXRoIHdoZXJlIGZpbGVzIHdpbGwgYmUgZXh0cmFjdGVkXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyAtIG9wdGlvbmFsIHByb3BlcnRpZXNcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcm9wcy56aXBQYXRoXSAtIG9wdGlvbmFsIHBhdGggaW5zaWRlIHppcFxuICAgICAgICAgKiBAcGFyYW0ge1JlZ0V4cHxmdW5jdGlvbn0gW3Byb3BzLmZpbHRlcl0gLSBvcHRpb25hbCBSZWdFeHAgb3IgRnVuY3Rpb24gaWYgZmlsZXMgbWF0Y2ggd2lsbCBiZSBpbmNsdWRlZC5cbiAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbnxzdHJpbmd9IFtwcm9wcy5uYW1lZml4XSAtIG9wdGlvbmFsIGZ1bmN0aW9uIHRvIGhlbHAgZml4IGZpbGVuYW1lXG4gICAgICAgICAqL1xuICAgICAgICBhZGRMb2NhbEZvbGRlclByb21pc2U6IGZ1bmN0aW9uIChsb2NhbFBhdGgsIHByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkTG9jYWxGb2xkZXJBc3luYzIoT2JqZWN0LmFzc2lnbih7IGxvY2FsUGF0aCB9LCBwcm9wcyksIChlcnIsIGRvbmUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb25lKSByZXNvbHZlKHRoaXMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFsbG93cyB5b3UgdG8gY3JlYXRlIGEgZW50cnkgKGZpbGUgb3IgZGlyZWN0b3J5KSBpbiB0aGUgemlwIGZpbGUuXG4gICAgICAgICAqIElmIHlvdSB3YW50IHRvIGNyZWF0ZSBhIGRpcmVjdG9yeSB0aGUgZW50cnlOYW1lIG11c3QgZW5kIGluIC8gYW5kIGEgbnVsbCBidWZmZXIgc2hvdWxkIGJlIHByb3ZpZGVkLlxuICAgICAgICAgKiBDb21tZW50IGFuZCBhdHRyaWJ1dGVzIGFyZSBvcHRpb25hbFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZW50cnlOYW1lXG4gICAgICAgICAqIEBwYXJhbSB7QnVmZmVyIHwgc3RyaW5nfSBjb250ZW50IC0gZmlsZSBjb250ZW50IGFzIGJ1ZmZlciBvciB1dGY4IGNvZGVkIHN0cmluZ1xuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NvbW1lbnRdIC0gZmlsZSBjb21tZW50XG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyIHwgb2JqZWN0fSBbYXR0cl0gLSBudW1iZXIgYXMgdW5peCBmaWxlIHBlcm1pc3Npb25zLCBvYmplY3QgYXMgZmlsZXN5c3RlbSBTdGF0cyBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIGFkZEZpbGU6IGZ1bmN0aW9uIChlbnRyeU5hbWUsIGNvbnRlbnQsIGNvbW1lbnQsIGF0dHIpIHtcbiAgICAgICAgICAgIGVudHJ5TmFtZSA9IHppcG5hbWVmaXgoZW50cnlOYW1lKTtcbiAgICAgICAgICAgIGxldCBlbnRyeSA9IGdldEVudHJ5KGVudHJ5TmFtZSk7XG4gICAgICAgICAgICBjb25zdCB1cGRhdGUgPSBlbnRyeSAhPSBudWxsO1xuXG4gICAgICAgICAgICAvLyBwcmVwYXJlIG5ldyBlbnRyeVxuICAgICAgICAgICAgaWYgKCF1cGRhdGUpIHtcbiAgICAgICAgICAgICAgICBlbnRyeSA9IG5ldyBaaXBFbnRyeShvcHRzKTtcbiAgICAgICAgICAgICAgICBlbnRyeS5lbnRyeU5hbWUgPSBlbnRyeU5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbnRyeS5jb21tZW50ID0gY29tbWVudCB8fCBcIlwiO1xuXG4gICAgICAgICAgICBjb25zdCBpc1N0YXQgPSBcIm9iamVjdFwiID09PSB0eXBlb2YgYXR0ciAmJiBhdHRyIGluc3RhbmNlb2YgZmlsZXRvb2xzLmZzLlN0YXRzO1xuXG4gICAgICAgICAgICAvLyBsYXN0IG1vZGlmaWNhdGlvbiB0aW1lIGZyb20gZmlsZSBzdGF0c1xuICAgICAgICAgICAgaWYgKGlzU3RhdCkge1xuICAgICAgICAgICAgICAgIGVudHJ5LmhlYWRlci50aW1lID0gYXR0ci5tdGltZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IGZpbGUgYXR0cmlidXRlXG4gICAgICAgICAgICB2YXIgZmlsZWF0dHIgPSBlbnRyeS5pc0RpcmVjdG9yeSA/IDB4MTAgOiAwOyAvLyAoTVMtRE9TIGRpcmVjdG9yeSBmbGFnKVxuXG4gICAgICAgICAgICAvLyBleHRlbmRlZCBhdHRyaWJ1dGVzIGZpZWxkIGZvciBVbml4XG4gICAgICAgICAgICAvLyBzZXQgZmlsZSB0eXBlIGVpdGhlciBTX0lGRElSIC8gU19JRlJFR1xuICAgICAgICAgICAgbGV0IHVuaXggPSBlbnRyeS5pc0RpcmVjdG9yeSA/IDB4NDAwMCA6IDB4ODAwMDtcblxuICAgICAgICAgICAgaWYgKGlzU3RhdCkge1xuICAgICAgICAgICAgICAgIC8vIEZpbGUgYXR0cmlidXRlcyBmcm9tIGZpbGUgc3RhdHNcbiAgICAgICAgICAgICAgICB1bml4IHw9IDB4ZmZmICYgYXR0ci5tb2RlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcIm51bWJlclwiID09PSB0eXBlb2YgYXR0cikge1xuICAgICAgICAgICAgICAgIC8vIGF0dHIgZnJvbSBnaXZlbiBhdHRyIHZhbHVlc1xuICAgICAgICAgICAgICAgIHVuaXggfD0gMHhmZmYgJiBhdHRyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBEZWZhdWx0IHZhbHVlczpcbiAgICAgICAgICAgICAgICB1bml4IHw9IGVudHJ5LmlzRGlyZWN0b3J5ID8gMG83NTUgOiAwbzY0NDsgLy8gcGVybWlzc2lvbnMgKGRyd3hyLXhyLXgpIG9yICgtci13ci0tci0tKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmaWxlYXR0ciA9IChmaWxlYXR0ciB8ICh1bml4IDw8IDE2KSkgPj4+IDA7IC8vIGFkZCBhdHRyaWJ1dGVzXG5cbiAgICAgICAgICAgIGVudHJ5LmF0dHIgPSBmaWxlYXR0cjtcblxuICAgICAgICAgICAgZW50cnkuc2V0RGF0YShjb250ZW50KTtcbiAgICAgICAgICAgIGlmICghdXBkYXRlKSBfemlwLnNldEVudHJ5KGVudHJ5KTtcblxuICAgICAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIFppcEVudHJ5IG9iamVjdHMgcmVwcmVzZW50aW5nIHRoZSBmaWxlcyBhbmQgZm9sZGVycyBpbnNpZGUgdGhlIGFyY2hpdmVcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtwYXNzd29yZF1cbiAgICAgICAgICogQHJldHVybnMgQXJyYXlcbiAgICAgICAgICovXG4gICAgICAgIGdldEVudHJpZXM6IGZ1bmN0aW9uIChwYXNzd29yZCkge1xuICAgICAgICAgICAgX3ppcC5wYXNzd29yZCA9IHBhc3N3b3JkO1xuICAgICAgICAgICAgcmV0dXJuIF96aXAgPyBfemlwLmVudHJpZXMgOiBbXTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyBhIFppcEVudHJ5IG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGZpbGUgb3IgZm9sZGVyIHNwZWNpZmllZCBieSBgYG5hbWVgYC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICAgICAgICogQHJldHVybiBaaXBFbnRyeVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0RW50cnk6IGZ1bmN0aW9uICgvKipTdHJpbmcqLyBuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RW50cnkobmFtZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0RW50cnlDb3VudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF96aXAuZ2V0RW50cnlDb3VudCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIF96aXAuZm9yRWFjaChjYWxsYmFjayk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEV4dHJhY3RzIHRoZSBnaXZlbiBlbnRyeSB0byB0aGUgZ2l2ZW4gdGFyZ2V0UGF0aFxuICAgICAgICAgKiBJZiB0aGUgZW50cnkgaXMgYSBkaXJlY3RvcnkgaW5zaWRlIHRoZSBhcmNoaXZlLCB0aGUgZW50aXJlIGRpcmVjdG9yeSBhbmQgaXQncyBzdWJkaXJlY3RvcmllcyB3aWxsIGJlIGV4dHJhY3RlZFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ3xaaXBFbnRyeX0gZW50cnkgLSBaaXBFbnRyeSBvYmplY3Qgb3IgU3RyaW5nIHdpdGggdGhlIGZ1bGwgcGF0aCBvZiB0aGUgZW50cnlcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldFBhdGggLSBUYXJnZXQgZm9sZGVyIHdoZXJlIHRvIHdyaXRlIHRoZSBmaWxlXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW21haW50YWluRW50cnlQYXRoPXRydWVdIC0gSWYgbWFpbnRhaW5FbnRyeVBhdGggaXMgdHJ1ZSBhbmQgdGhlIGVudHJ5IGlzIGluc2lkZSBhIGZvbGRlciwgdGhlIGVudHJ5IGZvbGRlciB3aWxsIGJlIGNyZWF0ZWQgaW4gdGFyZ2V0UGF0aCBhcyB3ZWxsLiBEZWZhdWx0IGlzIFRSVUVcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBbb3ZlcndyaXRlPWZhbHNlXSAtIElmIHRoZSBmaWxlIGFscmVhZHkgZXhpc3RzIGF0IHRoZSB0YXJnZXQgcGF0aCwgdGhlIGZpbGUgd2lsbCBiZSBvdmVyd3JpdGVuIGlmIHRoaXMgaXMgdHJ1ZS5cbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBba2VlcE9yaWdpbmFsUGVybWlzc2lvbj1mYWxzZV0gLSBUaGUgZmlsZSB3aWxsIGJlIHNldCBhcyB0aGUgcGVybWlzc2lvbiBmcm9tIHRoZSBlbnRyeSBpZiB0aGlzIGlzIHRydWUuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3V0RmlsZU5hbWVdIC0gU3RyaW5nIElmIHNldCB3aWxsIG92ZXJyaWRlIHRoZSBmaWxlbmFtZSBvZiB0aGUgZXh0cmFjdGVkIGZpbGUgKE9ubHkgd29ya3MgaWYgdGhlIGVudHJ5IGlzIGEgZmlsZSlcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICAgICAqL1xuICAgICAgICBleHRyYWN0RW50cnlUbzogZnVuY3Rpb24gKGVudHJ5LCB0YXJnZXRQYXRoLCBtYWludGFpbkVudHJ5UGF0aCwgb3ZlcndyaXRlLCBrZWVwT3JpZ2luYWxQZXJtaXNzaW9uLCBvdXRGaWxlTmFtZSkge1xuICAgICAgICAgICAgb3ZlcndyaXRlID0gZ2V0X0Jvb2woZmFsc2UsIG92ZXJ3cml0ZSk7XG4gICAgICAgICAgICBrZWVwT3JpZ2luYWxQZXJtaXNzaW9uID0gZ2V0X0Jvb2woZmFsc2UsIGtlZXBPcmlnaW5hbFBlcm1pc3Npb24pO1xuICAgICAgICAgICAgbWFpbnRhaW5FbnRyeVBhdGggPSBnZXRfQm9vbCh0cnVlLCBtYWludGFpbkVudHJ5UGF0aCk7XG4gICAgICAgICAgICBvdXRGaWxlTmFtZSA9IGdldF9TdHIoa2VlcE9yaWdpbmFsUGVybWlzc2lvbiwgb3V0RmlsZU5hbWUpO1xuXG4gICAgICAgICAgICB2YXIgaXRlbSA9IGdldEVudHJ5KGVudHJ5KTtcbiAgICAgICAgICAgIGlmICghaXRlbSkge1xuICAgICAgICAgICAgICAgIHRocm93IFV0aWxzLkVycm9ycy5OT19FTlRSWSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZW50cnlOYW1lID0gY2Fub25pY2FsKGl0ZW0uZW50cnlOYW1lKTtcblxuICAgICAgICAgICAgdmFyIHRhcmdldCA9IHNhbml0aXplKHRhcmdldFBhdGgsIG91dEZpbGVOYW1lICYmICFpdGVtLmlzRGlyZWN0b3J5ID8gb3V0RmlsZU5hbWUgOiBtYWludGFpbkVudHJ5UGF0aCA/IGVudHJ5TmFtZSA6IHB0aC5iYXNlbmFtZShlbnRyeU5hbWUpKTtcblxuICAgICAgICAgICAgaWYgKGl0ZW0uaXNEaXJlY3RvcnkpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBfemlwLmdldEVudHJ5Q2hpbGRyZW4oaXRlbSk7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLmlzRGlyZWN0b3J5KSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gY2hpbGQuZ2V0RGF0YSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFV0aWxzLkVycm9ycy5DQU5UX0VYVFJBQ1RfRklMRSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBuYW1lID0gY2Fub25pY2FsKGNoaWxkLmVudHJ5TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZE5hbWUgPSBzYW5pdGl6ZSh0YXJnZXRQYXRoLCBtYWludGFpbkVudHJ5UGF0aCA/IG5hbWUgOiBwdGguYmFzZW5hbWUobmFtZSkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcmV2ZXJzZSBvcGVyYXRpb24gZm9yIGF0dHIgZGVwZW5kIG9uIG1ldGhvZCBhZGRGaWxlKClcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZUF0dHIgPSBrZWVwT3JpZ2luYWxQZXJtaXNzaW9uID8gY2hpbGQuaGVhZGVyLmZpbGVBdHRyIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBmaWxldG9vbHMud3JpdGVGaWxlVG8oY2hpbGROYW1lLCBjb250ZW50LCBvdmVyd3JpdGUsIGZpbGVBdHRyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBpdGVtLmdldERhdGEoX3ppcC5wYXNzd29yZCk7XG4gICAgICAgICAgICBpZiAoIWNvbnRlbnQpIHRocm93IFV0aWxzLkVycm9ycy5DQU5UX0VYVFJBQ1RfRklMRSgpO1xuXG4gICAgICAgICAgICBpZiAoZmlsZXRvb2xzLmZzLmV4aXN0c1N5bmModGFyZ2V0KSAmJiAhb3ZlcndyaXRlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgVXRpbHMuRXJyb3JzLkNBTlRfT1ZFUlJJREUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRoZSByZXZlcnNlIG9wZXJhdGlvbiBmb3IgYXR0ciBkZXBlbmQgb24gbWV0aG9kIGFkZEZpbGUoKVxuICAgICAgICAgICAgY29uc3QgZmlsZUF0dHIgPSBrZWVwT3JpZ2luYWxQZXJtaXNzaW9uID8gZW50cnkuaGVhZGVyLmZpbGVBdHRyIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgZmlsZXRvb2xzLndyaXRlRmlsZVRvKHRhcmdldCwgY29udGVudCwgb3ZlcndyaXRlLCBmaWxlQXR0cik7XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUZXN0IHRoZSBhcmNoaXZlXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcGFzc11cbiAgICAgICAgICovXG4gICAgICAgIHRlc3Q6IGZ1bmN0aW9uIChwYXNzKSB7XG4gICAgICAgICAgICBpZiAoIV96aXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGVudHJ5IGluIF96aXAuZW50cmllcykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnRyeS5pc0RpcmVjdG9yeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBfemlwLmVudHJpZXNbZW50cnldLmdldERhdGEocGFzcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogRXh0cmFjdHMgdGhlIGVudGlyZSBhcmNoaXZlIHRvIHRoZSBnaXZlbiBsb2NhdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0UGF0aCBUYXJnZXQgbG9jYXRpb25cbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBbb3ZlcndyaXRlPWZhbHNlXSBJZiB0aGUgZmlsZSBhbHJlYWR5IGV4aXN0cyBhdCB0aGUgdGFyZ2V0IHBhdGgsIHRoZSBmaWxlIHdpbGwgYmUgb3ZlcndyaXRlbiBpZiB0aGlzIGlzIHRydWUuXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgRGVmYXVsdCBpcyBGQUxTRVxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtrZWVwT3JpZ2luYWxQZXJtaXNzaW9uPWZhbHNlXSBUaGUgZmlsZSB3aWxsIGJlIHNldCBhcyB0aGUgcGVybWlzc2lvbiBmcm9tIHRoZSBlbnRyeSBpZiB0aGlzIGlzIHRydWUuXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgRGVmYXVsdCBpcyBGQUxTRVxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ3xCdWZmZXJ9IFtwYXNzXSBwYXNzd29yZFxuICAgICAgICAgKi9cbiAgICAgICAgZXh0cmFjdEFsbFRvOiBmdW5jdGlvbiAodGFyZ2V0UGF0aCwgb3ZlcndyaXRlLCBrZWVwT3JpZ2luYWxQZXJtaXNzaW9uLCBwYXNzKSB7XG4gICAgICAgICAgICBrZWVwT3JpZ2luYWxQZXJtaXNzaW9uID0gZ2V0X0Jvb2woZmFsc2UsIGtlZXBPcmlnaW5hbFBlcm1pc3Npb24pO1xuICAgICAgICAgICAgcGFzcyA9IGdldF9TdHIoa2VlcE9yaWdpbmFsUGVybWlzc2lvbiwgcGFzcyk7XG4gICAgICAgICAgICBvdmVyd3JpdGUgPSBnZXRfQm9vbChmYWxzZSwgb3ZlcndyaXRlKTtcbiAgICAgICAgICAgIGlmICghX3ppcCkgdGhyb3cgVXRpbHMuRXJyb3JzLk5PX1pJUCgpO1xuXG4gICAgICAgICAgICBfemlwLmVudHJpZXMuZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZW50cnlOYW1lID0gc2FuaXRpemUodGFyZ2V0UGF0aCwgY2Fub25pY2FsKGVudHJ5LmVudHJ5TmFtZSkpO1xuICAgICAgICAgICAgICAgIGlmIChlbnRyeS5pc0RpcmVjdG9yeSkge1xuICAgICAgICAgICAgICAgICAgICBmaWxldG9vbHMubWFrZURpcihlbnRyeU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gZW50cnkuZ2V0RGF0YShwYXNzKTtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVXRpbHMuRXJyb3JzLkNBTlRfRVhUUkFDVF9GSUxFKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFRoZSByZXZlcnNlIG9wZXJhdGlvbiBmb3IgYXR0ciBkZXBlbmQgb24gbWV0aG9kIGFkZEZpbGUoKVxuICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVBdHRyID0ga2VlcE9yaWdpbmFsUGVybWlzc2lvbiA/IGVudHJ5LmhlYWRlci5maWxlQXR0ciA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBmaWxldG9vbHMud3JpdGVGaWxlVG8oZW50cnlOYW1lLCBjb250ZW50LCBvdmVyd3JpdGUsIGZpbGVBdHRyKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmaWxldG9vbHMuZnMudXRpbWVzU3luYyhlbnRyeU5hbWUsIGVudHJ5LmhlYWRlci50aW1lLCBlbnRyeS5oZWFkZXIudGltZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IFV0aWxzLkVycm9ycy5DQU5UX0VYVFJBQ1RfRklMRSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBc3luY2hyb25vdXMgZXh0cmFjdEFsbFRvXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXRQYXRoIFRhcmdldCBsb2NhdGlvblxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvdmVyd3JpdGU9ZmFsc2VdIElmIHRoZSBmaWxlIGFscmVhZHkgZXhpc3RzIGF0IHRoZSB0YXJnZXQgcGF0aCwgdGhlIGZpbGUgd2lsbCBiZSBvdmVyd3JpdGVuIGlmIHRoaXMgaXMgdHJ1ZS5cbiAgICAgICAgICogICAgICAgICAgICAgICAgICBEZWZhdWx0IGlzIEZBTFNFXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2tlZXBPcmlnaW5hbFBlcm1pc3Npb249ZmFsc2VdIFRoZSBmaWxlIHdpbGwgYmUgc2V0IGFzIHRoZSBwZXJtaXNzaW9uIGZyb20gdGhlIGVudHJ5IGlmIHRoaXMgaXMgdHJ1ZS5cbiAgICAgICAgICogICAgICAgICAgICAgICAgICBEZWZhdWx0IGlzIEZBTFNFXG4gICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIFRoZSBjYWxsYmFjayB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gYWxsIGVudHJpZXMgYXJlIGV4dHJhY3RlZCBzdWNjZXNzZnVsbHkgb3IgYW55IGVycm9yIGlzIHRocm93bi5cbiAgICAgICAgICovXG4gICAgICAgIGV4dHJhY3RBbGxUb0FzeW5jOiBmdW5jdGlvbiAodGFyZ2V0UGF0aCwgb3ZlcndyaXRlLCBrZWVwT3JpZ2luYWxQZXJtaXNzaW9uLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBnZXRfRnVuKG92ZXJ3cml0ZSwga2VlcE9yaWdpbmFsUGVybWlzc2lvbiwgY2FsbGJhY2spO1xuICAgICAgICAgICAga2VlcE9yaWdpbmFsUGVybWlzc2lvbiA9IGdldF9Cb29sKGZhbHNlLCBrZWVwT3JpZ2luYWxQZXJtaXNzaW9uKTtcbiAgICAgICAgICAgIG92ZXJ3cml0ZSA9IGdldF9Cb29sKGZhbHNlLCBvdmVyd3JpdGUpO1xuICAgICAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXh0cmFjdEFsbFRvQXN5bmModGFyZ2V0UGF0aCwgb3ZlcndyaXRlLCBrZWVwT3JpZ2luYWxQZXJtaXNzaW9uLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFfemlwKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soVXRpbHMuRXJyb3JzLk5PX1pJUCgpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRhcmdldFBhdGggPSBwdGgucmVzb2x2ZSh0YXJnZXRQYXRoKTtcbiAgICAgICAgICAgIC8vIGNvbnZlcnQgZW50cnlOYW1lIHRvXG4gICAgICAgICAgICBjb25zdCBnZXRQYXRoID0gKGVudHJ5KSA9PiBzYW5pdGl6ZSh0YXJnZXRQYXRoLCBwdGgubm9ybWFsaXplKGNhbm9uaWNhbChlbnRyeS5lbnRyeU5hbWUpKSk7XG4gICAgICAgICAgICBjb25zdCBnZXRFcnJvciA9IChtc2csIGZpbGUpID0+IG5ldyBFcnJvcihtc2cgKyAnOiBcIicgKyBmaWxlICsgJ1wiJyk7XG5cbiAgICAgICAgICAgIC8vIHNlcGFyYXRlIGRpcmVjdG9yaWVzIGZyb20gZmlsZXNcbiAgICAgICAgICAgIGNvbnN0IGRpckVudHJpZXMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVFbnRyaWVzID0gW107XG4gICAgICAgICAgICBfemlwLmVudHJpZXMuZm9yRWFjaCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlLmlzRGlyZWN0b3J5KSB7XG4gICAgICAgICAgICAgICAgICAgIGRpckVudHJpZXMucHVzaChlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmaWxlRW50cmllcy5wdXNoKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBDcmVhdGUgZGlyZWN0b3J5IGVudHJpZXMgZmlyc3Qgc3luY2hyb25vdXNseVxuICAgICAgICAgICAgLy8gdGhpcyBwcmV2ZW50cyByYWNlIGNvbmRpdGlvbiBhbmQgYXNzdXJlcyBmb2xkZXJzIGFyZSB0aGVyZSBiZWZvcmUgd3JpdGluZyBmaWxlc1xuICAgICAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBkaXJFbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGlyUGF0aCA9IGdldFBhdGgoZW50cnkpO1xuICAgICAgICAgICAgICAgIC8vIFRoZSByZXZlcnNlIG9wZXJhdGlvbiBmb3IgYXR0ciBkZXBlbmQgb24gbWV0aG9kIGFkZEZpbGUoKVxuICAgICAgICAgICAgICAgIGNvbnN0IGRpckF0dHIgPSBrZWVwT3JpZ2luYWxQZXJtaXNzaW9uID8gZW50cnkuaGVhZGVyLmZpbGVBdHRyIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGV0b29scy5tYWtlRGlyKGRpclBhdGgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGlyQXR0cikgZmlsZXRvb2xzLmZzLmNobW9kU3luYyhkaXJQYXRoLCBkaXJBdHRyKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gaW4gdW5peCB0aW1lc3RhbXAgd2lsbCBjaGFuZ2UgaWYgZmlsZXMgYXJlIGxhdGVyIGFkZGVkIHRvIGZvbGRlciwgYnV0IHN0aWxsXG4gICAgICAgICAgICAgICAgICAgIGZpbGV0b29scy5mcy51dGltZXNTeW5jKGRpclBhdGgsIGVudHJ5LmhlYWRlci50aW1lLCBlbnRyeS5oZWFkZXIudGltZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZ2V0RXJyb3IoXCJVbmFibGUgdG8gY3JlYXRlIGZvbGRlclwiLCBkaXJQYXRoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmaWxlRW50cmllcy5yZXZlcnNlKCkucmVkdWNlKGZ1bmN0aW9uIChuZXh0LCBlbnRyeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVudHJ5TmFtZSA9IHB0aC5ub3JtYWxpemUoY2Fub25pY2FsKGVudHJ5LmVudHJ5TmFtZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZVBhdGggPSBzYW5pdGl6ZSh0YXJnZXRQYXRoLCBlbnRyeU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkuZ2V0RGF0YUFzeW5jKGZ1bmN0aW9uIChjb250ZW50LCBlcnJfMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJfMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0KGVycl8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFjb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoVXRpbHMuRXJyb3JzLkNBTlRfRVhUUkFDVF9GSUxFKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSByZXZlcnNlIG9wZXJhdGlvbiBmb3IgYXR0ciBkZXBlbmQgb24gbWV0aG9kIGFkZEZpbGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlQXR0ciA9IGtlZXBPcmlnaW5hbFBlcm1pc3Npb24gPyBlbnRyeS5oZWFkZXIuZmlsZUF0dHIgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGV0b29scy53cml0ZUZpbGVUb0FzeW5jKGZpbGVQYXRoLCBjb250ZW50LCBvdmVyd3JpdGUsIGZpbGVBdHRyLCBmdW5jdGlvbiAoc3VjYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdWNjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dChnZXRFcnJvcihcIlVuYWJsZSB0byB3cml0ZSBmaWxlXCIsIGZpbGVQYXRoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxldG9vbHMuZnMudXRpbWVzKGZpbGVQYXRoLCBlbnRyeS5oZWFkZXIudGltZSwgZW50cnkuaGVhZGVyLnRpbWUsIGZ1bmN0aW9uIChlcnJfMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJfMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0KGdldEVycm9yKFwiVW5hYmxlIHRvIHNldCB0aW1lc1wiLCBmaWxlUGF0aCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSwgY2FsbGJhY2spKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdyaXRlcyB0aGUgbmV3bHkgY3JlYXRlZCB6aXAgZmlsZSB0byBkaXNrIGF0IHRoZSBzcGVjaWZpZWQgbG9jYXRpb24gb3IgaWYgYSB6aXAgd2FzIG9wZW5lZCBhbmQgbm8gYGB0YXJnZXRGaWxlTmFtZWBgIGlzIHByb3ZpZGVkLCBpdCB3aWxsIG92ZXJ3cml0ZSB0aGUgb3BlbmVkIHppcFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0RmlsZU5hbWVcbiAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgICAgICovXG4gICAgICAgIHdyaXRlWmlwOiBmdW5jdGlvbiAodGFyZ2V0RmlsZU5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0RmlsZU5hbWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayA9IHRhcmdldEZpbGVOYW1lO1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRGaWxlTmFtZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXRhcmdldEZpbGVOYW1lICYmIG9wdHMuZmlsZW5hbWUpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRGaWxlTmFtZSA9IG9wdHMuZmlsZW5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRhcmdldEZpbGVOYW1lKSByZXR1cm47XG5cbiAgICAgICAgICAgIHZhciB6aXBEYXRhID0gX3ppcC5jb21wcmVzc1RvQnVmZmVyKCk7XG4gICAgICAgICAgICBpZiAoemlwRGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBvayA9IGZpbGV0b29scy53cml0ZUZpbGVUbyh0YXJnZXRGaWxlTmFtZSwgemlwRGF0YSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKSBjYWxsYmFjayghb2sgPyBuZXcgRXJyb3IoXCJmYWlsZWRcIikgOiBudWxsLCBcIlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldEZpbGVOYW1lXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbcHJvcHNdXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Byb3BzLm92ZXJ3cml0ZT10cnVlXSBJZiB0aGUgZmlsZSBhbHJlYWR5IGV4aXN0cyBhdCB0aGUgdGFyZ2V0IHBhdGgsIHRoZSBmaWxlIHdpbGwgYmUgb3ZlcndyaXRlbiBpZiB0aGlzIGlzIHRydWUuXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Byb3BzLnBlcm1dIFRoZSBmaWxlIHdpbGwgYmUgc2V0IGFzIHRoZSBwZXJtaXNzaW9uIGZyb20gdGhlIGVudHJ5IGlmIHRoaXMgaXMgdHJ1ZS5cblxuICAgICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICAgICAgICovXG4gICAgICAgIHdyaXRlWmlwUHJvbWlzZTogZnVuY3Rpb24gKC8qKlN0cmluZyovIHRhcmdldEZpbGVOYW1lLCAvKiBvYmplY3QgKi8gcHJvcHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgb3ZlcndyaXRlLCBwZXJtIH0gPSBPYmplY3QuYXNzaWduKHsgb3ZlcndyaXRlOiB0cnVlIH0sIHByb3BzKTtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBmaW5kIGZpbGUgbmFtZVxuICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0RmlsZU5hbWUgJiYgb3B0cy5maWxlbmFtZSkgdGFyZ2V0RmlsZU5hbWUgPSBvcHRzLmZpbGVuYW1lO1xuICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0RmlsZU5hbWUpIHJlamVjdChcIkFETS1aSVA6IFpJUCBGaWxlIE5hbWUgTWlzc2luZ1wiKTtcblxuICAgICAgICAgICAgICAgIHRoaXMudG9CdWZmZXJQcm9taXNlKCkudGhlbigoemlwRGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXQgPSAoZG9uZSkgPT4gKGRvbmUgPyByZXNvbHZlKGRvbmUpIDogcmVqZWN0KFwiQURNLVpJUDogV2Fzbid0IGFibGUgdG8gd3JpdGUgemlwIGZpbGVcIikpO1xuICAgICAgICAgICAgICAgICAgICBmaWxldG9vbHMud3JpdGVGaWxlVG9Bc3luYyh0YXJnZXRGaWxlTmFtZSwgemlwRGF0YSwgb3ZlcndyaXRlLCBwZXJtLCByZXQpO1xuICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQHJldHVybnMge1Byb21pc2U8QnVmZmVyPn0gQSBwcm9taXNlIHRvIHRoZSBCdWZmZXIuXG4gICAgICAgICAqL1xuICAgICAgICB0b0J1ZmZlclByb21pc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgX3ppcC50b0FzeW5jQnVmZmVyKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgY29udGVudCBvZiB0aGUgZW50aXJlIHppcCBmaWxlIGFzIGEgQnVmZmVyIG9iamVjdFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHJvcCB7ZnVuY3Rpb259IFtvblN1Y2Nlc3NdXG4gICAgICAgICAqIEBwcm9wIHtmdW5jdGlvbn0gW29uRmFpbF1cbiAgICAgICAgICogQHByb3Age2Z1bmN0aW9ufSBbb25JdGVtU3RhcnRdXG4gICAgICAgICAqIEBwcm9wIHtmdW5jdGlvbn0gW29uSXRlbUVuZF1cbiAgICAgICAgICogQHJldHVybnMge0J1ZmZlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRvQnVmZmVyOiBmdW5jdGlvbiAob25TdWNjZXNzLCBvbkZhaWwsIG9uSXRlbVN0YXJ0LCBvbkl0ZW1FbmQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb25TdWNjZXNzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBfemlwLnRvQXN5bmNCdWZmZXIob25TdWNjZXNzLCBvbkZhaWwsIG9uSXRlbVN0YXJ0LCBvbkl0ZW1FbmQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF96aXAuY29tcHJlc3NUb0J1ZmZlcigpO1xuICAgICAgICB9XG4gICAgfTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBoYXNLZXkob2JqLCBrZXlzKSB7XG5cdHZhciBvID0gb2JqO1xuXHRrZXlzLnNsaWNlKDAsIC0xKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRvID0gb1trZXldIHx8IHt9O1xuXHR9KTtcblxuXHR2YXIga2V5ID0ga2V5c1trZXlzLmxlbmd0aCAtIDFdO1xuXHRyZXR1cm4ga2V5IGluIG87XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKHgpIHtcblx0aWYgKHR5cGVvZiB4ID09PSAnbnVtYmVyJykgeyByZXR1cm4gdHJ1ZTsgfVxuXHRpZiAoKC9eMHhbMC05YS1mXSskL2kpLnRlc3QoeCkpIHsgcmV0dXJuIHRydWU7IH1cblx0cmV0dXJuICgvXlstK10/KD86XFxkKyg/OlxcLlxcZCopP3xcXC5cXGQrKShlWy0rXT9cXGQrKT8kLykudGVzdCh4KTtcbn1cblxuZnVuY3Rpb24gaXNDb25zdHJ1Y3Rvck9yUHJvdG8ob2JqLCBrZXkpIHtcblx0cmV0dXJuIChrZXkgPT09ICdjb25zdHJ1Y3RvcicgJiYgdHlwZW9mIG9ialtrZXldID09PSAnZnVuY3Rpb24nKSB8fCBrZXkgPT09ICdfX3Byb3RvX18nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmdzLCBvcHRzKSB7XG5cdGlmICghb3B0cykgeyBvcHRzID0ge307IH1cblxuXHR2YXIgZmxhZ3MgPSB7XG5cdFx0Ym9vbHM6IHt9LFxuXHRcdHN0cmluZ3M6IHt9LFxuXHRcdHVua25vd25GbjogbnVsbCxcblx0fTtcblxuXHRpZiAodHlwZW9mIG9wdHMudW5rbm93biA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGZsYWdzLnVua25vd25GbiA9IG9wdHMudW5rbm93bjtcblx0fVxuXG5cdGlmICh0eXBlb2Ygb3B0cy5ib29sZWFuID09PSAnYm9vbGVhbicgJiYgb3B0cy5ib29sZWFuKSB7XG5cdFx0ZmxhZ3MuYWxsQm9vbHMgPSB0cnVlO1xuXHR9IGVsc2Uge1xuXHRcdFtdLmNvbmNhdChvcHRzLmJvb2xlYW4pLmZpbHRlcihCb29sZWFuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdGZsYWdzLmJvb2xzW2tleV0gPSB0cnVlO1xuXHRcdH0pO1xuXHR9XG5cblx0dmFyIGFsaWFzZXMgPSB7fTtcblxuXHRmdW5jdGlvbiBhbGlhc0lzQm9vbGVhbihrZXkpIHtcblx0XHRyZXR1cm4gYWxpYXNlc1trZXldLnNvbWUoZnVuY3Rpb24gKHgpIHtcblx0XHRcdHJldHVybiBmbGFncy5ib29sc1t4XTtcblx0XHR9KTtcblx0fVxuXG5cdE9iamVjdC5rZXlzKG9wdHMuYWxpYXMgfHwge30pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGFsaWFzZXNba2V5XSA9IFtdLmNvbmNhdChvcHRzLmFsaWFzW2tleV0pO1xuXHRcdGFsaWFzZXNba2V5XS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG5cdFx0XHRhbGlhc2VzW3hdID0gW2tleV0uY29uY2F0KGFsaWFzZXNba2V5XS5maWx0ZXIoZnVuY3Rpb24gKHkpIHtcblx0XHRcdFx0cmV0dXJuIHggIT09IHk7XG5cdFx0XHR9KSk7XG5cdFx0fSk7XG5cdH0pO1xuXG5cdFtdLmNvbmNhdChvcHRzLnN0cmluZykuZmlsdGVyKEJvb2xlYW4pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGZsYWdzLnN0cmluZ3Nba2V5XSA9IHRydWU7XG5cdFx0aWYgKGFsaWFzZXNba2V5XSkge1xuXHRcdFx0W10uY29uY2F0KGFsaWFzZXNba2V5XSkuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuXHRcdFx0XHRmbGFncy5zdHJpbmdzW2tdID0gdHJ1ZTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fSk7XG5cblx0dmFyIGRlZmF1bHRzID0gb3B0cy5kZWZhdWx0IHx8IHt9O1xuXG5cdHZhciBhcmd2ID0geyBfOiBbXSB9O1xuXG5cdGZ1bmN0aW9uIGFyZ0RlZmluZWQoa2V5LCBhcmcpIHtcblx0XHRyZXR1cm4gKGZsYWdzLmFsbEJvb2xzICYmICgvXi0tW149XSskLykudGVzdChhcmcpKVxuXHRcdFx0fHwgZmxhZ3Muc3RyaW5nc1trZXldXG5cdFx0XHR8fCBmbGFncy5ib29sc1trZXldXG5cdFx0XHR8fCBhbGlhc2VzW2tleV07XG5cdH1cblxuXHRmdW5jdGlvbiBzZXRLZXkob2JqLCBrZXlzLCB2YWx1ZSkge1xuXHRcdHZhciBvID0gb2JqO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGggLSAxOyBpKyspIHtcblx0XHRcdHZhciBrZXkgPSBrZXlzW2ldO1xuXHRcdFx0aWYgKGlzQ29uc3RydWN0b3JPclByb3RvKG8sIGtleSkpIHsgcmV0dXJuOyB9XG5cdFx0XHRpZiAob1trZXldID09PSB1bmRlZmluZWQpIHsgb1trZXldID0ge307IH1cblx0XHRcdGlmIChcblx0XHRcdFx0b1trZXldID09PSBPYmplY3QucHJvdG90eXBlXG5cdFx0XHRcdHx8IG9ba2V5XSA9PT0gTnVtYmVyLnByb3RvdHlwZVxuXHRcdFx0XHR8fCBvW2tleV0gPT09IFN0cmluZy5wcm90b3R5cGVcblx0XHRcdCkge1xuXHRcdFx0XHRvW2tleV0gPSB7fTtcblx0XHRcdH1cblx0XHRcdGlmIChvW2tleV0gPT09IEFycmF5LnByb3RvdHlwZSkgeyBvW2tleV0gPSBbXTsgfVxuXHRcdFx0byA9IG9ba2V5XTtcblx0XHR9XG5cblx0XHR2YXIgbGFzdEtleSA9IGtleXNba2V5cy5sZW5ndGggLSAxXTtcblx0XHRpZiAoaXNDb25zdHJ1Y3Rvck9yUHJvdG8obywgbGFzdEtleSkpIHsgcmV0dXJuOyB9XG5cdFx0aWYgKFxuXHRcdFx0byA9PT0gT2JqZWN0LnByb3RvdHlwZVxuXHRcdFx0fHwgbyA9PT0gTnVtYmVyLnByb3RvdHlwZVxuXHRcdFx0fHwgbyA9PT0gU3RyaW5nLnByb3RvdHlwZVxuXHRcdCkge1xuXHRcdFx0byA9IHt9O1xuXHRcdH1cblx0XHRpZiAobyA9PT0gQXJyYXkucHJvdG90eXBlKSB7IG8gPSBbXTsgfVxuXHRcdGlmIChvW2xhc3RLZXldID09PSB1bmRlZmluZWQgfHwgZmxhZ3MuYm9vbHNbbGFzdEtleV0gfHwgdHlwZW9mIG9bbGFzdEtleV0gPT09ICdib29sZWFuJykge1xuXHRcdFx0b1tsYXN0S2V5XSA9IHZhbHVlO1xuXHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvW2xhc3RLZXldKSkge1xuXHRcdFx0b1tsYXN0S2V5XS5wdXNoKHZhbHVlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b1tsYXN0S2V5XSA9IFtvW2xhc3RLZXldLCB2YWx1ZV07XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0QXJnKGtleSwgdmFsLCBhcmcpIHtcblx0XHRpZiAoYXJnICYmIGZsYWdzLnVua25vd25GbiAmJiAhYXJnRGVmaW5lZChrZXksIGFyZykpIHtcblx0XHRcdGlmIChmbGFncy51bmtub3duRm4oYXJnKSA9PT0gZmFsc2UpIHsgcmV0dXJuOyB9XG5cdFx0fVxuXG5cdFx0dmFyIHZhbHVlID0gIWZsYWdzLnN0cmluZ3Nba2V5XSAmJiBpc051bWJlcih2YWwpXG5cdFx0XHQ/IE51bWJlcih2YWwpXG5cdFx0XHQ6IHZhbDtcblx0XHRzZXRLZXkoYXJndiwga2V5LnNwbGl0KCcuJyksIHZhbHVlKTtcblxuXHRcdChhbGlhc2VzW2tleV0gfHwgW10pLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcblx0XHRcdHNldEtleShhcmd2LCB4LnNwbGl0KCcuJyksIHZhbHVlKTtcblx0XHR9KTtcblx0fVxuXG5cdE9iamVjdC5rZXlzKGZsYWdzLmJvb2xzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRzZXRBcmcoa2V5LCBkZWZhdWx0c1trZXldID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IGRlZmF1bHRzW2tleV0pO1xuXHR9KTtcblxuXHR2YXIgbm90RmxhZ3MgPSBbXTtcblxuXHRpZiAoYXJncy5pbmRleE9mKCctLScpICE9PSAtMSkge1xuXHRcdG5vdEZsYWdzID0gYXJncy5zbGljZShhcmdzLmluZGV4T2YoJy0tJykgKyAxKTtcblx0XHRhcmdzID0gYXJncy5zbGljZSgwLCBhcmdzLmluZGV4T2YoJy0tJykpO1xuXHR9XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGFyZyA9IGFyZ3NbaV07XG5cdFx0dmFyIGtleTtcblx0XHR2YXIgbmV4dDtcblxuXHRcdGlmICgoL14tLS4rPS8pLnRlc3QoYXJnKSkge1xuXHRcdFx0Ly8gVXNpbmcgW1xcc1xcU10gaW5zdGVhZCBvZiAuIGJlY2F1c2UganMgZG9lc24ndCBzdXBwb3J0IHRoZVxuXHRcdFx0Ly8gJ2RvdGFsbCcgcmVnZXggbW9kaWZpZXIuIFNlZTpcblx0XHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzEwNjgzMDgvMTMyMTZcblx0XHRcdHZhciBtID0gYXJnLm1hdGNoKC9eLS0oW149XSspPShbXFxzXFxTXSopJC8pO1xuXHRcdFx0a2V5ID0gbVsxXTtcblx0XHRcdHZhciB2YWx1ZSA9IG1bMl07XG5cdFx0XHRpZiAoZmxhZ3MuYm9vbHNba2V5XSkge1xuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlICE9PSAnZmFsc2UnO1xuXHRcdFx0fVxuXHRcdFx0c2V0QXJnKGtleSwgdmFsdWUsIGFyZyk7XG5cdFx0fSBlbHNlIGlmICgoL14tLW5vLS4rLykudGVzdChhcmcpKSB7XG5cdFx0XHRrZXkgPSBhcmcubWF0Y2goL14tLW5vLSguKykvKVsxXTtcblx0XHRcdHNldEFyZyhrZXksIGZhbHNlLCBhcmcpO1xuXHRcdH0gZWxzZSBpZiAoKC9eLS0uKy8pLnRlc3QoYXJnKSkge1xuXHRcdFx0a2V5ID0gYXJnLm1hdGNoKC9eLS0oLispLylbMV07XG5cdFx0XHRuZXh0ID0gYXJnc1tpICsgMV07XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5leHQgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQmJiAhKC9eKC18LS0pW14tXS8pLnRlc3QobmV4dClcblx0XHRcdFx0JiYgIWZsYWdzLmJvb2xzW2tleV1cblx0XHRcdFx0JiYgIWZsYWdzLmFsbEJvb2xzXG5cdFx0XHRcdCYmIChhbGlhc2VzW2tleV0gPyAhYWxpYXNJc0Jvb2xlYW4oa2V5KSA6IHRydWUpXG5cdFx0XHQpIHtcblx0XHRcdFx0c2V0QXJnKGtleSwgbmV4dCwgYXJnKTtcblx0XHRcdFx0aSArPSAxO1xuXHRcdFx0fSBlbHNlIGlmICgoL14odHJ1ZXxmYWxzZSkkLykudGVzdChuZXh0KSkge1xuXHRcdFx0XHRzZXRBcmcoa2V5LCBuZXh0ID09PSAndHJ1ZScsIGFyZyk7XG5cdFx0XHRcdGkgKz0gMTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNldEFyZyhrZXksIGZsYWdzLnN0cmluZ3Nba2V5XSA/ICcnIDogdHJ1ZSwgYXJnKTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKCgvXi1bXi1dKy8pLnRlc3QoYXJnKSkge1xuXHRcdFx0dmFyIGxldHRlcnMgPSBhcmcuc2xpY2UoMSwgLTEpLnNwbGl0KCcnKTtcblxuXHRcdFx0dmFyIGJyb2tlbiA9IGZhbHNlO1xuXHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBsZXR0ZXJzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdG5leHQgPSBhcmcuc2xpY2UoaiArIDIpO1xuXG5cdFx0XHRcdGlmIChuZXh0ID09PSAnLScpIHtcblx0XHRcdFx0XHRzZXRBcmcobGV0dGVyc1tqXSwgbmV4dCwgYXJnKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICgoL1tBLVphLXpdLykudGVzdChsZXR0ZXJzW2pdKSAmJiBuZXh0WzBdID09PSAnPScpIHtcblx0XHRcdFx0XHRzZXRBcmcobGV0dGVyc1tqXSwgbmV4dC5zbGljZSgxKSwgYXJnKTtcblx0XHRcdFx0XHRicm9rZW4gPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdCgvW0EtWmEtel0vKS50ZXN0KGxldHRlcnNbal0pXG5cdFx0XHRcdFx0JiYgKC8tP1xcZCsoXFwuXFxkKik/KGUtP1xcZCspPyQvKS50ZXN0KG5leHQpXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHNldEFyZyhsZXR0ZXJzW2pdLCBuZXh0LCBhcmcpO1xuXHRcdFx0XHRcdGJyb2tlbiA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAobGV0dGVyc1tqICsgMV0gJiYgbGV0dGVyc1tqICsgMV0ubWF0Y2goL1xcVy8pKSB7XG5cdFx0XHRcdFx0c2V0QXJnKGxldHRlcnNbal0sIGFyZy5zbGljZShqICsgMiksIGFyZyk7XG5cdFx0XHRcdFx0YnJva2VuID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZXRBcmcobGV0dGVyc1tqXSwgZmxhZ3Muc3RyaW5nc1tsZXR0ZXJzW2pdXSA/ICcnIDogdHJ1ZSwgYXJnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRrZXkgPSBhcmcuc2xpY2UoLTEpWzBdO1xuXHRcdFx0aWYgKCFicm9rZW4gJiYga2V5ICE9PSAnLScpIHtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdGFyZ3NbaSArIDFdXG5cdFx0XHRcdFx0JiYgISgvXigtfC0tKVteLV0vKS50ZXN0KGFyZ3NbaSArIDFdKVxuXHRcdFx0XHRcdCYmICFmbGFncy5ib29sc1trZXldXG5cdFx0XHRcdFx0JiYgKGFsaWFzZXNba2V5XSA/ICFhbGlhc0lzQm9vbGVhbihrZXkpIDogdHJ1ZSlcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0c2V0QXJnKGtleSwgYXJnc1tpICsgMV0sIGFyZyk7XG5cdFx0XHRcdFx0aSArPSAxO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGFyZ3NbaSArIDFdICYmICgvXih0cnVlfGZhbHNlKSQvKS50ZXN0KGFyZ3NbaSArIDFdKSkge1xuXHRcdFx0XHRcdHNldEFyZyhrZXksIGFyZ3NbaSArIDFdID09PSAndHJ1ZScsIGFyZyk7XG5cdFx0XHRcdFx0aSArPSAxO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHNldEFyZyhrZXksIGZsYWdzLnN0cmluZ3Nba2V5XSA/ICcnIDogdHJ1ZSwgYXJnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIWZsYWdzLnVua25vd25GbiB8fCBmbGFncy51bmtub3duRm4oYXJnKSAhPT0gZmFsc2UpIHtcblx0XHRcdFx0YXJndi5fLnB1c2goZmxhZ3Muc3RyaW5ncy5fIHx8ICFpc051bWJlcihhcmcpID8gYXJnIDogTnVtYmVyKGFyZykpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG9wdHMuc3RvcEVhcmx5KSB7XG5cdFx0XHRcdGFyZ3YuXy5wdXNoLmFwcGx5KGFyZ3YuXywgYXJncy5zbGljZShpICsgMSkpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRPYmplY3Qua2V5cyhkZWZhdWx0cykuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuXHRcdGlmICghaGFzS2V5KGFyZ3YsIGsuc3BsaXQoJy4nKSkpIHtcblx0XHRcdHNldEtleShhcmd2LCBrLnNwbGl0KCcuJyksIGRlZmF1bHRzW2tdKTtcblxuXHRcdFx0KGFsaWFzZXNba10gfHwgW10pLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcblx0XHRcdFx0c2V0S2V5KGFyZ3YsIHguc3BsaXQoJy4nKSwgZGVmYXVsdHNba10pO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblxuXHRpZiAob3B0c1snLS0nXSkge1xuXHRcdGFyZ3ZbJy0tJ10gPSBub3RGbGFncy5zbGljZSgpO1xuXHR9IGVsc2Uge1xuXHRcdG5vdEZsYWdzLmZvckVhY2goZnVuY3Rpb24gKGspIHtcblx0XHRcdGFyZ3YuXy5wdXNoKGspO1xuXHRcdH0pO1xuXHR9XG5cblx0cmV0dXJuIGFyZ3Y7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgeyBGT1JDRV9DT0xPUiwgTk9ERV9ESVNBQkxFX0NPTE9SUywgVEVSTSB9ID0gcHJvY2Vzcy5lbnY7XG5cbmNvbnN0ICQgPSB7XG5cdGVuYWJsZWQ6ICFOT0RFX0RJU0FCTEVfQ09MT1JTICYmIFRFUk0gIT09ICdkdW1iJyAmJiBGT1JDRV9DT0xPUiAhPT0gJzAnLFxuXG5cdC8vIG1vZGlmaWVyc1xuXHRyZXNldDogaW5pdCgwLCAwKSxcblx0Ym9sZDogaW5pdCgxLCAyMiksXG5cdGRpbTogaW5pdCgyLCAyMiksXG5cdGl0YWxpYzogaW5pdCgzLCAyMyksXG5cdHVuZGVybGluZTogaW5pdCg0LCAyNCksXG5cdGludmVyc2U6IGluaXQoNywgMjcpLFxuXHRoaWRkZW46IGluaXQoOCwgMjgpLFxuXHRzdHJpa2V0aHJvdWdoOiBpbml0KDksIDI5KSxcblxuXHQvLyBjb2xvcnNcblx0YmxhY2s6IGluaXQoMzAsIDM5KSxcblx0cmVkOiBpbml0KDMxLCAzOSksXG5cdGdyZWVuOiBpbml0KDMyLCAzOSksXG5cdHllbGxvdzogaW5pdCgzMywgMzkpLFxuXHRibHVlOiBpbml0KDM0LCAzOSksXG5cdG1hZ2VudGE6IGluaXQoMzUsIDM5KSxcblx0Y3lhbjogaW5pdCgzNiwgMzkpLFxuXHR3aGl0ZTogaW5pdCgzNywgMzkpLFxuXHRncmF5OiBpbml0KDkwLCAzOSksXG5cdGdyZXk6IGluaXQoOTAsIDM5KSxcblxuXHQvLyBiYWNrZ3JvdW5kIGNvbG9yc1xuXHRiZ0JsYWNrOiBpbml0KDQwLCA0OSksXG5cdGJnUmVkOiBpbml0KDQxLCA0OSksXG5cdGJnR3JlZW46IGluaXQoNDIsIDQ5KSxcblx0YmdZZWxsb3c6IGluaXQoNDMsIDQ5KSxcblx0YmdCbHVlOiBpbml0KDQ0LCA0OSksXG5cdGJnTWFnZW50YTogaW5pdCg0NSwgNDkpLFxuXHRiZ0N5YW46IGluaXQoNDYsIDQ5KSxcblx0YmdXaGl0ZTogaW5pdCg0NywgNDkpXG59O1xuXG5mdW5jdGlvbiBydW4oYXJyLCBzdHIpIHtcblx0bGV0IGk9MCwgdG1wLCBiZWc9JycsIGVuZD0nJztcblx0Zm9yICg7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcblx0XHR0bXAgPSBhcnJbaV07XG5cdFx0YmVnICs9IHRtcC5vcGVuO1xuXHRcdGVuZCArPSB0bXAuY2xvc2U7XG5cdFx0aWYgKHN0ci5pbmNsdWRlcyh0bXAuY2xvc2UpKSB7XG5cdFx0XHRzdHIgPSBzdHIucmVwbGFjZSh0bXAucmd4LCB0bXAuY2xvc2UgKyB0bXAub3Blbik7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBiZWcgKyBzdHIgKyBlbmQ7XG59XG5cbmZ1bmN0aW9uIGNoYWluKGhhcywga2V5cykge1xuXHRsZXQgY3R4ID0geyBoYXMsIGtleXMgfTtcblxuXHRjdHgucmVzZXQgPSAkLnJlc2V0LmJpbmQoY3R4KTtcblx0Y3R4LmJvbGQgPSAkLmJvbGQuYmluZChjdHgpO1xuXHRjdHguZGltID0gJC5kaW0uYmluZChjdHgpO1xuXHRjdHguaXRhbGljID0gJC5pdGFsaWMuYmluZChjdHgpO1xuXHRjdHgudW5kZXJsaW5lID0gJC51bmRlcmxpbmUuYmluZChjdHgpO1xuXHRjdHguaW52ZXJzZSA9ICQuaW52ZXJzZS5iaW5kKGN0eCk7XG5cdGN0eC5oaWRkZW4gPSAkLmhpZGRlbi5iaW5kKGN0eCk7XG5cdGN0eC5zdHJpa2V0aHJvdWdoID0gJC5zdHJpa2V0aHJvdWdoLmJpbmQoY3R4KTtcblxuXHRjdHguYmxhY2sgPSAkLmJsYWNrLmJpbmQoY3R4KTtcblx0Y3R4LnJlZCA9ICQucmVkLmJpbmQoY3R4KTtcblx0Y3R4LmdyZWVuID0gJC5ncmVlbi5iaW5kKGN0eCk7XG5cdGN0eC55ZWxsb3cgPSAkLnllbGxvdy5iaW5kKGN0eCk7XG5cdGN0eC5ibHVlID0gJC5ibHVlLmJpbmQoY3R4KTtcblx0Y3R4Lm1hZ2VudGEgPSAkLm1hZ2VudGEuYmluZChjdHgpO1xuXHRjdHguY3lhbiA9ICQuY3lhbi5iaW5kKGN0eCk7XG5cdGN0eC53aGl0ZSA9ICQud2hpdGUuYmluZChjdHgpO1xuXHRjdHguZ3JheSA9ICQuZ3JheS5iaW5kKGN0eCk7XG5cdGN0eC5ncmV5ID0gJC5ncmV5LmJpbmQoY3R4KTtcblxuXHRjdHguYmdCbGFjayA9ICQuYmdCbGFjay5iaW5kKGN0eCk7XG5cdGN0eC5iZ1JlZCA9ICQuYmdSZWQuYmluZChjdHgpO1xuXHRjdHguYmdHcmVlbiA9ICQuYmdHcmVlbi5iaW5kKGN0eCk7XG5cdGN0eC5iZ1llbGxvdyA9ICQuYmdZZWxsb3cuYmluZChjdHgpO1xuXHRjdHguYmdCbHVlID0gJC5iZ0JsdWUuYmluZChjdHgpO1xuXHRjdHguYmdNYWdlbnRhID0gJC5iZ01hZ2VudGEuYmluZChjdHgpO1xuXHRjdHguYmdDeWFuID0gJC5iZ0N5YW4uYmluZChjdHgpO1xuXHRjdHguYmdXaGl0ZSA9ICQuYmdXaGl0ZS5iaW5kKGN0eCk7XG5cblx0cmV0dXJuIGN0eDtcbn1cblxuZnVuY3Rpb24gaW5pdChvcGVuLCBjbG9zZSkge1xuXHRsZXQgYmxrID0ge1xuXHRcdG9wZW46IGBcXHgxYlske29wZW59bWAsXG5cdFx0Y2xvc2U6IGBcXHgxYlske2Nsb3NlfW1gLFxuXHRcdHJneDogbmV3IFJlZ0V4cChgXFxcXHgxYlxcXFxbJHtjbG9zZX1tYCwgJ2cnKVxuXHR9O1xuXHRyZXR1cm4gZnVuY3Rpb24gKHR4dCkge1xuXHRcdGlmICh0aGlzICE9PSB2b2lkIDAgJiYgdGhpcy5oYXMgIT09IHZvaWQgMCkge1xuXHRcdFx0dGhpcy5oYXMuaW5jbHVkZXMob3BlbikgfHwgKHRoaXMuaGFzLnB1c2gob3BlbiksdGhpcy5rZXlzLnB1c2goYmxrKSk7XG5cdFx0XHRyZXR1cm4gdHh0ID09PSB2b2lkIDAgPyB0aGlzIDogJC5lbmFibGVkID8gcnVuKHRoaXMua2V5cywgdHh0KycnKSA6IHR4dCsnJztcblx0XHR9XG5cdFx0cmV0dXJuIHR4dCA9PT0gdm9pZCAwID8gY2hhaW4oW29wZW5dLCBbYmxrXSkgOiAkLmVuYWJsZWQgPyBydW4oW2Jsa10sIHR4dCsnJykgOiB0eHQrJyc7XG5cdH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gJDtcbiIsICIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gKGtleSwgaXNTZWxlY3QpID0+IHtcbiAgaWYgKGtleS5tZXRhICYmIGtleS5uYW1lICE9PSAnZXNjYXBlJykgcmV0dXJuO1xuXG4gIGlmIChrZXkuY3RybCkge1xuICAgIGlmIChrZXkubmFtZSA9PT0gJ2EnKSByZXR1cm4gJ2ZpcnN0JztcbiAgICBpZiAoa2V5Lm5hbWUgPT09ICdjJykgcmV0dXJuICdhYm9ydCc7XG4gICAgaWYgKGtleS5uYW1lID09PSAnZCcpIHJldHVybiAnYWJvcnQnO1xuICAgIGlmIChrZXkubmFtZSA9PT0gJ2UnKSByZXR1cm4gJ2xhc3QnO1xuICAgIGlmIChrZXkubmFtZSA9PT0gJ2cnKSByZXR1cm4gJ3Jlc2V0JztcbiAgfVxuXG4gIGlmIChpc1NlbGVjdCkge1xuICAgIGlmIChrZXkubmFtZSA9PT0gJ2onKSByZXR1cm4gJ2Rvd24nO1xuICAgIGlmIChrZXkubmFtZSA9PT0gJ2snKSByZXR1cm4gJ3VwJztcbiAgfVxuXG4gIGlmIChrZXkubmFtZSA9PT0gJ3JldHVybicpIHJldHVybiAnc3VibWl0JztcbiAgaWYgKGtleS5uYW1lID09PSAnZW50ZXInKSByZXR1cm4gJ3N1Ym1pdCc7IC8vIGN0cmwgKyBKXG5cbiAgaWYgKGtleS5uYW1lID09PSAnYmFja3NwYWNlJykgcmV0dXJuICdkZWxldGUnO1xuICBpZiAoa2V5Lm5hbWUgPT09ICdkZWxldGUnKSByZXR1cm4gJ2RlbGV0ZUZvcndhcmQnO1xuICBpZiAoa2V5Lm5hbWUgPT09ICdhYm9ydCcpIHJldHVybiAnYWJvcnQnO1xuICBpZiAoa2V5Lm5hbWUgPT09ICdlc2NhcGUnKSByZXR1cm4gJ2V4aXQnO1xuICBpZiAoa2V5Lm5hbWUgPT09ICd0YWInKSByZXR1cm4gJ25leHQnO1xuICBpZiAoa2V5Lm5hbWUgPT09ICdwYWdlZG93bicpIHJldHVybiAnbmV4dFBhZ2UnO1xuICBpZiAoa2V5Lm5hbWUgPT09ICdwYWdldXAnKSByZXR1cm4gJ3ByZXZQYWdlJzsgLy8gVE9ETyBjcmVhdGUgaG9tZSgpIGluIHByb21wdCB0eXBlcyAoZS5nLiBUZXh0UHJvbXB0KVxuXG4gIGlmIChrZXkubmFtZSA9PT0gJ2hvbWUnKSByZXR1cm4gJ2hvbWUnOyAvLyBUT0RPIGNyZWF0ZSBlbmQoKSBpbiBwcm9tcHQgdHlwZXMgKGUuZy4gVGV4dFByb21wdClcblxuICBpZiAoa2V5Lm5hbWUgPT09ICdlbmQnKSByZXR1cm4gJ2VuZCc7XG4gIGlmIChrZXkubmFtZSA9PT0gJ3VwJykgcmV0dXJuICd1cCc7XG4gIGlmIChrZXkubmFtZSA9PT0gJ2Rvd24nKSByZXR1cm4gJ2Rvd24nO1xuICBpZiAoa2V5Lm5hbWUgPT09ICdyaWdodCcpIHJldHVybiAncmlnaHQnO1xuICBpZiAoa2V5Lm5hbWUgPT09ICdsZWZ0JykgcmV0dXJuICdsZWZ0JztcbiAgcmV0dXJuIGZhbHNlO1xufTsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0ciA9PiB7XG4gIGNvbnN0IHBhdHRlcm4gPSBbJ1tcXFxcdTAwMUJcXFxcdTAwOUJdW1tcXFxcXSgpIzs/XSooPzooPzooPzooPzo7Wy1hLXpBLVpcXFxcZFxcXFwvIyYuOj0/JUB+X10rKSp8W2EtekEtWlxcXFxkXSsoPzo7Wy1hLXpBLVpcXFxcZFxcXFwvIyYuOj0/JUB+X10qKSopP1xcXFx1MDAwNyknLCAnKD86KD86XFxcXGR7MSw0fSg/OjtcXFxcZHswLDR9KSopP1tcXFxcZEEtUFJaY2YtbnRxcnk9Pjx+XSkpJ10uam9pbignfCcpO1xuICBjb25zdCBSR1ggPSBuZXcgUmVnRXhwKHBhdHRlcm4sICdnJyk7XG4gIHJldHVybiB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyA/IHN0ci5yZXBsYWNlKFJHWCwgJycpIDogc3RyO1xufTsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBFU0MgPSAnXFx4MUInO1xuY29uc3QgQ1NJID0gYCR7RVNDfVtgO1xuY29uc3QgYmVlcCA9ICdcXHUwMDA3JztcblxuY29uc3QgY3Vyc29yID0ge1xuICB0byh4LCB5KSB7XG4gICAgaWYgKCF5KSByZXR1cm4gYCR7Q1NJfSR7eCArIDF9R2A7XG4gICAgcmV0dXJuIGAke0NTSX0ke3kgKyAxfTske3ggKyAxfUhgO1xuICB9LFxuICBtb3ZlKHgsIHkpIHtcbiAgICBsZXQgcmV0ID0gJyc7XG5cbiAgICBpZiAoeCA8IDApIHJldCArPSBgJHtDU0l9JHsteH1EYDtcbiAgICBlbHNlIGlmICh4ID4gMCkgcmV0ICs9IGAke0NTSX0ke3h9Q2A7XG5cbiAgICBpZiAoeSA8IDApIHJldCArPSBgJHtDU0l9JHsteX1BYDtcbiAgICBlbHNlIGlmICh5ID4gMCkgcmV0ICs9IGAke0NTSX0ke3l9QmA7XG5cbiAgICByZXR1cm4gcmV0O1xuICB9LFxuICB1cDogKGNvdW50ID0gMSkgPT4gYCR7Q1NJfSR7Y291bnR9QWAsXG4gIGRvd246IChjb3VudCA9IDEpID0+IGAke0NTSX0ke2NvdW50fUJgLFxuICBmb3J3YXJkOiAoY291bnQgPSAxKSA9PiBgJHtDU0l9JHtjb3VudH1DYCxcbiAgYmFja3dhcmQ6IChjb3VudCA9IDEpID0+IGAke0NTSX0ke2NvdW50fURgLFxuICBuZXh0TGluZTogKGNvdW50ID0gMSkgPT4gYCR7Q1NJfUVgLnJlcGVhdChjb3VudCksXG4gIHByZXZMaW5lOiAoY291bnQgPSAxKSA9PiBgJHtDU0l9RmAucmVwZWF0KGNvdW50KSxcbiAgbGVmdDogYCR7Q1NJfUdgLFxuICBoaWRlOiBgJHtDU0l9PzI1bGAsXG4gIHNob3c6IGAke0NTSX0/MjVoYCxcbiAgc2F2ZTogYCR7RVNDfTdgLFxuICByZXN0b3JlOiBgJHtFU0N9OGBcbn1cblxuY29uc3Qgc2Nyb2xsID0ge1xuICB1cDogKGNvdW50ID0gMSkgPT4gYCR7Q1NJfVNgLnJlcGVhdChjb3VudCksXG4gIGRvd246IChjb3VudCA9IDEpID0+IGAke0NTSX1UYC5yZXBlYXQoY291bnQpXG59XG5cbmNvbnN0IGVyYXNlID0ge1xuICBzY3JlZW46IGAke0NTSX0ySmAsXG4gIHVwOiAoY291bnQgPSAxKSA9PiBgJHtDU0l9MUpgLnJlcGVhdChjb3VudCksXG4gIGRvd246IChjb3VudCA9IDEpID0+IGAke0NTSX1KYC5yZXBlYXQoY291bnQpLFxuICBsaW5lOiBgJHtDU0l9MktgLFxuICBsaW5lRW5kOiBgJHtDU0l9S2AsXG4gIGxpbmVTdGFydDogYCR7Q1NJfTFLYCxcbiAgbGluZXMoY291bnQpIHtcbiAgICBsZXQgY2xlYXIgPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspXG4gICAgICBjbGVhciArPSB0aGlzLmxpbmUgKyAoaSA8IGNvdW50IC0gMSA/IGN1cnNvci51cCgpIDogJycpO1xuICAgIGlmIChjb3VudClcbiAgICAgIGNsZWFyICs9IGN1cnNvci5sZWZ0O1xuICAgIHJldHVybiBjbGVhcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgY3Vyc29yLCBzY3JvbGwsIGVyYXNlLCBiZWVwIH07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvW1wiQEBpdGVyYXRvclwiXTsgaWYgKCFpdCkgeyBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7IGlmIChpdCkgbyA9IGl0OyB2YXIgaSA9IDA7IHZhciBGID0gZnVuY3Rpb24gRigpIHt9OyByZXR1cm4geyBzOiBGLCBuOiBmdW5jdGlvbiBuKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9LCBlOiBmdW5jdGlvbiBlKF9lKSB7IHRocm93IF9lOyB9LCBmOiBGIH07IH0gdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9IHZhciBub3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgZGlkRXJyID0gZmFsc2UsIGVycjsgcmV0dXJuIHsgczogZnVuY3Rpb24gcygpIHsgaXQgPSBpdC5jYWxsKG8pOyB9LCBuOiBmdW5jdGlvbiBuKCkgeyB2YXIgc3RlcCA9IGl0Lm5leHQoKTsgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTsgcmV0dXJuIHN0ZXA7IH0sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7IGRpZEVyciA9IHRydWU7IGVyciA9IF9lMjsgfSwgZjogZnVuY3Rpb24gZigpIHsgdHJ5IHsgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0LnJldHVybiAhPSBudWxsKSBpdC5yZXR1cm4oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTsgcmV0dXJuIGFycjI7IH1cblxuY29uc3Qgc3RyaXAgPSByZXF1aXJlKCcuL3N0cmlwJyk7XG5cbmNvbnN0IF9yZXF1aXJlID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpLFxuICAgICAgZXJhc2UgPSBfcmVxdWlyZS5lcmFzZSxcbiAgICAgIGN1cnNvciA9IF9yZXF1aXJlLmN1cnNvcjtcblxuY29uc3Qgd2lkdGggPSBzdHIgPT4gWy4uLnN0cmlwKHN0cildLmxlbmd0aDtcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHByb21wdFxuICogQHBhcmFtIHtudW1iZXJ9IHBlckxpbmVcbiAqL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHByb21wdCwgcGVyTGluZSkge1xuICBpZiAoIXBlckxpbmUpIHJldHVybiBlcmFzZS5saW5lICsgY3Vyc29yLnRvKDApO1xuICBsZXQgcm93cyA9IDA7XG4gIGNvbnN0IGxpbmVzID0gcHJvbXB0LnNwbGl0KC9cXHI/XFxuLyk7XG5cbiAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGxpbmVzKSxcbiAgICAgIF9zdGVwO1xuXG4gIHRyeSB7XG4gICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgIGxldCBsaW5lID0gX3N0ZXAudmFsdWU7XG4gICAgICByb3dzICs9IDEgKyBNYXRoLmZsb29yKE1hdGgubWF4KHdpZHRoKGxpbmUpIC0gMSwgMCkgLyBwZXJMaW5lKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9pdGVyYXRvci5lKGVycik7XG4gIH0gZmluYWxseSB7XG4gICAgX2l0ZXJhdG9yLmYoKTtcbiAgfVxuXG4gIHJldHVybiBlcmFzZS5saW5lcyhyb3dzKTtcbn07IiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbWFpbiA9IHtcbiAgYXJyb3dVcDogJ1x1MjE5MScsXG4gIGFycm93RG93bjogJ1x1MjE5MycsXG4gIGFycm93TGVmdDogJ1x1MjE5MCcsXG4gIGFycm93UmlnaHQ6ICdcdTIxOTInLFxuICByYWRpb09uOiAnXHUyNUM5JyxcbiAgcmFkaW9PZmY6ICdcdTI1RUYnLFxuICB0aWNrOiAnXHUyNzE0JyxcbiAgY3Jvc3M6ICdcdTI3MTYnLFxuICBlbGxpcHNpczogJ1x1MjAyNicsXG4gIHBvaW50ZXJTbWFsbDogJ1x1MjAzQScsXG4gIGxpbmU6ICdcdTI1MDAnLFxuICBwb2ludGVyOiAnXHUyNzZGJ1xufTtcbmNvbnN0IHdpbiA9IHtcbiAgYXJyb3dVcDogbWFpbi5hcnJvd1VwLFxuICBhcnJvd0Rvd246IG1haW4uYXJyb3dEb3duLFxuICBhcnJvd0xlZnQ6IG1haW4uYXJyb3dMZWZ0LFxuICBhcnJvd1JpZ2h0OiBtYWluLmFycm93UmlnaHQsXG4gIHJhZGlvT246ICcoKiknLFxuICByYWRpb09mZjogJyggKScsXG4gIHRpY2s6ICdcdTIyMUEnLFxuICBjcm9zczogJ1x1MDBENycsXG4gIGVsbGlwc2lzOiAnLi4uJyxcbiAgcG9pbnRlclNtYWxsOiAnXHUwMEJCJyxcbiAgbGluZTogJ1x1MjUwMCcsXG4gIHBvaW50ZXI6ICc+J1xufTtcbmNvbnN0IGZpZ3VyZXMgPSBwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInID8gd2luIDogbWFpbjtcbm1vZHVsZS5leHBvcnRzID0gZmlndXJlczsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjID0gcmVxdWlyZSgna2xldXInKTtcblxuY29uc3QgZmlndXJlcyA9IHJlcXVpcmUoJy4vZmlndXJlcycpOyAvLyByZW5kZXJpbmcgdXNlciBpbnB1dC5cblxuXG5jb25zdCBzdHlsZXMgPSBPYmplY3QuZnJlZXplKHtcbiAgcGFzc3dvcmQ6IHtcbiAgICBzY2FsZTogMSxcbiAgICByZW5kZXI6IGlucHV0ID0+ICcqJy5yZXBlYXQoaW5wdXQubGVuZ3RoKVxuICB9LFxuICBlbW9qaToge1xuICAgIHNjYWxlOiAyLFxuICAgIHJlbmRlcjogaW5wdXQgPT4gJ1x1RDgzRFx1REUwMycucmVwZWF0KGlucHV0Lmxlbmd0aClcbiAgfSxcbiAgaW52aXNpYmxlOiB7XG4gICAgc2NhbGU6IDAsXG4gICAgcmVuZGVyOiBpbnB1dCA9PiAnJ1xuICB9LFxuICBkZWZhdWx0OiB7XG4gICAgc2NhbGU6IDEsXG4gICAgcmVuZGVyOiBpbnB1dCA9PiBgJHtpbnB1dH1gXG4gIH1cbn0pO1xuXG5jb25zdCByZW5kZXIgPSB0eXBlID0+IHN0eWxlc1t0eXBlXSB8fCBzdHlsZXMuZGVmYXVsdDsgLy8gaWNvbiB0byBzaWduYWxpemUgYSBwcm9tcHQuXG5cblxuY29uc3Qgc3ltYm9scyA9IE9iamVjdC5mcmVlemUoe1xuICBhYm9ydGVkOiBjLnJlZChmaWd1cmVzLmNyb3NzKSxcbiAgZG9uZTogYy5ncmVlbihmaWd1cmVzLnRpY2spLFxuICBleGl0ZWQ6IGMueWVsbG93KGZpZ3VyZXMuY3Jvc3MpLFxuICBkZWZhdWx0OiBjLmN5YW4oJz8nKVxufSk7XG5cbmNvbnN0IHN5bWJvbCA9IChkb25lLCBhYm9ydGVkLCBleGl0ZWQpID0+IGFib3J0ZWQgPyBzeW1ib2xzLmFib3J0ZWQgOiBleGl0ZWQgPyBzeW1ib2xzLmV4aXRlZCA6IGRvbmUgPyBzeW1ib2xzLmRvbmUgOiBzeW1ib2xzLmRlZmF1bHQ7IC8vIGJldHdlZW4gdGhlIHF1ZXN0aW9uIGFuZCB0aGUgdXNlcidzIGlucHV0LlxuXG5cbmNvbnN0IGRlbGltaXRlciA9IGNvbXBsZXRpbmcgPT4gYy5ncmF5KGNvbXBsZXRpbmcgPyBmaWd1cmVzLmVsbGlwc2lzIDogZmlndXJlcy5wb2ludGVyU21hbGwpO1xuXG5jb25zdCBpdGVtID0gKGV4cGFuZGFibGUsIGV4cGFuZGVkKSA9PiBjLmdyYXkoZXhwYW5kYWJsZSA/IGV4cGFuZGVkID8gZmlndXJlcy5wb2ludGVyU21hbGwgOiAnKycgOiBmaWd1cmVzLmxpbmUpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3R5bGVzLFxuICByZW5kZXIsXG4gIHN5bWJvbHMsXG4gIHN5bWJvbCxcbiAgZGVsaW1pdGVyLFxuICBpdGVtXG59OyIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHN0cmlwID0gcmVxdWlyZSgnLi9zdHJpcCcpO1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbXNnXG4gKiBAcGFyYW0ge251bWJlcn0gcGVyTGluZVxuICovXG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobXNnLCBwZXJMaW5lKSB7XG4gIGxldCBsaW5lcyA9IFN0cmluZyhzdHJpcChtc2cpIHx8ICcnKS5zcGxpdCgvXFxyP1xcbi8pO1xuICBpZiAoIXBlckxpbmUpIHJldHVybiBsaW5lcy5sZW5ndGg7XG4gIHJldHVybiBsaW5lcy5tYXAobCA9PiBNYXRoLmNlaWwobC5sZW5ndGggLyBwZXJMaW5lKSkucmVkdWNlKChhLCBiKSA9PiBhICsgYik7XG59OyIsICIndXNlIHN0cmljdCc7XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBtc2cgVGhlIG1lc3NhZ2UgdG8gd3JhcFxuICogQHBhcmFtIHtvYmplY3R9IG9wdHNcbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gW29wdHMubWFyZ2luXSBMZWZ0IG1hcmdpblxuICogQHBhcmFtIHtudW1iZXJ9IG9wdHMud2lkdGggTWF4aW11bSBjaGFyYWN0ZXJzIHBlciBsaW5lIGluY2x1ZGluZyB0aGUgbWFyZ2luXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSAobXNnLCBvcHRzID0ge30pID0+IHtcbiAgY29uc3QgdGFiID0gTnVtYmVyLmlzU2FmZUludGVnZXIocGFyc2VJbnQob3B0cy5tYXJnaW4pKSA/IG5ldyBBcnJheShwYXJzZUludChvcHRzLm1hcmdpbikpLmZpbGwoJyAnKS5qb2luKCcnKSA6IG9wdHMubWFyZ2luIHx8ICcnO1xuICBjb25zdCB3aWR0aCA9IG9wdHMud2lkdGg7XG4gIHJldHVybiAobXNnIHx8ICcnKS5zcGxpdCgvXFxyP1xcbi9nKS5tYXAobGluZSA9PiBsaW5lLnNwbGl0KC9cXHMrL2cpLnJlZHVjZSgoYXJyLCB3KSA9PiB7XG4gICAgaWYgKHcubGVuZ3RoICsgdGFiLmxlbmd0aCA+PSB3aWR0aCB8fCBhcnJbYXJyLmxlbmd0aCAtIDFdLmxlbmd0aCArIHcubGVuZ3RoICsgMSA8IHdpZHRoKSBhcnJbYXJyLmxlbmd0aCAtIDFdICs9IGAgJHt3fWA7ZWxzZSBhcnIucHVzaChgJHt0YWJ9JHt3fWApO1xuICAgIHJldHVybiBhcnI7XG4gIH0sIFt0YWJdKS5qb2luKCdcXG4nKSkuam9pbignXFxuJyk7XG59OyIsICIndXNlIHN0cmljdCc7XG4vKipcbiAqIERldGVybWluZSB3aGF0IGVudHJpZXMgc2hvdWxkIGJlIGRpc3BsYXllZCBvbiB0aGUgc2NyZWVuLCBiYXNlZCBvbiB0aGVcbiAqIGN1cnJlbnRseSBzZWxlY3RlZCBpbmRleCBhbmQgdGhlIG1heGltdW0gdmlzaWJsZS4gVXNlZCBpbiBsaXN0LWJhc2VkXG4gKiBwcm9tcHRzIGxpa2UgYHNlbGVjdGAgYW5kIGBtdWx0aXNlbGVjdGAuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGN1cnNvciB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGVudHJ5XG4gKiBAcGFyYW0ge251bWJlcn0gdG90YWwgdGhlIHRvdGFsIGVudHJpZXMgYXZhaWxhYmxlIHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4VmlzaWJsZV0gdGhlIG51bWJlciBvZiBlbnRyaWVzIHRoYXQgY2FuIGJlIGRpc3BsYXllZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gKGN1cnNvciwgdG90YWwsIG1heFZpc2libGUpID0+IHtcbiAgbWF4VmlzaWJsZSA9IG1heFZpc2libGUgfHwgdG90YWw7XG4gIGxldCBzdGFydEluZGV4ID0gTWF0aC5taW4odG90YWwgLSBtYXhWaXNpYmxlLCBjdXJzb3IgLSBNYXRoLmZsb29yKG1heFZpc2libGUgLyAyKSk7XG4gIGlmIChzdGFydEluZGV4IDwgMCkgc3RhcnRJbmRleCA9IDA7XG4gIGxldCBlbmRJbmRleCA9IE1hdGgubWluKHN0YXJ0SW5kZXggKyBtYXhWaXNpYmxlLCB0b3RhbCk7XG4gIHJldHVybiB7XG4gICAgc3RhcnRJbmRleCxcbiAgICBlbmRJbmRleFxuICB9O1xufTsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYWN0aW9uOiByZXF1aXJlKCcuL2FjdGlvbicpLFxuICBjbGVhcjogcmVxdWlyZSgnLi9jbGVhcicpLFxuICBzdHlsZTogcmVxdWlyZSgnLi9zdHlsZScpLFxuICBzdHJpcDogcmVxdWlyZSgnLi9zdHJpcCcpLFxuICBmaWd1cmVzOiByZXF1aXJlKCcuL2ZpZ3VyZXMnKSxcbiAgbGluZXM6IHJlcXVpcmUoJy4vbGluZXMnKSxcbiAgd3JhcDogcmVxdWlyZSgnLi93cmFwJyksXG4gIGVudHJpZXNUb0Rpc3BsYXk6IHJlcXVpcmUoJy4vZW50cmllc1RvRGlzcGxheScpXG59OyIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHJlYWRsaW5lID0gcmVxdWlyZSgncmVhZGxpbmUnKTtcblxuY29uc3QgX3JlcXVpcmUgPSByZXF1aXJlKCcuLi91dGlsJyksXG4gICAgICBhY3Rpb24gPSBfcmVxdWlyZS5hY3Rpb247XG5cbmNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpO1xuXG5jb25zdCBfcmVxdWlyZTIgPSByZXF1aXJlKCdzaXN0ZXJhbnNpJyksXG4gICAgICBiZWVwID0gX3JlcXVpcmUyLmJlZXAsXG4gICAgICBjdXJzb3IgPSBfcmVxdWlyZTIuY3Vyc29yO1xuXG5jb25zdCBjb2xvciA9IHJlcXVpcmUoJ2tsZXVyJyk7XG4vKipcbiAqIEJhc2UgcHJvbXB0IHNrZWxldG9uXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqL1xuXG5cbmNsYXNzIFByb21wdCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5maXJzdFJlbmRlciA9IHRydWU7XG4gICAgdGhpcy5pbiA9IG9wdHMuc3RkaW4gfHwgcHJvY2Vzcy5zdGRpbjtcbiAgICB0aGlzLm91dCA9IG9wdHMuc3Rkb3V0IHx8IHByb2Nlc3Muc3Rkb3V0O1xuXG4gICAgdGhpcy5vblJlbmRlciA9IChvcHRzLm9uUmVuZGVyIHx8ICgoKSA9PiB2b2lkIDApKS5iaW5kKHRoaXMpO1xuXG4gICAgY29uc3QgcmwgPSByZWFkbGluZS5jcmVhdGVJbnRlcmZhY2Uoe1xuICAgICAgaW5wdXQ6IHRoaXMuaW4sXG4gICAgICBlc2NhcGVDb2RlVGltZW91dDogNTBcbiAgICB9KTtcbiAgICByZWFkbGluZS5lbWl0S2V5cHJlc3NFdmVudHModGhpcy5pbiwgcmwpO1xuICAgIGlmICh0aGlzLmluLmlzVFRZKSB0aGlzLmluLnNldFJhd01vZGUodHJ1ZSk7XG4gICAgY29uc3QgaXNTZWxlY3QgPSBbJ1NlbGVjdFByb21wdCcsICdNdWx0aXNlbGVjdFByb21wdCddLmluZGV4T2YodGhpcy5jb25zdHJ1Y3Rvci5uYW1lKSA+IC0xO1xuXG4gICAgY29uc3Qga2V5cHJlc3MgPSAoc3RyLCBrZXkpID0+IHtcbiAgICAgIGxldCBhID0gYWN0aW9uKGtleSwgaXNTZWxlY3QpO1xuXG4gICAgICBpZiAoYSA9PT0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5fICYmIHRoaXMuXyhzdHIsIGtleSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzW2FdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXNbYV0oa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYmVsbCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLmNsb3NlID0gKCkgPT4ge1xuICAgICAgdGhpcy5vdXQud3JpdGUoY3Vyc29yLnNob3cpO1xuICAgICAgdGhpcy5pbi5yZW1vdmVMaXN0ZW5lcigna2V5cHJlc3MnLCBrZXlwcmVzcyk7XG4gICAgICBpZiAodGhpcy5pbi5pc1RUWSkgdGhpcy5pbi5zZXRSYXdNb2RlKGZhbHNlKTtcbiAgICAgIHJsLmNsb3NlKCk7XG4gICAgICB0aGlzLmVtaXQodGhpcy5hYm9ydGVkID8gJ2Fib3J0JyA6IHRoaXMuZXhpdGVkID8gJ2V4aXQnIDogJ3N1Ym1pdCcsIHRoaXMudmFsdWUpO1xuICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgIH07XG5cbiAgICB0aGlzLmluLm9uKCdrZXlwcmVzcycsIGtleXByZXNzKTtcbiAgfVxuXG4gIGZpcmUoKSB7XG4gICAgdGhpcy5lbWl0KCdzdGF0ZScsIHtcbiAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgYWJvcnRlZDogISF0aGlzLmFib3J0ZWQsXG4gICAgICBleGl0ZWQ6ICEhdGhpcy5leGl0ZWRcbiAgICB9KTtcbiAgfVxuXG4gIGJlbGwoKSB7XG4gICAgdGhpcy5vdXQud3JpdGUoYmVlcCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgdGhpcy5vblJlbmRlcihjb2xvcik7XG4gICAgaWYgKHRoaXMuZmlyc3RSZW5kZXIpIHRoaXMuZmlyc3RSZW5kZXIgPSBmYWxzZTtcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvbXB0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH1cblxuY29uc3QgY29sb3IgPSByZXF1aXJlKCdrbGV1cicpO1xuXG5jb25zdCBQcm9tcHQgPSByZXF1aXJlKCcuL3Byb21wdCcpO1xuXG5jb25zdCBfcmVxdWlyZSA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKSxcbiAgICAgIGVyYXNlID0gX3JlcXVpcmUuZXJhc2UsXG4gICAgICBjdXJzb3IgPSBfcmVxdWlyZS5jdXJzb3I7XG5cbmNvbnN0IF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4uL3V0aWwnKSxcbiAgICAgIHN0eWxlID0gX3JlcXVpcmUyLnN0eWxlLFxuICAgICAgY2xlYXIgPSBfcmVxdWlyZTIuY2xlYXIsXG4gICAgICBsaW5lcyA9IF9yZXF1aXJlMi5saW5lcyxcbiAgICAgIGZpZ3VyZXMgPSBfcmVxdWlyZTIuZmlndXJlcztcbi8qKlxuICogVGV4dFByb21wdCBCYXNlIEVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRzLm1lc3NhZ2UgTWVzc2FnZVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLnN0eWxlPSdkZWZhdWx0J10gUmVuZGVyIHN0eWxlXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuaW5pdGlhbF0gRGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMudmFsaWRhdGVdIFZhbGlkYXRlIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5lcnJvcl0gVGhlIGludmFsaWQgZXJyb3IgbGFiZWxcbiAqL1xuXG5cbmNsYXNzIFRleHRQcm9tcHQgZXh0ZW5kcyBQcm9tcHQge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgICB0aGlzLnRyYW5zZm9ybSA9IHN0eWxlLnJlbmRlcihvcHRzLnN0eWxlKTtcbiAgICB0aGlzLnNjYWxlID0gdGhpcy50cmFuc2Zvcm0uc2NhbGU7XG4gICAgdGhpcy5tc2cgPSBvcHRzLm1lc3NhZ2U7XG4gICAgdGhpcy5pbml0aWFsID0gb3B0cy5pbml0aWFsIHx8IGBgO1xuXG4gICAgdGhpcy52YWxpZGF0b3IgPSBvcHRzLnZhbGlkYXRlIHx8ICgoKSA9PiB0cnVlKTtcblxuICAgIHRoaXMudmFsdWUgPSBgYDtcbiAgICB0aGlzLmVycm9yTXNnID0gb3B0cy5lcnJvciB8fCBgUGxlYXNlIEVudGVyIEEgVmFsaWQgVmFsdWVgO1xuICAgIHRoaXMuY3Vyc29yID0gTnVtYmVyKCEhdGhpcy5pbml0aWFsKTtcbiAgICB0aGlzLmN1cnNvck9mZnNldCA9IDA7XG4gICAgdGhpcy5jbGVhciA9IGNsZWFyKGBgLCB0aGlzLm91dC5jb2x1bW5zKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgc2V0IHZhbHVlKHYpIHtcbiAgICBpZiAoIXYgJiYgdGhpcy5pbml0aWFsKSB7XG4gICAgICB0aGlzLnBsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIHRoaXMucmVuZGVyZWQgPSBjb2xvci5ncmF5KHRoaXMudHJhbnNmb3JtLnJlbmRlcih0aGlzLmluaXRpYWwpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IGZhbHNlO1xuICAgICAgdGhpcy5yZW5kZXJlZCA9IHRoaXMudHJhbnNmb3JtLnJlbmRlcih2KTtcbiAgICB9XG5cbiAgICB0aGlzLl92YWx1ZSA9IHY7XG4gICAgdGhpcy5maXJlKCk7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy52YWx1ZSA9IGBgO1xuICAgIHRoaXMuY3Vyc29yID0gTnVtYmVyKCEhdGhpcy5pbml0aWFsKTtcbiAgICB0aGlzLmN1cnNvck9mZnNldCA9IDA7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGV4aXQoKSB7XG4gICAgdGhpcy5hYm9ydCgpO1xuICB9XG5cbiAgYWJvcnQoKSB7XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUgfHwgdGhpcy5pbml0aWFsO1xuICAgIHRoaXMuZG9uZSA9IHRoaXMuYWJvcnRlZCA9IHRydWU7XG4gICAgdGhpcy5lcnJvciA9IGZhbHNlO1xuICAgIHRoaXMucmVkID0gZmFsc2U7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm91dC53cml0ZSgnXFxuJyk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgdmFsaWRhdGUoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvcihmdW5jdGlvbiogKCkge1xuICAgICAgbGV0IHZhbGlkID0geWllbGQgX3RoaXMudmFsaWRhdG9yKF90aGlzLnZhbHVlKTtcblxuICAgICAgaWYgKHR5cGVvZiB2YWxpZCA9PT0gYHN0cmluZ2ApIHtcbiAgICAgICAgX3RoaXMuZXJyb3JNc2cgPSB2YWxpZDtcbiAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuZXJyb3IgPSAhdmFsaWQ7XG4gICAgfSkoKTtcbiAgfVxuXG4gIHN1Ym1pdCgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvcihmdW5jdGlvbiogKCkge1xuICAgICAgX3RoaXMyLnZhbHVlID0gX3RoaXMyLnZhbHVlIHx8IF90aGlzMi5pbml0aWFsO1xuICAgICAgX3RoaXMyLmN1cnNvck9mZnNldCA9IDA7XG4gICAgICBfdGhpczIuY3Vyc29yID0gX3RoaXMyLnJlbmRlcmVkLmxlbmd0aDtcbiAgICAgIHlpZWxkIF90aGlzMi52YWxpZGF0ZSgpO1xuXG4gICAgICBpZiAoX3RoaXMyLmVycm9yKSB7XG4gICAgICAgIF90aGlzMi5yZWQgPSB0cnVlO1xuXG4gICAgICAgIF90aGlzMi5maXJlKCk7XG5cbiAgICAgICAgX3RoaXMyLnJlbmRlcigpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMyLmRvbmUgPSB0cnVlO1xuICAgICAgX3RoaXMyLmFib3J0ZWQgPSBmYWxzZTtcblxuICAgICAgX3RoaXMyLmZpcmUoKTtcblxuICAgICAgX3RoaXMyLnJlbmRlcigpO1xuXG4gICAgICBfdGhpczIub3V0LndyaXRlKCdcXG4nKTtcblxuICAgICAgX3RoaXMyLmNsb3NlKCk7XG4gICAgfSkoKTtcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgaWYgKCF0aGlzLnBsYWNlaG9sZGVyKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMuaW5pdGlhbDtcbiAgICB0aGlzLmN1cnNvciA9IHRoaXMucmVuZGVyZWQubGVuZ3RoO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBtb3ZlQ3Vyc29yKG4pIHtcbiAgICBpZiAodGhpcy5wbGFjZWhvbGRlcikgcmV0dXJuO1xuICAgIHRoaXMuY3Vyc29yID0gdGhpcy5jdXJzb3IgKyBuO1xuICAgIHRoaXMuY3Vyc29yT2Zmc2V0ICs9IG47XG4gIH1cblxuICBfKGMsIGtleSkge1xuICAgIGxldCBzMSA9IHRoaXMudmFsdWUuc2xpY2UoMCwgdGhpcy5jdXJzb3IpO1xuICAgIGxldCBzMiA9IHRoaXMudmFsdWUuc2xpY2UodGhpcy5jdXJzb3IpO1xuICAgIHRoaXMudmFsdWUgPSBgJHtzMX0ke2N9JHtzMn1gO1xuICAgIHRoaXMucmVkID0gZmFsc2U7XG4gICAgdGhpcy5jdXJzb3IgPSB0aGlzLnBsYWNlaG9sZGVyID8gMCA6IHMxLmxlbmd0aCArIDE7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRlbGV0ZSgpIHtcbiAgICBpZiAodGhpcy5pc0N1cnNvckF0U3RhcnQoKSkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIGxldCBzMSA9IHRoaXMudmFsdWUuc2xpY2UoMCwgdGhpcy5jdXJzb3IgLSAxKTtcbiAgICBsZXQgczIgPSB0aGlzLnZhbHVlLnNsaWNlKHRoaXMuY3Vyc29yKTtcbiAgICB0aGlzLnZhbHVlID0gYCR7czF9JHtzMn1gO1xuICAgIHRoaXMucmVkID0gZmFsc2U7XG5cbiAgICBpZiAodGhpcy5pc0N1cnNvckF0U3RhcnQoKSkge1xuICAgICAgdGhpcy5jdXJzb3JPZmZzZXQgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnNvck9mZnNldCsrO1xuICAgICAgdGhpcy5tb3ZlQ3Vyc29yKC0xKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZGVsZXRlRm9yd2FyZCgpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IgKiB0aGlzLnNjYWxlID49IHRoaXMucmVuZGVyZWQubGVuZ3RoIHx8IHRoaXMucGxhY2Vob2xkZXIpIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICBsZXQgczEgPSB0aGlzLnZhbHVlLnNsaWNlKDAsIHRoaXMuY3Vyc29yKTtcbiAgICBsZXQgczIgPSB0aGlzLnZhbHVlLnNsaWNlKHRoaXMuY3Vyc29yICsgMSk7XG4gICAgdGhpcy52YWx1ZSA9IGAke3MxfSR7czJ9YDtcbiAgICB0aGlzLnJlZCA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMuaXNDdXJzb3JBdEVuZCgpKSB7XG4gICAgICB0aGlzLmN1cnNvck9mZnNldCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3Vyc29yT2Zmc2V0Kys7XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGZpcnN0KCkge1xuICAgIHRoaXMuY3Vyc29yID0gMDtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbGFzdCgpIHtcbiAgICB0aGlzLmN1cnNvciA9IHRoaXMudmFsdWUubGVuZ3RoO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBsZWZ0KCkge1xuICAgIGlmICh0aGlzLmN1cnNvciA8PSAwIHx8IHRoaXMucGxhY2Vob2xkZXIpIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLm1vdmVDdXJzb3IoLTEpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByaWdodCgpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IgKiB0aGlzLnNjYWxlID49IHRoaXMucmVuZGVyZWQubGVuZ3RoIHx8IHRoaXMucGxhY2Vob2xkZXIpIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLm1vdmVDdXJzb3IoMSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGlzQ3Vyc29yQXRTdGFydCgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJzb3IgPT09IDAgfHwgdGhpcy5wbGFjZWhvbGRlciAmJiB0aGlzLmN1cnNvciA9PT0gMTtcbiAgfVxuXG4gIGlzQ3Vyc29yQXRFbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3Vyc29yID09PSB0aGlzLnJlbmRlcmVkLmxlbmd0aCB8fCB0aGlzLnBsYWNlaG9sZGVyICYmIHRoaXMuY3Vyc29yID09PSB0aGlzLnJlbmRlcmVkLmxlbmd0aCArIDE7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuY2xvc2VkKSByZXR1cm47XG5cbiAgICBpZiAoIXRoaXMuZmlyc3RSZW5kZXIpIHtcbiAgICAgIGlmICh0aGlzLm91dHB1dEVycm9yKSB0aGlzLm91dC53cml0ZShjdXJzb3IuZG93bihsaW5lcyh0aGlzLm91dHB1dEVycm9yLCB0aGlzLm91dC5jb2x1bW5zKSAtIDEpICsgY2xlYXIodGhpcy5vdXRwdXRFcnJvciwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgICAgdGhpcy5vdXQud3JpdGUoY2xlYXIodGhpcy5vdXRwdXRUZXh0LCB0aGlzLm91dC5jb2x1bW5zKSk7XG4gICAgfVxuXG4gICAgc3VwZXIucmVuZGVyKCk7XG4gICAgdGhpcy5vdXRwdXRFcnJvciA9ICcnO1xuICAgIHRoaXMub3V0cHV0VGV4dCA9IFtzdHlsZS5zeW1ib2wodGhpcy5kb25lLCB0aGlzLmFib3J0ZWQpLCBjb2xvci5ib2xkKHRoaXMubXNnKSwgc3R5bGUuZGVsaW1pdGVyKHRoaXMuZG9uZSksIHRoaXMucmVkID8gY29sb3IucmVkKHRoaXMucmVuZGVyZWQpIDogdGhpcy5yZW5kZXJlZF0uam9pbihgIGApO1xuXG4gICAgaWYgKHRoaXMuZXJyb3IpIHtcbiAgICAgIHRoaXMub3V0cHV0RXJyb3IgKz0gdGhpcy5lcnJvck1zZy5zcGxpdChgXFxuYCkucmVkdWNlKChhLCBsLCBpKSA9PiBhICsgYFxcbiR7aSA/ICcgJyA6IGZpZ3VyZXMucG9pbnRlclNtYWxsfSAke2NvbG9yLnJlZCgpLml0YWxpYyhsKX1gLCBgYCk7XG4gICAgfVxuXG4gICAgdGhpcy5vdXQud3JpdGUoZXJhc2UubGluZSArIGN1cnNvci50bygwKSArIHRoaXMub3V0cHV0VGV4dCArIGN1cnNvci5zYXZlICsgdGhpcy5vdXRwdXRFcnJvciArIGN1cnNvci5yZXN0b3JlICsgY3Vyc29yLm1vdmUodGhpcy5jdXJzb3JPZmZzZXQsIDApKTtcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gVGV4dFByb21wdDsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb2xvciA9IHJlcXVpcmUoJ2tsZXVyJyk7XG5cbmNvbnN0IFByb21wdCA9IHJlcXVpcmUoJy4vcHJvbXB0Jyk7XG5cbmNvbnN0IF9yZXF1aXJlID0gcmVxdWlyZSgnLi4vdXRpbCcpLFxuICAgICAgc3R5bGUgPSBfcmVxdWlyZS5zdHlsZSxcbiAgICAgIGNsZWFyID0gX3JlcXVpcmUuY2xlYXIsXG4gICAgICBmaWd1cmVzID0gX3JlcXVpcmUuZmlndXJlcyxcbiAgICAgIHdyYXAgPSBfcmVxdWlyZS53cmFwLFxuICAgICAgZW50cmllc1RvRGlzcGxheSA9IF9yZXF1aXJlLmVudHJpZXNUb0Rpc3BsYXk7XG5cbmNvbnN0IF9yZXF1aXJlMiA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKSxcbiAgICAgIGN1cnNvciA9IF9yZXF1aXJlMi5jdXJzb3I7XG4vKipcbiAqIFNlbGVjdFByb21wdCBCYXNlIEVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRzLm1lc3NhZ2UgTWVzc2FnZVxuICogQHBhcmFtIHtBcnJheX0gb3B0cy5jaG9pY2VzIEFycmF5IG9mIGNob2ljZSBvYmplY3RzXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuaGludF0gSGludCB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMuaW5pdGlhbF0gSW5kZXggb2YgZGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMub3B0aW9uc1BlclBhZ2U9MTBdIE1heCBvcHRpb25zIHRvIGRpc3BsYXkgYXQgb25jZVxuICovXG5cblxuY2xhc3MgU2VsZWN0UHJvbXB0IGV4dGVuZHMgUHJvbXB0IHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy5tc2cgPSBvcHRzLm1lc3NhZ2U7XG4gICAgdGhpcy5oaW50ID0gb3B0cy5oaW50IHx8ICctIFVzZSBhcnJvdy1rZXlzLiBSZXR1cm4gdG8gc3VibWl0Lic7XG4gICAgdGhpcy53YXJuID0gb3B0cy53YXJuIHx8ICctIFRoaXMgb3B0aW9uIGlzIGRpc2FibGVkJztcbiAgICB0aGlzLmN1cnNvciA9IG9wdHMuaW5pdGlhbCB8fCAwO1xuICAgIHRoaXMuY2hvaWNlcyA9IG9wdHMuY2hvaWNlcy5tYXAoKGNoLCBpZHgpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgY2ggPT09ICdzdHJpbmcnKSBjaCA9IHtcbiAgICAgICAgdGl0bGU6IGNoLFxuICAgICAgICB2YWx1ZTogaWR4XG4gICAgICB9O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGl0bGU6IGNoICYmIChjaC50aXRsZSB8fCBjaC52YWx1ZSB8fCBjaCksXG4gICAgICAgIHZhbHVlOiBjaCAmJiAoY2gudmFsdWUgPT09IHVuZGVmaW5lZCA/IGlkeCA6IGNoLnZhbHVlKSxcbiAgICAgICAgZGVzY3JpcHRpb246IGNoICYmIGNoLmRlc2NyaXB0aW9uLFxuICAgICAgICBzZWxlY3RlZDogY2ggJiYgY2guc2VsZWN0ZWQsXG4gICAgICAgIGRpc2FibGVkOiBjaCAmJiBjaC5kaXNhYmxlZFxuICAgICAgfTtcbiAgICB9KTtcbiAgICB0aGlzLm9wdGlvbnNQZXJQYWdlID0gb3B0cy5vcHRpb25zUGVyUGFnZSB8fCAxMDtcbiAgICB0aGlzLnZhbHVlID0gKHRoaXMuY2hvaWNlc1t0aGlzLmN1cnNvcl0gfHwge30pLnZhbHVlO1xuICAgIHRoaXMuY2xlYXIgPSBjbGVhcignJywgdGhpcy5vdXQuY29sdW1ucyk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIG1vdmVDdXJzb3Iobikge1xuICAgIHRoaXMuY3Vyc29yID0gbjtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5jaG9pY2VzW25dLnZhbHVlO1xuICAgIHRoaXMuZmlyZSgpO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5tb3ZlQ3Vyc29yKDApO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBleGl0KCkge1xuICAgIHRoaXMuYWJvcnQoKTtcbiAgfVxuXG4gIGFib3J0KCkge1xuICAgIHRoaXMuZG9uZSA9IHRoaXMuYWJvcnRlZCA9IHRydWU7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm91dC53cml0ZSgnXFxuJyk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgc3VibWl0KCkge1xuICAgIGlmICghdGhpcy5zZWxlY3Rpb24uZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgICB0aGlzLmFib3J0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuZmlyZSgpO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9IGVsc2UgdGhpcy5iZWxsKCk7XG4gIH1cblxuICBmaXJzdCgpIHtcbiAgICB0aGlzLm1vdmVDdXJzb3IoMCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGxhc3QoKSB7XG4gICAgdGhpcy5tb3ZlQ3Vyc29yKHRoaXMuY2hvaWNlcy5sZW5ndGggLSAxKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yID09PSAwKSB7XG4gICAgICB0aGlzLm1vdmVDdXJzb3IodGhpcy5jaG9pY2VzLmxlbmd0aCAtIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1vdmVDdXJzb3IodGhpcy5jdXJzb3IgLSAxKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IgPT09IHRoaXMuY2hvaWNlcy5sZW5ndGggLSAxKSB7XG4gICAgICB0aGlzLm1vdmVDdXJzb3IoMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubW92ZUN1cnNvcih0aGlzLmN1cnNvciArIDEpO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBuZXh0KCkge1xuICAgIHRoaXMubW92ZUN1cnNvcigodGhpcy5jdXJzb3IgKyAxKSAlIHRoaXMuY2hvaWNlcy5sZW5ndGgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBfKGMsIGtleSkge1xuICAgIGlmIChjID09PSAnICcpIHJldHVybiB0aGlzLnN1Ym1pdCgpO1xuICB9XG5cbiAgZ2V0IHNlbGVjdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jaG9pY2VzW3RoaXMuY3Vyc29yXTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5jbG9zZWQpIHJldHVybjtcbiAgICBpZiAodGhpcy5maXJzdFJlbmRlcikgdGhpcy5vdXQud3JpdGUoY3Vyc29yLmhpZGUpO2Vsc2UgdGhpcy5vdXQud3JpdGUoY2xlYXIodGhpcy5vdXRwdXRUZXh0LCB0aGlzLm91dC5jb2x1bW5zKSk7XG4gICAgc3VwZXIucmVuZGVyKCk7XG5cbiAgICBsZXQgX2VudHJpZXNUb0Rpc3BsYXkgPSBlbnRyaWVzVG9EaXNwbGF5KHRoaXMuY3Vyc29yLCB0aGlzLmNob2ljZXMubGVuZ3RoLCB0aGlzLm9wdGlvbnNQZXJQYWdlKSxcbiAgICAgICAgc3RhcnRJbmRleCA9IF9lbnRyaWVzVG9EaXNwbGF5LnN0YXJ0SW5kZXgsXG4gICAgICAgIGVuZEluZGV4ID0gX2VudHJpZXNUb0Rpc3BsYXkuZW5kSW5kZXg7IC8vIFByaW50IHByb21wdFxuXG5cbiAgICB0aGlzLm91dHB1dFRleHQgPSBbc3R5bGUuc3ltYm9sKHRoaXMuZG9uZSwgdGhpcy5hYm9ydGVkKSwgY29sb3IuYm9sZCh0aGlzLm1zZyksIHN0eWxlLmRlbGltaXRlcihmYWxzZSksIHRoaXMuZG9uZSA/IHRoaXMuc2VsZWN0aW9uLnRpdGxlIDogdGhpcy5zZWxlY3Rpb24uZGlzYWJsZWQgPyBjb2xvci55ZWxsb3codGhpcy53YXJuKSA6IGNvbG9yLmdyYXkodGhpcy5oaW50KV0uam9pbignICcpOyAvLyBQcmludCBjaG9pY2VzXG5cbiAgICBpZiAoIXRoaXMuZG9uZSkge1xuICAgICAgdGhpcy5vdXRwdXRUZXh0ICs9ICdcXG4nO1xuXG4gICAgICBmb3IgKGxldCBpID0gc3RhcnRJbmRleDsgaSA8IGVuZEluZGV4OyBpKyspIHtcbiAgICAgICAgbGV0IHRpdGxlLFxuICAgICAgICAgICAgcHJlZml4LFxuICAgICAgICAgICAgZGVzYyA9ICcnLFxuICAgICAgICAgICAgdiA9IHRoaXMuY2hvaWNlc1tpXTsgLy8gRGV0ZXJtaW5lIHdoZXRoZXIgdG8gZGlzcGxheSBcIm1vcmUgY2hvaWNlc1wiIGluZGljYXRvcnNcblxuICAgICAgICBpZiAoaSA9PT0gc3RhcnRJbmRleCAmJiBzdGFydEluZGV4ID4gMCkge1xuICAgICAgICAgIHByZWZpeCA9IGZpZ3VyZXMuYXJyb3dVcDtcbiAgICAgICAgfSBlbHNlIGlmIChpID09PSBlbmRJbmRleCAtIDEgJiYgZW5kSW5kZXggPCB0aGlzLmNob2ljZXMubGVuZ3RoKSB7XG4gICAgICAgICAgcHJlZml4ID0gZmlndXJlcy5hcnJvd0Rvd247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJlZml4ID0gJyAnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHYuZGlzYWJsZWQpIHtcbiAgICAgICAgICB0aXRsZSA9IHRoaXMuY3Vyc29yID09PSBpID8gY29sb3IuZ3JheSgpLnVuZGVybGluZSh2LnRpdGxlKSA6IGNvbG9yLnN0cmlrZXRocm91Z2goKS5ncmF5KHYudGl0bGUpO1xuICAgICAgICAgIHByZWZpeCA9ICh0aGlzLmN1cnNvciA9PT0gaSA/IGNvbG9yLmJvbGQoKS5ncmF5KGZpZ3VyZXMucG9pbnRlcikgKyAnICcgOiAnICAnKSArIHByZWZpeDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aXRsZSA9IHRoaXMuY3Vyc29yID09PSBpID8gY29sb3IuY3lhbigpLnVuZGVybGluZSh2LnRpdGxlKSA6IHYudGl0bGU7XG4gICAgICAgICAgcHJlZml4ID0gKHRoaXMuY3Vyc29yID09PSBpID8gY29sb3IuY3lhbihmaWd1cmVzLnBvaW50ZXIpICsgJyAnIDogJyAgJykgKyBwcmVmaXg7XG5cbiAgICAgICAgICBpZiAodi5kZXNjcmlwdGlvbiAmJiB0aGlzLmN1cnNvciA9PT0gaSkge1xuICAgICAgICAgICAgZGVzYyA9IGAgLSAke3YuZGVzY3JpcHRpb259YDtcblxuICAgICAgICAgICAgaWYgKHByZWZpeC5sZW5ndGggKyB0aXRsZS5sZW5ndGggKyBkZXNjLmxlbmd0aCA+PSB0aGlzLm91dC5jb2x1bW5zIHx8IHYuZGVzY3JpcHRpb24uc3BsaXQoL1xccj9cXG4vKS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgIGRlc2MgPSAnXFxuJyArIHdyYXAodi5kZXNjcmlwdGlvbiwge1xuICAgICAgICAgICAgICAgIG1hcmdpbjogMyxcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5vdXQuY29sdW1uc1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm91dHB1dFRleHQgKz0gYCR7cHJlZml4fSAke3RpdGxlfSR7Y29sb3IuZ3JheShkZXNjKX1cXG5gO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMub3V0LndyaXRlKHRoaXMub3V0cHV0VGV4dCk7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNlbGVjdFByb21wdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IGNvbG9yID0gcmVxdWlyZSgna2xldXInKTtcblxuY29uc3QgUHJvbXB0ID0gcmVxdWlyZSgnLi9wcm9tcHQnKTtcblxuY29uc3QgX3JlcXVpcmUgPSByZXF1aXJlKCcuLi91dGlsJyksXG4gICAgICBzdHlsZSA9IF9yZXF1aXJlLnN0eWxlLFxuICAgICAgY2xlYXIgPSBfcmVxdWlyZS5jbGVhcjtcblxuY29uc3QgX3JlcXVpcmUyID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpLFxuICAgICAgY3Vyc29yID0gX3JlcXVpcmUyLmN1cnNvcixcbiAgICAgIGVyYXNlID0gX3JlcXVpcmUyLmVyYXNlO1xuLyoqXG4gKiBUb2dnbGVQcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdHMuaW5pdGlhbD1mYWxzZV0gRGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmFjdGl2ZT0nbm8nXSBBY3RpdmUgbGFiZWxcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5pbmFjdGl2ZT0nb2ZmJ10gSW5hY3RpdmUgbGFiZWxcbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICovXG5cblxuY2xhc3MgVG9nZ2xlUHJvbXB0IGV4dGVuZHMgUHJvbXB0IHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy5tc2cgPSBvcHRzLm1lc3NhZ2U7XG4gICAgdGhpcy52YWx1ZSA9ICEhb3B0cy5pbml0aWFsO1xuICAgIHRoaXMuYWN0aXZlID0gb3B0cy5hY3RpdmUgfHwgJ29uJztcbiAgICB0aGlzLmluYWN0aXZlID0gb3B0cy5pbmFjdGl2ZSB8fCAnb2ZmJztcbiAgICB0aGlzLmluaXRpYWxWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLmluaXRpYWxWYWx1ZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZXhpdCgpIHtcbiAgICB0aGlzLmFib3J0KCk7XG4gIH1cblxuICBhYm9ydCgpIHtcbiAgICB0aGlzLmRvbmUgPSB0aGlzLmFib3J0ZWQgPSB0cnVlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIHN1Ym1pdCgpIHtcbiAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgIHRoaXMuYWJvcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIGRlYWN0aXZhdGUoKSB7XG4gICAgaWYgKHRoaXMudmFsdWUgPT09IGZhbHNlKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy52YWx1ZSA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBhY3RpdmF0ZSgpIHtcbiAgICBpZiAodGhpcy52YWx1ZSA9PT0gdHJ1ZSkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMudmFsdWUgPSB0cnVlO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkZWxldGUoKSB7XG4gICAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gIH1cblxuICBsZWZ0KCkge1xuICAgIHRoaXMuZGVhY3RpdmF0ZSgpO1xuICB9XG5cbiAgcmlnaHQoKSB7XG4gICAgdGhpcy5hY3RpdmF0ZSgpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLmRlYWN0aXZhdGUoKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgdGhpcy52YWx1ZSA9ICF0aGlzLnZhbHVlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBfKGMsIGtleSkge1xuICAgIGlmIChjID09PSAnICcpIHtcbiAgICAgIHRoaXMudmFsdWUgPSAhdGhpcy52YWx1ZTtcbiAgICB9IGVsc2UgaWYgKGMgPT09ICcxJykge1xuICAgICAgdGhpcy52YWx1ZSA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChjID09PSAnMCcpIHtcbiAgICAgIHRoaXMudmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgcmV0dXJuIHRoaXMuYmVsbCgpO1xuXG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5jbG9zZWQpIHJldHVybjtcbiAgICBpZiAodGhpcy5maXJzdFJlbmRlcikgdGhpcy5vdXQud3JpdGUoY3Vyc29yLmhpZGUpO2Vsc2UgdGhpcy5vdXQud3JpdGUoY2xlYXIodGhpcy5vdXRwdXRUZXh0LCB0aGlzLm91dC5jb2x1bW5zKSk7XG4gICAgc3VwZXIucmVuZGVyKCk7XG4gICAgdGhpcy5vdXRwdXRUZXh0ID0gW3N0eWxlLnN5bWJvbCh0aGlzLmRvbmUsIHRoaXMuYWJvcnRlZCksIGNvbG9yLmJvbGQodGhpcy5tc2cpLCBzdHlsZS5kZWxpbWl0ZXIodGhpcy5kb25lKSwgdGhpcy52YWx1ZSA/IHRoaXMuaW5hY3RpdmUgOiBjb2xvci5jeWFuKCkudW5kZXJsaW5lKHRoaXMuaW5hY3RpdmUpLCBjb2xvci5ncmF5KCcvJyksIHRoaXMudmFsdWUgPyBjb2xvci5jeWFuKCkudW5kZXJsaW5lKHRoaXMuYWN0aXZlKSA6IHRoaXMuYWN0aXZlXS5qb2luKCcgJyk7XG4gICAgdGhpcy5vdXQud3JpdGUoZXJhc2UubGluZSArIGN1cnNvci50bygwKSArIHRoaXMub3V0cHV0VGV4dCk7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRvZ2dsZVByb21wdDsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5jbGFzcyBEYXRlUGFydCB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICB0b2tlbixcbiAgICBkYXRlLFxuICAgIHBhcnRzLFxuICAgIGxvY2FsZXNcbiAgfSkge1xuICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgICB0aGlzLmRhdGUgPSBkYXRlIHx8IG5ldyBEYXRlKCk7XG4gICAgdGhpcy5wYXJ0cyA9IHBhcnRzIHx8IFt0aGlzXTtcbiAgICB0aGlzLmxvY2FsZXMgPSBsb2NhbGVzIHx8IHt9O1xuICB9XG5cbiAgdXAoKSB7fVxuXG4gIGRvd24oKSB7fVxuXG4gIG5leHQoKSB7XG4gICAgY29uc3QgY3VycmVudElkeCA9IHRoaXMucGFydHMuaW5kZXhPZih0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5wYXJ0cy5maW5kKChwYXJ0LCBpZHgpID0+IGlkeCA+IGN1cnJlbnRJZHggJiYgcGFydCBpbnN0YW5jZW9mIERhdGVQYXJ0KTtcbiAgfVxuXG4gIHNldFRvKHZhbCkge31cblxuICBwcmV2KCkge1xuICAgIGxldCBwYXJ0cyA9IFtdLmNvbmNhdCh0aGlzLnBhcnRzKS5yZXZlcnNlKCk7XG4gICAgY29uc3QgY3VycmVudElkeCA9IHBhcnRzLmluZGV4T2YodGhpcyk7XG4gICAgcmV0dXJuIHBhcnRzLmZpbmQoKHBhcnQsIGlkeCkgPT4gaWR4ID4gY3VycmVudElkeCAmJiBwYXJ0IGluc3RhbmNlb2YgRGF0ZVBhcnQpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIFN0cmluZyh0aGlzLmRhdGUpO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEYXRlUGFydDsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBEYXRlUGFydCA9IHJlcXVpcmUoJy4vZGF0ZXBhcnQnKTtcblxuY2xhc3MgTWVyaWRpZW0gZXh0ZW5kcyBEYXRlUGFydCB7XG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgdGhpcy5kYXRlLnNldEhvdXJzKCh0aGlzLmRhdGUuZ2V0SG91cnMoKSArIDEyKSAlIDI0KTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgdGhpcy51cCgpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IG1lcmlkaWVtID0gdGhpcy5kYXRlLmdldEhvdXJzKCkgPiAxMiA/ICdwbScgOiAnYW0nO1xuICAgIHJldHVybiAvXFxBLy50ZXN0KHRoaXMudG9rZW4pID8gbWVyaWRpZW0udG9VcHBlckNhc2UoKSA6IG1lcmlkaWVtO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNZXJpZGllbTsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBEYXRlUGFydCA9IHJlcXVpcmUoJy4vZGF0ZXBhcnQnKTtcblxuY29uc3QgcG9zID0gbiA9PiB7XG4gIG4gPSBuICUgMTA7XG4gIHJldHVybiBuID09PSAxID8gJ3N0JyA6IG4gPT09IDIgPyAnbmQnIDogbiA9PT0gMyA/ICdyZCcgOiAndGgnO1xufTtcblxuY2xhc3MgRGF5IGV4dGVuZHMgRGF0ZVBhcnQge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMuZGF0ZS5zZXREYXRlKHRoaXMuZGF0ZS5nZXREYXRlKCkgKyAxKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgdGhpcy5kYXRlLnNldERhdGUodGhpcy5kYXRlLmdldERhdGUoKSAtIDEpO1xuICB9XG5cbiAgc2V0VG8odmFsKSB7XG4gICAgdGhpcy5kYXRlLnNldERhdGUocGFyc2VJbnQodmFsLnN1YnN0cigtMikpKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCBkYXRlID0gdGhpcy5kYXRlLmdldERhdGUoKTtcbiAgICBsZXQgZGF5ID0gdGhpcy5kYXRlLmdldERheSgpO1xuICAgIHJldHVybiB0aGlzLnRva2VuID09PSAnREQnID8gU3RyaW5nKGRhdGUpLnBhZFN0YXJ0KDIsICcwJykgOiB0aGlzLnRva2VuID09PSAnRG8nID8gZGF0ZSArIHBvcyhkYXRlKSA6IHRoaXMudG9rZW4gPT09ICdkJyA/IGRheSArIDEgOiB0aGlzLnRva2VuID09PSAnZGRkJyA/IHRoaXMubG9jYWxlcy53ZWVrZGF5c1Nob3J0W2RheV0gOiB0aGlzLnRva2VuID09PSAnZGRkZCcgPyB0aGlzLmxvY2FsZXMud2Vla2RheXNbZGF5XSA6IGRhdGU7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERheTsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBEYXRlUGFydCA9IHJlcXVpcmUoJy4vZGF0ZXBhcnQnKTtcblxuY2xhc3MgSG91cnMgZXh0ZW5kcyBEYXRlUGFydCB7XG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgdGhpcy5kYXRlLnNldEhvdXJzKHRoaXMuZGF0ZS5nZXRIb3VycygpICsgMSk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRIb3Vycyh0aGlzLmRhdGUuZ2V0SG91cnMoKSAtIDEpO1xuICB9XG5cbiAgc2V0VG8odmFsKSB7XG4gICAgdGhpcy5kYXRlLnNldEhvdXJzKHBhcnNlSW50KHZhbC5zdWJzdHIoLTIpKSk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICBsZXQgaG91cnMgPSB0aGlzLmRhdGUuZ2V0SG91cnMoKTtcbiAgICBpZiAoL2gvLnRlc3QodGhpcy50b2tlbikpIGhvdXJzID0gaG91cnMgJSAxMiB8fCAxMjtcbiAgICByZXR1cm4gdGhpcy50b2tlbi5sZW5ndGggPiAxID8gU3RyaW5nKGhvdXJzKS5wYWRTdGFydCgyLCAnMCcpIDogaG91cnM7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEhvdXJzOyIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IERhdGVQYXJ0ID0gcmVxdWlyZSgnLi9kYXRlcGFydCcpO1xuXG5jbGFzcyBNaWxsaXNlY29uZHMgZXh0ZW5kcyBEYXRlUGFydCB7XG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgdGhpcy5kYXRlLnNldE1pbGxpc2Vjb25kcyh0aGlzLmRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkgKyAxKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgdGhpcy5kYXRlLnNldE1pbGxpc2Vjb25kcyh0aGlzLmRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkgLSAxKTtcbiAgfVxuXG4gIHNldFRvKHZhbCkge1xuICAgIHRoaXMuZGF0ZS5zZXRNaWxsaXNlY29uZHMocGFyc2VJbnQodmFsLnN1YnN0cigtdGhpcy50b2tlbi5sZW5ndGgpKSk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gU3RyaW5nKHRoaXMuZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSkucGFkU3RhcnQoNCwgJzAnKS5zdWJzdHIoMCwgdGhpcy50b2tlbi5sZW5ndGgpO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNaWxsaXNlY29uZHM7IiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGF0ZVBhcnQgPSByZXF1aXJlKCcuL2RhdGVwYXJ0Jyk7XG5cbmNsYXNzIE1pbnV0ZXMgZXh0ZW5kcyBEYXRlUGFydCB7XG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgdGhpcy5kYXRlLnNldE1pbnV0ZXModGhpcy5kYXRlLmdldE1pbnV0ZXMoKSArIDEpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLmRhdGUuc2V0TWludXRlcyh0aGlzLmRhdGUuZ2V0TWludXRlcygpIC0gMSk7XG4gIH1cblxuICBzZXRUbyh2YWwpIHtcbiAgICB0aGlzLmRhdGUuc2V0TWludXRlcyhwYXJzZUludCh2YWwuc3Vic3RyKC0yKSkpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IG0gPSB0aGlzLmRhdGUuZ2V0TWludXRlcygpO1xuICAgIHJldHVybiB0aGlzLnRva2VuLmxlbmd0aCA+IDEgPyBTdHJpbmcobSkucGFkU3RhcnQoMiwgJzAnKSA6IG07XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1pbnV0ZXM7IiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGF0ZVBhcnQgPSByZXF1aXJlKCcuL2RhdGVwYXJ0Jyk7XG5cbmNsYXNzIE1vbnRoIGV4dGVuZHMgRGF0ZVBhcnQge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRNb250aCh0aGlzLmRhdGUuZ2V0TW9udGgoKSArIDEpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLmRhdGUuc2V0TW9udGgodGhpcy5kYXRlLmdldE1vbnRoKCkgLSAxKTtcbiAgfVxuXG4gIHNldFRvKHZhbCkge1xuICAgIHZhbCA9IHBhcnNlSW50KHZhbC5zdWJzdHIoLTIpKSAtIDE7XG4gICAgdGhpcy5kYXRlLnNldE1vbnRoKHZhbCA8IDAgPyAwIDogdmFsKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCBtb250aCA9IHRoaXMuZGF0ZS5nZXRNb250aCgpO1xuICAgIGxldCB0bCA9IHRoaXMudG9rZW4ubGVuZ3RoO1xuICAgIHJldHVybiB0bCA9PT0gMiA/IFN0cmluZyhtb250aCArIDEpLnBhZFN0YXJ0KDIsICcwJykgOiB0bCA9PT0gMyA/IHRoaXMubG9jYWxlcy5tb250aHNTaG9ydFttb250aF0gOiB0bCA9PT0gNCA/IHRoaXMubG9jYWxlcy5tb250aHNbbW9udGhdIDogU3RyaW5nKG1vbnRoICsgMSk7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1vbnRoOyIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IERhdGVQYXJ0ID0gcmVxdWlyZSgnLi9kYXRlcGFydCcpO1xuXG5jbGFzcyBTZWNvbmRzIGV4dGVuZHMgRGF0ZVBhcnQge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRTZWNvbmRzKHRoaXMuZGF0ZS5nZXRTZWNvbmRzKCkgKyAxKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgdGhpcy5kYXRlLnNldFNlY29uZHModGhpcy5kYXRlLmdldFNlY29uZHMoKSAtIDEpO1xuICB9XG5cbiAgc2V0VG8odmFsKSB7XG4gICAgdGhpcy5kYXRlLnNldFNlY29uZHMocGFyc2VJbnQodmFsLnN1YnN0cigtMikpKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCBzID0gdGhpcy5kYXRlLmdldFNlY29uZHMoKTtcbiAgICByZXR1cm4gdGhpcy50b2tlbi5sZW5ndGggPiAxID8gU3RyaW5nKHMpLnBhZFN0YXJ0KDIsICcwJykgOiBzO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTZWNvbmRzOyIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IERhdGVQYXJ0ID0gcmVxdWlyZSgnLi9kYXRlcGFydCcpO1xuXG5jbGFzcyBZZWFyIGV4dGVuZHMgRGF0ZVBhcnQge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRGdWxsWWVhcih0aGlzLmRhdGUuZ2V0RnVsbFllYXIoKSArIDEpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLmRhdGUuc2V0RnVsbFllYXIodGhpcy5kYXRlLmdldEZ1bGxZZWFyKCkgLSAxKTtcbiAgfVxuXG4gIHNldFRvKHZhbCkge1xuICAgIHRoaXMuZGF0ZS5zZXRGdWxsWWVhcih2YWwuc3Vic3RyKC00KSk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICBsZXQgeWVhciA9IFN0cmluZyh0aGlzLmRhdGUuZ2V0RnVsbFllYXIoKSkucGFkU3RhcnQoNCwgJzAnKTtcbiAgICByZXR1cm4gdGhpcy50b2tlbi5sZW5ndGggPT09IDIgPyB5ZWFyLnN1YnN0cigtMikgOiB5ZWFyO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBZZWFyOyIsICIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBEYXRlUGFydDogcmVxdWlyZSgnLi9kYXRlcGFydCcpLFxuICBNZXJpZGllbTogcmVxdWlyZSgnLi9tZXJpZGllbScpLFxuICBEYXk6IHJlcXVpcmUoJy4vZGF5JyksXG4gIEhvdXJzOiByZXF1aXJlKCcuL2hvdXJzJyksXG4gIE1pbGxpc2Vjb25kczogcmVxdWlyZSgnLi9taWxsaXNlY29uZHMnKSxcbiAgTWludXRlczogcmVxdWlyZSgnLi9taW51dGVzJyksXG4gIE1vbnRoOiByZXF1aXJlKCcuL21vbnRoJyksXG4gIFNlY29uZHM6IHJlcXVpcmUoJy4vc2Vjb25kcycpLFxuICBZZWFyOiByZXF1aXJlKCcuL3llYXInKVxufTsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9XG5cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7IH0gZnVuY3Rpb24gX3Rocm93KGVycikgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfVxuXG5jb25zdCBjb2xvciA9IHJlcXVpcmUoJ2tsZXVyJyk7XG5cbmNvbnN0IFByb21wdCA9IHJlcXVpcmUoJy4vcHJvbXB0Jyk7XG5cbmNvbnN0IF9yZXF1aXJlID0gcmVxdWlyZSgnLi4vdXRpbCcpLFxuICAgICAgc3R5bGUgPSBfcmVxdWlyZS5zdHlsZSxcbiAgICAgIGNsZWFyID0gX3JlcXVpcmUuY2xlYXIsXG4gICAgICBmaWd1cmVzID0gX3JlcXVpcmUuZmlndXJlcztcblxuY29uc3QgX3JlcXVpcmUyID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpLFxuICAgICAgZXJhc2UgPSBfcmVxdWlyZTIuZXJhc2UsXG4gICAgICBjdXJzb3IgPSBfcmVxdWlyZTIuY3Vyc29yO1xuXG5jb25zdCBfcmVxdWlyZTMgPSByZXF1aXJlKCcuLi9kYXRlcGFydHMnKSxcbiAgICAgIERhdGVQYXJ0ID0gX3JlcXVpcmUzLkRhdGVQYXJ0LFxuICAgICAgTWVyaWRpZW0gPSBfcmVxdWlyZTMuTWVyaWRpZW0sXG4gICAgICBEYXkgPSBfcmVxdWlyZTMuRGF5LFxuICAgICAgSG91cnMgPSBfcmVxdWlyZTMuSG91cnMsXG4gICAgICBNaWxsaXNlY29uZHMgPSBfcmVxdWlyZTMuTWlsbGlzZWNvbmRzLFxuICAgICAgTWludXRlcyA9IF9yZXF1aXJlMy5NaW51dGVzLFxuICAgICAgTW9udGggPSBfcmVxdWlyZTMuTW9udGgsXG4gICAgICBTZWNvbmRzID0gX3JlcXVpcmUzLlNlY29uZHMsXG4gICAgICBZZWFyID0gX3JlcXVpcmUzLlllYXI7XG5cbmNvbnN0IHJlZ2V4ID0gL1xcXFwoLil8XCIoKD86XFxcXFtcIlxcXFxdfFteXCJdKSspXCJ8KERbRG9dP3xkezMsNH18ZCl8KE17MSw0fSl8KFlZKD86WVkpPyl8KFthQV0pfChbSGhdezEsMn0pfChtezEsMn0pfChzezEsMn0pfChTezEsNH0pfC4vZztcbmNvbnN0IHJlZ2V4R3JvdXBzID0ge1xuICAxOiAoe1xuICAgIHRva2VuXG4gIH0pID0+IHRva2VuLnJlcGxhY2UoL1xcXFwoLikvZywgJyQxJyksXG4gIDI6IG9wdHMgPT4gbmV3IERheShvcHRzKSxcbiAgLy8gRGF5IC8vIFRPRE9cbiAgMzogb3B0cyA9PiBuZXcgTW9udGgob3B0cyksXG4gIC8vIE1vbnRoXG4gIDQ6IG9wdHMgPT4gbmV3IFllYXIob3B0cyksXG4gIC8vIFllYXJcbiAgNTogb3B0cyA9PiBuZXcgTWVyaWRpZW0ob3B0cyksXG4gIC8vIEFNL1BNIC8vIFRPRE8gKHNwZWNpYWwpXG4gIDY6IG9wdHMgPT4gbmV3IEhvdXJzKG9wdHMpLFxuICAvLyBIb3Vyc1xuICA3OiBvcHRzID0+IG5ldyBNaW51dGVzKG9wdHMpLFxuICAvLyBNaW51dGVzXG4gIDg6IG9wdHMgPT4gbmV3IFNlY29uZHMob3B0cyksXG4gIC8vIFNlY29uZHNcbiAgOTogb3B0cyA9PiBuZXcgTWlsbGlzZWNvbmRzKG9wdHMpIC8vIEZyYWN0aW9uYWwgc2Vjb25kc1xuXG59O1xuY29uc3QgZGZsdExvY2FsZXMgPSB7XG4gIG1vbnRoczogJ0phbnVhcnksRmVicnVhcnksTWFyY2gsQXByaWwsTWF5LEp1bmUsSnVseSxBdWd1c3QsU2VwdGVtYmVyLE9jdG9iZXIsTm92ZW1iZXIsRGVjZW1iZXInLnNwbGl0KCcsJyksXG4gIG1vbnRoc1Nob3J0OiAnSmFuLEZlYixNYXIsQXByLE1heSxKdW4sSnVsLEF1ZyxTZXAsT2N0LE5vdixEZWMnLnNwbGl0KCcsJyksXG4gIHdlZWtkYXlzOiAnU3VuZGF5LE1vbmRheSxUdWVzZGF5LFdlZG5lc2RheSxUaHVyc2RheSxGcmlkYXksU2F0dXJkYXknLnNwbGl0KCcsJyksXG4gIHdlZWtkYXlzU2hvcnQ6ICdTdW4sTW9uLFR1ZSxXZWQsVGh1LEZyaSxTYXQnLnNwbGl0KCcsJylcbn07XG4vKipcbiAqIERhdGVQcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5pbml0aWFsXSBJbmRleCBvZiBkZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMubWFza10gVGhlIGZvcm1hdCBtYXNrXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdHMubG9jYWxlc10gVGhlIGRhdGUgbG9jYWxlc1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmVycm9yXSBUaGUgZXJyb3IgbWVzc2FnZSBzaG93biBvbiBpbnZhbGlkIHZhbHVlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy52YWxpZGF0ZV0gRnVuY3Rpb24gdG8gdmFsaWRhdGUgdGhlIHN1Ym1pdHRlZCB2YWx1ZVxuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKi9cblxuY2xhc3MgRGF0ZVByb21wdCBleHRlbmRzIFByb21wdCB7XG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXMubXNnID0gb3B0cy5tZXNzYWdlO1xuICAgIHRoaXMuY3Vyc29yID0gMDtcbiAgICB0aGlzLnR5cGVkID0gJyc7XG4gICAgdGhpcy5sb2NhbGVzID0gT2JqZWN0LmFzc2lnbihkZmx0TG9jYWxlcywgb3B0cy5sb2NhbGVzKTtcbiAgICB0aGlzLl9kYXRlID0gb3B0cy5pbml0aWFsIHx8IG5ldyBEYXRlKCk7XG4gICAgdGhpcy5lcnJvck1zZyA9IG9wdHMuZXJyb3IgfHwgJ1BsZWFzZSBFbnRlciBBIFZhbGlkIFZhbHVlJztcblxuICAgIHRoaXMudmFsaWRhdG9yID0gb3B0cy52YWxpZGF0ZSB8fCAoKCkgPT4gdHJ1ZSk7XG5cbiAgICB0aGlzLm1hc2sgPSBvcHRzLm1hc2sgfHwgJ1lZWVktTU0tREQgSEg6bW06c3MnO1xuICAgIHRoaXMuY2xlYXIgPSBjbGVhcignJywgdGhpcy5vdXQuY29sdW1ucyk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRlO1xuICB9XG5cbiAgZ2V0IGRhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGU7XG4gIH1cblxuICBzZXQgZGF0ZShkYXRlKSB7XG4gICAgaWYgKGRhdGUpIHRoaXMuX2RhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSk7XG4gIH1cblxuICBzZXQgbWFzayhtYXNrKSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0aGlzLnBhcnRzID0gW107XG5cbiAgICB3aGlsZSAocmVzdWx0ID0gcmVnZXguZXhlYyhtYXNrKSkge1xuICAgICAgbGV0IG1hdGNoID0gcmVzdWx0LnNoaWZ0KCk7XG4gICAgICBsZXQgaWR4ID0gcmVzdWx0LmZpbmRJbmRleChnciA9PiBnciAhPSBudWxsKTtcbiAgICAgIHRoaXMucGFydHMucHVzaChpZHggaW4gcmVnZXhHcm91cHMgPyByZWdleEdyb3Vwc1tpZHhdKHtcbiAgICAgICAgdG9rZW46IHJlc3VsdFtpZHhdIHx8IG1hdGNoLFxuICAgICAgICBkYXRlOiB0aGlzLmRhdGUsXG4gICAgICAgIHBhcnRzOiB0aGlzLnBhcnRzLFxuICAgICAgICBsb2NhbGVzOiB0aGlzLmxvY2FsZXNcbiAgICAgIH0pIDogcmVzdWx0W2lkeF0gfHwgbWF0Y2gpO1xuICAgIH1cblxuICAgIGxldCBwYXJ0cyA9IHRoaXMucGFydHMucmVkdWNlKChhcnIsIGkpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgaSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIGFyclthcnIubGVuZ3RoIC0gMV0gPT09ICdzdHJpbmcnKSBhcnJbYXJyLmxlbmd0aCAtIDFdICs9IGk7ZWxzZSBhcnIucHVzaChpKTtcbiAgICAgIHJldHVybiBhcnI7XG4gICAgfSwgW10pO1xuICAgIHRoaXMucGFydHMuc3BsaWNlKDApO1xuICAgIHRoaXMucGFydHMucHVzaCguLi5wYXJ0cyk7XG4gICAgdGhpcy5yZXNldCgpO1xuICB9XG5cbiAgbW92ZUN1cnNvcihuKSB7XG4gICAgdGhpcy50eXBlZCA9ICcnO1xuICAgIHRoaXMuY3Vyc29yID0gbjtcbiAgICB0aGlzLmZpcmUoKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMubW92ZUN1cnNvcih0aGlzLnBhcnRzLmZpbmRJbmRleChwID0+IHAgaW5zdGFuY2VvZiBEYXRlUGFydCkpO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBleGl0KCkge1xuICAgIHRoaXMuYWJvcnQoKTtcbiAgfVxuXG4gIGFib3J0KCkge1xuICAgIHRoaXMuZG9uZSA9IHRoaXMuYWJvcnRlZCA9IHRydWU7XG4gICAgdGhpcy5lcnJvciA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIHZhbGlkYXRlKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoZnVuY3Rpb24qICgpIHtcbiAgICAgIGxldCB2YWxpZCA9IHlpZWxkIF90aGlzLnZhbGlkYXRvcihfdGhpcy52YWx1ZSk7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIF90aGlzLmVycm9yTXNnID0gdmFsaWQ7XG4gICAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmVycm9yID0gIXZhbGlkO1xuICAgIH0pKCk7XG4gIH1cblxuICBzdWJtaXQoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoZnVuY3Rpb24qICgpIHtcbiAgICAgIHlpZWxkIF90aGlzMi52YWxpZGF0ZSgpO1xuXG4gICAgICBpZiAoX3RoaXMyLmVycm9yKSB7XG4gICAgICAgIF90aGlzMi5jb2xvciA9ICdyZWQnO1xuXG4gICAgICAgIF90aGlzMi5maXJlKCk7XG5cbiAgICAgICAgX3RoaXMyLnJlbmRlcigpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMyLmRvbmUgPSB0cnVlO1xuICAgICAgX3RoaXMyLmFib3J0ZWQgPSBmYWxzZTtcblxuICAgICAgX3RoaXMyLmZpcmUoKTtcblxuICAgICAgX3RoaXMyLnJlbmRlcigpO1xuXG4gICAgICBfdGhpczIub3V0LndyaXRlKCdcXG4nKTtcblxuICAgICAgX3RoaXMyLmNsb3NlKCk7XG4gICAgfSkoKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMudHlwZWQgPSAnJztcbiAgICB0aGlzLnBhcnRzW3RoaXMuY3Vyc29yXS51cCgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIHRoaXMudHlwZWQgPSAnJztcbiAgICB0aGlzLnBhcnRzW3RoaXMuY3Vyc29yXS5kb3duKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGxlZnQoKSB7XG4gICAgbGV0IHByZXYgPSB0aGlzLnBhcnRzW3RoaXMuY3Vyc29yXS5wcmV2KCk7XG4gICAgaWYgKHByZXYgPT0gbnVsbCkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMubW92ZUN1cnNvcih0aGlzLnBhcnRzLmluZGV4T2YocHJldikpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByaWdodCgpIHtcbiAgICBsZXQgbmV4dCA9IHRoaXMucGFydHNbdGhpcy5jdXJzb3JdLm5leHQoKTtcbiAgICBpZiAobmV4dCA9PSBudWxsKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy5tb3ZlQ3Vyc29yKHRoaXMucGFydHMuaW5kZXhPZihuZXh0KSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgbGV0IG5leHQgPSB0aGlzLnBhcnRzW3RoaXMuY3Vyc29yXS5uZXh0KCk7XG4gICAgdGhpcy5tb3ZlQ3Vyc29yKG5leHQgPyB0aGlzLnBhcnRzLmluZGV4T2YobmV4dCkgOiB0aGlzLnBhcnRzLmZpbmRJbmRleChwYXJ0ID0+IHBhcnQgaW5zdGFuY2VvZiBEYXRlUGFydCkpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBfKGMpIHtcbiAgICBpZiAoL1xcZC8udGVzdChjKSkge1xuICAgICAgdGhpcy50eXBlZCArPSBjO1xuICAgICAgdGhpcy5wYXJ0c1t0aGlzLmN1cnNvcl0uc2V0VG8odGhpcy50eXBlZCk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5jbG9zZWQpIHJldHVybjtcbiAgICBpZiAodGhpcy5maXJzdFJlbmRlcikgdGhpcy5vdXQud3JpdGUoY3Vyc29yLmhpZGUpO2Vsc2UgdGhpcy5vdXQud3JpdGUoY2xlYXIodGhpcy5vdXRwdXRUZXh0LCB0aGlzLm91dC5jb2x1bW5zKSk7XG4gICAgc3VwZXIucmVuZGVyKCk7IC8vIFByaW50IHByb21wdFxuXG4gICAgdGhpcy5vdXRwdXRUZXh0ID0gW3N0eWxlLnN5bWJvbCh0aGlzLmRvbmUsIHRoaXMuYWJvcnRlZCksIGNvbG9yLmJvbGQodGhpcy5tc2cpLCBzdHlsZS5kZWxpbWl0ZXIoZmFsc2UpLCB0aGlzLnBhcnRzLnJlZHVjZSgoYXJyLCBwLCBpZHgpID0+IGFyci5jb25jYXQoaWR4ID09PSB0aGlzLmN1cnNvciAmJiAhdGhpcy5kb25lID8gY29sb3IuY3lhbigpLnVuZGVybGluZShwLnRvU3RyaW5nKCkpIDogcCksIFtdKS5qb2luKCcnKV0uam9pbignICcpOyAvLyBQcmludCBlcnJvclxuXG4gICAgaWYgKHRoaXMuZXJyb3IpIHtcbiAgICAgIHRoaXMub3V0cHV0VGV4dCArPSB0aGlzLmVycm9yTXNnLnNwbGl0KCdcXG4nKS5yZWR1Y2UoKGEsIGwsIGkpID0+IGEgKyBgXFxuJHtpID8gYCBgIDogZmlndXJlcy5wb2ludGVyU21hbGx9ICR7Y29sb3IucmVkKCkuaXRhbGljKGwpfWAsIGBgKTtcbiAgICB9XG5cbiAgICB0aGlzLm91dC53cml0ZShlcmFzZS5saW5lICsgY3Vyc29yLnRvKDApICsgdGhpcy5vdXRwdXRUZXh0KTtcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0ZVByb21wdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH1cblxuZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIHNlbGYgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzOyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7IGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9XG5cbmNvbnN0IGNvbG9yID0gcmVxdWlyZSgna2xldXInKTtcblxuY29uc3QgUHJvbXB0ID0gcmVxdWlyZSgnLi9wcm9tcHQnKTtcblxuY29uc3QgX3JlcXVpcmUgPSByZXF1aXJlKCdzaXN0ZXJhbnNpJyksXG4gICAgICBjdXJzb3IgPSBfcmVxdWlyZS5jdXJzb3IsXG4gICAgICBlcmFzZSA9IF9yZXF1aXJlLmVyYXNlO1xuXG5jb25zdCBfcmVxdWlyZTIgPSByZXF1aXJlKCcuLi91dGlsJyksXG4gICAgICBzdHlsZSA9IF9yZXF1aXJlMi5zdHlsZSxcbiAgICAgIGZpZ3VyZXMgPSBfcmVxdWlyZTIuZmlndXJlcyxcbiAgICAgIGNsZWFyID0gX3JlcXVpcmUyLmNsZWFyLFxuICAgICAgbGluZXMgPSBfcmVxdWlyZTIubGluZXM7XG5cbmNvbnN0IGlzTnVtYmVyID0gL1swLTldLztcblxuY29uc3QgaXNEZWYgPSBhbnkgPT4gYW55ICE9PSB1bmRlZmluZWQ7XG5cbmNvbnN0IHJvdW5kID0gKG51bWJlciwgcHJlY2lzaW9uKSA9PiB7XG4gIGxldCBmYWN0b3IgPSBNYXRoLnBvdygxMCwgcHJlY2lzaW9uKTtcbiAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyICogZmFjdG9yKSAvIGZhY3Rvcjtcbn07XG4vKipcbiAqIE51bWJlclByb21wdCBCYXNlIEVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRzLm1lc3NhZ2UgTWVzc2FnZVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLnN0eWxlPSdkZWZhdWx0J10gUmVuZGVyIHN0eWxlXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMuaW5pdGlhbF0gRGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLm1heD0rSW5maW5pdHldIE1heCB2YWx1ZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLm1pbj0tSW5maW5pdHldIE1pbiB2YWx1ZVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0cy5mbG9hdD1mYWxzZV0gUGFyc2UgaW5wdXQgYXMgZmxvYXRzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMucm91bmQ9Ml0gUm91bmQgZmxvYXRzIHRvIHggZGVjaW1hbHNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5pbmNyZW1lbnQ9MV0gTnVtYmVyIHRvIGluY3JlbWVudCBieSB3aGVuIHVzaW5nIGFycm93LWtleXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLnZhbGlkYXRlXSBWYWxpZGF0ZSBmdW5jdGlvblxuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuZXJyb3JdIFRoZSBpbnZhbGlkIGVycm9yIGxhYmVsXG4gKi9cblxuXG5jbGFzcyBOdW1iZXJQcm9tcHQgZXh0ZW5kcyBQcm9tcHQge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgICB0aGlzLnRyYW5zZm9ybSA9IHN0eWxlLnJlbmRlcihvcHRzLnN0eWxlKTtcbiAgICB0aGlzLm1zZyA9IG9wdHMubWVzc2FnZTtcbiAgICB0aGlzLmluaXRpYWwgPSBpc0RlZihvcHRzLmluaXRpYWwpID8gb3B0cy5pbml0aWFsIDogJyc7XG4gICAgdGhpcy5mbG9hdCA9ICEhb3B0cy5mbG9hdDtcbiAgICB0aGlzLnJvdW5kID0gb3B0cy5yb3VuZCB8fCAyO1xuICAgIHRoaXMuaW5jID0gb3B0cy5pbmNyZW1lbnQgfHwgMTtcbiAgICB0aGlzLm1pbiA9IGlzRGVmKG9wdHMubWluKSA/IG9wdHMubWluIDogLUluZmluaXR5O1xuICAgIHRoaXMubWF4ID0gaXNEZWYob3B0cy5tYXgpID8gb3B0cy5tYXggOiBJbmZpbml0eTtcbiAgICB0aGlzLmVycm9yTXNnID0gb3B0cy5lcnJvciB8fCBgUGxlYXNlIEVudGVyIEEgVmFsaWQgVmFsdWVgO1xuXG4gICAgdGhpcy52YWxpZGF0b3IgPSBvcHRzLnZhbGlkYXRlIHx8ICgoKSA9PiB0cnVlKTtcblxuICAgIHRoaXMuY29sb3IgPSBgY3lhbmA7XG4gICAgdGhpcy52YWx1ZSA9IGBgO1xuICAgIHRoaXMudHlwZWQgPSBgYDtcbiAgICB0aGlzLmxhc3RIaXQgPSAwO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBzZXQgdmFsdWUodikge1xuICAgIGlmICghdiAmJiB2ICE9PSAwKSB7XG4gICAgICB0aGlzLnBsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIHRoaXMucmVuZGVyZWQgPSBjb2xvci5ncmF5KHRoaXMudHJhbnNmb3JtLnJlbmRlcihgJHt0aGlzLmluaXRpYWx9YCkpO1xuICAgICAgdGhpcy5fdmFsdWUgPSBgYDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IGZhbHNlO1xuICAgICAgdGhpcy5yZW5kZXJlZCA9IHRoaXMudHJhbnNmb3JtLnJlbmRlcihgJHtyb3VuZCh2LCB0aGlzLnJvdW5kKX1gKTtcbiAgICAgIHRoaXMuX3ZhbHVlID0gcm91bmQodiwgdGhpcy5yb3VuZCk7XG4gICAgfVxuXG4gICAgdGhpcy5maXJlKCk7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgcGFyc2UoeCkge1xuICAgIHJldHVybiB0aGlzLmZsb2F0ID8gcGFyc2VGbG9hdCh4KSA6IHBhcnNlSW50KHgpO1xuICB9XG5cbiAgdmFsaWQoYykge1xuICAgIHJldHVybiBjID09PSBgLWAgfHwgYyA9PT0gYC5gICYmIHRoaXMuZmxvYXQgfHwgaXNOdW1iZXIudGVzdChjKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMudHlwZWQgPSBgYDtcbiAgICB0aGlzLnZhbHVlID0gYGA7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGV4aXQoKSB7XG4gICAgdGhpcy5hYm9ydCgpO1xuICB9XG5cbiAgYWJvcnQoKSB7XG4gICAgbGV0IHggPSB0aGlzLnZhbHVlO1xuICAgIHRoaXMudmFsdWUgPSB4ICE9PSBgYCA/IHggOiB0aGlzLmluaXRpYWw7XG4gICAgdGhpcy5kb25lID0gdGhpcy5hYm9ydGVkID0gdHJ1ZTtcbiAgICB0aGlzLmVycm9yID0gZmFsc2U7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm91dC53cml0ZShgXFxuYCk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgdmFsaWRhdGUoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvcihmdW5jdGlvbiogKCkge1xuICAgICAgbGV0IHZhbGlkID0geWllbGQgX3RoaXMudmFsaWRhdG9yKF90aGlzLnZhbHVlKTtcblxuICAgICAgaWYgKHR5cGVvZiB2YWxpZCA9PT0gYHN0cmluZ2ApIHtcbiAgICAgICAgX3RoaXMuZXJyb3JNc2cgPSB2YWxpZDtcbiAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuZXJyb3IgPSAhdmFsaWQ7XG4gICAgfSkoKTtcbiAgfVxuXG4gIHN1Ym1pdCgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvcihmdW5jdGlvbiogKCkge1xuICAgICAgeWllbGQgX3RoaXMyLnZhbGlkYXRlKCk7XG5cbiAgICAgIGlmIChfdGhpczIuZXJyb3IpIHtcbiAgICAgICAgX3RoaXMyLmNvbG9yID0gYHJlZGA7XG5cbiAgICAgICAgX3RoaXMyLmZpcmUoKTtcblxuICAgICAgICBfdGhpczIucmVuZGVyKCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBsZXQgeCA9IF90aGlzMi52YWx1ZTtcbiAgICAgIF90aGlzMi52YWx1ZSA9IHggIT09IGBgID8geCA6IF90aGlzMi5pbml0aWFsO1xuICAgICAgX3RoaXMyLmRvbmUgPSB0cnVlO1xuICAgICAgX3RoaXMyLmFib3J0ZWQgPSBmYWxzZTtcbiAgICAgIF90aGlzMi5lcnJvciA9IGZhbHNlO1xuXG4gICAgICBfdGhpczIuZmlyZSgpO1xuXG4gICAgICBfdGhpczIucmVuZGVyKCk7XG5cbiAgICAgIF90aGlzMi5vdXQud3JpdGUoYFxcbmApO1xuXG4gICAgICBfdGhpczIuY2xvc2UoKTtcbiAgICB9KSgpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgdGhpcy50eXBlZCA9IGBgO1xuXG4gICAgaWYgKHRoaXMudmFsdWUgPT09ICcnKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5taW4gLSB0aGlzLmluYztcbiAgICB9XG5cbiAgICBpZiAodGhpcy52YWx1ZSA+PSB0aGlzLm1heCkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMudmFsdWUgKz0gdGhpcy5pbmM7XG4gICAgdGhpcy5jb2xvciA9IGBjeWFuYDtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLnR5cGVkID0gYGA7XG5cbiAgICBpZiAodGhpcy52YWx1ZSA9PT0gJycpIHtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLm1pbiArIHRoaXMuaW5jO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnZhbHVlIDw9IHRoaXMubWluKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy52YWx1ZSAtPSB0aGlzLmluYztcbiAgICB0aGlzLmNvbG9yID0gYGN5YW5gO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkZWxldGUoKSB7XG4gICAgbGV0IHZhbCA9IHRoaXMudmFsdWUudG9TdHJpbmcoKTtcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLnBhcnNlKHZhbCA9IHZhbC5zbGljZSgwLCAtMSkpIHx8IGBgO1xuXG4gICAgaWYgKHRoaXMudmFsdWUgIT09ICcnICYmIHRoaXMudmFsdWUgPCB0aGlzLm1pbikge1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMubWluO1xuICAgIH1cblxuICAgIHRoaXMuY29sb3IgPSBgY3lhbmA7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMuaW5pdGlhbDtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgXyhjLCBrZXkpIHtcbiAgICBpZiAoIXRoaXMudmFsaWQoYykpIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGlmIChub3cgLSB0aGlzLmxhc3RIaXQgPiAxMDAwKSB0aGlzLnR5cGVkID0gYGA7IC8vIDFzIGVsYXBzZWRcblxuICAgIHRoaXMudHlwZWQgKz0gYztcbiAgICB0aGlzLmxhc3RIaXQgPSBub3c7XG4gICAgdGhpcy5jb2xvciA9IGBjeWFuYDtcbiAgICBpZiAoYyA9PT0gYC5gKSByZXR1cm4gdGhpcy5maXJlKCk7XG4gICAgdGhpcy52YWx1ZSA9IE1hdGgubWluKHRoaXMucGFyc2UodGhpcy50eXBlZCksIHRoaXMubWF4KTtcbiAgICBpZiAodGhpcy52YWx1ZSA+IHRoaXMubWF4KSB0aGlzLnZhbHVlID0gdGhpcy5tYXg7XG4gICAgaWYgKHRoaXMudmFsdWUgPCB0aGlzLm1pbikgdGhpcy52YWx1ZSA9IHRoaXMubWluO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuY2xvc2VkKSByZXR1cm47XG5cbiAgICBpZiAoIXRoaXMuZmlyc3RSZW5kZXIpIHtcbiAgICAgIGlmICh0aGlzLm91dHB1dEVycm9yKSB0aGlzLm91dC53cml0ZShjdXJzb3IuZG93bihsaW5lcyh0aGlzLm91dHB1dEVycm9yLCB0aGlzLm91dC5jb2x1bW5zKSAtIDEpICsgY2xlYXIodGhpcy5vdXRwdXRFcnJvciwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgICAgdGhpcy5vdXQud3JpdGUoY2xlYXIodGhpcy5vdXRwdXRUZXh0LCB0aGlzLm91dC5jb2x1bW5zKSk7XG4gICAgfVxuXG4gICAgc3VwZXIucmVuZGVyKCk7XG4gICAgdGhpcy5vdXRwdXRFcnJvciA9ICcnOyAvLyBQcmludCBwcm9tcHRcblxuICAgIHRoaXMub3V0cHV0VGV4dCA9IFtzdHlsZS5zeW1ib2wodGhpcy5kb25lLCB0aGlzLmFib3J0ZWQpLCBjb2xvci5ib2xkKHRoaXMubXNnKSwgc3R5bGUuZGVsaW1pdGVyKHRoaXMuZG9uZSksICF0aGlzLmRvbmUgfHwgIXRoaXMuZG9uZSAmJiAhdGhpcy5wbGFjZWhvbGRlciA/IGNvbG9yW3RoaXMuY29sb3JdKCkudW5kZXJsaW5lKHRoaXMucmVuZGVyZWQpIDogdGhpcy5yZW5kZXJlZF0uam9pbihgIGApOyAvLyBQcmludCBlcnJvclxuXG4gICAgaWYgKHRoaXMuZXJyb3IpIHtcbiAgICAgIHRoaXMub3V0cHV0RXJyb3IgKz0gdGhpcy5lcnJvck1zZy5zcGxpdChgXFxuYCkucmVkdWNlKChhLCBsLCBpKSA9PiBhICsgYFxcbiR7aSA/IGAgYCA6IGZpZ3VyZXMucG9pbnRlclNtYWxsfSAke2NvbG9yLnJlZCgpLml0YWxpYyhsKX1gLCBgYCk7XG4gICAgfVxuXG4gICAgdGhpcy5vdXQud3JpdGUoZXJhc2UubGluZSArIGN1cnNvci50bygwKSArIHRoaXMub3V0cHV0VGV4dCArIGN1cnNvci5zYXZlICsgdGhpcy5vdXRwdXRFcnJvciArIGN1cnNvci5yZXN0b3JlKTtcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyUHJvbXB0OyIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNvbG9yID0gcmVxdWlyZSgna2xldXInKTtcblxuY29uc3QgX3JlcXVpcmUgPSByZXF1aXJlKCdzaXN0ZXJhbnNpJyksXG4gICAgICBjdXJzb3IgPSBfcmVxdWlyZS5jdXJzb3I7XG5cbmNvbnN0IFByb21wdCA9IHJlcXVpcmUoJy4vcHJvbXB0Jyk7XG5cbmNvbnN0IF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4uL3V0aWwnKSxcbiAgICAgIGNsZWFyID0gX3JlcXVpcmUyLmNsZWFyLFxuICAgICAgZmlndXJlcyA9IF9yZXF1aXJlMi5maWd1cmVzLFxuICAgICAgc3R5bGUgPSBfcmVxdWlyZTIuc3R5bGUsXG4gICAgICB3cmFwID0gX3JlcXVpcmUyLndyYXAsXG4gICAgICBlbnRyaWVzVG9EaXNwbGF5ID0gX3JlcXVpcmUyLmVudHJpZXNUb0Rpc3BsYXk7XG4vKipcbiAqIE11bHRpc2VsZWN0UHJvbXB0IEJhc2UgRWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG9wdHMubWVzc2FnZSBNZXNzYWdlXG4gKiBAcGFyYW0ge0FycmF5fSBvcHRzLmNob2ljZXMgQXJyYXkgb2YgY2hvaWNlIG9iamVjdHNcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5oaW50XSBIaW50IHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy53YXJuXSBIaW50IHNob3duIGZvciBkaXNhYmxlZCBjaG9pY2VzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMubWF4XSBNYXggY2hvaWNlc1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmN1cnNvcj0wXSBDdXJzb3Igc3RhcnQgcG9zaXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5vcHRpb25zUGVyUGFnZT0xMF0gTWF4IG9wdGlvbnMgdG8gZGlzcGxheSBhdCBvbmNlXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqL1xuXG5cbmNsYXNzIE11bHRpc2VsZWN0UHJvbXB0IGV4dGVuZHMgUHJvbXB0IHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy5tc2cgPSBvcHRzLm1lc3NhZ2U7XG4gICAgdGhpcy5jdXJzb3IgPSBvcHRzLmN1cnNvciB8fCAwO1xuICAgIHRoaXMuc2Nyb2xsSW5kZXggPSBvcHRzLmN1cnNvciB8fCAwO1xuICAgIHRoaXMuaGludCA9IG9wdHMuaGludCB8fCAnJztcbiAgICB0aGlzLndhcm4gPSBvcHRzLndhcm4gfHwgJy0gVGhpcyBvcHRpb24gaXMgZGlzYWJsZWQgLSc7XG4gICAgdGhpcy5taW5TZWxlY3RlZCA9IG9wdHMubWluO1xuICAgIHRoaXMuc2hvd01pbkVycm9yID0gZmFsc2U7XG4gICAgdGhpcy5tYXhDaG9pY2VzID0gb3B0cy5tYXg7XG4gICAgdGhpcy5pbnN0cnVjdGlvbnMgPSBvcHRzLmluc3RydWN0aW9ucztcbiAgICB0aGlzLm9wdGlvbnNQZXJQYWdlID0gb3B0cy5vcHRpb25zUGVyUGFnZSB8fCAxMDtcbiAgICB0aGlzLnZhbHVlID0gb3B0cy5jaG9pY2VzLm1hcCgoY2gsIGlkeCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBjaCA9PT0gJ3N0cmluZycpIGNoID0ge1xuICAgICAgICB0aXRsZTogY2gsXG4gICAgICAgIHZhbHVlOiBpZHhcbiAgICAgIH07XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0aXRsZTogY2ggJiYgKGNoLnRpdGxlIHx8IGNoLnZhbHVlIHx8IGNoKSxcbiAgICAgICAgZGVzY3JpcHRpb246IGNoICYmIGNoLmRlc2NyaXB0aW9uLFxuICAgICAgICB2YWx1ZTogY2ggJiYgKGNoLnZhbHVlID09PSB1bmRlZmluZWQgPyBpZHggOiBjaC52YWx1ZSksXG4gICAgICAgIHNlbGVjdGVkOiBjaCAmJiBjaC5zZWxlY3RlZCxcbiAgICAgICAgZGlzYWJsZWQ6IGNoICYmIGNoLmRpc2FibGVkXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHRoaXMuY2xlYXIgPSBjbGVhcignJywgdGhpcy5vdXQuY29sdW1ucyk7XG5cbiAgICBpZiAoIW9wdHMub3ZlcnJpZGVSZW5kZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy52YWx1ZS5tYXAodiA9PiAhdi5zZWxlY3RlZCk7XG4gICAgdGhpcy5jdXJzb3IgPSAwO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBzZWxlY3RlZCgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZS5maWx0ZXIodiA9PiB2LnNlbGVjdGVkKTtcbiAgfVxuXG4gIGV4aXQoKSB7XG4gICAgdGhpcy5hYm9ydCgpO1xuICB9XG5cbiAgYWJvcnQoKSB7XG4gICAgdGhpcy5kb25lID0gdGhpcy5hYm9ydGVkID0gdHJ1ZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICBzdWJtaXQoKSB7XG4gICAgY29uc3Qgc2VsZWN0ZWQgPSB0aGlzLnZhbHVlLmZpbHRlcihlID0+IGUuc2VsZWN0ZWQpO1xuXG4gICAgaWYgKHRoaXMubWluU2VsZWN0ZWQgJiYgc2VsZWN0ZWQubGVuZ3RoIDwgdGhpcy5taW5TZWxlY3RlZCkge1xuICAgICAgdGhpcy5zaG93TWluRXJyb3IgPSB0cnVlO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICAgIHRoaXMuYWJvcnRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5maXJlKCk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZpcnN0KCkge1xuICAgIHRoaXMuY3Vyc29yID0gMDtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbGFzdCgpIHtcbiAgICB0aGlzLmN1cnNvciA9IHRoaXMudmFsdWUubGVuZ3RoIC0gMTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbmV4dCgpIHtcbiAgICB0aGlzLmN1cnNvciA9ICh0aGlzLmN1cnNvciArIDEpICUgdGhpcy52YWx1ZS5sZW5ndGg7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIGlmICh0aGlzLmN1cnNvciA9PT0gMCkge1xuICAgICAgdGhpcy5jdXJzb3IgPSB0aGlzLnZhbHVlLmxlbmd0aCAtIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3Vyc29yLS07XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yID09PSB0aGlzLnZhbHVlLmxlbmd0aCAtIDEpIHtcbiAgICAgIHRoaXMuY3Vyc29yID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jdXJzb3IrKztcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbGVmdCgpIHtcbiAgICB0aGlzLnZhbHVlW3RoaXMuY3Vyc29yXS5zZWxlY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByaWdodCgpIHtcbiAgICBpZiAodGhpcy52YWx1ZS5maWx0ZXIoZSA9PiBlLnNlbGVjdGVkKS5sZW5ndGggPj0gdGhpcy5tYXhDaG9pY2VzKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy52YWx1ZVt0aGlzLmN1cnNvcl0uc2VsZWN0ZWQgPSB0cnVlO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBoYW5kbGVTcGFjZVRvZ2dsZSgpIHtcbiAgICBjb25zdCB2ID0gdGhpcy52YWx1ZVt0aGlzLmN1cnNvcl07XG5cbiAgICBpZiAodi5zZWxlY3RlZCkge1xuICAgICAgdi5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9IGVsc2UgaWYgKHYuZGlzYWJsZWQgfHwgdGhpcy52YWx1ZS5maWx0ZXIoZSA9PiBlLnNlbGVjdGVkKS5sZW5ndGggPj0gdGhpcy5tYXhDaG9pY2VzKSB7XG4gICAgICByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHYuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gIH1cblxuICB0b2dnbGVBbGwoKSB7XG4gICAgaWYgKHRoaXMubWF4Q2hvaWNlcyAhPT0gdW5kZWZpbmVkIHx8IHRoaXMudmFsdWVbdGhpcy5jdXJzb3JdLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgfVxuXG4gICAgY29uc3QgbmV3U2VsZWN0ZWQgPSAhdGhpcy52YWx1ZVt0aGlzLmN1cnNvcl0uc2VsZWN0ZWQ7XG4gICAgdGhpcy52YWx1ZS5maWx0ZXIodiA9PiAhdi5kaXNhYmxlZCkuZm9yRWFjaCh2ID0+IHYuc2VsZWN0ZWQgPSBuZXdTZWxlY3RlZCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIF8oYywga2V5KSB7XG4gICAgaWYgKGMgPT09ICcgJykge1xuICAgICAgdGhpcy5oYW5kbGVTcGFjZVRvZ2dsZSgpO1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gJ2EnKSB7XG4gICAgICB0aGlzLnRvZ2dsZUFsbCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVySW5zdHJ1Y3Rpb25zKCkge1xuICAgIGlmICh0aGlzLmluc3RydWN0aW9ucyA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuaW5zdHJ1Y3Rpb25zKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuaW5zdHJ1Y3Rpb25zID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnN0cnVjdGlvbnM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAnXFxuSW5zdHJ1Y3Rpb25zOlxcbicgKyBgICAgICR7ZmlndXJlcy5hcnJvd1VwfS8ke2ZpZ3VyZXMuYXJyb3dEb3dufTogSGlnaGxpZ2h0IG9wdGlvblxcbmAgKyBgICAgICR7ZmlndXJlcy5hcnJvd0xlZnR9LyR7ZmlndXJlcy5hcnJvd1JpZ2h0fS9bc3BhY2VdOiBUb2dnbGUgc2VsZWN0aW9uXFxuYCArICh0aGlzLm1heENob2ljZXMgPT09IHVuZGVmaW5lZCA/IGAgICAgYTogVG9nZ2xlIGFsbFxcbmAgOiAnJykgKyBgICAgIGVudGVyL3JldHVybjogQ29tcGxldGUgYW5zd2VyYDtcbiAgICB9XG5cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICByZW5kZXJPcHRpb24oY3Vyc29yLCB2LCBpLCBhcnJvd0luZGljYXRvcikge1xuICAgIGNvbnN0IHByZWZpeCA9ICh2LnNlbGVjdGVkID8gY29sb3IuZ3JlZW4oZmlndXJlcy5yYWRpb09uKSA6IGZpZ3VyZXMucmFkaW9PZmYpICsgJyAnICsgYXJyb3dJbmRpY2F0b3IgKyAnICc7XG4gICAgbGV0IHRpdGxlLCBkZXNjO1xuXG4gICAgaWYgKHYuZGlzYWJsZWQpIHtcbiAgICAgIHRpdGxlID0gY3Vyc29yID09PSBpID8gY29sb3IuZ3JheSgpLnVuZGVybGluZSh2LnRpdGxlKSA6IGNvbG9yLnN0cmlrZXRocm91Z2goKS5ncmF5KHYudGl0bGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aXRsZSA9IGN1cnNvciA9PT0gaSA/IGNvbG9yLmN5YW4oKS51bmRlcmxpbmUodi50aXRsZSkgOiB2LnRpdGxlO1xuXG4gICAgICBpZiAoY3Vyc29yID09PSBpICYmIHYuZGVzY3JpcHRpb24pIHtcbiAgICAgICAgZGVzYyA9IGAgLSAke3YuZGVzY3JpcHRpb259YDtcblxuICAgICAgICBpZiAocHJlZml4Lmxlbmd0aCArIHRpdGxlLmxlbmd0aCArIGRlc2MubGVuZ3RoID49IHRoaXMub3V0LmNvbHVtbnMgfHwgdi5kZXNjcmlwdGlvbi5zcGxpdCgvXFxyP1xcbi8pLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBkZXNjID0gJ1xcbicgKyB3cmFwKHYuZGVzY3JpcHRpb24sIHtcbiAgICAgICAgICAgIG1hcmdpbjogcHJlZml4Lmxlbmd0aCxcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLm91dC5jb2x1bW5zXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4ICsgdGl0bGUgKyBjb2xvci5ncmF5KGRlc2MgfHwgJycpO1xuICB9IC8vIHNoYXJlZCB3aXRoIGF1dG9jb21wbGV0ZU11bHRpc2VsZWN0XG5cblxuICBwYWdpbmF0ZU9wdGlvbnMob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGNvbG9yLnJlZCgnTm8gbWF0Y2hlcyBmb3IgdGhpcyBxdWVyeS4nKTtcbiAgICB9XG5cbiAgICBsZXQgX2VudHJpZXNUb0Rpc3BsYXkgPSBlbnRyaWVzVG9EaXNwbGF5KHRoaXMuY3Vyc29yLCBvcHRpb25zLmxlbmd0aCwgdGhpcy5vcHRpb25zUGVyUGFnZSksXG4gICAgICAgIHN0YXJ0SW5kZXggPSBfZW50cmllc1RvRGlzcGxheS5zdGFydEluZGV4LFxuICAgICAgICBlbmRJbmRleCA9IF9lbnRyaWVzVG9EaXNwbGF5LmVuZEluZGV4O1xuXG4gICAgbGV0IHByZWZpeCxcbiAgICAgICAgc3R5bGVkT3B0aW9ucyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0SW5kZXg7IGkgPCBlbmRJbmRleDsgaSsrKSB7XG4gICAgICBpZiAoaSA9PT0gc3RhcnRJbmRleCAmJiBzdGFydEluZGV4ID4gMCkge1xuICAgICAgICBwcmVmaXggPSBmaWd1cmVzLmFycm93VXA7XG4gICAgICB9IGVsc2UgaWYgKGkgPT09IGVuZEluZGV4IC0gMSAmJiBlbmRJbmRleCA8IG9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgIHByZWZpeCA9IGZpZ3VyZXMuYXJyb3dEb3duO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJlZml4ID0gJyAnO1xuICAgICAgfVxuXG4gICAgICBzdHlsZWRPcHRpb25zLnB1c2godGhpcy5yZW5kZXJPcHRpb24odGhpcy5jdXJzb3IsIG9wdGlvbnNbaV0sIGksIHByZWZpeCkpO1xuICAgIH1cblxuICAgIHJldHVybiAnXFxuJyArIHN0eWxlZE9wdGlvbnMuam9pbignXFxuJyk7XG4gIH0gLy8gc2hhcmVkIHdpdGggYXV0b2NvbWxldGVNdWx0aXNlbGVjdFxuXG5cbiAgcmVuZGVyT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgaWYgKCF0aGlzLmRvbmUpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhZ2luYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICByZW5kZXJEb25lT3JJbnN0cnVjdGlvbnMoKSB7XG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWUuZmlsdGVyKGUgPT4gZS5zZWxlY3RlZCkubWFwKHYgPT4gdi50aXRsZSkuam9pbignLCAnKTtcbiAgICB9XG5cbiAgICBjb25zdCBvdXRwdXQgPSBbY29sb3IuZ3JheSh0aGlzLmhpbnQpLCB0aGlzLnJlbmRlckluc3RydWN0aW9ucygpXTtcblxuICAgIGlmICh0aGlzLnZhbHVlW3RoaXMuY3Vyc29yXS5kaXNhYmxlZCkge1xuICAgICAgb3V0cHV0LnB1c2goY29sb3IueWVsbG93KHRoaXMud2FybikpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQuam9pbignICcpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLmNsb3NlZCkgcmV0dXJuO1xuICAgIGlmICh0aGlzLmZpcnN0UmVuZGVyKSB0aGlzLm91dC53cml0ZShjdXJzb3IuaGlkZSk7XG4gICAgc3VwZXIucmVuZGVyKCk7IC8vIHByaW50IHByb21wdFxuXG4gICAgbGV0IHByb21wdCA9IFtzdHlsZS5zeW1ib2wodGhpcy5kb25lLCB0aGlzLmFib3J0ZWQpLCBjb2xvci5ib2xkKHRoaXMubXNnKSwgc3R5bGUuZGVsaW1pdGVyKGZhbHNlKSwgdGhpcy5yZW5kZXJEb25lT3JJbnN0cnVjdGlvbnMoKV0uam9pbignICcpO1xuXG4gICAgaWYgKHRoaXMuc2hvd01pbkVycm9yKSB7XG4gICAgICBwcm9tcHQgKz0gY29sb3IucmVkKGBZb3UgbXVzdCBzZWxlY3QgYSBtaW5pbXVtIG9mICR7dGhpcy5taW5TZWxlY3RlZH0gY2hvaWNlcy5gKTtcbiAgICAgIHRoaXMuc2hvd01pbkVycm9yID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJvbXB0ICs9IHRoaXMucmVuZGVyT3B0aW9ucyh0aGlzLnZhbHVlKTtcbiAgICB0aGlzLm91dC53cml0ZSh0aGlzLmNsZWFyICsgcHJvbXB0KTtcbiAgICB0aGlzLmNsZWFyID0gY2xlYXIocHJvbXB0LCB0aGlzLm91dC5jb2x1bW5zKTtcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gTXVsdGlzZWxlY3RQcm9tcHQ7IiwgIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH1cblxuY29uc3QgY29sb3IgPSByZXF1aXJlKCdrbGV1cicpO1xuXG5jb25zdCBQcm9tcHQgPSByZXF1aXJlKCcuL3Byb21wdCcpO1xuXG5jb25zdCBfcmVxdWlyZSA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKSxcbiAgICAgIGVyYXNlID0gX3JlcXVpcmUuZXJhc2UsXG4gICAgICBjdXJzb3IgPSBfcmVxdWlyZS5jdXJzb3I7XG5cbmNvbnN0IF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4uL3V0aWwnKSxcbiAgICAgIHN0eWxlID0gX3JlcXVpcmUyLnN0eWxlLFxuICAgICAgY2xlYXIgPSBfcmVxdWlyZTIuY2xlYXIsXG4gICAgICBmaWd1cmVzID0gX3JlcXVpcmUyLmZpZ3VyZXMsXG4gICAgICB3cmFwID0gX3JlcXVpcmUyLndyYXAsXG4gICAgICBlbnRyaWVzVG9EaXNwbGF5ID0gX3JlcXVpcmUyLmVudHJpZXNUb0Rpc3BsYXk7XG5cbmNvbnN0IGdldFZhbCA9IChhcnIsIGkpID0+IGFycltpXSAmJiAoYXJyW2ldLnZhbHVlIHx8IGFycltpXS50aXRsZSB8fCBhcnJbaV0pO1xuXG5jb25zdCBnZXRUaXRsZSA9IChhcnIsIGkpID0+IGFycltpXSAmJiAoYXJyW2ldLnRpdGxlIHx8IGFycltpXS52YWx1ZSB8fCBhcnJbaV0pO1xuXG5jb25zdCBnZXRJbmRleCA9IChhcnIsIHZhbE9yVGl0bGUpID0+IHtcbiAgY29uc3QgaW5kZXggPSBhcnIuZmluZEluZGV4KGVsID0+IGVsLnZhbHVlID09PSB2YWxPclRpdGxlIHx8IGVsLnRpdGxlID09PSB2YWxPclRpdGxlKTtcbiAgcmV0dXJuIGluZGV4ID4gLTEgPyBpbmRleCA6IHVuZGVmaW5lZDtcbn07XG4vKipcbiAqIFRleHRQcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7QXJyYXl9IG9wdHMuY2hvaWNlcyBBcnJheSBvZiBhdXRvLWNvbXBsZXRlIGNob2ljZXMgb2JqZWN0c1xuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMuc3VnZ2VzdF0gRmlsdGVyIGZ1bmN0aW9uLiBEZWZhdWx0cyB0byBzb3J0IGJ5IHRpdGxlXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMubGltaXQ9MTBdIE1heCBudW1iZXIgb2YgcmVzdWx0cyB0byBzaG93XG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMuY3Vyc29yPTBdIEN1cnNvciBzdGFydCBwb3NpdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLnN0eWxlPSdkZWZhdWx0J10gUmVuZGVyIHN0eWxlXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuZmFsbGJhY2tdIEZhbGxiYWNrIG1lc3NhZ2UgLSBpbml0aWFsIHRvIGRlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5pbml0aWFsXSBJbmRleCBvZiB0aGUgZGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0cy5jbGVhckZpcnN0XSBUaGUgZmlyc3QgRVNDQVBFIGtleXByZXNzIHdpbGwgY2xlYXIgdGhlIGlucHV0XG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5ub01hdGNoZXNdIFRoZSBubyBtYXRjaGVzIGZvdW5kIGxhYmVsXG4gKi9cblxuXG5jbGFzcyBBdXRvY29tcGxldGVQcm9tcHQgZXh0ZW5kcyBQcm9tcHQge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgICB0aGlzLm1zZyA9IG9wdHMubWVzc2FnZTtcbiAgICB0aGlzLnN1Z2dlc3QgPSBvcHRzLnN1Z2dlc3Q7XG4gICAgdGhpcy5jaG9pY2VzID0gb3B0cy5jaG9pY2VzO1xuICAgIHRoaXMuaW5pdGlhbCA9IHR5cGVvZiBvcHRzLmluaXRpYWwgPT09ICdudW1iZXInID8gb3B0cy5pbml0aWFsIDogZ2V0SW5kZXgob3B0cy5jaG9pY2VzLCBvcHRzLmluaXRpYWwpO1xuICAgIHRoaXMuc2VsZWN0ID0gdGhpcy5pbml0aWFsIHx8IG9wdHMuY3Vyc29yIHx8IDA7XG4gICAgdGhpcy5pMThuID0ge1xuICAgICAgbm9NYXRjaGVzOiBvcHRzLm5vTWF0Y2hlcyB8fCAnbm8gbWF0Y2hlcyBmb3VuZCdcbiAgICB9O1xuICAgIHRoaXMuZmFsbGJhY2sgPSBvcHRzLmZhbGxiYWNrIHx8IHRoaXMuaW5pdGlhbDtcbiAgICB0aGlzLmNsZWFyRmlyc3QgPSBvcHRzLmNsZWFyRmlyc3QgfHwgZmFsc2U7XG4gICAgdGhpcy5zdWdnZXN0aW9ucyA9IFtdO1xuICAgIHRoaXMuaW5wdXQgPSAnJztcbiAgICB0aGlzLmxpbWl0ID0gb3B0cy5saW1pdCB8fCAxMDtcbiAgICB0aGlzLmN1cnNvciA9IDA7XG4gICAgdGhpcy50cmFuc2Zvcm0gPSBzdHlsZS5yZW5kZXIob3B0cy5zdHlsZSk7XG4gICAgdGhpcy5zY2FsZSA9IHRoaXMudHJhbnNmb3JtLnNjYWxlO1xuICAgIHRoaXMucmVuZGVyID0gdGhpcy5yZW5kZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNvbXBsZXRlID0gdGhpcy5jb21wbGV0ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2xlYXIgPSBjbGVhcignJywgdGhpcy5vdXQuY29sdW1ucyk7XG4gICAgdGhpcy5jb21wbGV0ZSh0aGlzLnJlbmRlcik7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHNldCBmYWxsYmFjayhmYikge1xuICAgIHRoaXMuX2ZiID0gTnVtYmVyLmlzU2FmZUludGVnZXIocGFyc2VJbnQoZmIpKSA/IHBhcnNlSW50KGZiKSA6IGZiO1xuICB9XG5cbiAgZ2V0IGZhbGxiYWNrKCkge1xuICAgIGxldCBjaG9pY2U7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl9mYiA9PT0gJ251bWJlcicpIGNob2ljZSA9IHRoaXMuY2hvaWNlc1t0aGlzLl9mYl07ZWxzZSBpZiAodHlwZW9mIHRoaXMuX2ZiID09PSAnc3RyaW5nJykgY2hvaWNlID0ge1xuICAgICAgdGl0bGU6IHRoaXMuX2ZiXG4gICAgfTtcbiAgICByZXR1cm4gY2hvaWNlIHx8IHRoaXMuX2ZiIHx8IHtcbiAgICAgIHRpdGxlOiB0aGlzLmkxOG4ubm9NYXRjaGVzXG4gICAgfTtcbiAgfVxuXG4gIG1vdmVTZWxlY3QoaSkge1xuICAgIHRoaXMuc2VsZWN0ID0gaTtcbiAgICBpZiAodGhpcy5zdWdnZXN0aW9ucy5sZW5ndGggPiAwKSB0aGlzLnZhbHVlID0gZ2V0VmFsKHRoaXMuc3VnZ2VzdGlvbnMsIGkpO2Vsc2UgdGhpcy52YWx1ZSA9IHRoaXMuZmFsbGJhY2sudmFsdWU7XG4gICAgdGhpcy5maXJlKCk7XG4gIH1cblxuICBjb21wbGV0ZShjYikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoZnVuY3Rpb24qICgpIHtcbiAgICAgIGNvbnN0IHAgPSBfdGhpcy5jb21wbGV0aW5nID0gX3RoaXMuc3VnZ2VzdChfdGhpcy5pbnB1dCwgX3RoaXMuY2hvaWNlcyk7XG5cbiAgICAgIGNvbnN0IHN1Z2dlc3Rpb25zID0geWllbGQgcDtcbiAgICAgIGlmIChfdGhpcy5jb21wbGV0aW5nICE9PSBwKSByZXR1cm47XG4gICAgICBfdGhpcy5zdWdnZXN0aW9ucyA9IHN1Z2dlc3Rpb25zLm1hcCgocywgaSwgYXJyKSA9PiAoe1xuICAgICAgICB0aXRsZTogZ2V0VGl0bGUoYXJyLCBpKSxcbiAgICAgICAgdmFsdWU6IGdldFZhbChhcnIsIGkpLFxuICAgICAgICBkZXNjcmlwdGlvbjogcy5kZXNjcmlwdGlvblxuICAgICAgfSkpO1xuICAgICAgX3RoaXMuY29tcGxldGluZyA9IGZhbHNlO1xuICAgICAgY29uc3QgbCA9IE1hdGgubWF4KHN1Z2dlc3Rpb25zLmxlbmd0aCAtIDEsIDApO1xuXG4gICAgICBfdGhpcy5tb3ZlU2VsZWN0KE1hdGgubWluKGwsIF90aGlzLnNlbGVjdCkpO1xuXG4gICAgICBjYiAmJiBjYigpO1xuICAgIH0pKCk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLmlucHV0ID0gJyc7XG4gICAgdGhpcy5jb21wbGV0ZSgoKSA9PiB7XG4gICAgICB0aGlzLm1vdmVTZWxlY3QodGhpcy5pbml0aWFsICE9PSB2b2lkIDAgPyB0aGlzLmluaXRpYWwgOiAwKTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGV4aXQoKSB7XG4gICAgaWYgKHRoaXMuY2xlYXJGaXJzdCAmJiB0aGlzLmlucHV0Lmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kb25lID0gdGhpcy5leGl0ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5hYm9ydGVkID0gZmFsc2U7XG4gICAgICB0aGlzLmZpcmUoKTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICB0aGlzLm91dC53cml0ZSgnXFxuJyk7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgYWJvcnQoKSB7XG4gICAgdGhpcy5kb25lID0gdGhpcy5hYm9ydGVkID0gdHJ1ZTtcbiAgICB0aGlzLmV4aXRlZCA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIHN1Ym1pdCgpIHtcbiAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgIHRoaXMuYWJvcnRlZCA9IHRoaXMuZXhpdGVkID0gZmFsc2U7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm91dC53cml0ZSgnXFxuJyk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgXyhjLCBrZXkpIHtcbiAgICBsZXQgczEgPSB0aGlzLmlucHV0LnNsaWNlKDAsIHRoaXMuY3Vyc29yKTtcbiAgICBsZXQgczIgPSB0aGlzLmlucHV0LnNsaWNlKHRoaXMuY3Vyc29yKTtcbiAgICB0aGlzLmlucHV0ID0gYCR7czF9JHtjfSR7czJ9YDtcbiAgICB0aGlzLmN1cnNvciA9IHMxLmxlbmd0aCArIDE7XG4gICAgdGhpcy5jb21wbGV0ZSh0aGlzLnJlbmRlcik7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRlbGV0ZSgpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IgPT09IDApIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICBsZXQgczEgPSB0aGlzLmlucHV0LnNsaWNlKDAsIHRoaXMuY3Vyc29yIC0gMSk7XG4gICAgbGV0IHMyID0gdGhpcy5pbnB1dC5zbGljZSh0aGlzLmN1cnNvcik7XG4gICAgdGhpcy5pbnB1dCA9IGAke3MxfSR7czJ9YDtcbiAgICB0aGlzLmNvbXBsZXRlKHRoaXMucmVuZGVyKTtcbiAgICB0aGlzLmN1cnNvciA9IHRoaXMuY3Vyc29yIC0gMTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZGVsZXRlRm9yd2FyZCgpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IgKiB0aGlzLnNjYWxlID49IHRoaXMucmVuZGVyZWQubGVuZ3RoKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgbGV0IHMxID0gdGhpcy5pbnB1dC5zbGljZSgwLCB0aGlzLmN1cnNvcik7XG4gICAgbGV0IHMyID0gdGhpcy5pbnB1dC5zbGljZSh0aGlzLmN1cnNvciArIDEpO1xuICAgIHRoaXMuaW5wdXQgPSBgJHtzMX0ke3MyfWA7XG4gICAgdGhpcy5jb21wbGV0ZSh0aGlzLnJlbmRlcik7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGZpcnN0KCkge1xuICAgIHRoaXMubW92ZVNlbGVjdCgwKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbGFzdCgpIHtcbiAgICB0aGlzLm1vdmVTZWxlY3QodGhpcy5zdWdnZXN0aW9ucy5sZW5ndGggLSAxKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0ID09PSAwKSB7XG4gICAgICB0aGlzLm1vdmVTZWxlY3QodGhpcy5zdWdnZXN0aW9ucy5sZW5ndGggLSAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tb3ZlU2VsZWN0KHRoaXMuc2VsZWN0IC0gMSk7XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0ID09PSB0aGlzLnN1Z2dlc3Rpb25zLmxlbmd0aCAtIDEpIHtcbiAgICAgIHRoaXMubW92ZVNlbGVjdCgwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tb3ZlU2VsZWN0KHRoaXMuc2VsZWN0ICsgMSk7XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0ID09PSB0aGlzLnN1Z2dlc3Rpb25zLmxlbmd0aCAtIDEpIHtcbiAgICAgIHRoaXMubW92ZVNlbGVjdCgwKTtcbiAgICB9IGVsc2UgdGhpcy5tb3ZlU2VsZWN0KHRoaXMuc2VsZWN0ICsgMSk7XG5cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbmV4dFBhZ2UoKSB7XG4gICAgdGhpcy5tb3ZlU2VsZWN0KE1hdGgubWluKHRoaXMuc2VsZWN0ICsgdGhpcy5saW1pdCwgdGhpcy5zdWdnZXN0aW9ucy5sZW5ndGggLSAxKSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHByZXZQYWdlKCkge1xuICAgIHRoaXMubW92ZVNlbGVjdChNYXRoLm1heCh0aGlzLnNlbGVjdCAtIHRoaXMubGltaXQsIDApKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbGVmdCgpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IgPD0gMCkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMuY3Vyc29yID0gdGhpcy5jdXJzb3IgLSAxO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByaWdodCgpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IgKiB0aGlzLnNjYWxlID49IHRoaXMucmVuZGVyZWQubGVuZ3RoKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy5jdXJzb3IgPSB0aGlzLmN1cnNvciArIDE7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHJlbmRlck9wdGlvbih2LCBob3ZlcmVkLCBpc1N0YXJ0LCBpc0VuZCkge1xuICAgIGxldCBkZXNjO1xuICAgIGxldCBwcmVmaXggPSBpc1N0YXJ0ID8gZmlndXJlcy5hcnJvd1VwIDogaXNFbmQgPyBmaWd1cmVzLmFycm93RG93biA6ICcgJztcbiAgICBsZXQgdGl0bGUgPSBob3ZlcmVkID8gY29sb3IuY3lhbigpLnVuZGVybGluZSh2LnRpdGxlKSA6IHYudGl0bGU7XG4gICAgcHJlZml4ID0gKGhvdmVyZWQgPyBjb2xvci5jeWFuKGZpZ3VyZXMucG9pbnRlcikgKyAnICcgOiAnICAnKSArIHByZWZpeDtcblxuICAgIGlmICh2LmRlc2NyaXB0aW9uKSB7XG4gICAgICBkZXNjID0gYCAtICR7di5kZXNjcmlwdGlvbn1gO1xuXG4gICAgICBpZiAocHJlZml4Lmxlbmd0aCArIHRpdGxlLmxlbmd0aCArIGRlc2MubGVuZ3RoID49IHRoaXMub3V0LmNvbHVtbnMgfHwgdi5kZXNjcmlwdGlvbi5zcGxpdCgvXFxyP1xcbi8pLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZGVzYyA9ICdcXG4nICsgd3JhcCh2LmRlc2NyaXB0aW9uLCB7XG4gICAgICAgICAgbWFyZ2luOiAzLFxuICAgICAgICAgIHdpZHRoOiB0aGlzLm91dC5jb2x1bW5zXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwcmVmaXggKyAnICcgKyB0aXRsZSArIGNvbG9yLmdyYXkoZGVzYyB8fCAnJyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuY2xvc2VkKSByZXR1cm47XG4gICAgaWYgKHRoaXMuZmlyc3RSZW5kZXIpIHRoaXMub3V0LndyaXRlKGN1cnNvci5oaWRlKTtlbHNlIHRoaXMub3V0LndyaXRlKGNsZWFyKHRoaXMub3V0cHV0VGV4dCwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgIHN1cGVyLnJlbmRlcigpO1xuXG4gICAgbGV0IF9lbnRyaWVzVG9EaXNwbGF5ID0gZW50cmllc1RvRGlzcGxheSh0aGlzLnNlbGVjdCwgdGhpcy5jaG9pY2VzLmxlbmd0aCwgdGhpcy5saW1pdCksXG4gICAgICAgIHN0YXJ0SW5kZXggPSBfZW50cmllc1RvRGlzcGxheS5zdGFydEluZGV4LFxuICAgICAgICBlbmRJbmRleCA9IF9lbnRyaWVzVG9EaXNwbGF5LmVuZEluZGV4O1xuXG4gICAgdGhpcy5vdXRwdXRUZXh0ID0gW3N0eWxlLnN5bWJvbCh0aGlzLmRvbmUsIHRoaXMuYWJvcnRlZCwgdGhpcy5leGl0ZWQpLCBjb2xvci5ib2xkKHRoaXMubXNnKSwgc3R5bGUuZGVsaW1pdGVyKHRoaXMuY29tcGxldGluZyksIHRoaXMuZG9uZSAmJiB0aGlzLnN1Z2dlc3Rpb25zW3RoaXMuc2VsZWN0XSA/IHRoaXMuc3VnZ2VzdGlvbnNbdGhpcy5zZWxlY3RdLnRpdGxlIDogdGhpcy5yZW5kZXJlZCA9IHRoaXMudHJhbnNmb3JtLnJlbmRlcih0aGlzLmlucHV0KV0uam9pbignICcpO1xuXG4gICAgaWYgKCF0aGlzLmRvbmUpIHtcbiAgICAgIGNvbnN0IHN1Z2dlc3Rpb25zID0gdGhpcy5zdWdnZXN0aW9ucy5zbGljZShzdGFydEluZGV4LCBlbmRJbmRleCkubWFwKChpdGVtLCBpKSA9PiB0aGlzLnJlbmRlck9wdGlvbihpdGVtLCB0aGlzLnNlbGVjdCA9PT0gaSArIHN0YXJ0SW5kZXgsIGkgPT09IDAgJiYgc3RhcnRJbmRleCA+IDAsIGkgKyBzdGFydEluZGV4ID09PSBlbmRJbmRleCAtIDEgJiYgZW5kSW5kZXggPCB0aGlzLmNob2ljZXMubGVuZ3RoKSkuam9pbignXFxuJyk7XG4gICAgICB0aGlzLm91dHB1dFRleHQgKz0gYFxcbmAgKyAoc3VnZ2VzdGlvbnMgfHwgY29sb3IuZ3JheSh0aGlzLmZhbGxiYWNrLnRpdGxlKSk7XG4gICAgfVxuXG4gICAgdGhpcy5vdXQud3JpdGUoZXJhc2UubGluZSArIGN1cnNvci50bygwKSArIHRoaXMub3V0cHV0VGV4dCk7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEF1dG9jb21wbGV0ZVByb21wdDsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb2xvciA9IHJlcXVpcmUoJ2tsZXVyJyk7XG5cbmNvbnN0IF9yZXF1aXJlID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpLFxuICAgICAgY3Vyc29yID0gX3JlcXVpcmUuY3Vyc29yO1xuXG5jb25zdCBNdWx0aXNlbGVjdFByb21wdCA9IHJlcXVpcmUoJy4vbXVsdGlzZWxlY3QnKTtcblxuY29uc3QgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi4vdXRpbCcpLFxuICAgICAgY2xlYXIgPSBfcmVxdWlyZTIuY2xlYXIsXG4gICAgICBzdHlsZSA9IF9yZXF1aXJlMi5zdHlsZSxcbiAgICAgIGZpZ3VyZXMgPSBfcmVxdWlyZTIuZmlndXJlcztcbi8qKlxuICogTXVsdGlzZWxlY3RQcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7QXJyYXl9IG9wdHMuY2hvaWNlcyBBcnJheSBvZiBjaG9pY2Ugb2JqZWN0c1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmhpbnRdIEhpbnQgdG8gZGlzcGxheVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLndhcm5dIEhpbnQgc2hvd24gZm9yIGRpc2FibGVkIGNob2ljZXNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5tYXhdIE1heCBjaG9pY2VzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMuY3Vyc29yPTBdIEN1cnNvciBzdGFydCBwb3NpdGlvblxuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKi9cblxuXG5jbGFzcyBBdXRvY29tcGxldGVNdWx0aXNlbGVjdFByb21wdCBleHRlbmRzIE11bHRpc2VsZWN0UHJvbXB0IHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgb3B0cy5vdmVycmlkZVJlbmRlciA9IHRydWU7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy5pbnB1dFZhbHVlID0gJyc7XG4gICAgdGhpcy5jbGVhciA9IGNsZWFyKCcnLCB0aGlzLm91dC5jb2x1bW5zKTtcbiAgICB0aGlzLmZpbHRlcmVkT3B0aW9ucyA9IHRoaXMudmFsdWU7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGxhc3QoKSB7XG4gICAgdGhpcy5jdXJzb3IgPSB0aGlzLmZpbHRlcmVkT3B0aW9ucy5sZW5ndGggLSAxO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBuZXh0KCkge1xuICAgIHRoaXMuY3Vyc29yID0gKHRoaXMuY3Vyc29yICsgMSkgJSB0aGlzLmZpbHRlcmVkT3B0aW9ucy5sZW5ndGg7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIGlmICh0aGlzLmN1cnNvciA9PT0gMCkge1xuICAgICAgdGhpcy5jdXJzb3IgPSB0aGlzLmZpbHRlcmVkT3B0aW9ucy5sZW5ndGggLSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnNvci0tO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIGlmICh0aGlzLmN1cnNvciA9PT0gdGhpcy5maWx0ZXJlZE9wdGlvbnMubGVuZ3RoIC0gMSkge1xuICAgICAgdGhpcy5jdXJzb3IgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnNvcisrO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBsZWZ0KCkge1xuICAgIHRoaXMuZmlsdGVyZWRPcHRpb25zW3RoaXMuY3Vyc29yXS5zZWxlY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByaWdodCgpIHtcbiAgICBpZiAodGhpcy52YWx1ZS5maWx0ZXIoZSA9PiBlLnNlbGVjdGVkKS5sZW5ndGggPj0gdGhpcy5tYXhDaG9pY2VzKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy5maWx0ZXJlZE9wdGlvbnNbdGhpcy5jdXJzb3JdLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZGVsZXRlKCkge1xuICAgIGlmICh0aGlzLmlucHV0VmFsdWUubGVuZ3RoKSB7XG4gICAgICB0aGlzLmlucHV0VmFsdWUgPSB0aGlzLmlucHV0VmFsdWUuc3Vic3RyKDAsIHRoaXMuaW5wdXRWYWx1ZS5sZW5ndGggLSAxKTtcbiAgICAgIHRoaXMudXBkYXRlRmlsdGVyZWRPcHRpb25zKCk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlRmlsdGVyZWRPcHRpb25zKCkge1xuICAgIGNvbnN0IGN1cnJlbnRIaWdobGlnaHQgPSB0aGlzLmZpbHRlcmVkT3B0aW9uc1t0aGlzLmN1cnNvcl07XG4gICAgdGhpcy5maWx0ZXJlZE9wdGlvbnMgPSB0aGlzLnZhbHVlLmZpbHRlcih2ID0+IHtcbiAgICAgIGlmICh0aGlzLmlucHV0VmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2LnRpdGxlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh2LnRpdGxlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXModGhpcy5pbnB1dFZhbHVlLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHYudmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHYudmFsdWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh0aGlzLmlucHV0VmFsdWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gICAgY29uc3QgbmV3SGlnaGxpZ2h0SW5kZXggPSB0aGlzLmZpbHRlcmVkT3B0aW9ucy5maW5kSW5kZXgodiA9PiB2ID09PSBjdXJyZW50SGlnaGxpZ2h0KTtcbiAgICB0aGlzLmN1cnNvciA9IG5ld0hpZ2hsaWdodEluZGV4IDwgMCA/IDAgOiBuZXdIaWdobGlnaHRJbmRleDtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgaGFuZGxlU3BhY2VUb2dnbGUoKSB7XG4gICAgY29uc3QgdiA9IHRoaXMuZmlsdGVyZWRPcHRpb25zW3RoaXMuY3Vyc29yXTtcblxuICAgIGlmICh2LnNlbGVjdGVkKSB7XG4gICAgICB2LnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH0gZWxzZSBpZiAodi5kaXNhYmxlZCB8fCB0aGlzLnZhbHVlLmZpbHRlcihlID0+IGUuc2VsZWN0ZWQpLmxlbmd0aCA+PSB0aGlzLm1heENob2ljZXMpIHtcbiAgICAgIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdi5zZWxlY3RlZCA9IHRydWU7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUlucHV0Q2hhbmdlKGMpIHtcbiAgICB0aGlzLmlucHV0VmFsdWUgPSB0aGlzLmlucHV0VmFsdWUgKyBjO1xuICAgIHRoaXMudXBkYXRlRmlsdGVyZWRPcHRpb25zKCk7XG4gIH1cblxuICBfKGMsIGtleSkge1xuICAgIGlmIChjID09PSAnICcpIHtcbiAgICAgIHRoaXMuaGFuZGxlU3BhY2VUb2dnbGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oYW5kbGVJbnB1dENoYW5nZShjKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJJbnN0cnVjdGlvbnMoKSB7XG4gICAgaWYgKHRoaXMuaW5zdHJ1Y3Rpb25zID09PSB1bmRlZmluZWQgfHwgdGhpcy5pbnN0cnVjdGlvbnMpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5pbnN0cnVjdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluc3RydWN0aW9ucztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGBcbkluc3RydWN0aW9uczpcbiAgICAke2ZpZ3VyZXMuYXJyb3dVcH0vJHtmaWd1cmVzLmFycm93RG93bn06IEhpZ2hsaWdodCBvcHRpb25cbiAgICAke2ZpZ3VyZXMuYXJyb3dMZWZ0fS8ke2ZpZ3VyZXMuYXJyb3dSaWdodH0vW3NwYWNlXTogVG9nZ2xlIHNlbGVjdGlvblxuICAgIFthLGIsY10vZGVsZXRlOiBGaWx0ZXIgY2hvaWNlc1xuICAgIGVudGVyL3JldHVybjogQ29tcGxldGUgYW5zd2VyXG5gO1xuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHJlbmRlckN1cnJlbnRJbnB1dCgpIHtcbiAgICByZXR1cm4gYFxuRmlsdGVyZWQgcmVzdWx0cyBmb3I6ICR7dGhpcy5pbnB1dFZhbHVlID8gdGhpcy5pbnB1dFZhbHVlIDogY29sb3IuZ3JheSgnRW50ZXIgc29tZXRoaW5nIHRvIGZpbHRlcicpfVxcbmA7XG4gIH1cblxuICByZW5kZXJPcHRpb24oY3Vyc29yLCB2LCBpKSB7XG4gICAgbGV0IHRpdGxlO1xuICAgIGlmICh2LmRpc2FibGVkKSB0aXRsZSA9IGN1cnNvciA9PT0gaSA/IGNvbG9yLmdyYXkoKS51bmRlcmxpbmUodi50aXRsZSkgOiBjb2xvci5zdHJpa2V0aHJvdWdoKCkuZ3JheSh2LnRpdGxlKTtlbHNlIHRpdGxlID0gY3Vyc29yID09PSBpID8gY29sb3IuY3lhbigpLnVuZGVybGluZSh2LnRpdGxlKSA6IHYudGl0bGU7XG4gICAgcmV0dXJuICh2LnNlbGVjdGVkID8gY29sb3IuZ3JlZW4oZmlndXJlcy5yYWRpb09uKSA6IGZpZ3VyZXMucmFkaW9PZmYpICsgJyAgJyArIHRpdGxlO1xuICB9XG5cbiAgcmVuZGVyRG9uZU9ySW5zdHJ1Y3Rpb25zKCkge1xuICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlLmZpbHRlcihlID0+IGUuc2VsZWN0ZWQpLm1hcCh2ID0+IHYudGl0bGUpLmpvaW4oJywgJyk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3V0cHV0ID0gW2NvbG9yLmdyYXkodGhpcy5oaW50KSwgdGhpcy5yZW5kZXJJbnN0cnVjdGlvbnMoKSwgdGhpcy5yZW5kZXJDdXJyZW50SW5wdXQoKV07XG5cbiAgICBpZiAodGhpcy5maWx0ZXJlZE9wdGlvbnMubGVuZ3RoICYmIHRoaXMuZmlsdGVyZWRPcHRpb25zW3RoaXMuY3Vyc29yXS5kaXNhYmxlZCkge1xuICAgICAgb3V0cHV0LnB1c2goY29sb3IueWVsbG93KHRoaXMud2FybikpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQuam9pbignICcpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLmNsb3NlZCkgcmV0dXJuO1xuICAgIGlmICh0aGlzLmZpcnN0UmVuZGVyKSB0aGlzLm91dC53cml0ZShjdXJzb3IuaGlkZSk7XG4gICAgc3VwZXIucmVuZGVyKCk7IC8vIHByaW50IHByb21wdFxuXG4gICAgbGV0IHByb21wdCA9IFtzdHlsZS5zeW1ib2wodGhpcy5kb25lLCB0aGlzLmFib3J0ZWQpLCBjb2xvci5ib2xkKHRoaXMubXNnKSwgc3R5bGUuZGVsaW1pdGVyKGZhbHNlKSwgdGhpcy5yZW5kZXJEb25lT3JJbnN0cnVjdGlvbnMoKV0uam9pbignICcpO1xuXG4gICAgaWYgKHRoaXMuc2hvd01pbkVycm9yKSB7XG4gICAgICBwcm9tcHQgKz0gY29sb3IucmVkKGBZb3UgbXVzdCBzZWxlY3QgYSBtaW5pbXVtIG9mICR7dGhpcy5taW5TZWxlY3RlZH0gY2hvaWNlcy5gKTtcbiAgICAgIHRoaXMuc2hvd01pbkVycm9yID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJvbXB0ICs9IHRoaXMucmVuZGVyT3B0aW9ucyh0aGlzLmZpbHRlcmVkT3B0aW9ucyk7XG4gICAgdGhpcy5vdXQud3JpdGUodGhpcy5jbGVhciArIHByb21wdCk7XG4gICAgdGhpcy5jbGVhciA9IGNsZWFyKHByb21wdCwgdGhpcy5vdXQuY29sdW1ucyk7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEF1dG9jb21wbGV0ZU11bHRpc2VsZWN0UHJvbXB0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgY29sb3IgPSByZXF1aXJlKCdrbGV1cicpO1xuXG5jb25zdCBQcm9tcHQgPSByZXF1aXJlKCcuL3Byb21wdCcpO1xuXG5jb25zdCBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uL3V0aWwnKSxcbiAgICAgIHN0eWxlID0gX3JlcXVpcmUuc3R5bGUsXG4gICAgICBjbGVhciA9IF9yZXF1aXJlLmNsZWFyO1xuXG5jb25zdCBfcmVxdWlyZTIgPSByZXF1aXJlKCdzaXN0ZXJhbnNpJyksXG4gICAgICBlcmFzZSA9IF9yZXF1aXJlMi5lcmFzZSxcbiAgICAgIGN1cnNvciA9IF9yZXF1aXJlMi5jdXJzb3I7XG4vKipcbiAqIENvbmZpcm1Qcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdHMuaW5pdGlhbF0gRGVmYXVsdCB2YWx1ZSAodHJ1ZS9mYWxzZSlcbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLnllc10gVGhlIFwiWWVzXCIgbGFiZWxcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy55ZXNPcHRpb25dIFRoZSBcIlllc1wiIG9wdGlvbiB3aGVuIGNob29zaW5nIGJldHdlZW4geWVzL25vXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMubm9dIFRoZSBcIk5vXCIgbGFiZWxcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5ub09wdGlvbl0gVGhlIFwiTm9cIiBvcHRpb24gd2hlbiBjaG9vc2luZyBiZXR3ZWVuIHllcy9ub1xuICovXG5cblxuY2xhc3MgQ29uZmlybVByb21wdCBleHRlbmRzIFByb21wdCB7XG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXMubXNnID0gb3B0cy5tZXNzYWdlO1xuICAgIHRoaXMudmFsdWUgPSBvcHRzLmluaXRpYWw7XG4gICAgdGhpcy5pbml0aWFsVmFsdWUgPSAhIW9wdHMuaW5pdGlhbDtcbiAgICB0aGlzLnllc01zZyA9IG9wdHMueWVzIHx8ICd5ZXMnO1xuICAgIHRoaXMueWVzT3B0aW9uID0gb3B0cy55ZXNPcHRpb24gfHwgJyhZL24pJztcbiAgICB0aGlzLm5vTXNnID0gb3B0cy5ubyB8fCAnbm8nO1xuICAgIHRoaXMubm9PcHRpb24gPSBvcHRzLm5vT3B0aW9uIHx8ICcoeS9OKSc7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLmluaXRpYWxWYWx1ZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZXhpdCgpIHtcbiAgICB0aGlzLmFib3J0KCk7XG4gIH1cblxuICBhYm9ydCgpIHtcbiAgICB0aGlzLmRvbmUgPSB0aGlzLmFib3J0ZWQgPSB0cnVlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIHN1Ym1pdCgpIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZSB8fCBmYWxzZTtcbiAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgIHRoaXMuYWJvcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIF8oYywga2V5KSB7XG4gICAgaWYgKGMudG9Mb3dlckNhc2UoKSA9PT0gJ3knKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzLnN1Ym1pdCgpO1xuICAgIH1cblxuICAgIGlmIChjLnRvTG93ZXJDYXNlKCkgPT09ICduJykge1xuICAgICAgdGhpcy52YWx1ZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRoaXMuc3VibWl0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLmNsb3NlZCkgcmV0dXJuO1xuICAgIGlmICh0aGlzLmZpcnN0UmVuZGVyKSB0aGlzLm91dC53cml0ZShjdXJzb3IuaGlkZSk7ZWxzZSB0aGlzLm91dC53cml0ZShjbGVhcih0aGlzLm91dHB1dFRleHQsIHRoaXMub3V0LmNvbHVtbnMpKTtcbiAgICBzdXBlci5yZW5kZXIoKTtcbiAgICB0aGlzLm91dHB1dFRleHQgPSBbc3R5bGUuc3ltYm9sKHRoaXMuZG9uZSwgdGhpcy5hYm9ydGVkKSwgY29sb3IuYm9sZCh0aGlzLm1zZyksIHN0eWxlLmRlbGltaXRlcih0aGlzLmRvbmUpLCB0aGlzLmRvbmUgPyB0aGlzLnZhbHVlID8gdGhpcy55ZXNNc2cgOiB0aGlzLm5vTXNnIDogY29sb3IuZ3JheSh0aGlzLmluaXRpYWxWYWx1ZSA/IHRoaXMueWVzT3B0aW9uIDogdGhpcy5ub09wdGlvbildLmpvaW4oJyAnKTtcbiAgICB0aGlzLm91dC53cml0ZShlcmFzZS5saW5lICsgY3Vyc29yLnRvKDApICsgdGhpcy5vdXRwdXRUZXh0KTtcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29uZmlybVByb21wdDsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgVGV4dFByb21wdDogcmVxdWlyZSgnLi90ZXh0JyksXG4gIFNlbGVjdFByb21wdDogcmVxdWlyZSgnLi9zZWxlY3QnKSxcbiAgVG9nZ2xlUHJvbXB0OiByZXF1aXJlKCcuL3RvZ2dsZScpLFxuICBEYXRlUHJvbXB0OiByZXF1aXJlKCcuL2RhdGUnKSxcbiAgTnVtYmVyUHJvbXB0OiByZXF1aXJlKCcuL251bWJlcicpLFxuICBNdWx0aXNlbGVjdFByb21wdDogcmVxdWlyZSgnLi9tdWx0aXNlbGVjdCcpLFxuICBBdXRvY29tcGxldGVQcm9tcHQ6IHJlcXVpcmUoJy4vYXV0b2NvbXBsZXRlJyksXG4gIEF1dG9jb21wbGV0ZU11bHRpc2VsZWN0UHJvbXB0OiByZXF1aXJlKCcuL2F1dG9jb21wbGV0ZU11bHRpc2VsZWN0JyksXG4gIENvbmZpcm1Qcm9tcHQ6IHJlcXVpcmUoJy4vY29uZmlybScpXG59OyIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0ICQgPSBleHBvcnRzO1xuXG5jb25zdCBlbCA9IHJlcXVpcmUoJy4vZWxlbWVudHMnKTtcblxuY29uc3Qgbm9vcCA9IHYgPT4gdjtcblxuZnVuY3Rpb24gdG9Qcm9tcHQodHlwZSwgYXJncywgb3B0cyA9IHt9KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzLCByZWopID0+IHtcbiAgICBjb25zdCBwID0gbmV3IGVsW3R5cGVdKGFyZ3MpO1xuICAgIGNvbnN0IG9uQWJvcnQgPSBvcHRzLm9uQWJvcnQgfHwgbm9vcDtcbiAgICBjb25zdCBvblN1Ym1pdCA9IG9wdHMub25TdWJtaXQgfHwgbm9vcDtcbiAgICBjb25zdCBvbkV4aXQgPSBvcHRzLm9uRXhpdCB8fCBub29wO1xuICAgIHAub24oJ3N0YXRlJywgYXJncy5vblN0YXRlIHx8IG5vb3ApO1xuICAgIHAub24oJ3N1Ym1pdCcsIHggPT4gcmVzKG9uU3VibWl0KHgpKSk7XG4gICAgcC5vbignZXhpdCcsIHggPT4gcmVzKG9uRXhpdCh4KSkpO1xuICAgIHAub24oJ2Fib3J0JywgeCA9PiByZWoob25BYm9ydCh4KSkpO1xuICB9KTtcbn1cbi8qKlxuICogVGV4dCBwcm9tcHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLm1lc3NhZ2UgUHJvbXB0IG1lc3NhZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLmluaXRpYWxdIERlZmF1bHQgc3RyaW5nIHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3Muc3R5bGU9XCJkZWZhdWx0XCJdIFJlbmRlciBzdHlsZSAoJ2RlZmF1bHQnLCAncGFzc3dvcmQnLCAnaW52aXNpYmxlJylcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3MudmFsaWRhdGVdIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIHVzZXIgaW5wdXRcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cblxuXG4kLnRleHQgPSBhcmdzID0+IHRvUHJvbXB0KCdUZXh0UHJvbXB0JywgYXJncyk7XG4vKipcbiAqIFBhc3N3b3JkIHByb21wdCB3aXRoIG1hc2tlZCBpbnB1dFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3MuaW5pdGlhbF0gRGVmYXVsdCBzdHJpbmcgdmFsdWVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3MudmFsaWRhdGVdIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIHVzZXIgaW5wdXRcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cblxuXG4kLnBhc3N3b3JkID0gYXJncyA9PiB7XG4gIGFyZ3Muc3R5bGUgPSAncGFzc3dvcmQnO1xuICByZXR1cm4gJC50ZXh0KGFyZ3MpO1xufTtcbi8qKlxuICogUHJvbXB0IHdoZXJlIGlucHV0IGlzIGludmlzaWJsZSwgbGlrZSBzdWRvXG4gKiBAcGFyYW0ge3N0cmluZ30gYXJncy5tZXNzYWdlIFByb21wdCBtZXNzYWdlIHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5pbml0aWFsXSBEZWZhdWx0IHN0cmluZyB2YWx1ZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3Mub25TdGF0ZV0gT24gc3RhdGUgY2hhbmdlIGNhbGxiYWNrXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy52YWxpZGF0ZV0gRnVuY3Rpb24gdG8gdmFsaWRhdGUgdXNlciBpbnB1dFxuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuXG5cbiQuaW52aXNpYmxlID0gYXJncyA9PiB7XG4gIGFyZ3Muc3R5bGUgPSAnaW52aXNpYmxlJztcbiAgcmV0dXJuICQudGV4dChhcmdzKTtcbn07XG4vKipcbiAqIE51bWJlciBwcm9tcHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLm1lc3NhZ2UgUHJvbXB0IG1lc3NhZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtIHtudW1iZXJ9IGFyZ3MuaW5pdGlhbCBEZWZhdWx0IG51bWJlciB2YWx1ZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3Mub25TdGF0ZV0gT24gc3RhdGUgY2hhbmdlIGNhbGxiYWNrXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyZ3MubWF4XSBNYXggdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJncy5taW5dIE1pbiB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLnN0eWxlPVwiZGVmYXVsdFwiXSBSZW5kZXIgc3R5bGUgKCdkZWZhdWx0JywgJ3Bhc3N3b3JkJywgJ2ludmlzaWJsZScpXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRzLmZsb2F0PWZhbHNlXSBQYXJzZSBpbnB1dCBhcyBmbG9hdHNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5yb3VuZD0yXSBSb3VuZCBmbG9hdHMgdG8geCBkZWNpbWFsc1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmluY3JlbWVudD0xXSBOdW1iZXIgdG8gaW5jcmVtZW50IGJ5IHdoZW4gdXNpbmcgYXJyb3cta2V5c1xuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3MudmFsaWRhdGVdIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIHVzZXIgaW5wdXRcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cblxuXG4kLm51bWJlciA9IGFyZ3MgPT4gdG9Qcm9tcHQoJ051bWJlclByb21wdCcsIGFyZ3MpO1xuLyoqXG4gKiBEYXRlIHByb21wdFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge251bWJlcn0gYXJncy5pbml0aWFsIERlZmF1bHQgbnVtYmVyIHZhbHVlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJncy5tYXhdIE1heCB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IFthcmdzLm1pbl0gTWluIHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3Muc3R5bGU9XCJkZWZhdWx0XCJdIFJlbmRlciBzdHlsZSAoJ2RlZmF1bHQnLCAncGFzc3dvcmQnLCAnaW52aXNpYmxlJylcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdHMuZmxvYXQ9ZmFsc2VdIFBhcnNlIGlucHV0IGFzIGZsb2F0c1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLnJvdW5kPTJdIFJvdW5kIGZsb2F0cyB0byB4IGRlY2ltYWxzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMuaW5jcmVtZW50PTFdIE51bWJlciB0byBpbmNyZW1lbnQgYnkgd2hlbiB1c2luZyBhcnJvdy1rZXlzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy52YWxpZGF0ZV0gRnVuY3Rpb24gdG8gdmFsaWRhdGUgdXNlciBpbnB1dFxuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuXG5cbiQuZGF0ZSA9IGFyZ3MgPT4gdG9Qcm9tcHQoJ0RhdGVQcm9tcHQnLCBhcmdzKTtcbi8qKlxuICogQ2xhc3NpYyB5ZXMvbm8gcHJvbXB0XG4gKiBAcGFyYW0ge3N0cmluZ30gYXJncy5tZXNzYWdlIFByb21wdCBtZXNzYWdlIHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2FyZ3MuaW5pdGlhbD1mYWxzZV0gRGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3Mub25TdGF0ZV0gT24gc3RhdGUgY2hhbmdlIGNhbGxiYWNrXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHdpdGggdXNlciBpbnB1dFxuICovXG5cblxuJC5jb25maXJtID0gYXJncyA9PiB0b1Byb21wdCgnQ29uZmlybVByb21wdCcsIGFyZ3MpO1xuLyoqXG4gKiBMaXN0IHByb21wdCwgc3BsaXQgaW50cHV0IHN0cmluZyBieSBgc2VwZXJhdG9yYFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3MuaW5pdGlhbF0gRGVmYXVsdCBzdHJpbmcgdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5zdHlsZT1cImRlZmF1bHRcIl0gUmVuZGVyIHN0eWxlICgnZGVmYXVsdCcsICdwYXNzd29yZCcsICdpbnZpc2libGUnKVxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLnNlcGFyYXRvcl0gU3RyaW5nIHNlcGFyYXRvclxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3Mub25TdGF0ZV0gT24gc3RhdGUgY2hhbmdlIGNhbGxiYWNrXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHdpdGggdXNlciBpbnB1dCwgaW4gZm9ybSBvZiBhbiBgQXJyYXlgXG4gKi9cblxuXG4kLmxpc3QgPSBhcmdzID0+IHtcbiAgY29uc3Qgc2VwID0gYXJncy5zZXBhcmF0b3IgfHwgJywnO1xuICByZXR1cm4gdG9Qcm9tcHQoJ1RleHRQcm9tcHQnLCBhcmdzLCB7XG4gICAgb25TdWJtaXQ6IHN0ciA9PiBzdHIuc3BsaXQoc2VwKS5tYXAocyA9PiBzLnRyaW0oKSlcbiAgfSk7XG59O1xuLyoqXG4gKiBUb2dnbGUvc3dpdGNoIHByb21wdFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFthcmdzLmluaXRpYWw9ZmFsc2VdIERlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5hY3RpdmU9XCJvblwiXSBUZXh0IGZvciBgYWN0aXZlYCBzdGF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLmluYWN0aXZlPVwib2ZmXCJdIFRleHQgZm9yIGBpbmFjdGl2ZWAgc3RhdGVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuXG5cbiQudG9nZ2xlID0gYXJncyA9PiB0b1Byb21wdCgnVG9nZ2xlUHJvbXB0JywgYXJncyk7XG4vKipcbiAqIEludGVyYWN0aXZlIHNlbGVjdCBwcm9tcHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLm1lc3NhZ2UgUHJvbXB0IG1lc3NhZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtIHtBcnJheX0gYXJncy5jaG9pY2VzIEFycmF5IG9mIGNob2ljZXMgb2JqZWN0cyBgW3sgdGl0bGUsIHZhbHVlIH0sIC4uLl1gXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyZ3MuaW5pdGlhbF0gSW5kZXggb2YgZGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIHtTdHJpbmd9IFthcmdzLmhpbnRdIEhpbnQgdG8gZGlzcGxheVxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3Mub25TdGF0ZV0gT24gc3RhdGUgY2hhbmdlIGNhbGxiYWNrXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHdpdGggdXNlciBpbnB1dFxuICovXG5cblxuJC5zZWxlY3QgPSBhcmdzID0+IHRvUHJvbXB0KCdTZWxlY3RQcm9tcHQnLCBhcmdzKTtcbi8qKlxuICogSW50ZXJhY3RpdmUgbXVsdGktc2VsZWN0IC8gYXV0b2NvbXBsZXRlTXVsdGlzZWxlY3QgcHJvbXB0XG4gKiBAcGFyYW0ge3N0cmluZ30gYXJncy5tZXNzYWdlIFByb21wdCBtZXNzYWdlIHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MuY2hvaWNlcyBBcnJheSBvZiBjaG9pY2VzIG9iamVjdHMgYFt7IHRpdGxlLCB2YWx1ZSwgW3NlbGVjdGVkXSB9LCAuLi5dYFxuICogQHBhcmFtIHtudW1iZXJ9IFthcmdzLm1heF0gTWF4IHNlbGVjdFxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLmhpbnRdIEhpbnQgdG8gZGlzcGxheSB1c2VyXG4gKiBAcGFyYW0ge051bWJlcn0gW2FyZ3MuY3Vyc29yPTBdIEN1cnNvciBzdGFydCBwb3NpdGlvblxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3Mub25TdGF0ZV0gT24gc3RhdGUgY2hhbmdlIGNhbGxiYWNrXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHdpdGggdXNlciBpbnB1dFxuICovXG5cblxuJC5tdWx0aXNlbGVjdCA9IGFyZ3MgPT4ge1xuICBhcmdzLmNob2ljZXMgPSBbXS5jb25jYXQoYXJncy5jaG9pY2VzIHx8IFtdKTtcblxuICBjb25zdCB0b1NlbGVjdGVkID0gaXRlbXMgPT4gaXRlbXMuZmlsdGVyKGl0ZW0gPT4gaXRlbS5zZWxlY3RlZCkubWFwKGl0ZW0gPT4gaXRlbS52YWx1ZSk7XG5cbiAgcmV0dXJuIHRvUHJvbXB0KCdNdWx0aXNlbGVjdFByb21wdCcsIGFyZ3MsIHtcbiAgICBvbkFib3J0OiB0b1NlbGVjdGVkLFxuICAgIG9uU3VibWl0OiB0b1NlbGVjdGVkXG4gIH0pO1xufTtcblxuJC5hdXRvY29tcGxldGVNdWx0aXNlbGVjdCA9IGFyZ3MgPT4ge1xuICBhcmdzLmNob2ljZXMgPSBbXS5jb25jYXQoYXJncy5jaG9pY2VzIHx8IFtdKTtcblxuICBjb25zdCB0b1NlbGVjdGVkID0gaXRlbXMgPT4gaXRlbXMuZmlsdGVyKGl0ZW0gPT4gaXRlbS5zZWxlY3RlZCkubWFwKGl0ZW0gPT4gaXRlbS52YWx1ZSk7XG5cbiAgcmV0dXJuIHRvUHJvbXB0KCdBdXRvY29tcGxldGVNdWx0aXNlbGVjdFByb21wdCcsIGFyZ3MsIHtcbiAgICBvbkFib3J0OiB0b1NlbGVjdGVkLFxuICAgIG9uU3VibWl0OiB0b1NlbGVjdGVkXG4gIH0pO1xufTtcblxuY29uc3QgYnlUaXRsZSA9IChpbnB1dCwgY2hvaWNlcykgPT4gUHJvbWlzZS5yZXNvbHZlKGNob2ljZXMuZmlsdGVyKGl0ZW0gPT4gaXRlbS50aXRsZS5zbGljZSgwLCBpbnB1dC5sZW5ndGgpLnRvTG93ZXJDYXNlKCkgPT09IGlucHV0LnRvTG93ZXJDYXNlKCkpKTtcbi8qKlxuICogSW50ZXJhY3RpdmUgYXV0by1jb21wbGV0ZSBwcm9tcHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLm1lc3NhZ2UgUHJvbXB0IG1lc3NhZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtIHtBcnJheX0gYXJncy5jaG9pY2VzIEFycmF5IG9mIGF1dG8tY29tcGxldGUgY2hvaWNlcyBvYmplY3RzIGBbeyB0aXRsZSwgdmFsdWUgfSwgLi4uXWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFthcmdzLnN1Z2dlc3RdIEZ1bmN0aW9uIHRvIGZpbHRlciByZXN1bHRzIGJhc2VkIG9uIHVzZXIgaW5wdXQuIERlZmF1bHRzIHRvIHNvcnQgYnkgYHRpdGxlYFxuICogQHBhcmFtIHtudW1iZXJ9IFthcmdzLmxpbWl0PTEwXSBNYXggbnVtYmVyIG9mIHJlc3VsdHMgdG8gc2hvd1xuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLnN0eWxlPVwiZGVmYXVsdFwiXSBSZW5kZXIgc3R5bGUgKCdkZWZhdWx0JywgJ3Bhc3N3b3JkJywgJ2ludmlzaWJsZScpXG4gKiBAcGFyYW0ge1N0cmluZ30gW2FyZ3MuaW5pdGlhbF0gSW5kZXggb2YgdGhlIGRlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuY2xlYXJGaXJzdF0gVGhlIGZpcnN0IEVTQ0FQRSBrZXlwcmVzcyB3aWxsIGNsZWFyIHRoZSBpbnB1dFxuICogQHBhcmFtIHtTdHJpbmd9IFthcmdzLmZhbGxiYWNrXSBGYWxsYmFjayBtZXNzYWdlIC0gZGVmYXVsdHMgdG8gaW5pdGlhbCB2YWx1ZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3Mub25TdGF0ZV0gT24gc3RhdGUgY2hhbmdlIGNhbGxiYWNrXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHdpdGggdXNlciBpbnB1dFxuICovXG5cblxuJC5hdXRvY29tcGxldGUgPSBhcmdzID0+IHtcbiAgYXJncy5zdWdnZXN0ID0gYXJncy5zdWdnZXN0IHx8IGJ5VGl0bGU7XG4gIGFyZ3MuY2hvaWNlcyA9IFtdLmNvbmNhdChhcmdzLmNob2ljZXMgfHwgW10pO1xuICByZXR1cm4gdG9Qcm9tcHQoJ0F1dG9jb21wbGV0ZVByb21wdCcsIGFyZ3MpO1xufTsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSB7IHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsgfSBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8sIGFsbG93QXJyYXlMaWtlKSB7IHZhciBpdCA9IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdIHx8IG9bXCJAQGl0ZXJhdG9yXCJdOyBpZiAoIWl0KSB7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UpIHsgdGhyb3cgX2U7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IGl0LmNhbGwobyk7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciBzdGVwID0gaXQubmV4dCgpOyBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lOyByZXR1cm4gc3RlcDsgfSwgZTogZnVuY3Rpb24gZShfZTIpIHsgZGlkRXJyID0gdHJ1ZTsgZXJyID0gX2UyOyB9LCBmOiBmdW5jdGlvbiBmKCkgeyB0cnkgeyBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXQucmV0dXJuICE9IG51bGwpIGl0LnJldHVybigpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldOyByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9XG5cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7IH0gZnVuY3Rpb24gX3Rocm93KGVycikgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfVxuXG5jb25zdCBwcm9tcHRzID0gcmVxdWlyZSgnLi9wcm9tcHRzJyk7XG5cbmNvbnN0IHBhc3NPbiA9IFsnc3VnZ2VzdCcsICdmb3JtYXQnLCAnb25TdGF0ZScsICd2YWxpZGF0ZScsICdvblJlbmRlcicsICd0eXBlJ107XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7fTtcbi8qKlxuICogUHJvbXB0IGZvciBhIHNlcmllcyBvZiBxdWVzdGlvbnNcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBxdWVzdGlvbnMgU2luZ2xlIHF1ZXN0aW9uIG9iamVjdCBvciBBcnJheSBvZiBxdWVzdGlvbiBvYmplY3RzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb25TdWJtaXRdIENhbGxiYWNrIGZ1bmN0aW9uIGNhbGxlZCBvbiBwcm9tcHQgc3VibWl0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb25DYW5jZWxdIENhbGxiYWNrIGZ1bmN0aW9uIGNhbGxlZCBvbiBjYW5jZWwvYWJvcnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IE9iamVjdCB3aXRoIHZhbHVlcyBmcm9tIHVzZXIgaW5wdXRcbiAqL1xuXG5cbmZ1bmN0aW9uIHByb21wdCgpIHtcbiAgcmV0dXJuIF9wcm9tcHQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX3Byb21wdCgpIHtcbiAgX3Byb21wdCA9IF9hc3luY1RvR2VuZXJhdG9yKGZ1bmN0aW9uKiAocXVlc3Rpb25zID0gW10sIHtcbiAgICBvblN1Ym1pdCA9IG5vb3AsXG4gICAgb25DYW5jZWwgPSBub29wXG4gIH0gPSB7fSkge1xuICAgIGNvbnN0IGFuc3dlcnMgPSB7fTtcbiAgICBjb25zdCBvdmVycmlkZSA9IHByb21wdC5fb3ZlcnJpZGUgfHwge307XG4gICAgcXVlc3Rpb25zID0gW10uY29uY2F0KHF1ZXN0aW9ucyk7XG4gICAgbGV0IGFuc3dlciwgcXVlc3Rpb24sIHF1aXQsIG5hbWUsIHR5cGUsIGxhc3RQcm9tcHQ7XG5cbiAgICBjb25zdCBnZXRGb3JtYXR0ZWRBbnN3ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvcihmdW5jdGlvbiogKHF1ZXN0aW9uLCBhbnN3ZXIsIHNraXBWYWxpZGF0aW9uID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKCFza2lwVmFsaWRhdGlvbiAmJiBxdWVzdGlvbi52YWxpZGF0ZSAmJiBxdWVzdGlvbi52YWxpZGF0ZShhbnN3ZXIpICE9PSB0cnVlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHF1ZXN0aW9uLmZvcm1hdCA/IHlpZWxkIHF1ZXN0aW9uLmZvcm1hdChhbnN3ZXIsIGFuc3dlcnMpIDogYW5zd2VyO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiBnZXRGb3JtYXR0ZWRBbnN3ZXIoX3gsIF94Mikge1xuICAgICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9KCk7XG5cbiAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIocXVlc3Rpb25zKSxcbiAgICAgICAgX3N0ZXA7XG5cbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgICAgcXVlc3Rpb24gPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgdmFyIF9xdWVzdGlvbiA9IHF1ZXN0aW9uO1xuICAgICAgICBuYW1lID0gX3F1ZXN0aW9uLm5hbWU7XG4gICAgICAgIHR5cGUgPSBfcXVlc3Rpb24udHlwZTtcblxuICAgICAgICAvLyBldmFsdWF0ZSB0eXBlIGZpcnN0IGFuZCBza2lwIGlmIHR5cGUgaXMgYSBmYWxzeSB2YWx1ZVxuICAgICAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0eXBlID0geWllbGQgdHlwZShhbnN3ZXIsIF9vYmplY3RTcHJlYWQoe30sIGFuc3dlcnMpLCBxdWVzdGlvbik7XG4gICAgICAgICAgcXVlc3Rpb25bJ3R5cGUnXSA9IHR5cGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXR5cGUpIGNvbnRpbnVlOyAvLyBpZiBwcm9wZXJ0eSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgdW5sZXNzIGl0J3MgYSBzcGVjaWFsIGZ1bmN0aW9uXG5cbiAgICAgICAgZm9yIChsZXQga2V5IGluIHF1ZXN0aW9uKSB7XG4gICAgICAgICAgaWYgKHBhc3NPbi5pbmNsdWRlcyhrZXkpKSBjb250aW51ZTtcbiAgICAgICAgICBsZXQgdmFsdWUgPSBxdWVzdGlvbltrZXldO1xuICAgICAgICAgIHF1ZXN0aW9uW2tleV0gPSB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgPyB5aWVsZCB2YWx1ZShhbnN3ZXIsIF9vYmplY3RTcHJlYWQoe30sIGFuc3dlcnMpLCBsYXN0UHJvbXB0KSA6IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbGFzdFByb21wdCA9IHF1ZXN0aW9uO1xuXG4gICAgICAgIGlmICh0eXBlb2YgcXVlc3Rpb24ubWVzc2FnZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb21wdCBtZXNzYWdlIGlzIHJlcXVpcmVkJyk7XG4gICAgICAgIH0gLy8gdXBkYXRlIHZhcnMgaW4gY2FzZSB0aGV5IGNoYW5nZWRcblxuXG4gICAgICAgIHZhciBfcXVlc3Rpb24yID0gcXVlc3Rpb247XG4gICAgICAgIG5hbWUgPSBfcXVlc3Rpb24yLm5hbWU7XG4gICAgICAgIHR5cGUgPSBfcXVlc3Rpb24yLnR5cGU7XG5cbiAgICAgICAgaWYgKHByb21wdHNbdHlwZV0gPT09IHZvaWQgMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcHJvbXB0IHR5cGUgKCR7dHlwZX0pIGlzIG5vdCBkZWZpbmVkYCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3ZlcnJpZGVbcXVlc3Rpb24ubmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGFuc3dlciA9IHlpZWxkIGdldEZvcm1hdHRlZEFuc3dlcihxdWVzdGlvbiwgb3ZlcnJpZGVbcXVlc3Rpb24ubmFtZV0pO1xuXG4gICAgICAgICAgaWYgKGFuc3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBhbnN3ZXJzW25hbWVdID0gYW5zd2VyO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBHZXQgdGhlIGluamVjdGVkIGFuc3dlciBpZiB0aGVyZSBpcyBvbmUgb3IgcHJvbXB0IHRoZSB1c2VyXG4gICAgICAgICAgYW5zd2VyID0gcHJvbXB0Ll9pbmplY3RlZCA/IGdldEluamVjdGVkQW5zd2VyKHByb21wdC5faW5qZWN0ZWQsIHF1ZXN0aW9uLmluaXRpYWwpIDogeWllbGQgcHJvbXB0c1t0eXBlXShxdWVzdGlvbik7XG4gICAgICAgICAgYW5zd2Vyc1tuYW1lXSA9IGFuc3dlciA9IHlpZWxkIGdldEZvcm1hdHRlZEFuc3dlcihxdWVzdGlvbiwgYW5zd2VyLCB0cnVlKTtcbiAgICAgICAgICBxdWl0ID0geWllbGQgb25TdWJtaXQocXVlc3Rpb24sIGFuc3dlciwgYW5zd2Vycyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHF1aXQgPSAhKHlpZWxkIG9uQ2FuY2VsKHF1ZXN0aW9uLCBhbnN3ZXJzKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocXVpdCkgcmV0dXJuIGFuc3dlcnM7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3IuZigpO1xuICAgIH1cblxuICAgIHJldHVybiBhbnN3ZXJzO1xuICB9KTtcbiAgcmV0dXJuIF9wcm9tcHQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5qZWN0ZWRBbnN3ZXIoaW5qZWN0ZWQsIGRlYWZ1bHRWYWx1ZSkge1xuICBjb25zdCBhbnN3ZXIgPSBpbmplY3RlZC5zaGlmdCgpO1xuXG4gIGlmIChhbnN3ZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHRocm93IGFuc3dlcjtcbiAgfVxuXG4gIHJldHVybiBhbnN3ZXIgPT09IHVuZGVmaW5lZCA/IGRlYWZ1bHRWYWx1ZSA6IGFuc3dlcjtcbn1cblxuZnVuY3Rpb24gaW5qZWN0KGFuc3dlcnMpIHtcbiAgcHJvbXB0Ll9pbmplY3RlZCA9IChwcm9tcHQuX2luamVjdGVkIHx8IFtdKS5jb25jYXQoYW5zd2Vycyk7XG59XG5cbmZ1bmN0aW9uIG92ZXJyaWRlKGFuc3dlcnMpIHtcbiAgcHJvbXB0Ll9vdmVycmlkZSA9IE9iamVjdC5hc3NpZ24oe30sIGFuc3dlcnMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24ocHJvbXB0LCB7XG4gIHByb21wdCxcbiAgcHJvbXB0cyxcbiAgaW5qZWN0LFxuICBvdmVycmlkZVxufSk7IiwgIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSAoa2V5LCBpc1NlbGVjdCkgPT4ge1xuICBpZiAoa2V5Lm1ldGEgJiYga2V5Lm5hbWUgIT09ICdlc2NhcGUnKSByZXR1cm47XG4gIFxuICBpZiAoa2V5LmN0cmwpIHtcbiAgICBpZiAoa2V5Lm5hbWUgPT09ICdhJykgcmV0dXJuICdmaXJzdCc7XG4gICAgaWYgKGtleS5uYW1lID09PSAnYycpIHJldHVybiAnYWJvcnQnO1xuICAgIGlmIChrZXkubmFtZSA9PT0gJ2QnKSByZXR1cm4gJ2Fib3J0JztcbiAgICBpZiAoa2V5Lm5hbWUgPT09ICdlJykgcmV0dXJuICdsYXN0JztcbiAgICBpZiAoa2V5Lm5hbWUgPT09ICdnJykgcmV0dXJuICdyZXNldCc7XG4gIH1cbiAgXG4gIGlmIChpc1NlbGVjdCkge1xuICAgIGlmIChrZXkubmFtZSA9PT0gJ2onKSByZXR1cm4gJ2Rvd24nO1xuICAgIGlmIChrZXkubmFtZSA9PT0gJ2snKSByZXR1cm4gJ3VwJztcbiAgfVxuXG4gIGlmIChrZXkubmFtZSA9PT0gJ3JldHVybicpIHJldHVybiAnc3VibWl0JztcbiAgaWYgKGtleS5uYW1lID09PSAnZW50ZXInKSByZXR1cm4gJ3N1Ym1pdCc7IC8vIGN0cmwgKyBKXG4gIGlmIChrZXkubmFtZSA9PT0gJ2JhY2tzcGFjZScpIHJldHVybiAnZGVsZXRlJztcbiAgaWYgKGtleS5uYW1lID09PSAnZGVsZXRlJykgcmV0dXJuICdkZWxldGVGb3J3YXJkJztcbiAgaWYgKGtleS5uYW1lID09PSAnYWJvcnQnKSByZXR1cm4gJ2Fib3J0JztcbiAgaWYgKGtleS5uYW1lID09PSAnZXNjYXBlJykgcmV0dXJuICdleGl0JztcbiAgaWYgKGtleS5uYW1lID09PSAndGFiJykgcmV0dXJuICduZXh0JztcbiAgaWYgKGtleS5uYW1lID09PSAncGFnZWRvd24nKSByZXR1cm4gJ25leHRQYWdlJztcbiAgaWYgKGtleS5uYW1lID09PSAncGFnZXVwJykgcmV0dXJuICdwcmV2UGFnZSc7XG4gIC8vIFRPRE8gY3JlYXRlIGhvbWUoKSBpbiBwcm9tcHQgdHlwZXMgKGUuZy4gVGV4dFByb21wdClcbiAgaWYgKGtleS5uYW1lID09PSAnaG9tZScpIHJldHVybiAnaG9tZSc7XG4gIC8vIFRPRE8gY3JlYXRlIGVuZCgpIGluIHByb21wdCB0eXBlcyAoZS5nLiBUZXh0UHJvbXB0KVxuICBpZiAoa2V5Lm5hbWUgPT09ICdlbmQnKSByZXR1cm4gJ2VuZCc7XG5cbiAgaWYgKGtleS5uYW1lID09PSAndXAnKSByZXR1cm4gJ3VwJztcbiAgaWYgKGtleS5uYW1lID09PSAnZG93bicpIHJldHVybiAnZG93bic7XG4gIGlmIChrZXkubmFtZSA9PT0gJ3JpZ2h0JykgcmV0dXJuICdyaWdodCc7XG4gIGlmIChrZXkubmFtZSA9PT0gJ2xlZnQnKSByZXR1cm4gJ2xlZnQnO1xuXG4gIHJldHVybiBmYWxzZTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0ciA9PiB7XG4gIGNvbnN0IHBhdHRlcm4gPSBbXG4gICAgJ1tcXFxcdTAwMUJcXFxcdTAwOUJdW1tcXFxcXSgpIzs/XSooPzooPzooPzooPzo7Wy1hLXpBLVpcXFxcZFxcXFwvIyYuOj0/JUB+X10rKSp8W2EtekEtWlxcXFxkXSsoPzo7Wy1hLXpBLVpcXFxcZFxcXFwvIyYuOj0/JUB+X10qKSopP1xcXFx1MDAwNyknLFxuICAgICcoPzooPzpcXFxcZHsxLDR9KD86O1xcXFxkezAsNH0pKik/W1xcXFxkQS1QUlpjZi1udHFyeT0+PH5dKSknXG4gIF0uam9pbignfCcpO1xuXG4gIGNvbnN0IFJHWCA9IG5ldyBSZWdFeHAocGF0dGVybiwgJ2cnKTtcbiAgcmV0dXJuIHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnID8gc3RyLnJlcGxhY2UoUkdYLCAnJykgOiBzdHI7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc3RyaXAgPSByZXF1aXJlKCcuL3N0cmlwJyk7XG5jb25zdCB7IGVyYXNlLCBjdXJzb3IgfSA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKTtcblxuY29uc3Qgd2lkdGggPSBzdHIgPT4gWy4uLnN0cmlwKHN0cildLmxlbmd0aDtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvbXB0XG4gKiBAcGFyYW0ge251bWJlcn0gcGVyTGluZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHByb21wdCwgcGVyTGluZSkge1xuICBpZiAoIXBlckxpbmUpIHJldHVybiBlcmFzZS5saW5lICsgY3Vyc29yLnRvKDApO1xuXG4gIGxldCByb3dzID0gMDtcbiAgY29uc3QgbGluZXMgPSBwcm9tcHQuc3BsaXQoL1xccj9cXG4vKTtcbiAgZm9yIChsZXQgbGluZSBvZiBsaW5lcykge1xuICAgIHJvd3MgKz0gMSArIE1hdGguZmxvb3IoTWF0aC5tYXgod2lkdGgobGluZSkgLSAxLCAwKSAvIHBlckxpbmUpO1xuICB9XG5cbiAgcmV0dXJuIGVyYXNlLmxpbmVzKHJvd3MpO1xufTtcbiIsICIndXNlIHN0cmljdCc7XHRcblxuIGNvbnN0IG1haW4gPSB7XG4gIGFycm93VXA6ICdcdTIxOTEnLFxuICBhcnJvd0Rvd246ICdcdTIxOTMnLFxuICBhcnJvd0xlZnQ6ICdcdTIxOTAnLFxuICBhcnJvd1JpZ2h0OiAnXHUyMTkyJyxcbiAgcmFkaW9PbjogJ1x1MjVDOScsXG4gIHJhZGlvT2ZmOiAnXHUyNUVGJyxcbiAgdGljazogJ1x1MjcxNCcsXHRcbiAgY3Jvc3M6ICdcdTI3MTYnLFx0XG4gIGVsbGlwc2lzOiAnXHUyMDI2JyxcdFxuICBwb2ludGVyU21hbGw6ICdcdTIwM0EnLFx0XG4gIGxpbmU6ICdcdTI1MDAnLFx0XG4gIHBvaW50ZXI6ICdcdTI3NkYnXHRcbn07XHRcbmNvbnN0IHdpbiA9IHtcbiAgYXJyb3dVcDogbWFpbi5hcnJvd1VwLFxuICBhcnJvd0Rvd246IG1haW4uYXJyb3dEb3duLFxuICBhcnJvd0xlZnQ6IG1haW4uYXJyb3dMZWZ0LFxuICBhcnJvd1JpZ2h0OiBtYWluLmFycm93UmlnaHQsXG4gIHJhZGlvT246ICcoKiknLFxuICByYWRpb09mZjogJyggKScsXHRcbiAgdGljazogJ1x1MjIxQScsXHRcbiAgY3Jvc3M6ICdcdTAwRDcnLFx0XG4gIGVsbGlwc2lzOiAnLi4uJyxcdFxuICBwb2ludGVyU21hbGw6ICdcdTAwQkInLFx0XG4gIGxpbmU6ICdcdTI1MDAnLFx0XG4gIHBvaW50ZXI6ICc+J1x0XG59O1x0XG5jb25zdCBmaWd1cmVzID0gcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJyA/IHdpbiA6IG1haW47XHRcblxuIG1vZHVsZS5leHBvcnRzID0gZmlndXJlcztcbiIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGMgPSByZXF1aXJlKCdrbGV1cicpO1xuY29uc3QgZmlndXJlcyA9IHJlcXVpcmUoJy4vZmlndXJlcycpO1xuXG4vLyByZW5kZXJpbmcgdXNlciBpbnB1dC5cbmNvbnN0IHN0eWxlcyA9IE9iamVjdC5mcmVlemUoe1xuICBwYXNzd29yZDogeyBzY2FsZTogMSwgcmVuZGVyOiBpbnB1dCA9PiAnKicucmVwZWF0KGlucHV0Lmxlbmd0aCkgfSxcbiAgZW1vamk6IHsgc2NhbGU6IDIsIHJlbmRlcjogaW5wdXQgPT4gJ1x1RDgzRFx1REUwMycucmVwZWF0KGlucHV0Lmxlbmd0aCkgfSxcbiAgaW52aXNpYmxlOiB7IHNjYWxlOiAwLCByZW5kZXI6IGlucHV0ID0+ICcnIH0sXG4gIGRlZmF1bHQ6IHsgc2NhbGU6IDEsIHJlbmRlcjogaW5wdXQgPT4gYCR7aW5wdXR9YCB9XG59KTtcbmNvbnN0IHJlbmRlciA9IHR5cGUgPT4gc3R5bGVzW3R5cGVdIHx8IHN0eWxlcy5kZWZhdWx0O1xuXG4vLyBpY29uIHRvIHNpZ25hbGl6ZSBhIHByb21wdC5cbmNvbnN0IHN5bWJvbHMgPSBPYmplY3QuZnJlZXplKHtcbiAgYWJvcnRlZDogYy5yZWQoZmlndXJlcy5jcm9zcyksXG4gIGRvbmU6IGMuZ3JlZW4oZmlndXJlcy50aWNrKSxcbiAgZXhpdGVkOiBjLnllbGxvdyhmaWd1cmVzLmNyb3NzKSxcbiAgZGVmYXVsdDogYy5jeWFuKCc/Jylcbn0pO1xuXG5jb25zdCBzeW1ib2wgPSAoZG9uZSwgYWJvcnRlZCwgZXhpdGVkKSA9PlxuICBhYm9ydGVkID8gc3ltYm9scy5hYm9ydGVkIDogZXhpdGVkID8gc3ltYm9scy5leGl0ZWQgOiBkb25lID8gc3ltYm9scy5kb25lIDogc3ltYm9scy5kZWZhdWx0O1xuXG4vLyBiZXR3ZWVuIHRoZSBxdWVzdGlvbiBhbmQgdGhlIHVzZXIncyBpbnB1dC5cbmNvbnN0IGRlbGltaXRlciA9IGNvbXBsZXRpbmcgPT5cbiAgYy5ncmF5KGNvbXBsZXRpbmcgPyBmaWd1cmVzLmVsbGlwc2lzIDogZmlndXJlcy5wb2ludGVyU21hbGwpO1xuXG5jb25zdCBpdGVtID0gKGV4cGFuZGFibGUsIGV4cGFuZGVkKSA9PlxuICBjLmdyYXkoZXhwYW5kYWJsZSA/IChleHBhbmRlZCA/IGZpZ3VyZXMucG9pbnRlclNtYWxsIDogJysnKSA6IGZpZ3VyZXMubGluZSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzdHlsZXMsXG4gIHJlbmRlcixcbiAgc3ltYm9scyxcbiAgc3ltYm9sLFxuICBkZWxpbWl0ZXIsXG4gIGl0ZW1cbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBzdHJpcCA9IHJlcXVpcmUoJy4vc3RyaXAnKTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbXNnXG4gKiBAcGFyYW0ge251bWJlcn0gcGVyTGluZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtc2csIHBlckxpbmUpIHtcbiAgbGV0IGxpbmVzID0gU3RyaW5nKHN0cmlwKG1zZykgfHwgJycpLnNwbGl0KC9cXHI/XFxuLyk7XG5cbiAgaWYgKCFwZXJMaW5lKSByZXR1cm4gbGluZXMubGVuZ3RoO1xuICByZXR1cm4gbGluZXMubWFwKGwgPT4gTWF0aC5jZWlsKGwubGVuZ3RoIC8gcGVyTGluZSkpXG4gICAgICAucmVkdWNlKChhLCBiKSA9PiBhICsgYik7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbXNnIFRoZSBtZXNzYWdlIHRvIHdyYXBcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IFtvcHRzLm1hcmdpbl0gTGVmdCBtYXJnaW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLndpZHRoIE1heGltdW0gY2hhcmFjdGVycyBwZXIgbGluZSBpbmNsdWRpbmcgdGhlIG1hcmdpblxuICovXG5tb2R1bGUuZXhwb3J0cyA9IChtc2csIG9wdHMgPSB7fSkgPT4ge1xuICBjb25zdCB0YWIgPSBOdW1iZXIuaXNTYWZlSW50ZWdlcihwYXJzZUludChvcHRzLm1hcmdpbikpXG4gICAgPyBuZXcgQXJyYXkocGFyc2VJbnQob3B0cy5tYXJnaW4pKS5maWxsKCcgJykuam9pbignJylcbiAgICA6IChvcHRzLm1hcmdpbiB8fCAnJyk7XG5cbiAgY29uc3Qgd2lkdGggPSBvcHRzLndpZHRoO1xuXG4gIHJldHVybiAobXNnIHx8ICcnKS5zcGxpdCgvXFxyP1xcbi9nKVxuICAgIC5tYXAobGluZSA9PiBsaW5lXG4gICAgICAuc3BsaXQoL1xccysvZylcbiAgICAgIC5yZWR1Y2UoKGFyciwgdykgPT4ge1xuICAgICAgICBpZiAody5sZW5ndGggKyB0YWIubGVuZ3RoID49IHdpZHRoIHx8IGFyclthcnIubGVuZ3RoIC0gMV0ubGVuZ3RoICsgdy5sZW5ndGggKyAxIDwgd2lkdGgpXG4gICAgICAgICAgYXJyW2Fyci5sZW5ndGggLSAxXSArPSBgICR7d31gO1xuICAgICAgICBlbHNlIGFyci5wdXNoKGAke3RhYn0ke3d9YCk7XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9LCBbIHRhYiBdKVxuICAgICAgLmpvaW4oJ1xcbicpKVxuICAgIC5qb2luKCdcXG4nKTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZSB3aGF0IGVudHJpZXMgc2hvdWxkIGJlIGRpc3BsYXllZCBvbiB0aGUgc2NyZWVuLCBiYXNlZCBvbiB0aGVcbiAqIGN1cnJlbnRseSBzZWxlY3RlZCBpbmRleCBhbmQgdGhlIG1heGltdW0gdmlzaWJsZS4gVXNlZCBpbiBsaXN0LWJhc2VkXG4gKiBwcm9tcHRzIGxpa2UgYHNlbGVjdGAgYW5kIGBtdWx0aXNlbGVjdGAuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGN1cnNvciB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGVudHJ5XG4gKiBAcGFyYW0ge251bWJlcn0gdG90YWwgdGhlIHRvdGFsIGVudHJpZXMgYXZhaWxhYmxlIHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4VmlzaWJsZV0gdGhlIG51bWJlciBvZiBlbnRyaWVzIHRoYXQgY2FuIGJlIGRpc3BsYXllZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IChjdXJzb3IsIHRvdGFsLCBtYXhWaXNpYmxlKSAgPT4ge1xuICBtYXhWaXNpYmxlID0gbWF4VmlzaWJsZSB8fCB0b3RhbDtcblxuICBsZXQgc3RhcnRJbmRleCA9IE1hdGgubWluKHRvdGFsLSBtYXhWaXNpYmxlLCBjdXJzb3IgLSBNYXRoLmZsb29yKG1heFZpc2libGUgLyAyKSk7XG4gIGlmIChzdGFydEluZGV4IDwgMCkgc3RhcnRJbmRleCA9IDA7XG5cbiAgbGV0IGVuZEluZGV4ID0gTWF0aC5taW4oc3RhcnRJbmRleCArIG1heFZpc2libGUsIHRvdGFsKTtcblxuICByZXR1cm4geyBzdGFydEluZGV4LCBlbmRJbmRleCB9O1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhY3Rpb246IHJlcXVpcmUoJy4vYWN0aW9uJyksXG4gIGNsZWFyOiByZXF1aXJlKCcuL2NsZWFyJyksXG4gIHN0eWxlOiByZXF1aXJlKCcuL3N0eWxlJyksXG4gIHN0cmlwOiByZXF1aXJlKCcuL3N0cmlwJyksXG4gIGZpZ3VyZXM6IHJlcXVpcmUoJy4vZmlndXJlcycpLFxuICBsaW5lczogcmVxdWlyZSgnLi9saW5lcycpLFxuICB3cmFwOiByZXF1aXJlKCcuL3dyYXAnKSxcbiAgZW50cmllc1RvRGlzcGxheTogcmVxdWlyZSgnLi9lbnRyaWVzVG9EaXNwbGF5Jylcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCByZWFkbGluZSA9IHJlcXVpcmUoJ3JlYWRsaW5lJyk7XG5jb25zdCB7IGFjdGlvbiB9ID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5jb25zdCB7IGJlZXAsIGN1cnNvciB9ID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpO1xuY29uc3QgY29sb3IgPSByZXF1aXJlKCdrbGV1cicpO1xuXG4vKipcbiAqIEJhc2UgcHJvbXB0IHNrZWxldG9uXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqL1xuY2xhc3MgUHJvbXB0IGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3Iob3B0cz17fSkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLmZpcnN0UmVuZGVyID0gdHJ1ZTtcbiAgICB0aGlzLmluID0gb3B0cy5zdGRpbiB8fCBwcm9jZXNzLnN0ZGluO1xuICAgIHRoaXMub3V0ID0gb3B0cy5zdGRvdXQgfHwgcHJvY2Vzcy5zdGRvdXQ7XG4gICAgdGhpcy5vblJlbmRlciA9IChvcHRzLm9uUmVuZGVyIHx8ICgoKSA9PiB2b2lkIDApKS5iaW5kKHRoaXMpO1xuICAgIGNvbnN0IHJsID0gcmVhZGxpbmUuY3JlYXRlSW50ZXJmYWNlKHsgaW5wdXQ6dGhpcy5pbiwgZXNjYXBlQ29kZVRpbWVvdXQ6NTAgfSk7XG4gICAgcmVhZGxpbmUuZW1pdEtleXByZXNzRXZlbnRzKHRoaXMuaW4sIHJsKTtcblxuICAgIGlmICh0aGlzLmluLmlzVFRZKSB0aGlzLmluLnNldFJhd01vZGUodHJ1ZSk7XG4gICAgY29uc3QgaXNTZWxlY3QgPSBbICdTZWxlY3RQcm9tcHQnLCAnTXVsdGlzZWxlY3RQcm9tcHQnIF0uaW5kZXhPZih0aGlzLmNvbnN0cnVjdG9yLm5hbWUpID4gLTE7XG4gICAgY29uc3Qga2V5cHJlc3MgPSAoc3RyLCBrZXkpID0+IHtcbiAgICAgIGxldCBhID0gYWN0aW9uKGtleSwgaXNTZWxlY3QpO1xuICAgICAgaWYgKGEgPT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuXyAmJiB0aGlzLl8oc3RyLCBrZXkpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpc1thXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzW2FdKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmJlbGwoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5jbG9zZSA9ICgpID0+IHtcbiAgICAgIHRoaXMub3V0LndyaXRlKGN1cnNvci5zaG93KTtcbiAgICAgIHRoaXMuaW4ucmVtb3ZlTGlzdGVuZXIoJ2tleXByZXNzJywga2V5cHJlc3MpO1xuICAgICAgaWYgKHRoaXMuaW4uaXNUVFkpIHRoaXMuaW4uc2V0UmF3TW9kZShmYWxzZSk7XG4gICAgICBybC5jbG9zZSgpO1xuICAgICAgdGhpcy5lbWl0KHRoaXMuYWJvcnRlZCA/ICdhYm9ydCcgOiB0aGlzLmV4aXRlZCA/ICdleGl0JyA6ICdzdWJtaXQnLCB0aGlzLnZhbHVlKTtcbiAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgdGhpcy5pbi5vbigna2V5cHJlc3MnLCBrZXlwcmVzcyk7XG4gIH1cblxuICBmaXJlKCkge1xuICAgIHRoaXMuZW1pdCgnc3RhdGUnLCB7XG4gICAgICB2YWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgIGFib3J0ZWQ6ICEhdGhpcy5hYm9ydGVkLFxuICAgICAgZXhpdGVkOiAhIXRoaXMuZXhpdGVkXG4gICAgfSk7XG4gIH1cblxuICBiZWxsKCkge1xuICAgIHRoaXMub3V0LndyaXRlKGJlZXApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHRoaXMub25SZW5kZXIoY29sb3IpO1xuICAgIGlmICh0aGlzLmZpcnN0UmVuZGVyKSB0aGlzLmZpcnN0UmVuZGVyID0gZmFsc2U7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQcm9tcHQ7XG4iLCAiY29uc3QgY29sb3IgPSByZXF1aXJlKCdrbGV1cicpO1xuY29uc3QgUHJvbXB0ID0gcmVxdWlyZSgnLi9wcm9tcHQnKTtcbmNvbnN0IHsgZXJhc2UsIGN1cnNvciB9ID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpO1xuY29uc3QgeyBzdHlsZSwgY2xlYXIsIGxpbmVzLCBmaWd1cmVzIH0gPSByZXF1aXJlKCcuLi91dGlsJyk7XG5cbi8qKlxuICogVGV4dFByb21wdCBCYXNlIEVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRzLm1lc3NhZ2UgTWVzc2FnZVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLnN0eWxlPSdkZWZhdWx0J10gUmVuZGVyIHN0eWxlXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuaW5pdGlhbF0gRGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMudmFsaWRhdGVdIFZhbGlkYXRlIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5lcnJvcl0gVGhlIGludmFsaWQgZXJyb3IgbGFiZWxcbiAqL1xuY2xhc3MgVGV4dFByb21wdCBleHRlbmRzIFByb21wdCB7XG4gIGNvbnN0cnVjdG9yKG9wdHM9e30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgICB0aGlzLnRyYW5zZm9ybSA9IHN0eWxlLnJlbmRlcihvcHRzLnN0eWxlKTtcbiAgICB0aGlzLnNjYWxlID0gdGhpcy50cmFuc2Zvcm0uc2NhbGU7XG4gICAgdGhpcy5tc2cgPSBvcHRzLm1lc3NhZ2U7XG4gICAgdGhpcy5pbml0aWFsID0gb3B0cy5pbml0aWFsIHx8IGBgO1xuICAgIHRoaXMudmFsaWRhdG9yID0gb3B0cy52YWxpZGF0ZSB8fCAoKCkgPT4gdHJ1ZSk7XG4gICAgdGhpcy52YWx1ZSA9IGBgO1xuICAgIHRoaXMuZXJyb3JNc2cgPSBvcHRzLmVycm9yIHx8IGBQbGVhc2UgRW50ZXIgQSBWYWxpZCBWYWx1ZWA7XG4gICAgdGhpcy5jdXJzb3IgPSBOdW1iZXIoISF0aGlzLmluaXRpYWwpO1xuICAgIHRoaXMuY3Vyc29yT2Zmc2V0ID0gMDtcbiAgICB0aGlzLmNsZWFyID0gY2xlYXIoYGAsIHRoaXMub3V0LmNvbHVtbnMpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBzZXQgdmFsdWUodikge1xuICAgIGlmICghdiAmJiB0aGlzLmluaXRpYWwpIHtcbiAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgdGhpcy5yZW5kZXJlZCA9IGNvbG9yLmdyYXkodGhpcy50cmFuc2Zvcm0ucmVuZGVyKHRoaXMuaW5pdGlhbCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBsYWNlaG9sZGVyID0gZmFsc2U7XG4gICAgICB0aGlzLnJlbmRlcmVkID0gdGhpcy50cmFuc2Zvcm0ucmVuZGVyKHYpO1xuICAgIH1cbiAgICB0aGlzLl92YWx1ZSA9IHY7XG4gICAgdGhpcy5maXJlKCk7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy52YWx1ZSA9IGBgO1xuICAgIHRoaXMuY3Vyc29yID0gTnVtYmVyKCEhdGhpcy5pbml0aWFsKTtcbiAgICB0aGlzLmN1cnNvck9mZnNldCA9IDA7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGV4aXQoKSB7XG4gICAgdGhpcy5hYm9ydCgpO1xuICB9XG5cbiAgYWJvcnQoKSB7XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUgfHwgdGhpcy5pbml0aWFsO1xuICAgIHRoaXMuZG9uZSA9IHRoaXMuYWJvcnRlZCA9IHRydWU7XG4gICAgdGhpcy5lcnJvciA9IGZhbHNlO1xuICAgIHRoaXMucmVkID0gZmFsc2U7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm91dC53cml0ZSgnXFxuJyk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgYXN5bmMgdmFsaWRhdGUoKSB7XG4gICAgbGV0IHZhbGlkID0gYXdhaXQgdGhpcy52YWxpZGF0b3IodGhpcy52YWx1ZSk7XG4gICAgaWYgKHR5cGVvZiB2YWxpZCA9PT0gYHN0cmluZ2ApIHtcbiAgICAgIHRoaXMuZXJyb3JNc2cgPSB2YWxpZDtcbiAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuZXJyb3IgPSAhdmFsaWQ7XG4gIH1cblxuICBhc3luYyBzdWJtaXQoKSB7XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUgfHwgdGhpcy5pbml0aWFsO1xuICAgIHRoaXMuY3Vyc29yT2Zmc2V0ID0gMDtcbiAgICB0aGlzLmN1cnNvciA9IHRoaXMucmVuZGVyZWQubGVuZ3RoO1xuICAgIGF3YWl0IHRoaXMudmFsaWRhdGUoKTtcbiAgICBpZiAodGhpcy5lcnJvcikge1xuICAgICAgdGhpcy5yZWQgPSB0cnVlO1xuICAgICAgdGhpcy5maXJlKCk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgIHRoaXMuYWJvcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgaWYgKCF0aGlzLnBsYWNlaG9sZGVyKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMuaW5pdGlhbDtcbiAgICB0aGlzLmN1cnNvciA9IHRoaXMucmVuZGVyZWQubGVuZ3RoO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBtb3ZlQ3Vyc29yKG4pIHtcbiAgICBpZiAodGhpcy5wbGFjZWhvbGRlcikgcmV0dXJuO1xuICAgIHRoaXMuY3Vyc29yID0gdGhpcy5jdXJzb3IrbjtcbiAgICB0aGlzLmN1cnNvck9mZnNldCArPSBuO1xuICB9XG5cbiAgXyhjLCBrZXkpIHtcbiAgICBsZXQgczEgPSB0aGlzLnZhbHVlLnNsaWNlKDAsIHRoaXMuY3Vyc29yKTtcbiAgICBsZXQgczIgPSB0aGlzLnZhbHVlLnNsaWNlKHRoaXMuY3Vyc29yKTtcbiAgICB0aGlzLnZhbHVlID0gYCR7czF9JHtjfSR7czJ9YDtcbiAgICB0aGlzLnJlZCA9IGZhbHNlO1xuICAgIHRoaXMuY3Vyc29yID0gdGhpcy5wbGFjZWhvbGRlciA/IDAgOiBzMS5sZW5ndGgrMTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZGVsZXRlKCkge1xuICAgIGlmICh0aGlzLmlzQ3Vyc29yQXRTdGFydCgpKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgbGV0IHMxID0gdGhpcy52YWx1ZS5zbGljZSgwLCB0aGlzLmN1cnNvci0xKTtcbiAgICBsZXQgczIgPSB0aGlzLnZhbHVlLnNsaWNlKHRoaXMuY3Vyc29yKTtcbiAgICB0aGlzLnZhbHVlID0gYCR7czF9JHtzMn1gO1xuICAgIHRoaXMucmVkID0gZmFsc2U7XG4gICAgaWYgKHRoaXMuaXNDdXJzb3JBdFN0YXJ0KCkpIHtcbiAgICAgIHRoaXMuY3Vyc29yT2Zmc2V0ID0gMFxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnNvck9mZnNldCsrO1xuICAgICAgdGhpcy5tb3ZlQ3Vyc29yKC0xKTtcbiAgICB9XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRlbGV0ZUZvcndhcmQoKSB7XG4gICAgaWYodGhpcy5jdXJzb3IqdGhpcy5zY2FsZSA+PSB0aGlzLnJlbmRlcmVkLmxlbmd0aCB8fCB0aGlzLnBsYWNlaG9sZGVyKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgbGV0IHMxID0gdGhpcy52YWx1ZS5zbGljZSgwLCB0aGlzLmN1cnNvcik7XG4gICAgbGV0IHMyID0gdGhpcy52YWx1ZS5zbGljZSh0aGlzLmN1cnNvcisxKTtcbiAgICB0aGlzLnZhbHVlID0gYCR7czF9JHtzMn1gO1xuICAgIHRoaXMucmVkID0gZmFsc2U7XG4gICAgaWYgKHRoaXMuaXNDdXJzb3JBdEVuZCgpKSB7XG4gICAgICB0aGlzLmN1cnNvck9mZnNldCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3Vyc29yT2Zmc2V0Kys7XG4gICAgfVxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBmaXJzdCgpIHtcbiAgICB0aGlzLmN1cnNvciA9IDA7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGxhc3QoKSB7XG4gICAgdGhpcy5jdXJzb3IgPSB0aGlzLnZhbHVlLmxlbmd0aDtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbGVmdCgpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IgPD0gMCB8fCB0aGlzLnBsYWNlaG9sZGVyKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy5tb3ZlQ3Vyc29yKC0xKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcmlnaHQoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yKnRoaXMuc2NhbGUgPj0gdGhpcy5yZW5kZXJlZC5sZW5ndGggfHwgdGhpcy5wbGFjZWhvbGRlcikgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMubW92ZUN1cnNvcigxKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgaXNDdXJzb3JBdFN0YXJ0KCkge1xuICAgIHJldHVybiB0aGlzLmN1cnNvciA9PT0gMCB8fCAodGhpcy5wbGFjZWhvbGRlciAmJiB0aGlzLmN1cnNvciA9PT0gMSk7XG4gIH1cblxuICBpc0N1cnNvckF0RW5kKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnNvciA9PT0gdGhpcy5yZW5kZXJlZC5sZW5ndGggfHwgKHRoaXMucGxhY2Vob2xkZXIgJiYgdGhpcy5jdXJzb3IgPT09IHRoaXMucmVuZGVyZWQubGVuZ3RoICsgMSlcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5jbG9zZWQpIHJldHVybjtcbiAgICBpZiAoIXRoaXMuZmlyc3RSZW5kZXIpIHtcbiAgICAgIGlmICh0aGlzLm91dHB1dEVycm9yKVxuICAgICAgICB0aGlzLm91dC53cml0ZShjdXJzb3IuZG93bihsaW5lcyh0aGlzLm91dHB1dEVycm9yLCB0aGlzLm91dC5jb2x1bW5zKSAtIDEpICsgY2xlYXIodGhpcy5vdXRwdXRFcnJvciwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgICAgdGhpcy5vdXQud3JpdGUoY2xlYXIodGhpcy5vdXRwdXRUZXh0LCB0aGlzLm91dC5jb2x1bW5zKSk7XG4gICAgfVxuICAgIHN1cGVyLnJlbmRlcigpO1xuICAgIHRoaXMub3V0cHV0RXJyb3IgPSAnJztcblxuICAgIHRoaXMub3V0cHV0VGV4dCA9IFtcbiAgICAgIHN0eWxlLnN5bWJvbCh0aGlzLmRvbmUsIHRoaXMuYWJvcnRlZCksXG4gICAgICBjb2xvci5ib2xkKHRoaXMubXNnKSxcbiAgICAgIHN0eWxlLmRlbGltaXRlcih0aGlzLmRvbmUpLFxuICAgICAgdGhpcy5yZWQgPyBjb2xvci5yZWQodGhpcy5yZW5kZXJlZCkgOiB0aGlzLnJlbmRlcmVkXG4gICAgXS5qb2luKGAgYCk7XG5cbiAgICBpZiAodGhpcy5lcnJvcikge1xuICAgICAgdGhpcy5vdXRwdXRFcnJvciArPSB0aGlzLmVycm9yTXNnLnNwbGl0KGBcXG5gKVxuICAgICAgICAgIC5yZWR1Y2UoKGEsIGwsIGkpID0+IGEgKyBgXFxuJHtpID8gJyAnIDogZmlndXJlcy5wb2ludGVyU21hbGx9ICR7Y29sb3IucmVkKCkuaXRhbGljKGwpfWAsIGBgKTtcbiAgICB9XG5cbiAgICB0aGlzLm91dC53cml0ZShlcmFzZS5saW5lICsgY3Vyc29yLnRvKDApICsgdGhpcy5vdXRwdXRUZXh0ICsgY3Vyc29yLnNhdmUgKyB0aGlzLm91dHB1dEVycm9yICsgY3Vyc29yLnJlc3RvcmUgKyBjdXJzb3IubW92ZSh0aGlzLmN1cnNvck9mZnNldCwgMCkpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVGV4dFByb21wdDsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb2xvciA9IHJlcXVpcmUoJ2tsZXVyJyk7XG5jb25zdCBQcm9tcHQgPSByZXF1aXJlKCcuL3Byb21wdCcpO1xuY29uc3QgeyBzdHlsZSwgY2xlYXIsIGZpZ3VyZXMsIHdyYXAsIGVudHJpZXNUb0Rpc3BsYXkgfSA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcbmNvbnN0IHsgY3Vyc29yIH0gPSByZXF1aXJlKCdzaXN0ZXJhbnNpJyk7XG5cbi8qKlxuICogU2VsZWN0UHJvbXB0IEJhc2UgRWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG9wdHMubWVzc2FnZSBNZXNzYWdlXG4gKiBAcGFyYW0ge0FycmF5fSBvcHRzLmNob2ljZXMgQXJyYXkgb2YgY2hvaWNlIG9iamVjdHNcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5oaW50XSBIaW50IHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5pbml0aWFsXSBJbmRleCBvZiBkZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5vcHRpb25zUGVyUGFnZT0xMF0gTWF4IG9wdGlvbnMgdG8gZGlzcGxheSBhdCBvbmNlXG4gKi9cbmNsYXNzIFNlbGVjdFByb21wdCBleHRlbmRzIFByb21wdCB7XG4gIGNvbnN0cnVjdG9yKG9wdHM9e30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgICB0aGlzLm1zZyA9IG9wdHMubWVzc2FnZTtcbiAgICB0aGlzLmhpbnQgPSBvcHRzLmhpbnQgfHwgJy0gVXNlIGFycm93LWtleXMuIFJldHVybiB0byBzdWJtaXQuJztcbiAgICB0aGlzLndhcm4gPSBvcHRzLndhcm4gfHwgJy0gVGhpcyBvcHRpb24gaXMgZGlzYWJsZWQnO1xuICAgIHRoaXMuY3Vyc29yID0gb3B0cy5pbml0aWFsIHx8IDA7XG4gICAgdGhpcy5jaG9pY2VzID0gb3B0cy5jaG9pY2VzLm1hcCgoY2gsIGlkeCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBjaCA9PT0gJ3N0cmluZycpXG4gICAgICAgIGNoID0ge3RpdGxlOiBjaCwgdmFsdWU6IGlkeH07XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0aXRsZTogY2ggJiYgKGNoLnRpdGxlIHx8IGNoLnZhbHVlIHx8IGNoKSxcbiAgICAgICAgdmFsdWU6IGNoICYmIChjaC52YWx1ZSA9PT0gdW5kZWZpbmVkID8gaWR4IDogY2gudmFsdWUpLFxuICAgICAgICBkZXNjcmlwdGlvbjogY2ggJiYgY2guZGVzY3JpcHRpb24sXG4gICAgICAgIHNlbGVjdGVkOiBjaCAmJiBjaC5zZWxlY3RlZCxcbiAgICAgICAgZGlzYWJsZWQ6IGNoICYmIGNoLmRpc2FibGVkXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHRoaXMub3B0aW9uc1BlclBhZ2UgPSBvcHRzLm9wdGlvbnNQZXJQYWdlIHx8IDEwO1xuICAgIHRoaXMudmFsdWUgPSAodGhpcy5jaG9pY2VzW3RoaXMuY3Vyc29yXSB8fCB7fSkudmFsdWU7XG4gICAgdGhpcy5jbGVhciA9IGNsZWFyKCcnLCB0aGlzLm91dC5jb2x1bW5zKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbW92ZUN1cnNvcihuKSB7XG4gICAgdGhpcy5jdXJzb3IgPSBuO1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLmNob2ljZXNbbl0udmFsdWU7XG4gICAgdGhpcy5maXJlKCk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLm1vdmVDdXJzb3IoMCk7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGV4aXQoKSB7XG4gICAgdGhpcy5hYm9ydCgpO1xuICB9XG5cbiAgYWJvcnQoKSB7XG4gICAgdGhpcy5kb25lID0gdGhpcy5hYm9ydGVkID0gdHJ1ZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICBzdWJtaXQoKSB7XG4gICAgaWYgKCF0aGlzLnNlbGVjdGlvbi5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICAgIHRoaXMuYWJvcnRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5maXJlKCk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH0gZWxzZVxuICAgICAgdGhpcy5iZWxsKCk7XG4gIH1cblxuICBmaXJzdCgpIHtcbiAgICB0aGlzLm1vdmVDdXJzb3IoMCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGxhc3QoKSB7XG4gICAgdGhpcy5tb3ZlQ3Vyc29yKHRoaXMuY2hvaWNlcy5sZW5ndGggLSAxKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yID09PSAwKSB7XG4gICAgICB0aGlzLm1vdmVDdXJzb3IodGhpcy5jaG9pY2VzLmxlbmd0aCAtIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1vdmVDdXJzb3IodGhpcy5jdXJzb3IgLSAxKTtcbiAgICB9XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yID09PSB0aGlzLmNob2ljZXMubGVuZ3RoIC0gMSkge1xuICAgICAgdGhpcy5tb3ZlQ3Vyc29yKDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1vdmVDdXJzb3IodGhpcy5jdXJzb3IgKyAxKTtcbiAgICB9XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgdGhpcy5tb3ZlQ3Vyc29yKCh0aGlzLmN1cnNvciArIDEpICUgdGhpcy5jaG9pY2VzLmxlbmd0aCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIF8oYywga2V5KSB7XG4gICAgaWYgKGMgPT09ICcgJykgcmV0dXJuIHRoaXMuc3VibWl0KCk7XG4gIH1cblxuICBnZXQgc2VsZWN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmNob2ljZXNbdGhpcy5jdXJzb3JdO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLmNsb3NlZCkgcmV0dXJuO1xuICAgIGlmICh0aGlzLmZpcnN0UmVuZGVyKSB0aGlzLm91dC53cml0ZShjdXJzb3IuaGlkZSk7XG4gICAgZWxzZSB0aGlzLm91dC53cml0ZShjbGVhcih0aGlzLm91dHB1dFRleHQsIHRoaXMub3V0LmNvbHVtbnMpKTtcbiAgICBzdXBlci5yZW5kZXIoKTtcblxuICAgIGxldCB7IHN0YXJ0SW5kZXgsIGVuZEluZGV4IH0gPSBlbnRyaWVzVG9EaXNwbGF5KHRoaXMuY3Vyc29yLCB0aGlzLmNob2ljZXMubGVuZ3RoLCB0aGlzLm9wdGlvbnNQZXJQYWdlKTtcblxuICAgIC8vIFByaW50IHByb21wdFxuICAgIHRoaXMub3V0cHV0VGV4dCA9IFtcbiAgICAgIHN0eWxlLnN5bWJvbCh0aGlzLmRvbmUsIHRoaXMuYWJvcnRlZCksXG4gICAgICBjb2xvci5ib2xkKHRoaXMubXNnKSxcbiAgICAgIHN0eWxlLmRlbGltaXRlcihmYWxzZSksXG4gICAgICB0aGlzLmRvbmUgPyB0aGlzLnNlbGVjdGlvbi50aXRsZSA6IHRoaXMuc2VsZWN0aW9uLmRpc2FibGVkXG4gICAgICAgICAgPyBjb2xvci55ZWxsb3codGhpcy53YXJuKSA6IGNvbG9yLmdyYXkodGhpcy5oaW50KVxuICAgIF0uam9pbignICcpO1xuXG4gICAgLy8gUHJpbnQgY2hvaWNlc1xuICAgIGlmICghdGhpcy5kb25lKSB7XG4gICAgICB0aGlzLm91dHB1dFRleHQgKz0gJ1xcbic7XG4gICAgICBmb3IgKGxldCBpID0gc3RhcnRJbmRleDsgaSA8IGVuZEluZGV4OyBpKyspIHtcbiAgICAgICAgbGV0IHRpdGxlLCBwcmVmaXgsIGRlc2MgPSAnJywgdiA9IHRoaXMuY2hvaWNlc1tpXTtcblxuICAgICAgICAvLyBEZXRlcm1pbmUgd2hldGhlciB0byBkaXNwbGF5IFwibW9yZSBjaG9pY2VzXCIgaW5kaWNhdG9yc1xuICAgICAgICBpZiAoaSA9PT0gc3RhcnRJbmRleCAmJiBzdGFydEluZGV4ID4gMCkge1xuICAgICAgICAgIHByZWZpeCA9IGZpZ3VyZXMuYXJyb3dVcDtcbiAgICAgICAgfSBlbHNlIGlmIChpID09PSBlbmRJbmRleCAtIDEgJiYgZW5kSW5kZXggPCB0aGlzLmNob2ljZXMubGVuZ3RoKSB7XG4gICAgICAgICAgcHJlZml4ID0gZmlndXJlcy5hcnJvd0Rvd247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJlZml4ID0gJyAnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHYuZGlzYWJsZWQpIHtcbiAgICAgICAgICB0aXRsZSA9IHRoaXMuY3Vyc29yID09PSBpID8gY29sb3IuZ3JheSgpLnVuZGVybGluZSh2LnRpdGxlKSA6IGNvbG9yLnN0cmlrZXRocm91Z2goKS5ncmF5KHYudGl0bGUpO1xuICAgICAgICAgIHByZWZpeCA9ICh0aGlzLmN1cnNvciA9PT0gaSA/IGNvbG9yLmJvbGQoKS5ncmF5KGZpZ3VyZXMucG9pbnRlcikgKyAnICcgOiAnICAnKSArIHByZWZpeDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aXRsZSA9IHRoaXMuY3Vyc29yID09PSBpID8gY29sb3IuY3lhbigpLnVuZGVybGluZSh2LnRpdGxlKSA6IHYudGl0bGU7XG4gICAgICAgICAgcHJlZml4ID0gKHRoaXMuY3Vyc29yID09PSBpID8gY29sb3IuY3lhbihmaWd1cmVzLnBvaW50ZXIpICsgJyAnIDogJyAgJykgKyBwcmVmaXg7XG4gICAgICAgICAgaWYgKHYuZGVzY3JpcHRpb24gJiYgdGhpcy5jdXJzb3IgPT09IGkpIHtcbiAgICAgICAgICAgIGRlc2MgPSBgIC0gJHt2LmRlc2NyaXB0aW9ufWA7XG4gICAgICAgICAgICBpZiAocHJlZml4Lmxlbmd0aCArIHRpdGxlLmxlbmd0aCArIGRlc2MubGVuZ3RoID49IHRoaXMub3V0LmNvbHVtbnNcbiAgICAgICAgICAgICAgICB8fCB2LmRlc2NyaXB0aW9uLnNwbGl0KC9cXHI/XFxuLykubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICBkZXNjID0gJ1xcbicgKyB3cmFwKHYuZGVzY3JpcHRpb24sIHsgbWFyZ2luOiAzLCB3aWR0aDogdGhpcy5vdXQuY29sdW1ucyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm91dHB1dFRleHQgKz0gYCR7cHJlZml4fSAke3RpdGxlfSR7Y29sb3IuZ3JheShkZXNjKX1cXG5gO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMub3V0LndyaXRlKHRoaXMub3V0cHV0VGV4dCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTZWxlY3RQcm9tcHQ7XG4iLCAiY29uc3QgY29sb3IgPSByZXF1aXJlKCdrbGV1cicpO1xuY29uc3QgUHJvbXB0ID0gcmVxdWlyZSgnLi9wcm9tcHQnKTtcbmNvbnN0IHsgc3R5bGUsIGNsZWFyIH0gPSByZXF1aXJlKCcuLi91dGlsJyk7XG5jb25zdCB7IGN1cnNvciwgZXJhc2UgfSA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKTtcblxuLyoqXG4gKiBUb2dnbGVQcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdHMuaW5pdGlhbD1mYWxzZV0gRGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmFjdGl2ZT0nbm8nXSBBY3RpdmUgbGFiZWxcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5pbmFjdGl2ZT0nb2ZmJ10gSW5hY3RpdmUgbGFiZWxcbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICovXG5jbGFzcyBUb2dnbGVQcm9tcHQgZXh0ZW5kcyBQcm9tcHQge1xuICBjb25zdHJ1Y3RvcihvcHRzPXt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy5tc2cgPSBvcHRzLm1lc3NhZ2U7XG4gICAgdGhpcy52YWx1ZSA9ICEhb3B0cy5pbml0aWFsO1xuICAgIHRoaXMuYWN0aXZlID0gb3B0cy5hY3RpdmUgfHwgJ29uJztcbiAgICB0aGlzLmluYWN0aXZlID0gb3B0cy5pbmFjdGl2ZSB8fCAnb2ZmJztcbiAgICB0aGlzLmluaXRpYWxWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLmluaXRpYWxWYWx1ZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZXhpdCgpIHtcbiAgICB0aGlzLmFib3J0KCk7XG4gIH1cblxuICBhYm9ydCgpIHtcbiAgICB0aGlzLmRvbmUgPSB0aGlzLmFib3J0ZWQgPSB0cnVlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIHN1Ym1pdCgpIHtcbiAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgIHRoaXMuYWJvcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIGRlYWN0aXZhdGUoKSB7XG4gICAgaWYgKHRoaXMudmFsdWUgPT09IGZhbHNlKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy52YWx1ZSA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBhY3RpdmF0ZSgpIHtcbiAgICBpZiAodGhpcy52YWx1ZSA9PT0gdHJ1ZSkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMudmFsdWUgPSB0cnVlO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkZWxldGUoKSB7XG4gICAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gIH1cbiAgbGVmdCgpIHtcbiAgICB0aGlzLmRlYWN0aXZhdGUoKTtcbiAgfVxuICByaWdodCgpIHtcbiAgICB0aGlzLmFjdGl2YXRlKCk7XG4gIH1cbiAgZG93bigpIHtcbiAgICB0aGlzLmRlYWN0aXZhdGUoKTtcbiAgfVxuICB1cCgpIHtcbiAgICB0aGlzLmFjdGl2YXRlKCk7XG4gIH1cblxuICBuZXh0KCkge1xuICAgIHRoaXMudmFsdWUgPSAhdGhpcy52YWx1ZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgXyhjLCBrZXkpIHtcbiAgICBpZiAoYyA9PT0gJyAnKSB7XG4gICAgICB0aGlzLnZhbHVlID0gIXRoaXMudmFsdWU7XG4gICAgfSBlbHNlIGlmIChjID09PSAnMScpIHtcbiAgICAgIHRoaXMudmFsdWUgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gJzAnKSB7XG4gICAgICB0aGlzLnZhbHVlID0gZmFsc2U7XG4gICAgfSBlbHNlIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLmNsb3NlZCkgcmV0dXJuO1xuICAgIGlmICh0aGlzLmZpcnN0UmVuZGVyKSB0aGlzLm91dC53cml0ZShjdXJzb3IuaGlkZSk7XG4gICAgZWxzZSB0aGlzLm91dC53cml0ZShjbGVhcih0aGlzLm91dHB1dFRleHQsIHRoaXMub3V0LmNvbHVtbnMpKTtcbiAgICBzdXBlci5yZW5kZXIoKTtcblxuICAgIHRoaXMub3V0cHV0VGV4dCA9IFtcbiAgICAgIHN0eWxlLnN5bWJvbCh0aGlzLmRvbmUsIHRoaXMuYWJvcnRlZCksXG4gICAgICBjb2xvci5ib2xkKHRoaXMubXNnKSxcbiAgICAgIHN0eWxlLmRlbGltaXRlcih0aGlzLmRvbmUpLFxuICAgICAgdGhpcy52YWx1ZSA/IHRoaXMuaW5hY3RpdmUgOiBjb2xvci5jeWFuKCkudW5kZXJsaW5lKHRoaXMuaW5hY3RpdmUpLFxuICAgICAgY29sb3IuZ3JheSgnLycpLFxuICAgICAgdGhpcy52YWx1ZSA/IGNvbG9yLmN5YW4oKS51bmRlcmxpbmUodGhpcy5hY3RpdmUpIDogdGhpcy5hY3RpdmVcbiAgICBdLmpvaW4oJyAnKTtcblxuICAgIHRoaXMub3V0LndyaXRlKGVyYXNlLmxpbmUgKyBjdXJzb3IudG8oMCkgKyB0aGlzLm91dHB1dFRleHQpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVG9nZ2xlUHJvbXB0O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY2xhc3MgRGF0ZVBhcnQge1xuICBjb25zdHJ1Y3Rvcih7dG9rZW4sIGRhdGUsIHBhcnRzLCBsb2NhbGVzfSkge1xuICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgICB0aGlzLmRhdGUgPSBkYXRlIHx8IG5ldyBEYXRlKCk7XG4gICAgdGhpcy5wYXJ0cyA9IHBhcnRzIHx8IFt0aGlzXTtcbiAgICB0aGlzLmxvY2FsZXMgPSBsb2NhbGVzIHx8IHt9O1xuICB9XG5cbiAgdXAoKSB7fVxuXG4gIGRvd24oKSB7fVxuXG4gIG5leHQoKSB7XG4gICAgY29uc3QgY3VycmVudElkeCA9IHRoaXMucGFydHMuaW5kZXhPZih0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5wYXJ0cy5maW5kKChwYXJ0LCBpZHgpID0+IGlkeCA+IGN1cnJlbnRJZHggJiYgcGFydCBpbnN0YW5jZW9mIERhdGVQYXJ0KTtcbiAgfVxuXG4gIHNldFRvKHZhbCkge31cblxuICBwcmV2KCkge1xuICAgIGxldCBwYXJ0cyA9IFtdLmNvbmNhdCh0aGlzLnBhcnRzKS5yZXZlcnNlKCk7XG4gICAgY29uc3QgY3VycmVudElkeCA9IHBhcnRzLmluZGV4T2YodGhpcyk7XG4gICAgcmV0dXJuIHBhcnRzLmZpbmQoKHBhcnQsIGlkeCkgPT4gaWR4ID4gY3VycmVudElkeCAmJiBwYXJ0IGluc3RhbmNlb2YgRGF0ZVBhcnQpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIFN0cmluZyh0aGlzLmRhdGUpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0ZVBhcnQ7XG5cblxuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGF0ZVBhcnQgPSByZXF1aXJlKCcuL2RhdGVwYXJ0Jyk7XG5cbmNsYXNzIE1lcmlkaWVtIGV4dGVuZHMgRGF0ZVBhcnQge1xuICBjb25zdHJ1Y3RvcihvcHRzPXt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gIH1cblxuICB1cCgpIHtcbiAgICB0aGlzLmRhdGUuc2V0SG91cnMoKHRoaXMuZGF0ZS5nZXRIb3VycygpICsgMTIpICUgMjQpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLnVwKCk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICBsZXQgbWVyaWRpZW0gPSB0aGlzLmRhdGUuZ2V0SG91cnMoKSA+IDEyID8gJ3BtJyA6ICdhbSc7XG4gICAgcmV0dXJuIC9cXEEvLnRlc3QodGhpcy50b2tlbikgPyBtZXJpZGllbS50b1VwcGVyQ2FzZSgpIDogbWVyaWRpZW07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNZXJpZGllbTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IERhdGVQYXJ0ID0gcmVxdWlyZSgnLi9kYXRlcGFydCcpO1xuXG5jb25zdCBwb3MgPSBuID0+IHtcbiAgbiA9IG4gJSAxMDtcbiAgcmV0dXJuIG4gPT09IDEgPyAnc3QnXG4gICAgICAgOiBuID09PSAyID8gJ25kJ1xuICAgICAgIDogbiA9PT0gMyA/ICdyZCdcbiAgICAgICA6ICd0aCc7XG59XG5cbmNsYXNzIERheSBleHRlbmRzIERhdGVQYXJ0IHtcbiAgY29uc3RydWN0b3Iob3B0cz17fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgdGhpcy5kYXRlLnNldERhdGUodGhpcy5kYXRlLmdldERhdGUoKSArIDEpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLmRhdGUuc2V0RGF0ZSh0aGlzLmRhdGUuZ2V0RGF0ZSgpIC0gMSk7XG4gIH1cblxuICBzZXRUbyh2YWwpIHtcbiAgICB0aGlzLmRhdGUuc2V0RGF0ZShwYXJzZUludCh2YWwuc3Vic3RyKC0yKSkpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IGRhdGUgPSB0aGlzLmRhdGUuZ2V0RGF0ZSgpO1xuICAgIGxldCBkYXkgPSB0aGlzLmRhdGUuZ2V0RGF5KCk7XG4gICAgcmV0dXJuIHRoaXMudG9rZW4gPT09ICdERCcgPyBTdHJpbmcoZGF0ZSkucGFkU3RhcnQoMiwgJzAnKVxuICAgICAgICAgOiB0aGlzLnRva2VuID09PSAnRG8nID8gZGF0ZSArIHBvcyhkYXRlKVxuICAgICAgICAgOiB0aGlzLnRva2VuID09PSAnZCcgPyBkYXkgKyAxXG4gICAgICAgICA6IHRoaXMudG9rZW4gPT09ICdkZGQnID8gdGhpcy5sb2NhbGVzLndlZWtkYXlzU2hvcnRbZGF5XVxuICAgICAgICAgOiB0aGlzLnRva2VuID09PSAnZGRkZCcgPyB0aGlzLmxvY2FsZXMud2Vla2RheXNbZGF5XVxuICAgICAgICAgOiBkYXRlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGF5O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGF0ZVBhcnQgPSByZXF1aXJlKCcuL2RhdGVwYXJ0Jyk7XG5cbmNsYXNzIEhvdXJzIGV4dGVuZHMgRGF0ZVBhcnQge1xuICBjb25zdHJ1Y3RvcihvcHRzPXt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gIH1cblxuICB1cCgpIHtcbiAgICB0aGlzLmRhdGUuc2V0SG91cnModGhpcy5kYXRlLmdldEhvdXJzKCkgKyAxKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgdGhpcy5kYXRlLnNldEhvdXJzKHRoaXMuZGF0ZS5nZXRIb3VycygpIC0gMSk7XG4gIH1cblxuICBzZXRUbyh2YWwpIHtcbiAgICB0aGlzLmRhdGUuc2V0SG91cnMocGFyc2VJbnQodmFsLnN1YnN0cigtMikpKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCBob3VycyA9IHRoaXMuZGF0ZS5nZXRIb3VycygpO1xuICAgIGlmICgvaC8udGVzdCh0aGlzLnRva2VuKSlcbiAgICAgIGhvdXJzID0gKGhvdXJzICUgMTIpIHx8IDEyO1xuICAgIHJldHVybiB0aGlzLnRva2VuLmxlbmd0aCA+IDEgPyBTdHJpbmcoaG91cnMpLnBhZFN0YXJ0KDIsICcwJykgOiBob3VycztcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEhvdXJzO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGF0ZVBhcnQgPSByZXF1aXJlKCcuL2RhdGVwYXJ0Jyk7XG5cbmNsYXNzIE1pbGxpc2Vjb25kcyBleHRlbmRzIERhdGVQYXJ0IHtcbiAgY29uc3RydWN0b3Iob3B0cz17fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgdGhpcy5kYXRlLnNldE1pbGxpc2Vjb25kcyh0aGlzLmRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkgKyAxKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgdGhpcy5kYXRlLnNldE1pbGxpc2Vjb25kcyh0aGlzLmRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkgLSAxKTtcbiAgfVxuXG4gIHNldFRvKHZhbCkge1xuICAgIHRoaXMuZGF0ZS5zZXRNaWxsaXNlY29uZHMocGFyc2VJbnQodmFsLnN1YnN0cigtKHRoaXMudG9rZW4ubGVuZ3RoKSkpKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBTdHJpbmcodGhpcy5kYXRlLmdldE1pbGxpc2Vjb25kcygpKS5wYWRTdGFydCg0LCAnMCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN1YnN0cigwLCB0aGlzLnRva2VuLmxlbmd0aCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNaWxsaXNlY29uZHM7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBEYXRlUGFydCA9IHJlcXVpcmUoJy4vZGF0ZXBhcnQnKTtcblxuY2xhc3MgTWludXRlcyBleHRlbmRzIERhdGVQYXJ0IHtcbiAgY29uc3RydWN0b3Iob3B0cz17fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgdGhpcy5kYXRlLnNldE1pbnV0ZXModGhpcy5kYXRlLmdldE1pbnV0ZXMoKSArIDEpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLmRhdGUuc2V0TWludXRlcyh0aGlzLmRhdGUuZ2V0TWludXRlcygpIC0gMSk7XG4gIH1cblxuICBzZXRUbyh2YWwpIHtcbiAgICB0aGlzLmRhdGUuc2V0TWludXRlcyhwYXJzZUludCh2YWwuc3Vic3RyKC0yKSkpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IG0gPSB0aGlzLmRhdGUuZ2V0TWludXRlcygpO1xuICAgIHJldHVybiB0aGlzLnRva2VuLmxlbmd0aCA+IDEgPyBTdHJpbmcobSkucGFkU3RhcnQoMiwgJzAnKSA6IG07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNaW51dGVzO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGF0ZVBhcnQgPSByZXF1aXJlKCcuL2RhdGVwYXJ0Jyk7XG5cbmNsYXNzIE1vbnRoIGV4dGVuZHMgRGF0ZVBhcnQge1xuICBjb25zdHJ1Y3RvcihvcHRzPXt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gIH1cblxuICB1cCgpIHtcbiAgICB0aGlzLmRhdGUuc2V0TW9udGgodGhpcy5kYXRlLmdldE1vbnRoKCkgKyAxKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgdGhpcy5kYXRlLnNldE1vbnRoKHRoaXMuZGF0ZS5nZXRNb250aCgpIC0gMSk7XG4gIH1cblxuICBzZXRUbyh2YWwpIHtcbiAgICB2YWwgPSBwYXJzZUludCh2YWwuc3Vic3RyKC0yKSkgLSAxO1xuICAgIHRoaXMuZGF0ZS5zZXRNb250aCh2YWwgPCAwID8gMCA6IHZhbCk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICBsZXQgbW9udGggPSB0aGlzLmRhdGUuZ2V0TW9udGgoKTtcbiAgICBsZXQgdGwgPSB0aGlzLnRva2VuLmxlbmd0aDtcbiAgICByZXR1cm4gdGwgPT09IDIgPyBTdHJpbmcobW9udGggKyAxKS5wYWRTdGFydCgyLCAnMCcpXG4gICAgICAgICAgIDogdGwgPT09IDMgPyB0aGlzLmxvY2FsZXMubW9udGhzU2hvcnRbbW9udGhdXG4gICAgICAgICAgICAgOiB0bCA9PT0gNCA/IHRoaXMubG9jYWxlcy5tb250aHNbbW9udGhdXG4gICAgICAgICAgICAgICA6IFN0cmluZyhtb250aCArIDEpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTW9udGg7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBEYXRlUGFydCA9IHJlcXVpcmUoJy4vZGF0ZXBhcnQnKTtcblxuY2xhc3MgU2Vjb25kcyBleHRlbmRzIERhdGVQYXJ0IHtcbiAgY29uc3RydWN0b3Iob3B0cz17fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgdGhpcy5kYXRlLnNldFNlY29uZHModGhpcy5kYXRlLmdldFNlY29uZHMoKSArIDEpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLmRhdGUuc2V0U2Vjb25kcyh0aGlzLmRhdGUuZ2V0U2Vjb25kcygpIC0gMSk7XG4gIH1cblxuICBzZXRUbyh2YWwpIHtcbiAgICB0aGlzLmRhdGUuc2V0U2Vjb25kcyhwYXJzZUludCh2YWwuc3Vic3RyKC0yKSkpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IHMgPSB0aGlzLmRhdGUuZ2V0U2Vjb25kcygpO1xuICAgIHJldHVybiB0aGlzLnRva2VuLmxlbmd0aCA+IDEgPyBTdHJpbmcocykucGFkU3RhcnQoMiwgJzAnKSA6IHM7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTZWNvbmRzO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGF0ZVBhcnQgPSByZXF1aXJlKCcuL2RhdGVwYXJ0Jyk7XG5cbmNsYXNzIFllYXIgZXh0ZW5kcyBEYXRlUGFydCB7XG4gIGNvbnN0cnVjdG9yKG9wdHM9e30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRGdWxsWWVhcih0aGlzLmRhdGUuZ2V0RnVsbFllYXIoKSArIDEpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLmRhdGUuc2V0RnVsbFllYXIodGhpcy5kYXRlLmdldEZ1bGxZZWFyKCkgLSAxKTtcbiAgfVxuXG4gIHNldFRvKHZhbCkge1xuICAgIHRoaXMuZGF0ZS5zZXRGdWxsWWVhcih2YWwuc3Vic3RyKC00KSk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICBsZXQgeWVhciA9IFN0cmluZyh0aGlzLmRhdGUuZ2V0RnVsbFllYXIoKSkucGFkU3RhcnQoNCwgJzAnKTtcbiAgICByZXR1cm4gdGhpcy50b2tlbi5sZW5ndGggPT09IDIgPyB5ZWFyLnN1YnN0cigtMikgOiB5ZWFyO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gWWVhcjtcbiIsICIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBEYXRlUGFydDogcmVxdWlyZSgnLi9kYXRlcGFydCcpLFxuICBNZXJpZGllbTogcmVxdWlyZSgnLi9tZXJpZGllbScpLFxuICBEYXk6IHJlcXVpcmUoJy4vZGF5JyksXG4gIEhvdXJzOiByZXF1aXJlKCcuL2hvdXJzJyksXG4gIE1pbGxpc2Vjb25kczogcmVxdWlyZSgnLi9taWxsaXNlY29uZHMnKSxcbiAgTWludXRlczogcmVxdWlyZSgnLi9taW51dGVzJyksXG4gIE1vbnRoOiByZXF1aXJlKCcuL21vbnRoJyksXG4gIFNlY29uZHM6IHJlcXVpcmUoJy4vc2Vjb25kcycpLFxuICBZZWFyOiByZXF1aXJlKCcuL3llYXInKSxcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNvbG9yID0gcmVxdWlyZSgna2xldXInKTtcbmNvbnN0IFByb21wdCA9IHJlcXVpcmUoJy4vcHJvbXB0Jyk7XG5jb25zdCB7IHN0eWxlLCBjbGVhciwgZmlndXJlcyB9ID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuY29uc3QgeyBlcmFzZSwgY3Vyc29yIH0gPSByZXF1aXJlKCdzaXN0ZXJhbnNpJyk7XG5jb25zdCB7IERhdGVQYXJ0LCBNZXJpZGllbSwgRGF5LCBIb3VycywgTWlsbGlzZWNvbmRzLCBNaW51dGVzLCBNb250aCwgU2Vjb25kcywgWWVhciB9ID0gcmVxdWlyZSgnLi4vZGF0ZXBhcnRzJyk7XG5cbmNvbnN0IHJlZ2V4ID0gL1xcXFwoLil8XCIoKD86XFxcXFtcIlxcXFxdfFteXCJdKSspXCJ8KERbRG9dP3xkezMsNH18ZCl8KE17MSw0fSl8KFlZKD86WVkpPyl8KFthQV0pfChbSGhdezEsMn0pfChtezEsMn0pfChzezEsMn0pfChTezEsNH0pfC4vZztcbmNvbnN0IHJlZ2V4R3JvdXBzID0ge1xuICAxOiAoe3Rva2VufSkgPT4gdG9rZW4ucmVwbGFjZSgvXFxcXCguKS9nLCAnJDEnKSxcbiAgMjogKG9wdHMpID0+IG5ldyBEYXkob3B0cyksIC8vIERheSAvLyBUT0RPXG4gIDM6IChvcHRzKSA9PiBuZXcgTW9udGgob3B0cyksIC8vIE1vbnRoXG4gIDQ6IChvcHRzKSA9PiBuZXcgWWVhcihvcHRzKSwgLy8gWWVhclxuICA1OiAob3B0cykgPT4gbmV3IE1lcmlkaWVtKG9wdHMpLCAvLyBBTS9QTSAvLyBUT0RPIChzcGVjaWFsKVxuICA2OiAob3B0cykgPT4gbmV3IEhvdXJzKG9wdHMpLCAvLyBIb3Vyc1xuICA3OiAob3B0cykgPT4gbmV3IE1pbnV0ZXMob3B0cyksIC8vIE1pbnV0ZXNcbiAgODogKG9wdHMpID0+IG5ldyBTZWNvbmRzKG9wdHMpLCAvLyBTZWNvbmRzXG4gIDk6IChvcHRzKSA9PiBuZXcgTWlsbGlzZWNvbmRzKG9wdHMpLCAvLyBGcmFjdGlvbmFsIHNlY29uZHNcbn1cblxuY29uc3QgZGZsdExvY2FsZXMgPSB7XG4gIG1vbnRoczogJ0phbnVhcnksRmVicnVhcnksTWFyY2gsQXByaWwsTWF5LEp1bmUsSnVseSxBdWd1c3QsU2VwdGVtYmVyLE9jdG9iZXIsTm92ZW1iZXIsRGVjZW1iZXInLnNwbGl0KCcsJyksXG4gIG1vbnRoc1Nob3J0OiAnSmFuLEZlYixNYXIsQXByLE1heSxKdW4sSnVsLEF1ZyxTZXAsT2N0LE5vdixEZWMnLnNwbGl0KCcsJyksXG4gIHdlZWtkYXlzOiAnU3VuZGF5LE1vbmRheSxUdWVzZGF5LFdlZG5lc2RheSxUaHVyc2RheSxGcmlkYXksU2F0dXJkYXknLnNwbGl0KCcsJyksXG4gIHdlZWtkYXlzU2hvcnQ6ICdTdW4sTW9uLFR1ZSxXZWQsVGh1LEZyaSxTYXQnLnNwbGl0KCcsJylcbn1cblxuXG4vKipcbiAqIERhdGVQcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5pbml0aWFsXSBJbmRleCBvZiBkZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMubWFza10gVGhlIGZvcm1hdCBtYXNrXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdHMubG9jYWxlc10gVGhlIGRhdGUgbG9jYWxlc1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmVycm9yXSBUaGUgZXJyb3IgbWVzc2FnZSBzaG93biBvbiBpbnZhbGlkIHZhbHVlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy52YWxpZGF0ZV0gRnVuY3Rpb24gdG8gdmFsaWRhdGUgdGhlIHN1Ym1pdHRlZCB2YWx1ZVxuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKi9cbmNsYXNzIERhdGVQcm9tcHQgZXh0ZW5kcyBQcm9tcHQge1xuICBjb25zdHJ1Y3RvcihvcHRzPXt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy5tc2cgPSBvcHRzLm1lc3NhZ2U7XG4gICAgdGhpcy5jdXJzb3IgPSAwO1xuICAgIHRoaXMudHlwZWQgPSAnJztcbiAgICB0aGlzLmxvY2FsZXMgPSBPYmplY3QuYXNzaWduKGRmbHRMb2NhbGVzLCBvcHRzLmxvY2FsZXMpO1xuICAgIHRoaXMuX2RhdGUgPSBvcHRzLmluaXRpYWwgfHwgbmV3IERhdGUoKTtcbiAgICB0aGlzLmVycm9yTXNnID0gb3B0cy5lcnJvciB8fCAnUGxlYXNlIEVudGVyIEEgVmFsaWQgVmFsdWUnO1xuICAgIHRoaXMudmFsaWRhdG9yID0gb3B0cy52YWxpZGF0ZSB8fCAoKCkgPT4gdHJ1ZSk7XG4gICAgdGhpcy5tYXNrID0gb3B0cy5tYXNrIHx8ICdZWVlZLU1NLUREIEhIOm1tOnNzJztcbiAgICB0aGlzLmNsZWFyID0gY2xlYXIoJycsIHRoaXMub3V0LmNvbHVtbnMpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0ZVxuICB9XG5cbiAgZ2V0IGRhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGU7XG4gIH1cblxuICBzZXQgZGF0ZShkYXRlKSB7XG4gICAgaWYgKGRhdGUpIHRoaXMuX2RhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSk7XG4gIH1cblxuICBzZXQgbWFzayhtYXNrKSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0aGlzLnBhcnRzID0gW107XG4gICAgd2hpbGUocmVzdWx0ID0gcmVnZXguZXhlYyhtYXNrKSkge1xuICAgICAgbGV0IG1hdGNoID0gcmVzdWx0LnNoaWZ0KCk7XG4gICAgICBsZXQgaWR4ID0gcmVzdWx0LmZpbmRJbmRleChnciA9PiBnciAhPSBudWxsKTtcbiAgICAgIHRoaXMucGFydHMucHVzaChpZHggaW4gcmVnZXhHcm91cHNcbiAgICAgICAgPyByZWdleEdyb3Vwc1tpZHhdKHsgdG9rZW46IHJlc3VsdFtpZHhdIHx8IG1hdGNoLCBkYXRlOiB0aGlzLmRhdGUsIHBhcnRzOiB0aGlzLnBhcnRzLCBsb2NhbGVzOiB0aGlzLmxvY2FsZXMgfSlcbiAgICAgICAgOiByZXN1bHRbaWR4XSB8fCBtYXRjaCk7XG4gICAgfVxuXG4gICAgbGV0IHBhcnRzID0gdGhpcy5wYXJ0cy5yZWR1Y2UoKGFyciwgaSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBpID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgYXJyW2Fyci5sZW5ndGggLSAxXSA9PT0gJ3N0cmluZycpXG4gICAgICAgIGFyclthcnIubGVuZ3RoIC0gMV0gKz0gaTtcbiAgICAgIGVsc2UgYXJyLnB1c2goaSk7XG4gICAgICByZXR1cm4gYXJyO1xuICAgIH0sIFtdKTtcblxuICAgIHRoaXMucGFydHMuc3BsaWNlKDApO1xuICAgIHRoaXMucGFydHMucHVzaCguLi5wYXJ0cyk7XG4gICAgdGhpcy5yZXNldCgpO1xuICB9XG5cbiAgbW92ZUN1cnNvcihuKSB7XG4gICAgdGhpcy50eXBlZCA9ICcnO1xuICAgIHRoaXMuY3Vyc29yID0gbjtcbiAgICB0aGlzLmZpcmUoKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMubW92ZUN1cnNvcih0aGlzLnBhcnRzLmZpbmRJbmRleChwID0+IHAgaW5zdGFuY2VvZiBEYXRlUGFydCkpO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBleGl0KCkge1xuICAgIHRoaXMuYWJvcnQoKTtcbiAgfVxuXG4gIGFib3J0KCkge1xuICAgIHRoaXMuZG9uZSA9IHRoaXMuYWJvcnRlZCA9IHRydWU7XG4gICAgdGhpcy5lcnJvciA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIGFzeW5jIHZhbGlkYXRlKCkge1xuICAgIGxldCB2YWxpZCA9IGF3YWl0IHRoaXMudmFsaWRhdG9yKHRoaXMudmFsdWUpO1xuICAgIGlmICh0eXBlb2YgdmFsaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLmVycm9yTXNnID0gdmFsaWQ7XG4gICAgICB2YWxpZCA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmVycm9yID0gIXZhbGlkO1xuICB9XG5cbiAgYXN5bmMgc3VibWl0KCkge1xuICAgIGF3YWl0IHRoaXMudmFsaWRhdGUoKTtcbiAgICBpZiAodGhpcy5lcnJvcikge1xuICAgICAgdGhpcy5jb2xvciA9ICdyZWQnO1xuICAgICAgdGhpcy5maXJlKCk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgIHRoaXMuYWJvcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMudHlwZWQgPSAnJztcbiAgICB0aGlzLnBhcnRzW3RoaXMuY3Vyc29yXS51cCgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIHRoaXMudHlwZWQgPSAnJztcbiAgICB0aGlzLnBhcnRzW3RoaXMuY3Vyc29yXS5kb3duKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGxlZnQoKSB7XG4gICAgbGV0IHByZXYgPSB0aGlzLnBhcnRzW3RoaXMuY3Vyc29yXS5wcmV2KCk7XG4gICAgaWYgKHByZXYgPT0gbnVsbCkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMubW92ZUN1cnNvcih0aGlzLnBhcnRzLmluZGV4T2YocHJldikpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByaWdodCgpIHtcbiAgICBsZXQgbmV4dCA9IHRoaXMucGFydHNbdGhpcy5jdXJzb3JdLm5leHQoKTtcbiAgICBpZiAobmV4dCA9PSBudWxsKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy5tb3ZlQ3Vyc29yKHRoaXMucGFydHMuaW5kZXhPZihuZXh0KSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgbGV0IG5leHQgPSB0aGlzLnBhcnRzW3RoaXMuY3Vyc29yXS5uZXh0KCk7XG4gICAgdGhpcy5tb3ZlQ3Vyc29yKG5leHRcbiAgICAgID8gdGhpcy5wYXJ0cy5pbmRleE9mKG5leHQpXG4gICAgICA6IHRoaXMucGFydHMuZmluZEluZGV4KChwYXJ0KSA9PiBwYXJ0IGluc3RhbmNlb2YgRGF0ZVBhcnQpKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgXyhjKSB7XG4gICAgaWYgKC9cXGQvLnRlc3QoYykpIHtcbiAgICAgIHRoaXMudHlwZWQgKz0gYztcbiAgICAgIHRoaXMucGFydHNbdGhpcy5jdXJzb3JdLnNldFRvKHRoaXMudHlwZWQpO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuY2xvc2VkKSByZXR1cm47XG4gICAgaWYgKHRoaXMuZmlyc3RSZW5kZXIpIHRoaXMub3V0LndyaXRlKGN1cnNvci5oaWRlKTtcbiAgICBlbHNlIHRoaXMub3V0LndyaXRlKGNsZWFyKHRoaXMub3V0cHV0VGV4dCwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgIHN1cGVyLnJlbmRlcigpO1xuXG4gICAgLy8gUHJpbnQgcHJvbXB0XG4gICAgdGhpcy5vdXRwdXRUZXh0ID0gW1xuICAgICAgc3R5bGUuc3ltYm9sKHRoaXMuZG9uZSwgdGhpcy5hYm9ydGVkKSxcbiAgICAgIGNvbG9yLmJvbGQodGhpcy5tc2cpLFxuICAgICAgc3R5bGUuZGVsaW1pdGVyKGZhbHNlKSxcbiAgICAgIHRoaXMucGFydHMucmVkdWNlKChhcnIsIHAsIGlkeCkgPT4gYXJyLmNvbmNhdChpZHggPT09IHRoaXMuY3Vyc29yICYmICF0aGlzLmRvbmUgPyBjb2xvci5jeWFuKCkudW5kZXJsaW5lKHAudG9TdHJpbmcoKSkgOiBwKSwgW10pXG4gICAgICAgICAgLmpvaW4oJycpXG4gICAgXS5qb2luKCcgJyk7XG5cbiAgICAvLyBQcmludCBlcnJvclxuICAgIGlmICh0aGlzLmVycm9yKSB7XG4gICAgICB0aGlzLm91dHB1dFRleHQgKz0gdGhpcy5lcnJvck1zZy5zcGxpdCgnXFxuJykucmVkdWNlKFxuICAgICAgICAgIChhLCBsLCBpKSA9PiBhICsgYFxcbiR7aSA/IGAgYCA6IGZpZ3VyZXMucG9pbnRlclNtYWxsfSAke2NvbG9yLnJlZCgpLml0YWxpYyhsKX1gLCBgYCk7XG4gICAgfVxuXG4gICAgdGhpcy5vdXQud3JpdGUoZXJhc2UubGluZSArIGN1cnNvci50bygwKSArIHRoaXMub3V0cHV0VGV4dCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEYXRlUHJvbXB0O1xuIiwgImNvbnN0IGNvbG9yID0gcmVxdWlyZSgna2xldXInKTtcbmNvbnN0IFByb21wdCA9IHJlcXVpcmUoJy4vcHJvbXB0Jyk7XG5jb25zdCB7IGN1cnNvciwgZXJhc2UgfSA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKTtcbmNvbnN0IHsgc3R5bGUsIGZpZ3VyZXMsIGNsZWFyLCBsaW5lcyB9ID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuXG5jb25zdCBpc051bWJlciA9IC9bMC05XS87XG5jb25zdCBpc0RlZiA9IGFueSA9PiBhbnkgIT09IHVuZGVmaW5lZDtcbmNvbnN0IHJvdW5kID0gKG51bWJlciwgcHJlY2lzaW9uKSA9PiB7XG4gIGxldCBmYWN0b3IgPSBNYXRoLnBvdygxMCwgcHJlY2lzaW9uKTtcbiAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyICogZmFjdG9yKSAvIGZhY3Rvcjtcbn1cblxuLyoqXG4gKiBOdW1iZXJQcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5zdHlsZT0nZGVmYXVsdCddIFJlbmRlciBzdHlsZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmluaXRpYWxdIERlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5tYXg9K0luZmluaXR5XSBNYXggdmFsdWVcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5taW49LUluZmluaXR5XSBNaW4gdmFsdWVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdHMuZmxvYXQ9ZmFsc2VdIFBhcnNlIGlucHV0IGFzIGZsb2F0c1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLnJvdW5kPTJdIFJvdW5kIGZsb2F0cyB0byB4IGRlY2ltYWxzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMuaW5jcmVtZW50PTFdIE51bWJlciB0byBpbmNyZW1lbnQgYnkgd2hlbiB1c2luZyBhcnJvdy1rZXlzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy52YWxpZGF0ZV0gVmFsaWRhdGUgZnVuY3Rpb25cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmVycm9yXSBUaGUgaW52YWxpZCBlcnJvciBsYWJlbFxuICovXG5jbGFzcyBOdW1iZXJQcm9tcHQgZXh0ZW5kcyBQcm9tcHQge1xuICBjb25zdHJ1Y3RvcihvcHRzPXt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy50cmFuc2Zvcm0gPSBzdHlsZS5yZW5kZXIob3B0cy5zdHlsZSk7XG4gICAgdGhpcy5tc2cgPSBvcHRzLm1lc3NhZ2U7XG4gICAgdGhpcy5pbml0aWFsID0gaXNEZWYob3B0cy5pbml0aWFsKSA/IG9wdHMuaW5pdGlhbCA6ICcnO1xuICAgIHRoaXMuZmxvYXQgPSAhIW9wdHMuZmxvYXQ7XG4gICAgdGhpcy5yb3VuZCA9IG9wdHMucm91bmQgfHwgMjtcbiAgICB0aGlzLmluYyA9IG9wdHMuaW5jcmVtZW50IHx8IDE7XG4gICAgdGhpcy5taW4gPSBpc0RlZihvcHRzLm1pbikgPyBvcHRzLm1pbiA6IC1JbmZpbml0eTtcbiAgICB0aGlzLm1heCA9IGlzRGVmKG9wdHMubWF4KSA/IG9wdHMubWF4IDogSW5maW5pdHk7XG4gICAgdGhpcy5lcnJvck1zZyA9IG9wdHMuZXJyb3IgfHwgYFBsZWFzZSBFbnRlciBBIFZhbGlkIFZhbHVlYDtcbiAgICB0aGlzLnZhbGlkYXRvciA9IG9wdHMudmFsaWRhdGUgfHwgKCgpID0+IHRydWUpO1xuICAgIHRoaXMuY29sb3IgPSBgY3lhbmA7XG4gICAgdGhpcy52YWx1ZSA9IGBgO1xuICAgIHRoaXMudHlwZWQgPSBgYDtcbiAgICB0aGlzLmxhc3RIaXQgPSAwO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBzZXQgdmFsdWUodikge1xuICAgIGlmICghdiAmJiB2ICE9PSAwKSB7XG4gICAgICB0aGlzLnBsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIHRoaXMucmVuZGVyZWQgPSBjb2xvci5ncmF5KHRoaXMudHJhbnNmb3JtLnJlbmRlcihgJHt0aGlzLmluaXRpYWx9YCkpO1xuICAgICAgdGhpcy5fdmFsdWUgPSBgYDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IGZhbHNlO1xuICAgICAgdGhpcy5yZW5kZXJlZCA9IHRoaXMudHJhbnNmb3JtLnJlbmRlcihgJHtyb3VuZCh2LCB0aGlzLnJvdW5kKX1gKTtcbiAgICAgIHRoaXMuX3ZhbHVlID0gcm91bmQodiwgdGhpcy5yb3VuZCk7XG4gICAgfVxuICAgIHRoaXMuZmlyZSgpO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIHBhcnNlKHgpIHtcbiAgICByZXR1cm4gdGhpcy5mbG9hdCA/IHBhcnNlRmxvYXQoeCkgOiBwYXJzZUludCh4KTtcbiAgfVxuXG4gIHZhbGlkKGMpIHtcbiAgICByZXR1cm4gYyA9PT0gYC1gIHx8IGMgPT09IGAuYCAmJiB0aGlzLmZsb2F0IHx8IGlzTnVtYmVyLnRlc3QoYylcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMudHlwZWQgPSBgYDtcbiAgICB0aGlzLnZhbHVlID0gYGA7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGV4aXQoKSB7XG4gICAgdGhpcy5hYm9ydCgpO1xuICB9XG5cbiAgYWJvcnQoKSB7XG4gICAgbGV0IHggPSB0aGlzLnZhbHVlO1xuICAgIHRoaXMudmFsdWUgPSB4ICE9PSBgYCA/IHggOiB0aGlzLmluaXRpYWw7XG4gICAgdGhpcy5kb25lID0gdGhpcy5hYm9ydGVkID0gdHJ1ZTtcbiAgICB0aGlzLmVycm9yID0gZmFsc2U7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm91dC53cml0ZShgXFxuYCk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgYXN5bmMgdmFsaWRhdGUoKSB7XG4gICAgbGV0IHZhbGlkID0gYXdhaXQgdGhpcy52YWxpZGF0b3IodGhpcy52YWx1ZSk7XG4gICAgaWYgKHR5cGVvZiB2YWxpZCA9PT0gYHN0cmluZ2ApIHtcbiAgICAgIHRoaXMuZXJyb3JNc2cgPSB2YWxpZDtcbiAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuZXJyb3IgPSAhdmFsaWQ7XG4gIH1cblxuICBhc3luYyBzdWJtaXQoKSB7XG4gICAgYXdhaXQgdGhpcy52YWxpZGF0ZSgpO1xuICAgIGlmICh0aGlzLmVycm9yKSB7XG4gICAgICB0aGlzLmNvbG9yID0gYHJlZGA7XG4gICAgICB0aGlzLmZpcmUoKTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB4ID0gdGhpcy52YWx1ZTtcbiAgICB0aGlzLnZhbHVlID0geCAhPT0gYGAgPyB4IDogdGhpcy5pbml0aWFsO1xuICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgdGhpcy5hYm9ydGVkID0gZmFsc2U7XG4gICAgdGhpcy5lcnJvciA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoYFxcbmApO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMudHlwZWQgPSBgYDtcbiAgICBpZih0aGlzLnZhbHVlID09PSAnJykge1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMubWluIC0gdGhpcy5pbmM7XG4gICAgfVxuICAgIGlmICh0aGlzLnZhbHVlID49IHRoaXMubWF4KSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy52YWx1ZSArPSB0aGlzLmluYztcbiAgICB0aGlzLmNvbG9yID0gYGN5YW5gO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIHRoaXMudHlwZWQgPSBgYDtcbiAgICBpZih0aGlzLnZhbHVlID09PSAnJykge1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMubWluICsgdGhpcy5pbmM7XG4gICAgfVxuICAgIGlmICh0aGlzLnZhbHVlIDw9IHRoaXMubWluKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy52YWx1ZSAtPSB0aGlzLmluYztcbiAgICB0aGlzLmNvbG9yID0gYGN5YW5gO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkZWxldGUoKSB7XG4gICAgbGV0IHZhbCA9IHRoaXMudmFsdWUudG9TdHJpbmcoKTtcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLnBhcnNlKCh2YWwgPSB2YWwuc2xpY2UoMCwgLTEpKSkgfHwgYGA7XG4gICAgaWYgKHRoaXMudmFsdWUgIT09ICcnICYmIHRoaXMudmFsdWUgPCB0aGlzLm1pbikge1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMubWluO1xuICAgIH1cbiAgICB0aGlzLmNvbG9yID0gYGN5YW5gO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBuZXh0KCkge1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLmluaXRpYWw7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIF8oYywga2V5KSB7XG4gICAgaWYgKCF0aGlzLnZhbGlkKGMpKSByZXR1cm4gdGhpcy5iZWxsKCk7XG5cbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGlmIChub3cgLSB0aGlzLmxhc3RIaXQgPiAxMDAwKSB0aGlzLnR5cGVkID0gYGA7IC8vIDFzIGVsYXBzZWRcbiAgICB0aGlzLnR5cGVkICs9IGM7XG4gICAgdGhpcy5sYXN0SGl0ID0gbm93O1xuICAgIHRoaXMuY29sb3IgPSBgY3lhbmA7XG5cbiAgICBpZiAoYyA9PT0gYC5gKSByZXR1cm4gdGhpcy5maXJlKCk7XG5cbiAgICB0aGlzLnZhbHVlID0gTWF0aC5taW4odGhpcy5wYXJzZSh0aGlzLnR5cGVkKSwgdGhpcy5tYXgpO1xuICAgIGlmICh0aGlzLnZhbHVlID4gdGhpcy5tYXgpIHRoaXMudmFsdWUgPSB0aGlzLm1heDtcbiAgICBpZiAodGhpcy52YWx1ZSA8IHRoaXMubWluKSB0aGlzLnZhbHVlID0gdGhpcy5taW47XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5jbG9zZWQpIHJldHVybjtcbiAgICBpZiAoIXRoaXMuZmlyc3RSZW5kZXIpIHtcbiAgICAgIGlmICh0aGlzLm91dHB1dEVycm9yKVxuICAgICAgICB0aGlzLm91dC53cml0ZShjdXJzb3IuZG93bihsaW5lcyh0aGlzLm91dHB1dEVycm9yLCB0aGlzLm91dC5jb2x1bW5zKSAtIDEpICsgY2xlYXIodGhpcy5vdXRwdXRFcnJvciwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgICAgdGhpcy5vdXQud3JpdGUoY2xlYXIodGhpcy5vdXRwdXRUZXh0LCB0aGlzLm91dC5jb2x1bW5zKSk7XG4gICAgfVxuICAgIHN1cGVyLnJlbmRlcigpO1xuICAgIHRoaXMub3V0cHV0RXJyb3IgPSAnJztcblxuICAgIC8vIFByaW50IHByb21wdFxuICAgIHRoaXMub3V0cHV0VGV4dCA9IFtcbiAgICAgIHN0eWxlLnN5bWJvbCh0aGlzLmRvbmUsIHRoaXMuYWJvcnRlZCksXG4gICAgICBjb2xvci5ib2xkKHRoaXMubXNnKSxcbiAgICAgIHN0eWxlLmRlbGltaXRlcih0aGlzLmRvbmUpLFxuICAgICAgIXRoaXMuZG9uZSB8fCAoIXRoaXMuZG9uZSAmJiAhdGhpcy5wbGFjZWhvbGRlcilcbiAgICAgICAgICA/IGNvbG9yW3RoaXMuY29sb3JdKCkudW5kZXJsaW5lKHRoaXMucmVuZGVyZWQpIDogdGhpcy5yZW5kZXJlZFxuICAgIF0uam9pbihgIGApO1xuXG4gICAgLy8gUHJpbnQgZXJyb3JcbiAgICBpZiAodGhpcy5lcnJvcikge1xuICAgICAgdGhpcy5vdXRwdXRFcnJvciArPSB0aGlzLmVycm9yTXNnLnNwbGl0KGBcXG5gKVxuICAgICAgICAgIC5yZWR1Y2UoKGEsIGwsIGkpID0+IGEgKyBgXFxuJHtpID8gYCBgIDogZmlndXJlcy5wb2ludGVyU21hbGx9ICR7Y29sb3IucmVkKCkuaXRhbGljKGwpfWAsIGBgKTtcbiAgICB9XG5cbiAgICB0aGlzLm91dC53cml0ZShlcmFzZS5saW5lICsgY3Vyc29yLnRvKDApICsgdGhpcy5vdXRwdXRUZXh0ICsgY3Vyc29yLnNhdmUgKyB0aGlzLm91dHB1dEVycm9yICsgY3Vyc29yLnJlc3RvcmUpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyUHJvbXB0O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY29sb3IgPSByZXF1aXJlKCdrbGV1cicpO1xuY29uc3QgeyBjdXJzb3IgfSA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKTtcbmNvbnN0IFByb21wdCA9IHJlcXVpcmUoJy4vcHJvbXB0Jyk7XG5jb25zdCB7IGNsZWFyLCBmaWd1cmVzLCBzdHlsZSwgd3JhcCwgZW50cmllc1RvRGlzcGxheSB9ID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuXG4vKipcbiAqIE11bHRpc2VsZWN0UHJvbXB0IEJhc2UgRWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG9wdHMubWVzc2FnZSBNZXNzYWdlXG4gKiBAcGFyYW0ge0FycmF5fSBvcHRzLmNob2ljZXMgQXJyYXkgb2YgY2hvaWNlIG9iamVjdHNcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5oaW50XSBIaW50IHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy53YXJuXSBIaW50IHNob3duIGZvciBkaXNhYmxlZCBjaG9pY2VzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMubWF4XSBNYXggY2hvaWNlc1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmN1cnNvcj0wXSBDdXJzb3Igc3RhcnQgcG9zaXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5vcHRpb25zUGVyUGFnZT0xMF0gTWF4IG9wdGlvbnMgdG8gZGlzcGxheSBhdCBvbmNlXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqL1xuY2xhc3MgTXVsdGlzZWxlY3RQcm9tcHQgZXh0ZW5kcyBQcm9tcHQge1xuICBjb25zdHJ1Y3RvcihvcHRzPXt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy5tc2cgPSBvcHRzLm1lc3NhZ2U7XG4gICAgdGhpcy5jdXJzb3IgPSBvcHRzLmN1cnNvciB8fCAwO1xuICAgIHRoaXMuc2Nyb2xsSW5kZXggPSBvcHRzLmN1cnNvciB8fCAwO1xuICAgIHRoaXMuaGludCA9IG9wdHMuaGludCB8fCAnJztcbiAgICB0aGlzLndhcm4gPSBvcHRzLndhcm4gfHwgJy0gVGhpcyBvcHRpb24gaXMgZGlzYWJsZWQgLSc7XG4gICAgdGhpcy5taW5TZWxlY3RlZCA9IG9wdHMubWluO1xuICAgIHRoaXMuc2hvd01pbkVycm9yID0gZmFsc2U7XG4gICAgdGhpcy5tYXhDaG9pY2VzID0gb3B0cy5tYXg7XG4gICAgdGhpcy5pbnN0cnVjdGlvbnMgPSBvcHRzLmluc3RydWN0aW9ucztcbiAgICB0aGlzLm9wdGlvbnNQZXJQYWdlID0gb3B0cy5vcHRpb25zUGVyUGFnZSB8fCAxMDtcbiAgICB0aGlzLnZhbHVlID0gb3B0cy5jaG9pY2VzLm1hcCgoY2gsIGlkeCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBjaCA9PT0gJ3N0cmluZycpXG4gICAgICAgIGNoID0ge3RpdGxlOiBjaCwgdmFsdWU6IGlkeH07XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0aXRsZTogY2ggJiYgKGNoLnRpdGxlIHx8IGNoLnZhbHVlIHx8IGNoKSxcbiAgICAgICAgZGVzY3JpcHRpb246IGNoICYmIGNoLmRlc2NyaXB0aW9uLFxuICAgICAgICB2YWx1ZTogY2ggJiYgKGNoLnZhbHVlID09PSB1bmRlZmluZWQgPyBpZHggOiBjaC52YWx1ZSksXG4gICAgICAgIHNlbGVjdGVkOiBjaCAmJiBjaC5zZWxlY3RlZCxcbiAgICAgICAgZGlzYWJsZWQ6IGNoICYmIGNoLmRpc2FibGVkXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHRoaXMuY2xlYXIgPSBjbGVhcignJywgdGhpcy5vdXQuY29sdW1ucyk7XG4gICAgaWYgKCFvcHRzLm92ZXJyaWRlUmVuZGVyKSB7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMudmFsdWUubWFwKHYgPT4gIXYuc2VsZWN0ZWQpO1xuICAgIHRoaXMuY3Vyc29yID0gMDtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgc2VsZWN0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWUuZmlsdGVyKHYgPT4gdi5zZWxlY3RlZCk7XG4gIH1cblxuICBleGl0KCkge1xuICAgIHRoaXMuYWJvcnQoKTtcbiAgfVxuXG4gIGFib3J0KCkge1xuICAgIHRoaXMuZG9uZSA9IHRoaXMuYWJvcnRlZCA9IHRydWU7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm91dC53cml0ZSgnXFxuJyk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgc3VibWl0KCkge1xuICAgIGNvbnN0IHNlbGVjdGVkID0gdGhpcy52YWx1ZVxuICAgICAgLmZpbHRlcihlID0+IGUuc2VsZWN0ZWQpO1xuICAgIGlmICh0aGlzLm1pblNlbGVjdGVkICYmIHNlbGVjdGVkLmxlbmd0aCA8IHRoaXMubWluU2VsZWN0ZWQpIHtcbiAgICAgIHRoaXMuc2hvd01pbkVycm9yID0gdHJ1ZTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgICB0aGlzLmFib3J0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuZmlyZSgpO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBmaXJzdCgpIHtcbiAgICB0aGlzLmN1cnNvciA9IDA7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGxhc3QoKSB7XG4gICAgdGhpcy5jdXJzb3IgPSB0aGlzLnZhbHVlLmxlbmd0aCAtIDE7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuICBuZXh0KCkge1xuICAgIHRoaXMuY3Vyc29yID0gKHRoaXMuY3Vyc29yICsgMSkgJSB0aGlzLnZhbHVlLmxlbmd0aDtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yID09PSAwKSB7XG4gICAgICB0aGlzLmN1cnNvciA9IHRoaXMudmFsdWUubGVuZ3RoIC0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jdXJzb3ItLTtcbiAgICB9XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yID09PSB0aGlzLnZhbHVlLmxlbmd0aCAtIDEpIHtcbiAgICAgIHRoaXMuY3Vyc29yID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jdXJzb3IrKztcbiAgICB9XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGxlZnQoKSB7XG4gICAgdGhpcy52YWx1ZVt0aGlzLmN1cnNvcl0uc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcmlnaHQoKSB7XG4gICAgaWYgKHRoaXMudmFsdWUuZmlsdGVyKGUgPT4gZS5zZWxlY3RlZCkubGVuZ3RoID49IHRoaXMubWF4Q2hvaWNlcykgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMudmFsdWVbdGhpcy5jdXJzb3JdLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgaGFuZGxlU3BhY2VUb2dnbGUoKSB7XG4gICAgY29uc3QgdiA9IHRoaXMudmFsdWVbdGhpcy5jdXJzb3JdO1xuXG4gICAgaWYgKHYuc2VsZWN0ZWQpIHtcbiAgICAgIHYuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfSBlbHNlIGlmICh2LmRpc2FibGVkIHx8IHRoaXMudmFsdWUuZmlsdGVyKGUgPT4gZS5zZWxlY3RlZCkubGVuZ3RoID49IHRoaXMubWF4Q2hvaWNlcykge1xuICAgICAgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2LnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICB9XG5cbiAgdG9nZ2xlQWxsKCkge1xuICAgIGlmICh0aGlzLm1heENob2ljZXMgIT09IHVuZGVmaW5lZCB8fCB0aGlzLnZhbHVlW3RoaXMuY3Vyc29yXS5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIH1cblxuICAgIGNvbnN0IG5ld1NlbGVjdGVkID0gIXRoaXMudmFsdWVbdGhpcy5jdXJzb3JdLnNlbGVjdGVkO1xuICAgIHRoaXMudmFsdWUuZmlsdGVyKHYgPT4gIXYuZGlzYWJsZWQpLmZvckVhY2godiA9PiB2LnNlbGVjdGVkID0gbmV3U2VsZWN0ZWQpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBfKGMsIGtleSkge1xuICAgIGlmIChjID09PSAnICcpIHtcbiAgICAgIHRoaXMuaGFuZGxlU3BhY2VUb2dnbGUoKTtcbiAgICB9IGVsc2UgaWYgKGMgPT09ICdhJykge1xuICAgICAgdGhpcy50b2dnbGVBbGwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlckluc3RydWN0aW9ucygpIHtcbiAgICBpZiAodGhpcy5pbnN0cnVjdGlvbnMgPT09IHVuZGVmaW5lZCB8fCB0aGlzLmluc3RydWN0aW9ucykge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLmluc3RydWN0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdHJ1Y3Rpb25zO1xuICAgICAgfVxuICAgICAgcmV0dXJuICdcXG5JbnN0cnVjdGlvbnM6XFxuJ1xuICAgICAgICArIGAgICAgJHtmaWd1cmVzLmFycm93VXB9LyR7ZmlndXJlcy5hcnJvd0Rvd259OiBIaWdobGlnaHQgb3B0aW9uXFxuYFxuICAgICAgICArIGAgICAgJHtmaWd1cmVzLmFycm93TGVmdH0vJHtmaWd1cmVzLmFycm93UmlnaHR9L1tzcGFjZV06IFRvZ2dsZSBzZWxlY3Rpb25cXG5gXG4gICAgICAgICsgKHRoaXMubWF4Q2hvaWNlcyA9PT0gdW5kZWZpbmVkID8gYCAgICBhOiBUb2dnbGUgYWxsXFxuYCA6ICcnKVxuICAgICAgICArIGAgICAgZW50ZXIvcmV0dXJuOiBDb21wbGV0ZSBhbnN3ZXJgO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICByZW5kZXJPcHRpb24oY3Vyc29yLCB2LCBpLCBhcnJvd0luZGljYXRvcikge1xuICAgIGNvbnN0IHByZWZpeCA9ICh2LnNlbGVjdGVkID8gY29sb3IuZ3JlZW4oZmlndXJlcy5yYWRpb09uKSA6IGZpZ3VyZXMucmFkaW9PZmYpICsgJyAnICsgYXJyb3dJbmRpY2F0b3IgKyAnICc7XG4gICAgbGV0IHRpdGxlLCBkZXNjO1xuXG4gICAgaWYgKHYuZGlzYWJsZWQpIHtcbiAgICAgIHRpdGxlID0gY3Vyc29yID09PSBpID8gY29sb3IuZ3JheSgpLnVuZGVybGluZSh2LnRpdGxlKSA6IGNvbG9yLnN0cmlrZXRocm91Z2goKS5ncmF5KHYudGl0bGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aXRsZSA9IGN1cnNvciA9PT0gaSA/IGNvbG9yLmN5YW4oKS51bmRlcmxpbmUodi50aXRsZSkgOiB2LnRpdGxlO1xuICAgICAgaWYgKGN1cnNvciA9PT0gaSAmJiB2LmRlc2NyaXB0aW9uKSB7XG4gICAgICAgIGRlc2MgPSBgIC0gJHt2LmRlc2NyaXB0aW9ufWA7XG4gICAgICAgIGlmIChwcmVmaXgubGVuZ3RoICsgdGl0bGUubGVuZ3RoICsgZGVzYy5sZW5ndGggPj0gdGhpcy5vdXQuY29sdW1uc1xuICAgICAgICAgIHx8IHYuZGVzY3JpcHRpb24uc3BsaXQoL1xccj9cXG4vKS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgZGVzYyA9ICdcXG4nICsgd3JhcCh2LmRlc2NyaXB0aW9uLCB7IG1hcmdpbjogcHJlZml4Lmxlbmd0aCwgd2lkdGg6IHRoaXMub3V0LmNvbHVtbnMgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4ICsgdGl0bGUgKyBjb2xvci5ncmF5KGRlc2MgfHwgJycpO1xuICB9XG5cbiAgLy8gc2hhcmVkIHdpdGggYXV0b2NvbXBsZXRlTXVsdGlzZWxlY3RcbiAgcGFnaW5hdGVPcHRpb25zKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBjb2xvci5yZWQoJ05vIG1hdGNoZXMgZm9yIHRoaXMgcXVlcnkuJyk7XG4gICAgfVxuXG4gICAgbGV0IHsgc3RhcnRJbmRleCwgZW5kSW5kZXggfSA9IGVudHJpZXNUb0Rpc3BsYXkodGhpcy5jdXJzb3IsIG9wdGlvbnMubGVuZ3RoLCB0aGlzLm9wdGlvbnNQZXJQYWdlKTtcbiAgICBsZXQgcHJlZml4LCBzdHlsZWRPcHRpb25zID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gc3RhcnRJbmRleDsgaSA8IGVuZEluZGV4OyBpKyspIHtcbiAgICAgIGlmIChpID09PSBzdGFydEluZGV4ICYmIHN0YXJ0SW5kZXggPiAwKSB7XG4gICAgICAgIHByZWZpeCA9IGZpZ3VyZXMuYXJyb3dVcDtcbiAgICAgIH0gZWxzZSBpZiAoaSA9PT0gZW5kSW5kZXggLSAxICYmIGVuZEluZGV4IDwgb3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgcHJlZml4ID0gZmlndXJlcy5hcnJvd0Rvd247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmVmaXggPSAnICc7XG4gICAgICB9XG4gICAgICBzdHlsZWRPcHRpb25zLnB1c2godGhpcy5yZW5kZXJPcHRpb24odGhpcy5jdXJzb3IsIG9wdGlvbnNbaV0sIGksIHByZWZpeCkpO1xuICAgIH1cblxuICAgIHJldHVybiAnXFxuJyArIHN0eWxlZE9wdGlvbnMuam9pbignXFxuJyk7XG4gIH1cblxuICAvLyBzaGFyZWQgd2l0aCBhdXRvY29tbGV0ZU11bHRpc2VsZWN0XG4gIHJlbmRlck9wdGlvbnMob3B0aW9ucykge1xuICAgIGlmICghdGhpcy5kb25lKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYWdpbmF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHJlbmRlckRvbmVPckluc3RydWN0aW9ucygpIHtcbiAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZVxuICAgICAgICAuZmlsdGVyKGUgPT4gZS5zZWxlY3RlZClcbiAgICAgICAgLm1hcCh2ID0+IHYudGl0bGUpXG4gICAgICAgIC5qb2luKCcsICcpO1xuICAgIH1cblxuICAgIGNvbnN0IG91dHB1dCA9IFtjb2xvci5ncmF5KHRoaXMuaGludCksIHRoaXMucmVuZGVySW5zdHJ1Y3Rpb25zKCldO1xuXG4gICAgaWYgKHRoaXMudmFsdWVbdGhpcy5jdXJzb3JdLmRpc2FibGVkKSB7XG4gICAgICBvdXRwdXQucHVzaChjb2xvci55ZWxsb3codGhpcy53YXJuKSk7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQuam9pbignICcpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLmNsb3NlZCkgcmV0dXJuO1xuICAgIGlmICh0aGlzLmZpcnN0UmVuZGVyKSB0aGlzLm91dC53cml0ZShjdXJzb3IuaGlkZSk7XG4gICAgc3VwZXIucmVuZGVyKCk7XG5cbiAgICAvLyBwcmludCBwcm9tcHRcbiAgICBsZXQgcHJvbXB0ID0gW1xuICAgICAgc3R5bGUuc3ltYm9sKHRoaXMuZG9uZSwgdGhpcy5hYm9ydGVkKSxcbiAgICAgIGNvbG9yLmJvbGQodGhpcy5tc2cpLFxuICAgICAgc3R5bGUuZGVsaW1pdGVyKGZhbHNlKSxcbiAgICAgIHRoaXMucmVuZGVyRG9uZU9ySW5zdHJ1Y3Rpb25zKClcbiAgICBdLmpvaW4oJyAnKTtcbiAgICBpZiAodGhpcy5zaG93TWluRXJyb3IpIHtcbiAgICAgIHByb21wdCArPSBjb2xvci5yZWQoYFlvdSBtdXN0IHNlbGVjdCBhIG1pbmltdW0gb2YgJHt0aGlzLm1pblNlbGVjdGVkfSBjaG9pY2VzLmApO1xuICAgICAgdGhpcy5zaG93TWluRXJyb3IgPSBmYWxzZTtcbiAgICB9XG4gICAgcHJvbXB0ICs9IHRoaXMucmVuZGVyT3B0aW9ucyh0aGlzLnZhbHVlKTtcblxuICAgIHRoaXMub3V0LndyaXRlKHRoaXMuY2xlYXIgKyBwcm9tcHQpO1xuICAgIHRoaXMuY2xlYXIgPSBjbGVhcihwcm9tcHQsIHRoaXMub3V0LmNvbHVtbnMpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTXVsdGlzZWxlY3RQcm9tcHQ7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb2xvciA9IHJlcXVpcmUoJ2tsZXVyJyk7XG5jb25zdCBQcm9tcHQgPSByZXF1aXJlKCcuL3Byb21wdCcpO1xuY29uc3QgeyBlcmFzZSwgY3Vyc29yIH0gPSByZXF1aXJlKCdzaXN0ZXJhbnNpJyk7XG5jb25zdCB7IHN0eWxlLCBjbGVhciwgZmlndXJlcywgd3JhcCwgZW50cmllc1RvRGlzcGxheSB9ID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuXG5jb25zdCBnZXRWYWwgPSAoYXJyLCBpKSA9PiBhcnJbaV0gJiYgKGFycltpXS52YWx1ZSB8fCBhcnJbaV0udGl0bGUgfHwgYXJyW2ldKTtcbmNvbnN0IGdldFRpdGxlID0gKGFyciwgaSkgPT4gYXJyW2ldICYmIChhcnJbaV0udGl0bGUgfHwgYXJyW2ldLnZhbHVlIHx8IGFycltpXSk7XG5jb25zdCBnZXRJbmRleCA9IChhcnIsIHZhbE9yVGl0bGUpID0+IHtcbiAgY29uc3QgaW5kZXggPSBhcnIuZmluZEluZGV4KGVsID0+IGVsLnZhbHVlID09PSB2YWxPclRpdGxlIHx8IGVsLnRpdGxlID09PSB2YWxPclRpdGxlKTtcbiAgcmV0dXJuIGluZGV4ID4gLTEgPyBpbmRleCA6IHVuZGVmaW5lZDtcbn07XG5cbi8qKlxuICogVGV4dFByb21wdCBCYXNlIEVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRzLm1lc3NhZ2UgTWVzc2FnZVxuICogQHBhcmFtIHtBcnJheX0gb3B0cy5jaG9pY2VzIEFycmF5IG9mIGF1dG8tY29tcGxldGUgY2hvaWNlcyBvYmplY3RzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy5zdWdnZXN0XSBGaWx0ZXIgZnVuY3Rpb24uIERlZmF1bHRzIHRvIHNvcnQgYnkgdGl0bGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5saW1pdD0xMF0gTWF4IG51bWJlciBvZiByZXN1bHRzIHRvIHNob3dcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5jdXJzb3I9MF0gQ3Vyc29yIHN0YXJ0IHBvc2l0aW9uXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuc3R5bGU9J2RlZmF1bHQnXSBSZW5kZXIgc3R5bGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5mYWxsYmFja10gRmFsbGJhY2sgbWVzc2FnZSAtIGluaXRpYWwgdG8gZGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmluaXRpYWxdIEluZGV4IG9mIHRoZSBkZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRzLmNsZWFyRmlyc3RdIFRoZSBmaXJzdCBFU0NBUEUga2V5cHJlc3Mgd2lsbCBjbGVhciB0aGUgaW5wdXRcbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLm5vTWF0Y2hlc10gVGhlIG5vIG1hdGNoZXMgZm91bmQgbGFiZWxcbiAqL1xuY2xhc3MgQXV0b2NvbXBsZXRlUHJvbXB0IGV4dGVuZHMgUHJvbXB0IHtcbiAgY29uc3RydWN0b3Iob3B0cz17fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXMubXNnID0gb3B0cy5tZXNzYWdlO1xuICAgIHRoaXMuc3VnZ2VzdCA9IG9wdHMuc3VnZ2VzdDtcbiAgICB0aGlzLmNob2ljZXMgPSBvcHRzLmNob2ljZXM7XG4gICAgdGhpcy5pbml0aWFsID0gdHlwZW9mIG9wdHMuaW5pdGlhbCA9PT0gJ251bWJlcidcbiAgICAgID8gb3B0cy5pbml0aWFsXG4gICAgICA6IGdldEluZGV4KG9wdHMuY2hvaWNlcywgb3B0cy5pbml0aWFsKTtcbiAgICB0aGlzLnNlbGVjdCA9IHRoaXMuaW5pdGlhbCB8fCBvcHRzLmN1cnNvciB8fCAwO1xuICAgIHRoaXMuaTE4biA9IHsgbm9NYXRjaGVzOiBvcHRzLm5vTWF0Y2hlcyB8fCAnbm8gbWF0Y2hlcyBmb3VuZCcgfTtcbiAgICB0aGlzLmZhbGxiYWNrID0gb3B0cy5mYWxsYmFjayB8fCB0aGlzLmluaXRpYWw7XG4gICAgdGhpcy5jbGVhckZpcnN0ID0gb3B0cy5jbGVhckZpcnN0IHx8IGZhbHNlO1xuICAgIHRoaXMuc3VnZ2VzdGlvbnMgPSBbXTtcbiAgICB0aGlzLmlucHV0ID0gJyc7XG4gICAgdGhpcy5saW1pdCA9IG9wdHMubGltaXQgfHwgMTA7XG4gICAgdGhpcy5jdXJzb3IgPSAwO1xuICAgIHRoaXMudHJhbnNmb3JtID0gc3R5bGUucmVuZGVyKG9wdHMuc3R5bGUpO1xuICAgIHRoaXMuc2NhbGUgPSB0aGlzLnRyYW5zZm9ybS5zY2FsZTtcbiAgICB0aGlzLnJlbmRlciA9IHRoaXMucmVuZGVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jb21wbGV0ZSA9IHRoaXMuY29tcGxldGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNsZWFyID0gY2xlYXIoJycsIHRoaXMub3V0LmNvbHVtbnMpO1xuICAgIHRoaXMuY29tcGxldGUodGhpcy5yZW5kZXIpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBzZXQgZmFsbGJhY2soZmIpIHtcbiAgICB0aGlzLl9mYiA9IE51bWJlci5pc1NhZmVJbnRlZ2VyKHBhcnNlSW50KGZiKSkgPyBwYXJzZUludChmYikgOiBmYjtcbiAgfVxuXG4gIGdldCBmYWxsYmFjaygpIHtcbiAgICBsZXQgY2hvaWNlO1xuICAgIGlmICh0eXBlb2YgdGhpcy5fZmIgPT09ICdudW1iZXInKVxuICAgICAgY2hvaWNlID0gdGhpcy5jaG9pY2VzW3RoaXMuX2ZiXTtcbiAgICBlbHNlIGlmICh0eXBlb2YgdGhpcy5fZmIgPT09ICdzdHJpbmcnKVxuICAgICAgY2hvaWNlID0geyB0aXRsZTogdGhpcy5fZmIgfTtcbiAgICByZXR1cm4gY2hvaWNlIHx8IHRoaXMuX2ZiIHx8IHsgdGl0bGU6IHRoaXMuaTE4bi5ub01hdGNoZXMgfTtcbiAgfVxuXG4gIG1vdmVTZWxlY3QoaSkge1xuICAgIHRoaXMuc2VsZWN0ID0gaTtcbiAgICBpZiAodGhpcy5zdWdnZXN0aW9ucy5sZW5ndGggPiAwKVxuICAgICAgdGhpcy52YWx1ZSA9IGdldFZhbCh0aGlzLnN1Z2dlc3Rpb25zLCBpKTtcbiAgICBlbHNlIHRoaXMudmFsdWUgPSB0aGlzLmZhbGxiYWNrLnZhbHVlO1xuICAgIHRoaXMuZmlyZSgpO1xuICB9XG5cbiAgYXN5bmMgY29tcGxldGUoY2IpIHtcbiAgICBjb25zdCBwID0gKHRoaXMuY29tcGxldGluZyA9IHRoaXMuc3VnZ2VzdCh0aGlzLmlucHV0LCB0aGlzLmNob2ljZXMpKTtcbiAgICBjb25zdCBzdWdnZXN0aW9ucyA9IGF3YWl0IHA7XG5cbiAgICBpZiAodGhpcy5jb21wbGV0aW5nICE9PSBwKSByZXR1cm47XG4gICAgdGhpcy5zdWdnZXN0aW9ucyA9IHN1Z2dlc3Rpb25zXG4gICAgICAubWFwKChzLCBpLCBhcnIpID0+ICh7IHRpdGxlOiBnZXRUaXRsZShhcnIsIGkpLCB2YWx1ZTogZ2V0VmFsKGFyciwgaSksIGRlc2NyaXB0aW9uOiBzLmRlc2NyaXB0aW9uIH0pKTtcbiAgICB0aGlzLmNvbXBsZXRpbmcgPSBmYWxzZTtcbiAgICBjb25zdCBsID0gTWF0aC5tYXgoc3VnZ2VzdGlvbnMubGVuZ3RoIC0gMSwgMCk7XG4gICAgdGhpcy5tb3ZlU2VsZWN0KE1hdGgubWluKGwsIHRoaXMuc2VsZWN0KSk7XG5cbiAgICBjYiAmJiBjYigpO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5pbnB1dCA9ICcnO1xuICAgIHRoaXMuY29tcGxldGUoKCkgPT4ge1xuICAgICAgdGhpcy5tb3ZlU2VsZWN0KHRoaXMuaW5pdGlhbCAhPT0gdm9pZCAwID8gdGhpcy5pbml0aWFsIDogMCk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH0pO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBleGl0KCkge1xuICAgIGlmICh0aGlzLmNsZWFyRmlyc3QgJiYgdGhpcy5pbnB1dC5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRoaXMuZXhpdGVkID0gdHJ1ZTsgXG4gICAgICB0aGlzLmFib3J0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuZmlyZSgpO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBhYm9ydCgpIHtcbiAgICB0aGlzLmRvbmUgPSB0aGlzLmFib3J0ZWQgPSB0cnVlO1xuICAgIHRoaXMuZXhpdGVkID0gZmFsc2U7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm91dC53cml0ZSgnXFxuJyk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgc3VibWl0KCkge1xuICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgdGhpcy5hYm9ydGVkID0gdGhpcy5leGl0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICBfKGMsIGtleSkge1xuICAgIGxldCBzMSA9IHRoaXMuaW5wdXQuc2xpY2UoMCwgdGhpcy5jdXJzb3IpO1xuICAgIGxldCBzMiA9IHRoaXMuaW5wdXQuc2xpY2UodGhpcy5jdXJzb3IpO1xuICAgIHRoaXMuaW5wdXQgPSBgJHtzMX0ke2N9JHtzMn1gO1xuICAgIHRoaXMuY3Vyc29yID0gczEubGVuZ3RoKzE7XG4gICAgdGhpcy5jb21wbGV0ZSh0aGlzLnJlbmRlcik7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRlbGV0ZSgpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IgPT09IDApIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICBsZXQgczEgPSB0aGlzLmlucHV0LnNsaWNlKDAsIHRoaXMuY3Vyc29yLTEpO1xuICAgIGxldCBzMiA9IHRoaXMuaW5wdXQuc2xpY2UodGhpcy5jdXJzb3IpO1xuICAgIHRoaXMuaW5wdXQgPSBgJHtzMX0ke3MyfWA7XG4gICAgdGhpcy5jb21wbGV0ZSh0aGlzLnJlbmRlcik7XG4gICAgdGhpcy5jdXJzb3IgPSB0aGlzLmN1cnNvci0xO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkZWxldGVGb3J3YXJkKCkge1xuICAgIGlmKHRoaXMuY3Vyc29yKnRoaXMuc2NhbGUgPj0gdGhpcy5yZW5kZXJlZC5sZW5ndGgpIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICBsZXQgczEgPSB0aGlzLmlucHV0LnNsaWNlKDAsIHRoaXMuY3Vyc29yKTtcbiAgICBsZXQgczIgPSB0aGlzLmlucHV0LnNsaWNlKHRoaXMuY3Vyc29yKzEpO1xuICAgIHRoaXMuaW5wdXQgPSBgJHtzMX0ke3MyfWA7XG4gICAgdGhpcy5jb21wbGV0ZSh0aGlzLnJlbmRlcik7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGZpcnN0KCkge1xuICAgIHRoaXMubW92ZVNlbGVjdCgwKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbGFzdCgpIHtcbiAgICB0aGlzLm1vdmVTZWxlY3QodGhpcy5zdWdnZXN0aW9ucy5sZW5ndGggLSAxKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0ID09PSAwKSB7XG4gICAgICB0aGlzLm1vdmVTZWxlY3QodGhpcy5zdWdnZXN0aW9ucy5sZW5ndGggLSAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tb3ZlU2VsZWN0KHRoaXMuc2VsZWN0IC0gMSk7XG4gICAgfVxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIGlmICh0aGlzLnNlbGVjdCA9PT0gdGhpcy5zdWdnZXN0aW9ucy5sZW5ndGggLSAxKSB7XG4gICAgICB0aGlzLm1vdmVTZWxlY3QoMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubW92ZVNlbGVjdCh0aGlzLnNlbGVjdCArIDEpO1xuICAgIH1cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbmV4dCgpIHtcbiAgICBpZiAodGhpcy5zZWxlY3QgPT09IHRoaXMuc3VnZ2VzdGlvbnMubGVuZ3RoIC0gMSkge1xuICAgICAgdGhpcy5tb3ZlU2VsZWN0KDApO1xuICAgIH0gZWxzZSB0aGlzLm1vdmVTZWxlY3QodGhpcy5zZWxlY3QgKyAxKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbmV4dFBhZ2UoKSB7XG4gICAgdGhpcy5tb3ZlU2VsZWN0KE1hdGgubWluKHRoaXMuc2VsZWN0ICsgdGhpcy5saW1pdCwgdGhpcy5zdWdnZXN0aW9ucy5sZW5ndGggLSAxKSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHByZXZQYWdlKCkge1xuICAgIHRoaXMubW92ZVNlbGVjdChNYXRoLm1heCh0aGlzLnNlbGVjdCAtIHRoaXMubGltaXQsIDApKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbGVmdCgpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IgPD0gMCkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMuY3Vyc29yID0gdGhpcy5jdXJzb3ItMTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcmlnaHQoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yKnRoaXMuc2NhbGUgPj0gdGhpcy5yZW5kZXJlZC5sZW5ndGgpIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLmN1cnNvciA9IHRoaXMuY3Vyc29yKzE7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHJlbmRlck9wdGlvbih2LCBob3ZlcmVkLCBpc1N0YXJ0LCBpc0VuZCkge1xuICAgIGxldCBkZXNjO1xuICAgIGxldCBwcmVmaXggPSBpc1N0YXJ0ID8gZmlndXJlcy5hcnJvd1VwIDogaXNFbmQgPyBmaWd1cmVzLmFycm93RG93biA6ICcgJztcbiAgICBsZXQgdGl0bGUgPSBob3ZlcmVkID8gY29sb3IuY3lhbigpLnVuZGVybGluZSh2LnRpdGxlKSA6IHYudGl0bGU7XG4gICAgcHJlZml4ID0gKGhvdmVyZWQgPyBjb2xvci5jeWFuKGZpZ3VyZXMucG9pbnRlcikgKyAnICcgOiAnICAnKSArIHByZWZpeDtcbiAgICBpZiAodi5kZXNjcmlwdGlvbikge1xuICAgICAgZGVzYyA9IGAgLSAke3YuZGVzY3JpcHRpb259YDtcbiAgICAgIGlmIChwcmVmaXgubGVuZ3RoICsgdGl0bGUubGVuZ3RoICsgZGVzYy5sZW5ndGggPj0gdGhpcy5vdXQuY29sdW1uc1xuICAgICAgICB8fCB2LmRlc2NyaXB0aW9uLnNwbGl0KC9cXHI/XFxuLykubGVuZ3RoID4gMSkge1xuICAgICAgICBkZXNjID0gJ1xcbicgKyB3cmFwKHYuZGVzY3JpcHRpb24sIHsgbWFyZ2luOiAzLCB3aWR0aDogdGhpcy5vdXQuY29sdW1ucyB9KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJlZml4ICsgJyAnICsgdGl0bGUgKyBjb2xvci5ncmF5KGRlc2MgfHwgJycpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLmNsb3NlZCkgcmV0dXJuO1xuICAgIGlmICh0aGlzLmZpcnN0UmVuZGVyKSB0aGlzLm91dC53cml0ZShjdXJzb3IuaGlkZSk7XG4gICAgZWxzZSB0aGlzLm91dC53cml0ZShjbGVhcih0aGlzLm91dHB1dFRleHQsIHRoaXMub3V0LmNvbHVtbnMpKTtcbiAgICBzdXBlci5yZW5kZXIoKTtcblxuICAgIGxldCB7IHN0YXJ0SW5kZXgsIGVuZEluZGV4IH0gPSBlbnRyaWVzVG9EaXNwbGF5KHRoaXMuc2VsZWN0LCB0aGlzLmNob2ljZXMubGVuZ3RoLCB0aGlzLmxpbWl0KTtcblxuICAgIHRoaXMub3V0cHV0VGV4dCA9IFtcbiAgICAgIHN0eWxlLnN5bWJvbCh0aGlzLmRvbmUsIHRoaXMuYWJvcnRlZCwgdGhpcy5leGl0ZWQpLFxuICAgICAgY29sb3IuYm9sZCh0aGlzLm1zZyksXG4gICAgICBzdHlsZS5kZWxpbWl0ZXIodGhpcy5jb21wbGV0aW5nKSxcbiAgICAgIHRoaXMuZG9uZSAmJiB0aGlzLnN1Z2dlc3Rpb25zW3RoaXMuc2VsZWN0XVxuICAgICAgICA/IHRoaXMuc3VnZ2VzdGlvbnNbdGhpcy5zZWxlY3RdLnRpdGxlXG4gICAgICAgIDogdGhpcy5yZW5kZXJlZCA9IHRoaXMudHJhbnNmb3JtLnJlbmRlcih0aGlzLmlucHV0KVxuICAgIF0uam9pbignICcpO1xuXG4gICAgaWYgKCF0aGlzLmRvbmUpIHtcbiAgICAgIGNvbnN0IHN1Z2dlc3Rpb25zID0gdGhpcy5zdWdnZXN0aW9uc1xuICAgICAgICAuc2xpY2Uoc3RhcnRJbmRleCwgZW5kSW5kZXgpXG4gICAgICAgIC5tYXAoKGl0ZW0sIGkpID0+ICB0aGlzLnJlbmRlck9wdGlvbihpdGVtLFxuICAgICAgICAgIHRoaXMuc2VsZWN0ID09PSBpICsgc3RhcnRJbmRleCxcbiAgICAgICAgICBpID09PSAwICYmIHN0YXJ0SW5kZXggPiAwLFxuICAgICAgICAgIGkgKyBzdGFydEluZGV4ID09PSBlbmRJbmRleCAtIDEgJiYgZW5kSW5kZXggPCB0aGlzLmNob2ljZXMubGVuZ3RoKSlcbiAgICAgICAgLmpvaW4oJ1xcbicpO1xuICAgICAgdGhpcy5vdXRwdXRUZXh0ICs9IGBcXG5gICsgKHN1Z2dlc3Rpb25zIHx8IGNvbG9yLmdyYXkodGhpcy5mYWxsYmFjay50aXRsZSkpO1xuICAgIH1cblxuICAgIHRoaXMub3V0LndyaXRlKGVyYXNlLmxpbmUgKyBjdXJzb3IudG8oMCkgKyB0aGlzLm91dHB1dFRleHQpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXV0b2NvbXBsZXRlUHJvbXB0O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY29sb3IgPSByZXF1aXJlKCdrbGV1cicpO1xuY29uc3QgeyBjdXJzb3IgfSA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKTtcbmNvbnN0IE11bHRpc2VsZWN0UHJvbXB0ID0gcmVxdWlyZSgnLi9tdWx0aXNlbGVjdCcpO1xuY29uc3QgeyBjbGVhciwgc3R5bGUsIGZpZ3VyZXMgfSA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcbi8qKlxuICogTXVsdGlzZWxlY3RQcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7QXJyYXl9IG9wdHMuY2hvaWNlcyBBcnJheSBvZiBjaG9pY2Ugb2JqZWN0c1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmhpbnRdIEhpbnQgdG8gZGlzcGxheVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLndhcm5dIEhpbnQgc2hvd24gZm9yIGRpc2FibGVkIGNob2ljZXNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5tYXhdIE1heCBjaG9pY2VzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMuY3Vyc29yPTBdIEN1cnNvciBzdGFydCBwb3NpdGlvblxuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKi9cbmNsYXNzIEF1dG9jb21wbGV0ZU11bHRpc2VsZWN0UHJvbXB0IGV4dGVuZHMgTXVsdGlzZWxlY3RQcm9tcHQge1xuICBjb25zdHJ1Y3RvcihvcHRzPXt9KSB7XG4gICAgb3B0cy5vdmVycmlkZVJlbmRlciA9IHRydWU7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy5pbnB1dFZhbHVlID0gJyc7XG4gICAgdGhpcy5jbGVhciA9IGNsZWFyKCcnLCB0aGlzLm91dC5jb2x1bW5zKTtcbiAgICB0aGlzLmZpbHRlcmVkT3B0aW9ucyA9IHRoaXMudmFsdWU7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGxhc3QoKSB7XG4gICAgdGhpcy5jdXJzb3IgPSB0aGlzLmZpbHRlcmVkT3B0aW9ucy5sZW5ndGggLSAxO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cbiAgbmV4dCgpIHtcbiAgICB0aGlzLmN1cnNvciA9ICh0aGlzLmN1cnNvciArIDEpICUgdGhpcy5maWx0ZXJlZE9wdGlvbnMubGVuZ3RoO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICB1cCgpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IgPT09IDApIHtcbiAgICAgIHRoaXMuY3Vyc29yID0gdGhpcy5maWx0ZXJlZE9wdGlvbnMubGVuZ3RoIC0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jdXJzb3ItLTtcbiAgICB9XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yID09PSB0aGlzLmZpbHRlcmVkT3B0aW9ucy5sZW5ndGggLSAxKSB7XG4gICAgICB0aGlzLmN1cnNvciA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3Vyc29yKys7XG4gICAgfVxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBsZWZ0KCkge1xuICAgIHRoaXMuZmlsdGVyZWRPcHRpb25zW3RoaXMuY3Vyc29yXS5zZWxlY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByaWdodCgpIHtcbiAgICBpZiAodGhpcy52YWx1ZS5maWx0ZXIoZSA9PiBlLnNlbGVjdGVkKS5sZW5ndGggPj0gdGhpcy5tYXhDaG9pY2VzKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy5maWx0ZXJlZE9wdGlvbnNbdGhpcy5jdXJzb3JdLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZGVsZXRlKCkge1xuICAgIGlmICh0aGlzLmlucHV0VmFsdWUubGVuZ3RoKSB7XG4gICAgICB0aGlzLmlucHV0VmFsdWUgPSB0aGlzLmlucHV0VmFsdWUuc3Vic3RyKDAsIHRoaXMuaW5wdXRWYWx1ZS5sZW5ndGggLSAxKTtcbiAgICAgIHRoaXMudXBkYXRlRmlsdGVyZWRPcHRpb25zKCk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlRmlsdGVyZWRPcHRpb25zKCkge1xuICAgIGNvbnN0IGN1cnJlbnRIaWdobGlnaHQgPSB0aGlzLmZpbHRlcmVkT3B0aW9uc1t0aGlzLmN1cnNvcl07XG4gICAgdGhpcy5maWx0ZXJlZE9wdGlvbnMgPSB0aGlzLnZhbHVlXG4gICAgICAuZmlsdGVyKHYgPT4ge1xuICAgICAgICBpZiAodGhpcy5pbnB1dFZhbHVlKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2LnRpdGxlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKHYudGl0bGUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh0aGlzLmlucHV0VmFsdWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2Ygdi52YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmICh2LnZhbHVlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXModGhpcy5pbnB1dFZhbHVlLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KTtcbiAgICBjb25zdCBuZXdIaWdobGlnaHRJbmRleCA9IHRoaXMuZmlsdGVyZWRPcHRpb25zLmZpbmRJbmRleCh2ID0+IHYgPT09IGN1cnJlbnRIaWdobGlnaHQpXG4gICAgdGhpcy5jdXJzb3IgPSBuZXdIaWdobGlnaHRJbmRleCA8IDAgPyAwIDogbmV3SGlnaGxpZ2h0SW5kZXg7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGhhbmRsZVNwYWNlVG9nZ2xlKCkge1xuICAgIGNvbnN0IHYgPSB0aGlzLmZpbHRlcmVkT3B0aW9uc1t0aGlzLmN1cnNvcl07XG5cbiAgICBpZiAodi5zZWxlY3RlZCkge1xuICAgICAgdi5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9IGVsc2UgaWYgKHYuZGlzYWJsZWQgfHwgdGhpcy52YWx1ZS5maWx0ZXIoZSA9PiBlLnNlbGVjdGVkKS5sZW5ndGggPj0gdGhpcy5tYXhDaG9pY2VzKSB7XG4gICAgICByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHYuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVJbnB1dENoYW5nZShjKSB7XG4gICAgdGhpcy5pbnB1dFZhbHVlID0gdGhpcy5pbnB1dFZhbHVlICsgYztcbiAgICB0aGlzLnVwZGF0ZUZpbHRlcmVkT3B0aW9ucygpO1xuICB9XG5cbiAgXyhjLCBrZXkpIHtcbiAgICBpZiAoYyA9PT0gJyAnKSB7XG4gICAgICB0aGlzLmhhbmRsZVNwYWNlVG9nZ2xlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGFuZGxlSW5wdXRDaGFuZ2UoYyk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVySW5zdHJ1Y3Rpb25zKCkge1xuICAgIGlmICh0aGlzLmluc3RydWN0aW9ucyA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuaW5zdHJ1Y3Rpb25zKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuaW5zdHJ1Y3Rpb25zID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnN0cnVjdGlvbnM7XG4gICAgICB9XG4gICAgICByZXR1cm4gYFxuSW5zdHJ1Y3Rpb25zOlxuICAgICR7ZmlndXJlcy5hcnJvd1VwfS8ke2ZpZ3VyZXMuYXJyb3dEb3dufTogSGlnaGxpZ2h0IG9wdGlvblxuICAgICR7ZmlndXJlcy5hcnJvd0xlZnR9LyR7ZmlndXJlcy5hcnJvd1JpZ2h0fS9bc3BhY2VdOiBUb2dnbGUgc2VsZWN0aW9uXG4gICAgW2EsYixjXS9kZWxldGU6IEZpbHRlciBjaG9pY2VzXG4gICAgZW50ZXIvcmV0dXJuOiBDb21wbGV0ZSBhbnN3ZXJcbmA7XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHJlbmRlckN1cnJlbnRJbnB1dCgpIHtcbiAgICByZXR1cm4gYFxuRmlsdGVyZWQgcmVzdWx0cyBmb3I6ICR7dGhpcy5pbnB1dFZhbHVlID8gdGhpcy5pbnB1dFZhbHVlIDogY29sb3IuZ3JheSgnRW50ZXIgc29tZXRoaW5nIHRvIGZpbHRlcicpfVxcbmA7XG4gIH1cblxuICByZW5kZXJPcHRpb24oY3Vyc29yLCB2LCBpKSB7XG4gICAgbGV0IHRpdGxlO1xuICAgIGlmICh2LmRpc2FibGVkKSB0aXRsZSA9IGN1cnNvciA9PT0gaSA/IGNvbG9yLmdyYXkoKS51bmRlcmxpbmUodi50aXRsZSkgOiBjb2xvci5zdHJpa2V0aHJvdWdoKCkuZ3JheSh2LnRpdGxlKTtcbiAgICBlbHNlIHRpdGxlID0gY3Vyc29yID09PSBpID8gY29sb3IuY3lhbigpLnVuZGVybGluZSh2LnRpdGxlKSA6IHYudGl0bGU7XG4gICAgcmV0dXJuICh2LnNlbGVjdGVkID8gY29sb3IuZ3JlZW4oZmlndXJlcy5yYWRpb09uKSA6IGZpZ3VyZXMucmFkaW9PZmYpICsgJyAgJyArIHRpdGxlXG4gIH1cblxuICByZW5kZXJEb25lT3JJbnN0cnVjdGlvbnMoKSB7XG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWVcbiAgICAgICAgLmZpbHRlcihlID0+IGUuc2VsZWN0ZWQpXG4gICAgICAgIC5tYXAodiA9PiB2LnRpdGxlKVxuICAgICAgICAuam9pbignLCAnKTtcbiAgICB9XG5cbiAgICBjb25zdCBvdXRwdXQgPSBbY29sb3IuZ3JheSh0aGlzLmhpbnQpLCB0aGlzLnJlbmRlckluc3RydWN0aW9ucygpLCB0aGlzLnJlbmRlckN1cnJlbnRJbnB1dCgpXTtcblxuICAgIGlmICh0aGlzLmZpbHRlcmVkT3B0aW9ucy5sZW5ndGggJiYgdGhpcy5maWx0ZXJlZE9wdGlvbnNbdGhpcy5jdXJzb3JdLmRpc2FibGVkKSB7XG4gICAgICBvdXRwdXQucHVzaChjb2xvci55ZWxsb3codGhpcy53YXJuKSk7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQuam9pbignICcpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLmNsb3NlZCkgcmV0dXJuO1xuICAgIGlmICh0aGlzLmZpcnN0UmVuZGVyKSB0aGlzLm91dC53cml0ZShjdXJzb3IuaGlkZSk7XG4gICAgc3VwZXIucmVuZGVyKCk7XG5cbiAgICAvLyBwcmludCBwcm9tcHRcblxuICAgIGxldCBwcm9tcHQgPSBbXG4gICAgICBzdHlsZS5zeW1ib2wodGhpcy5kb25lLCB0aGlzLmFib3J0ZWQpLFxuICAgICAgY29sb3IuYm9sZCh0aGlzLm1zZyksXG4gICAgICBzdHlsZS5kZWxpbWl0ZXIoZmFsc2UpLFxuICAgICAgdGhpcy5yZW5kZXJEb25lT3JJbnN0cnVjdGlvbnMoKVxuICAgIF0uam9pbignICcpO1xuXG4gICAgaWYgKHRoaXMuc2hvd01pbkVycm9yKSB7XG4gICAgICBwcm9tcHQgKz0gY29sb3IucmVkKGBZb3UgbXVzdCBzZWxlY3QgYSBtaW5pbXVtIG9mICR7dGhpcy5taW5TZWxlY3RlZH0gY2hvaWNlcy5gKTtcbiAgICAgIHRoaXMuc2hvd01pbkVycm9yID0gZmFsc2U7XG4gICAgfVxuICAgIHByb21wdCArPSB0aGlzLnJlbmRlck9wdGlvbnModGhpcy5maWx0ZXJlZE9wdGlvbnMpO1xuXG4gICAgdGhpcy5vdXQud3JpdGUodGhpcy5jbGVhciArIHByb21wdCk7XG4gICAgdGhpcy5jbGVhciA9IGNsZWFyKHByb21wdCwgdGhpcy5vdXQuY29sdW1ucyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBdXRvY29tcGxldGVNdWx0aXNlbGVjdFByb21wdDtcbiIsICJjb25zdCBjb2xvciA9IHJlcXVpcmUoJ2tsZXVyJyk7XG5jb25zdCBQcm9tcHQgPSByZXF1aXJlKCcuL3Byb21wdCcpO1xuY29uc3QgeyBzdHlsZSwgY2xlYXIgfSA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcbmNvbnN0IHsgZXJhc2UsIGN1cnNvciB9ID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpO1xuXG4vKipcbiAqIENvbmZpcm1Qcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdHMuaW5pdGlhbF0gRGVmYXVsdCB2YWx1ZSAodHJ1ZS9mYWxzZSlcbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLnllc10gVGhlIFwiWWVzXCIgbGFiZWxcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy55ZXNPcHRpb25dIFRoZSBcIlllc1wiIG9wdGlvbiB3aGVuIGNob29zaW5nIGJldHdlZW4geWVzL25vXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMubm9dIFRoZSBcIk5vXCIgbGFiZWxcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5ub09wdGlvbl0gVGhlIFwiTm9cIiBvcHRpb24gd2hlbiBjaG9vc2luZyBiZXR3ZWVuIHllcy9ub1xuICovXG5jbGFzcyBDb25maXJtUHJvbXB0IGV4dGVuZHMgUHJvbXB0IHtcbiAgY29uc3RydWN0b3Iob3B0cz17fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXMubXNnID0gb3B0cy5tZXNzYWdlO1xuICAgIHRoaXMudmFsdWUgPSBvcHRzLmluaXRpYWw7XG4gICAgdGhpcy5pbml0aWFsVmFsdWUgPSAhIW9wdHMuaW5pdGlhbDtcbiAgICB0aGlzLnllc01zZyA9IG9wdHMueWVzIHx8ICd5ZXMnO1xuICAgIHRoaXMueWVzT3B0aW9uID0gb3B0cy55ZXNPcHRpb24gfHwgJyhZL24pJztcbiAgICB0aGlzLm5vTXNnID0gb3B0cy5ubyB8fCAnbm8nO1xuICAgIHRoaXMubm9PcHRpb24gPSBvcHRzLm5vT3B0aW9uIHx8ICcoeS9OKSc7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLmluaXRpYWxWYWx1ZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZXhpdCgpIHtcbiAgICB0aGlzLmFib3J0KCk7XG4gIH1cblxuICBhYm9ydCgpIHtcbiAgICB0aGlzLmRvbmUgPSB0aGlzLmFib3J0ZWQgPSB0cnVlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIHN1Ym1pdCgpIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZSB8fCBmYWxzZTtcbiAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgIHRoaXMuYWJvcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIF8oYywga2V5KSB7XG4gICAgaWYgKGMudG9Mb3dlckNhc2UoKSA9PT0gJ3knKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzLnN1Ym1pdCgpO1xuICAgIH1cbiAgICBpZiAoYy50b0xvd2VyQ2FzZSgpID09PSAnbicpIHtcbiAgICAgIHRoaXMudmFsdWUgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0aGlzLnN1Ym1pdCgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5iZWxsKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuY2xvc2VkKSByZXR1cm47XG4gICAgaWYgKHRoaXMuZmlyc3RSZW5kZXIpIHRoaXMub3V0LndyaXRlKGN1cnNvci5oaWRlKTtcbiAgICBlbHNlIHRoaXMub3V0LndyaXRlKGNsZWFyKHRoaXMub3V0cHV0VGV4dCwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgIHN1cGVyLnJlbmRlcigpO1xuXG4gICAgdGhpcy5vdXRwdXRUZXh0ID0gW1xuICAgICAgc3R5bGUuc3ltYm9sKHRoaXMuZG9uZSwgdGhpcy5hYm9ydGVkKSxcbiAgICAgIGNvbG9yLmJvbGQodGhpcy5tc2cpLFxuICAgICAgc3R5bGUuZGVsaW1pdGVyKHRoaXMuZG9uZSksXG4gICAgICB0aGlzLmRvbmUgPyAodGhpcy52YWx1ZSA/IHRoaXMueWVzTXNnIDogdGhpcy5ub01zZylcbiAgICAgICAgICA6IGNvbG9yLmdyYXkodGhpcy5pbml0aWFsVmFsdWUgPyB0aGlzLnllc09wdGlvbiA6IHRoaXMubm9PcHRpb24pXG4gICAgXS5qb2luKCcgJyk7XG5cbiAgICB0aGlzLm91dC53cml0ZShlcmFzZS5saW5lICsgY3Vyc29yLnRvKDApICsgdGhpcy5vdXRwdXRUZXh0KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbmZpcm1Qcm9tcHQ7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgVGV4dFByb21wdDogcmVxdWlyZSgnLi90ZXh0JyksXG4gIFNlbGVjdFByb21wdDogcmVxdWlyZSgnLi9zZWxlY3QnKSxcbiAgVG9nZ2xlUHJvbXB0OiByZXF1aXJlKCcuL3RvZ2dsZScpLFxuICBEYXRlUHJvbXB0OiByZXF1aXJlKCcuL2RhdGUnKSxcbiAgTnVtYmVyUHJvbXB0OiByZXF1aXJlKCcuL251bWJlcicpLFxuICBNdWx0aXNlbGVjdFByb21wdDogcmVxdWlyZSgnLi9tdWx0aXNlbGVjdCcpLFxuICBBdXRvY29tcGxldGVQcm9tcHQ6IHJlcXVpcmUoJy4vYXV0b2NvbXBsZXRlJyksXG4gIEF1dG9jb21wbGV0ZU11bHRpc2VsZWN0UHJvbXB0OiByZXF1aXJlKCcuL2F1dG9jb21wbGV0ZU11bHRpc2VsZWN0JyksXG4gIENvbmZpcm1Qcm9tcHQ6IHJlcXVpcmUoJy4vY29uZmlybScpXG59O1xuIiwgIid1c2Ugc3RyaWN0JztcbmNvbnN0ICQgPSBleHBvcnRzO1xuY29uc3QgZWwgPSByZXF1aXJlKCcuL2VsZW1lbnRzJyk7XG5jb25zdCBub29wID0gdiA9PiB2O1xuXG5mdW5jdGlvbiB0b1Byb21wdCh0eXBlLCBhcmdzLCBvcHRzPXt9KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzLCByZWopID0+IHtcbiAgICBjb25zdCBwID0gbmV3IGVsW3R5cGVdKGFyZ3MpO1xuICAgIGNvbnN0IG9uQWJvcnQgPSBvcHRzLm9uQWJvcnQgfHwgbm9vcDtcbiAgICBjb25zdCBvblN1Ym1pdCA9IG9wdHMub25TdWJtaXQgfHwgbm9vcDtcbiAgICBjb25zdCBvbkV4aXQgPSBvcHRzLm9uRXhpdCB8fCBub29wO1xuICAgIHAub24oJ3N0YXRlJywgYXJncy5vblN0YXRlIHx8IG5vb3ApO1xuICAgIHAub24oJ3N1Ym1pdCcsIHggPT4gcmVzKG9uU3VibWl0KHgpKSk7XG4gICAgcC5vbignZXhpdCcsIHggPT4gcmVzKG9uRXhpdCh4KSkpO1xuICAgIHAub24oJ2Fib3J0JywgeCA9PiByZWoob25BYm9ydCh4KSkpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUZXh0IHByb21wdFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3MuaW5pdGlhbF0gRGVmYXVsdCBzdHJpbmcgdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5zdHlsZT1cImRlZmF1bHRcIl0gUmVuZGVyIHN0eWxlICgnZGVmYXVsdCcsICdwYXNzd29yZCcsICdpbnZpc2libGUnKVxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3Mub25TdGF0ZV0gT24gc3RhdGUgY2hhbmdlIGNhbGxiYWNrXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy52YWxpZGF0ZV0gRnVuY3Rpb24gdG8gdmFsaWRhdGUgdXNlciBpbnB1dFxuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuJC50ZXh0ID0gYXJncyA9PiB0b1Byb21wdCgnVGV4dFByb21wdCcsIGFyZ3MpO1xuXG4vKipcbiAqIFBhc3N3b3JkIHByb21wdCB3aXRoIG1hc2tlZCBpbnB1dFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3MuaW5pdGlhbF0gRGVmYXVsdCBzdHJpbmcgdmFsdWVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3MudmFsaWRhdGVdIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIHVzZXIgaW5wdXRcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cbiQucGFzc3dvcmQgPSBhcmdzID0+IHtcbiAgYXJncy5zdHlsZSA9ICdwYXNzd29yZCc7XG4gIHJldHVybiAkLnRleHQoYXJncyk7XG59O1xuXG4vKipcbiAqIFByb21wdCB3aGVyZSBpbnB1dCBpcyBpbnZpc2libGUsIGxpa2Ugc3Vkb1xuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3MuaW5pdGlhbF0gRGVmYXVsdCBzdHJpbmcgdmFsdWVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3MudmFsaWRhdGVdIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIHVzZXIgaW5wdXRcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cbiQuaW52aXNpYmxlID0gYXJncyA9PiB7XG4gIGFyZ3Muc3R5bGUgPSAnaW52aXNpYmxlJztcbiAgcmV0dXJuICQudGV4dChhcmdzKTtcbn07XG5cbi8qKlxuICogTnVtYmVyIHByb21wdFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge251bWJlcn0gYXJncy5pbml0aWFsIERlZmF1bHQgbnVtYmVyIHZhbHVlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJncy5tYXhdIE1heCB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IFthcmdzLm1pbl0gTWluIHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3Muc3R5bGU9XCJkZWZhdWx0XCJdIFJlbmRlciBzdHlsZSAoJ2RlZmF1bHQnLCAncGFzc3dvcmQnLCAnaW52aXNpYmxlJylcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdHMuZmxvYXQ9ZmFsc2VdIFBhcnNlIGlucHV0IGFzIGZsb2F0c1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLnJvdW5kPTJdIFJvdW5kIGZsb2F0cyB0byB4IGRlY2ltYWxzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMuaW5jcmVtZW50PTFdIE51bWJlciB0byBpbmNyZW1lbnQgYnkgd2hlbiB1c2luZyBhcnJvdy1rZXlzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy52YWxpZGF0ZV0gRnVuY3Rpb24gdG8gdmFsaWRhdGUgdXNlciBpbnB1dFxuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuJC5udW1iZXIgPSBhcmdzID0+IHRvUHJvbXB0KCdOdW1iZXJQcm9tcHQnLCBhcmdzKTtcblxuLyoqXG4gKiBEYXRlIHByb21wdFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge251bWJlcn0gYXJncy5pbml0aWFsIERlZmF1bHQgbnVtYmVyIHZhbHVlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJncy5tYXhdIE1heCB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IFthcmdzLm1pbl0gTWluIHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3Muc3R5bGU9XCJkZWZhdWx0XCJdIFJlbmRlciBzdHlsZSAoJ2RlZmF1bHQnLCAncGFzc3dvcmQnLCAnaW52aXNpYmxlJylcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdHMuZmxvYXQ9ZmFsc2VdIFBhcnNlIGlucHV0IGFzIGZsb2F0c1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLnJvdW5kPTJdIFJvdW5kIGZsb2F0cyB0byB4IGRlY2ltYWxzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMuaW5jcmVtZW50PTFdIE51bWJlciB0byBpbmNyZW1lbnQgYnkgd2hlbiB1c2luZyBhcnJvdy1rZXlzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy52YWxpZGF0ZV0gRnVuY3Rpb24gdG8gdmFsaWRhdGUgdXNlciBpbnB1dFxuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuJC5kYXRlID0gYXJncyA9PiB0b1Byb21wdCgnRGF0ZVByb21wdCcsIGFyZ3MpO1xuXG4vKipcbiAqIENsYXNzaWMgeWVzL25vIHByb21wdFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFthcmdzLmluaXRpYWw9ZmFsc2VdIERlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuJC5jb25maXJtID0gYXJncyA9PiB0b1Byb21wdCgnQ29uZmlybVByb21wdCcsIGFyZ3MpO1xuXG4vKipcbiAqIExpc3QgcHJvbXB0LCBzcGxpdCBpbnRwdXQgc3RyaW5nIGJ5IGBzZXBlcmF0b3JgXG4gKiBAcGFyYW0ge3N0cmluZ30gYXJncy5tZXNzYWdlIFByb21wdCBtZXNzYWdlIHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5pbml0aWFsXSBEZWZhdWx0IHN0cmluZyB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLnN0eWxlPVwiZGVmYXVsdFwiXSBSZW5kZXIgc3R5bGUgKCdkZWZhdWx0JywgJ3Bhc3N3b3JkJywgJ2ludmlzaWJsZScpXG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3Muc2VwYXJhdG9yXSBTdHJpbmcgc2VwYXJhdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0LCBpbiBmb3JtIG9mIGFuIGBBcnJheWBcbiAqL1xuJC5saXN0ID0gYXJncyA9PiB7XG4gIGNvbnN0IHNlcCA9IGFyZ3Muc2VwYXJhdG9yIHx8ICcsJztcbiAgcmV0dXJuIHRvUHJvbXB0KCdUZXh0UHJvbXB0JywgYXJncywge1xuICAgIG9uU3VibWl0OiBzdHIgPT4gc3RyLnNwbGl0KHNlcCkubWFwKHMgPT4gcy50cmltKCkpXG4gIH0pO1xufTtcblxuLyoqXG4gKiBUb2dnbGUvc3dpdGNoIHByb21wdFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFthcmdzLmluaXRpYWw9ZmFsc2VdIERlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5hY3RpdmU9XCJvblwiXSBUZXh0IGZvciBgYWN0aXZlYCBzdGF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLmluYWN0aXZlPVwib2ZmXCJdIFRleHQgZm9yIGBpbmFjdGl2ZWAgc3RhdGVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuJC50b2dnbGUgPSBhcmdzID0+IHRvUHJvbXB0KCdUb2dnbGVQcm9tcHQnLCBhcmdzKTtcblxuLyoqXG4gKiBJbnRlcmFjdGl2ZSBzZWxlY3QgcHJvbXB0XG4gKiBAcGFyYW0ge3N0cmluZ30gYXJncy5tZXNzYWdlIFByb21wdCBtZXNzYWdlIHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MuY2hvaWNlcyBBcnJheSBvZiBjaG9pY2VzIG9iamVjdHMgYFt7IHRpdGxlLCB2YWx1ZSB9LCAuLi5dYFxuICogQHBhcmFtIHtudW1iZXJ9IFthcmdzLmluaXRpYWxdIEluZGV4IG9mIGRlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7U3RyaW5nfSBbYXJncy5oaW50XSBIaW50IHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuJC5zZWxlY3QgPSBhcmdzID0+IHRvUHJvbXB0KCdTZWxlY3RQcm9tcHQnLCBhcmdzKTtcblxuLyoqXG4gKiBJbnRlcmFjdGl2ZSBtdWx0aS1zZWxlY3QgLyBhdXRvY29tcGxldGVNdWx0aXNlbGVjdCBwcm9tcHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLm1lc3NhZ2UgUHJvbXB0IG1lc3NhZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtIHtBcnJheX0gYXJncy5jaG9pY2VzIEFycmF5IG9mIGNob2ljZXMgb2JqZWN0cyBgW3sgdGl0bGUsIHZhbHVlLCBbc2VsZWN0ZWRdIH0sIC4uLl1gXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyZ3MubWF4XSBNYXggc2VsZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3MuaGludF0gSGludCB0byBkaXNwbGF5IHVzZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbYXJncy5jdXJzb3I9MF0gQ3Vyc29yIHN0YXJ0IHBvc2l0aW9uXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cbiQubXVsdGlzZWxlY3QgPSBhcmdzID0+IHtcbiAgYXJncy5jaG9pY2VzID0gW10uY29uY2F0KGFyZ3MuY2hvaWNlcyB8fCBbXSk7XG4gIGNvbnN0IHRvU2VsZWN0ZWQgPSBpdGVtcyA9PiBpdGVtcy5maWx0ZXIoaXRlbSA9PiBpdGVtLnNlbGVjdGVkKS5tYXAoaXRlbSA9PiBpdGVtLnZhbHVlKTtcbiAgcmV0dXJuIHRvUHJvbXB0KCdNdWx0aXNlbGVjdFByb21wdCcsIGFyZ3MsIHtcbiAgICBvbkFib3J0OiB0b1NlbGVjdGVkLFxuICAgIG9uU3VibWl0OiB0b1NlbGVjdGVkXG4gIH0pO1xufTtcblxuJC5hdXRvY29tcGxldGVNdWx0aXNlbGVjdCA9IGFyZ3MgPT4ge1xuICBhcmdzLmNob2ljZXMgPSBbXS5jb25jYXQoYXJncy5jaG9pY2VzIHx8IFtdKTtcbiAgY29uc3QgdG9TZWxlY3RlZCA9IGl0ZW1zID0+IGl0ZW1zLmZpbHRlcihpdGVtID0+IGl0ZW0uc2VsZWN0ZWQpLm1hcChpdGVtID0+IGl0ZW0udmFsdWUpO1xuICByZXR1cm4gdG9Qcm9tcHQoJ0F1dG9jb21wbGV0ZU11bHRpc2VsZWN0UHJvbXB0JywgYXJncywge1xuICAgIG9uQWJvcnQ6IHRvU2VsZWN0ZWQsXG4gICAgb25TdWJtaXQ6IHRvU2VsZWN0ZWRcbiAgfSk7XG59O1xuXG5jb25zdCBieVRpdGxlID0gKGlucHV0LCBjaG9pY2VzKSA9PiBQcm9taXNlLnJlc29sdmUoXG4gIGNob2ljZXMuZmlsdGVyKGl0ZW0gPT4gaXRlbS50aXRsZS5zbGljZSgwLCBpbnB1dC5sZW5ndGgpLnRvTG93ZXJDYXNlKCkgPT09IGlucHV0LnRvTG93ZXJDYXNlKCkpXG4pO1xuXG4vKipcbiAqIEludGVyYWN0aXZlIGF1dG8tY29tcGxldGUgcHJvbXB0XG4gKiBAcGFyYW0ge3N0cmluZ30gYXJncy5tZXNzYWdlIFByb21wdCBtZXNzYWdlIHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MuY2hvaWNlcyBBcnJheSBvZiBhdXRvLWNvbXBsZXRlIGNob2ljZXMgb2JqZWN0cyBgW3sgdGl0bGUsIHZhbHVlIH0sIC4uLl1gXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbYXJncy5zdWdnZXN0XSBGdW5jdGlvbiB0byBmaWx0ZXIgcmVzdWx0cyBiYXNlZCBvbiB1c2VyIGlucHV0LiBEZWZhdWx0cyB0byBzb3J0IGJ5IGB0aXRsZWBcbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJncy5saW1pdD0xMF0gTWF4IG51bWJlciBvZiByZXN1bHRzIHRvIHNob3dcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5zdHlsZT1cImRlZmF1bHRcIl0gUmVuZGVyIHN0eWxlICgnZGVmYXVsdCcsICdwYXNzd29yZCcsICdpbnZpc2libGUnKVxuICogQHBhcmFtIHtTdHJpbmd9IFthcmdzLmluaXRpYWxdIEluZGV4IG9mIHRoZSBkZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmNsZWFyRmlyc3RdIFRoZSBmaXJzdCBFU0NBUEUga2V5cHJlc3Mgd2lsbCBjbGVhciB0aGUgaW5wdXRcbiAqIEBwYXJhbSB7U3RyaW5nfSBbYXJncy5mYWxsYmFja10gRmFsbGJhY2sgbWVzc2FnZSAtIGRlZmF1bHRzIHRvIGluaXRpYWwgdmFsdWVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuJC5hdXRvY29tcGxldGUgPSBhcmdzID0+IHtcbiAgYXJncy5zdWdnZXN0ID0gYXJncy5zdWdnZXN0IHx8IGJ5VGl0bGU7XG4gIGFyZ3MuY2hvaWNlcyA9IFtdLmNvbmNhdChhcmdzLmNob2ljZXMgfHwgW10pO1xuICByZXR1cm4gdG9Qcm9tcHQoJ0F1dG9jb21wbGV0ZVByb21wdCcsIGFyZ3MpO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHByb21wdHMgPSByZXF1aXJlKCcuL3Byb21wdHMnKTtcblxuY29uc3QgcGFzc09uID0gWydzdWdnZXN0JywgJ2Zvcm1hdCcsICdvblN0YXRlJywgJ3ZhbGlkYXRlJywgJ29uUmVuZGVyJywgJ3R5cGUnXTtcbmNvbnN0IG5vb3AgPSAoKSA9PiB7fTtcblxuLyoqXG4gKiBQcm9tcHQgZm9yIGEgc2VyaWVzIG9mIHF1ZXN0aW9uc1xuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IHF1ZXN0aW9ucyBTaW5nbGUgcXVlc3Rpb24gb2JqZWN0IG9yIEFycmF5IG9mIHF1ZXN0aW9uIG9iamVjdHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvblN1Ym1pdF0gQ2FsbGJhY2sgZnVuY3Rpb24gY2FsbGVkIG9uIHByb21wdCBzdWJtaXRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvbkNhbmNlbF0gQ2FsbGJhY2sgZnVuY3Rpb24gY2FsbGVkIG9uIGNhbmNlbC9hYm9ydFxuICogQHJldHVybnMge09iamVjdH0gT2JqZWN0IHdpdGggdmFsdWVzIGZyb20gdXNlciBpbnB1dFxuICovXG5hc3luYyBmdW5jdGlvbiBwcm9tcHQocXVlc3Rpb25zPVtdLCB7IG9uU3VibWl0PW5vb3AsIG9uQ2FuY2VsPW5vb3AgfT17fSkge1xuICBjb25zdCBhbnN3ZXJzID0ge307XG4gIGNvbnN0IG92ZXJyaWRlID0gcHJvbXB0Ll9vdmVycmlkZSB8fCB7fTtcbiAgcXVlc3Rpb25zID0gW10uY29uY2F0KHF1ZXN0aW9ucyk7XG4gIGxldCBhbnN3ZXIsIHF1ZXN0aW9uLCBxdWl0LCBuYW1lLCB0eXBlLCBsYXN0UHJvbXB0O1xuXG4gIGNvbnN0IGdldEZvcm1hdHRlZEFuc3dlciA9IGFzeW5jIChxdWVzdGlvbiwgYW5zd2VyLCBza2lwVmFsaWRhdGlvbiA9IGZhbHNlKSA9PiB7XG4gICAgaWYgKCFza2lwVmFsaWRhdGlvbiAmJiBxdWVzdGlvbi52YWxpZGF0ZSAmJiBxdWVzdGlvbi52YWxpZGF0ZShhbnN3ZXIpICE9PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBxdWVzdGlvbi5mb3JtYXQgPyBhd2FpdCBxdWVzdGlvbi5mb3JtYXQoYW5zd2VyLCBhbnN3ZXJzKSA6IGFuc3dlclxuICB9O1xuXG4gIGZvciAocXVlc3Rpb24gb2YgcXVlc3Rpb25zKSB7XG4gICAgKHsgbmFtZSwgdHlwZSB9ID0gcXVlc3Rpb24pO1xuXG4gICAgLy8gZXZhbHVhdGUgdHlwZSBmaXJzdCBhbmQgc2tpcCBpZiB0eXBlIGlzIGEgZmFsc3kgdmFsdWVcbiAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHR5cGUgPSBhd2FpdCB0eXBlKGFuc3dlciwgeyAuLi5hbnN3ZXJzIH0sIHF1ZXN0aW9uKVxuICAgICAgcXVlc3Rpb25bJ3R5cGUnXSA9IHR5cGVcbiAgICB9XG4gICAgaWYgKCF0eXBlKSBjb250aW51ZTtcblxuICAgIC8vIGlmIHByb3BlcnR5IGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCB1bmxlc3MgaXQncyBhIHNwZWNpYWwgZnVuY3Rpb25cbiAgICBmb3IgKGxldCBrZXkgaW4gcXVlc3Rpb24pIHtcbiAgICAgIGlmIChwYXNzT24uaW5jbHVkZXMoa2V5KSkgY29udGludWU7XG4gICAgICBsZXQgdmFsdWUgPSBxdWVzdGlvbltrZXldO1xuICAgICAgcXVlc3Rpb25ba2V5XSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IGF3YWl0IHZhbHVlKGFuc3dlciwgeyAuLi5hbnN3ZXJzIH0sIGxhc3RQcm9tcHQpIDogdmFsdWU7XG4gICAgfVxuXG4gICAgbGFzdFByb21wdCA9IHF1ZXN0aW9uO1xuXG4gICAgaWYgKHR5cGVvZiBxdWVzdGlvbi5tZXNzYWdlICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcm9tcHQgbWVzc2FnZSBpcyByZXF1aXJlZCcpO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSB2YXJzIGluIGNhc2UgdGhleSBjaGFuZ2VkXG4gICAgKHsgbmFtZSwgdHlwZSB9ID0gcXVlc3Rpb24pO1xuXG4gICAgaWYgKHByb21wdHNbdHlwZV0gPT09IHZvaWQgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBwcm9tcHQgdHlwZSAoJHt0eXBlfSkgaXMgbm90IGRlZmluZWRgKTtcbiAgICB9XG5cbiAgICBpZiAob3ZlcnJpZGVbcXVlc3Rpb24ubmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgYW5zd2VyID0gYXdhaXQgZ2V0Rm9ybWF0dGVkQW5zd2VyKHF1ZXN0aW9uLCBvdmVycmlkZVtxdWVzdGlvbi5uYW1lXSk7XG4gICAgICBpZiAoYW5zd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYW5zd2Vyc1tuYW1lXSA9IGFuc3dlcjtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIC8vIEdldCB0aGUgaW5qZWN0ZWQgYW5zd2VyIGlmIHRoZXJlIGlzIG9uZSBvciBwcm9tcHQgdGhlIHVzZXJcbiAgICAgIGFuc3dlciA9IHByb21wdC5faW5qZWN0ZWQgPyBnZXRJbmplY3RlZEFuc3dlcihwcm9tcHQuX2luamVjdGVkLCBxdWVzdGlvbi5pbml0aWFsKSA6IGF3YWl0IHByb21wdHNbdHlwZV0ocXVlc3Rpb24pO1xuICAgICAgYW5zd2Vyc1tuYW1lXSA9IGFuc3dlciA9IGF3YWl0IGdldEZvcm1hdHRlZEFuc3dlcihxdWVzdGlvbiwgYW5zd2VyLCB0cnVlKTtcbiAgICAgIHF1aXQgPSBhd2FpdCBvblN1Ym1pdChxdWVzdGlvbiwgYW5zd2VyLCBhbnN3ZXJzKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHF1aXQgPSAhKGF3YWl0IG9uQ2FuY2VsKHF1ZXN0aW9uLCBhbnN3ZXJzKSk7XG4gICAgfVxuXG4gICAgaWYgKHF1aXQpIHJldHVybiBhbnN3ZXJzO1xuICB9XG5cbiAgcmV0dXJuIGFuc3dlcnM7XG59XG5cbmZ1bmN0aW9uIGdldEluamVjdGVkQW5zd2VyKGluamVjdGVkLCBkZWFmdWx0VmFsdWUpIHtcbiAgY29uc3QgYW5zd2VyID0gaW5qZWN0ZWQuc2hpZnQoKTtcbiAgICBpZiAoYW5zd2VyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRocm93IGFuc3dlcjtcbiAgICB9XG5cbiAgICByZXR1cm4gKGFuc3dlciA9PT0gdW5kZWZpbmVkKSA/IGRlYWZ1bHRWYWx1ZSA6IGFuc3dlcjtcbn1cblxuZnVuY3Rpb24gaW5qZWN0KGFuc3dlcnMpIHtcbiAgcHJvbXB0Ll9pbmplY3RlZCA9IChwcm9tcHQuX2luamVjdGVkIHx8IFtdKS5jb25jYXQoYW5zd2Vycyk7XG59XG5cbmZ1bmN0aW9uIG92ZXJyaWRlKGFuc3dlcnMpIHtcbiAgcHJvbXB0Ll9vdmVycmlkZSA9IE9iamVjdC5hc3NpZ24oe30sIGFuc3dlcnMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24ocHJvbXB0LCB7IHByb21wdCwgcHJvbXB0cywgaW5qZWN0LCBvdmVycmlkZSB9KTtcbiIsICJmdW5jdGlvbiBpc05vZGVMVCh0YXIpIHtcbiAgdGFyID0gKEFycmF5LmlzQXJyYXkodGFyKSA/IHRhciA6IHRhci5zcGxpdCgnLicpKS5tYXAoTnVtYmVyKTtcbiAgbGV0IGk9MCwgc3JjPXByb2Nlc3MudmVyc2lvbnMubm9kZS5zcGxpdCgnLicpLm1hcChOdW1iZXIpO1xuICBmb3IgKDsgaSA8IHRhci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzcmNbaV0gPiB0YXJbaV0pIHJldHVybiBmYWxzZTtcbiAgICBpZiAodGFyW2ldID4gc3JjW2ldKSByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID1cbiAgaXNOb2RlTFQoJzguNi4wJylcbiAgICA/IHJlcXVpcmUoJy4vZGlzdC9pbmRleC5qcycpXG4gICAgOiByZXF1aXJlKCcuL2xpYi9pbmRleC5qcycpO1xuIiwgInZhciBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKS5TdHJlYW07XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZWxheWVkU3RyZWFtO1xuZnVuY3Rpb24gRGVsYXllZFN0cmVhbSgpIHtcbiAgdGhpcy5zb3VyY2UgPSBudWxsO1xuICB0aGlzLmRhdGFTaXplID0gMDtcbiAgdGhpcy5tYXhEYXRhU2l6ZSA9IDEwMjQgKiAxMDI0O1xuICB0aGlzLnBhdXNlU3RyZWFtID0gdHJ1ZTtcblxuICB0aGlzLl9tYXhEYXRhU2l6ZUV4Y2VlZGVkID0gZmFsc2U7XG4gIHRoaXMuX3JlbGVhc2VkID0gZmFsc2U7XG4gIHRoaXMuX2J1ZmZlcmVkRXZlbnRzID0gW107XG59XG51dGlsLmluaGVyaXRzKERlbGF5ZWRTdHJlYW0sIFN0cmVhbSk7XG5cbkRlbGF5ZWRTdHJlYW0uY3JlYXRlID0gZnVuY3Rpb24oc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBkZWxheWVkU3RyZWFtID0gbmV3IHRoaXMoKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgZm9yICh2YXIgb3B0aW9uIGluIG9wdGlvbnMpIHtcbiAgICBkZWxheWVkU3RyZWFtW29wdGlvbl0gPSBvcHRpb25zW29wdGlvbl07XG4gIH1cblxuICBkZWxheWVkU3RyZWFtLnNvdXJjZSA9IHNvdXJjZTtcblxuICB2YXIgcmVhbEVtaXQgPSBzb3VyY2UuZW1pdDtcbiAgc291cmNlLmVtaXQgPSBmdW5jdGlvbigpIHtcbiAgICBkZWxheWVkU3RyZWFtLl9oYW5kbGVFbWl0KGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHJlYWxFbWl0LmFwcGx5KHNvdXJjZSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICBzb3VyY2Uub24oJ2Vycm9yJywgZnVuY3Rpb24oKSB7fSk7XG4gIGlmIChkZWxheWVkU3RyZWFtLnBhdXNlU3RyZWFtKSB7XG4gICAgc291cmNlLnBhdXNlKCk7XG4gIH1cblxuICByZXR1cm4gZGVsYXllZFN0cmVhbTtcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZWxheWVkU3RyZWFtLnByb3RvdHlwZSwgJ3JlYWRhYmxlJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlLnJlYWRhYmxlO1xuICB9XG59KTtcblxuRGVsYXllZFN0cmVhbS5wcm90b3R5cGUuc2V0RW5jb2RpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc291cmNlLnNldEVuY29kaW5nLmFwcGx5KHRoaXMuc291cmNlLCBhcmd1bWVudHMpO1xufTtcblxuRGVsYXllZFN0cmVhbS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5fcmVsZWFzZWQpIHtcbiAgICB0aGlzLnJlbGVhc2UoKTtcbiAgfVxuXG4gIHRoaXMuc291cmNlLnJlc3VtZSgpO1xufTtcblxuRGVsYXllZFN0cmVhbS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zb3VyY2UucGF1c2UoKTtcbn07XG5cbkRlbGF5ZWRTdHJlYW0ucHJvdG90eXBlLnJlbGVhc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fcmVsZWFzZWQgPSB0cnVlO1xuXG4gIHRoaXMuX2J1ZmZlcmVkRXZlbnRzLmZvckVhY2goZnVuY3Rpb24oYXJncykge1xuICAgIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfS5iaW5kKHRoaXMpKTtcbiAgdGhpcy5fYnVmZmVyZWRFdmVudHMgPSBbXTtcbn07XG5cbkRlbGF5ZWRTdHJlYW0ucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHIgPSBTdHJlYW0ucHJvdG90eXBlLnBpcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgdGhpcy5yZXN1bWUoKTtcbiAgcmV0dXJuIHI7XG59O1xuXG5EZWxheWVkU3RyZWFtLnByb3RvdHlwZS5faGFuZGxlRW1pdCA9IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgaWYgKHRoaXMuX3JlbGVhc2VkKSB7XG4gICAgdGhpcy5lbWl0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChhcmdzWzBdID09PSAnZGF0YScpIHtcbiAgICB0aGlzLmRhdGFTaXplICs9IGFyZ3NbMV0ubGVuZ3RoO1xuICAgIHRoaXMuX2NoZWNrSWZNYXhEYXRhU2l6ZUV4Y2VlZGVkKCk7XG4gIH1cblxuICB0aGlzLl9idWZmZXJlZEV2ZW50cy5wdXNoKGFyZ3MpO1xufTtcblxuRGVsYXllZFN0cmVhbS5wcm90b3R5cGUuX2NoZWNrSWZNYXhEYXRhU2l6ZUV4Y2VlZGVkID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLl9tYXhEYXRhU2l6ZUV4Y2VlZGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMuZGF0YVNpemUgPD0gdGhpcy5tYXhEYXRhU2l6ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuX21heERhdGFTaXplRXhjZWVkZWQgPSB0cnVlO1xuICB2YXIgbWVzc2FnZSA9XG4gICAgJ0RlbGF5ZWRTdHJlYW0jbWF4RGF0YVNpemUgb2YgJyArIHRoaXMubWF4RGF0YVNpemUgKyAnIGJ5dGVzIGV4Y2VlZGVkLidcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcihtZXNzYWdlKSk7XG59O1xuIiwgInZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpLlN0cmVhbTtcbnZhciBEZWxheWVkU3RyZWFtID0gcmVxdWlyZSgnZGVsYXllZC1zdHJlYW0nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb21iaW5lZFN0cmVhbTtcbmZ1bmN0aW9uIENvbWJpbmVkU3RyZWFtKCkge1xuICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG4gIHRoaXMucmVhZGFibGUgPSB0cnVlO1xuICB0aGlzLmRhdGFTaXplID0gMDtcbiAgdGhpcy5tYXhEYXRhU2l6ZSA9IDIgKiAxMDI0ICogMTAyNDtcbiAgdGhpcy5wYXVzZVN0cmVhbXMgPSB0cnVlO1xuXG4gIHRoaXMuX3JlbGVhc2VkID0gZmFsc2U7XG4gIHRoaXMuX3N0cmVhbXMgPSBbXTtcbiAgdGhpcy5fY3VycmVudFN0cmVhbSA9IG51bGw7XG4gIHRoaXMuX2luc2lkZUxvb3AgPSBmYWxzZTtcbiAgdGhpcy5fcGVuZGluZ05leHQgPSBmYWxzZTtcbn1cbnV0aWwuaW5oZXJpdHMoQ29tYmluZWRTdHJlYW0sIFN0cmVhbSk7XG5cbkNvbWJpbmVkU3RyZWFtLmNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgdmFyIGNvbWJpbmVkU3RyZWFtID0gbmV3IHRoaXMoKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgZm9yICh2YXIgb3B0aW9uIGluIG9wdGlvbnMpIHtcbiAgICBjb21iaW5lZFN0cmVhbVtvcHRpb25dID0gb3B0aW9uc1tvcHRpb25dO1xuICB9XG5cbiAgcmV0dXJuIGNvbWJpbmVkU3RyZWFtO1xufTtcblxuQ29tYmluZWRTdHJlYW0uaXNTdHJlYW1MaWtlID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gIHJldHVybiAodHlwZW9mIHN0cmVhbSAhPT0gJ2Z1bmN0aW9uJylcbiAgICAmJiAodHlwZW9mIHN0cmVhbSAhPT0gJ3N0cmluZycpXG4gICAgJiYgKHR5cGVvZiBzdHJlYW0gIT09ICdib29sZWFuJylcbiAgICAmJiAodHlwZW9mIHN0cmVhbSAhPT0gJ251bWJlcicpXG4gICAgJiYgKCFCdWZmZXIuaXNCdWZmZXIoc3RyZWFtKSk7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gIHZhciBpc1N0cmVhbUxpa2UgPSBDb21iaW5lZFN0cmVhbS5pc1N0cmVhbUxpa2Uoc3RyZWFtKTtcblxuICBpZiAoaXNTdHJlYW1MaWtlKSB7XG4gICAgaWYgKCEoc3RyZWFtIGluc3RhbmNlb2YgRGVsYXllZFN0cmVhbSkpIHtcbiAgICAgIHZhciBuZXdTdHJlYW0gPSBEZWxheWVkU3RyZWFtLmNyZWF0ZShzdHJlYW0sIHtcbiAgICAgICAgbWF4RGF0YVNpemU6IEluZmluaXR5LFxuICAgICAgICBwYXVzZVN0cmVhbTogdGhpcy5wYXVzZVN0cmVhbXMsXG4gICAgICB9KTtcbiAgICAgIHN0cmVhbS5vbignZGF0YScsIHRoaXMuX2NoZWNrRGF0YVNpemUuYmluZCh0aGlzKSk7XG4gICAgICBzdHJlYW0gPSBuZXdTdHJlYW07XG4gICAgfVxuXG4gICAgdGhpcy5faGFuZGxlRXJyb3JzKHN0cmVhbSk7XG5cbiAgICBpZiAodGhpcy5wYXVzZVN0cmVhbXMpIHtcbiAgICAgIHN0cmVhbS5wYXVzZSgpO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMuX3N0cmVhbXMucHVzaChzdHJlYW0pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oZGVzdCwgb3B0aW9ucykge1xuICBTdHJlYW0ucHJvdG90eXBlLnBpcGUuY2FsbCh0aGlzLCBkZXN0LCBvcHRpb25zKTtcbiAgdGhpcy5yZXN1bWUoKTtcbiAgcmV0dXJuIGRlc3Q7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUuX2dldE5leHQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY3VycmVudFN0cmVhbSA9IG51bGw7XG5cbiAgaWYgKHRoaXMuX2luc2lkZUxvb3ApIHtcbiAgICB0aGlzLl9wZW5kaW5nTmV4dCA9IHRydWU7XG4gICAgcmV0dXJuOyAvLyBkZWZlciBjYWxsXG4gIH1cblxuICB0aGlzLl9pbnNpZGVMb29wID0gdHJ1ZTtcbiAgdHJ5IHtcbiAgICBkbyB7XG4gICAgICB0aGlzLl9wZW5kaW5nTmV4dCA9IGZhbHNlO1xuICAgICAgdGhpcy5fcmVhbEdldE5leHQoKTtcbiAgICB9IHdoaWxlICh0aGlzLl9wZW5kaW5nTmV4dCk7XG4gIH0gZmluYWxseSB7XG4gICAgdGhpcy5faW5zaWRlTG9vcCA9IGZhbHNlO1xuICB9XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUuX3JlYWxHZXROZXh0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdHJlYW0gPSB0aGlzLl9zdHJlYW1zLnNoaWZ0KCk7XG5cblxuICBpZiAodHlwZW9mIHN0cmVhbSA9PSAndW5kZWZpbmVkJykge1xuICAgIHRoaXMuZW5kKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzdHJlYW0gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLl9waXBlTmV4dChzdHJlYW0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBnZXRTdHJlYW0gPSBzdHJlYW07XG4gIGdldFN0cmVhbShmdW5jdGlvbihzdHJlYW0pIHtcbiAgICB2YXIgaXNTdHJlYW1MaWtlID0gQ29tYmluZWRTdHJlYW0uaXNTdHJlYW1MaWtlKHN0cmVhbSk7XG4gICAgaWYgKGlzU3RyZWFtTGlrZSkge1xuICAgICAgc3RyZWFtLm9uKCdkYXRhJywgdGhpcy5fY2hlY2tEYXRhU2l6ZS5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMuX2hhbmRsZUVycm9ycyhzdHJlYW0pO1xuICAgIH1cblxuICAgIHRoaXMuX3BpcGVOZXh0KHN0cmVhbSk7XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUuX3BpcGVOZXh0ID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gIHRoaXMuX2N1cnJlbnRTdHJlYW0gPSBzdHJlYW07XG5cbiAgdmFyIGlzU3RyZWFtTGlrZSA9IENvbWJpbmVkU3RyZWFtLmlzU3RyZWFtTGlrZShzdHJlYW0pO1xuICBpZiAoaXNTdHJlYW1MaWtlKSB7XG4gICAgc3RyZWFtLm9uKCdlbmQnLCB0aGlzLl9nZXROZXh0LmJpbmQodGhpcykpO1xuICAgIHN0cmVhbS5waXBlKHRoaXMsIHtlbmQ6IGZhbHNlfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHZhbHVlID0gc3RyZWFtO1xuICB0aGlzLndyaXRlKHZhbHVlKTtcbiAgdGhpcy5fZ2V0TmV4dCgpO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLl9oYW5kbGVFcnJvcnMgPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBzdHJlYW0ub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyKSB7XG4gICAgc2VsZi5fZW1pdEVycm9yKGVycik7XG4gIH0pO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oZGF0YSkge1xuICB0aGlzLmVtaXQoJ2RhdGEnLCBkYXRhKTtcbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMucGF1c2VTdHJlYW1zKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYodGhpcy5wYXVzZVN0cmVhbXMgJiYgdGhpcy5fY3VycmVudFN0cmVhbSAmJiB0eXBlb2YodGhpcy5fY3VycmVudFN0cmVhbS5wYXVzZSkgPT0gJ2Z1bmN0aW9uJykgdGhpcy5fY3VycmVudFN0cmVhbS5wYXVzZSgpO1xuICB0aGlzLmVtaXQoJ3BhdXNlJyk7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5fcmVsZWFzZWQpIHtcbiAgICB0aGlzLl9yZWxlYXNlZCA9IHRydWU7XG4gICAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gICAgdGhpcy5fZ2V0TmV4dCgpO1xuICB9XG5cbiAgaWYodGhpcy5wYXVzZVN0cmVhbXMgJiYgdGhpcy5fY3VycmVudFN0cmVhbSAmJiB0eXBlb2YodGhpcy5fY3VycmVudFN0cmVhbS5yZXN1bWUpID09ICdmdW5jdGlvbicpIHRoaXMuX2N1cnJlbnRTdHJlYW0ucmVzdW1lKCk7XG4gIHRoaXMuZW1pdCgncmVzdW1lJyk7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3Jlc2V0KCk7XG4gIHRoaXMuZW1pdCgnZW5kJyk7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9yZXNldCgpO1xuICB0aGlzLmVtaXQoJ2Nsb3NlJyk7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUuX3Jlc2V0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcbiAgdGhpcy5fc3RyZWFtcyA9IFtdO1xuICB0aGlzLl9jdXJyZW50U3RyZWFtID0gbnVsbDtcbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5fY2hlY2tEYXRhU2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl91cGRhdGVEYXRhU2l6ZSgpO1xuICBpZiAodGhpcy5kYXRhU2l6ZSA8PSB0aGlzLm1heERhdGFTaXplKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG1lc3NhZ2UgPVxuICAgICdEZWxheWVkU3RyZWFtI21heERhdGFTaXplIG9mICcgKyB0aGlzLm1heERhdGFTaXplICsgJyBieXRlcyBleGNlZWRlZC4nO1xuICB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKG1lc3NhZ2UpKTtcbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5fdXBkYXRlRGF0YVNpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5kYXRhU2l6ZSA9IDA7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLl9zdHJlYW1zLmZvckVhY2goZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgaWYgKCFzdHJlYW0uZGF0YVNpemUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZWxmLmRhdGFTaXplICs9IHN0cmVhbS5kYXRhU2l6ZTtcbiAgfSk7XG5cbiAgaWYgKHRoaXMuX2N1cnJlbnRTdHJlYW0gJiYgdGhpcy5fY3VycmVudFN0cmVhbS5kYXRhU2l6ZSkge1xuICAgIHRoaXMuZGF0YVNpemUgKz0gdGhpcy5fY3VycmVudFN0cmVhbS5kYXRhU2l6ZTtcbiAgfVxufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLl9lbWl0RXJyb3IgPSBmdW5jdGlvbihlcnIpIHtcbiAgdGhpcy5fcmVzZXQoKTtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG59O1xuIiwgIntcbiAgXCJhcHBsaWNhdGlvbi8xZC1pbnRlcmxlYXZlZC1wYXJpdHlmZWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vM2dwZGFzaC1xb2UtcmVwb3J0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vM2dwcC1pbXMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vM2dwcGhhbCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vM2dwcGhhbGZvcm1zK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hMmxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYWNlK2Nib3JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYWN0aXZlbWVzc2FnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hY3Rpdml0eStqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYWx0by1jb3N0bWFwK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hbHRvLWNvc3RtYXBmaWx0ZXIranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2FsdG8tZGlyZWN0b3J5K2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hbHRvLWVuZHBvaW50Y29zdCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYWx0by1lbmRwb2ludGNvc3RwYXJhbXMranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2FsdG8tZW5kcG9pbnRwcm9wK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hbHRvLWVuZHBvaW50cHJvcHBhcmFtcytqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYWx0by1lcnJvcitqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYWx0by1uZXR3b3JrbWFwK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hbHRvLW5ldHdvcmttYXBmaWx0ZXIranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2FsdG8tdXBkYXRlc3RyZWFtY29udHJvbCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYWx0by11cGRhdGVzdHJlYW1wYXJhbXMranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2FtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hbmRyZXctaW5zZXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJlelwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2FwcGxlZmlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hcHBsaXh3YXJlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhd1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2F0K2p3dFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hdGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYXRmeFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hdG9tK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXRvbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2F0b21jYXQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhdG9tY2F0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYXRvbWRlbGV0ZWQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhdG9tZGVsZXRlZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2F0b21pY21haWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYXRvbXN2Yyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImF0b21zdmNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hdHNjLWR3ZCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImR3ZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2F0c2MtZHluYW1pYy1ldmVudC1tZXNzYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2F0c2MtaGVsZCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImhlbGRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hdHNjLXJkdCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYXRzYy1yc2F0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicnNhdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2F0eG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2F1dGgtcG9saWN5K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2JhY25ldC14ZGQremlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2JhdGNoLXNtdHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYmRvY1wiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImJkb2NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9iZWVwK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY2FsZW5kYXIranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NhbGVuZGFyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGNzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY2FsbC1jb21wbGV0aW9uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NhbHMtMTg0MFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jYXB0aXZlK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jYm9yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2Nib3Itc2VxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NjY2V4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NjbXAreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY2N4bWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjY3htbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NkZngreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjZGZ4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY2RtaS1jYXBhYmlsaXR5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2RtaWFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jZG1pLWNvbnRhaW5lclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNkbWljXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY2RtaS1kb21haW5cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjZG1pZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NkbWktb2JqZWN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2RtaW9cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jZG1pLXF1ZXVlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2RtaXFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jZG5pXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NlYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jZWEtMjAxOCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jZWxsbWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY2Z3XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NpdHkranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NsclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jbHVlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NsdWVfaW5mbyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jbXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY25ycCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jb2FwLWdyb3VwK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jb2FwLXBheWxvYWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY29tbW9uZ3JvdW5kXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NvbmZlcmVuY2UtaW5mbyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jb3NlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2Nvc2Uta2V5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2Nvc2Uta2V5LXNldFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jcGwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjcGxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jc3JhdHRyc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jc3RhK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NzdGFkYXRhK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2Nzdm0ranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2N1LXNlZW1lXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjdVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2N3dFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jeWJlcmNhc2hcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZGFydFwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2Rhc2greG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtcGRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9kYXNoLXBhdGNoK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXBwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZGFzaGRlbHRhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2Rhdm1vdW50K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGF2bW91bnRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9kY2EtcmZ0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2RjZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9kZWMtZHhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZGlhbG9nLWluZm8reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZGljb21cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZGljb20ranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2RpY29tK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2RpaVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9kaXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZG5zXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2Rucytqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZG5zLW1lc3NhZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZG9jYm9vayt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGJrXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZG90cytjYm9yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2Rza3BwK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2Rzc2MrZGVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZHNzY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2Rzc2MreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4ZHNzY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2R2Y3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZXNcIixcImVjbWFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9lZGktY29uc2VudFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9lZGkteDEyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2VkaWZhY3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZWZpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2VsbStqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9lbG0reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZW1lcmdlbmN5Y2FsbGRhdGEuY2FwK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZW1lcmdlbmN5Y2FsbGRhdGEuY29tbWVudCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9lbWVyZ2VuY3ljYWxsZGF0YS5jb250cm9sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2VtZXJnZW5jeWNhbGxkYXRhLmRldmljZWluZm8reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZW1lcmdlbmN5Y2FsbGRhdGEuZWNhbGwubXNkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2VtZXJnZW5jeWNhbGxkYXRhLnByb3ZpZGVyaW5mbyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9lbWVyZ2VuY3ljYWxsZGF0YS5zZXJ2aWNlaW5mbyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9lbWVyZ2VuY3ljYWxsZGF0YS5zdWJzY3JpYmVyaW5mbyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9lbWVyZ2VuY3ljYWxsZGF0YS52ZWRzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2VtbWEreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJlbW1hXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZW1vdGlvbm1sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZW1vdGlvbm1sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZW5jYXBydHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZXBwK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2VwdWIremlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZXB1YlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2VzaG9wXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2V4aVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImV4aVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2V4cGVjdC1jdC1yZXBvcnQranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2V4cHJlc3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJleHBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9mYXN0aW5mb3NldFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9mYXN0c29hcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9mZHQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmZHRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9maGlyK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2ZoaXIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9maWRvLnRydXN0ZWQtYXBwcytqc29uXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZml0c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9mbGV4ZmVjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2ZvbnQtc2ZudFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9mb250LXRkcGZyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGZyXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZm9udC13b2ZmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2ZyYW1ld29yay1hdHRyaWJ1dGVzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2dlbytqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnZW9qc29uXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZ2VvK2pzb24tc2VxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2dlb3BhY2thZ2Urc3FsaXRlM1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9nZW94YWNtbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9nbHRmLWJ1ZmZlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9nbWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnbWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9ncHgreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdweFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2d4ZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ3hmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZ3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImd6XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vaDIyNFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9oZWxkK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2hqc29uXCI6IHtcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaGpzb25cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9odHRwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2h5cGVyc3R1ZGlvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3RrXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vaWJlLWtleS1yZXF1ZXN0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2liZS1wa2ctcmVwbHkreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vaWJlLXBwLWRhdGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vaWdlc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9pbS1pc2NvbXBvc2luZyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2luZGV4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2luZGV4LmNtZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9pbmRleC5vYmpcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vaW5kZXgucmVzcG9uc2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vaW5kZXgudm5kXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2lua21sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaW5rXCIsXCJpbmttbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2lvdHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vaXBmaXhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpcGZpeFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2lwcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9pc3VwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2l0cyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIml0c1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2phdmEtYXJjaGl2ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiamFyXCIsXCJ3YXJcIixcImVhclwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2phdmEtc2VyaWFsaXplZC1vYmplY3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNlclwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2phdmEtdm1cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNsYXNzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vamF2YXNjcmlwdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqc1wiLFwibWpzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vamYyZmVlZCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vam9zZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9qb3NlK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9qcmQranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2pzY2FsZW5kYXIranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wianNvblwiLFwibWFwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vanNvbi1wYXRjaCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vanNvbi1zZXFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vanNvbjVcIjoge1xuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqc29uNVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2pzb25tbCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImpzb25tbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2p3aytqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vandrLXNldCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vand0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2twbWwtcmVxdWVzdCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9rcG1sLXJlc3BvbnNlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2xkK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImpzb25sZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2xncit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImxnclwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2xpbmstZm9ybWF0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2xvYWQtY29udHJvbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9sb3N0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibG9zdHhtbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2xvc3RzeW5jK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2xwZit6aXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbHhmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21hYy1iaW5oZXg0MFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImhxeFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21hYy1jb21wYWN0cHJvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjcHRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tYWN3cml0ZWlpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21hZHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtYWRzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWFuaWZlc3QranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3ZWJtYW5pZmVzdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21hcmNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtcmNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tYXJjeG1sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXJjeFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21hdGhlbWF0aWNhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibWFcIixcIm5iXCIsXCJtYlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21hdGhtbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1hdGhtbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21hdGhtbC1jb250ZW50K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21hdGhtbC1wcmVzZW50YXRpb24reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWJtcy1hc3NvY2lhdGVkLXByb2NlZHVyZS1kZXNjcmlwdGlvbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tYm1zLWRlcmVnaXN0ZXIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWJtcy1lbnZlbG9wZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tYm1zLW1zayt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tYm1zLW1zay1yZXNwb25zZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tYm1zLXByb3RlY3Rpb24tZGVzY3JpcHRpb24reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWJtcy1yZWNlcHRpb24tcmVwb3J0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21ibXMtcmVnaXN0ZXIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWJtcy1yZWdpc3Rlci1yZXNwb25zZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tYm1zLXNjaGVkdWxlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21ibXMtdXNlci1zZXJ2aWNlLWRlc2NyaXB0aW9uK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21ib3hcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtYm94XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWVkaWEtcG9saWN5LWRhdGFzZXQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtcGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tZWRpYV9jb250cm9sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21lZGlhc2VydmVyY29udHJvbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1zY21sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWVyZ2UtcGF0Y2granNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21ldGFsaW5rK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtZXRhbGlua1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21ldGFsaW5rNCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1ldGE0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWV0cyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1ldHNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tZjRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWlrZXlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWlwY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9taXNzaW5nLWJsb2NrcytjYm9yLXNlcVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tbXQtYWVpK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibWFlaVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21tdC11c2QreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtdXNkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbW9kcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1vZHNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tb3NzLWtleXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbW9zcy1zaWduYXR1cmVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbW9zc2tleS1kYXRhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21vc3NrZXktcmVxdWVzdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tcDIxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibTIxXCIsXCJtcDIxXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbXA0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXA0c1wiLFwibTRwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbXBlZzQtZ2VuZXJpY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tcGVnNC1pb2RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbXBlZzQtaW9kLXhtdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tcmItY29uc3VtZXIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbXJiLXB1Ymxpc2greG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbXNjLWl2cit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21zYy1taXhlcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21zd29yZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRvY1wiLFwiZG90XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbXVkK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tdWx0aXBhcnQtY29yZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9teGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJteGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9uLXF1YWRzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibnFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9uLXRyaXBsZXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJudFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL25hc2RhdGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbmV3cy1jaGVja2dyb3Vwc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVMtQVNDSUlcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL25ld3MtZ3JvdXBpbmZvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVUy1BU0NJSVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbmV3cy10cmFuc21pc3Npb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbmxzbWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbm9kZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNqc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL25zc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9vYXV0aC1hdXRoei1yZXErand0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL29ibGl2aW91cy1kbnMtbWVzc2FnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9vY3NwLXJlcXVlc3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vb2NzcC1yZXNwb25zZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJiaW5cIixcImRtc1wiLFwibHJmXCIsXCJtYXJcIixcInNvXCIsXCJkaXN0XCIsXCJkaXN0elwiLFwicGtnXCIsXCJicGtcIixcImR1bXBcIixcImVsY1wiLFwiZGVwbG95XCIsXCJleGVcIixcImRsbFwiLFwiZGViXCIsXCJkbWdcIixcImlzb1wiLFwiaW1nXCIsXCJtc2lcIixcIm1zcFwiLFwibXNtXCIsXCJidWZmZXJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9vZGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvZGFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9vZG0reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vb2R4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL29lYnBzLXBhY2thZ2UreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvcGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9vZ2dcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvZ3hcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9vbWRvYyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib21kb2NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9vbmVub3RlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvbmV0b2NcIixcIm9uZXRvYzJcIixcIm9uZXRtcFwiLFwib25lcGtnXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vb3BjLW5vZGVzZXQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vb3Njb3JlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL294cHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJveHBzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcDIxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3AyMSt6aXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcDJwLW92ZXJsYXkreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyZWxvXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcGFyaXR5ZmVjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Bhc3Nwb3J0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3BhdGNoLW9wcy1lcnJvcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhlclwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3BkZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBkZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3BkeFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wZW0tY2VydGlmaWNhdGUtY2hhaW5cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcGdwLWVuY3J5cHRlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBncFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3BncC1rZXlzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXNjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcGdwLXNpZ25hdHVyZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFzY1wiLFwic2lnXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcGljcy1ydWxlc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicHJmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcGlkZit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3BpZGYtZGlmZit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3BrY3MxMFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInAxMFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3BrY3MxMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wa2NzNy1taW1lXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicDdtXCIsXCJwN2NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wa2NzNy1zaWduYXR1cmVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwN3NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wa2NzOFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInA4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcGtjczgtZW5jcnlwdGVkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3BraXgtYXR0ci1jZXJ0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wa2l4LWNlcnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjZXJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wa2l4LWNybFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNybFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3BraXgtcGtpcGF0aFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBraXBhdGhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wa2l4Y21wXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGtpXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcGxzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGxzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcG9jLXNldHRpbmdzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcG9zdHNjcmlwdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWlcIixcImVwc1wiLFwicHNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wcHNwLXRyYWNrZXIranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Byb2JsZW0ranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Byb2JsZW0reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcHJvdmVuYW5jZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInByb3Z4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcHJzLmFsdmVzdHJhbmQudGl0cmF4LXNoZWV0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Bycy5jd3dcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjd3dcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wcnMuY3luXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCI3LUJJVFwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcHJzLmhwdWIremlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Bycy5ucHJlbmRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcHJzLnBsdWNrZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcHJzLnJkZi14bWwtY3J5cHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcHJzLnhzZit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wc2tjK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicHNrY3htbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3B2ZCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcXNpZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9yYW1sK3lhbWxcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJhbWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9yYXB0b3JmZWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcmRhcCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcmRmK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicmRmXCIsXCJvd2xcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9yZWdpbmZvK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicmlmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcmVsYXgtbmctY29tcGFjdC1zeW50YXhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJybmNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9yZW1vdGUtcHJpbnRpbmdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcmVwdXRvbitqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcmVzb3VyY2UtbGlzdHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJybFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Jlc291cmNlLWxpc3RzLWRpZmYreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJybGRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9yZmMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcmlzY29zXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3JsbWkreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcmxzLXNlcnZpY2VzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicnNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9yb3V0ZS1hcGQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyYXBkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcm91dGUtcy10c2lkK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2xzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcm91dGUtdXNkK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicnVzZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Jwa2ktZ2hvc3RidXN0ZXJzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ2JyXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcnBraS1tYW5pZmVzdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1mdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Jwa2ktcHVibGljYXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcnBraS1yb2FcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyb2FcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9ycGtpLXVwZG93blwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9yc2QreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJzZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Jzcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicnNzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcnRmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJydGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9ydHBsb29wYmFja1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9ydHhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2FtbGFzc2VydGlvbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zYW1sbWV0YWRhdGEreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2FyaWYranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NhcmlmLWV4dGVybmFsLXByb3BlcnRpZXMranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NiZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zYm1sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2JtbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NjYWlwK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NjaW0ranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NjdnAtY3YtcmVxdWVzdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNjcVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NjdnAtY3YtcmVzcG9uc2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzY3NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zY3ZwLXZwLXJlcXVlc3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzcHFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zY3ZwLXZwLXJlc3BvbnNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3BwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2RwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2RwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2VjZXZlbnQrand0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Nlbm1sK2Nib3JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2VubWwranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Nlbm1sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2VubWx4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2VubWwtZXRjaCtjYm9yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Nlbm1sLWV0Y2granNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Nlbm1sLWV4aVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zZW5zbWwrY2JvclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zZW5zbWwranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NlbnNtbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNlbnNtbHhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zZW5zbWwtZXhpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NlcCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zZXAtZXhpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Nlc3Npb24taW5mb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zZXQtcGF5bWVudFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zZXQtcGF5bWVudC1pbml0aWF0aW9uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2V0cGF5XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2V0LXJlZ2lzdHJhdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zZXQtcmVnaXN0cmF0aW9uLWluaXRpYXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzZXRyZWdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zZ21sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NnbWwtb3Blbi1jYXRhbG9nXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NoZit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNoZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NpZXZlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2l2XCIsXCJzaWV2ZVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NpbXBsZS1maWx0ZXIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2ltcGxlLW1lc3NhZ2Utc3VtbWFyeVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zaW1wbGVzeW1ib2xjb250YWluZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2lwY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zbWlsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NtaWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzbWlcIixcInNtaWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zbXB0ZTMzNm1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc29hcCtmYXN0aW5mb3NldFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zb2FwK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NwYXJxbC1xdWVyeVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJxXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc3BhcnFsLXJlc3VsdHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzcnhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zcGR4K2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zcGlyaXRzLWV2ZW50K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NxbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zcmdzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ3JhbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NyZ3MreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJncnhtbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NydSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNydVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NzZGwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNzZGxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zc21sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3NtbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3N0aXgranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3N3aWQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzd2lkdGFnXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGFtcC1hcGV4LXVwZGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90YW1wLWFwZXgtdXBkYXRlLWNvbmZpcm1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGFtcC1jb21tdW5pdHktdXBkYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3RhbXAtY29tbXVuaXR5LXVwZGF0ZS1jb25maXJtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3RhbXAtZXJyb3JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGFtcC1zZXF1ZW5jZS1hZGp1c3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGFtcC1zZXF1ZW5jZS1hZGp1c3QtY29uZmlybVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90YW1wLXN0YXR1cy1xdWVyeVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90YW1wLXN0YXR1cy1yZXNwb25zZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90YW1wLXVwZGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90YW1wLXVwZGF0ZS1jb25maXJtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3RhclwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3RheGlpK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90ZCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGVpK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1widGVpXCIsXCJ0ZWljb3JwdXNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90ZXRyYV9pc2lcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGhyYXVkK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1widGZpXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGltZXN0YW1wLXF1ZXJ5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3RpbWVzdGFtcC1yZXBseVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90aW1lc3RhbXBlZC1kYXRhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widHNkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGxzcnB0K2d6aXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGxzcnB0K2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90bmF1dGhsaXN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Rva2VuLWludHJvc3BlY3Rpb24rand0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3RvbWxcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRvbWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90cmlja2xlLWljZS1zZHBmcmFnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3RyaWdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0cmlnXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdHRtbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInR0bWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90dmUtdHJpZ2dlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90emlmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3R6aWYtbGVhcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi91Ympzb25cIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1YmpcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi91bHBmZWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdXJjLWdycHNoZWV0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3VyYy1yZXNzaGVldCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJzaGVldFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3VyYy10YXJnZXRkZXNjK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1widGRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi91cmMtdWlzb2NrZXRkZXNjK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZjYXJkK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92Y2FyZCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92ZW1taVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92aXZpZGVuY2Uuc2NyaXB0ZmlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4xMDAwbWluZHMuZGVjaXNpb24tbW9kZWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCIxa21cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC1wcm9zZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC1wcm9zZS1wYzNjaCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC12MngtbG9jYWwtc2VydmljZS1pbmZvcm1hdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC41Z25hc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5hY2Nlc3MtdHJhbnNmZXItZXZlbnRzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLmJzZit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5nbW9wK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLmd0cGNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAuaW50ZXJ3b3JraW5nLWRhdGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAubHBwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLm1jLXNpZ25hbGxpbmctZWFyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLm1jZGF0YS1hZmZpbGlhdGlvbi1jb21tYW5kK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLm1jZGF0YS1pbmZvK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLm1jZGF0YS1wYXlsb2FkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLm1jZGF0YS1zZXJ2aWNlLWNvbmZpZyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5tY2RhdGEtc2lnbmFsbGluZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5tY2RhdGEtdWUtY29uZmlnK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLm1jZGF0YS11c2VyLXByb2ZpbGUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAubWNwdHQtYWZmaWxpYXRpb24tY29tbWFuZCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5tY3B0dC1mbG9vci1yZXF1ZXN0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLm1jcHR0LWluZm8reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAubWNwdHQtbG9jYXRpb24taW5mbyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5tY3B0dC1tYm1zLXVzYWdlLWluZm8reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAubWNwdHQtc2VydmljZS1jb25maWcreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAubWNwdHQtc2lnbmVkK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLm1jcHR0LXVlLWNvbmZpZyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5tY3B0dC11ZS1pbml0LWNvbmZpZyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5tY3B0dC11c2VyLXByb2ZpbGUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAubWN2aWRlby1hZmZpbGlhdGlvbi1jb21tYW5kK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLm1jdmlkZW8tYWZmaWxpYXRpb24taW5mbyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5tY3ZpZGVvLWluZm8reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAubWN2aWRlby1sb2NhdGlvbi1pbmZvK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLm1jdmlkZW8tbWJtcy11c2FnZS1pbmZvK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLm1jdmlkZW8tc2VydmljZS1jb25maWcreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAubWN2aWRlby10cmFuc21pc3Npb24tcmVxdWVzdCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5tY3ZpZGVvLXVlLWNvbmZpZyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5tY3ZpZGVvLXVzZXItcHJvZmlsZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5taWQtY2FsbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5uZ2FwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLnBmY3BcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAucGljLWJ3LWxhcmdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGxiXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAucGljLWJ3LXNtYWxsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicHNiXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAucGljLWJ3LXZhclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInB2YlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLnMxYXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAuc21zXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLnNtcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5zcnZjYy1leHQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAuc3J2Y2MtaW5mbyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5zdGF0ZS1hbmQtZXZlbnQtaW5mbyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC51c3NkK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwMi5iY21jc2luZm8reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAyLnNtc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcDIudGNhcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRjYXBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2xpZ2h0c3NvZnR3YXJlLmltYWdlc2NhbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM20ucG9zdC1pdC1ub3Rlc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInB3blwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hY2NwYWMuc2ltcGx5LmFzb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFzb1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hY2NwYWMuc2ltcGx5LmltcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImltcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hY3Vjb2JvbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFjdVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hY3Vjb3JwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXRjXCIsXCJhY3V0Y1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5haXItYXBwbGljYXRpb24taW5zdGFsbGVyLXBhY2thZ2UremlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhaXJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWRvYmUuZmxhc2gubW92aWVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFkb2JlLmZvcm1zY2VudHJhbC5mY2R0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZmNkdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5meHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmeHBcIixcImZ4cGxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWRvYmUucGFydGlhbC11cGxvYWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFkb2JlLnhkcCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhkcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hZG9iZS54ZmRmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGZkZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hZXRoZXIuaW1wXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hZnBjLmFmcGxpbmVkYXRhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hZnBjLmFmcGxpbmVkYXRhLXBhZ2VkZWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFmcGMuY21vY2EtY21yZXNvdXJjZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWZwYy5mb2NhLWNoYXJzZXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFmcGMuZm9jYS1jb2RlZGZvbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFmcGMuZm9jYS1jb2RlcGFnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWZwYy5tb2RjYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWZwYy5tb2RjYS1jbXRhYmxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hZnBjLm1vZGNhLWZvcm1kZWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFmcGMubW9kY2EtbWVkaXVtbWFwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hZnBjLm1vZGNhLW9iamVjdGNvbnRhaW5lclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWZwYy5tb2RjYS1vdmVybGF5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hZnBjLm1vZGNhLXBhZ2VzZWdtZW50XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhZ2VcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWgtYmFyY29kZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWhlYWQuc3BhY2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhaGVhZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5haXJ6aXAuZmlsZXNlY3VyZS5hemZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhemZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWlyemlwLmZpbGVzZWN1cmUuYXpzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXpzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFtYWRldXMranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hbWF6b24uZWJvb2tcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImF6d1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hbWF6b24ubW9iaTgtZWJvb2tcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFtZXJpY2FuZHluYW1pY3MuYWNjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWNjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFtaWdhLmFtaVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFtaVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hbXVuZHNlbi5tYXplK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hbmRyb2lkLm90YVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYW5kcm9pZC5wYWNrYWdlLWFyY2hpdmVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFwa1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hbmtpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hbnNlci13ZWItY2VydGlmaWNhdGUtaXNzdWUtaW5pdGlhdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNpaVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hbnNlci13ZWItZnVuZHMtdHJhbnNmZXItaW5pdGlhdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZnRpXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFudGl4LmdhbWUtY29tcG9uZW50XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXR4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFwYWNoZS5hcnJvdy5maWxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hcGFjaGUuYXJyb3cuc3RyZWFtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hcGFjaGUudGhyaWZ0LmJpbmFyeVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYXBhY2hlLnRocmlmdC5jb21wYWN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hcGFjaGUudGhyaWZ0Lmpzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFwaStqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFwbGV4dG9yLndhcnJwK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYXBvdGhla2VuZGUucmVzZXJ2YXRpb24ranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hcHBsZS5pbnN0YWxsZXIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtcGtnXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFwcGxlLmtleW5vdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJrZXlcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYXBwbGUubXBlZ3VybFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm0zdThcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYXBwbGUubnVtYmVyc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm51bWJlcnNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYXBwbGUucGFnZXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwYWdlc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hcHBsZS5wa3Bhc3NcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwa3Bhc3NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYXJhc3RyYS5zd2lcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFyaXN0YW5ldHdvcmtzLnN3aVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInN3aVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hcnRpc2FuK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYXJ0c3F1YXJlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hc3RyYWVhLXNvZnR3YXJlLmlvdGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpb3RhXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmF1ZGlvZ3JhcGhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhZXBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYXV0b3BhY2thZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmF2YWxvbitqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmF2aXN0YXIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmJhbHNhbWlxLmJtbWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJibW1sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmJhbHNhbWlxLmJtcHJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmJhbmFuYS1hY2NvdW50aW5nXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5iYmYudXNwLmVycm9yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5iYmYudXNwLm1zZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYmJmLnVzcC5tc2cranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5iZWtpdHp1ci1zdGVjaCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmJpbnQubWVkLWNvbnRlbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmJpb3BheC5yZGYreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmJsaW5rLWlkYi12YWx1ZS13cmFwcGVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ibHVlaWNlLm11bHRpcGFzc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1wbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ibHVldG9vdGguZXAub29iXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ibHVldG9vdGgubGUub29iXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ibWlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJibWlcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYnBmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5icGYzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5idXNpbmVzc29iamVjdHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyZXBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYnl1LnVhcGkranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jYWItanNjcmlwdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2Fub24tY3BkbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2Fub24tbGlwc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2FwYXN5c3RlbXMtcGcranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jZW5kaW8udGhpbmxpbmMuY2xpZW50Y29uZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2VudHVyeS1zeXN0ZW1zLnRjcF9zdHJlYW1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNoZW1kcmF3K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2R4bWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2hlc3MtcGduXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jaGlwbnV0cy5rYXJhb2tlLW1tZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1tZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jaWVkaVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2luZGVyZWxsYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNkeVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jaXJwYWNrLmlzZG4tZXh0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jaXRhdGlvbnN0eWxlcy5zdHlsZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNzbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jbGF5bW9yZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNsYVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jbG9hbnRvLnJwOVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJwOVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jbG9uay5jNGdyb3VwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYzRnXCIsXCJjNGRcIixcImM0ZlwiLFwiYzRwXCIsXCJjNHVcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2x1ZXRydXN0LmNhcnRvbW9iaWxlLWNvbmZpZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImMxMWFtY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jbHVldHJ1c3QuY2FydG9tb2JpbGUtY29uZmlnLXBrZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImMxMWFtelwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jb2ZmZWVzY3JpcHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNvbGxhYmlvLnhvZG9jdW1lbnRzLmRvY3VtZW50XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jb2xsYWJpby54b2RvY3VtZW50cy5kb2N1bWVudC10ZW1wbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY29sbGFiaW8ueG9kb2N1bWVudHMucHJlc2VudGF0aW9uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jb2xsYWJpby54b2RvY3VtZW50cy5wcmVzZW50YXRpb24tdGVtcGxhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNvbGxhYmlvLnhvZG9jdW1lbnRzLnNwcmVhZHNoZWV0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jb2xsYWJpby54b2RvY3VtZW50cy5zcHJlYWRzaGVldC10ZW1wbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY29sbGVjdGlvbitqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNvbGxlY3Rpb24uZG9jK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY29sbGVjdGlvbi5uZXh0K2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY29taWNib29rK3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY29taWNib29rLXJhclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY29tbWVyY2UtYmF0dGVsbGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNvbW1vbnNwYWNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY3NwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNvbnRhY3QuY21zZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNkYmNtc2dcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY29yZW9zLmlnbml0aW9uK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY29zbW9jYWxsZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjbWNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3JpY2suY2xpY2tlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNsa3hcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3JpY2suY2xpY2tlci5rZXlib2FyZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNsa2tcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3JpY2suY2xpY2tlci5wYWxldHRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2xrcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jcmljay5jbGlja2VyLnRlbXBsYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2xrdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jcmljay5jbGlja2VyLndvcmRiYW5rXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2xrd1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jcml0aWNhbHRvb2xzLndicyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndic1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jcnlwdGlpLnBpcGUranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jcnlwdG8tc2hhZGUtZmlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3J5cHRvbWF0b3IuZW5jcnlwdGVkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jcnlwdG9tYXRvci52YXVsdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3RjLXBvc21sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicG1sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmN0Y3Qud3MreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmN1cHMtcGRmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jdXBzLXBvc3RzY3JpcHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmN1cHMtcHBkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicHBkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmN1cHMtcmFzdGVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jdXBzLXJhd1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3VybFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3VybC5jYXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNhclwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jdXJsLnBjdXJsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwY3VybFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jeWFuLmRlYW4ucm9vdCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3liYW5rXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jeWNsb25lZHgranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jeWNsb25lZHgreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmQybC5jb3Vyc2VwYWNrYWdlMXAwK3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZDNtLWRhdGFzZXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmQzbS1wcm9ibGVtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kYXJ0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkYXJ0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmRhdGEtdmlzaW9uLnJkelwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJkelwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kYXRhcGFja2FnZStqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmRhdGFyZXNvdXJjZStqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmRiZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRiZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kZWJpYW4uYmluYXJ5LXBhY2thZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmRlY2UuZGF0YVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInV2ZlwiLFwidXZ2ZlwiLFwidXZkXCIsXCJ1dnZkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmRlY2UudHRtbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInV2dFwiLFwidXZ2dFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kZWNlLnVuc3BlY2lmaWVkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widXZ4XCIsXCJ1dnZ4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmRlY2UuemlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widXZ6XCIsXCJ1dnZ6XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmRlbm92by5mY3NlbGF5b3V0LWxpbmtcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmZV9sYXVuY2hcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZGVzbXVtZS5tb3ZpZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZGlyLWJpLnBsYXRlLWRsLW5vc3VmZml4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kbS5kZWxlZ2F0aW9uK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kbmFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkbmFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZG9jdW1lbnQranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kb2xieS5tbHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1scFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kb2xieS5tb2JpbGUuMVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZG9sYnkubW9iaWxlLjJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmRvcmVtaXIuc2NvcmVjbG91ZC1iaW5hcnktZG9jdW1lbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmRwZ3JhcGhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkcGdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHJlYW1mYWN0b3J5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGZhY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kcml2ZStqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmRzLWtleXBvaW50XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJrcHh4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR0Zy5sb2NhbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHRnLmxvY2FsLmZsYXNoXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kdGcubG9jYWwuaHRtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLmFpdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFpdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kdmIuZHZiaXNsK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kdmIuZHZialwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLmVzZ2NvbnRhaW5lclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLmlwZGNkZnRub3RpZmFjY2Vzc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLmlwZGNlc2dhY2Nlc3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR2Yi5pcGRjZXNnYWNjZXNzMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLmlwZGNlc2dwZGRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR2Yi5pcGRjcm9hbWluZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLmlwdHYuYWxmZWMtYmFzZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLmlwdHYuYWxmZWMtZW5oYW5jZW1lbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR2Yi5ub3RpZi1hZ2dyZWdhdGUtcm9vdCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLm5vdGlmLWNvbnRhaW5lcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLm5vdGlmLWdlbmVyaWMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR2Yi5ub3RpZi1pYS1tc2dsaXN0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kdmIubm90aWYtaWEtcmVnaXN0cmF0aW9uLXJlcXVlc3QreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR2Yi5ub3RpZi1pYS1yZWdpc3RyYXRpb24tcmVzcG9uc2UreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR2Yi5ub3RpZi1pbml0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kdmIucGZyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kdmIuc2VydmljZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInN2Y1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5keHJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR5bmFnZW9cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnZW9cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHpyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lYXN5a2FyYW9rZS5jZGdkb3dubG9hZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZWNkaXMtdXBkYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lY2lwLnJscFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZWNsaXBzZS5kaXR0bytqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmVjb3dpbi5jaGFydFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1hZ1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lY293aW4uZmlsZXJlcXVlc3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmVjb3dpbi5maWxldXBkYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lY293aW4uc2VyaWVzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lY293aW4uc2VyaWVzcmVxdWVzdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZWNvd2luLnNlcmllc3VwZGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZWZpLmltZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZWZpLmlzb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZW1jbGllbnQuYWNjZXNzcmVxdWVzdCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZW5saXZlblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm5tbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lbnBoYXNlLmVudm95XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lcHJpbnRzLmRhdGEreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmVwc29uLmVzZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImVzZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lcHNvbi5tc2ZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtc2ZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXBzb24ucXVpY2thbmltZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInFhbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lcHNvbi5zYWx0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2x0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmVwc29uLnNzZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNzZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lcmljc3Nvbi5xdWlja2NhbGxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmVzcGFzcy1lc3Bhc3MremlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lc3ppZ25vMyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImVzM1wiLFwiZXQzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV0c2kuYW9jK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLmFzaWMtZSt6aXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV0c2kuYXNpYy1zK3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXRzaS5jdWcreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV0c2kuaXB0dmNvbW1hbmQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV0c2kuaXB0dmRpc2NvdmVyeSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXRzaS5pcHR2cHJvZmlsZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXRzaS5pcHR2c2FkLWJjK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLmlwdHZzYWQtY29kK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLmlwdHZzYWQtbnB2cit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXRzaS5pcHR2c2VydmljZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXRzaS5pcHR2c3luYyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXRzaS5pcHR2dWVwcm9maWxlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLm1jaWQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV0c2kubWhlZzVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV0c2kub3ZlcmxvYWQtY29udHJvbC1wb2xpY3ktZGF0YXNldCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXRzaS5wc3RuK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLnNjaSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXRzaS5zaW1zZXJ2cyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXRzaS50aW1lc3RhbXAtdG9rZW5cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV0c2kudHNsK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLnRzbC5kZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV1Lmthc3Bhcmlhbi5jYXIranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldWRvcmEuZGF0YVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXZvbHYuZWNpZy5wcm9maWxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldm9sdi5lY2lnLnNldHRpbmdzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldm9sdi5lY2lnLnRoZW1lXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5leHN0cmVhbS1lbXBvd2VyK3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXhzdHJlYW0tcGFja2FnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXpwaXgtYWxidW1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJlejJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXpwaXgtcGFja2FnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImV6M1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mLXNlY3VyZS5tb2JpbGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZhbWlseXNlYXJjaC5nZWRjb20remlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mYXN0Y29weS1kaXNrLWltYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mZGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmZGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZmRzbi5tc2VlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1zZWVkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZkc24uc2VlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNlZWRcIixcImRhdGFsZXNzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZmc25zXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5maWNsYWIuZmxiK3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZmlsbWl0LnpmY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZmludHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZpcmVtb25rZXlzLmNsb3VkY2VsbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZmxvZ3JhcGhpdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdwaFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mbHV4dGltZS5jbGlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZnRjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZvbnQtZm9udGZvcmdlLXNmZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnJhbWVtYWtlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZtXCIsXCJmcmFtZVwiLFwibWFrZXJcIixcImJvb2tcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnJvZ2Fucy5mbmNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmbmNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnJvZ2Fucy5sdGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJsdGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnNjLndlYmxhdW5jaFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZzY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mdWppZmlsbS5mYi5kb2N1d29ya3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZ1amlmaWxtLmZiLmRvY3V3b3Jrcy5iaW5kZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZ1amlmaWxtLmZiLmRvY3V3b3Jrcy5jb250YWluZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZ1amlmaWxtLmZiLmpmaSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnVqaXRzdS5vYXN5c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9hc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mdWppdHN1Lm9hc3lzMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9hMlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mdWppdHN1Lm9hc3lzM1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9hM1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mdWppdHN1Lm9hc3lzZ3BcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmZzVcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnVqaXRzdS5vYXN5c3Byc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImJoMlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mdWppeGVyb3guYXJ0LWV4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mdWppeGVyb3guYXJ0NFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnVqaXhlcm94LmRkZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRkZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mdWppeGVyb3guZG9jdXdvcmtzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGR3XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZ1aml4ZXJveC5kb2N1d29ya3MuYmluZGVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGJkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZ1aml4ZXJveC5kb2N1d29ya3MuY29udGFpbmVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mdWppeGVyb3guaGJwbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnV0LW1pc25ldFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnV0b2luK2Nib3JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZ1dG9pbitqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZ1enp5c2hlZXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmenNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ2Vub21hdGl4LnR1eGVkb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInR4ZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5nZW50aWNzLmdyZCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdlbytqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdlb2N1YmUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdlb2dlYnJhLmZpbGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnZ2JcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ2VvZ2VicmEuc2xpZGVzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5nZW9nZWJyYS50b29sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ2d0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdlb21ldHJ5LWV4cGxvcmVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ2V4XCIsXCJncmVcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ2VvbmV4dFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImd4dFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5nZW9wbGFuXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZzJ3XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdlb3NwYWNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZzN3XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdlcmJlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ2xvYmFscGxhdGZvcm0uY2FyZC1jb250ZW50LW1ndFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ2xvYmFscGxhdGZvcm0uY2FyZC1jb250ZW50LW1ndC1yZXNwb25zZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ214XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ214XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLmRvY3VtZW50XCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ2RvY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5wcmVzZW50YXRpb25cIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnc2xpZGVzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLnNwcmVhZHNoZWV0XCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ3NoZWV0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdvb2dsZS1lYXJ0aC5rbWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJrbWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWVhcnRoLmttelwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImttelwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5nb3Yuc2suZS1mb3JtK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5nb3Yuc2suZS1mb3JtK3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ292LnNrLnhtbGRhdGFjb250YWluZXIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdyYWZlcVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdxZlwiLFwiZ3FzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdyaWRtcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLWFjY291bnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnYWNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLWhlbHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnaGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLWlkZW50aXR5LW1lc3NhZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnaW1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLWluamVjdG9yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ3J2XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdyb292ZS10b29sLW1lc3NhZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJndG1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLXRvb2wtdGVtcGxhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0cGxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLXZjYXJkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widmNnXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmhhbCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmhhbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImhhbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5oYW5kaGVsZC1lbnRlcnRhaW5tZW50K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiem1tXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmhiY2lcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJoYmNpXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmhjK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaGNsLWJpcmVwb3J0c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaGR0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5oZXJva3UranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5oaGUubGVzc29uLXBsYXllclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImxlc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5obDdjZGEreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaGw3djIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaHAtaHBnbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImhwZ2xcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaHAtaHBpZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImhwaWRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaHAtaHBzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaHBzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmhwLWpseXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqbHRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaHAtcGNsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGNsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmhwLXBjbHhsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGNseGxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaHR0cGhvbmVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmh5ZHJvc3RhdGl4LnNvZi1kYXRhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2ZkLWhkc3R4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmh5cGVyK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaHlwZXItaXRlbStqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmh5cGVyZHJpdmUranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5oem4tM2QtY3Jvc3N3b3JkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pYm0uYWZwbGluZWRhdGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmlibS5lbGVjdHJvbmljLW1lZGlhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pYm0ubWluaXBheVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1weVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pYm0ubW9kY2FwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWZwXCIsXCJsaXN0YWZwXCIsXCJsaXN0MzgyMFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pYm0ucmlnaHRzLW1hbmFnZW1lbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpcm1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaWJtLnNlY3VyZS1jb250YWluZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pY2Nwcm9maWxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaWNjXCIsXCJpY21cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaWVlZS4xOTA1XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pZ2xvYWRlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImlnbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pbWFnZW1ldGVyLmZvbGRlcit6aXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmltYWdlbWV0ZXIuaW1hZ2UremlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pbW1lcnZpc2lvbi1pdnBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpdnBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW1tZXJ2aXNpb24taXZ1XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaXZ1XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmltcy5pbXNjY3YxcDFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmltcy5pbXNjY3YxcDJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmltcy5pbXNjY3YxcDNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmltcy5saXMudjIucmVzdWx0K2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW1zLmx0aS52Mi50b29sY29uc3VtZXJwcm9maWxlK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW1zLmx0aS52Mi50b29scHJveHkranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pbXMubHRpLnYyLnRvb2xwcm94eS5pZCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmltcy5sdGkudjIudG9vbHNldHRpbmdzK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW1zLmx0aS52Mi50b29sc2V0dGluZ3Muc2ltcGxlK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW5mb3JtZWRjb250cm9sLnJtcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW5mb3JtaXgtdmlzaW9uYXJ5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pbmZvdGVjaC5wcm9qZWN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pbmZvdGVjaC5wcm9qZWN0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pbm5vcGF0aC53YW1wLm5vdGlmaWNhdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW5zb3JzLmlnbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImlnbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pbnRlcmNvbi5mb3JtbmV0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieHB3XCIsXCJ4cHhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW50ZXJnZW9cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpMmdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW50ZXJ0cnVzdC5kaWdpYm94XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pbnRlcnRydXN0Lm5uY3BcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmludHUucWJvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicWJvXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmludHUucWZ4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicWZ4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmlwdGMuZzIuY2F0YWxvZ2l0ZW0reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmlwdGMuZzIuY29uY2VwdGl0ZW0reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmlwdGMuZzIua25vd2xlZGdlaXRlbSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaXB0Yy5nMi5uZXdzaXRlbSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaXB0Yy5nMi5uZXdzbWVzc2FnZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaXB0Yy5nMi5wYWNrYWdlaXRlbSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaXB0Yy5nMi5wbGFubmluZ2l0ZW0reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmlwdW5wbHVnZ2VkLnJjcHJvZmlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJjcHJvZmlsZVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pcmVwb3NpdG9yeS5wYWNrYWdlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaXJwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmlzLXhwclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhwclwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pc2FjLmZjc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZjc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pc28xMTc4My0xMCt6aXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmphbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImphbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5qYXBhbm5ldC1kaXJlY3Rvcnktc2VydmljZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuamFwYW5uZXQtanBuc3RvcmUtd2FrZXVwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5qYXBhbm5ldC1wYXltZW50LXdha2V1cFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuamFwYW5uZXQtcmVnaXN0cmF0aW9uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5qYXBhbm5ldC1yZWdpc3RyYXRpb24td2FrZXVwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5qYXBhbm5ldC1zZXRzdG9yZS13YWtldXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmphcGFubmV0LXZlcmlmaWNhdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuamFwYW5uZXQtdmVyaWZpY2F0aW9uLXdha2V1cFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuamNwLmphdmFtZS5taWRsZXQtcm1zXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicm1zXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmppc3BcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqaXNwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmpvb3N0LmpvZGEtYXJjaGl2ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImpvZGFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuanNrLmlzZG4tbmduXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5rYWhvb3R6XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wia3R6XCIsXCJrdHJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQua2RlLmthcmJvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImthcmJvblwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5rZGUua2NoYXJ0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2hydFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5rZGUua2Zvcm11bGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJrZm9cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQua2RlLmtpdmlvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZmx3XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmtkZS5rb250b3VyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wia29uXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmtkZS5rcHJlc2VudGVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wia3ByXCIsXCJrcHRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQua2RlLmtzcHJlYWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJrc3BcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQua2RlLmt3b3JkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wia3dkXCIsXCJrd3RcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQua2VuYW1lYWFwcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImh0a2VcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQua2lkc3BpcmF0aW9uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wia2lhXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmtpbmFyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wia25lXCIsXCJrbnBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQua29hblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNrcFwiLFwic2tkXCIsXCJza3RcIixcInNrbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5rb2Rhay1kZXNjcmlwdG9yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3NlXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmxhc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubGFzLmxhcytqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmxhcy5sYXMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJsYXN4bWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubGFzemlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5sZWFwK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubGliZXJ0eS1yZXF1ZXN0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5sbGFtYWdyYXBoaWNzLmxpZmUtYmFsYW5jZS5kZXNrdG9wXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibGJkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmxsYW1hZ3JhcGhpY3MubGlmZS1iYWxhbmNlLmV4Y2hhbmdlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibGJlXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmxvZ2lwaXBlLmNpcmN1aXQremlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5sb29tXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5sb3R1cy0xLTItM1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIjEyM1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5sb3R1cy1hcHByb2FjaFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFwclwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5sb3R1cy1mcmVlbGFuY2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwcmVcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubG90dXMtbm90ZXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJuc2ZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubG90dXMtb3JnYW5pemVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib3JnXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmxvdHVzLXNjcmVlbmNhbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNjbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5sb3R1cy13b3JkcHJvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibHdwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1hY3BvcnRzLnBvcnRwa2dcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwb3J0cGtnXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1hcGJveC12ZWN0b3ItdGlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm12dFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tYXJsaW4uZHJtLmFjdGlvbnRva2VuK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tYXJsaW4uZHJtLmNvbmZ0b2tlbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubWFybGluLmRybS5saWNlbnNlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tYXJsaW4uZHJtLm1kY2ZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1hc29uK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubWF4YXIuYXJjaGl2ZS4zdHoremlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tYXhtaW5kLm1heG1pbmQtZGJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1jZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1jZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tZWRjYWxjZGF0YVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1jMVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tZWRpYXN0YXRpb24uY2RrZXlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjZGtleVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tZXJpZGlhbi1zbGluZ3Nob3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1mZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtd2ZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubWZtcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1mbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5taWNybytqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1pY3JvZ3JhZnguZmxvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZmxvXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1pY3JvZ3JhZnguaWd4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaWd4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1pY3Jvc29mdC5wb3J0YWJsZS1leGVjdXRhYmxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5taWNyb3NvZnQud2luZG93cy50aHVtYm5haWwtY2FjaGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1pZWxlK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubWlmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibWlmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1pbmlzb2Z0LWhwMzAwMC1zYXZlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5taXRzdWJpc2hpLm1pc3R5LWd1YXJkLnRydXN0d2ViXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tb2JpdXMuZGFmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGFmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1vYml1cy5kaXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkaXNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW9iaXVzLm1ia1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1ia1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tb2JpdXMubXF5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXF5XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1vYml1cy5tc2xcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtc2xcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW9iaXVzLnBsY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBsY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tb2JpdXMudHhmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widHhmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1vcGh1bi5hcHBsaWNhdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1wblwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tb3BodW4uY2VydGlmaWNhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtcGNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW90b3JvbGEuZmxleHN1aXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tb3Rvcm9sYS5mbGV4c3VpdGUuYWRzaVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW90b3JvbGEuZmxleHN1aXRlLmZpc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW90b3JvbGEuZmxleHN1aXRlLmdvdGFwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tb3Rvcm9sYS5mbGV4c3VpdGUua21yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tb3Rvcm9sYS5mbGV4c3VpdGUudHRjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tb3Rvcm9sYS5mbGV4c3VpdGUud2VtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tb3Rvcm9sYS5pcHJtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tb3ppbGxhLnh1bCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInh1bFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy0zbWZkb2N1bWVudFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtYXJ0Z2FscnlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjaWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtYXNmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1jYWItY29tcHJlc3NlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNhYlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1jb2xvci5pY2Nwcm9maWxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGxzXCIsXCJ4bG1cIixcInhsYVwiLFwieGxjXCIsXCJ4bHRcIixcInhsd1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5hZGRpbi5tYWNyb2VuYWJsZWQuMTJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4bGFtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnNoZWV0LmJpbmFyeS5tYWNyb2VuYWJsZWQuMTJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4bHNiXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnNoZWV0Lm1hY3JvZW5hYmxlZC4xMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhsc21cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwudGVtcGxhdGUubWFjcm9lbmFibGVkLjEyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGx0bVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1mb250b2JqZWN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJlb3RcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtaHRtbGhlbHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjaG1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtaW1zXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaW1zXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLWxybVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImxybVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1vZmZpY2UuYWN0aXZleCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtb2ZmaWNldGhlbWVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0aG14XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLW9wZW50eXBlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtb3V0bG9va1wiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1zZ1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1wYWNrYWdlLm9iZnVzY2F0ZWQtb3BlbnR5cGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtcGtpLnNlY2NhdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2F0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXBraS5zdGxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInN0bFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1wbGF5cmVhZHkuaW5pdGlhdG9yK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicHB0XCIsXCJwcHNcIixcInBvdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50LmFkZGluLm1hY3JvZW5hYmxlZC4xMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBwYW1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludC5wcmVzZW50YXRpb24ubWFjcm9lbmFibGVkLjEyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicHB0bVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50LnNsaWRlLm1hY3JvZW5hYmxlZC4xMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNsZG1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludC5zbGlkZXNob3cubWFjcm9lbmFibGVkLjEyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicHBzbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50LnRlbXBsYXRlLm1hY3JvZW5hYmxlZC4xMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBvdG1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtcHJpbnRkZXZpY2VjYXBhYmlsaXRpZXMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXByaW50aW5nLnByaW50dGlja2V0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXByaW50c2NoZW1hdGlja2V0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1wcm9qZWN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXBwXCIsXCJtcHRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtdG5lZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtd2luZG93cy5kZXZpY2VwYWlyaW5nXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy13aW5kb3dzLm53cHJpbnRpbmcub29iXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy13aW5kb3dzLnByaW50ZXJwYWlyaW5nXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy13aW5kb3dzLndzZC5vb2JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXdtZHJtLmxpYy1jaGxnLXJlcVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtd21kcm0ubGljLXJlc3BcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXdtZHJtLm1ldGVyLWNobGctcmVxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy13bWRybS5tZXRlci1yZXNwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy13b3JkLmRvY3VtZW50Lm1hY3JvZW5hYmxlZC4xMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRvY21cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtd29yZC50ZW1wbGF0ZS5tYWNyb2VuYWJsZWQuMTJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkb3RtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXdvcmtzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid3BzXCIsXCJ3a3NcIixcIndjbVwiLFwid2RiXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXdwbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndwbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy14cHNkb2N1bWVudFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhwc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tc2EtZGlzay1pbWFnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXNlcVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1zZXFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXNpZ25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm11bHRpYWQuY3JlYXRvclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXVsdGlhZC5jcmVhdG9yLmNpZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXVzaWMtbmlmZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXVzaWNpYW5cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtdXNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXV2ZWUuc3R5bGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtc3R5XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm15bmZjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widGFnbGV0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5hY2FtYXIueWJyaWQranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5uY2QuY29udHJvbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubmNkLnJlZmVyZW5jZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubmVhcnN0Lmluditqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5lYnVtaW5kLmxpbmVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5lcnZhbmFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5ldGZweFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubmV1cm9sYW5ndWFnZS5ubHVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJubHVcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubmltblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubmludGVuZG8ubml0cm8ucm9tXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5uaW50ZW5kby5zbmVzLnJvbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubml0ZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm50ZlwiLFwibml0ZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ub2JsZW5ldC1kaXJlY3RvcnlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJubmRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm9ibGVuZXQtc2VhbGVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibm5zXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5vYmxlbmV0LXdlYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm5ud1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ub2tpYS5jYXRhbG9nc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm9raWEuY29ubWwrd2J4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5va2lhLmNvbm1sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ub2tpYS5pcHR2LmNvbmZpZyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm9raWEuaXNkcy1yYWRpby1wcmVzZXRzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ub2tpYS5sYW5kbWFyayt3YnhtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm9raWEubGFuZG1hcmsreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5va2lhLmxhbmRtYXJrY29sbGVjdGlvbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm9raWEubi1nYWdlLmFjK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm9raWEubi1nYWdlLmRhdGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJuZ2RhdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ub2tpYS5uLWdhZ2Uuc3ltYmlhbi5pbnN0YWxsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibi1nYWdlXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5va2lhLm5jZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm9raWEucGNkK3dieG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ub2tpYS5wY2QreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5va2lhLnJhZGlvLXByZXNldFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJwc3RcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm9raWEucmFkaW8tcHJlc2V0c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJwc3NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm92YWRpZ20uZWRtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZWRtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5vdmFkaWdtLmVkeFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImVkeFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ub3ZhZGlnbS5leHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJleHRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubnR0LWxvY2FsLmNvbnRlbnQtc2hhcmVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm50dC1sb2NhbC5maWxlLXRyYW5zZmVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5udHQtbG9jYWwub2d3X3JlbW90ZS1hY2Nlc3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm50dC1sb2NhbC5zaXAtdGFfcmVtb3RlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5udHQtbG9jYWwuc2lwLXRhX3RjcF9zdHJlYW1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5jaGFydFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9kY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuY2hhcnQtdGVtcGxhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvdGNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmRhdGFiYXNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib2RiXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5mb3JtdWxhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib2RmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5mb3JtdWxhLXRlbXBsYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib2RmdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuZ3JhcGhpY3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvZGdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmdyYXBoaWNzLXRlbXBsYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib3RnXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5pbWFnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9kaVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuaW1hZ2UtdGVtcGxhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvdGlcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnByZXNlbnRhdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9kcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQucHJlc2VudGF0aW9uLXRlbXBsYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib3RwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5zcHJlYWRzaGVldFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9kc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuc3ByZWFkc2hlZXQtdGVtcGxhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvdHNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnRleHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvZHRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnRleHQtbWFzdGVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib2RtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC50ZXh0LXRlbXBsYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib3R0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC50ZXh0LXdlYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm90aFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vYm5cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9jZitjYm9yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vY2kuaW1hZ2UubWFuaWZlc3QudjEranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vZnRuLmwxMG4ranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vaXBmLmNvbnRlbnRhY2Nlc3Nkb3dubG9hZCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2lwZi5jb250ZW50YWNjZXNzc3RyZWFtaW5nK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vaXBmLmNzcGctaGV4YmluYXJ5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vaXBmLmRhZS5zdmcreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9pcGYuZGFlLnhodG1sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vaXBmLm1pcHB2Y29udHJvbG1lc3NhZ2UreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9pcGYucGFlLmdlbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2lwZi5zcGRpc2NvdmVyeSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2lwZi5zcGRsaXN0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vaXBmLnVlcHJvZmlsZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2lwZi51c2VycHJvZmlsZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2xwYy1zdWdhclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhvXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS1zY3dzLWNvbmZpZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLXNjd3MtaHR0cC1yZXF1ZXN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEtc2N3cy1odHRwLXJlc3BvbnNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuYmNhc3QuYXNzb2NpYXRlZC1wcm9jZWR1cmUtcGFyYW1ldGVyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuYmNhc3QuZHJtLXRyaWdnZXIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5iY2FzdC5pbWQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5iY2FzdC5sdGttXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuYmNhc3Qubm90aWZpY2F0aW9uK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuYmNhc3QucHJvdmlzaW9uaW5ndHJpZ2dlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmJjYXN0LnNnYm9vdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmJjYXN0LnNnZGQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5iY2FzdC5zZ2R1XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuYmNhc3Quc2ltcGxlLXN5bWJvbC1jb250YWluZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5iY2FzdC5zbWFydGNhcmQtdHJpZ2dlcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmJjYXN0LnNwcm92K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuYmNhc3Quc3RrbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmNhYi1hZGRyZXNzLWJvb2sreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5jYWItZmVhdHVyZS1oYW5kbGVyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuY2FiLXBjYyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmNhYi1zdWJzLWludml0ZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmNhYi11c2VyLXByZWZzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuZGNkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuZGNkY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmRkMit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRkMlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuZHJtLnJpc2QreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5ncm91cC11c2FnZS1saXN0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEubHdtMm0rY2JvclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmx3bTJtK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmx3bTJtK3RsdlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLnBhbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLnBvYy5kZXRhaWxlZC1wcm9ncmVzcy1yZXBvcnQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5wb2MuZmluYWwtcmVwb3J0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEucG9jLmdyb3Vwcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLnBvYy5pbnZvY2F0aW9uLWRlc2NyaXB0b3IreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5wb2Mub3B0aW1pemVkLXByb2dyZXNzLXJlcG9ydCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLnB1c2hcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5zY2lkbS5tZXNzYWdlcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLnhjYXAtZGlyZWN0b3J5K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWFkcy1lbWFpbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWFkcy1maWxlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYWRzLWZvbGRlcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWFsb2Mtc3VwbC1pbml0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbmVwYWdlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub25lcGFnZXJ0YW1wXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbmVwYWdlcnRhbXhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9uZXBhZ2VydGF0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbmVwYWdlcnRhdHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9uZXBhZ2VydGF0eFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbmJsb3guZ2FtZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9iZ3hcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbmJsb3guZ2FtZS1iaW5hcnlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW5leWUub2ViXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVub2ZmaWNlb3JnLmV4dGVuc2lvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib3h0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW5zdHJlZXRtYXAuZGF0YSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9zbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVudGltZXN0YW1wcy5vdHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmN1c3RvbS1wcm9wZXJ0aWVzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5jdXN0b214bWxwcm9wZXJ0aWVzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5kcmF3aW5nK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5kcmF3aW5nbWwuY2hhcnQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmRyYXdpbmdtbC5jaGFydHNoYXBlcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuZHJhd2luZ21sLmRpYWdyYW1jb2xvcnMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmRyYXdpbmdtbC5kaWFncmFtZGF0YSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuZHJhd2luZ21sLmRpYWdyYW1sYXlvdXQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmRyYXdpbmdtbC5kaWFncmFtc3R5bGUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmV4dGVuZGVkLXByb3BlcnRpZXMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLmNvbW1lbnRhdXRob3JzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5jb21tZW50cyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwuaGFuZG91dG1hc3Rlcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwubm90ZXNtYXN0ZXIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLm5vdGVzc2xpZGUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnByZXNlbnRhdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBwdHhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwucHJlc2VudGF0aW9uLm1haW4reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnByZXNwcm9wcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwuc2xpZGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzbGR4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnNsaWRlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5zbGlkZWxheW91dCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwuc2xpZGVtYXN0ZXIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnNsaWRlc2hvd1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBwc3hcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwuc2xpZGVzaG93Lm1haW4reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnNsaWRldXBkYXRlaW5mbyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwudGFibGVzdHlsZXMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnRhZ3MreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnRlbXBsYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicG90eFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC50ZW1wbGF0ZS5tYWluK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC52aWV3cHJvcHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuY2FsY2NoYWluK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLmNoYXJ0c2hlZXQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuY29tbWVudHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuY29ubmVjdGlvbnMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuZGlhbG9nc2hlZXQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuZXh0ZXJuYWxsaW5rK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnBpdm90Y2FjaGVkZWZpbml0aW9uK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnBpdm90Y2FjaGVyZWNvcmRzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnBpdm90dGFibGUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwucXVlcnl0YWJsZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5yZXZpc2lvbmhlYWRlcnMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwucmV2aXNpb25sb2creG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hhcmVkc3RyaW5ncyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhsc3hcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldC5tYWluK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0bWV0YWRhdGEreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc3R5bGVzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnRhYmxlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnRhYmxlc2luZ2xlY2VsbHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwudGVtcGxhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4bHR4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwudGVtcGxhdGUubWFpbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC51c2VybmFtZXMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwudm9sYXRpbGVkZXBlbmRlbmNpZXMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwud29ya3NoZWV0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC50aGVtZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQudGhlbWVvdmVycmlkZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQudm1sZHJhd2luZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5jb21tZW50cyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRvY3hcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudC5nbG9zc2FyeSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudC5tYWluK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmVuZG5vdGVzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmZvbnR0YWJsZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5mb290ZXIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZm9vdG5vdGVzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLm51bWJlcmluZyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5zZXR0aW5ncyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5zdHlsZXMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwudGVtcGxhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkb3R4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwudGVtcGxhdGUubWFpbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC53ZWJzZXR0aW5ncyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtcGFja2FnZS5jb3JlLXByb3BlcnRpZXMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLXBhY2thZ2UuZGlnaXRhbC1zaWduYXR1cmUteG1sc2lnbmF0dXJlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1wYWNrYWdlLnJlbGF0aW9uc2hpcHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9yYWNsZS5yZXNvdXJjZStqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9yYW5nZS5pbmRhdGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9zYS5uZXRkZXBsb3lcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9zZ2VvLm1hcGd1aWRlLnBhY2thZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtZ3BcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3NnaS5idW5kbGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9zZ2kuZHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vc2dpLnN1YnN5c3RlbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImVzYVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vdHBzLmN0LWtpcCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3hsaS5jb3VudGdyYXBoXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wYWdlcmR1dHkranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wYWxtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGRiXCIsXCJwcWFcIixcIm9wcmNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucGFub3BseVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucGFvcy54bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBhdGVudGRpdmVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBhdGllbnRlY29tbXNkb2NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBhd2FhZmlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBhd1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wY29zXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wZy5mb3JtYXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzdHJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucGcub3Nhc2xpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZWk2XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBpYWNjZXNzLmFwcGxpY2F0aW9uLWxpY2VuY2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBpY3NlbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImVmaWZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucG1pLndpZGdldFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndnXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBvYy5ncm91cC1hZHZlcnRpc2VtZW50K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wb2NrZXRsZWFyblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBsZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wb3dlcmJ1aWxkZXI2XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGJkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBvd2VyYnVpbGRlcjYtc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucG93ZXJidWlsZGVyN1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucG93ZXJidWlsZGVyNy1zXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wb3dlcmJ1aWxkZXI3NVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucG93ZXJidWlsZGVyNzUtc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucHJlbWluZXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnByZXZpZXdzeXN0ZW1zLmJveFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImJveFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wcm90ZXVzLm1hZ2F6aW5lXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibWd6XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBzZnNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnB1Ymxpc2hhcmUtZGVsdGEtdHJlZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInFwc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wdmkucHRpZDFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwdGlkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnB3Zy1tdWx0aXBsZXhlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucHdnLXhodG1sLXByaW50K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5xdWFsY29tbS5icmV3LWFwcC1yZXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnF1YXJhbnRhaW5lbmV0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5xdWFyay5xdWFya3hwcmVzc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInF4ZFwiLFwicXh0XCIsXCJxd2RcIixcInF3dFwiLFwicXhsXCIsXCJxeGJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucXVvYmplY3QtcXVveGRvY3VtZW50XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yYWRpc3lzLm1vbWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJhZGlzeXMubXNtbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmFkaXN5cy5tc21sLWF1ZGl0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yYWRpc3lzLm1zbWwtYXVkaXQtY29uZit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmFkaXN5cy5tc21sLWF1ZGl0LWNvbm4reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJhZGlzeXMubXNtbC1hdWRpdC1kaWFsb2creG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJhZGlzeXMubXNtbC1hdWRpdC1zdHJlYW0reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJhZGlzeXMubXNtbC1jb25mK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yYWRpc3lzLm1zbWwtZGlhbG9nK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yYWRpc3lzLm1zbWwtZGlhbG9nLWJhc2UreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJhZGlzeXMubXNtbC1kaWFsb2ctZmF4LWRldGVjdCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmFkaXN5cy5tc21sLWRpYWxvZy1mYXgtc2VuZHJlY3YreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJhZGlzeXMubXNtbC1kaWFsb2ctZ3JvdXAreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJhZGlzeXMubXNtbC1kaWFsb2ctc3BlZWNoK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yYWRpc3lzLm1zbWwtZGlhbG9nLXRyYW5zZm9ybSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmFpbnN0b3IuZGF0YVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmFwaWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJhclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJhclwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yZWFsdm5jLmJlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImJlZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yZWNvcmRhcmUubXVzaWN4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJteGxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmVjb3JkYXJlLm11c2ljeG1sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXVzaWN4bWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmVubGVhcm4ucmxwcmludFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmVzaWxpZW50LmxvZ2ljXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yZXN0ZnVsK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmlnLmNyeXB0b25vdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjcnlwdG9ub3RlXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJpbS5jb2RcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNvZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ybi1yZWFsbWVkaWFcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJuLXJlYWxtZWRpYS12YnJcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJtdmJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucm91dGU2Ni5saW5rNjYreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJsaW5rNjZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucnMtMjc0eFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucnVja3VzLmRvd25sb2FkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zM3Ntc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2FpbGluZ3RyYWNrZXIudHJhY2tcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zYXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNibS5jaWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNibS5taWQyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zY3JpYnVzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zZWFsZWQuM2RmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zZWFsZWQuY3NmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zZWFsZWQuZG9jXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zZWFsZWQuZW1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zZWFsZWQubWh0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zZWFsZWQubmV0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zZWFsZWQucHB0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zZWFsZWQudGlmZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2VhbGVkLnhsc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2VhbGVkbWVkaWEuc29mdHNlYWwuaHRtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2VhbGVkbWVkaWEuc29mdHNlYWwucGRmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zZWVtYWlsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2VlXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNlaXMranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zZW1hXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2VtYVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zZW1kXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2VtZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zZW1mXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2VtZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zaGFkZS1zYXZlLWZpbGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNoYW5hLmluZm9ybWVkLmZvcm1kYXRhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaWZtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNoYW5hLmluZm9ybWVkLmZvcm10ZW1wbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIml0cFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zaGFuYS5pbmZvcm1lZC5pbnRlcmNoYW5nZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImlpZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zaGFuYS5pbmZvcm1lZC5wYWNrYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaXBrXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNob290cHJvb2YranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zaG9wa2ljaytqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNocFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2h4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zaWdyb2suc2Vzc2lvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2ltdGVjaC1taW5kbWFwcGVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widHdkXCIsXCJ0d2RzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNpcmVuK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc21hZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1tZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zbWFydC5ub3RlYm9va1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc21hcnQudGVhY2hlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRlYWNoZXJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc25lc2Rldi1wYWdlLXRhYmxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zb2Z0d2FyZTYwMi5maWxsZXIuZm9ybSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZvXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNvZnR3YXJlNjAyLmZpbGxlci5mb3JtLXhtbC16aXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNvbGVudC5zZGttK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2RrbVwiLFwic2RrZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zcG90ZmlyZS5keHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkeHBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3BvdGZpcmUuc2ZzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2ZzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNxbGl0ZTNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNzcy1jb2RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNzcy1kdGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNzcy1udGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN0YXJkaXZpc2lvbi5jYWxjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzZGNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3RhcmRpdmlzaW9uLmRyYXdcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNkYVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zdGFyZGl2aXNpb24uaW1wcmVzc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2RkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN0YXJkaXZpc2lvbi5tYXRoXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzbWZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3RhcmRpdmlzaW9uLndyaXRlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2R3XCIsXCJ2b3JcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3RhcmRpdmlzaW9uLndyaXRlci1nbG9iYWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNnbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zdGVwbWFuaWEucGFja2FnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNtemlwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN0ZXBtYW5pYS5zdGVwY2hhcnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zdHJlZXQtc3RyZWFtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zdW4ud2FkbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndhZGxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC5jYWxjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzeGNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC5jYWxjLnRlbXBsYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzdGNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC5kcmF3XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzeGRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC5kcmF3LnRlbXBsYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzdGRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC5pbXByZXNzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzeGlcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC5pbXByZXNzLnRlbXBsYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzdGlcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC5tYXRoXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzeG1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC53cml0ZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInN4d1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zdW4ueG1sLndyaXRlci5nbG9iYWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInN4Z1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zdW4ueG1sLndyaXRlci50ZW1wbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3R3XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN1cy1jYWxlbmRhclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInN1c1wiLFwic3VzcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zdmRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzdmRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3dpZnR2aWV3LWljc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3ljbGUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN5ZnQranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zeW1iaWFuLmluc3RhbGxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNpc1wiLFwic2lzeFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zeW5jbWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhzbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zeW5jbWwuZG0rd2J4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImJkbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zeW5jbWwuZG0reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhkbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zeW5jbWwuZG0ubm90aWZpY2F0aW9uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zeW5jbWwuZG1kZGYrd2J4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN5bmNtbC5kbWRkZit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGRmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN5bmNtbC5kbXRuZHMrd2J4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN5bmNtbC5kbXRuZHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3luY21sLmRzLm5vdGlmaWNhdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudGFibGVzY2hlbWEranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC50YW8uaW50ZW50LW1vZHVsZS1hcmNoaXZlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widGFvXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnRjcGR1bXAucGNhcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBjYXBcIixcImNhcFwiLFwiZG1wXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnRoaW5rLWNlbGwucHB0dGMranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC50bWQubWVkaWFmbGV4LmFwaSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC50bW9iaWxlLWxpdmV0dlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRtb1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC50cmkub25lc291cmNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC50cmlkLnRwdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRwdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC50cmlzY2FwZS5teHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJteHNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudHJ1ZWFwcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRyYVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC50cnVlZG9jXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC51Ymlzb2Z0LndlYnBsYXllclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudWZkbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInVmZFwiLFwidWZkbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC51aXEudGhlbWVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1dHpcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudW1hamluXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widW1qXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnVuaXR5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widW5pdHl3ZWJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudW9tbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInVvbWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudXBsYW5ldC5hbGVydFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudXBsYW5ldC5hbGVydC13YnhtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudXBsYW5ldC5iZWFyZXItY2hvaWNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC51cGxhbmV0LmJlYXJlci1jaG9pY2Utd2J4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnVwbGFuZXQuY2FjaGVvcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudXBsYW5ldC5jYWNoZW9wLXdieG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC51cGxhbmV0LmNoYW5uZWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnVwbGFuZXQuY2hhbm5lbC13YnhtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudXBsYW5ldC5saXN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC51cGxhbmV0Lmxpc3Qtd2J4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnVwbGFuZXQubGlzdGNtZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudXBsYW5ldC5saXN0Y21kLXdieG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC51cGxhbmV0LnNpZ25hbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudXJpLW1hcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudmFsdmUuc291cmNlLm1hdGVyaWFsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC52Y3hcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ2Y3hcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudmQtc3R1ZHlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnZlY3RvcndvcmtzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC52ZWwranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC52ZXJpbWF0cml4LnZjYXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnZlcml0b25lLmFpb24ranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC52ZXJ5YW50LnRoaW5cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnZlcy5lbmNyeXB0ZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnZpZHNvZnQudmlkY29uZmVyZW5jZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudmlzaW9cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ2c2RcIixcInZzdFwiLFwidnNzXCIsXCJ2c3dcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudmlzaW9uYXJ5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widmlzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnZpdmlkZW5jZS5zY3JpcHRmaWxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC52c2ZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ2c2ZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud2FwLnNpY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud2FwLnNsY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud2FwLndieG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3YnhtbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53YXAud21sY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndtbGNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud2FwLndtbHNjcmlwdGNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3bWxzY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53ZWJ0dXJib1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInd0YlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53ZmEuZHBwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53ZmEucDJwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53ZmEud3NjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53aW5kb3dzLmRldmljZXBhaXJpbmdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLndtY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud21mLmJvb3RzdHJhcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud29sZnJhbS5tYXRoZW1hdGljYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud29sZnJhbS5tYXRoZW1hdGljYS5wYWNrYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53b2xmcmFtLnBsYXllclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm5icFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53b3JkcGVyZmVjdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndwZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53cWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3cWRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud3JxLWhwMzAwMC1sYWJlbGxlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud3Quc3RmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3RmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnd2LmNzcCt3YnhtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud3YuY3NwK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53di5zc3AreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnhhY21sK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQueGFyYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhhclwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC54ZmRsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGZkbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC54ZmRsLndlYmZvcm1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnhtaSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQueG1waWUuY3BrZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQueG1waWUuZHBrZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQueG1waWUucGxhblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQueG1waWUucHBrZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQueG1waWUueGxpbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQueWFtYWhhLmh2LWRpY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImh2ZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC55YW1haGEuaHYtc2NyaXB0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaHZzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnlhbWFoYS5odi12b2ljZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImh2cFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC55YW1haGEub3BlbnNjb3JlZm9ybWF0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib3NmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnlhbWFoYS5vcGVuc2NvcmVmb3JtYXQub3NmcHZnK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib3NmcHZnXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnlhbWFoYS5yZW1vdGUtc2V0dXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnlhbWFoYS5zbWFmLWF1ZGlvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2FmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnlhbWFoYS5zbWFmLXBocmFzZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNwZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC55YW1haGEudGhyb3VnaC1uZ25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnlhbWFoYS50dW5uZWwtdWRwZW5jYXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnlhb3dlbWVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnllbGxvd3JpdmVyLWN1c3RvbS1tZW51XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY21wXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnlvdXR1YmUueXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnp1bFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInppclwiLFwiemlyelwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC56emF6ei5kZWNrK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiemF6XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm9pY2V4bWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ2eG1sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm91Y2hlci1jbXMranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZxLXJ0Y3B4clwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi93YXNtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3YXNtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vd2F0Y2hlcmluZm8reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3aWZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi93ZWJwdXNoLW9wdGlvbnMranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3dob2lzcHAtcXVlcnlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vd2hvaXNwcC1yZXNwb25zZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi93aWRnZXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3Z3RcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi93aW5obHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImhscFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3dpdGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vd29yZHBlcmZlY3Q1LjFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vd3NkbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndzZGxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi93c3BvbGljeSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndzcG9saWN5XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC03ei1jb21wcmVzc2VkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCI3elwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtYWJpd29yZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWJ3XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1hY2UtY29tcHJlc3NlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWNlXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1hbWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWFwcGxlLWRpc2tpbWFnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZG1nXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1hcmpcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhcmpcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWF1dGhvcndhcmUtYmluXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhYWJcIixcIngzMlwiLFwidTMyXCIsXCJ2b3hcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWF1dGhvcndhcmUtbWFwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhYW1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWF1dGhvcndhcmUtc2VnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhYXNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWJjcGlvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJiY3Bpb1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtYmRvY1wiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImJkb2NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWJpdHRvcnJlbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRvcnJlbnRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWJsb3JiXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJibGJcIixcImJsb3JiXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1iemlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJielwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtYnppcDJcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImJ6MlwiLFwiYm96XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1jYnJcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNiclwiLFwiY2JhXCIsXCJjYnRcIixcImNielwiLFwiY2I3XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1jZGxpbmtcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInZjZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtY2ZzLWNvbXByZXNzZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNmc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtY2hhdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2hhdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtY2hlc3MtcGduXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwZ25cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWNocm9tZS1leHRlbnNpb25cIjoge1xuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjcnhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWNvY29hXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcIm5naW54XCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNjb1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtY29tcHJlc3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWNvbmZlcmVuY2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm5zY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtY3Bpb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY3Bpb1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtY3NoXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjc2hcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWRlYlwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWRlYmlhbi1wYWNrYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkZWJcIixcInVkZWJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWRnYy1jb21wcmVzc2VkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkZ2NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWRpcmVjdG9yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkaXJcIixcImRjclwiLFwiZHhyXCIsXCJjc3RcIixcImNjdFwiLFwiY3h0XCIsXCJ3M2RcIixcImZnZFwiLFwic3dhXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1kb29tXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3YWRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWR0Ym5jeCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibmN4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1kdGJvb2sreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImR0YlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZHRicmVzb3VyY2UreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJlc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZHZpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkdmlcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWVudm95XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJldnlcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWV2YVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZXZhXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1mb250LWJkZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYmRmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1mb250LWRvc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZm9udC1mcmFtZW1ha2VyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1mb250LWdob3N0c2NyaXB0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnc2ZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWZvbnQtbGliZ3J4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1mb250LWxpbnV4LXBzZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicHNmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1mb250LXBjZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGNmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1mb250LXNuZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic25mXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1mb250LXNwZWVkb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZm9udC1zdW5vcy1uZXdzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1mb250LXR5cGUxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwZmFcIixcInBmYlwiLFwicGZtXCIsXCJhZm1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWZvbnQtdmZvbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWZyZWVhcmNcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFyY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZnV0dXJlc3BsYXNoXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzcGxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWdjYS1jb21wcmVzc2VkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnY2FcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWdsdWx4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1bHhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWdudW1lcmljXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnbnVtZXJpY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZ3JhbXBzLXhtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ3JhbXBzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1ndGFyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJndGFyXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1nemlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1oZGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImhkZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtaHR0cGQtcGhwXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwaHBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWluc3RhbGwtaW5zdHJ1Y3Rpb25zXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpbnN0YWxsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1pc285NjYwLWltYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpc29cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWl3b3JrLWtleW5vdGUtc2Zma2V5XCI6IHtcbiAgICBcImV4dGVuc2lvbnNcIjogW1wia2V5XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1pd29yay1udW1iZXJzLXNmZm51bWJlcnNcIjoge1xuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJudW1iZXJzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1pd29yay1wYWdlcy1zZmZwYWdlc1wiOiB7XG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBhZ2VzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1qYXZhLWFyY2hpdmUtZGlmZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJuZ2lueFwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqYXJkaWZmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1qYXZhLWpubHAtZmlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiam5scFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtamF2YXNjcmlwdFwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gta2VlcGFzczJcIjoge1xuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJrZGJ4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1sYXRleFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibGF0ZXhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWx1YS1ieXRlY29kZVwiOiB7XG4gICAgXCJleHRlbnNpb25zXCI6IFtcImx1YWNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWx6aC1jb21wcmVzc2VkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJsemhcIixcImxoYVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbWFrZXNlbGZcIjoge1xuICAgIFwic291cmNlXCI6IFwibmdpbnhcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicnVuXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1taWVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1pZVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbW9iaXBvY2tldC1lYm9va1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicHJjXCIsXCJtb2JpXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1tcGVndXJsXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbXMtYXBwbGljYXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFwcGxpY2F0aW9uXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1tcy1zaG9ydGN1dFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibG5rXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1tcy13bWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndtZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbXMtd216XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3bXpcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW1zLXhiYXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhiYXBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW1zYWNjZXNzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtZGJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW1zYmluZGVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvYmRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW1zY2FyZGZpbGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNyZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbXNjbGlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjbHBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW1zZG9zLXByb2dyYW1cIjoge1xuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJleGVcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW1zZG93bmxvYWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImV4ZVwiLFwiZGxsXCIsXCJjb21cIixcImJhdFwiLFwibXNpXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1tc21lZGlhdmlld1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXZiXCIsXCJtMTNcIixcIm0xNFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbXNtZXRhZmlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid21mXCIsXCJ3bXpcIixcImVtZlwiLFwiZW16XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1tc21vbmV5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtbnlcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW1zcHVibGlzaGVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwdWJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW1zc2NoZWR1bGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNjZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbXN0ZXJtaW5hbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widHJtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1tc3dyaXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3cmlcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW5ldGNkZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibmNcIixcImNkZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbnMtcHJveHktYXV0b2NvbmZpZ1wiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGFjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1uemJcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm56YlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtcGVybFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJuZ2lueFwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwbFwiLFwicG1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXBpbG90XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcIm5naW54XCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInByY1wiLFwicGRiXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1wa2NzMTJcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInAxMlwiLFwicGZ4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1wa2NzNy1jZXJ0aWZpY2F0ZXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInA3YlwiLFwic3BjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1wa2NzNy1jZXJ0cmVxcmVzcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicDdyXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1wa2ktbWVzc2FnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXJhci1jb21wcmVzc2VkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyYXJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXJlZGhhdC1wYWNrYWdlLW1hbmFnZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwibmdpbnhcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicnBtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1yZXNlYXJjaC1pbmZvLXN5c3RlbXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJpc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtc2VhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcIm5naW54XCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNlYVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtc2hcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2hcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXNoYXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNoYXJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3dmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1zaWx2ZXJsaWdodC1hcHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhhcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtc3FsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzcWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXN0dWZmaXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNpdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtc3R1ZmZpdHhcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNpdHhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXN1YnJpcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3J0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1zdjRjcGlvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzdjRjcGlvXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1zdjRjcmNcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInN2NGNyY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtdDN2bS1pbWFnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widDNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXRhZHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdhbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtdGFyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRhclwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtdGNsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0Y2xcIixcInRrXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC10ZXhcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRleFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtdGV4LXRmbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widGZtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC10ZXhpbmZvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0ZXhpbmZvXCIsXCJ0ZXhpXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC10Z2lmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvYmpcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXVzdGFyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1c3RhclwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtdmlydHVhbGJveC1oZGRcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImhkZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtdmlydHVhbGJveC1vdmFcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm92YVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtdmlydHVhbGJveC1vdmZcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm92ZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtdmlydHVhbGJveC12Ym94XCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ2Ym94XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC12aXJ0dWFsYm94LXZib3gtZXh0cGFja1wiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInZib3gtZXh0cGFja1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtdmlydHVhbGJveC12ZGlcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInZkaVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtdmlydHVhbGJveC12aGRcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInZoZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtdmlydHVhbGJveC12bWRrXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ2bWRrXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC13YWlzLXNvdXJjZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3JjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC13ZWItYXBwLW1hbmlmZXN0K2pzb25cIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndlYmFwcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gteDUwOS1jYS1jZXJ0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGVyXCIsXCJjcnRcIixcInBlbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gteDUwOS1jYS1yYS1jZXJ0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gteDUwOS1uZXh0LWNhLWNlcnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC14ZmlnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmaWdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXhsaWZmK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4bGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXhwaW5zdGFsbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieHBpXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC14elwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieHpcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXptYWNoaW5lXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ6MVwiLFwiejJcIixcInozXCIsXCJ6NFwiLFwiejVcIixcIno2XCIsXCJ6N1wiLFwiejhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94NDAwLWJwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3hhY21sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3hhbWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhhbWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94Y2FwLWF0dCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhhdlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3hjYXAtY2Fwcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhjYVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3hjYXAtZGlmZit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhkZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3hjYXAtZWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4ZWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94Y2FwLWVycm9yK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3hjYXAtbnMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4bnNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94Y29uLWNvbmZlcmVuY2UtaW5mbyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94Y29uLWNvbmZlcmVuY2UtaW5mby1kaWZmK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3hlbmMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4ZW5jXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veGh0bWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4aHRtbFwiLFwieGh0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veGh0bWwtdm9pY2UreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94bGlmZit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhsZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieG1sXCIsXCJ4c2xcIixcInhzZFwiLFwicm5nXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veG1sLWR0ZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZHRkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veG1sLWV4dGVybmFsLXBhcnNlZC1lbnRpdHlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veG1sLXBhdGNoK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3htcHAreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veG9wK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieG9wXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veHByb2MreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhwbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3hzbHQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4c2xcIixcInhzbHRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94c3BmK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4c3BmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veHYreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJteG1sXCIsXCJ4aHZtbFwiLFwieHZtbFwiLFwieHZtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veWFuZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInlhbmdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi95YW5nLWRhdGEranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3lhbmctZGF0YSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi95YW5nLXBhdGNoK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi95YW5nLXBhdGNoK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3lpbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInlpblwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInppcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3psaWJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24venN0ZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby8xZC1pbnRlcmxlYXZlZC1wYXJpdHlmZWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vMzJrYWRwY21cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vM2dwcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIjNncHBcIl1cbiAgfSxcbiAgXCJhdWRpby8zZ3BwMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9hYWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vYWMzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2FkcGNtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhZHBcIl1cbiAgfSxcbiAgXCJhdWRpby9hbXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhbXJcIl1cbiAgfSxcbiAgXCJhdWRpby9hbXItd2JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vYW1yLXdiK1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9hcHR4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2FzY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9hdHJhYy1hZHZhbmNlZC1sb3NzbGVzc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9hdHJhYy14XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2F0cmFjM1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9iYXNpY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImF1XCIsXCJzbmRcIl1cbiAgfSxcbiAgXCJhdWRpby9idjE2XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2J2MzJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vY2xlYXJtb2RlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2NuXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2RhdDEyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2Rsc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9kc3ItZXMyMDExMDhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZHNyLWVzMjAyMDUwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2Rzci1lczIwMjIxMVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9kc3ItZXMyMDIyMTJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZHZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZHZpNFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9lYWMzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2VuY2FwcnRwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2V2cmNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZXZyYy1xY3BcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZXZyYzBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZXZyYzFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZXZyY2JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZXZyY2IwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2V2cmNiMVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9ldnJjbndcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZXZyY253MFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9ldnJjbncxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2V2cmN3YlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9ldnJjd2IwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2V2cmN3YjFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZXZzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2ZsZXhmZWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZndkcmVkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2c3MTEtMFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9nNzE5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2c3MjJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZzcyMjFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZzcyM1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9nNzI2LTE2XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2c3MjYtMjRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZzcyNi0zMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9nNzI2LTQwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2c3MjhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZzcyOVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9nNzI5MVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9nNzI5ZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9nNzI5ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9nc21cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZ3NtLWVmclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9nc20taHItMDhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vaWxiY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9pcC1tcl92Mi41XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2lzYWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJhdWRpby9sMTZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vbDIwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2wyNFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhdWRpby9sOFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9scGNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vbWVscFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9tZWxwMTIwMFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9tZWxwMjQwMFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9tZWxwNjAwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL21oYXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vbWlkaVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibWlkXCIsXCJtaWRpXCIsXCJrYXJcIixcInJtaVwiXVxuICB9LFxuICBcImF1ZGlvL21vYmlsZS14bWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJteG1mXCJdXG4gIH0sXG4gIFwiYXVkaW8vbXAzXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXAzXCJdXG4gIH0sXG4gIFwiYXVkaW8vbXA0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibTRhXCIsXCJtcDRhXCJdXG4gIH0sXG4gIFwiYXVkaW8vbXA0YS1sYXRtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL21wYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9tcGEtcm9idXN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL21wZWdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtcGdhXCIsXCJtcDJcIixcIm1wMmFcIixcIm1wM1wiLFwibTJhXCIsXCJtM2FcIl1cbiAgfSxcbiAgXCJhdWRpby9tcGVnNC1nZW5lcmljXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL211c2VwYWNrXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwiYXVkaW8vb2dnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib2dhXCIsXCJvZ2dcIixcInNweFwiLFwib3B1c1wiXVxuICB9LFxuICBcImF1ZGlvL29wdXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vcGFyaXR5ZmVjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3BjbWFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vcGNtYS13YlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9wY211XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3BjbXUtd2JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vcHJzLnNpZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9xY2VscFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9yYXB0b3JmZWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vcmVkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3J0cC1lbmMtYWVzY20xMjhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vcnRwLW1pZGlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vcnRwbG9vcGJhY2tcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vcnR4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3MzbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiczNtXCJdXG4gIH0sXG4gIFwiYXVkaW8vc2NpcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9zaWxrXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzaWxcIl1cbiAgfSxcbiAgXCJhdWRpby9zbXZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vc212LXFjcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9zbXYwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3NvZmFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vc3AtbWlkaVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9zcGVleFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby90MTQwY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby90MzhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdGVsZXBob25lLWV2ZW50XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3RldHJhX2FjZWxwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3RldHJhX2FjZWxwX2JiXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3RvbmVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdHN2Y2lzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3VlbWNsaXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdWxwZmVjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3VzYWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdmR2aVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bXItd2JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLjNncHAuaXVmcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQuNHNiXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5hdWRpb2tvelwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQuY2VscFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQuY2lzY28ubnNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5jbWxlcy5yYWRpby1ldmVudHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmNucy5hbnAxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5jbnMuaW5mMVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQuZGVjZS5hdWRpb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInV2YVwiLFwidXZ2YVwiXVxuICB9LFxuICBcImF1ZGlvL3ZuZC5kaWdpdGFsLXdpbmRzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZW9sXCJdXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmRsbmEuYWR0c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQuZG9sYnkuaGVhYWMuMVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQuZG9sYnkuaGVhYWMuMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQuZG9sYnkubWxwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5kb2xieS5tcHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmRvbGJ5LnBsMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQuZG9sYnkucGwyeFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQuZG9sYnkucGwyelwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQuZG9sYnkucHVsc2UuMVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQuZHJhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZHJhXCJdXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmR0c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImR0c1wiXVxuICB9LFxuICBcImF1ZGlvL3ZuZC5kdHMuaGRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkdHNoZFwiXVxuICB9LFxuICBcImF1ZGlvL3ZuZC5kdHMudWhkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5kdmIuZmlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQuZXZlcmFkLnBsalwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQuaG5zLmF1ZGlvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5sdWNlbnQudm9pY2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJsdnBcIl1cbiAgfSxcbiAgXCJhdWRpby92bmQubXMtcGxheXJlYWR5Lm1lZGlhLnB5YVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInB5YVwiXVxuICB9LFxuICBcImF1ZGlvL3ZuZC5ub2tpYS5tb2JpbGUteG1mXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5ub3J0ZWwudmJrXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5udWVyYS5lY2VscDQ4MDBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJlY2VscDQ4MDBcIl1cbiAgfSxcbiAgXCJhdWRpby92bmQubnVlcmEuZWNlbHA3NDcwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZWNlbHA3NDcwXCJdXG4gIH0sXG4gIFwiYXVkaW8vdm5kLm51ZXJhLmVjZWxwOTYwMFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImVjZWxwOTYwMFwiXVxuICB9LFxuICBcImF1ZGlvL3ZuZC5vY3RlbC5zYmNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLnByZXNvbnVzLm11bHRpdHJhY2tcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLnFjZWxwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5yaGV0b3JleC4zMmthZHBjbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQucmlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicmlwXCJdXG4gIH0sXG4gIFwiYXVkaW8vdm5kLnJuLXJlYWxhdWRpb1wiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhdWRpby92bmQuc2VhbGVkbWVkaWEuc29mdHNlYWwubXBlZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQudm14LmN2c2RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLndhdmVcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwiYXVkaW8vdm9yYmlzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcImF1ZGlvL3ZvcmJpcy1jb25maWdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vd2F2XCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid2F2XCJdXG4gIH0sXG4gIFwiYXVkaW8vd2F2ZVwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndhdlwiXVxuICB9LFxuICBcImF1ZGlvL3dlYm1cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndlYmFcIl1cbiAgfSxcbiAgXCJhdWRpby94LWFhY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWFjXCJdXG4gIH0sXG4gIFwiYXVkaW8veC1haWZmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhaWZcIixcImFpZmZcIixcImFpZmNcIl1cbiAgfSxcbiAgXCJhdWRpby94LWNhZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2FmXCJdXG4gIH0sXG4gIFwiYXVkaW8veC1mbGFjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmbGFjXCJdXG4gIH0sXG4gIFwiYXVkaW8veC1tNGFcIjoge1xuICAgIFwic291cmNlXCI6IFwibmdpbnhcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibTRhXCJdXG4gIH0sXG4gIFwiYXVkaW8veC1tYXRyb3NrYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibWthXCJdXG4gIH0sXG4gIFwiYXVkaW8veC1tcGVndXJsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtM3VcIl1cbiAgfSxcbiAgXCJhdWRpby94LW1zLXdheFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid2F4XCJdXG4gIH0sXG4gIFwiYXVkaW8veC1tcy13bWFcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndtYVwiXVxuICB9LFxuICBcImF1ZGlvL3gtcG4tcmVhbGF1ZGlvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyYW1cIixcInJhXCJdXG4gIH0sXG4gIFwiYXVkaW8veC1wbi1yZWFsYXVkaW8tcGx1Z2luXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJybXBcIl1cbiAgfSxcbiAgXCJhdWRpby94LXJlYWxhdWRpb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJuZ2lueFwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyYVwiXVxuICB9LFxuICBcImF1ZGlvL3gtdHRhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwiYXVkaW8veC13YXZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndhdlwiXVxuICB9LFxuICBcImF1ZGlvL3htXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4bVwiXVxuICB9LFxuICBcImNoZW1pY2FsL3gtY2R4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjZHhcIl1cbiAgfSxcbiAgXCJjaGVtaWNhbC94LWNpZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2lmXCJdXG4gIH0sXG4gIFwiY2hlbWljYWwveC1jbWRmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjbWRmXCJdXG4gIH0sXG4gIFwiY2hlbWljYWwveC1jbWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNtbFwiXVxuICB9LFxuICBcImNoZW1pY2FsL3gtY3NtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY3NtbFwiXVxuICB9LFxuICBcImNoZW1pY2FsL3gtcGRiXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwiY2hlbWljYWwveC14eXpcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInh5elwiXVxuICB9LFxuICBcImZvbnQvY29sbGVjdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInR0Y1wiXVxuICB9LFxuICBcImZvbnQvb3RmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvdGZcIl1cbiAgfSxcbiAgXCJmb250L3NmbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiZm9udC90dGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInR0ZlwiXVxuICB9LFxuICBcImZvbnQvd29mZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndvZmZcIl1cbiAgfSxcbiAgXCJmb250L3dvZmYyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid29mZjJcIl1cbiAgfSxcbiAgXCJpbWFnZS9hY2VzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZXhyXCJdXG4gIH0sXG4gIFwiaW1hZ2UvYXBuZ1wiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFwbmdcIl1cbiAgfSxcbiAgXCJpbWFnZS9hdmNpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXZjaVwiXVxuICB9LFxuICBcImltYWdlL2F2Y3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhdmNzXCJdXG4gIH0sXG4gIFwiaW1hZ2UvYXZpZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImF2aWZcIl1cbiAgfSxcbiAgXCJpbWFnZS9ibXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImJtcFwiXVxuICB9LFxuICBcImltYWdlL2NnbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNnbVwiXVxuICB9LFxuICBcImltYWdlL2RpY29tLXJsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRybGVcIl1cbiAgfSxcbiAgXCJpbWFnZS9lbWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJlbWZcIl1cbiAgfSxcbiAgXCJpbWFnZS9maXRzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZml0c1wiXVxuICB9LFxuICBcImltYWdlL2czZmF4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZzNcIl1cbiAgfSxcbiAgXCJpbWFnZS9naWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnaWZcIl1cbiAgfSxcbiAgXCJpbWFnZS9oZWljXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaGVpY1wiXVxuICB9LFxuICBcImltYWdlL2hlaWMtc2VxdWVuY2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJoZWljc1wiXVxuICB9LFxuICBcImltYWdlL2hlaWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJoZWlmXCJdXG4gIH0sXG4gIFwiaW1hZ2UvaGVpZi1zZXF1ZW5jZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImhlaWZzXCJdXG4gIH0sXG4gIFwiaW1hZ2UvaGVqMmtcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJoZWoyXCJdXG4gIH0sXG4gIFwiaW1hZ2UvaHNqMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImhzajJcIl1cbiAgfSxcbiAgXCJpbWFnZS9pZWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpZWZcIl1cbiAgfSxcbiAgXCJpbWFnZS9qbHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqbHNcIl1cbiAgfSxcbiAgXCJpbWFnZS9qcDJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqcDJcIixcImpwZzJcIl1cbiAgfSxcbiAgXCJpbWFnZS9qcGVnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wianBlZ1wiLFwianBnXCIsXCJqcGVcIl1cbiAgfSxcbiAgXCJpbWFnZS9qcGhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqcGhcIl1cbiAgfSxcbiAgXCJpbWFnZS9qcGhjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiamhjXCJdXG4gIH0sXG4gIFwiaW1hZ2UvanBtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wianBtXCJdXG4gIH0sXG4gIFwiaW1hZ2UvanB4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wianB4XCIsXCJqcGZcIl1cbiAgfSxcbiAgXCJpbWFnZS9qeHJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqeHJcIl1cbiAgfSxcbiAgXCJpbWFnZS9qeHJhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wianhyYVwiXVxuICB9LFxuICBcImltYWdlL2p4cnNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqeHJzXCJdXG4gIH0sXG4gIFwiaW1hZ2UvanhzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wianhzXCJdXG4gIH0sXG4gIFwiaW1hZ2UvanhzY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImp4c2NcIl1cbiAgfSxcbiAgXCJpbWFnZS9qeHNpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wianhzaVwiXVxuICB9LFxuICBcImltYWdlL2p4c3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqeHNzXCJdXG4gIH0sXG4gIFwiaW1hZ2Uva3R4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wia3R4XCJdXG4gIH0sXG4gIFwiaW1hZ2Uva3R4MlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImt0eDJcIl1cbiAgfSxcbiAgXCJpbWFnZS9uYXBscHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiaW1hZ2UvcGpwZWdcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwiaW1hZ2UvcG5nXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicG5nXCJdXG4gIH0sXG4gIFwiaW1hZ2UvcHJzLmJ0aWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJidGlmXCJdXG4gIH0sXG4gIFwiaW1hZ2UvcHJzLnB0aVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInB0aVwiXVxuICB9LFxuICBcImltYWdlL3B3Zy1yYXN0ZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiaW1hZ2Uvc2dpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzZ2lcIl1cbiAgfSxcbiAgXCJpbWFnZS9zdmcreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzdmdcIixcInN2Z3pcIl1cbiAgfSxcbiAgXCJpbWFnZS90MzhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0MzhcIl1cbiAgfSxcbiAgXCJpbWFnZS90aWZmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1widGlmXCIsXCJ0aWZmXCJdXG4gIH0sXG4gIFwiaW1hZ2UvdGlmZi1meFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRmeFwiXVxuICB9LFxuICBcImltYWdlL3ZuZC5hZG9iZS5waG90b3Nob3BcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBzZFwiXVxuICB9LFxuICBcImltYWdlL3ZuZC5haXJ6aXAuYWNjZWxlcmF0b3IuYXp2XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXp2XCJdXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLmNucy5pbmYyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImltYWdlL3ZuZC5kZWNlLmdyYXBoaWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1dmlcIixcInV2dmlcIixcInV2Z1wiLFwidXZ2Z1wiXVxuICB9LFxuICBcImltYWdlL3ZuZC5kanZ1XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGp2dVwiLFwiZGp2XCJdXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLmR2Yi5zdWJ0aXRsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInN1YlwiXVxuICB9LFxuICBcImltYWdlL3ZuZC5kd2dcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkd2dcIl1cbiAgfSxcbiAgXCJpbWFnZS92bmQuZHhmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZHhmXCJdXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLmZhc3RiaWRzaGVldFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZic1wiXVxuICB9LFxuICBcImltYWdlL3ZuZC5mcHhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmcHhcIl1cbiAgfSxcbiAgXCJpbWFnZS92bmQuZnN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZnN0XCJdXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLmZ1aml4ZXJveC5lZG1pY3MtbW1yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibW1yXCJdXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLmZ1aml4ZXJveC5lZG1pY3MtcmxjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicmxjXCJdXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLmdsb2JhbGdyYXBoaWNzLnBnYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJpbWFnZS92bmQubWljcm9zb2Z0Lmljb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImljb1wiXVxuICB9LFxuICBcImltYWdlL3ZuZC5taXhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLm1vemlsbGEuYXBuZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJpbWFnZS92bmQubXMtZGRzXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkZHNcIl1cbiAgfSxcbiAgXCJpbWFnZS92bmQubXMtbW9kaVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1kaVwiXVxuICB9LFxuICBcImltYWdlL3ZuZC5tcy1waG90b1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid2RwXCJdXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLm5ldC1mcHhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJucHhcIl1cbiAgfSxcbiAgXCJpbWFnZS92bmQucGNvLmIxNlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImIxNlwiXVxuICB9LFxuICBcImltYWdlL3ZuZC5yYWRpYW5jZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJpbWFnZS92bmQuc2VhbGVkLnBuZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJpbWFnZS92bmQuc2VhbGVkbWVkaWEuc29mdHNlYWwuZ2lmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImltYWdlL3ZuZC5zZWFsZWRtZWRpYS5zb2Z0c2VhbC5qcGdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLnN2ZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJpbWFnZS92bmQudGVuY2VudC50YXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0YXBcIl1cbiAgfSxcbiAgXCJpbWFnZS92bmQudmFsdmUuc291cmNlLnRleHR1cmVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ2dGZcIl1cbiAgfSxcbiAgXCJpbWFnZS92bmQud2FwLndibXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3Ym1wXCJdXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLnhpZmZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4aWZcIl1cbiAgfSxcbiAgXCJpbWFnZS92bmQuemJydXNoLnBjeFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBjeFwiXVxuICB9LFxuICBcImltYWdlL3dlYnBcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndlYnBcIl1cbiAgfSxcbiAgXCJpbWFnZS93bWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3bWZcIl1cbiAgfSxcbiAgXCJpbWFnZS94LTNkc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiM2RzXCJdXG4gIH0sXG4gIFwiaW1hZ2UveC1jbXUtcmFzdGVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyYXNcIl1cbiAgfSxcbiAgXCJpbWFnZS94LWNteFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY214XCJdXG4gIH0sXG4gIFwiaW1hZ2UveC1mcmVlaGFuZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZmhcIixcImZoY1wiLFwiZmg0XCIsXCJmaDVcIixcImZoN1wiXVxuICB9LFxuICBcImltYWdlL3gtaWNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpY29cIl1cbiAgfSxcbiAgXCJpbWFnZS94LWpuZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJuZ2lueFwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqbmdcIl1cbiAgfSxcbiAgXCJpbWFnZS94LW1yc2lkLWltYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzaWRcIl1cbiAgfSxcbiAgXCJpbWFnZS94LW1zLWJtcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJuZ2lueFwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImJtcFwiXVxuICB9LFxuICBcImltYWdlL3gtcGN4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwY3hcIl1cbiAgfSxcbiAgXCJpbWFnZS94LXBpY3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBpY1wiLFwicGN0XCJdXG4gIH0sXG4gIFwiaW1hZ2UveC1wb3J0YWJsZS1hbnltYXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBubVwiXVxuICB9LFxuICBcImltYWdlL3gtcG9ydGFibGUtYml0bWFwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwYm1cIl1cbiAgfSxcbiAgXCJpbWFnZS94LXBvcnRhYmxlLWdyYXltYXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBnbVwiXVxuICB9LFxuICBcImltYWdlL3gtcG9ydGFibGUtcGl4bWFwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwcG1cIl1cbiAgfSxcbiAgXCJpbWFnZS94LXJnYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicmdiXCJdXG4gIH0sXG4gIFwiaW1hZ2UveC10Z2FcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRnYVwiXVxuICB9LFxuICBcImltYWdlL3gteGJpdG1hcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGJtXCJdXG4gIH0sXG4gIFwiaW1hZ2UveC14Y2ZcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwiaW1hZ2UveC14cGl4bWFwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4cG1cIl1cbiAgfSxcbiAgXCJpbWFnZS94LXh3aW5kb3dkdW1wXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4d2RcIl1cbiAgfSxcbiAgXCJtZXNzYWdlL2NwaW1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibWVzc2FnZS9kZWxpdmVyeS1zdGF0dXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibWVzc2FnZS9kaXNwb3NpdGlvbi1ub3RpZmljYXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXG4gICAgICBcImRpc3Bvc2l0aW9uLW5vdGlmaWNhdGlvblwiXG4gICAgXVxuICB9LFxuICBcIm1lc3NhZ2UvZXh0ZXJuYWwtYm9keVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtZXNzYWdlL2ZlZWRiYWNrLXJlcG9ydFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtZXNzYWdlL2dsb2JhbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInU4bXNnXCJdXG4gIH0sXG4gIFwibWVzc2FnZS9nbG9iYWwtZGVsaXZlcnktc3RhdHVzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widThkc25cIl1cbiAgfSxcbiAgXCJtZXNzYWdlL2dsb2JhbC1kaXNwb3NpdGlvbi1ub3RpZmljYXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1OG1kblwiXVxuICB9LFxuICBcIm1lc3NhZ2UvZ2xvYmFsLWhlYWRlcnNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1OGhkclwiXVxuICB9LFxuICBcIm1lc3NhZ2UvaHR0cFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJtZXNzYWdlL2ltZG4reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwibWVzc2FnZS9uZXdzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm1lc3NhZ2UvcGFydGlhbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJtZXNzYWdlL3JmYzgyMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZW1sXCIsXCJtaW1lXCJdXG4gIH0sXG4gIFwibWVzc2FnZS9zLWh0dHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibWVzc2FnZS9zaXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibWVzc2FnZS9zaXBmcmFnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm1lc3NhZ2UvdHJhY2tpbmctc3RhdHVzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm1lc3NhZ2Uvdm5kLnNpLnNpbXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibWVzc2FnZS92bmQud2ZhLndzY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndzY1wiXVxuICB9LFxuICBcIm1vZGVsLzNtZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIjNtZlwiXVxuICB9LFxuICBcIm1vZGVsL2U1N1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtb2RlbC9nbHRmK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdsdGZcIl1cbiAgfSxcbiAgXCJtb2RlbC9nbHRmLWJpbmFyeVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ2xiXCJdXG4gIH0sXG4gIFwibW9kZWwvaWdlc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImlnc1wiLFwiaWdlc1wiXVxuICB9LFxuICBcIm1vZGVsL21lc2hcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtc2hcIixcIm1lc2hcIixcInNpbG9cIl1cbiAgfSxcbiAgXCJtb2RlbC9tdGxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtdGxcIl1cbiAgfSxcbiAgXCJtb2RlbC9vYmpcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvYmpcIl1cbiAgfSxcbiAgXCJtb2RlbC9zdGVwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm1vZGVsL3N0ZXAreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzdHB4XCJdXG4gIH0sXG4gIFwibW9kZWwvc3RlcCt6aXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzdHB6XCJdXG4gIH0sXG4gIFwibW9kZWwvc3RlcC14bWwremlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3RweHpcIl1cbiAgfSxcbiAgXCJtb2RlbC9zdGxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzdGxcIl1cbiAgfSxcbiAgXCJtb2RlbC92bmQuY29sbGFkYSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRhZVwiXVxuICB9LFxuICBcIm1vZGVsL3ZuZC5kd2ZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkd2ZcIl1cbiAgfSxcbiAgXCJtb2RlbC92bmQuZmxhdGxhbmQuM2RtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtb2RlbC92bmQuZ2RsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ2RsXCJdXG4gIH0sXG4gIFwibW9kZWwvdm5kLmdzLWdkbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcIm1vZGVsL3ZuZC5ncy5nZGxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibW9kZWwvdm5kLmd0d1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImd0d1wiXVxuICB9LFxuICBcIm1vZGVsL3ZuZC5tb21sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcIm1vZGVsL3ZuZC5tdHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtdHNcIl1cbiAgfSxcbiAgXCJtb2RlbC92bmQub3BlbmdleFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9nZXhcIl1cbiAgfSxcbiAgXCJtb2RlbC92bmQucGFyYXNvbGlkLnRyYW5zbWl0LmJpbmFyeVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhfYlwiXVxuICB9LFxuICBcIm1vZGVsL3ZuZC5wYXJhc29saWQudHJhbnNtaXQudGV4dFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhfdFwiXVxuICB9LFxuICBcIm1vZGVsL3ZuZC5weXRoYS5weW94XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm1vZGVsL3ZuZC5yb3NldHRlLmFubm90YXRlZC1kYXRhLW1vZGVsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm1vZGVsL3ZuZC5zYXAudmRzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widmRzXCJdXG4gIH0sXG4gIFwibW9kZWwvdm5kLnVzZHoremlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1widXNkelwiXVxuICB9LFxuICBcIm1vZGVsL3ZuZC52YWx2ZS5zb3VyY2UuY29tcGlsZWQtbWFwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYnNwXCJdXG4gIH0sXG4gIFwibW9kZWwvdm5kLnZ0dVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInZ0dVwiXVxuICB9LFxuICBcIm1vZGVsL3ZybWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3cmxcIixcInZybWxcIl1cbiAgfSxcbiAgXCJtb2RlbC94M2QrYmluYXJ5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4M2RiXCIsXCJ4M2RielwiXVxuICB9LFxuICBcIm1vZGVsL3gzZCtmYXN0aW5mb3NldFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIngzZGJcIl1cbiAgfSxcbiAgXCJtb2RlbC94M2QrdnJtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieDNkdlwiLFwieDNkdnpcIl1cbiAgfSxcbiAgXCJtb2RlbC94M2QreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4M2RcIixcIngzZHpcIl1cbiAgfSxcbiAgXCJtb2RlbC94M2QtdnJtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIngzZHZcIl1cbiAgfSxcbiAgXCJtdWx0aXBhcnQvYWx0ZXJuYXRpdmVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwibXVsdGlwYXJ0L2FwcGxlZG91YmxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm11bHRpcGFydC9ieXRlcmFuZ2VzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm11bHRpcGFydC9kaWdlc3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibXVsdGlwYXJ0L2VuY3J5cHRlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcIm11bHRpcGFydC9oZWFkZXItc2V0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm11bHRpcGFydC9taXhlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtdWx0aXBhcnQvbXVsdGlsaW5ndWFsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm11bHRpcGFydC9wYXJhbGxlbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtdWx0aXBhcnQvcmVsYXRlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJtdWx0aXBhcnQvcmVwb3J0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm11bHRpcGFydC9zaWduZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwibXVsdGlwYXJ0L3ZuZC5iaW50Lm1lZC1wbHVzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm11bHRpcGFydC92b2ljZS1tZXNzYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm11bHRpcGFydC94LW1peGVkLXJlcGxhY2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC8xZC1pbnRlcmxlYXZlZC1wYXJpdHlmZWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC9jYWNoZS1tYW5pZmVzdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXBwY2FjaGVcIixcIm1hbmlmZXN0XCJdXG4gIH0sXG4gIFwidGV4dC9jYWxlbmRhclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImljc1wiLFwiaWZiXCJdXG4gIH0sXG4gIFwidGV4dC9jYWxlbmRlclwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcInRleHQvY21kXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwidGV4dC9jb2ZmZWVzY3JpcHRcIjoge1xuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjb2ZmZWVcIixcImxpdGNvZmZlZVwiXVxuICB9LFxuICBcInRleHQvY3FsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvY3FsLWV4cHJlc3Npb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC9jcWwtaWRlbnRpZmllclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L2Nzc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjc3NcIl1cbiAgfSxcbiAgXCJ0ZXh0L2NzdlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY3N2XCJdXG4gIH0sXG4gIFwidGV4dC9jc3Ytc2NoZW1hXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvZGlyZWN0b3J5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvZG5zXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvZWNtYXNjcmlwdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L2VuY2FwcnRwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvZW5yaWNoZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC9maGlycGF0aFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L2ZsZXhmZWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC9md2RyZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC9nZmYzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvZ3JhbW1hci1yZWYtbGlzdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L2h0bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImh0bWxcIixcImh0bVwiLFwic2h0bWxcIl1cbiAgfSxcbiAgXCJ0ZXh0L2phZGVcIjoge1xuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqYWRlXCJdXG4gIH0sXG4gIFwidGV4dC9qYXZhc2NyaXB0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwidGV4dC9qY3ItY25kXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvanN4XCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqc3hcIl1cbiAgfSxcbiAgXCJ0ZXh0L2xlc3NcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImxlc3NcIl1cbiAgfSxcbiAgXCJ0ZXh0L21hcmtkb3duXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtYXJrZG93blwiLFwibWRcIl1cbiAgfSxcbiAgXCJ0ZXh0L21hdGhtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJuZ2lueFwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtbWxcIl1cbiAgfSxcbiAgXCJ0ZXh0L21keFwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibWR4XCJdXG4gIH0sXG4gIFwidGV4dC9taXphclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L24zXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm4zXCJdXG4gIH0sXG4gIFwidGV4dC9wYXJhbWV0ZXJzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiXG4gIH0sXG4gIFwidGV4dC9wYXJpdHlmZWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC9wbGFpblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1widHh0XCIsXCJ0ZXh0XCIsXCJjb25mXCIsXCJkZWZcIixcImxpc3RcIixcImxvZ1wiLFwiaW5cIixcImluaVwiXVxuICB9LFxuICBcInRleHQvcHJvdmVuYW5jZS1ub3RhdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIlxuICB9LFxuICBcInRleHQvcHJzLmZhbGxlbnN0ZWluLnJzdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3Bycy5saW5lcy50YWdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkc2NcIl1cbiAgfSxcbiAgXCJ0ZXh0L3Bycy5wcm9wLmxvZ2ljXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvcmFwdG9yZmVjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvcmVkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvcmZjODIyLWhlYWRlcnNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC9yaWNodGV4dFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicnR4XCJdXG4gIH0sXG4gIFwidGV4dC9ydGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJ0ZlwiXVxuICB9LFxuICBcInRleHQvcnRwLWVuYy1hZXNjbTEyOFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3J0cGxvb3BiYWNrXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvcnR4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvc2dtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNnbWxcIixcInNnbVwiXVxuICB9LFxuICBcInRleHQvc2hhY2xjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvc2hleFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNoZXhcIl1cbiAgfSxcbiAgXCJ0ZXh0L3NsaW1cIjoge1xuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzbGltXCIsXCJzbG1cIl1cbiAgfSxcbiAgXCJ0ZXh0L3NwZHhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzcGR4XCJdXG4gIH0sXG4gIFwidGV4dC9zdHJpbmdzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvc3R5bHVzXCI6IHtcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3R5bHVzXCIsXCJzdHlsXCJdXG4gIH0sXG4gIFwidGV4dC90MTQwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvdGFiLXNlcGFyYXRlZC12YWx1ZXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRzdlwiXVxuICB9LFxuICBcInRleHQvdHJvZmZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0XCIsXCJ0clwiLFwicm9mZlwiLFwibWFuXCIsXCJtZVwiLFwibXNcIl1cbiAgfSxcbiAgXCJ0ZXh0L3R1cnRsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widHRsXCJdXG4gIH0sXG4gIFwidGV4dC91bHBmZWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC91cmktbGlzdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1widXJpXCIsXCJ1cmlzXCIsXCJ1cmxzXCJdXG4gIH0sXG4gIFwidGV4dC92Y2FyZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1widmNhcmRcIl1cbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5hXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvdm5kLmFiY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5hc2NpaS1hcnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC92bmQuY3VybFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImN1cmxcIl1cbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5jdXJsLmRjdXJsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkY3VybFwiXVxuICB9LFxuICBcInRleHQvdm5kLmN1cmwubWN1cmxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1jdXJsXCJdXG4gIH0sXG4gIFwidGV4dC92bmQuY3VybC5zY3VybFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2N1cmxcIl1cbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5kZWJpYW4uY29weXJpZ2h0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiXG4gIH0sXG4gIFwidGV4dC92bmQuZG1jbGllbnRzY3JpcHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC92bmQuZHZiLnN1YnRpdGxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3ViXCJdXG4gIH0sXG4gIFwidGV4dC92bmQuZXNtZXJ0ZWMudGhlbWUtZGVzY3JpcHRvclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIlxuICB9LFxuICBcInRleHQvdm5kLmZhbWlseXNlYXJjaC5nZWRjb21cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnZWRcIl1cbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5maWNsYWIuZmx0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvdm5kLmZseVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZseVwiXVxuICB9LFxuICBcInRleHQvdm5kLmZtaS5mbGV4c3RvclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZseFwiXVxuICB9LFxuICBcInRleHQvdm5kLmdtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5ncmFwaHZpelwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImd2XCJdXG4gIH0sXG4gIFwidGV4dC92bmQuaGFuc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5oZ2xcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC92bmQuaW4zZC4zZG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiM2RtbFwiXVxuICB9LFxuICBcInRleHQvdm5kLmluM2Quc3BvdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNwb3RcIl1cbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5pcHRjLm5ld3NtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5pcHRjLm5pdGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC92bmQubGF0ZXgtelwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5tb3Rvcm9sYS5yZWZsZXhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC92bmQubXMtbWVkaWFwYWNrYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvdm5kLm5ldDJwaG9uZS5jb21tY2VudGVyLmNvbW1hbmRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC92bmQucmFkaXN5cy5tc21sLWJhc2ljLWxheW91dFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5zZW54LndhcnBzY3JpcHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC92bmQuc2kudXJpY2F0YWxvZ3VlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvdm5kLnNvc2lcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC92bmQuc3VuLmoybWUuYXBwLWRlc2NyaXB0b3JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImphZFwiXVxuICB9LFxuICBcInRleHQvdm5kLnRyb2xsdGVjaC5saW5ndWlzdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIlxuICB9LFxuICBcInRleHQvdm5kLndhcC5zaVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3ZuZC53YXAuc2xcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC92bmQud2FwLndtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndtbFwiXVxuICB9LFxuICBcInRleHQvdm5kLndhcC53bWxzY3JpcHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3bWxzXCJdXG4gIH0sXG4gIFwidGV4dC92dHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1widnR0XCJdXG4gIH0sXG4gIFwidGV4dC94LWFzbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic1wiLFwiYXNtXCJdXG4gIH0sXG4gIFwidGV4dC94LWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNcIixcImNjXCIsXCJjeHhcIixcImNwcFwiLFwiaFwiLFwiaGhcIixcImRpY1wiXVxuICB9LFxuICBcInRleHQveC1jb21wb25lbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwibmdpbnhcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaHRjXCJdXG4gIH0sXG4gIFwidGV4dC94LWZvcnRyYW5cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZcIixcImZvclwiLFwiZjc3XCIsXCJmOTBcIl1cbiAgfSxcbiAgXCJ0ZXh0L3gtZ3d0LXJwY1wiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcInRleHQveC1oYW5kbGViYXJzLXRlbXBsYXRlXCI6IHtcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaGJzXCJdXG4gIH0sXG4gIFwidGV4dC94LWphdmEtc291cmNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqYXZhXCJdXG4gIH0sXG4gIFwidGV4dC94LWpxdWVyeS10bXBsXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwidGV4dC94LWx1YVwiOiB7XG4gICAgXCJleHRlbnNpb25zXCI6IFtcImx1YVwiXVxuICB9LFxuICBcInRleHQveC1tYXJrZG93blwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibWtkXCJdXG4gIH0sXG4gIFwidGV4dC94LW5mb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibmZvXCJdXG4gIH0sXG4gIFwidGV4dC94LW9wbWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9wbWxcIl1cbiAgfSxcbiAgXCJ0ZXh0L3gtb3JnXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvcmdcIl1cbiAgfSxcbiAgXCJ0ZXh0L3gtcGFzY2FsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwXCIsXCJwYXNcIl1cbiAgfSxcbiAgXCJ0ZXh0L3gtcHJvY2Vzc2luZ1wiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGRlXCJdXG4gIH0sXG4gIFwidGV4dC94LXNhc3NcIjoge1xuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzYXNzXCJdXG4gIH0sXG4gIFwidGV4dC94LXNjc3NcIjoge1xuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzY3NzXCJdXG4gIH0sXG4gIFwidGV4dC94LXNldGV4dFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZXR4XCJdXG4gIH0sXG4gIFwidGV4dC94LXNmdlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2Z2XCJdXG4gIH0sXG4gIFwidGV4dC94LXN1c2UteW1wXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ5bXBcIl1cbiAgfSxcbiAgXCJ0ZXh0L3gtdXVlbmNvZGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInV1XCJdXG4gIH0sXG4gIFwidGV4dC94LXZjYWxlbmRhclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widmNzXCJdXG4gIH0sXG4gIFwidGV4dC94LXZjYXJkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ2Y2ZcIl1cbiAgfSxcbiAgXCJ0ZXh0L3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieG1sXCJdXG4gIH0sXG4gIFwidGV4dC94bWwtZXh0ZXJuYWwtcGFyc2VkLWVudGl0eVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3lhbWxcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInlhbWxcIixcInltbFwiXVxuICB9LFxuICBcInZpZGVvLzFkLWludGVybGVhdmVkLXBhcml0eWZlY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby8zZ3BwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiM2dwXCIsXCIzZ3BwXCJdXG4gIH0sXG4gIFwidmlkZW8vM2dwcC10dFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby8zZ3BwMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIjNnMlwiXVxuICB9LFxuICBcInZpZGVvL2F2MVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby9ibXBlZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby9idDY1NlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby9jZWxiXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL2R2XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL2VuY2FwcnRwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL2ZmdjFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vZmxleGZlY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby9oMjYxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaDI2MVwiXVxuICB9LFxuICBcInZpZGVvL2gyNjNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJoMjYzXCJdXG4gIH0sXG4gIFwidmlkZW8vaDI2My0xOTk4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL2gyNjMtMjAwMFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby9oMjY0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaDI2NFwiXVxuICB9LFxuICBcInZpZGVvL2gyNjQtcmNkb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby9oMjY0LXN2Y1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby9oMjY1XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL2lzby5zZWdtZW50XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibTRzXCJdXG4gIH0sXG4gIFwidmlkZW8vanBlZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImpwZ3ZcIl1cbiAgfSxcbiAgXCJ2aWRlby9qcGVnMjAwMFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby9qcG1cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImpwbVwiLFwianBnbVwiXVxuICB9LFxuICBcInZpZGVvL2p4c3ZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vbWoyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibWoyXCIsXCJtanAyXCJdXG4gIH0sXG4gIFwidmlkZW8vbXAxc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby9tcDJwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL21wMnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0c1wiXVxuICB9LFxuICBcInZpZGVvL21wNFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1wNFwiLFwibXA0dlwiLFwibXBnNFwiXVxuICB9LFxuICBcInZpZGVvL21wNHYtZXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vbXBlZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1wZWdcIixcIm1wZ1wiLFwibXBlXCIsXCJtMXZcIixcIm0ydlwiXVxuICB9LFxuICBcInZpZGVvL21wZWc0LWdlbmVyaWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vbXB2XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL252XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL29nZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9ndlwiXVxuICB9LFxuICBcInZpZGVvL3Bhcml0eWZlY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby9wb2ludGVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3F1aWNrdGltZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInF0XCIsXCJtb3ZcIl1cbiAgfSxcbiAgXCJ2aWRlby9yYXB0b3JmZWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vcmF3XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3J0cC1lbmMtYWVzY20xMjhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vcnRwbG9vcGJhY2tcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vcnR4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3NjaXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vc21wdGUyOTFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vc21wdGUyOTJtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3VscGZlY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby92YzFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vdmMyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5jY3R2XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5kZWNlLmhkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widXZoXCIsXCJ1dnZoXCJdXG4gIH0sXG4gIFwidmlkZW8vdm5kLmRlY2UubW9iaWxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widXZtXCIsXCJ1dnZtXCJdXG4gIH0sXG4gIFwidmlkZW8vdm5kLmRlY2UubXA0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5kZWNlLnBkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widXZwXCIsXCJ1dnZwXCJdXG4gIH0sXG4gIFwidmlkZW8vdm5kLmRlY2Uuc2RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1dnNcIixcInV2dnNcIl1cbiAgfSxcbiAgXCJ2aWRlby92bmQuZGVjZS52aWRlb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInV2dlwiLFwidXZ2dlwiXVxuICB9LFxuICBcInZpZGVvL3ZuZC5kaXJlY3R2Lm1wZWdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vdm5kLmRpcmVjdHYubXBlZy10dHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vdm5kLmRsbmEubXBlZy10dHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vdm5kLmR2Yi5maWxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZHZiXCJdXG4gIH0sXG4gIFwidmlkZW8vdm5kLmZ2dFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZ2dFwiXVxuICB9LFxuICBcInZpZGVvL3ZuZC5obnMudmlkZW9cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vdm5kLmlwdHZmb3J1bS4xZHBhcml0eWZlYy0xMDEwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5pcHR2Zm9ydW0uMWRwYXJpdHlmZWMtMjAwNVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQuaXB0dmZvcnVtLjJkcGFyaXR5ZmVjLTEwMTBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vdm5kLmlwdHZmb3J1bS4yZHBhcml0eWZlYy0yMDA1XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5pcHR2Zm9ydW0udHRzYXZjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5pcHR2Zm9ydW0udHRzbXBlZzJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vdm5kLm1vdG9yb2xhLnZpZGVvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5tb3Rvcm9sYS52aWRlb3BcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vdm5kLm1wZWd1cmxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJteHVcIixcIm00dVwiXVxuICB9LFxuICBcInZpZGVvL3ZuZC5tcy1wbGF5cmVhZHkubWVkaWEucHl2XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicHl2XCJdXG4gIH0sXG4gIFwidmlkZW8vdm5kLm5va2lhLmludGVybGVhdmVkLW11bHRpbWVkaWFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vdm5kLm5va2lhLm1wNHZyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5ub2tpYS52aWRlb3ZvaXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vdm5kLm9iamVjdHZpZGVvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5yYWRnYW1ldHRvb2xzLmJpbmtcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vdm5kLnJhZGdhbWV0dG9vbHMuc21hY2tlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQuc2VhbGVkLm1wZWcxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5zZWFsZWQubXBlZzRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vdm5kLnNlYWxlZC5zd2ZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vdm5kLnNlYWxlZG1lZGlhLnNvZnRzZWFsLm1vdlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQudXZ2dS5tcDRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1dnVcIixcInV2dnVcIl1cbiAgfSxcbiAgXCJ2aWRlby92bmQudml2b1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInZpdlwiXVxuICB9LFxuICBcInZpZGVvL3ZuZC55b3V0dWJlLnl0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZwOFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby92cDlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vd2VibVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid2VibVwiXVxuICB9LFxuICBcInZpZGVvL3gtZjR2XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmNHZcIl1cbiAgfSxcbiAgXCJ2aWRlby94LWZsaVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZmxpXCJdXG4gIH0sXG4gIFwidmlkZW8veC1mbHZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZsdlwiXVxuICB9LFxuICBcInZpZGVvL3gtbTR2XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtNHZcIl1cbiAgfSxcbiAgXCJ2aWRlby94LW1hdHJvc2thXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJta3ZcIixcIm1rM2RcIixcIm1rc1wiXVxuICB9LFxuICBcInZpZGVvL3gtbW5nXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtbmdcIl1cbiAgfSxcbiAgXCJ2aWRlby94LW1zLWFzZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXNmXCIsXCJhc3hcIl1cbiAgfSxcbiAgXCJ2aWRlby94LW1zLXZvYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widm9iXCJdXG4gIH0sXG4gIFwidmlkZW8veC1tcy13bVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid21cIl1cbiAgfSxcbiAgXCJ2aWRlby94LW1zLXdtdlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid212XCJdXG4gIH0sXG4gIFwidmlkZW8veC1tcy13bXhcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndteFwiXVxuICB9LFxuICBcInZpZGVvL3gtbXMtd3Z4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3dnhcIl1cbiAgfSxcbiAgXCJ2aWRlby94LW1zdmlkZW9cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImF2aVwiXVxuICB9LFxuICBcInZpZGVvL3gtc2dpLW1vdmllXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtb3ZpZVwiXVxuICB9LFxuICBcInZpZGVvL3gtc212XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzbXZcIl1cbiAgfSxcbiAgXCJ4LWNvbmZlcmVuY2UveC1jb29sdGFsa1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaWNlXCJdXG4gIH0sXG4gIFwieC1zaGFkZXIveC1mcmFnbWVudFwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcIngtc2hhZGVyL3gtdmVydGV4XCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH1cbn1cbiIsICIvKiFcbiAqIG1pbWUtZGJcbiAqIENvcHlyaWdodChjKSAyMDE0IEpvbmF0aGFuIE9uZ1xuICogQ29weXJpZ2h0KGMpIDIwMTUtMjAyMiBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGIuanNvbicpXG4iLCAiLyohXG4gKiBtaW1lLXR5cGVzXG4gKiBDb3B5cmlnaHQoYykgMjAxNCBKb25hdGhhbiBPbmdcbiAqIENvcHlyaWdodChjKSAyMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgZGIgPSByZXF1aXJlKCdtaW1lLWRiJylcbnZhciBleHRuYW1lID0gcmVxdWlyZSgncGF0aCcpLmV4dG5hbWVcblxuLyoqXG4gKiBNb2R1bGUgdmFyaWFibGVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgRVhUUkFDVF9UWVBFX1JFR0VYUCA9IC9eXFxzKihbXjtcXHNdKikoPzo7fFxcc3wkKS9cbnZhciBURVhUX1RZUEVfUkVHRVhQID0gL150ZXh0XFwvL2lcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmNoYXJzZXQgPSBjaGFyc2V0XG5leHBvcnRzLmNoYXJzZXRzID0geyBsb29rdXA6IGNoYXJzZXQgfVxuZXhwb3J0cy5jb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlXG5leHBvcnRzLmV4dGVuc2lvbiA9IGV4dGVuc2lvblxuZXhwb3J0cy5leHRlbnNpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuZXhwb3J0cy5sb29rdXAgPSBsb29rdXBcbmV4cG9ydHMudHlwZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpXG5cbi8vIFBvcHVsYXRlIHRoZSBleHRlbnNpb25zL3R5cGVzIG1hcHNcbnBvcHVsYXRlTWFwcyhleHBvcnRzLmV4dGVuc2lvbnMsIGV4cG9ydHMudHlwZXMpXG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IGNoYXJzZXQgZm9yIGEgTUlNRSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcmV0dXJuIHtib29sZWFufHN0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBjaGFyc2V0ICh0eXBlKSB7XG4gIGlmICghdHlwZSB8fCB0eXBlb2YgdHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIFRPRE86IHVzZSBtZWRpYS10eXBlclxuICB2YXIgbWF0Y2ggPSBFWFRSQUNUX1RZUEVfUkVHRVhQLmV4ZWModHlwZSlcbiAgdmFyIG1pbWUgPSBtYXRjaCAmJiBkYlttYXRjaFsxXS50b0xvd2VyQ2FzZSgpXVxuXG4gIGlmIChtaW1lICYmIG1pbWUuY2hhcnNldCkge1xuICAgIHJldHVybiBtaW1lLmNoYXJzZXRcbiAgfVxuXG4gIC8vIGRlZmF1bHQgdGV4dC8qIHRvIHV0Zi04XG4gIGlmIChtYXRjaCAmJiBURVhUX1RZUEVfUkVHRVhQLnRlc3QobWF0Y2hbMV0pKSB7XG4gICAgcmV0dXJuICdVVEYtOCdcbiAgfVxuXG4gIHJldHVybiBmYWxzZVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGZ1bGwgQ29udGVudC1UeXBlIGhlYWRlciBnaXZlbiBhIE1JTUUgdHlwZSBvciBleHRlbnNpb24uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7Ym9vbGVhbnxzdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gY29udGVudFR5cGUgKHN0cikge1xuICAvLyBUT0RPOiBzaG91bGQgdGhpcyBldmVuIGJlIGluIHRoaXMgbW9kdWxlP1xuICBpZiAoIXN0ciB8fCB0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgdmFyIG1pbWUgPSBzdHIuaW5kZXhPZignLycpID09PSAtMVxuICAgID8gZXhwb3J0cy5sb29rdXAoc3RyKVxuICAgIDogc3RyXG5cbiAgaWYgKCFtaW1lKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBUT0RPOiB1c2UgY29udGVudC10eXBlIG9yIG90aGVyIG1vZHVsZVxuICBpZiAobWltZS5pbmRleE9mKCdjaGFyc2V0JykgPT09IC0xKSB7XG4gICAgdmFyIGNoYXJzZXQgPSBleHBvcnRzLmNoYXJzZXQobWltZSlcbiAgICBpZiAoY2hhcnNldCkgbWltZSArPSAnOyBjaGFyc2V0PScgKyBjaGFyc2V0LnRvTG93ZXJDYXNlKClcbiAgfVxuXG4gIHJldHVybiBtaW1lXG59XG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IGV4dGVuc2lvbiBmb3IgYSBNSU1FIHR5cGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEByZXR1cm4ge2Jvb2xlYW58c3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIGV4dGVuc2lvbiAodHlwZSkge1xuICBpZiAoIXR5cGUgfHwgdHlwZW9mIHR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBUT0RPOiB1c2UgbWVkaWEtdHlwZXJcbiAgdmFyIG1hdGNoID0gRVhUUkFDVF9UWVBFX1JFR0VYUC5leGVjKHR5cGUpXG5cbiAgLy8gZ2V0IGV4dGVuc2lvbnNcbiAgdmFyIGV4dHMgPSBtYXRjaCAmJiBleHBvcnRzLmV4dGVuc2lvbnNbbWF0Y2hbMV0udG9Mb3dlckNhc2UoKV1cblxuICBpZiAoIWV4dHMgfHwgIWV4dHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gZXh0c1swXVxufVxuXG4vKipcbiAqIExvb2t1cCB0aGUgTUlNRSB0eXBlIGZvciBhIGZpbGUgcGF0aC9leHRlbnNpb24uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAqIEByZXR1cm4ge2Jvb2xlYW58c3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIGxvb2t1cCAocGF0aCkge1xuICBpZiAoIXBhdGggfHwgdHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBnZXQgdGhlIGV4dGVuc2lvbiAoXCJleHRcIiBvciBcIi5leHRcIiBvciBmdWxsIHBhdGgpXG4gIHZhciBleHRlbnNpb24gPSBleHRuYW1lKCd4LicgKyBwYXRoKVxuICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgLnN1YnN0cigxKVxuXG4gIGlmICghZXh0ZW5zaW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gZXhwb3J0cy50eXBlc1tleHRlbnNpb25dIHx8IGZhbHNlXG59XG5cbi8qKlxuICogUG9wdWxhdGUgdGhlIGV4dGVuc2lvbnMgYW5kIHR5cGVzIG1hcHMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBvcHVsYXRlTWFwcyAoZXh0ZW5zaW9ucywgdHlwZXMpIHtcbiAgLy8gc291cmNlIHByZWZlcmVuY2UgKGxlYXN0IC0+IG1vc3QpXG4gIHZhciBwcmVmZXJlbmNlID0gWyduZ2lueCcsICdhcGFjaGUnLCB1bmRlZmluZWQsICdpYW5hJ11cblxuICBPYmplY3Qua2V5cyhkYikuZm9yRWFjaChmdW5jdGlvbiBmb3JFYWNoTWltZVR5cGUgKHR5cGUpIHtcbiAgICB2YXIgbWltZSA9IGRiW3R5cGVdXG4gICAgdmFyIGV4dHMgPSBtaW1lLmV4dGVuc2lvbnNcblxuICAgIGlmICghZXh0cyB8fCAhZXh0cy5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIG1pbWUgLT4gZXh0ZW5zaW9uc1xuICAgIGV4dGVuc2lvbnNbdHlwZV0gPSBleHRzXG5cbiAgICAvLyBleHRlbnNpb24gLT4gbWltZVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXh0cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGV4dGVuc2lvbiA9IGV4dHNbaV1cblxuICAgICAgaWYgKHR5cGVzW2V4dGVuc2lvbl0pIHtcbiAgICAgICAgdmFyIGZyb20gPSBwcmVmZXJlbmNlLmluZGV4T2YoZGJbdHlwZXNbZXh0ZW5zaW9uXV0uc291cmNlKVxuICAgICAgICB2YXIgdG8gPSBwcmVmZXJlbmNlLmluZGV4T2YobWltZS5zb3VyY2UpXG5cbiAgICAgICAgaWYgKHR5cGVzW2V4dGVuc2lvbl0gIT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nICYmXG4gICAgICAgICAgKGZyb20gPiB0byB8fCAoZnJvbSA9PT0gdG8gJiYgdHlwZXNbZXh0ZW5zaW9uXS5zdWJzdHIoMCwgMTIpID09PSAnYXBwbGljYXRpb24vJykpKSB7XG4gICAgICAgICAgLy8gc2tpcCB0aGUgcmVtYXBwaW5nXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBzZXQgdGhlIGV4dGVuc2lvbiAtPiBtaW1lXG4gICAgICB0eXBlc1tleHRlbnNpb25dID0gdHlwZVxuICAgIH1cbiAgfSlcbn1cbiIsICJtb2R1bGUuZXhwb3J0cyA9IGRlZmVyO1xuXG4vKipcbiAqIFJ1bnMgcHJvdmlkZWQgZnVuY3Rpb24gb24gbmV4dCBpdGVyYXRpb24gb2YgdGhlIGV2ZW50IGxvb3BcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiAtIGZ1bmN0aW9uIHRvIHJ1blxuICovXG5mdW5jdGlvbiBkZWZlcihmbilcbntcbiAgdmFyIG5leHRUaWNrID0gdHlwZW9mIHNldEltbWVkaWF0ZSA9PSAnZnVuY3Rpb24nXG4gICAgPyBzZXRJbW1lZGlhdGVcbiAgICA6IChcbiAgICAgIHR5cGVvZiBwcm9jZXNzID09ICdvYmplY3QnICYmIHR5cGVvZiBwcm9jZXNzLm5leHRUaWNrID09ICdmdW5jdGlvbidcbiAgICAgID8gcHJvY2Vzcy5uZXh0VGlja1xuICAgICAgOiBudWxsXG4gICAgKTtcblxuICBpZiAobmV4dFRpY2spXG4gIHtcbiAgICBuZXh0VGljayhmbik7XG4gIH1cbiAgZWxzZVxuICB7XG4gICAgc2V0VGltZW91dChmbiwgMCk7XG4gIH1cbn1cbiIsICJ2YXIgZGVmZXIgPSByZXF1aXJlKCcuL2RlZmVyLmpzJyk7XG5cbi8vIEFQSVxubW9kdWxlLmV4cG9ydHMgPSBhc3luYztcblxuLyoqXG4gKiBSdW5zIHByb3ZpZGVkIGNhbGxiYWNrIGFzeW5jaHJvbm91c2x5XG4gKiBldmVuIGlmIGNhbGxiYWNrIGl0c2VsZiBpcyBub3RcbiAqXG4gKiBAcGFyYW0gICB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gY2FsbGJhY2sgdG8gaW52b2tlXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IC0gYXVnbWVudGVkIGNhbGxiYWNrXG4gKi9cbmZ1bmN0aW9uIGFzeW5jKGNhbGxiYWNrKVxue1xuICB2YXIgaXNBc3luYyA9IGZhbHNlO1xuXG4gIC8vIGNoZWNrIGlmIGFzeW5jIGhhcHBlbmVkXG4gIGRlZmVyKGZ1bmN0aW9uKCkgeyBpc0FzeW5jID0gdHJ1ZTsgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGFzeW5jX2NhbGxiYWNrKGVyciwgcmVzdWx0KVxuICB7XG4gICAgaWYgKGlzQXN5bmMpXG4gICAge1xuICAgICAgY2FsbGJhY2soZXJyLCByZXN1bHQpO1xuICAgIH1cbiAgICBlbHNlXG4gICAge1xuICAgICAgZGVmZXIoZnVuY3Rpb24gbmV4dFRpY2tfY2FsbGJhY2soKVxuICAgICAge1xuICAgICAgICBjYWxsYmFjayhlcnIsIHJlc3VsdCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG4iLCAiLy8gQVBJXG5tb2R1bGUuZXhwb3J0cyA9IGFib3J0O1xuXG4vKipcbiAqIEFib3J0cyBsZWZ0b3ZlciBhY3RpdmUgam9ic1xuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZSAtIGN1cnJlbnQgc3RhdGUgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGFib3J0KHN0YXRlKVxue1xuICBPYmplY3Qua2V5cyhzdGF0ZS5qb2JzKS5mb3JFYWNoKGNsZWFuLmJpbmQoc3RhdGUpKTtcblxuICAvLyByZXNldCBsZWZ0b3ZlciBqb2JzXG4gIHN0YXRlLmpvYnMgPSB7fTtcbn1cblxuLyoqXG4gKiBDbGVhbnMgdXAgbGVmdG92ZXIgam9iIGJ5IGludm9raW5nIGFib3J0IGZ1bmN0aW9uIGZvciB0aGUgcHJvdmlkZWQgam9iIGlkXG4gKlxuICogQHRoaXMgIHN0YXRlXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGtleSAtIGpvYiBpZCB0byBhYm9ydFxuICovXG5mdW5jdGlvbiBjbGVhbihrZXkpXG57XG4gIGlmICh0eXBlb2YgdGhpcy5qb2JzW2tleV0gPT0gJ2Z1bmN0aW9uJylcbiAge1xuICAgIHRoaXMuam9ic1trZXldKCk7XG4gIH1cbn1cbiIsICJ2YXIgYXN5bmMgPSByZXF1aXJlKCcuL2FzeW5jLmpzJylcbiAgLCBhYm9ydCA9IHJlcXVpcmUoJy4vYWJvcnQuanMnKVxuICA7XG5cbi8vIEFQSVxubW9kdWxlLmV4cG9ydHMgPSBpdGVyYXRlO1xuXG4vKipcbiAqIEl0ZXJhdGVzIG92ZXIgZWFjaCBqb2Igb2JqZWN0XG4gKlxuICogQHBhcmFtIHthcnJheXxvYmplY3R9IGxpc3QgLSBhcnJheSBvciBvYmplY3QgKG5hbWVkIGxpc3QpIHRvIGl0ZXJhdGUgb3ZlclxuICogQHBhcmFtIHtmdW5jdGlvbn0gaXRlcmF0b3IgLSBpdGVyYXRvciB0byBydW5cbiAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZSAtIGN1cnJlbnQgam9iIHN0YXR1c1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBpbnZva2VkIHdoZW4gYWxsIGVsZW1lbnRzIHByb2Nlc3NlZFxuICovXG5mdW5jdGlvbiBpdGVyYXRlKGxpc3QsIGl0ZXJhdG9yLCBzdGF0ZSwgY2FsbGJhY2spXG57XG4gIC8vIHN0b3JlIGN1cnJlbnQgaW5kZXhcbiAgdmFyIGtleSA9IHN0YXRlWydrZXllZExpc3QnXSA/IHN0YXRlWydrZXllZExpc3QnXVtzdGF0ZS5pbmRleF0gOiBzdGF0ZS5pbmRleDtcblxuICBzdGF0ZS5qb2JzW2tleV0gPSBydW5Kb2IoaXRlcmF0b3IsIGtleSwgbGlzdFtrZXldLCBmdW5jdGlvbihlcnJvciwgb3V0cHV0KVxuICB7XG4gICAgLy8gZG9uJ3QgcmVwZWF0IHlvdXJzZWxmXG4gICAgLy8gc2tpcCBzZWNvbmRhcnkgY2FsbGJhY2tzXG4gICAgaWYgKCEoa2V5IGluIHN0YXRlLmpvYnMpKVxuICAgIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBjbGVhbiB1cCBqb2JzXG4gICAgZGVsZXRlIHN0YXRlLmpvYnNba2V5XTtcblxuICAgIGlmIChlcnJvcilcbiAgICB7XG4gICAgICAvLyBkb24ndCBwcm9jZXNzIHJlc3Qgb2YgdGhlIHJlc3VsdHNcbiAgICAgIC8vIHN0b3Agc3RpbGwgYWN0aXZlIGpvYnNcbiAgICAgIC8vIGFuZCByZXNldCB0aGUgbGlzdFxuICAgICAgYWJvcnQoc3RhdGUpO1xuICAgIH1cbiAgICBlbHNlXG4gICAge1xuICAgICAgc3RhdGUucmVzdWx0c1trZXldID0gb3V0cHV0O1xuICAgIH1cblxuICAgIC8vIHJldHVybiBzYWx2YWdlZCByZXN1bHRzXG4gICAgY2FsbGJhY2soZXJyb3IsIHN0YXRlLnJlc3VsdHMpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBSdW5zIGl0ZXJhdG9yIG92ZXIgcHJvdmlkZWQgam9iIGVsZW1lbnRcbiAqXG4gKiBAcGFyYW0gICB7ZnVuY3Rpb259IGl0ZXJhdG9yIC0gaXRlcmF0b3IgdG8gaW52b2tlXG4gKiBAcGFyYW0gICB7c3RyaW5nfG51bWJlcn0ga2V5IC0ga2V5L2luZGV4IG9mIHRoZSBlbGVtZW50IGluIHRoZSBsaXN0IG9mIGpvYnNcbiAqIEBwYXJhbSAgIHttaXhlZH0gaXRlbSAtIGpvYiBkZXNjcmlwdGlvblxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGludm9rZWQgYWZ0ZXIgaXRlcmF0b3IgaXMgZG9uZSB3aXRoIHRoZSBqb2JcbiAqIEByZXR1cm5zIHtmdW5jdGlvbnxtaXhlZH0gLSBqb2IgYWJvcnQgZnVuY3Rpb24gb3Igc29tZXRoaW5nIGVsc2VcbiAqL1xuZnVuY3Rpb24gcnVuSm9iKGl0ZXJhdG9yLCBrZXksIGl0ZW0sIGNhbGxiYWNrKVxue1xuICB2YXIgYWJvcnRlcjtcblxuICAvLyBhbGxvdyBzaG9ydGN1dCBpZiBpdGVyYXRvciBleHBlY3RzIG9ubHkgdHdvIGFyZ3VtZW50c1xuICBpZiAoaXRlcmF0b3IubGVuZ3RoID09IDIpXG4gIHtcbiAgICBhYm9ydGVyID0gaXRlcmF0b3IoaXRlbSwgYXN5bmMoY2FsbGJhY2spKTtcbiAgfVxuICAvLyBvdGhlcndpc2UgZ28gd2l0aCBmdWxsIHRocmVlIGFyZ3VtZW50c1xuICBlbHNlXG4gIHtcbiAgICBhYm9ydGVyID0gaXRlcmF0b3IoaXRlbSwga2V5LCBhc3luYyhjYWxsYmFjaykpO1xuICB9XG5cbiAgcmV0dXJuIGFib3J0ZXI7XG59XG4iLCAiLy8gQVBJXG5tb2R1bGUuZXhwb3J0cyA9IHN0YXRlO1xuXG4vKipcbiAqIENyZWF0ZXMgaW5pdGlhbCBzdGF0ZSBvYmplY3RcbiAqIGZvciBpdGVyYXRpb24gb3ZlciBsaXN0XG4gKlxuICogQHBhcmFtICAge2FycmF5fG9iamVjdH0gbGlzdCAtIGxpc3QgdG8gaXRlcmF0ZSBvdmVyXG4gKiBAcGFyYW0gICB7ZnVuY3Rpb258bnVsbH0gc29ydE1ldGhvZCAtIGZ1bmN0aW9uIHRvIHVzZSBmb3Iga2V5cyBzb3J0LFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgYG51bGxgIHRvIGtlZXAgdGhlbSBhcyBpc1xuICogQHJldHVybnMge29iamVjdH0gLSBpbml0aWFsIHN0YXRlIG9iamVjdFxuICovXG5mdW5jdGlvbiBzdGF0ZShsaXN0LCBzb3J0TWV0aG9kKVxue1xuICB2YXIgaXNOYW1lZExpc3QgPSAhQXJyYXkuaXNBcnJheShsaXN0KVxuICAgICwgaW5pdFN0YXRlID1cbiAgICB7XG4gICAgICBpbmRleCAgICA6IDAsXG4gICAgICBrZXllZExpc3Q6IGlzTmFtZWRMaXN0IHx8IHNvcnRNZXRob2QgPyBPYmplY3Qua2V5cyhsaXN0KSA6IG51bGwsXG4gICAgICBqb2JzICAgICA6IHt9LFxuICAgICAgcmVzdWx0cyAgOiBpc05hbWVkTGlzdCA/IHt9IDogW10sXG4gICAgICBzaXplICAgICA6IGlzTmFtZWRMaXN0ID8gT2JqZWN0LmtleXMobGlzdCkubGVuZ3RoIDogbGlzdC5sZW5ndGhcbiAgICB9XG4gICAgO1xuXG4gIGlmIChzb3J0TWV0aG9kKVxuICB7XG4gICAgLy8gc29ydCBhcnJheSBrZXlzIGJhc2VkIG9uIGl0J3MgdmFsdWVzXG4gICAgLy8gc29ydCBvYmplY3QncyBrZXlzIGp1c3Qgb24gb3duIG1lcml0XG4gICAgaW5pdFN0YXRlLmtleWVkTGlzdC5zb3J0KGlzTmFtZWRMaXN0ID8gc29ydE1ldGhvZCA6IGZ1bmN0aW9uKGEsIGIpXG4gICAge1xuICAgICAgcmV0dXJuIHNvcnRNZXRob2QobGlzdFthXSwgbGlzdFtiXSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gaW5pdFN0YXRlO1xufVxuIiwgInZhciBhYm9ydCA9IHJlcXVpcmUoJy4vYWJvcnQuanMnKVxuICAsIGFzeW5jID0gcmVxdWlyZSgnLi9hc3luYy5qcycpXG4gIDtcblxuLy8gQVBJXG5tb2R1bGUuZXhwb3J0cyA9IHRlcm1pbmF0b3I7XG5cbi8qKlxuICogVGVybWluYXRlcyBqb2JzIGluIHRoZSBhdHRhY2hlZCBzdGF0ZSBjb250ZXh0XG4gKlxuICogQHRoaXMgIEFzeW5jS2l0U3RhdGUjXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGZpbmFsIGNhbGxiYWNrIHRvIGludm9rZSBhZnRlciB0ZXJtaW5hdGlvblxuICovXG5mdW5jdGlvbiB0ZXJtaW5hdG9yKGNhbGxiYWNrKVxue1xuICBpZiAoIU9iamVjdC5rZXlzKHRoaXMuam9icykubGVuZ3RoKVxuICB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gZmFzdCBmb3J3YXJkIGl0ZXJhdGlvbiBpbmRleFxuICB0aGlzLmluZGV4ID0gdGhpcy5zaXplO1xuXG4gIC8vIGFib3J0IGpvYnNcbiAgYWJvcnQodGhpcyk7XG5cbiAgLy8gc2VuZCBiYWNrIHJlc3VsdHMgd2UgaGF2ZSBzbyBmYXJcbiAgYXN5bmMoY2FsbGJhY2spKG51bGwsIHRoaXMucmVzdWx0cyk7XG59XG4iLCAidmFyIGl0ZXJhdGUgICAgPSByZXF1aXJlKCcuL2xpYi9pdGVyYXRlLmpzJylcbiAgLCBpbml0U3RhdGUgID0gcmVxdWlyZSgnLi9saWIvc3RhdGUuanMnKVxuICAsIHRlcm1pbmF0b3IgPSByZXF1aXJlKCcuL2xpYi90ZXJtaW5hdG9yLmpzJylcbiAgO1xuXG4vLyBQdWJsaWMgQVBJXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmFsbGVsO1xuXG4vKipcbiAqIFJ1bnMgaXRlcmF0b3Igb3ZlciBwcm92aWRlZCBhcnJheSBlbGVtZW50cyBpbiBwYXJhbGxlbFxuICpcbiAqIEBwYXJhbSAgIHthcnJheXxvYmplY3R9IGxpc3QgLSBhcnJheSBvciBvYmplY3QgKG5hbWVkIGxpc3QpIHRvIGl0ZXJhdGUgb3ZlclxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBpdGVyYXRvciAtIGl0ZXJhdG9yIHRvIHJ1blxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGludm9rZWQgd2hlbiBhbGwgZWxlbWVudHMgcHJvY2Vzc2VkXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IC0gam9icyB0ZXJtaW5hdG9yXG4gKi9cbmZ1bmN0aW9uIHBhcmFsbGVsKGxpc3QsIGl0ZXJhdG9yLCBjYWxsYmFjaylcbntcbiAgdmFyIHN0YXRlID0gaW5pdFN0YXRlKGxpc3QpO1xuXG4gIHdoaWxlIChzdGF0ZS5pbmRleCA8IChzdGF0ZVsna2V5ZWRMaXN0J10gfHwgbGlzdCkubGVuZ3RoKVxuICB7XG4gICAgaXRlcmF0ZShsaXN0LCBpdGVyYXRvciwgc3RhdGUsIGZ1bmN0aW9uKGVycm9yLCByZXN1bHQpXG4gICAge1xuICAgICAgaWYgKGVycm9yKVxuICAgICAge1xuICAgICAgICBjYWxsYmFjayhlcnJvciwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBsb29rcyBsaWtlIGl0J3MgdGhlIGxhc3Qgb25lXG4gICAgICBpZiAoT2JqZWN0LmtleXMoc3RhdGUuam9icykubGVuZ3RoID09PSAwKVxuICAgICAge1xuICAgICAgICBjYWxsYmFjayhudWxsLCBzdGF0ZS5yZXN1bHRzKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc3RhdGUuaW5kZXgrKztcbiAgfVxuXG4gIHJldHVybiB0ZXJtaW5hdG9yLmJpbmQoc3RhdGUsIGNhbGxiYWNrKTtcbn1cbiIsICJ2YXIgaXRlcmF0ZSAgICA9IHJlcXVpcmUoJy4vbGliL2l0ZXJhdGUuanMnKVxuICAsIGluaXRTdGF0ZSAgPSByZXF1aXJlKCcuL2xpYi9zdGF0ZS5qcycpXG4gICwgdGVybWluYXRvciA9IHJlcXVpcmUoJy4vbGliL3Rlcm1pbmF0b3IuanMnKVxuICA7XG5cbi8vIFB1YmxpYyBBUElcbm1vZHVsZS5leHBvcnRzID0gc2VyaWFsT3JkZXJlZDtcbi8vIHNvcnRpbmcgaGVscGVyc1xubW9kdWxlLmV4cG9ydHMuYXNjZW5kaW5nICA9IGFzY2VuZGluZztcbm1vZHVsZS5leHBvcnRzLmRlc2NlbmRpbmcgPSBkZXNjZW5kaW5nO1xuXG4vKipcbiAqIFJ1bnMgaXRlcmF0b3Igb3ZlciBwcm92aWRlZCBzb3J0ZWQgYXJyYXkgZWxlbWVudHMgaW4gc2VyaWVzXG4gKlxuICogQHBhcmFtICAge2FycmF5fG9iamVjdH0gbGlzdCAtIGFycmF5IG9yIG9iamVjdCAobmFtZWQgbGlzdCkgdG8gaXRlcmF0ZSBvdmVyXG4gKiBAcGFyYW0gICB7ZnVuY3Rpb259IGl0ZXJhdG9yIC0gaXRlcmF0b3IgdG8gcnVuXG4gKiBAcGFyYW0gICB7ZnVuY3Rpb259IHNvcnRNZXRob2QgLSBjdXN0b20gc29ydCBmdW5jdGlvblxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGludm9rZWQgd2hlbiBhbGwgZWxlbWVudHMgcHJvY2Vzc2VkXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IC0gam9icyB0ZXJtaW5hdG9yXG4gKi9cbmZ1bmN0aW9uIHNlcmlhbE9yZGVyZWQobGlzdCwgaXRlcmF0b3IsIHNvcnRNZXRob2QsIGNhbGxiYWNrKVxue1xuICB2YXIgc3RhdGUgPSBpbml0U3RhdGUobGlzdCwgc29ydE1ldGhvZCk7XG5cbiAgaXRlcmF0ZShsaXN0LCBpdGVyYXRvciwgc3RhdGUsIGZ1bmN0aW9uIGl0ZXJhdG9ySGFuZGxlcihlcnJvciwgcmVzdWx0KVxuICB7XG4gICAgaWYgKGVycm9yKVxuICAgIHtcbiAgICAgIGNhbGxiYWNrKGVycm9yLCByZXN1bHQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN0YXRlLmluZGV4Kys7XG5cbiAgICAvLyBhcmUgd2UgdGhlcmUgeWV0P1xuICAgIGlmIChzdGF0ZS5pbmRleCA8IChzdGF0ZVsna2V5ZWRMaXN0J10gfHwgbGlzdCkubGVuZ3RoKVxuICAgIHtcbiAgICAgIGl0ZXJhdGUobGlzdCwgaXRlcmF0b3IsIHN0YXRlLCBpdGVyYXRvckhhbmRsZXIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGRvbmUgaGVyZVxuICAgIGNhbGxiYWNrKG51bGwsIHN0YXRlLnJlc3VsdHMpO1xuICB9KTtcblxuICByZXR1cm4gdGVybWluYXRvci5iaW5kKHN0YXRlLCBjYWxsYmFjayk7XG59XG5cbi8qXG4gKiAtLSBTb3J0IG1ldGhvZHNcbiAqL1xuXG4vKipcbiAqIHNvcnQgaGVscGVyIHRvIHNvcnQgYXJyYXkgZWxlbWVudHMgaW4gYXNjZW5kaW5nIG9yZGVyXG4gKlxuICogQHBhcmFtICAge21peGVkfSBhIC0gYW4gaXRlbSB0byBjb21wYXJlXG4gKiBAcGFyYW0gICB7bWl4ZWR9IGIgLSBhbiBpdGVtIHRvIGNvbXBhcmVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IC0gY29tcGFyaXNvbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNjZW5kaW5nKGEsIGIpXG57XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogMDtcbn1cblxuLyoqXG4gKiBzb3J0IGhlbHBlciB0byBzb3J0IGFycmF5IGVsZW1lbnRzIGluIGRlc2NlbmRpbmcgb3JkZXJcbiAqXG4gKiBAcGFyYW0gICB7bWl4ZWR9IGEgLSBhbiBpdGVtIHRvIGNvbXBhcmVcbiAqIEBwYXJhbSAgIHttaXhlZH0gYiAtIGFuIGl0ZW0gdG8gY29tcGFyZVxuICogQHJldHVybnMge251bWJlcn0gLSBjb21wYXJpc29uIHJlc3VsdFxuICovXG5mdW5jdGlvbiBkZXNjZW5kaW5nKGEsIGIpXG57XG4gIHJldHVybiAtMSAqIGFzY2VuZGluZyhhLCBiKTtcbn1cbiIsICJ2YXIgc2VyaWFsT3JkZXJlZCA9IHJlcXVpcmUoJy4vc2VyaWFsT3JkZXJlZC5qcycpO1xuXG4vLyBQdWJsaWMgQVBJXG5tb2R1bGUuZXhwb3J0cyA9IHNlcmlhbDtcblxuLyoqXG4gKiBSdW5zIGl0ZXJhdG9yIG92ZXIgcHJvdmlkZWQgYXJyYXkgZWxlbWVudHMgaW4gc2VyaWVzXG4gKlxuICogQHBhcmFtICAge2FycmF5fG9iamVjdH0gbGlzdCAtIGFycmF5IG9yIG9iamVjdCAobmFtZWQgbGlzdCkgdG8gaXRlcmF0ZSBvdmVyXG4gKiBAcGFyYW0gICB7ZnVuY3Rpb259IGl0ZXJhdG9yIC0gaXRlcmF0b3IgdG8gcnVuXG4gKiBAcGFyYW0gICB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gaW52b2tlZCB3aGVuIGFsbCBlbGVtZW50cyBwcm9jZXNzZWRcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn0gLSBqb2JzIHRlcm1pbmF0b3JcbiAqL1xuZnVuY3Rpb24gc2VyaWFsKGxpc3QsIGl0ZXJhdG9yLCBjYWxsYmFjaylcbntcbiAgcmV0dXJuIHNlcmlhbE9yZGVyZWQobGlzdCwgaXRlcmF0b3IsIG51bGwsIGNhbGxiYWNrKTtcbn1cbiIsICJtb2R1bGUuZXhwb3J0cyA9XG57XG4gIHBhcmFsbGVsICAgICAgOiByZXF1aXJlKCcuL3BhcmFsbGVsLmpzJyksXG4gIHNlcmlhbCAgICAgICAgOiByZXF1aXJlKCcuL3NlcmlhbC5qcycpLFxuICBzZXJpYWxPcmRlcmVkIDogcmVxdWlyZSgnLi9zZXJpYWxPcmRlcmVkLmpzJylcbn07XG4iLCAiLy8gcG9wdWxhdGVzIG1pc3NpbmcgdmFsdWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRzdCwgc3JjKSB7XG5cbiAgT2JqZWN0LmtleXMoc3JjKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApXG4gIHtcbiAgICBkc3RbcHJvcF0gPSBkc3RbcHJvcF0gfHwgc3JjW3Byb3BdO1xuICB9KTtcblxuICByZXR1cm4gZHN0O1xufTtcbiIsICJ2YXIgQ29tYmluZWRTdHJlYW0gPSByZXF1aXJlKCdjb21iaW5lZC1zdHJlYW0nKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcbnZhciBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG52YXIgcGFyc2VVcmwgPSByZXF1aXJlKCd1cmwnKS5wYXJzZTtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJykuU3RyZWFtO1xudmFyIG1pbWUgPSByZXF1aXJlKCdtaW1lLXR5cGVzJyk7XG52YXIgYXN5bmNraXQgPSByZXF1aXJlKCdhc3luY2tpdCcpO1xudmFyIHBvcHVsYXRlID0gcmVxdWlyZSgnLi9wb3B1bGF0ZS5qcycpO1xuXG4vLyBQdWJsaWMgQVBJXG5tb2R1bGUuZXhwb3J0cyA9IEZvcm1EYXRhO1xuXG4vLyBtYWtlIGl0IGEgU3RyZWFtXG51dGlsLmluaGVyaXRzKEZvcm1EYXRhLCBDb21iaW5lZFN0cmVhbSk7XG5cbi8qKlxuICogQ3JlYXRlIHJlYWRhYmxlIFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiIHN0cmVhbXMuXG4gKiBDYW4gYmUgdXNlZCB0byBzdWJtaXQgZm9ybXNcbiAqIGFuZCBmaWxlIHVwbG9hZHMgdG8gb3RoZXIgd2ViIGFwcGxpY2F0aW9ucy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUHJvcGVydGllcyB0byBiZSBhZGRlZC9vdmVycmlkZW4gZm9yIEZvcm1EYXRhIGFuZCBDb21iaW5lZFN0cmVhbVxuICovXG5mdW5jdGlvbiBGb3JtRGF0YShvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBGb3JtRGF0YSkpIHtcbiAgICByZXR1cm4gbmV3IEZvcm1EYXRhKG9wdGlvbnMpO1xuICB9XG5cbiAgdGhpcy5fb3ZlcmhlYWRMZW5ndGggPSAwO1xuICB0aGlzLl92YWx1ZUxlbmd0aCA9IDA7XG4gIHRoaXMuX3ZhbHVlc1RvTWVhc3VyZSA9IFtdO1xuXG4gIENvbWJpbmVkU3RyZWFtLmNhbGwodGhpcyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGZvciAodmFyIG9wdGlvbiBpbiBvcHRpb25zKSB7XG4gICAgdGhpc1tvcHRpb25dID0gb3B0aW9uc1tvcHRpb25dO1xuICB9XG59XG5cbkZvcm1EYXRhLkxJTkVfQlJFQUsgPSAnXFxyXFxuJztcbkZvcm1EYXRhLkRFRkFVTFRfQ09OVEVOVF9UWVBFID0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSc7XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihmaWVsZCwgdmFsdWUsIG9wdGlvbnMpIHtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBhbGxvdyBmaWxlbmFtZSBhcyBzaW5nbGUgb3B0aW9uXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PSAnc3RyaW5nJykge1xuICAgIG9wdGlvbnMgPSB7ZmlsZW5hbWU6IG9wdGlvbnN9O1xuICB9XG5cbiAgdmFyIGFwcGVuZCA9IENvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5hcHBlbmQuYmluZCh0aGlzKTtcblxuICAvLyBhbGwgdGhhdCBzdHJlYW15IGJ1c2luZXNzIGNhbid0IGhhbmRsZSBudW1iZXJzXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICB2YWx1ZSA9ICcnICsgdmFsdWU7XG4gIH1cblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmVsaXhnZS9ub2RlLWZvcm0tZGF0YS9pc3N1ZXMvMzhcbiAgaWYgKHV0aWwuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAvLyBQbGVhc2UgY29udmVydCB5b3VyIGFycmF5IGludG8gc3RyaW5nXG4gICAgLy8gdGhlIHdheSB3ZWIgc2VydmVyIGV4cGVjdHMgaXRcbiAgICB0aGlzLl9lcnJvcihuZXcgRXJyb3IoJ0FycmF5cyBhcmUgbm90IHN1cHBvcnRlZC4nKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGhlYWRlciA9IHRoaXMuX211bHRpUGFydEhlYWRlcihmaWVsZCwgdmFsdWUsIG9wdGlvbnMpO1xuICB2YXIgZm9vdGVyID0gdGhpcy5fbXVsdGlQYXJ0Rm9vdGVyKCk7XG5cbiAgYXBwZW5kKGhlYWRlcik7XG4gIGFwcGVuZCh2YWx1ZSk7XG4gIGFwcGVuZChmb290ZXIpO1xuXG4gIC8vIHBhc3MgYWxvbmcgb3B0aW9ucy5rbm93bkxlbmd0aFxuICB0aGlzLl90cmFja0xlbmd0aChoZWFkZXIsIHZhbHVlLCBvcHRpb25zKTtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5fdHJhY2tMZW5ndGggPSBmdW5jdGlvbihoZWFkZXIsIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB2YWx1ZUxlbmd0aCA9IDA7XG5cbiAgLy8gdXNlZCB3LyBnZXRMZW5ndGhTeW5jKCksIHdoZW4gbGVuZ3RoIGlzIGtub3duLlxuICAvLyBlLmcuIGZvciBzdHJlYW1pbmcgZGlyZWN0bHkgZnJvbSBhIHJlbW90ZSBzZXJ2ZXIsXG4gIC8vIHcvIGEga25vd24gZmlsZSBhIHNpemUsIGFuZCBub3Qgd2FudGluZyB0byB3YWl0IGZvclxuICAvLyBpbmNvbWluZyBmaWxlIHRvIGZpbmlzaCB0byBnZXQgaXRzIHNpemUuXG4gIGlmIChvcHRpb25zLmtub3duTGVuZ3RoICE9IG51bGwpIHtcbiAgICB2YWx1ZUxlbmd0aCArPSArb3B0aW9ucy5rbm93bkxlbmd0aDtcbiAgfSBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgdmFsdWVMZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHZhbHVlTGVuZ3RoID0gQnVmZmVyLmJ5dGVMZW5ndGgodmFsdWUpO1xuICB9XG5cbiAgdGhpcy5fdmFsdWVMZW5ndGggKz0gdmFsdWVMZW5ndGg7XG5cbiAgLy8gQGNoZWNrIHdoeSBhZGQgQ1JMRj8gZG9lcyB0aGlzIGFjY291bnQgZm9yIGN1c3RvbS9tdWx0aXBsZSBDUkxGcz9cbiAgdGhpcy5fb3ZlcmhlYWRMZW5ndGggKz1cbiAgICBCdWZmZXIuYnl0ZUxlbmd0aChoZWFkZXIpICtcbiAgICBGb3JtRGF0YS5MSU5FX0JSRUFLLmxlbmd0aDtcblxuICAvLyBlbXB0eSBvciBlaXRoZXIgZG9lc24ndCBoYXZlIHBhdGggb3Igbm90IGFuIGh0dHAgcmVzcG9uc2Ugb3Igbm90IGEgc3RyZWFtXG4gIGlmICghdmFsdWUgfHwgKCAhdmFsdWUucGF0aCAmJiAhKHZhbHVlLnJlYWRhYmxlICYmIHZhbHVlLmhhc093blByb3BlcnR5KCdodHRwVmVyc2lvbicpKSAmJiAhKHZhbHVlIGluc3RhbmNlb2YgU3RyZWFtKSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBubyBuZWVkIHRvIGJvdGhlciB3aXRoIHRoZSBsZW5ndGhcbiAgaWYgKCFvcHRpb25zLmtub3duTGVuZ3RoKSB7XG4gICAgdGhpcy5fdmFsdWVzVG9NZWFzdXJlLnB1c2godmFsdWUpO1xuICB9XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuX2xlbmd0aFJldHJpZXZlciA9IGZ1bmN0aW9uKHZhbHVlLCBjYWxsYmFjaykge1xuXG4gIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnZmQnKSkge1xuXG4gICAgLy8gdGFrZSByZWFkIHJhbmdlIGludG8gYSBhY2NvdW50XG4gICAgLy8gYGVuZGAgPSBJbmZpbml0eSBcdTIwMTM+IHJlYWQgZmlsZSB0aWxsIHRoZSBlbmRcbiAgICAvL1xuICAgIC8vIFRPRE86IExvb2tzIGxpa2UgdGhlcmUgaXMgYnVnIGluIE5vZGUgZnMuY3JlYXRlUmVhZFN0cmVhbVxuICAgIC8vIGl0IGRvZXNuJ3QgcmVzcGVjdCBgZW5kYCBvcHRpb25zIHdpdGhvdXQgYHN0YXJ0YCBvcHRpb25zXG4gICAgLy8gRml4IGl0IHdoZW4gbm9kZSBmaXhlcyBpdC5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vam95ZW50L25vZGUvaXNzdWVzLzc4MTlcbiAgICBpZiAodmFsdWUuZW5kICE9IHVuZGVmaW5lZCAmJiB2YWx1ZS5lbmQgIT0gSW5maW5pdHkgJiYgdmFsdWUuc3RhcnQgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgIC8vIHdoZW4gZW5kIHNwZWNpZmllZFxuICAgICAgLy8gbm8gbmVlZCB0byBjYWxjdWxhdGUgcmFuZ2VcbiAgICAgIC8vIGluY2x1c2l2ZSwgc3RhcnRzIHdpdGggMFxuICAgICAgY2FsbGJhY2sobnVsbCwgdmFsdWUuZW5kICsgMSAtICh2YWx1ZS5zdGFydCA/IHZhbHVlLnN0YXJ0IDogMCkpO1xuXG4gICAgLy8gbm90IHRoYXQgZmFzdCBzbm9vcHlcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc3RpbGwgbmVlZCB0byBmZXRjaCBmaWxlIHNpemUgZnJvbSBmc1xuICAgICAgZnMuc3RhdCh2YWx1ZS5wYXRoLCBmdW5jdGlvbihlcnIsIHN0YXQpIHtcblxuICAgICAgICB2YXIgZmlsZVNpemU7XG5cbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIGZpbmFsIHNpemUgYmFzZWQgb24gdGhlIHJhbmdlIG9wdGlvbnNcbiAgICAgICAgZmlsZVNpemUgPSBzdGF0LnNpemUgLSAodmFsdWUuc3RhcnQgPyB2YWx1ZS5zdGFydCA6IDApO1xuICAgICAgICBjYWxsYmFjayhudWxsLCBmaWxlU2l6ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgLy8gb3IgaHR0cCByZXNwb25zZVxuICB9IGVsc2UgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdodHRwVmVyc2lvbicpKSB7XG4gICAgY2FsbGJhY2sobnVsbCwgK3ZhbHVlLmhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10pO1xuXG4gIC8vIG9yIHJlcXVlc3Qgc3RyZWFtIGh0dHA6Ly9naXRodWIuY29tL21pa2VhbC9yZXF1ZXN0XG4gIH0gZWxzZSBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ2h0dHBNb2R1bGUnKSkge1xuICAgIC8vIHdhaXQgdGlsbCByZXNwb25zZSBjb21lIGJhY2tcbiAgICB2YWx1ZS5vbigncmVzcG9uc2UnLCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgdmFsdWUucGF1c2UoKTtcbiAgICAgIGNhbGxiYWNrKG51bGwsICtyZXNwb25zZS5oZWFkZXJzWydjb250ZW50LWxlbmd0aCddKTtcbiAgICB9KTtcbiAgICB2YWx1ZS5yZXN1bWUoKTtcblxuICAvLyBzb21ldGhpbmcgZWxzZVxuICB9IGVsc2Uge1xuICAgIGNhbGxiYWNrKCdVbmtub3duIHN0cmVhbScpO1xuICB9XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuX211bHRpUGFydEhlYWRlciA9IGZ1bmN0aW9uKGZpZWxkLCB2YWx1ZSwgb3B0aW9ucykge1xuICAvLyBjdXN0b20gaGVhZGVyIHNwZWNpZmllZCAoYXMgc3RyaW5nKT9cbiAgLy8gaXQgYmVjb21lcyByZXNwb25zaWJsZSBmb3IgYm91bmRhcnlcbiAgLy8gKGUuZy4gdG8gaGFuZGxlIGV4dHJhIENSTEZzIG9uIC5ORVQgc2VydmVycylcbiAgaWYgKHR5cGVvZiBvcHRpb25zLmhlYWRlciA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBvcHRpb25zLmhlYWRlcjtcbiAgfVxuXG4gIHZhciBjb250ZW50RGlzcG9zaXRpb24gPSB0aGlzLl9nZXRDb250ZW50RGlzcG9zaXRpb24odmFsdWUsIG9wdGlvbnMpO1xuICB2YXIgY29udGVudFR5cGUgPSB0aGlzLl9nZXRDb250ZW50VHlwZSh2YWx1ZSwgb3B0aW9ucyk7XG5cbiAgdmFyIGNvbnRlbnRzID0gJyc7XG4gIHZhciBoZWFkZXJzICA9IHtcbiAgICAvLyBhZGQgY3VzdG9tIGRpc3Bvc2l0aW9uIGFzIHRoaXJkIGVsZW1lbnQgb3Iga2VlcCBpdCB0d28gZWxlbWVudHMgaWYgbm90XG4gICAgJ0NvbnRlbnQtRGlzcG9zaXRpb24nOiBbJ2Zvcm0tZGF0YScsICduYW1lPVwiJyArIGZpZWxkICsgJ1wiJ10uY29uY2F0KGNvbnRlbnREaXNwb3NpdGlvbiB8fCBbXSksXG4gICAgLy8gaWYgbm8gY29udGVudCB0eXBlLiBhbGxvdyBpdCB0byBiZSBlbXB0eSBhcnJheVxuICAgICdDb250ZW50LVR5cGUnOiBbXS5jb25jYXQoY29udGVudFR5cGUgfHwgW10pXG4gIH07XG5cbiAgLy8gYWxsb3cgY3VzdG9tIGhlYWRlcnMuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5oZWFkZXIgPT0gJ29iamVjdCcpIHtcbiAgICBwb3B1bGF0ZShoZWFkZXJzLCBvcHRpb25zLmhlYWRlcik7XG4gIH1cblxuICB2YXIgaGVhZGVyO1xuICBmb3IgKHZhciBwcm9wIGluIGhlYWRlcnMpIHtcbiAgICBpZiAoIWhlYWRlcnMuaGFzT3duUHJvcGVydHkocHJvcCkpIGNvbnRpbnVlO1xuICAgIGhlYWRlciA9IGhlYWRlcnNbcHJvcF07XG5cbiAgICAvLyBza2lwIG51bGxpc2ggaGVhZGVycy5cbiAgICBpZiAoaGVhZGVyID09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGNvbnZlcnQgYWxsIGhlYWRlcnMgdG8gYXJyYXlzLlxuICAgIGlmICghQXJyYXkuaXNBcnJheShoZWFkZXIpKSB7XG4gICAgICBoZWFkZXIgPSBbaGVhZGVyXTtcbiAgICB9XG5cbiAgICAvLyBhZGQgbm9uLWVtcHR5IGhlYWRlcnMuXG4gICAgaWYgKGhlYWRlci5sZW5ndGgpIHtcbiAgICAgIGNvbnRlbnRzICs9IHByb3AgKyAnOiAnICsgaGVhZGVyLmpvaW4oJzsgJykgKyBGb3JtRGF0YS5MSU5FX0JSRUFLO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAnLS0nICsgdGhpcy5nZXRCb3VuZGFyeSgpICsgRm9ybURhdGEuTElORV9CUkVBSyArIGNvbnRlbnRzICsgRm9ybURhdGEuTElORV9CUkVBSztcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5fZ2V0Q29udGVudERpc3Bvc2l0aW9uID0gZnVuY3Rpb24odmFsdWUsIG9wdGlvbnMpIHtcblxuICB2YXIgZmlsZW5hbWVcbiAgICAsIGNvbnRlbnREaXNwb3NpdGlvblxuICAgIDtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuZmlsZXBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gY3VzdG9tIGZpbGVwYXRoIGZvciByZWxhdGl2ZSBwYXRoc1xuICAgIGZpbGVuYW1lID0gcGF0aC5ub3JtYWxpemUob3B0aW9ucy5maWxlcGF0aCkucmVwbGFjZSgvXFxcXC9nLCAnLycpO1xuICB9IGVsc2UgaWYgKG9wdGlvbnMuZmlsZW5hbWUgfHwgdmFsdWUubmFtZSB8fCB2YWx1ZS5wYXRoKSB7XG4gICAgLy8gY3VzdG9tIGZpbGVuYW1lIHRha2UgcHJlY2VkZW5jZVxuICAgIC8vIGZvcm1pZGFibGUgYW5kIHRoZSBicm93c2VyIGFkZCBhIG5hbWUgcHJvcGVydHlcbiAgICAvLyBmcy0gYW5kIHJlcXVlc3QtIHN0cmVhbXMgaGF2ZSBwYXRoIHByb3BlcnR5XG4gICAgZmlsZW5hbWUgPSBwYXRoLmJhc2VuYW1lKG9wdGlvbnMuZmlsZW5hbWUgfHwgdmFsdWUubmFtZSB8fCB2YWx1ZS5wYXRoKTtcbiAgfSBlbHNlIGlmICh2YWx1ZS5yZWFkYWJsZSAmJiB2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnaHR0cFZlcnNpb24nKSkge1xuICAgIC8vIG9yIHRyeSBodHRwIHJlc3BvbnNlXG4gICAgZmlsZW5hbWUgPSBwYXRoLmJhc2VuYW1lKHZhbHVlLmNsaWVudC5faHR0cE1lc3NhZ2UucGF0aCB8fCAnJyk7XG4gIH1cblxuICBpZiAoZmlsZW5hbWUpIHtcbiAgICBjb250ZW50RGlzcG9zaXRpb24gPSAnZmlsZW5hbWU9XCInICsgZmlsZW5hbWUgKyAnXCInO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRlbnREaXNwb3NpdGlvbjtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5fZ2V0Q29udGVudFR5cGUgPSBmdW5jdGlvbih2YWx1ZSwgb3B0aW9ucykge1xuXG4gIC8vIHVzZSBjdXN0b20gY29udGVudC10eXBlIGFib3ZlIGFsbFxuICB2YXIgY29udGVudFR5cGUgPSBvcHRpb25zLmNvbnRlbnRUeXBlO1xuXG4gIC8vIG9yIHRyeSBgbmFtZWAgZnJvbSBmb3JtaWRhYmxlLCBicm93c2VyXG4gIGlmICghY29udGVudFR5cGUgJiYgdmFsdWUubmFtZSkge1xuICAgIGNvbnRlbnRUeXBlID0gbWltZS5sb29rdXAodmFsdWUubmFtZSk7XG4gIH1cblxuICAvLyBvciB0cnkgYHBhdGhgIGZyb20gZnMtLCByZXF1ZXN0LSBzdHJlYW1zXG4gIGlmICghY29udGVudFR5cGUgJiYgdmFsdWUucGF0aCkge1xuICAgIGNvbnRlbnRUeXBlID0gbWltZS5sb29rdXAodmFsdWUucGF0aCk7XG4gIH1cblxuICAvLyBvciBpZiBpdCdzIGh0dHAtcmVwb25zZVxuICBpZiAoIWNvbnRlbnRUeXBlICYmIHZhbHVlLnJlYWRhYmxlICYmIHZhbHVlLmhhc093blByb3BlcnR5KCdodHRwVmVyc2lvbicpKSB7XG4gICAgY29udGVudFR5cGUgPSB2YWx1ZS5oZWFkZXJzWydjb250ZW50LXR5cGUnXTtcbiAgfVxuXG4gIC8vIG9yIGd1ZXNzIGl0IGZyb20gdGhlIGZpbGVwYXRoIG9yIGZpbGVuYW1lXG4gIGlmICghY29udGVudFR5cGUgJiYgKG9wdGlvbnMuZmlsZXBhdGggfHwgb3B0aW9ucy5maWxlbmFtZSkpIHtcbiAgICBjb250ZW50VHlwZSA9IG1pbWUubG9va3VwKG9wdGlvbnMuZmlsZXBhdGggfHwgb3B0aW9ucy5maWxlbmFtZSk7XG4gIH1cblxuICAvLyBmYWxsYmFjayB0byB0aGUgZGVmYXVsdCBjb250ZW50IHR5cGUgaWYgYHZhbHVlYCBpcyBub3Qgc2ltcGxlIHZhbHVlXG4gIGlmICghY29udGVudFR5cGUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgY29udGVudFR5cGUgPSBGb3JtRGF0YS5ERUZBVUxUX0NPTlRFTlRfVFlQRTtcbiAgfVxuXG4gIHJldHVybiBjb250ZW50VHlwZTtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5fbXVsdGlQYXJ0Rm9vdGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBmdW5jdGlvbihuZXh0KSB7XG4gICAgdmFyIGZvb3RlciA9IEZvcm1EYXRhLkxJTkVfQlJFQUs7XG5cbiAgICB2YXIgbGFzdFBhcnQgPSAodGhpcy5fc3RyZWFtcy5sZW5ndGggPT09IDApO1xuICAgIGlmIChsYXN0UGFydCkge1xuICAgICAgZm9vdGVyICs9IHRoaXMuX2xhc3RCb3VuZGFyeSgpO1xuICAgIH1cblxuICAgIG5leHQoZm9vdGVyKTtcbiAgfS5iaW5kKHRoaXMpO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLl9sYXN0Qm91bmRhcnkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICctLScgKyB0aGlzLmdldEJvdW5kYXJ5KCkgKyAnLS0nICsgRm9ybURhdGEuTElORV9CUkVBSztcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5nZXRIZWFkZXJzID0gZnVuY3Rpb24odXNlckhlYWRlcnMpIHtcbiAgdmFyIGhlYWRlcjtcbiAgdmFyIGZvcm1IZWFkZXJzID0ge1xuICAgICdjb250ZW50LXR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YTsgYm91bmRhcnk9JyArIHRoaXMuZ2V0Qm91bmRhcnkoKVxuICB9O1xuXG4gIGZvciAoaGVhZGVyIGluIHVzZXJIZWFkZXJzKSB7XG4gICAgaWYgKHVzZXJIZWFkZXJzLmhhc093blByb3BlcnR5KGhlYWRlcikpIHtcbiAgICAgIGZvcm1IZWFkZXJzW2hlYWRlci50b0xvd2VyQ2FzZSgpXSA9IHVzZXJIZWFkZXJzW2hlYWRlcl07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZvcm1IZWFkZXJzO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLnNldEJvdW5kYXJ5ID0gZnVuY3Rpb24oYm91bmRhcnkpIHtcbiAgdGhpcy5fYm91bmRhcnkgPSBib3VuZGFyeTtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5nZXRCb3VuZGFyeSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuX2JvdW5kYXJ5KSB7XG4gICAgdGhpcy5fZ2VuZXJhdGVCb3VuZGFyeSgpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX2JvdW5kYXJ5O1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLmdldEJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZGF0YUJ1ZmZlciA9IG5ldyBCdWZmZXIuYWxsb2MoIDAgKTtcbiAgdmFyIGJvdW5kYXJ5ID0gdGhpcy5nZXRCb3VuZGFyeSgpO1xuXG4gIC8vIENyZWF0ZSB0aGUgZm9ybSBjb250ZW50LiBBZGQgTGluZSBicmVha3MgdG8gdGhlIGVuZCBvZiBkYXRhLlxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fc3RyZWFtcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fc3RyZWFtc1tpXSAhPT0gJ2Z1bmN0aW9uJykge1xuXG4gICAgICAvLyBBZGQgY29udGVudCB0byB0aGUgYnVmZmVyLlxuICAgICAgaWYoQnVmZmVyLmlzQnVmZmVyKHRoaXMuX3N0cmVhbXNbaV0pKSB7XG4gICAgICAgIGRhdGFCdWZmZXIgPSBCdWZmZXIuY29uY2F0KCBbZGF0YUJ1ZmZlciwgdGhpcy5fc3RyZWFtc1tpXV0pO1xuICAgICAgfWVsc2Uge1xuICAgICAgICBkYXRhQnVmZmVyID0gQnVmZmVyLmNvbmNhdCggW2RhdGFCdWZmZXIsIEJ1ZmZlci5mcm9tKHRoaXMuX3N0cmVhbXNbaV0pXSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCBicmVhayBhZnRlciBjb250ZW50LlxuICAgICAgaWYgKHR5cGVvZiB0aGlzLl9zdHJlYW1zW2ldICE9PSAnc3RyaW5nJyB8fCB0aGlzLl9zdHJlYW1zW2ldLnN1YnN0cmluZyggMiwgYm91bmRhcnkubGVuZ3RoICsgMiApICE9PSBib3VuZGFyeSkge1xuICAgICAgICBkYXRhQnVmZmVyID0gQnVmZmVyLmNvbmNhdCggW2RhdGFCdWZmZXIsIEJ1ZmZlci5mcm9tKEZvcm1EYXRhLkxJTkVfQlJFQUspXSApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCB0aGUgZm9vdGVyIGFuZCByZXR1cm4gdGhlIEJ1ZmZlciBvYmplY3QuXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KCBbZGF0YUJ1ZmZlciwgQnVmZmVyLmZyb20odGhpcy5fbGFzdEJvdW5kYXJ5KCkpXSApO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLl9nZW5lcmF0ZUJvdW5kYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIC8vIFRoaXMgZ2VuZXJhdGVzIGEgNTAgY2hhcmFjdGVyIGJvdW5kYXJ5IHNpbWlsYXIgdG8gdGhvc2UgdXNlZCBieSBGaXJlZm94LlxuICAvLyBUaGV5IGFyZSBvcHRpbWl6ZWQgZm9yIGJveWVyLW1vb3JlIHBhcnNpbmcuXG4gIHZhciBib3VuZGFyeSA9ICctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMjQ7IGkrKykge1xuICAgIGJvdW5kYXJ5ICs9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKS50b1N0cmluZygxNik7XG4gIH1cblxuICB0aGlzLl9ib3VuZGFyeSA9IGJvdW5kYXJ5O1xufTtcblxuLy8gTm90ZTogZ2V0TGVuZ3RoU3luYyBET0VTTidUIGNhbGN1bGF0ZSBzdHJlYW1zIGxlbmd0aFxuLy8gQXMgd29ya2Fyb3VuZCBvbmUgY2FuIGNhbGN1bGF0ZSBmaWxlIHNpemUgbWFudWFsbHlcbi8vIGFuZCBhZGQgaXQgYXMga25vd25MZW5ndGggb3B0aW9uXG5Gb3JtRGF0YS5wcm90b3R5cGUuZ2V0TGVuZ3RoU3luYyA9IGZ1bmN0aW9uKCkge1xuICB2YXIga25vd25MZW5ndGggPSB0aGlzLl9vdmVyaGVhZExlbmd0aCArIHRoaXMuX3ZhbHVlTGVuZ3RoO1xuXG4gIC8vIERvbid0IGdldCBjb25mdXNlZCwgdGhlcmUgYXJlIDMgXCJpbnRlcm5hbFwiIHN0cmVhbXMgZm9yIGVhY2gga2V5dmFsIHBhaXJcbiAgLy8gc28gaXQgYmFzaWNhbGx5IGNoZWNrcyBpZiB0aGVyZSBpcyBhbnkgdmFsdWUgYWRkZWQgdG8gdGhlIGZvcm1cbiAgaWYgKHRoaXMuX3N0cmVhbXMubGVuZ3RoKSB7XG4gICAga25vd25MZW5ndGggKz0gdGhpcy5fbGFzdEJvdW5kYXJ5KCkubGVuZ3RoO1xuICB9XG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zvcm0tZGF0YS9mb3JtLWRhdGEvaXNzdWVzLzQwXG4gIGlmICghdGhpcy5oYXNLbm93bkxlbmd0aCgpKSB7XG4gICAgLy8gU29tZSBhc3luYyBsZW5ndGggcmV0cmlldmVycyBhcmUgcHJlc2VudFxuICAgIC8vIHRoZXJlZm9yZSBzeW5jaHJvbm91cyBsZW5ndGggY2FsY3VsYXRpb24gaXMgZmFsc2UuXG4gICAgLy8gUGxlYXNlIHVzZSBnZXRMZW5ndGgoY2FsbGJhY2spIHRvIGdldCBwcm9wZXIgbGVuZ3RoXG4gICAgdGhpcy5fZXJyb3IobmV3IEVycm9yKCdDYW5ub3QgY2FsY3VsYXRlIHByb3BlciBsZW5ndGggaW4gc3luY2hyb25vdXMgd2F5LicpKTtcbiAgfVxuXG4gIHJldHVybiBrbm93bkxlbmd0aDtcbn07XG5cbi8vIFB1YmxpYyBBUEkgdG8gY2hlY2sgaWYgbGVuZ3RoIG9mIGFkZGVkIHZhbHVlcyBpcyBrbm93blxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zvcm0tZGF0YS9mb3JtLWRhdGEvaXNzdWVzLzE5NlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zvcm0tZGF0YS9mb3JtLWRhdGEvaXNzdWVzLzI2MlxuRm9ybURhdGEucHJvdG90eXBlLmhhc0tub3duTGVuZ3RoID0gZnVuY3Rpb24oKSB7XG4gIHZhciBoYXNLbm93bkxlbmd0aCA9IHRydWU7XG5cbiAgaWYgKHRoaXMuX3ZhbHVlc1RvTWVhc3VyZS5sZW5ndGgpIHtcbiAgICBoYXNLbm93bkxlbmd0aCA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGhhc0tub3duTGVuZ3RoO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uKGNiKSB7XG4gIHZhciBrbm93bkxlbmd0aCA9IHRoaXMuX292ZXJoZWFkTGVuZ3RoICsgdGhpcy5fdmFsdWVMZW5ndGg7XG5cbiAgaWYgKHRoaXMuX3N0cmVhbXMubGVuZ3RoKSB7XG4gICAga25vd25MZW5ndGggKz0gdGhpcy5fbGFzdEJvdW5kYXJ5KCkubGVuZ3RoO1xuICB9XG5cbiAgaWYgKCF0aGlzLl92YWx1ZXNUb01lYXN1cmUubGVuZ3RoKSB7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhjYi5iaW5kKHRoaXMsIG51bGwsIGtub3duTGVuZ3RoKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgYXN5bmNraXQucGFyYWxsZWwodGhpcy5fdmFsdWVzVG9NZWFzdXJlLCB0aGlzLl9sZW5ndGhSZXRyaWV2ZXIsIGZ1bmN0aW9uKGVyciwgdmFsdWVzKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgY2IoZXJyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbihsZW5ndGgpIHtcbiAgICAgIGtub3duTGVuZ3RoICs9IGxlbmd0aDtcbiAgICB9KTtcblxuICAgIGNiKG51bGwsIGtub3duTGVuZ3RoKTtcbiAgfSk7XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuc3VibWl0ID0gZnVuY3Rpb24ocGFyYW1zLCBjYikge1xuICB2YXIgcmVxdWVzdFxuICAgICwgb3B0aW9uc1xuICAgICwgZGVmYXVsdHMgPSB7bWV0aG9kOiAncG9zdCd9XG4gICAgO1xuXG4gIC8vIHBhcnNlIHByb3ZpZGVkIHVybCBpZiBpdCdzIHN0cmluZ1xuICAvLyBvciB0cmVhdCBpdCBhcyBvcHRpb25zIG9iamVjdFxuICBpZiAodHlwZW9mIHBhcmFtcyA9PSAnc3RyaW5nJykge1xuXG4gICAgcGFyYW1zID0gcGFyc2VVcmwocGFyYW1zKTtcbiAgICBvcHRpb25zID0gcG9wdWxhdGUoe1xuICAgICAgcG9ydDogcGFyYW1zLnBvcnQsXG4gICAgICBwYXRoOiBwYXJhbXMucGF0aG5hbWUsXG4gICAgICBob3N0OiBwYXJhbXMuaG9zdG5hbWUsXG4gICAgICBwcm90b2NvbDogcGFyYW1zLnByb3RvY29sXG4gICAgfSwgZGVmYXVsdHMpO1xuXG4gIC8vIHVzZSBjdXN0b20gcGFyYW1zXG4gIH0gZWxzZSB7XG5cbiAgICBvcHRpb25zID0gcG9wdWxhdGUocGFyYW1zLCBkZWZhdWx0cyk7XG4gICAgLy8gaWYgbm8gcG9ydCBwcm92aWRlZCB1c2UgZGVmYXVsdCBvbmVcbiAgICBpZiAoIW9wdGlvbnMucG9ydCkge1xuICAgICAgb3B0aW9ucy5wb3J0ID0gb3B0aW9ucy5wcm90b2NvbCA9PSAnaHR0cHM6JyA/IDQ0MyA6IDgwO1xuICAgIH1cbiAgfVxuXG4gIC8vIHB1dCB0aGF0IGdvb2QgY29kZSBpbiBnZXRIZWFkZXJzIHRvIHNvbWUgdXNlXG4gIG9wdGlvbnMuaGVhZGVycyA9IHRoaXMuZ2V0SGVhZGVycyhwYXJhbXMuaGVhZGVycyk7XG5cbiAgLy8gaHR0cHMgaWYgc3BlY2lmaWVkLCBmYWxsYmFjayB0byBodHRwIGluIGFueSBvdGhlciBjYXNlXG4gIGlmIChvcHRpb25zLnByb3RvY29sID09ICdodHRwczonKSB7XG4gICAgcmVxdWVzdCA9IGh0dHBzLnJlcXVlc3Qob3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgcmVxdWVzdCA9IGh0dHAucmVxdWVzdChvcHRpb25zKTtcbiAgfVxuXG4gIC8vIGdldCBjb250ZW50IGxlbmd0aCBhbmQgZmlyZSBhd2F5XG4gIHRoaXMuZ2V0TGVuZ3RoKGZ1bmN0aW9uKGVyciwgbGVuZ3RoKSB7XG4gICAgaWYgKGVyciAmJiBlcnIgIT09ICdVbmtub3duIHN0cmVhbScpIHtcbiAgICAgIHRoaXMuX2Vycm9yKGVycik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYWRkIGNvbnRlbnQgbGVuZ3RoXG4gICAgaWYgKGxlbmd0aCkge1xuICAgICAgcmVxdWVzdC5zZXRIZWFkZXIoJ0NvbnRlbnQtTGVuZ3RoJywgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICB0aGlzLnBpcGUocmVxdWVzdCk7XG4gICAgaWYgKGNiKSB7XG4gICAgICB2YXIgb25SZXNwb25zZTtcblxuICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKGVycm9yLCByZXNwb25jZSkge1xuICAgICAgICByZXF1ZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGNhbGxiYWNrKTtcbiAgICAgICAgcmVxdWVzdC5yZW1vdmVMaXN0ZW5lcigncmVzcG9uc2UnLCBvblJlc3BvbnNlKTtcblxuICAgICAgICByZXR1cm4gY2IuY2FsbCh0aGlzLCBlcnJvciwgcmVzcG9uY2UpO1xuICAgICAgfTtcblxuICAgICAgb25SZXNwb25zZSA9IGNhbGxiYWNrLmJpbmQodGhpcywgbnVsbCk7XG5cbiAgICAgIHJlcXVlc3Qub24oJ2Vycm9yJywgY2FsbGJhY2spO1xuICAgICAgcmVxdWVzdC5vbigncmVzcG9uc2UnLCBvblJlc3BvbnNlKTtcbiAgICB9XG4gIH0uYmluZCh0aGlzKSk7XG5cbiAgcmV0dXJuIHJlcXVlc3Q7XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24oZXJyKSB7XG4gIGlmICghdGhpcy5lcnJvcikge1xuICAgIHRoaXMuZXJyb3IgPSBlcnI7XG4gICAgdGhpcy5wYXVzZSgpO1xuICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB9XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAnW29iamVjdCBGb3JtRGF0YV0nO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBwYXJzZVVybCA9IHJlcXVpcmUoJ3VybCcpLnBhcnNlO1xuXG52YXIgREVGQVVMVF9QT1JUUyA9IHtcbiAgZnRwOiAyMSxcbiAgZ29waGVyOiA3MCxcbiAgaHR0cDogODAsXG4gIGh0dHBzOiA0NDMsXG4gIHdzOiA4MCxcbiAgd3NzOiA0NDMsXG59O1xuXG52YXIgc3RyaW5nRW5kc1dpdGggPSBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoIHx8IGZ1bmN0aW9uKHMpIHtcbiAgcmV0dXJuIHMubGVuZ3RoIDw9IHRoaXMubGVuZ3RoICYmXG4gICAgdGhpcy5pbmRleE9mKHMsIHRoaXMubGVuZ3RoIC0gcy5sZW5ndGgpICE9PSAtMTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSB1cmwgLSBUaGUgVVJMLCBvciB0aGUgcmVzdWx0IGZyb20gdXJsLnBhcnNlLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgVVJMIG9mIHRoZSBwcm94eSB0aGF0IHNob3VsZCBoYW5kbGUgdGhlIHJlcXVlc3QgdG8gdGhlXG4gKiAgZ2l2ZW4gVVJMLiBJZiBubyBwcm94eSBpcyBzZXQsIHRoaXMgd2lsbCBiZSBhbiBlbXB0eSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGdldFByb3h5Rm9yVXJsKHVybCkge1xuICB2YXIgcGFyc2VkVXJsID0gdHlwZW9mIHVybCA9PT0gJ3N0cmluZycgPyBwYXJzZVVybCh1cmwpIDogdXJsIHx8IHt9O1xuICB2YXIgcHJvdG8gPSBwYXJzZWRVcmwucHJvdG9jb2w7XG4gIHZhciBob3N0bmFtZSA9IHBhcnNlZFVybC5ob3N0O1xuICB2YXIgcG9ydCA9IHBhcnNlZFVybC5wb3J0O1xuICBpZiAodHlwZW9mIGhvc3RuYW1lICE9PSAnc3RyaW5nJyB8fCAhaG9zdG5hbWUgfHwgdHlwZW9mIHByb3RvICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiAnJzsgIC8vIERvbid0IHByb3h5IFVSTHMgd2l0aG91dCBhIHZhbGlkIHNjaGVtZSBvciBob3N0LlxuICB9XG5cbiAgcHJvdG8gPSBwcm90by5zcGxpdCgnOicsIDEpWzBdO1xuICAvLyBTdHJpcHBpbmcgcG9ydHMgaW4gdGhpcyB3YXkgaW5zdGVhZCBvZiB1c2luZyBwYXJzZWRVcmwuaG9zdG5hbWUgdG8gbWFrZVxuICAvLyBzdXJlIHRoYXQgdGhlIGJyYWNrZXRzIGFyb3VuZCBJUHY2IGFkZHJlc3NlcyBhcmUga2VwdC5cbiAgaG9zdG5hbWUgPSBob3N0bmFtZS5yZXBsYWNlKC86XFxkKiQvLCAnJyk7XG4gIHBvcnQgPSBwYXJzZUludChwb3J0KSB8fCBERUZBVUxUX1BPUlRTW3Byb3RvXSB8fCAwO1xuICBpZiAoIXNob3VsZFByb3h5KGhvc3RuYW1lLCBwb3J0KSkge1xuICAgIHJldHVybiAnJzsgIC8vIERvbid0IHByb3h5IFVSTHMgdGhhdCBtYXRjaCBOT19QUk9YWS5cbiAgfVxuXG4gIHZhciBwcm94eSA9XG4gICAgZ2V0RW52KCducG1fY29uZmlnXycgKyBwcm90byArICdfcHJveHknKSB8fFxuICAgIGdldEVudihwcm90byArICdfcHJveHknKSB8fFxuICAgIGdldEVudignbnBtX2NvbmZpZ19wcm94eScpIHx8XG4gICAgZ2V0RW52KCdhbGxfcHJveHknKTtcbiAgaWYgKHByb3h5ICYmIHByb3h5LmluZGV4T2YoJzovLycpID09PSAtMSkge1xuICAgIC8vIE1pc3Npbmcgc2NoZW1lIGluIHByb3h5LCBkZWZhdWx0IHRvIHRoZSByZXF1ZXN0ZWQgVVJMJ3Mgc2NoZW1lLlxuICAgIHByb3h5ID0gcHJvdG8gKyAnOi8vJyArIHByb3h5O1xuICB9XG4gIHJldHVybiBwcm94eTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBnaXZlbiBVUkwgc2hvdWxkIGJlIHByb3hpZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGhvc3RuYW1lIC0gVGhlIGhvc3QgbmFtZSBvZiB0aGUgVVJMLlxuICogQHBhcmFtIHtudW1iZXJ9IHBvcnQgLSBUaGUgZWZmZWN0aXZlIHBvcnQgb2YgdGhlIFVSTC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiBVUkwgc2hvdWxkIGJlIHByb3hpZWQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzaG91bGRQcm94eShob3N0bmFtZSwgcG9ydCkge1xuICB2YXIgTk9fUFJPWFkgPVxuICAgIChnZXRFbnYoJ25wbV9jb25maWdfbm9fcHJveHknKSB8fCBnZXRFbnYoJ25vX3Byb3h5JykpLnRvTG93ZXJDYXNlKCk7XG4gIGlmICghTk9fUFJPWFkpIHtcbiAgICByZXR1cm4gdHJ1ZTsgIC8vIEFsd2F5cyBwcm94eSBpZiBOT19QUk9YWSBpcyBub3Qgc2V0LlxuICB9XG4gIGlmIChOT19QUk9YWSA9PT0gJyonKSB7XG4gICAgcmV0dXJuIGZhbHNlOyAgLy8gTmV2ZXIgcHJveHkgaWYgd2lsZGNhcmQgaXMgc2V0LlxuICB9XG5cbiAgcmV0dXJuIE5PX1BST1hZLnNwbGl0KC9bLFxcc10vKS5ldmVyeShmdW5jdGlvbihwcm94eSkge1xuICAgIGlmICghcHJveHkpIHtcbiAgICAgIHJldHVybiB0cnVlOyAgLy8gU2tpcCB6ZXJvLWxlbmd0aCBob3N0cy5cbiAgICB9XG4gICAgdmFyIHBhcnNlZFByb3h5ID0gcHJveHkubWF0Y2goL14oLispOihcXGQrKSQvKTtcbiAgICB2YXIgcGFyc2VkUHJveHlIb3N0bmFtZSA9IHBhcnNlZFByb3h5ID8gcGFyc2VkUHJveHlbMV0gOiBwcm94eTtcbiAgICB2YXIgcGFyc2VkUHJveHlQb3J0ID0gcGFyc2VkUHJveHkgPyBwYXJzZUludChwYXJzZWRQcm94eVsyXSkgOiAwO1xuICAgIGlmIChwYXJzZWRQcm94eVBvcnQgJiYgcGFyc2VkUHJveHlQb3J0ICE9PSBwb3J0KSB7XG4gICAgICByZXR1cm4gdHJ1ZTsgIC8vIFNraXAgaWYgcG9ydHMgZG9uJ3QgbWF0Y2guXG4gICAgfVxuXG4gICAgaWYgKCEvXlsuKl0vLnRlc3QocGFyc2VkUHJveHlIb3N0bmFtZSkpIHtcbiAgICAgIC8vIE5vIHdpbGRjYXJkcywgc28gc3RvcCBwcm94eWluZyBpZiB0aGVyZSBpcyBhbiBleGFjdCBtYXRjaC5cbiAgICAgIHJldHVybiBob3N0bmFtZSAhPT0gcGFyc2VkUHJveHlIb3N0bmFtZTtcbiAgICB9XG5cbiAgICBpZiAocGFyc2VkUHJveHlIb3N0bmFtZS5jaGFyQXQoMCkgPT09ICcqJykge1xuICAgICAgLy8gUmVtb3ZlIGxlYWRpbmcgd2lsZGNhcmQuXG4gICAgICBwYXJzZWRQcm94eUhvc3RuYW1lID0gcGFyc2VkUHJveHlIb3N0bmFtZS5zbGljZSgxKTtcbiAgICB9XG4gICAgLy8gU3RvcCBwcm94eWluZyBpZiB0aGUgaG9zdG5hbWUgZW5kcyB3aXRoIHRoZSBub19wcm94eSBob3N0LlxuICAgIHJldHVybiAhc3RyaW5nRW5kc1dpdGguY2FsbChob3N0bmFtZSwgcGFyc2VkUHJveHlIb3N0bmFtZSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgdmFsdWUgZm9yIGFuIGVudmlyb25tZW50IHZhcmlhYmxlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUgbmFtZSBvZiB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB2YWx1ZSBvZiB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXRFbnYoa2V5KSB7XG4gIHJldHVybiBwcm9jZXNzLmVudltrZXkudG9Mb3dlckNhc2UoKV0gfHwgcHJvY2Vzcy5lbnZba2V5LnRvVXBwZXJDYXNlKCldIHx8ICcnO1xufVxuXG5leHBvcnRzLmdldFByb3h5Rm9yVXJsID0gZ2V0UHJveHlGb3JVcmw7XG4iLCAiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB3ID0gZCAqIDc7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbCkpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKC0/KD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx3ZWVrcz98d3x5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnd2Vla3MnOlxuICAgIGNhc2UgJ3dlZWsnOlxuICAgIGNhc2UgJ3cnOlxuICAgICAgcmV0dXJuIG4gKiB3O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBkLCAnZGF5Jyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgaCwgJ2hvdXInKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBtLCAnbWludXRlJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgcywgJ3NlY29uZCcpO1xuICB9XG4gIHJldHVybiBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbXNBYnMsIG4sIG5hbWUpIHtcbiAgdmFyIGlzUGx1cmFsID0gbXNBYnMgPj0gbiAqIDEuNTtcbiAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBuKSArICcgJyArIG5hbWUgKyAoaXNQbHVyYWwgPyAncycgOiAnJyk7XG59XG4iLCAiXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKi9cblxuZnVuY3Rpb24gc2V0dXAoZW52KSB7XG5cdGNyZWF0ZURlYnVnLmRlYnVnID0gY3JlYXRlRGVidWc7XG5cdGNyZWF0ZURlYnVnLmRlZmF1bHQgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuY29lcmNlID0gY29lcmNlO1xuXHRjcmVhdGVEZWJ1Zy5kaXNhYmxlID0gZGlzYWJsZTtcblx0Y3JlYXRlRGVidWcuZW5hYmxlID0gZW5hYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGVkID0gZW5hYmxlZDtcblx0Y3JlYXRlRGVidWcuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXHRjcmVhdGVEZWJ1Zy5kZXN0cm95ID0gZGVzdHJveTtcblxuXHRPYmplY3Qua2V5cyhlbnYpLmZvckVhY2goa2V5ID0+IHtcblx0XHRjcmVhdGVEZWJ1Z1trZXldID0gZW52W2tleV07XG5cdH0pO1xuXG5cdC8qKlxuXHQqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuXHQqL1xuXG5cdGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG5cdGNyZWF0ZURlYnVnLnNraXBzID0gW107XG5cblx0LyoqXG5cdCogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuXHQqXG5cdCogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXIgb3IgdXBwZXItY2FzZSBsZXR0ZXIsIGkuZS4gXCJuXCIgYW5kIFwiTlwiLlxuXHQqL1xuXHRjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzID0ge307XG5cblx0LyoqXG5cdCogU2VsZWN0cyBhIGNvbG9yIGZvciBhIGRlYnVnIG5hbWVzcGFjZVxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UgVGhlIG5hbWVzcGFjZSBzdHJpbmcgZm9yIHRoZSBkZWJ1ZyBpbnN0YW5jZSB0byBiZSBjb2xvcmVkXG5cdCogQHJldHVybiB7TnVtYmVyfFN0cmluZ30gQW4gQU5TSSBjb2xvciBjb2RlIGZvciB0aGUgZ2l2ZW4gbmFtZXNwYWNlXG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuXHRcdGxldCBoYXNoID0gMDtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXNwYWNlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcblx0XHRcdGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNyZWF0ZURlYnVnLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGNyZWF0ZURlYnVnLmNvbG9ycy5sZW5ndGhdO1xuXHR9XG5cdGNyZWF0ZURlYnVnLnNlbGVjdENvbG9yID0gc2VsZWN0Q29sb3I7XG5cblx0LyoqXG5cdCogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG5cdCogQHJldHVybiB7RnVuY3Rpb259XG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cdFx0bGV0IHByZXZUaW1lO1xuXHRcdGxldCBlbmFibGVPdmVycmlkZSA9IG51bGw7XG5cdFx0bGV0IG5hbWVzcGFjZXNDYWNoZTtcblx0XHRsZXQgZW5hYmxlZENhY2hlO1xuXG5cdFx0ZnVuY3Rpb24gZGVidWcoLi4uYXJncykge1xuXHRcdFx0Ly8gRGlzYWJsZWQ/XG5cdFx0XHRpZiAoIWRlYnVnLmVuYWJsZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBzZWxmID0gZGVidWc7XG5cblx0XHRcdC8vIFNldCBgZGlmZmAgdGltZXN0YW1wXG5cdFx0XHRjb25zdCBjdXJyID0gTnVtYmVyKG5ldyBEYXRlKCkpO1xuXHRcdFx0Y29uc3QgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuXHRcdFx0c2VsZi5kaWZmID0gbXM7XG5cdFx0XHRzZWxmLnByZXYgPSBwcmV2VGltZTtcblx0XHRcdHNlbGYuY3VyciA9IGN1cnI7XG5cdFx0XHRwcmV2VGltZSA9IGN1cnI7XG5cblx0XHRcdGFyZ3NbMF0gPSBjcmVhdGVEZWJ1Zy5jb2VyY2UoYXJnc1swXSk7XG5cblx0XHRcdGlmICh0eXBlb2YgYXJnc1swXSAhPT0gJ3N0cmluZycpIHtcblx0XHRcdFx0Ly8gQW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cblx0XHRcdFx0YXJncy51bnNoaWZ0KCclTycpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuXHRcdFx0bGV0IGluZGV4ID0gMDtcblx0XHRcdGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCAobWF0Y2gsIGZvcm1hdCkgPT4ge1xuXHRcdFx0XHQvLyBJZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG5cdFx0XHRcdGlmIChtYXRjaCA9PT0gJyUlJykge1xuXHRcdFx0XHRcdHJldHVybiAnJSc7XG5cdFx0XHRcdH1cblx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0Y29uc3QgZm9ybWF0dGVyID0gY3JlYXRlRGVidWcuZm9ybWF0dGVyc1tmb3JtYXRdO1xuXHRcdFx0XHRpZiAodHlwZW9mIGZvcm1hdHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdGNvbnN0IHZhbCA9IGFyZ3NbaW5kZXhdO1xuXHRcdFx0XHRcdG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuXHRcdFx0XHRcdC8vIE5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcblx0XHRcdFx0XHRhcmdzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0aW5kZXgtLTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gQXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcblx0XHRcdGNyZWF0ZURlYnVnLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuXHRcdFx0Y29uc3QgbG9nRm4gPSBzZWxmLmxvZyB8fCBjcmVhdGVEZWJ1Zy5sb2c7XG5cdFx0XHRsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcblx0XHR9XG5cblx0XHRkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG5cdFx0ZGVidWcudXNlQ29sb3JzID0gY3JlYXRlRGVidWcudXNlQ29sb3JzKCk7XG5cdFx0ZGVidWcuY29sb3IgPSBjcmVhdGVEZWJ1Zy5zZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuXHRcdGRlYnVnLmV4dGVuZCA9IGV4dGVuZDtcblx0XHRkZWJ1Zy5kZXN0cm95ID0gY3JlYXRlRGVidWcuZGVzdHJveTsgLy8gWFhYIFRlbXBvcmFyeS4gV2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuXG5cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZGVidWcsICdlbmFibGVkJywge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG5cdFx0XHRnZXQ6ICgpID0+IHtcblx0XHRcdFx0aWYgKGVuYWJsZU92ZXJyaWRlICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVuYWJsZU92ZXJyaWRlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChuYW1lc3BhY2VzQ2FjaGUgIT09IGNyZWF0ZURlYnVnLm5hbWVzcGFjZXMpIHtcblx0XHRcdFx0XHRuYW1lc3BhY2VzQ2FjaGUgPSBjcmVhdGVEZWJ1Zy5uYW1lc3BhY2VzO1xuXHRcdFx0XHRcdGVuYWJsZWRDYWNoZSA9IGNyZWF0ZURlYnVnLmVuYWJsZWQobmFtZXNwYWNlKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbmFibGVkQ2FjaGU7XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiB2ID0+IHtcblx0XHRcdFx0ZW5hYmxlT3ZlcnJpZGUgPSB2O1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gRW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcblx0XHRpZiAodHlwZW9mIGNyZWF0ZURlYnVnLmluaXQgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdGNyZWF0ZURlYnVnLmluaXQoZGVidWcpO1xuXHRcdH1cblxuXHRcdHJldHVybiBkZWJ1Zztcblx0fVxuXG5cdGZ1bmN0aW9uIGV4dGVuZChuYW1lc3BhY2UsIGRlbGltaXRlcikge1xuXHRcdGNvbnN0IG5ld0RlYnVnID0gY3JlYXRlRGVidWcodGhpcy5uYW1lc3BhY2UgKyAodHlwZW9mIGRlbGltaXRlciA9PT0gJ3VuZGVmaW5lZCcgPyAnOicgOiBkZWxpbWl0ZXIpICsgbmFtZXNwYWNlKTtcblx0XHRuZXdEZWJ1Zy5sb2cgPSB0aGlzLmxvZztcblx0XHRyZXR1cm4gbmV3RGVidWc7XG5cdH1cblxuXHQvKipcblx0KiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG5cdCogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcblx0XHRjcmVhdGVEZWJ1Zy5zYXZlKG5hbWVzcGFjZXMpO1xuXHRcdGNyZWF0ZURlYnVnLm5hbWVzcGFjZXMgPSBuYW1lc3BhY2VzO1xuXG5cdFx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0XHRjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuXG5cdFx0bGV0IGk7XG5cdFx0Y29uc3Qgc3BsaXQgPSAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnID8gbmFtZXNwYWNlcyA6ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuXHRcdGNvbnN0IGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuXHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKCFzcGxpdFtpXSkge1xuXHRcdFx0XHQvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0bmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG5cblx0XHRcdGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc2xpY2UoMSkgKyAnJCcpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNyZWF0ZURlYnVnLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG5cdCpcblx0KiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBkaXNhYmxlKCkge1xuXHRcdGNvbnN0IG5hbWVzcGFjZXMgPSBbXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5uYW1lcy5tYXAodG9OYW1lc3BhY2UpLFxuXHRcdFx0Li4uY3JlYXRlRGVidWcuc2tpcHMubWFwKHRvTmFtZXNwYWNlKS5tYXAobmFtZXNwYWNlID0+ICctJyArIG5hbWVzcGFjZSlcblx0XHRdLmpvaW4oJywnKTtcblx0XHRjcmVhdGVEZWJ1Zy5lbmFibGUoJycpO1xuXHRcdHJldHVybiBuYW1lc3BhY2VzO1xuXHR9XG5cblx0LyoqXG5cdCogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVcblx0KiBAcmV0dXJuIHtCb29sZWFufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuXHRcdGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0bGV0IGk7XG5cdFx0bGV0IGxlbjtcblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoY3JlYXRlRGVidWcuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmIChjcmVhdGVEZWJ1Zy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQqIENvbnZlcnQgcmVnZXhwIHRvIG5hbWVzcGFjZVxuXHQqXG5cdCogQHBhcmFtIHtSZWdFeHB9IHJlZ3hlcFxuXHQqIEByZXR1cm4ge1N0cmluZ30gbmFtZXNwYWNlXG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIHRvTmFtZXNwYWNlKHJlZ2V4cCkge1xuXHRcdHJldHVybiByZWdleHAudG9TdHJpbmcoKVxuXHRcdFx0LnN1YnN0cmluZygyLCByZWdleHAudG9TdHJpbmcoKS5sZW5ndGggLSAyKVxuXHRcdFx0LnJlcGxhY2UoL1xcLlxcKlxcPyQvLCAnKicpO1xuXHR9XG5cblx0LyoqXG5cdCogQ29lcmNlIGB2YWxgLlxuXHQqXG5cdCogQHBhcmFtIHtNaXhlZH0gdmFsXG5cdCogQHJldHVybiB7TWl4ZWR9XG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcblx0XHRpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHtcblx0XHRcdHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG5cdFx0fVxuXHRcdHJldHVybiB2YWw7XG5cdH1cblxuXHQvKipcblx0KiBYWFggRE8gTk9UIFVTRS4gVGhpcyBpcyBhIHRlbXBvcmFyeSBzdHViIGZ1bmN0aW9uLlxuXHQqIFhYWCBJdCBXSUxMIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS5cblx0Ki9cblx0ZnVuY3Rpb24gZGVzdHJveSgpIHtcblx0XHRjb25zb2xlLndhcm4oJ0luc3RhbmNlIG1ldGhvZCBgZGVidWcuZGVzdHJveSgpYCBpcyBkZXByZWNhdGVkIGFuZCBubyBsb25nZXIgZG9lcyBhbnl0aGluZy4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgYGRlYnVnYC4nKTtcblx0fVxuXG5cdGNyZWF0ZURlYnVnLmVuYWJsZShjcmVhdGVEZWJ1Zy5sb2FkKCkpO1xuXG5cdHJldHVybiBjcmVhdGVEZWJ1Zztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXR1cDtcbiIsICIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSBsb2NhbHN0b3JhZ2UoKTtcbmV4cG9ydHMuZGVzdHJveSA9ICgoKSA9PiB7XG5cdGxldCB3YXJuZWQgPSBmYWxzZTtcblxuXHRyZXR1cm4gKCkgPT4ge1xuXHRcdGlmICghd2FybmVkKSB7XG5cdFx0XHR3YXJuZWQgPSB0cnVlO1xuXHRcdFx0Y29uc29sZS53YXJuKCdJbnN0YW5jZSBtZXRob2QgYGRlYnVnLmRlc3Ryb3koKWAgaXMgZGVwcmVjYXRlZCBhbmQgbm8gbG9uZ2VyIGRvZXMgYW55dGhpbmcuIEl0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIGBkZWJ1Z2AuJyk7XG5cdFx0fVxuXHR9O1xufSkoKTtcblxuLyoqXG4gKiBDb2xvcnMuXG4gKi9cblxuZXhwb3J0cy5jb2xvcnMgPSBbXG5cdCcjMDAwMENDJyxcblx0JyMwMDAwRkYnLFxuXHQnIzAwMzNDQycsXG5cdCcjMDAzM0ZGJyxcblx0JyMwMDY2Q0MnLFxuXHQnIzAwNjZGRicsXG5cdCcjMDA5OUNDJyxcblx0JyMwMDk5RkYnLFxuXHQnIzAwQ0MwMCcsXG5cdCcjMDBDQzMzJyxcblx0JyMwMENDNjYnLFxuXHQnIzAwQ0M5OScsXG5cdCcjMDBDQ0NDJyxcblx0JyMwMENDRkYnLFxuXHQnIzMzMDBDQycsXG5cdCcjMzMwMEZGJyxcblx0JyMzMzMzQ0MnLFxuXHQnIzMzMzNGRicsXG5cdCcjMzM2NkNDJyxcblx0JyMzMzY2RkYnLFxuXHQnIzMzOTlDQycsXG5cdCcjMzM5OUZGJyxcblx0JyMzM0NDMDAnLFxuXHQnIzMzQ0MzMycsXG5cdCcjMzNDQzY2Jyxcblx0JyMzM0NDOTknLFxuXHQnIzMzQ0NDQycsXG5cdCcjMzNDQ0ZGJyxcblx0JyM2NjAwQ0MnLFxuXHQnIzY2MDBGRicsXG5cdCcjNjYzM0NDJyxcblx0JyM2NjMzRkYnLFxuXHQnIzY2Q0MwMCcsXG5cdCcjNjZDQzMzJyxcblx0JyM5OTAwQ0MnLFxuXHQnIzk5MDBGRicsXG5cdCcjOTkzM0NDJyxcblx0JyM5OTMzRkYnLFxuXHQnIzk5Q0MwMCcsXG5cdCcjOTlDQzMzJyxcblx0JyNDQzAwMDAnLFxuXHQnI0NDMDAzMycsXG5cdCcjQ0MwMDY2Jyxcblx0JyNDQzAwOTknLFxuXHQnI0NDMDBDQycsXG5cdCcjQ0MwMEZGJyxcblx0JyNDQzMzMDAnLFxuXHQnI0NDMzMzMycsXG5cdCcjQ0MzMzY2Jyxcblx0JyNDQzMzOTknLFxuXHQnI0NDMzNDQycsXG5cdCcjQ0MzM0ZGJyxcblx0JyNDQzY2MDAnLFxuXHQnI0NDNjYzMycsXG5cdCcjQ0M5OTAwJyxcblx0JyNDQzk5MzMnLFxuXHQnI0NDQ0MwMCcsXG5cdCcjQ0NDQzMzJyxcblx0JyNGRjAwMDAnLFxuXHQnI0ZGMDAzMycsXG5cdCcjRkYwMDY2Jyxcblx0JyNGRjAwOTknLFxuXHQnI0ZGMDBDQycsXG5cdCcjRkYwMEZGJyxcblx0JyNGRjMzMDAnLFxuXHQnI0ZGMzMzMycsXG5cdCcjRkYzMzY2Jyxcblx0JyNGRjMzOTknLFxuXHQnI0ZGMzNDQycsXG5cdCcjRkYzM0ZGJyxcblx0JyNGRjY2MDAnLFxuXHQnI0ZGNjYzMycsXG5cdCcjRkY5OTAwJyxcblx0JyNGRjk5MzMnLFxuXHQnI0ZGQ0MwMCcsXG5cdCcjRkZDQzMzJ1xuXTtcblxuLyoqXG4gKiBDdXJyZW50bHkgb25seSBXZWJLaXQtYmFzZWQgV2ViIEluc3BlY3RvcnMsIEZpcmVmb3ggPj0gdjMxLFxuICogYW5kIHRoZSBGaXJlYnVnIGV4dGVuc2lvbiAoYW55IEZpcmVmb3ggdmVyc2lvbikgYXJlIGtub3duXG4gKiB0byBzdXBwb3J0IFwiJWNcIiBDU1MgY3VzdG9taXphdGlvbnMuXG4gKlxuICogVE9ETzogYWRkIGEgYGxvY2FsU3RvcmFnZWAgdmFyaWFibGUgdG8gZXhwbGljaXRseSBlbmFibGUvZGlzYWJsZSBjb2xvcnNcbiAqL1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuXHQvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG5cdC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG5cdC8vIGV4cGxpY2l0bHlcblx0aWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmICh3aW5kb3cucHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInIHx8IHdpbmRvdy5wcm9jZXNzLl9fbndqcykpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cblx0aWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Ly8gSXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcblx0Ly8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcblx0cmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG5cdFx0Ly8gSXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuXHRcdCh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG5cdFx0Ly8gSXMgZmlyZWZveCA+PSB2MzE/XG5cdFx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG5cdFx0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG5cdFx0Ly8gRG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuXHRcdCh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG5cdGFyZ3NbMF0gPSAodGhpcy51c2VDb2xvcnMgPyAnJWMnIDogJycpICtcblx0XHR0aGlzLm5hbWVzcGFjZSArXG5cdFx0KHRoaXMudXNlQ29sb3JzID8gJyAlYycgOiAnICcpICtcblx0XHRhcmdzWzBdICtcblx0XHQodGhpcy51c2VDb2xvcnMgPyAnJWMgJyA6ICcgJykgK1xuXHRcdCcrJyArIG1vZHVsZS5leHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cblx0aWYgKCF0aGlzLnVzZUNvbG9ycykge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGNvbnN0IGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuXHRhcmdzLnNwbGljZSgxLCAwLCBjLCAnY29sb3I6IGluaGVyaXQnKTtcblxuXHQvLyBUaGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuXHQvLyBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciBiZWZvcmUgb3IgYWZ0ZXIgdGhlICVjLCBzbyB3ZSBuZWVkIHRvXG5cdC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50b1xuXHRsZXQgaW5kZXggPSAwO1xuXHRsZXQgbGFzdEMgPSAwO1xuXHRhcmdzWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgbWF0Y2ggPT4ge1xuXHRcdGlmIChtYXRjaCA9PT0gJyUlJykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpbmRleCsrO1xuXHRcdGlmIChtYXRjaCA9PT0gJyVjJykge1xuXHRcdFx0Ly8gV2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG5cdFx0XHQvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuXHRcdFx0bGFzdEMgPSBpbmRleDtcblx0XHR9XG5cdH0pO1xuXG5cdGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcbn1cblxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmRlYnVnKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5kZWJ1Z2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICogSWYgYGNvbnNvbGUuZGVidWdgIGlzIG5vdCBhdmFpbGFibGUsIGZhbGxzIGJhY2tcbiAqIHRvIGBjb25zb2xlLmxvZ2AuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZXhwb3J0cy5sb2cgPSBjb25zb2xlLmRlYnVnIHx8IGNvbnNvbGUubG9nIHx8ICgoKSA9PiB7fSk7XG5cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcblx0dHJ5IHtcblx0XHRpZiAobmFtZXNwYWNlcykge1xuXHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnNldEl0ZW0oJ2RlYnVnJywgbmFtZXNwYWNlcyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuXHRcdH1cblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cbn1cblxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbG9hZCgpIHtcblx0bGV0IHI7XG5cdHRyeSB7XG5cdFx0ciA9IGV4cG9ydHMuc3RvcmFnZS5nZXRJdGVtKCdkZWJ1ZycpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxuXG5cdC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcblx0aWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG5cdFx0ciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuXHR9XG5cblx0cmV0dXJuIHI7XG59XG5cbi8qKlxuICogTG9jYWxzdG9yYWdlIGF0dGVtcHRzIHRvIHJldHVybiB0aGUgbG9jYWxzdG9yYWdlLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugc2FmYXJpIHRocm93c1xuICogd2hlbiBhIHVzZXIgZGlzYWJsZXMgY29va2llcy9sb2NhbHN0b3JhZ2VcbiAqIGFuZCB5b3UgYXR0ZW1wdCB0byBhY2Nlc3MgaXQuXG4gKlxuICogQHJldHVybiB7TG9jYWxTdG9yYWdlfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCkge1xuXHR0cnkge1xuXHRcdC8vIFRWTUxLaXQgKEFwcGxlIFRWIEpTIFJ1bnRpbWUpIGRvZXMgbm90IGhhdmUgYSB3aW5kb3cgb2JqZWN0LCBqdXN0IGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHRcblx0XHQvLyBUaGUgQnJvd3NlciBhbHNvIGhhcyBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0LlxuXHRcdHJldHVybiBsb2NhbFN0b3JhZ2U7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9jb21tb24nKShleHBvcnRzKTtcblxuY29uc3Qge2Zvcm1hdHRlcnN9ID0gbW9kdWxlLmV4cG9ydHM7XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uICh2KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdHJldHVybiAnW1VuZXhwZWN0ZWRKU09OUGFyc2VFcnJvcl06ICcgKyBlcnJvci5tZXNzYWdlO1xuXHR9XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSAoZmxhZywgYXJndiA9IHByb2Nlc3MuYXJndikgPT4ge1xuXHRjb25zdCBwcmVmaXggPSBmbGFnLnN0YXJ0c1dpdGgoJy0nKSA/ICcnIDogKGZsYWcubGVuZ3RoID09PSAxID8gJy0nIDogJy0tJyk7XG5cdGNvbnN0IHBvc2l0aW9uID0gYXJndi5pbmRleE9mKHByZWZpeCArIGZsYWcpO1xuXHRjb25zdCB0ZXJtaW5hdG9yUG9zaXRpb24gPSBhcmd2LmluZGV4T2YoJy0tJyk7XG5cdHJldHVybiBwb3NpdGlvbiAhPT0gLTEgJiYgKHRlcm1pbmF0b3JQb3NpdGlvbiA9PT0gLTEgfHwgcG9zaXRpb24gPCB0ZXJtaW5hdG9yUG9zaXRpb24pO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5jb25zdCBvcyA9IHJlcXVpcmUoJ29zJyk7XG5jb25zdCB0dHkgPSByZXF1aXJlKCd0dHknKTtcbmNvbnN0IGhhc0ZsYWcgPSByZXF1aXJlKCdoYXMtZmxhZycpO1xuXG5jb25zdCB7ZW52fSA9IHByb2Nlc3M7XG5cbmxldCBmbGFnRm9yY2VDb2xvcjtcbmlmIChoYXNGbGFnKCduby1jb2xvcicpIHx8XG5cdGhhc0ZsYWcoJ25vLWNvbG9ycycpIHx8XG5cdGhhc0ZsYWcoJ2NvbG9yPWZhbHNlJykgfHxcblx0aGFzRmxhZygnY29sb3I9bmV2ZXInKSkge1xuXHRmbGFnRm9yY2VDb2xvciA9IDA7XG59IGVsc2UgaWYgKGhhc0ZsYWcoJ2NvbG9yJykgfHxcblx0aGFzRmxhZygnY29sb3JzJykgfHxcblx0aGFzRmxhZygnY29sb3I9dHJ1ZScpIHx8XG5cdGhhc0ZsYWcoJ2NvbG9yPWFsd2F5cycpKSB7XG5cdGZsYWdGb3JjZUNvbG9yID0gMTtcbn1cblxuZnVuY3Rpb24gZW52Rm9yY2VDb2xvcigpIHtcblx0aWYgKCdGT1JDRV9DT0xPUicgaW4gZW52KSB7XG5cdFx0aWYgKGVudi5GT1JDRV9DT0xPUiA9PT0gJ3RydWUnKSB7XG5cdFx0XHRyZXR1cm4gMTtcblx0XHR9XG5cblx0XHRpZiAoZW52LkZPUkNFX0NPTE9SID09PSAnZmFsc2UnKSB7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZW52LkZPUkNFX0NPTE9SLmxlbmd0aCA9PT0gMCA/IDEgOiBNYXRoLm1pbihOdW1iZXIucGFyc2VJbnQoZW52LkZPUkNFX0NPTE9SLCAxMCksIDMpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZUxldmVsKGxldmVsKSB7XG5cdGlmIChsZXZlbCA9PT0gMCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0bGV2ZWwsXG5cdFx0aGFzQmFzaWM6IHRydWUsXG5cdFx0aGFzMjU2OiBsZXZlbCA+PSAyLFxuXHRcdGhhczE2bTogbGV2ZWwgPj0gM1xuXHR9O1xufVxuXG5mdW5jdGlvbiBzdXBwb3J0c0NvbG9yKGhhdmVTdHJlYW0sIHtzdHJlYW1Jc1RUWSwgc25pZmZGbGFncyA9IHRydWV9ID0ge30pIHtcblx0Y29uc3Qgbm9GbGFnRm9yY2VDb2xvciA9IGVudkZvcmNlQ29sb3IoKTtcblx0aWYgKG5vRmxhZ0ZvcmNlQ29sb3IgIT09IHVuZGVmaW5lZCkge1xuXHRcdGZsYWdGb3JjZUNvbG9yID0gbm9GbGFnRm9yY2VDb2xvcjtcblx0fVxuXG5cdGNvbnN0IGZvcmNlQ29sb3IgPSBzbmlmZkZsYWdzID8gZmxhZ0ZvcmNlQ29sb3IgOiBub0ZsYWdGb3JjZUNvbG9yO1xuXG5cdGlmIChmb3JjZUNvbG9yID09PSAwKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRpZiAoc25pZmZGbGFncykge1xuXHRcdGlmIChoYXNGbGFnKCdjb2xvcj0xNm0nKSB8fFxuXHRcdFx0aGFzRmxhZygnY29sb3I9ZnVsbCcpIHx8XG5cdFx0XHRoYXNGbGFnKCdjb2xvcj10cnVlY29sb3InKSkge1xuXHRcdFx0cmV0dXJuIDM7XG5cdFx0fVxuXG5cdFx0aWYgKGhhc0ZsYWcoJ2NvbG9yPTI1NicpKSB7XG5cdFx0XHRyZXR1cm4gMjtcblx0XHR9XG5cdH1cblxuXHRpZiAoaGF2ZVN0cmVhbSAmJiAhc3RyZWFtSXNUVFkgJiYgZm9yY2VDb2xvciA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRjb25zdCBtaW4gPSBmb3JjZUNvbG9yIHx8IDA7XG5cblx0aWYgKGVudi5URVJNID09PSAnZHVtYicpIHtcblx0XHRyZXR1cm4gbWluO1xuXHR9XG5cblx0aWYgKHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicpIHtcblx0XHQvLyBXaW5kb3dzIDEwIGJ1aWxkIDEwNTg2IGlzIHRoZSBmaXJzdCBXaW5kb3dzIHJlbGVhc2UgdGhhdCBzdXBwb3J0cyAyNTYgY29sb3JzLlxuXHRcdC8vIFdpbmRvd3MgMTAgYnVpbGQgMTQ5MzEgaXMgdGhlIGZpcnN0IHJlbGVhc2UgdGhhdCBzdXBwb3J0cyAxNm0vVHJ1ZUNvbG9yLlxuXHRcdGNvbnN0IG9zUmVsZWFzZSA9IG9zLnJlbGVhc2UoKS5zcGxpdCgnLicpO1xuXHRcdGlmIChcblx0XHRcdE51bWJlcihvc1JlbGVhc2VbMF0pID49IDEwICYmXG5cdFx0XHROdW1iZXIob3NSZWxlYXNlWzJdKSA+PSAxMDU4NlxuXHRcdCkge1xuXHRcdFx0cmV0dXJuIE51bWJlcihvc1JlbGVhc2VbMl0pID49IDE0OTMxID8gMyA6IDI7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIDE7XG5cdH1cblxuXHRpZiAoJ0NJJyBpbiBlbnYpIHtcblx0XHRpZiAoWydUUkFWSVMnLCAnQ0lSQ0xFQ0knLCAnQVBQVkVZT1InLCAnR0lUTEFCX0NJJywgJ0dJVEhVQl9BQ1RJT05TJywgJ0JVSUxES0lURScsICdEUk9ORSddLnNvbWUoc2lnbiA9PiBzaWduIGluIGVudikgfHwgZW52LkNJX05BTUUgPT09ICdjb2Rlc2hpcCcpIHtcblx0XHRcdHJldHVybiAxO1xuXHRcdH1cblxuXHRcdHJldHVybiBtaW47XG5cdH1cblxuXHRpZiAoJ1RFQU1DSVRZX1ZFUlNJT04nIGluIGVudikge1xuXHRcdHJldHVybiAvXig5XFwuKDAqWzEtOV1cXGQqKVxcLnxcXGR7Mix9XFwuKS8udGVzdChlbnYuVEVBTUNJVFlfVkVSU0lPTikgPyAxIDogMDtcblx0fVxuXG5cdGlmIChlbnYuQ09MT1JURVJNID09PSAndHJ1ZWNvbG9yJykge1xuXHRcdHJldHVybiAzO1xuXHR9XG5cblx0aWYgKCdURVJNX1BST0dSQU0nIGluIGVudikge1xuXHRcdGNvbnN0IHZlcnNpb24gPSBOdW1iZXIucGFyc2VJbnQoKGVudi5URVJNX1BST0dSQU1fVkVSU0lPTiB8fCAnJykuc3BsaXQoJy4nKVswXSwgMTApO1xuXG5cdFx0c3dpdGNoIChlbnYuVEVSTV9QUk9HUkFNKSB7XG5cdFx0XHRjYXNlICdpVGVybS5hcHAnOlxuXHRcdFx0XHRyZXR1cm4gdmVyc2lvbiA+PSAzID8gMyA6IDI7XG5cdFx0XHRjYXNlICdBcHBsZV9UZXJtaW5hbCc6XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0Ly8gTm8gZGVmYXVsdFxuXHRcdH1cblx0fVxuXG5cdGlmICgvLTI1Nihjb2xvcik/JC9pLnRlc3QoZW52LlRFUk0pKSB7XG5cdFx0cmV0dXJuIDI7XG5cdH1cblxuXHRpZiAoL15zY3JlZW58Xnh0ZXJtfF52dDEwMHxednQyMjB8XnJ4dnR8Y29sb3J8YW5zaXxjeWd3aW58bGludXgvaS50ZXN0KGVudi5URVJNKSkge1xuXHRcdHJldHVybiAxO1xuXHR9XG5cblx0aWYgKCdDT0xPUlRFUk0nIGluIGVudikge1xuXHRcdHJldHVybiAxO1xuXHR9XG5cblx0cmV0dXJuIG1pbjtcbn1cblxuZnVuY3Rpb24gZ2V0U3VwcG9ydExldmVsKHN0cmVhbSwgb3B0aW9ucyA9IHt9KSB7XG5cdGNvbnN0IGxldmVsID0gc3VwcG9ydHNDb2xvcihzdHJlYW0sIHtcblx0XHRzdHJlYW1Jc1RUWTogc3RyZWFtICYmIHN0cmVhbS5pc1RUWSxcblx0XHQuLi5vcHRpb25zXG5cdH0pO1xuXG5cdHJldHVybiB0cmFuc2xhdGVMZXZlbChsZXZlbCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRzdXBwb3J0c0NvbG9yOiBnZXRTdXBwb3J0TGV2ZWwsXG5cdHN0ZG91dDogZ2V0U3VwcG9ydExldmVsKHtpc1RUWTogdHR5LmlzYXR0eSgxKX0pLFxuXHRzdGRlcnI6IGdldFN1cHBvcnRMZXZlbCh7aXNUVFk6IHR0eS5pc2F0dHkoMil9KVxufTtcbiIsICIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxuY29uc3QgdHR5ID0gcmVxdWlyZSgndHR5Jyk7XG5jb25zdCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIE5vZGUuanMgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICovXG5cbmV4cG9ydHMuaW5pdCA9IGluaXQ7XG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5kZXN0cm95ID0gdXRpbC5kZXByZWNhdGUoXG5cdCgpID0+IHt9LFxuXHQnSW5zdGFuY2UgbWV0aG9kIGBkZWJ1Zy5kZXN0cm95KClgIGlzIGRlcHJlY2F0ZWQgYW5kIG5vIGxvbmdlciBkb2VzIGFueXRoaW5nLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBgZGVidWdgLidcbik7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gWzYsIDIsIDMsIDQsIDUsIDFdO1xuXG50cnkge1xuXHQvLyBPcHRpb25hbCBkZXBlbmRlbmN5IChhcyBpbiwgZG9lc24ndCBuZWVkIHRvIGJlIGluc3RhbGxlZCwgTk9UIGxpa2Ugb3B0aW9uYWxEZXBlbmRlbmNpZXMgaW4gcGFja2FnZS5qc29uKVxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzXG5cdGNvbnN0IHN1cHBvcnRzQ29sb3IgPSByZXF1aXJlKCdzdXBwb3J0cy1jb2xvcicpO1xuXG5cdGlmIChzdXBwb3J0c0NvbG9yICYmIChzdXBwb3J0c0NvbG9yLnN0ZGVyciB8fCBzdXBwb3J0c0NvbG9yKS5sZXZlbCA+PSAyKSB7XG5cdFx0ZXhwb3J0cy5jb2xvcnMgPSBbXG5cdFx0XHQyMCxcblx0XHRcdDIxLFxuXHRcdFx0MjYsXG5cdFx0XHQyNyxcblx0XHRcdDMyLFxuXHRcdFx0MzMsXG5cdFx0XHQzOCxcblx0XHRcdDM5LFxuXHRcdFx0NDAsXG5cdFx0XHQ0MSxcblx0XHRcdDQyLFxuXHRcdFx0NDMsXG5cdFx0XHQ0NCxcblx0XHRcdDQ1LFxuXHRcdFx0NTYsXG5cdFx0XHQ1Nyxcblx0XHRcdDYyLFxuXHRcdFx0NjMsXG5cdFx0XHQ2OCxcblx0XHRcdDY5LFxuXHRcdFx0NzQsXG5cdFx0XHQ3NSxcblx0XHRcdDc2LFxuXHRcdFx0NzcsXG5cdFx0XHQ3OCxcblx0XHRcdDc5LFxuXHRcdFx0ODAsXG5cdFx0XHQ4MSxcblx0XHRcdDkyLFxuXHRcdFx0OTMsXG5cdFx0XHQ5OCxcblx0XHRcdDk5LFxuXHRcdFx0MTEyLFxuXHRcdFx0MTEzLFxuXHRcdFx0MTI4LFxuXHRcdFx0MTI5LFxuXHRcdFx0MTM0LFxuXHRcdFx0MTM1LFxuXHRcdFx0MTQ4LFxuXHRcdFx0MTQ5LFxuXHRcdFx0MTYwLFxuXHRcdFx0MTYxLFxuXHRcdFx0MTYyLFxuXHRcdFx0MTYzLFxuXHRcdFx0MTY0LFxuXHRcdFx0MTY1LFxuXHRcdFx0MTY2LFxuXHRcdFx0MTY3LFxuXHRcdFx0MTY4LFxuXHRcdFx0MTY5LFxuXHRcdFx0MTcwLFxuXHRcdFx0MTcxLFxuXHRcdFx0MTcyLFxuXHRcdFx0MTczLFxuXHRcdFx0MTc4LFxuXHRcdFx0MTc5LFxuXHRcdFx0MTg0LFxuXHRcdFx0MTg1LFxuXHRcdFx0MTk2LFxuXHRcdFx0MTk3LFxuXHRcdFx0MTk4LFxuXHRcdFx0MTk5LFxuXHRcdFx0MjAwLFxuXHRcdFx0MjAxLFxuXHRcdFx0MjAyLFxuXHRcdFx0MjAzLFxuXHRcdFx0MjA0LFxuXHRcdFx0MjA1LFxuXHRcdFx0MjA2LFxuXHRcdFx0MjA3LFxuXHRcdFx0MjA4LFxuXHRcdFx0MjA5LFxuXHRcdFx0MjE0LFxuXHRcdFx0MjE1LFxuXHRcdFx0MjIwLFxuXHRcdFx0MjIxXG5cdFx0XTtcblx0fVxufSBjYXRjaCAoZXJyb3IpIHtcblx0Ly8gU3dhbGxvdyAtIHdlIG9ubHkgY2FyZSBpZiBgc3VwcG9ydHMtY29sb3JgIGlzIGF2YWlsYWJsZTsgaXQgZG9lc24ndCBoYXZlIHRvIGJlLlxufVxuXG4vKipcbiAqIEJ1aWxkIHVwIHRoZSBkZWZhdWx0IGBpbnNwZWN0T3B0c2Agb2JqZWN0IGZyb20gdGhlIGVudmlyb25tZW50IHZhcmlhYmxlcy5cbiAqXG4gKiAgICQgREVCVUdfQ09MT1JTPW5vIERFQlVHX0RFUFRIPTEwIERFQlVHX1NIT1dfSElEREVOPWVuYWJsZWQgbm9kZSBzY3JpcHQuanNcbiAqL1xuXG5leHBvcnRzLmluc3BlY3RPcHRzID0gT2JqZWN0LmtleXMocHJvY2Vzcy5lbnYpLmZpbHRlcihrZXkgPT4ge1xuXHRyZXR1cm4gL15kZWJ1Z18vaS50ZXN0KGtleSk7XG59KS5yZWR1Y2UoKG9iaiwga2V5KSA9PiB7XG5cdC8vIENhbWVsLWNhc2Vcblx0Y29uc3QgcHJvcCA9IGtleVxuXHRcdC5zdWJzdHJpbmcoNilcblx0XHQudG9Mb3dlckNhc2UoKVxuXHRcdC5yZXBsYWNlKC9fKFthLXpdKS9nLCAoXywgaykgPT4ge1xuXHRcdFx0cmV0dXJuIGsudG9VcHBlckNhc2UoKTtcblx0XHR9KTtcblxuXHQvLyBDb2VyY2Ugc3RyaW5nIHZhbHVlIGludG8gSlMgdmFsdWVcblx0bGV0IHZhbCA9IHByb2Nlc3MuZW52W2tleV07XG5cdGlmICgvXih5ZXN8b258dHJ1ZXxlbmFibGVkKSQvaS50ZXN0KHZhbCkpIHtcblx0XHR2YWwgPSB0cnVlO1xuXHR9IGVsc2UgaWYgKC9eKG5vfG9mZnxmYWxzZXxkaXNhYmxlZCkkL2kudGVzdCh2YWwpKSB7XG5cdFx0dmFsID0gZmFsc2U7XG5cdH0gZWxzZSBpZiAodmFsID09PSAnbnVsbCcpIHtcblx0XHR2YWwgPSBudWxsO1xuXHR9IGVsc2Uge1xuXHRcdHZhbCA9IE51bWJlcih2YWwpO1xuXHR9XG5cblx0b2JqW3Byb3BdID0gdmFsO1xuXHRyZXR1cm4gb2JqO1xufSwge30pO1xuXG4vKipcbiAqIElzIHN0ZG91dCBhIFRUWT8gQ29sb3JlZCBvdXRwdXQgaXMgZW5hYmxlZCB3aGVuIGB0cnVlYC5cbiAqL1xuXG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG5cdHJldHVybiAnY29sb3JzJyBpbiBleHBvcnRzLmluc3BlY3RPcHRzID9cblx0XHRCb29sZWFuKGV4cG9ydHMuaW5zcGVjdE9wdHMuY29sb3JzKSA6XG5cdFx0dHR5LmlzYXR0eShwcm9jZXNzLnN0ZGVyci5mZCk7XG59XG5cbi8qKlxuICogQWRkcyBBTlNJIGNvbG9yIGVzY2FwZSBjb2RlcyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG5cdGNvbnN0IHtuYW1lc3BhY2U6IG5hbWUsIHVzZUNvbG9yc30gPSB0aGlzO1xuXG5cdGlmICh1c2VDb2xvcnMpIHtcblx0XHRjb25zdCBjID0gdGhpcy5jb2xvcjtcblx0XHRjb25zdCBjb2xvckNvZGUgPSAnXFx1MDAxQlszJyArIChjIDwgOCA/IGMgOiAnODs1OycgKyBjKTtcblx0XHRjb25zdCBwcmVmaXggPSBgICAke2NvbG9yQ29kZX07MW0ke25hbWV9IFxcdTAwMUJbMG1gO1xuXG5cdFx0YXJnc1swXSA9IHByZWZpeCArIGFyZ3NbMF0uc3BsaXQoJ1xcbicpLmpvaW4oJ1xcbicgKyBwcmVmaXgpO1xuXHRcdGFyZ3MucHVzaChjb2xvckNvZGUgKyAnbSsnICsgbW9kdWxlLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKSArICdcXHUwMDFCWzBtJyk7XG5cdH0gZWxzZSB7XG5cdFx0YXJnc1swXSA9IGdldERhdGUoKSArIG5hbWUgKyAnICcgKyBhcmdzWzBdO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGdldERhdGUoKSB7XG5cdGlmIChleHBvcnRzLmluc3BlY3RPcHRzLmhpZGVEYXRlKSB7XG5cdFx0cmV0dXJuICcnO1xuXHR9XG5cdHJldHVybiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkgKyAnICc7XG59XG5cbi8qKlxuICogSW52b2tlcyBgdXRpbC5mb3JtYXRXaXRoT3B0aW9ucygpYCB3aXRoIHRoZSBzcGVjaWZpZWQgYXJndW1lbnRzIGFuZCB3cml0ZXMgdG8gc3RkZXJyLlxuICovXG5cbmZ1bmN0aW9uIGxvZyguLi5hcmdzKSB7XG5cdHJldHVybiBwcm9jZXNzLnN0ZGVyci53cml0ZSh1dGlsLmZvcm1hdFdpdGhPcHRpb25zKGV4cG9ydHMuaW5zcGVjdE9wdHMsIC4uLmFyZ3MpICsgJ1xcbicpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG5cdGlmIChuYW1lc3BhY2VzKSB7XG5cdFx0cHJvY2Vzcy5lbnYuREVCVUcgPSBuYW1lc3BhY2VzO1xuXHR9IGVsc2Uge1xuXHRcdC8vIElmIHlvdSBzZXQgYSBwcm9jZXNzLmVudiBmaWVsZCB0byBudWxsIG9yIHVuZGVmaW5lZCwgaXQgZ2V0cyBjYXN0IHRvIHRoZVxuXHRcdC8vIHN0cmluZyAnbnVsbCcgb3IgJ3VuZGVmaW5lZCcuIEp1c3QgZGVsZXRlIGluc3RlYWQuXG5cdFx0ZGVsZXRlIHByb2Nlc3MuZW52LkRFQlVHO1xuXHR9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcblx0cmV0dXJuIHByb2Nlc3MuZW52LkRFQlVHO1xufVxuXG4vKipcbiAqIEluaXQgbG9naWMgZm9yIGBkZWJ1Z2AgaW5zdGFuY2VzLlxuICpcbiAqIENyZWF0ZSBhIG5ldyBgaW5zcGVjdE9wdHNgIG9iamVjdCBpbiBjYXNlIGB1c2VDb2xvcnNgIGlzIHNldFxuICogZGlmZmVyZW50bHkgZm9yIGEgcGFydGljdWxhciBgZGVidWdgIGluc3RhbmNlLlxuICovXG5cbmZ1bmN0aW9uIGluaXQoZGVidWcpIHtcblx0ZGVidWcuaW5zcGVjdE9wdHMgPSB7fTtcblxuXHRjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZXhwb3J0cy5pbnNwZWN0T3B0cyk7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuXHRcdGRlYnVnLmluc3BlY3RPcHRzW2tleXNbaV1dID0gZXhwb3J0cy5pbnNwZWN0T3B0c1trZXlzW2ldXTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29tbW9uJykoZXhwb3J0cyk7XG5cbmNvbnN0IHtmb3JtYXR0ZXJzfSA9IG1vZHVsZS5leHBvcnRzO1xuXG4vKipcbiAqIE1hcCAlbyB0byBgdXRpbC5pbnNwZWN0KClgLCBhbGwgb24gYSBzaW5nbGUgbGluZS5cbiAqL1xuXG5mb3JtYXR0ZXJzLm8gPSBmdW5jdGlvbiAodikge1xuXHR0aGlzLmluc3BlY3RPcHRzLmNvbG9ycyA9IHRoaXMudXNlQ29sb3JzO1xuXHRyZXR1cm4gdXRpbC5pbnNwZWN0KHYsIHRoaXMuaW5zcGVjdE9wdHMpXG5cdFx0LnNwbGl0KCdcXG4nKVxuXHRcdC5tYXAoc3RyID0+IHN0ci50cmltKCkpXG5cdFx0LmpvaW4oJyAnKTtcbn07XG5cbi8qKlxuICogTWFwICVPIHRvIGB1dGlsLmluc3BlY3QoKWAsIGFsbG93aW5nIG11bHRpcGxlIGxpbmVzIGlmIG5lZWRlZC5cbiAqL1xuXG5mb3JtYXR0ZXJzLk8gPSBmdW5jdGlvbiAodikge1xuXHR0aGlzLmluc3BlY3RPcHRzLmNvbG9ycyA9IHRoaXMudXNlQ29sb3JzO1xuXHRyZXR1cm4gdXRpbC5pbnNwZWN0KHYsIHRoaXMuaW5zcGVjdE9wdHMpO1xufTtcbiIsICIvKipcbiAqIERldGVjdCBFbGVjdHJvbiByZW5kZXJlciAvIG53anMgcHJvY2Vzcywgd2hpY2ggaXMgbm9kZSwgYnV0IHdlIHNob3VsZFxuICogdHJlYXQgYXMgYSBicm93c2VyLlxuICovXG5cbmlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHwgcHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInIHx8IHByb2Nlc3MuYnJvd3NlciA9PT0gdHJ1ZSB8fCBwcm9jZXNzLl9fbndqcykge1xuXHRtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vYnJvd3Nlci5qcycpO1xufSBlbHNlIHtcblx0bW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL25vZGUuanMnKTtcbn1cbiIsICJ2YXIgZGVidWc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIWRlYnVnKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8qIGVzbGludCBnbG9iYWwtcmVxdWlyZTogb2ZmICovXG4gICAgICBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKShcImZvbGxvdy1yZWRpcmVjdHNcIik7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyAvKiAqLyB9XG4gICAgaWYgKHR5cGVvZiBkZWJ1ZyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBkZWJ1ZyA9IGZ1bmN0aW9uICgpIHsgLyogKi8gfTtcbiAgICB9XG4gIH1cbiAgZGVidWcuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn07XG4iLCAidmFyIHVybCA9IHJlcXVpcmUoXCJ1cmxcIik7XG52YXIgVVJMID0gdXJsLlVSTDtcbnZhciBodHRwID0gcmVxdWlyZShcImh0dHBcIik7XG52YXIgaHR0cHMgPSByZXF1aXJlKFwiaHR0cHNcIik7XG52YXIgV3JpdGFibGUgPSByZXF1aXJlKFwic3RyZWFtXCIpLldyaXRhYmxlO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoXCJhc3NlcnRcIik7XG52YXIgZGVidWcgPSByZXF1aXJlKFwiLi9kZWJ1Z1wiKTtcblxuLy8gV2hldGhlciB0byB1c2UgdGhlIG5hdGl2ZSBVUkwgb2JqZWN0IG9yIHRoZSBsZWdhY3kgdXJsIG1vZHVsZVxudmFyIHVzZU5hdGl2ZVVSTCA9IGZhbHNlO1xudHJ5IHtcbiAgYXNzZXJ0KG5ldyBVUkwoKSk7XG59XG5jYXRjaCAoZXJyb3IpIHtcbiAgdXNlTmF0aXZlVVJMID0gZXJyb3IuY29kZSA9PT0gXCJFUlJfSU5WQUxJRF9VUkxcIjtcbn1cblxuLy8gVVJMIGZpZWxkcyB0byBwcmVzZXJ2ZSBpbiBjb3B5IG9wZXJhdGlvbnNcbnZhciBwcmVzZXJ2ZWRVcmxGaWVsZHMgPSBbXG4gIFwiYXV0aFwiLFxuICBcImhvc3RcIixcbiAgXCJob3N0bmFtZVwiLFxuICBcImhyZWZcIixcbiAgXCJwYXRoXCIsXG4gIFwicGF0aG5hbWVcIixcbiAgXCJwb3J0XCIsXG4gIFwicHJvdG9jb2xcIixcbiAgXCJxdWVyeVwiLFxuICBcInNlYXJjaFwiLFxuICBcImhhc2hcIixcbl07XG5cbi8vIENyZWF0ZSBoYW5kbGVycyB0aGF0IHBhc3MgZXZlbnRzIGZyb20gbmF0aXZlIHJlcXVlc3RzXG52YXIgZXZlbnRzID0gW1wiYWJvcnRcIiwgXCJhYm9ydGVkXCIsIFwiY29ubmVjdFwiLCBcImVycm9yXCIsIFwic29ja2V0XCIsIFwidGltZW91dFwiXTtcbnZhciBldmVudEhhbmRsZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICBldmVudEhhbmRsZXJzW2V2ZW50XSA9IGZ1bmN0aW9uIChhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgdGhpcy5fcmVkaXJlY3RhYmxlLmVtaXQoZXZlbnQsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICB9O1xufSk7XG5cbi8vIEVycm9yIHR5cGVzIHdpdGggY29kZXNcbnZhciBJbnZhbGlkVXJsRXJyb3IgPSBjcmVhdGVFcnJvclR5cGUoXG4gIFwiRVJSX0lOVkFMSURfVVJMXCIsXG4gIFwiSW52YWxpZCBVUkxcIixcbiAgVHlwZUVycm9yXG4pO1xudmFyIFJlZGlyZWN0aW9uRXJyb3IgPSBjcmVhdGVFcnJvclR5cGUoXG4gIFwiRVJSX0ZSX1JFRElSRUNUSU9OX0ZBSUxVUkVcIixcbiAgXCJSZWRpcmVjdGVkIHJlcXVlc3QgZmFpbGVkXCJcbik7XG52YXIgVG9vTWFueVJlZGlyZWN0c0Vycm9yID0gY3JlYXRlRXJyb3JUeXBlKFxuICBcIkVSUl9GUl9UT09fTUFOWV9SRURJUkVDVFNcIixcbiAgXCJNYXhpbXVtIG51bWJlciBvZiByZWRpcmVjdHMgZXhjZWVkZWRcIixcbiAgUmVkaXJlY3Rpb25FcnJvclxuKTtcbnZhciBNYXhCb2R5TGVuZ3RoRXhjZWVkZWRFcnJvciA9IGNyZWF0ZUVycm9yVHlwZShcbiAgXCJFUlJfRlJfTUFYX0JPRFlfTEVOR1RIX0VYQ0VFREVEXCIsXG4gIFwiUmVxdWVzdCBib2R5IGxhcmdlciB0aGFuIG1heEJvZHlMZW5ndGggbGltaXRcIlxuKTtcbnZhciBXcml0ZUFmdGVyRW5kRXJyb3IgPSBjcmVhdGVFcnJvclR5cGUoXG4gIFwiRVJSX1NUUkVBTV9XUklURV9BRlRFUl9FTkRcIixcbiAgXCJ3cml0ZSBhZnRlciBlbmRcIlxuKTtcblxuLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbnZhciBkZXN0cm95ID0gV3JpdGFibGUucHJvdG90eXBlLmRlc3Ryb3kgfHwgbm9vcDtcblxuLy8gQW4gSFRUUChTKSByZXF1ZXN0IHRoYXQgY2FuIGJlIHJlZGlyZWN0ZWRcbmZ1bmN0aW9uIFJlZGlyZWN0YWJsZVJlcXVlc3Qob3B0aW9ucywgcmVzcG9uc2VDYWxsYmFjaykge1xuICAvLyBJbml0aWFsaXplIHRoZSByZXF1ZXN0XG4gIFdyaXRhYmxlLmNhbGwodGhpcyk7XG4gIHRoaXMuX3Nhbml0aXplT3B0aW9ucyhvcHRpb25zKTtcbiAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gIHRoaXMuX2VuZGVkID0gZmFsc2U7XG4gIHRoaXMuX2VuZGluZyA9IGZhbHNlO1xuICB0aGlzLl9yZWRpcmVjdENvdW50ID0gMDtcbiAgdGhpcy5fcmVkaXJlY3RzID0gW107XG4gIHRoaXMuX3JlcXVlc3RCb2R5TGVuZ3RoID0gMDtcbiAgdGhpcy5fcmVxdWVzdEJvZHlCdWZmZXJzID0gW107XG5cbiAgLy8gQXR0YWNoIGEgY2FsbGJhY2sgaWYgcGFzc2VkXG4gIGlmIChyZXNwb25zZUNhbGxiYWNrKSB7XG4gICAgdGhpcy5vbihcInJlc3BvbnNlXCIsIHJlc3BvbnNlQ2FsbGJhY2spO1xuICB9XG5cbiAgLy8gUmVhY3QgdG8gcmVzcG9uc2VzIG9mIG5hdGl2ZSByZXF1ZXN0c1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuX29uTmF0aXZlUmVzcG9uc2UgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICB0cnkge1xuICAgICAgc2VsZi5fcHJvY2Vzc1Jlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGNhdXNlKSB7XG4gICAgICBzZWxmLmVtaXQoXCJlcnJvclwiLCBjYXVzZSBpbnN0YW5jZW9mIFJlZGlyZWN0aW9uRXJyb3IgP1xuICAgICAgICBjYXVzZSA6IG5ldyBSZWRpcmVjdGlvbkVycm9yKHsgY2F1c2U6IGNhdXNlIH0pKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gUGVyZm9ybSB0aGUgZmlyc3QgcmVxdWVzdFxuICB0aGlzLl9wZXJmb3JtUmVxdWVzdCgpO1xufVxuUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFdyaXRhYmxlLnByb3RvdHlwZSk7XG5cblJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24gKCkge1xuICBkZXN0cm95UmVxdWVzdCh0aGlzLl9jdXJyZW50UmVxdWVzdCk7XG4gIHRoaXMuX2N1cnJlbnRSZXF1ZXN0LmFib3J0KCk7XG4gIHRoaXMuZW1pdChcImFib3J0XCIpO1xufTtcblxuUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIChlcnJvcikge1xuICBkZXN0cm95UmVxdWVzdCh0aGlzLl9jdXJyZW50UmVxdWVzdCwgZXJyb3IpO1xuICBkZXN0cm95LmNhbGwodGhpcywgZXJyb3IpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIFdyaXRlcyBidWZmZXJlZCBkYXRhIHRvIHRoZSBjdXJyZW50IG5hdGl2ZSByZXF1ZXN0XG5SZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgLy8gV3JpdGluZyBpcyBub3QgYWxsb3dlZCBpZiBlbmQgaGFzIGJlZW4gY2FsbGVkXG4gIGlmICh0aGlzLl9lbmRpbmcpIHtcbiAgICB0aHJvdyBuZXcgV3JpdGVBZnRlckVuZEVycm9yKCk7XG4gIH1cblxuICAvLyBWYWxpZGF0ZSBpbnB1dCBhbmQgc2hpZnQgcGFyYW1ldGVycyBpZiBuZWNlc3NhcnlcbiAgaWYgKCFpc1N0cmluZyhkYXRhKSAmJiAhaXNCdWZmZXIoZGF0YSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiZGF0YSBzaG91bGQgYmUgYSBzdHJpbmcsIEJ1ZmZlciBvciBVaW50OEFycmF5XCIpO1xuICB9XG4gIGlmIChpc0Z1bmN0aW9uKGVuY29kaW5nKSkge1xuICAgIGNhbGxiYWNrID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgLy8gSWdub3JlIGVtcHR5IGJ1ZmZlcnMsIHNpbmNlIHdyaXRpbmcgdGhlbSBkb2Vzbid0IGludm9rZSB0aGUgY2FsbGJhY2tcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2lzc3Vlcy8yMjA2NlxuICBpZiAoZGF0YS5sZW5ndGggPT09IDApIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICAvLyBPbmx5IHdyaXRlIHdoZW4gd2UgZG9uJ3QgZXhjZWVkIHRoZSBtYXhpbXVtIGJvZHkgbGVuZ3RoXG4gIGlmICh0aGlzLl9yZXF1ZXN0Qm9keUxlbmd0aCArIGRhdGEubGVuZ3RoIDw9IHRoaXMuX29wdGlvbnMubWF4Qm9keUxlbmd0aCkge1xuICAgIHRoaXMuX3JlcXVlc3RCb2R5TGVuZ3RoICs9IGRhdGEubGVuZ3RoO1xuICAgIHRoaXMuX3JlcXVlc3RCb2R5QnVmZmVycy5wdXNoKHsgZGF0YTogZGF0YSwgZW5jb2Rpbmc6IGVuY29kaW5nIH0pO1xuICAgIHRoaXMuX2N1cnJlbnRSZXF1ZXN0LndyaXRlKGRhdGEsIGVuY29kaW5nLCBjYWxsYmFjayk7XG4gIH1cbiAgLy8gRXJyb3Igd2hlbiB3ZSBleGNlZWQgdGhlIG1heGltdW0gYm9keSBsZW5ndGhcbiAgZWxzZSB7XG4gICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgbmV3IE1heEJvZHlMZW5ndGhFeGNlZWRlZEVycm9yKCkpO1xuICAgIHRoaXMuYWJvcnQoKTtcbiAgfVxufTtcblxuLy8gRW5kcyB0aGUgY3VycmVudCBuYXRpdmUgcmVxdWVzdFxuUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGRhdGEsIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAvLyBTaGlmdCBwYXJhbWV0ZXJzIGlmIG5lY2Vzc2FyeVxuICBpZiAoaXNGdW5jdGlvbihkYXRhKSkge1xuICAgIGNhbGxiYWNrID0gZGF0YTtcbiAgICBkYXRhID0gZW5jb2RpbmcgPSBudWxsO1xuICB9XG4gIGVsc2UgaWYgKGlzRnVuY3Rpb24oZW5jb2RpbmcpKSB7XG4gICAgY2FsbGJhY2sgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICAvLyBXcml0ZSBkYXRhIGlmIG5lZWRlZCBhbmQgZW5kXG4gIGlmICghZGF0YSkge1xuICAgIHRoaXMuX2VuZGVkID0gdGhpcy5fZW5kaW5nID0gdHJ1ZTtcbiAgICB0aGlzLl9jdXJyZW50UmVxdWVzdC5lbmQobnVsbCwgbnVsbCwgY2FsbGJhY2spO1xuICB9XG4gIGVsc2Uge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgY3VycmVudFJlcXVlc3QgPSB0aGlzLl9jdXJyZW50UmVxdWVzdDtcbiAgICB0aGlzLndyaXRlKGRhdGEsIGVuY29kaW5nLCBmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLl9lbmRlZCA9IHRydWU7XG4gICAgICBjdXJyZW50UmVxdWVzdC5lbmQobnVsbCwgbnVsbCwgY2FsbGJhY2spO1xuICAgIH0pO1xuICAgIHRoaXMuX2VuZGluZyA9IHRydWU7XG4gIH1cbn07XG5cbi8vIFNldHMgYSBoZWFkZXIgdmFsdWUgb24gdGhlIGN1cnJlbnQgbmF0aXZlIHJlcXVlc3RcblJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlLnNldEhlYWRlciA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICB0aGlzLl9vcHRpb25zLmhlYWRlcnNbbmFtZV0gPSB2YWx1ZTtcbiAgdGhpcy5fY3VycmVudFJlcXVlc3Quc2V0SGVhZGVyKG5hbWUsIHZhbHVlKTtcbn07XG5cbi8vIENsZWFycyBhIGhlYWRlciB2YWx1ZSBvbiB0aGUgY3VycmVudCBuYXRpdmUgcmVxdWVzdFxuUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUucmVtb3ZlSGVhZGVyID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVsZXRlIHRoaXMuX29wdGlvbnMuaGVhZGVyc1tuYW1lXTtcbiAgdGhpcy5fY3VycmVudFJlcXVlc3QucmVtb3ZlSGVhZGVyKG5hbWUpO1xufTtcblxuLy8gR2xvYmFsIHRpbWVvdXQgZm9yIGFsbCB1bmRlcmx5aW5nIHJlcXVlc3RzXG5SZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZS5zZXRUaW1lb3V0ID0gZnVuY3Rpb24gKG1zZWNzLCBjYWxsYmFjaykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgLy8gRGVzdHJveXMgdGhlIHNvY2tldCBvbiB0aW1lb3V0XG4gIGZ1bmN0aW9uIGRlc3Ryb3lPblRpbWVvdXQoc29ja2V0KSB7XG4gICAgc29ja2V0LnNldFRpbWVvdXQobXNlY3MpO1xuICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcihcInRpbWVvdXRcIiwgc29ja2V0LmRlc3Ryb3kpO1xuICAgIHNvY2tldC5hZGRMaXN0ZW5lcihcInRpbWVvdXRcIiwgc29ja2V0LmRlc3Ryb3kpO1xuICB9XG5cbiAgLy8gU2V0cyB1cCBhIHRpbWVyIHRvIHRyaWdnZXIgYSB0aW1lb3V0IGV2ZW50XG4gIGZ1bmN0aW9uIHN0YXJ0VGltZXIoc29ja2V0KSB7XG4gICAgaWYgKHNlbGYuX3RpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dChzZWxmLl90aW1lb3V0KTtcbiAgICB9XG4gICAgc2VsZi5fdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5lbWl0KFwidGltZW91dFwiKTtcbiAgICAgIGNsZWFyVGltZXIoKTtcbiAgICB9LCBtc2Vjcyk7XG4gICAgZGVzdHJveU9uVGltZW91dChzb2NrZXQpO1xuICB9XG5cbiAgLy8gU3RvcHMgYSB0aW1lb3V0IGZyb20gdHJpZ2dlcmluZ1xuICBmdW5jdGlvbiBjbGVhclRpbWVyKCkge1xuICAgIC8vIENsZWFyIHRoZSB0aW1lb3V0XG4gICAgaWYgKHNlbGYuX3RpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dChzZWxmLl90aW1lb3V0KTtcbiAgICAgIHNlbGYuX3RpbWVvdXQgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIENsZWFuIHVwIGFsbCBhdHRhY2hlZCBsaXN0ZW5lcnNcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKFwiYWJvcnRcIiwgY2xlYXJUaW1lcik7XG4gICAgc2VsZi5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsIGNsZWFyVGltZXIpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoXCJyZXNwb25zZVwiLCBjbGVhclRpbWVyKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIiwgY2xlYXJUaW1lcik7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKFwidGltZW91dFwiLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGlmICghc2VsZi5zb2NrZXQpIHtcbiAgICAgIHNlbGYuX2N1cnJlbnRSZXF1ZXN0LnJlbW92ZUxpc3RlbmVyKFwic29ja2V0XCIsIHN0YXJ0VGltZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEF0dGFjaCBjYWxsYmFjayBpZiBwYXNzZWRcbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5vbihcInRpbWVvdXRcIiwgY2FsbGJhY2spO1xuICB9XG5cbiAgLy8gU3RhcnQgdGhlIHRpbWVyIGlmIG9yIHdoZW4gdGhlIHNvY2tldCBpcyBvcGVuZWRcbiAgaWYgKHRoaXMuc29ja2V0KSB7XG4gICAgc3RhcnRUaW1lcih0aGlzLnNvY2tldCk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhpcy5fY3VycmVudFJlcXVlc3Qub25jZShcInNvY2tldFwiLCBzdGFydFRpbWVyKTtcbiAgfVxuXG4gIC8vIENsZWFuIHVwIG9uIGV2ZW50c1xuICB0aGlzLm9uKFwic29ja2V0XCIsIGRlc3Ryb3lPblRpbWVvdXQpO1xuICB0aGlzLm9uKFwiYWJvcnRcIiwgY2xlYXJUaW1lcik7XG4gIHRoaXMub24oXCJlcnJvclwiLCBjbGVhclRpbWVyKTtcbiAgdGhpcy5vbihcInJlc3BvbnNlXCIsIGNsZWFyVGltZXIpO1xuICB0aGlzLm9uKFwiY2xvc2VcIiwgY2xlYXJUaW1lcik7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBQcm94eSBhbGwgb3RoZXIgcHVibGljIENsaWVudFJlcXVlc3QgbWV0aG9kc1xuW1xuICBcImZsdXNoSGVhZGVyc1wiLCBcImdldEhlYWRlclwiLFxuICBcInNldE5vRGVsYXlcIiwgXCJzZXRTb2NrZXRLZWVwQWxpdmVcIixcbl0uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gIFJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiB0aGlzLl9jdXJyZW50UmVxdWVzdFttZXRob2RdKGEsIGIpO1xuICB9O1xufSk7XG5cbi8vIFByb3h5IGFsbCBwdWJsaWMgQ2xpZW50UmVxdWVzdCBwcm9wZXJ0aWVzXG5bXCJhYm9ydGVkXCIsIFwiY29ubmVjdGlvblwiLCBcInNvY2tldFwiXS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUsIHByb3BlcnR5LCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9jdXJyZW50UmVxdWVzdFtwcm9wZXJ0eV07IH0sXG4gIH0pO1xufSk7XG5cblJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlLl9zYW5pdGl6ZU9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAvLyBFbnN1cmUgaGVhZGVycyBhcmUgYWx3YXlzIHByZXNlbnRcbiAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICBvcHRpb25zLmhlYWRlcnMgPSB7fTtcbiAgfVxuXG4gIC8vIFNpbmNlIGh0dHAucmVxdWVzdCB0cmVhdHMgaG9zdCBhcyBhbiBhbGlhcyBvZiBob3N0bmFtZSxcbiAgLy8gYnV0IHRoZSB1cmwgbW9kdWxlIGludGVycHJldHMgaG9zdCBhcyBob3N0bmFtZSBwbHVzIHBvcnQsXG4gIC8vIGVsaW1pbmF0ZSB0aGUgaG9zdCBwcm9wZXJ0eSB0byBhdm9pZCBjb25mdXNpb24uXG4gIGlmIChvcHRpb25zLmhvc3QpIHtcbiAgICAvLyBVc2UgaG9zdG5hbWUgaWYgc2V0LCBiZWNhdXNlIGl0IGhhcyBwcmVjZWRlbmNlXG4gICAgaWYgKCFvcHRpb25zLmhvc3RuYW1lKSB7XG4gICAgICBvcHRpb25zLmhvc3RuYW1lID0gb3B0aW9ucy5ob3N0O1xuICAgIH1cbiAgICBkZWxldGUgb3B0aW9ucy5ob3N0O1xuICB9XG5cbiAgLy8gQ29tcGxldGUgdGhlIFVSTCBvYmplY3Qgd2hlbiBuZWNlc3NhcnlcbiAgaWYgKCFvcHRpb25zLnBhdGhuYW1lICYmIG9wdGlvbnMucGF0aCkge1xuICAgIHZhciBzZWFyY2hQb3MgPSBvcHRpb25zLnBhdGguaW5kZXhPZihcIj9cIik7XG4gICAgaWYgKHNlYXJjaFBvcyA8IDApIHtcbiAgICAgIG9wdGlvbnMucGF0aG5hbWUgPSBvcHRpb25zLnBhdGg7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgb3B0aW9ucy5wYXRobmFtZSA9IG9wdGlvbnMucGF0aC5zdWJzdHJpbmcoMCwgc2VhcmNoUG9zKTtcbiAgICAgIG9wdGlvbnMuc2VhcmNoID0gb3B0aW9ucy5wYXRoLnN1YnN0cmluZyhzZWFyY2hQb3MpO1xuICAgIH1cbiAgfVxufTtcblxuXG4vLyBFeGVjdXRlcyB0aGUgbmV4dCBuYXRpdmUgcmVxdWVzdCAoaW5pdGlhbCBvciByZWRpcmVjdClcblJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlLl9wZXJmb3JtUmVxdWVzdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gTG9hZCB0aGUgbmF0aXZlIHByb3RvY29sXG4gIHZhciBwcm90b2NvbCA9IHRoaXMuX29wdGlvbnMucHJvdG9jb2w7XG4gIHZhciBuYXRpdmVQcm90b2NvbCA9IHRoaXMuX29wdGlvbnMubmF0aXZlUHJvdG9jb2xzW3Byb3RvY29sXTtcbiAgaWYgKCFuYXRpdmVQcm90b2NvbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJVbnN1cHBvcnRlZCBwcm90b2NvbCBcIiArIHByb3RvY29sKTtcbiAgfVxuXG4gIC8vIElmIHNwZWNpZmllZCwgdXNlIHRoZSBhZ2VudCBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm90b2NvbFxuICAvLyAoSFRUUCBhbmQgSFRUUFMgdXNlIGRpZmZlcmVudCB0eXBlcyBvZiBhZ2VudHMpXG4gIGlmICh0aGlzLl9vcHRpb25zLmFnZW50cykge1xuICAgIHZhciBzY2hlbWUgPSBwcm90b2NvbC5zbGljZSgwLCAtMSk7XG4gICAgdGhpcy5fb3B0aW9ucy5hZ2VudCA9IHRoaXMuX29wdGlvbnMuYWdlbnRzW3NjaGVtZV07XG4gIH1cblxuICAvLyBDcmVhdGUgdGhlIG5hdGl2ZSByZXF1ZXN0IGFuZCBzZXQgdXAgaXRzIGV2ZW50IGhhbmRsZXJzXG4gIHZhciByZXF1ZXN0ID0gdGhpcy5fY3VycmVudFJlcXVlc3QgPVxuICAgICAgICBuYXRpdmVQcm90b2NvbC5yZXF1ZXN0KHRoaXMuX29wdGlvbnMsIHRoaXMuX29uTmF0aXZlUmVzcG9uc2UpO1xuICByZXF1ZXN0Ll9yZWRpcmVjdGFibGUgPSB0aGlzO1xuICBmb3IgKHZhciBldmVudCBvZiBldmVudHMpIHtcbiAgICByZXF1ZXN0Lm9uKGV2ZW50LCBldmVudEhhbmRsZXJzW2V2ZW50XSk7XG4gIH1cblxuICAvLyBSRkM3MjMwXHUwMEE3NS4zLjE6IFdoZW4gbWFraW5nIGEgcmVxdWVzdCBkaXJlY3RseSB0byBhbiBvcmlnaW4gc2VydmVyLCBbXHUyMDI2XVxuICAvLyBhIGNsaWVudCBNVVNUIHNlbmQgb25seSB0aGUgYWJzb2x1dGUgcGF0aCBbXHUyMDI2XSBhcyB0aGUgcmVxdWVzdC10YXJnZXQuXG4gIHRoaXMuX2N1cnJlbnRVcmwgPSAvXlxcLy8udGVzdCh0aGlzLl9vcHRpb25zLnBhdGgpID9cbiAgICB1cmwuZm9ybWF0KHRoaXMuX29wdGlvbnMpIDpcbiAgICAvLyBXaGVuIG1ha2luZyBhIHJlcXVlc3QgdG8gYSBwcm94eSwgW1x1MjAyNl1cbiAgICAvLyBhIGNsaWVudCBNVVNUIHNlbmQgdGhlIHRhcmdldCBVUkkgaW4gYWJzb2x1dGUtZm9ybSBbXHUyMDI2XS5cbiAgICB0aGlzLl9vcHRpb25zLnBhdGg7XG5cbiAgLy8gRW5kIGEgcmVkaXJlY3RlZCByZXF1ZXN0XG4gIC8vIChUaGUgZmlyc3QgcmVxdWVzdCBtdXN0IGJlIGVuZGVkIGV4cGxpY2l0bHkgd2l0aCBSZWRpcmVjdGFibGVSZXF1ZXN0I2VuZClcbiAgaWYgKHRoaXMuX2lzUmVkaXJlY3QpIHtcbiAgICAvLyBXcml0ZSB0aGUgcmVxdWVzdCBlbnRpdHkgYW5kIGVuZFxuICAgIHZhciBpID0gMDtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGJ1ZmZlcnMgPSB0aGlzLl9yZXF1ZXN0Qm9keUJ1ZmZlcnM7XG4gICAgKGZ1bmN0aW9uIHdyaXRlTmV4dChlcnJvcikge1xuICAgICAgLy8gT25seSB3cml0ZSBpZiB0aGlzIHJlcXVlc3QgaGFzIG5vdCBiZWVuIHJlZGlyZWN0ZWQgeWV0XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHJlcXVlc3QgPT09IHNlbGYuX2N1cnJlbnRSZXF1ZXN0KSB7XG4gICAgICAgIC8vIFJlcG9ydCBhbnkgd3JpdGUgZXJyb3JzXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBzZWxmLmVtaXQoXCJlcnJvclwiLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV3JpdGUgdGhlIG5leHQgYnVmZmVyIGlmIHRoZXJlIGFyZSBzdGlsbCBsZWZ0XG4gICAgICAgIGVsc2UgaWYgKGkgPCBidWZmZXJzLmxlbmd0aCkge1xuICAgICAgICAgIHZhciBidWZmZXIgPSBidWZmZXJzW2krK107XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICBpZiAoIXJlcXVlc3QuZmluaXNoZWQpIHtcbiAgICAgICAgICAgIHJlcXVlc3Qud3JpdGUoYnVmZmVyLmRhdGEsIGJ1ZmZlci5lbmNvZGluZywgd3JpdGVOZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5kIHRoZSByZXF1ZXN0IGlmIGBlbmRgIGhhcyBiZWVuIGNhbGxlZCBvbiB1c1xuICAgICAgICBlbHNlIGlmIChzZWxmLl9lbmRlZCkge1xuICAgICAgICAgIHJlcXVlc3QuZW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KCkpO1xuICB9XG59O1xuXG4vLyBQcm9jZXNzZXMgYSByZXNwb25zZSBmcm9tIHRoZSBjdXJyZW50IG5hdGl2ZSByZXF1ZXN0XG5SZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZS5fcHJvY2Vzc1Jlc3BvbnNlID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gIC8vIFN0b3JlIHRoZSByZWRpcmVjdGVkIHJlc3BvbnNlXG4gIHZhciBzdGF0dXNDb2RlID0gcmVzcG9uc2Uuc3RhdHVzQ29kZTtcbiAgaWYgKHRoaXMuX29wdGlvbnMudHJhY2tSZWRpcmVjdHMpIHtcbiAgICB0aGlzLl9yZWRpcmVjdHMucHVzaCh7XG4gICAgICB1cmw6IHRoaXMuX2N1cnJlbnRVcmwsXG4gICAgICBoZWFkZXJzOiByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgc3RhdHVzQ29kZTogc3RhdHVzQ29kZSxcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFJGQzcyMzFcdTAwQTc2LjQ6IFRoZSAzeHggKFJlZGlyZWN0aW9uKSBjbGFzcyBvZiBzdGF0dXMgY29kZSBpbmRpY2F0ZXNcbiAgLy8gdGhhdCBmdXJ0aGVyIGFjdGlvbiBuZWVkcyB0byBiZSB0YWtlbiBieSB0aGUgdXNlciBhZ2VudCBpbiBvcmRlciB0b1xuICAvLyBmdWxmaWxsIHRoZSByZXF1ZXN0LiBJZiBhIExvY2F0aW9uIGhlYWRlciBmaWVsZCBpcyBwcm92aWRlZCxcbiAgLy8gdGhlIHVzZXIgYWdlbnQgTUFZIGF1dG9tYXRpY2FsbHkgcmVkaXJlY3QgaXRzIHJlcXVlc3QgdG8gdGhlIFVSSVxuICAvLyByZWZlcmVuY2VkIGJ5IHRoZSBMb2NhdGlvbiBmaWVsZCB2YWx1ZSxcbiAgLy8gZXZlbiBpZiB0aGUgc3BlY2lmaWMgc3RhdHVzIGNvZGUgaXMgbm90IHVuZGVyc3Rvb2QuXG5cbiAgLy8gSWYgdGhlIHJlc3BvbnNlIGlzIG5vdCBhIHJlZGlyZWN0OyByZXR1cm4gaXQgYXMtaXNcbiAgdmFyIGxvY2F0aW9uID0gcmVzcG9uc2UuaGVhZGVycy5sb2NhdGlvbjtcbiAgaWYgKCFsb2NhdGlvbiB8fCB0aGlzLl9vcHRpb25zLmZvbGxvd1JlZGlyZWN0cyA9PT0gZmFsc2UgfHxcbiAgICAgIHN0YXR1c0NvZGUgPCAzMDAgfHwgc3RhdHVzQ29kZSA+PSA0MDApIHtcbiAgICByZXNwb25zZS5yZXNwb25zZVVybCA9IHRoaXMuX2N1cnJlbnRVcmw7XG4gICAgcmVzcG9uc2UucmVkaXJlY3RzID0gdGhpcy5fcmVkaXJlY3RzO1xuICAgIHRoaXMuZW1pdChcInJlc3BvbnNlXCIsIHJlc3BvbnNlKTtcblxuICAgIC8vIENsZWFuIHVwXG4gICAgdGhpcy5fcmVxdWVzdEJvZHlCdWZmZXJzID0gW107XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVGhlIHJlc3BvbnNlIGlzIGEgcmVkaXJlY3QsIHNvIGFib3J0IHRoZSBjdXJyZW50IHJlcXVlc3RcbiAgZGVzdHJveVJlcXVlc3QodGhpcy5fY3VycmVudFJlcXVlc3QpO1xuICAvLyBEaXNjYXJkIHRoZSByZW1haW5kZXIgb2YgdGhlIHJlc3BvbnNlIHRvIGF2b2lkIHdhaXRpbmcgZm9yIGRhdGFcbiAgcmVzcG9uc2UuZGVzdHJveSgpO1xuXG4gIC8vIFJGQzcyMzFcdTAwQTc2LjQ6IEEgY2xpZW50IFNIT1VMRCBkZXRlY3QgYW5kIGludGVydmVuZVxuICAvLyBpbiBjeWNsaWNhbCByZWRpcmVjdGlvbnMgKGkuZS4sIFwiaW5maW5pdGVcIiByZWRpcmVjdGlvbiBsb29wcykuXG4gIGlmICgrK3RoaXMuX3JlZGlyZWN0Q291bnQgPiB0aGlzLl9vcHRpb25zLm1heFJlZGlyZWN0cykge1xuICAgIHRocm93IG5ldyBUb29NYW55UmVkaXJlY3RzRXJyb3IoKTtcbiAgfVxuXG4gIC8vIFN0b3JlIHRoZSByZXF1ZXN0IGhlYWRlcnMgaWYgYXBwbGljYWJsZVxuICB2YXIgcmVxdWVzdEhlYWRlcnM7XG4gIHZhciBiZWZvcmVSZWRpcmVjdCA9IHRoaXMuX29wdGlvbnMuYmVmb3JlUmVkaXJlY3Q7XG4gIGlmIChiZWZvcmVSZWRpcmVjdCkge1xuICAgIHJlcXVlc3RIZWFkZXJzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAvLyBUaGUgSG9zdCBoZWFkZXIgd2FzIHNldCBieSBuYXRpdmVQcm90b2NvbC5yZXF1ZXN0XG4gICAgICBIb3N0OiByZXNwb25zZS5yZXEuZ2V0SGVhZGVyKFwiaG9zdFwiKSxcbiAgICB9LCB0aGlzLl9vcHRpb25zLmhlYWRlcnMpO1xuICB9XG5cbiAgLy8gUkZDNzIzMVx1MDBBNzYuNDogQXV0b21hdGljIHJlZGlyZWN0aW9uIG5lZWRzIHRvIGRvbmUgd2l0aFxuICAvLyBjYXJlIGZvciBtZXRob2RzIG5vdCBrbm93biB0byBiZSBzYWZlLCBbXHUyMDI2XVxuICAvLyBSRkM3MjMxXHUwMEE3Ni40LjJcdTIwMTMzOiBGb3IgaGlzdG9yaWNhbCByZWFzb25zLCBhIHVzZXIgYWdlbnQgTUFZIGNoYW5nZVxuICAvLyB0aGUgcmVxdWVzdCBtZXRob2QgZnJvbSBQT1NUIHRvIEdFVCBmb3IgdGhlIHN1YnNlcXVlbnQgcmVxdWVzdC5cbiAgdmFyIG1ldGhvZCA9IHRoaXMuX29wdGlvbnMubWV0aG9kO1xuICBpZiAoKHN0YXR1c0NvZGUgPT09IDMwMSB8fCBzdGF0dXNDb2RlID09PSAzMDIpICYmIHRoaXMuX29wdGlvbnMubWV0aG9kID09PSBcIlBPU1RcIiB8fFxuICAgICAgLy8gUkZDNzIzMVx1MDBBNzYuNC40OiBUaGUgMzAzIChTZWUgT3RoZXIpIHN0YXR1cyBjb2RlIGluZGljYXRlcyB0aGF0XG4gICAgICAvLyB0aGUgc2VydmVyIGlzIHJlZGlyZWN0aW5nIHRoZSB1c2VyIGFnZW50IHRvIGEgZGlmZmVyZW50IHJlc291cmNlIFtcdTIwMjZdXG4gICAgICAvLyBBIHVzZXIgYWdlbnQgY2FuIHBlcmZvcm0gYSByZXRyaWV2YWwgcmVxdWVzdCB0YXJnZXRpbmcgdGhhdCBVUklcbiAgICAgIC8vIChhIEdFVCBvciBIRUFEIHJlcXVlc3QgaWYgdXNpbmcgSFRUUCkgW1x1MjAyNl1cbiAgICAgIChzdGF0dXNDb2RlID09PSAzMDMpICYmICEvXig/OkdFVHxIRUFEKSQvLnRlc3QodGhpcy5fb3B0aW9ucy5tZXRob2QpKSB7XG4gICAgdGhpcy5fb3B0aW9ucy5tZXRob2QgPSBcIkdFVFwiO1xuICAgIC8vIERyb3AgYSBwb3NzaWJsZSBlbnRpdHkgYW5kIGhlYWRlcnMgcmVsYXRlZCB0byBpdFxuICAgIHRoaXMuX3JlcXVlc3RCb2R5QnVmZmVycyA9IFtdO1xuICAgIHJlbW92ZU1hdGNoaW5nSGVhZGVycygvXmNvbnRlbnQtL2ksIHRoaXMuX29wdGlvbnMuaGVhZGVycyk7XG4gIH1cblxuICAvLyBEcm9wIHRoZSBIb3N0IGhlYWRlciwgYXMgdGhlIHJlZGlyZWN0IG1pZ2h0IGxlYWQgdG8gYSBkaWZmZXJlbnQgaG9zdFxuICB2YXIgY3VycmVudEhvc3RIZWFkZXIgPSByZW1vdmVNYXRjaGluZ0hlYWRlcnMoL15ob3N0JC9pLCB0aGlzLl9vcHRpb25zLmhlYWRlcnMpO1xuXG4gIC8vIElmIHRoZSByZWRpcmVjdCBpcyByZWxhdGl2ZSwgY2Fycnkgb3ZlciB0aGUgaG9zdCBvZiB0aGUgbGFzdCByZXF1ZXN0XG4gIHZhciBjdXJyZW50VXJsUGFydHMgPSBwYXJzZVVybCh0aGlzLl9jdXJyZW50VXJsKTtcbiAgdmFyIGN1cnJlbnRIb3N0ID0gY3VycmVudEhvc3RIZWFkZXIgfHwgY3VycmVudFVybFBhcnRzLmhvc3Q7XG4gIHZhciBjdXJyZW50VXJsID0gL15cXHcrOi8udGVzdChsb2NhdGlvbikgPyB0aGlzLl9jdXJyZW50VXJsIDpcbiAgICB1cmwuZm9ybWF0KE9iamVjdC5hc3NpZ24oY3VycmVudFVybFBhcnRzLCB7IGhvc3Q6IGN1cnJlbnRIb3N0IH0pKTtcblxuICAvLyBDcmVhdGUgdGhlIHJlZGlyZWN0ZWQgcmVxdWVzdFxuICB2YXIgcmVkaXJlY3RVcmwgPSByZXNvbHZlVXJsKGxvY2F0aW9uLCBjdXJyZW50VXJsKTtcbiAgZGVidWcoXCJyZWRpcmVjdGluZyB0b1wiLCByZWRpcmVjdFVybC5ocmVmKTtcbiAgdGhpcy5faXNSZWRpcmVjdCA9IHRydWU7XG4gIHNwcmVhZFVybE9iamVjdChyZWRpcmVjdFVybCwgdGhpcy5fb3B0aW9ucyk7XG5cbiAgLy8gRHJvcCBjb25maWRlbnRpYWwgaGVhZGVycyB3aGVuIHJlZGlyZWN0aW5nIHRvIGEgbGVzcyBzZWN1cmUgcHJvdG9jb2xcbiAgLy8gb3IgdG8gYSBkaWZmZXJlbnQgZG9tYWluIHRoYXQgaXMgbm90IGEgc3VwZXJkb21haW5cbiAgaWYgKHJlZGlyZWN0VXJsLnByb3RvY29sICE9PSBjdXJyZW50VXJsUGFydHMucHJvdG9jb2wgJiZcbiAgICAgcmVkaXJlY3RVcmwucHJvdG9jb2wgIT09IFwiaHR0cHM6XCIgfHxcbiAgICAgcmVkaXJlY3RVcmwuaG9zdCAhPT0gY3VycmVudEhvc3QgJiZcbiAgICAgIWlzU3ViZG9tYWluKHJlZGlyZWN0VXJsLmhvc3QsIGN1cnJlbnRIb3N0KSkge1xuICAgIHJlbW92ZU1hdGNoaW5nSGVhZGVycygvXig/Oig/OnByb3h5LSk/YXV0aG9yaXphdGlvbnxjb29raWUpJC9pLCB0aGlzLl9vcHRpb25zLmhlYWRlcnMpO1xuICB9XG5cbiAgLy8gRXZhbHVhdGUgdGhlIGJlZm9yZVJlZGlyZWN0IGNhbGxiYWNrXG4gIGlmIChpc0Z1bmN0aW9uKGJlZm9yZVJlZGlyZWN0KSkge1xuICAgIHZhciByZXNwb25zZURldGFpbHMgPSB7XG4gICAgICBoZWFkZXJzOiByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgc3RhdHVzQ29kZTogc3RhdHVzQ29kZSxcbiAgICB9O1xuICAgIHZhciByZXF1ZXN0RGV0YWlscyA9IHtcbiAgICAgIHVybDogY3VycmVudFVybCxcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgaGVhZGVyczogcmVxdWVzdEhlYWRlcnMsXG4gICAgfTtcbiAgICBiZWZvcmVSZWRpcmVjdCh0aGlzLl9vcHRpb25zLCByZXNwb25zZURldGFpbHMsIHJlcXVlc3REZXRhaWxzKTtcbiAgICB0aGlzLl9zYW5pdGl6ZU9wdGlvbnModGhpcy5fb3B0aW9ucyk7XG4gIH1cblxuICAvLyBQZXJmb3JtIHRoZSByZWRpcmVjdGVkIHJlcXVlc3RcbiAgdGhpcy5fcGVyZm9ybVJlcXVlc3QoKTtcbn07XG5cbi8vIFdyYXBzIHRoZSBrZXkvdmFsdWUgb2JqZWN0IG9mIHByb3RvY29scyB3aXRoIHJlZGlyZWN0IGZ1bmN0aW9uYWxpdHlcbmZ1bmN0aW9uIHdyYXAocHJvdG9jb2xzKSB7XG4gIC8vIERlZmF1bHQgc2V0dGluZ3NcbiAgdmFyIGV4cG9ydHMgPSB7XG4gICAgbWF4UmVkaXJlY3RzOiAyMSxcbiAgICBtYXhCb2R5TGVuZ3RoOiAxMCAqIDEwMjQgKiAxMDI0LFxuICB9O1xuXG4gIC8vIFdyYXAgZWFjaCBwcm90b2NvbFxuICB2YXIgbmF0aXZlUHJvdG9jb2xzID0ge307XG4gIE9iamVjdC5rZXlzKHByb3RvY29scykuZm9yRWFjaChmdW5jdGlvbiAoc2NoZW1lKSB7XG4gICAgdmFyIHByb3RvY29sID0gc2NoZW1lICsgXCI6XCI7XG4gICAgdmFyIG5hdGl2ZVByb3RvY29sID0gbmF0aXZlUHJvdG9jb2xzW3Byb3RvY29sXSA9IHByb3RvY29sc1tzY2hlbWVdO1xuICAgIHZhciB3cmFwcGVkUHJvdG9jb2wgPSBleHBvcnRzW3NjaGVtZV0gPSBPYmplY3QuY3JlYXRlKG5hdGl2ZVByb3RvY29sKTtcblxuICAgIC8vIEV4ZWN1dGVzIGEgcmVxdWVzdCwgZm9sbG93aW5nIHJlZGlyZWN0c1xuICAgIGZ1bmN0aW9uIHJlcXVlc3QoaW5wdXQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICAvLyBQYXJzZSBwYXJhbWV0ZXJzLCBlbnN1cmluZyB0aGF0IGlucHV0IGlzIGFuIG9iamVjdFxuICAgICAgaWYgKGlzVVJMKGlucHV0KSkge1xuICAgICAgICBpbnB1dCA9IHNwcmVhZFVybE9iamVjdChpbnB1dCk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc1N0cmluZyhpbnB1dCkpIHtcbiAgICAgICAgaW5wdXQgPSBzcHJlYWRVcmxPYmplY3QocGFyc2VVcmwoaW5wdXQpKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMgPSB2YWxpZGF0ZVVybChpbnB1dCk7XG4gICAgICAgIGlucHV0ID0geyBwcm90b2NvbDogcHJvdG9jb2wgfTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIFNldCBkZWZhdWx0c1xuICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICBtYXhSZWRpcmVjdHM6IGV4cG9ydHMubWF4UmVkaXJlY3RzLFxuICAgICAgICBtYXhCb2R5TGVuZ3RoOiBleHBvcnRzLm1heEJvZHlMZW5ndGgsXG4gICAgICB9LCBpbnB1dCwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLm5hdGl2ZVByb3RvY29scyA9IG5hdGl2ZVByb3RvY29scztcbiAgICAgIGlmICghaXNTdHJpbmcob3B0aW9ucy5ob3N0KSAmJiAhaXNTdHJpbmcob3B0aW9ucy5ob3N0bmFtZSkpIHtcbiAgICAgICAgb3B0aW9ucy5ob3N0bmFtZSA9IFwiOjoxXCI7XG4gICAgICB9XG5cbiAgICAgIGFzc2VydC5lcXVhbChvcHRpb25zLnByb3RvY29sLCBwcm90b2NvbCwgXCJwcm90b2NvbCBtaXNtYXRjaFwiKTtcbiAgICAgIGRlYnVnKFwib3B0aW9uc1wiLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiBuZXcgUmVkaXJlY3RhYmxlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgLy8gRXhlY3V0ZXMgYSBHRVQgcmVxdWVzdCwgZm9sbG93aW5nIHJlZGlyZWN0c1xuICAgIGZ1bmN0aW9uIGdldChpbnB1dCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgIHZhciB3cmFwcGVkUmVxdWVzdCA9IHdyYXBwZWRQcm90b2NvbC5yZXF1ZXN0KGlucHV0LCBvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgICB3cmFwcGVkUmVxdWVzdC5lbmQoKTtcbiAgICAgIHJldHVybiB3cmFwcGVkUmVxdWVzdDtcbiAgICB9XG5cbiAgICAvLyBFeHBvc2UgdGhlIHByb3BlcnRpZXMgb24gdGhlIHdyYXBwZWQgcHJvdG9jb2xcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh3cmFwcGVkUHJvdG9jb2wsIHtcbiAgICAgIHJlcXVlc3Q6IHsgdmFsdWU6IHJlcXVlc3QsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSxcbiAgICAgIGdldDogeyB2YWx1ZTogZ2V0LCBjb25maWd1cmFibGU6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0sXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gZXhwb3J0cztcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHsgLyogZW1wdHkgKi8gfVxuXG5mdW5jdGlvbiBwYXJzZVVybChpbnB1dCkge1xuICB2YXIgcGFyc2VkO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodXNlTmF0aXZlVVJMKSB7XG4gICAgcGFyc2VkID0gbmV3IFVSTChpbnB1dCk7XG4gIH1cbiAgZWxzZSB7XG4gICAgLy8gRW5zdXJlIHRoZSBVUkwgaXMgdmFsaWQgYW5kIGFic29sdXRlXG4gICAgcGFyc2VkID0gdmFsaWRhdGVVcmwodXJsLnBhcnNlKGlucHV0KSk7XG4gICAgaWYgKCFpc1N0cmluZyhwYXJzZWQucHJvdG9jb2wpKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZFVybEVycm9yKHsgaW5wdXQgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXJzZWQ7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVVcmwocmVsYXRpdmUsIGJhc2UpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIHVzZU5hdGl2ZVVSTCA/IG5ldyBVUkwocmVsYXRpdmUsIGJhc2UpIDogcGFyc2VVcmwodXJsLnJlc29sdmUoYmFzZSwgcmVsYXRpdmUpKTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVVcmwoaW5wdXQpIHtcbiAgaWYgKC9eXFxbLy50ZXN0KGlucHV0Lmhvc3RuYW1lKSAmJiAhL15cXFtbOjAtOWEtZl0rXFxdJC9pLnRlc3QoaW5wdXQuaG9zdG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRVcmxFcnJvcih7IGlucHV0OiBpbnB1dC5ocmVmIHx8IGlucHV0IH0pO1xuICB9XG4gIGlmICgvXlxcWy8udGVzdChpbnB1dC5ob3N0KSAmJiAhL15cXFtbOjAtOWEtZl0rXFxdKDpcXGQrKT8kL2kudGVzdChpbnB1dC5ob3N0KSkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkVXJsRXJyb3IoeyBpbnB1dDogaW5wdXQuaHJlZiB8fCBpbnB1dCB9KTtcbiAgfVxuICByZXR1cm4gaW5wdXQ7XG59XG5cbmZ1bmN0aW9uIHNwcmVhZFVybE9iamVjdCh1cmxPYmplY3QsIHRhcmdldCkge1xuICB2YXIgc3ByZWFkID0gdGFyZ2V0IHx8IHt9O1xuICBmb3IgKHZhciBrZXkgb2YgcHJlc2VydmVkVXJsRmllbGRzKSB7XG4gICAgc3ByZWFkW2tleV0gPSB1cmxPYmplY3Rba2V5XTtcbiAgfVxuXG4gIC8vIEZpeCBJUHY2IGhvc3RuYW1lXG4gIGlmIChzcHJlYWQuaG9zdG5hbWUuc3RhcnRzV2l0aChcIltcIikpIHtcbiAgICBzcHJlYWQuaG9zdG5hbWUgPSBzcHJlYWQuaG9zdG5hbWUuc2xpY2UoMSwgLTEpO1xuICB9XG4gIC8vIEVuc3VyZSBwb3J0IGlzIGEgbnVtYmVyXG4gIGlmIChzcHJlYWQucG9ydCAhPT0gXCJcIikge1xuICAgIHNwcmVhZC5wb3J0ID0gTnVtYmVyKHNwcmVhZC5wb3J0KTtcbiAgfVxuICAvLyBDb25jYXRlbmF0ZSBwYXRoXG4gIHNwcmVhZC5wYXRoID0gc3ByZWFkLnNlYXJjaCA/IHNwcmVhZC5wYXRobmFtZSArIHNwcmVhZC5zZWFyY2ggOiBzcHJlYWQucGF0aG5hbWU7XG5cbiAgcmV0dXJuIHNwcmVhZDtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlTWF0Y2hpbmdIZWFkZXJzKHJlZ2V4LCBoZWFkZXJzKSB7XG4gIHZhciBsYXN0VmFsdWU7XG4gIGZvciAodmFyIGhlYWRlciBpbiBoZWFkZXJzKSB7XG4gICAgaWYgKHJlZ2V4LnRlc3QoaGVhZGVyKSkge1xuICAgICAgbGFzdFZhbHVlID0gaGVhZGVyc1toZWFkZXJdO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbaGVhZGVyXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIChsYXN0VmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIGxhc3RWYWx1ZSA9PT0gXCJ1bmRlZmluZWRcIikgP1xuICAgIHVuZGVmaW5lZCA6IFN0cmluZyhsYXN0VmFsdWUpLnRyaW0oKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRXJyb3JUeXBlKGNvZGUsIG1lc3NhZ2UsIGJhc2VDbGFzcykge1xuICAvLyBDcmVhdGUgY29uc3RydWN0b3JcbiAgZnVuY3Rpb24gQ3VzdG9tRXJyb3IocHJvcGVydGllcykge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgcHJvcGVydGllcyB8fCB7fSk7XG4gICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICB0aGlzLm1lc3NhZ2UgPSB0aGlzLmNhdXNlID8gbWVzc2FnZSArIFwiOiBcIiArIHRoaXMuY2F1c2UubWVzc2FnZSA6IG1lc3NhZ2U7XG4gIH1cblxuICAvLyBBdHRhY2ggY29uc3RydWN0b3IgYW5kIHNldCBkZWZhdWx0IHByb3BlcnRpZXNcbiAgQ3VzdG9tRXJyb3IucHJvdG90eXBlID0gbmV3IChiYXNlQ2xhc3MgfHwgRXJyb3IpKCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEN1c3RvbUVycm9yLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogQ3VzdG9tRXJyb3IsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB9LFxuICAgIG5hbWU6IHtcbiAgICAgIHZhbHVlOiBcIkVycm9yIFtcIiArIGNvZGUgKyBcIl1cIixcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIH0sXG4gIH0pO1xuICByZXR1cm4gQ3VzdG9tRXJyb3I7XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3lSZXF1ZXN0KHJlcXVlc3QsIGVycm9yKSB7XG4gIGZvciAodmFyIGV2ZW50IG9mIGV2ZW50cykge1xuICAgIHJlcXVlc3QucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGV2ZW50SGFuZGxlcnNbZXZlbnRdKTtcbiAgfVxuICByZXF1ZXN0Lm9uKFwiZXJyb3JcIiwgbm9vcCk7XG4gIHJlcXVlc3QuZGVzdHJveShlcnJvcik7XG59XG5cbmZ1bmN0aW9uIGlzU3ViZG9tYWluKHN1YmRvbWFpbiwgZG9tYWluKSB7XG4gIGFzc2VydChpc1N0cmluZyhzdWJkb21haW4pICYmIGlzU3RyaW5nKGRvbWFpbikpO1xuICB2YXIgZG90ID0gc3ViZG9tYWluLmxlbmd0aCAtIGRvbWFpbi5sZW5ndGggLSAxO1xuICByZXR1cm4gZG90ID4gMCAmJiBzdWJkb21haW5bZG90XSA9PT0gXCIuXCIgJiYgc3ViZG9tYWluLmVuZHNXaXRoKGRvbWFpbik7XG59XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgfHwgdmFsdWUgaW5zdGFuY2VvZiBTdHJpbmc7XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xufVxuXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIChcImxlbmd0aFwiIGluIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gaXNVUkwodmFsdWUpIHtcbiAgcmV0dXJuIFVSTCAmJiB2YWx1ZSBpbnN0YW5jZW9mIFVSTDtcbn1cblxuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSB3cmFwKHsgaHR0cDogaHR0cCwgaHR0cHM6IGh0dHBzIH0pO1xubW9kdWxlLmV4cG9ydHMud3JhcCA9IHdyYXA7XG4iLCBudWxsLCBudWxsLCBudWxsLCAibW9kdWxlLmV4cG9ydHMgPSBpc2V4ZVxuaXNleGUuc3luYyA9IHN5bmNcblxudmFyIGZzID0gcmVxdWlyZSgnZnMnKVxuXG5mdW5jdGlvbiBjaGVja1BhdGhFeHQgKHBhdGgsIG9wdGlvbnMpIHtcbiAgdmFyIHBhdGhleHQgPSBvcHRpb25zLnBhdGhFeHQgIT09IHVuZGVmaW5lZCA/XG4gICAgb3B0aW9ucy5wYXRoRXh0IDogcHJvY2Vzcy5lbnYuUEFUSEVYVFxuXG4gIGlmICghcGF0aGV4dCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBwYXRoZXh0ID0gcGF0aGV4dC5zcGxpdCgnOycpXG4gIGlmIChwYXRoZXh0LmluZGV4T2YoJycpICE9PSAtMSkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHAgPSBwYXRoZXh0W2ldLnRvTG93ZXJDYXNlKClcbiAgICBpZiAocCAmJiBwYXRoLnN1YnN0cigtcC5sZW5ndGgpLnRvTG93ZXJDYXNlKCkgPT09IHApIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBjaGVja1N0YXQgKHN0YXQsIHBhdGgsIG9wdGlvbnMpIHtcbiAgaWYgKCFzdGF0LmlzU3ltYm9saWNMaW5rKCkgJiYgIXN0YXQuaXNGaWxlKCkpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gY2hlY2tQYXRoRXh0KHBhdGgsIG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIGlzZXhlIChwYXRoLCBvcHRpb25zLCBjYikge1xuICBmcy5zdGF0KHBhdGgsIGZ1bmN0aW9uIChlciwgc3RhdCkge1xuICAgIGNiKGVyLCBlciA/IGZhbHNlIDogY2hlY2tTdGF0KHN0YXQsIHBhdGgsIG9wdGlvbnMpKVxuICB9KVxufVxuXG5mdW5jdGlvbiBzeW5jIChwYXRoLCBvcHRpb25zKSB7XG4gIHJldHVybiBjaGVja1N0YXQoZnMuc3RhdFN5bmMocGF0aCksIHBhdGgsIG9wdGlvbnMpXG59XG4iLCAibW9kdWxlLmV4cG9ydHMgPSBpc2V4ZVxuaXNleGUuc3luYyA9IHN5bmNcblxudmFyIGZzID0gcmVxdWlyZSgnZnMnKVxuXG5mdW5jdGlvbiBpc2V4ZSAocGF0aCwgb3B0aW9ucywgY2IpIHtcbiAgZnMuc3RhdChwYXRoLCBmdW5jdGlvbiAoZXIsIHN0YXQpIHtcbiAgICBjYihlciwgZXIgPyBmYWxzZSA6IGNoZWNrU3RhdChzdGF0LCBvcHRpb25zKSlcbiAgfSlcbn1cblxuZnVuY3Rpb24gc3luYyAocGF0aCwgb3B0aW9ucykge1xuICByZXR1cm4gY2hlY2tTdGF0KGZzLnN0YXRTeW5jKHBhdGgpLCBvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBjaGVja1N0YXQgKHN0YXQsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHN0YXQuaXNGaWxlKCkgJiYgY2hlY2tNb2RlKHN0YXQsIG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIGNoZWNrTW9kZSAoc3RhdCwgb3B0aW9ucykge1xuICB2YXIgbW9kID0gc3RhdC5tb2RlXG4gIHZhciB1aWQgPSBzdGF0LnVpZFxuICB2YXIgZ2lkID0gc3RhdC5naWRcblxuICB2YXIgbXlVaWQgPSBvcHRpb25zLnVpZCAhPT0gdW5kZWZpbmVkID9cbiAgICBvcHRpb25zLnVpZCA6IHByb2Nlc3MuZ2V0dWlkICYmIHByb2Nlc3MuZ2V0dWlkKClcbiAgdmFyIG15R2lkID0gb3B0aW9ucy5naWQgIT09IHVuZGVmaW5lZCA/XG4gICAgb3B0aW9ucy5naWQgOiBwcm9jZXNzLmdldGdpZCAmJiBwcm9jZXNzLmdldGdpZCgpXG5cbiAgdmFyIHUgPSBwYXJzZUludCgnMTAwJywgOClcbiAgdmFyIGcgPSBwYXJzZUludCgnMDEwJywgOClcbiAgdmFyIG8gPSBwYXJzZUludCgnMDAxJywgOClcbiAgdmFyIHVnID0gdSB8IGdcblxuICB2YXIgcmV0ID0gKG1vZCAmIG8pIHx8XG4gICAgKG1vZCAmIGcpICYmIGdpZCA9PT0gbXlHaWQgfHxcbiAgICAobW9kICYgdSkgJiYgdWlkID09PSBteVVpZCB8fFxuICAgIChtb2QgJiB1ZykgJiYgbXlVaWQgPT09IDBcblxuICByZXR1cm4gcmV0XG59XG4iLCAidmFyIGZzID0gcmVxdWlyZSgnZnMnKVxudmFyIGNvcmVcbmlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInIHx8IGdsb2JhbC5URVNUSU5HX1dJTkRPV1MpIHtcbiAgY29yZSA9IHJlcXVpcmUoJy4vd2luZG93cy5qcycpXG59IGVsc2Uge1xuICBjb3JlID0gcmVxdWlyZSgnLi9tb2RlLmpzJylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc2V4ZVxuaXNleGUuc3luYyA9IHN5bmNcblxuZnVuY3Rpb24gaXNleGUgKHBhdGgsIG9wdGlvbnMsIGNiKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gb3B0aW9uc1xuICAgIG9wdGlvbnMgPSB7fVxuICB9XG5cbiAgaWYgKCFjYikge1xuICAgIGlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2FsbGJhY2sgbm90IHByb3ZpZGVkJylcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgaXNleGUocGF0aCwgb3B0aW9ucyB8fCB7fSwgZnVuY3Rpb24gKGVyLCBpcykge1xuICAgICAgICBpZiAoZXIpIHtcbiAgICAgICAgICByZWplY3QoZXIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZShpcylcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgY29yZShwYXRoLCBvcHRpb25zIHx8IHt9LCBmdW5jdGlvbiAoZXIsIGlzKSB7XG4gICAgLy8gaWdub3JlIEVBQ0NFUyBiZWNhdXNlIHRoYXQganVzdCBtZWFucyB3ZSBhcmVuJ3QgYWxsb3dlZCB0byBydW4gaXRcbiAgICBpZiAoZXIpIHtcbiAgICAgIGlmIChlci5jb2RlID09PSAnRUFDQ0VTJyB8fCBvcHRpb25zICYmIG9wdGlvbnMuaWdub3JlRXJyb3JzKSB7XG4gICAgICAgIGVyID0gbnVsbFxuICAgICAgICBpcyA9IGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIGNiKGVyLCBpcylcbiAgfSlcbn1cblxuZnVuY3Rpb24gc3luYyAocGF0aCwgb3B0aW9ucykge1xuICAvLyBteSBraW5nZG9tIGZvciBhIGZpbHRlcmVkIGNhdGNoXG4gIHRyeSB7XG4gICAgcmV0dXJuIGNvcmUuc3luYyhwYXRoLCBvcHRpb25zIHx8IHt9KVxuICB9IGNhdGNoIChlcikge1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuaWdub3JlRXJyb3JzIHx8IGVyLmNvZGUgPT09ICdFQUNDRVMnKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZXJcbiAgICB9XG4gIH1cbn1cbiIsICJjb25zdCBpc1dpbmRvd3MgPSBwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInIHx8XG4gICAgcHJvY2Vzcy5lbnYuT1NUWVBFID09PSAnY3lnd2luJyB8fFxuICAgIHByb2Nlc3MuZW52Lk9TVFlQRSA9PT0gJ21zeXMnXG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJylcbmNvbnN0IENPTE9OID0gaXNXaW5kb3dzID8gJzsnIDogJzonXG5jb25zdCBpc2V4ZSA9IHJlcXVpcmUoJ2lzZXhlJylcblxuY29uc3QgZ2V0Tm90Rm91bmRFcnJvciA9IChjbWQpID0+XG4gIE9iamVjdC5hc3NpZ24obmV3IEVycm9yKGBub3QgZm91bmQ6ICR7Y21kfWApLCB7IGNvZGU6ICdFTk9FTlQnIH0pXG5cbmNvbnN0IGdldFBhdGhJbmZvID0gKGNtZCwgb3B0KSA9PiB7XG4gIGNvbnN0IGNvbG9uID0gb3B0LmNvbG9uIHx8IENPTE9OXG5cbiAgLy8gSWYgaXQgaGFzIGEgc2xhc2gsIHRoZW4gd2UgZG9uJ3QgYm90aGVyIHNlYXJjaGluZyB0aGUgcGF0aGVudi5cbiAgLy8ganVzdCBjaGVjayB0aGUgZmlsZSBpdHNlbGYsIGFuZCB0aGF0J3MgaXQuXG4gIGNvbnN0IHBhdGhFbnYgPSBjbWQubWF0Y2goL1xcLy8pIHx8IGlzV2luZG93cyAmJiBjbWQubWF0Y2goL1xcXFwvKSA/IFsnJ11cbiAgICA6IChcbiAgICAgIFtcbiAgICAgICAgLy8gd2luZG93cyBhbHdheXMgY2hlY2tzIHRoZSBjd2QgZmlyc3RcbiAgICAgICAgLi4uKGlzV2luZG93cyA/IFtwcm9jZXNzLmN3ZCgpXSA6IFtdKSxcbiAgICAgICAgLi4uKG9wdC5wYXRoIHx8IHByb2Nlc3MuZW52LlBBVEggfHxcbiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogdmVyeSB1bnVzdWFsICovICcnKS5zcGxpdChjb2xvbiksXG4gICAgICBdXG4gICAgKVxuICBjb25zdCBwYXRoRXh0RXhlID0gaXNXaW5kb3dzXG4gICAgPyBvcHQucGF0aEV4dCB8fCBwcm9jZXNzLmVudi5QQVRIRVhUIHx8ICcuRVhFOy5DTUQ7LkJBVDsuQ09NJ1xuICAgIDogJydcbiAgY29uc3QgcGF0aEV4dCA9IGlzV2luZG93cyA/IHBhdGhFeHRFeGUuc3BsaXQoY29sb24pIDogWycnXVxuXG4gIGlmIChpc1dpbmRvd3MpIHtcbiAgICBpZiAoY21kLmluZGV4T2YoJy4nKSAhPT0gLTEgJiYgcGF0aEV4dFswXSAhPT0gJycpXG4gICAgICBwYXRoRXh0LnVuc2hpZnQoJycpXG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhFbnYsXG4gICAgcGF0aEV4dCxcbiAgICBwYXRoRXh0RXhlLFxuICB9XG59XG5cbmNvbnN0IHdoaWNoID0gKGNtZCwgb3B0LCBjYikgPT4ge1xuICBpZiAodHlwZW9mIG9wdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gb3B0XG4gICAgb3B0ID0ge31cbiAgfVxuICBpZiAoIW9wdClcbiAgICBvcHQgPSB7fVxuXG4gIGNvbnN0IHsgcGF0aEVudiwgcGF0aEV4dCwgcGF0aEV4dEV4ZSB9ID0gZ2V0UGF0aEluZm8oY21kLCBvcHQpXG4gIGNvbnN0IGZvdW5kID0gW11cblxuICBjb25zdCBzdGVwID0gaSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaWYgKGkgPT09IHBhdGhFbnYubGVuZ3RoKVxuICAgICAgcmV0dXJuIG9wdC5hbGwgJiYgZm91bmQubGVuZ3RoID8gcmVzb2x2ZShmb3VuZClcbiAgICAgICAgOiByZWplY3QoZ2V0Tm90Rm91bmRFcnJvcihjbWQpKVxuXG4gICAgY29uc3QgcHBSYXcgPSBwYXRoRW52W2ldXG4gICAgY29uc3QgcGF0aFBhcnQgPSAvXlwiLipcIiQvLnRlc3QocHBSYXcpID8gcHBSYXcuc2xpY2UoMSwgLTEpIDogcHBSYXdcblxuICAgIGNvbnN0IHBDbWQgPSBwYXRoLmpvaW4ocGF0aFBhcnQsIGNtZClcbiAgICBjb25zdCBwID0gIXBhdGhQYXJ0ICYmIC9eXFwuW1xcXFxcXC9dLy50ZXN0KGNtZCkgPyBjbWQuc2xpY2UoMCwgMikgKyBwQ21kXG4gICAgICA6IHBDbWRcblxuICAgIHJlc29sdmUoc3ViU3RlcChwLCBpLCAwKSlcbiAgfSlcblxuICBjb25zdCBzdWJTdGVwID0gKHAsIGksIGlpKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaWYgKGlpID09PSBwYXRoRXh0Lmxlbmd0aClcbiAgICAgIHJldHVybiByZXNvbHZlKHN0ZXAoaSArIDEpKVxuICAgIGNvbnN0IGV4dCA9IHBhdGhFeHRbaWldXG4gICAgaXNleGUocCArIGV4dCwgeyBwYXRoRXh0OiBwYXRoRXh0RXhlIH0sIChlciwgaXMpID0+IHtcbiAgICAgIGlmICghZXIgJiYgaXMpIHtcbiAgICAgICAgaWYgKG9wdC5hbGwpXG4gICAgICAgICAgZm91bmQucHVzaChwICsgZXh0KVxuICAgICAgICBlbHNlXG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUocCArIGV4dClcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXNvbHZlKHN1YlN0ZXAocCwgaSwgaWkgKyAxKSlcbiAgICB9KVxuICB9KVxuXG4gIHJldHVybiBjYiA/IHN0ZXAoMCkudGhlbihyZXMgPT4gY2IobnVsbCwgcmVzKSwgY2IpIDogc3RlcCgwKVxufVxuXG5jb25zdCB3aGljaFN5bmMgPSAoY21kLCBvcHQpID0+IHtcbiAgb3B0ID0gb3B0IHx8IHt9XG5cbiAgY29uc3QgeyBwYXRoRW52LCBwYXRoRXh0LCBwYXRoRXh0RXhlIH0gPSBnZXRQYXRoSW5mbyhjbWQsIG9wdClcbiAgY29uc3QgZm91bmQgPSBbXVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aEVudi5sZW5ndGg7IGkgKyspIHtcbiAgICBjb25zdCBwcFJhdyA9IHBhdGhFbnZbaV1cbiAgICBjb25zdCBwYXRoUGFydCA9IC9eXCIuKlwiJC8udGVzdChwcFJhdykgPyBwcFJhdy5zbGljZSgxLCAtMSkgOiBwcFJhd1xuXG4gICAgY29uc3QgcENtZCA9IHBhdGguam9pbihwYXRoUGFydCwgY21kKVxuICAgIGNvbnN0IHAgPSAhcGF0aFBhcnQgJiYgL15cXC5bXFxcXFxcL10vLnRlc3QoY21kKSA/IGNtZC5zbGljZSgwLCAyKSArIHBDbWRcbiAgICAgIDogcENtZFxuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBwYXRoRXh0Lmxlbmd0aDsgaiArKykge1xuICAgICAgY29uc3QgY3VyID0gcCArIHBhdGhFeHRbal1cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGlzID0gaXNleGUuc3luYyhjdXIsIHsgcGF0aEV4dDogcGF0aEV4dEV4ZSB9KVxuICAgICAgICBpZiAoaXMpIHtcbiAgICAgICAgICBpZiAob3B0LmFsbClcbiAgICAgICAgICAgIGZvdW5kLnB1c2goY3VyKVxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiBjdXJcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXgpIHt9XG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdC5hbGwgJiYgZm91bmQubGVuZ3RoKVxuICAgIHJldHVybiBmb3VuZFxuXG4gIGlmIChvcHQubm90aHJvdylcbiAgICByZXR1cm4gbnVsbFxuXG4gIHRocm93IGdldE5vdEZvdW5kRXJyb3IoY21kKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdoaWNoXG53aGljaC5zeW5jID0gd2hpY2hTeW5jXG4iLCAiLy8gQSBzaW1wbGUgaW1wbGVtZW50YXRpb24gb2YgbWFrZS1hcnJheVxuZnVuY3Rpb24gbWFrZUFycmF5IChzdWJqZWN0KSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHN1YmplY3QpXG4gICAgPyBzdWJqZWN0XG4gICAgOiBbc3ViamVjdF1cbn1cblxuY29uc3QgRU1QVFkgPSAnJ1xuY29uc3QgU1BBQ0UgPSAnICdcbmNvbnN0IEVTQ0FQRSA9ICdcXFxcJ1xuY29uc3QgUkVHRVhfVEVTVF9CTEFOS19MSU5FID0gL15cXHMrJC9cbmNvbnN0IFJFR0VYX0lOVkFMSURfVFJBSUxJTkdfQkFDS1NMQVNIID0gLyg/OlteXFxcXF18XilcXFxcJC9cbmNvbnN0IFJFR0VYX1JFUExBQ0VfTEVBRElOR19FWENBUEVEX0VYQ0xBTUFUSU9OID0gL15cXFxcIS9cbmNvbnN0IFJFR0VYX1JFUExBQ0VfTEVBRElOR19FWENBUEVEX0hBU0ggPSAvXlxcXFwjL1xuY29uc3QgUkVHRVhfU1BMSVRBTExfQ1JMRiA9IC9cXHI/XFxuL2dcbi8vIC9mb28sXG4vLyAuL2Zvbyxcbi8vIC4uL2Zvbyxcbi8vIC5cbi8vIC4uXG5jb25zdCBSRUdFWF9URVNUX0lOVkFMSURfUEFUSCA9IC9eXFwuKlxcL3xeXFwuKyQvXG5cbmNvbnN0IFNMQVNIID0gJy8nXG5cbi8vIERvIG5vdCB1c2UgdGVybmFyeSBleHByZXNzaW9uIGhlcmUsIHNpbmNlIFwiaXN0YW5idWwgaWdub3JlIG5leHRcIiBpcyBidWdneVxubGV0IFRNUF9LRVlfSUdOT1JFID0gJ25vZGUtaWdub3JlJ1xuLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbmlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJykge1xuICBUTVBfS0VZX0lHTk9SRSA9IFN5bWJvbC5mb3IoJ25vZGUtaWdub3JlJylcbn1cbmNvbnN0IEtFWV9JR05PUkUgPSBUTVBfS0VZX0lHTk9SRVxuXG5jb25zdCBkZWZpbmUgPSAob2JqZWN0LCBrZXksIHZhbHVlKSA9PlxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHt2YWx1ZX0pXG5cbmNvbnN0IFJFR0VYX1JFR0VYUF9SQU5HRSA9IC8oWzAtel0pLShbMC16XSkvZ1xuXG5jb25zdCBSRVRVUk5fRkFMU0UgPSAoKSA9PiBmYWxzZVxuXG4vLyBTYW5pdGl6ZSB0aGUgcmFuZ2Ugb2YgYSByZWd1bGFyIGV4cHJlc3Npb25cbi8vIFRoZSBjYXNlcyBhcmUgY29tcGxpY2F0ZWQsIHNlZSB0ZXN0IGNhc2VzIGZvciBkZXRhaWxzXG5jb25zdCBzYW5pdGl6ZVJhbmdlID0gcmFuZ2UgPT4gcmFuZ2UucmVwbGFjZShcbiAgUkVHRVhfUkVHRVhQX1JBTkdFLFxuICAobWF0Y2gsIGZyb20sIHRvKSA9PiBmcm9tLmNoYXJDb2RlQXQoMCkgPD0gdG8uY2hhckNvZGVBdCgwKVxuICAgID8gbWF0Y2hcbiAgICAvLyBJbnZhbGlkIHJhbmdlIChvdXQgb2Ygb3JkZXIpIHdoaWNoIGlzIG9rIGZvciBnaXRpZ25vcmUgcnVsZXMgYnV0XG4gICAgLy8gICBmYXRhbCBmb3IgSmF2YVNjcmlwdCByZWd1bGFyIGV4cHJlc3Npb24sIHNvIGVsaW1pbmF0ZSBpdC5cbiAgICA6IEVNUFRZXG4pXG5cbi8vIFNlZSBmaXh0dXJlcyAjNTlcbmNvbnN0IGNsZWFuUmFuZ2VCYWNrU2xhc2ggPSBzbGFzaGVzID0+IHtcbiAgY29uc3Qge2xlbmd0aH0gPSBzbGFzaGVzXG4gIHJldHVybiBzbGFzaGVzLnNsaWNlKDAsIGxlbmd0aCAtIGxlbmd0aCAlIDIpXG59XG5cbi8vID4gSWYgdGhlIHBhdHRlcm4gZW5kcyB3aXRoIGEgc2xhc2gsXG4vLyA+IGl0IGlzIHJlbW92ZWQgZm9yIHRoZSBwdXJwb3NlIG9mIHRoZSBmb2xsb3dpbmcgZGVzY3JpcHRpb24sXG4vLyA+IGJ1dCBpdCB3b3VsZCBvbmx5IGZpbmQgYSBtYXRjaCB3aXRoIGEgZGlyZWN0b3J5LlxuLy8gPiBJbiBvdGhlciB3b3JkcywgZm9vLyB3aWxsIG1hdGNoIGEgZGlyZWN0b3J5IGZvbyBhbmQgcGF0aHMgdW5kZXJuZWF0aCBpdCxcbi8vID4gYnV0IHdpbGwgbm90IG1hdGNoIGEgcmVndWxhciBmaWxlIG9yIGEgc3ltYm9saWMgbGluayBmb29cbi8vID4gICh0aGlzIGlzIGNvbnNpc3RlbnQgd2l0aCB0aGUgd2F5IGhvdyBwYXRoc3BlYyB3b3JrcyBpbiBnZW5lcmFsIGluIEdpdCkuXG4vLyAnYGZvby9gJyB3aWxsIG5vdCBtYXRjaCByZWd1bGFyIGZpbGUgJ2Bmb29gJyBvciBzeW1ib2xpYyBsaW5rICdgZm9vYCdcbi8vIC0+IGlnbm9yZS1ydWxlcyB3aWxsIG5vdCBkZWFsIHdpdGggaXQsIGJlY2F1c2UgaXQgY29zdHMgZXh0cmEgYGZzLnN0YXRgIGNhbGxcbi8vICAgICAgeW91IGNvdWxkIHVzZSBvcHRpb24gYG1hcms6IHRydWVgIHdpdGggYGdsb2JgXG5cbi8vICdgZm9vL2AnIHNob3VsZCBub3QgY29udGludWUgd2l0aCB0aGUgJ2AuLmAnXG5jb25zdCBSRVBMQUNFUlMgPSBbXG5cbiAgW1xuICAgIC8vIHJlbW92ZSBCT01cbiAgICAvLyBUT0RPOlxuICAgIC8vIE90aGVyIHNpbWlsYXIgemVyby13aWR0aCBjaGFyYWN0ZXJzP1xuICAgIC9eXFx1RkVGRi8sXG4gICAgKCkgPT4gRU1QVFlcbiAgXSxcblxuICAvLyA+IFRyYWlsaW5nIHNwYWNlcyBhcmUgaWdub3JlZCB1bmxlc3MgdGhleSBhcmUgcXVvdGVkIHdpdGggYmFja3NsYXNoIChcIlxcXCIpXG4gIFtcbiAgICAvLyAoYVxcICkgLT4gKGEgKVxuICAgIC8vIChhICApIC0+IChhKVxuICAgIC8vIChhICkgLT4gKGEpXG4gICAgLy8gKGEgXFwgKSAtPiAoYSAgKVxuICAgIC8oKD86XFxcXFxcXFwpKj8pKFxcXFw/XFxzKykkLyxcbiAgICAoXywgbTEsIG0yKSA9PiBtMSArIChcbiAgICAgIG0yLmluZGV4T2YoJ1xcXFwnKSA9PT0gMFxuICAgICAgICA/IFNQQUNFXG4gICAgICAgIDogRU1QVFlcbiAgICApXG4gIF0sXG5cbiAgLy8gcmVwbGFjZSAoXFwgKSB3aXRoICcgJ1xuICAvLyAoXFwgKSAtPiAnICdcbiAgLy8gKFxcXFwgKSAtPiAnXFxcXCAnXG4gIC8vIChcXFxcXFwgKSAtPiAnXFxcXCAnXG4gIFtcbiAgICAvKFxcXFwrPylcXHMvZyxcbiAgICAoXywgbTEpID0+IHtcbiAgICAgIGNvbnN0IHtsZW5ndGh9ID0gbTFcbiAgICAgIHJldHVybiBtMS5zbGljZSgwLCBsZW5ndGggLSBsZW5ndGggJSAyKSArIFNQQUNFXG4gICAgfVxuICBdLFxuXG4gIC8vIEVzY2FwZSBtZXRhY2hhcmFjdGVyc1xuICAvLyB3aGljaCBpcyB3cml0dGVuIGRvd24gYnkgdXNlcnMgYnV0IG1lYW5zIHNwZWNpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMuXG5cbiAgLy8gPiBUaGVyZSBhcmUgMTIgY2hhcmFjdGVycyB3aXRoIHNwZWNpYWwgbWVhbmluZ3M6XG4gIC8vID4gLSB0aGUgYmFja3NsYXNoIFxcLFxuICAvLyA+IC0gdGhlIGNhcmV0IF4sXG4gIC8vID4gLSB0aGUgZG9sbGFyIHNpZ24gJCxcbiAgLy8gPiAtIHRoZSBwZXJpb2Qgb3IgZG90IC4sXG4gIC8vID4gLSB0aGUgdmVydGljYWwgYmFyIG9yIHBpcGUgc3ltYm9sIHwsXG4gIC8vID4gLSB0aGUgcXVlc3Rpb24gbWFyayA/LFxuICAvLyA+IC0gdGhlIGFzdGVyaXNrIG9yIHN0YXIgKixcbiAgLy8gPiAtIHRoZSBwbHVzIHNpZ24gKyxcbiAgLy8gPiAtIHRoZSBvcGVuaW5nIHBhcmVudGhlc2lzICgsXG4gIC8vID4gLSB0aGUgY2xvc2luZyBwYXJlbnRoZXNpcyApLFxuICAvLyA+IC0gYW5kIHRoZSBvcGVuaW5nIHNxdWFyZSBicmFja2V0IFssXG4gIC8vID4gLSB0aGUgb3BlbmluZyBjdXJseSBicmFjZSB7LFxuICAvLyA+IFRoZXNlIHNwZWNpYWwgY2hhcmFjdGVycyBhcmUgb2Z0ZW4gY2FsbGVkIFwibWV0YWNoYXJhY3RlcnNcIi5cbiAgW1xuICAgIC9bXFxcXCQufCorKCl7Xl0vZyxcbiAgICBtYXRjaCA9PiBgXFxcXCR7bWF0Y2h9YFxuICBdLFxuXG4gIFtcbiAgICAvLyA+IGEgcXVlc3Rpb24gbWFyayAoPykgbWF0Y2hlcyBhIHNpbmdsZSBjaGFyYWN0ZXJcbiAgICAvKD8hXFxcXClcXD8vZyxcbiAgICAoKSA9PiAnW14vXSdcbiAgXSxcblxuICAvLyBsZWFkaW5nIHNsYXNoXG4gIFtcblxuICAgIC8vID4gQSBsZWFkaW5nIHNsYXNoIG1hdGNoZXMgdGhlIGJlZ2lubmluZyBvZiB0aGUgcGF0aG5hbWUuXG4gICAgLy8gPiBGb3IgZXhhbXBsZSwgXCIvKi5jXCIgbWF0Y2hlcyBcImNhdC1maWxlLmNcIiBidXQgbm90IFwibW96aWxsYS1zaGExL3NoYTEuY1wiLlxuICAgIC8vIEEgbGVhZGluZyBzbGFzaCBtYXRjaGVzIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHBhdGhuYW1lXG4gICAgL15cXC8vLFxuICAgICgpID0+ICdeJ1xuICBdLFxuXG4gIC8vIHJlcGxhY2Ugc3BlY2lhbCBtZXRhY2hhcmFjdGVyIHNsYXNoIGFmdGVyIHRoZSBsZWFkaW5nIHNsYXNoXG4gIFtcbiAgICAvXFwvL2csXG4gICAgKCkgPT4gJ1xcXFwvJ1xuICBdLFxuXG4gIFtcbiAgICAvLyA+IEEgbGVhZGluZyBcIioqXCIgZm9sbG93ZWQgYnkgYSBzbGFzaCBtZWFucyBtYXRjaCBpbiBhbGwgZGlyZWN0b3JpZXMuXG4gICAgLy8gPiBGb3IgZXhhbXBsZSwgXCIqKi9mb29cIiBtYXRjaGVzIGZpbGUgb3IgZGlyZWN0b3J5IFwiZm9vXCIgYW55d2hlcmUsXG4gICAgLy8gPiB0aGUgc2FtZSBhcyBwYXR0ZXJuIFwiZm9vXCIuXG4gICAgLy8gPiBcIioqL2Zvby9iYXJcIiBtYXRjaGVzIGZpbGUgb3IgZGlyZWN0b3J5IFwiYmFyXCIgYW55d2hlcmUgdGhhdCBpcyBkaXJlY3RseVxuICAgIC8vID4gICB1bmRlciBkaXJlY3RvcnkgXCJmb29cIi5cbiAgICAvLyBOb3RpY2UgdGhhdCB0aGUgJyoncyBoYXZlIGJlZW4gcmVwbGFjZWQgYXMgJ1xcXFwqJ1xuICAgIC9eXFxeKlxcXFxcXCpcXFxcXFwqXFxcXFxcLy8sXG5cbiAgICAvLyAnKiovZm9vJyA8LT4gJ2ZvbydcbiAgICAoKSA9PiAnXig/Oi4qXFxcXC8pPydcbiAgXSxcblxuICAvLyBzdGFydGluZ1xuICBbXG4gICAgLy8gdGhlcmUgd2lsbCBiZSBubyBsZWFkaW5nICcvJ1xuICAgIC8vICAgKHdoaWNoIGhhcyBiZWVuIHJlcGxhY2VkIGJ5IHNlY3Rpb24gXCJsZWFkaW5nIHNsYXNoXCIpXG4gICAgLy8gSWYgc3RhcnRzIHdpdGggJyoqJywgYWRkaW5nIGEgJ14nIHRvIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYWxzbyB3b3Jrc1xuICAgIC9eKD89W15eXSkvLFxuICAgIGZ1bmN0aW9uIHN0YXJ0aW5nUmVwbGFjZXIgKCkge1xuICAgICAgLy8gSWYgaGFzIGEgc2xhc2ggYC9gIGF0IHRoZSBiZWdpbm5pbmcgb3IgbWlkZGxlXG4gICAgICByZXR1cm4gIS9cXC8oPyEkKS8udGVzdCh0aGlzKVxuICAgICAgICAvLyA+IFByaW9yIHRvIDIuMjIuMVxuICAgICAgICAvLyA+IElmIHRoZSBwYXR0ZXJuIGRvZXMgbm90IGNvbnRhaW4gYSBzbGFzaCAvLFxuICAgICAgICAvLyA+ICAgR2l0IHRyZWF0cyBpdCBhcyBhIHNoZWxsIGdsb2IgcGF0dGVyblxuICAgICAgICAvLyBBY3R1YWxseSwgaWYgdGhlcmUgaXMgb25seSBhIHRyYWlsaW5nIHNsYXNoLFxuICAgICAgICAvLyAgIGdpdCBhbHNvIHRyZWF0cyBpdCBhcyBhIHNoZWxsIGdsb2IgcGF0dGVyblxuXG4gICAgICAgIC8vIEFmdGVyIDIuMjIuMSAoY29tcGF0aWJsZSBidXQgY2xlYXJlcilcbiAgICAgICAgLy8gPiBJZiB0aGVyZSBpcyBhIHNlcGFyYXRvciBhdCB0aGUgYmVnaW5uaW5nIG9yIG1pZGRsZSAob3IgYm90aClcbiAgICAgICAgLy8gPiBvZiB0aGUgcGF0dGVybiwgdGhlbiB0aGUgcGF0dGVybiBpcyByZWxhdGl2ZSB0byB0aGUgZGlyZWN0b3J5XG4gICAgICAgIC8vID4gbGV2ZWwgb2YgdGhlIHBhcnRpY3VsYXIgLmdpdGlnbm9yZSBmaWxlIGl0c2VsZi5cbiAgICAgICAgLy8gPiBPdGhlcndpc2UgdGhlIHBhdHRlcm4gbWF5IGFsc28gbWF0Y2ggYXQgYW55IGxldmVsIGJlbG93XG4gICAgICAgIC8vID4gdGhlIC5naXRpZ25vcmUgbGV2ZWwuXG4gICAgICAgID8gJyg/Ol58XFxcXC8pJ1xuXG4gICAgICAgIC8vID4gT3RoZXJ3aXNlLCBHaXQgdHJlYXRzIHRoZSBwYXR0ZXJuIGFzIGEgc2hlbGwgZ2xvYiBzdWl0YWJsZSBmb3JcbiAgICAgICAgLy8gPiAgIGNvbnN1bXB0aW9uIGJ5IGZubWF0Y2goMylcbiAgICAgICAgOiAnXidcbiAgICB9XG4gIF0sXG5cbiAgLy8gdHdvIGdsb2JzdGFyc1xuICBbXG4gICAgLy8gVXNlIGxvb2thaGVhZCBhc3NlcnRpb25zIHNvIHRoYXQgd2UgY291bGQgbWF0Y2ggbW9yZSB0aGFuIG9uZSBgJy8qKidgXG4gICAgL1xcXFxcXC9cXFxcXFwqXFxcXFxcKig/PVxcXFxcXC98JCkvZyxcblxuICAgIC8vIFplcm8sIG9uZSBvciBzZXZlcmFsIGRpcmVjdG9yaWVzXG4gICAgLy8gc2hvdWxkIG5vdCB1c2UgJyonLCBvciBpdCB3aWxsIGJlIHJlcGxhY2VkIGJ5IHRoZSBuZXh0IHJlcGxhY2VyXG5cbiAgICAvLyBDaGVjayBpZiBpdCBpcyBub3QgdGhlIGxhc3QgYCcvKionYFxuICAgIChfLCBpbmRleCwgc3RyKSA9PiBpbmRleCArIDYgPCBzdHIubGVuZ3RoXG5cbiAgICAgIC8vIGNhc2U6IC8qKi9cbiAgICAgIC8vID4gQSBzbGFzaCBmb2xsb3dlZCBieSB0d28gY29uc2VjdXRpdmUgYXN0ZXJpc2tzIHRoZW4gYSBzbGFzaCBtYXRjaGVzXG4gICAgICAvLyA+ICAgemVybyBvciBtb3JlIGRpcmVjdG9yaWVzLlxuICAgICAgLy8gPiBGb3IgZXhhbXBsZSwgXCJhLyoqL2JcIiBtYXRjaGVzIFwiYS9iXCIsIFwiYS94L2JcIiwgXCJhL3gveS9iXCIgYW5kIHNvIG9uLlxuICAgICAgLy8gJy8qKi8nXG4gICAgICA/ICcoPzpcXFxcL1teXFxcXC9dKykqJ1xuXG4gICAgICAvLyBjYXNlOiAvKipcbiAgICAgIC8vID4gQSB0cmFpbGluZyBgXCIvKipcImAgbWF0Y2hlcyBldmVyeXRoaW5nIGluc2lkZS5cblxuICAgICAgLy8gIzIxOiBldmVyeXRoaW5nIGluc2lkZSBidXQgaXQgc2hvdWxkIG5vdCBpbmNsdWRlIHRoZSBjdXJyZW50IGZvbGRlclxuICAgICAgOiAnXFxcXC8uKydcbiAgXSxcblxuICAvLyBub3JtYWwgaW50ZXJtZWRpYXRlIHdpbGRjYXJkc1xuICBbXG4gICAgLy8gTmV2ZXIgcmVwbGFjZSBlc2NhcGVkICcqJ1xuICAgIC8vIGlnbm9yZSBydWxlICdcXConIHdpbGwgbWF0Y2ggdGhlIHBhdGggJyonXG5cbiAgICAvLyAnYWJjLiovJyAtPiBnb1xuICAgIC8vICdhYmMuKicgIC0+IHNraXAgdGhpcyBydWxlLFxuICAgIC8vICAgIGNveiB0cmFpbGluZyBzaW5nbGUgd2lsZGNhcmQgd2lsbCBiZSBoYW5kZWQgYnkgW3RyYWlsaW5nIHdpbGRjYXJkXVxuICAgIC8oXnxbXlxcXFxdKykoXFxcXFxcKikrKD89LispL2csXG5cbiAgICAvLyAnKi5qcycgbWF0Y2hlcyAnLmpzJ1xuICAgIC8vICcqLmpzJyBkb2Vzbid0IG1hdGNoICdhYmMnXG4gICAgKF8sIHAxLCBwMikgPT4ge1xuICAgICAgLy8gMS5cbiAgICAgIC8vID4gQW4gYXN0ZXJpc2sgXCIqXCIgbWF0Y2hlcyBhbnl0aGluZyBleGNlcHQgYSBzbGFzaC5cbiAgICAgIC8vIDIuXG4gICAgICAvLyA+IE90aGVyIGNvbnNlY3V0aXZlIGFzdGVyaXNrcyBhcmUgY29uc2lkZXJlZCByZWd1bGFyIGFzdGVyaXNrc1xuICAgICAgLy8gPiBhbmQgd2lsbCBtYXRjaCBhY2NvcmRpbmcgdG8gdGhlIHByZXZpb3VzIHJ1bGVzLlxuICAgICAgY29uc3QgdW5lc2NhcGVkID0gcDIucmVwbGFjZSgvXFxcXFxcKi9nLCAnW15cXFxcL10qJylcbiAgICAgIHJldHVybiBwMSArIHVuZXNjYXBlZFxuICAgIH1cbiAgXSxcblxuICBbXG4gICAgLy8gdW5lc2NhcGUsIHJldmVydCBzdGVwIDMgZXhjZXB0IGZvciBiYWNrIHNsYXNoXG4gICAgLy8gRm9yIGV4YW1wbGUsIGlmIGEgdXNlciBlc2NhcGUgYSAnXFxcXConLFxuICAgIC8vIGFmdGVyIHN0ZXAgMywgdGhlIHJlc3VsdCB3aWxsIGJlICdcXFxcXFxcXFxcXFwqJ1xuICAgIC9cXFxcXFxcXFxcXFwoPz1bJC58KisoKXteXSkvZyxcbiAgICAoKSA9PiBFU0NBUEVcbiAgXSxcblxuICBbXG4gICAgLy8gJ1xcXFxcXFxcJyAtPiAnXFxcXCdcbiAgICAvXFxcXFxcXFwvZyxcbiAgICAoKSA9PiBFU0NBUEVcbiAgXSxcblxuICBbXG4gICAgLy8gPiBUaGUgcmFuZ2Ugbm90YXRpb24sIGUuZy4gW2EtekEtWl0sXG4gICAgLy8gPiBjYW4gYmUgdXNlZCB0byBtYXRjaCBvbmUgb2YgdGhlIGNoYXJhY3RlcnMgaW4gYSByYW5nZS5cblxuICAgIC8vIGBcXGAgaXMgZXNjYXBlZCBieSBzdGVwIDNcbiAgICAvKFxcXFwpP1xcWyhbXlxcXS9dKj8pKFxcXFwqKSgkfFxcXSkvZyxcbiAgICAobWF0Y2gsIGxlYWRFc2NhcGUsIHJhbmdlLCBlbmRFc2NhcGUsIGNsb3NlKSA9PiBsZWFkRXNjYXBlID09PSBFU0NBUEVcbiAgICAgIC8vICdcXFxcW2Jhcl0nIC0+ICdcXFxcXFxcXFtiYXJcXFxcXSdcbiAgICAgID8gYFxcXFxbJHtyYW5nZX0ke2NsZWFuUmFuZ2VCYWNrU2xhc2goZW5kRXNjYXBlKX0ke2Nsb3NlfWBcbiAgICAgIDogY2xvc2UgPT09ICddJ1xuICAgICAgICA/IGVuZEVzY2FwZS5sZW5ndGggJSAyID09PSAwXG4gICAgICAgICAgLy8gQSBub3JtYWwgY2FzZSwgYW5kIGl0IGlzIGEgcmFuZ2Ugbm90YXRpb25cbiAgICAgICAgICAvLyAnW2Jhcl0nXG4gICAgICAgICAgLy8gJ1tiYXJcXFxcXFxcXF0nXG4gICAgICAgICAgPyBgWyR7c2FuaXRpemVSYW5nZShyYW5nZSl9JHtlbmRFc2NhcGV9XWBcbiAgICAgICAgICAvLyBJbnZhbGlkIHJhbmdlIG5vdGF0b25cbiAgICAgICAgICAvLyAnW2JhclxcXFxdJyAtPiAnW2JhclxcXFxcXFxcXSdcbiAgICAgICAgICA6ICdbXSdcbiAgICAgICAgOiAnW10nXG4gIF0sXG5cbiAgLy8gZW5kaW5nXG4gIFtcbiAgICAvLyAnanMnIHdpbGwgbm90IG1hdGNoICdqcy4nXG4gICAgLy8gJ2FiJyB3aWxsIG5vdCBtYXRjaCAnYWJjJ1xuICAgIC8oPzpbXipdKSQvLFxuXG4gICAgLy8gV1RGIVxuICAgIC8vIGh0dHBzOi8vZ2l0LXNjbS5jb20vZG9jcy9naXRpZ25vcmVcbiAgICAvLyBjaGFuZ2VzIGluIFsyLjIyLjFdKGh0dHBzOi8vZ2l0LXNjbS5jb20vZG9jcy9naXRpZ25vcmUvMi4yMi4xKVxuICAgIC8vIHdoaWNoIHJlLWZpeGVzICMyNCwgIzM4XG5cbiAgICAvLyA+IElmIHRoZXJlIGlzIGEgc2VwYXJhdG9yIGF0IHRoZSBlbmQgb2YgdGhlIHBhdHRlcm4gdGhlbiB0aGUgcGF0dGVyblxuICAgIC8vID4gd2lsbCBvbmx5IG1hdGNoIGRpcmVjdG9yaWVzLCBvdGhlcndpc2UgdGhlIHBhdHRlcm4gY2FuIG1hdGNoIGJvdGhcbiAgICAvLyA+IGZpbGVzIGFuZCBkaXJlY3Rvcmllcy5cblxuICAgIC8vICdqcyonIHdpbGwgbm90IG1hdGNoICdhLmpzJ1xuICAgIC8vICdqcy8nIHdpbGwgbm90IG1hdGNoICdhLmpzJ1xuICAgIC8vICdqcycgd2lsbCBtYXRjaCAnYS5qcycgYW5kICdhLmpzLydcbiAgICBtYXRjaCA9PiAvXFwvJC8udGVzdChtYXRjaClcbiAgICAgIC8vIGZvby8gd2lsbCBub3QgbWF0Y2ggJ2ZvbydcbiAgICAgID8gYCR7bWF0Y2h9JGBcbiAgICAgIC8vIGZvbyBtYXRjaGVzICdmb28nIGFuZCAnZm9vLydcbiAgICAgIDogYCR7bWF0Y2h9KD89JHxcXFxcLyQpYFxuICBdLFxuXG4gIC8vIHRyYWlsaW5nIHdpbGRjYXJkXG4gIFtcbiAgICAvKFxcXnxcXFxcXFwvKT9cXFxcXFwqJC8sXG4gICAgKF8sIHAxKSA9PiB7XG4gICAgICBjb25zdCBwcmVmaXggPSBwMVxuICAgICAgICAvLyAnXFxeJzpcbiAgICAgICAgLy8gJy8qJyBkb2VzIG5vdCBtYXRjaCBFTVBUWVxuICAgICAgICAvLyAnLyonIGRvZXMgbm90IG1hdGNoIGV2ZXJ5dGhpbmdcblxuICAgICAgICAvLyAnXFxcXFxcLyc6XG4gICAgICAgIC8vICdhYmMvKicgZG9lcyBub3QgbWF0Y2ggJ2FiYy8nXG4gICAgICAgID8gYCR7cDF9W14vXStgXG5cbiAgICAgICAgLy8gJ2EqJyBtYXRjaGVzICdhJ1xuICAgICAgICAvLyAnYSonIG1hdGNoZXMgJ2FhJ1xuICAgICAgICA6ICdbXi9dKidcblxuICAgICAgcmV0dXJuIGAke3ByZWZpeH0oPz0kfFxcXFwvJClgXG4gICAgfVxuICBdLFxuXVxuXG4vLyBBIHNpbXBsZSBjYWNoZSwgYmVjYXVzZSBhbiBpZ25vcmUgcnVsZSBvbmx5IGhhcyBvbmx5IG9uZSBjZXJ0YWluIG1lYW5pbmdcbmNvbnN0IHJlZ2V4Q2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpXG5cbi8vIEBwYXJhbSB7cGF0dGVybn1cbmNvbnN0IG1ha2VSZWdleCA9IChwYXR0ZXJuLCBpZ25vcmVDYXNlKSA9PiB7XG4gIGxldCBzb3VyY2UgPSByZWdleENhY2hlW3BhdHRlcm5dXG5cbiAgaWYgKCFzb3VyY2UpIHtcbiAgICBzb3VyY2UgPSBSRVBMQUNFUlMucmVkdWNlKFxuICAgICAgKHByZXYsIFttYXRjaGVyLCByZXBsYWNlcl0pID0+XG4gICAgICAgIHByZXYucmVwbGFjZShtYXRjaGVyLCByZXBsYWNlci5iaW5kKHBhdHRlcm4pKSxcbiAgICAgIHBhdHRlcm5cbiAgICApXG4gICAgcmVnZXhDYWNoZVtwYXR0ZXJuXSA9IHNvdXJjZVxuICB9XG5cbiAgcmV0dXJuIGlnbm9yZUNhc2VcbiAgICA/IG5ldyBSZWdFeHAoc291cmNlLCAnaScpXG4gICAgOiBuZXcgUmVnRXhwKHNvdXJjZSlcbn1cblxuY29uc3QgaXNTdHJpbmcgPSBzdWJqZWN0ID0+IHR5cGVvZiBzdWJqZWN0ID09PSAnc3RyaW5nJ1xuXG4vLyA+IEEgYmxhbmsgbGluZSBtYXRjaGVzIG5vIGZpbGVzLCBzbyBpdCBjYW4gc2VydmUgYXMgYSBzZXBhcmF0b3IgZm9yIHJlYWRhYmlsaXR5LlxuY29uc3QgY2hlY2tQYXR0ZXJuID0gcGF0dGVybiA9PiBwYXR0ZXJuXG4gICYmIGlzU3RyaW5nKHBhdHRlcm4pXG4gICYmICFSRUdFWF9URVNUX0JMQU5LX0xJTkUudGVzdChwYXR0ZXJuKVxuICAmJiAhUkVHRVhfSU5WQUxJRF9UUkFJTElOR19CQUNLU0xBU0gudGVzdChwYXR0ZXJuKVxuXG4gIC8vID4gQSBsaW5lIHN0YXJ0aW5nIHdpdGggIyBzZXJ2ZXMgYXMgYSBjb21tZW50LlxuICAmJiBwYXR0ZXJuLmluZGV4T2YoJyMnKSAhPT0gMFxuXG5jb25zdCBzcGxpdFBhdHRlcm4gPSBwYXR0ZXJuID0+IHBhdHRlcm4uc3BsaXQoUkVHRVhfU1BMSVRBTExfQ1JMRilcblxuY2xhc3MgSWdub3JlUnVsZSB7XG4gIGNvbnN0cnVjdG9yIChcbiAgICBvcmlnaW4sXG4gICAgcGF0dGVybixcbiAgICBuZWdhdGl2ZSxcbiAgICByZWdleFxuICApIHtcbiAgICB0aGlzLm9yaWdpbiA9IG9yaWdpblxuICAgIHRoaXMucGF0dGVybiA9IHBhdHRlcm5cbiAgICB0aGlzLm5lZ2F0aXZlID0gbmVnYXRpdmVcbiAgICB0aGlzLnJlZ2V4ID0gcmVnZXhcbiAgfVxufVxuXG5jb25zdCBjcmVhdGVSdWxlID0gKHBhdHRlcm4sIGlnbm9yZUNhc2UpID0+IHtcbiAgY29uc3Qgb3JpZ2luID0gcGF0dGVyblxuICBsZXQgbmVnYXRpdmUgPSBmYWxzZVxuXG4gIC8vID4gQW4gb3B0aW9uYWwgcHJlZml4IFwiIVwiIHdoaWNoIG5lZ2F0ZXMgdGhlIHBhdHRlcm47XG4gIGlmIChwYXR0ZXJuLmluZGV4T2YoJyEnKSA9PT0gMCkge1xuICAgIG5lZ2F0aXZlID0gdHJ1ZVxuICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnN1YnN0cigxKVxuICB9XG5cbiAgcGF0dGVybiA9IHBhdHRlcm5cbiAgLy8gPiBQdXQgYSBiYWNrc2xhc2ggKFwiXFxcIikgaW4gZnJvbnQgb2YgdGhlIGZpcnN0IFwiIVwiIGZvciBwYXR0ZXJucyB0aGF0XG4gIC8vID4gICBiZWdpbiB3aXRoIGEgbGl0ZXJhbCBcIiFcIiwgZm9yIGV4YW1wbGUsIGBcIlxcIWltcG9ydGFudCEudHh0XCJgLlxuICAucmVwbGFjZShSRUdFWF9SRVBMQUNFX0xFQURJTkdfRVhDQVBFRF9FWENMQU1BVElPTiwgJyEnKVxuICAvLyA+IFB1dCBhIGJhY2tzbGFzaCAoXCJcXFwiKSBpbiBmcm9udCBvZiB0aGUgZmlyc3QgaGFzaCBmb3IgcGF0dGVybnMgdGhhdFxuICAvLyA+ICAgYmVnaW4gd2l0aCBhIGhhc2guXG4gIC5yZXBsYWNlKFJFR0VYX1JFUExBQ0VfTEVBRElOR19FWENBUEVEX0hBU0gsICcjJylcblxuICBjb25zdCByZWdleCA9IG1ha2VSZWdleChwYXR0ZXJuLCBpZ25vcmVDYXNlKVxuXG4gIHJldHVybiBuZXcgSWdub3JlUnVsZShcbiAgICBvcmlnaW4sXG4gICAgcGF0dGVybixcbiAgICBuZWdhdGl2ZSxcbiAgICByZWdleFxuICApXG59XG5cbmNvbnN0IHRocm93RXJyb3IgPSAobWVzc2FnZSwgQ3RvcikgPT4ge1xuICB0aHJvdyBuZXcgQ3RvcihtZXNzYWdlKVxufVxuXG5jb25zdCBjaGVja1BhdGggPSAocGF0aCwgb3JpZ2luYWxQYXRoLCBkb1Rocm93KSA9PiB7XG4gIGlmICghaXNTdHJpbmcocGF0aCkpIHtcbiAgICByZXR1cm4gZG9UaHJvdyhcbiAgICAgIGBwYXRoIG11c3QgYmUgYSBzdHJpbmcsIGJ1dCBnb3QgXFxgJHtvcmlnaW5hbFBhdGh9XFxgYCxcbiAgICAgIFR5cGVFcnJvclxuICAgIClcbiAgfVxuXG4gIC8vIFdlIGRvbid0IGtub3cgaWYgd2Ugc2hvdWxkIGlnbm9yZSBFTVBUWSwgc28gdGhyb3dcbiAgaWYgKCFwYXRoKSB7XG4gICAgcmV0dXJuIGRvVGhyb3coYHBhdGggbXVzdCBub3QgYmUgZW1wdHlgLCBUeXBlRXJyb3IpXG4gIH1cblxuICAvLyBDaGVjayBpZiBpdCBpcyBhIHJlbGF0aXZlIHBhdGhcbiAgaWYgKGNoZWNrUGF0aC5pc05vdFJlbGF0aXZlKHBhdGgpKSB7XG4gICAgY29uc3QgciA9ICdgcGF0aC5yZWxhdGl2ZSgpYGQnXG4gICAgcmV0dXJuIGRvVGhyb3coXG4gICAgICBgcGF0aCBzaG91bGQgYmUgYSAke3J9IHN0cmluZywgYnV0IGdvdCBcIiR7b3JpZ2luYWxQYXRofVwiYCxcbiAgICAgIFJhbmdlRXJyb3JcbiAgICApXG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG5jb25zdCBpc05vdFJlbGF0aXZlID0gcGF0aCA9PiBSRUdFWF9URVNUX0lOVkFMSURfUEFUSC50ZXN0KHBhdGgpXG5cbmNoZWNrUGF0aC5pc05vdFJlbGF0aXZlID0gaXNOb3RSZWxhdGl2ZVxuY2hlY2tQYXRoLmNvbnZlcnQgPSBwID0+IHBcblxuY2xhc3MgSWdub3JlIHtcbiAgY29uc3RydWN0b3IgKHtcbiAgICBpZ25vcmVjYXNlID0gdHJ1ZSxcbiAgICBpZ25vcmVDYXNlID0gaWdub3JlY2FzZSxcbiAgICBhbGxvd1JlbGF0aXZlUGF0aHMgPSBmYWxzZVxuICB9ID0ge30pIHtcbiAgICBkZWZpbmUodGhpcywgS0VZX0lHTk9SRSwgdHJ1ZSlcblxuICAgIHRoaXMuX3J1bGVzID0gW11cbiAgICB0aGlzLl9pZ25vcmVDYXNlID0gaWdub3JlQ2FzZVxuICAgIHRoaXMuX2FsbG93UmVsYXRpdmVQYXRocyA9IGFsbG93UmVsYXRpdmVQYXRoc1xuICAgIHRoaXMuX2luaXRDYWNoZSgpXG4gIH1cblxuICBfaW5pdENhY2hlICgpIHtcbiAgICB0aGlzLl9pZ25vcmVDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbClcbiAgICB0aGlzLl90ZXN0Q2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpXG4gIH1cblxuICBfYWRkUGF0dGVybiAocGF0dGVybikge1xuICAgIC8vICMzMlxuICAgIGlmIChwYXR0ZXJuICYmIHBhdHRlcm5bS0VZX0lHTk9SRV0pIHtcbiAgICAgIHRoaXMuX3J1bGVzID0gdGhpcy5fcnVsZXMuY29uY2F0KHBhdHRlcm4uX3J1bGVzKVxuICAgICAgdGhpcy5fYWRkZWQgPSB0cnVlXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoY2hlY2tQYXR0ZXJuKHBhdHRlcm4pKSB7XG4gICAgICBjb25zdCBydWxlID0gY3JlYXRlUnVsZShwYXR0ZXJuLCB0aGlzLl9pZ25vcmVDYXNlKVxuICAgICAgdGhpcy5fYWRkZWQgPSB0cnVlXG4gICAgICB0aGlzLl9ydWxlcy5wdXNoKHJ1bGUpXG4gICAgfVxuICB9XG5cbiAgLy8gQHBhcmFtIHtBcnJheTxzdHJpbmc+IHwgc3RyaW5nIHwgSWdub3JlfSBwYXR0ZXJuXG4gIGFkZCAocGF0dGVybikge1xuICAgIHRoaXMuX2FkZGVkID0gZmFsc2VcblxuICAgIG1ha2VBcnJheShcbiAgICAgIGlzU3RyaW5nKHBhdHRlcm4pXG4gICAgICAgID8gc3BsaXRQYXR0ZXJuKHBhdHRlcm4pXG4gICAgICAgIDogcGF0dGVyblxuICAgICkuZm9yRWFjaCh0aGlzLl9hZGRQYXR0ZXJuLCB0aGlzKVxuXG4gICAgLy8gU29tZSBydWxlcyBoYXZlIGp1c3QgYWRkZWQgdG8gdGhlIGlnbm9yZSxcbiAgICAvLyBtYWtpbmcgdGhlIGJlaGF2aW9yIGNoYW5nZWQuXG4gICAgaWYgKHRoaXMuX2FkZGVkKSB7XG4gICAgICB0aGlzLl9pbml0Q2FjaGUoKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvLyBsZWdhY3lcbiAgYWRkUGF0dGVybiAocGF0dGVybikge1xuICAgIHJldHVybiB0aGlzLmFkZChwYXR0ZXJuKVxuICB9XG5cbiAgLy8gICAgICAgICAgfCAgICAgICAgICAgaWdub3JlZCA6IHVuaWdub3JlZFxuICAvLyBuZWdhdGl2ZSB8ICAgMDowICAgfCAgIDA6MSAgIHwgICAxOjAgICB8ICAgMToxXG4gIC8vIC0tLS0tLS0tIHwgLS0tLS0tLSB8IC0tLS0tLS0gfCAtLS0tLS0tIHwgLS0tLS0tLS1cbiAgLy8gICAgIDAgICAgfCAgVEVTVCAgIHwgIFRFU1QgICB8ICBTS0lQICAgfCAgICBYXG4gIC8vICAgICAxICAgIHwgIFRFU1RJRiB8ICBTS0lQICAgfCAgVEVTVCAgIHwgICAgWFxuXG4gIC8vIC0gU0tJUDogYWx3YXlzIHNraXBcbiAgLy8gLSBURVNUOiBhbHdheXMgdGVzdFxuICAvLyAtIFRFU1RJRjogb25seSB0ZXN0IGlmIGNoZWNrVW5pZ25vcmVkXG4gIC8vIC0gWDogdGhhdCBuZXZlciBoYXBwZW5cblxuICAvLyBAcGFyYW0ge2Jvb2xlYW59IHdoZXRoZXIgc2hvdWxkIGNoZWNrIGlmIHRoZSBwYXRoIGlzIHVuaWdub3JlZCxcbiAgLy8gICBzZXR0aW5nIGBjaGVja1VuaWdub3JlZGAgdG8gYGZhbHNlYCBjb3VsZCByZWR1Y2UgYWRkaXRpb25hbFxuICAvLyAgIHBhdGggbWF0Y2hpbmcuXG5cbiAgLy8gQHJldHVybnMge1Rlc3RSZXN1bHR9IHRydWUgaWYgYSBmaWxlIGlzIGlnbm9yZWRcbiAgX3Rlc3RPbmUgKHBhdGgsIGNoZWNrVW5pZ25vcmVkKSB7XG4gICAgbGV0IGlnbm9yZWQgPSBmYWxzZVxuICAgIGxldCB1bmlnbm9yZWQgPSBmYWxzZVxuXG4gICAgdGhpcy5fcnVsZXMuZm9yRWFjaChydWxlID0+IHtcbiAgICAgIGNvbnN0IHtuZWdhdGl2ZX0gPSBydWxlXG4gICAgICBpZiAoXG4gICAgICAgIHVuaWdub3JlZCA9PT0gbmVnYXRpdmUgJiYgaWdub3JlZCAhPT0gdW5pZ25vcmVkXG4gICAgICAgIHx8IG5lZ2F0aXZlICYmICFpZ25vcmVkICYmICF1bmlnbm9yZWQgJiYgIWNoZWNrVW5pZ25vcmVkXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG1hdGNoZWQgPSBydWxlLnJlZ2V4LnRlc3QocGF0aClcblxuICAgICAgaWYgKG1hdGNoZWQpIHtcbiAgICAgICAgaWdub3JlZCA9ICFuZWdhdGl2ZVxuICAgICAgICB1bmlnbm9yZWQgPSBuZWdhdGl2ZVxuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4ge1xuICAgICAgaWdub3JlZCxcbiAgICAgIHVuaWdub3JlZFxuICAgIH1cbiAgfVxuXG4gIC8vIEByZXR1cm5zIHtUZXN0UmVzdWx0fVxuICBfdGVzdCAob3JpZ2luYWxQYXRoLCBjYWNoZSwgY2hlY2tVbmlnbm9yZWQsIHNsaWNlcykge1xuICAgIGNvbnN0IHBhdGggPSBvcmlnaW5hbFBhdGhcbiAgICAgIC8vIFN1cHBvcnRzIG51bGxhYmxlIHBhdGhcbiAgICAgICYmIGNoZWNrUGF0aC5jb252ZXJ0KG9yaWdpbmFsUGF0aClcblxuICAgIGNoZWNrUGF0aChcbiAgICAgIHBhdGgsXG4gICAgICBvcmlnaW5hbFBhdGgsXG4gICAgICB0aGlzLl9hbGxvd1JlbGF0aXZlUGF0aHNcbiAgICAgICAgPyBSRVRVUk5fRkFMU0VcbiAgICAgICAgOiB0aHJvd0Vycm9yXG4gICAgKVxuXG4gICAgcmV0dXJuIHRoaXMuX3QocGF0aCwgY2FjaGUsIGNoZWNrVW5pZ25vcmVkLCBzbGljZXMpXG4gIH1cblxuICBfdCAocGF0aCwgY2FjaGUsIGNoZWNrVW5pZ25vcmVkLCBzbGljZXMpIHtcbiAgICBpZiAocGF0aCBpbiBjYWNoZSkge1xuICAgICAgcmV0dXJuIGNhY2hlW3BhdGhdXG4gICAgfVxuXG4gICAgaWYgKCFzbGljZXMpIHtcbiAgICAgIC8vIHBhdGgvdG8vYS5qc1xuICAgICAgLy8gWydwYXRoJywgJ3RvJywgJ2EuanMnXVxuICAgICAgc2xpY2VzID0gcGF0aC5zcGxpdChTTEFTSClcbiAgICB9XG5cbiAgICBzbGljZXMucG9wKClcblxuICAgIC8vIElmIHRoZSBwYXRoIGhhcyBubyBwYXJlbnQgZGlyZWN0b3J5LCBqdXN0IHRlc3QgaXRcbiAgICBpZiAoIXNsaWNlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBjYWNoZVtwYXRoXSA9IHRoaXMuX3Rlc3RPbmUocGF0aCwgY2hlY2tVbmlnbm9yZWQpXG4gICAgfVxuXG4gICAgY29uc3QgcGFyZW50ID0gdGhpcy5fdChcbiAgICAgIHNsaWNlcy5qb2luKFNMQVNIKSArIFNMQVNILFxuICAgICAgY2FjaGUsXG4gICAgICBjaGVja1VuaWdub3JlZCxcbiAgICAgIHNsaWNlc1xuICAgIClcblxuICAgIC8vIElmIHRoZSBwYXRoIGNvbnRhaW5zIGEgcGFyZW50IGRpcmVjdG9yeSwgY2hlY2sgdGhlIHBhcmVudCBmaXJzdFxuICAgIHJldHVybiBjYWNoZVtwYXRoXSA9IHBhcmVudC5pZ25vcmVkXG4gICAgICAvLyA+IEl0IGlzIG5vdCBwb3NzaWJsZSB0byByZS1pbmNsdWRlIGEgZmlsZSBpZiBhIHBhcmVudCBkaXJlY3Rvcnkgb2ZcbiAgICAgIC8vID4gICB0aGF0IGZpbGUgaXMgZXhjbHVkZWQuXG4gICAgICA/IHBhcmVudFxuICAgICAgOiB0aGlzLl90ZXN0T25lKHBhdGgsIGNoZWNrVW5pZ25vcmVkKVxuICB9XG5cbiAgaWdub3JlcyAocGF0aCkge1xuICAgIHJldHVybiB0aGlzLl90ZXN0KHBhdGgsIHRoaXMuX2lnbm9yZUNhY2hlLCBmYWxzZSkuaWdub3JlZFxuICB9XG5cbiAgY3JlYXRlRmlsdGVyICgpIHtcbiAgICByZXR1cm4gcGF0aCA9PiAhdGhpcy5pZ25vcmVzKHBhdGgpXG4gIH1cblxuICBmaWx0ZXIgKHBhdGhzKSB7XG4gICAgcmV0dXJuIG1ha2VBcnJheShwYXRocykuZmlsdGVyKHRoaXMuY3JlYXRlRmlsdGVyKCkpXG4gIH1cblxuICAvLyBAcmV0dXJucyB7VGVzdFJlc3VsdH1cbiAgdGVzdCAocGF0aCkge1xuICAgIHJldHVybiB0aGlzLl90ZXN0KHBhdGgsIHRoaXMuX3Rlc3RDYWNoZSwgdHJ1ZSlcbiAgfVxufVxuXG5jb25zdCBmYWN0b3J5ID0gb3B0aW9ucyA9PiBuZXcgSWdub3JlKG9wdGlvbnMpXG5cbmNvbnN0IGlzUGF0aFZhbGlkID0gcGF0aCA9PlxuICBjaGVja1BhdGgocGF0aCAmJiBjaGVja1BhdGguY29udmVydChwYXRoKSwgcGF0aCwgUkVUVVJOX0ZBTFNFKVxuXG5mYWN0b3J5LmlzUGF0aFZhbGlkID0gaXNQYXRoVmFsaWRcblxuLy8gRml4ZXMgdHlwZXNjcmlwdFxuZmFjdG9yeS5kZWZhdWx0ID0gZmFjdG9yeVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnlcblxuLy8gV2luZG93c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuaWYgKFxuICAvLyBEZXRlY3QgYHByb2Nlc3NgIHNvIHRoYXQgaXQgY2FuIHJ1biBpbiBicm93c2Vycy5cbiAgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnXG4gICYmIChcbiAgICBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudi5JR05PUkVfVEVTVF9XSU4zMlxuICAgIHx8IHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMidcbiAgKVxuKSB7XG4gIC8qIGVzbGludCBuby1jb250cm9sLXJlZ2V4OiBcIm9mZlwiICovXG4gIGNvbnN0IG1ha2VQb3NpeCA9IHN0ciA9PiAvXlxcXFxcXFxcXFw/XFxcXC8udGVzdChzdHIpXG4gIHx8IC9bXCI8PnxcXHUwMDAwLVxcdTAwMUZdKy91LnRlc3Qoc3RyKVxuICAgID8gc3RyXG4gICAgOiBzdHIucmVwbGFjZSgvXFxcXC9nLCAnLycpXG5cbiAgY2hlY2tQYXRoLmNvbnZlcnQgPSBtYWtlUG9zaXhcblxuICAvLyAnQzpcXFxcZm9vJyAgICAgPC0gJ0M6XFxcXGZvbycgaGFzIGJlZW4gY29udmVydGVkIHRvICdDOi8nXG4gIC8vICdkOlxcXFxmb28nXG4gIGNvbnN0IFJFR0lYX0lTX1dJTkRPV1NfUEFUSF9BQlNPTFVURSA9IC9eW2Etel06XFwvL2lcbiAgY2hlY2tQYXRoLmlzTm90UmVsYXRpdmUgPSBwYXRoID0+XG4gICAgUkVHSVhfSVNfV0lORE9XU19QQVRIX0FCU09MVVRFLnRlc3QocGF0aClcbiAgICB8fCBpc05vdFJlbGF0aXZlKHBhdGgpXG59XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgZXhwb3J0cy5kZWZhdWx0cyA9IHtcbiAgICBcIjAuMVwiOiB7XG4gICAgICBleHBsaWNpdENoYXJrZXk6IGZhbHNlLFxuICAgICAgdHJpbTogdHJ1ZSxcbiAgICAgIG5vcm1hbGl6ZTogdHJ1ZSxcbiAgICAgIG5vcm1hbGl6ZVRhZ3M6IGZhbHNlLFxuICAgICAgYXR0cmtleTogXCJAXCIsXG4gICAgICBjaGFya2V5OiBcIiNcIixcbiAgICAgIGV4cGxpY2l0QXJyYXk6IGZhbHNlLFxuICAgICAgaWdub3JlQXR0cnM6IGZhbHNlLFxuICAgICAgbWVyZ2VBdHRyczogZmFsc2UsXG4gICAgICBleHBsaWNpdFJvb3Q6IGZhbHNlLFxuICAgICAgdmFsaWRhdG9yOiBudWxsLFxuICAgICAgeG1sbnM6IGZhbHNlLFxuICAgICAgZXhwbGljaXRDaGlsZHJlbjogZmFsc2UsXG4gICAgICBjaGlsZGtleTogJ0BAJyxcbiAgICAgIGNoYXJzQXNDaGlsZHJlbjogZmFsc2UsXG4gICAgICBpbmNsdWRlV2hpdGVDaGFyczogZmFsc2UsXG4gICAgICBhc3luYzogZmFsc2UsXG4gICAgICBzdHJpY3Q6IHRydWUsXG4gICAgICBhdHRyTmFtZVByb2Nlc3NvcnM6IG51bGwsXG4gICAgICBhdHRyVmFsdWVQcm9jZXNzb3JzOiBudWxsLFxuICAgICAgdGFnTmFtZVByb2Nlc3NvcnM6IG51bGwsXG4gICAgICB2YWx1ZVByb2Nlc3NvcnM6IG51bGwsXG4gICAgICBlbXB0eVRhZzogJydcbiAgICB9LFxuICAgIFwiMC4yXCI6IHtcbiAgICAgIGV4cGxpY2l0Q2hhcmtleTogZmFsc2UsXG4gICAgICB0cmltOiBmYWxzZSxcbiAgICAgIG5vcm1hbGl6ZTogZmFsc2UsXG4gICAgICBub3JtYWxpemVUYWdzOiBmYWxzZSxcbiAgICAgIGF0dHJrZXk6IFwiJFwiLFxuICAgICAgY2hhcmtleTogXCJfXCIsXG4gICAgICBleHBsaWNpdEFycmF5OiB0cnVlLFxuICAgICAgaWdub3JlQXR0cnM6IGZhbHNlLFxuICAgICAgbWVyZ2VBdHRyczogZmFsc2UsXG4gICAgICBleHBsaWNpdFJvb3Q6IHRydWUsXG4gICAgICB2YWxpZGF0b3I6IG51bGwsXG4gICAgICB4bWxuczogZmFsc2UsXG4gICAgICBleHBsaWNpdENoaWxkcmVuOiBmYWxzZSxcbiAgICAgIHByZXNlcnZlQ2hpbGRyZW5PcmRlcjogZmFsc2UsXG4gICAgICBjaGlsZGtleTogJyQkJyxcbiAgICAgIGNoYXJzQXNDaGlsZHJlbjogZmFsc2UsXG4gICAgICBpbmNsdWRlV2hpdGVDaGFyczogZmFsc2UsXG4gICAgICBhc3luYzogZmFsc2UsXG4gICAgICBzdHJpY3Q6IHRydWUsXG4gICAgICBhdHRyTmFtZVByb2Nlc3NvcnM6IG51bGwsXG4gICAgICBhdHRyVmFsdWVQcm9jZXNzb3JzOiBudWxsLFxuICAgICAgdGFnTmFtZVByb2Nlc3NvcnM6IG51bGwsXG4gICAgICB2YWx1ZVByb2Nlc3NvcnM6IG51bGwsXG4gICAgICByb290TmFtZTogJ3Jvb3QnLFxuICAgICAgeG1sZGVjOiB7XG4gICAgICAgICd2ZXJzaW9uJzogJzEuMCcsXG4gICAgICAgICdlbmNvZGluZyc6ICdVVEYtOCcsXG4gICAgICAgICdzdGFuZGFsb25lJzogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGRvY3R5cGU6IG51bGwsXG4gICAgICByZW5kZXJPcHRzOiB7XG4gICAgICAgICdwcmV0dHknOiB0cnVlLFxuICAgICAgICAnaW5kZW50JzogJyAgJyxcbiAgICAgICAgJ25ld2xpbmUnOiAnXFxuJ1xuICAgICAgfSxcbiAgICAgIGhlYWRsZXNzOiBmYWxzZSxcbiAgICAgIGNodW5rU2l6ZTogMTAwMDAsXG4gICAgICBlbXB0eVRhZzogJycsXG4gICAgICBjZGF0YTogZmFsc2VcbiAgICB9XG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIGFzc2lnbiwgZ2V0VmFsdWUsIGlzQXJyYXksIGlzRW1wdHksIGlzRnVuY3Rpb24sIGlzT2JqZWN0LCBpc1BsYWluT2JqZWN0LFxuICAgIHNsaWNlID0gW10uc2xpY2UsXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIGFzc2lnbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpLCBrZXksIGxlbiwgc291cmNlLCBzb3VyY2VzLCB0YXJnZXQ7XG4gICAgdGFyZ2V0ID0gYXJndW1lbnRzWzBdLCBzb3VyY2VzID0gMiA8PSBhcmd1bWVudHMubGVuZ3RoID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpIDogW107XG4gICAgaWYgKGlzRnVuY3Rpb24oT2JqZWN0LmFzc2lnbikpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gc291cmNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBzb3VyY2UgPSBzb3VyY2VzW2ldO1xuICAgICAgICBpZiAoc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmICghaGFzUHJvcC5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2YWwpIHtcbiAgICByZXR1cm4gISF2YWwgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG4gIH07XG5cbiAgaXNPYmplY3QgPSBmdW5jdGlvbih2YWwpIHtcbiAgICB2YXIgcmVmO1xuICAgIHJldHVybiAhIXZhbCAmJiAoKHJlZiA9IHR5cGVvZiB2YWwpID09PSAnZnVuY3Rpb24nIHx8IHJlZiA9PT0gJ29iamVjdCcpO1xuICB9O1xuXG4gIGlzQXJyYXkgPSBmdW5jdGlvbih2YWwpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihBcnJheS5pc0FycmF5KSkge1xuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIH1cbiAgfTtcblxuICBpc0VtcHR5ID0gZnVuY3Rpb24odmFsKSB7XG4gICAgdmFyIGtleTtcbiAgICBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXR1cm4gIXZhbC5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoa2V5IGluIHZhbCkge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbCh2YWwsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgaXNQbGFpbk9iamVjdCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHZhciBjdG9yLCBwcm90bztcbiAgICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiAocHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsKSkgJiYgKGN0b3IgPSBwcm90by5jb25zdHJ1Y3RvcikgJiYgKHR5cGVvZiBjdG9yID09PSAnZnVuY3Rpb24nKSAmJiAoY3RvciBpbnN0YW5jZW9mIGN0b3IpICYmIChGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChjdG9yKSA9PT0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoT2JqZWN0KSk7XG4gIH07XG5cbiAgZ2V0VmFsdWUgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoaXNGdW5jdGlvbihvYmoudmFsdWVPZikpIHtcbiAgICAgIHJldHVybiBvYmoudmFsdWVPZigpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0cy5hc3NpZ24gPSBhc3NpZ247XG5cbiAgbW9kdWxlLmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbiAgbW9kdWxlLmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuICBtb2R1bGUuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuICBtb2R1bGUuZXhwb3J0cy5pc0VtcHR5ID0gaXNFbXB0eTtcblxuICBtb2R1bGUuZXhwb3J0cy5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcblxuICBtb2R1bGUuZXhwb3J0cy5nZXRWYWx1ZSA9IGdldFZhbHVlO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxET01JbXBsZW1lbnRhdGlvbjtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERPTUltcGxlbWVudGF0aW9uID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFhNTERPTUltcGxlbWVudGF0aW9uKCkge31cblxuICAgIFhNTERPTUltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5oYXNGZWF0dXJlID0gZnVuY3Rpb24oZmVhdHVyZSwgdmVyc2lvbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIFhNTERPTUltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5jcmVhdGVEb2N1bWVudFR5cGUgPSBmdW5jdGlvbihxdWFsaWZpZWROYW1lLCBwdWJsaWNJZCwgc3lzdGVtSWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH07XG5cbiAgICBYTUxET01JbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUuY3JlYXRlRG9jdW1lbnQgPSBmdW5jdGlvbihuYW1lc3BhY2VVUkksIHF1YWxpZmllZE5hbWUsIGRvY3R5cGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH07XG5cbiAgICBYTUxET01JbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUuY3JlYXRlSFRNTERvY3VtZW50ID0gZnVuY3Rpb24odGl0bGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH07XG5cbiAgICBYTUxET01JbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUuZ2V0RmVhdHVyZSA9IGZ1bmN0aW9uKGZlYXR1cmUsIHZlcnNpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRE9NSW1wbGVtZW50YXRpb247XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MRE9NRXJyb3JIYW5kbGVyO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRE9NRXJyb3JIYW5kbGVyID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFhNTERPTUVycm9ySGFuZGxlcigpIHt9XG5cbiAgICBYTUxET01FcnJvckhhbmRsZXIucHJvdG90eXBlLmhhbmRsZUVycm9yID0gZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxET01FcnJvckhhbmRsZXI7XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MRE9NU3RyaW5nTGlzdDtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERPTVN0cmluZ0xpc3QgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MRE9NU3RyaW5nTGlzdChhcnIpIHtcbiAgICAgIHRoaXMuYXJyID0gYXJyIHx8IFtdO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxET01TdHJpbmdMaXN0LnByb3RvdHlwZSwgJ2xlbmd0aCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFyci5sZW5ndGg7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxET01TdHJpbmdMaXN0LnByb3RvdHlwZS5pdGVtID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIHJldHVybiB0aGlzLmFycltpbmRleF0gfHwgbnVsbDtcbiAgICB9O1xuXG4gICAgWE1MRE9NU3RyaW5nTGlzdC5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbihzdHIpIHtcbiAgICAgIHJldHVybiB0aGlzLmFyci5pbmRleE9mKHN0cikgIT09IC0xO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRE9NU3RyaW5nTGlzdDtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxET01Db25maWd1cmF0aW9uLCBYTUxET01FcnJvckhhbmRsZXIsIFhNTERPTVN0cmluZ0xpc3Q7XG5cbiAgWE1MRE9NRXJyb3JIYW5kbGVyID0gcmVxdWlyZSgnLi9YTUxET01FcnJvckhhbmRsZXInKTtcblxuICBYTUxET01TdHJpbmdMaXN0ID0gcmVxdWlyZSgnLi9YTUxET01TdHJpbmdMaXN0Jyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxET01Db25maWd1cmF0aW9uID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFhNTERPTUNvbmZpZ3VyYXRpb24oKSB7XG4gICAgICB2YXIgY2xvbmVkU2VsZjtcbiAgICAgIHRoaXMuZGVmYXVsdFBhcmFtcyA9IHtcbiAgICAgICAgXCJjYW5vbmljYWwtZm9ybVwiOiBmYWxzZSxcbiAgICAgICAgXCJjZGF0YS1zZWN0aW9uc1wiOiBmYWxzZSxcbiAgICAgICAgXCJjb21tZW50c1wiOiBmYWxzZSxcbiAgICAgICAgXCJkYXRhdHlwZS1ub3JtYWxpemF0aW9uXCI6IGZhbHNlLFxuICAgICAgICBcImVsZW1lbnQtY29udGVudC13aGl0ZXNwYWNlXCI6IHRydWUsXG4gICAgICAgIFwiZW50aXRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJlcnJvci1oYW5kbGVyXCI6IG5ldyBYTUxET01FcnJvckhhbmRsZXIoKSxcbiAgICAgICAgXCJpbmZvc2V0XCI6IHRydWUsXG4gICAgICAgIFwidmFsaWRhdGUtaWYtc2NoZW1hXCI6IGZhbHNlLFxuICAgICAgICBcIm5hbWVzcGFjZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJuYW1lc3BhY2UtZGVjbGFyYXRpb25zXCI6IHRydWUsXG4gICAgICAgIFwibm9ybWFsaXplLWNoYXJhY3RlcnNcIjogZmFsc2UsXG4gICAgICAgIFwic2NoZW1hLWxvY2F0aW9uXCI6ICcnLFxuICAgICAgICBcInNjaGVtYS10eXBlXCI6ICcnLFxuICAgICAgICBcInNwbGl0LWNkYXRhLXNlY3Rpb25zXCI6IHRydWUsXG4gICAgICAgIFwidmFsaWRhdGVcIjogZmFsc2UsXG4gICAgICAgIFwid2VsbC1mb3JtZWRcIjogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHRoaXMucGFyYW1zID0gY2xvbmVkU2VsZiA9IE9iamVjdC5jcmVhdGUodGhpcy5kZWZhdWx0UGFyYW1zKTtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRE9NQ29uZmlndXJhdGlvbi5wcm90b3R5cGUsICdwYXJhbWV0ZXJOYW1lcycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgWE1MRE9NU3RyaW5nTGlzdChPYmplY3Qua2V5cyh0aGlzLmRlZmF1bHRQYXJhbXMpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIFhNTERPTUNvbmZpZ3VyYXRpb24ucHJvdG90eXBlLmdldFBhcmFtZXRlciA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIGlmICh0aGlzLnBhcmFtcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJhbXNbbmFtZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MRE9NQ29uZmlndXJhdGlvbi5wcm90b3R5cGUuY2FuU2V0UGFyYW1ldGVyID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICBYTUxET01Db25maWd1cmF0aW9uLnByb3RvdHlwZS5zZXRQYXJhbWV0ZXIgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyYW1zW25hbWVdID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVsZXRlIHRoaXMucGFyYW1zW25hbWVdO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRE9NQ29uZmlndXJhdGlvbjtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIEVsZW1lbnQ6IDEsXG4gICAgQXR0cmlidXRlOiAyLFxuICAgIFRleHQ6IDMsXG4gICAgQ0RhdGE6IDQsXG4gICAgRW50aXR5UmVmZXJlbmNlOiA1LFxuICAgIEVudGl0eURlY2xhcmF0aW9uOiA2LFxuICAgIFByb2Nlc3NpbmdJbnN0cnVjdGlvbjogNyxcbiAgICBDb21tZW50OiA4LFxuICAgIERvY3VtZW50OiA5LFxuICAgIERvY1R5cGU6IDEwLFxuICAgIERvY3VtZW50RnJhZ21lbnQ6IDExLFxuICAgIE5vdGF0aW9uRGVjbGFyYXRpb246IDEyLFxuICAgIERlY2xhcmF0aW9uOiAyMDEsXG4gICAgUmF3OiAyMDIsXG4gICAgQXR0cmlidXRlRGVjbGFyYXRpb246IDIwMyxcbiAgICBFbGVtZW50RGVjbGFyYXRpb246IDIwNCxcbiAgICBEdW1teTogMjA1XG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxBdHRyaWJ1dGUsIFhNTE5vZGU7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MQXR0cmlidXRlID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFhNTEF0dHJpYnV0ZShwYXJlbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLnBhcmVudC5vcHRpb25zO1xuICAgICAgICB0aGlzLnN0cmluZ2lmeSA9IHRoaXMucGFyZW50LnN0cmluZ2lmeTtcbiAgICAgIH1cbiAgICAgIGlmIChuYW1lID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBhdHRyaWJ1dGUgbmFtZS4gXCIgKyB0aGlzLmRlYnVnSW5mbyhuYW1lKSk7XG4gICAgICB9XG4gICAgICB0aGlzLm5hbWUgPSB0aGlzLnN0cmluZ2lmeS5uYW1lKG5hbWUpO1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc3RyaW5naWZ5LmF0dFZhbHVlKHZhbHVlKTtcbiAgICAgIHRoaXMudHlwZSA9IE5vZGVUeXBlLkF0dHJpYnV0ZTtcbiAgICAgIHRoaXMuaXNJZCA9IGZhbHNlO1xuICAgICAgdGhpcy5zY2hlbWFUeXBlSW5mbyA9IG51bGw7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUsICdub2RlVHlwZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MQXR0cmlidXRlLnByb3RvdHlwZSwgJ293bmVyRWxlbWVudCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxBdHRyaWJ1dGUucHJvdG90eXBlLCAndGV4dENvbnRlbnQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlID0gdmFsdWUgfHwgJyc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MQXR0cmlidXRlLnByb3RvdHlwZSwgJ25hbWVzcGFjZVVSSScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxBdHRyaWJ1dGUucHJvdG90eXBlLCAncHJlZml4Jywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUsICdsb2NhbE5hbWUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUsICdzcGVjaWZpZWQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH07XG5cbiAgICBYTUxBdHRyaWJ1dGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuYXR0cmlidXRlKHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUuZGVidWdJbmZvID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgbmFtZSA9IG5hbWUgfHwgdGhpcy5uYW1lO1xuICAgICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gXCJwYXJlbnQ6IDxcIiArIHRoaXMucGFyZW50Lm5hbWUgKyBcIj5cIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcImF0dHJpYnV0ZToge1wiICsgbmFtZSArIFwifSwgcGFyZW50OiA8XCIgKyB0aGlzLnBhcmVudC5uYW1lICsgXCI+XCI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUuaXNFcXVhbE5vZGUgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAobm9kZS5uYW1lc3BhY2VVUkkgIT09IHRoaXMubmFtZXNwYWNlVVJJKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLnByZWZpeCAhPT0gdGhpcy5wcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUubG9jYWxOYW1lICE9PSB0aGlzLmxvY2FsTmFtZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS52YWx1ZSAhPT0gdGhpcy52YWx1ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTEF0dHJpYnV0ZTtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxOYW1lZE5vZGVNYXA7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxOYW1lZE5vZGVNYXAgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MTmFtZWROb2RlTWFwKG5vZGVzKSB7XG4gICAgICB0aGlzLm5vZGVzID0gbm9kZXM7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTE5hbWVkTm9kZU1hcC5wcm90b3R5cGUsICdsZW5ndGgnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5ub2RlcykubGVuZ3RoIHx8IDA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxOYW1lZE5vZGVNYXAucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlcyA9IG51bGw7XG4gICAgfTtcblxuICAgIFhNTE5hbWVkTm9kZU1hcC5wcm90b3R5cGUuZ2V0TmFtZWRJdGVtID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZXNbbmFtZV07XG4gICAgfTtcblxuICAgIFhNTE5hbWVkTm9kZU1hcC5wcm90b3R5cGUuc2V0TmFtZWRJdGVtID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgdmFyIG9sZE5vZGU7XG4gICAgICBvbGROb2RlID0gdGhpcy5ub2Rlc1tub2RlLm5vZGVOYW1lXTtcbiAgICAgIHRoaXMubm9kZXNbbm9kZS5ub2RlTmFtZV0gPSBub2RlO1xuICAgICAgcmV0dXJuIG9sZE5vZGUgfHwgbnVsbDtcbiAgICB9O1xuXG4gICAgWE1MTmFtZWROb2RlTWFwLnByb3RvdHlwZS5yZW1vdmVOYW1lZEl0ZW0gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICB2YXIgb2xkTm9kZTtcbiAgICAgIG9sZE5vZGUgPSB0aGlzLm5vZGVzW25hbWVdO1xuICAgICAgZGVsZXRlIHRoaXMubm9kZXNbbmFtZV07XG4gICAgICByZXR1cm4gb2xkTm9kZSB8fCBudWxsO1xuICAgIH07XG5cbiAgICBYTUxOYW1lZE5vZGVNYXAucHJvdG90eXBlLml0ZW0gPSBmdW5jdGlvbihpbmRleCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZXNbT2JqZWN0LmtleXModGhpcy5ub2RlcylbaW5kZXhdXSB8fCBudWxsO1xuICAgIH07XG5cbiAgICBYTUxOYW1lZE5vZGVNYXAucHJvdG90eXBlLmdldE5hbWVkSXRlbU5TID0gZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH07XG5cbiAgICBYTUxOYW1lZE5vZGVNYXAucHJvdG90eXBlLnNldE5hbWVkSXRlbU5TID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfTtcblxuICAgIFhNTE5hbWVkTm9kZU1hcC5wcm90b3R5cGUucmVtb3ZlTmFtZWRJdGVtTlMgPSBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxOYW1lZE5vZGVNYXA7XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFhNTEF0dHJpYnV0ZSwgWE1MRWxlbWVudCwgWE1MTmFtZWROb2RlTWFwLCBYTUxOb2RlLCBnZXRWYWx1ZSwgaXNGdW5jdGlvbiwgaXNPYmplY3QsIHJlZixcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIHJlZiA9IHJlcXVpcmUoJy4vVXRpbGl0eScpLCBpc09iamVjdCA9IHJlZi5pc09iamVjdCwgaXNGdW5jdGlvbiA9IHJlZi5pc0Z1bmN0aW9uLCBnZXRWYWx1ZSA9IHJlZi5nZXRWYWx1ZTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MQXR0cmlidXRlID0gcmVxdWlyZSgnLi9YTUxBdHRyaWJ1dGUnKTtcblxuICBYTUxOYW1lZE5vZGVNYXAgPSByZXF1aXJlKCcuL1hNTE5hbWVkTm9kZU1hcCcpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRWxlbWVudCA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTEVsZW1lbnQsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MRWxlbWVudChwYXJlbnQsIG5hbWUsIGF0dHJpYnV0ZXMpIHtcbiAgICAgIHZhciBjaGlsZCwgaiwgbGVuLCByZWYxO1xuICAgICAgWE1MRWxlbWVudC5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGVsZW1lbnQgbmFtZS4gXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubmFtZSA9IHRoaXMuc3RyaW5naWZ5Lm5hbWUobmFtZSk7XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5FbGVtZW50O1xuICAgICAgdGhpcy5hdHRyaWJzID0ge307XG4gICAgICB0aGlzLnNjaGVtYVR5cGVJbmZvID0gbnVsbDtcbiAgICAgIGlmIChhdHRyaWJ1dGVzICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGUoYXR0cmlidXRlcyk7XG4gICAgICB9XG4gICAgICBpZiAocGFyZW50LnR5cGUgPT09IE5vZGVUeXBlLkRvY3VtZW50KSB7XG4gICAgICAgIHRoaXMuaXNSb290ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kb2N1bWVudE9iamVjdCA9IHBhcmVudDtcbiAgICAgICAgcGFyZW50LnJvb3RPYmplY3QgPSB0aGlzO1xuICAgICAgICBpZiAocGFyZW50LmNoaWxkcmVuKSB7XG4gICAgICAgICAgcmVmMSA9IHBhcmVudC5jaGlsZHJlbjtcbiAgICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYxLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICBjaGlsZCA9IHJlZjFbal07XG4gICAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gTm9kZVR5cGUuRG9jVHlwZSkge1xuICAgICAgICAgICAgICBjaGlsZC5uYW1lID0gdGhpcy5uYW1lO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRWxlbWVudC5wcm90b3R5cGUsICd0YWdOYW1lJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxFbGVtZW50LnByb3RvdHlwZSwgJ25hbWVzcGFjZVVSSScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxFbGVtZW50LnByb3RvdHlwZSwgJ3ByZWZpeCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxFbGVtZW50LnByb3RvdHlwZSwgJ2xvY2FsTmFtZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRWxlbWVudC5wcm90b3R5cGUsICdpZCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxFbGVtZW50LnByb3RvdHlwZSwgJ2NsYXNzTmFtZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxFbGVtZW50LnByb3RvdHlwZSwgJ2NsYXNzTGlzdCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxFbGVtZW50LnByb3RvdHlwZSwgJ2F0dHJpYnV0ZXMnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXRoaXMuYXR0cmlidXRlTWFwIHx8ICF0aGlzLmF0dHJpYnV0ZU1hcC5ub2Rlcykge1xuICAgICAgICAgIHRoaXMuYXR0cmlidXRlTWFwID0gbmV3IFhNTE5hbWVkTm9kZU1hcCh0aGlzLmF0dHJpYnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZU1hcDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXR0LCBhdHROYW1lLCBjbG9uZWRTZWxmLCByZWYxO1xuICAgICAgY2xvbmVkU2VsZiA9IE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgICBpZiAoY2xvbmVkU2VsZi5pc1Jvb3QpIHtcbiAgICAgICAgY2xvbmVkU2VsZi5kb2N1bWVudE9iamVjdCA9IG51bGw7XG4gICAgICB9XG4gICAgICBjbG9uZWRTZWxmLmF0dHJpYnMgPSB7fTtcbiAgICAgIHJlZjEgPSB0aGlzLmF0dHJpYnM7XG4gICAgICBmb3IgKGF0dE5hbWUgaW4gcmVmMSkge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChyZWYxLCBhdHROYW1lKSkgY29udGludWU7XG4gICAgICAgIGF0dCA9IHJlZjFbYXR0TmFtZV07XG4gICAgICAgIGNsb25lZFNlbGYuYXR0cmlic1thdHROYW1lXSA9IGF0dC5jbG9uZSgpO1xuICAgICAgfVxuICAgICAgY2xvbmVkU2VsZi5jaGlsZHJlbiA9IFtdO1xuICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgIHZhciBjbG9uZWRDaGlsZDtcbiAgICAgICAgY2xvbmVkQ2hpbGQgPSBjaGlsZC5jbG9uZSgpO1xuICAgICAgICBjbG9uZWRDaGlsZC5wYXJlbnQgPSBjbG9uZWRTZWxmO1xuICAgICAgICByZXR1cm4gY2xvbmVkU2VsZi5jaGlsZHJlbi5wdXNoKGNsb25lZENoaWxkKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNsb25lZFNlbGY7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLmF0dHJpYnV0ZSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICB2YXIgYXR0TmFtZSwgYXR0VmFsdWU7XG4gICAgICBpZiAobmFtZSAhPSBudWxsKSB7XG4gICAgICAgIG5hbWUgPSBnZXRWYWx1ZShuYW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdChuYW1lKSkge1xuICAgICAgICBmb3IgKGF0dE5hbWUgaW4gbmFtZSkge1xuICAgICAgICAgIGlmICghaGFzUHJvcC5jYWxsKG5hbWUsIGF0dE5hbWUpKSBjb250aW51ZTtcbiAgICAgICAgICBhdHRWYWx1ZSA9IG5hbWVbYXR0TmFtZV07XG4gICAgICAgICAgdGhpcy5hdHRyaWJ1dGUoYXR0TmFtZSwgYXR0VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmFwcGx5KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5rZWVwTnVsbEF0dHJpYnV0ZXMgJiYgKHZhbHVlID09IG51bGwpKSB7XG4gICAgICAgICAgdGhpcy5hdHRyaWJzW25hbWVdID0gbmV3IFhNTEF0dHJpYnV0ZSh0aGlzLCBuYW1lLCBcIlwiKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5hdHRyaWJzW25hbWVdID0gbmV3IFhNTEF0dHJpYnV0ZSh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGUgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICB2YXIgYXR0TmFtZSwgaiwgbGVuO1xuICAgICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGF0dHJpYnV0ZSBuYW1lLiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgbmFtZSA9IGdldFZhbHVlKG5hbWUpO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkobmFtZSkpIHtcbiAgICAgICAgZm9yIChqID0gMCwgbGVuID0gbmFtZS5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgIGF0dE5hbWUgPSBuYW1lW2pdO1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLmF0dHJpYnNbYXR0TmFtZV07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmF0dHJpYnNbbmFtZV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRWxlbWVudC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5lbGVtZW50KHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLmF0dCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5hID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLmdldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIGlmICh0aGlzLmF0dHJpYnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0cmlic1tuYW1lXS52YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVOb2RlID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgaWYgKHRoaXMuYXR0cmlicy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRyaWJzW25hbWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLnNldEF0dHJpYnV0ZU5vZGUgPSBmdW5jdGlvbihuZXdBdHRyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLnJlbW92ZUF0dHJpYnV0ZU5vZGUgPSBmdW5jdGlvbihvbGRBdHRyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVOUyA9IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLnNldEF0dHJpYnV0ZU5TID0gZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBxdWFsaWZpZWROYW1lLCB2YWx1ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGVOUyA9IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLmdldEF0dHJpYnV0ZU5vZGVOUyA9IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLnNldEF0dHJpYnV0ZU5vZGVOUyA9IGZ1bmN0aW9uKG5ld0F0dHIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRWxlbWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWVOUyA9IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLmhhc0F0dHJpYnV0ZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJpYnMuaGFzT3duUHJvcGVydHkobmFtZSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLmhhc0F0dHJpYnV0ZU5TID0gZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRWxlbWVudC5wcm90b3R5cGUuc2V0SWRBdHRyaWJ1dGUgPSBmdW5jdGlvbihuYW1lLCBpc0lkKSB7XG4gICAgICBpZiAodGhpcy5hdHRyaWJzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dHJpYnNbbmFtZV0uaXNJZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpc0lkO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5zZXRJZEF0dHJpYnV0ZU5TID0gZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUsIGlzSWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRWxlbWVudC5wcm90b3R5cGUuc2V0SWRBdHRyaWJ1dGVOb2RlID0gZnVuY3Rpb24oaWRBdHRyLCBpc0lkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lID0gZnVuY3Rpb24odGFnbmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5nZXRFbGVtZW50c0J5VGFnTmFtZU5TID0gZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRWxlbWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IGZ1bmN0aW9uKGNsYXNzTmFtZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRWxlbWVudC5wcm90b3R5cGUuaXNFcXVhbE5vZGUgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgaSwgaiwgcmVmMTtcbiAgICAgIGlmICghWE1MRWxlbWVudC5fX3N1cGVyX18uaXNFcXVhbE5vZGUuYXBwbHkodGhpcywgYXJndW1lbnRzKS5pc0VxdWFsTm9kZShub2RlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5uYW1lc3BhY2VVUkkgIT09IHRoaXMubmFtZXNwYWNlVVJJKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLnByZWZpeCAhPT0gdGhpcy5wcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUubG9jYWxOYW1lICE9PSB0aGlzLmxvY2FsTmFtZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5hdHRyaWJzLmxlbmd0aCAhPT0gdGhpcy5hdHRyaWJzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSBqID0gMCwgcmVmMSA9IHRoaXMuYXR0cmlicy5sZW5ndGggLSAxOyAwIDw9IHJlZjEgPyBqIDw9IHJlZjEgOiBqID49IHJlZjE7IGkgPSAwIDw9IHJlZjEgPyArK2ogOiAtLWopIHtcbiAgICAgICAgaWYgKCF0aGlzLmF0dHJpYnNbaV0uaXNFcXVhbE5vZGUobm9kZS5hdHRyaWJzW2ldKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxFbGVtZW50O1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxDaGFyYWN0ZXJEYXRhLCBYTUxOb2RlLFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MQ2hhcmFjdGVyRGF0YSA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTENoYXJhY3RlckRhdGEsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MQ2hhcmFjdGVyRGF0YShwYXJlbnQpIHtcbiAgICAgIFhNTENoYXJhY3RlckRhdGEuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIHRoaXMudmFsdWUgPSAnJztcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MQ2hhcmFjdGVyRGF0YS5wcm90b3R5cGUsICdkYXRhJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA9IHZhbHVlIHx8ICcnO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLCAnbGVuZ3RoJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUubGVuZ3RoO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLCAndGV4dENvbnRlbnQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlID0gdmFsdWUgfHwgJyc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxDaGFyYWN0ZXJEYXRhLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgfTtcblxuICAgIFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLnN1YnN0cmluZ0RhdGEgPSBmdW5jdGlvbihvZmZzZXQsIGNvdW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLmFwcGVuZERhdGEgPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MQ2hhcmFjdGVyRGF0YS5wcm90b3R5cGUuaW5zZXJ0RGF0YSA9IGZ1bmN0aW9uKG9mZnNldCwgYXJnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLmRlbGV0ZURhdGEgPSBmdW5jdGlvbihvZmZzZXQsIGNvdW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLnJlcGxhY2VEYXRhID0gZnVuY3Rpb24ob2Zmc2V0LCBjb3VudCwgYXJnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLmlzRXF1YWxOb2RlID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKCFYTUxDaGFyYWN0ZXJEYXRhLl9fc3VwZXJfXy5pc0VxdWFsTm9kZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLmlzRXF1YWxOb2RlKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLmRhdGEgIT09IHRoaXMuZGF0YSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTENoYXJhY3RlckRhdGE7XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxDRGF0YSwgWE1MQ2hhcmFjdGVyRGF0YSxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIFhNTENoYXJhY3RlckRhdGEgPSByZXF1aXJlKCcuL1hNTENoYXJhY3RlckRhdGEnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTENEYXRhID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MQ0RhdGEsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MQ0RhdGEocGFyZW50LCB0ZXh0KSB7XG4gICAgICBYTUxDRGF0YS5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKHRleHQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIENEQVRBIHRleHQuIFwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgICB0aGlzLm5hbWUgPSBcIiNjZGF0YS1zZWN0aW9uXCI7XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5DRGF0YTtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5jZGF0YSh0ZXh0KTtcbiAgICB9XG5cbiAgICBYTUxDRGF0YS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH07XG5cbiAgICBYTUxDRGF0YS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5jZGF0YSh0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MQ0RhdGE7XG5cbiAgfSkoWE1MQ2hhcmFjdGVyRGF0YSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxDaGFyYWN0ZXJEYXRhLCBYTUxDb21tZW50LFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MQ2hhcmFjdGVyRGF0YSA9IHJlcXVpcmUoJy4vWE1MQ2hhcmFjdGVyRGF0YScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MQ29tbWVudCA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTENvbW1lbnQsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MQ29tbWVudChwYXJlbnQsIHRleHQpIHtcbiAgICAgIFhNTENvbW1lbnQuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIGlmICh0ZXh0ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBjb21tZW50IHRleHQuIFwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgICB0aGlzLm5hbWUgPSBcIiNjb21tZW50XCI7XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5Db21tZW50O1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc3RyaW5naWZ5LmNvbW1lbnQodGV4dCk7XG4gICAgfVxuXG4gICAgWE1MQ29tbWVudC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH07XG5cbiAgICBYTUxDb21tZW50LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLmNvbW1lbnQodGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTENvbW1lbnQ7XG5cbiAgfSkoWE1MQ2hhcmFjdGVyRGF0YSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxEZWNsYXJhdGlvbiwgWE1MTm9kZSwgaXNPYmplY3QsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBpc09iamVjdCA9IHJlcXVpcmUoJy4vVXRpbGl0eScpLmlzT2JqZWN0O1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERlY2xhcmF0aW9uID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MRGVjbGFyYXRpb24sIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MRGVjbGFyYXRpb24ocGFyZW50LCB2ZXJzaW9uLCBlbmNvZGluZywgc3RhbmRhbG9uZSkge1xuICAgICAgdmFyIHJlZjtcbiAgICAgIFhNTERlY2xhcmF0aW9uLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAoaXNPYmplY3QodmVyc2lvbikpIHtcbiAgICAgICAgcmVmID0gdmVyc2lvbiwgdmVyc2lvbiA9IHJlZi52ZXJzaW9uLCBlbmNvZGluZyA9IHJlZi5lbmNvZGluZywgc3RhbmRhbG9uZSA9IHJlZi5zdGFuZGFsb25lO1xuICAgICAgfVxuICAgICAgaWYgKCF2ZXJzaW9uKSB7XG4gICAgICAgIHZlcnNpb24gPSAnMS4wJztcbiAgICAgIH1cbiAgICAgIHRoaXMudHlwZSA9IE5vZGVUeXBlLkRlY2xhcmF0aW9uO1xuICAgICAgdGhpcy52ZXJzaW9uID0gdGhpcy5zdHJpbmdpZnkueG1sVmVyc2lvbih2ZXJzaW9uKTtcbiAgICAgIGlmIChlbmNvZGluZyAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuZW5jb2RpbmcgPSB0aGlzLnN0cmluZ2lmeS54bWxFbmNvZGluZyhlbmNvZGluZyk7XG4gICAgICB9XG4gICAgICBpZiAoc3RhbmRhbG9uZSAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuc3RhbmRhbG9uZSA9IHRoaXMuc3RyaW5naWZ5LnhtbFN0YW5kYWxvbmUoc3RhbmRhbG9uZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgWE1MRGVjbGFyYXRpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuZGVjbGFyYXRpb24odGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTERlY2xhcmF0aW9uO1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MRFREQXR0TGlzdCwgWE1MTm9kZSxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERUREF0dExpc3QgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxEVERBdHRMaXN0LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTERUREF0dExpc3QocGFyZW50LCBlbGVtZW50TmFtZSwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVHlwZSwgZGVmYXVsdFZhbHVlVHlwZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICBYTUxEVERBdHRMaXN0Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAoZWxlbWVudE5hbWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIERURCBlbGVtZW50IG5hbWUuIFwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgICBpZiAoYXR0cmlidXRlTmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRFREIGF0dHJpYnV0ZSBuYW1lLiBcIiArIHRoaXMuZGVidWdJbmZvKGVsZW1lbnROYW1lKSk7XG4gICAgICB9XG4gICAgICBpZiAoIWF0dHJpYnV0ZVR5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBEVEQgYXR0cmlidXRlIHR5cGUuIFwiICsgdGhpcy5kZWJ1Z0luZm8oZWxlbWVudE5hbWUpKTtcbiAgICAgIH1cbiAgICAgIGlmICghZGVmYXVsdFZhbHVlVHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIERURCBhdHRyaWJ1dGUgZGVmYXVsdC4gXCIgKyB0aGlzLmRlYnVnSW5mbyhlbGVtZW50TmFtZSkpO1xuICAgICAgfVxuICAgICAgaWYgKGRlZmF1bHRWYWx1ZVR5cGUuaW5kZXhPZignIycpICE9PSAwKSB7XG4gICAgICAgIGRlZmF1bHRWYWx1ZVR5cGUgPSAnIycgKyBkZWZhdWx0VmFsdWVUeXBlO1xuICAgICAgfVxuICAgICAgaWYgKCFkZWZhdWx0VmFsdWVUeXBlLm1hdGNoKC9eKCNSRVFVSVJFRHwjSU1QTElFRHwjRklYRUR8I0RFRkFVTFQpJC8pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZGVmYXVsdCB2YWx1ZSB0eXBlOyBleHBlY3RlZDogI1JFUVVJUkVELCAjSU1QTElFRCwgI0ZJWEVEIG9yICNERUZBVUxULiBcIiArIHRoaXMuZGVidWdJbmZvKGVsZW1lbnROYW1lKSk7XG4gICAgICB9XG4gICAgICBpZiAoZGVmYXVsdFZhbHVlICYmICFkZWZhdWx0VmFsdWVUeXBlLm1hdGNoKC9eKCNGSVhFRHwjREVGQVVMVCkkLykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGVmYXVsdCB2YWx1ZSBvbmx5IGFwcGxpZXMgdG8gI0ZJWEVEIG9yICNERUZBVUxULiBcIiArIHRoaXMuZGVidWdJbmZvKGVsZW1lbnROYW1lKSk7XG4gICAgICB9XG4gICAgICB0aGlzLmVsZW1lbnROYW1lID0gdGhpcy5zdHJpbmdpZnkubmFtZShlbGVtZW50TmFtZSk7XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5BdHRyaWJ1dGVEZWNsYXJhdGlvbjtcbiAgICAgIHRoaXMuYXR0cmlidXRlTmFtZSA9IHRoaXMuc3RyaW5naWZ5Lm5hbWUoYXR0cmlidXRlTmFtZSk7XG4gICAgICB0aGlzLmF0dHJpYnV0ZVR5cGUgPSB0aGlzLnN0cmluZ2lmeS5kdGRBdHRUeXBlKGF0dHJpYnV0ZVR5cGUpO1xuICAgICAgaWYgKGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICB0aGlzLmRlZmF1bHRWYWx1ZSA9IHRoaXMuc3RyaW5naWZ5LmR0ZEF0dERlZmF1bHQoZGVmYXVsdFZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGVmYXVsdFZhbHVlVHlwZSA9IGRlZmF1bHRWYWx1ZVR5cGU7XG4gICAgfVxuXG4gICAgWE1MRFREQXR0TGlzdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5kdGRBdHRMaXN0KHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxEVERBdHRMaXN0O1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MRFRERW50aXR5LCBYTUxOb2RlLCBpc09iamVjdCxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9VdGlsaXR5JykuaXNPYmplY3Q7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRFRERW50aXR5ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MRFRERW50aXR5LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTERUREVudGl0eShwYXJlbnQsIHBlLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgWE1MRFRERW50aXR5Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRFREIGVudGl0eSBuYW1lLiBcIiArIHRoaXMuZGVidWdJbmZvKG5hbWUpKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRFREIGVudGl0eSB2YWx1ZS4gXCIgKyB0aGlzLmRlYnVnSW5mbyhuYW1lKSk7XG4gICAgICB9XG4gICAgICB0aGlzLnBlID0gISFwZTtcbiAgICAgIHRoaXMubmFtZSA9IHRoaXMuc3RyaW5naWZ5Lm5hbWUobmFtZSk7XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5FbnRpdHlEZWNsYXJhdGlvbjtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5kdGRFbnRpdHlWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIHRoaXMuaW50ZXJuYWwgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF2YWx1ZS5wdWJJRCAmJiAhdmFsdWUuc3lzSUQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQdWJsaWMgYW5kL29yIHN5c3RlbSBpZGVudGlmaWVycyBhcmUgcmVxdWlyZWQgZm9yIGFuIGV4dGVybmFsIGVudGl0eS4gXCIgKyB0aGlzLmRlYnVnSW5mbyhuYW1lKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlLnB1YklEICYmICF2YWx1ZS5zeXNJRCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN5c3RlbSBpZGVudGlmaWVyIGlzIHJlcXVpcmVkIGZvciBhIHB1YmxpYyBleHRlcm5hbCBlbnRpdHkuIFwiICsgdGhpcy5kZWJ1Z0luZm8obmFtZSkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW50ZXJuYWwgPSBmYWxzZTtcbiAgICAgICAgaWYgKHZhbHVlLnB1YklEICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnB1YklEID0gdGhpcy5zdHJpbmdpZnkuZHRkUHViSUQodmFsdWUucHViSUQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZS5zeXNJRCAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5zeXNJRCA9IHRoaXMuc3RyaW5naWZ5LmR0ZFN5c0lEKHZhbHVlLnN5c0lEKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUubkRhdGEgIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMubkRhdGEgPSB0aGlzLnN0cmluZ2lmeS5kdGRORGF0YSh2YWx1ZS5uRGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucGUgJiYgdGhpcy5uRGF0YSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdGF0aW9uIGRlY2xhcmF0aW9uIGlzIG5vdCBhbGxvd2VkIGluIGEgcGFyYW1ldGVyIGVudGl0eS4gXCIgKyB0aGlzLmRlYnVnSW5mbyhuYW1lKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRFRERW50aXR5LnByb3RvdHlwZSwgJ3B1YmxpY0lkJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHViSUQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRFRERW50aXR5LnByb3RvdHlwZSwgJ3N5c3RlbUlkJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3lzSUQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRFRERW50aXR5LnByb3RvdHlwZSwgJ25vdGF0aW9uTmFtZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5EYXRhIHx8IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRFRERW50aXR5LnByb3RvdHlwZSwgJ2lucHV0RW5jb2RpbmcnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEVERFbnRpdHkucHJvdG90eXBlLCAneG1sRW5jb2RpbmcnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEVERFbnRpdHkucHJvdG90eXBlLCAneG1sVmVyc2lvbicsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgWE1MRFRERW50aXR5LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLmR0ZEVudGl0eSh0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRFRERW50aXR5O1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MRFRERWxlbWVudCwgWE1MTm9kZSxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERUREVsZW1lbnQgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxEVERFbGVtZW50LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTERUREVsZW1lbnQocGFyZW50LCBuYW1lLCB2YWx1ZSkge1xuICAgICAgWE1MRFRERWxlbWVudC5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIERURCBlbGVtZW50IG5hbWUuIFwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gJygjUENEQVRBKSc7XG4gICAgICB9XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSAnKCcgKyB2YWx1ZS5qb2luKCcsJykgKyAnKSc7XG4gICAgICB9XG4gICAgICB0aGlzLm5hbWUgPSB0aGlzLnN0cmluZ2lmeS5uYW1lKG5hbWUpO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuRWxlbWVudERlY2xhcmF0aW9uO1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc3RyaW5naWZ5LmR0ZEVsZW1lbnRWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgWE1MRFRERWxlbWVudC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5kdGRFbGVtZW50KHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxEVERFbGVtZW50O1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MRFRETm90YXRpb24sIFhNTE5vZGUsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEVEROb3RhdGlvbiA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTERURE5vdGF0aW9uLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTERURE5vdGF0aW9uKHBhcmVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgIFhNTERURE5vdGF0aW9uLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRFREIG5vdGF0aW9uIG5hbWUuIFwiICsgdGhpcy5kZWJ1Z0luZm8obmFtZSkpO1xuICAgICAgfVxuICAgICAgaWYgKCF2YWx1ZS5wdWJJRCAmJiAhdmFsdWUuc3lzSUQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHVibGljIG9yIHN5c3RlbSBpZGVudGlmaWVycyBhcmUgcmVxdWlyZWQgZm9yIGFuIGV4dGVybmFsIGVudGl0eS4gXCIgKyB0aGlzLmRlYnVnSW5mbyhuYW1lKSk7XG4gICAgICB9XG4gICAgICB0aGlzLm5hbWUgPSB0aGlzLnN0cmluZ2lmeS5uYW1lKG5hbWUpO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuTm90YXRpb25EZWNsYXJhdGlvbjtcbiAgICAgIGlmICh2YWx1ZS5wdWJJRCAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMucHViSUQgPSB0aGlzLnN0cmluZ2lmeS5kdGRQdWJJRCh2YWx1ZS5wdWJJRCk7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUuc3lzSUQgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnN5c0lEID0gdGhpcy5zdHJpbmdpZnkuZHRkU3lzSUQodmFsdWUuc3lzSUQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEVEROb3RhdGlvbi5wcm90b3R5cGUsICdwdWJsaWNJZCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnB1YklEO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERURE5vdGF0aW9uLnByb3RvdHlwZSwgJ3N5c3RlbUlkJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3lzSUQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxEVEROb3RhdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5kdGROb3RhdGlvbih0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRFRETm90YXRpb247XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxEVERBdHRMaXN0LCBYTUxEVERFbGVtZW50LCBYTUxEVERFbnRpdHksIFhNTERURE5vdGF0aW9uLCBYTUxEb2NUeXBlLCBYTUxOYW1lZE5vZGVNYXAsIFhNTE5vZGUsIGlzT2JqZWN0LFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgaXNPYmplY3QgPSByZXF1aXJlKCcuL1V0aWxpdHknKS5pc09iamVjdDtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MRFREQXR0TGlzdCA9IHJlcXVpcmUoJy4vWE1MRFREQXR0TGlzdCcpO1xuXG4gIFhNTERUREVudGl0eSA9IHJlcXVpcmUoJy4vWE1MRFRERW50aXR5Jyk7XG5cbiAgWE1MRFRERWxlbWVudCA9IHJlcXVpcmUoJy4vWE1MRFRERWxlbWVudCcpO1xuXG4gIFhNTERURE5vdGF0aW9uID0gcmVxdWlyZSgnLi9YTUxEVEROb3RhdGlvbicpO1xuXG4gIFhNTE5hbWVkTm9kZU1hcCA9IHJlcXVpcmUoJy4vWE1MTmFtZWROb2RlTWFwJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEb2NUeXBlID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MRG9jVHlwZSwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxEb2NUeXBlKHBhcmVudCwgcHViSUQsIHN5c0lEKSB7XG4gICAgICB2YXIgY2hpbGQsIGksIGxlbiwgcmVmLCByZWYxLCByZWYyO1xuICAgICAgWE1MRG9jVHlwZS5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuRG9jVHlwZTtcbiAgICAgIGlmIChwYXJlbnQuY2hpbGRyZW4pIHtcbiAgICAgICAgcmVmID0gcGFyZW50LmNoaWxkcmVuO1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBjaGlsZCA9IHJlZltpXTtcbiAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gTm9kZVR5cGUuRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gY2hpbGQubmFtZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5kb2N1bWVudE9iamVjdCA9IHBhcmVudDtcbiAgICAgIGlmIChpc09iamVjdChwdWJJRCkpIHtcbiAgICAgICAgcmVmMSA9IHB1YklELCBwdWJJRCA9IHJlZjEucHViSUQsIHN5c0lEID0gcmVmMS5zeXNJRDtcbiAgICAgIH1cbiAgICAgIGlmIChzeXNJRCA9PSBudWxsKSB7XG4gICAgICAgIHJlZjIgPSBbcHViSUQsIHN5c0lEXSwgc3lzSUQgPSByZWYyWzBdLCBwdWJJRCA9IHJlZjJbMV07XG4gICAgICB9XG4gICAgICBpZiAocHViSUQgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnB1YklEID0gdGhpcy5zdHJpbmdpZnkuZHRkUHViSUQocHViSUQpO1xuICAgICAgfVxuICAgICAgaWYgKHN5c0lEICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5zeXNJRCA9IHRoaXMuc3RyaW5naWZ5LmR0ZFN5c0lEKHN5c0lEKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRG9jVHlwZS5wcm90b3R5cGUsICdlbnRpdGllcycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjaGlsZCwgaSwgbGVuLCBub2RlcywgcmVmO1xuICAgICAgICBub2RlcyA9IHt9O1xuICAgICAgICByZWYgPSB0aGlzLmNoaWxkcmVuO1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBjaGlsZCA9IHJlZltpXTtcbiAgICAgICAgICBpZiAoKGNoaWxkLnR5cGUgPT09IE5vZGVUeXBlLkVudGl0eURlY2xhcmF0aW9uKSAmJiAhY2hpbGQucGUpIHtcbiAgICAgICAgICAgIG5vZGVzW2NoaWxkLm5hbWVdID0gY2hpbGQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgWE1MTmFtZWROb2RlTWFwKG5vZGVzKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEb2NUeXBlLnByb3RvdHlwZSwgJ25vdGF0aW9ucycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjaGlsZCwgaSwgbGVuLCBub2RlcywgcmVmO1xuICAgICAgICBub2RlcyA9IHt9O1xuICAgICAgICByZWYgPSB0aGlzLmNoaWxkcmVuO1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBjaGlsZCA9IHJlZltpXTtcbiAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gTm9kZVR5cGUuTm90YXRpb25EZWNsYXJhdGlvbikge1xuICAgICAgICAgICAgbm9kZXNbY2hpbGQubmFtZV0gPSBjaGlsZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBYTUxOYW1lZE5vZGVNYXAobm9kZXMpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERvY1R5cGUucHJvdG90eXBlLCAncHVibGljSWQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wdWJJRDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEb2NUeXBlLnByb3RvdHlwZSwgJ3N5c3RlbUlkJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3lzSUQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRG9jVHlwZS5wcm90b3R5cGUsICdpbnRlcm5hbFN1YnNldCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIFhNTERvY1R5cGUucHJvdG90eXBlLmVsZW1lbnQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIGNoaWxkO1xuICAgICAgY2hpbGQgPSBuZXcgWE1MRFRERWxlbWVudCh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY1R5cGUucHJvdG90eXBlLmF0dExpc3QgPSBmdW5jdGlvbihlbGVtZW50TmFtZSwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVHlwZSwgZGVmYXVsdFZhbHVlVHlwZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICB2YXIgY2hpbGQ7XG4gICAgICBjaGlsZCA9IG5ldyBYTUxEVERBdHRMaXN0KHRoaXMsIGVsZW1lbnROYW1lLCBhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVUeXBlLCBkZWZhdWx0VmFsdWVUeXBlLCBkZWZhdWx0VmFsdWUpO1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2NUeXBlLnByb3RvdHlwZS5lbnRpdHkgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIGNoaWxkO1xuICAgICAgY2hpbGQgPSBuZXcgWE1MRFRERW50aXR5KHRoaXMsIGZhbHNlLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY1R5cGUucHJvdG90eXBlLnBFbnRpdHkgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIGNoaWxkO1xuICAgICAgY2hpbGQgPSBuZXcgWE1MRFRERW50aXR5KHRoaXMsIHRydWUsIG5hbWUsIHZhbHVlKTtcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jVHlwZS5wcm90b3R5cGUubm90YXRpb24gPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIGNoaWxkO1xuICAgICAgY2hpbGQgPSBuZXcgWE1MRFRETm90YXRpb24odGhpcywgbmFtZSwgdmFsdWUpO1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2NUeXBlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLmRvY1R5cGUodGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jVHlwZS5wcm90b3R5cGUuZWxlID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQobmFtZSwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxEb2NUeXBlLnByb3RvdHlwZS5hdHQgPSBmdW5jdGlvbihlbGVtZW50TmFtZSwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVHlwZSwgZGVmYXVsdFZhbHVlVHlwZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRMaXN0KGVsZW1lbnROYW1lLCBhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVUeXBlLCBkZWZhdWx0VmFsdWVUeXBlLCBkZWZhdWx0VmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxEb2NUeXBlLnByb3RvdHlwZS5lbnQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZW50aXR5KG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jVHlwZS5wcm90b3R5cGUucGVudCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5wRW50aXR5KG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jVHlwZS5wcm90b3R5cGUubm90ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vdGF0aW9uKG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jVHlwZS5wcm90b3R5cGUudXAgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnJvb3QoKSB8fCB0aGlzLmRvY3VtZW50T2JqZWN0O1xuICAgIH07XG5cbiAgICBYTUxEb2NUeXBlLnByb3RvdHlwZS5pc0VxdWFsTm9kZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmICghWE1MRG9jVHlwZS5fX3N1cGVyX18uaXNFcXVhbE5vZGUuYXBwbHkodGhpcywgYXJndW1lbnRzKS5pc0VxdWFsTm9kZShub2RlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5uYW1lICE9PSB0aGlzLm5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUucHVibGljSWQgIT09IHRoaXMucHVibGljSWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUuc3lzdGVtSWQgIT09IHRoaXMuc3lzdGVtSWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxEb2NUeXBlO1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MTm9kZSwgWE1MUmF3LFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MUmF3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MUmF3LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTFJhdyhwYXJlbnQsIHRleHQpIHtcbiAgICAgIFhNTFJhdy5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKHRleHQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHJhdyB0ZXh0LiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuUmF3O1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc3RyaW5naWZ5LnJhdyh0ZXh0KTtcbiAgICB9XG5cbiAgICBYTUxSYXcucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgWE1MUmF3LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLnJhdyh0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MUmF3O1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MQ2hhcmFjdGVyRGF0YSwgWE1MVGV4dCxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIFhNTENoYXJhY3RlckRhdGEgPSByZXF1aXJlKCcuL1hNTENoYXJhY3RlckRhdGEnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTFRleHQgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxUZXh0LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTFRleHQocGFyZW50LCB0ZXh0KSB7XG4gICAgICBYTUxUZXh0Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAodGV4dCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgZWxlbWVudCB0ZXh0LiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgdGhpcy5uYW1lID0gXCIjdGV4dFwiO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuVGV4dDtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0cmluZ2lmeS50ZXh0KHRleHQpO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxUZXh0LnByb3RvdHlwZSwgJ2lzRWxlbWVudENvbnRlbnRXaGl0ZXNwYWNlJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTFRleHQucHJvdG90eXBlLCAnd2hvbGVUZXh0Jywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG5leHQsIHByZXYsIHN0cjtcbiAgICAgICAgc3RyID0gJyc7XG4gICAgICAgIHByZXYgPSB0aGlzLnByZXZpb3VzU2libGluZztcbiAgICAgICAgd2hpbGUgKHByZXYpIHtcbiAgICAgICAgICBzdHIgPSBwcmV2LmRhdGEgKyBzdHI7XG4gICAgICAgICAgcHJldiA9IHByZXYucHJldmlvdXNTaWJsaW5nO1xuICAgICAgICB9XG4gICAgICAgIHN0ciArPSB0aGlzLmRhdGE7XG4gICAgICAgIG5leHQgPSB0aGlzLm5leHRTaWJsaW5nO1xuICAgICAgICB3aGlsZSAobmV4dCkge1xuICAgICAgICAgIHN0ciA9IHN0ciArIG5leHQuZGF0YTtcbiAgICAgICAgICBuZXh0ID0gbmV4dC5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgWE1MVGV4dC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH07XG5cbiAgICBYTUxUZXh0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLnRleHQodGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgWE1MVGV4dC5wcm90b3R5cGUuc3BsaXRUZXh0ID0gZnVuY3Rpb24ob2Zmc2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTFRleHQucHJvdG90eXBlLnJlcGxhY2VXaG9sZVRleHQgPSBmdW5jdGlvbihjb250ZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxUZXh0O1xuXG4gIH0pKFhNTENoYXJhY3RlckRhdGEpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MQ2hhcmFjdGVyRGF0YSwgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MQ2hhcmFjdGVyRGF0YSA9IHJlcXVpcmUoJy4vWE1MQ2hhcmFjdGVyRGF0YScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbihwYXJlbnQsIHRhcmdldCwgdmFsdWUpIHtcbiAgICAgIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKHRhcmdldCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgaW5zdHJ1Y3Rpb24gdGFyZ2V0LiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuUHJvY2Vzc2luZ0luc3RydWN0aW9uO1xuICAgICAgdGhpcy50YXJnZXQgPSB0aGlzLnN0cmluZ2lmeS5pbnNUYXJnZXQodGFyZ2V0KTtcbiAgICAgIHRoaXMubmFtZSA9IHRoaXMudGFyZ2V0O1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5pbnNWYWx1ZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgfTtcblxuICAgIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5wcm9jZXNzaW5nSW5zdHJ1Y3Rpb24odGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLnByb3RvdHlwZS5pc0VxdWFsTm9kZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmICghWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLl9fc3VwZXJfXy5pc0VxdWFsTm9kZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLmlzRXF1YWxOb2RlKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLnRhcmdldCAhPT0gdGhpcy50YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb247XG5cbiAgfSkoWE1MQ2hhcmFjdGVyRGF0YSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxEdW1teSwgWE1MTm9kZSxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTER1bW15ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MRHVtbXksIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MRHVtbXkocGFyZW50KSB7XG4gICAgICBYTUxEdW1teS5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuRHVtbXk7XG4gICAgfVxuXG4gICAgWE1MRHVtbXkucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgWE1MRHVtbXkucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRHVtbXk7XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTE5vZGVMaXN0O1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MTm9kZUxpc3QgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MTm9kZUxpc3Qobm9kZXMpIHtcbiAgICAgIHRoaXMubm9kZXMgPSBub2RlcztcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MTm9kZUxpc3QucHJvdG90eXBlLCAnbGVuZ3RoJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZXMubGVuZ3RoIHx8IDA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxOb2RlTGlzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vZGVzID0gbnVsbDtcbiAgICB9O1xuXG4gICAgWE1MTm9kZUxpc3QucHJvdG90eXBlLml0ZW0gPSBmdW5jdGlvbihpbmRleCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZXNbaW5kZXhdIHx8IG51bGw7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxOb2RlTGlzdDtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIERpc2Nvbm5lY3RlZDogMSxcbiAgICBQcmVjZWRpbmc6IDIsXG4gICAgRm9sbG93aW5nOiA0LFxuICAgIENvbnRhaW5zOiA4LFxuICAgIENvbnRhaW5lZEJ5OiAxNixcbiAgICBJbXBsZW1lbnRhdGlvblNwZWNpZmljOiAzMlxuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBEb2N1bWVudFBvc2l0aW9uLCBOb2RlVHlwZSwgWE1MQ0RhdGEsIFhNTENvbW1lbnQsIFhNTERlY2xhcmF0aW9uLCBYTUxEb2NUeXBlLCBYTUxEdW1teSwgWE1MRWxlbWVudCwgWE1MTmFtZWROb2RlTWFwLCBYTUxOb2RlLCBYTUxOb2RlTGlzdCwgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLCBYTUxSYXcsIFhNTFRleHQsIGdldFZhbHVlLCBpc0VtcHR5LCBpc0Z1bmN0aW9uLCBpc09iamVjdCwgcmVmMSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgcmVmMSA9IHJlcXVpcmUoJy4vVXRpbGl0eScpLCBpc09iamVjdCA9IHJlZjEuaXNPYmplY3QsIGlzRnVuY3Rpb24gPSByZWYxLmlzRnVuY3Rpb24sIGlzRW1wdHkgPSByZWYxLmlzRW1wdHksIGdldFZhbHVlID0gcmVmMS5nZXRWYWx1ZTtcblxuICBYTUxFbGVtZW50ID0gbnVsbDtcblxuICBYTUxDRGF0YSA9IG51bGw7XG5cbiAgWE1MQ29tbWVudCA9IG51bGw7XG5cbiAgWE1MRGVjbGFyYXRpb24gPSBudWxsO1xuXG4gIFhNTERvY1R5cGUgPSBudWxsO1xuXG4gIFhNTFJhdyA9IG51bGw7XG5cbiAgWE1MVGV4dCA9IG51bGw7XG5cbiAgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uID0gbnVsbDtcblxuICBYTUxEdW1teSA9IG51bGw7XG5cbiAgTm9kZVR5cGUgPSBudWxsO1xuXG4gIFhNTE5vZGVMaXN0ID0gbnVsbDtcblxuICBYTUxOYW1lZE5vZGVNYXAgPSBudWxsO1xuXG4gIERvY3VtZW50UG9zaXRpb24gPSBudWxsO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MTm9kZSA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBYTUxOb2RlKHBhcmVudDEpIHtcbiAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50MTtcbiAgICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLnBhcmVudC5vcHRpb25zO1xuICAgICAgICB0aGlzLnN0cmluZ2lmeSA9IHRoaXMucGFyZW50LnN0cmluZ2lmeTtcbiAgICAgIH1cbiAgICAgIHRoaXMudmFsdWUgPSBudWxsO1xuICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgICAgdGhpcy5iYXNlVVJJID0gbnVsbDtcbiAgICAgIGlmICghWE1MRWxlbWVudCkge1xuICAgICAgICBYTUxFbGVtZW50ID0gcmVxdWlyZSgnLi9YTUxFbGVtZW50Jyk7XG4gICAgICAgIFhNTENEYXRhID0gcmVxdWlyZSgnLi9YTUxDRGF0YScpO1xuICAgICAgICBYTUxDb21tZW50ID0gcmVxdWlyZSgnLi9YTUxDb21tZW50Jyk7XG4gICAgICAgIFhNTERlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi9YTUxEZWNsYXJhdGlvbicpO1xuICAgICAgICBYTUxEb2NUeXBlID0gcmVxdWlyZSgnLi9YTUxEb2NUeXBlJyk7XG4gICAgICAgIFhNTFJhdyA9IHJlcXVpcmUoJy4vWE1MUmF3Jyk7XG4gICAgICAgIFhNTFRleHQgPSByZXF1aXJlKCcuL1hNTFRleHQnKTtcbiAgICAgICAgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uID0gcmVxdWlyZSgnLi9YTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24nKTtcbiAgICAgICAgWE1MRHVtbXkgPSByZXF1aXJlKCcuL1hNTER1bW15Jyk7XG4gICAgICAgIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuICAgICAgICBYTUxOb2RlTGlzdCA9IHJlcXVpcmUoJy4vWE1MTm9kZUxpc3QnKTtcbiAgICAgICAgWE1MTmFtZWROb2RlTWFwID0gcmVxdWlyZSgnLi9YTUxOYW1lZE5vZGVNYXAnKTtcbiAgICAgICAgRG9jdW1lbnRQb3NpdGlvbiA9IHJlcXVpcmUoJy4vRG9jdW1lbnRQb3NpdGlvbicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxOb2RlLnByb3RvdHlwZSwgJ25vZGVOYW1lJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxOb2RlLnByb3RvdHlwZSwgJ25vZGVUeXBlJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxOb2RlLnByb3RvdHlwZSwgJ25vZGVWYWx1ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTE5vZGUucHJvdG90eXBlLCAncGFyZW50Tm9kZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxOb2RlLnByb3RvdHlwZSwgJ2NoaWxkTm9kZXMnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2hpbGROb2RlTGlzdCB8fCAhdGhpcy5jaGlsZE5vZGVMaXN0Lm5vZGVzKSB7XG4gICAgICAgICAgdGhpcy5jaGlsZE5vZGVMaXN0ID0gbmV3IFhNTE5vZGVMaXN0KHRoaXMuY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkTm9kZUxpc3Q7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MTm9kZS5wcm90b3R5cGUsICdmaXJzdENoaWxkJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5bMF0gfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxOb2RlLnByb3RvdHlwZSwgJ2xhc3RDaGlsZCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuW3RoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMV0gfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxOb2RlLnByb3RvdHlwZSwgJ3ByZXZpb3VzU2libGluZycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICBpID0gdGhpcy5wYXJlbnQuY2hpbGRyZW4uaW5kZXhPZih0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmNoaWxkcmVuW2kgLSAxXSB8fCBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTE5vZGUucHJvdG90eXBlLCAnbmV4dFNpYmxpbmcnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgaSA9IHRoaXMucGFyZW50LmNoaWxkcmVuLmluZGV4T2YodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5jaGlsZHJlbltpICsgMV0gfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxOb2RlLnByb3RvdHlwZSwgJ293bmVyRG9jdW1lbnQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudCgpIHx8IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MTm9kZS5wcm90b3R5cGUsICd0ZXh0Q29udGVudCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjaGlsZCwgaiwgbGVuLCByZWYyLCBzdHI7XG4gICAgICAgIGlmICh0aGlzLm5vZGVUeXBlID09PSBOb2RlVHlwZS5FbGVtZW50IHx8IHRoaXMubm9kZVR5cGUgPT09IE5vZGVUeXBlLkRvY3VtZW50RnJhZ21lbnQpIHtcbiAgICAgICAgICBzdHIgPSAnJztcbiAgICAgICAgICByZWYyID0gdGhpcy5jaGlsZHJlbjtcbiAgICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYyLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICBjaGlsZCA9IHJlZjJbal07XG4gICAgICAgICAgICBpZiAoY2hpbGQudGV4dENvbnRlbnQpIHtcbiAgICAgICAgICAgICAgc3RyICs9IGNoaWxkLnRleHRDb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5zZXRQYXJlbnQgPSBmdW5jdGlvbihwYXJlbnQpIHtcbiAgICAgIHZhciBjaGlsZCwgaiwgbGVuLCByZWYyLCByZXN1bHRzO1xuICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHBhcmVudC5vcHRpb25zO1xuICAgICAgICB0aGlzLnN0cmluZ2lmeSA9IHBhcmVudC5zdHJpbmdpZnk7XG4gICAgICB9XG4gICAgICByZWYyID0gdGhpcy5jaGlsZHJlbjtcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZjIubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgY2hpbGQgPSByZWYyW2pdO1xuICAgICAgICByZXN1bHRzLnB1c2goY2hpbGQuc2V0UGFyZW50KHRoaXMpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5lbGVtZW50ID0gZnVuY3Rpb24obmFtZSwgYXR0cmlidXRlcywgdGV4dCkge1xuICAgICAgdmFyIGNoaWxkTm9kZSwgaXRlbSwgaiwgaywga2V5LCBsYXN0Q2hpbGQsIGxlbiwgbGVuMSwgcmVmMiwgcmVmMywgdmFsO1xuICAgICAgbGFzdENoaWxkID0gbnVsbDtcbiAgICAgIGlmIChhdHRyaWJ1dGVzID09PSBudWxsICYmICh0ZXh0ID09IG51bGwpKSB7XG4gICAgICAgIHJlZjIgPSBbe30sIG51bGxdLCBhdHRyaWJ1dGVzID0gcmVmMlswXSwgdGV4dCA9IHJlZjJbMV07XG4gICAgICB9XG4gICAgICBpZiAoYXR0cmlidXRlcyA9PSBudWxsKSB7XG4gICAgICAgIGF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgIH1cbiAgICAgIGF0dHJpYnV0ZXMgPSBnZXRWYWx1ZShhdHRyaWJ1dGVzKTtcbiAgICAgIGlmICghaXNPYmplY3QoYXR0cmlidXRlcykpIHtcbiAgICAgICAgcmVmMyA9IFthdHRyaWJ1dGVzLCB0ZXh0XSwgdGV4dCA9IHJlZjNbMF0sIGF0dHJpYnV0ZXMgPSByZWYzWzFdO1xuICAgICAgfVxuICAgICAgaWYgKG5hbWUgIT0gbnVsbCkge1xuICAgICAgICBuYW1lID0gZ2V0VmFsdWUobmFtZSk7XG4gICAgICB9XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShuYW1lKSkge1xuICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSBuYW1lLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgaXRlbSA9IG5hbWVbal07XG4gICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5lbGVtZW50KGl0ZW0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24obmFtZSkpIHtcbiAgICAgICAgbGFzdENoaWxkID0gdGhpcy5lbGVtZW50KG5hbWUuYXBwbHkoKSk7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KG5hbWUpKSB7XG4gICAgICAgIGZvciAoa2V5IGluIG5hbWUpIHtcbiAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChuYW1lLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgICB2YWwgPSBuYW1lW2tleV07XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsKSkge1xuICAgICAgICAgICAgdmFsID0gdmFsLmFwcGx5KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmlnbm9yZURlY29yYXRvcnMgJiYgdGhpcy5zdHJpbmdpZnkuY29udmVydEF0dEtleSAmJiBrZXkuaW5kZXhPZih0aGlzLnN0cmluZ2lmeS5jb252ZXJ0QXR0S2V5KSA9PT0gMCkge1xuICAgICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5hdHRyaWJ1dGUoa2V5LnN1YnN0cih0aGlzLnN0cmluZ2lmeS5jb252ZXJ0QXR0S2V5Lmxlbmd0aCksIHZhbCk7XG4gICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5vcHRpb25zLnNlcGFyYXRlQXJyYXlJdGVtcyAmJiBBcnJheS5pc0FycmF5KHZhbCkgJiYgaXNFbXB0eSh2YWwpKSB7XG4gICAgICAgICAgICBsYXN0Q2hpbGQgPSB0aGlzLmR1bW15KCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpICYmIGlzRW1wdHkodmFsKSkge1xuICAgICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5lbGVtZW50KGtleSk7XG4gICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5vcHRpb25zLmtlZXBOdWxsTm9kZXMgJiYgKHZhbCA9PSBudWxsKSkge1xuICAgICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5kdW1teSgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMub3B0aW9ucy5zZXBhcmF0ZUFycmF5SXRlbXMgJiYgQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgICAgICBmb3IgKGsgPSAwLCBsZW4xID0gdmFsLmxlbmd0aDsgayA8IGxlbjE7IGsrKykge1xuICAgICAgICAgICAgICBpdGVtID0gdmFsW2tdO1xuICAgICAgICAgICAgICBjaGlsZE5vZGUgPSB7fTtcbiAgICAgICAgICAgICAgY2hpbGROb2RlW2tleV0gPSBpdGVtO1xuICAgICAgICAgICAgICBsYXN0Q2hpbGQgPSB0aGlzLmVsZW1lbnQoY2hpbGROb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbCkpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmlnbm9yZURlY29yYXRvcnMgJiYgdGhpcy5zdHJpbmdpZnkuY29udmVydFRleHRLZXkgJiYga2V5LmluZGV4T2YodGhpcy5zdHJpbmdpZnkuY29udmVydFRleHRLZXkpID09PSAwKSB7XG4gICAgICAgICAgICAgIGxhc3RDaGlsZCA9IHRoaXMuZWxlbWVudCh2YWwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5lbGVtZW50KGtleSk7XG4gICAgICAgICAgICAgIGxhc3RDaGlsZC5lbGVtZW50KHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxhc3RDaGlsZCA9IHRoaXMuZWxlbWVudChrZXksIHZhbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLm9wdGlvbnMua2VlcE51bGxOb2RlcyAmJiB0ZXh0ID09PSBudWxsKSB7XG4gICAgICAgIGxhc3RDaGlsZCA9IHRoaXMuZHVtbXkoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmlnbm9yZURlY29yYXRvcnMgJiYgdGhpcy5zdHJpbmdpZnkuY29udmVydFRleHRLZXkgJiYgbmFtZS5pbmRleE9mKHRoaXMuc3RyaW5naWZ5LmNvbnZlcnRUZXh0S2V5KSA9PT0gMCkge1xuICAgICAgICAgIGxhc3RDaGlsZCA9IHRoaXMudGV4dCh0ZXh0KTtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5vcHRpb25zLmlnbm9yZURlY29yYXRvcnMgJiYgdGhpcy5zdHJpbmdpZnkuY29udmVydENEYXRhS2V5ICYmIG5hbWUuaW5kZXhPZih0aGlzLnN0cmluZ2lmeS5jb252ZXJ0Q0RhdGFLZXkpID09PSAwKSB7XG4gICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5jZGF0YSh0ZXh0KTtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5vcHRpb25zLmlnbm9yZURlY29yYXRvcnMgJiYgdGhpcy5zdHJpbmdpZnkuY29udmVydENvbW1lbnRLZXkgJiYgbmFtZS5pbmRleE9mKHRoaXMuc3RyaW5naWZ5LmNvbnZlcnRDb21tZW50S2V5KSA9PT0gMCkge1xuICAgICAgICAgIGxhc3RDaGlsZCA9IHRoaXMuY29tbWVudCh0ZXh0KTtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5vcHRpb25zLmlnbm9yZURlY29yYXRvcnMgJiYgdGhpcy5zdHJpbmdpZnkuY29udmVydFJhd0tleSAmJiBuYW1lLmluZGV4T2YodGhpcy5zdHJpbmdpZnkuY29udmVydFJhd0tleSkgPT09IDApIHtcbiAgICAgICAgICBsYXN0Q2hpbGQgPSB0aGlzLnJhdyh0ZXh0KTtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5vcHRpb25zLmlnbm9yZURlY29yYXRvcnMgJiYgdGhpcy5zdHJpbmdpZnkuY29udmVydFBJS2V5ICYmIG5hbWUuaW5kZXhPZih0aGlzLnN0cmluZ2lmeS5jb252ZXJ0UElLZXkpID09PSAwKSB7XG4gICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5pbnN0cnVjdGlvbihuYW1lLnN1YnN0cih0aGlzLnN0cmluZ2lmeS5jb252ZXJ0UElLZXkubGVuZ3RoKSwgdGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5ub2RlKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobGFzdENoaWxkID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGNyZWF0ZSBhbnkgZWxlbWVudHMgd2l0aDogXCIgKyBuYW1lICsgXCIuIFwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGFzdENoaWxkO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5pbnNlcnRCZWZvcmUgPSBmdW5jdGlvbihuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KSB7XG4gICAgICB2YXIgY2hpbGQsIGksIG5ld0NoaWxkLCByZWZDaGlsZCwgcmVtb3ZlZDtcbiAgICAgIGlmIChuYW1lICE9IG51bGwgPyBuYW1lLnR5cGUgOiB2b2lkIDApIHtcbiAgICAgICAgbmV3Q2hpbGQgPSBuYW1lO1xuICAgICAgICByZWZDaGlsZCA9IGF0dHJpYnV0ZXM7XG4gICAgICAgIG5ld0NoaWxkLnNldFBhcmVudCh0aGlzKTtcbiAgICAgICAgaWYgKHJlZkNoaWxkKSB7XG4gICAgICAgICAgaSA9IGNoaWxkcmVuLmluZGV4T2YocmVmQ2hpbGQpO1xuICAgICAgICAgIHJlbW92ZWQgPSBjaGlsZHJlbi5zcGxpY2UoaSk7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChuZXdDaGlsZCk7XG4gICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoY2hpbGRyZW4sIHJlbW92ZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2gobmV3Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdDaGlsZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmlzUm9vdCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBpbnNlcnQgZWxlbWVudHMgYXQgcm9vdCBsZXZlbC4gXCIgKyB0aGlzLmRlYnVnSW5mbyhuYW1lKSk7XG4gICAgICAgIH1cbiAgICAgICAgaSA9IHRoaXMucGFyZW50LmNoaWxkcmVuLmluZGV4T2YodGhpcyk7XG4gICAgICAgIHJlbW92ZWQgPSB0aGlzLnBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaSk7XG4gICAgICAgIGNoaWxkID0gdGhpcy5wYXJlbnQuZWxlbWVudChuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KTtcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5wYXJlbnQuY2hpbGRyZW4sIHJlbW92ZWQpO1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmluc2VydEFmdGVyID0gZnVuY3Rpb24obmFtZSwgYXR0cmlidXRlcywgdGV4dCkge1xuICAgICAgdmFyIGNoaWxkLCBpLCByZW1vdmVkO1xuICAgICAgaWYgKHRoaXMuaXNSb290KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBpbnNlcnQgZWxlbWVudHMgYXQgcm9vdCBsZXZlbC4gXCIgKyB0aGlzLmRlYnVnSW5mbyhuYW1lKSk7XG4gICAgICB9XG4gICAgICBpID0gdGhpcy5wYXJlbnQuY2hpbGRyZW4uaW5kZXhPZih0aGlzKTtcbiAgICAgIHJlbW92ZWQgPSB0aGlzLnBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaSArIDEpO1xuICAgICAgY2hpbGQgPSB0aGlzLnBhcmVudC5lbGVtZW50KG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5wYXJlbnQuY2hpbGRyZW4sIHJlbW92ZWQpO1xuICAgICAgcmV0dXJuIGNoaWxkO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpLCByZWYyO1xuICAgICAgaWYgKHRoaXMuaXNSb290KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCByZW1vdmUgdGhlIHJvb3QgZWxlbWVudC4gXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICAgIGkgPSB0aGlzLnBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHRoaXMpO1xuICAgICAgW10uc3BsaWNlLmFwcGx5KHRoaXMucGFyZW50LmNoaWxkcmVuLCBbaSwgaSAtIGkgKyAxXS5jb25jYXQocmVmMiA9IFtdKSksIHJlZjI7XG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnQ7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLm5vZGUgPSBmdW5jdGlvbihuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KSB7XG4gICAgICB2YXIgY2hpbGQsIHJlZjI7XG4gICAgICBpZiAobmFtZSAhPSBudWxsKSB7XG4gICAgICAgIG5hbWUgPSBnZXRWYWx1ZShuYW1lKTtcbiAgICAgIH1cbiAgICAgIGF0dHJpYnV0ZXMgfHwgKGF0dHJpYnV0ZXMgPSB7fSk7XG4gICAgICBhdHRyaWJ1dGVzID0gZ2V0VmFsdWUoYXR0cmlidXRlcyk7XG4gICAgICBpZiAoIWlzT2JqZWN0KGF0dHJpYnV0ZXMpKSB7XG4gICAgICAgIHJlZjIgPSBbYXR0cmlidXRlcywgdGV4dF0sIHRleHQgPSByZWYyWzBdLCBhdHRyaWJ1dGVzID0gcmVmMlsxXTtcbiAgICAgIH1cbiAgICAgIGNoaWxkID0gbmV3IFhNTEVsZW1lbnQodGhpcywgbmFtZSwgYXR0cmlidXRlcyk7XG4gICAgICBpZiAodGV4dCAhPSBudWxsKSB7XG4gICAgICAgIGNoaWxkLnRleHQodGV4dCk7XG4gICAgICB9XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgcmV0dXJuIGNoaWxkO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS50ZXh0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBjaGlsZDtcbiAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGNoaWxkID0gbmV3IFhNTFRleHQodGhpcywgdmFsdWUpO1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5jZGF0YSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgY2hpbGQ7XG4gICAgICBjaGlsZCA9IG5ldyBYTUxDRGF0YSh0aGlzLCB2YWx1ZSk7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmNvbW1lbnQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIGNoaWxkO1xuICAgICAgY2hpbGQgPSBuZXcgWE1MQ29tbWVudCh0aGlzLCB2YWx1ZSk7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmNvbW1lbnRCZWZvcmUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIGNoaWxkLCBpLCByZW1vdmVkO1xuICAgICAgaSA9IHRoaXMucGFyZW50LmNoaWxkcmVuLmluZGV4T2YodGhpcyk7XG4gICAgICByZW1vdmVkID0gdGhpcy5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGkpO1xuICAgICAgY2hpbGQgPSB0aGlzLnBhcmVudC5jb21tZW50KHZhbHVlKTtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMucGFyZW50LmNoaWxkcmVuLCByZW1vdmVkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5jb21tZW50QWZ0ZXIgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIGNoaWxkLCBpLCByZW1vdmVkO1xuICAgICAgaSA9IHRoaXMucGFyZW50LmNoaWxkcmVuLmluZGV4T2YodGhpcyk7XG4gICAgICByZW1vdmVkID0gdGhpcy5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGkgKyAxKTtcbiAgICAgIGNoaWxkID0gdGhpcy5wYXJlbnQuY29tbWVudCh2YWx1ZSk7XG4gICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLnBhcmVudC5jaGlsZHJlbiwgcmVtb3ZlZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUucmF3ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBjaGlsZDtcbiAgICAgIGNoaWxkID0gbmV3IFhNTFJhdyh0aGlzLCB2YWx1ZSk7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmR1bW15ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY2hpbGQ7XG4gICAgICBjaGlsZCA9IG5ldyBYTUxEdW1teSh0aGlzKTtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaW5zdHJ1Y3Rpb24gPSBmdW5jdGlvbih0YXJnZXQsIHZhbHVlKSB7XG4gICAgICB2YXIgaW5zVGFyZ2V0LCBpbnNWYWx1ZSwgaW5zdHJ1Y3Rpb24sIGosIGxlbjtcbiAgICAgIGlmICh0YXJnZXQgIT0gbnVsbCkge1xuICAgICAgICB0YXJnZXQgPSBnZXRWYWx1ZSh0YXJnZXQpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgdmFsdWUgPSBnZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpKSB7XG4gICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHRhcmdldC5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgIGluc1RhcmdldCA9IHRhcmdldFtqXTtcbiAgICAgICAgICB0aGlzLmluc3RydWN0aW9uKGluc1RhcmdldCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodGFyZ2V0KSkge1xuICAgICAgICBmb3IgKGluc1RhcmdldCBpbiB0YXJnZXQpIHtcbiAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbCh0YXJnZXQsIGluc1RhcmdldCkpIGNvbnRpbnVlO1xuICAgICAgICAgIGluc1ZhbHVlID0gdGFyZ2V0W2luc1RhcmdldF07XG4gICAgICAgICAgdGhpcy5pbnN0cnVjdGlvbihpbnNUYXJnZXQsIGluc1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS5hcHBseSgpO1xuICAgICAgICB9XG4gICAgICAgIGluc3RydWN0aW9uID0gbmV3IFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbih0aGlzLCB0YXJnZXQsIHZhbHVlKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGluc3RydWN0aW9uKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5pbnN0cnVjdGlvbkJlZm9yZSA9IGZ1bmN0aW9uKHRhcmdldCwgdmFsdWUpIHtcbiAgICAgIHZhciBjaGlsZCwgaSwgcmVtb3ZlZDtcbiAgICAgIGkgPSB0aGlzLnBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHRoaXMpO1xuICAgICAgcmVtb3ZlZCA9IHRoaXMucGFyZW50LmNoaWxkcmVuLnNwbGljZShpKTtcbiAgICAgIGNoaWxkID0gdGhpcy5wYXJlbnQuaW5zdHJ1Y3Rpb24odGFyZ2V0LCB2YWx1ZSk7XG4gICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLnBhcmVudC5jaGlsZHJlbiwgcmVtb3ZlZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaW5zdHJ1Y3Rpb25BZnRlciA9IGZ1bmN0aW9uKHRhcmdldCwgdmFsdWUpIHtcbiAgICAgIHZhciBjaGlsZCwgaSwgcmVtb3ZlZDtcbiAgICAgIGkgPSB0aGlzLnBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHRoaXMpO1xuICAgICAgcmVtb3ZlZCA9IHRoaXMucGFyZW50LmNoaWxkcmVuLnNwbGljZShpICsgMSk7XG4gICAgICBjaGlsZCA9IHRoaXMucGFyZW50Lmluc3RydWN0aW9uKHRhcmdldCwgdmFsdWUpO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5wYXJlbnQuY2hpbGRyZW4sIHJlbW92ZWQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmRlY2xhcmF0aW9uID0gZnVuY3Rpb24odmVyc2lvbiwgZW5jb2RpbmcsIHN0YW5kYWxvbmUpIHtcbiAgICAgIHZhciBkb2MsIHhtbGRlYztcbiAgICAgIGRvYyA9IHRoaXMuZG9jdW1lbnQoKTtcbiAgICAgIHhtbGRlYyA9IG5ldyBYTUxEZWNsYXJhdGlvbihkb2MsIHZlcnNpb24sIGVuY29kaW5nLCBzdGFuZGFsb25lKTtcbiAgICAgIGlmIChkb2MuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGRvYy5jaGlsZHJlbi51bnNoaWZ0KHhtbGRlYyk7XG4gICAgICB9IGVsc2UgaWYgKGRvYy5jaGlsZHJlblswXS50eXBlID09PSBOb2RlVHlwZS5EZWNsYXJhdGlvbikge1xuICAgICAgICBkb2MuY2hpbGRyZW5bMF0gPSB4bWxkZWM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb2MuY2hpbGRyZW4udW5zaGlmdCh4bWxkZWMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRvYy5yb290KCkgfHwgZG9jO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5kdGQgPSBmdW5jdGlvbihwdWJJRCwgc3lzSUQpIHtcbiAgICAgIHZhciBjaGlsZCwgZG9jLCBkb2N0eXBlLCBpLCBqLCBrLCBsZW4sIGxlbjEsIHJlZjIsIHJlZjM7XG4gICAgICBkb2MgPSB0aGlzLmRvY3VtZW50KCk7XG4gICAgICBkb2N0eXBlID0gbmV3IFhNTERvY1R5cGUoZG9jLCBwdWJJRCwgc3lzSUQpO1xuICAgICAgcmVmMiA9IGRvYy5jaGlsZHJlbjtcbiAgICAgIGZvciAoaSA9IGogPSAwLCBsZW4gPSByZWYyLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgICBjaGlsZCA9IHJlZjJbaV07XG4gICAgICAgIGlmIChjaGlsZC50eXBlID09PSBOb2RlVHlwZS5Eb2NUeXBlKSB7XG4gICAgICAgICAgZG9jLmNoaWxkcmVuW2ldID0gZG9jdHlwZTtcbiAgICAgICAgICByZXR1cm4gZG9jdHlwZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVmMyA9IGRvYy5jaGlsZHJlbjtcbiAgICAgIGZvciAoaSA9IGsgPSAwLCBsZW4xID0gcmVmMy5sZW5ndGg7IGsgPCBsZW4xOyBpID0gKytrKSB7XG4gICAgICAgIGNoaWxkID0gcmVmM1tpXTtcbiAgICAgICAgaWYgKGNoaWxkLmlzUm9vdCkge1xuICAgICAgICAgIGRvYy5jaGlsZHJlbi5zcGxpY2UoaSwgMCwgZG9jdHlwZSk7XG4gICAgICAgICAgcmV0dXJuIGRvY3R5cGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGRvYy5jaGlsZHJlbi5wdXNoKGRvY3R5cGUpO1xuICAgICAgcmV0dXJuIGRvY3R5cGU7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLnVwID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5pc1Jvb3QpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHJvb3Qgbm9kZSBoYXMgbm8gcGFyZW50LiBVc2UgZG9jKCkgaWYgeW91IG5lZWQgdG8gZ2V0IHRoZSBkb2N1bWVudCBvYmplY3QuXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucGFyZW50O1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5yb290ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIG5vZGUgPSB0aGlzO1xuICAgICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gTm9kZVR5cGUuRG9jdW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZS5yb290T2JqZWN0O1xuICAgICAgICB9IGVsc2UgaWYgKG5vZGUuaXNSb290KSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmRvY3VtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIG5vZGUgPSB0aGlzO1xuICAgICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gTm9kZVR5cGUuRG9jdW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnQoKS5lbmQob3B0aW9ucyk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpO1xuICAgICAgaSA9IHRoaXMucGFyZW50LmNoaWxkcmVuLmluZGV4T2YodGhpcyk7XG4gICAgICBpZiAoaSA8IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQWxyZWFkeSBhdCB0aGUgZmlyc3Qgbm9kZS4gXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnBhcmVudC5jaGlsZHJlbltpIC0gMV07XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpO1xuICAgICAgaSA9IHRoaXMucGFyZW50LmNoaWxkcmVuLmluZGV4T2YodGhpcyk7XG4gICAgICBpZiAoaSA9PT0gLTEgfHwgaSA9PT0gdGhpcy5wYXJlbnQuY2hpbGRyZW4ubGVuZ3RoIC0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBbHJlYWR5IGF0IHRoZSBsYXN0IG5vZGUuIFwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnQuY2hpbGRyZW5baSArIDFdO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5pbXBvcnREb2N1bWVudCA9IGZ1bmN0aW9uKGRvYykge1xuICAgICAgdmFyIGNsb25lZFJvb3Q7XG4gICAgICBjbG9uZWRSb290ID0gZG9jLnJvb3QoKS5jbG9uZSgpO1xuICAgICAgY2xvbmVkUm9vdC5wYXJlbnQgPSB0aGlzO1xuICAgICAgY2xvbmVkUm9vdC5pc1Jvb3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjbG9uZWRSb290KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5kZWJ1Z0luZm8gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICB2YXIgcmVmMiwgcmVmMztcbiAgICAgIG5hbWUgPSBuYW1lIHx8IHRoaXMubmFtZTtcbiAgICAgIGlmICgobmFtZSA9PSBudWxsKSAmJiAhKChyZWYyID0gdGhpcy5wYXJlbnQpICE9IG51bGwgPyByZWYyLm5hbWUgOiB2b2lkIDApKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgfSBlbHNlIGlmIChuYW1lID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFwicGFyZW50OiA8XCIgKyB0aGlzLnBhcmVudC5uYW1lICsgXCI+XCI7XG4gICAgICB9IGVsc2UgaWYgKCEoKHJlZjMgPSB0aGlzLnBhcmVudCkgIT0gbnVsbCA/IHJlZjMubmFtZSA6IHZvaWQgMCkpIHtcbiAgICAgICAgcmV0dXJuIFwibm9kZTogPFwiICsgbmFtZSArIFwiPlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwibm9kZTogPFwiICsgbmFtZSArIFwiPiwgcGFyZW50OiA8XCIgKyB0aGlzLnBhcmVudC5uYW1lICsgXCI+XCI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmVsZSA9IGZ1bmN0aW9uKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQobmFtZSwgYXR0cmlidXRlcywgdGV4dCk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLm5vZCA9IGZ1bmN0aW9uKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vZGUobmFtZSwgYXR0cmlidXRlcywgdGV4dCk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLnR4dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZGF0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNkYXRhKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuY29tID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbW1lbnQodmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5pbnMgPSBmdW5jdGlvbih0YXJnZXQsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnN0cnVjdGlvbih0YXJnZXQsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZG9jID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5kb2N1bWVudCgpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5kZWMgPSBmdW5jdGlvbih2ZXJzaW9uLCBlbmNvZGluZywgc3RhbmRhbG9uZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVjbGFyYXRpb24odmVyc2lvbiwgZW5jb2RpbmcsIHN0YW5kYWxvbmUpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5lID0gZnVuY3Rpb24obmFtZSwgYXR0cmlidXRlcywgdGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudChuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUubiA9IGZ1bmN0aW9uKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vZGUobmFtZSwgYXR0cmlidXRlcywgdGV4dCk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLnQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dCh2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuY2RhdGEodmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5jID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbW1lbnQodmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5yID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJhdyh2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmkgPSBmdW5jdGlvbih0YXJnZXQsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnN0cnVjdGlvbih0YXJnZXQsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUudSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudXAoKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaW1wb3J0WE1MQnVpbGRlciA9IGZ1bmN0aW9uKGRvYykge1xuICAgICAgcmV0dXJuIHRoaXMuaW1wb3J0RG9jdW1lbnQoZG9jKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUucmVwbGFjZUNoaWxkID0gZnVuY3Rpb24obmV3Q2hpbGQsIG9sZENoaWxkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24ob2xkQ2hpbGQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuYXBwZW5kQ2hpbGQgPSBmdW5jdGlvbihuZXdDaGlsZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5oYXNDaGlsZE5vZGVzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5sZW5ndGggIT09IDA7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmNsb25lTm9kZSA9IGZ1bmN0aW9uKGRlZXApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUubm9ybWFsaXplID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmlzU3VwcG9ydGVkID0gZnVuY3Rpb24oZmVhdHVyZSwgdmVyc2lvbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmhhc0F0dHJpYnV0ZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJpYnMubGVuZ3RoICE9PSAwO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgICB2YXIgcmVmLCByZXM7XG4gICAgICByZWYgPSB0aGlzO1xuICAgICAgaWYgKHJlZiA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZG9jdW1lbnQoKSAhPT0gb3RoZXIuZG9jdW1lbnQoKSkge1xuICAgICAgICByZXMgPSBEb2N1bWVudFBvc2l0aW9uLkRpc2Nvbm5lY3RlZCB8IERvY3VtZW50UG9zaXRpb24uSW1wbGVtZW50YXRpb25TcGVjaWZpYztcbiAgICAgICAgaWYgKE1hdGgucmFuZG9tKCkgPCAwLjUpIHtcbiAgICAgICAgICByZXMgfD0gRG9jdW1lbnRQb3NpdGlvbi5QcmVjZWRpbmc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzIHw9IERvY3VtZW50UG9zaXRpb24uRm9sbG93aW5nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9IGVsc2UgaWYgKHJlZi5pc0FuY2VzdG9yKG90aGVyKSkge1xuICAgICAgICByZXR1cm4gRG9jdW1lbnRQb3NpdGlvbi5Db250YWlucyB8IERvY3VtZW50UG9zaXRpb24uUHJlY2VkaW5nO1xuICAgICAgfSBlbHNlIGlmIChyZWYuaXNEZXNjZW5kYW50KG90aGVyKSkge1xuICAgICAgICByZXR1cm4gRG9jdW1lbnRQb3NpdGlvbi5Db250YWlucyB8IERvY3VtZW50UG9zaXRpb24uRm9sbG93aW5nO1xuICAgICAgfSBlbHNlIGlmIChyZWYuaXNQcmVjZWRpbmcob3RoZXIpKSB7XG4gICAgICAgIHJldHVybiBEb2N1bWVudFBvc2l0aW9uLlByZWNlZGluZztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBEb2N1bWVudFBvc2l0aW9uLkZvbGxvd2luZztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaXNTYW1lTm9kZSA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmxvb2t1cFByZWZpeCA9IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5pc0RlZmF1bHROYW1lc3BhY2UgPSBmdW5jdGlvbihuYW1lc3BhY2VVUkkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUubG9va3VwTmFtZXNwYWNlVVJJID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmlzRXF1YWxOb2RlID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgdmFyIGksIGosIHJlZjI7XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSAhPT0gdGhpcy5ub2RlVHlwZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5jaGlsZHJlbi5sZW5ndGggIT09IHRoaXMuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IGogPSAwLCByZWYyID0gdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxOyAwIDw9IHJlZjIgPyBqIDw9IHJlZjIgOiBqID49IHJlZjI7IGkgPSAwIDw9IHJlZjIgPyArK2ogOiAtLWopIHtcbiAgICAgICAgaWYgKCF0aGlzLmNoaWxkcmVuW2ldLmlzRXF1YWxOb2RlKG5vZGUuY2hpbGRyZW5baV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZ2V0RmVhdHVyZSA9IGZ1bmN0aW9uKGZlYXR1cmUsIHZlcnNpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuc2V0VXNlckRhdGEgPSBmdW5jdGlvbihrZXksIGRhdGEsIGhhbmRsZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZ2V0VXNlckRhdGEgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbihvdGhlcikge1xuICAgICAgaWYgKCFvdGhlcikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3RoZXIgPT09IHRoaXMgfHwgdGhpcy5pc0Rlc2NlbmRhbnQob3RoZXIpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5pc0Rlc2NlbmRhbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgY2hpbGQsIGlzRGVzY2VuZGFudENoaWxkLCBqLCBsZW4sIHJlZjI7XG4gICAgICByZWYyID0gdGhpcy5jaGlsZHJlbjtcbiAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZjIubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgY2hpbGQgPSByZWYyW2pdO1xuICAgICAgICBpZiAobm9kZSA9PT0gY2hpbGQpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpc0Rlc2NlbmRhbnRDaGlsZCA9IGNoaWxkLmlzRGVzY2VuZGFudChub2RlKTtcbiAgICAgICAgaWYgKGlzRGVzY2VuZGFudENoaWxkKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaXNBbmNlc3RvciA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlLmlzRGVzY2VuZGFudCh0aGlzKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaXNQcmVjZWRpbmcgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgbm9kZVBvcywgdGhpc1BvcztcbiAgICAgIG5vZGVQb3MgPSB0aGlzLnRyZWVQb3NpdGlvbihub2RlKTtcbiAgICAgIHRoaXNQb3MgPSB0aGlzLnRyZWVQb3NpdGlvbih0aGlzKTtcbiAgICAgIGlmIChub2RlUG9zID09PSAtMSB8fCB0aGlzUG9zID09PSAtMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbm9kZVBvcyA8IHRoaXNQb3M7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmlzRm9sbG93aW5nID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgdmFyIG5vZGVQb3MsIHRoaXNQb3M7XG4gICAgICBub2RlUG9zID0gdGhpcy50cmVlUG9zaXRpb24obm9kZSk7XG4gICAgICB0aGlzUG9zID0gdGhpcy50cmVlUG9zaXRpb24odGhpcyk7XG4gICAgICBpZiAobm9kZVBvcyA9PT0gLTEgfHwgdGhpc1BvcyA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5vZGVQb3MgPiB0aGlzUG9zO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS50cmVlUG9zaXRpb24gPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgZm91bmQsIHBvcztcbiAgICAgIHBvcyA9IDA7XG4gICAgICBmb3VuZCA9IGZhbHNlO1xuICAgICAgdGhpcy5mb3JlYWNoVHJlZU5vZGUodGhpcy5kb2N1bWVudCgpLCBmdW5jdGlvbihjaGlsZE5vZGUpIHtcbiAgICAgICAgcG9zKys7XG4gICAgICAgIGlmICghZm91bmQgJiYgY2hpbGROb2RlID09PSBub2RlKSB7XG4gICAgICAgICAgcmV0dXJuIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgcmV0dXJuIHBvcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZm9yZWFjaFRyZWVOb2RlID0gZnVuY3Rpb24obm9kZSwgZnVuYykge1xuICAgICAgdmFyIGNoaWxkLCBqLCBsZW4sIHJlZjIsIHJlcztcbiAgICAgIG5vZGUgfHwgKG5vZGUgPSB0aGlzLmRvY3VtZW50KCkpO1xuICAgICAgcmVmMiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYyLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgIGNoaWxkID0gcmVmMltqXTtcbiAgICAgICAgaWYgKHJlcyA9IGZ1bmMoY2hpbGQpKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXMgPSB0aGlzLmZvcmVhY2hUcmVlTm9kZShjaGlsZCwgZnVuYyk7XG4gICAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTE5vZGU7XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MU3RyaW5naWZpZXIsXG4gICAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MU3RyaW5naWZpZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MU3RyaW5naWZpZXIob3B0aW9ucykge1xuICAgICAgdGhpcy5hc3NlcnRMZWdhbE5hbWUgPSBiaW5kKHRoaXMuYXNzZXJ0TGVnYWxOYW1lLCB0aGlzKTtcbiAgICAgIHRoaXMuYXNzZXJ0TGVnYWxDaGFyID0gYmluZCh0aGlzLmFzc2VydExlZ2FsQ2hhciwgdGhpcyk7XG4gICAgICB2YXIga2V5LCByZWYsIHZhbHVlO1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy52ZXJzaW9uKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy52ZXJzaW9uID0gJzEuMCc7XG4gICAgICB9XG4gICAgICByZWYgPSBvcHRpb25zLnN0cmluZ2lmeSB8fCB7fTtcbiAgICAgIGZvciAoa2V5IGluIHJlZikge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChyZWYsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICB2YWx1ZSA9IHJlZltrZXldO1xuICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUubmFtZSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub1ZhbGlkYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmFzc2VydExlZ2FsTmFtZSgnJyArIHZhbCB8fCAnJyk7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS50ZXh0ID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0TGVnYWxDaGFyKHRoaXMudGV4dEVzY2FwZSgnJyArIHZhbCB8fCAnJykpO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuY2RhdGEgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgICB2YWwgPSAnJyArIHZhbCB8fCAnJztcbiAgICAgIHZhbCA9IHZhbC5yZXBsYWNlKCddXT4nLCAnXV1dXT48IVtDREFUQVs+Jyk7XG4gICAgICByZXR1cm4gdGhpcy5hc3NlcnRMZWdhbENoYXIodmFsKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmNvbW1lbnQgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgICB2YWwgPSAnJyArIHZhbCB8fCAnJztcbiAgICAgIGlmICh2YWwubWF0Y2goLy0tLykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29tbWVudCB0ZXh0IGNhbm5vdCBjb250YWluIGRvdWJsZS1oeXBlbjogXCIgKyB2YWwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0TGVnYWxDaGFyKHZhbCk7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5yYXcgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gJycgKyB2YWwgfHwgJyc7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5hdHRWYWx1ZSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub1ZhbGlkYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmFzc2VydExlZ2FsQ2hhcih0aGlzLmF0dEVzY2FwZSh2YWwgPSAnJyArIHZhbCB8fCAnJykpO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuaW5zVGFyZ2V0ID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0TGVnYWxDaGFyKCcnICsgdmFsIHx8ICcnKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmluc1ZhbHVlID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgdmFsID0gJycgKyB2YWwgfHwgJyc7XG4gICAgICBpZiAodmFsLm1hdGNoKC9cXD8+LykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwcm9jZXNzaW5nIGluc3RydWN0aW9uIHZhbHVlOiBcIiArIHZhbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5hc3NlcnRMZWdhbENoYXIodmFsKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLnhtbFZlcnNpb24gPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgICB2YWwgPSAnJyArIHZhbCB8fCAnJztcbiAgICAgIGlmICghdmFsLm1hdGNoKC8xXFwuWzAtOV0rLykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB2ZXJzaW9uIG51bWJlcjogXCIgKyB2YWwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLnhtbEVuY29kaW5nID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgdmFsID0gJycgKyB2YWwgfHwgJyc7XG4gICAgICBpZiAoIXZhbC5tYXRjaCgvXltBLVphLXpdKD86W0EtWmEtejAtOS5fLV0pKiQvKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGVuY29kaW5nOiBcIiArIHZhbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5hc3NlcnRMZWdhbENoYXIodmFsKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLnhtbFN0YW5kYWxvbmUgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgICBpZiAodmFsKSB7XG4gICAgICAgIHJldHVybiBcInllc1wiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwibm9cIjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmR0ZFB1YklEID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0TGVnYWxDaGFyKCcnICsgdmFsIHx8ICcnKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmR0ZFN5c0lEID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0TGVnYWxDaGFyKCcnICsgdmFsIHx8ICcnKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmR0ZEVsZW1lbnRWYWx1ZSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub1ZhbGlkYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmFzc2VydExlZ2FsQ2hhcignJyArIHZhbCB8fCAnJyk7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5kdGRBdHRUeXBlID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0TGVnYWxDaGFyKCcnICsgdmFsIHx8ICcnKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmR0ZEF0dERlZmF1bHQgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5hc3NlcnRMZWdhbENoYXIoJycgKyB2YWwgfHwgJycpO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuZHRkRW50aXR5VmFsdWUgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5hc3NlcnRMZWdhbENoYXIoJycgKyB2YWwgfHwgJycpO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuZHRkTkRhdGEgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5hc3NlcnRMZWdhbENoYXIoJycgKyB2YWwgfHwgJycpO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuY29udmVydEF0dEtleSA9ICdAJztcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5jb252ZXJ0UElLZXkgPSAnPyc7XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuY29udmVydFRleHRLZXkgPSAnI3RleHQnO1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmNvbnZlcnRDRGF0YUtleSA9ICcjY2RhdGEnO1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmNvbnZlcnRDb21tZW50S2V5ID0gJyNjb21tZW50JztcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5jb252ZXJ0UmF3S2V5ID0gJyNyYXcnO1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmFzc2VydExlZ2FsQ2hhciA9IGZ1bmN0aW9uKHN0cikge1xuICAgICAgdmFyIHJlZ2V4LCByZXM7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgfVxuICAgICAgcmVnZXggPSAnJztcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudmVyc2lvbiA9PT0gJzEuMCcpIHtcbiAgICAgICAgcmVnZXggPSAvW1xcMC1cXHgwOFxceDBCXFxmXFx4MEUtXFx4MUZcXHVGRkZFXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0vO1xuICAgICAgICBpZiAocmVzID0gc3RyLm1hdGNoKHJlZ2V4KSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY2hhcmFjdGVyIGluIHN0cmluZzogXCIgKyBzdHIgKyBcIiBhdCBpbmRleCBcIiArIHJlcy5pbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLnZlcnNpb24gPT09ICcxLjEnKSB7XG4gICAgICAgIHJlZ2V4ID0gL1tcXDBcXHVGRkZFXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0vO1xuICAgICAgICBpZiAocmVzID0gc3RyLm1hdGNoKHJlZ2V4KSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY2hhcmFjdGVyIGluIHN0cmluZzogXCIgKyBzdHIgKyBcIiBhdCBpbmRleCBcIiArIHJlcy5pbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5hc3NlcnRMZWdhbE5hbWUgPSBmdW5jdGlvbihzdHIpIHtcbiAgICAgIHZhciByZWdleDtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgICB9XG4gICAgICB0aGlzLmFzc2VydExlZ2FsQ2hhcihzdHIpO1xuICAgICAgcmVnZXggPSAvXihbOkEtWl9hLXpcXHhDMC1cXHhENlxceEQ4LVxceEY2XFx4RjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMENcXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXXxbXFx1RDgwMC1cXHVEQjdGXVtcXHVEQzAwLVxcdURGRkZdKShbXFx4MkRcXC4wLTpBLVpfYS16XFx4QjdcXHhDMC1cXHhENlxceEQ4LVxceEY2XFx4RjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMENcXHUyMDBEXFx1MjAzRlxcdTIwNDBcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdfFtcXHVEODAwLVxcdURCN0ZdW1xcdURDMDAtXFx1REZGRl0pKiQvO1xuICAgICAgaWYgKCFzdHIubWF0Y2gocmVnZXgpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY2hhcmFjdGVyIGluIG5hbWVcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUudGV4dEVzY2FwZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgICAgdmFyIGFtcHJlZ2V4O1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub1ZhbGlkYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgIH1cbiAgICAgIGFtcHJlZ2V4ID0gdGhpcy5vcHRpb25zLm5vRG91YmxlRW5jb2RpbmcgPyAvKD8hJlxcUys7KSYvZyA6IC8mL2c7XG4gICAgICByZXR1cm4gc3RyLnJlcGxhY2UoYW1wcmVnZXgsICcmYW1wOycpLnJlcGxhY2UoLzwvZywgJyZsdDsnKS5yZXBsYWNlKC8+L2csICcmZ3Q7JykucmVwbGFjZSgvXFxyL2csICcmI3hEOycpO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuYXR0RXNjYXBlID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgICB2YXIgYW1wcmVnZXg7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgfVxuICAgICAgYW1wcmVnZXggPSB0aGlzLm9wdGlvbnMubm9Eb3VibGVFbmNvZGluZyA/IC8oPyEmXFxTKzspJi9nIDogLyYvZztcbiAgICAgIHJldHVybiBzdHIucmVwbGFjZShhbXByZWdleCwgJyZhbXA7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKS5yZXBsYWNlKC9cXHQvZywgJyYjeDk7JykucmVwbGFjZSgvXFxuL2csICcmI3hBOycpLnJlcGxhY2UoL1xcci9nLCAnJiN4RDsnKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTFN0cmluZ2lmaWVyO1xuXG4gIH0pKCk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgTm9uZTogMCxcbiAgICBPcGVuVGFnOiAxLFxuICAgIEluc2lkZVRhZzogMixcbiAgICBDbG9zZVRhZzogM1xuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgV3JpdGVyU3RhdGUsIFhNTENEYXRhLCBYTUxDb21tZW50LCBYTUxEVERBdHRMaXN0LCBYTUxEVERFbGVtZW50LCBYTUxEVERFbnRpdHksIFhNTERURE5vdGF0aW9uLCBYTUxEZWNsYXJhdGlvbiwgWE1MRG9jVHlwZSwgWE1MRHVtbXksIFhNTEVsZW1lbnQsIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbiwgWE1MUmF3LCBYTUxUZXh0LCBYTUxXcml0ZXJCYXNlLCBhc3NpZ24sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIGFzc2lnbiA9IHJlcXVpcmUoJy4vVXRpbGl0eScpLmFzc2lnbjtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBYTUxEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4vWE1MRGVjbGFyYXRpb24nKTtcblxuICBYTUxEb2NUeXBlID0gcmVxdWlyZSgnLi9YTUxEb2NUeXBlJyk7XG5cbiAgWE1MQ0RhdGEgPSByZXF1aXJlKCcuL1hNTENEYXRhJyk7XG5cbiAgWE1MQ29tbWVudCA9IHJlcXVpcmUoJy4vWE1MQ29tbWVudCcpO1xuXG4gIFhNTEVsZW1lbnQgPSByZXF1aXJlKCcuL1hNTEVsZW1lbnQnKTtcblxuICBYTUxSYXcgPSByZXF1aXJlKCcuL1hNTFJhdycpO1xuXG4gIFhNTFRleHQgPSByZXF1aXJlKCcuL1hNTFRleHQnKTtcblxuICBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gPSByZXF1aXJlKCcuL1hNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbicpO1xuXG4gIFhNTER1bW15ID0gcmVxdWlyZSgnLi9YTUxEdW1teScpO1xuXG4gIFhNTERUREF0dExpc3QgPSByZXF1aXJlKCcuL1hNTERUREF0dExpc3QnKTtcblxuICBYTUxEVERFbGVtZW50ID0gcmVxdWlyZSgnLi9YTUxEVERFbGVtZW50Jyk7XG5cbiAgWE1MRFRERW50aXR5ID0gcmVxdWlyZSgnLi9YTUxEVERFbnRpdHknKTtcblxuICBYTUxEVEROb3RhdGlvbiA9IHJlcXVpcmUoJy4vWE1MRFRETm90YXRpb24nKTtcblxuICBXcml0ZXJTdGF0ZSA9IHJlcXVpcmUoJy4vV3JpdGVyU3RhdGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTFdyaXRlckJhc2UgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MV3JpdGVyQmFzZShvcHRpb25zKSB7XG4gICAgICB2YXIga2V5LCByZWYsIHZhbHVlO1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICByZWYgPSBvcHRpb25zLndyaXRlciB8fCB7fTtcbiAgICAgIGZvciAoa2V5IGluIHJlZikge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChyZWYsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICB2YWx1ZSA9IHJlZltrZXldO1xuICAgICAgICB0aGlzW1wiX1wiICsga2V5XSA9IHRoaXNba2V5XTtcbiAgICAgICAgdGhpc1trZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgWE1MV3JpdGVyQmFzZS5wcm90b3R5cGUuZmlsdGVyT3B0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBmaWx0ZXJlZE9wdGlvbnMsIHJlZiwgcmVmMSwgcmVmMiwgcmVmMywgcmVmNCwgcmVmNSwgcmVmNjtcbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG4gICAgICBvcHRpb25zID0gYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgZmlsdGVyZWRPcHRpb25zID0ge1xuICAgICAgICB3cml0ZXI6IHRoaXNcbiAgICAgIH07XG4gICAgICBmaWx0ZXJlZE9wdGlvbnMucHJldHR5ID0gb3B0aW9ucy5wcmV0dHkgfHwgZmFsc2U7XG4gICAgICBmaWx0ZXJlZE9wdGlvbnMuYWxsb3dFbXB0eSA9IG9wdGlvbnMuYWxsb3dFbXB0eSB8fCBmYWxzZTtcbiAgICAgIGZpbHRlcmVkT3B0aW9ucy5pbmRlbnQgPSAocmVmID0gb3B0aW9ucy5pbmRlbnQpICE9IG51bGwgPyByZWYgOiAnICAnO1xuICAgICAgZmlsdGVyZWRPcHRpb25zLm5ld2xpbmUgPSAocmVmMSA9IG9wdGlvbnMubmV3bGluZSkgIT0gbnVsbCA/IHJlZjEgOiAnXFxuJztcbiAgICAgIGZpbHRlcmVkT3B0aW9ucy5vZmZzZXQgPSAocmVmMiA9IG9wdGlvbnMub2Zmc2V0KSAhPSBudWxsID8gcmVmMiA6IDA7XG4gICAgICBmaWx0ZXJlZE9wdGlvbnMuZG9udFByZXR0eVRleHROb2RlcyA9IChyZWYzID0gKHJlZjQgPSBvcHRpb25zLmRvbnRQcmV0dHlUZXh0Tm9kZXMpICE9IG51bGwgPyByZWY0IDogb3B0aW9ucy5kb250cHJldHR5dGV4dG5vZGVzKSAhPSBudWxsID8gcmVmMyA6IDA7XG4gICAgICBmaWx0ZXJlZE9wdGlvbnMuc3BhY2VCZWZvcmVTbGFzaCA9IChyZWY1ID0gKHJlZjYgPSBvcHRpb25zLnNwYWNlQmVmb3JlU2xhc2gpICE9IG51bGwgPyByZWY2IDogb3B0aW9ucy5zcGFjZWJlZm9yZXNsYXNoKSAhPSBudWxsID8gcmVmNSA6ICcnO1xuICAgICAgaWYgKGZpbHRlcmVkT3B0aW9ucy5zcGFjZUJlZm9yZVNsYXNoID09PSB0cnVlKSB7XG4gICAgICAgIGZpbHRlcmVkT3B0aW9ucy5zcGFjZUJlZm9yZVNsYXNoID0gJyAnO1xuICAgICAgfVxuICAgICAgZmlsdGVyZWRPcHRpb25zLnN1cHByZXNzUHJldHR5Q291bnQgPSAwO1xuICAgICAgZmlsdGVyZWRPcHRpb25zLnVzZXIgPSB7fTtcbiAgICAgIGZpbHRlcmVkT3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk5vbmU7XG4gICAgICByZXR1cm4gZmlsdGVyZWRPcHRpb25zO1xuICAgIH07XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS5pbmRlbnQgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgdmFyIGluZGVudExldmVsO1xuICAgICAgaWYgKCFvcHRpb25zLnByZXR0eSB8fCBvcHRpb25zLnN1cHByZXNzUHJldHR5Q291bnQpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnByZXR0eSkge1xuICAgICAgICBpbmRlbnRMZXZlbCA9IChsZXZlbCB8fCAwKSArIG9wdGlvbnMub2Zmc2V0ICsgMTtcbiAgICAgICAgaWYgKGluZGVudExldmVsID4gMCkge1xuICAgICAgICAgIHJldHVybiBuZXcgQXJyYXkoaW5kZW50TGV2ZWwpLmpvaW4ob3B0aW9ucy5pbmRlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gJyc7XG4gICAgfTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLmVuZGxpbmUgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgaWYgKCFvcHRpb25zLnByZXR0eSB8fCBvcHRpb25zLnN1cHByZXNzUHJldHR5Q291bnQpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMubmV3bGluZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MV3JpdGVyQmFzZS5wcm90b3R5cGUuYXR0cmlidXRlID0gZnVuY3Rpb24oYXR0LCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgdmFyIHI7XG4gICAgICB0aGlzLm9wZW5BdHRyaWJ1dGUoYXR0LCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICByID0gJyAnICsgYXR0Lm5hbWUgKyAnPVwiJyArIGF0dC52YWx1ZSArICdcIic7XG4gICAgICB0aGlzLmNsb3NlQXR0cmlidXRlKGF0dCwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLmNkYXRhID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHZhciByO1xuICAgICAgdGhpcy5vcGVuTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuT3BlblRhZztcbiAgICAgIHIgPSB0aGlzLmluZGVudChub2RlLCBvcHRpb25zLCBsZXZlbCkgKyAnPCFbQ0RBVEFbJztcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5JbnNpZGVUYWc7XG4gICAgICByICs9IG5vZGUudmFsdWU7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuQ2xvc2VUYWc7XG4gICAgICByICs9ICddXT4nICsgdGhpcy5lbmRsaW5lKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5Ob25lO1xuICAgICAgdGhpcy5jbG9zZU5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLmNvbW1lbnQgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgdmFyIHI7XG4gICAgICB0aGlzLm9wZW5Ob2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5PcGVuVGFnO1xuICAgICAgciA9IHRoaXMuaW5kZW50KG5vZGUsIG9wdGlvbnMsIGxldmVsKSArICc8IS0tICc7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuSW5zaWRlVGFnO1xuICAgICAgciArPSBub2RlLnZhbHVlO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgciArPSAnIC0tPicgKyB0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk5vbmU7XG4gICAgICB0aGlzLmNsb3NlTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICByZXR1cm4gcjtcbiAgICB9O1xuXG4gICAgWE1MV3JpdGVyQmFzZS5wcm90b3R5cGUuZGVjbGFyYXRpb24gPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgdmFyIHI7XG4gICAgICB0aGlzLm9wZW5Ob2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5PcGVuVGFnO1xuICAgICAgciA9IHRoaXMuaW5kZW50KG5vZGUsIG9wdGlvbnMsIGxldmVsKSArICc8P3htbCc7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuSW5zaWRlVGFnO1xuICAgICAgciArPSAnIHZlcnNpb249XCInICsgbm9kZS52ZXJzaW9uICsgJ1wiJztcbiAgICAgIGlmIChub2RlLmVuY29kaW5nICE9IG51bGwpIHtcbiAgICAgICAgciArPSAnIGVuY29kaW5nPVwiJyArIG5vZGUuZW5jb2RpbmcgKyAnXCInO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUuc3RhbmRhbG9uZSAhPSBudWxsKSB7XG4gICAgICAgIHIgKz0gJyBzdGFuZGFsb25lPVwiJyArIG5vZGUuc3RhbmRhbG9uZSArICdcIic7XG4gICAgICB9XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuQ2xvc2VUYWc7XG4gICAgICByICs9IG9wdGlvbnMuc3BhY2VCZWZvcmVTbGFzaCArICc/Pic7XG4gICAgICByICs9IHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuTm9uZTtcbiAgICAgIHRoaXMuY2xvc2VOb2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIHJldHVybiByO1xuICAgIH07XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS5kb2NUeXBlID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHZhciBjaGlsZCwgaSwgbGVuLCByLCByZWY7XG4gICAgICBsZXZlbCB8fCAobGV2ZWwgPSAwKTtcbiAgICAgIHRoaXMub3Blbk5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk9wZW5UYWc7XG4gICAgICByID0gdGhpcy5pbmRlbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgciArPSAnPCFET0NUWVBFICcgKyBub2RlLnJvb3QoKS5uYW1lO1xuICAgICAgaWYgKG5vZGUucHViSUQgJiYgbm9kZS5zeXNJRCkge1xuICAgICAgICByICs9ICcgUFVCTElDIFwiJyArIG5vZGUucHViSUQgKyAnXCIgXCInICsgbm9kZS5zeXNJRCArICdcIic7XG4gICAgICB9IGVsc2UgaWYgKG5vZGUuc3lzSUQpIHtcbiAgICAgICAgciArPSAnIFNZU1RFTSBcIicgKyBub2RlLnN5c0lEICsgJ1wiJztcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgciArPSAnIFsnO1xuICAgICAgICByICs9IHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5JbnNpZGVUYWc7XG4gICAgICAgIHJlZiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGNoaWxkID0gcmVmW2ldO1xuICAgICAgICAgIHIgKz0gdGhpcy53cml0ZUNoaWxkTm9kZShjaGlsZCwgb3B0aW9ucywgbGV2ZWwgKyAxKTtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuQ2xvc2VUYWc7XG4gICAgICAgIHIgKz0gJ10nO1xuICAgICAgfVxuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgciArPSBvcHRpb25zLnNwYWNlQmVmb3JlU2xhc2ggKyAnPic7XG4gICAgICByICs9IHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuTm9uZTtcbiAgICAgIHRoaXMuY2xvc2VOb2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIHJldHVybiByO1xuICAgIH07XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS5lbGVtZW50ID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHZhciBhdHQsIGNoaWxkLCBjaGlsZE5vZGVDb3VudCwgZmlyc3RDaGlsZE5vZGUsIGksIGosIGxlbiwgbGVuMSwgbmFtZSwgcHJldHR5U3VwcHJlc3NlZCwgciwgcmVmLCByZWYxLCByZWYyO1xuICAgICAgbGV2ZWwgfHwgKGxldmVsID0gMCk7XG4gICAgICBwcmV0dHlTdXBwcmVzc2VkID0gZmFsc2U7XG4gICAgICByID0gJyc7XG4gICAgICB0aGlzLm9wZW5Ob2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5PcGVuVGFnO1xuICAgICAgciArPSB0aGlzLmluZGVudChub2RlLCBvcHRpb25zLCBsZXZlbCkgKyAnPCcgKyBub2RlLm5hbWU7XG4gICAgICByZWYgPSBub2RlLmF0dHJpYnM7XG4gICAgICBmb3IgKG5hbWUgaW4gcmVmKSB7XG4gICAgICAgIGlmICghaGFzUHJvcC5jYWxsKHJlZiwgbmFtZSkpIGNvbnRpbnVlO1xuICAgICAgICBhdHQgPSByZWZbbmFtZV07XG4gICAgICAgIHIgKz0gdGhpcy5hdHRyaWJ1dGUoYXR0LCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICB9XG4gICAgICBjaGlsZE5vZGVDb3VudCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgZmlyc3RDaGlsZE5vZGUgPSBjaGlsZE5vZGVDb3VudCA9PT0gMCA/IG51bGwgOiBub2RlLmNoaWxkcmVuWzBdO1xuICAgICAgaWYgKGNoaWxkTm9kZUNvdW50ID09PSAwIHx8IG5vZGUuY2hpbGRyZW4uZXZlcnkoZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gKGUudHlwZSA9PT0gTm9kZVR5cGUuVGV4dCB8fCBlLnR5cGUgPT09IE5vZGVUeXBlLlJhdykgJiYgZS52YWx1ZSA9PT0gJyc7XG4gICAgICB9KSkge1xuICAgICAgICBpZiAob3B0aW9ucy5hbGxvd0VtcHR5KSB7XG4gICAgICAgICAgciArPSAnPic7XG4gICAgICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgICAgIHIgKz0gJzwvJyArIG5vZGUubmFtZSArICc+JyArIHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgICAgIHIgKz0gb3B0aW9ucy5zcGFjZUJlZm9yZVNsYXNoICsgJy8+JyArIHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5wcmV0dHkgJiYgY2hpbGROb2RlQ291bnQgPT09IDEgJiYgKGZpcnN0Q2hpbGROb2RlLnR5cGUgPT09IE5vZGVUeXBlLlRleHQgfHwgZmlyc3RDaGlsZE5vZGUudHlwZSA9PT0gTm9kZVR5cGUuUmF3KSAmJiAoZmlyc3RDaGlsZE5vZGUudmFsdWUgIT0gbnVsbCkpIHtcbiAgICAgICAgciArPSAnPic7XG4gICAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5JbnNpZGVUYWc7XG4gICAgICAgIG9wdGlvbnMuc3VwcHJlc3NQcmV0dHlDb3VudCsrO1xuICAgICAgICBwcmV0dHlTdXBwcmVzc2VkID0gdHJ1ZTtcbiAgICAgICAgciArPSB0aGlzLndyaXRlQ2hpbGROb2RlKGZpcnN0Q2hpbGROb2RlLCBvcHRpb25zLCBsZXZlbCArIDEpO1xuICAgICAgICBvcHRpb25zLnN1cHByZXNzUHJldHR5Q291bnQtLTtcbiAgICAgICAgcHJldHR5U3VwcHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuQ2xvc2VUYWc7XG4gICAgICAgIHIgKz0gJzwvJyArIG5vZGUubmFtZSArICc+JyArIHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAob3B0aW9ucy5kb250UHJldHR5VGV4dE5vZGVzKSB7XG4gICAgICAgICAgcmVmMSA9IG5vZGUuY2hpbGRyZW47XG4gICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmMS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY2hpbGQgPSByZWYxW2ldO1xuICAgICAgICAgICAgaWYgKChjaGlsZC50eXBlID09PSBOb2RlVHlwZS5UZXh0IHx8IGNoaWxkLnR5cGUgPT09IE5vZGVUeXBlLlJhdykgJiYgKGNoaWxkLnZhbHVlICE9IG51bGwpKSB7XG4gICAgICAgICAgICAgIG9wdGlvbnMuc3VwcHJlc3NQcmV0dHlDb3VudCsrO1xuICAgICAgICAgICAgICBwcmV0dHlTdXBwcmVzc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHIgKz0gJz4nICsgdGhpcy5lbmRsaW5lKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkluc2lkZVRhZztcbiAgICAgICAgcmVmMiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICAgIGZvciAoaiA9IDAsIGxlbjEgPSByZWYyLmxlbmd0aDsgaiA8IGxlbjE7IGorKykge1xuICAgICAgICAgIGNoaWxkID0gcmVmMltqXTtcbiAgICAgICAgICByICs9IHRoaXMud3JpdGVDaGlsZE5vZGUoY2hpbGQsIG9wdGlvbnMsIGxldmVsICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgICByICs9IHRoaXMuaW5kZW50KG5vZGUsIG9wdGlvbnMsIGxldmVsKSArICc8LycgKyBub2RlLm5hbWUgKyAnPic7XG4gICAgICAgIGlmIChwcmV0dHlTdXBwcmVzc2VkKSB7XG4gICAgICAgICAgb3B0aW9ucy5zdXBwcmVzc1ByZXR0eUNvdW50LS07XG4gICAgICAgIH1cbiAgICAgICAgciArPSB0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuTm9uZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2xvc2VOb2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIHJldHVybiByO1xuICAgIH07XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS53cml0ZUNoaWxkTm9kZSA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlIE5vZGVUeXBlLkNEYXRhOlxuICAgICAgICAgIHJldHVybiB0aGlzLmNkYXRhKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5Db21tZW50OlxuICAgICAgICAgIHJldHVybiB0aGlzLmNvbW1lbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgICBjYXNlIE5vZGVUeXBlLkVsZW1lbnQ6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudChub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuUmF3OlxuICAgICAgICAgIHJldHVybiB0aGlzLnJhdyhub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuVGV4dDpcbiAgICAgICAgICByZXR1cm4gdGhpcy50ZXh0KG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb246XG4gICAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc2luZ0luc3RydWN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5EdW1teTpcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuRGVjbGFyYXRpb246XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZGVjbGFyYXRpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgICBjYXNlIE5vZGVUeXBlLkRvY1R5cGU6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZG9jVHlwZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuQXR0cmlidXRlRGVjbGFyYXRpb246XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZHRkQXR0TGlzdChub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuRWxlbWVudERlY2xhcmF0aW9uOlxuICAgICAgICAgIHJldHVybiB0aGlzLmR0ZEVsZW1lbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgICBjYXNlIE5vZGVUeXBlLkVudGl0eURlY2xhcmF0aW9uOlxuICAgICAgICAgIHJldHVybiB0aGlzLmR0ZEVudGl0eShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuTm90YXRpb25EZWNsYXJhdGlvbjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5kdGROb3RhdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBYTUwgbm9kZSB0eXBlOiBcIiArIG5vZGUuY29uc3RydWN0b3IubmFtZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLnByb2Nlc3NpbmdJbnN0cnVjdGlvbiA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICB2YXIgcjtcbiAgICAgIHRoaXMub3Blbk5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk9wZW5UYWc7XG4gICAgICByID0gdGhpcy5pbmRlbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpICsgJzw/JztcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5JbnNpZGVUYWc7XG4gICAgICByICs9IG5vZGUudGFyZ2V0O1xuICAgICAgaWYgKG5vZGUudmFsdWUpIHtcbiAgICAgICAgciArPSAnICcgKyBub2RlLnZhbHVlO1xuICAgICAgfVxuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgciArPSBvcHRpb25zLnNwYWNlQmVmb3JlU2xhc2ggKyAnPz4nO1xuICAgICAgciArPSB0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk5vbmU7XG4gICAgICB0aGlzLmNsb3NlTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICByZXR1cm4gcjtcbiAgICB9O1xuXG4gICAgWE1MV3JpdGVyQmFzZS5wcm90b3R5cGUucmF3ID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHZhciByO1xuICAgICAgdGhpcy5vcGVuTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuT3BlblRhZztcbiAgICAgIHIgPSB0aGlzLmluZGVudChub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuSW5zaWRlVGFnO1xuICAgICAgciArPSBub2RlLnZhbHVlO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgciArPSB0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk5vbmU7XG4gICAgICB0aGlzLmNsb3NlTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICByZXR1cm4gcjtcbiAgICB9O1xuXG4gICAgWE1MV3JpdGVyQmFzZS5wcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICB2YXIgcjtcbiAgICAgIHRoaXMub3Blbk5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk9wZW5UYWc7XG4gICAgICByID0gdGhpcy5pbmRlbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkluc2lkZVRhZztcbiAgICAgIHIgKz0gbm9kZS52YWx1ZTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgIHIgKz0gdGhpcy5lbmRsaW5lKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5Ob25lO1xuICAgICAgdGhpcy5jbG9zZU5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLmR0ZEF0dExpc3QgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgdmFyIHI7XG4gICAgICB0aGlzLm9wZW5Ob2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5PcGVuVGFnO1xuICAgICAgciA9IHRoaXMuaW5kZW50KG5vZGUsIG9wdGlvbnMsIGxldmVsKSArICc8IUFUVExJU1QnO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkluc2lkZVRhZztcbiAgICAgIHIgKz0gJyAnICsgbm9kZS5lbGVtZW50TmFtZSArICcgJyArIG5vZGUuYXR0cmlidXRlTmFtZSArICcgJyArIG5vZGUuYXR0cmlidXRlVHlwZTtcbiAgICAgIGlmIChub2RlLmRlZmF1bHRWYWx1ZVR5cGUgIT09ICcjREVGQVVMVCcpIHtcbiAgICAgICAgciArPSAnICcgKyBub2RlLmRlZmF1bHRWYWx1ZVR5cGU7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5kZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgciArPSAnIFwiJyArIG5vZGUuZGVmYXVsdFZhbHVlICsgJ1wiJztcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgIHIgKz0gb3B0aW9ucy5zcGFjZUJlZm9yZVNsYXNoICsgJz4nICsgdGhpcy5lbmRsaW5lKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5Ob25lO1xuICAgICAgdGhpcy5jbG9zZU5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLmR0ZEVsZW1lbnQgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgdmFyIHI7XG4gICAgICB0aGlzLm9wZW5Ob2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5PcGVuVGFnO1xuICAgICAgciA9IHRoaXMuaW5kZW50KG5vZGUsIG9wdGlvbnMsIGxldmVsKSArICc8IUVMRU1FTlQnO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkluc2lkZVRhZztcbiAgICAgIHIgKz0gJyAnICsgbm9kZS5uYW1lICsgJyAnICsgbm9kZS52YWx1ZTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgIHIgKz0gb3B0aW9ucy5zcGFjZUJlZm9yZVNsYXNoICsgJz4nICsgdGhpcy5lbmRsaW5lKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5Ob25lO1xuICAgICAgdGhpcy5jbG9zZU5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLmR0ZEVudGl0eSA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICB2YXIgcjtcbiAgICAgIHRoaXMub3Blbk5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk9wZW5UYWc7XG4gICAgICByID0gdGhpcy5pbmRlbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpICsgJzwhRU5USVRZJztcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5JbnNpZGVUYWc7XG4gICAgICBpZiAobm9kZS5wZSkge1xuICAgICAgICByICs9ICcgJSc7XG4gICAgICB9XG4gICAgICByICs9ICcgJyArIG5vZGUubmFtZTtcbiAgICAgIGlmIChub2RlLnZhbHVlKSB7XG4gICAgICAgIHIgKz0gJyBcIicgKyBub2RlLnZhbHVlICsgJ1wiJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChub2RlLnB1YklEICYmIG5vZGUuc3lzSUQpIHtcbiAgICAgICAgICByICs9ICcgUFVCTElDIFwiJyArIG5vZGUucHViSUQgKyAnXCIgXCInICsgbm9kZS5zeXNJRCArICdcIic7XG4gICAgICAgIH0gZWxzZSBpZiAobm9kZS5zeXNJRCkge1xuICAgICAgICAgIHIgKz0gJyBTWVNURU0gXCInICsgbm9kZS5zeXNJRCArICdcIic7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUubkRhdGEpIHtcbiAgICAgICAgICByICs9ICcgTkRBVEEgJyArIG5vZGUubkRhdGE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgIHIgKz0gb3B0aW9ucy5zcGFjZUJlZm9yZVNsYXNoICsgJz4nICsgdGhpcy5lbmRsaW5lKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5Ob25lO1xuICAgICAgdGhpcy5jbG9zZU5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLmR0ZE5vdGF0aW9uID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHZhciByO1xuICAgICAgdGhpcy5vcGVuTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuT3BlblRhZztcbiAgICAgIHIgPSB0aGlzLmluZGVudChub2RlLCBvcHRpb25zLCBsZXZlbCkgKyAnPCFOT1RBVElPTic7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuSW5zaWRlVGFnO1xuICAgICAgciArPSAnICcgKyBub2RlLm5hbWU7XG4gICAgICBpZiAobm9kZS5wdWJJRCAmJiBub2RlLnN5c0lEKSB7XG4gICAgICAgIHIgKz0gJyBQVUJMSUMgXCInICsgbm9kZS5wdWJJRCArICdcIiBcIicgKyBub2RlLnN5c0lEICsgJ1wiJztcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5wdWJJRCkge1xuICAgICAgICByICs9ICcgUFVCTElDIFwiJyArIG5vZGUucHViSUQgKyAnXCInO1xuICAgICAgfSBlbHNlIGlmIChub2RlLnN5c0lEKSB7XG4gICAgICAgIHIgKz0gJyBTWVNURU0gXCInICsgbm9kZS5zeXNJRCArICdcIic7XG4gICAgICB9XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuQ2xvc2VUYWc7XG4gICAgICByICs9IG9wdGlvbnMuc3BhY2VCZWZvcmVTbGFzaCArICc+JyArIHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuTm9uZTtcbiAgICAgIHRoaXMuY2xvc2VOb2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIHJldHVybiByO1xuICAgIH07XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS5vcGVuTm9kZSA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7fTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLmNsb3NlTm9kZSA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7fTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLm9wZW5BdHRyaWJ1dGUgPSBmdW5jdGlvbihhdHQsIG9wdGlvbnMsIGxldmVsKSB7fTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLmNsb3NlQXR0cmlidXRlID0gZnVuY3Rpb24oYXR0LCBvcHRpb25zLCBsZXZlbCkge307XG5cbiAgICByZXR1cm4gWE1MV3JpdGVyQmFzZTtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxTdHJpbmdXcml0ZXIsIFhNTFdyaXRlckJhc2UsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBYTUxXcml0ZXJCYXNlID0gcmVxdWlyZSgnLi9YTUxXcml0ZXJCYXNlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxTdHJpbmdXcml0ZXIgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxTdHJpbmdXcml0ZXIsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MU3RyaW5nV3JpdGVyKG9wdGlvbnMpIHtcbiAgICAgIFhNTFN0cmluZ1dyaXRlci5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBYTUxTdHJpbmdXcml0ZXIucHJvdG90eXBlLmRvY3VtZW50ID0gZnVuY3Rpb24oZG9jLCBvcHRpb25zKSB7XG4gICAgICB2YXIgY2hpbGQsIGksIGxlbiwgciwgcmVmO1xuICAgICAgb3B0aW9ucyA9IHRoaXMuZmlsdGVyT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgIHIgPSAnJztcbiAgICAgIHJlZiA9IGRvYy5jaGlsZHJlbjtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjaGlsZCA9IHJlZltpXTtcbiAgICAgICAgciArPSB0aGlzLndyaXRlQ2hpbGROb2RlKGNoaWxkLCBvcHRpb25zLCAwKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLnByZXR0eSAmJiByLnNsaWNlKC1vcHRpb25zLm5ld2xpbmUubGVuZ3RoKSA9PT0gb3B0aW9ucy5uZXdsaW5lKSB7XG4gICAgICAgIHIgPSByLnNsaWNlKDAsIC1vcHRpb25zLm5ld2xpbmUubGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MU3RyaW5nV3JpdGVyO1xuXG4gIH0pKFhNTFdyaXRlckJhc2UpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MRE9NQ29uZmlndXJhdGlvbiwgWE1MRE9NSW1wbGVtZW50YXRpb24sIFhNTERvY3VtZW50LCBYTUxOb2RlLCBYTUxTdHJpbmdXcml0ZXIsIFhNTFN0cmluZ2lmaWVyLCBpc1BsYWluT2JqZWN0LFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgaXNQbGFpbk9iamVjdCA9IHJlcXVpcmUoJy4vVXRpbGl0eScpLmlzUGxhaW5PYmplY3Q7XG5cbiAgWE1MRE9NSW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL1hNTERPTUltcGxlbWVudGF0aW9uJyk7XG5cbiAgWE1MRE9NQ29uZmlndXJhdGlvbiA9IHJlcXVpcmUoJy4vWE1MRE9NQ29uZmlndXJhdGlvbicpO1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBYTUxTdHJpbmdpZmllciA9IHJlcXVpcmUoJy4vWE1MU3RyaW5naWZpZXInKTtcblxuICBYTUxTdHJpbmdXcml0ZXIgPSByZXF1aXJlKCcuL1hNTFN0cmluZ1dyaXRlcicpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRG9jdW1lbnQgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxEb2N1bWVudCwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxEb2N1bWVudChvcHRpb25zKSB7XG4gICAgICBYTUxEb2N1bWVudC5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBudWxsKTtcbiAgICAgIHRoaXMubmFtZSA9IFwiI2RvY3VtZW50XCI7XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5Eb2N1bWVudDtcbiAgICAgIHRoaXMuZG9jdW1lbnRVUkkgPSBudWxsO1xuICAgICAgdGhpcy5kb21Db25maWcgPSBuZXcgWE1MRE9NQ29uZmlndXJhdGlvbigpO1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICAgIGlmICghb3B0aW9ucy53cml0ZXIpIHtcbiAgICAgICAgb3B0aW9ucy53cml0ZXIgPSBuZXcgWE1MU3RyaW5nV3JpdGVyKCk7XG4gICAgICB9XG4gICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgdGhpcy5zdHJpbmdpZnkgPSBuZXcgWE1MU3RyaW5naWZpZXIob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERvY3VtZW50LnByb3RvdHlwZSwgJ2ltcGxlbWVudGF0aW9uJywge1xuICAgICAgdmFsdWU6IG5ldyBYTUxET01JbXBsZW1lbnRhdGlvbigpXG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRG9jdW1lbnQucHJvdG90eXBlLCAnZG9jdHlwZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjaGlsZCwgaSwgbGVuLCByZWY7XG4gICAgICAgIHJlZiA9IHRoaXMuY2hpbGRyZW47XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGNoaWxkID0gcmVmW2ldO1xuICAgICAgICAgIGlmIChjaGlsZC50eXBlID09PSBOb2RlVHlwZS5Eb2NUeXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERvY3VtZW50LnByb3RvdHlwZSwgJ2RvY3VtZW50RWxlbWVudCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3RPYmplY3QgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEb2N1bWVudC5wcm90b3R5cGUsICdpbnB1dEVuY29kaW5nJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRG9jdW1lbnQucHJvdG90eXBlLCAnc3RyaWN0RXJyb3JDaGVja2luZycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEb2N1bWVudC5wcm90b3R5cGUsICd4bWxFbmNvZGluZycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCAhPT0gMCAmJiB0aGlzLmNoaWxkcmVuWzBdLnR5cGUgPT09IE5vZGVUeXBlLkRlY2xhcmF0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5bMF0uZW5jb2Rpbmc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEb2N1bWVudC5wcm90b3R5cGUsICd4bWxTdGFuZGFsb25lJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW4ubGVuZ3RoICE9PSAwICYmIHRoaXMuY2hpbGRyZW5bMF0udHlwZSA9PT0gTm9kZVR5cGUuRGVjbGFyYXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlblswXS5zdGFuZGFsb25lID09PSAneWVzJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEb2N1bWVudC5wcm90b3R5cGUsICd4bWxWZXJzaW9uJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW4ubGVuZ3RoICE9PSAwICYmIHRoaXMuY2hpbGRyZW5bMF0udHlwZSA9PT0gTm9kZVR5cGUuRGVjbGFyYXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlblswXS52ZXJzaW9uO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcIjEuMFwiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRG9jdW1lbnQucHJvdG90eXBlLCAnVVJMJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRVUkk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRG9jdW1lbnQucHJvdG90eXBlLCAnb3JpZ2luJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRG9jdW1lbnQucHJvdG90eXBlLCAnY29tcGF0TW9kZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERvY3VtZW50LnByb3RvdHlwZSwgJ2NoYXJhY3RlclNldCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERvY3VtZW50LnByb3RvdHlwZSwgJ2NvbnRlbnRUeXBlJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24od3JpdGVyKSB7XG4gICAgICB2YXIgd3JpdGVyT3B0aW9ucztcbiAgICAgIHdyaXRlck9wdGlvbnMgPSB7fTtcbiAgICAgIGlmICghd3JpdGVyKSB7XG4gICAgICAgIHdyaXRlciA9IHRoaXMub3B0aW9ucy53cml0ZXI7XG4gICAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qod3JpdGVyKSkge1xuICAgICAgICB3cml0ZXJPcHRpb25zID0gd3JpdGVyO1xuICAgICAgICB3cml0ZXIgPSB0aGlzLm9wdGlvbnMud3JpdGVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyaXRlci5kb2N1bWVudCh0aGlzLCB3cml0ZXIuZmlsdGVyT3B0aW9ucyh3cml0ZXJPcHRpb25zKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLmRvY3VtZW50KHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24odGFnTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlVGV4dE5vZGUgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVDb21tZW50ID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlQ0RBVEFTZWN0aW9uID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlUHJvY2Vzc2luZ0luc3RydWN0aW9uID0gZnVuY3Rpb24odGFyZ2V0LCBkYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVBdHRyaWJ1dGUgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVFbnRpdHlSZWZlcmVuY2UgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGZ1bmN0aW9uKHRhZ25hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLmltcG9ydE5vZGUgPSBmdW5jdGlvbihpbXBvcnRlZE5vZGUsIGRlZXApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnROUyA9IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgcXVhbGlmaWVkTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlQXR0cmlidXRlTlMgPSBmdW5jdGlvbihuYW1lc3BhY2VVUkksIHF1YWxpZmllZE5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lTlMgPSBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudEJ5SWQgPSBmdW5jdGlvbihlbGVtZW50SWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLmFkb3B0Tm9kZSA9IGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUubm9ybWFsaXplRG9jdW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLnJlbmFtZU5vZGUgPSBmdW5jdGlvbihub2RlLCBuYW1lc3BhY2VVUkksIHF1YWxpZmllZE5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBmdW5jdGlvbihjbGFzc05hbWVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVFdmVudCA9IGZ1bmN0aW9uKGV2ZW50SW50ZXJmYWNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVSYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlTm9kZUl0ZXJhdG9yID0gZnVuY3Rpb24ocm9vdCwgd2hhdFRvU2hvdywgZmlsdGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVUcmVlV2Fsa2VyID0gZnVuY3Rpb24ocm9vdCwgd2hhdFRvU2hvdywgZmlsdGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxEb2N1bWVudDtcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFdyaXRlclN0YXRlLCBYTUxBdHRyaWJ1dGUsIFhNTENEYXRhLCBYTUxDb21tZW50LCBYTUxEVERBdHRMaXN0LCBYTUxEVERFbGVtZW50LCBYTUxEVERFbnRpdHksIFhNTERURE5vdGF0aW9uLCBYTUxEZWNsYXJhdGlvbiwgWE1MRG9jVHlwZSwgWE1MRG9jdW1lbnQsIFhNTERvY3VtZW50Q0IsIFhNTEVsZW1lbnQsIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbiwgWE1MUmF3LCBYTUxTdHJpbmdXcml0ZXIsIFhNTFN0cmluZ2lmaWVyLCBYTUxUZXh0LCBnZXRWYWx1ZSwgaXNGdW5jdGlvbiwgaXNPYmplY3QsIGlzUGxhaW5PYmplY3QsIHJlZixcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgcmVmID0gcmVxdWlyZSgnLi9VdGlsaXR5JyksIGlzT2JqZWN0ID0gcmVmLmlzT2JqZWN0LCBpc0Z1bmN0aW9uID0gcmVmLmlzRnVuY3Rpb24sIGlzUGxhaW5PYmplY3QgPSByZWYuaXNQbGFpbk9iamVjdCwgZ2V0VmFsdWUgPSByZWYuZ2V0VmFsdWU7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MRG9jdW1lbnQgPSByZXF1aXJlKCcuL1hNTERvY3VtZW50Jyk7XG5cbiAgWE1MRWxlbWVudCA9IHJlcXVpcmUoJy4vWE1MRWxlbWVudCcpO1xuXG4gIFhNTENEYXRhID0gcmVxdWlyZSgnLi9YTUxDRGF0YScpO1xuXG4gIFhNTENvbW1lbnQgPSByZXF1aXJlKCcuL1hNTENvbW1lbnQnKTtcblxuICBYTUxSYXcgPSByZXF1aXJlKCcuL1hNTFJhdycpO1xuXG4gIFhNTFRleHQgPSByZXF1aXJlKCcuL1hNTFRleHQnKTtcblxuICBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gPSByZXF1aXJlKCcuL1hNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbicpO1xuXG4gIFhNTERlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi9YTUxEZWNsYXJhdGlvbicpO1xuXG4gIFhNTERvY1R5cGUgPSByZXF1aXJlKCcuL1hNTERvY1R5cGUnKTtcblxuICBYTUxEVERBdHRMaXN0ID0gcmVxdWlyZSgnLi9YTUxEVERBdHRMaXN0Jyk7XG5cbiAgWE1MRFRERW50aXR5ID0gcmVxdWlyZSgnLi9YTUxEVERFbnRpdHknKTtcblxuICBYTUxEVERFbGVtZW50ID0gcmVxdWlyZSgnLi9YTUxEVERFbGVtZW50Jyk7XG5cbiAgWE1MRFRETm90YXRpb24gPSByZXF1aXJlKCcuL1hNTERURE5vdGF0aW9uJyk7XG5cbiAgWE1MQXR0cmlidXRlID0gcmVxdWlyZSgnLi9YTUxBdHRyaWJ1dGUnKTtcblxuICBYTUxTdHJpbmdpZmllciA9IHJlcXVpcmUoJy4vWE1MU3RyaW5naWZpZXInKTtcblxuICBYTUxTdHJpbmdXcml0ZXIgPSByZXF1aXJlKCcuL1hNTFN0cmluZ1dyaXRlcicpO1xuXG4gIFdyaXRlclN0YXRlID0gcmVxdWlyZSgnLi9Xcml0ZXJTdGF0ZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRG9jdW1lbnRDQiA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBYTUxEb2N1bWVudENCKG9wdGlvbnMsIG9uRGF0YSwgb25FbmQpIHtcbiAgICAgIHZhciB3cml0ZXJPcHRpb25zO1xuICAgICAgdGhpcy5uYW1lID0gXCI/eG1sXCI7XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5Eb2N1bWVudDtcbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG4gICAgICB3cml0ZXJPcHRpb25zID0ge307XG4gICAgICBpZiAoIW9wdGlvbnMud3JpdGVyKSB7XG4gICAgICAgIG9wdGlvbnMud3JpdGVyID0gbmV3IFhNTFN0cmluZ1dyaXRlcigpO1xuICAgICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KG9wdGlvbnMud3JpdGVyKSkge1xuICAgICAgICB3cml0ZXJPcHRpb25zID0gb3B0aW9ucy53cml0ZXI7XG4gICAgICAgIG9wdGlvbnMud3JpdGVyID0gbmV3IFhNTFN0cmluZ1dyaXRlcigpO1xuICAgICAgfVxuICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgIHRoaXMud3JpdGVyID0gb3B0aW9ucy53cml0ZXI7XG4gICAgICB0aGlzLndyaXRlck9wdGlvbnMgPSB0aGlzLndyaXRlci5maWx0ZXJPcHRpb25zKHdyaXRlck9wdGlvbnMpO1xuICAgICAgdGhpcy5zdHJpbmdpZnkgPSBuZXcgWE1MU3RyaW5naWZpZXIob3B0aW9ucyk7XG4gICAgICB0aGlzLm9uRGF0YUNhbGxiYWNrID0gb25EYXRhIHx8IGZ1bmN0aW9uKCkge307XG4gICAgICB0aGlzLm9uRW5kQ2FsbGJhY2sgPSBvbkVuZCB8fCBmdW5jdGlvbigpIHt9O1xuICAgICAgdGhpcy5jdXJyZW50Tm9kZSA9IG51bGw7XG4gICAgICB0aGlzLmN1cnJlbnRMZXZlbCA9IC0xO1xuICAgICAgdGhpcy5vcGVuVGFncyA9IHt9O1xuICAgICAgdGhpcy5kb2N1bWVudFN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuZG9jdW1lbnRDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMucm9vdCA9IG51bGw7XG4gICAgfVxuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuY3JlYXRlQ2hpbGROb2RlID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgdmFyIGF0dCwgYXR0TmFtZSwgYXR0cmlidXRlcywgY2hpbGQsIGksIGxlbiwgcmVmMSwgcmVmMjtcbiAgICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuQ0RhdGE6XG4gICAgICAgICAgdGhpcy5jZGF0YShub2RlLnZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5Db21tZW50OlxuICAgICAgICAgIHRoaXMuY29tbWVudChub2RlLnZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5FbGVtZW50OlxuICAgICAgICAgIGF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgICAgICByZWYxID0gbm9kZS5hdHRyaWJzO1xuICAgICAgICAgIGZvciAoYXR0TmFtZSBpbiByZWYxKSB7XG4gICAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChyZWYxLCBhdHROYW1lKSkgY29udGludWU7XG4gICAgICAgICAgICBhdHQgPSByZWYxW2F0dE5hbWVdO1xuICAgICAgICAgICAgYXR0cmlidXRlc1thdHROYW1lXSA9IGF0dC52YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5ub2RlKG5vZGUubmFtZSwgYXR0cmlidXRlcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuRHVtbXk6XG4gICAgICAgICAgdGhpcy5kdW1teSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE5vZGVUeXBlLlJhdzpcbiAgICAgICAgICB0aGlzLnJhdyhub2RlLnZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5UZXh0OlxuICAgICAgICAgIHRoaXMudGV4dChub2RlLnZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb246XG4gICAgICAgICAgdGhpcy5pbnN0cnVjdGlvbihub2RlLnRhcmdldCwgbm9kZS52YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBYTUwgbm9kZSB0eXBlIGlzIG5vdCBzdXBwb3J0ZWQgaW4gYSBKUyBvYmplY3Q6IFwiICsgbm9kZS5jb25zdHJ1Y3Rvci5uYW1lKTtcbiAgICAgIH1cbiAgICAgIHJlZjIgPSBub2RlLmNoaWxkcmVuO1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmMi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjaGlsZCA9IHJlZjJbaV07XG4gICAgICAgIHRoaXMuY3JlYXRlQ2hpbGROb2RlKGNoaWxkKTtcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IE5vZGVUeXBlLkVsZW1lbnQpIHtcbiAgICAgICAgICB0aGlzLnVwKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5kdW1teSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLm5vZGUgPSBmdW5jdGlvbihuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KSB7XG4gICAgICB2YXIgcmVmMTtcbiAgICAgIGlmIChuYW1lID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBub2RlIG5hbWUuXCIpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucm9vdCAmJiB0aGlzLmN1cnJlbnRMZXZlbCA9PT0gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRG9jdW1lbnQgY2FuIG9ubHkgaGF2ZSBvbmUgcm9vdCBub2RlLiBcIiArIHRoaXMuZGVidWdJbmZvKG5hbWUpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMub3BlbkN1cnJlbnQoKTtcbiAgICAgIG5hbWUgPSBnZXRWYWx1ZShuYW1lKTtcbiAgICAgIGlmIChhdHRyaWJ1dGVzID09IG51bGwpIHtcbiAgICAgICAgYXR0cmlidXRlcyA9IHt9O1xuICAgICAgfVxuICAgICAgYXR0cmlidXRlcyA9IGdldFZhbHVlKGF0dHJpYnV0ZXMpO1xuICAgICAgaWYgKCFpc09iamVjdChhdHRyaWJ1dGVzKSkge1xuICAgICAgICByZWYxID0gW2F0dHJpYnV0ZXMsIHRleHRdLCB0ZXh0ID0gcmVmMVswXSwgYXR0cmlidXRlcyA9IHJlZjFbMV07XG4gICAgICB9XG4gICAgICB0aGlzLmN1cnJlbnROb2RlID0gbmV3IFhNTEVsZW1lbnQodGhpcywgbmFtZSwgYXR0cmlidXRlcyk7XG4gICAgICB0aGlzLmN1cnJlbnROb2RlLmNoaWxkcmVuID0gZmFsc2U7XG4gICAgICB0aGlzLmN1cnJlbnRMZXZlbCsrO1xuICAgICAgdGhpcy5vcGVuVGFnc1t0aGlzLmN1cnJlbnRMZXZlbF0gPSB0aGlzLmN1cnJlbnROb2RlO1xuICAgICAgaWYgKHRleHQgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnRleHQodGV4dCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZWxlbWVudCA9IGZ1bmN0aW9uKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpIHtcbiAgICAgIHZhciBjaGlsZCwgaSwgbGVuLCBvbGRWYWxpZGF0aW9uRmxhZywgcmVmMSwgcm9vdDtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnROb2RlICYmIHRoaXMuY3VycmVudE5vZGUudHlwZSA9PT0gTm9kZVR5cGUuRG9jVHlwZSkge1xuICAgICAgICB0aGlzLmR0ZEVsZW1lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5hbWUpIHx8IGlzT2JqZWN0KG5hbWUpIHx8IGlzRnVuY3Rpb24obmFtZSkpIHtcbiAgICAgICAgICBvbGRWYWxpZGF0aW9uRmxhZyA9IHRoaXMub3B0aW9ucy5ub1ZhbGlkYXRpb247XG4gICAgICAgICAgdGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbiA9IHRydWU7XG4gICAgICAgICAgcm9vdCA9IG5ldyBYTUxEb2N1bWVudCh0aGlzLm9wdGlvbnMpLmVsZW1lbnQoJ1RFTVBfUk9PVCcpO1xuICAgICAgICAgIHJvb3QuZWxlbWVudChuYW1lKTtcbiAgICAgICAgICB0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uID0gb2xkVmFsaWRhdGlvbkZsYWc7XG4gICAgICAgICAgcmVmMSA9IHJvb3QuY2hpbGRyZW47XG4gICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmMS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY2hpbGQgPSByZWYxW2ldO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVDaGlsZE5vZGUoY2hpbGQpO1xuICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IE5vZGVUeXBlLkVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgdGhpcy51cCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm5vZGUobmFtZSwgYXR0cmlidXRlcywgdGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5hdHRyaWJ1dGUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIGF0dE5hbWUsIGF0dFZhbHVlO1xuICAgICAgaWYgKCF0aGlzLmN1cnJlbnROb2RlIHx8IHRoaXMuY3VycmVudE5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXR0KCkgY2FuIG9ubHkgYmUgdXNlZCBpbW1lZGlhdGVseSBhZnRlciBhbiBlbGUoKSBjYWxsIGluIGNhbGxiYWNrIG1vZGUuIFwiICsgdGhpcy5kZWJ1Z0luZm8obmFtZSkpO1xuICAgICAgfVxuICAgICAgaWYgKG5hbWUgIT0gbnVsbCkge1xuICAgICAgICBuYW1lID0gZ2V0VmFsdWUobmFtZSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3QobmFtZSkpIHtcbiAgICAgICAgZm9yIChhdHROYW1lIGluIG5hbWUpIHtcbiAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChuYW1lLCBhdHROYW1lKSkgY29udGludWU7XG4gICAgICAgICAgYXR0VmFsdWUgPSBuYW1lW2F0dE5hbWVdO1xuICAgICAgICAgIHRoaXMuYXR0cmlidXRlKGF0dE5hbWUsIGF0dFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS5hcHBseSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMua2VlcE51bGxBdHRyaWJ1dGVzICYmICh2YWx1ZSA9PSBudWxsKSkge1xuICAgICAgICAgIHRoaXMuY3VycmVudE5vZGUuYXR0cmlic1tuYW1lXSA9IG5ldyBYTUxBdHRyaWJ1dGUodGhpcywgbmFtZSwgXCJcIik7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuY3VycmVudE5vZGUuYXR0cmlic1tuYW1lXSA9IG5ldyBYTUxBdHRyaWJ1dGUodGhpcywgbmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIHRoaXMub3BlbkN1cnJlbnQoKTtcbiAgICAgIG5vZGUgPSBuZXcgWE1MVGV4dCh0aGlzLCB2YWx1ZSk7XG4gICAgICB0aGlzLm9uRGF0YSh0aGlzLndyaXRlci50ZXh0KG5vZGUsIHRoaXMud3JpdGVyT3B0aW9ucywgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKSwgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5jZGF0YSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIHRoaXMub3BlbkN1cnJlbnQoKTtcbiAgICAgIG5vZGUgPSBuZXcgWE1MQ0RhdGEodGhpcywgdmFsdWUpO1xuICAgICAgdGhpcy5vbkRhdGEodGhpcy53cml0ZXIuY2RhdGEobm9kZSwgdGhpcy53cml0ZXJPcHRpb25zLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmNvbW1lbnQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIG5vZGU7XG4gICAgICB0aGlzLm9wZW5DdXJyZW50KCk7XG4gICAgICBub2RlID0gbmV3IFhNTENvbW1lbnQodGhpcywgdmFsdWUpO1xuICAgICAgdGhpcy5vbkRhdGEodGhpcy53cml0ZXIuY29tbWVudChub2RlLCB0aGlzLndyaXRlck9wdGlvbnMsIHRoaXMuY3VycmVudExldmVsICsgMSksIHRoaXMuY3VycmVudExldmVsICsgMSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUucmF3ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBub2RlO1xuICAgICAgdGhpcy5vcGVuQ3VycmVudCgpO1xuICAgICAgbm9kZSA9IG5ldyBYTUxSYXcodGhpcywgdmFsdWUpO1xuICAgICAgdGhpcy5vbkRhdGEodGhpcy53cml0ZXIucmF3KG5vZGUsIHRoaXMud3JpdGVyT3B0aW9ucywgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKSwgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5pbnN0cnVjdGlvbiA9IGZ1bmN0aW9uKHRhcmdldCwgdmFsdWUpIHtcbiAgICAgIHZhciBpLCBpbnNUYXJnZXQsIGluc1ZhbHVlLCBsZW4sIG5vZGU7XG4gICAgICB0aGlzLm9wZW5DdXJyZW50KCk7XG4gICAgICBpZiAodGFyZ2V0ICE9IG51bGwpIHtcbiAgICAgICAgdGFyZ2V0ID0gZ2V0VmFsdWUodGFyZ2V0KTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHZhbHVlID0gZ2V0VmFsdWUodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSB0YXJnZXQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBpbnNUYXJnZXQgPSB0YXJnZXRbaV07XG4gICAgICAgICAgdGhpcy5pbnN0cnVjdGlvbihpbnNUYXJnZXQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHRhcmdldCkpIHtcbiAgICAgICAgZm9yIChpbnNUYXJnZXQgaW4gdGFyZ2V0KSB7XG4gICAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwodGFyZ2V0LCBpbnNUYXJnZXQpKSBjb250aW51ZTtcbiAgICAgICAgICBpbnNWYWx1ZSA9IHRhcmdldFtpbnNUYXJnZXRdO1xuICAgICAgICAgIHRoaXMuaW5zdHJ1Y3Rpb24oaW5zVGFyZ2V0LCBpbnNWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICAgIHZhbHVlID0gdmFsdWUuYXBwbHkoKTtcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gbmV3IFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbih0aGlzLCB0YXJnZXQsIHZhbHVlKTtcbiAgICAgICAgdGhpcy5vbkRhdGEodGhpcy53cml0ZXIucHJvY2Vzc2luZ0luc3RydWN0aW9uKG5vZGUsIHRoaXMud3JpdGVyT3B0aW9ucywgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKSwgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5kZWNsYXJhdGlvbiA9IGZ1bmN0aW9uKHZlcnNpb24sIGVuY29kaW5nLCBzdGFuZGFsb25lKSB7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIHRoaXMub3BlbkN1cnJlbnQoKTtcbiAgICAgIGlmICh0aGlzLmRvY3VtZW50U3RhcnRlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkZWNsYXJhdGlvbigpIG11c3QgYmUgdGhlIGZpcnN0IG5vZGUuXCIpO1xuICAgICAgfVxuICAgICAgbm9kZSA9IG5ldyBYTUxEZWNsYXJhdGlvbih0aGlzLCB2ZXJzaW9uLCBlbmNvZGluZywgc3RhbmRhbG9uZSk7XG4gICAgICB0aGlzLm9uRGF0YSh0aGlzLndyaXRlci5kZWNsYXJhdGlvbihub2RlLCB0aGlzLndyaXRlck9wdGlvbnMsIHRoaXMuY3VycmVudExldmVsICsgMSksIHRoaXMuY3VycmVudExldmVsICsgMSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZG9jdHlwZSA9IGZ1bmN0aW9uKHJvb3QsIHB1YklELCBzeXNJRCkge1xuICAgICAgdGhpcy5vcGVuQ3VycmVudCgpO1xuICAgICAgaWYgKHJvb3QgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHJvb3Qgbm9kZSBuYW1lLlwiKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnJvb3QpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZHRkKCkgbXVzdCBjb21lIGJlZm9yZSB0aGUgcm9vdCBub2RlLlwiKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY3VycmVudE5vZGUgPSBuZXcgWE1MRG9jVHlwZSh0aGlzLCBwdWJJRCwgc3lzSUQpO1xuICAgICAgdGhpcy5jdXJyZW50Tm9kZS5yb290Tm9kZU5hbWUgPSByb290O1xuICAgICAgdGhpcy5jdXJyZW50Tm9kZS5jaGlsZHJlbiA9IGZhbHNlO1xuICAgICAgdGhpcy5jdXJyZW50TGV2ZWwrKztcbiAgICAgIHRoaXMub3BlblRhZ3NbdGhpcy5jdXJyZW50TGV2ZWxdID0gdGhpcy5jdXJyZW50Tm9kZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5kdGRFbGVtZW50ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHZhciBub2RlO1xuICAgICAgdGhpcy5vcGVuQ3VycmVudCgpO1xuICAgICAgbm9kZSA9IG5ldyBYTUxEVERFbGVtZW50KHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgIHRoaXMub25EYXRhKHRoaXMud3JpdGVyLmR0ZEVsZW1lbnQobm9kZSwgdGhpcy53cml0ZXJPcHRpb25zLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmF0dExpc3QgPSBmdW5jdGlvbihlbGVtZW50TmFtZSwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVHlwZSwgZGVmYXVsdFZhbHVlVHlwZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIHRoaXMub3BlbkN1cnJlbnQoKTtcbiAgICAgIG5vZGUgPSBuZXcgWE1MRFREQXR0TGlzdCh0aGlzLCBlbGVtZW50TmFtZSwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVHlwZSwgZGVmYXVsdFZhbHVlVHlwZSwgZGVmYXVsdFZhbHVlKTtcbiAgICAgIHRoaXMub25EYXRhKHRoaXMud3JpdGVyLmR0ZEF0dExpc3Qobm9kZSwgdGhpcy53cml0ZXJPcHRpb25zLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmVudGl0eSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIHRoaXMub3BlbkN1cnJlbnQoKTtcbiAgICAgIG5vZGUgPSBuZXcgWE1MRFRERW50aXR5KHRoaXMsIGZhbHNlLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB0aGlzLm9uRGF0YSh0aGlzLndyaXRlci5kdGRFbnRpdHkobm9kZSwgdGhpcy53cml0ZXJPcHRpb25zLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLnBFbnRpdHkgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIG5vZGU7XG4gICAgICB0aGlzLm9wZW5DdXJyZW50KCk7XG4gICAgICBub2RlID0gbmV3IFhNTERUREVudGl0eSh0aGlzLCB0cnVlLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB0aGlzLm9uRGF0YSh0aGlzLndyaXRlci5kdGRFbnRpdHkobm9kZSwgdGhpcy53cml0ZXJPcHRpb25zLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLm5vdGF0aW9uID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHZhciBub2RlO1xuICAgICAgdGhpcy5vcGVuQ3VycmVudCgpO1xuICAgICAgbm9kZSA9IG5ldyBYTUxEVEROb3RhdGlvbih0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB0aGlzLm9uRGF0YSh0aGlzLndyaXRlci5kdGROb3RhdGlvbihub2RlLCB0aGlzLndyaXRlck9wdGlvbnMsIHRoaXMuY3VycmVudExldmVsICsgMSksIHRoaXMuY3VycmVudExldmVsICsgMSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUudXAgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRMZXZlbCA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGRvY3VtZW50IG5vZGUgaGFzIG5vIHBhcmVudC5cIik7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jdXJyZW50Tm9kZSkge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50Tm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgIHRoaXMuY2xvc2VOb2RlKHRoaXMuY3VycmVudE5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMub3Blbk5vZGUodGhpcy5jdXJyZW50Tm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50Tm9kZSA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNsb3NlTm9kZSh0aGlzLm9wZW5UYWdzW3RoaXMuY3VycmVudExldmVsXSk7XG4gICAgICB9XG4gICAgICBkZWxldGUgdGhpcy5vcGVuVGFnc1t0aGlzLmN1cnJlbnRMZXZlbF07XG4gICAgICB0aGlzLmN1cnJlbnRMZXZlbC0tO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgd2hpbGUgKHRoaXMuY3VycmVudExldmVsID49IDApIHtcbiAgICAgICAgdGhpcy51cCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMub25FbmQoKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUub3BlbkN1cnJlbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnROb2RlKSB7XG4gICAgICAgIHRoaXMuY3VycmVudE5vZGUuY2hpbGRyZW4gPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcy5vcGVuTm9kZSh0aGlzLmN1cnJlbnROb2RlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUub3Blbk5vZGUgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgYXR0LCBjaHVuaywgbmFtZSwgcmVmMTtcbiAgICAgIGlmICghbm9kZS5pc09wZW4pIHtcbiAgICAgICAgaWYgKCF0aGlzLnJvb3QgJiYgdGhpcy5jdXJyZW50TGV2ZWwgPT09IDAgJiYgbm9kZS50eXBlID09PSBOb2RlVHlwZS5FbGVtZW50KSB7XG4gICAgICAgICAgdGhpcy5yb290ID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICBjaHVuayA9ICcnO1xuICAgICAgICBpZiAobm9kZS50eXBlID09PSBOb2RlVHlwZS5FbGVtZW50KSB7XG4gICAgICAgICAgdGhpcy53cml0ZXJPcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuT3BlblRhZztcbiAgICAgICAgICBjaHVuayA9IHRoaXMud3JpdGVyLmluZGVudChub2RlLCB0aGlzLndyaXRlck9wdGlvbnMsIHRoaXMuY3VycmVudExldmVsKSArICc8JyArIG5vZGUubmFtZTtcbiAgICAgICAgICByZWYxID0gbm9kZS5hdHRyaWJzO1xuICAgICAgICAgIGZvciAobmFtZSBpbiByZWYxKSB7XG4gICAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChyZWYxLCBuYW1lKSkgY29udGludWU7XG4gICAgICAgICAgICBhdHQgPSByZWYxW25hbWVdO1xuICAgICAgICAgICAgY2h1bmsgKz0gdGhpcy53cml0ZXIuYXR0cmlidXRlKGF0dCwgdGhpcy53cml0ZXJPcHRpb25zLCB0aGlzLmN1cnJlbnRMZXZlbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNodW5rICs9IChub2RlLmNoaWxkcmVuID8gJz4nIDogJy8+JykgKyB0aGlzLndyaXRlci5lbmRsaW5lKG5vZGUsIHRoaXMud3JpdGVyT3B0aW9ucywgdGhpcy5jdXJyZW50TGV2ZWwpO1xuICAgICAgICAgIHRoaXMud3JpdGVyT3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkluc2lkZVRhZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLndyaXRlck9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5PcGVuVGFnO1xuICAgICAgICAgIGNodW5rID0gdGhpcy53cml0ZXIuaW5kZW50KG5vZGUsIHRoaXMud3JpdGVyT3B0aW9ucywgdGhpcy5jdXJyZW50TGV2ZWwpICsgJzwhRE9DVFlQRSAnICsgbm9kZS5yb290Tm9kZU5hbWU7XG4gICAgICAgICAgaWYgKG5vZGUucHViSUQgJiYgbm9kZS5zeXNJRCkge1xuICAgICAgICAgICAgY2h1bmsgKz0gJyBQVUJMSUMgXCInICsgbm9kZS5wdWJJRCArICdcIiBcIicgKyBub2RlLnN5c0lEICsgJ1wiJztcbiAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUuc3lzSUQpIHtcbiAgICAgICAgICAgIGNodW5rICs9ICcgU1lTVEVNIFwiJyArIG5vZGUuc3lzSUQgKyAnXCInO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgY2h1bmsgKz0gJyBbJztcbiAgICAgICAgICAgIHRoaXMud3JpdGVyT3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkluc2lkZVRhZztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy53cml0ZXJPcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuQ2xvc2VUYWc7XG4gICAgICAgICAgICBjaHVuayArPSAnPic7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNodW5rICs9IHRoaXMud3JpdGVyLmVuZGxpbmUobm9kZSwgdGhpcy53cml0ZXJPcHRpb25zLCB0aGlzLmN1cnJlbnRMZXZlbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbkRhdGEoY2h1bmssIHRoaXMuY3VycmVudExldmVsKTtcbiAgICAgICAgcmV0dXJuIG5vZGUuaXNPcGVuID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuY2xvc2VOb2RlID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgdmFyIGNodW5rO1xuICAgICAgaWYgKCFub2RlLmlzQ2xvc2VkKSB7XG4gICAgICAgIGNodW5rID0gJyc7XG4gICAgICAgIHRoaXMud3JpdGVyT3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgICBpZiAobm9kZS50eXBlID09PSBOb2RlVHlwZS5FbGVtZW50KSB7XG4gICAgICAgICAgY2h1bmsgPSB0aGlzLndyaXRlci5pbmRlbnQobm9kZSwgdGhpcy53cml0ZXJPcHRpb25zLCB0aGlzLmN1cnJlbnRMZXZlbCkgKyAnPC8nICsgbm9kZS5uYW1lICsgJz4nICsgdGhpcy53cml0ZXIuZW5kbGluZShub2RlLCB0aGlzLndyaXRlck9wdGlvbnMsIHRoaXMuY3VycmVudExldmVsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaHVuayA9IHRoaXMud3JpdGVyLmluZGVudChub2RlLCB0aGlzLndyaXRlck9wdGlvbnMsIHRoaXMuY3VycmVudExldmVsKSArICddPicgKyB0aGlzLndyaXRlci5lbmRsaW5lKG5vZGUsIHRoaXMud3JpdGVyT3B0aW9ucywgdGhpcy5jdXJyZW50TGV2ZWwpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud3JpdGVyT3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk5vbmU7XG4gICAgICAgIHRoaXMub25EYXRhKGNodW5rLCB0aGlzLmN1cnJlbnRMZXZlbCk7XG4gICAgICAgIHJldHVybiBub2RlLmlzQ2xvc2VkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24oY2h1bmssIGxldmVsKSB7XG4gICAgICB0aGlzLmRvY3VtZW50U3RhcnRlZCA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcy5vbkRhdGFDYWxsYmFjayhjaHVuaywgbGV2ZWwgKyAxKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUub25FbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9jdW1lbnRDb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXMub25FbmRDYWxsYmFjaygpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5kZWJ1Z0luZm8gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwibm9kZTogPFwiICsgbmFtZSArIFwiPlwiO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5lbGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUubm9kID0gZnVuY3Rpb24obmFtZSwgYXR0cmlidXRlcywgdGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZShuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUudHh0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQodmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5kYXQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuY2RhdGEodmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5jb20gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29tbWVudCh2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmlucyA9IGZ1bmN0aW9uKHRhcmdldCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmluc3RydWN0aW9uKHRhcmdldCwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5kZWMgPSBmdW5jdGlvbih2ZXJzaW9uLCBlbmNvZGluZywgc3RhbmRhbG9uZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVjbGFyYXRpb24odmVyc2lvbiwgZW5jb2RpbmcsIHN0YW5kYWxvbmUpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5kdGQgPSBmdW5jdGlvbihyb290LCBwdWJJRCwgc3lzSUQpIHtcbiAgICAgIHJldHVybiB0aGlzLmRvY3R5cGUocm9vdCwgcHViSUQsIHN5c0lEKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZSA9IGZ1bmN0aW9uKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQobmFtZSwgYXR0cmlidXRlcywgdGV4dCk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLm4gPSBmdW5jdGlvbihuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS50ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQodmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5kID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNkYXRhKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuYyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb21tZW50KHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yYXcodmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5pID0gZnVuY3Rpb24odGFyZ2V0LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5zdHJ1Y3Rpb24odGFyZ2V0LCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmF0dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuY3VycmVudE5vZGUgJiYgdGhpcy5jdXJyZW50Tm9kZS50eXBlID09PSBOb2RlVHlwZS5Eb2NUeXBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dExpc3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5hID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5jdXJyZW50Tm9kZSAmJiB0aGlzLmN1cnJlbnROb2RlLnR5cGUgPT09IE5vZGVUeXBlLkRvY1R5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0TGlzdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmVudCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbnRpdHkobmFtZSwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5wZW50ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnBFbnRpdHkobmFtZSwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5ub3QgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMubm90YXRpb24obmFtZSwgdmFsdWUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRG9jdW1lbnRDQjtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgV3JpdGVyU3RhdGUsIFhNTFN0cmVhbVdyaXRlciwgWE1MV3JpdGVyQmFzZSxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIFhNTFdyaXRlckJhc2UgPSByZXF1aXJlKCcuL1hNTFdyaXRlckJhc2UnKTtcblxuICBXcml0ZXJTdGF0ZSA9IHJlcXVpcmUoJy4vV3JpdGVyU3RhdGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTFN0cmVhbVdyaXRlciA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTFN0cmVhbVdyaXRlciwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxTdHJlYW1Xcml0ZXIoc3RyZWFtLCBvcHRpb25zKSB7XG4gICAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbTtcbiAgICAgIFhNTFN0cmVhbVdyaXRlci5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBYTUxTdHJlYW1Xcml0ZXIucHJvdG90eXBlLmVuZGxpbmUgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgaWYgKG5vZGUuaXNMYXN0Um9vdE5vZGUgJiYgb3B0aW9ucy5zdGF0ZSA9PT0gV3JpdGVyU3RhdGUuQ2xvc2VUYWcpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFhNTFN0cmVhbVdyaXRlci5fX3N1cGVyX18uZW5kbGluZS5jYWxsKHRoaXMsIG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS5kb2N1bWVudCA9IGZ1bmN0aW9uKGRvYywgb3B0aW9ucykge1xuICAgICAgdmFyIGNoaWxkLCBpLCBqLCBrLCBsZW4sIGxlbjEsIHJlZiwgcmVmMSwgcmVzdWx0cztcbiAgICAgIHJlZiA9IGRvYy5jaGlsZHJlbjtcbiAgICAgIGZvciAoaSA9IGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBpID0gKytqKSB7XG4gICAgICAgIGNoaWxkID0gcmVmW2ldO1xuICAgICAgICBjaGlsZC5pc0xhc3RSb290Tm9kZSA9IGkgPT09IGRvYy5jaGlsZHJlbi5sZW5ndGggLSAxO1xuICAgICAgfVxuICAgICAgb3B0aW9ucyA9IHRoaXMuZmlsdGVyT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgIHJlZjEgPSBkb2MuY2hpbGRyZW47XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGsgPSAwLCBsZW4xID0gcmVmMS5sZW5ndGg7IGsgPCBsZW4xOyBrKyspIHtcbiAgICAgICAgY2hpbGQgPSByZWYxW2tdO1xuICAgICAgICByZXN1bHRzLnB1c2godGhpcy53cml0ZUNoaWxkTm9kZShjaGlsZCwgb3B0aW9ucywgMCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfTtcblxuICAgIFhNTFN0cmVhbVdyaXRlci5wcm90b3R5cGUuYXR0cmlidXRlID0gZnVuY3Rpb24oYXR0LCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLndyaXRlKFhNTFN0cmVhbVdyaXRlci5fX3N1cGVyX18uYXR0cmlidXRlLmNhbGwodGhpcywgYXR0LCBvcHRpb25zLCBsZXZlbCkpO1xuICAgIH07XG5cbiAgICBYTUxTdHJlYW1Xcml0ZXIucHJvdG90eXBlLmNkYXRhID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZShYTUxTdHJlYW1Xcml0ZXIuX19zdXBlcl9fLmNkYXRhLmNhbGwodGhpcywgbm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS5jb21tZW50ID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZShYTUxTdHJlYW1Xcml0ZXIuX19zdXBlcl9fLmNvbW1lbnQuY2FsbCh0aGlzLCBub2RlLCBvcHRpb25zLCBsZXZlbCkpO1xuICAgIH07XG5cbiAgICBYTUxTdHJlYW1Xcml0ZXIucHJvdG90eXBlLmRlY2xhcmF0aW9uID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZShYTUxTdHJlYW1Xcml0ZXIuX19zdXBlcl9fLmRlY2xhcmF0aW9uLmNhbGwodGhpcywgbm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS5kb2NUeXBlID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHZhciBjaGlsZCwgaiwgbGVuLCByZWY7XG4gICAgICBsZXZlbCB8fCAobGV2ZWwgPSAwKTtcbiAgICAgIHRoaXMub3Blbk5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk9wZW5UYWc7XG4gICAgICB0aGlzLnN0cmVhbS53cml0ZSh0aGlzLmluZGVudChub2RlLCBvcHRpb25zLCBsZXZlbCkpO1xuICAgICAgdGhpcy5zdHJlYW0ud3JpdGUoJzwhRE9DVFlQRSAnICsgbm9kZS5yb290KCkubmFtZSk7XG4gICAgICBpZiAobm9kZS5wdWJJRCAmJiBub2RlLnN5c0lEKSB7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCcgUFVCTElDIFwiJyArIG5vZGUucHViSUQgKyAnXCIgXCInICsgbm9kZS5zeXNJRCArICdcIicpO1xuICAgICAgfSBlbHNlIGlmIChub2RlLnN5c0lEKSB7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCcgU1lTVEVNIFwiJyArIG5vZGUuc3lzSUQgKyAnXCInKTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5zdHJlYW0ud3JpdGUoJyBbJyk7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCkpO1xuICAgICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuSW5zaWRlVGFnO1xuICAgICAgICByZWYgPSBub2RlLmNoaWxkcmVuO1xuICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICBjaGlsZCA9IHJlZltqXTtcbiAgICAgICAgICB0aGlzLndyaXRlQ2hpbGROb2RlKGNoaWxkLCBvcHRpb25zLCBsZXZlbCArIDEpO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgICAgdGhpcy5zdHJlYW0ud3JpdGUoJ10nKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgIHRoaXMuc3RyZWFtLndyaXRlKG9wdGlvbnMuc3BhY2VCZWZvcmVTbGFzaCArICc+Jyk7XG4gICAgICB0aGlzLnN0cmVhbS53cml0ZSh0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5Ob25lO1xuICAgICAgcmV0dXJuIHRoaXMuY2xvc2VOb2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS5lbGVtZW50ID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHZhciBhdHQsIGNoaWxkLCBjaGlsZE5vZGVDb3VudCwgZmlyc3RDaGlsZE5vZGUsIGosIGxlbiwgbmFtZSwgcHJldHR5U3VwcHJlc3NlZCwgcmVmLCByZWYxO1xuICAgICAgbGV2ZWwgfHwgKGxldmVsID0gMCk7XG4gICAgICB0aGlzLm9wZW5Ob2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5PcGVuVGFnO1xuICAgICAgdGhpcy5zdHJlYW0ud3JpdGUodGhpcy5pbmRlbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpICsgJzwnICsgbm9kZS5uYW1lKTtcbiAgICAgIHJlZiA9IG5vZGUuYXR0cmlicztcbiAgICAgIGZvciAobmFtZSBpbiByZWYpIHtcbiAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwocmVmLCBuYW1lKSkgY29udGludWU7XG4gICAgICAgIGF0dCA9IHJlZltuYW1lXTtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGUoYXR0LCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICB9XG4gICAgICBjaGlsZE5vZGVDb3VudCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgZmlyc3RDaGlsZE5vZGUgPSBjaGlsZE5vZGVDb3VudCA9PT0gMCA/IG51bGwgOiBub2RlLmNoaWxkcmVuWzBdO1xuICAgICAgaWYgKGNoaWxkTm9kZUNvdW50ID09PSAwIHx8IG5vZGUuY2hpbGRyZW4uZXZlcnkoZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gKGUudHlwZSA9PT0gTm9kZVR5cGUuVGV4dCB8fCBlLnR5cGUgPT09IE5vZGVUeXBlLlJhdykgJiYgZS52YWx1ZSA9PT0gJyc7XG4gICAgICB9KSkge1xuICAgICAgICBpZiAob3B0aW9ucy5hbGxvd0VtcHR5KSB7XG4gICAgICAgICAgdGhpcy5zdHJlYW0ud3JpdGUoJz4nKTtcbiAgICAgICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuQ2xvc2VUYWc7XG4gICAgICAgICAgdGhpcy5zdHJlYW0ud3JpdGUoJzwvJyArIG5vZGUubmFtZSArICc+Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKG9wdGlvbnMuc3BhY2VCZWZvcmVTbGFzaCArICcvPicpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMucHJldHR5ICYmIGNoaWxkTm9kZUNvdW50ID09PSAxICYmIChmaXJzdENoaWxkTm9kZS50eXBlID09PSBOb2RlVHlwZS5UZXh0IHx8IGZpcnN0Q2hpbGROb2RlLnR5cGUgPT09IE5vZGVUeXBlLlJhdykgJiYgKGZpcnN0Q2hpbGROb2RlLnZhbHVlICE9IG51bGwpKSB7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCc+Jyk7XG4gICAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5JbnNpZGVUYWc7XG4gICAgICAgIG9wdGlvbnMuc3VwcHJlc3NQcmV0dHlDb3VudCsrO1xuICAgICAgICBwcmV0dHlTdXBwcmVzc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy53cml0ZUNoaWxkTm9kZShmaXJzdENoaWxkTm9kZSwgb3B0aW9ucywgbGV2ZWwgKyAxKTtcbiAgICAgICAgb3B0aW9ucy5zdXBwcmVzc1ByZXR0eUNvdW50LS07XG4gICAgICAgIHByZXR0eVN1cHByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgICB0aGlzLnN0cmVhbS53cml0ZSgnPC8nICsgbm9kZS5uYW1lICsgJz4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCc+JyArIHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCkpO1xuICAgICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuSW5zaWRlVGFnO1xuICAgICAgICByZWYxID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmMS5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgIGNoaWxkID0gcmVmMVtqXTtcbiAgICAgICAgICB0aGlzLndyaXRlQ2hpbGROb2RlKGNoaWxkLCBvcHRpb25zLCBsZXZlbCArIDEpO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgICAgdGhpcy5zdHJlYW0ud3JpdGUodGhpcy5pbmRlbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpICsgJzwvJyArIG5vZGUubmFtZSArICc+Jyk7XG4gICAgICB9XG4gICAgICB0aGlzLnN0cmVhbS53cml0ZSh0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5Ob25lO1xuICAgICAgcmV0dXJuIHRoaXMuY2xvc2VOb2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS5wcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLndyaXRlKFhNTFN0cmVhbVdyaXRlci5fX3N1cGVyX18ucHJvY2Vzc2luZ0luc3RydWN0aW9uLmNhbGwodGhpcywgbm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS5yYXcgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLndyaXRlKFhNTFN0cmVhbVdyaXRlci5fX3N1cGVyX18ucmF3LmNhbGwodGhpcywgbm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS50ZXh0ID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZShYTUxTdHJlYW1Xcml0ZXIuX19zdXBlcl9fLnRleHQuY2FsbCh0aGlzLCBub2RlLCBvcHRpb25zLCBsZXZlbCkpO1xuICAgIH07XG5cbiAgICBYTUxTdHJlYW1Xcml0ZXIucHJvdG90eXBlLmR0ZEF0dExpc3QgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLndyaXRlKFhNTFN0cmVhbVdyaXRlci5fX3N1cGVyX18uZHRkQXR0TGlzdC5jYWxsKHRoaXMsIG5vZGUsIG9wdGlvbnMsIGxldmVsKSk7XG4gICAgfTtcblxuICAgIFhNTFN0cmVhbVdyaXRlci5wcm90b3R5cGUuZHRkRWxlbWVudCA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdHJlYW0ud3JpdGUoWE1MU3RyZWFtV3JpdGVyLl9fc3VwZXJfXy5kdGRFbGVtZW50LmNhbGwodGhpcywgbm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS5kdGRFbnRpdHkgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLndyaXRlKFhNTFN0cmVhbVdyaXRlci5fX3N1cGVyX18uZHRkRW50aXR5LmNhbGwodGhpcywgbm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS5kdGROb3RhdGlvbiA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdHJlYW0ud3JpdGUoWE1MU3RyZWFtV3JpdGVyLl9fc3VwZXJfXy5kdGROb3RhdGlvbi5jYWxsKHRoaXMsIG5vZGUsIG9wdGlvbnMsIGxldmVsKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxTdHJlYW1Xcml0ZXI7XG5cbiAgfSkoWE1MV3JpdGVyQmFzZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBXcml0ZXJTdGF0ZSwgWE1MRE9NSW1wbGVtZW50YXRpb24sIFhNTERvY3VtZW50LCBYTUxEb2N1bWVudENCLCBYTUxTdHJlYW1Xcml0ZXIsIFhNTFN0cmluZ1dyaXRlciwgYXNzaWduLCBpc0Z1bmN0aW9uLCByZWY7XG5cbiAgcmVmID0gcmVxdWlyZSgnLi9VdGlsaXR5JyksIGFzc2lnbiA9IHJlZi5hc3NpZ24sIGlzRnVuY3Rpb24gPSByZWYuaXNGdW5jdGlvbjtcblxuICBYTUxET01JbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vWE1MRE9NSW1wbGVtZW50YXRpb24nKTtcblxuICBYTUxEb2N1bWVudCA9IHJlcXVpcmUoJy4vWE1MRG9jdW1lbnQnKTtcblxuICBYTUxEb2N1bWVudENCID0gcmVxdWlyZSgnLi9YTUxEb2N1bWVudENCJyk7XG5cbiAgWE1MU3RyaW5nV3JpdGVyID0gcmVxdWlyZSgnLi9YTUxTdHJpbmdXcml0ZXInKTtcblxuICBYTUxTdHJlYW1Xcml0ZXIgPSByZXF1aXJlKCcuL1hNTFN0cmVhbVdyaXRlcicpO1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIFdyaXRlclN0YXRlID0gcmVxdWlyZSgnLi9Xcml0ZXJTdGF0ZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzLmNyZWF0ZSA9IGZ1bmN0aW9uKG5hbWUsIHhtbGRlYywgZG9jdHlwZSwgb3B0aW9ucykge1xuICAgIHZhciBkb2MsIHJvb3Q7XG4gICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUm9vdCBlbGVtZW50IG5lZWRzIGEgbmFtZS5cIik7XG4gICAgfVxuICAgIG9wdGlvbnMgPSBhc3NpZ24oe30sIHhtbGRlYywgZG9jdHlwZSwgb3B0aW9ucyk7XG4gICAgZG9jID0gbmV3IFhNTERvY3VtZW50KG9wdGlvbnMpO1xuICAgIHJvb3QgPSBkb2MuZWxlbWVudChuYW1lKTtcbiAgICBpZiAoIW9wdGlvbnMuaGVhZGxlc3MpIHtcbiAgICAgIGRvYy5kZWNsYXJhdGlvbihvcHRpb25zKTtcbiAgICAgIGlmICgob3B0aW9ucy5wdWJJRCAhPSBudWxsKSB8fCAob3B0aW9ucy5zeXNJRCAhPSBudWxsKSkge1xuICAgICAgICBkb2MuZHRkKG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcm9vdDtcbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0cy5iZWdpbiA9IGZ1bmN0aW9uKG9wdGlvbnMsIG9uRGF0YSwgb25FbmQpIHtcbiAgICB2YXIgcmVmMTtcbiAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zKSkge1xuICAgICAgcmVmMSA9IFtvcHRpb25zLCBvbkRhdGFdLCBvbkRhdGEgPSByZWYxWzBdLCBvbkVuZCA9IHJlZjFbMV07XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIGlmIChvbkRhdGEpIHtcbiAgICAgIHJldHVybiBuZXcgWE1MRG9jdW1lbnRDQihvcHRpb25zLCBvbkRhdGEsIG9uRW5kKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBYTUxEb2N1bWVudChvcHRpb25zKTtcbiAgICB9XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHMuc3RyaW5nV3JpdGVyID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgWE1MU3RyaW5nV3JpdGVyKG9wdGlvbnMpO1xuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzLnN0cmVhbVdyaXRlciA9IGZ1bmN0aW9uKHN0cmVhbSwgb3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgWE1MU3RyZWFtV3JpdGVyKHN0cmVhbSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHMuaW1wbGVtZW50YXRpb24gPSBuZXcgWE1MRE9NSW1wbGVtZW50YXRpb24oKTtcblxuICBtb2R1bGUuZXhwb3J0cy5ub2RlVHlwZSA9IE5vZGVUeXBlO1xuXG4gIG1vZHVsZS5leHBvcnRzLndyaXRlclN0YXRlID0gV3JpdGVyU3RhdGU7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIHZhciBidWlsZGVyLCBkZWZhdWx0cywgZXNjYXBlQ0RBVEEsIHJlcXVpcmVzQ0RBVEEsIHdyYXBDREFUQSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgYnVpbGRlciA9IHJlcXVpcmUoJ3htbGJ1aWxkZXInKTtcblxuICBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKS5kZWZhdWx0cztcblxuICByZXF1aXJlc0NEQVRBID0gZnVuY3Rpb24oZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSBcInN0cmluZ1wiICYmIChlbnRyeS5pbmRleE9mKCcmJykgPj0gMCB8fCBlbnRyeS5pbmRleE9mKCc+JykgPj0gMCB8fCBlbnRyeS5pbmRleE9mKCc8JykgPj0gMCk7XG4gIH07XG5cbiAgd3JhcENEQVRBID0gZnVuY3Rpb24oZW50cnkpIHtcbiAgICByZXR1cm4gXCI8IVtDREFUQVtcIiArIChlc2NhcGVDREFUQShlbnRyeSkpICsgXCJdXT5cIjtcbiAgfTtcblxuICBlc2NhcGVDREFUQSA9IGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgcmV0dXJuIGVudHJ5LnJlcGxhY2UoJ11dPicsICddXV1dPjwhW0NEQVRBWz4nKTtcbiAgfTtcblxuICBleHBvcnRzLkJ1aWxkZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gQnVpbGRlcihvcHRzKSB7XG4gICAgICB2YXIga2V5LCByZWYsIHZhbHVlO1xuICAgICAgdGhpcy5vcHRpb25zID0ge307XG4gICAgICByZWYgPSBkZWZhdWx0c1tcIjAuMlwiXTtcbiAgICAgIGZvciAoa2V5IGluIHJlZikge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChyZWYsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICB2YWx1ZSA9IHJlZltrZXldO1xuICAgICAgICB0aGlzLm9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgZm9yIChrZXkgaW4gb3B0cykge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChvcHRzLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgdmFsdWUgPSBvcHRzW2tleV07XG4gICAgICAgIHRoaXMub3B0aW9uc1trZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQnVpbGRlci5wcm90b3R5cGUuYnVpbGRPYmplY3QgPSBmdW5jdGlvbihyb290T2JqKSB7XG4gICAgICB2YXIgYXR0cmtleSwgY2hhcmtleSwgcmVuZGVyLCByb290RWxlbWVudCwgcm9vdE5hbWU7XG4gICAgICBhdHRya2V5ID0gdGhpcy5vcHRpb25zLmF0dHJrZXk7XG4gICAgICBjaGFya2V5ID0gdGhpcy5vcHRpb25zLmNoYXJrZXk7XG4gICAgICBpZiAoKE9iamVjdC5rZXlzKHJvb3RPYmopLmxlbmd0aCA9PT0gMSkgJiYgKHRoaXMub3B0aW9ucy5yb290TmFtZSA9PT0gZGVmYXVsdHNbJzAuMiddLnJvb3ROYW1lKSkge1xuICAgICAgICByb290TmFtZSA9IE9iamVjdC5rZXlzKHJvb3RPYmopWzBdO1xuICAgICAgICByb290T2JqID0gcm9vdE9ialtyb290TmFtZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290TmFtZSA9IHRoaXMub3B0aW9ucy5yb290TmFtZTtcbiAgICAgIH1cbiAgICAgIHJlbmRlciA9IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZWxlbWVudCwgb2JqKSB7XG4gICAgICAgICAgdmFyIGF0dHIsIGNoaWxkLCBlbnRyeSwgaW5kZXgsIGtleSwgdmFsdWU7XG4gICAgICAgICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5jZGF0YSAmJiByZXF1aXJlc0NEQVRBKG9iaikpIHtcbiAgICAgICAgICAgICAgZWxlbWVudC5yYXcod3JhcENEQVRBKG9iaikpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZWxlbWVudC50eHQob2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICAgICAgZm9yIChpbmRleCBpbiBvYmopIHtcbiAgICAgICAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwob2JqLCBpbmRleCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICBjaGlsZCA9IG9ialtpbmRleF07XG4gICAgICAgICAgICAgIGZvciAoa2V5IGluIGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgZW50cnkgPSBjaGlsZFtrZXldO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSByZW5kZXIoZWxlbWVudC5lbGUoa2V5KSwgZW50cnkpLnVwKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgIGlmICghaGFzUHJvcC5jYWxsKG9iaiwga2V5KSkgY29udGludWU7XG4gICAgICAgICAgICAgIGNoaWxkID0gb2JqW2tleV07XG4gICAgICAgICAgICAgIGlmIChrZXkgPT09IGF0dHJrZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNoaWxkID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKGF0dHIgaW4gY2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBjaGlsZFthdHRyXTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQuYXR0KGF0dHIsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBjaGFya2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuY2RhdGEgJiYgcmVxdWlyZXNDREFUQShjaGlsZCkpIHtcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnJhdyh3cmFwQ0RBVEEoY2hpbGQpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQudHh0KGNoaWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjaGlsZCkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGluZGV4IGluIGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChjaGlsZCwgaW5kZXgpKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgIGVudHJ5ID0gY2hpbGRbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuY2RhdGEgJiYgcmVxdWlyZXNDREFUQShlbnRyeSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5lbGUoa2V5KS5yYXcod3JhcENEQVRBKGVudHJ5KSkudXAoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5lbGUoa2V5LCBlbnRyeSkudXAoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IHJlbmRlcihlbGVtZW50LmVsZShrZXkpLCBlbnRyeSkudXAoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNoaWxkID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudCA9IHJlbmRlcihlbGVtZW50LmVsZShrZXkpLCBjaGlsZCkudXAoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNoaWxkID09PSAnc3RyaW5nJyAmJiBfdGhpcy5vcHRpb25zLmNkYXRhICYmIHJlcXVpcmVzQ0RBVEEoY2hpbGQpKSB7XG4gICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5lbGUoa2V5KS5yYXcod3JhcENEQVRBKGNoaWxkKSkudXAoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSAnJztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LmVsZShrZXksIGNoaWxkLnRvU3RyaW5nKCkpLnVwKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcyk7XG4gICAgICByb290RWxlbWVudCA9IGJ1aWxkZXIuY3JlYXRlKHJvb3ROYW1lLCB0aGlzLm9wdGlvbnMueG1sZGVjLCB0aGlzLm9wdGlvbnMuZG9jdHlwZSwge1xuICAgICAgICBoZWFkbGVzczogdGhpcy5vcHRpb25zLmhlYWRsZXNzLFxuICAgICAgICBhbGxvd1N1cnJvZ2F0ZUNoYXJzOiB0aGlzLm9wdGlvbnMuYWxsb3dTdXJyb2dhdGVDaGFyc1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVuZGVyKHJvb3RFbGVtZW50LCByb290T2JqKS5lbmQodGhpcy5vcHRpb25zLnJlbmRlck9wdHMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gQnVpbGRlcjtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIjsoZnVuY3Rpb24gKHNheCkgeyAvLyB3cmFwcGVyIGZvciBub24tbm9kZSBlbnZzXG4gIHNheC5wYXJzZXIgPSBmdW5jdGlvbiAoc3RyaWN0LCBvcHQpIHsgcmV0dXJuIG5ldyBTQVhQYXJzZXIoc3RyaWN0LCBvcHQpIH1cbiAgc2F4LlNBWFBhcnNlciA9IFNBWFBhcnNlclxuICBzYXguU0FYU3RyZWFtID0gU0FYU3RyZWFtXG4gIHNheC5jcmVhdGVTdHJlYW0gPSBjcmVhdGVTdHJlYW1cblxuICAvLyBXaGVuIHdlIHBhc3MgdGhlIE1BWF9CVUZGRVJfTEVOR1RIIHBvc2l0aW9uLCBzdGFydCBjaGVja2luZyBmb3IgYnVmZmVyIG92ZXJydW5zLlxuICAvLyBXaGVuIHdlIGNoZWNrLCBzY2hlZHVsZSB0aGUgbmV4dCBjaGVjayBmb3IgTUFYX0JVRkZFUl9MRU5HVEggLSAobWF4KGJ1ZmZlciBsZW5ndGhzKSksXG4gIC8vIHNpbmNlIHRoYXQncyB0aGUgZWFybGllc3QgdGhhdCBhIGJ1ZmZlciBvdmVycnVuIGNvdWxkIG9jY3VyLiAgVGhpcyB3YXksIGNoZWNrcyBhcmVcbiAgLy8gYXMgcmFyZSBhcyByZXF1aXJlZCwgYnV0IGFzIG9mdGVuIGFzIG5lY2Vzc2FyeSB0byBlbnN1cmUgbmV2ZXIgY3Jvc3NpbmcgdGhpcyBib3VuZC5cbiAgLy8gRnVydGhlcm1vcmUsIGJ1ZmZlcnMgYXJlIG9ubHkgdGVzdGVkIGF0IG1vc3Qgb25jZSBwZXIgd3JpdGUoKSwgc28gcGFzc2luZyBhIHZlcnlcbiAgLy8gbGFyZ2Ugc3RyaW5nIGludG8gd3JpdGUoKSBtaWdodCBoYXZlIHVuZGVzaXJhYmxlIGVmZmVjdHMsIGJ1dCB0aGlzIGlzIG1hbmFnZWFibGUgYnlcbiAgLy8gdGhlIGNhbGxlciwgc28gaXQgaXMgYXNzdW1lZCB0byBiZSBzYWZlLiAgVGh1cywgYSBjYWxsIHRvIHdyaXRlKCkgbWF5LCBpbiB0aGUgZXh0cmVtZVxuICAvLyBlZGdlIGNhc2UsIHJlc3VsdCBpbiBjcmVhdGluZyBhdCBtb3N0IG9uZSBjb21wbGV0ZSBjb3B5IG9mIHRoZSBzdHJpbmcgcGFzc2VkIGluLlxuICAvLyBTZXQgdG8gSW5maW5pdHkgdG8gaGF2ZSB1bmxpbWl0ZWQgYnVmZmVycy5cbiAgc2F4Lk1BWF9CVUZGRVJfTEVOR1RIID0gNjQgKiAxMDI0XG5cbiAgdmFyIGJ1ZmZlcnMgPSBbXG4gICAgJ2NvbW1lbnQnLCAnc2dtbERlY2wnLCAndGV4dE5vZGUnLCAndGFnTmFtZScsICdkb2N0eXBlJyxcbiAgICAncHJvY0luc3ROYW1lJywgJ3Byb2NJbnN0Qm9keScsICdlbnRpdHknLCAnYXR0cmliTmFtZScsXG4gICAgJ2F0dHJpYlZhbHVlJywgJ2NkYXRhJywgJ3NjcmlwdCdcbiAgXVxuXG4gIHNheC5FVkVOVFMgPSBbXG4gICAgJ3RleHQnLFxuICAgICdwcm9jZXNzaW5naW5zdHJ1Y3Rpb24nLFxuICAgICdzZ21sZGVjbGFyYXRpb24nLFxuICAgICdkb2N0eXBlJyxcbiAgICAnY29tbWVudCcsXG4gICAgJ29wZW50YWdzdGFydCcsXG4gICAgJ2F0dHJpYnV0ZScsXG4gICAgJ29wZW50YWcnLFxuICAgICdjbG9zZXRhZycsXG4gICAgJ29wZW5jZGF0YScsXG4gICAgJ2NkYXRhJyxcbiAgICAnY2xvc2VjZGF0YScsXG4gICAgJ2Vycm9yJyxcbiAgICAnZW5kJyxcbiAgICAncmVhZHknLFxuICAgICdzY3JpcHQnLFxuICAgICdvcGVubmFtZXNwYWNlJyxcbiAgICAnY2xvc2VuYW1lc3BhY2UnXG4gIF1cblxuICBmdW5jdGlvbiBTQVhQYXJzZXIgKHN0cmljdCwgb3B0KSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNBWFBhcnNlcikpIHtcbiAgICAgIHJldHVybiBuZXcgU0FYUGFyc2VyKHN0cmljdCwgb3B0KVxuICAgIH1cblxuICAgIHZhciBwYXJzZXIgPSB0aGlzXG4gICAgY2xlYXJCdWZmZXJzKHBhcnNlcilcbiAgICBwYXJzZXIucSA9IHBhcnNlci5jID0gJydcbiAgICBwYXJzZXIuYnVmZmVyQ2hlY2tQb3NpdGlvbiA9IHNheC5NQVhfQlVGRkVSX0xFTkdUSFxuICAgIHBhcnNlci5vcHQgPSBvcHQgfHwge31cbiAgICBwYXJzZXIub3B0Lmxvd2VyY2FzZSA9IHBhcnNlci5vcHQubG93ZXJjYXNlIHx8IHBhcnNlci5vcHQubG93ZXJjYXNldGFnc1xuICAgIHBhcnNlci5sb29zZUNhc2UgPSBwYXJzZXIub3B0Lmxvd2VyY2FzZSA/ICd0b0xvd2VyQ2FzZScgOiAndG9VcHBlckNhc2UnXG4gICAgcGFyc2VyLnRhZ3MgPSBbXVxuICAgIHBhcnNlci5jbG9zZWQgPSBwYXJzZXIuY2xvc2VkUm9vdCA9IHBhcnNlci5zYXdSb290ID0gZmFsc2VcbiAgICBwYXJzZXIudGFnID0gcGFyc2VyLmVycm9yID0gbnVsbFxuICAgIHBhcnNlci5zdHJpY3QgPSAhIXN0cmljdFxuICAgIHBhcnNlci5ub3NjcmlwdCA9ICEhKHN0cmljdCB8fCBwYXJzZXIub3B0Lm5vc2NyaXB0KVxuICAgIHBhcnNlci5zdGF0ZSA9IFMuQkVHSU5cbiAgICBwYXJzZXIuc3RyaWN0RW50aXRpZXMgPSBwYXJzZXIub3B0LnN0cmljdEVudGl0aWVzXG4gICAgcGFyc2VyLkVOVElUSUVTID0gcGFyc2VyLnN0cmljdEVudGl0aWVzID8gT2JqZWN0LmNyZWF0ZShzYXguWE1MX0VOVElUSUVTKSA6IE9iamVjdC5jcmVhdGUoc2F4LkVOVElUSUVTKVxuICAgIHBhcnNlci5hdHRyaWJMaXN0ID0gW11cblxuICAgIC8vIG5hbWVzcGFjZXMgZm9ybSBhIHByb3RvdHlwZSBjaGFpbi5cbiAgICAvLyBpdCBhbHdheXMgcG9pbnRzIGF0IHRoZSBjdXJyZW50IHRhZyxcbiAgICAvLyB3aGljaCBwcm90b3MgdG8gaXRzIHBhcmVudCB0YWcuXG4gICAgaWYgKHBhcnNlci5vcHQueG1sbnMpIHtcbiAgICAgIHBhcnNlci5ucyA9IE9iamVjdC5jcmVhdGUocm9vdE5TKVxuICAgIH1cblxuICAgIC8vIG1vc3RseSBqdXN0IGZvciBlcnJvciByZXBvcnRpbmdcbiAgICBwYXJzZXIudHJhY2tQb3NpdGlvbiA9IHBhcnNlci5vcHQucG9zaXRpb24gIT09IGZhbHNlXG4gICAgaWYgKHBhcnNlci50cmFja1Bvc2l0aW9uKSB7XG4gICAgICBwYXJzZXIucG9zaXRpb24gPSBwYXJzZXIubGluZSA9IHBhcnNlci5jb2x1bW4gPSAwXG4gICAgfVxuICAgIGVtaXQocGFyc2VyLCAnb25yZWFkeScpXG4gIH1cblxuICBpZiAoIU9iamVjdC5jcmVhdGUpIHtcbiAgICBPYmplY3QuY3JlYXRlID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgIGZ1bmN0aW9uIEYgKCkge31cbiAgICAgIEYucHJvdG90eXBlID0gb1xuICAgICAgdmFyIG5ld2YgPSBuZXcgRigpXG4gICAgICByZXR1cm4gbmV3ZlxuICAgIH1cbiAgfVxuXG4gIGlmICghT2JqZWN0LmtleXMpIHtcbiAgICBPYmplY3Qua2V5cyA9IGZ1bmN0aW9uIChvKSB7XG4gICAgICB2YXIgYSA9IFtdXG4gICAgICBmb3IgKHZhciBpIGluIG8pIGlmIChvLmhhc093blByb3BlcnR5KGkpKSBhLnB1c2goaSlcbiAgICAgIHJldHVybiBhXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tCdWZmZXJMZW5ndGggKHBhcnNlcikge1xuICAgIHZhciBtYXhBbGxvd2VkID0gTWF0aC5tYXgoc2F4Lk1BWF9CVUZGRVJfTEVOR1RILCAxMClcbiAgICB2YXIgbWF4QWN0dWFsID0gMFxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYnVmZmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBsZW4gPSBwYXJzZXJbYnVmZmVyc1tpXV0ubGVuZ3RoXG4gICAgICBpZiAobGVuID4gbWF4QWxsb3dlZCkge1xuICAgICAgICAvLyBUZXh0L2NkYXRhIG5vZGVzIGNhbiBnZXQgYmlnLCBhbmQgc2luY2UgdGhleSdyZSBidWZmZXJlZCxcbiAgICAgICAgLy8gd2UgY2FuIGdldCBoZXJlIHVuZGVyIG5vcm1hbCBjb25kaXRpb25zLlxuICAgICAgICAvLyBBdm9pZCBpc3N1ZXMgYnkgZW1pdHRpbmcgdGhlIHRleHQgbm9kZSBub3csXG4gICAgICAgIC8vIHNvIGF0IGxlYXN0IGl0IHdvbid0IGdldCBhbnkgYmlnZ2VyLlxuICAgICAgICBzd2l0Y2ggKGJ1ZmZlcnNbaV0pIHtcbiAgICAgICAgICBjYXNlICd0ZXh0Tm9kZSc6XG4gICAgICAgICAgICBjbG9zZVRleHQocGFyc2VyKVxuICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgIGNhc2UgJ2NkYXRhJzpcbiAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uY2RhdGEnLCBwYXJzZXIuY2RhdGEpXG4gICAgICAgICAgICBwYXJzZXIuY2RhdGEgPSAnJ1xuICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgIGNhc2UgJ3NjcmlwdCc6XG4gICAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbnNjcmlwdCcsIHBhcnNlci5zY3JpcHQpXG4gICAgICAgICAgICBwYXJzZXIuc2NyaXB0ID0gJydcbiAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgZXJyb3IocGFyc2VyLCAnTWF4IGJ1ZmZlciBsZW5ndGggZXhjZWVkZWQ6ICcgKyBidWZmZXJzW2ldKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBtYXhBY3R1YWwgPSBNYXRoLm1heChtYXhBY3R1YWwsIGxlbilcbiAgICB9XG4gICAgLy8gc2NoZWR1bGUgdGhlIG5leHQgY2hlY2sgZm9yIHRoZSBlYXJsaWVzdCBwb3NzaWJsZSBidWZmZXIgb3ZlcnJ1bi5cbiAgICB2YXIgbSA9IHNheC5NQVhfQlVGRkVSX0xFTkdUSCAtIG1heEFjdHVhbFxuICAgIHBhcnNlci5idWZmZXJDaGVja1Bvc2l0aW9uID0gbSArIHBhcnNlci5wb3NpdGlvblxuICB9XG5cbiAgZnVuY3Rpb24gY2xlYXJCdWZmZXJzIChwYXJzZXIpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGJ1ZmZlcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBwYXJzZXJbYnVmZmVyc1tpXV0gPSAnJ1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdXNoQnVmZmVycyAocGFyc2VyKSB7XG4gICAgY2xvc2VUZXh0KHBhcnNlcilcbiAgICBpZiAocGFyc2VyLmNkYXRhICE9PSAnJykge1xuICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25jZGF0YScsIHBhcnNlci5jZGF0YSlcbiAgICAgIHBhcnNlci5jZGF0YSA9ICcnXG4gICAgfVxuICAgIGlmIChwYXJzZXIuc2NyaXB0ICE9PSAnJykge1xuICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25zY3JpcHQnLCBwYXJzZXIuc2NyaXB0KVxuICAgICAgcGFyc2VyLnNjcmlwdCA9ICcnXG4gICAgfVxuICB9XG5cbiAgU0FYUGFyc2VyLnByb3RvdHlwZSA9IHtcbiAgICBlbmQ6IGZ1bmN0aW9uICgpIHsgZW5kKHRoaXMpIH0sXG4gICAgd3JpdGU6IHdyaXRlLFxuICAgIHJlc3VtZTogZnVuY3Rpb24gKCkgeyB0aGlzLmVycm9yID0gbnVsbDsgcmV0dXJuIHRoaXMgfSxcbiAgICBjbG9zZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy53cml0ZShudWxsKSB9LFxuICAgIGZsdXNoOiBmdW5jdGlvbiAoKSB7IGZsdXNoQnVmZmVycyh0aGlzKSB9XG4gIH1cblxuICB2YXIgU3RyZWFtXG4gIHRyeSB7XG4gICAgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJykuU3RyZWFtXG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgU3RyZWFtID0gZnVuY3Rpb24gKCkge31cbiAgfVxuXG4gIHZhciBzdHJlYW1XcmFwcyA9IHNheC5FVkVOVFMuZmlsdGVyKGZ1bmN0aW9uIChldikge1xuICAgIHJldHVybiBldiAhPT0gJ2Vycm9yJyAmJiBldiAhPT0gJ2VuZCdcbiAgfSlcblxuICBmdW5jdGlvbiBjcmVhdGVTdHJlYW0gKHN0cmljdCwgb3B0KSB7XG4gICAgcmV0dXJuIG5ldyBTQVhTdHJlYW0oc3RyaWN0LCBvcHQpXG4gIH1cblxuICBmdW5jdGlvbiBTQVhTdHJlYW0gKHN0cmljdCwgb3B0KSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNBWFN0cmVhbSkpIHtcbiAgICAgIHJldHVybiBuZXcgU0FYU3RyZWFtKHN0cmljdCwgb3B0KVxuICAgIH1cblxuICAgIFN0cmVhbS5hcHBseSh0aGlzKVxuXG4gICAgdGhpcy5fcGFyc2VyID0gbmV3IFNBWFBhcnNlcihzdHJpY3QsIG9wdClcbiAgICB0aGlzLndyaXRhYmxlID0gdHJ1ZVxuICAgIHRoaXMucmVhZGFibGUgPSB0cnVlXG5cbiAgICB2YXIgbWUgPSB0aGlzXG5cbiAgICB0aGlzLl9wYXJzZXIub25lbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBtZS5lbWl0KCdlbmQnKVxuICAgIH1cblxuICAgIHRoaXMuX3BhcnNlci5vbmVycm9yID0gZnVuY3Rpb24gKGVyKSB7XG4gICAgICBtZS5lbWl0KCdlcnJvcicsIGVyKVxuXG4gICAgICAvLyBpZiBkaWRuJ3QgdGhyb3csIHRoZW4gbWVhbnMgZXJyb3Igd2FzIGhhbmRsZWQuXG4gICAgICAvLyBnbyBhaGVhZCBhbmQgY2xlYXIgZXJyb3IsIHNvIHdlIGNhbiB3cml0ZSBhZ2Fpbi5cbiAgICAgIG1lLl9wYXJzZXIuZXJyb3IgPSBudWxsXG4gICAgfVxuXG4gICAgdGhpcy5fZGVjb2RlciA9IG51bGxcblxuICAgIHN0cmVhbVdyYXBzLmZvckVhY2goZnVuY3Rpb24gKGV2KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobWUsICdvbicgKyBldiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gbWUuX3BhcnNlclsnb24nICsgZXZdXG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgICBpZiAoIWgpIHtcbiAgICAgICAgICAgIG1lLnJlbW92ZUFsbExpc3RlbmVycyhldilcbiAgICAgICAgICAgIG1lLl9wYXJzZXJbJ29uJyArIGV2XSA9IGhcbiAgICAgICAgICAgIHJldHVybiBoXG4gICAgICAgICAgfVxuICAgICAgICAgIG1lLm9uKGV2LCBoKVxuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBTQVhTdHJlYW0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdHJlYW0ucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBTQVhTdHJlYW1cbiAgICB9XG4gIH0pXG5cbiAgU0FYU3RyZWFtLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgaWYgKHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIHR5cGVvZiBCdWZmZXIuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkge1xuICAgICAgaWYgKCF0aGlzLl9kZWNvZGVyKSB7XG4gICAgICAgIHZhciBTRCA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyJykuU3RyaW5nRGVjb2RlclxuICAgICAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFNEKCd1dGY4JylcbiAgICAgIH1cbiAgICAgIGRhdGEgPSB0aGlzLl9kZWNvZGVyLndyaXRlKGRhdGEpXG4gICAgfVxuXG4gICAgdGhpcy5fcGFyc2VyLndyaXRlKGRhdGEudG9TdHJpbmcoKSlcbiAgICB0aGlzLmVtaXQoJ2RhdGEnLCBkYXRhKVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBTQVhTdHJlYW0ucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChjaHVuaykge1xuICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcbiAgICAgIHRoaXMud3JpdGUoY2h1bmspXG4gICAgfVxuICAgIHRoaXMuX3BhcnNlci5lbmQoKVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBTQVhTdHJlYW0ucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2LCBoYW5kbGVyKSB7XG4gICAgdmFyIG1lID0gdGhpc1xuICAgIGlmICghbWUuX3BhcnNlclsnb24nICsgZXZdICYmIHN0cmVhbVdyYXBzLmluZGV4T2YoZXYpICE9PSAtMSkge1xuICAgICAgbWUuX3BhcnNlclsnb24nICsgZXZdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBbYXJndW1lbnRzWzBdXSA6IEFycmF5LmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICAgICAgYXJncy5zcGxpY2UoMCwgMCwgZXYpXG4gICAgICAgIG1lLmVtaXQuYXBwbHkobWUsIGFyZ3MpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFN0cmVhbS5wcm90b3R5cGUub24uY2FsbChtZSwgZXYsIGhhbmRsZXIpXG4gIH1cblxuICAvLyBjaGFyYWN0ZXIgY2xhc3NlcyBhbmQgdG9rZW5zXG4gIHZhciB3aGl0ZXNwYWNlID0gJ1xcclxcblxcdCAnXG5cbiAgLy8gdGhpcyByZWFsbHkgbmVlZHMgdG8gYmUgcmVwbGFjZWQgd2l0aCBjaGFyYWN0ZXIgY2xhc3Nlcy5cbiAgLy8gWE1MIGFsbG93cyBhbGwgbWFubmVyIG9mIHJpZGljdWxvdXMgbnVtYmVycyBhbmQgZGlnaXRzLlxuICB2YXIgbnVtYmVyID0gJzAxMjQzNTY3ODknXG4gIHZhciBsZXR0ZXIgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWidcblxuICAvLyAoTGV0dGVyIHwgXCJfXCIgfCBcIjpcIilcbiAgdmFyIHF1b3RlID0gJ1xcJ1wiJ1xuICB2YXIgYXR0cmliRW5kID0gd2hpdGVzcGFjZSArICc+J1xuICB2YXIgQ0RBVEEgPSAnW0NEQVRBWydcbiAgdmFyIERPQ1RZUEUgPSAnRE9DVFlQRSdcbiAgdmFyIFhNTF9OQU1FU1BBQ0UgPSAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJ1xuICB2YXIgWE1MTlNfTkFNRVNQQUNFID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvJ1xuICB2YXIgcm9vdE5TID0geyB4bWw6IFhNTF9OQU1FU1BBQ0UsIHhtbG5zOiBYTUxOU19OQU1FU1BBQ0UgfVxuXG4gIC8vIHR1cm4gYWxsIHRoZSBzdHJpbmcgY2hhcmFjdGVyIHNldHMgaW50byBjaGFyYWN0ZXIgY2xhc3Mgb2JqZWN0cy5cbiAgd2hpdGVzcGFjZSA9IGNoYXJDbGFzcyh3aGl0ZXNwYWNlKVxuICBudW1iZXIgPSBjaGFyQ2xhc3MobnVtYmVyKVxuICBsZXR0ZXIgPSBjaGFyQ2xhc3MobGV0dGVyKVxuXG4gIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy14bWwvI05ULU5hbWVTdGFydENoYXJcbiAgLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiB3b3JrcyBvbiBzdHJpbmdzLCBhIHNpbmdsZSBjaGFyYWN0ZXIgYXQgYSB0aW1lXG4gIC8vIGFzIHN1Y2gsIGl0IGNhbm5vdCBldmVyIHN1cHBvcnQgYXN0cmFsLXBsYW5lIGNoYXJhY3RlcnMgKDEwMDAwLUVGRkZGKVxuICAvLyB3aXRob3V0IGEgc2lnbmlmaWNhbnQgYnJlYWtpbmcgY2hhbmdlIHRvIGVpdGhlciB0aGlzICBwYXJzZXIsIG9yIHRoZVxuICAvLyBKYXZhU2NyaXB0IGxhbmd1YWdlLiAgSW1wbGVtZW50YXRpb24gb2YgYW4gZW1vamktY2FwYWJsZSB4bWwgcGFyc2VyXG4gIC8vIGlzIGxlZnQgYXMgYW4gZXhlcmNpc2UgZm9yIHRoZSByZWFkZXIuXG4gIHZhciBuYW1lU3RhcnQgPSAvWzpfQS1aYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXS9cblxuICB2YXIgbmFtZUJvZHkgPSAvWzpfQS1aYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MFxcLlxcZC1dL1xuXG4gIHZhciBlbnRpdHlTdGFydCA9IC9bIzpfQS1aYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXS9cbiAgdmFyIGVudGl0eUJvZHkgPSAvWyM6X0EtWmEtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBcXC5cXGQtXS9cblxuICBxdW90ZSA9IGNoYXJDbGFzcyhxdW90ZSlcbiAgYXR0cmliRW5kID0gY2hhckNsYXNzKGF0dHJpYkVuZClcblxuICBmdW5jdGlvbiBjaGFyQ2xhc3MgKHN0cikge1xuICAgIHJldHVybiBzdHIuc3BsaXQoJycpLnJlZHVjZShmdW5jdGlvbiAocywgYykge1xuICAgICAgc1tjXSA9IHRydWVcbiAgICAgIHJldHVybiBzXG4gICAgfSwge30pXG4gIH1cblxuICBmdW5jdGlvbiBpc1JlZ0V4cCAoYykge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYykgPT09ICdbb2JqZWN0IFJlZ0V4cF0nXG4gIH1cblxuICBmdW5jdGlvbiBpcyAoY2hhcmNsYXNzLCBjKSB7XG4gICAgcmV0dXJuIGlzUmVnRXhwKGNoYXJjbGFzcykgPyAhIWMubWF0Y2goY2hhcmNsYXNzKSA6IGNoYXJjbGFzc1tjXVxuICB9XG5cbiAgZnVuY3Rpb24gbm90IChjaGFyY2xhc3MsIGMpIHtcbiAgICByZXR1cm4gIWlzKGNoYXJjbGFzcywgYylcbiAgfVxuXG4gIHZhciBTID0gMFxuICBzYXguU1RBVEUgPSB7XG4gICAgQkVHSU46IFMrKywgLy8gbGVhZGluZyBieXRlIG9yZGVyIG1hcmsgb3Igd2hpdGVzcGFjZVxuICAgIEJFR0lOX1dISVRFU1BBQ0U6IFMrKywgLy8gbGVhZGluZyB3aGl0ZXNwYWNlXG4gICAgVEVYVDogUysrLCAvLyBnZW5lcmFsIHN0dWZmXG4gICAgVEVYVF9FTlRJVFk6IFMrKywgLy8gJmFtcCBhbmQgc3VjaC5cbiAgICBPUEVOX1dBS0E6IFMrKywgLy8gPFxuICAgIFNHTUxfREVDTDogUysrLCAvLyA8IUJMQVJHXG4gICAgU0dNTF9ERUNMX1FVT1RFRDogUysrLCAvLyA8IUJMQVJHIGZvbyBcImJhclxuICAgIERPQ1RZUEU6IFMrKywgLy8gPCFET0NUWVBFXG4gICAgRE9DVFlQRV9RVU9URUQ6IFMrKywgLy8gPCFET0NUWVBFIFwiLy9ibGFoXG4gICAgRE9DVFlQRV9EVEQ6IFMrKywgLy8gPCFET0NUWVBFIFwiLy9ibGFoXCIgWyAuLi5cbiAgICBET0NUWVBFX0RURF9RVU9URUQ6IFMrKywgLy8gPCFET0NUWVBFIFwiLy9ibGFoXCIgWyBcImZvb1xuICAgIENPTU1FTlRfU1RBUlRJTkc6IFMrKywgLy8gPCEtXG4gICAgQ09NTUVOVDogUysrLCAvLyA8IS0tXG4gICAgQ09NTUVOVF9FTkRJTkc6IFMrKywgLy8gPCEtLSBibGFoIC1cbiAgICBDT01NRU5UX0VOREVEOiBTKyssIC8vIDwhLS0gYmxhaCAtLVxuICAgIENEQVRBOiBTKyssIC8vIDwhW0NEQVRBWyBzb21ldGhpbmdcbiAgICBDREFUQV9FTkRJTkc6IFMrKywgLy8gXVxuICAgIENEQVRBX0VORElOR18yOiBTKyssIC8vIF1dXG4gICAgUFJPQ19JTlNUOiBTKyssIC8vIDw/aGlcbiAgICBQUk9DX0lOU1RfQk9EWTogUysrLCAvLyA8P2hpIHRoZXJlXG4gICAgUFJPQ19JTlNUX0VORElORzogUysrLCAvLyA8P2hpIFwidGhlcmVcIiA/XG4gICAgT1BFTl9UQUc6IFMrKywgLy8gPHN0cm9uZ1xuICAgIE9QRU5fVEFHX1NMQVNIOiBTKyssIC8vIDxzdHJvbmcgL1xuICAgIEFUVFJJQjogUysrLCAvLyA8YVxuICAgIEFUVFJJQl9OQU1FOiBTKyssIC8vIDxhIGZvb1xuICAgIEFUVFJJQl9OQU1FX1NBV19XSElURTogUysrLCAvLyA8YSBmb28gX1xuICAgIEFUVFJJQl9WQUxVRTogUysrLCAvLyA8YSBmb289XG4gICAgQVRUUklCX1ZBTFVFX1FVT1RFRDogUysrLCAvLyA8YSBmb289XCJiYXJcbiAgICBBVFRSSUJfVkFMVUVfQ0xPU0VEOiBTKyssIC8vIDxhIGZvbz1cImJhclwiXG4gICAgQVRUUklCX1ZBTFVFX1VOUVVPVEVEOiBTKyssIC8vIDxhIGZvbz1iYXJcbiAgICBBVFRSSUJfVkFMVUVfRU5USVRZX1E6IFMrKywgLy8gPGZvbyBiYXI9XCImcXVvdDtcIlxuICAgIEFUVFJJQl9WQUxVRV9FTlRJVFlfVTogUysrLCAvLyA8Zm9vIGJhcj0mcXVvdFxuICAgIENMT1NFX1RBRzogUysrLCAvLyA8L2FcbiAgICBDTE9TRV9UQUdfU0FXX1dISVRFOiBTKyssIC8vIDwvYSAgID5cbiAgICBTQ1JJUFQ6IFMrKywgLy8gPHNjcmlwdD4gLi4uXG4gICAgU0NSSVBUX0VORElORzogUysrIC8vIDxzY3JpcHQ+IC4uLiA8XG4gIH1cblxuICBzYXguWE1MX0VOVElUSUVTID0ge1xuICAgICdhbXAnOiAnJicsXG4gICAgJ2d0JzogJz4nLFxuICAgICdsdCc6ICc8JyxcbiAgICAncXVvdCc6ICdcIicsXG4gICAgJ2Fwb3MnOiBcIidcIlxuICB9XG5cbiAgc2F4LkVOVElUSUVTID0ge1xuICAgICdhbXAnOiAnJicsXG4gICAgJ2d0JzogJz4nLFxuICAgICdsdCc6ICc8JyxcbiAgICAncXVvdCc6ICdcIicsXG4gICAgJ2Fwb3MnOiBcIidcIixcbiAgICAnQUVsaWcnOiAxOTgsXG4gICAgJ0FhY3V0ZSc6IDE5MyxcbiAgICAnQWNpcmMnOiAxOTQsXG4gICAgJ0FncmF2ZSc6IDE5MixcbiAgICAnQXJpbmcnOiAxOTcsXG4gICAgJ0F0aWxkZSc6IDE5NSxcbiAgICAnQXVtbCc6IDE5NixcbiAgICAnQ2NlZGlsJzogMTk5LFxuICAgICdFVEgnOiAyMDgsXG4gICAgJ0VhY3V0ZSc6IDIwMSxcbiAgICAnRWNpcmMnOiAyMDIsXG4gICAgJ0VncmF2ZSc6IDIwMCxcbiAgICAnRXVtbCc6IDIwMyxcbiAgICAnSWFjdXRlJzogMjA1LFxuICAgICdJY2lyYyc6IDIwNixcbiAgICAnSWdyYXZlJzogMjA0LFxuICAgICdJdW1sJzogMjA3LFxuICAgICdOdGlsZGUnOiAyMDksXG4gICAgJ09hY3V0ZSc6IDIxMSxcbiAgICAnT2NpcmMnOiAyMTIsXG4gICAgJ09ncmF2ZSc6IDIxMCxcbiAgICAnT3NsYXNoJzogMjE2LFxuICAgICdPdGlsZGUnOiAyMTMsXG4gICAgJ091bWwnOiAyMTQsXG4gICAgJ1RIT1JOJzogMjIyLFxuICAgICdVYWN1dGUnOiAyMTgsXG4gICAgJ1VjaXJjJzogMjE5LFxuICAgICdVZ3JhdmUnOiAyMTcsXG4gICAgJ1V1bWwnOiAyMjAsXG4gICAgJ1lhY3V0ZSc6IDIyMSxcbiAgICAnYWFjdXRlJzogMjI1LFxuICAgICdhY2lyYyc6IDIyNixcbiAgICAnYWVsaWcnOiAyMzAsXG4gICAgJ2FncmF2ZSc6IDIyNCxcbiAgICAnYXJpbmcnOiAyMjksXG4gICAgJ2F0aWxkZSc6IDIyNyxcbiAgICAnYXVtbCc6IDIyOCxcbiAgICAnY2NlZGlsJzogMjMxLFxuICAgICdlYWN1dGUnOiAyMzMsXG4gICAgJ2VjaXJjJzogMjM0LFxuICAgICdlZ3JhdmUnOiAyMzIsXG4gICAgJ2V0aCc6IDI0MCxcbiAgICAnZXVtbCc6IDIzNSxcbiAgICAnaWFjdXRlJzogMjM3LFxuICAgICdpY2lyYyc6IDIzOCxcbiAgICAnaWdyYXZlJzogMjM2LFxuICAgICdpdW1sJzogMjM5LFxuICAgICdudGlsZGUnOiAyNDEsXG4gICAgJ29hY3V0ZSc6IDI0MyxcbiAgICAnb2NpcmMnOiAyNDQsXG4gICAgJ29ncmF2ZSc6IDI0MixcbiAgICAnb3NsYXNoJzogMjQ4LFxuICAgICdvdGlsZGUnOiAyNDUsXG4gICAgJ291bWwnOiAyNDYsXG4gICAgJ3N6bGlnJzogMjIzLFxuICAgICd0aG9ybic6IDI1NCxcbiAgICAndWFjdXRlJzogMjUwLFxuICAgICd1Y2lyYyc6IDI1MSxcbiAgICAndWdyYXZlJzogMjQ5LFxuICAgICd1dW1sJzogMjUyLFxuICAgICd5YWN1dGUnOiAyNTMsXG4gICAgJ3l1bWwnOiAyNTUsXG4gICAgJ2NvcHknOiAxNjksXG4gICAgJ3JlZyc6IDE3NCxcbiAgICAnbmJzcCc6IDE2MCxcbiAgICAnaWV4Y2wnOiAxNjEsXG4gICAgJ2NlbnQnOiAxNjIsXG4gICAgJ3BvdW5kJzogMTYzLFxuICAgICdjdXJyZW4nOiAxNjQsXG4gICAgJ3llbic6IDE2NSxcbiAgICAnYnJ2YmFyJzogMTY2LFxuICAgICdzZWN0JzogMTY3LFxuICAgICd1bWwnOiAxNjgsXG4gICAgJ29yZGYnOiAxNzAsXG4gICAgJ2xhcXVvJzogMTcxLFxuICAgICdub3QnOiAxNzIsXG4gICAgJ3NoeSc6IDE3MyxcbiAgICAnbWFjcic6IDE3NSxcbiAgICAnZGVnJzogMTc2LFxuICAgICdwbHVzbW4nOiAxNzcsXG4gICAgJ3N1cDEnOiAxODUsXG4gICAgJ3N1cDInOiAxNzgsXG4gICAgJ3N1cDMnOiAxNzksXG4gICAgJ2FjdXRlJzogMTgwLFxuICAgICdtaWNybyc6IDE4MSxcbiAgICAncGFyYSc6IDE4MixcbiAgICAnbWlkZG90JzogMTgzLFxuICAgICdjZWRpbCc6IDE4NCxcbiAgICAnb3JkbSc6IDE4NixcbiAgICAncmFxdW8nOiAxODcsXG4gICAgJ2ZyYWMxNCc6IDE4OCxcbiAgICAnZnJhYzEyJzogMTg5LFxuICAgICdmcmFjMzQnOiAxOTAsXG4gICAgJ2lxdWVzdCc6IDE5MSxcbiAgICAndGltZXMnOiAyMTUsXG4gICAgJ2RpdmlkZSc6IDI0NyxcbiAgICAnT0VsaWcnOiAzMzgsXG4gICAgJ29lbGlnJzogMzM5LFxuICAgICdTY2Fyb24nOiAzNTIsXG4gICAgJ3NjYXJvbic6IDM1MyxcbiAgICAnWXVtbCc6IDM3NixcbiAgICAnZm5vZic6IDQwMixcbiAgICAnY2lyYyc6IDcxMCxcbiAgICAndGlsZGUnOiA3MzIsXG4gICAgJ0FscGhhJzogOTEzLFxuICAgICdCZXRhJzogOTE0LFxuICAgICdHYW1tYSc6IDkxNSxcbiAgICAnRGVsdGEnOiA5MTYsXG4gICAgJ0Vwc2lsb24nOiA5MTcsXG4gICAgJ1pldGEnOiA5MTgsXG4gICAgJ0V0YSc6IDkxOSxcbiAgICAnVGhldGEnOiA5MjAsXG4gICAgJ0lvdGEnOiA5MjEsXG4gICAgJ0thcHBhJzogOTIyLFxuICAgICdMYW1iZGEnOiA5MjMsXG4gICAgJ011JzogOTI0LFxuICAgICdOdSc6IDkyNSxcbiAgICAnWGknOiA5MjYsXG4gICAgJ09taWNyb24nOiA5MjcsXG4gICAgJ1BpJzogOTI4LFxuICAgICdSaG8nOiA5MjksXG4gICAgJ1NpZ21hJzogOTMxLFxuICAgICdUYXUnOiA5MzIsXG4gICAgJ1Vwc2lsb24nOiA5MzMsXG4gICAgJ1BoaSc6IDkzNCxcbiAgICAnQ2hpJzogOTM1LFxuICAgICdQc2knOiA5MzYsXG4gICAgJ09tZWdhJzogOTM3LFxuICAgICdhbHBoYSc6IDk0NSxcbiAgICAnYmV0YSc6IDk0NixcbiAgICAnZ2FtbWEnOiA5NDcsXG4gICAgJ2RlbHRhJzogOTQ4LFxuICAgICdlcHNpbG9uJzogOTQ5LFxuICAgICd6ZXRhJzogOTUwLFxuICAgICdldGEnOiA5NTEsXG4gICAgJ3RoZXRhJzogOTUyLFxuICAgICdpb3RhJzogOTUzLFxuICAgICdrYXBwYSc6IDk1NCxcbiAgICAnbGFtYmRhJzogOTU1LFxuICAgICdtdSc6IDk1NixcbiAgICAnbnUnOiA5NTcsXG4gICAgJ3hpJzogOTU4LFxuICAgICdvbWljcm9uJzogOTU5LFxuICAgICdwaSc6IDk2MCxcbiAgICAncmhvJzogOTYxLFxuICAgICdzaWdtYWYnOiA5NjIsXG4gICAgJ3NpZ21hJzogOTYzLFxuICAgICd0YXUnOiA5NjQsXG4gICAgJ3Vwc2lsb24nOiA5NjUsXG4gICAgJ3BoaSc6IDk2NixcbiAgICAnY2hpJzogOTY3LFxuICAgICdwc2knOiA5NjgsXG4gICAgJ29tZWdhJzogOTY5LFxuICAgICd0aGV0YXN5bSc6IDk3NyxcbiAgICAndXBzaWgnOiA5NzgsXG4gICAgJ3Bpdic6IDk4MixcbiAgICAnZW5zcCc6IDgxOTQsXG4gICAgJ2Vtc3AnOiA4MTk1LFxuICAgICd0aGluc3AnOiA4MjAxLFxuICAgICd6d25qJzogODIwNCxcbiAgICAnendqJzogODIwNSxcbiAgICAnbHJtJzogODIwNixcbiAgICAncmxtJzogODIwNyxcbiAgICAnbmRhc2gnOiA4MjExLFxuICAgICdtZGFzaCc6IDgyMTIsXG4gICAgJ2xzcXVvJzogODIxNixcbiAgICAncnNxdW8nOiA4MjE3LFxuICAgICdzYnF1byc6IDgyMTgsXG4gICAgJ2xkcXVvJzogODIyMCxcbiAgICAncmRxdW8nOiA4MjIxLFxuICAgICdiZHF1byc6IDgyMjIsXG4gICAgJ2RhZ2dlcic6IDgyMjQsXG4gICAgJ0RhZ2dlcic6IDgyMjUsXG4gICAgJ2J1bGwnOiA4MjI2LFxuICAgICdoZWxsaXAnOiA4MjMwLFxuICAgICdwZXJtaWwnOiA4MjQwLFxuICAgICdwcmltZSc6IDgyNDIsXG4gICAgJ1ByaW1lJzogODI0MyxcbiAgICAnbHNhcXVvJzogODI0OSxcbiAgICAncnNhcXVvJzogODI1MCxcbiAgICAnb2xpbmUnOiA4MjU0LFxuICAgICdmcmFzbCc6IDgyNjAsXG4gICAgJ2V1cm8nOiA4MzY0LFxuICAgICdpbWFnZSc6IDg0NjUsXG4gICAgJ3dlaWVycCc6IDg0NzIsXG4gICAgJ3JlYWwnOiA4NDc2LFxuICAgICd0cmFkZSc6IDg0ODIsXG4gICAgJ2FsZWZzeW0nOiA4NTAxLFxuICAgICdsYXJyJzogODU5MixcbiAgICAndWFycic6IDg1OTMsXG4gICAgJ3JhcnInOiA4NTk0LFxuICAgICdkYXJyJzogODU5NSxcbiAgICAnaGFycic6IDg1OTYsXG4gICAgJ2NyYXJyJzogODYyOSxcbiAgICAnbEFycic6IDg2NTYsXG4gICAgJ3VBcnInOiA4NjU3LFxuICAgICdyQXJyJzogODY1OCxcbiAgICAnZEFycic6IDg2NTksXG4gICAgJ2hBcnInOiA4NjYwLFxuICAgICdmb3JhbGwnOiA4NzA0LFxuICAgICdwYXJ0JzogODcwNixcbiAgICAnZXhpc3QnOiA4NzA3LFxuICAgICdlbXB0eSc6IDg3MDksXG4gICAgJ25hYmxhJzogODcxMSxcbiAgICAnaXNpbic6IDg3MTIsXG4gICAgJ25vdGluJzogODcxMyxcbiAgICAnbmknOiA4NzE1LFxuICAgICdwcm9kJzogODcxOSxcbiAgICAnc3VtJzogODcyMSxcbiAgICAnbWludXMnOiA4NzIyLFxuICAgICdsb3dhc3QnOiA4NzI3LFxuICAgICdyYWRpYyc6IDg3MzAsXG4gICAgJ3Byb3AnOiA4NzMzLFxuICAgICdpbmZpbic6IDg3MzQsXG4gICAgJ2FuZyc6IDg3MzYsXG4gICAgJ2FuZCc6IDg3NDMsXG4gICAgJ29yJzogODc0NCxcbiAgICAnY2FwJzogODc0NSxcbiAgICAnY3VwJzogODc0NixcbiAgICAnaW50JzogODc0NyxcbiAgICAndGhlcmU0JzogODc1NixcbiAgICAnc2ltJzogODc2NCxcbiAgICAnY29uZyc6IDg3NzMsXG4gICAgJ2FzeW1wJzogODc3NixcbiAgICAnbmUnOiA4ODAwLFxuICAgICdlcXVpdic6IDg4MDEsXG4gICAgJ2xlJzogODgwNCxcbiAgICAnZ2UnOiA4ODA1LFxuICAgICdzdWInOiA4ODM0LFxuICAgICdzdXAnOiA4ODM1LFxuICAgICduc3ViJzogODgzNixcbiAgICAnc3ViZSc6IDg4MzgsXG4gICAgJ3N1cGUnOiA4ODM5LFxuICAgICdvcGx1cyc6IDg4NTMsXG4gICAgJ290aW1lcyc6IDg4NTUsXG4gICAgJ3BlcnAnOiA4ODY5LFxuICAgICdzZG90JzogODkwMSxcbiAgICAnbGNlaWwnOiA4OTY4LFxuICAgICdyY2VpbCc6IDg5NjksXG4gICAgJ2xmbG9vcic6IDg5NzAsXG4gICAgJ3JmbG9vcic6IDg5NzEsXG4gICAgJ2xhbmcnOiA5MDAxLFxuICAgICdyYW5nJzogOTAwMixcbiAgICAnbG96JzogOTY3NCxcbiAgICAnc3BhZGVzJzogOTgyNCxcbiAgICAnY2x1YnMnOiA5ODI3LFxuICAgICdoZWFydHMnOiA5ODI5LFxuICAgICdkaWFtcyc6IDk4MzBcbiAgfVxuXG4gIE9iamVjdC5rZXlzKHNheC5FTlRJVElFUykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGUgPSBzYXguRU5USVRJRVNba2V5XVxuICAgIHZhciBzID0gdHlwZW9mIGUgPT09ICdudW1iZXInID8gU3RyaW5nLmZyb21DaGFyQ29kZShlKSA6IGVcbiAgICBzYXguRU5USVRJRVNba2V5XSA9IHNcbiAgfSlcblxuICBmb3IgKHZhciBzIGluIHNheC5TVEFURSkge1xuICAgIHNheC5TVEFURVtzYXguU1RBVEVbc11dID0gc1xuICB9XG5cbiAgLy8gc2hvcnRoYW5kXG4gIFMgPSBzYXguU1RBVEVcblxuICBmdW5jdGlvbiBlbWl0IChwYXJzZXIsIGV2ZW50LCBkYXRhKSB7XG4gICAgcGFyc2VyW2V2ZW50XSAmJiBwYXJzZXJbZXZlbnRdKGRhdGEpXG4gIH1cblxuICBmdW5jdGlvbiBlbWl0Tm9kZSAocGFyc2VyLCBub2RlVHlwZSwgZGF0YSkge1xuICAgIGlmIChwYXJzZXIudGV4dE5vZGUpIGNsb3NlVGV4dChwYXJzZXIpXG4gICAgZW1pdChwYXJzZXIsIG5vZGVUeXBlLCBkYXRhKVxuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2VUZXh0IChwYXJzZXIpIHtcbiAgICBwYXJzZXIudGV4dE5vZGUgPSB0ZXh0b3B0cyhwYXJzZXIub3B0LCBwYXJzZXIudGV4dE5vZGUpXG4gICAgaWYgKHBhcnNlci50ZXh0Tm9kZSkgZW1pdChwYXJzZXIsICdvbnRleHQnLCBwYXJzZXIudGV4dE5vZGUpXG4gICAgcGFyc2VyLnRleHROb2RlID0gJydcbiAgfVxuXG4gIGZ1bmN0aW9uIHRleHRvcHRzIChvcHQsIHRleHQpIHtcbiAgICBpZiAob3B0LnRyaW0pIHRleHQgPSB0ZXh0LnRyaW0oKVxuICAgIGlmIChvcHQubm9ybWFsaXplKSB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHMrL2csICcgJylcbiAgICByZXR1cm4gdGV4dFxuICB9XG5cbiAgZnVuY3Rpb24gZXJyb3IgKHBhcnNlciwgZXIpIHtcbiAgICBjbG9zZVRleHQocGFyc2VyKVxuICAgIGlmIChwYXJzZXIudHJhY2tQb3NpdGlvbikge1xuICAgICAgZXIgKz0gJ1xcbkxpbmU6ICcgKyBwYXJzZXIubGluZSArXG4gICAgICAgICdcXG5Db2x1bW46ICcgKyBwYXJzZXIuY29sdW1uICtcbiAgICAgICAgJ1xcbkNoYXI6ICcgKyBwYXJzZXIuY1xuICAgIH1cbiAgICBlciA9IG5ldyBFcnJvcihlcilcbiAgICBwYXJzZXIuZXJyb3IgPSBlclxuICAgIGVtaXQocGFyc2VyLCAnb25lcnJvcicsIGVyKVxuICAgIHJldHVybiBwYXJzZXJcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuZCAocGFyc2VyKSB7XG4gICAgaWYgKHBhcnNlci5zYXdSb290ICYmICFwYXJzZXIuY2xvc2VkUm9vdCkgc3RyaWN0RmFpbChwYXJzZXIsICdVbmNsb3NlZCByb290IHRhZycpXG4gICAgaWYgKChwYXJzZXIuc3RhdGUgIT09IFMuQkVHSU4pICYmXG4gICAgICAocGFyc2VyLnN0YXRlICE9PSBTLkJFR0lOX1dISVRFU1BBQ0UpICYmXG4gICAgICAocGFyc2VyLnN0YXRlICE9PSBTLlRFWFQpKSB7XG4gICAgICBlcnJvcihwYXJzZXIsICdVbmV4cGVjdGVkIGVuZCcpXG4gICAgfVxuICAgIGNsb3NlVGV4dChwYXJzZXIpXG4gICAgcGFyc2VyLmMgPSAnJ1xuICAgIHBhcnNlci5jbG9zZWQgPSB0cnVlXG4gICAgZW1pdChwYXJzZXIsICdvbmVuZCcpXG4gICAgU0FYUGFyc2VyLmNhbGwocGFyc2VyLCBwYXJzZXIuc3RyaWN0LCBwYXJzZXIub3B0KVxuICAgIHJldHVybiBwYXJzZXJcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0cmljdEZhaWwgKHBhcnNlciwgbWVzc2FnZSkge1xuICAgIGlmICh0eXBlb2YgcGFyc2VyICE9PSAnb2JqZWN0JyB8fCAhKHBhcnNlciBpbnN0YW5jZW9mIFNBWFBhcnNlcikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYmFkIGNhbGwgdG8gc3RyaWN0RmFpbCcpXG4gICAgfVxuICAgIGlmIChwYXJzZXIuc3RyaWN0KSB7XG4gICAgICBlcnJvcihwYXJzZXIsIG1lc3NhZ2UpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbmV3VGFnIChwYXJzZXIpIHtcbiAgICBpZiAoIXBhcnNlci5zdHJpY3QpIHBhcnNlci50YWdOYW1lID0gcGFyc2VyLnRhZ05hbWVbcGFyc2VyLmxvb3NlQ2FzZV0oKVxuICAgIHZhciBwYXJlbnQgPSBwYXJzZXIudGFnc1twYXJzZXIudGFncy5sZW5ndGggLSAxXSB8fCBwYXJzZXJcbiAgICB2YXIgdGFnID0gcGFyc2VyLnRhZyA9IHsgbmFtZTogcGFyc2VyLnRhZ05hbWUsIGF0dHJpYnV0ZXM6IHt9IH1cblxuICAgIC8vIHdpbGwgYmUgb3ZlcnJpZGRlbiBpZiB0YWcgY29udGFpbHMgYW4geG1sbnM9XCJmb29cIiBvciB4bWxuczpmb289XCJiYXJcIlxuICAgIGlmIChwYXJzZXIub3B0LnhtbG5zKSB7XG4gICAgICB0YWcubnMgPSBwYXJlbnQubnNcbiAgICB9XG4gICAgcGFyc2VyLmF0dHJpYkxpc3QubGVuZ3RoID0gMFxuICAgIGVtaXROb2RlKHBhcnNlciwgJ29ub3BlbnRhZ3N0YXJ0JywgdGFnKVxuICB9XG5cbiAgZnVuY3Rpb24gcW5hbWUgKG5hbWUsIGF0dHJpYnV0ZSkge1xuICAgIHZhciBpID0gbmFtZS5pbmRleE9mKCc6JylcbiAgICB2YXIgcXVhbE5hbWUgPSBpIDwgMCA/IFsgJycsIG5hbWUgXSA6IG5hbWUuc3BsaXQoJzonKVxuICAgIHZhciBwcmVmaXggPSBxdWFsTmFtZVswXVxuICAgIHZhciBsb2NhbCA9IHF1YWxOYW1lWzFdXG5cbiAgICAvLyA8eCBcInhtbG5zXCI9XCJodHRwOi8vZm9vXCI+XG4gICAgaWYgKGF0dHJpYnV0ZSAmJiBuYW1lID09PSAneG1sbnMnKSB7XG4gICAgICBwcmVmaXggPSAneG1sbnMnXG4gICAgICBsb2NhbCA9ICcnXG4gICAgfVxuXG4gICAgcmV0dXJuIHsgcHJlZml4OiBwcmVmaXgsIGxvY2FsOiBsb2NhbCB9XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyaWIgKHBhcnNlcikge1xuICAgIGlmICghcGFyc2VyLnN0cmljdCkge1xuICAgICAgcGFyc2VyLmF0dHJpYk5hbWUgPSBwYXJzZXIuYXR0cmliTmFtZVtwYXJzZXIubG9vc2VDYXNlXSgpXG4gICAgfVxuXG4gICAgaWYgKHBhcnNlci5hdHRyaWJMaXN0LmluZGV4T2YocGFyc2VyLmF0dHJpYk5hbWUpICE9PSAtMSB8fFxuICAgICAgcGFyc2VyLnRhZy5hdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KHBhcnNlci5hdHRyaWJOYW1lKSkge1xuICAgICAgcGFyc2VyLmF0dHJpYk5hbWUgPSBwYXJzZXIuYXR0cmliVmFsdWUgPSAnJ1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHBhcnNlci5vcHQueG1sbnMpIHtcbiAgICAgIHZhciBxbiA9IHFuYW1lKHBhcnNlci5hdHRyaWJOYW1lLCB0cnVlKVxuICAgICAgdmFyIHByZWZpeCA9IHFuLnByZWZpeFxuICAgICAgdmFyIGxvY2FsID0gcW4ubG9jYWxcblxuICAgICAgaWYgKHByZWZpeCA9PT0gJ3htbG5zJykge1xuICAgICAgICAvLyBuYW1lc3BhY2UgYmluZGluZyBhdHRyaWJ1dGUuIHB1c2ggdGhlIGJpbmRpbmcgaW50byBzY29wZVxuICAgICAgICBpZiAobG9jYWwgPT09ICd4bWwnICYmIHBhcnNlci5hdHRyaWJWYWx1ZSAhPT0gWE1MX05BTUVTUEFDRSkge1xuICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLFxuICAgICAgICAgICAgJ3htbDogcHJlZml4IG11c3QgYmUgYm91bmQgdG8gJyArIFhNTF9OQU1FU1BBQ0UgKyAnXFxuJyArXG4gICAgICAgICAgICAnQWN0dWFsOiAnICsgcGFyc2VyLmF0dHJpYlZhbHVlKVxuICAgICAgICB9IGVsc2UgaWYgKGxvY2FsID09PSAneG1sbnMnICYmIHBhcnNlci5hdHRyaWJWYWx1ZSAhPT0gWE1MTlNfTkFNRVNQQUNFKSB7XG4gICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsXG4gICAgICAgICAgICAneG1sbnM6IHByZWZpeCBtdXN0IGJlIGJvdW5kIHRvICcgKyBYTUxOU19OQU1FU1BBQ0UgKyAnXFxuJyArXG4gICAgICAgICAgICAnQWN0dWFsOiAnICsgcGFyc2VyLmF0dHJpYlZhbHVlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB0YWcgPSBwYXJzZXIudGFnXG4gICAgICAgICAgdmFyIHBhcmVudCA9IHBhcnNlci50YWdzW3BhcnNlci50YWdzLmxlbmd0aCAtIDFdIHx8IHBhcnNlclxuICAgICAgICAgIGlmICh0YWcubnMgPT09IHBhcmVudC5ucykge1xuICAgICAgICAgICAgdGFnLm5zID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQubnMpXG4gICAgICAgICAgfVxuICAgICAgICAgIHRhZy5uc1tsb2NhbF0gPSBwYXJzZXIuYXR0cmliVmFsdWVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBkZWZlciBvbmF0dHJpYnV0ZSBldmVudHMgdW50aWwgYWxsIGF0dHJpYnV0ZXMgaGF2ZSBiZWVuIHNlZW5cbiAgICAgIC8vIHNvIGFueSBuZXcgYmluZGluZ3MgY2FuIHRha2UgZWZmZWN0LiBwcmVzZXJ2ZSBhdHRyaWJ1dGUgb3JkZXJcbiAgICAgIC8vIHNvIGRlZmVycmVkIGV2ZW50cyBjYW4gYmUgZW1pdHRlZCBpbiBkb2N1bWVudCBvcmRlclxuICAgICAgcGFyc2VyLmF0dHJpYkxpc3QucHVzaChbcGFyc2VyLmF0dHJpYk5hbWUsIHBhcnNlci5hdHRyaWJWYWx1ZV0pXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluIG5vbi14bWxucyBtb2RlLCB3ZSBjYW4gZW1pdCB0aGUgZXZlbnQgcmlnaHQgYXdheVxuICAgICAgcGFyc2VyLnRhZy5hdHRyaWJ1dGVzW3BhcnNlci5hdHRyaWJOYW1lXSA9IHBhcnNlci5hdHRyaWJWYWx1ZVxuICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25hdHRyaWJ1dGUnLCB7XG4gICAgICAgIG5hbWU6IHBhcnNlci5hdHRyaWJOYW1lLFxuICAgICAgICB2YWx1ZTogcGFyc2VyLmF0dHJpYlZhbHVlXG4gICAgICB9KVxuICAgIH1cblxuICAgIHBhcnNlci5hdHRyaWJOYW1lID0gcGFyc2VyLmF0dHJpYlZhbHVlID0gJydcbiAgfVxuXG4gIGZ1bmN0aW9uIG9wZW5UYWcgKHBhcnNlciwgc2VsZkNsb3NpbmcpIHtcbiAgICBpZiAocGFyc2VyLm9wdC54bWxucykge1xuICAgICAgLy8gZW1pdCBuYW1lc3BhY2UgYmluZGluZyBldmVudHNcbiAgICAgIHZhciB0YWcgPSBwYXJzZXIudGFnXG5cbiAgICAgIC8vIGFkZCBuYW1lc3BhY2UgaW5mbyB0byB0YWdcbiAgICAgIHZhciBxbiA9IHFuYW1lKHBhcnNlci50YWdOYW1lKVxuICAgICAgdGFnLnByZWZpeCA9IHFuLnByZWZpeFxuICAgICAgdGFnLmxvY2FsID0gcW4ubG9jYWxcbiAgICAgIHRhZy51cmkgPSB0YWcubnNbcW4ucHJlZml4XSB8fCAnJ1xuXG4gICAgICBpZiAodGFnLnByZWZpeCAmJiAhdGFnLnVyaSkge1xuICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ1VuYm91bmQgbmFtZXNwYWNlIHByZWZpeDogJyArXG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkocGFyc2VyLnRhZ05hbWUpKVxuICAgICAgICB0YWcudXJpID0gcW4ucHJlZml4XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJlbnQgPSBwYXJzZXIudGFnc1twYXJzZXIudGFncy5sZW5ndGggLSAxXSB8fCBwYXJzZXJcbiAgICAgIGlmICh0YWcubnMgJiYgcGFyZW50Lm5zICE9PSB0YWcubnMpIHtcbiAgICAgICAgT2JqZWN0LmtleXModGFnLm5zKS5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25vcGVubmFtZXNwYWNlJywge1xuICAgICAgICAgICAgcHJlZml4OiBwLFxuICAgICAgICAgICAgdXJpOiB0YWcubnNbcF1cbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICAvLyBoYW5kbGUgZGVmZXJyZWQgb25hdHRyaWJ1dGUgZXZlbnRzXG4gICAgICAvLyBOb3RlOiBkbyBub3QgYXBwbHkgZGVmYXVsdCBucyB0byBhdHRyaWJ1dGVzOlxuICAgICAgLy8gICBodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMteG1sLW5hbWVzLyNkZWZhdWx0aW5nXG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHBhcnNlci5hdHRyaWJMaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgbnYgPSBwYXJzZXIuYXR0cmliTGlzdFtpXVxuICAgICAgICB2YXIgbmFtZSA9IG52WzBdXG4gICAgICAgIHZhciB2YWx1ZSA9IG52WzFdXG4gICAgICAgIHZhciBxdWFsTmFtZSA9IHFuYW1lKG5hbWUsIHRydWUpXG4gICAgICAgIHZhciBwcmVmaXggPSBxdWFsTmFtZS5wcmVmaXhcbiAgICAgICAgdmFyIGxvY2FsID0gcXVhbE5hbWUubG9jYWxcbiAgICAgICAgdmFyIHVyaSA9IHByZWZpeCA9PT0gJycgPyAnJyA6ICh0YWcubnNbcHJlZml4XSB8fCAnJylcbiAgICAgICAgdmFyIGEgPSB7XG4gICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgcHJlZml4OiBwcmVmaXgsXG4gICAgICAgICAgbG9jYWw6IGxvY2FsLFxuICAgICAgICAgIHVyaTogdXJpXG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiB0aGVyZSdzIGFueSBhdHRyaWJ1dGVzIHdpdGggYW4gdW5kZWZpbmVkIG5hbWVzcGFjZSxcbiAgICAgICAgLy8gdGhlbiBmYWlsIG9uIHRoZW0gbm93LlxuICAgICAgICBpZiAocHJlZml4ICYmIHByZWZpeCAhPT0gJ3htbG5zJyAmJiAhdXJpKSB7XG4gICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdVbmJvdW5kIG5hbWVzcGFjZSBwcmVmaXg6ICcgK1xuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkocHJlZml4KSlcbiAgICAgICAgICBhLnVyaSA9IHByZWZpeFxuICAgICAgICB9XG4gICAgICAgIHBhcnNlci50YWcuYXR0cmlidXRlc1tuYW1lXSA9IGFcbiAgICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25hdHRyaWJ1dGUnLCBhKVxuICAgICAgfVxuICAgICAgcGFyc2VyLmF0dHJpYkxpc3QubGVuZ3RoID0gMFxuICAgIH1cblxuICAgIHBhcnNlci50YWcuaXNTZWxmQ2xvc2luZyA9ICEhc2VsZkNsb3NpbmdcblxuICAgIC8vIHByb2Nlc3MgdGhlIHRhZ1xuICAgIHBhcnNlci5zYXdSb290ID0gdHJ1ZVxuICAgIHBhcnNlci50YWdzLnB1c2gocGFyc2VyLnRhZylcbiAgICBlbWl0Tm9kZShwYXJzZXIsICdvbm9wZW50YWcnLCBwYXJzZXIudGFnKVxuICAgIGlmICghc2VsZkNsb3NpbmcpIHtcbiAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgPHNjcmlwdD4gaW4gbm9uLXN0cmljdCBtb2RlLlxuICAgICAgaWYgKCFwYXJzZXIubm9zY3JpcHQgJiYgcGFyc2VyLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3NjcmlwdCcpIHtcbiAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TQ1JJUFRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVFxuICAgICAgfVxuICAgICAgcGFyc2VyLnRhZyA9IG51bGxcbiAgICAgIHBhcnNlci50YWdOYW1lID0gJydcbiAgICB9XG4gICAgcGFyc2VyLmF0dHJpYk5hbWUgPSBwYXJzZXIuYXR0cmliVmFsdWUgPSAnJ1xuICAgIHBhcnNlci5hdHRyaWJMaXN0Lmxlbmd0aCA9IDBcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3NlVGFnIChwYXJzZXIpIHtcbiAgICBpZiAoIXBhcnNlci50YWdOYW1lKSB7XG4gICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ1dlaXJkIGVtcHR5IGNsb3NlIHRhZy4nKVxuICAgICAgcGFyc2VyLnRleHROb2RlICs9ICc8Lz4nXG4gICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFRcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChwYXJzZXIuc2NyaXB0KSB7XG4gICAgICBpZiAocGFyc2VyLnRhZ05hbWUgIT09ICdzY3JpcHQnKSB7XG4gICAgICAgIHBhcnNlci5zY3JpcHQgKz0gJzwvJyArIHBhcnNlci50YWdOYW1lICsgJz4nXG4gICAgICAgIHBhcnNlci50YWdOYW1lID0gJydcbiAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TQ1JJUFRcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbnNjcmlwdCcsIHBhcnNlci5zY3JpcHQpXG4gICAgICBwYXJzZXIuc2NyaXB0ID0gJydcbiAgICB9XG5cbiAgICAvLyBmaXJzdCBtYWtlIHN1cmUgdGhhdCB0aGUgY2xvc2luZyB0YWcgYWN0dWFsbHkgZXhpc3RzLlxuICAgIC8vIDxhPjxiPjwvYz48L2I+PC9hPiB3aWxsIGNsb3NlIGV2ZXJ5dGhpbmcsIG90aGVyd2lzZS5cbiAgICB2YXIgdCA9IHBhcnNlci50YWdzLmxlbmd0aFxuICAgIHZhciB0YWdOYW1lID0gcGFyc2VyLnRhZ05hbWVcbiAgICBpZiAoIXBhcnNlci5zdHJpY3QpIHtcbiAgICAgIHRhZ05hbWUgPSB0YWdOYW1lW3BhcnNlci5sb29zZUNhc2VdKClcbiAgICB9XG4gICAgdmFyIGNsb3NlVG8gPSB0YWdOYW1lXG4gICAgd2hpbGUgKHQtLSkge1xuICAgICAgdmFyIGNsb3NlID0gcGFyc2VyLnRhZ3NbdF1cbiAgICAgIGlmIChjbG9zZS5uYW1lICE9PSBjbG9zZVRvKSB7XG4gICAgICAgIC8vIGZhaWwgdGhlIGZpcnN0IHRpbWUgaW4gc3RyaWN0IG1vZGVcbiAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdVbmV4cGVjdGVkIGNsb3NlIHRhZycpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRpZG4ndCBmaW5kIGl0LiAgd2UgYWxyZWFkeSBmYWlsZWQgZm9yIHN0cmljdCwgc28ganVzdCBhYm9ydC5cbiAgICBpZiAodCA8IDApIHtcbiAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnVW5tYXRjaGVkIGNsb3NpbmcgdGFnOiAnICsgcGFyc2VyLnRhZ05hbWUpXG4gICAgICBwYXJzZXIudGV4dE5vZGUgKz0gJzwvJyArIHBhcnNlci50YWdOYW1lICsgJz4nXG4gICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFRcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBwYXJzZXIudGFnTmFtZSA9IHRhZ05hbWVcbiAgICB2YXIgcyA9IHBhcnNlci50YWdzLmxlbmd0aFxuICAgIHdoaWxlIChzLS0gPiB0KSB7XG4gICAgICB2YXIgdGFnID0gcGFyc2VyLnRhZyA9IHBhcnNlci50YWdzLnBvcCgpXG4gICAgICBwYXJzZXIudGFnTmFtZSA9IHBhcnNlci50YWcubmFtZVxuICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25jbG9zZXRhZycsIHBhcnNlci50YWdOYW1lKVxuXG4gICAgICB2YXIgeCA9IHt9XG4gICAgICBmb3IgKHZhciBpIGluIHRhZy5ucykge1xuICAgICAgICB4W2ldID0gdGFnLm5zW2ldXG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJlbnQgPSBwYXJzZXIudGFnc1twYXJzZXIudGFncy5sZW5ndGggLSAxXSB8fCBwYXJzZXJcbiAgICAgIGlmIChwYXJzZXIub3B0LnhtbG5zICYmIHRhZy5ucyAhPT0gcGFyZW50Lm5zKSB7XG4gICAgICAgIC8vIHJlbW92ZSBuYW1lc3BhY2UgYmluZGluZ3MgaW50cm9kdWNlZCBieSB0YWdcbiAgICAgICAgT2JqZWN0LmtleXModGFnLm5zKS5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgICAgdmFyIG4gPSB0YWcubnNbcF1cbiAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbmNsb3NlbmFtZXNwYWNlJywgeyBwcmVmaXg6IHAsIHVyaTogbiB9KVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodCA9PT0gMCkgcGFyc2VyLmNsb3NlZFJvb3QgPSB0cnVlXG4gICAgcGFyc2VyLnRhZ05hbWUgPSBwYXJzZXIuYXR0cmliVmFsdWUgPSBwYXJzZXIuYXR0cmliTmFtZSA9ICcnXG4gICAgcGFyc2VyLmF0dHJpYkxpc3QubGVuZ3RoID0gMFxuICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVFxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VFbnRpdHkgKHBhcnNlcikge1xuICAgIHZhciBlbnRpdHkgPSBwYXJzZXIuZW50aXR5XG4gICAgdmFyIGVudGl0eUxDID0gZW50aXR5LnRvTG93ZXJDYXNlKClcbiAgICB2YXIgbnVtXG4gICAgdmFyIG51bVN0ciA9ICcnXG5cbiAgICBpZiAocGFyc2VyLkVOVElUSUVTW2VudGl0eV0pIHtcbiAgICAgIHJldHVybiBwYXJzZXIuRU5USVRJRVNbZW50aXR5XVxuICAgIH1cbiAgICBpZiAocGFyc2VyLkVOVElUSUVTW2VudGl0eUxDXSkge1xuICAgICAgcmV0dXJuIHBhcnNlci5FTlRJVElFU1tlbnRpdHlMQ11cbiAgICB9XG4gICAgZW50aXR5ID0gZW50aXR5TENcbiAgICBpZiAoZW50aXR5LmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgICBpZiAoZW50aXR5LmNoYXJBdCgxKSA9PT0gJ3gnKSB7XG4gICAgICAgIGVudGl0eSA9IGVudGl0eS5zbGljZSgyKVxuICAgICAgICBudW0gPSBwYXJzZUludChlbnRpdHksIDE2KVxuICAgICAgICBudW1TdHIgPSBudW0udG9TdHJpbmcoMTYpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbnRpdHkgPSBlbnRpdHkuc2xpY2UoMSlcbiAgICAgICAgbnVtID0gcGFyc2VJbnQoZW50aXR5LCAxMClcbiAgICAgICAgbnVtU3RyID0gbnVtLnRvU3RyaW5nKDEwKVxuICAgICAgfVxuICAgIH1cbiAgICBlbnRpdHkgPSBlbnRpdHkucmVwbGFjZSgvXjArLywgJycpXG4gICAgaWYgKG51bVN0ci50b0xvd2VyQ2FzZSgpICE9PSBlbnRpdHkpIHtcbiAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnSW52YWxpZCBjaGFyYWN0ZXIgZW50aXR5JylcbiAgICAgIHJldHVybiAnJicgKyBwYXJzZXIuZW50aXR5ICsgJzsnXG4gICAgfVxuXG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KG51bSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGJlZ2luV2hpdGVTcGFjZSAocGFyc2VyLCBjKSB7XG4gICAgaWYgKGMgPT09ICc8Jykge1xuICAgICAgcGFyc2VyLnN0YXRlID0gUy5PUEVOX1dBS0FcbiAgICAgIHBhcnNlci5zdGFydFRhZ1Bvc2l0aW9uID0gcGFyc2VyLnBvc2l0aW9uXG4gICAgfSBlbHNlIGlmIChub3Qod2hpdGVzcGFjZSwgYykpIHtcbiAgICAgIC8vIGhhdmUgdG8gcHJvY2VzcyB0aGlzIGFzIGEgdGV4dCBub2RlLlxuICAgICAgLy8gd2VpcmQsIGJ1dCBoYXBwZW5zLlxuICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdOb24td2hpdGVzcGFjZSBiZWZvcmUgZmlyc3QgdGFnLicpXG4gICAgICBwYXJzZXIudGV4dE5vZGUgPSBjXG4gICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFRcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGFyQXQgKGNodW5rLCBpKSB7XG4gICAgdmFyIHJlc3VsdCA9ICcnXG4gICAgaWYgKGkgPCBjaHVuay5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdCA9IGNodW5rLmNoYXJBdChpKVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBmdW5jdGlvbiB3cml0ZSAoY2h1bmspIHtcbiAgICB2YXIgcGFyc2VyID0gdGhpc1xuICAgIGlmICh0aGlzLmVycm9yKSB7XG4gICAgICB0aHJvdyB0aGlzLmVycm9yXG4gICAgfVxuICAgIGlmIChwYXJzZXIuY2xvc2VkKSB7XG4gICAgICByZXR1cm4gZXJyb3IocGFyc2VyLFxuICAgICAgICAnQ2Fubm90IHdyaXRlIGFmdGVyIGNsb3NlLiBBc3NpZ24gYW4gb25yZWFkeSBoYW5kbGVyLicpXG4gICAgfVxuICAgIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGVuZChwYXJzZXIpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgY2h1bmsgPT09ICdvYmplY3QnKSB7XG4gICAgICBjaHVuayA9IGNodW5rLnRvU3RyaW5nKClcbiAgICB9XG4gICAgdmFyIGkgPSAwXG4gICAgdmFyIGMgPSAnJ1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBjID0gY2hhckF0KGNodW5rLCBpKyspXG4gICAgICBwYXJzZXIuYyA9IGNcbiAgICAgIGlmICghYykge1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgaWYgKHBhcnNlci50cmFja1Bvc2l0aW9uKSB7XG4gICAgICAgIHBhcnNlci5wb3NpdGlvbisrXG4gICAgICAgIGlmIChjID09PSAnXFxuJykge1xuICAgICAgICAgIHBhcnNlci5saW5lKytcbiAgICAgICAgICBwYXJzZXIuY29sdW1uID0gMFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcnNlci5jb2x1bW4rK1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKHBhcnNlci5zdGF0ZSkge1xuICAgICAgICBjYXNlIFMuQkVHSU46XG4gICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5CRUdJTl9XSElURVNQQUNFXG4gICAgICAgICAgaWYgKGMgPT09ICdcXHVGRUZGJykge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgICAgYmVnaW5XaGl0ZVNwYWNlKHBhcnNlciwgYylcbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5CRUdJTl9XSElURVNQQUNFOlxuICAgICAgICAgIGJlZ2luV2hpdGVTcGFjZShwYXJzZXIsIGMpXG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuVEVYVDpcbiAgICAgICAgICBpZiAocGFyc2VyLnNhd1Jvb3QgJiYgIXBhcnNlci5jbG9zZWRSb290KSB7XG4gICAgICAgICAgICB2YXIgc3RhcnRpID0gaSAtIDFcbiAgICAgICAgICAgIHdoaWxlIChjICYmIGMgIT09ICc8JyAmJiBjICE9PSAnJicpIHtcbiAgICAgICAgICAgICAgYyA9IGNoYXJBdChjaHVuaywgaSsrKVxuICAgICAgICAgICAgICBpZiAoYyAmJiBwYXJzZXIudHJhY2tQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIHBhcnNlci5wb3NpdGlvbisrXG4gICAgICAgICAgICAgICAgaWYgKGMgPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgICBwYXJzZXIubGluZSsrXG4gICAgICAgICAgICAgICAgICBwYXJzZXIuY29sdW1uID0gMFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwYXJzZXIuY29sdW1uKytcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcnNlci50ZXh0Tm9kZSArPSBjaHVuay5zdWJzdHJpbmcoc3RhcnRpLCBpIC0gMSlcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGMgPT09ICc8JyAmJiAhKHBhcnNlci5zYXdSb290ICYmIHBhcnNlci5jbG9zZWRSb290ICYmICFwYXJzZXIuc3RyaWN0KSkge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5PUEVOX1dBS0FcbiAgICAgICAgICAgIHBhcnNlci5zdGFydFRhZ1Bvc2l0aW9uID0gcGFyc2VyLnBvc2l0aW9uXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChub3Qod2hpdGVzcGFjZSwgYykgJiYgKCFwYXJzZXIuc2F3Um9vdCB8fCBwYXJzZXIuY2xvc2VkUm9vdCkpIHtcbiAgICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdUZXh0IGRhdGEgb3V0c2lkZSBvZiByb290IG5vZGUuJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjID09PSAnJicpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUX0VOVElUWVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnRleHROb2RlICs9IGNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuU0NSSVBUOlxuICAgICAgICAgIC8vIG9ubHkgbm9uLXN0cmljdFxuICAgICAgICAgIGlmIChjID09PSAnPCcpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuU0NSSVBUX0VORElOR1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIuc2NyaXB0ICs9IGNcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuU0NSSVBUX0VORElORzpcbiAgICAgICAgICBpZiAoYyA9PT0gJy8nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNMT1NFX1RBR1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIuc2NyaXB0ICs9ICc8JyArIGNcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuU0NSSVBUXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLk9QRU5fV0FLQTpcbiAgICAgICAgICAvLyBlaXRoZXIgYSAvLCA/LCAhLCBvciB0ZXh0IGlzIGNvbWluZyBuZXh0LlxuICAgICAgICAgIGlmIChjID09PSAnIScpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuU0dNTF9ERUNMXG4gICAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgPSAnJ1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXMod2hpdGVzcGFjZSwgYykpIHtcbiAgICAgICAgICAgIC8vIHdhaXQgZm9yIGl0Li4uXG4gICAgICAgICAgfSBlbHNlIGlmIChpcyhuYW1lU3RhcnQsIGMpKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLk9QRU5fVEFHXG4gICAgICAgICAgICBwYXJzZXIudGFnTmFtZSA9IGNcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICcvJykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DTE9TRV9UQUdcbiAgICAgICAgICAgIHBhcnNlci50YWdOYW1lID0gJydcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICc/Jykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5QUk9DX0lOU1RcbiAgICAgICAgICAgIHBhcnNlci5wcm9jSW5zdE5hbWUgPSBwYXJzZXIucHJvY0luc3RCb2R5ID0gJydcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdVbmVuY29kZWQgPCcpXG4gICAgICAgICAgICAvLyBpZiB0aGVyZSB3YXMgc29tZSB3aGl0ZXNwYWNlLCB0aGVuIGFkZCB0aGF0IGluLlxuICAgICAgICAgICAgaWYgKHBhcnNlci5zdGFydFRhZ1Bvc2l0aW9uICsgMSA8IHBhcnNlci5wb3NpdGlvbikge1xuICAgICAgICAgICAgICB2YXIgcGFkID0gcGFyc2VyLnBvc2l0aW9uIC0gcGFyc2VyLnN0YXJ0VGFnUG9zaXRpb25cbiAgICAgICAgICAgICAgYyA9IG5ldyBBcnJheShwYWQpLmpvaW4oJyAnKSArIGNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcnNlci50ZXh0Tm9kZSArPSAnPCcgKyBjXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFRcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuU0dNTF9ERUNMOlxuICAgICAgICAgIGlmICgocGFyc2VyLnNnbWxEZWNsICsgYykudG9VcHBlckNhc2UoKSA9PT0gQ0RBVEEpIHtcbiAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29ub3BlbmNkYXRhJylcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ0RBVEFcbiAgICAgICAgICAgIHBhcnNlci5zZ21sRGVjbCA9ICcnXG4gICAgICAgICAgICBwYXJzZXIuY2RhdGEgPSAnJ1xuICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VyLnNnbWxEZWNsICsgYyA9PT0gJy0tJykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DT01NRU5UXG4gICAgICAgICAgICBwYXJzZXIuY29tbWVudCA9ICcnXG4gICAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgPSAnJ1xuICAgICAgICAgIH0gZWxzZSBpZiAoKHBhcnNlci5zZ21sRGVjbCArIGMpLnRvVXBwZXJDYXNlKCkgPT09IERPQ1RZUEUpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRVxuICAgICAgICAgICAgaWYgKHBhcnNlci5kb2N0eXBlIHx8IHBhcnNlci5zYXdSb290KSB7XG4gICAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLFxuICAgICAgICAgICAgICAgICdJbmFwcHJvcHJpYXRlbHkgbG9jYXRlZCBkb2N0eXBlIGRlY2xhcmF0aW9uJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcnNlci5kb2N0eXBlID0gJydcbiAgICAgICAgICAgIHBhcnNlci5zZ21sRGVjbCA9ICcnXG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnPicpIHtcbiAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uc2dtbGRlY2xhcmF0aW9uJywgcGFyc2VyLnNnbWxEZWNsKVxuICAgICAgICAgICAgcGFyc2VyLnNnbWxEZWNsID0gJydcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVFxuICAgICAgICAgIH0gZWxzZSBpZiAoaXMocXVvdGUsIGMpKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlNHTUxfREVDTF9RVU9URURcbiAgICAgICAgICAgIHBhcnNlci5zZ21sRGVjbCArPSBjXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5zZ21sRGVjbCArPSBjXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLlNHTUxfREVDTF9RVU9URUQ6XG4gICAgICAgICAgaWYgKGMgPT09IHBhcnNlci5xKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlNHTUxfREVDTFxuICAgICAgICAgICAgcGFyc2VyLnEgPSAnJ1xuICAgICAgICAgIH1cbiAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgKz0gY1xuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkRPQ1RZUEU6XG4gICAgICAgICAgaWYgKGMgPT09ICc+Jykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUXG4gICAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbmRvY3R5cGUnLCBwYXJzZXIuZG9jdHlwZSlcbiAgICAgICAgICAgIHBhcnNlci5kb2N0eXBlID0gdHJ1ZSAvLyBqdXN0IHJlbWVtYmVyIHRoYXQgd2Ugc2F3IGl0LlxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIuZG9jdHlwZSArPSBjXG4gICAgICAgICAgICBpZiAoYyA9PT0gJ1snKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRV9EVERcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXMocXVvdGUsIGMpKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRV9RVU9URURcbiAgICAgICAgICAgICAgcGFyc2VyLnEgPSBjXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkRPQ1RZUEVfUVVPVEVEOlxuICAgICAgICAgIHBhcnNlci5kb2N0eXBlICs9IGNcbiAgICAgICAgICBpZiAoYyA9PT0gcGFyc2VyLnEpIHtcbiAgICAgICAgICAgIHBhcnNlci5xID0gJydcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5ET0NUWVBFX0RURDpcbiAgICAgICAgICBwYXJzZXIuZG9jdHlwZSArPSBjXG4gICAgICAgICAgaWYgKGMgPT09ICddJykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5ET0NUWVBFXG4gICAgICAgICAgfSBlbHNlIGlmIChpcyhxdW90ZSwgYykpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRV9EVERfUVVPVEVEXG4gICAgICAgICAgICBwYXJzZXIucSA9IGNcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuRE9DVFlQRV9EVERfUVVPVEVEOlxuICAgICAgICAgIHBhcnNlci5kb2N0eXBlICs9IGNcbiAgICAgICAgICBpZiAoYyA9PT0gcGFyc2VyLnEpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRV9EVERcbiAgICAgICAgICAgIHBhcnNlci5xID0gJydcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQ09NTUVOVDpcbiAgICAgICAgICBpZiAoYyA9PT0gJy0nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNPTU1FTlRfRU5ESU5HXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5jb21tZW50ICs9IGNcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQ09NTUVOVF9FTkRJTkc6XG4gICAgICAgICAgaWYgKGMgPT09ICctJykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DT01NRU5UX0VOREVEXG4gICAgICAgICAgICBwYXJzZXIuY29tbWVudCA9IHRleHRvcHRzKHBhcnNlci5vcHQsIHBhcnNlci5jb21tZW50KVxuICAgICAgICAgICAgaWYgKHBhcnNlci5jb21tZW50KSB7XG4gICAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uY29tbWVudCcsIHBhcnNlci5jb21tZW50KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyc2VyLmNvbW1lbnQgPSAnJ1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIuY29tbWVudCArPSAnLScgKyBjXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNPTU1FTlRcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQ09NTUVOVF9FTkRFRDpcbiAgICAgICAgICBpZiAoYyAhPT0gJz4nKSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ01hbGZvcm1lZCBjb21tZW50JylcbiAgICAgICAgICAgIC8vIGFsbG93IDwhLS0gYmxhaCAtLSBibG9vIC0tPiBpbiBub24tc3RyaWN0IG1vZGUsXG4gICAgICAgICAgICAvLyB3aGljaCBpcyBhIGNvbW1lbnQgb2YgXCIgYmxhaCAtLSBibG9vIFwiXG4gICAgICAgICAgICBwYXJzZXIuY29tbWVudCArPSAnLS0nICsgY1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DT01NRU5UXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVFxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5DREFUQTpcbiAgICAgICAgICBpZiAoYyA9PT0gJ10nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNEQVRBX0VORElOR1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIuY2RhdGEgKz0gY1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5DREFUQV9FTkRJTkc6XG4gICAgICAgICAgaWYgKGMgPT09ICddJykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DREFUQV9FTkRJTkdfMlxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIuY2RhdGEgKz0gJ10nICsgY1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DREFUQVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5DREFUQV9FTkRJTkdfMjpcbiAgICAgICAgICBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICBpZiAocGFyc2VyLmNkYXRhKSB7XG4gICAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uY2RhdGEnLCBwYXJzZXIuY2RhdGEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbmNsb3NlY2RhdGEnKVxuICAgICAgICAgICAgcGFyc2VyLmNkYXRhID0gJydcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVFxuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJ10nKSB7XG4gICAgICAgICAgICBwYXJzZXIuY2RhdGEgKz0gJ10nXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5jZGF0YSArPSAnXV0nICsgY1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DREFUQVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5QUk9DX0lOU1Q6XG4gICAgICAgICAgaWYgKGMgPT09ICc/Jykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5QUk9DX0lOU1RfRU5ESU5HXG4gICAgICAgICAgfSBlbHNlIGlmIChpcyh3aGl0ZXNwYWNlLCBjKSkge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5QUk9DX0lOU1RfQk9EWVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIucHJvY0luc3ROYW1lICs9IGNcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuUFJPQ19JTlNUX0JPRFk6XG4gICAgICAgICAgaWYgKCFwYXJzZXIucHJvY0luc3RCb2R5ICYmIGlzKHdoaXRlc3BhY2UsIGMpKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJz8nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlBST0NfSU5TVF9FTkRJTkdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VyLnByb2NJbnN0Qm9keSArPSBjXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLlBST0NfSU5TVF9FTkRJTkc6XG4gICAgICAgICAgaWYgKGMgPT09ICc+Jykge1xuICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24nLCB7XG4gICAgICAgICAgICAgIG5hbWU6IHBhcnNlci5wcm9jSW5zdE5hbWUsXG4gICAgICAgICAgICAgIGJvZHk6IHBhcnNlci5wcm9jSW5zdEJvZHlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBwYXJzZXIucHJvY0luc3ROYW1lID0gcGFyc2VyLnByb2NJbnN0Qm9keSA9ICcnXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFRcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VyLnByb2NJbnN0Qm9keSArPSAnPycgKyBjXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlBST0NfSU5TVF9CT0RZXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLk9QRU5fVEFHOlxuICAgICAgICAgIGlmIChpcyhuYW1lQm9keSwgYykpIHtcbiAgICAgICAgICAgIHBhcnNlci50YWdOYW1lICs9IGNcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3VGFnKHBhcnNlcilcbiAgICAgICAgICAgIGlmIChjID09PSAnPicpIHtcbiAgICAgICAgICAgICAgb3BlblRhZyhwYXJzZXIpXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICcvJykge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLk9QRU5fVEFHX1NMQVNIXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAobm90KHdoaXRlc3BhY2UsIGMpKSB7XG4gICAgICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdJbnZhbGlkIGNoYXJhY3RlciBpbiB0YWcgbmFtZScpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuT1BFTl9UQUdfU0xBU0g6XG4gICAgICAgICAgaWYgKGMgPT09ICc+Jykge1xuICAgICAgICAgICAgb3BlblRhZyhwYXJzZXIsIHRydWUpXG4gICAgICAgICAgICBjbG9zZVRhZyhwYXJzZXIpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnRm9yd2FyZC1zbGFzaCBpbiBvcGVuaW5nIHRhZyBub3QgZm9sbG93ZWQgYnkgPicpXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQlxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5BVFRSSUI6XG4gICAgICAgICAgLy8gaGF2ZW4ndCByZWFkIHRoZSBhdHRyaWJ1dGUgbmFtZSB5ZXQuXG4gICAgICAgICAgaWYgKGlzKHdoaXRlc3BhY2UsIGMpKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICBvcGVuVGFnKHBhcnNlcilcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICcvJykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5PUEVOX1RBR19TTEFTSFxuICAgICAgICAgIH0gZWxzZSBpZiAoaXMobmFtZVN0YXJ0LCBjKSkge1xuICAgICAgICAgICAgcGFyc2VyLmF0dHJpYk5hbWUgPSBjXG4gICAgICAgICAgICBwYXJzZXIuYXR0cmliVmFsdWUgPSAnJ1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfTkFNRVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0ludmFsaWQgYXR0cmlidXRlIG5hbWUnKVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5BVFRSSUJfTkFNRTpcbiAgICAgICAgICBpZiAoYyA9PT0gJz0nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQl9WQUxVRVxuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0F0dHJpYnV0ZSB3aXRob3V0IHZhbHVlJylcbiAgICAgICAgICAgIHBhcnNlci5hdHRyaWJWYWx1ZSA9IHBhcnNlci5hdHRyaWJOYW1lXG4gICAgICAgICAgICBhdHRyaWIocGFyc2VyKVxuICAgICAgICAgICAgb3BlblRhZyhwYXJzZXIpXG4gICAgICAgICAgfSBlbHNlIGlmIChpcyh3aGl0ZXNwYWNlLCBjKSkge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfTkFNRV9TQVdfV0hJVEVcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzKG5hbWVCb2R5LCBjKSkge1xuICAgICAgICAgICAgcGFyc2VyLmF0dHJpYk5hbWUgKz0gY1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0ludmFsaWQgYXR0cmlidXRlIG5hbWUnKVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5BVFRSSUJfTkFNRV9TQVdfV0hJVEU6XG4gICAgICAgICAgaWYgKGMgPT09ICc9Jykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfVkFMVUVcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzKHdoaXRlc3BhY2UsIGMpKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0F0dHJpYnV0ZSB3aXRob3V0IHZhbHVlJylcbiAgICAgICAgICAgIHBhcnNlci50YWcuYXR0cmlidXRlc1twYXJzZXIuYXR0cmliTmFtZV0gPSAnJ1xuICAgICAgICAgICAgcGFyc2VyLmF0dHJpYlZhbHVlID0gJydcbiAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uYXR0cmlidXRlJywge1xuICAgICAgICAgICAgICBuYW1lOiBwYXJzZXIuYXR0cmliTmFtZSxcbiAgICAgICAgICAgICAgdmFsdWU6ICcnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgcGFyc2VyLmF0dHJpYk5hbWUgPSAnJ1xuICAgICAgICAgICAgaWYgKGMgPT09ICc+Jykge1xuICAgICAgICAgICAgICBvcGVuVGFnKHBhcnNlcilcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXMobmFtZVN0YXJ0LCBjKSkge1xuICAgICAgICAgICAgICBwYXJzZXIuYXR0cmliTmFtZSA9IGNcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfTkFNRVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdJbnZhbGlkIGF0dHJpYnV0ZSBuYW1lJylcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFOlxuICAgICAgICAgIGlmIChpcyh3aGl0ZXNwYWNlLCBjKSkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzKHF1b3RlLCBjKSkge1xuICAgICAgICAgICAgcGFyc2VyLnEgPSBjXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQl9WQUxVRV9RVU9URURcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdVbnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUnKVxuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfVkFMVUVfVU5RVU9URURcbiAgICAgICAgICAgIHBhcnNlci5hdHRyaWJWYWx1ZSA9IGNcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFX1FVT1RFRDpcbiAgICAgICAgICBpZiAoYyAhPT0gcGFyc2VyLnEpIHtcbiAgICAgICAgICAgIGlmIChjID09PSAnJicpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfVkFMVUVfRU5USVRZX1FcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhcnNlci5hdHRyaWJWYWx1ZSArPSBjXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBhdHRyaWIocGFyc2VyKVxuICAgICAgICAgIHBhcnNlci5xID0gJydcbiAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQl9WQUxVRV9DTE9TRURcbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5BVFRSSUJfVkFMVUVfQ0xPU0VEOlxuICAgICAgICAgIGlmIChpcyh3aGl0ZXNwYWNlLCBjKSkge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICc+Jykge1xuICAgICAgICAgICAgb3BlblRhZyhwYXJzZXIpXG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnLycpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuT1BFTl9UQUdfU0xBU0hcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzKG5hbWVTdGFydCwgYykpIHtcbiAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnTm8gd2hpdGVzcGFjZSBiZXR3ZWVuIGF0dHJpYnV0ZXMnKVxuICAgICAgICAgICAgcGFyc2VyLmF0dHJpYk5hbWUgPSBjXG4gICAgICAgICAgICBwYXJzZXIuYXR0cmliVmFsdWUgPSAnJ1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfTkFNRVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0ludmFsaWQgYXR0cmlidXRlIG5hbWUnKVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5BVFRSSUJfVkFMVUVfVU5RVU9URUQ6XG4gICAgICAgICAgaWYgKG5vdChhdHRyaWJFbmQsIGMpKSB7XG4gICAgICAgICAgICBpZiAoYyA9PT0gJyYnKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX1ZBTFVFX0VOVElUWV9VXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXJzZXIuYXR0cmliVmFsdWUgKz0gY1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgICAgYXR0cmliKHBhcnNlcilcbiAgICAgICAgICBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICBvcGVuVGFnKHBhcnNlcilcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQ0xPU0VfVEFHOlxuICAgICAgICAgIGlmICghcGFyc2VyLnRhZ05hbWUpIHtcbiAgICAgICAgICAgIGlmIChpcyh3aGl0ZXNwYWNlLCBjKSkge1xuICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgfSBlbHNlIGlmIChub3QobmFtZVN0YXJ0LCBjKSkge1xuICAgICAgICAgICAgICBpZiAocGFyc2VyLnNjcmlwdCkge1xuICAgICAgICAgICAgICAgIHBhcnNlci5zY3JpcHQgKz0gJzwvJyArIGNcbiAgICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlNDUklQVFxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnSW52YWxpZCB0YWduYW1lIGluIGNsb3NpbmcgdGFnLicpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhcnNlci50YWdOYW1lID0gY1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICBjbG9zZVRhZyhwYXJzZXIpXG4gICAgICAgICAgfSBlbHNlIGlmIChpcyhuYW1lQm9keSwgYykpIHtcbiAgICAgICAgICAgIHBhcnNlci50YWdOYW1lICs9IGNcbiAgICAgICAgICB9IGVsc2UgaWYgKHBhcnNlci5zY3JpcHQpIHtcbiAgICAgICAgICAgIHBhcnNlci5zY3JpcHQgKz0gJzwvJyArIHBhcnNlci50YWdOYW1lXG4gICAgICAgICAgICBwYXJzZXIudGFnTmFtZSA9ICcnXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlNDUklQVFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAobm90KHdoaXRlc3BhY2UsIGMpKSB7XG4gICAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnSW52YWxpZCB0YWduYW1lIGluIGNsb3NpbmcgdGFnJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ0xPU0VfVEFHX1NBV19XSElURVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5DTE9TRV9UQUdfU0FXX1dISVRFOlxuICAgICAgICAgIGlmIChpcyh3aGl0ZXNwYWNlLCBjKSkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGMgPT09ICc+Jykge1xuICAgICAgICAgICAgY2xvc2VUYWcocGFyc2VyKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0ludmFsaWQgY2hhcmFjdGVycyBpbiBjbG9zaW5nIHRhZycpXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLlRFWFRfRU5USVRZOlxuICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFX0VOVElUWV9ROlxuICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFX0VOVElUWV9VOlxuICAgICAgICAgIHZhciByZXR1cm5TdGF0ZVxuICAgICAgICAgIHZhciBidWZmZXJcbiAgICAgICAgICBzd2l0Y2ggKHBhcnNlci5zdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSBTLlRFWFRfRU5USVRZOlxuICAgICAgICAgICAgICByZXR1cm5TdGF0ZSA9IFMuVEVYVFxuICAgICAgICAgICAgICBidWZmZXIgPSAndGV4dE5vZGUnXG4gICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgIGNhc2UgUy5BVFRSSUJfVkFMVUVfRU5USVRZX1E6XG4gICAgICAgICAgICAgIHJldHVyblN0YXRlID0gUy5BVFRSSUJfVkFMVUVfUVVPVEVEXG4gICAgICAgICAgICAgIGJ1ZmZlciA9ICdhdHRyaWJWYWx1ZSdcbiAgICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgICAgY2FzZSBTLkFUVFJJQl9WQUxVRV9FTlRJVFlfVTpcbiAgICAgICAgICAgICAgcmV0dXJuU3RhdGUgPSBTLkFUVFJJQl9WQUxVRV9VTlFVT1RFRFxuICAgICAgICAgICAgICBidWZmZXIgPSAnYXR0cmliVmFsdWUnXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGMgPT09ICc7Jykge1xuICAgICAgICAgICAgcGFyc2VyW2J1ZmZlcl0gKz0gcGFyc2VFbnRpdHkocGFyc2VyKVxuICAgICAgICAgICAgcGFyc2VyLmVudGl0eSA9ICcnXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSByZXR1cm5TdGF0ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXMocGFyc2VyLmVudGl0eS5sZW5ndGggPyBlbnRpdHlCb2R5IDogZW50aXR5U3RhcnQsIGMpKSB7XG4gICAgICAgICAgICBwYXJzZXIuZW50aXR5ICs9IGNcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdJbnZhbGlkIGNoYXJhY3RlciBpbiBlbnRpdHkgbmFtZScpXG4gICAgICAgICAgICBwYXJzZXJbYnVmZmVyXSArPSAnJicgKyBwYXJzZXIuZW50aXR5ICsgY1xuICAgICAgICAgICAgcGFyc2VyLmVudGl0eSA9ICcnXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSByZXR1cm5TdGF0ZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocGFyc2VyLCAnVW5rbm93biBzdGF0ZTogJyArIHBhcnNlci5zdGF0ZSlcbiAgICAgIH1cbiAgICB9IC8vIHdoaWxlXG5cbiAgICBpZiAocGFyc2VyLnBvc2l0aW9uID49IHBhcnNlci5idWZmZXJDaGVja1Bvc2l0aW9uKSB7XG4gICAgICBjaGVja0J1ZmZlckxlbmd0aChwYXJzZXIpXG4gICAgfVxuICAgIHJldHVybiBwYXJzZXJcbiAgfVxuXG4gIC8qISBodHRwOi8vbXRocy5iZS9mcm9tY29kZXBvaW50IHYwLjEuMCBieSBAbWF0aGlhcyAqL1xuICBpZiAoIVN0cmluZy5mcm9tQ29kZVBvaW50KSB7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlXG4gICAgICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yXG4gICAgICB2YXIgZnJvbUNvZGVQb2ludCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIE1BWF9TSVpFID0gMHg0MDAwXG4gICAgICAgIHZhciBjb2RlVW5pdHMgPSBbXVxuICAgICAgICB2YXIgaGlnaFN1cnJvZ2F0ZVxuICAgICAgICB2YXIgbG93U3Vycm9nYXRlXG4gICAgICAgIHZhciBpbmRleCA9IC0xXG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuICcnXG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGNvZGVQb2ludCA9IE51bWJlcihhcmd1bWVudHNbaW5kZXhdKVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICFpc0Zpbml0ZShjb2RlUG9pbnQpIHx8IC8vIGBOYU5gLCBgK0luZmluaXR5YCwgb3IgYC1JbmZpbml0eWBcbiAgICAgICAgICAgIGNvZGVQb2ludCA8IDAgfHwgLy8gbm90IGEgdmFsaWQgVW5pY29kZSBjb2RlIHBvaW50XG4gICAgICAgICAgICBjb2RlUG9pbnQgPiAweDEwRkZGRiB8fCAvLyBub3QgYSB2YWxpZCBVbmljb2RlIGNvZGUgcG9pbnRcbiAgICAgICAgICAgIGZsb29yKGNvZGVQb2ludCkgIT09IGNvZGVQb2ludCAvLyBub3QgYW4gaW50ZWdlclxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCBjb2RlIHBvaW50OiAnICsgY29kZVBvaW50KVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY29kZVBvaW50IDw9IDB4RkZGRikgeyAvLyBCTVAgY29kZSBwb2ludFxuICAgICAgICAgICAgY29kZVVuaXRzLnB1c2goY29kZVBvaW50KVxuICAgICAgICAgIH0gZWxzZSB7IC8vIEFzdHJhbCBjb2RlIHBvaW50OyBzcGxpdCBpbiBzdXJyb2dhdGUgaGFsdmVzXG4gICAgICAgICAgICAvLyBodHRwOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nI3N1cnJvZ2F0ZS1mb3JtdWxhZVxuICAgICAgICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgICAgICAgIGhpZ2hTdXJyb2dhdGUgPSAoY29kZVBvaW50ID4+IDEwKSArIDB4RDgwMFxuICAgICAgICAgICAgbG93U3Vycm9nYXRlID0gKGNvZGVQb2ludCAlIDB4NDAwKSArIDB4REMwMFxuICAgICAgICAgICAgY29kZVVuaXRzLnB1c2goaGlnaFN1cnJvZ2F0ZSwgbG93U3Vycm9nYXRlKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaW5kZXggKyAxID09PSBsZW5ndGggfHwgY29kZVVuaXRzLmxlbmd0aCA+IE1BWF9TSVpFKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNvZGVVbml0cylcbiAgICAgICAgICAgIGNvZGVVbml0cy5sZW5ndGggPSAwXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgIH1cbiAgICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0cmluZywgJ2Zyb21Db2RlUG9pbnQnLCB7XG4gICAgICAgICAgdmFsdWU6IGZyb21Db2RlUG9pbnQsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBTdHJpbmcuZnJvbUNvZGVQb2ludCA9IGZyb21Db2RlUG9pbnRcbiAgICAgIH1cbiAgICB9KCkpXG4gIH1cbn0pKHR5cGVvZiBleHBvcnRzID09PSAndW5kZWZpbmVkJyA/IHRoaXMuc2F4ID0ge30gOiBleHBvcnRzKVxuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICBleHBvcnRzLnN0cmlwQk9NID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgaWYgKHN0clswXSA9PT0gJ1xcdUZFRkYnKSB7XG4gICAgICByZXR1cm4gc3RyLnN1YnN0cmluZygxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIHZhciBwcmVmaXhNYXRjaDtcblxuICBwcmVmaXhNYXRjaCA9IG5ldyBSZWdFeHAoLyg/IXhtbG5zKV4uKjovKTtcblxuICBleHBvcnRzLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKTtcbiAgfTtcblxuICBleHBvcnRzLmZpcnN0Q2hhckxvd2VyQ2FzZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBzdHIuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG4gIH07XG5cbiAgZXhwb3J0cy5zdHJpcFByZWZpeCA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZShwcmVmaXhNYXRjaCwgJycpO1xuICB9O1xuXG4gIGV4cG9ydHMucGFyc2VOdW1iZXJzID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgaWYgKCFpc05hTihzdHIpKSB7XG4gICAgICBzdHIgPSBzdHIgJSAxID09PSAwID8gcGFyc2VJbnQoc3RyLCAxMCkgOiBwYXJzZUZsb2F0KHN0cik7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH07XG5cbiAgZXhwb3J0cy5wYXJzZUJvb2xlYW5zID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgaWYgKC9eKD86dHJ1ZXxmYWxzZSkkL2kudGVzdChzdHIpKSB7XG4gICAgICBzdHIgPSBzdHIudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICB2YXIgYm9tLCBkZWZhdWx0cywgZGVmaW5lUHJvcGVydHksIGV2ZW50cywgaXNFbXB0eSwgcHJvY2Vzc0l0ZW0sIHByb2Nlc3NvcnMsIHNheCwgc2V0SW1tZWRpYXRlLFxuICAgIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgc2F4ID0gcmVxdWlyZSgnc2F4Jyk7XG5cbiAgZXZlbnRzID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5cbiAgYm9tID0gcmVxdWlyZSgnLi9ib20nKTtcblxuICBwcm9jZXNzb3JzID0gcmVxdWlyZSgnLi9wcm9jZXNzb3JzJyk7XG5cbiAgc2V0SW1tZWRpYXRlID0gcmVxdWlyZSgndGltZXJzJykuc2V0SW1tZWRpYXRlO1xuXG4gIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpLmRlZmF1bHRzO1xuXG4gIGlzRW1wdHkgPSBmdW5jdGlvbih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IFwib2JqZWN0XCIgJiYgKHRoaW5nICE9IG51bGwpICYmIE9iamVjdC5rZXlzKHRoaW5nKS5sZW5ndGggPT09IDA7XG4gIH07XG5cbiAgcHJvY2Vzc0l0ZW0gPSBmdW5jdGlvbihwcm9jZXNzb3JzLCBpdGVtLCBrZXkpIHtcbiAgICB2YXIgaSwgbGVuLCBwcm9jZXNzO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IHByb2Nlc3NvcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHByb2Nlc3MgPSBwcm9jZXNzb3JzW2ldO1xuICAgICAgaXRlbSA9IHByb2Nlc3MoaXRlbSwga2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW07XG4gIH07XG5cbiAgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZGVzY3JpcHRvcjtcbiAgICBkZXNjcmlwdG9yID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBkZXNjcmlwdG9yLnZhbHVlID0gdmFsdWU7XG4gICAgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgZGVzY3JpcHRvcik7XG4gIH07XG5cbiAgZXhwb3J0cy5QYXJzZXIgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChQYXJzZXIsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gUGFyc2VyKG9wdHMpIHtcbiAgICAgIHRoaXMucGFyc2VTdHJpbmdQcm9taXNlID0gYmluZCh0aGlzLnBhcnNlU3RyaW5nUHJvbWlzZSwgdGhpcyk7XG4gICAgICB0aGlzLnBhcnNlU3RyaW5nID0gYmluZCh0aGlzLnBhcnNlU3RyaW5nLCB0aGlzKTtcbiAgICAgIHRoaXMucmVzZXQgPSBiaW5kKHRoaXMucmVzZXQsIHRoaXMpO1xuICAgICAgdGhpcy5hc3NpZ25PclB1c2ggPSBiaW5kKHRoaXMuYXNzaWduT3JQdXNoLCB0aGlzKTtcbiAgICAgIHRoaXMucHJvY2Vzc0FzeW5jID0gYmluZCh0aGlzLnByb2Nlc3NBc3luYywgdGhpcyk7XG4gICAgICB2YXIga2V5LCByZWYsIHZhbHVlO1xuICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIGV4cG9ydHMuUGFyc2VyKSkge1xuICAgICAgICByZXR1cm4gbmV3IGV4cG9ydHMuUGFyc2VyKG9wdHMpO1xuICAgICAgfVxuICAgICAgdGhpcy5vcHRpb25zID0ge307XG4gICAgICByZWYgPSBkZWZhdWx0c1tcIjAuMlwiXTtcbiAgICAgIGZvciAoa2V5IGluIHJlZikge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChyZWYsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICB2YWx1ZSA9IHJlZltrZXldO1xuICAgICAgICB0aGlzLm9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgZm9yIChrZXkgaW4gb3B0cykge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChvcHRzLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgdmFsdWUgPSBvcHRzW2tleV07XG4gICAgICAgIHRoaXMub3B0aW9uc1trZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnhtbG5zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy54bWxuc2tleSA9IHRoaXMub3B0aW9ucy5hdHRya2V5ICsgXCJuc1wiO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub3JtYWxpemVUYWdzKSB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLnRhZ05hbWVQcm9jZXNzb3JzKSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLnRhZ05hbWVQcm9jZXNzb3JzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zLnRhZ05hbWVQcm9jZXNzb3JzLnVuc2hpZnQocHJvY2Vzc29ycy5ub3JtYWxpemUpO1xuICAgICAgfVxuICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIFBhcnNlci5wcm90b3R5cGUucHJvY2Vzc0FzeW5jID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY2h1bmssIGVycjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICh0aGlzLnJlbWFpbmluZy5sZW5ndGggPD0gdGhpcy5vcHRpb25zLmNodW5rU2l6ZSkge1xuICAgICAgICAgIGNodW5rID0gdGhpcy5yZW1haW5pbmc7XG4gICAgICAgICAgdGhpcy5yZW1haW5pbmcgPSAnJztcbiAgICAgICAgICB0aGlzLnNheFBhcnNlciA9IHRoaXMuc2F4UGFyc2VyLndyaXRlKGNodW5rKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zYXhQYXJzZXIuY2xvc2UoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaHVuayA9IHRoaXMucmVtYWluaW5nLnN1YnN0cigwLCB0aGlzLm9wdGlvbnMuY2h1bmtTaXplKTtcbiAgICAgICAgICB0aGlzLnJlbWFpbmluZyA9IHRoaXMucmVtYWluaW5nLnN1YnN0cih0aGlzLm9wdGlvbnMuY2h1bmtTaXplLCB0aGlzLnJlbWFpbmluZy5sZW5ndGgpO1xuICAgICAgICAgIHRoaXMuc2F4UGFyc2VyID0gdGhpcy5zYXhQYXJzZXIud3JpdGUoY2h1bmspO1xuICAgICAgICAgIHJldHVybiBzZXRJbW1lZGlhdGUodGhpcy5wcm9jZXNzQXN5bmMpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgICAgZXJyID0gZXJyb3IxO1xuICAgICAgICBpZiAoIXRoaXMuc2F4UGFyc2VyLmVyclRocm93bikge1xuICAgICAgICAgIHRoaXMuc2F4UGFyc2VyLmVyclRocm93biA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdChlcnIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIFBhcnNlci5wcm90b3R5cGUuYXNzaWduT3JQdXNoID0gZnVuY3Rpb24ob2JqLCBrZXksIG5ld1ZhbHVlKSB7XG4gICAgICBpZiAoIShrZXkgaW4gb2JqKSkge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5leHBsaWNpdEFycmF5KSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KG9iaiwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KG9iaiwga2V5LCBbbmV3VmFsdWVdKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCEob2JqW2tleV0gaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgW29ialtrZXldXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9ialtrZXldLnB1c2gobmV3VmFsdWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBQYXJzZXIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXR0cmtleSwgY2hhcmtleSwgb250ZXh0LCBzdGFjaztcbiAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICB0aGlzLnNheFBhcnNlciA9IHNheC5wYXJzZXIodGhpcy5vcHRpb25zLnN0cmljdCwge1xuICAgICAgICB0cmltOiBmYWxzZSxcbiAgICAgICAgbm9ybWFsaXplOiBmYWxzZSxcbiAgICAgICAgeG1sbnM6IHRoaXMub3B0aW9ucy54bWxuc1xuICAgICAgfSk7XG4gICAgICB0aGlzLnNheFBhcnNlci5lcnJUaHJvd24gPSBmYWxzZTtcbiAgICAgIHRoaXMuc2F4UGFyc2VyLm9uZXJyb3IgPSAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgX3RoaXMuc2F4UGFyc2VyLnJlc3VtZSgpO1xuICAgICAgICAgIGlmICghX3RoaXMuc2F4UGFyc2VyLmVyclRocm93bikge1xuICAgICAgICAgICAgX3RoaXMuc2F4UGFyc2VyLmVyclRocm93biA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZW1pdChcImVycm9yXCIsIGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKTtcbiAgICAgIHRoaXMuc2F4UGFyc2VyLm9uZW5kID0gKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoIV90aGlzLnNheFBhcnNlci5lbmRlZCkge1xuICAgICAgICAgICAgX3RoaXMuc2F4UGFyc2VyLmVuZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5lbWl0KFwiZW5kXCIsIF90aGlzLnJlc3VsdE9iamVjdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSkodGhpcyk7XG4gICAgICB0aGlzLnNheFBhcnNlci5lbmRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5FWFBMSUNJVF9DSEFSS0VZID0gdGhpcy5vcHRpb25zLmV4cGxpY2l0Q2hhcmtleTtcbiAgICAgIHRoaXMucmVzdWx0T2JqZWN0ID0gbnVsbDtcbiAgICAgIHN0YWNrID0gW107XG4gICAgICBhdHRya2V5ID0gdGhpcy5vcHRpb25zLmF0dHJrZXk7XG4gICAgICBjaGFya2V5ID0gdGhpcy5vcHRpb25zLmNoYXJrZXk7XG4gICAgICB0aGlzLnNheFBhcnNlci5vbm9wZW50YWcgPSAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICB2YXIga2V5LCBuZXdWYWx1ZSwgb2JqLCBwcm9jZXNzZWRLZXksIHJlZjtcbiAgICAgICAgICBvYmogPSB7fTtcbiAgICAgICAgICBvYmpbY2hhcmtleV0gPSBcIlwiO1xuICAgICAgICAgIGlmICghX3RoaXMub3B0aW9ucy5pZ25vcmVBdHRycykge1xuICAgICAgICAgICAgcmVmID0gbm9kZS5hdHRyaWJ1dGVzO1xuICAgICAgICAgICAgZm9yIChrZXkgaW4gcmVmKSB7XG4gICAgICAgICAgICAgIGlmICghaGFzUHJvcC5jYWxsKHJlZiwga2V5KSkgY29udGludWU7XG4gICAgICAgICAgICAgIGlmICghKGF0dHJrZXkgaW4gb2JqKSAmJiAhX3RoaXMub3B0aW9ucy5tZXJnZUF0dHJzKSB7XG4gICAgICAgICAgICAgICAgb2JqW2F0dHJrZXldID0ge307XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbmV3VmFsdWUgPSBfdGhpcy5vcHRpb25zLmF0dHJWYWx1ZVByb2Nlc3NvcnMgPyBwcm9jZXNzSXRlbShfdGhpcy5vcHRpb25zLmF0dHJWYWx1ZVByb2Nlc3NvcnMsIG5vZGUuYXR0cmlidXRlc1trZXldLCBrZXkpIDogbm9kZS5hdHRyaWJ1dGVzW2tleV07XG4gICAgICAgICAgICAgIHByb2Nlc3NlZEtleSA9IF90aGlzLm9wdGlvbnMuYXR0ck5hbWVQcm9jZXNzb3JzID8gcHJvY2Vzc0l0ZW0oX3RoaXMub3B0aW9ucy5hdHRyTmFtZVByb2Nlc3NvcnMsIGtleSkgOiBrZXk7XG4gICAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLm1lcmdlQXR0cnMpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5hc3NpZ25PclB1c2gob2JqLCBwcm9jZXNzZWRLZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmpbYXR0cmtleV0sIHByb2Nlc3NlZEtleSwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIG9ialtcIiNuYW1lXCJdID0gX3RoaXMub3B0aW9ucy50YWdOYW1lUHJvY2Vzc29ycyA/IHByb2Nlc3NJdGVtKF90aGlzLm9wdGlvbnMudGFnTmFtZVByb2Nlc3NvcnMsIG5vZGUubmFtZSkgOiBub2RlLm5hbWU7XG4gICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMueG1sbnMpIHtcbiAgICAgICAgICAgIG9ialtfdGhpcy5vcHRpb25zLnhtbG5za2V5XSA9IHtcbiAgICAgICAgICAgICAgdXJpOiBub2RlLnVyaSxcbiAgICAgICAgICAgICAgbG9jYWw6IG5vZGUubG9jYWxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzdGFjay5wdXNoKG9iaik7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKTtcbiAgICAgIHRoaXMuc2F4UGFyc2VyLm9uY2xvc2V0YWcgPSAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBjZGF0YSwgZW1wdHlTdHIsIGtleSwgbm9kZSwgbm9kZU5hbWUsIG9iaiwgb2JqQ2xvbmUsIG9sZCwgcywgeHBhdGg7XG4gICAgICAgICAgb2JqID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgbm9kZU5hbWUgPSBvYmpbXCIjbmFtZVwiXTtcbiAgICAgICAgICBpZiAoIV90aGlzLm9wdGlvbnMuZXhwbGljaXRDaGlsZHJlbiB8fCAhX3RoaXMub3B0aW9ucy5wcmVzZXJ2ZUNoaWxkcmVuT3JkZXIpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBvYmpbXCIjbmFtZVwiXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9iai5jZGF0YSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY2RhdGEgPSBvYmouY2RhdGE7XG4gICAgICAgICAgICBkZWxldGUgb2JqLmNkYXRhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICAgICAgaWYgKG9ialtjaGFya2V5XS5tYXRjaCgvXlxccyokLykgJiYgIWNkYXRhKSB7XG4gICAgICAgICAgICBlbXB0eVN0ciA9IG9ialtjaGFya2V5XTtcbiAgICAgICAgICAgIGRlbGV0ZSBvYmpbY2hhcmtleV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLnRyaW0pIHtcbiAgICAgICAgICAgICAgb2JqW2NoYXJrZXldID0gb2JqW2NoYXJrZXldLnRyaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLm5vcm1hbGl6ZSkge1xuICAgICAgICAgICAgICBvYmpbY2hhcmtleV0gPSBvYmpbY2hhcmtleV0ucmVwbGFjZSgvXFxzezIsfS9nLCBcIiBcIikudHJpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2JqW2NoYXJrZXldID0gX3RoaXMub3B0aW9ucy52YWx1ZVByb2Nlc3NvcnMgPyBwcm9jZXNzSXRlbShfdGhpcy5vcHRpb25zLnZhbHVlUHJvY2Vzc29ycywgb2JqW2NoYXJrZXldLCBub2RlTmFtZSkgOiBvYmpbY2hhcmtleV07XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDEgJiYgY2hhcmtleSBpbiBvYmogJiYgIV90aGlzLkVYUExJQ0lUX0NIQVJLRVkpIHtcbiAgICAgICAgICAgICAgb2JqID0gb2JqW2NoYXJrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNFbXB0eShvYmopKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIF90aGlzLm9wdGlvbnMuZW1wdHlUYWcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgb2JqID0gX3RoaXMub3B0aW9ucy5lbXB0eVRhZygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb2JqID0gX3RoaXMub3B0aW9ucy5lbXB0eVRhZyAhPT0gJycgPyBfdGhpcy5vcHRpb25zLmVtcHR5VGFnIDogZW1wdHlTdHI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLnZhbGlkYXRvciAhPSBudWxsKSB7XG4gICAgICAgICAgICB4cGF0aCA9IFwiL1wiICsgKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdmFyIGksIGxlbiwgcmVzdWx0cztcbiAgICAgICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBzdGFjay5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBzdGFja1tpXTtcbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gobm9kZVtcIiNuYW1lXCJdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgICAgIH0pKCkpLmNvbmNhdChub2RlTmFtZSkuam9pbihcIi9cIik7XG4gICAgICAgICAgICAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhciBlcnI7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iaiA9IF90aGlzLm9wdGlvbnMudmFsaWRhdG9yKHhwYXRoLCBzICYmIHNbbm9kZU5hbWVdLCBvYmopO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgICAgICAgICAgICBlcnIgPSBlcnJvcjE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5leHBsaWNpdENoaWxkcmVuICYmICFfdGhpcy5vcHRpb25zLm1lcmdlQXR0cnMgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMub3B0aW9ucy5wcmVzZXJ2ZUNoaWxkcmVuT3JkZXIpIHtcbiAgICAgICAgICAgICAgbm9kZSA9IHt9O1xuICAgICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5hdHRya2V5IGluIG9iaikge1xuICAgICAgICAgICAgICAgIG5vZGVbX3RoaXMub3B0aW9ucy5hdHRya2V5XSA9IG9ialtfdGhpcy5vcHRpb25zLmF0dHJrZXldO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBvYmpbX3RoaXMub3B0aW9ucy5hdHRya2V5XTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoIV90aGlzLm9wdGlvbnMuY2hhcnNBc0NoaWxkcmVuICYmIF90aGlzLm9wdGlvbnMuY2hhcmtleSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBub2RlW190aGlzLm9wdGlvbnMuY2hhcmtleV0gPSBvYmpbX3RoaXMub3B0aW9ucy5jaGFya2V5XTtcbiAgICAgICAgICAgICAgICBkZWxldGUgb2JqW190aGlzLm9wdGlvbnMuY2hhcmtleV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIG5vZGVbX3RoaXMub3B0aW9ucy5jaGlsZGtleV0gPSBvYmo7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgb2JqID0gbm9kZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocykge1xuICAgICAgICAgICAgICBzW190aGlzLm9wdGlvbnMuY2hpbGRrZXldID0gc1tfdGhpcy5vcHRpb25zLmNoaWxka2V5XSB8fCBbXTtcbiAgICAgICAgICAgICAgb2JqQ2xvbmUgPSB7fTtcbiAgICAgICAgICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwob2JqLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmpDbG9uZSwga2V5LCBvYmpba2V5XSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc1tfdGhpcy5vcHRpb25zLmNoaWxka2V5XS5wdXNoKG9iakNsb25lKTtcbiAgICAgICAgICAgICAgZGVsZXRlIG9ialtcIiNuYW1lXCJdO1xuICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDEgJiYgY2hhcmtleSBpbiBvYmogJiYgIV90aGlzLkVYUExJQ0lUX0NIQVJLRVkpIHtcbiAgICAgICAgICAgICAgICBvYmogPSBvYmpbY2hhcmtleV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5hc3NpZ25PclB1c2gocywgbm9kZU5hbWUsIG9iaik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmV4cGxpY2l0Um9vdCkge1xuICAgICAgICAgICAgICBvbGQgPSBvYmo7XG4gICAgICAgICAgICAgIG9iaiA9IHt9O1xuICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmosIG5vZGVOYW1lLCBvbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMucmVzdWx0T2JqZWN0ID0gb2JqO1xuICAgICAgICAgICAgX3RoaXMuc2F4UGFyc2VyLmVuZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5lbWl0KFwiZW5kXCIsIF90aGlzLnJlc3VsdE9iamVjdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSkodGhpcyk7XG4gICAgICBvbnRleHQgPSAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgICAgICB2YXIgY2hhckNoaWxkLCBzO1xuICAgICAgICAgIHMgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAocykge1xuICAgICAgICAgICAgc1tjaGFya2V5XSArPSB0ZXh0O1xuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuZXhwbGljaXRDaGlsZHJlbiAmJiBfdGhpcy5vcHRpb25zLnByZXNlcnZlQ2hpbGRyZW5PcmRlciAmJiBfdGhpcy5vcHRpb25zLmNoYXJzQXNDaGlsZHJlbiAmJiAoX3RoaXMub3B0aW9ucy5pbmNsdWRlV2hpdGVDaGFycyB8fCB0ZXh0LnJlcGxhY2UoL1xcXFxuL2csICcnKS50cmltKCkgIT09ICcnKSkge1xuICAgICAgICAgICAgICBzW190aGlzLm9wdGlvbnMuY2hpbGRrZXldID0gc1tfdGhpcy5vcHRpb25zLmNoaWxka2V5XSB8fCBbXTtcbiAgICAgICAgICAgICAgY2hhckNoaWxkID0ge1xuICAgICAgICAgICAgICAgICcjbmFtZSc6ICdfX3RleHRfXydcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgY2hhckNoaWxkW2NoYXJrZXldID0gdGV4dDtcbiAgICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMubm9ybWFsaXplKSB7XG4gICAgICAgICAgICAgICAgY2hhckNoaWxkW2NoYXJrZXldID0gY2hhckNoaWxkW2NoYXJrZXldLnJlcGxhY2UoL1xcc3syLH0vZywgXCIgXCIpLnRyaW0oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzW190aGlzLm9wdGlvbnMuY2hpbGRrZXldLnB1c2goY2hhckNoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpO1xuICAgICAgdGhpcy5zYXhQYXJzZXIub250ZXh0ID0gb250ZXh0O1xuICAgICAgcmV0dXJuIHRoaXMuc2F4UGFyc2VyLm9uY2RhdGEgPSAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgICAgICB2YXIgcztcbiAgICAgICAgICBzID0gb250ZXh0KHRleHQpO1xuICAgICAgICAgIGlmIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gcy5jZGF0YSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSkodGhpcyk7XG4gICAgfTtcblxuICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VTdHJpbmcgPSBmdW5jdGlvbihzdHIsIGNiKSB7XG4gICAgICB2YXIgZXJyO1xuICAgICAgaWYgKChjYiAhPSBudWxsKSAmJiB0eXBlb2YgY2IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aGlzLm9uKFwiZW5kXCIsIGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgICByZXR1cm4gY2IobnVsbCwgcmVzdWx0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub24oXCJlcnJvclwiLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgcmV0dXJuIGNiKGVycik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgc3RyID0gc3RyLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmIChzdHIudHJpbSgpID09PSAnJykge1xuICAgICAgICAgIHRoaXMuZW1pdChcImVuZFwiLCBudWxsKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBzdHIgPSBib20uc3RyaXBCT00oc3RyKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hc3luYykge1xuICAgICAgICAgIHRoaXMucmVtYWluaW5nID0gc3RyO1xuICAgICAgICAgIHNldEltbWVkaWF0ZSh0aGlzLnByb2Nlc3NBc3luYyk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc2F4UGFyc2VyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnNheFBhcnNlci53cml0ZShzdHIpLmNsb3NlKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgICAgZXJyID0gZXJyb3IxO1xuICAgICAgICBpZiAoISh0aGlzLnNheFBhcnNlci5lcnJUaHJvd24gfHwgdGhpcy5zYXhQYXJzZXIuZW5kZWQpKSB7XG4gICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc2F4UGFyc2VyLmVyclRocm93biA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zYXhQYXJzZXIuZW5kZWQpIHtcbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVN0cmluZ1Byb21pc2UgPSBmdW5jdGlvbihzdHIpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5wYXJzZVN0cmluZyhzdHIsIGZ1bmN0aW9uKGVyciwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgIH07XG5cbiAgICByZXR1cm4gUGFyc2VyO1xuXG4gIH0pKGV2ZW50cyk7XG5cbiAgZXhwb3J0cy5wYXJzZVN0cmluZyA9IGZ1bmN0aW9uKHN0ciwgYSwgYikge1xuICAgIHZhciBjYiwgb3B0aW9ucywgcGFyc2VyO1xuICAgIGlmIChiICE9IG51bGwpIHtcbiAgICAgIGlmICh0eXBlb2YgYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYiA9IGI7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIG9wdGlvbnMgPSBhO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIGEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY2IgPSBhO1xuICAgICAgfVxuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBwYXJzZXIgPSBuZXcgZXhwb3J0cy5QYXJzZXIob3B0aW9ucyk7XG4gICAgcmV0dXJuIHBhcnNlci5wYXJzZVN0cmluZyhzdHIsIGNiKTtcbiAgfTtcblxuICBleHBvcnRzLnBhcnNlU3RyaW5nUHJvbWlzZSA9IGZ1bmN0aW9uKHN0ciwgYSkge1xuICAgIHZhciBvcHRpb25zLCBwYXJzZXI7XG4gICAgaWYgKHR5cGVvZiBhID09PSAnb2JqZWN0Jykge1xuICAgICAgb3B0aW9ucyA9IGE7XG4gICAgfVxuICAgIHBhcnNlciA9IG5ldyBleHBvcnRzLlBhcnNlcihvcHRpb25zKTtcbiAgICByZXR1cm4gcGFyc2VyLnBhcnNlU3RyaW5nUHJvbWlzZShzdHIpO1xuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICB2YXIgYnVpbGRlciwgZGVmYXVsdHMsIHBhcnNlciwgcHJvY2Vzc29ycyxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4gIGJ1aWxkZXIgPSByZXF1aXJlKCcuL2J1aWxkZXInKTtcblxuICBwYXJzZXIgPSByZXF1aXJlKCcuL3BhcnNlcicpO1xuXG4gIHByb2Nlc3NvcnMgPSByZXF1aXJlKCcuL3Byb2Nlc3NvcnMnKTtcblxuICBleHBvcnRzLmRlZmF1bHRzID0gZGVmYXVsdHMuZGVmYXVsdHM7XG5cbiAgZXhwb3J0cy5wcm9jZXNzb3JzID0gcHJvY2Vzc29ycztcblxuICBleHBvcnRzLlZhbGlkYXRpb25FcnJvciA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFZhbGlkYXRpb25FcnJvciwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBWYWxpZGF0aW9uRXJyb3IobWVzc2FnZSkge1xuICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB9XG5cbiAgICByZXR1cm4gVmFsaWRhdGlvbkVycm9yO1xuXG4gIH0pKEVycm9yKTtcblxuICBleHBvcnRzLkJ1aWxkZXIgPSBidWlsZGVyLkJ1aWxkZXI7XG5cbiAgZXhwb3J0cy5QYXJzZXIgPSBwYXJzZXIuUGFyc2VyO1xuXG4gIGV4cG9ydHMucGFyc2VTdHJpbmcgPSBwYXJzZXIucGFyc2VTdHJpbmc7XG5cbiAgZXhwb3J0cy5wYXJzZVN0cmluZ1Byb21pc2UgPSBwYXJzZXIucGFyc2VTdHJpbmdQcm9taXNlO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8qXG4gKiBFSlMgRW1iZWRkZWQgSmF2YVNjcmlwdCB0ZW1wbGF0ZXNcbiAqIENvcHlyaWdodCAyMTEyIE1hdHRoZXcgRWVybmlzc2UgKG1kZUBmbGVlZ2l4Lm9yZylcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiovXG5cbi8qKlxuICogUHJpdmF0ZSB1dGlsaXR5IGZ1bmN0aW9uc1xuICogQG1vZHVsZSB1dGlsc1xuICogQHByaXZhdGVcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciByZWdFeHBDaGFycyA9IC9bfFxcXFx7fSgpW1xcXV4kKyo/Ll0vZztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgaGFzT3duID0gZnVuY3Rpb24gKG9iaiwga2V5KSB7IHJldHVybiBoYXNPd25Qcm9wZXJ0eS5hcHBseShvYmosIFtrZXldKTsgfTtcblxuLyoqXG4gKiBFc2NhcGUgY2hhcmFjdGVycyByZXNlcnZlZCBpbiByZWd1bGFyIGV4cHJlc3Npb25zLlxuICpcbiAqIElmIGBzdHJpbmdgIGlzIGB1bmRlZmluZWRgIG9yIGBudWxsYCwgdGhlIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIElucHV0IHN0cmluZ1xuICogQHJldHVybiB7U3RyaW5nfSBFc2NhcGVkIHN0cmluZ1xuICogQHN0YXRpY1xuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0cy5lc2NhcGVSZWdFeHBDaGFycyA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmICghc3RyaW5nKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlZ0V4cENoYXJzLCAnXFxcXCQmJyk7XG59O1xuXG52YXIgX0VOQ09ERV9IVE1MX1JVTEVTID0ge1xuICAnJic6ICcmYW1wOycsXG4gICc8JzogJyZsdDsnLFxuICAnPic6ICcmZ3Q7JyxcbiAgJ1wiJzogJyYjMzQ7JyxcbiAgXCInXCI6ICcmIzM5Oydcbn07XG52YXIgX01BVENIX0hUTUwgPSAvWyY8PidcIl0vZztcblxuZnVuY3Rpb24gZW5jb2RlX2NoYXIoYykge1xuICByZXR1cm4gX0VOQ09ERV9IVE1MX1JVTEVTW2NdIHx8IGM7XG59XG5cbi8qKlxuICogU3RyaW5naWZpZWQgdmVyc2lvbiBvZiBjb25zdGFudHMgdXNlZCBieSB7QGxpbmsgbW9kdWxlOnV0aWxzLmVzY2FwZVhNTH0uXG4gKlxuICogSXQgaXMgdXNlZCBpbiB0aGUgcHJvY2VzcyBvZiBnZW5lcmF0aW5nIHtAbGluayBDbGllbnRGdW5jdGlvbn1zLlxuICpcbiAqIEByZWFkb25seVxuICogQHR5cGUge1N0cmluZ31cbiAqL1xuXG52YXIgZXNjYXBlRnVuY1N0ciA9XG4gICd2YXIgX0VOQ09ERV9IVE1MX1JVTEVTID0ge1xcbidcbisgJyAgICAgIFwiJlwiOiBcIiZhbXA7XCJcXG4nXG4rICcgICAgLCBcIjxcIjogXCImbHQ7XCJcXG4nXG4rICcgICAgLCBcIj5cIjogXCImZ3Q7XCJcXG4nXG4rICcgICAgLCBcXCdcIlxcJzogXCImIzM0O1wiXFxuJ1xuKyAnICAgICwgXCJcXCdcIjogXCImIzM5O1wiXFxuJ1xuKyAnICAgIH1cXG4nXG4rICcgICwgX01BVENIX0hUTUwgPSAvWyY8PlxcJ1wiXS9nO1xcbidcbisgJ2Z1bmN0aW9uIGVuY29kZV9jaGFyKGMpIHtcXG4nXG4rICcgIHJldHVybiBfRU5DT0RFX0hUTUxfUlVMRVNbY10gfHwgYztcXG4nXG4rICd9O1xcbic7XG5cbi8qKlxuICogRXNjYXBlIGNoYXJhY3RlcnMgcmVzZXJ2ZWQgaW4gWE1MLlxuICpcbiAqIElmIGBtYXJrdXBgIGlzIGB1bmRlZmluZWRgIG9yIGBudWxsYCwgdGhlIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZC5cbiAqXG4gKiBAaW1wbGVtZW50cyB7RXNjYXBlQ2FsbGJhY2t9XG4gKiBAcGFyYW0ge1N0cmluZ30gbWFya3VwIElucHV0IHN0cmluZ1xuICogQHJldHVybiB7U3RyaW5nfSBFc2NhcGVkIHN0cmluZ1xuICogQHN0YXRpY1xuICogQHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVzY2FwZVhNTCA9IGZ1bmN0aW9uIChtYXJrdXApIHtcbiAgcmV0dXJuIG1hcmt1cCA9PSB1bmRlZmluZWRcbiAgICA/ICcnXG4gICAgOiBTdHJpbmcobWFya3VwKVxuICAgICAgLnJlcGxhY2UoX01BVENIX0hUTUwsIGVuY29kZV9jaGFyKTtcbn07XG5cbmZ1bmN0aW9uIGVzY2FwZVhNTFRvU3RyaW5nKCkge1xuICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGhpcykgKyAnO1xcbicgKyBlc2NhcGVGdW5jU3RyO1xufVxuXG50cnkge1xuICBpZiAodHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBJZiB0aGUgRnVuY3Rpb24gcHJvdG90eXBlIGlzIGZyb3plbiwgdGhlIFwidG9TdHJpbmdcIiBwcm9wZXJ0eSBpcyBub24td3JpdGFibGUuIFRoaXMgbWVhbnMgdGhhdCBhbnkgb2JqZWN0cyB3aGljaCBpbmhlcml0IHRoaXMgcHJvcGVydHlcbiAgLy8gY2Fubm90IGhhdmUgdGhlIHByb3BlcnR5IGNoYW5nZWQgdXNpbmcgYW4gYXNzaWdubWVudC4gSWYgdXNpbmcgc3RyaWN0IG1vZGUsIGF0dGVtcHRpbmcgdGhhdCB3aWxsIGNhdXNlIGFuIGVycm9yLiBJZiBub3QgdXNpbmcgc3RyaWN0XG4gIC8vIG1vZGUsIGF0dGVtcHRpbmcgdGhhdCB3aWxsIGJlIHNpbGVudGx5IGlnbm9yZWQuXG4gIC8vIEhvd2V2ZXIsIHdlIGNhbiBzdGlsbCBleHBsaWNpdGx5IHNoYWRvdyB0aGUgcHJvdG90eXBlJ3MgXCJ0b1N0cmluZ1wiIHByb3BlcnR5IGJ5IGRlZmluaW5nIGEgbmV3IFwidG9TdHJpbmdcIiBwcm9wZXJ0eSBvbiB0aGlzIG9iamVjdC5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5lc2NhcGVYTUwsICd0b1N0cmluZycsIHsgdmFsdWU6IGVzY2FwZVhNTFRvU3RyaW5nIH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSgpIGRvZXNuJ3QgZXhpc3QsIGF0dGVtcHQgdG8gc2hhZG93IHRoaXMgcHJvcGVydHkgdXNpbmcgdGhlIGFzc2lnbm1lbnQgb3BlcmF0b3IuXG4gICAgZXhwb3J0cy5lc2NhcGVYTUwudG9TdHJpbmcgPSBlc2NhcGVYTUxUb1N0cmluZztcbiAgfVxufSBjYXRjaCAoZXJyKSB7XG4gIGNvbnNvbGUud2FybignVW5hYmxlIHRvIHNldCBlc2NhcGVYTUwudG9TdHJpbmcgKGlzIHRoZSBGdW5jdGlvbiBwcm90b3R5cGUgZnJvemVuPyknKTtcbn1cblxuLyoqXG4gKiBOYWl2ZSBjb3B5IG9mIHByb3BlcnRpZXMgZnJvbSBvbmUgb2JqZWN0IHRvIGFub3RoZXIuXG4gKiBEb2VzIG5vdCByZWN1cnNlIGludG8gbm9uLXNjYWxhciBwcm9wZXJ0aWVzXG4gKiBEb2VzIG5vdCBjaGVjayB0byBzZWUgaWYgdGhlIHByb3BlcnR5IGhhcyBhIHZhbHVlIGJlZm9yZSBjb3B5aW5nXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSB0byAgIERlc3RpbmF0aW9uIG9iamVjdFxuICogQHBhcmFtICB7T2JqZWN0fSBmcm9tIFNvdXJjZSBvYmplY3RcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICBEZXN0aW5hdGlvbiBvYmplY3RcbiAqIEBzdGF0aWNcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydHMuc2hhbGxvd0NvcHkgPSBmdW5jdGlvbiAodG8sIGZyb20pIHtcbiAgZnJvbSA9IGZyb20gfHwge307XG4gIGlmICgodG8gIT09IG51bGwpICYmICh0byAhPT0gdW5kZWZpbmVkKSkge1xuICAgIGZvciAodmFyIHAgaW4gZnJvbSkge1xuICAgICAgaWYgKCFoYXNPd24oZnJvbSwgcCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAocCA9PT0gJ19fcHJvdG9fXycgfHwgcCA9PT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHRvW3BdID0gZnJvbVtwXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcblxuLyoqXG4gKiBOYWl2ZSBjb3B5IG9mIGEgbGlzdCBvZiBrZXkgbmFtZXMsIGZyb20gb25lIG9iamVjdCB0byBhbm90aGVyLlxuICogT25seSBjb3BpZXMgcHJvcGVydHkgaWYgaXQgaXMgYWN0dWFsbHkgZGVmaW5lZFxuICogRG9lcyBub3QgcmVjdXJzZSBpbnRvIG5vbi1zY2FsYXIgcHJvcGVydGllc1xuICpcbiAqIEBwYXJhbSAge09iamVjdH0gdG8gICBEZXN0aW5hdGlvbiBvYmplY3RcbiAqIEBwYXJhbSAge09iamVjdH0gZnJvbSBTb3VyY2Ugb2JqZWN0XG4gKiBAcGFyYW0gIHtBcnJheX0gbGlzdCBMaXN0IG9mIHByb3BlcnRpZXMgdG8gY29weVxuICogQHJldHVybiB7T2JqZWN0fSAgICAgIERlc3RpbmF0aW9uIG9iamVjdFxuICogQHN0YXRpY1xuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0cy5zaGFsbG93Q29weUZyb21MaXN0ID0gZnVuY3Rpb24gKHRvLCBmcm9tLCBsaXN0KSB7XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICBmcm9tID0gZnJvbSB8fCB7fTtcbiAgaWYgKCh0byAhPT0gbnVsbCkgJiYgKHRvICE9PSB1bmRlZmluZWQpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcCA9IGxpc3RbaV07XG4gICAgICBpZiAodHlwZW9mIGZyb21bcF0gIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKCFoYXNPd24oZnJvbSwgcCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocCA9PT0gJ19fcHJvdG9fXycgfHwgcCA9PT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHRvW3BdID0gZnJvbVtwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcblxuLyoqXG4gKiBTaW1wbGUgaW4tcHJvY2VzcyBjYWNoZSBpbXBsZW1lbnRhdGlvbi4gRG9lcyBub3QgaW1wbGVtZW50IGxpbWl0cyBvZiBhbnlcbiAqIHNvcnQuXG4gKlxuICogQGltcGxlbWVudHMge0NhY2hlfVxuICogQHN0YXRpY1xuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0cy5jYWNoZSA9IHtcbiAgX2RhdGE6IHt9LFxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbCkge1xuICAgIHRoaXMuX2RhdGFba2V5XSA9IHZhbDtcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGFba2V5XTtcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgZGVsZXRlIHRoaXMuX2RhdGFba2V5XTtcbiAgfSxcbiAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9kYXRhID0ge307XG4gIH1cbn07XG5cbi8qKlxuICogVHJhbnNmb3JtcyBoeXBoZW4gY2FzZSB2YXJpYWJsZSBpbnRvIGNhbWVsIGNhc2UuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyBIeXBoZW4gY2FzZSBzdHJpbmdcbiAqIEByZXR1cm4ge1N0cmluZ30gQ2FtZWwgY2FzZSBzdHJpbmdcbiAqIEBzdGF0aWNcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydHMuaHlwaGVuVG9DYW1lbCA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8tW2Etel0vZywgZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaFsxXS50b1VwcGVyQ2FzZSgpOyB9KTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhIG51bGwtcHJvdG90eXBlIG9iamVjdCBpbiBydW50aW1lcyB0aGF0IHN1cHBvcnQgaXRcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCwgcHJvdG90eXBlIHdpbGwgYmUgc2V0IHRvIG51bGwgd2hlcmUgcG9zc2libGVcbiAqIEBzdGF0aWNcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gIGlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH07XG4gIH1cbiAgaWYgKCEoe19fcHJvdG9fXzogbnVsbH0gaW5zdGFuY2VvZiBPYmplY3QpKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7X19wcm90b19fOiBudWxsfTtcbiAgICB9O1xuICB9XG4gIC8vIE5vdCBwb3NzaWJsZSwganVzdCBwYXNzIHRocm91Z2hcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH07XG59KSgpO1xuXG5leHBvcnRzLmhhc093bk9ubHlPYmplY3QgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBvID0gZXhwb3J0cy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCk7XG4gIGZvciAodmFyIHAgaW4gb2JqKSB7XG4gICAgaWYgKGhhc093bihvYmosIHApKSB7XG4gICAgICBvW3BdID0gb2JqW3BdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbztcbn07XG5cbiIsICJ7XG4gIFwibmFtZVwiOiBcImVqc1wiLFxuICBcImRlc2NyaXB0aW9uXCI6IFwiRW1iZWRkZWQgSmF2YVNjcmlwdCB0ZW1wbGF0ZXNcIixcbiAgXCJrZXl3b3Jkc1wiOiBbXG4gICAgXCJ0ZW1wbGF0ZVwiLFxuICAgIFwiZW5naW5lXCIsXG4gICAgXCJlanNcIlxuICBdLFxuICBcInZlcnNpb25cIjogXCIzLjEuMTBcIixcbiAgXCJhdXRob3JcIjogXCJNYXR0aGV3IEVlcm5pc3NlIDxtZGVAZmxlZWdpeC5vcmc+IChodHRwOi8vZmxlZWdpeC5vcmcpXCIsXG4gIFwibGljZW5zZVwiOiBcIkFwYWNoZS0yLjBcIixcbiAgXCJiaW5cIjoge1xuICAgIFwiZWpzXCI6IFwiLi9iaW4vY2xpLmpzXCJcbiAgfSxcbiAgXCJtYWluXCI6IFwiLi9saWIvZWpzLmpzXCIsXG4gIFwianNkZWxpdnJcIjogXCJlanMubWluLmpzXCIsXG4gIFwidW5wa2dcIjogXCJlanMubWluLmpzXCIsXG4gIFwicmVwb3NpdG9yeVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiZ2l0XCIsXG4gICAgXCJ1cmxcIjogXCJnaXQ6Ly9naXRodWIuY29tL21kZS9lanMuZ2l0XCJcbiAgfSxcbiAgXCJidWdzXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL21kZS9lanMvaXNzdWVzXCIsXG4gIFwiaG9tZXBhZ2VcIjogXCJodHRwczovL2dpdGh1Yi5jb20vbWRlL2Vqc1wiLFxuICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJqYWtlXCI6IFwiXjEwLjguNVwiXG4gIH0sXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcImJyb3dzZXJpZnlcIjogXCJeMTYuNS4xXCIsXG4gICAgXCJlc2xpbnRcIjogXCJeNi44LjBcIixcbiAgICBcImdpdC1kaXJlY3RvcnktZGVwbG95XCI6IFwiXjEuNS4xXCIsXG4gICAgXCJqc2RvY1wiOiBcIl40LjAuMlwiLFxuICAgIFwibHJ1LWNhY2hlXCI6IFwiXjQuMC4xXCIsXG4gICAgXCJtb2NoYVwiOiBcIl4xMC4yLjBcIixcbiAgICBcInVnbGlmeS1qc1wiOiBcIl4zLjMuMTZcIlxuICB9LFxuICBcImVuZ2luZXNcIjoge1xuICAgIFwibm9kZVwiOiBcIj49MC4xMC4wXCJcbiAgfSxcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcInRlc3RcIjogXCJucHggamFrZSB0ZXN0XCJcbiAgfVxufVxuIiwgIi8qXG4gKiBFSlMgRW1iZWRkZWQgSmF2YVNjcmlwdCB0ZW1wbGF0ZXNcbiAqIENvcHlyaWdodCAyMTEyIE1hdHRoZXcgRWVybmlzc2UgKG1kZUBmbGVlZ2l4Lm9yZylcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAZmlsZSBFbWJlZGRlZCBKYXZhU2NyaXB0IHRlbXBsYXRpbmcgZW5naW5lLiB7QGxpbmsgaHR0cDovL2Vqcy5jb31cbiAqIEBhdXRob3IgTWF0dGhldyBFZXJuaXNzZSA8bWRlQGZsZWVnaXgub3JnPlxuICogQGF1dGhvciBUaWFuY2hlbmcgXCJUaW1vdGh5XCIgR3UgPHRpbW90aHlndTk5QGdtYWlsLmNvbT5cbiAqIEBwcm9qZWN0IEVKU1xuICogQGxpY2Vuc2Uge0BsaW5rIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMCBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjB9XG4gKi9cblxuLyoqXG4gKiBFSlMgaW50ZXJuYWwgZnVuY3Rpb25zLlxuICpcbiAqIFRlY2huaWNhbGx5IHRoaXMgXCJtb2R1bGVcIiBsaWVzIGluIHRoZSBzYW1lIGZpbGUgYXMge0BsaW5rIG1vZHVsZTplanN9LCBmb3JcbiAqIHRoZSBzYWtlIG9mIG9yZ2FuaXphdGlvbiBhbGwgdGhlIHByaXZhdGUgZnVuY3Rpb25zIHJlIGdyb3VwZWQgaW50byB0aGlzXG4gKiBtb2R1bGUuXG4gKlxuICogQG1vZHVsZSBlanMtaW50ZXJuYWxcbiAqIEBwcml2YXRlXG4gKi9cblxuLyoqXG4gKiBFbWJlZGRlZCBKYXZhU2NyaXB0IHRlbXBsYXRpbmcgZW5naW5lLlxuICpcbiAqIEBtb2R1bGUgZWpzXG4gKiBAcHVibGljXG4gKi9cblxuXG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBzY29wZU9wdGlvbldhcm5lZCA9IGZhbHNlO1xuLyoqIEB0eXBlIHtzdHJpbmd9ICovXG52YXIgX1ZFUlNJT05fU1RSSU5HID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvbjtcbnZhciBfREVGQVVMVF9PUEVOX0RFTElNSVRFUiA9ICc8JztcbnZhciBfREVGQVVMVF9DTE9TRV9ERUxJTUlURVIgPSAnPic7XG52YXIgX0RFRkFVTFRfREVMSU1JVEVSID0gJyUnO1xudmFyIF9ERUZBVUxUX0xPQ0FMU19OQU1FID0gJ2xvY2Fscyc7XG52YXIgX05BTUUgPSAnZWpzJztcbnZhciBfUkVHRVhfU1RSSU5HID0gJyg8JSV8JSU+fDwlPXw8JS18PCVffDwlI3w8JXwlPnwtJT58XyU+KSc7XG52YXIgX09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBID0gWydkZWxpbWl0ZXInLCAnc2NvcGUnLCAnY29udGV4dCcsICdkZWJ1ZycsICdjb21waWxlRGVidWcnLFxuICAnY2xpZW50JywgJ193aXRoJywgJ3JtV2hpdGVzcGFjZScsICdzdHJpY3QnLCAnZmlsZW5hbWUnLCAnYXN5bmMnXTtcbi8vIFdlIGRvbid0IGFsbG93ICdjYWNoZScgb3B0aW9uIHRvIGJlIHBhc3NlZCBpbiB0aGUgZGF0YSBvYmogZm9yXG4vLyB0aGUgbm9ybWFsIGByZW5kZXJgIGNhbGwsIGJ1dCB0aGlzIGlzIHdoZXJlIEV4cHJlc3MgMiAmIDMgcHV0IGl0XG4vLyBzbyB3ZSBtYWtlIGFuIGV4Y2VwdGlvbiBmb3IgYHJlbmRlckZpbGVgXG52YXIgX09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBX0VYUFJFU1MgPSBfT1BUU19QQVNTQUJMRV9XSVRIX0RBVEEuY29uY2F0KCdjYWNoZScpO1xudmFyIF9CT00gPSAvXlxcdUZFRkYvO1xudmFyIF9KU19JREVOVElGSUVSID0gL15bYS16QS1aXyRdWzAtOWEtekEtWl8kXSokLztcblxuLyoqXG4gKiBFSlMgdGVtcGxhdGUgZnVuY3Rpb24gY2FjaGUuIFRoaXMgY2FuIGJlIGEgTFJVIG9iamVjdCBmcm9tIGxydS1jYWNoZSBOUE1cbiAqIG1vZHVsZS4gQnkgZGVmYXVsdCwgaXQgaXMge0BsaW5rIG1vZHVsZTp1dGlscy5jYWNoZX0sIGEgc2ltcGxlIGluLXByb2Nlc3NcbiAqIGNhY2hlIHRoYXQgZ3Jvd3MgY29udGludW91c2x5LlxuICpcbiAqIEB0eXBlIHtDYWNoZX1cbiAqL1xuXG5leHBvcnRzLmNhY2hlID0gdXRpbHMuY2FjaGU7XG5cbi8qKlxuICogQ3VzdG9tIGZpbGUgbG9hZGVyLiBVc2VmdWwgZm9yIHRlbXBsYXRlIHByZXByb2Nlc3Npbmcgb3IgcmVzdHJpY3RpbmcgYWNjZXNzXG4gKiB0byBhIGNlcnRhaW4gcGFydCBvZiB0aGUgZmlsZXN5c3RlbS5cbiAqXG4gKiBAdHlwZSB7ZmlsZUxvYWRlcn1cbiAqL1xuXG5leHBvcnRzLmZpbGVMb2FkZXIgPSBmcy5yZWFkRmlsZVN5bmM7XG5cbi8qKlxuICogTmFtZSBvZiB0aGUgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGxvY2Fscy5cbiAqXG4gKiBUaGlzIHZhcmlhYmxlIGlzIG92ZXJyaWRkZW4gYnkge0BsaW5rIE9wdGlvbnN9YC5sb2NhbHNOYW1lYCBpZiBpdCBpcyBub3RcbiAqIGB1bmRlZmluZWRgLlxuICpcbiAqIEB0eXBlIHtTdHJpbmd9XG4gKiBAcHVibGljXG4gKi9cblxuZXhwb3J0cy5sb2NhbHNOYW1lID0gX0RFRkFVTFRfTE9DQUxTX05BTUU7XG5cbi8qKlxuICogUHJvbWlzZSBpbXBsZW1lbnRhdGlvbiAtLSBkZWZhdWx0cyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uIGlmIGF2YWlsYWJsZVxuICogVGhpcyBpcyBtb3N0bHkganVzdCBmb3IgdGVzdGFiaWxpdHlcbiAqXG4gKiBAdHlwZSB7UHJvbWlzZUNvbnN0cnVjdG9yTGlrZX1cbiAqIEBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnByb21pc2VJbXBsID0gKG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXM7JykpKCkuUHJvbWlzZTtcblxuLyoqXG4gKiBHZXQgdGhlIHBhdGggdG8gdGhlIGluY2x1ZGVkIGZpbGUgZnJvbSB0aGUgcGFyZW50IGZpbGUgcGF0aCBhbmQgdGhlXG4gKiBzcGVjaWZpZWQgcGF0aC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gIG5hbWUgICAgIHNwZWNpZmllZCBwYXRoXG4gKiBAcGFyYW0ge1N0cmluZ30gIGZpbGVuYW1lIHBhcmVudCBmaWxlIHBhdGhcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2lzRGlyPWZhbHNlXSB3aGV0aGVyIHRoZSBwYXJlbnQgZmlsZSBwYXRoIGlzIGEgZGlyZWN0b3J5XG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbmV4cG9ydHMucmVzb2x2ZUluY2x1ZGUgPSBmdW5jdGlvbihuYW1lLCBmaWxlbmFtZSwgaXNEaXIpIHtcbiAgdmFyIGRpcm5hbWUgPSBwYXRoLmRpcm5hbWU7XG4gIHZhciBleHRuYW1lID0gcGF0aC5leHRuYW1lO1xuICB2YXIgcmVzb2x2ZSA9IHBhdGgucmVzb2x2ZTtcbiAgdmFyIGluY2x1ZGVQYXRoID0gcmVzb2x2ZShpc0RpciA/IGZpbGVuYW1lIDogZGlybmFtZShmaWxlbmFtZSksIG5hbWUpO1xuICB2YXIgZXh0ID0gZXh0bmFtZShuYW1lKTtcbiAgaWYgKCFleHQpIHtcbiAgICBpbmNsdWRlUGF0aCArPSAnLmVqcyc7XG4gIH1cbiAgcmV0dXJuIGluY2x1ZGVQYXRoO1xufTtcblxuLyoqXG4gKiBUcnkgdG8gcmVzb2x2ZSBmaWxlIHBhdGggb24gbXVsdGlwbGUgZGlyZWN0b3JpZXNcbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICBuYW1lICBzcGVjaWZpZWQgcGF0aFxuICogQHBhcmFtICB7QXJyYXk8U3RyaW5nPn0gcGF0aHMgbGlzdCBvZiBwb3NzaWJsZSBwYXJlbnQgZGlyZWN0b3J5IHBhdGhzXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVQYXRocyhuYW1lLCBwYXRocykge1xuICB2YXIgZmlsZVBhdGg7XG4gIGlmIChwYXRocy5zb21lKGZ1bmN0aW9uICh2KSB7XG4gICAgZmlsZVBhdGggPSBleHBvcnRzLnJlc29sdmVJbmNsdWRlKG5hbWUsIHYsIHRydWUpO1xuICAgIHJldHVybiBmcy5leGlzdHNTeW5jKGZpbGVQYXRoKTtcbiAgfSkpIHtcbiAgICByZXR1cm4gZmlsZVBhdGg7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgdGhlIHBhdGggdG8gdGhlIGluY2x1ZGVkIGZpbGUgYnkgT3B0aW9uc1xuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gIHBhdGggICAgc3BlY2lmaWVkIHBhdGhcbiAqIEBwYXJhbSAge09wdGlvbnN9IG9wdGlvbnMgY29tcGlsYXRpb24gb3B0aW9uc1xuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRJbmNsdWRlUGF0aChwYXRoLCBvcHRpb25zKSB7XG4gIHZhciBpbmNsdWRlUGF0aDtcbiAgdmFyIGZpbGVQYXRoO1xuICB2YXIgdmlld3MgPSBvcHRpb25zLnZpZXdzO1xuICB2YXIgbWF0Y2ggPSAvXltBLVphLXpdKzpcXFxcfF5cXC8vLmV4ZWMocGF0aCk7XG5cbiAgLy8gQWJzIHBhdGhcbiAgaWYgKG1hdGNoICYmIG1hdGNoLmxlbmd0aCkge1xuICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoL15cXC8qLywgJycpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMucm9vdCkpIHtcbiAgICAgIGluY2x1ZGVQYXRoID0gcmVzb2x2ZVBhdGhzKHBhdGgsIG9wdGlvbnMucm9vdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluY2x1ZGVQYXRoID0gZXhwb3J0cy5yZXNvbHZlSW5jbHVkZShwYXRoLCBvcHRpb25zLnJvb3QgfHwgJy8nLCB0cnVlKTtcbiAgICB9XG4gIH1cbiAgLy8gUmVsYXRpdmUgcGF0aHNcbiAgZWxzZSB7XG4gICAgLy8gTG9vayByZWxhdGl2ZSB0byBhIHBhc3NlZCBmaWxlbmFtZSBmaXJzdFxuICAgIGlmIChvcHRpb25zLmZpbGVuYW1lKSB7XG4gICAgICBmaWxlUGF0aCA9IGV4cG9ydHMucmVzb2x2ZUluY2x1ZGUocGF0aCwgb3B0aW9ucy5maWxlbmFtZSk7XG4gICAgICBpZiAoZnMuZXhpc3RzU3luYyhmaWxlUGF0aCkpIHtcbiAgICAgICAgaW5jbHVkZVBhdGggPSBmaWxlUGF0aDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gVGhlbiBsb29rIGluIGFueSB2aWV3cyBkaXJlY3Rvcmllc1xuICAgIGlmICghaW5jbHVkZVBhdGggJiYgQXJyYXkuaXNBcnJheSh2aWV3cykpIHtcbiAgICAgIGluY2x1ZGVQYXRoID0gcmVzb2x2ZVBhdGhzKHBhdGgsIHZpZXdzKTtcbiAgICB9XG4gICAgaWYgKCFpbmNsdWRlUGF0aCAmJiB0eXBlb2Ygb3B0aW9ucy5pbmNsdWRlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCB0aGUgaW5jbHVkZSBmaWxlIFwiJyArXG4gICAgICAgICAgb3B0aW9ucy5lc2NhcGVGdW5jdGlvbihwYXRoKSArICdcIicpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaW5jbHVkZVBhdGg7XG59XG5cbi8qKlxuICogR2V0IHRoZSB0ZW1wbGF0ZSBmcm9tIGEgc3RyaW5nIG9yIGEgZmlsZSwgZWl0aGVyIGNvbXBpbGVkIG9uLXRoZS1mbHkgb3JcbiAqIHJlYWQgZnJvbSBjYWNoZSAoaWYgZW5hYmxlZCksIGFuZCBjYWNoZSB0aGUgdGVtcGxhdGUgaWYgbmVlZGVkLlxuICpcbiAqIElmIGB0ZW1wbGF0ZWAgaXMgbm90IHNldCwgdGhlIGZpbGUgc3BlY2lmaWVkIGluIGBvcHRpb25zLmZpbGVuYW1lYCB3aWxsIGJlXG4gKiByZWFkLlxuICpcbiAqIElmIGBvcHRpb25zLmNhY2hlYCBpcyB0cnVlLCB0aGlzIGZ1bmN0aW9uIHJlYWRzIHRoZSBmaWxlIGZyb21cbiAqIGBvcHRpb25zLmZpbGVuYW1lYCBzbyBpdCBtdXN0IGJlIHNldCBwcmlvciB0byBjYWxsaW5nIHRoaXMgZnVuY3Rpb24uXG4gKlxuICogQG1lbWJlcm9mIG1vZHVsZTplanMtaW50ZXJuYWxcbiAqIEBwYXJhbSB7T3B0aW9uc30gb3B0aW9ucyAgIGNvbXBpbGF0aW9uIG9wdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBbdGVtcGxhdGVdIHRlbXBsYXRlIHNvdXJjZVxuICogQHJldHVybiB7KFRlbXBsYXRlRnVuY3Rpb258Q2xpZW50RnVuY3Rpb24pfVxuICogRGVwZW5kaW5nIG9uIHRoZSB2YWx1ZSBvZiBgb3B0aW9ucy5jbGllbnRgLCBlaXRoZXIgdHlwZSBtaWdodCBiZSByZXR1cm5lZC5cbiAqIEBzdGF0aWNcbiAqL1xuXG5mdW5jdGlvbiBoYW5kbGVDYWNoZShvcHRpb25zLCB0ZW1wbGF0ZSkge1xuICB2YXIgZnVuYztcbiAgdmFyIGZpbGVuYW1lID0gb3B0aW9ucy5maWxlbmFtZTtcbiAgdmFyIGhhc1RlbXBsYXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDE7XG5cbiAgaWYgKG9wdGlvbnMuY2FjaGUpIHtcbiAgICBpZiAoIWZpbGVuYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhY2hlIG9wdGlvbiByZXF1aXJlcyBhIGZpbGVuYW1lJyk7XG4gICAgfVxuICAgIGZ1bmMgPSBleHBvcnRzLmNhY2hlLmdldChmaWxlbmFtZSk7XG4gICAgaWYgKGZ1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jO1xuICAgIH1cbiAgICBpZiAoIWhhc1RlbXBsYXRlKSB7XG4gICAgICB0ZW1wbGF0ZSA9IGZpbGVMb2FkZXIoZmlsZW5hbWUpLnRvU3RyaW5nKCkucmVwbGFjZShfQk9NLCAnJyk7XG4gICAgfVxuICB9XG4gIGVsc2UgaWYgKCFoYXNUZW1wbGF0ZSkge1xuICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBpZjogc2hvdWxkIG5vdCBoYXBwZW4gYXQgYWxsXG4gICAgaWYgKCFmaWxlbmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnRlcm5hbCBFSlMgZXJyb3I6IG5vIGZpbGUgbmFtZSBvciB0ZW1wbGF0ZSAnXG4gICAgICAgICAgICAgICAgICAgICsgJ3Byb3ZpZGVkJyk7XG4gICAgfVxuICAgIHRlbXBsYXRlID0gZmlsZUxvYWRlcihmaWxlbmFtZSkudG9TdHJpbmcoKS5yZXBsYWNlKF9CT00sICcnKTtcbiAgfVxuICBmdW5jID0gZXhwb3J0cy5jb21waWxlKHRlbXBsYXRlLCBvcHRpb25zKTtcbiAgaWYgKG9wdGlvbnMuY2FjaGUpIHtcbiAgICBleHBvcnRzLmNhY2hlLnNldChmaWxlbmFtZSwgZnVuYyk7XG4gIH1cbiAgcmV0dXJuIGZ1bmM7XG59XG5cbi8qKlxuICogVHJ5IGNhbGxpbmcgaGFuZGxlQ2FjaGUgd2l0aCB0aGUgZ2l2ZW4gb3B0aW9ucyBhbmQgZGF0YSBhbmQgY2FsbCB0aGVcbiAqIGNhbGxiYWNrIHdpdGggdGhlIHJlc3VsdC4gSWYgYW4gZXJyb3Igb2NjdXJzLCBjYWxsIHRoZSBjYWxsYmFjayB3aXRoXG4gKiB0aGUgZXJyb3IuIFVzZWQgYnkgcmVuZGVyRmlsZSgpLlxuICpcbiAqIEBtZW1iZXJvZiBtb2R1bGU6ZWpzLWludGVybmFsXG4gKiBAcGFyYW0ge09wdGlvbnN9IG9wdGlvbnMgICAgY29tcGlsYXRpb24gb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IGRhdGEgICAgICAgIHRlbXBsYXRlIGRhdGFcbiAqIEBwYXJhbSB7UmVuZGVyRmlsZUNhbGxiYWNrfSBjYiBjYWxsYmFja1xuICogQHN0YXRpY1xuICovXG5cbmZ1bmN0aW9uIHRyeUhhbmRsZUNhY2hlKG9wdGlvbnMsIGRhdGEsIGNiKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICghY2IpIHtcbiAgICBpZiAodHlwZW9mIGV4cG9ydHMucHJvbWlzZUltcGwgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIG5ldyBleHBvcnRzLnByb21pc2VJbXBsKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXN1bHQgPSBoYW5kbGVDYWNoZShvcHRpb25zKShkYXRhKTtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BsZWFzZSBwcm92aWRlIGEgY2FsbGJhY2sgZnVuY3Rpb24nKTtcbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGhhbmRsZUNhY2hlKG9wdGlvbnMpKGRhdGEpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gY2IoZXJyKTtcbiAgICB9XG5cbiAgICBjYihudWxsLCByZXN1bHQpO1xuICB9XG59XG5cbi8qKlxuICogZmlsZUxvYWRlciBpcyBpbmRlcGVuZGVudFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWxlUGF0aCBlanMgZmlsZSBwYXRoLlxuICogQHJldHVybiB7U3RyaW5nfSBUaGUgY29udGVudHMgb2YgdGhlIHNwZWNpZmllZCBmaWxlLlxuICogQHN0YXRpY1xuICovXG5cbmZ1bmN0aW9uIGZpbGVMb2FkZXIoZmlsZVBhdGgpe1xuICByZXR1cm4gZXhwb3J0cy5maWxlTG9hZGVyKGZpbGVQYXRoKTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHRlbXBsYXRlIGZ1bmN0aW9uLlxuICpcbiAqIElmIGBvcHRpb25zLmNhY2hlYCBpcyBgdHJ1ZWAsIHRoZW4gdGhlIHRlbXBsYXRlIGlzIGNhY2hlZC5cbiAqXG4gKiBAbWVtYmVyb2YgbW9kdWxlOmVqcy1pbnRlcm5hbFxuICogQHBhcmFtIHtTdHJpbmd9ICBwYXRoICAgIHBhdGggZm9yIHRoZSBzcGVjaWZpZWQgZmlsZVxuICogQHBhcmFtIHtPcHRpb25zfSBvcHRpb25zIGNvbXBpbGF0aW9uIG9wdGlvbnNcbiAqIEByZXR1cm4geyhUZW1wbGF0ZUZ1bmN0aW9ufENsaWVudEZ1bmN0aW9uKX1cbiAqIERlcGVuZGluZyBvbiB0aGUgdmFsdWUgb2YgYG9wdGlvbnMuY2xpZW50YCwgZWl0aGVyIHR5cGUgbWlnaHQgYmUgcmV0dXJuZWRcbiAqIEBzdGF0aWNcbiAqL1xuXG5mdW5jdGlvbiBpbmNsdWRlRmlsZShwYXRoLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gdXRpbHMuc2hhbGxvd0NvcHkodXRpbHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpLCBvcHRpb25zKTtcbiAgb3B0cy5maWxlbmFtZSA9IGdldEluY2x1ZGVQYXRoKHBhdGgsIG9wdHMpO1xuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5jbHVkZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgaW5jbHVkZXJSZXN1bHQgPSBvcHRpb25zLmluY2x1ZGVyKHBhdGgsIG9wdHMuZmlsZW5hbWUpO1xuICAgIGlmIChpbmNsdWRlclJlc3VsdCkge1xuICAgICAgaWYgKGluY2x1ZGVyUmVzdWx0LmZpbGVuYW1lKSB7XG4gICAgICAgIG9wdHMuZmlsZW5hbWUgPSBpbmNsdWRlclJlc3VsdC5maWxlbmFtZTtcbiAgICAgIH1cbiAgICAgIGlmIChpbmNsdWRlclJlc3VsdC50ZW1wbGF0ZSkge1xuICAgICAgICByZXR1cm4gaGFuZGxlQ2FjaGUob3B0cywgaW5jbHVkZXJSZXN1bHQudGVtcGxhdGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gaGFuZGxlQ2FjaGUob3B0cyk7XG59XG5cbi8qKlxuICogUmUtdGhyb3cgdGhlIGdpdmVuIGBlcnJgIGluIGNvbnRleHQgdG8gdGhlIGBzdHJgIG9mIGVqcywgYGZpbGVuYW1lYCwgYW5kXG4gKiBgbGluZW5vYC5cbiAqXG4gKiBAaW1wbGVtZW50cyB7UmV0aHJvd0NhbGxiYWNrfVxuICogQG1lbWJlcm9mIG1vZHVsZTplanMtaW50ZXJuYWxcbiAqIEBwYXJhbSB7RXJyb3J9ICBlcnIgICAgICBFcnJvciBvYmplY3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgICAgICBFSlMgc291cmNlXG4gKiBAcGFyYW0ge1N0cmluZ30gZmxubSAgICAgZmlsZSBuYW1lIG9mIHRoZSBFSlMgZmlsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVubyAgIGxpbmUgbnVtYmVyIG9mIHRoZSBlcnJvclxuICogQHBhcmFtIHtFc2NhcGVDYWxsYmFja30gZXNjXG4gKiBAc3RhdGljXG4gKi9cblxuZnVuY3Rpb24gcmV0aHJvdyhlcnIsIHN0ciwgZmxubSwgbGluZW5vLCBlc2MpIHtcbiAgdmFyIGxpbmVzID0gc3RyLnNwbGl0KCdcXG4nKTtcbiAgdmFyIHN0YXJ0ID0gTWF0aC5tYXgobGluZW5vIC0gMywgMCk7XG4gIHZhciBlbmQgPSBNYXRoLm1pbihsaW5lcy5sZW5ndGgsIGxpbmVubyArIDMpO1xuICB2YXIgZmlsZW5hbWUgPSBlc2MoZmxubSk7XG4gIC8vIEVycm9yIGNvbnRleHRcbiAgdmFyIGNvbnRleHQgPSBsaW5lcy5zbGljZShzdGFydCwgZW5kKS5tYXAoZnVuY3Rpb24gKGxpbmUsIGkpe1xuICAgIHZhciBjdXJyID0gaSArIHN0YXJ0ICsgMTtcbiAgICByZXR1cm4gKGN1cnIgPT0gbGluZW5vID8gJyA+PiAnIDogJyAgICAnKVxuICAgICAgKyBjdXJyXG4gICAgICArICd8ICdcbiAgICAgICsgbGluZTtcbiAgfSkuam9pbignXFxuJyk7XG5cbiAgLy8gQWx0ZXIgZXhjZXB0aW9uIG1lc3NhZ2VcbiAgZXJyLnBhdGggPSBmaWxlbmFtZTtcbiAgZXJyLm1lc3NhZ2UgPSAoZmlsZW5hbWUgfHwgJ2VqcycpICsgJzonXG4gICAgKyBsaW5lbm8gKyAnXFxuJ1xuICAgICsgY29udGV4dCArICdcXG5cXG4nXG4gICAgKyBlcnIubWVzc2FnZTtcblxuICB0aHJvdyBlcnI7XG59XG5cbmZ1bmN0aW9uIHN0cmlwU2VtaShzdHIpe1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLzsoXFxzKiQpLywgJyQxJyk7XG59XG5cbi8qKlxuICogQ29tcGlsZSB0aGUgZ2l2ZW4gYHN0cmAgb2YgZWpzIGludG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gIHRlbXBsYXRlIEVKUyB0ZW1wbGF0ZVxuICpcbiAqIEBwYXJhbSB7T3B0aW9uc30gW29wdHNdIGNvbXBpbGF0aW9uIG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJuIHsoVGVtcGxhdGVGdW5jdGlvbnxDbGllbnRGdW5jdGlvbil9XG4gKiBEZXBlbmRpbmcgb24gdGhlIHZhbHVlIG9mIGBvcHRzLmNsaWVudGAsIGVpdGhlciB0eXBlIG1pZ2h0IGJlIHJldHVybmVkLlxuICogTm90ZSB0aGF0IHRoZSByZXR1cm4gdHlwZSBvZiB0aGUgZnVuY3Rpb24gYWxzbyBkZXBlbmRzIG9uIHRoZSB2YWx1ZSBvZiBgb3B0cy5hc3luY2AuXG4gKiBAcHVibGljXG4gKi9cblxuZXhwb3J0cy5jb21waWxlID0gZnVuY3Rpb24gY29tcGlsZSh0ZW1wbGF0ZSwgb3B0cykge1xuICB2YXIgdGVtcGw7XG5cbiAgLy8gdjEgY29tcGF0XG4gIC8vICdzY29wZScgaXMgJ2NvbnRleHQnXG4gIC8vIEZJWE1FOiBSZW1vdmUgdGhpcyBpbiBhIGZ1dHVyZSB2ZXJzaW9uXG4gIGlmIChvcHRzICYmIG9wdHMuc2NvcGUpIHtcbiAgICBpZiAoIXNjb3BlT3B0aW9uV2FybmVkKXtcbiAgICAgIGNvbnNvbGUud2FybignYHNjb3BlYCBvcHRpb24gaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIEVKUyAzJyk7XG4gICAgICBzY29wZU9wdGlvbldhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIGlmICghb3B0cy5jb250ZXh0KSB7XG4gICAgICBvcHRzLmNvbnRleHQgPSBvcHRzLnNjb3BlO1xuICAgIH1cbiAgICBkZWxldGUgb3B0cy5zY29wZTtcbiAgfVxuICB0ZW1wbCA9IG5ldyBUZW1wbGF0ZSh0ZW1wbGF0ZSwgb3B0cyk7XG4gIHJldHVybiB0ZW1wbC5jb21waWxlKCk7XG59O1xuXG4vKipcbiAqIFJlbmRlciB0aGUgZ2l2ZW4gYHRlbXBsYXRlYCBvZiBlanMuXG4gKlxuICogSWYgeW91IHdvdWxkIGxpa2UgdG8gaW5jbHVkZSBvcHRpb25zIGJ1dCBub3QgZGF0YSwgeW91IG5lZWQgdG8gZXhwbGljaXRseVxuICogY2FsbCB0aGlzIGZ1bmN0aW9uIHdpdGggYGRhdGFgIGJlaW5nIGFuIGVtcHR5IG9iamVjdCBvciBgbnVsbGAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9ICAgdGVtcGxhdGUgRUpTIHRlbXBsYXRlXG4gKiBAcGFyYW0ge09iamVjdH0gIFtkYXRhPXt9XSB0ZW1wbGF0ZSBkYXRhXG4gKiBAcGFyYW0ge09wdGlvbnN9IFtvcHRzPXt9XSBjb21waWxhdGlvbiBhbmQgcmVuZGVyaW5nIG9wdGlvbnNcbiAqIEByZXR1cm4geyhTdHJpbmd8UHJvbWlzZTxTdHJpbmc+KX1cbiAqIFJldHVybiB2YWx1ZSB0eXBlIGRlcGVuZHMgb24gYG9wdHMuYXN5bmNgLlxuICogQHB1YmxpY1xuICovXG5cbmV4cG9ydHMucmVuZGVyID0gZnVuY3Rpb24gKHRlbXBsYXRlLCBkLCBvKSB7XG4gIHZhciBkYXRhID0gZCB8fCB1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCk7XG4gIHZhciBvcHRzID0gbyB8fCB1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCk7XG5cbiAgLy8gTm8gb3B0aW9ucyBvYmplY3QgLS0gaWYgdGhlcmUgYXJlIG9wdGlvbnkgbmFtZXNcbiAgLy8gaW4gdGhlIGRhdGEsIGNvcHkgdGhlbSB0byBvcHRpb25zXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDIpIHtcbiAgICB1dGlscy5zaGFsbG93Q29weUZyb21MaXN0KG9wdHMsIGRhdGEsIF9PUFRTX1BBU1NBQkxFX1dJVEhfREFUQSk7XG4gIH1cblxuICByZXR1cm4gaGFuZGxlQ2FjaGUob3B0cywgdGVtcGxhdGUpKGRhdGEpO1xufTtcblxuLyoqXG4gKiBSZW5kZXIgYW4gRUpTIGZpbGUgYXQgdGhlIGdpdmVuIGBwYXRoYCBhbmQgY2FsbGJhY2sgYGNiKGVyciwgc3RyKWAuXG4gKlxuICogSWYgeW91IHdvdWxkIGxpa2UgdG8gaW5jbHVkZSBvcHRpb25zIGJ1dCBub3QgZGF0YSwgeW91IG5lZWQgdG8gZXhwbGljaXRseVxuICogY2FsbCB0aGlzIGZ1bmN0aW9uIHdpdGggYGRhdGFgIGJlaW5nIGFuIGVtcHR5IG9iamVjdCBvciBgbnVsbGAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9ICAgICAgICAgICAgIHBhdGggICAgIHBhdGggdG8gdGhlIEVKUyBmaWxlXG4gKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICBbZGF0YT17fV0gdGVtcGxhdGUgZGF0YVxuICogQHBhcmFtIHtPcHRpb25zfSAgICAgICAgICAgW29wdHM9e31dIGNvbXBpbGF0aW9uIGFuZCByZW5kZXJpbmcgb3B0aW9uc1xuICogQHBhcmFtIHtSZW5kZXJGaWxlQ2FsbGJhY2t9IGNiIGNhbGxiYWNrXG4gKiBAcHVibGljXG4gKi9cblxuZXhwb3J0cy5yZW5kZXJGaWxlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gIHZhciBmaWxlbmFtZSA9IGFyZ3Muc2hpZnQoKTtcbiAgdmFyIGNiO1xuICB2YXIgb3B0cyA9IHtmaWxlbmFtZTogZmlsZW5hbWV9O1xuICB2YXIgZGF0YTtcbiAgdmFyIHZpZXdPcHRzO1xuXG4gIC8vIERvIHdlIGhhdmUgYSBjYWxsYmFjaz9cbiAgaWYgKHR5cGVvZiBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdID09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGFyZ3MucG9wKCk7XG4gIH1cbiAgLy8gRG8gd2UgaGF2ZSBkYXRhL29wdHM/XG4gIGlmIChhcmdzLmxlbmd0aCkge1xuICAgIC8vIFNob3VsZCBhbHdheXMgaGF2ZSBkYXRhIG9ialxuICAgIGRhdGEgPSBhcmdzLnNoaWZ0KCk7XG4gICAgLy8gTm9ybWFsIHBhc3NlZCBvcHRzIChkYXRhIG9iaiArIG9wdHMgb2JqKVxuICAgIGlmIChhcmdzLmxlbmd0aCkge1xuICAgICAgLy8gVXNlIHNoYWxsb3dDb3B5IHNvIHdlIGRvbid0IHBvbGx1dGUgcGFzc2VkIGluIG9wdHMgb2JqIHdpdGggbmV3IHZhbHNcbiAgICAgIHV0aWxzLnNoYWxsb3dDb3B5KG9wdHMsIGFyZ3MucG9wKCkpO1xuICAgIH1cbiAgICAvLyBTcGVjaWFsIGNhc2luZyBmb3IgRXhwcmVzcyAoc2V0dGluZ3MgKyBvcHRzLWluLWRhdGEpXG4gICAgZWxzZSB7XG4gICAgICAvLyBFeHByZXNzIDMgYW5kIDRcbiAgICAgIGlmIChkYXRhLnNldHRpbmdzKSB7XG4gICAgICAgIC8vIFB1bGwgYSBmZXcgdGhpbmdzIGZyb20ga25vd24gbG9jYXRpb25zXG4gICAgICAgIGlmIChkYXRhLnNldHRpbmdzLnZpZXdzKSB7XG4gICAgICAgICAgb3B0cy52aWV3cyA9IGRhdGEuc2V0dGluZ3Mudmlld3M7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuc2V0dGluZ3NbJ3ZpZXcgY2FjaGUnXSkge1xuICAgICAgICAgIG9wdHMuY2FjaGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFVuZG9jdW1lbnRlZCBhZnRlciBFeHByZXNzIDIsIGJ1dCBzdGlsbCB1c2FibGUsIGVzcC4gZm9yXG4gICAgICAgIC8vIGl0ZW1zIHRoYXQgYXJlIHVuc2FmZSB0byBiZSBwYXNzZWQgYWxvbmcgd2l0aCBkYXRhLCBsaWtlIGByb290YFxuICAgICAgICB2aWV3T3B0cyA9IGRhdGEuc2V0dGluZ3NbJ3ZpZXcgb3B0aW9ucyddO1xuICAgICAgICBpZiAodmlld09wdHMpIHtcbiAgICAgICAgICB1dGlscy5zaGFsbG93Q29weShvcHRzLCB2aWV3T3B0cyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEV4cHJlc3MgMiBhbmQgbG93ZXIsIHZhbHVlcyBzZXQgaW4gYXBwLmxvY2Fscywgb3IgcGVvcGxlIHdobyBqdXN0XG4gICAgICAvLyB3YW50IHRvIHBhc3Mgb3B0aW9ucyBpbiB0aGVpciBkYXRhLiBOT1RFOiBUaGVzZSB2YWx1ZXMgd2lsbCBvdmVycmlkZVxuICAgICAgLy8gYW55dGhpbmcgcHJldmlvdXNseSBzZXQgaW4gc2V0dGluZ3MgIG9yIHNldHRpbmdzWyd2aWV3IG9wdGlvbnMnXVxuICAgICAgdXRpbHMuc2hhbGxvd0NvcHlGcm9tTGlzdChvcHRzLCBkYXRhLCBfT1BUU19QQVNTQUJMRV9XSVRIX0RBVEFfRVhQUkVTUyk7XG4gICAgfVxuICAgIG9wdHMuZmlsZW5hbWUgPSBmaWxlbmFtZTtcbiAgfVxuICBlbHNlIHtcbiAgICBkYXRhID0gdXRpbHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpO1xuICB9XG5cbiAgcmV0dXJuIHRyeUhhbmRsZUNhY2hlKG9wdHMsIGRhdGEsIGNiKTtcbn07XG5cbi8qKlxuICogQ2xlYXIgaW50ZXJtZWRpYXRlIEphdmFTY3JpcHQgY2FjaGUuIENhbGxzIHtAbGluayBDYWNoZSNyZXNldH0uXG4gKiBAcHVibGljXG4gKi9cblxuLyoqXG4gKiBFSlMgdGVtcGxhdGUgY2xhc3NcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0cy5UZW1wbGF0ZSA9IFRlbXBsYXRlO1xuXG5leHBvcnRzLmNsZWFyQ2FjaGUgPSBmdW5jdGlvbiAoKSB7XG4gIGV4cG9ydHMuY2FjaGUucmVzZXQoKTtcbn07XG5cbmZ1bmN0aW9uIFRlbXBsYXRlKHRleHQsIG9wdHNQYXJhbSkge1xuICB2YXIgb3B0cyA9IHV0aWxzLmhhc093bk9ubHlPYmplY3Qob3B0c1BhcmFtKTtcbiAgdmFyIG9wdGlvbnMgPSB1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCk7XG4gIHRoaXMudGVtcGxhdGVUZXh0ID0gdGV4dDtcbiAgLyoqIEB0eXBlIHtzdHJpbmcgfCBudWxsfSAqL1xuICB0aGlzLm1vZGUgPSBudWxsO1xuICB0aGlzLnRydW5jYXRlID0gZmFsc2U7XG4gIHRoaXMuY3VycmVudExpbmUgPSAxO1xuICB0aGlzLnNvdXJjZSA9ICcnO1xuICBvcHRpb25zLmNsaWVudCA9IG9wdHMuY2xpZW50IHx8IGZhbHNlO1xuICBvcHRpb25zLmVzY2FwZUZ1bmN0aW9uID0gb3B0cy5lc2NhcGUgfHwgb3B0cy5lc2NhcGVGdW5jdGlvbiB8fCB1dGlscy5lc2NhcGVYTUw7XG4gIG9wdGlvbnMuY29tcGlsZURlYnVnID0gb3B0cy5jb21waWxlRGVidWcgIT09IGZhbHNlO1xuICBvcHRpb25zLmRlYnVnID0gISFvcHRzLmRlYnVnO1xuICBvcHRpb25zLmZpbGVuYW1lID0gb3B0cy5maWxlbmFtZTtcbiAgb3B0aW9ucy5vcGVuRGVsaW1pdGVyID0gb3B0cy5vcGVuRGVsaW1pdGVyIHx8IGV4cG9ydHMub3BlbkRlbGltaXRlciB8fCBfREVGQVVMVF9PUEVOX0RFTElNSVRFUjtcbiAgb3B0aW9ucy5jbG9zZURlbGltaXRlciA9IG9wdHMuY2xvc2VEZWxpbWl0ZXIgfHwgZXhwb3J0cy5jbG9zZURlbGltaXRlciB8fCBfREVGQVVMVF9DTE9TRV9ERUxJTUlURVI7XG4gIG9wdGlvbnMuZGVsaW1pdGVyID0gb3B0cy5kZWxpbWl0ZXIgfHwgZXhwb3J0cy5kZWxpbWl0ZXIgfHwgX0RFRkFVTFRfREVMSU1JVEVSO1xuICBvcHRpb25zLnN0cmljdCA9IG9wdHMuc3RyaWN0IHx8IGZhbHNlO1xuICBvcHRpb25zLmNvbnRleHQgPSBvcHRzLmNvbnRleHQ7XG4gIG9wdGlvbnMuY2FjaGUgPSBvcHRzLmNhY2hlIHx8IGZhbHNlO1xuICBvcHRpb25zLnJtV2hpdGVzcGFjZSA9IG9wdHMucm1XaGl0ZXNwYWNlO1xuICBvcHRpb25zLnJvb3QgPSBvcHRzLnJvb3Q7XG4gIG9wdGlvbnMuaW5jbHVkZXIgPSBvcHRzLmluY2x1ZGVyO1xuICBvcHRpb25zLm91dHB1dEZ1bmN0aW9uTmFtZSA9IG9wdHMub3V0cHV0RnVuY3Rpb25OYW1lO1xuICBvcHRpb25zLmxvY2Fsc05hbWUgPSBvcHRzLmxvY2Fsc05hbWUgfHwgZXhwb3J0cy5sb2NhbHNOYW1lIHx8IF9ERUZBVUxUX0xPQ0FMU19OQU1FO1xuICBvcHRpb25zLnZpZXdzID0gb3B0cy52aWV3cztcbiAgb3B0aW9ucy5hc3luYyA9IG9wdHMuYXN5bmM7XG4gIG9wdGlvbnMuZGVzdHJ1Y3R1cmVkTG9jYWxzID0gb3B0cy5kZXN0cnVjdHVyZWRMb2NhbHM7XG4gIG9wdGlvbnMubGVnYWN5SW5jbHVkZSA9IHR5cGVvZiBvcHRzLmxlZ2FjeUluY2x1ZGUgIT0gJ3VuZGVmaW5lZCcgPyAhIW9wdHMubGVnYWN5SW5jbHVkZSA6IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMuc3RyaWN0KSB7XG4gICAgb3B0aW9ucy5fd2l0aCA9IGZhbHNlO1xuICB9XG4gIGVsc2Uge1xuICAgIG9wdGlvbnMuX3dpdGggPSB0eXBlb2Ygb3B0cy5fd2l0aCAhPSAndW5kZWZpbmVkJyA/IG9wdHMuX3dpdGggOiB0cnVlO1xuICB9XG5cbiAgdGhpcy5vcHRzID0gb3B0aW9ucztcblxuICB0aGlzLnJlZ2V4ID0gdGhpcy5jcmVhdGVSZWdleCgpO1xufVxuXG5UZW1wbGF0ZS5tb2RlcyA9IHtcbiAgRVZBTDogJ2V2YWwnLFxuICBFU0NBUEVEOiAnZXNjYXBlZCcsXG4gIFJBVzogJ3JhdycsXG4gIENPTU1FTlQ6ICdjb21tZW50JyxcbiAgTElURVJBTDogJ2xpdGVyYWwnXG59O1xuXG5UZW1wbGF0ZS5wcm90b3R5cGUgPSB7XG4gIGNyZWF0ZVJlZ2V4OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0ciA9IF9SRUdFWF9TVFJJTkc7XG4gICAgdmFyIGRlbGltID0gdXRpbHMuZXNjYXBlUmVnRXhwQ2hhcnModGhpcy5vcHRzLmRlbGltaXRlcik7XG4gICAgdmFyIG9wZW4gPSB1dGlscy5lc2NhcGVSZWdFeHBDaGFycyh0aGlzLm9wdHMub3BlbkRlbGltaXRlcik7XG4gICAgdmFyIGNsb3NlID0gdXRpbHMuZXNjYXBlUmVnRXhwQ2hhcnModGhpcy5vcHRzLmNsb3NlRGVsaW1pdGVyKTtcbiAgICBzdHIgPSBzdHIucmVwbGFjZSgvJS9nLCBkZWxpbSlcbiAgICAgIC5yZXBsYWNlKC88L2csIG9wZW4pXG4gICAgICAucmVwbGFjZSgvPi9nLCBjbG9zZSk7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoc3RyKTtcbiAgfSxcblxuICBjb21waWxlOiBmdW5jdGlvbiAoKSB7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgdmFyIHNyYztcbiAgICAvKiogQHR5cGUge0NsaWVudEZ1bmN0aW9ufSAqL1xuICAgIHZhciBmbjtcbiAgICB2YXIgb3B0cyA9IHRoaXMub3B0cztcbiAgICB2YXIgcHJlcGVuZGVkID0gJyc7XG4gICAgdmFyIGFwcGVuZGVkID0gJyc7XG4gICAgLyoqIEB0eXBlIHtFc2NhcGVDYWxsYmFja30gKi9cbiAgICB2YXIgZXNjYXBlRm4gPSBvcHRzLmVzY2FwZUZ1bmN0aW9uO1xuICAgIC8qKiBAdHlwZSB7RnVuY3Rpb25Db25zdHJ1Y3Rvcn0gKi9cbiAgICB2YXIgY3RvcjtcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICB2YXIgc2FuaXRpemVkRmlsZW5hbWUgPSBvcHRzLmZpbGVuYW1lID8gSlNPTi5zdHJpbmdpZnkob3B0cy5maWxlbmFtZSkgOiAndW5kZWZpbmVkJztcblxuICAgIGlmICghdGhpcy5zb3VyY2UpIHtcbiAgICAgIHRoaXMuZ2VuZXJhdGVTb3VyY2UoKTtcbiAgICAgIHByZXBlbmRlZCArPVxuICAgICAgICAnICB2YXIgX19vdXRwdXQgPSBcIlwiO1xcbicgK1xuICAgICAgICAnICBmdW5jdGlvbiBfX2FwcGVuZChzKSB7IGlmIChzICE9PSB1bmRlZmluZWQgJiYgcyAhPT0gbnVsbCkgX19vdXRwdXQgKz0gcyB9XFxuJztcbiAgICAgIGlmIChvcHRzLm91dHB1dEZ1bmN0aW9uTmFtZSkge1xuICAgICAgICBpZiAoIV9KU19JREVOVElGSUVSLnRlc3Qob3B0cy5vdXRwdXRGdW5jdGlvbk5hbWUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdvdXRwdXRGdW5jdGlvbk5hbWUgaXMgbm90IGEgdmFsaWQgSlMgaWRlbnRpZmllci4nKTtcbiAgICAgICAgfVxuICAgICAgICBwcmVwZW5kZWQgKz0gJyAgdmFyICcgKyBvcHRzLm91dHB1dEZ1bmN0aW9uTmFtZSArICcgPSBfX2FwcGVuZDsnICsgJ1xcbic7XG4gICAgICB9XG4gICAgICBpZiAob3B0cy5sb2NhbHNOYW1lICYmICFfSlNfSURFTlRJRklFUi50ZXN0KG9wdHMubG9jYWxzTmFtZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdsb2NhbHNOYW1lIGlzIG5vdCBhIHZhbGlkIEpTIGlkZW50aWZpZXIuJyk7XG4gICAgICB9XG4gICAgICBpZiAob3B0cy5kZXN0cnVjdHVyZWRMb2NhbHMgJiYgb3B0cy5kZXN0cnVjdHVyZWRMb2NhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBkZXN0cnVjdHVyaW5nID0gJyAgdmFyIF9fbG9jYWxzID0gKCcgKyBvcHRzLmxvY2Fsc05hbWUgKyAnIHx8IHt9KSxcXG4nO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wdHMuZGVzdHJ1Y3R1cmVkTG9jYWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIG5hbWUgPSBvcHRzLmRlc3RydWN0dXJlZExvY2Fsc1tpXTtcbiAgICAgICAgICBpZiAoIV9KU19JREVOVElGSUVSLnRlc3QobmFtZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZGVzdHJ1Y3R1cmVkTG9jYWxzWycgKyBpICsgJ10gaXMgbm90IGEgdmFsaWQgSlMgaWRlbnRpZmllci4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICBkZXN0cnVjdHVyaW5nICs9ICcsXFxuICAnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZXN0cnVjdHVyaW5nICs9IG5hbWUgKyAnID0gX19sb2NhbHMuJyArIG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcHJlcGVuZGVkICs9IGRlc3RydWN0dXJpbmcgKyAnO1xcbic7XG4gICAgICB9XG4gICAgICBpZiAob3B0cy5fd2l0aCAhPT0gZmFsc2UpIHtcbiAgICAgICAgcHJlcGVuZGVkICs9ICAnICB3aXRoICgnICsgb3B0cy5sb2NhbHNOYW1lICsgJyB8fCB7fSkgeycgKyAnXFxuJztcbiAgICAgICAgYXBwZW5kZWQgKz0gJyAgfScgKyAnXFxuJztcbiAgICAgIH1cbiAgICAgIGFwcGVuZGVkICs9ICcgIHJldHVybiBfX291dHB1dDsnICsgJ1xcbic7XG4gICAgICB0aGlzLnNvdXJjZSA9IHByZXBlbmRlZCArIHRoaXMuc291cmNlICsgYXBwZW5kZWQ7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMuY29tcGlsZURlYnVnKSB7XG4gICAgICBzcmMgPSAndmFyIF9fbGluZSA9IDEnICsgJ1xcbidcbiAgICAgICAgKyAnICAsIF9fbGluZXMgPSAnICsgSlNPTi5zdHJpbmdpZnkodGhpcy50ZW1wbGF0ZVRleHQpICsgJ1xcbidcbiAgICAgICAgKyAnICAsIF9fZmlsZW5hbWUgPSAnICsgc2FuaXRpemVkRmlsZW5hbWUgKyAnOycgKyAnXFxuJ1xuICAgICAgICArICd0cnkgeycgKyAnXFxuJ1xuICAgICAgICArIHRoaXMuc291cmNlXG4gICAgICAgICsgJ30gY2F0Y2ggKGUpIHsnICsgJ1xcbidcbiAgICAgICAgKyAnICByZXRocm93KGUsIF9fbGluZXMsIF9fZmlsZW5hbWUsIF9fbGluZSwgZXNjYXBlRm4pOycgKyAnXFxuJ1xuICAgICAgICArICd9JyArICdcXG4nO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHNyYyA9IHRoaXMuc291cmNlO1xuICAgIH1cblxuICAgIGlmIChvcHRzLmNsaWVudCkge1xuICAgICAgc3JjID0gJ2VzY2FwZUZuID0gZXNjYXBlRm4gfHwgJyArIGVzY2FwZUZuLnRvU3RyaW5nKCkgKyAnOycgKyAnXFxuJyArIHNyYztcbiAgICAgIGlmIChvcHRzLmNvbXBpbGVEZWJ1Zykge1xuICAgICAgICBzcmMgPSAncmV0aHJvdyA9IHJldGhyb3cgfHwgJyArIHJldGhyb3cudG9TdHJpbmcoKSArICc7JyArICdcXG4nICsgc3JjO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRzLnN0cmljdCkge1xuICAgICAgc3JjID0gJ1widXNlIHN0cmljdFwiO1xcbicgKyBzcmM7XG4gICAgfVxuICAgIGlmIChvcHRzLmRlYnVnKSB7XG4gICAgICBjb25zb2xlLmxvZyhzcmMpO1xuICAgIH1cbiAgICBpZiAob3B0cy5jb21waWxlRGVidWcgJiYgb3B0cy5maWxlbmFtZSkge1xuICAgICAgc3JjID0gc3JjICsgJ1xcbidcbiAgICAgICAgKyAnLy8jIHNvdXJjZVVSTD0nICsgc2FuaXRpemVkRmlsZW5hbWUgKyAnXFxuJztcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaWYgKG9wdHMuYXN5bmMpIHtcbiAgICAgICAgLy8gSGF2ZSB0byB1c2UgZ2VuZXJhdGVkIGZ1bmN0aW9uIGZvciB0aGlzLCBzaW5jZSBpbiBlbnZzIHdpdGhvdXQgc3VwcG9ydCxcbiAgICAgICAgLy8gaXQgYnJlYWtzIGluIHBhcnNpbmdcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjdG9yID0gKG5ldyBGdW5jdGlvbigncmV0dXJuIChhc3luYyBmdW5jdGlvbigpe30pLmNvbnN0cnVjdG9yOycpKSgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoKGUpIHtcbiAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIFN5bnRheEVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBhc3luYy9hd2FpdCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY3RvciA9IEZ1bmN0aW9uO1xuICAgICAgfVxuICAgICAgZm4gPSBuZXcgY3RvcihvcHRzLmxvY2Fsc05hbWUgKyAnLCBlc2NhcGVGbiwgaW5jbHVkZSwgcmV0aHJvdycsIHNyYyk7XG4gICAgfVxuICAgIGNhdGNoKGUpIHtcbiAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlXG4gICAgICBpZiAoZSBpbnN0YW5jZW9mIFN5bnRheEVycm9yKSB7XG4gICAgICAgIGlmIChvcHRzLmZpbGVuYW1lKSB7XG4gICAgICAgICAgZS5tZXNzYWdlICs9ICcgaW4gJyArIG9wdHMuZmlsZW5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgZS5tZXNzYWdlICs9ICcgd2hpbGUgY29tcGlsaW5nIGVqc1xcblxcbic7XG4gICAgICAgIGUubWVzc2FnZSArPSAnSWYgdGhlIGFib3ZlIGVycm9yIGlzIG5vdCBoZWxwZnVsLCB5b3UgbWF5IHdhbnQgdG8gdHJ5IEVKUy1MaW50Olxcbic7XG4gICAgICAgIGUubWVzc2FnZSArPSAnaHR0cHM6Ly9naXRodWIuY29tL1J5YW5aaW0vRUpTLUxpbnQnO1xuICAgICAgICBpZiAoIW9wdHMuYXN5bmMpIHtcbiAgICAgICAgICBlLm1lc3NhZ2UgKz0gJ1xcbic7XG4gICAgICAgICAgZS5tZXNzYWdlICs9ICdPciwgaWYgeW91IG1lYW50IHRvIGNyZWF0ZSBhbiBhc3luYyBmdW5jdGlvbiwgcGFzcyBgYXN5bmM6IHRydWVgIGFzIGFuIG9wdGlvbi4nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aHJvdyBlO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBhIGNhbGxhYmxlIGZ1bmN0aW9uIHdoaWNoIHdpbGwgZXhlY3V0ZSB0aGUgZnVuY3Rpb25cbiAgICAvLyBjcmVhdGVkIGJ5IHRoZSBzb3VyY2UtY29kZSwgd2l0aCB0aGUgcGFzc2VkIGRhdGEgYXMgbG9jYWxzXG4gICAgLy8gQWRkcyBhIGxvY2FsIGBpbmNsdWRlYCBmdW5jdGlvbiB3aGljaCBhbGxvd3MgZnVsbCByZWN1cnNpdmUgaW5jbHVkZVxuICAgIHZhciByZXR1cm5lZEZuID0gb3B0cy5jbGllbnQgPyBmbiA6IGZ1bmN0aW9uIGFub255bW91cyhkYXRhKSB7XG4gICAgICB2YXIgaW5jbHVkZSA9IGZ1bmN0aW9uIChwYXRoLCBpbmNsdWRlRGF0YSkge1xuICAgICAgICB2YXIgZCA9IHV0aWxzLnNoYWxsb3dDb3B5KHV0aWxzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKSwgZGF0YSk7XG4gICAgICAgIGlmIChpbmNsdWRlRGF0YSkge1xuICAgICAgICAgIGQgPSB1dGlscy5zaGFsbG93Q29weShkLCBpbmNsdWRlRGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluY2x1ZGVGaWxlKHBhdGgsIG9wdHMpKGQpO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBmbi5hcHBseShvcHRzLmNvbnRleHQsXG4gICAgICAgIFtkYXRhIHx8IHV0aWxzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKSwgZXNjYXBlRm4sIGluY2x1ZGUsIHJldGhyb3ddKTtcbiAgICB9O1xuICAgIGlmIChvcHRzLmZpbGVuYW1lICYmIHR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydHkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciBmaWxlbmFtZSA9IG9wdHMuZmlsZW5hbWU7XG4gICAgICB2YXIgYmFzZW5hbWUgPSBwYXRoLmJhc2VuYW1lKGZpbGVuYW1lLCBwYXRoLmV4dG5hbWUoZmlsZW5hbWUpKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXR1cm5lZEZuLCAnbmFtZScsIHtcbiAgICAgICAgICB2YWx1ZTogYmFzZW5hbWUsXG4gICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsvKiBpZ25vcmUgKi99XG4gICAgfVxuICAgIHJldHVybiByZXR1cm5lZEZuO1xuICB9LFxuXG4gIGdlbmVyYXRlU291cmNlOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdHMgPSB0aGlzLm9wdHM7XG5cbiAgICBpZiAob3B0cy5ybVdoaXRlc3BhY2UpIHtcbiAgICAgIC8vIEhhdmUgdG8gdXNlIHR3byBzZXBhcmF0ZSByZXBsYWNlIGhlcmUgYXMgYF5gIGFuZCBgJGAgb3BlcmF0b3JzIGRvbid0XG4gICAgICAvLyB3b3JrIHdlbGwgd2l0aCBgXFxyYCBhbmQgZW1wdHkgbGluZXMgZG9uJ3Qgd29yayB3ZWxsIHdpdGggdGhlIGBtYCBmbGFnLlxuICAgICAgdGhpcy50ZW1wbGF0ZVRleHQgPVxuICAgICAgICB0aGlzLnRlbXBsYXRlVGV4dC5yZXBsYWNlKC9bXFxyXFxuXSsvZywgJ1xcbicpLnJlcGxhY2UoL15cXHMrfFxccyskL2dtLCAnJyk7XG4gICAgfVxuXG4gICAgLy8gU2x1cnAgc3BhY2VzIGFuZCB0YWJzIGJlZm9yZSA8JV8gYW5kIGFmdGVyIF8lPlxuICAgIHRoaXMudGVtcGxhdGVUZXh0ID1cbiAgICAgIHRoaXMudGVtcGxhdGVUZXh0LnJlcGxhY2UoL1sgXFx0XSo8JV8vZ20sICc8JV8nKS5yZXBsYWNlKC9fJT5bIFxcdF0qL2dtLCAnXyU+Jyk7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIG1hdGNoZXMgPSB0aGlzLnBhcnNlVGVtcGxhdGVUZXh0KCk7XG4gICAgdmFyIGQgPSB0aGlzLm9wdHMuZGVsaW1pdGVyO1xuICAgIHZhciBvID0gdGhpcy5vcHRzLm9wZW5EZWxpbWl0ZXI7XG4gICAgdmFyIGMgPSB0aGlzLm9wdHMuY2xvc2VEZWxpbWl0ZXI7XG5cbiAgICBpZiAobWF0Y2hlcyAmJiBtYXRjaGVzLmxlbmd0aCkge1xuICAgICAgbWF0Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uIChsaW5lLCBpbmRleCkge1xuICAgICAgICB2YXIgY2xvc2luZztcbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhbiBvcGVuaW5nIHRhZywgY2hlY2sgZm9yIGNsb3NpbmcgdGFnc1xuICAgICAgICAvLyBGSVhNRTogTWF5IGVuZCB1cCB3aXRoIHNvbWUgZmFsc2UgcG9zaXRpdmVzIGhlcmVcbiAgICAgICAgLy8gQmV0dGVyIHRvIHN0b3JlIG1vZGVzIGFzIGsvdiB3aXRoIG9wZW5EZWxpbWl0ZXIgKyBkZWxpbWl0ZXIgYXMga2V5XG4gICAgICAgIC8vIFRoZW4gdGhpcyBjYW4gc2ltcGx5IGNoZWNrIGFnYWluc3QgdGhlIG1hcFxuICAgICAgICBpZiAoIGxpbmUuaW5kZXhPZihvICsgZCkgPT09IDAgICAgICAgIC8vIElmIGl0IGlzIGEgdGFnXG4gICAgICAgICAgJiYgbGluZS5pbmRleE9mKG8gKyBkICsgZCkgIT09IDApIHsgLy8gYW5kIGlzIG5vdCBlc2NhcGVkXG4gICAgICAgICAgY2xvc2luZyA9IG1hdGNoZXNbaW5kZXggKyAyXTtcbiAgICAgICAgICBpZiAoIShjbG9zaW5nID09IGQgKyBjIHx8IGNsb3NpbmcgPT0gJy0nICsgZCArIGMgfHwgY2xvc2luZyA9PSAnXycgKyBkICsgYykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgbWF0Y2hpbmcgY2xvc2UgdGFnIGZvciBcIicgKyBsaW5lICsgJ1wiLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZWxmLnNjYW5MaW5lKGxpbmUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gIH0sXG5cbiAgcGFyc2VUZW1wbGF0ZVRleHQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RyID0gdGhpcy50ZW1wbGF0ZVRleHQ7XG4gICAgdmFyIHBhdCA9IHRoaXMucmVnZXg7XG4gICAgdmFyIHJlc3VsdCA9IHBhdC5leGVjKHN0cik7XG4gICAgdmFyIGFyciA9IFtdO1xuICAgIHZhciBmaXJzdFBvcztcblxuICAgIHdoaWxlIChyZXN1bHQpIHtcbiAgICAgIGZpcnN0UG9zID0gcmVzdWx0LmluZGV4O1xuXG4gICAgICBpZiAoZmlyc3RQb3MgIT09IDApIHtcbiAgICAgICAgYXJyLnB1c2goc3RyLnN1YnN0cmluZygwLCBmaXJzdFBvcykpO1xuICAgICAgICBzdHIgPSBzdHIuc2xpY2UoZmlyc3RQb3MpO1xuICAgICAgfVxuXG4gICAgICBhcnIucHVzaChyZXN1bHRbMF0pO1xuICAgICAgc3RyID0gc3RyLnNsaWNlKHJlc3VsdFswXS5sZW5ndGgpO1xuICAgICAgcmVzdWx0ID0gcGF0LmV4ZWMoc3RyKTtcbiAgICB9XG5cbiAgICBpZiAoc3RyKSB7XG4gICAgICBhcnIucHVzaChzdHIpO1xuICAgIH1cblxuICAgIHJldHVybiBhcnI7XG4gIH0sXG5cbiAgX2FkZE91dHB1dDogZnVuY3Rpb24gKGxpbmUpIHtcbiAgICBpZiAodGhpcy50cnVuY2F0ZSkge1xuICAgICAgLy8gT25seSByZXBsYWNlIHNpbmdsZSBsZWFkaW5nIGxpbmVicmVhayBpbiB0aGUgbGluZSBhZnRlclxuICAgICAgLy8gLSU+IHRhZyAtLSB0aGlzIGlzIHRoZSBzaW5nbGUsIHRyYWlsaW5nIGxpbmVicmVha1xuICAgICAgLy8gYWZ0ZXIgdGhlIHRhZyB0aGF0IHRoZSB0cnVuY2F0aW9uIG1vZGUgcmVwbGFjZXNcbiAgICAgIC8vIEhhbmRsZSBXaW4gLyBVbml4IC8gb2xkIE1hYyBsaW5lYnJlYWtzIC0tIGRvIHRoZSBcXHJcXG5cbiAgICAgIC8vIGNvbWJvIGZpcnN0IGluIHRoZSByZWdleC1vclxuICAgICAgbGluZSA9IGxpbmUucmVwbGFjZSgvXig/OlxcclxcbnxcXHJ8XFxuKS8sICcnKTtcbiAgICAgIHRoaXMudHJ1bmNhdGUgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFsaW5lKSB7XG4gICAgICByZXR1cm4gbGluZTtcbiAgICB9XG5cbiAgICAvLyBQcmVzZXJ2ZSBsaXRlcmFsIHNsYXNoZXNcbiAgICBsaW5lID0gbGluZS5yZXBsYWNlKC9cXFxcL2csICdcXFxcXFxcXCcpO1xuXG4gICAgLy8gQ29udmVydCBsaW5lYnJlYWtzXG4gICAgbGluZSA9IGxpbmUucmVwbGFjZSgvXFxuL2csICdcXFxcbicpO1xuICAgIGxpbmUgPSBsaW5lLnJlcGxhY2UoL1xcci9nLCAnXFxcXHInKTtcblxuICAgIC8vIEVzY2FwZSBkb3VibGUtcXVvdGVzXG4gICAgLy8gLSB0aGlzIHdpbGwgYmUgdGhlIGRlbGltaXRlciBkdXJpbmcgZXhlY3V0aW9uXG4gICAgbGluZSA9IGxpbmUucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpO1xuICAgIHRoaXMuc291cmNlICs9ICcgICAgOyBfX2FwcGVuZChcIicgKyBsaW5lICsgJ1wiKScgKyAnXFxuJztcbiAgfSxcblxuICBzY2FuTGluZTogZnVuY3Rpb24gKGxpbmUpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGQgPSB0aGlzLm9wdHMuZGVsaW1pdGVyO1xuICAgIHZhciBvID0gdGhpcy5vcHRzLm9wZW5EZWxpbWl0ZXI7XG4gICAgdmFyIGMgPSB0aGlzLm9wdHMuY2xvc2VEZWxpbWl0ZXI7XG4gICAgdmFyIG5ld0xpbmVDb3VudCA9IDA7XG5cbiAgICBuZXdMaW5lQ291bnQgPSAobGluZS5zcGxpdCgnXFxuJykubGVuZ3RoIC0gMSk7XG5cbiAgICBzd2l0Y2ggKGxpbmUpIHtcbiAgICBjYXNlIG8gKyBkOlxuICAgIGNhc2UgbyArIGQgKyAnXyc6XG4gICAgICB0aGlzLm1vZGUgPSBUZW1wbGF0ZS5tb2Rlcy5FVkFMO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBvICsgZCArICc9JzpcbiAgICAgIHRoaXMubW9kZSA9IFRlbXBsYXRlLm1vZGVzLkVTQ0FQRUQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlIG8gKyBkICsgJy0nOlxuICAgICAgdGhpcy5tb2RlID0gVGVtcGxhdGUubW9kZXMuUkFXO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBvICsgZCArICcjJzpcbiAgICAgIHRoaXMubW9kZSA9IFRlbXBsYXRlLm1vZGVzLkNPTU1FTlQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlIG8gKyBkICsgZDpcbiAgICAgIHRoaXMubW9kZSA9IFRlbXBsYXRlLm1vZGVzLkxJVEVSQUw7XG4gICAgICB0aGlzLnNvdXJjZSArPSAnICAgIDsgX19hcHBlbmQoXCInICsgbGluZS5yZXBsYWNlKG8gKyBkICsgZCwgbyArIGQpICsgJ1wiKScgKyAnXFxuJztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgZCArIGQgKyBjOlxuICAgICAgdGhpcy5tb2RlID0gVGVtcGxhdGUubW9kZXMuTElURVJBTDtcbiAgICAgIHRoaXMuc291cmNlICs9ICcgICAgOyBfX2FwcGVuZChcIicgKyBsaW5lLnJlcGxhY2UoZCArIGQgKyBjLCBkICsgYykgKyAnXCIpJyArICdcXG4nO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBkICsgYzpcbiAgICBjYXNlICctJyArIGQgKyBjOlxuICAgIGNhc2UgJ18nICsgZCArIGM6XG4gICAgICBpZiAodGhpcy5tb2RlID09IFRlbXBsYXRlLm1vZGVzLkxJVEVSQUwpIHtcbiAgICAgICAgdGhpcy5fYWRkT3V0cHV0KGxpbmUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm1vZGUgPSBudWxsO1xuICAgICAgdGhpcy50cnVuY2F0ZSA9IGxpbmUuaW5kZXhPZignLScpID09PSAwIHx8IGxpbmUuaW5kZXhPZignXycpID09PSAwO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIEluIHNjcmlwdCBtb2RlLCBkZXBlbmRzIG9uIHR5cGUgb2YgdGFnXG4gICAgICBpZiAodGhpcy5tb2RlKSB7XG4gICAgICAgIC8vIElmICcvLycgaXMgZm91bmQgd2l0aG91dCBhIGxpbmUgYnJlYWssIGFkZCBhIGxpbmUgYnJlYWsuXG4gICAgICAgIHN3aXRjaCAodGhpcy5tb2RlKSB7XG4gICAgICAgIGNhc2UgVGVtcGxhdGUubW9kZXMuRVZBTDpcbiAgICAgICAgY2FzZSBUZW1wbGF0ZS5tb2Rlcy5FU0NBUEVEOlxuICAgICAgICBjYXNlIFRlbXBsYXRlLm1vZGVzLlJBVzpcbiAgICAgICAgICBpZiAobGluZS5sYXN0SW5kZXhPZignLy8nKSA+IGxpbmUubGFzdEluZGV4T2YoJ1xcbicpKSB7XG4gICAgICAgICAgICBsaW5lICs9ICdcXG4nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHRoaXMubW9kZSkge1xuICAgICAgICAvLyBKdXN0IGV4ZWN1dGluZyBjb2RlXG4gICAgICAgIGNhc2UgVGVtcGxhdGUubW9kZXMuRVZBTDpcbiAgICAgICAgICB0aGlzLnNvdXJjZSArPSAnICAgIDsgJyArIGxpbmUgKyAnXFxuJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgICAvLyBFeGVjLCBlc2MsIGFuZCBvdXRwdXRcbiAgICAgICAgY2FzZSBUZW1wbGF0ZS5tb2Rlcy5FU0NBUEVEOlxuICAgICAgICAgIHRoaXMuc291cmNlICs9ICcgICAgOyBfX2FwcGVuZChlc2NhcGVGbignICsgc3RyaXBTZW1pKGxpbmUpICsgJykpJyArICdcXG4nO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIC8vIEV4ZWMgYW5kIG91dHB1dFxuICAgICAgICBjYXNlIFRlbXBsYXRlLm1vZGVzLlJBVzpcbiAgICAgICAgICB0aGlzLnNvdXJjZSArPSAnICAgIDsgX19hcHBlbmQoJyArIHN0cmlwU2VtaShsaW5lKSArICcpJyArICdcXG4nO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFRlbXBsYXRlLm1vZGVzLkNPTU1FTlQ6XG4gICAgICAgICAgLy8gRG8gbm90aGluZ1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIC8vIExpdGVyYWwgPCUlIG1vZGUsIGFwcGVuZCBhcyByYXcgb3V0cHV0XG4gICAgICAgIGNhc2UgVGVtcGxhdGUubW9kZXMuTElURVJBTDpcbiAgICAgICAgICB0aGlzLl9hZGRPdXRwdXQobGluZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEluIHN0cmluZyBtb2RlLCBqdXN0IGFkZCB0aGUgb3V0cHV0XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5fYWRkT3V0cHV0KGxpbmUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzZWxmLm9wdHMuY29tcGlsZURlYnVnICYmIG5ld0xpbmVDb3VudCkge1xuICAgICAgdGhpcy5jdXJyZW50TGluZSArPSBuZXdMaW5lQ291bnQ7XG4gICAgICB0aGlzLnNvdXJjZSArPSAnICAgIDsgX19saW5lID0gJyArIHRoaXMuY3VycmVudExpbmUgKyAnXFxuJztcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRXNjYXBlIGNoYXJhY3RlcnMgcmVzZXJ2ZWQgaW4gWE1MLlxuICpcbiAqIFRoaXMgaXMgc2ltcGx5IGFuIGV4cG9ydCBvZiB7QGxpbmsgbW9kdWxlOnV0aWxzLmVzY2FwZVhNTH0uXG4gKlxuICogSWYgYG1hcmt1cGAgaXMgYHVuZGVmaW5lZGAgb3IgYG51bGxgLCB0aGUgZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtYXJrdXAgSW5wdXQgc3RyaW5nXG4gKiBAcmV0dXJuIHtTdHJpbmd9IEVzY2FwZWQgc3RyaW5nXG4gKiBAcHVibGljXG4gKiBAZnVuY1xuICogKi9cbmV4cG9ydHMuZXNjYXBlWE1MID0gdXRpbHMuZXNjYXBlWE1MO1xuXG4vKipcbiAqIEV4cHJlc3MuanMgc3VwcG9ydC5cbiAqXG4gKiBUaGlzIGlzIGFuIGFsaWFzIGZvciB7QGxpbmsgbW9kdWxlOmVqcy5yZW5kZXJGaWxlfSwgaW4gb3JkZXIgdG8gc3VwcG9ydFxuICogRXhwcmVzcy5qcyBvdXQtb2YtdGhlLWJveC5cbiAqXG4gKiBAZnVuY1xuICovXG5cbmV4cG9ydHMuX19leHByZXNzID0gZXhwb3J0cy5yZW5kZXJGaWxlO1xuXG4vKipcbiAqIFZlcnNpb24gb2YgRUpTLlxuICpcbiAqIEByZWFkb25seVxuICogQHR5cGUge1N0cmluZ31cbiAqIEBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLlZFUlNJT04gPSBfVkVSU0lPTl9TVFJJTkc7XG5cbi8qKlxuICogTmFtZSBmb3IgZGV0ZWN0aW9uIG9mIEVKUy5cbiAqXG4gKiBAcmVhZG9ubHlcbiAqIEB0eXBlIHtTdHJpbmd9XG4gKiBAcHVibGljXG4gKi9cblxuZXhwb3J0cy5uYW1lID0gX05BTUU7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuaWYgKHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgd2luZG93LmVqcyA9IGV4cG9ydHM7XG59XG5cbiIsICJpbXBvcnQgZnMsIHsgd3JpdGVGaWxlU3luYyB9IGZyb20gJ2ZzJztcbmltcG9ydCBvcyBmcm9tICdvcyc7XG5pbXBvcnQgcGF0aCwgeyBqb2luIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgQWRtWmlwIGZyb20gJ2FkbS16aXAnO1xuaW1wb3J0IG1pbmltaXN0IGZyb20gJ21pbmltaXN0JztcbmltcG9ydCBwcm9tcHRzIGZyb20gJ3Byb21wdHMnO1xuaW1wb3J0IHsgcmVkLCByZXNldCwgeWVsbG93IH0gZnJvbSAna29sb3Jpc3QnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IHNpbXBsZUdpdCB9IGZyb20gJ3NpbXBsZS1naXQnO1xuaW1wb3J0IHByb2MgZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgd2hpY2ggZnJvbSAnd2hpY2gnO1xuaW1wb3J0IHsgTm9kZVByb2plY3QgfSBmcm9tICcuL2NvbmZpZy9wcm9qZWN0cy9ub2RlJztcbmltcG9ydCB7IGxvYWQgfSBmcm9tICdqcy15YW1sJztcbmltcG9ydCB7IEFic3RyYWN0UHJvamVjdCB9IGZyb20gJy4vY29uZmlnL3Byb2plY3RzJztcbmltcG9ydCB7IEdvbGFuZ1Byb2plY3QgfSBmcm9tICcuL2NvbmZpZy9wcm9qZWN0cy9nb2xhbmcnO1xuaW1wb3J0IHsgRG90bmV0UHJvamVjdCB9IGZyb20gJy4vY29uZmlnL3Byb2plY3RzL2RvdG5ldCc7XG5pbXBvcnQgeyBQeXRob25Qcm9qZWN0IH0gZnJvbSAnLi9jb25maWcvcHJvamVjdHMvcHl0aG9uJztcbmltcG9ydCB7IFJ1c3RQcm9qZWN0IH0gZnJvbSAnLi9jb25maWcvcHJvamVjdHMvcnVzdCc7XG5pbXBvcnQgZWpzIGZyb20gJ2Vqcyc7XG5pbXBvcnQgeyBTdGFuZGFsb25lUHJvamVjdCB9IGZyb20gJy4vY29uZmlnL3Byb2plY3RzL3N0YW5kYWxvbmUnO1xuXG5jb25zdCBjd2QgPSBwcm9jZXNzLmN3ZCgpO1xuXG50eXBlIENvbG9yRnVuYyA9IChzdHI6IHN0cmluZyB8IG51bWJlcikgPT4gc3RyaW5nO1xuXG50eXBlIERpc3BsYXllZEZyYW1ld29ya1ZhcmlhbnQgPSBGcmFtZXdvcmtWYXJpYW50ICYge1xuICBkaXNwbGF5OiBzdHJpbmc7XG4gIGNvbG9yOiBDb2xvckZ1bmM7XG59O1xuXG50eXBlIEZyYW1ld29yayA9IHtcbiAgcmVwbzogc3RyaW5nO1xuICBkaXNwbGF5OiBzdHJpbmc7XG4gIGNvbG9yOiBDb2xvckZ1bmM7XG4gIHZhcmlhbnRzOiBEaXNwbGF5ZWRGcmFtZXdvcmtWYXJpYW50W107XG4gIGRvd25sb2FkVXJsOiBzdHJpbmc7XG59O1xuXG50eXBlIFByb2plY3RUeXBlID0gJ2RvdG5ldCcgfCAnZ28nIHwgJ25vZGUnIHwgJ3B5dGhvbicgfCAncnVzdCcgfCAnc3RhbmRhbG9uZSc7XG5cbnR5cGUgQ2hvaWNlID0ge1xuICBwcm9qZWN0TmFtZTogc3RyaW5nO1xuICBmcmFtZXdvcms6IEZyYW1ld29yaztcbiAgdmFyaWFudD86IHN0cmluZztcbiAgb3ZlcndyaXRlPzogJ3llcyc7XG4gIHBhY2thZ2VOYW1lOiBzdHJpbmc7XG59O1xuXG50eXBlIEZyYW1ld29ya1ZhcmlhbnQgPSB7XG4gIGJyYW5jaD86IHN0cmluZztcbiAgcHJvamVjdEZpbGU/OiBzdHJpbmc7XG4gIGNvbmZpZ0ZpbGU/OiBzdHJpbmc7XG4gIHR5cGU/OiBQcm9qZWN0VHlwZTtcbiAgcm0/OiBzdHJpbmdbXTtcbiAgaGFuZGxlcj86IHN0cmluZztcbiAgbWFpbj86IHN0cmluZztcbiAgc2V0dXBDb21tYW5kcz86IHN0cmluZ1tdO1xuICBkZXZDb21tYW5kPzogc3RyaW5nO1xufTtcblxudHlwZSBJbmRleCA9IHtcbiAgRnJhbWV3b3Jrczoge1xuICAgIFtsYW5ndWFnZTogc3RyaW5nXToge1xuICAgICAgW3ZhcmlhbnQ6IHN0cmluZ106IEZyYW1ld29ya1ZhcmlhbnQ7XG4gICAgfTtcbiAgfTtcbn07XG5cbmNvbnN0IGZldGNoRnJhbWV3b3JrcyA9IGFzeW5jICgpOiBQcm9taXNlPEZyYW1ld29ya1tdPiA9PiB7XG4gIGNvbnN0IHsgZGF0YTogaW5kZXhZYW1sIH0gPSBhd2FpdCBheGlvcy5nZXQoXG4gICAgJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zY2FmZm9sZGx5L3NjYWZmb2xkbHktZXhhbXBsZXMvcmVmcy9oZWFkcy9tYWluL2luZGV4LnltbCcsXG4gICAge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ2FjaGUtQ29udHJvbCc6ICduby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZScsXG4gICAgICAgIFByYWdtYTogJ25vLWNhY2hlJyxcbiAgICAgICAgRXhwaXJlczogJzAnLFxuICAgICAgfSxcbiAgICB9LFxuICApO1xuXG4gIGNvbnN0IGluZGV4ID0gbG9hZChpbmRleFlhbWwpIGFzIEluZGV4O1xuXG4gIGNvbnN0IGZyYW1ld29ya3MgPSBPYmplY3QuZW50cmllcyhpbmRleC5GcmFtZXdvcmtzKS5yZWR1Y2UoKGFjYywgW2xhbmd1YWdlLCB2YXJpYW50c10pID0+IHtcbiAgICBhY2MucHVzaCh7XG4gICAgICBkaXNwbGF5OiBsYW5ndWFnZSxcbiAgICAgIGRvd25sb2FkVXJsOiAnaHR0cHM6Ly9jb2RlbG9hZC5naXRodWIuY29tL3NjYWZmb2xkbHknLFxuICAgICAgcmVwbzogJ3NjYWZmb2xkbHktZXhhbXBsZXMnLFxuICAgICAgY29sb3I6IHllbGxvdyxcbiAgICAgIHZhcmlhbnRzOiBPYmplY3QuZW50cmllcyh2YXJpYW50cykucmVkdWNlKChhY2NWLCBbdmFyaWFudCwgZnJhbWV3b3JrVmFyaWFudF0pID0+IHtcbiAgICAgICAgYWNjVi5wdXNoKHtcbiAgICAgICAgICBjb25maWdGaWxlOiBmcmFtZXdvcmtWYXJpYW50LnByb2plY3RGaWxlLFxuICAgICAgICAgIC4uLmZyYW1ld29ya1ZhcmlhbnQsXG4gICAgICAgICAgZGlzcGxheTogdmFyaWFudCxcbiAgICAgICAgICBjb2xvcjogeWVsbG93LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFjY1Y7XG4gICAgICB9LCBbXSBhcyBEaXNwbGF5ZWRGcmFtZXdvcmtWYXJpYW50W10pLFxuICAgIH0pO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIFtdIGFzIEZyYW1ld29ya1tdKTtcblxuICByZXR1cm4gZnJhbWV3b3Jrcztcbn07XG5cbmNvbnN0IGdlbmVyYXRlUmVhZG1lID0gYXN5bmMgKHZhcmlhbnQ6IEZyYW1ld29ya1ZhcmlhbnQpOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICBjb25zdCB7IGRhdGE6IHJlYWRtZVRlbXBsYXRlIH0gPSBhd2FpdCBheGlvcy5nZXQoXG4gICAgJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zY2FmZm9sZGx5L3NjYWZmb2xkbHktZXhhbXBsZXMvcmVmcy9oZWFkcy9tYWluLy50ZW1wbGF0ZXMvY3NhL1JFQURNRS5tZC50cGwnLFxuICAgIHtcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NhY2hlLUNvbnRyb2wnOiAnbm8tY2FjaGUsIG5vLXN0b3JlLCBtdXN0LXJldmFsaWRhdGUnLFxuICAgICAgICBQcmFnbWE6ICduby1jYWNoZScsXG4gICAgICAgIEV4cGlyZXM6ICcwJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgKTtcblxuICByZXR1cm4gZWpzLnJlbmRlcihyZWFkbWVUZW1wbGF0ZSwgdmFyaWFudCwgeyBhc3luYzogdHJ1ZSB9KTtcbn07XG5cbmZ1bmN0aW9uIHRlbXBsYXRlcyhmcmFtZXdvcmtzOiBGcmFtZXdvcmtbXSkge1xuICByZXR1cm4gZnJhbWV3b3Jrc1xuICAgIC5tYXAoKGYpID0+IChmLnZhcmlhbnRzICYmIGYudmFyaWFudHMubWFwKCh2KSA9PiB2LmJyYW5jaCkpIHx8IFtmLnJlcG9dKVxuICAgIC5yZWR1Y2UoKGEsIGIpID0+IGEuY29uY2F0KGIpLCBbXSk7XG59XG5cbmZ1bmN0aW9uIGdldFZhcmlhbnQoXG4gIGZyYW1ld29ya3M6IEZyYW1ld29ya1tdLFxuICBicmFuY2g/OiBzdHJpbmcsXG4pOiB7IGZyYW1ld29yaz86IEZyYW1ld29yazsgdmFyaWFudD86IEZyYW1ld29ya1ZhcmlhbnQgfSB7XG4gIGZvciAoY29uc3QgZnJhbWV3b3JrIG9mIGZyYW1ld29ya3MpIHtcbiAgICBjb25zdCB2YXJpYW50ID0gZnJhbWV3b3JrLnZhcmlhbnRzLmZpbmQoKHYpID0+IHYuYnJhbmNoID09PSBicmFuY2gpO1xuICAgIGlmICh2YXJpYW50KSB7XG4gICAgICByZXR1cm4geyBmcmFtZXdvcmssIHZhcmlhbnQgfTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHt9O1xufVxuXG5jb25zdCByZW5hbWVGaWxlczogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgdW5kZWZpbmVkPiA9IHtcbiAgX2dpdGlnbm9yZTogJy5naXRpZ25vcmUnLFxufTtcblxuY29uc3QgZGVmYXVsdFRhcmdldERpciA9ICdteS1hcHAnO1xuXG5jb25zdCBleGVjID0gYXN5bmMgKHdvcmtpbmdEaXJlY3Rvcnk6IHN0cmluZywgYXJnczogc3RyaW5nW10pOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBlbnYgPSB7XG4gICAgICAuLi5wcm9jZXNzLmVudixcbiAgICB9O1xuXG4gICAgbGV0IGNvbW1hbmQ6IHN0cmluZztcbiAgICB0cnkge1xuICAgICAgY29tbWFuZCA9IHdoaWNoLnN5bmMoYXJnc1swXSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmVqZWN0KG5ldyBFcnJvcihgVW5hYmxlIHRvIGxvY2F0ZSB0aGUgXFxgJHthcmdzWzBdfVxcYCBjb21tYW5kIG9uIHRoaXMgc3lzdGVtLmApKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwID0gcHJvYy5zcGF3bihgXCIke2NvbW1hbmR9XCJgLCBhcmdzLnNsaWNlKDEpLCB7XG4gICAgICBjd2Q6IHdvcmtpbmdEaXJlY3RvcnksXG4gICAgICBzaGVsbDogdHJ1ZSxcbiAgICAgIGVudixcbiAgICB9KTtcblxuICAgIHAub24oJ2Vycm9yJywgKGVycikgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgcmVqZWN0KGVycik7XG4gICAgfSk7XG5cbiAgICBwLm9uKCdleGl0JywgKGNvZGUpID0+IHtcbiAgICAgIGlmIChjb2RlICE9PSAwKSB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoYENvbW1hbmQgZmFpbGVkIHdpdGggY29kZSAke2NvZGV9YCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXNvbHZlKCk7XG4gICAgfSk7XG5cbiAgICBwLnN0ZGluLnBpcGUocHJvY2Vzcy5zdGRpbik7XG4gICAgcC5zdGRvdXQucGlwZShwcm9jZXNzLnN0ZG91dCk7XG4gICAgcC5zdGRlcnIucGlwZShwcm9jZXNzLnN0ZGVycik7XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gZm9ybWF0VGFyZ2V0RGlyKHRhcmdldERpcjogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gIHJldHVybiB0YXJnZXREaXI/LnRyaW0oKS5yZXBsYWNlKC9cXC8rJC9nLCAnJyk7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHkoZmlsZVBhdGg6IHN0cmluZykge1xuICBjb25zdCBmaWxlcyA9IGZzLnJlYWRkaXJTeW5jKGZpbGVQYXRoKTtcbiAgcmV0dXJuIGZpbGVzLmxlbmd0aCA9PT0gMCB8fCAoZmlsZXMubGVuZ3RoID09PSAxICYmIGZpbGVzWzBdID09PSAnLmdpdCcpO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkUGFja2FnZU5hbWUocHJvamVjdE5hbWU6IHN0cmluZykge1xuICByZXR1cm4gL14oPzpAW2EtelxcZFxcLSp+XVthLXpcXGRcXC0qLl9+XSpcXC8pP1thLXpcXGRcXC1+XVthLXpcXGRcXC0uX35dKiQvLnRlc3QocHJvamVjdE5hbWUpO1xufVxuXG5mdW5jdGlvbiB0b1ZhbGlkUGFja2FnZU5hbWUocHJvamVjdE5hbWU6IHN0cmluZykge1xuICByZXR1cm4gcHJvamVjdE5hbWVcbiAgICAudHJpbSgpXG4gICAgLnRvTG93ZXJDYXNlKClcbiAgICAucmVwbGFjZSgvXFxzKy9nLCAnLScpXG4gICAgLnJlcGxhY2UoL15bLl9dLywgJycpXG4gICAgLnJlcGxhY2UoL1teYS16XFxkXFwtfl0rL2csICctJyk7XG59XG5cbmZ1bmN0aW9uIGVtcHR5RGlyKGRpcjogc3RyaW5nKSB7XG4gIGlmICghZnMuZXhpc3RzU3luYyhkaXIpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAoY29uc3QgZmlsZSBvZiBmcy5yZWFkZGlyU3luYyhkaXIpKSB7XG4gICAgaWYgKGZpbGUgPT09ICcuZ2l0Jykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGZzLnJtU3luYyhwYXRoLnJlc29sdmUoZGlyLCBmaWxlKSwgeyByZWN1cnNpdmU6IHRydWUsIGZvcmNlOiB0cnVlIH0pO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRvd25sb2FkQW5kRXh0cmFjdFppcChmcmFtZXdvcms6IEZyYW1ld29yaywgYnJhbmNoOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCB7IGRvd25sb2FkVXJsLCByZXBvIH0gPSBmcmFtZXdvcms7XG5cbiAgY29uc3QgdXJsID0gbmV3IFVSTChgJHtkb3dubG9hZFVybH0vJHtyZXBvfS96aXAvcmVmcy9oZWFkcy8ke2JyYW5jaH1gKTtcblxuICBjb25zb2xlLmxvZyhgYCk7XG4gIGNvbnNvbGUubG9nKGBEb3dubG9hZGluZyB0ZW1wbGF0ZSBmcm9tIHRoZSBcXGAke2JyYW5jaH1cXGAgYnJhbmNoIGZyb20gXFxgJHtyZXBvfVxcYC4uLmApO1xuICBjb25zb2xlLmxvZyhgYCk7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zKHtcbiAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICB1cmw6IHVybC50b1N0cmluZygpLFxuICAgICAgcmVzcG9uc2VUeXBlOiAnYXJyYXlidWZmZXInLFxuICAgIH0pO1xuXG4gICAgY29uc3QgdGVtcERpclBhdGggPSBmcy5ta2R0ZW1wU3luYyhwYXRoLmpvaW4ob3MudG1wZGlyKCksICd0ZW1wbGF0ZS0nKSk7XG4gICAgY29uc3QgdGVtcEZpbGVOYW1lID0gdXJsLnBhdGhuYW1lLnNwbGl0KCcvJykucG9wKCk7XG5cbiAgICBpZiAoIXRlbXBGaWxlTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciBleHRyYWN0aW5nIFpJUCBmaWxlOiAke3VybH1gKTtcbiAgICB9XG5cbiAgICBjb25zdCB0ZW1wWmlwUGF0aCA9IHBhdGguam9pbih0ZW1wRGlyUGF0aCwgdGVtcEZpbGVOYW1lKTtcbiAgICBmcy53cml0ZUZpbGVTeW5jKHRlbXBaaXBQYXRoLCByZXNwb25zZS5kYXRhKTtcblxuICAgIGNvbnN0IHppcCA9IG5ldyBBZG1aaXAodGVtcFppcFBhdGgpO1xuICAgIHppcC5leHRyYWN0QWxsVG8odGVtcERpclBhdGgsIHRydWUpO1xuXG4gICAgZnMudW5saW5rU3luYyh0ZW1wWmlwUGF0aCk7XG5cbiAgICByZXR1cm4gcGF0aC5qb2luKHRlbXBEaXJQYXRoLCBgJHtyZXBvfS0ke2JyYW5jaH1gKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIGRvd25sb2FkaW5nIG9yIGV4dHJhY3RpbmcgWklQIGZpbGU6ICR7ZXJyb3J9YCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29weShzcmM6IHN0cmluZywgZGVzdDogc3RyaW5nKSB7XG4gIGNvbnN0IHN0YXQgPSBmcy5zdGF0U3luYyhzcmMpO1xuICBpZiAoc3RhdC5pc0RpcmVjdG9yeSgpKSB7XG4gICAgZnMubWtkaXJTeW5jKGRlc3QsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgIGZvciAoY29uc3QgZmlsZSBvZiBmcy5yZWFkZGlyU3luYyhzcmMpKSB7XG4gICAgICBjb25zdCBzcmNGaWxlID0gcGF0aC5yZXNvbHZlKHNyYywgZmlsZSk7XG4gICAgICBjb25zdCBkZXN0RmlsZSA9IHBhdGgucmVzb2x2ZShkZXN0LCBmaWxlKTtcbiAgICAgIGNvcHkoc3JjRmlsZSwgZGVzdEZpbGUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmcy5jb3B5RmlsZVN5bmMoc3JjLCBkZXN0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzYW5pdGl6ZShmaWxlbmFtZTogc3RyaW5nLCBzdGFydE1hcmtlcjogc3RyaW5nLCBlbmRNYXJrZXI6IHN0cmluZykge1xuICBjb25zdCB0ZXh0ID0gZnMucmVhZEZpbGVTeW5jKGZpbGVuYW1lLCAndXRmLTgnKTtcbiAgY29uc3QgbGluZXMgPSB0ZXh0LnNwbGl0KCdcXG4nKTtcbiAgbGV0IHN0YXJ0TGluZSA9IC0xO1xuICBsZXQgZW5kTGluZSA9IC0xO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobGluZXNbaV0uaW5jbHVkZXMoc3RhcnRNYXJrZXIpKSB7XG4gICAgICBzdGFydExpbmUgPSBpO1xuICAgIH0gZWxzZSBpZiAobGluZXNbaV0uaW5jbHVkZXMoZW5kTWFya2VyKSkge1xuICAgICAgZW5kTGluZSA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhcnRMaW5lICE9PSAtMSAmJiBlbmRMaW5lICE9PSAtMSkge1xuICAgIGxpbmVzLnNwbGljZShzdGFydExpbmUsIGVuZExpbmUgLSBzdGFydExpbmUgKyAxKTtcbiAgfVxuXG4gIGZzLndyaXRlRmlsZVN5bmMoZmlsZW5hbWUsIGxpbmVzLmpvaW4oJ1xcbicpLCB7IGVuY29kaW5nOiAndXRmLTgnIH0pO1xufVxuXG5jb25zdCBnZXRQcm9qZWN0ID0gKHByb2plY3RUeXBlOiBQcm9qZWN0VHlwZSwgd29ya2Rpcjogc3RyaW5nKTogQWJzdHJhY3RQcm9qZWN0IHwgdW5kZWZpbmVkID0+IHtcbiAgc3dpdGNoIChwcm9qZWN0VHlwZSkge1xuICAgIGNhc2UgJ25vZGUnOlxuICAgICAgcmV0dXJuIG5ldyBOb2RlUHJvamVjdCh1bmRlZmluZWQsIHdvcmtkaXIpO1xuICAgIGNhc2UgJ2dvJzpcbiAgICAgIHJldHVybiBuZXcgR29sYW5nUHJvamVjdCh1bmRlZmluZWQsIHdvcmtkaXIpO1xuICAgIGNhc2UgJ2RvdG5ldCc6XG4gICAgICByZXR1cm4gbmV3IERvdG5ldFByb2plY3QodW5kZWZpbmVkLCB3b3JrZGlyKTtcbiAgICBjYXNlICdweXRob24nOlxuICAgICAgcmV0dXJuIG5ldyBQeXRob25Qcm9qZWN0KHVuZGVmaW5lZCwgd29ya2Rpcik7XG4gICAgY2FzZSAncnVzdCc6XG4gICAgICByZXR1cm4gbmV3IFJ1c3RQcm9qZWN0KHVuZGVmaW5lZCwgd29ya2Rpcik7XG4gICAgY2FzZSAnc3RhbmRhbG9uZSc6XG4gICAgICByZXR1cm4gbmV3IFN0YW5kYWxvbmVQcm9qZWN0KHVuZGVmaW5lZCwgd29ya2Rpcik7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBydW4gPSBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnN0IGZyYW1ld29ya3MgPSBhd2FpdCBmZXRjaEZyYW1ld29ya3MoKTtcblxuICBjb25zdCBhcmd2ID0gbWluaW1pc3Q8e1xuICAgIHQ/OiBzdHJpbmc7XG4gICAgdGVtcGxhdGU/OiBzdHJpbmc7XG4gIH0+KFxuICAgIC8vIFN1cHBvcnRpbmcgdGhlIGZvbGxvd2luZyBpbnZvY2F0aW9uIHBhdHRlcm5zOlxuICAgIC8vICAtIG5weCBjcmVhdGUtc2NhZmZvbGRseS1hcHBcbiAgICAvLyAgLSBucG0gY3JlYXRlIHNjYWZmb2xkbHktYXBwICgnbnBtJyBnZXQgbG9iYmVkIG9mZiBieSBucG0pXG4gICAgLy8gIC0geWFybiBjcmVhdGUgc2NhZmZvbGRseS1hcHAgKCd5YXJuJyBnZXQgbG9iYmVkIG9mZiBieSB5YXJuKVxuICAgIC8vICAtIG5weCBzY2FmZm9sZGx5IGNyZWF0ZSBhcHBcbiAgICBwcm9jZXNzLmFyZ3ZcbiAgICAgIC5zbGljZSgyKVxuICAgICAgLmZpbHRlcigoYXJnKSA9PiBhcmcudG9Mb3dlckNhc2UoKSAhPT0gJ2NyZWF0ZScgJiYgYXJnLnRvTG93ZXJDYXNlKCkgIT09ICdhcHAnKSxcbiAgICB7IHN0cmluZzogWydfJ10gfSxcbiAgKTtcblxuICBjb25zdCBhcmdUYXJnZXREaXIgPSBmb3JtYXRUYXJnZXREaXIoYXJndi5fWzBdKTtcbiAgY29uc3QgYXJnVGVtcGxhdGUgPSBhcmd2LnRlbXBsYXRlIHx8IGFyZ3YudDtcblxuICBsZXQgdGFyZ2V0RGlyID0gYXJnVGFyZ2V0RGlyIHx8IGRlZmF1bHRUYXJnZXREaXI7XG4gIGNvbnN0IGdldFByb2plY3ROYW1lID0gKCkgPT4gKHRhcmdldERpciA9PT0gJy4nID8gcGF0aC5iYXNlbmFtZShwYXRoLnJlc29sdmUoKSkgOiB0YXJnZXREaXIpO1xuXG4gIGxldCByZXN1bHQ6IHByb21wdHMuQW5zd2VyczxcbiAgICAncHJvamVjdE5hbWUnIHwgJ292ZXJ3cml0ZScgfCAncGFja2FnZU5hbWUnIHwgJ2ZyYW1ld29yaycgfCAndmFyaWFudCdcbiAgPjtcblxuICBwcm9tcHRzLm92ZXJyaWRlKHtcbiAgICBvdmVyd3JpdGU6IGFyZ3Yub3ZlcndyaXRlLFxuICB9KTtcblxuICB0cnkge1xuICAgIHJlc3VsdCA9IGF3YWl0IHByb21wdHMoXG4gICAgICBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBhcmdUYXJnZXREaXIgPyBudWxsIDogJ3RleHQnLFxuICAgICAgICAgIG5hbWU6ICdwcm9qZWN0TmFtZScsXG4gICAgICAgICAgbWVzc2FnZTogcmVzZXQoJ1Byb2plY3QgbmFtZTonKSxcbiAgICAgICAgICBpbml0aWFsOiBkZWZhdWx0VGFyZ2V0RGlyLFxuICAgICAgICAgIG9uU3RhdGU6IChzdGF0ZSkgPT4ge1xuICAgICAgICAgICAgdGFyZ2V0RGlyID0gZm9ybWF0VGFyZ2V0RGlyKHN0YXRlLnZhbHVlKSB8fCBkZWZhdWx0VGFyZ2V0RGlyO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiAoKSA9PiAoIWZzLmV4aXN0c1N5bmModGFyZ2V0RGlyKSB8fCBpc0VtcHR5KHRhcmdldERpcikgPyBudWxsIDogJ3NlbGVjdCcpLFxuICAgICAgICAgIG5hbWU6ICdvdmVyd3JpdGUnLFxuICAgICAgICAgIG1lc3NhZ2U6ICgpID0+XG4gICAgICAgICAgICAodGFyZ2V0RGlyID09PSAnLicgPyAnQ3VycmVudCBkaXJlY3RvcnknIDogYFRhcmdldCBkaXJlY3RvcnkgXCIke3RhcmdldERpcn1cImApICtcbiAgICAgICAgICAgIGAgaXMgbm90IGVtcHR5LiBQbGVhc2UgY2hvb3NlIGhvdyB0byBwcm9jZWVkOmAsXG4gICAgICAgICAgaW5pdGlhbDogMCxcbiAgICAgICAgICBjaG9pY2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRpdGxlOiAnUmVtb3ZlIGV4aXN0aW5nIGZpbGVzIGFuZCBjb250aW51ZScsXG4gICAgICAgICAgICAgIHZhbHVlOiAneWVzJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRpdGxlOiAnQ2FuY2VsIG9wZXJhdGlvbicsXG4gICAgICAgICAgICAgIHZhbHVlOiAnbm8nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdGl0bGU6ICdJZ25vcmUgZmlsZXMgYW5kIGNvbnRpbnVlJyxcbiAgICAgICAgICAgICAgdmFsdWU6ICdpZ25vcmUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogKF8sIHsgb3ZlcndyaXRlIH06IHsgb3ZlcndyaXRlPzogc3RyaW5nIH0pID0+IHtcbiAgICAgICAgICAgIGlmIChvdmVyd3JpdGUgPT09ICdubycpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlZCgnXHUyNzE2JykgKyAnIE9wZXJhdGlvbiBjYW5jZWxsZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbmFtZTogJ292ZXJ3cml0ZUNoZWNrZXInLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogKCkgPT4gKGlzVmFsaWRQYWNrYWdlTmFtZShnZXRQcm9qZWN0TmFtZSgpKSA/IG51bGwgOiAndGV4dCcpLFxuICAgICAgICAgIG5hbWU6ICdwYWNrYWdlTmFtZScsXG4gICAgICAgICAgbWVzc2FnZTogcmVzZXQoJ1BhY2thZ2UgbmFtZTonKSxcbiAgICAgICAgICBpbml0aWFsOiAoKSA9PiB0b1ZhbGlkUGFja2FnZU5hbWUoZ2V0UHJvamVjdE5hbWUoKSksXG4gICAgICAgICAgdmFsaWRhdGU6IChkaXIpID0+IGlzVmFsaWRQYWNrYWdlTmFtZShkaXIpIHx8ICdJbnZhbGlkIG5hbWUnLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogYXJnVGVtcGxhdGUgJiYgdGVtcGxhdGVzKGZyYW1ld29ya3MpLmluY2x1ZGVzKGFyZ1RlbXBsYXRlKSA/IG51bGwgOiAnc2VsZWN0JyxcbiAgICAgICAgICBuYW1lOiAnZnJhbWV3b3JrJyxcbiAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgdHlwZW9mIGFyZ1RlbXBsYXRlID09PSAnc3RyaW5nJyAmJiAhdGVtcGxhdGVzKGZyYW1ld29ya3MpLmluY2x1ZGVzKGFyZ1RlbXBsYXRlKVxuICAgICAgICAgICAgICA/IHJlc2V0KGBcIiR7YXJnVGVtcGxhdGV9XCIgaXNuJ3QgYSB2YWxpZCB0ZW1wbGF0ZS4gUGxlYXNlIGNob29zZSBmcm9tIGJlbG93OiBgKVxuICAgICAgICAgICAgICA6IHJlc2V0KCdTZWxlY3QgYSBmcmFtZXdvcms6JyksXG4gICAgICAgICAgaW5pdGlhbDogMCxcbiAgICAgICAgICBjaG9pY2VzOiBmcmFtZXdvcmtzLm1hcCgoZnJhbWV3b3JrKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmcmFtZXdvcmtDb2xvciA9IGZyYW1ld29yay5jb2xvcjtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHRpdGxlOiBmcmFtZXdvcmtDb2xvcihmcmFtZXdvcmsuZGlzcGxheSB8fCBmcmFtZXdvcmsucmVwbyksXG4gICAgICAgICAgICAgIHZhbHVlOiBmcmFtZXdvcmssXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogKGZyYW1ld29yazogRnJhbWV3b3JrKSA9PiAoZnJhbWV3b3JrICYmIGZyYW1ld29yay52YXJpYW50cyA/ICdzZWxlY3QnIDogbnVsbCksXG4gICAgICAgICAgbmFtZTogJ3ZhcmlhbnQnLFxuICAgICAgICAgIG1lc3NhZ2U6IHJlc2V0KCdTZWxlY3QgYSB2YXJpYW50OicpLFxuICAgICAgICAgIGNob2ljZXM6IChmcmFtZXdvcms6IEZyYW1ld29yaykgPT5cbiAgICAgICAgICAgIGZyYW1ld29yay52YXJpYW50cy5tYXAoKHZhcmlhbnQpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgdmFyaWFudENvbG9yID0gdmFyaWFudC5jb2xvcjtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0aXRsZTogdmFyaWFudENvbG9yKHZhcmlhbnQuZGlzcGxheSksXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhcmlhbnQuYnJhbmNoLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSksXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAge1xuICAgICAgICBvbkNhbmNlbDogKCkgPT4ge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZWQoJ1x1MjcxNicpICsgJyBPcGVyYXRpb24gY2FuY2VsbGVkJyk7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICk7XG4gIH0gY2F0Y2ggKGNhbmNlbGxlZCkge1xuICAgIGNvbnNvbGUubG9nKGNhbmNlbGxlZC5tZXNzYWdlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyB1c2VyIGNob2ljZSBhc3NvY2lhdGVkIHdpdGggcHJvbXB0c1xuICBjb25zdCB7IG92ZXJ3cml0ZSwgcGFja2FnZU5hbWUsIHZhcmlhbnQ6IGJyYW5jaCB9ID0gcmVzdWx0IGFzIENob2ljZTtcbiAgY29uc3QgeyBmcmFtZXdvcmssIHZhcmlhbnQgfSA9IGdldFZhcmlhbnQoZnJhbWV3b3JrcywgYnJhbmNoIHx8IGFyZ1RlbXBsYXRlKTtcblxuICBpZiAoIWZyYW1ld29yayB8fCAhdmFyaWFudCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB2YXJpYW50OiAke3ZhcmlhbnR9YCk7XG4gIH1cblxuICBjb25zdCB7IHJtOiBleGNsdWRlRmlsZXMsIHR5cGUsIHNldHVwQ29tbWFuZHMsIGRldkNvbW1hbmQsIGJyYW5jaDogdmFyaWFudEJyYW5jaCB9ID0gdmFyaWFudDtcblxuICBpZiAoIXR5cGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgb3IgbWlzc2luZyBwcm9qZWN0IHR5cGVgKTtcbiAgfVxuXG4gIGlmICghdmFyaWFudEJyYW5jaCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBvciBtaXNzaW5nIHZhcmlhbnQgYnJhbmNoYCk7XG4gIH1cblxuICBjb25zdCByb290ID0gcGF0aC5qb2luKGN3ZCwgdGFyZ2V0RGlyKTtcblxuICBpZiAob3ZlcndyaXRlID09PSAneWVzJykge1xuICAgIGVtcHR5RGlyKHJvb3QpO1xuICB9IGVsc2UgaWYgKCFmcy5leGlzdHNTeW5jKHJvb3QpKSB7XG4gICAgZnMubWtkaXJTeW5jKHJvb3QsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICB9XG5cbiAgY29uc29sZS5sb2coYFxcbkNyZWF0aW5nIHByb2plY3QgaW4gJHtyb290fS4uLmApO1xuXG4gIGNvbnN0IHRlbXBsYXRlRGlyID0gYXdhaXQgZG93bmxvYWRBbmRFeHRyYWN0WmlwKGZyYW1ld29yaywgdmFyaWFudEJyYW5jaCk7XG5cbiAgY29uc3Qgd3JpdGUgPSAoZmlsZTogc3RyaW5nLCBjb250ZW50Pzogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0UGF0aCA9IHBhdGguam9pbihyb290LCByZW5hbWVGaWxlc1tmaWxlXSA/PyBmaWxlKTtcbiAgICBpZiAoY29udGVudCkge1xuICAgICAgZnMud3JpdGVGaWxlU3luYyh0YXJnZXRQYXRoLCBjb250ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29weShwYXRoLmpvaW4odGVtcGxhdGVEaXIsIGZpbGUpLCB0YXJnZXRQYXRoKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgZmlsZXMgPSBmcy5yZWFkZGlyU3luYyh0ZW1wbGF0ZURpcik7XG4gIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcy5maWx0ZXIoXG4gICAgKGYpID0+XG4gICAgICBmICE9PSAnUkVBRE1FLm1kJyAmJlxuICAgICAgZiAhPT0gJ0xJQ0VOU0UnICYmXG4gICAgICBmICE9PSAnTElDRU5TRS5tZCcgJiZcbiAgICAgIGV4Y2x1ZGVGaWxlcyAmJlxuICAgICAgIWV4Y2x1ZGVGaWxlcy5pbmNsdWRlcyhmKSxcbiAgKSkge1xuICAgIHdyaXRlKGZpbGUpO1xuICB9XG5cbiAgY29uc3QgcHJvamVjdCA9IGdldFByb2plY3QodHlwZSwgcm9vdCk7XG4gIGlmICghcHJvamVjdCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwcm9qZWN0IHR5cGU6ICR7dmFyaWFudC50eXBlfWApO1xuICB9XG5cbiAgYXdhaXQgcHJvamVjdC5zZXRQcm9qZWN0KHBhY2thZ2VOYW1lIHx8IGdldFByb2plY3ROYW1lKCkpO1xuICB3cml0ZUZpbGVTeW5jKHBhdGguam9pbihyb290LCAnUkVBRE1FLm1kJyksIGF3YWl0IGdlbmVyYXRlUmVhZG1lKHZhcmlhbnQpKTtcblxuICBzYW5pdGl6ZShwYXRoLmpvaW4ocm9vdCwgJy5naXRpZ25vcmUnKSwgJyMjIyArQ1NBLU9NSVQgIyMjJywgJyMjIyAtQ1NBLU9NSVQgIyMjJyk7XG5cbiAgY29uc3QgaW5zdGFsbENvbW1hbmRzID0gYXdhaXQgcHJvamVjdC5pbnN0YWxsQ29tbWFuZHM7XG4gIGlmIChpbnN0YWxsQ29tbWFuZHMpIHtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgIGluc3RhbGxDb21tYW5kcy5jb21tYW5kcy5tYXAoKGNvbW1hbmQpID0+IHtcbiAgICAgICAgY29uc3Qgd29ya2luZ0RpcmVjdG9yeSA9IGpvaW4ocm9vdCwgY29tbWFuZC53b3JrZGlyIHx8ICcuJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBJbnN0YWxsaW5nIGRlcGVuZGVuY2llcyB1c2luZyBcXGAke2NvbW1hbmQuY21kfVxcYCBpbiAke3dvcmtpbmdEaXJlY3Rvcnl9Li4uYCk7XG4gICAgICAgIHJldHVybiBleGVjKHdvcmtpbmdEaXJlY3RvcnksIGNvbW1hbmQuY21kLnNwbGl0KCcgJykpO1xuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIGNvbnNvbGUubG9nKGBgKTtcbiAgY29uc29sZS5sb2coYEluaXRpYWxpemluZyBnaXQgaW4gJHtyb290fS4uLmApO1xuICBjb25zdCBnaXQgPSBzaW1wbGVHaXQocm9vdCk7XG4gIGF3YWl0IGdpdC5pbml0KHsgJy0taW5pdGlhbC1icmFuY2gnOiAnbWFpbicgfSk7XG4gIGF3YWl0IGdpdC5hZGQoJy4nKTtcbiAgYXdhaXQgZ2l0LmNvbW1pdCgnSW5pdGlhbCBjb21taXQnKTtcblxuICBjb25zdCBjZFByb2plY3ROYW1lID0gcGF0aC5yZWxhdGl2ZShjd2QsIHJvb3QpO1xuICBjb25zb2xlLmxvZyhgYCk7XG4gIGNvbnNvbGUubG9nKGBcdTI3MjggRG9uZS4gQmVnaW4gZGV2ZWxvcG1lbnQgd2l0aCB0aGUgZm9sbG93aW5nIGNvbW1hbmRzOmApO1xuICBjb25zb2xlLmxvZyhgYCk7XG4gIGlmIChyb290ICE9PSBjd2QpIHtcbiAgICBjb25zb2xlLmxvZyhgICAgIGNkICR7Y2RQcm9qZWN0TmFtZS5pbmNsdWRlcygnICcpID8gYFwiJHtjZFByb2plY3ROYW1lfVwiYCA6IGNkUHJvamVjdE5hbWV9YCk7XG4gIH1cbiAgaWYgKHNldHVwQ29tbWFuZHMpIHtcbiAgICBzZXR1cENvbW1hbmRzLmZvckVhY2goKHNldHVwQ29tbWFuZCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coYCAgICAke3NldHVwQ29tbWFuZH1gKTtcbiAgICB9KTtcbiAgfVxuICBjb25zb2xlLmxvZyhgICAgICR7ZGV2Q29tbWFuZH1gKTtcbiAgY29uc29sZS5sb2coYGApO1xuICBjb25zb2xlLmxvZyhgUHVzaCB0aGlzIHJlcG9zaXRvcnkgdG8gR2l0SHViOmApO1xuICBjb25zb2xlLmxvZyhgYCk7XG4gIGNvbnNvbGUubG9nKGAgICAgMSkgQ3JlYXRlIGEgbmV3IHJlcG9zaXRvcnkgb24gR2l0SHViYCk7XG4gIGNvbnNvbGUubG9nKGAgICAgMikgUnVuOiBcXGBnaXQgcmVtb3RlIGFkZCBvcmlnaW4gPHJlcG9zaXRvcnktdXJsPlxcYGApO1xuICBjb25zb2xlLmxvZyhgICAgIDMpIFJ1bjogXFxgZ2l0IHB1c2ggLXUgb3JpZ2luIG1haW5cXGBgKTtcbiAgY29uc29sZS5sb2coYGApO1xuICBjb25zb2xlLmxvZyhgU2NhZmZvbGRseSBjYW4gcGFja2FnZSBhbmQgZGVwbG95IHlvdXIgYXBwbGljYXRpb246YCk7XG4gIGNvbnNvbGUubG9nKGBgKTtcbiAgY29uc29sZS5sb2coYCAgICAxKSBSdW46IFxcYG5weCBzY2FmZm9sZGx5IGRlcGxveVxcYGApO1xuICBjb25zb2xlLmxvZyhgYCk7XG4gIGNvbnNvbGUubG9nKGAgICAgXHVEODNEXHVEQ0ExIEEgXFxgZ2l0IHB1c2hcXGAgd2lsbCBhbHNvIHBhY2thZ2UgYW5kIGRlcGxveSB1c2luZyBHaXRIdWIgQWN0aW9ucyFgKTtcbiAgY29uc29sZS5sb2coYGApO1xuICBjb25zb2xlLmxvZyhgU2VlIG91ciBkb2N1bWVudGF0aW9uIGF0IGh0dHBzOi8vc2NhZmZvbGRseS5kZXYvZG9jc2ApO1xuICBjb25zb2xlLmxvZyhgYCk7XG4gIGNvbnNvbGUubG9nKGBcdUQ4M0RcdURFODAgSGFwcHkgY29kaW5nLCBhbmQgdGhhbmtzIGZvciB1c2luZyBTY2FmZm9sZGx5IWApO1xuICBjb25zb2xlLmxvZyhgYCk7XG59O1xuIiwgbnVsbCwgIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJndW1lbnRzKTtcbiAgfTtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBiaW5kIGZyb20gJy4vaGVscGVycy9iaW5kLmpzJztcblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxuY29uc3Qge3RvU3RyaW5nfSA9IE9iamVjdC5wcm90b3R5cGU7XG5jb25zdCB7Z2V0UHJvdG90eXBlT2Z9ID0gT2JqZWN0O1xuXG5jb25zdCBraW5kT2YgPSAoY2FjaGUgPT4gdGhpbmcgPT4ge1xuICAgIGNvbnN0IHN0ciA9IHRvU3RyaW5nLmNhbGwodGhpbmcpO1xuICAgIHJldHVybiBjYWNoZVtzdHJdIHx8IChjYWNoZVtzdHJdID0gc3RyLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpKTtcbn0pKE9iamVjdC5jcmVhdGUobnVsbCkpO1xuXG5jb25zdCBraW5kT2ZUZXN0ID0gKHR5cGUpID0+IHtcbiAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuICh0aGluZykgPT4ga2luZE9mKHRoaW5nKSA9PT0gdHlwZVxufVxuXG5jb25zdCB0eXBlT2ZUZXN0ID0gdHlwZSA9PiB0aGluZyA9PiB0eXBlb2YgdGhpbmcgPT09IHR5cGU7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCB7aXNBcnJheX0gPSBBcnJheTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1VuZGVmaW5lZCA9IHR5cGVPZlRlc3QoJ3VuZGVmaW5lZCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIGlzRnVuY3Rpb24odmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKSAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0FycmF5QnVmZmVyID0ga2luZE9mVGVzdCgnQXJyYXlCdWZmZXInKTtcblxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIGxldCByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKGlzQXJyYXlCdWZmZXIodmFsLmJ1ZmZlcikpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNTdHJpbmcgPSB0eXBlT2ZUZXN0KCdzdHJpbmcnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Z1bmN0aW9uID0gdHlwZU9mVGVzdCgnZnVuY3Rpb24nKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc051bWJlciA9IHR5cGVPZlRlc3QoJ251bWJlcicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc09iamVjdCA9ICh0aGluZykgPT4gdGhpbmcgIT09IG51bGwgJiYgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJvb2xlYW5cbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJvb2xlYW4sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Jvb2xlYW4gPSB0aGluZyA9PiB0aGluZyA9PT0gdHJ1ZSB8fCB0aGluZyA9PT0gZmFsc2U7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNQbGFpbk9iamVjdCA9ICh2YWwpID0+IHtcbiAgaWYgKGtpbmRPZih2YWwpICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiAocHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG90eXBlKSA9PT0gbnVsbCkgJiYgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsKSAmJiAhKFN5bWJvbC5pdGVyYXRvciBpbiB2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNEYXRlID0ga2luZE9mVGVzdCgnRGF0ZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGaWxlID0ga2luZE9mVGVzdCgnRmlsZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNCbG9iID0ga2luZE9mVGVzdCgnQmxvYicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZUxpc3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZUxpc3QgPSBraW5kT2ZUZXN0KCdGaWxlTGlzdCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzU3RyZWFtID0gKHZhbCkgPT4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGb3JtRGF0YSA9ICh0aGluZykgPT4ge1xuICBsZXQga2luZDtcbiAgcmV0dXJuIHRoaW5nICYmIChcbiAgICAodHlwZW9mIEZvcm1EYXRhID09PSAnZnVuY3Rpb24nICYmIHRoaW5nIGluc3RhbmNlb2YgRm9ybURhdGEpIHx8IChcbiAgICAgIGlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiAoXG4gICAgICAgIChraW5kID0ga2luZE9mKHRoaW5nKSkgPT09ICdmb3JtZGF0YScgfHxcbiAgICAgICAgLy8gZGV0ZWN0IGZvcm0tZGF0YSBpbnN0YW5jZVxuICAgICAgICAoa2luZCA9PT0gJ29iamVjdCcgJiYgaXNGdW5jdGlvbih0aGluZy50b1N0cmluZykgJiYgdGhpbmcudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgRm9ybURhdGFdJylcbiAgICAgIClcbiAgICApXG4gIClcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVVJMU2VhcmNoUGFyYW1zID0ga2luZE9mVGVzdCgnVVJMU2VhcmNoUGFyYW1zJyk7XG5cbmNvbnN0IFtpc1JlYWRhYmxlU3RyZWFtLCBpc1JlcXVlc3QsIGlzUmVzcG9uc2UsIGlzSGVhZGVyc10gPSBbJ1JlYWRhYmxlU3RyZWFtJywgJ1JlcXVlc3QnLCAnUmVzcG9uc2UnLCAnSGVhZGVycyddLm1hcChraW5kT2ZUZXN0KTtcblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuY29uc3QgdHJpbSA9IChzdHIpID0+IHN0ci50cmltID9cbiAgc3RyLnRyaW0oKSA6IHN0ci5yZXBsYWNlKC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZywgJycpO1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBbYWxsT3duS2V5cyA9IGZhbHNlXVxuICogQHJldHVybnMge2FueX1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuLCB7YWxsT3duS2V5cyA9IGZhbHNlfSA9IHt9KSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGk7XG4gIGxldCBsO1xuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yIChpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBjb25zdCBrZXlzID0gYWxsT3duS2V5cyA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikgOiBPYmplY3Qua2V5cyhvYmopO1xuICAgIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICAgIGxldCBrZXk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRLZXkob2JqLCBrZXkpIHtcbiAga2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICBsZXQgX2tleTtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBfa2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoa2V5ID09PSBfa2V5LnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIHJldHVybiBfa2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuY29uc3QgX2dsb2JhbCA9ICgoKSA9PiB7XG4gIC8qZXNsaW50IG5vLXVuZGVmOjAqL1xuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpIHJldHVybiBnbG9iYWxUaGlzO1xuICByZXR1cm4gdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKVxufSkoKTtcblxuY29uc3QgaXNDb250ZXh0RGVmaW5lZCA9IChjb250ZXh0KSA9PiAhaXNVbmRlZmluZWQoY29udGV4dCkgJiYgY29udGV4dCAhPT0gX2dsb2JhbDtcblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKlxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICBjb25zdCB7Y2FzZWxlc3N9ID0gaXNDb250ZXh0RGVmaW5lZCh0aGlzKSAmJiB0aGlzIHx8IHt9O1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgY29uc3QgYXNzaWduVmFsdWUgPSAodmFsLCBrZXkpID0+IHtcbiAgICBjb25zdCB0YXJnZXRLZXkgPSBjYXNlbGVzcyAmJiBmaW5kS2V5KHJlc3VsdCwga2V5KSB8fCBrZXk7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W3RhcmdldEtleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSBtZXJnZShyZXN1bHRbdGFyZ2V0S2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgYXJndW1lbnRzW2ldICYmIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXNdXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmNvbnN0IGV4dGVuZCA9IChhLCBiLCB0aGlzQXJnLCB7YWxsT3duS2V5c309IHt9KSA9PiB7XG4gIGZvckVhY2goYiwgKHZhbCwga2V5KSA9PiB7XG4gICAgaWYgKHRoaXNBcmcgJiYgaXNGdW5jdGlvbih2YWwpKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0sIHthbGxPd25LZXlzfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5jb25zdCBzdHJpcEJPTSA9IChjb250ZW50KSA9PiB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlclxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ29uc3RydWN0b3JcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcHJvcHNdXG4gKiBAcGFyYW0ge29iamVjdH0gW2Rlc2NyaXB0b3JzXVxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5jb25zdCBpbmhlcml0cyA9IChjb25zdHJ1Y3Rvciwgc3VwZXJDb25zdHJ1Y3RvciwgcHJvcHMsIGRlc2NyaXB0b3JzKSA9PiB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIGRlc2NyaXB0b3JzKTtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb25zdHJ1Y3RvciwgJ3N1cGVyJywge1xuICAgIHZhbHVlOiBzdXBlckNvbnN0cnVjdG9yLnByb3RvdHlwZVxuICB9KTtcbiAgcHJvcHMgJiYgT2JqZWN0LmFzc2lnbihjb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3BzKTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlIG9iamVjdCB3aXRoIGRlZXAgcHJvdG90eXBlIGNoYWluIHRvIGEgZmxhdCBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2VPYmogc291cmNlIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IFtkZXN0T2JqXVxuICogQHBhcmFtIHtGdW5jdGlvbnxCb29sZWFufSBbZmlsdGVyXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Byb3BGaWx0ZXJdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuY29uc3QgdG9GbGF0T2JqZWN0ID0gKHNvdXJjZU9iaiwgZGVzdE9iaiwgZmlsdGVyLCBwcm9wRmlsdGVyKSA9PiB7XG4gIGxldCBwcm9wcztcbiAgbGV0IGk7XG4gIGxldCBwcm9wO1xuICBjb25zdCBtZXJnZWQgPSB7fTtcblxuICBkZXN0T2JqID0gZGVzdE9iaiB8fCB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIGlmIChzb3VyY2VPYmogPT0gbnVsbCkgcmV0dXJuIGRlc3RPYmo7XG5cbiAgZG8ge1xuICAgIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc291cmNlT2JqKTtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICBwcm9wID0gcHJvcHNbaV07XG4gICAgICBpZiAoKCFwcm9wRmlsdGVyIHx8IHByb3BGaWx0ZXIocHJvcCwgc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgIW1lcmdlZFtwcm9wXSkge1xuICAgICAgICBkZXN0T2JqW3Byb3BdID0gc291cmNlT2JqW3Byb3BdO1xuICAgICAgICBtZXJnZWRbcHJvcF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3VyY2VPYmogPSBmaWx0ZXIgIT09IGZhbHNlICYmIGdldFByb3RvdHlwZU9mKHNvdXJjZU9iaik7XG4gIH0gd2hpbGUgKHNvdXJjZU9iaiAmJiAoIWZpbHRlciB8fCBmaWx0ZXIoc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgc291cmNlT2JqICE9PSBPYmplY3QucHJvdG90eXBlKTtcblxuICByZXR1cm4gZGVzdE9iajtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBzdHJpbmcgZW5kcyB3aXRoIHRoZSBjaGFyYWN0ZXJzIG9mIGEgc3BlY2lmaWVkIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWFyY2hTdHJpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb249IDBdXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGVuZHNXaXRoID0gKHN0ciwgc2VhcmNoU3RyaW5nLCBwb3NpdGlvbikgPT4ge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQgfHwgcG9zaXRpb24gPiBzdHIubGVuZ3RoKSB7XG4gICAgcG9zaXRpb24gPSBzdHIubGVuZ3RoO1xuICB9XG4gIHBvc2l0aW9uIC09IHNlYXJjaFN0cmluZy5sZW5ndGg7XG4gIGNvbnN0IGxhc3RJbmRleCA9IHN0ci5pbmRleE9mKHNlYXJjaFN0cmluZywgcG9zaXRpb24pO1xuICByZXR1cm4gbGFzdEluZGV4ICE9PSAtMSAmJiBsYXN0SW5kZXggPT09IHBvc2l0aW9uO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyBuZXcgYXJyYXkgZnJvbSBhcnJheSBsaWtlIG9iamVjdCBvciBudWxsIGlmIGZhaWxlZFxuICpcbiAqIEBwYXJhbSB7Kn0gW3RoaW5nXVxuICpcbiAqIEByZXR1cm5zIHs/QXJyYXl9XG4gKi9cbmNvbnN0IHRvQXJyYXkgPSAodGhpbmcpID0+IHtcbiAgaWYgKCF0aGluZykgcmV0dXJuIG51bGw7XG4gIGlmIChpc0FycmF5KHRoaW5nKSkgcmV0dXJuIHRoaW5nO1xuICBsZXQgaSA9IHRoaW5nLmxlbmd0aDtcbiAgaWYgKCFpc051bWJlcihpKSkgcmV0dXJuIG51bGw7XG4gIGNvbnN0IGFyciA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBhcnJbaV0gPSB0aGluZ1tpXTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG4vKipcbiAqIENoZWNraW5nIGlmIHRoZSBVaW50OEFycmF5IGV4aXN0cyBhbmQgaWYgaXQgZG9lcywgaXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmIHRoZVxuICogdGhpbmcgcGFzc2VkIGluIGlzIGFuIGluc3RhbmNlIG9mIFVpbnQ4QXJyYXlcbiAqXG4gKiBAcGFyYW0ge1R5cGVkQXJyYXl9XG4gKlxuICogQHJldHVybnMge0FycmF5fVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuY29uc3QgaXNUeXBlZEFycmF5ID0gKFR5cGVkQXJyYXkgPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gdGhpbmcgPT4ge1xuICAgIHJldHVybiBUeXBlZEFycmF5ICYmIHRoaW5nIGluc3RhbmNlb2YgVHlwZWRBcnJheTtcbiAgfTtcbn0pKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBnZXRQcm90b3R5cGVPZihVaW50OEFycmF5KSk7XG5cbi8qKlxuICogRm9yIGVhY2ggZW50cnkgaW4gdGhlIG9iamVjdCwgY2FsbCB0aGUgZnVuY3Rpb24gd2l0aCB0aGUga2V5IGFuZCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBlbnRyeS5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgZm9yRWFjaEVudHJ5ID0gKG9iaiwgZm4pID0+IHtcbiAgY29uc3QgZ2VuZXJhdG9yID0gb2JqICYmIG9ialtTeW1ib2wuaXRlcmF0b3JdO1xuXG4gIGNvbnN0IGl0ZXJhdG9yID0gZ2VuZXJhdG9yLmNhbGwob2JqKTtcblxuICBsZXQgcmVzdWx0O1xuXG4gIHdoaWxlICgocmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpKSAmJiAhcmVzdWx0LmRvbmUpIHtcbiAgICBjb25zdCBwYWlyID0gcmVzdWx0LnZhbHVlO1xuICAgIGZuLmNhbGwob2JqLCBwYWlyWzBdLCBwYWlyWzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgcmVndWxhciBleHByZXNzaW9uIGFuZCBhIHN0cmluZywgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgYWxsIHRoZSBtYXRjaGVzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJlZ0V4cCAtIFRoZSByZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggYWdhaW5zdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBUaGUgc3RyaW5nIHRvIHNlYXJjaC5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXk8Ym9vbGVhbj59XG4gKi9cbmNvbnN0IG1hdGNoQWxsID0gKHJlZ0V4cCwgc3RyKSA9PiB7XG4gIGxldCBtYXRjaGVzO1xuICBjb25zdCBhcnIgPSBbXTtcblxuICB3aGlsZSAoKG1hdGNoZXMgPSByZWdFeHAuZXhlYyhzdHIpKSAhPT0gbnVsbCkge1xuICAgIGFyci5wdXNoKG1hdGNoZXMpO1xuICB9XG5cbiAgcmV0dXJuIGFycjtcbn1cblxuLyogQ2hlY2tpbmcgaWYgdGhlIGtpbmRPZlRlc3QgZnVuY3Rpb24gcmV0dXJucyB0cnVlIHdoZW4gcGFzc2VkIGFuIEhUTUxGb3JtRWxlbWVudC4gKi9cbmNvbnN0IGlzSFRNTEZvcm0gPSBraW5kT2ZUZXN0KCdIVE1MRm9ybUVsZW1lbnQnKTtcblxuY29uc3QgdG9DYW1lbENhc2UgPSBzdHIgPT4ge1xuICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvWy1fXFxzXShbYS16XFxkXSkoXFx3KikvZyxcbiAgICBmdW5jdGlvbiByZXBsYWNlcihtLCBwMSwgcDIpIHtcbiAgICAgIHJldHVybiBwMS50b1VwcGVyQ2FzZSgpICsgcDI7XG4gICAgfVxuICApO1xufTtcblxuLyogQ3JlYXRpbmcgYSBmdW5jdGlvbiB0aGF0IHdpbGwgY2hlY2sgaWYgYW4gb2JqZWN0IGhhcyBhIHByb3BlcnR5LiAqL1xuY29uc3QgaGFzT3duUHJvcGVydHkgPSAoKHtoYXNPd25Qcm9wZXJ0eX0pID0+IChvYmosIHByb3ApID0+IGhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkoT2JqZWN0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1JlZ0V4cCA9IGtpbmRPZlRlc3QoJ1JlZ0V4cCcpO1xuXG5jb25zdCByZWR1Y2VEZXNjcmlwdG9ycyA9IChvYmosIHJlZHVjZXIpID0+IHtcbiAgY29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmopO1xuICBjb25zdCByZWR1Y2VkRGVzY3JpcHRvcnMgPSB7fTtcblxuICBmb3JFYWNoKGRlc2NyaXB0b3JzLCAoZGVzY3JpcHRvciwgbmFtZSkgPT4ge1xuICAgIGxldCByZXQ7XG4gICAgaWYgKChyZXQgPSByZWR1Y2VyKGRlc2NyaXB0b3IsIG5hbWUsIG9iaikpICE9PSBmYWxzZSkge1xuICAgICAgcmVkdWNlZERlc2NyaXB0b3JzW25hbWVdID0gcmV0IHx8IGRlc2NyaXB0b3I7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvYmosIHJlZHVjZWREZXNjcmlwdG9ycyk7XG59XG5cbi8qKlxuICogTWFrZXMgYWxsIG1ldGhvZHMgcmVhZC1vbmx5XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKi9cblxuY29uc3QgZnJlZXplTWV0aG9kcyA9IChvYmopID0+IHtcbiAgcmVkdWNlRGVzY3JpcHRvcnMob2JqLCAoZGVzY3JpcHRvciwgbmFtZSkgPT4ge1xuICAgIC8vIHNraXAgcmVzdHJpY3RlZCBwcm9wcyBpbiBzdHJpY3QgbW9kZVxuICAgIGlmIChpc0Z1bmN0aW9uKG9iaikgJiYgWydhcmd1bWVudHMnLCAnY2FsbGVyJywgJ2NhbGxlZSddLmluZGV4T2YobmFtZSkgIT09IC0xKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsdWUgPSBvYmpbbmFtZV07XG5cbiAgICBpZiAoIWlzRnVuY3Rpb24odmFsdWUpKSByZXR1cm47XG5cbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBmYWxzZTtcblxuICAgIGlmICgnd3JpdGFibGUnIGluIGRlc2NyaXB0b3IpIHtcbiAgICAgIGRlc2NyaXB0b3Iud3JpdGFibGUgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWRlc2NyaXB0b3Iuc2V0KSB7XG4gICAgICBkZXNjcmlwdG9yLnNldCA9ICgpID0+IHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0NhbiBub3QgcmV3cml0ZSByZWFkLW9ubHkgbWV0aG9kIFxcJycgKyBuYW1lICsgJ1xcJycpO1xuICAgICAgfTtcbiAgICB9XG4gIH0pO1xufVxuXG5jb25zdCB0b09iamVjdFNldCA9IChhcnJheU9yU3RyaW5nLCBkZWxpbWl0ZXIpID0+IHtcbiAgY29uc3Qgb2JqID0ge307XG5cbiAgY29uc3QgZGVmaW5lID0gKGFycikgPT4ge1xuICAgIGFyci5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgIG9ialt2YWx1ZV0gPSB0cnVlO1xuICAgIH0pO1xuICB9XG5cbiAgaXNBcnJheShhcnJheU9yU3RyaW5nKSA/IGRlZmluZShhcnJheU9yU3RyaW5nKSA6IGRlZmluZShTdHJpbmcoYXJyYXlPclN0cmluZykuc3BsaXQoZGVsaW1pdGVyKSk7XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuY29uc3Qgbm9vcCA9ICgpID0+IHt9XG5cbmNvbnN0IHRvRmluaXRlTnVtYmVyID0gKHZhbHVlLCBkZWZhdWx0VmFsdWUpID0+IHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgTnVtYmVyLmlzRmluaXRlKHZhbHVlID0gK3ZhbHVlKSA/IHZhbHVlIDogZGVmYXVsdFZhbHVlO1xufVxuXG5jb25zdCBBTFBIQSA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eidcblxuY29uc3QgRElHSVQgPSAnMDEyMzQ1Njc4OSc7XG5cbmNvbnN0IEFMUEhBQkVUID0ge1xuICBESUdJVCxcbiAgQUxQSEEsXG4gIEFMUEhBX0RJR0lUOiBBTFBIQSArIEFMUEhBLnRvVXBwZXJDYXNlKCkgKyBESUdJVFxufVxuXG5jb25zdCBnZW5lcmF0ZVN0cmluZyA9IChzaXplID0gMTYsIGFscGhhYmV0ID0gQUxQSEFCRVQuQUxQSEFfRElHSVQpID0+IHtcbiAgbGV0IHN0ciA9ICcnO1xuICBjb25zdCB7bGVuZ3RofSA9IGFscGhhYmV0O1xuICB3aGlsZSAoc2l6ZS0tKSB7XG4gICAgc3RyICs9IGFscGhhYmV0W01hdGgucmFuZG9tKCkgKiBsZW5ndGh8MF1cbiAgfVxuXG4gIHJldHVybiBzdHI7XG59XG5cbi8qKlxuICogSWYgdGhlIHRoaW5nIGlzIGEgRm9ybURhdGEgb2JqZWN0LCByZXR1cm4gdHJ1ZSwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IHRoaW5nIC0gVGhlIHRoaW5nIHRvIGNoZWNrLlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1NwZWNDb21wbGlhbnRGb3JtKHRoaW5nKSB7XG4gIHJldHVybiAhISh0aGluZyAmJiBpc0Z1bmN0aW9uKHRoaW5nLmFwcGVuZCkgJiYgdGhpbmdbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ0Zvcm1EYXRhJyAmJiB0aGluZ1tTeW1ib2wuaXRlcmF0b3JdKTtcbn1cblxuY29uc3QgdG9KU09OT2JqZWN0ID0gKG9iaikgPT4ge1xuICBjb25zdCBzdGFjayA9IG5ldyBBcnJheSgxMCk7XG5cbiAgY29uc3QgdmlzaXQgPSAoc291cmNlLCBpKSA9PiB7XG5cbiAgICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgaWYgKHN0YWNrLmluZGV4T2Yoc291cmNlKSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYoISgndG9KU09OJyBpbiBzb3VyY2UpKSB7XG4gICAgICAgIHN0YWNrW2ldID0gc291cmNlO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBpc0FycmF5KHNvdXJjZSkgPyBbXSA6IHt9O1xuXG4gICAgICAgIGZvckVhY2goc291cmNlLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlZHVjZWRWYWx1ZSA9IHZpc2l0KHZhbHVlLCBpICsgMSk7XG4gICAgICAgICAgIWlzVW5kZWZpbmVkKHJlZHVjZWRWYWx1ZSkgJiYgKHRhcmdldFtrZXldID0gcmVkdWNlZFZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RhY2tbaV0gPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgcmV0dXJuIHZpc2l0KG9iaiwgMCk7XG59XG5cbmNvbnN0IGlzQXN5bmNGbiA9IGtpbmRPZlRlc3QoJ0FzeW5jRnVuY3Rpb24nKTtcblxuY29uc3QgaXNUaGVuYWJsZSA9ICh0aGluZykgPT5cbiAgdGhpbmcgJiYgKGlzT2JqZWN0KHRoaW5nKSB8fCBpc0Z1bmN0aW9uKHRoaW5nKSkgJiYgaXNGdW5jdGlvbih0aGluZy50aGVuKSAmJiBpc0Z1bmN0aW9uKHRoaW5nLmNhdGNoKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nLFxuICBpc051bWJlcixcbiAgaXNCb29sZWFuLFxuICBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdCxcbiAgaXNSZWFkYWJsZVN0cmVhbSxcbiAgaXNSZXF1ZXN0LFxuICBpc1Jlc3BvbnNlLFxuICBpc0hlYWRlcnMsXG4gIGlzVW5kZWZpbmVkLFxuICBpc0RhdGUsXG4gIGlzRmlsZSxcbiAgaXNCbG9iLFxuICBpc1JlZ0V4cCxcbiAgaXNGdW5jdGlvbixcbiAgaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1R5cGVkQXJyYXksXG4gIGlzRmlsZUxpc3QsXG4gIGZvckVhY2gsXG4gIG1lcmdlLFxuICBleHRlbmQsXG4gIHRyaW0sXG4gIHN0cmlwQk9NLFxuICBpbmhlcml0cyxcbiAgdG9GbGF0T2JqZWN0LFxuICBraW5kT2YsXG4gIGtpbmRPZlRlc3QsXG4gIGVuZHNXaXRoLFxuICB0b0FycmF5LFxuICBmb3JFYWNoRW50cnksXG4gIG1hdGNoQWxsLFxuICBpc0hUTUxGb3JtLFxuICBoYXNPd25Qcm9wZXJ0eSxcbiAgaGFzT3duUHJvcDogaGFzT3duUHJvcGVydHksIC8vIGFuIGFsaWFzIHRvIGF2b2lkIEVTTGludCBuby1wcm90b3R5cGUtYnVpbHRpbnMgZGV0ZWN0aW9uXG4gIHJlZHVjZURlc2NyaXB0b3JzLFxuICBmcmVlemVNZXRob2RzLFxuICB0b09iamVjdFNldCxcbiAgdG9DYW1lbENhc2UsXG4gIG5vb3AsXG4gIHRvRmluaXRlTnVtYmVyLFxuICBmaW5kS2V5LFxuICBnbG9iYWw6IF9nbG9iYWwsXG4gIGlzQ29udGV4dERlZmluZWQsXG4gIEFMUEhBQkVULFxuICBnZW5lcmF0ZVN0cmluZyxcbiAgaXNTcGVjQ29tcGxpYW50Rm9ybSxcbiAgdG9KU09OT2JqZWN0LFxuICBpc0FzeW5jRm4sXG4gIGlzVGhlbmFibGVcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZ10gVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQXhpb3NFcnJvcihtZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIEVycm9yLmNhbGwodGhpcyk7XG5cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IoKSkuc3RhY2s7XG4gIH1cblxuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLm5hbWUgPSAnQXhpb3NFcnJvcic7XG4gIGNvZGUgJiYgKHRoaXMuY29kZSA9IGNvZGUpO1xuICBjb25maWcgJiYgKHRoaXMuY29uZmlnID0gY29uZmlnKTtcbiAgcmVxdWVzdCAmJiAodGhpcy5yZXF1ZXN0ID0gcmVxdWVzdCk7XG4gIHJlc3BvbnNlICYmICh0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2UpO1xufVxuXG51dGlscy5pbmhlcml0cyhBeGlvc0Vycm9yLCBFcnJvciwge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB1dGlscy50b0pTT05PYmplY3QodGhpcy5jb25maWcpLFxuICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgc3RhdHVzOiB0aGlzLnJlc3BvbnNlICYmIHRoaXMucmVzcG9uc2Uuc3RhdHVzID8gdGhpcy5yZXNwb25zZS5zdGF0dXMgOiBudWxsXG4gICAgfTtcbiAgfVxufSk7XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zRXJyb3IucHJvdG90eXBlO1xuY29uc3QgZGVzY3JpcHRvcnMgPSB7fTtcblxuW1xuICAnRVJSX0JBRF9PUFRJT05fVkFMVUUnLFxuICAnRVJSX0JBRF9PUFRJT04nLFxuICAnRUNPTk5BQk9SVEVEJyxcbiAgJ0VUSU1FRE9VVCcsXG4gICdFUlJfTkVUV09SSycsXG4gICdFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTJyxcbiAgJ0VSUl9ERVBSRUNBVEVEJyxcbiAgJ0VSUl9CQURfUkVTUE9OU0UnLFxuICAnRVJSX0JBRF9SRVFVRVNUJyxcbiAgJ0VSUl9DQU5DRUxFRCcsXG4gICdFUlJfTk9UX1NVUFBPUlQnLFxuICAnRVJSX0lOVkFMSURfVVJMJ1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbl0uZm9yRWFjaChjb2RlID0+IHtcbiAgZGVzY3JpcHRvcnNbY29kZV0gPSB7dmFsdWU6IGNvZGV9O1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEF4aW9zRXJyb3IsIGRlc2NyaXB0b3JzKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsICdpc0F4aW9zRXJyb3InLCB7dmFsdWU6IHRydWV9KTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbkF4aW9zRXJyb3IuZnJvbSA9IChlcnJvciwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSwgY3VzdG9tUHJvcHMpID0+IHtcbiAgY29uc3QgYXhpb3NFcnJvciA9IE9iamVjdC5jcmVhdGUocHJvdG90eXBlKTtcblxuICB1dGlscy50b0ZsYXRPYmplY3QoZXJyb3IsIGF4aW9zRXJyb3IsIGZ1bmN0aW9uIGZpbHRlcihvYmopIHtcbiAgICByZXR1cm4gb2JqICE9PSBFcnJvci5wcm90b3R5cGU7XG4gIH0sIHByb3AgPT4ge1xuICAgIHJldHVybiBwcm9wICE9PSAnaXNBeGlvc0Vycm9yJztcbiAgfSk7XG5cbiAgQXhpb3NFcnJvci5jYWxsKGF4aW9zRXJyb3IsIGVycm9yLm1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpO1xuXG4gIGF4aW9zRXJyb3IuY2F1c2UgPSBlcnJvcjtcblxuICBheGlvc0Vycm9yLm5hbWUgPSBlcnJvci5uYW1lO1xuXG4gIGN1c3RvbVByb3BzICYmIE9iamVjdC5hc3NpZ24oYXhpb3NFcnJvciwgY3VzdG9tUHJvcHMpO1xuXG4gIHJldHVybiBheGlvc0Vycm9yO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NFcnJvcjtcbiIsICJpbXBvcnQgRm9ybURhdGEgZnJvbSAnZm9ybS1kYXRhJztcblxuZXhwb3J0IGRlZmF1bHQgRm9ybURhdGE7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbi8vIHRlbXBvcmFyeSBob3RmaXggdG8gYXZvaWQgY2lyY3VsYXIgcmVmZXJlbmNlcyB1bnRpbCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBpcyByZWZhY3RvcmVkXG5pbXBvcnQgUGxhdGZvcm1Gb3JtRGF0YSBmcm9tICcuLi9wbGF0Zm9ybS9ub2RlL2NsYXNzZXMvRm9ybURhdGEuanMnO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGdpdmVuIHRoaW5nIGlzIGEgYXJyYXkgb3IganMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0aGluZyAtIFRoZSBvYmplY3Qgb3IgYXJyYXkgdG8gYmUgdmlzaXRlZC5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNWaXNpdGFibGUodGhpbmcpIHtcbiAgcmV0dXJuIHV0aWxzLmlzUGxhaW5PYmplY3QodGhpbmcpIHx8IHV0aWxzLmlzQXJyYXkodGhpbmcpO1xufVxuXG4vKipcbiAqIEl0IHJlbW92ZXMgdGhlIGJyYWNrZXRzIGZyb20gdGhlIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBwYXJhbWV0ZXIuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gdGhlIGtleSB3aXRob3V0IHRoZSBicmFja2V0cy5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQnJhY2tldHMoa2V5KSB7XG4gIHJldHVybiB1dGlscy5lbmRzV2l0aChrZXksICdbXScpID8ga2V5LnNsaWNlKDAsIC0yKSA6IGtleTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhdGgsIGEga2V5LCBhbmQgYSBib29sZWFuLCBhbmQgcmV0dXJucyBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgb2YgdGhlIGN1cnJlbnQgb2JqZWN0IGJlaW5nIGl0ZXJhdGVkIG92ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gZG90cyAtIElmIHRydWUsIHRoZSBrZXkgd2lsbCBiZSByZW5kZXJlZCB3aXRoIGRvdHMgaW5zdGVhZCBvZiBicmFja2V0cy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcGF0aCB0byB0aGUgY3VycmVudCBrZXkuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpIHtcbiAgaWYgKCFwYXRoKSByZXR1cm4ga2V5O1xuICByZXR1cm4gcGF0aC5jb25jYXQoa2V5KS5tYXAoZnVuY3Rpb24gZWFjaCh0b2tlbiwgaSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHRva2VuID0gcmVtb3ZlQnJhY2tldHModG9rZW4pO1xuICAgIHJldHVybiAhZG90cyAmJiBpID8gJ1snICsgdG9rZW4gKyAnXScgOiB0b2tlbjtcbiAgfSkuam9pbihkb3RzID8gJy4nIDogJycpO1xufVxuXG4vKipcbiAqIElmIHRoZSBhcnJheSBpcyBhbiBhcnJheSBhbmQgbm9uZSBvZiBpdHMgZWxlbWVudHMgYXJlIHZpc2l0YWJsZSwgdGhlbiBpdCdzIGEgZmxhdCBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjaGVja1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZsYXRBcnJheShhcnIpIHtcbiAgcmV0dXJuIHV0aWxzLmlzQXJyYXkoYXJyKSAmJiAhYXJyLnNvbWUoaXNWaXNpdGFibGUpO1xufVxuXG5jb25zdCBwcmVkaWNhdGVzID0gdXRpbHMudG9GbGF0T2JqZWN0KHV0aWxzLCB7fSwgbnVsbCwgZnVuY3Rpb24gZmlsdGVyKHByb3ApIHtcbiAgcmV0dXJuIC9eaXNbQS1aXS8udGVzdChwcm9wKTtcbn0pO1xuXG4vKipcbiAqIENvbnZlcnQgYSBkYXRhIG9iamVjdCB0byBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7P09iamVjdH0gW2Zvcm1EYXRhXVxuICogQHBhcmFtIHs/T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLnZpc2l0b3JdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm1ldGFUb2tlbnMgPSB0cnVlXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5kb3RzID0gZmFsc2VdXG4gKiBAcGFyYW0gez9Cb29sZWFufSBbb3B0aW9ucy5pbmRleGVzID0gZmFsc2VdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqKi9cblxuLyoqXG4gKiBJdCBjb252ZXJ0cyBhbiBvYmplY3QgaW50byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PGFueSwgYW55Pn0gb2JqIC0gVGhlIG9iamVjdCB0byBjb252ZXJ0IHRvIGZvcm0gZGF0YS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSAtIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gYXBwZW5kIHRvLlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zXG4gKlxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gdG9Gb3JtRGF0YShvYmosIGZvcm1EYXRhLCBvcHRpb25zKSB7XG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RhcmdldCBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGZvcm1EYXRhID0gZm9ybURhdGEgfHwgbmV3IChQbGF0Zm9ybUZvcm1EYXRhIHx8IEZvcm1EYXRhKSgpO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBvcHRpb25zID0gdXRpbHMudG9GbGF0T2JqZWN0KG9wdGlvbnMsIHtcbiAgICBtZXRhVG9rZW5zOiB0cnVlLFxuICAgIGRvdHM6IGZhbHNlLFxuICAgIGluZGV4ZXM6IGZhbHNlXG4gIH0sIGZhbHNlLCBmdW5jdGlvbiBkZWZpbmVkKG9wdGlvbiwgc291cmNlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gICAgcmV0dXJuICF1dGlscy5pc1VuZGVmaW5lZChzb3VyY2Vbb3B0aW9uXSk7XG4gIH0pO1xuXG4gIGNvbnN0IG1ldGFUb2tlbnMgPSBvcHRpb25zLm1ldGFUb2tlbnM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICBjb25zdCB2aXNpdG9yID0gb3B0aW9ucy52aXNpdG9yIHx8IGRlZmF1bHRWaXNpdG9yO1xuICBjb25zdCBkb3RzID0gb3B0aW9ucy5kb3RzO1xuICBjb25zdCBpbmRleGVzID0gb3B0aW9ucy5pbmRleGVzO1xuICBjb25zdCBfQmxvYiA9IG9wdGlvbnMuQmxvYiB8fCB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgQmxvYjtcbiAgY29uc3QgdXNlQmxvYiA9IF9CbG9iICYmIHV0aWxzLmlzU3BlY0NvbXBsaWFudEZvcm0oZm9ybURhdGEpO1xuXG4gIGlmICghdXRpbHMuaXNGdW5jdGlvbih2aXNpdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Zpc2l0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjb252ZXJ0VmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiAnJztcblxuICAgIGlmICh1dGlscy5pc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9JU09TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBpZiAoIXVzZUJsb2IgJiYgdXRpbHMuaXNCbG9iKHZhbHVlKSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ0Jsb2IgaXMgbm90IHN1cHBvcnRlZC4gVXNlIGEgQnVmZmVyIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIodmFsdWUpIHx8IHV0aWxzLmlzVHlwZWRBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB1c2VCbG9iICYmIHR5cGVvZiBCbG9iID09PSAnZnVuY3Rpb24nID8gbmV3IEJsb2IoW3ZhbHVlXSkgOiBCdWZmZXIuZnJvbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgdmlzaXRvci5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IGtleVxuICAgKiBAcGFyYW0ge0FycmF5PFN0cmluZ3xOdW1iZXI+fSBwYXRoXG4gICAqIEB0aGlzIHtGb3JtRGF0YX1cbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHJldHVybiB0cnVlIHRvIHZpc2l0IHRoZSBlYWNoIHByb3Agb2YgdGhlIHZhbHVlIHJlY3Vyc2l2ZWx5XG4gICAqL1xuICBmdW5jdGlvbiBkZWZhdWx0VmlzaXRvcih2YWx1ZSwga2V5LCBwYXRoKSB7XG4gICAgbGV0IGFyciA9IHZhbHVlO1xuXG4gICAgaWYgKHZhbHVlICYmICFwYXRoICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmICh1dGlscy5lbmRzV2l0aChrZXksICd7fScpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSBtZXRhVG9rZW5zID8ga2V5IDoga2V5LnNsaWNlKDAsIC0yKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgKHV0aWxzLmlzQXJyYXkodmFsdWUpICYmIGlzRmxhdEFycmF5KHZhbHVlKSkgfHxcbiAgICAgICAgKCh1dGlscy5pc0ZpbGVMaXN0KHZhbHVlKSB8fCB1dGlscy5lbmRzV2l0aChrZXksICdbXScpKSAmJiAoYXJyID0gdXRpbHMudG9BcnJheSh2YWx1ZSkpXG4gICAgICAgICkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGtleSA9IHJlbW92ZUJyYWNrZXRzKGtleSk7XG5cbiAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24gZWFjaChlbCwgaW5kZXgpIHtcbiAgICAgICAgICAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgZm9ybURhdGEuYXBwZW5kKFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgICAgICAgICBpbmRleGVzID09PSB0cnVlID8gcmVuZGVyS2V5KFtrZXldLCBpbmRleCwgZG90cykgOiAoaW5kZXhlcyA9PT0gbnVsbCA/IGtleSA6IGtleSArICdbXScpLFxuICAgICAgICAgICAgY29udmVydFZhbHVlKGVsKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzVmlzaXRhYmxlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZm9ybURhdGEuYXBwZW5kKHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpLCBjb252ZXJ0VmFsdWUodmFsdWUpKTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHN0YWNrID0gW107XG5cbiAgY29uc3QgZXhwb3NlZEhlbHBlcnMgPSBPYmplY3QuYXNzaWduKHByZWRpY2F0ZXMsIHtcbiAgICBkZWZhdWx0VmlzaXRvcixcbiAgICBjb252ZXJ0VmFsdWUsXG4gICAgaXNWaXNpdGFibGVcbiAgfSk7XG5cbiAgZnVuY3Rpb24gYnVpbGQodmFsdWUsIHBhdGgpIHtcbiAgICBpZiAodXRpbHMuaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG5cbiAgICBpZiAoc3RhY2suaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG4gICAgICB0aHJvdyBFcnJvcignQ2lyY3VsYXIgcmVmZXJlbmNlIGRldGVjdGVkIGluICcgKyBwYXRoLmpvaW4oJy4nKSk7XG4gICAgfVxuXG4gICAgc3RhY2sucHVzaCh2YWx1ZSk7XG5cbiAgICB1dGlscy5mb3JFYWNoKHZhbHVlLCBmdW5jdGlvbiBlYWNoKGVsLCBrZXkpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9ICEodXRpbHMuaXNVbmRlZmluZWQoZWwpIHx8IGVsID09PSBudWxsKSAmJiB2aXNpdG9yLmNhbGwoXG4gICAgICAgIGZvcm1EYXRhLCBlbCwgdXRpbHMuaXNTdHJpbmcoa2V5KSA/IGtleS50cmltKCkgOiBrZXksIHBhdGgsIGV4cG9zZWRIZWxwZXJzXG4gICAgICApO1xuXG4gICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgIGJ1aWxkKGVsLCBwYXRoID8gcGF0aC5jb25jYXQoa2V5KSA6IFtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHN0YWNrLnBvcCgpO1xuICB9XG5cbiAgaWYgKCF1dGlscy5pc09iamVjdChvYmopKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGF0YSBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgYnVpbGQob2JqKTtcblxuICByZXR1cm4gZm9ybURhdGE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvRm9ybURhdGE7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuXG4vKipcbiAqIEl0IGVuY29kZXMgYSBzdHJpbmcgYnkgcmVwbGFjaW5nIGFsbCBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCBpbiB0aGUgdW5yZXNlcnZlZCBzZXQgd2l0aFxuICogdGhlaXIgcGVyY2VudC1lbmNvZGVkIGVxdWl2YWxlbnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gZW5jb2RlLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHN0cikge1xuICBjb25zdCBjaGFyTWFwID0ge1xuICAgICchJzogJyUyMScsXG4gICAgXCInXCI6ICclMjcnLFxuICAgICcoJzogJyUyOCcsXG4gICAgJyknOiAnJTI5JyxcbiAgICAnfic6ICclN0UnLFxuICAgICclMjAnOiAnKycsXG4gICAgJyUwMCc6ICdcXHgwMCdcbiAgfTtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpfl18JTIwfCUwMC9nLCBmdW5jdGlvbiByZXBsYWNlcihtYXRjaCkge1xuICAgIHJldHVybiBjaGFyTWFwW21hdGNoXTtcbiAgfSk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXJhbXMgb2JqZWN0IGFuZCBjb252ZXJ0cyBpdCB0byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gcGFyYW1zIC0gVGhlIHBhcmFtZXRlcnMgdG8gYmUgY29udmVydGVkIHRvIGEgRm9ybURhdGEgb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB0byB0aGUgQXhpb3MgY29uc3RydWN0b3IuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykge1xuICB0aGlzLl9wYWlycyA9IFtdO1xuXG4gIHBhcmFtcyAmJiB0b0Zvcm1EYXRhKHBhcmFtcywgdGhpcywgb3B0aW9ucyk7XG59XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZTtcblxucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZChuYW1lLCB2YWx1ZSkge1xuICB0aGlzLl9wYWlycy5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xufTtcblxucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoZW5jb2Rlcikge1xuICBjb25zdCBfZW5jb2RlID0gZW5jb2RlciA/IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGVuY29kZXIuY2FsbCh0aGlzLCB2YWx1ZSwgZW5jb2RlKTtcbiAgfSA6IGVuY29kZTtcblxuICByZXR1cm4gdGhpcy5fcGFpcnMubWFwKGZ1bmN0aW9uIGVhY2gocGFpcikge1xuICAgIHJldHVybiBfZW5jb2RlKHBhaXJbMF0pICsgJz0nICsgX2VuY29kZShwYWlyWzFdKTtcbiAgfSwgJycpLmpvaW4oJyYnKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zVVJMU2VhcmNoUGFyYW1zO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBmcm9tICcuLi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzJztcblxuLyoqXG4gKiBJdCByZXBsYWNlcyBhbGwgaW5zdGFuY2VzIG9mIHRoZSBjaGFyYWN0ZXJzIGA6YCwgYCRgLCBgLGAsIGArYCwgYFtgLCBhbmQgYF1gIHdpdGggdGhlaXJcbiAqIFVSSSBlbmNvZGVkIGNvdW50ZXJwYXJ0c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWwgVGhlIHZhbHVlIHRvIGJlIGVuY29kZWQuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGVuY29kZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcGFyYW0gez9vYmplY3R9IG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgb3B0aW9ucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIFxuICBjb25zdCBfZW5jb2RlID0gb3B0aW9ucyAmJiBvcHRpb25zLmVuY29kZSB8fCBlbmNvZGU7XG5cbiAgY29uc3Qgc2VyaWFsaXplRm4gPSBvcHRpb25zICYmIG9wdGlvbnMuc2VyaWFsaXplO1xuXG4gIGxldCBzZXJpYWxpemVkUGFyYW1zO1xuXG4gIGlmIChzZXJpYWxpemVGbikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBzZXJpYWxpemVGbihwYXJhbXMsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSB1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpID9cbiAgICAgIHBhcmFtcy50b1N0cmluZygpIDpcbiAgICAgIG5ldyBBeGlvc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMsIG9wdGlvbnMpLnRvU3RyaW5nKF9lbmNvZGUpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICBjb25zdCBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoXCIjXCIpO1xuXG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbmNsYXNzIEludGVyY2VwdG9yTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICAgKi9cbiAgdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgICAgZnVsZmlsbGVkLFxuICAgICAgcmVqZWN0ZWQsXG4gICAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICAgIHJ1bldoZW46IG9wdGlvbnMgPyBvcHRpb25zLnJ1bldoZW4gOiBudWxsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICAgKlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBpbnRlcmNlcHRvciB3YXMgcmVtb3ZlZCwgYGZhbHNlYCBvdGhlcndpc2VcbiAgICovXG4gIGVqZWN0KGlkKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIGFsbCBpbnRlcmNlcHRvcnMgZnJvbSB0aGUgc3RhY2tcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBjbGVhcigpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVycykge1xuICAgICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICAgKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmb3JFYWNoKGZuKSB7XG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgICBmbihoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXJsIGZyb20gJ3VybCc7XG5leHBvcnQgZGVmYXVsdCB1cmwuVVJMU2VhcmNoUGFyYW1zO1xuIiwgImltcG9ydCBVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcy5qcydcbmltcG9ydCBGb3JtRGF0YSBmcm9tICcuL2NsYXNzZXMvRm9ybURhdGEuanMnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNOb2RlOiB0cnVlLFxuICBjbGFzc2VzOiB7XG4gICAgVVJMU2VhcmNoUGFyYW1zLFxuICAgIEZvcm1EYXRhLFxuICAgIEJsb2I6IHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiBCbG9iIHx8IG51bGxcbiAgfSxcbiAgcHJvdG9jb2xzOiBbICdodHRwJywgJ2h0dHBzJywgJ2ZpbGUnLCAnZGF0YScgXVxufTtcbiIsICJjb25zdCBoYXNCcm93c2VyRW52ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGhhc1N0YW5kYXJkQnJvd3NlckVudiA9IChcbiAgKHByb2R1Y3QpID0+IHtcbiAgICByZXR1cm4gaGFzQnJvd3NlckVudiAmJiBbJ1JlYWN0TmF0aXZlJywgJ05hdGl2ZVNjcmlwdCcsICdOUyddLmluZGV4T2YocHJvZHVjdCkgPCAwXG4gIH0pKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0KTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgd2ViV29ya2VyIGVudmlyb25tZW50XG4gKlxuICogQWx0aG91Z2ggdGhlIGBpc1N0YW5kYXJkQnJvd3NlckVudmAgbWV0aG9kIGluZGljYXRlcyB0aGF0XG4gKiBgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXJgLCB0aGUgV2ViV29ya2VyIHdpbGwgc3RpbGwgYmVcbiAqIGZpbHRlcmVkIG91dCBkdWUgdG8gaXRzIGp1ZGdtZW50IHN0YW5kYXJkXG4gKiBgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ2AuXG4gKiBUaGlzIGxlYWRzIHRvIGEgcHJvYmxlbSB3aGVuIGF4aW9zIHBvc3QgYEZvcm1EYXRhYCBpbiB3ZWJXb3JrZXJcbiAqL1xuY29uc3QgaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52ID0gKCgpID0+IHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlICYmXG4gICAgdHlwZW9mIHNlbGYuaW1wb3J0U2NyaXB0cyA9PT0gJ2Z1bmN0aW9uJ1xuICApO1xufSkoKTtcblxuY29uc3Qgb3JpZ2luID0gaGFzQnJvd3NlckVudiAmJiB3aW5kb3cubG9jYXRpb24uaHJlZiB8fCAnaHR0cDovL2xvY2FsaG9zdCc7XG5cbmV4cG9ydCB7XG4gIGhhc0Jyb3dzZXJFbnYsXG4gIGhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudixcbiAgaGFzU3RhbmRhcmRCcm93c2VyRW52LFxuICBvcmlnaW5cbn1cbiIsICJpbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi9ub2RlL2luZGV4LmpzJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vY29tbW9uL3V0aWxzLmpzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAuLi51dGlscyxcbiAgLi4ucGxhdGZvcm1cbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b0Zvcm1EYXRhKGRhdGEsIG5ldyBwbGF0Zm9ybS5jbGFzc2VzLlVSTFNlYXJjaFBhcmFtcygpLCBPYmplY3QuYXNzaWduKHtcbiAgICB2aXNpdG9yOiBmdW5jdGlvbih2YWx1ZSwga2V5LCBwYXRoLCBoZWxwZXJzKSB7XG4gICAgICBpZiAocGxhdGZvcm0uaXNOb2RlICYmIHV0aWxzLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICB0aGlzLmFwcGVuZChrZXksIHZhbHVlLnRvU3RyaW5nKCdiYXNlNjQnKSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhlbHBlcnMuZGVmYXVsdFZpc2l0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH0sIG9wdGlvbnMpKTtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcgbGlrZSBgZm9vW3hdW3ldW3pdYCBhbmQgcmV0dXJucyBhbiBhcnJheSBsaWtlIGBbJ2ZvbycsICd4JywgJ3knLCAneiddXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICpcbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHN0cmluZ3MuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlUHJvcFBhdGgobmFtZSkge1xuICAvLyBmb29beF1beV1bel1cbiAgLy8gZm9vLngueS56XG4gIC8vIGZvby14LXktelxuICAvLyBmb28geCB5IHpcbiAgcmV0dXJuIHV0aWxzLm1hdGNoQWxsKC9cXHcrfFxcWyhcXHcqKV0vZywgbmFtZSkubWFwKG1hdGNoID0+IHtcbiAgICByZXR1cm4gbWF0Y2hbMF0gPT09ICdbXScgPyAnJyA6IG1hdGNoWzFdIHx8IG1hdGNoWzBdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIGFycmF5IHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjb252ZXJ0IHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcmV0dXJucyBBbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFuZCB2YWx1ZXMgYXMgdGhlIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheVRvT2JqZWN0KGFycikge1xuICBjb25zdCBvYmogPSB7fTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGFycik7XG4gIGxldCBpO1xuICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgbGV0IGtleTtcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICBvYmpba2V5XSA9IGFycltrZXldO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBGb3JtRGF0YSBvYmplY3QgYW5kIHJldHVybnMgYSBKYXZhU2NyaXB0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGNvbnZlcnQgdG8gSlNPTi5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0PHN0cmluZywgYW55PiB8IG51bGx9IFRoZSBjb252ZXJ0ZWQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBmb3JtRGF0YVRvSlNPTihmb3JtRGF0YSkge1xuICBmdW5jdGlvbiBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldCwgaW5kZXgpIHtcbiAgICBsZXQgbmFtZSA9IHBhdGhbaW5kZXgrK107XG5cbiAgICBpZiAobmFtZSA9PT0gJ19fcHJvdG9fXycpIHJldHVybiB0cnVlO1xuXG4gICAgY29uc3QgaXNOdW1lcmljS2V5ID0gTnVtYmVyLmlzRmluaXRlKCtuYW1lKTtcbiAgICBjb25zdCBpc0xhc3QgPSBpbmRleCA+PSBwYXRoLmxlbmd0aDtcbiAgICBuYW1lID0gIW5hbWUgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXQpID8gdGFyZ2V0Lmxlbmd0aCA6IG5hbWU7XG5cbiAgICBpZiAoaXNMYXN0KSB7XG4gICAgICBpZiAodXRpbHMuaGFzT3duUHJvcCh0YXJnZXQsIG5hbWUpKSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IFt0YXJnZXRbbmFtZV0sIHZhbHVlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldFtuYW1lXSB8fCAhdXRpbHMuaXNPYmplY3QodGFyZ2V0W25hbWVdKSkge1xuICAgICAgdGFyZ2V0W25hbWVdID0gW107XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYnVpbGRQYXRoKHBhdGgsIHZhbHVlLCB0YXJnZXRbbmFtZV0sIGluZGV4KTtcblxuICAgIGlmIChyZXN1bHQgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBhcnJheVRvT2JqZWN0KHRhcmdldFtuYW1lXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICFpc051bWVyaWNLZXk7XG4gIH1cblxuICBpZiAodXRpbHMuaXNGb3JtRGF0YShmb3JtRGF0YSkgJiYgdXRpbHMuaXNGdW5jdGlvbihmb3JtRGF0YS5lbnRyaWVzKSkge1xuICAgIGNvbnN0IG9iaiA9IHt9O1xuXG4gICAgdXRpbHMuZm9yRWFjaEVudHJ5KGZvcm1EYXRhLCAobmFtZSwgdmFsdWUpID0+IHtcbiAgICAgIGJ1aWxkUGF0aChwYXJzZVByb3BQYXRoKG5hbWUpLCB2YWx1ZSwgb2JqLCAwKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZm9ybURhdGFUb0pTT047XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCB0cmFuc2l0aW9uYWxEZWZhdWx0cyBmcm9tICcuL3RyYW5zaXRpb25hbC5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuLi9oZWxwZXJzL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IHRvVVJMRW5jb2RlZEZvcm0gZnJvbSAnLi4vaGVscGVycy90b1VSTEVuY29kZWRGb3JtLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybURhdGFUb0pTT04gZnJvbSAnLi4vaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyc7XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcsIHRyaWVzIHRvIHBhcnNlIGl0LCBhbmQgaWYgaXQgZmFpbHMsIGl0IHJldHVybnMgdGhlIHN0cmluZ2lmaWVkIHZlcnNpb25cbiAqIG9mIHRoZSBpbnB1dFxuICpcbiAqIEBwYXJhbSB7YW55fSByYXdWYWx1ZSAtIFRoZSB2YWx1ZSB0byBiZSBzdHJpbmdpZmllZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHBhcnNlciAtIEEgZnVuY3Rpb24gdGhhdCBwYXJzZXMgYSBzdHJpbmcgaW50byBhIEphdmFTY3JpcHQgb2JqZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZW5jb2RlciAtIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIHZhbHVlIGFuZCByZXR1cm5zIGEgc3RyaW5nLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgc3RyaW5naWZpZWQgdmVyc2lvbiBvZiB0aGUgcmF3VmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG5jb25zdCBkZWZhdWx0cyA9IHtcblxuICB0cmFuc2l0aW9uYWw6IHRyYW5zaXRpb25hbERlZmF1bHRzLFxuXG4gIGFkYXB0ZXI6IFsneGhyJywgJ2h0dHAnLCAnZmV0Y2gnXSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgY29uc3QgY29udGVudFR5cGUgPSBoZWFkZXJzLmdldENvbnRlbnRUeXBlKCkgfHwgJyc7XG4gICAgY29uc3QgaGFzSlNPTkNvbnRlbnRUeXBlID0gY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24vanNvbicpID4gLTE7XG4gICAgY29uc3QgaXNPYmplY3RQYXlsb2FkID0gdXRpbHMuaXNPYmplY3QoZGF0YSk7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkICYmIHV0aWxzLmlzSFRNTEZvcm0oZGF0YSkpIHtcbiAgICAgIGRhdGEgPSBuZXcgRm9ybURhdGEoZGF0YSk7XG4gICAgfVxuXG4gICAgY29uc3QgaXNGb3JtRGF0YSA9IHV0aWxzLmlzRm9ybURhdGEoZGF0YSk7XG5cbiAgICBpZiAoaXNGb3JtRGF0YSkge1xuICAgICAgcmV0dXJuIGhhc0pTT05Db250ZW50VHlwZSA/IEpTT04uc3RyaW5naWZ5KGZvcm1EYXRhVG9KU09OKGRhdGEpKSA6IGRhdGE7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzUmVhZGFibGVTdHJlYW0oZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcsIGZhbHNlKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgbGV0IGlzRmlsZUxpc3Q7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkKSB7XG4gICAgICBpZiAoY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJykgPiAtMSkge1xuICAgICAgICByZXR1cm4gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCB0aGlzLmZvcm1TZXJpYWxpemVyKS50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAoKGlzRmlsZUxpc3QgPSB1dGlscy5pc0ZpbGVMaXN0KGRhdGEpKSB8fCBjb250ZW50VHlwZS5pbmRleE9mKCdtdWx0aXBhcnQvZm9ybS1kYXRhJykgPiAtMSkge1xuICAgICAgICBjb25zdCBfRm9ybURhdGEgPSB0aGlzLmVudiAmJiB0aGlzLmVudi5Gb3JtRGF0YTtcblxuICAgICAgICByZXR1cm4gdG9Gb3JtRGF0YShcbiAgICAgICAgICBpc0ZpbGVMaXN0ID8geydmaWxlc1tdJzogZGF0YX0gOiBkYXRhLFxuICAgICAgICAgIF9Gb3JtRGF0YSAmJiBuZXcgX0Zvcm1EYXRhKCksXG4gICAgICAgICAgdGhpcy5mb3JtU2VyaWFsaXplclxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc09iamVjdFBheWxvYWQgfHwgaGFzSlNPTkNvbnRlbnRUeXBlICkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24vanNvbicsIGZhbHNlKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIGNvbnN0IHRyYW5zaXRpb25hbCA9IHRoaXMudHJhbnNpdGlvbmFsIHx8IGRlZmF1bHRzLnRyYW5zaXRpb25hbDtcbiAgICBjb25zdCBmb3JjZWRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuZm9yY2VkSlNPTlBhcnNpbmc7XG4gICAgY29uc3QgSlNPTlJlcXVlc3RlZCA9IHRoaXMucmVzcG9uc2VUeXBlID09PSAnanNvbic7XG5cbiAgICBpZiAodXRpbHMuaXNSZXNwb25zZShkYXRhKSB8fCB1dGlscy5pc1JlYWRhYmxlU3RyZWFtKGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YSAmJiB1dGlscy5pc1N0cmluZyhkYXRhKSAmJiAoKGZvcmNlZEpTT05QYXJzaW5nICYmICF0aGlzLnJlc3BvbnNlVHlwZSkgfHwgSlNPTlJlcXVlc3RlZCkpIHtcbiAgICAgIGNvbnN0IHNpbGVudEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5zaWxlbnRKU09OUGFyc2luZztcbiAgICAgIGNvbnN0IHN0cmljdEpTT05QYXJzaW5nID0gIXNpbGVudEpTT05QYXJzaW5nICYmIEpTT05SZXF1ZXN0ZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcpIHtcbiAgICAgICAgICBpZiAoZS5uYW1lID09PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBBeGlvc0Vycm9yLmZyb20oZSwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFLCB0aGlzLCBudWxsLCB0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgZW52OiB7XG4gICAgRm9ybURhdGE6IHBsYXRmb3JtLmNsYXNzZXMuRm9ybURhdGEsXG4gICAgQmxvYjogcGxhdGZvcm0uY2xhc3Nlcy5CbG9iXG4gIH0sXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfSxcblxuICBoZWFkZXJzOiB7XG4gICAgY29tbW9uOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKicsXG4gICAgICAnQ29udGVudC1UeXBlJzogdW5kZWZpbmVkXG4gICAgfVxuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIChtZXRob2QpID0+IHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdHM7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbi8vIFJhd0F4aW9zSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbmNvbnN0IGlnbm9yZUR1cGxpY2F0ZU9mID0gdXRpbHMudG9PYmplY3RTZXQoW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl0pO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmF3SGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKlxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgcmF3SGVhZGVycyA9PiB7XG4gIGNvbnN0IHBhcnNlZCA9IHt9O1xuICBsZXQga2V5O1xuICBsZXQgdmFsO1xuICBsZXQgaTtcblxuICByYXdIZWFkZXJzICYmIHJhd0hlYWRlcnMuc3BsaXQoJ1xcbicpLmZvckVhY2goZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gbGluZS5zdWJzdHJpbmcoMCwgaSkudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gbGluZS5zdWJzdHJpbmcoaSArIDEpLnRyaW0oKTtcblxuICAgIGlmICgha2V5IHx8IChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZltrZXldKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgaWYgKHBhcnNlZFtrZXldKSB7XG4gICAgICAgIHBhcnNlZFtrZXldLnB1c2godmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gW3ZhbF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgcGFyc2VIZWFkZXJzIGZyb20gJy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzJztcblxuY29uc3QgJGludGVybmFscyA9IFN5bWJvbCgnaW50ZXJuYWxzJyk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpIHtcbiAgcmV0dXJuIGhlYWRlciAmJiBTdHJpbmcoaGVhZGVyKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKG5vcm1hbGl6ZVZhbHVlKSA6IFN0cmluZyh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVG9rZW5zKHN0cikge1xuICBjb25zdCB0b2tlbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCB0b2tlbnNSRSA9IC8oW15cXHMsOz1dKylcXHMqKD86PVxccyooW14sO10rKSk/L2c7XG4gIGxldCBtYXRjaDtcblxuICB3aGlsZSAoKG1hdGNoID0gdG9rZW5zUkUuZXhlYyhzdHIpKSkge1xuICAgIHRva2Vuc1ttYXRjaFsxXV0gPSBtYXRjaFsyXTtcbiAgfVxuXG4gIHJldHVybiB0b2tlbnM7XG59XG5cbmNvbnN0IGlzVmFsaWRIZWFkZXJOYW1lID0gKHN0cikgPT4gL15bLV9hLXpBLVowLTleYHx+LCEjJCUmJyorLl0rJC8udGVzdChzdHIudHJpbSgpKTtcblxuZnVuY3Rpb24gbWF0Y2hIZWFkZXJWYWx1ZShjb250ZXh0LCB2YWx1ZSwgaGVhZGVyLCBmaWx0ZXIsIGlzSGVhZGVyTmFtZUZpbHRlcikge1xuICBpZiAodXRpbHMuaXNGdW5jdGlvbihmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci5jYWxsKHRoaXMsIHZhbHVlLCBoZWFkZXIpO1xuICB9XG5cbiAgaWYgKGlzSGVhZGVyTmFtZUZpbHRlcikge1xuICAgIHZhbHVlID0gaGVhZGVyO1xuICB9XG5cbiAgaWYgKCF1dGlscy5pc1N0cmluZyh2YWx1ZSkpIHJldHVybjtcblxuICBpZiAodXRpbHMuaXNTdHJpbmcoZmlsdGVyKSkge1xuICAgIHJldHVybiB2YWx1ZS5pbmRleE9mKGZpbHRlcikgIT09IC0xO1xuICB9XG5cbiAgaWYgKHV0aWxzLmlzUmVnRXhwKGZpbHRlcikpIHtcbiAgICByZXR1cm4gZmlsdGVyLnRlc3QodmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhlYWRlcihoZWFkZXIpIHtcbiAgcmV0dXJuIGhlYWRlci50cmltKClcbiAgICAudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8oW2EtelxcZF0pKFxcdyopL2csICh3LCBjaGFyLCBzdHIpID0+IHtcbiAgICAgIHJldHVybiBjaGFyLnRvVXBwZXJDYXNlKCkgKyBzdHI7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkQWNjZXNzb3JzKG9iaiwgaGVhZGVyKSB7XG4gIGNvbnN0IGFjY2Vzc29yTmFtZSA9IHV0aWxzLnRvQ2FtZWxDYXNlKCcgJyArIGhlYWRlcik7XG5cbiAgWydnZXQnLCAnc2V0JywgJ2hhcyddLmZvckVhY2gobWV0aG9kTmFtZSA9PiB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbWV0aG9kTmFtZSArIGFjY2Vzc29yTmFtZSwge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbbWV0aG9kTmFtZV0uY2FsbCh0aGlzLCBoZWFkZXIsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgICAgfSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9KTtcbn1cblxuY2xhc3MgQXhpb3NIZWFkZXJzIHtcbiAgY29uc3RydWN0b3IoaGVhZGVycykge1xuICAgIGhlYWRlcnMgJiYgdGhpcy5zZXQoaGVhZGVycyk7XG4gIH1cblxuICBzZXQoaGVhZGVyLCB2YWx1ZU9yUmV3cml0ZSwgcmV3cml0ZSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgZnVuY3Rpb24gc2V0SGVhZGVyKF92YWx1ZSwgX2hlYWRlciwgX3Jld3JpdGUpIHtcbiAgICAgIGNvbnN0IGxIZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmICghbEhlYWRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hlYWRlciBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoc2VsZiwgbEhlYWRlcik7XG5cbiAgICAgIGlmKCFrZXkgfHwgc2VsZltrZXldID09PSB1bmRlZmluZWQgfHwgX3Jld3JpdGUgPT09IHRydWUgfHwgKF9yZXdyaXRlID09PSB1bmRlZmluZWQgJiYgc2VsZltrZXldICE9PSBmYWxzZSkpIHtcbiAgICAgICAgc2VsZltrZXkgfHwgX2hlYWRlcl0gPSBub3JtYWxpemVWYWx1ZShfdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHNldEhlYWRlcnMgPSAoaGVhZGVycywgX3Jld3JpdGUpID0+XG4gICAgICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIChfdmFsdWUsIF9oZWFkZXIpID0+IHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSk7XG5cbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChoZWFkZXIpIHx8IGhlYWRlciBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IpIHtcbiAgICAgIHNldEhlYWRlcnMoaGVhZGVyLCB2YWx1ZU9yUmV3cml0ZSlcbiAgICB9IGVsc2UgaWYodXRpbHMuaXNTdHJpbmcoaGVhZGVyKSAmJiAoaGVhZGVyID0gaGVhZGVyLnRyaW0oKSkgJiYgIWlzVmFsaWRIZWFkZXJOYW1lKGhlYWRlcikpIHtcbiAgICAgIHNldEhlYWRlcnMocGFyc2VIZWFkZXJzKGhlYWRlciksIHZhbHVlT3JSZXdyaXRlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzSGVhZGVycyhoZWFkZXIpKSB7XG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBoZWFkZXIuZW50cmllcygpKSB7XG4gICAgICAgIHNldEhlYWRlcih2YWx1ZSwga2V5LCByZXdyaXRlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZGVyICE9IG51bGwgJiYgc2V0SGVhZGVyKHZhbHVlT3JSZXdyaXRlLCBoZWFkZXIsIHJld3JpdGUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0KGhlYWRlciwgcGFyc2VyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzW2tleV07XG5cbiAgICAgICAgaWYgKCFwYXJzZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyc2VyID09PSB0cnVlKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVG9rZW5zKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc0Z1bmN0aW9uKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmNhbGwodGhpcywgdmFsdWUsIGtleSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNSZWdFeHAocGFyc2VyKSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZXIuZXhlYyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXJzZXIgbXVzdCBiZSBib29sZWFufHJlZ2V4cHxmdW5jdGlvbicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhhcyhoZWFkZXIsIG1hdGNoZXIpIHtcbiAgICBoZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoaGVhZGVyKTtcblxuICAgIGlmIChoZWFkZXIpIHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkodGhpcywgaGVhZGVyKTtcblxuICAgICAgcmV0dXJuICEhKGtleSAmJiB0aGlzW2tleV0gIT09IHVuZGVmaW5lZCAmJiAoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZSh0aGlzLCB0aGlzW2tleV0sIGtleSwgbWF0Y2hlcikpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBkZWxldGUoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgbGV0IGRlbGV0ZWQgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGRlbGV0ZUhlYWRlcihfaGVhZGVyKSB7XG4gICAgICBfaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoX2hlYWRlcikge1xuICAgICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHNlbGYsIF9oZWFkZXIpO1xuXG4gICAgICAgIGlmIChrZXkgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUoc2VsZiwgc2VsZltrZXldLCBrZXksIG1hdGNoZXIpKSkge1xuICAgICAgICAgIGRlbGV0ZSBzZWxmW2tleV07XG5cbiAgICAgICAgICBkZWxldGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5KGhlYWRlcikpIHtcbiAgICAgIGhlYWRlci5mb3JFYWNoKGRlbGV0ZUhlYWRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZUhlYWRlcihoZWFkZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9XG5cbiAgY2xlYXIobWF0Y2hlcikge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzKTtcbiAgICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZSh0aGlzLCB0aGlzW2tleV0sIGtleSwgbWF0Y2hlciwgdHJ1ZSkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXNba2V5XTtcbiAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlbGV0ZWQ7XG4gIH1cblxuICBub3JtYWxpemUoZm9ybWF0KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuXG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShoZWFkZXJzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIHNlbGZba2V5XSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICAgICAgZGVsZXRlIHNlbGZbaGVhZGVyXTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBub3JtYWxpemVkID0gZm9ybWF0ID8gZm9ybWF0SGVhZGVyKGhlYWRlcikgOiBTdHJpbmcoaGVhZGVyKS50cmltKCk7XG5cbiAgICAgIGlmIChub3JtYWxpemVkICE9PSBoZWFkZXIpIHtcbiAgICAgICAgZGVsZXRlIHNlbGZbaGVhZGVyXTtcbiAgICAgIH1cblxuICAgICAgc2VsZltub3JtYWxpemVkXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcblxuICAgICAgaGVhZGVyc1tub3JtYWxpemVkXSA9IHRydWU7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNvbmNhdCguLi50YXJnZXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuY29uY2F0KHRoaXMsIC4uLnRhcmdldHMpO1xuICB9XG5cbiAgdG9KU09OKGFzU3RyaW5ncykge1xuICAgIGNvbnN0IG9iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICB1dGlscy5mb3JFYWNoKHRoaXMsICh2YWx1ZSwgaGVhZGVyKSA9PiB7XG4gICAgICB2YWx1ZSAhPSBudWxsICYmIHZhbHVlICE9PSBmYWxzZSAmJiAob2JqW2hlYWRlcl0gPSBhc1N0cmluZ3MgJiYgdXRpbHMuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5qb2luKCcsICcpIDogdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLnRvSlNPTigpKVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSkubWFwKChbaGVhZGVyLCB2YWx1ZV0pID0+IGhlYWRlciArICc6ICcgKyB2YWx1ZSkuam9pbignXFxuJyk7XG4gIH1cblxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdBeGlvc0hlYWRlcnMnO1xuICB9XG5cbiAgc3RhdGljIGZyb20odGhpbmcpIHtcbiAgICByZXR1cm4gdGhpbmcgaW5zdGFuY2VvZiB0aGlzID8gdGhpbmcgOiBuZXcgdGhpcyh0aGluZyk7XG4gIH1cblxuICBzdGF0aWMgY29uY2F0KGZpcnN0LCAuLi50YXJnZXRzKSB7XG4gICAgY29uc3QgY29tcHV0ZWQgPSBuZXcgdGhpcyhmaXJzdCk7XG5cbiAgICB0YXJnZXRzLmZvckVhY2goKHRhcmdldCkgPT4gY29tcHV0ZWQuc2V0KHRhcmdldCkpO1xuXG4gICAgcmV0dXJuIGNvbXB1dGVkO1xuICB9XG5cbiAgc3RhdGljIGFjY2Vzc29yKGhlYWRlcikge1xuICAgIGNvbnN0IGludGVybmFscyA9IHRoaXNbJGludGVybmFsc10gPSAodGhpc1skaW50ZXJuYWxzXSA9IHtcbiAgICAgIGFjY2Vzc29yczoge31cbiAgICB9KTtcblxuICAgIGNvbnN0IGFjY2Vzc29ycyA9IGludGVybmFscy5hY2Nlc3NvcnM7XG4gICAgY29uc3QgcHJvdG90eXBlID0gdGhpcy5wcm90b3R5cGU7XG5cbiAgICBmdW5jdGlvbiBkZWZpbmVBY2Nlc3NvcihfaGVhZGVyKSB7XG4gICAgICBjb25zdCBsSGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoIWFjY2Vzc29yc1tsSGVhZGVyXSkge1xuICAgICAgICBidWlsZEFjY2Vzc29ycyhwcm90b3R5cGUsIF9oZWFkZXIpO1xuICAgICAgICBhY2Nlc3NvcnNbbEhlYWRlcl0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHV0aWxzLmlzQXJyYXkoaGVhZGVyKSA/IGhlYWRlci5mb3JFYWNoKGRlZmluZUFjY2Vzc29yKSA6IGRlZmluZUFjY2Vzc29yKGhlYWRlcik7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5BeGlvc0hlYWRlcnMuYWNjZXNzb3IoWydDb250ZW50LVR5cGUnLCAnQ29udGVudC1MZW5ndGgnLCAnQWNjZXB0JywgJ0FjY2VwdC1FbmNvZGluZycsICdVc2VyLUFnZW50JywgJ0F1dGhvcml6YXRpb24nXSk7XG5cbi8vIHJlc2VydmVkIG5hbWVzIGhvdGZpeFxudXRpbHMucmVkdWNlRGVzY3JpcHRvcnMoQXhpb3NIZWFkZXJzLnByb3RvdHlwZSwgKHt2YWx1ZX0sIGtleSkgPT4ge1xuICBsZXQgbWFwcGVkID0ga2V5WzBdLnRvVXBwZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSk7IC8vIG1hcCBgc2V0YCA9PiBgU2V0YFxuICByZXR1cm4ge1xuICAgIGdldDogKCkgPT4gdmFsdWUsXG4gICAgc2V0KGhlYWRlclZhbHVlKSB7XG4gICAgICB0aGlzW21hcHBlZF0gPSBoZWFkZXJWYWx1ZTtcbiAgICB9XG4gIH1cbn0pO1xuXG51dGlscy5mcmVlemVNZXRob2RzKEF4aW9zSGVhZGVycyk7XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zSGVhZGVycztcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHBhcmFtIHs/T2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2Ugb2JqZWN0XG4gKlxuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGZucywgcmVzcG9uc2UpIHtcbiAgY29uc3QgY29uZmlnID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgY29uc3QgY29udGV4dCA9IHJlc3BvbnNlIHx8IGNvbmZpZztcbiAgY29uc3QgaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbnRleHQuaGVhZGVycyk7XG4gIGxldCBkYXRhID0gY29udGV4dC5kYXRhO1xuXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb25maWcsIGRhdGEsIGhlYWRlcnMubm9ybWFsaXplKCksIHJlc3BvbnNlID8gcmVzcG9uc2Uuc3RhdHVzIDogdW5kZWZpbmVkKTtcbiAgfSk7XG5cbiAgaGVhZGVycy5ub3JtYWxpemUoKTtcblxuICByZXR1cm4gZGF0YTtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIEEgYENhbmNlbGVkRXJyb3JgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3Q9fSByZXF1ZXN0IFRoZSByZXF1ZXN0LlxuICpcbiAqIEByZXR1cm5zIHtDYW5jZWxlZEVycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsZWRFcnJvcihtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIEF4aW9zRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlID09IG51bGwgPyAnY2FuY2VsZWQnIDogbWVzc2FnZSwgQXhpb3NFcnJvci5FUlJfQ0FOQ0VMRUQsIGNvbmZpZywgcmVxdWVzdCk7XG4gIHRoaXMubmFtZSA9ICdDYW5jZWxlZEVycm9yJztcbn1cblxudXRpbHMuaW5oZXJpdHMoQ2FuY2VsZWRFcnJvciwgQXhpb3NFcnJvciwge1xuICBfX0NBTkNFTF9fOiB0cnVlXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FuY2VsZWRFcnJvcjtcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4vQXhpb3NFcnJvci5qcyc7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge29iamVjdH0gVGhlIHJlc3BvbnNlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICBjb25zdCB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgW0F4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0VdW01hdGguZmxvb3IocmVzcG9uc2Uuc3RhdHVzIC8gMTAwKSAtIDRdLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkK1xcLS5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8/XFwvJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufVxuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGlzQWJzb2x1dGVVUkwgZnJvbSAnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMLmpzJztcbmltcG9ydCBjb21iaW5lVVJMcyBmcm9tICcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufVxuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IHNldHRsZSBmcm9tICcuLy4uL2NvcmUvc2V0dGxlLmpzJztcbmltcG9ydCBidWlsZEZ1bGxQYXRoIGZyb20gJy4uL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyc7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSAnLi8uLi9oZWxwZXJzL2J1aWxkVVJMLmpzJztcbmltcG9ydCB7Z2V0UHJveHlGb3JVcmx9IGZyb20gJ3Byb3h5LWZyb20tZW52JztcbmltcG9ydCBodHRwIGZyb20gJ2h0dHAnO1xuaW1wb3J0IGh0dHBzIGZyb20gJ2h0dHBzJztcbmltcG9ydCB1dGlsIGZyb20gJ3V0aWwnO1xuaW1wb3J0IGZvbGxvd1JlZGlyZWN0cyBmcm9tICdmb2xsb3ctcmVkaXJlY3RzJztcbmltcG9ydCB6bGliIGZyb20gJ3psaWInO1xuaW1wb3J0IHtWRVJTSU9OfSBmcm9tICcuLi9lbnYvZGF0YS5qcyc7XG5pbXBvcnQgdHJhbnNpdGlvbmFsRGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuaW1wb3J0IGZyb21EYXRhVVJJIGZyb20gJy4uL2hlbHBlcnMvZnJvbURhdGFVUkkuanMnO1xuaW1wb3J0IHN0cmVhbSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQgQXhpb3NUcmFuc2Zvcm1TdHJlYW0gZnJvbSAnLi4vaGVscGVycy9BeGlvc1RyYW5zZm9ybVN0cmVhbS5qcyc7XG5pbXBvcnQge0V2ZW50RW1pdHRlcn0gZnJvbSAnZXZlbnRzJztcbmltcG9ydCBmb3JtRGF0YVRvU3RyZWFtIGZyb20gXCIuLi9oZWxwZXJzL2Zvcm1EYXRhVG9TdHJlYW0uanNcIjtcbmltcG9ydCByZWFkQmxvYiBmcm9tIFwiLi4vaGVscGVycy9yZWFkQmxvYi5qc1wiO1xuaW1wb3J0IFpsaWJIZWFkZXJUcmFuc2Zvcm1TdHJlYW0gZnJvbSAnLi4vaGVscGVycy9abGliSGVhZGVyVHJhbnNmb3JtU3RyZWFtLmpzJztcbmltcG9ydCBjYWxsYmFja2lmeSBmcm9tIFwiLi4vaGVscGVycy9jYWxsYmFja2lmeS5qc1wiO1xuXG5jb25zdCB6bGliT3B0aW9ucyA9IHtcbiAgZmx1c2g6IHpsaWIuY29uc3RhbnRzLlpfU1lOQ19GTFVTSCxcbiAgZmluaXNoRmx1c2g6IHpsaWIuY29uc3RhbnRzLlpfU1lOQ19GTFVTSFxufTtcblxuY29uc3QgYnJvdGxpT3B0aW9ucyA9IHtcbiAgZmx1c2g6IHpsaWIuY29uc3RhbnRzLkJST1RMSV9PUEVSQVRJT05fRkxVU0gsXG4gIGZpbmlzaEZsdXNoOiB6bGliLmNvbnN0YW50cy5CUk9UTElfT1BFUkFUSU9OX0ZMVVNIXG59XG5cbmNvbnN0IGlzQnJvdGxpU3VwcG9ydGVkID0gdXRpbHMuaXNGdW5jdGlvbih6bGliLmNyZWF0ZUJyb3RsaURlY29tcHJlc3MpO1xuXG5jb25zdCB7aHR0cDogaHR0cEZvbGxvdywgaHR0cHM6IGh0dHBzRm9sbG93fSA9IGZvbGxvd1JlZGlyZWN0cztcblxuY29uc3QgaXNIdHRwcyA9IC9odHRwczo/LztcblxuY29uc3Qgc3VwcG9ydGVkUHJvdG9jb2xzID0gcGxhdGZvcm0ucHJvdG9jb2xzLm1hcChwcm90b2NvbCA9PiB7XG4gIHJldHVybiBwcm90b2NvbCArICc6Jztcbn0pO1xuXG4vKipcbiAqIElmIHRoZSBwcm94eSBvciBjb25maWcgYmVmb3JlUmVkaXJlY3RzIGZ1bmN0aW9ucyBhcmUgZGVmaW5lZCwgY2FsbCB0aGVtIHdpdGggdGhlIG9wdGlvbnNcbiAqIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QgdGhhdCB3YXMgcGFzc2VkIHRvIHRoZSByZXF1ZXN0LlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3Q8c3RyaW5nLCBhbnk+fVxuICovXG5mdW5jdGlvbiBkaXNwYXRjaEJlZm9yZVJlZGlyZWN0KG9wdGlvbnMsIHJlc3BvbnNlRGV0YWlscykge1xuICBpZiAob3B0aW9ucy5iZWZvcmVSZWRpcmVjdHMucHJveHkpIHtcbiAgICBvcHRpb25zLmJlZm9yZVJlZGlyZWN0cy5wcm94eShvcHRpb25zKTtcbiAgfVxuICBpZiAob3B0aW9ucy5iZWZvcmVSZWRpcmVjdHMuY29uZmlnKSB7XG4gICAgb3B0aW9ucy5iZWZvcmVSZWRpcmVjdHMuY29uZmlnKG9wdGlvbnMsIHJlc3BvbnNlRGV0YWlscyk7XG4gIH1cbn1cblxuLyoqXG4gKiBJZiB0aGUgcHJveHkgb3IgY29uZmlnIGFmdGVyUmVkaXJlY3RzIGZ1bmN0aW9ucyBhcmUgZGVmaW5lZCwgY2FsbCB0aGVtIHdpdGggdGhlIG9wdGlvbnNcbiAqXG4gKiBAcGFyYW0ge2h0dHAuQ2xpZW50UmVxdWVzdEFyZ3N9IG9wdGlvbnNcbiAqIEBwYXJhbSB7QXhpb3NQcm94eUNvbmZpZ30gY29uZmlnUHJveHkgY29uZmlndXJhdGlvbiBmcm9tIEF4aW9zIG9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb25cbiAqXG4gKiBAcmV0dXJucyB7aHR0cC5DbGllbnRSZXF1ZXN0QXJnc31cbiAqL1xuZnVuY3Rpb24gc2V0UHJveHkob3B0aW9ucywgY29uZmlnUHJveHksIGxvY2F0aW9uKSB7XG4gIGxldCBwcm94eSA9IGNvbmZpZ1Byb3h5O1xuICBpZiAoIXByb3h5ICYmIHByb3h5ICE9PSBmYWxzZSkge1xuICAgIGNvbnN0IHByb3h5VXJsID0gZ2V0UHJveHlGb3JVcmwobG9jYXRpb24pO1xuICAgIGlmIChwcm94eVVybCkge1xuICAgICAgcHJveHkgPSBuZXcgVVJMKHByb3h5VXJsKTtcbiAgICB9XG4gIH1cbiAgaWYgKHByb3h5KSB7XG4gICAgLy8gQmFzaWMgcHJveHkgYXV0aG9yaXphdGlvblxuICAgIGlmIChwcm94eS51c2VybmFtZSkge1xuICAgICAgcHJveHkuYXV0aCA9IChwcm94eS51c2VybmFtZSB8fCAnJykgKyAnOicgKyAocHJveHkucGFzc3dvcmQgfHwgJycpO1xuICAgIH1cblxuICAgIGlmIChwcm94eS5hdXRoKSB7XG4gICAgICAvLyBTdXBwb3J0IHByb3h5IGF1dGggb2JqZWN0IGZvcm1cbiAgICAgIGlmIChwcm94eS5hdXRoLnVzZXJuYW1lIHx8IHByb3h5LmF1dGgucGFzc3dvcmQpIHtcbiAgICAgICAgcHJveHkuYXV0aCA9IChwcm94eS5hdXRoLnVzZXJuYW1lIHx8ICcnKSArICc6JyArIChwcm94eS5hdXRoLnBhc3N3b3JkIHx8ICcnKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGJhc2U2NCA9IEJ1ZmZlclxuICAgICAgICAuZnJvbShwcm94eS5hdXRoLCAndXRmOCcpXG4gICAgICAgIC50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgICBvcHRpb25zLmhlYWRlcnNbJ1Byb3h5LUF1dGhvcml6YXRpb24nXSA9ICdCYXNpYyAnICsgYmFzZTY0O1xuICAgIH1cblxuICAgIG9wdGlvbnMuaGVhZGVycy5ob3N0ID0gb3B0aW9ucy5ob3N0bmFtZSArIChvcHRpb25zLnBvcnQgPyAnOicgKyBvcHRpb25zLnBvcnQgOiAnJyk7XG4gICAgY29uc3QgcHJveHlIb3N0ID0gcHJveHkuaG9zdG5hbWUgfHwgcHJveHkuaG9zdDtcbiAgICBvcHRpb25zLmhvc3RuYW1lID0gcHJveHlIb3N0O1xuICAgIC8vIFJlcGxhY2UgJ2hvc3QnIHNpbmNlIG9wdGlvbnMgaXMgbm90IGEgVVJMIG9iamVjdFxuICAgIG9wdGlvbnMuaG9zdCA9IHByb3h5SG9zdDtcbiAgICBvcHRpb25zLnBvcnQgPSBwcm94eS5wb3J0O1xuICAgIG9wdGlvbnMucGF0aCA9IGxvY2F0aW9uO1xuICAgIGlmIChwcm94eS5wcm90b2NvbCkge1xuICAgICAgb3B0aW9ucy5wcm90b2NvbCA9IHByb3h5LnByb3RvY29sLmluY2x1ZGVzKCc6JykgPyBwcm94eS5wcm90b2NvbCA6IGAke3Byb3h5LnByb3RvY29sfTpgO1xuICAgIH1cbiAgfVxuXG4gIG9wdGlvbnMuYmVmb3JlUmVkaXJlY3RzLnByb3h5ID0gZnVuY3Rpb24gYmVmb3JlUmVkaXJlY3QocmVkaXJlY3RPcHRpb25zKSB7XG4gICAgLy8gQ29uZmlndXJlIHByb3h5IGZvciByZWRpcmVjdGVkIHJlcXVlc3QsIHBhc3NpbmcgdGhlIG9yaWdpbmFsIGNvbmZpZyBwcm94eSB0byBhcHBseVxuICAgIC8vIHRoZSBleGFjdCBzYW1lIGxvZ2ljIGFzIGlmIHRoZSByZWRpcmVjdGVkIHJlcXVlc3Qgd2FzIHBlcmZvcm1lZCBieSBheGlvcyBkaXJlY3RseS5cbiAgICBzZXRQcm94eShyZWRpcmVjdE9wdGlvbnMsIGNvbmZpZ1Byb3h5LCByZWRpcmVjdE9wdGlvbnMuaHJlZik7XG4gIH07XG59XG5cbmNvbnN0IGlzSHR0cEFkYXB0ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdXRpbHMua2luZE9mKHByb2Nlc3MpID09PSAncHJvY2Vzcyc7XG5cbi8vIHRlbXBvcmFyeSBob3RmaXhcblxuY29uc3Qgd3JhcEFzeW5jID0gKGFzeW5jRXhlY3V0b3IpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBsZXQgb25Eb25lO1xuICAgIGxldCBpc0RvbmU7XG5cbiAgICBjb25zdCBkb25lID0gKHZhbHVlLCBpc1JlamVjdGVkKSA9PiB7XG4gICAgICBpZiAoaXNEb25lKSByZXR1cm47XG4gICAgICBpc0RvbmUgPSB0cnVlO1xuICAgICAgb25Eb25lICYmIG9uRG9uZSh2YWx1ZSwgaXNSZWplY3RlZCk7XG4gICAgfVxuXG4gICAgY29uc3QgX3Jlc29sdmUgPSAodmFsdWUpID0+IHtcbiAgICAgIGRvbmUodmFsdWUpO1xuICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgfTtcblxuICAgIGNvbnN0IF9yZWplY3QgPSAocmVhc29uKSA9PiB7XG4gICAgICBkb25lKHJlYXNvbiwgdHJ1ZSk7XG4gICAgICByZWplY3QocmVhc29uKTtcbiAgICB9XG5cbiAgICBhc3luY0V4ZWN1dG9yKF9yZXNvbHZlLCBfcmVqZWN0LCAob25Eb25lSGFuZGxlcikgPT4gKG9uRG9uZSA9IG9uRG9uZUhhbmRsZXIpKS5jYXRjaChfcmVqZWN0KTtcbiAgfSlcbn07XG5cbmNvbnN0IHJlc29sdmVGYW1pbHkgPSAoe2FkZHJlc3MsIGZhbWlseX0pID0+IHtcbiAgaWYgKCF1dGlscy5pc1N0cmluZyhhZGRyZXNzKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignYWRkcmVzcyBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gIH1cbiAgcmV0dXJuICh7XG4gICAgYWRkcmVzcyxcbiAgICBmYW1pbHk6IGZhbWlseSB8fCAoYWRkcmVzcy5pbmRleE9mKCcuJykgPCAwID8gNiA6IDQpXG4gIH0pO1xufVxuXG5jb25zdCBidWlsZEFkZHJlc3NFbnRyeSA9IChhZGRyZXNzLCBmYW1pbHkpID0+IHJlc29sdmVGYW1pbHkodXRpbHMuaXNPYmplY3QoYWRkcmVzcykgPyBhZGRyZXNzIDoge2FkZHJlc3MsIGZhbWlseX0pO1xuXG4vKmVzbGludCBjb25zaXN0ZW50LXJldHVybjowKi9cbmV4cG9ydCBkZWZhdWx0IGlzSHR0cEFkYXB0ZXJTdXBwb3J0ZWQgJiYgZnVuY3Rpb24gaHR0cEFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiB3cmFwQXN5bmMoYXN5bmMgZnVuY3Rpb24gZGlzcGF0Y2hIdHRwUmVxdWVzdChyZXNvbHZlLCByZWplY3QsIG9uRG9uZSkge1xuICAgIGxldCB7ZGF0YSwgbG9va3VwLCBmYW1pbHl9ID0gY29uZmlnO1xuICAgIGNvbnN0IHtyZXNwb25zZVR5cGUsIHJlc3BvbnNlRW5jb2Rpbmd9ID0gY29uZmlnO1xuICAgIGNvbnN0IG1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKTtcbiAgICBsZXQgaXNEb25lO1xuICAgIGxldCByZWplY3RlZCA9IGZhbHNlO1xuICAgIGxldCByZXE7XG5cbiAgICBpZiAobG9va3VwKSB7XG4gICAgICBjb25zdCBfbG9va3VwID0gY2FsbGJhY2tpZnkobG9va3VwLCAodmFsdWUpID0+IHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdKTtcbiAgICAgIC8vIGhvdGZpeCB0byBzdXBwb3J0IG9wdC5hbGwgb3B0aW9uIHdoaWNoIGlzIHJlcXVpcmVkIGZvciBub2RlIDIwLnhcbiAgICAgIGxvb2t1cCA9IChob3N0bmFtZSwgb3B0LCBjYikgPT4ge1xuICAgICAgICBfbG9va3VwKGhvc3RuYW1lLCBvcHQsIChlcnIsIGFyZzAsIGFyZzEpID0+IHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gY2IoZXJyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBhZGRyZXNzZXMgPSB1dGlscy5pc0FycmF5KGFyZzApID8gYXJnMC5tYXAoYWRkciA9PiBidWlsZEFkZHJlc3NFbnRyeShhZGRyKSkgOiBbYnVpbGRBZGRyZXNzRW50cnkoYXJnMCwgYXJnMSldO1xuXG4gICAgICAgICAgb3B0LmFsbCA/IGNiKGVyciwgYWRkcmVzc2VzKSA6IGNiKGVyciwgYWRkcmVzc2VzWzBdLmFkZHJlc3MsIGFkZHJlc3Nlc1swXS5mYW1pbHkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB0ZW1wb3JhcnkgaW50ZXJuYWwgZW1pdHRlciB1bnRpbCB0aGUgQXhpb3NSZXF1ZXN0IGNsYXNzIHdpbGwgYmUgaW1wbGVtZW50ZWRcbiAgICBjb25zdCBlbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgY29uc3Qgb25GaW5pc2hlZCA9ICgpID0+IHtcbiAgICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKGFib3J0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0KTtcbiAgICAgIH1cblxuICAgICAgZW1pdHRlci5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICBvbkRvbmUoKHZhbHVlLCBpc1JlamVjdGVkKSA9PiB7XG4gICAgICBpc0RvbmUgPSB0cnVlO1xuICAgICAgaWYgKGlzUmVqZWN0ZWQpIHtcbiAgICAgICAgcmVqZWN0ZWQgPSB0cnVlO1xuICAgICAgICBvbkZpbmlzaGVkKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBhYm9ydChyZWFzb24pIHtcbiAgICAgIGVtaXR0ZXIuZW1pdCgnYWJvcnQnLCAhcmVhc29uIHx8IHJlYXNvbi50eXBlID8gbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnLCByZXEpIDogcmVhc29uKTtcbiAgICB9XG5cbiAgICBlbWl0dGVyLm9uY2UoJ2Fib3J0JywgcmVqZWN0KTtcblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4gfHwgY29uZmlnLnNpZ25hbCkge1xuICAgICAgY29uZmlnLmNhbmNlbFRva2VuICYmIGNvbmZpZy5jYW5jZWxUb2tlbi5zdWJzY3JpYmUoYWJvcnQpO1xuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5hYm9ydGVkID8gYWJvcnQoKSA6IGNvbmZpZy5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUGFyc2UgdXJsXG4gICAgY29uc3QgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICBjb25zdCBwYXJzZWQgPSBuZXcgVVJMKGZ1bGxQYXRoLCAnaHR0cDovL2xvY2FsaG9zdCcpO1xuICAgIGNvbnN0IHByb3RvY29sID0gcGFyc2VkLnByb3RvY29sIHx8IHN1cHBvcnRlZFByb3RvY29sc1swXTtcblxuICAgIGlmIChwcm90b2NvbCA9PT0gJ2RhdGE6Jykge1xuICAgICAgbGV0IGNvbnZlcnRlZERhdGE7XG5cbiAgICAgIGlmIChtZXRob2QgIT09ICdHRVQnKSB7XG4gICAgICAgIHJldHVybiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB7XG4gICAgICAgICAgc3RhdHVzOiA0MDUsXG4gICAgICAgICAgc3RhdHVzVGV4dDogJ21ldGhvZCBub3QgYWxsb3dlZCcsXG4gICAgICAgICAgaGVhZGVyczoge30sXG4gICAgICAgICAgY29uZmlnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBjb252ZXJ0ZWREYXRhID0gZnJvbURhdGFVUkkoY29uZmlnLnVybCwgcmVzcG9uc2VUeXBlID09PSAnYmxvYicsIHtcbiAgICAgICAgICBCbG9iOiBjb25maWcuZW52ICYmIGNvbmZpZy5lbnYuQmxvYlxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB0aHJvdyBBeGlvc0Vycm9yLmZyb20oZXJyLCBBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgY29uZmlnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgIGNvbnZlcnRlZERhdGEgPSBjb252ZXJ0ZWREYXRhLnRvU3RyaW5nKHJlc3BvbnNlRW5jb2RpbmcpO1xuXG4gICAgICAgIGlmICghcmVzcG9uc2VFbmNvZGluZyB8fCByZXNwb25zZUVuY29kaW5nID09PSAndXRmOCcpIHtcbiAgICAgICAgICBjb252ZXJ0ZWREYXRhID0gdXRpbHMuc3RyaXBCT00oY29udmVydGVkRGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2VUeXBlID09PSAnc3RyZWFtJykge1xuICAgICAgICBjb252ZXJ0ZWREYXRhID0gc3RyZWFtLlJlYWRhYmxlLmZyb20oY29udmVydGVkRGF0YSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB7XG4gICAgICAgIGRhdGE6IGNvbnZlcnRlZERhdGEsXG4gICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICBzdGF0dXNUZXh0OiAnT0snLFxuICAgICAgICBoZWFkZXJzOiBuZXcgQXhpb3NIZWFkZXJzKCksXG4gICAgICAgIGNvbmZpZ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnRlZFByb3RvY29scy5pbmRleE9mKHByb3RvY29sKSA9PT0gLTEpIHtcbiAgICAgIHJldHVybiByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAgICdVbnN1cHBvcnRlZCBwcm90b2NvbCAnICsgcHJvdG9jb2wsXG4gICAgICAgIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULFxuICAgICAgICBjb25maWdcbiAgICAgICkpO1xuICAgIH1cblxuICAgIGNvbnN0IGhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb25maWcuaGVhZGVycykubm9ybWFsaXplKCk7XG5cbiAgICAvLyBTZXQgVXNlci1BZ2VudCAocmVxdWlyZWQgYnkgc29tZSBzZXJ2ZXJzKVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYXhpb3MvYXhpb3MvaXNzdWVzLzY5XG4gICAgLy8gVXNlci1BZ2VudCBpcyBzcGVjaWZpZWQ7IGhhbmRsZSBjYXNlIHdoZXJlIG5vIFVBIGhlYWRlciBpcyBkZXNpcmVkXG4gICAgLy8gT25seSBzZXQgaGVhZGVyIGlmIGl0IGhhc24ndCBiZWVuIHNldCBpbiBjb25maWdcbiAgICBoZWFkZXJzLnNldCgnVXNlci1BZ2VudCcsICdheGlvcy8nICsgVkVSU0lPTiwgZmFsc2UpO1xuXG4gICAgY29uc3Qgb25Eb3dubG9hZFByb2dyZXNzID0gY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcztcbiAgICBjb25zdCBvblVwbG9hZFByb2dyZXNzID0gY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3M7XG4gICAgY29uc3QgbWF4UmF0ZSA9IGNvbmZpZy5tYXhSYXRlO1xuICAgIGxldCBtYXhVcGxvYWRSYXRlID0gdW5kZWZpbmVkO1xuICAgIGxldCBtYXhEb3dubG9hZFJhdGUgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBzdXBwb3J0IGZvciBzcGVjIGNvbXBsaWFudCBGb3JtRGF0YSBvYmplY3RzXG4gICAgaWYgKHV0aWxzLmlzU3BlY0NvbXBsaWFudEZvcm0oZGF0YSkpIHtcbiAgICAgIGNvbnN0IHVzZXJCb3VuZGFyeSA9IGhlYWRlcnMuZ2V0Q29udGVudFR5cGUoL2JvdW5kYXJ5PShbLV9cXHdcXGRdezEwLDcwfSkvaSk7XG5cbiAgICAgIGRhdGEgPSBmb3JtRGF0YVRvU3RyZWFtKGRhdGEsIChmb3JtSGVhZGVycykgPT4ge1xuICAgICAgICBoZWFkZXJzLnNldChmb3JtSGVhZGVycyk7XG4gICAgICB9LCB7XG4gICAgICAgIHRhZzogYGF4aW9zLSR7VkVSU0lPTn0tYm91bmRhcnlgLFxuICAgICAgICBib3VuZGFyeTogdXNlckJvdW5kYXJ5ICYmIHVzZXJCb3VuZGFyeVsxXSB8fCB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgLy8gc3VwcG9ydCBmb3IgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZm9ybS1kYXRhIGFwaVxuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSAmJiB1dGlscy5pc0Z1bmN0aW9uKGRhdGEuZ2V0SGVhZGVycykpIHtcbiAgICAgIGhlYWRlcnMuc2V0KGRhdGEuZ2V0SGVhZGVycygpKTtcblxuICAgICAgaWYgKCFoZWFkZXJzLmhhc0NvbnRlbnRMZW5ndGgoKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGtub3duTGVuZ3RoID0gYXdhaXQgdXRpbC5wcm9taXNpZnkoZGF0YS5nZXRMZW5ndGgpLmNhbGwoZGF0YSk7XG4gICAgICAgICAgTnVtYmVyLmlzRmluaXRlKGtub3duTGVuZ3RoKSAmJiBrbm93bkxlbmd0aCA+PSAwICYmIGhlYWRlcnMuc2V0Q29udGVudExlbmd0aChrbm93bkxlbmd0aCk7XG4gICAgICAgICAgLyplc2xpbnQgbm8tZW1wdHk6MCovXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNCbG9iKGRhdGEpKSB7XG4gICAgICBkYXRhLnNpemUgJiYgaGVhZGVycy5zZXRDb250ZW50VHlwZShkYXRhLnR5cGUgfHwgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpO1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50TGVuZ3RoKGRhdGEuc2l6ZSB8fCAwKTtcbiAgICAgIGRhdGEgPSBzdHJlYW0uUmVhZGFibGUuZnJvbShyZWFkQmxvYihkYXRhKSk7XG4gICAgfSBlbHNlIGlmIChkYXRhICYmICF1dGlscy5pc1N0cmVhbShkYXRhKSkge1xuICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkge1xuICAgICAgICAvLyBOb3RoaW5nIHRvIGRvLi4uXG4gICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkpIHtcbiAgICAgICAgZGF0YSA9IEJ1ZmZlci5mcm9tKG5ldyBVaW50OEFycmF5KGRhdGEpKTtcbiAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNTdHJpbmcoZGF0YSkpIHtcbiAgICAgICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsICd1dGYtOCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgICAnRGF0YSBhZnRlciB0cmFuc2Zvcm1hdGlvbiBtdXN0IGJlIGEgc3RyaW5nLCBhbiBBcnJheUJ1ZmZlciwgYSBCdWZmZXIsIG9yIGEgU3RyZWFtJyxcbiAgICAgICAgICBBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCxcbiAgICAgICAgICBjb25maWdcbiAgICAgICAgKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCBDb250ZW50LUxlbmd0aCBoZWFkZXIgaWYgZGF0YSBleGlzdHNcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudExlbmd0aChkYXRhLmxlbmd0aCwgZmFsc2UpO1xuXG4gICAgICBpZiAoY29uZmlnLm1heEJvZHlMZW5ndGggPiAtMSAmJiBkYXRhLmxlbmd0aCA+IGNvbmZpZy5tYXhCb2R5TGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAgICAgJ1JlcXVlc3QgYm9keSBsYXJnZXIgdGhhbiBtYXhCb2R5TGVuZ3RoIGxpbWl0JyxcbiAgICAgICAgICBBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCxcbiAgICAgICAgICBjb25maWdcbiAgICAgICAgKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY29udGVudExlbmd0aCA9IHV0aWxzLnRvRmluaXRlTnVtYmVyKGhlYWRlcnMuZ2V0Q29udGVudExlbmd0aCgpKTtcblxuICAgIGlmICh1dGlscy5pc0FycmF5KG1heFJhdGUpKSB7XG4gICAgICBtYXhVcGxvYWRSYXRlID0gbWF4UmF0ZVswXTtcbiAgICAgIG1heERvd25sb2FkUmF0ZSA9IG1heFJhdGVbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIG1heFVwbG9hZFJhdGUgPSBtYXhEb3dubG9hZFJhdGUgPSBtYXhSYXRlO1xuICAgIH1cblxuICAgIGlmIChkYXRhICYmIChvblVwbG9hZFByb2dyZXNzIHx8IG1heFVwbG9hZFJhdGUpKSB7XG4gICAgICBpZiAoIXV0aWxzLmlzU3RyZWFtKGRhdGEpKSB7XG4gICAgICAgIGRhdGEgPSBzdHJlYW0uUmVhZGFibGUuZnJvbShkYXRhLCB7b2JqZWN0TW9kZTogZmFsc2V9KTtcbiAgICAgIH1cblxuICAgICAgZGF0YSA9IHN0cmVhbS5waXBlbGluZShbZGF0YSwgbmV3IEF4aW9zVHJhbnNmb3JtU3RyZWFtKHtcbiAgICAgICAgbGVuZ3RoOiBjb250ZW50TGVuZ3RoLFxuICAgICAgICBtYXhSYXRlOiB1dGlscy50b0Zpbml0ZU51bWJlcihtYXhVcGxvYWRSYXRlKVxuICAgICAgfSldLCB1dGlscy5ub29wKTtcblxuICAgICAgb25VcGxvYWRQcm9ncmVzcyAmJiBkYXRhLm9uKCdwcm9ncmVzcycsIHByb2dyZXNzID0+IHtcbiAgICAgICAgb25VcGxvYWRQcm9ncmVzcyhPYmplY3QuYXNzaWduKHByb2dyZXNzLCB7XG4gICAgICAgICAgdXBsb2FkOiB0cnVlXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBsZXQgYXV0aCA9IHVuZGVmaW5lZDtcbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIGNvbnN0IHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICBjb25zdCBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgYXV0aCA9IHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQ7XG4gICAgfVxuXG4gICAgaWYgKCFhdXRoICYmIHBhcnNlZC51c2VybmFtZSkge1xuICAgICAgY29uc3QgdXJsVXNlcm5hbWUgPSBwYXJzZWQudXNlcm5hbWU7XG4gICAgICBjb25zdCB1cmxQYXNzd29yZCA9IHBhcnNlZC5wYXNzd29yZDtcbiAgICAgIGF1dGggPSB1cmxVc2VybmFtZSArICc6JyArIHVybFBhc3N3b3JkO1xuICAgIH1cblxuICAgIGF1dGggJiYgaGVhZGVycy5kZWxldGUoJ2F1dGhvcml6YXRpb24nKTtcblxuICAgIGxldCBwYXRoO1xuXG4gICAgdHJ5IHtcbiAgICAgIHBhdGggPSBidWlsZFVSTChcbiAgICAgICAgcGFyc2VkLnBhdGhuYW1lICsgcGFyc2VkLnNlYXJjaCxcbiAgICAgICAgY29uZmlnLnBhcmFtcyxcbiAgICAgICAgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXJcbiAgICAgICkucmVwbGFjZSgvXlxcPy8sICcnKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnN0IGN1c3RvbUVyciA9IG5ldyBFcnJvcihlcnIubWVzc2FnZSk7XG4gICAgICBjdXN0b21FcnIuY29uZmlnID0gY29uZmlnO1xuICAgICAgY3VzdG9tRXJyLnVybCA9IGNvbmZpZy51cmw7XG4gICAgICBjdXN0b21FcnIuZXhpc3RzID0gdHJ1ZTtcbiAgICAgIHJldHVybiByZWplY3QoY3VzdG9tRXJyKTtcbiAgICB9XG5cbiAgICBoZWFkZXJzLnNldChcbiAgICAgICdBY2NlcHQtRW5jb2RpbmcnLFxuICAgICAgJ2d6aXAsIGNvbXByZXNzLCBkZWZsYXRlJyArIChpc0Jyb3RsaVN1cHBvcnRlZCA/ICcsIGJyJyA6ICcnKSwgZmFsc2VcbiAgICAgICk7XG5cbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgcGF0aCxcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgaGVhZGVyczogaGVhZGVycy50b0pTT04oKSxcbiAgICAgIGFnZW50czogeyBodHRwOiBjb25maWcuaHR0cEFnZW50LCBodHRwczogY29uZmlnLmh0dHBzQWdlbnQgfSxcbiAgICAgIGF1dGgsXG4gICAgICBwcm90b2NvbCxcbiAgICAgIGZhbWlseSxcbiAgICAgIGJlZm9yZVJlZGlyZWN0OiBkaXNwYXRjaEJlZm9yZVJlZGlyZWN0LFxuICAgICAgYmVmb3JlUmVkaXJlY3RzOiB7fVxuICAgIH07XG5cbiAgICAvLyBjYWNoZWFibGUtbG9va3VwIGludGVncmF0aW9uIGhvdGZpeFxuICAgICF1dGlscy5pc1VuZGVmaW5lZChsb29rdXApICYmIChvcHRpb25zLmxvb2t1cCA9IGxvb2t1cCk7XG5cbiAgICBpZiAoY29uZmlnLnNvY2tldFBhdGgpIHtcbiAgICAgIG9wdGlvbnMuc29ja2V0UGF0aCA9IGNvbmZpZy5zb2NrZXRQYXRoO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zLmhvc3RuYW1lID0gcGFyc2VkLmhvc3RuYW1lO1xuICAgICAgb3B0aW9ucy5wb3J0ID0gcGFyc2VkLnBvcnQ7XG4gICAgICBzZXRQcm94eShvcHRpb25zLCBjb25maWcucHJveHksIHByb3RvY29sICsgJy8vJyArIHBhcnNlZC5ob3N0bmFtZSArIChwYXJzZWQucG9ydCA/ICc6JyArIHBhcnNlZC5wb3J0IDogJycpICsgb3B0aW9ucy5wYXRoKTtcbiAgICB9XG5cbiAgICBsZXQgdHJhbnNwb3J0O1xuICAgIGNvbnN0IGlzSHR0cHNSZXF1ZXN0ID0gaXNIdHRwcy50ZXN0KG9wdGlvbnMucHJvdG9jb2wpO1xuICAgIG9wdGlvbnMuYWdlbnQgPSBpc0h0dHBzUmVxdWVzdCA/IGNvbmZpZy5odHRwc0FnZW50IDogY29uZmlnLmh0dHBBZ2VudDtcbiAgICBpZiAoY29uZmlnLnRyYW5zcG9ydCkge1xuICAgICAgdHJhbnNwb3J0ID0gY29uZmlnLnRyYW5zcG9ydDtcbiAgICB9IGVsc2UgaWYgKGNvbmZpZy5tYXhSZWRpcmVjdHMgPT09IDApIHtcbiAgICAgIHRyYW5zcG9ydCA9IGlzSHR0cHNSZXF1ZXN0ID8gaHR0cHMgOiBodHRwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoY29uZmlnLm1heFJlZGlyZWN0cykge1xuICAgICAgICBvcHRpb25zLm1heFJlZGlyZWN0cyA9IGNvbmZpZy5tYXhSZWRpcmVjdHM7XG4gICAgICB9XG4gICAgICBpZiAoY29uZmlnLmJlZm9yZVJlZGlyZWN0KSB7XG4gICAgICAgIG9wdGlvbnMuYmVmb3JlUmVkaXJlY3RzLmNvbmZpZyA9IGNvbmZpZy5iZWZvcmVSZWRpcmVjdDtcbiAgICAgIH1cbiAgICAgIHRyYW5zcG9ydCA9IGlzSHR0cHNSZXF1ZXN0ID8gaHR0cHNGb2xsb3cgOiBodHRwRm9sbG93O1xuICAgIH1cblxuICAgIGlmIChjb25maWcubWF4Qm9keUxlbmd0aCA+IC0xKSB7XG4gICAgICBvcHRpb25zLm1heEJvZHlMZW5ndGggPSBjb25maWcubWF4Qm9keUxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZm9sbG93LXJlZGlyZWN0cyBkb2VzIG5vdCBza2lwIGNvbXBhcmlzb24sIHNvIGl0IHNob3VsZCBhbHdheXMgc3VjY2VlZCBmb3IgYXhpb3MgLTEgdW5saW1pdGVkXG4gICAgICBvcHRpb25zLm1heEJvZHlMZW5ndGggPSBJbmZpbml0eTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmluc2VjdXJlSFRUUFBhcnNlcikge1xuICAgICAgb3B0aW9ucy5pbnNlY3VyZUhUVFBQYXJzZXIgPSBjb25maWcuaW5zZWN1cmVIVFRQUGFyc2VyO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSB0aGUgcmVxdWVzdFxuICAgIHJlcSA9IHRyYW5zcG9ydC5yZXF1ZXN0KG9wdGlvbnMsIGZ1bmN0aW9uIGhhbmRsZVJlc3BvbnNlKHJlcykge1xuICAgICAgaWYgKHJlcS5kZXN0cm95ZWQpIHJldHVybjtcblxuICAgICAgY29uc3Qgc3RyZWFtcyA9IFtyZXNdO1xuXG4gICAgICBjb25zdCByZXNwb25zZUxlbmd0aCA9ICtyZXMuaGVhZGVyc1snY29udGVudC1sZW5ndGgnXTtcblxuICAgICAgaWYgKG9uRG93bmxvYWRQcm9ncmVzcykge1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm1TdHJlYW0gPSBuZXcgQXhpb3NUcmFuc2Zvcm1TdHJlYW0oe1xuICAgICAgICAgIGxlbmd0aDogdXRpbHMudG9GaW5pdGVOdW1iZXIocmVzcG9uc2VMZW5ndGgpLFxuICAgICAgICAgIG1heFJhdGU6IHV0aWxzLnRvRmluaXRlTnVtYmVyKG1heERvd25sb2FkUmF0ZSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgb25Eb3dubG9hZFByb2dyZXNzICYmIHRyYW5zZm9ybVN0cmVhbS5vbigncHJvZ3Jlc3MnLCBwcm9ncmVzcyA9PiB7XG4gICAgICAgICAgb25Eb3dubG9hZFByb2dyZXNzKE9iamVjdC5hc3NpZ24ocHJvZ3Jlc3MsIHtcbiAgICAgICAgICAgIGRvd25sb2FkOiB0cnVlXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzdHJlYW1zLnB1c2godHJhbnNmb3JtU3RyZWFtKTtcbiAgICAgIH1cblxuICAgICAgLy8gZGVjb21wcmVzcyB0aGUgcmVzcG9uc2UgYm9keSB0cmFuc3BhcmVudGx5IGlmIHJlcXVpcmVkXG4gICAgICBsZXQgcmVzcG9uc2VTdHJlYW0gPSByZXM7XG5cbiAgICAgIC8vIHJldHVybiB0aGUgbGFzdCByZXF1ZXN0IGluIGNhc2Ugb2YgcmVkaXJlY3RzXG4gICAgICBjb25zdCBsYXN0UmVxdWVzdCA9IHJlcy5yZXEgfHwgcmVxO1xuXG4gICAgICAvLyBpZiBkZWNvbXByZXNzIGRpc2FibGVkIHdlIHNob3VsZCBub3QgZGVjb21wcmVzc1xuICAgICAgaWYgKGNvbmZpZy5kZWNvbXByZXNzICE9PSBmYWxzZSAmJiByZXMuaGVhZGVyc1snY29udGVudC1lbmNvZGluZyddKSB7XG4gICAgICAgIC8vIGlmIG5vIGNvbnRlbnQsIGJ1dCBoZWFkZXJzIHN0aWxsIHNheSB0aGF0IGl0IGlzIGVuY29kZWQsXG4gICAgICAgIC8vIHJlbW92ZSB0aGUgaGVhZGVyIG5vdCBjb25mdXNlIGRvd25zdHJlYW0gb3BlcmF0aW9uc1xuICAgICAgICBpZiAobWV0aG9kID09PSAnSEVBRCcgfHwgcmVzLnN0YXR1c0NvZGUgPT09IDIwNCkge1xuICAgICAgICAgIGRlbGV0ZSByZXMuaGVhZGVyc1snY29udGVudC1lbmNvZGluZyddO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoICgocmVzLmhlYWRlcnNbJ2NvbnRlbnQtZW5jb2RpbmcnXSB8fCAnJykudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAvKmVzbGludCBkZWZhdWx0LWNhc2U6MCovXG4gICAgICAgIGNhc2UgJ2d6aXAnOlxuICAgICAgICBjYXNlICd4LWd6aXAnOlxuICAgICAgICBjYXNlICdjb21wcmVzcyc6XG4gICAgICAgIGNhc2UgJ3gtY29tcHJlc3MnOlxuICAgICAgICAgIC8vIGFkZCB0aGUgdW56aXBwZXIgdG8gdGhlIGJvZHkgc3RyZWFtIHByb2Nlc3NpbmcgcGlwZWxpbmVcbiAgICAgICAgICBzdHJlYW1zLnB1c2goemxpYi5jcmVhdGVVbnppcCh6bGliT3B0aW9ucykpO1xuXG4gICAgICAgICAgLy8gcmVtb3ZlIHRoZSBjb250ZW50LWVuY29kaW5nIGluIG9yZGVyIHRvIG5vdCBjb25mdXNlIGRvd25zdHJlYW0gb3BlcmF0aW9uc1xuICAgICAgICAgIGRlbGV0ZSByZXMuaGVhZGVyc1snY29udGVudC1lbmNvZGluZyddO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkZWZsYXRlJzpcbiAgICAgICAgICBzdHJlYW1zLnB1c2gobmV3IFpsaWJIZWFkZXJUcmFuc2Zvcm1TdHJlYW0oKSk7XG5cbiAgICAgICAgICAvLyBhZGQgdGhlIHVuemlwcGVyIHRvIHRoZSBib2R5IHN0cmVhbSBwcm9jZXNzaW5nIHBpcGVsaW5lXG4gICAgICAgICAgc3RyZWFtcy5wdXNoKHpsaWIuY3JlYXRlVW56aXAoemxpYk9wdGlvbnMpKTtcblxuICAgICAgICAgIC8vIHJlbW92ZSB0aGUgY29udGVudC1lbmNvZGluZyBpbiBvcmRlciB0byBub3QgY29uZnVzZSBkb3duc3RyZWFtIG9wZXJhdGlvbnNcbiAgICAgICAgICBkZWxldGUgcmVzLmhlYWRlcnNbJ2NvbnRlbnQtZW5jb2RpbmcnXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYnInOlxuICAgICAgICAgIGlmIChpc0Jyb3RsaVN1cHBvcnRlZCkge1xuICAgICAgICAgICAgc3RyZWFtcy5wdXNoKHpsaWIuY3JlYXRlQnJvdGxpRGVjb21wcmVzcyhicm90bGlPcHRpb25zKSk7XG4gICAgICAgICAgICBkZWxldGUgcmVzLmhlYWRlcnNbJ2NvbnRlbnQtZW5jb2RpbmcnXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmVzcG9uc2VTdHJlYW0gPSBzdHJlYW1zLmxlbmd0aCA+IDEgPyBzdHJlYW0ucGlwZWxpbmUoc3RyZWFtcywgdXRpbHMubm9vcCkgOiBzdHJlYW1zWzBdO1xuXG4gICAgICBjb25zdCBvZmZMaXN0ZW5lcnMgPSBzdHJlYW0uZmluaXNoZWQocmVzcG9uc2VTdHJlYW0sICgpID0+IHtcbiAgICAgICAgb2ZmTGlzdGVuZXJzKCk7XG4gICAgICAgIG9uRmluaXNoZWQoKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgc3RhdHVzOiByZXMuc3RhdHVzQ29kZSxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVzLnN0YXR1c01lc3NhZ2UsXG4gICAgICAgIGhlYWRlcnM6IG5ldyBBeGlvc0hlYWRlcnMocmVzLmhlYWRlcnMpLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IGxhc3RSZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBpZiAocmVzcG9uc2VUeXBlID09PSAnc3RyZWFtJykge1xuICAgICAgICByZXNwb25zZS5kYXRhID0gcmVzcG9uc2VTdHJlYW07XG4gICAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlQnVmZmVyID0gW107XG4gICAgICAgIGxldCB0b3RhbFJlc3BvbnNlQnl0ZXMgPSAwO1xuXG4gICAgICAgIHJlc3BvbnNlU3RyZWFtLm9uKCdkYXRhJywgZnVuY3Rpb24gaGFuZGxlU3RyZWFtRGF0YShjaHVuaykge1xuICAgICAgICAgIHJlc3BvbnNlQnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgICAgIHRvdGFsUmVzcG9uc2VCeXRlcyArPSBjaHVuay5sZW5ndGg7XG5cbiAgICAgICAgICAvLyBtYWtlIHN1cmUgdGhlIGNvbnRlbnQgbGVuZ3RoIGlzIG5vdCBvdmVyIHRoZSBtYXhDb250ZW50TGVuZ3RoIGlmIHNwZWNpZmllZFxuICAgICAgICAgIGlmIChjb25maWcubWF4Q29udGVudExlbmd0aCA+IC0xICYmIHRvdGFsUmVzcG9uc2VCeXRlcyA+IGNvbmZpZy5tYXhDb250ZW50TGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBzdHJlYW0uZGVzdHJveSgpIGVtaXQgYWJvcnRlZCBldmVudCBiZWZvcmUgY2FsbGluZyByZWplY3QoKSBvbiBOb2RlLmpzIHYxNlxuICAgICAgICAgICAgcmVqZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmVzcG9uc2VTdHJlYW0uZGVzdHJveSgpO1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdtYXhDb250ZW50TGVuZ3RoIHNpemUgb2YgJyArIGNvbmZpZy5tYXhDb250ZW50TGVuZ3RoICsgJyBleGNlZWRlZCcsXG4gICAgICAgICAgICAgIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgY29uZmlnLCBsYXN0UmVxdWVzdCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmVzcG9uc2VTdHJlYW0ub24oJ2Fib3J0ZWQnLCBmdW5jdGlvbiBoYW5kbGVyU3RyZWFtQWJvcnRlZCgpIHtcbiAgICAgICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgICAgICdtYXhDb250ZW50TGVuZ3RoIHNpemUgb2YgJyArIGNvbmZpZy5tYXhDb250ZW50TGVuZ3RoICsgJyBleGNlZWRlZCcsXG4gICAgICAgICAgICBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0UsXG4gICAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgICBsYXN0UmVxdWVzdFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmVzcG9uc2VTdHJlYW0uZGVzdHJveShlcnIpO1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXNwb25zZVN0cmVhbS5vbignZXJyb3InLCBmdW5jdGlvbiBoYW5kbGVTdHJlYW1FcnJvcihlcnIpIHtcbiAgICAgICAgICBpZiAocmVxLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgIHJlamVjdChBeGlvc0Vycm9yLmZyb20oZXJyLCBudWxsLCBjb25maWcsIGxhc3RSZXF1ZXN0KSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJlc3BvbnNlU3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiBoYW5kbGVTdHJlYW1FbmQoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCByZXNwb25zZURhdGEgPSByZXNwb25zZUJ1ZmZlci5sZW5ndGggPT09IDEgPyByZXNwb25zZUJ1ZmZlclswXSA6IEJ1ZmZlci5jb25jYXQocmVzcG9uc2VCdWZmZXIpO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlVHlwZSAhPT0gJ2FycmF5YnVmZmVyJykge1xuICAgICAgICAgICAgICByZXNwb25zZURhdGEgPSByZXNwb25zZURhdGEudG9TdHJpbmcocmVzcG9uc2VFbmNvZGluZyk7XG4gICAgICAgICAgICAgIGlmICghcmVzcG9uc2VFbmNvZGluZyB8fCByZXNwb25zZUVuY29kaW5nID09PSAndXRmOCcpIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZURhdGEgPSB1dGlscy5zdHJpcEJPTShyZXNwb25zZURhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNwb25zZS5kYXRhID0gcmVzcG9uc2VEYXRhO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChBeGlvc0Vycm9yLmZyb20oZXJyLCBudWxsLCBjb25maWcsIHJlc3BvbnNlLnJlcXVlc3QsIHJlc3BvbnNlKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGVtaXR0ZXIub25jZSgnYWJvcnQnLCBlcnIgPT4ge1xuICAgICAgICBpZiAoIXJlc3BvbnNlU3RyZWFtLmRlc3Ryb3llZCkge1xuICAgICAgICAgIHJlc3BvbnNlU3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgICByZXNwb25zZVN0cmVhbS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZW1pdHRlci5vbmNlKCdhYm9ydCcsIGVyciA9PiB7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICAgIHJlcS5kZXN0cm95KGVycik7XG4gICAgfSk7XG5cbiAgICAvLyBIYW5kbGUgZXJyb3JzXG4gICAgcmVxLm9uKCdlcnJvcicsIGZ1bmN0aW9uIGhhbmRsZVJlcXVlc3RFcnJvcihlcnIpIHtcbiAgICAgIC8vIEB0b2RvIHJlbW92ZVxuICAgICAgLy8gaWYgKHJlcS5hYm9ydGVkICYmIGVyci5jb2RlICE9PSBBeGlvc0Vycm9yLkVSUl9GUl9UT09fTUFOWV9SRURJUkVDVFMpIHJldHVybjtcbiAgICAgIHJlamVjdChBeGlvc0Vycm9yLmZyb20oZXJyLCBudWxsLCBjb25maWcsIHJlcSkpO1xuICAgIH0pO1xuXG4gICAgLy8gc2V0IHRjcCBrZWVwIGFsaXZlIHRvIHByZXZlbnQgZHJvcCBjb25uZWN0aW9uIGJ5IHBlZXJcbiAgICByZXEub24oJ3NvY2tldCcsIGZ1bmN0aW9uIGhhbmRsZVJlcXVlc3RTb2NrZXQoc29ja2V0KSB7XG4gICAgICAvLyBkZWZhdWx0IGludGVydmFsIG9mIHNlbmRpbmcgYWNrIHBhY2tldCBpcyAxIG1pbnV0ZVxuICAgICAgc29ja2V0LnNldEtlZXBBbGl2ZSh0cnVlLCAxMDAwICogNjApO1xuICAgIH0pO1xuXG4gICAgLy8gSGFuZGxlIHJlcXVlc3QgdGltZW91dFxuICAgIGlmIChjb25maWcudGltZW91dCkge1xuICAgICAgLy8gVGhpcyBpcyBmb3JjaW5nIGEgaW50IHRpbWVvdXQgdG8gYXZvaWQgcHJvYmxlbXMgaWYgdGhlIGByZXFgIGludGVyZmFjZSBkb2Vzbid0IGhhbmRsZSBvdGhlciB0eXBlcy5cbiAgICAgIGNvbnN0IHRpbWVvdXQgPSBwYXJzZUludChjb25maWcudGltZW91dCwgMTApO1xuXG4gICAgICBpZiAoTnVtYmVyLmlzTmFOKHRpbWVvdXQpKSB7XG4gICAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgICAnZXJyb3IgdHJ5aW5nIHRvIHBhcnNlIGBjb25maWcudGltZW91dGAgdG8gaW50JyxcbiAgICAgICAgICBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFLFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICByZXFcbiAgICAgICAgKSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBTb21ldGltZSwgdGhlIHJlc3BvbnNlIHdpbGwgYmUgdmVyeSBzbG93LCBhbmQgZG9lcyBub3QgcmVzcG9uZCwgdGhlIGNvbm5lY3QgZXZlbnQgd2lsbCBiZSBibG9jayBieSBldmVudCBsb29wIHN5c3RlbS5cbiAgICAgIC8vIEFuZCB0aW1lciBjYWxsYmFjayB3aWxsIGJlIGZpcmVkLCBhbmQgYWJvcnQoKSB3aWxsIGJlIGludm9rZWQgYmVmb3JlIGNvbm5lY3Rpb24sIHRoZW4gZ2V0IFwic29ja2V0IGhhbmcgdXBcIiBhbmQgY29kZSBFQ09OTlJFU0VULlxuICAgICAgLy8gQXQgdGhpcyB0aW1lLCBpZiB3ZSBoYXZlIGEgbGFyZ2UgbnVtYmVyIG9mIHJlcXVlc3QsIG5vZGVqcyB3aWxsIGhhbmcgdXAgc29tZSBzb2NrZXQgb24gYmFja2dyb3VuZC4gYW5kIHRoZSBudW1iZXIgd2lsbCB1cCBhbmQgdXAuXG4gICAgICAvLyBBbmQgdGhlbiB0aGVzZSBzb2NrZXQgd2hpY2ggYmUgaGFuZyB1cCB3aWxsIGRldm91cmluZyBDUFUgbGl0dGxlIGJ5IGxpdHRsZS5cbiAgICAgIC8vIENsaWVudFJlcXVlc3Quc2V0VGltZW91dCB3aWxsIGJlIGZpcmVkIG9uIHRoZSBzcGVjaWZ5IG1pbGxpc2Vjb25kcywgYW5kIGNhbiBtYWtlIHN1cmUgdGhhdCBhYm9ydCgpIHdpbGwgYmUgZmlyZWQgYWZ0ZXIgY29ubmVjdC5cbiAgICAgIHJlcS5zZXRUaW1lb3V0KHRpbWVvdXQsIGZ1bmN0aW9uIGhhbmRsZVJlcXVlc3RUaW1lb3V0KCkge1xuICAgICAgICBpZiAoaXNEb25lKSByZXR1cm47XG4gICAgICAgIGxldCB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXQgPyAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnIDogJ3RpbWVvdXQgZXhjZWVkZWQnO1xuICAgICAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsIHx8IHRyYW5zaXRpb25hbERlZmF1bHRzO1xuICAgICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UsXG4gICAgICAgICAgdHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyBBeGlvc0Vycm9yLkVUSU1FRE9VVCA6IEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICByZXFcbiAgICAgICAgKSk7XG4gICAgICAgIGFib3J0KCk7XG4gICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICBpZiAodXRpbHMuaXNTdHJlYW0oZGF0YSkpIHtcbiAgICAgIGxldCBlbmRlZCA9IGZhbHNlO1xuICAgICAgbGV0IGVycm9yZWQgPSBmYWxzZTtcblxuICAgICAgZGF0YS5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICBlbmRlZCA9IHRydWU7XG4gICAgICB9KTtcblxuICAgICAgZGF0YS5vbmNlKCdlcnJvcicsIGVyciA9PiB7XG4gICAgICAgIGVycm9yZWQgPSB0cnVlO1xuICAgICAgICByZXEuZGVzdHJveShlcnIpO1xuICAgICAgfSk7XG5cbiAgICAgIGRhdGEub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICBpZiAoIWVuZGVkICYmICFlcnJvcmVkKSB7XG4gICAgICAgICAgYWJvcnQobmV3IENhbmNlbGVkRXJyb3IoJ1JlcXVlc3Qgc3RyZWFtIGhhcyBiZWVuIGFib3J0ZWQnLCBjb25maWcsIHJlcSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgZGF0YS5waXBlKHJlcSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcS5lbmQoZGF0YSk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGNvbnN0IF9fc2V0UHJveHkgPSBzZXRQcm94eTtcbiIsICJleHBvcnQgY29uc3QgVkVSU0lPTiA9IFwiMS43LjJcIjsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZVByb3RvY29sKHVybCkge1xuICBjb25zdCBtYXRjaCA9IC9eKFstK1xcd117MSwyNX0pKDo/XFwvXFwvfDopLy5leGVjKHVybCk7XG4gIHJldHVybiBtYXRjaCAmJiBtYXRjaFsxXSB8fCAnJztcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgcGFyc2VQcm90b2NvbCBmcm9tICcuL3BhcnNlUHJvdG9jb2wuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuY29uc3QgREFUQV9VUkxfUEFUVEVSTiA9IC9eKD86KFteO10rKTspPyg/OlteO10rOyk/KGJhc2U2NHwpLChbXFxzXFxTXSopJC87XG5cbi8qKlxuICogUGFyc2UgZGF0YSB1cmkgdG8gYSBCdWZmZXIgb3IgQmxvYlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmlcbiAqIEBwYXJhbSB7P0Jvb2xlYW59IGFzQmxvYlxuICogQHBhcmFtIHs/T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0gez9GdW5jdGlvbn0gb3B0aW9ucy5CbG9iXG4gKlxuICogQHJldHVybnMge0J1ZmZlcnxCbG9ifVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmcm9tRGF0YVVSSSh1cmksIGFzQmxvYiwgb3B0aW9ucykge1xuICBjb25zdCBfQmxvYiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5CbG9iIHx8IHBsYXRmb3JtLmNsYXNzZXMuQmxvYjtcbiAgY29uc3QgcHJvdG9jb2wgPSBwYXJzZVByb3RvY29sKHVyaSk7XG5cbiAgaWYgKGFzQmxvYiA9PT0gdW5kZWZpbmVkICYmIF9CbG9iKSB7XG4gICAgYXNCbG9iID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChwcm90b2NvbCA9PT0gJ2RhdGEnKSB7XG4gICAgdXJpID0gcHJvdG9jb2wubGVuZ3RoID8gdXJpLnNsaWNlKHByb3RvY29sLmxlbmd0aCArIDEpIDogdXJpO1xuXG4gICAgY29uc3QgbWF0Y2ggPSBEQVRBX1VSTF9QQVRURVJOLmV4ZWModXJpKTtcblxuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdJbnZhbGlkIFVSTCcsIEF4aW9zRXJyb3IuRVJSX0lOVkFMSURfVVJMKTtcbiAgICB9XG5cbiAgICBjb25zdCBtaW1lID0gbWF0Y2hbMV07XG4gICAgY29uc3QgaXNCYXNlNjQgPSBtYXRjaFsyXTtcbiAgICBjb25zdCBib2R5ID0gbWF0Y2hbM107XG4gICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmZyb20oZGVjb2RlVVJJQ29tcG9uZW50KGJvZHkpLCBpc0Jhc2U2NCA/ICdiYXNlNjQnIDogJ3V0ZjgnKTtcblxuICAgIGlmIChhc0Jsb2IpIHtcbiAgICAgIGlmICghX0Jsb2IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ0Jsb2IgaXMgbm90IHN1cHBvcnRlZCcsIEF4aW9zRXJyb3IuRVJSX05PVF9TVVBQT1JUKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBfQmxvYihbYnVmZmVyXSwge3R5cGU6IG1pbWV9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmZmVyO1xuICB9XG5cbiAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ1Vuc3VwcG9ydGVkIHByb3RvY29sICcgKyBwcm90b2NvbCwgQXhpb3NFcnJvci5FUlJfTk9UX1NVUFBPUlQpO1xufVxuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHN0cmVhbSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCB0aHJvdHRsZSBmcm9tICcuL3Rocm90dGxlLmpzJztcbmltcG9ydCBzcGVlZG9tZXRlciBmcm9tICcuL3NwZWVkb21ldGVyLmpzJztcblxuY29uc3Qga0ludGVybmFscyA9IFN5bWJvbCgnaW50ZXJuYWxzJyk7XG5cbmNsYXNzIEF4aW9zVHJhbnNmb3JtU3RyZWFtIGV4dGVuZHMgc3RyZWFtLlRyYW5zZm9ybXtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB1dGlscy50b0ZsYXRPYmplY3Qob3B0aW9ucywge1xuICAgICAgbWF4UmF0ZTogMCxcbiAgICAgIGNodW5rU2l6ZTogNjQgKiAxMDI0LFxuICAgICAgbWluQ2h1bmtTaXplOiAxMDAsXG4gICAgICB0aW1lV2luZG93OiA1MDAsXG4gICAgICB0aWNrc1JhdGU6IDIsXG4gICAgICBzYW1wbGVzQ291bnQ6IDE1XG4gICAgfSwgbnVsbCwgKHByb3AsIHNvdXJjZSkgPT4ge1xuICAgICAgcmV0dXJuICF1dGlscy5pc1VuZGVmaW5lZChzb3VyY2VbcHJvcF0pO1xuICAgIH0pO1xuXG4gICAgc3VwZXIoe1xuICAgICAgcmVhZGFibGVIaWdoV2F0ZXJNYXJrOiBvcHRpb25zLmNodW5rU2l6ZVxuICAgIH0pO1xuXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBjb25zdCBpbnRlcm5hbHMgPSB0aGlzW2tJbnRlcm5hbHNdID0ge1xuICAgICAgbGVuZ3RoOiBvcHRpb25zLmxlbmd0aCxcbiAgICAgIHRpbWVXaW5kb3c6IG9wdGlvbnMudGltZVdpbmRvdyxcbiAgICAgIHRpY2tzUmF0ZTogb3B0aW9ucy50aWNrc1JhdGUsXG4gICAgICBjaHVua1NpemU6IG9wdGlvbnMuY2h1bmtTaXplLFxuICAgICAgbWF4UmF0ZTogb3B0aW9ucy5tYXhSYXRlLFxuICAgICAgbWluQ2h1bmtTaXplOiBvcHRpb25zLm1pbkNodW5rU2l6ZSxcbiAgICAgIGJ5dGVzU2VlbjogMCxcbiAgICAgIGlzQ2FwdHVyZWQ6IGZhbHNlLFxuICAgICAgbm90aWZpZWRCeXRlc0xvYWRlZDogMCxcbiAgICAgIHRzOiBEYXRlLm5vdygpLFxuICAgICAgYnl0ZXM6IDAsXG4gICAgICBvblJlYWRDYWxsYmFjazogbnVsbFxuICAgIH07XG5cbiAgICBjb25zdCBfc3BlZWRvbWV0ZXIgPSBzcGVlZG9tZXRlcihpbnRlcm5hbHMudGlja3NSYXRlICogb3B0aW9ucy5zYW1wbGVzQ291bnQsIGludGVybmFscy50aW1lV2luZG93KTtcblxuICAgIHRoaXMub24oJ25ld0xpc3RlbmVyJywgZXZlbnQgPT4ge1xuICAgICAgaWYgKGV2ZW50ID09PSAncHJvZ3Jlc3MnKSB7XG4gICAgICAgIGlmICghaW50ZXJuYWxzLmlzQ2FwdHVyZWQpIHtcbiAgICAgICAgICBpbnRlcm5hbHMuaXNDYXB0dXJlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGxldCBieXRlc05vdGlmaWVkID0gMDtcblxuICAgIGludGVybmFscy51cGRhdGVQcm9ncmVzcyA9IHRocm90dGxlKGZ1bmN0aW9uIHRocm90dGxlZEhhbmRsZXIoKSB7XG4gICAgICBjb25zdCB0b3RhbEJ5dGVzID0gaW50ZXJuYWxzLmxlbmd0aDtcbiAgICAgIGNvbnN0IGJ5dGVzVHJhbnNmZXJyZWQgPSBpbnRlcm5hbHMuYnl0ZXNTZWVuO1xuICAgICAgY29uc3QgcHJvZ3Jlc3NCeXRlcyA9IGJ5dGVzVHJhbnNmZXJyZWQgLSBieXRlc05vdGlmaWVkO1xuICAgICAgaWYgKCFwcm9ncmVzc0J5dGVzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm47XG5cbiAgICAgIGNvbnN0IHJhdGUgPSBfc3BlZWRvbWV0ZXIocHJvZ3Jlc3NCeXRlcyk7XG5cbiAgICAgIGJ5dGVzTm90aWZpZWQgPSBieXRlc1RyYW5zZmVycmVkO1xuXG4gICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgc2VsZi5lbWl0KCdwcm9ncmVzcycsIHtcbiAgICAgICAgICBsb2FkZWQ6IGJ5dGVzVHJhbnNmZXJyZWQsXG4gICAgICAgICAgdG90YWw6IHRvdGFsQnl0ZXMsXG4gICAgICAgICAgcHJvZ3Jlc3M6IHRvdGFsQnl0ZXMgPyAoYnl0ZXNUcmFuc2ZlcnJlZCAvIHRvdGFsQnl0ZXMpIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGJ5dGVzOiBwcm9ncmVzc0J5dGVzLFxuICAgICAgICAgIHJhdGU6IHJhdGUgPyByYXRlIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGVzdGltYXRlZDogcmF0ZSAmJiB0b3RhbEJ5dGVzICYmIGJ5dGVzVHJhbnNmZXJyZWQgPD0gdG90YWxCeXRlcyA/XG4gICAgICAgICAgICAodG90YWxCeXRlcyAtIGJ5dGVzVHJhbnNmZXJyZWQpIC8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBsZW5ndGhDb21wdXRhYmxlOiB0b3RhbEJ5dGVzICE9IG51bGxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LCBpbnRlcm5hbHMudGlja3NSYXRlKTtcblxuICAgIGNvbnN0IG9uRmluaXNoID0gKCkgPT4ge1xuICAgICAgaW50ZXJuYWxzLnVwZGF0ZVByb2dyZXNzLmNhbGwodHJ1ZSk7XG4gICAgfTtcblxuICAgIHRoaXMub25jZSgnZW5kJywgb25GaW5pc2gpO1xuICAgIHRoaXMub25jZSgnZXJyb3InLCBvbkZpbmlzaCk7XG4gIH1cblxuICBfcmVhZChzaXplKSB7XG4gICAgY29uc3QgaW50ZXJuYWxzID0gdGhpc1trSW50ZXJuYWxzXTtcblxuICAgIGlmIChpbnRlcm5hbHMub25SZWFkQ2FsbGJhY2spIHtcbiAgICAgIGludGVybmFscy5vblJlYWRDYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJldHVybiBzdXBlci5fcmVhZChzaXplKTtcbiAgfVxuXG4gIF90cmFuc2Zvcm0oY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGludGVybmFscyA9IHRoaXNba0ludGVybmFsc107XG4gICAgY29uc3QgbWF4UmF0ZSA9IGludGVybmFscy5tYXhSYXRlO1xuXG4gICAgY29uc3QgcmVhZGFibGVIaWdoV2F0ZXJNYXJrID0gdGhpcy5yZWFkYWJsZUhpZ2hXYXRlck1hcms7XG5cbiAgICBjb25zdCB0aW1lV2luZG93ID0gaW50ZXJuYWxzLnRpbWVXaW5kb3c7XG5cbiAgICBjb25zdCBkaXZpZGVyID0gMTAwMCAvIHRpbWVXaW5kb3c7XG4gICAgY29uc3QgYnl0ZXNUaHJlc2hvbGQgPSAobWF4UmF0ZSAvIGRpdmlkZXIpO1xuICAgIGNvbnN0IG1pbkNodW5rU2l6ZSA9IGludGVybmFscy5taW5DaHVua1NpemUgIT09IGZhbHNlID8gTWF0aC5tYXgoaW50ZXJuYWxzLm1pbkNodW5rU2l6ZSwgYnl0ZXNUaHJlc2hvbGQgKiAwLjAxKSA6IDA7XG5cbiAgICBmdW5jdGlvbiBwdXNoQ2h1bmsoX2NodW5rLCBfY2FsbGJhY2spIHtcbiAgICAgIGNvbnN0IGJ5dGVzID0gQnVmZmVyLmJ5dGVMZW5ndGgoX2NodW5rKTtcbiAgICAgIGludGVybmFscy5ieXRlc1NlZW4gKz0gYnl0ZXM7XG4gICAgICBpbnRlcm5hbHMuYnl0ZXMgKz0gYnl0ZXM7XG5cbiAgICAgIGlmIChpbnRlcm5hbHMuaXNDYXB0dXJlZCkge1xuICAgICAgICBpbnRlcm5hbHMudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGYucHVzaChfY2h1bmspKSB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soX2NhbGxiYWNrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludGVybmFscy5vblJlYWRDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgICBpbnRlcm5hbHMub25SZWFkQ2FsbGJhY2sgPSBudWxsO1xuICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soX2NhbGxiYWNrKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB0cmFuc2Zvcm1DaHVuayA9IChfY2h1bmssIF9jYWxsYmFjaykgPT4ge1xuICAgICAgY29uc3QgY2h1bmtTaXplID0gQnVmZmVyLmJ5dGVMZW5ndGgoX2NodW5rKTtcbiAgICAgIGxldCBjaHVua1JlbWFpbmRlciA9IG51bGw7XG4gICAgICBsZXQgbWF4Q2h1bmtTaXplID0gcmVhZGFibGVIaWdoV2F0ZXJNYXJrO1xuICAgICAgbGV0IGJ5dGVzTGVmdDtcbiAgICAgIGxldCBwYXNzZWQgPSAwO1xuXG4gICAgICBpZiAobWF4UmF0ZSkge1xuICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXG4gICAgICAgIGlmICghaW50ZXJuYWxzLnRzIHx8IChwYXNzZWQgPSAobm93IC0gaW50ZXJuYWxzLnRzKSkgPj0gdGltZVdpbmRvdykge1xuICAgICAgICAgIGludGVybmFscy50cyA9IG5vdztcbiAgICAgICAgICBieXRlc0xlZnQgPSBieXRlc1RocmVzaG9sZCAtIGludGVybmFscy5ieXRlcztcbiAgICAgICAgICBpbnRlcm5hbHMuYnl0ZXMgPSBieXRlc0xlZnQgPCAwID8gLWJ5dGVzTGVmdCA6IDA7XG4gICAgICAgICAgcGFzc2VkID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGJ5dGVzTGVmdCA9IGJ5dGVzVGhyZXNob2xkIC0gaW50ZXJuYWxzLmJ5dGVzO1xuICAgICAgfVxuXG4gICAgICBpZiAobWF4UmF0ZSkge1xuICAgICAgICBpZiAoYnl0ZXNMZWZ0IDw9IDApIHtcbiAgICAgICAgICAvLyBuZXh0IHRpbWUgd2luZG93XG4gICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgX2NhbGxiYWNrKG51bGwsIF9jaHVuayk7XG4gICAgICAgICAgfSwgdGltZVdpbmRvdyAtIHBhc3NlZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYnl0ZXNMZWZ0IDwgbWF4Q2h1bmtTaXplKSB7XG4gICAgICAgICAgbWF4Q2h1bmtTaXplID0gYnl0ZXNMZWZ0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXhDaHVua1NpemUgJiYgY2h1bmtTaXplID4gbWF4Q2h1bmtTaXplICYmIChjaHVua1NpemUgLSBtYXhDaHVua1NpemUpID4gbWluQ2h1bmtTaXplKSB7XG4gICAgICAgIGNodW5rUmVtYWluZGVyID0gX2NodW5rLnN1YmFycmF5KG1heENodW5rU2l6ZSk7XG4gICAgICAgIF9jaHVuayA9IF9jaHVuay5zdWJhcnJheSgwLCBtYXhDaHVua1NpemUpO1xuICAgICAgfVxuXG4gICAgICBwdXNoQ2h1bmsoX2NodW5rLCBjaHVua1JlbWFpbmRlciA/ICgpID0+IHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhfY2FsbGJhY2ssIG51bGwsIGNodW5rUmVtYWluZGVyKTtcbiAgICAgIH0gOiBfY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICB0cmFuc2Zvcm1DaHVuayhjaHVuaywgZnVuY3Rpb24gdHJhbnNmb3JtTmV4dENodW5rKGVyciwgX2NodW5rKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2NodW5rKSB7XG4gICAgICAgIHRyYW5zZm9ybUNodW5rKF9jaHVuaywgdHJhbnNmb3JtTmV4dENodW5rKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc2V0TGVuZ3RoKGxlbmd0aCkge1xuICAgIHRoaXNba0ludGVybmFsc10ubGVuZ3RoID0gK2xlbmd0aDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBeGlvc1RyYW5zZm9ybVN0cmVhbTtcbiIsICIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVGhyb3R0bGUgZGVjb3JhdG9yXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtOdW1iZXJ9IGZyZXFcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiB0aHJvdHRsZShmbiwgZnJlcSkge1xuICBsZXQgdGltZXN0YW1wID0gMDtcbiAgY29uc3QgdGhyZXNob2xkID0gMTAwMCAvIGZyZXE7XG4gIGxldCB0aW1lciA9IG51bGw7XG4gIHJldHVybiBmdW5jdGlvbiB0aHJvdHRsZWQoKSB7XG4gICAgY29uc3QgZm9yY2UgPSB0aGlzID09PSB0cnVlO1xuXG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBpZiAoZm9yY2UgfHwgbm93IC0gdGltZXN0YW1wID4gdGhyZXNob2xkKSB7XG4gICAgICBpZiAodGltZXIpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgfVxuICAgICAgdGltZXN0YW1wID0gbm93O1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIGlmICghdGltZXIpIHtcbiAgICAgIHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICB9LCB0aHJlc2hvbGQgLSAobm93IC0gdGltZXN0YW1wKSk7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCB0aHJvdHRsZTtcbiIsICIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2FsY3VsYXRlIGRhdGEgbWF4UmF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtzYW1wbGVzQ291bnQ9IDEwXVxuICogQHBhcmFtIHtOdW1iZXJ9IFttaW49IDEwMDBdXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHNwZWVkb21ldGVyKHNhbXBsZXNDb3VudCwgbWluKSB7XG4gIHNhbXBsZXNDb3VudCA9IHNhbXBsZXNDb3VudCB8fCAxMDtcbiAgY29uc3QgYnl0ZXMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgY29uc3QgdGltZXN0YW1wcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBsZXQgaGVhZCA9IDA7XG4gIGxldCB0YWlsID0gMDtcbiAgbGV0IGZpcnN0U2FtcGxlVFM7XG5cbiAgbWluID0gbWluICE9PSB1bmRlZmluZWQgPyBtaW4gOiAxMDAwO1xuXG4gIHJldHVybiBmdW5jdGlvbiBwdXNoKGNodW5rTGVuZ3RoKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgIGNvbnN0IHN0YXJ0ZWRBdCA9IHRpbWVzdGFtcHNbdGFpbF07XG5cbiAgICBpZiAoIWZpcnN0U2FtcGxlVFMpIHtcbiAgICAgIGZpcnN0U2FtcGxlVFMgPSBub3c7XG4gICAgfVxuXG4gICAgYnl0ZXNbaGVhZF0gPSBjaHVua0xlbmd0aDtcbiAgICB0aW1lc3RhbXBzW2hlYWRdID0gbm93O1xuXG4gICAgbGV0IGkgPSB0YWlsO1xuICAgIGxldCBieXRlc0NvdW50ID0gMDtcblxuICAgIHdoaWxlIChpICE9PSBoZWFkKSB7XG4gICAgICBieXRlc0NvdW50ICs9IGJ5dGVzW2krK107XG4gICAgICBpID0gaSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBoZWFkID0gKGhlYWQgKyAxKSAlIHNhbXBsZXNDb3VudDtcblxuICAgIGlmIChoZWFkID09PSB0YWlsKSB7XG4gICAgICB0YWlsID0gKHRhaWwgKyAxKSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBpZiAobm93IC0gZmlyc3RTYW1wbGVUUyA8IG1pbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBhc3NlZCA9IHN0YXJ0ZWRBdCAmJiBub3cgLSBzdGFydGVkQXQ7XG5cbiAgICByZXR1cm4gcGFzc2VkID8gTWF0aC5yb3VuZChieXRlc0NvdW50ICogMTAwMCAvIHBhc3NlZCkgOiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNwZWVkb21ldGVyO1xuIiwgImltcG9ydCB7VGV4dEVuY29kZXJ9IGZyb20gJ3V0aWwnO1xuaW1wb3J0IHtSZWFkYWJsZX0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmltcG9ydCByZWFkQmxvYiBmcm9tIFwiLi9yZWFkQmxvYi5qc1wiO1xuXG5jb25zdCBCT1VOREFSWV9BTFBIQUJFVCA9IHV0aWxzLkFMUEhBQkVULkFMUEhBX0RJR0lUICsgJy1fJztcblxuY29uc3QgdGV4dEVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcblxuY29uc3QgQ1JMRiA9ICdcXHJcXG4nO1xuY29uc3QgQ1JMRl9CWVRFUyA9IHRleHRFbmNvZGVyLmVuY29kZShDUkxGKTtcbmNvbnN0IENSTEZfQllURVNfQ09VTlQgPSAyO1xuXG5jbGFzcyBGb3JtRGF0YVBhcnQge1xuICBjb25zdHJ1Y3RvcihuYW1lLCB2YWx1ZSkge1xuICAgIGNvbnN0IHtlc2NhcGVOYW1lfSA9IHRoaXMuY29uc3RydWN0b3I7XG4gICAgY29uc3QgaXNTdHJpbmdWYWx1ZSA9IHV0aWxzLmlzU3RyaW5nKHZhbHVlKTtcblxuICAgIGxldCBoZWFkZXJzID0gYENvbnRlbnQtRGlzcG9zaXRpb246IGZvcm0tZGF0YTsgbmFtZT1cIiR7ZXNjYXBlTmFtZShuYW1lKX1cIiR7XG4gICAgICAhaXNTdHJpbmdWYWx1ZSAmJiB2YWx1ZS5uYW1lID8gYDsgZmlsZW5hbWU9XCIke2VzY2FwZU5hbWUodmFsdWUubmFtZSl9XCJgIDogJydcbiAgICB9JHtDUkxGfWA7XG5cbiAgICBpZiAoaXNTdHJpbmdWYWx1ZSkge1xuICAgICAgdmFsdWUgPSB0ZXh0RW5jb2Rlci5lbmNvZGUoU3RyaW5nKHZhbHVlKS5yZXBsYWNlKC9cXHI/XFxufFxcclxcbj8vZywgQ1JMRikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkZXJzICs9IGBDb250ZW50LVR5cGU6ICR7dmFsdWUudHlwZSB8fCBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwifSR7Q1JMRn1gXG4gICAgfVxuXG4gICAgdGhpcy5oZWFkZXJzID0gdGV4dEVuY29kZXIuZW5jb2RlKGhlYWRlcnMgKyBDUkxGKTtcblxuICAgIHRoaXMuY29udGVudExlbmd0aCA9IGlzU3RyaW5nVmFsdWUgPyB2YWx1ZS5ieXRlTGVuZ3RoIDogdmFsdWUuc2l6ZTtcblxuICAgIHRoaXMuc2l6ZSA9IHRoaXMuaGVhZGVycy5ieXRlTGVuZ3RoICsgdGhpcy5jb250ZW50TGVuZ3RoICsgQ1JMRl9CWVRFU19DT1VOVDtcblxuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgYXN5bmMgKmVuY29kZSgpe1xuICAgIHlpZWxkIHRoaXMuaGVhZGVycztcblxuICAgIGNvbnN0IHt2YWx1ZX0gPSB0aGlzO1xuXG4gICAgaWYodXRpbHMuaXNUeXBlZEFycmF5KHZhbHVlKSkge1xuICAgICAgeWllbGQgdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHlpZWxkKiByZWFkQmxvYih2YWx1ZSk7XG4gICAgfVxuXG4gICAgeWllbGQgQ1JMRl9CWVRFUztcbiAgfVxuXG4gIHN0YXRpYyBlc2NhcGVOYW1lKG5hbWUpIHtcbiAgICAgIHJldHVybiBTdHJpbmcobmFtZSkucmVwbGFjZSgvW1xcclxcblwiXS9nLCAobWF0Y2gpID0+ICh7XG4gICAgICAgICdcXHInIDogJyUwRCcsXG4gICAgICAgICdcXG4nIDogJyUwQScsXG4gICAgICAgICdcIicgOiAnJTIyJyxcbiAgICAgIH1bbWF0Y2hdKSk7XG4gIH1cbn1cblxuY29uc3QgZm9ybURhdGFUb1N0cmVhbSA9IChmb3JtLCBoZWFkZXJzSGFuZGxlciwgb3B0aW9ucykgPT4ge1xuICBjb25zdCB7XG4gICAgdGFnID0gJ2Zvcm0tZGF0YS1ib3VuZGFyeScsXG4gICAgc2l6ZSA9IDI1LFxuICAgIGJvdW5kYXJ5ID0gdGFnICsgJy0nICsgdXRpbHMuZ2VuZXJhdGVTdHJpbmcoc2l6ZSwgQk9VTkRBUllfQUxQSEFCRVQpXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuXG4gIGlmKCF1dGlscy5pc0Zvcm1EYXRhKGZvcm0pKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdGb3JtRGF0YSBpbnN0YW5jZSByZXF1aXJlZCcpO1xuICB9XG5cbiAgaWYgKGJvdW5kYXJ5Lmxlbmd0aCA8IDEgfHwgYm91bmRhcnkubGVuZ3RoID4gNzApIHtcbiAgICB0aHJvdyBFcnJvcignYm91bmRhcnkgbXVzdCBiZSAxMC03MCBjaGFyYWN0ZXJzIGxvbmcnKVxuICB9XG5cbiAgY29uc3QgYm91bmRhcnlCeXRlcyA9IHRleHRFbmNvZGVyLmVuY29kZSgnLS0nICsgYm91bmRhcnkgKyBDUkxGKTtcbiAgY29uc3QgZm9vdGVyQnl0ZXMgPSB0ZXh0RW5jb2Rlci5lbmNvZGUoJy0tJyArIGJvdW5kYXJ5ICsgJy0tJyArIENSTEYgKyBDUkxGKTtcbiAgbGV0IGNvbnRlbnRMZW5ndGggPSBmb290ZXJCeXRlcy5ieXRlTGVuZ3RoO1xuXG4gIGNvbnN0IHBhcnRzID0gQXJyYXkuZnJvbShmb3JtLmVudHJpZXMoKSkubWFwKChbbmFtZSwgdmFsdWVdKSA9PiB7XG4gICAgY29uc3QgcGFydCA9IG5ldyBGb3JtRGF0YVBhcnQobmFtZSwgdmFsdWUpO1xuICAgIGNvbnRlbnRMZW5ndGggKz0gcGFydC5zaXplO1xuICAgIHJldHVybiBwYXJ0O1xuICB9KTtcblxuICBjb250ZW50TGVuZ3RoICs9IGJvdW5kYXJ5Qnl0ZXMuYnl0ZUxlbmd0aCAqIHBhcnRzLmxlbmd0aDtcblxuICBjb250ZW50TGVuZ3RoID0gdXRpbHMudG9GaW5pdGVOdW1iZXIoY29udGVudExlbmd0aCk7XG5cbiAgY29uc3QgY29tcHV0ZWRIZWFkZXJzID0ge1xuICAgICdDb250ZW50LVR5cGUnOiBgbXVsdGlwYXJ0L2Zvcm0tZGF0YTsgYm91bmRhcnk9JHtib3VuZGFyeX1gXG4gIH1cblxuICBpZiAoTnVtYmVyLmlzRmluaXRlKGNvbnRlbnRMZW5ndGgpKSB7XG4gICAgY29tcHV0ZWRIZWFkZXJzWydDb250ZW50LUxlbmd0aCddID0gY29udGVudExlbmd0aDtcbiAgfVxuXG4gIGhlYWRlcnNIYW5kbGVyICYmIGhlYWRlcnNIYW5kbGVyKGNvbXB1dGVkSGVhZGVycyk7XG5cbiAgcmV0dXJuIFJlYWRhYmxlLmZyb20oKGFzeW5jIGZ1bmN0aW9uICooKSB7XG4gICAgZm9yKGNvbnN0IHBhcnQgb2YgcGFydHMpIHtcbiAgICAgIHlpZWxkIGJvdW5kYXJ5Qnl0ZXM7XG4gICAgICB5aWVsZCogcGFydC5lbmNvZGUoKTtcbiAgICB9XG5cbiAgICB5aWVsZCBmb290ZXJCeXRlcztcbiAgfSkoKSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtRGF0YVRvU3RyZWFtO1xuIiwgImNvbnN0IHthc3luY0l0ZXJhdG9yfSA9IFN5bWJvbDtcblxuY29uc3QgcmVhZEJsb2IgPSBhc3luYyBmdW5jdGlvbiogKGJsb2IpIHtcbiAgaWYgKGJsb2Iuc3RyZWFtKSB7XG4gICAgeWllbGQqIGJsb2Iuc3RyZWFtKClcbiAgfSBlbHNlIGlmIChibG9iLmFycmF5QnVmZmVyKSB7XG4gICAgeWllbGQgYXdhaXQgYmxvYi5hcnJheUJ1ZmZlcigpXG4gIH0gZWxzZSBpZiAoYmxvYlthc3luY0l0ZXJhdG9yXSkge1xuICAgIHlpZWxkKiBibG9iW2FzeW5jSXRlcmF0b3JdKCk7XG4gIH0gZWxzZSB7XG4gICAgeWllbGQgYmxvYjtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCByZWFkQmxvYjtcbiIsICJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHN0cmVhbSBmcm9tIFwic3RyZWFtXCI7XG5cbmNsYXNzIFpsaWJIZWFkZXJUcmFuc2Zvcm1TdHJlYW0gZXh0ZW5kcyBzdHJlYW0uVHJhbnNmb3JtIHtcbiAgX190cmFuc2Zvcm0oY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAgIHRoaXMucHVzaChjaHVuayk7XG4gICAgY2FsbGJhY2soKTtcbiAgfVxuXG4gIF90cmFuc2Zvcm0oY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAgIGlmIChjaHVuay5sZW5ndGggIT09IDApIHtcbiAgICAgIHRoaXMuX3RyYW5zZm9ybSA9IHRoaXMuX190cmFuc2Zvcm07XG5cbiAgICAgIC8vIEFkZCBEZWZhdWx0IENvbXByZXNzaW9uIGhlYWRlcnMgaWYgbm8gemxpYiBoZWFkZXJzIGFyZSBwcmVzZW50XG4gICAgICBpZiAoY2h1bmtbMF0gIT09IDEyMCkgeyAvLyBIZXg6IDc4XG4gICAgICAgIGNvbnN0IGhlYWRlciA9IEJ1ZmZlci5hbGxvYygyKTtcbiAgICAgICAgaGVhZGVyWzBdID0gMTIwOyAvLyBIZXg6IDc4XG4gICAgICAgIGhlYWRlclsxXSA9IDE1NjsgLy8gSGV4OiA5QyBcbiAgICAgICAgdGhpcy5wdXNoKGhlYWRlciwgZW5jb2RpbmcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX190cmFuc2Zvcm0oY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjayk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgWmxpYkhlYWRlclRyYW5zZm9ybVN0cmVhbTtcbiIsICJpbXBvcnQgdXRpbHMgZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5cbmNvbnN0IGNhbGxiYWNraWZ5ID0gKGZuLCByZWR1Y2VyKSA9PiB7XG4gIHJldHVybiB1dGlscy5pc0FzeW5jRm4oZm4pID8gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBjYiA9IGFyZ3MucG9wKCk7XG4gICAgZm4uYXBwbHkodGhpcywgYXJncykudGhlbigodmFsdWUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlZHVjZXIgPyBjYihudWxsLCAuLi5yZWR1Y2VyKHZhbHVlKSkgOiBjYihudWxsLCB2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY2IoZXJyKTtcbiAgICAgIH1cbiAgICB9LCBjYik7XG4gIH0gOiBmbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2FsbGJhY2tpZnk7XG4iLCAiaW1wb3J0IHNwZWVkb21ldGVyIGZyb20gXCIuL3NwZWVkb21ldGVyLmpzXCI7XG5pbXBvcnQgdGhyb3R0bGUgZnJvbSBcIi4vdGhyb3R0bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGxpc3RlbmVyLCBpc0Rvd25sb2FkU3RyZWFtLCBmcmVxID0gMykgPT4ge1xuICBsZXQgYnl0ZXNOb3RpZmllZCA9IDA7XG4gIGNvbnN0IF9zcGVlZG9tZXRlciA9IHNwZWVkb21ldGVyKDUwLCAyNTApO1xuXG4gIHJldHVybiB0aHJvdHRsZShlID0+IHtcbiAgICBjb25zdCBsb2FkZWQgPSBlLmxvYWRlZDtcbiAgICBjb25zdCB0b3RhbCA9IGUubGVuZ3RoQ29tcHV0YWJsZSA/IGUudG90YWwgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgcHJvZ3Jlc3NCeXRlcyA9IGxvYWRlZCAtIGJ5dGVzTm90aWZpZWQ7XG4gICAgY29uc3QgcmF0ZSA9IF9zcGVlZG9tZXRlcihwcm9ncmVzc0J5dGVzKTtcbiAgICBjb25zdCBpblJhbmdlID0gbG9hZGVkIDw9IHRvdGFsO1xuXG4gICAgYnl0ZXNOb3RpZmllZCA9IGxvYWRlZDtcblxuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICBsb2FkZWQsXG4gICAgICB0b3RhbCxcbiAgICAgIHByb2dyZXNzOiB0b3RhbCA/IChsb2FkZWQgLyB0b3RhbCkgOiB1bmRlZmluZWQsXG4gICAgICBieXRlczogcHJvZ3Jlc3NCeXRlcyxcbiAgICAgIHJhdGU6IHJhdGUgPyByYXRlIDogdW5kZWZpbmVkLFxuICAgICAgZXN0aW1hdGVkOiByYXRlICYmIHRvdGFsICYmIGluUmFuZ2UgPyAodG90YWwgLSBsb2FkZWQpIC8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGV2ZW50OiBlLFxuICAgICAgbGVuZ3RoQ29tcHV0YWJsZTogdG90YWwgIT0gbnVsbFxuICAgIH07XG5cbiAgICBkYXRhW2lzRG93bmxvYWRTdHJlYW0gPyAnZG93bmxvYWQnIDogJ3VwbG9hZCddID0gdHJ1ZTtcblxuICAgIGxpc3RlbmVyKGRhdGEpO1xuICB9LCBmcmVxKTtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbi8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgY29uc3QgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgY29uc3QgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgbGV0IG9yaWdpblVSTDtcblxuICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXRzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIGxldCBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICBjb25zdCBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpO1xuIiwgImltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIHtcbiAgICB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgIGNvbnN0IGNvb2tpZSA9IFtuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKV07XG5cbiAgICAgIHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpICYmIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcblxuICAgICAgdXRpbHMuaXNTdHJpbmcocGF0aCkgJiYgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuXG4gICAgICB1dGlscy5pc1N0cmluZyhkb21haW4pICYmIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG5cbiAgICAgIHNlY3VyZSA9PT0gdHJ1ZSAmJiBjb29raWUucHVzaCgnc2VjdXJlJyk7XG5cbiAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgIH0sXG5cbiAgICByZWFkKG5hbWUpIHtcbiAgICAgIGNvbnN0IG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgfSxcblxuICAgIHJlbW92ZShuYW1lKSB7XG4gICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgIH1cbiAgfVxuXG4gIDpcblxuICAvLyBOb24tc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIHtcbiAgICB3cml0ZSgpIHt9LFxuICAgIHJlYWQoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIHJlbW92ZSgpIHt9XG4gIH07XG5cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuL0F4aW9zSGVhZGVycy5qc1wiO1xuXG5jb25zdCBoZWFkZXJzVG9PYmplY3QgPSAodGhpbmcpID0+IHRoaW5nIGluc3RhbmNlb2YgQXhpb3NIZWFkZXJzID8geyAuLi50aGluZyB9IDogdGhpbmc7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIGNvbnN0IGNvbmZpZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlLCBjYXNlbGVzcykge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UuY2FsbCh7Y2FzZWxlc3N9LCB0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMoYSwgYiwgY2FzZWxlc3MpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYiwgY2FzZWxlc3MpO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGEpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhLCBjYXNlbGVzcyk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIoYSwgYikge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKGEsIGIpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChhKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGlyZWN0S2V5cyhhLCBiLCBwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGEsIGIpO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBtZXJnZU1hcCA9IHtcbiAgICB1cmw6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgbWV0aG9kOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIGRhdGE6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgYmFzZVVSTDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHBhcmFtc1NlcmlhbGl6ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdGltZW91dDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0TWVzc2FnZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB3aXRoQ3JlZGVudGlhbHM6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgd2l0aFhTUkZUb2tlbjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBhZGFwdGVyOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlVHlwZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmQ29va2llTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmSGVhZGVyTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBvblVwbG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uRG93bmxvYWRQcm9ncmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBkZWNvbXByZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG1heENvbnRlbnRMZW5ndGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Qm9keUxlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBiZWZvcmVSZWRpcmVjdDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc3BvcnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cEFnZW50OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGh0dHBzQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgY2FuY2VsVG9rZW46IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgc29ja2V0UGF0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICByZXNwb25zZUVuY29kaW5nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHZhbGlkYXRlU3RhdHVzOiBtZXJnZURpcmVjdEtleXMsXG4gICAgaGVhZGVyczogKGEsIGIpID0+IG1lcmdlRGVlcFByb3BlcnRpZXMoaGVhZGVyc1RvT2JqZWN0KGEpLCBoZWFkZXJzVG9PYmplY3QoYiksIHRydWUpXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBjb25maWcxLCBjb25maWcyKSksIGZ1bmN0aW9uIGNvbXB1dGVDb25maWdWYWx1ZShwcm9wKSB7XG4gICAgY29uc3QgbWVyZ2UgPSBtZXJnZU1hcFtwcm9wXSB8fCBtZXJnZURlZXBQcm9wZXJ0aWVzO1xuICAgIGNvbnN0IGNvbmZpZ1ZhbHVlID0gbWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSwgcHJvcCk7XG4gICAgKHV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufVxuIiwgImltcG9ydCBwbGF0Zm9ybSBmcm9tIFwiLi4vcGxhdGZvcm0vaW5kZXguanNcIjtcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmltcG9ydCBpc1VSTFNhbWVPcmlnaW4gZnJvbSBcIi4vaXNVUkxTYW1lT3JpZ2luLmpzXCI7XG5pbXBvcnQgY29va2llcyBmcm9tIFwiLi9jb29raWVzLmpzXCI7XG5pbXBvcnQgYnVpbGRGdWxsUGF0aCBmcm9tIFwiLi4vY29yZS9idWlsZEZ1bGxQYXRoLmpzXCI7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSBcIi4uL2NvcmUvbWVyZ2VDb25maWcuanNcIjtcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSBcIi4vYnVpbGRVUkwuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGNvbmZpZykgPT4ge1xuICBjb25zdCBuZXdDb25maWcgPSBtZXJnZUNvbmZpZyh7fSwgY29uZmlnKTtcblxuICBsZXQge2RhdGEsIHdpdGhYU1JGVG9rZW4sIHhzcmZIZWFkZXJOYW1lLCB4c3JmQ29va2llTmFtZSwgaGVhZGVycywgYXV0aH0gPSBuZXdDb25maWc7XG5cbiAgbmV3Q29uZmlnLmhlYWRlcnMgPSBoZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oaGVhZGVycyk7XG5cbiAgbmV3Q29uZmlnLnVybCA9IGJ1aWxkVVJMKGJ1aWxkRnVsbFBhdGgobmV3Q29uZmlnLmJhc2VVUkwsIG5ld0NvbmZpZy51cmwpLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcik7XG5cbiAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICBpZiAoYXV0aCkge1xuICAgIGhlYWRlcnMuc2V0KCdBdXRob3JpemF0aW9uJywgJ0Jhc2ljICcgK1xuICAgICAgYnRvYSgoYXV0aC51c2VybmFtZSB8fCAnJykgKyAnOicgKyAoYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChhdXRoLnBhc3N3b3JkKSkgOiAnJykpXG4gICAgKTtcbiAgfVxuXG4gIGxldCBjb250ZW50VHlwZTtcblxuICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSkge1xuICAgIGlmIChwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgfHwgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52KSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKHVuZGVmaW5lZCk7IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9IGVsc2UgaWYgKChjb250ZW50VHlwZSA9IGhlYWRlcnMuZ2V0Q29udGVudFR5cGUoKSkgIT09IGZhbHNlKSB7XG4gICAgICAvLyBmaXggc2VtaWNvbG9uIGR1cGxpY2F0aW9uIGlzc3VlIGZvciBSZWFjdE5hdGl2ZSBGb3JtRGF0YSBpbXBsZW1lbnRhdGlvblxuICAgICAgY29uc3QgW3R5cGUsIC4uLnRva2Vuc10gPSBjb250ZW50VHlwZSA/IGNvbnRlbnRUeXBlLnNwbGl0KCc7JykubWFwKHRva2VuID0+IHRva2VuLnRyaW0oKSkuZmlsdGVyKEJvb2xlYW4pIDogW107XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKFt0eXBlIHx8ICdtdWx0aXBhcnQvZm9ybS1kYXRhJywgLi4udG9rZW5zXS5qb2luKCc7ICcpKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG5cbiAgaWYgKHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudikge1xuICAgIHdpdGhYU1JGVG9rZW4gJiYgdXRpbHMuaXNGdW5jdGlvbih3aXRoWFNSRlRva2VuKSAmJiAod2l0aFhTUkZUb2tlbiA9IHdpdGhYU1JGVG9rZW4obmV3Q29uZmlnKSk7XG5cbiAgICBpZiAod2l0aFhTUkZUb2tlbiB8fCAod2l0aFhTUkZUb2tlbiAhPT0gZmFsc2UgJiYgaXNVUkxTYW1lT3JpZ2luKG5ld0NvbmZpZy51cmwpKSkge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICBjb25zdCB4c3JmVmFsdWUgPSB4c3JmSGVhZGVyTmFtZSAmJiB4c3JmQ29va2llTmFtZSAmJiBjb29raWVzLnJlYWQoeHNyZkNvb2tpZU5hbWUpO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIGhlYWRlcnMuc2V0KHhzcmZIZWFkZXJOYW1lLCB4c3JmVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdDb25maWc7XG59XG5cbiIsICJpbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgc2V0dGxlIGZyb20gJy4vLi4vY29yZS9zZXR0bGUuanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IHBhcnNlUHJvdG9jb2wgZnJvbSAnLi4vaGVscGVycy9wYXJzZVByb3RvY29sLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcbmltcG9ydCBwcm9ncmVzc0V2ZW50UmVkdWNlciBmcm9tICcuLi9oZWxwZXJzL3Byb2dyZXNzRXZlbnRSZWR1Y2VyLmpzJztcbmltcG9ydCByZXNvbHZlQ29uZmlnIGZyb20gXCIuLi9oZWxwZXJzL3Jlc29sdmVDb25maWcuanNcIjtcblxuY29uc3QgaXNYSFJBZGFwdGVyU3VwcG9ydGVkID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJztcblxuZXhwb3J0IGRlZmF1bHQgaXNYSFJBZGFwdGVyU3VwcG9ydGVkICYmIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBjb25zdCBfY29uZmlnID0gcmVzb2x2ZUNvbmZpZyhjb25maWcpO1xuICAgIGxldCByZXF1ZXN0RGF0YSA9IF9jb25maWcuZGF0YTtcbiAgICBjb25zdCByZXF1ZXN0SGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKF9jb25maWcuaGVhZGVycykubm9ybWFsaXplKCk7XG4gICAgbGV0IHtyZXNwb25zZVR5cGV9ID0gX2NvbmZpZztcbiAgICBsZXQgb25DYW5jZWxlZDtcbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgaWYgKF9jb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgX2NvbmZpZy5jYW5jZWxUb2tlbi51bnN1YnNjcmliZShvbkNhbmNlbGVkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9jb25maWcuc2lnbmFsKSB7XG4gICAgICAgIF9jb25maWcuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIHJlcXVlc3Qub3BlbihfY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBfY29uZmlnLnVybCwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IF9jb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgY29uc3QgcmVzcG9uc2VIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oXG4gICAgICAgICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgJiYgcmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgcmVzcG9uc2VUeXBlID09PSAnanNvbicgP1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUoZnVuY3Rpb24gX3Jlc29sdmUodmFsdWUpIHtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIGZ1bmN0aW9uIF9yZWplY3QoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICgnb25sb2FkZW5kJyBpbiByZXF1ZXN0KSB7XG4gICAgICAvLyBVc2Ugb25sb2FkZW5kIGlmIGF2YWlsYWJsZVxuICAgICAgcmVxdWVzdC5vbmxvYWRlbmQgPSBvbmxvYWRlbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGUgdG8gZW11bGF0ZSBvbmxvYWRlbmRcbiAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWFkeXN0YXRlIGhhbmRsZXIgaXMgY2FsbGluZyBiZWZvcmUgb25lcnJvciBvciBvbnRpbWVvdXQgaGFuZGxlcnMsXG4gICAgICAgIC8vIHNvIHdlIHNob3VsZCBjYWxsIG9ubG9hZGVuZCBvbiB0aGUgbmV4dCAndGljaydcbiAgICAgICAgc2V0VGltZW91dChvbmxvYWRlbmQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELCBfY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdOZXR3b3JrIEVycm9yJywgQXhpb3NFcnJvci5FUlJfTkVUV09SSywgX2NvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICBsZXQgdGltZW91dEVycm9yTWVzc2FnZSA9IF9jb25maWcudGltZW91dCA/ICd0aW1lb3V0IG9mICcgKyBfY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnIDogJ3RpbWVvdXQgZXhjZWVkZWQnO1xuICAgICAgY29uc3QgdHJhbnNpdGlvbmFsID0gX2NvbmZpZy50cmFuc2l0aW9uYWwgfHwgdHJhbnNpdGlvbmFsRGVmYXVsdHM7XG4gICAgICBpZiAoX2NvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBfY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UsXG4gICAgICAgIHRyYW5zaXRpb25hbC5jbGFyaWZ5VGltZW91dEVycm9yID8gQXhpb3NFcnJvci5FVElNRURPVVQgOiBBeGlvc0Vycm9yLkVDT05OQUJPUlRFRCxcbiAgICAgICAgX2NvbmZpZyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgIHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQgJiYgcmVxdWVzdEhlYWRlcnMuc2V0Q29udGVudFR5cGUobnVsbCk7XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycy50b0pTT04oKSwgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoX2NvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhX2NvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChyZXNwb25zZVR5cGUgJiYgcmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gX2NvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgX2NvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBwcm9ncmVzc0V2ZW50UmVkdWNlcihfY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcywgdHJ1ZSkpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBfY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgcHJvZ3Jlc3NFdmVudFJlZHVjZXIoX2NvbmZpZy5vblVwbG9hZFByb2dyZXNzKSk7XG4gICAgfVxuXG4gICAgaWYgKF9jb25maWcuY2FuY2VsVG9rZW4gfHwgX2NvbmZpZy5zaWduYWwpIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBvbkNhbmNlbGVkID0gY2FuY2VsID0+IHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdCghY2FuY2VsIHx8IGNhbmNlbC50eXBlID8gbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnLCByZXF1ZXN0KSA6IGNhbmNlbCk7XG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICBfY29uZmlnLmNhbmNlbFRva2VuICYmIF9jb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKF9jb25maWcuc2lnbmFsKSB7XG4gICAgICAgIF9jb25maWcuc2lnbmFsLmFib3J0ZWQgPyBvbkNhbmNlbGVkKCkgOiBfY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHByb3RvY29sID0gcGFyc2VQcm90b2NvbChfY29uZmlnLnVybCk7XG5cbiAgICBpZiAocHJvdG9jb2wgJiYgcGxhdGZvcm0ucHJvdG9jb2xzLmluZGV4T2YocHJvdG9jb2wpID09PSAtMSkge1xuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdVbnN1cHBvcnRlZCBwcm90b2NvbCAnICsgcHJvdG9jb2wgKyAnOicsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBjb25maWcpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwgImltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gXCIuLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qc1wiO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuXG5jb25zdCBjb21wb3NlU2lnbmFscyA9IChzaWduYWxzLCB0aW1lb3V0KSA9PiB7XG4gIGxldCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuXG4gIGxldCBhYm9ydGVkO1xuXG4gIGNvbnN0IG9uYWJvcnQgPSBmdW5jdGlvbiAoY2FuY2VsKSB7XG4gICAgaWYgKCFhYm9ydGVkKSB7XG4gICAgICBhYm9ydGVkID0gdHJ1ZTtcbiAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICBjb25zdCBlcnIgPSBjYW5jZWwgaW5zdGFuY2VvZiBFcnJvciA/IGNhbmNlbCA6IHRoaXMucmVhc29uO1xuICAgICAgY29udHJvbGxlci5hYm9ydChlcnIgaW5zdGFuY2VvZiBBeGlvc0Vycm9yID8gZXJyIDogbmV3IENhbmNlbGVkRXJyb3IoZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIubWVzc2FnZSA6IGVycikpO1xuICAgIH1cbiAgfVxuXG4gIGxldCB0aW1lciA9IHRpbWVvdXQgJiYgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgb25hYm9ydChuZXcgQXhpb3NFcnJvcihgdGltZW91dCAke3RpbWVvdXR9IG9mIG1zIGV4Y2VlZGVkYCwgQXhpb3NFcnJvci5FVElNRURPVVQpKVxuICB9LCB0aW1lb3V0KVxuXG4gIGNvbnN0IHVuc3Vic2NyaWJlID0gKCkgPT4ge1xuICAgIGlmIChzaWduYWxzKSB7XG4gICAgICB0aW1lciAmJiBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgc2lnbmFscy5mb3JFYWNoKHNpZ25hbCA9PiB7XG4gICAgICAgIHNpZ25hbCAmJlxuICAgICAgICAoc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbmFib3J0KSA6IHNpZ25hbC51bnN1YnNjcmliZShvbmFib3J0KSk7XG4gICAgICB9KTtcbiAgICAgIHNpZ25hbHMgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHNpZ25hbHMuZm9yRWFjaCgoc2lnbmFsKSA9PiBzaWduYWwgJiYgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25hYm9ydCkpO1xuXG4gIGNvbnN0IHtzaWduYWx9ID0gY29udHJvbGxlcjtcblxuICBzaWduYWwudW5zdWJzY3JpYmUgPSB1bnN1YnNjcmliZTtcblxuICByZXR1cm4gW3NpZ25hbCwgKCkgPT4ge1xuICAgIHRpbWVyICYmIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgdGltZXIgPSBudWxsO1xuICB9XTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29tcG9zZVNpZ25hbHM7XG4iLCAiXG5cbmV4cG9ydCBjb25zdCBzdHJlYW1DaHVuayA9IGZ1bmN0aW9uKiAoY2h1bmssIGNodW5rU2l6ZSkge1xuICBsZXQgbGVuID0gY2h1bmsuYnl0ZUxlbmd0aDtcblxuICBpZiAoIWNodW5rU2l6ZSB8fCBsZW4gPCBjaHVua1NpemUpIHtcbiAgICB5aWVsZCBjaHVuaztcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgcG9zID0gMDtcbiAgbGV0IGVuZDtcblxuICB3aGlsZSAocG9zIDwgbGVuKSB7XG4gICAgZW5kID0gcG9zICsgY2h1bmtTaXplO1xuICAgIHlpZWxkIGNodW5rLnNsaWNlKHBvcywgZW5kKTtcbiAgICBwb3MgPSBlbmQ7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHJlYWRCeXRlcyA9IGFzeW5jIGZ1bmN0aW9uKiAoaXRlcmFibGUsIGNodW5rU2l6ZSwgZW5jb2RlKSB7XG4gIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgaXRlcmFibGUpIHtcbiAgICB5aWVsZCogc3RyZWFtQ2h1bmsoQXJyYXlCdWZmZXIuaXNWaWV3KGNodW5rKSA/IGNodW5rIDogKGF3YWl0IGVuY29kZShTdHJpbmcoY2h1bmspKSksIGNodW5rU2l6ZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHRyYWNrU3RyZWFtID0gKHN0cmVhbSwgY2h1bmtTaXplLCBvblByb2dyZXNzLCBvbkZpbmlzaCwgZW5jb2RlKSA9PiB7XG4gIGNvbnN0IGl0ZXJhdG9yID0gcmVhZEJ5dGVzKHN0cmVhbSwgY2h1bmtTaXplLCBlbmNvZGUpO1xuXG4gIGxldCBieXRlcyA9IDA7XG5cbiAgcmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgdHlwZTogJ2J5dGVzJyxcblxuICAgIGFzeW5jIHB1bGwoY29udHJvbGxlcikge1xuICAgICAgY29uc3Qge2RvbmUsIHZhbHVlfSA9IGF3YWl0IGl0ZXJhdG9yLm5leHQoKTtcblxuICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICBvbkZpbmlzaCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBsZW4gPSB2YWx1ZS5ieXRlTGVuZ3RoO1xuICAgICAgb25Qcm9ncmVzcyAmJiBvblByb2dyZXNzKGJ5dGVzICs9IGxlbik7XG4gICAgICBjb250cm9sbGVyLmVucXVldWUobmV3IFVpbnQ4QXJyYXkodmFsdWUpKTtcbiAgICB9LFxuICAgIGNhbmNlbChyZWFzb24pIHtcbiAgICAgIG9uRmluaXNoKHJlYXNvbik7XG4gICAgICByZXR1cm4gaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgfVxuICB9LCB7XG4gICAgaGlnaFdhdGVyTWFyazogMlxuICB9KVxufVxuIiwgImltcG9ydCBwbGF0Zm9ybSBmcm9tIFwiLi4vcGxhdGZvcm0vaW5kZXguanNcIjtcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gXCIuLi9jb3JlL0F4aW9zRXJyb3IuanNcIjtcbmltcG9ydCBjb21wb3NlU2lnbmFscyBmcm9tIFwiLi4vaGVscGVycy9jb21wb3NlU2lnbmFscy5qc1wiO1xuaW1wb3J0IHt0cmFja1N0cmVhbX0gZnJvbSBcIi4uL2hlbHBlcnMvdHJhY2tTdHJlYW0uanNcIjtcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQgcHJvZ3Jlc3NFdmVudFJlZHVjZXIgZnJvbSBcIi4uL2hlbHBlcnMvcHJvZ3Jlc3NFdmVudFJlZHVjZXIuanNcIjtcbmltcG9ydCByZXNvbHZlQ29uZmlnIGZyb20gXCIuLi9oZWxwZXJzL3Jlc29sdmVDb25maWcuanNcIjtcbmltcG9ydCBzZXR0bGUgZnJvbSBcIi4uL2NvcmUvc2V0dGxlLmpzXCI7XG5cbmNvbnN0IGZldGNoUHJvZ3Jlc3NEZWNvcmF0b3IgPSAodG90YWwsIGZuKSA9PiB7XG4gIGNvbnN0IGxlbmd0aENvbXB1dGFibGUgPSB0b3RhbCAhPSBudWxsO1xuICByZXR1cm4gKGxvYWRlZCkgPT4gc2V0VGltZW91dCgoKSA9PiBmbih7XG4gICAgbGVuZ3RoQ29tcHV0YWJsZSxcbiAgICB0b3RhbCxcbiAgICBsb2FkZWRcbiAgfSkpO1xufVxuXG5jb25zdCBpc0ZldGNoU3VwcG9ydGVkID0gdHlwZW9mIGZldGNoID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBSZXF1ZXN0ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBSZXNwb25zZSA9PT0gJ2Z1bmN0aW9uJztcbmNvbnN0IGlzUmVhZGFibGVTdHJlYW1TdXBwb3J0ZWQgPSBpc0ZldGNoU3VwcG9ydGVkICYmIHR5cGVvZiBSZWFkYWJsZVN0cmVhbSA9PT0gJ2Z1bmN0aW9uJztcblxuLy8gdXNlZCBvbmx5IGluc2lkZSB0aGUgZmV0Y2ggYWRhcHRlclxuY29uc3QgZW5jb2RlVGV4dCA9IGlzRmV0Y2hTdXBwb3J0ZWQgJiYgKHR5cGVvZiBUZXh0RW5jb2RlciA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgKChlbmNvZGVyKSA9PiAoc3RyKSA9PiBlbmNvZGVyLmVuY29kZShzdHIpKShuZXcgVGV4dEVuY29kZXIoKSkgOlxuICAgIGFzeW5jIChzdHIpID0+IG5ldyBVaW50OEFycmF5KGF3YWl0IG5ldyBSZXNwb25zZShzdHIpLmFycmF5QnVmZmVyKCkpXG4pO1xuXG5jb25zdCBzdXBwb3J0c1JlcXVlc3RTdHJlYW0gPSBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkICYmICgoKSA9PiB7XG4gIGxldCBkdXBsZXhBY2Nlc3NlZCA9IGZhbHNlO1xuXG4gIGNvbnN0IGhhc0NvbnRlbnRUeXBlID0gbmV3IFJlcXVlc3QocGxhdGZvcm0ub3JpZ2luLCB7XG4gICAgYm9keTogbmV3IFJlYWRhYmxlU3RyZWFtKCksXG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgZ2V0IGR1cGxleCgpIHtcbiAgICAgIGR1cGxleEFjY2Vzc2VkID0gdHJ1ZTtcbiAgICAgIHJldHVybiAnaGFsZic7XG4gICAgfSxcbiAgfSkuaGVhZGVycy5oYXMoJ0NvbnRlbnQtVHlwZScpO1xuXG4gIHJldHVybiBkdXBsZXhBY2Nlc3NlZCAmJiAhaGFzQ29udGVudFR5cGU7XG59KSgpO1xuXG5jb25zdCBERUZBVUxUX0NIVU5LX1NJWkUgPSA2NCAqIDEwMjQ7XG5cbmNvbnN0IHN1cHBvcnRzUmVzcG9uc2VTdHJlYW0gPSBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkICYmICEhKCgpPT4ge1xuICB0cnkge1xuICAgIHJldHVybiB1dGlscy5pc1JlYWRhYmxlU3RyZWFtKG5ldyBSZXNwb25zZSgnJykuYm9keSk7XG4gIH0gY2F0Y2goZXJyKSB7XG4gICAgLy8gcmV0dXJuIHVuZGVmaW5lZFxuICB9XG59KSgpO1xuXG5jb25zdCByZXNvbHZlcnMgPSB7XG4gIHN0cmVhbTogc3VwcG9ydHNSZXNwb25zZVN0cmVhbSAmJiAoKHJlcykgPT4gcmVzLmJvZHkpXG59O1xuXG5pc0ZldGNoU3VwcG9ydGVkICYmICgoKHJlcykgPT4ge1xuICBbJ3RleHQnLCAnYXJyYXlCdWZmZXInLCAnYmxvYicsICdmb3JtRGF0YScsICdzdHJlYW0nXS5mb3JFYWNoKHR5cGUgPT4ge1xuICAgICFyZXNvbHZlcnNbdHlwZV0gJiYgKHJlc29sdmVyc1t0eXBlXSA9IHV0aWxzLmlzRnVuY3Rpb24ocmVzW3R5cGVdKSA/IChyZXMpID0+IHJlc1t0eXBlXSgpIDpcbiAgICAgIChfLCBjb25maWcpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoYFJlc3BvbnNlIHR5cGUgJyR7dHlwZX0nIGlzIG5vdCBzdXBwb3J0ZWRgLCBBeGlvc0Vycm9yLkVSUl9OT1RfU1VQUE9SVCwgY29uZmlnKTtcbiAgICAgIH0pXG4gIH0pO1xufSkobmV3IFJlc3BvbnNlKSk7XG5cbmNvbnN0IGdldEJvZHlMZW5ndGggPSBhc3luYyAoYm9keSkgPT4ge1xuICBpZiAoYm9keSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZih1dGlscy5pc0Jsb2IoYm9keSkpIHtcbiAgICByZXR1cm4gYm9keS5zaXplO1xuICB9XG5cbiAgaWYodXRpbHMuaXNTcGVjQ29tcGxpYW50Rm9ybShib2R5KSkge1xuICAgIHJldHVybiAoYXdhaXQgbmV3IFJlcXVlc3QoYm9keSkuYXJyYXlCdWZmZXIoKSkuYnl0ZUxlbmd0aDtcbiAgfVxuXG4gIGlmKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpKSB7XG4gICAgcmV0dXJuIGJvZHkuYnl0ZUxlbmd0aDtcbiAgfVxuXG4gIGlmKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGJvZHkpKSB7XG4gICAgYm9keSA9IGJvZHkgKyAnJztcbiAgfVxuXG4gIGlmKHV0aWxzLmlzU3RyaW5nKGJvZHkpKSB7XG4gICAgcmV0dXJuIChhd2FpdCBlbmNvZGVUZXh0KGJvZHkpKS5ieXRlTGVuZ3RoO1xuICB9XG59XG5cbmNvbnN0IHJlc29sdmVCb2R5TGVuZ3RoID0gYXN5bmMgKGhlYWRlcnMsIGJvZHkpID0+IHtcbiAgY29uc3QgbGVuZ3RoID0gdXRpbHMudG9GaW5pdGVOdW1iZXIoaGVhZGVycy5nZXRDb250ZW50TGVuZ3RoKCkpO1xuXG4gIHJldHVybiBsZW5ndGggPT0gbnVsbCA/IGdldEJvZHlMZW5ndGgoYm9keSkgOiBsZW5ndGg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzRmV0Y2hTdXBwb3J0ZWQgJiYgKGFzeW5jIChjb25maWcpID0+IHtcbiAgbGV0IHtcbiAgICB1cmwsXG4gICAgbWV0aG9kLFxuICAgIGRhdGEsXG4gICAgc2lnbmFsLFxuICAgIGNhbmNlbFRva2VuLFxuICAgIHRpbWVvdXQsXG4gICAgb25Eb3dubG9hZFByb2dyZXNzLFxuICAgIG9uVXBsb2FkUHJvZ3Jlc3MsXG4gICAgcmVzcG9uc2VUeXBlLFxuICAgIGhlYWRlcnMsXG4gICAgd2l0aENyZWRlbnRpYWxzID0gJ3NhbWUtb3JpZ2luJyxcbiAgICBmZXRjaE9wdGlvbnNcbiAgfSA9IHJlc29sdmVDb25maWcoY29uZmlnKTtcblxuICByZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGUgPyAocmVzcG9uc2VUeXBlICsgJycpLnRvTG93ZXJDYXNlKCkgOiAndGV4dCc7XG5cbiAgbGV0IFtjb21wb3NlZFNpZ25hbCwgc3RvcFRpbWVvdXRdID0gKHNpZ25hbCB8fCBjYW5jZWxUb2tlbiB8fCB0aW1lb3V0KSA/XG4gICAgY29tcG9zZVNpZ25hbHMoW3NpZ25hbCwgY2FuY2VsVG9rZW5dLCB0aW1lb3V0KSA6IFtdO1xuXG4gIGxldCBmaW5pc2hlZCwgcmVxdWVzdDtcblxuICBjb25zdCBvbkZpbmlzaCA9ICgpID0+IHtcbiAgICAhZmluaXNoZWQgJiYgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjb21wb3NlZFNpZ25hbCAmJiBjb21wb3NlZFNpZ25hbC51bnN1YnNjcmliZSgpO1xuICAgIH0pO1xuXG4gICAgZmluaXNoZWQgPSB0cnVlO1xuICB9XG5cbiAgbGV0IHJlcXVlc3RDb250ZW50TGVuZ3RoO1xuXG4gIHRyeSB7XG4gICAgaWYgKFxuICAgICAgb25VcGxvYWRQcm9ncmVzcyAmJiBzdXBwb3J0c1JlcXVlc3RTdHJlYW0gJiYgbWV0aG9kICE9PSAnZ2V0JyAmJiBtZXRob2QgIT09ICdoZWFkJyAmJlxuICAgICAgKHJlcXVlc3RDb250ZW50TGVuZ3RoID0gYXdhaXQgcmVzb2x2ZUJvZHlMZW5ndGgoaGVhZGVycywgZGF0YSkpICE9PSAwXG4gICAgKSB7XG4gICAgICBsZXQgX3JlcXVlc3QgPSBuZXcgUmVxdWVzdCh1cmwsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGJvZHk6IGRhdGEsXG4gICAgICAgIGR1cGxleDogXCJoYWxmXCJcbiAgICAgIH0pO1xuXG4gICAgICBsZXQgY29udGVudFR5cGVIZWFkZXI7XG5cbiAgICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpICYmIChjb250ZW50VHlwZUhlYWRlciA9IF9yZXF1ZXN0LmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkpIHtcbiAgICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZShjb250ZW50VHlwZUhlYWRlcilcbiAgICAgIH1cblxuICAgICAgaWYgKF9yZXF1ZXN0LmJvZHkpIHtcbiAgICAgICAgZGF0YSA9IHRyYWNrU3RyZWFtKF9yZXF1ZXN0LmJvZHksIERFRkFVTFRfQ0hVTktfU0laRSwgZmV0Y2hQcm9ncmVzc0RlY29yYXRvcihcbiAgICAgICAgICByZXF1ZXN0Q29udGVudExlbmd0aCxcbiAgICAgICAgICBwcm9ncmVzc0V2ZW50UmVkdWNlcihvblVwbG9hZFByb2dyZXNzKVxuICAgICAgICApLCBudWxsLCBlbmNvZGVUZXh0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXV0aWxzLmlzU3RyaW5nKHdpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHdpdGhDcmVkZW50aWFscyA9IHdpdGhDcmVkZW50aWFscyA/ICdjb3JzJyA6ICdvbWl0JztcbiAgICB9XG5cbiAgICByZXF1ZXN0ID0gbmV3IFJlcXVlc3QodXJsLCB7XG4gICAgICAuLi5mZXRjaE9wdGlvbnMsXG4gICAgICBzaWduYWw6IGNvbXBvc2VkU2lnbmFsLFxuICAgICAgbWV0aG9kOiBtZXRob2QudG9VcHBlckNhc2UoKSxcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnMubm9ybWFsaXplKCkudG9KU09OKCksXG4gICAgICBib2R5OiBkYXRhLFxuICAgICAgZHVwbGV4OiBcImhhbGZcIixcbiAgICAgIHdpdGhDcmVkZW50aWFsc1xuICAgIH0pO1xuXG4gICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gocmVxdWVzdCk7XG5cbiAgICBjb25zdCBpc1N0cmVhbVJlc3BvbnNlID0gc3VwcG9ydHNSZXNwb25zZVN0cmVhbSAmJiAocmVzcG9uc2VUeXBlID09PSAnc3RyZWFtJyB8fCByZXNwb25zZVR5cGUgPT09ICdyZXNwb25zZScpO1xuXG4gICAgaWYgKHN1cHBvcnRzUmVzcG9uc2VTdHJlYW0gJiYgKG9uRG93bmxvYWRQcm9ncmVzcyB8fCBpc1N0cmVhbVJlc3BvbnNlKSkge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHt9O1xuXG4gICAgICBbJ3N0YXR1cycsICdzdGF0dXNUZXh0JywgJ2hlYWRlcnMnXS5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICBvcHRpb25zW3Byb3BdID0gcmVzcG9uc2VbcHJvcF07XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzcG9uc2VDb250ZW50TGVuZ3RoID0gdXRpbHMudG9GaW5pdGVOdW1iZXIocmVzcG9uc2UuaGVhZGVycy5nZXQoJ2NvbnRlbnQtbGVuZ3RoJykpO1xuXG4gICAgICByZXNwb25zZSA9IG5ldyBSZXNwb25zZShcbiAgICAgICAgdHJhY2tTdHJlYW0ocmVzcG9uc2UuYm9keSwgREVGQVVMVF9DSFVOS19TSVpFLCBvbkRvd25sb2FkUHJvZ3Jlc3MgJiYgZmV0Y2hQcm9ncmVzc0RlY29yYXRvcihcbiAgICAgICAgICByZXNwb25zZUNvbnRlbnRMZW5ndGgsXG4gICAgICAgICAgcHJvZ3Jlc3NFdmVudFJlZHVjZXIob25Eb3dubG9hZFByb2dyZXNzLCB0cnVlKVxuICAgICAgICApLCBpc1N0cmVhbVJlc3BvbnNlICYmIG9uRmluaXNoLCBlbmNvZGVUZXh0KSxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGUgfHwgJ3RleHQnO1xuXG4gICAgbGV0IHJlc3BvbnNlRGF0YSA9IGF3YWl0IHJlc29sdmVyc1t1dGlscy5maW5kS2V5KHJlc29sdmVycywgcmVzcG9uc2VUeXBlKSB8fCAndGV4dCddKHJlc3BvbnNlLCBjb25maWcpO1xuXG4gICAgIWlzU3RyZWFtUmVzcG9uc2UgJiYgb25GaW5pc2goKTtcblxuICAgIHN0b3BUaW1lb3V0ICYmIHN0b3BUaW1lb3V0KCk7XG5cbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIGhlYWRlcnM6IEF4aW9zSGVhZGVycy5mcm9tKHJlc3BvbnNlLmhlYWRlcnMpLFxuICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0XG4gICAgICB9KVxuICAgIH0pXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIG9uRmluaXNoKCk7XG5cbiAgICBpZiAoZXJyICYmIGVyci5uYW1lID09PSAnVHlwZUVycm9yJyAmJiAvZmV0Y2gvaS50ZXN0KGVyci5tZXNzYWdlKSkge1xuICAgICAgdGhyb3cgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgbmV3IEF4aW9zRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBBeGlvc0Vycm9yLkVSUl9ORVRXT1JLLCBjb25maWcsIHJlcXVlc3QpLFxuICAgICAgICB7XG4gICAgICAgICAgY2F1c2U6IGVyci5jYXVzZSB8fCBlcnJcbiAgICAgICAgfVxuICAgICAgKVxuICAgIH1cblxuICAgIHRocm93IEF4aW9zRXJyb3IuZnJvbShlcnIsIGVyciAmJiBlcnIuY29kZSwgY29uZmlnLCByZXF1ZXN0KTtcbiAgfVxufSk7XG5cblxuIiwgImltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgaHR0cEFkYXB0ZXIgZnJvbSAnLi9odHRwLmpzJztcbmltcG9ydCB4aHJBZGFwdGVyIGZyb20gJy4veGhyLmpzJztcbmltcG9ydCBmZXRjaEFkYXB0ZXIgZnJvbSAnLi9mZXRjaC5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tIFwiLi4vY29yZS9BeGlvc0Vycm9yLmpzXCI7XG5cbmNvbnN0IGtub3duQWRhcHRlcnMgPSB7XG4gIGh0dHA6IGh0dHBBZGFwdGVyLFxuICB4aHI6IHhockFkYXB0ZXIsXG4gIGZldGNoOiBmZXRjaEFkYXB0ZXJcbn1cblxudXRpbHMuZm9yRWFjaChrbm93bkFkYXB0ZXJzLCAoZm4sIHZhbHVlKSA9PiB7XG4gIGlmIChmbikge1xuICAgIHRyeSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICduYW1lJywge3ZhbHVlfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ2FkYXB0ZXJOYW1lJywge3ZhbHVlfSk7XG4gIH1cbn0pO1xuXG5jb25zdCByZW5kZXJSZWFzb24gPSAocmVhc29uKSA9PiBgLSAke3JlYXNvbn1gO1xuXG5jb25zdCBpc1Jlc29sdmVkSGFuZGxlID0gKGFkYXB0ZXIpID0+IHV0aWxzLmlzRnVuY3Rpb24oYWRhcHRlcikgfHwgYWRhcHRlciA9PT0gbnVsbCB8fCBhZGFwdGVyID09PSBmYWxzZTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnZXRBZGFwdGVyOiAoYWRhcHRlcnMpID0+IHtcbiAgICBhZGFwdGVycyA9IHV0aWxzLmlzQXJyYXkoYWRhcHRlcnMpID8gYWRhcHRlcnMgOiBbYWRhcHRlcnNdO1xuXG4gICAgY29uc3Qge2xlbmd0aH0gPSBhZGFwdGVycztcbiAgICBsZXQgbmFtZU9yQWRhcHRlcjtcbiAgICBsZXQgYWRhcHRlcjtcblxuICAgIGNvbnN0IHJlamVjdGVkUmVhc29ucyA9IHt9O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgbmFtZU9yQWRhcHRlciA9IGFkYXB0ZXJzW2ldO1xuICAgICAgbGV0IGlkO1xuXG4gICAgICBhZGFwdGVyID0gbmFtZU9yQWRhcHRlcjtcblxuICAgICAgaWYgKCFpc1Jlc29sdmVkSGFuZGxlKG5hbWVPckFkYXB0ZXIpKSB7XG4gICAgICAgIGFkYXB0ZXIgPSBrbm93bkFkYXB0ZXJzWyhpZCA9IFN0cmluZyhuYW1lT3JBZGFwdGVyKSkudG9Mb3dlckNhc2UoKV07XG5cbiAgICAgICAgaWYgKGFkYXB0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKGBVbmtub3duIGFkYXB0ZXIgJyR7aWR9J2ApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGFwdGVyKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZWplY3RlZFJlYXNvbnNbaWQgfHwgJyMnICsgaV0gPSBhZGFwdGVyO1xuICAgIH1cblxuICAgIGlmICghYWRhcHRlcikge1xuXG4gICAgICBjb25zdCByZWFzb25zID0gT2JqZWN0LmVudHJpZXMocmVqZWN0ZWRSZWFzb25zKVxuICAgICAgICAubWFwKChbaWQsIHN0YXRlXSkgPT4gYGFkYXB0ZXIgJHtpZH0gYCArXG4gICAgICAgICAgKHN0YXRlID09PSBmYWxzZSA/ICdpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBlbnZpcm9ubWVudCcgOiAnaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgYnVpbGQnKVxuICAgICAgICApO1xuXG4gICAgICBsZXQgcyA9IGxlbmd0aCA/XG4gICAgICAgIChyZWFzb25zLmxlbmd0aCA+IDEgPyAnc2luY2UgOlxcbicgKyByZWFzb25zLm1hcChyZW5kZXJSZWFzb24pLmpvaW4oJ1xcbicpIDogJyAnICsgcmVuZGVyUmVhc29uKHJlYXNvbnNbMF0pKSA6XG4gICAgICAgICdhcyBubyBhZGFwdGVyIHNwZWNpZmllZCc7XG5cbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICBgVGhlcmUgaXMgbm8gc3VpdGFibGUgYWRhcHRlciB0byBkaXNwYXRjaCB0aGUgcmVxdWVzdCBgICsgcyxcbiAgICAgICAgJ0VSUl9OT1RfU1VQUE9SVCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkYXB0ZXI7XG4gIH0sXG4gIGFkYXB0ZXJzOiBrbm93bkFkYXB0ZXJzXG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHJhbnNmb3JtRGF0YSBmcm9tICcuL3RyYW5zZm9ybURhdGEuanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4uL2NhbmNlbC9pc0NhbmNlbC5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQgYWRhcHRlcnMgZnJvbSBcIi4uL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzXCI7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cblxuICBpZiAoY29uZmlnLnNpZ25hbCAmJiBjb25maWcuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICB0aHJvdyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICpcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb25maWcuaGVhZGVycyk7XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICBpZiAoWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLmluZGV4T2YoY29uZmlnLm1ldGhvZCkgIT09IC0xKSB7XG4gICAgY29uZmlnLmhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsIGZhbHNlKTtcbiAgfVxuXG4gIGNvbnN0IGFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyKGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXIpO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgcmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlc3BvbnNlLmhlYWRlcnMpO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZVxuICAgICAgICApO1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge1ZFUlNJT059IGZyb20gJy4uL2Vudi9kYXRhLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKCh0eXBlLCBpKSA9PiB7XG4gIHZhbGlkYXRvcnNbdHlwZV0gPSBmdW5jdGlvbiB2YWxpZGF0b3IodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSB0eXBlIHx8ICdhJyArIChpIDwgMSA/ICduICcgOiAnICcpICsgdHlwZTtcbiAgfTtcbn0pO1xuXG5jb25zdCBkZXByZWNhdGVkV2FybmluZ3MgPSB7fTtcblxuLyoqXG4gKiBUcmFuc2l0aW9uYWwgb3B0aW9uIHZhbGlkYXRvclxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvciAtIHNldCB0byBmYWxzZSBpZiB0aGUgdHJhbnNpdGlvbmFsIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkXG4gKiBAcGFyYW0ge3N0cmluZz99IHZlcnNpb24gLSBkZXByZWNhdGVkIHZlcnNpb24gLyByZW1vdmVkIHNpbmNlIHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gbWVzc2FnZSAtIHNvbWUgbWVzc2FnZSB3aXRoIGFkZGl0aW9uYWwgaW5mb1xuICpcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiAodmFsdWUsIG9wdCwgb3B0cykgPT4ge1xuICAgIGlmICh2YWxpZGF0b3IgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShvcHQsICcgaGFzIGJlZW4gcmVtb3ZlZCcgKyAodmVyc2lvbiA/ICcgaW4gJyArIHZlcnNpb24gOiAnJykpLFxuICAgICAgICBBeGlvc0Vycm9yLkVSUl9ERVBSRUNBVEVEXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEFzc2VydCBvYmplY3QncyBwcm9wZXJ0aWVzIHR5cGVcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKlxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgYWxsb3dVbmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICB9XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBjb25zdCBvcHQgPSBrZXlzW2ldO1xuICAgIGNvbnN0IHZhbGlkYXRvciA9IHNjaGVtYVtvcHRdO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYXNzZXJ0T3B0aW9ucyxcbiAgdmFsaWRhdG9yc1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBidWlsZFVSTCBmcm9tICcuLi9oZWxwZXJzL2J1aWxkVVJMLmpzJztcbmltcG9ydCBJbnRlcmNlcHRvck1hbmFnZXIgZnJvbSAnLi9JbnRlcmNlcHRvck1hbmFnZXIuanMnO1xuaW1wb3J0IGRpc3BhdGNoUmVxdWVzdCBmcm9tICcuL2Rpc3BhdGNoUmVxdWVzdC5qcyc7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSAnLi9tZXJnZUNvbmZpZy5qcyc7XG5pbXBvcnQgYnVpbGRGdWxsUGF0aCBmcm9tICcuL2J1aWxkRnVsbFBhdGguanMnO1xuaW1wb3J0IHZhbGlkYXRvciBmcm9tICcuLi9oZWxwZXJzL3ZhbGlkYXRvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4vQXhpb3NIZWFkZXJzLmpzJztcblxuY29uc3QgdmFsaWRhdG9ycyA9IHZhbGlkYXRvci52YWxpZGF0b3JzO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5jbGFzcyBBeGlvcyB7XG4gIGNvbnN0cnVjdG9yKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gY29uZmlnT3JVcmwgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICAgKiBAcGFyYW0gez9PYmplY3R9IGNvbmZpZ1xuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gICAqL1xuICBhc3luYyByZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX3JlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgbGV0IGR1bW15O1xuXG4gICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlID8gRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZHVtbXkgPSB7fSkgOiAoZHVtbXkgPSBuZXcgRXJyb3IoKSk7XG5cbiAgICAgICAgLy8gc2xpY2Ugb2ZmIHRoZSBFcnJvcjogLi4uIGxpbmVcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBkdW1teS5zdGFjayA/IGR1bW15LnN0YWNrLnJlcGxhY2UoL14uK1xcbi8sICcnKSA6ICcnO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghZXJyLnN0YWNrKSB7XG4gICAgICAgICAgICBlcnIuc3RhY2sgPSBzdGFjaztcbiAgICAgICAgICAgIC8vIG1hdGNoIHdpdGhvdXQgdGhlIDIgdG9wIHN0YWNrIGxpbmVzXG4gICAgICAgICAgfSBlbHNlIGlmIChzdGFjayAmJiAhU3RyaW5nKGVyci5zdGFjaykuZW5kc1dpdGgoc3RhY2sucmVwbGFjZSgvXi4rXFxuLitcXG4vLCAnJykpKSB7XG4gICAgICAgICAgICBlcnIuc3RhY2sgKz0gJ1xcbicgKyBzdGFja1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlnbm9yZSB0aGUgY2FzZSB3aGVyZSBcInN0YWNrXCIgaXMgYW4gdW4td3JpdGFibGUgcHJvcGVydHlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG5cbiAgX3JlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgICBpZiAodHlwZW9mIGNvbmZpZ09yVXJsID09PSAnc3RyaW5nJykge1xuICAgICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgICAgY29uZmlnLnVybCA9IGNvbmZpZ09yVXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25maWcgPSBjb25maWdPclVybCB8fCB7fTtcbiAgICB9XG5cbiAgICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gICAgY29uc3Qge3RyYW5zaXRpb25hbCwgcGFyYW1zU2VyaWFsaXplciwgaGVhZGVyc30gPSBjb25maWc7XG5cbiAgICBpZiAodHJhbnNpdGlvbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHRyYW5zaXRpb25hbCwge1xuICAgICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgICAgZm9yY2VkSlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbilcbiAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zU2VyaWFsaXplciAhPSBudWxsKSB7XG4gICAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihwYXJhbXNTZXJpYWxpemVyKSkge1xuICAgICAgICBjb25maWcucGFyYW1zU2VyaWFsaXplciA9IHtcbiAgICAgICAgICBzZXJpYWxpemU6IHBhcmFtc1NlcmlhbGl6ZXJcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnMocGFyYW1zU2VyaWFsaXplciwge1xuICAgICAgICAgIGVuY29kZTogdmFsaWRhdG9ycy5mdW5jdGlvbixcbiAgICAgICAgICBzZXJpYWxpemU6IHZhbGlkYXRvcnMuZnVuY3Rpb25cbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgICBjb25maWcubWV0aG9kID0gKGNvbmZpZy5tZXRob2QgfHwgdGhpcy5kZWZhdWx0cy5tZXRob2QgfHwgJ2dldCcpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgICBsZXQgY29udGV4dEhlYWRlcnMgPSBoZWFkZXJzICYmIHV0aWxzLm1lcmdlKFxuICAgICAgaGVhZGVycy5jb21tb24sXG4gICAgICBoZWFkZXJzW2NvbmZpZy5tZXRob2RdXG4gICAgKTtcblxuICAgIGhlYWRlcnMgJiYgdXRpbHMuZm9yRWFjaChcbiAgICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgICAgKG1ldGhvZCkgPT4ge1xuICAgICAgICBkZWxldGUgaGVhZGVyc1ttZXRob2RdO1xuICAgICAgfVxuICAgICk7XG5cbiAgICBjb25maWcuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5jb25jYXQoY29udGV4dEhlYWRlcnMsIGhlYWRlcnMpO1xuXG4gICAgLy8gZmlsdGVyIG91dCBza2lwcGVkIGludGVyY2VwdG9yc1xuICAgIGNvbnN0IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gICAgbGV0IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHRydWU7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgICAgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIGxldCBwcm9taXNlO1xuICAgIGxldCBpID0gMDtcbiAgICBsZXQgbGVuO1xuXG4gICAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICAgIGNvbnN0IGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdC5iaW5kKHRoaXMpLCB1bmRlZmluZWRdO1xuICAgICAgY2hhaW4udW5zaGlmdC5hcHBseShjaGFpbiwgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4pO1xuICAgICAgY2hhaW4ucHVzaC5hcHBseShjaGFpbiwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGxlbiA9IGNoYWluLmxlbmd0aDtcblxuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluW2krK10sIGNoYWluW2krK10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICBsZW4gPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGg7XG5cbiAgICBsZXQgbmV3Q29uZmlnID0gY29uZmlnO1xuXG4gICAgaSA9IDA7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgY29uc3Qgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgY29uc3Qgb25SZWplY3RlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluW2krK107XG4gICAgICB0cnkge1xuICAgICAgICBuZXdDb25maWcgPSBvbkZ1bGZpbGxlZChuZXdDb25maWcpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgb25SZWplY3RlZC5jYWxsKHRoaXMsIGVycm9yKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QuY2FsbCh0aGlzLCBuZXdDb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cblxuICAgIGkgPSAwO1xuICAgIGxlbiA9IHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihyZXNwb25zZUludGVyY2VwdG9yQ2hhaW5baSsrXSwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10pO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgZ2V0VXJpKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gICAgY29uc3QgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXR1cm4gYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKTtcbiAgfVxufVxuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZCxcbiAgICAgIHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cblxuICBmdW5jdGlvbiBnZW5lcmF0ZUhUVFBNZXRob2QoaXNGb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGh0dHBNZXRob2QodXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgaGVhZGVyczogaXNGb3JtID8ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSdcbiAgICAgICAgfSA6IHt9LFxuICAgICAgICB1cmwsXG4gICAgICAgIGRhdGFcbiAgICAgIH0pKTtcbiAgICB9O1xuICB9XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBnZW5lcmF0ZUhUVFBNZXRob2QoKTtcblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kICsgJ0Zvcm0nXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCh0cnVlKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvcztcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vQ2FuY2VsZWRFcnJvci5qcyc7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKlxuICogQHJldHVybnMge0NhbmNlbFRva2VufVxuICovXG5jbGFzcyBDYW5jZWxUb2tlbiB7XG4gIGNvbnN0cnVjdG9yKGV4ZWN1dG9yKSB7XG4gICAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGxldCByZXNvbHZlUHJvbWlzZTtcblxuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgfSk7XG5cbiAgICBjb25zdCB0b2tlbiA9IHRoaXM7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuKGNhbmNlbCA9PiB7XG4gICAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgICAgbGV0IGkgPSB0b2tlbi5fbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgICAgfVxuICAgICAgdG9rZW4uX2xpc3RlbmVycyA9IG51bGw7XG4gICAgfSk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuID0gb25mdWxmaWxsZWQgPT4ge1xuICAgICAgbGV0IF9yZXNvbHZlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB9KS50aGVuKG9uZnVsZmlsbGVkKTtcblxuICAgICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICAgIHRva2VuLnVuc3Vic2NyaWJlKF9yZXNvbHZlKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG5cbiAgICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gICAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWxlZEVycm9yKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCk7XG4gICAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICAgKi9cbiAgdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIHRocm93IHRoaXMucmVhc29uO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgdG8gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICBsaXN0ZW5lcih0aGlzLnJlYXNvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xpc3RlbmVycykge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMgPSBbbGlzdGVuZXJdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gICAqL1xuXG4gIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAgICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAgICovXG4gIHN0YXRpYyBzb3VyY2UoKSB7XG4gICAgbGV0IGNhbmNlbDtcbiAgICBjb25zdCB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgICBjYW5jZWwgPSBjO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICB0b2tlbixcbiAgICAgIGNhbmNlbFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FuY2VsVG9rZW47XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuIHV0aWxzLmlzT2JqZWN0KHBheWxvYWQpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59XG4iLCAiY29uc3QgSHR0cFN0YXR1c0NvZGUgPSB7XG4gIENvbnRpbnVlOiAxMDAsXG4gIFN3aXRjaGluZ1Byb3RvY29sczogMTAxLFxuICBQcm9jZXNzaW5nOiAxMDIsXG4gIEVhcmx5SGludHM6IDEwMyxcbiAgT2s6IDIwMCxcbiAgQ3JlYXRlZDogMjAxLFxuICBBY2NlcHRlZDogMjAyLFxuICBOb25BdXRob3JpdGF0aXZlSW5mb3JtYXRpb246IDIwMyxcbiAgTm9Db250ZW50OiAyMDQsXG4gIFJlc2V0Q29udGVudDogMjA1LFxuICBQYXJ0aWFsQ29udGVudDogMjA2LFxuICBNdWx0aVN0YXR1czogMjA3LFxuICBBbHJlYWR5UmVwb3J0ZWQ6IDIwOCxcbiAgSW1Vc2VkOiAyMjYsXG4gIE11bHRpcGxlQ2hvaWNlczogMzAwLFxuICBNb3ZlZFBlcm1hbmVudGx5OiAzMDEsXG4gIEZvdW5kOiAzMDIsXG4gIFNlZU90aGVyOiAzMDMsXG4gIE5vdE1vZGlmaWVkOiAzMDQsXG4gIFVzZVByb3h5OiAzMDUsXG4gIFVudXNlZDogMzA2LFxuICBUZW1wb3JhcnlSZWRpcmVjdDogMzA3LFxuICBQZXJtYW5lbnRSZWRpcmVjdDogMzA4LFxuICBCYWRSZXF1ZXN0OiA0MDAsXG4gIFVuYXV0aG9yaXplZDogNDAxLFxuICBQYXltZW50UmVxdWlyZWQ6IDQwMixcbiAgRm9yYmlkZGVuOiA0MDMsXG4gIE5vdEZvdW5kOiA0MDQsXG4gIE1ldGhvZE5vdEFsbG93ZWQ6IDQwNSxcbiAgTm90QWNjZXB0YWJsZTogNDA2LFxuICBQcm94eUF1dGhlbnRpY2F0aW9uUmVxdWlyZWQ6IDQwNyxcbiAgUmVxdWVzdFRpbWVvdXQ6IDQwOCxcbiAgQ29uZmxpY3Q6IDQwOSxcbiAgR29uZTogNDEwLFxuICBMZW5ndGhSZXF1aXJlZDogNDExLFxuICBQcmVjb25kaXRpb25GYWlsZWQ6IDQxMixcbiAgUGF5bG9hZFRvb0xhcmdlOiA0MTMsXG4gIFVyaVRvb0xvbmc6IDQxNCxcbiAgVW5zdXBwb3J0ZWRNZWRpYVR5cGU6IDQxNSxcbiAgUmFuZ2VOb3RTYXRpc2ZpYWJsZTogNDE2LFxuICBFeHBlY3RhdGlvbkZhaWxlZDogNDE3LFxuICBJbUFUZWFwb3Q6IDQxOCxcbiAgTWlzZGlyZWN0ZWRSZXF1ZXN0OiA0MjEsXG4gIFVucHJvY2Vzc2FibGVFbnRpdHk6IDQyMixcbiAgTG9ja2VkOiA0MjMsXG4gIEZhaWxlZERlcGVuZGVuY3k6IDQyNCxcbiAgVG9vRWFybHk6IDQyNSxcbiAgVXBncmFkZVJlcXVpcmVkOiA0MjYsXG4gIFByZWNvbmRpdGlvblJlcXVpcmVkOiA0MjgsXG4gIFRvb01hbnlSZXF1ZXN0czogNDI5LFxuICBSZXF1ZXN0SGVhZGVyRmllbGRzVG9vTGFyZ2U6IDQzMSxcbiAgVW5hdmFpbGFibGVGb3JMZWdhbFJlYXNvbnM6IDQ1MSxcbiAgSW50ZXJuYWxTZXJ2ZXJFcnJvcjogNTAwLFxuICBOb3RJbXBsZW1lbnRlZDogNTAxLFxuICBCYWRHYXRld2F5OiA1MDIsXG4gIFNlcnZpY2VVbmF2YWlsYWJsZTogNTAzLFxuICBHYXRld2F5VGltZW91dDogNTA0LFxuICBIdHRwVmVyc2lvbk5vdFN1cHBvcnRlZDogNTA1LFxuICBWYXJpYW50QWxzb05lZ290aWF0ZXM6IDUwNixcbiAgSW5zdWZmaWNpZW50U3RvcmFnZTogNTA3LFxuICBMb29wRGV0ZWN0ZWQ6IDUwOCxcbiAgTm90RXh0ZW5kZWQ6IDUxMCxcbiAgTmV0d29ya0F1dGhlbnRpY2F0aW9uUmVxdWlyZWQ6IDUxMSxcbn07XG5cbk9iamVjdC5lbnRyaWVzKEh0dHBTdGF0dXNDb2RlKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgSHR0cFN0YXR1c0NvZGVbdmFsdWVdID0ga2V5O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEh0dHBTdGF0dXNDb2RlO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IGJpbmQgZnJvbSAnLi9oZWxwZXJzL2JpbmQuanMnO1xuaW1wb3J0IEF4aW9zIGZyb20gJy4vY29yZS9BeGlvcy5qcyc7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSAnLi9jb3JlL21lcmdlQ29uZmlnLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBmb3JtRGF0YVRvSlNPTiBmcm9tICcuL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgQ2FuY2VsVG9rZW4gZnJvbSAnLi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4vY2FuY2VsL2lzQ2FuY2VsLmpzJztcbmltcG9ydCB7VkVSU0lPTn0gZnJvbSAnLi9lbnYvZGF0YS5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgc3ByZWFkIGZyb20gJy4vaGVscGVycy9zcHJlYWQuanMnO1xuaW1wb3J0IGlzQXhpb3NFcnJvciBmcm9tICcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4vY29yZS9BeGlvc0hlYWRlcnMuanNcIjtcbmltcG9ydCBhZGFwdGVycyBmcm9tICcuL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzJztcbmltcG9ydCBIdHRwU3RhdHVzQ29kZSBmcm9tICcuL2hlbHBlcnMvSHR0cFN0YXR1c0NvZGUuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKlxuICogQHJldHVybnMge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIGNvbnN0IGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIGNvbnN0IGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCwgbnVsbCwge2FsbE93bktleXM6IHRydWV9KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG5jb25zdCBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbGVkRXJyb3IgPSBDYW5jZWxlZEVycm9yO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSBDYW5jZWxUb2tlbjtcbmF4aW9zLmlzQ2FuY2VsID0gaXNDYW5jZWw7XG5heGlvcy5WRVJTSU9OID0gVkVSU0lPTjtcbmF4aW9zLnRvRm9ybURhdGEgPSB0b0Zvcm1EYXRhO1xuXG4vLyBFeHBvc2UgQXhpb3NFcnJvciBjbGFzc1xuYXhpb3MuQXhpb3NFcnJvciA9IEF4aW9zRXJyb3I7XG5cbi8vIGFsaWFzIGZvciBDYW5jZWxlZEVycm9yIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5heGlvcy5DYW5jZWwgPSBheGlvcy5DYW5jZWxlZEVycm9yO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuXG5heGlvcy5zcHJlYWQgPSBzcHJlYWQ7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IGlzQXhpb3NFcnJvcjtcblxuLy8gRXhwb3NlIG1lcmdlQ29uZmlnXG5heGlvcy5tZXJnZUNvbmZpZyA9IG1lcmdlQ29uZmlnO1xuXG5heGlvcy5BeGlvc0hlYWRlcnMgPSBBeGlvc0hlYWRlcnM7XG5cbmF4aW9zLmZvcm1Ub0pTT04gPSB0aGluZyA9PiBmb3JtRGF0YVRvSlNPTih1dGlscy5pc0hUTUxGb3JtKHRoaW5nKSA/IG5ldyBGb3JtRGF0YSh0aGluZykgOiB0aGluZyk7XG5cbmF4aW9zLmdldEFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyO1xuXG5heGlvcy5IdHRwU3RhdHVzQ29kZSA9IEh0dHBTdGF0dXNDb2RlO1xuXG5heGlvcy5kZWZhdWx0ID0gYXhpb3M7XG5cbi8vIHRoaXMgbW9kdWxlIHNob3VsZCBvbmx5IGhhdmUgYSBkZWZhdWx0IGV4cG9ydFxuZXhwb3J0IGRlZmF1bHQgYXhpb3NcbiIsICJpbXBvcnQgYXhpb3MgZnJvbSAnLi9saWIvYXhpb3MuanMnO1xuXG4vLyBUaGlzIG1vZHVsZSBpcyBpbnRlbmRlZCB0byB1bndyYXAgQXhpb3MgZGVmYXVsdCBleHBvcnQgYXMgbmFtZWQuXG4vLyBLZWVwIHRvcC1sZXZlbCBleHBvcnQgc2FtZSB3aXRoIHN0YXRpYyBwcm9wZXJ0aWVzXG4vLyBzbyB0aGF0IGl0IGNhbiBrZWVwIHNhbWUgd2l0aCBlcyBtb2R1bGUgb3IgY2pzXG5jb25zdCB7XG4gIEF4aW9zLFxuICBBeGlvc0Vycm9yLFxuICBDYW5jZWxlZEVycm9yLFxuICBpc0NhbmNlbCxcbiAgQ2FuY2VsVG9rZW4sXG4gIFZFUlNJT04sXG4gIGFsbCxcbiAgQ2FuY2VsLFxuICBpc0F4aW9zRXJyb3IsXG4gIHNwcmVhZCxcbiAgdG9Gb3JtRGF0YSxcbiAgQXhpb3NIZWFkZXJzLFxuICBIdHRwU3RhdHVzQ29kZSxcbiAgZm9ybVRvSlNPTixcbiAgZ2V0QWRhcHRlcixcbiAgbWVyZ2VDb25maWdcbn0gPSBheGlvcztcblxuZXhwb3J0IHtcbiAgYXhpb3MgYXMgZGVmYXVsdCxcbiAgQXhpb3MsXG4gIEF4aW9zRXJyb3IsXG4gIENhbmNlbGVkRXJyb3IsXG4gIGlzQ2FuY2VsLFxuICBDYW5jZWxUb2tlbixcbiAgVkVSU0lPTixcbiAgYWxsLFxuICBDYW5jZWwsXG4gIGlzQXhpb3NFcnJvcixcbiAgc3ByZWFkLFxuICB0b0Zvcm1EYXRhLFxuICBBeGlvc0hlYWRlcnMsXG4gIEh0dHBTdGF0dXNDb2RlLFxuICBmb3JtVG9KU09OLFxuICBnZXRBZGFwdGVyLFxuICBtZXJnZUNvbmZpZ1xufVxuIiwgImNvbnN0IGNhY2hlID0gbmV3IFdlYWtNYXA8U3RyaW5nLCBzdHJpbmdbXT4oKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhdGhzcGVjKC4uLnBhdGhzOiBzdHJpbmdbXSkge1xuICAgY29uc3Qga2V5ID0gbmV3IFN0cmluZyhwYXRocyk7XG4gICBjYWNoZS5zZXQoa2V5LCBwYXRocyk7XG5cbiAgIHJldHVybiBrZXkgYXMgc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQYXRoU3BlYyhwYXRoOiBzdHJpbmcgfCB1bmtub3duKTogcGF0aCBpcyBzdHJpbmcge1xuICAgcmV0dXJuIHBhdGggaW5zdGFuY2VvZiBTdHJpbmcgJiYgY2FjaGUuaGFzKHBhdGgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9QYXRocyhwYXRoU3BlYzogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgcmV0dXJuIGNhY2hlLmdldChwYXRoU3BlYykgfHwgW107XG59XG4iLCAiaW1wb3J0IHR5cGUgeyBTaW1wbGVHaXRUYXNrIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG4vKipcbiAqIFRoZSBgR2l0RXJyb3JgIGlzIHRocm93biB3aGVuIHRoZSB1bmRlcmx5aW5nIGBnaXRgIHByb2Nlc3MgdGhyb3dzIGFcbiAqIGZhdGFsIGV4Y2VwdGlvbiAoZWcgYW4gYEVOT0VOVGAgZXhjZXB0aW9uIHdoZW4gYXR0ZW1wdGluZyB0byB1c2UgYVxuICogbm9uLXdyaXRhYmxlIGRpcmVjdG9yeSBhcyB0aGUgcm9vdCBmb3IgeW91ciByZXBvKSwgYW5kIGFjdHMgYXMgdGhlXG4gKiBiYXNlIGNsYXNzIGZvciBtb3JlIHNwZWNpZmljIGVycm9ycyB0aHJvd24gYnkgdGhlIHBhcnNpbmcgb2YgdGhlXG4gKiBnaXQgcmVzcG9uc2Ugb3IgZXJyb3JzIGluIHRoZSBjb25maWd1cmF0aW9uIG9mIHRoZSB0YXNrIGFib3V0IHRvXG4gKiBiZSBydW4uXG4gKlxuICogV2hlbiBhbiBleGNlcHRpb24gaXMgdGhyb3duLCBwZW5kaW5nIHRhc2tzIGluIHRoZSBzYW1lIGluc3RhbmNlIHdpbGxcbiAqIG5vdCBiZSBleGVjdXRlZC4gVGhlIHJlY29tbWVuZGVkIHdheSB0byBydW4gYSBzZXJpZXMgb2YgdGFza3MgdGhhdFxuICogY2FuIGluZGVwZW5kZW50bHkgZmFpbCB3aXRob3V0IG5lZWRpbmcgdG8gcHJldmVudCBmdXR1cmUgdGFza3MgZnJvbVxuICogcnVubmluZyBpcyB0byBjYXRjaCB0aGVtIGluZGl2aWR1YWxseTpcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gaW1wb3J0IHsgZ2l0UCwgU2ltcGxlR2l0LCBHaXRFcnJvciwgUHVsbFJlc3VsdCB9IGZyb20gJ3NpbXBsZS1naXQnO1xuXG4gZnVuY3Rpb24gY2F0Y2hUYXNrIChlOiBHaXRFcnJvcikge1xuICAgcmV0dXJuIGUuXG4gfVxuXG4gY29uc3QgZ2l0ID0gZ2l0UChyZXBvV29ya2luZ0Rpcik7XG4gY29uc3QgcHVsbGVkOiBQdWxsUmVzdWx0IHwgR2l0RXJyb3IgPSBhd2FpdCBnaXQucHVsbCgpLmNhdGNoKGNhdGNoVGFzayk7XG4gY29uc3QgcHVzaGVkOiBzdHJpbmcgfCBHaXRFcnJvciA9IGF3YWl0IGdpdC5wdXNoVGFncygpLmNhdGNoKGNhdGNoVGFzayk7XG4gYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBHaXRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgIGNvbnN0cnVjdG9yKFxuICAgICAgcHVibGljIHRhc2s/OiBTaW1wbGVHaXRUYXNrPGFueT4sXG4gICAgICBtZXNzYWdlPzogc3RyaW5nXG4gICApIHtcbiAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIG5ldy50YXJnZXQucHJvdG90eXBlKTtcbiAgIH1cbn1cbiIsICJpbXBvcnQgeyBHaXRFcnJvciB9IGZyb20gJy4vZ2l0LWVycm9yJztcblxuLyoqXG4gKiBUaGUgYEdpdFJlc3BvbnNlRXJyb3JgIGlzIHRoZSB3cmFwcGVyIGZvciBhIHBhcnNlZCByZXNwb25zZSB0aGF0IGlzIHRyZWF0ZWQgYXNcbiAqIGEgZmF0YWwgZXJyb3IsIGZvciBleGFtcGxlIGF0dGVtcHRpbmcgYSBgbWVyZ2VgIGNhbiBsZWF2ZSB0aGUgcmVwbyBpbiBhIGNvcnJ1cHRlZFxuICogc3RhdGUgd2hlbiB0aGVyZSBhcmUgY29uZmxpY3RzIHNvIHRoZSB0YXNrIHdpbGwgcmVqZWN0IHJhdGhlciB0aGFuIHJlc29sdmUuXG4gKlxuICogRm9yIGV4YW1wbGUsIGNhdGNoaW5nIHRoZSBtZXJnZSBjb25mbGljdCBleGNlcHRpb246XG4gKlxuICogYGBgdHlwZXNjcmlwdFxuIGltcG9ydCB7IGdpdFAsIFNpbXBsZUdpdCwgR2l0UmVzcG9uc2VFcnJvciwgTWVyZ2VTdW1tYXJ5IH0gZnJvbSAnc2ltcGxlLWdpdCc7XG5cbiBjb25zdCBnaXQgPSBnaXRQKHJlcG9Sb290KTtcbiBjb25zdCBtZXJnZU9wdGlvbnM6IHN0cmluZ1tdID0gWyctLW5vLWZmJywgJ290aGVyLWJyYW5jaCddO1xuIGNvbnN0IG1lcmdlU3VtbWFyeTogTWVyZ2VTdW1tYXJ5ID0gYXdhaXQgZ2l0Lm1lcmdlKG1lcmdlT3B0aW9ucylcbiAgICAgIC5jYXRjaCgoZTogR2l0UmVzcG9uc2VFcnJvcjxNZXJnZVN1bW1hcnk+KSA9PiBlLmdpdCk7XG5cbiBpZiAobWVyZ2VTdW1tYXJ5LmZhaWxlZCkge1xuICAgLy8gZGVhbCB3aXRoIHRoZSBlcnJvclxuIH1cbiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIEdpdFJlc3BvbnNlRXJyb3I8VCA9IGFueT4gZXh0ZW5kcyBHaXRFcnJvciB7XG4gICBjb25zdHJ1Y3RvcihcbiAgICAgIC8qKlxuICAgICAgICogYC5naXRgIGFjY2VzcyB0aGUgcGFyc2VkIHJlc3BvbnNlIHRoYXQgaXMgdHJlYXRlZCBhcyBiZWluZyBhbiBlcnJvclxuICAgICAgICovXG4gICAgICBwdWJsaWMgcmVhZG9ubHkgZ2l0OiBULFxuICAgICAgbWVzc2FnZT86IHN0cmluZ1xuICAgKSB7XG4gICAgICBzdXBlcih1bmRlZmluZWQsIG1lc3NhZ2UgfHwgU3RyaW5nKGdpdCkpO1xuICAgfVxufVxuIiwgImltcG9ydCB7IEdpdEVycm9yIH0gZnJvbSAnLi9naXQtZXJyb3InO1xuXG4vKipcbiAqIFRoZSBgVGFza0NvbmZpZ3VyYXRpb25FcnJvcmAgaXMgdGhyb3duIHdoZW4gYSBjb21tYW5kIHdhcyBpbmNvcnJlY3RseVxuICogY29uZmlndXJlZC4gQW4gZXJyb3Igb2YgdGhpcyBraW5kIG1lYW5zIHRoYXQgbm8gYXR0ZW1wdCB3YXMgbWFkZSB0b1xuICogcnVuIHlvdXIgY29tbWFuZCB0aHJvdWdoIHRoZSB1bmRlcmx5aW5nIGBnaXRgIGJpbmFyeS5cbiAqXG4gKiBDaGVjayB0aGUgYC5tZXNzYWdlYCBwcm9wZXJ0eSBmb3IgbW9yZSBkZXRhaWwgb24gd2h5IHlvdXIgY29uZmlndXJhdGlvblxuICogcmVzdWx0ZWQgaW4gYW4gZXJyb3IuXG4gKi9cbmV4cG9ydCBjbGFzcyBUYXNrQ29uZmlndXJhdGlvbkVycm9yIGV4dGVuZHMgR2l0RXJyb3Ige1xuICAgY29uc3RydWN0b3IobWVzc2FnZT86IHN0cmluZykge1xuICAgICAgc3VwZXIodW5kZWZpbmVkLCBtZXNzYWdlKTtcbiAgIH1cbn1cbiIsICJpbXBvcnQgeyBleGlzdHMsIEZPTERFUiB9IGZyb20gJ0Brd3NpdGVzL2ZpbGUtZXhpc3RzJztcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgTlVMTCA9ICdcXDAnO1xuXG5leHBvcnQgY29uc3QgTk9PUDogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkID0gKCkgPT4ge307XG5cbi8qKlxuICogUmV0dXJucyBlaXRoZXIgdGhlIHNvdXJjZSBhcmd1bWVudCB3aGVuIGl0IGlzIGEgYEZ1bmN0aW9uYCwgb3IgdGhlIGRlZmF1bHRcbiAqIGBOT09QYCBmdW5jdGlvbiBjb25zdGFudFxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNGdW5jdGlvbjxUIGV4dGVuZHMgKCkgPT4gYW55Pihzb3VyY2U6IFQgfCBhbnkpOiBUIHtcbiAgIHJldHVybiB0eXBlb2Ygc291cmNlID09PSAnZnVuY3Rpb24nID8gc291cmNlIDogTk9PUDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHN1cHBsaWVkIGFyZ3VtZW50IGlzIGJvdGggYSBmdW5jdGlvbiwgYW5kIGlzIG5vdFxuICogdGhlIGBOT09QYCBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVXNlckZ1bmN0aW9uPFQgZXh0ZW5kcyBGdW5jdGlvbj4oc291cmNlOiBUIHwgYW55KTogc291cmNlIGlzIFQge1xuICAgcmV0dXJuIHR5cGVvZiBzb3VyY2UgPT09ICdmdW5jdGlvbicgJiYgc291cmNlICE9PSBOT09QO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRPbihpbnB1dDogc3RyaW5nLCBjaGFyOiBzdHJpbmcpOiBbc3RyaW5nLCBzdHJpbmddIHtcbiAgIGNvbnN0IGluZGV4ID0gaW5wdXQuaW5kZXhPZihjaGFyKTtcbiAgIGlmIChpbmRleCA8PSAwKSB7XG4gICAgICByZXR1cm4gW2lucHV0LCAnJ107XG4gICB9XG5cbiAgIHJldHVybiBbaW5wdXQuc3Vic3RyKDAsIGluZGV4KSwgaW5wdXQuc3Vic3RyKGluZGV4ICsgMSldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlyc3Q8VCBleHRlbmRzIGFueVtdPihpbnB1dDogVCwgb2Zmc2V0PzogbnVtYmVyKTogTWF5YmU8VFtudW1iZXJdPjtcbmV4cG9ydCBmdW5jdGlvbiBmaXJzdDxUIGV4dGVuZHMgSUFyZ3VtZW50cz4oaW5wdXQ6IFQsIG9mZnNldD86IG51bWJlcik6IE1heWJlPHVua25vd24+O1xuZXhwb3J0IGZ1bmN0aW9uIGZpcnN0KGlucHV0OiBhbnlbXSB8IElBcmd1bWVudHMsIG9mZnNldCA9IDApOiBNYXliZTx1bmtub3duPiB7XG4gICByZXR1cm4gaXNBcnJheUxpa2UoaW5wdXQpICYmIGlucHV0Lmxlbmd0aCA+IG9mZnNldCA/IGlucHV0W29mZnNldF0gOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsYXN0PFQgZXh0ZW5kcyBhbnlbXT4oaW5wdXQ6IFQsIG9mZnNldD86IG51bWJlcik6IE1heWJlPFRbbnVtYmVyXT47XG5leHBvcnQgZnVuY3Rpb24gbGFzdDxUIGV4dGVuZHMgSUFyZ3VtZW50cz4oaW5wdXQ6IFQsIG9mZnNldD86IG51bWJlcik6IE1heWJlPHVua25vd24+O1xuZXhwb3J0IGZ1bmN0aW9uIGxhc3Q8VD4oaW5wdXQ6IFQsIG9mZnNldD86IG51bWJlcik6IE1heWJlPHVua25vd24+O1xuZXhwb3J0IGZ1bmN0aW9uIGxhc3QoaW5wdXQ6IHVua25vd24sIG9mZnNldCA9IDApIHtcbiAgIGlmIChpc0FycmF5TGlrZShpbnB1dCkgJiYgaW5wdXQubGVuZ3RoID4gb2Zmc2V0KSB7XG4gICAgICByZXR1cm4gaW5wdXRbaW5wdXQubGVuZ3RoIC0gMSAtIG9mZnNldF07XG4gICB9XG59XG5cbnR5cGUgQXJyYXlMaWtlPFQgPSBhbnk+ID0gVFtdIHwgSUFyZ3VtZW50cyB8IHsgW2luZGV4OiBudW1iZXJdOiBUOyBsZW5ndGg6IG51bWJlciB9O1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZShpbnB1dDogYW55KTogaW5wdXQgaXMgQXJyYXlMaWtlIHtcbiAgIHJldHVybiAhIShpbnB1dCAmJiB0eXBlb2YgaW5wdXQubGVuZ3RoID09PSAnbnVtYmVyJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0xpbmVzV2l0aENvbnRlbnQoaW5wdXQgPSAnJywgdHJpbW1lZCA9IHRydWUsIHNlcGFyYXRvciA9ICdcXG4nKTogc3RyaW5nW10ge1xuICAgcmV0dXJuIGlucHV0LnNwbGl0KHNlcGFyYXRvcikucmVkdWNlKChvdXRwdXQsIGxpbmUpID0+IHtcbiAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gdHJpbW1lZCA/IGxpbmUudHJpbSgpIDogbGluZTtcbiAgICAgIGlmIChsaW5lQ29udGVudCkge1xuICAgICAgICAgb3V0cHV0LnB1c2gobGluZUNvbnRlbnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgIH0sIFtdIGFzIHN0cmluZ1tdKTtcbn1cblxudHlwZSBMaW5lV2l0aENvbnRlbnRDYWxsYmFjazxUID0gdm9pZD4gPSAobGluZTogc3RyaW5nKSA9PiBUO1xuXG5leHBvcnQgZnVuY3Rpb24gZm9yRWFjaExpbmVXaXRoQ29udGVudDxUPihcbiAgIGlucHV0OiBzdHJpbmcsXG4gICBjYWxsYmFjazogTGluZVdpdGhDb250ZW50Q2FsbGJhY2s8VD5cbik6IFRbXSB7XG4gICByZXR1cm4gdG9MaW5lc1dpdGhDb250ZW50KGlucHV0LCB0cnVlKS5tYXAoKGxpbmUpID0+IGNhbGxiYWNrKGxpbmUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvbGRlckV4aXN0cyhwYXRoOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgIHJldHVybiBleGlzdHMocGF0aCwgRk9MREVSKTtcbn1cblxuLyoqXG4gKiBBZGRzIGBpdGVtYCBpbnRvIHRoZSBgdGFyZ2V0YCBgQXJyYXlgIG9yIGBTZXRgIHdoZW4gaXQgaXMgbm90IGFscmVhZHkgcHJlc2VudCBhbmQgcmV0dXJucyB0aGUgYGl0ZW1gLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kPFQ+KHRhcmdldDogVFtdIHwgU2V0PFQ+LCBpdGVtOiBUKTogdHlwZW9mIGl0ZW0ge1xuICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgaWYgKCF0YXJnZXQuaW5jbHVkZXMoaXRlbSkpIHtcbiAgICAgICAgIHRhcmdldC5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldC5hZGQoaXRlbSk7XG4gICB9XG4gICByZXR1cm4gaXRlbTtcbn1cblxuLyoqXG4gKiBBZGRzIGBpdGVtYCBpbnRvIHRoZSBgdGFyZ2V0YCBgQXJyYXlgIHdoZW4gaXQgaXMgbm90IGFscmVhZHkgcHJlc2VudCBhbmQgcmV0dXJucyB0aGUgYHRhcmdldGAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbmNsdWRpbmc8VD4odGFyZ2V0OiBUW10sIGl0ZW06IFQpOiB0eXBlb2YgdGFyZ2V0IHtcbiAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgIXRhcmdldC5pbmNsdWRlcyhpdGVtKSkge1xuICAgICAgdGFyZ2V0LnB1c2goaXRlbSk7XG4gICB9XG5cbiAgIHJldHVybiB0YXJnZXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmU8VD4odGFyZ2V0OiBTZXQ8VD4gfCBUW10sIGl0ZW06IFQpOiBUIHtcbiAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gdGFyZ2V0LmluZGV4T2YoaXRlbSk7XG4gICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgdGFyZ2V0LnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9XG4gICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0LmRlbGV0ZShpdGVtKTtcbiAgIH1cbiAgIHJldHVybiBpdGVtO1xufVxuXG5leHBvcnQgY29uc3Qgb2JqZWN0VG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKSBhcyAoXG4gICBpbnB1dDogYW55XG4pID0+IHN0cmluZztcblxuZXhwb3J0IGZ1bmN0aW9uIGFzQXJyYXk8VD4oc291cmNlOiBUIHwgVFtdKTogVFtdIHtcbiAgIHJldHVybiBBcnJheS5pc0FycmF5KHNvdXJjZSkgPyBzb3VyY2UgOiBbc291cmNlXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzQ2FtZWxDYXNlKHN0cjogc3RyaW5nKSB7XG4gICByZXR1cm4gc3RyLnJlcGxhY2UoL1tcXHMtXSsoLikvZywgKF9hbGwsIGNocikgPT4ge1xuICAgICAgcmV0dXJuIGNoci50b1VwcGVyQ2FzZSgpO1xuICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc1N0cmluZ0FycmF5PFQ+KHNvdXJjZTogVCB8IFRbXSk6IHN0cmluZ1tdIHtcbiAgIHJldHVybiBhc0FycmF5KHNvdXJjZSkubWFwKFN0cmluZyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc051bWJlcihzb3VyY2U6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQsIG9uTmFOID0gMCkge1xuICAgaWYgKHNvdXJjZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gb25OYU47XG4gICB9XG5cbiAgIGNvbnN0IG51bSA9IHBhcnNlSW50KHNvdXJjZSwgMTApO1xuICAgcmV0dXJuIGlzTmFOKG51bSkgPyBvbk5hTiA6IG51bTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZWZpeGVkQXJyYXk8VD4oaW5wdXQ6IFRbXSwgcHJlZml4OiBUKTogVFtdIHtcbiAgIGNvbnN0IG91dHB1dDogVFtdID0gW107XG4gICBmb3IgKGxldCBpID0gMCwgbWF4ID0gaW5wdXQubGVuZ3RoOyBpIDwgbWF4OyBpKyspIHtcbiAgICAgIG91dHB1dC5wdXNoKHByZWZpeCwgaW5wdXRbaV0pO1xuICAgfVxuICAgcmV0dXJuIG91dHB1dDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJ1ZmZlclRvU3RyaW5nKGlucHV0OiBCdWZmZXIgfCBCdWZmZXJbXSk6IHN0cmluZyB7XG4gICByZXR1cm4gKEFycmF5LmlzQXJyYXkoaW5wdXQpID8gQnVmZmVyLmNvbmNhdChpbnB1dCkgOiBpbnB1dCkudG9TdHJpbmcoJ3V0Zi04Jyk7XG59XG5cbi8qKlxuICogR2V0IGEgbmV3IG9iamVjdCBmcm9tIGEgc291cmNlIG9iamVjdCB3aXRoIG9ubHkgdGhlIGxpc3RlZCBwcm9wZXJ0aWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGljayhzb3VyY2U6IFJlY29yZDxzdHJpbmcsIGFueT4sIHByb3BlcnRpZXM6IHN0cmluZ1tdKSB7XG4gICByZXR1cm4gT2JqZWN0LmFzc2lnbihcbiAgICAgIHt9LFxuICAgICAgLi4ucHJvcGVydGllcy5tYXAoKHByb3BlcnR5KSA9PiAocHJvcGVydHkgaW4gc291cmNlID8geyBbcHJvcGVydHldOiBzb3VyY2VbcHJvcGVydHldIH0gOiB7fSkpXG4gICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVsYXkoZHVyYXRpb24gPSAwKTogUHJvbWlzZTx2b2lkPiB7XG4gICByZXR1cm4gbmV3IFByb21pc2UoKGRvbmUpID0+IHNldFRpbWVvdXQoZG9uZSwgZHVyYXRpb24pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9yVm9pZDxUPihpbnB1dDogVCB8IGZhbHNlKSB7XG4gICBpZiAoaW5wdXQgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgfVxuICAgcmV0dXJuIGlucHV0O1xufVxuIiwgImltcG9ydCB7IE1heWJlLCBPcHRpb25zLCBQcmltaXRpdmVzIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgb2JqZWN0VG9TdHJpbmcgfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHsgaXNQYXRoU3BlYyB9IGZyb20gJy4uL2FyZ3MvcGF0aHNwZWMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFyZ3VtZW50RmlsdGVyUHJlZGljYXRlPFQ+IHtcbiAgIChpbnB1dDogYW55KTogaW5wdXQgaXMgVDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlclR5cGU8VCwgSz4oXG4gICBpbnB1dDogSyxcbiAgIGZpbHRlcjogQXJndW1lbnRGaWx0ZXJQcmVkaWNhdGU8VD5cbik6IEsgZXh0ZW5kcyBUID8gVCA6IHVuZGVmaW5lZDtcbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJUeXBlPFQsIEs+KGlucHV0OiBLLCBmaWx0ZXI6IEFyZ3VtZW50RmlsdGVyUHJlZGljYXRlPFQ+LCBkZWY6IFQpOiBUO1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlclR5cGU8VCwgSz4oaW5wdXQ6IEssIGZpbHRlcjogQXJndW1lbnRGaWx0ZXJQcmVkaWNhdGU8VD4sIGRlZj86IFQpOiBNYXliZTxUPiB7XG4gICBpZiAoZmlsdGVyKGlucHV0KSkge1xuICAgICAgcmV0dXJuIGlucHV0O1xuICAgfVxuICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gZGVmIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgY29uc3QgZmlsdGVyQXJyYXk6IEFyZ3VtZW50RmlsdGVyUHJlZGljYXRlPEFycmF5PGFueT4+ID0gKGlucHV0KTogaW5wdXQgaXMgQXJyYXk8YW55PiA9PiB7XG4gICByZXR1cm4gQXJyYXkuaXNBcnJheShpbnB1dCk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyUHJpbWl0aXZlcyhcbiAgIGlucHV0OiB1bmtub3duLFxuICAgb21pdD86IEFycmF5PCdib29sZWFuJyB8ICdzdHJpbmcnIHwgJ251bWJlcic+XG4pOiBpbnB1dCBpcyBQcmltaXRpdmVzIHtcbiAgIGNvbnN0IHR5cGUgPSBpc1BhdGhTcGVjKGlucHV0KSA/ICdzdHJpbmcnIDogdHlwZW9mIGlucHV0O1xuXG4gICByZXR1cm4gKFxuICAgICAgL251bWJlcnxzdHJpbmd8Ym9vbGVhbi8udGVzdCh0eXBlKSAmJlxuICAgICAgKCFvbWl0IHx8ICFvbWl0LmluY2x1ZGVzKHR5cGUgYXMgJ2Jvb2xlYW4nIHwgJ3N0cmluZycgfCAnbnVtYmVyJykpXG4gICApO1xufVxuXG5leHBvcnQgY29uc3QgZmlsdGVyU3RyaW5nOiBBcmd1bWVudEZpbHRlclByZWRpY2F0ZTxzdHJpbmc+ID0gKGlucHV0KTogaW5wdXQgaXMgc3RyaW5nID0+IHtcbiAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnO1xufTtcblxuZXhwb3J0IGNvbnN0IGZpbHRlclN0cmluZ0FycmF5OiBBcmd1bWVudEZpbHRlclByZWRpY2F0ZTxzdHJpbmdbXT4gPSAoaW5wdXQpOiBpbnB1dCBpcyBzdHJpbmdbXSA9PiB7XG4gICByZXR1cm4gQXJyYXkuaXNBcnJheShpbnB1dCkgJiYgaW5wdXQuZXZlcnkoZmlsdGVyU3RyaW5nKTtcbn07XG5cbmV4cG9ydCBjb25zdCBmaWx0ZXJTdHJpbmdPclN0cmluZ0FycmF5OiBBcmd1bWVudEZpbHRlclByZWRpY2F0ZTxzdHJpbmcgfCBzdHJpbmdbXT4gPSAoXG4gICBpbnB1dFxuKTogaW5wdXQgaXMgc3RyaW5nIHwgc3RyaW5nW10gPT4ge1xuICAgcmV0dXJuIGZpbHRlclN0cmluZyhpbnB1dCkgfHwgKEFycmF5LmlzQXJyYXkoaW5wdXQpICYmIGlucHV0LmV2ZXJ5KGZpbHRlclN0cmluZykpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlclBsYWluT2JqZWN0PFQgZXh0ZW5kcyBPcHRpb25zPihpbnB1dDogVCB8IHVua25vd24pOiBpbnB1dCBpcyBUO1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlclBsYWluT2JqZWN0PFQgZXh0ZW5kcyBPYmplY3Q+KGlucHV0OiBUIHwgdW5rbm93bik6IGlucHV0IGlzIFQge1xuICAgcmV0dXJuICEhaW5wdXQgJiYgb2JqZWN0VG9TdHJpbmcoaW5wdXQpID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlckZ1bmN0aW9uKGlucHV0OiB1bmtub3duKTogaW5wdXQgaXMgRnVuY3Rpb24ge1xuICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZXhwb3J0IGNvbnN0IGZpbHRlckhhc0xlbmd0aDogQXJndW1lbnRGaWx0ZXJQcmVkaWNhdGU8eyBsZW5ndGg6IG51bWJlciB9PiA9IChcbiAgIGlucHV0XG4pOiBpbnB1dCBpcyB7IGxlbmd0aDogbnVtYmVyIH0gPT4ge1xuICAgaWYgKGlucHV0ID09IG51bGwgfHwgJ251bWJlcnxib29sZWFufGZ1bmN0aW9uJy5pbmNsdWRlcyh0eXBlb2YgaW5wdXQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICB9XG4gICByZXR1cm4gQXJyYXkuaXNBcnJheShpbnB1dCkgfHwgdHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgaW5wdXQubGVuZ3RoID09PSAnbnVtYmVyJztcbn07XG4iLCAiLyoqXG4gKiBLbm93biBwcm9jZXNzIGV4aXQgY29kZXMgdXNlZCBieSB0aGUgdGFzayBwYXJzZXJzIHRvIGRldGVybWluZSB3aGV0aGVyIGFuIGVycm9yXG4gKiB3YXMgb25lIHRoZXkgY2FuIGF1dG9tYXRpY2FsbHkgaGFuZGxlXG4gKi9cbmV4cG9ydCBlbnVtIEV4aXRDb2RlcyB7XG4gICBTVUNDRVNTLFxuICAgRVJST1IsXG4gICBOT1RfRk9VTkQgPSAtMixcbiAgIFVOQ0xFQU4gPSAxMjgsXG59XG4iLCAiaW1wb3J0IHsgVGFza1Jlc3BvbnNlRm9ybWF0IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgR2l0T3V0cHV0U3RyZWFtczxUIGV4dGVuZHMgVGFza1Jlc3BvbnNlRm9ybWF0ID0gQnVmZmVyPiB7XG4gICBjb25zdHJ1Y3RvcihcbiAgICAgIHB1YmxpYyByZWFkb25seSBzdGRPdXQ6IFQsXG4gICAgICBwdWJsaWMgcmVhZG9ubHkgc3RkRXJyOiBUXG4gICApIHt9XG5cbiAgIGFzU3RyaW5ncygpOiBHaXRPdXRwdXRTdHJlYW1zPHN0cmluZz4ge1xuICAgICAgcmV0dXJuIG5ldyBHaXRPdXRwdXRTdHJlYW1zKHRoaXMuc3RkT3V0LnRvU3RyaW5nKCd1dGY4JyksIHRoaXMuc3RkRXJyLnRvU3RyaW5nKCd1dGY4JykpO1xuICAgfVxufVxuIiwgImV4cG9ydCBjbGFzcyBMaW5lUGFyc2VyPFQ+IHtcbiAgIHByb3RlY3RlZCBtYXRjaGVzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICBwcml2YXRlIF9yZWdFeHA6IFJlZ0V4cFtdO1xuXG4gICBjb25zdHJ1Y3RvcihcbiAgICAgIHJlZ0V4cDogUmVnRXhwIHwgUmVnRXhwW10sXG4gICAgICB1c2VNYXRjaGVzPzogKHRhcmdldDogVCwgbWF0Y2g6IHN0cmluZ1tdKSA9PiBib29sZWFuIHwgdm9pZFxuICAgKSB7XG4gICAgICB0aGlzLl9yZWdFeHAgPSBBcnJheS5pc0FycmF5KHJlZ0V4cCkgPyByZWdFeHAgOiBbcmVnRXhwXTtcbiAgICAgIGlmICh1c2VNYXRjaGVzKSB7XG4gICAgICAgICB0aGlzLnVzZU1hdGNoZXMgPSB1c2VNYXRjaGVzO1xuICAgICAgfVxuICAgfVxuXG4gICBwYXJzZSA9IChsaW5lOiAob2Zmc2V0OiBudW1iZXIpID0+IHN0cmluZyB8IHVuZGVmaW5lZCwgdGFyZ2V0OiBUKTogYm9vbGVhbiA9PiB7XG4gICAgICB0aGlzLnJlc2V0TWF0Y2hlcygpO1xuXG4gICAgICBpZiAoIXRoaXMuX3JlZ0V4cC5ldmVyeSgocmVnLCBpbmRleCkgPT4gdGhpcy5hZGRNYXRjaChyZWcsIGluZGV4LCBsaW5lKGluZGV4KSkpKSB7XG4gICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnVzZU1hdGNoZXModGFyZ2V0LCB0aGlzLnByZXBhcmVNYXRjaGVzKCkpICE9PSBmYWxzZTtcbiAgIH07XG5cbiAgIC8vIEB0cy1pZ25vcmVcbiAgIHByb3RlY3RlZCB1c2VNYXRjaGVzKHRhcmdldDogVCwgbWF0Y2g6IHN0cmluZ1tdKTogYm9vbGVhbiB8IHZvaWQge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBMaW5lUGFyc2VyOnVzZU1hdGNoZXMgbm90IGltcGxlbWVudGVkYCk7XG4gICB9XG5cbiAgIHByb3RlY3RlZCByZXNldE1hdGNoZXMoKSB7XG4gICAgICB0aGlzLm1hdGNoZXMubGVuZ3RoID0gMDtcbiAgIH1cblxuICAgcHJvdGVjdGVkIHByZXBhcmVNYXRjaGVzKCkge1xuICAgICAgcmV0dXJuIHRoaXMubWF0Y2hlcztcbiAgIH1cblxuICAgcHJvdGVjdGVkIGFkZE1hdGNoKHJlZzogUmVnRXhwLCBpbmRleDogbnVtYmVyLCBsaW5lPzogc3RyaW5nKSB7XG4gICAgICBjb25zdCBtYXRjaGVkID0gbGluZSAmJiByZWcuZXhlYyhsaW5lKTtcbiAgICAgIGlmIChtYXRjaGVkKSB7XG4gICAgICAgICB0aGlzLnB1c2hNYXRjaChpbmRleCwgbWF0Y2hlZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhIW1hdGNoZWQ7XG4gICB9XG5cbiAgIHByb3RlY3RlZCBwdXNoTWF0Y2goX2luZGV4OiBudW1iZXIsIG1hdGNoZWQ6IHN0cmluZ1tdKSB7XG4gICAgICB0aGlzLm1hdGNoZXMucHVzaCguLi5tYXRjaGVkLnNsaWNlKDEpKTtcbiAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlbW90ZUxpbmVQYXJzZXI8VD4gZXh0ZW5kcyBMaW5lUGFyc2VyPFQ+IHtcbiAgIHByb3RlY3RlZCBhZGRNYXRjaChyZWc6IFJlZ0V4cCwgaW5kZXg6IG51bWJlciwgbGluZT86IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIC9ecmVtb3RlOlxccy8udGVzdChTdHJpbmcobGluZSkpICYmIHN1cGVyLmFkZE1hdGNoKHJlZywgaW5kZXgsIGxpbmUpO1xuICAgfVxuXG4gICBwcm90ZWN0ZWQgcHVzaE1hdGNoKGluZGV4OiBudW1iZXIsIG1hdGNoZWQ6IHN0cmluZ1tdKSB7XG4gICAgICBpZiAoaW5kZXggPiAwIHx8IG1hdGNoZWQubGVuZ3RoID4gMSkge1xuICAgICAgICAgc3VwZXIucHVzaE1hdGNoKGluZGV4LCBtYXRjaGVkKTtcbiAgICAgIH1cbiAgIH1cbn1cbiIsICJpbXBvcnQgeyBTaW1wbGVHaXRPcHRpb25zIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5jb25zdCBkZWZhdWx0T3B0aW9uczogT21pdDxTaW1wbGVHaXRPcHRpb25zLCAnYmFzZURpcic+ID0ge1xuICAgYmluYXJ5OiAnZ2l0JyxcbiAgIG1heENvbmN1cnJlbnRQcm9jZXNzZXM6IDUsXG4gICBjb25maWc6IFtdLFxuICAgdHJpbW1lZDogZmFsc2UsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VDb25maWcoXG4gICAuLi5vcHRpb25zOiBBcnJheTxQYXJ0aWFsPFNpbXBsZUdpdE9wdGlvbnM+IHwgdW5kZWZpbmVkPlxuKTogU2ltcGxlR2l0T3B0aW9ucyB7XG4gICBjb25zdCBiYXNlRGlyID0gcHJvY2Vzcy5jd2QoKTtcbiAgIGNvbnN0IGNvbmZpZzogU2ltcGxlR2l0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7IGJhc2VEaXIsIC4uLmRlZmF1bHRPcHRpb25zIH0sXG4gICAgICAuLi5vcHRpb25zLmZpbHRlcigobykgPT4gdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIG8pXG4gICApO1xuXG4gICBjb25maWcuYmFzZURpciA9IGNvbmZpZy5iYXNlRGlyIHx8IGJhc2VEaXI7XG4gICBjb25maWcudHJpbW1lZCA9IGNvbmZpZy50cmltbWVkID09PSB0cnVlO1xuXG4gICByZXR1cm4gY29uZmlnO1xufVxuIiwgImltcG9ydCB7XG4gICBmaWx0ZXJBcnJheSxcbiAgIGZpbHRlckZ1bmN0aW9uLFxuICAgZmlsdGVyUGxhaW5PYmplY3QsXG4gICBmaWx0ZXJQcmltaXRpdmVzLFxuICAgZmlsdGVyVHlwZSxcbn0gZnJvbSAnLi9hcmd1bWVudC1maWx0ZXJzJztcbmltcG9ydCB7IGFzRnVuY3Rpb24sIGlzVXNlckZ1bmN0aW9uLCBsYXN0IH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7IE1heWJlLCBPcHRpb25zLCBPcHRpb25zVmFsdWVzIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgaXNQYXRoU3BlYyB9IGZyb20gJy4uL2FyZ3MvcGF0aHNwZWMnO1xuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kVGFza09wdGlvbnM8VCBleHRlbmRzIE9wdGlvbnMgPSBPcHRpb25zPihcbiAgIG9wdGlvbnM6IE1heWJlPFQ+LFxuICAgY29tbWFuZHM6IHN0cmluZ1tdID0gW11cbik6IHN0cmluZ1tdIHtcbiAgIGlmICghZmlsdGVyUGxhaW5PYmplY3Q8T3B0aW9ucz4ob3B0aW9ucykpIHtcbiAgICAgIHJldHVybiBjb21tYW5kcztcbiAgIH1cblxuICAgcmV0dXJuIE9iamVjdC5rZXlzKG9wdGlvbnMpLnJlZHVjZSgoY29tbWFuZHM6IHN0cmluZ1tdLCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgY29uc3QgdmFsdWU6IE9wdGlvbnNWYWx1ZXMgPSBvcHRpb25zW2tleV07XG5cbiAgICAgIGlmIChpc1BhdGhTcGVjKHZhbHVlKSkge1xuICAgICAgICAgY29tbWFuZHMucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGZpbHRlclByaW1pdGl2ZXModmFsdWUsIFsnYm9vbGVhbiddKSkge1xuICAgICAgICAgY29tbWFuZHMucHVzaChrZXkgKyAnPScgKyB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgY29tbWFuZHMucHVzaChrZXkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29tbWFuZHM7XG4gICB9LCBjb21tYW5kcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFpbGluZ09wdGlvbnMoXG4gICBhcmdzOiBJQXJndW1lbnRzLFxuICAgaW5pdGlhbFByaW1pdGl2ZSA9IDAsXG4gICBvYmplY3RPbmx5ID0gZmFsc2Vcbik6IHN0cmluZ1tdIHtcbiAgIGNvbnN0IGNvbW1hbmQ6IHN0cmluZ1tdID0gW107XG5cbiAgIGZvciAobGV0IGkgPSAwLCBtYXggPSBpbml0aWFsUHJpbWl0aXZlIDwgMCA/IGFyZ3MubGVuZ3RoIDogaW5pdGlhbFByaW1pdGl2ZTsgaSA8IG1heDsgaSsrKSB7XG4gICAgICBpZiAoJ3N0cmluZ3xudW1iZXInLmluY2x1ZGVzKHR5cGVvZiBhcmdzW2ldKSkge1xuICAgICAgICAgY29tbWFuZC5wdXNoKFN0cmluZyhhcmdzW2ldKSk7XG4gICAgICB9XG4gICB9XG5cbiAgIGFwcGVuZFRhc2tPcHRpb25zKHRyYWlsaW5nT3B0aW9uc0FyZ3VtZW50KGFyZ3MpLCBjb21tYW5kKTtcbiAgIGlmICghb2JqZWN0T25seSkge1xuICAgICAgY29tbWFuZC5wdXNoKC4uLnRyYWlsaW5nQXJyYXlBcmd1bWVudChhcmdzKSk7XG4gICB9XG5cbiAgIHJldHVybiBjb21tYW5kO1xufVxuXG5mdW5jdGlvbiB0cmFpbGluZ0FycmF5QXJndW1lbnQoYXJnczogSUFyZ3VtZW50cykge1xuICAgY29uc3QgaGFzVHJhaWxpbmdDYWxsYmFjayA9IHR5cGVvZiBsYXN0KGFyZ3MpID09PSAnZnVuY3Rpb24nO1xuICAgcmV0dXJuIGZpbHRlclR5cGUobGFzdChhcmdzLCBoYXNUcmFpbGluZ0NhbGxiYWNrID8gMSA6IDApLCBmaWx0ZXJBcnJheSwgW10pO1xufVxuXG4vKipcbiAqIEdpdmVuIGFueSBudW1iZXIgb2YgYXJndW1lbnRzLCByZXR1cm5zIHRoZSB0cmFpbGluZyBvcHRpb25zIGFyZ3VtZW50LCBpZ25vcmluZyBhIHRyYWlsaW5nIGZ1bmN0aW9uIGFyZ3VtZW50XG4gKiBpZiB0aGVyZSBpcyBvbmUuIFdoZW4gbm90IGZvdW5kLCB0aGUgcmV0dXJuIHZhbHVlIGlzIG51bGwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFpbGluZ09wdGlvbnNBcmd1bWVudChhcmdzOiBJQXJndW1lbnRzKTogTWF5YmU8T3B0aW9ucz4ge1xuICAgY29uc3QgaGFzVHJhaWxpbmdDYWxsYmFjayA9IGZpbHRlckZ1bmN0aW9uKGxhc3QoYXJncykpO1xuICAgcmV0dXJuIGZpbHRlclR5cGUobGFzdChhcmdzLCBoYXNUcmFpbGluZ0NhbGxiYWNrID8gMSA6IDApLCBmaWx0ZXJQbGFpbk9iamVjdCk7XG59XG5cbi8qKlxuICogUmV0dXJucyBlaXRoZXIgdGhlIHNvdXJjZSBhcmd1bWVudCB3aGVuIGl0IGlzIGEgYEZ1bmN0aW9uYCwgb3IgdGhlIGRlZmF1bHRcbiAqIGBOT09QYCBmdW5jdGlvbiBjb25zdGFudFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KFxuICAgYXJnczogdW5rbm93bltdIHwgSUFyZ3VtZW50cyB8IHVua25vd24sXG4gICBpbmNsdWRlTm9vcCA9IHRydWVcbik6IE1heWJlPCguLi5hcmdzOiBhbnlbXSkgPT4gdW5rbm93bj4ge1xuICAgY29uc3QgY2FsbGJhY2sgPSBhc0Z1bmN0aW9uKGxhc3QoYXJncykpO1xuICAgcmV0dXJuIGluY2x1ZGVOb29wIHx8IGlzVXNlckZ1bmN0aW9uKGNhbGxiYWNrKSA/IGNhbGxiYWNrIDogdW5kZWZpbmVkO1xufVxuIiwgImltcG9ydCB0eXBlIHsgTWF5YmVBcnJheSwgVGFza1BhcnNlciwgVGFza1Jlc3BvbnNlRm9ybWF0IH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgR2l0T3V0cHV0U3RyZWFtcyB9IGZyb20gJy4vZ2l0LW91dHB1dC1zdHJlYW1zJztcbmltcG9ydCB7IExpbmVQYXJzZXIgfSBmcm9tICcuL2xpbmUtcGFyc2VyJztcbmltcG9ydCB7IGFzQXJyYXksIHRvTGluZXNXaXRoQ29udGVudCB9IGZyb20gJy4vdXRpbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxsVGFza1BhcnNlcjxJTlBVVCBleHRlbmRzIFRhc2tSZXNwb25zZUZvcm1hdCwgUkVTUE9OU0U+KFxuICAgcGFyc2VyOiBUYXNrUGFyc2VyPElOUFVULCBSRVNQT05TRT4sXG4gICBzdHJlYW1zOiBHaXRPdXRwdXRTdHJlYW1zPElOUFVUPlxuKSB7XG4gICByZXR1cm4gcGFyc2VyKHN0cmVhbXMuc3RkT3V0LCBzdHJlYW1zLnN0ZEVycik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN0cmluZ1Jlc3BvbnNlPFQ+KFxuICAgcmVzdWx0OiBULFxuICAgcGFyc2VyczogTGluZVBhcnNlcjxUPltdLFxuICAgdGV4dHM6IE1heWJlQXJyYXk8c3RyaW5nPixcbiAgIHRyaW0gPSB0cnVlXG4pOiBUIHtcbiAgIGFzQXJyYXkodGV4dHMpLmZvckVhY2goKHRleHQpID0+IHtcbiAgICAgIGZvciAobGV0IGxpbmVzID0gdG9MaW5lc1dpdGhDb250ZW50KHRleHQsIHRyaW0pLCBpID0gMCwgbWF4ID0gbGluZXMubGVuZ3RoOyBpIDwgbWF4OyBpKyspIHtcbiAgICAgICAgIGNvbnN0IGxpbmUgPSAob2Zmc2V0ID0gMCkgPT4ge1xuICAgICAgICAgICAgaWYgKGkgKyBvZmZzZXQgPj0gbWF4KSB7XG4gICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbGluZXNbaSArIG9mZnNldF07XG4gICAgICAgICB9O1xuXG4gICAgICAgICBwYXJzZXJzLnNvbWUoKHsgcGFyc2UgfSkgPT4gcGFyc2UobGluZSwgcmVzdWx0KSk7XG4gICAgICB9XG4gICB9KTtcblxuICAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsICJleHBvcnQgKiBmcm9tICcuL2FyZ3VtZW50LWZpbHRlcnMnO1xuZXhwb3J0ICogZnJvbSAnLi9leGl0LWNvZGVzJztcbmV4cG9ydCAqIGZyb20gJy4vZ2l0LW91dHB1dC1zdHJlYW1zJztcbmV4cG9ydCAqIGZyb20gJy4vbGluZS1wYXJzZXInO1xuZXhwb3J0ICogZnJvbSAnLi9zaW1wbGUtZ2l0LW9wdGlvbnMnO1xuZXhwb3J0ICogZnJvbSAnLi90YXNrLW9wdGlvbnMnO1xuZXhwb3J0ICogZnJvbSAnLi90YXNrLXBhcnNlcic7XG5leHBvcnQgKiBmcm9tICcuL3V0aWwnO1xuIiwgImltcG9ydCB7IEV4aXRDb2RlcyB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IE1heWJlLCBTdHJpbmdUYXNrIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZW51bSBDaGVja1JlcG9BY3Rpb25zIHtcbiAgIEJBUkUgPSAnYmFyZScsXG4gICBJTl9UUkVFID0gJ3RyZWUnLFxuICAgSVNfUkVQT19ST09UID0gJ3Jvb3QnLFxufVxuXG5jb25zdCBvbkVycm9yOiBTdHJpbmdUYXNrPGJvb2xlYW4+WydvbkVycm9yJ10gPSAoeyBleGl0Q29kZSB9LCBlcnJvciwgZG9uZSwgZmFpbCkgPT4ge1xuICAgaWYgKGV4aXRDb2RlID09PSBFeGl0Q29kZXMuVU5DTEVBTiAmJiBpc05vdFJlcG9NZXNzYWdlKGVycm9yKSkge1xuICAgICAgcmV0dXJuIGRvbmUoQnVmZmVyLmZyb20oJ2ZhbHNlJykpO1xuICAgfVxuXG4gICBmYWlsKGVycm9yKTtcbn07XG5cbmNvbnN0IHBhcnNlcjogU3RyaW5nVGFzazxib29sZWFuPlsncGFyc2VyJ10gPSAodGV4dCkgPT4ge1xuICAgcmV0dXJuIHRleHQudHJpbSgpID09PSAndHJ1ZSc7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tJc1JlcG9UYXNrKGFjdGlvbjogTWF5YmU8Q2hlY2tSZXBvQWN0aW9ucz4pOiBTdHJpbmdUYXNrPGJvb2xlYW4+IHtcbiAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICBjYXNlIENoZWNrUmVwb0FjdGlvbnMuQkFSRTpcbiAgICAgICAgIHJldHVybiBjaGVja0lzQmFyZVJlcG9UYXNrKCk7XG4gICAgICBjYXNlIENoZWNrUmVwb0FjdGlvbnMuSVNfUkVQT19ST09UOlxuICAgICAgICAgcmV0dXJuIGNoZWNrSXNSZXBvUm9vdFRhc2soKTtcbiAgIH1cblxuICAgY29uc3QgY29tbWFuZHMgPSBbJ3Jldi1wYXJzZScsICctLWlzLWluc2lkZS13b3JrLXRyZWUnXTtcblxuICAgcmV0dXJuIHtcbiAgICAgIGNvbW1hbmRzLFxuICAgICAgZm9ybWF0OiAndXRmLTgnLFxuICAgICAgb25FcnJvcixcbiAgICAgIHBhcnNlcixcbiAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0lzUmVwb1Jvb3RUYXNrKCk6IFN0cmluZ1Rhc2s8Ym9vbGVhbj4ge1xuICAgY29uc3QgY29tbWFuZHMgPSBbJ3Jldi1wYXJzZScsICctLWdpdC1kaXInXTtcblxuICAgcmV0dXJuIHtcbiAgICAgIGNvbW1hbmRzLFxuICAgICAgZm9ybWF0OiAndXRmLTgnLFxuICAgICAgb25FcnJvcixcbiAgICAgIHBhcnNlcihwYXRoKSB7XG4gICAgICAgICByZXR1cm4gL15cXC4oZ2l0KT8kLy50ZXN0KHBhdGgudHJpbSgpKTtcbiAgICAgIH0sXG4gICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tJc0JhcmVSZXBvVGFzaygpOiBTdHJpbmdUYXNrPGJvb2xlYW4+IHtcbiAgIGNvbnN0IGNvbW1hbmRzID0gWydyZXYtcGFyc2UnLCAnLS1pcy1iYXJlLXJlcG9zaXRvcnknXTtcblxuICAgcmV0dXJuIHtcbiAgICAgIGNvbW1hbmRzLFxuICAgICAgZm9ybWF0OiAndXRmLTgnLFxuICAgICAgb25FcnJvcixcbiAgICAgIHBhcnNlcixcbiAgIH07XG59XG5cbmZ1bmN0aW9uIGlzTm90UmVwb01lc3NhZ2UoZXJyb3I6IEVycm9yKTogYm9vbGVhbiB7XG4gICByZXR1cm4gLyhOb3QgYSBnaXQgcmVwb3NpdG9yeXxLZWluIEdpdC1SZXBvc2l0b3J5KS9pLnRlc3QoU3RyaW5nKGVycm9yKSk7XG59XG4iLCAiaW1wb3J0IHsgQ2xlYW5TdW1tYXJ5IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyB0b0xpbmVzV2l0aENvbnRlbnQgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBjbGFzcyBDbGVhblJlc3BvbnNlIGltcGxlbWVudHMgQ2xlYW5TdW1tYXJ5IHtcbiAgIHB1YmxpYyBwYXRoczogc3RyaW5nW10gPSBbXTtcbiAgIHB1YmxpYyBmaWxlczogc3RyaW5nW10gPSBbXTtcbiAgIHB1YmxpYyBmb2xkZXJzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgZHJ5UnVuOiBib29sZWFuKSB7fVxufVxuXG5jb25zdCByZW1vdmFsUmVnZXhwID0gL15bYS16XStcXHMqL2k7XG5jb25zdCBkcnlSdW5SZW1vdmFsUmVnZXhwID0gL15bYS16XStcXHMrW2Etel0rXFxzKi9pO1xuY29uc3QgaXNGb2xkZXJSZWdleHAgPSAvXFwvJC87XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhblN1bW1hcnlQYXJzZXIoZHJ5UnVuOiBib29sZWFuLCB0ZXh0OiBzdHJpbmcpOiBDbGVhblN1bW1hcnkge1xuICAgY29uc3Qgc3VtbWFyeSA9IG5ldyBDbGVhblJlc3BvbnNlKGRyeVJ1bik7XG4gICBjb25zdCByZWdleHAgPSBkcnlSdW4gPyBkcnlSdW5SZW1vdmFsUmVnZXhwIDogcmVtb3ZhbFJlZ2V4cDtcblxuICAgdG9MaW5lc1dpdGhDb250ZW50KHRleHQpLmZvckVhY2goKGxpbmUpID0+IHtcbiAgICAgIGNvbnN0IHJlbW92ZWQgPSBsaW5lLnJlcGxhY2UocmVnZXhwLCAnJyk7XG5cbiAgICAgIHN1bW1hcnkucGF0aHMucHVzaChyZW1vdmVkKTtcbiAgICAgIChpc0ZvbGRlclJlZ2V4cC50ZXN0KHJlbW92ZWQpID8gc3VtbWFyeS5mb2xkZXJzIDogc3VtbWFyeS5maWxlcykucHVzaChyZW1vdmVkKTtcbiAgIH0pO1xuXG4gICByZXR1cm4gc3VtbWFyeTtcbn1cbiIsICJpbXBvcnQgeyBUYXNrQ29uZmlndXJhdGlvbkVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL3Rhc2stY29uZmlndXJhdGlvbi1lcnJvcic7XG5pbXBvcnQgdHlwZSB7IEJ1ZmZlclRhc2ssIEVtcHR5VGFza1BhcnNlciwgU2ltcGxlR2l0VGFzaywgU3RyaW5nVGFzayB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IEVNUFRZX0NPTU1BTkRTOiBbXSA9IFtdO1xuXG5leHBvcnQgdHlwZSBFbXB0eVRhc2sgPSB7XG4gICBjb21tYW5kczogdHlwZW9mIEVNUFRZX0NPTU1BTkRTO1xuICAgZm9ybWF0OiAnZW1wdHknO1xuICAgcGFyc2VyOiBFbXB0eVRhc2tQYXJzZXI7XG4gICBvbkVycm9yPzogdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFkaG9jRXhlY1Rhc2socGFyc2VyOiBFbXB0eVRhc2tQYXJzZXIpOiBFbXB0eVRhc2sge1xuICAgcmV0dXJuIHtcbiAgICAgIGNvbW1hbmRzOiBFTVBUWV9DT01NQU5EUyxcbiAgICAgIGZvcm1hdDogJ2VtcHR5JyxcbiAgICAgIHBhcnNlcixcbiAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmF0aW9uRXJyb3JUYXNrKGVycm9yOiBFcnJvciB8IHN0cmluZyk6IEVtcHR5VGFzayB7XG4gICByZXR1cm4ge1xuICAgICAgY29tbWFuZHM6IEVNUFRZX0NPTU1BTkRTLFxuICAgICAgZm9ybWF0OiAnZW1wdHknLFxuICAgICAgcGFyc2VyKCkge1xuICAgICAgICAgdGhyb3cgdHlwZW9mIGVycm9yID09PSAnc3RyaW5nJyA/IG5ldyBUYXNrQ29uZmlndXJhdGlvbkVycm9yKGVycm9yKSA6IGVycm9yO1xuICAgICAgfSxcbiAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKGNvbW1hbmRzOiBzdHJpbmdbXSwgdHJpbW1lZCA9IGZhbHNlKTogU3RyaW5nVGFzazxzdHJpbmc+IHtcbiAgIHJldHVybiB7XG4gICAgICBjb21tYW5kcyxcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIHBhcnNlcih0ZXh0KSB7XG4gICAgICAgICByZXR1cm4gdHJpbW1lZCA/IFN0cmluZyh0ZXh0KS50cmltKCkgOiB0ZXh0O1xuICAgICAgfSxcbiAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJhaWdodFRocm91Z2hCdWZmZXJUYXNrKGNvbW1hbmRzOiBzdHJpbmdbXSk6IEJ1ZmZlclRhc2s8YW55PiB7XG4gICByZXR1cm4ge1xuICAgICAgY29tbWFuZHMsXG4gICAgICBmb3JtYXQ6ICdidWZmZXInLFxuICAgICAgcGFyc2VyKGJ1ZmZlcikge1xuICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICAgIH0sXG4gICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCdWZmZXJUYXNrPFI+KHRhc2s6IFNpbXBsZUdpdFRhc2s8Uj4pOiB0YXNrIGlzIEJ1ZmZlclRhc2s8Uj4ge1xuICAgcmV0dXJuIHRhc2suZm9ybWF0ID09PSAnYnVmZmVyJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHlUYXNrPFI+KHRhc2s6IFNpbXBsZUdpdFRhc2s8Uj4pOiB0YXNrIGlzIEVtcHR5VGFzayB7XG4gICByZXR1cm4gdGFzay5mb3JtYXQgPT09ICdlbXB0eScgfHwgIXRhc2suY29tbWFuZHMubGVuZ3RoO1xufVxuIiwgImltcG9ydCB7IENsZWFuU3VtbWFyeSB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuaW1wb3J0IHsgY2xlYW5TdW1tYXJ5UGFyc2VyIH0gZnJvbSAnLi4vcmVzcG9uc2VzL0NsZWFuU3VtbWFyeSc7XG5pbXBvcnQgeyBNYXliZSwgU3RyaW5nVGFzayB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGFzU3RyaW5nQXJyYXkgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBjb25maWd1cmF0aW9uRXJyb3JUYXNrIH0gZnJvbSAnLi90YXNrJztcblxuZXhwb3J0IGNvbnN0IENPTkZJR19FUlJPUl9JTlRFUkFDVElWRV9NT0RFID0gJ0dpdCBjbGVhbiBpbnRlcmFjdGl2ZSBtb2RlIGlzIG5vdCBzdXBwb3J0ZWQnO1xuZXhwb3J0IGNvbnN0IENPTkZJR19FUlJPUl9NT0RFX1JFUVVJUkVEID0gJ0dpdCBjbGVhbiBtb2RlIHBhcmFtZXRlciAoXCJuXCIgb3IgXCJmXCIpIGlzIHJlcXVpcmVkJztcbmV4cG9ydCBjb25zdCBDT05GSUdfRVJST1JfVU5LTk9XTl9PUFRJT04gPSAnR2l0IGNsZWFuIHVua25vd24gb3B0aW9uIGZvdW5kIGluOiAnO1xuXG4vKipcbiAqIEFsbCBzdXBwb3J0ZWQgb3B0aW9uIHN3aXRjaGVzIGF2YWlsYWJsZSBmb3IgdXNlIGluIGEgYGdpdC5jbGVhbmAgb3BlcmF0aW9uXG4gKi9cbmV4cG9ydCBlbnVtIENsZWFuT3B0aW9ucyB7XG4gICBEUllfUlVOID0gJ24nLFxuICAgRk9SQ0UgPSAnZicsXG4gICBJR05PUkVEX0lOQ0xVREVEID0gJ3gnLFxuICAgSUdOT1JFRF9PTkxZID0gJ1gnLFxuICAgRVhDTFVESU5HID0gJ2UnLFxuICAgUVVJRVQgPSAncScsXG4gICBSRUNVUlNJVkUgPSAnZCcsXG59XG5cbi8qKlxuICogVGhlIHR3byBtb2RlcyBgZ2l0LmNsZWFuYCBjYW4gcnVuIGluIC0gb25lIG9mIHRoZXNlIG11c3QgYmUgc3VwcGxpZWQgaW4gb3JkZXJcbiAqIGZvciB0aGUgY29tbWFuZCB0byBub3QgdGhyb3cgYSBgVGFza0NvbmZpZ3VyYXRpb25FcnJvcmBcbiAqL1xuZXhwb3J0IHR5cGUgQ2xlYW5Nb2RlID0gQ2xlYW5PcHRpb25zLkZPUkNFIHwgQ2xlYW5PcHRpb25zLkRSWV9SVU47XG5cbmNvbnN0IENsZWFuT3B0aW9uVmFsdWVzOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoW1xuICAgJ2knLFxuICAgLi4uYXNTdHJpbmdBcnJheShPYmplY3QudmFsdWVzKENsZWFuT3B0aW9ucyBhcyBhbnkpKSxcbl0pO1xuXG5leHBvcnQgZnVuY3Rpb24gY2xlYW5XaXRoT3B0aW9uc1Rhc2sobW9kZTogQ2xlYW5Nb2RlIHwgc3RyaW5nLCBjdXN0b21BcmdzOiBzdHJpbmdbXSkge1xuICAgY29uc3QgeyBjbGVhbk1vZGUsIG9wdGlvbnMsIHZhbGlkIH0gPSBnZXRDbGVhbk9wdGlvbnMobW9kZSk7XG5cbiAgIGlmICghY2xlYW5Nb2RlKSB7XG4gICAgICByZXR1cm4gY29uZmlndXJhdGlvbkVycm9yVGFzayhDT05GSUdfRVJST1JfTU9ERV9SRVFVSVJFRCk7XG4gICB9XG5cbiAgIGlmICghdmFsaWQub3B0aW9ucykge1xuICAgICAgcmV0dXJuIGNvbmZpZ3VyYXRpb25FcnJvclRhc2soQ09ORklHX0VSUk9SX1VOS05PV05fT1BUSU9OICsgSlNPTi5zdHJpbmdpZnkobW9kZSkpO1xuICAgfVxuXG4gICBvcHRpb25zLnB1c2goLi4uY3VzdG9tQXJncyk7XG5cbiAgIGlmIChvcHRpb25zLnNvbWUoaXNJbnRlcmFjdGl2ZU1vZGUpKSB7XG4gICAgICByZXR1cm4gY29uZmlndXJhdGlvbkVycm9yVGFzayhDT05GSUdfRVJST1JfSU5URVJBQ1RJVkVfTU9ERSk7XG4gICB9XG5cbiAgIHJldHVybiBjbGVhblRhc2soY2xlYW5Nb2RlLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFuVGFzayhtb2RlOiBDbGVhbk1vZGUsIGN1c3RvbUFyZ3M6IHN0cmluZ1tdKTogU3RyaW5nVGFzazxDbGVhblN1bW1hcnk+IHtcbiAgIGNvbnN0IGNvbW1hbmRzOiBzdHJpbmdbXSA9IFsnY2xlYW4nLCBgLSR7bW9kZX1gLCAuLi5jdXN0b21BcmdzXTtcblxuICAgcmV0dXJuIHtcbiAgICAgIGNvbW1hbmRzLFxuICAgICAgZm9ybWF0OiAndXRmLTgnLFxuICAgICAgcGFyc2VyKHRleHQ6IHN0cmluZyk6IENsZWFuU3VtbWFyeSB7XG4gICAgICAgICByZXR1cm4gY2xlYW5TdW1tYXJ5UGFyc2VyKG1vZGUgPT09IENsZWFuT3B0aW9ucy5EUllfUlVOLCB0ZXh0KTtcbiAgICAgIH0sXG4gICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDbGVhbk9wdGlvbnNBcnJheShpbnB1dDogc3RyaW5nW10pOiBpbnB1dCBpcyBDbGVhbk9wdGlvbnNbXSB7XG4gICByZXR1cm4gQXJyYXkuaXNBcnJheShpbnB1dCkgJiYgaW5wdXQuZXZlcnkoKHRlc3QpID0+IENsZWFuT3B0aW9uVmFsdWVzLmhhcyh0ZXN0KSk7XG59XG5cbmZ1bmN0aW9uIGdldENsZWFuT3B0aW9ucyhpbnB1dDogc3RyaW5nKSB7XG4gICBsZXQgY2xlYW5Nb2RlOiBNYXliZTxDbGVhbk1vZGU+O1xuICAgbGV0IG9wdGlvbnM6IHN0cmluZ1tdID0gW107XG4gICBsZXQgdmFsaWQgPSB7IGNsZWFuTW9kZTogZmFsc2UsIG9wdGlvbnM6IHRydWUgfTtcblxuICAgaW5wdXRcbiAgICAgIC5yZXBsYWNlKC9bXmEtel1pL2csICcnKVxuICAgICAgLnNwbGl0KCcnKVxuICAgICAgLmZvckVhY2goKGNoYXIpID0+IHtcbiAgICAgICAgIGlmIChpc0NsZWFuTW9kZShjaGFyKSkge1xuICAgICAgICAgICAgY2xlYW5Nb2RlID0gY2hhcjtcbiAgICAgICAgICAgIHZhbGlkLmNsZWFuTW9kZSA9IHRydWU7XG4gICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsaWQub3B0aW9ucyA9IHZhbGlkLm9wdGlvbnMgJiYgaXNLbm93bk9wdGlvbigob3B0aW9uc1tvcHRpb25zLmxlbmd0aF0gPSBgLSR7Y2hhcn1gKSk7XG4gICAgICAgICB9XG4gICAgICB9KTtcblxuICAgcmV0dXJuIHtcbiAgICAgIGNsZWFuTW9kZSxcbiAgICAgIG9wdGlvbnMsXG4gICAgICB2YWxpZCxcbiAgIH07XG59XG5cbmZ1bmN0aW9uIGlzQ2xlYW5Nb2RlKGNsZWFuTW9kZT86IHN0cmluZyk6IGNsZWFuTW9kZSBpcyBDbGVhbk1vZGUge1xuICAgcmV0dXJuIGNsZWFuTW9kZSA9PT0gQ2xlYW5PcHRpb25zLkZPUkNFIHx8IGNsZWFuTW9kZSA9PT0gQ2xlYW5PcHRpb25zLkRSWV9SVU47XG59XG5cbmZ1bmN0aW9uIGlzS25vd25PcHRpb24ob3B0aW9uOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgIHJldHVybiAvXi1bYS16XSQvaS50ZXN0KG9wdGlvbikgJiYgQ2xlYW5PcHRpb25WYWx1ZXMuaGFzKG9wdGlvbi5jaGFyQXQoMSkpO1xufVxuXG5mdW5jdGlvbiBpc0ludGVyYWN0aXZlTW9kZShvcHRpb246IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgaWYgKC9eLVteXFwtXS8udGVzdChvcHRpb24pKSB7XG4gICAgICByZXR1cm4gb3B0aW9uLmluZGV4T2YoJ2knKSA+IDA7XG4gICB9XG5cbiAgIHJldHVybiBvcHRpb24gPT09ICctLWludGVyYWN0aXZlJztcbn1cbiIsICJpbXBvcnQgeyBDb25maWdHZXRSZXN1bHQsIENvbmZpZ0xpc3RTdW1tYXJ5LCBDb25maWdWYWx1ZXMgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IGxhc3QsIHNwbGl0T24gfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBjbGFzcyBDb25maWdMaXN0IGltcGxlbWVudHMgQ29uZmlnTGlzdFN1bW1hcnkge1xuICAgcHVibGljIGZpbGVzOiBzdHJpbmdbXSA9IFtdO1xuICAgcHVibGljIHZhbHVlczogeyBbZmlsZU5hbWU6IHN0cmluZ106IENvbmZpZ1ZhbHVlcyB9ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgcHJpdmF0ZSBfYWxsOiBDb25maWdWYWx1ZXMgfCB1bmRlZmluZWQ7XG5cbiAgIHB1YmxpYyBnZXQgYWxsKCk6IENvbmZpZ1ZhbHVlcyB7XG4gICAgICBpZiAoIXRoaXMuX2FsbCkge1xuICAgICAgICAgdGhpcy5fYWxsID0gdGhpcy5maWxlcy5yZWR1Y2UoKGFsbDogQ29uZmlnVmFsdWVzLCBmaWxlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGFsbCwgdGhpcy52YWx1ZXNbZmlsZV0pO1xuICAgICAgICAgfSwge30pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fYWxsO1xuICAgfVxuXG4gICBwdWJsaWMgYWRkRmlsZShmaWxlOiBzdHJpbmcpOiBDb25maWdWYWx1ZXMge1xuICAgICAgaWYgKCEoZmlsZSBpbiB0aGlzLnZhbHVlcykpIHtcbiAgICAgICAgIGNvbnN0IGxhdGVzdCA9IGxhc3QodGhpcy5maWxlcyk7XG4gICAgICAgICB0aGlzLnZhbHVlc1tmaWxlXSA9IGxhdGVzdCA/IE9iamVjdC5jcmVhdGUodGhpcy52YWx1ZXNbbGF0ZXN0XSkgOiB7fTtcblxuICAgICAgICAgdGhpcy5maWxlcy5wdXNoKGZpbGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy52YWx1ZXNbZmlsZV07XG4gICB9XG5cbiAgIHB1YmxpYyBhZGRWYWx1ZShmaWxlOiBzdHJpbmcsIGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLmFkZEZpbGUoZmlsZSk7XG5cbiAgICAgIGlmICghdmFsdWVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgIHZhbHVlc1trZXldID0gdmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVzW2tleV0pKSB7XG4gICAgICAgICAodmFsdWVzW2tleV0gYXMgc3RyaW5nW10pLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgIHZhbHVlc1trZXldID0gW3ZhbHVlc1trZXldIGFzIHN0cmluZywgdmFsdWVdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9hbGwgPSB1bmRlZmluZWQ7XG4gICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25maWdMaXN0UGFyc2VyKHRleHQ6IHN0cmluZyk6IENvbmZpZ0xpc3Qge1xuICAgY29uc3QgY29uZmlnID0gbmV3IENvbmZpZ0xpc3QoKTtcblxuICAgZm9yIChjb25zdCBpdGVtIG9mIGNvbmZpZ1BhcnNlcih0ZXh0KSkge1xuICAgICAgY29uZmlnLmFkZFZhbHVlKGl0ZW0uZmlsZSwgU3RyaW5nKGl0ZW0ua2V5KSwgaXRlbS52YWx1ZSk7XG4gICB9XG5cbiAgIHJldHVybiBjb25maWc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25maWdHZXRQYXJzZXIodGV4dDogc3RyaW5nLCBrZXk6IHN0cmluZyk6IENvbmZpZ0dldFJlc3VsdCB7XG4gICBsZXQgdmFsdWU6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICAgY29uc3QgdmFsdWVzOiBzdHJpbmdbXSA9IFtdO1xuICAgY29uc3Qgc2NvcGVzOiBNYXA8c3RyaW5nLCBzdHJpbmdbXT4gPSBuZXcgTWFwKCk7XG5cbiAgIGZvciAoY29uc3QgaXRlbSBvZiBjb25maWdQYXJzZXIodGV4dCwga2V5KSkge1xuICAgICAgaWYgKGl0ZW0ua2V5ICE9PSBrZXkpIHtcbiAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZXMucHVzaCgodmFsdWUgPSBpdGVtLnZhbHVlKSk7XG5cbiAgICAgIGlmICghc2NvcGVzLmhhcyhpdGVtLmZpbGUpKSB7XG4gICAgICAgICBzY29wZXMuc2V0KGl0ZW0uZmlsZSwgW10pO1xuICAgICAgfVxuXG4gICAgICBzY29wZXMuZ2V0KGl0ZW0uZmlsZSkhLnB1c2godmFsdWUpO1xuICAgfVxuXG4gICByZXR1cm4ge1xuICAgICAga2V5LFxuICAgICAgcGF0aHM6IEFycmF5LmZyb20oc2NvcGVzLmtleXMoKSksXG4gICAgICBzY29wZXMsXG4gICAgICB2YWx1ZSxcbiAgICAgIHZhbHVlcyxcbiAgIH07XG59XG5cbmZ1bmN0aW9uIGNvbmZpZ0ZpbGVQYXRoKGZpbGVQYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgcmV0dXJuIGZpbGVQYXRoLnJlcGxhY2UoL14oZmlsZSk6LywgJycpO1xufVxuXG5mdW5jdGlvbiogY29uZmlnUGFyc2VyKHRleHQ6IHN0cmluZywgcmVxdWVzdGVkS2V5OiBzdHJpbmcgfCBudWxsID0gbnVsbCkge1xuICAgY29uc3QgbGluZXMgPSB0ZXh0LnNwbGl0KCdcXDAnKTtcblxuICAgZm9yIChsZXQgaSA9IDAsIG1heCA9IGxpbmVzLmxlbmd0aCAtIDE7IGkgPCBtYXg7ICkge1xuICAgICAgY29uc3QgZmlsZSA9IGNvbmZpZ0ZpbGVQYXRoKGxpbmVzW2krK10pO1xuXG4gICAgICBsZXQgdmFsdWUgPSBsaW5lc1tpKytdO1xuICAgICAgbGV0IGtleSA9IHJlcXVlc3RlZEtleTtcblxuICAgICAgaWYgKHZhbHVlLmluY2x1ZGVzKCdcXG4nKSkge1xuICAgICAgICAgY29uc3QgbGluZSA9IHNwbGl0T24odmFsdWUsICdcXG4nKTtcbiAgICAgICAgIGtleSA9IGxpbmVbMF07XG4gICAgICAgICB2YWx1ZSA9IGxpbmVbMV07XG4gICAgICB9XG5cbiAgICAgIHlpZWxkIHsgZmlsZSwga2V5LCB2YWx1ZSB9O1xuICAgfVxufVxuIiwgImltcG9ydCB0eXBlIHsgQ29uZmlnR2V0UmVzdWx0LCBDb25maWdMaXN0U3VtbWFyeSwgU2ltcGxlR2l0IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBjb25maWdHZXRQYXJzZXIsIGNvbmZpZ0xpc3RQYXJzZXIgfSBmcm9tICcuLi9yZXNwb25zZXMvQ29uZmlnTGlzdCc7XG5pbXBvcnQgdHlwZSB7IFNpbXBsZUdpdEFwaSB9IGZyb20gJy4uL3NpbXBsZS1naXQtYXBpJztcbmltcG9ydCB0eXBlIHsgU3RyaW5nVGFzayB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudCB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGVudW0gR2l0Q29uZmlnU2NvcGUge1xuICAgc3lzdGVtID0gJ3N5c3RlbScsXG4gICBnbG9iYWwgPSAnZ2xvYmFsJyxcbiAgIGxvY2FsID0gJ2xvY2FsJyxcbiAgIHdvcmt0cmVlID0gJ3dvcmt0cmVlJyxcbn1cblxuZnVuY3Rpb24gYXNDb25maWdTY29wZTxUIGV4dGVuZHMgR2l0Q29uZmlnU2NvcGUgfCB1bmRlZmluZWQ+KFxuICAgc2NvcGU6IEdpdENvbmZpZ1Njb3BlIHwgdW5rbm93bixcbiAgIGZhbGxiYWNrOiBUXG4pOiBHaXRDb25maWdTY29wZSB8IFQge1xuICAgaWYgKHR5cGVvZiBzY29wZSA9PT0gJ3N0cmluZycgJiYgR2l0Q29uZmlnU2NvcGUuaGFzT3duUHJvcGVydHkoc2NvcGUpKSB7XG4gICAgICByZXR1cm4gc2NvcGUgYXMgR2l0Q29uZmlnU2NvcGU7XG4gICB9XG4gICByZXR1cm4gZmFsbGJhY2s7XG59XG5cbmZ1bmN0aW9uIGFkZENvbmZpZ1Rhc2soXG4gICBrZXk6IHN0cmluZyxcbiAgIHZhbHVlOiBzdHJpbmcsXG4gICBhcHBlbmQ6IGJvb2xlYW4sXG4gICBzY29wZTogR2l0Q29uZmlnU2NvcGVcbik6IFN0cmluZ1Rhc2s8c3RyaW5nPiB7XG4gICBjb25zdCBjb21tYW5kczogc3RyaW5nW10gPSBbJ2NvbmZpZycsIGAtLSR7c2NvcGV9YF07XG5cbiAgIGlmIChhcHBlbmQpIHtcbiAgICAgIGNvbW1hbmRzLnB1c2goJy0tYWRkJyk7XG4gICB9XG5cbiAgIGNvbW1hbmRzLnB1c2goa2V5LCB2YWx1ZSk7XG5cbiAgIHJldHVybiB7XG4gICAgICBjb21tYW5kcyxcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIHBhcnNlcih0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgICB9LFxuICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29uZmlnVGFzayhrZXk6IHN0cmluZywgc2NvcGU/OiBHaXRDb25maWdTY29wZSk6IFN0cmluZ1Rhc2s8Q29uZmlnR2V0UmVzdWx0PiB7XG4gICBjb25zdCBjb21tYW5kczogc3RyaW5nW10gPSBbJ2NvbmZpZycsICctLW51bGwnLCAnLS1zaG93LW9yaWdpbicsICctLWdldC1hbGwnLCBrZXldO1xuXG4gICBpZiAoc2NvcGUpIHtcbiAgICAgIGNvbW1hbmRzLnNwbGljZSgxLCAwLCBgLS0ke3Njb3BlfWApO1xuICAgfVxuXG4gICByZXR1cm4ge1xuICAgICAgY29tbWFuZHMsXG4gICAgICBmb3JtYXQ6ICd1dGYtOCcsXG4gICAgICBwYXJzZXIodGV4dCkge1xuICAgICAgICAgcmV0dXJuIGNvbmZpZ0dldFBhcnNlcih0ZXh0LCBrZXkpO1xuICAgICAgfSxcbiAgIH07XG59XG5cbmZ1bmN0aW9uIGxpc3RDb25maWdUYXNrKHNjb3BlPzogR2l0Q29uZmlnU2NvcGUpOiBTdHJpbmdUYXNrPENvbmZpZ0xpc3RTdW1tYXJ5PiB7XG4gICBjb25zdCBjb21tYW5kcyA9IFsnY29uZmlnJywgJy0tbGlzdCcsICctLXNob3ctb3JpZ2luJywgJy0tbnVsbCddO1xuXG4gICBpZiAoc2NvcGUpIHtcbiAgICAgIGNvbW1hbmRzLnB1c2goYC0tJHtzY29wZX1gKTtcbiAgIH1cblxuICAgcmV0dXJuIHtcbiAgICAgIGNvbW1hbmRzLFxuICAgICAgZm9ybWF0OiAndXRmLTgnLFxuICAgICAgcGFyc2VyKHRleHQ6IHN0cmluZykge1xuICAgICAgICAgcmV0dXJuIGNvbmZpZ0xpc3RQYXJzZXIodGV4dCk7XG4gICAgICB9LFxuICAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCk6IFBpY2s8U2ltcGxlR2l0LCAnYWRkQ29uZmlnJyB8ICdnZXRDb25maWcnIHwgJ2xpc3RDb25maWcnPiB7XG4gICByZXR1cm4ge1xuICAgICAgYWRkQ29uZmlnKHRoaXM6IFNpbXBsZUdpdEFwaSwga2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIC4uLnJlc3Q6IHVua25vd25bXSkge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICAgICAgICBhZGRDb25maWdUYXNrKFxuICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICByZXN0WzBdID09PSB0cnVlLFxuICAgICAgICAgICAgICAgYXNDb25maWdTY29wZShyZXN0WzFdLCBHaXRDb25maWdTY29wZS5sb2NhbClcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKVxuICAgICAgICAgKTtcbiAgICAgIH0sXG5cbiAgICAgIGdldENvbmZpZyh0aGlzOiBTaW1wbGVHaXRBcGksIGtleTogc3RyaW5nLCBzY29wZT86IEdpdENvbmZpZ1Njb3BlKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcnVuVGFzayhcbiAgICAgICAgICAgIGdldENvbmZpZ1Rhc2soa2V5LCBhc0NvbmZpZ1Njb3BlKHNjb3BlLCB1bmRlZmluZWQpKSxcbiAgICAgICAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICAgICAgICApO1xuICAgICAgfSxcblxuICAgICAgbGlzdENvbmZpZyh0aGlzOiBTaW1wbGVHaXRBcGksIC4uLnJlc3Q6IHVua25vd25bXSkge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICAgICAgICBsaXN0Q29uZmlnVGFzayhhc0NvbmZpZ1Njb3BlKHJlc3RbMF0sIHVuZGVmaW5lZCkpLFxuICAgICAgICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICAgICAgICk7XG4gICAgICB9LFxuICAgfTtcbn1cbiIsICJleHBvcnQgZW51bSBEaWZmTmFtZVN0YXR1cyB7XG4gICBBRERFRCA9ICdBJyxcbiAgIENPUElFRCA9ICdDJyxcbiAgIERFTEVURUQgPSAnRCcsXG4gICBNT0RJRklFRCA9ICdNJyxcbiAgIFJFTkFNRUQgPSAnUicsXG4gICBDSEFOR0VEID0gJ1QnLFxuICAgVU5NRVJHRUQgPSAnVScsXG4gICBVTktOT1dOID0gJ1gnLFxuICAgQlJPS0VOID0gJ0InLFxufVxuXG5jb25zdCBkaWZmTmFtZVN0YXR1cyA9IG5ldyBTZXQoT2JqZWN0LnZhbHVlcyhEaWZmTmFtZVN0YXR1cykpO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNEaWZmTmFtZVN0YXR1cyhpbnB1dDogc3RyaW5nKTogaW5wdXQgaXMgRGlmZk5hbWVTdGF0dXMge1xuICAgcmV0dXJuIGRpZmZOYW1lU3RhdHVzLmhhcyhpbnB1dCBhcyBEaWZmTmFtZVN0YXR1cyk7XG59XG4iLCAiaW1wb3J0IHsgR3JlcFJlc3VsdCwgU2ltcGxlR2l0IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBTaW1wbGVHaXRBcGkgfSBmcm9tICcuLi9zaW1wbGUtZ2l0LWFwaSc7XG5pbXBvcnQge1xuICAgYXNOdW1iZXIsXG4gICBmb3JFYWNoTGluZVdpdGhDb250ZW50LFxuICAgZ2V0VHJhaWxpbmdPcHRpb25zLFxuICAgTlVMTCxcbiAgIHByZWZpeGVkQXJyYXksXG4gICB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQsXG59IGZyb20gJy4uL3V0aWxzJztcblxuaW1wb3J0IHsgY29uZmlndXJhdGlvbkVycm9yVGFzayB9IGZyb20gJy4vdGFzayc7XG5cbmNvbnN0IGRpc2FsbG93ZWRPcHRpb25zID0gWyctaCddO1xuXG5jb25zdCBRdWVyeSA9IFN5bWJvbCgnZ3JlcFF1ZXJ5Jyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2l0R3JlcFF1ZXJ5IGV4dGVuZHMgSXRlcmFibGU8c3RyaW5nPiB7XG4gICAvKiogQWRkcyBvbmUgb3IgbW9yZSB0ZXJtcyB0byBiZSBncm91cGVkIGFzIGFuIFwiYW5kXCIgdG8gYW55IG90aGVyIHRlcm1zICovXG4gICBhbmQoLi4uYW5kOiBzdHJpbmdbXSk6IHRoaXM7XG5cbiAgIC8qKiBBZGRzIG9uZSBvciBtb3JlIHNlYXJjaCB0ZXJtcyAtIGdpdC5ncmVwIHdpbGwgXCJvclwiIHRoaXMgdG8gb3RoZXIgdGVybXMgKi9cbiAgIHBhcmFtKC4uLnBhcmFtOiBzdHJpbmdbXSk6IHRoaXM7XG59XG5cbmNsYXNzIEdyZXBRdWVyeSBpbXBsZW1lbnRzIEdpdEdyZXBRdWVyeSB7XG4gICBwcml2YXRlIFtRdWVyeV06IHN0cmluZ1tdID0gW107XG5cbiAgICpbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgIGZvciAoY29uc3QgcXVlcnkgb2YgdGhpc1tRdWVyeV0pIHtcbiAgICAgICAgIHlpZWxkIHF1ZXJ5O1xuICAgICAgfVxuICAgfVxuXG4gICBhbmQoLi4uYW5kOiBzdHJpbmdbXSkge1xuICAgICAgYW5kLmxlbmd0aCAmJiB0aGlzW1F1ZXJ5XS5wdXNoKCctLWFuZCcsICcoJywgLi4ucHJlZml4ZWRBcnJheShhbmQsICctZScpLCAnKScpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICB9XG5cbiAgIHBhcmFtKC4uLnBhcmFtOiBzdHJpbmdbXSkge1xuICAgICAgdGhpc1tRdWVyeV0ucHVzaCguLi5wcmVmaXhlZEFycmF5KHBhcmFtLCAnLWUnKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgIH1cbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGJ1aWxkZXIgZm9yIGEgYGdpdC5ncmVwYCBxdWVyeSB3aXRoIG9wdGlvbmFsIHBhcmFtc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ3JlcFF1ZXJ5QnVpbGRlciguLi5wYXJhbXM6IHN0cmluZ1tdKTogR2l0R3JlcFF1ZXJ5IHtcbiAgIHJldHVybiBuZXcgR3JlcFF1ZXJ5KCkucGFyYW0oLi4ucGFyYW1zKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VHcmVwKGdyZXA6IHN0cmluZyk6IEdyZXBSZXN1bHQge1xuICAgY29uc3QgcGF0aHM6IEdyZXBSZXN1bHRbJ3BhdGhzJ10gPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgIGNvbnN0IHJlc3VsdHM6IEdyZXBSZXN1bHRbJ3Jlc3VsdHMnXSA9IHt9O1xuXG4gICBmb3JFYWNoTGluZVdpdGhDb250ZW50KGdyZXAsIChpbnB1dCkgPT4ge1xuICAgICAgY29uc3QgW3BhdGgsIGxpbmUsIHByZXZpZXddID0gaW5wdXQuc3BsaXQoTlVMTCk7XG4gICAgICBwYXRocy5hZGQocGF0aCk7XG4gICAgICAocmVzdWx0c1twYXRoXSA9IHJlc3VsdHNbcGF0aF0gfHwgW10pLnB1c2goe1xuICAgICAgICAgbGluZTogYXNOdW1iZXIobGluZSksXG4gICAgICAgICBwYXRoLFxuICAgICAgICAgcHJldmlldyxcbiAgICAgIH0pO1xuICAgfSk7XG5cbiAgIHJldHVybiB7XG4gICAgICBwYXRocyxcbiAgICAgIHJlc3VsdHMsXG4gICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKTogUGljazxTaW1wbGVHaXQsICdncmVwJz4ge1xuICAgcmV0dXJuIHtcbiAgICAgIGdyZXAodGhpczogU2ltcGxlR2l0QXBpLCBzZWFyY2hUZXJtOiBzdHJpbmcgfCBHaXRHcmVwUXVlcnkpIHtcbiAgICAgICAgIGNvbnN0IHRoZW4gPSB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKTtcbiAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBnZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzKTtcblxuICAgICAgICAgZm9yIChjb25zdCBvcHRpb24gb2YgZGlzYWxsb3dlZE9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmluY2x1ZGVzKG9wdGlvbikpIHtcbiAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbkVycm9yVGFzayhgZ2l0LmdyZXA6IHVzZSBvZiBcIiR7b3B0aW9ufVwiIGlzIG5vdCBzdXBwb3J0ZWQuYCksXG4gICAgICAgICAgICAgICAgICB0aGVuXG4gICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgfVxuXG4gICAgICAgICBpZiAodHlwZW9mIHNlYXJjaFRlcm0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBzZWFyY2hUZXJtID0gZ3JlcFF1ZXJ5QnVpbGRlcigpLnBhcmFtKHNlYXJjaFRlcm0pO1xuICAgICAgICAgfVxuXG4gICAgICAgICBjb25zdCBjb21tYW5kcyA9IFsnZ3JlcCcsICctLW51bGwnLCAnLW4nLCAnLS1mdWxsLW5hbWUnLCAuLi5vcHRpb25zLCAuLi5zZWFyY2hUZXJtXTtcblxuICAgICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICBjb21tYW5kcyxcbiAgICAgICAgICAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgICAgICAgICAgIHBhcnNlcihzdGRPdXQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUdyZXAoc3RkT3V0KTtcbiAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGhlblxuICAgICAgICAgKTtcbiAgICAgIH0sXG4gICB9O1xufVxuIiwgImltcG9ydCB7IHN0cmFpZ2h0VGhyb3VnaFN0cmluZ1Rhc2sgfSBmcm9tICcuL3Rhc2snO1xuaW1wb3J0IHsgTWF5YmUsIE9wdGlvbkZsYWdzLCBPcHRpb25zIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZW51bSBSZXNldE1vZGUge1xuICAgTUlYRUQgPSAnbWl4ZWQnLFxuICAgU09GVCA9ICdzb2Z0JyxcbiAgIEhBUkQgPSAnaGFyZCcsXG4gICBNRVJHRSA9ICdtZXJnZScsXG4gICBLRUVQID0gJ2tlZXAnLFxufVxuXG5jb25zdCBSZXNldE1vZGVzID0gQXJyYXkuZnJvbShPYmplY3QudmFsdWVzKFJlc2V0TW9kZSkpO1xuXG5leHBvcnQgdHlwZSBSZXNldE9wdGlvbnMgPSBPcHRpb25zICZcbiAgIE9wdGlvbkZsYWdzPCctcScgfCAnLS1xdWlldCcgfCAnLS1uby1xdWlldCcgfCAnLS1wYXRoc3BlYy1mcm9tLW51bCc+ICZcbiAgIE9wdGlvbkZsYWdzPCctLXBhdGhzcGVjLWZyb20tZmlsZScsIHN0cmluZz47XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNldFRhc2sobW9kZTogTWF5YmU8UmVzZXRNb2RlPiwgY3VzdG9tQXJnczogc3RyaW5nW10pIHtcbiAgIGNvbnN0IGNvbW1hbmRzOiBzdHJpbmdbXSA9IFsncmVzZXQnXTtcbiAgIGlmIChpc1ZhbGlkUmVzZXRNb2RlKG1vZGUpKSB7XG4gICAgICBjb21tYW5kcy5wdXNoKGAtLSR7bW9kZX1gKTtcbiAgIH1cbiAgIGNvbW1hbmRzLnB1c2goLi4uY3VzdG9tQXJncyk7XG5cbiAgIHJldHVybiBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKGNvbW1hbmRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlc2V0TW9kZShtb2RlOiBSZXNldE1vZGUgfCBhbnkpOiBNYXliZTxSZXNldE1vZGU+IHtcbiAgIGlmIChpc1ZhbGlkUmVzZXRNb2RlKG1vZGUpKSB7XG4gICAgICByZXR1cm4gbW9kZTtcbiAgIH1cblxuICAgc3dpdGNoICh0eXBlb2YgbW9kZSkge1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgICByZXR1cm4gUmVzZXRNb2RlLlNPRlQ7XG4gICB9XG5cbiAgIHJldHVybjtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZFJlc2V0TW9kZShtb2RlOiBSZXNldE1vZGUgfCBhbnkpOiBtb2RlIGlzIFJlc2V0TW9kZSB7XG4gICByZXR1cm4gUmVzZXRNb2Rlcy5pbmNsdWRlcyhtb2RlKTtcbn1cbiIsICJpbXBvcnQgZGVidWcsIHsgRGVidWdnZXIgfSBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQge1xuICAgYXBwZW5kLFxuICAgZmlsdGVySGFzTGVuZ3RoLFxuICAgZmlsdGVyU3RyaW5nLFxuICAgZmlsdGVyVHlwZSxcbiAgIE5PT1AsXG4gICBvYmplY3RUb1N0cmluZyxcbiAgIHJlbW92ZSxcbn0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBNYXliZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5kZWJ1Zy5mb3JtYXR0ZXJzLkwgPSAodmFsdWU6IGFueSkgPT4gU3RyaW5nKGZpbHRlckhhc0xlbmd0aCh2YWx1ZSkgPyB2YWx1ZS5sZW5ndGggOiAnLScpO1xuZGVidWcuZm9ybWF0dGVycy5CID0gKHZhbHVlOiBCdWZmZXIpID0+IHtcbiAgIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoJ3V0ZjgnKTtcbiAgIH1cbiAgIHJldHVybiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59O1xuXG50eXBlIE91dHB1dExvZ2dpbmdIYW5kbGVyID0gKG1lc3NhZ2U6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHZvaWQ7XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvZygpIHtcbiAgIHJldHVybiBkZWJ1Zygnc2ltcGxlLWdpdCcpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE91dHB1dExvZ2dlciBleHRlbmRzIE91dHB1dExvZ2dpbmdIYW5kbGVyIHtcbiAgIHJlYWRvbmx5IGxhYmVsOiBzdHJpbmc7XG5cbiAgIGluZm86IE91dHB1dExvZ2dpbmdIYW5kbGVyO1xuICAgc3RlcChuZXh0U3RlcD86IHN0cmluZyk6IE91dHB1dExvZ2dlcjtcbiAgIHNpYmxpbmcobmFtZTogc3RyaW5nKTogT3V0cHV0TG9nZ2VyO1xufVxuXG5mdW5jdGlvbiBwcmVmaXhlZExvZ2dlcihcbiAgIHRvOiBEZWJ1Z2dlcixcbiAgIHByZWZpeDogc3RyaW5nLFxuICAgZm9yd2FyZD86IE91dHB1dExvZ2dpbmdIYW5kbGVyXG4pOiBPdXRwdXRMb2dnaW5nSGFuZGxlciB7XG4gICBpZiAoIXByZWZpeCB8fCAhU3RyaW5nKHByZWZpeCkucmVwbGFjZSgvXFxzKi8sICcnKSkge1xuICAgICAgcmV0dXJuICFmb3J3YXJkXG4gICAgICAgICA/IHRvXG4gICAgICAgICA6IChtZXNzYWdlLCAuLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgIHRvKG1lc3NhZ2UsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgICBmb3J3YXJkKG1lc3NhZ2UsIC4uLmFyZ3MpO1xuICAgICAgICAgICB9O1xuICAgfVxuXG4gICByZXR1cm4gKG1lc3NhZ2UsIC4uLmFyZ3MpID0+IHtcbiAgICAgIHRvKGAlcyAke21lc3NhZ2V9YCwgcHJlZml4LCAuLi5hcmdzKTtcbiAgICAgIGlmIChmb3J3YXJkKSB7XG4gICAgICAgICBmb3J3YXJkKG1lc3NhZ2UsIC4uLmFyZ3MpO1xuICAgICAgfVxuICAgfTtcbn1cblxuZnVuY3Rpb24gY2hpbGRMb2dnZXJOYW1lKFxuICAgbmFtZTogTWF5YmU8c3RyaW5nPixcbiAgIGNoaWxkRGVidWdnZXI6IE1heWJlPERlYnVnZ2VyPixcbiAgIHsgbmFtZXNwYWNlOiBwYXJlbnROYW1lc3BhY2UgfTogRGVidWdnZXJcbik6IHN0cmluZyB7XG4gICBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gbmFtZTtcbiAgIH1cbiAgIGNvbnN0IGNoaWxkTmFtZXNwYWNlID0gKGNoaWxkRGVidWdnZXIgJiYgY2hpbGREZWJ1Z2dlci5uYW1lc3BhY2UpIHx8ICcnO1xuXG4gICBpZiAoY2hpbGROYW1lc3BhY2Uuc3RhcnRzV2l0aChwYXJlbnROYW1lc3BhY2UpKSB7XG4gICAgICByZXR1cm4gY2hpbGROYW1lc3BhY2Uuc3Vic3RyKHBhcmVudE5hbWVzcGFjZS5sZW5ndGggKyAxKTtcbiAgIH1cblxuICAgcmV0dXJuIGNoaWxkTmFtZXNwYWNlIHx8IHBhcmVudE5hbWVzcGFjZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxvZ2dlcihcbiAgIGxhYmVsOiBzdHJpbmcsXG4gICB2ZXJib3NlPzogc3RyaW5nIHwgRGVidWdnZXIsXG4gICBpbml0aWFsU3RlcD86IHN0cmluZyxcbiAgIGluZm9EZWJ1Z2dlciA9IGNyZWF0ZUxvZygpXG4pOiBPdXRwdXRMb2dnZXIge1xuICAgY29uc3QgbGFiZWxQcmVmaXggPSAobGFiZWwgJiYgYFske2xhYmVsfV1gKSB8fCAnJztcblxuICAgY29uc3Qgc3Bhd25lZDogT3V0cHV0TG9nZ2VyW10gPSBbXTtcbiAgIGNvbnN0IGRlYnVnRGVidWdnZXI6IE1heWJlPERlYnVnZ2VyPiA9XG4gICAgICB0eXBlb2YgdmVyYm9zZSA9PT0gJ3N0cmluZycgPyBpbmZvRGVidWdnZXIuZXh0ZW5kKHZlcmJvc2UpIDogdmVyYm9zZTtcbiAgIGNvbnN0IGtleSA9IGNoaWxkTG9nZ2VyTmFtZShmaWx0ZXJUeXBlKHZlcmJvc2UsIGZpbHRlclN0cmluZyksIGRlYnVnRGVidWdnZXIsIGluZm9EZWJ1Z2dlcik7XG5cbiAgIHJldHVybiBzdGVwKGluaXRpYWxTdGVwKTtcblxuICAgZnVuY3Rpb24gc2libGluZyhuYW1lOiBzdHJpbmcsIGluaXRpYWw/OiBzdHJpbmcpIHtcbiAgICAgIHJldHVybiBhcHBlbmQoXG4gICAgICAgICBzcGF3bmVkLFxuICAgICAgICAgY3JlYXRlTG9nZ2VyKGxhYmVsLCBrZXkucmVwbGFjZSgvXlteOl0rLywgbmFtZSksIGluaXRpYWwsIGluZm9EZWJ1Z2dlcilcbiAgICAgICk7XG4gICB9XG5cbiAgIGZ1bmN0aW9uIHN0ZXAocGhhc2U/OiBzdHJpbmcpIHtcbiAgICAgIGNvbnN0IHN0ZXBQcmVmaXggPSAocGhhc2UgJiYgYFske3BoYXNlfV1gKSB8fCAnJztcbiAgICAgIGNvbnN0IGRlYnVnID0gKGRlYnVnRGVidWdnZXIgJiYgcHJlZml4ZWRMb2dnZXIoZGVidWdEZWJ1Z2dlciwgc3RlcFByZWZpeCkpIHx8IE5PT1A7XG4gICAgICBjb25zdCBpbmZvID0gcHJlZml4ZWRMb2dnZXIoaW5mb0RlYnVnZ2VyLCBgJHtsYWJlbFByZWZpeH0gJHtzdGVwUHJlZml4fWAsIGRlYnVnKTtcblxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZGVidWdEZWJ1Z2dlciA/IGRlYnVnIDogaW5mbywge1xuICAgICAgICAgbGFiZWwsXG4gICAgICAgICBzaWJsaW5nLFxuICAgICAgICAgaW5mbyxcbiAgICAgICAgIHN0ZXAsXG4gICAgICB9KTtcbiAgIH1cbn1cblxuLyoqXG4gKiBUaGUgYEdpdExvZ2dlcmAgaXMgdXNlZCBieSB0aGUgbWFpbiBgU2ltcGxlR2l0YCBydW5uZXIgdG8gaGFuZGxlIGxvZ2dpbmdcbiAqIGFueSB3YXJuaW5ncyBvciBlcnJvcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBHaXRMb2dnZXIge1xuICAgcHVibGljIGVycm9yOiBPdXRwdXRMb2dnaW5nSGFuZGxlcjtcblxuICAgcHVibGljIHdhcm46IE91dHB1dExvZ2dpbmdIYW5kbGVyO1xuXG4gICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9vdXQ6IERlYnVnZ2VyID0gY3JlYXRlTG9nKCkpIHtcbiAgICAgIHRoaXMuZXJyb3IgPSBwcmVmaXhlZExvZ2dlcihfb3V0LCAnW0VSUk9SXScpO1xuICAgICAgdGhpcy53YXJuID0gcHJlZml4ZWRMb2dnZXIoX291dCwgJ1tXQVJOXScpO1xuICAgfVxuXG4gICBzaWxlbnQoc2lsZW5jZSA9IGZhbHNlKSB7XG4gICAgICBpZiAoc2lsZW5jZSAhPT0gdGhpcy5fb3V0LmVuYWJsZWQpIHtcbiAgICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBuYW1lc3BhY2UgfSA9IHRoaXMuX291dDtcbiAgICAgIGNvbnN0IGVudiA9IChwcm9jZXNzLmVudi5ERUJVRyB8fCAnJykuc3BsaXQoJywnKS5maWx0ZXIoKHMpID0+ICEhcyk7XG4gICAgICBjb25zdCBoYXNPbiA9IGVudi5pbmNsdWRlcyhuYW1lc3BhY2UpO1xuICAgICAgY29uc3QgaGFzT2ZmID0gZW52LmluY2x1ZGVzKGAtJHtuYW1lc3BhY2V9YCk7XG5cbiAgICAgIC8vIGVuYWJsaW5nIHRoZSBsb2dcbiAgICAgIGlmICghc2lsZW5jZSkge1xuICAgICAgICAgaWYgKGhhc09mZikge1xuICAgICAgICAgICAgcmVtb3ZlKGVudiwgYC0ke25hbWVzcGFjZX1gKTtcbiAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbnYucHVzaChuYW1lc3BhY2UpO1xuICAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgIGlmIChoYXNPbikge1xuICAgICAgICAgICAgcmVtb3ZlKGVudiwgbmFtZXNwYWNlKTtcbiAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbnYucHVzaChgLSR7bmFtZXNwYWNlfWApO1xuICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkZWJ1Zy5lbmFibGUoZW52LmpvaW4oJywnKSk7XG4gICB9XG59XG4iLCAiaW1wb3J0IHsgU2ltcGxlR2l0VGFzayB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IEdpdEVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2dpdC1lcnJvcic7XG5pbXBvcnQgeyBjcmVhdGVMb2dnZXIsIE91dHB1dExvZ2dlciB9IGZyb20gJy4uL2dpdC1sb2dnZXInO1xuXG50eXBlIEFueVNpbXBsZUdpdFRhc2sgPSBTaW1wbGVHaXRUYXNrPGFueT47XG5cbnR5cGUgVGFza0luUHJvZ3Jlc3MgPSB7XG4gICBuYW1lOiBzdHJpbmc7XG4gICBsb2dnZXI6IE91dHB1dExvZ2dlcjtcbiAgIHRhc2s6IEFueVNpbXBsZUdpdFRhc2s7XG59O1xuXG5leHBvcnQgY2xhc3MgVGFza3NQZW5kaW5nUXVldWUge1xuICAgcHJpdmF0ZSBfcXVldWU6IE1hcDxBbnlTaW1wbGVHaXRUYXNrLCBUYXNrSW5Qcm9ncmVzcz4gPSBuZXcgTWFwKCk7XG5cbiAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9nTGFiZWwgPSAnR2l0RXhlY3V0b3InKSB7fVxuXG4gICBwcml2YXRlIHdpdGhQcm9ncmVzcyh0YXNrOiBBbnlTaW1wbGVHaXRUYXNrKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcXVldWUuZ2V0KHRhc2spO1xuICAgfVxuXG4gICBwcml2YXRlIGNyZWF0ZVByb2dyZXNzKHRhc2s6IEFueVNpbXBsZUdpdFRhc2spOiBUYXNrSW5Qcm9ncmVzcyB7XG4gICAgICBjb25zdCBuYW1lID0gVGFza3NQZW5kaW5nUXVldWUuZ2V0TmFtZSh0YXNrLmNvbW1hbmRzWzBdKTtcbiAgICAgIGNvbnN0IGxvZ2dlciA9IGNyZWF0ZUxvZ2dlcih0aGlzLmxvZ0xhYmVsLCBuYW1lKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgIHRhc2ssXG4gICAgICAgICBsb2dnZXIsXG4gICAgICAgICBuYW1lLFxuICAgICAgfTtcbiAgIH1cblxuICAgcHVzaCh0YXNrOiBBbnlTaW1wbGVHaXRUYXNrKTogVGFza0luUHJvZ3Jlc3Mge1xuICAgICAgY29uc3QgcHJvZ3Jlc3MgPSB0aGlzLmNyZWF0ZVByb2dyZXNzKHRhc2spO1xuICAgICAgcHJvZ3Jlc3MubG9nZ2VyKCdBZGRpbmcgdGFzayB0byB0aGUgcXVldWUsIGNvbW1hbmRzID0gJW8nLCB0YXNrLmNvbW1hbmRzKTtcblxuICAgICAgdGhpcy5fcXVldWUuc2V0KHRhc2ssIHByb2dyZXNzKTtcblxuICAgICAgcmV0dXJuIHByb2dyZXNzO1xuICAgfVxuXG4gICBmYXRhbChlcnI6IEdpdEVycm9yKSB7XG4gICAgICBmb3IgKGNvbnN0IFt0YXNrLCB7IGxvZ2dlciB9XSBvZiBBcnJheS5mcm9tKHRoaXMuX3F1ZXVlLmVudHJpZXMoKSkpIHtcbiAgICAgICAgIGlmICh0YXNrID09PSBlcnIudGFzaykge1xuICAgICAgICAgICAgbG9nZ2VyLmluZm8oYEZhaWxlZCAlb2AsIGVycik7XG4gICAgICAgICAgICBsb2dnZXIoXG4gICAgICAgICAgICAgICBgRmF0YWwgZXhjZXB0aW9uLCBhbnkgYXMteWV0IHVuLXN0YXJ0ZWQgdGFza3MgcnVuIHRocm91Z2ggdGhpcyBleGVjdXRvciB3aWxsIG5vdCBiZSBhdHRlbXB0ZWRgXG4gICAgICAgICAgICApO1xuICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKFxuICAgICAgICAgICAgICAgYEEgZmF0YWwgZXhjZXB0aW9uIG9jY3VycmVkIGluIGEgcHJldmlvdXMgdGFzaywgdGhlIHF1ZXVlIGhhcyBiZWVuIHB1cmdlZDogJW9gLFxuICAgICAgICAgICAgICAgZXJyLm1lc3NhZ2VcbiAgICAgICAgICAgICk7XG4gICAgICAgICB9XG5cbiAgICAgICAgIHRoaXMuY29tcGxldGUodGFzayk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9xdWV1ZS5zaXplICE9PSAwKSB7XG4gICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFF1ZXVlIHNpemUgc2hvdWxkIGJlIHplcm8gYWZ0ZXIgZmF0YWw6ICR7dGhpcy5fcXVldWUuc2l6ZX1gKTtcbiAgICAgIH1cbiAgIH1cblxuICAgY29tcGxldGUodGFzazogQW55U2ltcGxlR2l0VGFzaykge1xuICAgICAgY29uc3QgcHJvZ3Jlc3MgPSB0aGlzLndpdGhQcm9ncmVzcyh0YXNrKTtcbiAgICAgIGlmIChwcm9ncmVzcykge1xuICAgICAgICAgdGhpcy5fcXVldWUuZGVsZXRlKHRhc2spO1xuICAgICAgfVxuICAgfVxuXG4gICBhdHRlbXB0KHRhc2s6IEFueVNpbXBsZUdpdFRhc2spOiBUYXNrSW5Qcm9ncmVzcyB7XG4gICAgICBjb25zdCBwcm9ncmVzcyA9IHRoaXMud2l0aFByb2dyZXNzKHRhc2spO1xuICAgICAgaWYgKCFwcm9ncmVzcykge1xuICAgICAgICAgdGhyb3cgbmV3IEdpdEVycm9yKHVuZGVmaW5lZCwgJ1Rhc2tzUGVuZGluZ1F1ZXVlOiBhdHRlbXB0IGNhbGxlZCBmb3IgYW4gdW5rbm93biB0YXNrJyk7XG4gICAgICB9XG4gICAgICBwcm9ncmVzcy5sb2dnZXIoJ1N0YXJ0aW5nIHRhc2snKTtcblxuICAgICAgcmV0dXJuIHByb2dyZXNzO1xuICAgfVxuXG4gICBzdGF0aWMgZ2V0TmFtZShuYW1lID0gJ2VtcHR5Jykge1xuICAgICAgcmV0dXJuIGB0YXNrOiR7bmFtZX06JHsrK1Rhc2tzUGVuZGluZ1F1ZXVlLmNvdW50ZXJ9YDtcbiAgIH1cblxuICAgcHJpdmF0ZSBzdGF0aWMgY291bnRlciA9IDA7XG59XG4iLCAiaW1wb3J0IHsgc3Bhd24sIFNwYXduT3B0aW9ucyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHsgR2l0RXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvZ2l0LWVycm9yJztcbmltcG9ydCB7IE91dHB1dExvZ2dlciB9IGZyb20gJy4uL2dpdC1sb2dnZXInO1xuaW1wb3J0IHsgUGx1Z2luU3RvcmUgfSBmcm9tICcuLi9wbHVnaW5zJztcbmltcG9ydCB7IEVtcHR5VGFzaywgaXNCdWZmZXJUYXNrLCBpc0VtcHR5VGFzayB9IGZyb20gJy4uL3Rhc2tzL3Rhc2snO1xuaW1wb3J0IHtcbiAgIEdpdEV4ZWN1dG9yUmVzdWx0LFxuICAgTWF5YmUsXG4gICBvdXRwdXRIYW5kbGVyLFxuICAgUnVubmFibGVUYXNrLFxuICAgU2ltcGxlR2l0RXhlY3V0b3IsXG4gICBTaW1wbGVHaXRUYXNrLFxufSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBjYWxsVGFza1BhcnNlciwgZmlyc3QsIEdpdE91dHB1dFN0cmVhbXMsIG9iamVjdFRvU3RyaW5nIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgU2NoZWR1bGVyIH0gZnJvbSAnLi9zY2hlZHVsZXInO1xuaW1wb3J0IHsgVGFza3NQZW5kaW5nUXVldWUgfSBmcm9tICcuL3Rhc2tzLXBlbmRpbmctcXVldWUnO1xuXG5leHBvcnQgY2xhc3MgR2l0RXhlY3V0b3JDaGFpbiBpbXBsZW1lbnRzIFNpbXBsZUdpdEV4ZWN1dG9yIHtcbiAgIHByaXZhdGUgX2NoYWluOiBQcm9taXNlPGFueT4gPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgIHByaXZhdGUgX3F1ZXVlID0gbmV3IFRhc2tzUGVuZGluZ1F1ZXVlKCk7XG4gICBwcml2YXRlIF9jd2Q6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICAgcHVibGljIGdldCBjd2QoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY3dkIHx8IHRoaXMuX2V4ZWN1dG9yLmN3ZDtcbiAgIH1cblxuICAgcHVibGljIHNldCBjd2QoY3dkOiBzdHJpbmcpIHtcbiAgICAgIHRoaXMuX2N3ZCA9IGN3ZDtcbiAgIH1cblxuICAgcHVibGljIGdldCBlbnYoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZXhlY3V0b3IuZW52O1xuICAgfVxuXG4gICBwdWJsaWMgZ2V0IG91dHB1dEhhbmRsZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZXhlY3V0b3Iub3V0cHV0SGFuZGxlcjtcbiAgIH1cblxuICAgY29uc3RydWN0b3IoXG4gICAgICBwcml2YXRlIF9leGVjdXRvcjogU2ltcGxlR2l0RXhlY3V0b3IsXG4gICAgICBwcml2YXRlIF9zY2hlZHVsZXI6IFNjaGVkdWxlcixcbiAgICAgIHByaXZhdGUgX3BsdWdpbnM6IFBsdWdpblN0b3JlXG4gICApIHt9XG5cbiAgIHB1YmxpYyBjaGFpbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgfVxuXG4gICBwdWJsaWMgcHVzaDxSPih0YXNrOiBTaW1wbGVHaXRUYXNrPFI+KTogUHJvbWlzZTxSPiB7XG4gICAgICB0aGlzLl9xdWV1ZS5wdXNoKHRhc2spO1xuXG4gICAgICByZXR1cm4gKHRoaXMuX2NoYWluID0gdGhpcy5fY2hhaW4udGhlbigoKSA9PiB0aGlzLmF0dGVtcHRUYXNrKHRhc2spKSk7XG4gICB9XG5cbiAgIHByaXZhdGUgYXN5bmMgYXR0ZW1wdFRhc2s8Uj4odGFzazogU2ltcGxlR2l0VGFzazxSPik6IFByb21pc2U8dm9pZCB8IFI+IHtcbiAgICAgIGNvbnN0IG9uU2NoZWR1bGVDb21wbGV0ZSA9IGF3YWl0IHRoaXMuX3NjaGVkdWxlci5uZXh0KCk7XG4gICAgICBjb25zdCBvblF1ZXVlQ29tcGxldGUgPSAoKSA9PiB0aGlzLl9xdWV1ZS5jb21wbGV0ZSh0YXNrKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgIGNvbnN0IHsgbG9nZ2VyIH0gPSB0aGlzLl9xdWV1ZS5hdHRlbXB0KHRhc2spO1xuICAgICAgICAgcmV0dXJuIChhd2FpdCAoaXNFbXB0eVRhc2sodGFzaylcbiAgICAgICAgICAgID8gdGhpcy5hdHRlbXB0RW1wdHlUYXNrKHRhc2ssIGxvZ2dlcilcbiAgICAgICAgICAgIDogdGhpcy5hdHRlbXB0UmVtb3RlVGFzayh0YXNrLCBsb2dnZXIpKSkgYXMgUjtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgIHRocm93IHRoaXMub25GYXRhbEV4Y2VwdGlvbih0YXNrLCBlIGFzIEVycm9yKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICBvblF1ZXVlQ29tcGxldGUoKTtcbiAgICAgICAgIG9uU2NoZWR1bGVDb21wbGV0ZSgpO1xuICAgICAgfVxuICAgfVxuXG4gICBwcml2YXRlIG9uRmF0YWxFeGNlcHRpb248Uj4odGFzazogU2ltcGxlR2l0VGFzazxSPiwgZTogRXJyb3IpIHtcbiAgICAgIGNvbnN0IGdpdEVycm9yID1cbiAgICAgICAgIGUgaW5zdGFuY2VvZiBHaXRFcnJvciA/IE9iamVjdC5hc3NpZ24oZSwgeyB0YXNrIH0pIDogbmV3IEdpdEVycm9yKHRhc2ssIGUgJiYgU3RyaW5nKGUpKTtcblxuICAgICAgdGhpcy5fY2hhaW4gPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIHRoaXMuX3F1ZXVlLmZhdGFsKGdpdEVycm9yKTtcblxuICAgICAgcmV0dXJuIGdpdEVycm9yO1xuICAgfVxuXG4gICBwcml2YXRlIGFzeW5jIGF0dGVtcHRSZW1vdGVUYXNrPFI+KHRhc2s6IFJ1bm5hYmxlVGFzazxSPiwgbG9nZ2VyOiBPdXRwdXRMb2dnZXIpIHtcbiAgICAgIGNvbnN0IGJpbmFyeSA9IHRoaXMuX3BsdWdpbnMuZXhlYygnc3Bhd24uYmluYXJ5JywgJycsIHBsdWdpbkNvbnRleHQodGFzaywgdGFzay5jb21tYW5kcykpO1xuICAgICAgY29uc3QgYXJncyA9IHRoaXMuX3BsdWdpbnMuZXhlYyhcbiAgICAgICAgICdzcGF3bi5hcmdzJyxcbiAgICAgICAgIFsuLi50YXNrLmNvbW1hbmRzXSxcbiAgICAgICAgIHBsdWdpbkNvbnRleHQodGFzaywgdGFzay5jb21tYW5kcylcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHJhdyA9IGF3YWl0IHRoaXMuZ2l0UmVzcG9uc2UoXG4gICAgICAgICB0YXNrLFxuICAgICAgICAgYmluYXJ5LFxuICAgICAgICAgYXJncyxcbiAgICAgICAgIHRoaXMub3V0cHV0SGFuZGxlcixcbiAgICAgICAgIGxvZ2dlci5zdGVwKCdTUEFXTicpXG4gICAgICApO1xuICAgICAgY29uc3Qgb3V0cHV0U3RyZWFtcyA9IGF3YWl0IHRoaXMuaGFuZGxlVGFza0RhdGEodGFzaywgYXJncywgcmF3LCBsb2dnZXIuc3RlcCgnSEFORExFJykpO1xuXG4gICAgICBsb2dnZXIoYHBhc3NpbmcgcmVzcG9uc2UgdG8gdGFzaydzIHBhcnNlciBhcyBhICVzYCwgdGFzay5mb3JtYXQpO1xuXG4gICAgICBpZiAoaXNCdWZmZXJUYXNrKHRhc2spKSB7XG4gICAgICAgICByZXR1cm4gY2FsbFRhc2tQYXJzZXIodGFzay5wYXJzZXIsIG91dHB1dFN0cmVhbXMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2FsbFRhc2tQYXJzZXIodGFzay5wYXJzZXIsIG91dHB1dFN0cmVhbXMuYXNTdHJpbmdzKCkpO1xuICAgfVxuXG4gICBwcml2YXRlIGFzeW5jIGF0dGVtcHRFbXB0eVRhc2sodGFzazogRW1wdHlUYXNrLCBsb2dnZXI6IE91dHB1dExvZ2dlcikge1xuICAgICAgbG9nZ2VyKGBlbXB0eSB0YXNrIGJ5cGFzc2luZyBjaGlsZCBwcm9jZXNzIHRvIGNhbGwgdG8gdGFzaydzIHBhcnNlcmApO1xuICAgICAgcmV0dXJuIHRhc2sucGFyc2VyKHRoaXMpO1xuICAgfVxuXG4gICBwcml2YXRlIGhhbmRsZVRhc2tEYXRhPFI+KFxuICAgICAgdGFzazogU2ltcGxlR2l0VGFzazxSPixcbiAgICAgIGFyZ3M6IHN0cmluZ1tdLFxuICAgICAgcmVzdWx0OiBHaXRFeGVjdXRvclJlc3VsdCxcbiAgICAgIGxvZ2dlcjogT3V0cHV0TG9nZ2VyXG4gICApOiBQcm9taXNlPEdpdE91dHB1dFN0cmVhbXM+IHtcbiAgICAgIGNvbnN0IHsgZXhpdENvZGUsIHJlamVjdGlvbiwgc3RkT3V0LCBzdGRFcnIgfSA9IHJlc3VsdDtcblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChkb25lLCBmYWlsKSA9PiB7XG4gICAgICAgICBsb2dnZXIoYFByZXBhcmluZyB0byBoYW5kbGUgcHJvY2VzcyByZXNwb25zZSBleGl0Q29kZT0lZCBzdGRPdXQ9YCwgZXhpdENvZGUpO1xuXG4gICAgICAgICBjb25zdCB7IGVycm9yIH0gPSB0aGlzLl9wbHVnaW5zLmV4ZWMoXG4gICAgICAgICAgICAndGFzay5lcnJvcicsXG4gICAgICAgICAgICB7IGVycm9yOiByZWplY3Rpb24gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgIC4uLnBsdWdpbkNvbnRleHQodGFzaywgYXJncyksXG4gICAgICAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgICB9XG4gICAgICAgICApO1xuXG4gICAgICAgICBpZiAoZXJyb3IgJiYgdGFzay5vbkVycm9yKSB7XG4gICAgICAgICAgICBsb2dnZXIuaW5mbyhgZXhpdENvZGU9JXMgaGFuZGxpbmcgd2l0aCBjdXN0b20gZXJyb3IgaGFuZGxlcmApO1xuXG4gICAgICAgICAgICByZXR1cm4gdGFzay5vbkVycm9yKFxuICAgICAgICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgICAobmV3U3RkT3V0KSA9PiB7XG4gICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhgY3VzdG9tIGVycm9yIGhhbmRsZXIgdHJlYXRlZCBhcyBzdWNjZXNzYCk7XG4gICAgICAgICAgICAgICAgICBsb2dnZXIoYGN1c3RvbSBlcnJvciByZXR1cm5lZCBhICVzYCwgb2JqZWN0VG9TdHJpbmcobmV3U3RkT3V0KSk7XG5cbiAgICAgICAgICAgICAgICAgIGRvbmUoXG4gICAgICAgICAgICAgICAgICAgICBuZXcgR2l0T3V0cHV0U3RyZWFtcyhcbiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkobmV3U3RkT3V0KSA/IEJ1ZmZlci5jb25jYXQobmV3U3RkT3V0KSA6IG5ld1N0ZE91dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIEJ1ZmZlci5jb25jYXQoc3RkRXJyKVxuICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICBmYWlsXG4gICAgICAgICAgICApO1xuICAgICAgICAgfVxuXG4gICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKFxuICAgICAgICAgICAgICAgYGhhbmRsaW5nIGFzIGVycm9yOiBleGl0Q29kZT0lcyBzdGRFcnI9JXMgcmVqZWN0aW9uPSVvYCxcbiAgICAgICAgICAgICAgIGV4aXRDb2RlLFxuICAgICAgICAgICAgICAgc3RkRXJyLmxlbmd0aCxcbiAgICAgICAgICAgICAgIHJlamVjdGlvblxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybiBmYWlsKGVycm9yKTtcbiAgICAgICAgIH1cblxuICAgICAgICAgbG9nZ2VyLmluZm8oYHJldHJpZXZpbmcgdGFzayBvdXRwdXQgY29tcGxldGVgKTtcbiAgICAgICAgIGRvbmUobmV3IEdpdE91dHB1dFN0cmVhbXMoQnVmZmVyLmNvbmNhdChzdGRPdXQpLCBCdWZmZXIuY29uY2F0KHN0ZEVycikpKTtcbiAgICAgIH0pO1xuICAgfVxuXG4gICBwcml2YXRlIGFzeW5jIGdpdFJlc3BvbnNlPFI+KFxuICAgICAgdGFzazogU2ltcGxlR2l0VGFzazxSPixcbiAgICAgIGNvbW1hbmQ6IHN0cmluZyxcbiAgICAgIGFyZ3M6IHN0cmluZ1tdLFxuICAgICAgb3V0cHV0SGFuZGxlcjogTWF5YmU8b3V0cHV0SGFuZGxlcj4sXG4gICAgICBsb2dnZXI6IE91dHB1dExvZ2dlclxuICAgKTogUHJvbWlzZTxHaXRFeGVjdXRvclJlc3VsdD4ge1xuICAgICAgY29uc3Qgb3V0cHV0TG9nZ2VyID0gbG9nZ2VyLnNpYmxpbmcoJ291dHB1dCcpO1xuICAgICAgY29uc3Qgc3Bhd25PcHRpb25zOiBTcGF3bk9wdGlvbnMgPSB0aGlzLl9wbHVnaW5zLmV4ZWMoXG4gICAgICAgICAnc3Bhd24ub3B0aW9ucycsXG4gICAgICAgICB7XG4gICAgICAgICAgICBjd2Q6IHRoaXMuY3dkLFxuICAgICAgICAgICAgZW52OiB0aGlzLmVudixcbiAgICAgICAgICAgIHdpbmRvd3NIaWRlOiB0cnVlLFxuICAgICAgICAgfSxcbiAgICAgICAgIHBsdWdpbkNvbnRleHQodGFzaywgdGFzay5jb21tYW5kcylcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoZG9uZSkgPT4ge1xuICAgICAgICAgY29uc3Qgc3RkT3V0OiBCdWZmZXJbXSA9IFtdO1xuICAgICAgICAgY29uc3Qgc3RkRXJyOiBCdWZmZXJbXSA9IFtdO1xuXG4gICAgICAgICBsb2dnZXIuaW5mbyhgJXMgJW9gLCBjb21tYW5kLCBhcmdzKTtcbiAgICAgICAgIGxvZ2dlcignJU8nLCBzcGF3bk9wdGlvbnMpO1xuXG4gICAgICAgICBsZXQgcmVqZWN0aW9uID0gdGhpcy5fYmVmb3JlU3Bhd24odGFzaywgYXJncyk7XG4gICAgICAgICBpZiAocmVqZWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9uZSh7XG4gICAgICAgICAgICAgICBzdGRPdXQsXG4gICAgICAgICAgICAgICBzdGRFcnIsXG4gICAgICAgICAgICAgICBleGl0Q29kZTogOTkwMSxcbiAgICAgICAgICAgICAgIHJlamVjdGlvbixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgfVxuXG4gICAgICAgICB0aGlzLl9wbHVnaW5zLmV4ZWMoJ3NwYXduLmJlZm9yZScsIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgLi4ucGx1Z2luQ29udGV4dCh0YXNrLCBhcmdzKSxcbiAgICAgICAgICAgIGtpbGwocmVhc29uKSB7XG4gICAgICAgICAgICAgICByZWplY3Rpb24gPSByZWFzb24gfHwgcmVqZWN0aW9uO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgIH0pO1xuXG4gICAgICAgICBjb25zdCBzcGF3bmVkID0gc3Bhd24oY29tbWFuZCwgYXJncywgc3Bhd25PcHRpb25zKTtcblxuICAgICAgICAgc3Bhd25lZC5zdGRvdXQhLm9uKFxuICAgICAgICAgICAgJ2RhdGEnLFxuICAgICAgICAgICAgb25EYXRhUmVjZWl2ZWQoc3RkT3V0LCAnc3RkT3V0JywgbG9nZ2VyLCBvdXRwdXRMb2dnZXIuc3RlcCgnc3RkT3V0JykpXG4gICAgICAgICApO1xuICAgICAgICAgc3Bhd25lZC5zdGRlcnIhLm9uKFxuICAgICAgICAgICAgJ2RhdGEnLFxuICAgICAgICAgICAgb25EYXRhUmVjZWl2ZWQoc3RkRXJyLCAnc3RkRXJyJywgbG9nZ2VyLCBvdXRwdXRMb2dnZXIuc3RlcCgnc3RkRXJyJykpXG4gICAgICAgICApO1xuXG4gICAgICAgICBzcGF3bmVkLm9uKCdlcnJvcicsIG9uRXJyb3JSZWNlaXZlZChzdGRFcnIsIGxvZ2dlcikpO1xuXG4gICAgICAgICBpZiAob3V0cHV0SGFuZGxlcikge1xuICAgICAgICAgICAgbG9nZ2VyKGBQYXNzaW5nIGNoaWxkIHByb2Nlc3Mgc3RkT3V0L3N0ZEVyciB0byBjdXN0b20gb3V0cHV0SGFuZGxlcmApO1xuICAgICAgICAgICAgb3V0cHV0SGFuZGxlcihjb21tYW5kLCBzcGF3bmVkLnN0ZG91dCEsIHNwYXduZWQuc3RkZXJyISwgWy4uLmFyZ3NdKTtcbiAgICAgICAgIH1cblxuICAgICAgICAgdGhpcy5fcGx1Z2lucy5leGVjKCdzcGF3bi5hZnRlcicsIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgLi4ucGx1Z2luQ29udGV4dCh0YXNrLCBhcmdzKSxcbiAgICAgICAgICAgIHNwYXduZWQsXG4gICAgICAgICAgICBjbG9zZShleGl0Q29kZTogbnVtYmVyLCByZWFzb24/OiBFcnJvcikge1xuICAgICAgICAgICAgICAgZG9uZSh7XG4gICAgICAgICAgICAgICAgICBzdGRPdXQsXG4gICAgICAgICAgICAgICAgICBzdGRFcnIsXG4gICAgICAgICAgICAgICAgICBleGl0Q29kZSxcbiAgICAgICAgICAgICAgICAgIHJlamVjdGlvbjogcmVqZWN0aW9uIHx8IHJlYXNvbixcbiAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGtpbGwocmVhc29uOiBFcnJvcikge1xuICAgICAgICAgICAgICAgaWYgKHNwYXduZWQua2lsbGVkKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgIHJlamVjdGlvbiA9IHJlYXNvbjtcbiAgICAgICAgICAgICAgIHNwYXduZWQua2lsbCgnU0lHSU5UJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgIH1cblxuICAgcHJpdmF0ZSBfYmVmb3JlU3Bhd248Uj4odGFzazogU2ltcGxlR2l0VGFzazxSPiwgYXJnczogc3RyaW5nW10pIHtcbiAgICAgIGxldCByZWplY3Rpb246IE1heWJlPEVycm9yPjtcbiAgICAgIHRoaXMuX3BsdWdpbnMuZXhlYygnc3Bhd24uYmVmb3JlJywgdW5kZWZpbmVkLCB7XG4gICAgICAgICAuLi5wbHVnaW5Db250ZXh0KHRhc2ssIGFyZ3MpLFxuICAgICAgICAga2lsbChyZWFzb24pIHtcbiAgICAgICAgICAgIHJlamVjdGlvbiA9IHJlYXNvbiB8fCByZWplY3Rpb247XG4gICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiByZWplY3Rpb247XG4gICB9XG59XG5cbmZ1bmN0aW9uIHBsdWdpbkNvbnRleHQ8Uj4odGFzazogU2ltcGxlR2l0VGFzazxSPiwgY29tbWFuZHM6IHN0cmluZ1tdKSB7XG4gICByZXR1cm4ge1xuICAgICAgbWV0aG9kOiBmaXJzdCh0YXNrLmNvbW1hbmRzKSB8fCAnJyxcbiAgICAgIGNvbW1hbmRzLFxuICAgfTtcbn1cblxuZnVuY3Rpb24gb25FcnJvclJlY2VpdmVkKHRhcmdldDogQnVmZmVyW10sIGxvZ2dlcjogT3V0cHV0TG9nZ2VyKSB7XG4gICByZXR1cm4gKGVycjogRXJyb3IpID0+IHtcbiAgICAgIGxvZ2dlcihgW0VSUk9SXSBjaGlsZCBwcm9jZXNzIGV4Y2VwdGlvbiAlb2AsIGVycik7XG4gICAgICB0YXJnZXQucHVzaChCdWZmZXIuZnJvbShTdHJpbmcoZXJyLnN0YWNrKSwgJ2FzY2lpJykpO1xuICAgfTtcbn1cblxuZnVuY3Rpb24gb25EYXRhUmVjZWl2ZWQoXG4gICB0YXJnZXQ6IEJ1ZmZlcltdLFxuICAgbmFtZTogc3RyaW5nLFxuICAgbG9nZ2VyOiBPdXRwdXRMb2dnZXIsXG4gICBvdXRwdXQ6IE91dHB1dExvZ2dlclxuKSB7XG4gICByZXR1cm4gKGJ1ZmZlcjogQnVmZmVyKSA9PiB7XG4gICAgICBsb2dnZXIoYCVzIHJlY2VpdmVkICVMIGJ5dGVzYCwgbmFtZSwgYnVmZmVyKTtcbiAgICAgIG91dHB1dChgJUJgLCBidWZmZXIpO1xuICAgICAgdGFyZ2V0LnB1c2goYnVmZmVyKTtcbiAgIH07XG59XG4iLCAiaW1wb3J0IHR5cGUgeyBQbHVnaW5TdG9yZSB9IGZyb20gJy4uL3BsdWdpbnMnO1xuaW1wb3J0IHR5cGUgeyBHaXRFeGVjdXRvckVudiwgb3V0cHV0SGFuZGxlciwgU2ltcGxlR2l0RXhlY3V0b3IsIFNpbXBsZUdpdFRhc2sgfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB7IEdpdEV4ZWN1dG9yQ2hhaW4gfSBmcm9tICcuL2dpdC1leGVjdXRvci1jaGFpbic7XG5pbXBvcnQgeyBTY2hlZHVsZXIgfSBmcm9tICcuL3NjaGVkdWxlcic7XG5cbmV4cG9ydCBjbGFzcyBHaXRFeGVjdXRvciBpbXBsZW1lbnRzIFNpbXBsZUdpdEV4ZWN1dG9yIHtcbiAgIHByaXZhdGUgX2NoYWluID0gbmV3IEdpdEV4ZWN1dG9yQ2hhaW4odGhpcywgdGhpcy5fc2NoZWR1bGVyLCB0aGlzLl9wbHVnaW5zKTtcblxuICAgcHVibGljIGVudjogR2l0RXhlY3V0b3JFbnY7XG4gICBwdWJsaWMgb3V0cHV0SGFuZGxlcj86IG91dHB1dEhhbmRsZXI7XG5cbiAgIGNvbnN0cnVjdG9yKFxuICAgICAgcHVibGljIGN3ZDogc3RyaW5nLFxuICAgICAgcHJpdmF0ZSBfc2NoZWR1bGVyOiBTY2hlZHVsZXIsXG4gICAgICBwcml2YXRlIF9wbHVnaW5zOiBQbHVnaW5TdG9yZVxuICAgKSB7fVxuXG4gICBjaGFpbigpOiBTaW1wbGVHaXRFeGVjdXRvciB7XG4gICAgICByZXR1cm4gbmV3IEdpdEV4ZWN1dG9yQ2hhaW4odGhpcywgdGhpcy5fc2NoZWR1bGVyLCB0aGlzLl9wbHVnaW5zKTtcbiAgIH1cblxuICAgcHVzaDxSPih0YXNrOiBTaW1wbGVHaXRUYXNrPFI+KTogUHJvbWlzZTxSPiB7XG4gICAgICByZXR1cm4gdGhpcy5fY2hhaW4ucHVzaCh0YXNrKTtcbiAgIH1cbn1cbiIsICJpbXBvcnQgeyBHaXRFcnJvciB9IGZyb20gJy4vZXJyb3JzL2dpdC1lcnJvcic7XG5pbXBvcnQgeyBHaXRSZXNwb25zZUVycm9yIH0gZnJvbSAnLi9lcnJvcnMvZ2l0LXJlc3BvbnNlLWVycm9yJztcbmltcG9ydCB7IFNpbXBsZUdpdFRhc2ssIFNpbXBsZUdpdFRhc2tDYWxsYmFjayB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgTk9PUCB9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gdGFza0NhbGxiYWNrPFI+KFxuICAgdGFzazogU2ltcGxlR2l0VGFzazxSPixcbiAgIHJlc3BvbnNlOiBQcm9taXNlPFI+LFxuICAgY2FsbGJhY2s6IFNpbXBsZUdpdFRhc2tDYWxsYmFjazxSPiA9IE5PT1Bcbikge1xuICAgY29uc3Qgb25TdWNjZXNzID0gKGRhdGE6IFIpID0+IHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgfTtcblxuICAgY29uc3Qgb25FcnJvciA9IChlcnI6IEdpdEVycm9yIHwgR2l0UmVzcG9uc2VFcnJvcikgPT4ge1xuICAgICAgaWYgKGVycj8udGFzayA9PT0gdGFzaykge1xuICAgICAgICAgY2FsbGJhY2soXG4gICAgICAgICAgICBlcnIgaW5zdGFuY2VvZiBHaXRSZXNwb25zZUVycm9yID8gYWRkRGVwcmVjYXRpb25Ob3RpY2VUb0Vycm9yKGVycikgOiBlcnIsXG4gICAgICAgICAgICB1bmRlZmluZWQgYXMgYW55XG4gICAgICAgICApO1xuICAgICAgfVxuICAgfTtcblxuICAgcmVzcG9uc2UudGhlbihvblN1Y2Nlc3MsIG9uRXJyb3IpO1xufVxuXG5mdW5jdGlvbiBhZGREZXByZWNhdGlvbk5vdGljZVRvRXJyb3IoZXJyOiBHaXRSZXNwb25zZUVycm9yKSB7XG4gICBsZXQgbG9nID0gKG5hbWU6IHN0cmluZykgPT4ge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgYHNpbXBsZS1naXQgZGVwcmVjYXRpb24gbm90aWNlOiBhY2Nlc3NpbmcgR2l0UmVzcG9uc2VFcnJvci4ke25hbWV9IHNob3VsZCBiZSBHaXRSZXNwb25zZUVycm9yLmdpdC4ke25hbWV9LCB0aGlzIHdpbGwgbm8gbG9uZ2VyIGJlIGF2YWlsYWJsZSBpbiB2ZXJzaW9uIDNgXG4gICAgICApO1xuICAgICAgbG9nID0gTk9PUDtcbiAgIH07XG5cbiAgIHJldHVybiBPYmplY3QuY3JlYXRlKGVyciwgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZXJyLmdpdCkucmVkdWNlKGRlc2NyaXB0b3JSZWR1Y2VyLCB7fSkpO1xuXG4gICBmdW5jdGlvbiBkZXNjcmlwdG9yUmVkdWNlcihhbGw6IFByb3BlcnR5RGVzY3JpcHRvck1hcCwgbmFtZTogc3RyaW5nKTogdHlwZW9mIGFsbCB7XG4gICAgICBpZiAobmFtZSBpbiBlcnIpIHtcbiAgICAgICAgIHJldHVybiBhbGw7XG4gICAgICB9XG5cbiAgICAgIGFsbFtuYW1lXSA9IHtcbiAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIGxvZyhuYW1lKTtcbiAgICAgICAgICAgIHJldHVybiBlcnIuZ2l0W25hbWVdO1xuICAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBhbGw7XG4gICB9XG59XG4iLCAiaW1wb3J0IHsgZm9sZGVyRXhpc3RzIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgU2ltcGxlR2l0RXhlY3V0b3IgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBhZGhvY0V4ZWNUYXNrIH0gZnJvbSAnLi90YXNrJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZVdvcmtpbmdEaXJlY3RvcnlUYXNrKGRpcmVjdG9yeTogc3RyaW5nLCByb290PzogU2ltcGxlR2l0RXhlY3V0b3IpIHtcbiAgIHJldHVybiBhZGhvY0V4ZWNUYXNrKChpbnN0YW5jZTogU2ltcGxlR2l0RXhlY3V0b3IpID0+IHtcbiAgICAgIGlmICghZm9sZGVyRXhpc3RzKGRpcmVjdG9yeSkpIHtcbiAgICAgICAgIHRocm93IG5ldyBFcnJvcihgR2l0LmN3ZDogY2Fubm90IGNoYW5nZSB0byBub24tZGlyZWN0b3J5IFwiJHtkaXJlY3Rvcnl9XCJgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICgocm9vdCB8fCBpbnN0YW5jZSkuY3dkID0gZGlyZWN0b3J5KTtcbiAgIH0pO1xufVxuIiwgImltcG9ydCB0eXBlIHsgU2ltcGxlR2l0IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgdHlwZSB7IFNpbXBsZUdpdEFwaSB9IGZyb20gJy4uL3NpbXBsZS1naXQtYXBpJztcbmltcG9ydCB7IGdldFRyYWlsaW5nT3B0aW9ucywgcmVtb3ZlLCB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrIH0gZnJvbSAnLi90YXNrJztcblxuZnVuY3Rpb24gY2hlY2tvdXRUYXNrKGFyZ3M6IHN0cmluZ1tdKSB7XG4gICBjb25zdCBjb21tYW5kcyA9IFsnY2hlY2tvdXQnLCAuLi5hcmdzXTtcbiAgIGlmIChjb21tYW5kc1sxXSA9PT0gJy1iJyAmJiBjb21tYW5kcy5pbmNsdWRlcygnLUInKSkge1xuICAgICAgY29tbWFuZHNbMV0gPSByZW1vdmUoY29tbWFuZHMsICctQicpO1xuICAgfVxuXG4gICByZXR1cm4gc3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayhjb21tYW5kcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpOiBQaWNrPFNpbXBsZUdpdCwgJ2NoZWNrb3V0JyB8ICdjaGVja291dEJyYW5jaCcgfCAnY2hlY2tvdXRMb2NhbEJyYW5jaCc+IHtcbiAgIHJldHVybiB7XG4gICAgICBjaGVja291dCh0aGlzOiBTaW1wbGVHaXRBcGkpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgICAgICAgY2hlY2tvdXRUYXNrKGdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMsIDEpKSxcbiAgICAgICAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICAgICAgICApO1xuICAgICAgfSxcblxuICAgICAgY2hlY2tvdXRCcmFuY2godGhpczogU2ltcGxlR2l0QXBpLCBicmFuY2hOYW1lLCBzdGFydFBvaW50KSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcnVuVGFzayhcbiAgICAgICAgICAgIGNoZWNrb3V0VGFzayhbJy1iJywgYnJhbmNoTmFtZSwgc3RhcnRQb2ludCwgLi4uZ2V0VHJhaWxpbmdPcHRpb25zKGFyZ3VtZW50cyldKSxcbiAgICAgICAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICAgICAgICApO1xuICAgICAgfSxcblxuICAgICAgY2hlY2tvdXRMb2NhbEJyYW5jaCh0aGlzOiBTaW1wbGVHaXRBcGksIGJyYW5jaE5hbWUpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgICAgICAgY2hlY2tvdXRUYXNrKFsnLWInLCBicmFuY2hOYW1lLCAuLi5nZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzKV0pLFxuICAgICAgICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICAgICAgICk7XG4gICAgICB9LFxuICAgfTtcbn1cbiIsICJpbXBvcnQgdHlwZSB7IFNpbXBsZUdpdEFwaSB9IGZyb20gJy4uL3NpbXBsZS1naXQtYXBpJztcbmltcG9ydCB0eXBlIHsgU2ltcGxlR2l0IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBhc0NhbWVsQ2FzZSwgYXNOdW1iZXIsIExpbmVQYXJzZXIsIHBhcnNlU3RyaW5nUmVzcG9uc2UgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ291bnRPYmplY3RzUmVzdWx0IHtcbiAgIGNvdW50OiBudW1iZXI7XG4gICBzaXplOiBudW1iZXI7XG4gICBpblBhY2s6IG51bWJlcjtcbiAgIHBhY2tzOiBudW1iZXI7XG4gICBzaXplUGFjazogbnVtYmVyO1xuICAgcHJ1bmVQYWNrYWJsZTogbnVtYmVyO1xuICAgZ2FyYmFnZTogbnVtYmVyO1xuICAgc2l6ZUdhcmJhZ2U6IG51bWJlcjtcbn1cblxuZnVuY3Rpb24gY291bnRPYmplY3RzUmVzcG9uc2UoKTogQ291bnRPYmplY3RzUmVzdWx0IHtcbiAgIHJldHVybiB7XG4gICAgICBjb3VudDogMCxcbiAgICAgIGdhcmJhZ2U6IDAsXG4gICAgICBpblBhY2s6IDAsXG4gICAgICBwYWNrczogMCxcbiAgICAgIHBydW5lUGFja2FibGU6IDAsXG4gICAgICBzaXplOiAwLFxuICAgICAgc2l6ZUdhcmJhZ2U6IDAsXG4gICAgICBzaXplUGFjazogMCxcbiAgIH07XG59XG5cbmNvbnN0IHBhcnNlcjogTGluZVBhcnNlcjxDb3VudE9iamVjdHNSZXN1bHQ+ID0gbmV3IExpbmVQYXJzZXIoXG4gICAvKFthLXotXSspOiAoXFxkKykkLyxcbiAgIChyZXN1bHQsIFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgY29uc3QgcHJvcGVydHkgPSBhc0NhbWVsQ2FzZShrZXkpO1xuICAgICAgaWYgKHJlc3VsdC5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICAgICAgIHJlc3VsdFtwcm9wZXJ0eSBhcyBrZXlvZiB0eXBlb2YgcmVzdWx0XSA9IGFzTnVtYmVyKHZhbHVlKTtcbiAgICAgIH1cbiAgIH1cbik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpOiBQaWNrPFNpbXBsZUdpdCwgJ2NvdW50T2JqZWN0cyc+IHtcbiAgIHJldHVybiB7XG4gICAgICBjb3VudE9iamVjdHModGhpczogU2ltcGxlR2l0QXBpKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcnVuVGFzayh7XG4gICAgICAgICAgICBjb21tYW5kczogWydjb3VudC1vYmplY3RzJywgJy0tdmVyYm9zZSddLFxuICAgICAgICAgICAgZm9ybWF0OiAndXRmLTgnLFxuICAgICAgICAgICAgcGFyc2VyKHN0ZE91dDogc3RyaW5nKSB7XG4gICAgICAgICAgICAgICByZXR1cm4gcGFyc2VTdHJpbmdSZXNwb25zZShjb3VudE9iamVjdHNSZXNwb25zZSgpLCBbcGFyc2VyXSwgc3RkT3V0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICB9KTtcbiAgICAgIH0sXG4gICB9O1xufVxuIiwgImltcG9ydCB7IENvbW1pdFJlc3VsdCB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuaW1wb3J0IHsgTGluZVBhcnNlciwgcGFyc2VTdHJpbmdSZXNwb25zZSB9IGZyb20gJy4uL3V0aWxzJztcblxuY29uc3QgcGFyc2VyczogTGluZVBhcnNlcjxDb21taXRSZXN1bHQ+W10gPSBbXG4gICBuZXcgTGluZVBhcnNlcigvXlxcWyhbXlxcc10rKSggXFwoW14pXStcXCkpPyAoW15cXF1dKykvLCAocmVzdWx0LCBbYnJhbmNoLCByb290LCBjb21taXRdKSA9PiB7XG4gICAgICByZXN1bHQuYnJhbmNoID0gYnJhbmNoO1xuICAgICAgcmVzdWx0LmNvbW1pdCA9IGNvbW1pdDtcbiAgICAgIHJlc3VsdC5yb290ID0gISFyb290O1xuICAgfSksXG4gICBuZXcgTGluZVBhcnNlcigvXFxzKkF1dGhvcjpcXHMoLispL2ksIChyZXN1bHQsIFthdXRob3JdKSA9PiB7XG4gICAgICBjb25zdCBwYXJ0cyA9IGF1dGhvci5zcGxpdCgnPCcpO1xuICAgICAgY29uc3QgZW1haWwgPSBwYXJ0cy5wb3AoKTtcblxuICAgICAgaWYgKCFlbWFpbCB8fCAhZW1haWwuaW5jbHVkZXMoJ0AnKSkge1xuICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQuYXV0aG9yID0ge1xuICAgICAgICAgZW1haWw6IGVtYWlsLnN1YnN0cigwLCBlbWFpbC5sZW5ndGggLSAxKSxcbiAgICAgICAgIG5hbWU6IHBhcnRzLmpvaW4oJzwnKS50cmltKCksXG4gICAgICB9O1xuICAgfSksXG4gICBuZXcgTGluZVBhcnNlcihcbiAgICAgIC8oXFxkKylbXixdKig/OixcXHMqKFxcZCspW14sXSopKD86LFxccyooXFxkKykpL2csXG4gICAgICAocmVzdWx0LCBbY2hhbmdlcywgaW5zZXJ0aW9ucywgZGVsZXRpb25zXSkgPT4ge1xuICAgICAgICAgcmVzdWx0LnN1bW1hcnkuY2hhbmdlcyA9IHBhcnNlSW50KGNoYW5nZXMsIDEwKSB8fCAwO1xuICAgICAgICAgcmVzdWx0LnN1bW1hcnkuaW5zZXJ0aW9ucyA9IHBhcnNlSW50KGluc2VydGlvbnMsIDEwKSB8fCAwO1xuICAgICAgICAgcmVzdWx0LnN1bW1hcnkuZGVsZXRpb25zID0gcGFyc2VJbnQoZGVsZXRpb25zLCAxMCkgfHwgMDtcbiAgICAgIH1cbiAgICksXG4gICBuZXcgTGluZVBhcnNlcihcbiAgICAgIC9eKFxcZCspW14sXSooPzosXFxzKihcXGQrKVteKF0rXFwoKFsrLV0pKT8vLFxuICAgICAgKHJlc3VsdCwgW2NoYW5nZXMsIGxpbmVzLCBkaXJlY3Rpb25dKSA9PiB7XG4gICAgICAgICByZXN1bHQuc3VtbWFyeS5jaGFuZ2VzID0gcGFyc2VJbnQoY2hhbmdlcywgMTApIHx8IDA7XG4gICAgICAgICBjb25zdCBjb3VudCA9IHBhcnNlSW50KGxpbmVzLCAxMCkgfHwgMDtcbiAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICctJykge1xuICAgICAgICAgICAgcmVzdWx0LnN1bW1hcnkuZGVsZXRpb25zID0gY291bnQ7XG4gICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJysnKSB7XG4gICAgICAgICAgICByZXN1bHQuc3VtbWFyeS5pbnNlcnRpb25zID0gY291bnQ7XG4gICAgICAgICB9XG4gICAgICB9XG4gICApLFxuXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ29tbWl0UmVzdWx0KHN0ZE91dDogc3RyaW5nKTogQ29tbWl0UmVzdWx0IHtcbiAgIGNvbnN0IHJlc3VsdDogQ29tbWl0UmVzdWx0ID0ge1xuICAgICAgYXV0aG9yOiBudWxsLFxuICAgICAgYnJhbmNoOiAnJyxcbiAgICAgIGNvbW1pdDogJycsXG4gICAgICByb290OiBmYWxzZSxcbiAgICAgIHN1bW1hcnk6IHtcbiAgICAgICAgIGNoYW5nZXM6IDAsXG4gICAgICAgICBpbnNlcnRpb25zOiAwLFxuICAgICAgICAgZGVsZXRpb25zOiAwLFxuICAgICAgfSxcbiAgIH07XG4gICByZXR1cm4gcGFyc2VTdHJpbmdSZXNwb25zZShyZXN1bHQsIHBhcnNlcnMsIHN0ZE91dCk7XG59XG4iLCAiaW1wb3J0IHR5cGUgeyBDb21taXRSZXN1bHQsIFNpbXBsZUdpdCB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuaW1wb3J0IHR5cGUgeyBTaW1wbGVHaXRBcGkgfSBmcm9tICcuLi9zaW1wbGUtZ2l0LWFwaSc7XG5pbXBvcnQgdHlwZSB7IFN0cmluZ1Rhc2sgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBwYXJzZUNvbW1pdFJlc3VsdCB9IGZyb20gJy4uL3BhcnNlcnMvcGFyc2UtY29tbWl0JztcbmltcG9ydCB7XG4gICBhc0FycmF5LFxuICAgZmlsdGVyQXJyYXksXG4gICBmaWx0ZXJTdHJpbmdPclN0cmluZ0FycmF5LFxuICAgZmlsdGVyVHlwZSxcbiAgIGdldFRyYWlsaW5nT3B0aW9ucyxcbiAgIHByZWZpeGVkQXJyYXksXG4gICB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQsXG59IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IGNvbmZpZ3VyYXRpb25FcnJvclRhc2sgfSBmcm9tICcuL3Rhc2snO1xuXG5leHBvcnQgZnVuY3Rpb24gY29tbWl0VGFzayhcbiAgIG1lc3NhZ2U6IHN0cmluZ1tdLFxuICAgZmlsZXM6IHN0cmluZ1tdLFxuICAgY3VzdG9tQXJnczogc3RyaW5nW11cbik6IFN0cmluZ1Rhc2s8Q29tbWl0UmVzdWx0PiB7XG4gICBjb25zdCBjb21tYW5kczogc3RyaW5nW10gPSBbXG4gICAgICAnLWMnLFxuICAgICAgJ2NvcmUuYWJicmV2PTQwJyxcbiAgICAgICdjb21taXQnLFxuICAgICAgLi4ucHJlZml4ZWRBcnJheShtZXNzYWdlLCAnLW0nKSxcbiAgICAgIC4uLmZpbGVzLFxuICAgICAgLi4uY3VzdG9tQXJncyxcbiAgIF07XG5cbiAgIHJldHVybiB7XG4gICAgICBjb21tYW5kcyxcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIHBhcnNlcjogcGFyc2VDb21taXRSZXN1bHQsXG4gICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKTogUGljazxTaW1wbGVHaXQsICdjb21taXQnPiB7XG4gICByZXR1cm4ge1xuICAgICAgY29tbWl0KHRoaXM6IFNpbXBsZUdpdEFwaSwgbWVzc2FnZTogc3RyaW5nIHwgc3RyaW5nW10sIC4uLnJlc3Q6IHVua25vd25bXSkge1xuICAgICAgICAgY29uc3QgbmV4dCA9IHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpO1xuICAgICAgICAgY29uc3QgdGFzayA9XG4gICAgICAgICAgICByZWplY3REZXByZWNhdGVkU2lnbmF0dXJlcyhtZXNzYWdlKSB8fFxuICAgICAgICAgICAgY29tbWl0VGFzayhcbiAgICAgICAgICAgICAgIGFzQXJyYXkobWVzc2FnZSksXG4gICAgICAgICAgICAgICBhc0FycmF5KGZpbHRlclR5cGUocmVzdFswXSwgZmlsdGVyU3RyaW5nT3JTdHJpbmdBcnJheSwgW10pKSxcbiAgICAgICAgICAgICAgIFsuLi5maWx0ZXJUeXBlKHJlc3RbMV0sIGZpbHRlckFycmF5LCBbXSksIC4uLmdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMsIDAsIHRydWUpXVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2sodGFzaywgbmV4dCk7XG4gICAgICB9LFxuICAgfTtcblxuICAgZnVuY3Rpb24gcmVqZWN0RGVwcmVjYXRlZFNpZ25hdHVyZXMobWVzc2FnZT86IHVua25vd24pIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgICAhZmlsdGVyU3RyaW5nT3JTdHJpbmdBcnJheShtZXNzYWdlKSAmJlxuICAgICAgICAgY29uZmlndXJhdGlvbkVycm9yVGFzayhcbiAgICAgICAgICAgIGBnaXQuY29tbWl0OiByZXF1aXJlcyB0aGUgY29tbWl0IG1lc3NhZ2UgdG8gYmUgc3VwcGxpZWQgYXMgYSBzdHJpbmcvc3RyaW5nW11gXG4gICAgICAgICApXG4gICAgICApO1xuICAgfVxufVxuIiwgImltcG9ydCB7IFJlc3BvbnNlLCBTaW1wbGVHaXQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IFNpbXBsZUdpdEFwaSB9IGZyb20gJy4uL3NpbXBsZS1naXQtYXBpJztcbmltcG9ydCB7IHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IHN0cmFpZ2h0VGhyb3VnaFN0cmluZ1Rhc2sgfSBmcm9tICcuL3Rhc2snO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKTogUGljazxTaW1wbGVHaXQsICdmaXJzdENvbW1pdCc+IHtcbiAgIHJldHVybiB7XG4gICAgICBmaXJzdENvbW1pdCh0aGlzOiBTaW1wbGVHaXRBcGkpOiBSZXNwb25zZTxzdHJpbmc+IHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgICAgICAgc3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayhbJ3Jldi1saXN0JywgJy0tbWF4LXBhcmVudHM9MCcsICdIRUFEJ10sIHRydWUpLFxuICAgICAgICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICAgICAgICk7XG4gICAgICB9LFxuICAgfTtcbn1cbiIsICJpbXBvcnQgeyBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrIH0gZnJvbSAnLi90YXNrJztcbmltcG9ydCB7IFN0cmluZ1Rhc2sgfSBmcm9tICcuLi90eXBlcyc7XG5cbi8qKlxuICogVGFzayB1c2VkIGJ5IGBnaXQuaGFzaE9iamVjdGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc2hPYmplY3RUYXNrKGZpbGVQYXRoOiBzdHJpbmcsIHdyaXRlOiBib29sZWFuKTogU3RyaW5nVGFzazxzdHJpbmc+IHtcbiAgIGNvbnN0IGNvbW1hbmRzID0gWydoYXNoLW9iamVjdCcsIGZpbGVQYXRoXTtcbiAgIGlmICh3cml0ZSkge1xuICAgICAgY29tbWFuZHMucHVzaCgnLXcnKTtcbiAgIH1cblxuICAgcmV0dXJuIHN0cmFpZ2h0VGhyb3VnaFN0cmluZ1Rhc2soY29tbWFuZHMsIHRydWUpO1xufVxuIiwgImltcG9ydCB7IEluaXRSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcblxuZXhwb3J0IGNsYXNzIEluaXRTdW1tYXJ5IGltcGxlbWVudHMgSW5pdFJlc3VsdCB7XG4gICBjb25zdHJ1Y3RvcihcbiAgICAgIHB1YmxpYyByZWFkb25seSBiYXJlOiBib29sZWFuLFxuICAgICAgcHVibGljIHJlYWRvbmx5IHBhdGg6IHN0cmluZyxcbiAgICAgIHB1YmxpYyByZWFkb25seSBleGlzdGluZzogYm9vbGVhbixcbiAgICAgIHB1YmxpYyByZWFkb25seSBnaXREaXI6IHN0cmluZ1xuICAgKSB7fVxufVxuXG5jb25zdCBpbml0UmVzcG9uc2VSZWdleCA9IC9eSW5pdC4rIHJlcG9zaXRvcnkgaW4gKC4rKSQvO1xuY29uc3QgcmVJbml0UmVzcG9uc2VSZWdleCA9IC9eUmVpbi4rIGluICguKykkLztcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSW5pdChiYXJlOiBib29sZWFuLCBwYXRoOiBzdHJpbmcsIHRleHQ6IHN0cmluZykge1xuICAgY29uc3QgcmVzcG9uc2UgPSBTdHJpbmcodGV4dCkudHJpbSgpO1xuICAgbGV0IHJlc3VsdDtcblxuICAgaWYgKChyZXN1bHQgPSBpbml0UmVzcG9uc2VSZWdleC5leGVjKHJlc3BvbnNlKSkpIHtcbiAgICAgIHJldHVybiBuZXcgSW5pdFN1bW1hcnkoYmFyZSwgcGF0aCwgZmFsc2UsIHJlc3VsdFsxXSk7XG4gICB9XG5cbiAgIGlmICgocmVzdWx0ID0gcmVJbml0UmVzcG9uc2VSZWdleC5leGVjKHJlc3BvbnNlKSkpIHtcbiAgICAgIHJldHVybiBuZXcgSW5pdFN1bW1hcnkoYmFyZSwgcGF0aCwgdHJ1ZSwgcmVzdWx0WzFdKTtcbiAgIH1cblxuICAgbGV0IGdpdERpciA9ICcnO1xuICAgY29uc3QgdG9rZW5zID0gcmVzcG9uc2Uuc3BsaXQoJyAnKTtcbiAgIHdoaWxlICh0b2tlbnMubGVuZ3RoKSB7XG4gICAgICBjb25zdCB0b2tlbiA9IHRva2Vucy5zaGlmdCgpO1xuICAgICAgaWYgKHRva2VuID09PSAnaW4nKSB7XG4gICAgICAgICBnaXREaXIgPSB0b2tlbnMuam9pbignICcpO1xuICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICB9XG5cbiAgIHJldHVybiBuZXcgSW5pdFN1bW1hcnkoYmFyZSwgcGF0aCwgL15yZS9pLnRlc3QocmVzcG9uc2UpLCBnaXREaXIpO1xufVxuIiwgImltcG9ydCB7IEluaXRSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IHBhcnNlSW5pdCB9IGZyb20gJy4uL3Jlc3BvbnNlcy9Jbml0U3VtbWFyeSc7XG5pbXBvcnQgeyBTdHJpbmdUYXNrIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5jb25zdCBiYXJlQ29tbWFuZCA9ICctLWJhcmUnO1xuXG5mdW5jdGlvbiBoYXNCYXJlQ29tbWFuZChjb21tYW5kOiBzdHJpbmdbXSkge1xuICAgcmV0dXJuIGNvbW1hbmQuaW5jbHVkZXMoYmFyZUNvbW1hbmQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdFRhc2soYmFyZSA9IGZhbHNlLCBwYXRoOiBzdHJpbmcsIGN1c3RvbUFyZ3M6IHN0cmluZ1tdKTogU3RyaW5nVGFzazxJbml0UmVzdWx0PiB7XG4gICBjb25zdCBjb21tYW5kcyA9IFsnaW5pdCcsIC4uLmN1c3RvbUFyZ3NdO1xuICAgaWYgKGJhcmUgJiYgIWhhc0JhcmVDb21tYW5kKGNvbW1hbmRzKSkge1xuICAgICAgY29tbWFuZHMuc3BsaWNlKDEsIDAsIGJhcmVDb21tYW5kKTtcbiAgIH1cblxuICAgcmV0dXJuIHtcbiAgICAgIGNvbW1hbmRzLFxuICAgICAgZm9ybWF0OiAndXRmLTgnLFxuICAgICAgcGFyc2VyKHRleHQ6IHN0cmluZyk6IEluaXRSZXN1bHQge1xuICAgICAgICAgcmV0dXJuIHBhcnNlSW5pdChjb21tYW5kcy5pbmNsdWRlcygnLS1iYXJlJyksIHBhdGgsIHRleHQpO1xuICAgICAgfSxcbiAgIH07XG59XG4iLCAiZXhwb3J0IGVudW0gTG9nRm9ybWF0IHtcbiAgIE5PTkUgPSAnJyxcbiAgIFNUQVQgPSAnLS1zdGF0JyxcbiAgIE5VTV9TVEFUID0gJy0tbnVtc3RhdCcsXG4gICBOQU1FX09OTFkgPSAnLS1uYW1lLW9ubHknLFxuICAgTkFNRV9TVEFUVVMgPSAnLS1uYW1lLXN0YXR1cycsXG59XG5cbmNvbnN0IGxvZ0Zvcm1hdFJlZ2V4ID0gL14tLShzdGF0fG51bXN0YXR8bmFtZS1vbmx5fG5hbWUtc3RhdHVzKSg9fCQpLztcblxuZXhwb3J0IGZ1bmN0aW9uIGxvZ0Zvcm1hdEZyb21Db21tYW5kKGN1c3RvbUFyZ3M6IHN0cmluZ1tdKSB7XG4gICBmb3IgKGxldCBpID0gMDsgaSA8IGN1c3RvbUFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGZvcm1hdCA9IGxvZ0Zvcm1hdFJlZ2V4LmV4ZWMoY3VzdG9tQXJnc1tpXSk7XG4gICAgICBpZiAoZm9ybWF0KSB7XG4gICAgICAgICByZXR1cm4gYC0tJHtmb3JtYXRbMV19YCBhcyBMb2dGb3JtYXQ7XG4gICAgICB9XG4gICB9XG5cbiAgIHJldHVybiBMb2dGb3JtYXQuTk9ORTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTG9nRm9ybWF0KGN1c3RvbUFyZzogc3RyaW5nIHwgdW5rbm93bikge1xuICAgcmV0dXJuIGxvZ0Zvcm1hdFJlZ2V4LnRlc3QoY3VzdG9tQXJnIGFzIHN0cmluZyk7XG59XG4iLCAiaW1wb3J0IHsgRGlmZlJlc3VsdCwgRGlmZlJlc3VsdEJpbmFyeUZpbGUsIERpZmZSZXN1bHRUZXh0RmlsZSB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuXG4vKioqXG4gKiBUaGUgRGlmZlN1bW1hcnkgaXMgcmV0dXJuZWQgYXMgYSByZXNwb25zZSB0byBnZXR0aW5nIGBnaXQoKS5zdGF0dXMoKWBcbiAqL1xuZXhwb3J0IGNsYXNzIERpZmZTdW1tYXJ5IGltcGxlbWVudHMgRGlmZlJlc3VsdCB7XG4gICBjaGFuZ2VkID0gMDtcbiAgIGRlbGV0aW9ucyA9IDA7XG4gICBpbnNlcnRpb25zID0gMDtcblxuICAgZmlsZXM6IEFycmF5PERpZmZSZXN1bHRUZXh0RmlsZSB8IERpZmZSZXN1bHRCaW5hcnlGaWxlPiA9IFtdO1xufVxuIiwgImltcG9ydCB7IERpZmZSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IExvZ0Zvcm1hdCB9IGZyb20gJy4uL2FyZ3MvbG9nLWZvcm1hdCc7XG5pbXBvcnQgeyBEaWZmU3VtbWFyeSB9IGZyb20gJy4uL3Jlc3BvbnNlcy9EaWZmU3VtbWFyeSc7XG5pbXBvcnQgeyBpc0RpZmZOYW1lU3RhdHVzIH0gZnJvbSAnLi4vdGFza3MvZGlmZi1uYW1lLXN0YXR1cyc7XG5pbXBvcnQgeyBhc051bWJlciwgTGluZVBhcnNlciwgb3JWb2lkLCBwYXJzZVN0cmluZ1Jlc3BvbnNlIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5jb25zdCBzdGF0UGFyc2VyID0gW1xuICAgbmV3IExpbmVQYXJzZXI8RGlmZlJlc3VsdD4oXG4gICAgICAvXiguKylcXHMrXFx8XFxzKyhcXGQrKShcXHMrWytcXC1dKyk/JC8sXG4gICAgICAocmVzdWx0LCBbZmlsZSwgY2hhbmdlcywgYWx0ZXJhdGlvbnMgPSAnJ10pID0+IHtcbiAgICAgICAgIHJlc3VsdC5maWxlcy5wdXNoKHtcbiAgICAgICAgICAgIGZpbGU6IGZpbGUudHJpbSgpLFxuICAgICAgICAgICAgY2hhbmdlczogYXNOdW1iZXIoY2hhbmdlcyksXG4gICAgICAgICAgICBpbnNlcnRpb25zOiBhbHRlcmF0aW9ucy5yZXBsYWNlKC9bXitdL2csICcnKS5sZW5ndGgsXG4gICAgICAgICAgICBkZWxldGlvbnM6IGFsdGVyYXRpb25zLnJlcGxhY2UoL1teLV0vZywgJycpLmxlbmd0aCxcbiAgICAgICAgICAgIGJpbmFyeTogZmFsc2UsXG4gICAgICAgICB9KTtcbiAgICAgIH1cbiAgICksXG4gICBuZXcgTGluZVBhcnNlcjxEaWZmUmVzdWx0PihcbiAgICAgIC9eKC4rKSBcXHxcXHMrQmluIChbMC05Ll0rKSAtPiAoWzAtOS5dKykgKFthLXpdKykvLFxuICAgICAgKHJlc3VsdCwgW2ZpbGUsIGJlZm9yZSwgYWZ0ZXJdKSA9PiB7XG4gICAgICAgICByZXN1bHQuZmlsZXMucHVzaCh7XG4gICAgICAgICAgICBmaWxlOiBmaWxlLnRyaW0oKSxcbiAgICAgICAgICAgIGJlZm9yZTogYXNOdW1iZXIoYmVmb3JlKSxcbiAgICAgICAgICAgIGFmdGVyOiBhc051bWJlcihhZnRlciksXG4gICAgICAgICAgICBiaW5hcnk6IHRydWUsXG4gICAgICAgICB9KTtcbiAgICAgIH1cbiAgICksXG4gICBuZXcgTGluZVBhcnNlcjxEaWZmUmVzdWx0PihcbiAgICAgIC8oXFxkKykgZmlsZXM/IGNoYW5nZWRcXHMqKCg/OiwgXFxkKyBbXixdKyl7MCwyfSkvLFxuICAgICAgKHJlc3VsdCwgW2NoYW5nZWQsIHN1bW1hcnldKSA9PiB7XG4gICAgICAgICBjb25zdCBpbnNlcnRlZCA9IC8oXFxkKykgaS8uZXhlYyhzdW1tYXJ5KTtcbiAgICAgICAgIGNvbnN0IGRlbGV0ZWQgPSAvKFxcZCspIGQvLmV4ZWMoc3VtbWFyeSk7XG5cbiAgICAgICAgIHJlc3VsdC5jaGFuZ2VkID0gYXNOdW1iZXIoY2hhbmdlZCk7XG4gICAgICAgICByZXN1bHQuaW5zZXJ0aW9ucyA9IGFzTnVtYmVyKGluc2VydGVkPy5bMV0pO1xuICAgICAgICAgcmVzdWx0LmRlbGV0aW9ucyA9IGFzTnVtYmVyKGRlbGV0ZWQ/LlsxXSk7XG4gICAgICB9XG4gICApLFxuXTtcblxuY29uc3QgbnVtU3RhdFBhcnNlciA9IFtcbiAgIG5ldyBMaW5lUGFyc2VyPERpZmZSZXN1bHQ+KFxuICAgICAgLyhcXGQrKVxcdChcXGQrKVxcdCguKykkLyxcbiAgICAgIChyZXN1bHQsIFtjaGFuZ2VzSW5zZXJ0LCBjaGFuZ2VzRGVsZXRlLCBmaWxlXSkgPT4ge1xuICAgICAgICAgY29uc3QgaW5zZXJ0aW9ucyA9IGFzTnVtYmVyKGNoYW5nZXNJbnNlcnQpO1xuICAgICAgICAgY29uc3QgZGVsZXRpb25zID0gYXNOdW1iZXIoY2hhbmdlc0RlbGV0ZSk7XG5cbiAgICAgICAgIHJlc3VsdC5jaGFuZ2VkKys7XG4gICAgICAgICByZXN1bHQuaW5zZXJ0aW9ucyArPSBpbnNlcnRpb25zO1xuICAgICAgICAgcmVzdWx0LmRlbGV0aW9ucyArPSBkZWxldGlvbnM7XG5cbiAgICAgICAgIHJlc3VsdC5maWxlcy5wdXNoKHtcbiAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICBjaGFuZ2VzOiBpbnNlcnRpb25zICsgZGVsZXRpb25zLFxuICAgICAgICAgICAgaW5zZXJ0aW9ucyxcbiAgICAgICAgICAgIGRlbGV0aW9ucyxcbiAgICAgICAgICAgIGJpbmFyeTogZmFsc2UsXG4gICAgICAgICB9KTtcbiAgICAgIH1cbiAgICksXG4gICBuZXcgTGluZVBhcnNlcjxEaWZmUmVzdWx0PigvLVxcdC1cXHQoLispJC8sIChyZXN1bHQsIFtmaWxlXSkgPT4ge1xuICAgICAgcmVzdWx0LmNoYW5nZWQrKztcblxuICAgICAgcmVzdWx0LmZpbGVzLnB1c2goe1xuICAgICAgICAgZmlsZSxcbiAgICAgICAgIGFmdGVyOiAwLFxuICAgICAgICAgYmVmb3JlOiAwLFxuICAgICAgICAgYmluYXJ5OiB0cnVlLFxuICAgICAgfSk7XG4gICB9KSxcbl07XG5cbmNvbnN0IG5hbWVPbmx5UGFyc2VyID0gW1xuICAgbmV3IExpbmVQYXJzZXI8RGlmZlJlc3VsdD4oLyguKykkLywgKHJlc3VsdCwgW2ZpbGVdKSA9PiB7XG4gICAgICByZXN1bHQuY2hhbmdlZCsrO1xuICAgICAgcmVzdWx0LmZpbGVzLnB1c2goe1xuICAgICAgICAgZmlsZSxcbiAgICAgICAgIGNoYW5nZXM6IDAsXG4gICAgICAgICBpbnNlcnRpb25zOiAwLFxuICAgICAgICAgZGVsZXRpb25zOiAwLFxuICAgICAgICAgYmluYXJ5OiBmYWxzZSxcbiAgICAgIH0pO1xuICAgfSksXG5dO1xuXG5jb25zdCBuYW1lU3RhdHVzUGFyc2VyID0gW1xuICAgbmV3IExpbmVQYXJzZXI8RGlmZlJlc3VsdD4oXG4gICAgICAvKFtBQ0RNUlRVWEJdKShbMC05XXswLDN9KVxcdCguW15cXHRdKikoXFx0KC5bXlxcdF0qKSk/JC8sXG4gICAgICAocmVzdWx0LCBbc3RhdHVzLCBfc2ltaWxhcml0eSwgZnJvbSwgX3RvLCB0b10pID0+IHtcbiAgICAgICAgIHJlc3VsdC5jaGFuZ2VkKys7XG4gICAgICAgICByZXN1bHQuZmlsZXMucHVzaCh7XG4gICAgICAgICAgICBmaWxlOiB0byA/PyBmcm9tLFxuICAgICAgICAgICAgY2hhbmdlczogMCxcbiAgICAgICAgICAgIHN0YXR1czogb3JWb2lkKGlzRGlmZk5hbWVTdGF0dXMoc3RhdHVzKSAmJiBzdGF0dXMpLFxuICAgICAgICAgICAgaW5zZXJ0aW9uczogMCxcbiAgICAgICAgICAgIGRlbGV0aW9uczogMCxcbiAgICAgICAgICAgIGJpbmFyeTogZmFsc2UsXG4gICAgICAgICB9KTtcbiAgICAgIH1cbiAgICksXG5dO1xuXG5jb25zdCBkaWZmU3VtbWFyeVBhcnNlcnM6IFJlY29yZDxMb2dGb3JtYXQsIExpbmVQYXJzZXI8RGlmZlJlc3VsdD5bXT4gPSB7XG4gICBbTG9nRm9ybWF0Lk5PTkVdOiBzdGF0UGFyc2VyLFxuICAgW0xvZ0Zvcm1hdC5TVEFUXTogc3RhdFBhcnNlcixcbiAgIFtMb2dGb3JtYXQuTlVNX1NUQVRdOiBudW1TdGF0UGFyc2VyLFxuICAgW0xvZ0Zvcm1hdC5OQU1FX1NUQVRVU106IG5hbWVTdGF0dXNQYXJzZXIsXG4gICBbTG9nRm9ybWF0Lk5BTUVfT05MWV06IG5hbWVPbmx5UGFyc2VyLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldERpZmZQYXJzZXIoZm9ybWF0ID0gTG9nRm9ybWF0Lk5PTkUpIHtcbiAgIGNvbnN0IHBhcnNlciA9IGRpZmZTdW1tYXJ5UGFyc2Vyc1tmb3JtYXRdO1xuXG4gICByZXR1cm4gKHN0ZE91dDogc3RyaW5nKSA9PiBwYXJzZVN0cmluZ1Jlc3BvbnNlKG5ldyBEaWZmU3VtbWFyeSgpLCBwYXJzZXIsIHN0ZE91dCwgZmFsc2UpO1xufVxuIiwgImltcG9ydCB7IExpc3RMb2dMaW5lLCBMb2dSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IHRvTGluZXNXaXRoQ29udGVudCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IGdldERpZmZQYXJzZXIgfSBmcm9tICcuL3BhcnNlLWRpZmYtc3VtbWFyeSc7XG5pbXBvcnQgeyBMb2dGb3JtYXQgfSBmcm9tICcuLi9hcmdzL2xvZy1mb3JtYXQnO1xuXG5leHBvcnQgY29uc3QgU1RBUlRfQk9VTkRBUlkgPSAnXHUwMEYyXHUwMEYyXHUwMEYyXHUwMEYyXHUwMEYyXHUwMEYyICc7XG5cbmV4cG9ydCBjb25zdCBDT01NSVRfQk9VTkRBUlkgPSAnIFx1MDBGMlx1MDBGMic7XG5cbmV4cG9ydCBjb25zdCBTUExJVFRFUiA9ICcgXHUwMEYyICc7XG5cbmNvbnN0IGRlZmF1bHRGaWVsZE5hbWVzID0gWydoYXNoJywgJ2RhdGUnLCAnbWVzc2FnZScsICdyZWZzJywgJ2F1dGhvcl9uYW1lJywgJ2F1dGhvcl9lbWFpbCddO1xuXG5mdW5jdGlvbiBsaW5lQnVpbGRlcih0b2tlbnM6IHN0cmluZ1tdLCBmaWVsZHM6IHN0cmluZ1tdKTogYW55IHtcbiAgIHJldHVybiBmaWVsZHMucmVkdWNlKFxuICAgICAgKGxpbmUsIGZpZWxkLCBpbmRleCkgPT4ge1xuICAgICAgICAgbGluZVtmaWVsZF0gPSB0b2tlbnNbaW5kZXhdIHx8ICcnO1xuICAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgICB9LFxuICAgICAgT2JqZWN0LmNyZWF0ZSh7IGRpZmY6IG51bGwgfSkgYXMgYW55XG4gICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTGlzdExvZ1N1bW1hcnlQYXJzZXI8VCA9IGFueT4oXG4gICBzcGxpdHRlciA9IFNQTElUVEVSLFxuICAgZmllbGRzID0gZGVmYXVsdEZpZWxkTmFtZXMsXG4gICBsb2dGb3JtYXQgPSBMb2dGb3JtYXQuTk9ORVxuKSB7XG4gICBjb25zdCBwYXJzZURpZmZSZXN1bHQgPSBnZXREaWZmUGFyc2VyKGxvZ0Zvcm1hdCk7XG5cbiAgIHJldHVybiBmdW5jdGlvbiAoc3RkT3V0OiBzdHJpbmcpOiBMb2dSZXN1bHQ8VD4ge1xuICAgICAgY29uc3QgYWxsOiBSZWFkb25seUFycmF5PFQgJiBMaXN0TG9nTGluZT4gPSB0b0xpbmVzV2l0aENvbnRlbnQoXG4gICAgICAgICBzdGRPdXQsXG4gICAgICAgICB0cnVlLFxuICAgICAgICAgU1RBUlRfQk9VTkRBUllcbiAgICAgICkubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICBjb25zdCBsaW5lRGV0YWlsID0gaXRlbS50cmltKCkuc3BsaXQoQ09NTUlUX0JPVU5EQVJZKTtcbiAgICAgICAgIGNvbnN0IGxpc3RMb2dMaW5lOiBUICYgTGlzdExvZ0xpbmUgPSBsaW5lQnVpbGRlcihcbiAgICAgICAgICAgIGxpbmVEZXRhaWxbMF0udHJpbSgpLnNwbGl0KHNwbGl0dGVyKSxcbiAgICAgICAgICAgIGZpZWxkc1xuICAgICAgICAgKTtcblxuICAgICAgICAgaWYgKGxpbmVEZXRhaWwubGVuZ3RoID4gMSAmJiAhIWxpbmVEZXRhaWxbMV0udHJpbSgpKSB7XG4gICAgICAgICAgICBsaXN0TG9nTGluZS5kaWZmID0gcGFyc2VEaWZmUmVzdWx0KGxpbmVEZXRhaWxbMV0pO1xuICAgICAgICAgfVxuXG4gICAgICAgICByZXR1cm4gbGlzdExvZ0xpbmU7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgIGFsbCxcbiAgICAgICAgIGxhdGVzdDogKGFsbC5sZW5ndGggJiYgYWxsWzBdKSB8fCBudWxsLFxuICAgICAgICAgdG90YWw6IGFsbC5sZW5ndGgsXG4gICAgICB9O1xuICAgfTtcbn1cbiIsICJpbXBvcnQgeyBTdHJpbmdUYXNrIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgRGlmZlJlc3VsdCB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuaW1wb3J0IHsgaXNMb2dGb3JtYXQsIExvZ0Zvcm1hdCwgbG9nRm9ybWF0RnJvbUNvbW1hbmQgfSBmcm9tICcuLi9hcmdzL2xvZy1mb3JtYXQnO1xuaW1wb3J0IHsgZ2V0RGlmZlBhcnNlciB9IGZyb20gJy4uL3BhcnNlcnMvcGFyc2UtZGlmZi1zdW1tYXJ5JztcbmltcG9ydCB7IGNvbmZpZ3VyYXRpb25FcnJvclRhc2ssIEVtcHR5VGFzayB9IGZyb20gJy4vdGFzayc7XG5cbmV4cG9ydCBmdW5jdGlvbiBkaWZmU3VtbWFyeVRhc2soY3VzdG9tQXJnczogc3RyaW5nW10pOiBTdHJpbmdUYXNrPERpZmZSZXN1bHQ+IHwgRW1wdHlUYXNrIHtcbiAgIGxldCBsb2dGb3JtYXQgPSBsb2dGb3JtYXRGcm9tQ29tbWFuZChjdXN0b21BcmdzKTtcblxuICAgY29uc3QgY29tbWFuZHMgPSBbJ2RpZmYnXTtcblxuICAgaWYgKGxvZ0Zvcm1hdCA9PT0gTG9nRm9ybWF0Lk5PTkUpIHtcbiAgICAgIGxvZ0Zvcm1hdCA9IExvZ0Zvcm1hdC5TVEFUO1xuICAgICAgY29tbWFuZHMucHVzaCgnLS1zdGF0PTQwOTYnKTtcbiAgIH1cblxuICAgY29tbWFuZHMucHVzaCguLi5jdXN0b21BcmdzKTtcblxuICAgcmV0dXJuIChcbiAgICAgIHZhbGlkYXRlTG9nRm9ybWF0Q29uZmlnKGNvbW1hbmRzKSB8fCB7XG4gICAgICAgICBjb21tYW5kcyxcbiAgICAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgICAgIHBhcnNlcjogZ2V0RGlmZlBhcnNlcihsb2dGb3JtYXQpLFxuICAgICAgfVxuICAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlTG9nRm9ybWF0Q29uZmlnKGN1c3RvbUFyZ3M6IHVua25vd25bXSk6IEVtcHR5VGFzayB8IHZvaWQge1xuICAgY29uc3QgZmxhZ3MgPSBjdXN0b21BcmdzLmZpbHRlcihpc0xvZ0Zvcm1hdCk7XG5cbiAgIGlmIChmbGFncy5sZW5ndGggPiAxKSB7XG4gICAgICByZXR1cm4gY29uZmlndXJhdGlvbkVycm9yVGFzayhcbiAgICAgICAgIGBTdW1tYXJ5IGZsYWdzIGFyZSBtdXR1YWxseSBleGNsdXNpdmUgLSBwaWNrIG9uZSBvZiAke2ZsYWdzLmpvaW4oJywnKX1gXG4gICAgICApO1xuICAgfVxuXG4gICBpZiAoZmxhZ3MubGVuZ3RoICYmIGN1c3RvbUFyZ3MuaW5jbHVkZXMoJy16JykpIHtcbiAgICAgIHJldHVybiBjb25maWd1cmF0aW9uRXJyb3JUYXNrKFxuICAgICAgICAgYFN1bW1hcnkgZmxhZyAke2ZsYWdzfSBwYXJzaW5nIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggbnVsbCB0ZXJtaW5hdGlvbiBvcHRpb24gJy16J2BcbiAgICAgICk7XG4gICB9XG59XG4iLCAiaW1wb3J0IHR5cGUgeyBPcHRpb25zLCBTdHJpbmdUYXNrIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBMb2dSZXN1bHQsIFNpbXBsZUdpdCB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuaW1wb3J0IHsgbG9nRm9ybWF0RnJvbUNvbW1hbmQgfSBmcm9tICcuLi9hcmdzL2xvZy1mb3JtYXQnO1xuaW1wb3J0IHsgcGF0aHNwZWMgfSBmcm9tICcuLi9hcmdzL3BhdGhzcGVjJztcbmltcG9ydCB7XG4gICBDT01NSVRfQk9VTkRBUlksXG4gICBjcmVhdGVMaXN0TG9nU3VtbWFyeVBhcnNlcixcbiAgIFNQTElUVEVSLFxuICAgU1RBUlRfQk9VTkRBUlksXG59IGZyb20gJy4uL3BhcnNlcnMvcGFyc2UtbGlzdC1sb2ctc3VtbWFyeSc7XG5pbXBvcnQge1xuICAgYXBwZW5kVGFza09wdGlvbnMsXG4gICBmaWx0ZXJBcnJheSxcbiAgIGZpbHRlclByaW1pdGl2ZXMsXG4gICBmaWx0ZXJTdHJpbmcsXG4gICBmaWx0ZXJUeXBlLFxuICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50LFxuICAgdHJhaWxpbmdPcHRpb25zQXJndW1lbnQsXG59IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IFNpbXBsZUdpdEFwaSB9IGZyb20gJy4uL3NpbXBsZS1naXQtYXBpJztcbmltcG9ydCB7IGNvbmZpZ3VyYXRpb25FcnJvclRhc2sgfSBmcm9tICcuL3Rhc2snO1xuaW1wb3J0IHsgdmFsaWRhdGVMb2dGb3JtYXRDb25maWcgfSBmcm9tICcuL2RpZmYnO1xuXG5lbnVtIGV4Y2x1ZGVPcHRpb25zIHtcbiAgICctLXByZXR0eScsXG4gICAnbWF4LWNvdW50JyxcbiAgICdtYXhDb3VudCcsXG4gICAnbicsXG4gICAnZmlsZScsXG4gICAnZm9ybWF0JyxcbiAgICdmcm9tJyxcbiAgICd0bycsXG4gICAnc3BsaXR0ZXInLFxuICAgJ3N5bW1ldHJpYycsXG4gICAnbWFpbE1hcCcsXG4gICAnbXVsdGlMaW5lJyxcbiAgICdzdHJpY3REYXRlJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEZWZhdWx0TG9nRmllbGRzIHtcbiAgIGhhc2g6IHN0cmluZztcbiAgIGRhdGU6IHN0cmluZztcbiAgIG1lc3NhZ2U6IHN0cmluZztcbiAgIHJlZnM6IHN0cmluZztcbiAgIGJvZHk6IHN0cmluZztcbiAgIGF1dGhvcl9uYW1lOiBzdHJpbmc7XG4gICBhdXRob3JfZW1haWw6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgTG9nT3B0aW9uczxUID0gRGVmYXVsdExvZ0ZpZWxkcz4gPSB7XG4gICBmaWxlPzogc3RyaW5nO1xuICAgZm9ybWF0PzogVDtcbiAgIGZyb20/OiBzdHJpbmc7XG4gICBtYWlsTWFwPzogYm9vbGVhbjtcbiAgIG1heENvdW50PzogbnVtYmVyO1xuICAgbXVsdGlMaW5lPzogYm9vbGVhbjtcbiAgIHNwbGl0dGVyPzogc3RyaW5nO1xuICAgc3RyaWN0RGF0ZT86IGJvb2xlYW47XG4gICBzeW1tZXRyaWM/OiBib29sZWFuO1xuICAgdG8/OiBzdHJpbmc7XG59O1xuXG5pbnRlcmZhY2UgUGFyc2VkTG9nT3B0aW9ucyB7XG4gICBmaWVsZHM6IHN0cmluZ1tdO1xuICAgc3BsaXR0ZXI6IHN0cmluZztcbiAgIGNvbW1hbmRzOiBzdHJpbmdbXTtcbn1cblxuZnVuY3Rpb24gcHJldHR5Rm9ybWF0KFxuICAgZm9ybWF0OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCB1bmtub3duPixcbiAgIHNwbGl0dGVyOiBzdHJpbmdcbik6IFtzdHJpbmdbXSwgc3RyaW5nXSB7XG4gICBjb25zdCBmaWVsZHM6IHN0cmluZ1tdID0gW107XG4gICBjb25zdCBmb3JtYXRTdHI6IHN0cmluZ1tdID0gW107XG5cbiAgIE9iamVjdC5rZXlzKGZvcm1hdCkuZm9yRWFjaCgoZmllbGQpID0+IHtcbiAgICAgIGZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICAgIGZvcm1hdFN0ci5wdXNoKFN0cmluZyhmb3JtYXRbZmllbGRdKSk7XG4gICB9KTtcblxuICAgcmV0dXJuIFtmaWVsZHMsIGZvcm1hdFN0ci5qb2luKHNwbGl0dGVyKV07XG59XG5cbmZ1bmN0aW9uIHVzZXJPcHRpb25zPFQgZXh0ZW5kcyBPcHRpb25zPihpbnB1dDogVCk6IE9wdGlvbnMge1xuICAgcmV0dXJuIE9iamVjdC5rZXlzKGlucHV0KS5yZWR1Y2UoKG91dCwga2V5KSA9PiB7XG4gICAgICBpZiAoIShrZXkgaW4gZXhjbHVkZU9wdGlvbnMpKSB7XG4gICAgICAgICBvdXRba2V5XSA9IGlucHV0W2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgfSwge30gYXMgT3B0aW9ucyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUxvZ09wdGlvbnM8VCBleHRlbmRzIE9wdGlvbnM+KFxuICAgb3B0OiBPcHRpb25zIHwgTG9nT3B0aW9uczxUPiA9IHt9LFxuICAgY3VzdG9tQXJnczogc3RyaW5nW10gPSBbXVxuKTogUGFyc2VkTG9nT3B0aW9ucyB7XG4gICBjb25zdCBzcGxpdHRlciA9IGZpbHRlclR5cGUob3B0LnNwbGl0dGVyLCBmaWx0ZXJTdHJpbmcsIFNQTElUVEVSKTtcbiAgIGNvbnN0IGZvcm1hdCA9XG4gICAgICAhZmlsdGVyUHJpbWl0aXZlcyhvcHQuZm9ybWF0KSAmJiBvcHQuZm9ybWF0XG4gICAgICAgICA/IG9wdC5mb3JtYXRcbiAgICAgICAgIDoge1xuICAgICAgICAgICAgICBoYXNoOiAnJUgnLFxuICAgICAgICAgICAgICBkYXRlOiBvcHQuc3RyaWN0RGF0ZSA9PT0gZmFsc2UgPyAnJWFpJyA6ICclYUknLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnJXMnLFxuICAgICAgICAgICAgICByZWZzOiAnJUQnLFxuICAgICAgICAgICAgICBib2R5OiBvcHQubXVsdGlMaW5lID8gJyVCJyA6ICclYicsXG4gICAgICAgICAgICAgIGF1dGhvcl9uYW1lOiBvcHQubWFpbE1hcCAhPT0gZmFsc2UgPyAnJWFOJyA6ICclYW4nLFxuICAgICAgICAgICAgICBhdXRob3JfZW1haWw6IG9wdC5tYWlsTWFwICE9PSBmYWxzZSA/ICclYUUnIDogJyVhZScsXG4gICAgICAgICAgIH07XG5cbiAgIGNvbnN0IFtmaWVsZHMsIGZvcm1hdFN0cl0gPSBwcmV0dHlGb3JtYXQoZm9ybWF0LCBzcGxpdHRlcik7XG5cbiAgIGNvbnN0IHN1ZmZpeDogc3RyaW5nW10gPSBbXTtcbiAgIGNvbnN0IGNvbW1hbmQ6IHN0cmluZ1tdID0gW1xuICAgICAgYC0tcHJldHR5PWZvcm1hdDoke1NUQVJUX0JPVU5EQVJZfSR7Zm9ybWF0U3RyfSR7Q09NTUlUX0JPVU5EQVJZfWAsXG4gICAgICAuLi5jdXN0b21BcmdzLFxuICAgXTtcblxuICAgY29uc3QgbWF4Q291bnQ6IG51bWJlciB8IHVuZGVmaW5lZCA9IChvcHQgYXMgYW55KS5uIHx8IChvcHQgYXMgYW55KVsnbWF4LWNvdW50J10gfHwgb3B0Lm1heENvdW50O1xuICAgaWYgKG1heENvdW50KSB7XG4gICAgICBjb21tYW5kLnB1c2goYC0tbWF4LWNvdW50PSR7bWF4Q291bnR9YCk7XG4gICB9XG5cbiAgIGlmIChvcHQuZnJvbSB8fCBvcHQudG8pIHtcbiAgICAgIGNvbnN0IHJhbmdlT3BlcmF0b3IgPSBvcHQuc3ltbWV0cmljICE9PSBmYWxzZSA/ICcuLi4nIDogJy4uJztcbiAgICAgIHN1ZmZpeC5wdXNoKGAke29wdC5mcm9tIHx8ICcnfSR7cmFuZ2VPcGVyYXRvcn0ke29wdC50byB8fCAnJ31gKTtcbiAgIH1cblxuICAgaWYgKGZpbHRlclN0cmluZyhvcHQuZmlsZSkpIHtcbiAgICAgIGNvbW1hbmQucHVzaCgnLS1mb2xsb3cnLCBwYXRoc3BlYyhvcHQuZmlsZSkpO1xuICAgfVxuXG4gICBhcHBlbmRUYXNrT3B0aW9ucyh1c2VyT3B0aW9ucyhvcHQgYXMgT3B0aW9ucyksIGNvbW1hbmQpO1xuXG4gICByZXR1cm4ge1xuICAgICAgZmllbGRzLFxuICAgICAgc3BsaXR0ZXIsXG4gICAgICBjb21tYW5kczogWy4uLmNvbW1hbmQsIC4uLnN1ZmZpeF0sXG4gICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9nVGFzazxUPihcbiAgIHNwbGl0dGVyOiBzdHJpbmcsXG4gICBmaWVsZHM6IHN0cmluZ1tdLFxuICAgY3VzdG9tQXJnczogc3RyaW5nW11cbik6IFN0cmluZ1Rhc2s8TG9nUmVzdWx0PFQ+PiB7XG4gICBjb25zdCBwYXJzZXIgPSBjcmVhdGVMaXN0TG9nU3VtbWFyeVBhcnNlcihzcGxpdHRlciwgZmllbGRzLCBsb2dGb3JtYXRGcm9tQ29tbWFuZChjdXN0b21BcmdzKSk7XG5cbiAgIHJldHVybiB7XG4gICAgICBjb21tYW5kczogWydsb2cnLCAuLi5jdXN0b21BcmdzXSxcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIHBhcnNlcixcbiAgIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpOiBQaWNrPFNpbXBsZUdpdCwgJ2xvZyc+IHtcbiAgIHJldHVybiB7XG4gICAgICBsb2c8VCBleHRlbmRzIE9wdGlvbnM+KHRoaXM6IFNpbXBsZUdpdEFwaSwgLi4ucmVzdDogdW5rbm93bltdKSB7XG4gICAgICAgICBjb25zdCBuZXh0ID0gdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cyk7XG4gICAgICAgICBjb25zdCBvcHRpb25zID0gcGFyc2VMb2dPcHRpb25zPFQ+KFxuICAgICAgICAgICAgdHJhaWxpbmdPcHRpb25zQXJndW1lbnQoYXJndW1lbnRzKSxcbiAgICAgICAgICAgIGZpbHRlclR5cGUoYXJndW1lbnRzWzBdLCBmaWx0ZXJBcnJheSlcbiAgICAgICAgICk7XG4gICAgICAgICBjb25zdCB0YXNrID1cbiAgICAgICAgICAgIHJlamVjdERlcHJlY2F0ZWRTaWduYXR1cmVzKC4uLnJlc3QpIHx8XG4gICAgICAgICAgICB2YWxpZGF0ZUxvZ0Zvcm1hdENvbmZpZyhvcHRpb25zLmNvbW1hbmRzKSB8fFxuICAgICAgICAgICAgY3JlYXRlTG9nVGFzayhvcHRpb25zKTtcblxuICAgICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2sodGFzaywgbmV4dCk7XG4gICAgICB9LFxuICAgfTtcblxuICAgZnVuY3Rpb24gY3JlYXRlTG9nVGFzayhvcHRpb25zOiBQYXJzZWRMb2dPcHRpb25zKSB7XG4gICAgICByZXR1cm4gbG9nVGFzayhvcHRpb25zLnNwbGl0dGVyLCBvcHRpb25zLmZpZWxkcywgb3B0aW9ucy5jb21tYW5kcyk7XG4gICB9XG5cbiAgIGZ1bmN0aW9uIHJlamVjdERlcHJlY2F0ZWRTaWduYXR1cmVzKGZyb20/OiB1bmtub3duLCB0bz86IHVua25vd24pIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgICBmaWx0ZXJTdHJpbmcoZnJvbSkgJiZcbiAgICAgICAgIGZpbHRlclN0cmluZyh0bykgJiZcbiAgICAgICAgIGNvbmZpZ3VyYXRpb25FcnJvclRhc2soXG4gICAgICAgICAgICBgZ2l0LmxvZyhzdHJpbmcsIHN0cmluZykgc2hvdWxkIGJlIHJlcGxhY2VkIHdpdGggZ2l0LmxvZyh7IGZyb206IHN0cmluZywgdG86IHN0cmluZyB9KWBcbiAgICAgICAgIClcbiAgICAgICk7XG4gICB9XG59XG4iLCAiaW1wb3J0IHtcbiAgIE1lcmdlQ29uZmxpY3QsXG4gICBNZXJnZUNvbmZsaWN0RGVsZXRpb24sXG4gICBNZXJnZURldGFpbCxcbiAgIE1lcmdlUmVzdWx0U3RhdHVzLFxufSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcblxuZXhwb3J0IGNsYXNzIE1lcmdlU3VtbWFyeUNvbmZsaWN0IGltcGxlbWVudHMgTWVyZ2VDb25mbGljdCB7XG4gICBjb25zdHJ1Y3RvcihcbiAgICAgIHB1YmxpYyByZWFkb25seSByZWFzb246IHN0cmluZyxcbiAgICAgIHB1YmxpYyByZWFkb25seSBmaWxlOiBzdHJpbmcgfCBudWxsID0gbnVsbCxcbiAgICAgIHB1YmxpYyByZWFkb25seSBtZXRhPzogTWVyZ2VDb25mbGljdERlbGV0aW9uXG4gICApIHt9XG5cbiAgIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGAke3RoaXMuZmlsZX06JHt0aGlzLnJlYXNvbn1gO1xuICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTWVyZ2VTdW1tYXJ5RGV0YWlsIGltcGxlbWVudHMgTWVyZ2VEZXRhaWwge1xuICAgcHVibGljIGNvbmZsaWN0czogTWVyZ2VDb25mbGljdFtdID0gW107XG4gICBwdWJsaWMgbWVyZ2VzOiBzdHJpbmdbXSA9IFtdO1xuICAgcHVibGljIHJlc3VsdDogTWVyZ2VSZXN1bHRTdGF0dXMgPSAnc3VjY2Vzcyc7XG5cbiAgIGdldCBmYWlsZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb25mbGljdHMubGVuZ3RoID4gMDtcbiAgIH1cblxuICAgZ2V0IHJlYXNvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlc3VsdDtcbiAgIH1cblxuICAgdG9TdHJpbmcoKSB7XG4gICAgICBpZiAodGhpcy5jb25mbGljdHMubGVuZ3RoKSB7XG4gICAgICAgICByZXR1cm4gYENPTkZMSUNUUzogJHt0aGlzLmNvbmZsaWN0cy5qb2luKCcsICcpfWA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAnT0snO1xuICAgfVxufVxuIiwgImltcG9ydCB7XG4gICBQdWxsRGV0YWlsRmlsZUNoYW5nZXMsXG4gICBQdWxsRGV0YWlsU3VtbWFyeSxcbiAgIFB1bGxGYWlsZWRSZXN1bHQsXG4gICBQdWxsUmVzdWx0LFxufSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcblxuZXhwb3J0IGNsYXNzIFB1bGxTdW1tYXJ5IGltcGxlbWVudHMgUHVsbFJlc3VsdCB7XG4gICBwdWJsaWMgcmVtb3RlTWVzc2FnZXMgPSB7XG4gICAgICBhbGw6IFtdLFxuICAgfTtcbiAgIHB1YmxpYyBjcmVhdGVkID0gW107XG4gICBwdWJsaWMgZGVsZXRlZDogc3RyaW5nW10gPSBbXTtcbiAgIHB1YmxpYyBmaWxlczogc3RyaW5nW10gPSBbXTtcbiAgIHB1YmxpYyBkZWxldGlvbnM6IFB1bGxEZXRhaWxGaWxlQ2hhbmdlcyA9IHt9O1xuICAgcHVibGljIGluc2VydGlvbnM6IFB1bGxEZXRhaWxGaWxlQ2hhbmdlcyA9IHt9O1xuICAgcHVibGljIHN1bW1hcnk6IFB1bGxEZXRhaWxTdW1tYXJ5ID0ge1xuICAgICAgY2hhbmdlczogMCxcbiAgICAgIGRlbGV0aW9uczogMCxcbiAgICAgIGluc2VydGlvbnM6IDAsXG4gICB9O1xufVxuXG5leHBvcnQgY2xhc3MgUHVsbEZhaWxlZFN1bW1hcnkgaW1wbGVtZW50cyBQdWxsRmFpbGVkUmVzdWx0IHtcbiAgIHJlbW90ZSA9ICcnO1xuICAgaGFzaCA9IHtcbiAgICAgIGxvY2FsOiAnJyxcbiAgICAgIHJlbW90ZTogJycsXG4gICB9O1xuICAgYnJhbmNoID0ge1xuICAgICAgbG9jYWw6ICcnLFxuICAgICAgcmVtb3RlOiAnJyxcbiAgIH07XG4gICBtZXNzYWdlID0gJyc7XG5cbiAgIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZTtcbiAgIH1cbn1cbiIsICJpbXBvcnQge1xuICAgUmVtb3RlTWVzc2FnZVJlc3VsdCxcbiAgIFJlbW90ZU1lc3NhZ2VzLFxuICAgUmVtb3RlTWVzc2FnZXNPYmplY3RFbnVtZXJhdGlvbixcbn0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBhc051bWJlciwgUmVtb3RlTGluZVBhcnNlciB9IGZyb20gJy4uL3V0aWxzJztcblxuZnVuY3Rpb24gb2JqZWN0RW51bWVyYXRpb25SZXN1bHQ8VCBleHRlbmRzIFJlbW90ZU1lc3NhZ2VzID0gUmVtb3RlTWVzc2FnZXM+KFxuICAgcmVtb3RlTWVzc2FnZXM6IFRcbik6IFJlbW90ZU1lc3NhZ2VzT2JqZWN0RW51bWVyYXRpb24ge1xuICAgcmV0dXJuIChyZW1vdGVNZXNzYWdlcy5vYmplY3RzID0gcmVtb3RlTWVzc2FnZXMub2JqZWN0cyB8fCB7XG4gICAgICBjb21wcmVzc2luZzogMCxcbiAgICAgIGNvdW50aW5nOiAwLFxuICAgICAgZW51bWVyYXRpbmc6IDAsXG4gICAgICBwYWNrUmV1c2VkOiAwLFxuICAgICAgcmV1c2VkOiB7IGNvdW50OiAwLCBkZWx0YTogMCB9LFxuICAgICAgdG90YWw6IHsgY291bnQ6IDAsIGRlbHRhOiAwIH0sXG4gICB9KTtcbn1cblxuZnVuY3Rpb24gYXNPYmplY3RDb3VudChzb3VyY2U6IHN0cmluZykge1xuICAgY29uc3QgY291bnQgPSAvXlxccyooXFxkKykvLmV4ZWMoc291cmNlKTtcbiAgIGNvbnN0IGRlbHRhID0gL2RlbHRhIChcXGQrKS9pLmV4ZWMoc291cmNlKTtcblxuICAgcmV0dXJuIHtcbiAgICAgIGNvdW50OiBhc051bWJlcigoY291bnQgJiYgY291bnRbMV0pIHx8ICcwJyksXG4gICAgICBkZWx0YTogYXNOdW1iZXIoKGRlbHRhICYmIGRlbHRhWzFdKSB8fCAnMCcpLFxuICAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IHJlbW90ZU1lc3NhZ2VzT2JqZWN0UGFyc2VyczogUmVtb3RlTGluZVBhcnNlcjxSZW1vdGVNZXNzYWdlUmVzdWx0PFJlbW90ZU1lc3NhZ2VzPj5bXSA9XG4gICBbXG4gICAgICBuZXcgUmVtb3RlTGluZVBhcnNlcihcbiAgICAgICAgIC9ecmVtb3RlOlxccyooZW51bWVyYXRpbmd8Y291bnRpbmd8Y29tcHJlc3NpbmcpIG9iamVjdHM6IChcXGQrKSwvaSxcbiAgICAgICAgIChyZXN1bHQsIFthY3Rpb24sIGNvdW50XSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gYWN0aW9uLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBjb25zdCBlbnVtZXJhdGlvbiA9IG9iamVjdEVudW1lcmF0aW9uUmVzdWx0KHJlc3VsdC5yZW1vdGVNZXNzYWdlcyk7XG5cbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZW51bWVyYXRpb24sIHsgW2tleV06IGFzTnVtYmVyKGNvdW50KSB9KTtcbiAgICAgICAgIH1cbiAgICAgICksXG4gICAgICBuZXcgUmVtb3RlTGluZVBhcnNlcihcbiAgICAgICAgIC9ecmVtb3RlOlxccyooZW51bWVyYXRpbmd8Y291bnRpbmd8Y29tcHJlc3NpbmcpIG9iamVjdHM6IFxcZCslIFxcKFxcZCtcXC8oXFxkKylcXCksL2ksXG4gICAgICAgICAocmVzdWx0LCBbYWN0aW9uLCBjb3VudF0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGFjdGlvbi50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgY29uc3QgZW51bWVyYXRpb24gPSBvYmplY3RFbnVtZXJhdGlvblJlc3VsdChyZXN1bHQucmVtb3RlTWVzc2FnZXMpO1xuXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGVudW1lcmF0aW9uLCB7IFtrZXldOiBhc051bWJlcihjb3VudCkgfSk7XG4gICAgICAgICB9XG4gICAgICApLFxuICAgICAgbmV3IFJlbW90ZUxpbmVQYXJzZXIoXG4gICAgICAgICAvdG90YWwgKFteLF0rKSwgcmV1c2VkIChbXixdKyksIHBhY2stcmV1c2VkIChcXGQrKS9pLFxuICAgICAgICAgKHJlc3VsdCwgW3RvdGFsLCByZXVzZWQsIHBhY2tSZXVzZWRdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvYmplY3RzID0gb2JqZWN0RW51bWVyYXRpb25SZXN1bHQocmVzdWx0LnJlbW90ZU1lc3NhZ2VzKTtcbiAgICAgICAgICAgIG9iamVjdHMudG90YWwgPSBhc09iamVjdENvdW50KHRvdGFsKTtcbiAgICAgICAgICAgIG9iamVjdHMucmV1c2VkID0gYXNPYmplY3RDb3VudChyZXVzZWQpO1xuICAgICAgICAgICAgb2JqZWN0cy5wYWNrUmV1c2VkID0gYXNOdW1iZXIocGFja1JldXNlZCk7XG4gICAgICAgICB9XG4gICAgICApLFxuICAgXTtcbiIsICJpbXBvcnQgeyBQdXNoUmVzdWx0UmVtb3RlTWVzc2FnZXMsIFJlbW90ZU1lc3NhZ2VSZXN1bHQsIFJlbW90ZU1lc3NhZ2VzIH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBhc051bWJlciwgcGFyc2VTdHJpbmdSZXNwb25zZSwgUmVtb3RlTGluZVBhcnNlciB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IHJlbW90ZU1lc3NhZ2VzT2JqZWN0UGFyc2VycyB9IGZyb20gJy4vcGFyc2UtcmVtb3RlLW9iamVjdHMnO1xuXG5jb25zdCBwYXJzZXJzOiBSZW1vdGVMaW5lUGFyc2VyPFJlbW90ZU1lc3NhZ2VSZXN1bHQ8UHVzaFJlc3VsdFJlbW90ZU1lc3NhZ2VzIHwgUmVtb3RlTWVzc2FnZXM+PltdID1cbiAgIFtcbiAgICAgIG5ldyBSZW1vdGVMaW5lUGFyc2VyKC9ecmVtb3RlOlxccyooLispJC8sIChyZXN1bHQsIFt0ZXh0XSkgPT4ge1xuICAgICAgICAgcmVzdWx0LnJlbW90ZU1lc3NhZ2VzLmFsbC5wdXNoKHRleHQudHJpbSgpKTtcbiAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0pLFxuICAgICAgLi4ucmVtb3RlTWVzc2FnZXNPYmplY3RQYXJzZXJzLFxuICAgICAgbmV3IFJlbW90ZUxpbmVQYXJzZXIoXG4gICAgICAgICBbL2NyZWF0ZSBhICg/OnB1bGx8bWVyZ2UpIHJlcXVlc3QvaSwgL1xccyhodHRwcz86XFwvXFwvXFxTKykkL10sXG4gICAgICAgICAocmVzdWx0LCBbcHVsbFJlcXVlc3RVcmxdKSA9PiB7XG4gICAgICAgICAgICAocmVzdWx0LnJlbW90ZU1lc3NhZ2VzIGFzIFB1c2hSZXN1bHRSZW1vdGVNZXNzYWdlcykucHVsbFJlcXVlc3RVcmwgPSBwdWxsUmVxdWVzdFVybDtcbiAgICAgICAgIH1cbiAgICAgICksXG4gICAgICBuZXcgUmVtb3RlTGluZVBhcnNlcihcbiAgICAgICAgIFsvZm91bmQgKFxcZCspIHZ1bG5lcmFiaWxpdGllcy4rXFwoKFteKV0rKVxcKS9pLCAvXFxzKGh0dHBzPzpcXC9cXC9cXFMrKSQvXSxcbiAgICAgICAgIChyZXN1bHQsIFtjb3VudCwgc3VtbWFyeSwgdXJsXSkgPT4ge1xuICAgICAgICAgICAgKHJlc3VsdC5yZW1vdGVNZXNzYWdlcyBhcyBQdXNoUmVzdWx0UmVtb3RlTWVzc2FnZXMpLnZ1bG5lcmFiaWxpdGllcyA9IHtcbiAgICAgICAgICAgICAgIGNvdW50OiBhc051bWJlcihjb3VudCksXG4gICAgICAgICAgICAgICBzdW1tYXJ5LFxuICAgICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgIH1cbiAgICAgICksXG4gICBdO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VSZW1vdGVNZXNzYWdlczxUIGV4dGVuZHMgUmVtb3RlTWVzc2FnZXMgPSBSZW1vdGVNZXNzYWdlcz4oXG4gICBfc3RkT3V0OiBzdHJpbmcsXG4gICBzdGRFcnI6IHN0cmluZ1xuKTogUmVtb3RlTWVzc2FnZVJlc3VsdCB7XG4gICByZXR1cm4gcGFyc2VTdHJpbmdSZXNwb25zZSh7IHJlbW90ZU1lc3NhZ2VzOiBuZXcgUmVtb3RlTWVzc2FnZVN1bW1hcnkoKSBhcyBUIH0sIHBhcnNlcnMsIHN0ZEVycik7XG59XG5cbmV4cG9ydCBjbGFzcyBSZW1vdGVNZXNzYWdlU3VtbWFyeSBpbXBsZW1lbnRzIFJlbW90ZU1lc3NhZ2VzIHtcbiAgIHB1YmxpYyByZWFkb25seSBhbGw6IHN0cmluZ1tdID0gW107XG59XG4iLCAiaW1wb3J0IHsgUHVsbERldGFpbCwgUHVsbEZhaWxlZFJlc3VsdCwgUHVsbFJlc3VsdCwgUmVtb3RlTWVzc2FnZXMgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IFB1bGxGYWlsZWRTdW1tYXJ5LCBQdWxsU3VtbWFyeSB9IGZyb20gJy4uL3Jlc3BvbnNlcy9QdWxsU3VtbWFyeSc7XG5pbXBvcnQgeyBUYXNrUGFyc2VyIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgYXBwZW5kLCBMaW5lUGFyc2VyLCBwYXJzZVN0cmluZ1Jlc3BvbnNlIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgcGFyc2VSZW1vdGVNZXNzYWdlcyB9IGZyb20gJy4vcGFyc2UtcmVtb3RlLW1lc3NhZ2VzJztcblxuY29uc3QgRklMRV9VUERBVEVfUkVHRVggPSAvXlxccyooLis/KVxccytcXHxcXHMrXFxkK1xccyooXFwrKikoLSopLztcbmNvbnN0IFNVTU1BUllfUkVHRVggPSAvKFxcZCspXFxEKygoXFxkKylcXEQrXFwoXFwrXFwpKT8oXFxEKyhcXGQrKVxcRCtcXCgtXFwpKT8vO1xuY29uc3QgQUNUSU9OX1JFR0VYID0gL14oY3JlYXRlfGRlbGV0ZSkgbW9kZSBcXGQrICguKykvO1xuXG5jb25zdCBwYXJzZXJzOiBMaW5lUGFyc2VyPFB1bGxSZXN1bHQ+W10gPSBbXG4gICBuZXcgTGluZVBhcnNlcihGSUxFX1VQREFURV9SRUdFWCwgKHJlc3VsdCwgW2ZpbGUsIGluc2VydGlvbnMsIGRlbGV0aW9uc10pID0+IHtcbiAgICAgIHJlc3VsdC5maWxlcy5wdXNoKGZpbGUpO1xuXG4gICAgICBpZiAoaW5zZXJ0aW9ucykge1xuICAgICAgICAgcmVzdWx0Lmluc2VydGlvbnNbZmlsZV0gPSBpbnNlcnRpb25zLmxlbmd0aDtcbiAgICAgIH1cblxuICAgICAgaWYgKGRlbGV0aW9ucykge1xuICAgICAgICAgcmVzdWx0LmRlbGV0aW9uc1tmaWxlXSA9IGRlbGV0aW9ucy5sZW5ndGg7XG4gICAgICB9XG4gICB9KSxcbiAgIG5ldyBMaW5lUGFyc2VyKFNVTU1BUllfUkVHRVgsIChyZXN1bHQsIFtjaGFuZ2VzLCAsIGluc2VydGlvbnMsICwgZGVsZXRpb25zXSkgPT4ge1xuICAgICAgaWYgKGluc2VydGlvbnMgIT09IHVuZGVmaW5lZCB8fCBkZWxldGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgcmVzdWx0LnN1bW1hcnkuY2hhbmdlcyA9ICtjaGFuZ2VzIHx8IDA7XG4gICAgICAgICByZXN1bHQuc3VtbWFyeS5pbnNlcnRpb25zID0gK2luc2VydGlvbnMgfHwgMDtcbiAgICAgICAgIHJlc3VsdC5zdW1tYXJ5LmRlbGV0aW9ucyA9ICtkZWxldGlvbnMgfHwgMDtcbiAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgfSksXG4gICBuZXcgTGluZVBhcnNlcihBQ1RJT05fUkVHRVgsIChyZXN1bHQsIFthY3Rpb24sIGZpbGVdKSA9PiB7XG4gICAgICBhcHBlbmQocmVzdWx0LmZpbGVzLCBmaWxlKTtcbiAgICAgIGFwcGVuZChhY3Rpb24gPT09ICdjcmVhdGUnID8gcmVzdWx0LmNyZWF0ZWQgOiByZXN1bHQuZGVsZXRlZCwgZmlsZSk7XG4gICB9KSxcbl07XG5cbmNvbnN0IGVycm9yUGFyc2VyczogTGluZVBhcnNlcjxQdWxsRmFpbGVkUmVzdWx0PltdID0gW1xuICAgbmV3IExpbmVQYXJzZXIoL15mcm9tXFxzKC4rKSQvaSwgKHJlc3VsdCwgW3JlbW90ZV0pID0+IHZvaWQgKHJlc3VsdC5yZW1vdGUgPSByZW1vdGUpKSxcbiAgIG5ldyBMaW5lUGFyc2VyKC9eZmF0YWw6XFxzKC4rKSQvLCAocmVzdWx0LCBbbWVzc2FnZV0pID0+IHZvaWQgKHJlc3VsdC5tZXNzYWdlID0gbWVzc2FnZSkpLFxuICAgbmV3IExpbmVQYXJzZXIoXG4gICAgICAvKFthLXowLTldKylcXC5cXC4oW2EtejAtOV0rKVxccysoXFxTKylcXHMrLT5cXHMrKFxcUyspJC8sXG4gICAgICAocmVzdWx0LCBbaGFzaExvY2FsLCBoYXNoUmVtb3RlLCBicmFuY2hMb2NhbCwgYnJhbmNoUmVtb3RlXSkgPT4ge1xuICAgICAgICAgcmVzdWx0LmJyYW5jaC5sb2NhbCA9IGJyYW5jaExvY2FsO1xuICAgICAgICAgcmVzdWx0Lmhhc2gubG9jYWwgPSBoYXNoTG9jYWw7XG4gICAgICAgICByZXN1bHQuYnJhbmNoLnJlbW90ZSA9IGJyYW5jaFJlbW90ZTtcbiAgICAgICAgIHJlc3VsdC5oYXNoLnJlbW90ZSA9IGhhc2hSZW1vdGU7XG4gICAgICB9XG4gICApLFxuXTtcblxuZXhwb3J0IGNvbnN0IHBhcnNlUHVsbERldGFpbDogVGFza1BhcnNlcjxzdHJpbmcsIFB1bGxEZXRhaWw+ID0gKHN0ZE91dCwgc3RkRXJyKSA9PiB7XG4gICByZXR1cm4gcGFyc2VTdHJpbmdSZXNwb25zZShuZXcgUHVsbFN1bW1hcnkoKSwgcGFyc2VycywgW3N0ZE91dCwgc3RkRXJyXSk7XG59O1xuXG5leHBvcnQgY29uc3QgcGFyc2VQdWxsUmVzdWx0OiBUYXNrUGFyc2VyPHN0cmluZywgUHVsbFJlc3VsdD4gPSAoc3RkT3V0LCBzdGRFcnIpID0+IHtcbiAgIHJldHVybiBPYmplY3QuYXNzaWduKFxuICAgICAgbmV3IFB1bGxTdW1tYXJ5KCksXG4gICAgICBwYXJzZVB1bGxEZXRhaWwoc3RkT3V0LCBzdGRFcnIpLFxuICAgICAgcGFyc2VSZW1vdGVNZXNzYWdlczxSZW1vdGVNZXNzYWdlcz4oc3RkT3V0LCBzdGRFcnIpXG4gICApO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUHVsbEVycm9yUmVzdWx0KHN0ZE91dDogc3RyaW5nLCBzdGRFcnI6IHN0cmluZykge1xuICAgY29uc3QgcHVsbEVycm9yID0gcGFyc2VTdHJpbmdSZXNwb25zZShuZXcgUHVsbEZhaWxlZFN1bW1hcnkoKSwgZXJyb3JQYXJzZXJzLCBbc3RkT3V0LCBzdGRFcnJdKTtcblxuICAgcmV0dXJuIHB1bGxFcnJvci5tZXNzYWdlICYmIHB1bGxFcnJvcjtcbn1cbiIsICJpbXBvcnQgeyBNZXJnZURldGFpbCwgTWVyZ2VSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IE1lcmdlU3VtbWFyeUNvbmZsaWN0LCBNZXJnZVN1bW1hcnlEZXRhaWwgfSBmcm9tICcuLi9yZXNwb25zZXMvTWVyZ2VTdW1tYXJ5JztcbmltcG9ydCB7IFRhc2tQYXJzZXIgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBMaW5lUGFyc2VyLCBwYXJzZVN0cmluZ1Jlc3BvbnNlIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgcGFyc2VQdWxsUmVzdWx0IH0gZnJvbSAnLi9wYXJzZS1wdWxsJztcblxuY29uc3QgcGFyc2VyczogTGluZVBhcnNlcjxNZXJnZURldGFpbD5bXSA9IFtcbiAgIG5ldyBMaW5lUGFyc2VyKC9eQXV0by1tZXJnaW5nXFxzKyguKykkLywgKHN1bW1hcnksIFthdXRvTWVyZ2VdKSA9PiB7XG4gICAgICBzdW1tYXJ5Lm1lcmdlcy5wdXNoKGF1dG9NZXJnZSk7XG4gICB9KSxcbiAgIG5ldyBMaW5lUGFyc2VyKC9eQ09ORkxJQ1RcXHMrXFwoKC4rKVxcKTogTWVyZ2UgY29uZmxpY3QgaW4gKC4rKSQvLCAoc3VtbWFyeSwgW3JlYXNvbiwgZmlsZV0pID0+IHtcbiAgICAgIHN1bW1hcnkuY29uZmxpY3RzLnB1c2gobmV3IE1lcmdlU3VtbWFyeUNvbmZsaWN0KHJlYXNvbiwgZmlsZSkpO1xuICAgfSksXG4gICBuZXcgTGluZVBhcnNlcihcbiAgICAgIC9eQ09ORkxJQ1RcXHMrXFwoKC4rXFwvZGVsZXRlKVxcKTogKC4rKSBkZWxldGVkIGluICguKykgYW5kLyxcbiAgICAgIChzdW1tYXJ5LCBbcmVhc29uLCBmaWxlLCBkZWxldGVSZWZdKSA9PiB7XG4gICAgICAgICBzdW1tYXJ5LmNvbmZsaWN0cy5wdXNoKG5ldyBNZXJnZVN1bW1hcnlDb25mbGljdChyZWFzb24sIGZpbGUsIHsgZGVsZXRlUmVmIH0pKTtcbiAgICAgIH1cbiAgICksXG4gICBuZXcgTGluZVBhcnNlcigvXkNPTkZMSUNUXFxzK1xcKCguKylcXCk6LywgKHN1bW1hcnksIFtyZWFzb25dKSA9PiB7XG4gICAgICBzdW1tYXJ5LmNvbmZsaWN0cy5wdXNoKG5ldyBNZXJnZVN1bW1hcnlDb25mbGljdChyZWFzb24sIG51bGwpKTtcbiAgIH0pLFxuICAgbmV3IExpbmVQYXJzZXIoL15BdXRvbWF0aWMgbWVyZ2UgZmFpbGVkO1xccysoLispJC8sIChzdW1tYXJ5LCBbcmVzdWx0XSkgPT4ge1xuICAgICAgc3VtbWFyeS5yZXN1bHQgPSByZXN1bHQ7XG4gICB9KSxcbl07XG5cbi8qKlxuICogUGFyc2UgdGhlIGNvbXBsZXRlIHJlc3BvbnNlIGZyb20gYGdpdC5tZXJnZWBcbiAqL1xuZXhwb3J0IGNvbnN0IHBhcnNlTWVyZ2VSZXN1bHQ6IFRhc2tQYXJzZXI8c3RyaW5nLCBNZXJnZVJlc3VsdD4gPSAoc3RkT3V0LCBzdGRFcnIpID0+IHtcbiAgIHJldHVybiBPYmplY3QuYXNzaWduKHBhcnNlTWVyZ2VEZXRhaWwoc3RkT3V0LCBzdGRFcnIpLCBwYXJzZVB1bGxSZXN1bHQoc3RkT3V0LCBzdGRFcnIpKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIG1lcmdlIHNwZWNpZmljIGRldGFpbCAoaWU6IG5vdCB0aGUgY29udGVudCBhbHNvIGF2YWlsYWJsZSBpbiB0aGUgcHVsbCBkZXRhaWwpIGZyb20gYGdpdC5tbmVyZ2VgXG4gKiBAcGFyYW0gc3RkT3V0XG4gKi9cbmV4cG9ydCBjb25zdCBwYXJzZU1lcmdlRGV0YWlsOiBUYXNrUGFyc2VyPHN0cmluZywgTWVyZ2VEZXRhaWw+ID0gKHN0ZE91dCkgPT4ge1xuICAgcmV0dXJuIHBhcnNlU3RyaW5nUmVzcG9uc2UobmV3IE1lcmdlU3VtbWFyeURldGFpbCgpLCBwYXJzZXJzLCBzdGRPdXQpO1xufTtcbiIsICJpbXBvcnQgeyBNZXJnZVJlc3VsdCB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuaW1wb3J0IHsgR2l0UmVzcG9uc2VFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9naXQtcmVzcG9uc2UtZXJyb3InO1xuaW1wb3J0IHsgcGFyc2VNZXJnZVJlc3VsdCB9IGZyb20gJy4uL3BhcnNlcnMvcGFyc2UtbWVyZ2UnO1xuaW1wb3J0IHsgU3RyaW5nVGFzayB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGNvbmZpZ3VyYXRpb25FcnJvclRhc2ssIEVtcHR5VGFzayB9IGZyb20gJy4vdGFzayc7XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZVRhc2soY3VzdG9tQXJnczogc3RyaW5nW10pOiBFbXB0eVRhc2sgfCBTdHJpbmdUYXNrPE1lcmdlUmVzdWx0PiB7XG4gICBpZiAoIWN1c3RvbUFyZ3MubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gY29uZmlndXJhdGlvbkVycm9yVGFzaygnR2l0Lm1lcmdlIHJlcXVpcmVzIGF0IGxlYXN0IG9uZSBvcHRpb24nKTtcbiAgIH1cblxuICAgcmV0dXJuIHtcbiAgICAgIGNvbW1hbmRzOiBbJ21lcmdlJywgLi4uY3VzdG9tQXJnc10sXG4gICAgICBmb3JtYXQ6ICd1dGYtOCcsXG4gICAgICBwYXJzZXIoc3RkT3V0LCBzdGRFcnIpOiBNZXJnZVJlc3VsdCB7XG4gICAgICAgICBjb25zdCBtZXJnZSA9IHBhcnNlTWVyZ2VSZXN1bHQoc3RkT3V0LCBzdGRFcnIpO1xuICAgICAgICAgaWYgKG1lcmdlLmZhaWxlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEdpdFJlc3BvbnNlRXJyb3IobWVyZ2UpO1xuICAgICAgICAgfVxuXG4gICAgICAgICByZXR1cm4gbWVyZ2U7XG4gICAgICB9LFxuICAgfTtcbn1cbiIsICJpbXBvcnQge1xuICAgUHVzaERldGFpbCxcbiAgIFB1c2hSZXN1bHQsXG4gICBQdXNoUmVzdWx0UHVzaGVkSXRlbSxcbiAgIFB1c2hSZXN1bHRSZW1vdGVNZXNzYWdlcyxcbn0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBUYXNrUGFyc2VyIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgTGluZVBhcnNlciwgcGFyc2VTdHJpbmdSZXNwb25zZSB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IHBhcnNlUmVtb3RlTWVzc2FnZXMgfSBmcm9tICcuL3BhcnNlLXJlbW90ZS1tZXNzYWdlcyc7XG5cbmZ1bmN0aW9uIHB1c2hSZXN1bHRQdXNoZWRJdGVtKGxvY2FsOiBzdHJpbmcsIHJlbW90ZTogc3RyaW5nLCBzdGF0dXM6IHN0cmluZyk6IFB1c2hSZXN1bHRQdXNoZWRJdGVtIHtcbiAgIGNvbnN0IGRlbGV0ZWQgPSBzdGF0dXMuaW5jbHVkZXMoJ2RlbGV0ZWQnKTtcbiAgIGNvbnN0IHRhZyA9IHN0YXR1cy5pbmNsdWRlcygndGFnJykgfHwgL15yZWZzXFwvdGFncy8udGVzdChsb2NhbCk7XG4gICBjb25zdCBhbHJlYWR5VXBkYXRlZCA9ICFzdGF0dXMuaW5jbHVkZXMoJ25ldycpO1xuXG4gICByZXR1cm4ge1xuICAgICAgZGVsZXRlZCxcbiAgICAgIHRhZyxcbiAgICAgIGJyYW5jaDogIXRhZyxcbiAgICAgIG5ldzogIWFscmVhZHlVcGRhdGVkLFxuICAgICAgYWxyZWFkeVVwZGF0ZWQsXG4gICAgICBsb2NhbCxcbiAgICAgIHJlbW90ZSxcbiAgIH07XG59XG5cbmNvbnN0IHBhcnNlcnM6IExpbmVQYXJzZXI8UHVzaERldGFpbD5bXSA9IFtcbiAgIG5ldyBMaW5lUGFyc2VyKC9eUHVzaGluZyB0byAoLispJC8sIChyZXN1bHQsIFtyZXBvXSkgPT4ge1xuICAgICAgcmVzdWx0LnJlcG8gPSByZXBvO1xuICAgfSksXG4gICBuZXcgTGluZVBhcnNlcigvXnVwZGF0aW5nIGxvY2FsIHRyYWNraW5nIHJlZiAnKC4rKScvLCAocmVzdWx0LCBbbG9jYWxdKSA9PiB7XG4gICAgICByZXN1bHQucmVmID0ge1xuICAgICAgICAgLi4uKHJlc3VsdC5yZWYgfHwge30pLFxuICAgICAgICAgbG9jYWwsXG4gICAgICB9O1xuICAgfSksXG4gICBuZXcgTGluZVBhcnNlcigvXls9Ki1dXFxzKyhbXjpdKyk6KFxcUyspXFxzK1xcWyguKyldJC8sIChyZXN1bHQsIFtsb2NhbCwgcmVtb3RlLCB0eXBlXSkgPT4ge1xuICAgICAgcmVzdWx0LnB1c2hlZC5wdXNoKHB1c2hSZXN1bHRQdXNoZWRJdGVtKGxvY2FsLCByZW1vdGUsIHR5cGUpKTtcbiAgIH0pLFxuICAgbmV3IExpbmVQYXJzZXIoXG4gICAgICAvXkJyYW5jaCAnKFteJ10rKScgc2V0IHVwIHRvIHRyYWNrIHJlbW90ZSBicmFuY2ggJyhbXiddKyknIGZyb20gJyhbXiddKyknLyxcbiAgICAgIChyZXN1bHQsIFtsb2NhbCwgcmVtb3RlLCByZW1vdGVOYW1lXSkgPT4ge1xuICAgICAgICAgcmVzdWx0LmJyYW5jaCA9IHtcbiAgICAgICAgICAgIC4uLihyZXN1bHQuYnJhbmNoIHx8IHt9KSxcbiAgICAgICAgICAgIGxvY2FsLFxuICAgICAgICAgICAgcmVtb3RlLFxuICAgICAgICAgICAgcmVtb3RlTmFtZSxcbiAgICAgICAgIH07XG4gICAgICB9XG4gICApLFxuICAgbmV3IExpbmVQYXJzZXIoXG4gICAgICAvXihbXjpdKyk6KFxcUyspXFxzKyhbYS16MC05XSspXFwuXFwuKFthLXowLTldKykkLyxcbiAgICAgIChyZXN1bHQsIFtsb2NhbCwgcmVtb3RlLCBmcm9tLCB0b10pID0+IHtcbiAgICAgICAgIHJlc3VsdC51cGRhdGUgPSB7XG4gICAgICAgICAgICBoZWFkOiB7XG4gICAgICAgICAgICAgICBsb2NhbCxcbiAgICAgICAgICAgICAgIHJlbW90ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXNoOiB7XG4gICAgICAgICAgICAgICBmcm9tLFxuICAgICAgICAgICAgICAgdG8sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgfTtcbiAgICAgIH1cbiAgICksXG5dO1xuXG5leHBvcnQgY29uc3QgcGFyc2VQdXNoUmVzdWx0OiBUYXNrUGFyc2VyPHN0cmluZywgUHVzaFJlc3VsdD4gPSAoc3RkT3V0LCBzdGRFcnIpID0+IHtcbiAgIGNvbnN0IHB1c2hEZXRhaWwgPSBwYXJzZVB1c2hEZXRhaWwoc3RkT3V0LCBzdGRFcnIpO1xuICAgY29uc3QgcmVzcG9uc2VEZXRhaWwgPSBwYXJzZVJlbW90ZU1lc3NhZ2VzPFB1c2hSZXN1bHRSZW1vdGVNZXNzYWdlcz4oc3RkT3V0LCBzdGRFcnIpO1xuXG4gICByZXR1cm4ge1xuICAgICAgLi4ucHVzaERldGFpbCxcbiAgICAgIC4uLnJlc3BvbnNlRGV0YWlsLFxuICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBwYXJzZVB1c2hEZXRhaWw6IFRhc2tQYXJzZXI8c3RyaW5nLCBQdXNoRGV0YWlsPiA9IChzdGRPdXQsIHN0ZEVycikgPT4ge1xuICAgcmV0dXJuIHBhcnNlU3RyaW5nUmVzcG9uc2UoeyBwdXNoZWQ6IFtdIH0sIHBhcnNlcnMsIFtzdGRPdXQsIHN0ZEVycl0pO1xufTtcbiIsICJpbXBvcnQgeyBQdXNoUmVzdWx0IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBwYXJzZVB1c2hSZXN1bHQgYXMgcGFyc2VyIH0gZnJvbSAnLi4vcGFyc2Vycy9wYXJzZS1wdXNoJztcbmltcG9ydCB7IFN0cmluZ1Rhc2sgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBhcHBlbmQsIHJlbW92ZSB9IGZyb20gJy4uL3V0aWxzJztcblxudHlwZSBQdXNoUmVmID0geyByZW1vdGU/OiBzdHJpbmc7IGJyYW5jaD86IHN0cmluZyB9O1xuXG5leHBvcnQgZnVuY3Rpb24gcHVzaFRhZ3NUYXNrKHJlZjogUHVzaFJlZiA9IHt9LCBjdXN0b21BcmdzOiBzdHJpbmdbXSk6IFN0cmluZ1Rhc2s8UHVzaFJlc3VsdD4ge1xuICAgYXBwZW5kKGN1c3RvbUFyZ3MsICctLXRhZ3MnKTtcbiAgIHJldHVybiBwdXNoVGFzayhyZWYsIGN1c3RvbUFyZ3MpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHVzaFRhc2socmVmOiBQdXNoUmVmID0ge30sIGN1c3RvbUFyZ3M6IHN0cmluZ1tdKTogU3RyaW5nVGFzazxQdXNoUmVzdWx0PiB7XG4gICBjb25zdCBjb21tYW5kcyA9IFsncHVzaCcsIC4uLmN1c3RvbUFyZ3NdO1xuICAgaWYgKHJlZi5icmFuY2gpIHtcbiAgICAgIGNvbW1hbmRzLnNwbGljZSgxLCAwLCByZWYuYnJhbmNoKTtcbiAgIH1cbiAgIGlmIChyZWYucmVtb3RlKSB7XG4gICAgICBjb21tYW5kcy5zcGxpY2UoMSwgMCwgcmVmLnJlbW90ZSk7XG4gICB9XG5cbiAgIHJlbW92ZShjb21tYW5kcywgJy12Jyk7XG4gICBhcHBlbmQoY29tbWFuZHMsICctLXZlcmJvc2UnKTtcbiAgIGFwcGVuZChjb21tYW5kcywgJy0tcG9yY2VsYWluJyk7XG5cbiAgIHJldHVybiB7XG4gICAgICBjb21tYW5kcyxcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIHBhcnNlcixcbiAgIH07XG59XG4iLCAiaW1wb3J0IHsgU2ltcGxlR2l0IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBTaW1wbGVHaXRBcGkgfSBmcm9tICcuLi9zaW1wbGUtZ2l0LWFwaSc7XG5pbXBvcnQgeyBnZXRUcmFpbGluZ09wdGlvbnMsIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IHN0cmFpZ2h0VGhyb3VnaEJ1ZmZlclRhc2ssIHN0cmFpZ2h0VGhyb3VnaFN0cmluZ1Rhc2sgfSBmcm9tICcuL3Rhc2snO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKTogUGljazxTaW1wbGVHaXQsICdzaG93QnVmZmVyJyB8ICdzaG93Jz4ge1xuICAgcmV0dXJuIHtcbiAgICAgIHNob3dCdWZmZXIodGhpczogU2ltcGxlR2l0QXBpKSB7XG4gICAgICAgICBjb25zdCBjb21tYW5kcyA9IFsnc2hvdycsIC4uLmdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMsIDEpXTtcbiAgICAgICAgIGlmICghY29tbWFuZHMuaW5jbHVkZXMoJy0tYmluYXJ5JykpIHtcbiAgICAgICAgICAgIGNvbW1hbmRzLnNwbGljZSgxLCAwLCAnLS1iaW5hcnknKTtcbiAgICAgICAgIH1cblxuICAgICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICAgICAgICBzdHJhaWdodFRocm91Z2hCdWZmZXJUYXNrKGNvbW1hbmRzKSxcbiAgICAgICAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICAgICAgICApO1xuICAgICAgfSxcblxuICAgICAgc2hvdyh0aGlzOiBTaW1wbGVHaXRBcGkpIHtcbiAgICAgICAgIGNvbnN0IGNvbW1hbmRzID0gWydzaG93JywgLi4uZ2V0VHJhaWxpbmdPcHRpb25zKGFyZ3VtZW50cywgMSldO1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICAgICAgICBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKGNvbW1hbmRzKSxcbiAgICAgICAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICAgICAgICApO1xuICAgICAgfSxcbiAgIH07XG59XG4iLCAiaW1wb3J0IHsgRmlsZVN0YXR1c1Jlc3VsdCB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuXG5leHBvcnQgY29uc3QgZnJvbVBhdGhSZWdleCA9IC9eKC4rKSAtPiAoLispJC87XG5cbmV4cG9ydCBjbGFzcyBGaWxlU3RhdHVzU3VtbWFyeSBpbXBsZW1lbnRzIEZpbGVTdGF0dXNSZXN1bHQge1xuICAgcHVibGljIHJlYWRvbmx5IGZyb206IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICAgY29uc3RydWN0b3IoXG4gICAgICBwdWJsaWMgcGF0aDogc3RyaW5nLFxuICAgICAgcHVibGljIGluZGV4OiBzdHJpbmcsXG4gICAgICBwdWJsaWMgd29ya2luZ19kaXI6IHN0cmluZ1xuICAgKSB7XG4gICAgICBpZiAoJ1InID09PSBpbmRleCArIHdvcmtpbmdfZGlyKSB7XG4gICAgICAgICBjb25zdCBkZXRhaWwgPSBmcm9tUGF0aFJlZ2V4LmV4ZWMocGF0aCkgfHwgW251bGwsIHBhdGgsIHBhdGhdO1xuICAgICAgICAgdGhpcy5mcm9tID0gZGV0YWlsWzFdIHx8ICcnO1xuICAgICAgICAgdGhpcy5wYXRoID0gZGV0YWlsWzJdIHx8ICcnO1xuICAgICAgfVxuICAgfVxufVxuIiwgImltcG9ydCB7IFN0YXR1c1Jlc3VsdCB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuaW1wb3J0IHsgYXBwZW5kLCBOVUxMIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgRmlsZVN0YXR1c1N1bW1hcnkgfSBmcm9tICcuL0ZpbGVTdGF0dXNTdW1tYXJ5JztcblxudHlwZSBTdGF0dXNMaW5lUGFyc2VyID0gKHJlc3VsdDogU3RhdHVzUmVzdWx0LCBmaWxlOiBzdHJpbmcpID0+IHZvaWQ7XG5cbmV4cG9ydCBjbGFzcyBTdGF0dXNTdW1tYXJ5IGltcGxlbWVudHMgU3RhdHVzUmVzdWx0IHtcbiAgIHB1YmxpYyBub3RfYWRkZWQgPSBbXTtcbiAgIHB1YmxpYyBjb25mbGljdGVkID0gW107XG4gICBwdWJsaWMgY3JlYXRlZCA9IFtdO1xuICAgcHVibGljIGRlbGV0ZWQgPSBbXTtcbiAgIHB1YmxpYyBpZ25vcmVkID0gdW5kZWZpbmVkO1xuICAgcHVibGljIG1vZGlmaWVkID0gW107XG4gICBwdWJsaWMgcmVuYW1lZCA9IFtdO1xuICAgcHVibGljIGZpbGVzID0gW107XG4gICBwdWJsaWMgc3RhZ2VkID0gW107XG4gICBwdWJsaWMgYWhlYWQgPSAwO1xuICAgcHVibGljIGJlaGluZCA9IDA7XG4gICBwdWJsaWMgY3VycmVudCA9IG51bGw7XG4gICBwdWJsaWMgdHJhY2tpbmcgPSBudWxsO1xuICAgcHVibGljIGRldGFjaGVkID0gZmFsc2U7XG5cbiAgIHB1YmxpYyBpc0NsZWFuID0gKCkgPT4ge1xuICAgICAgcmV0dXJuICF0aGlzLmZpbGVzLmxlbmd0aDtcbiAgIH07XG59XG5cbmVudW0gUG9yY2VsYWluRmlsZVN0YXR1cyB7XG4gICBBRERFRCA9ICdBJyxcbiAgIERFTEVURUQgPSAnRCcsXG4gICBNT0RJRklFRCA9ICdNJyxcbiAgIFJFTkFNRUQgPSAnUicsXG4gICBDT1BJRUQgPSAnQycsXG4gICBVTk1FUkdFRCA9ICdVJyxcbiAgIFVOVFJBQ0tFRCA9ICc/JyxcbiAgIElHTk9SRUQgPSAnIScsXG4gICBOT05FID0gJyAnLFxufVxuXG5mdW5jdGlvbiByZW5hbWVkRmlsZShsaW5lOiBzdHJpbmcpIHtcbiAgIGNvbnN0IFt0bywgZnJvbV0gPSBsaW5lLnNwbGl0KE5VTEwpO1xuXG4gICByZXR1cm4ge1xuICAgICAgZnJvbTogZnJvbSB8fCB0byxcbiAgICAgIHRvLFxuICAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VyKFxuICAgaW5kZXhYOiBQb3JjZWxhaW5GaWxlU3RhdHVzLFxuICAgaW5kZXhZOiBQb3JjZWxhaW5GaWxlU3RhdHVzLFxuICAgaGFuZGxlcjogU3RhdHVzTGluZVBhcnNlclxuKTogW3N0cmluZywgU3RhdHVzTGluZVBhcnNlcl0ge1xuICAgcmV0dXJuIFtgJHtpbmRleFh9JHtpbmRleFl9YCwgaGFuZGxlcl07XG59XG5cbmZ1bmN0aW9uIGNvbmZsaWN0cyhpbmRleFg6IFBvcmNlbGFpbkZpbGVTdGF0dXMsIC4uLmluZGV4WTogUG9yY2VsYWluRmlsZVN0YXR1c1tdKSB7XG4gICByZXR1cm4gaW5kZXhZLm1hcCgoeSkgPT4gcGFyc2VyKGluZGV4WCwgeSwgKHJlc3VsdCwgZmlsZSkgPT4gYXBwZW5kKHJlc3VsdC5jb25mbGljdGVkLCBmaWxlKSkpO1xufVxuXG5jb25zdCBwYXJzZXJzOiBNYXA8c3RyaW5nLCBTdGF0dXNMaW5lUGFyc2VyPiA9IG5ldyBNYXAoW1xuICAgcGFyc2VyKFBvcmNlbGFpbkZpbGVTdGF0dXMuTk9ORSwgUG9yY2VsYWluRmlsZVN0YXR1cy5BRERFRCwgKHJlc3VsdCwgZmlsZSkgPT5cbiAgICAgIGFwcGVuZChyZXN1bHQuY3JlYXRlZCwgZmlsZSlcbiAgICksXG4gICBwYXJzZXIoUG9yY2VsYWluRmlsZVN0YXR1cy5OT05FLCBQb3JjZWxhaW5GaWxlU3RhdHVzLkRFTEVURUQsIChyZXN1bHQsIGZpbGUpID0+XG4gICAgICBhcHBlbmQocmVzdWx0LmRlbGV0ZWQsIGZpbGUpXG4gICApLFxuICAgcGFyc2VyKFBvcmNlbGFpbkZpbGVTdGF0dXMuTk9ORSwgUG9yY2VsYWluRmlsZVN0YXR1cy5NT0RJRklFRCwgKHJlc3VsdCwgZmlsZSkgPT5cbiAgICAgIGFwcGVuZChyZXN1bHQubW9kaWZpZWQsIGZpbGUpXG4gICApLFxuXG4gICBwYXJzZXIoXG4gICAgICBQb3JjZWxhaW5GaWxlU3RhdHVzLkFEREVELFxuICAgICAgUG9yY2VsYWluRmlsZVN0YXR1cy5OT05FLFxuICAgICAgKHJlc3VsdCwgZmlsZSkgPT4gYXBwZW5kKHJlc3VsdC5jcmVhdGVkLCBmaWxlKSAmJiBhcHBlbmQocmVzdWx0LnN0YWdlZCwgZmlsZSlcbiAgICksXG4gICBwYXJzZXIoXG4gICAgICBQb3JjZWxhaW5GaWxlU3RhdHVzLkFEREVELFxuICAgICAgUG9yY2VsYWluRmlsZVN0YXR1cy5NT0RJRklFRCxcbiAgICAgIChyZXN1bHQsIGZpbGUpID0+XG4gICAgICAgICBhcHBlbmQocmVzdWx0LmNyZWF0ZWQsIGZpbGUpICYmXG4gICAgICAgICBhcHBlbmQocmVzdWx0LnN0YWdlZCwgZmlsZSkgJiZcbiAgICAgICAgIGFwcGVuZChyZXN1bHQubW9kaWZpZWQsIGZpbGUpXG4gICApLFxuXG4gICBwYXJzZXIoXG4gICAgICBQb3JjZWxhaW5GaWxlU3RhdHVzLkRFTEVURUQsXG4gICAgICBQb3JjZWxhaW5GaWxlU3RhdHVzLk5PTkUsXG4gICAgICAocmVzdWx0LCBmaWxlKSA9PiBhcHBlbmQocmVzdWx0LmRlbGV0ZWQsIGZpbGUpICYmIGFwcGVuZChyZXN1bHQuc3RhZ2VkLCBmaWxlKVxuICAgKSxcblxuICAgcGFyc2VyKFxuICAgICAgUG9yY2VsYWluRmlsZVN0YXR1cy5NT0RJRklFRCxcbiAgICAgIFBvcmNlbGFpbkZpbGVTdGF0dXMuTk9ORSxcbiAgICAgIChyZXN1bHQsIGZpbGUpID0+IGFwcGVuZChyZXN1bHQubW9kaWZpZWQsIGZpbGUpICYmIGFwcGVuZChyZXN1bHQuc3RhZ2VkLCBmaWxlKVxuICAgKSxcbiAgIHBhcnNlcihcbiAgICAgIFBvcmNlbGFpbkZpbGVTdGF0dXMuTU9ESUZJRUQsXG4gICAgICBQb3JjZWxhaW5GaWxlU3RhdHVzLk1PRElGSUVELFxuICAgICAgKHJlc3VsdCwgZmlsZSkgPT4gYXBwZW5kKHJlc3VsdC5tb2RpZmllZCwgZmlsZSkgJiYgYXBwZW5kKHJlc3VsdC5zdGFnZWQsIGZpbGUpXG4gICApLFxuXG4gICBwYXJzZXIoUG9yY2VsYWluRmlsZVN0YXR1cy5SRU5BTUVELCBQb3JjZWxhaW5GaWxlU3RhdHVzLk5PTkUsIChyZXN1bHQsIGZpbGUpID0+IHtcbiAgICAgIGFwcGVuZChyZXN1bHQucmVuYW1lZCwgcmVuYW1lZEZpbGUoZmlsZSkpO1xuICAgfSksXG4gICBwYXJzZXIoUG9yY2VsYWluRmlsZVN0YXR1cy5SRU5BTUVELCBQb3JjZWxhaW5GaWxlU3RhdHVzLk1PRElGSUVELCAocmVzdWx0LCBmaWxlKSA9PiB7XG4gICAgICBjb25zdCByZW5hbWVkID0gcmVuYW1lZEZpbGUoZmlsZSk7XG4gICAgICBhcHBlbmQocmVzdWx0LnJlbmFtZWQsIHJlbmFtZWQpO1xuICAgICAgYXBwZW5kKHJlc3VsdC5tb2RpZmllZCwgcmVuYW1lZC50byk7XG4gICB9KSxcbiAgIHBhcnNlcihQb3JjZWxhaW5GaWxlU3RhdHVzLklHTk9SRUQsIFBvcmNlbGFpbkZpbGVTdGF0dXMuSUdOT1JFRCwgKF9yZXN1bHQsIF9maWxlKSA9PiB7XG4gICAgICBhcHBlbmQoKF9yZXN1bHQuaWdub3JlZCA9IF9yZXN1bHQuaWdub3JlZCB8fCBbXSksIF9maWxlKTtcbiAgIH0pLFxuXG4gICBwYXJzZXIoUG9yY2VsYWluRmlsZVN0YXR1cy5VTlRSQUNLRUQsIFBvcmNlbGFpbkZpbGVTdGF0dXMuVU5UUkFDS0VELCAocmVzdWx0LCBmaWxlKSA9PlxuICAgICAgYXBwZW5kKHJlc3VsdC5ub3RfYWRkZWQsIGZpbGUpXG4gICApLFxuXG4gICAuLi5jb25mbGljdHMoUG9yY2VsYWluRmlsZVN0YXR1cy5BRERFRCwgUG9yY2VsYWluRmlsZVN0YXR1cy5BRERFRCwgUG9yY2VsYWluRmlsZVN0YXR1cy5VTk1FUkdFRCksXG4gICAuLi5jb25mbGljdHMoXG4gICAgICBQb3JjZWxhaW5GaWxlU3RhdHVzLkRFTEVURUQsXG4gICAgICBQb3JjZWxhaW5GaWxlU3RhdHVzLkRFTEVURUQsXG4gICAgICBQb3JjZWxhaW5GaWxlU3RhdHVzLlVOTUVSR0VEXG4gICApLFxuICAgLi4uY29uZmxpY3RzKFxuICAgICAgUG9yY2VsYWluRmlsZVN0YXR1cy5VTk1FUkdFRCxcbiAgICAgIFBvcmNlbGFpbkZpbGVTdGF0dXMuQURERUQsXG4gICAgICBQb3JjZWxhaW5GaWxlU3RhdHVzLkRFTEVURUQsXG4gICAgICBQb3JjZWxhaW5GaWxlU3RhdHVzLlVOTUVSR0VEXG4gICApLFxuXG4gICBbXG4gICAgICAnIyMnLFxuICAgICAgKHJlc3VsdCwgbGluZSkgPT4ge1xuICAgICAgICAgY29uc3QgYWhlYWRSZWcgPSAvYWhlYWQgKFxcZCspLztcbiAgICAgICAgIGNvbnN0IGJlaGluZFJlZyA9IC9iZWhpbmQgKFxcZCspLztcbiAgICAgICAgIGNvbnN0IGN1cnJlbnRSZWcgPSAvXiguKz8oPz0oPzpcXC57M318XFxzfCQpKSkvO1xuICAgICAgICAgY29uc3QgdHJhY2tpbmdSZWcgPSAvXFwuezN9KFxcUyopLztcbiAgICAgICAgIGNvbnN0IG9uRW1wdHlCcmFuY2hSZWcgPSAvXFxzb25cXHMoW1xcU10rKSQvO1xuICAgICAgICAgbGV0IHJlZ2V4UmVzdWx0O1xuXG4gICAgICAgICByZWdleFJlc3VsdCA9IGFoZWFkUmVnLmV4ZWMobGluZSk7XG4gICAgICAgICByZXN1bHQuYWhlYWQgPSAocmVnZXhSZXN1bHQgJiYgK3JlZ2V4UmVzdWx0WzFdKSB8fCAwO1xuXG4gICAgICAgICByZWdleFJlc3VsdCA9IGJlaGluZFJlZy5leGVjKGxpbmUpO1xuICAgICAgICAgcmVzdWx0LmJlaGluZCA9IChyZWdleFJlc3VsdCAmJiArcmVnZXhSZXN1bHRbMV0pIHx8IDA7XG5cbiAgICAgICAgIHJlZ2V4UmVzdWx0ID0gY3VycmVudFJlZy5leGVjKGxpbmUpO1xuICAgICAgICAgcmVzdWx0LmN1cnJlbnQgPSByZWdleFJlc3VsdCAmJiByZWdleFJlc3VsdFsxXTtcblxuICAgICAgICAgcmVnZXhSZXN1bHQgPSB0cmFja2luZ1JlZy5leGVjKGxpbmUpO1xuICAgICAgICAgcmVzdWx0LnRyYWNraW5nID0gcmVnZXhSZXN1bHQgJiYgcmVnZXhSZXN1bHRbMV07XG5cbiAgICAgICAgIHJlZ2V4UmVzdWx0ID0gb25FbXB0eUJyYW5jaFJlZy5leGVjKGxpbmUpO1xuICAgICAgICAgcmVzdWx0LmN1cnJlbnQgPSAocmVnZXhSZXN1bHQgJiYgcmVnZXhSZXN1bHRbMV0pIHx8IHJlc3VsdC5jdXJyZW50O1xuXG4gICAgICAgICByZXN1bHQuZGV0YWNoZWQgPSAvXFwobm8gYnJhbmNoXFwpLy50ZXN0KGxpbmUpO1xuICAgICAgfSxcbiAgIF0sXG5dKTtcblxuZXhwb3J0IGNvbnN0IHBhcnNlU3RhdHVzU3VtbWFyeSA9IGZ1bmN0aW9uICh0ZXh0OiBzdHJpbmcpOiBTdGF0dXNSZXN1bHQge1xuICAgY29uc3QgbGluZXMgPSB0ZXh0LnNwbGl0KE5VTEwpO1xuICAgY29uc3Qgc3RhdHVzID0gbmV3IFN0YXR1c1N1bW1hcnkoKTtcblxuICAgZm9yIChsZXQgaSA9IDAsIGwgPSBsaW5lcy5sZW5ndGg7IGkgPCBsOyApIHtcbiAgICAgIGxldCBsaW5lID0gbGluZXNbaSsrXS50cmltKCk7XG5cbiAgICAgIGlmICghbGluZSkge1xuICAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChsaW5lLmNoYXJBdCgwKSA9PT0gUG9yY2VsYWluRmlsZVN0YXR1cy5SRU5BTUVEKSB7XG4gICAgICAgICBsaW5lICs9IE5VTEwgKyAobGluZXNbaSsrXSB8fCAnJyk7XG4gICAgICB9XG5cbiAgICAgIHNwbGl0TGluZShzdGF0dXMsIGxpbmUpO1xuICAgfVxuXG4gICByZXR1cm4gc3RhdHVzO1xufTtcblxuZnVuY3Rpb24gc3BsaXRMaW5lKHJlc3VsdDogU3RhdHVzUmVzdWx0LCBsaW5lU3RyOiBzdHJpbmcpIHtcbiAgIGNvbnN0IHRyaW1tZWQgPSBsaW5lU3RyLnRyaW0oKTtcbiAgIHN3aXRjaCAoJyAnKSB7XG4gICAgICBjYXNlIHRyaW1tZWQuY2hhckF0KDIpOlxuICAgICAgICAgcmV0dXJuIGRhdGEodHJpbW1lZC5jaGFyQXQoMCksIHRyaW1tZWQuY2hhckF0KDEpLCB0cmltbWVkLnN1YnN0cigzKSk7XG4gICAgICBjYXNlIHRyaW1tZWQuY2hhckF0KDEpOlxuICAgICAgICAgcmV0dXJuIGRhdGEoUG9yY2VsYWluRmlsZVN0YXR1cy5OT05FLCB0cmltbWVkLmNoYXJBdCgwKSwgdHJpbW1lZC5zdWJzdHIoMikpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgIHJldHVybjtcbiAgIH1cblxuICAgZnVuY3Rpb24gZGF0YShpbmRleDogc3RyaW5nLCB3b3JraW5nRGlyOiBzdHJpbmcsIHBhdGg6IHN0cmluZykge1xuICAgICAgY29uc3QgcmF3ID0gYCR7aW5kZXh9JHt3b3JraW5nRGlyfWA7XG4gICAgICBjb25zdCBoYW5kbGVyID0gcGFyc2Vycy5nZXQocmF3KTtcblxuICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgIGhhbmRsZXIocmVzdWx0LCBwYXRoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJhdyAhPT0gJyMjJyAmJiByYXcgIT09ICchIScpIHtcbiAgICAgICAgIHJlc3VsdC5maWxlcy5wdXNoKG5ldyBGaWxlU3RhdHVzU3VtbWFyeShwYXRoLnJlcGxhY2UoL1xcMC4rJC8sICcnKSwgaW5kZXgsIHdvcmtpbmdEaXIpKTtcbiAgICAgIH1cbiAgIH1cbn1cbiIsICJpbXBvcnQgeyBTdGF0dXNSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IHBhcnNlU3RhdHVzU3VtbWFyeSB9IGZyb20gJy4uL3Jlc3BvbnNlcy9TdGF0dXNTdW1tYXJ5JztcbmltcG9ydCB7IFN0cmluZ1Rhc2sgfSBmcm9tICcuLi90eXBlcyc7XG5cbmNvbnN0IGlnbm9yZWRPcHRpb25zID0gWyctLW51bGwnLCAnLXonXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXR1c1Rhc2soY3VzdG9tQXJnczogc3RyaW5nW10pOiBTdHJpbmdUYXNrPFN0YXR1c1Jlc3VsdD4ge1xuICAgY29uc3QgY29tbWFuZHMgPSBbXG4gICAgICAnc3RhdHVzJyxcbiAgICAgICctLXBvcmNlbGFpbicsXG4gICAgICAnLWInLFxuICAgICAgJy11JyxcbiAgICAgICctLW51bGwnLFxuICAgICAgLi4uY3VzdG9tQXJncy5maWx0ZXIoKGFyZykgPT4gIWlnbm9yZWRPcHRpb25zLmluY2x1ZGVzKGFyZykpLFxuICAgXTtcblxuICAgcmV0dXJuIHtcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIGNvbW1hbmRzLFxuICAgICAgcGFyc2VyKHRleHQ6IHN0cmluZykge1xuICAgICAgICAgcmV0dXJuIHBhcnNlU3RhdHVzU3VtbWFyeSh0ZXh0KTtcbiAgICAgIH0sXG4gICB9O1xufVxuIiwgImltcG9ydCB0eXBlIHsgU2ltcGxlR2l0QXBpIH0gZnJvbSAnLi4vc2ltcGxlLWdpdC1hcGknO1xuaW1wb3J0IHR5cGUgeyBTaW1wbGVHaXQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IGFzTnVtYmVyLCBFeGl0Q29kZXMsIExpbmVQYXJzZXIsIHBhcnNlU3RyaW5nUmVzcG9uc2UgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmVyc2lvblJlc3VsdCB7XG4gICBtYWpvcjogbnVtYmVyO1xuICAgbWlub3I6IG51bWJlcjtcbiAgIHBhdGNoOiBudW1iZXIgfCBzdHJpbmc7XG4gICBhZ2VudDogc3RyaW5nO1xuICAgaW5zdGFsbGVkOiBib29sZWFuO1xufVxuXG5jb25zdCBOT1RfSU5TVEFMTEVEID0gJ2luc3RhbGxlZD1mYWxzZSc7XG5cbmZ1bmN0aW9uIHZlcnNpb25SZXNwb25zZShcbiAgIG1ham9yID0gMCxcbiAgIG1pbm9yID0gMCxcbiAgIHBhdGNoOiBzdHJpbmcgfCBudW1iZXIgPSAwLFxuICAgYWdlbnQgPSAnJyxcbiAgIGluc3RhbGxlZCA9IHRydWVcbik6IFZlcnNpb25SZXN1bHQge1xuICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgICAgIHtcbiAgICAgICAgIG1ham9yLFxuICAgICAgICAgbWlub3IsXG4gICAgICAgICBwYXRjaCxcbiAgICAgICAgIGFnZW50LFxuICAgICAgICAgaW5zdGFsbGVkLFxuICAgICAgfSxcbiAgICAgICd0b1N0cmluZycsXG4gICAgICB7XG4gICAgICAgICB2YWx1ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLm1ham9yfS4ke3RoaXMubWlub3J9LiR7dGhpcy5wYXRjaH1gO1xuICAgICAgICAgfSxcbiAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIH1cbiAgICk7XG59XG5cbmZ1bmN0aW9uIG5vdEluc3RhbGxlZFJlc3BvbnNlKCkge1xuICAgcmV0dXJuIHZlcnNpb25SZXNwb25zZSgwLCAwLCAwLCAnJywgZmFsc2UpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKTogUGljazxTaW1wbGVHaXQsICd2ZXJzaW9uJz4ge1xuICAgcmV0dXJuIHtcbiAgICAgIHZlcnNpb24odGhpczogU2ltcGxlR2l0QXBpKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcnVuVGFzayh7XG4gICAgICAgICAgICBjb21tYW5kczogWyctLXZlcnNpb24nXSxcbiAgICAgICAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgICAgICAgIHBhcnNlcjogdmVyc2lvblBhcnNlcixcbiAgICAgICAgICAgIG9uRXJyb3IocmVzdWx0LCBlcnJvciwgZG9uZSwgZmFpbCkge1xuICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5leGl0Q29kZSA9PT0gRXhpdENvZGVzLk5PVF9GT1VORCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUoQnVmZmVyLmZyb20oTk9UX0lOU1RBTExFRCkpO1xuICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICBmYWlsKGVycm9yKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICB9KTtcbiAgICAgIH0sXG4gICB9O1xufVxuXG5jb25zdCBwYXJzZXJzOiBMaW5lUGFyc2VyPFZlcnNpb25SZXN1bHQ+W10gPSBbXG4gICBuZXcgTGluZVBhcnNlcihcbiAgICAgIC92ZXJzaW9uIChcXGQrKVxcLihcXGQrKVxcLihcXGQrKSg/OlxccypcXCgoLispXFwpKT8vLFxuICAgICAgKHJlc3VsdCwgW21ham9yLCBtaW5vciwgcGF0Y2gsIGFnZW50ID0gJyddKSA9PiB7XG4gICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgICAgdmVyc2lvblJlc3BvbnNlKGFzTnVtYmVyKG1ham9yKSwgYXNOdW1iZXIobWlub3IpLCBhc051bWJlcihwYXRjaCksIGFnZW50KVxuICAgICAgICAgKTtcbiAgICAgIH1cbiAgICksXG4gICBuZXcgTGluZVBhcnNlcihcbiAgICAgIC92ZXJzaW9uIChcXGQrKVxcLihcXGQrKVxcLihcXEQrKSguKyk/JC8sXG4gICAgICAocmVzdWx0LCBbbWFqb3IsIG1pbm9yLCBwYXRjaCwgYWdlbnQgPSAnJ10pID0+IHtcbiAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzdWx0LCB2ZXJzaW9uUmVzcG9uc2UoYXNOdW1iZXIobWFqb3IpLCBhc051bWJlcihtaW5vciksIHBhdGNoLCBhZ2VudCkpO1xuICAgICAgfVxuICAgKSxcbl07XG5cbmZ1bmN0aW9uIHZlcnNpb25QYXJzZXIoc3RkT3V0OiBzdHJpbmcpIHtcbiAgIGlmIChzdGRPdXQgPT09IE5PVF9JTlNUQUxMRUQpIHtcbiAgICAgIHJldHVybiBub3RJbnN0YWxsZWRSZXNwb25zZSgpO1xuICAgfVxuXG4gICByZXR1cm4gcGFyc2VTdHJpbmdSZXNwb25zZSh2ZXJzaW9uUmVzcG9uc2UoMCwgMCwgMCwgc3RkT3V0KSwgcGFyc2Vycywgc3RkT3V0KTtcbn1cbiIsICJpbXBvcnQgeyBTaW1wbGVHaXRCYXNlIH0gZnJvbSAnLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyB0YXNrQ2FsbGJhY2sgfSBmcm9tICcuL3Rhc2stY2FsbGJhY2snO1xuaW1wb3J0IHsgY2hhbmdlV29ya2luZ0RpcmVjdG9yeVRhc2sgfSBmcm9tICcuL3Rhc2tzL2NoYW5nZS13b3JraW5nLWRpcmVjdG9yeSc7XG5pbXBvcnQgY2hlY2tvdXQgZnJvbSAnLi90YXNrcy9jaGVja291dCc7XG5pbXBvcnQgY291bnRPYmplY3RzIGZyb20gJy4vdGFza3MvY291bnQtb2JqZWN0cyc7XG5pbXBvcnQgY29tbWl0IGZyb20gJy4vdGFza3MvY29tbWl0JztcbmltcG9ydCBjb25maWcgZnJvbSAnLi90YXNrcy9jb25maWcnO1xuaW1wb3J0IGZpcnN0Q29tbWl0IGZyb20gJy4vdGFza3MvZmlyc3QtY29tbWl0JztcbmltcG9ydCBncmVwIGZyb20gJy4vdGFza3MvZ3JlcCc7XG5pbXBvcnQgeyBoYXNoT2JqZWN0VGFzayB9IGZyb20gJy4vdGFza3MvaGFzaC1vYmplY3QnO1xuaW1wb3J0IHsgaW5pdFRhc2sgfSBmcm9tICcuL3Rhc2tzL2luaXQnO1xuaW1wb3J0IGxvZyBmcm9tICcuL3Rhc2tzL2xvZyc7XG5pbXBvcnQgeyBtZXJnZVRhc2sgfSBmcm9tICcuL3Rhc2tzL21lcmdlJztcbmltcG9ydCB7IHB1c2hUYXNrIH0gZnJvbSAnLi90YXNrcy9wdXNoJztcbmltcG9ydCBzaG93IGZyb20gJy4vdGFza3Mvc2hvdyc7XG5pbXBvcnQgeyBzdGF0dXNUYXNrIH0gZnJvbSAnLi90YXNrcy9zdGF0dXMnO1xuaW1wb3J0IHsgY29uZmlndXJhdGlvbkVycm9yVGFzaywgc3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayB9IGZyb20gJy4vdGFza3MvdGFzayc7XG5pbXBvcnQgdmVyc2lvbiBmcm9tICcuL3Rhc2tzL3ZlcnNpb24nO1xuaW1wb3J0IHsgb3V0cHV0SGFuZGxlciwgU2ltcGxlR2l0RXhlY3V0b3IsIFNpbXBsZUdpdFRhc2ssIFNpbXBsZUdpdFRhc2tDYWxsYmFjayB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHtcbiAgIGFzQXJyYXksXG4gICBmaWx0ZXJTdHJpbmcsXG4gICBmaWx0ZXJUeXBlLFxuICAgZ2V0VHJhaWxpbmdPcHRpb25zLFxuICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50LFxufSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNsYXNzIFNpbXBsZUdpdEFwaSBpbXBsZW1lbnRzIFNpbXBsZUdpdEJhc2Uge1xuICAgY29uc3RydWN0b3IocHJpdmF0ZSBfZXhlY3V0b3I6IFNpbXBsZUdpdEV4ZWN1dG9yKSB7fVxuXG4gICBwcm90ZWN0ZWQgX3J1blRhc2s8VD4odGFzazogU2ltcGxlR2l0VGFzazxUPiwgdGhlbj86IFNpbXBsZUdpdFRhc2tDYWxsYmFjazxUPikge1xuICAgICAgY29uc3QgY2hhaW4gPSB0aGlzLl9leGVjdXRvci5jaGFpbigpO1xuICAgICAgY29uc3QgcHJvbWlzZSA9IGNoYWluLnB1c2godGFzayk7XG5cbiAgICAgIGlmICh0aGVuKSB7XG4gICAgICAgICB0YXNrQ2FsbGJhY2sodGFzaywgcHJvbWlzZSwgdGhlbik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMsIHtcbiAgICAgICAgIHRoZW46IHsgdmFsdWU6IHByb21pc2UudGhlbi5iaW5kKHByb21pc2UpIH0sXG4gICAgICAgICBjYXRjaDogeyB2YWx1ZTogcHJvbWlzZS5jYXRjaC5iaW5kKHByb21pc2UpIH0sXG4gICAgICAgICBfZXhlY3V0b3I6IHsgdmFsdWU6IGNoYWluIH0sXG4gICAgICB9KTtcbiAgIH1cblxuICAgYWRkKGZpbGVzOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICAgICBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKFsnYWRkJywgLi4uYXNBcnJheShmaWxlcyldKSxcbiAgICAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICAgICApO1xuICAgfVxuXG4gICBjd2QoZGlyZWN0b3J5OiBzdHJpbmcgfCB7IHBhdGg6IHN0cmluZzsgcm9vdD86IGJvb2xlYW4gfSkge1xuICAgICAgY29uc3QgbmV4dCA9IHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpO1xuXG4gICAgICBpZiAodHlwZW9mIGRpcmVjdG9yeSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9ydW5UYXNrKGNoYW5nZVdvcmtpbmdEaXJlY3RvcnlUYXNrKGRpcmVjdG9yeSwgdGhpcy5fZXhlY3V0b3IpLCBuZXh0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBkaXJlY3Rvcnk/LnBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcnVuVGFzayhcbiAgICAgICAgICAgIGNoYW5nZVdvcmtpbmdEaXJlY3RvcnlUYXNrKFxuICAgICAgICAgICAgICAgZGlyZWN0b3J5LnBhdGgsXG4gICAgICAgICAgICAgICAoZGlyZWN0b3J5LnJvb3QgJiYgdGhpcy5fZXhlY3V0b3IpIHx8IHVuZGVmaW5lZFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIG5leHRcbiAgICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgICAgY29uZmlndXJhdGlvbkVycm9yVGFzaygnR2l0LmN3ZDogd29ya2luZ0RpcmVjdG9yeSBtdXN0IGJlIHN1cHBsaWVkIGFzIGEgc3RyaW5nJyksXG4gICAgICAgICBuZXh0XG4gICAgICApO1xuICAgfVxuXG4gICBoYXNoT2JqZWN0KHBhdGg6IHN0cmluZywgd3JpdGU6IGJvb2xlYW4gfCB1bmtub3duKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnVuVGFzayhcbiAgICAgICAgIGhhc2hPYmplY3RUYXNrKHBhdGgsIHdyaXRlID09PSB0cnVlKSxcbiAgICAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICAgICApO1xuICAgfVxuXG4gICBpbml0KGJhcmU/OiBib29sZWFuIHwgdW5rbm93bikge1xuICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICAgICBpbml0VGFzayhiYXJlID09PSB0cnVlLCB0aGlzLl9leGVjdXRvci5jd2QsIGdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMpKSxcbiAgICAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICAgICApO1xuICAgfVxuXG4gICBtZXJnZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgICAgbWVyZ2VUYXNrKGdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMpKSxcbiAgICAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICAgICApO1xuICAgfVxuXG4gICBtZXJnZUZyb21UbyhyZW1vdGU6IHN0cmluZywgYnJhbmNoOiBzdHJpbmcpIHtcbiAgICAgIGlmICghKGZpbHRlclN0cmluZyhyZW1vdGUpICYmIGZpbHRlclN0cmluZyhicmFuY2gpKSkge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uRXJyb3JUYXNrKFxuICAgICAgICAgICAgICAgYEdpdC5tZXJnZUZyb21UbyByZXF1aXJlcyB0aGF0IHRoZSAncmVtb3RlJyBhbmQgJ2JyYW5jaCcgYXJndW1lbnRzIGFyZSBzdXBwbGllZCBhcyBzdHJpbmdzYFxuICAgICAgICAgICAgKVxuICAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICAgICBtZXJnZVRhc2soW3JlbW90ZSwgYnJhbmNoLCAuLi5nZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzKV0pLFxuICAgICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cywgZmFsc2UpXG4gICAgICApO1xuICAgfVxuXG4gICBvdXRwdXRIYW5kbGVyKGhhbmRsZXI6IG91dHB1dEhhbmRsZXIpIHtcbiAgICAgIHRoaXMuX2V4ZWN1dG9yLm91dHB1dEhhbmRsZXIgPSBoYW5kbGVyO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICB9XG5cbiAgIHB1c2goKSB7XG4gICAgICBjb25zdCB0YXNrID0gcHVzaFRhc2soXG4gICAgICAgICB7XG4gICAgICAgICAgICByZW1vdGU6IGZpbHRlclR5cGUoYXJndW1lbnRzWzBdLCBmaWx0ZXJTdHJpbmcpLFxuICAgICAgICAgICAgYnJhbmNoOiBmaWx0ZXJUeXBlKGFyZ3VtZW50c1sxXSwgZmlsdGVyU3RyaW5nKSxcbiAgICAgICAgIH0sXG4gICAgICAgICBnZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzKVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2sodGFzaywgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cykpO1xuICAgfVxuXG4gICBzdGFzaCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgICAgc3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayhbJ3N0YXNoJywgLi4uZ2V0VHJhaWxpbmdPcHRpb25zKGFyZ3VtZW50cyldKSxcbiAgICAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICAgICApO1xuICAgfVxuXG4gICBzdGF0dXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnVuVGFzayhcbiAgICAgICAgIHN0YXR1c1Rhc2soZ2V0VHJhaWxpbmdPcHRpb25zKGFyZ3VtZW50cykpLFxuICAgICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICAgICk7XG4gICB9XG59XG5cbk9iamVjdC5hc3NpZ24oXG4gICBTaW1wbGVHaXRBcGkucHJvdG90eXBlLFxuICAgY2hlY2tvdXQoKSxcbiAgIGNvbW1pdCgpLFxuICAgY29uZmlnKCksXG4gICBjb3VudE9iamVjdHMoKSxcbiAgIGZpcnN0Q29tbWl0KCksXG4gICBncmVwKCksXG4gICBsb2coKSxcbiAgIHNob3coKSxcbiAgIHZlcnNpb24oKVxuKTtcbiIsICJpbXBvcnQgeyBhcHBlbmQsIHJlbW92ZSB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IGNyZWF0ZURlZmVycmVkLCBEZWZlcnJlZFByb21pc2UgfSBmcm9tICdAa3dzaXRlcy9wcm9taXNlLWRlZmVycmVkJztcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJy4uL2dpdC1sb2dnZXInO1xuXG50eXBlIFNjaGVkdWxlQ29tcGxldGVDYWxsYmFjayA9ICgpID0+IHZvaWQ7XG50eXBlIFNjaGVkdWxlZFRhc2sgPSBQaWNrPERlZmVycmVkUHJvbWlzZTxTY2hlZHVsZUNvbXBsZXRlQ2FsbGJhY2s+LCAncHJvbWlzZScgfCAnZG9uZSc+ICYge1xuICAgaWQ6IG51bWJlcjtcbn07XG5cbmNvbnN0IGNyZWF0ZVNjaGVkdWxlZFRhc2s6ICgpID0+IFNjaGVkdWxlZFRhc2sgPSAoKCkgPT4ge1xuICAgbGV0IGlkID0gMDtcbiAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZCsrO1xuICAgICAgY29uc3QgeyBwcm9taXNlLCBkb25lIH0gPSBjcmVhdGVEZWZlcnJlZDxTY2hlZHVsZUNvbXBsZXRlQ2FsbGJhY2s+KCk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgICBwcm9taXNlLFxuICAgICAgICAgZG9uZSxcbiAgICAgICAgIGlkLFxuICAgICAgfTtcbiAgIH07XG59KSgpO1xuXG5leHBvcnQgY2xhc3MgU2NoZWR1bGVyIHtcbiAgIHByaXZhdGUgbG9nZ2VyID0gY3JlYXRlTG9nZ2VyKCcnLCAnc2NoZWR1bGVyJyk7XG4gICBwcml2YXRlIHBlbmRpbmc6IFNjaGVkdWxlZFRhc2tbXSA9IFtdO1xuICAgcHJpdmF0ZSBydW5uaW5nOiBTY2hlZHVsZWRUYXNrW10gPSBbXTtcblxuICAgY29uc3RydWN0b3IocHJpdmF0ZSBjb25jdXJyZW5jeSA9IDIpIHtcbiAgICAgIHRoaXMubG9nZ2VyKGBDb25zdHJ1Y3RlZCwgY29uY3VycmVuY3k9JXNgLCBjb25jdXJyZW5jeSk7XG4gICB9XG5cbiAgIHByaXZhdGUgc2NoZWR1bGUoKSB7XG4gICAgICBpZiAoIXRoaXMucGVuZGluZy5sZW5ndGggfHwgdGhpcy5ydW5uaW5nLmxlbmd0aCA+PSB0aGlzLmNvbmN1cnJlbmN5KSB7XG4gICAgICAgICB0aGlzLmxvZ2dlcihcbiAgICAgICAgICAgIGBTY2hlZHVsZSBhdHRlbXB0IGlnbm9yZWQsIHBlbmRpbmc9JXMgcnVubmluZz0lcyBjb25jdXJyZW5jeT0lc2AsXG4gICAgICAgICAgICB0aGlzLnBlbmRpbmcubGVuZ3RoLFxuICAgICAgICAgICAgdGhpcy5ydW5uaW5nLmxlbmd0aCxcbiAgICAgICAgICAgIHRoaXMuY29uY3VycmVuY3lcbiAgICAgICAgICk7XG4gICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRhc2sgPSBhcHBlbmQodGhpcy5ydW5uaW5nLCB0aGlzLnBlbmRpbmcuc2hpZnQoKSEpO1xuICAgICAgdGhpcy5sb2dnZXIoYEF0dGVtcHRpbmcgaWQ9JXNgLCB0YXNrLmlkKTtcbiAgICAgIHRhc2suZG9uZSgoKSA9PiB7XG4gICAgICAgICB0aGlzLmxvZ2dlcihgQ29tcGxldGluZyBpZD1gLCB0YXNrLmlkKTtcbiAgICAgICAgIHJlbW92ZSh0aGlzLnJ1bm5pbmcsIHRhc2spO1xuICAgICAgICAgdGhpcy5zY2hlZHVsZSgpO1xuICAgICAgfSk7XG4gICB9XG5cbiAgIG5leHQoKTogUHJvbWlzZTxTY2hlZHVsZUNvbXBsZXRlQ2FsbGJhY2s+IHtcbiAgICAgIGNvbnN0IHsgcHJvbWlzZSwgaWQgfSA9IGFwcGVuZCh0aGlzLnBlbmRpbmcsIGNyZWF0ZVNjaGVkdWxlZFRhc2soKSk7XG4gICAgICB0aGlzLmxvZ2dlcihgU2NoZWR1bGluZyBpZD0lc2AsIGlkKTtcblxuICAgICAgdGhpcy5zY2hlZHVsZSgpO1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgIH1cbn1cbiIsICJpbXBvcnQgeyBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrIH0gZnJvbSAnLi90YXNrJztcbmltcG9ydCB7IE9wdGlvbkZsYWdzLCBPcHRpb25zLCBTdHJpbmdUYXNrIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBBcHBseU9wdGlvbnMgPSBPcHRpb25zICZcbiAgIE9wdGlvbkZsYWdzPFxuICAgICAgfCAnLS1zdGF0J1xuICAgICAgfCAnLS1udW1zdGF0J1xuICAgICAgfCAnLS1zdW1tYXJ5J1xuICAgICAgfCAnLS1jaGVjaydcbiAgICAgIHwgJy0taW5kZXgnXG4gICAgICB8ICctLWludGVudC10by1hZGQnXG4gICAgICB8ICctLTN3YXknXG4gICAgICB8ICctLWFwcGx5J1xuICAgICAgfCAnLS1uby1hZGQnXG4gICAgICB8ICctUidcbiAgICAgIHwgJy0tcmV2ZXJzZSdcbiAgICAgIHwgJy0tYWxsb3ctYmluYXJ5LXJlcGxhY2VtZW50J1xuICAgICAgfCAnLS1iaW5hcnknXG4gICAgICB8ICctLXJlamVjdCdcbiAgICAgIHwgJy16J1xuICAgICAgfCAnLS1pbmFjY3VyYXRlLWVvZidcbiAgICAgIHwgJy0tcmVjb3VudCdcbiAgICAgIHwgJy0tY2FjaGVkJ1xuICAgICAgfCAnLS1pZ25vcmUtc3BhY2UtY2hhbmdlJ1xuICAgICAgfCAnLS1pZ25vcmUtd2hpdGVzcGFjZSdcbiAgICAgIHwgJy0tdmVyYm9zZSdcbiAgICAgIHwgJy0tdW5zYWZlLXBhdGhzJ1xuICAgPiAmXG4gICBPcHRpb25GbGFnczwnLS13aGl0ZXNwYWNlJywgJ25vd2FybicgfCAnd2FybicgfCAnZml4JyB8ICdlcnJvcicgfCAnZXJyb3ItYWxsJz4gJlxuICAgT3B0aW9uRmxhZ3M8Jy0tYnVpbGQtZmFrZS1hbmNlc3RvcicgfCAnLS1leGNsdWRlJyB8ICctLWluY2x1ZGUnIHwgJy0tZGlyZWN0b3J5Jywgc3RyaW5nPiAmXG4gICBPcHRpb25GbGFnczwnLXAnIHwgJy1DJywgbnVtYmVyPjtcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5UGF0Y2hUYXNrKHBhdGNoZXM6IHN0cmluZ1tdLCBjdXN0b21BcmdzOiBzdHJpbmdbXSk6IFN0cmluZ1Rhc2s8c3RyaW5nPiB7XG4gICByZXR1cm4gc3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayhbJ2FwcGx5JywgLi4uY3VzdG9tQXJncywgLi4ucGF0Y2hlc10pO1xufVxuIiwgImltcG9ydCB7XG4gICBCcmFuY2hNdWx0aURlbGV0ZVJlc3VsdCxcbiAgIEJyYW5jaFNpbmdsZURlbGV0ZUZhaWx1cmUsXG4gICBCcmFuY2hTaW5nbGVEZWxldGVSZXN1bHQsXG4gICBCcmFuY2hTaW5nbGVEZWxldGVTdWNjZXNzLFxufSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcblxuZXhwb3J0IGNsYXNzIEJyYW5jaERlbGV0aW9uQmF0Y2ggaW1wbGVtZW50cyBCcmFuY2hNdWx0aURlbGV0ZVJlc3VsdCB7XG4gICBhbGw6IEJyYW5jaFNpbmdsZURlbGV0ZVJlc3VsdFtdID0gW107XG4gICBicmFuY2hlczogeyBbYnJhbmNoTmFtZTogc3RyaW5nXTogQnJhbmNoU2luZ2xlRGVsZXRlUmVzdWx0IH0gPSB7fTtcbiAgIGVycm9yczogQnJhbmNoU2luZ2xlRGVsZXRlUmVzdWx0W10gPSBbXTtcblxuICAgZ2V0IHN1Y2Nlc3MoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gIXRoaXMuZXJyb3JzLmxlbmd0aDtcbiAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJyYW5jaERlbGV0aW9uU3VjY2VzcyhicmFuY2g6IHN0cmluZywgaGFzaDogc3RyaW5nKTogQnJhbmNoU2luZ2xlRGVsZXRlU3VjY2VzcyB7XG4gICByZXR1cm4ge1xuICAgICAgYnJhbmNoLFxuICAgICAgaGFzaCxcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJhbmNoRGVsZXRpb25GYWlsdXJlKGJyYW5jaDogc3RyaW5nKTogQnJhbmNoU2luZ2xlRGVsZXRlRmFpbHVyZSB7XG4gICByZXR1cm4ge1xuICAgICAgYnJhbmNoLFxuICAgICAgaGFzaDogbnVsbCxcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU2luZ2xlQnJhbmNoRGVsZXRlRmFpbHVyZShcbiAgIHRlc3Q6IEJyYW5jaFNpbmdsZURlbGV0ZVJlc3VsdFxuKTogdGVzdCBpcyBCcmFuY2hTaW5nbGVEZWxldGVTdWNjZXNzIHtcbiAgIHJldHVybiB0ZXN0LnN1Y2Nlc3M7XG59XG4iLCAiaW1wb3J0IHsgQnJhbmNoTXVsdGlEZWxldGVSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7XG4gICBCcmFuY2hEZWxldGlvbkJhdGNoLFxuICAgYnJhbmNoRGVsZXRpb25GYWlsdXJlLFxuICAgYnJhbmNoRGVsZXRpb25TdWNjZXNzLFxufSBmcm9tICcuLi9yZXNwb25zZXMvQnJhbmNoRGVsZXRlU3VtbWFyeSc7XG5pbXBvcnQgeyBUYXNrUGFyc2VyIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgRXhpdENvZGVzLCBMaW5lUGFyc2VyLCBwYXJzZVN0cmluZ1Jlc3BvbnNlIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5jb25zdCBkZWxldGVTdWNjZXNzUmVnZXggPSAvKFxcUyspXFxzK1xcKFxcUytcXHMoW14pXSspXFwpLztcbmNvbnN0IGRlbGV0ZUVycm9yUmVnZXggPSAvXmVycm9yW14nXSsnKFteJ10rKScvbTtcblxuY29uc3QgcGFyc2VyczogTGluZVBhcnNlcjxCcmFuY2hNdWx0aURlbGV0ZVJlc3VsdD5bXSA9IFtcbiAgIG5ldyBMaW5lUGFyc2VyKGRlbGV0ZVN1Y2Nlc3NSZWdleCwgKHJlc3VsdCwgW2JyYW5jaCwgaGFzaF0pID0+IHtcbiAgICAgIGNvbnN0IGRlbGV0aW9uID0gYnJhbmNoRGVsZXRpb25TdWNjZXNzKGJyYW5jaCwgaGFzaCk7XG5cbiAgICAgIHJlc3VsdC5hbGwucHVzaChkZWxldGlvbik7XG4gICAgICByZXN1bHQuYnJhbmNoZXNbYnJhbmNoXSA9IGRlbGV0aW9uO1xuICAgfSksXG4gICBuZXcgTGluZVBhcnNlcihkZWxldGVFcnJvclJlZ2V4LCAocmVzdWx0LCBbYnJhbmNoXSkgPT4ge1xuICAgICAgY29uc3QgZGVsZXRpb24gPSBicmFuY2hEZWxldGlvbkZhaWx1cmUoYnJhbmNoKTtcblxuICAgICAgcmVzdWx0LmVycm9ycy5wdXNoKGRlbGV0aW9uKTtcbiAgICAgIHJlc3VsdC5hbGwucHVzaChkZWxldGlvbik7XG4gICAgICByZXN1bHQuYnJhbmNoZXNbYnJhbmNoXSA9IGRlbGV0aW9uO1xuICAgfSksXG5dO1xuXG5leHBvcnQgY29uc3QgcGFyc2VCcmFuY2hEZWxldGlvbnM6IFRhc2tQYXJzZXI8c3RyaW5nLCBCcmFuY2hNdWx0aURlbGV0ZVJlc3VsdD4gPSAoXG4gICBzdGRPdXQsXG4gICBzdGRFcnJcbikgPT4ge1xuICAgcmV0dXJuIHBhcnNlU3RyaW5nUmVzcG9uc2UobmV3IEJyYW5jaERlbGV0aW9uQmF0Y2goKSwgcGFyc2VycywgW3N0ZE91dCwgc3RkRXJyXSk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gaGFzQnJhbmNoRGVsZXRpb25FcnJvcihkYXRhOiBzdHJpbmcsIHByb2Nlc3NFeGl0Q29kZTogRXhpdENvZGVzKTogYm9vbGVhbiB7XG4gICByZXR1cm4gcHJvY2Vzc0V4aXRDb2RlID09PSBFeGl0Q29kZXMuRVJST1IgJiYgZGVsZXRlRXJyb3JSZWdleC50ZXN0KGRhdGEpO1xufVxuIiwgImltcG9ydCB0eXBlIHsgQnJhbmNoU3VtbWFyeSwgQnJhbmNoU3VtbWFyeUJyYW5jaCB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuXG5leHBvcnQgZW51bSBCcmFuY2hTdGF0dXNJZGVudGlmaWVyIHtcbiAgIENVUlJFTlQgPSAnKicsXG4gICBMSU5LRUQgPSAnKycsXG59XG5cbmV4cG9ydCBjbGFzcyBCcmFuY2hTdW1tYXJ5UmVzdWx0IGltcGxlbWVudHMgQnJhbmNoU3VtbWFyeSB7XG4gICBwdWJsaWMgYWxsOiBzdHJpbmdbXSA9IFtdO1xuICAgcHVibGljIGJyYW5jaGVzOiB7IFtwOiBzdHJpbmddOiBCcmFuY2hTdW1tYXJ5QnJhbmNoIH0gPSB7fTtcbiAgIHB1YmxpYyBjdXJyZW50OiBzdHJpbmcgPSAnJztcbiAgIHB1YmxpYyBkZXRhY2hlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICBwdXNoKFxuICAgICAgc3RhdHVzOiBCcmFuY2hTdGF0dXNJZGVudGlmaWVyIHwgdW5rbm93bixcbiAgICAgIGRldGFjaGVkOiBib29sZWFuLFxuICAgICAgbmFtZTogc3RyaW5nLFxuICAgICAgY29tbWl0OiBzdHJpbmcsXG4gICAgICBsYWJlbDogc3RyaW5nXG4gICApIHtcbiAgICAgIGlmIChzdGF0dXMgPT09IEJyYW5jaFN0YXR1c0lkZW50aWZpZXIuQ1VSUkVOVCkge1xuICAgICAgICAgdGhpcy5kZXRhY2hlZCA9IGRldGFjaGVkO1xuICAgICAgICAgdGhpcy5jdXJyZW50ID0gbmFtZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hbGwucHVzaChuYW1lKTtcbiAgICAgIHRoaXMuYnJhbmNoZXNbbmFtZV0gPSB7XG4gICAgICAgICBjdXJyZW50OiBzdGF0dXMgPT09IEJyYW5jaFN0YXR1c0lkZW50aWZpZXIuQ1VSUkVOVCxcbiAgICAgICAgIGxpbmtlZFdvcmtUcmVlOiBzdGF0dXMgPT09IEJyYW5jaFN0YXR1c0lkZW50aWZpZXIuTElOS0VELFxuICAgICAgICAgbmFtZSxcbiAgICAgICAgIGNvbW1pdCxcbiAgICAgICAgIGxhYmVsLFxuICAgICAgfTtcbiAgIH1cbn1cbiIsICJpbXBvcnQgdHlwZSB7IEJyYW5jaFN1bW1hcnkgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IEJyYW5jaFN1bW1hcnlSZXN1bHQgfSBmcm9tICcuLi9yZXNwb25zZXMvQnJhbmNoU3VtbWFyeSc7XG5pbXBvcnQgeyBMaW5lUGFyc2VyLCBwYXJzZVN0cmluZ1Jlc3BvbnNlIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5jb25zdCBwYXJzZXJzOiBMaW5lUGFyc2VyPEJyYW5jaFN1bW1hcnlSZXN1bHQ+W10gPSBbXG4gICBuZXcgTGluZVBhcnNlcihcbiAgICAgIC9eKFsqK11cXHMpP1xcKCg/OkhFQUQgKT9kZXRhY2hlZCAoPzpmcm9tfGF0KSAoXFxTKylcXClcXHMrKFthLXowLTldKylcXHMoLiopJC8sXG4gICAgICAocmVzdWx0LCBbY3VycmVudCwgbmFtZSwgY29tbWl0LCBsYWJlbF0pID0+IHtcbiAgICAgICAgIHJlc3VsdC5wdXNoKGJyYW5jaFN0YXR1cyhjdXJyZW50KSwgdHJ1ZSwgbmFtZSwgY29tbWl0LCBsYWJlbCk7XG4gICAgICB9XG4gICApLFxuICAgbmV3IExpbmVQYXJzZXIoXG4gICAgICAvXihbKitdXFxzKT8oXFxTKylcXHMrKFthLXowLTldKylcXHM/KC4qKSQvcyxcbiAgICAgIChyZXN1bHQsIFtjdXJyZW50LCBuYW1lLCBjb21taXQsIGxhYmVsXSkgPT4ge1xuICAgICAgICAgcmVzdWx0LnB1c2goYnJhbmNoU3RhdHVzKGN1cnJlbnQpLCBmYWxzZSwgbmFtZSwgY29tbWl0LCBsYWJlbCk7XG4gICAgICB9XG4gICApLFxuXTtcblxuZnVuY3Rpb24gYnJhbmNoU3RhdHVzKGlucHV0Pzogc3RyaW5nKSB7XG4gICByZXR1cm4gaW5wdXQgPyBpbnB1dC5jaGFyQXQoMCkgOiAnJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQnJhbmNoU3VtbWFyeShzdGRPdXQ6IHN0cmluZyk6IEJyYW5jaFN1bW1hcnkge1xuICAgcmV0dXJuIHBhcnNlU3RyaW5nUmVzcG9uc2UobmV3IEJyYW5jaFN1bW1hcnlSZXN1bHQoKSwgcGFyc2Vycywgc3RkT3V0KTtcbn1cbiIsICJpbXBvcnQgeyBCcmFuY2hNdWx0aURlbGV0ZVJlc3VsdCwgQnJhbmNoU2luZ2xlRGVsZXRlUmVzdWx0LCBCcmFuY2hTdW1tYXJ5IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBTdHJpbmdUYXNrIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgR2l0UmVzcG9uc2VFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9naXQtcmVzcG9uc2UtZXJyb3InO1xuaW1wb3J0IHsgaGFzQnJhbmNoRGVsZXRpb25FcnJvciwgcGFyc2VCcmFuY2hEZWxldGlvbnMgfSBmcm9tICcuLi9wYXJzZXJzL3BhcnNlLWJyYW5jaC1kZWxldGUnO1xuaW1wb3J0IHsgcGFyc2VCcmFuY2hTdW1tYXJ5IH0gZnJvbSAnLi4vcGFyc2Vycy9wYXJzZS1icmFuY2gnO1xuaW1wb3J0IHsgYnVmZmVyVG9TdHJpbmcgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb250YWluc0RlbGV0ZUJyYW5jaENvbW1hbmQoY29tbWFuZHM6IHN0cmluZ1tdKSB7XG4gICBjb25zdCBkZWxldGVDb21tYW5kcyA9IFsnLWQnLCAnLUQnLCAnLS1kZWxldGUnXTtcbiAgIHJldHVybiBjb21tYW5kcy5zb21lKChjb21tYW5kKSA9PiBkZWxldGVDb21tYW5kcy5pbmNsdWRlcyhjb21tYW5kKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicmFuY2hUYXNrKFxuICAgY3VzdG9tQXJnczogc3RyaW5nW11cbik6IFN0cmluZ1Rhc2s8QnJhbmNoU3VtbWFyeSB8IEJyYW5jaFNpbmdsZURlbGV0ZVJlc3VsdD4ge1xuICAgY29uc3QgaXNEZWxldGUgPSBjb250YWluc0RlbGV0ZUJyYW5jaENvbW1hbmQoY3VzdG9tQXJncyk7XG4gICBjb25zdCBjb21tYW5kcyA9IFsnYnJhbmNoJywgLi4uY3VzdG9tQXJnc107XG5cbiAgIGlmIChjb21tYW5kcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbW1hbmRzLnB1c2goJy1hJyk7XG4gICB9XG5cbiAgIGlmICghY29tbWFuZHMuaW5jbHVkZXMoJy12JykpIHtcbiAgICAgIGNvbW1hbmRzLnNwbGljZSgxLCAwLCAnLXYnKTtcbiAgIH1cblxuICAgcmV0dXJuIHtcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIGNvbW1hbmRzLFxuICAgICAgcGFyc2VyKHN0ZE91dCwgc3RkRXJyKSB7XG4gICAgICAgICBpZiAoaXNEZWxldGUpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUJyYW5jaERlbGV0aW9ucyhzdGRPdXQsIHN0ZEVycikuYWxsWzBdO1xuICAgICAgICAgfVxuXG4gICAgICAgICByZXR1cm4gcGFyc2VCcmFuY2hTdW1tYXJ5KHN0ZE91dCk7XG4gICAgICB9LFxuICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJyYW5jaExvY2FsVGFzaygpOiBTdHJpbmdUYXNrPEJyYW5jaFN1bW1hcnk+IHtcbiAgIGNvbnN0IHBhcnNlciA9IHBhcnNlQnJhbmNoU3VtbWFyeTtcblxuICAgcmV0dXJuIHtcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIGNvbW1hbmRzOiBbJ2JyYW5jaCcsICctdiddLFxuICAgICAgcGFyc2VyLFxuICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZUJyYW5jaGVzVGFzayhcbiAgIGJyYW5jaGVzOiBzdHJpbmdbXSxcbiAgIGZvcmNlRGVsZXRlID0gZmFsc2Vcbik6IFN0cmluZ1Rhc2s8QnJhbmNoTXVsdGlEZWxldGVSZXN1bHQ+IHtcbiAgIHJldHVybiB7XG4gICAgICBmb3JtYXQ6ICd1dGYtOCcsXG4gICAgICBjb21tYW5kczogWydicmFuY2gnLCAnLXYnLCBmb3JjZURlbGV0ZSA/ICctRCcgOiAnLWQnLCAuLi5icmFuY2hlc10sXG4gICAgICBwYXJzZXIoc3RkT3V0LCBzdGRFcnIpIHtcbiAgICAgICAgIHJldHVybiBwYXJzZUJyYW5jaERlbGV0aW9ucyhzdGRPdXQsIHN0ZEVycik7XG4gICAgICB9LFxuICAgICAgb25FcnJvcih7IGV4aXRDb2RlLCBzdGRPdXQgfSwgZXJyb3IsIGRvbmUsIGZhaWwpIHtcbiAgICAgICAgIGlmICghaGFzQnJhbmNoRGVsZXRpb25FcnJvcihTdHJpbmcoZXJyb3IpLCBleGl0Q29kZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWlsKGVycm9yKTtcbiAgICAgICAgIH1cblxuICAgICAgICAgZG9uZShzdGRPdXQpO1xuICAgICAgfSxcbiAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVCcmFuY2hUYXNrKFxuICAgYnJhbmNoOiBzdHJpbmcsXG4gICBmb3JjZURlbGV0ZSA9IGZhbHNlXG4pOiBTdHJpbmdUYXNrPEJyYW5jaFNpbmdsZURlbGV0ZVJlc3VsdD4ge1xuICAgY29uc3QgdGFzazogU3RyaW5nVGFzazxCcmFuY2hTaW5nbGVEZWxldGVSZXN1bHQ+ID0ge1xuICAgICAgZm9ybWF0OiAndXRmLTgnLFxuICAgICAgY29tbWFuZHM6IFsnYnJhbmNoJywgJy12JywgZm9yY2VEZWxldGUgPyAnLUQnIDogJy1kJywgYnJhbmNoXSxcbiAgICAgIHBhcnNlcihzdGRPdXQsIHN0ZEVycikge1xuICAgICAgICAgcmV0dXJuIHBhcnNlQnJhbmNoRGVsZXRpb25zKHN0ZE91dCwgc3RkRXJyKS5icmFuY2hlc1ticmFuY2hdITtcbiAgICAgIH0sXG4gICAgICBvbkVycm9yKHsgZXhpdENvZGUsIHN0ZEVyciwgc3RkT3V0IH0sIGVycm9yLCBfLCBmYWlsKSB7XG4gICAgICAgICBpZiAoIWhhc0JyYW5jaERlbGV0aW9uRXJyb3IoU3RyaW5nKGVycm9yKSwgZXhpdENvZGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFpbChlcnJvcik7XG4gICAgICAgICB9XG5cbiAgICAgICAgIHRocm93IG5ldyBHaXRSZXNwb25zZUVycm9yKFxuICAgICAgICAgICAgdGFzay5wYXJzZXIoYnVmZmVyVG9TdHJpbmcoc3RkT3V0KSwgYnVmZmVyVG9TdHJpbmcoc3RkRXJyKSksXG4gICAgICAgICAgICBTdHJpbmcoZXJyb3IpXG4gICAgICAgICApO1xuICAgICAgfSxcbiAgIH07XG5cbiAgIHJldHVybiB0YXNrO1xufVxuIiwgIi8qKlxuICogUGFyc2VyIGZvciB0aGUgYGNoZWNrLWlnbm9yZWAgY29tbWFuZCAtIHJldHVybnMgZWFjaCBmaWxlIGFzIGEgc3RyaW5nIGFycmF5XG4gKi9cbmV4cG9ydCBjb25zdCBwYXJzZUNoZWNrSWdub3JlID0gKHRleHQ6IHN0cmluZyk6IHN0cmluZ1tdID0+IHtcbiAgIHJldHVybiB0ZXh0XG4gICAgICAuc3BsaXQoL1xcbi9nKVxuICAgICAgLm1hcCgobGluZSkgPT4gbGluZS50cmltKCkpXG4gICAgICAuZmlsdGVyKChmaWxlKSA9PiAhIWZpbGUpO1xufTtcbiIsICJpbXBvcnQgeyBTdHJpbmdUYXNrIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgcGFyc2VDaGVja0lnbm9yZSB9IGZyb20gJy4uL3Jlc3BvbnNlcy9DaGVja0lnbm9yZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0lnbm9yZVRhc2socGF0aHM6IHN0cmluZ1tdKTogU3RyaW5nVGFzazxzdHJpbmdbXT4ge1xuICAgcmV0dXJuIHtcbiAgICAgIGNvbW1hbmRzOiBbJ2NoZWNrLWlnbm9yZScsIC4uLnBhdGhzXSxcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIHBhcnNlcjogcGFyc2VDaGVja0lnbm9yZSxcbiAgIH07XG59XG4iLCAiaW1wb3J0IHsgY29uZmlndXJhdGlvbkVycm9yVGFzaywgRW1wdHlUYXNrLCBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrIH0gZnJvbSAnLi90YXNrJztcbmltcG9ydCB7IE9wdGlvbkZsYWdzLCBPcHRpb25zLCBTdHJpbmdUYXNrIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgYXBwZW5kLCBmaWx0ZXJTdHJpbmcgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCB0eXBlIENsb25lT3B0aW9ucyA9IE9wdGlvbnMgJlxuICAgT3B0aW9uRmxhZ3M8XG4gICAgICB8ICctLWJhcmUnXG4gICAgICB8ICctLWRpc3NvY2lhdGUnXG4gICAgICB8ICctLW1pcnJvcidcbiAgICAgIHwgJy0tbm8tY2hlY2tvdXQnXG4gICAgICB8ICctLW5vLXJlbW90ZS1zdWJtb2R1bGVzJ1xuICAgICAgfCAnLS1uby1zaGFsbG93LXN1Ym1vZHVsZXMnXG4gICAgICB8ICctLW5vLXNpbmdsZS1icmFuY2gnXG4gICAgICB8ICctLW5vLXRhZ3MnXG4gICAgICB8ICctLXJlbW90ZS1zdWJtb2R1bGVzJ1xuICAgICAgfCAnLS1zaW5nbGUtYnJhbmNoJ1xuICAgICAgfCAnLS1zaGFsbG93LXN1Ym1vZHVsZXMnXG4gICAgICB8ICctLXZlcmJvc2UnXG4gICA+ICZcbiAgIE9wdGlvbkZsYWdzPCctLWRlcHRoJyB8ICctaicgfCAnLS1qb2JzJywgbnVtYmVyPiAmXG4gICBPcHRpb25GbGFnczxcbiAgICAgIHwgJy0tYnJhbmNoJ1xuICAgICAgfCAnLS1vcmlnaW4nXG4gICAgICB8ICctLXJlY3Vyc2Utc3VibW9kdWxlcydcbiAgICAgIHwgJy0tc2VwYXJhdGUtZ2l0LWRpcidcbiAgICAgIHwgJy0tc2hhbGxvdy1leGNsdWRlJ1xuICAgICAgfCAnLS1zaGFsbG93LXNpbmNlJ1xuICAgICAgfCAnLS10ZW1wbGF0ZScsXG4gICAgICBzdHJpbmdcbiAgID47XG5cbmZ1bmN0aW9uIGRpc2FsbG93ZWRDb21tYW5kKGNvbW1hbmQ6IHN0cmluZykge1xuICAgcmV0dXJuIC9eLS11cGxvYWQtcGFjayg9fCQpLy50ZXN0KGNvbW1hbmQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVUYXNrKFxuICAgcmVwbzogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgZGlyZWN0b3J5OiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICBjdXN0b21BcmdzOiBzdHJpbmdbXVxuKTogU3RyaW5nVGFzazxzdHJpbmc+IHwgRW1wdHlUYXNrIHtcbiAgIGNvbnN0IGNvbW1hbmRzID0gWydjbG9uZScsIC4uLmN1c3RvbUFyZ3NdO1xuXG4gICBmaWx0ZXJTdHJpbmcocmVwbykgJiYgY29tbWFuZHMucHVzaChyZXBvKTtcbiAgIGZpbHRlclN0cmluZyhkaXJlY3RvcnkpICYmIGNvbW1hbmRzLnB1c2goZGlyZWN0b3J5KTtcblxuICAgY29uc3QgYmFubmVkID0gY29tbWFuZHMuZmluZChkaXNhbGxvd2VkQ29tbWFuZCk7XG4gICBpZiAoYmFubmVkKSB7XG4gICAgICByZXR1cm4gY29uZmlndXJhdGlvbkVycm9yVGFzayhgZ2l0LmZldGNoOiBwb3RlbnRpYWwgZXhwbG9pdCBhcmd1bWVudCBibG9ja2VkLmApO1xuICAgfVxuXG4gICByZXR1cm4gc3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayhjb21tYW5kcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZU1pcnJvclRhc2soXG4gICByZXBvOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICBkaXJlY3Rvcnk6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgIGN1c3RvbUFyZ3M6IHN0cmluZ1tdXG4pIHtcbiAgIGFwcGVuZChjdXN0b21BcmdzLCAnLS1taXJyb3InKTtcblxuICAgcmV0dXJuIGNsb25lVGFzayhyZXBvLCBkaXJlY3RvcnksIGN1c3RvbUFyZ3MpO1xufVxuIiwgImltcG9ydCB7IEZldGNoUmVzdWx0IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBMaW5lUGFyc2VyLCBwYXJzZVN0cmluZ1Jlc3BvbnNlIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5jb25zdCBwYXJzZXJzOiBMaW5lUGFyc2VyPEZldGNoUmVzdWx0PltdID0gW1xuICAgbmV3IExpbmVQYXJzZXIoL0Zyb20gKC4rKSQvLCAocmVzdWx0LCBbcmVtb3RlXSkgPT4ge1xuICAgICAgcmVzdWx0LnJlbW90ZSA9IHJlbW90ZTtcbiAgIH0pLFxuICAgbmV3IExpbmVQYXJzZXIoL1xcKiBcXFtuZXcgYnJhbmNoXVxccysoXFxTKylcXHMqLT4gKC4rKSQvLCAocmVzdWx0LCBbbmFtZSwgdHJhY2tpbmddKSA9PiB7XG4gICAgICByZXN1bHQuYnJhbmNoZXMucHVzaCh7XG4gICAgICAgICBuYW1lLFxuICAgICAgICAgdHJhY2tpbmcsXG4gICAgICB9KTtcbiAgIH0pLFxuICAgbmV3IExpbmVQYXJzZXIoL1xcKiBcXFtuZXcgdGFnXVxccysoXFxTKylcXHMqLT4gKC4rKSQvLCAocmVzdWx0LCBbbmFtZSwgdHJhY2tpbmddKSA9PiB7XG4gICAgICByZXN1bHQudGFncy5wdXNoKHtcbiAgICAgICAgIG5hbWUsXG4gICAgICAgICB0cmFja2luZyxcbiAgICAgIH0pO1xuICAgfSksXG4gICBuZXcgTGluZVBhcnNlcigvLSBcXFtkZWxldGVkXVxccytcXFMrXFxzKi0+ICguKykkLywgKHJlc3VsdCwgW3RyYWNraW5nXSkgPT4ge1xuICAgICAgcmVzdWx0LmRlbGV0ZWQucHVzaCh7XG4gICAgICAgICB0cmFja2luZyxcbiAgICAgIH0pO1xuICAgfSksXG4gICBuZXcgTGluZVBhcnNlcihcbiAgICAgIC9cXHMqKFteLl0rKVxcLlxcLihcXFMrKVxccysoXFxTKylcXHMqLT4gKC4rKSQvLFxuICAgICAgKHJlc3VsdCwgW2Zyb20sIHRvLCBuYW1lLCB0cmFja2luZ10pID0+IHtcbiAgICAgICAgIHJlc3VsdC51cGRhdGVkLnB1c2goe1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIHRyYWNraW5nLFxuICAgICAgICAgICAgdG8sXG4gICAgICAgICAgICBmcm9tLFxuICAgICAgICAgfSk7XG4gICAgICB9XG4gICApLFxuXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRmV0Y2hSZXN1bHQoc3RkT3V0OiBzdHJpbmcsIHN0ZEVycjogc3RyaW5nKTogRmV0Y2hSZXN1bHQge1xuICAgY29uc3QgcmVzdWx0OiBGZXRjaFJlc3VsdCA9IHtcbiAgICAgIHJhdzogc3RkT3V0LFxuICAgICAgcmVtb3RlOiBudWxsLFxuICAgICAgYnJhbmNoZXM6IFtdLFxuICAgICAgdGFnczogW10sXG4gICAgICB1cGRhdGVkOiBbXSxcbiAgICAgIGRlbGV0ZWQ6IFtdLFxuICAgfTtcbiAgIHJldHVybiBwYXJzZVN0cmluZ1Jlc3BvbnNlKHJlc3VsdCwgcGFyc2VycywgW3N0ZE91dCwgc3RkRXJyXSk7XG59XG4iLCAiaW1wb3J0IHsgRmV0Y2hSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IHBhcnNlRmV0Y2hSZXN1bHQgfSBmcm9tICcuLi9wYXJzZXJzL3BhcnNlLWZldGNoJztcbmltcG9ydCB7IFN0cmluZ1Rhc2sgfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB7IGNvbmZpZ3VyYXRpb25FcnJvclRhc2ssIEVtcHR5VGFzayB9IGZyb20gJy4vdGFzayc7XG5cbmZ1bmN0aW9uIGRpc2FsbG93ZWRDb21tYW5kKGNvbW1hbmQ6IHN0cmluZykge1xuICAgcmV0dXJuIC9eLS11cGxvYWQtcGFjayg9fCQpLy50ZXN0KGNvbW1hbmQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2hUYXNrKFxuICAgcmVtb3RlOiBzdHJpbmcsXG4gICBicmFuY2g6IHN0cmluZyxcbiAgIGN1c3RvbUFyZ3M6IHN0cmluZ1tdXG4pOiBTdHJpbmdUYXNrPEZldGNoUmVzdWx0PiB8IEVtcHR5VGFzayB7XG4gICBjb25zdCBjb21tYW5kcyA9IFsnZmV0Y2gnLCAuLi5jdXN0b21BcmdzXTtcbiAgIGlmIChyZW1vdGUgJiYgYnJhbmNoKSB7XG4gICAgICBjb21tYW5kcy5wdXNoKHJlbW90ZSwgYnJhbmNoKTtcbiAgIH1cblxuICAgY29uc3QgYmFubmVkID0gY29tbWFuZHMuZmluZChkaXNhbGxvd2VkQ29tbWFuZCk7XG4gICBpZiAoYmFubmVkKSB7XG4gICAgICByZXR1cm4gY29uZmlndXJhdGlvbkVycm9yVGFzayhgZ2l0LmZldGNoOiBwb3RlbnRpYWwgZXhwbG9pdCBhcmd1bWVudCBibG9ja2VkLmApO1xuICAgfVxuXG4gICByZXR1cm4ge1xuICAgICAgY29tbWFuZHMsXG4gICAgICBmb3JtYXQ6ICd1dGYtOCcsXG4gICAgICBwYXJzZXI6IHBhcnNlRmV0Y2hSZXN1bHQsXG4gICB9O1xufVxuIiwgImltcG9ydCB7IE1vdmVSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IExpbmVQYXJzZXIsIHBhcnNlU3RyaW5nUmVzcG9uc2UgfSBmcm9tICcuLi91dGlscyc7XG5cbmNvbnN0IHBhcnNlcnM6IExpbmVQYXJzZXI8TW92ZVJlc3VsdD5bXSA9IFtcbiAgIG5ldyBMaW5lUGFyc2VyKC9eUmVuYW1pbmcgKC4rKSB0byAoLispJC8sIChyZXN1bHQsIFtmcm9tLCB0b10pID0+IHtcbiAgICAgIHJlc3VsdC5tb3Zlcy5wdXNoKHsgZnJvbSwgdG8gfSk7XG4gICB9KSxcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU1vdmVSZXN1bHQoc3RkT3V0OiBzdHJpbmcpOiBNb3ZlUmVzdWx0IHtcbiAgIHJldHVybiBwYXJzZVN0cmluZ1Jlc3BvbnNlKHsgbW92ZXM6IFtdIH0sIHBhcnNlcnMsIHN0ZE91dCk7XG59XG4iLCAiaW1wb3J0IHsgTW92ZVJlc3VsdCB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuaW1wb3J0IHsgcGFyc2VNb3ZlUmVzdWx0IH0gZnJvbSAnLi4vcGFyc2Vycy9wYXJzZS1tb3ZlJztcbmltcG9ydCB7IFN0cmluZ1Rhc2sgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBhc0FycmF5IH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gbW92ZVRhc2soZnJvbTogc3RyaW5nIHwgc3RyaW5nW10sIHRvOiBzdHJpbmcpOiBTdHJpbmdUYXNrPE1vdmVSZXN1bHQ+IHtcbiAgIHJldHVybiB7XG4gICAgICBjb21tYW5kczogWydtdicsICctdicsIC4uLmFzQXJyYXkoZnJvbSksIHRvXSxcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIHBhcnNlcjogcGFyc2VNb3ZlUmVzdWx0LFxuICAgfTtcbn1cbiIsICJpbXBvcnQgeyBQdWxsUmVzdWx0IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBHaXRSZXNwb25zZUVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2dpdC1yZXNwb25zZS1lcnJvcic7XG5pbXBvcnQgeyBwYXJzZVB1bGxFcnJvclJlc3VsdCwgcGFyc2VQdWxsUmVzdWx0IH0gZnJvbSAnLi4vcGFyc2Vycy9wYXJzZS1wdWxsJztcbmltcG9ydCB7IE1heWJlLCBTdHJpbmdUYXNrIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgYnVmZmVyVG9TdHJpbmcgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBwdWxsVGFzayhcbiAgIHJlbW90ZTogTWF5YmU8c3RyaW5nPixcbiAgIGJyYW5jaDogTWF5YmU8c3RyaW5nPixcbiAgIGN1c3RvbUFyZ3M6IHN0cmluZ1tdXG4pOiBTdHJpbmdUYXNrPFB1bGxSZXN1bHQ+IHtcbiAgIGNvbnN0IGNvbW1hbmRzOiBzdHJpbmdbXSA9IFsncHVsbCcsIC4uLmN1c3RvbUFyZ3NdO1xuICAgaWYgKHJlbW90ZSAmJiBicmFuY2gpIHtcbiAgICAgIGNvbW1hbmRzLnNwbGljZSgxLCAwLCByZW1vdGUsIGJyYW5jaCk7XG4gICB9XG5cbiAgIHJldHVybiB7XG4gICAgICBjb21tYW5kcyxcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIHBhcnNlcihzdGRPdXQsIHN0ZEVycik6IFB1bGxSZXN1bHQge1xuICAgICAgICAgcmV0dXJuIHBhcnNlUHVsbFJlc3VsdChzdGRPdXQsIHN0ZEVycik7XG4gICAgICB9LFxuICAgICAgb25FcnJvcihyZXN1bHQsIF9lcnJvciwgX2RvbmUsIGZhaWwpIHtcbiAgICAgICAgIGNvbnN0IHB1bGxFcnJvciA9IHBhcnNlUHVsbEVycm9yUmVzdWx0KFxuICAgICAgICAgICAgYnVmZmVyVG9TdHJpbmcocmVzdWx0LnN0ZE91dCksXG4gICAgICAgICAgICBidWZmZXJUb1N0cmluZyhyZXN1bHQuc3RkRXJyKVxuICAgICAgICAgKTtcbiAgICAgICAgIGlmIChwdWxsRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWlsKG5ldyBHaXRSZXNwb25zZUVycm9yKHB1bGxFcnJvcikpO1xuICAgICAgICAgfVxuXG4gICAgICAgICBmYWlsKF9lcnJvcik7XG4gICAgICB9LFxuICAgfTtcbn1cbiIsICJpbXBvcnQgeyBmb3JFYWNoTGluZVdpdGhDb250ZW50IH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlbW90ZVdpdGhvdXRSZWZzIHtcbiAgIG5hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZW1vdGVXaXRoUmVmcyBleHRlbmRzIFJlbW90ZVdpdGhvdXRSZWZzIHtcbiAgIHJlZnM6IHtcbiAgICAgIGZldGNoOiBzdHJpbmc7XG4gICAgICBwdXNoOiBzdHJpbmc7XG4gICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VHZXRSZW1vdGVzKHRleHQ6IHN0cmluZyk6IFJlbW90ZVdpdGhvdXRSZWZzW10ge1xuICAgY29uc3QgcmVtb3RlczogeyBbbmFtZTogc3RyaW5nXTogUmVtb3RlV2l0aG91dFJlZnMgfSA9IHt9O1xuXG4gICBmb3JFYWNoKHRleHQsIChbbmFtZV0pID0+IChyZW1vdGVzW25hbWVdID0geyBuYW1lIH0pKTtcblxuICAgcmV0dXJuIE9iamVjdC52YWx1ZXMocmVtb3Rlcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdldFJlbW90ZXNWZXJib3NlKHRleHQ6IHN0cmluZyk6IFJlbW90ZVdpdGhSZWZzW10ge1xuICAgY29uc3QgcmVtb3RlczogeyBbbmFtZTogc3RyaW5nXTogUmVtb3RlV2l0aFJlZnMgfSA9IHt9O1xuXG4gICBmb3JFYWNoKHRleHQsIChbbmFtZSwgdXJsLCBwdXJwb3NlXSkgPT4ge1xuICAgICAgaWYgKCFyZW1vdGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICByZW1vdGVzW25hbWVdID0ge1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHJlZnM6IHsgZmV0Y2g6ICcnLCBwdXNoOiAnJyB9LFxuICAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKHB1cnBvc2UgJiYgdXJsKSB7XG4gICAgICAgICByZW1vdGVzW25hbWVdLnJlZnNbcHVycG9zZS5yZXBsYWNlKC9bXmEtel0vZywgJycpIGFzIGtleW9mIFJlbW90ZVdpdGhSZWZzWydyZWZzJ11dID0gdXJsO1xuICAgICAgfVxuICAgfSk7XG5cbiAgIHJldHVybiBPYmplY3QudmFsdWVzKHJlbW90ZXMpO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoKHRleHQ6IHN0cmluZywgaGFuZGxlcjogKGxpbmU6IHN0cmluZ1tdKSA9PiB2b2lkKSB7XG4gICBmb3JFYWNoTGluZVdpdGhDb250ZW50KHRleHQsIChsaW5lKSA9PiBoYW5kbGVyKGxpbmUuc3BsaXQoL1xccysvKSkpO1xufVxuIiwgImltcG9ydCB7IHBhcnNlR2V0UmVtb3RlcywgcGFyc2VHZXRSZW1vdGVzVmVyYm9zZSB9IGZyb20gJy4uL3Jlc3BvbnNlcy9HZXRSZW1vdGVTdW1tYXJ5JztcbmltcG9ydCB7IFN0cmluZ1Rhc2sgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrIH0gZnJvbSAnLi90YXNrJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFJlbW90ZVRhc2soXG4gICByZW1vdGVOYW1lOiBzdHJpbmcsXG4gICByZW1vdGVSZXBvOiBzdHJpbmcsXG4gICBjdXN0b21BcmdzOiBzdHJpbmdbXVxuKTogU3RyaW5nVGFzazxzdHJpbmc+IHtcbiAgIHJldHVybiBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKFsncmVtb3RlJywgJ2FkZCcsIC4uLmN1c3RvbUFyZ3MsIHJlbW90ZU5hbWUsIHJlbW90ZVJlcG9dKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlbW90ZXNUYXNrKHZlcmJvc2U6IGJvb2xlYW4pOiBTdHJpbmdUYXNrPGFueT4ge1xuICAgY29uc3QgY29tbWFuZHMgPSBbJ3JlbW90ZSddO1xuICAgaWYgKHZlcmJvc2UpIHtcbiAgICAgIGNvbW1hbmRzLnB1c2goJy12Jyk7XG4gICB9XG5cbiAgIHJldHVybiB7XG4gICAgICBjb21tYW5kcyxcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIHBhcnNlcjogdmVyYm9zZSA/IHBhcnNlR2V0UmVtb3Rlc1ZlcmJvc2UgOiBwYXJzZUdldFJlbW90ZXMsXG4gICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlzdFJlbW90ZXNUYXNrKGN1c3RvbUFyZ3M6IHN0cmluZ1tdKTogU3RyaW5nVGFzazxzdHJpbmc+IHtcbiAgIGNvbnN0IGNvbW1hbmRzID0gWy4uLmN1c3RvbUFyZ3NdO1xuICAgaWYgKGNvbW1hbmRzWzBdICE9PSAnbHMtcmVtb3RlJykge1xuICAgICAgY29tbWFuZHMudW5zaGlmdCgnbHMtcmVtb3RlJyk7XG4gICB9XG5cbiAgIHJldHVybiBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKGNvbW1hbmRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW90ZVRhc2soY3VzdG9tQXJnczogc3RyaW5nW10pOiBTdHJpbmdUYXNrPHN0cmluZz4ge1xuICAgY29uc3QgY29tbWFuZHMgPSBbLi4uY3VzdG9tQXJnc107XG4gICBpZiAoY29tbWFuZHNbMF0gIT09ICdyZW1vdGUnKSB7XG4gICAgICBjb21tYW5kcy51bnNoaWZ0KCdyZW1vdGUnKTtcbiAgIH1cblxuICAgcmV0dXJuIHN0cmFpZ2h0VGhyb3VnaFN0cmluZ1Rhc2soY29tbWFuZHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlUmVtb3RlVGFzayhyZW1vdGVOYW1lOiBzdHJpbmcpIHtcbiAgIHJldHVybiBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKFsncmVtb3RlJywgJ3JlbW92ZScsIHJlbW90ZU5hbWVdKTtcbn1cbiIsICJpbXBvcnQgeyBMb2dPcHRpb25zLCBMb2dSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IGxvZ0Zvcm1hdEZyb21Db21tYW5kIH0gZnJvbSAnLi4vYXJncy9sb2ctZm9ybWF0JztcbmltcG9ydCB7IGNyZWF0ZUxpc3RMb2dTdW1tYXJ5UGFyc2VyIH0gZnJvbSAnLi4vcGFyc2Vycy9wYXJzZS1saXN0LWxvZy1zdW1tYXJ5JztcbmltcG9ydCB0eXBlIHsgU3RyaW5nVGFzayB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IHZhbGlkYXRlTG9nRm9ybWF0Q29uZmlnIH0gZnJvbSAnLi9kaWZmJztcbmltcG9ydCB7IHBhcnNlTG9nT3B0aW9ucyB9IGZyb20gJy4vbG9nJztcbmltcG9ydCB0eXBlIHsgRW1wdHlUYXNrIH0gZnJvbSAnLi90YXNrJztcblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXNoTGlzdFRhc2soXG4gICBvcHQ6IExvZ09wdGlvbnMgPSB7fSxcbiAgIGN1c3RvbUFyZ3M6IHN0cmluZ1tdXG4pOiBFbXB0eVRhc2sgfCBTdHJpbmdUYXNrPExvZ1Jlc3VsdD4ge1xuICAgY29uc3Qgb3B0aW9ucyA9IHBhcnNlTG9nT3B0aW9uczxhbnk+KG9wdCk7XG4gICBjb25zdCBjb21tYW5kcyA9IFsnc3Rhc2gnLCAnbGlzdCcsIC4uLm9wdGlvbnMuY29tbWFuZHMsIC4uLmN1c3RvbUFyZ3NdO1xuICAgY29uc3QgcGFyc2VyID0gY3JlYXRlTGlzdExvZ1N1bW1hcnlQYXJzZXIoXG4gICAgICBvcHRpb25zLnNwbGl0dGVyLFxuICAgICAgb3B0aW9ucy5maWVsZHMsXG4gICAgICBsb2dGb3JtYXRGcm9tQ29tbWFuZChjb21tYW5kcylcbiAgICk7XG5cbiAgIHJldHVybiAoXG4gICAgICB2YWxpZGF0ZUxvZ0Zvcm1hdENvbmZpZyhjb21tYW5kcykgfHwge1xuICAgICAgICAgY29tbWFuZHMsXG4gICAgICAgICBmb3JtYXQ6ICd1dGYtOCcsXG4gICAgICAgICBwYXJzZXIsXG4gICAgICB9XG4gICApO1xufVxuIiwgImltcG9ydCB7IFN0cmluZ1Rhc2sgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrIH0gZnJvbSAnLi90YXNrJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFN1Yk1vZHVsZVRhc2socmVwbzogc3RyaW5nLCBwYXRoOiBzdHJpbmcpOiBTdHJpbmdUYXNrPHN0cmluZz4ge1xuICAgcmV0dXJuIHN1Yk1vZHVsZVRhc2soWydhZGQnLCByZXBvLCBwYXRoXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0U3ViTW9kdWxlVGFzayhjdXN0b21BcmdzOiBzdHJpbmdbXSk6IFN0cmluZ1Rhc2s8c3RyaW5nPiB7XG4gICByZXR1cm4gc3ViTW9kdWxlVGFzayhbJ2luaXQnLCAuLi5jdXN0b21BcmdzXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdWJNb2R1bGVUYXNrKGN1c3RvbUFyZ3M6IHN0cmluZ1tdKTogU3RyaW5nVGFzazxzdHJpbmc+IHtcbiAgIGNvbnN0IGNvbW1hbmRzID0gWy4uLmN1c3RvbUFyZ3NdO1xuICAgaWYgKGNvbW1hbmRzWzBdICE9PSAnc3VibW9kdWxlJykge1xuICAgICAgY29tbWFuZHMudW5zaGlmdCgnc3VibW9kdWxlJyk7XG4gICB9XG5cbiAgIHJldHVybiBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKGNvbW1hbmRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVN1Yk1vZHVsZVRhc2soY3VzdG9tQXJnczogc3RyaW5nW10pOiBTdHJpbmdUYXNrPHN0cmluZz4ge1xuICAgcmV0dXJuIHN1Yk1vZHVsZVRhc2soWyd1cGRhdGUnLCAuLi5jdXN0b21BcmdzXSk7XG59XG4iLCAiaW1wb3J0IHsgVGFnUmVzdWx0IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5cbmV4cG9ydCBjbGFzcyBUYWdMaXN0IGltcGxlbWVudHMgVGFnUmVzdWx0IHtcbiAgIGNvbnN0cnVjdG9yKFxuICAgICAgcHVibGljIHJlYWRvbmx5IGFsbDogc3RyaW5nW10sXG4gICAgICBwdWJsaWMgcmVhZG9ubHkgbGF0ZXN0OiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgICkge31cbn1cblxuZXhwb3J0IGNvbnN0IHBhcnNlVGFnTGlzdCA9IGZ1bmN0aW9uIChkYXRhOiBzdHJpbmcsIGN1c3RvbVNvcnQgPSBmYWxzZSkge1xuICAgY29uc3QgdGFncyA9IGRhdGEuc3BsaXQoJ1xcbicpLm1hcCh0cmltbWVkKS5maWx0ZXIoQm9vbGVhbik7XG5cbiAgIGlmICghY3VzdG9tU29ydCkge1xuICAgICAgdGFncy5zb3J0KGZ1bmN0aW9uICh0YWdBLCB0YWdCKSB7XG4gICAgICAgICBjb25zdCBwYXJ0c0EgPSB0YWdBLnNwbGl0KCcuJyk7XG4gICAgICAgICBjb25zdCBwYXJ0c0IgPSB0YWdCLnNwbGl0KCcuJyk7XG5cbiAgICAgICAgIGlmIChwYXJ0c0EubGVuZ3RoID09PSAxIHx8IHBhcnRzQi5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBzaW5nbGVTb3J0ZWQodG9OdW1iZXIocGFydHNBWzBdKSwgdG9OdW1iZXIocGFydHNCWzBdKSk7XG4gICAgICAgICB9XG5cbiAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gTWF0aC5tYXgocGFydHNBLmxlbmd0aCwgcGFydHNCLmxlbmd0aCk7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGRpZmYgPSBzb3J0ZWQodG9OdW1iZXIocGFydHNBW2ldKSwgdG9OdW1iZXIocGFydHNCW2ldKSk7XG5cbiAgICAgICAgICAgIGlmIChkaWZmKSB7XG4gICAgICAgICAgICAgICByZXR1cm4gZGlmZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgIH1cblxuICAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9KTtcbiAgIH1cblxuICAgY29uc3QgbGF0ZXN0ID0gY3VzdG9tU29ydCA/IHRhZ3NbMF0gOiBbLi4udGFnc10ucmV2ZXJzZSgpLmZpbmQoKHRhZykgPT4gdGFnLmluZGV4T2YoJy4nKSA+PSAwKTtcblxuICAgcmV0dXJuIG5ldyBUYWdMaXN0KHRhZ3MsIGxhdGVzdCk7XG59O1xuXG5mdW5jdGlvbiBzaW5nbGVTb3J0ZWQoYTogbnVtYmVyLCBiOiBudW1iZXIpOiBudW1iZXIge1xuICAgY29uc3QgYUlzTnVtID0gaXNOYU4oYSk7XG4gICBjb25zdCBiSXNOdW0gPSBpc05hTihiKTtcblxuICAgaWYgKGFJc051bSAhPT0gYklzTnVtKSB7XG4gICAgICByZXR1cm4gYUlzTnVtID8gMSA6IC0xO1xuICAgfVxuXG4gICByZXR1cm4gYUlzTnVtID8gc29ydGVkKGEsIGIpIDogMDtcbn1cblxuZnVuY3Rpb24gc29ydGVkKGE6IG51bWJlciwgYjogbnVtYmVyKSB7XG4gICByZXR1cm4gYSA9PT0gYiA/IDAgOiBhID4gYiA/IDEgOiAtMTtcbn1cblxuZnVuY3Rpb24gdHJpbW1lZChpbnB1dDogc3RyaW5nKSB7XG4gICByZXR1cm4gaW5wdXQudHJpbSgpO1xufVxuXG5mdW5jdGlvbiB0b051bWJlcihpbnB1dDogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KGlucHV0LnJlcGxhY2UoL15cXEQrL2csICcnKSwgMTApIHx8IDA7XG4gICB9XG5cbiAgIHJldHVybiAwO1xufVxuIiwgImltcG9ydCB7IFRhZ1Jlc3VsdCB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuaW1wb3J0IHsgcGFyc2VUYWdMaXN0IH0gZnJvbSAnLi4vcmVzcG9uc2VzL1RhZ0xpc3QnO1xuaW1wb3J0IHsgU3RyaW5nVGFzayB9IGZyb20gJy4uL3R5cGVzJztcblxuLyoqXG4gKiBUYXNrIHVzZWQgYnkgYGdpdC50YWdzYFxuICovXG5leHBvcnQgZnVuY3Rpb24gdGFnTGlzdFRhc2soY3VzdG9tQXJnczogc3RyaW5nW10gPSBbXSk6IFN0cmluZ1Rhc2s8VGFnUmVzdWx0PiB7XG4gICBjb25zdCBoYXNDdXN0b21Tb3J0ID0gY3VzdG9tQXJncy5zb21lKChvcHRpb24pID0+IC9eLS1zb3J0PS8udGVzdChvcHRpb24pKTtcblxuICAgcmV0dXJuIHtcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIGNvbW1hbmRzOiBbJ3RhZycsICctbCcsIC4uLmN1c3RvbUFyZ3NdLFxuICAgICAgcGFyc2VyKHRleHQ6IHN0cmluZykge1xuICAgICAgICAgcmV0dXJuIHBhcnNlVGFnTGlzdCh0ZXh0LCBoYXNDdXN0b21Tb3J0KTtcbiAgICAgIH0sXG4gICB9O1xufVxuXG4vKipcbiAqIFRhc2sgdXNlZCBieSBgZ2l0LmFkZFRhZ2BcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZFRhZ1Rhc2sobmFtZTogc3RyaW5nKTogU3RyaW5nVGFzazx7IG5hbWU6IHN0cmluZyB9PiB7XG4gICByZXR1cm4ge1xuICAgICAgZm9ybWF0OiAndXRmLTgnLFxuICAgICAgY29tbWFuZHM6IFsndGFnJywgbmFtZV0sXG4gICAgICBwYXJzZXIoKSB7XG4gICAgICAgICByZXR1cm4geyBuYW1lIH07XG4gICAgICB9LFxuICAgfTtcbn1cblxuLyoqXG4gKiBUYXNrIHVzZWQgYnkgYGdpdC5hZGRUYWdgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRBbm5vdGF0ZWRUYWdUYXNrKFxuICAgbmFtZTogc3RyaW5nLFxuICAgdGFnTWVzc2FnZTogc3RyaW5nXG4pOiBTdHJpbmdUYXNrPHsgbmFtZTogc3RyaW5nIH0+IHtcbiAgIHJldHVybiB7XG4gICAgICBmb3JtYXQ6ICd1dGYtOCcsXG4gICAgICBjb21tYW5kczogWyd0YWcnLCAnLWEnLCAnLW0nLCB0YWdNZXNzYWdlLCBuYW1lXSxcbiAgICAgIHBhcnNlcigpIHtcbiAgICAgICAgIHJldHVybiB7IG5hbWUgfTtcbiAgICAgIH0sXG4gICB9O1xufVxuIiwgImNvbnN0IHsgR2l0RXhlY3V0b3IgfSA9IHJlcXVpcmUoJy4vbGliL3J1bm5lcnMvZ2l0LWV4ZWN1dG9yJyk7XG5jb25zdCB7IFNpbXBsZUdpdEFwaSB9ID0gcmVxdWlyZSgnLi9saWIvc2ltcGxlLWdpdC1hcGknKTtcblxuY29uc3QgeyBTY2hlZHVsZXIgfSA9IHJlcXVpcmUoJy4vbGliL3J1bm5lcnMvc2NoZWR1bGVyJyk7XG5jb25zdCB7IGNvbmZpZ3VyYXRpb25FcnJvclRhc2sgfSA9IHJlcXVpcmUoJy4vbGliL3Rhc2tzL3Rhc2snKTtcbmNvbnN0IHtcbiAgIGFzQXJyYXksXG4gICBmaWx0ZXJBcnJheSxcbiAgIGZpbHRlclByaW1pdGl2ZXMsXG4gICBmaWx0ZXJTdHJpbmcsXG4gICBmaWx0ZXJTdHJpbmdPclN0cmluZ0FycmF5LFxuICAgZmlsdGVyVHlwZSxcbiAgIGdldFRyYWlsaW5nT3B0aW9ucyxcbiAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudCxcbiAgIHRyYWlsaW5nT3B0aW9uc0FyZ3VtZW50LFxufSA9IHJlcXVpcmUoJy4vbGliL3V0aWxzJyk7XG5jb25zdCB7IGFwcGx5UGF0Y2hUYXNrIH0gPSByZXF1aXJlKCcuL2xpYi90YXNrcy9hcHBseS1wYXRjaCcpO1xuY29uc3Qge1xuICAgYnJhbmNoVGFzayxcbiAgIGJyYW5jaExvY2FsVGFzayxcbiAgIGRlbGV0ZUJyYW5jaGVzVGFzayxcbiAgIGRlbGV0ZUJyYW5jaFRhc2ssXG59ID0gcmVxdWlyZSgnLi9saWIvdGFza3MvYnJhbmNoJyk7XG5jb25zdCB7IGNoZWNrSWdub3JlVGFzayB9ID0gcmVxdWlyZSgnLi9saWIvdGFza3MvY2hlY2staWdub3JlJyk7XG5jb25zdCB7IGNoZWNrSXNSZXBvVGFzayB9ID0gcmVxdWlyZSgnLi9saWIvdGFza3MvY2hlY2staXMtcmVwbycpO1xuY29uc3QgeyBjbG9uZVRhc2ssIGNsb25lTWlycm9yVGFzayB9ID0gcmVxdWlyZSgnLi9saWIvdGFza3MvY2xvbmUnKTtcbmNvbnN0IHsgY2xlYW5XaXRoT3B0aW9uc1Rhc2ssIGlzQ2xlYW5PcHRpb25zQXJyYXkgfSA9IHJlcXVpcmUoJy4vbGliL3Rhc2tzL2NsZWFuJyk7XG5jb25zdCB7IGRpZmZTdW1tYXJ5VGFzayB9ID0gcmVxdWlyZSgnLi9saWIvdGFza3MvZGlmZicpO1xuY29uc3QgeyBmZXRjaFRhc2sgfSA9IHJlcXVpcmUoJy4vbGliL3Rhc2tzL2ZldGNoJyk7XG5jb25zdCB7IG1vdmVUYXNrIH0gPSByZXF1aXJlKCcuL2xpYi90YXNrcy9tb3ZlJyk7XG5jb25zdCB7IHB1bGxUYXNrIH0gPSByZXF1aXJlKCcuL2xpYi90YXNrcy9wdWxsJyk7XG5jb25zdCB7IHB1c2hUYWdzVGFzayB9ID0gcmVxdWlyZSgnLi9saWIvdGFza3MvcHVzaCcpO1xuY29uc3Qge1xuICAgYWRkUmVtb3RlVGFzayxcbiAgIGdldFJlbW90ZXNUYXNrLFxuICAgbGlzdFJlbW90ZXNUYXNrLFxuICAgcmVtb3RlVGFzayxcbiAgIHJlbW92ZVJlbW90ZVRhc2ssXG59ID0gcmVxdWlyZSgnLi9saWIvdGFza3MvcmVtb3RlJyk7XG5jb25zdCB7IGdldFJlc2V0TW9kZSwgcmVzZXRUYXNrIH0gPSByZXF1aXJlKCcuL2xpYi90YXNrcy9yZXNldCcpO1xuY29uc3QgeyBzdGFzaExpc3RUYXNrIH0gPSByZXF1aXJlKCcuL2xpYi90YXNrcy9zdGFzaC1saXN0Jyk7XG5jb25zdCB7XG4gICBhZGRTdWJNb2R1bGVUYXNrLFxuICAgaW5pdFN1Yk1vZHVsZVRhc2ssXG4gICBzdWJNb2R1bGVUYXNrLFxuICAgdXBkYXRlU3ViTW9kdWxlVGFzayxcbn0gPSByZXF1aXJlKCcuL2xpYi90YXNrcy9zdWItbW9kdWxlJyk7XG5jb25zdCB7IGFkZEFubm90YXRlZFRhZ1Rhc2ssIGFkZFRhZ1Rhc2ssIHRhZ0xpc3RUYXNrIH0gPSByZXF1aXJlKCcuL2xpYi90YXNrcy90YWcnKTtcbmNvbnN0IHsgc3RyYWlnaHRUaHJvdWdoQnVmZmVyVGFzaywgc3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayB9ID0gcmVxdWlyZSgnLi9saWIvdGFza3MvdGFzaycpO1xuXG5mdW5jdGlvbiBHaXQob3B0aW9ucywgcGx1Z2lucykge1xuICAgdGhpcy5fcGx1Z2lucyA9IHBsdWdpbnM7XG4gICB0aGlzLl9leGVjdXRvciA9IG5ldyBHaXRFeGVjdXRvcihcbiAgICAgIG9wdGlvbnMuYmFzZURpcixcbiAgICAgIG5ldyBTY2hlZHVsZXIob3B0aW9ucy5tYXhDb25jdXJyZW50UHJvY2Vzc2VzKSxcbiAgICAgIHBsdWdpbnNcbiAgICk7XG5cbiAgIHRoaXMuX3RyaW1tZWQgPSBvcHRpb25zLnRyaW1tZWQ7XG59XG5cbihHaXQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTaW1wbGVHaXRBcGkucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBHaXQ7XG5cbi8qKlxuICogU2V0cyB0aGUgcGF0aCB0byBhIGN1c3RvbSBnaXQgYmluYXJ5LCBzaG91bGQgZWl0aGVyIGJlIGBnaXRgIHdoZW4gdGhlcmUgaXMgYW4gaW5zdGFsbGF0aW9uIG9mIGdpdCBhdmFpbGFibGUgb25cbiAqIHRoZSBzeXN0ZW0gcGF0aCwgb3IgYSBmdWxseSBxdWFsaWZpZWQgcGF0aCB0byB0aGUgZXhlY3V0YWJsZS5cbiAqL1xuR2l0LnByb3RvdHlwZS5jdXN0b21CaW5hcnkgPSBmdW5jdGlvbiAoY29tbWFuZCkge1xuICAgdGhpcy5fcGx1Z2lucy5yZWNvbmZpZ3VyZSgnYmluYXJ5JywgY29tbWFuZCk7XG4gICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyBhbiBlbnZpcm9ubWVudCB2YXJpYWJsZSBmb3IgdGhlIHNwYXduZWQgY2hpbGQgcHJvY2VzcywgZWl0aGVyIHN1cHBseSBib3RoIGEgbmFtZSBhbmQgdmFsdWUgYXMgc3RyaW5ncyBvclxuICogYSBzaW5nbGUgb2JqZWN0IHRvIGVudGlyZWx5IHJlcGxhY2UgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQgdmFyaWFibGVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IFt2YWx1ZV1cbiAqIEByZXR1cm5zIHtHaXR9XG4gKi9cbkdpdC5wcm90b3R5cGUuZW52ID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHRoaXMuX2V4ZWN1dG9yLmVudiA9IG5hbWU7XG4gICB9IGVsc2Uge1xuICAgICAgKHRoaXMuX2V4ZWN1dG9yLmVudiA9IHRoaXMuX2V4ZWN1dG9yLmVudiB8fCB7fSlbbmFtZV0gPSB2YWx1ZTtcbiAgIH1cblxuICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIExpc3QgdGhlIHN0YXNoKHMpIG9mIHRoZSBsb2NhbCByZXBvXG4gKi9cbkdpdC5wcm90b3R5cGUuc3Rhc2hMaXN0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgc3Rhc2hMaXN0VGFzayhcbiAgICAgICAgIHRyYWlsaW5nT3B0aW9uc0FyZ3VtZW50KGFyZ3VtZW50cykgfHwge30sXG4gICAgICAgICAoZmlsdGVyQXJyYXkob3B0aW9ucykgJiYgb3B0aW9ucykgfHwgW11cbiAgICAgICksXG4gICAgICB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKVxuICAgKTtcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUNsb25lVGFzayhhcGksIHRhc2ssIHJlcG9QYXRoLCBsb2NhbFBhdGgpIHtcbiAgIGlmICh0eXBlb2YgcmVwb1BhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gY29uZmlndXJhdGlvbkVycm9yVGFzayhgZ2l0LiR7YXBpfSgpIHJlcXVpcmVzIGEgc3RyaW5nICdyZXBvUGF0aCdgKTtcbiAgIH1cblxuICAgcmV0dXJuIHRhc2socmVwb1BhdGgsIGZpbHRlclR5cGUobG9jYWxQYXRoLCBmaWx0ZXJTdHJpbmcpLCBnZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzKSk7XG59XG5cbi8qKlxuICogQ2xvbmUgYSBnaXQgcmVwb1xuICovXG5HaXQucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICBjcmVhdGVDbG9uZVRhc2soJ2Nsb25lJywgY2xvbmVUYXNrLCAuLi5hcmd1bWVudHMpLFxuICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICk7XG59O1xuXG4vKipcbiAqIE1pcnJvciBhIGdpdCByZXBvXG4gKi9cbkdpdC5wcm90b3R5cGUubWlycm9yID0gZnVuY3Rpb24gKCkge1xuICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICBjcmVhdGVDbG9uZVRhc2soJ21pcnJvcicsIGNsb25lTWlycm9yVGFzaywgLi4uYXJndW1lbnRzKSxcbiAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICApO1xufTtcblxuLyoqXG4gKiBNb3ZlcyBvbmUgb3IgbW9yZSBmaWxlcyB0byBhIG5ldyBkZXN0aW5hdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0LXNjbS5jb20vZG9jcy9naXQtbXZcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gZnJvbVxuICogQHBhcmFtIHtzdHJpbmd9IHRvXG4gKi9cbkdpdC5wcm90b3R5cGUubXYgPSBmdW5jdGlvbiAoZnJvbSwgdG8pIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKG1vdmVUYXNrKGZyb20sIHRvKSwgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cykpO1xufTtcblxuLyoqXG4gKiBJbnRlcm5hbGx5IHVzZXMgcHVsbCBhbmQgdGFncyB0byBnZXQgdGhlIGxpc3Qgb2YgdGFncyB0aGVuIGNoZWNrcyBvdXQgdGhlIGxhdGVzdCB0YWcuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3RoZW5dXG4gKi9cbkdpdC5wcm90b3R5cGUuY2hlY2tvdXRMYXRlc3RUYWcgPSBmdW5jdGlvbiAodGhlbikge1xuICAgdmFyIGdpdCA9IHRoaXM7XG4gICByZXR1cm4gdGhpcy5wdWxsKGZ1bmN0aW9uICgpIHtcbiAgICAgIGdpdC50YWdzKGZ1bmN0aW9uIChlcnIsIHRhZ3MpIHtcbiAgICAgICAgIGdpdC5jaGVja291dCh0YWdzLmxhdGVzdCwgdGhlbik7XG4gICAgICB9KTtcbiAgIH0pO1xufTtcblxuLyoqXG4gKiBQdWxsIHRoZSB1cGRhdGVkIGNvbnRlbnRzIG9mIHRoZSBjdXJyZW50IHJlcG9cbiAqL1xuR2l0LnByb3RvdHlwZS5wdWxsID0gZnVuY3Rpb24gKHJlbW90ZSwgYnJhbmNoLCBvcHRpb25zLCB0aGVuKSB7XG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayhcbiAgICAgIHB1bGxUYXNrKFxuICAgICAgICAgZmlsdGVyVHlwZShyZW1vdGUsIGZpbHRlclN0cmluZyksXG4gICAgICAgICBmaWx0ZXJUeXBlKGJyYW5jaCwgZmlsdGVyU3RyaW5nKSxcbiAgICAgICAgIGdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMpXG4gICAgICApLFxuICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICk7XG59O1xuXG4vKipcbiAqIEZldGNoIHRoZSB1cGRhdGVkIGNvbnRlbnRzIG9mIHRoZSBjdXJyZW50IHJlcG8uXG4gKlxuICogQGV4YW1wbGVcbiAqICAgLmZldGNoKCd1cHN0cmVhbScsICdtYXN0ZXInKSAvLyBmZXRjaGVzIGZyb20gbWFzdGVyIG9uIHJlbW90ZSBuYW1lZCB1cHN0cmVhbVxuICogICAuZmV0Y2goZnVuY3Rpb24gKCkge30pIC8vIHJ1bnMgZmV0Y2ggYWdhaW5zdCBkZWZhdWx0IHJlbW90ZSBhbmQgYnJhbmNoIGFuZCBjYWxscyBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcmVtb3RlXVxuICogQHBhcmFtIHtzdHJpbmd9IFticmFuY2hdXG4gKi9cbkdpdC5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbiAocmVtb3RlLCBicmFuY2gpIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgZmV0Y2hUYXNrKFxuICAgICAgICAgZmlsdGVyVHlwZShyZW1vdGUsIGZpbHRlclN0cmluZyksXG4gICAgICAgICBmaWx0ZXJUeXBlKGJyYW5jaCwgZmlsdGVyU3RyaW5nKSxcbiAgICAgICAgIGdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMpXG4gICAgICApLFxuICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICk7XG59O1xuXG4vKipcbiAqIERpc2FibGVzL2VuYWJsZXMgdGhlIHVzZSBvZiB0aGUgY29uc29sZSBmb3IgcHJpbnRpbmcgd2FybmluZ3MgYW5kIGVycm9ycywgYnkgZGVmYXVsdCBtZXNzYWdlcyBhcmUgbm90IHNob3duIGluXG4gKiBhIHByb2R1Y3Rpb24gZW52aXJvbm1lbnQuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSBzaWxlbmNlXG4gKiBAcmV0dXJucyB7R2l0fVxuICovXG5HaXQucHJvdG90eXBlLnNpbGVudCA9IGZ1bmN0aW9uIChzaWxlbmNlKSB7XG4gICBjb25zb2xlLndhcm4oXG4gICAgICAnc2ltcGxlLWdpdCBkZXByZWNhdGlvbiBub3RpY2U6IGdpdC5zaWxlbnQ6IGxvZ2dpbmcgc2hvdWxkIGJlIGNvbmZpZ3VyZWQgdXNpbmcgdGhlIGBkZWJ1Z2AgbGlicmFyeSAvIGBERUJVR2AgZW52aXJvbm1lbnQgdmFyaWFibGUsIHRoaXMgd2lsbCBiZSBhbiBlcnJvciBpbiB2ZXJzaW9uIDMnXG4gICApO1xuICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIExpc3QgYWxsIHRhZ3MuIFdoZW4gdXNpbmcgZ2l0IDIuNy4wIG9yIGFib3ZlLCBpbmNsdWRlIGFuIG9wdGlvbnMgb2JqZWN0IHdpdGggYFwiLS1zb3J0XCI6IFwicHJvcGVydHktbmFtZVwiYCB0b1xuICogc29ydCB0aGUgdGFncyBieSB0aGF0IHByb3BlcnR5IGluc3RlYWQgb2YgdXNpbmcgdGhlIGRlZmF1bHQgc2VtYW50aWMgdmVyc2lvbmluZyBzb3J0LlxuICpcbiAqIE5vdGUsIHN1cHBseWluZyB0aGlzIG9wdGlvbiB3aGVuIGl0IGlzIG5vdCBzdXBwb3J0ZWQgYnkgeW91ciBHaXQgdmVyc2lvbiB3aWxsIGNhdXNlIHRoZSBvcGVyYXRpb24gdG8gZmFpbC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbdGhlbl1cbiAqL1xuR2l0LnByb3RvdHlwZS50YWdzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHRoZW4pIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgdGFnTGlzdFRhc2soZ2V0VHJhaWxpbmdPcHRpb25zKGFyZ3VtZW50cykpLFxuICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICk7XG59O1xuXG4vKipcbiAqIFJlYmFzZXMgdGhlIGN1cnJlbnQgd29ya2luZyBjb3B5LiBPcHRpb25zIGNhbiBiZSBzdXBwbGllZCBlaXRoZXIgYXMgYW4gYXJyYXkgb2Ygc3RyaW5nIHBhcmFtZXRlcnNcbiAqIHRvIGJlIHNlbnQgdG8gdGhlIGBnaXQgcmViYXNlYCBjb21tYW5kLCBvciBhIHN0YW5kYXJkIG9wdGlvbnMgb2JqZWN0LlxuICovXG5HaXQucHJvdG90eXBlLnJlYmFzZSA9IGZ1bmN0aW9uICgpIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgc3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayhbJ3JlYmFzZScsIC4uLmdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMpXSksXG4gICAgICB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKVxuICAgKTtcbn07XG5cbi8qKlxuICogUmVzZXQgYSByZXBvXG4gKi9cbkdpdC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAobW9kZSkge1xuICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICByZXNldFRhc2soZ2V0UmVzZXRNb2RlKG1vZGUpLCBnZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzKSksXG4gICAgICB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKVxuICAgKTtcbn07XG5cbi8qKlxuICogUmV2ZXJ0IG9uZSBvciBtb3JlIGNvbW1pdHMgaW4gdGhlIGxvY2FsIHdvcmtpbmcgY29weVxuICovXG5HaXQucHJvdG90eXBlLnJldmVydCA9IGZ1bmN0aW9uIChjb21taXQpIHtcbiAgIGNvbnN0IG5leHQgPSB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKTtcblxuICAgaWYgKHR5cGVvZiBjb21taXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnVuVGFzayhjb25maWd1cmF0aW9uRXJyb3JUYXNrKCdDb21taXQgbXVzdCBiZSBhIHN0cmluZycpLCBuZXh0KTtcbiAgIH1cblxuICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKFsncmV2ZXJ0JywgLi4uZ2V0VHJhaWxpbmdPcHRpb25zKGFyZ3VtZW50cywgMCwgdHJ1ZSksIGNvbW1pdF0pLFxuICAgICAgbmV4dFxuICAgKTtcbn07XG5cbi8qKlxuICogQWRkIGEgbGlnaHR3ZWlnaHQgdGFnIHRvIHRoZSBoZWFkIG9mIHRoZSBjdXJyZW50IGJyYW5jaFxuICovXG5HaXQucHJvdG90eXBlLmFkZFRhZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICBjb25zdCB0YXNrID1cbiAgICAgIHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJ1xuICAgICAgICAgPyBhZGRUYWdUYXNrKG5hbWUpXG4gICAgICAgICA6IGNvbmZpZ3VyYXRpb25FcnJvclRhc2soJ0dpdC5hZGRUYWcgcmVxdWlyZXMgYSB0YWcgbmFtZScpO1xuXG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayh0YXNrLCB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKSk7XG59O1xuXG4vKipcbiAqIEFkZCBhbiBhbm5vdGF0ZWQgdGFnIHRvIHRoZSBoZWFkIG9mIHRoZSBjdXJyZW50IGJyYW5jaFxuICovXG5HaXQucHJvdG90eXBlLmFkZEFubm90YXRlZFRhZyA9IGZ1bmN0aW9uICh0YWdOYW1lLCB0YWdNZXNzYWdlKSB7XG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayhcbiAgICAgIGFkZEFubm90YXRlZFRhZ1Rhc2sodGFnTmFtZSwgdGFnTWVzc2FnZSksXG4gICAgICB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKVxuICAgKTtcbn07XG5cbi8qKlxuICogRGVsZXRlIGEgbG9jYWwgYnJhbmNoXG4gKi9cbkdpdC5wcm90b3R5cGUuZGVsZXRlTG9jYWxCcmFuY2ggPSBmdW5jdGlvbiAoYnJhbmNoTmFtZSwgZm9yY2VEZWxldGUsIHRoZW4pIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgZGVsZXRlQnJhbmNoVGFzayhicmFuY2hOYW1lLCB0eXBlb2YgZm9yY2VEZWxldGUgPT09ICdib29sZWFuJyA/IGZvcmNlRGVsZXRlIDogZmFsc2UpLFxuICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICk7XG59O1xuXG4vKipcbiAqIERlbGV0ZSBvbmUgb3IgbW9yZSBsb2NhbCBicmFuY2hlc1xuICovXG5HaXQucHJvdG90eXBlLmRlbGV0ZUxvY2FsQnJhbmNoZXMgPSBmdW5jdGlvbiAoYnJhbmNoTmFtZXMsIGZvcmNlRGVsZXRlLCB0aGVuKSB7XG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayhcbiAgICAgIGRlbGV0ZUJyYW5jaGVzVGFzayhicmFuY2hOYW1lcywgdHlwZW9mIGZvcmNlRGVsZXRlID09PSAnYm9vbGVhbicgPyBmb3JjZURlbGV0ZSA6IGZhbHNlKSxcbiAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICApO1xufTtcblxuLyoqXG4gKiBMaXN0IGFsbCBicmFuY2hlc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0IHwgc3RyaW5nW119IFtvcHRpb25zXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3RoZW5dXG4gKi9cbkdpdC5wcm90b3R5cGUuYnJhbmNoID0gZnVuY3Rpb24gKG9wdGlvbnMsIHRoZW4pIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgYnJhbmNoVGFzayhnZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzKSksXG4gICAgICB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKVxuICAgKTtcbn07XG5cbi8qKlxuICogUmV0dXJuIGxpc3Qgb2YgbG9jYWwgYnJhbmNoZXNcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbdGhlbl1cbiAqL1xuR2l0LnByb3RvdHlwZS5icmFuY2hMb2NhbCA9IGZ1bmN0aW9uICh0aGVuKSB7XG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayhicmFuY2hMb2NhbFRhc2soKSwgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cykpO1xufTtcblxuLyoqXG4gKiBFeGVjdXRlcyBhbnkgY29tbWFuZCBhZ2FpbnN0IHRoZSBnaXQgYmluYXJ5LlxuICovXG5HaXQucHJvdG90eXBlLnJhdyA9IGZ1bmN0aW9uIChjb21tYW5kcykge1xuICAgY29uc3QgY3JlYXRlUmVzdENvbW1hbmRzID0gIUFycmF5LmlzQXJyYXkoY29tbWFuZHMpO1xuICAgY29uc3QgY29tbWFuZCA9IFtdLnNsaWNlLmNhbGwoY3JlYXRlUmVzdENvbW1hbmRzID8gYXJndW1lbnRzIDogY29tbWFuZHMsIDApO1xuXG4gICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbW1hbmQubGVuZ3RoICYmIGNyZWF0ZVJlc3RDb21tYW5kczsgaSsrKSB7XG4gICAgICBpZiAoIWZpbHRlclByaW1pdGl2ZXMoY29tbWFuZFtpXSkpIHtcbiAgICAgICAgIGNvbW1hbmQuc3BsaWNlKGksIGNvbW1hbmQubGVuZ3RoIC0gaSk7XG4gICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgIH1cblxuICAgY29tbWFuZC5wdXNoKC4uLmdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMsIDAsIHRydWUpKTtcblxuICAgdmFyIG5leHQgPSB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKTtcblxuICAgaWYgKCFjb21tYW5kLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICAgICBjb25maWd1cmF0aW9uRXJyb3JUYXNrKCdSYXc6IG11c3Qgc3VwcGx5IG9uZSBvciBtb3JlIGNvbW1hbmQgdG8gZXhlY3V0ZScpLFxuICAgICAgICAgbmV4dFxuICAgICAgKTtcbiAgIH1cblxuICAgcmV0dXJuIHRoaXMuX3J1blRhc2soc3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayhjb21tYW5kLCB0aGlzLl90cmltbWVkKSwgbmV4dCk7XG59O1xuXG5HaXQucHJvdG90eXBlLnN1Ym1vZHVsZUFkZCA9IGZ1bmN0aW9uIChyZXBvLCBwYXRoLCB0aGVuKSB7XG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayhhZGRTdWJNb2R1bGVUYXNrKHJlcG8sIHBhdGgpLCB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKSk7XG59O1xuXG5HaXQucHJvdG90eXBlLnN1Ym1vZHVsZVVwZGF0ZSA9IGZ1bmN0aW9uIChhcmdzLCB0aGVuKSB7XG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayhcbiAgICAgIHVwZGF0ZVN1Yk1vZHVsZVRhc2soZ2V0VHJhaWxpbmdPcHRpb25zKGFyZ3VtZW50cywgdHJ1ZSkpLFxuICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICk7XG59O1xuXG5HaXQucHJvdG90eXBlLnN1Ym1vZHVsZUluaXQgPSBmdW5jdGlvbiAoYXJncywgdGhlbikge1xuICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICBpbml0U3ViTW9kdWxlVGFzayhnZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzLCB0cnVlKSksXG4gICAgICB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKVxuICAgKTtcbn07XG5cbkdpdC5wcm90b3R5cGUuc3ViTW9kdWxlID0gZnVuY3Rpb24gKG9wdGlvbnMsIHRoZW4pIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgc3ViTW9kdWxlVGFzayhnZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzKSksXG4gICAgICB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKVxuICAgKTtcbn07XG5cbkdpdC5wcm90b3R5cGUubGlzdFJlbW90ZSA9IGZ1bmN0aW9uICgpIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgbGlzdFJlbW90ZXNUYXNrKGdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMpKSxcbiAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICApO1xufTtcblxuLyoqXG4gKiBBZGRzIGEgcmVtb3RlIHRvIHRoZSBsaXN0IG9mIHJlbW90ZXMuXG4gKi9cbkdpdC5wcm90b3R5cGUuYWRkUmVtb3RlID0gZnVuY3Rpb24gKHJlbW90ZU5hbWUsIHJlbW90ZVJlcG8sIHRoZW4pIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgYWRkUmVtb3RlVGFzayhyZW1vdGVOYW1lLCByZW1vdGVSZXBvLCBnZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzKSksXG4gICAgICB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKVxuICAgKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlcyBhbiBlbnRyeSBieSBuYW1lIGZyb20gdGhlIGxpc3Qgb2YgcmVtb3Rlcy5cbiAqL1xuR2l0LnByb3RvdHlwZS5yZW1vdmVSZW1vdGUgPSBmdW5jdGlvbiAocmVtb3RlTmFtZSwgdGhlbikge1xuICAgcmV0dXJuIHRoaXMuX3J1blRhc2socmVtb3ZlUmVtb3RlVGFzayhyZW1vdGVOYW1lKSwgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cykpO1xufTtcblxuLyoqXG4gKiBHZXRzIHRoZSBjdXJyZW50bHkgYXZhaWxhYmxlIHJlbW90ZXMsIHNldHRpbmcgdGhlIG9wdGlvbmFsIHZlcmJvc2UgYXJndW1lbnQgdG8gdHJ1ZSBpbmNsdWRlcyBhZGRpdGlvbmFsXG4gKiBkZXRhaWwgb24gdGhlIHJlbW90ZXMgdGhlbXNlbHZlcy5cbiAqL1xuR2l0LnByb3RvdHlwZS5nZXRSZW1vdGVzID0gZnVuY3Rpb24gKHZlcmJvc2UsIHRoZW4pIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKGdldFJlbW90ZXNUYXNrKHZlcmJvc2UgPT09IHRydWUpLCB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKSk7XG59O1xuXG4vKipcbiAqIENhbGwgYW55IGBnaXQgcmVtb3RlYCBmdW5jdGlvbiB3aXRoIGFyZ3VtZW50cyBwYXNzZWQgYXMgYW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBvcHRpb25zXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbdGhlbl1cbiAqL1xuR2l0LnByb3RvdHlwZS5yZW1vdGUgPSBmdW5jdGlvbiAob3B0aW9ucywgdGhlbikge1xuICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICByZW1vdGVUYXNrKGdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMpKSxcbiAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICApO1xufTtcblxuLyoqXG4gKiBDYWxsIGFueSBgZ2l0IHRhZ2AgZnVuY3Rpb24gd2l0aCBhcmd1bWVudHMgcGFzc2VkIGFzIGFuIGFycmF5IG9mIHN0cmluZ3MuXG4gKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gb3B0aW9uc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gW3RoZW5dXG4gKi9cbkdpdC5wcm90b3R5cGUudGFnID0gZnVuY3Rpb24gKG9wdGlvbnMsIHRoZW4pIHtcbiAgIGNvbnN0IGNvbW1hbmQgPSBnZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzKTtcblxuICAgaWYgKGNvbW1hbmRbMF0gIT09ICd0YWcnKSB7XG4gICAgICBjb21tYW5kLnVuc2hpZnQoJ3RhZycpO1xuICAgfVxuXG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayhzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKGNvbW1hbmQpLCB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKSk7XG59O1xuXG4vKipcbiAqIFVwZGF0ZXMgcmVwb3NpdG9yeSBzZXJ2ZXIgaW5mb1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFt0aGVuXVxuICovXG5HaXQucHJvdG90eXBlLnVwZGF0ZVNlcnZlckluZm8gPSBmdW5jdGlvbiAodGhlbikge1xuICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKFsndXBkYXRlLXNlcnZlci1pbmZvJ10pLFxuICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICk7XG59O1xuXG4vKipcbiAqIFB1c2hlcyB0aGUgY3VycmVudCB0YWcgY2hhbmdlcyB0byBhIHJlbW90ZSB3aGljaCBjYW4gYmUgZWl0aGVyIGEgVVJMIG9yIG5hbWVkIHJlbW90ZS4gV2hlbiBub3Qgc3BlY2lmaWVkIHVzZXMgdGhlXG4gKiBkZWZhdWx0IGNvbmZpZ3VyZWQgcmVtb3RlIHNwZWMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IFtyZW1vdGVdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbdGhlbl1cbiAqL1xuR2l0LnByb3RvdHlwZS5wdXNoVGFncyA9IGZ1bmN0aW9uIChyZW1vdGUsIHRoZW4pIHtcbiAgIGNvbnN0IHRhc2sgPSBwdXNoVGFnc1Rhc2soXG4gICAgICB7IHJlbW90ZTogZmlsdGVyVHlwZShyZW1vdGUsIGZpbHRlclN0cmluZykgfSxcbiAgICAgIGdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMpXG4gICApO1xuXG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayh0YXNrLCB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKSk7XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgdGhlIG5hbWVkIGZpbGVzIGZyb20gc291cmNlIGNvbnRyb2wuXG4gKi9cbkdpdC5wcm90b3R5cGUucm0gPSBmdW5jdGlvbiAoZmlsZXMpIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgc3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayhbJ3JtJywgJy1mJywgLi4uYXNBcnJheShmaWxlcyldKSxcbiAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICApO1xufTtcblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBuYW1lZCBmaWxlcyBmcm9tIHNvdXJjZSBjb250cm9sIGJ1dCBrZWVwcyB0aGVtIG9uIGRpc2sgcmF0aGVyIHRoYW4gZGVsZXRpbmcgdGhlbSBlbnRpcmVseS4gVG9cbiAqIGNvbXBsZXRlbHkgcmVtb3ZlIHRoZSBmaWxlcywgdXNlIGBybWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IGZpbGVzXG4gKi9cbkdpdC5wcm90b3R5cGUucm1LZWVwTG9jYWwgPSBmdW5jdGlvbiAoZmlsZXMpIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgc3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayhbJ3JtJywgJy0tY2FjaGVkJywgLi4uYXNBcnJheShmaWxlcyldKSxcbiAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICApO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgbGlzdCBvZiBvYmplY3RzIGluIGEgdHJlZSBiYXNlZCBvbiBjb21taXQgaGFzaC4gUGFzc2luZyBpbiBhbiBvYmplY3QgaGFzaCByZXR1cm5zIHRoZSBvYmplY3QncyBjb250ZW50LFxuICogc2l6ZSwgYW5kIHR5cGUuXG4gKlxuICogUGFzc2luZyBcIi1wXCIgd2lsbCBpbnN0cnVjdCBjYXQtZmlsZSB0byBkZXRlcm1pbmUgdGhlIG9iamVjdCB0eXBlLCBhbmQgZGlzcGxheSBpdHMgZm9ybWF0dGVkIGNvbnRlbnRzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nW119IFtvcHRpb25zXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3RoZW5dXG4gKi9cbkdpdC5wcm90b3R5cGUuY2F0RmlsZSA9IGZ1bmN0aW9uIChvcHRpb25zLCB0aGVuKSB7XG4gICByZXR1cm4gdGhpcy5fY2F0RmlsZSgndXRmLTgnLCBhcmd1bWVudHMpO1xufTtcblxuR2l0LnByb3RvdHlwZS5iaW5hcnlDYXRGaWxlID0gZnVuY3Rpb24gKCkge1xuICAgcmV0dXJuIHRoaXMuX2NhdEZpbGUoJ2J1ZmZlcicsIGFyZ3VtZW50cyk7XG59O1xuXG5HaXQucHJvdG90eXBlLl9jYXRGaWxlID0gZnVuY3Rpb24gKGZvcm1hdCwgYXJncykge1xuICAgdmFyIGhhbmRsZXIgPSB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJncyk7XG4gICB2YXIgY29tbWFuZCA9IFsnY2F0LWZpbGUnXTtcbiAgIHZhciBvcHRpb25zID0gYXJnc1swXTtcblxuICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICAgICBjb25maWd1cmF0aW9uRXJyb3JUYXNrKCdHaXQuY2F0RmlsZTogb3B0aW9ucyBtdXN0IGJlIHN1cHBsaWVkIGFzIGFuIGFycmF5IG9mIHN0cmluZ3MnKSxcbiAgICAgICAgIGhhbmRsZXJcbiAgICAgICk7XG4gICB9XG5cbiAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgICBjb21tYW5kLnB1c2guYXBwbHkoY29tbWFuZCwgb3B0aW9ucyk7XG4gICB9XG5cbiAgIGNvbnN0IHRhc2sgPVxuICAgICAgZm9ybWF0ID09PSAnYnVmZmVyJyA/IHN0cmFpZ2h0VGhyb3VnaEJ1ZmZlclRhc2soY29tbWFuZCkgOiBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKGNvbW1hbmQpO1xuXG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayh0YXNrLCBoYW5kbGVyKTtcbn07XG5cbkdpdC5wcm90b3R5cGUuZGlmZiA9IGZ1bmN0aW9uIChvcHRpb25zLCB0aGVuKSB7XG4gICBjb25zdCB0YXNrID0gZmlsdGVyU3RyaW5nKG9wdGlvbnMpXG4gICAgICA/IGNvbmZpZ3VyYXRpb25FcnJvclRhc2soXG4gICAgICAgICAgICdnaXQuZGlmZjogc3VwcGx5aW5nIG9wdGlvbnMgYXMgYSBzaW5nbGUgc3RyaW5nIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQsIHN3aXRjaCB0byBhbiBhcnJheSBvZiBzdHJpbmdzJ1xuICAgICAgICApXG4gICAgICA6IHN0cmFpZ2h0VGhyb3VnaFN0cmluZ1Rhc2soWydkaWZmJywgLi4uZ2V0VHJhaWxpbmdPcHRpb25zKGFyZ3VtZW50cyldKTtcblxuICAgcmV0dXJuIHRoaXMuX3J1blRhc2sodGFzaywgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cykpO1xufTtcblxuR2l0LnByb3RvdHlwZS5kaWZmU3VtbWFyeSA9IGZ1bmN0aW9uICgpIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgZGlmZlN1bW1hcnlUYXNrKGdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMsIDEpKSxcbiAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICApO1xufTtcblxuR2l0LnByb3RvdHlwZS5hcHBseVBhdGNoID0gZnVuY3Rpb24gKHBhdGNoZXMpIHtcbiAgIGNvbnN0IHRhc2sgPSAhZmlsdGVyU3RyaW5nT3JTdHJpbmdBcnJheShwYXRjaGVzKVxuICAgICAgPyBjb25maWd1cmF0aW9uRXJyb3JUYXNrKFxuICAgICAgICAgICBgZ2l0LmFwcGx5UGF0Y2ggcmVxdWlyZXMgb25lIG9yIG1vcmUgc3RyaW5nIHBhdGNoZXMgYXMgdGhlIGZpcnN0IGFyZ3VtZW50YFxuICAgICAgICApXG4gICAgICA6IGFwcGx5UGF0Y2hUYXNrKGFzQXJyYXkocGF0Y2hlcyksIGdldFRyYWlsaW5nT3B0aW9ucyhbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpKTtcblxuICAgcmV0dXJuIHRoaXMuX3J1blRhc2sodGFzaywgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cykpO1xufTtcblxuR2l0LnByb3RvdHlwZS5yZXZwYXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgIGNvbnN0IGNvbW1hbmRzID0gWydyZXYtcGFyc2UnLCAuLi5nZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzLCB0cnVlKV07XG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayhcbiAgICAgIHN0cmFpZ2h0VGhyb3VnaFN0cmluZ1Rhc2soY29tbWFuZHMsIHRydWUpLFxuICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICk7XG59O1xuXG4vKipcbiAqL1xuR2l0LnByb3RvdHlwZS5jbGVhbiA9IGZ1bmN0aW9uIChtb2RlLCBvcHRpb25zLCB0aGVuKSB7XG4gICBjb25zdCB1c2luZ0NsZWFuT3B0aW9uc0FycmF5ID0gaXNDbGVhbk9wdGlvbnNBcnJheShtb2RlKTtcbiAgIGNvbnN0IGNsZWFuTW9kZSA9XG4gICAgICAodXNpbmdDbGVhbk9wdGlvbnNBcnJheSAmJiBtb2RlLmpvaW4oJycpKSB8fCBmaWx0ZXJUeXBlKG1vZGUsIGZpbHRlclN0cmluZykgfHwgJyc7XG4gICBjb25zdCBjdXN0b21BcmdzID0gZ2V0VHJhaWxpbmdPcHRpb25zKFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCB1c2luZ0NsZWFuT3B0aW9uc0FycmF5ID8gMSA6IDApKTtcblxuICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICBjbGVhbldpdGhPcHRpb25zVGFzayhjbGVhbk1vZGUsIGN1c3RvbUFyZ3MpLFxuICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICk7XG59O1xuXG5HaXQucHJvdG90eXBlLmV4ZWMgPSBmdW5jdGlvbiAodGhlbikge1xuICAgY29uc3QgdGFzayA9IHtcbiAgICAgIGNvbW1hbmRzOiBbXSxcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIHBhcnNlcigpIHtcbiAgICAgICAgIGlmICh0eXBlb2YgdGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhlbigpO1xuICAgICAgICAgfVxuICAgICAgfSxcbiAgIH07XG5cbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKHRhc2spO1xufTtcblxuLyoqXG4gKiBDbGVhcnMgdGhlIHF1ZXVlIG9mIHBlbmRpbmcgY29tbWFuZHMgYW5kIHJldHVybnMgdGhlIHdyYXBwZXIgaW5zdGFuY2UgZm9yIGNoYWluaW5nLlxuICpcbiAqIEByZXR1cm5zIHtHaXR9XG4gKi9cbkdpdC5wcm90b3R5cGUuY2xlYXJRdWV1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgIC8vIFRPRE86XG4gICAvLyB0aGlzLl9leGVjdXRvci5jbGVhcigpO1xuICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGEgcGF0aG5hbWUgb3IgcGF0aG5hbWVzIGFyZSBleGNsdWRlZCBieSAuZ2l0aWdub3JlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IHBhdGhuYW1lc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gW3RoZW5dXG4gKi9cbkdpdC5wcm90b3R5cGUuY2hlY2tJZ25vcmUgPSBmdW5jdGlvbiAocGF0aG5hbWVzLCB0aGVuKSB7XG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayhcbiAgICAgIGNoZWNrSWdub3JlVGFzayhhc0FycmF5KGZpbHRlclR5cGUocGF0aG5hbWVzLCBmaWx0ZXJTdHJpbmdPclN0cmluZ0FycmF5LCBbXSkpKSxcbiAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICApO1xufTtcblxuR2l0LnByb3RvdHlwZS5jaGVja0lzUmVwbyA9IGZ1bmN0aW9uIChjaGVja1R5cGUsIHRoZW4pIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgY2hlY2tJc1JlcG9UYXNrKGZpbHRlclR5cGUoY2hlY2tUeXBlLCBmaWx0ZXJTdHJpbmcpKSxcbiAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBHaXQ7XG4iLCAiaW1wb3J0IHsgcGF0aHNwZWMgfSBmcm9tICcuL2FyZ3MvcGF0aHNwZWMnO1xuaW1wb3J0IHsgR2l0Q29uc3RydWN0RXJyb3IgfSBmcm9tICcuL2Vycm9ycy9naXQtY29uc3RydWN0LWVycm9yJztcbmltcG9ydCB7IEdpdEVycm9yIH0gZnJvbSAnLi9lcnJvcnMvZ2l0LWVycm9yJztcbmltcG9ydCB7IEdpdFBsdWdpbkVycm9yIH0gZnJvbSAnLi9lcnJvcnMvZ2l0LXBsdWdpbi1lcnJvcic7XG5pbXBvcnQgeyBHaXRSZXNwb25zZUVycm9yIH0gZnJvbSAnLi9lcnJvcnMvZ2l0LXJlc3BvbnNlLWVycm9yJztcbmltcG9ydCB7IFRhc2tDb25maWd1cmF0aW9uRXJyb3IgfSBmcm9tICcuL2Vycm9ycy90YXNrLWNvbmZpZ3VyYXRpb24tZXJyb3InO1xuaW1wb3J0IHsgQ2hlY2tSZXBvQWN0aW9ucyB9IGZyb20gJy4vdGFza3MvY2hlY2staXMtcmVwbyc7XG5pbXBvcnQgeyBDbGVhbk9wdGlvbnMgfSBmcm9tICcuL3Rhc2tzL2NsZWFuJztcbmltcG9ydCB7IEdpdENvbmZpZ1Njb3BlIH0gZnJvbSAnLi90YXNrcy9jb25maWcnO1xuaW1wb3J0IHsgRGlmZk5hbWVTdGF0dXMgfSBmcm9tICcuL3Rhc2tzL2RpZmYtbmFtZS1zdGF0dXMnO1xuaW1wb3J0IHsgZ3JlcFF1ZXJ5QnVpbGRlciB9IGZyb20gJy4vdGFza3MvZ3JlcCc7XG5pbXBvcnQgeyBSZXNldE1vZGUgfSBmcm9tICcuL3Rhc2tzL3Jlc2V0JztcblxuZXhwb3J0IHtcbiAgIENoZWNrUmVwb0FjdGlvbnMsXG4gICBDbGVhbk9wdGlvbnMsXG4gICBEaWZmTmFtZVN0YXR1cyxcbiAgIEdpdENvbmZpZ1Njb3BlLFxuICAgR2l0Q29uc3RydWN0RXJyb3IsXG4gICBHaXRFcnJvcixcbiAgIEdpdFBsdWdpbkVycm9yLFxuICAgR2l0UmVzcG9uc2VFcnJvcixcbiAgIFJlc2V0TW9kZSxcbiAgIFRhc2tDb25maWd1cmF0aW9uRXJyb3IsXG4gICBncmVwUXVlcnlCdWlsZGVyLFxuICAgcGF0aHNwZWMsXG59O1xuIiwgImltcG9ydCB7IEdpdEVycm9yIH0gZnJvbSAnLi9naXQtZXJyb3InO1xuaW1wb3J0IHsgU2ltcGxlR2l0T3B0aW9ucyB9IGZyb20gJy4uL3R5cGVzJztcblxuLyoqXG4gKiBUaGUgYEdpdENvbnN0cnVjdEVycm9yYCBpcyB0aHJvd24gd2hlbiBhbiBlcnJvciBvY2N1cnMgaW4gdGhlIGNvbnN0cnVjdG9yXG4gKiBvZiB0aGUgYHNpbXBsZS1naXRgIGluc3RhbmNlIGl0c2VsZi4gTW9zdCBjb21tb25seSBhcyBhIHJlc3VsdCBvZiB1c2luZ1xuICogYSBgYmFzZURpcmAgb3B0aW9uIHRoYXQgcG9pbnRzIHRvIGEgZm9sZGVyIHRoYXQgZWl0aGVyIGRvZXMgbm90IGV4aXN0LFxuICogb3IgY2Fubm90IGJlIHJlYWQgYnkgdGhlIHVzZXIgdGhlIG5vZGUgc2NyaXB0IGlzIHJ1bm5pbmcgYXMuXG4gKlxuICogQ2hlY2sgdGhlIGAubWVzc2FnZWAgcHJvcGVydHkgZm9yIG1vcmUgZGV0YWlsIGluY2x1ZGluZyB0aGUgcHJvcGVydGllc1xuICogcGFzc2VkIHRvIHRoZSBjb25zdHJ1Y3Rvci5cbiAqL1xuZXhwb3J0IGNsYXNzIEdpdENvbnN0cnVjdEVycm9yIGV4dGVuZHMgR2l0RXJyb3Ige1xuICAgY29uc3RydWN0b3IoXG4gICAgICBwdWJsaWMgcmVhZG9ubHkgY29uZmlnOiBTaW1wbGVHaXRPcHRpb25zLFxuICAgICAgbWVzc2FnZTogc3RyaW5nXG4gICApIHtcbiAgICAgIHN1cGVyKHVuZGVmaW5lZCwgbWVzc2FnZSk7XG4gICB9XG59XG4iLCAiaW1wb3J0IHsgU2ltcGxlR2l0T3B0aW9ucywgU2ltcGxlR2l0VGFzayB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IEdpdEVycm9yIH0gZnJvbSAnLi9naXQtZXJyb3InO1xuXG5leHBvcnQgY2xhc3MgR2l0UGx1Z2luRXJyb3IgZXh0ZW5kcyBHaXRFcnJvciB7XG4gICBjb25zdHJ1Y3RvcihcbiAgICAgIHB1YmxpYyB0YXNrPzogU2ltcGxlR2l0VGFzazxhbnk+LFxuICAgICAgcHVibGljIHJlYWRvbmx5IHBsdWdpbj86IGtleW9mIFNpbXBsZUdpdE9wdGlvbnMsXG4gICAgICBtZXNzYWdlPzogc3RyaW5nXG4gICApIHtcbiAgICAgIHN1cGVyKHRhc2ssIG1lc3NhZ2UpO1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIG5ldy50YXJnZXQucHJvdG90eXBlKTtcbiAgIH1cbn1cbiIsICJpbXBvcnQgeyBTaW1wbGVHaXRPcHRpb25zIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgU2ltcGxlR2l0UGx1Z2luIH0gZnJvbSAnLi9zaW1wbGUtZ2l0LXBsdWdpbic7XG5pbXBvcnQgeyBHaXRQbHVnaW5FcnJvciB9IGZyb20gJy4uL2Vycm9ycy9naXQtcGx1Z2luLWVycm9yJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFib3J0UGx1Z2luKHNpZ25hbDogU2ltcGxlR2l0T3B0aW9uc1snYWJvcnQnXSkge1xuICAgaWYgKCFzaWduYWwpIHtcbiAgICAgIHJldHVybjtcbiAgIH1cblxuICAgY29uc3Qgb25TcGF3bkFmdGVyOiBTaW1wbGVHaXRQbHVnaW48J3NwYXduLmFmdGVyJz4gPSB7XG4gICAgICB0eXBlOiAnc3Bhd24uYWZ0ZXInLFxuICAgICAgYWN0aW9uKF9kYXRhLCBjb250ZXh0KSB7XG4gICAgICAgICBmdW5jdGlvbiBraWxsKCkge1xuICAgICAgICAgICAgY29udGV4dC5raWxsKG5ldyBHaXRQbHVnaW5FcnJvcih1bmRlZmluZWQsICdhYm9ydCcsICdBYm9ydCBzaWduYWwgcmVjZWl2ZWQnKSk7XG4gICAgICAgICB9XG5cbiAgICAgICAgIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGtpbGwpO1xuXG4gICAgICAgICBjb250ZXh0LnNwYXduZWQub24oJ2Nsb3NlJywgKCkgPT4gc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywga2lsbCkpO1xuICAgICAgfSxcbiAgIH07XG5cbiAgIGNvbnN0IG9uU3Bhd25CZWZvcmU6IFNpbXBsZUdpdFBsdWdpbjwnc3Bhd24uYmVmb3JlJz4gPSB7XG4gICAgICB0eXBlOiAnc3Bhd24uYmVmb3JlJyxcbiAgICAgIGFjdGlvbihfZGF0YSwgY29udGV4dCkge1xuICAgICAgICAgaWYgKHNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgICAgICBjb250ZXh0LmtpbGwobmV3IEdpdFBsdWdpbkVycm9yKHVuZGVmaW5lZCwgJ2Fib3J0JywgJ0Fib3J0IGFscmVhZHkgc2lnbmFsZWQnKSk7XG4gICAgICAgICB9XG4gICAgICB9LFxuICAgfTtcblxuICAgcmV0dXJuIFtvblNwYXduQmVmb3JlLCBvblNwYXduQWZ0ZXJdO1xufVxuIiwgImltcG9ydCB0eXBlIHsgU2ltcGxlR2l0UGx1Z2luIH0gZnJvbSAnLi9zaW1wbGUtZ2l0LXBsdWdpbic7XG5cbmltcG9ydCB7IEdpdFBsdWdpbkVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2dpdC1wbHVnaW4tZXJyb3InO1xuaW1wb3J0IHR5cGUgeyBTaW1wbGVHaXRQbHVnaW5Db25maWcgfSBmcm9tICcuLi90eXBlcyc7XG5cbmZ1bmN0aW9uIGlzQ29uZmlnU3dpdGNoKGFyZzogc3RyaW5nIHwgdW5rbm93bikge1xuICAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnICYmIGFyZy50cmltKCkudG9Mb3dlckNhc2UoKSA9PT0gJy1jJztcbn1cblxuZnVuY3Rpb24gcHJldmVudFByb3RvY29sT3ZlcnJpZGUoYXJnOiBzdHJpbmcsIG5leHQ6IHN0cmluZykge1xuICAgaWYgKCFpc0NvbmZpZ1N3aXRjaChhcmcpKSB7XG4gICAgICByZXR1cm47XG4gICB9XG5cbiAgIGlmICghL15cXHMqcHJvdG9jb2woLlthLXpdKyk/LmFsbG93Ly50ZXN0KG5leHQpKSB7XG4gICAgICByZXR1cm47XG4gICB9XG5cbiAgIHRocm93IG5ldyBHaXRQbHVnaW5FcnJvcihcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgICd1bnNhZmUnLFxuICAgICAgJ0NvbmZpZ3VyaW5nIHByb3RvY29sLmFsbG93IGlzIG5vdCBwZXJtaXR0ZWQgd2l0aG91dCBlbmFibGluZyBhbGxvd1Vuc2FmZUV4dFByb3RvY29sJ1xuICAgKTtcbn1cblxuZnVuY3Rpb24gcHJldmVudFVwbG9hZFBhY2soYXJnOiBzdHJpbmcsIG1ldGhvZDogc3RyaW5nKSB7XG4gICBpZiAoL15cXHMqLS0odXBsb2FkfHJlY2VpdmUpLXBhY2svLnRlc3QoYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IEdpdFBsdWdpbkVycm9yKFxuICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgJ3Vuc2FmZScsXG4gICAgICAgICBgVXNlIG9mIC0tdXBsb2FkLXBhY2sgb3IgLS1yZWNlaXZlLXBhY2sgaXMgbm90IHBlcm1pdHRlZCB3aXRob3V0IGVuYWJsaW5nIGFsbG93VW5zYWZlUGFja2BcbiAgICAgICk7XG4gICB9XG5cbiAgIGlmIChtZXRob2QgPT09ICdjbG9uZScgJiYgL15cXHMqLXVcXGIvLnRlc3QoYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IEdpdFBsdWdpbkVycm9yKFxuICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgJ3Vuc2FmZScsXG4gICAgICAgICBgVXNlIG9mIGNsb25lIHdpdGggb3B0aW9uIC11IGlzIG5vdCBwZXJtaXR0ZWQgd2l0aG91dCBlbmFibGluZyBhbGxvd1Vuc2FmZVBhY2tgXG4gICAgICApO1xuICAgfVxuXG4gICBpZiAobWV0aG9kID09PSAncHVzaCcgJiYgL15cXHMqLS1leGVjXFxiLy50ZXN0KGFyZykpIHtcbiAgICAgIHRocm93IG5ldyBHaXRQbHVnaW5FcnJvcihcbiAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICd1bnNhZmUnLFxuICAgICAgICAgYFVzZSBvZiBwdXNoIHdpdGggb3B0aW9uIC0tZXhlYyBpcyBub3QgcGVybWl0dGVkIHdpdGhvdXQgZW5hYmxpbmcgYWxsb3dVbnNhZmVQYWNrYFxuICAgICAgKTtcbiAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2NrVW5zYWZlT3BlcmF0aW9uc1BsdWdpbih7XG4gICBhbGxvd1Vuc2FmZVByb3RvY29sT3ZlcnJpZGUgPSBmYWxzZSxcbiAgIGFsbG93VW5zYWZlUGFjayA9IGZhbHNlLFxufTogU2ltcGxlR2l0UGx1Z2luQ29uZmlnWyd1bnNhZmUnXSA9IHt9KTogU2ltcGxlR2l0UGx1Z2luPCdzcGF3bi5hcmdzJz4ge1xuICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdzcGF3bi5hcmdzJyxcbiAgICAgIGFjdGlvbihhcmdzLCBjb250ZXh0KSB7XG4gICAgICAgICBhcmdzLmZvckVhY2goKGN1cnJlbnQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gaW5kZXggPCBhcmdzLmxlbmd0aCA/IGFyZ3NbaW5kZXggKyAxXSA6ICcnO1xuXG4gICAgICAgICAgICBhbGxvd1Vuc2FmZVByb3RvY29sT3ZlcnJpZGUgfHwgcHJldmVudFByb3RvY29sT3ZlcnJpZGUoY3VycmVudCwgbmV4dCk7XG4gICAgICAgICAgICBhbGxvd1Vuc2FmZVBhY2sgfHwgcHJldmVudFVwbG9hZFBhY2soY3VycmVudCwgY29udGV4dC5tZXRob2QpO1xuICAgICAgICAgfSk7XG5cbiAgICAgICAgIHJldHVybiBhcmdzO1xuICAgICAgfSxcbiAgIH07XG59XG4iLCAiaW1wb3J0IHsgcHJlZml4ZWRBcnJheSB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IFNpbXBsZUdpdFBsdWdpbiB9IGZyb20gJy4vc2ltcGxlLWdpdC1wbHVnaW4nO1xuXG5leHBvcnQgZnVuY3Rpb24gY29tbWFuZENvbmZpZ1ByZWZpeGluZ1BsdWdpbihcbiAgIGNvbmZpZ3VyYXRpb246IHN0cmluZ1tdXG4pOiBTaW1wbGVHaXRQbHVnaW48J3NwYXduLmFyZ3MnPiB7XG4gICBjb25zdCBwcmVmaXggPSBwcmVmaXhlZEFycmF5KGNvbmZpZ3VyYXRpb24sICctYycpO1xuXG4gICByZXR1cm4ge1xuICAgICAgdHlwZTogJ3NwYXduLmFyZ3MnLFxuICAgICAgYWN0aW9uKGRhdGEpIHtcbiAgICAgICAgIHJldHVybiBbLi4ucHJlZml4LCAuLi5kYXRhXTtcbiAgICAgIH0sXG4gICB9O1xufVxuIiwgImltcG9ydCB7IGRlZmVycmVkLCBEZWZlcnJlZFByb21pc2UgfSBmcm9tICdAa3dzaXRlcy9wcm9taXNlLWRlZmVycmVkJztcbmltcG9ydCB7IFNpbXBsZUdpdFBsdWdpbkNvbmZpZyB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGRlbGF5IH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgU2ltcGxlR2l0UGx1Z2luIH0gZnJvbSAnLi9zaW1wbGUtZ2l0LXBsdWdpbic7XG5cbmNvbnN0IG5ldmVyID0gZGVmZXJyZWQoKS5wcm9taXNlO1xuXG5leHBvcnQgZnVuY3Rpb24gY29tcGxldGlvbkRldGVjdGlvblBsdWdpbih7XG4gICBvbkNsb3NlID0gdHJ1ZSxcbiAgIG9uRXhpdCA9IDUwLFxufTogU2ltcGxlR2l0UGx1Z2luQ29uZmlnWydjb21wbGV0aW9uJ10gPSB7fSk6IFNpbXBsZUdpdFBsdWdpbjwnc3Bhd24uYWZ0ZXInPiB7XG4gICBmdW5jdGlvbiBjcmVhdGVFdmVudHMoKSB7XG4gICAgICBsZXQgZXhpdENvZGUgPSAtMTtcbiAgICAgIGNvbnN0IGV2ZW50cyA9IHtcbiAgICAgICAgIGNsb3NlOiBkZWZlcnJlZCgpLFxuICAgICAgICAgY2xvc2VUaW1lb3V0OiBkZWZlcnJlZCgpLFxuICAgICAgICAgZXhpdDogZGVmZXJyZWQoKSxcbiAgICAgICAgIGV4aXRUaW1lb3V0OiBkZWZlcnJlZCgpLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gUHJvbWlzZS5yYWNlKFtcbiAgICAgICAgIG9uQ2xvc2UgPT09IGZhbHNlID8gbmV2ZXIgOiBldmVudHMuY2xvc2VUaW1lb3V0LnByb21pc2UsXG4gICAgICAgICBvbkV4aXQgPT09IGZhbHNlID8gbmV2ZXIgOiBldmVudHMuZXhpdFRpbWVvdXQucHJvbWlzZSxcbiAgICAgIF0pO1xuXG4gICAgICBjb25maWd1cmVUaW1lb3V0KG9uQ2xvc2UsIGV2ZW50cy5jbG9zZSwgZXZlbnRzLmNsb3NlVGltZW91dCk7XG4gICAgICBjb25maWd1cmVUaW1lb3V0KG9uRXhpdCwgZXZlbnRzLmV4aXQsIGV2ZW50cy5leGl0VGltZW91dCk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgICBjbG9zZShjb2RlOiBudW1iZXIpIHtcbiAgICAgICAgICAgIGV4aXRDb2RlID0gY29kZTtcbiAgICAgICAgICAgIGV2ZW50cy5jbG9zZS5kb25lKCk7XG4gICAgICAgICB9LFxuICAgICAgICAgZXhpdChjb2RlOiBudW1iZXIpIHtcbiAgICAgICAgICAgIGV4aXRDb2RlID0gY29kZTtcbiAgICAgICAgICAgIGV2ZW50cy5leGl0LmRvbmUoKTtcbiAgICAgICAgIH0sXG4gICAgICAgICBnZXQgZXhpdENvZGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhpdENvZGU7XG4gICAgICAgICB9LFxuICAgICAgICAgcmVzdWx0LFxuICAgICAgfTtcbiAgIH1cblxuICAgZnVuY3Rpb24gY29uZmlndXJlVGltZW91dChcbiAgICAgIGZsYWc6IGJvb2xlYW4gfCBudW1iZXIsXG4gICAgICBldmVudDogRGVmZXJyZWRQcm9taXNlPHZvaWQ+LFxuICAgICAgdGltZW91dDogRGVmZXJyZWRQcm9taXNlPHZvaWQ+XG4gICApIHtcbiAgICAgIGlmIChmbGFnID09PSBmYWxzZSkge1xuICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAoZmxhZyA9PT0gdHJ1ZSA/IGV2ZW50LnByb21pc2UgOiBldmVudC5wcm9taXNlLnRoZW4oKCkgPT4gZGVsYXkoZmxhZykpKS50aGVuKHRpbWVvdXQuZG9uZSk7XG4gICB9XG5cbiAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnc3Bhd24uYWZ0ZXInLFxuICAgICAgYXN5bmMgYWN0aW9uKF9kYXRhLCB7IHNwYXduZWQsIGNsb3NlIH0pIHtcbiAgICAgICAgIGNvbnN0IGV2ZW50cyA9IGNyZWF0ZUV2ZW50cygpO1xuXG4gICAgICAgICBsZXQgZGVmZXJDbG9zZSA9IHRydWU7XG4gICAgICAgICBsZXQgcXVpY2tDbG9zZSA9ICgpID0+IHZvaWQgKGRlZmVyQ2xvc2UgPSBmYWxzZSk7XG5cbiAgICAgICAgIHNwYXduZWQuc3Rkb3V0Py5vbignZGF0YScsIHF1aWNrQ2xvc2UpO1xuICAgICAgICAgc3Bhd25lZC5zdGRlcnI/Lm9uKCdkYXRhJywgcXVpY2tDbG9zZSk7XG4gICAgICAgICBzcGF3bmVkLm9uKCdlcnJvcicsIHF1aWNrQ2xvc2UpO1xuXG4gICAgICAgICBzcGF3bmVkLm9uKCdjbG9zZScsIChjb2RlOiBudW1iZXIpID0+IGV2ZW50cy5jbG9zZShjb2RlKSk7XG4gICAgICAgICBzcGF3bmVkLm9uKCdleGl0JywgKGNvZGU6IG51bWJlcikgPT4gZXZlbnRzLmV4aXQoY29kZSkpO1xuXG4gICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgZXZlbnRzLnJlc3VsdDtcbiAgICAgICAgICAgIGlmIChkZWZlckNsb3NlKSB7XG4gICAgICAgICAgICAgICBhd2FpdCBkZWxheSg1MCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjbG9zZShldmVudHMuZXhpdENvZGUpO1xuICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjbG9zZShldmVudHMuZXhpdENvZGUsIGVyciBhcyBFcnJvcik7XG4gICAgICAgICB9XG4gICAgICB9LFxuICAgfTtcbn1cbiIsICJpbXBvcnQgdHlwZSB7IFNpbXBsZUdpdE9wdGlvbnMgfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB7IEdpdFBsdWdpbkVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2dpdC1wbHVnaW4tZXJyb3InO1xuaW1wb3J0IHsgYXNBcnJheSB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IFBsdWdpblN0b3JlIH0gZnJvbSAnLi9wbHVnaW4tc3RvcmUnO1xuXG5jb25zdCBXUk9OR19OVU1CRVJfRVJSID0gYEludmFsaWQgdmFsdWUgc3VwcGxpZWQgZm9yIGN1c3RvbSBiaW5hcnksIHJlcXVpcmVzIGEgc2luZ2xlIHN0cmluZyBvciBhbiBhcnJheSBjb250YWluaW5nIGVpdGhlciBvbmUgb3IgdHdvIHN0cmluZ3NgO1xuY29uc3QgV1JPTkdfQ0hBUlNfRVJSID0gYEludmFsaWQgdmFsdWUgc3VwcGxpZWQgZm9yIGN1c3RvbSBiaW5hcnksIHJlc3RyaWN0ZWQgY2hhcmFjdGVycyBtdXN0IGJlIHJlbW92ZWQgb3Igc3VwcGx5IHRoZSB1bnNhZmUuYWxsb3dVbnNhZmVDdXN0b21CaW5hcnkgb3B0aW9uYDtcblxuZnVuY3Rpb24gaXNCYWRBcmd1bWVudChhcmc6IHN0cmluZykge1xuICAgcmV0dXJuICFhcmcgfHwgIS9eKFthLXpdOik/KFthLXowLTkvLlxcXFxfLV0rKSQvaS50ZXN0KGFyZyk7XG59XG5cbmZ1bmN0aW9uIHRvQmluYXJ5Q29uZmlnKFxuICAgaW5wdXQ6IHN0cmluZ1tdLFxuICAgYWxsb3dVbnNhZmU6IGJvb2xlYW5cbik6IHsgYmluYXJ5OiBzdHJpbmc7IHByZWZpeD86IHN0cmluZyB9IHtcbiAgIGlmIChpbnB1dC5sZW5ndGggPCAxIHx8IGlucHV0Lmxlbmd0aCA+IDIpIHtcbiAgICAgIHRocm93IG5ldyBHaXRQbHVnaW5FcnJvcih1bmRlZmluZWQsICdiaW5hcnknLCBXUk9OR19OVU1CRVJfRVJSKTtcbiAgIH1cblxuICAgY29uc3QgaXNCYWQgPSBpbnB1dC5zb21lKGlzQmFkQXJndW1lbnQpO1xuICAgaWYgKGlzQmFkKSB7XG4gICAgICBpZiAoYWxsb3dVbnNhZmUpIHtcbiAgICAgICAgIGNvbnNvbGUud2FybihXUk9OR19DSEFSU19FUlIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgIHRocm93IG5ldyBHaXRQbHVnaW5FcnJvcih1bmRlZmluZWQsICdiaW5hcnknLCBXUk9OR19DSEFSU19FUlIpO1xuICAgICAgfVxuICAgfVxuXG4gICBjb25zdCBbYmluYXJ5LCBwcmVmaXhdID0gaW5wdXQ7XG4gICByZXR1cm4ge1xuICAgICAgYmluYXJ5LFxuICAgICAgcHJlZml4LFxuICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbUJpbmFyeVBsdWdpbihcbiAgIHBsdWdpbnM6IFBsdWdpblN0b3JlLFxuICAgaW5wdXQ6IFNpbXBsZUdpdE9wdGlvbnNbJ2JpbmFyeSddID0gWydnaXQnXSxcbiAgIGFsbG93VW5zYWZlID0gZmFsc2Vcbikge1xuICAgbGV0IGNvbmZpZyA9IHRvQmluYXJ5Q29uZmlnKGFzQXJyYXkoaW5wdXQpLCBhbGxvd1Vuc2FmZSk7XG5cbiAgIHBsdWdpbnMub24oJ2JpbmFyeScsIChpbnB1dCkgPT4ge1xuICAgICAgY29uZmlnID0gdG9CaW5hcnlDb25maWcoYXNBcnJheShpbnB1dCksIGFsbG93VW5zYWZlKTtcbiAgIH0pO1xuXG4gICBwbHVnaW5zLmFwcGVuZCgnc3Bhd24uYmluYXJ5JywgKCkgPT4ge1xuICAgICAgcmV0dXJuIGNvbmZpZy5iaW5hcnk7XG4gICB9KTtcblxuICAgcGx1Z2lucy5hcHBlbmQoJ3NwYXduLmFyZ3MnLCAoZGF0YSkgPT4ge1xuICAgICAgcmV0dXJuIGNvbmZpZy5wcmVmaXggPyBbY29uZmlnLnByZWZpeCwgLi4uZGF0YV0gOiBkYXRhO1xuICAgfSk7XG59XG4iLCAiaW1wb3J0IHsgR2l0RXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvZ2l0LWVycm9yJztcbmltcG9ydCB7IEdpdEV4ZWN1dG9yUmVzdWx0LCBTaW1wbGVHaXRQbHVnaW5Db25maWcgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBTaW1wbGVHaXRQbHVnaW4gfSBmcm9tICcuL3NpbXBsZS1naXQtcGx1Z2luJztcblxudHlwZSBUYXNrUmVzdWx0ID0gT21pdDxHaXRFeGVjdXRvclJlc3VsdCwgJ3JlamVjdGlvbic+O1xuXG5mdW5jdGlvbiBpc1Rhc2tFcnJvcihyZXN1bHQ6IFRhc2tSZXN1bHQpIHtcbiAgIHJldHVybiAhIShyZXN1bHQuZXhpdENvZGUgJiYgcmVzdWx0LnN0ZEVyci5sZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBnZXRFcnJvck1lc3NhZ2UocmVzdWx0OiBUYXNrUmVzdWx0KSB7XG4gICByZXR1cm4gQnVmZmVyLmNvbmNhdChbLi4ucmVzdWx0LnN0ZE91dCwgLi4ucmVzdWx0LnN0ZEVycl0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXJyb3JEZXRlY3Rpb25IYW5kbGVyKFxuICAgb3ZlcndyaXRlID0gZmFsc2UsXG4gICBpc0Vycm9yID0gaXNUYXNrRXJyb3IsXG4gICBlcnJvck1lc3NhZ2U6IChyZXN1bHQ6IFRhc2tSZXN1bHQpID0+IEJ1ZmZlciB8IEVycm9yID0gZ2V0RXJyb3JNZXNzYWdlXG4pIHtcbiAgIHJldHVybiAoZXJyb3I6IEJ1ZmZlciB8IEVycm9yIHwgdW5kZWZpbmVkLCByZXN1bHQ6IFRhc2tSZXN1bHQpID0+IHtcbiAgICAgIGlmICgoIW92ZXJ3cml0ZSAmJiBlcnJvcikgfHwgIWlzRXJyb3IocmVzdWx0KSkge1xuICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXJyb3JNZXNzYWdlKHJlc3VsdCk7XG4gICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXJyb3JEZXRlY3Rpb25QbHVnaW4oXG4gICBjb25maWc6IFNpbXBsZUdpdFBsdWdpbkNvbmZpZ1snZXJyb3JzJ11cbik6IFNpbXBsZUdpdFBsdWdpbjwndGFzay5lcnJvcic+IHtcbiAgIHJldHVybiB7XG4gICAgICB0eXBlOiAndGFzay5lcnJvcicsXG4gICAgICBhY3Rpb24oZGF0YSwgY29udGV4dCkge1xuICAgICAgICAgY29uc3QgZXJyb3IgPSBjb25maWcoZGF0YS5lcnJvciwge1xuICAgICAgICAgICAgc3RkRXJyOiBjb250ZXh0LnN0ZEVycixcbiAgICAgICAgICAgIHN0ZE91dDogY29udGV4dC5zdGRPdXQsXG4gICAgICAgICAgICBleGl0Q29kZTogY29udGV4dC5leGl0Q29kZSxcbiAgICAgICAgIH0pO1xuXG4gICAgICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGVycm9yKSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3I6IG5ldyBHaXRFcnJvcih1bmRlZmluZWQsIGVycm9yLnRvU3RyaW5nKCd1dGYtOCcpKSB9O1xuICAgICAgICAgfVxuXG4gICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICB9O1xuICAgICAgfSxcbiAgIH07XG59XG4iLCAiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnbm9kZTpldmVudHMnO1xuXG5pbXBvcnQgdHlwZSB7XG4gICBTaW1wbGVHaXRQbHVnaW4sXG4gICBTaW1wbGVHaXRQbHVnaW5UeXBlLFxuICAgU2ltcGxlR2l0UGx1Z2luVHlwZXMsXG59IGZyb20gJy4vc2ltcGxlLWdpdC1wbHVnaW4nO1xuaW1wb3J0IHsgYXBwZW5kLCBhc0FycmF5IH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHR5cGUgeyBTaW1wbGVHaXRQbHVnaW5Db25maWcgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBQbHVnaW5TdG9yZSB7XG4gICBwcml2YXRlIHBsdWdpbnM6IFNldDxTaW1wbGVHaXRQbHVnaW48U2ltcGxlR2l0UGx1Z2luVHlwZT4+ID0gbmV3IFNldCgpO1xuICAgcHJpdmF0ZSBldmVudHMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgIG9uPEsgZXh0ZW5kcyBrZXlvZiBTaW1wbGVHaXRQbHVnaW5Db25maWc+KFxuICAgICAgdHlwZTogSyxcbiAgICAgIGxpc3RlbmVyOiAoZGF0YTogU2ltcGxlR2l0UGx1Z2luQ29uZmlnW0tdKSA9PiB2b2lkXG4gICApIHtcbiAgICAgIHRoaXMuZXZlbnRzLm9uKHR5cGUsIGxpc3RlbmVyKTtcbiAgIH1cblxuICAgcmVjb25maWd1cmU8SyBleHRlbmRzIGtleW9mIFNpbXBsZUdpdFBsdWdpbkNvbmZpZz4odHlwZTogSywgZGF0YTogU2ltcGxlR2l0UGx1Z2luQ29uZmlnW0tdKSB7XG4gICAgICB0aGlzLmV2ZW50cy5lbWl0KHR5cGUsIGRhdGEpO1xuICAgfVxuXG4gICBwdWJsaWMgYXBwZW5kPFQgZXh0ZW5kcyBTaW1wbGVHaXRQbHVnaW5UeXBlPih0eXBlOiBULCBhY3Rpb246IFNpbXBsZUdpdFBsdWdpbjxUPlsnYWN0aW9uJ10pIHtcbiAgICAgIGNvbnN0IHBsdWdpbiA9IGFwcGVuZCh0aGlzLnBsdWdpbnMsIHsgdHlwZSwgYWN0aW9uIH0pO1xuXG4gICAgICByZXR1cm4gKCkgPT4gdGhpcy5wbHVnaW5zLmRlbGV0ZShwbHVnaW4pO1xuICAgfVxuXG4gICBwdWJsaWMgYWRkPFQgZXh0ZW5kcyBTaW1wbGVHaXRQbHVnaW5UeXBlPihcbiAgICAgIHBsdWdpbjogdm9pZCB8IFNpbXBsZUdpdFBsdWdpbjxUPiB8IFNpbXBsZUdpdFBsdWdpbjxUPltdXG4gICApIHtcbiAgICAgIGNvbnN0IHBsdWdpbnM6IFNpbXBsZUdpdFBsdWdpbjxUPltdID0gW107XG5cbiAgICAgIGFzQXJyYXkocGx1Z2luKS5mb3JFYWNoKChwbHVnaW4pID0+IHBsdWdpbiAmJiB0aGlzLnBsdWdpbnMuYWRkKGFwcGVuZChwbHVnaW5zLCBwbHVnaW4pKSk7XG5cbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICBwbHVnaW5zLmZvckVhY2goKHBsdWdpbikgPT4gdGhpcy5wbHVnaW5zLmRlbGV0ZShwbHVnaW4pKTtcbiAgICAgIH07XG4gICB9XG5cbiAgIHB1YmxpYyBleGVjPFQgZXh0ZW5kcyBTaW1wbGVHaXRQbHVnaW5UeXBlPihcbiAgICAgIHR5cGU6IFQsXG4gICAgICBkYXRhOiBTaW1wbGVHaXRQbHVnaW5UeXBlc1tUXVsnZGF0YSddLFxuICAgICAgY29udGV4dDogU2ltcGxlR2l0UGx1Z2luVHlwZXNbVF1bJ2NvbnRleHQnXVxuICAgKTogdHlwZW9mIGRhdGEge1xuICAgICAgbGV0IG91dHB1dCA9IGRhdGE7XG4gICAgICBjb25zdCBjb250ZXh0dWFsID0gT2JqZWN0LmZyZWV6ZShPYmplY3QuY3JlYXRlKGNvbnRleHQpKTtcblxuICAgICAgZm9yIChjb25zdCBwbHVnaW4gb2YgdGhpcy5wbHVnaW5zKSB7XG4gICAgICAgICBpZiAocGx1Z2luLnR5cGUgPT09IHR5cGUpIHtcbiAgICAgICAgICAgIG91dHB1dCA9IHBsdWdpbi5hY3Rpb24ob3V0cHV0LCBjb250ZXh0dWFsKTtcbiAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgIH1cbn1cbiIsICJpbXBvcnQgeyBTaW1wbGVHaXRPcHRpb25zIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgYXNOdW1iZXIsIGluY2x1ZGluZyB9IGZyb20gJy4uL3V0aWxzJztcblxuaW1wb3J0IHsgU2ltcGxlR2l0UGx1Z2luIH0gZnJvbSAnLi9zaW1wbGUtZ2l0LXBsdWdpbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9ncmVzc01vbml0b3JQbHVnaW4ocHJvZ3Jlc3M6IEV4Y2x1ZGU8U2ltcGxlR2l0T3B0aW9uc1sncHJvZ3Jlc3MnXSwgdm9pZD4pIHtcbiAgIGNvbnN0IHByb2dyZXNzQ29tbWFuZCA9ICctLXByb2dyZXNzJztcbiAgIGNvbnN0IHByb2dyZXNzTWV0aG9kcyA9IFsnY2hlY2tvdXQnLCAnY2xvbmUnLCAnZmV0Y2gnLCAncHVsbCcsICdwdXNoJ107XG5cbiAgIGNvbnN0IG9uUHJvZ3Jlc3M6IFNpbXBsZUdpdFBsdWdpbjwnc3Bhd24uYWZ0ZXInPiA9IHtcbiAgICAgIHR5cGU6ICdzcGF3bi5hZnRlcicsXG4gICAgICBhY3Rpb24oX2RhdGEsIGNvbnRleHQpIHtcbiAgICAgICAgIGlmICghY29udGV4dC5jb21tYW5kcy5pbmNsdWRlcyhwcm9ncmVzc0NvbW1hbmQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICB9XG5cbiAgICAgICAgIGNvbnRleHQuc3Bhd25lZC5zdGRlcnI/Lm9uKCdkYXRhJywgKGNodW5rOiBCdWZmZXIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSAvXihbXFxzXFxTXSs/KTpcXHMqKFxcZCspJSBcXCgoXFxkKylcXC8oXFxkKylcXCkvLmV4ZWMoY2h1bmsudG9TdHJpbmcoJ3V0ZjgnKSk7XG4gICAgICAgICAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcHJvZ3Jlc3Moe1xuICAgICAgICAgICAgICAgbWV0aG9kOiBjb250ZXh0Lm1ldGhvZCxcbiAgICAgICAgICAgICAgIHN0YWdlOiBwcm9ncmVzc0V2ZW50U3RhZ2UobWVzc2FnZVsxXSksXG4gICAgICAgICAgICAgICBwcm9ncmVzczogYXNOdW1iZXIobWVzc2FnZVsyXSksXG4gICAgICAgICAgICAgICBwcm9jZXNzZWQ6IGFzTnVtYmVyKG1lc3NhZ2VbM10pLFxuICAgICAgICAgICAgICAgdG90YWw6IGFzTnVtYmVyKG1lc3NhZ2VbNF0pLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICB9KTtcbiAgICAgIH0sXG4gICB9O1xuXG4gICBjb25zdCBvbkFyZ3M6IFNpbXBsZUdpdFBsdWdpbjwnc3Bhd24uYXJncyc+ID0ge1xuICAgICAgdHlwZTogJ3NwYXduLmFyZ3MnLFxuICAgICAgYWN0aW9uKGFyZ3MsIGNvbnRleHQpIHtcbiAgICAgICAgIGlmICghcHJvZ3Jlc3NNZXRob2RzLmluY2x1ZGVzKGNvbnRleHQubWV0aG9kKSkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgICAgICB9XG5cbiAgICAgICAgIHJldHVybiBpbmNsdWRpbmcoYXJncywgcHJvZ3Jlc3NDb21tYW5kKTtcbiAgICAgIH0sXG4gICB9O1xuXG4gICByZXR1cm4gW29uQXJncywgb25Qcm9ncmVzc107XG59XG5cbmZ1bmN0aW9uIHByb2dyZXNzRXZlbnRTdGFnZShpbnB1dDogc3RyaW5nKSB7XG4gICByZXR1cm4gU3RyaW5nKGlucHV0LnRvTG93ZXJDYXNlKCkuc3BsaXQoJyAnLCAxKSkgfHwgJ3Vua25vd24nO1xufVxuIiwgImltcG9ydCB7IFNwYXduT3B0aW9ucyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHsgcGljayB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IFNpbXBsZUdpdFBsdWdpbiB9IGZyb20gJy4vc2ltcGxlLWdpdC1wbHVnaW4nO1xuXG5leHBvcnQgZnVuY3Rpb24gc3Bhd25PcHRpb25zUGx1Z2luKFxuICAgc3Bhd25PcHRpb25zOiBQYXJ0aWFsPFNwYXduT3B0aW9ucz5cbik6IFNpbXBsZUdpdFBsdWdpbjwnc3Bhd24ub3B0aW9ucyc+IHtcbiAgIGNvbnN0IG9wdGlvbnMgPSBwaWNrKHNwYXduT3B0aW9ucywgWyd1aWQnLCAnZ2lkJ10pO1xuXG4gICByZXR1cm4ge1xuICAgICAgdHlwZTogJ3NwYXduLm9wdGlvbnMnLFxuICAgICAgYWN0aW9uKGRhdGEpIHtcbiAgICAgICAgIHJldHVybiB7IC4uLm9wdGlvbnMsIC4uLmRhdGEgfTtcbiAgICAgIH0sXG4gICB9O1xufVxuIiwgImltcG9ydCB0eXBlIHsgU2ltcGxlR2l0UGx1Z2luIH0gZnJvbSAnLi9zaW1wbGUtZ2l0LXBsdWdpbic7XG5cbmltcG9ydCB0eXBlIHsgU2ltcGxlR2l0T3B0aW9ucyB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IEdpdFBsdWdpbkVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2dpdC1wbHVnaW4tZXJyb3InO1xuXG5leHBvcnQgZnVuY3Rpb24gdGltZW91dFBsdWdpbih7XG4gICBibG9jayxcbiAgIHN0ZEVyciA9IHRydWUsXG4gICBzdGRPdXQgPSB0cnVlLFxufTogRXhjbHVkZTxTaW1wbGVHaXRPcHRpb25zWyd0aW1lb3V0J10sIHVuZGVmaW5lZD4pOiBTaW1wbGVHaXRQbHVnaW48J3NwYXduLmFmdGVyJz4gfCB2b2lkIHtcbiAgIGlmIChibG9jayA+IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICB0eXBlOiAnc3Bhd24uYWZ0ZXInLFxuICAgICAgICAgYWN0aW9uKF9kYXRhLCBjb250ZXh0KSB7XG4gICAgICAgICAgICBsZXQgdGltZW91dDogTm9kZUpTLlRpbWVvdXQ7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHdhaXQoKSB7XG4gICAgICAgICAgICAgICB0aW1lb3V0ICYmIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGtpbGwsIGJsb2NrKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgICAgICAgIGNvbnRleHQuc3Bhd25lZC5zdGRvdXQ/Lm9mZignZGF0YScsIHdhaXQpO1xuICAgICAgICAgICAgICAgY29udGV4dC5zcGF3bmVkLnN0ZGVycj8ub2ZmKCdkYXRhJywgd2FpdCk7XG4gICAgICAgICAgICAgICBjb250ZXh0LnNwYXduZWQub2ZmKCdleGl0Jywgc3RvcCk7XG4gICAgICAgICAgICAgICBjb250ZXh0LnNwYXduZWQub2ZmKCdjbG9zZScsIHN0b3ApO1xuICAgICAgICAgICAgICAgdGltZW91dCAmJiBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGtpbGwoKSB7XG4gICAgICAgICAgICAgICBzdG9wKCk7XG4gICAgICAgICAgICAgICBjb250ZXh0LmtpbGwobmV3IEdpdFBsdWdpbkVycm9yKHVuZGVmaW5lZCwgJ3RpbWVvdXQnLCBgYmxvY2sgdGltZW91dCByZWFjaGVkYCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdGRPdXQgJiYgY29udGV4dC5zcGF3bmVkLnN0ZG91dD8ub24oJ2RhdGEnLCB3YWl0KTtcbiAgICAgICAgICAgIHN0ZEVyciAmJiBjb250ZXh0LnNwYXduZWQuc3RkZXJyPy5vbignZGF0YScsIHdhaXQpO1xuICAgICAgICAgICAgY29udGV4dC5zcGF3bmVkLm9uKCdleGl0Jywgc3RvcCk7XG4gICAgICAgICAgICBjb250ZXh0LnNwYXduZWQub24oJ2Nsb3NlJywgc3RvcCk7XG5cbiAgICAgICAgICAgIHdhaXQoKTtcbiAgICAgICAgIH0sXG4gICAgICB9O1xuICAgfVxufVxuIiwgImltcG9ydCB7IFNpbXBsZUdpdFBsdWdpbiB9IGZyb20gJy4vc2ltcGxlLWdpdC1wbHVnaW4nO1xuaW1wb3J0IHsgaXNQYXRoU3BlYywgdG9QYXRocyB9IGZyb20gJy4uL2FyZ3MvcGF0aHNwZWMnO1xuXG5leHBvcnQgZnVuY3Rpb24gc3VmZml4UGF0aHNQbHVnaW4oKTogU2ltcGxlR2l0UGx1Z2luPCdzcGF3bi5hcmdzJz4ge1xuICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdzcGF3bi5hcmdzJyxcbiAgICAgIGFjdGlvbihkYXRhKSB7XG4gICAgICAgICBjb25zdCBwcmVmaXg6IHN0cmluZ1tdID0gW107XG4gICAgICAgICBsZXQgc3VmZml4OiB1bmRlZmluZWQgfCBzdHJpbmdbXTtcbiAgICAgICAgIGZ1bmN0aW9uIGFwcGVuZChhcmdzOiBzdHJpbmdbXSkge1xuICAgICAgICAgICAgKHN1ZmZpeCA9IHN1ZmZpeCB8fCBbXSkucHVzaCguLi5hcmdzKTtcbiAgICAgICAgIH1cblxuICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJhbSA9IGRhdGFbaV07XG5cbiAgICAgICAgICAgIGlmIChpc1BhdGhTcGVjKHBhcmFtKSkge1xuICAgICAgICAgICAgICAgYXBwZW5kKHRvUGF0aHMocGFyYW0pKTtcbiAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocGFyYW0gPT09ICctLScpIHtcbiAgICAgICAgICAgICAgIGFwcGVuZChcbiAgICAgICAgICAgICAgICAgIGRhdGEuc2xpY2UoaSArIDEpLmZsYXRNYXAoKGl0ZW0pID0+IChpc1BhdGhTcGVjKGl0ZW0pICYmIHRvUGF0aHMoaXRlbSkpIHx8IGl0ZW0pXG4gICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHByZWZpeC5wdXNoKHBhcmFtKTtcbiAgICAgICAgIH1cblxuICAgICAgICAgcmV0dXJuICFzdWZmaXggPyBwcmVmaXggOiBbLi4ucHJlZml4LCAnLS0nLCAuLi5zdWZmaXgubWFwKFN0cmluZyldO1xuICAgICAgfSxcbiAgIH07XG59XG4iLCAiaW1wb3J0IHsgU2ltcGxlR2l0RmFjdG9yeSB9IGZyb20gJy4uLy4uL3R5cGluZ3MnO1xuXG5pbXBvcnQgKiBhcyBhcGkgZnJvbSAnLi9hcGknO1xuaW1wb3J0IHtcbiAgIGFib3J0UGx1Z2luLFxuICAgYmxvY2tVbnNhZmVPcGVyYXRpb25zUGx1Z2luLFxuICAgY29tbWFuZENvbmZpZ1ByZWZpeGluZ1BsdWdpbixcbiAgIGNvbXBsZXRpb25EZXRlY3Rpb25QbHVnaW4sXG4gICBjdXN0b21CaW5hcnlQbHVnaW4sXG4gICBlcnJvckRldGVjdGlvbkhhbmRsZXIsXG4gICBlcnJvckRldGVjdGlvblBsdWdpbixcbiAgIFBsdWdpblN0b3JlLFxuICAgcHJvZ3Jlc3NNb25pdG9yUGx1Z2luLFxuICAgc3Bhd25PcHRpb25zUGx1Z2luLFxuICAgdGltZW91dFBsdWdpbixcbn0gZnJvbSAnLi9wbHVnaW5zJztcbmltcG9ydCB7IHN1ZmZpeFBhdGhzUGx1Z2luIH0gZnJvbSAnLi9wbHVnaW5zL3N1ZmZpeC1wYXRocy5wbHVnaW4nO1xuaW1wb3J0IHsgY3JlYXRlSW5zdGFuY2VDb25maWcsIGZvbGRlckV4aXN0cyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgU2ltcGxlR2l0T3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBHaXQgPSByZXF1aXJlKCcuLi9naXQnKTtcblxuLyoqXG4gKiBBZGRzIHRoZSBuZWNlc3NhcnkgcHJvcGVydGllcyB0byB0aGUgc3VwcGxpZWQgb2JqZWN0IHRvIGVuYWJsZSBpdCBmb3IgdXNlIGFzXG4gKiB0aGUgZGVmYXVsdCBleHBvcnQgb2YgYSBtb2R1bGUuXG4gKlxuICogRWc6IGBtb2R1bGUuZXhwb3J0cyA9IGVzTW9kdWxlRmFjdG9yeSh7IHNvbWV0aGluZyAoKSB7fSB9KWBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVzTW9kdWxlRmFjdG9yeTxUPihkZWZhdWx0RXhwb3J0OiBUKSB7XG4gICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZGVmYXVsdEV4cG9ydCwge1xuICAgICAgX19lc01vZHVsZTogeyB2YWx1ZTogdHJ1ZSB9LFxuICAgICAgZGVmYXVsdDogeyB2YWx1ZTogZGVmYXVsdEV4cG9ydCB9LFxuICAgfSkgYXMgVCAmIHsgX19lc01vZHVsZTogdHJ1ZTsgZGVmYXVsdDogVCB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2l0RXhwb3J0RmFjdG9yeShmYWN0b3J5OiBTaW1wbGVHaXRGYWN0b3J5KSB7XG4gICByZXR1cm4gT2JqZWN0LmFzc2lnbihmYWN0b3J5LmJpbmQobnVsbCksIGFwaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnaXRJbnN0YW5jZUZhY3RvcnkoXG4gICBiYXNlRGlyPzogc3RyaW5nIHwgUGFydGlhbDxTaW1wbGVHaXRPcHRpb25zPixcbiAgIG9wdGlvbnM/OiBQYXJ0aWFsPFNpbXBsZUdpdE9wdGlvbnM+XG4pIHtcbiAgIGNvbnN0IHBsdWdpbnMgPSBuZXcgUGx1Z2luU3RvcmUoKTtcbiAgIGNvbnN0IGNvbmZpZyA9IGNyZWF0ZUluc3RhbmNlQ29uZmlnKFxuICAgICAgKGJhc2VEaXIgJiYgKHR5cGVvZiBiYXNlRGlyID09PSAnc3RyaW5nJyA/IHsgYmFzZURpciB9IDogYmFzZURpcikpIHx8IHt9LFxuICAgICAgb3B0aW9uc1xuICAgKTtcblxuICAgaWYgKCFmb2xkZXJFeGlzdHMoY29uZmlnLmJhc2VEaXIpKSB7XG4gICAgICB0aHJvdyBuZXcgYXBpLkdpdENvbnN0cnVjdEVycm9yKFxuICAgICAgICAgY29uZmlnLFxuICAgICAgICAgYENhbm5vdCB1c2Ugc2ltcGxlLWdpdCBvbiBhIGRpcmVjdG9yeSB0aGF0IGRvZXMgbm90IGV4aXN0YFxuICAgICAgKTtcbiAgIH1cblxuICAgaWYgKEFycmF5LmlzQXJyYXkoY29uZmlnLmNvbmZpZykpIHtcbiAgICAgIHBsdWdpbnMuYWRkKGNvbW1hbmRDb25maWdQcmVmaXhpbmdQbHVnaW4oY29uZmlnLmNvbmZpZykpO1xuICAgfVxuXG4gICBwbHVnaW5zLmFkZChibG9ja1Vuc2FmZU9wZXJhdGlvbnNQbHVnaW4oY29uZmlnLnVuc2FmZSkpO1xuICAgcGx1Z2lucy5hZGQoc3VmZml4UGF0aHNQbHVnaW4oKSk7XG4gICBwbHVnaW5zLmFkZChjb21wbGV0aW9uRGV0ZWN0aW9uUGx1Z2luKGNvbmZpZy5jb21wbGV0aW9uKSk7XG4gICBjb25maWcuYWJvcnQgJiYgcGx1Z2lucy5hZGQoYWJvcnRQbHVnaW4oY29uZmlnLmFib3J0KSk7XG4gICBjb25maWcucHJvZ3Jlc3MgJiYgcGx1Z2lucy5hZGQocHJvZ3Jlc3NNb25pdG9yUGx1Z2luKGNvbmZpZy5wcm9ncmVzcykpO1xuICAgY29uZmlnLnRpbWVvdXQgJiYgcGx1Z2lucy5hZGQodGltZW91dFBsdWdpbihjb25maWcudGltZW91dCkpO1xuICAgY29uZmlnLnNwYXduT3B0aW9ucyAmJiBwbHVnaW5zLmFkZChzcGF3bk9wdGlvbnNQbHVnaW4oY29uZmlnLnNwYXduT3B0aW9ucykpO1xuXG4gICBwbHVnaW5zLmFkZChlcnJvckRldGVjdGlvblBsdWdpbihlcnJvckRldGVjdGlvbkhhbmRsZXIodHJ1ZSkpKTtcbiAgIGNvbmZpZy5lcnJvcnMgJiYgcGx1Z2lucy5hZGQoZXJyb3JEZXRlY3Rpb25QbHVnaW4oY29uZmlnLmVycm9ycykpO1xuXG4gICBjdXN0b21CaW5hcnlQbHVnaW4ocGx1Z2lucywgY29uZmlnLmJpbmFyeSwgY29uZmlnLnVuc2FmZT8uYWxsb3dVbnNhZmVDdXN0b21CaW5hcnkpO1xuXG4gICByZXR1cm4gbmV3IEdpdChjb25maWcsIHBsdWdpbnMpO1xufVxuIiwgImltcG9ydCB7IFNpbXBsZUdpdCwgU2ltcGxlR2l0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuXG5pbXBvcnQgeyBHaXRSZXNwb25zZUVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2dpdC1yZXNwb25zZS1lcnJvcic7XG5pbXBvcnQgeyBnaXRJbnN0YW5jZUZhY3RvcnkgfSBmcm9tICcuLi9naXQtZmFjdG9yeSc7XG5pbXBvcnQgeyBTaW1wbGVHaXRUYXNrQ2FsbGJhY2sgfSBmcm9tICcuLi90eXBlcyc7XG5cbmNvbnN0IGZ1bmN0aW9uTmFtZXNCdWlsZGVyQXBpID0gWydjdXN0b21CaW5hcnknLCAnZW52JywgJ291dHB1dEhhbmRsZXInLCAnc2lsZW50J107XG5cbmNvbnN0IGZ1bmN0aW9uTmFtZXNQcm9taXNlQXBpID0gW1xuICAgJ2FkZCcsXG4gICAnYWRkQW5ub3RhdGVkVGFnJyxcbiAgICdhZGRDb25maWcnLFxuICAgJ2FkZFJlbW90ZScsXG4gICAnYWRkVGFnJyxcbiAgICdhcHBseVBhdGNoJyxcbiAgICdiaW5hcnlDYXRGaWxlJyxcbiAgICdicmFuY2gnLFxuICAgJ2JyYW5jaExvY2FsJyxcbiAgICdjYXRGaWxlJyxcbiAgICdjaGVja0lnbm9yZScsXG4gICAnY2hlY2tJc1JlcG8nLFxuICAgJ2NoZWNrb3V0JyxcbiAgICdjaGVja291dEJyYW5jaCcsXG4gICAnY2hlY2tvdXRMYXRlc3RUYWcnLFxuICAgJ2NoZWNrb3V0TG9jYWxCcmFuY2gnLFxuICAgJ2NsZWFuJyxcbiAgICdjbG9uZScsXG4gICAnY29tbWl0JyxcbiAgICdjd2QnLFxuICAgJ2RlbGV0ZUxvY2FsQnJhbmNoJyxcbiAgICdkZWxldGVMb2NhbEJyYW5jaGVzJyxcbiAgICdkaWZmJyxcbiAgICdkaWZmU3VtbWFyeScsXG4gICAnZXhlYycsXG4gICAnZmV0Y2gnLFxuICAgJ2dldFJlbW90ZXMnLFxuICAgJ2luaXQnLFxuICAgJ2xpc3RDb25maWcnLFxuICAgJ2xpc3RSZW1vdGUnLFxuICAgJ2xvZycsXG4gICAnbWVyZ2UnLFxuICAgJ21lcmdlRnJvbVRvJyxcbiAgICdtaXJyb3InLFxuICAgJ212JyxcbiAgICdwdWxsJyxcbiAgICdwdXNoJyxcbiAgICdwdXNoVGFncycsXG4gICAncmF3JyxcbiAgICdyZWJhc2UnLFxuICAgJ3JlbW90ZScsXG4gICAncmVtb3ZlUmVtb3RlJyxcbiAgICdyZXNldCcsXG4gICAncmV2ZXJ0JyxcbiAgICdyZXZwYXJzZScsXG4gICAncm0nLFxuICAgJ3JtS2VlcExvY2FsJyxcbiAgICdzaG93JyxcbiAgICdzdGFzaCcsXG4gICAnc3Rhc2hMaXN0JyxcbiAgICdzdGF0dXMnLFxuICAgJ3N1Yk1vZHVsZScsXG4gICAnc3VibW9kdWxlQWRkJyxcbiAgICdzdWJtb2R1bGVJbml0JyxcbiAgICdzdWJtb2R1bGVVcGRhdGUnLFxuICAgJ3RhZycsXG4gICAndGFncycsXG4gICAndXBkYXRlU2VydmVySW5mbycsXG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2l0UChcbiAgIC4uLmFyZ3M6IFtdIHwgW3N0cmluZ10gfCBbUGFydGlhbDxTaW1wbGVHaXRPcHRpb25zPl0gfCBbc3RyaW5nLCBQYXJ0aWFsPFNpbXBsZUdpdE9wdGlvbnM+XVxuKTogU2ltcGxlR2l0IHtcbiAgIGxldCBnaXQ6IGFueTtcblxuICAgbGV0IGNoYWluID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbiAgIHRyeSB7XG4gICAgICBnaXQgPSBnaXRJbnN0YW5jZUZhY3RvcnkoLi4uYXJncyk7XG4gICB9IGNhdGNoIChlKSB7XG4gICAgICBjaGFpbiA9IFByb21pc2UucmVqZWN0KGUpO1xuICAgfVxuXG4gICBmdW5jdGlvbiBidWlsZGVyUmV0dXJuKCkge1xuICAgICAgcmV0dXJuIHByb21pc2VBcGk7XG4gICB9XG5cbiAgIGZ1bmN0aW9uIGNoYWluUmV0dXJuKCkge1xuICAgICAgcmV0dXJuIGNoYWluO1xuICAgfVxuXG4gICBjb25zdCBwcm9taXNlQXBpID0gWy4uLmZ1bmN0aW9uTmFtZXNCdWlsZGVyQXBpLCAuLi5mdW5jdGlvbk5hbWVzUHJvbWlzZUFwaV0ucmVkdWNlKFxuICAgICAgKGFwaTogYW55LCBuYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgIGNvbnN0IGlzQXN5bmMgPSBmdW5jdGlvbk5hbWVzUHJvbWlzZUFwaS5pbmNsdWRlcyhuYW1lKTtcblxuICAgICAgICAgY29uc3QgdmFsaWQgPSBpc0FzeW5jID8gYXN5bmNXcmFwcGVyKG5hbWUsIGdpdCkgOiBzeW5jV3JhcHBlcihuYW1lLCBnaXQsIGFwaSk7XG4gICAgICAgICBjb25zdCBhbHRlcm5hdGl2ZSA9IGlzQXN5bmMgPyBjaGFpblJldHVybiA6IGJ1aWxkZXJSZXR1cm47XG5cbiAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcGksIG5hbWUsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlOiBnaXQgPyB2YWxpZCA6IGFsdGVybmF0aXZlLFxuICAgICAgICAgfSk7XG5cbiAgICAgICAgIHJldHVybiBhcGk7XG4gICAgICB9LFxuICAgICAge31cbiAgICk7XG5cbiAgIHJldHVybiBwcm9taXNlQXBpIGFzIFNpbXBsZUdpdDtcblxuICAgZnVuY3Rpb24gYXN5bmNXcmFwcGVyKGZuOiBzdHJpbmcsIGdpdDogYW55KTogKC4uLmFyZ3M6IGFueVtdKSA9PiBQcm9taXNlPGFueT4ge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzOiBhbnlbXSkge1xuICAgICAgICAgaWYgKHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgICAgICdQcm9taXNlIGludGVyZmFjZSByZXF1aXJlcyB0aGF0IGhhbmRsZXJzIGFyZSBub3Qgc3VwcGxpZWQgaW5saW5lLCAnICtcbiAgICAgICAgICAgICAgICAgICd0cmFpbGluZyBmdW5jdGlvbiBub3QgYWxsb3dlZCBpbiBjYWxsIHRvICcgK1xuICAgICAgICAgICAgICAgICAgZm5cbiAgICAgICAgICAgICk7XG4gICAgICAgICB9XG5cbiAgICAgICAgIHJldHVybiBjaGFpbi50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICBjb25zdCBjYWxsYmFjazogU2ltcGxlR2l0VGFza0NhbGxiYWNrID0gKGVycjogRXJyb3IgfCBudWxsLCByZXN1bHQ/OiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QodG9FcnJvcihlcnIpKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgIGFyZ3MucHVzaChjYWxsYmFjayk7XG5cbiAgICAgICAgICAgICAgIGdpdFtmbl0uYXBwbHkoZ2l0LCBhcmdzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgfSk7XG4gICAgICB9O1xuICAgfVxuXG4gICBmdW5jdGlvbiBzeW5jV3JhcHBlcihmbjogc3RyaW5nLCBnaXQ6IGFueSwgYXBpOiBTaW1wbGVHaXQpIHtcbiAgICAgIHJldHVybiAoLi4uYXJnczogYW55W10pID0+IHtcbiAgICAgICAgIGdpdFtmbl0oLi4uYXJncyk7XG5cbiAgICAgICAgIHJldHVybiBhcGk7XG4gICAgICB9O1xuICAgfVxufVxuXG5mdW5jdGlvbiB0b0Vycm9yKGVycm9yOiBFcnJvciB8IHN0cmluZyB8IGFueSk6IEVycm9yIHtcbiAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICByZXR1cm4gZXJyb3I7XG4gICB9XG5cbiAgIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKGVycm9yKTtcbiAgIH1cblxuICAgcmV0dXJuIG5ldyBHaXRSZXNwb25zZUVycm9yKGVycm9yKTtcbn1cbiIsICJpbXBvcnQgeyBnaXRJbnN0YW5jZUZhY3RvcnkgfSBmcm9tICcuL2xpYi9naXQtZmFjdG9yeSc7XG5cbmV4cG9ydCB7IGdpdFAgfSBmcm9tICcuL2xpYi9ydW5uZXJzL3Byb21pc2Utd3JhcHBlZCc7XG5leHBvcnQgKiBmcm9tICcuL2xpYi9hcGknO1xuXG5leHBvcnQgY29uc3Qgc2ltcGxlR2l0ID0gZ2l0SW5zdGFuY2VGYWN0b3J5O1xuXG5leHBvcnQgZGVmYXVsdCBnaXRJbnN0YW5jZUZhY3Rvcnk7XG4iLCAiaW1wb3J0IHsgZXhpc3RzU3luYywgcmVhZEZpbGVTeW5jLCB3cml0ZUZpbGVTeW5jIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgUHJvamVjdEpzb24gfSBmcm9tICcuLic7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBBYnN0cmFjdFByb2plY3QgfSBmcm9tICcuJztcblxuZXhwb3J0IHR5cGUgUGFja2FnZUpzb24gPSBQcm9qZWN0SnNvbjtcblxuZXhwb3J0IGNsYXNzIE5vZGVQcm9qZWN0IGV4dGVuZHMgQWJzdHJhY3RQcm9qZWN0IHtcbiAgYXN5bmMgc2V0UHJvamVjdChuYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5wYWNrYWdlSnNvbkZpbGUudGhlbigocGFja2FnZUpzb25GaWxlKSA9PiB7XG4gICAgICBpZiAoIXBhY2thZ2VKc29uRmlsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBwYWNrYWdlSnNvbiA9IEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKHBhY2thZ2VKc29uRmlsZSwgJ3V0ZjgnKSk7XG4gICAgICBwYWNrYWdlSnNvbi5uYW1lID0gbmFtZTtcbiAgICAgIGRlbGV0ZSBwYWNrYWdlSnNvbi5saWNlbnNlO1xuICAgICAgZGVsZXRlIHBhY2thZ2VKc29uLmRlc2NyaXB0aW9uO1xuICAgICAgd3JpdGVGaWxlU3luYyhwYWNrYWdlSnNvbkZpbGUsIEpTT04uc3RyaW5naWZ5KHBhY2thZ2VKc29uLCBudWxsLCAyKSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldCBwYWNrYWdlSnNvbkZpbGUoKTogUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy53b3JrZGlyXG4gICAgICAudGhlbigod29ya0RpcikgPT4gam9pbih3b3JrRGlyLCAncGFja2FnZS5qc29uJykpXG4gICAgICAudGhlbigocGFja2FnZUpzb25GaWxlKSA9PiB7XG4gICAgICAgIGlmICghZXhpc3RzU3luYyhwYWNrYWdlSnNvbkZpbGUpKSB7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFja2FnZUpzb25GaWxlO1xuICAgICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldCBwYWNrYWdlSnNvbigpOiBQcm9taXNlPFByb2plY3RKc29uIHwgdW5kZWZpbmVkPiB7XG4gICAgcmV0dXJuIHRoaXMucGFja2FnZUpzb25GaWxlLnRoZW4oKHBhY2thZ2VKc29uRmlsZSkgPT4ge1xuICAgICAgaWYgKCFwYWNrYWdlSnNvbkZpbGUpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBhY2thZ2VKc29uID0gSlNPTi5wYXJzZShyZWFkRmlsZVN5bmMocGFja2FnZUpzb25GaWxlLCAndXRmOCcpKSBhcyBQcm9qZWN0SnNvbjtcbiAgICAgICAgcGFja2FnZUpzb24udHlwZSA9ICdub2RlJztcbiAgICAgICAgcmV0dXJuIHBhY2thZ2VKc29uO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZ2V0IHByb2plY3RKc29uKCk6IFByb21pc2U8UHJvamVjdEpzb24gfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5wYWNrYWdlSnNvbjtcbiAgfVxufVxuIiwgImltcG9ydCB7IGV4aXN0c1N5bmMsIHJlYWRGaWxlU3luYyB9IGZyb20gJ2ZzJztcbmltcG9ydCB7IENvbW1hbmRzLCBJU2NhZmZvbGRseUNvbmZpZywgUHJvamVjdEpzb24sIFNjYWZmb2xkbHlDb25maWcgfSBmcm9tICcuLic7XG5pbXBvcnQgeyBHaXRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2NhZmZvbGRseS9jb21tYW5kcy9jZC9naXQnO1xuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RQcm9qZWN0IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBnaXRTZXJ2aWNlPzogR2l0U2VydmljZSwgcHJpdmF0ZSB3b3JrRGlyPzogc3RyaW5nKSB7fVxuXG4gIGdldCB3b3JrZGlyKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgaWYgKHRoaXMuZ2l0U2VydmljZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2l0U2VydmljZS53b3JrRGlyO1xuICAgIH1cbiAgICBpZiAodGhpcy53b3JrRGlyKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMud29ya0Rpcik7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignV29ya2RpciBpcyB1bmtub3duJyk7XG4gIH1cblxuICBhYnN0cmFjdCBzZXRQcm9qZWN0KG5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG5cbiAgYWJzdHJhY3QgZ2V0IHByb2plY3RKc29uKCk6IFByb21pc2U8UHJvamVjdEpzb24gfCB1bmRlZmluZWQ+O1xuXG4gIGdldCBzdGFuZGFsb25lQ29uZmlnRmlsZSgpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiB0aGlzLndvcmtkaXIudGhlbigod29ya0RpcikgPT4ge1xuICAgICAgY29uc3Qgc3RhbmRhbG9uZUNvbmZpZ0ZpbGUgPSBqb2luKHdvcmtEaXIsICdzY2FmZm9sZGx5Lmpzb24nKTtcbiAgICAgIGlmICghZXhpc3RzU3luYyhzdGFuZGFsb25lQ29uZmlnRmlsZSkpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGFuZGFsb25lQ29uZmlnRmlsZTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldCBzdGFuZGFsb25lQ29uZmlnKCk6IFByb21pc2U8UGFydGlhbDxJU2NhZmZvbGRseUNvbmZpZz4gfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdGFuZGFsb25lQ29uZmlnRmlsZS50aGVuKChzdGFuZGFsb25lQ29uZmlnRmlsZSkgPT4ge1xuICAgICAgaWYgKCFzdGFuZGFsb25lQ29uZmlnRmlsZSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzY2FmZm9sZGx5Q29uZmlnOiBQYXJ0aWFsPElTY2FmZm9sZGx5Q29uZmlnPiA9IHt9O1xuXG4gICAgICAvLyBUT0RPOiBTdXBwb3J0IFlBTUxcbiAgICAgIGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKHN0YW5kYWxvbmVDb25maWdGaWxlLCAndXRmLTgnKSk7XG5cbiAgICAgIE9iamVjdC5hc3NpZ24oc2NhZmZvbGRseUNvbmZpZywgcGFyc2VkKTtcblxuICAgICAgcmV0dXJuIHNjYWZmb2xkbHlDb25maWc7XG4gICAgfSk7XG4gIH1cblxuICBnZXQgaW5zdGFsbENvbW1hbmRzKCk6IFByb21pc2U8Q29tbWFuZHMgfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW3RoaXMud29ya0RpciwgdGhpcy5wcm9qZWN0SnNvbl0pLnRoZW4oKFt3b3JrRGlyLCBwcm9qZWN0SnNvbl0pID0+IHtcbiAgICAgIGlmICghcHJvamVjdEpzb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXdvcmtEaXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjb25maWcgPSBuZXcgU2NhZmZvbGRseUNvbmZpZyh3b3JrRGlyLCB3b3JrRGlyLCB7IHByb2plY3RKc29uIH0pO1xuXG4gICAgICByZXR1cm4gY29uZmlnLmluc3RhbGxDb21tYW5kcztcbiAgICB9KTtcbiAgfVxufVxuIiwgIi8qISBzY3VyZS1iYXNlIC0gTUlUIExpY2Vuc2UgKGMpIDIwMjIgUGF1bCBNaWxsZXIgKHBhdWxtaWxsci5jb20pICovXG5cbi8vIFV0aWxpdGllc1xuLyoqXG4gKiBAX19OT19TSURFX0VGRkVDVFNfX1xuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0TnVtYmVyKG46IG51bWJlcikge1xuICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKG4pKSB0aHJvdyBuZXcgRXJyb3IoYFdyb25nIGludGVnZXI6ICR7bn1gKTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgQ29kZXI8RiwgVD4ge1xuICBlbmNvZGUoZnJvbTogRik6IFQ7XG4gIGRlY29kZSh0bzogVCk6IEY7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnl0ZXNDb2RlciBleHRlbmRzIENvZGVyPFVpbnQ4QXJyYXksIHN0cmluZz4ge1xuICBlbmNvZGU6IChkYXRhOiBVaW50OEFycmF5KSA9PiBzdHJpbmc7XG4gIGRlY29kZTogKHN0cjogc3RyaW5nKSA9PiBVaW50OEFycmF5O1xufVxuXG5mdW5jdGlvbiBpc0J5dGVzKGE6IHVua25vd24pOiBhIGlzIFVpbnQ4QXJyYXkge1xuICByZXR1cm4gKFxuICAgIGEgaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8XG4gICAgKGEgIT0gbnVsbCAmJiB0eXBlb2YgYSA9PT0gJ29iamVjdCcgJiYgYS5jb25zdHJ1Y3Rvci5uYW1lID09PSAnVWludDhBcnJheScpXG4gICk7XG59XG5cbi8vIFRPRE86IHNvbWUgcmVjdXNpdmUgdHlwZSBpbmZlcmVuY2Ugc28gaXQgd291bGQgY2hlY2sgY29ycmVjdCBvcmRlciBvZiBpbnB1dC9vdXRwdXQgaW5zaWRlIHJlc3Q/XG4vLyBsaWtlIDxzdHJpbmcsIG51bWJlcj4sIDxudW1iZXIsIGJ5dGVzPiwgPGJ5dGVzLCBmbG9hdD5cbnR5cGUgQ2hhaW4gPSBbQ29kZXI8YW55LCBhbnk+LCAuLi5Db2RlcjxhbnksIGFueT5bXV07XG4vLyBFeHRyYWN0IGluZm8gZnJvbSBDb2RlciB0eXBlXG50eXBlIElucHV0PEY+ID0gRiBleHRlbmRzIENvZGVyPGluZmVyIFQsIGFueT4gPyBUIDogbmV2ZXI7XG50eXBlIE91dHB1dDxGPiA9IEYgZXh0ZW5kcyBDb2RlcjxhbnksIGluZmVyIFQ+ID8gVCA6IG5ldmVyO1xuLy8gR2VuZXJpYyBmdW5jdGlvbiBmb3IgYXJyYXlzXG50eXBlIEZpcnN0PFQ+ID0gVCBleHRlbmRzIFtpbmZlciBVLCAuLi5hbnlbXV0gPyBVIDogbmV2ZXI7XG50eXBlIExhc3Q8VD4gPSBUIGV4dGVuZHMgWy4uLmFueVtdLCBpbmZlciBVXSA/IFUgOiBuZXZlcjtcbnR5cGUgVGFpbDxUPiA9IFQgZXh0ZW5kcyBbYW55LCAuLi5pbmZlciBVXSA/IFUgOiBuZXZlcjtcblxudHlwZSBBc0NoYWluPEMgZXh0ZW5kcyBDaGFpbiwgUmVzdCA9IFRhaWw8Qz4+ID0ge1xuICAvLyBDW0tdID0gQ29kZXI8SW5wdXQ8Q1tLXT4sIElucHV0PFJlc3Rba10+PlxuICBbSyBpbiBrZXlvZiBDXTogQ29kZXI8SW5wdXQ8Q1tLXT4sIElucHV0PEsgZXh0ZW5kcyBrZXlvZiBSZXN0ID8gUmVzdFtLXSA6IGFueT4+O1xufTtcblxuLyoqXG4gKiBAX19OT19TSURFX0VGRkVDVFNfX1xuICovXG5mdW5jdGlvbiBjaGFpbjxUIGV4dGVuZHMgQ2hhaW4gJiBBc0NoYWluPFQ+PiguLi5hcmdzOiBUKTogQ29kZXI8SW5wdXQ8Rmlyc3Q8VD4+LCBPdXRwdXQ8TGFzdDxUPj4+IHtcbiAgY29uc3QgaWQgPSAoYTogYW55KSA9PiBhO1xuICAvLyBXcmFwIGNhbGwgaW4gY2xvc3VyZSBzbyBKSVQgY2FuIGlubGluZSBjYWxsc1xuICBjb25zdCB3cmFwID0gKGE6IGFueSwgYjogYW55KSA9PiAoYzogYW55KSA9PiBhKGIoYykpO1xuICAvLyBDb25zdHJ1Y3QgY2hhaW4gb2YgYXJnc1stMV0uZW5jb2RlKGFyZ3NbLTJdLmVuY29kZShbLi4uXSkpXG4gIGNvbnN0IGVuY29kZSA9IGFyZ3MubWFwKCh4KSA9PiB4LmVuY29kZSkucmVkdWNlUmlnaHQod3JhcCwgaWQpO1xuICAvLyBDb25zdHJ1Y3QgY2hhaW4gb2YgYXJnc1swXS5kZWNvZGUoYXJnc1sxXS5kZWNvZGUoLi4uKSlcbiAgY29uc3QgZGVjb2RlID0gYXJncy5tYXAoKHgpID0+IHguZGVjb2RlKS5yZWR1Y2Uod3JhcCwgaWQpO1xuICByZXR1cm4geyBlbmNvZGUsIGRlY29kZSB9O1xufVxuXG50eXBlIEFscGhhYmV0ID0gc3RyaW5nW10gfCBzdHJpbmc7XG5cbi8qKlxuICogRW5jb2RlcyBpbnRlZ2VyIHJhZGl4IHJlcHJlc2VudGF0aW9uIHRvIGFycmF5IG9mIHN0cmluZ3MgdXNpbmcgYWxwaGFiZXQgYW5kIGJhY2tcbiAqIEBfX05PX1NJREVfRUZGRUNUU19fXG4gKi9cbmZ1bmN0aW9uIGFscGhhYmV0KGFscGhhYmV0OiBBbHBoYWJldCk6IENvZGVyPG51bWJlcltdLCBzdHJpbmdbXT4ge1xuICByZXR1cm4ge1xuICAgIGVuY29kZTogKGRpZ2l0czogbnVtYmVyW10pID0+IHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShkaWdpdHMpIHx8IChkaWdpdHMubGVuZ3RoICYmIHR5cGVvZiBkaWdpdHNbMF0gIT09ICdudW1iZXInKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhbHBoYWJldC5lbmNvZGUgaW5wdXQgc2hvdWxkIGJlIGFuIGFycmF5IG9mIG51bWJlcnMnKTtcbiAgICAgIHJldHVybiBkaWdpdHMubWFwKChpKSA9PiB7XG4gICAgICAgIGFzc2VydE51bWJlcihpKTtcbiAgICAgICAgaWYgKGkgPCAwIHx8IGkgPj0gYWxwaGFiZXQubGVuZ3RoKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRGlnaXQgaW5kZXggb3V0c2lkZSBhbHBoYWJldDogJHtpfSAoYWxwaGFiZXQ6ICR7YWxwaGFiZXQubGVuZ3RofSlgKTtcbiAgICAgICAgcmV0dXJuIGFscGhhYmV0W2ldITtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZGVjb2RlOiAoaW5wdXQ6IHN0cmluZ1tdKSA9PiB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpIHx8IChpbnB1dC5sZW5ndGggJiYgdHlwZW9mIGlucHV0WzBdICE9PSAnc3RyaW5nJykpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYWxwaGFiZXQuZGVjb2RlIGlucHV0IHNob3VsZCBiZSBhcnJheSBvZiBzdHJpbmdzJyk7XG4gICAgICByZXR1cm4gaW5wdXQubWFwKChsZXR0ZXIpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBsZXR0ZXIgIT09ICdzdHJpbmcnKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgYWxwaGFiZXQuZGVjb2RlOiBub3Qgc3RyaW5nIGVsZW1lbnQ9JHtsZXR0ZXJ9YCk7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gYWxwaGFiZXQuaW5kZXhPZihsZXR0ZXIpO1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gbGV0dGVyOiBcIiR7bGV0dGVyfVwiLiBBbGxvd2VkOiAke2FscGhhYmV0fWApO1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufVxuXG4vKipcbiAqIEBfX05PX1NJREVfRUZGRUNUU19fXG4gKi9cbmZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yID0gJycpOiBDb2RlcjxzdHJpbmdbXSwgc3RyaW5nPiB7XG4gIGlmICh0eXBlb2Ygc2VwYXJhdG9yICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKCdqb2luIHNlcGFyYXRvciBzaG91bGQgYmUgc3RyaW5nJyk7XG4gIHJldHVybiB7XG4gICAgZW5jb2RlOiAoZnJvbSkgPT4ge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGZyb20pIHx8IChmcm9tLmxlbmd0aCAmJiB0eXBlb2YgZnJvbVswXSAhPT0gJ3N0cmluZycpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2pvaW4uZW5jb2RlIGlucHV0IHNob3VsZCBiZSBhcnJheSBvZiBzdHJpbmdzJyk7XG4gICAgICBmb3IgKGxldCBpIG9mIGZyb20pXG4gICAgICAgIGlmICh0eXBlb2YgaSAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBFcnJvcihgam9pbi5lbmNvZGU6IG5vbi1zdHJpbmcgaW5wdXQ9JHtpfWApO1xuICAgICAgcmV0dXJuIGZyb20uam9pbihzZXBhcmF0b3IpO1xuICAgIH0sXG4gICAgZGVjb2RlOiAodG8pID0+IHtcbiAgICAgIGlmICh0eXBlb2YgdG8gIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgRXJyb3IoJ2pvaW4uZGVjb2RlIGlucHV0IHNob3VsZCBiZSBzdHJpbmcnKTtcbiAgICAgIHJldHVybiB0by5zcGxpdChzZXBhcmF0b3IpO1xuICAgIH0sXG4gIH07XG59XG5cbi8qKlxuICogUGFkIHN0cmluZ3MgYXJyYXkgc28gaXQgaGFzIGludGVnZXIgbnVtYmVyIG9mIGJpdHNcbiAqIEBfX05PX1NJREVfRUZGRUNUU19fXG4gKi9cbmZ1bmN0aW9uIHBhZGRpbmcoYml0czogbnVtYmVyLCBjaHIgPSAnPScpOiBDb2RlcjxzdHJpbmdbXSwgc3RyaW5nW10+IHtcbiAgYXNzZXJ0TnVtYmVyKGJpdHMpO1xuICBpZiAodHlwZW9mIGNociAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBFcnJvcigncGFkZGluZyBjaHIgc2hvdWxkIGJlIHN0cmluZycpO1xuICByZXR1cm4ge1xuICAgIGVuY29kZShkYXRhOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSB8fCAoZGF0YS5sZW5ndGggJiYgdHlwZW9mIGRhdGFbMF0gIT09ICdzdHJpbmcnKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwYWRkaW5nLmVuY29kZSBpbnB1dCBzaG91bGQgYmUgYXJyYXkgb2Ygc3RyaW5ncycpO1xuICAgICAgZm9yIChsZXQgaSBvZiBkYXRhKVxuICAgICAgICBpZiAodHlwZW9mIGkgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgRXJyb3IoYHBhZGRpbmcuZW5jb2RlOiBub24tc3RyaW5nIGlucHV0PSR7aX1gKTtcbiAgICAgIHdoaWxlICgoZGF0YS5sZW5ndGggKiBiaXRzKSAlIDgpIGRhdGEucHVzaChjaHIpO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQ6IHN0cmluZ1tdKTogc3RyaW5nW10ge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0KSB8fCAoaW5wdXQubGVuZ3RoICYmIHR5cGVvZiBpbnB1dFswXSAhPT0gJ3N0cmluZycpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BhZGRpbmcuZW5jb2RlIGlucHV0IHNob3VsZCBiZSBhcnJheSBvZiBzdHJpbmdzJyk7XG4gICAgICBmb3IgKGxldCBpIG9mIGlucHV0KVxuICAgICAgICBpZiAodHlwZW9mIGkgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgRXJyb3IoYHBhZGRpbmcuZGVjb2RlOiBub24tc3RyaW5nIGlucHV0PSR7aX1gKTtcbiAgICAgIGxldCBlbmQgPSBpbnB1dC5sZW5ndGg7XG4gICAgICBpZiAoKGVuZCAqIGJpdHMpICUgOClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHBhZGRpbmc6IHN0cmluZyBzaG91bGQgaGF2ZSB3aG9sZSBudW1iZXIgb2YgYnl0ZXMnKTtcbiAgICAgIGZvciAoOyBlbmQgPiAwICYmIGlucHV0W2VuZCAtIDFdID09PSBjaHI7IGVuZC0tKSB7XG4gICAgICAgIGlmICghKCgoZW5kIC0gMSkgKiBiaXRzKSAlIDgpKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBwYWRkaW5nOiBzdHJpbmcgaGFzIHRvbyBtdWNoIHBhZGRpbmcnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpbnB1dC5zbGljZSgwLCBlbmQpO1xuICAgIH0sXG4gIH07XG59XG5cbi8qKlxuICogQF9fTk9fU0lERV9FRkZFQ1RTX19cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplPFQ+KGZuOiAodmFsOiBUKSA9PiBUKTogQ29kZXI8VCwgVD4ge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgRXJyb3IoJ25vcm1hbGl6ZSBmbiBzaG91bGQgYmUgZnVuY3Rpb24nKTtcbiAgcmV0dXJuIHsgZW5jb2RlOiAoZnJvbTogVCkgPT4gZnJvbSwgZGVjb2RlOiAodG86IFQpID0+IGZuKHRvKSB9O1xufVxuXG4vKipcbiAqIFNsb3c6IE8obl4yKSB0aW1lIGNvbXBsZXhpdHlcbiAqIEBfX05PX1NJREVfRUZGRUNUU19fXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRSYWRpeChkYXRhOiBudW1iZXJbXSwgZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKSB7XG4gIC8vIGJhc2UgMSBpcyBpbXBvc3NpYmxlXG4gIGlmIChmcm9tIDwgMikgdGhyb3cgbmV3IEVycm9yKGBjb252ZXJ0UmFkaXg6IHdyb25nIGZyb209JHtmcm9tfSwgYmFzZSBjYW5ub3QgYmUgbGVzcyB0aGFuIDJgKTtcbiAgaWYgKHRvIDwgMikgdGhyb3cgbmV3IEVycm9yKGBjb252ZXJ0UmFkaXg6IHdyb25nIHRvPSR7dG99LCBiYXNlIGNhbm5vdCBiZSBsZXNzIHRoYW4gMmApO1xuICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpIHRocm93IG5ldyBFcnJvcignY29udmVydFJhZGl4OiBkYXRhIHNob3VsZCBiZSBhcnJheScpO1xuICBpZiAoIWRhdGEubGVuZ3RoKSByZXR1cm4gW107XG4gIGxldCBwb3MgPSAwO1xuICBjb25zdCByZXMgPSBbXTtcbiAgY29uc3QgZGlnaXRzID0gQXJyYXkuZnJvbShkYXRhKTtcbiAgZGlnaXRzLmZvckVhY2goKGQpID0+IHtcbiAgICBhc3NlcnROdW1iZXIoZCk7XG4gICAgaWYgKGQgPCAwIHx8IGQgPj0gZnJvbSkgdGhyb3cgbmV3IEVycm9yKGBXcm9uZyBpbnRlZ2VyOiAke2R9YCk7XG4gIH0pO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGxldCBjYXJyeSA9IDA7XG4gICAgbGV0IGRvbmUgPSB0cnVlO1xuICAgIGZvciAobGV0IGkgPSBwb3M7IGkgPCBkaWdpdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGRpZ2l0ID0gZGlnaXRzW2ldITtcbiAgICAgIGNvbnN0IGRpZ2l0QmFzZSA9IGZyb20gKiBjYXJyeSArIGRpZ2l0O1xuICAgICAgaWYgKFxuICAgICAgICAhTnVtYmVyLmlzU2FmZUludGVnZXIoZGlnaXRCYXNlKSB8fFxuICAgICAgICAoZnJvbSAqIGNhcnJ5KSAvIGZyb20gIT09IGNhcnJ5IHx8XG4gICAgICAgIGRpZ2l0QmFzZSAtIGRpZ2l0ICE9PSBmcm9tICogY2FycnlcbiAgICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbnZlcnRSYWRpeDogY2Fycnkgb3ZlcmZsb3cnKTtcbiAgICAgIH1cbiAgICAgIGNhcnJ5ID0gZGlnaXRCYXNlICUgdG87XG4gICAgICBjb25zdCByb3VuZGVkID0gTWF0aC5mbG9vcihkaWdpdEJhc2UgLyB0byk7XG4gICAgICBkaWdpdHNbaV0gPSByb3VuZGVkO1xuICAgICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihyb3VuZGVkKSB8fCByb3VuZGVkICogdG8gKyBjYXJyeSAhPT0gZGlnaXRCYXNlKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbnZlcnRSYWRpeDogY2Fycnkgb3ZlcmZsb3cnKTtcbiAgICAgIGlmICghZG9uZSkgY29udGludWU7XG4gICAgICBlbHNlIGlmICghcm91bmRlZCkgcG9zID0gaTtcbiAgICAgIGVsc2UgZG9uZSA9IGZhbHNlO1xuICAgIH1cbiAgICByZXMucHVzaChjYXJyeSk7XG4gICAgaWYgKGRvbmUpIGJyZWFrO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGggLSAxICYmIGRhdGFbaV0gPT09IDA7IGkrKykgcmVzLnB1c2goMCk7XG4gIHJldHVybiByZXMucmV2ZXJzZSgpO1xufVxuXG5jb25zdCBnY2QgPSAvKiBAX19OT19TSURFX0VGRkVDVFNfXyAqLyAoYTogbnVtYmVyLCBiOiBudW1iZXIpOiBudW1iZXIgPT4gKCFiID8gYSA6IGdjZChiLCBhICUgYikpO1xuY29uc3QgcmFkaXgyY2FycnkgPSAvKkBfX05PX1NJREVfRUZGRUNUU19fICovIChmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpID0+XG4gIGZyb20gKyAodG8gLSBnY2QoZnJvbSwgdG8pKTtcbi8qKlxuICogSW1wbGVtZW50ZWQgd2l0aCBudW1iZXJzLCBiZWNhdXNlIEJpZ0ludCBpcyA1eCBzbG93ZXJcbiAqIEBfX05PX1NJREVfRUZGRUNUU19fXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRSYWRpeDIoZGF0YTogbnVtYmVyW10sIGZyb206IG51bWJlciwgdG86IG51bWJlciwgcGFkZGluZzogYm9vbGVhbik6IG51bWJlcltdIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKSB0aHJvdyBuZXcgRXJyb3IoJ2NvbnZlcnRSYWRpeDI6IGRhdGEgc2hvdWxkIGJlIGFycmF5Jyk7XG4gIGlmIChmcm9tIDw9IDAgfHwgZnJvbSA+IDMyKSB0aHJvdyBuZXcgRXJyb3IoYGNvbnZlcnRSYWRpeDI6IHdyb25nIGZyb209JHtmcm9tfWApO1xuICBpZiAodG8gPD0gMCB8fCB0byA+IDMyKSB0aHJvdyBuZXcgRXJyb3IoYGNvbnZlcnRSYWRpeDI6IHdyb25nIHRvPSR7dG99YCk7XG4gIGlmIChyYWRpeDJjYXJyeShmcm9tLCB0bykgPiAzMikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBjb252ZXJ0UmFkaXgyOiBjYXJyeSBvdmVyZmxvdyBmcm9tPSR7ZnJvbX0gdG89JHt0b30gY2FycnlCaXRzPSR7cmFkaXgyY2FycnkoZnJvbSwgdG8pfWBcbiAgICApO1xuICB9XG4gIGxldCBjYXJyeSA9IDA7XG4gIGxldCBwb3MgPSAwOyAvLyBiaXR3aXNlIHBvc2l0aW9uIGluIGN1cnJlbnQgZWxlbWVudFxuICBjb25zdCBtYXNrID0gMiAqKiB0byAtIDE7XG4gIGNvbnN0IHJlczogbnVtYmVyW10gPSBbXTtcbiAgZm9yIChjb25zdCBuIG9mIGRhdGEpIHtcbiAgICBhc3NlcnROdW1iZXIobik7XG4gICAgaWYgKG4gPj0gMiAqKiBmcm9tKSB0aHJvdyBuZXcgRXJyb3IoYGNvbnZlcnRSYWRpeDI6IGludmFsaWQgZGF0YSB3b3JkPSR7bn0gZnJvbT0ke2Zyb219YCk7XG4gICAgY2FycnkgPSAoY2FycnkgPDwgZnJvbSkgfCBuO1xuICAgIGlmIChwb3MgKyBmcm9tID4gMzIpIHRocm93IG5ldyBFcnJvcihgY29udmVydFJhZGl4MjogY2Fycnkgb3ZlcmZsb3cgcG9zPSR7cG9zfSBmcm9tPSR7ZnJvbX1gKTtcbiAgICBwb3MgKz0gZnJvbTtcbiAgICBmb3IgKDsgcG9zID49IHRvOyBwb3MgLT0gdG8pIHJlcy5wdXNoKCgoY2FycnkgPj4gKHBvcyAtIHRvKSkgJiBtYXNrKSA+Pj4gMCk7XG4gICAgY2FycnkgJj0gMiAqKiBwb3MgLSAxOyAvLyBjbGVhbiBjYXJyeSwgb3RoZXJ3aXNlIGl0IHdpbGwgY2F1c2Ugb3ZlcmZsb3dcbiAgfVxuICBjYXJyeSA9IChjYXJyeSA8PCAodG8gLSBwb3MpKSAmIG1hc2s7XG4gIGlmICghcGFkZGluZyAmJiBwb3MgPj0gZnJvbSkgdGhyb3cgbmV3IEVycm9yKCdFeGNlc3MgcGFkZGluZycpO1xuICBpZiAoIXBhZGRpbmcgJiYgY2FycnkpIHRocm93IG5ldyBFcnJvcihgTm9uLXplcm8gcGFkZGluZzogJHtjYXJyeX1gKTtcbiAgaWYgKHBhZGRpbmcgJiYgcG9zID4gMCkgcmVzLnB1c2goY2FycnkgPj4+IDApO1xuICByZXR1cm4gcmVzO1xufVxuXG4vKipcbiAqIEBfX05PX1NJREVfRUZGRUNUU19fXG4gKi9cbmZ1bmN0aW9uIHJhZGl4KG51bTogbnVtYmVyKTogQ29kZXI8VWludDhBcnJheSwgbnVtYmVyW10+IHtcbiAgYXNzZXJ0TnVtYmVyKG51bSk7XG4gIHJldHVybiB7XG4gICAgZW5jb2RlOiAoYnl0ZXM6IFVpbnQ4QXJyYXkpID0+IHtcbiAgICAgIGlmICghaXNCeXRlcyhieXRlcykpIHRocm93IG5ldyBFcnJvcigncmFkaXguZW5jb2RlIGlucHV0IHNob3VsZCBiZSBVaW50OEFycmF5Jyk7XG4gICAgICByZXR1cm4gY29udmVydFJhZGl4KEFycmF5LmZyb20oYnl0ZXMpLCAyICoqIDgsIG51bSk7XG4gICAgfSxcbiAgICBkZWNvZGU6IChkaWdpdHM6IG51bWJlcltdKSA9PiB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGlnaXRzKSB8fCAoZGlnaXRzLmxlbmd0aCAmJiB0eXBlb2YgZGlnaXRzWzBdICE9PSAnbnVtYmVyJykpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncmFkaXguZGVjb2RlIGlucHV0IHNob3VsZCBiZSBhcnJheSBvZiBudW1iZXJzJyk7XG4gICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKGNvbnZlcnRSYWRpeChkaWdpdHMsIG51bSwgMiAqKiA4KSk7XG4gICAgfSxcbiAgfTtcbn1cblxuLyoqXG4gKiBJZiBib3RoIGJhc2VzIGFyZSBwb3dlciBvZiBzYW1lIG51bWJlciAobGlrZSBgMioqOCA8LT4gMioqNjRgKSxcbiAqIHRoZXJlIGlzIGEgbGluZWFyIGFsZ29yaXRobS4gRm9yIG5vdyB3ZSBoYXZlIGltcGxlbWVudGF0aW9uIGZvciBwb3dlci1vZi10d28gYmFzZXMgb25seS5cbiAqIEBfX05PX1NJREVfRUZGRUNUU19fXG4gKi9cbmZ1bmN0aW9uIHJhZGl4MihiaXRzOiBudW1iZXIsIHJldlBhZGRpbmcgPSBmYWxzZSk6IENvZGVyPFVpbnQ4QXJyYXksIG51bWJlcltdPiB7XG4gIGFzc2VydE51bWJlcihiaXRzKTtcbiAgaWYgKGJpdHMgPD0gMCB8fCBiaXRzID4gMzIpIHRocm93IG5ldyBFcnJvcigncmFkaXgyOiBiaXRzIHNob3VsZCBiZSBpbiAoMC4uMzJdJyk7XG4gIGlmIChyYWRpeDJjYXJyeSg4LCBiaXRzKSA+IDMyIHx8IHJhZGl4MmNhcnJ5KGJpdHMsIDgpID4gMzIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdyYWRpeDI6IGNhcnJ5IG92ZXJmbG93Jyk7XG4gIHJldHVybiB7XG4gICAgZW5jb2RlOiAoYnl0ZXM6IFVpbnQ4QXJyYXkpID0+IHtcbiAgICAgIGlmICghaXNCeXRlcyhieXRlcykpIHRocm93IG5ldyBFcnJvcigncmFkaXgyLmVuY29kZSBpbnB1dCBzaG91bGQgYmUgVWludDhBcnJheScpO1xuICAgICAgcmV0dXJuIGNvbnZlcnRSYWRpeDIoQXJyYXkuZnJvbShieXRlcyksIDgsIGJpdHMsICFyZXZQYWRkaW5nKTtcbiAgICB9LFxuICAgIGRlY29kZTogKGRpZ2l0czogbnVtYmVyW10pID0+IHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShkaWdpdHMpIHx8IChkaWdpdHMubGVuZ3RoICYmIHR5cGVvZiBkaWdpdHNbMF0gIT09ICdudW1iZXInKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyYWRpeDIuZGVjb2RlIGlucHV0IHNob3VsZCBiZSBhcnJheSBvZiBudW1iZXJzJyk7XG4gICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKGNvbnZlcnRSYWRpeDIoZGlnaXRzLCBiaXRzLCA4LCByZXZQYWRkaW5nKSk7XG4gICAgfSxcbiAgfTtcbn1cblxudHlwZSBBcmd1bWVudFR5cGVzPEYgZXh0ZW5kcyBGdW5jdGlvbj4gPSBGIGV4dGVuZHMgKC4uLmFyZ3M6IGluZmVyIEEpID0+IGFueSA/IEEgOiBuZXZlcjtcbi8qKlxuICogQF9fTk9fU0lERV9FRkZFQ1RTX19cbiAqL1xuZnVuY3Rpb24gdW5zYWZlV3JhcHBlcjxUIGV4dGVuZHMgKC4uLmFyZ3M6IGFueSkgPT4gYW55PihmbjogVCkge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgRXJyb3IoJ3Vuc2FmZVdyYXBwZXIgZm4gc2hvdWxkIGJlIGZ1bmN0aW9uJyk7XG4gIHJldHVybiBmdW5jdGlvbiAoLi4uYXJnczogQXJndW1lbnRUeXBlczxUPik6IFJldHVyblR5cGU8VD4gfCB2b2lkIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH07XG59XG5cbi8qKlxuICogQF9fTk9fU0lERV9FRkZFQ1RTX19cbiAqL1xuZnVuY3Rpb24gY2hlY2tzdW0oXG4gIGxlbjogbnVtYmVyLFxuICBmbjogKGRhdGE6IFVpbnQ4QXJyYXkpID0+IFVpbnQ4QXJyYXlcbik6IENvZGVyPFVpbnQ4QXJyYXksIFVpbnQ4QXJyYXk+IHtcbiAgYXNzZXJ0TnVtYmVyKGxlbik7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBFcnJvcignY2hlY2tzdW0gZm4gc2hvdWxkIGJlIGZ1bmN0aW9uJyk7XG4gIHJldHVybiB7XG4gICAgZW5jb2RlKGRhdGE6IFVpbnQ4QXJyYXkpIHtcbiAgICAgIGlmICghaXNCeXRlcyhkYXRhKSkgdGhyb3cgbmV3IEVycm9yKCdjaGVja3N1bS5lbmNvZGU6IGlucHV0IHNob3VsZCBiZSBVaW50OEFycmF5Jyk7XG4gICAgICBjb25zdCBjaGVja3N1bSA9IGZuKGRhdGEpLnNsaWNlKDAsIGxlbik7XG4gICAgICBjb25zdCByZXMgPSBuZXcgVWludDhBcnJheShkYXRhLmxlbmd0aCArIGxlbik7XG4gICAgICByZXMuc2V0KGRhdGEpO1xuICAgICAgcmVzLnNldChjaGVja3N1bSwgZGF0YS5sZW5ndGgpO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9LFxuICAgIGRlY29kZShkYXRhOiBVaW50OEFycmF5KSB7XG4gICAgICBpZiAoIWlzQnl0ZXMoZGF0YSkpIHRocm93IG5ldyBFcnJvcignY2hlY2tzdW0uZGVjb2RlOiBpbnB1dCBzaG91bGQgYmUgVWludDhBcnJheScpO1xuICAgICAgY29uc3QgcGF5bG9hZCA9IGRhdGEuc2xpY2UoMCwgLWxlbik7XG4gICAgICBjb25zdCBuZXdDaGVja3N1bSA9IGZuKHBheWxvYWQpLnNsaWNlKDAsIGxlbik7XG4gICAgICBjb25zdCBvbGRDaGVja3N1bSA9IGRhdGEuc2xpY2UoLWxlbik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgICAgICBpZiAobmV3Q2hlY2tzdW1baV0gIT09IG9sZENoZWNrc3VtW2ldKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY2hlY2tzdW0nKTtcbiAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgIH0sXG4gIH07XG59XG5cbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0IGNvbnN0IHV0aWxzID0ge1xuICBhbHBoYWJldCwgY2hhaW4sIGNoZWNrc3VtLCBjb252ZXJ0UmFkaXgsIGNvbnZlcnRSYWRpeDIsIHJhZGl4LCByYWRpeDIsIGpvaW4sIHBhZGRpbmcsXG59O1xuXG4vLyBSRkMgNDY0OCBha2EgUkZDIDM1NDhcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZXhwb3J0IGNvbnN0IGJhc2UxNjogQnl0ZXNDb2RlciA9IC8qIEBfX1BVUkVfXyAqLyBjaGFpbihcbiAgcmFkaXgyKDQpLFxuICBhbHBoYWJldCgnMDEyMzQ1Njc4OUFCQ0RFRicpLFxuICBqb2luKCcnKVxuKTtcbmV4cG9ydCBjb25zdCBiYXNlMzI6IEJ5dGVzQ29kZXIgPSAvKiBAX19QVVJFX18gKi8gY2hhaW4oXG4gIHJhZGl4Mig1KSxcbiAgYWxwaGFiZXQoJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaMjM0NTY3JyksXG4gIHBhZGRpbmcoNSksXG4gIGpvaW4oJycpXG4pO1xuZXhwb3J0IGNvbnN0IGJhc2UzMm5vcGFkOiBCeXRlc0NvZGVyID0gLyogQF9fUFVSRV9fICovIGNoYWluKFxuICByYWRpeDIoNSksXG4gIGFscGhhYmV0KCdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjIzNDU2NycpLFxuICBqb2luKCcnKVxuKTtcbmV4cG9ydCBjb25zdCBiYXNlMzJoZXg6IEJ5dGVzQ29kZXIgPSAvKiBAX19QVVJFX18gKi8gY2hhaW4oXG4gIHJhZGl4Mig1KSxcbiAgYWxwaGFiZXQoJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWJyksXG4gIHBhZGRpbmcoNSksXG4gIGpvaW4oJycpXG4pO1xuZXhwb3J0IGNvbnN0IGJhc2UzMmhleG5vcGFkOiBCeXRlc0NvZGVyID0gLyogQF9fUFVSRV9fICovIGNoYWluKFxuICByYWRpeDIoNSksXG4gIGFscGhhYmV0KCcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVicpLFxuICBqb2luKCcnKVxuKTtcbmV4cG9ydCBjb25zdCBiYXNlMzJjcm9ja2ZvcmQ6IEJ5dGVzQ29kZXIgPSAvKiBAX19QVVJFX18gKi8gY2hhaW4oXG4gIHJhZGl4Mig1KSxcbiAgYWxwaGFiZXQoJzAxMjM0NTY3ODlBQkNERUZHSEpLTU5QUVJTVFZXWFlaJyksXG4gIGpvaW4oJycpLFxuICBub3JtYWxpemUoKHM6IHN0cmluZykgPT4gcy50b1VwcGVyQ2FzZSgpLnJlcGxhY2UoL08vZywgJzAnKS5yZXBsYWNlKC9bSUxdL2csICcxJykpXG4pO1xuZXhwb3J0IGNvbnN0IGJhc2U2NDogQnl0ZXNDb2RlciA9IC8qIEBfX1BVUkVfXyAqLyBjaGFpbihcbiAgcmFkaXgyKDYpLFxuICBhbHBoYWJldCgnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLycpLFxuICBwYWRkaW5nKDYpLFxuICBqb2luKCcnKVxuKTtcbmV4cG9ydCBjb25zdCBiYXNlNjRub3BhZDogQnl0ZXNDb2RlciA9IC8qIEBfX1BVUkVfXyAqLyBjaGFpbihcbiAgcmFkaXgyKDYpLFxuICBhbHBoYWJldCgnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLycpLFxuICBqb2luKCcnKVxuKTtcbmV4cG9ydCBjb25zdCBiYXNlNjR1cmw6IEJ5dGVzQ29kZXIgPSAvKiBAX19QVVJFX18gKi8gY2hhaW4oXG4gIHJhZGl4Mig2KSxcbiAgYWxwaGFiZXQoJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5LV8nKSxcbiAgcGFkZGluZyg2KSxcbiAgam9pbignJylcbik7XG5leHBvcnQgY29uc3QgYmFzZTY0dXJsbm9wYWQ6IEJ5dGVzQ29kZXIgPSAvKiBAX19QVVJFX18gKi8gY2hhaW4oXG4gIHJhZGl4Mig2KSxcbiAgYWxwaGFiZXQoJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5LV8nKSxcbiAgam9pbignJylcbik7XG5cbi8vIGJhc2U1OCBjb2RlXG4vLyAtLS0tLS0tLS0tLVxuY29uc3QgZ2VuQmFzZTU4ID0gKGFiYzogc3RyaW5nKSA9PiBjaGFpbihyYWRpeCg1OCksIGFscGhhYmV0KGFiYyksIGpvaW4oJycpKTtcblxuZXhwb3J0IGNvbnN0IGJhc2U1ODogQnl0ZXNDb2RlciA9IC8qIEBfX1BVUkVfXyAqLyBnZW5CYXNlNTgoXG4gICcxMjM0NTY3ODlBQkNERUZHSEpLTE1OUFFSU1RVVldYWVphYmNkZWZnaGlqa21ub3BxcnN0dXZ3eHl6J1xuKTtcbmV4cG9ydCBjb25zdCBiYXNlNThmbGlja3I6IEJ5dGVzQ29kZXIgPSAvKiBAX19QVVJFX18gKi8gZ2VuQmFzZTU4KFxuICAnMTIzNDU2Nzg5YWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5ekFCQ0RFRkdISktMTU5QUVJTVFVWV1hZWidcbik7XG5leHBvcnQgY29uc3QgYmFzZTU4eHJwOiBCeXRlc0NvZGVyID0gLyogQF9fUFVSRV9fICovIGdlbkJhc2U1OChcbiAgJ3Jwc2huYWYzOXdCVURORUdISktMTTRQUVJTVDdWV1hZWjJiY2RlQ2c2NWprbThvRnFpMXR1dkF4eXonXG4pO1xuXG4vLyB4bXIgdmVyIGlzIGRvbmUgaW4gOC1ieXRlIGJsb2NrcyAod2hpY2ggZXF1YWxzIDExIGNoYXJzIGluIGRlY29kaW5nKS4gTGFzdCAobm9uLWZ1bGwpIGJsb2NrIHBhZGRlZCB3aXRoICcxJyB0byBzaXplIGluIFhNUl9CTE9DS19MRU4uXG4vLyBCbG9jayBlbmNvZGluZyBzaWduaWZpY2FudGx5IHJlZHVjZXMgcXVhZHJhdGljIGNvbXBsZXhpdHkgb2YgYmFzZTU4LlxuXG4vLyBEYXRhIGxlbiAoaW5kZXgpIC0+IGVuY29kZWQgYmxvY2sgbGVuXG5jb25zdCBYTVJfQkxPQ0tfTEVOID0gWzAsIDIsIDMsIDUsIDYsIDcsIDksIDEwLCAxMV07XG5leHBvcnQgY29uc3QgYmFzZTU4eG1yOiBCeXRlc0NvZGVyID0ge1xuICBlbmNvZGUoZGF0YTogVWludDhBcnJheSkge1xuICAgIGxldCByZXMgPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDgpIHtcbiAgICAgIGNvbnN0IGJsb2NrID0gZGF0YS5zdWJhcnJheShpLCBpICsgOCk7XG4gICAgICByZXMgKz0gYmFzZTU4LmVuY29kZShibG9jaykucGFkU3RhcnQoWE1SX0JMT0NLX0xFTltibG9jay5sZW5ndGhdISwgJzEnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfSxcbiAgZGVjb2RlKHN0cjogc3RyaW5nKSB7XG4gICAgbGV0IHJlczogbnVtYmVyW10gPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkgKz0gMTEpIHtcbiAgICAgIGNvbnN0IHNsaWNlID0gc3RyLnNsaWNlKGksIGkgKyAxMSk7XG4gICAgICBjb25zdCBibG9ja0xlbiA9IFhNUl9CTE9DS19MRU4uaW5kZXhPZihzbGljZS5sZW5ndGgpO1xuICAgICAgY29uc3QgYmxvY2sgPSBiYXNlNTguZGVjb2RlKHNsaWNlKTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYmxvY2subGVuZ3RoIC0gYmxvY2tMZW47IGorKykge1xuICAgICAgICBpZiAoYmxvY2tbal0gIT09IDApIHRocm93IG5ldyBFcnJvcignYmFzZTU4eG1yOiB3cm9uZyBwYWRkaW5nJyk7XG4gICAgICB9XG4gICAgICByZXMgPSByZXMuY29uY2F0KEFycmF5LmZyb20oYmxvY2suc2xpY2UoYmxvY2subGVuZ3RoIC0gYmxvY2tMZW4pKSk7XG4gICAgfVxuICAgIHJldHVybiBVaW50OEFycmF5LmZyb20ocmVzKTtcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVCYXNlNThjaGVjayA9IChzaGEyNTY6IChkYXRhOiBVaW50OEFycmF5KSA9PiBVaW50OEFycmF5KTogQnl0ZXNDb2RlciA9PlxuICBjaGFpbihcbiAgICBjaGVja3N1bSg0LCAoZGF0YSkgPT4gc2hhMjU2KHNoYTI1NihkYXRhKSkpLFxuICAgIGJhc2U1OFxuICApO1xuLy8gbGVnYWN5IGV4cG9ydCwgYmFkIG5hbWVcbmV4cG9ydCBjb25zdCBiYXNlNThjaGVjayA9IGNyZWF0ZUJhc2U1OGNoZWNrO1xuXG4vLyBCZWNoMzIgY29kZVxuLy8gLS0tLS0tLS0tLS1cbmV4cG9ydCBpbnRlcmZhY2UgQmVjaDMyRGVjb2RlZDxQcmVmaXggZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+IHtcbiAgcHJlZml4OiBQcmVmaXg7XG4gIHdvcmRzOiBudW1iZXJbXTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgQmVjaDMyRGVjb2RlZFdpdGhBcnJheTxQcmVmaXggZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+IHtcbiAgcHJlZml4OiBQcmVmaXg7XG4gIHdvcmRzOiBudW1iZXJbXTtcbiAgYnl0ZXM6IFVpbnQ4QXJyYXk7XG59XG5cbmNvbnN0IEJFQ0hfQUxQSEFCRVQ6IENvZGVyPG51bWJlcltdLCBzdHJpbmc+ID0gLyogQF9fUFVSRV9fICovIGNoYWluKFxuICBhbHBoYWJldCgncXB6cnk5eDhnZjJ0dmR3MHMzam41NGtoY2U2bXVhN2wnKSxcbiAgam9pbignJylcbik7XG5cbmNvbnN0IFBPTFlNT0RfR0VORVJBVE9SUyA9IFsweDNiNmE1N2IyLCAweDI2NTA4ZTZkLCAweDFlYTExOWZhLCAweDNkNDIzM2RkLCAweDJhMTQ2MmIzXTtcbi8qKlxuICogQF9fTk9fU0lERV9FRkZFQ1RTX19cbiAqL1xuZnVuY3Rpb24gYmVjaDMyUG9seW1vZChwcmU6IG51bWJlcik6IG51bWJlciB7XG4gIGNvbnN0IGIgPSBwcmUgPj4gMjU7XG4gIGxldCBjaGsgPSAocHJlICYgMHgxZmZmZmZmKSA8PCA1O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IFBPTFlNT0RfR0VORVJBVE9SUy5sZW5ndGg7IGkrKykge1xuICAgIGlmICgoKGIgPj4gaSkgJiAxKSA9PT0gMSkgY2hrIF49IFBPTFlNT0RfR0VORVJBVE9SU1tpXSE7XG4gIH1cbiAgcmV0dXJuIGNoaztcbn1cblxuLyoqXG4gKiBAX19OT19TSURFX0VGRkVDVFNfX1xuICovXG5mdW5jdGlvbiBiZWNoQ2hlY2tzdW0ocHJlZml4OiBzdHJpbmcsIHdvcmRzOiBudW1iZXJbXSwgZW5jb2RpbmdDb25zdCA9IDEpOiBzdHJpbmcge1xuICBjb25zdCBsZW4gPSBwcmVmaXgubGVuZ3RoO1xuICBsZXQgY2hrID0gMTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGNvbnN0IGMgPSBwcmVmaXguY2hhckNvZGVBdChpKTtcbiAgICBpZiAoYyA8IDMzIHx8IGMgPiAxMjYpIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwcmVmaXggKCR7cHJlZml4fSlgKTtcbiAgICBjaGsgPSBiZWNoMzJQb2x5bW9kKGNoaykgXiAoYyA+PiA1KTtcbiAgfVxuICBjaGsgPSBiZWNoMzJQb2x5bW9kKGNoayk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIGNoayA9IGJlY2gzMlBvbHltb2QoY2hrKSBeIChwcmVmaXguY2hhckNvZGVBdChpKSAmIDB4MWYpO1xuICBmb3IgKGxldCB2IG9mIHdvcmRzKSBjaGsgPSBiZWNoMzJQb2x5bW9kKGNoaykgXiB2O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDY7IGkrKykgY2hrID0gYmVjaDMyUG9seW1vZChjaGspO1xuICBjaGsgXj0gZW5jb2RpbmdDb25zdDtcbiAgcmV0dXJuIEJFQ0hfQUxQSEFCRVQuZW5jb2RlKGNvbnZlcnRSYWRpeDIoW2NoayAlIDIgKiogMzBdLCAzMCwgNSwgZmFsc2UpKTtcbn1cblxuLyoqXG4gKiBAX19OT19TSURFX0VGRkVDVFNfX1xuICovXG5mdW5jdGlvbiBnZW5CZWNoMzIoZW5jb2Rpbmc6ICdiZWNoMzInIHwgJ2JlY2gzMm0nKSB7XG4gIGNvbnN0IEVOQ09ESU5HX0NPTlNUID0gZW5jb2RpbmcgPT09ICdiZWNoMzInID8gMSA6IDB4MmJjODMwYTM7XG4gIGNvbnN0IF93b3JkcyA9IHJhZGl4Mig1KTtcbiAgY29uc3QgZnJvbVdvcmRzID0gX3dvcmRzLmRlY29kZTtcbiAgY29uc3QgdG9Xb3JkcyA9IF93b3Jkcy5lbmNvZGU7XG4gIGNvbnN0IGZyb21Xb3Jkc1Vuc2FmZSA9IHVuc2FmZVdyYXBwZXIoZnJvbVdvcmRzKTtcblxuICBmdW5jdGlvbiBlbmNvZGU8UHJlZml4IGV4dGVuZHMgc3RyaW5nPihcbiAgICBwcmVmaXg6IFByZWZpeCxcbiAgICB3b3JkczogbnVtYmVyW10gfCBVaW50OEFycmF5LFxuICAgIGxpbWl0OiBudW1iZXIgfCBmYWxzZSA9IDkwXG4gICk6IGAke0xvd2VyY2FzZTxQcmVmaXg+fTEke3N0cmluZ31gIHtcbiAgICBpZiAodHlwZW9mIHByZWZpeCAhPT0gJ3N0cmluZycpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGJlY2gzMi5lbmNvZGUgcHJlZml4IHNob3VsZCBiZSBzdHJpbmcsIG5vdCAke3R5cGVvZiBwcmVmaXh9YCk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHdvcmRzKSB8fCAod29yZHMubGVuZ3RoICYmIHR5cGVvZiB3b3Jkc1swXSAhPT0gJ251bWJlcicpKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBiZWNoMzIuZW5jb2RlIHdvcmRzIHNob3VsZCBiZSBhcnJheSBvZiBudW1iZXJzLCBub3QgJHt0eXBlb2Ygd29yZHN9YCk7XG4gICAgaWYgKHByZWZpeC5sZW5ndGggPT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgcHJlZml4IGxlbmd0aCAke3ByZWZpeC5sZW5ndGh9YCk7XG4gICAgY29uc3QgYWN0dWFsTGVuZ3RoID0gcHJlZml4Lmxlbmd0aCArIDcgKyB3b3Jkcy5sZW5ndGg7XG4gICAgaWYgKGxpbWl0ICE9PSBmYWxzZSAmJiBhY3R1YWxMZW5ndGggPiBsaW1pdClcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYExlbmd0aCAke2FjdHVhbExlbmd0aH0gZXhjZWVkcyBsaW1pdCAke2xpbWl0fWApO1xuICAgIGNvbnN0IGxvd2VyZWQgPSBwcmVmaXgudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBzdW0gPSBiZWNoQ2hlY2tzdW0obG93ZXJlZCwgd29yZHMsIEVOQ09ESU5HX0NPTlNUKTtcbiAgICByZXR1cm4gYCR7bG93ZXJlZH0xJHtCRUNIX0FMUEhBQkVULmVuY29kZSh3b3Jkcyl9JHtzdW19YCBhcyBgJHtMb3dlcmNhc2U8UHJlZml4Pn0xJHtzdHJpbmd9YDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlY29kZTxQcmVmaXggZXh0ZW5kcyBzdHJpbmc+KFxuICAgIHN0cjogYCR7UHJlZml4fTEke3N0cmluZ31gLFxuICAgIGxpbWl0PzogbnVtYmVyIHwgZmFsc2VcbiAgKTogQmVjaDMyRGVjb2RlZDxQcmVmaXg+O1xuICBmdW5jdGlvbiBkZWNvZGUoc3RyOiBzdHJpbmcsIGxpbWl0PzogbnVtYmVyIHwgZmFsc2UpOiBCZWNoMzJEZWNvZGVkO1xuICBmdW5jdGlvbiBkZWNvZGUoc3RyOiBzdHJpbmcsIGxpbWl0OiBudW1iZXIgfCBmYWxzZSA9IDkwKTogQmVjaDMyRGVjb2RlZCB7XG4gICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBiZWNoMzIuZGVjb2RlIGlucHV0IHNob3VsZCBiZSBzdHJpbmcsIG5vdCAke3R5cGVvZiBzdHJ9YCk7XG4gICAgaWYgKHN0ci5sZW5ndGggPCA4IHx8IChsaW1pdCAhPT0gZmFsc2UgJiYgc3RyLmxlbmd0aCA+IGxpbWl0KSlcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFdyb25nIHN0cmluZyBsZW5ndGg6ICR7c3RyLmxlbmd0aH0gKCR7c3RyfSkuIEV4cGVjdGVkICg4Li4ke2xpbWl0fSlgKTtcbiAgICAvLyBkb24ndCBhbGxvdyBtaXhlZCBjYXNlXG4gICAgY29uc3QgbG93ZXJlZCA9IHN0ci50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChzdHIgIT09IGxvd2VyZWQgJiYgc3RyICE9PSBzdHIudG9VcHBlckNhc2UoKSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU3RyaW5nIG11c3QgYmUgbG93ZXJjYXNlIG9yIHVwcGVyY2FzZWApO1xuICAgIGNvbnN0IHNlcEluZGV4ID0gbG93ZXJlZC5sYXN0SW5kZXhPZignMScpO1xuICAgIGlmIChzZXBJbmRleCA9PT0gMCB8fCBzZXBJbmRleCA9PT0gLTEpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYExldHRlciBcIjFcIiBtdXN0IGJlIHByZXNlbnQgYmV0d2VlbiBwcmVmaXggYW5kIGRhdGEgb25seWApO1xuICAgIGNvbnN0IHByZWZpeCA9IGxvd2VyZWQuc2xpY2UoMCwgc2VwSW5kZXgpO1xuICAgIGNvbnN0IGRhdGEgPSBsb3dlcmVkLnNsaWNlKHNlcEluZGV4ICsgMSk7XG4gICAgaWYgKGRhdGEubGVuZ3RoIDwgNikgdGhyb3cgbmV3IEVycm9yKCdEYXRhIG11c3QgYmUgYXQgbGVhc3QgNiBjaGFyYWN0ZXJzIGxvbmcnKTtcbiAgICBjb25zdCB3b3JkcyA9IEJFQ0hfQUxQSEFCRVQuZGVjb2RlKGRhdGEpLnNsaWNlKDAsIC02KTtcbiAgICBjb25zdCBzdW0gPSBiZWNoQ2hlY2tzdW0ocHJlZml4LCB3b3JkcywgRU5DT0RJTkdfQ09OU1QpO1xuICAgIGlmICghZGF0YS5lbmRzV2l0aChzdW0pKSB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgY2hlY2tzdW0gaW4gJHtzdHJ9OiBleHBlY3RlZCBcIiR7c3VtfVwiYCk7XG4gICAgcmV0dXJuIHsgcHJlZml4LCB3b3JkcyB9O1xuICB9XG5cbiAgY29uc3QgZGVjb2RlVW5zYWZlID0gdW5zYWZlV3JhcHBlcihkZWNvZGUpO1xuXG4gIGZ1bmN0aW9uIGRlY29kZVRvQnl0ZXMoc3RyOiBzdHJpbmcpOiBCZWNoMzJEZWNvZGVkV2l0aEFycmF5IHtcbiAgICBjb25zdCB7IHByZWZpeCwgd29yZHMgfSA9IGRlY29kZShzdHIsIGZhbHNlKTtcbiAgICByZXR1cm4geyBwcmVmaXgsIHdvcmRzLCBieXRlczogZnJvbVdvcmRzKHdvcmRzKSB9O1xuICB9XG5cbiAgcmV0dXJuIHsgZW5jb2RlLCBkZWNvZGUsIGRlY29kZVRvQnl0ZXMsIGRlY29kZVVuc2FmZSwgZnJvbVdvcmRzLCBmcm9tV29yZHNVbnNhZmUsIHRvV29yZHMgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGJlY2gzMiA9IC8qIEBfX1BVUkVfXyAqLyBnZW5CZWNoMzIoJ2JlY2gzMicpO1xuZXhwb3J0IGNvbnN0IGJlY2gzMm0gPSAvKiBAX19QVVJFX18gKi8gZ2VuQmVjaDMyKCdiZWNoMzJtJyk7XG5cbmRlY2xhcmUgY29uc3QgVGV4dEVuY29kZXI6IGFueTtcbmRlY2xhcmUgY29uc3QgVGV4dERlY29kZXI6IGFueTtcblxuZXhwb3J0IGNvbnN0IHV0Zjg6IEJ5dGVzQ29kZXIgPSB7XG4gIGVuY29kZTogKGRhdGEpID0+IG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShkYXRhKSxcbiAgZGVjb2RlOiAoc3RyKSA9PiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyKSxcbn07XG5cbmV4cG9ydCBjb25zdCBoZXg6IEJ5dGVzQ29kZXIgPSAvKiBAX19QVVJFX18gKi8gY2hhaW4oXG4gIHJhZGl4Mig0KSxcbiAgYWxwaGFiZXQoJzAxMjM0NTY3ODlhYmNkZWYnKSxcbiAgam9pbignJyksXG4gIG5vcm1hbGl6ZSgoczogc3RyaW5nKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBzICE9PSAnc3RyaW5nJyB8fCBzLmxlbmd0aCAlIDIpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBoZXguZGVjb2RlOiBleHBlY3RlZCBzdHJpbmcsIGdvdCAke3R5cGVvZiBzfSB3aXRoIGxlbmd0aCAke3MubGVuZ3RofWApO1xuICAgIHJldHVybiBzLnRvTG93ZXJDYXNlKCk7XG4gIH0pXG4pO1xuXG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IENPREVSUyA9IHtcbiAgdXRmOCwgaGV4LCBiYXNlMTYsIGJhc2UzMiwgYmFzZTY0LCBiYXNlNjR1cmwsIGJhc2U1OCwgYmFzZTU4eG1yXG59O1xudHlwZSBDb2RlclR5cGUgPSBrZXlvZiB0eXBlb2YgQ09ERVJTO1xuY29uc3QgY29kZXJUeXBlRXJyb3IgPVxuICAnSW52YWxpZCBlbmNvZGluZyB0eXBlLiBBdmFpbGFibGUgdHlwZXM6IHV0ZjgsIGhleCwgYmFzZTE2LCBiYXNlMzIsIGJhc2U2NCwgYmFzZTY0dXJsLCBiYXNlNTgsIGJhc2U1OHhtcic7XG5cbmV4cG9ydCBjb25zdCBieXRlc1RvU3RyaW5nID0gKHR5cGU6IENvZGVyVHlwZSwgYnl0ZXM6IFVpbnQ4QXJyYXkpOiBzdHJpbmcgPT4ge1xuICBpZiAodHlwZW9mIHR5cGUgIT09ICdzdHJpbmcnIHx8ICFDT0RFUlMuaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBUeXBlRXJyb3IoY29kZXJUeXBlRXJyb3IpO1xuICBpZiAoIWlzQnl0ZXMoYnl0ZXMpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdieXRlc1RvU3RyaW5nKCkgZXhwZWN0cyBVaW50OEFycmF5Jyk7XG4gIHJldHVybiBDT0RFUlNbdHlwZV0uZW5jb2RlKGJ5dGVzKTtcbn07XG5leHBvcnQgY29uc3Qgc3RyID0gYnl0ZXNUb1N0cmluZzsgLy8gYXMgaW4gcHl0aG9uLCBidXQgZm9yIGJ5dGVzIG9ubHlcblxuZXhwb3J0IGNvbnN0IHN0cmluZ1RvQnl0ZXMgPSAodHlwZTogQ29kZXJUeXBlLCBzdHI6IHN0cmluZyk6IFVpbnQ4QXJyYXkgPT4ge1xuICBpZiAoIUNPREVSUy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihjb2RlclR5cGVFcnJvcik7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IFR5cGVFcnJvcignc3RyaW5nVG9CeXRlcygpIGV4cGVjdHMgc3RyaW5nJyk7XG4gIHJldHVybiBDT0RFUlNbdHlwZV0uZGVjb2RlKHN0cik7XG59O1xuZXhwb3J0IGNvbnN0IGJ5dGVzID0gc3RyaW5nVG9CeXRlcztcbiIsICJpbXBvcnQgeyBiYXNlNTggfSBmcm9tICdAc2N1cmUvYmFzZSc7XG5pbXBvcnQgeyBqb2luLCByZWxhdGl2ZSwgc2VwIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgaWdub3JlIGZyb20gJ2lnbm9yZSc7XG5pbXBvcnQgeyBleGlzdHNTeW5jLCByZWFkZGlyU3luYywgcmVhZEZpbGVTeW5jIH0gZnJvbSAnZnMnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9TUkNfUk9PVCA9IGAuYDtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1JPVVRFID0gJy8qJztcblxuLy8gREVWTk9URTogQ291cGxlZCB3aXRoIHdpdGggdGhlIFwic2NhZmZvbGRseS9zY2FmZm9sZGx5OjFcIiBkb2NrZXIgaW1hZ2Vcbi8vIFdlIHVzZSB0aGlzIGZvcjpcbi8vIC0gVmVyc2lvbiBDb25zaXN0ZW5jeVxuLy8gLSBTY29vcGluZyBjb21waWxlZCBiaW5hcmllcyBvdXQgb2YgdGhlIGNvbnRhaW5lciAoc3VjaCBhcyBhd3NsYW1iZGEtZW50cnlwb2ludClcbmV4cG9ydCBjb25zdCBDT05GSUdfU0lHTkFUVVJFID0gYHNjYWZmb2xkbHkvc2NhZmZvbGRseToxYDtcbmV4cG9ydCBjb25zdCBVU0VSX0FHRU5UID0gJ3NjYWZmb2xkbHkvMS54JztcbmV4cG9ydCBjb25zdCBERUZBVUxUX1RBU0tESVIgPSBqb2luKHNlcCwgJ3ZhcicsICd0YXNrJyk7XG5cbmV4cG9ydCBjb25zdCBkZWNvZGUgPSA8VD4oY29uZmlnOiBzdHJpbmcpOiBUID0+IHtcbiAgaWYgKGNvbmZpZy5zdGFydHNXaXRoKGAke0NPTkZJR19TSUdOQVRVUkV9OmApKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoXG4gICAgICBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoYmFzZTU4LmRlY29kZShjb25maWcuc3BsaXQoYCR7Q09ORklHX1NJR05BVFVSRX06YClbMV0pKSxcbiAgICApO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBjb25maWc6ICR7Y29uZmlnfWApO1xufTtcblxuZXhwb3J0IGNvbnN0IGVuY29kZSA9IDxUPihjb25maWc6IFQpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gYCR7Q09ORklHX1NJR05BVFVSRX06JHtiYXNlNTguZW5jb2RlKG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShKU09OLnN0cmluZ2lmeShjb25maWcpKSl9YDtcbn07XG5cbmV4cG9ydCB0eXBlIFNoZWxsID0gJ2RpcmVudic7XG5cbmV4cG9ydCB0eXBlIENvbW1hbmQgPSB7XG4gIGNtZDogc3RyaW5nO1xuICB3b3JrZGlyPzogc3RyaW5nO1xuICBzY2hlZHVsZT86IFNjaGVkdWxlO1xuICBvdXRwdXQ/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY2xhc3MgQ29tbWFuZHMge1xuICBjb21tYW5kczogQ29tbWFuZFtdO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY29tbWFuZHMgPSBbXTtcbiAgfVxuXG4gIGFkZCA9IChjb21tYW5kOiBDb21tYW5kKTogQ29tbWFuZHMgPT4ge1xuICAgIHRoaXMuY29tbWFuZHMucHVzaChjb21tYW5kKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBpc0VtcHR5ID0gKGZpbHRlcj86IHsgc2NoZWR1bGU/OiBTY2hlZHVsZSB9KTogYm9vbGVhbiA9PiB7XG4gICAgY29uc3QgZmlsdGVyZWQgPSBmaWx0ZXJcbiAgICAgID8gdGhpcy5jb21tYW5kcy5maWx0ZXIoKGNvbW1hbmQpID0+IGNvbW1hbmQuc2NoZWR1bGUgPT09IGZpbHRlci5zY2hlZHVsZSlcbiAgICAgIDogdGhpcy5jb21tYW5kcztcblxuICAgIHJldHVybiBmaWx0ZXJlZC5sZW5ndGggPT09IDA7XG4gIH07XG5cbiAgdG9TdHJpbmcgPSAoZmlsdGVyPzogeyBzY2hlZHVsZT86IFNjaGVkdWxlIH0pOiBzdHJpbmcgPT4ge1xuICAgIGNvbnN0IGZpbHRlcmVkID0gZmlsdGVyXG4gICAgICA/IHRoaXMuY29tbWFuZHMuZmlsdGVyKChjb21tYW5kKSA9PiBjb21tYW5kLnNjaGVkdWxlID09PSBmaWx0ZXIuc2NoZWR1bGUpXG4gICAgICA6IHRoaXMuY29tbWFuZHM7XG5cbiAgICByZXR1cm4gZmlsdGVyZWRcbiAgICAgIC5tYXAoKGNvbW1hbmQpID0+IHtcbiAgICAgICAgcmV0dXJuIGNvbW1hbmQud29ya2RpclxuICAgICAgICAgID8gYCggY2QgJHtjb21tYW5kLndvcmtkaXJ9ICYmICR7Y29tbWFuZC5jbWR9IClgXG4gICAgICAgICAgOiBgKCAke2NvbW1hbmQuY21kfSApYDtcbiAgICAgIH0pXG4gICAgICAuam9pbignICYgJyk7XG4gIH07XG5cbiAgZW5jb2RlID0gKCk6IHN0cmluZyA9PiB7XG4gICAgcmV0dXJuIGVuY29kZSh0aGlzLmNvbW1hbmRzKTtcbiAgfTtcblxuICBzdGF0aWMgZGVjb2RlID0gKGNvbmZpZzogc3RyaW5nKTogQ29tbWFuZHMgPT4ge1xuICAgIGNvbnN0IGNtZHM6IENvbW1hbmRbXSA9IGRlY29kZTxDb21tYW5kW10+KGNvbmZpZyk7XG4gICAgY29uc3QgY29tbWFuZHMgPSBuZXcgQ29tbWFuZHMoKTtcbiAgICBjbWRzLmZvckVhY2goKGNtZCkgPT4ge1xuICAgICAgY29tbWFuZHMuYWRkKGNtZCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbW1hbmRzO1xuICB9O1xufVxuXG5leHBvcnQgdHlwZSBQcm9qZWN0SnNvbiA9IHtcbiAgdHlwZTogJ2RvdG5ldCcgfCAnZ29sYW5nJyB8ICdub2RlJyB8ICdweXRob24nIHwgJ3J1c3QnIHwgJ3N0YW5kYWxvbmUnO1xuICBuYW1lPzogc3RyaW5nO1xuICB2ZXJzaW9uPzogc3RyaW5nO1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgbGljZW5zZT86IHN0cmluZztcbiAgc2NyaXB0cz86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG4gIGJpbj86IFByb2plY3RKc29uQmluO1xuICBmaWxlcz86IHN0cmluZ1tdO1xuICBkZXBlbmRlbmNpZXM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuICBkZXZEZXBlbmRlbmNpZXM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuICBzY2FmZm9sZGx5PzogUGFydGlhbDxJU2NhZmZvbGRseUNvbmZpZz47XG59O1xuXG5leHBvcnQgdHlwZSBSb3V0ZXMgPSB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB8IHVuZGVmaW5lZCB9O1xuZXhwb3J0IHR5cGUgU2NyaXB0cyA9IHsgW2tleSBpbiBTY3JpcHRdPzogc3RyaW5nIH07XG5leHBvcnQgdHlwZSBTY2hlZHVsZXMgPSB7IFtrZXkgaW4gU2NoZWR1bGVdPzogc3RyaW5nIH07XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNjYWZmb2xkbHlDb25maWcgZXh0ZW5kcyBJU2VydmljZUNvbmZpZyB7XG4gIC8vIFN1cHBvcnRlZCBpbiB0b3AgbGV2ZWwgYW5kIHNlcnZpY2UgbGV2ZWw6XG4gIGdldCBpZCgpOiBzdHJpbmc7XG4gIGdldCBuYW1lKCk6IHN0cmluZztcbiAgZ2V0IHJ1bnRpbWUoKTogc3RyaW5nO1xuICBnZXQgaGFuZGxlcigpOiBzdHJpbmc7XG4gIGdldCBiaW4oKTogUHJvamVjdEpzb25CaW47IC8vIEdldCBjb3BpZWQgdG8gd29ya2RpciByb290XG4gIGdldCBmaWxlcygpOiBzdHJpbmdbXTsgLy8gR2V0IGNvcGllZCB0byB3b3JrZGlyL3tmaWxlfSBkdXJpbmcgYnVpbGQgYW5kIHNlcnZlXG4gIGdldCBzcmMoKTogc3RyaW5nOyAvLyBEZWZhdWx0cyB0byBcIi5cIlxuICBnZXQgcGFja2FnZXMoKTogc3RyaW5nW107XG4gIGdldCBzaGVsbCgpOiBTaGVsbCB8IHVuZGVmaW5lZDtcbiAgZ2V0IHNjcmlwdHMoKTogU2NyaXB0cztcbiAgZ2V0IHNjaGVkdWxlcygpOiBTY2hlZHVsZXM7XG5cbiAgLy8gVG9wIGxldmVsIGNvbmZpZ3VyYXRpb24gb25seTpcbiAgZ2V0IHZlcnNpb24oKTogc3RyaW5nO1xuICBnZXQgdGFza2RpcigpOiBzdHJpbmc7IC8vIERlZmF1bHRzIHRvIC92YXIvdGFza1xuICBnZXQgc2VydmljZXMoKTogUGFydGlhbDxJU2VydmljZUNvbmZpZz5bXTtcbiAgZ2V0IHJvdXRlcygpOiBSb3V0ZXM7XG4gIGdldCByZXNvdXJjZXMoKTogc3RyaW5nW107XG4gIGdldCB0aW1lb3V0KCk6IG51bWJlcjtcbiAgZ2V0IG1lbW9yeVNpemUoKTogbnVtYmVyO1xuICBnZXQgZ2VuZXJhdGVkRmlsZXMoKTogc3RyaW5nW107XG4gIGdldCB1c2VyKCk6IHN0cmluZyB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IHR5cGUgU2VydmljZU5hbWUgPSBzdHJpbmc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNlcnZpY2VDb25maWcge1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBTZXJ2aWNlTmFtZTtcbiAgcnVudGltZTogc3RyaW5nO1xuICBoYW5kbGVyOiBzdHJpbmc7XG4gIGJpbj86IFByb2plY3RKc29uQmluO1xuICBmaWxlcz86IHN0cmluZ1tdO1xuICBzcmM6IHN0cmluZztcbiAgcGFja2FnZXM/OiBzdHJpbmdbXTtcbiAgc2hlbGw/OiBTaGVsbDtcbiAgc2NyaXB0czogeyBba2V5IGluIFNjcmlwdF0/OiBzdHJpbmcgfTtcbiAgc2NoZWR1bGVzOiB7IFtrZXkgaW4gU2NoZWR1bGVdPzogc3RyaW5nIH07XG59XG5cbmV4cG9ydCB0eXBlIFByb2plY3RKc29uQmluID0geyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcblxuZXhwb3J0IHR5cGUgU2NyaXB0ID0gJ3ByZXBhcmUnIHwgJ2RldicgfCAnaW5zdGFsbCcgfCAnYnVpbGQnIHwgJ3BhY2thZ2UnIHwgJ3N0YXJ0JztcblxuZXhwb3J0IHR5cGUgTW9kZSA9ICdkZXZlbG9wbWVudCcgfCAnZGVidWcnIHwgJ3Byb2R1Y3Rpb24nO1xuXG4vLyBERVZOT1RFOiBFZGl0IC5naXRodWIvcmVsZWFzZS55bWwgaWYgbW9yZSAnQC1zY2hlZHVsZXNgIGFyZSBhZGRlZFxuZXhwb3J0IHR5cGUgU2NoZWR1bGUgPSAnQGltbWVkaWF0ZWx5JyB8ICdAZnJlcXVlbnRseScgfCAnQGhvdXJseScgfCAnQGRhaWx5JztcblxuZXhwb3J0IGNsYXNzIFNjYWZmb2xkbHlDb25maWcgaW1wbGVtZW50cyBJU2NhZmZvbGRseUNvbmZpZyB7XG4gIHByb2plY3RKc29uPzogUHJvamVjdEpzb247XG5cbiAgc2NhZmZvbGRseTogUGFydGlhbDxJU2NhZmZvbGRseUNvbmZpZz47XG5cbiAgc2VydmljZUNvbmZpZz86IElTZXJ2aWNlQ29uZmlnO1xuXG4gIHByaXZhdGUgbW9kZTogTW9kZTtcblxuICBwcml2YXRlIF9pZCA9ICcnO1xuXG4gIHByaXZhdGUgX25hbWU6IHN0cmluZztcblxuICBwcml2YXRlIF92ZXJzaW9uOiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBfYmluOiBQcm9qZWN0SnNvbkJpbjtcblxuICBwcml2YXRlIF9maWxlczogc3RyaW5nW107XG5cbiAgcHJpdmF0ZSBfcGFja2FnZXM6IHN0cmluZ1tdO1xuXG4gIHByaXZhdGUgX2lnbm9yZUZpbHRlcj86IChwYXRobmFtZTogc3RyaW5nKSA9PiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBiYXNlRGlyOiBzdHJpbmcsXG4gICAgcHJpdmF0ZSB3b3JrRGlyOiBzdHJpbmcsXG4gICAgY29uZmlnczoge1xuICAgICAgcHJvamVjdEpzb24/OiBQcm9qZWN0SnNvbjtcbiAgICAgIHNlcnZpY2VDb25maWc/OiBJU2VydmljZUNvbmZpZztcbiAgICB9ID0ge30sXG4gICAgbW9kZTogTW9kZSA9ICdwcm9kdWN0aW9uJyxcbiAgKSB7XG4gICAgdGhpcy5tb2RlID0gbW9kZTtcblxuICAgIC8vIFRPRE8gU3VwcG9ydCBEZXZjb250YWluZXIgSlNPTiBhbmQgc2NhZmZvbGRseS5qc29uXG4gICAgY29uc3QgeyBwcm9qZWN0SnNvbjogcHJvamVjdEpzb24sIHNlcnZpY2VDb25maWcgfSA9IGNvbmZpZ3M7XG4gICAgdGhpcy5wcm9qZWN0SnNvbiA9IHByb2plY3RKc29uO1xuXG4gICAgaWYgKHByb2plY3RKc29uKSB7XG4gICAgICBjb25zdCB7IHNjYWZmb2xkbHkgPSB7fSwgbmFtZSA9ICd1bmtub3duJywgdmVyc2lvbiA9ICcwLjAuMC0wJyB9ID0gcHJvamVjdEpzb247XG4gICAgICB0aGlzLnNjYWZmb2xkbHkgPSBzY2FmZm9sZGx5O1xuICAgICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgICB0aGlzLl92ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgIHRoaXMuX2JpbiA9IHsgLi4uKHByb2plY3RKc29uLmJpbiB8fCB7fSksIC4uLihzY2FmZm9sZGx5LmJpbiB8fCB7fSkgfTtcbiAgICAgIHRoaXMuX2ZpbGVzID0gWy4uLihwcm9qZWN0SnNvbi5maWxlcyB8fCBbXSksIC4uLihzY2FmZm9sZGx5LmZpbGVzIHx8IFtdKV07XG4gICAgICB0aGlzLl9wYWNrYWdlcyA9IHNjYWZmb2xkbHkucGFja2FnZXMgfHwgW107XG5cbiAgICAgIGlmIChzZXJ2aWNlQ29uZmlnKSB7XG4gICAgICAgIC8vIFdlJ3JlIGluIGEgc3ViLXNlcnZpY2UsIGRvbid0IHB1bGwgaW4gIG5lc3RlZCBzZXJ2aWNlcyBvciByb3V0ZXNcbiAgICAgICAgdGhpcy5zY2FmZm9sZGx5ID0ge1xuICAgICAgICAgIC4uLnNjYWZmb2xkbHksXG4gICAgICAgICAgcnVudGltZTogc2VydmljZUNvbmZpZy5ydW50aW1lIHx8IHNjYWZmb2xkbHkucnVudGltZSxcbiAgICAgICAgICBzZXJ2aWNlczogW10sXG4gICAgICAgICAgcm91dGVzOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2VydmljZUNvbmZpZyA9IHNlcnZpY2VDb25maWc7XG4gICAgICAgIHRoaXMuX25hbWUgPSBzZXJ2aWNlQ29uZmlnLm5hbWU7XG4gICAgICAgIHRoaXMuX3BhY2thZ2VzID0gWy4uLihzZXJ2aWNlQ29uZmlnLnBhY2thZ2VzIHx8IFtdKV07XG4gICAgICAgIHRoaXMuX2ZpbGVzID0gWy4uLm5ldyBTZXQoWy4uLih0aGlzLl9maWxlcyB8fCBbXSksIC4uLihzZXJ2aWNlQ29uZmlnLmZpbGVzIHx8IFtdKV0pXTtcbiAgICAgICAgdGhpcy5fYmluID0ge1xuICAgICAgICAgIC4uLih0aGlzLl9iaW4gfHwge30pLFxuICAgICAgICAgIC4uLihzZXJ2aWNlQ29uZmlnLmJpbiB8fCB7fSksXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBjcmVhdGUgc2NhZmZvbGRseSBjb25maWcnKTtcbiAgfVxuXG4gIHNldCBpZChpZDogc3RyaW5nKSB7XG4gICAgdGhpcy5faWQgPSBpZDtcbiAgfVxuXG4gIGdldCBpZCgpOiBzdHJpbmcge1xuICAgIGNvbnN0IHsgX2lkOiBpZCB9ID0gdGhpcztcbiAgICBpZiAoIWlkKSB7XG4gICAgICByZXR1cm4gJyc7IC8vIEZvciB0cnV0aHkgY2hlY2tzXG4gICAgfVxuICAgIHJldHVybiBpZDtcbiAgfVxuXG4gIGdldCBuYW1lKCk6IFNlcnZpY2VOYW1lIHtcbiAgICBsZXQgbmFtZSA9IHRoaXMuc2VydmljZUNvbmZpZz8ubmFtZSB8fCB0aGlzLl9uYW1lIHx8ICd1bmtub3duLXNlcnZpY2UnO1xuXG4gICAgY29uc3QgcmUgPSAvW2EtejAtOV0rKD86Wy5fLV1bYS16MC05XSspKi87IC8vIEZyb20gRUNSIFJlZ2V4XG5cbiAgICBjb25zdCByZXBsYWNlZCA9IG5hbWUucmVwbGFjZSgvXFwvL2csICctJyk7XG4gICAgY29uc3Qgc2FuaXRpemVkID0gcmVwbGFjZWQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bXmEtejAtOS5fLV0vZywgJycpO1xuICAgIGNvbnN0IG1hdGNoZXMgPSBzYW5pdGl6ZWQubWF0Y2gocmUpO1xuXG4gICAgaWYgKCFtYXRjaGVzIHx8ICFtYXRjaGVzWzBdKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgc2VydmljZSBuYW1lOiAnJHtuYW1lfScgKHNhbml0aXplZDogJHtzYW5pdGl6ZWR9KWApO1xuICAgIH1cblxuICAgIG5hbWUgPSBtYXRjaGVzWzBdO1xuXG4gICAgY29uc3QgaWQgPSB0aGlzLnNlcnZpY2VDb25maWc/LmlkIHx8IHRoaXMuX2lkO1xuICAgIGlmIChpZCkge1xuICAgICAgbmFtZSA9IGAke25hbWV9LSR7aWR9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmFtZTtcbiAgfVxuXG4gIGdldCB2ZXJzaW9uKCk6IHN0cmluZyB7XG4gICAgY29uc3QgeyBfdmVyc2lvbjogdmVyc2lvbiB9ID0gdGhpcztcbiAgICByZXR1cm4gdmVyc2lvbjtcbiAgfVxuXG4gIGdldCBydW50aW1lKCk6IHN0cmluZyB7XG4gICAgY29uc3QgeyBydW50aW1lID0gJ2FscGluZTozJyB9ID0gdGhpcy5zZXJ2aWNlQ29uZmlnIHx8IHRoaXMuc2NhZmZvbGRseTtcbiAgICByZXR1cm4gcnVudGltZTtcbiAgfVxuXG4gIGdldCBoYW5kbGVyKCk6IHN0cmluZyB7XG4gICAgY29uc3QgeyBoYW5kbGVyID0gJ2xvY2FsaG9zdDozMDAwJyB9ID0gdGhpcy5zZXJ2aWNlQ29uZmlnIHx8IHRoaXMuc2NhZmZvbGRseTtcbiAgICByZXR1cm4gaGFuZGxlcjtcbiAgfVxuXG4gIGdldCBmaWxlcygpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgeyBfZmlsZXM6IGZpbGVzID0gW10gfSA9IHRoaXM7XG4gICAgcmV0dXJuIFsuLi5uZXcgU2V0KGZpbGVzKV07XG4gIH1cblxuICBnZXQgc3JjKCk6IHN0cmluZyB7XG4gICAgY29uc3QgeyBzcmMgPSBERUZBVUxUX1NSQ19ST09UIH0gPSB0aGlzLnNlcnZpY2VDb25maWcgfHwgdGhpcy5zY2FmZm9sZGx5O1xuICAgIHJldHVybiBzcmM7XG4gIH1cblxuICBnZXQgYmluKCk6IFByb2plY3RKc29uQmluIHtcbiAgICBjb25zdCB7IF9iaW46IGJpbiA9IHt9IH0gPSB0aGlzO1xuICAgIHJldHVybiBiaW47XG4gIH1cblxuICBnZXQgc2NyaXB0cygpOiB7IFtrZXkgaW4gU2NyaXB0XT86IHN0cmluZyB9IHtcbiAgICBjb25zdCB7IHNjcmlwdHMgPSB7fSB9ID0gdGhpcy5zZXJ2aWNlQ29uZmlnIHx8IHRoaXMuc2NhZmZvbGRseTtcbiAgICByZXR1cm4gc2NyaXB0cztcbiAgfVxuXG4gIGdldCBzZXJ2aWNlcygpOiBTY2FmZm9sZGx5Q29uZmlnW10ge1xuICAgIGNvbnN0IHsgc2VydmljZXMgPSBbXSB9ID0gdGhpcy5zY2FmZm9sZGx5O1xuICAgIHJldHVybiBzZXJ2aWNlcy5tYXAoKHNlcnZpY2UsIGl4KSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFNjYWZmb2xkbHlDb25maWcoXG4gICAgICAgIHRoaXMuYmFzZURpcixcbiAgICAgICAgdGhpcy53b3JrRGlyLFxuICAgICAgICB7XG4gICAgICAgICAgcHJvamVjdEpzb246IHRoaXMucHJvamVjdEpzb24sXG4gICAgICAgICAgc2VydmljZUNvbmZpZzoge1xuICAgICAgICAgICAgaWQ6IHNlcnZpY2UuaWQgfHwgJycsXG4gICAgICAgICAgICBuYW1lOiBzZXJ2aWNlLm5hbWUgfHwgYCR7aXggKyAxfWAsXG4gICAgICAgICAgICBydW50aW1lOiBzZXJ2aWNlLnJ1bnRpbWUgfHwgdGhpcy5ydW50aW1lLFxuICAgICAgICAgICAgaGFuZGxlcjogc2VydmljZS5oYW5kbGVyIHx8IHRoaXMuaGFuZGxlcixcbiAgICAgICAgICAgIHNyYzogc2VydmljZS5zcmMgfHwgdGhpcy5zcmMsXG4gICAgICAgICAgICBmaWxlczogc2VydmljZS5maWxlcyB8fCBbXSxcbiAgICAgICAgICAgIGJpbjogc2VydmljZS5iaW4gfHwge30sXG4gICAgICAgICAgICBwYWNrYWdlczogc2VydmljZS5wYWNrYWdlcyB8fCBbXSxcbiAgICAgICAgICAgIHNoZWxsOiBzZXJ2aWNlLnNoZWxsLFxuICAgICAgICAgICAgc2NyaXB0czogc2VydmljZS5zY3JpcHRzIHx8IHt9LFxuICAgICAgICAgICAgc2NoZWR1bGVzOiBzZXJ2aWNlLnNjaGVkdWxlcyB8fCB7fSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLm1vZGUsXG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0IHJvdXRlcygpOiBSb3V0ZXMge1xuICAgIGxldCB7IHJvdXRlcyB9ID0gdGhpcy5zY2FmZm9sZGx5O1xuICAgIGlmICghcm91dGVzKSB7XG4gICAgICByb3V0ZXMgPSB7fTtcbiAgICB9XG4gICAgaWYgKCFyb3V0ZXNbREVGQVVMVF9ST1VURV0pIHtcbiAgICAgIHJvdXRlc1tERUZBVUxUX1JPVVRFXSA9IHRoaXMuaGFuZGxlcjtcbiAgICB9XG4gICAgcmV0dXJuIHJvdXRlcztcbiAgfVxuXG4gIGdldCBpbnN0YWxsQ29tbWFuZHMoKTogQ29tbWFuZHMge1xuICAgIGNvbnN0IHNjcmlwdDogU2NyaXB0ID0gJ2luc3RhbGwnO1xuXG4gICAgY29uc3QgY21kcyA9IG5ldyBDb21tYW5kcygpO1xuICAgIGxldCB3b3JrZGlyID0gdGhpcy5zcmMgIT09IERFRkFVTFRfU1JDX1JPT1QgPyB0aGlzLnNyYyA6IHVuZGVmaW5lZDtcblxuICAgIGlmICh0aGlzLnNjcmlwdHNbc2NyaXB0XSkge1xuICAgICAgY21kcy5hZGQoe1xuICAgICAgICBjbWQ6IHRoaXMuc2NyaXB0c1tzY3JpcHRdLFxuICAgICAgICB3b3JrZGlyLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXJ2aWNlcy5mb3JFYWNoKChzZXJ2aWNlKSA9PiB7XG4gICAgICB3b3JrZGlyID0gc2VydmljZS5zcmMgIT09IERFRkFVTFRfU1JDX1JPT1QgPyBzZXJ2aWNlLnNyYyA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHNlcnZpY2Uuc2NyaXB0c1tzY3JpcHRdKSB7XG4gICAgICAgIGNtZHMuYWRkKHtcbiAgICAgICAgICBjbWQ6IHNlcnZpY2Uuc2NyaXB0c1tzY3JpcHRdLFxuICAgICAgICAgIHdvcmtkaXIsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNtZHM7XG4gIH1cblxuICBnZXQgc2VydmVDb21tYW5kcygpOiBDb21tYW5kcyB7XG4gICAgY29uc3Qgc2NyaXB0OiBTY3JpcHQgPSB0aGlzLm1vZGUgPT09ICdkZXZlbG9wbWVudCcgPyAnZGV2JyA6ICdzdGFydCc7XG5cbiAgICBjb25zdCBjbWRzID0gbmV3IENvbW1hbmRzKCk7XG4gICAgbGV0IHdvcmtkaXIgPSB0aGlzLnNyYyAhPT0gREVGQVVMVF9TUkNfUk9PVCA/IHRoaXMuc3JjIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKHRoaXMuc2NyaXB0c1tzY3JpcHRdKSB7XG4gICAgICBjbWRzLmFkZCh7XG4gICAgICAgIGNtZDogdGhpcy5zY3JpcHRzW3NjcmlwdF0sXG4gICAgICAgIHdvcmtkaXIsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBPYmplY3QuZW50cmllcyh0aGlzLnNjaGVkdWxlcykuZm9yRWFjaCgoW3NjaGVkdWxlLCBjbWRdKSA9PiB7XG4gICAgICBjbWRzLmFkZCh7XG4gICAgICAgIGNtZCxcbiAgICAgICAgd29ya2RpcixcbiAgICAgICAgc2NoZWR1bGU6IHNjaGVkdWxlIGFzIFNjaGVkdWxlLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnNlcnZpY2VzLmZvckVhY2goKHNlcnZpY2UpID0+IHtcbiAgICAgIHdvcmtkaXIgPSBzZXJ2aWNlLnNyYyAhPT0gREVGQVVMVF9TUkNfUk9PVCA/IHNlcnZpY2Uuc3JjIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoc2VydmljZS5zY3JpcHRzW3NjcmlwdF0pIHtcbiAgICAgICAgY21kcy5hZGQoe1xuICAgICAgICAgIGNtZDogc2VydmljZS5zY3JpcHRzW3NjcmlwdF0sXG4gICAgICAgICAgd29ya2RpcixcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5lbnRyaWVzKHNlcnZpY2Uuc2NoZWR1bGVzKS5mb3JFYWNoKChbc2NoZWR1bGUsIGNtZF0pID0+IHtcbiAgICAgICAgY21kcy5hZGQoe1xuICAgICAgICAgIGNtZCxcbiAgICAgICAgICB3b3JrZGlyLFxuICAgICAgICAgIHNjaGVkdWxlOiBzY2hlZHVsZSBhcyBTY2hlZHVsZSxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBjbWRzO1xuICB9XG5cbiAgZ2V0IHJvb3RkaXIoKTogc3RyaW5nIHtcbiAgICBsZXQgeyB0YXNrZGlyIH0gPSB0aGlzLnNjYWZmb2xkbHk7XG4gICAgaWYgKCF0YXNrZGlyKSB7XG4gICAgICB0YXNrZGlyID0gREVGQVVMVF9UQVNLRElSO1xuICAgIH1cbiAgICByZXR1cm4gdGFza2RpcjtcbiAgfVxuXG4gIGdldCB0YXNrZGlyKCk6IHN0cmluZyB7XG4gICAgY29uc3QgeyByb290ZGlyIH0gPSB0aGlzO1xuICAgIGNvbnN0IHRhc2tkaXIgPSBqb2luKHJvb3RkaXIsIHJlbGF0aXZlKHRoaXMuYmFzZURpciwgam9pbih0aGlzLndvcmtEaXIpKSk7XG4gICAgcmV0dXJuIHRhc2tkaXI7XG4gIH1cblxuICBnZXQgcGFja2FnZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLl9wYWNrYWdlcyB8fCBbXTtcbiAgfVxuXG4gIGdldCBzaGVsbCgpOiBTaGVsbCB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgeyBzaGVsbCB9ID0gdGhpcy5zZXJ2aWNlQ29uZmlnIHx8IHRoaXMuc2NhZmZvbGRseTtcbiAgICByZXR1cm4gc2hlbGw7XG4gIH1cblxuICBnZXQgc2NoZWR1bGVzKCk6IHsgW2tleSBpbiBTY2hlZHVsZV0/OiBzdHJpbmcgfSB7XG4gICAgY29uc3QgeyBzY2hlZHVsZXMgPSB7fSB9ID0gdGhpcy5zZXJ2aWNlQ29uZmlnIHx8IHRoaXMuc2NhZmZvbGRseTtcbiAgICByZXR1cm4gc2NoZWR1bGVzO1xuICB9XG5cbiAgZ2V0IHJlc291cmNlcygpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgeyByZXNvdXJjZXMgPSBbXSB9ID0gdGhpcy5zY2FmZm9sZGx5O1xuICAgIHJldHVybiByZXNvdXJjZXM7XG4gIH1cblxuICBnZXQgcnVudGltZXMoKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IHJ1bnRpbWVzID0gW1xuICAgICAgQ09ORklHX1NJR05BVFVSRSwgLy8gQWx3YXlzIHB1bGwgdGhlIHNjYWZmb2xkbHkgY29udGFpbmVyXG4gICAgICB0aGlzLnJ1bnRpbWUsXG4gICAgICAuLi50aGlzLnNlcnZpY2VzLm1hcCgoc2VydmljZSkgPT4gc2VydmljZS5ydW50aW1lKSxcbiAgICBdO1xuICAgIHJldHVybiBbLi4ubmV3IFNldChydW50aW1lcyldO1xuICB9XG5cbiAgZ2V0IHRpbWVvdXQoKTogbnVtYmVyIHtcbiAgICBjb25zdCB7IHRpbWVvdXQgPSA5MDAgfSA9IHRoaXMuc2NhZmZvbGRseTtcbiAgICByZXR1cm4gdGltZW91dDtcbiAgfVxuXG4gIGdldCBtZW1vcnlTaXplKCk6IG51bWJlciB7XG4gICAgY29uc3QgeyBtZW1vcnlTaXplID0gMTAyNCB9ID0gdGhpcy5zY2FmZm9sZGx5O1xuICAgIHJldHVybiBtZW1vcnlTaXplO1xuICB9XG5cbiAgZ2V0IGlnbm9yZUZpbHRlcigpOiAocGF0aG5hbWU6IHN0cmluZykgPT4gYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuX2lnbm9yZUZpbHRlcikge1xuICAgICAgcmV0dXJuIHRoaXMuX2lnbm9yZUZpbHRlcjtcbiAgICB9XG5cbiAgICBjb25zdCBpZyA9IGlnbm9yZSgpO1xuICAgIFsnLmdpdGlnbm9yZScsICcuZG9ja2VyaWdub3JlJ10ubWFwKChmaWxlbmFtZSkgPT4ge1xuICAgICAgLy8gU2VhcmNoIGZvciAuZ2l0aWdub3JlLy5kb2NrZXJpZ25vcmUgaW4gdGhlIGJhc2VEaXIgYW5kIHdvcmtEaXIgYW5kIHdvcmtEaXIrc3JjXG4gICAgICBbXG4gICAgICAgIGpvaW4odGhpcy5iYXNlRGlyLCBmaWxlbmFtZSksXG4gICAgICAgIGpvaW4odGhpcy53b3JrRGlyLCBmaWxlbmFtZSksXG4gICAgICAgIGpvaW4odGhpcy53b3JrRGlyLCB0aGlzLnNyYywgZmlsZW5hbWUpLFxuICAgICAgXS5mb3JFYWNoKChmaWxlKSA9PiB7XG4gICAgICAgIGlmIChleGlzdHNTeW5jKGZpbGUpKSB7XG4gICAgICAgICAgaWcuYWRkKHJlYWRGaWxlU3luYyhmaWxlKS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9pZ25vcmVGaWx0ZXIgPSBpZy5jcmVhdGVGaWx0ZXIoKTtcbiAgICByZXR1cm4gdGhpcy5faWdub3JlRmlsdGVyO1xuICB9XG5cbiAgZ2V0IGlnbm9yZWRGaWxlcygpOiBzdHJpbmdbXSB7XG4gICAgY29uc3Qgc3JjID0gam9pbih0aGlzLndvcmtEaXIsIHRoaXMuc3JjKTtcbiAgICBjb25zdCBmaWxlcyA9IHJlYWRkaXJTeW5jKHNyYykuZmlsdGVyKChwYXRoKSA9PiB7XG4gICAgICBjb25zdCByZWxhdGl2ZVBhdGggPSByZWxhdGl2ZSh0aGlzLndvcmtEaXIsIHBhdGgpO1xuICAgICAgcmV0dXJuICF0aGlzLmlnbm9yZUZpbHRlcihyZWxhdGl2ZVBhdGgpO1xuICAgIH0pO1xuICAgIHJldHVybiBmaWxlcztcbiAgfVxuXG4gIGdldCBnZW5lcmF0ZWRGaWxlcygpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgeyBnZW5lcmF0ZWRGaWxlcyA9IFtdIH0gPSB0aGlzLnNjYWZmb2xkbHk7XG4gICAgcmV0dXJuIGdlbmVyYXRlZEZpbGVzO1xuICB9XG5cbiAgZ2V0IHVzZXIoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCB7IHVzZXIgfSA9IHRoaXMuc2NhZmZvbGRseTtcbiAgICByZXR1cm4gdXNlcjtcbiAgfVxufVxuIiwgIlxuLyohIGpzLXlhbWwgNC4xLjAgaHR0cHM6Ly9naXRodWIuY29tL25vZGVjYS9qcy15YW1sIEBsaWNlbnNlIE1JVCAqL1xuZnVuY3Rpb24gaXNOb3RoaW5nKHN1YmplY3QpIHtcbiAgcmV0dXJuICh0eXBlb2Ygc3ViamVjdCA9PT0gJ3VuZGVmaW5lZCcpIHx8IChzdWJqZWN0ID09PSBudWxsKTtcbn1cblxuXG5mdW5jdGlvbiBpc09iamVjdChzdWJqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIHN1YmplY3QgPT09ICdvYmplY3QnKSAmJiAoc3ViamVjdCAhPT0gbnVsbCk7XG59XG5cblxuZnVuY3Rpb24gdG9BcnJheShzZXF1ZW5jZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShzZXF1ZW5jZSkpIHJldHVybiBzZXF1ZW5jZTtcbiAgZWxzZSBpZiAoaXNOb3RoaW5nKHNlcXVlbmNlKSkgcmV0dXJuIFtdO1xuXG4gIHJldHVybiBbIHNlcXVlbmNlIF07XG59XG5cblxuZnVuY3Rpb24gZXh0ZW5kKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBpbmRleCwgbGVuZ3RoLCBrZXksIHNvdXJjZUtleXM7XG5cbiAgaWYgKHNvdXJjZSkge1xuICAgIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IHNvdXJjZUtleXMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgICAga2V5ID0gc291cmNlS2V5c1tpbmRleF07XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cblxuZnVuY3Rpb24gcmVwZWF0KHN0cmluZywgY291bnQpIHtcbiAgdmFyIHJlc3VsdCA9ICcnLCBjeWNsZTtcblxuICBmb3IgKGN5Y2xlID0gMDsgY3ljbGUgPCBjb3VudDsgY3ljbGUgKz0gMSkge1xuICAgIHJlc3VsdCArPSBzdHJpbmc7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5cbmZ1bmN0aW9uIGlzTmVnYXRpdmVaZXJvKG51bWJlcikge1xuICByZXR1cm4gKG51bWJlciA9PT0gMCkgJiYgKE51bWJlci5ORUdBVElWRV9JTkZJTklUWSA9PT0gMSAvIG51bWJlcik7XG59XG5cblxudmFyIGlzTm90aGluZ18xICAgICAgPSBpc05vdGhpbmc7XG52YXIgaXNPYmplY3RfMSAgICAgICA9IGlzT2JqZWN0O1xudmFyIHRvQXJyYXlfMSAgICAgICAgPSB0b0FycmF5O1xudmFyIHJlcGVhdF8xICAgICAgICAgPSByZXBlYXQ7XG52YXIgaXNOZWdhdGl2ZVplcm9fMSA9IGlzTmVnYXRpdmVaZXJvO1xudmFyIGV4dGVuZF8xICAgICAgICAgPSBleHRlbmQ7XG5cbnZhciBjb21tb24gPSB7XG5cdGlzTm90aGluZzogaXNOb3RoaW5nXzEsXG5cdGlzT2JqZWN0OiBpc09iamVjdF8xLFxuXHR0b0FycmF5OiB0b0FycmF5XzEsXG5cdHJlcGVhdDogcmVwZWF0XzEsXG5cdGlzTmVnYXRpdmVaZXJvOiBpc05lZ2F0aXZlWmVyb18xLFxuXHRleHRlbmQ6IGV4dGVuZF8xXG59O1xuXG4vLyBZQU1MIGVycm9yIGNsYXNzLiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzg0NTg5ODRcblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcihleGNlcHRpb24sIGNvbXBhY3QpIHtcbiAgdmFyIHdoZXJlID0gJycsIG1lc3NhZ2UgPSBleGNlcHRpb24ucmVhc29uIHx8ICcodW5rbm93biByZWFzb24pJztcblxuICBpZiAoIWV4Y2VwdGlvbi5tYXJrKSByZXR1cm4gbWVzc2FnZTtcblxuICBpZiAoZXhjZXB0aW9uLm1hcmsubmFtZSkge1xuICAgIHdoZXJlICs9ICdpbiBcIicgKyBleGNlcHRpb24ubWFyay5uYW1lICsgJ1wiICc7XG4gIH1cblxuICB3aGVyZSArPSAnKCcgKyAoZXhjZXB0aW9uLm1hcmsubGluZSArIDEpICsgJzonICsgKGV4Y2VwdGlvbi5tYXJrLmNvbHVtbiArIDEpICsgJyknO1xuXG4gIGlmICghY29tcGFjdCAmJiBleGNlcHRpb24ubWFyay5zbmlwcGV0KSB7XG4gICAgd2hlcmUgKz0gJ1xcblxcbicgKyBleGNlcHRpb24ubWFyay5zbmlwcGV0O1xuICB9XG5cbiAgcmV0dXJuIG1lc3NhZ2UgKyAnICcgKyB3aGVyZTtcbn1cblxuXG5mdW5jdGlvbiBZQU1MRXhjZXB0aW9uJDEocmVhc29uLCBtYXJrKSB7XG4gIC8vIFN1cGVyIGNvbnN0cnVjdG9yXG4gIEVycm9yLmNhbGwodGhpcyk7XG5cbiAgdGhpcy5uYW1lID0gJ1lBTUxFeGNlcHRpb24nO1xuICB0aGlzLnJlYXNvbiA9IHJlYXNvbjtcbiAgdGhpcy5tYXJrID0gbWFyaztcbiAgdGhpcy5tZXNzYWdlID0gZm9ybWF0RXJyb3IodGhpcywgZmFsc2UpO1xuXG4gIC8vIEluY2x1ZGUgc3RhY2sgdHJhY2UgaW4gZXJyb3Igb2JqZWN0XG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIC8vIENocm9tZSBhbmQgTm9kZUpTXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSB7XG4gICAgLy8gRkYsIElFIDEwKyBhbmQgU2FmYXJpIDYrLiBGYWxsYmFjayBmb3Igb3RoZXJzXG4gICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IoKSkuc3RhY2sgfHwgJyc7XG4gIH1cbn1cblxuXG4vLyBJbmhlcml0IGZyb20gRXJyb3JcbllBTUxFeGNlcHRpb24kMS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5ZQU1MRXhjZXB0aW9uJDEucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gWUFNTEV4Y2VwdGlvbiQxO1xuXG5cbllBTUxFeGNlcHRpb24kMS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhjb21wYWN0KSB7XG4gIHJldHVybiB0aGlzLm5hbWUgKyAnOiAnICsgZm9ybWF0RXJyb3IodGhpcywgY29tcGFjdCk7XG59O1xuXG5cbnZhciBleGNlcHRpb24gPSBZQU1MRXhjZXB0aW9uJDE7XG5cbi8vIGdldCBzbmlwcGV0IGZvciBhIHNpbmdsZSBsaW5lLCByZXNwZWN0aW5nIG1heExlbmd0aFxuZnVuY3Rpb24gZ2V0TGluZShidWZmZXIsIGxpbmVTdGFydCwgbGluZUVuZCwgcG9zaXRpb24sIG1heExpbmVMZW5ndGgpIHtcbiAgdmFyIGhlYWQgPSAnJztcbiAgdmFyIHRhaWwgPSAnJztcbiAgdmFyIG1heEhhbGZMZW5ndGggPSBNYXRoLmZsb29yKG1heExpbmVMZW5ndGggLyAyKSAtIDE7XG5cbiAgaWYgKHBvc2l0aW9uIC0gbGluZVN0YXJ0ID4gbWF4SGFsZkxlbmd0aCkge1xuICAgIGhlYWQgPSAnIC4uLiAnO1xuICAgIGxpbmVTdGFydCA9IHBvc2l0aW9uIC0gbWF4SGFsZkxlbmd0aCArIGhlYWQubGVuZ3RoO1xuICB9XG5cbiAgaWYgKGxpbmVFbmQgLSBwb3NpdGlvbiA+IG1heEhhbGZMZW5ndGgpIHtcbiAgICB0YWlsID0gJyAuLi4nO1xuICAgIGxpbmVFbmQgPSBwb3NpdGlvbiArIG1heEhhbGZMZW5ndGggLSB0YWlsLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3RyOiBoZWFkICsgYnVmZmVyLnNsaWNlKGxpbmVTdGFydCwgbGluZUVuZCkucmVwbGFjZSgvXFx0L2csICdcdTIxOTInKSArIHRhaWwsXG4gICAgcG9zOiBwb3NpdGlvbiAtIGxpbmVTdGFydCArIGhlYWQubGVuZ3RoIC8vIHJlbGF0aXZlIHBvc2l0aW9uXG4gIH07XG59XG5cblxuZnVuY3Rpb24gcGFkU3RhcnQoc3RyaW5nLCBtYXgpIHtcbiAgcmV0dXJuIGNvbW1vbi5yZXBlYXQoJyAnLCBtYXggLSBzdHJpbmcubGVuZ3RoKSArIHN0cmluZztcbn1cblxuXG5mdW5jdGlvbiBtYWtlU25pcHBldChtYXJrLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG9wdGlvbnMgfHwgbnVsbCk7XG5cbiAgaWYgKCFtYXJrLmJ1ZmZlcikgcmV0dXJuIG51bGw7XG5cbiAgaWYgKCFvcHRpb25zLm1heExlbmd0aCkgb3B0aW9ucy5tYXhMZW5ndGggPSA3OTtcbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluZGVudCAgICAgICE9PSAnbnVtYmVyJykgb3B0aW9ucy5pbmRlbnQgICAgICA9IDE7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5saW5lc0JlZm9yZSAhPT0gJ251bWJlcicpIG9wdGlvbnMubGluZXNCZWZvcmUgPSAzO1xuICBpZiAodHlwZW9mIG9wdGlvbnMubGluZXNBZnRlciAgIT09ICdudW1iZXInKSBvcHRpb25zLmxpbmVzQWZ0ZXIgID0gMjtcblxuICB2YXIgcmUgPSAvXFxyP1xcbnxcXHJ8XFwwL2c7XG4gIHZhciBsaW5lU3RhcnRzID0gWyAwIF07XG4gIHZhciBsaW5lRW5kcyA9IFtdO1xuICB2YXIgbWF0Y2g7XG4gIHZhciBmb3VuZExpbmVObyA9IC0xO1xuXG4gIHdoaWxlICgobWF0Y2ggPSByZS5leGVjKG1hcmsuYnVmZmVyKSkpIHtcbiAgICBsaW5lRW5kcy5wdXNoKG1hdGNoLmluZGV4KTtcbiAgICBsaW5lU3RhcnRzLnB1c2gobWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGgpO1xuXG4gICAgaWYgKG1hcmsucG9zaXRpb24gPD0gbWF0Y2guaW5kZXggJiYgZm91bmRMaW5lTm8gPCAwKSB7XG4gICAgICBmb3VuZExpbmVObyA9IGxpbmVTdGFydHMubGVuZ3RoIC0gMjtcbiAgICB9XG4gIH1cblxuICBpZiAoZm91bmRMaW5lTm8gPCAwKSBmb3VuZExpbmVObyA9IGxpbmVTdGFydHMubGVuZ3RoIC0gMTtcblxuICB2YXIgcmVzdWx0ID0gJycsIGksIGxpbmU7XG4gIHZhciBsaW5lTm9MZW5ndGggPSBNYXRoLm1pbihtYXJrLmxpbmUgKyBvcHRpb25zLmxpbmVzQWZ0ZXIsIGxpbmVFbmRzLmxlbmd0aCkudG9TdHJpbmcoKS5sZW5ndGg7XG4gIHZhciBtYXhMaW5lTGVuZ3RoID0gb3B0aW9ucy5tYXhMZW5ndGggLSAob3B0aW9ucy5pbmRlbnQgKyBsaW5lTm9MZW5ndGggKyAzKTtcblxuICBmb3IgKGkgPSAxOyBpIDw9IG9wdGlvbnMubGluZXNCZWZvcmU7IGkrKykge1xuICAgIGlmIChmb3VuZExpbmVObyAtIGkgPCAwKSBicmVhaztcbiAgICBsaW5lID0gZ2V0TGluZShcbiAgICAgIG1hcmsuYnVmZmVyLFxuICAgICAgbGluZVN0YXJ0c1tmb3VuZExpbmVObyAtIGldLFxuICAgICAgbGluZUVuZHNbZm91bmRMaW5lTm8gLSBpXSxcbiAgICAgIG1hcmsucG9zaXRpb24gLSAobGluZVN0YXJ0c1tmb3VuZExpbmVOb10gLSBsaW5lU3RhcnRzW2ZvdW5kTGluZU5vIC0gaV0pLFxuICAgICAgbWF4TGluZUxlbmd0aFxuICAgICk7XG4gICAgcmVzdWx0ID0gY29tbW9uLnJlcGVhdCgnICcsIG9wdGlvbnMuaW5kZW50KSArIHBhZFN0YXJ0KChtYXJrLmxpbmUgLSBpICsgMSkudG9TdHJpbmcoKSwgbGluZU5vTGVuZ3RoKSArXG4gICAgICAnIHwgJyArIGxpbmUuc3RyICsgJ1xcbicgKyByZXN1bHQ7XG4gIH1cblxuICBsaW5lID0gZ2V0TGluZShtYXJrLmJ1ZmZlciwgbGluZVN0YXJ0c1tmb3VuZExpbmVOb10sIGxpbmVFbmRzW2ZvdW5kTGluZU5vXSwgbWFyay5wb3NpdGlvbiwgbWF4TGluZUxlbmd0aCk7XG4gIHJlc3VsdCArPSBjb21tb24ucmVwZWF0KCcgJywgb3B0aW9ucy5pbmRlbnQpICsgcGFkU3RhcnQoKG1hcmsubGluZSArIDEpLnRvU3RyaW5nKCksIGxpbmVOb0xlbmd0aCkgK1xuICAgICcgfCAnICsgbGluZS5zdHIgKyAnXFxuJztcbiAgcmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoJy0nLCBvcHRpb25zLmluZGVudCArIGxpbmVOb0xlbmd0aCArIDMgKyBsaW5lLnBvcykgKyAnXicgKyAnXFxuJztcblxuICBmb3IgKGkgPSAxOyBpIDw9IG9wdGlvbnMubGluZXNBZnRlcjsgaSsrKSB7XG4gICAgaWYgKGZvdW5kTGluZU5vICsgaSA+PSBsaW5lRW5kcy5sZW5ndGgpIGJyZWFrO1xuICAgIGxpbmUgPSBnZXRMaW5lKFxuICAgICAgbWFyay5idWZmZXIsXG4gICAgICBsaW5lU3RhcnRzW2ZvdW5kTGluZU5vICsgaV0sXG4gICAgICBsaW5lRW5kc1tmb3VuZExpbmVObyArIGldLFxuICAgICAgbWFyay5wb3NpdGlvbiAtIChsaW5lU3RhcnRzW2ZvdW5kTGluZU5vXSAtIGxpbmVTdGFydHNbZm91bmRMaW5lTm8gKyBpXSksXG4gICAgICBtYXhMaW5lTGVuZ3RoXG4gICAgKTtcbiAgICByZXN1bHQgKz0gY29tbW9uLnJlcGVhdCgnICcsIG9wdGlvbnMuaW5kZW50KSArIHBhZFN0YXJ0KChtYXJrLmxpbmUgKyBpICsgMSkudG9TdHJpbmcoKSwgbGluZU5vTGVuZ3RoKSArXG4gICAgICAnIHwgJyArIGxpbmUuc3RyICsgJ1xcbic7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0LnJlcGxhY2UoL1xcbiQvLCAnJyk7XG59XG5cblxudmFyIHNuaXBwZXQgPSBtYWtlU25pcHBldDtcblxudmFyIFRZUEVfQ09OU1RSVUNUT1JfT1BUSU9OUyA9IFtcbiAgJ2tpbmQnLFxuICAnbXVsdGknLFxuICAncmVzb2x2ZScsXG4gICdjb25zdHJ1Y3QnLFxuICAnaW5zdGFuY2VPZicsXG4gICdwcmVkaWNhdGUnLFxuICAncmVwcmVzZW50JyxcbiAgJ3JlcHJlc2VudE5hbWUnLFxuICAnZGVmYXVsdFN0eWxlJyxcbiAgJ3N0eWxlQWxpYXNlcydcbl07XG5cbnZhciBZQU1MX05PREVfS0lORFMgPSBbXG4gICdzY2FsYXInLFxuICAnc2VxdWVuY2UnLFxuICAnbWFwcGluZydcbl07XG5cbmZ1bmN0aW9uIGNvbXBpbGVTdHlsZUFsaWFzZXMobWFwKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcblxuICBpZiAobWFwICE9PSBudWxsKSB7XG4gICAgT2JqZWN0LmtleXMobWFwKS5mb3JFYWNoKGZ1bmN0aW9uIChzdHlsZSkge1xuICAgICAgbWFwW3N0eWxlXS5mb3JFYWNoKGZ1bmN0aW9uIChhbGlhcykge1xuICAgICAgICByZXN1bHRbU3RyaW5nKGFsaWFzKV0gPSBzdHlsZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gVHlwZSQxKHRhZywgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBPYmplY3Qua2V5cyhvcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKFRZUEVfQ09OU1RSVUNUT1JfT1BUSU9OUy5pbmRleE9mKG5hbWUpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbignVW5rbm93biBvcHRpb24gXCInICsgbmFtZSArICdcIiBpcyBtZXQgaW4gZGVmaW5pdGlvbiBvZiBcIicgKyB0YWcgKyAnXCIgWUFNTCB0eXBlLicpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gVE9ETzogQWRkIHRhZyBmb3JtYXQgY2hlY2suXG4gIHRoaXMub3B0aW9ucyAgICAgICA9IG9wdGlvbnM7IC8vIGtlZXAgb3JpZ2luYWwgb3B0aW9ucyBpbiBjYXNlIHVzZXIgd2FudHMgdG8gZXh0ZW5kIHRoaXMgdHlwZSBsYXRlclxuICB0aGlzLnRhZyAgICAgICAgICAgPSB0YWc7XG4gIHRoaXMua2luZCAgICAgICAgICA9IG9wdGlvbnNbJ2tpbmQnXSAgICAgICAgICB8fCBudWxsO1xuICB0aGlzLnJlc29sdmUgICAgICAgPSBvcHRpb25zWydyZXNvbHZlJ10gICAgICAgfHwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfTtcbiAgdGhpcy5jb25zdHJ1Y3QgICAgID0gb3B0aW9uc1snY29uc3RydWN0J10gICAgIHx8IGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBkYXRhOyB9O1xuICB0aGlzLmluc3RhbmNlT2YgICAgPSBvcHRpb25zWydpbnN0YW5jZU9mJ10gICAgfHwgbnVsbDtcbiAgdGhpcy5wcmVkaWNhdGUgICAgID0gb3B0aW9uc1sncHJlZGljYXRlJ10gICAgIHx8IG51bGw7XG4gIHRoaXMucmVwcmVzZW50ICAgICA9IG9wdGlvbnNbJ3JlcHJlc2VudCddICAgICB8fCBudWxsO1xuICB0aGlzLnJlcHJlc2VudE5hbWUgPSBvcHRpb25zWydyZXByZXNlbnROYW1lJ10gfHwgbnVsbDtcbiAgdGhpcy5kZWZhdWx0U3R5bGUgID0gb3B0aW9uc1snZGVmYXVsdFN0eWxlJ10gIHx8IG51bGw7XG4gIHRoaXMubXVsdGkgICAgICAgICA9IG9wdGlvbnNbJ211bHRpJ10gICAgICAgICB8fCBmYWxzZTtcbiAgdGhpcy5zdHlsZUFsaWFzZXMgID0gY29tcGlsZVN0eWxlQWxpYXNlcyhvcHRpb25zWydzdHlsZUFsaWFzZXMnXSB8fCBudWxsKTtcblxuICBpZiAoWUFNTF9OT0RFX0tJTkRTLmluZGV4T2YodGhpcy5raW5kKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgZXhjZXB0aW9uKCdVbmtub3duIGtpbmQgXCInICsgdGhpcy5raW5kICsgJ1wiIGlzIHNwZWNpZmllZCBmb3IgXCInICsgdGFnICsgJ1wiIFlBTUwgdHlwZS4nKTtcbiAgfVxufVxuXG52YXIgdHlwZSA9IFR5cGUkMTtcblxuLyplc2xpbnQtZGlzYWJsZSBtYXgtbGVuKi9cblxuXG5cblxuXG5mdW5jdGlvbiBjb21waWxlTGlzdChzY2hlbWEsIG5hbWUpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gIHNjaGVtYVtuYW1lXS5mb3JFYWNoKGZ1bmN0aW9uIChjdXJyZW50VHlwZSkge1xuICAgIHZhciBuZXdJbmRleCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICByZXN1bHQuZm9yRWFjaChmdW5jdGlvbiAocHJldmlvdXNUeXBlLCBwcmV2aW91c0luZGV4KSB7XG4gICAgICBpZiAocHJldmlvdXNUeXBlLnRhZyA9PT0gY3VycmVudFR5cGUudGFnICYmXG4gICAgICAgICAgcHJldmlvdXNUeXBlLmtpbmQgPT09IGN1cnJlbnRUeXBlLmtpbmQgJiZcbiAgICAgICAgICBwcmV2aW91c1R5cGUubXVsdGkgPT09IGN1cnJlbnRUeXBlLm11bHRpKSB7XG5cbiAgICAgICAgbmV3SW5kZXggPSBwcmV2aW91c0luZGV4O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmVzdWx0W25ld0luZGV4XSA9IGN1cnJlbnRUeXBlO1xuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5cbmZ1bmN0aW9uIGNvbXBpbGVNYXAoLyogbGlzdHMuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgc2NhbGFyOiB7fSxcbiAgICAgICAgc2VxdWVuY2U6IHt9LFxuICAgICAgICBtYXBwaW5nOiB7fSxcbiAgICAgICAgZmFsbGJhY2s6IHt9LFxuICAgICAgICBtdWx0aToge1xuICAgICAgICAgIHNjYWxhcjogW10sXG4gICAgICAgICAgc2VxdWVuY2U6IFtdLFxuICAgICAgICAgIG1hcHBpbmc6IFtdLFxuICAgICAgICAgIGZhbGxiYWNrOiBbXVxuICAgICAgICB9XG4gICAgICB9LCBpbmRleCwgbGVuZ3RoO1xuXG4gIGZ1bmN0aW9uIGNvbGxlY3RUeXBlKHR5cGUpIHtcbiAgICBpZiAodHlwZS5tdWx0aSkge1xuICAgICAgcmVzdWx0Lm11bHRpW3R5cGUua2luZF0ucHVzaCh0eXBlKTtcbiAgICAgIHJlc3VsdC5tdWx0aVsnZmFsbGJhY2snXS5wdXNoKHR5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRbdHlwZS5raW5kXVt0eXBlLnRhZ10gPSByZXN1bHRbJ2ZhbGxiYWNrJ11bdHlwZS50YWddID0gdHlwZTtcbiAgICB9XG4gIH1cblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBhcmd1bWVudHNbaW5kZXhdLmZvckVhY2goY29sbGVjdFR5cGUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cblxuZnVuY3Rpb24gU2NoZW1hJDEoZGVmaW5pdGlvbikge1xuICByZXR1cm4gdGhpcy5leHRlbmQoZGVmaW5pdGlvbik7XG59XG5cblxuU2NoZW1hJDEucHJvdG90eXBlLmV4dGVuZCA9IGZ1bmN0aW9uIGV4dGVuZChkZWZpbml0aW9uKSB7XG4gIHZhciBpbXBsaWNpdCA9IFtdO1xuICB2YXIgZXhwbGljaXQgPSBbXTtcblxuICBpZiAoZGVmaW5pdGlvbiBpbnN0YW5jZW9mIHR5cGUpIHtcbiAgICAvLyBTY2hlbWEuZXh0ZW5kKHR5cGUpXG4gICAgZXhwbGljaXQucHVzaChkZWZpbml0aW9uKTtcblxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGVmaW5pdGlvbikpIHtcbiAgICAvLyBTY2hlbWEuZXh0ZW5kKFsgdHlwZTEsIHR5cGUyLCAuLi4gXSlcbiAgICBleHBsaWNpdCA9IGV4cGxpY2l0LmNvbmNhdChkZWZpbml0aW9uKTtcblxuICB9IGVsc2UgaWYgKGRlZmluaXRpb24gJiYgKEFycmF5LmlzQXJyYXkoZGVmaW5pdGlvbi5pbXBsaWNpdCkgfHwgQXJyYXkuaXNBcnJheShkZWZpbml0aW9uLmV4cGxpY2l0KSkpIHtcbiAgICAvLyBTY2hlbWEuZXh0ZW5kKHsgZXhwbGljaXQ6IFsgdHlwZTEsIHR5cGUyLCAuLi4gXSwgaW1wbGljaXQ6IFsgdHlwZTEsIHR5cGUyLCAuLi4gXSB9KVxuICAgIGlmIChkZWZpbml0aW9uLmltcGxpY2l0KSBpbXBsaWNpdCA9IGltcGxpY2l0LmNvbmNhdChkZWZpbml0aW9uLmltcGxpY2l0KTtcbiAgICBpZiAoZGVmaW5pdGlvbi5leHBsaWNpdCkgZXhwbGljaXQgPSBleHBsaWNpdC5jb25jYXQoZGVmaW5pdGlvbi5leHBsaWNpdCk7XG5cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgZXhjZXB0aW9uKCdTY2hlbWEuZXh0ZW5kIGFyZ3VtZW50IHNob3VsZCBiZSBhIFR5cGUsIFsgVHlwZSBdLCAnICtcbiAgICAgICdvciBhIHNjaGVtYSBkZWZpbml0aW9uICh7IGltcGxpY2l0OiBbLi4uXSwgZXhwbGljaXQ6IFsuLi5dIH0pJyk7XG4gIH1cblxuICBpbXBsaWNpdC5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlJDEpIHtcbiAgICBpZiAoISh0eXBlJDEgaW5zdGFuY2VvZiB0eXBlKSkge1xuICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbignU3BlY2lmaWVkIGxpc3Qgb2YgWUFNTCB0eXBlcyAob3IgYSBzaW5nbGUgVHlwZSBvYmplY3QpIGNvbnRhaW5zIGEgbm9uLVR5cGUgb2JqZWN0LicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlJDEubG9hZEtpbmQgJiYgdHlwZSQxLmxvYWRLaW5kICE9PSAnc2NhbGFyJykge1xuICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbignVGhlcmUgaXMgYSBub24tc2NhbGFyIHR5cGUgaW4gdGhlIGltcGxpY2l0IGxpc3Qgb2YgYSBzY2hlbWEuIEltcGxpY2l0IHJlc29sdmluZyBvZiBzdWNoIHR5cGVzIGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGUkMS5tdWx0aSkge1xuICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbignVGhlcmUgaXMgYSBtdWx0aSB0eXBlIGluIHRoZSBpbXBsaWNpdCBsaXN0IG9mIGEgc2NoZW1hLiBNdWx0aSB0YWdzIGNhbiBvbmx5IGJlIGxpc3RlZCBhcyBleHBsaWNpdC4nKTtcbiAgICB9XG4gIH0pO1xuXG4gIGV4cGxpY2l0LmZvckVhY2goZnVuY3Rpb24gKHR5cGUkMSkge1xuICAgIGlmICghKHR5cGUkMSBpbnN0YW5jZW9mIHR5cGUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uKCdTcGVjaWZpZWQgbGlzdCBvZiBZQU1MIHR5cGVzIChvciBhIHNpbmdsZSBUeXBlIG9iamVjdCkgY29udGFpbnMgYSBub24tVHlwZSBvYmplY3QuJyk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShTY2hlbWEkMS5wcm90b3R5cGUpO1xuXG4gIHJlc3VsdC5pbXBsaWNpdCA9ICh0aGlzLmltcGxpY2l0IHx8IFtdKS5jb25jYXQoaW1wbGljaXQpO1xuICByZXN1bHQuZXhwbGljaXQgPSAodGhpcy5leHBsaWNpdCB8fCBbXSkuY29uY2F0KGV4cGxpY2l0KTtcblxuICByZXN1bHQuY29tcGlsZWRJbXBsaWNpdCA9IGNvbXBpbGVMaXN0KHJlc3VsdCwgJ2ltcGxpY2l0Jyk7XG4gIHJlc3VsdC5jb21waWxlZEV4cGxpY2l0ID0gY29tcGlsZUxpc3QocmVzdWx0LCAnZXhwbGljaXQnKTtcbiAgcmVzdWx0LmNvbXBpbGVkVHlwZU1hcCAgPSBjb21waWxlTWFwKHJlc3VsdC5jb21waWxlZEltcGxpY2l0LCByZXN1bHQuY29tcGlsZWRFeHBsaWNpdCk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxudmFyIHNjaGVtYSA9IFNjaGVtYSQxO1xuXG52YXIgc3RyID0gbmV3IHR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOnN0cicsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkYXRhIDogJyc7IH1cbn0pO1xuXG52YXIgc2VxID0gbmV3IHR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOnNlcScsIHtcbiAga2luZDogJ3NlcXVlbmNlJyxcbiAgY29uc3RydWN0OiBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiBbXTsgfVxufSk7XG5cbnZhciBtYXAgPSBuZXcgdHlwZSgndGFnOnlhbWwub3JnLDIwMDI6bWFwJywge1xuICBraW5kOiAnbWFwcGluZycsXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkYXRhIDoge307IH1cbn0pO1xuXG52YXIgZmFpbHNhZmUgPSBuZXcgc2NoZW1hKHtcbiAgZXhwbGljaXQ6IFtcbiAgICBzdHIsXG4gICAgc2VxLFxuICAgIG1hcFxuICBdXG59KTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxOdWxsKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gIHZhciBtYXggPSBkYXRhLmxlbmd0aDtcblxuICByZXR1cm4gKG1heCA9PT0gMSAmJiBkYXRhID09PSAnficpIHx8XG4gICAgICAgICAobWF4ID09PSA0ICYmIChkYXRhID09PSAnbnVsbCcgfHwgZGF0YSA9PT0gJ051bGwnIHx8IGRhdGEgPT09ICdOVUxMJykpO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sTnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzTnVsbChvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdCA9PT0gbnVsbDtcbn1cblxudmFyIF9udWxsID0gbmV3IHR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOm51bGwnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbE51bGwsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbE51bGwsXG4gIHByZWRpY2F0ZTogaXNOdWxsLFxuICByZXByZXNlbnQ6IHtcbiAgICBjYW5vbmljYWw6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICd+JzsgICAgfSxcbiAgICBsb3dlcmNhc2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdudWxsJzsgfSxcbiAgICB1cHBlcmNhc2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdOVUxMJzsgfSxcbiAgICBjYW1lbGNhc2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdOdWxsJzsgfSxcbiAgICBlbXB0eTogICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuICcnOyAgICAgfVxuICB9LFxuICBkZWZhdWx0U3R5bGU6ICdsb3dlcmNhc2UnXG59KTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxCb29sZWFuKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICB2YXIgbWF4ID0gZGF0YS5sZW5ndGg7XG5cbiAgcmV0dXJuIChtYXggPT09IDQgJiYgKGRhdGEgPT09ICd0cnVlJyB8fCBkYXRhID09PSAnVHJ1ZScgfHwgZGF0YSA9PT0gJ1RSVUUnKSkgfHxcbiAgICAgICAgIChtYXggPT09IDUgJiYgKGRhdGEgPT09ICdmYWxzZScgfHwgZGF0YSA9PT0gJ0ZhbHNlJyB8fCBkYXRhID09PSAnRkFMU0UnKSk7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxCb29sZWFuKGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEgPT09ICd0cnVlJyB8fFxuICAgICAgICAgZGF0YSA9PT0gJ1RydWUnIHx8XG4gICAgICAgICBkYXRhID09PSAnVFJVRSc7XG59XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBCb29sZWFuXSc7XG59XG5cbnZhciBib29sID0gbmV3IHR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOmJvb2wnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbEJvb2xlYW4sXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbEJvb2xlYW4sXG4gIHByZWRpY2F0ZTogaXNCb29sZWFuLFxuICByZXByZXNlbnQ6IHtcbiAgICBsb3dlcmNhc2U6IGZ1bmN0aW9uIChvYmplY3QpIHsgcmV0dXJuIG9iamVjdCA/ICd0cnVlJyA6ICdmYWxzZSc7IH0sXG4gICAgdXBwZXJjYXNlOiBmdW5jdGlvbiAob2JqZWN0KSB7IHJldHVybiBvYmplY3QgPyAnVFJVRScgOiAnRkFMU0UnOyB9LFxuICAgIGNhbWVsY2FzZTogZnVuY3Rpb24gKG9iamVjdCkgeyByZXR1cm4gb2JqZWN0ID8gJ1RydWUnIDogJ0ZhbHNlJzsgfVxuICB9LFxuICBkZWZhdWx0U3R5bGU6ICdsb3dlcmNhc2UnXG59KTtcblxuZnVuY3Rpb24gaXNIZXhDb2RlKGMpIHtcbiAgcmV0dXJuICgoMHgzMC8qIDAgKi8gPD0gYykgJiYgKGMgPD0gMHgzOS8qIDkgKi8pKSB8fFxuICAgICAgICAgKCgweDQxLyogQSAqLyA8PSBjKSAmJiAoYyA8PSAweDQ2LyogRiAqLykpIHx8XG4gICAgICAgICAoKDB4NjEvKiBhICovIDw9IGMpICYmIChjIDw9IDB4NjYvKiBmICovKSk7XG59XG5cbmZ1bmN0aW9uIGlzT2N0Q29kZShjKSB7XG4gIHJldHVybiAoKDB4MzAvKiAwICovIDw9IGMpICYmIChjIDw9IDB4MzcvKiA3ICovKSk7XG59XG5cbmZ1bmN0aW9uIGlzRGVjQ29kZShjKSB7XG4gIHJldHVybiAoKDB4MzAvKiAwICovIDw9IGMpICYmIChjIDw9IDB4MzkvKiA5ICovKSk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sSW50ZWdlcihkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIG1heCA9IGRhdGEubGVuZ3RoLFxuICAgICAgaW5kZXggPSAwLFxuICAgICAgaGFzRGlnaXRzID0gZmFsc2UsXG4gICAgICBjaDtcblxuICBpZiAoIW1heCkgcmV0dXJuIGZhbHNlO1xuXG4gIGNoID0gZGF0YVtpbmRleF07XG5cbiAgLy8gc2lnblxuICBpZiAoY2ggPT09ICctJyB8fCBjaCA9PT0gJysnKSB7XG4gICAgY2ggPSBkYXRhWysraW5kZXhdO1xuICB9XG5cbiAgaWYgKGNoID09PSAnMCcpIHtcbiAgICAvLyAwXG4gICAgaWYgKGluZGV4ICsgMSA9PT0gbWF4KSByZXR1cm4gdHJ1ZTtcbiAgICBjaCA9IGRhdGFbKytpbmRleF07XG5cbiAgICAvLyBiYXNlIDIsIGJhc2UgOCwgYmFzZSAxNlxuXG4gICAgaWYgKGNoID09PSAnYicpIHtcbiAgICAgIC8vIGJhc2UgMlxuICAgICAgaW5kZXgrKztcblxuICAgICAgZm9yICg7IGluZGV4IDwgbWF4OyBpbmRleCsrKSB7XG4gICAgICAgIGNoID0gZGF0YVtpbmRleF07XG4gICAgICAgIGlmIChjaCA9PT0gJ18nKSBjb250aW51ZTtcbiAgICAgICAgaWYgKGNoICE9PSAnMCcgJiYgY2ggIT09ICcxJykgcmV0dXJuIGZhbHNlO1xuICAgICAgICBoYXNEaWdpdHMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc0RpZ2l0cyAmJiBjaCAhPT0gJ18nO1xuICAgIH1cblxuXG4gICAgaWYgKGNoID09PSAneCcpIHtcbiAgICAgIC8vIGJhc2UgMTZcbiAgICAgIGluZGV4Kys7XG5cbiAgICAgIGZvciAoOyBpbmRleCA8IG1heDsgaW5kZXgrKykge1xuICAgICAgICBjaCA9IGRhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoY2ggPT09ICdfJykgY29udGludWU7XG4gICAgICAgIGlmICghaXNIZXhDb2RlKGRhdGEuY2hhckNvZGVBdChpbmRleCkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGhhc0RpZ2l0cyA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzRGlnaXRzICYmIGNoICE9PSAnXyc7XG4gICAgfVxuXG5cbiAgICBpZiAoY2ggPT09ICdvJykge1xuICAgICAgLy8gYmFzZSA4XG4gICAgICBpbmRleCsrO1xuXG4gICAgICBmb3IgKDsgaW5kZXggPCBtYXg7IGluZGV4KyspIHtcbiAgICAgICAgY2ggPSBkYXRhW2luZGV4XTtcbiAgICAgICAgaWYgKGNoID09PSAnXycpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIWlzT2N0Q29kZShkYXRhLmNoYXJDb2RlQXQoaW5kZXgpKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBoYXNEaWdpdHMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc0RpZ2l0cyAmJiBjaCAhPT0gJ18nO1xuICAgIH1cbiAgfVxuXG4gIC8vIGJhc2UgMTAgKGV4Y2VwdCAwKVxuXG4gIC8vIHZhbHVlIHNob3VsZCBub3Qgc3RhcnQgd2l0aCBgX2A7XG4gIGlmIChjaCA9PT0gJ18nKSByZXR1cm4gZmFsc2U7XG5cbiAgZm9yICg7IGluZGV4IDwgbWF4OyBpbmRleCsrKSB7XG4gICAgY2ggPSBkYXRhW2luZGV4XTtcbiAgICBpZiAoY2ggPT09ICdfJykgY29udGludWU7XG4gICAgaWYgKCFpc0RlY0NvZGUoZGF0YS5jaGFyQ29kZUF0KGluZGV4KSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaGFzRGlnaXRzID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIFNob3VsZCBoYXZlIGRpZ2l0cyBhbmQgc2hvdWxkIG5vdCBlbmQgd2l0aCBgX2BcbiAgaWYgKCFoYXNEaWdpdHMgfHwgY2ggPT09ICdfJykgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sSW50ZWdlcihkYXRhKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGEsIHNpZ24gPSAxLCBjaDtcblxuICBpZiAodmFsdWUuaW5kZXhPZignXycpICE9PSAtMSkge1xuICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXy9nLCAnJyk7XG4gIH1cblxuICBjaCA9IHZhbHVlWzBdO1xuXG4gIGlmIChjaCA9PT0gJy0nIHx8IGNoID09PSAnKycpIHtcbiAgICBpZiAoY2ggPT09ICctJykgc2lnbiA9IC0xO1xuICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMSk7XG4gICAgY2ggPSB2YWx1ZVswXTtcbiAgfVxuXG4gIGlmICh2YWx1ZSA9PT0gJzAnKSByZXR1cm4gMDtcblxuICBpZiAoY2ggPT09ICcwJykge1xuICAgIGlmICh2YWx1ZVsxXSA9PT0gJ2InKSByZXR1cm4gc2lnbiAqIHBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCAyKTtcbiAgICBpZiAodmFsdWVbMV0gPT09ICd4JykgcmV0dXJuIHNpZ24gKiBwYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgMTYpO1xuICAgIGlmICh2YWx1ZVsxXSA9PT0gJ28nKSByZXR1cm4gc2lnbiAqIHBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCA4KTtcbiAgfVxuXG4gIHJldHVybiBzaWduICogcGFyc2VJbnQodmFsdWUsIDEwKTtcbn1cblxuZnVuY3Rpb24gaXNJbnRlZ2VyKG9iamVjdCkge1xuICByZXR1cm4gKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpKSA9PT0gJ1tvYmplY3QgTnVtYmVyXScgJiZcbiAgICAgICAgIChvYmplY3QgJSAxID09PSAwICYmICFjb21tb24uaXNOZWdhdGl2ZVplcm8ob2JqZWN0KSk7XG59XG5cbnZhciBpbnQgPSBuZXcgdHlwZSgndGFnOnlhbWwub3JnLDIwMDI6aW50Jywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxJbnRlZ2VyLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxJbnRlZ2VyLFxuICBwcmVkaWNhdGU6IGlzSW50ZWdlcixcbiAgcmVwcmVzZW50OiB7XG4gICAgYmluYXJ5OiAgICAgIGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiA+PSAwID8gJzBiJyArIG9iai50b1N0cmluZygyKSA6ICctMGInICsgb2JqLnRvU3RyaW5nKDIpLnNsaWNlKDEpOyB9LFxuICAgIG9jdGFsOiAgICAgICBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogPj0gMCA/ICcwbycgICsgb2JqLnRvU3RyaW5nKDgpIDogJy0wbycgICsgb2JqLnRvU3RyaW5nKDgpLnNsaWNlKDEpOyB9LFxuICAgIGRlY2ltYWw6ICAgICBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmoudG9TdHJpbmcoMTApOyB9LFxuICAgIC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cbiAgICBoZXhhZGVjaW1hbDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqID49IDAgPyAnMHgnICsgb2JqLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpIDogICctMHgnICsgb2JqLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpLnNsaWNlKDEpOyB9XG4gIH0sXG4gIGRlZmF1bHRTdHlsZTogJ2RlY2ltYWwnLFxuICBzdHlsZUFsaWFzZXM6IHtcbiAgICBiaW5hcnk6ICAgICAgWyAyLCAgJ2JpbicgXSxcbiAgICBvY3RhbDogICAgICAgWyA4LCAgJ29jdCcgXSxcbiAgICBkZWNpbWFsOiAgICAgWyAxMCwgJ2RlYycgXSxcbiAgICBoZXhhZGVjaW1hbDogWyAxNiwgJ2hleCcgXVxuICB9XG59KTtcblxudmFyIFlBTUxfRkxPQVRfUEFUVEVSTiA9IG5ldyBSZWdFeHAoXG4gIC8vIDIuNWU0LCAyLjUgYW5kIGludGVnZXJzXG4gICdeKD86Wy0rXT8oPzpbMC05XVswLTlfXSopKD86XFxcXC5bMC05X10qKT8oPzpbZUVdWy0rXT9bMC05XSspPycgK1xuICAvLyAuMmU0LCAuMlxuICAvLyBzcGVjaWFsIGNhc2UsIHNlZW1zIG5vdCBmcm9tIHNwZWNcbiAgJ3xcXFxcLlswLTlfXSsoPzpbZUVdWy0rXT9bMC05XSspPycgK1xuICAvLyAuaW5mXG4gICd8Wy0rXT9cXFxcLig/OmluZnxJbmZ8SU5GKScgK1xuICAvLyAubmFuXG4gICd8XFxcXC4oPzpuYW58TmFOfE5BTikpJCcpO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbEZsb2F0KGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICBpZiAoIVlBTUxfRkxPQVRfUEFUVEVSTi50ZXN0KGRhdGEpIHx8XG4gICAgICAvLyBRdWljayBoYWNrIHRvIG5vdCBhbGxvdyBpbnRlZ2VycyBlbmQgd2l0aCBgX2BcbiAgICAgIC8vIFByb2JhYmx5IHNob3VsZCB1cGRhdGUgcmVnZXhwICYgY2hlY2sgc3BlZWRcbiAgICAgIGRhdGFbZGF0YS5sZW5ndGggLSAxXSA9PT0gJ18nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxGbG9hdChkYXRhKSB7XG4gIHZhciB2YWx1ZSwgc2lnbjtcblxuICB2YWx1ZSAgPSBkYXRhLnJlcGxhY2UoL18vZywgJycpLnRvTG93ZXJDYXNlKCk7XG4gIHNpZ24gICA9IHZhbHVlWzBdID09PSAnLScgPyAtMSA6IDE7XG5cbiAgaWYgKCcrLScuaW5kZXhPZih2YWx1ZVswXSkgPj0gMCkge1xuICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMSk7XG4gIH1cblxuICBpZiAodmFsdWUgPT09ICcuaW5mJykge1xuICAgIHJldHVybiAoc2lnbiA9PT0gMSkgPyBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgOiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XG5cbiAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJy5uYW4nKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuICByZXR1cm4gc2lnbiAqIHBhcnNlRmxvYXQodmFsdWUsIDEwKTtcbn1cblxuXG52YXIgU0NJRU5USUZJQ19XSVRIT1VUX0RPVCA9IC9eWy0rXT9bMC05XStlLztcblxuZnVuY3Rpb24gcmVwcmVzZW50WWFtbEZsb2F0KG9iamVjdCwgc3R5bGUpIHtcbiAgdmFyIHJlcztcblxuICBpZiAoaXNOYU4ob2JqZWN0KSkge1xuICAgIHN3aXRjaCAoc3R5bGUpIHtcbiAgICAgIGNhc2UgJ2xvd2VyY2FzZSc6IHJldHVybiAnLm5hbic7XG4gICAgICBjYXNlICd1cHBlcmNhc2UnOiByZXR1cm4gJy5OQU4nO1xuICAgICAgY2FzZSAnY2FtZWxjYXNlJzogcmV0dXJuICcuTmFOJztcbiAgICB9XG4gIH0gZWxzZSBpZiAoTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZID09PSBvYmplY3QpIHtcbiAgICBzd2l0Y2ggKHN0eWxlKSB7XG4gICAgICBjYXNlICdsb3dlcmNhc2UnOiByZXR1cm4gJy5pbmYnO1xuICAgICAgY2FzZSAndXBwZXJjYXNlJzogcmV0dXJuICcuSU5GJztcbiAgICAgIGNhc2UgJ2NhbWVsY2FzZSc6IHJldHVybiAnLkluZic7XG4gICAgfVxuICB9IGVsc2UgaWYgKE51bWJlci5ORUdBVElWRV9JTkZJTklUWSA9PT0gb2JqZWN0KSB7XG4gICAgc3dpdGNoIChzdHlsZSkge1xuICAgICAgY2FzZSAnbG93ZXJjYXNlJzogcmV0dXJuICctLmluZic7XG4gICAgICBjYXNlICd1cHBlcmNhc2UnOiByZXR1cm4gJy0uSU5GJztcbiAgICAgIGNhc2UgJ2NhbWVsY2FzZSc6IHJldHVybiAnLS5JbmYnO1xuICAgIH1cbiAgfSBlbHNlIGlmIChjb21tb24uaXNOZWdhdGl2ZVplcm8ob2JqZWN0KSkge1xuICAgIHJldHVybiAnLTAuMCc7XG4gIH1cblxuICByZXMgPSBvYmplY3QudG9TdHJpbmcoMTApO1xuXG4gIC8vIEpTIHN0cmluZ2lmaWVyIGNhbiBidWlsZCBzY2llbnRpZmljIGZvcm1hdCB3aXRob3V0IGRvdHM6IDVlLTEwMCxcbiAgLy8gd2hpbGUgWUFNTCByZXF1cmVzIGRvdDogNS5lLTEwMC4gRml4IGl0IHdpdGggc2ltcGxlIGhhY2tcblxuICByZXR1cm4gU0NJRU5USUZJQ19XSVRIT1VUX0RPVC50ZXN0KHJlcykgPyByZXMucmVwbGFjZSgnZScsICcuZScpIDogcmVzO1xufVxuXG5mdW5jdGlvbiBpc0Zsb2F0KG9iamVjdCkge1xuICByZXR1cm4gKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBOdW1iZXJdJykgJiZcbiAgICAgICAgIChvYmplY3QgJSAxICE9PSAwIHx8IGNvbW1vbi5pc05lZ2F0aXZlWmVybyhvYmplY3QpKTtcbn1cblxudmFyIGZsb2F0ID0gbmV3IHR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0Jywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxGbG9hdCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sRmxvYXQsXG4gIHByZWRpY2F0ZTogaXNGbG9hdCxcbiAgcmVwcmVzZW50OiByZXByZXNlbnRZYW1sRmxvYXQsXG4gIGRlZmF1bHRTdHlsZTogJ2xvd2VyY2FzZSdcbn0pO1xuXG52YXIganNvbiA9IGZhaWxzYWZlLmV4dGVuZCh7XG4gIGltcGxpY2l0OiBbXG4gICAgX251bGwsXG4gICAgYm9vbCxcbiAgICBpbnQsXG4gICAgZmxvYXRcbiAgXVxufSk7XG5cbnZhciBjb3JlID0ganNvbjtcblxudmFyIFlBTUxfREFURV9SRUdFWFAgPSBuZXcgUmVnRXhwKFxuICAnXihbMC05XVswLTldWzAtOV1bMC05XSknICAgICAgICAgICsgLy8gWzFdIHllYXJcbiAgJy0oWzAtOV1bMC05XSknICAgICAgICAgICAgICAgICAgICArIC8vIFsyXSBtb250aFxuICAnLShbMC05XVswLTldKSQnKTsgICAgICAgICAgICAgICAgICAgLy8gWzNdIGRheVxuXG52YXIgWUFNTF9USU1FU1RBTVBfUkVHRVhQID0gbmV3IFJlZ0V4cChcbiAgJ14oWzAtOV1bMC05XVswLTldWzAtOV0pJyAgICAgICAgICArIC8vIFsxXSB5ZWFyXG4gICctKFswLTldWzAtOV0/KScgICAgICAgICAgICAgICAgICAgKyAvLyBbMl0gbW9udGhcbiAgJy0oWzAtOV1bMC05XT8pJyAgICAgICAgICAgICAgICAgICArIC8vIFszXSBkYXlcbiAgJyg/OltUdF18WyBcXFxcdF0rKScgICAgICAgICAgICAgICAgICsgLy8gLi4uXG4gICcoWzAtOV1bMC05XT8pJyAgICAgICAgICAgICAgICAgICAgKyAvLyBbNF0gaG91clxuICAnOihbMC05XVswLTldKScgICAgICAgICAgICAgICAgICAgICsgLy8gWzVdIG1pbnV0ZVxuICAnOihbMC05XVswLTldKScgICAgICAgICAgICAgICAgICAgICsgLy8gWzZdIHNlY29uZFxuICAnKD86XFxcXC4oWzAtOV0qKSk/JyAgICAgICAgICAgICAgICAgKyAvLyBbN10gZnJhY3Rpb25cbiAgJyg/OlsgXFxcXHRdKihafChbLStdKShbMC05XVswLTldPyknICsgLy8gWzhdIHR6IFs5XSB0el9zaWduIFsxMF0gdHpfaG91clxuICAnKD86OihbMC05XVswLTldKSk/KSk/JCcpOyAgICAgICAgICAgLy8gWzExXSB0el9taW51dGVcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxUaW1lc3RhbXAoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoWUFNTF9EQVRFX1JFR0VYUC5leGVjKGRhdGEpICE9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKFlBTUxfVElNRVNUQU1QX1JFR0VYUC5leGVjKGRhdGEpICE9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sVGltZXN0YW1wKGRhdGEpIHtcbiAgdmFyIG1hdGNoLCB5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgZnJhY3Rpb24gPSAwLFxuICAgICAgZGVsdGEgPSBudWxsLCB0el9ob3VyLCB0el9taW51dGUsIGRhdGU7XG5cbiAgbWF0Y2ggPSBZQU1MX0RBVEVfUkVHRVhQLmV4ZWMoZGF0YSk7XG4gIGlmIChtYXRjaCA9PT0gbnVsbCkgbWF0Y2ggPSBZQU1MX1RJTUVTVEFNUF9SRUdFWFAuZXhlYyhkYXRhKTtcblxuICBpZiAobWF0Y2ggPT09IG51bGwpIHRocm93IG5ldyBFcnJvcignRGF0ZSByZXNvbHZlIGVycm9yJyk7XG5cbiAgLy8gbWF0Y2g6IFsxXSB5ZWFyIFsyXSBtb250aCBbM10gZGF5XG5cbiAgeWVhciA9ICsobWF0Y2hbMV0pO1xuICBtb250aCA9ICsobWF0Y2hbMl0pIC0gMTsgLy8gSlMgbW9udGggc3RhcnRzIHdpdGggMFxuICBkYXkgPSArKG1hdGNoWzNdKTtcblxuICBpZiAoIW1hdGNoWzRdKSB7IC8vIG5vIGhvdXJcbiAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGgsIGRheSkpO1xuICB9XG5cbiAgLy8gbWF0Y2g6IFs0XSBob3VyIFs1XSBtaW51dGUgWzZdIHNlY29uZCBbN10gZnJhY3Rpb25cblxuICBob3VyID0gKyhtYXRjaFs0XSk7XG4gIG1pbnV0ZSA9ICsobWF0Y2hbNV0pO1xuICBzZWNvbmQgPSArKG1hdGNoWzZdKTtcblxuICBpZiAobWF0Y2hbN10pIHtcbiAgICBmcmFjdGlvbiA9IG1hdGNoWzddLnNsaWNlKDAsIDMpO1xuICAgIHdoaWxlIChmcmFjdGlvbi5sZW5ndGggPCAzKSB7IC8vIG1pbGxpLXNlY29uZHNcbiAgICAgIGZyYWN0aW9uICs9ICcwJztcbiAgICB9XG4gICAgZnJhY3Rpb24gPSArZnJhY3Rpb247XG4gIH1cblxuICAvLyBtYXRjaDogWzhdIHR6IFs5XSB0el9zaWduIFsxMF0gdHpfaG91ciBbMTFdIHR6X21pbnV0ZVxuXG4gIGlmIChtYXRjaFs5XSkge1xuICAgIHR6X2hvdXIgPSArKG1hdGNoWzEwXSk7XG4gICAgdHpfbWludXRlID0gKyhtYXRjaFsxMV0gfHwgMCk7XG4gICAgZGVsdGEgPSAodHpfaG91ciAqIDYwICsgdHpfbWludXRlKSAqIDYwMDAwOyAvLyBkZWx0YSBpbiBtaWxpLXNlY29uZHNcbiAgICBpZiAobWF0Y2hbOV0gPT09ICctJykgZGVsdGEgPSAtZGVsdGE7XG4gIH1cblxuICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIGZyYWN0aW9uKSk7XG5cbiAgaWYgKGRlbHRhKSBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgLSBkZWx0YSk7XG5cbiAgcmV0dXJuIGRhdGU7XG59XG5cbmZ1bmN0aW9uIHJlcHJlc2VudFlhbWxUaW1lc3RhbXAob2JqZWN0IC8qLCBzdHlsZSovKSB7XG4gIHJldHVybiBvYmplY3QudG9JU09TdHJpbmcoKTtcbn1cblxudmFyIHRpbWVzdGFtcCA9IG5ldyB0eXBlKCd0YWc6eWFtbC5vcmcsMjAwMjp0aW1lc3RhbXAnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbFRpbWVzdGFtcCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sVGltZXN0YW1wLFxuICBpbnN0YW5jZU9mOiBEYXRlLFxuICByZXByZXNlbnQ6IHJlcHJlc2VudFlhbWxUaW1lc3RhbXBcbn0pO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbE1lcmdlKGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEgPT09ICc8PCcgfHwgZGF0YSA9PT0gbnVsbDtcbn1cblxudmFyIG1lcmdlID0gbmV3IHR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOm1lcmdlJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxNZXJnZVxufSk7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSovXG5cblxuXG5cblxuLy8gWyA2NCwgNjUsIDY2IF0gLT4gWyBwYWRkaW5nLCBDUiwgTEYgXVxudmFyIEJBU0U2NF9NQVAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cXG5cXHInO1xuXG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sQmluYXJ5KGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICB2YXIgY29kZSwgaWR4LCBiaXRsZW4gPSAwLCBtYXggPSBkYXRhLmxlbmd0aCwgbWFwID0gQkFTRTY0X01BUDtcblxuICAvLyBDb252ZXJ0IG9uZSBieSBvbmUuXG4gIGZvciAoaWR4ID0gMDsgaWR4IDwgbWF4OyBpZHgrKykge1xuICAgIGNvZGUgPSBtYXAuaW5kZXhPZihkYXRhLmNoYXJBdChpZHgpKTtcblxuICAgIC8vIFNraXAgQ1IvTEZcbiAgICBpZiAoY29kZSA+IDY0KSBjb250aW51ZTtcblxuICAgIC8vIEZhaWwgb24gaWxsZWdhbCBjaGFyYWN0ZXJzXG4gICAgaWYgKGNvZGUgPCAwKSByZXR1cm4gZmFsc2U7XG5cbiAgICBiaXRsZW4gKz0gNjtcbiAgfVxuXG4gIC8vIElmIHRoZXJlIGFyZSBhbnkgYml0cyBsZWZ0LCBzb3VyY2Ugd2FzIGNvcnJ1cHRlZFxuICByZXR1cm4gKGJpdGxlbiAlIDgpID09PSAwO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sQmluYXJ5KGRhdGEpIHtcbiAgdmFyIGlkeCwgdGFpbGJpdHMsXG4gICAgICBpbnB1dCA9IGRhdGEucmVwbGFjZSgvW1xcclxcbj1dL2csICcnKSwgLy8gcmVtb3ZlIENSL0xGICYgcGFkZGluZyB0byBzaW1wbGlmeSBzY2FuXG4gICAgICBtYXggPSBpbnB1dC5sZW5ndGgsXG4gICAgICBtYXAgPSBCQVNFNjRfTUFQLFxuICAgICAgYml0cyA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICAvLyBDb2xsZWN0IGJ5IDYqNCBiaXRzICgzIGJ5dGVzKVxuXG4gIGZvciAoaWR4ID0gMDsgaWR4IDwgbWF4OyBpZHgrKykge1xuICAgIGlmICgoaWR4ICUgNCA9PT0gMCkgJiYgaWR4KSB7XG4gICAgICByZXN1bHQucHVzaCgoYml0cyA+PiAxNikgJiAweEZGKTtcbiAgICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDgpICYgMHhGRik7XG4gICAgICByZXN1bHQucHVzaChiaXRzICYgMHhGRik7XG4gICAgfVxuXG4gICAgYml0cyA9IChiaXRzIDw8IDYpIHwgbWFwLmluZGV4T2YoaW5wdXQuY2hhckF0KGlkeCkpO1xuICB9XG5cbiAgLy8gRHVtcCB0YWlsXG5cbiAgdGFpbGJpdHMgPSAobWF4ICUgNCkgKiA2O1xuXG4gIGlmICh0YWlsYml0cyA9PT0gMCkge1xuICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDE2KSAmIDB4RkYpO1xuICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDgpICYgMHhGRik7XG4gICAgcmVzdWx0LnB1c2goYml0cyAmIDB4RkYpO1xuICB9IGVsc2UgaWYgKHRhaWxiaXRzID09PSAxOCkge1xuICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDEwKSAmIDB4RkYpO1xuICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDIpICYgMHhGRik7XG4gIH0gZWxzZSBpZiAodGFpbGJpdHMgPT09IDEyKSB7XG4gICAgcmVzdWx0LnB1c2goKGJpdHMgPj4gNCkgJiAweEZGKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVWludDhBcnJheShyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiByZXByZXNlbnRZYW1sQmluYXJ5KG9iamVjdCAvKiwgc3R5bGUqLykge1xuICB2YXIgcmVzdWx0ID0gJycsIGJpdHMgPSAwLCBpZHgsIHRhaWwsXG4gICAgICBtYXggPSBvYmplY3QubGVuZ3RoLFxuICAgICAgbWFwID0gQkFTRTY0X01BUDtcblxuICAvLyBDb252ZXJ0IGV2ZXJ5IHRocmVlIGJ5dGVzIHRvIDQgQVNDSUkgY2hhcmFjdGVycy5cblxuICBmb3IgKGlkeCA9IDA7IGlkeCA8IG1heDsgaWR4KyspIHtcbiAgICBpZiAoKGlkeCAlIDMgPT09IDApICYmIGlkeCkge1xuICAgICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxOCkgJiAweDNGXTtcbiAgICAgIHJlc3VsdCArPSBtYXBbKGJpdHMgPj4gMTIpICYgMHgzRl07XG4gICAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDYpICYgMHgzRl07XG4gICAgICByZXN1bHQgKz0gbWFwW2JpdHMgJiAweDNGXTtcbiAgICB9XG5cbiAgICBiaXRzID0gKGJpdHMgPDwgOCkgKyBvYmplY3RbaWR4XTtcbiAgfVxuXG4gIC8vIER1bXAgdGFpbFxuXG4gIHRhaWwgPSBtYXggJSAzO1xuXG4gIGlmICh0YWlsID09PSAwKSB7XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxOCkgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDEyKSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbKGJpdHMgPj4gNikgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwW2JpdHMgJiAweDNGXTtcbiAgfSBlbHNlIGlmICh0YWlsID09PSAyKSB7XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxMCkgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDQpICYgMHgzRl07XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA8PCAyKSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICB9IGVsc2UgaWYgKHRhaWwgPT09IDEpIHtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDIpICYgMHgzRl07XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA8PCA0KSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gaXNCaW5hcnkob2JqKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gICdbb2JqZWN0IFVpbnQ4QXJyYXldJztcbn1cblxudmFyIGJpbmFyeSA9IG5ldyB0eXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpiaW5hcnknLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbEJpbmFyeSxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sQmluYXJ5LFxuICBwcmVkaWNhdGU6IGlzQmluYXJ5LFxuICByZXByZXNlbnQ6IHJlcHJlc2VudFlhbWxCaW5hcnlcbn0pO1xuXG52YXIgX2hhc093blByb3BlcnR5JDMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF90b1N0cmluZyQyICAgICAgID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxPbWFwKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gIHZhciBvYmplY3RLZXlzID0gW10sIGluZGV4LCBsZW5ndGgsIHBhaXIsIHBhaXJLZXksIHBhaXJIYXNLZXksXG4gICAgICBvYmplY3QgPSBkYXRhO1xuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBvYmplY3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHBhaXIgPSBvYmplY3RbaW5kZXhdO1xuICAgIHBhaXJIYXNLZXkgPSBmYWxzZTtcblxuICAgIGlmIChfdG9TdHJpbmckMi5jYWxsKHBhaXIpICE9PSAnW29iamVjdCBPYmplY3RdJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChwYWlyS2V5IGluIHBhaXIpIHtcbiAgICAgIGlmIChfaGFzT3duUHJvcGVydHkkMy5jYWxsKHBhaXIsIHBhaXJLZXkpKSB7XG4gICAgICAgIGlmICghcGFpckhhc0tleSkgcGFpckhhc0tleSA9IHRydWU7XG4gICAgICAgIGVsc2UgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcGFpckhhc0tleSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKG9iamVjdEtleXMuaW5kZXhPZihwYWlyS2V5KSA9PT0gLTEpIG9iamVjdEtleXMucHVzaChwYWlyS2V5KTtcbiAgICBlbHNlIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sT21hcChkYXRhKSB7XG4gIHJldHVybiBkYXRhICE9PSBudWxsID8gZGF0YSA6IFtdO1xufVxuXG52YXIgb21hcCA9IG5ldyB0eXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpvbWFwJywge1xuICBraW5kOiAnc2VxdWVuY2UnLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbE9tYXAsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbE9tYXBcbn0pO1xuXG52YXIgX3RvU3RyaW5nJDEgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbFBhaXJzKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gIHZhciBpbmRleCwgbGVuZ3RoLCBwYWlyLCBrZXlzLCByZXN1bHQsXG4gICAgICBvYmplY3QgPSBkYXRhO1xuXG4gIHJlc3VsdCA9IG5ldyBBcnJheShvYmplY3QubGVuZ3RoKTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBwYWlyID0gb2JqZWN0W2luZGV4XTtcblxuICAgIGlmIChfdG9TdHJpbmckMS5jYWxsKHBhaXIpICE9PSAnW29iamVjdCBPYmplY3RdJykgcmV0dXJuIGZhbHNlO1xuXG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHBhaXIpO1xuXG4gICAgaWYgKGtleXMubGVuZ3RoICE9PSAxKSByZXR1cm4gZmFsc2U7XG5cbiAgICByZXN1bHRbaW5kZXhdID0gWyBrZXlzWzBdLCBwYWlyW2tleXNbMF1dIF07XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbFBhaXJzKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBbXTtcblxuICB2YXIgaW5kZXgsIGxlbmd0aCwgcGFpciwga2V5cywgcmVzdWx0LFxuICAgICAgb2JqZWN0ID0gZGF0YTtcblxuICByZXN1bHQgPSBuZXcgQXJyYXkob2JqZWN0Lmxlbmd0aCk7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgcGFpciA9IG9iamVjdFtpbmRleF07XG5cbiAgICBrZXlzID0gT2JqZWN0LmtleXMocGFpcik7XG5cbiAgICByZXN1bHRbaW5kZXhdID0gWyBrZXlzWzBdLCBwYWlyW2tleXNbMF1dIF07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgcGFpcnMgPSBuZXcgdHlwZSgndGFnOnlhbWwub3JnLDIwMDI6cGFpcnMnLCB7XG4gIGtpbmQ6ICdzZXF1ZW5jZScsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sUGFpcnMsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbFBhaXJzXG59KTtcblxudmFyIF9oYXNPd25Qcm9wZXJ0eSQyID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxTZXQoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIHRydWU7XG5cbiAgdmFyIGtleSwgb2JqZWN0ID0gZGF0YTtcblxuICBmb3IgKGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoX2hhc093blByb3BlcnR5JDIuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgIGlmIChvYmplY3Rba2V5XSAhPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sU2V0KGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkYXRhIDoge307XG59XG5cbnZhciBzZXQgPSBuZXcgdHlwZSgndGFnOnlhbWwub3JnLDIwMDI6c2V0Jywge1xuICBraW5kOiAnbWFwcGluZycsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sU2V0LFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxTZXRcbn0pO1xuXG52YXIgX2RlZmF1bHQgPSBjb3JlLmV4dGVuZCh7XG4gIGltcGxpY2l0OiBbXG4gICAgdGltZXN0YW1wLFxuICAgIG1lcmdlXG4gIF0sXG4gIGV4cGxpY2l0OiBbXG4gICAgYmluYXJ5LFxuICAgIG9tYXAsXG4gICAgcGFpcnMsXG4gICAgc2V0XG4gIF1cbn0pO1xuXG4vKmVzbGludC1kaXNhYmxlIG1heC1sZW4sbm8tdXNlLWJlZm9yZS1kZWZpbmUqL1xuXG5cblxuXG5cblxuXG52YXIgX2hhc093blByb3BlcnR5JDEgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5cbnZhciBDT05URVhUX0ZMT1dfSU4gICA9IDE7XG52YXIgQ09OVEVYVF9GTE9XX09VVCAgPSAyO1xudmFyIENPTlRFWFRfQkxPQ0tfSU4gID0gMztcbnZhciBDT05URVhUX0JMT0NLX09VVCA9IDQ7XG5cblxudmFyIENIT01QSU5HX0NMSVAgID0gMTtcbnZhciBDSE9NUElOR19TVFJJUCA9IDI7XG52YXIgQ0hPTVBJTkdfS0VFUCAgPSAzO1xuXG5cbnZhciBQQVRURVJOX05PTl9QUklOVEFCTEUgICAgICAgICA9IC9bXFx4MDAtXFx4MDhcXHgwQlxceDBDXFx4MEUtXFx4MUZcXHg3Ri1cXHg4NFxceDg2LVxceDlGXFx1RkZGRVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdLztcbnZhciBQQVRURVJOX05PTl9BU0NJSV9MSU5FX0JSRUFLUyA9IC9bXFx4ODVcXHUyMDI4XFx1MjAyOV0vO1xudmFyIFBBVFRFUk5fRkxPV19JTkRJQ0FUT1JTICAgICAgID0gL1ssXFxbXFxdXFx7XFx9XS87XG52YXIgUEFUVEVSTl9UQUdfSEFORExFICAgICAgICAgICAgPSAvXig/OiF8ISF8IVthLXpcXC1dKyEpJC9pO1xudmFyIFBBVFRFUk5fVEFHX1VSSSAgICAgICAgICAgICAgID0gL14oPzohfFteLFxcW1xcXVxce1xcfV0pKD86JVswLTlhLWZdezJ9fFswLTlhLXpcXC0jO1xcL1xcPzpAJj1cXCtcXCQsX1xcLiF+XFwqJ1xcKFxcKVxcW1xcXV0pKiQvaTtcblxuXG5mdW5jdGlvbiBfY2xhc3Mob2JqKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKTsgfVxuXG5mdW5jdGlvbiBpc19FT0woYykge1xuICByZXR1cm4gKGMgPT09IDB4MEEvKiBMRiAqLykgfHwgKGMgPT09IDB4MEQvKiBDUiAqLyk7XG59XG5cbmZ1bmN0aW9uIGlzX1dISVRFX1NQQUNFKGMpIHtcbiAgcmV0dXJuIChjID09PSAweDA5LyogVGFiICovKSB8fCAoYyA9PT0gMHgyMC8qIFNwYWNlICovKTtcbn1cblxuZnVuY3Rpb24gaXNfV1NfT1JfRU9MKGMpIHtcbiAgcmV0dXJuIChjID09PSAweDA5LyogVGFiICovKSB8fFxuICAgICAgICAgKGMgPT09IDB4MjAvKiBTcGFjZSAqLykgfHxcbiAgICAgICAgIChjID09PSAweDBBLyogTEYgKi8pIHx8XG4gICAgICAgICAoYyA9PT0gMHgwRC8qIENSICovKTtcbn1cblxuZnVuY3Rpb24gaXNfRkxPV19JTkRJQ0FUT1IoYykge1xuICByZXR1cm4gYyA9PT0gMHgyQy8qICwgKi8gfHxcbiAgICAgICAgIGMgPT09IDB4NUIvKiBbICovIHx8XG4gICAgICAgICBjID09PSAweDVELyogXSAqLyB8fFxuICAgICAgICAgYyA9PT0gMHg3Qi8qIHsgKi8gfHxcbiAgICAgICAgIGMgPT09IDB4N0QvKiB9ICovO1xufVxuXG5mdW5jdGlvbiBmcm9tSGV4Q29kZShjKSB7XG4gIHZhciBsYztcblxuICBpZiAoKDB4MzAvKiAwICovIDw9IGMpICYmIChjIDw9IDB4MzkvKiA5ICovKSkge1xuICAgIHJldHVybiBjIC0gMHgzMDtcbiAgfVxuXG4gIC8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSovXG4gIGxjID0gYyB8IDB4MjA7XG5cbiAgaWYgKCgweDYxLyogYSAqLyA8PSBsYykgJiYgKGxjIDw9IDB4NjYvKiBmICovKSkge1xuICAgIHJldHVybiBsYyAtIDB4NjEgKyAxMDtcbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gZXNjYXBlZEhleExlbihjKSB7XG4gIGlmIChjID09PSAweDc4LyogeCAqLykgeyByZXR1cm4gMjsgfVxuICBpZiAoYyA9PT0gMHg3NS8qIHUgKi8pIHsgcmV0dXJuIDQ7IH1cbiAgaWYgKGMgPT09IDB4NTUvKiBVICovKSB7IHJldHVybiA4OyB9XG4gIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBmcm9tRGVjaW1hbENvZGUoYykge1xuICBpZiAoKDB4MzAvKiAwICovIDw9IGMpICYmIChjIDw9IDB4MzkvKiA5ICovKSkge1xuICAgIHJldHVybiBjIC0gMHgzMDtcbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gc2ltcGxlRXNjYXBlU2VxdWVuY2UoYykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBpbmRlbnQgKi9cbiAgcmV0dXJuIChjID09PSAweDMwLyogMCAqLykgPyAnXFx4MDAnIDpcbiAgICAgICAgKGMgPT09IDB4NjEvKiBhICovKSA/ICdcXHgwNycgOlxuICAgICAgICAoYyA9PT0gMHg2Mi8qIGIgKi8pID8gJ1xceDA4JyA6XG4gICAgICAgIChjID09PSAweDc0LyogdCAqLykgPyAnXFx4MDknIDpcbiAgICAgICAgKGMgPT09IDB4MDkvKiBUYWIgKi8pID8gJ1xceDA5JyA6XG4gICAgICAgIChjID09PSAweDZFLyogbiAqLykgPyAnXFx4MEEnIDpcbiAgICAgICAgKGMgPT09IDB4NzYvKiB2ICovKSA/ICdcXHgwQicgOlxuICAgICAgICAoYyA9PT0gMHg2Ni8qIGYgKi8pID8gJ1xceDBDJyA6XG4gICAgICAgIChjID09PSAweDcyLyogciAqLykgPyAnXFx4MEQnIDpcbiAgICAgICAgKGMgPT09IDB4NjUvKiBlICovKSA/ICdcXHgxQicgOlxuICAgICAgICAoYyA9PT0gMHgyMC8qIFNwYWNlICovKSA/ICcgJyA6XG4gICAgICAgIChjID09PSAweDIyLyogXCIgKi8pID8gJ1xceDIyJyA6XG4gICAgICAgIChjID09PSAweDJGLyogLyAqLykgPyAnLycgOlxuICAgICAgICAoYyA9PT0gMHg1Qy8qIFxcICovKSA/ICdcXHg1QycgOlxuICAgICAgICAoYyA9PT0gMHg0RS8qIE4gKi8pID8gJ1xceDg1JyA6XG4gICAgICAgIChjID09PSAweDVGLyogXyAqLykgPyAnXFx4QTAnIDpcbiAgICAgICAgKGMgPT09IDB4NEMvKiBMICovKSA/ICdcXHUyMDI4JyA6XG4gICAgICAgIChjID09PSAweDUwLyogUCAqLykgPyAnXFx1MjAyOScgOiAnJztcbn1cblxuZnVuY3Rpb24gY2hhckZyb21Db2RlcG9pbnQoYykge1xuICBpZiAoYyA8PSAweEZGRkYpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgfVxuICAvLyBFbmNvZGUgVVRGLTE2IHN1cnJvZ2F0ZSBwYWlyXG4gIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1VURi0xNiNDb2RlX3BvaW50c19VLjJCMDEwMDAwX3RvX1UuMkIxMEZGRkZcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoXG4gICAgKChjIC0gMHgwMTAwMDApID4+IDEwKSArIDB4RDgwMCxcbiAgICAoKGMgLSAweDAxMDAwMCkgJiAweDAzRkYpICsgMHhEQzAwXG4gICk7XG59XG5cbnZhciBzaW1wbGVFc2NhcGVDaGVjayA9IG5ldyBBcnJheSgyNTYpOyAvLyBpbnRlZ2VyLCBmb3IgZmFzdCBhY2Nlc3NcbnZhciBzaW1wbGVFc2NhcGVNYXAgPSBuZXcgQXJyYXkoMjU2KTtcbmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcbiAgc2ltcGxlRXNjYXBlQ2hlY2tbaV0gPSBzaW1wbGVFc2NhcGVTZXF1ZW5jZShpKSA/IDEgOiAwO1xuICBzaW1wbGVFc2NhcGVNYXBbaV0gPSBzaW1wbGVFc2NhcGVTZXF1ZW5jZShpKTtcbn1cblxuXG5mdW5jdGlvbiBTdGF0ZSQxKGlucHV0LCBvcHRpb25zKSB7XG4gIHRoaXMuaW5wdXQgPSBpbnB1dDtcblxuICB0aGlzLmZpbGVuYW1lICA9IG9wdGlvbnNbJ2ZpbGVuYW1lJ10gIHx8IG51bGw7XG4gIHRoaXMuc2NoZW1hICAgID0gb3B0aW9uc1snc2NoZW1hJ10gICAgfHwgX2RlZmF1bHQ7XG4gIHRoaXMub25XYXJuaW5nID0gb3B0aW9uc1snb25XYXJuaW5nJ10gfHwgbnVsbDtcbiAgLy8gKEhpZGRlbikgUmVtb3ZlPyBtYWtlcyB0aGUgbG9hZGVyIHRvIGV4cGVjdCBZQU1MIDEuMSBkb2N1bWVudHNcbiAgLy8gaWYgc3VjaCBkb2N1bWVudHMgaGF2ZSBubyBleHBsaWNpdCAlWUFNTCBkaXJlY3RpdmVcbiAgdGhpcy5sZWdhY3kgICAgPSBvcHRpb25zWydsZWdhY3knXSAgICB8fCBmYWxzZTtcblxuICB0aGlzLmpzb24gICAgICA9IG9wdGlvbnNbJ2pzb24nXSAgICAgIHx8IGZhbHNlO1xuICB0aGlzLmxpc3RlbmVyICA9IG9wdGlvbnNbJ2xpc3RlbmVyJ10gIHx8IG51bGw7XG5cbiAgdGhpcy5pbXBsaWNpdFR5cGVzID0gdGhpcy5zY2hlbWEuY29tcGlsZWRJbXBsaWNpdDtcbiAgdGhpcy50eXBlTWFwICAgICAgID0gdGhpcy5zY2hlbWEuY29tcGlsZWRUeXBlTWFwO1xuXG4gIHRoaXMubGVuZ3RoICAgICA9IGlucHV0Lmxlbmd0aDtcbiAgdGhpcy5wb3NpdGlvbiAgID0gMDtcbiAgdGhpcy5saW5lICAgICAgID0gMDtcbiAgdGhpcy5saW5lU3RhcnQgID0gMDtcbiAgdGhpcy5saW5lSW5kZW50ID0gMDtcblxuICAvLyBwb3NpdGlvbiBvZiBmaXJzdCBsZWFkaW5nIHRhYiBpbiB0aGUgY3VycmVudCBsaW5lLFxuICAvLyB1c2VkIHRvIG1ha2Ugc3VyZSB0aGVyZSBhcmUgbm8gdGFicyBpbiB0aGUgaW5kZW50YXRpb25cbiAgdGhpcy5maXJzdFRhYkluTGluZSA9IC0xO1xuXG4gIHRoaXMuZG9jdW1lbnRzID0gW107XG5cbiAgLypcbiAgdGhpcy52ZXJzaW9uO1xuICB0aGlzLmNoZWNrTGluZUJyZWFrcztcbiAgdGhpcy50YWdNYXA7XG4gIHRoaXMuYW5jaG9yTWFwO1xuICB0aGlzLnRhZztcbiAgdGhpcy5hbmNob3I7XG4gIHRoaXMua2luZDtcbiAgdGhpcy5yZXN1bHQ7Ki9cblxufVxuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlRXJyb3Ioc3RhdGUsIG1lc3NhZ2UpIHtcbiAgdmFyIG1hcmsgPSB7XG4gICAgbmFtZTogICAgIHN0YXRlLmZpbGVuYW1lLFxuICAgIGJ1ZmZlcjogICBzdGF0ZS5pbnB1dC5zbGljZSgwLCAtMSksIC8vIG9taXQgdHJhaWxpbmcgXFwwXG4gICAgcG9zaXRpb246IHN0YXRlLnBvc2l0aW9uLFxuICAgIGxpbmU6ICAgICBzdGF0ZS5saW5lLFxuICAgIGNvbHVtbjogICBzdGF0ZS5wb3NpdGlvbiAtIHN0YXRlLmxpbmVTdGFydFxuICB9O1xuXG4gIG1hcmsuc25pcHBldCA9IHNuaXBwZXQobWFyayk7XG5cbiAgcmV0dXJuIG5ldyBleGNlcHRpb24obWVzc2FnZSwgbWFyayk7XG59XG5cbmZ1bmN0aW9uIHRocm93RXJyb3Ioc3RhdGUsIG1lc3NhZ2UpIHtcbiAgdGhyb3cgZ2VuZXJhdGVFcnJvcihzdGF0ZSwgbWVzc2FnZSk7XG59XG5cbmZ1bmN0aW9uIHRocm93V2FybmluZyhzdGF0ZSwgbWVzc2FnZSkge1xuICBpZiAoc3RhdGUub25XYXJuaW5nKSB7XG4gICAgc3RhdGUub25XYXJuaW5nLmNhbGwobnVsbCwgZ2VuZXJhdGVFcnJvcihzdGF0ZSwgbWVzc2FnZSkpO1xuICB9XG59XG5cblxudmFyIGRpcmVjdGl2ZUhhbmRsZXJzID0ge1xuXG4gIFlBTUw6IGZ1bmN0aW9uIGhhbmRsZVlhbWxEaXJlY3RpdmUoc3RhdGUsIG5hbWUsIGFyZ3MpIHtcblxuICAgIHZhciBtYXRjaCwgbWFqb3IsIG1pbm9yO1xuXG4gICAgaWYgKHN0YXRlLnZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdkdXBsaWNhdGlvbiBvZiAlWUFNTCBkaXJlY3RpdmUnKTtcbiAgICB9XG5cbiAgICBpZiAoYXJncy5sZW5ndGggIT09IDEpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdZQU1MIGRpcmVjdGl2ZSBhY2NlcHRzIGV4YWN0bHkgb25lIGFyZ3VtZW50Jyk7XG4gICAgfVxuXG4gICAgbWF0Y2ggPSAvXihbMC05XSspXFwuKFswLTldKykkLy5leGVjKGFyZ3NbMF0pO1xuXG4gICAgaWYgKG1hdGNoID09PSBudWxsKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnaWxsLWZvcm1lZCBhcmd1bWVudCBvZiB0aGUgWUFNTCBkaXJlY3RpdmUnKTtcbiAgICB9XG5cbiAgICBtYWpvciA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XG4gICAgbWlub3IgPSBwYXJzZUludChtYXRjaFsyXSwgMTApO1xuXG4gICAgaWYgKG1ham9yICE9PSAxKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5hY2NlcHRhYmxlIFlBTUwgdmVyc2lvbiBvZiB0aGUgZG9jdW1lbnQnKTtcbiAgICB9XG5cbiAgICBzdGF0ZS52ZXJzaW9uID0gYXJnc1swXTtcbiAgICBzdGF0ZS5jaGVja0xpbmVCcmVha3MgPSAobWlub3IgPCAyKTtcblxuICAgIGlmIChtaW5vciAhPT0gMSAmJiBtaW5vciAhPT0gMikge1xuICAgICAgdGhyb3dXYXJuaW5nKHN0YXRlLCAndW5zdXBwb3J0ZWQgWUFNTCB2ZXJzaW9uIG9mIHRoZSBkb2N1bWVudCcpO1xuICAgIH1cbiAgfSxcblxuICBUQUc6IGZ1bmN0aW9uIGhhbmRsZVRhZ0RpcmVjdGl2ZShzdGF0ZSwgbmFtZSwgYXJncykge1xuXG4gICAgdmFyIGhhbmRsZSwgcHJlZml4O1xuXG4gICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAyKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnVEFHIGRpcmVjdGl2ZSBhY2NlcHRzIGV4YWN0bHkgdHdvIGFyZ3VtZW50cycpO1xuICAgIH1cblxuICAgIGhhbmRsZSA9IGFyZ3NbMF07XG4gICAgcHJlZml4ID0gYXJnc1sxXTtcblxuICAgIGlmICghUEFUVEVSTl9UQUdfSEFORExFLnRlc3QoaGFuZGxlKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2lsbC1mb3JtZWQgdGFnIGhhbmRsZSAoZmlyc3QgYXJndW1lbnQpIG9mIHRoZSBUQUcgZGlyZWN0aXZlJyk7XG4gICAgfVxuXG4gICAgaWYgKF9oYXNPd25Qcm9wZXJ0eSQxLmNhbGwoc3RhdGUudGFnTWFwLCBoYW5kbGUpKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGhlcmUgaXMgYSBwcmV2aW91c2x5IGRlY2xhcmVkIHN1ZmZpeCBmb3IgXCInICsgaGFuZGxlICsgJ1wiIHRhZyBoYW5kbGUnKTtcbiAgICB9XG5cbiAgICBpZiAoIVBBVFRFUk5fVEFHX1VSSS50ZXN0KHByZWZpeCkpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdpbGwtZm9ybWVkIHRhZyBwcmVmaXggKHNlY29uZCBhcmd1bWVudCkgb2YgdGhlIFRBRyBkaXJlY3RpdmUnKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcHJlZml4ID0gZGVjb2RlVVJJQ29tcG9uZW50KHByZWZpeCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGFnIHByZWZpeCBpcyBtYWxmb3JtZWQ6ICcgKyBwcmVmaXgpO1xuICAgIH1cblxuICAgIHN0YXRlLnRhZ01hcFtoYW5kbGVdID0gcHJlZml4O1xuICB9XG59O1xuXG5cbmZ1bmN0aW9uIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBzdGFydCwgZW5kLCBjaGVja0pzb24pIHtcbiAgdmFyIF9wb3NpdGlvbiwgX2xlbmd0aCwgX2NoYXJhY3RlciwgX3Jlc3VsdDtcblxuICBpZiAoc3RhcnQgPCBlbmQpIHtcbiAgICBfcmVzdWx0ID0gc3RhdGUuaW5wdXQuc2xpY2Uoc3RhcnQsIGVuZCk7XG5cbiAgICBpZiAoY2hlY2tKc29uKSB7XG4gICAgICBmb3IgKF9wb3NpdGlvbiA9IDAsIF9sZW5ndGggPSBfcmVzdWx0Lmxlbmd0aDsgX3Bvc2l0aW9uIDwgX2xlbmd0aDsgX3Bvc2l0aW9uICs9IDEpIHtcbiAgICAgICAgX2NoYXJhY3RlciA9IF9yZXN1bHQuY2hhckNvZGVBdChfcG9zaXRpb24pO1xuICAgICAgICBpZiAoIShfY2hhcmFjdGVyID09PSAweDA5IHx8XG4gICAgICAgICAgICAgICgweDIwIDw9IF9jaGFyYWN0ZXIgJiYgX2NoYXJhY3RlciA8PSAweDEwRkZGRikpKSB7XG4gICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2V4cGVjdGVkIHZhbGlkIEpTT04gY2hhcmFjdGVyJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFBBVFRFUk5fTk9OX1BSSU5UQUJMRS50ZXN0KF9yZXN1bHQpKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGhlIHN0cmVhbSBjb250YWlucyBub24tcHJpbnRhYmxlIGNoYXJhY3RlcnMnKTtcbiAgICB9XG5cbiAgICBzdGF0ZS5yZXN1bHQgKz0gX3Jlc3VsdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZU1hcHBpbmdzKHN0YXRlLCBkZXN0aW5hdGlvbiwgc291cmNlLCBvdmVycmlkYWJsZUtleXMpIHtcbiAgdmFyIHNvdXJjZUtleXMsIGtleSwgaW5kZXgsIHF1YW50aXR5O1xuXG4gIGlmICghY29tbW9uLmlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnY2Fubm90IG1lcmdlIG1hcHBpbmdzOyB0aGUgcHJvdmlkZWQgc291cmNlIG9iamVjdCBpcyB1bmFjY2VwdGFibGUnKTtcbiAgfVxuXG4gIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gIGZvciAoaW5kZXggPSAwLCBxdWFudGl0eSA9IHNvdXJjZUtleXMubGVuZ3RoOyBpbmRleCA8IHF1YW50aXR5OyBpbmRleCArPSAxKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpbmRleF07XG5cbiAgICBpZiAoIV9oYXNPd25Qcm9wZXJ0eSQxLmNhbGwoZGVzdGluYXRpb24sIGtleSkpIHtcbiAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIG92ZXJyaWRhYmxlS2V5c1trZXldID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RvcmVNYXBwaW5nUGFpcihzdGF0ZSwgX3Jlc3VsdCwgb3ZlcnJpZGFibGVLZXlzLCBrZXlUYWcsIGtleU5vZGUsIHZhbHVlTm9kZSxcbiAgc3RhcnRMaW5lLCBzdGFydExpbmVTdGFydCwgc3RhcnRQb3MpIHtcblxuICB2YXIgaW5kZXgsIHF1YW50aXR5O1xuXG4gIC8vIFRoZSBvdXRwdXQgaXMgYSBwbGFpbiBvYmplY3QgaGVyZSwgc28ga2V5cyBjYW4gb25seSBiZSBzdHJpbmdzLlxuICAvLyBXZSBuZWVkIHRvIGNvbnZlcnQga2V5Tm9kZSB0byBhIHN0cmluZywgYnV0IGRvaW5nIHNvIGNhbiBoYW5nIHRoZSBwcm9jZXNzXG4gIC8vIChkZWVwbHkgbmVzdGVkIGFycmF5cyB0aGF0IGV4cGxvZGUgZXhwb25lbnRpYWxseSB1c2luZyBhbGlhc2VzKS5cbiAgaWYgKEFycmF5LmlzQXJyYXkoa2V5Tm9kZSkpIHtcbiAgICBrZXlOb2RlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoa2V5Tm9kZSk7XG5cbiAgICBmb3IgKGluZGV4ID0gMCwgcXVhbnRpdHkgPSBrZXlOb2RlLmxlbmd0aDsgaW5kZXggPCBxdWFudGl0eTsgaW5kZXggKz0gMSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoa2V5Tm9kZVtpbmRleF0pKSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICduZXN0ZWQgYXJyYXlzIGFyZSBub3Qgc3VwcG9ydGVkIGluc2lkZSBrZXlzJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Yga2V5Tm9kZSA9PT0gJ29iamVjdCcgJiYgX2NsYXNzKGtleU5vZGVbaW5kZXhdKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgICAga2V5Tm9kZVtpbmRleF0gPSAnW29iamVjdCBPYmplY3RdJztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBBdm9pZCBjb2RlIGV4ZWN1dGlvbiBpbiBsb2FkKCkgdmlhIHRvU3RyaW5nIHByb3BlcnR5XG4gIC8vIChzdGlsbCB1c2UgaXRzIG93biB0b1N0cmluZyBmb3IgYXJyYXlzLCB0aW1lc3RhbXBzLFxuICAvLyBhbmQgd2hhdGV2ZXIgdXNlciBzY2hlbWEgZXh0ZW5zaW9ucyBoYXBwZW4gdG8gaGF2ZSBAQHRvU3RyaW5nVGFnKVxuICBpZiAodHlwZW9mIGtleU5vZGUgPT09ICdvYmplY3QnICYmIF9jbGFzcyhrZXlOb2RlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICBrZXlOb2RlID0gJ1tvYmplY3QgT2JqZWN0XSc7XG4gIH1cblxuXG4gIGtleU5vZGUgPSBTdHJpbmcoa2V5Tm9kZSk7XG5cbiAgaWYgKF9yZXN1bHQgPT09IG51bGwpIHtcbiAgICBfcmVzdWx0ID0ge307XG4gIH1cblxuICBpZiAoa2V5VGFnID09PSAndGFnOnlhbWwub3JnLDIwMDI6bWVyZ2UnKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVOb2RlKSkge1xuICAgICAgZm9yIChpbmRleCA9IDAsIHF1YW50aXR5ID0gdmFsdWVOb2RlLmxlbmd0aDsgaW5kZXggPCBxdWFudGl0eTsgaW5kZXggKz0gMSkge1xuICAgICAgICBtZXJnZU1hcHBpbmdzKHN0YXRlLCBfcmVzdWx0LCB2YWx1ZU5vZGVbaW5kZXhdLCBvdmVycmlkYWJsZUtleXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtZXJnZU1hcHBpbmdzKHN0YXRlLCBfcmVzdWx0LCB2YWx1ZU5vZGUsIG92ZXJyaWRhYmxlS2V5cyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICghc3RhdGUuanNvbiAmJlxuICAgICAgICAhX2hhc093blByb3BlcnR5JDEuY2FsbChvdmVycmlkYWJsZUtleXMsIGtleU5vZGUpICYmXG4gICAgICAgIF9oYXNPd25Qcm9wZXJ0eSQxLmNhbGwoX3Jlc3VsdCwga2V5Tm9kZSkpIHtcbiAgICAgIHN0YXRlLmxpbmUgPSBzdGFydExpbmUgfHwgc3RhdGUubGluZTtcbiAgICAgIHN0YXRlLmxpbmVTdGFydCA9IHN0YXJ0TGluZVN0YXJ0IHx8IHN0YXRlLmxpbmVTdGFydDtcbiAgICAgIHN0YXRlLnBvc2l0aW9uID0gc3RhcnRQb3MgfHwgc3RhdGUucG9zaXRpb247XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnZHVwbGljYXRlZCBtYXBwaW5nIGtleScpO1xuICAgIH1cblxuICAgIC8vIHVzZWQgZm9yIHRoaXMgc3BlY2lmaWMga2V5IG9ubHkgYmVjYXVzZSBPYmplY3QuZGVmaW5lUHJvcGVydHkgaXMgc2xvd1xuICAgIGlmIChrZXlOb2RlID09PSAnX19wcm90b19fJykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9yZXN1bHQsIGtleU5vZGUsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZhbHVlTm9kZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9yZXN1bHRba2V5Tm9kZV0gPSB2YWx1ZU5vZGU7XG4gICAgfVxuICAgIGRlbGV0ZSBvdmVycmlkYWJsZUtleXNba2V5Tm9kZV07XG4gIH1cblxuICByZXR1cm4gX3Jlc3VsdDtcbn1cblxuZnVuY3Rpb24gcmVhZExpbmVCcmVhayhzdGF0ZSkge1xuICB2YXIgY2g7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICBpZiAoY2ggPT09IDB4MEEvKiBMRiAqLykge1xuICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gIH0gZWxzZSBpZiAoY2ggPT09IDB4MEQvKiBDUiAqLykge1xuICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgaWYgKHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pID09PSAweDBBLyogTEYgKi8pIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICdhIGxpbmUgYnJlYWsgaXMgZXhwZWN0ZWQnKTtcbiAgfVxuXG4gIHN0YXRlLmxpbmUgKz0gMTtcbiAgc3RhdGUubGluZVN0YXJ0ID0gc3RhdGUucG9zaXRpb247XG4gIHN0YXRlLmZpcnN0VGFiSW5MaW5lID0gLTE7XG59XG5cbmZ1bmN0aW9uIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIGFsbG93Q29tbWVudHMsIGNoZWNrSW5kZW50KSB7XG4gIHZhciBsaW5lQnJlYWtzID0gMCxcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgd2hpbGUgKGNoICE9PSAwKSB7XG4gICAgd2hpbGUgKGlzX1dISVRFX1NQQUNFKGNoKSkge1xuICAgICAgaWYgKGNoID09PSAweDA5LyogVGFiICovICYmIHN0YXRlLmZpcnN0VGFiSW5MaW5lID09PSAtMSkge1xuICAgICAgICBzdGF0ZS5maXJzdFRhYkluTGluZSA9IHN0YXRlLnBvc2l0aW9uO1xuICAgICAgfVxuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIH1cblxuICAgIGlmIChhbGxvd0NvbW1lbnRzICYmIGNoID09PSAweDIzLyogIyAqLykge1xuICAgICAgZG8ge1xuICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgICB9IHdoaWxlIChjaCAhPT0gMHgwQS8qIExGICovICYmIGNoICE9PSAweDBELyogQ1IgKi8gJiYgY2ggIT09IDApO1xuICAgIH1cblxuICAgIGlmIChpc19FT0woY2gpKSB7XG4gICAgICByZWFkTGluZUJyZWFrKHN0YXRlKTtcblxuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcbiAgICAgIGxpbmVCcmVha3MrKztcbiAgICAgIHN0YXRlLmxpbmVJbmRlbnQgPSAwO1xuXG4gICAgICB3aGlsZSAoY2ggPT09IDB4MjAvKiBTcGFjZSAqLykge1xuICAgICAgICBzdGF0ZS5saW5lSW5kZW50Kys7XG4gICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKGNoZWNrSW5kZW50ICE9PSAtMSAmJiBsaW5lQnJlYWtzICE9PSAwICYmIHN0YXRlLmxpbmVJbmRlbnQgPCBjaGVja0luZGVudCkge1xuICAgIHRocm93V2FybmluZyhzdGF0ZSwgJ2RlZmljaWVudCBpbmRlbnRhdGlvbicpO1xuICB9XG5cbiAgcmV0dXJuIGxpbmVCcmVha3M7XG59XG5cbmZ1bmN0aW9uIHRlc3REb2N1bWVudFNlcGFyYXRvcihzdGF0ZSkge1xuICB2YXIgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb24sXG4gICAgICBjaDtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoX3Bvc2l0aW9uKTtcblxuICAvLyBDb25kaXRpb24gc3RhdGUucG9zaXRpb24gPT09IHN0YXRlLmxpbmVTdGFydCBpcyB0ZXN0ZWRcbiAgLy8gaW4gcGFyZW50IG9uIGVhY2ggY2FsbCwgZm9yIGVmZmljaWVuY3kuIE5vIG5lZWRzIHRvIHRlc3QgaGVyZSBhZ2Fpbi5cbiAgaWYgKChjaCA9PT0gMHgyRC8qIC0gKi8gfHwgY2ggPT09IDB4MkUvKiAuICovKSAmJlxuICAgICAgY2ggPT09IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoX3Bvc2l0aW9uICsgMSkgJiZcbiAgICAgIGNoID09PSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KF9wb3NpdGlvbiArIDIpKSB7XG5cbiAgICBfcG9zaXRpb24gKz0gMztcblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChfcG9zaXRpb24pO1xuXG4gICAgaWYgKGNoID09PSAwIHx8IGlzX1dTX09SX0VPTChjaCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gd3JpdGVGb2xkZWRMaW5lcyhzdGF0ZSwgY291bnQpIHtcbiAgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgc3RhdGUucmVzdWx0ICs9ICcgJztcbiAgfSBlbHNlIGlmIChjb3VudCA+IDEpIHtcbiAgICBzdGF0ZS5yZXN1bHQgKz0gY29tbW9uLnJlcGVhdCgnXFxuJywgY291bnQgLSAxKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHJlYWRQbGFpblNjYWxhcihzdGF0ZSwgbm9kZUluZGVudCwgd2l0aGluRmxvd0NvbGxlY3Rpb24pIHtcbiAgdmFyIHByZWNlZGluZyxcbiAgICAgIGZvbGxvd2luZyxcbiAgICAgIGNhcHR1cmVTdGFydCxcbiAgICAgIGNhcHR1cmVFbmQsXG4gICAgICBoYXNQZW5kaW5nQ29udGVudCxcbiAgICAgIF9saW5lLFxuICAgICAgX2xpbmVTdGFydCxcbiAgICAgIF9saW5lSW5kZW50LFxuICAgICAgX2tpbmQgPSBzdGF0ZS5raW5kLFxuICAgICAgX3Jlc3VsdCA9IHN0YXRlLnJlc3VsdCxcbiAgICAgIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGlzX1dTX09SX0VPTChjaCkgICAgICB8fFxuICAgICAgaXNfRkxPV19JTkRJQ0FUT1IoY2gpIHx8XG4gICAgICBjaCA9PT0gMHgyMy8qICMgKi8gICAgfHxcbiAgICAgIGNoID09PSAweDI2LyogJiAqLyAgICB8fFxuICAgICAgY2ggPT09IDB4MkEvKiAqICovICAgIHx8XG4gICAgICBjaCA9PT0gMHgyMS8qICEgKi8gICAgfHxcbiAgICAgIGNoID09PSAweDdDLyogfCAqLyAgICB8fFxuICAgICAgY2ggPT09IDB4M0UvKiA+ICovICAgIHx8XG4gICAgICBjaCA9PT0gMHgyNy8qICcgKi8gICAgfHxcbiAgICAgIGNoID09PSAweDIyLyogXCIgKi8gICAgfHxcbiAgICAgIGNoID09PSAweDI1LyogJSAqLyAgICB8fFxuICAgICAgY2ggPT09IDB4NDAvKiBAICovICAgIHx8XG4gICAgICBjaCA9PT0gMHg2MC8qIGAgKi8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoY2ggPT09IDB4M0YvKiA/ICovIHx8IGNoID09PSAweDJELyogLSAqLykge1xuICAgIGZvbGxvd2luZyA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAxKTtcblxuICAgIGlmIChpc19XU19PUl9FT0woZm9sbG93aW5nKSB8fFxuICAgICAgICB3aXRoaW5GbG93Q29sbGVjdGlvbiAmJiBpc19GTE9XX0lORElDQVRPUihmb2xsb3dpbmcpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgc3RhdGUua2luZCA9ICdzY2FsYXInO1xuICBzdGF0ZS5yZXN1bHQgPSAnJztcbiAgY2FwdHVyZVN0YXJ0ID0gY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuICBoYXNQZW5kaW5nQ29udGVudCA9IGZhbHNlO1xuXG4gIHdoaWxlIChjaCAhPT0gMCkge1xuICAgIGlmIChjaCA9PT0gMHgzQS8qIDogKi8pIHtcbiAgICAgIGZvbGxvd2luZyA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAxKTtcblxuICAgICAgaWYgKGlzX1dTX09SX0VPTChmb2xsb3dpbmcpIHx8XG4gICAgICAgICAgd2l0aGluRmxvd0NvbGxlY3Rpb24gJiYgaXNfRkxPV19JTkRJQ0FUT1IoZm9sbG93aW5nKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAoY2ggPT09IDB4MjMvKiAjICovKSB7XG4gICAgICBwcmVjZWRpbmcgPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uIC0gMSk7XG5cbiAgICAgIGlmIChpc19XU19PUl9FT0wocHJlY2VkaW5nKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAoKHN0YXRlLnBvc2l0aW9uID09PSBzdGF0ZS5saW5lU3RhcnQgJiYgdGVzdERvY3VtZW50U2VwYXJhdG9yKHN0YXRlKSkgfHxcbiAgICAgICAgICAgICAgIHdpdGhpbkZsb3dDb2xsZWN0aW9uICYmIGlzX0ZMT1dfSU5ESUNBVE9SKGNoKSkge1xuICAgICAgYnJlYWs7XG5cbiAgICB9IGVsc2UgaWYgKGlzX0VPTChjaCkpIHtcbiAgICAgIF9saW5lID0gc3RhdGUubGluZTtcbiAgICAgIF9saW5lU3RhcnQgPSBzdGF0ZS5saW5lU3RhcnQ7XG4gICAgICBfbGluZUluZGVudCA9IHN0YXRlLmxpbmVJbmRlbnQ7XG4gICAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCBmYWxzZSwgLTEpO1xuXG4gICAgICBpZiAoc3RhdGUubGluZUluZGVudCA+PSBub2RlSW5kZW50KSB7XG4gICAgICAgIGhhc1BlbmRpbmdDb250ZW50ID0gdHJ1ZTtcbiAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5wb3NpdGlvbiA9IGNhcHR1cmVFbmQ7XG4gICAgICAgIHN0YXRlLmxpbmUgPSBfbGluZTtcbiAgICAgICAgc3RhdGUubGluZVN0YXJ0ID0gX2xpbmVTdGFydDtcbiAgICAgICAgc3RhdGUubGluZUluZGVudCA9IF9saW5lSW5kZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaGFzUGVuZGluZ0NvbnRlbnQpIHtcbiAgICAgIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBjYXB0dXJlU3RhcnQsIGNhcHR1cmVFbmQsIGZhbHNlKTtcbiAgICAgIHdyaXRlRm9sZGVkTGluZXMoc3RhdGUsIHN0YXRlLmxpbmUgLSBfbGluZSk7XG4gICAgICBjYXB0dXJlU3RhcnQgPSBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG4gICAgICBoYXNQZW5kaW5nQ29udGVudCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghaXNfV0hJVEVfU1BBQ0UoY2gpKSB7XG4gICAgICBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb24gKyAxO1xuICAgIH1cblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgfVxuXG4gIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBjYXB0dXJlU3RhcnQsIGNhcHR1cmVFbmQsIGZhbHNlKTtcblxuICBpZiAoc3RhdGUucmVzdWx0KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBzdGF0ZS5raW5kID0gX2tpbmQ7XG4gIHN0YXRlLnJlc3VsdCA9IF9yZXN1bHQ7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcmVhZFNpbmdsZVF1b3RlZFNjYWxhcihzdGF0ZSwgbm9kZUluZGVudCkge1xuICB2YXIgY2gsXG4gICAgICBjYXB0dXJlU3RhcnQsIGNhcHR1cmVFbmQ7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICBpZiAoY2ggIT09IDB4MjcvKiAnICovKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3RhdGUua2luZCA9ICdzY2FsYXInO1xuICBzdGF0ZS5yZXN1bHQgPSAnJztcbiAgc3RhdGUucG9zaXRpb24rKztcbiAgY2FwdHVyZVN0YXJ0ID0gY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gIHdoaWxlICgoY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSkgIT09IDApIHtcbiAgICBpZiAoY2ggPT09IDB4MjcvKiAnICovKSB7XG4gICAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBzdGF0ZS5wb3NpdGlvbiwgdHJ1ZSk7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICAgIGlmIChjaCA9PT0gMHgyNy8qICcgKi8pIHtcbiAgICAgICAgY2FwdHVyZVN0YXJ0ID0gc3RhdGUucG9zaXRpb247XG4gICAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgICAgIGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIGlmIChpc19FT0woY2gpKSB7XG4gICAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBjYXB0dXJlRW5kLCB0cnVlKTtcbiAgICAgIHdyaXRlRm9sZGVkTGluZXMoc3RhdGUsIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIGZhbHNlLCBub2RlSW5kZW50KSk7XG4gICAgICBjYXB0dXJlU3RhcnQgPSBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG5cbiAgICB9IGVsc2UgaWYgKHN0YXRlLnBvc2l0aW9uID09PSBzdGF0ZS5saW5lU3RhcnQgJiYgdGVzdERvY3VtZW50U2VwYXJhdG9yKHN0YXRlKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuZXhwZWN0ZWQgZW5kIG9mIHRoZSBkb2N1bWVudCB3aXRoaW4gYSBzaW5nbGUgcXVvdGVkIHNjYWxhcicpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgICBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG4gICAgfVxuICB9XG5cbiAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuZXhwZWN0ZWQgZW5kIG9mIHRoZSBzdHJlYW0gd2l0aGluIGEgc2luZ2xlIHF1b3RlZCBzY2FsYXInKTtcbn1cblxuZnVuY3Rpb24gcmVhZERvdWJsZVF1b3RlZFNjYWxhcihzdGF0ZSwgbm9kZUluZGVudCkge1xuICB2YXIgY2FwdHVyZVN0YXJ0LFxuICAgICAgY2FwdHVyZUVuZCxcbiAgICAgIGhleExlbmd0aCxcbiAgICAgIGhleFJlc3VsdCxcbiAgICAgIHRtcCxcbiAgICAgIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoICE9PSAweDIyLyogXCIgKi8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdGF0ZS5raW5kID0gJ3NjYWxhcic7XG4gIHN0YXRlLnJlc3VsdCA9ICcnO1xuICBzdGF0ZS5wb3NpdGlvbisrO1xuICBjYXB0dXJlU3RhcnQgPSBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG5cbiAgd2hpbGUgKChjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pKSAhPT0gMCkge1xuICAgIGlmIChjaCA9PT0gMHgyMi8qIFwiICovKSB7XG4gICAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBzdGF0ZS5wb3NpdGlvbiwgdHJ1ZSk7XG4gICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICB9IGVsc2UgaWYgKGNoID09PSAweDVDLyogXFwgKi8pIHtcbiAgICAgIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBjYXB0dXJlU3RhcnQsIHN0YXRlLnBvc2l0aW9uLCB0cnVlKTtcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcblxuICAgICAgaWYgKGlzX0VPTChjaCkpIHtcbiAgICAgICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgZmFsc2UsIG5vZGVJbmRlbnQpO1xuXG4gICAgICAgIC8vIFRPRE86IHJld29yayB0byBpbmxpbmUgZm4gd2l0aCBubyB0eXBlIGNhc3Q/XG4gICAgICB9IGVsc2UgaWYgKGNoIDwgMjU2ICYmIHNpbXBsZUVzY2FwZUNoZWNrW2NoXSkge1xuICAgICAgICBzdGF0ZS5yZXN1bHQgKz0gc2ltcGxlRXNjYXBlTWFwW2NoXTtcbiAgICAgICAgc3RhdGUucG9zaXRpb24rKztcblxuICAgICAgfSBlbHNlIGlmICgodG1wID0gZXNjYXBlZEhleExlbihjaCkpID4gMCkge1xuICAgICAgICBoZXhMZW5ndGggPSB0bXA7XG4gICAgICAgIGhleFJlc3VsdCA9IDA7XG5cbiAgICAgICAgZm9yICg7IGhleExlbmd0aCA+IDA7IGhleExlbmd0aC0tKSB7XG4gICAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuXG4gICAgICAgICAgaWYgKCh0bXAgPSBmcm9tSGV4Q29kZShjaCkpID49IDApIHtcbiAgICAgICAgICAgIGhleFJlc3VsdCA9IChoZXhSZXN1bHQgPDwgNCkgKyB0bXA7XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2V4cGVjdGVkIGhleGFkZWNpbWFsIGNoYXJhY3RlcicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlLnJlc3VsdCArPSBjaGFyRnJvbUNvZGVwb2ludChoZXhSZXN1bHQpO1xuXG4gICAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmtub3duIGVzY2FwZSBzZXF1ZW5jZScpO1xuICAgICAgfVxuXG4gICAgICBjYXB0dXJlU3RhcnQgPSBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG5cbiAgICB9IGVsc2UgaWYgKGlzX0VPTChjaCkpIHtcbiAgICAgIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBjYXB0dXJlU3RhcnQsIGNhcHR1cmVFbmQsIHRydWUpO1xuICAgICAgd3JpdGVGb2xkZWRMaW5lcyhzdGF0ZSwgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgZmFsc2UsIG5vZGVJbmRlbnQpKTtcbiAgICAgIGNhcHR1cmVTdGFydCA9IGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcblxuICAgIH0gZWxzZSBpZiAoc3RhdGUucG9zaXRpb24gPT09IHN0YXRlLmxpbmVTdGFydCAmJiB0ZXN0RG9jdW1lbnRTZXBhcmF0b3Ioc3RhdGUpKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5leHBlY3RlZCBlbmQgb2YgdGhlIGRvY3VtZW50IHdpdGhpbiBhIGRvdWJsZSBxdW90ZWQgc2NhbGFyJyk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUucG9zaXRpb24rKztcbiAgICAgIGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgICB9XG4gIH1cblxuICB0aHJvd0Vycm9yKHN0YXRlLCAndW5leHBlY3RlZCBlbmQgb2YgdGhlIHN0cmVhbSB3aXRoaW4gYSBkb3VibGUgcXVvdGVkIHNjYWxhcicpO1xufVxuXG5mdW5jdGlvbiByZWFkRmxvd0NvbGxlY3Rpb24oc3RhdGUsIG5vZGVJbmRlbnQpIHtcbiAgdmFyIHJlYWROZXh0ID0gdHJ1ZSxcbiAgICAgIF9saW5lLFxuICAgICAgX2xpbmVTdGFydCxcbiAgICAgIF9wb3MsXG4gICAgICBfdGFnICAgICA9IHN0YXRlLnRhZyxcbiAgICAgIF9yZXN1bHQsXG4gICAgICBfYW5jaG9yICA9IHN0YXRlLmFuY2hvcixcbiAgICAgIGZvbGxvd2luZyxcbiAgICAgIHRlcm1pbmF0b3IsXG4gICAgICBpc1BhaXIsXG4gICAgICBpc0V4cGxpY2l0UGFpcixcbiAgICAgIGlzTWFwcGluZyxcbiAgICAgIG92ZXJyaWRhYmxlS2V5cyA9IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBrZXlOb2RlLFxuICAgICAga2V5VGFnLFxuICAgICAgdmFsdWVOb2RlLFxuICAgICAgY2g7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICBpZiAoY2ggPT09IDB4NUIvKiBbICovKSB7XG4gICAgdGVybWluYXRvciA9IDB4NUQ7LyogXSAqL1xuICAgIGlzTWFwcGluZyA9IGZhbHNlO1xuICAgIF9yZXN1bHQgPSBbXTtcbiAgfSBlbHNlIGlmIChjaCA9PT0gMHg3Qi8qIHsgKi8pIHtcbiAgICB0ZXJtaW5hdG9yID0gMHg3RDsvKiB9ICovXG4gICAgaXNNYXBwaW5nID0gdHJ1ZTtcbiAgICBfcmVzdWx0ID0ge307XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHN0YXRlLmFuY2hvciAhPT0gbnVsbCkge1xuICAgIHN0YXRlLmFuY2hvck1hcFtzdGF0ZS5hbmNob3JdID0gX3Jlc3VsdDtcbiAgfVxuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcblxuICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCBub2RlSW5kZW50KTtcblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICBpZiAoY2ggPT09IHRlcm1pbmF0b3IpIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgICBzdGF0ZS50YWcgPSBfdGFnO1xuICAgICAgc3RhdGUuYW5jaG9yID0gX2FuY2hvcjtcbiAgICAgIHN0YXRlLmtpbmQgPSBpc01hcHBpbmcgPyAnbWFwcGluZycgOiAnc2VxdWVuY2UnO1xuICAgICAgc3RhdGUucmVzdWx0ID0gX3Jlc3VsdDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoIXJlYWROZXh0KSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnbWlzc2VkIGNvbW1hIGJldHdlZW4gZmxvdyBjb2xsZWN0aW9uIGVudHJpZXMnKTtcbiAgICB9IGVsc2UgaWYgKGNoID09PSAweDJDLyogLCAqLykge1xuICAgICAgLy8gXCJmbG93IGNvbGxlY3Rpb24gZW50cmllcyBjYW4gbmV2ZXIgYmUgY29tcGxldGVseSBlbXB0eVwiLCBhcyBwZXIgWUFNTCAxLjIsIHNlY3Rpb24gNy40XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCBcImV4cGVjdGVkIHRoZSBub2RlIGNvbnRlbnQsIGJ1dCBmb3VuZCAnLCdcIik7XG4gICAgfVxuXG4gICAga2V5VGFnID0ga2V5Tm9kZSA9IHZhbHVlTm9kZSA9IG51bGw7XG4gICAgaXNQYWlyID0gaXNFeHBsaWNpdFBhaXIgPSBmYWxzZTtcblxuICAgIGlmIChjaCA9PT0gMHgzRi8qID8gKi8pIHtcbiAgICAgIGZvbGxvd2luZyA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAxKTtcblxuICAgICAgaWYgKGlzX1dTX09SX0VPTChmb2xsb3dpbmcpKSB7XG4gICAgICAgIGlzUGFpciA9IGlzRXhwbGljaXRQYWlyID0gdHJ1ZTtcbiAgICAgICAgc3RhdGUucG9zaXRpb24rKztcbiAgICAgICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgbm9kZUluZGVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX2xpbmUgPSBzdGF0ZS5saW5lOyAvLyBTYXZlIHRoZSBjdXJyZW50IGxpbmUuXG4gICAgX2xpbmVTdGFydCA9IHN0YXRlLmxpbmVTdGFydDtcbiAgICBfcG9zID0gc3RhdGUucG9zaXRpb247XG4gICAgY29tcG9zZU5vZGUoc3RhdGUsIG5vZGVJbmRlbnQsIENPTlRFWFRfRkxPV19JTiwgZmFsc2UsIHRydWUpO1xuICAgIGtleVRhZyA9IHN0YXRlLnRhZztcbiAgICBrZXlOb2RlID0gc3RhdGUucmVzdWx0O1xuICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIG5vZGVJbmRlbnQpO1xuXG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICAgIGlmICgoaXNFeHBsaWNpdFBhaXIgfHwgc3RhdGUubGluZSA9PT0gX2xpbmUpICYmIGNoID09PSAweDNBLyogOiAqLykge1xuICAgICAgaXNQYWlyID0gdHJ1ZTtcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIG5vZGVJbmRlbnQpO1xuICAgICAgY29tcG9zZU5vZGUoc3RhdGUsIG5vZGVJbmRlbnQsIENPTlRFWFRfRkxPV19JTiwgZmFsc2UsIHRydWUpO1xuICAgICAgdmFsdWVOb2RlID0gc3RhdGUucmVzdWx0O1xuICAgIH1cblxuICAgIGlmIChpc01hcHBpbmcpIHtcbiAgICAgIHN0b3JlTWFwcGluZ1BhaXIoc3RhdGUsIF9yZXN1bHQsIG92ZXJyaWRhYmxlS2V5cywga2V5VGFnLCBrZXlOb2RlLCB2YWx1ZU5vZGUsIF9saW5lLCBfbGluZVN0YXJ0LCBfcG9zKTtcbiAgICB9IGVsc2UgaWYgKGlzUGFpcikge1xuICAgICAgX3Jlc3VsdC5wdXNoKHN0b3JlTWFwcGluZ1BhaXIoc3RhdGUsIG51bGwsIG92ZXJyaWRhYmxlS2V5cywga2V5VGFnLCBrZXlOb2RlLCB2YWx1ZU5vZGUsIF9saW5lLCBfbGluZVN0YXJ0LCBfcG9zKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9yZXN1bHQucHVzaChrZXlOb2RlKTtcbiAgICB9XG5cbiAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCBub2RlSW5kZW50KTtcblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICBpZiAoY2ggPT09IDB4MkMvKiAsICovKSB7XG4gICAgICByZWFkTmV4dCA9IHRydWU7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlYWROZXh0ID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuZXhwZWN0ZWQgZW5kIG9mIHRoZSBzdHJlYW0gd2l0aGluIGEgZmxvdyBjb2xsZWN0aW9uJyk7XG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9ja1NjYWxhcihzdGF0ZSwgbm9kZUluZGVudCkge1xuICB2YXIgY2FwdHVyZVN0YXJ0LFxuICAgICAgZm9sZGluZyxcbiAgICAgIGNob21waW5nICAgICAgID0gQ0hPTVBJTkdfQ0xJUCxcbiAgICAgIGRpZFJlYWRDb250ZW50ID0gZmFsc2UsXG4gICAgICBkZXRlY3RlZEluZGVudCA9IGZhbHNlLFxuICAgICAgdGV4dEluZGVudCAgICAgPSBub2RlSW5kZW50LFxuICAgICAgZW1wdHlMaW5lcyAgICAgPSAwLFxuICAgICAgYXRNb3JlSW5kZW50ZWQgPSBmYWxzZSxcbiAgICAgIHRtcCxcbiAgICAgIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoID09PSAweDdDLyogfCAqLykge1xuICAgIGZvbGRpbmcgPSBmYWxzZTtcbiAgfSBlbHNlIGlmIChjaCA9PT0gMHgzRS8qID4gKi8pIHtcbiAgICBmb2xkaW5nID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdGF0ZS5raW5kID0gJ3NjYWxhcic7XG4gIHN0YXRlLnJlc3VsdCA9ICcnO1xuXG4gIHdoaWxlIChjaCAhPT0gMCkge1xuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcblxuICAgIGlmIChjaCA9PT0gMHgyQi8qICsgKi8gfHwgY2ggPT09IDB4MkQvKiAtICovKSB7XG4gICAgICBpZiAoQ0hPTVBJTkdfQ0xJUCA9PT0gY2hvbXBpbmcpIHtcbiAgICAgICAgY2hvbXBpbmcgPSAoY2ggPT09IDB4MkIvKiArICovKSA/IENIT01QSU5HX0tFRVAgOiBDSE9NUElOR19TVFJJUDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdyZXBlYXQgb2YgYSBjaG9tcGluZyBtb2RlIGlkZW50aWZpZXInKTtcbiAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAoKHRtcCA9IGZyb21EZWNpbWFsQ29kZShjaCkpID49IDApIHtcbiAgICAgIGlmICh0bXAgPT09IDApIHtcbiAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2JhZCBleHBsaWNpdCBpbmRlbnRhdGlvbiB3aWR0aCBvZiBhIGJsb2NrIHNjYWxhcjsgaXQgY2Fubm90IGJlIGxlc3MgdGhhbiBvbmUnKTtcbiAgICAgIH0gZWxzZSBpZiAoIWRldGVjdGVkSW5kZW50KSB7XG4gICAgICAgIHRleHRJbmRlbnQgPSBub2RlSW5kZW50ICsgdG1wIC0gMTtcbiAgICAgICAgZGV0ZWN0ZWRJbmRlbnQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3JlcGVhdCBvZiBhbiBpbmRlbnRhdGlvbiB3aWR0aCBpZGVudGlmaWVyJyk7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKGlzX1dISVRFX1NQQUNFKGNoKSkge1xuICAgIGRvIHsgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pOyB9XG4gICAgd2hpbGUgKGlzX1dISVRFX1NQQUNFKGNoKSk7XG5cbiAgICBpZiAoY2ggPT09IDB4MjMvKiAjICovKSB7XG4gICAgICBkbyB7IGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTsgfVxuICAgICAgd2hpbGUgKCFpc19FT0woY2gpICYmIChjaCAhPT0gMCkpO1xuICAgIH1cbiAgfVxuXG4gIHdoaWxlIChjaCAhPT0gMCkge1xuICAgIHJlYWRMaW5lQnJlYWsoc3RhdGUpO1xuICAgIHN0YXRlLmxpbmVJbmRlbnQgPSAwO1xuXG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICAgIHdoaWxlICgoIWRldGVjdGVkSW5kZW50IHx8IHN0YXRlLmxpbmVJbmRlbnQgPCB0ZXh0SW5kZW50KSAmJlxuICAgICAgICAgICAoY2ggPT09IDB4MjAvKiBTcGFjZSAqLykpIHtcbiAgICAgIHN0YXRlLmxpbmVJbmRlbnQrKztcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBpZiAoIWRldGVjdGVkSW5kZW50ICYmIHN0YXRlLmxpbmVJbmRlbnQgPiB0ZXh0SW5kZW50KSB7XG4gICAgICB0ZXh0SW5kZW50ID0gc3RhdGUubGluZUluZGVudDtcbiAgICB9XG5cbiAgICBpZiAoaXNfRU9MKGNoKSkge1xuICAgICAgZW1wdHlMaW5lcysrO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gRW5kIG9mIHRoZSBzY2FsYXIuXG4gICAgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPCB0ZXh0SW5kZW50KSB7XG5cbiAgICAgIC8vIFBlcmZvcm0gdGhlIGNob21waW5nLlxuICAgICAgaWYgKGNob21waW5nID09PSBDSE9NUElOR19LRUVQKSB7XG4gICAgICAgIHN0YXRlLnJlc3VsdCArPSBjb21tb24ucmVwZWF0KCdcXG4nLCBkaWRSZWFkQ29udGVudCA/IDEgKyBlbXB0eUxpbmVzIDogZW1wdHlMaW5lcyk7XG4gICAgICB9IGVsc2UgaWYgKGNob21waW5nID09PSBDSE9NUElOR19DTElQKSB7XG4gICAgICAgIGlmIChkaWRSZWFkQ29udGVudCkgeyAvLyBpLmUuIG9ubHkgaWYgdGhlIHNjYWxhciBpcyBub3QgZW1wdHkuXG4gICAgICAgICAgc3RhdGUucmVzdWx0ICs9ICdcXG4nO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEJyZWFrIHRoaXMgYHdoaWxlYCBjeWNsZSBhbmQgZ28gdG8gdGhlIGZ1bmNpdG9uJ3MgZXBpbG9ndWUuXG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyBGb2xkZWQgc3R5bGU6IHVzZSBmYW5jeSBydWxlcyB0byBoYW5kbGUgbGluZSBicmVha3MuXG4gICAgaWYgKGZvbGRpbmcpIHtcblxuICAgICAgLy8gTGluZXMgc3RhcnRpbmcgd2l0aCB3aGl0ZSBzcGFjZSBjaGFyYWN0ZXJzIChtb3JlLWluZGVudGVkIGxpbmVzKSBhcmUgbm90IGZvbGRlZC5cbiAgICAgIGlmIChpc19XSElURV9TUEFDRShjaCkpIHtcbiAgICAgICAgYXRNb3JlSW5kZW50ZWQgPSB0cnVlO1xuICAgICAgICAvLyBleGNlcHQgZm9yIHRoZSBmaXJzdCBjb250ZW50IGxpbmUgKGNmLiBFeGFtcGxlIDguMSlcbiAgICAgICAgc3RhdGUucmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoJ1xcbicsIGRpZFJlYWRDb250ZW50ID8gMSArIGVtcHR5TGluZXMgOiBlbXB0eUxpbmVzKTtcblxuICAgICAgLy8gRW5kIG9mIG1vcmUtaW5kZW50ZWQgYmxvY2suXG4gICAgICB9IGVsc2UgaWYgKGF0TW9yZUluZGVudGVkKSB7XG4gICAgICAgIGF0TW9yZUluZGVudGVkID0gZmFsc2U7XG4gICAgICAgIHN0YXRlLnJlc3VsdCArPSBjb21tb24ucmVwZWF0KCdcXG4nLCBlbXB0eUxpbmVzICsgMSk7XG5cbiAgICAgIC8vIEp1c3Qgb25lIGxpbmUgYnJlYWsgLSBwZXJjZWl2ZSBhcyB0aGUgc2FtZSBsaW5lLlxuICAgICAgfSBlbHNlIGlmIChlbXB0eUxpbmVzID09PSAwKSB7XG4gICAgICAgIGlmIChkaWRSZWFkQ29udGVudCkgeyAvLyBpLmUuIG9ubHkgaWYgd2UgaGF2ZSBhbHJlYWR5IHJlYWQgc29tZSBzY2FsYXIgY29udGVudC5cbiAgICAgICAgICBzdGF0ZS5yZXN1bHQgKz0gJyAnO1xuICAgICAgICB9XG5cbiAgICAgIC8vIFNldmVyYWwgbGluZSBicmVha3MgLSBwZXJjZWl2ZSBhcyBkaWZmZXJlbnQgbGluZXMuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5yZXN1bHQgKz0gY29tbW9uLnJlcGVhdCgnXFxuJywgZW1wdHlMaW5lcyk7XG4gICAgICB9XG5cbiAgICAvLyBMaXRlcmFsIHN0eWxlOiBqdXN0IGFkZCBleGFjdCBudW1iZXIgb2YgbGluZSBicmVha3MgYmV0d2VlbiBjb250ZW50IGxpbmVzLlxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBLZWVwIGFsbCBsaW5lIGJyZWFrcyBleGNlcHQgdGhlIGhlYWRlciBsaW5lIGJyZWFrLlxuICAgICAgc3RhdGUucmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoJ1xcbicsIGRpZFJlYWRDb250ZW50ID8gMSArIGVtcHR5TGluZXMgOiBlbXB0eUxpbmVzKTtcbiAgICB9XG5cbiAgICBkaWRSZWFkQ29udGVudCA9IHRydWU7XG4gICAgZGV0ZWN0ZWRJbmRlbnQgPSB0cnVlO1xuICAgIGVtcHR5TGluZXMgPSAwO1xuICAgIGNhcHR1cmVTdGFydCA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gICAgd2hpbGUgKCFpc19FT0woY2gpICYmIChjaCAhPT0gMCkpIHtcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBzdGF0ZS5wb3NpdGlvbiwgZmFsc2UpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9ja1NlcXVlbmNlKHN0YXRlLCBub2RlSW5kZW50KSB7XG4gIHZhciBfbGluZSxcbiAgICAgIF90YWcgICAgICA9IHN0YXRlLnRhZyxcbiAgICAgIF9hbmNob3IgICA9IHN0YXRlLmFuY2hvcixcbiAgICAgIF9yZXN1bHQgICA9IFtdLFxuICAgICAgZm9sbG93aW5nLFxuICAgICAgZGV0ZWN0ZWQgID0gZmFsc2UsXG4gICAgICBjaDtcblxuICAvLyB0aGVyZSBpcyBhIGxlYWRpbmcgdGFiIGJlZm9yZSB0aGlzIHRva2VuLCBzbyBpdCBjYW4ndCBiZSBhIGJsb2NrIHNlcXVlbmNlL21hcHBpbmc7XG4gIC8vIGl0IGNhbiBzdGlsbCBiZSBmbG93IHNlcXVlbmNlL21hcHBpbmcgb3IgYSBzY2FsYXJcbiAgaWYgKHN0YXRlLmZpcnN0VGFiSW5MaW5lICE9PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IF9yZXN1bHQ7XG4gIH1cblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIHdoaWxlIChjaCAhPT0gMCkge1xuICAgIGlmIChzdGF0ZS5maXJzdFRhYkluTGluZSAhPT0gLTEpIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uID0gc3RhdGUuZmlyc3RUYWJJbkxpbmU7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGFiIGNoYXJhY3RlcnMgbXVzdCBub3QgYmUgdXNlZCBpbiBpbmRlbnRhdGlvbicpO1xuICAgIH1cblxuICAgIGlmIChjaCAhPT0gMHgyRC8qIC0gKi8pIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGZvbGxvd2luZyA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAxKTtcblxuICAgIGlmICghaXNfV1NfT1JfRU9MKGZvbGxvd2luZykpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGRldGVjdGVkID0gdHJ1ZTtcbiAgICBzdGF0ZS5wb3NpdGlvbisrO1xuXG4gICAgaWYgKHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKSkge1xuICAgICAgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPD0gbm9kZUluZGVudCkge1xuICAgICAgICBfcmVzdWx0LnB1c2gobnVsbCk7XG4gICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9saW5lID0gc3RhdGUubGluZTtcbiAgICBjb21wb3NlTm9kZShzdGF0ZSwgbm9kZUluZGVudCwgQ09OVEVYVF9CTE9DS19JTiwgZmFsc2UsIHRydWUpO1xuICAgIF9yZXN1bHQucHVzaChzdGF0ZS5yZXN1bHQpO1xuICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICBpZiAoKHN0YXRlLmxpbmUgPT09IF9saW5lIHx8IHN0YXRlLmxpbmVJbmRlbnQgPiBub2RlSW5kZW50KSAmJiAoY2ggIT09IDApKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnYmFkIGluZGVudGF0aW9uIG9mIGEgc2VxdWVuY2UgZW50cnknKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPCBub2RlSW5kZW50KSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoZGV0ZWN0ZWQpIHtcbiAgICBzdGF0ZS50YWcgPSBfdGFnO1xuICAgIHN0YXRlLmFuY2hvciA9IF9hbmNob3I7XG4gICAgc3RhdGUua2luZCA9ICdzZXF1ZW5jZSc7XG4gICAgc3RhdGUucmVzdWx0ID0gX3Jlc3VsdDtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9ja01hcHBpbmcoc3RhdGUsIG5vZGVJbmRlbnQsIGZsb3dJbmRlbnQpIHtcbiAgdmFyIGZvbGxvd2luZyxcbiAgICAgIGFsbG93Q29tcGFjdCxcbiAgICAgIF9saW5lLFxuICAgICAgX2tleUxpbmUsXG4gICAgICBfa2V5TGluZVN0YXJ0LFxuICAgICAgX2tleVBvcyxcbiAgICAgIF90YWcgICAgICAgICAgPSBzdGF0ZS50YWcsXG4gICAgICBfYW5jaG9yICAgICAgID0gc3RhdGUuYW5jaG9yLFxuICAgICAgX3Jlc3VsdCAgICAgICA9IHt9LFxuICAgICAgb3ZlcnJpZGFibGVLZXlzID0gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgIGtleVRhZyAgICAgICAgPSBudWxsLFxuICAgICAga2V5Tm9kZSAgICAgICA9IG51bGwsXG4gICAgICB2YWx1ZU5vZGUgICAgID0gbnVsbCxcbiAgICAgIGF0RXhwbGljaXRLZXkgPSBmYWxzZSxcbiAgICAgIGRldGVjdGVkICAgICAgPSBmYWxzZSxcbiAgICAgIGNoO1xuXG4gIC8vIHRoZXJlIGlzIGEgbGVhZGluZyB0YWIgYmVmb3JlIHRoaXMgdG9rZW4sIHNvIGl0IGNhbid0IGJlIGEgYmxvY2sgc2VxdWVuY2UvbWFwcGluZztcbiAgLy8gaXQgY2FuIHN0aWxsIGJlIGZsb3cgc2VxdWVuY2UvbWFwcGluZyBvciBhIHNjYWxhclxuICBpZiAoc3RhdGUuZmlyc3RUYWJJbkxpbmUgIT09IC0xKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHN0YXRlLmFuY2hvciAhPT0gbnVsbCkge1xuICAgIHN0YXRlLmFuY2hvck1hcFtzdGF0ZS5hbmNob3JdID0gX3Jlc3VsdDtcbiAgfVxuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgd2hpbGUgKGNoICE9PSAwKSB7XG4gICAgaWYgKCFhdEV4cGxpY2l0S2V5ICYmIHN0YXRlLmZpcnN0VGFiSW5MaW5lICE9PSAtMSkge1xuICAgICAgc3RhdGUucG9zaXRpb24gPSBzdGF0ZS5maXJzdFRhYkluTGluZTtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd0YWIgY2hhcmFjdGVycyBtdXN0IG5vdCBiZSB1c2VkIGluIGluZGVudGF0aW9uJyk7XG4gICAgfVxuXG4gICAgZm9sbG93aW5nID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbiArIDEpO1xuICAgIF9saW5lID0gc3RhdGUubGluZTsgLy8gU2F2ZSB0aGUgY3VycmVudCBsaW5lLlxuXG4gICAgLy9cbiAgICAvLyBFeHBsaWNpdCBub3RhdGlvbiBjYXNlLiBUaGVyZSBhcmUgdHdvIHNlcGFyYXRlIGJsb2NrczpcbiAgICAvLyBmaXJzdCBmb3IgdGhlIGtleSAoZGVub3RlZCBieSBcIj9cIikgYW5kIHNlY29uZCBmb3IgdGhlIHZhbHVlIChkZW5vdGVkIGJ5IFwiOlwiKVxuICAgIC8vXG4gICAgaWYgKChjaCA9PT0gMHgzRi8qID8gKi8gfHwgY2ggPT09IDB4M0EvKiA6ICovKSAmJiBpc19XU19PUl9FT0woZm9sbG93aW5nKSkge1xuXG4gICAgICBpZiAoY2ggPT09IDB4M0YvKiA/ICovKSB7XG4gICAgICAgIGlmIChhdEV4cGxpY2l0S2V5KSB7XG4gICAgICAgICAgc3RvcmVNYXBwaW5nUGFpcihzdGF0ZSwgX3Jlc3VsdCwgb3ZlcnJpZGFibGVLZXlzLCBrZXlUYWcsIGtleU5vZGUsIG51bGwsIF9rZXlMaW5lLCBfa2V5TGluZVN0YXJ0LCBfa2V5UG9zKTtcbiAgICAgICAgICBrZXlUYWcgPSBrZXlOb2RlID0gdmFsdWVOb2RlID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGRldGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgYXRFeHBsaWNpdEtleSA9IHRydWU7XG4gICAgICAgIGFsbG93Q29tcGFjdCA9IHRydWU7XG5cbiAgICAgIH0gZWxzZSBpZiAoYXRFeHBsaWNpdEtleSkge1xuICAgICAgICAvLyBpLmUuIDB4M0EvKiA6ICovID09PSBjaGFyYWN0ZXIgYWZ0ZXIgdGhlIGV4cGxpY2l0IGtleS5cbiAgICAgICAgYXRFeHBsaWNpdEtleSA9IGZhbHNlO1xuICAgICAgICBhbGxvd0NvbXBhY3QgPSB0cnVlO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnaW5jb21wbGV0ZSBleHBsaWNpdCBtYXBwaW5nIHBhaXI7IGEga2V5IG5vZGUgaXMgbWlzc2VkOyBvciBmb2xsb3dlZCBieSBhIG5vbi10YWJ1bGF0ZWQgZW1wdHkgbGluZScpO1xuICAgICAgfVxuXG4gICAgICBzdGF0ZS5wb3NpdGlvbiArPSAxO1xuICAgICAgY2ggPSBmb2xsb3dpbmc7XG5cbiAgICAvL1xuICAgIC8vIEltcGxpY2l0IG5vdGF0aW9uIGNhc2UuIEZsb3ctc3R5bGUgbm9kZSBhcyB0aGUga2V5IGZpcnN0LCB0aGVuIFwiOlwiLCBhbmQgdGhlIHZhbHVlLlxuICAgIC8vXG4gICAgfSBlbHNlIHtcbiAgICAgIF9rZXlMaW5lID0gc3RhdGUubGluZTtcbiAgICAgIF9rZXlMaW5lU3RhcnQgPSBzdGF0ZS5saW5lU3RhcnQ7XG4gICAgICBfa2V5UG9zID0gc3RhdGUucG9zaXRpb247XG5cbiAgICAgIGlmICghY29tcG9zZU5vZGUoc3RhdGUsIGZsb3dJbmRlbnQsIENPTlRFWFRfRkxPV19PVVQsIGZhbHNlLCB0cnVlKSkge1xuICAgICAgICAvLyBOZWl0aGVyIGltcGxpY2l0IG5vciBleHBsaWNpdCBub3RhdGlvbi5cbiAgICAgICAgLy8gUmVhZGluZyBpcyBkb25lLiBHbyB0byB0aGUgZXBpbG9ndWUuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUubGluZSA9PT0gX2xpbmUpIHtcbiAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICAgICAgICB3aGlsZSAoaXNfV0hJVEVfU1BBQ0UoY2gpKSB7XG4gICAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoID09PSAweDNBLyogOiAqLykge1xuICAgICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcblxuICAgICAgICAgIGlmICghaXNfV1NfT1JfRU9MKGNoKSkge1xuICAgICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2Egd2hpdGVzcGFjZSBjaGFyYWN0ZXIgaXMgZXhwZWN0ZWQgYWZ0ZXIgdGhlIGtleS12YWx1ZSBzZXBhcmF0b3Igd2l0aGluIGEgYmxvY2sgbWFwcGluZycpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhdEV4cGxpY2l0S2V5KSB7XG4gICAgICAgICAgICBzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBfcmVzdWx0LCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgbnVsbCwgX2tleUxpbmUsIF9rZXlMaW5lU3RhcnQsIF9rZXlQb3MpO1xuICAgICAgICAgICAga2V5VGFnID0ga2V5Tm9kZSA9IHZhbHVlTm9kZSA9IG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGV0ZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgIGF0RXhwbGljaXRLZXkgPSBmYWxzZTtcbiAgICAgICAgICBhbGxvd0NvbXBhY3QgPSBmYWxzZTtcbiAgICAgICAgICBrZXlUYWcgPSBzdGF0ZS50YWc7XG4gICAgICAgICAga2V5Tm9kZSA9IHN0YXRlLnJlc3VsdDtcblxuICAgICAgICB9IGVsc2UgaWYgKGRldGVjdGVkKSB7XG4gICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2NhbiBub3QgcmVhZCBhbiBpbXBsaWNpdCBtYXBwaW5nIHBhaXI7IGEgY29sb24gaXMgbWlzc2VkJyk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGF0ZS50YWcgPSBfdGFnO1xuICAgICAgICAgIHN0YXRlLmFuY2hvciA9IF9hbmNob3I7XG4gICAgICAgICAgcmV0dXJuIHRydWU7IC8vIEtlZXAgdGhlIHJlc3VsdCBvZiBgY29tcG9zZU5vZGVgLlxuICAgICAgICB9XG5cbiAgICAgIH0gZWxzZSBpZiAoZGV0ZWN0ZWQpIHtcbiAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2NhbiBub3QgcmVhZCBhIGJsb2NrIG1hcHBpbmcgZW50cnk7IGEgbXVsdGlsaW5lIGtleSBtYXkgbm90IGJlIGFuIGltcGxpY2l0IGtleScpO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS50YWcgPSBfdGFnO1xuICAgICAgICBzdGF0ZS5hbmNob3IgPSBfYW5jaG9yO1xuICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gS2VlcCB0aGUgcmVzdWx0IG9mIGBjb21wb3NlTm9kZWAuXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBDb21tb24gcmVhZGluZyBjb2RlIGZvciBib3RoIGV4cGxpY2l0IGFuZCBpbXBsaWNpdCBub3RhdGlvbnMuXG4gICAgLy9cbiAgICBpZiAoc3RhdGUubGluZSA9PT0gX2xpbmUgfHwgc3RhdGUubGluZUluZGVudCA+IG5vZGVJbmRlbnQpIHtcbiAgICAgIGlmIChhdEV4cGxpY2l0S2V5KSB7XG4gICAgICAgIF9rZXlMaW5lID0gc3RhdGUubGluZTtcbiAgICAgICAgX2tleUxpbmVTdGFydCA9IHN0YXRlLmxpbmVTdGFydDtcbiAgICAgICAgX2tleVBvcyA9IHN0YXRlLnBvc2l0aW9uO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29tcG9zZU5vZGUoc3RhdGUsIG5vZGVJbmRlbnQsIENPTlRFWFRfQkxPQ0tfT1VULCB0cnVlLCBhbGxvd0NvbXBhY3QpKSB7XG4gICAgICAgIGlmIChhdEV4cGxpY2l0S2V5KSB7XG4gICAgICAgICAga2V5Tm9kZSA9IHN0YXRlLnJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZU5vZGUgPSBzdGF0ZS5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFhdEV4cGxpY2l0S2V5KSB7XG4gICAgICAgIHN0b3JlTWFwcGluZ1BhaXIoc3RhdGUsIF9yZXN1bHQsIG92ZXJyaWRhYmxlS2V5cywga2V5VGFnLCBrZXlOb2RlLCB2YWx1ZU5vZGUsIF9rZXlMaW5lLCBfa2V5TGluZVN0YXJ0LCBfa2V5UG9zKTtcbiAgICAgICAga2V5VGFnID0ga2V5Tm9kZSA9IHZhbHVlTm9kZSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKChzdGF0ZS5saW5lID09PSBfbGluZSB8fCBzdGF0ZS5saW5lSW5kZW50ID4gbm9kZUluZGVudCkgJiYgKGNoICE9PSAwKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2JhZCBpbmRlbnRhdGlvbiBvZiBhIG1hcHBpbmcgZW50cnknKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPCBub2RlSW5kZW50KSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICAvL1xuICAvLyBFcGlsb2d1ZS5cbiAgLy9cblxuICAvLyBTcGVjaWFsIGNhc2U6IGxhc3QgbWFwcGluZydzIG5vZGUgY29udGFpbnMgb25seSB0aGUga2V5IGluIGV4cGxpY2l0IG5vdGF0aW9uLlxuICBpZiAoYXRFeHBsaWNpdEtleSkge1xuICAgIHN0b3JlTWFwcGluZ1BhaXIoc3RhdGUsIF9yZXN1bHQsIG92ZXJyaWRhYmxlS2V5cywga2V5VGFnLCBrZXlOb2RlLCBudWxsLCBfa2V5TGluZSwgX2tleUxpbmVTdGFydCwgX2tleVBvcyk7XG4gIH1cblxuICAvLyBFeHBvc2UgdGhlIHJlc3VsdGluZyBtYXBwaW5nLlxuICBpZiAoZGV0ZWN0ZWQpIHtcbiAgICBzdGF0ZS50YWcgPSBfdGFnO1xuICAgIHN0YXRlLmFuY2hvciA9IF9hbmNob3I7XG4gICAgc3RhdGUua2luZCA9ICdtYXBwaW5nJztcbiAgICBzdGF0ZS5yZXN1bHQgPSBfcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGRldGVjdGVkO1xufVxuXG5mdW5jdGlvbiByZWFkVGFnUHJvcGVydHkoc3RhdGUpIHtcbiAgdmFyIF9wb3NpdGlvbixcbiAgICAgIGlzVmVyYmF0aW0gPSBmYWxzZSxcbiAgICAgIGlzTmFtZWQgICAgPSBmYWxzZSxcbiAgICAgIHRhZ0hhbmRsZSxcbiAgICAgIHRhZ05hbWUsXG4gICAgICBjaDtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChjaCAhPT0gMHgyMS8qICEgKi8pIHJldHVybiBmYWxzZTtcblxuICBpZiAoc3RhdGUudGFnICE9PSBudWxsKSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2R1cGxpY2F0aW9uIG9mIGEgdGFnIHByb3BlcnR5Jyk7XG4gIH1cblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoID09PSAweDNDLyogPCAqLykge1xuICAgIGlzVmVyYmF0aW0gPSB0cnVlO1xuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcblxuICB9IGVsc2UgaWYgKGNoID09PSAweDIxLyogISAqLykge1xuICAgIGlzTmFtZWQgPSB0cnVlO1xuICAgIHRhZ0hhbmRsZSA9ICchISc7XG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuXG4gIH0gZWxzZSB7XG4gICAgdGFnSGFuZGxlID0gJyEnO1xuICB9XG5cbiAgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb247XG5cbiAgaWYgKGlzVmVyYmF0aW0pIHtcbiAgICBkbyB7IGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTsgfVxuICAgIHdoaWxlIChjaCAhPT0gMCAmJiBjaCAhPT0gMHgzRS8qID4gKi8pO1xuXG4gICAgaWYgKHN0YXRlLnBvc2l0aW9uIDwgc3RhdGUubGVuZ3RoKSB7XG4gICAgICB0YWdOYW1lID0gc3RhdGUuaW5wdXQuc2xpY2UoX3Bvc2l0aW9uLCBzdGF0ZS5wb3NpdGlvbik7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmV4cGVjdGVkIGVuZCBvZiB0aGUgc3RyZWFtIHdpdGhpbiBhIHZlcmJhdGltIHRhZycpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoY2ggIT09IDAgJiYgIWlzX1dTX09SX0VPTChjaCkpIHtcblxuICAgICAgaWYgKGNoID09PSAweDIxLyogISAqLykge1xuICAgICAgICBpZiAoIWlzTmFtZWQpIHtcbiAgICAgICAgICB0YWdIYW5kbGUgPSBzdGF0ZS5pbnB1dC5zbGljZShfcG9zaXRpb24gLSAxLCBzdGF0ZS5wb3NpdGlvbiArIDEpO1xuXG4gICAgICAgICAgaWYgKCFQQVRURVJOX1RBR19IQU5ETEUudGVzdCh0YWdIYW5kbGUpKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnbmFtZWQgdGFnIGhhbmRsZSBjYW5ub3QgY29udGFpbiBzdWNoIGNoYXJhY3RlcnMnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpc05hbWVkID0gdHJ1ZTtcbiAgICAgICAgICBfcG9zaXRpb24gPSBzdGF0ZS5wb3NpdGlvbiArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3RhZyBzdWZmaXggY2Fubm90IGNvbnRhaW4gZXhjbGFtYXRpb24gbWFya3MnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgdGFnTmFtZSA9IHN0YXRlLmlucHV0LnNsaWNlKF9wb3NpdGlvbiwgc3RhdGUucG9zaXRpb24pO1xuXG4gICAgaWYgKFBBVFRFUk5fRkxPV19JTkRJQ0FUT1JTLnRlc3QodGFnTmFtZSkpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd0YWcgc3VmZml4IGNhbm5vdCBjb250YWluIGZsb3cgaW5kaWNhdG9yIGNoYXJhY3RlcnMnKTtcbiAgICB9XG4gIH1cblxuICBpZiAodGFnTmFtZSAmJiAhUEFUVEVSTl9UQUdfVVJJLnRlc3QodGFnTmFtZSkpIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGFnIG5hbWUgY2Fubm90IGNvbnRhaW4gc3VjaCBjaGFyYWN0ZXJzOiAnICsgdGFnTmFtZSk7XG4gIH1cblxuICB0cnkge1xuICAgIHRhZ05hbWUgPSBkZWNvZGVVUklDb21wb25lbnQodGFnTmFtZSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICd0YWcgbmFtZSBpcyBtYWxmb3JtZWQ6ICcgKyB0YWdOYW1lKTtcbiAgfVxuXG4gIGlmIChpc1ZlcmJhdGltKSB7XG4gICAgc3RhdGUudGFnID0gdGFnTmFtZTtcblxuICB9IGVsc2UgaWYgKF9oYXNPd25Qcm9wZXJ0eSQxLmNhbGwoc3RhdGUudGFnTWFwLCB0YWdIYW5kbGUpKSB7XG4gICAgc3RhdGUudGFnID0gc3RhdGUudGFnTWFwW3RhZ0hhbmRsZV0gKyB0YWdOYW1lO1xuXG4gIH0gZWxzZSBpZiAodGFnSGFuZGxlID09PSAnIScpIHtcbiAgICBzdGF0ZS50YWcgPSAnIScgKyB0YWdOYW1lO1xuXG4gIH0gZWxzZSBpZiAodGFnSGFuZGxlID09PSAnISEnKSB7XG4gICAgc3RhdGUudGFnID0gJ3RhZzp5YW1sLm9yZywyMDAyOicgKyB0YWdOYW1lO1xuXG4gIH0gZWxzZSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuZGVjbGFyZWQgdGFnIGhhbmRsZSBcIicgKyB0YWdIYW5kbGUgKyAnXCInKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZWFkQW5jaG9yUHJvcGVydHkoc3RhdGUpIHtcbiAgdmFyIF9wb3NpdGlvbixcbiAgICAgIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoICE9PSAweDI2LyogJiAqLykgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnZHVwbGljYXRpb24gb2YgYW4gYW5jaG9yIHByb3BlcnR5Jyk7XG4gIH1cblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gIHdoaWxlIChjaCAhPT0gMCAmJiAhaXNfV1NfT1JfRU9MKGNoKSAmJiAhaXNfRkxPV19JTkRJQ0FUT1IoY2gpKSB7XG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICB9XG5cbiAgaWYgKHN0YXRlLnBvc2l0aW9uID09PSBfcG9zaXRpb24pIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnbmFtZSBvZiBhbiBhbmNob3Igbm9kZSBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIGNoYXJhY3RlcicpO1xuICB9XG5cbiAgc3RhdGUuYW5jaG9yID0gc3RhdGUuaW5wdXQuc2xpY2UoX3Bvc2l0aW9uLCBzdGF0ZS5wb3NpdGlvbik7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZWFkQWxpYXMoc3RhdGUpIHtcbiAgdmFyIF9wb3NpdGlvbiwgYWxpYXMsXG4gICAgICBjaDtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChjaCAhPT0gMHgyQS8qICogKi8pIHJldHVybiBmYWxzZTtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gIHdoaWxlIChjaCAhPT0gMCAmJiAhaXNfV1NfT1JfRU9MKGNoKSAmJiAhaXNfRkxPV19JTkRJQ0FUT1IoY2gpKSB7XG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICB9XG5cbiAgaWYgKHN0YXRlLnBvc2l0aW9uID09PSBfcG9zaXRpb24pIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnbmFtZSBvZiBhbiBhbGlhcyBub2RlIG11c3QgY29udGFpbiBhdCBsZWFzdCBvbmUgY2hhcmFjdGVyJyk7XG4gIH1cblxuICBhbGlhcyA9IHN0YXRlLmlucHV0LnNsaWNlKF9wb3NpdGlvbiwgc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmICghX2hhc093blByb3BlcnR5JDEuY2FsbChzdGF0ZS5hbmNob3JNYXAsIGFsaWFzKSkge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmlkZW50aWZpZWQgYWxpYXMgXCInICsgYWxpYXMgKyAnXCInKTtcbiAgfVxuXG4gIHN0YXRlLnJlc3VsdCA9IHN0YXRlLmFuY2hvck1hcFthbGlhc107XG4gIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbXBvc2VOb2RlKHN0YXRlLCBwYXJlbnRJbmRlbnQsIG5vZGVDb250ZXh0LCBhbGxvd1RvU2VlaywgYWxsb3dDb21wYWN0KSB7XG4gIHZhciBhbGxvd0Jsb2NrU3R5bGVzLFxuICAgICAgYWxsb3dCbG9ja1NjYWxhcnMsXG4gICAgICBhbGxvd0Jsb2NrQ29sbGVjdGlvbnMsXG4gICAgICBpbmRlbnRTdGF0dXMgPSAxLCAvLyAxOiB0aGlzPnBhcmVudCwgMDogdGhpcz1wYXJlbnQsIC0xOiB0aGlzPHBhcmVudFxuICAgICAgYXROZXdMaW5lICA9IGZhbHNlLFxuICAgICAgaGFzQ29udGVudCA9IGZhbHNlLFxuICAgICAgdHlwZUluZGV4LFxuICAgICAgdHlwZVF1YW50aXR5LFxuICAgICAgdHlwZUxpc3QsXG4gICAgICB0eXBlLFxuICAgICAgZmxvd0luZGVudCxcbiAgICAgIGJsb2NrSW5kZW50O1xuXG4gIGlmIChzdGF0ZS5saXN0ZW5lciAhPT0gbnVsbCkge1xuICAgIHN0YXRlLmxpc3RlbmVyKCdvcGVuJywgc3RhdGUpO1xuICB9XG5cbiAgc3RhdGUudGFnICAgID0gbnVsbDtcbiAgc3RhdGUuYW5jaG9yID0gbnVsbDtcbiAgc3RhdGUua2luZCAgID0gbnVsbDtcbiAgc3RhdGUucmVzdWx0ID0gbnVsbDtcblxuICBhbGxvd0Jsb2NrU3R5bGVzID0gYWxsb3dCbG9ja1NjYWxhcnMgPSBhbGxvd0Jsb2NrQ29sbGVjdGlvbnMgPVxuICAgIENPTlRFWFRfQkxPQ0tfT1VUID09PSBub2RlQ29udGV4dCB8fFxuICAgIENPTlRFWFRfQkxPQ0tfSU4gID09PSBub2RlQ29udGV4dDtcblxuICBpZiAoYWxsb3dUb1NlZWspIHtcbiAgICBpZiAoc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpKSB7XG4gICAgICBhdE5ld0xpbmUgPSB0cnVlO1xuXG4gICAgICBpZiAoc3RhdGUubGluZUluZGVudCA+IHBhcmVudEluZGVudCkge1xuICAgICAgICBpbmRlbnRTdGF0dXMgPSAxO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5saW5lSW5kZW50ID09PSBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgaW5kZW50U3RhdHVzID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGluZUluZGVudCA8IHBhcmVudEluZGVudCkge1xuICAgICAgICBpbmRlbnRTdGF0dXMgPSAtMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoaW5kZW50U3RhdHVzID09PSAxKSB7XG4gICAgd2hpbGUgKHJlYWRUYWdQcm9wZXJ0eShzdGF0ZSkgfHwgcmVhZEFuY2hvclByb3BlcnR5KHN0YXRlKSkge1xuICAgICAgaWYgKHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKSkge1xuICAgICAgICBhdE5ld0xpbmUgPSB0cnVlO1xuICAgICAgICBhbGxvd0Jsb2NrQ29sbGVjdGlvbnMgPSBhbGxvd0Jsb2NrU3R5bGVzO1xuXG4gICAgICAgIGlmIChzdGF0ZS5saW5lSW5kZW50ID4gcGFyZW50SW5kZW50KSB7XG4gICAgICAgICAgaW5kZW50U3RhdHVzID0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5saW5lSW5kZW50ID09PSBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgICBpbmRlbnRTdGF0dXMgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPCBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgICBpbmRlbnRTdGF0dXMgPSAtMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWxsb3dCbG9ja0NvbGxlY3Rpb25zID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGFsbG93QmxvY2tDb2xsZWN0aW9ucykge1xuICAgIGFsbG93QmxvY2tDb2xsZWN0aW9ucyA9IGF0TmV3TGluZSB8fCBhbGxvd0NvbXBhY3Q7XG4gIH1cblxuICBpZiAoaW5kZW50U3RhdHVzID09PSAxIHx8IENPTlRFWFRfQkxPQ0tfT1VUID09PSBub2RlQ29udGV4dCkge1xuICAgIGlmIChDT05URVhUX0ZMT1dfSU4gPT09IG5vZGVDb250ZXh0IHx8IENPTlRFWFRfRkxPV19PVVQgPT09IG5vZGVDb250ZXh0KSB7XG4gICAgICBmbG93SW5kZW50ID0gcGFyZW50SW5kZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBmbG93SW5kZW50ID0gcGFyZW50SW5kZW50ICsgMTtcbiAgICB9XG5cbiAgICBibG9ja0luZGVudCA9IHN0YXRlLnBvc2l0aW9uIC0gc3RhdGUubGluZVN0YXJ0O1xuXG4gICAgaWYgKGluZGVudFN0YXR1cyA9PT0gMSkge1xuICAgICAgaWYgKGFsbG93QmxvY2tDb2xsZWN0aW9ucyAmJlxuICAgICAgICAgIChyZWFkQmxvY2tTZXF1ZW5jZShzdGF0ZSwgYmxvY2tJbmRlbnQpIHx8XG4gICAgICAgICAgIHJlYWRCbG9ja01hcHBpbmcoc3RhdGUsIGJsb2NrSW5kZW50LCBmbG93SW5kZW50KSkgfHxcbiAgICAgICAgICByZWFkRmxvd0NvbGxlY3Rpb24oc3RhdGUsIGZsb3dJbmRlbnQpKSB7XG4gICAgICAgIGhhc0NvbnRlbnQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKChhbGxvd0Jsb2NrU2NhbGFycyAmJiByZWFkQmxvY2tTY2FsYXIoc3RhdGUsIGZsb3dJbmRlbnQpKSB8fFxuICAgICAgICAgICAgcmVhZFNpbmdsZVF1b3RlZFNjYWxhcihzdGF0ZSwgZmxvd0luZGVudCkgfHxcbiAgICAgICAgICAgIHJlYWREb3VibGVRdW90ZWRTY2FsYXIoc3RhdGUsIGZsb3dJbmRlbnQpKSB7XG4gICAgICAgICAgaGFzQ29udGVudCA9IHRydWU7XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWFkQWxpYXMoc3RhdGUpKSB7XG4gICAgICAgICAgaGFzQ29udGVudCA9IHRydWU7XG5cbiAgICAgICAgICBpZiAoc3RhdGUudGFnICE9PSBudWxsIHx8IHN0YXRlLmFuY2hvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2FsaWFzIG5vZGUgc2hvdWxkIG5vdCBoYXZlIGFueSBwcm9wZXJ0aWVzJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAocmVhZFBsYWluU2NhbGFyKHN0YXRlLCBmbG93SW5kZW50LCBDT05URVhUX0ZMT1dfSU4gPT09IG5vZGVDb250ZXh0KSkge1xuICAgICAgICAgIGhhc0NvbnRlbnQgPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKHN0YXRlLnRhZyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgc3RhdGUudGFnID0gJz8nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICAgICAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IHN0YXRlLnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaW5kZW50U3RhdHVzID09PSAwKSB7XG4gICAgICAvLyBTcGVjaWFsIGNhc2U6IGJsb2NrIHNlcXVlbmNlcyBhcmUgYWxsb3dlZCB0byBoYXZlIHNhbWUgaW5kZW50YXRpb24gbGV2ZWwgYXMgdGhlIHBhcmVudC5cbiAgICAgIC8vIGh0dHA6Ly93d3cueWFtbC5vcmcvc3BlYy8xLjIvc3BlYy5odG1sI2lkMjc5OTc4NFxuICAgICAgaGFzQ29udGVudCA9IGFsbG93QmxvY2tDb2xsZWN0aW9ucyAmJiByZWFkQmxvY2tTZXF1ZW5jZShzdGF0ZSwgYmxvY2tJbmRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0ZS50YWcgPT09IG51bGwpIHtcbiAgICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IHN0YXRlLnJlc3VsdDtcbiAgICB9XG5cbiAgfSBlbHNlIGlmIChzdGF0ZS50YWcgPT09ICc/Jykge1xuICAgIC8vIEltcGxpY2l0IHJlc29sdmluZyBpcyBub3QgYWxsb3dlZCBmb3Igbm9uLXNjYWxhciB0eXBlcywgYW5kICc/J1xuICAgIC8vIG5vbi1zcGVjaWZpYyB0YWcgaXMgb25seSBhdXRvbWF0aWNhbGx5IGFzc2lnbmVkIHRvIHBsYWluIHNjYWxhcnMuXG4gICAgLy9cbiAgICAvLyBXZSBvbmx5IG5lZWQgdG8gY2hlY2sga2luZCBjb25mb3JtaXR5IGluIGNhc2UgdXNlciBleHBsaWNpdGx5IGFzc2lnbnMgJz8nXG4gICAgLy8gdGFnLCBmb3IgZXhhbXBsZSBsaWtlIHRoaXM6IFwiITw/PiBbMF1cIlxuICAgIC8vXG4gICAgaWYgKHN0YXRlLnJlc3VsdCAhPT0gbnVsbCAmJiBzdGF0ZS5raW5kICE9PSAnc2NhbGFyJykge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuYWNjZXB0YWJsZSBub2RlIGtpbmQgZm9yICE8Pz4gdGFnOyBpdCBzaG91bGQgYmUgXCJzY2FsYXJcIiwgbm90IFwiJyArIHN0YXRlLmtpbmQgKyAnXCInKTtcbiAgICB9XG5cbiAgICBmb3IgKHR5cGVJbmRleCA9IDAsIHR5cGVRdWFudGl0eSA9IHN0YXRlLmltcGxpY2l0VHlwZXMubGVuZ3RoOyB0eXBlSW5kZXggPCB0eXBlUXVhbnRpdHk7IHR5cGVJbmRleCArPSAxKSB7XG4gICAgICB0eXBlID0gc3RhdGUuaW1wbGljaXRUeXBlc1t0eXBlSW5kZXhdO1xuXG4gICAgICBpZiAodHlwZS5yZXNvbHZlKHN0YXRlLnJlc3VsdCkpIHsgLy8gYHN0YXRlLnJlc3VsdGAgdXBkYXRlZCBpbiByZXNvbHZlciBpZiBtYXRjaGVkXG4gICAgICAgIHN0YXRlLnJlc3VsdCA9IHR5cGUuY29uc3RydWN0KHN0YXRlLnJlc3VsdCk7XG4gICAgICAgIHN0YXRlLnRhZyA9IHR5cGUudGFnO1xuICAgICAgICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgc3RhdGUuYW5jaG9yTWFwW3N0YXRlLmFuY2hvcl0gPSBzdGF0ZS5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHN0YXRlLnRhZyAhPT0gJyEnKSB7XG4gICAgaWYgKF9oYXNPd25Qcm9wZXJ0eSQxLmNhbGwoc3RhdGUudHlwZU1hcFtzdGF0ZS5raW5kIHx8ICdmYWxsYmFjayddLCBzdGF0ZS50YWcpKSB7XG4gICAgICB0eXBlID0gc3RhdGUudHlwZU1hcFtzdGF0ZS5raW5kIHx8ICdmYWxsYmFjayddW3N0YXRlLnRhZ107XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGxvb2tpbmcgZm9yIG11bHRpIHR5cGVcbiAgICAgIHR5cGUgPSBudWxsO1xuICAgICAgdHlwZUxpc3QgPSBzdGF0ZS50eXBlTWFwLm11bHRpW3N0YXRlLmtpbmQgfHwgJ2ZhbGxiYWNrJ107XG5cbiAgICAgIGZvciAodHlwZUluZGV4ID0gMCwgdHlwZVF1YW50aXR5ID0gdHlwZUxpc3QubGVuZ3RoOyB0eXBlSW5kZXggPCB0eXBlUXVhbnRpdHk7IHR5cGVJbmRleCArPSAxKSB7XG4gICAgICAgIGlmIChzdGF0ZS50YWcuc2xpY2UoMCwgdHlwZUxpc3RbdHlwZUluZGV4XS50YWcubGVuZ3RoKSA9PT0gdHlwZUxpc3RbdHlwZUluZGV4XS50YWcpIHtcbiAgICAgICAgICB0eXBlID0gdHlwZUxpc3RbdHlwZUluZGV4XTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdHlwZSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3Vua25vd24gdGFnICE8JyArIHN0YXRlLnRhZyArICc+Jyk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLnJlc3VsdCAhPT0gbnVsbCAmJiB0eXBlLmtpbmQgIT09IHN0YXRlLmtpbmQpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmFjY2VwdGFibGUgbm9kZSBraW5kIGZvciAhPCcgKyBzdGF0ZS50YWcgKyAnPiB0YWc7IGl0IHNob3VsZCBiZSBcIicgKyB0eXBlLmtpbmQgKyAnXCIsIG5vdCBcIicgKyBzdGF0ZS5raW5kICsgJ1wiJyk7XG4gICAgfVxuXG4gICAgaWYgKCF0eXBlLnJlc29sdmUoc3RhdGUucmVzdWx0LCBzdGF0ZS50YWcpKSB7IC8vIGBzdGF0ZS5yZXN1bHRgIHVwZGF0ZWQgaW4gcmVzb2x2ZXIgaWYgbWF0Y2hlZFxuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2Nhbm5vdCByZXNvbHZlIGEgbm9kZSB3aXRoICE8JyArIHN0YXRlLnRhZyArICc+IGV4cGxpY2l0IHRhZycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5yZXN1bHQgPSB0eXBlLmNvbnN0cnVjdChzdGF0ZS5yZXN1bHQsIHN0YXRlLnRhZyk7XG4gICAgICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgICAgIHN0YXRlLmFuY2hvck1hcFtzdGF0ZS5hbmNob3JdID0gc3RhdGUucmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0ZS5saXN0ZW5lciAhPT0gbnVsbCkge1xuICAgIHN0YXRlLmxpc3RlbmVyKCdjbG9zZScsIHN0YXRlKTtcbiAgfVxuICByZXR1cm4gc3RhdGUudGFnICE9PSBudWxsIHx8ICBzdGF0ZS5hbmNob3IgIT09IG51bGwgfHwgaGFzQ29udGVudDtcbn1cblxuZnVuY3Rpb24gcmVhZERvY3VtZW50KHN0YXRlKSB7XG4gIHZhciBkb2N1bWVudFN0YXJ0ID0gc3RhdGUucG9zaXRpb24sXG4gICAgICBfcG9zaXRpb24sXG4gICAgICBkaXJlY3RpdmVOYW1lLFxuICAgICAgZGlyZWN0aXZlQXJncyxcbiAgICAgIGhhc0RpcmVjdGl2ZXMgPSBmYWxzZSxcbiAgICAgIGNoO1xuXG4gIHN0YXRlLnZlcnNpb24gPSBudWxsO1xuICBzdGF0ZS5jaGVja0xpbmVCcmVha3MgPSBzdGF0ZS5sZWdhY3k7XG4gIHN0YXRlLnRhZ01hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHN0YXRlLmFuY2hvck1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgd2hpbGUgKChjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pKSAhPT0gMCkge1xuICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICBpZiAoc3RhdGUubGluZUluZGVudCA+IDAgfHwgY2ggIT09IDB4MjUvKiAlICovKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBoYXNEaXJlY3RpdmVzID0gdHJ1ZTtcbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb247XG5cbiAgICB3aGlsZSAoY2ggIT09IDAgJiYgIWlzX1dTX09SX0VPTChjaCkpIHtcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBkaXJlY3RpdmVOYW1lID0gc3RhdGUuaW5wdXQuc2xpY2UoX3Bvc2l0aW9uLCBzdGF0ZS5wb3NpdGlvbik7XG4gICAgZGlyZWN0aXZlQXJncyA9IFtdO1xuXG4gICAgaWYgKGRpcmVjdGl2ZU5hbWUubGVuZ3RoIDwgMSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2RpcmVjdGl2ZSBuYW1lIG11c3Qgbm90IGJlIGxlc3MgdGhhbiBvbmUgY2hhcmFjdGVyIGluIGxlbmd0aCcpO1xuICAgIH1cblxuICAgIHdoaWxlIChjaCAhPT0gMCkge1xuICAgICAgd2hpbGUgKGlzX1dISVRFX1NQQUNFKGNoKSkge1xuICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaCA9PT0gMHgyMy8qICMgKi8pIHtcbiAgICAgICAgZG8geyBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7IH1cbiAgICAgICAgd2hpbGUgKGNoICE9PSAwICYmICFpc19FT0woY2gpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc19FT0woY2gpKSBicmVhaztcblxuICAgICAgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb247XG5cbiAgICAgIHdoaWxlIChjaCAhPT0gMCAmJiAhaXNfV1NfT1JfRU9MKGNoKSkge1xuICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGRpcmVjdGl2ZUFyZ3MucHVzaChzdGF0ZS5pbnB1dC5zbGljZShfcG9zaXRpb24sIHN0YXRlLnBvc2l0aW9uKSk7XG4gICAgfVxuXG4gICAgaWYgKGNoICE9PSAwKSByZWFkTGluZUJyZWFrKHN0YXRlKTtcblxuICAgIGlmIChfaGFzT3duUHJvcGVydHkkMS5jYWxsKGRpcmVjdGl2ZUhhbmRsZXJzLCBkaXJlY3RpdmVOYW1lKSkge1xuICAgICAgZGlyZWN0aXZlSGFuZGxlcnNbZGlyZWN0aXZlTmFtZV0oc3RhdGUsIGRpcmVjdGl2ZU5hbWUsIGRpcmVjdGl2ZUFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvd1dhcm5pbmcoc3RhdGUsICd1bmtub3duIGRvY3VtZW50IGRpcmVjdGl2ZSBcIicgKyBkaXJlY3RpdmVOYW1lICsgJ1wiJyk7XG4gICAgfVxuICB9XG5cbiAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpO1xuXG4gIGlmIChzdGF0ZS5saW5lSW5kZW50ID09PSAwICYmXG4gICAgICBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSAgICAgPT09IDB4MkQvKiAtICovICYmXG4gICAgICBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uICsgMSkgPT09IDB4MkQvKiAtICovICYmXG4gICAgICBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uICsgMikgPT09IDB4MkQvKiAtICovKSB7XG4gICAgc3RhdGUucG9zaXRpb24gKz0gMztcbiAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG5cbiAgfSBlbHNlIGlmIChoYXNEaXJlY3RpdmVzKSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2RpcmVjdGl2ZXMgZW5kIG1hcmsgaXMgZXhwZWN0ZWQnKTtcbiAgfVxuXG4gIGNvbXBvc2VOb2RlKHN0YXRlLCBzdGF0ZS5saW5lSW5kZW50IC0gMSwgQ09OVEVYVF9CTE9DS19PVVQsIGZhbHNlLCB0cnVlKTtcbiAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpO1xuXG4gIGlmIChzdGF0ZS5jaGVja0xpbmVCcmVha3MgJiZcbiAgICAgIFBBVFRFUk5fTk9OX0FTQ0lJX0xJTkVfQlJFQUtTLnRlc3Qoc3RhdGUuaW5wdXQuc2xpY2UoZG9jdW1lbnRTdGFydCwgc3RhdGUucG9zaXRpb24pKSkge1xuICAgIHRocm93V2FybmluZyhzdGF0ZSwgJ25vbi1BU0NJSSBsaW5lIGJyZWFrcyBhcmUgaW50ZXJwcmV0ZWQgYXMgY29udGVudCcpO1xuICB9XG5cbiAgc3RhdGUuZG9jdW1lbnRzLnB1c2goc3RhdGUucmVzdWx0KTtcblxuICBpZiAoc3RhdGUucG9zaXRpb24gPT09IHN0YXRlLmxpbmVTdGFydCAmJiB0ZXN0RG9jdW1lbnRTZXBhcmF0b3Ioc3RhdGUpKSB7XG5cbiAgICBpZiAoc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbikgPT09IDB4MkUvKiAuICovKSB7XG4gICAgICBzdGF0ZS5wb3NpdGlvbiArPSAzO1xuICAgICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoc3RhdGUucG9zaXRpb24gPCAoc3RhdGUubGVuZ3RoIC0gMSkpIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnZW5kIG9mIHRoZSBzdHJlYW0gb3IgYSBkb2N1bWVudCBzZXBhcmF0b3IgaXMgZXhwZWN0ZWQnKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm47XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBsb2FkRG9jdW1lbnRzKGlucHV0LCBvcHRpb25zKSB7XG4gIGlucHV0ID0gU3RyaW5nKGlucHV0KTtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgaWYgKGlucHV0Lmxlbmd0aCAhPT0gMCkge1xuXG4gICAgLy8gQWRkIHRhaWxpbmcgYFxcbmAgaWYgbm90IGV4aXN0c1xuICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KGlucHV0Lmxlbmd0aCAtIDEpICE9PSAweDBBLyogTEYgKi8gJiZcbiAgICAgICAgaW5wdXQuY2hhckNvZGVBdChpbnB1dC5sZW5ndGggLSAxKSAhPT0gMHgwRC8qIENSICovKSB7XG4gICAgICBpbnB1dCArPSAnXFxuJztcbiAgICB9XG5cbiAgICAvLyBTdHJpcCBCT01cbiAgICBpZiAoaW5wdXQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgICBpbnB1dCA9IGlucHV0LnNsaWNlKDEpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBzdGF0ZSA9IG5ldyBTdGF0ZSQxKGlucHV0LCBvcHRpb25zKTtcblxuICB2YXIgbnVsbHBvcyA9IGlucHV0LmluZGV4T2YoJ1xcMCcpO1xuXG4gIGlmIChudWxscG9zICE9PSAtMSkge1xuICAgIHN0YXRlLnBvc2l0aW9uID0gbnVsbHBvcztcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnbnVsbCBieXRlIGlzIG5vdCBhbGxvd2VkIGluIGlucHV0Jyk7XG4gIH1cblxuICAvLyBVc2UgMCBhcyBzdHJpbmcgdGVybWluYXRvci4gVGhhdCBzaWduaWZpY2FudGx5IHNpbXBsaWZpZXMgYm91bmRzIGNoZWNrLlxuICBzdGF0ZS5pbnB1dCArPSAnXFwwJztcblxuICB3aGlsZSAoc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbikgPT09IDB4MjAvKiBTcGFjZSAqLykge1xuICAgIHN0YXRlLmxpbmVJbmRlbnQgKz0gMTtcbiAgICBzdGF0ZS5wb3NpdGlvbiArPSAxO1xuICB9XG5cbiAgd2hpbGUgKHN0YXRlLnBvc2l0aW9uIDwgKHN0YXRlLmxlbmd0aCAtIDEpKSB7XG4gICAgcmVhZERvY3VtZW50KHN0YXRlKTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZS5kb2N1bWVudHM7XG59XG5cblxuZnVuY3Rpb24gbG9hZEFsbCQxKGlucHV0LCBpdGVyYXRvciwgb3B0aW9ucykge1xuICBpZiAoaXRlcmF0b3IgIT09IG51bGwgJiYgdHlwZW9mIGl0ZXJhdG9yID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb3B0aW9ucyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBvcHRpb25zID0gaXRlcmF0b3I7XG4gICAgaXRlcmF0b3IgPSBudWxsO1xuICB9XG5cbiAgdmFyIGRvY3VtZW50cyA9IGxvYWREb2N1bWVudHMoaW5wdXQsIG9wdGlvbnMpO1xuXG4gIGlmICh0eXBlb2YgaXRlcmF0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZG9jdW1lbnRzO1xuICB9XG5cbiAgZm9yICh2YXIgaW5kZXggPSAwLCBsZW5ndGggPSBkb2N1bWVudHMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIGl0ZXJhdG9yKGRvY3VtZW50c1tpbmRleF0pO1xuICB9XG59XG5cblxuZnVuY3Rpb24gbG9hZCQxKGlucHV0LCBvcHRpb25zKSB7XG4gIHZhciBkb2N1bWVudHMgPSBsb2FkRG9jdW1lbnRzKGlucHV0LCBvcHRpb25zKTtcblxuICBpZiAoZG9jdW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIC8qZXNsaW50LWRpc2FibGUgbm8tdW5kZWZpbmVkKi9cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IGVsc2UgaWYgKGRvY3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZG9jdW1lbnRzWzBdO1xuICB9XG4gIHRocm93IG5ldyBleGNlcHRpb24oJ2V4cGVjdGVkIGEgc2luZ2xlIGRvY3VtZW50IGluIHRoZSBzdHJlYW0sIGJ1dCBmb3VuZCBtb3JlJyk7XG59XG5cblxudmFyIGxvYWRBbGxfMSA9IGxvYWRBbGwkMTtcbnZhciBsb2FkXzEgICAgPSBsb2FkJDE7XG5cbnZhciBsb2FkZXIgPSB7XG5cdGxvYWRBbGw6IGxvYWRBbGxfMSxcblx0bG9hZDogbG9hZF8xXG59O1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lKi9cblxuXG5cblxuXG52YXIgX3RvU3RyaW5nICAgICAgID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBfaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgQ0hBUl9CT00gICAgICAgICAgICAgICAgICA9IDB4RkVGRjtcbnZhciBDSEFSX1RBQiAgICAgICAgICAgICAgICAgID0gMHgwOTsgLyogVGFiICovXG52YXIgQ0hBUl9MSU5FX0ZFRUQgICAgICAgICAgICA9IDB4MEE7IC8qIExGICovXG52YXIgQ0hBUl9DQVJSSUFHRV9SRVRVUk4gICAgICA9IDB4MEQ7IC8qIENSICovXG52YXIgQ0hBUl9TUEFDRSAgICAgICAgICAgICAgICA9IDB4MjA7IC8qIFNwYWNlICovXG52YXIgQ0hBUl9FWENMQU1BVElPTiAgICAgICAgICA9IDB4MjE7IC8qICEgKi9cbnZhciBDSEFSX0RPVUJMRV9RVU9URSAgICAgICAgID0gMHgyMjsgLyogXCIgKi9cbnZhciBDSEFSX1NIQVJQICAgICAgICAgICAgICAgID0gMHgyMzsgLyogIyAqL1xudmFyIENIQVJfUEVSQ0VOVCAgICAgICAgICAgICAgPSAweDI1OyAvKiAlICovXG52YXIgQ0hBUl9BTVBFUlNBTkQgICAgICAgICAgICA9IDB4MjY7IC8qICYgKi9cbnZhciBDSEFSX1NJTkdMRV9RVU9URSAgICAgICAgID0gMHgyNzsgLyogJyAqL1xudmFyIENIQVJfQVNURVJJU0sgICAgICAgICAgICAgPSAweDJBOyAvKiAqICovXG52YXIgQ0hBUl9DT01NQSAgICAgICAgICAgICAgICA9IDB4MkM7IC8qICwgKi9cbnZhciBDSEFSX01JTlVTICAgICAgICAgICAgICAgID0gMHgyRDsgLyogLSAqL1xudmFyIENIQVJfQ09MT04gICAgICAgICAgICAgICAgPSAweDNBOyAvKiA6ICovXG52YXIgQ0hBUl9FUVVBTFMgICAgICAgICAgICAgICA9IDB4M0Q7IC8qID0gKi9cbnZhciBDSEFSX0dSRUFURVJfVEhBTiAgICAgICAgID0gMHgzRTsgLyogPiAqL1xudmFyIENIQVJfUVVFU1RJT04gICAgICAgICAgICAgPSAweDNGOyAvKiA/ICovXG52YXIgQ0hBUl9DT01NRVJDSUFMX0FUICAgICAgICA9IDB4NDA7IC8qIEAgKi9cbnZhciBDSEFSX0xFRlRfU1FVQVJFX0JSQUNLRVQgID0gMHg1QjsgLyogWyAqL1xudmFyIENIQVJfUklHSFRfU1FVQVJFX0JSQUNLRVQgPSAweDVEOyAvKiBdICovXG52YXIgQ0hBUl9HUkFWRV9BQ0NFTlQgICAgICAgICA9IDB4NjA7IC8qIGAgKi9cbnZhciBDSEFSX0xFRlRfQ1VSTFlfQlJBQ0tFVCAgID0gMHg3QjsgLyogeyAqL1xudmFyIENIQVJfVkVSVElDQUxfTElORSAgICAgICAgPSAweDdDOyAvKiB8ICovXG52YXIgQ0hBUl9SSUdIVF9DVVJMWV9CUkFDS0VUICA9IDB4N0Q7IC8qIH0gKi9cblxudmFyIEVTQ0FQRV9TRVFVRU5DRVMgPSB7fTtcblxuRVNDQVBFX1NFUVVFTkNFU1sweDAwXSAgID0gJ1xcXFwwJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgwN10gICA9ICdcXFxcYSc7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MDhdICAgPSAnXFxcXGInO1xuRVNDQVBFX1NFUVVFTkNFU1sweDA5XSAgID0gJ1xcXFx0JztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgwQV0gICA9ICdcXFxcbic7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MEJdICAgPSAnXFxcXHYnO1xuRVNDQVBFX1NFUVVFTkNFU1sweDBDXSAgID0gJ1xcXFxmJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgwRF0gICA9ICdcXFxccic7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MUJdICAgPSAnXFxcXGUnO1xuRVNDQVBFX1NFUVVFTkNFU1sweDIyXSAgID0gJ1xcXFxcIic7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4NUNdICAgPSAnXFxcXFxcXFwnO1xuRVNDQVBFX1NFUVVFTkNFU1sweDg1XSAgID0gJ1xcXFxOJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHhBMF0gICA9ICdcXFxcXyc7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MjAyOF0gPSAnXFxcXEwnO1xuRVNDQVBFX1NFUVVFTkNFU1sweDIwMjldID0gJ1xcXFxQJztcblxudmFyIERFUFJFQ0FURURfQk9PTEVBTlNfU1lOVEFYID0gW1xuICAneScsICdZJywgJ3llcycsICdZZXMnLCAnWUVTJywgJ29uJywgJ09uJywgJ09OJyxcbiAgJ24nLCAnTicsICdubycsICdObycsICdOTycsICdvZmYnLCAnT2ZmJywgJ09GRidcbl07XG5cbnZhciBERVBSRUNBVEVEX0JBU0U2MF9TWU5UQVggPSAvXlstK10/WzAtOV9dKyg/OjpbMC05X10rKSsoPzpcXC5bMC05X10qKT8kLztcblxuZnVuY3Rpb24gY29tcGlsZVN0eWxlTWFwKHNjaGVtYSwgbWFwKSB7XG4gIHZhciByZXN1bHQsIGtleXMsIGluZGV4LCBsZW5ndGgsIHRhZywgc3R5bGUsIHR5cGU7XG5cbiAgaWYgKG1hcCA9PT0gbnVsbCkgcmV0dXJuIHt9O1xuXG4gIHJlc3VsdCA9IHt9O1xuICBrZXlzID0gT2JqZWN0LmtleXMobWFwKTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgdGFnID0ga2V5c1tpbmRleF07XG4gICAgc3R5bGUgPSBTdHJpbmcobWFwW3RhZ10pO1xuXG4gICAgaWYgKHRhZy5zbGljZSgwLCAyKSA9PT0gJyEhJykge1xuICAgICAgdGFnID0gJ3RhZzp5YW1sLm9yZywyMDAyOicgKyB0YWcuc2xpY2UoMik7XG4gICAgfVxuICAgIHR5cGUgPSBzY2hlbWEuY29tcGlsZWRUeXBlTWFwWydmYWxsYmFjayddW3RhZ107XG5cbiAgICBpZiAodHlwZSAmJiBfaGFzT3duUHJvcGVydHkuY2FsbCh0eXBlLnN0eWxlQWxpYXNlcywgc3R5bGUpKSB7XG4gICAgICBzdHlsZSA9IHR5cGUuc3R5bGVBbGlhc2VzW3N0eWxlXTtcbiAgICB9XG5cbiAgICByZXN1bHRbdGFnXSA9IHN0eWxlO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZW5jb2RlSGV4KGNoYXJhY3Rlcikge1xuICB2YXIgc3RyaW5nLCBoYW5kbGUsIGxlbmd0aDtcblxuICBzdHJpbmcgPSBjaGFyYWN0ZXIudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG5cbiAgaWYgKGNoYXJhY3RlciA8PSAweEZGKSB7XG4gICAgaGFuZGxlID0gJ3gnO1xuICAgIGxlbmd0aCA9IDI7XG4gIH0gZWxzZSBpZiAoY2hhcmFjdGVyIDw9IDB4RkZGRikge1xuICAgIGhhbmRsZSA9ICd1JztcbiAgICBsZW5ndGggPSA0O1xuICB9IGVsc2UgaWYgKGNoYXJhY3RlciA8PSAweEZGRkZGRkZGKSB7XG4gICAgaGFuZGxlID0gJ1UnO1xuICAgIGxlbmd0aCA9IDg7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IGV4Y2VwdGlvbignY29kZSBwb2ludCB3aXRoaW4gYSBzdHJpbmcgbWF5IG5vdCBiZSBncmVhdGVyIHRoYW4gMHhGRkZGRkZGRicpO1xuICB9XG5cbiAgcmV0dXJuICdcXFxcJyArIGhhbmRsZSArIGNvbW1vbi5yZXBlYXQoJzAnLCBsZW5ndGggLSBzdHJpbmcubGVuZ3RoKSArIHN0cmluZztcbn1cblxuXG52YXIgUVVPVElOR19UWVBFX1NJTkdMRSA9IDEsXG4gICAgUVVPVElOR19UWVBFX0RPVUJMRSA9IDI7XG5cbmZ1bmN0aW9uIFN0YXRlKG9wdGlvbnMpIHtcbiAgdGhpcy5zY2hlbWEgICAgICAgID0gb3B0aW9uc1snc2NoZW1hJ10gfHwgX2RlZmF1bHQ7XG4gIHRoaXMuaW5kZW50ICAgICAgICA9IE1hdGgubWF4KDEsIChvcHRpb25zWydpbmRlbnQnXSB8fCAyKSk7XG4gIHRoaXMubm9BcnJheUluZGVudCA9IG9wdGlvbnNbJ25vQXJyYXlJbmRlbnQnXSB8fCBmYWxzZTtcbiAgdGhpcy5za2lwSW52YWxpZCAgID0gb3B0aW9uc1snc2tpcEludmFsaWQnXSB8fCBmYWxzZTtcbiAgdGhpcy5mbG93TGV2ZWwgICAgID0gKGNvbW1vbi5pc05vdGhpbmcob3B0aW9uc1snZmxvd0xldmVsJ10pID8gLTEgOiBvcHRpb25zWydmbG93TGV2ZWwnXSk7XG4gIHRoaXMuc3R5bGVNYXAgICAgICA9IGNvbXBpbGVTdHlsZU1hcCh0aGlzLnNjaGVtYSwgb3B0aW9uc1snc3R5bGVzJ10gfHwgbnVsbCk7XG4gIHRoaXMuc29ydEtleXMgICAgICA9IG9wdGlvbnNbJ3NvcnRLZXlzJ10gfHwgZmFsc2U7XG4gIHRoaXMubGluZVdpZHRoICAgICA9IG9wdGlvbnNbJ2xpbmVXaWR0aCddIHx8IDgwO1xuICB0aGlzLm5vUmVmcyAgICAgICAgPSBvcHRpb25zWydub1JlZnMnXSB8fCBmYWxzZTtcbiAgdGhpcy5ub0NvbXBhdE1vZGUgID0gb3B0aW9uc1snbm9Db21wYXRNb2RlJ10gfHwgZmFsc2U7XG4gIHRoaXMuY29uZGVuc2VGbG93ICA9IG9wdGlvbnNbJ2NvbmRlbnNlRmxvdyddIHx8IGZhbHNlO1xuICB0aGlzLnF1b3RpbmdUeXBlICAgPSBvcHRpb25zWydxdW90aW5nVHlwZSddID09PSAnXCInID8gUVVPVElOR19UWVBFX0RPVUJMRSA6IFFVT1RJTkdfVFlQRV9TSU5HTEU7XG4gIHRoaXMuZm9yY2VRdW90ZXMgICA9IG9wdGlvbnNbJ2ZvcmNlUXVvdGVzJ10gfHwgZmFsc2U7XG4gIHRoaXMucmVwbGFjZXIgICAgICA9IHR5cGVvZiBvcHRpb25zWydyZXBsYWNlciddID09PSAnZnVuY3Rpb24nID8gb3B0aW9uc1sncmVwbGFjZXInXSA6IG51bGw7XG5cbiAgdGhpcy5pbXBsaWNpdFR5cGVzID0gdGhpcy5zY2hlbWEuY29tcGlsZWRJbXBsaWNpdDtcbiAgdGhpcy5leHBsaWNpdFR5cGVzID0gdGhpcy5zY2hlbWEuY29tcGlsZWRFeHBsaWNpdDtcblxuICB0aGlzLnRhZyA9IG51bGw7XG4gIHRoaXMucmVzdWx0ID0gJyc7XG5cbiAgdGhpcy5kdXBsaWNhdGVzID0gW107XG4gIHRoaXMudXNlZER1cGxpY2F0ZXMgPSBudWxsO1xufVxuXG4vLyBJbmRlbnRzIGV2ZXJ5IGxpbmUgaW4gYSBzdHJpbmcuIEVtcHR5IGxpbmVzIChcXG4gb25seSkgYXJlIG5vdCBpbmRlbnRlZC5cbmZ1bmN0aW9uIGluZGVudFN0cmluZyhzdHJpbmcsIHNwYWNlcykge1xuICB2YXIgaW5kID0gY29tbW9uLnJlcGVhdCgnICcsIHNwYWNlcyksXG4gICAgICBwb3NpdGlvbiA9IDAsXG4gICAgICBuZXh0ID0gLTEsXG4gICAgICByZXN1bHQgPSAnJyxcbiAgICAgIGxpbmUsXG4gICAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuXG4gIHdoaWxlIChwb3NpdGlvbiA8IGxlbmd0aCkge1xuICAgIG5leHQgPSBzdHJpbmcuaW5kZXhPZignXFxuJywgcG9zaXRpb24pO1xuICAgIGlmIChuZXh0ID09PSAtMSkge1xuICAgICAgbGluZSA9IHN0cmluZy5zbGljZShwb3NpdGlvbik7XG4gICAgICBwb3NpdGlvbiA9IGxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGluZSA9IHN0cmluZy5zbGljZShwb3NpdGlvbiwgbmV4dCArIDEpO1xuICAgICAgcG9zaXRpb24gPSBuZXh0ICsgMTtcbiAgICB9XG5cbiAgICBpZiAobGluZS5sZW5ndGggJiYgbGluZSAhPT0gJ1xcbicpIHJlc3VsdCArPSBpbmQ7XG5cbiAgICByZXN1bHQgKz0gbGluZTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlTmV4dExpbmUoc3RhdGUsIGxldmVsKSB7XG4gIHJldHVybiAnXFxuJyArIGNvbW1vbi5yZXBlYXQoJyAnLCBzdGF0ZS5pbmRlbnQgKiBsZXZlbCk7XG59XG5cbmZ1bmN0aW9uIHRlc3RJbXBsaWNpdFJlc29sdmluZyhzdGF0ZSwgc3RyKSB7XG4gIHZhciBpbmRleCwgbGVuZ3RoLCB0eXBlO1xuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBzdGF0ZS5pbXBsaWNpdFR5cGVzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICB0eXBlID0gc3RhdGUuaW1wbGljaXRUeXBlc1tpbmRleF07XG5cbiAgICBpZiAodHlwZS5yZXNvbHZlKHN0cikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLy8gWzMzXSBzLXdoaXRlIDo6PSBzLXNwYWNlIHwgcy10YWJcbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZShjKSB7XG4gIHJldHVybiBjID09PSBDSEFSX1NQQUNFIHx8IGMgPT09IENIQVJfVEFCO1xufVxuXG4vLyBSZXR1cm5zIHRydWUgaWYgdGhlIGNoYXJhY3RlciBjYW4gYmUgcHJpbnRlZCB3aXRob3V0IGVzY2FwaW5nLlxuLy8gRnJvbSBZQU1MIDEuMjogXCJhbnkgYWxsb3dlZCBjaGFyYWN0ZXJzIGtub3duIHRvIGJlIG5vbi1wcmludGFibGVcbi8vIHNob3VsZCBhbHNvIGJlIGVzY2FwZWQuIFtIb3dldmVyLF0gVGhpcyBpc25cdTIwMTl0IG1hbmRhdG9yeVwiXG4vLyBEZXJpdmVkIGZyb20gbmItY2hhciAtIFxcdCAtICN4ODUgLSAjeEEwIC0gI3gyMDI4IC0gI3gyMDI5LlxuZnVuY3Rpb24gaXNQcmludGFibGUoYykge1xuICByZXR1cm4gICgweDAwMDIwIDw9IGMgJiYgYyA8PSAweDAwMDA3RSlcbiAgICAgIHx8ICgoMHgwMDBBMSA8PSBjICYmIGMgPD0gMHgwMEQ3RkYpICYmIGMgIT09IDB4MjAyOCAmJiBjICE9PSAweDIwMjkpXG4gICAgICB8fCAoKDB4MEUwMDAgPD0gYyAmJiBjIDw9IDB4MDBGRkZEKSAmJiBjICE9PSBDSEFSX0JPTSlcbiAgICAgIHx8ICAoMHgxMDAwMCA8PSBjICYmIGMgPD0gMHgxMEZGRkYpO1xufVxuXG4vLyBbMzRdIG5zLWNoYXIgOjo9IG5iLWNoYXIgLSBzLXdoaXRlXG4vLyBbMjddIG5iLWNoYXIgOjo9IGMtcHJpbnRhYmxlIC0gYi1jaGFyIC0gYy1ieXRlLW9yZGVyLW1hcmtcbi8vIFsyNl0gYi1jaGFyICA6Oj0gYi1saW5lLWZlZWQgfCBiLWNhcnJpYWdlLXJldHVyblxuLy8gSW5jbHVkaW5nIHMtd2hpdGUgKGZvciBzb21lIHJlYXNvbiwgZXhhbXBsZXMgZG9lc24ndCBtYXRjaCBzcGVjcyBpbiB0aGlzIGFzcGVjdClcbi8vIG5zLWNoYXIgOjo9IGMtcHJpbnRhYmxlIC0gYi1saW5lLWZlZWQgLSBiLWNhcnJpYWdlLXJldHVybiAtIGMtYnl0ZS1vcmRlci1tYXJrXG5mdW5jdGlvbiBpc05zQ2hhck9yV2hpdGVzcGFjZShjKSB7XG4gIHJldHVybiBpc1ByaW50YWJsZShjKVxuICAgICYmIGMgIT09IENIQVJfQk9NXG4gICAgLy8gLSBiLWNoYXJcbiAgICAmJiBjICE9PSBDSEFSX0NBUlJJQUdFX1JFVFVSTlxuICAgICYmIGMgIT09IENIQVJfTElORV9GRUVEO1xufVxuXG4vLyBbMTI3XSAgbnMtcGxhaW4tc2FmZShjKSA6Oj0gYyA9IGZsb3ctb3V0ICBcdTIxRDIgbnMtcGxhaW4tc2FmZS1vdXRcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gZmxvdy1pbiAgIFx1MjFEMiBucy1wbGFpbi1zYWZlLWluXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IGJsb2NrLWtleSBcdTIxRDIgbnMtcGxhaW4tc2FmZS1vdXRcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gZmxvdy1rZXkgIFx1MjFEMiBucy1wbGFpbi1zYWZlLWluXG4vLyBbMTI4XSBucy1wbGFpbi1zYWZlLW91dCA6Oj0gbnMtY2hhclxuLy8gWzEyOV0gIG5zLXBsYWluLXNhZmUtaW4gOjo9IG5zLWNoYXIgLSBjLWZsb3ctaW5kaWNhdG9yXG4vLyBbMTMwXSAgbnMtcGxhaW4tY2hhcihjKSA6Oj0gICggbnMtcGxhaW4tc2FmZShjKSAtIFx1MjAxQzpcdTIwMUQgLSBcdTIwMUMjXHUyMDFEIClcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgKCAvKiBBbiBucy1jaGFyIHByZWNlZGluZyAqLyBcdTIwMUMjXHUyMDFEIClcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgKCBcdTIwMUM6XHUyMDFEIC8qIEZvbGxvd2VkIGJ5IGFuIG5zLXBsYWluLXNhZmUoYykgKi8gKVxuZnVuY3Rpb24gaXNQbGFpblNhZmUoYywgcHJldiwgaW5ibG9jaykge1xuICB2YXIgY0lzTnNDaGFyT3JXaGl0ZXNwYWNlID0gaXNOc0NoYXJPcldoaXRlc3BhY2UoYyk7XG4gIHZhciBjSXNOc0NoYXIgPSBjSXNOc0NoYXJPcldoaXRlc3BhY2UgJiYgIWlzV2hpdGVzcGFjZShjKTtcbiAgcmV0dXJuIChcbiAgICAvLyBucy1wbGFpbi1zYWZlXG4gICAgaW5ibG9jayA/IC8vIGMgPSBmbG93LWluXG4gICAgICBjSXNOc0NoYXJPcldoaXRlc3BhY2VcbiAgICAgIDogY0lzTnNDaGFyT3JXaGl0ZXNwYWNlXG4gICAgICAgIC8vIC0gYy1mbG93LWluZGljYXRvclxuICAgICAgICAmJiBjICE9PSBDSEFSX0NPTU1BXG4gICAgICAgICYmIGMgIT09IENIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVFxuICAgICAgICAmJiBjICE9PSBDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VUXG4gICAgICAgICYmIGMgIT09IENIQVJfTEVGVF9DVVJMWV9CUkFDS0VUXG4gICAgICAgICYmIGMgIT09IENIQVJfUklHSFRfQ1VSTFlfQlJBQ0tFVFxuICApXG4gICAgLy8gbnMtcGxhaW4tY2hhclxuICAgICYmIGMgIT09IENIQVJfU0hBUlAgLy8gZmFsc2Ugb24gJyMnXG4gICAgJiYgIShwcmV2ID09PSBDSEFSX0NPTE9OICYmICFjSXNOc0NoYXIpIC8vIGZhbHNlIG9uICc6ICdcbiAgICB8fCAoaXNOc0NoYXJPcldoaXRlc3BhY2UocHJldikgJiYgIWlzV2hpdGVzcGFjZShwcmV2KSAmJiBjID09PSBDSEFSX1NIQVJQKSAvLyBjaGFuZ2UgdG8gdHJ1ZSBvbiAnW14gXSMnXG4gICAgfHwgKHByZXYgPT09IENIQVJfQ09MT04gJiYgY0lzTnNDaGFyKTsgLy8gY2hhbmdlIHRvIHRydWUgb24gJzpbXiBdJ1xufVxuXG4vLyBTaW1wbGlmaWVkIHRlc3QgZm9yIHZhbHVlcyBhbGxvd2VkIGFzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaW4gcGxhaW4gc3R5bGUuXG5mdW5jdGlvbiBpc1BsYWluU2FmZUZpcnN0KGMpIHtcbiAgLy8gVXNlcyBhIHN1YnNldCBvZiBucy1jaGFyIC0gYy1pbmRpY2F0b3JcbiAgLy8gd2hlcmUgbnMtY2hhciA9IG5iLWNoYXIgLSBzLXdoaXRlLlxuICAvLyBObyBzdXBwb3J0IG9mICggKCBcdTIwMUM/XHUyMDFEIHwgXHUyMDFDOlx1MjAxRCB8IFx1MjAxQy1cdTIwMUQgKSAvKiBGb2xsb3dlZCBieSBhbiBucy1wbGFpbi1zYWZlKGMpKSAqLyApIHBhcnRcbiAgcmV0dXJuIGlzUHJpbnRhYmxlKGMpICYmIGMgIT09IENIQVJfQk9NXG4gICAgJiYgIWlzV2hpdGVzcGFjZShjKSAvLyAtIHMtd2hpdGVcbiAgICAvLyAtIChjLWluZGljYXRvciA6Oj1cbiAgICAvLyBcdTIwMUMtXHUyMDFEIHwgXHUyMDFDP1x1MjAxRCB8IFx1MjAxQzpcdTIwMUQgfCBcdTIwMUMsXHUyMDFEIHwgXHUyMDFDW1x1MjAxRCB8IFx1MjAxQ11cdTIwMUQgfCBcdTIwMUN7XHUyMDFEIHwgXHUyMDFDfVx1MjAxRFxuICAgICYmIGMgIT09IENIQVJfTUlOVVNcbiAgICAmJiBjICE9PSBDSEFSX1FVRVNUSU9OXG4gICAgJiYgYyAhPT0gQ0hBUl9DT0xPTlxuICAgICYmIGMgIT09IENIQVJfQ09NTUFcbiAgICAmJiBjICE9PSBDSEFSX0xFRlRfU1FVQVJFX0JSQUNLRVRcbiAgICAmJiBjICE9PSBDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VUXG4gICAgJiYgYyAhPT0gQ0hBUl9MRUZUX0NVUkxZX0JSQUNLRVRcbiAgICAmJiBjICE9PSBDSEFSX1JJR0hUX0NVUkxZX0JSQUNLRVRcbiAgICAvLyB8IFx1MjAxQyNcdTIwMUQgfCBcdTIwMUMmXHUyMDFEIHwgXHUyMDFDKlx1MjAxRCB8IFx1MjAxQyFcdTIwMUQgfCBcdTIwMUN8XHUyMDFEIHwgXHUyMDFDPVx1MjAxRCB8IFx1MjAxQz5cdTIwMUQgfCBcdTIwMUMnXHUyMDFEIHwgXHUyMDFDXCJcdTIwMURcbiAgICAmJiBjICE9PSBDSEFSX1NIQVJQXG4gICAgJiYgYyAhPT0gQ0hBUl9BTVBFUlNBTkRcbiAgICAmJiBjICE9PSBDSEFSX0FTVEVSSVNLXG4gICAgJiYgYyAhPT0gQ0hBUl9FWENMQU1BVElPTlxuICAgICYmIGMgIT09IENIQVJfVkVSVElDQUxfTElORVxuICAgICYmIGMgIT09IENIQVJfRVFVQUxTXG4gICAgJiYgYyAhPT0gQ0hBUl9HUkVBVEVSX1RIQU5cbiAgICAmJiBjICE9PSBDSEFSX1NJTkdMRV9RVU9URVxuICAgICYmIGMgIT09IENIQVJfRE9VQkxFX1FVT1RFXG4gICAgLy8gfCBcdTIwMUMlXHUyMDFEIHwgXHUyMDFDQFx1MjAxRCB8IFx1MjAxQ2BcdTIwMUQpXG4gICAgJiYgYyAhPT0gQ0hBUl9QRVJDRU5UXG4gICAgJiYgYyAhPT0gQ0hBUl9DT01NRVJDSUFMX0FUXG4gICAgJiYgYyAhPT0gQ0hBUl9HUkFWRV9BQ0NFTlQ7XG59XG5cbi8vIFNpbXBsaWZpZWQgdGVzdCBmb3IgdmFsdWVzIGFsbG93ZWQgYXMgdGhlIGxhc3QgY2hhcmFjdGVyIGluIHBsYWluIHN0eWxlLlxuZnVuY3Rpb24gaXNQbGFpblNhZmVMYXN0KGMpIHtcbiAgLy8ganVzdCBub3Qgd2hpdGVzcGFjZSBvciBjb2xvbiwgaXQgd2lsbCBiZSBjaGVja2VkIHRvIGJlIHBsYWluIGNoYXJhY3RlciBsYXRlclxuICByZXR1cm4gIWlzV2hpdGVzcGFjZShjKSAmJiBjICE9PSBDSEFSX0NPTE9OO1xufVxuXG4vLyBTYW1lIGFzICdzdHJpbmcnLmNvZGVQb2ludEF0KHBvcyksIGJ1dCB3b3JrcyBpbiBvbGRlciBicm93c2Vycy5cbmZ1bmN0aW9uIGNvZGVQb2ludEF0KHN0cmluZywgcG9zKSB7XG4gIHZhciBmaXJzdCA9IHN0cmluZy5jaGFyQ29kZUF0KHBvcyksIHNlY29uZDtcbiAgaWYgKGZpcnN0ID49IDB4RDgwMCAmJiBmaXJzdCA8PSAweERCRkYgJiYgcG9zICsgMSA8IHN0cmluZy5sZW5ndGgpIHtcbiAgICBzZWNvbmQgPSBzdHJpbmcuY2hhckNvZGVBdChwb3MgKyAxKTtcbiAgICBpZiAoc2Vjb25kID49IDB4REMwMCAmJiBzZWNvbmQgPD0gMHhERkZGKSB7XG4gICAgICAvLyBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZyNzdXJyb2dhdGUtZm9ybXVsYWVcbiAgICAgIHJldHVybiAoZmlyc3QgLSAweEQ4MDApICogMHg0MDAgKyBzZWNvbmQgLSAweERDMDAgKyAweDEwMDAwO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmlyc3Q7XG59XG5cbi8vIERldGVybWluZXMgd2hldGhlciBibG9jayBpbmRlbnRhdGlvbiBpbmRpY2F0b3IgaXMgcmVxdWlyZWQuXG5mdW5jdGlvbiBuZWVkSW5kZW50SW5kaWNhdG9yKHN0cmluZykge1xuICB2YXIgbGVhZGluZ1NwYWNlUmUgPSAvXlxcbiogLztcbiAgcmV0dXJuIGxlYWRpbmdTcGFjZVJlLnRlc3Qoc3RyaW5nKTtcbn1cblxudmFyIFNUWUxFX1BMQUlOICAgPSAxLFxuICAgIFNUWUxFX1NJTkdMRSAgPSAyLFxuICAgIFNUWUxFX0xJVEVSQUwgPSAzLFxuICAgIFNUWUxFX0ZPTERFRCAgPSA0LFxuICAgIFNUWUxFX0RPVUJMRSAgPSA1O1xuXG4vLyBEZXRlcm1pbmVzIHdoaWNoIHNjYWxhciBzdHlsZXMgYXJlIHBvc3NpYmxlIGFuZCByZXR1cm5zIHRoZSBwcmVmZXJyZWQgc3R5bGUuXG4vLyBsaW5lV2lkdGggPSAtMSA9PiBubyBsaW1pdC5cbi8vIFByZS1jb25kaXRpb25zOiBzdHIubGVuZ3RoID4gMC5cbi8vIFBvc3QtY29uZGl0aW9uczpcbi8vICAgIFNUWUxFX1BMQUlOIG9yIFNUWUxFX1NJTkdMRSA9PiBubyBcXG4gYXJlIGluIHRoZSBzdHJpbmcuXG4vLyAgICBTVFlMRV9MSVRFUkFMID0+IG5vIGxpbmVzIGFyZSBzdWl0YWJsZSBmb3IgZm9sZGluZyAob3IgbGluZVdpZHRoIGlzIC0xKS5cbi8vICAgIFNUWUxFX0ZPTERFRCA9PiBhIGxpbmUgPiBsaW5lV2lkdGggYW5kIGNhbiBiZSBmb2xkZWQgKGFuZCBsaW5lV2lkdGggIT0gLTEpLlxuZnVuY3Rpb24gY2hvb3NlU2NhbGFyU3R5bGUoc3RyaW5nLCBzaW5nbGVMaW5lT25seSwgaW5kZW50UGVyTGV2ZWwsIGxpbmVXaWR0aCxcbiAgdGVzdEFtYmlndW91c1R5cGUsIHF1b3RpbmdUeXBlLCBmb3JjZVF1b3RlcywgaW5ibG9jaykge1xuXG4gIHZhciBpO1xuICB2YXIgY2hhciA9IDA7XG4gIHZhciBwcmV2Q2hhciA9IG51bGw7XG4gIHZhciBoYXNMaW5lQnJlYWsgPSBmYWxzZTtcbiAgdmFyIGhhc0ZvbGRhYmxlTGluZSA9IGZhbHNlOyAvLyBvbmx5IGNoZWNrZWQgaWYgc2hvdWxkVHJhY2tXaWR0aFxuICB2YXIgc2hvdWxkVHJhY2tXaWR0aCA9IGxpbmVXaWR0aCAhPT0gLTE7XG4gIHZhciBwcmV2aW91c0xpbmVCcmVhayA9IC0xOyAvLyBjb3VudCB0aGUgZmlyc3QgbGluZSBjb3JyZWN0bHlcbiAgdmFyIHBsYWluID0gaXNQbGFpblNhZmVGaXJzdChjb2RlUG9pbnRBdChzdHJpbmcsIDApKVxuICAgICAgICAgICYmIGlzUGxhaW5TYWZlTGFzdChjb2RlUG9pbnRBdChzdHJpbmcsIHN0cmluZy5sZW5ndGggLSAxKSk7XG5cbiAgaWYgKHNpbmdsZUxpbmVPbmx5IHx8IGZvcmNlUXVvdGVzKSB7XG4gICAgLy8gQ2FzZTogbm8gYmxvY2sgc3R5bGVzLlxuICAgIC8vIENoZWNrIGZvciBkaXNhbGxvd2VkIGNoYXJhY3RlcnMgdG8gcnVsZSBvdXQgcGxhaW4gYW5kIHNpbmdsZS5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgY2hhciA+PSAweDEwMDAwID8gaSArPSAyIDogaSsrKSB7XG4gICAgICBjaGFyID0gY29kZVBvaW50QXQoc3RyaW5nLCBpKTtcbiAgICAgIGlmICghaXNQcmludGFibGUoY2hhcikpIHtcbiAgICAgICAgcmV0dXJuIFNUWUxFX0RPVUJMRTtcbiAgICAgIH1cbiAgICAgIHBsYWluID0gcGxhaW4gJiYgaXNQbGFpblNhZmUoY2hhciwgcHJldkNoYXIsIGluYmxvY2spO1xuICAgICAgcHJldkNoYXIgPSBjaGFyO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBDYXNlOiBibG9jayBzdHlsZXMgcGVybWl0dGVkLlxuICAgIGZvciAoaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyBjaGFyID49IDB4MTAwMDAgPyBpICs9IDIgOiBpKyspIHtcbiAgICAgIGNoYXIgPSBjb2RlUG9pbnRBdChzdHJpbmcsIGkpO1xuICAgICAgaWYgKGNoYXIgPT09IENIQVJfTElORV9GRUVEKSB7XG4gICAgICAgIGhhc0xpbmVCcmVhayA9IHRydWU7XG4gICAgICAgIC8vIENoZWNrIGlmIGFueSBsaW5lIGNhbiBiZSBmb2xkZWQuXG4gICAgICAgIGlmIChzaG91bGRUcmFja1dpZHRoKSB7XG4gICAgICAgICAgaGFzRm9sZGFibGVMaW5lID0gaGFzRm9sZGFibGVMaW5lIHx8XG4gICAgICAgICAgICAvLyBGb2xkYWJsZSBsaW5lID0gdG9vIGxvbmcsIGFuZCBub3QgbW9yZS1pbmRlbnRlZC5cbiAgICAgICAgICAgIChpIC0gcHJldmlvdXNMaW5lQnJlYWsgLSAxID4gbGluZVdpZHRoICYmXG4gICAgICAgICAgICAgc3RyaW5nW3ByZXZpb3VzTGluZUJyZWFrICsgMV0gIT09ICcgJyk7XG4gICAgICAgICAgcHJldmlvdXNMaW5lQnJlYWsgPSBpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFpc1ByaW50YWJsZShjaGFyKSkge1xuICAgICAgICByZXR1cm4gU1RZTEVfRE9VQkxFO1xuICAgICAgfVxuICAgICAgcGxhaW4gPSBwbGFpbiAmJiBpc1BsYWluU2FmZShjaGFyLCBwcmV2Q2hhciwgaW5ibG9jayk7XG4gICAgICBwcmV2Q2hhciA9IGNoYXI7XG4gICAgfVxuICAgIC8vIGluIGNhc2UgdGhlIGVuZCBpcyBtaXNzaW5nIGEgXFxuXG4gICAgaGFzRm9sZGFibGVMaW5lID0gaGFzRm9sZGFibGVMaW5lIHx8IChzaG91bGRUcmFja1dpZHRoICYmXG4gICAgICAoaSAtIHByZXZpb3VzTGluZUJyZWFrIC0gMSA+IGxpbmVXaWR0aCAmJlxuICAgICAgIHN0cmluZ1twcmV2aW91c0xpbmVCcmVhayArIDFdICE9PSAnICcpKTtcbiAgfVxuICAvLyBBbHRob3VnaCBldmVyeSBzdHlsZSBjYW4gcmVwcmVzZW50IFxcbiB3aXRob3V0IGVzY2FwaW5nLCBwcmVmZXIgYmxvY2sgc3R5bGVzXG4gIC8vIGZvciBtdWx0aWxpbmUsIHNpbmNlIHRoZXkncmUgbW9yZSByZWFkYWJsZSBhbmQgdGhleSBkb24ndCBhZGQgZW1wdHkgbGluZXMuXG4gIC8vIEFsc28gcHJlZmVyIGZvbGRpbmcgYSBzdXBlci1sb25nIGxpbmUuXG4gIGlmICghaGFzTGluZUJyZWFrICYmICFoYXNGb2xkYWJsZUxpbmUpIHtcbiAgICAvLyBTdHJpbmdzIGludGVycHJldGFibGUgYXMgYW5vdGhlciB0eXBlIGhhdmUgdG8gYmUgcXVvdGVkO1xuICAgIC8vIGUuZy4gdGhlIHN0cmluZyAndHJ1ZScgdnMuIHRoZSBib29sZWFuIHRydWUuXG4gICAgaWYgKHBsYWluICYmICFmb3JjZVF1b3RlcyAmJiAhdGVzdEFtYmlndW91c1R5cGUoc3RyaW5nKSkge1xuICAgICAgcmV0dXJuIFNUWUxFX1BMQUlOO1xuICAgIH1cbiAgICByZXR1cm4gcXVvdGluZ1R5cGUgPT09IFFVT1RJTkdfVFlQRV9ET1VCTEUgPyBTVFlMRV9ET1VCTEUgOiBTVFlMRV9TSU5HTEU7XG4gIH1cbiAgLy8gRWRnZSBjYXNlOiBibG9jayBpbmRlbnRhdGlvbiBpbmRpY2F0b3IgY2FuIG9ubHkgaGF2ZSBvbmUgZGlnaXQuXG4gIGlmIChpbmRlbnRQZXJMZXZlbCA+IDkgJiYgbmVlZEluZGVudEluZGljYXRvcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIFNUWUxFX0RPVUJMRTtcbiAgfVxuICAvLyBBdCB0aGlzIHBvaW50IHdlIGtub3cgYmxvY2sgc3R5bGVzIGFyZSB2YWxpZC5cbiAgLy8gUHJlZmVyIGxpdGVyYWwgc3R5bGUgdW5sZXNzIHdlIHdhbnQgdG8gZm9sZC5cbiAgaWYgKCFmb3JjZVF1b3Rlcykge1xuICAgIHJldHVybiBoYXNGb2xkYWJsZUxpbmUgPyBTVFlMRV9GT0xERUQgOiBTVFlMRV9MSVRFUkFMO1xuICB9XG4gIHJldHVybiBxdW90aW5nVHlwZSA9PT0gUVVPVElOR19UWVBFX0RPVUJMRSA/IFNUWUxFX0RPVUJMRSA6IFNUWUxFX1NJTkdMRTtcbn1cblxuLy8gTm90ZTogbGluZSBicmVha2luZy9mb2xkaW5nIGlzIGltcGxlbWVudGVkIGZvciBvbmx5IHRoZSBmb2xkZWQgc3R5bGUuXG4vLyBOQi4gV2UgZHJvcCB0aGUgbGFzdCB0cmFpbGluZyBuZXdsaW5lIChpZiBhbnkpIG9mIGEgcmV0dXJuZWQgYmxvY2sgc2NhbGFyXG4vLyAgc2luY2UgdGhlIGR1bXBlciBhZGRzIGl0cyBvd24gbmV3bGluZS4gVGhpcyBhbHdheXMgd29ya3M6XG4vLyAgICBcdTIwMjIgTm8gZW5kaW5nIG5ld2xpbmUgPT4gdW5hZmZlY3RlZDsgYWxyZWFkeSB1c2luZyBzdHJpcCBcIi1cIiBjaG9tcGluZy5cbi8vICAgIFx1MjAyMiBFbmRpbmcgbmV3bGluZSAgICA9PiByZW1vdmVkIHRoZW4gcmVzdG9yZWQuXG4vLyAgSW1wb3J0YW50bHksIHRoaXMga2VlcHMgdGhlIFwiK1wiIGNob21wIGluZGljYXRvciBmcm9tIGdhaW5pbmcgYW4gZXh0cmEgbGluZS5cbmZ1bmN0aW9uIHdyaXRlU2NhbGFyKHN0YXRlLCBzdHJpbmcsIGxldmVsLCBpc2tleSwgaW5ibG9jaykge1xuICBzdGF0ZS5kdW1wID0gKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc3RyaW5nLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHN0YXRlLnF1b3RpbmdUeXBlID09PSBRVU9USU5HX1RZUEVfRE9VQkxFID8gJ1wiXCInIDogXCInJ1wiO1xuICAgIH1cbiAgICBpZiAoIXN0YXRlLm5vQ29tcGF0TW9kZSkge1xuICAgICAgaWYgKERFUFJFQ0FURURfQk9PTEVBTlNfU1lOVEFYLmluZGV4T2Yoc3RyaW5nKSAhPT0gLTEgfHwgREVQUkVDQVRFRF9CQVNFNjBfU1lOVEFYLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgICByZXR1cm4gc3RhdGUucXVvdGluZ1R5cGUgPT09IFFVT1RJTkdfVFlQRV9ET1VCTEUgPyAoJ1wiJyArIHN0cmluZyArICdcIicpIDogKFwiJ1wiICsgc3RyaW5nICsgXCInXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBpbmRlbnQgPSBzdGF0ZS5pbmRlbnQgKiBNYXRoLm1heCgxLCBsZXZlbCk7IC8vIG5vIDAtaW5kZW50IHNjYWxhcnNcbiAgICAvLyBBcyBpbmRlbnRhdGlvbiBnZXRzIGRlZXBlciwgbGV0IHRoZSB3aWR0aCBkZWNyZWFzZSBtb25vdG9uaWNhbGx5XG4gICAgLy8gdG8gdGhlIGxvd2VyIGJvdW5kIG1pbihzdGF0ZS5saW5lV2lkdGgsIDQwKS5cbiAgICAvLyBOb3RlIHRoYXQgdGhpcyBpbXBsaWVzXG4gICAgLy8gIHN0YXRlLmxpbmVXaWR0aCBcdTIyNjQgNDAgKyBzdGF0ZS5pbmRlbnQ6IHdpZHRoIGlzIGZpeGVkIGF0IHRoZSBsb3dlciBib3VuZC5cbiAgICAvLyAgc3RhdGUubGluZVdpZHRoID4gNDAgKyBzdGF0ZS5pbmRlbnQ6IHdpZHRoIGRlY3JlYXNlcyB1bnRpbCB0aGUgbG93ZXIgYm91bmQuXG4gICAgLy8gVGhpcyBiZWhhdmVzIGJldHRlciB0aGFuIGEgY29uc3RhbnQgbWluaW11bSB3aWR0aCB3aGljaCBkaXNhbGxvd3MgbmFycm93ZXIgb3B0aW9ucyxcbiAgICAvLyBvciBhbiBpbmRlbnQgdGhyZXNob2xkIHdoaWNoIGNhdXNlcyB0aGUgd2lkdGggdG8gc3VkZGVubHkgaW5jcmVhc2UuXG4gICAgdmFyIGxpbmVXaWR0aCA9IHN0YXRlLmxpbmVXaWR0aCA9PT0gLTFcbiAgICAgID8gLTEgOiBNYXRoLm1heChNYXRoLm1pbihzdGF0ZS5saW5lV2lkdGgsIDQwKSwgc3RhdGUubGluZVdpZHRoIC0gaW5kZW50KTtcblxuICAgIC8vIFdpdGhvdXQga25vd2luZyBpZiBrZXlzIGFyZSBpbXBsaWNpdC9leHBsaWNpdCwgYXNzdW1lIGltcGxpY2l0IGZvciBzYWZldHkuXG4gICAgdmFyIHNpbmdsZUxpbmVPbmx5ID0gaXNrZXlcbiAgICAgIC8vIE5vIGJsb2NrIHN0eWxlcyBpbiBmbG93IG1vZGUuXG4gICAgICB8fCAoc3RhdGUuZmxvd0xldmVsID4gLTEgJiYgbGV2ZWwgPj0gc3RhdGUuZmxvd0xldmVsKTtcbiAgICBmdW5jdGlvbiB0ZXN0QW1iaWd1aXR5KHN0cmluZykge1xuICAgICAgcmV0dXJuIHRlc3RJbXBsaWNpdFJlc29sdmluZyhzdGF0ZSwgc3RyaW5nKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGNob29zZVNjYWxhclN0eWxlKHN0cmluZywgc2luZ2xlTGluZU9ubHksIHN0YXRlLmluZGVudCwgbGluZVdpZHRoLFxuICAgICAgdGVzdEFtYmlndWl0eSwgc3RhdGUucXVvdGluZ1R5cGUsIHN0YXRlLmZvcmNlUXVvdGVzICYmICFpc2tleSwgaW5ibG9jaykpIHtcblxuICAgICAgY2FzZSBTVFlMRV9QTEFJTjpcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIGNhc2UgU1RZTEVfU0lOR0xFOlxuICAgICAgICByZXR1cm4gXCInXCIgKyBzdHJpbmcucmVwbGFjZSgvJy9nLCBcIicnXCIpICsgXCInXCI7XG4gICAgICBjYXNlIFNUWUxFX0xJVEVSQUw6XG4gICAgICAgIHJldHVybiAnfCcgKyBibG9ja0hlYWRlcihzdHJpbmcsIHN0YXRlLmluZGVudClcbiAgICAgICAgICArIGRyb3BFbmRpbmdOZXdsaW5lKGluZGVudFN0cmluZyhzdHJpbmcsIGluZGVudCkpO1xuICAgICAgY2FzZSBTVFlMRV9GT0xERUQ6XG4gICAgICAgIHJldHVybiAnPicgKyBibG9ja0hlYWRlcihzdHJpbmcsIHN0YXRlLmluZGVudClcbiAgICAgICAgICArIGRyb3BFbmRpbmdOZXdsaW5lKGluZGVudFN0cmluZyhmb2xkU3RyaW5nKHN0cmluZywgbGluZVdpZHRoKSwgaW5kZW50KSk7XG4gICAgICBjYXNlIFNUWUxFX0RPVUJMRTpcbiAgICAgICAgcmV0dXJuICdcIicgKyBlc2NhcGVTdHJpbmcoc3RyaW5nKSArICdcIic7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uKCdpbXBvc3NpYmxlIGVycm9yOiBpbnZhbGlkIHNjYWxhciBzdHlsZScpO1xuICAgIH1cbiAgfSgpKTtcbn1cblxuLy8gUHJlLWNvbmRpdGlvbnM6IHN0cmluZyBpcyB2YWxpZCBmb3IgYSBibG9jayBzY2FsYXIsIDEgPD0gaW5kZW50UGVyTGV2ZWwgPD0gOS5cbmZ1bmN0aW9uIGJsb2NrSGVhZGVyKHN0cmluZywgaW5kZW50UGVyTGV2ZWwpIHtcbiAgdmFyIGluZGVudEluZGljYXRvciA9IG5lZWRJbmRlbnRJbmRpY2F0b3Ioc3RyaW5nKSA/IFN0cmluZyhpbmRlbnRQZXJMZXZlbCkgOiAnJztcblxuICAvLyBub3RlIHRoZSBzcGVjaWFsIGNhc2U6IHRoZSBzdHJpbmcgJ1xcbicgY291bnRzIGFzIGEgXCJ0cmFpbGluZ1wiIGVtcHR5IGxpbmUuXG4gIHZhciBjbGlwID0gICAgICAgICAgc3RyaW5nW3N0cmluZy5sZW5ndGggLSAxXSA9PT0gJ1xcbic7XG4gIHZhciBrZWVwID0gY2xpcCAmJiAoc3RyaW5nW3N0cmluZy5sZW5ndGggLSAyXSA9PT0gJ1xcbicgfHwgc3RyaW5nID09PSAnXFxuJyk7XG4gIHZhciBjaG9tcCA9IGtlZXAgPyAnKycgOiAoY2xpcCA/ICcnIDogJy0nKTtcblxuICByZXR1cm4gaW5kZW50SW5kaWNhdG9yICsgY2hvbXAgKyAnXFxuJztcbn1cblxuLy8gKFNlZSB0aGUgbm90ZSBmb3Igd3JpdGVTY2FsYXIuKVxuZnVuY3Rpb24gZHJvcEVuZGluZ05ld2xpbmUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmdbc3RyaW5nLmxlbmd0aCAtIDFdID09PSAnXFxuJyA/IHN0cmluZy5zbGljZSgwLCAtMSkgOiBzdHJpbmc7XG59XG5cbi8vIE5vdGU6IGEgbG9uZyBsaW5lIHdpdGhvdXQgYSBzdWl0YWJsZSBicmVhayBwb2ludCB3aWxsIGV4Y2VlZCB0aGUgd2lkdGggbGltaXQuXG4vLyBQcmUtY29uZGl0aW9uczogZXZlcnkgY2hhciBpbiBzdHIgaXNQcmludGFibGUsIHN0ci5sZW5ndGggPiAwLCB3aWR0aCA+IDAuXG5mdW5jdGlvbiBmb2xkU3RyaW5nKHN0cmluZywgd2lkdGgpIHtcbiAgLy8gSW4gZm9sZGVkIHN0eWxlLCAkayQgY29uc2VjdXRpdmUgbmV3bGluZXMgb3V0cHV0IGFzICRrKzEkIG5ld2xpbmVzXHUyMDE0XG4gIC8vIHVubGVzcyB0aGV5J3JlIGJlZm9yZSBvciBhZnRlciBhIG1vcmUtaW5kZW50ZWQgbGluZSwgb3IgYXQgdGhlIHZlcnlcbiAgLy8gYmVnaW5uaW5nIG9yIGVuZCwgaW4gd2hpY2ggY2FzZSAkayQgbWFwcyB0byAkayQuXG4gIC8vIFRoZXJlZm9yZSwgcGFyc2UgZWFjaCBjaHVuayBhcyBuZXdsaW5lKHMpIGZvbGxvd2VkIGJ5IGEgY29udGVudCBsaW5lLlxuICB2YXIgbGluZVJlID0gLyhcXG4rKShbXlxcbl0qKS9nO1xuXG4gIC8vIGZpcnN0IGxpbmUgKHBvc3NpYmx5IGFuIGVtcHR5IGxpbmUpXG4gIHZhciByZXN1bHQgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBuZXh0TEYgPSBzdHJpbmcuaW5kZXhPZignXFxuJyk7XG4gICAgbmV4dExGID0gbmV4dExGICE9PSAtMSA/IG5leHRMRiA6IHN0cmluZy5sZW5ndGg7XG4gICAgbGluZVJlLmxhc3RJbmRleCA9IG5leHRMRjtcbiAgICByZXR1cm4gZm9sZExpbmUoc3RyaW5nLnNsaWNlKDAsIG5leHRMRiksIHdpZHRoKTtcbiAgfSgpKTtcbiAgLy8gSWYgd2UgaGF2ZW4ndCByZWFjaGVkIHRoZSBmaXJzdCBjb250ZW50IGxpbmUgeWV0LCBkb24ndCBhZGQgYW4gZXh0cmEgXFxuLlxuICB2YXIgcHJldk1vcmVJbmRlbnRlZCA9IHN0cmluZ1swXSA9PT0gJ1xcbicgfHwgc3RyaW5nWzBdID09PSAnICc7XG4gIHZhciBtb3JlSW5kZW50ZWQ7XG5cbiAgLy8gcmVzdCBvZiB0aGUgbGluZXNcbiAgdmFyIG1hdGNoO1xuICB3aGlsZSAoKG1hdGNoID0gbGluZVJlLmV4ZWMoc3RyaW5nKSkpIHtcbiAgICB2YXIgcHJlZml4ID0gbWF0Y2hbMV0sIGxpbmUgPSBtYXRjaFsyXTtcbiAgICBtb3JlSW5kZW50ZWQgPSAobGluZVswXSA9PT0gJyAnKTtcbiAgICByZXN1bHQgKz0gcHJlZml4XG4gICAgICArICghcHJldk1vcmVJbmRlbnRlZCAmJiAhbW9yZUluZGVudGVkICYmIGxpbmUgIT09ICcnXG4gICAgICAgID8gJ1xcbicgOiAnJylcbiAgICAgICsgZm9sZExpbmUobGluZSwgd2lkdGgpO1xuICAgIHByZXZNb3JlSW5kZW50ZWQgPSBtb3JlSW5kZW50ZWQ7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyBHcmVlZHkgbGluZSBicmVha2luZy5cbi8vIFBpY2tzIHRoZSBsb25nZXN0IGxpbmUgdW5kZXIgdGhlIGxpbWl0IGVhY2ggdGltZSxcbi8vIG90aGVyd2lzZSBzZXR0bGVzIGZvciB0aGUgc2hvcnRlc3QgbGluZSBvdmVyIHRoZSBsaW1pdC5cbi8vIE5CLiBNb3JlLWluZGVudGVkIGxpbmVzICpjYW5ub3QqIGJlIGZvbGRlZCwgYXMgdGhhdCB3b3VsZCBhZGQgYW4gZXh0cmEgXFxuLlxuZnVuY3Rpb24gZm9sZExpbmUobGluZSwgd2lkdGgpIHtcbiAgaWYgKGxpbmUgPT09ICcnIHx8IGxpbmVbMF0gPT09ICcgJykgcmV0dXJuIGxpbmU7XG5cbiAgLy8gU2luY2UgYSBtb3JlLWluZGVudGVkIGxpbmUgYWRkcyBhIFxcbiwgYnJlYWtzIGNhbid0IGJlIGZvbGxvd2VkIGJ5IGEgc3BhY2UuXG4gIHZhciBicmVha1JlID0gLyBbXiBdL2c7IC8vIG5vdGU6IHRoZSBtYXRjaCBpbmRleCB3aWxsIGFsd2F5cyBiZSA8PSBsZW5ndGgtMi5cbiAgdmFyIG1hdGNoO1xuICAvLyBzdGFydCBpcyBhbiBpbmNsdXNpdmUgaW5kZXguIGVuZCwgY3VyciwgYW5kIG5leHQgYXJlIGV4Y2x1c2l2ZS5cbiAgdmFyIHN0YXJ0ID0gMCwgZW5kLCBjdXJyID0gMCwgbmV4dCA9IDA7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICAvLyBJbnZhcmlhbnRzOiAwIDw9IHN0YXJ0IDw9IGxlbmd0aC0xLlxuICAvLyAgIDAgPD0gY3VyciA8PSBuZXh0IDw9IG1heCgwLCBsZW5ndGgtMikuIGN1cnIgLSBzdGFydCA8PSB3aWR0aC5cbiAgLy8gSW5zaWRlIHRoZSBsb29wOlxuICAvLyAgIEEgbWF0Y2ggaW1wbGllcyBsZW5ndGggPj0gMiwgc28gY3VyciBhbmQgbmV4dCBhcmUgPD0gbGVuZ3RoLTIuXG4gIHdoaWxlICgobWF0Y2ggPSBicmVha1JlLmV4ZWMobGluZSkpKSB7XG4gICAgbmV4dCA9IG1hdGNoLmluZGV4O1xuICAgIC8vIG1haW50YWluIGludmFyaWFudDogY3VyciAtIHN0YXJ0IDw9IHdpZHRoXG4gICAgaWYgKG5leHQgLSBzdGFydCA+IHdpZHRoKSB7XG4gICAgICBlbmQgPSAoY3VyciA+IHN0YXJ0KSA/IGN1cnIgOiBuZXh0OyAvLyBkZXJpdmUgZW5kIDw9IGxlbmd0aC0yXG4gICAgICByZXN1bHQgKz0gJ1xcbicgKyBsaW5lLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgICAgLy8gc2tpcCB0aGUgc3BhY2UgdGhhdCB3YXMgb3V0cHV0IGFzIFxcblxuICAgICAgc3RhcnQgPSBlbmQgKyAxOyAgICAgICAgICAgICAgICAgICAgLy8gZGVyaXZlIHN0YXJ0IDw9IGxlbmd0aC0xXG4gICAgfVxuICAgIGN1cnIgPSBuZXh0O1xuICB9XG5cbiAgLy8gQnkgdGhlIGludmFyaWFudHMsIHN0YXJ0IDw9IGxlbmd0aC0xLCBzbyB0aGVyZSBpcyBzb21ldGhpbmcgbGVmdCBvdmVyLlxuICAvLyBJdCBpcyBlaXRoZXIgdGhlIHdob2xlIHN0cmluZyBvciBhIHBhcnQgc3RhcnRpbmcgZnJvbSBub24td2hpdGVzcGFjZS5cbiAgcmVzdWx0ICs9ICdcXG4nO1xuICAvLyBJbnNlcnQgYSBicmVhayBpZiB0aGUgcmVtYWluZGVyIGlzIHRvbyBsb25nIGFuZCB0aGVyZSBpcyBhIGJyZWFrIGF2YWlsYWJsZS5cbiAgaWYgKGxpbmUubGVuZ3RoIC0gc3RhcnQgPiB3aWR0aCAmJiBjdXJyID4gc3RhcnQpIHtcbiAgICByZXN1bHQgKz0gbGluZS5zbGljZShzdGFydCwgY3VycikgKyAnXFxuJyArIGxpbmUuc2xpY2UoY3VyciArIDEpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCArPSBsaW5lLnNsaWNlKHN0YXJ0KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQuc2xpY2UoMSk7IC8vIGRyb3AgZXh0cmEgXFxuIGpvaW5lclxufVxuXG4vLyBFc2NhcGVzIGEgZG91YmxlLXF1b3RlZCBzdHJpbmcuXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcoc3RyaW5nKSB7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgdmFyIGNoYXIgPSAwO1xuICB2YXIgZXNjYXBlU2VxO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgY2hhciA+PSAweDEwMDAwID8gaSArPSAyIDogaSsrKSB7XG4gICAgY2hhciA9IGNvZGVQb2ludEF0KHN0cmluZywgaSk7XG4gICAgZXNjYXBlU2VxID0gRVNDQVBFX1NFUVVFTkNFU1tjaGFyXTtcblxuICAgIGlmICghZXNjYXBlU2VxICYmIGlzUHJpbnRhYmxlKGNoYXIpKSB7XG4gICAgICByZXN1bHQgKz0gc3RyaW5nW2ldO1xuICAgICAgaWYgKGNoYXIgPj0gMHgxMDAwMCkgcmVzdWx0ICs9IHN0cmluZ1tpICsgMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCArPSBlc2NhcGVTZXEgfHwgZW5jb2RlSGV4KGNoYXIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvd1NlcXVlbmNlKHN0YXRlLCBsZXZlbCwgb2JqZWN0KSB7XG4gIHZhciBfcmVzdWx0ID0gJycsXG4gICAgICBfdGFnICAgID0gc3RhdGUudGFnLFxuICAgICAgaW5kZXgsXG4gICAgICBsZW5ndGgsXG4gICAgICB2YWx1ZTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICB2YWx1ZSA9IG9iamVjdFtpbmRleF07XG5cbiAgICBpZiAoc3RhdGUucmVwbGFjZXIpIHtcbiAgICAgIHZhbHVlID0gc3RhdGUucmVwbGFjZXIuY2FsbChvYmplY3QsIFN0cmluZyhpbmRleCksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBXcml0ZSBvbmx5IHZhbGlkIGVsZW1lbnRzLCBwdXQgbnVsbCBpbnN0ZWFkIG9mIGludmFsaWQgZWxlbWVudHMuXG4gICAgaWYgKHdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwsIHZhbHVlLCBmYWxzZSwgZmFsc2UpIHx8XG4gICAgICAgICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICB3cml0ZU5vZGUoc3RhdGUsIGxldmVsLCBudWxsLCBmYWxzZSwgZmFsc2UpKSkge1xuXG4gICAgICBpZiAoX3Jlc3VsdCAhPT0gJycpIF9yZXN1bHQgKz0gJywnICsgKCFzdGF0ZS5jb25kZW5zZUZsb3cgPyAnICcgOiAnJyk7XG4gICAgICBfcmVzdWx0ICs9IHN0YXRlLmR1bXA7XG4gICAgfVxuICB9XG5cbiAgc3RhdGUudGFnID0gX3RhZztcbiAgc3RhdGUuZHVtcCA9ICdbJyArIF9yZXN1bHQgKyAnXSc7XG59XG5cbmZ1bmN0aW9uIHdyaXRlQmxvY2tTZXF1ZW5jZShzdGF0ZSwgbGV2ZWwsIG9iamVjdCwgY29tcGFjdCkge1xuICB2YXIgX3Jlc3VsdCA9ICcnLFxuICAgICAgX3RhZyAgICA9IHN0YXRlLnRhZyxcbiAgICAgIGluZGV4LFxuICAgICAgbGVuZ3RoLFxuICAgICAgdmFsdWU7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgdmFsdWUgPSBvYmplY3RbaW5kZXhdO1xuXG4gICAgaWYgKHN0YXRlLnJlcGxhY2VyKSB7XG4gICAgICB2YWx1ZSA9IHN0YXRlLnJlcGxhY2VyLmNhbGwob2JqZWN0LCBTdHJpbmcoaW5kZXgpLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gV3JpdGUgb25seSB2YWxpZCBlbGVtZW50cywgcHV0IG51bGwgaW5zdGVhZCBvZiBpbnZhbGlkIGVsZW1lbnRzLlxuICAgIGlmICh3cml0ZU5vZGUoc3RhdGUsIGxldmVsICsgMSwgdmFsdWUsIHRydWUsIHRydWUsIGZhbHNlLCB0cnVlKSB8fFxuICAgICAgICAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgd3JpdGVOb2RlKHN0YXRlLCBsZXZlbCArIDEsIG51bGwsIHRydWUsIHRydWUsIGZhbHNlLCB0cnVlKSkpIHtcblxuICAgICAgaWYgKCFjb21wYWN0IHx8IF9yZXN1bHQgIT09ICcnKSB7XG4gICAgICAgIF9yZXN1bHQgKz0gZ2VuZXJhdGVOZXh0TGluZShzdGF0ZSwgbGV2ZWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuZHVtcCAmJiBDSEFSX0xJTkVfRkVFRCA9PT0gc3RhdGUuZHVtcC5jaGFyQ29kZUF0KDApKSB7XG4gICAgICAgIF9yZXN1bHQgKz0gJy0nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3Jlc3VsdCArPSAnLSAnO1xuICAgICAgfVxuXG4gICAgICBfcmVzdWx0ICs9IHN0YXRlLmR1bXA7XG4gICAgfVxuICB9XG5cbiAgc3RhdGUudGFnID0gX3RhZztcbiAgc3RhdGUuZHVtcCA9IF9yZXN1bHQgfHwgJ1tdJzsgLy8gRW1wdHkgc2VxdWVuY2UgaWYgbm8gdmFsaWQgdmFsdWVzLlxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb3dNYXBwaW5nKHN0YXRlLCBsZXZlbCwgb2JqZWN0KSB7XG4gIHZhciBfcmVzdWx0ICAgICAgID0gJycsXG4gICAgICBfdGFnICAgICAgICAgID0gc3RhdGUudGFnLFxuICAgICAgb2JqZWN0S2V5TGlzdCA9IE9iamVjdC5rZXlzKG9iamVjdCksXG4gICAgICBpbmRleCxcbiAgICAgIGxlbmd0aCxcbiAgICAgIG9iamVjdEtleSxcbiAgICAgIG9iamVjdFZhbHVlLFxuICAgICAgcGFpckJ1ZmZlcjtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0S2V5TGlzdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG5cbiAgICBwYWlyQnVmZmVyID0gJyc7XG4gICAgaWYgKF9yZXN1bHQgIT09ICcnKSBwYWlyQnVmZmVyICs9ICcsICc7XG5cbiAgICBpZiAoc3RhdGUuY29uZGVuc2VGbG93KSBwYWlyQnVmZmVyICs9ICdcIic7XG5cbiAgICBvYmplY3RLZXkgPSBvYmplY3RLZXlMaXN0W2luZGV4XTtcbiAgICBvYmplY3RWYWx1ZSA9IG9iamVjdFtvYmplY3RLZXldO1xuXG4gICAgaWYgKHN0YXRlLnJlcGxhY2VyKSB7XG4gICAgICBvYmplY3RWYWx1ZSA9IHN0YXRlLnJlcGxhY2VyLmNhbGwob2JqZWN0LCBvYmplY3RLZXksIG9iamVjdFZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAoIXdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwsIG9iamVjdEtleSwgZmFsc2UsIGZhbHNlKSkge1xuICAgICAgY29udGludWU7IC8vIFNraXAgdGhpcyBwYWlyIGJlY2F1c2Ugb2YgaW52YWxpZCBrZXk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLmR1bXAubGVuZ3RoID4gMTAyNCkgcGFpckJ1ZmZlciArPSAnPyAnO1xuXG4gICAgcGFpckJ1ZmZlciArPSBzdGF0ZS5kdW1wICsgKHN0YXRlLmNvbmRlbnNlRmxvdyA/ICdcIicgOiAnJykgKyAnOicgKyAoc3RhdGUuY29uZGVuc2VGbG93ID8gJycgOiAnICcpO1xuXG4gICAgaWYgKCF3cml0ZU5vZGUoc3RhdGUsIGxldmVsLCBvYmplY3RWYWx1ZSwgZmFsc2UsIGZhbHNlKSkge1xuICAgICAgY29udGludWU7IC8vIFNraXAgdGhpcyBwYWlyIGJlY2F1c2Ugb2YgaW52YWxpZCB2YWx1ZS5cbiAgICB9XG5cbiAgICBwYWlyQnVmZmVyICs9IHN0YXRlLmR1bXA7XG5cbiAgICAvLyBCb3RoIGtleSBhbmQgdmFsdWUgYXJlIHZhbGlkLlxuICAgIF9yZXN1bHQgKz0gcGFpckJ1ZmZlcjtcbiAgfVxuXG4gIHN0YXRlLnRhZyA9IF90YWc7XG4gIHN0YXRlLmR1bXAgPSAneycgKyBfcmVzdWx0ICsgJ30nO1xufVxuXG5mdW5jdGlvbiB3cml0ZUJsb2NrTWFwcGluZyhzdGF0ZSwgbGV2ZWwsIG9iamVjdCwgY29tcGFjdCkge1xuICB2YXIgX3Jlc3VsdCAgICAgICA9ICcnLFxuICAgICAgX3RhZyAgICAgICAgICA9IHN0YXRlLnRhZyxcbiAgICAgIG9iamVjdEtleUxpc3QgPSBPYmplY3Qua2V5cyhvYmplY3QpLFxuICAgICAgaW5kZXgsXG4gICAgICBsZW5ndGgsXG4gICAgICBvYmplY3RLZXksXG4gICAgICBvYmplY3RWYWx1ZSxcbiAgICAgIGV4cGxpY2l0UGFpcixcbiAgICAgIHBhaXJCdWZmZXI7XG5cbiAgLy8gQWxsb3cgc29ydGluZyBrZXlzIHNvIHRoYXQgdGhlIG91dHB1dCBmaWxlIGlzIGRldGVybWluaXN0aWNcbiAgaWYgKHN0YXRlLnNvcnRLZXlzID09PSB0cnVlKSB7XG4gICAgLy8gRGVmYXVsdCBzb3J0aW5nXG4gICAgb2JqZWN0S2V5TGlzdC5zb3J0KCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHN0YXRlLnNvcnRLZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gQ3VzdG9tIHNvcnQgZnVuY3Rpb25cbiAgICBvYmplY3RLZXlMaXN0LnNvcnQoc3RhdGUuc29ydEtleXMpO1xuICB9IGVsc2UgaWYgKHN0YXRlLnNvcnRLZXlzKSB7XG4gICAgLy8gU29tZXRoaW5nIGlzIHdyb25nXG4gICAgdGhyb3cgbmV3IGV4Y2VwdGlvbignc29ydEtleXMgbXVzdCBiZSBhIGJvb2xlYW4gb3IgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdEtleUxpc3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHBhaXJCdWZmZXIgPSAnJztcblxuICAgIGlmICghY29tcGFjdCB8fCBfcmVzdWx0ICE9PSAnJykge1xuICAgICAgcGFpckJ1ZmZlciArPSBnZW5lcmF0ZU5leHRMaW5lKHN0YXRlLCBsZXZlbCk7XG4gICAgfVxuXG4gICAgb2JqZWN0S2V5ID0gb2JqZWN0S2V5TGlzdFtpbmRleF07XG4gICAgb2JqZWN0VmFsdWUgPSBvYmplY3Rbb2JqZWN0S2V5XTtcblxuICAgIGlmIChzdGF0ZS5yZXBsYWNlcikge1xuICAgICAgb2JqZWN0VmFsdWUgPSBzdGF0ZS5yZXBsYWNlci5jYWxsKG9iamVjdCwgb2JqZWN0S2V5LCBvYmplY3RWYWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKCF3cml0ZU5vZGUoc3RhdGUsIGxldmVsICsgMSwgb2JqZWN0S2V5LCB0cnVlLCB0cnVlLCB0cnVlKSkge1xuICAgICAgY29udGludWU7IC8vIFNraXAgdGhpcyBwYWlyIGJlY2F1c2Ugb2YgaW52YWxpZCBrZXkuXG4gICAgfVxuXG4gICAgZXhwbGljaXRQYWlyID0gKHN0YXRlLnRhZyAhPT0gbnVsbCAmJiBzdGF0ZS50YWcgIT09ICc/JykgfHxcbiAgICAgICAgICAgICAgICAgICAoc3RhdGUuZHVtcCAmJiBzdGF0ZS5kdW1wLmxlbmd0aCA+IDEwMjQpO1xuXG4gICAgaWYgKGV4cGxpY2l0UGFpcikge1xuICAgICAgaWYgKHN0YXRlLmR1bXAgJiYgQ0hBUl9MSU5FX0ZFRUQgPT09IHN0YXRlLmR1bXAuY2hhckNvZGVBdCgwKSkge1xuICAgICAgICBwYWlyQnVmZmVyICs9ICc/JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhaXJCdWZmZXIgKz0gJz8gJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYWlyQnVmZmVyICs9IHN0YXRlLmR1bXA7XG5cbiAgICBpZiAoZXhwbGljaXRQYWlyKSB7XG4gICAgICBwYWlyQnVmZmVyICs9IGdlbmVyYXRlTmV4dExpbmUoc3RhdGUsIGxldmVsKTtcbiAgICB9XG5cbiAgICBpZiAoIXdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwgKyAxLCBvYmplY3RWYWx1ZSwgdHJ1ZSwgZXhwbGljaXRQYWlyKSkge1xuICAgICAgY29udGludWU7IC8vIFNraXAgdGhpcyBwYWlyIGJlY2F1c2Ugb2YgaW52YWxpZCB2YWx1ZS5cbiAgICB9XG5cbiAgICBpZiAoc3RhdGUuZHVtcCAmJiBDSEFSX0xJTkVfRkVFRCA9PT0gc3RhdGUuZHVtcC5jaGFyQ29kZUF0KDApKSB7XG4gICAgICBwYWlyQnVmZmVyICs9ICc6JztcbiAgICB9IGVsc2Uge1xuICAgICAgcGFpckJ1ZmZlciArPSAnOiAnO1xuICAgIH1cblxuICAgIHBhaXJCdWZmZXIgKz0gc3RhdGUuZHVtcDtcblxuICAgIC8vIEJvdGgga2V5IGFuZCB2YWx1ZSBhcmUgdmFsaWQuXG4gICAgX3Jlc3VsdCArPSBwYWlyQnVmZmVyO1xuICB9XG5cbiAgc3RhdGUudGFnID0gX3RhZztcbiAgc3RhdGUuZHVtcCA9IF9yZXN1bHQgfHwgJ3t9JzsgLy8gRW1wdHkgbWFwcGluZyBpZiBubyB2YWxpZCBwYWlycy5cbn1cblxuZnVuY3Rpb24gZGV0ZWN0VHlwZShzdGF0ZSwgb2JqZWN0LCBleHBsaWNpdCkge1xuICB2YXIgX3Jlc3VsdCwgdHlwZUxpc3QsIGluZGV4LCBsZW5ndGgsIHR5cGUsIHN0eWxlO1xuXG4gIHR5cGVMaXN0ID0gZXhwbGljaXQgPyBzdGF0ZS5leHBsaWNpdFR5cGVzIDogc3RhdGUuaW1wbGljaXRUeXBlcztcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gdHlwZUxpc3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHR5cGUgPSB0eXBlTGlzdFtpbmRleF07XG5cbiAgICBpZiAoKHR5cGUuaW5zdGFuY2VPZiAgfHwgdHlwZS5wcmVkaWNhdGUpICYmXG4gICAgICAgICghdHlwZS5pbnN0YW5jZU9mIHx8ICgodHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcpICYmIChvYmplY3QgaW5zdGFuY2VvZiB0eXBlLmluc3RhbmNlT2YpKSkgJiZcbiAgICAgICAgKCF0eXBlLnByZWRpY2F0ZSAgfHwgdHlwZS5wcmVkaWNhdGUob2JqZWN0KSkpIHtcblxuICAgICAgaWYgKGV4cGxpY2l0KSB7XG4gICAgICAgIGlmICh0eXBlLm11bHRpICYmIHR5cGUucmVwcmVzZW50TmFtZSkge1xuICAgICAgICAgIHN0YXRlLnRhZyA9IHR5cGUucmVwcmVzZW50TmFtZShvYmplY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXRlLnRhZyA9IHR5cGUudGFnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS50YWcgPSAnPyc7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlLnJlcHJlc2VudCkge1xuICAgICAgICBzdHlsZSA9IHN0YXRlLnN0eWxlTWFwW3R5cGUudGFnXSB8fCB0eXBlLmRlZmF1bHRTdHlsZTtcblxuICAgICAgICBpZiAoX3RvU3RyaW5nLmNhbGwodHlwZS5yZXByZXNlbnQpID09PSAnW29iamVjdCBGdW5jdGlvbl0nKSB7XG4gICAgICAgICAgX3Jlc3VsdCA9IHR5cGUucmVwcmVzZW50KG9iamVjdCwgc3R5bGUpO1xuICAgICAgICB9IGVsc2UgaWYgKF9oYXNPd25Qcm9wZXJ0eS5jYWxsKHR5cGUucmVwcmVzZW50LCBzdHlsZSkpIHtcbiAgICAgICAgICBfcmVzdWx0ID0gdHlwZS5yZXByZXNlbnRbc3R5bGVdKG9iamVjdCwgc3R5bGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBleGNlcHRpb24oJyE8JyArIHR5cGUudGFnICsgJz4gdGFnIHJlc29sdmVyIGFjY2VwdHMgbm90IFwiJyArIHN0eWxlICsgJ1wiIHN0eWxlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZS5kdW1wID0gX3Jlc3VsdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTZXJpYWxpemVzIGBvYmplY3RgIGFuZCB3cml0ZXMgaXQgdG8gZ2xvYmFsIGByZXN1bHRgLlxuLy8gUmV0dXJucyB0cnVlIG9uIHN1Y2Nlc3MsIG9yIGZhbHNlIG9uIGludmFsaWQgb2JqZWN0LlxuLy9cbmZ1bmN0aW9uIHdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwsIG9iamVjdCwgYmxvY2ssIGNvbXBhY3QsIGlza2V5LCBpc2Jsb2Nrc2VxKSB7XG4gIHN0YXRlLnRhZyA9IG51bGw7XG4gIHN0YXRlLmR1bXAgPSBvYmplY3Q7XG5cbiAgaWYgKCFkZXRlY3RUeXBlKHN0YXRlLCBvYmplY3QsIGZhbHNlKSkge1xuICAgIGRldGVjdFR5cGUoc3RhdGUsIG9iamVjdCwgdHJ1ZSk7XG4gIH1cblxuICB2YXIgdHlwZSA9IF90b1N0cmluZy5jYWxsKHN0YXRlLmR1bXApO1xuICB2YXIgaW5ibG9jayA9IGJsb2NrO1xuICB2YXIgdGFnU3RyO1xuXG4gIGlmIChibG9jaykge1xuICAgIGJsb2NrID0gKHN0YXRlLmZsb3dMZXZlbCA8IDAgfHwgc3RhdGUuZmxvd0xldmVsID4gbGV2ZWwpO1xuICB9XG5cbiAgdmFyIG9iamVjdE9yQXJyYXkgPSB0eXBlID09PSAnW29iamVjdCBPYmplY3RdJyB8fCB0eXBlID09PSAnW29iamVjdCBBcnJheV0nLFxuICAgICAgZHVwbGljYXRlSW5kZXgsXG4gICAgICBkdXBsaWNhdGU7XG5cbiAgaWYgKG9iamVjdE9yQXJyYXkpIHtcbiAgICBkdXBsaWNhdGVJbmRleCA9IHN0YXRlLmR1cGxpY2F0ZXMuaW5kZXhPZihvYmplY3QpO1xuICAgIGR1cGxpY2F0ZSA9IGR1cGxpY2F0ZUluZGV4ICE9PSAtMTtcbiAgfVxuXG4gIGlmICgoc3RhdGUudGFnICE9PSBudWxsICYmIHN0YXRlLnRhZyAhPT0gJz8nKSB8fCBkdXBsaWNhdGUgfHwgKHN0YXRlLmluZGVudCAhPT0gMiAmJiBsZXZlbCA+IDApKSB7XG4gICAgY29tcGFjdCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGR1cGxpY2F0ZSAmJiBzdGF0ZS51c2VkRHVwbGljYXRlc1tkdXBsaWNhdGVJbmRleF0pIHtcbiAgICBzdGF0ZS5kdW1wID0gJypyZWZfJyArIGR1cGxpY2F0ZUluZGV4O1xuICB9IGVsc2Uge1xuICAgIGlmIChvYmplY3RPckFycmF5ICYmIGR1cGxpY2F0ZSAmJiAhc3RhdGUudXNlZER1cGxpY2F0ZXNbZHVwbGljYXRlSW5kZXhdKSB7XG4gICAgICBzdGF0ZS51c2VkRHVwbGljYXRlc1tkdXBsaWNhdGVJbmRleF0gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgIGlmIChibG9jayAmJiAoT2JqZWN0LmtleXMoc3RhdGUuZHVtcCkubGVuZ3RoICE9PSAwKSkge1xuICAgICAgICB3cml0ZUJsb2NrTWFwcGluZyhzdGF0ZSwgbGV2ZWwsIHN0YXRlLmR1bXAsIGNvbXBhY3QpO1xuICAgICAgICBpZiAoZHVwbGljYXRlKSB7XG4gICAgICAgICAgc3RhdGUuZHVtcCA9ICcmcmVmXycgKyBkdXBsaWNhdGVJbmRleCArIHN0YXRlLmR1bXA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdyaXRlRmxvd01hcHBpbmcoc3RhdGUsIGxldmVsLCBzdGF0ZS5kdW1wKTtcbiAgICAgICAgaWYgKGR1cGxpY2F0ZSkge1xuICAgICAgICAgIHN0YXRlLmR1bXAgPSAnJnJlZl8nICsgZHVwbGljYXRlSW5kZXggKyAnICcgKyBzdGF0ZS5kdW1wO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICBpZiAoYmxvY2sgJiYgKHN0YXRlLmR1bXAubGVuZ3RoICE9PSAwKSkge1xuICAgICAgICBpZiAoc3RhdGUubm9BcnJheUluZGVudCAmJiAhaXNibG9ja3NlcSAmJiBsZXZlbCA+IDApIHtcbiAgICAgICAgICB3cml0ZUJsb2NrU2VxdWVuY2Uoc3RhdGUsIGxldmVsIC0gMSwgc3RhdGUuZHVtcCwgY29tcGFjdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd3JpdGVCbG9ja1NlcXVlbmNlKHN0YXRlLCBsZXZlbCwgc3RhdGUuZHVtcCwgY29tcGFjdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGR1cGxpY2F0ZSkge1xuICAgICAgICAgIHN0YXRlLmR1bXAgPSAnJnJlZl8nICsgZHVwbGljYXRlSW5kZXggKyBzdGF0ZS5kdW1wO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3cml0ZUZsb3dTZXF1ZW5jZShzdGF0ZSwgbGV2ZWwsIHN0YXRlLmR1bXApO1xuICAgICAgICBpZiAoZHVwbGljYXRlKSB7XG4gICAgICAgICAgc3RhdGUuZHVtcCA9ICcmcmVmXycgKyBkdXBsaWNhdGVJbmRleCArICcgJyArIHN0YXRlLmR1bXA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdbb2JqZWN0IFN0cmluZ10nKSB7XG4gICAgICBpZiAoc3RhdGUudGFnICE9PSAnPycpIHtcbiAgICAgICAgd3JpdGVTY2FsYXIoc3RhdGUsIHN0YXRlLmR1bXAsIGxldmVsLCBpc2tleSwgaW5ibG9jayk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnW29iamVjdCBVbmRlZmluZWRdJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3RhdGUuc2tpcEludmFsaWQpIHJldHVybiBmYWxzZTtcbiAgICAgIHRocm93IG5ldyBleGNlcHRpb24oJ3VuYWNjZXB0YWJsZSBraW5kIG9mIGFuIG9iamVjdCB0byBkdW1wICcgKyB0eXBlKTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUudGFnICE9PSBudWxsICYmIHN0YXRlLnRhZyAhPT0gJz8nKSB7XG4gICAgICAvLyBOZWVkIHRvIGVuY29kZSBhbGwgY2hhcmFjdGVycyBleGNlcHQgdGhvc2UgYWxsb3dlZCBieSB0aGUgc3BlYzpcbiAgICAgIC8vXG4gICAgICAvLyBbMzVdIG5zLWRlYy1kaWdpdCAgICA6Oj0gIFsjeDMwLSN4MzldIC8qIDAtOSAqL1xuICAgICAgLy8gWzM2XSBucy1oZXgtZGlnaXQgICAgOjo9ICBucy1kZWMtZGlnaXRcbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIHwgWyN4NDEtI3g0Nl0gLyogQS1GICovIHwgWyN4NjEtI3g2Nl0gLyogYS1mICovXG4gICAgICAvLyBbMzddIG5zLWFzY2lpLWxldHRlciA6Oj0gIFsjeDQxLSN4NUFdIC8qIEEtWiAqLyB8IFsjeDYxLSN4N0FdIC8qIGEteiAqL1xuICAgICAgLy8gWzM4XSBucy13b3JkLWNoYXIgICAgOjo9ICBucy1kZWMtZGlnaXQgfCBucy1hc2NpaS1sZXR0ZXIgfCBcdTIwMUMtXHUyMDFEXG4gICAgICAvLyBbMzldIG5zLXVyaS1jaGFyICAgICA6Oj0gIFx1MjAxQyVcdTIwMUQgbnMtaGV4LWRpZ2l0IG5zLWhleC1kaWdpdCB8IG5zLXdvcmQtY2hhciB8IFx1MjAxQyNcdTIwMURcbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIHwgXHUyMDFDO1x1MjAxRCB8IFx1MjAxQy9cdTIwMUQgfCBcdTIwMUM/XHUyMDFEIHwgXHUyMDFDOlx1MjAxRCB8IFx1MjAxQ0BcdTIwMUQgfCBcdTIwMUMmXHUyMDFEIHwgXHUyMDFDPVx1MjAxRCB8IFx1MjAxQytcdTIwMUQgfCBcdTIwMUMkXHUyMDFEIHwgXHUyMDFDLFx1MjAxRFxuICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgfCBcdTIwMUNfXHUyMDFEIHwgXHUyMDFDLlx1MjAxRCB8IFx1MjAxQyFcdTIwMUQgfCBcdTIwMUN+XHUyMDFEIHwgXHUyMDFDKlx1MjAxRCB8IFx1MjAxQydcdTIwMUQgfCBcdTIwMUMoXHUyMDFEIHwgXHUyMDFDKVx1MjAxRCB8IFx1MjAxQ1tcdTIwMUQgfCBcdTIwMUNdXHUyMDFEXG4gICAgICAvL1xuICAgICAgLy8gQWxzbyBuZWVkIHRvIGVuY29kZSAnIScgYmVjYXVzZSBpdCBoYXMgc3BlY2lhbCBtZWFuaW5nIChlbmQgb2YgdGFnIHByZWZpeCkuXG4gICAgICAvL1xuICAgICAgdGFnU3RyID0gZW5jb2RlVVJJKFxuICAgICAgICBzdGF0ZS50YWdbMF0gPT09ICchJyA/IHN0YXRlLnRhZy5zbGljZSgxKSA6IHN0YXRlLnRhZ1xuICAgICAgKS5yZXBsYWNlKC8hL2csICclMjEnKTtcblxuICAgICAgaWYgKHN0YXRlLnRhZ1swXSA9PT0gJyEnKSB7XG4gICAgICAgIHRhZ1N0ciA9ICchJyArIHRhZ1N0cjtcbiAgICAgIH0gZWxzZSBpZiAodGFnU3RyLnNsaWNlKDAsIDE4KSA9PT0gJ3RhZzp5YW1sLm9yZywyMDAyOicpIHtcbiAgICAgICAgdGFnU3RyID0gJyEhJyArIHRhZ1N0ci5zbGljZSgxOCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YWdTdHIgPSAnITwnICsgdGFnU3RyICsgJz4nO1xuICAgICAgfVxuXG4gICAgICBzdGF0ZS5kdW1wID0gdGFnU3RyICsgJyAnICsgc3RhdGUuZHVtcDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0RHVwbGljYXRlUmVmZXJlbmNlcyhvYmplY3QsIHN0YXRlKSB7XG4gIHZhciBvYmplY3RzID0gW10sXG4gICAgICBkdXBsaWNhdGVzSW5kZXhlcyA9IFtdLFxuICAgICAgaW5kZXgsXG4gICAgICBsZW5ndGg7XG5cbiAgaW5zcGVjdE5vZGUob2JqZWN0LCBvYmplY3RzLCBkdXBsaWNhdGVzSW5kZXhlcyk7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IGR1cGxpY2F0ZXNJbmRleGVzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBzdGF0ZS5kdXBsaWNhdGVzLnB1c2gob2JqZWN0c1tkdXBsaWNhdGVzSW5kZXhlc1tpbmRleF1dKTtcbiAgfVxuICBzdGF0ZS51c2VkRHVwbGljYXRlcyA9IG5ldyBBcnJheShsZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBpbnNwZWN0Tm9kZShvYmplY3QsIG9iamVjdHMsIGR1cGxpY2F0ZXNJbmRleGVzKSB7XG4gIHZhciBvYmplY3RLZXlMaXN0LFxuICAgICAgaW5kZXgsXG4gICAgICBsZW5ndGg7XG5cbiAgaWYgKG9iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0Jykge1xuICAgIGluZGV4ID0gb2JqZWN0cy5pbmRleE9mKG9iamVjdCk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgaWYgKGR1cGxpY2F0ZXNJbmRleGVzLmluZGV4T2YoaW5kZXgpID09PSAtMSkge1xuICAgICAgICBkdXBsaWNhdGVzSW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb2JqZWN0cy5wdXNoKG9iamVjdCk7XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgICAgICAgaW5zcGVjdE5vZGUob2JqZWN0W2luZGV4XSwgb2JqZWN0cywgZHVwbGljYXRlc0luZGV4ZXMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3RLZXlMaXN0ID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICAgICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0S2V5TGlzdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgICAgICAgaW5zcGVjdE5vZGUob2JqZWN0W29iamVjdEtleUxpc3RbaW5kZXhdXSwgb2JqZWN0cywgZHVwbGljYXRlc0luZGV4ZXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGR1bXAkMShpbnB1dCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB2YXIgc3RhdGUgPSBuZXcgU3RhdGUob3B0aW9ucyk7XG5cbiAgaWYgKCFzdGF0ZS5ub1JlZnMpIGdldER1cGxpY2F0ZVJlZmVyZW5jZXMoaW5wdXQsIHN0YXRlKTtcblxuICB2YXIgdmFsdWUgPSBpbnB1dDtcblxuICBpZiAoc3RhdGUucmVwbGFjZXIpIHtcbiAgICB2YWx1ZSA9IHN0YXRlLnJlcGxhY2VyLmNhbGwoeyAnJzogdmFsdWUgfSwgJycsIHZhbHVlKTtcbiAgfVxuXG4gIGlmICh3cml0ZU5vZGUoc3RhdGUsIDAsIHZhbHVlLCB0cnVlLCB0cnVlKSkgcmV0dXJuIHN0YXRlLmR1bXAgKyAnXFxuJztcblxuICByZXR1cm4gJyc7XG59XG5cbnZhciBkdW1wXzEgPSBkdW1wJDE7XG5cbnZhciBkdW1wZXIgPSB7XG5cdGR1bXA6IGR1bXBfMVxufTtcblxuZnVuY3Rpb24gcmVuYW1lZChmcm9tLCB0bykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignRnVuY3Rpb24geWFtbC4nICsgZnJvbSArICcgaXMgcmVtb3ZlZCBpbiBqcy15YW1sIDQuICcgK1xuICAgICAgJ1VzZSB5YW1sLicgKyB0byArICcgaW5zdGVhZCwgd2hpY2ggaXMgbm93IHNhZmUgYnkgZGVmYXVsdC4nKTtcbiAgfTtcbn1cblxuXG52YXIgVHlwZSAgICAgICAgICAgICAgICA9IHR5cGU7XG52YXIgU2NoZW1hICAgICAgICAgICAgICA9IHNjaGVtYTtcbnZhciBGQUlMU0FGRV9TQ0hFTUEgICAgID0gZmFpbHNhZmU7XG52YXIgSlNPTl9TQ0hFTUEgICAgICAgICA9IGpzb247XG52YXIgQ09SRV9TQ0hFTUEgICAgICAgICA9IGNvcmU7XG52YXIgREVGQVVMVF9TQ0hFTUEgICAgICA9IF9kZWZhdWx0O1xudmFyIGxvYWQgICAgICAgICAgICAgICAgPSBsb2FkZXIubG9hZDtcbnZhciBsb2FkQWxsICAgICAgICAgICAgID0gbG9hZGVyLmxvYWRBbGw7XG52YXIgZHVtcCAgICAgICAgICAgICAgICA9IGR1bXBlci5kdW1wO1xudmFyIFlBTUxFeGNlcHRpb24gICAgICAgPSBleGNlcHRpb247XG5cbi8vIFJlLWV4cG9ydCBhbGwgdHlwZXMgaW4gY2FzZSB1c2VyIHdhbnRzIHRvIGNyZWF0ZSBjdXN0b20gc2NoZW1hXG52YXIgdHlwZXMgPSB7XG4gIGJpbmFyeTogICAgYmluYXJ5LFxuICBmbG9hdDogICAgIGZsb2F0LFxuICBtYXA6ICAgICAgIG1hcCxcbiAgbnVsbDogICAgICBfbnVsbCxcbiAgcGFpcnM6ICAgICBwYWlycyxcbiAgc2V0OiAgICAgICBzZXQsXG4gIHRpbWVzdGFtcDogdGltZXN0YW1wLFxuICBib29sOiAgICAgIGJvb2wsXG4gIGludDogICAgICAgaW50LFxuICBtZXJnZTogICAgIG1lcmdlLFxuICBvbWFwOiAgICAgIG9tYXAsXG4gIHNlcTogICAgICAgc2VxLFxuICBzdHI6ICAgICAgIHN0clxufTtcblxuLy8gUmVtb3ZlZCBmdW5jdGlvbnMgZnJvbSBKUy1ZQU1MIDMuMC54XG52YXIgc2FmZUxvYWQgICAgICAgICAgICA9IHJlbmFtZWQoJ3NhZmVMb2FkJywgJ2xvYWQnKTtcbnZhciBzYWZlTG9hZEFsbCAgICAgICAgID0gcmVuYW1lZCgnc2FmZUxvYWRBbGwnLCAnbG9hZEFsbCcpO1xudmFyIHNhZmVEdW1wICAgICAgICAgICAgPSByZW5hbWVkKCdzYWZlRHVtcCcsICdkdW1wJyk7XG5cbnZhciBqc1lhbWwgPSB7XG5cdFR5cGU6IFR5cGUsXG5cdFNjaGVtYTogU2NoZW1hLFxuXHRGQUlMU0FGRV9TQ0hFTUE6IEZBSUxTQUZFX1NDSEVNQSxcblx0SlNPTl9TQ0hFTUE6IEpTT05fU0NIRU1BLFxuXHRDT1JFX1NDSEVNQTogQ09SRV9TQ0hFTUEsXG5cdERFRkFVTFRfU0NIRU1BOiBERUZBVUxUX1NDSEVNQSxcblx0bG9hZDogbG9hZCxcblx0bG9hZEFsbDogbG9hZEFsbCxcblx0ZHVtcDogZHVtcCxcblx0WUFNTEV4Y2VwdGlvbjogWUFNTEV4Y2VwdGlvbixcblx0dHlwZXM6IHR5cGVzLFxuXHRzYWZlTG9hZDogc2FmZUxvYWQsXG5cdHNhZmVMb2FkQWxsOiBzYWZlTG9hZEFsbCxcblx0c2FmZUR1bXA6IHNhZmVEdW1wXG59O1xuXG5leHBvcnQgZGVmYXVsdCBqc1lhbWw7XG5leHBvcnQgeyBDT1JFX1NDSEVNQSwgREVGQVVMVF9TQ0hFTUEsIEZBSUxTQUZFX1NDSEVNQSwgSlNPTl9TQ0hFTUEsIFNjaGVtYSwgVHlwZSwgWUFNTEV4Y2VwdGlvbiwgZHVtcCwgbG9hZCwgbG9hZEFsbCwgc2FmZUR1bXAsIHNhZmVMb2FkLCBzYWZlTG9hZEFsbCwgdHlwZXMgfTtcbiIsICJpbXBvcnQgeyBleGlzdHNTeW5jLCByZWFkRmlsZVN5bmMsIHdyaXRlRmlsZVN5bmMgfSBmcm9tICdmcyc7XG5pbXBvcnQgeyBQcm9qZWN0SnNvbiB9IGZyb20gJy4uJztcbmltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcbmltcG9ydCB7IEFic3RyYWN0UHJvamVjdCB9IGZyb20gJy4nO1xuXG50eXBlIEdvTW9kID0ge1xuICBtb2R1bGU/OiBzdHJpbmc7XG4gIHJlcXVpcmU/OiB7IG1vZHVsZTogc3RyaW5nOyB2ZXJzaW9uOiBzdHJpbmcgfVtdO1xuICAvLyB0b2RvIHN1cHBvcnQgcmVwbGFjZSBkaXJlY3RpdmVzXG59O1xuXG5leHBvcnQgY2xhc3MgR29sYW5nUHJvamVjdCBleHRlbmRzIEFic3RyYWN0UHJvamVjdCB7XG4gIGFzeW5jIHNldFByb2plY3QobmFtZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5nb01vZEZpbGUudGhlbigoZ29Nb2RGaWxlKSA9PiB7XG4gICAgICAvLyBGaW5kIHRoZSBmaXJzdCBsaW5lIHRoYXQgc3RhcnRzIHdpdGggXCJtb2R1bGVcIlxuICAgICAgLy8gUmVwbGFjZSB0aGUgbW9kdWxlIG5hbWUgd2l0aCB0aGUgbmV3IG5hbWVcbiAgICAgIC8vIFdyaXRlIHRoZSBmaWxlIGJhY2sgdG8gZGlza1xuICAgICAgaWYgKCFnb01vZEZpbGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBsaW5lcyA9IHJlYWRGaWxlU3luYyhnb01vZEZpbGUsICd1dGY4Jykuc3BsaXQoJ1xcbicpO1xuICAgICAgY29uc3QgbmV3TGluZXMgPSBsaW5lcy5tYXAoKGxpbmUpID0+IHtcbiAgICAgICAgY29uc3QgbW9kdWxlTWF0Y2ggPSBsaW5lLm1hdGNoKC9ebW9kdWxlXFxzKyhcXFMrKS8pO1xuICAgICAgICBpZiAobW9kdWxlTWF0Y2gpIHtcbiAgICAgICAgICByZXR1cm4gYG1vZHVsZSAke25hbWV9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGluZTtcbiAgICAgIH0pO1xuICAgICAgd3JpdGVGaWxlU3luYyhnb01vZEZpbGUsIG5ld0xpbmVzLmpvaW4oJ1xcbicpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IGdvTW9kRmlsZSgpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiB0aGlzLndvcmtkaXJcbiAgICAgIC50aGVuKCh3b3JrRGlyKSA9PiBqb2luKHdvcmtEaXIsICdnby5tb2QnKSlcbiAgICAgIC50aGVuKChnb01vZEZpbGUpID0+IHtcbiAgICAgICAgaWYgKCFleGlzdHNTeW5jKGdvTW9kRmlsZSkpIHtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnb01vZEZpbGU7XG4gICAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IGdvUHJvamVjdCgpOiBQcm9taXNlPHsgcHJvamVjdE5hbWU/OiBzdHJpbmc7IGdvTW9kOiBHb01vZCB9IHwgdW5kZWZpbmVkPiB7XG4gICAgcmV0dXJuIHRoaXMuZ29Nb2RGaWxlLnRoZW4oKGdvTW9kRmlsZSkgPT4ge1xuICAgICAgaWYgKCFnb01vZEZpbGUpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIC8vIFRISVMgSVMgQVdGVUwgSSBXSVNIIEkgSEFEIEEgQkVUVEVSIFdBWSBUTyBETyBUSElTIEkgRkVFTCBESVJUWVxuICAgICAgLy8gLSBBbGwgSSByZWFsbHkgd2FudCBpcyBtb2R1bGUgYW5kIGRlcGVuZGVuY2llc1xuICAgICAgLy8gLSBQZXJoYXBzIGxvb2sgaW50byBnb2xhbmcgdG9vbGluZyBhbmQgbWFrZSBhIEpTIHZhcmlhbnQgb2YgdGhlIGdvIG1vZCBwYXJzZXJcbiAgICAgIC8vIC0gVE9ETzogcmVsZWFzZSBhIGdvIG1vZCBwYXJzZXIgbGlicmFyeVxuICAgICAgY29uc3QgbGluZXMgPSByZWFkRmlsZVN5bmMoZ29Nb2RGaWxlLCAndXRmOCcpLnNwbGl0KCdcXG4nKTtcblxuICAgICAgbGV0IHByb2plY3ROYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gICAgICBsZXQgaW5zaWRlUmVxdWlyZUJsb2NrID0gZmFsc2U7XG5cbiAgICAgIGNvbnN0IHBhcnNlZDogR29Nb2QgPSB7fTtcblxuICAgICAgbGluZXMuZm9yRWFjaCgobGluZSkgPT4ge1xuICAgICAgICBjb25zdCBtb2R1bGVNYXRjaCA9IGxpbmUubWF0Y2goL15tb2R1bGVcXHMrKFxcUyspLyk7XG4gICAgICAgIGNvbnN0IHJlcXVpcmVNYXRjaCA9IGxpbmUubWF0Y2goL15yZXF1aXJlXFxzKyhcXFMrKVxccysoXFxTKykvKTsgLy8gU2luZ2xlLWxpbmUgcmVxdWlyZVxuICAgICAgICBjb25zdCByZXF1aXJlU3RhcnRNYXRjaCA9IGxpbmUubWF0Y2goL15yZXF1aXJlXFxzKlxcKFxccyokLyk7IC8vIFN0YXJ0IG9mIG11bHRpbGluZSByZXF1aXJlXG4gICAgICAgIGNvbnN0IHJlcXVpcmVFbmRNYXRjaCA9IGxpbmUubWF0Y2goL15cXHMqXFwpXFxzKiQvKTsgLy8gRW5kIG9mIG11bHRpbGluZSByZXF1aXJlXG5cbiAgICAgICAgaWYgKG1vZHVsZU1hdGNoKSB7XG4gICAgICAgICAgcGFyc2VkLm1vZHVsZSA9IG1vZHVsZU1hdGNoWzFdO1xuICAgICAgICAgIGNvbnN0IHByb2plY3ROYW1lTWF0Y2ggPSBsaW5lLm1hdGNoKC8oPzpebW9kdWxlXFxzK3xcXC8pKFteL1xcc10rKSQvKTtcbiAgICAgICAgICBpZiAocHJvamVjdE5hbWVNYXRjaCkge1xuICAgICAgICAgICAgcHJvamVjdE5hbWUgPSBwcm9qZWN0TmFtZU1hdGNoWzFdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChyZXF1aXJlU3RhcnRNYXRjaCkge1xuICAgICAgICAgIGluc2lkZVJlcXVpcmVCbG9jayA9IHRydWU7IC8vIFdlJ3JlIGluc2lkZSBhIG11bHRpLWxpbmUgcmVxdWlyZSBibG9ja1xuICAgICAgICB9IGVsc2UgaWYgKHJlcXVpcmVFbmRNYXRjaCkge1xuICAgICAgICAgIGluc2lkZVJlcXVpcmVCbG9jayA9IGZhbHNlOyAvLyBFbmQgb2YgdGhlIG11bHRpLWxpbmUgcmVxdWlyZSBibG9ja1xuICAgICAgICB9IGVsc2UgaWYgKGluc2lkZVJlcXVpcmVCbG9jaykge1xuICAgICAgICAgIGNvbnN0IG11bHRpbGluZVJlcXVpcmVNYXRjaCA9IGxpbmUubWF0Y2goL15cXHMqKFxcUyspXFxzKyhcXFMrKVxccyguKikkLyk7IC8vIFJlcXVpcmUgZW50cmllcyB3aXRoaW4gbXVsdGlsaW5lIGJsb2NrXG4gICAgICAgICAgaWYgKG11bHRpbGluZVJlcXVpcmVNYXRjaCkge1xuICAgICAgICAgICAgaWYgKCFwYXJzZWQucmVxdWlyZSkge1xuICAgICAgICAgICAgICBwYXJzZWQucmVxdWlyZSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyc2VkLnJlcXVpcmUucHVzaCh7XG4gICAgICAgICAgICAgIG1vZHVsZTogbXVsdGlsaW5lUmVxdWlyZU1hdGNoWzFdLFxuICAgICAgICAgICAgICB2ZXJzaW9uOiBtdWx0aWxpbmVSZXF1aXJlTWF0Y2hbMl0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocmVxdWlyZU1hdGNoKSB7XG4gICAgICAgICAgaWYgKCFwYXJzZWQucmVxdWlyZSkge1xuICAgICAgICAgICAgcGFyc2VkLnJlcXVpcmUgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFyc2VkLnJlcXVpcmUucHVzaCh7XG4gICAgICAgICAgICBtb2R1bGU6IHJlcXVpcmVNYXRjaFsxXSxcbiAgICAgICAgICAgIHZlcnNpb246IHJlcXVpcmVNYXRjaFsyXSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB7IHByb2plY3ROYW1lLCBnb01vZDogcGFyc2VkIH07XG4gICAgfSk7XG4gIH1cblxuICBnZXQgcHJvamVjdEpzb24oKTogUHJvbWlzZTxQcm9qZWN0SnNvbiB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiBQcm9taXNlLmFsbChbdGhpcy5nb1Byb2plY3QsIHRoaXMuc3RhbmRhbG9uZUNvbmZpZ10pLnRoZW4oKFtwcm9qZWN0LCBjb25maWddKSA9PiB7XG4gICAgICBjb25zdCBwcm9qZWN0SnNvbjogUHJvamVjdEpzb24gPSB7XG4gICAgICAgIHR5cGU6ICdnb2xhbmcnLFxuICAgICAgfTtcblxuICAgICAgaWYgKCFwcm9qZWN0KSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHsgcHJvamVjdE5hbWUsIGdvTW9kIH0gPSBwcm9qZWN0O1xuICAgICAgcHJvamVjdEpzb24ubmFtZSA9IHByb2plY3ROYW1lO1xuXG4gICAgICAvLyBUT0RPOiBzdXBwb3J0IHZlcnNpb24gZnJvbSBnb2xhbmcgdGFnZ2luZyBzdHJ1Y3R1cmVzXG4gICAgICAvLyBUT0RPOiBzdXBwb3J0IHJlcGxhY2UgZGlyZWN0aXZlc1xuICAgICAgcHJvamVjdEpzb24uZGVwZW5kZW5jaWVzID0gZ29Nb2QucmVxdWlyZT8ucmVkdWNlKChhY2MsIGRlcCkgPT4ge1xuICAgICAgICBhY2NbZGVwLm1vZHVsZV0gPSBkZXAudmVyc2lvbjtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sIHt9IGFzIHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0pO1xuXG4gICAgICBpZiAoY29uZmlnKSB7XG4gICAgICAgIHByb2plY3RKc29uLnNjYWZmb2xkbHkgPSBjb25maWc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9qZWN0SnNvbjtcbiAgICB9KTtcbiAgfVxufVxuIiwgImltcG9ydCB7IHJlYWRkaXJTeW5jLCByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7XG5pbXBvcnQgeyBJU2VydmljZUNvbmZpZywgUHJvamVjdEpzb24sIFByb2plY3RKc29uQmluLCBTY3JpcHQsIFNjcmlwdHMgfSBmcm9tICcuLic7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBBYnN0cmFjdFByb2plY3QgfSBmcm9tICcuJztcbmltcG9ydCB7IHBhcnNlU3RyaW5nUHJvbWlzZSB9IGZyb20gJ3htbDJqcyc7XG5cbmV4cG9ydCB0eXBlIENzUHJvaiA9IHtcbiAgUHJvamVjdD86IHtcbiAgICBQcm9wZXJ0eUdyb3VwPzogQXJyYXk8e1xuICAgICAgVmVyc2lvbj86IEFycmF5PHN0cmluZz47XG4gICAgICBTY2FmZm9sZGx5PzogQXJyYXk8e1xuICAgICAgICBSdW50aW1lPzogQXJyYXk8c3RyaW5nPjtcbiAgICAgICAgSGFuZGxlcj86IEFycmF5PHN0cmluZz47XG4gICAgICAgIEJpbj86IEFycmF5PHtcbiAgICAgICAgICAkPzoge1xuICAgICAgICAgICAgbmFtZT86IHN0cmluZzsgLy8gZS5nLiwgXCJBcGlBcHAuZGxsXCJcbiAgICAgICAgICB9O1xuICAgICAgICAgIF86IHN0cmluZzsgLy8gUGF0aCB0byB0aGUgRExMLCBlLmcuLCBcIkFwaUFwcDpiaW4vUmVsZWFzZS9uZXQ4LjAvQXBpQXBwLmRsbFwiXG4gICAgICAgIH0+O1xuICAgICAgICBTZXJ2aWNlPzogQXJyYXk8e1xuICAgICAgICAgICQ/OiB7XG4gICAgICAgICAgICBuYW1lPzogc3RyaW5nOyAvLyBlLmcuLCBcIkFwaUFwcFwiXG4gICAgICAgICAgfTtcbiAgICAgICAgICBGaWxlOiBBcnJheTxzdHJpbmc+O1xuICAgICAgICAgIFNjcmlwdD86IEFycmF5PHtcbiAgICAgICAgICAgICQ/OiB7XG4gICAgICAgICAgICAgIG5hbWU/OiBzdHJpbmc7IC8vIGUuZy4sIFwiYnVpbGRcIiwgXCJzdGFydFwiXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXzogc3RyaW5nOyAvLyBTY3JpcHQgY29tbWFuZCwgZS5nLiwgXCJkb3RuZXQgcHVibGlzaFwiXG4gICAgICAgICAgfT47XG4gICAgICAgIH0+O1xuICAgICAgfT47XG4gICAgfT47XG4gICAgSXRlbUdyb3VwPzogQXJyYXk8e1xuICAgICAgUGFja2FnZVJlZmVyZW5jZT86IHtcbiAgICAgICAgJD86IHtcbiAgICAgICAgICBJbmNsdWRlPzogc3RyaW5nOyAvLyBlLmcuLCBcIk1pY3Jvc29mdC5Bc3BOZXRDb3JlLk9wZW5BcGlcIlxuICAgICAgICAgIFZlcnNpb24/OiBzdHJpbmc7IC8vIGUuZy4sIFwiOC4wLjhcIlxuICAgICAgICB9O1xuICAgICAgfVtdO1xuICAgIH0+O1xuICB9O1xufTtcblxuZXhwb3J0IGNsYXNzIERvdG5ldFByb2plY3QgZXh0ZW5kcyBBYnN0cmFjdFByb2plY3Qge1xuICBhc3luYyBzZXRQcm9qZWN0KFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICBfbmFtZTogc3RyaW5nLFxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBUaGlzIG9uZSBpcyB0cmlja3k6XG4gICAgLy8gLSBSZW5hbWUgLmNzcHJvaiBmaWxlXG4gICAgLy8gLSBSZW5hbWUgLmh0dHAgZmlsZVxuICAgIC8vIC0gUmVwbGFjZSBcIkRvdE5ldENTaGFycEFwcFwiIGluIC5jc3Byb2ogZmlsZVxuICAgIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG4gIH1cblxuICBwcml2YXRlIGdldCBwcm9qZWN0RmlsZSgpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiB0aGlzLndvcmtkaXIudGhlbigod29ya0RpcikgPT4ge1xuICAgICAgY29uc3QgZmlsZXMgPSByZWFkZGlyU3luYyh3b3JrRGlyKS5maWx0ZXIoKGZpbGUpID0+IGZpbGUuZW5kc1dpdGgoJy5jc3Byb2onKSk7XG4gICAgICBpZiAoZmlsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoZmlsZXMubGVuZ3RoID4gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE11bHRpcGxlIC5jc3Byb2ogZmlsZXMgZm91bmQ6ICR7ZmlsZXMuam9pbignLCAnKX0uYCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmlsZXNbMF07XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldCBwcm9qZWN0KCk6IFByb21pc2U8eyBwcm9qZWN0TmFtZTogc3RyaW5nOyBjc1Byb2o6IENzUHJvaiB9IHwgdW5kZWZpbmVkPiB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFt0aGlzLnByb2plY3RGaWxlLCB0aGlzLndvcmtkaXJdKS50aGVuKChbcHJvamVjdEZpbGUsIHdvcmtEaXJdKSA9PiB7XG4gICAgICBpZiAoIXByb2plY3RGaWxlKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gKHBhcnNlU3RyaW5nUHJvbWlzZShyZWFkRmlsZVN5bmMoam9pbih3b3JrRGlyLCBwcm9qZWN0RmlsZSkpKSBhcyBQcm9taXNlPENzUHJvaj4pLnRoZW4oXG4gICAgICAgIChjc1Byb2opID0+IHtcbiAgICAgICAgICByZXR1cm4geyBwcm9qZWN0TmFtZTogcHJvamVjdEZpbGUucmVwbGFjZSgnLmNzcHJvaicsICcnKSwgY3NQcm9qIH07XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0IHByb2plY3RKc29uKCk6IFByb21pc2U8UHJvamVjdEpzb24gfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5wcm9qZWN0LnRoZW4oKHByb2plY3QpID0+IHtcbiAgICAgIGNvbnN0IHByb2plY3RKc29uOiBQcm9qZWN0SnNvbiA9IHtcbiAgICAgICAgdHlwZTogJ2RvdG5ldCcsXG4gICAgICB9O1xuXG4gICAgICBpZiAoIXByb2plY3QpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBwcm9qZWN0TmFtZSwgY3NQcm9qIH0gPSBwcm9qZWN0O1xuICAgICAgcHJvamVjdEpzb24ubmFtZSA9IHByb2plY3ROYW1lO1xuXG4gICAgICBjb25zdCBjc1Byb2plY3QgPSBjc1Byb2o/LlByb2plY3Q7XG5cbiAgICAgIGlmICghY3NQcm9qZWN0KSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByb3BlcnR5R3JvdXAgPSBjc1Byb2plY3QuUHJvcGVydHlHcm91cD8uWzBdO1xuXG4gICAgICBpZiAoIXByb3BlcnR5R3JvdXApIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdmVyc2lvbiA9IHByb3BlcnR5R3JvdXAuVmVyc2lvbj8uWzBdO1xuICAgICAgcHJvamVjdEpzb24udmVyc2lvbiA9IHZlcnNpb247XG5cbiAgICAgIGNvbnN0IFNjYWZmb2xkbHkgPSBwcm9wZXJ0eUdyb3VwLlNjYWZmb2xkbHk/LlswXTtcblxuICAgICAgaWYgKCFTY2FmZm9sZGx5KSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGJpbjogUHJvamVjdEpzb25CaW4gPSAoU2NhZmZvbGRseS5CaW4gfHwgW10pLnJlZHVjZSgoYWNjLCBiaW5FbnRyeSkgPT4ge1xuICAgICAgICBjb25zdCBuYW1lID0gYmluRW50cnkuJD8ubmFtZTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBiaW5FbnRyeS5fO1xuICAgICAgICBpZiAoIW5hbWUgfHwgIXZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfVxuICAgICAgICBhY2NbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sIHt9IGFzIFByb2plY3RKc29uQmluKTtcblxuICAgICAgY29uc3Qgc2VydmljZXM6IElTZXJ2aWNlQ29uZmlnW10gPSAoU2NhZmZvbGRseS5TZXJ2aWNlIHx8IFtdKS5tYXAoKHNlcnZpY2UpID0+IHtcbiAgICAgICAgY29uc3Qgc2NyaXB0czogU2NyaXB0cyA9IChzZXJ2aWNlLlNjcmlwdCB8fCBbXSkucmVkdWNlKChhY2MsIHNjcmlwdCkgPT4ge1xuICAgICAgICAgIGNvbnN0IG5hbWUgPSBzY3JpcHQuJD8ubmFtZSBhcyBTY3JpcHQ7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBzY3JpcHQuXztcbiAgICAgICAgICBpZiAoIW5hbWUgfHwgIXZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhY2NbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCB7fSBhcyBTY3JpcHRzKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5hbWU6IHNlcnZpY2UuJD8ubmFtZSxcbiAgICAgICAgICBzY3JpcHRzLFxuICAgICAgICAgIGZpbGVzOiBzZXJ2aWNlLkZpbGUsXG4gICAgICAgIH0gYXMgSVNlcnZpY2VDb25maWc7XG4gICAgICB9KTtcblxuICAgICAgcHJvamVjdEpzb24uc2NhZmZvbGRseSA9IHtcbiAgICAgICAgcnVudGltZTogU2NhZmZvbGRseS5SdW50aW1lPy5bMF0sXG4gICAgICAgIGhhbmRsZXI6IFNjYWZmb2xkbHkuSGFuZGxlcj8uWzBdLFxuICAgICAgICBiaW4sXG4gICAgICAgIHNlcnZpY2VzLFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHByb2plY3RKc29uO1xuICAgIH0pO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgZXhpc3RzU3luYywgcmVhZEZpbGVTeW5jLCB3cml0ZUZpbGVTeW5jIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgSVNjYWZmb2xkbHlDb25maWcsIElTZXJ2aWNlQ29uZmlnLCBQcm9qZWN0SnNvbiB9IGZyb20gJy4uJztcbmltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcbmltcG9ydCB7IEFic3RyYWN0UHJvamVjdCB9IGZyb20gJy4nO1xuaW1wb3J0IHsgcGFyc2UsIHN0cmluZ2lmeSB9IGZyb20gJ3Ntb2wtdG9tbCc7XG5cbnR5cGUgU2NhZmZvbGRseUNvbmZpZ1dpdGhTZXJ2aWNlTWFwID0gSVNjYWZmb2xkbHlDb25maWcgJiB7XG4gIHNlcnZpY2VzPzogQXJyYXk8UGFydGlhbDxJU2VydmljZUNvbmZpZz5bXT4gfCB7IFtrZXk6IHN0cmluZ106IFBhcnRpYWw8SVNlcnZpY2VDb25maWc+IH07XG59O1xuXG50eXBlIFB5cHJvamVjdFRvbWwgPSB7XG4gIHRvb2w/OiB7XG4gICAgcG9ldHJ5Pzoge1xuICAgICAgbmFtZT86IHN0cmluZztcbiAgICAgIHZlcnNpb24/OiBzdHJpbmc7XG4gICAgICBkZXBlbmRlbmNpZXM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB8IHsgdmVyc2lvbj86IHN0cmluZzsgZXh0cmFzPzogc3RyaW5nW10gfSB9O1xuICAgIH07XG4gICAgc2NhZmZvbGRseT86IFBhcnRpYWw8U2NhZmZvbGRseUNvbmZpZ1dpdGhTZXJ2aWNlTWFwPjtcbiAgfTtcbiAgJ2J1aWxkLXN5c3RlbSc/OiB7XG4gICAgcmVxdWlyZXM/OiBzdHJpbmdbXTtcbiAgfTtcbn07XG5cbmV4cG9ydCBjbGFzcyBQeXRob25Qcm9qZWN0IGV4dGVuZHMgQWJzdHJhY3RQcm9qZWN0IHtcbiAgYXN5bmMgc2V0UHJvamVjdChuYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5weVByb2plY3RGaWxlLnRoZW4oKHB5UHJvamVjdEZpbGUpID0+IHtcbiAgICAgIGlmICghcHlQcm9qZWN0RmlsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHB5UHJvamVjdCA9IHBhcnNlKHJlYWRGaWxlU3luYyhweVByb2plY3RGaWxlLCAndXRmLTgnKSkgYXMgUGFydGlhbDxQeXByb2plY3RUb21sPjtcblxuICAgICAgaWYgKHB5UHJvamVjdC50b29sPy5wb2V0cnkpIHtcbiAgICAgICAgcHlQcm9qZWN0LnRvb2wucG9ldHJ5Lm5hbWUgPSBuYW1lO1xuICAgICAgfVxuXG4gICAgICB3cml0ZUZpbGVTeW5jKHB5UHJvamVjdEZpbGUsIHN0cmluZ2lmeShweVByb2plY3QpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IHB5UHJvamVjdEZpbGUoKTogUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy53b3JrZGlyXG4gICAgICAudGhlbigod29ya0RpcikgPT4gam9pbih3b3JrRGlyLCAncHlwcm9qZWN0LnRvbWwnKSlcbiAgICAgIC50aGVuKChweVByb2plY3RGaWxlKSA9PiB7XG4gICAgICAgIGlmICghZXhpc3RzU3luYyhweVByb2plY3RGaWxlKSkge1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHB5UHJvamVjdEZpbGU7XG4gICAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IHB5UHJvamVjdCgpOiBQcm9taXNlPHsgcHlwcm9qZWN0VG9tbDogUHlwcm9qZWN0VG9tbCB9IHwgdW5kZWZpbmVkPiB7XG4gICAgcmV0dXJuIHRoaXMucHlQcm9qZWN0RmlsZS50aGVuKChweVByb2plY3RGaWxlKSA9PiB7XG4gICAgICBpZiAoIXB5UHJvamVjdEZpbGUpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcGFyc2VkID0gcGFyc2UocmVhZEZpbGVTeW5jKHB5UHJvamVjdEZpbGUsICd1dGYtOCcpKSBhcyBQeXByb2plY3RUb21sO1xuXG4gICAgICByZXR1cm4geyBweXByb2plY3RUb21sOiBwYXJzZWQgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldCBwcm9qZWN0SnNvbigpOiBQcm9taXNlPFByb2plY3RKc29uIHwgdW5kZWZpbmVkPiB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFt0aGlzLnB5UHJvamVjdF0pLnRoZW4oKFtwcm9qZWN0XSkgPT4ge1xuICAgICAgY29uc3QgcHJvamVjdEpzb246IFByb2plY3RKc29uID0geyB0eXBlOiAncHl0aG9uJyB9O1xuXG4gICAgICBpZiAoIXByb2plY3QpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBweXByb2plY3RUb21sIH0gPSBwcm9qZWN0O1xuXG4gICAgICBjb25zdCBkZXBlbmRlbmNpZXMgPSBweXByb2plY3RUb21sLnRvb2w/LnBvZXRyeT8uZGVwZW5kZW5jaWVzIHx8IHt9O1xuXG4gICAgICBpZiAocHlwcm9qZWN0VG9tbC50b29sPy5wb2V0cnkpIHtcbiAgICAgICAgcHJvamVjdEpzb24ubmFtZSA9IHB5cHJvamVjdFRvbWwudG9vbC5wb2V0cnkubmFtZTtcbiAgICAgICAgcHJvamVjdEpzb24udmVyc2lvbiA9IHB5cHJvamVjdFRvbWwudG9vbC5wb2V0cnkudmVyc2lvbjtcbiAgICAgIH1cblxuICAgICAgcHJvamVjdEpzb24uZGVwZW5kZW5jaWVzID0gT2JqZWN0LmVudHJpZXMoZGVwZW5kZW5jaWVzIHx8IHt9KS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgYWNjW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZS52ZXJzaW9uID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGFjY1trZXldID0gdmFsdWUudmVyc2lvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30gYXMgeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSk7XG5cbiAgICAgIGNvbnN0IHNlcnZpY2VzID1cbiAgICAgICAgcHlwcm9qZWN0VG9tbC50b29sPy5zY2FmZm9sZGx5Py5zZXJ2aWNlcyAmJlxuICAgICAgICBBcnJheS5pc0FycmF5KHB5cHJvamVjdFRvbWwudG9vbD8uc2NhZmZvbGRseT8uc2VydmljZXMpXG4gICAgICAgICAgPyBweXByb2plY3RUb21sLnRvb2wuc2NhZmZvbGRseS5zZXJ2aWNlc1xuICAgICAgICAgIDogT2JqZWN0LmVudHJpZXMocHlwcm9qZWN0VG9tbC50b29sPy5zY2FmZm9sZGx5Py5zZXJ2aWNlcyB8fCB7fSkubWFwKChba2V5LCB2YWx1ZV0pID0+ICh7XG4gICAgICAgICAgICAgIC4uLnZhbHVlLFxuICAgICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgIGNvbnN0IHNjYWZmb2xkbHk6IFBhcnRpYWw8SVNjYWZmb2xkbHlDb25maWc+ID0ge1xuICAgICAgICAuLi5weXByb2plY3RUb21sLnRvb2w/LnNjYWZmb2xkbHksXG4gICAgICAgIHBhY2thZ2VzOiBbXG4gICAgICAgICAgLi4uKHB5cHJvamVjdFRvbWwudG9vbD8uc2NhZmZvbGRseT8ucGFja2FnZXMgfHwgW10pLFxuICAgICAgICAgIC4uLihweXByb2plY3RUb21sWydidWlsZC1zeXN0ZW0nXT8ucmVxdWlyZXMgfHwgW10pLm1hcCgocGtnKSA9PiBgcGlwOiR7cGtnfWApLFxuICAgICAgICBdLFxuICAgICAgICBzZXJ2aWNlcyxcbiAgICAgIH07XG5cbiAgICAgIHByb2plY3RKc29uLnNjYWZmb2xkbHkgPSBzY2FmZm9sZGx5O1xuXG4gICAgICByZXR1cm4gcHJvamVjdEpzb247XG4gICAgfSk7XG4gIH1cbn1cbiIsICIvKiFcbiAqIENvcHlyaWdodCAoYykgU3F1aXJyZWwgQ2hhdCBldCBhbC4sIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbiAqXG4gKiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiAqICAgIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICogMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKiAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBjb3B5cmlnaHQgaG9sZGVyIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuICogICAgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXRcbiAqICAgIHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkRcbiAqIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gKiBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG4gKiBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFXG4gKiBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTFxuICogREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1JcbiAqIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSXG4gKiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLFxuICogT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0VcbiAqIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbmZ1bmN0aW9uIGdldExpbmVDb2xGcm9tUHRyKHN0cmluZywgcHRyKSB7XG4gICAgbGV0IGxpbmVzID0gc3RyaW5nLnNsaWNlKDAsIHB0cikuc3BsaXQoL1xcclxcbnxcXG58XFxyL2cpO1xuICAgIHJldHVybiBbbGluZXMubGVuZ3RoLCBsaW5lcy5wb3AoKS5sZW5ndGggKyAxXTtcbn1cbmZ1bmN0aW9uIG1ha2VDb2RlQmxvY2soc3RyaW5nLCBsaW5lLCBjb2x1bW4pIHtcbiAgICBsZXQgbGluZXMgPSBzdHJpbmcuc3BsaXQoL1xcclxcbnxcXG58XFxyL2cpO1xuICAgIGxldCBjb2RlYmxvY2sgPSAnJztcbiAgICBsZXQgbnVtYmVyTGVuID0gKE1hdGgubG9nMTAobGluZSArIDEpIHwgMCkgKyAxO1xuICAgIGZvciAobGV0IGkgPSBsaW5lIC0gMTsgaSA8PSBsaW5lICsgMTsgaSsrKSB7XG4gICAgICAgIGxldCBsID0gbGluZXNbaSAtIDFdO1xuICAgICAgICBpZiAoIWwpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY29kZWJsb2NrICs9IGkudG9TdHJpbmcoKS5wYWRFbmQobnVtYmVyTGVuLCAnICcpO1xuICAgICAgICBjb2RlYmxvY2sgKz0gJzogICc7XG4gICAgICAgIGNvZGVibG9jayArPSBsO1xuICAgICAgICBjb2RlYmxvY2sgKz0gJ1xcbic7XG4gICAgICAgIGlmIChpID09PSBsaW5lKSB7XG4gICAgICAgICAgICBjb2RlYmxvY2sgKz0gJyAnLnJlcGVhdChudW1iZXJMZW4gKyBjb2x1bW4gKyAyKTtcbiAgICAgICAgICAgIGNvZGVibG9jayArPSAnXlxcbic7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvZGVibG9jaztcbn1cbmV4cG9ydCBjbGFzcyBUb21sRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgbGluZTtcbiAgICBjb2x1bW47XG4gICAgY29kZWJsb2NrO1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgW2xpbmUsIGNvbHVtbl0gPSBnZXRMaW5lQ29sRnJvbVB0cihvcHRpb25zLnRvbWwsIG9wdGlvbnMucHRyKTtcbiAgICAgICAgY29uc3QgY29kZWJsb2NrID0gbWFrZUNvZGVCbG9jayhvcHRpb25zLnRvbWwsIGxpbmUsIGNvbHVtbik7XG4gICAgICAgIHN1cGVyKGBJbnZhbGlkIFRPTUwgZG9jdW1lbnQ6ICR7bWVzc2FnZX1cXG5cXG4ke2NvZGVibG9ja31gLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5saW5lID0gbGluZTtcbiAgICAgICAgdGhpcy5jb2x1bW4gPSBjb2x1bW47XG4gICAgICAgIHRoaXMuY29kZWJsb2NrID0gY29kZWJsb2NrO1xuICAgIH1cbn1cbiIsICIvKiFcbiAqIENvcHlyaWdodCAoYykgU3F1aXJyZWwgQ2hhdCBldCBhbC4sIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbiAqXG4gKiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiAqICAgIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICogMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKiAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBjb3B5cmlnaHQgaG9sZGVyIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuICogICAgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXRcbiAqICAgIHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkRcbiAqIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gKiBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG4gKiBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFXG4gKiBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTFxuICogREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1JcbiAqIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSXG4gKiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLFxuICogT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0VcbiAqIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbmltcG9ydCB7IFRvbWxFcnJvciB9IGZyb20gJy4vZXJyb3IuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGluZGV4T2ZOZXdsaW5lKHN0ciwgc3RhcnQgPSAwLCBlbmQgPSBzdHIubGVuZ3RoKSB7XG4gICAgbGV0IGlkeCA9IHN0ci5pbmRleE9mKCdcXG4nLCBzdGFydCk7XG4gICAgaWYgKHN0cltpZHggLSAxXSA9PT0gJ1xccicpXG4gICAgICAgIGlkeC0tO1xuICAgIHJldHVybiBpZHggPD0gZW5kID8gaWR4IDogLTE7XG59XG5leHBvcnQgZnVuY3Rpb24gc2tpcENvbW1lbnQoc3RyLCBwdHIpIHtcbiAgICBmb3IgKGxldCBpID0gcHRyOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBjID0gc3RyW2ldO1xuICAgICAgICBpZiAoYyA9PT0gJ1xcbicpXG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgaWYgKGMgPT09ICdcXHInICYmIHN0cltpICsgMV0gPT09ICdcXG4nKVxuICAgICAgICAgICAgcmV0dXJuIGkgKyAxO1xuICAgICAgICBpZiAoKGMgPCAnXFx4MjAnICYmIGMgIT09ICdcXHQnKSB8fCBjID09PSAnXFx4N2YnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVG9tbEVycm9yKCdjb250cm9sIGNoYXJhY3RlcnMgYXJlIG5vdCBhbGxvd2VkIGluIGNvbW1lbnRzJywge1xuICAgICAgICAgICAgICAgIHRvbWw6IHN0cixcbiAgICAgICAgICAgICAgICBwdHI6IHB0cixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHIubGVuZ3RoO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNraXBWb2lkKHN0ciwgcHRyLCBiYW5OZXdMaW5lcywgYmFuQ29tbWVudHMpIHtcbiAgICBsZXQgYztcbiAgICB3aGlsZSAoKGMgPSBzdHJbcHRyXSkgPT09ICcgJyB8fCBjID09PSAnXFx0JyB8fCAoIWJhbk5ld0xpbmVzICYmIChjID09PSAnXFxuJyB8fCBjID09PSAnXFxyJyAmJiBzdHJbcHRyICsgMV0gPT09ICdcXG4nKSkpXG4gICAgICAgIHB0cisrO1xuICAgIHJldHVybiBiYW5Db21tZW50cyB8fCBjICE9PSAnIydcbiAgICAgICAgPyBwdHJcbiAgICAgICAgOiBza2lwVm9pZChzdHIsIHNraXBDb21tZW50KHN0ciwgcHRyKSwgYmFuTmV3TGluZXMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNraXBVbnRpbChzdHIsIHB0ciwgc2VwLCBlbmQsIGJhbk5ld0xpbmVzID0gZmFsc2UpIHtcbiAgICBpZiAoIWVuZCkge1xuICAgICAgICBwdHIgPSBpbmRleE9mTmV3bGluZShzdHIsIHB0cik7XG4gICAgICAgIHJldHVybiBwdHIgPCAwID8gc3RyLmxlbmd0aCA6IHB0cjtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IHB0cjsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgYyA9IHN0cltpXTtcbiAgICAgICAgaWYgKGMgPT09ICcjJykge1xuICAgICAgICAgICAgaSA9IGluZGV4T2ZOZXdsaW5lKHN0ciwgaSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gc2VwKSB7XG4gICAgICAgICAgICByZXR1cm4gaSArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gZW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiYW5OZXdMaW5lcyAmJiAoYyA9PT0gJ1xcbicgfHwgYyA9PT0gJ1xccicgJiYgc3RyW2kgKyAxXSA9PT0gJ1xcbicpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgVG9tbEVycm9yKCdjYW5ub3QgZmluZCBlbmQgb2Ygc3RydWN0dXJlJywge1xuICAgICAgICB0b21sOiBzdHIsXG4gICAgICAgIHB0cjogcHRyXG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RyaW5nRW5kKHN0ciwgc2Vlaykge1xuICAgIGxldCBmaXJzdCA9IHN0cltzZWVrXTtcbiAgICBsZXQgdGFyZ2V0ID0gZmlyc3QgPT09IHN0cltzZWVrICsgMV0gJiYgc3RyW3NlZWsgKyAxXSA9PT0gc3RyW3NlZWsgKyAyXVxuICAgICAgICA/IHN0ci5zbGljZShzZWVrLCBzZWVrICsgMylcbiAgICAgICAgOiBmaXJzdDtcbiAgICBzZWVrICs9IHRhcmdldC5sZW5ndGggLSAxO1xuICAgIGRvXG4gICAgICAgIHNlZWsgPSBzdHIuaW5kZXhPZih0YXJnZXQsICsrc2Vlayk7XG4gICAgd2hpbGUgKHNlZWsgPiAtMSAmJiBmaXJzdCAhPT0gXCInXCIgJiYgc3RyW3NlZWsgLSAxXSA9PT0gJ1xcXFwnICYmIHN0cltzZWVrIC0gMl0gIT09ICdcXFxcJyk7XG4gICAgaWYgKHNlZWsgPiAtMSkge1xuICAgICAgICBzZWVrICs9IHRhcmdldC5sZW5ndGg7XG4gICAgICAgIGlmICh0YXJnZXQubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgaWYgKHN0cltzZWVrXSA9PT0gZmlyc3QpXG4gICAgICAgICAgICAgICAgc2VlaysrO1xuICAgICAgICAgICAgaWYgKHN0cltzZWVrXSA9PT0gZmlyc3QpXG4gICAgICAgICAgICAgICAgc2VlaysrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzZWVrO1xufVxuIiwgIi8qIVxuICogQ29weXJpZ2h0IChjKSBTcXVpcnJlbCBDaGF0IGV0IGFsLiwgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICpcbiAqIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuICogICAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICogICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIGNvcHlyaWdodCBob2xkZXIgbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4gKiAgICBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dFxuICogICAgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORFxuICogQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEVcbiAqIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMXG4gKiBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUlxuICogU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVJcbiAqIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksXG4gKiBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRVxuICogT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xubGV0IERBVEVfVElNRV9SRSA9IC9eKFxcZHs0fS1cXGR7Mn0tXFxkezJ9KT9bVCBdPyg/OihcXGR7Mn0pOlxcZHsyfTpcXGR7Mn0oPzpcXC5cXGQrKT8pPyhafFstK11cXGR7Mn06XFxkezJ9KT8kL2k7XG5leHBvcnQgY2xhc3MgVG9tbERhdGUgZXh0ZW5kcyBEYXRlIHtcbiAgICAjaGFzRGF0ZSA9IGZhbHNlO1xuICAgICNoYXNUaW1lID0gZmFsc2U7XG4gICAgI29mZnNldCA9IG51bGw7XG4gICAgY29uc3RydWN0b3IoZGF0ZSkge1xuICAgICAgICBsZXQgaGFzRGF0ZSA9IHRydWU7XG4gICAgICAgIGxldCBoYXNUaW1lID0gdHJ1ZTtcbiAgICAgICAgbGV0IG9mZnNldCA9ICdaJztcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgbGV0IG1hdGNoID0gZGF0ZS5tYXRjaChEQVRFX1RJTUVfUkUpO1xuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFtYXRjaFsxXSkge1xuICAgICAgICAgICAgICAgICAgICBoYXNEYXRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSBgMDAwMC0wMS0wMVQke2RhdGV9YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGFzVGltZSA9ICEhbWF0Y2hbMl07XG4gICAgICAgICAgICAgICAgLy8gRG8gbm90IGFsbG93IHJvbGxvdmVyIGhvdXJzXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoWzJdICYmICttYXRjaFsyXSA+IDIzKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IG1hdGNoWzNdIHx8IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSBkYXRlLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb2Zmc2V0ICYmIGhhc1RpbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlICs9ICdaJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRlID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoZGF0ZSk7XG4gICAgICAgIGlmICghaXNOYU4odGhpcy5nZXRUaW1lKCkpKSB7XG4gICAgICAgICAgICB0aGlzLiNoYXNEYXRlID0gaGFzRGF0ZTtcbiAgICAgICAgICAgIHRoaXMuI2hhc1RpbWUgPSBoYXNUaW1lO1xuICAgICAgICAgICAgdGhpcy4jb2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlzRGF0ZVRpbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNoYXNEYXRlICYmIHRoaXMuI2hhc1RpbWU7XG4gICAgfVxuICAgIGlzTG9jYWwoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy4jaGFzRGF0ZSB8fCAhdGhpcy4jaGFzVGltZSB8fCAhdGhpcy4jb2Zmc2V0O1xuICAgIH1cbiAgICBpc0RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNoYXNEYXRlICYmICF0aGlzLiNoYXNUaW1lO1xuICAgIH1cbiAgICBpc1RpbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNoYXNUaW1lICYmICF0aGlzLiNoYXNEYXRlO1xuICAgIH1cbiAgICBpc1ZhbGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jaGFzRGF0ZSB8fCB0aGlzLiNoYXNUaW1lO1xuICAgIH1cbiAgICB0b0lTT1N0cmluZygpIHtcbiAgICAgICAgbGV0IGlzbyA9IHN1cGVyLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIC8vIExvY2FsIERhdGVcbiAgICAgICAgaWYgKHRoaXMuaXNEYXRlKCkpXG4gICAgICAgICAgICByZXR1cm4gaXNvLnNsaWNlKDAsIDEwKTtcbiAgICAgICAgLy8gTG9jYWwgVGltZVxuICAgICAgICBpZiAodGhpcy5pc1RpbWUoKSlcbiAgICAgICAgICAgIHJldHVybiBpc28uc2xpY2UoMTEsIDIzKTtcbiAgICAgICAgLy8gTG9jYWwgRGF0ZVRpbWVcbiAgICAgICAgaWYgKHRoaXMuI29mZnNldCA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBpc28uc2xpY2UoMCwgLTEpO1xuICAgICAgICAvLyBPZmZzZXQgRGF0ZVRpbWVcbiAgICAgICAgaWYgKHRoaXMuI29mZnNldCA9PT0gJ1onKVxuICAgICAgICAgICAgcmV0dXJuIGlzbztcbiAgICAgICAgLy8gVGhpcyBwYXJ0IGlzIHF1aXRlIGFubm95aW5nOiBKUyBzdHJpcHMgdGhlIG9yaWdpbmFsIHRpbWV6b25lIGZyb20gdGhlIElTTyBzdHJpbmcgcmVwcmVzZW50YXRpb25cbiAgICAgICAgLy8gSW5zdGVhZCBvZiB1c2luZyBhIFwibW9kaWZpZWRcIiBkYXRlIGFuZCBcIlpcIiwgd2UgcmVzdG9yZSB0aGUgcmVwcmVzZW50YXRpb24gXCJhcyBhdXRob3JlZFwiXG4gICAgICAgIGxldCBvZmZzZXQgPSAoKyh0aGlzLiNvZmZzZXQuc2xpY2UoMSwgMykpICogNjApICsgKyh0aGlzLiNvZmZzZXQuc2xpY2UoNCwgNikpO1xuICAgICAgICBvZmZzZXQgPSB0aGlzLiNvZmZzZXRbMF0gPT09ICctJyA/IG9mZnNldCA6IC1vZmZzZXQ7XG4gICAgICAgIGxldCBvZmZzZXREYXRlID0gbmV3IERhdGUodGhpcy5nZXRUaW1lKCkgLSAob2Zmc2V0ICogNjBlMykpO1xuICAgICAgICByZXR1cm4gb2Zmc2V0RGF0ZS50b0lTT1N0cmluZygpLnNsaWNlKDAsIC0xKSArIHRoaXMuI29mZnNldDtcbiAgICB9XG4gICAgc3RhdGljIHdyYXBBc09mZnNldERhdGVUaW1lKGpzRGF0ZSwgb2Zmc2V0ID0gJ1onKSB7XG4gICAgICAgIGxldCBkYXRlID0gbmV3IFRvbWxEYXRlKGpzRGF0ZSk7XG4gICAgICAgIGRhdGUuI29mZnNldCA9IG9mZnNldDtcbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICAgIHN0YXRpYyB3cmFwQXNMb2NhbERhdGVUaW1lKGpzRGF0ZSkge1xuICAgICAgICBsZXQgZGF0ZSA9IG5ldyBUb21sRGF0ZShqc0RhdGUpO1xuICAgICAgICBkYXRlLiNvZmZzZXQgPSBudWxsO1xuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG4gICAgc3RhdGljIHdyYXBBc0xvY2FsRGF0ZShqc0RhdGUpIHtcbiAgICAgICAgbGV0IGRhdGUgPSBuZXcgVG9tbERhdGUoanNEYXRlKTtcbiAgICAgICAgZGF0ZS4jaGFzVGltZSA9IGZhbHNlO1xuICAgICAgICBkYXRlLiNvZmZzZXQgPSBudWxsO1xuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG4gICAgc3RhdGljIHdyYXBBc0xvY2FsVGltZShqc0RhdGUpIHtcbiAgICAgICAgbGV0IGRhdGUgPSBuZXcgVG9tbERhdGUoanNEYXRlKTtcbiAgICAgICAgZGF0ZS4jaGFzRGF0ZSA9IGZhbHNlO1xuICAgICAgICBkYXRlLiNvZmZzZXQgPSBudWxsO1xuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG59XG4iLCAiLyohXG4gKiBDb3B5cmlnaHQgKGMpIFNxdWlycmVsIENoYXQgZXQgYWwuLCBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKlxuICogMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4gKiAgICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqICAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gKiAgICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICogMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgY29weXJpZ2h0IGhvbGRlciBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiAqICAgIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0XG4gKiAgICBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EXG4gKiBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRFxuICogV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICogRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRVxuICogRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUxcbiAqIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SXG4gKiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUlxuICogQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSxcbiAqIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFXG4gKiBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5pbXBvcnQgeyBza2lwVm9pZCB9IGZyb20gJy4vdXRpbC5qcyc7XG5pbXBvcnQgeyBUb21sRGF0ZSB9IGZyb20gJy4vZGF0ZS5qcyc7XG5pbXBvcnQgeyBUb21sRXJyb3IgfSBmcm9tICcuL2Vycm9yLmpzJztcbmxldCBJTlRfUkVHRVggPSAvXigoMHhbMC05YS1mQS1GXShfP1swLTlhLWZBLUZdKSopfCgoWystXXwwW29iXSk/XFxkKF8/XFxkKSopKSQvO1xubGV0IEZMT0FUX1JFR0VYID0gL15bKy1dP1xcZChfP1xcZCkqKFxcLlxcZChfP1xcZCkqKT8oW2VFXVsrLV0/XFxkKF8/XFxkKSopPyQvO1xubGV0IExFQURJTkdfWkVSTyA9IC9eWystXT8wWzAtOV9dLztcbmxldCBFU0NBUEVfUkVHRVggPSAvXlswLTlhLWZdezQsOH0kL2k7XG5sZXQgRVNDX01BUCA9IHtcbiAgICBiOiAnXFxiJyxcbiAgICB0OiAnXFx0JyxcbiAgICBuOiAnXFxuJyxcbiAgICBmOiAnXFxmJyxcbiAgICByOiAnXFxyJyxcbiAgICAnXCInOiAnXCInLFxuICAgICdcXFxcJzogJ1xcXFwnLFxufTtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN0cmluZyhzdHIsIHB0ciA9IDAsIGVuZFB0ciA9IHN0ci5sZW5ndGgpIHtcbiAgICBsZXQgaXNMaXRlcmFsID0gc3RyW3B0cl0gPT09IFwiJ1wiO1xuICAgIGxldCBpc011bHRpbGluZSA9IHN0cltwdHIrK10gPT09IHN0cltwdHJdICYmIHN0cltwdHJdID09PSBzdHJbcHRyICsgMV07XG4gICAgaWYgKGlzTXVsdGlsaW5lKSB7XG4gICAgICAgIGVuZFB0ciAtPSAyO1xuICAgICAgICBpZiAoc3RyW3B0ciArPSAyXSA9PT0gJ1xccicpXG4gICAgICAgICAgICBwdHIrKztcbiAgICAgICAgaWYgKHN0cltwdHJdID09PSAnXFxuJylcbiAgICAgICAgICAgIHB0cisrO1xuICAgIH1cbiAgICBsZXQgdG1wID0gMDtcbiAgICBsZXQgaXNFc2NhcGU7XG4gICAgbGV0IHBhcnNlZCA9ICcnO1xuICAgIGxldCBzbGljZVN0YXJ0ID0gcHRyO1xuICAgIHdoaWxlIChwdHIgPCBlbmRQdHIgLSAxKSB7XG4gICAgICAgIGxldCBjID0gc3RyW3B0cisrXTtcbiAgICAgICAgaWYgKGMgPT09ICdcXG4nIHx8IChjID09PSAnXFxyJyAmJiBzdHJbcHRyXSA9PT0gJ1xcbicpKSB7XG4gICAgICAgICAgICBpZiAoIWlzTXVsdGlsaW5lKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcignbmV3bGluZXMgYXJlIG5vdCBhbGxvd2VkIGluIHN0cmluZ3MnLCB7XG4gICAgICAgICAgICAgICAgICAgIHRvbWw6IHN0cixcbiAgICAgICAgICAgICAgICAgICAgcHRyOiBwdHIgLSAxXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKGMgPCAnXFx4MjAnICYmIGMgIT09ICdcXHQnKSB8fCBjID09PSAnXFx4N2YnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVG9tbEVycm9yKCdjb250cm9sIGNoYXJhY3RlcnMgYXJlIG5vdCBhbGxvd2VkIGluIHN0cmluZ3MnLCB7XG4gICAgICAgICAgICAgICAgdG9tbDogc3RyLFxuICAgICAgICAgICAgICAgIHB0cjogcHRyIC0gMVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRXNjYXBlKSB7XG4gICAgICAgICAgICBpc0VzY2FwZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGMgPT09ICd1JyB8fCBjID09PSAnVScpIHtcbiAgICAgICAgICAgICAgICAvLyBVbmljb2RlIGVzY2FwZVxuICAgICAgICAgICAgICAgIGxldCBjb2RlID0gc3RyLnNsaWNlKHB0ciwgKHB0ciArPSAoYyA9PT0gJ3UnID8gNCA6IDgpKSk7XG4gICAgICAgICAgICAgICAgaWYgKCFFU0NBUEVfUkVHRVgudGVzdChjb2RlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVG9tbEVycm9yKCdpbnZhbGlkIHVuaWNvZGUgZXNjYXBlJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9tbDogc3RyLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHRyOiB0bXBcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZCArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChwYXJzZUludChjb2RlLCAxNikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ2ludmFsaWQgdW5pY29kZSBlc2NhcGUnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b21sOiBzdHIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwdHI6IHRtcFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc011bHRpbGluZSAmJiAoYyA9PT0gJ1xcbicgfHwgYyA9PT0gJyAnIHx8IGMgPT09ICdcXHQnIHx8IGMgPT09ICdcXHInKSkge1xuICAgICAgICAgICAgICAgIC8vIE11bHRpbGluZSBlc2NhcGVcbiAgICAgICAgICAgICAgICBwdHIgPSBza2lwVm9pZChzdHIsIHB0ciAtIDEsIHRydWUpO1xuICAgICAgICAgICAgICAgIGlmIChzdHJbcHRyXSAhPT0gJ1xcbicgJiYgc3RyW3B0cl0gIT09ICdcXHInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ2ludmFsaWQgZXNjYXBlOiBvbmx5IGxpbmUtZW5kaW5nIHdoaXRlc3BhY2UgbWF5IGJlIGVzY2FwZWQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b21sOiBzdHIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwdHI6IHRtcFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHRyID0gc2tpcFZvaWQoc3RyLCBwdHIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYyBpbiBFU0NfTUFQKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2xhc3NpYyBlc2NhcGVcbiAgICAgICAgICAgICAgICBwYXJzZWQgKz0gRVNDX01BUFtjXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ3VucmVjb2duaXplZCBlc2NhcGUgc2VxdWVuY2UnLCB7XG4gICAgICAgICAgICAgICAgICAgIHRvbWw6IHN0cixcbiAgICAgICAgICAgICAgICAgICAgcHRyOiB0bXBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNsaWNlU3RhcnQgPSBwdHI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWlzTGl0ZXJhbCAmJiBjID09PSAnXFxcXCcpIHtcbiAgICAgICAgICAgIHRtcCA9IHB0ciAtIDE7XG4gICAgICAgICAgICBpc0VzY2FwZSA9IHRydWU7XG4gICAgICAgICAgICBwYXJzZWQgKz0gc3RyLnNsaWNlKHNsaWNlU3RhcnQsIHRtcCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZCArIHN0ci5zbGljZShzbGljZVN0YXJ0LCBlbmRQdHIgLSAxKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVZhbHVlKHZhbHVlLCB0b21sLCBwdHIpIHtcbiAgICAvLyBDb25zdGFudCB2YWx1ZXNcbiAgICBpZiAodmFsdWUgPT09ICd0cnVlJylcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKHZhbHVlID09PSAnZmFsc2UnKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHZhbHVlID09PSAnLWluZicpXG4gICAgICAgIHJldHVybiAtSW5maW5pdHk7XG4gICAgaWYgKHZhbHVlID09PSAnaW5mJyB8fCB2YWx1ZSA9PT0gJytpbmYnKVxuICAgICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgaWYgKHZhbHVlID09PSAnbmFuJyB8fCB2YWx1ZSA9PT0gJytuYW4nIHx8IHZhbHVlID09PSAnLW5hbicpXG4gICAgICAgIHJldHVybiBOYU47XG4gICAgaWYgKHZhbHVlID09PSAnLTAnKVxuICAgICAgICByZXR1cm4gMDsgLy8gQXZvaWQgRlAgcmVwcmVzZW50YXRpb24gb2YgLTBcbiAgICAvLyBOdW1iZXJzXG4gICAgbGV0IGlzSW50O1xuICAgIGlmICgoaXNJbnQgPSBJTlRfUkVHRVgudGVzdCh2YWx1ZSkpIHx8IEZMT0FUX1JFR0VYLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIGlmIChMRUFESU5HX1pFUk8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ2xlYWRpbmcgemVyb2VzIGFyZSBub3QgYWxsb3dlZCcsIHtcbiAgICAgICAgICAgICAgICB0b21sOiB0b21sLFxuICAgICAgICAgICAgICAgIHB0cjogcHRyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbnVtZXJpYyA9ICsodmFsdWUucmVwbGFjZSgvXy9nLCAnJykpO1xuICAgICAgICBpZiAoaXNOYU4obnVtZXJpYykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ2ludmFsaWQgbnVtYmVyJywge1xuICAgICAgICAgICAgICAgIHRvbWw6IHRvbWwsXG4gICAgICAgICAgICAgICAgcHRyOiBwdHJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0ludCAmJiAhTnVtYmVyLmlzU2FmZUludGVnZXIobnVtZXJpYykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ2ludGVnZXIgdmFsdWUgY2Fubm90IGJlIHJlcHJlc2VudGVkIGxvc3NsZXNzbHknLCB7XG4gICAgICAgICAgICAgICAgdG9tbDogdG9tbCxcbiAgICAgICAgICAgICAgICBwdHI6IHB0clxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bWVyaWM7XG4gICAgfVxuICAgIGxldCBkYXRlID0gbmV3IFRvbWxEYXRlKHZhbHVlKTtcbiAgICBpZiAoIWRhdGUuaXNWYWxpZCgpKSB7XG4gICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ2ludmFsaWQgdmFsdWUnLCB7XG4gICAgICAgICAgICB0b21sOiB0b21sLFxuICAgICAgICAgICAgcHRyOiBwdHJcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRlO1xufVxuIiwgIi8qIVxuICogQ29weXJpZ2h0IChjKSBTcXVpcnJlbCBDaGF0IGV0IGFsLiwgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICpcbiAqIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuICogICAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICogICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIGNvcHlyaWdodCBob2xkZXIgbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4gKiAgICBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dFxuICogICAgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORFxuICogQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEVcbiAqIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMXG4gKiBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUlxuICogU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVJcbiAqIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksXG4gKiBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRVxuICogT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuaW1wb3J0IHsgcGFyc2VTdHJpbmcsIHBhcnNlVmFsdWUgfSBmcm9tICcuL3ByaW1pdGl2ZS5qcyc7XG5pbXBvcnQgeyBwYXJzZUFycmF5LCBwYXJzZUlubGluZVRhYmxlIH0gZnJvbSAnLi9zdHJ1Y3QuanMnO1xuaW1wb3J0IHsgaW5kZXhPZk5ld2xpbmUsIHNraXBWb2lkLCBza2lwVW50aWwsIHNraXBDb21tZW50LCBnZXRTdHJpbmdFbmQgfSBmcm9tICcuL3V0aWwuanMnO1xuaW1wb3J0IHsgVG9tbEVycm9yIH0gZnJvbSAnLi9lcnJvci5qcyc7XG5mdW5jdGlvbiBzbGljZUFuZFRyaW1FbmRPZihzdHIsIHN0YXJ0UHRyLCBlbmRQdHIsIGFsbG93TmV3TGluZXMpIHtcbiAgICBsZXQgdmFsdWUgPSBzdHIuc2xpY2Uoc3RhcnRQdHIsIGVuZFB0cik7XG4gICAgbGV0IGNvbW1lbnRJZHggPSB2YWx1ZS5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGNvbW1lbnRJZHggPiAtMSkge1xuICAgICAgICAvLyBUaGUgY2FsbCB0byBza2lwQ29tbWVudCBhbGxvd3MgdG8gXCJ2YWxpZGF0ZVwiIHRoZSBjb21tZW50XG4gICAgICAgIC8vIChhYnNlbmNlIG9mIGNvbnRyb2wgY2hhcmFjdGVycylcbiAgICAgICAgc2tpcENvbW1lbnQoc3RyLCBjb21tZW50SWR4KTtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBjb21tZW50SWR4KTtcbiAgICB9XG4gICAgbGV0IHRyaW1tZWQgPSB2YWx1ZS50cmltRW5kKCk7XG4gICAgaWYgKCFhbGxvd05ld0xpbmVzKSB7XG4gICAgICAgIGxldCBuZXdsaW5lSWR4ID0gdmFsdWUuaW5kZXhPZignXFxuJywgdHJpbW1lZC5sZW5ndGgpO1xuICAgICAgICBpZiAobmV3bGluZUlkeCA+IC0xKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVG9tbEVycm9yKCduZXdsaW5lcyBhcmUgbm90IGFsbG93ZWQgaW4gaW5saW5lIHRhYmxlcycsIHtcbiAgICAgICAgICAgICAgICB0b21sOiBzdHIsXG4gICAgICAgICAgICAgICAgcHRyOiBzdGFydFB0ciArIG5ld2xpbmVJZHhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbdHJpbW1lZCwgY29tbWVudElkeF07XG59XG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFZhbHVlKHN0ciwgcHRyLCBlbmQpIHtcbiAgICBsZXQgYyA9IHN0cltwdHJdO1xuICAgIGlmIChjID09PSAnWycgfHwgYyA9PT0gJ3snKSB7XG4gICAgICAgIGxldCBbdmFsdWUsIGVuZFB0cl0gPSBjID09PSAnWydcbiAgICAgICAgICAgID8gcGFyc2VBcnJheShzdHIsIHB0cilcbiAgICAgICAgICAgIDogcGFyc2VJbmxpbmVUYWJsZShzdHIsIHB0cik7XG4gICAgICAgIGxldCBuZXdQdHIgPSBza2lwVW50aWwoc3RyLCBlbmRQdHIsICcsJywgZW5kKTtcbiAgICAgICAgaWYgKGVuZCA9PT0gJ30nKSB7XG4gICAgICAgICAgICBsZXQgbmV4dE5ld0xpbmUgPSBpbmRleE9mTmV3bGluZShzdHIsIGVuZFB0ciwgbmV3UHRyKTtcbiAgICAgICAgICAgIGlmIChuZXh0TmV3TGluZSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcignbmV3bGluZXMgYXJlIG5vdCBhbGxvd2VkIGluIGlubGluZSB0YWJsZXMnLCB7XG4gICAgICAgICAgICAgICAgICAgIHRvbWw6IHN0cixcbiAgICAgICAgICAgICAgICAgICAgcHRyOiBuZXh0TmV3TGluZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdmFsdWUsIG5ld1B0cl07XG4gICAgfVxuICAgIGxldCBlbmRQdHI7XG4gICAgaWYgKGMgPT09ICdcIicgfHwgYyA9PT0gXCInXCIpIHtcbiAgICAgICAgZW5kUHRyID0gZ2V0U3RyaW5nRW5kKHN0ciwgcHRyKTtcbiAgICAgICAgbGV0IHBhcnNlZCA9IHBhcnNlU3RyaW5nKHN0ciwgcHRyLCBlbmRQdHIpO1xuICAgICAgICBpZiAoZW5kKSB7XG4gICAgICAgICAgICBlbmRQdHIgPSBza2lwVm9pZChzdHIsIGVuZFB0ciwgZW5kICE9PSAnXScpO1xuICAgICAgICAgICAgaWYgKHN0cltlbmRQdHJdICYmIHN0cltlbmRQdHJdICE9PSAnLCcgJiYgc3RyW2VuZFB0cl0gIT09IGVuZCAmJiBzdHJbZW5kUHRyXSAhPT0gJ1xcbicgJiYgc3RyW2VuZFB0cl0gIT09ICdcXHInKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcigndW5leHBlY3RlZCBjaGFyYWN0ZXIgZW5jb3VudGVyZWQnLCB7XG4gICAgICAgICAgICAgICAgICAgIHRvbWw6IHN0cixcbiAgICAgICAgICAgICAgICAgICAgcHRyOiBlbmRQdHIsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbmRQdHIgKz0gKCsoc3RyW2VuZFB0cl0gPT09ICcsJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbcGFyc2VkLCBlbmRQdHJdO1xuICAgIH1cbiAgICBlbmRQdHIgPSBza2lwVW50aWwoc3RyLCBwdHIsICcsJywgZW5kKTtcbiAgICBsZXQgc2xpY2UgPSBzbGljZUFuZFRyaW1FbmRPZihzdHIsIHB0ciwgZW5kUHRyIC0gKCsoc3RyW2VuZFB0ciAtIDFdID09PSAnLCcpKSwgZW5kID09PSAnXScpO1xuICAgIGlmICghc2xpY2VbMF0pIHtcbiAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcignaW5jb21wbGV0ZSBrZXktdmFsdWUgZGVjbGFyYXRpb246IG5vIHZhbHVlIHNwZWNpZmllZCcsIHtcbiAgICAgICAgICAgIHRvbWw6IHN0cixcbiAgICAgICAgICAgIHB0cjogcHRyXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoZW5kICYmIHNsaWNlWzFdID4gLTEpIHtcbiAgICAgICAgZW5kUHRyID0gc2tpcFZvaWQoc3RyLCBwdHIgKyBzbGljZVsxXSk7XG4gICAgICAgIGVuZFB0ciArPSArKHN0cltlbmRQdHJdID09PSAnLCcpO1xuICAgIH1cbiAgICByZXR1cm4gW1xuICAgICAgICBwYXJzZVZhbHVlKHNsaWNlWzBdLCBzdHIsIHB0ciksXG4gICAgICAgIGVuZFB0cixcbiAgICBdO1xufVxuIiwgIi8qIVxuICogQ29weXJpZ2h0IChjKSBTcXVpcnJlbCBDaGF0IGV0IGFsLiwgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICpcbiAqIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuICogICAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICogICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIGNvcHlyaWdodCBob2xkZXIgbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4gKiAgICBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dFxuICogICAgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORFxuICogQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEVcbiAqIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMXG4gKiBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUlxuICogU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVJcbiAqIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksXG4gKiBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRVxuICogT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuaW1wb3J0IHsgcGFyc2VTdHJpbmcgfSBmcm9tICcuL3ByaW1pdGl2ZS5qcyc7XG5pbXBvcnQgeyBleHRyYWN0VmFsdWUgfSBmcm9tICcuL2V4dHJhY3QuanMnO1xuaW1wb3J0IHsgc2tpcENvbW1lbnQsIGluZGV4T2ZOZXdsaW5lLCBnZXRTdHJpbmdFbmQsIHNraXBWb2lkIH0gZnJvbSAnLi91dGlsLmpzJztcbmltcG9ydCB7IFRvbWxFcnJvciB9IGZyb20gJy4vZXJyb3IuanMnO1xubGV0IEtFWV9QQVJUX1JFID0gL15bYS16QS1aMC05LV9dK1sgXFx0XSokLztcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUtleShzdHIsIHB0ciwgZW5kID0gJz0nKSB7XG4gICAgbGV0IGRvdCA9IHB0ciAtIDE7XG4gICAgbGV0IHBhcnNlZCA9IFtdO1xuICAgIGxldCBlbmRQdHIgPSBzdHIuaW5kZXhPZihlbmQsIHB0cik7XG4gICAgaWYgKGVuZFB0ciA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcignaW5jb21wbGV0ZSBrZXktdmFsdWU6IGNhbm5vdCBmaW5kIGVuZCBvZiBrZXknLCB7XG4gICAgICAgICAgICB0b21sOiBzdHIsXG4gICAgICAgICAgICBwdHI6IHB0clxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZG8ge1xuICAgICAgICBsZXQgYyA9IHN0cltwdHIgPSArK2RvdF07XG4gICAgICAgIC8vIElmIGl0J3Mgd2hpdGVzcGFjZSwgaWdub3JlXG4gICAgICAgIGlmIChjICE9PSAnICcgJiYgYyAhPT0gJ1xcdCcpIHtcbiAgICAgICAgICAgIC8vIElmIGl0J3MgYSBzdHJpbmdcbiAgICAgICAgICAgIGlmIChjID09PSAnXCInIHx8IGMgPT09IFwiJ1wiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGMgPT09IHN0cltwdHIgKyAxXSAmJiBjID09PSBzdHJbcHRyICsgMl0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcignbXVsdGlsaW5lIHN0cmluZ3MgYXJlIG5vdCBhbGxvd2VkIGluIGtleXMnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b21sOiBzdHIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwdHI6IHB0cixcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBlb3MgPSBnZXRTdHJpbmdFbmQoc3RyLCBwdHIpO1xuICAgICAgICAgICAgICAgIGlmIChlb3MgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ3VuZmluaXNoZWQgc3RyaW5nIGVuY291bnRlcmVkJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9tbDogc3RyLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHRyOiBwdHIsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkb3QgPSBzdHIuaW5kZXhPZignLicsIGVvcyk7XG4gICAgICAgICAgICAgICAgbGV0IHN0ckVuZCA9IHN0ci5zbGljZShlb3MsIGRvdCA8IDAgfHwgZG90ID4gZW5kUHRyID8gZW5kUHRyIDogZG90KTtcbiAgICAgICAgICAgICAgICBsZXQgbmV3TGluZSA9IGluZGV4T2ZOZXdsaW5lKHN0ckVuZCk7XG4gICAgICAgICAgICAgICAgaWYgKG5ld0xpbmUgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVG9tbEVycm9yKCduZXdsaW5lcyBhcmUgbm90IGFsbG93ZWQgaW4ga2V5cycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvbWw6IHN0cixcbiAgICAgICAgICAgICAgICAgICAgICAgIHB0cjogcHRyICsgZG90ICsgbmV3TGluZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzdHJFbmQudHJpbVN0YXJ0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcignZm91bmQgZXh0cmEgdG9rZW5zIGFmdGVyIHRoZSBzdHJpbmcgcGFydCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvbWw6IHN0cixcbiAgICAgICAgICAgICAgICAgICAgICAgIHB0cjogZW9zLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVuZFB0ciA8IGVvcykge1xuICAgICAgICAgICAgICAgICAgICBlbmRQdHIgPSBzdHIuaW5kZXhPZihlbmQsIGVvcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmRQdHIgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVG9tbEVycm9yKCdpbmNvbXBsZXRlIGtleS12YWx1ZTogY2Fubm90IGZpbmQgZW5kIG9mIGtleScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b21sOiBzdHIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHRyOiBwdHIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXJzZWQucHVzaChwYXJzZVN0cmluZyhzdHIsIHB0ciwgZW9zKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBOb3JtYWwgcmF3IGtleSBwYXJ0IGNvbnN1bXB0aW9uIGFuZCB2YWxpZGF0aW9uXG4gICAgICAgICAgICAgICAgZG90ID0gc3RyLmluZGV4T2YoJy4nLCBwdHIpO1xuICAgICAgICAgICAgICAgIGxldCBwYXJ0ID0gc3RyLnNsaWNlKHB0ciwgZG90IDwgMCB8fCBkb3QgPiBlbmRQdHIgPyBlbmRQdHIgOiBkb3QpO1xuICAgICAgICAgICAgICAgIGlmICghS0VZX1BBUlRfUkUudGVzdChwYXJ0KSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVG9tbEVycm9yKCdvbmx5IGxldHRlciwgbnVtYmVycywgZGFzaGVzIGFuZCB1bmRlcnNjb3JlcyBhcmUgYWxsb3dlZCBpbiBrZXlzJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9tbDogc3RyLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHRyOiBwdHIsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXJzZWQucHVzaChwYXJ0LnRyaW1FbmQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gVW50aWwgdGhlcmUncyBubyBtb3JlIGRvdFxuICAgIH0gd2hpbGUgKGRvdCArIDEgJiYgZG90IDwgZW5kUHRyKTtcbiAgICByZXR1cm4gW3BhcnNlZCwgc2tpcFZvaWQoc3RyLCBlbmRQdHIgKyAxLCB0cnVlLCB0cnVlKV07XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VJbmxpbmVUYWJsZShzdHIsIHB0cikge1xuICAgIGxldCByZXMgPSB7fTtcbiAgICBsZXQgc2VlbiA9IG5ldyBTZXQoKTtcbiAgICBsZXQgYztcbiAgICBsZXQgY29tbWEgPSAwO1xuICAgIHB0cisrO1xuICAgIHdoaWxlICgoYyA9IHN0cltwdHIrK10pICE9PSAnfScgJiYgYykge1xuICAgICAgICBpZiAoYyA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ25ld2xpbmVzIGFyZSBub3QgYWxsb3dlZCBpbiBpbmxpbmUgdGFibGVzJywge1xuICAgICAgICAgICAgICAgIHRvbWw6IHN0cixcbiAgICAgICAgICAgICAgICBwdHI6IHB0ciAtIDFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPT09ICcjJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcignaW5saW5lIHRhYmxlcyBjYW5ub3QgY29udGFpbiBjb21tZW50cycsIHtcbiAgICAgICAgICAgICAgICB0b21sOiBzdHIsXG4gICAgICAgICAgICAgICAgcHRyOiBwdHIgLSAxXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSAnLCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ2V4cGVjdGVkIGtleS12YWx1ZSwgZm91bmQgY29tbWEnLCB7XG4gICAgICAgICAgICAgICAgdG9tbDogc3RyLFxuICAgICAgICAgICAgICAgIHB0cjogcHRyIC0gMVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyAhPT0gJyAnICYmIGMgIT09ICdcXHQnKSB7XG4gICAgICAgICAgICBsZXQgaztcbiAgICAgICAgICAgIGxldCB0ID0gcmVzO1xuICAgICAgICAgICAgbGV0IGhhc093biA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IFtrZXksIGtleUVuZFB0cl0gPSBwYXJzZUtleShzdHIsIHB0ciAtIDEpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSlcbiAgICAgICAgICAgICAgICAgICAgdCA9IGhhc093biA/IHRba10gOiAodFtrXSA9IHt9KTtcbiAgICAgICAgICAgICAgICBrID0ga2V5W2ldO1xuICAgICAgICAgICAgICAgIGlmICgoaGFzT3duID0gT2JqZWN0Lmhhc093bih0LCBrKSkgJiYgKHR5cGVvZiB0W2tdICE9PSAnb2JqZWN0JyB8fCBzZWVuLmhhcyh0W2tdKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcigndHJ5aW5nIHRvIHJlZGVmaW5lIGFuIGFscmVhZHkgZGVmaW5lZCB2YWx1ZScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvbWw6IHN0cixcbiAgICAgICAgICAgICAgICAgICAgICAgIHB0cjogcHRyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWhhc093biAmJiBrID09PSAnX19wcm90b19fJykge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgaywgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYXNPd24pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVG9tbEVycm9yKCd0cnlpbmcgdG8gcmVkZWZpbmUgYW4gYWxyZWFkeSBkZWZpbmVkIHZhbHVlJywge1xuICAgICAgICAgICAgICAgICAgICB0b21sOiBzdHIsXG4gICAgICAgICAgICAgICAgICAgIHB0cjogcHRyXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgW3ZhbHVlLCB2YWx1ZUVuZFB0cl0gPSBleHRyYWN0VmFsdWUoc3RyLCBrZXlFbmRQdHIsICd9Jyk7XG4gICAgICAgICAgICBzZWVuLmFkZCh2YWx1ZSk7XG4gICAgICAgICAgICB0W2tdID0gdmFsdWU7XG4gICAgICAgICAgICBwdHIgPSB2YWx1ZUVuZFB0cjtcbiAgICAgICAgICAgIGNvbW1hID0gc3RyW3B0ciAtIDFdID09PSAnLCcgPyBwdHIgLSAxIDogMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoY29tbWEpIHtcbiAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcigndHJhaWxpbmcgY29tbWFzIGFyZSBub3QgYWxsb3dlZCBpbiBpbmxpbmUgdGFibGVzJywge1xuICAgICAgICAgICAgdG9tbDogc3RyLFxuICAgICAgICAgICAgcHRyOiBjb21tYVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKCFjKSB7XG4gICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ3VuZmluaXNoZWQgdGFibGUgZW5jb3VudGVyZWQnLCB7XG4gICAgICAgICAgICB0b21sOiBzdHIsXG4gICAgICAgICAgICBwdHI6IHB0clxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIFtyZXMsIHB0cl07XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VBcnJheShzdHIsIHB0cikge1xuICAgIGxldCByZXMgPSBbXTtcbiAgICBsZXQgYztcbiAgICBwdHIrKztcbiAgICB3aGlsZSAoKGMgPSBzdHJbcHRyKytdKSAhPT0gJ10nICYmIGMpIHtcbiAgICAgICAgaWYgKGMgPT09ICcsJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcignZXhwZWN0ZWQgdmFsdWUsIGZvdW5kIGNvbW1hJywge1xuICAgICAgICAgICAgICAgIHRvbWw6IHN0cixcbiAgICAgICAgICAgICAgICBwdHI6IHB0ciAtIDFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPT09ICcjJylcbiAgICAgICAgICAgIHB0ciA9IHNraXBDb21tZW50KHN0ciwgcHRyKTtcbiAgICAgICAgZWxzZSBpZiAoYyAhPT0gJyAnICYmIGMgIT09ICdcXHQnICYmIGMgIT09ICdcXG4nICYmIGMgIT09ICdcXHInKSB7XG4gICAgICAgICAgICBsZXQgZSA9IGV4dHJhY3RWYWx1ZShzdHIsIHB0ciAtIDEsICddJyk7XG4gICAgICAgICAgICByZXMucHVzaChlWzBdKTtcbiAgICAgICAgICAgIHB0ciA9IGVbMV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFjKSB7XG4gICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ3VuZmluaXNoZWQgYXJyYXkgZW5jb3VudGVyZWQnLCB7XG4gICAgICAgICAgICB0b21sOiBzdHIsXG4gICAgICAgICAgICBwdHI6IHB0clxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIFtyZXMsIHB0cl07XG59XG4iLCAiLyohXG4gKiBDb3B5cmlnaHQgKGMpIFNxdWlycmVsIENoYXQgZXQgYWwuLCBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKlxuICogMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4gKiAgICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqICAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gKiAgICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICogMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgY29weXJpZ2h0IGhvbGRlciBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiAqICAgIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0XG4gKiAgICBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EXG4gKiBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRFxuICogV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICogRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRVxuICogRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUxcbiAqIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SXG4gKiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUlxuICogQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSxcbiAqIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFXG4gKiBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5pbXBvcnQgeyBwYXJzZUtleSB9IGZyb20gJy4vc3RydWN0LmpzJztcbmltcG9ydCB7IGV4dHJhY3RWYWx1ZSB9IGZyb20gJy4vZXh0cmFjdC5qcyc7XG5pbXBvcnQgeyBza2lwVm9pZCB9IGZyb20gJy4vdXRpbC5qcyc7XG5pbXBvcnQgeyBUb21sRXJyb3IgfSBmcm9tICcuL2Vycm9yLmpzJztcbmZ1bmN0aW9uIHBlZWtUYWJsZShrZXksIHRhYmxlLCBtZXRhLCB0eXBlKSB7XG4gICAgbGV0IHQgPSB0YWJsZTtcbiAgICBsZXQgbSA9IG1ldGE7XG4gICAgbGV0IGs7XG4gICAgbGV0IGhhc093biA9IGZhbHNlO1xuICAgIGxldCBzdGF0ZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaSkge1xuICAgICAgICAgICAgdCA9IGhhc093biA/IHRba10gOiAodFtrXSA9IHt9KTtcbiAgICAgICAgICAgIG0gPSAoc3RhdGUgPSBtW2tdKS5jO1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09IDAgLyogVHlwZS5ET1RURUQgKi8gJiYgKHN0YXRlLnQgPT09IDEgLyogVHlwZS5FWFBMSUNJVCAqLyB8fCBzdGF0ZS50ID09PSAyIC8qIFR5cGUuQVJSQVkgKi8pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdGUudCA9PT0gMiAvKiBUeXBlLkFSUkFZICovKSB7XG4gICAgICAgICAgICAgICAgbGV0IGwgPSB0Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgdCA9IHRbbF07XG4gICAgICAgICAgICAgICAgbSA9IG1bbF0uYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBrID0ga2V5W2ldO1xuICAgICAgICBpZiAoKGhhc093biA9IE9iamVjdC5oYXNPd24odCwgaykpICYmIG1ba10/LnQgPT09IDAgLyogVHlwZS5ET1RURUQgKi8gJiYgbVtrXT8uZCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFoYXNPd24pIHtcbiAgICAgICAgICAgIGlmIChrID09PSAnX19wcm90b19fJykge1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBrLCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG0sIGssIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1ba10gPSB7XG4gICAgICAgICAgICAgICAgdDogaSA8IGtleS5sZW5ndGggLSAxICYmIHR5cGUgPT09IDIgLyogVHlwZS5BUlJBWSAqL1xuICAgICAgICAgICAgICAgICAgICA/IDMgLyogVHlwZS5BUlJBWV9ET1RURUQgKi9cbiAgICAgICAgICAgICAgICAgICAgOiB0eXBlLFxuICAgICAgICAgICAgICAgIGQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGk6IDAsXG4gICAgICAgICAgICAgICAgYzoge30sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRlID0gbVtrXTtcbiAgICBpZiAoc3RhdGUudCAhPT0gdHlwZSAmJiAhKHR5cGUgPT09IDEgLyogVHlwZS5FWFBMSUNJVCAqLyAmJiBzdGF0ZS50ID09PSAzIC8qIFR5cGUuQVJSQVlfRE9UVEVEICovKSkge1xuICAgICAgICAvLyBCYWQga2V5IHR5cGUhXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gMiAvKiBUeXBlLkFSUkFZICovKSB7XG4gICAgICAgIGlmICghc3RhdGUuZCkge1xuICAgICAgICAgICAgc3RhdGUuZCA9IHRydWU7XG4gICAgICAgICAgICB0W2tdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgdFtrXS5wdXNoKHQgPSB7fSk7XG4gICAgICAgIHN0YXRlLmNbc3RhdGUuaSsrXSA9IChzdGF0ZSA9IHsgdDogMSAvKiBUeXBlLkVYUExJQ0lUICovLCBkOiBmYWxzZSwgaTogMCwgYzoge30gfSk7XG4gICAgfVxuICAgIGlmIChzdGF0ZS5kKSB7XG4gICAgICAgIC8vIFJlZGVmaW5pbmcgYSB0YWJsZSFcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHN0YXRlLmQgPSB0cnVlO1xuICAgIGlmICh0eXBlID09PSAxIC8qIFR5cGUuRVhQTElDSVQgKi8pIHtcbiAgICAgICAgdCA9IGhhc093biA/IHRba10gOiAodFtrXSA9IHt9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSA9PT0gMCAvKiBUeXBlLkRPVFRFRCAqLyAmJiBoYXNPd24pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBbaywgdCwgc3RhdGUuY107XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2UodG9tbCkge1xuICAgIGxldCByZXMgPSB7fTtcbiAgICBsZXQgbWV0YSA9IHt9O1xuICAgIGxldCB0YmwgPSByZXM7XG4gICAgbGV0IG0gPSBtZXRhO1xuICAgIGZvciAobGV0IHB0ciA9IHNraXBWb2lkKHRvbWwsIDApOyBwdHIgPCB0b21sLmxlbmd0aDspIHtcbiAgICAgICAgaWYgKHRvbWxbcHRyXSA9PT0gJ1snKSB7XG4gICAgICAgICAgICBsZXQgaXNUYWJsZUFycmF5ID0gdG9tbFsrK3B0cl0gPT09ICdbJztcbiAgICAgICAgICAgIGxldCBrID0gcGFyc2VLZXkodG9tbCwgcHRyICs9ICtpc1RhYmxlQXJyYXksICddJyk7XG4gICAgICAgICAgICBpZiAoaXNUYWJsZUFycmF5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRvbWxba1sxXSAtIDFdICE9PSAnXScpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcignZXhwZWN0ZWQgZW5kIG9mIHRhYmxlIGRlY2xhcmF0aW9uJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9tbDogdG9tbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHB0cjoga1sxXSAtIDEsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBrWzFdKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcCA9IHBlZWtUYWJsZShrWzBdLCByZXMsIG1ldGEsIGlzVGFibGVBcnJheSA/IDIgLyogVHlwZS5BUlJBWSAqLyA6IDEgLyogVHlwZS5FWFBMSUNJVCAqLyk7XG4gICAgICAgICAgICBpZiAoIXApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVG9tbEVycm9yKCd0cnlpbmcgdG8gcmVkZWZpbmUgYW4gYWxyZWFkeSBkZWZpbmVkIHRhYmxlIG9yIHZhbHVlJywge1xuICAgICAgICAgICAgICAgICAgICB0b21sOiB0b21sLFxuICAgICAgICAgICAgICAgICAgICBwdHI6IHB0cixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG0gPSBwWzJdO1xuICAgICAgICAgICAgdGJsID0gcFsxXTtcbiAgICAgICAgICAgIHB0ciA9IGtbMV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgayA9IHBhcnNlS2V5KHRvbWwsIHB0cik7XG4gICAgICAgICAgICBsZXQgcCA9IHBlZWtUYWJsZShrWzBdLCB0YmwsIG0sIDAgLyogVHlwZS5ET1RURUQgKi8pO1xuICAgICAgICAgICAgaWYgKCFwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcigndHJ5aW5nIHRvIHJlZGVmaW5lIGFuIGFscmVhZHkgZGVmaW5lZCB0YWJsZSBvciB2YWx1ZScsIHtcbiAgICAgICAgICAgICAgICAgICAgdG9tbDogdG9tbCxcbiAgICAgICAgICAgICAgICAgICAgcHRyOiBwdHIsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdiA9IGV4dHJhY3RWYWx1ZSh0b21sLCBrWzFdKTtcbiAgICAgICAgICAgIHBbMV1bcFswXV0gPSB2WzBdO1xuICAgICAgICAgICAgcHRyID0gdlsxXTtcbiAgICAgICAgfVxuICAgICAgICBwdHIgPSBza2lwVm9pZCh0b21sLCBwdHIsIHRydWUpO1xuICAgICAgICBpZiAodG9tbFtwdHJdICYmIHRvbWxbcHRyXSAhPT0gJ1xcbicgJiYgdG9tbFtwdHJdICE9PSAnXFxyJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcignZWFjaCBrZXktdmFsdWUgZGVjbGFyYXRpb24gbXVzdCBiZSBmb2xsb3dlZCBieSBhbiBlbmQtb2YtbGluZScsIHtcbiAgICAgICAgICAgICAgICB0b21sOiB0b21sLFxuICAgICAgICAgICAgICAgIHB0cjogcHRyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBwdHIgPSBza2lwVm9pZCh0b21sLCBwdHIpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuIiwgIi8qIVxuICogQ29weXJpZ2h0IChjKSBTcXVpcnJlbCBDaGF0IGV0IGFsLiwgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICpcbiAqIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuICogICAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICogICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIGNvcHlyaWdodCBob2xkZXIgbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4gKiAgICBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dFxuICogICAgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORFxuICogQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEVcbiAqIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMXG4gKiBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUlxuICogU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVJcbiAqIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksXG4gKiBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRVxuICogT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuY29uc3QgQkFSRV9LRVkgPSAvXlthLXowLTktX10rJC9pO1xuZnVuY3Rpb24gZXh0ZW5kZWRUeXBlT2Yob2JqKSB7XG4gICAgbGV0IHR5cGUgPSB0eXBlb2Ygb2JqO1xuICAgIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKVxuICAgICAgICAgICAgcmV0dXJuICdhcnJheSc7XG4gICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBEYXRlKVxuICAgICAgICAgICAgcmV0dXJuICdkYXRlJztcbiAgICB9XG4gICAgcmV0dXJuIHR5cGU7XG59XG5mdW5jdGlvbiBpc0FycmF5T2ZUYWJsZXMob2JqKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGV4dGVuZGVkVHlwZU9mKG9ialtpXSkgIT09ICdvYmplY3QnKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gb2JqLmxlbmd0aCAhPSAwO1xufVxuZnVuY3Rpb24gZm9ybWF0U3RyaW5nKHMpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocykucmVwbGFjZSgvXFx4N2YvZywgJ1xcXFx1MDA3ZicpO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5VmFsdWUodmFsLCB0eXBlID0gZXh0ZW5kZWRUeXBlT2YodmFsKSkge1xuICAgIGlmICh0eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAoaXNOYU4odmFsKSlcbiAgICAgICAgICAgIHJldHVybiAnbmFuJztcbiAgICAgICAgaWYgKHZhbCA9PT0gSW5maW5pdHkpXG4gICAgICAgICAgICByZXR1cm4gJ2luZic7XG4gICAgICAgIGlmICh2YWwgPT09IC1JbmZpbml0eSlcbiAgICAgICAgICAgIHJldHVybiAnLWluZic7XG4gICAgICAgIHJldHVybiB2YWwudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdiaWdpbnQnIHx8IHR5cGUgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gdmFsLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gZm9ybWF0U3RyaW5nKHZhbCk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAnZGF0ZScpIHtcbiAgICAgICAgaWYgKGlzTmFOKHZhbC5nZXRUaW1lKCkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjYW5ub3Qgc2VyaWFsaXplIGludmFsaWQgZGF0ZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWwudG9JU09TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdpZnlJbmxpbmVUYWJsZSh2YWwpO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ2FycmF5Jykge1xuICAgICAgICByZXR1cm4gc3RyaW5naWZ5QXJyYXkodmFsKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzdHJpbmdpZnlJbmxpbmVUYWJsZShvYmopIHtcbiAgICBsZXQga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgaWYgKGtleXMubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gJ3t9JztcbiAgICBsZXQgcmVzID0gJ3sgJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGsgPSBrZXlzW2ldO1xuICAgICAgICBpZiAoaSlcbiAgICAgICAgICAgIHJlcyArPSAnLCAnO1xuICAgICAgICByZXMgKz0gQkFSRV9LRVkudGVzdChrKSA/IGsgOiBmb3JtYXRTdHJpbmcoayk7XG4gICAgICAgIHJlcyArPSAnID0gJztcbiAgICAgICAgcmVzICs9IHN0cmluZ2lmeVZhbHVlKG9ialtrXSk7XG4gICAgfVxuICAgIHJldHVybiByZXMgKyAnIH0nO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5QXJyYXkoYXJyYXkpIHtcbiAgICBpZiAoYXJyYXkubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gJ1tdJztcbiAgICBsZXQgcmVzID0gJ1sgJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpKVxuICAgICAgICAgICAgcmVzICs9ICcsICc7XG4gICAgICAgIGlmIChhcnJheVtpXSA9PT0gbnVsbCB8fCBhcnJheVtpXSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcnJheXMgY2Fubm90IGNvbnRhaW4gbnVsbCBvciB1bmRlZmluZWQgdmFsdWVzJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzICs9IHN0cmluZ2lmeVZhbHVlKGFycmF5W2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcyArICcgXSc7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnlBcnJheVRhYmxlKGFycmF5LCBrZXkpIHtcbiAgICBsZXQgcmVzID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXMgKz0gYFtbJHtrZXl9XV1cXG5gO1xuICAgICAgICByZXMgKz0gc3RyaW5naWZ5VGFibGUoYXJyYXlbaV0sIGtleSk7XG4gICAgICAgIHJlcyArPSAnXFxuXFxuJztcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeVRhYmxlKG9iaiwgcHJlZml4ID0gJycpIHtcbiAgICBsZXQgcHJlYW1ibGUgPSAnJztcbiAgICBsZXQgdGFibGVzID0gJyc7XG4gICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgayA9IGtleXNbaV07XG4gICAgICAgIGlmIChvYmpba10gIT09IG51bGwgJiYgb2JqW2tdICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGxldCB0eXBlID0gZXh0ZW5kZWRUeXBlT2Yob2JqW2tdKTtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnc3ltYm9sJyB8fCB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgY2Fubm90IHNlcmlhbGl6ZSB2YWx1ZXMgb2YgdHlwZSAnJHt0eXBlfSdgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBrZXkgPSBCQVJFX0tFWS50ZXN0KGspID8gayA6IGZvcm1hdFN0cmluZyhrKTtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnYXJyYXknICYmIGlzQXJyYXlPZlRhYmxlcyhvYmpba10pKSB7XG4gICAgICAgICAgICAgICAgdGFibGVzICs9IHN0cmluZ2lmeUFycmF5VGFibGUob2JqW2tdLCBwcmVmaXggPyBgJHtwcmVmaXh9LiR7a2V5fWAgOiBrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBsZXQgdGJsS2V5ID0gcHJlZml4ID8gYCR7cHJlZml4fS4ke2tleX1gIDoga2V5O1xuICAgICAgICAgICAgICAgIHRhYmxlcyArPSBgWyR7dGJsS2V5fV1cXG5gO1xuICAgICAgICAgICAgICAgIHRhYmxlcyArPSBzdHJpbmdpZnlUYWJsZShvYmpba10sIHRibEtleSk7XG4gICAgICAgICAgICAgICAgdGFibGVzICs9ICdcXG5cXG4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJlYW1ibGUgKz0ga2V5O1xuICAgICAgICAgICAgICAgIHByZWFtYmxlICs9ICcgPSAnO1xuICAgICAgICAgICAgICAgIHByZWFtYmxlICs9IHN0cmluZ2lmeVZhbHVlKG9ialtrXSwgdHlwZSk7XG4gICAgICAgICAgICAgICAgcHJlYW1ibGUgKz0gJ1xcbic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGAke3ByZWFtYmxlfVxcbiR7dGFibGVzfWAudHJpbSgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeShvYmopIHtcbiAgICBpZiAoZXh0ZW5kZWRUeXBlT2Yob2JqKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc3RyaW5naWZ5IGNhbiBvbmx5IGJlIGNhbGxlZCB3aXRoIGFuIG9iamVjdCcpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaW5naWZ5VGFibGUob2JqKTtcbn1cbiIsICJpbXBvcnQgeyBleGlzdHNTeW5jLCByZWFkRmlsZVN5bmMsIHdyaXRlRmlsZVN5bmMgfSBmcm9tICdmcyc7XG5pbXBvcnQgeyBJU2NhZmZvbGRseUNvbmZpZywgUHJvamVjdEpzb24gfSBmcm9tICcuLic7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBBYnN0cmFjdFByb2plY3QgfSBmcm9tICcuJztcbmltcG9ydCB7IHBhcnNlLCBzdHJpbmdpZnkgfSBmcm9tICdzbW9sLXRvbWwnO1xuXG50eXBlIENhcmdvVG9tbCA9IHtcbiAgcGFja2FnZT86IHtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIHZlcnNpb24/OiBzdHJpbmc7XG4gICAgZWRpdGlvbj86IHN0cmluZztcbiAgICBtZXRhZGF0YT86IHtcbiAgICAgIHNjYWZmb2xkbHk/OiBQYXJ0aWFsPElTY2FmZm9sZGx5Q29uZmlnPjtcbiAgICB9O1xuICB9O1xuICBkZXBlbmRlbmNpZXM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB8IHsgdmVyc2lvbj86IHN0cmluZzsgZmVhdHVyZXM/OiBzdHJpbmdbXSB9IH07XG59O1xuXG5leHBvcnQgY2xhc3MgUnVzdFByb2plY3QgZXh0ZW5kcyBBYnN0cmFjdFByb2plY3Qge1xuICBhc3luYyBzZXRQcm9qZWN0KG5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLmNhcmdvVG9tbEZpbGUudGhlbigoY2FyZ29Ub21sRmlsZSkgPT4ge1xuICAgICAgaWYgKCFjYXJnb1RvbWxGaWxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY2FyZ29Ub21sID0gcGFyc2UocmVhZEZpbGVTeW5jKGNhcmdvVG9tbEZpbGUsICd1dGYtOCcpKSBhcyBQYXJ0aWFsPENhcmdvVG9tbD47XG5cbiAgICAgIGlmICghY2FyZ29Ub21sLnBhY2thZ2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FyZ29Ub21sLnBhY2thZ2UpIHtcbiAgICAgICAgY2FyZ29Ub21sLnBhY2thZ2UubmFtZSA9IG5hbWU7XG4gICAgICB9XG5cbiAgICAgIHdyaXRlRmlsZVN5bmMoY2FyZ29Ub21sRmlsZSwgc3RyaW5naWZ5KGNhcmdvVG9tbCkpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXQgY2FyZ29Ub21sRmlsZSgpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiB0aGlzLndvcmtkaXJcbiAgICAgIC50aGVuKCh3b3JrRGlyKSA9PiBqb2luKHdvcmtEaXIsICdDYXJnby50b21sJykpXG4gICAgICAudGhlbigoY2FyZ29Ub21sRmlsZSkgPT4ge1xuICAgICAgICBpZiAoIWV4aXN0c1N5bmMoY2FyZ29Ub21sRmlsZSkpIHtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYXJnb1RvbWxGaWxlO1xuICAgICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldCBydXN0UHJvamVjdCgpOiBQcm9taXNlPHsgY2FyZ29Ub21sOiBDYXJnb1RvbWwgfSB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiB0aGlzLmNhcmdvVG9tbEZpbGUudGhlbigoY2FyZ29Ub21sRmlsZSkgPT4ge1xuICAgICAgaWYgKCFjYXJnb1RvbWxGaWxlKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlKHJlYWRGaWxlU3luYyhjYXJnb1RvbWxGaWxlLCAndXRmLTgnKSkgYXMgQ2FyZ29Ub21sO1xuXG4gICAgICByZXR1cm4geyBjYXJnb1RvbWw6IHBhcnNlZCB9O1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0IHByb2plY3RKc29uKCk6IFByb21pc2U8UHJvamVjdEpzb24gfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW3RoaXMucnVzdFByb2plY3RdKS50aGVuKChbcHJvamVjdF0pID0+IHtcbiAgICAgIGNvbnN0IHByb2plY3RKc29uOiBQcm9qZWN0SnNvbiA9IHsgdHlwZTogJ3J1c3QnIH07XG5cbiAgICAgIGlmICghcHJvamVjdCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IGNhcmdvVG9tbCB9ID0gcHJvamVjdDtcbiAgICAgIHByb2plY3RKc29uLm5hbWUgPSBjYXJnb1RvbWwucGFja2FnZT8ubmFtZTtcbiAgICAgIHByb2plY3RKc29uLnZlcnNpb24gPSBjYXJnb1RvbWwucGFja2FnZT8udmVyc2lvbjtcblxuICAgICAgcHJvamVjdEpzb24uZGVwZW5kZW5jaWVzID0gT2JqZWN0LmVudHJpZXMoY2FyZ29Ub21sLmRlcGVuZGVuY2llcyB8fCB7fSkucmVkdWNlKFxuICAgICAgICAoYWNjLCBba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgYWNjW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLnZlcnNpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBhY2Nba2V5XSA9IHZhbHVlLnZlcnNpb247XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0sXG4gICAgICAgIHt9IGFzIHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0sXG4gICAgICApO1xuXG4gICAgICBwcm9qZWN0SnNvbi5zY2FmZm9sZGx5ID0gY2FyZ29Ub21sLnBhY2thZ2U/Lm1ldGFkYXRhPy5zY2FmZm9sZGx5O1xuXG4gICAgICByZXR1cm4gcHJvamVjdEpzb247XG4gICAgfSk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBQcm9qZWN0SnNvbiB9IGZyb20gJy4uJztcbmltcG9ydCB7IEFic3RyYWN0UHJvamVjdCB9IGZyb20gJy4nO1xuaW1wb3J0IHsgcmVhZEZpbGVTeW5jLCB3cml0ZUZpbGVTeW5jIH0gZnJvbSAnZnMnO1xuXG5leHBvcnQgY2xhc3MgU3RhbmRhbG9uZVByb2plY3QgZXh0ZW5kcyBBYnN0cmFjdFByb2plY3Qge1xuICBhc3luYyBzZXRQcm9qZWN0KG5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLnN0YW5kYWxvbmVDb25maWdGaWxlLnRoZW4oKHN0YW5kYWxvbmVDb25maWdGaWxlKSA9PiB7XG4gICAgICBpZiAoIXN0YW5kYWxvbmVDb25maWdGaWxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc3RhbmRhbG9uZUNvbmZpZyA9IEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKHN0YW5kYWxvbmVDb25maWdGaWxlLCAndXRmOCcpKTtcblxuICAgICAgc3RhbmRhbG9uZUNvbmZpZy5uYW1lID0gbmFtZTtcblxuICAgICAgLy8gVE9ETzogc3VwcG9ydCB5YW1sXG4gICAgICB3cml0ZUZpbGVTeW5jKHN0YW5kYWxvbmVDb25maWdGaWxlLCBKU09OLnN0cmluZ2lmeShzdGFuZGFsb25lQ29uZmlnLCBudWxsLCAyKSk7XG4gICAgfSk7XG4gIH1cblxuICBnZXQgcHJvamVjdEpzb24oKTogUHJvbWlzZTxQcm9qZWN0SnNvbiB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiB0aGlzLnN0YW5kYWxvbmVDb25maWcudGhlbigoc3RhbmRhbG9uZUNvbmZpZykgPT4ge1xuICAgICAgaWYgKCFzdGFuZGFsb25lQ29uZmlnKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByb2plY3RKc29uOiBQcm9qZWN0SnNvbiA9IHsgdHlwZTogJ3N0YW5kYWxvbmUnIH07XG4gICAgICBwcm9qZWN0SnNvbi5uYW1lID0gc3RhbmRhbG9uZUNvbmZpZy5uYW1lO1xuICAgICAgcHJvamVjdEpzb24udmVyc2lvbiA9IHN0YW5kYWxvbmVDb25maWcudmVyc2lvbjtcbiAgICAgIHByb2plY3RKc29uLnNjYWZmb2xkbHkgPSBzdGFuZGFsb25lQ29uZmlnO1xuXG4gICAgICByZXR1cm4gcHJvamVjdEpzb247XG4gICAgfSk7XG4gIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICJ5b0JBQUEsSUFBQUEsR0FBQUMsRUFBQSxDQUFBQyxHQUFBQyxLQUFBLGNBQUFBLEdBQU8sUUFBVSxDQUViLE9BQW1CLEdBQ25CLE9BQW1CLFNBQ25CLE9BQW1CLEVBQ25CLE9BQW1CLEVBQ25CLE9BQW1CLEVBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBR25CLE9BQW1CLFVBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEVBQ25CLE9BQW1CLEVBQ25CLE9BQW1CLEdBR25CLE9BQW1CLEdBQ25CLE9BQW1CLFNBQ25CLE9BQW1CLEVBQ25CLE9BQW1CLEVBQ25CLE9BQW1CLEVBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBR25CLE9BQW1CLEdBQ25CLE9BQW1CLFVBQ25CLE9BQW1CLEVBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBRW5CLFNBQW1CLEdBQ25CLFNBQW1CLFVBQ25CLFdBQW1CLEVBQ25CLFNBQW1CLEVBQ25CLGNBQW1CLEdBRW5CLFNBQW1CLFVBQ25CLFNBQW1CLEdBQ25CLFVBQW1CLEdBQ25CLFVBQW1CLEVBQ25CLFNBQW1CLEdBQ25CLFNBQW1CLEdBQ25CLFNBQW1CLEdBQ25CLFlBQW1CLEdBQ25CLFNBQW1CLEdBQ25CLFNBQW1CLEdBQ25CLFVBQW1CLEdBQ25CLFNBQW1CLEdBQ25CLFdBQW1CLEdBR25CLE9BQW1CLEVBQ25CLE9BQW1CLEVBQ25CLFNBQW1CLEVBQ25CLFNBQW1CLEVBQ25CLFNBQW1CLEVBQ25CLFNBQW1CLEVBQ25CLFNBQW1CLEVBRW5CLFNBQW1CLEVBQ25CLGtCQUFtQixFQUNuQixPQUFtQixHQUVuQixNQUFtQixHQUVuQixLQUFtQixHQUVuQixVQUFtQixHQUNuQixTQUFtQixHQUNuQixZQUFtQixHQUluQixRQUFtQixFQUNuQixVQUFtQixFQUNuQixVQUFtQixFQUNuQixTQUFtQixFQUNuQixRQUFtQixHQUNuQixVQUFtQixHQUNuQixRQUFtQixHQUVuQixRQUFtQixLQUluQixRQUFtQixLQUduQixLQUFtQixFQUNuQixPQUFtQixFQUNuQixLQUFtQixFQUduQixNQUFtQixFQUNuQixRQUFtQixF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QUNSLE9BQVUsSUFDVixJQUFPLElBQ1AsT0FBVSxJQUNWLE1BQVMsSUFDVCxPQUFVLElBQ1YsS0FBUSxJQUNSLE9BQVUsSUFDVixNQUFTLElBQ1QsT0FBVSxJQUNWLEtBQVEsSUFDUixPQUFVLElBQ1YsT0FBVSxJQUNWLE1BQVMsSUFDVCxPQUFVLElBQ1YsT0FBVSxJQUNWLE9BQVUsSUFDVixLQUFRLElBQ1IsTUFBUyxJQUNULE9BQVUsSUFDVixNQUFTLElBQ1QsT0FBVSxJQUNWLEtBQVEsSUFDUixPQUFVLElBQ1YsT0FBVSxJQUNWLE1BQVMsSUFDVCxNQUFTLElBQ1QsT0FBVSxJQUNWLE1BQVMsSUFDVCxPQUFVLElBQ1YsS0FBUSxJQUNSLE9BQVUsSUFDVixPQUFVLElBQ1YsTUFBUyxJQUNULE9BQVUsSUFDVixJQUFPLElBQ1AsS0FBUSxJQUNSLE9BQVUsSUFDVixNQUFTLElBQ1QsT0FBVSxJQUNWLEtBQVEsSUFDUixPQUFVLElBQ1YsT0FBVSxJQUNWLE1BQVMsSUFDVCxPQUFVLElBQ1YsT0FBVSxJQUNWLE9BQVUsSUFDVixLQUFRLElBQ1IsTUFBUyxJQUNULE1BQVMsSUFDVCxPQUFVLElBQ1YsTUFBUyxJQUNULE9BQVUsSUFDVixLQUFRLElBQ1IsT0FBVSxJQUNWLEtBQVEsSUFDUixLQUFRLElBQ1IsSUFBTyxJQUNQLEtBQVEsSUFDUixNQUFTLElBQ1QsS0FBUSxJQUNSLE1BQVMsSUFDVCxPQUFVLElBQ1YsSUFBTyxJQUNQLE9BQVUsSUFDVixLQUFRLElBQ1IsSUFBTyxJQUNQLEtBQVEsSUFDUixNQUFTLElBQ1QsSUFBTyxJQUNQLElBQU8sSUFDUCxLQUFRLElBQ1IsSUFBTyxJQUNQLE9BQVUsSUFDVixLQUFRLElBQ1IsS0FBUSxJQUNSLEtBQVEsSUFDUixNQUFTLElBQ1QsTUFBUyxJQUNULEtBQVEsSUFDUixPQUFVLElBQ1YsTUFBUyxJQUNULEtBQVEsSUFDUixNQUFTLElBQ1QsT0FBVSxJQUNWLE9BQVUsSUFDVixPQUFVLElBQ1YsT0FBVSxJQUNWLE1BQVMsSUFDVCxPQUFVLElBQ1YsTUFBUyxJQUNULE1BQVMsSUFDVCxPQUFVLElBQ1YsT0FBVSxJQUNWLEtBQVEsSUFDUixLQUFRLElBQ1IsS0FBUSxJQUNSLE1BQVMsSUFDVCxNQUFTLElBQ1QsS0FBUSxJQUNSLE1BQVMsSUFDVCxNQUFTLElBQ1QsUUFBVyxJQUNYLEtBQVEsSUFDUixJQUFPLElBQ1AsTUFBUyxJQUNULEtBQVEsSUFDUixNQUFTLElBQ1QsT0FBVSxJQUNWLEdBQU0sSUFDTixHQUFNLElBQ04sR0FBTSxJQUNOLFFBQVcsSUFDWCxHQUFNLElBQ04sSUFBTyxJQUNQLE1BQVMsSUFDVCxJQUFPLElBQ1AsUUFBVyxJQUNYLElBQU8sSUFDUCxJQUFPLElBQ1AsSUFBTyxJQUNQLE1BQVMsSUFDVCxNQUFTLElBQ1QsS0FBUSxJQUNSLE1BQVMsSUFDVCxNQUFTLElBQ1QsUUFBVyxJQUNYLEtBQVEsSUFDUixJQUFPLElBQ1AsTUFBUyxJQUNULEtBQVEsSUFDUixNQUFTLElBQ1QsT0FBVSxJQUNWLEdBQU0sSUFDTixHQUFNLElBQ04sR0FBTSxJQUNOLFFBQVcsSUFDWCxHQUFNLElBQ04sSUFBTyxJQUNQLE9BQVUsSUFDVixNQUFTLElBQ1QsSUFBTyxJQUNQLFFBQVcsSUFDWCxJQUFPLElBQ1AsSUFBTyxJQUNQLElBQU8sSUFDUCxNQUFTLElBQ1QsU0FBWSxJQUNaLE1BQVMsSUFDVCxJQUFPLElBQ1AsS0FBUSxLQUNSLEtBQVEsS0FDUixPQUFVLEtBQ1YsS0FBUSxLQUNSLElBQU8sS0FDUCxJQUFPLEtBQ1AsSUFBTyxLQUNQLE1BQVMsS0FDVCxNQUFTLEtBQ1QsTUFBUyxLQUNULE1BQVMsS0FDVCxNQUFTLEtBQ1QsTUFBUyxLQUNULE1BQVMsS0FDVCxNQUFTLEtBQ1QsT0FBVSxLQUNWLE9BQVUsS0FDVixLQUFRLEtBQ1IsT0FBVSxLQUNWLE9BQVUsS0FDVixNQUFTLEtBQ1QsTUFBUyxLQUNULE9BQVUsS0FDVixPQUFVLEtBQ1YsTUFBUyxLQUNULE1BQVMsS0FDVCxLQUFRLEtBQ1IsTUFBUyxLQUNULE9BQVUsS0FDVixLQUFRLEtBQ1IsTUFBUyxL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bUQsRUFDL0QsUUFBUSxJQUFJLEVBQUUsQ0FDaEIiLAogICJuYW1lcyI6IFsicmVxdWlyZV9jb25zdGFudHMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJyZXF1aXJlX2Vycm9ycyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiZXJyb3JzIiwgIkUiLCAibWVzc2FnZSIsICJhcmdzIiwgIl8iLCAibiIsICJtc2ciLCAicmVxdWlyZV91dGlscyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImZzeXN0ZW0iLCAicHRoIiwgIkNvbnN0YW50cyIsICJFcnJvcnMiLCAiaXNXaW4iLCAiaXNfT2JqIiwgIm9iaiIsICJjcmNUYWJsZSIsICJ0IiwgImMiLCAiayIsICJVdGlscyIsICJvcHRzIiwgImZvbGRlciIsICJzZWxmIiwgIm1rZGlyU3luYyIsICJmcGF0aCIsICJyZXNvbHZlZFBhdGgiLCAibmFtZSIsICJzdGF0IiwgInBhdGgiLCAiY29udGVudCIsICJvdmVyd3JpdGUiLCAiYXR0ciIsICJmZCIsICJjYWxsYmFjayIsICJleGlzdCIsICJlcnIiLCAiZXhpc3RzIiwgImZpbmRTeW5jIiwgImRpciIsICJwYXR0ZXJuIiwgInJlY3Vyc2l2ZSIsICJmaWxlcyIsICJmaWxlIiwgImNiIiwgInJlc3VsdHMiLCAibGlzdCIsICJsaXN0X2xlbmd0aCIsICJyZXMiLCAiY3JjIiwgImJ5dGUiLCAiYnVmIiwgImxlbiIsICJvZmYiLCAibWV0aG9kIiwgInNhZmVTdWZmaXgiLCAiYXJyIiwgImkiLCAicHJlZml4IiwgInBhcnRzIiwgImwiLCAiaW5wdXQiLCAiZW5jb2RlciIsICJidWZmZXIiLCAiaW5kZXgiLCAic2xpY2UiLCAidmFsIiwgImRhdGUiLCAidGltZSIsICJyZXF1aXJlX2ZhdHRyIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicHRoIiwgInBhdGgiLCAiZnMiLCAiX3BhdGgiLCAiX29iaiIsICJuZXdBdHRyIiwgIl9zdGF0IiwgInJlcXVpcmVfZGVjb2RlciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImRhdGEiLCAicmVxdWlyZV91dGlsIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVxdWlyZV9lbnRyeUhlYWRlciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIlV0aWxzIiwgIkNvbnN0YW50cyIsICJfdmVyTWFkZSIsICJfdmVyc2lvbiIsICJfZmxhZ3MiLCAiX21ldGhvZCIsICJfdGltZSIsICJfY3JjIiwgIl9jb21wcmVzc2VkU2l6ZSIsICJfc2l6ZSIsICJfZm5hbWVMZW4iLCAiX2V4dHJhTGVuIiwgIl9jb21MZW4iLCAiX2Rpc2tTdGFydCIsICJfaW5hdHRyIiwgIl9hdHRyIiwgIl9vZmZzZXQiLCAiX2xvY2FsSGVhZGVyIiwgInVpbnQzMiIsICJ2YWwiLCAidWludDE2IiwgInVpbnQ4IiwgImlucHV0IiwgImRhdGEiLCAiZXh0cmFTdGFydCIsICJleHRyYUVuZCIsICJieXRlcyIsICJuciIsICJyZXF1aXJlX21haW5IZWFkZXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJVdGlscyIsICJDb25zdGFudHMiLCAiX3ZvbHVtZUVudHJpZXMiLCAiX3RvdGFsRW50cmllcyIsICJfc2l6ZSIsICJfb2Zmc2V0IiwgIl9jb21tZW50TGVuZ3RoIiwgInZhbCIsICJkYXRhIiwgImIiLCAib2Zmc2V0IiwgIm5yIiwgImxlbiIsICJvZmZzIiwgInJlcXVpcmVfaGVhZGVycyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAicmVxdWlyZV9kZWZsYXRlciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImluYnVmIiwgInpsaWIiLCAib3B0cyIsICJjYWxsYmFjayIsICJ0bXAiLCAicGFydHMiLCAidG90YWwiLCAiZGF0YSIsICJidWYiLCAid3JpdHRlbiIsICJpIiwgInBhcnQiLCAicmVxdWlyZV9pbmZsYXRlciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInZlcnNpb24iLCAiaW5idWYiLCAiZXhwZWN0ZWRMZW5ndGgiLCAiemxpYiIsICJvcHRpb24iLCAiY2FsbGJhY2siLCAidG1wIiwgInBhcnRzIiwgInRvdGFsIiwgImRhdGEiLCAiYnVmIiwgIndyaXR0ZW4iLCAiaSIsICJwYXJ0IiwgInJlcXVpcmVfemlwY3J5cHRvIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmFuZG9tRmlsbFN5bmMiLCAiRXJyb3JzIiwgImNyY3RhYmxlIiwgInQiLCAiY3JjIiwgImoiLCAidU11bCIsICJhIiwgImIiLCAiY3JjMzJ1cGRhdGUiLCAicENyYzMyIiwgImJ2YWwiLCAiZ2VuU2FsdCIsICJzYWx0IiwgImxlbiIsICJjb25maWciLCAiSW5pdGtleXMiLCAicHciLCAicGFzcyIsICJieXRlVmFsdWUiLCAia2V5cyIsICJrIiwgIm1ha2VfZGVjcnlwdGVyIiwgInB3ZCIsICJkYXRhIiwgInJlc3VsdCIsICJwb3MiLCAiYyIsICJtYWtlX2VuY3J5cHRlciIsICJkZWNyeXB0IiwgImhlYWRlciIsICJkZWNyeXB0ZXIiLCAidmVyaWZ5Qnl0ZSIsICJfc2FsdGVyIiwgImVuY3J5cHQiLCAib2xkbGlrZSIsICJlbmNyeXB0ZXIiLCAicmVxdWlyZV9tZXRob2RzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJyZXF1aXJlX3ppcEVudHJ5IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiVXRpbHMiLCAiSGVhZGVycyIsICJDb25zdGFudHMiLCAiTWV0aG9kcyIsICJvcHRpb25zIiwgImlucHV0IiwgIl9jZW50cmFsSGVhZGVyIiwgIl9lbnRyeU5hbWUiLCAiX2NvbW1lbnQiLCAiX2lzRGlyZWN0b3J5IiwgInVuY29tcHJlc3NlZERhdGEiLCAiX2V4dHJhIiwgIl9leHRyYWxvY2FsIiwgIl9lZnMiLCAib3B0cyIsICJkZWNvZGVyIiwgImdldENvbXByZXNzZWREYXRhRnJvbVppcCIsICJjcmMzMk9LIiwgImRhdGEiLCAiZGVzY3JpcHRvciIsICJkYXRhRW5kT2Zmc2V0IiwgImRlY29tcHJlc3MiLCAiYXN5bmMiLCAiY2FsbGJhY2siLCAicGFzcyIsICJjb21wcmVzc2VkRGF0YSIsICJpbmZsYXRlciIsICJyZXN1bHQiLCAiY29tcHJlc3MiLCAiZGVmbGF0ZXIiLCAiZGVmbGF0ZWQiLCAicmVhZFVJbnQ2NExFIiwgImJ1ZmZlciIsICJvZmZzZXQiLCAicGFyc2VFeHRyYSIsICJzaWduYXR1cmUiLCAic2l6ZSIsICJwYXJ0IiwgInBhcnNlWmlwNjRFeHRlbmRlZEluZm9ybWF0aW9uIiwgImNvbXByZXNzZWRTaXplIiwgImRpc2tOdW1TdGFydCIsICJ2YWwiLCAibGFzdENoYXIiLCAibiIsICJ2YWx1ZSIsICJhdHRyIiwgImhlYWRlciIsICJhZGRwb3MiLCAibG9jYWxIZWFkZXJCdWYiLCAibG9jYWxIZWFkZXIiLCAiYnl0ZXMiLCAibnIiLCAicmVxdWlyZV96aXBGaWxlIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiWmlwRW50cnkiLCAiSGVhZGVycyIsICJVdGlscyIsICJpbkJ1ZmZlciIsICJvcHRpb25zIiwgImVudHJ5TGlzdCIsICJlbnRyeVRhYmxlIiwgIl9jb21tZW50IiwgIm1haW5IZWFkZXIiLCAibG9hZGVkRW50cmllcyIsICJwYXNzd29yZCIsICJ0ZW1wb3JhcnkiLCAib3B0cyIsICJub1NvcnQiLCAiZGVjb2RlciIsICJyZWFkTWFpbkhlYWRlciIsICJtYWtlVGVtcG9yYXJ5Rm9sZGVycyIsICJmb2xkZXJzTGlzdCIsICJlbGVtIiwgImVsZW1lbnRzIiwgImkiLCAic3ViIiwgInRlbXBmb2xkZXIiLCAicmVhZEVudHJpZXMiLCAiaW5kZXgiLCAidG1wIiwgImVudHJ5IiwgInJlYWROb3ciLCAibWF4IiwgIm4iLCAiZW5kU3RhcnQiLCAiZW5kT2Zmc2V0IiwgImNvbW1lbnRFbmQiLCAic29ydEVudHJpZXMiLCAiYSIsICJiIiwgImUiLCAidmFsIiwgImNhbGxiYWNrIiwgImVudHJ5TmFtZSIsICJ3aXRoc3ViZm9sZGVycyIsICJjaGlsZCIsICJzdWJmb2xkZXJzIiwgImxpc3QiLCAibmFtZSIsICJ6aXBFbnRyeSIsICJkYXRhQmxvY2siLCAiaGVhZGVyQmxvY2tzIiwgInRvdGFsU2l6ZSIsICJkaW5kZXgiLCAidG90YWxFbnRyaWVzIiwgImNvbXByZXNzZWREYXRhIiwgImxvY2FsSGVhZGVyIiwgImRhdGFMZW5ndGgiLCAiY2VudHJhbEhlYWRlciIsICJvdXRCdWZmZXIiLCAiY29udGVudCIsICJtaCIsICJvblN1Y2Nlc3MiLCAib25GYWlsIiwgIm9uSXRlbVN0YXJ0IiwgIm9uSXRlbUVuZCIsICJjZW50cmFsSGVhZGVycyIsICJjb21wcmVzczJCdWZmZXIiLCAiZW50cnlMaXN0cyIsICJjZW50YWxIZWFkZXIiLCAicmVxdWlyZV9hZG1femlwIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiVXRpbHMiLCAicHRoIiwgIlppcEVudHJ5IiwgIlppcEZpbGUiLCAiZ2V0X0Jvb2wiLCAidmFsIiwgImMiLCAiZ2V0X1N0ciIsICJnZXRfRnVuIiwgImRlZmF1bHRPcHRpb25zIiwgImlucHV0IiwgIm9wdGlvbnMiLCAiaW5CdWZmZXIiLCAib3B0cyIsICJmaWxldG9vbHMiLCAiX3ppcCIsICJjYW5vbmljYWwiLCAic2FuaXRpemUiLCAiemlwbmFtZWZpeCIsICJnZXRFbnRyeSIsICJlbnRyeSIsICJpdGVtIiwgImZpeFBhdGgiLCAiemlwUGF0aCIsICJqb2luIiwgIm5vcm1hbGl6ZSIsICJzZXAiLCAiZmlsZW5hbWVGaWx0ZXIiLCAiZmlsdGVyZm4iLCAicngiLCAiZmlsZW5hbWUiLCAicmVsYXRpdmVQYXRoIiwgImxvY2FsIiwgImxhc3RDaGFyIiwgInBhc3MiLCAiY2FsbGJhY2siLCAiZW5jb2RpbmciLCAiZGF0YSIsICJlcnIiLCAid2l0aHN1YmZvbGRlcnMiLCAiY29tbWVudCIsICJjb250ZW50IiwgImxvY2FsUGF0aCIsICJ6aXBOYW1lIiwgInAiLCAiX2F0dHIiLCAic2VsZiIsICJzdGF0cyIsICJmaWx0ZXIiLCAiaXRlbXMiLCAiZmlsZXBhdGgiLCAiaSIsICJuZXh0IiwgImVyMCIsICJlcjEiLCAibmFtZWZpeCIsICJzdHIiLCAicmVsUGF0aEZpeCIsICJmaWxlTmFtZUZpeCIsICJmaWxlRW50cmllcyIsICJkaXIiLCAiZG9uZSIsICJwcm9wcyIsICJyZXNvbHZlIiwgInJlamVjdCIsICJlbnRyeU5hbWUiLCAiYXR0ciIsICJ1cGRhdGUiLCAiaXNTdGF0IiwgImZpbGVhdHRyIiwgInVuaXgiLCAicGFzc3dvcmQiLCAibmFtZSIsICJ0YXJnZXRQYXRoIiwgIm1haW50YWluRW50cnlQYXRoIiwgIm92ZXJ3cml0ZSIsICJrZWVwT3JpZ2luYWxQZXJtaXNzaW9uIiwgIm91dEZpbGVOYW1lIiwgInRhcmdldCIsICJjaGlsZHJlbiIsICJjaGlsZCIsICJjaGlsZE5hbWUiLCAiZmlsZUF0dHIiLCAiZ2V0UGF0aCIsICJnZXRFcnJvciIsICJtc2ciLCAiZmlsZSIsICJkaXJFbnRyaWVzIiwgImUiLCAiZGlyUGF0aCIsICJkaXJBdHRyIiwgImZpbGVQYXRoIiwgImVycl8xIiwgInN1Y2MiLCAiZXJyXzIiLCAidGFyZ2V0RmlsZU5hbWUiLCAiemlwRGF0YSIsICJvayIsICJwZXJtIiwgInJldCIsICJvblN1Y2Nlc3MiLCAib25GYWlsIiwgIm9uSXRlbVN0YXJ0IiwgIm9uSXRlbUVuZCIsICJyZXF1aXJlX21pbmltaXN0IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiaGFzS2V5IiwgIm9iaiIsICJrZXlzIiwgIm8iLCAia2V5IiwgImlzTnVtYmVyIiwgIngiLCAiaXNDb25zdHJ1Y3Rvck9yUHJvdG8iLCAiYXJncyIsICJvcHRzIiwgImZsYWdzIiwgImFsaWFzZXMiLCAiYWxpYXNJc0Jvb2xlYW4iLCAieSIsICJrIiwgImRlZmF1bHRzIiwgImFyZ3YiLCAiYXJnRGVmaW5lZCIsICJhcmciLCAic2V0S2V5IiwgInZhbHVlIiwgImkiLCAibGFzdEtleSIsICJzZXRBcmciLCAidmFsIiwgIm5vdEZsYWdzIiwgIm5leHQiLCAibSIsICJsZXR0ZXJzIiwgImJyb2tlbiIsICJqIiwgInJlcXVpcmVfa2xldXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJGT1JDRV9DT0xPUiIsICJOT0RFX0RJU0FCTEVfQ09MT1JTIiwgIlRFUk0iLCAiJCIsICJpbml0IiwgInJ1biIsICJhcnIiLCAic3RyIiwgInRtcCIsICJiZWciLCAiZW5kIiwgImNoYWluIiwgImhhcyIsICJrZXlzIiwgImN0eCIsICJvcGVuIiwgImNsb3NlIiwgImJsayIsICJ0eHQiLCAicmVxdWlyZV9hY3Rpb24iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJrZXkiLCAiaXNTZWxlY3QiLCAicmVxdWlyZV9zdHJpcCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInN0ciIsICJwYXR0ZXJuIiwgIlJHWCIsICJyZXF1aXJlX3NyYyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIkVTQyIsICJDU0kiLCAiYmVlcCIsICJjdXJzb3IiLCAieCIsICJ5IiwgInJldCIsICJjb3VudCIsICJzY3JvbGwiLCAiZXJhc2UiLCAiY2xlYXIiLCAicmVxdWlyZV9jbGVhciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwgIm8iLCAiYWxsb3dBcnJheUxpa2UiLCAiaXQiLCAiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwgImkiLCAiRiIsICJfZSIsICJub3JtYWxDb21wbGV0aW9uIiwgImRpZEVyciIsICJlcnIiLCAic3RlcCIsICJfZTIiLCAibWluTGVuIiwgIl9hcnJheUxpa2VUb0FycmF5IiwgIm4iLCAiYXJyIiwgImxlbiIsICJhcnIyIiwgInN0cmlwIiwgIl9yZXF1aXJlIiwgImVyYXNlIiwgImN1cnNvciIsICJ3aWR0aCIsICJzdHIiLCAicHJvbXB0IiwgInBlckxpbmUiLCAicm93cyIsICJsaW5lcyIsICJfaXRlcmF0b3IiLCAiX3N0ZXAiLCAibGluZSIsICJyZXF1aXJlX2ZpZ3VyZXMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJtYWluIiwgIndpbiIsICJmaWd1cmVzIiwgInJlcXVpcmVfc3R5bGUiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJjIiwgImZpZ3VyZXMiLCAic3R5bGVzIiwgImlucHV0IiwgInJlbmRlciIsICJ0eXBlIiwgInN5bWJvbHMiLCAic3ltYm9sIiwgImRvbmUiLCAiYWJvcnRlZCIsICJleGl0ZWQiLCAiZGVsaW1pdGVyIiwgImNvbXBsZXRpbmciLCAiaXRlbSIsICJleHBhbmRhYmxlIiwgImV4cGFuZGVkIiwgInJlcXVpcmVfbGluZXMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJzdHJpcCIsICJtc2ciLCAicGVyTGluZSIsICJsaW5lcyIsICJsIiwgImEiLCAiYiIsICJyZXF1aXJlX3dyYXAiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJtc2ciLCAib3B0cyIsICJ0YWIiLCAid2lkdGgiLCAibGluZSIsICJhcnIiLCAidyIsICJyZXF1aXJlX2VudHJpZXNUb0Rpc3BsYXkiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJjdXJzb3IiLCAidG90YWwiLCAibWF4VmlzaWJsZSIsICJzdGFydEluZGV4IiwgImVuZEluZGV4IiwgInJlcXVpcmVfdXRpbCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInJlcXVpcmVfcHJvbXB0IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVhZGxpbmUiLCAiX3JlcXVpcmUiLCAiYWN0aW9uIiwgIkV2ZW50RW1pdHRlciIsICJfcmVxdWlyZTIiLCAiYmVlcCIsICJjdXJzb3IiLCAiY29sb3IiLCAiUHJvbXB0IiwgIm9wdHMiLCAicmwiLCAiaXNTZWxlY3QiLCAia2V5cHJlc3MiLCAic3RyIiwgImtleSIsICJyZXF1aXJlX3RleHQiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJhc3luY0dlbmVyYXRvclN0ZXAiLCAiZ2VuIiwgInJlc29sdmUiLCAicmVqZWN0IiwgIl9uZXh0IiwgIl90aHJvdyIsICJrZXkiLCAiYXJnIiwgImluZm8iLCAidmFsdWUiLCAiZXJyb3IiLCAiX2FzeW5jVG9HZW5lcmF0b3IiLCAiZm4iLCAic2VsZiIsICJhcmdzIiwgImVyciIsICJjb2xvciIsICJQcm9tcHQiLCAiX3JlcXVpcmUiLCAiZXJhc2UiLCAiY3Vyc29yIiwgIl9yZXF1aXJlMiIsICJzdHlsZSIsICJjbGVhciIsICJsaW5lcyIsICJmaWd1cmVzIiwgIlRleHRQcm9tcHQiLCAib3B0cyIsICJ2IiwgIl90aGlzIiwgInZhbGlkIiwgIl90aGlzMiIsICJuIiwgImMiLCAiczEiLCAiczIiLCAiYSIsICJsIiwgImkiLCAicmVxdWlyZV9zZWxlY3QiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJjb2xvciIsICJQcm9tcHQiLCAiX3JlcXVpcmUiLCAic3R5bGUiLCAiY2xlYXIiLCAiZmlndXJlcyIsICJ3cmFwIiwgImVudHJpZXNUb0Rpc3BsYXkiLCAiX3JlcXVpcmUyIiwgImN1cnNvciIsICJTZWxlY3RQcm9tcHQiLCAib3B0cyIsICJjaCIsICJpZHgiLCAibiIsICJjIiwgImtleSIsICJfZW50cmllc1RvRGlzcGxheSIsICJzdGFydEluZGV4IiwgImVuZEluZGV4IiwgImkiLCAidGl0bGUiLCAicHJlZml4IiwgImRlc2MiLCAidiIsICJyZXF1aXJlX3RvZ2dsZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImNvbG9yIiwgIlByb21wdCIsICJfcmVxdWlyZSIsICJzdHlsZSIsICJjbGVhciIsICJfcmVxdWlyZTIiLCAiY3Vyc29yIiwgImVyYXNlIiwgIlRvZ2dsZVByb21wdCIsICJvcHRzIiwgImMiLCAia2V5IiwgInJlcXVpcmVfZGF0ZXBhcnQiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJEYXRlUGFydCIsICJfRGF0ZVBhcnQiLCAidG9rZW4iLCAiZGF0ZSIsICJwYXJ0cyIsICJsb2NhbGVzIiwgImN1cnJlbnRJZHgiLCAicGFydCIsICJpZHgiLCAidmFsIiwgInJlcXVpcmVfbWVyaWRpZW0iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJEYXRlUGFydCIsICJNZXJpZGllbSIsICJvcHRzIiwgIm1lcmlkaWVtIiwgInJlcXVpcmVfZGF5IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiRGF0ZVBhcnQiLCAicG9zIiwgIm4iLCAiRGF5IiwgIm9wdHMiLCAidmFsIiwgImRhdGUiLCAiZGF5IiwgInJlcXVpcmVfaG91cnMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJEYXRlUGFydCIsICJIb3VycyIsICJvcHRzIiwgInZhbCIsICJob3VycyIsICJyZXF1aXJlX21pbGxpc2Vjb25kcyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIkRhdGVQYXJ0IiwgIk1pbGxpc2Vjb25kcyIsICJvcHRzIiwgInZhbCIsICJyZXF1aXJlX21pbnV0ZXMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJEYXRlUGFydCIsICJNaW51dGVzIiwgIm9wdHMiLCAidmFsIiwgIm0iLCAicmVxdWlyZV9tb250aCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIkRhdGVQYXJ0IiwgIk1vbnRoIiwgIm9wdHMiLCAidmFsIiwgIm1vbnRoIiwgInRsIiwgInJlcXVpcmVfc2Vjb25kcyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIkRhdGVQYXJ0IiwgIlNlY29uZHMiLCAib3B0cyIsICJ2YWwiLCAicyIsICJyZXF1aXJlX3llYXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJEYXRlUGFydCIsICJZZWFyIiwgIm9wdHMiLCAidmFsIiwgInllYXIiLCAicmVxdWlyZV9kYXRlcGFydHMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJyZXF1aXJlX2RhdGUiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJhc3luY0dlbmVyYXRvclN0ZXAiLCAiZ2VuIiwgInJlc29sdmUiLCAicmVqZWN0IiwgIl9uZXh0IiwgIl90aHJvdyIsICJrZXkiLCAiYXJnIiwgImluZm8iLCAidmFsdWUiLCAiZXJyb3IiLCAiX2FzeW5jVG9HZW5lcmF0b3IiLCAiZm4iLCAic2VsZiIsICJhcmdzIiwgImVyciIsICJjb2xvciIsICJQcm9tcHQiLCAiX3JlcXVpcmUiLCAic3R5bGUiLCAiY2xlYXIiLCAiZmlndXJlcyIsICJfcmVxdWlyZTIiLCAiZXJhc2UiLCAiY3Vyc29yIiwgIl9yZXF1aXJlMyIsICJEYXRlUGFydCIsICJNZXJpZGllbSIsICJEYXkiLCAiSG91cnMiLCAiTWlsbGlzZWNvbmRzIiwgIk1pbnV0ZXMiLCAiTW9udGgiLCAiU2Vjb25kcyIsICJZZWFyIiwgInJlZ2V4IiwgInJlZ2V4R3JvdXBzIiwgInRva2VuIiwgIm9wdHMiLCAiZGZsdExvY2FsZXMiLCAiRGF0ZVByb21wdCIsICJkYXRlIiwgIm1hc2siLCAicmVzdWx0IiwgIm1hdGNoIiwgImlkeCIsICJnciIsICJwYXJ0cyIsICJhcnIiLCAiaSIsICJuIiwgInAiLCAiX3RoaXMiLCAidmFsaWQiLCAiX3RoaXMyIiwgInByZXYiLCAibmV4dCIsICJwYXJ0IiwgImMiLCAiYSIsICJsIiwgInJlcXVpcmVfbnVtYmVyIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiYXN5bmNHZW5lcmF0b3JTdGVwIiwgImdlbiIsICJyZXNvbHZlIiwgInJlamVjdCIsICJfbmV4dCIsICJfdGhyb3ciLCAia2V5IiwgImFyZyIsICJpbmZvIiwgInZhbHVlIiwgImVycm9yIiwgIl9hc3luY1RvR2VuZXJhdG9yIiwgImZuIiwgInNlbGYiLCAiYXJncyIsICJlcnIiLCAiY29sb3IiLCAiUHJvbXB0IiwgIl9yZXF1aXJlIiwgImN1cnNvciIsICJlcmFzZSIsICJfcmVxdWlyZTIiLCAic3R5bGUiLCAiZmlndXJlcyIsICJjbGVhciIsICJsaW5lcyIsICJpc051bWJlciIsICJpc0RlZiIsICJhbnkiLCAicm91bmQiLCAibnVtYmVyIiwgInByZWNpc2lvbiIsICJmYWN0b3IiLCAiTnVtYmVyUHJvbXB0IiwgIm9wdHMiLCAidiIsICJ4IiwgImMiLCAiX3RoaXMiLCAidmFsaWQiLCAiX3RoaXMyIiwgInZhbCIsICJub3ciLCAiYSIsICJsIiwgImkiLCAicmVxdWlyZV9tdWx0aXNlbGVjdCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImNvbG9yIiwgIl9yZXF1aXJlIiwgImN1cnNvciIsICJQcm9tcHQiLCAiX3JlcXVpcmUyIiwgImNsZWFyIiwgImZpZ3VyZXMiLCAic3R5bGUiLCAid3JhcCIsICJlbnRyaWVzVG9EaXNwbGF5IiwgIk11bHRpc2VsZWN0UHJvbXB0IiwgIm9wdHMiLCAiY2giLCAiaWR4IiwgInYiLCAic2VsZWN0ZWQiLCAiZSIsICJuZXdTZWxlY3RlZCIsICJjIiwgImtleSIsICJpIiwgImFycm93SW5kaWNhdG9yIiwgInByZWZpeCIsICJ0aXRsZSIsICJkZXNjIiwgIm9wdGlvbnMiLCAiX2VudHJpZXNUb0Rpc3BsYXkiLCAic3RhcnRJbmRleCIsICJlbmRJbmRleCIsICJzdHlsZWRPcHRpb25zIiwgIm91dHB1dCIsICJwcm9tcHQiLCAicmVxdWlyZV9hdXRvY29tcGxldGUiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJhc3luY0dlbmVyYXRvclN0ZXAiLCAiZ2VuIiwgInJlc29sdmUiLCAicmVqZWN0IiwgIl9uZXh0IiwgIl90aHJvdyIsICJrZXkiLCAiYXJnIiwgImluZm8iLCAidmFsdWUiLCAiZXJyb3IiLCAiX2FzeW5jVG9HZW5lcmF0b3IiLCAiZm4iLCAic2VsZiIsICJhcmdzIiwgImVyciIsICJjb2xvciIsICJQcm9tcHQiLCAiX3JlcXVpcmUiLCAiZXJhc2UiLCAiY3Vyc29yIiwgIl9yZXF1aXJlMiIsICJzdHlsZSIsICJjbGVhciIsICJmaWd1cmVzIiwgIndyYXAiLCAiZW50cmllc1RvRGlzcGxheSIsICJnZXRWYWwiLCAiYXJyIiwgImkiLCAiZ2V0VGl0bGUiLCAiZ2V0SW5kZXgiLCAidmFsT3JUaXRsZSIsICJpbmRleCIsICJlbCIsICJBdXRvY29tcGxldGVQcm9tcHQiLCAib3B0cyIsICJmYiIsICJjaG9pY2UiLCAiY2IiLCAiX3RoaXMiLCAicCIsICJzdWdnZXN0aW9ucyIsICJzIiwgImwiLCAiYyIsICJzMSIsICJzMiIsICJ2IiwgImhvdmVyZWQiLCAiaXNTdGFydCIsICJpc0VuZCIsICJkZXNjIiwgInByZWZpeCIsICJ0aXRsZSIsICJfZW50cmllc1RvRGlzcGxheSIsICJzdGFydEluZGV4IiwgImVuZEluZGV4IiwgIml0ZW0iLCAicmVxdWlyZV9hdXRvY29tcGxldGVNdWx0aXNlbGVjdCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImNvbG9yIiwgIl9yZXF1aXJlIiwgImN1cnNvciIsICJNdWx0aXNlbGVjdFByb21wdCIsICJfcmVxdWlyZTIiLCAiY2xlYXIiLCAic3R5bGUiLCAiZmlndXJlcyIsICJBdXRvY29tcGxldGVNdWx0aXNlbGVjdFByb21wdCIsICJvcHRzIiwgImUiLCAiY3VycmVudEhpZ2hsaWdodCIsICJ2IiwgIm5ld0hpZ2hsaWdodEluZGV4IiwgImMiLCAia2V5IiwgImkiLCAidGl0bGUiLCAib3V0cHV0IiwgInByb21wdCIsICJyZXF1aXJlX2NvbmZpcm0iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJjb2xvciIsICJQcm9tcHQiLCAiX3JlcXVpcmUiLCAic3R5bGUiLCAiY2xlYXIiLCAiX3JlcXVpcmUyIiwgImVyYXNlIiwgImN1cnNvciIsICJDb25maXJtUHJvbXB0IiwgIm9wdHMiLCAiYyIsICJrZXkiLCAicmVxdWlyZV9lbGVtZW50cyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInJlcXVpcmVfcHJvbXB0cyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiJCIsICJlbCIsICJub29wIiwgInYiLCAidG9Qcm9tcHQiLCAidHlwZSIsICJhcmdzIiwgIm9wdHMiLCAicmVzIiwgInJlaiIsICJwIiwgIm9uQWJvcnQiLCAib25TdWJtaXQiLCAib25FeGl0IiwgIngiLCAic2VwIiwgInN0ciIsICJzIiwgInRvU2VsZWN0ZWQiLCAiaXRlbXMiLCAiaXRlbSIsICJieVRpdGxlIiwgImlucHV0IiwgImNob2ljZXMiLCAicmVxdWlyZV9kaXN0IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAib3duS2V5cyIsICJvYmplY3QiLCAiZW51bWVyYWJsZU9ubHkiLCAia2V5cyIsICJzeW1ib2xzIiwgInN5bSIsICJfb2JqZWN0U3ByZWFkIiwgInRhcmdldCIsICJpIiwgInNvdXJjZSIsICJrZXkiLCAiX2RlZmluZVByb3BlcnR5IiwgIm9iaiIsICJ2YWx1ZSIsICJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsICJvIiwgImFsbG93QXJyYXlMaWtlIiwgIml0IiwgIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsICJGIiwgIl9lIiwgIm5vcm1hbENvbXBsZXRpb24iLCAiZGlkRXJyIiwgImVyciIsICJzdGVwIiwgIl9lMiIsICJtaW5MZW4iLCAiX2FycmF5TGlrZVRvQXJyYXkiLCAibiIsICJhcnIiLCAibGVuIiwgImFycjIiLCAiYXN5bmNHZW5lcmF0b3JTdGVwIiwgImdlbiIsICJyZXNvbHZlIiwgInJlamVjdCIsICJfbmV4dCIsICJfdGhyb3ciLCAiYXJnIiwgImluZm8iLCAiZXJyb3IiLCAiX2FzeW5jVG9HZW5lcmF0b3IiLCAiZm4iLCAic2VsZiIsICJhcmdzIiwgInByb21wdHMiLCAicGFzc09uIiwgIm5vb3AiLCAicHJvbXB0IiwgIl9wcm9tcHQiLCAicXVlc3Rpb25zIiwgIm9uU3VibWl0IiwgIm9uQ2FuY2VsIiwgImFuc3dlcnMiLCAib3ZlcnJpZGUiLCAiYW5zd2VyIiwgInF1ZXN0aW9uIiwgInF1aXQiLCAibmFtZSIsICJ0eXBlIiwgImxhc3RQcm9tcHQiLCAiZ2V0Rm9ybWF0dGVkQW5zd2VyIiwgIl9yZWYiLCAic2tpcFZhbGlkYXRpb24iLCAiX3giLCAiX3gyIiwgIl9pdGVyYXRvciIsICJfc3RlcCIsICJfcXVlc3Rpb24iLCAiX3F1ZXN0aW9uMiIsICJnZXRJbmplY3RlZEFuc3dlciIsICJpbmplY3RlZCIsICJkZWFmdWx0VmFsdWUiLCAiaW5qZWN0IiwgInJlcXVpcmVfYWN0aW9uIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAia2V5IiwgImlzU2VsZWN0IiwgInJlcXVpcmVfc3RyaXAiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJzdHIiLCAicGF0dGVybiIsICJSR1giLCAicmVxdWlyZV9jbGVhciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInN0cmlwIiwgImVyYXNlIiwgImN1cnNvciIsICJ3aWR0aCIsICJzdHIiLCAicHJvbXB0IiwgInBlckxpbmUiLCAicm93cyIsICJsaW5lcyIsICJsaW5lIiwgInJlcXVpcmVfZmlndXJlcyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIm1haW4iLCAid2luIiwgImZpZ3VyZXMiLCAicmVxdWlyZV9zdHlsZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImMiLCAiZmlndXJlcyIsICJzdHlsZXMiLCAiaW5wdXQiLCAicmVuZGVyIiwgInR5cGUiLCAic3ltYm9scyIsICJzeW1ib2wiLCAiZG9uZSIsICJhYm9ydGVkIiwgImV4aXRlZCIsICJkZWxpbWl0ZXIiLCAiY29tcGxldGluZyIsICJpdGVtIiwgImV4cGFuZGFibGUiLCAiZXhwYW5kZWQiLCAicmVxdWlyZV9saW5lcyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInN0cmlwIiwgIm1zZyIsICJwZXJMaW5lIiwgImxpbmVzIiwgImwiLCAiYSIsICJiIiwgInJlcXVpcmVfd3JhcCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIm1zZyIsICJvcHRzIiwgInRhYiIsICJ3aWR0aCIsICJsaW5lIiwgImFyciIsICJ3IiwgInJlcXVpcmVfZW50cmllc1RvRGlzcGxheSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImN1cnNvciIsICJ0b3RhbCIsICJtYXhWaXNpYmxlIiwgInN0YXJ0SW5kZXgiLCAiZW5kSW5kZXgiLCAicmVxdWlyZV91dGlsIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVxdWlyZV9wcm9tcHQiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJyZWFkbGluZSIsICJhY3Rpb24iLCAiRXZlbnRFbWl0dGVyIiwgImJlZXAiLCAiY3Vyc29yIiwgImNvbG9yIiwgIlByb21wdCIsICJvcHRzIiwgInJsIiwgImlzU2VsZWN0IiwgImtleXByZXNzIiwgInN0ciIsICJrZXkiLCAicmVxdWlyZV90ZXh0IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiY29sb3IiLCAiUHJvbXB0IiwgImVyYXNlIiwgImN1cnNvciIsICJzdHlsZSIsICJjbGVhciIsICJsaW5lcyIsICJmaWd1cmVzIiwgIlRleHRQcm9tcHQiLCAib3B0cyIsICJ2IiwgInZhbGlkIiwgIm4iLCAiYyIsICJrZXkiLCAiczEiLCAiczIiLCAiYSIsICJsIiwgImkiLCAicmVxdWlyZV9zZWxlY3QiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJjb2xvciIsICJQcm9tcHQiLCAic3R5bGUiLCAiY2xlYXIiLCAiZmlndXJlcyIsICJ3cmFwIiwgImVudHJpZXNUb0Rpc3BsYXkiLCAiY3Vyc29yIiwgIlNlbGVjdFByb21wdCIsICJvcHRzIiwgImNoIiwgImlkeCIsICJuIiwgImMiLCAia2V5IiwgInN0YXJ0SW5kZXgiLCAiZW5kSW5kZXgiLCAiaSIsICJ0aXRsZSIsICJwcmVmaXgiLCAiZGVzYyIsICJ2IiwgInJlcXVpcmVfdG9nZ2xlIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiY29sb3IiLCAiUHJvbXB0IiwgInN0eWxlIiwgImNsZWFyIiwgImN1cnNvciIsICJlcmFzZSIsICJUb2dnbGVQcm9tcHQiLCAib3B0cyIsICJjIiwgImtleSIsICJyZXF1aXJlX2RhdGVwYXJ0IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiRGF0ZVBhcnQiLCAiX0RhdGVQYXJ0IiwgInRva2VuIiwgImRhdGUiLCAicGFydHMiLCAibG9jYWxlcyIsICJjdXJyZW50SWR4IiwgInBhcnQiLCAiaWR4IiwgInZhbCIsICJyZXF1aXJlX21lcmlkaWVtIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiRGF0ZVBhcnQiLCAiTWVyaWRpZW0iLCAib3B0cyIsICJtZXJpZGllbSIsICJyZXF1aXJlX2RheSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIkRhdGVQYXJ0IiwgInBvcyIsICJuIiwgIkRheSIsICJvcHRzIiwgInZhbCIsICJkYXRlIiwgImRheSIsICJyZXF1aXJlX2hvdXJzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiRGF0ZVBhcnQiLCAiSG91cnMiLCAib3B0cyIsICJ2YWwiLCAiaG91cnMiLCAicmVxdWlyZV9taWxsaXNlY29uZHMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJEYXRlUGFydCIsICJNaWxsaXNlY29uZHMiLCAib3B0cyIsICJ2YWwiLCAicmVxdWlyZV9taW51dGVzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiRGF0ZVBhcnQiLCAiTWludXRlcyIsICJvcHRzIiwgInZhbCIsICJtIiwgInJlcXVpcmVfbW9udGgiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJEYXRlUGFydCIsICJNb250aCIsICJvcHRzIiwgInZhbCIsICJtb250aCIsICJ0bCIsICJyZXF1aXJlX3NlY29uZHMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJEYXRlUGFydCIsICJTZWNvbmRzIiwgIm9wdHMiLCAidmFsIiwgInMiLCAicmVxdWlyZV95ZWFyIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiRGF0ZVBhcnQiLCAiWWVhciIsICJvcHRzIiwgInZhbCIsICJ5ZWFyIiwgInJlcXVpcmVfZGF0ZXBhcnRzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVxdWlyZV9kYXRlIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiY29sb3IiLCAiUHJvbXB0IiwgInN0eWxlIiwgImNsZWFyIiwgImZpZ3VyZXMiLCAiZXJhc2UiLCAiY3Vyc29yIiwgIkRhdGVQYXJ0IiwgIk1lcmlkaWVtIiwgIkRheSIsICJIb3VycyIsICJNaWxsaXNlY29uZHMiLCAiTWludXRlcyIsICJNb250aCIsICJTZWNvbmRzIiwgIlllYXIiLCAicmVnZXgiLCAicmVnZXhHcm91cHMiLCAidG9rZW4iLCAib3B0cyIsICJkZmx0TG9jYWxlcyIsICJEYXRlUHJvbXB0IiwgImRhdGUiLCAibWFzayIsICJyZXN1bHQiLCAibWF0Y2giLCAiaWR4IiwgImdyIiwgInBhcnRzIiwgImFyciIsICJpIiwgIm4iLCAicCIsICJ2YWxpZCIsICJwcmV2IiwgIm5leHQiLCAicGFydCIsICJjIiwgImEiLCAibCIsICJyZXF1aXJlX251bWJlciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImNvbG9yIiwgIlByb21wdCIsICJjdXJzb3IiLCAiZXJhc2UiLCAic3R5bGUiLCAiZmlndXJlcyIsICJjbGVhciIsICJsaW5lcyIsICJpc051bWJlciIsICJpc0RlZiIsICJhbnkiLCAicm91bmQiLCAibnVtYmVyIiwgInByZWNpc2lvbiIsICJmYWN0b3IiLCAiTnVtYmVyUHJvbXB0IiwgIm9wdHMiLCAidiIsICJ4IiwgImMiLCAidmFsaWQiLCAidmFsIiwgImtleSIsICJub3ciLCAiYSIsICJsIiwgImkiLCAicmVxdWlyZV9tdWx0aXNlbGVjdCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImNvbG9yIiwgImN1cnNvciIsICJQcm9tcHQiLCAiY2xlYXIiLCAiZmlndXJlcyIsICJzdHlsZSIsICJ3cmFwIiwgImVudHJpZXNUb0Rpc3BsYXkiLCAiTXVsdGlzZWxlY3RQcm9tcHQiLCAib3B0cyIsICJjaCIsICJpZHgiLCAidiIsICJzZWxlY3RlZCIsICJlIiwgIm5ld1NlbGVjdGVkIiwgImMiLCAia2V5IiwgImkiLCAiYXJyb3dJbmRpY2F0b3IiLCAicHJlZml4IiwgInRpdGxlIiwgImRlc2MiLCAib3B0aW9ucyIsICJzdGFydEluZGV4IiwgImVuZEluZGV4IiwgInN0eWxlZE9wdGlvbnMiLCAib3V0cHV0IiwgInByb21wdCIsICJyZXF1aXJlX2F1dG9jb21wbGV0ZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImNvbG9yIiwgIlByb21wdCIsICJlcmFzZSIsICJjdXJzb3IiLCAic3R5bGUiLCAiY2xlYXIiLCAiZmlndXJlcyIsICJ3cmFwIiwgImVudHJpZXNUb0Rpc3BsYXkiLCAiZ2V0VmFsIiwgImFyciIsICJpIiwgImdldFRpdGxlIiwgImdldEluZGV4IiwgInZhbE9yVGl0bGUiLCAiaW5kZXgiLCAiZWwiLCAiQXV0b2NvbXBsZXRlUHJvbXB0IiwgIm9wdHMiLCAiZmIiLCAiY2hvaWNlIiwgImNiIiwgInAiLCAic3VnZ2VzdGlvbnMiLCAibCIsICJjIiwgImtleSIsICJzMSIsICJzMiIsICJ2IiwgImhvdmVyZWQiLCAiaXNTdGFydCIsICJpc0VuZCIsICJkZXNjIiwgInByZWZpeCIsICJ0aXRsZSIsICJzdGFydEluZGV4IiwgImVuZEluZGV4IiwgIml0ZW0iLCAicmVxdWlyZV9hdXRvY29tcGxldGVNdWx0aXNlbGVjdCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImNvbG9yIiwgImN1cnNvciIsICJNdWx0aXNlbGVjdFByb21wdCIsICJjbGVhciIsICJzdHlsZSIsICJmaWd1cmVzIiwgIkF1dG9jb21wbGV0ZU11bHRpc2VsZWN0UHJvbXB0IiwgIm9wdHMiLCAiZSIsICJjdXJyZW50SGlnaGxpZ2h0IiwgInYiLCAibmV3SGlnaGxpZ2h0SW5kZXgiLCAiYyIsICJrZXkiLCAiaSIsICJ0aXRsZSIsICJvdXRwdXQiLCAicHJvbXB0IiwgInJlcXVpcmVfY29uZmlybSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImNvbG9yIiwgIlByb21wdCIsICJzdHlsZSIsICJjbGVhciIsICJlcmFzZSIsICJjdXJzb3IiLCAiQ29uZmlybVByb21wdCIsICJvcHRzIiwgImMiLCAia2V5IiwgInJlcXVpcmVfZWxlbWVudHMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJyZXF1aXJlX3Byb21wdHMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIiQiLCAiZWwiLCAibm9vcCIsICJ2IiwgInRvUHJvbXB0IiwgInR5cGUiLCAiYXJncyIsICJvcHRzIiwgInJlcyIsICJyZWoiLCAicCIsICJvbkFib3J0IiwgIm9uU3VibWl0IiwgIm9uRXhpdCIsICJ4IiwgInNlcCIsICJzdHIiLCAicyIsICJ0b1NlbGVjdGVkIiwgIml0ZW1zIiwgIml0ZW0iLCAiYnlUaXRsZSIsICJpbnB1dCIsICJjaG9pY2VzIiwgInJlcXVpcmVfbGliIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicHJvbXB0cyIsICJwYXNzT24iLCAibm9vcCIsICJwcm9tcHQiLCAicXVlc3Rpb25zIiwgIm9uU3VibWl0IiwgIm9uQ2FuY2VsIiwgImFuc3dlcnMiLCAib3ZlcnJpZGUiLCAiYW5zd2VyIiwgInF1ZXN0aW9uIiwgInF1aXQiLCAibmFtZSIsICJ0eXBlIiwgImxhc3RQcm9tcHQiLCAiZ2V0Rm9ybWF0dGVkQW5zd2VyIiwgInNraXBWYWxpZGF0aW9uIiwgImtleSIsICJ2YWx1ZSIsICJnZXRJbmplY3RlZEFuc3dlciIsICJpbmplY3RlZCIsICJkZWFmdWx0VmFsdWUiLCAiaW5qZWN0IiwgInJlcXVpcmVfcHJvbXB0cyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImlzTm9kZUxUIiwgInRhciIsICJpIiwgInNyYyIsICJyZXF1aXJlX2RlbGF5ZWRfc3RyZWFtIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiU3RyZWFtIiwgInV0aWwiLCAiRGVsYXllZFN0cmVhbSIsICJzb3VyY2UiLCAib3B0aW9ucyIsICJkZWxheWVkU3RyZWFtIiwgIm9wdGlvbiIsICJyZWFsRW1pdCIsICJhcmdzIiwgInIiLCAibWVzc2FnZSIsICJyZXF1aXJlX2NvbWJpbmVkX3N0cmVhbSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInV0aWwiLCAiU3RyZWFtIiwgIkRlbGF5ZWRTdHJlYW0iLCAiQ29tYmluZWRTdHJlYW0iLCAib3B0aW9ucyIsICJjb21iaW5lZFN0cmVhbSIsICJvcHRpb24iLCAic3RyZWFtIiwgImlzU3RyZWFtTGlrZSIsICJuZXdTdHJlYW0iLCAiZGVzdCIsICJnZXRTdHJlYW0iLCAidmFsdWUiLCAic2VsZiIsICJlcnIiLCAiZGF0YSIsICJtZXNzYWdlIiwgInJlcXVpcmVfZGIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJyZXF1aXJlX21pbWVfZGIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJyZXF1aXJlX21pbWVfdHlwZXMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImRiIiwgImV4dG5hbWUiLCAiRVhUUkFDVF9UWVBFX1JFR0VYUCIsICJURVhUX1RZUEVfUkVHRVhQIiwgImNoYXJzZXQiLCAiY29udGVudFR5cGUiLCAiZXh0ZW5zaW9uIiwgImxvb2t1cCIsICJwb3B1bGF0ZU1hcHMiLCAidHlwZSIsICJtYXRjaCIsICJtaW1lIiwgInN0ciIsICJleHRzIiwgInBhdGgiLCAiZXh0ZW5zaW9ucyIsICJ0eXBlcyIsICJwcmVmZXJlbmNlIiwgImkiLCAiZnJvbSIsICJ0byIsICJyZXF1aXJlX2RlZmVyIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiZGVmZXIiLCAiZm4iLCAibmV4dFRpY2siLCAicmVxdWlyZV9hc3luYyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImRlZmVyIiwgImFzeW5jIiwgImNhbGxiYWNrIiwgImlzQXN5bmMiLCAiZXJyIiwgInJlc3VsdCIsICJyZXF1aXJlX2Fib3J0IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiYWJvcnQiLCAic3RhdGUiLCAiY2xlYW4iLCAia2V5IiwgInJlcXVpcmVfaXRlcmF0ZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImFzeW5jIiwgImFib3J0IiwgIml0ZXJhdGUiLCAibGlzdCIsICJpdGVyYXRvciIsICJzdGF0ZSIsICJjYWxsYmFjayIsICJrZXkiLCAicnVuSm9iIiwgImVycm9yIiwgIm91dHB1dCIsICJpdGVtIiwgImFib3J0ZXIiLCAicmVxdWlyZV9zdGF0ZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInN0YXRlIiwgImxpc3QiLCAic29ydE1ldGhvZCIsICJpc05hbWVkTGlzdCIsICJpbml0U3RhdGUiLCAiYSIsICJiIiwgInJlcXVpcmVfdGVybWluYXRvciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImFib3J0IiwgImFzeW5jIiwgInRlcm1pbmF0b3IiLCAiY2FsbGJhY2siLCAicmVxdWlyZV9wYXJhbGxlbCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIml0ZXJhdGUiLCAiaW5pdFN0YXRlIiwgInRlcm1pbmF0b3IiLCAicGFyYWxsZWwiLCAibGlzdCIsICJpdGVyYXRvciIsICJjYWxsYmFjayIsICJzdGF0ZSIsICJlcnJvciIsICJyZXN1bHQiLCAicmVxdWlyZV9zZXJpYWxPcmRlcmVkIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiaXRlcmF0ZSIsICJpbml0U3RhdGUiLCAidGVybWluYXRvciIsICJzZXJpYWxPcmRlcmVkIiwgImFzY2VuZGluZyIsICJkZXNjZW5kaW5nIiwgImxpc3QiLCAiaXRlcmF0b3IiLCAic29ydE1ldGhvZCIsICJjYWxsYmFjayIsICJzdGF0ZSIsICJpdGVyYXRvckhhbmRsZXIiLCAiZXJyb3IiLCAicmVzdWx0IiwgImEiLCAiYiIsICJyZXF1aXJlX3NlcmlhbCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInNlcmlhbE9yZGVyZWQiLCAic2VyaWFsIiwgImxpc3QiLCAiaXRlcmF0b3IiLCAiY2FsbGJhY2siLCAicmVxdWlyZV9hc3luY2tpdCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInJlcXVpcmVfcG9wdWxhdGUiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJkc3QiLCAic3JjIiwgInByb3AiLCAicmVxdWlyZV9mb3JtX2RhdGEiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJDb21iaW5lZFN0cmVhbSIsICJ1dGlsIiwgInBhdGgiLCAiaHR0cCIsICJodHRwcyIsICJwYXJzZVVybCIsICJmcyIsICJTdHJlYW0iLCAibWltZSIsICJhc3luY2tpdCIsICJwb3B1bGF0ZSIsICJGb3JtRGF0YSIsICJvcHRpb25zIiwgIm9wdGlvbiIsICJmaWVsZCIsICJ2YWx1ZSIsICJhcHBlbmQiLCAiaGVhZGVyIiwgImZvb3RlciIsICJ2YWx1ZUxlbmd0aCIsICJjYWxsYmFjayIsICJlcnIiLCAic3RhdCIsICJmaWxlU2l6ZSIsICJyZXNwb25zZSIsICJjb250ZW50RGlzcG9zaXRpb24iLCAiY29udGVudFR5cGUiLCAiY29udGVudHMiLCAiaGVhZGVycyIsICJwcm9wIiwgImZpbGVuYW1lIiwgIm5leHQiLCAibGFzdFBhcnQiLCAidXNlckhlYWRlcnMiLCAiZm9ybUhlYWRlcnMiLCAiYm91bmRhcnkiLCAiZGF0YUJ1ZmZlciIsICJsZW4iLCAiaSIsICJrbm93bkxlbmd0aCIsICJoYXNLbm93bkxlbmd0aCIsICJjYiIsICJ2YWx1ZXMiLCAibGVuZ3RoIiwgInBhcmFtcyIsICJyZXF1ZXN0IiwgImRlZmF1bHRzIiwgIm9uUmVzcG9uc2UiLCAiZXJyb3IiLCAicmVzcG9uY2UiLCAicmVxdWlyZV9wcm94eV9mcm9tX2VudiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAicGFyc2VVcmwiLCAiREVGQVVMVF9QT1JUUyIsICJzdHJpbmdFbmRzV2l0aCIsICJzIiwgImdldFByb3h5Rm9yVXJsIiwgInVybCIsICJwYXJzZWRVcmwiLCAicHJvdG8iLCAiaG9zdG5hbWUiLCAicG9ydCIsICJzaG91bGRQcm94eSIsICJwcm94eSIsICJnZXRFbnYiLCAiTk9fUFJPWFkiLCAicGFyc2VkUHJveHkiLCAicGFyc2VkUHJveHlIb3N0bmFtZSIsICJwYXJzZWRQcm94eVBvcnQiLCAia2V5IiwgInJlcXVpcmVfbXMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJzIiwgIm0iLCAiaCIsICJkIiwgInciLCAieSIsICJ2YWwiLCAib3B0aW9ucyIsICJ0eXBlIiwgInBhcnNlIiwgImZtdExvbmciLCAiZm10U2hvcnQiLCAic3RyIiwgIm1hdGNoIiwgIm4iLCAibXMiLCAibXNBYnMiLCAicGx1cmFsIiwgIm5hbWUiLCAiaXNQbHVyYWwiLCAicmVxdWlyZV9jb21tb24iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJzZXR1cCIsICJlbnYiLCAiY3JlYXRlRGVidWciLCAiY29lcmNlIiwgImRpc2FibGUiLCAiZW5hYmxlIiwgImVuYWJsZWQiLCAiZGVzdHJveSIsICJrZXkiLCAic2VsZWN0Q29sb3IiLCAibmFtZXNwYWNlIiwgImhhc2giLCAiaSIsICJwcmV2VGltZSIsICJlbmFibGVPdmVycmlkZSIsICJuYW1lc3BhY2VzQ2FjaGUiLCAiZW5hYmxlZENhY2hlIiwgImRlYnVnIiwgImFyZ3MiLCAic2VsZiIsICJjdXJyIiwgIm1zIiwgImluZGV4IiwgIm1hdGNoIiwgImZvcm1hdCIsICJmb3JtYXR0ZXIiLCAidmFsIiwgImV4dGVuZCIsICJ2IiwgImRlbGltaXRlciIsICJuZXdEZWJ1ZyIsICJuYW1lc3BhY2VzIiwgInNwbGl0IiwgImxlbiIsICJ0b05hbWVzcGFjZSIsICJuYW1lIiwgInJlZ2V4cCIsICJyZXF1aXJlX2Jyb3dzZXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJmb3JtYXRBcmdzIiwgInNhdmUiLCAibG9hZCIsICJ1c2VDb2xvcnMiLCAibG9jYWxzdG9yYWdlIiwgIndhcm5lZCIsICJhcmdzIiwgImMiLCAiaW5kZXgiLCAibGFzdEMiLCAibWF0Y2giLCAibmFtZXNwYWNlcyIsICJyIiwgImZvcm1hdHRlcnMiLCAidiIsICJlcnJvciIsICJyZXF1aXJlX2hhc19mbGFnIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiZmxhZyIsICJhcmd2IiwgInByZWZpeCIsICJwb3NpdGlvbiIsICJ0ZXJtaW5hdG9yUG9zaXRpb24iLCAicmVxdWlyZV9zdXBwb3J0c19jb2xvciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIm9zIiwgInR0eSIsICJoYXNGbGFnIiwgImVudiIsICJmbGFnRm9yY2VDb2xvciIsICJlbnZGb3JjZUNvbG9yIiwgInRyYW5zbGF0ZUxldmVsIiwgImxldmVsIiwgInN1cHBvcnRzQ29sb3IiLCAiaGF2ZVN0cmVhbSIsICJzdHJlYW1Jc1RUWSIsICJzbmlmZkZsYWdzIiwgIm5vRmxhZ0ZvcmNlQ29sb3IiLCAiZm9yY2VDb2xvciIsICJtaW4iLCAib3NSZWxlYXNlIiwgInNpZ24iLCAidmVyc2lvbiIsICJnZXRTdXBwb3J0TGV2ZWwiLCAic3RyZWFtIiwgIm9wdGlvbnMiLCAicmVxdWlyZV9ub2RlIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAidHR5IiwgInV0aWwiLCAiaW5pdCIsICJsb2ciLCAiZm9ybWF0QXJncyIsICJzYXZlIiwgImxvYWQiLCAidXNlQ29sb3JzIiwgInN1cHBvcnRzQ29sb3IiLCAia2V5IiwgIm9iaiIsICJwcm9wIiwgIl8iLCAiayIsICJ2YWwiLCAiYXJncyIsICJuYW1lIiwgImMiLCAiY29sb3JDb2RlIiwgInByZWZpeCIsICJnZXREYXRlIiwgIm5hbWVzcGFjZXMiLCAiZGVidWciLCAia2V5cyIsICJmb3JtYXR0ZXJzIiwgInYiLCAic3RyIiwgInJlcXVpcmVfc3JjIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVxdWlyZV9kZWJ1ZyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImRlYnVnIiwgInJlcXVpcmVfZm9sbG93X3JlZGlyZWN0cyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInVybCIsICJVUkwiLCAiaHR0cCIsICJodHRwcyIsICJXcml0YWJsZSIsICJhc3NlcnQiLCAiZGVidWciLCAidXNlTmF0aXZlVVJMIiwgImVycm9yIiwgInByZXNlcnZlZFVybEZpZWxkcyIsICJldmVudHMiLCAiZXZlbnRIYW5kbGVycyIsICJldmVudCIsICJhcmcxIiwgImFyZzIiLCAiYXJnMyIsICJJbnZhbGlkVXJsRXJyb3IiLCAiY3JlYXRlRXJyb3JUeXBlIiwgIlJlZGlyZWN0aW9uRXJyb3IiLCAiVG9vTWFueVJlZGlyZWN0c0Vycm9yIiwgIk1heEJvZHlMZW5ndGhFeGNlZWRlZEVycm9yIiwgIldyaXRlQWZ0ZXJFbmRFcnJvciIsICJkZXN0cm95IiwgIm5vb3AiLCAiUmVkaXJlY3RhYmxlUmVxdWVzdCIsICJvcHRpb25zIiwgInJlc3BvbnNlQ2FsbGJhY2siLCAic2VsZiIsICJyZXNwb25zZSIsICJjYXVzZSIsICJkZXN0cm95UmVxdWVzdCIsICJkYXRhIiwgImVuY29kaW5nIiwgImNhbGxiYWNrIiwgImlzU3RyaW5nIiwgImlzQnVmZmVyIiwgImlzRnVuY3Rpb24iLCAiY3VycmVudFJlcXVlc3QiLCAibmFtZSIsICJ2YWx1ZSIsICJtc2VjcyIsICJkZXN0cm95T25UaW1lb3V0IiwgInNvY2tldCIsICJzdGFydFRpbWVyIiwgImNsZWFyVGltZXIiLCAibWV0aG9kIiwgImEiLCAiYiIsICJwcm9wZXJ0eSIsICJzZWFyY2hQb3MiLCAicHJvdG9jb2wiLCAibmF0aXZlUHJvdG9jb2wiLCAic2NoZW1lIiwgInJlcXVlc3QiLCAiaSIsICJidWZmZXJzIiwgIndyaXRlTmV4dCIsICJidWZmZXIiLCAic3RhdHVzQ29kZSIsICJsb2NhdGlvbiIsICJyZXF1ZXN0SGVhZGVycyIsICJiZWZvcmVSZWRpcmVjdCIsICJyZW1vdmVNYXRjaGluZ0hlYWRlcnMiLCAiY3VycmVudEhvc3RIZWFkZXIiLCAiY3VycmVudFVybFBhcnRzIiwgInBhcnNlVXJsIiwgImN1cnJlbnRIb3N0IiwgImN1cnJlbnRVcmwiLCAicmVkaXJlY3RVcmwiLCAicmVzb2x2ZVVybCIsICJzcHJlYWRVcmxPYmplY3QiLCAiaXNTdWJkb21haW4iLCAicmVzcG9uc2VEZXRhaWxzIiwgInJlcXVlc3REZXRhaWxzIiwgIndyYXAiLCAicHJvdG9jb2xzIiwgIm5hdGl2ZVByb3RvY29scyIsICJ3cmFwcGVkUHJvdG9jb2wiLCAiaW5wdXQiLCAiaXNVUkwiLCAidmFsaWRhdGVVcmwiLCAiZ2V0IiwgIndyYXBwZWRSZXF1ZXN0IiwgInBhcnNlZCIsICJyZWxhdGl2ZSIsICJiYXNlIiwgInVybE9iamVjdCIsICJ0YXJnZXQiLCAic3ByZWFkIiwgImtleSIsICJyZWdleCIsICJoZWFkZXJzIiwgImxhc3RWYWx1ZSIsICJoZWFkZXIiLCAiY29kZSIsICJtZXNzYWdlIiwgImJhc2VDbGFzcyIsICJDdXN0b21FcnJvciIsICJwcm9wZXJ0aWVzIiwgInN1YmRvbWFpbiIsICJkb21haW4iLCAiZG90IiwgImZzXzEiLCAiZGVidWdfMSIsICJfX2ltcG9ydERlZmF1bHQiLCAibG9nIiwgImNoZWNrIiwgInBhdGgiLCAiaXNGaWxlIiwgImlzRGlyZWN0b3J5IiwgInN0YXQiLCAiZSIsICJleGlzdHMiLCAidHlwZSIsICJleHBvcnRzIiwgIl9fZXhwb3J0IiwgImRlZmVycmVkIiwgImRvbmUiLCAiZmFpbCIsICJzdGF0dXMiLCAiX2RvbmUiLCAiX2ZhaWwiLCAicmVzdWx0IiwgImVycm9yIiwgImV4cG9ydHMiLCAicmVxdWlyZV93aW5kb3dzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiaXNleGUiLCAic3luYyIsICJmcyIsICJjaGVja1BhdGhFeHQiLCAicGF0aCIsICJvcHRpb25zIiwgInBhdGhleHQiLCAiaSIsICJwIiwgImNoZWNrU3RhdCIsICJzdGF0IiwgImNiIiwgImVyIiwgInJlcXVpcmVfbW9kZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImlzZXhlIiwgInN5bmMiLCAiZnMiLCAicGF0aCIsICJvcHRpb25zIiwgImNiIiwgImVyIiwgInN0YXQiLCAiY2hlY2tTdGF0IiwgImNoZWNrTW9kZSIsICJtb2QiLCAidWlkIiwgImdpZCIsICJteVVpZCIsICJteUdpZCIsICJ1IiwgImciLCAibyIsICJ1ZyIsICJyZXQiLCAicmVxdWlyZV9pc2V4ZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImZzIiwgImNvcmUiLCAiaXNleGUiLCAic3luYyIsICJwYXRoIiwgIm9wdGlvbnMiLCAiY2IiLCAicmVzb2x2ZSIsICJyZWplY3QiLCAiZXIiLCAiaXMiLCAicmVxdWlyZV93aGljaCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImlzV2luZG93cyIsICJwYXRoIiwgIkNPTE9OIiwgImlzZXhlIiwgImdldE5vdEZvdW5kRXJyb3IiLCAiY21kIiwgImdldFBhdGhJbmZvIiwgIm9wdCIsICJjb2xvbiIsICJwYXRoRW52IiwgInBhdGhFeHRFeGUiLCAicGF0aEV4dCIsICJ3aGljaCIsICJjYiIsICJmb3VuZCIsICJzdGVwIiwgImkiLCAicmVzb2x2ZSIsICJyZWplY3QiLCAicHBSYXciLCAicGF0aFBhcnQiLCAicENtZCIsICJwIiwgInN1YlN0ZXAiLCAiaWkiLCAiZXh0IiwgImVyIiwgImlzIiwgInJlcyIsICJ3aGljaFN5bmMiLCAiaiIsICJjdXIiLCAicmVxdWlyZV9pZ25vcmUiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJtYWtlQXJyYXkiLCAic3ViamVjdCIsICJFTVBUWSIsICJTUEFDRSIsICJFU0NBUEUiLCAiUkVHRVhfVEVTVF9CTEFOS19MSU5FIiwgIlJFR0VYX0lOVkFMSURfVFJBSUxJTkdfQkFDS1NMQVNIIiwgIlJFR0VYX1JFUExBQ0VfTEVBRElOR19FWENBUEVEX0VYQ0xBTUFUSU9OIiwgIlJFR0VYX1JFUExBQ0VfTEVBRElOR19FWENBUEVEX0hBU0giLCAiUkVHRVhfU1BMSVRBTExfQ1JMRiIsICJSRUdFWF9URVNUX0lOVkFMSURfUEFUSCIsICJTTEFTSCIsICJUTVBfS0VZX0lHTk9SRSIsICJLRVlfSUdOT1JFIiwgImRlZmluZSIsICJvYmplY3QiLCAia2V5IiwgInZhbHVlIiwgIlJFR0VYX1JFR0VYUF9SQU5HRSIsICJSRVRVUk5fRkFMU0UiLCAic2FuaXRpemVSYW5nZSIsICJyYW5nZSIsICJtYXRjaCIsICJmcm9tIiwgInRvIiwgImNsZWFuUmFuZ2VCYWNrU2xhc2giLCAic2xhc2hlcyIsICJsZW5ndGgiLCAiUkVQTEFDRVJTIiwgIl8iLCAibTEiLCAibTIiLCAiaW5kZXgiLCAic3RyIiwgInAxIiwgInAyIiwgInVuZXNjYXBlZCIsICJsZWFkRXNjYXBlIiwgImVuZEVzY2FwZSIsICJjbG9zZSIsICJyZWdleENhY2hlIiwgIm1ha2VSZWdleCIsICJwYXR0ZXJuIiwgImlnbm9yZUNhc2UiLCAic291cmNlIiwgInByZXYiLCAibWF0Y2hlciIsICJyZXBsYWNlciIsICJpc1N0cmluZyIsICJjaGVja1BhdHRlcm4iLCAic3BsaXRQYXR0ZXJuIiwgIklnbm9yZVJ1bGUiLCAib3JpZ2luIiwgIm5lZ2F0aXZlIiwgInJlZ2V4IiwgImNyZWF0ZVJ1bGUiLCAidGhyb3dFcnJvciIsICJtZXNzYWdlIiwgIkN0b3IiLCAiY2hlY2tQYXRoIiwgInBhdGgiLCAib3JpZ2luYWxQYXRoIiwgImRvVGhyb3ciLCAiaXNOb3RSZWxhdGl2ZSIsICJwIiwgIklnbm9yZSIsICJpZ25vcmVjYXNlIiwgImFsbG93UmVsYXRpdmVQYXRocyIsICJydWxlIiwgImNoZWNrVW5pZ25vcmVkIiwgImlnbm9yZWQiLCAidW5pZ25vcmVkIiwgImNhY2hlIiwgInNsaWNlcyIsICJwYXJlbnQiLCAicGF0aHMiLCAiZmFjdG9yeSIsICJvcHRpb25zIiwgImlzUGF0aFZhbGlkIiwgIm1ha2VQb3NpeCIsICJSRUdJWF9JU19XSU5ET1dTX1BBVEhfQUJTT0xVVEUiLCAicmVxdWlyZV9kZWZhdWx0cyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAicmVxdWlyZV9VdGlsaXR5IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiYXNzaWduIiwgImdldFZhbHVlIiwgImlzQXJyYXkiLCAiaXNFbXB0eSIsICJpc0Z1bmN0aW9uIiwgImlzT2JqZWN0IiwgImlzUGxhaW5PYmplY3QiLCAic2xpY2UiLCAiaGFzUHJvcCIsICJpIiwgImtleSIsICJsZW4iLCAic291cmNlIiwgInNvdXJjZXMiLCAidGFyZ2V0IiwgInZhbCIsICJyZWYiLCAiY3RvciIsICJwcm90byIsICJvYmoiLCAicmVxdWlyZV9YTUxET01JbXBsZW1lbnRhdGlvbiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIlhNTERPTUltcGxlbWVudGF0aW9uIiwgImZlYXR1cmUiLCAidmVyc2lvbiIsICJxdWFsaWZpZWROYW1lIiwgInB1YmxpY0lkIiwgInN5c3RlbUlkIiwgIm5hbWVzcGFjZVVSSSIsICJkb2N0eXBlIiwgInRpdGxlIiwgInJlcXVpcmVfWE1MRE9NRXJyb3JIYW5kbGVyIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiWE1MRE9NRXJyb3JIYW5kbGVyIiwgImVycm9yIiwgInJlcXVpcmVfWE1MRE9NU3RyaW5nTGlzdCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIlhNTERPTVN0cmluZ0xpc3QiLCAiYXJyIiwgImluZGV4IiwgInN0ciIsICJyZXF1aXJlX1hNTERPTUNvbmZpZ3VyYXRpb24iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJYTUxET01Db25maWd1cmF0aW9uIiwgIlhNTERPTUVycm9ySGFuZGxlciIsICJYTUxET01TdHJpbmdMaXN0IiwgImNsb25lZFNlbGYiLCAibmFtZSIsICJ2YWx1ZSIsICJyZXF1aXJlX05vZGVUeXBlIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVxdWlyZV9YTUxBdHRyaWJ1dGUiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJOb2RlVHlwZSIsICJYTUxBdHRyaWJ1dGUiLCAiWE1MTm9kZSIsICJwYXJlbnQiLCAibmFtZSIsICJ2YWx1ZSIsICJvcHRpb25zIiwgIm5vZGUiLCAicmVxdWlyZV9YTUxOYW1lZE5vZGVNYXAiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJYTUxOYW1lZE5vZGVNYXAiLCAibm9kZXMiLCAibmFtZSIsICJub2RlIiwgIm9sZE5vZGUiLCAiaW5kZXgiLCAibmFtZXNwYWNlVVJJIiwgImxvY2FsTmFtZSIsICJyZXF1aXJlX1hNTEVsZW1lbnQiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJOb2RlVHlwZSIsICJYTUxBdHRyaWJ1dGUiLCAiWE1MRWxlbWVudCIsICJYTUxOYW1lZE5vZGVNYXAiLCAiWE1MTm9kZSIsICJnZXRWYWx1ZSIsICJpc0Z1bmN0aW9uIiwgImlzT2JqZWN0IiwgInJlZiIsICJleHRlbmQiLCAiY2hpbGQiLCAicGFyZW50IiwgImtleSIsICJoYXNQcm9wIiwgImN0b3IiLCAic3VwZXJDbGFzcyIsICJuYW1lIiwgImF0dHJpYnV0ZXMiLCAiaiIsICJsZW4iLCAicmVmMSIsICJhdHQiLCAiYXR0TmFtZSIsICJjbG9uZWRTZWxmIiwgImNsb25lZENoaWxkIiwgInZhbHVlIiwgImF0dFZhbHVlIiwgIm9wdGlvbnMiLCAibmV3QXR0ciIsICJvbGRBdHRyIiwgIm5hbWVzcGFjZVVSSSIsICJsb2NhbE5hbWUiLCAicXVhbGlmaWVkTmFtZSIsICJpc0lkIiwgImlkQXR0ciIsICJ0YWduYW1lIiwgImNsYXNzTmFtZXMiLCAibm9kZSIsICJpIiwgInJlcXVpcmVfWE1MQ2hhcmFjdGVyRGF0YSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIlhNTENoYXJhY3RlckRhdGEiLCAiWE1MTm9kZSIsICJleHRlbmQiLCAiY2hpbGQiLCAicGFyZW50IiwgImtleSIsICJoYXNQcm9wIiwgImN0b3IiLCAic3VwZXJDbGFzcyIsICJ2YWx1ZSIsICJvZmZzZXQiLCAiY291bnQiLCAiYXJnIiwgIm5vZGUiLCAicmVxdWlyZV9YTUxDRGF0YSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIk5vZGVUeXBlIiwgIlhNTENEYXRhIiwgIlhNTENoYXJhY3RlckRhdGEiLCAiZXh0ZW5kIiwgImNoaWxkIiwgInBhcmVudCIsICJrZXkiLCAiaGFzUHJvcCIsICJjdG9yIiwgInN1cGVyQ2xhc3MiLCAidGV4dCIsICJvcHRpb25zIiwgInJlcXVpcmVfWE1MQ29tbWVudCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIk5vZGVUeXBlIiwgIlhNTENoYXJhY3RlckRhdGEiLCAiWE1MQ29tbWVudCIsICJleHRlbmQiLCAiY2hpbGQiLCAicGFyZW50IiwgImtleSIsICJoYXNQcm9wIiwgImN0b3IiLCAic3VwZXJDbGFzcyIsICJ0ZXh0IiwgIm9wdGlvbnMiLCAicmVxdWlyZV9YTUxEZWNsYXJhdGlvbiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIk5vZGVUeXBlIiwgIlhNTERlY2xhcmF0aW9uIiwgIlhNTE5vZGUiLCAiaXNPYmplY3QiLCAiZXh0ZW5kIiwgImNoaWxkIiwgInBhcmVudCIsICJrZXkiLCAiaGFzUHJvcCIsICJjdG9yIiwgInN1cGVyQ2xhc3MiLCAidmVyc2lvbiIsICJlbmNvZGluZyIsICJzdGFuZGFsb25lIiwgInJlZiIsICJvcHRpb25zIiwgInJlcXVpcmVfWE1MRFREQXR0TGlzdCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIk5vZGVUeXBlIiwgIlhNTERUREF0dExpc3QiLCAiWE1MTm9kZSIsICJleHRlbmQiLCAiY2hpbGQiLCAicGFyZW50IiwgImtleSIsICJoYXNQcm9wIiwgImN0b3IiLCAic3VwZXJDbGFzcyIsICJlbGVtZW50TmFtZSIsICJhdHRyaWJ1dGVOYW1lIiwgImF0dHJpYnV0ZVR5cGUiLCAiZGVmYXVsdFZhbHVlVHlwZSIsICJkZWZhdWx0VmFsdWUiLCAib3B0aW9ucyIsICJyZXF1aXJlX1hNTERUREVudGl0eSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIk5vZGVUeXBlIiwgIlhNTERUREVudGl0eSIsICJYTUxOb2RlIiwgImlzT2JqZWN0IiwgImV4dGVuZCIsICJjaGlsZCIsICJwYXJlbnQiLCAia2V5IiwgImhhc1Byb3AiLCAiY3RvciIsICJzdXBlckNsYXNzIiwgInBlIiwgIm5hbWUiLCAidmFsdWUiLCAib3B0aW9ucyIsICJyZXF1aXJlX1hNTERUREVsZW1lbnQiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJOb2RlVHlwZSIsICJYTUxEVERFbGVtZW50IiwgIlhNTE5vZGUiLCAiZXh0ZW5kIiwgImNoaWxkIiwgInBhcmVudCIsICJrZXkiLCAiaGFzUHJvcCIsICJjdG9yIiwgInN1cGVyQ2xhc3MiLCAibmFtZSIsICJ2YWx1ZSIsICJvcHRpb25zIiwgInJlcXVpcmVfWE1MRFRETm90YXRpb24iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJOb2RlVHlwZSIsICJYTUxEVEROb3RhdGlvbiIsICJYTUxOb2RlIiwgImV4dGVuZCIsICJjaGlsZCIsICJwYXJlbnQiLCAia2V5IiwgImhhc1Byb3AiLCAiY3RvciIsICJzdXBlckNsYXNzIiwgIm5hbWUiLCAidmFsdWUiLCAib3B0aW9ucyIsICJyZXF1aXJlX1hNTERvY1R5cGUiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJOb2RlVHlwZSIsICJYTUxEVERBdHRMaXN0IiwgIlhNTERUREVsZW1lbnQiLCAiWE1MRFRERW50aXR5IiwgIlhNTERURE5vdGF0aW9uIiwgIlhNTERvY1R5cGUiLCAiWE1MTmFtZWROb2RlTWFwIiwgIlhNTE5vZGUiLCAiaXNPYmplY3QiLCAiZXh0ZW5kIiwgImNoaWxkIiwgInBhcmVudCIsICJrZXkiLCAiaGFzUHJvcCIsICJjdG9yIiwgInN1cGVyQ2xhc3MiLCAicHViSUQiLCAic3lzSUQiLCAiaSIsICJsZW4iLCAicmVmIiwgInJlZjEiLCAicmVmMiIsICJub2RlcyIsICJuYW1lIiwgInZhbHVlIiwgImVsZW1lbnROYW1lIiwgImF0dHJpYnV0ZU5hbWUiLCAiYXR0cmlidXRlVHlwZSIsICJkZWZhdWx0VmFsdWVUeXBlIiwgImRlZmF1bHRWYWx1ZSIsICJvcHRpb25zIiwgIm5vZGUiLCAicmVxdWlyZV9YTUxSYXciLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJOb2RlVHlwZSIsICJYTUxOb2RlIiwgIlhNTFJhdyIsICJleHRlbmQiLCAiY2hpbGQiLCAicGFyZW50IiwgImtleSIsICJoYXNQcm9wIiwgImN0b3IiLCAic3VwZXJDbGFzcyIsICJ0ZXh0IiwgIm9wdGlvbnMiLCAicmVxdWlyZV9YTUxUZXh0IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiTm9kZVR5cGUiLCAiWE1MQ2hhcmFjdGVyRGF0YSIsICJYTUxUZXh0IiwgImV4dGVuZCIsICJjaGlsZCIsICJwYXJlbnQiLCAia2V5IiwgImhhc1Byb3AiLCAiY3RvciIsICJzdXBlckNsYXNzIiwgInRleHQiLCAibmV4dCIsICJwcmV2IiwgInN0ciIsICJvcHRpb25zIiwgIm9mZnNldCIsICJjb250ZW50IiwgInJlcXVpcmVfWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiTm9kZVR5cGUiLCAiWE1MQ2hhcmFjdGVyRGF0YSIsICJYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iLCAiZXh0ZW5kIiwgImNoaWxkIiwgInBhcmVudCIsICJrZXkiLCAiaGFzUHJvcCIsICJjdG9yIiwgInN1cGVyQ2xhc3MiLCAidGFyZ2V0IiwgInZhbHVlIiwgIm9wdGlvbnMiLCAibm9kZSIsICJyZXF1aXJlX1hNTER1bW15IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiTm9kZVR5cGUiLCAiWE1MRHVtbXkiLCAiWE1MTm9kZSIsICJleHRlbmQiLCAiY2hpbGQiLCAicGFyZW50IiwgImtleSIsICJoYXNQcm9wIiwgImN0b3IiLCAic3VwZXJDbGFzcyIsICJvcHRpb25zIiwgInJlcXVpcmVfWE1MTm9kZUxpc3QiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJYTUxOb2RlTGlzdCIsICJub2RlcyIsICJpbmRleCIsICJyZXF1aXJlX0RvY3VtZW50UG9zaXRpb24iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJyZXF1aXJlX1hNTE5vZGUiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJEb2N1bWVudFBvc2l0aW9uIiwgIk5vZGVUeXBlIiwgIlhNTENEYXRhIiwgIlhNTENvbW1lbnQiLCAiWE1MRGVjbGFyYXRpb24iLCAiWE1MRG9jVHlwZSIsICJYTUxEdW1teSIsICJYTUxFbGVtZW50IiwgIlhNTE5hbWVkTm9kZU1hcCIsICJYTUxOb2RlIiwgIlhNTE5vZGVMaXN0IiwgIlhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbiIsICJYTUxSYXciLCAiWE1MVGV4dCIsICJnZXRWYWx1ZSIsICJpc0VtcHR5IiwgImlzRnVuY3Rpb24iLCAiaXNPYmplY3QiLCAicmVmMSIsICJoYXNQcm9wIiwgInBhcmVudDEiLCAiaSIsICJjaGlsZCIsICJqIiwgImxlbiIsICJyZWYyIiwgInN0ciIsICJ2YWx1ZSIsICJwYXJlbnQiLCAicmVzdWx0cyIsICJuYW1lIiwgImF0dHJpYnV0ZXMiLCAidGV4dCIsICJjaGlsZE5vZGUiLCAiaXRlbSIsICJrIiwgImtleSIsICJsYXN0Q2hpbGQiLCAibGVuMSIsICJyZWYzIiwgInZhbCIsICJuZXdDaGlsZCIsICJyZWZDaGlsZCIsICJyZW1vdmVkIiwgInRhcmdldCIsICJpbnNUYXJnZXQiLCAiaW5zVmFsdWUiLCAiaW5zdHJ1Y3Rpb24iLCAidmVyc2lvbiIsICJlbmNvZGluZyIsICJzdGFuZGFsb25lIiwgImRvYyIsICJ4bWxkZWMiLCAicHViSUQiLCAic3lzSUQiLCAiZG9jdHlwZSIsICJub2RlIiwgIm9wdGlvbnMiLCAiY2xvbmVkUm9vdCIsICJvbGRDaGlsZCIsICJkZWVwIiwgImZlYXR1cmUiLCAib3RoZXIiLCAicmVmIiwgInJlcyIsICJuYW1lc3BhY2VVUkkiLCAicHJlZml4IiwgImRhdGEiLCAiaGFuZGxlciIsICJpc0Rlc2NlbmRhbnRDaGlsZCIsICJub2RlUG9zIiwgInRoaXNQb3MiLCAiZm91bmQiLCAicG9zIiwgImZ1bmMiLCAicmVxdWlyZV9YTUxTdHJpbmdpZmllciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIlhNTFN0cmluZ2lmaWVyIiwgImJpbmQiLCAiZm4iLCAibWUiLCAiaGFzUHJvcCIsICJvcHRpb25zIiwgImtleSIsICJyZWYiLCAidmFsdWUiLCAidmFsIiwgInN0ciIsICJyZWdleCIsICJyZXMiLCAiYW1wcmVnZXgiLCAicmVxdWlyZV9Xcml0ZXJTdGF0ZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInJlcXVpcmVfWE1MV3JpdGVyQmFzZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIk5vZGVUeXBlIiwgIldyaXRlclN0YXRlIiwgIlhNTENEYXRhIiwgIlhNTENvbW1lbnQiLCAiWE1MRFREQXR0TGlzdCIsICJYTUxEVERFbGVtZW50IiwgIlhNTERUREVudGl0eSIsICJYTUxEVEROb3RhdGlvbiIsICJYTUxEZWNsYXJhdGlvbiIsICJYTUxEb2NUeXBlIiwgIlhNTER1bW15IiwgIlhNTEVsZW1lbnQiLCAiWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uIiwgIlhNTFJhdyIsICJYTUxUZXh0IiwgIlhNTFdyaXRlckJhc2UiLCAiYXNzaWduIiwgImhhc1Byb3AiLCAib3B0aW9ucyIsICJrZXkiLCAicmVmIiwgInZhbHVlIiwgImZpbHRlcmVkT3B0aW9ucyIsICJyZWYxIiwgInJlZjIiLCAicmVmMyIsICJyZWY0IiwgInJlZjUiLCAicmVmNiIsICJub2RlIiwgImxldmVsIiwgImluZGVudExldmVsIiwgImF0dCIsICJyIiwgImNoaWxkIiwgImkiLCAibGVuIiwgImNoaWxkTm9kZUNvdW50IiwgImZpcnN0Q2hpbGROb2RlIiwgImoiLCAibGVuMSIsICJuYW1lIiwgInByZXR0eVN1cHByZXNzZWQiLCAiZSIsICJyZXF1aXJlX1hNTFN0cmluZ1dyaXRlciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIlhNTFN0cmluZ1dyaXRlciIsICJYTUxXcml0ZXJCYXNlIiwgImV4dGVuZCIsICJjaGlsZCIsICJwYXJlbnQiLCAia2V5IiwgImhhc1Byb3AiLCAiY3RvciIsICJzdXBlckNsYXNzIiwgIm9wdGlvbnMiLCAiZG9jIiwgImkiLCAibGVuIiwgInIiLCAicmVmIiwgInJlcXVpcmVfWE1MRG9jdW1lbnQiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJOb2RlVHlwZSIsICJYTUxET01Db25maWd1cmF0aW9uIiwgIlhNTERPTUltcGxlbWVudGF0aW9uIiwgIlhNTERvY3VtZW50IiwgIlhNTE5vZGUiLCAiWE1MU3RyaW5nV3JpdGVyIiwgIlhNTFN0cmluZ2lmaWVyIiwgImlzUGxhaW5PYmplY3QiLCAiZXh0ZW5kIiwgImNoaWxkIiwgInBhcmVudCIsICJrZXkiLCAiaGFzUHJvcCIsICJjdG9yIiwgInN1cGVyQ2xhc3MiLCAib3B0aW9ucyIsICJpIiwgImxlbiIsICJyZWYiLCAid3JpdGVyIiwgIndyaXRlck9wdGlvbnMiLCAidGFnTmFtZSIsICJkYXRhIiwgInRhcmdldCIsICJuYW1lIiwgInRhZ25hbWUiLCAiaW1wb3J0ZWROb2RlIiwgImRlZXAiLCAibmFtZXNwYWNlVVJJIiwgInF1YWxpZmllZE5hbWUiLCAibG9jYWxOYW1lIiwgImVsZW1lbnRJZCIsICJzb3VyY2UiLCAibm9kZSIsICJjbGFzc05hbWVzIiwgImV2ZW50SW50ZXJmYWNlIiwgInJvb3QiLCAid2hhdFRvU2hvdyIsICJmaWx0ZXIiLCAicmVxdWlyZV9YTUxEb2N1bWVudENCIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiTm9kZVR5cGUiLCAiV3JpdGVyU3RhdGUiLCAiWE1MQXR0cmlidXRlIiwgIlhNTENEYXRhIiwgIlhNTENvbW1lbnQiLCAiWE1MRFREQXR0TGlzdCIsICJYTUxEVERFbGVtZW50IiwgIlhNTERUREVudGl0eSIsICJYTUxEVEROb3RhdGlvbiIsICJYTUxEZWNsYXJhdGlvbiIsICJYTUxEb2NUeXBlIiwgIlhNTERvY3VtZW50IiwgIlhNTERvY3VtZW50Q0IiLCAiWE1MRWxlbWVudCIsICJYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iLCAiWE1MUmF3IiwgIlhNTFN0cmluZ1dyaXRlciIsICJYTUxTdHJpbmdpZmllciIsICJYTUxUZXh0IiwgImdldFZhbHVlIiwgImlzRnVuY3Rpb24iLCAiaXNPYmplY3QiLCAiaXNQbGFpbk9iamVjdCIsICJyZWYiLCAiaGFzUHJvcCIsICJvcHRpb25zIiwgIm9uRGF0YSIsICJvbkVuZCIsICJ3cml0ZXJPcHRpb25zIiwgIm5vZGUiLCAiYXR0IiwgImF0dE5hbWUiLCAiYXR0cmlidXRlcyIsICJjaGlsZCIsICJpIiwgImxlbiIsICJyZWYxIiwgInJlZjIiLCAibmFtZSIsICJ0ZXh0IiwgIm9sZFZhbGlkYXRpb25GbGFnIiwgInJvb3QiLCAidmFsdWUiLCAiYXR0VmFsdWUiLCAidGFyZ2V0IiwgImluc1RhcmdldCIsICJpbnNWYWx1ZSIsICJ2ZXJzaW9uIiwgImVuY29kaW5nIiwgInN0YW5kYWxvbmUiLCAicHViSUQiLCAic3lzSUQiLCAiZWxlbWVudE5hbWUiLCAiYXR0cmlidXRlTmFtZSIsICJhdHRyaWJ1dGVUeXBlIiwgImRlZmF1bHRWYWx1ZVR5cGUiLCAiZGVmYXVsdFZhbHVlIiwgImNodW5rIiwgImxldmVsIiwgInJlcXVpcmVfWE1MU3RyZWFtV3JpdGVyIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiTm9kZVR5cGUiLCAiV3JpdGVyU3RhdGUiLCAiWE1MU3RyZWFtV3JpdGVyIiwgIlhNTFdyaXRlckJhc2UiLCAiZXh0ZW5kIiwgImNoaWxkIiwgInBhcmVudCIsICJrZXkiLCAiaGFzUHJvcCIsICJjdG9yIiwgInN1cGVyQ2xhc3MiLCAic3RyZWFtIiwgIm9wdGlvbnMiLCAibm9kZSIsICJsZXZlbCIsICJkb2MiLCAiaSIsICJqIiwgImsiLCAibGVuIiwgImxlbjEiLCAicmVmIiwgInJlZjEiLCAicmVzdWx0cyIsICJhdHQiLCAiY2hpbGROb2RlQ291bnQiLCAiZmlyc3RDaGlsZE5vZGUiLCAibmFtZSIsICJwcmV0dHlTdXBwcmVzc2VkIiwgImUiLCAicmVxdWlyZV9saWIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJOb2RlVHlwZSIsICJXcml0ZXJTdGF0ZSIsICJYTUxET01JbXBsZW1lbnRhdGlvbiIsICJYTUxEb2N1bWVudCIsICJYTUxEb2N1bWVudENCIiwgIlhNTFN0cmVhbVdyaXRlciIsICJYTUxTdHJpbmdXcml0ZXIiLCAiYXNzaWduIiwgImlzRnVuY3Rpb24iLCAicmVmIiwgIm5hbWUiLCAieG1sZGVjIiwgImRvY3R5cGUiLCAib3B0aW9ucyIsICJkb2MiLCAicm9vdCIsICJvbkRhdGEiLCAib25FbmQiLCAicmVmMSIsICJzdHJlYW0iLCAicmVxdWlyZV9idWlsZGVyIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJidWlsZGVyIiwgImRlZmF1bHRzIiwgImVzY2FwZUNEQVRBIiwgInJlcXVpcmVzQ0RBVEEiLCAid3JhcENEQVRBIiwgImhhc1Byb3AiLCAiZW50cnkiLCAiQnVpbGRlciIsICJvcHRzIiwgImtleSIsICJyZWYiLCAidmFsdWUiLCAicm9vdE9iaiIsICJhdHRya2V5IiwgImNoYXJrZXkiLCAicmVuZGVyIiwgInJvb3RFbGVtZW50IiwgInJvb3ROYW1lIiwgIl90aGlzIiwgImVsZW1lbnQiLCAib2JqIiwgImF0dHIiLCAiY2hpbGQiLCAiaW5kZXgiLCAicmVxdWlyZV9zYXgiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgInNheCIsICJzdHJpY3QiLCAib3B0IiwgIlNBWFBhcnNlciIsICJTQVhTdHJlYW0iLCAiY3JlYXRlU3RyZWFtIiwgImJ1ZmZlcnMiLCAicGFyc2VyIiwgImNsZWFyQnVmZmVycyIsICJTIiwgInJvb3ROUyIsICJlbWl0IiwgIm8iLCAiRiIsICJuZXdmIiwgImEiLCAiaSIsICJjaGVja0J1ZmZlckxlbmd0aCIsICJtYXhBbGxvd2VkIiwgIm1heEFjdHVhbCIsICJsIiwgImxlbiIsICJjbG9zZVRleHQiLCAiZW1pdE5vZGUiLCAiZXJyb3IiLCAibSIsICJmbHVzaEJ1ZmZlcnMiLCAiZW5kIiwgIndyaXRlIiwgIlN0cmVhbSIsICJzdHJlYW1XcmFwcyIsICJldiIsICJtZSIsICJlciIsICJoIiwgImRhdGEiLCAiU0QiLCAiY2h1bmsiLCAiaGFuZGxlciIsICJhcmdzIiwgIndoaXRlc3BhY2UiLCAibnVtYmVyIiwgImxldHRlciIsICJxdW90ZSIsICJhdHRyaWJFbmQiLCAiQ0RBVEEiLCAiRE9DVFlQRSIsICJYTUxfTkFNRVNQQUNFIiwgIlhNTE5TX05BTUVTUEFDRSIsICJjaGFyQ2xhc3MiLCAibmFtZVN0YXJ0IiwgIm5hbWVCb2R5IiwgImVudGl0eVN0YXJ0IiwgImVudGl0eUJvZHkiLCAic3RyIiwgInMiLCAiYyIsICJpc1JlZ0V4cCIsICJpcyIsICJjaGFyY2xhc3MiLCAibm90IiwgImtleSIsICJlIiwgImV2ZW50IiwgIm5vZGVUeXBlIiwgInRleHRvcHRzIiwgInRleHQiLCAic3RyaWN0RmFpbCIsICJtZXNzYWdlIiwgIm5ld1RhZyIsICJwYXJlbnQiLCAidGFnIiwgInFuYW1lIiwgIm5hbWUiLCAiYXR0cmlidXRlIiwgInF1YWxOYW1lIiwgInByZWZpeCIsICJsb2NhbCIsICJhdHRyaWIiLCAicW4iLCAib3BlblRhZyIsICJzZWxmQ2xvc2luZyIsICJwIiwgIm52IiwgInZhbHVlIiwgInVyaSIsICJjbG9zZVRhZyIsICJ0IiwgInRhZ05hbWUiLCAiY2xvc2VUbyIsICJjbG9zZSIsICJ4IiwgIm4iLCAicGFyc2VFbnRpdHkiLCAiZW50aXR5IiwgImVudGl0eUxDIiwgIm51bSIsICJudW1TdHIiLCAiYmVnaW5XaGl0ZVNwYWNlIiwgImNoYXJBdCIsICJyZXN1bHQiLCAic3RhcnRpIiwgInBhZCIsICJyZXR1cm5TdGF0ZSIsICJidWZmZXIiLCAic3RyaW5nRnJvbUNoYXJDb2RlIiwgImZsb29yIiwgImZyb21Db2RlUG9pbnQiLCAiTUFYX1NJWkUiLCAiY29kZVVuaXRzIiwgImhpZ2hTdXJyb2dhdGUiLCAibG93U3Vycm9nYXRlIiwgImluZGV4IiwgImxlbmd0aCIsICJjb2RlUG9pbnQiLCAicmVxdWlyZV9ib20iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgInN0ciIsICJyZXF1aXJlX3Byb2Nlc3NvcnMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgInByZWZpeE1hdGNoIiwgInN0ciIsICJyZXF1aXJlX3BhcnNlciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiYm9tIiwgImRlZmF1bHRzIiwgImRlZmluZVByb3BlcnR5IiwgImV2ZW50cyIsICJpc0VtcHR5IiwgInByb2Nlc3NJdGVtIiwgInByb2Nlc3NvcnMiLCAic2F4IiwgInNldEltbWVkaWF0ZSIsICJiaW5kIiwgImZuIiwgIm1lIiwgImV4dGVuZCIsICJjaGlsZCIsICJwYXJlbnQiLCAia2V5IiwgImhhc1Byb3AiLCAiY3RvciIsICJ0aGluZyIsICJpdGVtIiwgImkiLCAibGVuIiwgInByb2Nlc3MiLCAib2JqIiwgInZhbHVlIiwgImRlc2NyaXB0b3IiLCAic3VwZXJDbGFzcyIsICJQYXJzZXIiLCAib3B0cyIsICJyZWYiLCAiY2h1bmsiLCAiZXJyIiwgImVycm9yMSIsICJuZXdWYWx1ZSIsICJhdHRya2V5IiwgImNoYXJrZXkiLCAib250ZXh0IiwgInN0YWNrIiwgIl90aGlzIiwgImVycm9yIiwgIm5vZGUiLCAicHJvY2Vzc2VkS2V5IiwgImNkYXRhIiwgImVtcHR5U3RyIiwgIm5vZGVOYW1lIiwgIm9iakNsb25lIiwgIm9sZCIsICJzIiwgInhwYXRoIiwgInJlc3VsdHMiLCAidGV4dCIsICJjaGFyQ2hpbGQiLCAic3RyIiwgImNiIiwgInJlc3VsdCIsICJyZXNvbHZlIiwgInJlamVjdCIsICJhIiwgImIiLCAib3B0aW9ucyIsICJwYXJzZXIiLCAicmVxdWlyZV94bWwyanMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImJ1aWxkZXIiLCAiZGVmYXVsdHMiLCAicGFyc2VyIiwgInByb2Nlc3NvcnMiLCAiZXh0ZW5kIiwgImNoaWxkIiwgInBhcmVudCIsICJrZXkiLCAiaGFzUHJvcCIsICJjdG9yIiwgInN1cGVyQ2xhc3MiLCAiVmFsaWRhdGlvbkVycm9yIiwgIm1lc3NhZ2UiLCAicmVxdWlyZV91dGlscyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAicmVnRXhwQ2hhcnMiLCAiaGFzT3duUHJvcGVydHkiLCAiaGFzT3duIiwgIm9iaiIsICJrZXkiLCAic3RyaW5nIiwgIl9FTkNPREVfSFRNTF9SVUxFUyIsICJfTUFUQ0hfSFRNTCIsICJlbmNvZGVfY2hhciIsICJjIiwgImVzY2FwZUZ1bmNTdHIiLCAibWFya3VwIiwgImVzY2FwZVhNTFRvU3RyaW5nIiwgInRvIiwgImZyb20iLCAicCIsICJsaXN0IiwgImkiLCAidmFsIiwgInN0ciIsICJtYXRjaCIsICJvIiwgInJlcXVpcmVfcGFja2FnZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInJlcXVpcmVfZWpzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJmcyIsICJwYXRoIiwgInV0aWxzIiwgInNjb3BlT3B0aW9uV2FybmVkIiwgIl9WRVJTSU9OX1NUUklORyIsICJfREVGQVVMVF9PUEVOX0RFTElNSVRFUiIsICJfREVGQVVMVF9DTE9TRV9ERUxJTUlURVIiLCAiX0RFRkFVTFRfREVMSU1JVEVSIiwgIl9ERUZBVUxUX0xPQ0FMU19OQU1FIiwgIl9OQU1FIiwgIl9SRUdFWF9TVFJJTkciLCAiX09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBIiwgIl9PUFRTX1BBU1NBQkxFX1dJVEhfREFUQV9FWFBSRVNTIiwgIl9CT00iLCAiX0pTX0lERU5USUZJRVIiLCAibmFtZSIsICJmaWxlbmFtZSIsICJpc0RpciIsICJkaXJuYW1lIiwgImV4dG5hbWUiLCAicmVzb2x2ZSIsICJpbmNsdWRlUGF0aCIsICJleHQiLCAicmVzb2x2ZVBhdGhzIiwgInBhdGhzIiwgImZpbGVQYXRoIiwgInYiLCAiZ2V0SW5jbHVkZVBhdGgiLCAib3B0aW9ucyIsICJ2aWV3cyIsICJtYXRjaCIsICJoYW5kbGVDYWNoZSIsICJ0ZW1wbGF0ZSIsICJmdW5jIiwgImhhc1RlbXBsYXRlIiwgImZpbGVMb2FkZXIiLCAidHJ5SGFuZGxlQ2FjaGUiLCAiZGF0YSIsICJjYiIsICJyZXN1bHQiLCAiZXJyIiwgInJlamVjdCIsICJpbmNsdWRlRmlsZSIsICJvcHRzIiwgImluY2x1ZGVyUmVzdWx0IiwgInJldGhyb3ciLCAic3RyIiwgImZsbm0iLCAibGluZW5vIiwgImVzYyIsICJsaW5lcyIsICJzdGFydCIsICJlbmQiLCAiY29udGV4dCIsICJsaW5lIiwgImkiLCAiY3VyciIsICJzdHJpcFNlbWkiLCAidGVtcGwiLCAiVGVtcGxhdGUiLCAiZCIsICJvIiwgImFyZ3MiLCAidmlld09wdHMiLCAidGV4dCIsICJvcHRzUGFyYW0iLCAiZGVsaW0iLCAib3BlbiIsICJjbG9zZSIsICJzcmMiLCAiZm4iLCAicHJlcGVuZGVkIiwgImFwcGVuZGVkIiwgImVzY2FwZUZuIiwgImN0b3IiLCAic2FuaXRpemVkRmlsZW5hbWUiLCAiZGVzdHJ1Y3R1cmluZyIsICJlIiwgInJldHVybmVkRm4iLCAiaW5jbHVkZSIsICJpbmNsdWRlRGF0YSIsICJiYXNlbmFtZSIsICJzZWxmIiwgIm1hdGNoZXMiLCAiYyIsICJpbmRleCIsICJjbG9zaW5nIiwgInBhdCIsICJhcnIiLCAiZmlyc3RQb3MiLCAibmV3TGluZUNvdW50IiwgImNyZWF0ZV9hcHBfZXhwb3J0cyIsICJfX2V4cG9ydCIsICJydW4iLCAiX190b0NvbW1vbkpTIiwgImltcG9ydF9mcyIsICJpbXBvcnRfb3MiLCAiaW1wb3J0X3BhdGgiLCAiaW1wb3J0X2FkbV96aXAiLCAiaW1wb3J0X21pbmltaXN0IiwgImltcG9ydF9wcm9tcHRzIiwgImVuYWJsZWQiLCAiZ2xvYmFsVmFyIiwgInN1cHBvcnRMZXZlbCIsICJGT1JDRV9DT0xPUiIsICJOT0RFX0RJU0FCTEVfQ09MT1JTIiwgIk5PX0NPTE9SIiwgIlRFUk0iLCAiQ09MT1JURVJNIiwgInZlbmRvciIsICJvcHRpb25zIiwgImtvbG9yaXN0IiwgInN0YXJ0IiwgImVuZCIsICJsZXZlbCIsICJvcGVuIiwgImNsb3NlIiwgInJlZ2V4IiwgInN0ciIsICJyZXNldCIsICJrb2xvcmlzdCIsICJib2xkIiwgImRpbSIsICJpdGFsaWMiLCAidW5kZXJsaW5lIiwgImludmVyc2UiLCAiaGlkZGVuIiwgInN0cmlrZXRocm91Z2giLCAiYmxhY2siLCAicmVkIiwgImdyZWVuIiwgInllbGxvdyIsICJibHVlIiwgIm1hZ2VudGEiLCAiY3lhbiIsICJ3aGl0ZSIsICJncmF5IiwgImxpZ2h0R3JheSIsICJsaWdodFJlZCIsICJsaWdodEdyZWVuIiwgImxpZ2h0WWVsbG93IiwgImxpZ2h0Qmx1ZSIsICJsaWdodE1hZ2VudGEiLCAibGlnaHRDeWFuIiwgImJnQmxhY2siLCAiYmdSZWQiLCAiYmdHcmVlbiIsICJiZ1llbGxvdyIsICJiZ0JsdWUiLCAiYmdNYWdlbnRhIiwgImJnQ3lhbiIsICJiZ1doaXRlIiwgImJnR3JheSIsICJiZ0xpZ2h0UmVkIiwgImJnTGlnaHRHcmVlbiIsICJiZ0xpZ2h0WWVsbG93IiwgImJnTGlnaHRCbHVlIiwgImJnTGlnaHRNYWdlbnRhIiwgImJnTGlnaHRDeWFuIiwgImJnTGlnaHRHcmF5IiwgImJpbmQiLCAiZm4iLCAidGhpc0FyZyIsICJ0b1N0cmluZyIsICJnZXRQcm90b3R5cGVPZiIsICJraW5kT2YiLCAiY2FjaGUiLCAidGhpbmciLCAic3RyIiwgImtpbmRPZlRlc3QiLCAidHlwZSIsICJ0eXBlT2ZUZXN0IiwgImlzQXJyYXkiLCAiaXNVbmRlZmluZWQiLCAiaXNCdWZmZXIiLCAidmFsIiwgImlzRnVuY3Rpb24iLCAiaXNBcnJheUJ1ZmZlciIsICJpc0FycmF5QnVmZmVyVmlldyIsICJyZXN1bHQiLCAiaXNTdHJpbmciLCAiaXNOdW1iZXIiLCAiaXNPYmplY3QiLCAiaXNCb29sZWFuIiwgImlzUGxhaW5PYmplY3QiLCAicHJvdG90eXBlIiwgImlzRGF0ZSIsICJpc0ZpbGUiLCAiaXNCbG9iIiwgImlzRmlsZUxpc3QiLCAiaXNTdHJlYW0iLCAiaXNGb3JtRGF0YSIsICJraW5kIiwgImlzVVJMU2VhcmNoUGFyYW1zIiwgImlzUmVhZGFibGVTdHJlYW0iLCAiaXNSZXF1ZXN0IiwgImlzUmVzcG9uc2UiLCAiaXNIZWFkZXJzIiwgInRyaW0iLCAiZm9yRWFjaCIsICJvYmoiLCAiZm4iLCAiYWxsT3duS2V5cyIsICJpIiwgImwiLCAia2V5cyIsICJsZW4iLCAia2V5IiwgImZpbmRLZXkiLCAiX2tleSIsICJfZ2xvYmFsIiwgImlzQ29udGV4dERlZmluZWQiLCAiY29udGV4dCIsICJtZXJnZSIsICJjYXNlbGVzcyIsICJhc3NpZ25WYWx1ZSIsICJ0YXJnZXRLZXkiLCAiZXh0ZW5kIiwgImEiLCAiYiIsICJ0aGlzQXJnIiwgImJpbmQiLCAic3RyaXBCT00iLCAiY29udGVudCIsICJpbmhlcml0cyIsICJjb25zdHJ1Y3RvciIsICJzdXBlckNvbnN0cnVjdG9yIiwgInByb3BzIiwgImRlc2NyaXB0b3JzIiwgInRvRmxhdE9iamVjdCIsICJzb3VyY2VPYmoiLCAiZGVzdE9iaiIsICJmaWx0ZXIiLCAicHJvcEZpbHRlciIsICJwcm9wIiwgIm1lcmdlZCIsICJlbmRzV2l0aCIsICJzZWFyY2hTdHJpbmciLCAicG9zaXRpb24iLCAibGFzdEluZGV4IiwgInRvQXJyYXkiLCAiYXJyIiwgImlzVHlwZWRBcnJheSIsICJUeXBlZEFycmF5IiwgImZvckVhY2hFbnRyeSIsICJpdGVyYXRvciIsICJwYWlyIiwgIm1hdGNoQWxsIiwgInJlZ0V4cCIsICJtYXRjaGVzIiwgImlzSFRNTEZvcm0iLCAidG9DYW1lbENhc2UiLCAibSIsICJwMSIsICJwMiIsICJoYXNPd25Qcm9wZXJ0eSIsICJpc1JlZ0V4cCIsICJyZWR1Y2VEZXNjcmlwdG9ycyIsICJyZWR1Y2VyIiwgInJlZHVjZWREZXNjcmlwdG9ycyIsICJkZXNjcmlwdG9yIiwgIm5hbWUiLCAicmV0IiwgImZyZWV6ZU1ldGhvZHMiLCAidmFsdWUiLCAidG9PYmplY3RTZXQiLCAiYXJyYXlPclN0cmluZyIsICJkZWxpbWl0ZXIiLCAiZGVmaW5lIiwgIm5vb3AiLCAidG9GaW5pdGVOdW1iZXIiLCAiZGVmYXVsdFZhbHVlIiwgIkFMUEhBIiwgIkRJR0lUIiwgIkFMUEhBQkVUIiwgImdlbmVyYXRlU3RyaW5nIiwgInNpemUiLCAiYWxwaGFiZXQiLCAibGVuZ3RoIiwgImlzU3BlY0NvbXBsaWFudEZvcm0iLCAidG9KU09OT2JqZWN0IiwgInN0YWNrIiwgInZpc2l0IiwgInNvdXJjZSIsICJ0YXJnZXQiLCAicmVkdWNlZFZhbHVlIiwgImlzQXN5bmNGbiIsICJpc1RoZW5hYmxlIiwgInV0aWxzX2RlZmF1bHQiLCAiQXhpb3NFcnJvciIsICJtZXNzYWdlIiwgImNvZGUiLCAiY29uZmlnIiwgInJlcXVlc3QiLCAicmVzcG9uc2UiLCAidXRpbHNfZGVmYXVsdCIsICJwcm90b3R5cGUiLCAiZGVzY3JpcHRvcnMiLCAiZXJyb3IiLCAiY3VzdG9tUHJvcHMiLCAiYXhpb3NFcnJvciIsICJvYmoiLCAicHJvcCIsICJBeGlvc0Vycm9yX2RlZmF1bHQiLCAiaW1wb3J0X2Zvcm1fZGF0YSIsICJGb3JtRGF0YV9kZWZhdWx0IiwgIkZvcm1EYXRhIiwgImlzVmlzaXRhYmxlIiwgInRoaW5nIiwgInV0aWxzX2RlZmF1bHQiLCAicmVtb3ZlQnJhY2tldHMiLCAia2V5IiwgInJlbmRlcktleSIsICJwYXRoIiwgImRvdHMiLCAidG9rZW4iLCAiaSIsICJpc0ZsYXRBcnJheSIsICJhcnIiLCAicHJlZGljYXRlcyIsICJwcm9wIiwgInRvRm9ybURhdGEiLCAib2JqIiwgImZvcm1EYXRhIiwgIm9wdGlvbnMiLCAiRm9ybURhdGFfZGVmYXVsdCIsICJvcHRpb24iLCAic291cmNlIiwgIm1ldGFUb2tlbnMiLCAidmlzaXRvciIsICJkZWZhdWx0VmlzaXRvciIsICJpbmRleGVzIiwgInVzZUJsb2IiLCAiY29udmVydFZhbHVlIiwgInZhbHVlIiwgIkF4aW9zRXJyb3JfZGVmYXVsdCIsICJlbCIsICJpbmRleCIsICJzdGFjayIsICJleHBvc2VkSGVscGVycyIsICJidWlsZCIsICJ0b0Zvcm1EYXRhX2RlZmF1bHQiLCAiZW5jb2RlIiwgInN0ciIsICJjaGFyTWFwIiwgIm1hdGNoIiwgIkF4aW9zVVJMU2VhcmNoUGFyYW1zIiwgInBhcmFtcyIsICJvcHRpb25zIiwgInRvRm9ybURhdGFfZGVmYXVsdCIsICJwcm90b3R5cGUiLCAibmFtZSIsICJ2YWx1ZSIsICJlbmNvZGVyIiwgIl9lbmNvZGUiLCAicGFpciIsICJBeGlvc1VSTFNlYXJjaFBhcmFtc19kZWZhdWx0IiwgImVuY29kZSIsICJ2YWwiLCAiYnVpbGRVUkwiLCAidXJsIiwgInBhcmFtcyIsICJvcHRpb25zIiwgIl9lbmNvZGUiLCAic2VyaWFsaXplRm4iLCAic2VyaWFsaXplZFBhcmFtcyIsICJ1dGlsc19kZWZhdWx0IiwgIkF4aW9zVVJMU2VhcmNoUGFyYW1zX2RlZmF1bHQiLCAiaGFzaG1hcmtJbmRleCIsICJJbnRlcmNlcHRvck1hbmFnZXIiLCAiZnVsZmlsbGVkIiwgInJlamVjdGVkIiwgIm9wdGlvbnMiLCAiaWQiLCAiZm4iLCAidXRpbHNfZGVmYXVsdCIsICJoIiwgIkludGVyY2VwdG9yTWFuYWdlcl9kZWZhdWx0IiwgInRyYW5zaXRpb25hbF9kZWZhdWx0IiwgImltcG9ydF91cmwiLCAiVVJMU2VhcmNoUGFyYW1zX2RlZmF1bHQiLCAidXJsIiwgIm5vZGVfZGVmYXVsdCIsICJVUkxTZWFyY2hQYXJhbXNfZGVmYXVsdCIsICJGb3JtRGF0YV9kZWZhdWx0IiwgInV0aWxzX2V4cG9ydHMiLCAiX19leHBvcnQiLCAiaGFzQnJvd3NlckVudiIsICJoYXNTdGFuZGFyZEJyb3dzZXJFbnYiLCAiaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52IiwgIm9yaWdpbiIsICJwcm9kdWN0IiwgInBsYXRmb3JtX2RlZmF1bHQiLCAidXRpbHNfZXhwb3J0cyIsICJub2RlX2RlZmF1bHQiLCAidG9VUkxFbmNvZGVkRm9ybSIsICJkYXRhIiwgIm9wdGlvbnMiLCAidG9Gb3JtRGF0YV9kZWZhdWx0IiwgInBsYXRmb3JtX2RlZmF1bHQiLCAidmFsdWUiLCAia2V5IiwgInBhdGgiLCAiaGVscGVycyIsICJ1dGlsc19kZWZhdWx0IiwgInBhcnNlUHJvcFBhdGgiLCAibmFtZSIsICJ1dGlsc19kZWZhdWx0IiwgIm1hdGNoIiwgImFycmF5VG9PYmplY3QiLCAiYXJyIiwgIm9iaiIsICJrZXlzIiwgImkiLCAibGVuIiwgImtleSIsICJmb3JtRGF0YVRvSlNPTiIsICJmb3JtRGF0YSIsICJidWlsZFBhdGgiLCAicGF0aCIsICJ2YWx1ZSIsICJ0YXJnZXQiLCAiaW5kZXgiLCAiaXNOdW1lcmljS2V5IiwgImlzTGFzdCIsICJmb3JtRGF0YVRvSlNPTl9kZWZhdWx0IiwgInN0cmluZ2lmeVNhZmVseSIsICJyYXdWYWx1ZSIsICJwYXJzZXIiLCAiZW5jb2RlciIsICJ1dGlsc19kZWZhdWx0IiwgImUiLCAiZGVmYXVsdHMiLCAidHJhbnNpdGlvbmFsX2RlZmF1bHQiLCAiZGF0YSIsICJoZWFkZXJzIiwgImNvbnRlbnRUeXBlIiwgImhhc0pTT05Db250ZW50VHlwZSIsICJpc09iamVjdFBheWxvYWQiLCAiZm9ybURhdGFUb0pTT05fZGVmYXVsdCIsICJpc0ZpbGVMaXN0IiwgInRvVVJMRW5jb2RlZEZvcm0iLCAiX0Zvcm1EYXRhIiwgInRvRm9ybURhdGFfZGVmYXVsdCIsICJ0cmFuc2l0aW9uYWwiLCAiZm9yY2VkSlNPTlBhcnNpbmciLCAiSlNPTlJlcXVlc3RlZCIsICJzdHJpY3RKU09OUGFyc2luZyIsICJBeGlvc0Vycm9yX2RlZmF1bHQiLCAicGxhdGZvcm1fZGVmYXVsdCIsICJzdGF0dXMiLCAibWV0aG9kIiwgImRlZmF1bHRzX2RlZmF1bHQiLCAiaWdub3JlRHVwbGljYXRlT2YiLCAidXRpbHNfZGVmYXVsdCIsICJwYXJzZUhlYWRlcnNfZGVmYXVsdCIsICJyYXdIZWFkZXJzIiwgInBhcnNlZCIsICJrZXkiLCAidmFsIiwgImkiLCAibGluZSIsICIkaW50ZXJuYWxzIiwgIm5vcm1hbGl6ZUhlYWRlciIsICJoZWFkZXIiLCAibm9ybWFsaXplVmFsdWUiLCAidmFsdWUiLCAidXRpbHNfZGVmYXVsdCIsICJwYXJzZVRva2VucyIsICJzdHIiLCAidG9rZW5zIiwgInRva2Vuc1JFIiwgIm1hdGNoIiwgImlzVmFsaWRIZWFkZXJOYW1lIiwgIm1hdGNoSGVhZGVyVmFsdWUiLCAiY29udGV4dCIsICJmaWx0ZXIiLCAiaXNIZWFkZXJOYW1lRmlsdGVyIiwgImZvcm1hdEhlYWRlciIsICJ3IiwgImNoYXIiLCAiYnVpbGRBY2Nlc3NvcnMiLCAib2JqIiwgImFjY2Vzc29yTmFtZSIsICJtZXRob2ROYW1lIiwgImFyZzEiLCAiYXJnMiIsICJhcmczIiwgIkF4aW9zSGVhZGVycyIsICJoZWFkZXJzIiwgInZhbHVlT3JSZXdyaXRlIiwgInJld3JpdGUiLCAic2VsZiIsICJzZXRIZWFkZXIiLCAiX3ZhbHVlIiwgIl9oZWFkZXIiLCAiX3Jld3JpdGUiLCAibEhlYWRlciIsICJrZXkiLCAic2V0SGVhZGVycyIsICJwYXJzZUhlYWRlcnNfZGVmYXVsdCIsICJwYXJzZXIiLCAibWF0Y2hlciIsICJkZWxldGVkIiwgImRlbGV0ZUhlYWRlciIsICJrZXlzIiwgImkiLCAiZm9ybWF0IiwgIm5vcm1hbGl6ZWQiLCAidGFyZ2V0cyIsICJhc1N0cmluZ3MiLCAidGhpbmciLCAiZmlyc3QiLCAiY29tcHV0ZWQiLCAidGFyZ2V0IiwgImFjY2Vzc29ycyIsICJwcm90b3R5cGUiLCAiZGVmaW5lQWNjZXNzb3IiLCAibWFwcGVkIiwgImhlYWRlclZhbHVlIiwgIkF4aW9zSGVhZGVyc19kZWZhdWx0IiwgInRyYW5zZm9ybURhdGEiLCAiZm5zIiwgInJlc3BvbnNlIiwgImNvbmZpZyIsICJkZWZhdWx0c19kZWZhdWx0IiwgImNvbnRleHQiLCAiaGVhZGVycyIsICJBeGlvc0hlYWRlcnNfZGVmYXVsdCIsICJkYXRhIiwgInV0aWxzX2RlZmF1bHQiLCAiZm4iLCAiaXNDYW5jZWwiLCAidmFsdWUiLCAiQ2FuY2VsZWRFcnJvciIsICJtZXNzYWdlIiwgImNvbmZpZyIsICJyZXF1ZXN0IiwgIkF4aW9zRXJyb3JfZGVmYXVsdCIsICJ1dGlsc19kZWZhdWx0IiwgIkNhbmNlbGVkRXJyb3JfZGVmYXVsdCIsICJzZXR0bGUiLCAicmVzb2x2ZSIsICJyZWplY3QiLCAicmVzcG9uc2UiLCAidmFsaWRhdGVTdGF0dXMiLCAiQXhpb3NFcnJvcl9kZWZhdWx0IiwgImlzQWJzb2x1dGVVUkwiLCAidXJsIiwgImNvbWJpbmVVUkxzIiwgImJhc2VVUkwiLCAicmVsYXRpdmVVUkwiLCAiYnVpbGRGdWxsUGF0aCIsICJiYXNlVVJMIiwgInJlcXVlc3RlZFVSTCIsICJpc0Fic29sdXRlVVJMIiwgImNvbWJpbmVVUkxzIiwgImltcG9ydF9wcm94eV9mcm9tX2VudiIsICJpbXBvcnRfaHR0cCIsICJpbXBvcnRfaHR0cHMiLCAiaW1wb3J0X3V0aWwiLCAiaW1wb3J0X2ZvbGxvd19yZWRpcmVjdHMiLCAiaW1wb3J0X3psaWIiLCAiVkVSU0lPTiIsICJwYXJzZVByb3RvY29sIiwgInVybCIsICJtYXRjaCIsICJEQVRBX1VSTF9QQVRURVJOIiwgImZyb21EYXRhVVJJIiwgInVyaSIsICJhc0Jsb2IiLCAib3B0aW9ucyIsICJfQmxvYiIsICJwbGF0Zm9ybV9kZWZhdWx0IiwgInByb3RvY29sIiwgInBhcnNlUHJvdG9jb2wiLCAibWF0Y2giLCAiQXhpb3NFcnJvcl9kZWZhdWx0IiwgIm1pbWUiLCAiaXNCYXNlNjQiLCAiYm9keSIsICJidWZmZXIiLCAiaW1wb3J0X3N0cmVhbSIsICJpbXBvcnRfc3RyZWFtIiwgInRocm90dGxlIiwgImZuIiwgImZyZXEiLCAidGltZXN0YW1wIiwgInRocmVzaG9sZCIsICJ0aW1lciIsICJmb3JjZSIsICJub3ciLCAidGhyb3R0bGVfZGVmYXVsdCIsICJzcGVlZG9tZXRlciIsICJzYW1wbGVzQ291bnQiLCAibWluIiwgImJ5dGVzIiwgInRpbWVzdGFtcHMiLCAiaGVhZCIsICJ0YWlsIiwgImZpcnN0U2FtcGxlVFMiLCAiY2h1bmtMZW5ndGgiLCAibm93IiwgInN0YXJ0ZWRBdCIsICJpIiwgImJ5dGVzQ291bnQiLCAicGFzc2VkIiwgInNwZWVkb21ldGVyX2RlZmF1bHQiLCAia0ludGVybmFscyIsICJBeGlvc1RyYW5zZm9ybVN0cmVhbSIsICJzdHJlYW0iLCAib3B0aW9ucyIsICJ1dGlsc19kZWZhdWx0IiwgInByb3AiLCAic291cmNlIiwgInNlbGYiLCAiaW50ZXJuYWxzIiwgIl9zcGVlZG9tZXRlciIsICJzcGVlZG9tZXRlcl9kZWZhdWx0IiwgImV2ZW50IiwgImJ5dGVzTm90aWZpZWQiLCAidGhyb3R0bGVfZGVmYXVsdCIsICJ0b3RhbEJ5dGVzIiwgImJ5dGVzVHJhbnNmZXJyZWQiLCAicHJvZ3Jlc3NCeXRlcyIsICJyYXRlIiwgIm9uRmluaXNoIiwgInNpemUiLCAiY2h1bmsiLCAiZW5jb2RpbmciLCAiY2FsbGJhY2siLCAibWF4UmF0ZSIsICJyZWFkYWJsZUhpZ2hXYXRlck1hcmsiLCAidGltZVdpbmRvdyIsICJkaXZpZGVyIiwgImJ5dGVzVGhyZXNob2xkIiwgIm1pbkNodW5rU2l6ZSIsICJwdXNoQ2h1bmsiLCAiX2NodW5rIiwgIl9jYWxsYmFjayIsICJieXRlcyIsICJ0cmFuc2Zvcm1DaHVuayIsICJjaHVua1NpemUiLCAiY2h1bmtSZW1haW5kZXIiLCAibWF4Q2h1bmtTaXplIiwgImJ5dGVzTGVmdCIsICJwYXNzZWQiLCAibm93IiwgInRyYW5zZm9ybU5leHRDaHVuayIsICJlcnIiLCAibGVuZ3RoIiwgIkF4aW9zVHJhbnNmb3JtU3RyZWFtX2RlZmF1bHQiLCAiaW1wb3J0X2V2ZW50cyIsICJpbXBvcnRfdXRpbCIsICJpbXBvcnRfc3RyZWFtIiwgImFzeW5jSXRlcmF0b3IiLCAicmVhZEJsb2IiLCAiYmxvYiIsICJyZWFkQmxvYl9kZWZhdWx0IiwgIkJPVU5EQVJZX0FMUEhBQkVUIiwgInV0aWxzX2RlZmF1bHQiLCAidGV4dEVuY29kZXIiLCAiQ1JMRiIsICJDUkxGX0JZVEVTIiwgIkNSTEZfQllURVNfQ09VTlQiLCAiRm9ybURhdGFQYXJ0IiwgIm5hbWUiLCAidmFsdWUiLCAiZXNjYXBlTmFtZSIsICJpc1N0cmluZ1ZhbHVlIiwgImhlYWRlcnMiLCAicmVhZEJsb2JfZGVmYXVsdCIsICJtYXRjaCIsICJmb3JtRGF0YVRvU3RyZWFtIiwgImZvcm0iLCAiaGVhZGVyc0hhbmRsZXIiLCAib3B0aW9ucyIsICJ0YWciLCAic2l6ZSIsICJib3VuZGFyeSIsICJib3VuZGFyeUJ5dGVzIiwgImZvb3RlckJ5dGVzIiwgImNvbnRlbnRMZW5ndGgiLCAicGFydHMiLCAicGFydCIsICJjb21wdXRlZEhlYWRlcnMiLCAiZm9ybURhdGFUb1N0cmVhbV9kZWZhdWx0IiwgImltcG9ydF9zdHJlYW0iLCAiWmxpYkhlYWRlclRyYW5zZm9ybVN0cmVhbSIsICJzdHJlYW0iLCAiY2h1bmsiLCAiZW5jb2RpbmciLCAiY2FsbGJhY2siLCAiaGVhZGVyIiwgIlpsaWJIZWFkZXJUcmFuc2Zvcm1TdHJlYW1fZGVmYXVsdCIsICJjYWxsYmFja2lmeSIsICJmbiIsICJyZWR1Y2VyIiwgInV0aWxzX2RlZmF1bHQiLCAiYXJncyIsICJjYiIsICJ2YWx1ZSIsICJlcnIiLCAiY2FsbGJhY2tpZnlfZGVmYXVsdCIsICJ6bGliT3B0aW9ucyIsICJ6bGliIiwgImJyb3RsaU9wdGlvbnMiLCAiaXNCcm90bGlTdXBwb3J0ZWQiLCAidXRpbHNfZGVmYXVsdCIsICJodHRwRm9sbG93IiwgImh0dHBzRm9sbG93IiwgImZvbGxvd1JlZGlyZWN0cyIsICJpc0h0dHBzIiwgInN1cHBvcnRlZFByb3RvY29scyIsICJwbGF0Zm9ybV9kZWZhdWx0IiwgInByb3RvY29sIiwgImRpc3BhdGNoQmVmb3JlUmVkaXJlY3QiLCAib3B0aW9ucyIsICJyZXNwb25zZURldGFpbHMiLCAic2V0UHJveHkiLCAiY29uZmlnUHJveHkiLCAibG9jYXRpb24iLCAicHJveHkiLCAicHJveHlVcmwiLCAiYmFzZTY0IiwgInByb3h5SG9zdCIsICJyZWRpcmVjdE9wdGlvbnMiLCAiaXNIdHRwQWRhcHRlclN1cHBvcnRlZCIsICJ3cmFwQXN5bmMiLCAiYXN5bmNFeGVjdXRvciIsICJyZXNvbHZlIiwgInJlamVjdCIsICJvbkRvbmUiLCAiaXNEb25lIiwgImRvbmUiLCAidmFsdWUiLCAiaXNSZWplY3RlZCIsICJfcmVzb2x2ZSIsICJfcmVqZWN0IiwgInJlYXNvbiIsICJvbkRvbmVIYW5kbGVyIiwgInJlc29sdmVGYW1pbHkiLCAiYWRkcmVzcyIsICJmYW1pbHkiLCAiYnVpbGRBZGRyZXNzRW50cnkiLCAiaHR0cF9kZWZhdWx0IiwgImNvbmZpZyIsICJkYXRhIiwgImxvb2t1cCIsICJyZXNwb25zZVR5cGUiLCAicmVzcG9uc2VFbmNvZGluZyIsICJtZXRob2QiLCAicmVqZWN0ZWQiLCAicmVxIiwgIl9sb29rdXAiLCAiY2FsbGJhY2tpZnlfZGVmYXVsdCIsICJob3N0bmFtZSIsICJvcHQiLCAiY2IiLCAiZXJyIiwgImFyZzAiLCAiYXJnMSIsICJhZGRyZXNzZXMiLCAiYWRkciIsICJlbWl0dGVyIiwgIm9uRmluaXNoZWQiLCAiYWJvcnQiLCAiQ2FuY2VsZWRFcnJvcl9kZWZhdWx0IiwgImZ1bGxQYXRoIiwgImJ1aWxkRnVsbFBhdGgiLCAicGFyc2VkIiwgImNvbnZlcnRlZERhdGEiLCAic2V0dGxlIiwgImZyb21EYXRhVVJJIiwgIkF4aW9zRXJyb3JfZGVmYXVsdCIsICJzdHJlYW0iLCAiQXhpb3NIZWFkZXJzX2RlZmF1bHQiLCAiaGVhZGVycyIsICJWRVJTSU9OIiwgIm9uRG93bmxvYWRQcm9ncmVzcyIsICJvblVwbG9hZFByb2dyZXNzIiwgIm1heFJhdGUiLCAibWF4VXBsb2FkUmF0ZSIsICJtYXhEb3dubG9hZFJhdGUiLCAidXNlckJvdW5kYXJ5IiwgImZvcm1EYXRhVG9TdHJlYW1fZGVmYXVsdCIsICJmb3JtSGVhZGVycyIsICJrbm93bkxlbmd0aCIsICJ1dGlsIiwgInJlYWRCbG9iX2RlZmF1bHQiLCAiY29udGVudExlbmd0aCIsICJBeGlvc1RyYW5zZm9ybVN0cmVhbV9kZWZhdWx0IiwgInByb2dyZXNzIiwgImF1dGgiLCAidXNlcm5hbWUiLCAicGFzc3dvcmQiLCAidXJsVXNlcm5hbWUiLCAidXJsUGFzc3dvcmQiLCAicGF0aCIsICJidWlsZFVSTCIsICJjdXN0b21FcnIiLCAidHJhbnNwb3J0IiwgImlzSHR0cHNSZXF1ZXN0IiwgImh0dHBzIiwgImh0dHAiLCAicmVzIiwgInN0cmVhbXMiLCAicmVzcG9uc2VMZW5ndGgiLCAidHJhbnNmb3JtU3RyZWFtIiwgInJlc3BvbnNlU3RyZWFtIiwgImxhc3RSZXF1ZXN0IiwgIlpsaWJIZWFkZXJUcmFuc2Zvcm1TdHJlYW1fZGVmYXVsdCIsICJvZmZMaXN0ZW5lcnMiLCAicmVzcG9uc2UiLCAicmVzcG9uc2VCdWZmZXIiLCAidG90YWxSZXNwb25zZUJ5dGVzIiwgImNodW5rIiwgInJlc3BvbnNlRGF0YSIsICJzb2NrZXQiLCAidGltZW91dCIsICJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwgInRyYW5zaXRpb25hbCIsICJ0cmFuc2l0aW9uYWxfZGVmYXVsdCIsICJlbmRlZCIsICJlcnJvcmVkIiwgInByb2dyZXNzRXZlbnRSZWR1Y2VyX2RlZmF1bHQiLCAibGlzdGVuZXIiLCAiaXNEb3dubG9hZFN0cmVhbSIsICJmcmVxIiwgImJ5dGVzTm90aWZpZWQiLCAiX3NwZWVkb21ldGVyIiwgInNwZWVkb21ldGVyX2RlZmF1bHQiLCAidGhyb3R0bGVfZGVmYXVsdCIsICJlIiwgImxvYWRlZCIsICJ0b3RhbCIsICJwcm9ncmVzc0J5dGVzIiwgInJhdGUiLCAiaW5SYW5nZSIsICJkYXRhIiwgImlzVVJMU2FtZU9yaWdpbl9kZWZhdWx0IiwgInBsYXRmb3JtX2RlZmF1bHQiLCAibXNpZSIsICJ1cmxQYXJzaW5nTm9kZSIsICJvcmlnaW5VUkwiLCAicmVzb2x2ZVVSTCIsICJ1cmwiLCAiaHJlZiIsICJyZXF1ZXN0VVJMIiwgInBhcnNlZCIsICJ1dGlsc19kZWZhdWx0IiwgImNvb2tpZXNfZGVmYXVsdCIsICJwbGF0Zm9ybV9kZWZhdWx0IiwgIm5hbWUiLCAidmFsdWUiLCAiZXhwaXJlcyIsICJwYXRoIiwgImRvbWFpbiIsICJzZWN1cmUiLCAiY29va2llIiwgInV0aWxzX2RlZmF1bHQiLCAibWF0Y2giLCAiaGVhZGVyc1RvT2JqZWN0IiwgInRoaW5nIiwgIkF4aW9zSGVhZGVyc19kZWZhdWx0IiwgIm1lcmdlQ29uZmlnIiwgImNvbmZpZzEiLCAiY29uZmlnMiIsICJjb25maWciLCAiZ2V0TWVyZ2VkVmFsdWUiLCAidGFyZ2V0IiwgInNvdXJjZSIsICJjYXNlbGVzcyIsICJ1dGlsc19kZWZhdWx0IiwgIm1lcmdlRGVlcFByb3BlcnRpZXMiLCAiYSIsICJiIiwgInZhbHVlRnJvbUNvbmZpZzIiLCAiZGVmYXVsdFRvQ29uZmlnMiIsICJtZXJnZURpcmVjdEtleXMiLCAicHJvcCIsICJtZXJnZU1hcCIsICJtZXJnZSIsICJjb25maWdWYWx1ZSIsICJyZXNvbHZlQ29uZmlnX2RlZmF1bHQiLCAiY29uZmlnIiwgIm5ld0NvbmZpZyIsICJtZXJnZUNvbmZpZyIsICJkYXRhIiwgIndpdGhYU1JGVG9rZW4iLCAieHNyZkhlYWRlck5hbWUiLCAieHNyZkNvb2tpZU5hbWUiLCAiaGVhZGVycyIsICJhdXRoIiwgIkF4aW9zSGVhZGVyc19kZWZhdWx0IiwgImJ1aWxkVVJMIiwgImJ1aWxkRnVsbFBhdGgiLCAiY29udGVudFR5cGUiLCAidXRpbHNfZGVmYXVsdCIsICJwbGF0Zm9ybV9kZWZhdWx0IiwgInR5cGUiLCAidG9rZW5zIiwgInRva2VuIiwgImlzVVJMU2FtZU9yaWdpbl9kZWZhdWx0IiwgInhzcmZWYWx1ZSIsICJjb29raWVzX2RlZmF1bHQiLCAiaXNYSFJBZGFwdGVyU3VwcG9ydGVkIiwgInhocl9kZWZhdWx0IiwgImNvbmZpZyIsICJyZXNvbHZlIiwgInJlamVjdCIsICJfY29uZmlnIiwgInJlc29sdmVDb25maWdfZGVmYXVsdCIsICJyZXF1ZXN0RGF0YSIsICJyZXF1ZXN0SGVhZGVycyIsICJBeGlvc0hlYWRlcnNfZGVmYXVsdCIsICJyZXNwb25zZVR5cGUiLCAib25DYW5jZWxlZCIsICJkb25lIiwgInJlcXVlc3QiLCAib25sb2FkZW5kIiwgInJlc3BvbnNlSGVhZGVycyIsICJyZXNwb25zZSIsICJzZXR0bGUiLCAidmFsdWUiLCAiZXJyIiwgIkF4aW9zRXJyb3JfZGVmYXVsdCIsICJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwgInRyYW5zaXRpb25hbCIsICJ0cmFuc2l0aW9uYWxfZGVmYXVsdCIsICJ1dGlsc19kZWZhdWx0IiwgInZhbCIsICJrZXkiLCAicHJvZ3Jlc3NFdmVudFJlZHVjZXJfZGVmYXVsdCIsICJjYW5jZWwiLCAiQ2FuY2VsZWRFcnJvcl9kZWZhdWx0IiwgInByb3RvY29sIiwgInBhcnNlUHJvdG9jb2wiLCAicGxhdGZvcm1fZGVmYXVsdCIsICJjb21wb3NlU2lnbmFscyIsICJzaWduYWxzIiwgInRpbWVvdXQiLCAiY29udHJvbGxlciIsICJhYm9ydGVkIiwgIm9uYWJvcnQiLCAiY2FuY2VsIiwgInVuc3Vic2NyaWJlIiwgImVyciIsICJBeGlvc0Vycm9yX2RlZmF1bHQiLCAiQ2FuY2VsZWRFcnJvcl9kZWZhdWx0IiwgInRpbWVyIiwgInNpZ25hbCIsICJjb21wb3NlU2lnbmFsc19kZWZhdWx0IiwgInN0cmVhbUNodW5rIiwgImNodW5rIiwgImNodW5rU2l6ZSIsICJsZW4iLCAicG9zIiwgImVuZCIsICJyZWFkQnl0ZXMiLCAiaXRlcmFibGUiLCAiZW5jb2RlIiwgInRyYWNrU3RyZWFtIiwgInN0cmVhbSIsICJvblByb2dyZXNzIiwgIm9uRmluaXNoIiwgIml0ZXJhdG9yIiwgImJ5dGVzIiwgImNvbnRyb2xsZXIiLCAiZG9uZSIsICJ2YWx1ZSIsICJyZWFzb24iLCAiZmV0Y2hQcm9ncmVzc0RlY29yYXRvciIsICJ0b3RhbCIsICJmbiIsICJsZW5ndGhDb21wdXRhYmxlIiwgImxvYWRlZCIsICJpc0ZldGNoU3VwcG9ydGVkIiwgImlzUmVhZGFibGVTdHJlYW1TdXBwb3J0ZWQiLCAiZW5jb2RlVGV4dCIsICJlbmNvZGVyIiwgInN0ciIsICJzdXBwb3J0c1JlcXVlc3RTdHJlYW0iLCAiZHVwbGV4QWNjZXNzZWQiLCAiaGFzQ29udGVudFR5cGUiLCAicGxhdGZvcm1fZGVmYXVsdCIsICJERUZBVUxUX0NIVU5LX1NJWkUiLCAic3VwcG9ydHNSZXNwb25zZVN0cmVhbSIsICJ1dGlsc19kZWZhdWx0IiwgInJlc29sdmVycyIsICJyZXMiLCAidHlwZSIsICJfIiwgImNvbmZpZyIsICJBeGlvc0Vycm9yX2RlZmF1bHQiLCAiZ2V0Qm9keUxlbmd0aCIsICJib2R5IiwgInJlc29sdmVCb2R5TGVuZ3RoIiwgImhlYWRlcnMiLCAibGVuZ3RoIiwgImZldGNoX2RlZmF1bHQiLCAidXJsIiwgIm1ldGhvZCIsICJkYXRhIiwgInNpZ25hbCIsICJjYW5jZWxUb2tlbiIsICJ0aW1lb3V0IiwgIm9uRG93bmxvYWRQcm9ncmVzcyIsICJvblVwbG9hZFByb2dyZXNzIiwgInJlc3BvbnNlVHlwZSIsICJ3aXRoQ3JlZGVudGlhbHMiLCAiZmV0Y2hPcHRpb25zIiwgInJlc29sdmVDb25maWdfZGVmYXVsdCIsICJjb21wb3NlZFNpZ25hbCIsICJzdG9wVGltZW91dCIsICJjb21wb3NlU2lnbmFsc19kZWZhdWx0IiwgImZpbmlzaGVkIiwgInJlcXVlc3QiLCAib25GaW5pc2giLCAicmVxdWVzdENvbnRlbnRMZW5ndGgiLCAiX3JlcXVlc3QiLCAiY29udGVudFR5cGVIZWFkZXIiLCAidHJhY2tTdHJlYW0iLCAicHJvZ3Jlc3NFdmVudFJlZHVjZXJfZGVmYXVsdCIsICJyZXNwb25zZSIsICJpc1N0cmVhbVJlc3BvbnNlIiwgIm9wdGlvbnMiLCAicHJvcCIsICJyZXNwb25zZUNvbnRlbnRMZW5ndGgiLCAicmVzcG9uc2VEYXRhIiwgInJlc29sdmUiLCAicmVqZWN0IiwgInNldHRsZSIsICJBeGlvc0hlYWRlcnNfZGVmYXVsdCIsICJlcnIiLCAia25vd25BZGFwdGVycyIsICJodHRwX2RlZmF1bHQiLCAieGhyX2RlZmF1bHQiLCAiZmV0Y2hfZGVmYXVsdCIsICJ1dGlsc19kZWZhdWx0IiwgImZuIiwgInZhbHVlIiwgInJlbmRlclJlYXNvbiIsICJyZWFzb24iLCAiaXNSZXNvbHZlZEhhbmRsZSIsICJhZGFwdGVyIiwgImFkYXB0ZXJzX2RlZmF1bHQiLCAiYWRhcHRlcnMiLCAibGVuZ3RoIiwgIm5hbWVPckFkYXB0ZXIiLCAicmVqZWN0ZWRSZWFzb25zIiwgImkiLCAiaWQiLCAiQXhpb3NFcnJvcl9kZWZhdWx0IiwgInJlYXNvbnMiLCAic3RhdGUiLCAicyIsICJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwgImNvbmZpZyIsICJDYW5jZWxlZEVycm9yX2RlZmF1bHQiLCAiZGlzcGF0Y2hSZXF1ZXN0IiwgIkF4aW9zSGVhZGVyc19kZWZhdWx0IiwgInRyYW5zZm9ybURhdGEiLCAiYWRhcHRlcnNfZGVmYXVsdCIsICJkZWZhdWx0c19kZWZhdWx0IiwgInJlc3BvbnNlIiwgInJlYXNvbiIsICJpc0NhbmNlbCIsICJ2YWxpZGF0b3JzIiwgInR5cGUiLCAiaSIsICJ0aGluZyIsICJkZXByZWNhdGVkV2FybmluZ3MiLCAidmFsaWRhdG9yIiwgInZlcnNpb24iLCAibWVzc2FnZSIsICJmb3JtYXRNZXNzYWdlIiwgIm9wdCIsICJkZXNjIiwgIlZFUlNJT04iLCAidmFsdWUiLCAib3B0cyIsICJBeGlvc0Vycm9yX2RlZmF1bHQiLCAiYXNzZXJ0T3B0aW9ucyIsICJvcHRpb25zIiwgInNjaGVtYSIsICJhbGxvd1Vua25vd24iLCAia2V5cyIsICJyZXN1bHQiLCAidmFsaWRhdG9yX2RlZmF1bHQiLCAidmFsaWRhdG9ycyIsICJ2YWxpZGF0b3JfZGVmYXVsdCIsICJBeGlvcyIsICJpbnN0YW5jZUNvbmZpZyIsICJJbnRlcmNlcHRvck1hbmFnZXJfZGVmYXVsdCIsICJjb25maWdPclVybCIsICJjb25maWciLCAiZXJyIiwgImR1bW15IiwgInN0YWNrIiwgIm1lcmdlQ29uZmlnIiwgInRyYW5zaXRpb25hbCIsICJwYXJhbXNTZXJpYWxpemVyIiwgImhlYWRlcnMiLCAidXRpbHNfZGVmYXVsdCIsICJjb250ZXh0SGVhZGVycyIsICJtZXRob2QiLCAiQXhpb3NIZWFkZXJzX2RlZmF1bHQiLCAicmVxdWVzdEludGVyY2VwdG9yQ2hhaW4iLCAic3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzIiwgImludGVyY2VwdG9yIiwgInJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiIsICJwcm9taXNlIiwgImkiLCAibGVuIiwgImNoYWluIiwgImRpc3BhdGNoUmVxdWVzdCIsICJuZXdDb25maWciLCAib25GdWxmaWxsZWQiLCAib25SZWplY3RlZCIsICJlcnJvciIsICJmdWxsUGF0aCIsICJidWlsZEZ1bGxQYXRoIiwgImJ1aWxkVVJMIiwgInVybCIsICJnZW5lcmF0ZUhUVFBNZXRob2QiLCAiaXNGb3JtIiwgImRhdGEiLCAiQXhpb3NfZGVmYXVsdCIsICJDYW5jZWxUb2tlbiIsICJfQ2FuY2VsVG9rZW4iLCAiZXhlY3V0b3IiLCAicmVzb2x2ZVByb21pc2UiLCAicmVzb2x2ZSIsICJ0b2tlbiIsICJjYW5jZWwiLCAiaSIsICJvbmZ1bGZpbGxlZCIsICJfcmVzb2x2ZSIsICJwcm9taXNlIiwgIm1lc3NhZ2UiLCAiY29uZmlnIiwgInJlcXVlc3QiLCAiQ2FuY2VsZWRFcnJvcl9kZWZhdWx0IiwgImxpc3RlbmVyIiwgImluZGV4IiwgImMiLCAiQ2FuY2VsVG9rZW5fZGVmYXVsdCIsICJzcHJlYWQiLCAiY2FsbGJhY2siLCAiYXJyIiwgImlzQXhpb3NFcnJvciIsICJwYXlsb2FkIiwgInV0aWxzX2RlZmF1bHQiLCAiSHR0cFN0YXR1c0NvZGUiLCAia2V5IiwgInZhbHVlIiwgIkh0dHBTdGF0dXNDb2RlX2RlZmF1bHQiLCAiY3JlYXRlSW5zdGFuY2UiLCAiZGVmYXVsdENvbmZpZyIsICJjb250ZXh0IiwgIkF4aW9zX2RlZmF1bHQiLCAiaW5zdGFuY2UiLCAiYmluZCIsICJ1dGlsc19kZWZhdWx0IiwgImluc3RhbmNlQ29uZmlnIiwgIm1lcmdlQ29uZmlnIiwgImF4aW9zIiwgImRlZmF1bHRzX2RlZmF1bHQiLCAiQ2FuY2VsZWRFcnJvcl9kZWZhdWx0IiwgIkNhbmNlbFRva2VuX2RlZmF1bHQiLCAiaXNDYW5jZWwiLCAiVkVSU0lPTiIsICJ0b0Zvcm1EYXRhX2RlZmF1bHQiLCAiQXhpb3NFcnJvcl9kZWZhdWx0IiwgInByb21pc2VzIiwgInNwcmVhZCIsICJpc0F4aW9zRXJyb3IiLCAiQXhpb3NIZWFkZXJzX2RlZmF1bHQiLCAidGhpbmciLCAiZm9ybURhdGFUb0pTT05fZGVmYXVsdCIsICJhZGFwdGVyc19kZWZhdWx0IiwgIkh0dHBTdGF0dXNDb2RlX2RlZmF1bHQiLCAiYXhpb3NfZGVmYXVsdCIsICJBeGlvcyIsICJBeGlvc0Vycm9yIiwgIkNhbmNlbGVkRXJyb3IiLCAiaXNDYW5jZWwiLCAiQ2FuY2VsVG9rZW4iLCAiVkVSU0lPTiIsICJhbGwiLCAiQ2FuY2VsIiwgImlzQXhpb3NFcnJvciIsICJzcHJlYWQiLCAidG9Gb3JtRGF0YSIsICJBeGlvc0hlYWRlcnMiLCAiSHR0cFN0YXR1c0NvZGUiLCAiZm9ybVRvSlNPTiIsICJnZXRBZGFwdGVyIiwgIm1lcmdlQ29uZmlnIiwgImF4aW9zX2RlZmF1bHQiLCAiaW1wb3J0X2ZpbGVfZXhpc3RzIiwgImltcG9ydF9kZWJ1ZyIsICJpbXBvcnRfY2hpbGRfcHJvY2VzcyIsICJpbXBvcnRfcHJvbWlzZV9kZWZlcnJlZCIsICJpbXBvcnRfbm9kZV9ldmVudHMiLCAicGF0aHNwZWMiLCAicGF0aHMiLCAia2V5IiwgImNhY2hlIiwgImlzUGF0aFNwZWMiLCAicGF0aCIsICJ0b1BhdGhzIiwgInBhdGhTcGVjIiwgImluaXRfcGF0aHNwZWMiLCAiX19lc20iLCAiR2l0RXJyb3IiLCAiaW5pdF9naXRfZXJyb3IiLCAidGFzayIsICJtZXNzYWdlIiwgIkdpdFJlc3BvbnNlRXJyb3IiLCAiaW5pdF9naXRfcmVzcG9uc2VfZXJyb3IiLCAiZ2l0IiwgIlRhc2tDb25maWd1cmF0aW9uRXJyb3IiLCAiaW5pdF90YXNrX2NvbmZpZ3VyYXRpb25fZXJyb3IiLCAiYXNGdW5jdGlvbiIsICJzb3VyY2UiLCAiTk9PUCIsICJpc1VzZXJGdW5jdGlvbiIsICJzcGxpdE9uIiwgImlucHV0IiwgImNoYXIiLCAiaW5kZXgiLCAiZmlyc3QiLCAib2Zmc2V0IiwgImlzQXJyYXlMaWtlIiwgImxhc3QiLCAidG9MaW5lc1dpdGhDb250ZW50IiwgInRyaW1tZWQiLCAic2VwYXJhdG9yIiwgIm91dHB1dCIsICJsaW5lIiwgImxpbmVDb250ZW50IiwgImZvckVhY2hMaW5lV2l0aENvbnRlbnQiLCAiY2FsbGJhY2siLCAiZm9sZGVyRXhpc3RzIiwgImFwcGVuZCIsICJ0YXJnZXQiLCAiaXRlbSIsICJpbmNsdWRpbmciLCAicmVtb3ZlIiwgImFzQXJyYXkiLCAiYXNDYW1lbENhc2UiLCAic3RyIiwgIl9hbGwiLCAiY2hyIiwgImFzU3RyaW5nQXJyYXkiLCAiYXNOdW1iZXIiLCAib25OYU4iLCAibnVtIiwgInByZWZpeGVkQXJyYXkiLCAicHJlZml4IiwgImkiLCAibWF4IiwgImJ1ZmZlclRvU3RyaW5nIiwgInBpY2siLCAicHJvcGVydGllcyIsICJwcm9wZXJ0eSIsICJkZWxheSIsICJkdXJhdGlvbiIsICJkb25lIiwgIm9yVm9pZCIsICJOVUxMIiwgIm9iamVjdFRvU3RyaW5nIiwgImluaXRfdXRpbCIsICJmaWx0ZXJUeXBlIiwgImZpbHRlciIsICJkZWYiLCAiZmlsdGVyUHJpbWl0aXZlcyIsICJvbWl0IiwgInR5cGUiLCAiZmlsdGVyUGxhaW5PYmplY3QiLCAiZmlsdGVyRnVuY3Rpb24iLCAiZmlsdGVyQXJyYXkiLCAiZmlsdGVyU3RyaW5nIiwgImZpbHRlclN0cmluZ0FycmF5IiwgImZpbHRlclN0cmluZ09yU3RyaW5nQXJyYXkiLCAiZmlsdGVySGFzTGVuZ3RoIiwgImluaXRfYXJndW1lbnRfZmlsdGVycyIsICJFeGl0Q29kZXMiLCAiaW5pdF9leGl0X2NvZGVzIiwgIkdpdE91dHB1dFN0cmVhbXMiLCAiaW5pdF9naXRfb3V0cHV0X3N0cmVhbXMiLCAic3RkT3V0IiwgInN0ZEVyciIsICJMaW5lUGFyc2VyIiwgIlJlbW90ZUxpbmVQYXJzZXIiLCAiaW5pdF9saW5lX3BhcnNlciIsICJyZWdFeHAiLCAidXNlTWF0Y2hlcyIsICJyZWciLCAibWF0Y2giLCAibWF0Y2hlZCIsICJfaW5kZXgiLCAiY3JlYXRlSW5zdGFuY2VDb25maWciLCAib3B0aW9ucyIsICJiYXNlRGlyIiwgImNvbmZpZyIsICJfX3NwcmVhZFZhbHVlcyIsICJkZWZhdWx0T3B0aW9ucyIsICJvIiwgImluaXRfc2ltcGxlX2dpdF9vcHRpb25zIiwgImFwcGVuZFRhc2tPcHRpb25zIiwgImNvbW1hbmRzIiwgInZhbHVlIiwgImdldFRyYWlsaW5nT3B0aW9ucyIsICJhcmdzIiwgImluaXRpYWxQcmltaXRpdmUiLCAib2JqZWN0T25seSIsICJjb21tYW5kIiwgInRyYWlsaW5nT3B0aW9uc0FyZ3VtZW50IiwgInRyYWlsaW5nQXJyYXlBcmd1bWVudCIsICJoYXNUcmFpbGluZ0NhbGxiYWNrIiwgInRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudCIsICJpbmNsdWRlTm9vcCIsICJpbml0X3Rhc2tfb3B0aW9ucyIsICJjYWxsVGFza1BhcnNlciIsICJwYXJzZXIiLCAic3RyZWFtcyIsICJwYXJzZVN0cmluZ1Jlc3BvbnNlIiwgInJlc3VsdCIsICJwYXJzZXJzIiwgInRleHRzIiwgInRyaW0iLCAidGV4dCIsICJsaW5lcyIsICJwYXJzZSIsICJpbml0X3Rhc2tfcGFyc2VyIiwgInV0aWxzX2V4cG9ydHMiLCAiX19leHBvcnQiLCAiaW5pdF91dGlscyIsICJjaGVja19pc19yZXBvX2V4cG9ydHMiLCAiQ2hlY2tSZXBvQWN0aW9ucyIsICJjaGVja0lzQmFyZVJlcG9UYXNrIiwgImNoZWNrSXNSZXBvUm9vdFRhc2siLCAiY2hlY2tJc1JlcG9UYXNrIiwgImFjdGlvbiIsICJvbkVycm9yIiwgImlzTm90UmVwb01lc3NhZ2UiLCAiZXJyb3IiLCAiaW5pdF9jaGVja19pc19yZXBvIiwgImV4aXRDb2RlIiwgImZhaWwiLCAiY2xlYW5TdW1tYXJ5UGFyc2VyIiwgImRyeVJ1biIsICJzdW1tYXJ5IiwgIkNsZWFuUmVzcG9uc2UiLCAicmVnZXhwIiwgImRyeVJ1blJlbW92YWxSZWdleHAiLCAicmVtb3ZhbFJlZ2V4cCIsICJyZW1vdmVkIiwgImlzRm9sZGVyUmVnZXhwIiwgImluaXRfQ2xlYW5TdW1tYXJ5IiwgInRhc2tfZXhwb3J0cyIsICJFTVBUWV9DT01NQU5EUyIsICJhZGhvY0V4ZWNUYXNrIiwgImNvbmZpZ3VyYXRpb25FcnJvclRhc2siLCAiaXNCdWZmZXJUYXNrIiwgImlzRW1wdHlUYXNrIiwgInN0cmFpZ2h0VGhyb3VnaEJ1ZmZlclRhc2siLCAic3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayIsICJidWZmZXIiLCAiaW5pdF90YXNrIiwgImNsZWFuX2V4cG9ydHMiLCAiQ09ORklHX0VSUk9SX0lOVEVSQUNUSVZFX01PREUiLCAiQ09ORklHX0VSUk9SX01PREVfUkVRVUlSRUQiLCAiQ09ORklHX0VSUk9SX1VOS05PV05fT1BUSU9OIiwgIkNsZWFuT3B0aW9ucyIsICJjbGVhblRhc2siLCAiY2xlYW5XaXRoT3B0aW9uc1Rhc2siLCAiaXNDbGVhbk9wdGlvbnNBcnJheSIsICJtb2RlIiwgImN1c3RvbUFyZ3MiLCAiY2xlYW5Nb2RlIiwgInZhbGlkIiwgImdldENsZWFuT3B0aW9ucyIsICJpc0ludGVyYWN0aXZlTW9kZSIsICJ0ZXN0IiwgIkNsZWFuT3B0aW9uVmFsdWVzIiwgImlzQ2xlYW5Nb2RlIiwgImlzS25vd25PcHRpb24iLCAib3B0aW9uIiwgImluaXRfY2xlYW4iLCAiY29uZmlnTGlzdFBhcnNlciIsICJDb25maWdMaXN0IiwgImNvbmZpZ1BhcnNlciIsICJjb25maWdHZXRQYXJzZXIiLCAidmFsdWVzIiwgInNjb3BlcyIsICJjb25maWdGaWxlUGF0aCIsICJmaWxlUGF0aCIsICJyZXF1ZXN0ZWRLZXkiLCAiZmlsZSIsICJpbml0X0NvbmZpZ0xpc3QiLCAiYWxsIiwgImxhdGVzdCIsICJhc0NvbmZpZ1Njb3BlIiwgInNjb3BlIiwgImZhbGxiYWNrIiwgIkdpdENvbmZpZ1Njb3BlIiwgImFkZENvbmZpZ1Rhc2siLCAiZ2V0Q29uZmlnVGFzayIsICJsaXN0Q29uZmlnVGFzayIsICJjb25maWdfZGVmYXVsdCIsICJyZXN0IiwgImluaXRfY29uZmlnIiwgImlzRGlmZk5hbWVTdGF0dXMiLCAiZGlmZk5hbWVTdGF0dXMiLCAiRGlmZk5hbWVTdGF0dXMiLCAiaW5pdF9kaWZmX25hbWVfc3RhdHVzIiwgImdyZXBRdWVyeUJ1aWxkZXIiLCAicGFyYW1zIiwgIkdyZXBRdWVyeSIsICJwYXJzZUdyZXAiLCAiZ3JlcCIsICJyZXN1bHRzIiwgInByZXZpZXciLCAiZ3JlcF9kZWZhdWx0IiwgInNlYXJjaFRlcm0iLCAidGhlbiIsICJkaXNhbGxvd2VkT3B0aW9ucyIsICJRdWVyeSIsICJfYSIsICJpbml0X2dyZXAiLCAicXVlcnkiLCAiYW5kIiwgInBhcmFtIiwgInJlc2V0X2V4cG9ydHMiLCAiUmVzZXRNb2RlIiwgImdldFJlc2V0TW9kZSIsICJyZXNldFRhc2siLCAiaXNWYWxpZFJlc2V0TW9kZSIsICJSZXNldE1vZGVzIiwgImluaXRfcmVzZXQiLCAiY3JlYXRlTG9nIiwgImRlYnVnIiwgInByZWZpeGVkTG9nZ2VyIiwgInRvIiwgImZvcndhcmQiLCAiY2hpbGRMb2dnZXJOYW1lIiwgIm5hbWUiLCAiY2hpbGREZWJ1Z2dlciIsICJwYXJlbnROYW1lc3BhY2UiLCAiY2hpbGROYW1lc3BhY2UiLCAiY3JlYXRlTG9nZ2VyIiwgImxhYmVsIiwgInZlcmJvc2UiLCAiaW5pdGlhbFN0ZXAiLCAiaW5mb0RlYnVnZ2VyIiwgImxhYmVsUHJlZml4IiwgInNwYXduZWQiLCAiZGVidWdEZWJ1Z2dlciIsICJzdGVwIiwgInNpYmxpbmciLCAiaW5pdGlhbCIsICJwaGFzZSIsICJzdGVwUHJlZml4IiwgImluZm8iLCAiaW5pdF9naXRfbG9nZ2VyIiwgIl9UYXNrc1BlbmRpbmdRdWV1ZSIsICJUYXNrc1BlbmRpbmdRdWV1ZSIsICJpbml0X3Rhc2tzX3BlbmRpbmdfcXVldWUiLCAibG9nTGFiZWwiLCAibG9nZ2VyIiwgInByb2dyZXNzIiwgImVyciIsICJwbHVnaW5Db250ZXh0IiwgIm9uRXJyb3JSZWNlaXZlZCIsICJvbkRhdGFSZWNlaXZlZCIsICJHaXRFeGVjdXRvckNoYWluIiwgImluaXRfZ2l0X2V4ZWN1dG9yX2NoYWluIiwgIl9leGVjdXRvciIsICJfc2NoZWR1bGVyIiwgIl9wbHVnaW5zIiwgImN3ZCIsICJfX2FzeW5jIiwgIm9uU2NoZWR1bGVDb21wbGV0ZSIsICJvblF1ZXVlQ29tcGxldGUiLCAiZSIsICJnaXRFcnJvciIsICJiaW5hcnkiLCAicmF3IiwgIm91dHB1dFN0cmVhbXMiLCAicmVqZWN0aW9uIiwgIm5ld1N0ZE91dCIsICJvdXRwdXRIYW5kbGVyIiwgIm91dHB1dExvZ2dlciIsICJzcGF3bk9wdGlvbnMiLCAiX19zcHJlYWRQcm9wcyIsICJyZWFzb24iLCAiZ2l0X2V4ZWN1dG9yX2V4cG9ydHMiLCAiR2l0RXhlY3V0b3IiLCAiaW5pdF9naXRfZXhlY3V0b3IiLCAidGFza0NhbGxiYWNrIiwgInJlc3BvbnNlIiwgIm9uU3VjY2VzcyIsICJkYXRhIiwgImFkZERlcHJlY2F0aW9uTm90aWNlVG9FcnJvciIsICJsb2ciLCAiZGVzY3JpcHRvclJlZHVjZXIiLCAiaW5pdF90YXNrX2NhbGxiYWNrIiwgImNoYW5nZVdvcmtpbmdEaXJlY3RvcnlUYXNrIiwgImRpcmVjdG9yeSIsICJyb290IiwgImluc3RhbmNlIiwgImluaXRfY2hhbmdlX3dvcmtpbmdfZGlyZWN0b3J5IiwgImNoZWNrb3V0VGFzayIsICJjaGVja291dF9kZWZhdWx0IiwgImJyYW5jaE5hbWUiLCAic3RhcnRQb2ludCIsICJpbml0X2NoZWNrb3V0IiwgImNvdW50T2JqZWN0c1Jlc3BvbnNlIiwgImNvdW50X29iamVjdHNfZGVmYXVsdCIsICJpbml0X2NvdW50X29iamVjdHMiLCAicGFyc2VDb21taXRSZXN1bHQiLCAiaW5pdF9wYXJzZV9jb21taXQiLCAiYnJhbmNoIiwgImNvbW1pdCIsICJhdXRob3IiLCAicGFydHMiLCAiZW1haWwiLCAiY2hhbmdlcyIsICJpbnNlcnRpb25zIiwgImRlbGV0aW9ucyIsICJkaXJlY3Rpb24iLCAiY291bnQiLCAiY29tbWl0VGFzayIsICJmaWxlcyIsICJjb21taXRfZGVmYXVsdCIsICJuZXh0IiwgInJlamVjdERlcHJlY2F0ZWRTaWduYXR1cmVzIiwgImluaXRfY29tbWl0IiwgImZpcnN0X2NvbW1pdF9kZWZhdWx0IiwgImluaXRfZmlyc3RfY29tbWl0IiwgImhhc2hPYmplY3RUYXNrIiwgIndyaXRlIiwgImluaXRfaGFzaF9vYmplY3QiLCAicGFyc2VJbml0IiwgImJhcmUiLCAiaW5pdFJlc3BvbnNlUmVnZXgiLCAiSW5pdFN1bW1hcnkiLCAicmVJbml0UmVzcG9uc2VSZWdleCIsICJnaXREaXIiLCAidG9rZW5zIiwgImluaXRfSW5pdFN1bW1hcnkiLCAiZXhpc3RpbmciLCAiaGFzQmFyZUNvbW1hbmQiLCAiYmFyZUNvbW1hbmQiLCAiaW5pdFRhc2siLCAiaW5pdF9pbml0IiwgImxvZ0Zvcm1hdEZyb21Db21tYW5kIiwgImZvcm1hdCIsICJsb2dGb3JtYXRSZWdleCIsICJpc0xvZ0Zvcm1hdCIsICJjdXN0b21BcmciLCAiaW5pdF9sb2dfZm9ybWF0IiwgIkRpZmZTdW1tYXJ5IiwgImluaXRfRGlmZlN1bW1hcnkiLCAiZ2V0RGlmZlBhcnNlciIsICJkaWZmU3VtbWFyeVBhcnNlcnMiLCAic3RhdFBhcnNlciIsICJudW1TdGF0UGFyc2VyIiwgIm5hbWVPbmx5UGFyc2VyIiwgIm5hbWVTdGF0dXNQYXJzZXIiLCAiaW5pdF9wYXJzZV9kaWZmX3N1bW1hcnkiLCAiYWx0ZXJhdGlvbnMiLCAiYmVmb3JlIiwgImFmdGVyIiwgImNoYW5nZWQiLCAiaW5zZXJ0ZWQiLCAiZGVsZXRlZCIsICJjaGFuZ2VzSW5zZXJ0IiwgImNoYW5nZXNEZWxldGUiLCAic3RhdHVzIiwgIl9zaW1pbGFyaXR5IiwgImZyb20iLCAiX3RvIiwgImxpbmVCdWlsZGVyIiwgImZpZWxkcyIsICJmaWVsZCIsICJjcmVhdGVMaXN0TG9nU3VtbWFyeVBhcnNlciIsICJzcGxpdHRlciIsICJTUExJVFRFUiIsICJkZWZhdWx0RmllbGROYW1lcyIsICJsb2dGb3JtYXQiLCAicGFyc2VEaWZmUmVzdWx0IiwgIlNUQVJUX0JPVU5EQVJZIiwgImxpbmVEZXRhaWwiLCAiQ09NTUlUX0JPVU5EQVJZIiwgImxpc3RMb2dMaW5lIiwgImluaXRfcGFyc2VfbGlzdF9sb2dfc3VtbWFyeSIsICJkaWZmX2V4cG9ydHMiLCAiZGlmZlN1bW1hcnlUYXNrIiwgInZhbGlkYXRlTG9nRm9ybWF0Q29uZmlnIiwgImZsYWdzIiwgImluaXRfZGlmZiIsICJwcmV0dHlGb3JtYXQiLCAiZm9ybWF0U3RyIiwgInVzZXJPcHRpb25zIiwgIm91dCIsICJleGNsdWRlT3B0aW9ucyIsICJwYXJzZUxvZ09wdGlvbnMiLCAib3B0IiwgInN1ZmZpeCIsICJtYXhDb3VudCIsICJyYW5nZU9wZXJhdG9yIiwgImxvZ1Rhc2siLCAibG9nX2RlZmF1bHQiLCAiY3JlYXRlTG9nVGFzayIsICJpbml0X2xvZyIsICJNZXJnZVN1bW1hcnlDb25mbGljdCIsICJNZXJnZVN1bW1hcnlEZXRhaWwiLCAiaW5pdF9NZXJnZVN1bW1hcnkiLCAibWV0YSIsICJQdWxsU3VtbWFyeSIsICJQdWxsRmFpbGVkU3VtbWFyeSIsICJpbml0X1B1bGxTdW1tYXJ5IiwgIm9iamVjdEVudW1lcmF0aW9uUmVzdWx0IiwgInJlbW90ZU1lc3NhZ2VzIiwgImFzT2JqZWN0Q291bnQiLCAiZGVsdGEiLCAicmVtb3RlTWVzc2FnZXNPYmplY3RQYXJzZXJzIiwgImluaXRfcGFyc2VfcmVtb3RlX29iamVjdHMiLCAiZW51bWVyYXRpb24iLCAidG90YWwiLCAicmV1c2VkIiwgInBhY2tSZXVzZWQiLCAib2JqZWN0cyIsICJwYXJzZVJlbW90ZU1lc3NhZ2VzIiwgIl9zdGRPdXQiLCAiUmVtb3RlTWVzc2FnZVN1bW1hcnkiLCAiaW5pdF9wYXJzZV9yZW1vdGVfbWVzc2FnZXMiLCAicHVsbFJlcXVlc3RVcmwiLCAidXJsIiwgInBhcnNlUHVsbEVycm9yUmVzdWx0IiwgInB1bGxFcnJvciIsICJlcnJvclBhcnNlcnMiLCAiRklMRV9VUERBVEVfUkVHRVgiLCAiU1VNTUFSWV9SRUdFWCIsICJBQ1RJT05fUkVHRVgiLCAicGFyc2VQdWxsRGV0YWlsIiwgInBhcnNlUHVsbFJlc3VsdCIsICJpbml0X3BhcnNlX3B1bGwiLCAicmVtb3RlIiwgImhhc2hMb2NhbCIsICJoYXNoUmVtb3RlIiwgImJyYW5jaExvY2FsIiwgImJyYW5jaFJlbW90ZSIsICJwYXJzZU1lcmdlUmVzdWx0IiwgInBhcnNlTWVyZ2VEZXRhaWwiLCAiaW5pdF9wYXJzZV9tZXJnZSIsICJhdXRvTWVyZ2UiLCAiZGVsZXRlUmVmIiwgIm1lcmdlVGFzayIsICJtZXJnZSIsICJpbml0X21lcmdlIiwgInB1c2hSZXN1bHRQdXNoZWRJdGVtIiwgImxvY2FsIiwgInRhZyIsICJhbHJlYWR5VXBkYXRlZCIsICJwYXJzZVB1c2hSZXN1bHQiLCAicGFyc2VQdXNoRGV0YWlsIiwgImluaXRfcGFyc2VfcHVzaCIsICJyZXBvIiwgInJlbW90ZU5hbWUiLCAicHVzaERldGFpbCIsICJyZXNwb25zZURldGFpbCIsICJwdXNoX2V4cG9ydHMiLCAicHVzaFRhZ3NUYXNrIiwgInB1c2hUYXNrIiwgInJlZiIsICJpbml0X3B1c2giLCAic2hvd19kZWZhdWx0IiwgImluaXRfc2hvdyIsICJmcm9tUGF0aFJlZ2V4IiwgIkZpbGVTdGF0dXNTdW1tYXJ5IiwgImluaXRfRmlsZVN0YXR1c1N1bW1hcnkiLCAid29ya2luZ19kaXIiLCAiZGV0YWlsIiwgInJlbmFtZWRGaWxlIiwgImluZGV4WCIsICJpbmRleFkiLCAiaGFuZGxlciIsICJjb25mbGljdHMiLCAieSIsICJzcGxpdExpbmUiLCAibGluZVN0ciIsICJ3b3JraW5nRGlyIiwgIlN0YXR1c1N1bW1hcnkiLCAicGFyc2VTdGF0dXNTdW1tYXJ5IiwgImluaXRfU3RhdHVzU3VtbWFyeSIsICJyZW5hbWVkIiwgIl9yZXN1bHQiLCAiX2ZpbGUiLCAiYWhlYWRSZWciLCAiYmVoaW5kUmVnIiwgImN1cnJlbnRSZWciLCAidHJhY2tpbmdSZWciLCAib25FbXB0eUJyYW5jaFJlZyIsICJyZWdleFJlc3VsdCIsICJsIiwgInN0YXR1c1Rhc2siLCAiYXJnIiwgImlnbm9yZWRPcHRpb25zIiwgImluaXRfc3RhdHVzIiwgInZlcnNpb25SZXNwb25zZSIsICJtYWpvciIsICJtaW5vciIsICJwYXRjaCIsICJhZ2VudCIsICJpbnN0YWxsZWQiLCAibm90SW5zdGFsbGVkUmVzcG9uc2UiLCAidmVyc2lvbl9kZWZhdWx0IiwgInZlcnNpb25QYXJzZXIiLCAiTk9UX0lOU1RBTExFRCIsICJpbml0X3ZlcnNpb24iLCAic2ltcGxlX2dpdF9hcGlfZXhwb3J0cyIsICJTaW1wbGVHaXRBcGkiLCAiaW5pdF9zaW1wbGVfZ2l0X2FwaSIsICJjaGFpbiIsICJwcm9taXNlIiwgInNjaGVkdWxlcl9leHBvcnRzIiwgIlNjaGVkdWxlciIsICJjcmVhdGVTY2hlZHVsZWRUYXNrIiwgImluaXRfc2NoZWR1bGVyIiwgImlkIiwgImNvbmN1cnJlbmN5IiwgImFwcGx5X3BhdGNoX2V4cG9ydHMiLCAiYXBwbHlQYXRjaFRhc2siLCAicGF0Y2hlcyIsICJpbml0X2FwcGx5X3BhdGNoIiwgImJyYW5jaERlbGV0aW9uU3VjY2VzcyIsICJoYXNoIiwgImJyYW5jaERlbGV0aW9uRmFpbHVyZSIsICJCcmFuY2hEZWxldGlvbkJhdGNoIiwgImluaXRfQnJhbmNoRGVsZXRlU3VtbWFyeSIsICJoYXNCcmFuY2hEZWxldGlvbkVycm9yIiwgInByb2Nlc3NFeGl0Q29kZSIsICJkZWxldGVFcnJvclJlZ2V4IiwgImRlbGV0ZVN1Y2Nlc3NSZWdleCIsICJwYXJzZUJyYW5jaERlbGV0aW9ucyIsICJpbml0X3BhcnNlX2JyYW5jaF9kZWxldGUiLCAiZGVsZXRpb24iLCAiQnJhbmNoU3VtbWFyeVJlc3VsdCIsICJpbml0X0JyYW5jaFN1bW1hcnkiLCAiZGV0YWNoZWQiLCAiYnJhbmNoU3RhdHVzIiwgInBhcnNlQnJhbmNoU3VtbWFyeSIsICJpbml0X3BhcnNlX2JyYW5jaCIsICJjdXJyZW50IiwgImJyYW5jaF9leHBvcnRzIiwgImJyYW5jaExvY2FsVGFzayIsICJicmFuY2hUYXNrIiwgImNvbnRhaW5zRGVsZXRlQnJhbmNoQ29tbWFuZCIsICJkZWxldGVCcmFuY2hUYXNrIiwgImRlbGV0ZUJyYW5jaGVzVGFzayIsICJkZWxldGVDb21tYW5kcyIsICJpc0RlbGV0ZSIsICJicmFuY2hlcyIsICJmb3JjZURlbGV0ZSIsICJfIiwgImluaXRfYnJhbmNoIiwgInBhcnNlQ2hlY2tJZ25vcmUiLCAiaW5pdF9DaGVja0lnbm9yZSIsICJjaGVja19pZ25vcmVfZXhwb3J0cyIsICJjaGVja0lnbm9yZVRhc2siLCAiaW5pdF9jaGVja19pZ25vcmUiLCAiY2xvbmVfZXhwb3J0cyIsICJjbG9uZU1pcnJvclRhc2siLCAiY2xvbmVUYXNrIiwgImRpc2FsbG93ZWRDb21tYW5kIiwgImluaXRfY2xvbmUiLCAicGFyc2VGZXRjaFJlc3VsdCIsICJpbml0X3BhcnNlX2ZldGNoIiwgInRyYWNraW5nIiwgImZldGNoX2V4cG9ydHMiLCAiZmV0Y2hUYXNrIiwgImluaXRfZmV0Y2giLCAicGFyc2VNb3ZlUmVzdWx0IiwgImluaXRfcGFyc2VfbW92ZSIsICJtb3ZlX2V4cG9ydHMiLCAibW92ZVRhc2siLCAiaW5pdF9tb3ZlIiwgInB1bGxfZXhwb3J0cyIsICJwdWxsVGFzayIsICJfZXJyb3IiLCAiX2RvbmUiLCAiaW5pdF9wdWxsIiwgInBhcnNlR2V0UmVtb3RlcyIsICJyZW1vdGVzIiwgImZvckVhY2giLCAicGFyc2VHZXRSZW1vdGVzVmVyYm9zZSIsICJwdXJwb3NlIiwgImluaXRfR2V0UmVtb3RlU3VtbWFyeSIsICJyZW1vdGVfZXhwb3J0cyIsICJhZGRSZW1vdGVUYXNrIiwgImdldFJlbW90ZXNUYXNrIiwgImxpc3RSZW1vdGVzVGFzayIsICJyZW1vdGVUYXNrIiwgInJlbW92ZVJlbW90ZVRhc2siLCAicmVtb3RlUmVwbyIsICJpbml0X3JlbW90ZSIsICJzdGFzaF9saXN0X2V4cG9ydHMiLCAic3Rhc2hMaXN0VGFzayIsICJpbml0X3N0YXNoX2xpc3QiLCAic3ViX21vZHVsZV9leHBvcnRzIiwgImFkZFN1Yk1vZHVsZVRhc2siLCAiaW5pdFN1Yk1vZHVsZVRhc2siLCAic3ViTW9kdWxlVGFzayIsICJ1cGRhdGVTdWJNb2R1bGVUYXNrIiwgImluaXRfc3ViX21vZHVsZSIsICJzaW5nbGVTb3J0ZWQiLCAiYSIsICJiIiwgImFJc051bSIsICJiSXNOdW0iLCAic29ydGVkIiwgInRvTnVtYmVyIiwgIlRhZ0xpc3QiLCAicGFyc2VUYWdMaXN0IiwgImluaXRfVGFnTGlzdCIsICJjdXN0b21Tb3J0IiwgInRhZ3MiLCAidGFnQSIsICJ0YWdCIiwgInBhcnRzQSIsICJwYXJ0c0IiLCAiZGlmZiIsICJ0YWdfZXhwb3J0cyIsICJhZGRBbm5vdGF0ZWRUYWdUYXNrIiwgImFkZFRhZ1Rhc2siLCAidGFnTGlzdFRhc2siLCAiaGFzQ3VzdG9tU29ydCIsICJ0YWdNZXNzYWdlIiwgImluaXRfdGFnIiwgInJlcXVpcmVfZ2l0IiwgIl9fY29tbW9uSlMiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiX190b0NvbW1vbkpTIiwgIkdpdCIsICJwbHVnaW5zIiwgImNyZWF0ZUNsb25lVGFzayIsICJhcGkiLCAicmVwb1BhdGgiLCAibG9jYWxQYXRoIiwgInNpbGVuY2UiLCAidGFnTmFtZSIsICJicmFuY2hOYW1lcyIsICJjcmVhdGVSZXN0Q29tbWFuZHMiLCAidXNpbmdDbGVhbk9wdGlvbnNBcnJheSIsICJwYXRobmFtZXMiLCAiY2hlY2tUeXBlIiwgIkdpdENvbnN0cnVjdEVycm9yIiwgIkdpdFBsdWdpbkVycm9yIiwgInBsdWdpbiIsICJhYm9ydFBsdWdpbiIsICJzaWduYWwiLCAiX2RhdGEiLCAiY29udGV4dCIsICJraWxsIiwgImlzQ29uZmlnU3dpdGNoIiwgInByZXZlbnRQcm90b2NvbE92ZXJyaWRlIiwgInByZXZlbnRVcGxvYWRQYWNrIiwgIm1ldGhvZCIsICJibG9ja1Vuc2FmZU9wZXJhdGlvbnNQbHVnaW4iLCAiYWxsb3dVbnNhZmVQcm90b2NvbE92ZXJyaWRlIiwgImFsbG93VW5zYWZlUGFjayIsICJjb21tYW5kQ29uZmlnUHJlZml4aW5nUGx1Z2luIiwgImNvbmZpZ3VyYXRpb24iLCAibmV2ZXIiLCAiY29tcGxldGlvbkRldGVjdGlvblBsdWdpbiIsICJvbkNsb3NlIiwgIm9uRXhpdCIsICJjcmVhdGVFdmVudHMiLCAiZXZlbnRzIiwgImNvbmZpZ3VyZVRpbWVvdXQiLCAiY29kZSIsICJmbGFnIiwgImV2ZW50IiwgInRpbWVvdXQiLCAiXzAiLCAiXzEiLCAiY2xvc2UiLCAiX2IiLCAiZGVmZXJDbG9zZSIsICJxdWlja0Nsb3NlIiwgIldST05HX05VTUJFUl9FUlIiLCAiV1JPTkdfQ0hBUlNfRVJSIiwgImlzQmFkQXJndW1lbnQiLCAidG9CaW5hcnlDb25maWciLCAiYWxsb3dVbnNhZmUiLCAiY3VzdG9tQmluYXJ5UGx1Z2luIiwgImlzVGFza0Vycm9yIiwgImdldEVycm9yTWVzc2FnZSIsICJlcnJvckRldGVjdGlvbkhhbmRsZXIiLCAib3ZlcndyaXRlIiwgImlzRXJyb3IiLCAiZXJyb3JNZXNzYWdlIiwgImVycm9yRGV0ZWN0aW9uUGx1Z2luIiwgIlBsdWdpblN0b3JlIiwgImxpc3RlbmVyIiwgImNvbnRleHR1YWwiLCAicHJvZ3Jlc3NNb25pdG9yUGx1Z2luIiwgInByb2dyZXNzQ29tbWFuZCIsICJwcm9ncmVzc01ldGhvZHMiLCAiY2h1bmsiLCAicHJvZ3Jlc3NFdmVudFN0YWdlIiwgInNwYXduT3B0aW9uc1BsdWdpbiIsICJ0aW1lb3V0UGx1Z2luIiwgImJsb2NrIiwgIndhaXQiLCAic3RvcCIsICJzdWZmaXhQYXRoc1BsdWdpbiIsICJnaXRJbnN0YW5jZUZhY3RvcnkiLCAic2ltcGxlR2l0IiwgImdpdEluc3RhbmNlRmFjdG9yeSIsICJpbXBvcnRfY2hpbGRfcHJvY2VzcyIsICJpbXBvcnRfd2hpY2giLCAiaW1wb3J0X2ZzIiwgImltcG9ydF9wYXRoIiwgImltcG9ydF9mcyIsICJhc3NlcnROdW1iZXIiLCAibiIsICJpc0J5dGVzIiwgImEiLCAiY2hhaW4iLCAiYXJncyIsICJpZCIsICJ3cmFwIiwgImIiLCAiYyIsICJlbmNvZGUiLCAieCIsICJkZWNvZGUiLCAiYWxwaGFiZXQiLCAiZGlnaXRzIiwgImlucHV0IiwgImxldHRlciIsICJpbmRleCIsICJqb2luIiwgInNlcGFyYXRvciIsICJmcm9tIiwgInRvIiwgImNvbnZlcnRSYWRpeCIsICJkYXRhIiwgImZyb20iLCAidG8iLCAicG9zIiwgInJlcyIsICJkaWdpdHMiLCAiZCIsICJjYXJyeSIsICJkb25lIiwgImkiLCAiZGlnaXQiLCAiZGlnaXRCYXNlIiwgInJvdW5kZWQiLCAicmFkaXgiLCAibnVtIiwgImJ5dGVzIiwgImlzQnl0ZXMiLCAiY29udmVydFJhZGl4IiwgImRpZ2l0cyIsICJnZW5CYXNlNTgiLCAiYWJjIiwgImNoYWluIiwgInJhZGl4IiwgImFscGhhYmV0IiwgImpvaW4iLCAiYmFzZTU4IiwgImltcG9ydF9wYXRoIiwgImltcG9ydF9pZ25vcmUiLCAiaW1wb3J0X2ZzIiwgIkRFRkFVTFRfU1JDX1JPT1QiLCAiREVGQVVMVF9ST1VURSIsICJDT05GSUdfU0lHTkFUVVJFIiwgIkRFRkFVTFRfVEFTS0RJUiIsICJkZWNvZGUiLCAiY29uZmlnIiwgIkNPTkZJR19TSUdOQVRVUkUiLCAiYmFzZTU4IiwgImVuY29kZSIsICJDb21tYW5kcyIsICJfQ29tbWFuZHMiLCAiY29tbWFuZCIsICJmaWx0ZXIiLCAiY21kcyIsICJjb21tYW5kcyIsICJjbWQiLCAiU2NhZmZvbGRseUNvbmZpZyIsICJfU2NhZmZvbGRseUNvbmZpZyIsICJiYXNlRGlyIiwgIndvcmtEaXIiLCAiY29uZmlncyIsICJtb2RlIiwgInByb2plY3RKc29uIiwgInNlcnZpY2VDb25maWciLCAic2NhZmZvbGRseSIsICJuYW1lIiwgInZlcnNpb24iLCAiaWQiLCAicmUiLCAic2FuaXRpemVkIiwgIm1hdGNoZXMiLCAicnVudGltZSIsICJoYW5kbGVyIiwgImZpbGVzIiwgInNyYyIsICJERUZBVUxUX1NSQ19ST09UIiwgImJpbiIsICJzY3JpcHRzIiwgInNlcnZpY2VzIiwgInNlcnZpY2UiLCAiaXgiLCAicm91dGVzIiwgIkRFRkFVTFRfUk9VVEUiLCAic2NyaXB0IiwgIndvcmtkaXIiLCAic2NoZWR1bGUiLCAidGFza2RpciIsICJyb290ZGlyIiwgInNoZWxsIiwgInNjaGVkdWxlcyIsICJyZXNvdXJjZXMiLCAicnVudGltZXMiLCAidGltZW91dCIsICJtZW1vcnlTaXplIiwgImlnIiwgImlnbm9yZSIsICJmaWxlbmFtZSIsICJmaWxlIiwgInBhdGgiLCAicmVsYXRpdmVQYXRoIiwgImdlbmVyYXRlZEZpbGVzIiwgInVzZXIiLCAiaW1wb3J0X3BhdGgiLCAiQWJzdHJhY3RQcm9qZWN0IiwgImdpdFNlcnZpY2UiLCAid29ya0RpciIsICJzdGFuZGFsb25lQ29uZmlnRmlsZSIsICJzY2FmZm9sZGx5Q29uZmlnIiwgInBhcnNlZCIsICJwcm9qZWN0SnNvbiIsICJTY2FmZm9sZGx5Q29uZmlnIiwgIk5vZGVQcm9qZWN0IiwgIkFic3RyYWN0UHJvamVjdCIsICJuYW1lIiwgInBhY2thZ2VKc29uRmlsZSIsICJwYWNrYWdlSnNvbiIsICJ3b3JrRGlyIiwgImlzTm90aGluZyIsICJzdWJqZWN0IiwgImlzT2JqZWN0IiwgInRvQXJyYXkiLCAic2VxdWVuY2UiLCAiZXh0ZW5kIiwgInRhcmdldCIsICJzb3VyY2UiLCAiaW5kZXgiLCAibGVuZ3RoIiwgImtleSIsICJzb3VyY2VLZXlzIiwgInJlcGVhdCIsICJzdHJpbmciLCAiY291bnQiLCAicmVzdWx0IiwgImN5Y2xlIiwgImlzTmVnYXRpdmVaZXJvIiwgIm51bWJlciIsICJpc05vdGhpbmdfMSIsICJpc09iamVjdF8xIiwgInRvQXJyYXlfMSIsICJyZXBlYXRfMSIsICJpc05lZ2F0aXZlWmVyb18xIiwgImV4dGVuZF8xIiwgImNvbW1vbiIsICJmb3JtYXRFcnJvciIsICJleGNlcHRpb24iLCAiY29tcGFjdCIsICJ3aGVyZSIsICJtZXNzYWdlIiwgIllBTUxFeGNlcHRpb24kMSIsICJyZWFzb24iLCAibWFyayIsICJnZXRMaW5lIiwgImJ1ZmZlciIsICJsaW5lU3RhcnQiLCAibGluZUVuZCIsICJwb3NpdGlvbiIsICJtYXhMaW5lTGVuZ3RoIiwgImhlYWQiLCAidGFpbCIsICJtYXhIYWxmTGVuZ3RoIiwgInBhZFN0YXJ0IiwgIm1heCIsICJtYWtlU25pcHBldCIsICJvcHRpb25zIiwgInJlIiwgImxpbmVTdGFydHMiLCAibGluZUVuZHMiLCAibWF0Y2giLCAiZm91bmRMaW5lTm8iLCAiaSIsICJsaW5lIiwgImxpbmVOb0xlbmd0aCIsICJzbmlwcGV0IiwgIlRZUEVfQ09OU1RSVUNUT1JfT1BUSU9OUyIsICJZQU1MX05PREVfS0lORFMiLCAiY29tcGlsZVN0eWxlQWxpYXNlcyIsICJtYXAiLCAic3R5bGUiLCAiYWxpYXMiLCAiVHlwZSQxIiwgInRhZyIsICJuYW1lIiwgImRhdGEiLCAidHlwZSIsICJjb21waWxlTGlzdCIsICJzY2hlbWEiLCAiY3VycmVudFR5cGUiLCAibmV3SW5kZXgiLCAicHJldmlvdXNUeXBlIiwgInByZXZpb3VzSW5kZXgiLCAiY29tcGlsZU1hcCIsICJjb2xsZWN0VHlwZSIsICJTY2hlbWEkMSIsICJkZWZpbml0aW9uIiwgImltcGxpY2l0IiwgImV4cGxpY2l0IiwgInR5cGUkMSIsICJzdHIiLCAic2VxIiwgImZhaWxzYWZlIiwgInJlc29sdmVZYW1sTnVsbCIsICJjb25zdHJ1Y3RZYW1sTnVsbCIsICJpc051bGwiLCAib2JqZWN0IiwgIl9udWxsIiwgInJlc29sdmVZYW1sQm9vbGVhbiIsICJjb25zdHJ1Y3RZYW1sQm9vbGVhbiIsICJpc0Jvb2xlYW4iLCAiYm9vbCIsICJpc0hleENvZGUiLCAiYyIsICJpc09jdENvZGUiLCAiaXNEZWNDb2RlIiwgInJlc29sdmVZYW1sSW50ZWdlciIsICJoYXNEaWdpdHMiLCAiY2giLCAiY29uc3RydWN0WWFtbEludGVnZXIiLCAidmFsdWUiLCAic2lnbiIsICJpc0ludGVnZXIiLCAiaW50IiwgIm9iaiIsICJZQU1MX0ZMT0FUX1BBVFRFUk4iLCAicmVzb2x2ZVlhbWxGbG9hdCIsICJjb25zdHJ1Y3RZYW1sRmxvYXQiLCAiU0NJRU5USUZJQ19XSVRIT1VUX0RPVCIsICJyZXByZXNlbnRZYW1sRmxvYXQiLCAicmVzIiwgImlzRmxvYXQiLCAiZmxvYXQiLCAianNvbiIsICJjb3JlIiwgIllBTUxfREFURV9SRUdFWFAiLCAiWUFNTF9USU1FU1RBTVBfUkVHRVhQIiwgInJlc29sdmVZYW1sVGltZXN0YW1wIiwgImNvbnN0cnVjdFlhbWxUaW1lc3RhbXAiLCAieWVhciIsICJtb250aCIsICJkYXkiLCAiaG91ciIsICJtaW51dGUiLCAic2Vjb25kIiwgImZyYWN0aW9uIiwgImRlbHRhIiwgInR6X2hvdXIiLCAidHpfbWludXRlIiwgImRhdGUiLCAicmVwcmVzZW50WWFtbFRpbWVzdGFtcCIsICJ0aW1lc3RhbXAiLCAicmVzb2x2ZVlhbWxNZXJnZSIsICJtZXJnZSIsICJCQVNFNjRfTUFQIiwgInJlc29sdmVZYW1sQmluYXJ5IiwgImNvZGUiLCAiaWR4IiwgImJpdGxlbiIsICJjb25zdHJ1Y3RZYW1sQmluYXJ5IiwgInRhaWxiaXRzIiwgImlucHV0IiwgImJpdHMiLCAicmVwcmVzZW50WWFtbEJpbmFyeSIsICJpc0JpbmFyeSIsICJiaW5hcnkiLCAiX2hhc093blByb3BlcnR5JDMiLCAiX3RvU3RyaW5nJDIiLCAicmVzb2x2ZVlhbWxPbWFwIiwgIm9iamVjdEtleXMiLCAicGFpciIsICJwYWlyS2V5IiwgInBhaXJIYXNLZXkiLCAiY29uc3RydWN0WWFtbE9tYXAiLCAib21hcCIsICJfdG9TdHJpbmckMSIsICJyZXNvbHZlWWFtbFBhaXJzIiwgImtleXMiLCAiY29uc3RydWN0WWFtbFBhaXJzIiwgInBhaXJzIiwgIl9oYXNPd25Qcm9wZXJ0eSQyIiwgInJlc29sdmVZYW1sU2V0IiwgImNvbnN0cnVjdFlhbWxTZXQiLCAic2V0IiwgIl9kZWZhdWx0IiwgIl9oYXNPd25Qcm9wZXJ0eSQxIiwgIkNPTlRFWFRfRkxPV19JTiIsICJDT05URVhUX0ZMT1dfT1VUIiwgIkNPTlRFWFRfQkxPQ0tfSU4iLCAiQ09OVEVYVF9CTE9DS19PVVQiLCAiQ0hPTVBJTkdfQ0xJUCIsICJDSE9NUElOR19TVFJJUCIsICJDSE9NUElOR19LRUVQIiwgIlBBVFRFUk5fTk9OX1BSSU5UQUJMRSIsICJQQVRURVJOX05PTl9BU0NJSV9MSU5FX0JSRUFLUyIsICJQQVRURVJOX0ZMT1dfSU5ESUNBVE9SUyIsICJQQVRURVJOX1RBR19IQU5ETEUiLCAiUEFUVEVSTl9UQUdfVVJJIiwgIl9jbGFzcyIsICJpc19FT0wiLCAiaXNfV0hJVEVfU1BBQ0UiLCAiaXNfV1NfT1JfRU9MIiwgImlzX0ZMT1dfSU5ESUNBVE9SIiwgImZyb21IZXhDb2RlIiwgImxjIiwgImVzY2FwZWRIZXhMZW4iLCAiZnJvbURlY2ltYWxDb2RlIiwgInNpbXBsZUVzY2FwZVNlcXVlbmNlIiwgImNoYXJGcm9tQ29kZXBvaW50IiwgInNpbXBsZUVzY2FwZUNoZWNrIiwgInNpbXBsZUVzY2FwZU1hcCIsICJTdGF0ZSQxIiwgImdlbmVyYXRlRXJyb3IiLCAic3RhdGUiLCAidGhyb3dFcnJvciIsICJ0aHJvd1dhcm5pbmciLCAiZGlyZWN0aXZlSGFuZGxlcnMiLCAiYXJncyIsICJtYWpvciIsICJtaW5vciIsICJoYW5kbGUiLCAicHJlZml4IiwgImNhcHR1cmVTZWdtZW50IiwgInN0YXJ0IiwgImVuZCIsICJjaGVja0pzb24iLCAiX3Bvc2l0aW9uIiwgIl9sZW5ndGgiLCAiX2NoYXJhY3RlciIsICJfcmVzdWx0IiwgIm1lcmdlTWFwcGluZ3MiLCAiZGVzdGluYXRpb24iLCAib3ZlcnJpZGFibGVLZXlzIiwgInF1YW50aXR5IiwgInN0b3JlTWFwcGluZ1BhaXIiLCAia2V5VGFnIiwgImtleU5vZGUiLCAidmFsdWVOb2RlIiwgInN0YXJ0TGluZSIsICJzdGFydExpbmVTdGFydCIsICJzdGFydFBvcyIsICJyZWFkTGluZUJyZWFrIiwgInNraXBTZXBhcmF0aW9uU3BhY2UiLCAiYWxsb3dDb21tZW50cyIsICJjaGVja0luZGVudCIsICJsaW5lQnJlYWtzIiwgInRlc3REb2N1bWVudFNlcGFyYXRvciIsICJ3cml0ZUZvbGRlZExpbmVzIiwgInJlYWRQbGFpblNjYWxhciIsICJub2RlSW5kZW50IiwgIndpdGhpbkZsb3dDb2xsZWN0aW9uIiwgInByZWNlZGluZyIsICJmb2xsb3dpbmciLCAiY2FwdHVyZVN0YXJ0IiwgImNhcHR1cmVFbmQiLCAiaGFzUGVuZGluZ0NvbnRlbnQiLCAiX2xpbmUiLCAiX2xpbmVTdGFydCIsICJfbGluZUluZGVudCIsICJfa2luZCIsICJyZWFkU2luZ2xlUXVvdGVkU2NhbGFyIiwgInJlYWREb3VibGVRdW90ZWRTY2FsYXIiLCAiaGV4TGVuZ3RoIiwgImhleFJlc3VsdCIsICJ0bXAiLCAicmVhZEZsb3dDb2xsZWN0aW9uIiwgInJlYWROZXh0IiwgIl9wb3MiLCAiX3RhZyIsICJfYW5jaG9yIiwgInRlcm1pbmF0b3IiLCAiaXNQYWlyIiwgImlzRXhwbGljaXRQYWlyIiwgImlzTWFwcGluZyIsICJjb21wb3NlTm9kZSIsICJyZWFkQmxvY2tTY2FsYXIiLCAiZm9sZGluZyIsICJjaG9tcGluZyIsICJkaWRSZWFkQ29udGVudCIsICJkZXRlY3RlZEluZGVudCIsICJ0ZXh0SW5kZW50IiwgImVtcHR5TGluZXMiLCAiYXRNb3JlSW5kZW50ZWQiLCAicmVhZEJsb2NrU2VxdWVuY2UiLCAiZGV0ZWN0ZWQiLCAicmVhZEJsb2NrTWFwcGluZyIsICJmbG93SW5kZW50IiwgImFsbG93Q29tcGFjdCIsICJfa2V5TGluZSIsICJfa2V5TGluZVN0YXJ0IiwgIl9rZXlQb3MiLCAiYXRFeHBsaWNpdEtleSIsICJyZWFkVGFnUHJvcGVydHkiLCAiaXNWZXJiYXRpbSIsICJpc05hbWVkIiwgInRhZ0hhbmRsZSIsICJ0YWdOYW1lIiwgInJlYWRBbmNob3JQcm9wZXJ0eSIsICJyZWFkQWxpYXMiLCAicGFyZW50SW5kZW50IiwgIm5vZGVDb250ZXh0IiwgImFsbG93VG9TZWVrIiwgImFsbG93QmxvY2tTdHlsZXMiLCAiYWxsb3dCbG9ja1NjYWxhcnMiLCAiYWxsb3dCbG9ja0NvbGxlY3Rpb25zIiwgImluZGVudFN0YXR1cyIsICJhdE5ld0xpbmUiLCAiaGFzQ29udGVudCIsICJ0eXBlSW5kZXgiLCAidHlwZVF1YW50aXR5IiwgInR5cGVMaXN0IiwgImJsb2NrSW5kZW50IiwgInJlYWREb2N1bWVudCIsICJkb2N1bWVudFN0YXJ0IiwgImRpcmVjdGl2ZU5hbWUiLCAiZGlyZWN0aXZlQXJncyIsICJoYXNEaXJlY3RpdmVzIiwgImxvYWREb2N1bWVudHMiLCAibnVsbHBvcyIsICJsb2FkQWxsJDEiLCAiaXRlcmF0b3IiLCAiZG9jdW1lbnRzIiwgImxvYWQkMSIsICJsb2FkQWxsXzEiLCAibG9hZF8xIiwgImxvYWRlciIsICJfdG9TdHJpbmciLCAiX2hhc093blByb3BlcnR5IiwgIkNIQVJfQk9NIiwgIkNIQVJfVEFCIiwgIkNIQVJfTElORV9GRUVEIiwgIkNIQVJfQ0FSUklBR0VfUkVUVVJOIiwgIkNIQVJfU1BBQ0UiLCAiQ0hBUl9FWENMQU1BVElPTiIsICJDSEFSX0RPVUJMRV9RVU9URSIsICJDSEFSX1NIQVJQIiwgIkNIQVJfUEVSQ0VOVCIsICJDSEFSX0FNUEVSU0FORCIsICJDSEFSX1NJTkdMRV9RVU9URSIsICJDSEFSX0FTVEVSSVNLIiwgIkNIQVJfQ09NTUEiLCAiQ0hBUl9NSU5VUyIsICJDSEFSX0NPTE9OIiwgIkNIQVJfRVFVQUxTIiwgIkNIQVJfR1JFQVRFUl9USEFOIiwgIkNIQVJfUVVFU1RJT04iLCAiQ0hBUl9DT01NRVJDSUFMX0FUIiwgIkNIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVCIsICJDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VUIiwgIkNIQVJfR1JBVkVfQUNDRU5UIiwgIkNIQVJfTEVGVF9DVVJMWV9CUkFDS0VUIiwgIkNIQVJfVkVSVElDQUxfTElORSIsICJDSEFSX1JJR0hUX0NVUkxZX0JSQUNLRVQiLCAiRVNDQVBFX1NFUVVFTkNFUyIsICJERVBSRUNBVEVEX0JPT0xFQU5TX1NZTlRBWCIsICJERVBSRUNBVEVEX0JBU0U2MF9TWU5UQVgiLCAiY29tcGlsZVN0eWxlTWFwIiwgImVuY29kZUhleCIsICJjaGFyYWN0ZXIiLCAiUVVPVElOR19UWVBFX1NJTkdMRSIsICJRVU9USU5HX1RZUEVfRE9VQkxFIiwgIlN0YXRlIiwgImluZGVudFN0cmluZyIsICJzcGFjZXMiLCAiaW5kIiwgIm5leHQiLCAiZ2VuZXJhdGVOZXh0TGluZSIsICJsZXZlbCIsICJ0ZXN0SW1wbGljaXRSZXNvbHZpbmciLCAiaXNXaGl0ZXNwYWNlIiwgImlzUHJpbnRhYmxlIiwgImlzTnNDaGFyT3JXaGl0ZXNwYWNlIiwgImlzUGxhaW5TYWZlIiwgInByZXYiLCAiaW5ibG9jayIsICJjSXNOc0NoYXJPcldoaXRlc3BhY2UiLCAiY0lzTnNDaGFyIiwgImlzUGxhaW5TYWZlRmlyc3QiLCAiaXNQbGFpblNhZmVMYXN0IiwgImNvZGVQb2ludEF0IiwgInBvcyIsICJmaXJzdCIsICJuZWVkSW5kZW50SW5kaWNhdG9yIiwgImxlYWRpbmdTcGFjZVJlIiwgIlNUWUxFX1BMQUlOIiwgIlNUWUxFX1NJTkdMRSIsICJTVFlMRV9MSVRFUkFMIiwgIlNUWUxFX0ZPTERFRCIsICJTVFlMRV9ET1VCTEUiLCAiY2hvb3NlU2NhbGFyU3R5bGUiLCAic2luZ2xlTGluZU9ubHkiLCAiaW5kZW50UGVyTGV2ZWwiLCAibGluZVdpZHRoIiwgInRlc3RBbWJpZ3VvdXNUeXBlIiwgInF1b3RpbmdUeXBlIiwgImZvcmNlUXVvdGVzIiwgImNoYXIiLCAicHJldkNoYXIiLCAiaGFzTGluZUJyZWFrIiwgImhhc0ZvbGRhYmxlTGluZSIsICJzaG91bGRUcmFja1dpZHRoIiwgInByZXZpb3VzTGluZUJyZWFrIiwgInBsYWluIiwgIndyaXRlU2NhbGFyIiwgImlza2V5IiwgImluZGVudCIsICJ0ZXN0QW1iaWd1aXR5IiwgImJsb2NrSGVhZGVyIiwgImRyb3BFbmRpbmdOZXdsaW5lIiwgImZvbGRTdHJpbmciLCAiZXNjYXBlU3RyaW5nIiwgImluZGVudEluZGljYXRvciIsICJjbGlwIiwgImtlZXAiLCAiY2hvbXAiLCAid2lkdGgiLCAibGluZVJlIiwgIm5leHRMRiIsICJmb2xkTGluZSIsICJwcmV2TW9yZUluZGVudGVkIiwgIm1vcmVJbmRlbnRlZCIsICJicmVha1JlIiwgImN1cnIiLCAiZXNjYXBlU2VxIiwgIndyaXRlRmxvd1NlcXVlbmNlIiwgIndyaXRlTm9kZSIsICJ3cml0ZUJsb2NrU2VxdWVuY2UiLCAid3JpdGVGbG93TWFwcGluZyIsICJvYmplY3RLZXlMaXN0IiwgIm9iamVjdEtleSIsICJvYmplY3RWYWx1ZSIsICJwYWlyQnVmZmVyIiwgIndyaXRlQmxvY2tNYXBwaW5nIiwgImV4cGxpY2l0UGFpciIsICJkZXRlY3RUeXBlIiwgImJsb2NrIiwgImlzYmxvY2tzZXEiLCAidGFnU3RyIiwgIm9iamVjdE9yQXJyYXkiLCAiZHVwbGljYXRlSW5kZXgiLCAiZHVwbGljYXRlIiwgImdldER1cGxpY2F0ZVJlZmVyZW5jZXMiLCAib2JqZWN0cyIsICJkdXBsaWNhdGVzSW5kZXhlcyIsICJpbnNwZWN0Tm9kZSIsICJkdW1wJDEiLCAiZHVtcF8xIiwgImR1bXBlciIsICJyZW5hbWVkIiwgImZyb20iLCAidG8iLCAibG9hZCIsICJsb2FkZXIiLCAibG9hZEFsbCIsICJkdW1wIiwgImR1bXBlciIsICJzYWZlTG9hZCIsICJyZW5hbWVkIiwgInNhZmVMb2FkQWxsIiwgInNhZmVEdW1wIiwgImltcG9ydF9mcyIsICJpbXBvcnRfcGF0aCIsICJHb2xhbmdQcm9qZWN0IiwgIkFic3RyYWN0UHJvamVjdCIsICJuYW1lIiwgImdvTW9kRmlsZSIsICJuZXdMaW5lcyIsICJsaW5lIiwgIndvcmtEaXIiLCAibGluZXMiLCAicHJvamVjdE5hbWUiLCAiaW5zaWRlUmVxdWlyZUJsb2NrIiwgInBhcnNlZCIsICJtb2R1bGVNYXRjaCIsICJyZXF1aXJlTWF0Y2giLCAicmVxdWlyZVN0YXJ0TWF0Y2giLCAicmVxdWlyZUVuZE1hdGNoIiwgInByb2plY3ROYW1lTWF0Y2giLCAibXVsdGlsaW5lUmVxdWlyZU1hdGNoIiwgInByb2plY3QiLCAiY29uZmlnIiwgInByb2plY3RKc29uIiwgImdvTW9kIiwgImFjYyIsICJkZXAiLCAiaW1wb3J0X2ZzIiwgImltcG9ydF9wYXRoIiwgImltcG9ydF94bWwyanMiLCAiRG90bmV0UHJvamVjdCIsICJBYnN0cmFjdFByb2plY3QiLCAiX25hbWUiLCAid29ya0RpciIsICJmaWxlcyIsICJmaWxlIiwgInByb2plY3RGaWxlIiwgImNzUHJvaiIsICJwcm9qZWN0IiwgInByb2plY3RKc29uIiwgInByb2plY3ROYW1lIiwgImNzUHJvamVjdCIsICJwcm9wZXJ0eUdyb3VwIiwgInZlcnNpb24iLCAiU2NhZmZvbGRseSIsICJiaW4iLCAiYWNjIiwgImJpbkVudHJ5IiwgIm5hbWUiLCAidmFsdWUiLCAic2VydmljZXMiLCAic2VydmljZSIsICJzY3JpcHRzIiwgInNjcmlwdCIsICJpbXBvcnRfZnMiLCAiaW1wb3J0X3BhdGgiLCAiZ2V0TGluZUNvbEZyb21QdHIiLCAic3RyaW5nIiwgInB0ciIsICJsaW5lcyIsICJtYWtlQ29kZUJsb2NrIiwgImxpbmUiLCAiY29sdW1uIiwgImNvZGVibG9jayIsICJudW1iZXJMZW4iLCAiaSIsICJsIiwgIlRvbWxFcnJvciIsICJtZXNzYWdlIiwgIm9wdGlvbnMiLCAiaW5kZXhPZk5ld2xpbmUiLCAic3RyIiwgInN0YXJ0IiwgImVuZCIsICJpZHgiLCAic2tpcENvbW1lbnQiLCAicHRyIiwgImMiLCAiVG9tbEVycm9yIiwgInNraXBWb2lkIiwgImJhbk5ld0xpbmVzIiwgImJhbkNvbW1lbnRzIiwgInNraXBVbnRpbCIsICJzZXAiLCAiaSIsICJnZXRTdHJpbmdFbmQiLCAic2VlayIsICJmaXJzdCIsICJ0YXJnZXQiLCAiREFURV9USU1FX1JFIiwgIlRvbWxEYXRlIiwgIl9Ub21sRGF0ZSIsICIjaGFzRGF0ZSIsICIjaGFzVGltZSIsICIjb2Zmc2V0IiwgImRhdGUiLCAiaGFzRGF0ZSIsICJoYXNUaW1lIiwgIm9mZnNldCIsICJtYXRjaCIsICJpc28iLCAianNEYXRlIiwgIklOVF9SRUdFWCIsICJGTE9BVF9SRUdFWCIsICJMRUFESU5HX1pFUk8iLCAiRVNDQVBFX1JFR0VYIiwgIkVTQ19NQVAiLCAicGFyc2VTdHJpbmciLCAic3RyIiwgInB0ciIsICJlbmRQdHIiLCAiaXNMaXRlcmFsIiwgImlzTXVsdGlsaW5lIiwgInRtcCIsICJpc0VzY2FwZSIsICJwYXJzZWQiLCAic2xpY2VTdGFydCIsICJjIiwgIlRvbWxFcnJvciIsICJjb2RlIiwgInNraXBWb2lkIiwgInBhcnNlVmFsdWUiLCAidmFsdWUiLCAidG9tbCIsICJpc0ludCIsICJudW1lcmljIiwgImRhdGUiLCAiVG9tbERhdGUiLCAic2xpY2VBbmRUcmltRW5kT2YiLCAic3RyIiwgInN0YXJ0UHRyIiwgImVuZFB0ciIsICJhbGxvd05ld0xpbmVzIiwgInZhbHVlIiwgImNvbW1lbnRJZHgiLCAic2tpcENvbW1lbnQiLCAidHJpbW1lZCIsICJuZXdsaW5lSWR4IiwgIlRvbWxFcnJvciIsICJleHRyYWN0VmFsdWUiLCAicHRyIiwgImVuZCIsICJjIiwgInBhcnNlQXJyYXkiLCAicGFyc2VJbmxpbmVUYWJsZSIsICJuZXdQdHIiLCAic2tpcFVudGlsIiwgIm5leHROZXdMaW5lIiwgImluZGV4T2ZOZXdsaW5lIiwgImdldFN0cmluZ0VuZCIsICJwYXJzZWQiLCAicGFyc2VTdHJpbmciLCAic2tpcFZvaWQiLCAic2xpY2UiLCAicGFyc2VWYWx1ZSIsICJLRVlfUEFSVF9SRSIsICJwYXJzZUtleSIsICJzdHIiLCAicHRyIiwgImVuZCIsICJkb3QiLCAicGFyc2VkIiwgImVuZFB0ciIsICJUb21sRXJyb3IiLCAiYyIsICJlb3MiLCAiZ2V0U3RyaW5nRW5kIiwgInN0ckVuZCIsICJuZXdMaW5lIiwgImluZGV4T2ZOZXdsaW5lIiwgInBhcnNlU3RyaW5nIiwgInBhcnQiLCAic2tpcFZvaWQiLCAicGFyc2VJbmxpbmVUYWJsZSIsICJyZXMiLCAic2VlbiIsICJjb21tYSIsICJrIiwgInQiLCAiaGFzT3duIiwgImtleSIsICJrZXlFbmRQdHIiLCAiaSIsICJ2YWx1ZSIsICJ2YWx1ZUVuZFB0ciIsICJleHRyYWN0VmFsdWUiLCAicGFyc2VBcnJheSIsICJza2lwQ29tbWVudCIsICJlIiwgInBlZWtUYWJsZSIsICJrZXkiLCAidGFibGUiLCAibWV0YSIsICJ0eXBlIiwgInQiLCAibSIsICJrIiwgImhhc093biIsICJzdGF0ZSIsICJpIiwgImwiLCAicGFyc2UiLCAidG9tbCIsICJyZXMiLCAidGJsIiwgInB0ciIsICJza2lwVm9pZCIsICJpc1RhYmxlQXJyYXkiLCAicGFyc2VLZXkiLCAiVG9tbEVycm9yIiwgInAiLCAidiIsICJleHRyYWN0VmFsdWUiLCAiQkFSRV9LRVkiLCAiZXh0ZW5kZWRUeXBlT2YiLCAib2JqIiwgInR5cGUiLCAiaXNBcnJheU9mVGFibGVzIiwgImkiLCAiZm9ybWF0U3RyaW5nIiwgInMiLCAic3RyaW5naWZ5VmFsdWUiLCAidmFsIiwgInN0cmluZ2lmeUlubGluZVRhYmxlIiwgInN0cmluZ2lmeUFycmF5IiwgImtleXMiLCAicmVzIiwgImsiLCAiYXJyYXkiLCAic3RyaW5naWZ5QXJyYXlUYWJsZSIsICJrZXkiLCAic3RyaW5naWZ5VGFibGUiLCAicHJlZml4IiwgInByZWFtYmxlIiwgInRhYmxlcyIsICJ0YmxLZXkiLCAic3RyaW5naWZ5IiwgIlB5dGhvblByb2plY3QiLCAiQWJzdHJhY3RQcm9qZWN0IiwgIm5hbWUiLCAicHlQcm9qZWN0RmlsZSIsICJweVByb2plY3QiLCAicGFyc2UiLCAic3RyaW5naWZ5IiwgIndvcmtEaXIiLCAicHJvamVjdCIsICJwcm9qZWN0SnNvbiIsICJweXByb2plY3RUb21sIiwgImRlcGVuZGVuY2llcyIsICJhY2MiLCAia2V5IiwgInZhbHVlIiwgInNlcnZpY2VzIiwgInNjYWZmb2xkbHkiLCAicGtnIiwgImltcG9ydF9mcyIsICJpbXBvcnRfcGF0aCIsICJSdXN0UHJvamVjdCIsICJBYnN0cmFjdFByb2plY3QiLCAibmFtZSIsICJjYXJnb1RvbWxGaWxlIiwgImNhcmdvVG9tbCIsICJwYXJzZSIsICJzdHJpbmdpZnkiLCAid29ya0RpciIsICJwcm9qZWN0IiwgInByb2plY3RKc29uIiwgImFjYyIsICJrZXkiLCAidmFsdWUiLCAiaW1wb3J0X2VqcyIsICJpbXBvcnRfZnMiLCAiU3RhbmRhbG9uZVByb2plY3QiLCAiQWJzdHJhY3RQcm9qZWN0IiwgIm5hbWUiLCAic3RhbmRhbG9uZUNvbmZpZ0ZpbGUiLCAic3RhbmRhbG9uZUNvbmZpZyIsICJwcm9qZWN0SnNvbiIsICJjd2QiLCAiZmV0Y2hGcmFtZXdvcmtzIiwgImluZGV4WWFtbCIsICJheGlvc19kZWZhdWx0IiwgImluZGV4IiwgImxvYWQiLCAiYWNjIiwgImxhbmd1YWdlIiwgInZhcmlhbnRzIiwgInllbGxvdyIsICJhY2NWIiwgInZhcmlhbnQiLCAiZnJhbWV3b3JrVmFyaWFudCIsICJnZW5lcmF0ZVJlYWRtZSIsICJyZWFkbWVUZW1wbGF0ZSIsICJlanMiLCAidGVtcGxhdGVzIiwgImZyYW1ld29ya3MiLCAiZiIsICJ2IiwgImEiLCAiYiIsICJnZXRWYXJpYW50IiwgImJyYW5jaCIsICJmcmFtZXdvcmsiLCAicmVuYW1lRmlsZXMiLCAiZGVmYXVsdFRhcmdldERpciIsICJleGVjIiwgIndvcmtpbmdEaXJlY3RvcnkiLCAiYXJncyIsICJyZXNvbHZlIiwgInJlamVjdCIsICJlbnYiLCAiY29tbWFuZCIsICJ3aGljaCIsICJwIiwgInByb2MiLCAiZXJyIiwgImNvZGUiLCAiZm9ybWF0VGFyZ2V0RGlyIiwgInRhcmdldERpciIsICJpc0VtcHR5IiwgImZpbGVQYXRoIiwgImZpbGVzIiwgImZzIiwgImlzVmFsaWRQYWNrYWdlTmFtZSIsICJwcm9qZWN0TmFtZSIsICJ0b1ZhbGlkUGFja2FnZU5hbWUiLCAiZW1wdHlEaXIiLCAiZGlyIiwgImZpbGUiLCAicGF0aCIsICJkb3dubG9hZEFuZEV4dHJhY3RaaXAiLCAiZG93bmxvYWRVcmwiLCAicmVwbyIsICJ1cmwiLCAicmVzcG9uc2UiLCAidGVtcERpclBhdGgiLCAib3MiLCAidGVtcEZpbGVOYW1lIiwgInRlbXBaaXBQYXRoIiwgIkFkbVppcCIsICJlcnJvciIsICJjb3B5IiwgInNyYyIsICJkZXN0IiwgInNyY0ZpbGUiLCAiZGVzdEZpbGUiLCAic2FuaXRpemUiLCAiZmlsZW5hbWUiLCAic3RhcnRNYXJrZXIiLCAiZW5kTWFya2VyIiwgImxpbmVzIiwgInN0YXJ0TGluZSIsICJlbmRMaW5lIiwgImkiLCAiZ2V0UHJvamVjdCIsICJwcm9qZWN0VHlwZSIsICJ3b3JrZGlyIiwgIk5vZGVQcm9qZWN0IiwgIkdvbGFuZ1Byb2plY3QiLCAiRG90bmV0UHJvamVjdCIsICJQeXRob25Qcm9qZWN0IiwgIlJ1c3RQcm9qZWN0IiwgIlN0YW5kYWxvbmVQcm9qZWN0IiwgInJ1biIsICJhcmd2IiwgIm1pbmltaXN0IiwgImFyZyIsICJhcmdUYXJnZXREaXIiLCAiYXJnVGVtcGxhdGUiLCAiZ2V0UHJvamVjdE5hbWUiLCAicmVzdWx0IiwgInByb21wdHMiLCAicmVzZXQiLCAic3RhdGUiLCAiXyIsICJvdmVyd3JpdGUiLCAicmVkIiwgImZyYW1ld29ya0NvbG9yIiwgInZhcmlhbnRDb2xvciIsICJjYW5jZWxsZWQiLCAicGFja2FnZU5hbWUiLCAiZXhjbHVkZUZpbGVzIiwgInR5cGUiLCAic2V0dXBDb21tYW5kcyIsICJkZXZDb21tYW5kIiwgInZhcmlhbnRCcmFuY2giLCAicm9vdCIsICJ0ZW1wbGF0ZURpciIsICJ3cml0ZSIsICJjb250ZW50IiwgInRhcmdldFBhdGgiLCAicHJvamVjdCIsICJpbnN0YWxsQ29tbWFuZHMiLCAiZ2l0IiwgInNpbXBsZUdpdCIsICJjZFByb2plY3ROYW1lIiwgInNldHVwQ29tbWFuZCJdCn0K