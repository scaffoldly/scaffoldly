"use strict";var R0=Object.create;var un=Object.defineProperty;var P0=Object.getOwnPropertyDescriptor;var F0=Object.getOwnPropertyNames;var j0=Object.getPrototypeOf,M0=Object.prototype.hasOwnProperty;var L=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),nl=(e,t)=>{for(var i in t)un(e,i,{get:t[i],enumerable:!0})},sl=(e,t,i,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of F0(t))!M0.call(e,n)&&n!==i&&un(e,n,{get:()=>t[n],enumerable:!(r=P0(t,n))||r.enumerable});return e};var ae=(e,t,i)=>(i=e!=null?R0(j0(e)):{},sl(t||!e||!e.__esModule?un(i,"default",{value:e,enumerable:!0}):i,e)),q0=e=>sl(un({},"__esModule",{value:!0}),e);var oo=L((cR,ol)=>{"use strict";ol.exports={LOCHDR:30,LOCSIG:67324752,LOCVER:4,LOCFLG:6,LOCHOW:8,LOCTIM:10,LOCCRC:14,LOCSIZ:18,LOCLEN:22,LOCNAM:26,LOCEXT:28,EXTSIG:134695760,EXTHDR:16,EXTCRC:4,EXTSIZ:8,EXTLEN:12,CENHDR:46,CENSIG:33639248,CENVEM:4,CENVER:6,CENFLG:8,CENHOW:10,CENTIM:12,CENCRC:16,CENSIZ:20,CENLEN:24,CENNAM:28,CENEXT:30,CENCOM:32,CENDSK:34,CENATT:36,CENATX:38,CENOFF:42,ENDHDR:22,ENDSIG:101010256,ENDSUB:8,ENDTOT:10,ENDSIZ:12,ENDOFF:16,ENDCOM:20,END64HDR:20,END64SIG:117853008,END64START:4,END64OFF:8,END64NUMDISKS:16,ZIP64SIG:101075792,ZIP64HDR:56,ZIP64LEAD:12,ZIP64SIZE:4,ZIP64VEM:12,ZIP64VER:14,ZIP64DSK:16,ZIP64DSKDIR:20,ZIP64SUB:24,ZIP64TOT:32,ZIP64SIZB:40,ZIP64OFF:48,ZIP64EXTRA:56,STORED:0,SHRUNK:1,REDUCED1:2,REDUCED2:3,REDUCED3:4,REDUCED4:5,IMPLODED:6,DEFLATED:8,ENHANCED_DEFLATED:9,PKWARE:10,BZIP2:12,LZMA:14,IBM_TERSE:18,IBM_LZ77:19,AES_ENCRYPT:99,FLG_ENC:1,FLG_COMP1:2,FLG_COMP2:4,FLG_DESC:8,FLG_ENH:16,FLG_PATCH:32,FLG_STR:64,FLG_EFS:2048,FLG_MSK:4096,FILE:2,BUFFER:1,NONE:0,EF_ID:0,EF_SIZE:2,ID_ZIP64:1,ID_AVINFO:7,ID_PFS:8,ID_OS2:9,ID_NTFS:10,ID_OPENVMS:12,ID_UNIX:13,ID_FORK:14,ID_PATCH:15,ID_X509_PKCS7:20,ID_X509_CERTID_F:21,ID_X509_CERTID_C:22,ID_STRONGENC:23,ID_RECORD_MGT:24,ID_X509_PKCS7_RL:25,ID_IBM1:101,ID_IBM2:102,ID_POSZIP:18064,EF_ZIP64_OR_32:4294967295,EF_ZIP64_OR_16:65535,EF_ZIP64_SUNCOMP:0,EF_ZIP64_SCOMP:8,EF_ZIP64_RHO:16,EF_ZIP64_DSN:24}});var ln=L(cl=>{"use strict";var al={INVALID_LOC:"Invalid LOC header (bad signature)",INVALID_CEN:"Invalid CEN header (bad signature)",INVALID_END:"Invalid END header (bad signature)",DESCRIPTOR_NOT_EXIST:"No descriptor present",DESCRIPTOR_UNKNOWN:"Unknown descriptor format",DESCRIPTOR_FAULTY:"Descriptor data is malformed",NO_DATA:"Nothing to decompress",BAD_CRC:"CRC32 checksum failed {0}",FILE_IN_THE_WAY:"There is a file in the way: {0}",UNKNOWN_METHOD:"Invalid/unsupported compression method",AVAIL_DATA:"inflate::Available inflate data did not terminate",INVALID_DISTANCE:"inflate::Invalid literal/length or distance code in fixed or dynamic block",TO_MANY_CODES:"inflate::Dynamic block code description: too many length or distance codes",INVALID_REPEAT_LEN:"inflate::Dynamic block code description: repeat more than specified lengths",INVALID_REPEAT_FIRST:"inflate::Dynamic block code description: repeat lengths with no first length",INCOMPLETE_CODES:"inflate::Dynamic block code description: code lengths codes incomplete",INVALID_DYN_DISTANCE:"inflate::Dynamic block code description: invalid distance code lengths",INVALID_CODES_LEN:"inflate::Dynamic block code description: invalid literal/length code lengths",INVALID_STORE_BLOCK:"inflate::Stored block length did not match one's complement",INVALID_BLOCK_TYPE:"inflate::Invalid block type (type == 3)",CANT_EXTRACT_FILE:"Could not extract the file",CANT_OVERRIDE:"Target file already exists",DISK_ENTRY_TOO_LARGE:"Number of disk entries is too large",NO_ZIP:"No zip file was loaded",NO_ENTRY:"Entry doesn't exist",DIRECTORY_CONTENT_ERROR:"A directory cannot have content",FILE_NOT_FOUND:'File not found: "{0}"',NOT_IMPLEMENTED:"Not implemented",INVALID_FILENAME:"Invalid filename",INVALID_FORMAT:"Invalid or unsupported zip format. No END header found",INVALID_PASS_PARAM:"Incompatible password parameter",WRONG_PASSWORD:"Wrong Password",COMMENT_TOO_LONG:"Comment is too long",EXTRA_FIELD_PARSE_ERROR:"Extra field parsing error"};function B0(e){return function(...t){return t.length&&(e=e.replace(/\{(\d)\}/g,(i,r)=>t[r]||"")),new Error("ADM-ZIP: "+e)}}for(let e of Object.keys(al))cl[e]=B0(al[e])});var fl=L((lR,dl)=>{"use strict";var U0=require("fs"),ke=require("path"),ul=oo(),$0=ln(),z0=typeof process=="object"&&process.platform==="win32",ll=e=>typeof e=="object"&&e!==null,pl=new Uint32Array(256).map((e,t)=>{for(let i=0;i<8;i++)t&1?t=3988292384^t>>>1:t>>>=1;return t>>>0});function ve(e){this.sep=ke.sep,this.fs=U0,ll(e)&&ll(e.fs)&&typeof e.fs.statSync=="function"&&(this.fs=e.fs)}dl.exports=ve;ve.prototype.makeDir=function(e){let t=this;function i(r){let n=r.split(t.sep)[0];r.split(t.sep).forEach(function(s){if(!(!s||s.substr(-1,1)===":")){n+=t.sep+s;var o;try{o=t.fs.statSync(n)}catch{t.fs.mkdirSync(n)}if(o&&o.isFile())throw $0.FILE_IN_THE_WAY(`"${n}"`)}})}i(e)};ve.prototype.writeFileTo=function(e,t,i,r){let n=this;if(n.fs.existsSync(e)){if(!i)return!1;var s=n.fs.statSync(e);if(s.isDirectory())return!1}var o=ke.dirname(e);n.fs.existsSync(o)||n.makeDir(o);var a;try{a=n.fs.openSync(e,"w",438)}catch{n.fs.chmodSync(e,438),a=n.fs.openSync(e,"w",438)}if(a)try{n.fs.writeSync(a,t,0,t.length,0)}finally{n.fs.closeSync(a)}return n.fs.chmodSync(e,r||438),!0};ve.prototype.writeFileToAsync=function(e,t,i,r,n){typeof r=="function"&&(n=r,r=void 0);let s=this;s.fs.exists(e,function(o){if(o&&!i)return n(!1);s.fs.stat(e,function(a,c){if(o&&c.isDirectory())return n(!1);var u=ke.dirname(e);s.fs.exists(u,function(m){m||s.makeDir(u),s.fs.open(e,"w",438,function(g,x){g?s.fs.chmod(e,438,function(){s.fs.open(e,"w",438,function(p,h){s.fs.write(h,t,0,t.length,0,function(){s.fs.close(h,function(){s.fs.chmod(e,r||438,function(){n(!0)})})})})}):x?s.fs.write(x,t,0,t.length,0,function(){s.fs.close(x,function(){s.fs.chmod(e,r||438,function(){n(!0)})})}):s.fs.chmod(e,r||438,function(){n(!0)})})})})})};ve.prototype.findFiles=function(e){let t=this;function i(r,n,s){typeof n=="boolean"&&(s=n,n=void 0);let o=[];return t.fs.readdirSync(r).forEach(function(a){let c=ke.join(r,a),u=t.fs.statSync(c);(!n||n.test(c))&&o.push(ke.normalize(c)+(u.isDirectory()?t.sep:"")),u.isDirectory()&&s&&(o=o.concat(i(c,n,s)))}),o}return i(e,void 0,!0)};ve.prototype.findFilesAsync=function(e,t){let i=this,r=[];i.fs.readdir(e,function(n,s){if(n)return t(n);let o=s.length;if(!o)return t(null,r);s.forEach(function(a){a=ke.join(e,a),i.fs.stat(a,function(c,u){if(c)return t(c);u&&(r.push(ke.normalize(a)+(u.isDirectory()?i.sep:"")),u.isDirectory()?i.findFilesAsync(a,function(m,g){if(m)return t(m);r=r.concat(g),--o||t(null,r)}):--o||t(null,r))})})})};ve.prototype.getAttributes=function(){};ve.prototype.setAttributes=function(){};ve.crc32update=function(e,t){return pl[(e^t)&255]^e>>>8};ve.crc32=function(e){typeof e=="string"&&(e=Buffer.from(e,"utf8"));let t=e.length,i=-1;for(let r=0;r<t;)i=ve.crc32update(i,e[r++]);return~i>>>0};ve.methodToString=function(e){switch(e){case ul.STORED:return"STORED ("+e+")";case ul.DEFLATED:return"DEFLATED ("+e+")";default:return"UNSUPPORTED ("+e+")"}};ve.canonical=function(e){if(!e)return"";let t=ke.posix.normalize("/"+e.split("\\").join("/"));return ke.join(".",t)};ve.zipnamefix=function(e){if(!e)return"";let t=ke.posix.normalize("/"+e.split("\\").join("/"));return ke.posix.join(".",t)};ve.findLast=function(e,t){if(!Array.isArray(e))throw new TypeError("arr is not array");let i=e.length>>>0;for(let r=i-1;r>=0;r--)if(t(e[r],r,e))return e[r]};ve.sanitize=function(e,t){e=ke.resolve(ke.normalize(e));for(var i=t.split("/"),r=0,n=i.length;r<n;r++){var s=ke.normalize(ke.join(e,i.slice(r,n).join(ke.sep)));if(s.indexOf(e)===0)return s}return ke.normalize(ke.join(e,ke.basename(t)))};ve.toBuffer=function(t,i){return Buffer.isBuffer(t)?t:t instanceof Uint8Array?Buffer.from(t):typeof t=="string"?i(t):Buffer.alloc(0)};ve.readBigUInt64LE=function(e,t){var i=Buffer.from(e.slice(t,t+8));return i.swap64(),parseInt(`0x${i.toString("hex")}`)};ve.fromDOS2Date=function(e){return new Date((e>>25&127)+1980,Math.max((e>>21&15)-1,0),Math.max(e>>16&31,1),e>>11&31,e>>5&63,(e&31)<<1)};ve.fromDate2DOS=function(e){let t=0,i=0;return e.getFullYear()>1979&&(t=(e.getFullYear()-1980&127)<<9|e.getMonth()+1<<5|e.getDate(),i=e.getHours()<<11|e.getMinutes()<<5|e.getSeconds()>>1),t<<16|i};ve.isWin=z0;ve.crcTable=pl});var ml=L((pR,hl)=>{"use strict";var H0=require("path");hl.exports=function(e,{fs:t}){var i=e||"",r=s(),n=null;function s(){return{directory:!1,readonly:!1,hidden:!1,executable:!1,mtime:0,atime:0}}return i&&t.existsSync(i)?(n=t.statSync(i),r.directory=n.isDirectory(),r.mtime=n.mtime,r.atime=n.atime,r.executable=(73&n.mode)!==0,r.readonly=(128&n.mode)===0,r.hidden=H0.basename(i)[0]==="."):console.warn("Invalid path: "+i),{get directory(){return r.directory},get readOnly(){return r.readonly},get hidden(){return r.hidden},get mtime(){return r.mtime},get atime(){return r.atime},get executable(){return r.executable},decodeAttributes:function(){},encodeAttributes:function(){},toJSON:function(){return{path:i,isDirectory:r.directory,isReadOnly:r.readonly,isHidden:r.hidden,isExecutable:r.executable,mTime:r.mtime,aTime:r.atime}},toString:function(){return JSON.stringify(this.toJSON(),null,"	")}}}});var xl=L((dR,gl)=>{"use strict";gl.exports={efs:!0,encode:e=>Buffer.from(e,"utf8"),decode:e=>e.toString("utf8")}});var Li=L((fR,Ni)=>{"use strict";Ni.exports=fl();Ni.exports.Constants=oo();Ni.exports.Errors=ln();Ni.exports.FileAttr=ml();Ni.exports.decoder=xl()});var yl=L((hR,vl)=>{"use strict";var Xt=Li(),B=Xt.Constants;vl.exports=function(){var e=20,t=10,i=0,r=0,n=0,s=0,o=0,a=0,c=0,u=0,m=0,g=0,x=0,p=0,h=0;e|=Xt.isWin?2560:768,i|=B.FLG_EFS;let v={extraLen:0},E=l=>Math.max(0,l)>>>0,S=l=>Math.max(0,l)&65535,_=l=>Math.max(0,l)&255;return n=Xt.fromDate2DOS(new Date),{get made(){return e},set made(l){e=l},get version(){return t},set version(l){t=l},get flags(){return i},set flags(l){i=l},get flags_efs(){return(i&B.FLG_EFS)>0},set flags_efs(l){l?i|=B.FLG_EFS:i&=~B.FLG_EFS},get flags_desc(){return(i&B.FLG_DESC)>0},set flags_desc(l){l?i|=B.FLG_DESC:i&=~B.FLG_DESC},get method(){return r},set method(l){switch(l){case B.STORED:this.version=10;case B.DEFLATED:default:this.version=20}r=l},get time(){return Xt.fromDOS2Date(this.timeval)},set time(l){this.timeval=Xt.fromDate2DOS(l)},get timeval(){return n},set timeval(l){n=E(l)},get timeHighByte(){return _(n>>>8)},get crc(){return s},set crc(l){s=E(l)},get compressedSize(){return o},set compressedSize(l){o=E(l)},get size(){return a},set size(l){a=E(l)},get fileNameLength(){return c},set fileNameLength(l){c=l},get extraLength(){return u},set extraLength(l){u=l},get extraLocalLength(){return v.extraLen},set extraLocalLength(l){v.extraLen=l},get commentLength(){return m},set commentLength(l){m=l},get diskNumStart(){return g},set diskNumStart(l){g=E(l)},get inAttr(){return x},set inAttr(l){x=E(l)},get attr(){return p},set attr(l){p=E(l)},get fileAttr(){return(p||0)>>16&4095},get offset(){return h},set offset(l){h=E(l)},get encrypted(){return(i&B.FLG_ENC)===B.FLG_ENC},get centralHeaderSize(){return B.CENHDR+c+u+m},get realDataOffset(){return h+B.LOCHDR+v.fnameLen+v.extraLen},get localHeader(){return v},loadLocalHeaderFromBinary:function(l){var d=l.slice(h,h+B.LOCHDR);if(d.readUInt32LE(0)!==B.LOCSIG)throw Xt.Errors.INVALID_LOC();v.version=d.readUInt16LE(B.LOCVER),v.flags=d.readUInt16LE(B.LOCFLG),v.method=d.readUInt16LE(B.LOCHOW),v.time=d.readUInt32LE(B.LOCTIM),v.crc=d.readUInt32LE(B.LOCCRC),v.compressedSize=d.readUInt32LE(B.LOCSIZ),v.size=d.readUInt32LE(B.LOCLEN),v.fnameLen=d.readUInt16LE(B.LOCNAM),v.extraLen=d.readUInt16LE(B.LOCEXT);let f=h+B.LOCHDR+v.fnameLen,w=f+v.extraLen;return l.slice(f,w)},loadFromBinary:function(l){if(l.length!==B.CENHDR||l.readUInt32LE(0)!==B.CENSIG)throw Xt.Errors.INVALID_CEN();e=l.readUInt16LE(B.CENVEM),t=l.readUInt16LE(B.CENVER),i=l.readUInt16LE(B.CENFLG),r=l.readUInt16LE(B.CENHOW),n=l.readUInt32LE(B.CENTIM),s=l.readUInt32LE(B.CENCRC),o=l.readUInt32LE(B.CENSIZ),a=l.readUInt32LE(B.CENLEN),c=l.readUInt16LE(B.CENNAM),u=l.readUInt16LE(B.CENEXT),m=l.readUInt16LE(B.CENCOM),g=l.readUInt16LE(B.CENDSK),x=l.readUInt16LE(B.CENATT),p=l.readUInt32LE(B.CENATX),h=l.readUInt32LE(B.CENOFF)},localHeaderToBinary:function(){var l=Buffer.alloc(B.LOCHDR);return l.writeUInt32LE(B.LOCSIG,0),l.writeUInt16LE(t,B.LOCVER),l.writeUInt16LE(i,B.LOCFLG),l.writeUInt16LE(r,B.LOCHOW),l.writeUInt32LE(n,B.LOCTIM),l.writeUInt32LE(s,B.LOCCRC),l.writeUInt32LE(o,B.LOCSIZ),l.writeUInt32LE(a,B.LOCLEN),l.writeUInt16LE(c,B.LOCNAM),l.writeUInt16LE(v.extraLen,B.LOCEXT),l},centralHeaderToBinary:function(){var l=Buffer.alloc(B.CENHDR+c+u+m);return l.writeUInt32LE(B.CENSIG,0),l.writeUInt16LE(e,B.CENVEM),l.writeUInt16LE(t,B.CENVER),l.writeUInt16LE(i,B.CENFLG),l.writeUInt16LE(r,B.CENHOW),l.writeUInt32LE(n,B.CENTIM),l.writeUInt32LE(s,B.CENCRC),l.writeUInt32LE(o,B.CENSIZ),l.writeUInt32LE(a,B.CENLEN),l.writeUInt16LE(c,B.CENNAM),l.writeUInt16LE(u,B.CENEXT),l.writeUInt16LE(m,B.CENCOM),l.writeUInt16LE(g,B.CENDSK),l.writeUInt16LE(x,B.CENATT),l.writeUInt32LE(p,B.CENATX),l.writeUInt32LE(h,B.CENOFF),l},toJSON:function(){let l=function(d){return d+" bytes"};return{made:e,version:t,flags:i,method:Xt.methodToString(r),time:this.time,crc:"0x"+s.toString(16).toUpperCase(),compressedSize:l(o),size:l(a),fileNameLength:l(c),extraLength:l(u),commentLength:l(m),diskNumStart:g,inAttr:x,attr:p,offset:h,centralHeaderSize:l(B.CENHDR+c+u+m)}},toString:function(){return JSON.stringify(this.toJSON(),null,"	")}}}});var wl=L((mR,bl)=>{"use strict";var ki=Li(),de=ki.Constants;bl.exports=function(){var e=0,t=0,i=0,r=0,n=0;return{get diskEntries(){return e},set diskEntries(s){e=t=s},get totalEntries(){return t},set totalEntries(s){t=e=s},get size(){return i},set size(s){i=s},get offset(){return r},set offset(s){r=s},get commentLength(){return n},set commentLength(s){n=s},get mainHeaderSize(){return de.ENDHDR+n},loadFromBinary:function(s){if((s.length!==de.ENDHDR||s.readUInt32LE(0)!==de.ENDSIG)&&(s.length<de.ZIP64HDR||s.readUInt32LE(0)!==de.ZIP64SIG))throw ki.Errors.INVALID_END();s.readUInt32LE(0)===de.ENDSIG?(e=s.readUInt16LE(de.ENDSUB),t=s.readUInt16LE(de.ENDTOT),i=s.readUInt32LE(de.ENDSIZ),r=s.readUInt32LE(de.ENDOFF),n=s.readUInt16LE(de.ENDCOM)):(e=ki.readBigUInt64LE(s,de.ZIP64SUB),t=ki.readBigUInt64LE(s,de.ZIP64TOT),i=ki.readBigUInt64LE(s,de.ZIP64SIZE),r=ki.readBigUInt64LE(s,de.ZIP64OFF),n=0)},toBinary:function(){var s=Buffer.alloc(de.ENDHDR+n);return s.writeUInt32LE(de.ENDSIG,0),s.writeUInt32LE(0,4),s.writeUInt16LE(e,de.ENDSUB),s.writeUInt16LE(t,de.ENDTOT),s.writeUInt32LE(i,de.ENDSIZ),s.writeUInt32LE(r,de.ENDOFF),s.writeUInt16LE(n,de.ENDCOM),s.fill(" ",de.ENDHDR),s},toJSON:function(){let s=function(o,a){let c=o.toString(16).toUpperCase();for(;c.length<a;)c="0"+c;return"0x"+c};return{diskEntries:e,totalEntries:t,size:i+" bytes",offset:s(r,4),commentLength:n}},toString:function(){return JSON.stringify(this.toJSON(),null,"	")}}}});var co=L(ao=>{"use strict";ao.EntryHeader=yl();ao.MainHeader=wl()});var _l=L((xR,El)=>{"use strict";El.exports=function(e){var t=require("zlib"),i={chunkSize:(parseInt(e.length/1024)+1)*1024};return{deflate:function(){return t.deflateRawSync(e,i)},deflateAsync:function(r){var n=t.createDeflateRaw(i),s=[],o=0;n.on("data",function(a){s.push(a),o+=a.length}),n.on("end",function(){var a=Buffer.alloc(o),c=0;a.fill(0);for(var u=0;u<s.length;u++){var m=s[u];m.copy(a,c),c+=m.length}r&&r(a)}),n.end(e)}}}});var Sl=L((vR,Tl)=>{"use strict";var G0=+(process.versions?process.versions.node:"").split(".")[0]||0;Tl.exports=function(e,t){var i=require("zlib");let r=G0>=15&&t>0?{maxOutputLength:t}:{};return{inflate:function(){return i.inflateRawSync(e,r)},inflateAsync:function(n){var s=i.createInflateRaw(r),o=[],a=0;s.on("data",function(c){o.push(c),a+=c.length}),s.on("end",function(){var c=Buffer.alloc(a),u=0;c.fill(0);for(var m=0;m<o.length;m++){var g=o[m];g.copy(c,u),u+=g.length}n&&n(c)}),s.end(e)}}}});var Il=L((yR,Dl)=>{"use strict";var{randomFillSync:Cl}=require("crypto"),V0=ln(),X0=new Uint32Array(256).map((e,t)=>{for(let i=0;i<8;i++)t&1?t=t>>>1^3988292384:t>>>=1;return t>>>0}),Al=(e,t)=>Math.imul(e,t)>>>0,Ol=(e,t)=>X0[(e^t)&255]^e>>>8,ur=()=>typeof Cl=="function"?Cl(Buffer.alloc(12)):ur.node();ur.node=()=>{let e=Buffer.alloc(12),t=e.length;for(let i=0;i<t;i++)e[i]=Math.random()*256&255;return e};var pn={genSalt:ur};function dn(e){let t=Buffer.isBuffer(e)?e:Buffer.from(e);this.keys=new Uint32Array([305419896,591751049,878082192]);for(let i=0;i<t.length;i++)this.updateKeys(t[i])}dn.prototype.updateKeys=function(e){let t=this.keys;return t[0]=Ol(t[0],e),t[1]+=t[0]&255,t[1]=Al(t[1],134775813)+1,t[2]=Ol(t[2],t[1]>>>24),e};dn.prototype.next=function(){let e=(this.keys[2]|2)>>>0;return Al(e,e^1)>>8&255};function Y0(e){let t=new dn(e);return function(i){let r=Buffer.alloc(i.length),n=0;for(let s of i)r[n++]=t.updateKeys(s^t.next());return r}}function W0(e){let t=new dn(e);return function(i,r,n=0){r||(r=Buffer.alloc(i.length));for(let s of i){let o=t.next();r[n++]=s^o,t.updateKeys(s)}return r}}function K0(e,t,i){if(!e||!Buffer.isBuffer(e)||e.length<12)return Buffer.alloc(0);let r=Y0(i),n=r(e.slice(0,12)),s=(t.flags&8)===8?t.timeHighByte:t.crc>>>24;if(n[11]!==s)throw V0.WRONG_PASSWORD();return r(e.slice(12))}function J0(e){Buffer.isBuffer(e)&&e.length>=12?pn.genSalt=function(){return e.slice(0,12)}:e==="node"?pn.genSalt=ur.node:pn.genSalt=ur}function Z0(e,t,i,r=!1){e==null&&(e=Buffer.alloc(0)),Buffer.isBuffer(e)||(e=Buffer.from(e.toString()));let n=W0(i),s=pn.genSalt();s[11]=t.crc>>>24&255,r&&(s[10]=t.crc>>>16&255);let o=Buffer.alloc(e.length+12);return n(s,o),n(e,o,12)}Dl.exports={decrypt:K0,encrypt:Z0,_salter:J0}});var Nl=L(fn=>{"use strict";fn.Deflater=_l();fn.Inflater=Sl();fn.ZipCrypto=Il()});var lo=L((wR,Ll)=>{"use strict";var ne=Li(),Q0=co(),ye=ne.Constants,uo=Nl();Ll.exports=function(e,t){var i=new Q0.EntryHeader,r=Buffer.alloc(0),n=Buffer.alloc(0),s=!1,o=null,a=Buffer.alloc(0),c=Buffer.alloc(0),u=!0;let m=e,g=typeof m.decoder=="object"?m.decoder:ne.decoder;u=g.hasOwnProperty("efs")?g.efs:!1;function x(){return!t||!(t instanceof Uint8Array)?Buffer.alloc(0):(c=i.loadLocalHeaderFromBinary(t),t.slice(i.realDataOffset,i.realDataOffset+i.compressedSize))}function p(l){if(i.flags_desc){let d={},f=i.realDataOffset+i.compressedSize;if(t.readUInt32LE(f)==ye.LOCSIG||t.readUInt32LE(f)==ye.CENSIG)throw ne.Errors.DESCRIPTOR_NOT_EXIST();if(t.readUInt32LE(f)==ye.EXTSIG)d.crc=t.readUInt32LE(f+ye.EXTCRC),d.compressedSize=t.readUInt32LE(f+ye.EXTSIZ),d.size=t.readUInt32LE(f+ye.EXTLEN);else if(t.readUInt16LE(f+12)===19280)d.crc=t.readUInt32LE(f+ye.EXTCRC-4),d.compressedSize=t.readUInt32LE(f+ye.EXTSIZ-4),d.size=t.readUInt32LE(f+ye.EXTLEN-4);else throw ne.Errors.DESCRIPTOR_UNKNOWN();if(d.compressedSize!==i.compressedSize||d.size!==i.size||d.crc!==i.crc)throw ne.Errors.DESCRIPTOR_FAULTY();if(ne.crc32(l)!==d.crc)return!1}else if(ne.crc32(l)!==i.localHeader.crc)return!1;return!0}function h(l,d,f){if(typeof d>"u"&&typeof l=="string"&&(f=l,l=void 0),s)return l&&d&&d(Buffer.alloc(0),ne.Errors.DIRECTORY_CONTENT_ERROR()),Buffer.alloc(0);var w=x();if(w.length===0)return l&&d&&d(w),w;if(i.encrypted){if(typeof f!="string"&&!Buffer.isBuffer(f))throw ne.Errors.INVALID_PASS_PARAM();w=uo.ZipCrypto.decrypt(w,i,f)}var O=Buffer.alloc(i.size);switch(i.method){case ne.Constants.STORED:if(w.copy(O),p(O))return l&&d&&d(O),O;throw l&&d&&d(O,ne.Errors.BAD_CRC()),ne.Errors.BAD_CRC();case ne.Constants.DEFLATED:var y=new uo.Inflater(w,i.size);if(l)y.inflateAsync(function(A){A.copy(A,0),d&&(p(A)?d(A):d(A,ne.Errors.BAD_CRC()))});else{if(y.inflate(O).copy(O,0),!p(O))throw ne.Errors.BAD_CRC(`"${g.decode(r)}"`);return O}break;default:throw l&&d&&d(Buffer.alloc(0),ne.Errors.UNKNOWN_METHOD()),ne.Errors.UNKNOWN_METHOD()}}function v(l,d){if((!o||!o.length)&&Buffer.isBuffer(t))return l&&d&&d(x()),x();if(o.length&&!s){var f;switch(i.method){case ne.Constants.STORED:return i.compressedSize=i.size,f=Buffer.alloc(o.length),o.copy(f),l&&d&&d(f),f;default:case ne.Constants.DEFLATED:var w=new uo.Deflater(o);if(l)w.deflateAsync(function(y){f=Buffer.alloc(y.length),i.compressedSize=y.length,y.copy(f),d&&d(f)});else{var O=w.deflate();return i.compressedSize=O.length,O}w=null;break}}else if(l&&d)d(Buffer.alloc(0));else return Buffer.alloc(0)}function E(l,d){return(l.readUInt32LE(d+4)<<4)+l.readUInt32LE(d)}function S(l){try{for(var d=0,f,w,O;d+4<l.length;)f=l.readUInt16LE(d),d+=2,w=l.readUInt16LE(d),d+=2,O=l.slice(d,d+w),d+=w,ye.ID_ZIP64===f&&_(O)}catch{throw ne.Errors.EXTRA_FIELD_PARSE_ERROR()}}function _(l){var d,f,w,O;l.length>=ye.EF_ZIP64_SCOMP&&(d=E(l,ye.EF_ZIP64_SUNCOMP),i.size===ye.EF_ZIP64_OR_32&&(i.size=d)),l.length>=ye.EF_ZIP64_RHO&&(f=E(l,ye.EF_ZIP64_SCOMP),i.compressedSize===ye.EF_ZIP64_OR_32&&(i.compressedSize=f)),l.length>=ye.EF_ZIP64_DSN&&(w=E(l,ye.EF_ZIP64_RHO),i.offset===ye.EF_ZIP64_OR_32&&(i.offset=w)),l.length>=ye.EF_ZIP64_DSN+4&&(O=l.readUInt32LE(ye.EF_ZIP64_DSN),i.diskNumStart===ye.EF_ZIP64_OR_16&&(i.diskNumStart=O))}return{get entryName(){return g.decode(r)},get rawEntryName(){return r},set entryName(l){r=ne.toBuffer(l,g.encode);var d=r[r.length-1];s=d===47||d===92,i.fileNameLength=r.length},get efs(){return typeof u=="function"?u(this.entryName):u},get extra(){return a},set extra(l){a=l,i.extraLength=l.length,S(l)},get comment(){return g.decode(n)},set comment(l){if(n=ne.toBuffer(l,g.encode),i.commentLength=n.length,n.length>65535)throw ne.Errors.COMMENT_TOO_LONG()},get name(){var l=g.decode(r);return s?l.substr(l.length-1).split("/").pop():l.split("/").pop()},get isDirectory(){return s},getCompressedData:function(){return v(!1,null)},getCompressedDataAsync:function(l){v(!0,l)},setData:function(l){o=ne.toBuffer(l,ne.decoder.encode),!s&&o.length?(i.size=o.length,i.method=ne.Constants.DEFLATED,i.crc=ne.crc32(l),i.changed=!0):i.method=ne.Constants.STORED},getData:function(l){return i.changed?o:h(!1,null,l)},getDataAsync:function(l,d){i.changed?l(o):h(!0,l,d)},set attr(l){i.attr=l},get attr(){return i.attr},set header(l){i.loadFromBinary(l)},get header(){return i},packCentralHeader:function(){i.flags_efs=this.efs,i.extraLength=a.length;var l=i.centralHeaderToBinary(),d=ne.Constants.CENHDR;return r.copy(l,d),d+=r.length,a.copy(l,d),d+=i.extraLength,n.copy(l,d),l},packLocalHeader:function(){let l=0;i.flags_efs=this.efs,i.extraLocalLength=c.length;let d=i.localHeaderToBinary(),f=Buffer.alloc(d.length+r.length+i.extraLocalLength);return d.copy(f,l),l+=d.length,r.copy(f,l),l+=r.length,c.copy(f,l),l+=c.length,f},toJSON:function(){let l=function(d){return"<"+(d&&d.length+" bytes buffer"||"null")+">"};return{entryName:this.entryName,name:this.name,comment:this.comment,isDirectory:this.isDirectory,header:i.toJSON(),compressedData:l(t),data:l(o)}},toString:function(){return JSON.stringify(this.toJSON(),null,"	")}}}});var Pl=L((ER,Rl)=>{"use strict";var kl=lo(),eE=co(),qe=Li();Rl.exports=function(e,t){var i=[],r={},n=Buffer.alloc(0),s=new eE.MainHeader,o=!1,a=null;let c=new Set,u=t,{noSort:m,decoder:g}=u;e?h(u.readEntries):o=!0;function x(){let E=new Set;for(let S of Object.keys(r)){let _=S.split("/");if(_.pop(),!!_.length)for(let l=0;l<_.length;l++){let d=_.slice(0,l+1).join("/")+"/";E.add(d)}}for(let S of E)if(!(S in r)){let _=new kl(u);_.entryName=S,_.attr=16,_.temporary=!0,i.push(_),r[_.entryName]=_,c.add(_)}}function p(){if(o=!0,r={},s.diskEntries>(e.length-s.offset)/qe.Constants.CENHDR)throw qe.Errors.DISK_ENTRY_TOO_LARGE();i=new Array(s.diskEntries);for(var E=s.offset,S=0;S<i.length;S++){var _=E,l=new kl(u,e);l.header=e.slice(_,_+=qe.Constants.CENHDR),l.entryName=e.slice(_,_+=l.header.fileNameLength),l.header.extraLength&&(l.extra=e.slice(_,_+=l.header.extraLength)),l.header.commentLength&&(l.comment=e.slice(_,_+l.header.commentLength)),E+=l.header.centralHeaderSize,i[S]=l,r[l.entryName]=l}c.clear(),x()}function h(E){var S=e.length-qe.Constants.ENDHDR,_=Math.max(0,S-65535),l=_,d=e.length,f=-1,w=0;for((typeof u.trailingSpace=="boolean"?u.trailingSpace:!1)&&(_=0),S;S>=l;S--)if(e[S]===80){if(e.readUInt32LE(S)===qe.Constants.ENDSIG){f=S,w=S,d=S+qe.Constants.ENDHDR,l=S-qe.Constants.END64HDR;continue}if(e.readUInt32LE(S)===qe.Constants.END64SIG){l=_;continue}if(e.readUInt32LE(S)===qe.Constants.ZIP64SIG){f=S,d=S+qe.readBigUInt64LE(e,S+qe.Constants.ZIP64SIZE)+qe.Constants.ZIP64LEAD;break}}if(f==-1)throw qe.Errors.INVALID_FORMAT();s.loadFromBinary(e.slice(f,d)),s.commentLength&&(n=e.slice(w+qe.Constants.ENDHDR)),E&&p()}function v(){i.length>1&&!m&&i.sort((E,S)=>E.entryName.toLowerCase().localeCompare(S.entryName.toLowerCase()))}return{get entries(){return o||p(),i.filter(E=>!c.has(E))},get comment(){return g.decode(n)},set comment(E){n=qe.toBuffer(E,g.encode),s.commentLength=n.length},getEntryCount:function(){return o?i.length:s.diskEntries},forEach:function(E){this.entries.forEach(E)},getEntry:function(E){return o||p(),r[E]||null},setEntry:function(E){o||p(),i.push(E),r[E.entryName]=E,s.totalEntries=i.length},deleteFile:function(E,S=!0){o||p();let _=r[E];this.getEntryChildren(_,S).map(d=>d.entryName).forEach(this.deleteEntry)},deleteEntry:function(E){o||p();let S=r[E],_=i.indexOf(S);_>=0&&(i.splice(_,1),delete r[E],s.totalEntries=i.length)},getEntryChildren:function(E,S=!0){if(o||p(),typeof E=="object")if(E.isDirectory&&S){let _=[],l=E.entryName;for(let d of i)d.entryName.startsWith(l)&&_.push(d);return _}else return[E];return[]},getChildCount:function(E){if(E&&E.isDirectory){let S=this.getEntryChildren(E);return S.includes(E)?S.length-1:S.length}return 0},compressToBuffer:function(){o||p(),v();let E=[],S=[],_=0,l=0;s.size=0,s.offset=0;let d=0;for(let O of this.entries){let y=O.getCompressedData();O.header.offset=l;let A=O.packLocalHeader(),C=A.length+y.length;l+=C,E.push(A),E.push(y);let I=O.packCentralHeader();S.push(I),s.size+=I.length,_+=C+I.length,d++}_+=s.mainHeaderSize,s.offset=l,s.totalEntries=d,l=0;let f=Buffer.alloc(_);for(let O of E)O.copy(f,l),l+=O.length;for(let O of S)O.copy(f,l),l+=O.length;let w=s.toBinary();return n&&n.copy(w,qe.Constants.ENDHDR),w.copy(f,l),e=f,o=!1,f},toAsyncBuffer:function(E,S,_,l){try{o||p(),v();let d=[],f=[],w=0,O=0,y=0;s.size=0,s.offset=0;let A=function(C){if(C.length>0){let I=C.shift(),R=I.entryName+I.extra.toString();_&&_(R),I.getCompressedDataAsync(function(F){l&&l(R),I.header.offset=O;let G=I.packLocalHeader(),K=G.length+F.length;O+=K,d.push(G),d.push(F);let $=I.packCentralHeader();f.push($),s.size+=$.length,w+=K+$.length,y++,A(C)})}else{w+=s.mainHeaderSize,s.offset=O,s.totalEntries=y,O=0;let I=Buffer.alloc(w);d.forEach(function(F){F.copy(I,O),O+=F.length}),f.forEach(function(F){F.copy(I,O),O+=F.length});let R=s.toBinary();n&&n.copy(R,qe.Constants.ENDHDR),R.copy(I,O),e=I,o=!1,E(I)}};A(Array.from(this.entries))}catch(d){S(d)}}}}});var Ml=L((_R,jl)=>{"use strict";var fe=Li(),be=require("path"),tE=lo(),iE=Pl(),ci=(...e)=>fe.findLast(e,t=>typeof t=="boolean"),Fl=(...e)=>fe.findLast(e,t=>typeof t=="string"),rE=(...e)=>fe.findLast(e,t=>typeof t=="function"),nE={noSort:!1,readEntries:!1,method:fe.Constants.NONE,fs:null};jl.exports=function(e,t){let i=null,r=Object.assign(Object.create(null),nE);e&&typeof e=="object"&&(e instanceof Uint8Array||(Object.assign(r,e),e=r.input?r.input:void 0,r.input&&delete r.input),Buffer.isBuffer(e)&&(i=e,r.method=fe.Constants.BUFFER,e=void 0)),Object.assign(r,t);let n=new fe(r);if((typeof r.decoder!="object"||typeof r.decoder.encode!="function"||typeof r.decoder.decode!="function")&&(r.decoder=fe.decoder),e&&typeof e=="string")if(n.fs.existsSync(e))r.method=fe.Constants.FILE,r.filename=e,i=n.fs.readFileSync(e);else throw fe.Errors.INVALID_FILENAME();let s=new iE(i,r),{canonical:o,sanitize:a,zipnamefix:c}=fe;function u(p){if(p&&s){var h;if(typeof p=="string"&&(h=s.getEntry(be.posix.normalize(p))),typeof p=="object"&&typeof p.entryName<"u"&&typeof p.header<"u"&&(h=s.getEntry(p.entryName)),h)return h}return null}function m(p){let{join:h,normalize:v,sep:E}=be.posix;return h(".",v(E+p.split("\\").join(E)+E))}function g(p){return p instanceof RegExp?function(h){return function(v){return h.test(v)}}(p):typeof p!="function"?()=>!0:p}let x=(p,h)=>{let v=h.slice(-1);return v=v===n.sep?n.sep:"",be.relative(p,h)+v};return{readFile:function(p,h){var v=u(p);return v&&v.getData(h)||null},childCount:function(p){let h=u(p);if(h)return s.getChildCount(h)},readFileAsync:function(p,h){var v=u(p);v?v.getDataAsync(h):h(null,"getEntry failed for:"+p)},readAsText:function(p,h){var v=u(p);if(v){var E=v.getData();if(E&&E.length)return E.toString(h||"utf8")}return""},readAsTextAsync:function(p,h,v){var E=u(p);E?E.getDataAsync(function(S,_){if(_){h(S,_);return}S&&S.length?h(S.toString(v||"utf8")):h("")}):h("")},deleteFile:function(p,h=!0){var v=u(p);v&&s.deleteFile(v.entryName,h)},deleteEntry:function(p){var h=u(p);h&&s.deleteEntry(h.entryName)},addZipComment:function(p){s.comment=p},getZipComment:function(){return s.comment||""},addZipEntryComment:function(p,h){var v=u(p);v&&(v.comment=h)},getZipEntryComment:function(p){var h=u(p);return h&&h.comment||""},updateFile:function(p,h){var v=u(p);v&&v.setData(h)},addLocalFile:function(p,h,v,E){if(n.fs.existsSync(p)){h=h?m(h):"";let S=be.win32.basename(be.win32.normalize(p));h+=v||S;let _=n.fs.statSync(p),l=_.isFile()?n.fs.readFileSync(p):Buffer.alloc(0);_.isDirectory()&&(h+=n.sep),this.addFile(h,l,E,_)}else throw fe.Errors.FILE_NOT_FOUND(p)},addLocalFileAsync:function(p,h){p=typeof p=="object"?p:{localPath:p};let v=be.resolve(p.localPath),{comment:E}=p,{zipPath:S,zipName:_}=p,l=this;n.fs.stat(v,function(d,f){if(d)return h(d,!1);S=S?m(S):"";let w=be.win32.basename(be.win32.normalize(v));if(S+=_||w,f.isFile())n.fs.readFile(v,function(O,y){return O?h(O,!1):(l.addFile(S,y,E,f),setImmediate(h,void 0,!0))});else if(f.isDirectory())return S+=n.sep,l.addFile(S,Buffer.alloc(0),E,f),setImmediate(h,void 0,!0)})},addLocalFolder:function(p,h,v){if(v=g(v),h=h?m(h):"",p=be.normalize(p),n.fs.existsSync(p)){let E=n.findFiles(p),S=this;if(E.length)for(let _ of E){let l=be.join(h,x(p,_));v(l)&&S.addLocalFile(_,be.dirname(l))}}else throw fe.Errors.FILE_NOT_FOUND(p)},addLocalFolderAsync:function(p,h,v,E){E=g(E),v=v?m(v):"",p=be.normalize(p);var S=this;n.fs.open(p,"r",function(_){if(_&&_.code==="ENOENT")h(void 0,fe.Errors.FILE_NOT_FOUND(p));else if(_)h(void 0,_);else{var l=n.findFiles(p),d=-1,f=function(){if(d+=1,d<l.length){var w=l[d],O=x(p,w).split("\\").join("/");O=O.normalize("NFD").replace(/[\u0300-\u036f]/g,"").replace(/[^\x20-\x7E]/g,""),E(O)?n.fs.stat(w,function(y,A){y&&h(void 0,y),A.isFile()?n.fs.readFile(w,function(C,I){C?h(void 0,C):(S.addFile(v+O,I,"",A),f())}):(S.addFile(v+O+"/",Buffer.alloc(0),"",A),f())}):process.nextTick(()=>{f()})}else h(!0,void 0)};f()}})},addLocalFolderAsync2:function(p,h){let v=this;p=typeof p=="object"?p:{localPath:p},localPath=be.resolve(m(p.localPath));let{zipPath:E,filter:S,namefix:_}=p;S instanceof RegExp?S=function(f){return function(w){return f.test(w)}}(S):typeof S!="function"&&(S=function(){return!0}),E=E?m(E):"",_=="latin1"&&(_=f=>f.normalize("NFD").replace(/[\u0300-\u036f]/g,"").replace(/[^\x20-\x7E]/g,"")),typeof _!="function"&&(_=f=>f);let l=f=>be.join(E,_(x(localPath,f))),d=f=>be.win32.basename(be.win32.normalize(_(f)));n.fs.open(localPath,"r",function(f){f&&f.code==="ENOENT"?h(void 0,fe.Errors.FILE_NOT_FOUND(localPath)):f?h(void 0,f):n.findFilesAsync(localPath,function(w,O){if(w)return h(w);O=O.filter(y=>S(l(y))),O.length||h(void 0,!1),setImmediate(O.reverse().reduce(function(y,A){return function(C,I){if(C||I===!1)return setImmediate(y,C,!1);v.addLocalFileAsync({localPath:A,zipPath:be.dirname(l(A)),zipName:d(A)},y)}},h))})})},addLocalFolderPromise:function(p,h){return new Promise((v,E)=>{this.addLocalFolderAsync2(Object.assign({localPath:p},h),(S,_)=>{S&&E(S),_&&v(this)})})},addFile:function(p,h,v,E){p=c(p);let S=u(p),_=S!=null;_||(S=new tE(r),S.entryName=p),S.comment=v||"";let l=typeof E=="object"&&E instanceof n.fs.Stats;l&&(S.header.time=E.mtime);var d=S.isDirectory?16:0;let f=S.isDirectory?16384:32768;return l?f|=4095&E.mode:typeof E=="number"?f|=4095&E:f|=S.isDirectory?493:420,d=(d|f<<16)>>>0,S.attr=d,S.setData(h),_||s.setEntry(S),S},getEntries:function(p){return s.password=p,s?s.entries:[]},getEntry:function(p){return u(p)},getEntryCount:function(){return s.getEntryCount()},forEach:function(p){return s.forEach(p)},extractEntryTo:function(p,h,v,E,S,_){E=ci(!1,E),S=ci(!1,S),v=ci(!0,v),_=Fl(S,_);var l=u(p);if(!l)throw fe.Errors.NO_ENTRY();var d=o(l.entryName),f=a(h,_&&!l.isDirectory?_:v?d:be.basename(d));if(l.isDirectory){var w=s.getEntryChildren(l);return w.forEach(function(A){if(A.isDirectory)return;var C=A.getData();if(!C)throw fe.Errors.CANT_EXTRACT_FILE();var I=o(A.entryName),R=a(h,v?I:be.basename(I));let F=S?A.header.fileAttr:void 0;n.writeFileTo(R,C,E,F)}),!0}var O=l.getData(s.password);if(!O)throw fe.Errors.CANT_EXTRACT_FILE();if(n.fs.existsSync(f)&&!E)throw fe.Errors.CANT_OVERRIDE();let y=S?p.header.fileAttr:void 0;return n.writeFileTo(f,O,E,y),!0},test:function(p){if(!s)return!1;for(var h in s.entries)try{if(h.isDirectory)continue;var v=s.entries[h].getData(p);if(!v)return!1}catch{return!1}return!0},extractAllTo:function(p,h,v,E){if(v=ci(!1,v),E=Fl(v,E),h=ci(!1,h),!s)throw fe.Errors.NO_ZIP();s.entries.forEach(function(S){var _=a(p,o(S.entryName));if(S.isDirectory){n.makeDir(_);return}var l=S.getData(E);if(!l)throw fe.Errors.CANT_EXTRACT_FILE();let d=v?S.header.fileAttr:void 0;n.writeFileTo(_,l,h,d);try{n.fs.utimesSync(_,S.header.time,S.header.time)}catch{throw fe.Errors.CANT_EXTRACT_FILE()}})},extractAllToAsync:function(p,h,v,E){if(E=rE(h,v,E),v=ci(!1,v),h=ci(!1,h),!E)return new Promise((f,w)=>{this.extractAllToAsync(p,h,v,function(O){O?w(O):f(this)})});if(!s){E(fe.Errors.NO_ZIP());return}p=be.resolve(p);let S=f=>a(p,be.normalize(o(f.entryName))),_=(f,w)=>new Error(f+': "'+w+'"'),l=[],d=[];s.entries.forEach(f=>{f.isDirectory?l.push(f):d.push(f)});for(let f of l){let w=S(f),O=v?f.header.fileAttr:void 0;try{n.makeDir(w),O&&n.fs.chmodSync(w,O),n.fs.utimesSync(w,f.header.time,f.header.time)}catch{E(_("Unable to create folder",w))}}d.reverse().reduce(function(f,w){return function(O){if(O)f(O);else{let y=be.normalize(o(w.entryName)),A=a(p,y);w.getDataAsync(function(C,I){if(I)f(I);else if(!C)f(fe.Errors.CANT_EXTRACT_FILE());else{let R=v?w.header.fileAttr:void 0;n.writeFileToAsync(A,C,h,R,function(F){F||f(_("Unable to write file",A)),n.fs.utimes(A,w.header.time,w.header.time,function(G){G?f(_("Unable to set times",A)):f()})})}})}}},E)()},writeZip:function(p,h){if(arguments.length===1&&typeof p=="function"&&(h=p,p=""),!p&&r.filename&&(p=r.filename),!!p){var v=s.compressToBuffer();if(v){var E=n.writeFileTo(p,v,!0);typeof h=="function"&&h(E?null:new Error("failed"),"")}}},writeZipPromise:function(p,h){let{overwrite:v,perm:E}=Object.assign({overwrite:!0},h);return new Promise((S,_)=>{!p&&r.filename&&(p=r.filename),p||_("ADM-ZIP: ZIP File Name Missing"),this.toBufferPromise().then(l=>{let d=f=>f?S(f):_("ADM-ZIP: Wasn't able to write zip file");n.writeFileToAsync(p,l,v,E,d)},_)})},toBufferPromise:function(){return new Promise((p,h)=>{s.toAsyncBuffer(p,h)})},toBuffer:function(p,h,v,E){return typeof p=="function"?(s.toAsyncBuffer(p,h,v,E),null):s.compressToBuffer()}}}});var $l=L((TR,Ul)=>{"use strict";function sE(e,t){var i=e;t.slice(0,-1).forEach(function(n){i=i[n]||{}});var r=t[t.length-1];return r in i}function ql(e){return typeof e=="number"||/^0x[0-9a-f]+$/i.test(e)?!0:/^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(e)}function Bl(e,t){return t==="constructor"&&typeof e[t]=="function"||t==="__proto__"}Ul.exports=function(e,t){t||(t={});var i={bools:{},strings:{},unknownFn:null};typeof t.unknown=="function"&&(i.unknownFn=t.unknown),typeof t.boolean=="boolean"&&t.boolean?i.allBools=!0:[].concat(t.boolean).filter(Boolean).forEach(function(d){i.bools[d]=!0});var r={};function n(d){return r[d].some(function(f){return i.bools[f]})}Object.keys(t.alias||{}).forEach(function(d){r[d]=[].concat(t.alias[d]),r[d].forEach(function(f){r[f]=[d].concat(r[d].filter(function(w){return f!==w}))})}),[].concat(t.string).filter(Boolean).forEach(function(d){i.strings[d]=!0,r[d]&&[].concat(r[d]).forEach(function(f){i.strings[f]=!0})});var s=t.default||{},o={_:[]};function a(d,f){return i.allBools&&/^--[^=]+$/.test(f)||i.strings[d]||i.bools[d]||r[d]}function c(d,f,w){for(var O=d,y=0;y<f.length-1;y++){var A=f[y];if(Bl(O,A))return;O[A]===void 0&&(O[A]={}),(O[A]===Object.prototype||O[A]===Number.prototype||O[A]===String.prototype)&&(O[A]={}),O[A]===Array.prototype&&(O[A]=[]),O=O[A]}var C=f[f.length-1];Bl(O,C)||((O===Object.prototype||O===Number.prototype||O===String.prototype)&&(O={}),O===Array.prototype&&(O=[]),O[C]===void 0||i.bools[C]||typeof O[C]=="boolean"?O[C]=w:Array.isArray(O[C])?O[C].push(w):O[C]=[O[C],w])}function u(d,f,w){if(!(w&&i.unknownFn&&!a(d,w)&&i.unknownFn(w)===!1)){var O=!i.strings[d]&&ql(f)?Number(f):f;c(o,d.split("."),O),(r[d]||[]).forEach(function(y){c(o,y.split("."),O)})}}Object.keys(i.bools).forEach(function(d){u(d,s[d]===void 0?!1:s[d])});var m=[];e.indexOf("--")!==-1&&(m=e.slice(e.indexOf("--")+1),e=e.slice(0,e.indexOf("--")));for(var g=0;g<e.length;g++){var x=e[g],p,h;if(/^--.+=/.test(x)){var v=x.match(/^--([^=]+)=([\s\S]*)$/);p=v[1];var E=v[2];i.bools[p]&&(E=E!=="false"),u(p,E,x)}else if(/^--no-.+/.test(x))p=x.match(/^--no-(.+)/)[1],u(p,!1,x);else if(/^--.+/.test(x))p=x.match(/^--(.+)/)[1],h=e[g+1],h!==void 0&&!/^(-|--)[^-]/.test(h)&&!i.bools[p]&&!i.allBools&&(!r[p]||!n(p))?(u(p,h,x),g+=1):/^(true|false)$/.test(h)?(u(p,h==="true",x),g+=1):u(p,i.strings[p]?"":!0,x);else if(/^-[^-]+/.test(x)){for(var S=x.slice(1,-1).split(""),_=!1,l=0;l<S.length;l++){if(h=x.slice(l+2),h==="-"){u(S[l],h,x);continue}if(/[A-Za-z]/.test(S[l])&&h[0]==="="){u(S[l],h.slice(1),x),_=!0;break}if(/[A-Za-z]/.test(S[l])&&/-?\d+(\.\d*)?(e-?\d+)?$/.test(h)){u(S[l],h,x),_=!0;break}if(S[l+1]&&S[l+1].match(/\W/)){u(S[l],x.slice(l+2),x),_=!0;break}else u(S[l],i.strings[S[l]]?"":!0,x)}p=x.slice(-1)[0],!_&&p!=="-"&&(e[g+1]&&!/^(-|--)[^-]/.test(e[g+1])&&!i.bools[p]&&(!r[p]||!n(p))?(u(p,e[g+1],x),g+=1):e[g+1]&&/^(true|false)$/.test(e[g+1])?(u(p,e[g+1]==="true",x),g+=1):u(p,i.strings[p]?"":!0,x))}else if((!i.unknownFn||i.unknownFn(x)!==!1)&&o._.push(i.strings._||!ql(x)?x:Number(x)),t.stopEarly){o._.push.apply(o._,e.slice(g+1));break}}return Object.keys(s).forEach(function(d){sE(o,d.split("."))||(c(o,d.split("."),s[d]),(r[d]||[]).forEach(function(f){c(o,f.split("."),s[d])}))}),t["--"]?o["--"]=m.slice():m.forEach(function(d){o._.push(d)}),o}});var he=L((SR,Hl)=>{"use strict";var{FORCE_COLOR:oE,NODE_DISABLE_COLORS:aE,TERM:cE}=process.env,se={enabled:!aE&&cE!=="dumb"&&oE!=="0",reset:ce(0,0),bold:ce(1,22),dim:ce(2,22),italic:ce(3,23),underline:ce(4,24),inverse:ce(7,27),hidden:ce(8,28),strikethrough:ce(9,29),black:ce(30,39),red:ce(31,39),green:ce(32,39),yellow:ce(33,39),blue:ce(34,39),magenta:ce(35,39),cyan:ce(36,39),white:ce(37,39),gray:ce(90,39),grey:ce(90,39),bgBlack:ce(40,49),bgRed:ce(41,49),bgGreen:ce(42,49),bgYellow:ce(43,49),bgBlue:ce(44,49),bgMagenta:ce(45,49),bgCyan:ce(46,49),bgWhite:ce(47,49)};function zl(e,t){let i=0,r,n="",s="";for(;i<e.length;i++)r=e[i],n+=r.open,s+=r.close,t.includes(r.close)&&(t=t.replace(r.rgx,r.close+r.open));return n+t+s}function uE(e,t){let i={has:e,keys:t};return i.reset=se.reset.bind(i),i.bold=se.bold.bind(i),i.dim=se.dim.bind(i),i.italic=se.italic.bind(i),i.underline=se.underline.bind(i),i.inverse=se.inverse.bind(i),i.hidden=se.hidden.bind(i),i.strikethrough=se.strikethrough.bind(i),i.black=se.black.bind(i),i.red=se.red.bind(i),i.green=se.green.bind(i),i.yellow=se.yellow.bind(i),i.blue=se.blue.bind(i),i.magenta=se.magenta.bind(i),i.cyan=se.cyan.bind(i),i.white=se.white.bind(i),i.gray=se.gray.bind(i),i.grey=se.grey.bind(i),i.bgBlack=se.bgBlack.bind(i),i.bgRed=se.bgRed.bind(i),i.bgGreen=se.bgGreen.bind(i),i.bgYellow=se.bgYellow.bind(i),i.bgBlue=se.bgBlue.bind(i),i.bgMagenta=se.bgMagenta.bind(i),i.bgCyan=se.bgCyan.bind(i),i.bgWhite=se.bgWhite.bind(i),i}function ce(e,t){let i={open:`\x1B[${e}m`,close:`\x1B[${t}m`,rgx:new RegExp(`\\x1b\\[${t}m`,"g")};return function(r){return this!==void 0&&this.has!==void 0?(this.has.includes(e)||(this.has.push(e),this.keys.push(i)),r===void 0?this:se.enabled?zl(this.keys,r+""):r+""):r===void 0?uE([e],[i]):se.enabled?zl([i],r+""):r+""}}Hl.exports=se});var Vl=L((CR,Gl)=>{"use strict";Gl.exports=(e,t)=>{if(!(e.meta&&e.name!=="escape")){if(e.ctrl){if(e.name==="a")return"first";if(e.name==="c"||e.name==="d")return"abort";if(e.name==="e")return"last";if(e.name==="g")return"reset"}if(t){if(e.name==="j")return"down";if(e.name==="k")return"up"}return e.name==="return"||e.name==="enter"?"submit":e.name==="backspace"?"delete":e.name==="delete"?"deleteForward":e.name==="abort"?"abort":e.name==="escape"?"exit":e.name==="tab"?"next":e.name==="pagedown"?"nextPage":e.name==="pageup"?"prevPage":e.name==="home"?"home":e.name==="end"?"end":e.name==="up"?"up":e.name==="down"?"down":e.name==="right"?"right":e.name==="left"?"left":!1}}});var hn=L((OR,Xl)=>{"use strict";Xl.exports=e=>{let t=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))"].join("|"),i=new RegExp(t,"g");return typeof e=="string"?e.replace(i,""):e}});var ge=L((AR,Yl)=>{"use strict";var po="\x1B",me=`${po}[`,lE="\x07",fo={to(e,t){return t?`${me}${t+1};${e+1}H`:`${me}${e+1}G`},move(e,t){let i="";return e<0?i+=`${me}${-e}D`:e>0&&(i+=`${me}${e}C`),t<0?i+=`${me}${-t}A`:t>0&&(i+=`${me}${t}B`),i},up:(e=1)=>`${me}${e}A`,down:(e=1)=>`${me}${e}B`,forward:(e=1)=>`${me}${e}C`,backward:(e=1)=>`${me}${e}D`,nextLine:(e=1)=>`${me}E`.repeat(e),prevLine:(e=1)=>`${me}F`.repeat(e),left:`${me}G`,hide:`${me}?25l`,show:`${me}?25h`,save:`${po}7`,restore:`${po}8`},pE={up:(e=1)=>`${me}S`.repeat(e),down:(e=1)=>`${me}T`.repeat(e)},dE={screen:`${me}2J`,up:(e=1)=>`${me}1J`.repeat(e),down:(e=1)=>`${me}J`.repeat(e),line:`${me}2K`,lineEnd:`${me}K`,lineStart:`${me}1K`,lines(e){let t="";for(let i=0;i<e;i++)t+=this.line+(i<e-1?fo.up():"");return e&&(t+=fo.left),t}};Yl.exports={cursor:fo,scroll:pE,erase:dE,beep:lE}});var Ql=L((DR,Zl)=>{"use strict";function fE(e,t){var i=typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(!i){if(Array.isArray(e)||(i=hE(e))||t&&e&&typeof e.length=="number"){i&&(e=i);var r=0,n=function(){};return{s:n,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(u){throw u},f:n}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var s=!0,o=!1,a;return{s:function(){i=i.call(e)},n:function(){var u=i.next();return s=u.done,u},e:function(u){o=!0,a=u},f:function(){try{!s&&i.return!=null&&i.return()}finally{if(o)throw a}}}}function hE(e,t){if(e){if(typeof e=="string")return Wl(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);if(i==="Object"&&e.constructor&&(i=e.constructor.name),i==="Map"||i==="Set")return Array.from(e);if(i==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return Wl(e,t)}}function Wl(e,t){(t==null||t>e.length)&&(t=e.length);for(var i=0,r=new Array(t);i<t;i++)r[i]=e[i];return r}var mE=hn(),Jl=ge(),Kl=Jl.erase,gE=Jl.cursor,xE=e=>[...mE(e)].length;Zl.exports=function(e,t){if(!t)return Kl.line+gE.to(0);let i=0,r=e.split(/\r?\n/);var n=fE(r),s;try{for(n.s();!(s=n.n()).done;){let o=s.value;i+=1+Math.floor(Math.max(xE(o)-1,0)/t)}}catch(o){n.e(o)}finally{n.f()}return Kl.lines(i)}});var ho=L((IR,ep)=>{"use strict";var lr={arrowUp:"\u2191",arrowDown:"\u2193",arrowLeft:"\u2190",arrowRight:"\u2192",radioOn:"\u25C9",radioOff:"\u25EF",tick:"\u2714",cross:"\u2716",ellipsis:"\u2026",pointerSmall:"\u203A",line:"\u2500",pointer:"\u276F"},vE={arrowUp:lr.arrowUp,arrowDown:lr.arrowDown,arrowLeft:lr.arrowLeft,arrowRight:lr.arrowRight,radioOn:"(*)",radioOff:"( )",tick:"\u221A",cross:"\xD7",ellipsis:"...",pointerSmall:"\xBB",line:"\u2500",pointer:">"},yE=process.platform==="win32"?vE:lr;ep.exports=yE});var ip=L((NR,tp)=>{"use strict";var Ri=he(),ui=ho(),mo=Object.freeze({password:{scale:1,render:e=>"*".repeat(e.length)},emoji:{scale:2,render:e=>"\u{1F603}".repeat(e.length)},invisible:{scale:0,render:e=>""},default:{scale:1,render:e=>`${e}`}}),bE=e=>mo[e]||mo.default,pr=Object.freeze({aborted:Ri.red(ui.cross),done:Ri.green(ui.tick),exited:Ri.yellow(ui.cross),default:Ri.cyan("?")}),wE=(e,t,i)=>t?pr.aborted:i?pr.exited:e?pr.done:pr.default,EE=e=>Ri.gray(e?ui.ellipsis:ui.pointerSmall),_E=(e,t)=>Ri.gray(e?t?ui.pointerSmall:"+":ui.line);tp.exports={styles:mo,render:bE,symbols:pr,symbol:wE,delimiter:EE,item:_E}});var np=L((LR,rp)=>{"use strict";var TE=hn();rp.exports=function(e,t){let i=String(TE(e)||"").split(/\r?\n/);return t?i.map(r=>Math.ceil(r.length/t)).reduce((r,n)=>r+n):i.length}});var op=L((kR,sp)=>{"use strict";sp.exports=(e,t={})=>{let i=Number.isSafeInteger(parseInt(t.margin))?new Array(parseInt(t.margin)).fill(" ").join(""):t.margin||"",r=t.width;return(e||"").split(/\r?\n/g).map(n=>n.split(/\s+/g).reduce((s,o)=>(o.length+i.length>=r||s[s.length-1].length+o.length+1<r?s[s.length-1]+=` ${o}`:s.push(`${i}${o}`),s),[i]).join(`
`)).join(`
`)}});var cp=L((RR,ap)=>{"use strict";ap.exports=(e,t,i)=>{i=i||t;let r=Math.min(t-i,e-Math.floor(i/2));r<0&&(r=0);let n=Math.min(r+i,t);return{startIndex:r,endIndex:n}}});var gt=L((PR,up)=>{"use strict";up.exports={action:Vl(),clear:Ql(),style:ip(),strip:hn(),figures:ho(),lines:np(),wrap:op(),entriesToDisplay:cp()}});var Lt=L((FR,dp)=>{"use strict";var lp=require("readline"),SE=gt(),CE=SE.action,OE=require("events"),pp=ge(),AE=pp.beep,DE=pp.cursor,IE=he(),go=class extends OE{constructor(t={}){super(),this.firstRender=!0,this.in=t.stdin||process.stdin,this.out=t.stdout||process.stdout,this.onRender=(t.onRender||(()=>{})).bind(this);let i=lp.createInterface({input:this.in,escapeCodeTimeout:50});lp.emitKeypressEvents(this.in,i),this.in.isTTY&&this.in.setRawMode(!0);let r=["SelectPrompt","MultiselectPrompt"].indexOf(this.constructor.name)>-1,n=(s,o)=>{let a=CE(o,r);a===!1?this._&&this._(s,o):typeof this[a]=="function"?this[a](o):this.bell()};this.close=()=>{this.out.write(DE.show),this.in.removeListener("keypress",n),this.in.isTTY&&this.in.setRawMode(!1),i.close(),this.emit(this.aborted?"abort":this.exited?"exit":"submit",this.value),this.closed=!0},this.in.on("keypress",n)}fire(){this.emit("state",{value:this.value,aborted:!!this.aborted,exited:!!this.exited})}bell(){this.out.write(AE)}render(){this.onRender(IE),this.firstRender&&(this.firstRender=!1)}};dp.exports=go});var xp=L((jR,gp)=>{"use strict";function fp(e,t,i,r,n,s,o){try{var a=e[s](o),c=a.value}catch(u){i(u);return}a.done?t(c):Promise.resolve(c).then(r,n)}function hp(e){return function(){var t=this,i=arguments;return new Promise(function(r,n){var s=e.apply(t,i);function o(c){fp(s,r,n,o,a,"next",c)}function a(c){fp(s,r,n,o,a,"throw",c)}o(void 0)})}}var mn=he(),NE=Lt(),mp=ge(),LE=mp.erase,dr=mp.cursor,gn=gt(),xo=gn.style,vo=gn.clear,kE=gn.lines,RE=gn.figures,yo=class extends NE{constructor(t={}){super(t),this.transform=xo.render(t.style),this.scale=this.transform.scale,this.msg=t.message,this.initial=t.initial||"",this.validator=t.validate||(()=>!0),this.value="",this.errorMsg=t.error||"Please Enter A Valid Value",this.cursor=+!!this.initial,this.cursorOffset=0,this.clear=vo("",this.out.columns),this.render()}set value(t){!t&&this.initial?(this.placeholder=!0,this.rendered=mn.gray(this.transform.render(this.initial))):(this.placeholder=!1,this.rendered=this.transform.render(t)),this._value=t,this.fire()}get value(){return this._value}reset(){this.value="",this.cursor=+!!this.initial,this.cursorOffset=0,this.fire(),this.render()}exit(){this.abort()}abort(){this.value=this.value||this.initial,this.done=this.aborted=!0,this.error=!1,this.red=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}validate(){var t=this;return hp(function*(){let i=yield t.validator(t.value);typeof i=="string"&&(t.errorMsg=i,i=!1),t.error=!i})()}submit(){var t=this;return hp(function*(){if(t.value=t.value||t.initial,t.cursorOffset=0,t.cursor=t.rendered.length,yield t.validate(),t.error){t.red=!0,t.fire(),t.render();return}t.done=!0,t.aborted=!1,t.fire(),t.render(),t.out.write(`
`),t.close()})()}next(){if(!this.placeholder)return this.bell();this.value=this.initial,this.cursor=this.rendered.length,this.fire(),this.render()}moveCursor(t){this.placeholder||(this.cursor=this.cursor+t,this.cursorOffset+=t)}_(t,i){let r=this.value.slice(0,this.cursor),n=this.value.slice(this.cursor);this.value=`${r}${t}${n}`,this.red=!1,this.cursor=this.placeholder?0:r.length+1,this.render()}delete(){if(this.isCursorAtStart())return this.bell();let t=this.value.slice(0,this.cursor-1),i=this.value.slice(this.cursor);this.value=`${t}${i}`,this.red=!1,this.isCursorAtStart()?this.cursorOffset=0:(this.cursorOffset++,this.moveCursor(-1)),this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();let t=this.value.slice(0,this.cursor),i=this.value.slice(this.cursor+1);this.value=`${t}${i}`,this.red=!1,this.isCursorAtEnd()?this.cursorOffset=0:this.cursorOffset++,this.render()}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length,this.render()}left(){if(this.cursor<=0||this.placeholder)return this.bell();this.moveCursor(-1),this.render()}right(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();this.moveCursor(1),this.render()}isCursorAtStart(){return this.cursor===0||this.placeholder&&this.cursor===1}isCursorAtEnd(){return this.cursor===this.rendered.length||this.placeholder&&this.cursor===this.rendered.length+1}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(dr.down(kE(this.outputError,this.out.columns)-1)+vo(this.outputError,this.out.columns)),this.out.write(vo(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[xo.symbol(this.done,this.aborted),mn.bold(this.msg),xo.delimiter(this.done),this.red?mn.red(this.rendered):this.rendered].join(" "),this.error&&(this.outputError+=this.errorMsg.split(`
`).reduce((t,i,r)=>t+`
${r?" ":RE.pointerSmall} ${mn.red().italic(i)}`,"")),this.out.write(LE.line+dr.to(0)+this.outputText+dr.save+this.outputError+dr.restore+dr.move(this.cursorOffset,0)))}};gp.exports=yo});var wp=L((MR,bp)=>{"use strict";var kt=he(),PE=Lt(),fr=gt(),vp=fr.style,yp=fr.clear,xn=fr.figures,FE=fr.wrap,jE=fr.entriesToDisplay,ME=ge(),qE=ME.cursor,bo=class extends PE{constructor(t={}){super(t),this.msg=t.message,this.hint=t.hint||"- Use arrow-keys. Return to submit.",this.warn=t.warn||"- This option is disabled",this.cursor=t.initial||0,this.choices=t.choices.map((i,r)=>(typeof i=="string"&&(i={title:i,value:r}),{title:i&&(i.title||i.value||i),value:i&&(i.value===void 0?r:i.value),description:i&&i.description,selected:i&&i.selected,disabled:i&&i.disabled})),this.optionsPerPage=t.optionsPerPage||10,this.value=(this.choices[this.cursor]||{}).value,this.clear=yp("",this.out.columns),this.render()}moveCursor(t){this.cursor=t,this.value=this.choices[t].value,this.fire()}reset(){this.moveCursor(0),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.selection.disabled?this.bell():(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close())}first(){this.moveCursor(0),this.render()}last(){this.moveCursor(this.choices.length-1),this.render()}up(){this.cursor===0?this.moveCursor(this.choices.length-1):this.moveCursor(this.cursor-1),this.render()}down(){this.cursor===this.choices.length-1?this.moveCursor(0):this.moveCursor(this.cursor+1),this.render()}next(){this.moveCursor((this.cursor+1)%this.choices.length),this.render()}_(t,i){if(t===" ")return this.submit()}get selection(){return this.choices[this.cursor]}render(){if(this.closed)return;this.firstRender?this.out.write(qE.hide):this.out.write(yp(this.outputText,this.out.columns)),super.render();let t=jE(this.cursor,this.choices.length,this.optionsPerPage),i=t.startIndex,r=t.endIndex;if(this.outputText=[vp.symbol(this.done,this.aborted),kt.bold(this.msg),vp.delimiter(!1),this.done?this.selection.title:this.selection.disabled?kt.yellow(this.warn):kt.gray(this.hint)].join(" "),!this.done){this.outputText+=`
`;for(let n=i;n<r;n++){let s,o,a="",c=this.choices[n];n===i&&i>0?o=xn.arrowUp:n===r-1&&r<this.choices.length?o=xn.arrowDown:o=" ",c.disabled?(s=this.cursor===n?kt.gray().underline(c.title):kt.strikethrough().gray(c.title),o=(this.cursor===n?kt.bold().gray(xn.pointer)+" ":"  ")+o):(s=this.cursor===n?kt.cyan().underline(c.title):c.title,o=(this.cursor===n?kt.cyan(xn.pointer)+" ":"  ")+o,c.description&&this.cursor===n&&(a=` - ${c.description}`,(o.length+s.length+a.length>=this.out.columns||c.description.split(/\r?\n/).length>1)&&(a=`
`+FE(c.description,{margin:3,width:this.out.columns})))),this.outputText+=`${o} ${s}${kt.gray(a)}
`}}this.out.write(this.outputText)}};bp.exports=bo});var Op=L((qR,Cp)=>{"use strict";var vn=he(),BE=Lt(),Tp=gt(),Ep=Tp.style,UE=Tp.clear,Sp=ge(),_p=Sp.cursor,$E=Sp.erase,wo=class extends BE{constructor(t={}){super(t),this.msg=t.message,this.value=!!t.initial,this.active=t.active||"on",this.inactive=t.inactive||"off",this.initialValue=this.value,this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}deactivate(){if(this.value===!1)return this.bell();this.value=!1,this.render()}activate(){if(this.value===!0)return this.bell();this.value=!0,this.render()}delete(){this.deactivate()}left(){this.deactivate()}right(){this.activate()}down(){this.deactivate()}up(){this.activate()}next(){this.value=!this.value,this.fire(),this.render()}_(t,i){if(t===" ")this.value=!this.value;else if(t==="1")this.value=!0;else if(t==="0")this.value=!1;else return this.bell();this.render()}render(){this.closed||(this.firstRender?this.out.write(_p.hide):this.out.write(UE(this.outputText,this.out.columns)),super.render(),this.outputText=[Ep.symbol(this.done,this.aborted),vn.bold(this.msg),Ep.delimiter(this.done),this.value?this.inactive:vn.cyan().underline(this.inactive),vn.gray("/"),this.value?vn.cyan().underline(this.active):this.active].join(" "),this.out.write($E.line+_p.to(0)+this.outputText))}};Cp.exports=wo});var wt=L((BR,Ap)=>{"use strict";var Eo=class e{constructor({token:t,date:i,parts:r,locales:n}){this.token=t,this.date=i||new Date,this.parts=r||[this],this.locales=n||{}}up(){}down(){}next(){let t=this.parts.indexOf(this);return this.parts.find((i,r)=>r>t&&i instanceof e)}setTo(t){}prev(){let t=[].concat(this.parts).reverse(),i=t.indexOf(this);return t.find((r,n)=>n>i&&r instanceof e)}toString(){return String(this.date)}};Ap.exports=Eo});var Ip=L((UR,Dp)=>{"use strict";var zE=wt(),_o=class extends zE{constructor(t={}){super(t)}up(){this.date.setHours((this.date.getHours()+12)%24)}down(){this.up()}toString(){let t=this.date.getHours()>12?"pm":"am";return/\A/.test(this.token)?t.toUpperCase():t}};Dp.exports=_o});var Lp=L(($R,Np)=>{"use strict";var HE=wt(),GE=e=>(e=e%10,e===1?"st":e===2?"nd":e===3?"rd":"th"),To=class extends HE{constructor(t={}){super(t)}up(){this.date.setDate(this.date.getDate()+1)}down(){this.date.setDate(this.date.getDate()-1)}setTo(t){this.date.setDate(parseInt(t.substr(-2)))}toString(){let t=this.date.getDate(),i=this.date.getDay();return this.token==="DD"?String(t).padStart(2,"0"):this.token==="Do"?t+GE(t):this.token==="d"?i+1:this.token==="ddd"?this.locales.weekdaysShort[i]:this.token==="dddd"?this.locales.weekdays[i]:t}};Np.exports=To});var Rp=L((zR,kp)=>{"use strict";var VE=wt(),So=class extends VE{constructor(t={}){super(t)}up(){this.date.setHours(this.date.getHours()+1)}down(){this.date.setHours(this.date.getHours()-1)}setTo(t){this.date.setHours(parseInt(t.substr(-2)))}toString(){let t=this.date.getHours();return/h/.test(this.token)&&(t=t%12||12),this.token.length>1?String(t).padStart(2,"0"):t}};kp.exports=So});var Fp=L((HR,Pp)=>{"use strict";var XE=wt(),Co=class extends XE{constructor(t={}){super(t)}up(){this.date.setMilliseconds(this.date.getMilliseconds()+1)}down(){this.date.setMilliseconds(this.date.getMilliseconds()-1)}setTo(t){this.date.setMilliseconds(parseInt(t.substr(-this.token.length)))}toString(){return String(this.date.getMilliseconds()).padStart(4,"0").substr(0,this.token.length)}};Pp.exports=Co});var Mp=L((GR,jp)=>{"use strict";var YE=wt(),Oo=class extends YE{constructor(t={}){super(t)}up(){this.date.setMinutes(this.date.getMinutes()+1)}down(){this.date.setMinutes(this.date.getMinutes()-1)}setTo(t){this.date.setMinutes(parseInt(t.substr(-2)))}toString(){let t=this.date.getMinutes();return this.token.length>1?String(t).padStart(2,"0"):t}};jp.exports=Oo});var Bp=L((VR,qp)=>{"use strict";var WE=wt(),Ao=class extends WE{constructor(t={}){super(t)}up(){this.date.setMonth(this.date.getMonth()+1)}down(){this.date.setMonth(this.date.getMonth()-1)}setTo(t){t=parseInt(t.substr(-2))-1,this.date.setMonth(t<0?0:t)}toString(){let t=this.date.getMonth(),i=this.token.length;return i===2?String(t+1).padStart(2,"0"):i===3?this.locales.monthsShort[t]:i===4?this.locales.months[t]:String(t+1)}};qp.exports=Ao});var $p=L((XR,Up)=>{"use strict";var KE=wt(),Do=class extends KE{constructor(t={}){super(t)}up(){this.date.setSeconds(this.date.getSeconds()+1)}down(){this.date.setSeconds(this.date.getSeconds()-1)}setTo(t){this.date.setSeconds(parseInt(t.substr(-2)))}toString(){let t=this.date.getSeconds();return this.token.length>1?String(t).padStart(2,"0"):t}};Up.exports=Do});var Hp=L((YR,zp)=>{"use strict";var JE=wt(),Io=class extends JE{constructor(t={}){super(t)}up(){this.date.setFullYear(this.date.getFullYear()+1)}down(){this.date.setFullYear(this.date.getFullYear()-1)}setTo(t){this.date.setFullYear(t.substr(-4))}toString(){let t=String(this.date.getFullYear()).padStart(4,"0");return this.token.length===2?t.substr(-2):t}};zp.exports=Io});var Vp=L((WR,Gp)=>{"use strict";Gp.exports={DatePart:wt(),Meridiem:Ip(),Day:Lp(),Hours:Rp(),Milliseconds:Fp(),Minutes:Mp(),Month:Bp(),Seconds:$p(),Year:Hp()}});var id=L((KR,td)=>{"use strict";function Xp(e,t,i,r,n,s,o){try{var a=e[s](o),c=a.value}catch(u){i(u);return}a.done?t(c):Promise.resolve(c).then(r,n)}function Yp(e){return function(){var t=this,i=arguments;return new Promise(function(r,n){var s=e.apply(t,i);function o(c){Xp(s,r,n,o,a,"next",c)}function a(c){Xp(s,r,n,o,a,"throw",c)}o(void 0)})}}var No=he(),ZE=Lt(),ko=gt(),Wp=ko.style,Kp=ko.clear,QE=ko.figures,ed=ge(),e_=ed.erase,Jp=ed.cursor,Rt=Vp(),Zp=Rt.DatePart,t_=Rt.Meridiem,i_=Rt.Day,r_=Rt.Hours,n_=Rt.Milliseconds,s_=Rt.Minutes,o_=Rt.Month,a_=Rt.Seconds,c_=Rt.Year,u_=/\\(.)|"((?:\\["\\]|[^"])+)"|(D[Do]?|d{3,4}|d)|(M{1,4})|(YY(?:YY)?)|([aA])|([Hh]{1,2})|(m{1,2})|(s{1,2})|(S{1,4})|./g,Qp={1:({token:e})=>e.replace(/\\(.)/g,"$1"),2:e=>new i_(e),3:e=>new o_(e),4:e=>new c_(e),5:e=>new t_(e),6:e=>new r_(e),7:e=>new s_(e),8:e=>new a_(e),9:e=>new n_(e)},l_={months:"January,February,March,April,May,June,July,August,September,October,November,December".split(","),monthsShort:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),weekdays:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),weekdaysShort:"Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(",")},Lo=class extends ZE{constructor(t={}){super(t),this.msg=t.message,this.cursor=0,this.typed="",this.locales=Object.assign(l_,t.locales),this._date=t.initial||new Date,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.mask=t.mask||"YYYY-MM-DD HH:mm:ss",this.clear=Kp("",this.out.columns),this.render()}get value(){return this.date}get date(){return this._date}set date(t){t&&this._date.setTime(t.getTime())}set mask(t){let i;for(this.parts=[];i=u_.exec(t);){let n=i.shift(),s=i.findIndex(o=>o!=null);this.parts.push(s in Qp?Qp[s]({token:i[s]||n,date:this.date,parts:this.parts,locales:this.locales}):i[s]||n)}let r=this.parts.reduce((n,s)=>(typeof s=="string"&&typeof n[n.length-1]=="string"?n[n.length-1]+=s:n.push(s),n),[]);this.parts.splice(0),this.parts.push(...r),this.reset()}moveCursor(t){this.typed="",this.cursor=t,this.fire()}reset(){this.moveCursor(this.parts.findIndex(t=>t instanceof Zp)),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}validate(){var t=this;return Yp(function*(){let i=yield t.validator(t.value);typeof i=="string"&&(t.errorMsg=i,i=!1),t.error=!i})()}submit(){var t=this;return Yp(function*(){if(yield t.validate(),t.error){t.color="red",t.fire(),t.render();return}t.done=!0,t.aborted=!1,t.fire(),t.render(),t.out.write(`
`),t.close()})()}up(){this.typed="",this.parts[this.cursor].up(),this.render()}down(){this.typed="",this.parts[this.cursor].down(),this.render()}left(){let t=this.parts[this.cursor].prev();if(t==null)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}right(){let t=this.parts[this.cursor].next();if(t==null)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}next(){let t=this.parts[this.cursor].next();this.moveCursor(t?this.parts.indexOf(t):this.parts.findIndex(i=>i instanceof Zp)),this.render()}_(t){/\d/.test(t)&&(this.typed+=t,this.parts[this.cursor].setTo(this.typed),this.render())}render(){this.closed||(this.firstRender?this.out.write(Jp.hide):this.out.write(Kp(this.outputText,this.out.columns)),super.render(),this.outputText=[Wp.symbol(this.done,this.aborted),No.bold(this.msg),Wp.delimiter(!1),this.parts.reduce((t,i,r)=>t.concat(r===this.cursor&&!this.done?No.cyan().underline(i.toString()):i),[]).join("")].join(" "),this.error&&(this.outputText+=this.errorMsg.split(`
`).reduce((t,i,r)=>t+`
${r?" ":QE.pointerSmall} ${No.red().italic(i)}`,"")),this.out.write(e_.line+Jp.to(0)+this.outputText))}};td.exports=Lo});var ud=L((JR,cd)=>{"use strict";function rd(e,t,i,r,n,s,o){try{var a=e[s](o),c=a.value}catch(u){i(u);return}a.done?t(c):Promise.resolve(c).then(r,n)}function nd(e){return function(){var t=this,i=arguments;return new Promise(function(r,n){var s=e.apply(t,i);function o(c){rd(s,r,n,o,a,"next",c)}function a(c){rd(s,r,n,o,a,"throw",c)}o(void 0)})}}var yn=he(),p_=Lt(),ad=ge(),bn=ad.cursor,d_=ad.erase,wn=gt(),Ro=wn.style,f_=wn.figures,sd=wn.clear,h_=wn.lines,m_=/[0-9]/,Po=e=>e!==void 0,od=(e,t)=>{let i=Math.pow(10,t);return Math.round(e*i)/i},Fo=class extends p_{constructor(t={}){super(t),this.transform=Ro.render(t.style),this.msg=t.message,this.initial=Po(t.initial)?t.initial:"",this.float=!!t.float,this.round=t.round||2,this.inc=t.increment||1,this.min=Po(t.min)?t.min:-1/0,this.max=Po(t.max)?t.max:1/0,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.color="cyan",this.value="",this.typed="",this.lastHit=0,this.render()}set value(t){!t&&t!==0?(this.placeholder=!0,this.rendered=yn.gray(this.transform.render(`${this.initial}`)),this._value=""):(this.placeholder=!1,this.rendered=this.transform.render(`${od(t,this.round)}`),this._value=od(t,this.round)),this.fire()}get value(){return this._value}parse(t){return this.float?parseFloat(t):parseInt(t)}valid(t){return t==="-"||t==="."&&this.float||m_.test(t)}reset(){this.typed="",this.value="",this.fire(),this.render()}exit(){this.abort()}abort(){let t=this.value;this.value=t!==""?t:this.initial,this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}validate(){var t=this;return nd(function*(){let i=yield t.validator(t.value);typeof i=="string"&&(t.errorMsg=i,i=!1),t.error=!i})()}submit(){var t=this;return nd(function*(){if(yield t.validate(),t.error){t.color="red",t.fire(),t.render();return}let i=t.value;t.value=i!==""?i:t.initial,t.done=!0,t.aborted=!1,t.error=!1,t.fire(),t.render(),t.out.write(`
`),t.close()})()}up(){if(this.typed="",this.value===""&&(this.value=this.min-this.inc),this.value>=this.max)return this.bell();this.value+=this.inc,this.color="cyan",this.fire(),this.render()}down(){if(this.typed="",this.value===""&&(this.value=this.min+this.inc),this.value<=this.min)return this.bell();this.value-=this.inc,this.color="cyan",this.fire(),this.render()}delete(){let t=this.value.toString();if(t.length===0)return this.bell();this.value=this.parse(t=t.slice(0,-1))||"",this.value!==""&&this.value<this.min&&(this.value=this.min),this.color="cyan",this.fire(),this.render()}next(){this.value=this.initial,this.fire(),this.render()}_(t,i){if(!this.valid(t))return this.bell();let r=Date.now();if(r-this.lastHit>1e3&&(this.typed=""),this.typed+=t,this.lastHit=r,this.color="cyan",t===".")return this.fire();this.value=Math.min(this.parse(this.typed),this.max),this.value>this.max&&(this.value=this.max),this.value<this.min&&(this.value=this.min),this.fire(),this.render()}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(bn.down(h_(this.outputError,this.out.columns)-1)+sd(this.outputError,this.out.columns)),this.out.write(sd(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[Ro.symbol(this.done,this.aborted),yn.bold(this.msg),Ro.delimiter(this.done),!this.done||!this.done&&!this.placeholder?yn[this.color]().underline(this.rendered):this.rendered].join(" "),this.error&&(this.outputError+=this.errorMsg.split(`
`).reduce((t,i,r)=>t+`
${r?" ":f_.pointerSmall} ${yn.red().italic(i)}`,"")),this.out.write(d_.line+bn.to(0)+this.outputText+bn.save+this.outputError+bn.restore))}};cd.exports=Fo});var Mo=L((ZR,dd)=>{"use strict";var Et=he(),g_=ge(),x_=g_.cursor,v_=Lt(),hr=gt(),ld=hr.clear,Yt=hr.figures,pd=hr.style,y_=hr.wrap,b_=hr.entriesToDisplay,jo=class extends v_{constructor(t={}){super(t),this.msg=t.message,this.cursor=t.cursor||0,this.scrollIndex=t.cursor||0,this.hint=t.hint||"",this.warn=t.warn||"- This option is disabled -",this.minSelected=t.min,this.showMinError=!1,this.maxChoices=t.max,this.instructions=t.instructions,this.optionsPerPage=t.optionsPerPage||10,this.value=t.choices.map((i,r)=>(typeof i=="string"&&(i={title:i,value:r}),{title:i&&(i.title||i.value||i),description:i&&i.description,value:i&&(i.value===void 0?r:i.value),selected:i&&i.selected,disabled:i&&i.disabled})),this.clear=ld("",this.out.columns),t.overrideRender||this.render()}reset(){this.value.map(t=>!t.selected),this.cursor=0,this.fire(),this.render()}selected(){return this.value.filter(t=>t.selected)}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){let t=this.value.filter(i=>i.selected);this.minSelected&&t.length<this.minSelected?(this.showMinError=!0,this.render()):(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close())}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.value.length,this.render()}up(){this.cursor===0?this.cursor=this.value.length-1:this.cursor--,this.render()}down(){this.cursor===this.value.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.value[this.cursor].selected=!1,this.render()}right(){if(this.value.filter(t=>t.selected).length>=this.maxChoices)return this.bell();this.value[this.cursor].selected=!0,this.render()}handleSpaceToggle(){let t=this.value[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter(i=>i.selected).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}toggleAll(){if(this.maxChoices!==void 0||this.value[this.cursor].disabled)return this.bell();let t=!this.value[this.cursor].selected;this.value.filter(i=>!i.disabled).forEach(i=>i.selected=t),this.render()}_(t,i){if(t===" ")this.handleSpaceToggle();else if(t==="a")this.toggleAll();else return this.bell()}renderInstructions(){return this.instructions===void 0||this.instructions?typeof this.instructions=="string"?this.instructions:`
Instructions:
    ${Yt.arrowUp}/${Yt.arrowDown}: Highlight option
    ${Yt.arrowLeft}/${Yt.arrowRight}/[space]: Toggle selection
`+(this.maxChoices===void 0?`    a: Toggle all
`:"")+"    enter/return: Complete answer":""}renderOption(t,i,r,n){let s=(i.selected?Et.green(Yt.radioOn):Yt.radioOff)+" "+n+" ",o,a;return i.disabled?o=t===r?Et.gray().underline(i.title):Et.strikethrough().gray(i.title):(o=t===r?Et.cyan().underline(i.title):i.title,t===r&&i.description&&(a=` - ${i.description}`,(s.length+o.length+a.length>=this.out.columns||i.description.split(/\r?\n/).length>1)&&(a=`
`+y_(i.description,{margin:s.length,width:this.out.columns})))),s+o+Et.gray(a||"")}paginateOptions(t){if(t.length===0)return Et.red("No matches for this query.");let i=b_(this.cursor,t.length,this.optionsPerPage),r=i.startIndex,n=i.endIndex,s,o=[];for(let a=r;a<n;a++)a===r&&r>0?s=Yt.arrowUp:a===n-1&&n<t.length?s=Yt.arrowDown:s=" ",o.push(this.renderOption(this.cursor,t[a],a,s));return`
`+o.join(`
`)}renderOptions(t){return this.done?"":this.paginateOptions(t)}renderDoneOrInstructions(){if(this.done)return this.value.filter(i=>i.selected).map(i=>i.title).join(", ");let t=[Et.gray(this.hint),this.renderInstructions()];return this.value[this.cursor].disabled&&t.push(Et.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(x_.hide),super.render();let t=[pd.symbol(this.done,this.aborted),Et.bold(this.msg),pd.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=Et.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.value),this.out.write(this.clear+t),this.clear=ld(t,this.out.columns)}};dd.exports=jo});var yd=L((QR,vd)=>{"use strict";function fd(e,t,i,r,n,s,o){try{var a=e[s](o),c=a.value}catch(u){i(u);return}a.done?t(c):Promise.resolve(c).then(r,n)}function w_(e){return function(){var t=this,i=arguments;return new Promise(function(r,n){var s=e.apply(t,i);function o(c){fd(s,r,n,o,a,"next",c)}function a(c){fd(s,r,n,o,a,"throw",c)}o(void 0)})}}var mr=he(),E_=Lt(),xd=ge(),__=xd.erase,hd=xd.cursor,gr=gt(),qo=gr.style,md=gr.clear,Bo=gr.figures,T_=gr.wrap,S_=gr.entriesToDisplay,gd=(e,t)=>e[t]&&(e[t].value||e[t].title||e[t]),C_=(e,t)=>e[t]&&(e[t].title||e[t].value||e[t]),O_=(e,t)=>{let i=e.findIndex(r=>r.value===t||r.title===t);return i>-1?i:void 0},Uo=class extends E_{constructor(t={}){super(t),this.msg=t.message,this.suggest=t.suggest,this.choices=t.choices,this.initial=typeof t.initial=="number"?t.initial:O_(t.choices,t.initial),this.select=this.initial||t.cursor||0,this.i18n={noMatches:t.noMatches||"no matches found"},this.fallback=t.fallback||this.initial,this.clearFirst=t.clearFirst||!1,this.suggestions=[],this.input="",this.limit=t.limit||10,this.cursor=0,this.transform=qo.render(t.style),this.scale=this.transform.scale,this.render=this.render.bind(this),this.complete=this.complete.bind(this),this.clear=md("",this.out.columns),this.complete(this.render),this.render()}set fallback(t){this._fb=Number.isSafeInteger(parseInt(t))?parseInt(t):t}get fallback(){let t;return typeof this._fb=="number"?t=this.choices[this._fb]:typeof this._fb=="string"&&(t={title:this._fb}),t||this._fb||{title:this.i18n.noMatches}}moveSelect(t){this.select=t,this.suggestions.length>0?this.value=gd(this.suggestions,t):this.value=this.fallback.value,this.fire()}complete(t){var i=this;return w_(function*(){let r=i.completing=i.suggest(i.input,i.choices),n=yield r;if(i.completing!==r)return;i.suggestions=n.map((o,a,c)=>({title:C_(c,a),value:gd(c,a),description:o.description})),i.completing=!1;let s=Math.max(n.length-1,0);i.moveSelect(Math.min(s,i.select)),t&&t()})()}reset(){this.input="",this.complete(()=>{this.moveSelect(this.initial!==void 0?this.initial:0),this.render()}),this.render()}exit(){this.clearFirst&&this.input.length>0?this.reset():(this.done=this.exited=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close())}abort(){this.done=this.aborted=!0,this.exited=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.done=!0,this.aborted=this.exited=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}_(t,i){let r=this.input.slice(0,this.cursor),n=this.input.slice(this.cursor);this.input=`${r}${t}${n}`,this.cursor=r.length+1,this.complete(this.render),this.render()}delete(){if(this.cursor===0)return this.bell();let t=this.input.slice(0,this.cursor-1),i=this.input.slice(this.cursor);this.input=`${t}${i}`,this.complete(this.render),this.cursor=this.cursor-1,this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();let t=this.input.slice(0,this.cursor),i=this.input.slice(this.cursor+1);this.input=`${t}${i}`,this.complete(this.render),this.render()}first(){this.moveSelect(0),this.render()}last(){this.moveSelect(this.suggestions.length-1),this.render()}up(){this.select===0?this.moveSelect(this.suggestions.length-1):this.moveSelect(this.select-1),this.render()}down(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}next(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}nextPage(){this.moveSelect(Math.min(this.select+this.limit,this.suggestions.length-1)),this.render()}prevPage(){this.moveSelect(Math.max(this.select-this.limit,0)),this.render()}left(){if(this.cursor<=0)return this.bell();this.cursor=this.cursor-1,this.render()}right(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();this.cursor=this.cursor+1,this.render()}renderOption(t,i,r,n){let s,o=r?Bo.arrowUp:n?Bo.arrowDown:" ",a=i?mr.cyan().underline(t.title):t.title;return o=(i?mr.cyan(Bo.pointer)+" ":"  ")+o,t.description&&(s=` - ${t.description}`,(o.length+a.length+s.length>=this.out.columns||t.description.split(/\r?\n/).length>1)&&(s=`
`+T_(t.description,{margin:3,width:this.out.columns}))),o+" "+a+mr.gray(s||"")}render(){if(this.closed)return;this.firstRender?this.out.write(hd.hide):this.out.write(md(this.outputText,this.out.columns)),super.render();let t=S_(this.select,this.choices.length,this.limit),i=t.startIndex,r=t.endIndex;if(this.outputText=[qo.symbol(this.done,this.aborted,this.exited),mr.bold(this.msg),qo.delimiter(this.completing),this.done&&this.suggestions[this.select]?this.suggestions[this.select].title:this.rendered=this.transform.render(this.input)].join(" "),!this.done){let n=this.suggestions.slice(i,r).map((s,o)=>this.renderOption(s,this.select===o+i,o===0&&i>0,o+i===r-1&&r<this.choices.length)).join(`
`);this.outputText+=`
`+(n||mr.gray(this.fallback.title))}this.out.write(__.line+hd.to(0)+this.outputText)}};vd.exports=Uo});var _d=L((eP,Ed)=>{"use strict";var Pt=he(),A_=ge(),D_=A_.cursor,I_=Mo(),zo=gt(),bd=zo.clear,wd=zo.style,Pi=zo.figures,$o=class extends I_{constructor(t={}){t.overrideRender=!0,super(t),this.inputValue="",this.clear=bd("",this.out.columns),this.filteredOptions=this.value,this.render()}last(){this.cursor=this.filteredOptions.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.filteredOptions.length,this.render()}up(){this.cursor===0?this.cursor=this.filteredOptions.length-1:this.cursor--,this.render()}down(){this.cursor===this.filteredOptions.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.filteredOptions[this.cursor].selected=!1,this.render()}right(){if(this.value.filter(t=>t.selected).length>=this.maxChoices)return this.bell();this.filteredOptions[this.cursor].selected=!0,this.render()}delete(){this.inputValue.length&&(this.inputValue=this.inputValue.substr(0,this.inputValue.length-1),this.updateFilteredOptions())}updateFilteredOptions(){let t=this.filteredOptions[this.cursor];this.filteredOptions=this.value.filter(r=>this.inputValue?!!(typeof r.title=="string"&&r.title.toLowerCase().includes(this.inputValue.toLowerCase())||typeof r.value=="string"&&r.value.toLowerCase().includes(this.inputValue.toLowerCase())):!0);let i=this.filteredOptions.findIndex(r=>r===t);this.cursor=i<0?0:i,this.render()}handleSpaceToggle(){let t=this.filteredOptions[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter(i=>i.selected).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}handleInputChange(t){this.inputValue=this.inputValue+t,this.updateFilteredOptions()}_(t,i){t===" "?this.handleSpaceToggle():this.handleInputChange(t)}renderInstructions(){return this.instructions===void 0||this.instructions?typeof this.instructions=="string"?this.instructions:`
Instructions:
    ${Pi.arrowUp}/${Pi.arrowDown}: Highlight option
    ${Pi.arrowLeft}/${Pi.arrowRight}/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer
`:""}renderCurrentInput(){return`
Filtered results for: ${this.inputValue?this.inputValue:Pt.gray("Enter something to filter")}
`}renderOption(t,i,r){let n;return i.disabled?n=t===r?Pt.gray().underline(i.title):Pt.strikethrough().gray(i.title):n=t===r?Pt.cyan().underline(i.title):i.title,(i.selected?Pt.green(Pi.radioOn):Pi.radioOff)+"  "+n}renderDoneOrInstructions(){if(this.done)return this.value.filter(i=>i.selected).map(i=>i.title).join(", ");let t=[Pt.gray(this.hint),this.renderInstructions(),this.renderCurrentInput()];return this.filteredOptions.length&&this.filteredOptions[this.cursor].disabled&&t.push(Pt.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(D_.hide),super.render();let t=[wd.symbol(this.done,this.aborted),Pt.bold(this.msg),wd.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=Pt.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.filteredOptions),this.out.write(this.clear+t),this.clear=bd(t,this.out.columns)}};Ed.exports=$o});var Id=L((tP,Dd)=>{"use strict";var Td=he(),N_=Lt(),Od=gt(),Sd=Od.style,L_=Od.clear,Ad=ge(),k_=Ad.erase,Cd=Ad.cursor,Ho=class extends N_{constructor(t={}){super(t),this.msg=t.message,this.value=t.initial,this.initialValue=!!t.initial,this.yesMsg=t.yes||"yes",this.yesOption=t.yesOption||"(Y/n)",this.noMsg=t.no||"no",this.noOption=t.noOption||"(y/N)",this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.value=this.value||!1,this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}_(t,i){return t.toLowerCase()==="y"?(this.value=!0,this.submit()):t.toLowerCase()==="n"?(this.value=!1,this.submit()):this.bell()}render(){this.closed||(this.firstRender?this.out.write(Cd.hide):this.out.write(L_(this.outputText,this.out.columns)),super.render(),this.outputText=[Sd.symbol(this.done,this.aborted),Td.bold(this.msg),Sd.delimiter(this.done),this.done?this.value?this.yesMsg:this.noMsg:Td.gray(this.initialValue?this.yesOption:this.noOption)].join(" "),this.out.write(k_.line+Cd.to(0)+this.outputText))}};Dd.exports=Ho});var Ld=L((iP,Nd)=>{"use strict";Nd.exports={TextPrompt:xp(),SelectPrompt:wp(),TogglePrompt:Op(),DatePrompt:id(),NumberPrompt:ud(),MultiselectPrompt:Mo(),AutocompletePrompt:yd(),AutocompleteMultiselectPrompt:_d(),ConfirmPrompt:Id()}});var Rd=L(kd=>{"use strict";var Xe=kd,R_=Ld(),En=e=>e;function _t(e,t,i={}){return new Promise((r,n)=>{let s=new R_[e](t),o=i.onAbort||En,a=i.onSubmit||En,c=i.onExit||En;s.on("state",t.onState||En),s.on("submit",u=>r(a(u))),s.on("exit",u=>r(c(u))),s.on("abort",u=>n(o(u)))})}Xe.text=e=>_t("TextPrompt",e);Xe.password=e=>(e.style="password",Xe.text(e));Xe.invisible=e=>(e.style="invisible",Xe.text(e));Xe.number=e=>_t("NumberPrompt",e);Xe.date=e=>_t("DatePrompt",e);Xe.confirm=e=>_t("ConfirmPrompt",e);Xe.list=e=>{let t=e.separator||",";return _t("TextPrompt",e,{onSubmit:i=>i.split(t).map(r=>r.trim())})};Xe.toggle=e=>_t("TogglePrompt",e);Xe.select=e=>_t("SelectPrompt",e);Xe.multiselect=e=>{e.choices=[].concat(e.choices||[]);let t=i=>i.filter(r=>r.selected).map(r=>r.value);return _t("MultiselectPrompt",e,{onAbort:t,onSubmit:t})};Xe.autocompleteMultiselect=e=>{e.choices=[].concat(e.choices||[]);let t=i=>i.filter(r=>r.selected).map(r=>r.value);return _t("AutocompleteMultiselectPrompt",e,{onAbort:t,onSubmit:t})};var P_=(e,t)=>Promise.resolve(t.filter(i=>i.title.slice(0,e.length).toLowerCase()===e.toLowerCase()));Xe.autocomplete=e=>(e.suggest=e.suggest||P_,e.choices=[].concat(e.choices||[]),_t("AutocompletePrompt",e))});var $d=L((nP,Ud)=>{"use strict";function Pd(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),i.push.apply(i,r)}return i}function Fd(e){for(var t=1;t<arguments.length;t++){var i=arguments[t]!=null?arguments[t]:{};t%2?Pd(Object(i),!0).forEach(function(r){F_(e,r,i[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):Pd(Object(i)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(i,r))})}return e}function F_(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function j_(e,t){var i=typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(!i){if(Array.isArray(e)||(i=M_(e))||t&&e&&typeof e.length=="number"){i&&(e=i);var r=0,n=function(){};return{s:n,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(u){throw u},f:n}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var s=!0,o=!1,a;return{s:function(){i=i.call(e)},n:function(){var u=i.next();return s=u.done,u},e:function(u){o=!0,a=u},f:function(){try{!s&&i.return!=null&&i.return()}finally{if(o)throw a}}}}function M_(e,t){if(e){if(typeof e=="string")return jd(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);if(i==="Object"&&e.constructor&&(i=e.constructor.name),i==="Map"||i==="Set")return Array.from(e);if(i==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return jd(e,t)}}function jd(e,t){(t==null||t>e.length)&&(t=e.length);for(var i=0,r=new Array(t);i<t;i++)r[i]=e[i];return r}function Md(e,t,i,r,n,s,o){try{var a=e[s](o),c=a.value}catch(u){i(u);return}a.done?t(c):Promise.resolve(c).then(r,n)}function qd(e){return function(){var t=this,i=arguments;return new Promise(function(r,n){var s=e.apply(t,i);function o(c){Md(s,r,n,o,a,"next",c)}function a(c){Md(s,r,n,o,a,"throw",c)}o(void 0)})}}var Go=Rd(),q_=["suggest","format","onState","validate","onRender","type"],Bd=()=>{};function Wt(){return Vo.apply(this,arguments)}function Vo(){return Vo=qd(function*(e=[],{onSubmit:t=Bd,onCancel:i=Bd}={}){let r={},n=Wt._override||{};e=[].concat(e);let s,o,a,c,u,m,g=function(){var E=qd(function*(S,_,l=!1){if(!(!l&&S.validate&&S.validate(_)!==!0))return S.format?yield S.format(_,r):_});return function(_,l){return E.apply(this,arguments)}}();var x=j_(e),p;try{for(x.s();!(p=x.n()).done;){o=p.value;var h=o;if(c=h.name,u=h.type,typeof u=="function"&&(u=yield u(s,Fd({},r),o),o.type=u),!!u){for(let E in o){if(q_.includes(E))continue;let S=o[E];o[E]=typeof S=="function"?yield S(s,Fd({},r),m):S}if(m=o,typeof o.message!="string")throw new Error("prompt message is required");var v=o;if(c=v.name,u=v.type,Go[u]===void 0)throw new Error(`prompt type (${u}) is not defined`);if(n[o.name]!==void 0&&(s=yield g(o,n[o.name]),s!==void 0)){r[c]=s;continue}try{s=Wt._injected?B_(Wt._injected,o.initial):yield Go[u](o),r[c]=s=yield g(o,s,!0),a=yield t(o,s,r)}catch{a=!(yield i(o,r))}if(a)return r}}}catch(E){x.e(E)}finally{x.f()}return r}),Vo.apply(this,arguments)}function B_(e,t){let i=e.shift();if(i instanceof Error)throw i;return i===void 0?t:i}function U_(e){Wt._injected=(Wt._injected||[]).concat(e)}function $_(e){Wt._override=Object.assign({},e)}Ud.exports=Object.assign(Wt,{prompt:Wt,prompts:Go,inject:U_,override:$_})});var Hd=L((sP,zd)=>{"use strict";zd.exports=(e,t)=>{if(!(e.meta&&e.name!=="escape")){if(e.ctrl){if(e.name==="a")return"first";if(e.name==="c"||e.name==="d")return"abort";if(e.name==="e")return"last";if(e.name==="g")return"reset"}if(t){if(e.name==="j")return"down";if(e.name==="k")return"up"}return e.name==="return"||e.name==="enter"?"submit":e.name==="backspace"?"delete":e.name==="delete"?"deleteForward":e.name==="abort"?"abort":e.name==="escape"?"exit":e.name==="tab"?"next":e.name==="pagedown"?"nextPage":e.name==="pageup"?"prevPage":e.name==="home"?"home":e.name==="end"?"end":e.name==="up"?"up":e.name==="down"?"down":e.name==="right"?"right":e.name==="left"?"left":!1}}});var _n=L((oP,Gd)=>{"use strict";Gd.exports=e=>{let t=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))"].join("|"),i=new RegExp(t,"g");return typeof e=="string"?e.replace(i,""):e}});var Yd=L((aP,Xd)=>{"use strict";var z_=_n(),{erase:Vd,cursor:H_}=ge(),G_=e=>[...z_(e)].length;Xd.exports=function(e,t){if(!t)return Vd.line+H_.to(0);let i=0,r=e.split(/\r?\n/);for(let n of r)i+=1+Math.floor(Math.max(G_(n)-1,0)/t);return Vd.lines(i)}});var Xo=L((cP,Wd)=>{"use strict";var xr={arrowUp:"\u2191",arrowDown:"\u2193",arrowLeft:"\u2190",arrowRight:"\u2192",radioOn:"\u25C9",radioOff:"\u25EF",tick:"\u2714",cross:"\u2716",ellipsis:"\u2026",pointerSmall:"\u203A",line:"\u2500",pointer:"\u276F"},V_={arrowUp:xr.arrowUp,arrowDown:xr.arrowDown,arrowLeft:xr.arrowLeft,arrowRight:xr.arrowRight,radioOn:"(*)",radioOff:"( )",tick:"\u221A",cross:"\xD7",ellipsis:"...",pointerSmall:"\xBB",line:"\u2500",pointer:">"},X_=process.platform==="win32"?V_:xr;Wd.exports=X_});var Jd=L((uP,Kd)=>{"use strict";var Fi=he(),li=Xo(),Yo=Object.freeze({password:{scale:1,render:e=>"*".repeat(e.length)},emoji:{scale:2,render:e=>"\u{1F603}".repeat(e.length)},invisible:{scale:0,render:e=>""},default:{scale:1,render:e=>`${e}`}}),Y_=e=>Yo[e]||Yo.default,vr=Object.freeze({aborted:Fi.red(li.cross),done:Fi.green(li.tick),exited:Fi.yellow(li.cross),default:Fi.cyan("?")}),W_=(e,t,i)=>t?vr.aborted:i?vr.exited:e?vr.done:vr.default,K_=e=>Fi.gray(e?li.ellipsis:li.pointerSmall),J_=(e,t)=>Fi.gray(e?t?li.pointerSmall:"+":li.line);Kd.exports={styles:Yo,render:Y_,symbols:vr,symbol:W_,delimiter:K_,item:J_}});var Qd=L((lP,Zd)=>{"use strict";var Z_=_n();Zd.exports=function(e,t){let i=String(Z_(e)||"").split(/\r?\n/);return t?i.map(r=>Math.ceil(r.length/t)).reduce((r,n)=>r+n):i.length}});var tf=L((pP,ef)=>{"use strict";ef.exports=(e,t={})=>{let i=Number.isSafeInteger(parseInt(t.margin))?new Array(parseInt(t.margin)).fill(" ").join(""):t.margin||"",r=t.width;return(e||"").split(/\r?\n/g).map(n=>n.split(/\s+/g).reduce((s,o)=>(o.length+i.length>=r||s[s.length-1].length+o.length+1<r?s[s.length-1]+=` ${o}`:s.push(`${i}${o}`),s),[i]).join(`
`)).join(`
`)}});var nf=L((dP,rf)=>{"use strict";rf.exports=(e,t,i)=>{i=i||t;let r=Math.min(t-i,e-Math.floor(i/2));r<0&&(r=0);let n=Math.min(r+i,t);return{startIndex:r,endIndex:n}}});var xt=L((fP,sf)=>{"use strict";sf.exports={action:Hd(),clear:Yd(),style:Jd(),strip:_n(),figures:Xo(),lines:Qd(),wrap:tf(),entriesToDisplay:nf()}});var Ft=L((hP,af)=>{"use strict";var of=require("readline"),{action:Q_}=xt(),eT=require("events"),{beep:tT,cursor:iT}=ge(),rT=he(),Wo=class extends eT{constructor(t={}){super(),this.firstRender=!0,this.in=t.stdin||process.stdin,this.out=t.stdout||process.stdout,this.onRender=(t.onRender||(()=>{})).bind(this);let i=of.createInterface({input:this.in,escapeCodeTimeout:50});of.emitKeypressEvents(this.in,i),this.in.isTTY&&this.in.setRawMode(!0);let r=["SelectPrompt","MultiselectPrompt"].indexOf(this.constructor.name)>-1,n=(s,o)=>{let a=Q_(o,r);a===!1?this._&&this._(s,o):typeof this[a]=="function"?this[a](o):this.bell()};this.close=()=>{this.out.write(iT.show),this.in.removeListener("keypress",n),this.in.isTTY&&this.in.setRawMode(!1),i.close(),this.emit(this.aborted?"abort":this.exited?"exit":"submit",this.value),this.closed=!0},this.in.on("keypress",n)}fire(){this.emit("state",{value:this.value,aborted:!!this.aborted,exited:!!this.exited})}bell(){this.out.write(tT)}render(){this.onRender(rT),this.firstRender&&(this.firstRender=!1)}};af.exports=Wo});var uf=L((mP,cf)=>{"use strict";var Tn=he(),nT=Ft(),{erase:sT,cursor:yr}=ge(),{style:Ko,clear:Jo,lines:oT,figures:aT}=xt(),Zo=class extends nT{constructor(t={}){super(t),this.transform=Ko.render(t.style),this.scale=this.transform.scale,this.msg=t.message,this.initial=t.initial||"",this.validator=t.validate||(()=>!0),this.value="",this.errorMsg=t.error||"Please Enter A Valid Value",this.cursor=+!!this.initial,this.cursorOffset=0,this.clear=Jo("",this.out.columns),this.render()}set value(t){!t&&this.initial?(this.placeholder=!0,this.rendered=Tn.gray(this.transform.render(this.initial))):(this.placeholder=!1,this.rendered=this.transform.render(t)),this._value=t,this.fire()}get value(){return this._value}reset(){this.value="",this.cursor=+!!this.initial,this.cursorOffset=0,this.fire(),this.render()}exit(){this.abort()}abort(){this.value=this.value||this.initial,this.done=this.aborted=!0,this.error=!1,this.red=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}async validate(){let t=await this.validator(this.value);typeof t=="string"&&(this.errorMsg=t,t=!1),this.error=!t}async submit(){if(this.value=this.value||this.initial,this.cursorOffset=0,this.cursor=this.rendered.length,await this.validate(),this.error){this.red=!0,this.fire(),this.render();return}this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}next(){if(!this.placeholder)return this.bell();this.value=this.initial,this.cursor=this.rendered.length,this.fire(),this.render()}moveCursor(t){this.placeholder||(this.cursor=this.cursor+t,this.cursorOffset+=t)}_(t,i){let r=this.value.slice(0,this.cursor),n=this.value.slice(this.cursor);this.value=`${r}${t}${n}`,this.red=!1,this.cursor=this.placeholder?0:r.length+1,this.render()}delete(){if(this.isCursorAtStart())return this.bell();let t=this.value.slice(0,this.cursor-1),i=this.value.slice(this.cursor);this.value=`${t}${i}`,this.red=!1,this.isCursorAtStart()?this.cursorOffset=0:(this.cursorOffset++,this.moveCursor(-1)),this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();let t=this.value.slice(0,this.cursor),i=this.value.slice(this.cursor+1);this.value=`${t}${i}`,this.red=!1,this.isCursorAtEnd()?this.cursorOffset=0:this.cursorOffset++,this.render()}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length,this.render()}left(){if(this.cursor<=0||this.placeholder)return this.bell();this.moveCursor(-1),this.render()}right(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();this.moveCursor(1),this.render()}isCursorAtStart(){return this.cursor===0||this.placeholder&&this.cursor===1}isCursorAtEnd(){return this.cursor===this.rendered.length||this.placeholder&&this.cursor===this.rendered.length+1}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(yr.down(oT(this.outputError,this.out.columns)-1)+Jo(this.outputError,this.out.columns)),this.out.write(Jo(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[Ko.symbol(this.done,this.aborted),Tn.bold(this.msg),Ko.delimiter(this.done),this.red?Tn.red(this.rendered):this.rendered].join(" "),this.error&&(this.outputError+=this.errorMsg.split(`
`).reduce((t,i,r)=>t+`
${r?" ":aT.pointerSmall} ${Tn.red().italic(i)}`,"")),this.out.write(sT.line+yr.to(0)+this.outputText+yr.save+this.outputError+yr.restore+yr.move(this.cursorOffset,0)))}};cf.exports=Zo});var ff=L((gP,df)=>{"use strict";var jt=he(),cT=Ft(),{style:lf,clear:pf,figures:Sn,wrap:uT,entriesToDisplay:lT}=xt(),{cursor:pT}=ge(),Qo=class extends cT{constructor(t={}){super(t),this.msg=t.message,this.hint=t.hint||"- Use arrow-keys. Return to submit.",this.warn=t.warn||"- This option is disabled",this.cursor=t.initial||0,this.choices=t.choices.map((i,r)=>(typeof i=="string"&&(i={title:i,value:r}),{title:i&&(i.title||i.value||i),value:i&&(i.value===void 0?r:i.value),description:i&&i.description,selected:i&&i.selected,disabled:i&&i.disabled})),this.optionsPerPage=t.optionsPerPage||10,this.value=(this.choices[this.cursor]||{}).value,this.clear=pf("",this.out.columns),this.render()}moveCursor(t){this.cursor=t,this.value=this.choices[t].value,this.fire()}reset(){this.moveCursor(0),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.selection.disabled?this.bell():(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close())}first(){this.moveCursor(0),this.render()}last(){this.moveCursor(this.choices.length-1),this.render()}up(){this.cursor===0?this.moveCursor(this.choices.length-1):this.moveCursor(this.cursor-1),this.render()}down(){this.cursor===this.choices.length-1?this.moveCursor(0):this.moveCursor(this.cursor+1),this.render()}next(){this.moveCursor((this.cursor+1)%this.choices.length),this.render()}_(t,i){if(t===" ")return this.submit()}get selection(){return this.choices[this.cursor]}render(){if(this.closed)return;this.firstRender?this.out.write(pT.hide):this.out.write(pf(this.outputText,this.out.columns)),super.render();let{startIndex:t,endIndex:i}=lT(this.cursor,this.choices.length,this.optionsPerPage);if(this.outputText=[lf.symbol(this.done,this.aborted),jt.bold(this.msg),lf.delimiter(!1),this.done?this.selection.title:this.selection.disabled?jt.yellow(this.warn):jt.gray(this.hint)].join(" "),!this.done){this.outputText+=`
`;for(let r=t;r<i;r++){let n,s,o="",a=this.choices[r];r===t&&t>0?s=Sn.arrowUp:r===i-1&&i<this.choices.length?s=Sn.arrowDown:s=" ",a.disabled?(n=this.cursor===r?jt.gray().underline(a.title):jt.strikethrough().gray(a.title),s=(this.cursor===r?jt.bold().gray(Sn.pointer)+" ":"  ")+s):(n=this.cursor===r?jt.cyan().underline(a.title):a.title,s=(this.cursor===r?jt.cyan(Sn.pointer)+" ":"  ")+s,a.description&&this.cursor===r&&(o=` - ${a.description}`,(s.length+n.length+o.length>=this.out.columns||a.description.split(/\r?\n/).length>1)&&(o=`
`+uT(a.description,{margin:3,width:this.out.columns})))),this.outputText+=`${s} ${n}${jt.gray(o)}
`}}this.out.write(this.outputText)}};df.exports=Qo});var xf=L((xP,gf)=>{"use strict";var Cn=he(),dT=Ft(),{style:hf,clear:fT}=xt(),{cursor:mf,erase:hT}=ge(),ea=class extends dT{constructor(t={}){super(t),this.msg=t.message,this.value=!!t.initial,this.active=t.active||"on",this.inactive=t.inactive||"off",this.initialValue=this.value,this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}deactivate(){if(this.value===!1)return this.bell();this.value=!1,this.render()}activate(){if(this.value===!0)return this.bell();this.value=!0,this.render()}delete(){this.deactivate()}left(){this.deactivate()}right(){this.activate()}down(){this.deactivate()}up(){this.activate()}next(){this.value=!this.value,this.fire(),this.render()}_(t,i){if(t===" ")this.value=!this.value;else if(t==="1")this.value=!0;else if(t==="0")this.value=!1;else return this.bell();this.render()}render(){this.closed||(this.firstRender?this.out.write(mf.hide):this.out.write(fT(this.outputText,this.out.columns)),super.render(),this.outputText=[hf.symbol(this.done,this.aborted),Cn.bold(this.msg),hf.delimiter(this.done),this.value?this.inactive:Cn.cyan().underline(this.inactive),Cn.gray("/"),this.value?Cn.cyan().underline(this.active):this.active].join(" "),this.out.write(hT.line+mf.to(0)+this.outputText))}};gf.exports=ea});var Tt=L((vP,vf)=>{"use strict";var ta=class e{constructor({token:t,date:i,parts:r,locales:n}){this.token=t,this.date=i||new Date,this.parts=r||[this],this.locales=n||{}}up(){}down(){}next(){let t=this.parts.indexOf(this);return this.parts.find((i,r)=>r>t&&i instanceof e)}setTo(t){}prev(){let t=[].concat(this.parts).reverse(),i=t.indexOf(this);return t.find((r,n)=>n>i&&r instanceof e)}toString(){return String(this.date)}};vf.exports=ta});var bf=L((yP,yf)=>{"use strict";var mT=Tt(),ia=class extends mT{constructor(t={}){super(t)}up(){this.date.setHours((this.date.getHours()+12)%24)}down(){this.up()}toString(){let t=this.date.getHours()>12?"pm":"am";return/\A/.test(this.token)?t.toUpperCase():t}};yf.exports=ia});var Ef=L((bP,wf)=>{"use strict";var gT=Tt(),xT=e=>(e=e%10,e===1?"st":e===2?"nd":e===3?"rd":"th"),ra=class extends gT{constructor(t={}){super(t)}up(){this.date.setDate(this.date.getDate()+1)}down(){this.date.setDate(this.date.getDate()-1)}setTo(t){this.date.setDate(parseInt(t.substr(-2)))}toString(){let t=this.date.getDate(),i=this.date.getDay();return this.token==="DD"?String(t).padStart(2,"0"):this.token==="Do"?t+xT(t):this.token==="d"?i+1:this.token==="ddd"?this.locales.weekdaysShort[i]:this.token==="dddd"?this.locales.weekdays[i]:t}};wf.exports=ra});var Tf=L((wP,_f)=>{"use strict";var vT=Tt(),na=class extends vT{constructor(t={}){super(t)}up(){this.date.setHours(this.date.getHours()+1)}down(){this.date.setHours(this.date.getHours()-1)}setTo(t){this.date.setHours(parseInt(t.substr(-2)))}toString(){let t=this.date.getHours();return/h/.test(this.token)&&(t=t%12||12),this.token.length>1?String(t).padStart(2,"0"):t}};_f.exports=na});var Cf=L((EP,Sf)=>{"use strict";var yT=Tt(),sa=class extends yT{constructor(t={}){super(t)}up(){this.date.setMilliseconds(this.date.getMilliseconds()+1)}down(){this.date.setMilliseconds(this.date.getMilliseconds()-1)}setTo(t){this.date.setMilliseconds(parseInt(t.substr(-this.token.length)))}toString(){return String(this.date.getMilliseconds()).padStart(4,"0").substr(0,this.token.length)}};Sf.exports=sa});var Af=L((_P,Of)=>{"use strict";var bT=Tt(),oa=class extends bT{constructor(t={}){super(t)}up(){this.date.setMinutes(this.date.getMinutes()+1)}down(){this.date.setMinutes(this.date.getMinutes()-1)}setTo(t){this.date.setMinutes(parseInt(t.substr(-2)))}toString(){let t=this.date.getMinutes();return this.token.length>1?String(t).padStart(2,"0"):t}};Of.exports=oa});var If=L((TP,Df)=>{"use strict";var wT=Tt(),aa=class extends wT{constructor(t={}){super(t)}up(){this.date.setMonth(this.date.getMonth()+1)}down(){this.date.setMonth(this.date.getMonth()-1)}setTo(t){t=parseInt(t.substr(-2))-1,this.date.setMonth(t<0?0:t)}toString(){let t=this.date.getMonth(),i=this.token.length;return i===2?String(t+1).padStart(2,"0"):i===3?this.locales.monthsShort[t]:i===4?this.locales.months[t]:String(t+1)}};Df.exports=aa});var Lf=L((SP,Nf)=>{"use strict";var ET=Tt(),ca=class extends ET{constructor(t={}){super(t)}up(){this.date.setSeconds(this.date.getSeconds()+1)}down(){this.date.setSeconds(this.date.getSeconds()-1)}setTo(t){this.date.setSeconds(parseInt(t.substr(-2)))}toString(){let t=this.date.getSeconds();return this.token.length>1?String(t).padStart(2,"0"):t}};Nf.exports=ca});var Rf=L((CP,kf)=>{"use strict";var _T=Tt(),ua=class extends _T{constructor(t={}){super(t)}up(){this.date.setFullYear(this.date.getFullYear()+1)}down(){this.date.setFullYear(this.date.getFullYear()-1)}setTo(t){this.date.setFullYear(t.substr(-4))}toString(){let t=String(this.date.getFullYear()).padStart(4,"0");return this.token.length===2?t.substr(-2):t}};kf.exports=ua});var Ff=L((OP,Pf)=>{"use strict";Pf.exports={DatePart:Tt(),Meridiem:bf(),Day:Ef(),Hours:Tf(),Milliseconds:Cf(),Minutes:Af(),Month:If(),Seconds:Lf(),Year:Rf()}});var zf=L((AP,$f)=>{"use strict";var la=he(),TT=Ft(),{style:jf,clear:Mf,figures:ST}=xt(),{erase:CT,cursor:qf}=ge(),{DatePart:Bf,Meridiem:OT,Day:AT,Hours:DT,Milliseconds:IT,Minutes:NT,Month:LT,Seconds:kT,Year:RT}=Ff(),PT=/\\(.)|"((?:\\["\\]|[^"])+)"|(D[Do]?|d{3,4}|d)|(M{1,4})|(YY(?:YY)?)|([aA])|([Hh]{1,2})|(m{1,2})|(s{1,2})|(S{1,4})|./g,Uf={1:({token:e})=>e.replace(/\\(.)/g,"$1"),2:e=>new AT(e),3:e=>new LT(e),4:e=>new RT(e),5:e=>new OT(e),6:e=>new DT(e),7:e=>new NT(e),8:e=>new kT(e),9:e=>new IT(e)},FT={months:"January,February,March,April,May,June,July,August,September,October,November,December".split(","),monthsShort:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),weekdays:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),weekdaysShort:"Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(",")},pa=class extends TT{constructor(t={}){super(t),this.msg=t.message,this.cursor=0,this.typed="",this.locales=Object.assign(FT,t.locales),this._date=t.initial||new Date,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.mask=t.mask||"YYYY-MM-DD HH:mm:ss",this.clear=Mf("",this.out.columns),this.render()}get value(){return this.date}get date(){return this._date}set date(t){t&&this._date.setTime(t.getTime())}set mask(t){let i;for(this.parts=[];i=PT.exec(t);){let n=i.shift(),s=i.findIndex(o=>o!=null);this.parts.push(s in Uf?Uf[s]({token:i[s]||n,date:this.date,parts:this.parts,locales:this.locales}):i[s]||n)}let r=this.parts.reduce((n,s)=>(typeof s=="string"&&typeof n[n.length-1]=="string"?n[n.length-1]+=s:n.push(s),n),[]);this.parts.splice(0),this.parts.push(...r),this.reset()}moveCursor(t){this.typed="",this.cursor=t,this.fire()}reset(){this.moveCursor(this.parts.findIndex(t=>t instanceof Bf)),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}async validate(){let t=await this.validator(this.value);typeof t=="string"&&(this.errorMsg=t,t=!1),this.error=!t}async submit(){if(await this.validate(),this.error){this.color="red",this.fire(),this.render();return}this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}up(){this.typed="",this.parts[this.cursor].up(),this.render()}down(){this.typed="",this.parts[this.cursor].down(),this.render()}left(){let t=this.parts[this.cursor].prev();if(t==null)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}right(){let t=this.parts[this.cursor].next();if(t==null)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}next(){let t=this.parts[this.cursor].next();this.moveCursor(t?this.parts.indexOf(t):this.parts.findIndex(i=>i instanceof Bf)),this.render()}_(t){/\d/.test(t)&&(this.typed+=t,this.parts[this.cursor].setTo(this.typed),this.render())}render(){this.closed||(this.firstRender?this.out.write(qf.hide):this.out.write(Mf(this.outputText,this.out.columns)),super.render(),this.outputText=[jf.symbol(this.done,this.aborted),la.bold(this.msg),jf.delimiter(!1),this.parts.reduce((t,i,r)=>t.concat(r===this.cursor&&!this.done?la.cyan().underline(i.toString()):i),[]).join("")].join(" "),this.error&&(this.outputText+=this.errorMsg.split(`
`).reduce((t,i,r)=>t+`
${r?" ":ST.pointerSmall} ${la.red().italic(i)}`,"")),this.out.write(CT.line+qf.to(0)+this.outputText))}};$f.exports=pa});var Xf=L((DP,Vf)=>{"use strict";var On=he(),jT=Ft(),{cursor:An,erase:MT}=ge(),{style:da,figures:qT,clear:Hf,lines:BT}=xt(),UT=/[0-9]/,fa=e=>e!==void 0,Gf=(e,t)=>{let i=Math.pow(10,t);return Math.round(e*i)/i},ha=class extends jT{constructor(t={}){super(t),this.transform=da.render(t.style),this.msg=t.message,this.initial=fa(t.initial)?t.initial:"",this.float=!!t.float,this.round=t.round||2,this.inc=t.increment||1,this.min=fa(t.min)?t.min:-1/0,this.max=fa(t.max)?t.max:1/0,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.color="cyan",this.value="",this.typed="",this.lastHit=0,this.render()}set value(t){!t&&t!==0?(this.placeholder=!0,this.rendered=On.gray(this.transform.render(`${this.initial}`)),this._value=""):(this.placeholder=!1,this.rendered=this.transform.render(`${Gf(t,this.round)}`),this._value=Gf(t,this.round)),this.fire()}get value(){return this._value}parse(t){return this.float?parseFloat(t):parseInt(t)}valid(t){return t==="-"||t==="."&&this.float||UT.test(t)}reset(){this.typed="",this.value="",this.fire(),this.render()}exit(){this.abort()}abort(){let t=this.value;this.value=t!==""?t:this.initial,this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}async validate(){let t=await this.validator(this.value);typeof t=="string"&&(this.errorMsg=t,t=!1),this.error=!t}async submit(){if(await this.validate(),this.error){this.color="red",this.fire(),this.render();return}let t=this.value;this.value=t!==""?t:this.initial,this.done=!0,this.aborted=!1,this.error=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}up(){if(this.typed="",this.value===""&&(this.value=this.min-this.inc),this.value>=this.max)return this.bell();this.value+=this.inc,this.color="cyan",this.fire(),this.render()}down(){if(this.typed="",this.value===""&&(this.value=this.min+this.inc),this.value<=this.min)return this.bell();this.value-=this.inc,this.color="cyan",this.fire(),this.render()}delete(){let t=this.value.toString();if(t.length===0)return this.bell();this.value=this.parse(t=t.slice(0,-1))||"",this.value!==""&&this.value<this.min&&(this.value=this.min),this.color="cyan",this.fire(),this.render()}next(){this.value=this.initial,this.fire(),this.render()}_(t,i){if(!this.valid(t))return this.bell();let r=Date.now();if(r-this.lastHit>1e3&&(this.typed=""),this.typed+=t,this.lastHit=r,this.color="cyan",t===".")return this.fire();this.value=Math.min(this.parse(this.typed),this.max),this.value>this.max&&(this.value=this.max),this.value<this.min&&(this.value=this.min),this.fire(),this.render()}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(An.down(BT(this.outputError,this.out.columns)-1)+Hf(this.outputError,this.out.columns)),this.out.write(Hf(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[da.symbol(this.done,this.aborted),On.bold(this.msg),da.delimiter(this.done),!this.done||!this.done&&!this.placeholder?On[this.color]().underline(this.rendered):this.rendered].join(" "),this.error&&(this.outputError+=this.errorMsg.split(`
`).reduce((t,i,r)=>t+`
${r?" ":qT.pointerSmall} ${On.red().italic(i)}`,"")),this.out.write(MT.line+An.to(0)+this.outputText+An.save+this.outputError+An.restore))}};Vf.exports=ha});var ga=L((IP,Kf)=>{"use strict";var St=he(),{cursor:$T}=ge(),zT=Ft(),{clear:Yf,figures:Kt,style:Wf,wrap:HT,entriesToDisplay:GT}=xt(),ma=class extends zT{constructor(t={}){super(t),this.msg=t.message,this.cursor=t.cursor||0,this.scrollIndex=t.cursor||0,this.hint=t.hint||"",this.warn=t.warn||"- This option is disabled -",this.minSelected=t.min,this.showMinError=!1,this.maxChoices=t.max,this.instructions=t.instructions,this.optionsPerPage=t.optionsPerPage||10,this.value=t.choices.map((i,r)=>(typeof i=="string"&&(i={title:i,value:r}),{title:i&&(i.title||i.value||i),description:i&&i.description,value:i&&(i.value===void 0?r:i.value),selected:i&&i.selected,disabled:i&&i.disabled})),this.clear=Yf("",this.out.columns),t.overrideRender||this.render()}reset(){this.value.map(t=>!t.selected),this.cursor=0,this.fire(),this.render()}selected(){return this.value.filter(t=>t.selected)}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){let t=this.value.filter(i=>i.selected);this.minSelected&&t.length<this.minSelected?(this.showMinError=!0,this.render()):(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close())}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.value.length,this.render()}up(){this.cursor===0?this.cursor=this.value.length-1:this.cursor--,this.render()}down(){this.cursor===this.value.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.value[this.cursor].selected=!1,this.render()}right(){if(this.value.filter(t=>t.selected).length>=this.maxChoices)return this.bell();this.value[this.cursor].selected=!0,this.render()}handleSpaceToggle(){let t=this.value[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter(i=>i.selected).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}toggleAll(){if(this.maxChoices!==void 0||this.value[this.cursor].disabled)return this.bell();let t=!this.value[this.cursor].selected;this.value.filter(i=>!i.disabled).forEach(i=>i.selected=t),this.render()}_(t,i){if(t===" ")this.handleSpaceToggle();else if(t==="a")this.toggleAll();else return this.bell()}renderInstructions(){return this.instructions===void 0||this.instructions?typeof this.instructions=="string"?this.instructions:`
Instructions:
    ${Kt.arrowUp}/${Kt.arrowDown}: Highlight option
    ${Kt.arrowLeft}/${Kt.arrowRight}/[space]: Toggle selection
`+(this.maxChoices===void 0?`    a: Toggle all
`:"")+"    enter/return: Complete answer":""}renderOption(t,i,r,n){let s=(i.selected?St.green(Kt.radioOn):Kt.radioOff)+" "+n+" ",o,a;return i.disabled?o=t===r?St.gray().underline(i.title):St.strikethrough().gray(i.title):(o=t===r?St.cyan().underline(i.title):i.title,t===r&&i.description&&(a=` - ${i.description}`,(s.length+o.length+a.length>=this.out.columns||i.description.split(/\r?\n/).length>1)&&(a=`
`+HT(i.description,{margin:s.length,width:this.out.columns})))),s+o+St.gray(a||"")}paginateOptions(t){if(t.length===0)return St.red("No matches for this query.");let{startIndex:i,endIndex:r}=GT(this.cursor,t.length,this.optionsPerPage),n,s=[];for(let o=i;o<r;o++)o===i&&i>0?n=Kt.arrowUp:o===r-1&&r<t.length?n=Kt.arrowDown:n=" ",s.push(this.renderOption(this.cursor,t[o],o,n));return`
`+s.join(`
`)}renderOptions(t){return this.done?"":this.paginateOptions(t)}renderDoneOrInstructions(){if(this.done)return this.value.filter(i=>i.selected).map(i=>i.title).join(", ");let t=[St.gray(this.hint),this.renderInstructions()];return this.value[this.cursor].disabled&&t.push(St.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write($T.hide),super.render();let t=[Wf.symbol(this.done,this.aborted),St.bold(this.msg),Wf.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=St.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.value),this.out.write(this.clear+t),this.clear=Yf(t,this.out.columns)}};Kf.exports=ma});var th=L((NP,eh)=>{"use strict";var br=he(),VT=Ft(),{erase:XT,cursor:Jf}=ge(),{style:xa,clear:Zf,figures:va,wrap:YT,entriesToDisplay:WT}=xt(),Qf=(e,t)=>e[t]&&(e[t].value||e[t].title||e[t]),KT=(e,t)=>e[t]&&(e[t].title||e[t].value||e[t]),JT=(e,t)=>{let i=e.findIndex(r=>r.value===t||r.title===t);return i>-1?i:void 0},ya=class extends VT{constructor(t={}){super(t),this.msg=t.message,this.suggest=t.suggest,this.choices=t.choices,this.initial=typeof t.initial=="number"?t.initial:JT(t.choices,t.initial),this.select=this.initial||t.cursor||0,this.i18n={noMatches:t.noMatches||"no matches found"},this.fallback=t.fallback||this.initial,this.clearFirst=t.clearFirst||!1,this.suggestions=[],this.input="",this.limit=t.limit||10,this.cursor=0,this.transform=xa.render(t.style),this.scale=this.transform.scale,this.render=this.render.bind(this),this.complete=this.complete.bind(this),this.clear=Zf("",this.out.columns),this.complete(this.render),this.render()}set fallback(t){this._fb=Number.isSafeInteger(parseInt(t))?parseInt(t):t}get fallback(){let t;return typeof this._fb=="number"?t=this.choices[this._fb]:typeof this._fb=="string"&&(t={title:this._fb}),t||this._fb||{title:this.i18n.noMatches}}moveSelect(t){this.select=t,this.suggestions.length>0?this.value=Qf(this.suggestions,t):this.value=this.fallback.value,this.fire()}async complete(t){let i=this.completing=this.suggest(this.input,this.choices),r=await i;if(this.completing!==i)return;this.suggestions=r.map((s,o,a)=>({title:KT(a,o),value:Qf(a,o),description:s.description})),this.completing=!1;let n=Math.max(r.length-1,0);this.moveSelect(Math.min(n,this.select)),t&&t()}reset(){this.input="",this.complete(()=>{this.moveSelect(this.initial!==void 0?this.initial:0),this.render()}),this.render()}exit(){this.clearFirst&&this.input.length>0?this.reset():(this.done=this.exited=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close())}abort(){this.done=this.aborted=!0,this.exited=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.done=!0,this.aborted=this.exited=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}_(t,i){let r=this.input.slice(0,this.cursor),n=this.input.slice(this.cursor);this.input=`${r}${t}${n}`,this.cursor=r.length+1,this.complete(this.render),this.render()}delete(){if(this.cursor===0)return this.bell();let t=this.input.slice(0,this.cursor-1),i=this.input.slice(this.cursor);this.input=`${t}${i}`,this.complete(this.render),this.cursor=this.cursor-1,this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();let t=this.input.slice(0,this.cursor),i=this.input.slice(this.cursor+1);this.input=`${t}${i}`,this.complete(this.render),this.render()}first(){this.moveSelect(0),this.render()}last(){this.moveSelect(this.suggestions.length-1),this.render()}up(){this.select===0?this.moveSelect(this.suggestions.length-1):this.moveSelect(this.select-1),this.render()}down(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}next(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}nextPage(){this.moveSelect(Math.min(this.select+this.limit,this.suggestions.length-1)),this.render()}prevPage(){this.moveSelect(Math.max(this.select-this.limit,0)),this.render()}left(){if(this.cursor<=0)return this.bell();this.cursor=this.cursor-1,this.render()}right(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();this.cursor=this.cursor+1,this.render()}renderOption(t,i,r,n){let s,o=r?va.arrowUp:n?va.arrowDown:" ",a=i?br.cyan().underline(t.title):t.title;return o=(i?br.cyan(va.pointer)+" ":"  ")+o,t.description&&(s=` - ${t.description}`,(o.length+a.length+s.length>=this.out.columns||t.description.split(/\r?\n/).length>1)&&(s=`
`+YT(t.description,{margin:3,width:this.out.columns}))),o+" "+a+br.gray(s||"")}render(){if(this.closed)return;this.firstRender?this.out.write(Jf.hide):this.out.write(Zf(this.outputText,this.out.columns)),super.render();let{startIndex:t,endIndex:i}=WT(this.select,this.choices.length,this.limit);if(this.outputText=[xa.symbol(this.done,this.aborted,this.exited),br.bold(this.msg),xa.delimiter(this.completing),this.done&&this.suggestions[this.select]?this.suggestions[this.select].title:this.rendered=this.transform.render(this.input)].join(" "),!this.done){let r=this.suggestions.slice(t,i).map((n,s)=>this.renderOption(n,this.select===s+t,s===0&&t>0,s+t===i-1&&i<this.choices.length)).join(`
`);this.outputText+=`
`+(r||br.gray(this.fallback.title))}this.out.write(XT.line+Jf.to(0)+this.outputText)}};eh.exports=ya});var sh=L((LP,nh)=>{"use strict";var Mt=he(),{cursor:ZT}=ge(),QT=ga(),{clear:ih,style:rh,figures:ji}=xt(),ba=class extends QT{constructor(t={}){t.overrideRender=!0,super(t),this.inputValue="",this.clear=ih("",this.out.columns),this.filteredOptions=this.value,this.render()}last(){this.cursor=this.filteredOptions.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.filteredOptions.length,this.render()}up(){this.cursor===0?this.cursor=this.filteredOptions.length-1:this.cursor--,this.render()}down(){this.cursor===this.filteredOptions.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.filteredOptions[this.cursor].selected=!1,this.render()}right(){if(this.value.filter(t=>t.selected).length>=this.maxChoices)return this.bell();this.filteredOptions[this.cursor].selected=!0,this.render()}delete(){this.inputValue.length&&(this.inputValue=this.inputValue.substr(0,this.inputValue.length-1),this.updateFilteredOptions())}updateFilteredOptions(){let t=this.filteredOptions[this.cursor];this.filteredOptions=this.value.filter(r=>this.inputValue?!!(typeof r.title=="string"&&r.title.toLowerCase().includes(this.inputValue.toLowerCase())||typeof r.value=="string"&&r.value.toLowerCase().includes(this.inputValue.toLowerCase())):!0);let i=this.filteredOptions.findIndex(r=>r===t);this.cursor=i<0?0:i,this.render()}handleSpaceToggle(){let t=this.filteredOptions[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter(i=>i.selected).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}handleInputChange(t){this.inputValue=this.inputValue+t,this.updateFilteredOptions()}_(t,i){t===" "?this.handleSpaceToggle():this.handleInputChange(t)}renderInstructions(){return this.instructions===void 0||this.instructions?typeof this.instructions=="string"?this.instructions:`
Instructions:
    ${ji.arrowUp}/${ji.arrowDown}: Highlight option
    ${ji.arrowLeft}/${ji.arrowRight}/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer
`:""}renderCurrentInput(){return`
Filtered results for: ${this.inputValue?this.inputValue:Mt.gray("Enter something to filter")}
`}renderOption(t,i,r){let n;return i.disabled?n=t===r?Mt.gray().underline(i.title):Mt.strikethrough().gray(i.title):n=t===r?Mt.cyan().underline(i.title):i.title,(i.selected?Mt.green(ji.radioOn):ji.radioOff)+"  "+n}renderDoneOrInstructions(){if(this.done)return this.value.filter(i=>i.selected).map(i=>i.title).join(", ");let t=[Mt.gray(this.hint),this.renderInstructions(),this.renderCurrentInput()];return this.filteredOptions.length&&this.filteredOptions[this.cursor].disabled&&t.push(Mt.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(ZT.hide),super.render();let t=[rh.symbol(this.done,this.aborted),Mt.bold(this.msg),rh.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=Mt.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.filteredOptions),this.out.write(this.clear+t),this.clear=ih(t,this.out.columns)}};nh.exports=ba});var lh=L((kP,uh)=>{"use strict";var oh=he(),eS=Ft(),{style:ah,clear:tS}=xt(),{erase:iS,cursor:ch}=ge(),wa=class extends eS{constructor(t={}){super(t),this.msg=t.message,this.value=t.initial,this.initialValue=!!t.initial,this.yesMsg=t.yes||"yes",this.yesOption=t.yesOption||"(Y/n)",this.noMsg=t.no||"no",this.noOption=t.noOption||"(y/N)",this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.value=this.value||!1,this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}_(t,i){return t.toLowerCase()==="y"?(this.value=!0,this.submit()):t.toLowerCase()==="n"?(this.value=!1,this.submit()):this.bell()}render(){this.closed||(this.firstRender?this.out.write(ch.hide):this.out.write(tS(this.outputText,this.out.columns)),super.render(),this.outputText=[ah.symbol(this.done,this.aborted),oh.bold(this.msg),ah.delimiter(this.done),this.done?this.value?this.yesMsg:this.noMsg:oh.gray(this.initialValue?this.yesOption:this.noOption)].join(" "),this.out.write(iS.line+ch.to(0)+this.outputText))}};uh.exports=wa});var dh=L((RP,ph)=>{"use strict";ph.exports={TextPrompt:uf(),SelectPrompt:ff(),TogglePrompt:xf(),DatePrompt:zf(),NumberPrompt:Xf(),MultiselectPrompt:ga(),AutocompletePrompt:th(),AutocompleteMultiselectPrompt:sh(),ConfirmPrompt:lh()}});var hh=L(fh=>{"use strict";var Ye=fh,rS=dh(),Dn=e=>e;function Ct(e,t,i={}){return new Promise((r,n)=>{let s=new rS[e](t),o=i.onAbort||Dn,a=i.onSubmit||Dn,c=i.onExit||Dn;s.on("state",t.onState||Dn),s.on("submit",u=>r(a(u))),s.on("exit",u=>r(c(u))),s.on("abort",u=>n(o(u)))})}Ye.text=e=>Ct("TextPrompt",e);Ye.password=e=>(e.style="password",Ye.text(e));Ye.invisible=e=>(e.style="invisible",Ye.text(e));Ye.number=e=>Ct("NumberPrompt",e);Ye.date=e=>Ct("DatePrompt",e);Ye.confirm=e=>Ct("ConfirmPrompt",e);Ye.list=e=>{let t=e.separator||",";return Ct("TextPrompt",e,{onSubmit:i=>i.split(t).map(r=>r.trim())})};Ye.toggle=e=>Ct("TogglePrompt",e);Ye.select=e=>Ct("SelectPrompt",e);Ye.multiselect=e=>{e.choices=[].concat(e.choices||[]);let t=i=>i.filter(r=>r.selected).map(r=>r.value);return Ct("MultiselectPrompt",e,{onAbort:t,onSubmit:t})};Ye.autocompleteMultiselect=e=>{e.choices=[].concat(e.choices||[]);let t=i=>i.filter(r=>r.selected).map(r=>r.value);return Ct("AutocompleteMultiselectPrompt",e,{onAbort:t,onSubmit:t})};var nS=(e,t)=>Promise.resolve(t.filter(i=>i.title.slice(0,e.length).toLowerCase()===e.toLowerCase()));Ye.autocomplete=e=>(e.suggest=e.suggest||nS,e.choices=[].concat(e.choices||[]),Ct("AutocompletePrompt",e))});var xh=L((FP,gh)=>{"use strict";var Ea=hh(),sS=["suggest","format","onState","validate","onRender","type"],mh=()=>{};async function Jt(e=[],{onSubmit:t=mh,onCancel:i=mh}={}){let r={},n=Jt._override||{};e=[].concat(e);let s,o,a,c,u,m,g=async(x,p,h=!1)=>{if(!(!h&&x.validate&&x.validate(p)!==!0))return x.format?await x.format(p,r):p};for(o of e)if({name:c,type:u}=o,typeof u=="function"&&(u=await u(s,{...r},o),o.type=u),!!u){for(let x in o){if(sS.includes(x))continue;let p=o[x];o[x]=typeof p=="function"?await p(s,{...r},m):p}if(m=o,typeof o.message!="string")throw new Error("prompt message is required");if({name:c,type:u}=o,Ea[u]===void 0)throw new Error(`prompt type (${u}) is not defined`);if(n[o.name]!==void 0&&(s=await g(o,n[o.name]),s!==void 0)){r[c]=s;continue}try{s=Jt._injected?oS(Jt._injected,o.initial):await Ea[u](o),r[c]=s=await g(o,s,!0),a=await t(o,s,r)}catch{a=!await i(o,r)}if(a)return r}return r}function oS(e,t){let i=e.shift();if(i instanceof Error)throw i;return i===void 0?t:i}function aS(e){Jt._injected=(Jt._injected||[]).concat(e)}function cS(e){Jt._override=Object.assign({},e)}gh.exports=Object.assign(Jt,{prompt:Jt,prompts:Ea,inject:aS,override:cS})});var yh=L((jP,vh)=>{"use strict";function uS(e){e=(Array.isArray(e)?e:e.split(".")).map(Number);let t=0,i=process.versions.node.split(".").map(Number);for(;t<e.length;t++){if(i[t]>e[t])return!1;if(e[t]>i[t])return!0}return!1}vh.exports=uS("8.6.0")?$d():xh()});var Rh=L((O2,kh)=>{"use strict";var Lh=require("stream").Stream,YS=require("util");kh.exports=yt;function yt(){this.source=null,this.dataSize=0,this.maxDataSize=1024*1024,this.pauseStream=!0,this._maxDataSizeExceeded=!1,this._released=!1,this._bufferedEvents=[]}YS.inherits(yt,Lh);yt.create=function(e,t){var i=new this;t=t||{};for(var r in t)i[r]=t[r];i.source=e;var n=e.emit;return e.emit=function(){return i._handleEmit(arguments),n.apply(e,arguments)},e.on("error",function(){}),i.pauseStream&&e.pause(),i};Object.defineProperty(yt.prototype,"readable",{configurable:!0,enumerable:!0,get:function(){return this.source.readable}});yt.prototype.setEncoding=function(){return this.source.setEncoding.apply(this.source,arguments)};yt.prototype.resume=function(){this._released||this.release(),this.source.resume()};yt.prototype.pause=function(){this.source.pause()};yt.prototype.release=function(){this._released=!0,this._bufferedEvents.forEach(function(e){this.emit.apply(this,e)}.bind(this)),this._bufferedEvents=[]};yt.prototype.pipe=function(){var e=Lh.prototype.pipe.apply(this,arguments);return this.resume(),e};yt.prototype._handleEmit=function(e){if(this._released){this.emit.apply(this,e);return}e[0]==="data"&&(this.dataSize+=e[1].length,this._checkIfMaxDataSizeExceeded()),this._bufferedEvents.push(e)};yt.prototype._checkIfMaxDataSizeExceeded=function(){if(!this._maxDataSizeExceeded&&!(this.dataSize<=this.maxDataSize)){this._maxDataSizeExceeded=!0;var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this.emit("error",new Error(e))}}});var Mh=L((A2,jh)=>{"use strict";var WS=require("util"),Fh=require("stream").Stream,Ph=Rh();jh.exports=we;function we(){this.writable=!1,this.readable=!0,this.dataSize=0,this.maxDataSize=2*1024*1024,this.pauseStreams=!0,this._released=!1,this._streams=[],this._currentStream=null,this._insideLoop=!1,this._pendingNext=!1}WS.inherits(we,Fh);we.create=function(e){var t=new this;e=e||{};for(var i in e)t[i]=e[i];return t};we.isStreamLike=function(e){return typeof e!="function"&&typeof e!="string"&&typeof e!="boolean"&&typeof e!="number"&&!Buffer.isBuffer(e)};we.prototype.append=function(e){var t=we.isStreamLike(e);if(t){if(!(e instanceof Ph)){var i=Ph.create(e,{maxDataSize:1/0,pauseStream:this.pauseStreams});e.on("data",this._checkDataSize.bind(this)),e=i}this._handleErrors(e),this.pauseStreams&&e.pause()}return this._streams.push(e),this};we.prototype.pipe=function(e,t){return Fh.prototype.pipe.call(this,e,t),this.resume(),e};we.prototype._getNext=function(){if(this._currentStream=null,this._insideLoop){this._pendingNext=!0;return}this._insideLoop=!0;try{do this._pendingNext=!1,this._realGetNext();while(this._pendingNext)}finally{this._insideLoop=!1}};we.prototype._realGetNext=function(){var e=this._streams.shift();if(typeof e>"u"){this.end();return}if(typeof e!="function"){this._pipeNext(e);return}var t=e;t(function(i){var r=we.isStreamLike(i);r&&(i.on("data",this._checkDataSize.bind(this)),this._handleErrors(i)),this._pipeNext(i)}.bind(this))};we.prototype._pipeNext=function(e){this._currentStream=e;var t=we.isStreamLike(e);if(t){e.on("end",this._getNext.bind(this)),e.pipe(this,{end:!1});return}var i=e;this.write(i),this._getNext()};we.prototype._handleErrors=function(e){var t=this;e.on("error",function(i){t._emitError(i)})};we.prototype.write=function(e){this.emit("data",e)};we.prototype.pause=function(){this.pauseStreams&&(this.pauseStreams&&this._currentStream&&typeof this._currentStream.pause=="function"&&this._currentStream.pause(),this.emit("pause"))};we.prototype.resume=function(){this._released||(this._released=!0,this.writable=!0,this._getNext()),this.pauseStreams&&this._currentStream&&typeof this._currentStream.resume=="function"&&this._currentStream.resume(),this.emit("resume")};we.prototype.end=function(){this._reset(),this.emit("end")};we.prototype.destroy=function(){this._reset(),this.emit("close")};we.prototype._reset=function(){this.writable=!1,this._streams=[],this._currentStream=null};we.prototype._checkDataSize=function(){if(this._updateDataSize(),!(this.dataSize<=this.maxDataSize)){var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this._emitError(new Error(e))}};we.prototype._updateDataSize=function(){this.dataSize=0;var e=this;this._streams.forEach(function(t){t.dataSize&&(e.dataSize+=t.dataSize)}),this._currentStream&&this._currentStream.dataSize&&(this.dataSize+=this._currentStream.dataSize)};we.prototype._emitError=function(e){this._reset(),this.emit("error",e)}});var qh=L((D2,KS)=>{KS.exports={"application/1d-interleaved-parityfec":{source:"iana"},"application/3gpdash-qoe-report+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/3gpp-ims+xml":{source:"iana",compressible:!0},"application/3gpphal+json":{source:"iana",compressible:!0},"application/3gpphalforms+json":{source:"iana",compressible:!0},"application/a2l":{source:"iana"},"application/ace+cbor":{source:"iana"},"application/activemessage":{source:"iana"},"application/activity+json":{source:"iana",compressible:!0},"application/alto-costmap+json":{source:"iana",compressible:!0},"application/alto-costmapfilter+json":{source:"iana",compressible:!0},"application/alto-directory+json":{source:"iana",compressible:!0},"application/alto-endpointcost+json":{source:"iana",compressible:!0},"application/alto-endpointcostparams+json":{source:"iana",compressible:!0},"application/alto-endpointprop+json":{source:"iana",compressible:!0},"application/alto-endpointpropparams+json":{source:"iana",compressible:!0},"application/alto-error+json":{source:"iana",compressible:!0},"application/alto-networkmap+json":{source:"iana",compressible:!0},"application/alto-networkmapfilter+json":{source:"iana",compressible:!0},"application/alto-updatestreamcontrol+json":{source:"iana",compressible:!0},"application/alto-updatestreamparams+json":{source:"iana",compressible:!0},"application/aml":{source:"iana"},"application/andrew-inset":{source:"iana",extensions:["ez"]},"application/applefile":{source:"iana"},"application/applixware":{source:"apache",extensions:["aw"]},"application/at+jwt":{source:"iana"},"application/atf":{source:"iana"},"application/atfx":{source:"iana"},"application/atom+xml":{source:"iana",compressible:!0,extensions:["atom"]},"application/atomcat+xml":{source:"iana",compressible:!0,extensions:["atomcat"]},"application/atomdeleted+xml":{source:"iana",compressible:!0,extensions:["atomdeleted"]},"application/atomicmail":{source:"iana"},"application/atomsvc+xml":{source:"iana",compressible:!0,extensions:["atomsvc"]},"application/atsc-dwd+xml":{source:"iana",compressible:!0,extensions:["dwd"]},"application/atsc-dynamic-event-message":{source:"iana"},"application/atsc-held+xml":{source:"iana",compressible:!0,extensions:["held"]},"application/atsc-rdt+json":{source:"iana",compressible:!0},"application/atsc-rsat+xml":{source:"iana",compressible:!0,extensions:["rsat"]},"application/atxml":{source:"iana"},"application/auth-policy+xml":{source:"iana",compressible:!0},"application/bacnet-xdd+zip":{source:"iana",compressible:!1},"application/batch-smtp":{source:"iana"},"application/bdoc":{compressible:!1,extensions:["bdoc"]},"application/beep+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/calendar+json":{source:"iana",compressible:!0},"application/calendar+xml":{source:"iana",compressible:!0,extensions:["xcs"]},"application/call-completion":{source:"iana"},"application/cals-1840":{source:"iana"},"application/captive+json":{source:"iana",compressible:!0},"application/cbor":{source:"iana"},"application/cbor-seq":{source:"iana"},"application/cccex":{source:"iana"},"application/ccmp+xml":{source:"iana",compressible:!0},"application/ccxml+xml":{source:"iana",compressible:!0,extensions:["ccxml"]},"application/cdfx+xml":{source:"iana",compressible:!0,extensions:["cdfx"]},"application/cdmi-capability":{source:"iana",extensions:["cdmia"]},"application/cdmi-container":{source:"iana",extensions:["cdmic"]},"application/cdmi-domain":{source:"iana",extensions:["cdmid"]},"application/cdmi-object":{source:"iana",extensions:["cdmio"]},"application/cdmi-queue":{source:"iana",extensions:["cdmiq"]},"application/cdni":{source:"iana"},"application/cea":{source:"iana"},"application/cea-2018+xml":{source:"iana",compressible:!0},"application/cellml+xml":{source:"iana",compressible:!0},"application/cfw":{source:"iana"},"application/city+json":{source:"iana",compressible:!0},"application/clr":{source:"iana"},"application/clue+xml":{source:"iana",compressible:!0},"application/clue_info+xml":{source:"iana",compressible:!0},"application/cms":{source:"iana"},"application/cnrp+xml":{source:"iana",compressible:!0},"application/coap-group+json":{source:"iana",compressible:!0},"application/coap-payload":{source:"iana"},"application/commonground":{source:"iana"},"application/conference-info+xml":{source:"iana",compressible:!0},"application/cose":{source:"iana"},"application/cose-key":{source:"iana"},"application/cose-key-set":{source:"iana"},"application/cpl+xml":{source:"iana",compressible:!0,extensions:["cpl"]},"application/csrattrs":{source:"iana"},"application/csta+xml":{source:"iana",compressible:!0},"application/cstadata+xml":{source:"iana",compressible:!0},"application/csvm+json":{source:"iana",compressible:!0},"application/cu-seeme":{source:"apache",extensions:["cu"]},"application/cwt":{source:"iana"},"application/cybercash":{source:"iana"},"application/dart":{compressible:!0},"application/dash+xml":{source:"iana",compressible:!0,extensions:["mpd"]},"application/dash-patch+xml":{source:"iana",compressible:!0,extensions:["mpp"]},"application/dashdelta":{source:"iana"},"application/davmount+xml":{source:"iana",compressible:!0,extensions:["davmount"]},"application/dca-rft":{source:"iana"},"application/dcd":{source:"iana"},"application/dec-dx":{source:"iana"},"application/dialog-info+xml":{source:"iana",compressible:!0},"application/dicom":{source:"iana"},"application/dicom+json":{source:"iana",compressible:!0},"application/dicom+xml":{source:"iana",compressible:!0},"application/dii":{source:"iana"},"application/dit":{source:"iana"},"application/dns":{source:"iana"},"application/dns+json":{source:"iana",compressible:!0},"application/dns-message":{source:"iana"},"application/docbook+xml":{source:"apache",compressible:!0,extensions:["dbk"]},"application/dots+cbor":{source:"iana"},"application/dskpp+xml":{source:"iana",compressible:!0},"application/dssc+der":{source:"iana",extensions:["dssc"]},"application/dssc+xml":{source:"iana",compressible:!0,extensions:["xdssc"]},"application/dvcs":{source:"iana"},"application/ecmascript":{source:"iana",compressible:!0,extensions:["es","ecma"]},"application/edi-consent":{source:"iana"},"application/edi-x12":{source:"iana",compressible:!1},"application/edifact":{source:"iana",compressible:!1},"application/efi":{source:"iana"},"application/elm+json":{source:"iana",charset:"UTF-8",compressible:!0},"application/elm+xml":{source:"iana",compressible:!0},"application/emergencycalldata.cap+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/emergencycalldata.comment+xml":{source:"iana",compressible:!0},"application/emergencycalldata.control+xml":{source:"iana",compressible:!0},"application/emergencycalldata.deviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.ecall.msd":{source:"iana"},"application/emergencycalldata.providerinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.serviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.subscriberinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.veds+xml":{source:"iana",compressible:!0},"application/emma+xml":{source:"iana",compressible:!0,extensions:["emma"]},"application/emotionml+xml":{source:"iana",compressible:!0,extensions:["emotionml"]},"application/encaprtp":{source:"iana"},"application/epp+xml":{source:"iana",compressible:!0},"application/epub+zip":{source:"iana",compressible:!1,extensions:["epub"]},"application/eshop":{source:"iana"},"application/exi":{source:"iana",extensions:["exi"]},"application/expect-ct-report+json":{source:"iana",compressible:!0},"application/express":{source:"iana",extensions:["exp"]},"application/fastinfoset":{source:"iana"},"application/fastsoap":{source:"iana"},"application/fdt+xml":{source:"iana",compressible:!0,extensions:["fdt"]},"application/fhir+json":{source:"iana",charset:"UTF-8",compressible:!0},"application/fhir+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/fido.trusted-apps+json":{compressible:!0},"application/fits":{source:"iana"},"application/flexfec":{source:"iana"},"application/font-sfnt":{source:"iana"},"application/font-tdpfr":{source:"iana",extensions:["pfr"]},"application/font-woff":{source:"iana",compressible:!1},"application/framework-attributes+xml":{source:"iana",compressible:!0},"application/geo+json":{source:"iana",compressible:!0,extensions:["geojson"]},"application/geo+json-seq":{source:"iana"},"application/geopackage+sqlite3":{source:"iana"},"application/geoxacml+xml":{source:"iana",compressible:!0},"application/gltf-buffer":{source:"iana"},"application/gml+xml":{source:"iana",compressible:!0,extensions:["gml"]},"application/gpx+xml":{source:"apache",compressible:!0,extensions:["gpx"]},"application/gxf":{source:"apache",extensions:["gxf"]},"application/gzip":{source:"iana",compressible:!1,extensions:["gz"]},"application/h224":{source:"iana"},"application/held+xml":{source:"iana",compressible:!0},"application/hjson":{extensions:["hjson"]},"application/http":{source:"iana"},"application/hyperstudio":{source:"iana",extensions:["stk"]},"application/ibe-key-request+xml":{source:"iana",compressible:!0},"application/ibe-pkg-reply+xml":{source:"iana",compressible:!0},"application/ibe-pp-data":{source:"iana"},"application/iges":{source:"iana"},"application/im-iscomposing+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/index":{source:"iana"},"application/index.cmd":{source:"iana"},"application/index.obj":{source:"iana"},"application/index.response":{source:"iana"},"application/index.vnd":{source:"iana"},"application/inkml+xml":{source:"iana",compressible:!0,extensions:["ink","inkml"]},"application/iotp":{source:"iana"},"application/ipfix":{source:"iana",extensions:["ipfix"]},"application/ipp":{source:"iana"},"application/isup":{source:"iana"},"application/its+xml":{source:"iana",compressible:!0,extensions:["its"]},"application/java-archive":{source:"apache",compressible:!1,extensions:["jar","war","ear"]},"application/java-serialized-object":{source:"apache",compressible:!1,extensions:["ser"]},"application/java-vm":{source:"apache",compressible:!1,extensions:["class"]},"application/javascript":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["js","mjs"]},"application/jf2feed+json":{source:"iana",compressible:!0},"application/jose":{source:"iana"},"application/jose+json":{source:"iana",compressible:!0},"application/jrd+json":{source:"iana",compressible:!0},"application/jscalendar+json":{source:"iana",compressible:!0},"application/json":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["json","map"]},"application/json-patch+json":{source:"iana",compressible:!0},"application/json-seq":{source:"iana"},"application/json5":{extensions:["json5"]},"application/jsonml+json":{source:"apache",compressible:!0,extensions:["jsonml"]},"application/jwk+json":{source:"iana",compressible:!0},"application/jwk-set+json":{source:"iana",compressible:!0},"application/jwt":{source:"iana"},"application/kpml-request+xml":{source:"iana",compressible:!0},"application/kpml-response+xml":{source:"iana",compressible:!0},"application/ld+json":{source:"iana",compressible:!0,extensions:["jsonld"]},"application/lgr+xml":{source:"iana",compressible:!0,extensions:["lgr"]},"application/link-format":{source:"iana"},"application/load-control+xml":{source:"iana",compressible:!0},"application/lost+xml":{source:"iana",compressible:!0,extensions:["lostxml"]},"application/lostsync+xml":{source:"iana",compressible:!0},"application/lpf+zip":{source:"iana",compressible:!1},"application/lxf":{source:"iana"},"application/mac-binhex40":{source:"iana",extensions:["hqx"]},"application/mac-compactpro":{source:"apache",extensions:["cpt"]},"application/macwriteii":{source:"iana"},"application/mads+xml":{source:"iana",compressible:!0,extensions:["mads"]},"application/manifest+json":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["webmanifest"]},"application/marc":{source:"iana",extensions:["mrc"]},"application/marcxml+xml":{source:"iana",compressible:!0,extensions:["mrcx"]},"application/mathematica":{source:"iana",extensions:["ma","nb","mb"]},"application/mathml+xml":{source:"iana",compressible:!0,extensions:["mathml"]},"application/mathml-content+xml":{source:"iana",compressible:!0},"application/mathml-presentation+xml":{source:"iana",compressible:!0},"application/mbms-associated-procedure-description+xml":{source:"iana",compressible:!0},"application/mbms-deregister+xml":{source:"iana",compressible:!0},"application/mbms-envelope+xml":{source:"iana",compressible:!0},"application/mbms-msk+xml":{source:"iana",compressible:!0},"application/mbms-msk-response+xml":{source:"iana",compressible:!0},"application/mbms-protection-description+xml":{source:"iana",compressible:!0},"application/mbms-reception-report+xml":{source:"iana",compressible:!0},"application/mbms-register+xml":{source:"iana",compressible:!0},"application/mbms-register-response+xml":{source:"iana",compressible:!0},"application/mbms-schedule+xml":{source:"iana",compressible:!0},"application/mbms-user-service-description+xml":{source:"iana",compressible:!0},"application/mbox":{source:"iana",extensions:["mbox"]},"application/media-policy-dataset+xml":{source:"iana",compressible:!0,extensions:["mpf"]},"application/media_control+xml":{source:"iana",compressible:!0},"application/mediaservercontrol+xml":{source:"iana",compressible:!0,extensions:["mscml"]},"application/merge-patch+json":{source:"iana",compressible:!0},"application/metalink+xml":{source:"apache",compressible:!0,extensions:["metalink"]},"application/metalink4+xml":{source:"iana",compressible:!0,extensions:["meta4"]},"application/mets+xml":{source:"iana",compressible:!0,extensions:["mets"]},"application/mf4":{source:"iana"},"application/mikey":{source:"iana"},"application/mipc":{source:"iana"},"application/missing-blocks+cbor-seq":{source:"iana"},"application/mmt-aei+xml":{source:"iana",compressible:!0,extensions:["maei"]},"application/mmt-usd+xml":{source:"iana",compressible:!0,extensions:["musd"]},"application/mods+xml":{source:"iana",compressible:!0,extensions:["mods"]},"application/moss-keys":{source:"iana"},"application/moss-signature":{source:"iana"},"application/mosskey-data":{source:"iana"},"application/mosskey-request":{source:"iana"},"application/mp21":{source:"iana",extensions:["m21","mp21"]},"application/mp4":{source:"iana",extensions:["mp4s","m4p"]},"application/mpeg4-generic":{source:"iana"},"application/mpeg4-iod":{source:"iana"},"application/mpeg4-iod-xmt":{source:"iana"},"application/mrb-consumer+xml":{source:"iana",compressible:!0},"application/mrb-publish+xml":{source:"iana",compressible:!0},"application/msc-ivr+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/msc-mixer+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/msword":{source:"iana",compressible:!1,extensions:["doc","dot"]},"application/mud+json":{source:"iana",compressible:!0},"application/multipart-core":{source:"iana"},"application/mxf":{source:"iana",extensions:["mxf"]},"application/n-quads":{source:"iana",extensions:["nq"]},"application/n-triples":{source:"iana",extensions:["nt"]},"application/nasdata":{source:"iana"},"application/news-checkgroups":{source:"iana",charset:"US-ASCII"},"application/news-groupinfo":{source:"iana",charset:"US-ASCII"},"application/news-transmission":{source:"iana"},"application/nlsml+xml":{source:"iana",compressible:!0},"application/node":{source:"iana",extensions:["cjs"]},"application/nss":{source:"iana"},"application/oauth-authz-req+jwt":{source:"iana"},"application/oblivious-dns-message":{source:"iana"},"application/ocsp-request":{source:"iana"},"application/ocsp-response":{source:"iana"},"application/octet-stream":{source:"iana",compressible:!1,extensions:["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{source:"iana",extensions:["oda"]},"application/odm+xml":{source:"iana",compressible:!0},"application/odx":{source:"iana"},"application/oebps-package+xml":{source:"iana",compressible:!0,extensions:["opf"]},"application/ogg":{source:"iana",compressible:!1,extensions:["ogx"]},"application/omdoc+xml":{source:"apache",compressible:!0,extensions:["omdoc"]},"application/onenote":{source:"apache",extensions:["onetoc","onetoc2","onetmp","onepkg"]},"application/opc-nodeset+xml":{source:"iana",compressible:!0},"application/oscore":{source:"iana"},"application/oxps":{source:"iana",extensions:["oxps"]},"application/p21":{source:"iana"},"application/p21+zip":{source:"iana",compressible:!1},"application/p2p-overlay+xml":{source:"iana",compressible:!0,extensions:["relo"]},"application/parityfec":{source:"iana"},"application/passport":{source:"iana"},"application/patch-ops-error+xml":{source:"iana",compressible:!0,extensions:["xer"]},"application/pdf":{source:"iana",compressible:!1,extensions:["pdf"]},"application/pdx":{source:"iana"},"application/pem-certificate-chain":{source:"iana"},"application/pgp-encrypted":{source:"iana",compressible:!1,extensions:["pgp"]},"application/pgp-keys":{source:"iana",extensions:["asc"]},"application/pgp-signature":{source:"iana",extensions:["asc","sig"]},"application/pics-rules":{source:"apache",extensions:["prf"]},"application/pidf+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/pidf-diff+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/pkcs10":{source:"iana",extensions:["p10"]},"application/pkcs12":{source:"iana"},"application/pkcs7-mime":{source:"iana",extensions:["p7m","p7c"]},"application/pkcs7-signature":{source:"iana",extensions:["p7s"]},"application/pkcs8":{source:"iana",extensions:["p8"]},"application/pkcs8-encrypted":{source:"iana"},"application/pkix-attr-cert":{source:"iana",extensions:["ac"]},"application/pkix-cert":{source:"iana",extensions:["cer"]},"application/pkix-crl":{source:"iana",extensions:["crl"]},"application/pkix-pkipath":{source:"iana",extensions:["pkipath"]},"application/pkixcmp":{source:"iana",extensions:["pki"]},"application/pls+xml":{source:"iana",compressible:!0,extensions:["pls"]},"application/poc-settings+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/postscript":{source:"iana",compressible:!0,extensions:["ai","eps","ps"]},"application/ppsp-tracker+json":{source:"iana",compressible:!0},"application/problem+json":{source:"iana",compressible:!0},"application/problem+xml":{source:"iana",compressible:!0},"application/provenance+xml":{source:"iana",compressible:!0,extensions:["provx"]},"application/prs.alvestrand.titrax-sheet":{source:"iana"},"application/prs.cww":{source:"iana",extensions:["cww"]},"application/prs.cyn":{source:"iana",charset:"7-BIT"},"application/prs.hpub+zip":{source:"iana",compressible:!1},"application/prs.nprend":{source:"iana"},"application/prs.plucker":{source:"iana"},"application/prs.rdf-xml-crypt":{source:"iana"},"application/prs.xsf+xml":{source:"iana",compressible:!0},"application/pskc+xml":{source:"iana",compressible:!0,extensions:["pskcxml"]},"application/pvd+json":{source:"iana",compressible:!0},"application/qsig":{source:"iana"},"application/raml+yaml":{compressible:!0,extensions:["raml"]},"application/raptorfec":{source:"iana"},"application/rdap+json":{source:"iana",compressible:!0},"application/rdf+xml":{source:"iana",compressible:!0,extensions:["rdf","owl"]},"application/reginfo+xml":{source:"iana",compressible:!0,extensions:["rif"]},"application/relax-ng-compact-syntax":{source:"iana",extensions:["rnc"]},"application/remote-printing":{source:"iana"},"application/reputon+json":{source:"iana",compressible:!0},"application/resource-lists+xml":{source:"iana",compressible:!0,extensions:["rl"]},"application/resource-lists-diff+xml":{source:"iana",compressible:!0,extensions:["rld"]},"application/rfc+xml":{source:"iana",compressible:!0},"application/riscos":{source:"iana"},"application/rlmi+xml":{source:"iana",compressible:!0},"application/rls-services+xml":{source:"iana",compressible:!0,extensions:["rs"]},"application/route-apd+xml":{source:"iana",compressible:!0,extensions:["rapd"]},"application/route-s-tsid+xml":{source:"iana",compressible:!0,extensions:["sls"]},"application/route-usd+xml":{source:"iana",compressible:!0,extensions:["rusd"]},"application/rpki-ghostbusters":{source:"iana",extensions:["gbr"]},"application/rpki-manifest":{source:"iana",extensions:["mft"]},"application/rpki-publication":{source:"iana"},"application/rpki-roa":{source:"iana",extensions:["roa"]},"application/rpki-updown":{source:"iana"},"application/rsd+xml":{source:"apache",compressible:!0,extensions:["rsd"]},"application/rss+xml":{source:"apache",compressible:!0,extensions:["rss"]},"application/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"application/rtploopback":{source:"iana"},"application/rtx":{source:"iana"},"application/samlassertion+xml":{source:"iana",compressible:!0},"application/samlmetadata+xml":{source:"iana",compressible:!0},"application/sarif+json":{source:"iana",compressible:!0},"application/sarif-external-properties+json":{source:"iana",compressible:!0},"application/sbe":{source:"iana"},"application/sbml+xml":{source:"iana",compressible:!0,extensions:["sbml"]},"application/scaip+xml":{source:"iana",compressible:!0},"application/scim+json":{source:"iana",compressible:!0},"application/scvp-cv-request":{source:"iana",extensions:["scq"]},"application/scvp-cv-response":{source:"iana",extensions:["scs"]},"application/scvp-vp-request":{source:"iana",extensions:["spq"]},"application/scvp-vp-response":{source:"iana",extensions:["spp"]},"application/sdp":{source:"iana",extensions:["sdp"]},"application/secevent+jwt":{source:"iana"},"application/senml+cbor":{source:"iana"},"application/senml+json":{source:"iana",compressible:!0},"application/senml+xml":{source:"iana",compressible:!0,extensions:["senmlx"]},"application/senml-etch+cbor":{source:"iana"},"application/senml-etch+json":{source:"iana",compressible:!0},"application/senml-exi":{source:"iana"},"application/sensml+cbor":{source:"iana"},"application/sensml+json":{source:"iana",compressible:!0},"application/sensml+xml":{source:"iana",compressible:!0,extensions:["sensmlx"]},"application/sensml-exi":{source:"iana"},"application/sep+xml":{source:"iana",compressible:!0},"application/sep-exi":{source:"iana"},"application/session-info":{source:"iana"},"application/set-payment":{source:"iana"},"application/set-payment-initiation":{source:"iana",extensions:["setpay"]},"application/set-registration":{source:"iana"},"application/set-registration-initiation":{source:"iana",extensions:["setreg"]},"application/sgml":{source:"iana"},"application/sgml-open-catalog":{source:"iana"},"application/shf+xml":{source:"iana",compressible:!0,extensions:["shf"]},"application/sieve":{source:"iana",extensions:["siv","sieve"]},"application/simple-filter+xml":{source:"iana",compressible:!0},"application/simple-message-summary":{source:"iana"},"application/simplesymbolcontainer":{source:"iana"},"application/sipc":{source:"iana"},"application/slate":{source:"iana"},"application/smil":{source:"iana"},"application/smil+xml":{source:"iana",compressible:!0,extensions:["smi","smil"]},"application/smpte336m":{source:"iana"},"application/soap+fastinfoset":{source:"iana"},"application/soap+xml":{source:"iana",compressible:!0},"application/sparql-query":{source:"iana",extensions:["rq"]},"application/sparql-results+xml":{source:"iana",compressible:!0,extensions:["srx"]},"application/spdx+json":{source:"iana",compressible:!0},"application/spirits-event+xml":{source:"iana",compressible:!0},"application/sql":{source:"iana"},"application/srgs":{source:"iana",extensions:["gram"]},"application/srgs+xml":{source:"iana",compressible:!0,extensions:["grxml"]},"application/sru+xml":{source:"iana",compressible:!0,extensions:["sru"]},"application/ssdl+xml":{source:"apache",compressible:!0,extensions:["ssdl"]},"application/ssml+xml":{source:"iana",compressible:!0,extensions:["ssml"]},"application/stix+json":{source:"iana",compressible:!0},"application/swid+xml":{source:"iana",compressible:!0,extensions:["swidtag"]},"application/tamp-apex-update":{source:"iana"},"application/tamp-apex-update-confirm":{source:"iana"},"application/tamp-community-update":{source:"iana"},"application/tamp-community-update-confirm":{source:"iana"},"application/tamp-error":{source:"iana"},"application/tamp-sequence-adjust":{source:"iana"},"application/tamp-sequence-adjust-confirm":{source:"iana"},"application/tamp-status-query":{source:"iana"},"application/tamp-status-response":{source:"iana"},"application/tamp-update":{source:"iana"},"application/tamp-update-confirm":{source:"iana"},"application/tar":{compressible:!0},"application/taxii+json":{source:"iana",compressible:!0},"application/td+json":{source:"iana",compressible:!0},"application/tei+xml":{source:"iana",compressible:!0,extensions:["tei","teicorpus"]},"application/tetra_isi":{source:"iana"},"application/thraud+xml":{source:"iana",compressible:!0,extensions:["tfi"]},"application/timestamp-query":{source:"iana"},"application/timestamp-reply":{source:"iana"},"application/timestamped-data":{source:"iana",extensions:["tsd"]},"application/tlsrpt+gzip":{source:"iana"},"application/tlsrpt+json":{source:"iana",compressible:!0},"application/tnauthlist":{source:"iana"},"application/token-introspection+jwt":{source:"iana"},"application/toml":{compressible:!0,extensions:["toml"]},"application/trickle-ice-sdpfrag":{source:"iana"},"application/trig":{source:"iana",extensions:["trig"]},"application/ttml+xml":{source:"iana",compressible:!0,extensions:["ttml"]},"application/tve-trigger":{source:"iana"},"application/tzif":{source:"iana"},"application/tzif-leap":{source:"iana"},"application/ubjson":{compressible:!1,extensions:["ubj"]},"application/ulpfec":{source:"iana"},"application/urc-grpsheet+xml":{source:"iana",compressible:!0},"application/urc-ressheet+xml":{source:"iana",compressible:!0,extensions:["rsheet"]},"application/urc-targetdesc+xml":{source:"iana",compressible:!0,extensions:["td"]},"application/urc-uisocketdesc+xml":{source:"iana",compressible:!0},"application/vcard+json":{source:"iana",compressible:!0},"application/vcard+xml":{source:"iana",compressible:!0},"application/vemmi":{source:"iana"},"application/vividence.scriptfile":{source:"apache"},"application/vnd.1000minds.decision-model+xml":{source:"iana",compressible:!0,extensions:["1km"]},"application/vnd.3gpp-prose+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-prose-pc3ch+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-v2x-local-service-information":{source:"iana"},"application/vnd.3gpp.5gnas":{source:"iana"},"application/vnd.3gpp.access-transfer-events+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.bsf+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.gmop+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.gtpc":{source:"iana"},"application/vnd.3gpp.interworking-data":{source:"iana"},"application/vnd.3gpp.lpp":{source:"iana"},"application/vnd.3gpp.mc-signalling-ear":{source:"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-payload":{source:"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-signalling":{source:"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-floor-request+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-location-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-signed+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-ue-init-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-location-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-transmission-request+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mid-call+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.ngap":{source:"iana"},"application/vnd.3gpp.pfcp":{source:"iana"},"application/vnd.3gpp.pic-bw-large":{source:"iana",extensions:["plb"]},"application/vnd.3gpp.pic-bw-small":{source:"iana",extensions:["psb"]},"application/vnd.3gpp.pic-bw-var":{source:"iana",extensions:["pvb"]},"application/vnd.3gpp.s1ap":{source:"iana"},"application/vnd.3gpp.sms":{source:"iana"},"application/vnd.3gpp.sms+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-ext+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.state-and-event-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.ussd+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.bcmcsinfo+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.sms":{source:"iana"},"application/vnd.3gpp2.tcap":{source:"iana",extensions:["tcap"]},"application/vnd.3lightssoftware.imagescal":{source:"iana"},"application/vnd.3m.post-it-notes":{source:"iana",extensions:["pwn"]},"application/vnd.accpac.simply.aso":{source:"iana",extensions:["aso"]},"application/vnd.accpac.simply.imp":{source:"iana",extensions:["imp"]},"application/vnd.acucobol":{source:"iana",extensions:["acu"]},"application/vnd.acucorp":{source:"iana",extensions:["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{source:"apache",compressible:!1,extensions:["air"]},"application/vnd.adobe.flash.movie":{source:"iana"},"application/vnd.adobe.formscentral.fcdt":{source:"iana",extensions:["fcdt"]},"application/vnd.adobe.fxp":{source:"iana",extensions:["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{source:"iana"},"application/vnd.adobe.xdp+xml":{source:"iana",compressible:!0,extensions:["xdp"]},"application/vnd.adobe.xfdf":{source:"iana",extensions:["xfdf"]},"application/vnd.aether.imp":{source:"iana"},"application/vnd.afpc.afplinedata":{source:"iana"},"application/vnd.afpc.afplinedata-pagedef":{source:"iana"},"application/vnd.afpc.cmoca-cmresource":{source:"iana"},"application/vnd.afpc.foca-charset":{source:"iana"},"application/vnd.afpc.foca-codedfont":{source:"iana"},"application/vnd.afpc.foca-codepage":{source:"iana"},"application/vnd.afpc.modca":{source:"iana"},"application/vnd.afpc.modca-cmtable":{source:"iana"},"application/vnd.afpc.modca-formdef":{source:"iana"},"application/vnd.afpc.modca-mediummap":{source:"iana"},"application/vnd.afpc.modca-objectcontainer":{source:"iana"},"application/vnd.afpc.modca-overlay":{source:"iana"},"application/vnd.afpc.modca-pagesegment":{source:"iana"},"application/vnd.age":{source:"iana",extensions:["age"]},"application/vnd.ah-barcode":{source:"iana"},"application/vnd.ahead.space":{source:"iana",extensions:["ahead"]},"application/vnd.airzip.filesecure.azf":{source:"iana",extensions:["azf"]},"application/vnd.airzip.filesecure.azs":{source:"iana",extensions:["azs"]},"application/vnd.amadeus+json":{source:"iana",compressible:!0},"application/vnd.amazon.ebook":{source:"apache",extensions:["azw"]},"application/vnd.amazon.mobi8-ebook":{source:"iana"},"application/vnd.americandynamics.acc":{source:"iana",extensions:["acc"]},"application/vnd.amiga.ami":{source:"iana",extensions:["ami"]},"application/vnd.amundsen.maze+xml":{source:"iana",compressible:!0},"application/vnd.android.ota":{source:"iana"},"application/vnd.android.package-archive":{source:"apache",compressible:!1,extensions:["apk"]},"application/vnd.anki":{source:"iana"},"application/vnd.anser-web-certificate-issue-initiation":{source:"iana",extensions:["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{source:"apache",extensions:["fti"]},"application/vnd.antix.game-component":{source:"iana",extensions:["atx"]},"application/vnd.apache.arrow.file":{source:"iana"},"application/vnd.apache.arrow.stream":{source:"iana"},"application/vnd.apache.thrift.binary":{source:"iana"},"application/vnd.apache.thrift.compact":{source:"iana"},"application/vnd.apache.thrift.json":{source:"iana"},"application/vnd.api+json":{source:"iana",compressible:!0},"application/vnd.aplextor.warrp+json":{source:"iana",compressible:!0},"application/vnd.apothekende.reservation+json":{source:"iana",compressible:!0},"application/vnd.apple.installer+xml":{source:"iana",compressible:!0,extensions:["mpkg"]},"application/vnd.apple.keynote":{source:"iana",extensions:["key"]},"application/vnd.apple.mpegurl":{source:"iana",extensions:["m3u8"]},"application/vnd.apple.numbers":{source:"iana",extensions:["numbers"]},"application/vnd.apple.pages":{source:"iana",extensions:["pages"]},"application/vnd.apple.pkpass":{compressible:!1,extensions:["pkpass"]},"application/vnd.arastra.swi":{source:"iana"},"application/vnd.aristanetworks.swi":{source:"iana",extensions:["swi"]},"application/vnd.artisan+json":{source:"iana",compressible:!0},"application/vnd.artsquare":{source:"iana"},"application/vnd.astraea-software.iota":{source:"iana",extensions:["iota"]},"application/vnd.audiograph":{source:"iana",extensions:["aep"]},"application/vnd.autopackage":{source:"iana"},"application/vnd.avalon+json":{source:"iana",compressible:!0},"application/vnd.avistar+xml":{source:"iana",compressible:!0},"application/vnd.balsamiq.bmml+xml":{source:"iana",compressible:!0,extensions:["bmml"]},"application/vnd.balsamiq.bmpr":{source:"iana"},"application/vnd.banana-accounting":{source:"iana"},"application/vnd.bbf.usp.error":{source:"iana"},"application/vnd.bbf.usp.msg":{source:"iana"},"application/vnd.bbf.usp.msg+json":{source:"iana",compressible:!0},"application/vnd.bekitzur-stech+json":{source:"iana",compressible:!0},"application/vnd.bint.med-content":{source:"iana"},"application/vnd.biopax.rdf+xml":{source:"iana",compressible:!0},"application/vnd.blink-idb-value-wrapper":{source:"iana"},"application/vnd.blueice.multipass":{source:"iana",extensions:["mpm"]},"application/vnd.bluetooth.ep.oob":{source:"iana"},"application/vnd.bluetooth.le.oob":{source:"iana"},"application/vnd.bmi":{source:"iana",extensions:["bmi"]},"application/vnd.bpf":{source:"iana"},"application/vnd.bpf3":{source:"iana"},"application/vnd.businessobjects":{source:"iana",extensions:["rep"]},"application/vnd.byu.uapi+json":{source:"iana",compressible:!0},"application/vnd.cab-jscript":{source:"iana"},"application/vnd.canon-cpdl":{source:"iana"},"application/vnd.canon-lips":{source:"iana"},"application/vnd.capasystems-pg+json":{source:"iana",compressible:!0},"application/vnd.cendio.thinlinc.clientconf":{source:"iana"},"application/vnd.century-systems.tcp_stream":{source:"iana"},"application/vnd.chemdraw+xml":{source:"iana",compressible:!0,extensions:["cdxml"]},"application/vnd.chess-pgn":{source:"iana"},"application/vnd.chipnuts.karaoke-mmd":{source:"iana",extensions:["mmd"]},"application/vnd.ciedi":{source:"iana"},"application/vnd.cinderella":{source:"iana",extensions:["cdy"]},"application/vnd.cirpack.isdn-ext":{source:"iana"},"application/vnd.citationstyles.style+xml":{source:"iana",compressible:!0,extensions:["csl"]},"application/vnd.claymore":{source:"iana",extensions:["cla"]},"application/vnd.cloanto.rp9":{source:"iana",extensions:["rp9"]},"application/vnd.clonk.c4group":{source:"iana",extensions:["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{source:"iana",extensions:["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{source:"iana",extensions:["c11amz"]},"application/vnd.coffeescript":{source:"iana"},"application/vnd.collabio.xodocuments.document":{source:"iana"},"application/vnd.collabio.xodocuments.document-template":{source:"iana"},"application/vnd.collabio.xodocuments.presentation":{source:"iana"},"application/vnd.collabio.xodocuments.presentation-template":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{source:"iana"},"application/vnd.collection+json":{source:"iana",compressible:!0},"application/vnd.collection.doc+json":{source:"iana",compressible:!0},"application/vnd.collection.next+json":{source:"iana",compressible:!0},"application/vnd.comicbook+zip":{source:"iana",compressible:!1},"application/vnd.comicbook-rar":{source:"iana"},"application/vnd.commerce-battelle":{source:"iana"},"application/vnd.commonspace":{source:"iana",extensions:["csp"]},"application/vnd.contact.cmsg":{source:"iana",extensions:["cdbcmsg"]},"application/vnd.coreos.ignition+json":{source:"iana",compressible:!0},"application/vnd.cosmocaller":{source:"iana",extensions:["cmc"]},"application/vnd.crick.clicker":{source:"iana",extensions:["clkx"]},"application/vnd.crick.clicker.keyboard":{source:"iana",extensions:["clkk"]},"application/vnd.crick.clicker.palette":{source:"iana",extensions:["clkp"]},"application/vnd.crick.clicker.template":{source:"iana",extensions:["clkt"]},"application/vnd.crick.clicker.wordbank":{source:"iana",extensions:["clkw"]},"application/vnd.criticaltools.wbs+xml":{source:"iana",compressible:!0,extensions:["wbs"]},"application/vnd.cryptii.pipe+json":{source:"iana",compressible:!0},"application/vnd.crypto-shade-file":{source:"iana"},"application/vnd.cryptomator.encrypted":{source:"iana"},"application/vnd.cryptomator.vault":{source:"iana"},"application/vnd.ctc-posml":{source:"iana",extensions:["pml"]},"application/vnd.ctct.ws+xml":{source:"iana",compressible:!0},"application/vnd.cups-pdf":{source:"iana"},"application/vnd.cups-postscript":{source:"iana"},"application/vnd.cups-ppd":{source:"iana",extensions:["ppd"]},"application/vnd.cups-raster":{source:"iana"},"application/vnd.cups-raw":{source:"iana"},"application/vnd.curl":{source:"iana"},"application/vnd.curl.car":{source:"apache",extensions:["car"]},"application/vnd.curl.pcurl":{source:"apache",extensions:["pcurl"]},"application/vnd.cyan.dean.root+xml":{source:"iana",compressible:!0},"application/vnd.cybank":{source:"iana"},"application/vnd.cyclonedx+json":{source:"iana",compressible:!0},"application/vnd.cyclonedx+xml":{source:"iana",compressible:!0},"application/vnd.d2l.coursepackage1p0+zip":{source:"iana",compressible:!1},"application/vnd.d3m-dataset":{source:"iana"},"application/vnd.d3m-problem":{source:"iana"},"application/vnd.dart":{source:"iana",compressible:!0,extensions:["dart"]},"application/vnd.data-vision.rdz":{source:"iana",extensions:["rdz"]},"application/vnd.datapackage+json":{source:"iana",compressible:!0},"application/vnd.dataresource+json":{source:"iana",compressible:!0},"application/vnd.dbf":{source:"iana",extensions:["dbf"]},"application/vnd.debian.binary-package":{source:"iana"},"application/vnd.dece.data":{source:"iana",extensions:["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{source:"iana",compressible:!0,extensions:["uvt","uvvt"]},"application/vnd.dece.unspecified":{source:"iana",extensions:["uvx","uvvx"]},"application/vnd.dece.zip":{source:"iana",extensions:["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{source:"iana",extensions:["fe_launch"]},"application/vnd.desmume.movie":{source:"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{source:"iana"},"application/vnd.dm.delegation+xml":{source:"iana",compressible:!0},"application/vnd.dna":{source:"iana",extensions:["dna"]},"application/vnd.document+json":{source:"iana",compressible:!0},"application/vnd.dolby.mlp":{source:"apache",extensions:["mlp"]},"application/vnd.dolby.mobile.1":{source:"iana"},"application/vnd.dolby.mobile.2":{source:"iana"},"application/vnd.doremir.scorecloud-binary-document":{source:"iana"},"application/vnd.dpgraph":{source:"iana",extensions:["dpg"]},"application/vnd.dreamfactory":{source:"iana",extensions:["dfac"]},"application/vnd.drive+json":{source:"iana",compressible:!0},"application/vnd.ds-keypoint":{source:"apache",extensions:["kpxx"]},"application/vnd.dtg.local":{source:"iana"},"application/vnd.dtg.local.flash":{source:"iana"},"application/vnd.dtg.local.html":{source:"iana"},"application/vnd.dvb.ait":{source:"iana",extensions:["ait"]},"application/vnd.dvb.dvbisl+xml":{source:"iana",compressible:!0},"application/vnd.dvb.dvbj":{source:"iana"},"application/vnd.dvb.esgcontainer":{source:"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess2":{source:"iana"},"application/vnd.dvb.ipdcesgpdd":{source:"iana"},"application/vnd.dvb.ipdcroaming":{source:"iana"},"application/vnd.dvb.iptv.alfec-base":{source:"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{source:"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-container+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-generic+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-msglist+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-request+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-response+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-init+xml":{source:"iana",compressible:!0},"application/vnd.dvb.pfr":{source:"iana"},"application/vnd.dvb.service":{source:"iana",extensions:["svc"]},"application/vnd.dxr":{source:"iana"},"application/vnd.dynageo":{source:"iana",extensions:["geo"]},"application/vnd.dzr":{source:"iana"},"application/vnd.easykaraoke.cdgdownload":{source:"iana"},"application/vnd.ecdis-update":{source:"iana"},"application/vnd.ecip.rlp":{source:"iana"},"application/vnd.eclipse.ditto+json":{source:"iana",compressible:!0},"application/vnd.ecowin.chart":{source:"iana",extensions:["mag"]},"application/vnd.ecowin.filerequest":{source:"iana"},"application/vnd.ecowin.fileupdate":{source:"iana"},"application/vnd.ecowin.series":{source:"iana"},"application/vnd.ecowin.seriesrequest":{source:"iana"},"application/vnd.ecowin.seriesupdate":{source:"iana"},"application/vnd.efi.img":{source:"iana"},"application/vnd.efi.iso":{source:"iana"},"application/vnd.emclient.accessrequest+xml":{source:"iana",compressible:!0},"application/vnd.enliven":{source:"iana",extensions:["nml"]},"application/vnd.enphase.envoy":{source:"iana"},"application/vnd.eprints.data+xml":{source:"iana",compressible:!0},"application/vnd.epson.esf":{source:"iana",extensions:["esf"]},"application/vnd.epson.msf":{source:"iana",extensions:["msf"]},"application/vnd.epson.quickanime":{source:"iana",extensions:["qam"]},"application/vnd.epson.salt":{source:"iana",extensions:["slt"]},"application/vnd.epson.ssf":{source:"iana",extensions:["ssf"]},"application/vnd.ericsson.quickcall":{source:"iana"},"application/vnd.espass-espass+zip":{source:"iana",compressible:!1},"application/vnd.eszigno3+xml":{source:"iana",compressible:!0,extensions:["es3","et3"]},"application/vnd.etsi.aoc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.asic-e+zip":{source:"iana",compressible:!1},"application/vnd.etsi.asic-s+zip":{source:"iana",compressible:!1},"application/vnd.etsi.cug+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvcommand+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-bc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-cod+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-npvr+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvservice+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsync+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvueprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mcid+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mheg5":{source:"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{source:"iana",compressible:!0},"application/vnd.etsi.pstn+xml":{source:"iana",compressible:!0},"application/vnd.etsi.sci+xml":{source:"iana",compressible:!0},"application/vnd.etsi.simservs+xml":{source:"iana",compressible:!0},"application/vnd.etsi.timestamp-token":{source:"iana"},"application/vnd.etsi.tsl+xml":{source:"iana",compressible:!0},"application/vnd.etsi.tsl.der":{source:"iana"},"application/vnd.eu.kasparian.car+json":{source:"iana",compressible:!0},"application/vnd.eudora.data":{source:"iana"},"application/vnd.evolv.ecig.profile":{source:"iana"},"application/vnd.evolv.ecig.settings":{source:"iana"},"application/vnd.evolv.ecig.theme":{source:"iana"},"application/vnd.exstream-empower+zip":{source:"iana",compressible:!1},"application/vnd.exstream-package":{source:"iana"},"application/vnd.ezpix-album":{source:"iana",extensions:["ez2"]},"application/vnd.ezpix-package":{source:"iana",extensions:["ez3"]},"application/vnd.f-secure.mobile":{source:"iana"},"application/vnd.familysearch.gedcom+zip":{source:"iana",compressible:!1},"application/vnd.fastcopy-disk-image":{source:"iana"},"application/vnd.fdf":{source:"iana",extensions:["fdf"]},"application/vnd.fdsn.mseed":{source:"iana",extensions:["mseed"]},"application/vnd.fdsn.seed":{source:"iana",extensions:["seed","dataless"]},"application/vnd.ffsns":{source:"iana"},"application/vnd.ficlab.flb+zip":{source:"iana",compressible:!1},"application/vnd.filmit.zfc":{source:"iana"},"application/vnd.fints":{source:"iana"},"application/vnd.firemonkeys.cloudcell":{source:"iana"},"application/vnd.flographit":{source:"iana",extensions:["gph"]},"application/vnd.fluxtime.clip":{source:"iana",extensions:["ftc"]},"application/vnd.font-fontforge-sfd":{source:"iana"},"application/vnd.framemaker":{source:"iana",extensions:["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{source:"iana",extensions:["fnc"]},"application/vnd.frogans.ltf":{source:"iana",extensions:["ltf"]},"application/vnd.fsc.weblaunch":{source:"iana",extensions:["fsc"]},"application/vnd.fujifilm.fb.docuworks":{source:"iana"},"application/vnd.fujifilm.fb.docuworks.binder":{source:"iana"},"application/vnd.fujifilm.fb.docuworks.container":{source:"iana"},"application/vnd.fujifilm.fb.jfi+xml":{source:"iana",compressible:!0},"application/vnd.fujitsu.oasys":{source:"iana",extensions:["oas"]},"application/vnd.fujitsu.oasys2":{source:"iana",extensions:["oa2"]},"application/vnd.fujitsu.oasys3":{source:"iana",extensions:["oa3"]},"application/vnd.fujitsu.oasysgp":{source:"iana",extensions:["fg5"]},"application/vnd.fujitsu.oasysprs":{source:"iana",extensions:["bh2"]},"application/vnd.fujixerox.art-ex":{source:"iana"},"application/vnd.fujixerox.art4":{source:"iana"},"application/vnd.fujixerox.ddd":{source:"iana",extensions:["ddd"]},"application/vnd.fujixerox.docuworks":{source:"iana",extensions:["xdw"]},"application/vnd.fujixerox.docuworks.binder":{source:"iana",extensions:["xbd"]},"application/vnd.fujixerox.docuworks.container":{source:"iana"},"application/vnd.fujixerox.hbpl":{source:"iana"},"application/vnd.fut-misnet":{source:"iana"},"application/vnd.futoin+cbor":{source:"iana"},"application/vnd.futoin+json":{source:"iana",compressible:!0},"application/vnd.fuzzysheet":{source:"iana",extensions:["fzs"]},"application/vnd.genomatix.tuxedo":{source:"iana",extensions:["txd"]},"application/vnd.gentics.grd+json":{source:"iana",compressible:!0},"application/vnd.geo+json":{source:"iana",compressible:!0},"application/vnd.geocube+xml":{source:"iana",compressible:!0},"application/vnd.geogebra.file":{source:"iana",extensions:["ggb"]},"application/vnd.geogebra.slides":{source:"iana"},"application/vnd.geogebra.tool":{source:"iana",extensions:["ggt"]},"application/vnd.geometry-explorer":{source:"iana",extensions:["gex","gre"]},"application/vnd.geonext":{source:"iana",extensions:["gxt"]},"application/vnd.geoplan":{source:"iana",extensions:["g2w"]},"application/vnd.geospace":{source:"iana",extensions:["g3w"]},"application/vnd.gerber":{source:"iana"},"application/vnd.globalplatform.card-content-mgt":{source:"iana"},"application/vnd.globalplatform.card-content-mgt-response":{source:"iana"},"application/vnd.gmx":{source:"iana",extensions:["gmx"]},"application/vnd.google-apps.document":{compressible:!1,extensions:["gdoc"]},"application/vnd.google-apps.presentation":{compressible:!1,extensions:["gslides"]},"application/vnd.google-apps.spreadsheet":{compressible:!1,extensions:["gsheet"]},"application/vnd.google-earth.kml+xml":{source:"iana",compressible:!0,extensions:["kml"]},"application/vnd.google-earth.kmz":{source:"iana",compressible:!1,extensions:["kmz"]},"application/vnd.gov.sk.e-form+xml":{source:"iana",compressible:!0},"application/vnd.gov.sk.e-form+zip":{source:"iana",compressible:!1},"application/vnd.gov.sk.xmldatacontainer+xml":{source:"iana",compressible:!0},"application/vnd.grafeq":{source:"iana",extensions:["gqf","gqs"]},"application/vnd.gridmp":{source:"iana"},"application/vnd.groove-account":{source:"iana",extensions:["gac"]},"application/vnd.groove-help":{source:"iana",extensions:["ghf"]},"application/vnd.groove-identity-message":{source:"iana",extensions:["gim"]},"application/vnd.groove-injector":{source:"iana",extensions:["grv"]},"application/vnd.groove-tool-message":{source:"iana",extensions:["gtm"]},"application/vnd.groove-tool-template":{source:"iana",extensions:["tpl"]},"application/vnd.groove-vcard":{source:"iana",extensions:["vcg"]},"application/vnd.hal+json":{source:"iana",compressible:!0},"application/vnd.hal+xml":{source:"iana",compressible:!0,extensions:["hal"]},"application/vnd.handheld-entertainment+xml":{source:"iana",compressible:!0,extensions:["zmm"]},"application/vnd.hbci":{source:"iana",extensions:["hbci"]},"application/vnd.hc+json":{source:"iana",compressible:!0},"application/vnd.hcl-bireports":{source:"iana"},"application/vnd.hdt":{source:"iana"},"application/vnd.heroku+json":{source:"iana",compressible:!0},"application/vnd.hhe.lesson-player":{source:"iana",extensions:["les"]},"application/vnd.hl7cda+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.hl7v2+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.hp-hpgl":{source:"iana",extensions:["hpgl"]},"application/vnd.hp-hpid":{source:"iana",extensions:["hpid"]},"application/vnd.hp-hps":{source:"iana",extensions:["hps"]},"application/vnd.hp-jlyt":{source:"iana",extensions:["jlt"]},"application/vnd.hp-pcl":{source:"iana",extensions:["pcl"]},"application/vnd.hp-pclxl":{source:"iana",extensions:["pclxl"]},"application/vnd.httphone":{source:"iana"},"application/vnd.hydrostatix.sof-data":{source:"iana",extensions:["sfd-hdstx"]},"application/vnd.hyper+json":{source:"iana",compressible:!0},"application/vnd.hyper-item+json":{source:"iana",compressible:!0},"application/vnd.hyperdrive+json":{source:"iana",compressible:!0},"application/vnd.hzn-3d-crossword":{source:"iana"},"application/vnd.ibm.afplinedata":{source:"iana"},"application/vnd.ibm.electronic-media":{source:"iana"},"application/vnd.ibm.minipay":{source:"iana",extensions:["mpy"]},"application/vnd.ibm.modcap":{source:"iana",extensions:["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{source:"iana",extensions:["irm"]},"application/vnd.ibm.secure-container":{source:"iana",extensions:["sc"]},"application/vnd.iccprofile":{source:"iana",extensions:["icc","icm"]},"application/vnd.ieee.1905":{source:"iana"},"application/vnd.igloader":{source:"iana",extensions:["igl"]},"application/vnd.imagemeter.folder+zip":{source:"iana",compressible:!1},"application/vnd.imagemeter.image+zip":{source:"iana",compressible:!1},"application/vnd.immervision-ivp":{source:"iana",extensions:["ivp"]},"application/vnd.immervision-ivu":{source:"iana",extensions:["ivu"]},"application/vnd.ims.imsccv1p1":{source:"iana"},"application/vnd.ims.imsccv1p2":{source:"iana"},"application/vnd.ims.imsccv1p3":{source:"iana"},"application/vnd.ims.lis.v2.result+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy.id+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings.simple+json":{source:"iana",compressible:!0},"application/vnd.informedcontrol.rms+xml":{source:"iana",compressible:!0},"application/vnd.informix-visionary":{source:"iana"},"application/vnd.infotech.project":{source:"iana"},"application/vnd.infotech.project+xml":{source:"iana",compressible:!0},"application/vnd.innopath.wamp.notification":{source:"iana"},"application/vnd.insors.igm":{source:"iana",extensions:["igm"]},"application/vnd.intercon.formnet":{source:"iana",extensions:["xpw","xpx"]},"application/vnd.intergeo":{source:"iana",extensions:["i2g"]},"application/vnd.intertrust.digibox":{source:"iana"},"application/vnd.intertrust.nncp":{source:"iana"},"application/vnd.intu.qbo":{source:"iana",extensions:["qbo"]},"application/vnd.intu.qfx":{source:"iana",extensions:["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.conceptitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.knowledgeitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsmessage+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.packageitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.planningitem+xml":{source:"iana",compressible:!0},"application/vnd.ipunplugged.rcprofile":{source:"iana",extensions:["rcprofile"]},"application/vnd.irepository.package+xml":{source:"iana",compressible:!0,extensions:["irp"]},"application/vnd.is-xpr":{source:"iana",extensions:["xpr"]},"application/vnd.isac.fcs":{source:"iana",extensions:["fcs"]},"application/vnd.iso11783-10+zip":{source:"iana",compressible:!1},"application/vnd.jam":{source:"iana",extensions:["jam"]},"application/vnd.japannet-directory-service":{source:"iana"},"application/vnd.japannet-jpnstore-wakeup":{source:"iana"},"application/vnd.japannet-payment-wakeup":{source:"iana"},"application/vnd.japannet-registration":{source:"iana"},"application/vnd.japannet-registration-wakeup":{source:"iana"},"application/vnd.japannet-setstore-wakeup":{source:"iana"},"application/vnd.japannet-verification":{source:"iana"},"application/vnd.japannet-verification-wakeup":{source:"iana"},"application/vnd.jcp.javame.midlet-rms":{source:"iana",extensions:["rms"]},"application/vnd.jisp":{source:"iana",extensions:["jisp"]},"application/vnd.joost.joda-archive":{source:"iana",extensions:["joda"]},"application/vnd.jsk.isdn-ngn":{source:"iana"},"application/vnd.kahootz":{source:"iana",extensions:["ktz","ktr"]},"application/vnd.kde.karbon":{source:"iana",extensions:["karbon"]},"application/vnd.kde.kchart":{source:"iana",extensions:["chrt"]},"application/vnd.kde.kformula":{source:"iana",extensions:["kfo"]},"application/vnd.kde.kivio":{source:"iana",extensions:["flw"]},"application/vnd.kde.kontour":{source:"iana",extensions:["kon"]},"application/vnd.kde.kpresenter":{source:"iana",extensions:["kpr","kpt"]},"application/vnd.kde.kspread":{source:"iana",extensions:["ksp"]},"application/vnd.kde.kword":{source:"iana",extensions:["kwd","kwt"]},"application/vnd.kenameaapp":{source:"iana",extensions:["htke"]},"application/vnd.kidspiration":{source:"iana",extensions:["kia"]},"application/vnd.kinar":{source:"iana",extensions:["kne","knp"]},"application/vnd.koan":{source:"iana",extensions:["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{source:"iana",extensions:["sse"]},"application/vnd.las":{source:"iana"},"application/vnd.las.las+json":{source:"iana",compressible:!0},"application/vnd.las.las+xml":{source:"iana",compressible:!0,extensions:["lasxml"]},"application/vnd.laszip":{source:"iana"},"application/vnd.leap+json":{source:"iana",compressible:!0},"application/vnd.liberty-request+xml":{source:"iana",compressible:!0},"application/vnd.llamagraphics.life-balance.desktop":{source:"iana",extensions:["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{source:"iana",compressible:!0,extensions:["lbe"]},"application/vnd.logipipe.circuit+zip":{source:"iana",compressible:!1},"application/vnd.loom":{source:"iana"},"application/vnd.lotus-1-2-3":{source:"iana",extensions:["123"]},"application/vnd.lotus-approach":{source:"iana",extensions:["apr"]},"application/vnd.lotus-freelance":{source:"iana",extensions:["pre"]},"application/vnd.lotus-notes":{source:"iana",extensions:["nsf"]},"application/vnd.lotus-organizer":{source:"iana",extensions:["org"]},"application/vnd.lotus-screencam":{source:"iana",extensions:["scm"]},"application/vnd.lotus-wordpro":{source:"iana",extensions:["lwp"]},"application/vnd.macports.portpkg":{source:"iana",extensions:["portpkg"]},"application/vnd.mapbox-vector-tile":{source:"iana",extensions:["mvt"]},"application/vnd.marlin.drm.actiontoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.conftoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.license+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.mdcf":{source:"iana"},"application/vnd.mason+json":{source:"iana",compressible:!0},"application/vnd.maxar.archive.3tz+zip":{source:"iana",compressible:!1},"application/vnd.maxmind.maxmind-db":{source:"iana"},"application/vnd.mcd":{source:"iana",extensions:["mcd"]},"application/vnd.medcalcdata":{source:"iana",extensions:["mc1"]},"application/vnd.mediastation.cdkey":{source:"iana",extensions:["cdkey"]},"application/vnd.meridian-slingshot":{source:"iana"},"application/vnd.mfer":{source:"iana",extensions:["mwf"]},"application/vnd.mfmp":{source:"iana",extensions:["mfm"]},"application/vnd.micro+json":{source:"iana",compressible:!0},"application/vnd.micrografx.flo":{source:"iana",extensions:["flo"]},"application/vnd.micrografx.igx":{source:"iana",extensions:["igx"]},"application/vnd.microsoft.portable-executable":{source:"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{source:"iana"},"application/vnd.miele+json":{source:"iana",compressible:!0},"application/vnd.mif":{source:"iana",extensions:["mif"]},"application/vnd.minisoft-hp3000-save":{source:"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{source:"iana"},"application/vnd.mobius.daf":{source:"iana",extensions:["daf"]},"application/vnd.mobius.dis":{source:"iana",extensions:["dis"]},"application/vnd.mobius.mbk":{source:"iana",extensions:["mbk"]},"application/vnd.mobius.mqy":{source:"iana",extensions:["mqy"]},"application/vnd.mobius.msl":{source:"iana",extensions:["msl"]},"application/vnd.mobius.plc":{source:"iana",extensions:["plc"]},"application/vnd.mobius.txf":{source:"iana",extensions:["txf"]},"application/vnd.mophun.application":{source:"iana",extensions:["mpn"]},"application/vnd.mophun.certificate":{source:"iana",extensions:["mpc"]},"application/vnd.motorola.flexsuite":{source:"iana"},"application/vnd.motorola.flexsuite.adsi":{source:"iana"},"application/vnd.motorola.flexsuite.fis":{source:"iana"},"application/vnd.motorola.flexsuite.gotap":{source:"iana"},"application/vnd.motorola.flexsuite.kmr":{source:"iana"},"application/vnd.motorola.flexsuite.ttc":{source:"iana"},"application/vnd.motorola.flexsuite.wem":{source:"iana"},"application/vnd.motorola.iprm":{source:"iana"},"application/vnd.mozilla.xul+xml":{source:"iana",compressible:!0,extensions:["xul"]},"application/vnd.ms-3mfdocument":{source:"iana"},"application/vnd.ms-artgalry":{source:"iana",extensions:["cil"]},"application/vnd.ms-asf":{source:"iana"},"application/vnd.ms-cab-compressed":{source:"iana",extensions:["cab"]},"application/vnd.ms-color.iccprofile":{source:"apache"},"application/vnd.ms-excel":{source:"iana",compressible:!1,extensions:["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{source:"iana",extensions:["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{source:"iana",extensions:["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{source:"iana",extensions:["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{source:"iana",extensions:["xltm"]},"application/vnd.ms-fontobject":{source:"iana",compressible:!0,extensions:["eot"]},"application/vnd.ms-htmlhelp":{source:"iana",extensions:["chm"]},"application/vnd.ms-ims":{source:"iana",extensions:["ims"]},"application/vnd.ms-lrm":{source:"iana",extensions:["lrm"]},"application/vnd.ms-office.activex+xml":{source:"iana",compressible:!0},"application/vnd.ms-officetheme":{source:"iana",extensions:["thmx"]},"application/vnd.ms-opentype":{source:"apache",compressible:!0},"application/vnd.ms-outlook":{compressible:!1,extensions:["msg"]},"application/vnd.ms-package.obfuscated-opentype":{source:"apache"},"application/vnd.ms-pki.seccat":{source:"apache",extensions:["cat"]},"application/vnd.ms-pki.stl":{source:"apache",extensions:["stl"]},"application/vnd.ms-playready.initiator+xml":{source:"iana",compressible:!0},"application/vnd.ms-powerpoint":{source:"iana",compressible:!1,extensions:["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{source:"iana",extensions:["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{source:"iana",extensions:["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{source:"iana",extensions:["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{source:"iana",extensions:["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{source:"iana",extensions:["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{source:"iana",compressible:!0},"application/vnd.ms-printing.printticket+xml":{source:"apache",compressible:!0},"application/vnd.ms-printschematicket+xml":{source:"iana",compressible:!0},"application/vnd.ms-project":{source:"iana",extensions:["mpp","mpt"]},"application/vnd.ms-tnef":{source:"iana"},"application/vnd.ms-windows.devicepairing":{source:"iana"},"application/vnd.ms-windows.nwprinting.oob":{source:"iana"},"application/vnd.ms-windows.printerpairing":{source:"iana"},"application/vnd.ms-windows.wsd.oob":{source:"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.lic-resp":{source:"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.meter-resp":{source:"iana"},"application/vnd.ms-word.document.macroenabled.12":{source:"iana",extensions:["docm"]},"application/vnd.ms-word.template.macroenabled.12":{source:"iana",extensions:["dotm"]},"application/vnd.ms-works":{source:"iana",extensions:["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{source:"iana",extensions:["wpl"]},"application/vnd.ms-xpsdocument":{source:"iana",compressible:!1,extensions:["xps"]},"application/vnd.msa-disk-image":{source:"iana"},"application/vnd.mseq":{source:"iana",extensions:["mseq"]},"application/vnd.msign":{source:"iana"},"application/vnd.multiad.creator":{source:"iana"},"application/vnd.multiad.creator.cif":{source:"iana"},"application/vnd.music-niff":{source:"iana"},"application/vnd.musician":{source:"iana",extensions:["mus"]},"application/vnd.muvee.style":{source:"iana",extensions:["msty"]},"application/vnd.mynfc":{source:"iana",extensions:["taglet"]},"application/vnd.nacamar.ybrid+json":{source:"iana",compressible:!0},"application/vnd.ncd.control":{source:"iana"},"application/vnd.ncd.reference":{source:"iana"},"application/vnd.nearst.inv+json":{source:"iana",compressible:!0},"application/vnd.nebumind.line":{source:"iana"},"application/vnd.nervana":{source:"iana"},"application/vnd.netfpx":{source:"iana"},"application/vnd.neurolanguage.nlu":{source:"iana",extensions:["nlu"]},"application/vnd.nimn":{source:"iana"},"application/vnd.nintendo.nitro.rom":{source:"iana"},"application/vnd.nintendo.snes.rom":{source:"iana"},"application/vnd.nitf":{source:"iana",extensions:["ntf","nitf"]},"application/vnd.noblenet-directory":{source:"iana",extensions:["nnd"]},"application/vnd.noblenet-sealer":{source:"iana",extensions:["nns"]},"application/vnd.noblenet-web":{source:"iana",extensions:["nnw"]},"application/vnd.nokia.catalogs":{source:"iana"},"application/vnd.nokia.conml+wbxml":{source:"iana"},"application/vnd.nokia.conml+xml":{source:"iana",compressible:!0},"application/vnd.nokia.iptv.config+xml":{source:"iana",compressible:!0},"application/vnd.nokia.isds-radio-presets":{source:"iana"},"application/vnd.nokia.landmark+wbxml":{source:"iana"},"application/vnd.nokia.landmark+xml":{source:"iana",compressible:!0},"application/vnd.nokia.landmarkcollection+xml":{source:"iana",compressible:!0},"application/vnd.nokia.n-gage.ac+xml":{source:"iana",compressible:!0,extensions:["ac"]},"application/vnd.nokia.n-gage.data":{source:"iana",extensions:["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{source:"iana",extensions:["n-gage"]},"application/vnd.nokia.ncd":{source:"iana"},"application/vnd.nokia.pcd+wbxml":{source:"iana"},"application/vnd.nokia.pcd+xml":{source:"iana",compressible:!0},"application/vnd.nokia.radio-preset":{source:"iana",extensions:["rpst"]},"application/vnd.nokia.radio-presets":{source:"iana",extensions:["rpss"]},"application/vnd.novadigm.edm":{source:"iana",extensions:["edm"]},"application/vnd.novadigm.edx":{source:"iana",extensions:["edx"]},"application/vnd.novadigm.ext":{source:"iana",extensions:["ext"]},"application/vnd.ntt-local.content-share":{source:"iana"},"application/vnd.ntt-local.file-transfer":{source:"iana"},"application/vnd.ntt-local.ogw_remote-access":{source:"iana"},"application/vnd.ntt-local.sip-ta_remote":{source:"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{source:"iana"},"application/vnd.oasis.opendocument.chart":{source:"iana",extensions:["odc"]},"application/vnd.oasis.opendocument.chart-template":{source:"iana",extensions:["otc"]},"application/vnd.oasis.opendocument.database":{source:"iana",extensions:["odb"]},"application/vnd.oasis.opendocument.formula":{source:"iana",extensions:["odf"]},"application/vnd.oasis.opendocument.formula-template":{source:"iana",extensions:["odft"]},"application/vnd.oasis.opendocument.graphics":{source:"iana",compressible:!1,extensions:["odg"]},"application/vnd.oasis.opendocument.graphics-template":{source:"iana",extensions:["otg"]},"application/vnd.oasis.opendocument.image":{source:"iana",extensions:["odi"]},"application/vnd.oasis.opendocument.image-template":{source:"iana",extensions:["oti"]},"application/vnd.oasis.opendocument.presentation":{source:"iana",compressible:!1,extensions:["odp"]},"application/vnd.oasis.opendocument.presentation-template":{source:"iana",extensions:["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{source:"iana",compressible:!1,extensions:["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{source:"iana",extensions:["ots"]},"application/vnd.oasis.opendocument.text":{source:"iana",compressible:!1,extensions:["odt"]},"application/vnd.oasis.opendocument.text-master":{source:"iana",extensions:["odm"]},"application/vnd.oasis.opendocument.text-template":{source:"iana",extensions:["ott"]},"application/vnd.oasis.opendocument.text-web":{source:"iana",extensions:["oth"]},"application/vnd.obn":{source:"iana"},"application/vnd.ocf+cbor":{source:"iana"},"application/vnd.oci.image.manifest.v1+json":{source:"iana",compressible:!0},"application/vnd.oftn.l10n+json":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessdownload+xml":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessstreaming+xml":{source:"iana",compressible:!0},"application/vnd.oipf.cspg-hexbinary":{source:"iana"},"application/vnd.oipf.dae.svg+xml":{source:"iana",compressible:!0},"application/vnd.oipf.dae.xhtml+xml":{source:"iana",compressible:!0},"application/vnd.oipf.mippvcontrolmessage+xml":{source:"iana",compressible:!0},"application/vnd.oipf.pae.gem":{source:"iana"},"application/vnd.oipf.spdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.oipf.spdlist+xml":{source:"iana",compressible:!0},"application/vnd.oipf.ueprofile+xml":{source:"iana",compressible:!0},"application/vnd.oipf.userprofile+xml":{source:"iana",compressible:!0},"application/vnd.olpc-sugar":{source:"iana",extensions:["xo"]},"application/vnd.oma-scws-config":{source:"iana"},"application/vnd.oma-scws-http-request":{source:"iana"},"application/vnd.oma-scws-http-response":{source:"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.drm-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.imd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.ltkm":{source:"iana"},"application/vnd.oma.bcast.notification+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.provisioningtrigger":{source:"iana"},"application/vnd.oma.bcast.sgboot":{source:"iana"},"application/vnd.oma.bcast.sgdd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sgdu":{source:"iana"},"application/vnd.oma.bcast.simple-symbol-container":{source:"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sprov+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.stkm":{source:"iana"},"application/vnd.oma.cab-address-book+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-feature-handler+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-pcc+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-subs-invite+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-user-prefs+xml":{source:"iana",compressible:!0},"application/vnd.oma.dcd":{source:"iana"},"application/vnd.oma.dcdc":{source:"iana"},"application/vnd.oma.dd2+xml":{source:"iana",compressible:!0,extensions:["dd2"]},"application/vnd.oma.drm.risd+xml":{source:"iana",compressible:!0},"application/vnd.oma.group-usage-list+xml":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+cbor":{source:"iana"},"application/vnd.oma.lwm2m+json":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+tlv":{source:"iana"},"application/vnd.oma.pal+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.detailed-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.final-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.groups+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.invocation-descriptor+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.optimized-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.push":{source:"iana"},"application/vnd.oma.scidm.messages+xml":{source:"iana",compressible:!0},"application/vnd.oma.xcap-directory+xml":{source:"iana",compressible:!0},"application/vnd.omads-email+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omads-file+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omads-folder+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omaloc-supl-init":{source:"iana"},"application/vnd.onepager":{source:"iana"},"application/vnd.onepagertamp":{source:"iana"},"application/vnd.onepagertamx":{source:"iana"},"application/vnd.onepagertat":{source:"iana"},"application/vnd.onepagertatp":{source:"iana"},"application/vnd.onepagertatx":{source:"iana"},"application/vnd.openblox.game+xml":{source:"iana",compressible:!0,extensions:["obgx"]},"application/vnd.openblox.game-binary":{source:"iana"},"application/vnd.openeye.oeb":{source:"iana"},"application/vnd.openofficeorg.extension":{source:"apache",extensions:["oxt"]},"application/vnd.openstreetmap.data+xml":{source:"iana",compressible:!0,extensions:["osm"]},"application/vnd.opentimestamps.ots":{source:"iana"},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawing+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{source:"iana",compressible:!1,extensions:["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slide":{source:"iana",extensions:["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{source:"iana",extensions:["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.template":{source:"iana",extensions:["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{source:"iana",compressible:!1,extensions:["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{source:"iana",extensions:["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.theme+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.vmldrawing":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{source:"iana",compressible:!1,extensions:["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{source:"iana",extensions:["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.core-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.relationships+xml":{source:"iana",compressible:!0},"application/vnd.oracle.resource+json":{source:"iana",compressible:!0},"application/vnd.orange.indata":{source:"iana"},"application/vnd.osa.netdeploy":{source:"iana"},"application/vnd.osgeo.mapguide.package":{source:"iana",extensions:["mgp"]},"application/vnd.osgi.bundle":{source:"iana"},"application/vnd.osgi.dp":{source:"iana",extensions:["dp"]},"application/vnd.osgi.subsystem":{source:"iana",extensions:["esa"]},"application/vnd.otps.ct-kip+xml":{source:"iana",compressible:!0},"application/vnd.oxli.countgraph":{source:"iana"},"application/vnd.pagerduty+json":{source:"iana",compressible:!0},"application/vnd.palm":{source:"iana",extensions:["pdb","pqa","oprc"]},"application/vnd.panoply":{source:"iana"},"application/vnd.paos.xml":{source:"iana"},"application/vnd.patentdive":{source:"iana"},"application/vnd.patientecommsdoc":{source:"iana"},"application/vnd.pawaafile":{source:"iana",extensions:["paw"]},"application/vnd.pcos":{source:"iana"},"application/vnd.pg.format":{source:"iana",extensions:["str"]},"application/vnd.pg.osasli":{source:"iana",extensions:["ei6"]},"application/vnd.piaccess.application-licence":{source:"iana"},"application/vnd.picsel":{source:"iana",extensions:["efif"]},"application/vnd.pmi.widget":{source:"iana",extensions:["wg"]},"application/vnd.poc.group-advertisement+xml":{source:"iana",compressible:!0},"application/vnd.pocketlearn":{source:"iana",extensions:["plf"]},"application/vnd.powerbuilder6":{source:"iana",extensions:["pbd"]},"application/vnd.powerbuilder6-s":{source:"iana"},"application/vnd.powerbuilder7":{source:"iana"},"application/vnd.powerbuilder7-s":{source:"iana"},"application/vnd.powerbuilder75":{source:"iana"},"application/vnd.powerbuilder75-s":{source:"iana"},"application/vnd.preminet":{source:"iana"},"application/vnd.previewsystems.box":{source:"iana",extensions:["box"]},"application/vnd.proteus.magazine":{source:"iana",extensions:["mgz"]},"application/vnd.psfs":{source:"iana"},"application/vnd.publishare-delta-tree":{source:"iana",extensions:["qps"]},"application/vnd.pvi.ptid1":{source:"iana",extensions:["ptid"]},"application/vnd.pwg-multiplexed":{source:"iana"},"application/vnd.pwg-xhtml-print+xml":{source:"iana",compressible:!0},"application/vnd.qualcomm.brew-app-res":{source:"iana"},"application/vnd.quarantainenet":{source:"iana"},"application/vnd.quark.quarkxpress":{source:"iana",extensions:["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{source:"iana"},"application/vnd.radisys.moml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conn+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-stream+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-base+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-detect+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-group+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-speech+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-transform+xml":{source:"iana",compressible:!0},"application/vnd.rainstor.data":{source:"iana"},"application/vnd.rapid":{source:"iana"},"application/vnd.rar":{source:"iana",extensions:["rar"]},"application/vnd.realvnc.bed":{source:"iana",extensions:["bed"]},"application/vnd.recordare.musicxml":{source:"iana",extensions:["mxl"]},"application/vnd.recordare.musicxml+xml":{source:"iana",compressible:!0,extensions:["musicxml"]},"application/vnd.renlearn.rlprint":{source:"iana"},"application/vnd.resilient.logic":{source:"iana"},"application/vnd.restful+json":{source:"iana",compressible:!0},"application/vnd.rig.cryptonote":{source:"iana",extensions:["cryptonote"]},"application/vnd.rim.cod":{source:"apache",extensions:["cod"]},"application/vnd.rn-realmedia":{source:"apache",extensions:["rm"]},"application/vnd.rn-realmedia-vbr":{source:"apache",extensions:["rmvb"]},"application/vnd.route66.link66+xml":{source:"iana",compressible:!0,extensions:["link66"]},"application/vnd.rs-274x":{source:"iana"},"application/vnd.ruckus.download":{source:"iana"},"application/vnd.s3sms":{source:"iana"},"application/vnd.sailingtracker.track":{source:"iana",extensions:["st"]},"application/vnd.sar":{source:"iana"},"application/vnd.sbm.cid":{source:"iana"},"application/vnd.sbm.mid2":{source:"iana"},"application/vnd.scribus":{source:"iana"},"application/vnd.sealed.3df":{source:"iana"},"application/vnd.sealed.csf":{source:"iana"},"application/vnd.sealed.doc":{source:"iana"},"application/vnd.sealed.eml":{source:"iana"},"application/vnd.sealed.mht":{source:"iana"},"application/vnd.sealed.net":{source:"iana"},"application/vnd.sealed.ppt":{source:"iana"},"application/vnd.sealed.tiff":{source:"iana"},"application/vnd.sealed.xls":{source:"iana"},"application/vnd.sealedmedia.softseal.html":{source:"iana"},"application/vnd.sealedmedia.softseal.pdf":{source:"iana"},"application/vnd.seemail":{source:"iana",extensions:["see"]},"application/vnd.seis+json":{source:"iana",compressible:!0},"application/vnd.sema":{source:"iana",extensions:["sema"]},"application/vnd.semd":{source:"iana",extensions:["semd"]},"application/vnd.semf":{source:"iana",extensions:["semf"]},"application/vnd.shade-save-file":{source:"iana"},"application/vnd.shana.informed.formdata":{source:"iana",extensions:["ifm"]},"application/vnd.shana.informed.formtemplate":{source:"iana",extensions:["itp"]},"application/vnd.shana.informed.interchange":{source:"iana",extensions:["iif"]},"application/vnd.shana.informed.package":{source:"iana",extensions:["ipk"]},"application/vnd.shootproof+json":{source:"iana",compressible:!0},"application/vnd.shopkick+json":{source:"iana",compressible:!0},"application/vnd.shp":{source:"iana"},"application/vnd.shx":{source:"iana"},"application/vnd.sigrok.session":{source:"iana"},"application/vnd.simtech-mindmapper":{source:"iana",extensions:["twd","twds"]},"application/vnd.siren+json":{source:"iana",compressible:!0},"application/vnd.smaf":{source:"iana",extensions:["mmf"]},"application/vnd.smart.notebook":{source:"iana"},"application/vnd.smart.teacher":{source:"iana",extensions:["teacher"]},"application/vnd.snesdev-page-table":{source:"iana"},"application/vnd.software602.filler.form+xml":{source:"iana",compressible:!0,extensions:["fo"]},"application/vnd.software602.filler.form-xml-zip":{source:"iana"},"application/vnd.solent.sdkm+xml":{source:"iana",compressible:!0,extensions:["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{source:"iana",extensions:["dxp"]},"application/vnd.spotfire.sfs":{source:"iana",extensions:["sfs"]},"application/vnd.sqlite3":{source:"iana"},"application/vnd.sss-cod":{source:"iana"},"application/vnd.sss-dtf":{source:"iana"},"application/vnd.sss-ntf":{source:"iana"},"application/vnd.stardivision.calc":{source:"apache",extensions:["sdc"]},"application/vnd.stardivision.draw":{source:"apache",extensions:["sda"]},"application/vnd.stardivision.impress":{source:"apache",extensions:["sdd"]},"application/vnd.stardivision.math":{source:"apache",extensions:["smf"]},"application/vnd.stardivision.writer":{source:"apache",extensions:["sdw","vor"]},"application/vnd.stardivision.writer-global":{source:"apache",extensions:["sgl"]},"application/vnd.stepmania.package":{source:"iana",extensions:["smzip"]},"application/vnd.stepmania.stepchart":{source:"iana",extensions:["sm"]},"application/vnd.street-stream":{source:"iana"},"application/vnd.sun.wadl+xml":{source:"iana",compressible:!0,extensions:["wadl"]},"application/vnd.sun.xml.calc":{source:"apache",extensions:["sxc"]},"application/vnd.sun.xml.calc.template":{source:"apache",extensions:["stc"]},"application/vnd.sun.xml.draw":{source:"apache",extensions:["sxd"]},"application/vnd.sun.xml.draw.template":{source:"apache",extensions:["std"]},"application/vnd.sun.xml.impress":{source:"apache",extensions:["sxi"]},"application/vnd.sun.xml.impress.template":{source:"apache",extensions:["sti"]},"application/vnd.sun.xml.math":{source:"apache",extensions:["sxm"]},"application/vnd.sun.xml.writer":{source:"apache",extensions:["sxw"]},"application/vnd.sun.xml.writer.global":{source:"apache",extensions:["sxg"]},"application/vnd.sun.xml.writer.template":{source:"apache",extensions:["stw"]},"application/vnd.sus-calendar":{source:"iana",extensions:["sus","susp"]},"application/vnd.svd":{source:"iana",extensions:["svd"]},"application/vnd.swiftview-ics":{source:"iana"},"application/vnd.sycle+xml":{source:"iana",compressible:!0},"application/vnd.syft+json":{source:"iana",compressible:!0},"application/vnd.symbian.install":{source:"apache",extensions:["sis","sisx"]},"application/vnd.syncml+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["xsm"]},"application/vnd.syncml.dm+wbxml":{source:"iana",charset:"UTF-8",extensions:["bdm"]},"application/vnd.syncml.dm+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["xdm"]},"application/vnd.syncml.dm.notification":{source:"iana"},"application/vnd.syncml.dmddf+wbxml":{source:"iana"},"application/vnd.syncml.dmddf+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{source:"iana"},"application/vnd.syncml.dmtnds+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.syncml.ds.notification":{source:"iana"},"application/vnd.tableschema+json":{source:"iana",compressible:!0},"application/vnd.tao.intent-module-archive":{source:"iana",extensions:["tao"]},"application/vnd.tcpdump.pcap":{source:"iana",extensions:["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{source:"iana",compressible:!0},"application/vnd.tmd.mediaflex.api+xml":{source:"iana",compressible:!0},"application/vnd.tml":{source:"iana"},"application/vnd.tmobile-livetv":{source:"iana",extensions:["tmo"]},"application/vnd.tri.onesource":{source:"iana"},"application/vnd.trid.tpt":{source:"iana",extensions:["tpt"]},"application/vnd.triscape.mxs":{source:"iana",extensions:["mxs"]},"application/vnd.trueapp":{source:"iana",extensions:["tra"]},"application/vnd.truedoc":{source:"iana"},"application/vnd.ubisoft.webplayer":{source:"iana"},"application/vnd.ufdl":{source:"iana",extensions:["ufd","ufdl"]},"application/vnd.uiq.theme":{source:"iana",extensions:["utz"]},"application/vnd.umajin":{source:"iana",extensions:["umj"]},"application/vnd.unity":{source:"iana",extensions:["unityweb"]},"application/vnd.uoml+xml":{source:"iana",compressible:!0,extensions:["uoml"]},"application/vnd.uplanet.alert":{source:"iana"},"application/vnd.uplanet.alert-wbxml":{source:"iana"},"application/vnd.uplanet.bearer-choice":{source:"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{source:"iana"},"application/vnd.uplanet.cacheop":{source:"iana"},"application/vnd.uplanet.cacheop-wbxml":{source:"iana"},"application/vnd.uplanet.channel":{source:"iana"},"application/vnd.uplanet.channel-wbxml":{source:"iana"},"application/vnd.uplanet.list":{source:"iana"},"application/vnd.uplanet.list-wbxml":{source:"iana"},"application/vnd.uplanet.listcmd":{source:"iana"},"application/vnd.uplanet.listcmd-wbxml":{source:"iana"},"application/vnd.uplanet.signal":{source:"iana"},"application/vnd.uri-map":{source:"iana"},"application/vnd.valve.source.material":{source:"iana"},"application/vnd.vcx":{source:"iana",extensions:["vcx"]},"application/vnd.vd-study":{source:"iana"},"application/vnd.vectorworks":{source:"iana"},"application/vnd.vel+json":{source:"iana",compressible:!0},"application/vnd.verimatrix.vcas":{source:"iana"},"application/vnd.veritone.aion+json":{source:"iana",compressible:!0},"application/vnd.veryant.thin":{source:"iana"},"application/vnd.ves.encrypted":{source:"iana"},"application/vnd.vidsoft.vidconference":{source:"iana"},"application/vnd.visio":{source:"iana",extensions:["vsd","vst","vss","vsw"]},"application/vnd.visionary":{source:"iana",extensions:["vis"]},"application/vnd.vividence.scriptfile":{source:"iana"},"application/vnd.vsf":{source:"iana",extensions:["vsf"]},"application/vnd.wap.sic":{source:"iana"},"application/vnd.wap.slc":{source:"iana"},"application/vnd.wap.wbxml":{source:"iana",charset:"UTF-8",extensions:["wbxml"]},"application/vnd.wap.wmlc":{source:"iana",extensions:["wmlc"]},"application/vnd.wap.wmlscriptc":{source:"iana",extensions:["wmlsc"]},"application/vnd.webturbo":{source:"iana",extensions:["wtb"]},"application/vnd.wfa.dpp":{source:"iana"},"application/vnd.wfa.p2p":{source:"iana"},"application/vnd.wfa.wsc":{source:"iana"},"application/vnd.windows.devicepairing":{source:"iana"},"application/vnd.wmc":{source:"iana"},"application/vnd.wmf.bootstrap":{source:"iana"},"application/vnd.wolfram.mathematica":{source:"iana"},"application/vnd.wolfram.mathematica.package":{source:"iana"},"application/vnd.wolfram.player":{source:"iana",extensions:["nbp"]},"application/vnd.wordperfect":{source:"iana",extensions:["wpd"]},"application/vnd.wqd":{source:"iana",extensions:["wqd"]},"application/vnd.wrq-hp3000-labelled":{source:"iana"},"application/vnd.wt.stf":{source:"iana",extensions:["stf"]},"application/vnd.wv.csp+wbxml":{source:"iana"},"application/vnd.wv.csp+xml":{source:"iana",compressible:!0},"application/vnd.wv.ssp+xml":{source:"iana",compressible:!0},"application/vnd.xacml+json":{source:"iana",compressible:!0},"application/vnd.xara":{source:"iana",extensions:["xar"]},"application/vnd.xfdl":{source:"iana",extensions:["xfdl"]},"application/vnd.xfdl.webform":{source:"iana"},"application/vnd.xmi+xml":{source:"iana",compressible:!0},"application/vnd.xmpie.cpkg":{source:"iana"},"application/vnd.xmpie.dpkg":{source:"iana"},"application/vnd.xmpie.plan":{source:"iana"},"application/vnd.xmpie.ppkg":{source:"iana"},"application/vnd.xmpie.xlim":{source:"iana"},"application/vnd.yamaha.hv-dic":{source:"iana",extensions:["hvd"]},"application/vnd.yamaha.hv-script":{source:"iana",extensions:["hvs"]},"application/vnd.yamaha.hv-voice":{source:"iana",extensions:["hvp"]},"application/vnd.yamaha.openscoreformat":{source:"iana",extensions:["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{source:"iana",compressible:!0,extensions:["osfpvg"]},"application/vnd.yamaha.remote-setup":{source:"iana"},"application/vnd.yamaha.smaf-audio":{source:"iana",extensions:["saf"]},"application/vnd.yamaha.smaf-phrase":{source:"iana",extensions:["spf"]},"application/vnd.yamaha.through-ngn":{source:"iana"},"application/vnd.yamaha.tunnel-udpencap":{source:"iana"},"application/vnd.yaoweme":{source:"iana"},"application/vnd.yellowriver-custom-menu":{source:"iana",extensions:["cmp"]},"application/vnd.youtube.yt":{source:"iana"},"application/vnd.zul":{source:"iana",extensions:["zir","zirz"]},"application/vnd.zzazz.deck+xml":{source:"iana",compressible:!0,extensions:["zaz"]},"application/voicexml+xml":{source:"iana",compressible:!0,extensions:["vxml"]},"application/voucher-cms+json":{source:"iana",compressible:!0},"application/vq-rtcpxr":{source:"iana"},"application/wasm":{source:"iana",compressible:!0,extensions:["wasm"]},"application/watcherinfo+xml":{source:"iana",compressible:!0,extensions:["wif"]},"application/webpush-options+json":{source:"iana",compressible:!0},"application/whoispp-query":{source:"iana"},"application/whoispp-response":{source:"iana"},"application/widget":{source:"iana",extensions:["wgt"]},"application/winhlp":{source:"apache",extensions:["hlp"]},"application/wita":{source:"iana"},"application/wordperfect5.1":{source:"iana"},"application/wsdl+xml":{source:"iana",compressible:!0,extensions:["wsdl"]},"application/wspolicy+xml":{source:"iana",compressible:!0,extensions:["wspolicy"]},"application/x-7z-compressed":{source:"apache",compressible:!1,extensions:["7z"]},"application/x-abiword":{source:"apache",extensions:["abw"]},"application/x-ace-compressed":{source:"apache",extensions:["ace"]},"application/x-amf":{source:"apache"},"application/x-apple-diskimage":{source:"apache",extensions:["dmg"]},"application/x-arj":{compressible:!1,extensions:["arj"]},"application/x-authorware-bin":{source:"apache",extensions:["aab","x32","u32","vox"]},"application/x-authorware-map":{source:"apache",extensions:["aam"]},"application/x-authorware-seg":{source:"apache",extensions:["aas"]},"application/x-bcpio":{source:"apache",extensions:["bcpio"]},"application/x-bdoc":{compressible:!1,extensions:["bdoc"]},"application/x-bittorrent":{source:"apache",extensions:["torrent"]},"application/x-blorb":{source:"apache",extensions:["blb","blorb"]},"application/x-bzip":{source:"apache",compressible:!1,extensions:["bz"]},"application/x-bzip2":{source:"apache",compressible:!1,extensions:["bz2","boz"]},"application/x-cbr":{source:"apache",extensions:["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{source:"apache",extensions:["vcd"]},"application/x-cfs-compressed":{source:"apache",extensions:["cfs"]},"application/x-chat":{source:"apache",extensions:["chat"]},"application/x-chess-pgn":{source:"apache",extensions:["pgn"]},"application/x-chrome-extension":{extensions:["crx"]},"application/x-cocoa":{source:"nginx",extensions:["cco"]},"application/x-compress":{source:"apache"},"application/x-conference":{source:"apache",extensions:["nsc"]},"application/x-cpio":{source:"apache",extensions:["cpio"]},"application/x-csh":{source:"apache",extensions:["csh"]},"application/x-deb":{compressible:!1},"application/x-debian-package":{source:"apache",extensions:["deb","udeb"]},"application/x-dgc-compressed":{source:"apache",extensions:["dgc"]},"application/x-director":{source:"apache",extensions:["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{source:"apache",extensions:["wad"]},"application/x-dtbncx+xml":{source:"apache",compressible:!0,extensions:["ncx"]},"application/x-dtbook+xml":{source:"apache",compressible:!0,extensions:["dtb"]},"application/x-dtbresource+xml":{source:"apache",compressible:!0,extensions:["res"]},"application/x-dvi":{source:"apache",compressible:!1,extensions:["dvi"]},"application/x-envoy":{source:"apache",extensions:["evy"]},"application/x-eva":{source:"apache",extensions:["eva"]},"application/x-font-bdf":{source:"apache",extensions:["bdf"]},"application/x-font-dos":{source:"apache"},"application/x-font-framemaker":{source:"apache"},"application/x-font-ghostscript":{source:"apache",extensions:["gsf"]},"application/x-font-libgrx":{source:"apache"},"application/x-font-linux-psf":{source:"apache",extensions:["psf"]},"application/x-font-pcf":{source:"apache",extensions:["pcf"]},"application/x-font-snf":{source:"apache",extensions:["snf"]},"application/x-font-speedo":{source:"apache"},"application/x-font-sunos-news":{source:"apache"},"application/x-font-type1":{source:"apache",extensions:["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{source:"apache"},"application/x-freearc":{source:"apache",extensions:["arc"]},"application/x-futuresplash":{source:"apache",extensions:["spl"]},"application/x-gca-compressed":{source:"apache",extensions:["gca"]},"application/x-glulx":{source:"apache",extensions:["ulx"]},"application/x-gnumeric":{source:"apache",extensions:["gnumeric"]},"application/x-gramps-xml":{source:"apache",extensions:["gramps"]},"application/x-gtar":{source:"apache",extensions:["gtar"]},"application/x-gzip":{source:"apache"},"application/x-hdf":{source:"apache",extensions:["hdf"]},"application/x-httpd-php":{compressible:!0,extensions:["php"]},"application/x-install-instructions":{source:"apache",extensions:["install"]},"application/x-iso9660-image":{source:"apache",extensions:["iso"]},"application/x-iwork-keynote-sffkey":{extensions:["key"]},"application/x-iwork-numbers-sffnumbers":{extensions:["numbers"]},"application/x-iwork-pages-sffpages":{extensions:["pages"]},"application/x-java-archive-diff":{source:"nginx",extensions:["jardiff"]},"application/x-java-jnlp-file":{source:"apache",compressible:!1,extensions:["jnlp"]},"application/x-javascript":{compressible:!0},"application/x-keepass2":{extensions:["kdbx"]},"application/x-latex":{source:"apache",compressible:!1,extensions:["latex"]},"application/x-lua-bytecode":{extensions:["luac"]},"application/x-lzh-compressed":{source:"apache",extensions:["lzh","lha"]},"application/x-makeself":{source:"nginx",extensions:["run"]},"application/x-mie":{source:"apache",extensions:["mie"]},"application/x-mobipocket-ebook":{source:"apache",extensions:["prc","mobi"]},"application/x-mpegurl":{compressible:!1},"application/x-ms-application":{source:"apache",extensions:["application"]},"application/x-ms-shortcut":{source:"apache",extensions:["lnk"]},"application/x-ms-wmd":{source:"apache",extensions:["wmd"]},"application/x-ms-wmz":{source:"apache",extensions:["wmz"]},"application/x-ms-xbap":{source:"apache",extensions:["xbap"]},"application/x-msaccess":{source:"apache",extensions:["mdb"]},"application/x-msbinder":{source:"apache",extensions:["obd"]},"application/x-mscardfile":{source:"apache",extensions:["crd"]},"application/x-msclip":{source:"apache",extensions:["clp"]},"application/x-msdos-program":{extensions:["exe"]},"application/x-msdownload":{source:"apache",extensions:["exe","dll","com","bat","msi"]},"application/x-msmediaview":{source:"apache",extensions:["mvb","m13","m14"]},"application/x-msmetafile":{source:"apache",extensions:["wmf","wmz","emf","emz"]},"application/x-msmoney":{source:"apache",extensions:["mny"]},"application/x-mspublisher":{source:"apache",extensions:["pub"]},"application/x-msschedule":{source:"apache",extensions:["scd"]},"application/x-msterminal":{source:"apache",extensions:["trm"]},"application/x-mswrite":{source:"apache",extensions:["wri"]},"application/x-netcdf":{source:"apache",extensions:["nc","cdf"]},"application/x-ns-proxy-autoconfig":{compressible:!0,extensions:["pac"]},"application/x-nzb":{source:"apache",extensions:["nzb"]},"application/x-perl":{source:"nginx",extensions:["pl","pm"]},"application/x-pilot":{source:"nginx",extensions:["prc","pdb"]},"application/x-pkcs12":{source:"apache",compressible:!1,extensions:["p12","pfx"]},"application/x-pkcs7-certificates":{source:"apache",extensions:["p7b","spc"]},"application/x-pkcs7-certreqresp":{source:"apache",extensions:["p7r"]},"application/x-pki-message":{source:"iana"},"application/x-rar-compressed":{source:"apache",compressible:!1,extensions:["rar"]},"application/x-redhat-package-manager":{source:"nginx",extensions:["rpm"]},"application/x-research-info-systems":{source:"apache",extensions:["ris"]},"application/x-sea":{source:"nginx",extensions:["sea"]},"application/x-sh":{source:"apache",compressible:!0,extensions:["sh"]},"application/x-shar":{source:"apache",extensions:["shar"]},"application/x-shockwave-flash":{source:"apache",compressible:!1,extensions:["swf"]},"application/x-silverlight-app":{source:"apache",extensions:["xap"]},"application/x-sql":{source:"apache",extensions:["sql"]},"application/x-stuffit":{source:"apache",compressible:!1,extensions:["sit"]},"application/x-stuffitx":{source:"apache",extensions:["sitx"]},"application/x-subrip":{source:"apache",extensions:["srt"]},"application/x-sv4cpio":{source:"apache",extensions:["sv4cpio"]},"application/x-sv4crc":{source:"apache",extensions:["sv4crc"]},"application/x-t3vm-image":{source:"apache",extensions:["t3"]},"application/x-tads":{source:"apache",extensions:["gam"]},"application/x-tar":{source:"apache",compressible:!0,extensions:["tar"]},"application/x-tcl":{source:"apache",extensions:["tcl","tk"]},"application/x-tex":{source:"apache",extensions:["tex"]},"application/x-tex-tfm":{source:"apache",extensions:["tfm"]},"application/x-texinfo":{source:"apache",extensions:["texinfo","texi"]},"application/x-tgif":{source:"apache",extensions:["obj"]},"application/x-ustar":{source:"apache",extensions:["ustar"]},"application/x-virtualbox-hdd":{compressible:!0,extensions:["hdd"]},"application/x-virtualbox-ova":{compressible:!0,extensions:["ova"]},"application/x-virtualbox-ovf":{compressible:!0,extensions:["ovf"]},"application/x-virtualbox-vbox":{compressible:!0,extensions:["vbox"]},"application/x-virtualbox-vbox-extpack":{compressible:!1,extensions:["vbox-extpack"]},"application/x-virtualbox-vdi":{compressible:!0,extensions:["vdi"]},"application/x-virtualbox-vhd":{compressible:!0,extensions:["vhd"]},"application/x-virtualbox-vmdk":{compressible:!0,extensions:["vmdk"]},"application/x-wais-source":{source:"apache",extensions:["src"]},"application/x-web-app-manifest+json":{compressible:!0,extensions:["webapp"]},"application/x-www-form-urlencoded":{source:"iana",compressible:!0},"application/x-x509-ca-cert":{source:"iana",extensions:["der","crt","pem"]},"application/x-x509-ca-ra-cert":{source:"iana"},"application/x-x509-next-ca-cert":{source:"iana"},"application/x-xfig":{source:"apache",extensions:["fig"]},"application/x-xliff+xml":{source:"apache",compressible:!0,extensions:["xlf"]},"application/x-xpinstall":{source:"apache",compressible:!1,extensions:["xpi"]},"application/x-xz":{source:"apache",extensions:["xz"]},"application/x-zmachine":{source:"apache",extensions:["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{source:"iana"},"application/xacml+xml":{source:"iana",compressible:!0},"application/xaml+xml":{source:"apache",compressible:!0,extensions:["xaml"]},"application/xcap-att+xml":{source:"iana",compressible:!0,extensions:["xav"]},"application/xcap-caps+xml":{source:"iana",compressible:!0,extensions:["xca"]},"application/xcap-diff+xml":{source:"iana",compressible:!0,extensions:["xdf"]},"application/xcap-el+xml":{source:"iana",compressible:!0,extensions:["xel"]},"application/xcap-error+xml":{source:"iana",compressible:!0},"application/xcap-ns+xml":{source:"iana",compressible:!0,extensions:["xns"]},"application/xcon-conference-info+xml":{source:"iana",compressible:!0},"application/xcon-conference-info-diff+xml":{source:"iana",compressible:!0},"application/xenc+xml":{source:"iana",compressible:!0,extensions:["xenc"]},"application/xhtml+xml":{source:"iana",compressible:!0,extensions:["xhtml","xht"]},"application/xhtml-voice+xml":{source:"apache",compressible:!0},"application/xliff+xml":{source:"iana",compressible:!0,extensions:["xlf"]},"application/xml":{source:"iana",compressible:!0,extensions:["xml","xsl","xsd","rng"]},"application/xml-dtd":{source:"iana",compressible:!0,extensions:["dtd"]},"application/xml-external-parsed-entity":{source:"iana"},"application/xml-patch+xml":{source:"iana",compressible:!0},"application/xmpp+xml":{source:"iana",compressible:!0},"application/xop+xml":{source:"iana",compressible:!0,extensions:["xop"]},"application/xproc+xml":{source:"apache",compressible:!0,extensions:["xpl"]},"application/xslt+xml":{source:"iana",compressible:!0,extensions:["xsl","xslt"]},"application/xspf+xml":{source:"apache",compressible:!0,extensions:["xspf"]},"application/xv+xml":{source:"iana",compressible:!0,extensions:["mxml","xhvml","xvml","xvm"]},"application/yang":{source:"iana",extensions:["yang"]},"application/yang-data+json":{source:"iana",compressible:!0},"application/yang-data+xml":{source:"iana",compressible:!0},"application/yang-patch+json":{source:"iana",compressible:!0},"application/yang-patch+xml":{source:"iana",compressible:!0},"application/yin+xml":{source:"iana",compressible:!0,extensions:["yin"]},"application/zip":{source:"iana",compressible:!1,extensions:["zip"]},"application/zlib":{source:"iana"},"application/zstd":{source:"iana"},"audio/1d-interleaved-parityfec":{source:"iana"},"audio/32kadpcm":{source:"iana"},"audio/3gpp":{source:"iana",compressible:!1,extensions:["3gpp"]},"audio/3gpp2":{source:"iana"},"audio/aac":{source:"iana"},"audio/ac3":{source:"iana"},"audio/adpcm":{source:"apache",extensions:["adp"]},"audio/amr":{source:"iana",extensions:["amr"]},"audio/amr-wb":{source:"iana"},"audio/amr-wb+":{source:"iana"},"audio/aptx":{source:"iana"},"audio/asc":{source:"iana"},"audio/atrac-advanced-lossless":{source:"iana"},"audio/atrac-x":{source:"iana"},"audio/atrac3":{source:"iana"},"audio/basic":{source:"iana",compressible:!1,extensions:["au","snd"]},"audio/bv16":{source:"iana"},"audio/bv32":{source:"iana"},"audio/clearmode":{source:"iana"},"audio/cn":{source:"iana"},"audio/dat12":{source:"iana"},"audio/dls":{source:"iana"},"audio/dsr-es201108":{source:"iana"},"audio/dsr-es202050":{source:"iana"},"audio/dsr-es202211":{source:"iana"},"audio/dsr-es202212":{source:"iana"},"audio/dv":{source:"iana"},"audio/dvi4":{source:"iana"},"audio/eac3":{source:"iana"},"audio/encaprtp":{source:"iana"},"audio/evrc":{source:"iana"},"audio/evrc-qcp":{source:"iana"},"audio/evrc0":{source:"iana"},"audio/evrc1":{source:"iana"},"audio/evrcb":{source:"iana"},"audio/evrcb0":{source:"iana"},"audio/evrcb1":{source:"iana"},"audio/evrcnw":{source:"iana"},"audio/evrcnw0":{source:"iana"},"audio/evrcnw1":{source:"iana"},"audio/evrcwb":{source:"iana"},"audio/evrcwb0":{source:"iana"},"audio/evrcwb1":{source:"iana"},"audio/evs":{source:"iana"},"audio/flexfec":{source:"iana"},"audio/fwdred":{source:"iana"},"audio/g711-0":{source:"iana"},"audio/g719":{source:"iana"},"audio/g722":{source:"iana"},"audio/g7221":{source:"iana"},"audio/g723":{source:"iana"},"audio/g726-16":{source:"iana"},"audio/g726-24":{source:"iana"},"audio/g726-32":{source:"iana"},"audio/g726-40":{source:"iana"},"audio/g728":{source:"iana"},"audio/g729":{source:"iana"},"audio/g7291":{source:"iana"},"audio/g729d":{source:"iana"},"audio/g729e":{source:"iana"},"audio/gsm":{source:"iana"},"audio/gsm-efr":{source:"iana"},"audio/gsm-hr-08":{source:"iana"},"audio/ilbc":{source:"iana"},"audio/ip-mr_v2.5":{source:"iana"},"audio/isac":{source:"apache"},"audio/l16":{source:"iana"},"audio/l20":{source:"iana"},"audio/l24":{source:"iana",compressible:!1},"audio/l8":{source:"iana"},"audio/lpc":{source:"iana"},"audio/melp":{source:"iana"},"audio/melp1200":{source:"iana"},"audio/melp2400":{source:"iana"},"audio/melp600":{source:"iana"},"audio/mhas":{source:"iana"},"audio/midi":{source:"apache",extensions:["mid","midi","kar","rmi"]},"audio/mobile-xmf":{source:"iana",extensions:["mxmf"]},"audio/mp3":{compressible:!1,extensions:["mp3"]},"audio/mp4":{source:"iana",compressible:!1,extensions:["m4a","mp4a"]},"audio/mp4a-latm":{source:"iana"},"audio/mpa":{source:"iana"},"audio/mpa-robust":{source:"iana"},"audio/mpeg":{source:"iana",compressible:!1,extensions:["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{source:"iana"},"audio/musepack":{source:"apache"},"audio/ogg":{source:"iana",compressible:!1,extensions:["oga","ogg","spx","opus"]},"audio/opus":{source:"iana"},"audio/parityfec":{source:"iana"},"audio/pcma":{source:"iana"},"audio/pcma-wb":{source:"iana"},"audio/pcmu":{source:"iana"},"audio/pcmu-wb":{source:"iana"},"audio/prs.sid":{source:"iana"},"audio/qcelp":{source:"iana"},"audio/raptorfec":{source:"iana"},"audio/red":{source:"iana"},"audio/rtp-enc-aescm128":{source:"iana"},"audio/rtp-midi":{source:"iana"},"audio/rtploopback":{source:"iana"},"audio/rtx":{source:"iana"},"audio/s3m":{source:"apache",extensions:["s3m"]},"audio/scip":{source:"iana"},"audio/silk":{source:"apache",extensions:["sil"]},"audio/smv":{source:"iana"},"audio/smv-qcp":{source:"iana"},"audio/smv0":{source:"iana"},"audio/sofa":{source:"iana"},"audio/sp-midi":{source:"iana"},"audio/speex":{source:"iana"},"audio/t140c":{source:"iana"},"audio/t38":{source:"iana"},"audio/telephone-event":{source:"iana"},"audio/tetra_acelp":{source:"iana"},"audio/tetra_acelp_bb":{source:"iana"},"audio/tone":{source:"iana"},"audio/tsvcis":{source:"iana"},"audio/uemclip":{source:"iana"},"audio/ulpfec":{source:"iana"},"audio/usac":{source:"iana"},"audio/vdvi":{source:"iana"},"audio/vmr-wb":{source:"iana"},"audio/vnd.3gpp.iufp":{source:"iana"},"audio/vnd.4sb":{source:"iana"},"audio/vnd.audiokoz":{source:"iana"},"audio/vnd.celp":{source:"iana"},"audio/vnd.cisco.nse":{source:"iana"},"audio/vnd.cmles.radio-events":{source:"iana"},"audio/vnd.cns.anp1":{source:"iana"},"audio/vnd.cns.inf1":{source:"iana"},"audio/vnd.dece.audio":{source:"iana",extensions:["uva","uvva"]},"audio/vnd.digital-winds":{source:"iana",extensions:["eol"]},"audio/vnd.dlna.adts":{source:"iana"},"audio/vnd.dolby.heaac.1":{source:"iana"},"audio/vnd.dolby.heaac.2":{source:"iana"},"audio/vnd.dolby.mlp":{source:"iana"},"audio/vnd.dolby.mps":{source:"iana"},"audio/vnd.dolby.pl2":{source:"iana"},"audio/vnd.dolby.pl2x":{source:"iana"},"audio/vnd.dolby.pl2z":{source:"iana"},"audio/vnd.dolby.pulse.1":{source:"iana"},"audio/vnd.dra":{source:"iana",extensions:["dra"]},"audio/vnd.dts":{source:"iana",extensions:["dts"]},"audio/vnd.dts.hd":{source:"iana",extensions:["dtshd"]},"audio/vnd.dts.uhd":{source:"iana"},"audio/vnd.dvb.file":{source:"iana"},"audio/vnd.everad.plj":{source:"iana"},"audio/vnd.hns.audio":{source:"iana"},"audio/vnd.lucent.voice":{source:"iana",extensions:["lvp"]},"audio/vnd.ms-playready.media.pya":{source:"iana",extensions:["pya"]},"audio/vnd.nokia.mobile-xmf":{source:"iana"},"audio/vnd.nortel.vbk":{source:"iana"},"audio/vnd.nuera.ecelp4800":{source:"iana",extensions:["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{source:"iana",extensions:["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{source:"iana",extensions:["ecelp9600"]},"audio/vnd.octel.sbc":{source:"iana"},"audio/vnd.presonus.multitrack":{source:"iana"},"audio/vnd.qcelp":{source:"iana"},"audio/vnd.rhetorex.32kadpcm":{source:"iana"},"audio/vnd.rip":{source:"iana",extensions:["rip"]},"audio/vnd.rn-realaudio":{compressible:!1},"audio/vnd.sealedmedia.softseal.mpeg":{source:"iana"},"audio/vnd.vmx.cvsd":{source:"iana"},"audio/vnd.wave":{compressible:!1},"audio/vorbis":{source:"iana",compressible:!1},"audio/vorbis-config":{source:"iana"},"audio/wav":{compressible:!1,extensions:["wav"]},"audio/wave":{compressible:!1,extensions:["wav"]},"audio/webm":{source:"apache",compressible:!1,extensions:["weba"]},"audio/x-aac":{source:"apache",compressible:!1,extensions:["aac"]},"audio/x-aiff":{source:"apache",extensions:["aif","aiff","aifc"]},"audio/x-caf":{source:"apache",compressible:!1,extensions:["caf"]},"audio/x-flac":{source:"apache",extensions:["flac"]},"audio/x-m4a":{source:"nginx",extensions:["m4a"]},"audio/x-matroska":{source:"apache",extensions:["mka"]},"audio/x-mpegurl":{source:"apache",extensions:["m3u"]},"audio/x-ms-wax":{source:"apache",extensions:["wax"]},"audio/x-ms-wma":{source:"apache",extensions:["wma"]},"audio/x-pn-realaudio":{source:"apache",extensions:["ram","ra"]},"audio/x-pn-realaudio-plugin":{source:"apache",extensions:["rmp"]},"audio/x-realaudio":{source:"nginx",extensions:["ra"]},"audio/x-tta":{source:"apache"},"audio/x-wav":{source:"apache",extensions:["wav"]},"audio/xm":{source:"apache",extensions:["xm"]},"chemical/x-cdx":{source:"apache",extensions:["cdx"]},"chemical/x-cif":{source:"apache",extensions:["cif"]},"chemical/x-cmdf":{source:"apache",extensions:["cmdf"]},"chemical/x-cml":{source:"apache",extensions:["cml"]},"chemical/x-csml":{source:"apache",extensions:["csml"]},"chemical/x-pdb":{source:"apache"},"chemical/x-xyz":{source:"apache",extensions:["xyz"]},"font/collection":{source:"iana",extensions:["ttc"]},"font/otf":{source:"iana",compressible:!0,extensions:["otf"]},"font/sfnt":{source:"iana"},"font/ttf":{source:"iana",compressible:!0,extensions:["ttf"]},"font/woff":{source:"iana",extensions:["woff"]},"font/woff2":{source:"iana",extensions:["woff2"]},"image/aces":{source:"iana",extensions:["exr"]},"image/apng":{compressible:!1,extensions:["apng"]},"image/avci":{source:"iana",extensions:["avci"]},"image/avcs":{source:"iana",extensions:["avcs"]},"image/avif":{source:"iana",compressible:!1,extensions:["avif"]},"image/bmp":{source:"iana",compressible:!0,extensions:["bmp"]},"image/cgm":{source:"iana",extensions:["cgm"]},"image/dicom-rle":{source:"iana",extensions:["drle"]},"image/emf":{source:"iana",extensions:["emf"]},"image/fits":{source:"iana",extensions:["fits"]},"image/g3fax":{source:"iana",extensions:["g3"]},"image/gif":{source:"iana",compressible:!1,extensions:["gif"]},"image/heic":{source:"iana",extensions:["heic"]},"image/heic-sequence":{source:"iana",extensions:["heics"]},"image/heif":{source:"iana",extensions:["heif"]},"image/heif-sequence":{source:"iana",extensions:["heifs"]},"image/hej2k":{source:"iana",extensions:["hej2"]},"image/hsj2":{source:"iana",extensions:["hsj2"]},"image/ief":{source:"iana",extensions:["ief"]},"image/jls":{source:"iana",extensions:["jls"]},"image/jp2":{source:"iana",compressible:!1,extensions:["jp2","jpg2"]},"image/jpeg":{source:"iana",compressible:!1,extensions:["jpeg","jpg","jpe"]},"image/jph":{source:"iana",extensions:["jph"]},"image/jphc":{source:"iana",extensions:["jhc"]},"image/jpm":{source:"iana",compressible:!1,extensions:["jpm"]},"image/jpx":{source:"iana",compressible:!1,extensions:["jpx","jpf"]},"image/jxr":{source:"iana",extensions:["jxr"]},"image/jxra":{source:"iana",extensions:["jxra"]},"image/jxrs":{source:"iana",extensions:["jxrs"]},"image/jxs":{source:"iana",extensions:["jxs"]},"image/jxsc":{source:"iana",extensions:["jxsc"]},"image/jxsi":{source:"iana",extensions:["jxsi"]},"image/jxss":{source:"iana",extensions:["jxss"]},"image/ktx":{source:"iana",extensions:["ktx"]},"image/ktx2":{source:"iana",extensions:["ktx2"]},"image/naplps":{source:"iana"},"image/pjpeg":{compressible:!1},"image/png":{source:"iana",compressible:!1,extensions:["png"]},"image/prs.btif":{source:"iana",extensions:["btif"]},"image/prs.pti":{source:"iana",extensions:["pti"]},"image/pwg-raster":{source:"iana"},"image/sgi":{source:"apache",extensions:["sgi"]},"image/svg+xml":{source:"iana",compressible:!0,extensions:["svg","svgz"]},"image/t38":{source:"iana",extensions:["t38"]},"image/tiff":{source:"iana",compressible:!1,extensions:["tif","tiff"]},"image/tiff-fx":{source:"iana",extensions:["tfx"]},"image/vnd.adobe.photoshop":{source:"iana",compressible:!0,extensions:["psd"]},"image/vnd.airzip.accelerator.azv":{source:"iana",extensions:["azv"]},"image/vnd.cns.inf2":{source:"iana"},"image/vnd.dece.graphic":{source:"iana",extensions:["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{source:"iana",extensions:["djvu","djv"]},"image/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"image/vnd.dwg":{source:"iana",extensions:["dwg"]},"image/vnd.dxf":{source:"iana",extensions:["dxf"]},"image/vnd.fastbidsheet":{source:"iana",extensions:["fbs"]},"image/vnd.fpx":{source:"iana",extensions:["fpx"]},"image/vnd.fst":{source:"iana",extensions:["fst"]},"image/vnd.fujixerox.edmics-mmr":{source:"iana",extensions:["mmr"]},"image/vnd.fujixerox.edmics-rlc":{source:"iana",extensions:["rlc"]},"image/vnd.globalgraphics.pgb":{source:"iana"},"image/vnd.microsoft.icon":{source:"iana",compressible:!0,extensions:["ico"]},"image/vnd.mix":{source:"iana"},"image/vnd.mozilla.apng":{source:"iana"},"image/vnd.ms-dds":{compressible:!0,extensions:["dds"]},"image/vnd.ms-modi":{source:"iana",extensions:["mdi"]},"image/vnd.ms-photo":{source:"apache",extensions:["wdp"]},"image/vnd.net-fpx":{source:"iana",extensions:["npx"]},"image/vnd.pco.b16":{source:"iana",extensions:["b16"]},"image/vnd.radiance":{source:"iana"},"image/vnd.sealed.png":{source:"iana"},"image/vnd.sealedmedia.softseal.gif":{source:"iana"},"image/vnd.sealedmedia.softseal.jpg":{source:"iana"},"image/vnd.svf":{source:"iana"},"image/vnd.tencent.tap":{source:"iana",extensions:["tap"]},"image/vnd.valve.source.texture":{source:"iana",extensions:["vtf"]},"image/vnd.wap.wbmp":{source:"iana",extensions:["wbmp"]},"image/vnd.xiff":{source:"iana",extensions:["xif"]},"image/vnd.zbrush.pcx":{source:"iana",extensions:["pcx"]},"image/webp":{source:"apache",extensions:["webp"]},"image/wmf":{source:"iana",extensions:["wmf"]},"image/x-3ds":{source:"apache",extensions:["3ds"]},"image/x-cmu-raster":{source:"apache",extensions:["ras"]},"image/x-cmx":{source:"apache",extensions:["cmx"]},"image/x-freehand":{source:"apache",extensions:["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{source:"apache",compressible:!0,extensions:["ico"]},"image/x-jng":{source:"nginx",extensions:["jng"]},"image/x-mrsid-image":{source:"apache",extensions:["sid"]},"image/x-ms-bmp":{source:"nginx",compressible:!0,extensions:["bmp"]},"image/x-pcx":{source:"apache",extensions:["pcx"]},"image/x-pict":{source:"apache",extensions:["pic","pct"]},"image/x-portable-anymap":{source:"apache",extensions:["pnm"]},"image/x-portable-bitmap":{source:"apache",extensions:["pbm"]},"image/x-portable-graymap":{source:"apache",extensions:["pgm"]},"image/x-portable-pixmap":{source:"apache",extensions:["ppm"]},"image/x-rgb":{source:"apache",extensions:["rgb"]},"image/x-tga":{source:"apache",extensions:["tga"]},"image/x-xbitmap":{source:"apache",extensions:["xbm"]},"image/x-xcf":{compressible:!1},"image/x-xpixmap":{source:"apache",extensions:["xpm"]},"image/x-xwindowdump":{source:"apache",extensions:["xwd"]},"message/cpim":{source:"iana"},"message/delivery-status":{source:"iana"},"message/disposition-notification":{source:"iana",extensions:["disposition-notification"]},"message/external-body":{source:"iana"},"message/feedback-report":{source:"iana"},"message/global":{source:"iana",extensions:["u8msg"]},"message/global-delivery-status":{source:"iana",extensions:["u8dsn"]},"message/global-disposition-notification":{source:"iana",extensions:["u8mdn"]},"message/global-headers":{source:"iana",extensions:["u8hdr"]},"message/http":{source:"iana",compressible:!1},"message/imdn+xml":{source:"iana",compressible:!0},"message/news":{source:"iana"},"message/partial":{source:"iana",compressible:!1},"message/rfc822":{source:"iana",compressible:!0,extensions:["eml","mime"]},"message/s-http":{source:"iana"},"message/sip":{source:"iana"},"message/sipfrag":{source:"iana"},"message/tracking-status":{source:"iana"},"message/vnd.si.simp":{source:"iana"},"message/vnd.wfa.wsc":{source:"iana",extensions:["wsc"]},"model/3mf":{source:"iana",extensions:["3mf"]},"model/e57":{source:"iana"},"model/gltf+json":{source:"iana",compressible:!0,extensions:["gltf"]},"model/gltf-binary":{source:"iana",compressible:!0,extensions:["glb"]},"model/iges":{source:"iana",compressible:!1,extensions:["igs","iges"]},"model/mesh":{source:"iana",compressible:!1,extensions:["msh","mesh","silo"]},"model/mtl":{source:"iana",extensions:["mtl"]},"model/obj":{source:"iana",extensions:["obj"]},"model/step":{source:"iana"},"model/step+xml":{source:"iana",compressible:!0,extensions:["stpx"]},"model/step+zip":{source:"iana",compressible:!1,extensions:["stpz"]},"model/step-xml+zip":{source:"iana",compressible:!1,extensions:["stpxz"]},"model/stl":{source:"iana",extensions:["stl"]},"model/vnd.collada+xml":{source:"iana",compressible:!0,extensions:["dae"]},"model/vnd.dwf":{source:"iana",extensions:["dwf"]},"model/vnd.flatland.3dml":{source:"iana"},"model/vnd.gdl":{source:"iana",extensions:["gdl"]},"model/vnd.gs-gdl":{source:"apache"},"model/vnd.gs.gdl":{source:"iana"},"model/vnd.gtw":{source:"iana",extensions:["gtw"]},"model/vnd.moml+xml":{source:"iana",compressible:!0},"model/vnd.mts":{source:"iana",extensions:["mts"]},"model/vnd.opengex":{source:"iana",extensions:["ogex"]},"model/vnd.parasolid.transmit.binary":{source:"iana",extensions:["x_b"]},"model/vnd.parasolid.transmit.text":{source:"iana",extensions:["x_t"]},"model/vnd.pytha.pyox":{source:"iana"},"model/vnd.rosette.annotated-data-model":{source:"iana"},"model/vnd.sap.vds":{source:"iana",extensions:["vds"]},"model/vnd.usdz+zip":{source:"iana",compressible:!1,extensions:["usdz"]},"model/vnd.valve.source.compiled-map":{source:"iana",extensions:["bsp"]},"model/vnd.vtu":{source:"iana",extensions:["vtu"]},"model/vrml":{source:"iana",compressible:!1,extensions:["wrl","vrml"]},"model/x3d+binary":{source:"apache",compressible:!1,extensions:["x3db","x3dbz"]},"model/x3d+fastinfoset":{source:"iana",extensions:["x3db"]},"model/x3d+vrml":{source:"apache",compressible:!1,extensions:["x3dv","x3dvz"]},"model/x3d+xml":{source:"iana",compressible:!0,extensions:["x3d","x3dz"]},"model/x3d-vrml":{source:"iana",extensions:["x3dv"]},"multipart/alternative":{source:"iana",compressible:!1},"multipart/appledouble":{source:"iana"},"multipart/byteranges":{source:"iana"},"multipart/digest":{source:"iana"},"multipart/encrypted":{source:"iana",compressible:!1},"multipart/form-data":{source:"iana",compressible:!1},"multipart/header-set":{source:"iana"},"multipart/mixed":{source:"iana"},"multipart/multilingual":{source:"iana"},"multipart/parallel":{source:"iana"},"multipart/related":{source:"iana",compressible:!1},"multipart/report":{source:"iana"},"multipart/signed":{source:"iana",compressible:!1},"multipart/vnd.bint.med-plus":{source:"iana"},"multipart/voice-message":{source:"iana"},"multipart/x-mixed-replace":{source:"iana"},"text/1d-interleaved-parityfec":{source:"iana"},"text/cache-manifest":{source:"iana",compressible:!0,extensions:["appcache","manifest"]},"text/calendar":{source:"iana",extensions:["ics","ifb"]},"text/calender":{compressible:!0},"text/cmd":{compressible:!0},"text/coffeescript":{extensions:["coffee","litcoffee"]},"text/cql":{source:"iana"},"text/cql-expression":{source:"iana"},"text/cql-identifier":{source:"iana"},"text/css":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["css"]},"text/csv":{source:"iana",compressible:!0,extensions:["csv"]},"text/csv-schema":{source:"iana"},"text/directory":{source:"iana"},"text/dns":{source:"iana"},"text/ecmascript":{source:"iana"},"text/encaprtp":{source:"iana"},"text/enriched":{source:"iana"},"text/fhirpath":{source:"iana"},"text/flexfec":{source:"iana"},"text/fwdred":{source:"iana"},"text/gff3":{source:"iana"},"text/grammar-ref-list":{source:"iana"},"text/html":{source:"iana",compressible:!0,extensions:["html","htm","shtml"]},"text/jade":{extensions:["jade"]},"text/javascript":{source:"iana",compressible:!0},"text/jcr-cnd":{source:"iana"},"text/jsx":{compressible:!0,extensions:["jsx"]},"text/less":{compressible:!0,extensions:["less"]},"text/markdown":{source:"iana",compressible:!0,extensions:["markdown","md"]},"text/mathml":{source:"nginx",extensions:["mml"]},"text/mdx":{compressible:!0,extensions:["mdx"]},"text/mizar":{source:"iana"},"text/n3":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["n3"]},"text/parameters":{source:"iana",charset:"UTF-8"},"text/parityfec":{source:"iana"},"text/plain":{source:"iana",compressible:!0,extensions:["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{source:"iana",charset:"UTF-8"},"text/prs.fallenstein.rst":{source:"iana"},"text/prs.lines.tag":{source:"iana",extensions:["dsc"]},"text/prs.prop.logic":{source:"iana"},"text/raptorfec":{source:"iana"},"text/red":{source:"iana"},"text/rfc822-headers":{source:"iana"},"text/richtext":{source:"iana",compressible:!0,extensions:["rtx"]},"text/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"text/rtp-enc-aescm128":{source:"iana"},"text/rtploopback":{source:"iana"},"text/rtx":{source:"iana"},"text/sgml":{source:"iana",extensions:["sgml","sgm"]},"text/shaclc":{source:"iana"},"text/shex":{source:"iana",extensions:["shex"]},"text/slim":{extensions:["slim","slm"]},"text/spdx":{source:"iana",extensions:["spdx"]},"text/strings":{source:"iana"},"text/stylus":{extensions:["stylus","styl"]},"text/t140":{source:"iana"},"text/tab-separated-values":{source:"iana",compressible:!0,extensions:["tsv"]},"text/troff":{source:"iana",extensions:["t","tr","roff","man","me","ms"]},"text/turtle":{source:"iana",charset:"UTF-8",extensions:["ttl"]},"text/ulpfec":{source:"iana"},"text/uri-list":{source:"iana",compressible:!0,extensions:["uri","uris","urls"]},"text/vcard":{source:"iana",compressible:!0,extensions:["vcard"]},"text/vnd.a":{source:"iana"},"text/vnd.abc":{source:"iana"},"text/vnd.ascii-art":{source:"iana"},"text/vnd.curl":{source:"iana",extensions:["curl"]},"text/vnd.curl.dcurl":{source:"apache",extensions:["dcurl"]},"text/vnd.curl.mcurl":{source:"apache",extensions:["mcurl"]},"text/vnd.curl.scurl":{source:"apache",extensions:["scurl"]},"text/vnd.debian.copyright":{source:"iana",charset:"UTF-8"},"text/vnd.dmclientscript":{source:"iana"},"text/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"text/vnd.esmertec.theme-descriptor":{source:"iana",charset:"UTF-8"},"text/vnd.familysearch.gedcom":{source:"iana",extensions:["ged"]},"text/vnd.ficlab.flt":{source:"iana"},"text/vnd.fly":{source:"iana",extensions:["fly"]},"text/vnd.fmi.flexstor":{source:"iana",extensions:["flx"]},"text/vnd.gml":{source:"iana"},"text/vnd.graphviz":{source:"iana",extensions:["gv"]},"text/vnd.hans":{source:"iana"},"text/vnd.hgl":{source:"iana"},"text/vnd.in3d.3dml":{source:"iana",extensions:["3dml"]},"text/vnd.in3d.spot":{source:"iana",extensions:["spot"]},"text/vnd.iptc.newsml":{source:"iana"},"text/vnd.iptc.nitf":{source:"iana"},"text/vnd.latex-z":{source:"iana"},"text/vnd.motorola.reflex":{source:"iana"},"text/vnd.ms-mediapackage":{source:"iana"},"text/vnd.net2phone.commcenter.command":{source:"iana"},"text/vnd.radisys.msml-basic-layout":{source:"iana"},"text/vnd.senx.warpscript":{source:"iana"},"text/vnd.si.uricatalogue":{source:"iana"},"text/vnd.sosi":{source:"iana"},"text/vnd.sun.j2me.app-descriptor":{source:"iana",charset:"UTF-8",extensions:["jad"]},"text/vnd.trolltech.linguist":{source:"iana",charset:"UTF-8"},"text/vnd.wap.si":{source:"iana"},"text/vnd.wap.sl":{source:"iana"},"text/vnd.wap.wml":{source:"iana",extensions:["wml"]},"text/vnd.wap.wmlscript":{source:"iana",extensions:["wmls"]},"text/vtt":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["vtt"]},"text/x-asm":{source:"apache",extensions:["s","asm"]},"text/x-c":{source:"apache",extensions:["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{source:"nginx",extensions:["htc"]},"text/x-fortran":{source:"apache",extensions:["f","for","f77","f90"]},"text/x-gwt-rpc":{compressible:!0},"text/x-handlebars-template":{extensions:["hbs"]},"text/x-java-source":{source:"apache",extensions:["java"]},"text/x-jquery-tmpl":{compressible:!0},"text/x-lua":{extensions:["lua"]},"text/x-markdown":{compressible:!0,extensions:["mkd"]},"text/x-nfo":{source:"apache",extensions:["nfo"]},"text/x-opml":{source:"apache",extensions:["opml"]},"text/x-org":{compressible:!0,extensions:["org"]},"text/x-pascal":{source:"apache",extensions:["p","pas"]},"text/x-processing":{compressible:!0,extensions:["pde"]},"text/x-sass":{extensions:["sass"]},"text/x-scss":{extensions:["scss"]},"text/x-setext":{source:"apache",extensions:["etx"]},"text/x-sfv":{source:"apache",extensions:["sfv"]},"text/x-suse-ymp":{compressible:!0,extensions:["ymp"]},"text/x-uuencode":{source:"apache",extensions:["uu"]},"text/x-vcalendar":{source:"apache",extensions:["vcs"]},"text/x-vcard":{source:"apache",extensions:["vcf"]},"text/xml":{source:"iana",compressible:!0,extensions:["xml"]},"text/xml-external-parsed-entity":{source:"iana"},"text/yaml":{compressible:!0,extensions:["yaml","yml"]},"video/1d-interleaved-parityfec":{source:"iana"},"video/3gpp":{source:"iana",extensions:["3gp","3gpp"]},"video/3gpp-tt":{source:"iana"},"video/3gpp2":{source:"iana",extensions:["3g2"]},"video/av1":{source:"iana"},"video/bmpeg":{source:"iana"},"video/bt656":{source:"iana"},"video/celb":{source:"iana"},"video/dv":{source:"iana"},"video/encaprtp":{source:"iana"},"video/ffv1":{source:"iana"},"video/flexfec":{source:"iana"},"video/h261":{source:"iana",extensions:["h261"]},"video/h263":{source:"iana",extensions:["h263"]},"video/h263-1998":{source:"iana"},"video/h263-2000":{source:"iana"},"video/h264":{source:"iana",extensions:["h264"]},"video/h264-rcdo":{source:"iana"},"video/h264-svc":{source:"iana"},"video/h265":{source:"iana"},"video/iso.segment":{source:"iana",extensions:["m4s"]},"video/jpeg":{source:"iana",extensions:["jpgv"]},"video/jpeg2000":{source:"iana"},"video/jpm":{source:"apache",extensions:["jpm","jpgm"]},"video/jxsv":{source:"iana"},"video/mj2":{source:"iana",extensions:["mj2","mjp2"]},"video/mp1s":{source:"iana"},"video/mp2p":{source:"iana"},"video/mp2t":{source:"iana",extensions:["ts"]},"video/mp4":{source:"iana",compressible:!1,extensions:["mp4","mp4v","mpg4"]},"video/mp4v-es":{source:"iana"},"video/mpeg":{source:"iana",compressible:!1,extensions:["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{source:"iana"},"video/mpv":{source:"iana"},"video/nv":{source:"iana"},"video/ogg":{source:"iana",compressible:!1,extensions:["ogv"]},"video/parityfec":{source:"iana"},"video/pointer":{source:"iana"},"video/quicktime":{source:"iana",compressible:!1,extensions:["qt","mov"]},"video/raptorfec":{source:"iana"},"video/raw":{source:"iana"},"video/rtp-enc-aescm128":{source:"iana"},"video/rtploopback":{source:"iana"},"video/rtx":{source:"iana"},"video/scip":{source:"iana"},"video/smpte291":{source:"iana"},"video/smpte292m":{source:"iana"},"video/ulpfec":{source:"iana"},"video/vc1":{source:"iana"},"video/vc2":{source:"iana"},"video/vnd.cctv":{source:"iana"},"video/vnd.dece.hd":{source:"iana",extensions:["uvh","uvvh"]},"video/vnd.dece.mobile":{source:"iana",extensions:["uvm","uvvm"]},"video/vnd.dece.mp4":{source:"iana"},"video/vnd.dece.pd":{source:"iana",extensions:["uvp","uvvp"]},"video/vnd.dece.sd":{source:"iana",extensions:["uvs","uvvs"]},"video/vnd.dece.video":{source:"iana",extensions:["uvv","uvvv"]},"video/vnd.directv.mpeg":{source:"iana"},"video/vnd.directv.mpeg-tts":{source:"iana"},"video/vnd.dlna.mpeg-tts":{source:"iana"},"video/vnd.dvb.file":{source:"iana",extensions:["dvb"]},"video/vnd.fvt":{source:"iana",extensions:["fvt"]},"video/vnd.hns.video":{source:"iana"},"video/vnd.iptvforum.1dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.1dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.2dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.2dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.ttsavc":{source:"iana"},"video/vnd.iptvforum.ttsmpeg2":{source:"iana"},"video/vnd.motorola.video":{source:"iana"},"video/vnd.motorola.videop":{source:"iana"},"video/vnd.mpegurl":{source:"iana",extensions:["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{source:"iana",extensions:["pyv"]},"video/vnd.nokia.interleaved-multimedia":{source:"iana"},"video/vnd.nokia.mp4vr":{source:"iana"},"video/vnd.nokia.videovoip":{source:"iana"},"video/vnd.objectvideo":{source:"iana"},"video/vnd.radgamettools.bink":{source:"iana"},"video/vnd.radgamettools.smacker":{source:"iana"},"video/vnd.sealed.mpeg1":{source:"iana"},"video/vnd.sealed.mpeg4":{source:"iana"},"video/vnd.sealed.swf":{source:"iana"},"video/vnd.sealedmedia.softseal.mov":{source:"iana"},"video/vnd.uvvu.mp4":{source:"iana",extensions:["uvu","uvvu"]},"video/vnd.vivo":{source:"iana",extensions:["viv"]},"video/vnd.youtube.yt":{source:"iana"},"video/vp8":{source:"iana"},"video/vp9":{source:"iana"},"video/webm":{source:"apache",compressible:!1,extensions:["webm"]},"video/x-f4v":{source:"apache",extensions:["f4v"]},"video/x-fli":{source:"apache",extensions:["fli"]},"video/x-flv":{source:"apache",compressible:!1,extensions:["flv"]},"video/x-m4v":{source:"apache",extensions:["m4v"]},"video/x-matroska":{source:"apache",compressible:!1,extensions:["mkv","mk3d","mks"]},"video/x-mng":{source:"apache",extensions:["mng"]},"video/x-ms-asf":{source:"apache",extensions:["asf","asx"]},"video/x-ms-vob":{source:"apache",extensions:["vob"]},"video/x-ms-wm":{source:"apache",extensions:["wm"]},"video/x-ms-wmv":{source:"apache",compressible:!1,extensions:["wmv"]},"video/x-ms-wmx":{source:"apache",extensions:["wmx"]},"video/x-ms-wvx":{source:"apache",extensions:["wvx"]},"video/x-msvideo":{source:"apache",extensions:["avi"]},"video/x-sgi-movie":{source:"apache",extensions:["movie"]},"video/x-smv":{source:"apache",extensions:["smv"]},"x-conference/x-cooltalk":{source:"apache",extensions:["ice"]},"x-shader/x-fragment":{compressible:!0},"x-shader/x-vertex":{compressible:!0}}});var Uh=L((I2,Bh)=>{"use strict";Bh.exports=qh()});var Hh=L(We=>{"use strict";var Rn=Uh(),JS=require("path").extname,$h=/^\s*([^;\s]*)(?:;|\s|$)/,ZS=/^text\//i;We.charset=zh;We.charsets={lookup:zh};We.contentType=QS;We.extension=eC;We.extensions=Object.create(null);We.lookup=tC;We.types=Object.create(null);iC(We.extensions,We.types);function zh(e){if(!e||typeof e!="string")return!1;var t=$h.exec(e),i=t&&Rn[t[1].toLowerCase()];return i&&i.charset?i.charset:t&&ZS.test(t[1])?"UTF-8":!1}function QS(e){if(!e||typeof e!="string")return!1;var t=e.indexOf("/")===-1?We.lookup(e):e;if(!t)return!1;if(t.indexOf("charset")===-1){var i=We.charset(t);i&&(t+="; charset="+i.toLowerCase())}return t}function eC(e){if(!e||typeof e!="string")return!1;var t=$h.exec(e),i=t&&We.extensions[t[1].toLowerCase()];return!i||!i.length?!1:i[0]}function tC(e){if(!e||typeof e!="string")return!1;var t=JS("x."+e).toLowerCase().substr(1);return t&&We.types[t]||!1}function iC(e,t){var i=["nginx","apache",void 0,"iana"];Object.keys(Rn).forEach(function(n){var s=Rn[n],o=s.extensions;if(!(!o||!o.length)){e[n]=o;for(var a=0;a<o.length;a++){var c=o[a];if(t[c]){var u=i.indexOf(Rn[t[c]].source),m=i.indexOf(s.source);if(t[c]!=="application/octet-stream"&&(u>m||u===m&&t[c].substr(0,12)==="application/"))continue}t[c]=n}}})}});var Vh=L((L2,Gh)=>{"use strict";Gh.exports=rC;function rC(e){var t=typeof setImmediate=="function"?setImmediate:typeof process=="object"&&typeof process.nextTick=="function"?process.nextTick:null;t?t(e):setTimeout(e,0)}});var Aa=L((k2,Yh)=>{"use strict";var Xh=Vh();Yh.exports=nC;function nC(e){var t=!1;return Xh(function(){t=!0}),function(r,n){t?e(r,n):Xh(function(){e(r,n)})}}});var Da=L((R2,Wh)=>{"use strict";Wh.exports=sC;function sC(e){Object.keys(e.jobs).forEach(oC.bind(e)),e.jobs={}}function oC(e){typeof this.jobs[e]=="function"&&this.jobs[e]()}});var Ia=L((P2,Jh)=>{"use strict";var Kh=Aa(),aC=Da();Jh.exports=cC;function cC(e,t,i,r){var n=i.keyedList?i.keyedList[i.index]:i.index;i.jobs[n]=uC(t,n,e[n],function(s,o){n in i.jobs&&(delete i.jobs[n],s?aC(i):i.results[n]=o,r(s,i.results))})}function uC(e,t,i,r){var n;return e.length==2?n=e(i,Kh(r)):n=e(i,t,Kh(r)),n}});var Na=L((F2,Zh)=>{"use strict";Zh.exports=lC;function lC(e,t){var i=!Array.isArray(e),r={index:0,keyedList:i||t?Object.keys(e):null,jobs:{},results:i?{}:[],size:i?Object.keys(e).length:e.length};return t&&r.keyedList.sort(i?t:function(n,s){return t(e[n],e[s])}),r}});var La=L((j2,Qh)=>{"use strict";var pC=Da(),dC=Aa();Qh.exports=fC;function fC(e){Object.keys(this.jobs).length&&(this.index=this.size,pC(this),dC(e)(null,this.results))}});var tm=L((M2,em)=>{"use strict";var hC=Ia(),mC=Na(),gC=La();em.exports=xC;function xC(e,t,i){for(var r=mC(e);r.index<(r.keyedList||e).length;)hC(e,t,r,function(n,s){if(n){i(n,s);return}if(Object.keys(r.jobs).length===0){i(null,r.results);return}}),r.index++;return gC.bind(r,i)}});var ka=L((q2,Pn)=>{"use strict";var im=Ia(),vC=Na(),yC=La();Pn.exports=bC;Pn.exports.ascending=rm;Pn.exports.descending=wC;function bC(e,t,i,r){var n=vC(e,i);return im(e,t,n,function s(o,a){if(o){r(o,a);return}if(n.index++,n.index<(n.keyedList||e).length){im(e,t,n,s);return}r(null,n.results)}),yC.bind(n,r)}function rm(e,t){return e<t?-1:e>t?1:0}function wC(e,t){return-1*rm(e,t)}});var sm=L((B2,nm)=>{"use strict";var EC=ka();nm.exports=_C;function _C(e,t,i){return EC(e,t,null,i)}});var am=L((U2,om)=>{"use strict";om.exports={parallel:tm(),serial:sm(),serialOrdered:ka()}});var um=L(($2,cm)=>{"use strict";cm.exports=function(e,t){return Object.keys(t).forEach(function(i){e[i]=e[i]||t[i]}),e}});var dm=L((z2,pm)=>{"use strict";var ja=Mh(),lm=require("util"),Ra=require("path"),TC=require("http"),SC=require("https"),CC=require("url").parse,OC=require("fs"),AC=require("stream").Stream,Pa=Hh(),DC=am(),Fa=um();pm.exports=Q;lm.inherits(Q,ja);function Q(e){if(!(this instanceof Q))return new Q(e);this._overheadLength=0,this._valueLength=0,this._valuesToMeasure=[],ja.call(this),e=e||{};for(var t in e)this[t]=e[t]}Q.LINE_BREAK=`\r
`;Q.DEFAULT_CONTENT_TYPE="application/octet-stream";Q.prototype.append=function(e,t,i){i=i||{},typeof i=="string"&&(i={filename:i});var r=ja.prototype.append.bind(this);if(typeof t=="number"&&(t=""+t),lm.isArray(t)){this._error(new Error("Arrays are not supported."));return}var n=this._multiPartHeader(e,t,i),s=this._multiPartFooter();r(n),r(t),r(s),this._trackLength(n,t,i)};Q.prototype._trackLength=function(e,t,i){var r=0;i.knownLength!=null?r+=+i.knownLength:Buffer.isBuffer(t)?r=t.length:typeof t=="string"&&(r=Buffer.byteLength(t)),this._valueLength+=r,this._overheadLength+=Buffer.byteLength(e)+Q.LINE_BREAK.length,!(!t||!t.path&&!(t.readable&&t.hasOwnProperty("httpVersion"))&&!(t instanceof AC))&&(i.knownLength||this._valuesToMeasure.push(t))};Q.prototype._lengthRetriever=function(e,t){e.hasOwnProperty("fd")?e.end!=null&&e.end!=1/0&&e.start!=null?t(null,e.end+1-(e.start?e.start:0)):OC.stat(e.path,function(i,r){var n;if(i){t(i);return}n=r.size-(e.start?e.start:0),t(null,n)}):e.hasOwnProperty("httpVersion")?t(null,+e.headers["content-length"]):e.hasOwnProperty("httpModule")?(e.on("response",function(i){e.pause(),t(null,+i.headers["content-length"])}),e.resume()):t("Unknown stream")};Q.prototype._multiPartHeader=function(e,t,i){if(typeof i.header=="string")return i.header;var r=this._getContentDisposition(t,i),n=this._getContentType(t,i),s="",o={"Content-Disposition":["form-data",'name="'+e+'"'].concat(r||[]),"Content-Type":[].concat(n||[])};typeof i.header=="object"&&Fa(o,i.header);var a;for(var c in o)o.hasOwnProperty(c)&&(a=o[c],a!=null&&(Array.isArray(a)||(a=[a]),a.length&&(s+=c+": "+a.join("; ")+Q.LINE_BREAK)));return"--"+this.getBoundary()+Q.LINE_BREAK+s+Q.LINE_BREAK};Q.prototype._getContentDisposition=function(e,t){var i,r;return typeof t.filepath=="string"?i=Ra.normalize(t.filepath).replace(/\\/g,"/"):t.filename||e.name||e.path?i=Ra.basename(t.filename||e.name||e.path):e.readable&&e.hasOwnProperty("httpVersion")&&(i=Ra.basename(e.client._httpMessage.path||"")),i&&(r='filename="'+i+'"'),r};Q.prototype._getContentType=function(e,t){var i=t.contentType;return!i&&e.name&&(i=Pa.lookup(e.name)),!i&&e.path&&(i=Pa.lookup(e.path)),!i&&e.readable&&e.hasOwnProperty("httpVersion")&&(i=e.headers["content-type"]),!i&&(t.filepath||t.filename)&&(i=Pa.lookup(t.filepath||t.filename)),!i&&typeof e=="object"&&(i=Q.DEFAULT_CONTENT_TYPE),i};Q.prototype._multiPartFooter=function(){return function(e){var t=Q.LINE_BREAK,i=this._streams.length===0;i&&(t+=this._lastBoundary()),e(t)}.bind(this)};Q.prototype._lastBoundary=function(){return"--"+this.getBoundary()+"--"+Q.LINE_BREAK};Q.prototype.getHeaders=function(e){var t,i={"content-type":"multipart/form-data; boundary="+this.getBoundary()};for(t in e)e.hasOwnProperty(t)&&(i[t.toLowerCase()]=e[t]);return i};Q.prototype.setBoundary=function(e){this._boundary=e};Q.prototype.getBoundary=function(){return this._boundary||this._generateBoundary(),this._boundary};Q.prototype.getBuffer=function(){for(var e=new Buffer.alloc(0),t=this.getBoundary(),i=0,r=this._streams.length;i<r;i++)typeof this._streams[i]!="function"&&(Buffer.isBuffer(this._streams[i])?e=Buffer.concat([e,this._streams[i]]):e=Buffer.concat([e,Buffer.from(this._streams[i])]),(typeof this._streams[i]!="string"||this._streams[i].substring(2,t.length+2)!==t)&&(e=Buffer.concat([e,Buffer.from(Q.LINE_BREAK)])));return Buffer.concat([e,Buffer.from(this._lastBoundary())])};Q.prototype._generateBoundary=function(){for(var e="--------------------------",t=0;t<24;t++)e+=Math.floor(Math.random()*10).toString(16);this._boundary=e};Q.prototype.getLengthSync=function(){var e=this._overheadLength+this._valueLength;return this._streams.length&&(e+=this._lastBoundary().length),this.hasKnownLength()||this._error(new Error("Cannot calculate proper length in synchronous way.")),e};Q.prototype.hasKnownLength=function(){var e=!0;return this._valuesToMeasure.length&&(e=!1),e};Q.prototype.getLength=function(e){var t=this._overheadLength+this._valueLength;if(this._streams.length&&(t+=this._lastBoundary().length),!this._valuesToMeasure.length){process.nextTick(e.bind(this,null,t));return}DC.parallel(this._valuesToMeasure,this._lengthRetriever,function(i,r){if(i){e(i);return}r.forEach(function(n){t+=n}),e(null,t)})};Q.prototype.submit=function(e,t){var i,r,n={method:"post"};return typeof e=="string"?(e=CC(e),r=Fa({port:e.port,path:e.pathname,host:e.hostname,protocol:e.protocol},n)):(r=Fa(e,n),r.port||(r.port=r.protocol=="https:"?443:80)),r.headers=this.getHeaders(e.headers),r.protocol=="https:"?i=SC.request(r):i=TC.request(r),this.getLength(function(s,o){if(s&&s!=="Unknown stream"){this._error(s);return}if(o&&i.setHeader("Content-Length",o),this.pipe(i),t){var a,c=function(u,m){return i.removeListener("error",c),i.removeListener("response",a),t.call(this,u,m)};a=c.bind(this,null),i.on("error",c),i.on("response",a)}}.bind(this)),i};Q.prototype._error=function(e){this.error||(this.error=e,this.pause(),this.emit("error",e))};Q.prototype.toString=function(){return"[object FormData]"}});var Om=L(Cm=>{"use strict";var VC=require("url").parse,XC={ftp:21,gopher:70,http:80,https:443,ws:80,wss:443},YC=String.prototype.endsWith||function(e){return e.length<=this.length&&this.indexOf(e,this.length-e.length)!==-1};function WC(e){var t=typeof e=="string"?VC(e):e||{},i=t.protocol,r=t.host,n=t.port;if(typeof r!="string"||!r||typeof i!="string"||(i=i.split(":",1)[0],r=r.replace(/:\d*$/,""),n=parseInt(n)||XC[i]||0,!KC(r,n)))return"";var s=Gi("npm_config_"+i+"_proxy")||Gi(i+"_proxy")||Gi("npm_config_proxy")||Gi("all_proxy");return s&&s.indexOf("://")===-1&&(s=i+"://"+s),s}function KC(e,t){var i=(Gi("npm_config_no_proxy")||Gi("no_proxy")).toLowerCase();return i?i==="*"?!1:i.split(/[,\s]/).every(function(r){if(!r)return!0;var n=r.match(/^(.+):(\d+)$/),s=n?n[1]:r,o=n?parseInt(n[2]):0;return o&&o!==t?!0:/^[.*]/.test(s)?(s.charAt(0)==="*"&&(s=s.slice(1)),!YC.call(e,s)):e!==s}):!0}function Gi(e){return process.env[e.toLowerCase()]||process.env[e.toUpperCase()]||""}Cm.getProxyForUrl=WC});var Dm=L((HF,Am)=>{"use strict";var Vi=1e3,Xi=Vi*60,Yi=Xi*60,hi=Yi*24,JC=hi*7,ZC=hi*365.25;Am.exports=function(e,t){t=t||{};var i=typeof e;if(i==="string"&&e.length>0)return QC(e);if(i==="number"&&isFinite(e))return t.long?tO(e):eO(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))};function QC(e){if(e=String(e),!(e.length>100)){var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(t){var i=parseFloat(t[1]),r=(t[2]||"ms").toLowerCase();switch(r){case"years":case"year":case"yrs":case"yr":case"y":return i*ZC;case"weeks":case"week":case"w":return i*JC;case"days":case"day":case"d":return i*hi;case"hours":case"hour":case"hrs":case"hr":case"h":return i*Yi;case"minutes":case"minute":case"mins":case"min":case"m":return i*Xi;case"seconds":case"second":case"secs":case"sec":case"s":return i*Vi;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return i;default:return}}}}function eO(e){var t=Math.abs(e);return t>=hi?Math.round(e/hi)+"d":t>=Yi?Math.round(e/Yi)+"h":t>=Xi?Math.round(e/Xi)+"m":t>=Vi?Math.round(e/Vi)+"s":e+"ms"}function tO(e){var t=Math.abs(e);return t>=hi?qn(e,t,hi,"day"):t>=Yi?qn(e,t,Yi,"hour"):t>=Xi?qn(e,t,Xi,"minute"):t>=Vi?qn(e,t,Vi,"second"):e+" ms"}function qn(e,t,i,r){var n=t>=i*1.5;return Math.round(e/i)+" "+r+(n?"s":"")}});var Ya=L((GF,Im)=>{"use strict";function iO(e){i.debug=i,i.default=i,i.coerce=c,i.disable=s,i.enable=n,i.enabled=o,i.humanize=Dm(),i.destroy=u,Object.keys(e).forEach(m=>{i[m]=e[m]}),i.names=[],i.skips=[],i.formatters={};function t(m){let g=0;for(let x=0;x<m.length;x++)g=(g<<5)-g+m.charCodeAt(x),g|=0;return i.colors[Math.abs(g)%i.colors.length]}i.selectColor=t;function i(m){let g,x=null,p,h;function v(...E){if(!v.enabled)return;let S=v,_=Number(new Date),l=_-(g||_);S.diff=l,S.prev=g,S.curr=_,g=_,E[0]=i.coerce(E[0]),typeof E[0]!="string"&&E.unshift("%O");let d=0;E[0]=E[0].replace(/%([a-zA-Z%])/g,(w,O)=>{if(w==="%%")return"%";d++;let y=i.formatters[O];if(typeof y=="function"){let A=E[d];w=y.call(S,A),E.splice(d,1),d--}return w}),i.formatArgs.call(S,E),(S.log||i.log).apply(S,E)}return v.namespace=m,v.useColors=i.useColors(),v.color=i.selectColor(m),v.extend=r,v.destroy=i.destroy,Object.defineProperty(v,"enabled",{enumerable:!0,configurable:!1,get:()=>x!==null?x:(p!==i.namespaces&&(p=i.namespaces,h=i.enabled(m)),h),set:E=>{x=E}}),typeof i.init=="function"&&i.init(v),v}function r(m,g){let x=i(this.namespace+(typeof g>"u"?":":g)+m);return x.log=this.log,x}function n(m){i.save(m),i.namespaces=m,i.names=[],i.skips=[];let g,x=(typeof m=="string"?m:"").split(/[\s,]+/),p=x.length;for(g=0;g<p;g++)x[g]&&(m=x[g].replace(/\*/g,".*?"),m[0]==="-"?i.skips.push(new RegExp("^"+m.slice(1)+"$")):i.names.push(new RegExp("^"+m+"$")))}function s(){let m=[...i.names.map(a),...i.skips.map(a).map(g=>"-"+g)].join(",");return i.enable(""),m}function o(m){if(m[m.length-1]==="*")return!0;let g,x;for(g=0,x=i.skips.length;g<x;g++)if(i.skips[g].test(m))return!1;for(g=0,x=i.names.length;g<x;g++)if(i.names[g].test(m))return!0;return!1}function a(m){return m.toString().substring(2,m.toString().length-2).replace(/\.\*\?$/,"*")}function c(m){return m instanceof Error?m.stack||m.message:m}function u(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return i.enable(i.load()),i}Im.exports=iO});var Nm=L((nt,Bn)=>{"use strict";nt.formatArgs=nO;nt.save=sO;nt.load=oO;nt.useColors=rO;nt.storage=aO();nt.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})();nt.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function rO(){return typeof window<"u"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs)?!0:typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)?!1:typeof document<"u"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window<"u"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function nO(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+Bn.exports.humanize(this.diff),!this.useColors)return;let t="color: "+this.color;e.splice(1,0,t,"color: inherit");let i=0,r=0;e[0].replace(/%[a-zA-Z%]/g,n=>{n!=="%%"&&(i++,n==="%c"&&(r=i))}),e.splice(r,0,t)}nt.log=console.debug||console.log||(()=>{});function sO(e){try{e?nt.storage.setItem("debug",e):nt.storage.removeItem("debug")}catch{}}function oO(){let e;try{e=nt.storage.getItem("debug")}catch{}return!e&&typeof process<"u"&&"env"in process&&(e=process.env.DEBUG),e}function aO(){try{return localStorage}catch{}}Bn.exports=Ya()(nt);var{formatters:cO}=Bn.exports;cO.j=function(e){try{return JSON.stringify(e)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}});var km=L((VF,Lm)=>{"use strict";Lm.exports=(e,t=process.argv)=>{let i=e.startsWith("-")?"":e.length===1?"-":"--",r=t.indexOf(i+e),n=t.indexOf("--");return r!==-1&&(n===-1||r<n)}});var Fm=L((XF,Pm)=>{"use strict";var uO=require("os"),Rm=require("tty"),dt=km(),{env:Fe}=process,Qt;dt("no-color")||dt("no-colors")||dt("color=false")||dt("color=never")?Qt=0:(dt("color")||dt("colors")||dt("color=true")||dt("color=always"))&&(Qt=1);"FORCE_COLOR"in Fe&&(Fe.FORCE_COLOR==="true"?Qt=1:Fe.FORCE_COLOR==="false"?Qt=0:Qt=Fe.FORCE_COLOR.length===0?1:Math.min(parseInt(Fe.FORCE_COLOR,10),3));function Wa(e){return e===0?!1:{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}function Ka(e,t){if(Qt===0)return 0;if(dt("color=16m")||dt("color=full")||dt("color=truecolor"))return 3;if(dt("color=256"))return 2;if(e&&!t&&Qt===void 0)return 0;let i=Qt||0;if(Fe.TERM==="dumb")return i;if(process.platform==="win32"){let r=uO.release().split(".");return Number(r[0])>=10&&Number(r[2])>=10586?Number(r[2])>=14931?3:2:1}if("CI"in Fe)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI","GITHUB_ACTIONS","BUILDKITE"].some(r=>r in Fe)||Fe.CI_NAME==="codeship"?1:i;if("TEAMCITY_VERSION"in Fe)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(Fe.TEAMCITY_VERSION)?1:0;if(Fe.COLORTERM==="truecolor")return 3;if("TERM_PROGRAM"in Fe){let r=parseInt((Fe.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(Fe.TERM_PROGRAM){case"iTerm.app":return r>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(Fe.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(Fe.TERM)||"COLORTERM"in Fe?1:i}function lO(e){let t=Ka(e,e&&e.isTTY);return Wa(t)}Pm.exports={supportsColor:lO,stdout:Wa(Ka(!0,Rm.isatty(1))),stderr:Wa(Ka(!0,Rm.isatty(2)))}});var Mm=L((je,$n)=>{"use strict";var pO=require("tty"),Un=require("util");je.init=vO;je.log=mO;je.formatArgs=fO;je.save=gO;je.load=xO;je.useColors=dO;je.destroy=Un.deprecate(()=>{},"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");je.colors=[6,2,3,4,5,1];try{let e=Fm();e&&(e.stderr||e).level>=2&&(je.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch{}je.inspectOpts=Object.keys(process.env).filter(e=>/^debug_/i.test(e)).reduce((e,t)=>{let i=t.substring(6).toLowerCase().replace(/_([a-z])/g,(n,s)=>s.toUpperCase()),r=process.env[t];return/^(yes|on|true|enabled)$/i.test(r)?r=!0:/^(no|off|false|disabled)$/i.test(r)?r=!1:r==="null"?r=null:r=Number(r),e[i]=r,e},{});function dO(){return"colors"in je.inspectOpts?!!je.inspectOpts.colors:pO.isatty(process.stderr.fd)}function fO(e){let{namespace:t,useColors:i}=this;if(i){let r=this.color,n="\x1B[3"+(r<8?r:"8;5;"+r),s=`  ${n};1m${t} \x1B[0m`;e[0]=s+e[0].split(`
`).join(`
`+s),e.push(n+"m+"+$n.exports.humanize(this.diff)+"\x1B[0m")}else e[0]=hO()+t+" "+e[0]}function hO(){return je.inspectOpts.hideDate?"":new Date().toISOString()+" "}function mO(...e){return process.stderr.write(Un.formatWithOptions(je.inspectOpts,...e)+`
`)}function gO(e){e?process.env.DEBUG=e:delete process.env.DEBUG}function xO(){return process.env.DEBUG}function vO(e){e.inspectOpts={};let t=Object.keys(je.inspectOpts);for(let i=0;i<t.length;i++)e.inspectOpts[t[i]]=je.inspectOpts[t[i]]}$n.exports=Ya()(je);var{formatters:jm}=$n.exports;jm.o=function(e){return this.inspectOpts.colors=this.useColors,Un.inspect(e,this.inspectOpts).split(`
`).map(t=>t.trim()).join(" ")};jm.O=function(e){return this.inspectOpts.colors=this.useColors,Un.inspect(e,this.inspectOpts)}});var zn=L((YF,Ja)=>{"use strict";typeof process>"u"||process.type==="renderer"||process.browser===!0||process.__nwjs?Ja.exports=Nm():Ja.exports=Mm()});var Bm=L((WF,qm)=>{"use strict";var Ar;qm.exports=function(){if(!Ar){try{Ar=zn()("follow-redirects")}catch{}typeof Ar!="function"&&(Ar=function(){})}Ar.apply(null,arguments)}});var Gm=L((KF,uc)=>{"use strict";var Nr=require("url"),Dr=Nr.URL,yO=require("http"),bO=require("https"),ic=require("stream").Writable,rc=require("assert"),Um=Bm(),nc=!1;try{rc(new Dr)}catch(e){nc=e.code==="ERR_INVALID_URL"}var wO=["auth","host","hostname","href","path","pathname","port","protocol","query","search","hash"],sc=["abort","aborted","connect","error","socket","timeout"],oc=Object.create(null);sc.forEach(function(e){oc[e]=function(t,i,r){this._redirectable.emit(e,t,i,r)}});var Qa=Lr("ERR_INVALID_URL","Invalid URL",TypeError),ec=Lr("ERR_FR_REDIRECTION_FAILURE","Redirected request failed"),EO=Lr("ERR_FR_TOO_MANY_REDIRECTS","Maximum number of redirects exceeded",ec),_O=Lr("ERR_FR_MAX_BODY_LENGTH_EXCEEDED","Request body larger than maxBodyLength limit"),TO=Lr("ERR_STREAM_WRITE_AFTER_END","write after end"),SO=ic.prototype.destroy||zm;function Ke(e,t){ic.call(this),this._sanitizeOptions(e),this._options=e,this._ended=!1,this._ending=!1,this._redirectCount=0,this._redirects=[],this._requestBodyLength=0,this._requestBodyBuffers=[],t&&this.on("response",t);var i=this;this._onNativeResponse=function(r){try{i._processResponse(r)}catch(n){i.emit("error",n instanceof ec?n:new ec({cause:n}))}},this._performRequest()}Ke.prototype=Object.create(ic.prototype);Ke.prototype.abort=function(){cc(this._currentRequest),this._currentRequest.abort(),this.emit("abort")};Ke.prototype.destroy=function(e){return cc(this._currentRequest,e),SO.call(this,e),this};Ke.prototype.write=function(e,t,i){if(this._ending)throw new TO;if(!mi(e)&&!AO(e))throw new TypeError("data should be a string, Buffer or Uint8Array");if(Ir(t)&&(i=t,t=null),e.length===0){i&&i();return}this._requestBodyLength+e.length<=this._options.maxBodyLength?(this._requestBodyLength+=e.length,this._requestBodyBuffers.push({data:e,encoding:t}),this._currentRequest.write(e,t,i)):(this.emit("error",new _O),this.abort())};Ke.prototype.end=function(e,t,i){if(Ir(e)?(i=e,e=t=null):Ir(t)&&(i=t,t=null),!e)this._ended=this._ending=!0,this._currentRequest.end(null,null,i);else{var r=this,n=this._currentRequest;this.write(e,t,function(){r._ended=!0,n.end(null,null,i)}),this._ending=!0}};Ke.prototype.setHeader=function(e,t){this._options.headers[e]=t,this._currentRequest.setHeader(e,t)};Ke.prototype.removeHeader=function(e){delete this._options.headers[e],this._currentRequest.removeHeader(e)};Ke.prototype.setTimeout=function(e,t){var i=this;function r(o){o.setTimeout(e),o.removeListener("timeout",o.destroy),o.addListener("timeout",o.destroy)}function n(o){i._timeout&&clearTimeout(i._timeout),i._timeout=setTimeout(function(){i.emit("timeout"),s()},e),r(o)}function s(){i._timeout&&(clearTimeout(i._timeout),i._timeout=null),i.removeListener("abort",s),i.removeListener("error",s),i.removeListener("response",s),i.removeListener("close",s),t&&i.removeListener("timeout",t),i.socket||i._currentRequest.removeListener("socket",n)}return t&&this.on("timeout",t),this.socket?n(this.socket):this._currentRequest.once("socket",n),this.on("socket",r),this.on("abort",s),this.on("error",s),this.on("response",s),this.on("close",s),this};["flushHeaders","getHeader","setNoDelay","setSocketKeepAlive"].forEach(function(e){Ke.prototype[e]=function(t,i){return this._currentRequest[e](t,i)}});["aborted","connection","socket"].forEach(function(e){Object.defineProperty(Ke.prototype,e,{get:function(){return this._currentRequest[e]}})});Ke.prototype._sanitizeOptions=function(e){if(e.headers||(e.headers={}),e.host&&(e.hostname||(e.hostname=e.host),delete e.host),!e.pathname&&e.path){var t=e.path.indexOf("?");t<0?e.pathname=e.path:(e.pathname=e.path.substring(0,t),e.search=e.path.substring(t))}};Ke.prototype._performRequest=function(){var e=this._options.protocol,t=this._options.nativeProtocols[e];if(!t)throw new TypeError("Unsupported protocol "+e);if(this._options.agents){var i=e.slice(0,-1);this._options.agent=this._options.agents[i]}var r=this._currentRequest=t.request(this._options,this._onNativeResponse);r._redirectable=this;for(var n of sc)r.on(n,oc[n]);if(this._currentUrl=/^\//.test(this._options.path)?Nr.format(this._options):this._options.path,this._isRedirect){var s=0,o=this,a=this._requestBodyBuffers;(function c(u){if(r===o._currentRequest)if(u)o.emit("error",u);else if(s<a.length){var m=a[s++];r.finished||r.write(m.data,m.encoding,c)}else o._ended&&r.end()})()}};Ke.prototype._processResponse=function(e){var t=e.statusCode;this._options.trackRedirects&&this._redirects.push({url:this._currentUrl,headers:e.headers,statusCode:t});var i=e.headers.location;if(!i||this._options.followRedirects===!1||t<300||t>=400){e.responseUrl=this._currentUrl,e.redirects=this._redirects,this.emit("response",e),this._requestBodyBuffers=[];return}if(cc(this._currentRequest),e.destroy(),++this._redirectCount>this._options.maxRedirects)throw new EO;var r,n=this._options.beforeRedirect;n&&(r=Object.assign({Host:e.req.getHeader("host")},this._options.headers));var s=this._options.method;((t===301||t===302)&&this._options.method==="POST"||t===303&&!/^(?:GET|HEAD)$/.test(this._options.method))&&(this._options.method="GET",this._requestBodyBuffers=[],Za(/^content-/i,this._options.headers));var o=Za(/^host$/i,this._options.headers),a=ac(this._currentUrl),c=o||a.host,u=/^\w+:/.test(i)?this._currentUrl:Nr.format(Object.assign(a,{host:c})),m=CO(i,u);if(Um("redirecting to",m.href),this._isRedirect=!0,tc(m,this._options),(m.protocol!==a.protocol&&m.protocol!=="https:"||m.host!==c&&!OO(m.host,c))&&Za(/^(?:(?:proxy-)?authorization|cookie)$/i,this._options.headers),Ir(n)){var g={headers:e.headers,statusCode:t},x={url:u,method:s,headers:r};n(this._options,g,x),this._sanitizeOptions(this._options)}this._performRequest()};function $m(e){var t={maxRedirects:21,maxBodyLength:10485760},i={};return Object.keys(e).forEach(function(r){var n=r+":",s=i[n]=e[r],o=t[r]=Object.create(s);function a(u,m,g){return DO(u)?u=tc(u):mi(u)?u=tc(ac(u)):(g=m,m=Hm(u),u={protocol:n}),Ir(m)&&(g=m,m=null),m=Object.assign({maxRedirects:t.maxRedirects,maxBodyLength:t.maxBodyLength},u,m),m.nativeProtocols=i,!mi(m.host)&&!mi(m.hostname)&&(m.hostname="::1"),rc.equal(m.protocol,n,"protocol mismatch"),Um("options",m),new Ke(m,g)}function c(u,m,g){var x=o.request(u,m,g);return x.end(),x}Object.defineProperties(o,{request:{value:a,configurable:!0,enumerable:!0,writable:!0},get:{value:c,configurable:!0,enumerable:!0,writable:!0}})}),t}function zm(){}function ac(e){var t;if(nc)t=new Dr(e);else if(t=Hm(Nr.parse(e)),!mi(t.protocol))throw new Qa({input:e});return t}function CO(e,t){return nc?new Dr(e,t):ac(Nr.resolve(t,e))}function Hm(e){if(/^\[/.test(e.hostname)&&!/^\[[:0-9a-f]+\]$/i.test(e.hostname))throw new Qa({input:e.href||e});if(/^\[/.test(e.host)&&!/^\[[:0-9a-f]+\](:\d+)?$/i.test(e.host))throw new Qa({input:e.href||e});return e}function tc(e,t){var i=t||{};for(var r of wO)i[r]=e[r];return i.hostname.startsWith("[")&&(i.hostname=i.hostname.slice(1,-1)),i.port!==""&&(i.port=Number(i.port)),i.path=i.search?i.pathname+i.search:i.pathname,i}function Za(e,t){var i;for(var r in t)e.test(r)&&(i=t[r],delete t[r]);return i===null||typeof i>"u"?void 0:String(i).trim()}function Lr(e,t,i){function r(n){Error.captureStackTrace(this,this.constructor),Object.assign(this,n||{}),this.code=e,this.message=this.cause?t+": "+this.cause.message:t}return r.prototype=new(i||Error),Object.defineProperties(r.prototype,{constructor:{value:r,enumerable:!1},name:{value:"Error ["+e+"]",enumerable:!1}}),r}function cc(e,t){for(var i of sc)e.removeListener(i,oc[i]);e.on("error",zm),e.destroy(t)}function OO(e,t){rc(mi(e)&&mi(t));var i=e.length-t.length-1;return i>0&&e[i]==="."&&e.endsWith(t)}function mi(e){return typeof e=="string"||e instanceof String}function Ir(e){return typeof e=="function"}function AO(e){return typeof e=="object"&&"length"in e}function DO(e){return Dr&&e instanceof Dr}uc.exports=$m({http:yO,https:bO});uc.exports.wrap=$m});var Cg=L(st=>{"use strict";var i1=st&&st.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(st,"__esModule",{value:!0});var r1=require("fs"),n1=i1(zn()),Zi=n1.default("@kwsites/file-exists");function s1(e,t,i){Zi("checking %s",e);try{let r=r1.statSync(e);return r.isFile()&&t?(Zi("[OK] path represents a file"),!0):r.isDirectory()&&i?(Zi("[OK] path represents a directory"),!0):(Zi("[FAIL] path represents something other than a file or directory"),!1)}catch(r){if(r.code==="ENOENT")return Zi("[FAIL] path is not accessible: %o",r),!1;throw Zi("[FATAL] %o",r),r}}function o1(e,t=st.READABLE){return s1(e,(t&st.FILE)>0,(t&st.FOLDER)>0)}st.exists=o1;st.FILE=1;st.FOLDER=2;st.READABLE=st.FILE+st.FOLDER});var Og=L(es=>{"use strict";function a1(e){for(var t in e)es.hasOwnProperty(t)||(es[t]=e[t])}Object.defineProperty(es,"__esModule",{value:!0});a1(Cg())});var Cc=L(vi=>{"use strict";Object.defineProperty(vi,"__esModule",{value:!0});vi.createDeferred=vi.deferred=void 0;function Sc(){let e,t,i="pending";return{promise:new Promise((n,s)=>{e=n,t=s}),done(n){i==="pending"&&(i="resolved",e(n))},fail(n){i==="pending"&&(i="rejected",t(n))},get fulfilled(){return i!=="pending"},get status(){return i}}}vi.deferred=Sc;vi.createDeferred=Sc;vi.default=Sc});var my=L((x3,hy)=>{"use strict";hy.exports=fy;fy.sync=yI;var py=require("fs");function vI(e,t){var i=t.pathExt!==void 0?t.pathExt:process.env.PATHEXT;if(!i||(i=i.split(";"),i.indexOf("")!==-1))return!0;for(var r=0;r<i.length;r++){var n=i[r].toLowerCase();if(n&&e.substr(-n.length).toLowerCase()===n)return!0}return!1}function dy(e,t,i){return!e.isSymbolicLink()&&!e.isFile()?!1:vI(t,i)}function fy(e,t,i){py.stat(e,function(r,n){i(r,r?!1:dy(n,e,t))})}function yI(e,t){return dy(py.statSync(e),e,t)}});var by=L((v3,yy)=>{"use strict";yy.exports=xy;xy.sync=bI;var gy=require("fs");function xy(e,t,i){gy.stat(e,function(r,n){i(r,r?!1:vy(n,t))})}function bI(e,t){return vy(gy.statSync(e),t)}function vy(e,t){return e.isFile()&&wI(e,t)}function wI(e,t){var i=e.mode,r=e.uid,n=e.gid,s=t.uid!==void 0?t.uid:process.getuid&&process.getuid(),o=t.gid!==void 0?t.gid:process.getgid&&process.getgid(),a=parseInt("100",8),c=parseInt("010",8),u=parseInt("001",8),m=a|c,g=i&u||i&c&&n===o||i&a&&r===s||i&m&&s===0;return g}});var Ey=L((b3,wy)=>{"use strict";var y3=require("fs"),ws;process.platform==="win32"||global.TESTING_WINDOWS?ws=my():ws=by();wy.exports=mu;mu.sync=EI;function mu(e,t,i){if(typeof t=="function"&&(i=t,t={}),!i){if(typeof Promise!="function")throw new TypeError("callback not provided");return new Promise(function(r,n){mu(e,t||{},function(s,o){s?n(s):r(o)})})}ws(e,t||{},function(r,n){r&&(r.code==="EACCES"||t&&t.ignoreErrors)&&(r=null,n=!1),i(r,n)})}function EI(e,t){try{return ws.sync(e,t||{})}catch(i){if(t&&t.ignoreErrors||i.code==="EACCES")return!1;throw i}}});var Dy=L((w3,Ay)=>{"use strict";var ir=process.platform==="win32"||process.env.OSTYPE==="cygwin"||process.env.OSTYPE==="msys",_y=require("path"),_I=ir?";":":",Ty=Ey(),Sy=e=>Object.assign(new Error(`not found: ${e}`),{code:"ENOENT"}),Cy=(e,t)=>{let i=t.colon||_I,r=e.match(/\//)||ir&&e.match(/\\/)?[""]:[...ir?[process.cwd()]:[],...(t.path||process.env.PATH||"").split(i)],n=ir?t.pathExt||process.env.PATHEXT||".EXE;.CMD;.BAT;.COM":"",s=ir?n.split(i):[""];return ir&&e.indexOf(".")!==-1&&s[0]!==""&&s.unshift(""),{pathEnv:r,pathExt:s,pathExtExe:n}},Oy=(e,t,i)=>{typeof t=="function"&&(i=t,t={}),t||(t={});let{pathEnv:r,pathExt:n,pathExtExe:s}=Cy(e,t),o=[],a=u=>new Promise((m,g)=>{if(u===r.length)return t.all&&o.length?m(o):g(Sy(e));let x=r[u],p=/^".*"$/.test(x)?x.slice(1,-1):x,h=_y.join(p,e),v=!p&&/^\.[\\\/]/.test(e)?e.slice(0,2)+h:h;m(c(v,u,0))}),c=(u,m,g)=>new Promise((x,p)=>{if(g===n.length)return x(a(m+1));let h=n[g];Ty(u+h,{pathExt:s},(v,E)=>{if(!v&&E)if(t.all)o.push(u+h);else return x(u+h);return x(c(u,m,g+1))})});return i?a(0).then(u=>i(null,u),i):a(0)},TI=(e,t)=>{t=t||{};let{pathEnv:i,pathExt:r,pathExtExe:n}=Cy(e,t),s=[];for(let o=0;o<i.length;o++){let a=i[o],c=/^".*"$/.test(a)?a.slice(1,-1):a,u=_y.join(c,e),m=!c&&/^\.[\\\/]/.test(e)?e.slice(0,2)+u:u;for(let g=0;g<r.length;g++){let x=m+r[g];try{if(Ty.sync(x,{pathExt:n}))if(t.all)s.push(x);else return x}catch{}}}if(t.all&&s.length)return s;if(t.nothrow)return null;throw Sy(e)};Ay.exports=Oy;Oy.sync=TI});var qy=L((_3,My)=>{"use strict";function Ny(e){return Array.isArray(e)?e:[e]}var bu="",Ly=" ",vu="\\",NI=/^\s+$/,LI=/(?:[^\\]|^)\\$/,kI=/^\\!/,RI=/^\\#/,PI=/\r?\n/g,FI=/^\.*\/|^\.+$/,yu="/",Py="node-ignore";typeof Symbol<"u"&&(Py=Symbol.for("node-ignore"));var ky=Py,jI=(e,t,i)=>Object.defineProperty(e,t,{value:i}),MI=/([0-z])-([0-z])/g,Fy=()=>!1,qI=e=>e.replace(MI,(t,i,r)=>i.charCodeAt(0)<=r.charCodeAt(0)?t:bu),BI=e=>{let{length:t}=e;return e.slice(0,t-t%2)},UI=[[/^\uFEFF/,()=>bu],[/((?:\\\\)*?)(\\?\s+)$/,(e,t,i)=>t+(i.indexOf("\\")===0?Ly:bu)],[/(\\+?)\s/g,(e,t)=>{let{length:i}=t;return t.slice(0,i-i%2)+Ly}],[/[\\$.|*+(){^]/g,e=>`\\${e}`],[/(?!\\)\?/g,()=>"[^/]"],[/^\//,()=>"^"],[/\//g,()=>"\\/"],[/^\^*\\\*\\\*\\\//,()=>"^(?:.*\\/)?"],[/^(?=[^^])/,function(){return/\/(?!$)/.test(this)?"^":"(?:^|\\/)"}],[/\\\/\\\*\\\*(?=\\\/|$)/g,(e,t,i)=>t+6<i.length?"(?:\\/[^\\/]+)*":"\\/.+"],[/(^|[^\\]+)(\\\*)+(?=.+)/g,(e,t,i)=>{let r=i.replace(/\\\*/g,"[^\\/]*");return t+r}],[/\\\\\\(?=[$.|*+(){^])/g,()=>vu],[/\\\\/g,()=>vu],[/(\\)?\[([^\]/]*?)(\\*)($|\])/g,(e,t,i,r,n)=>t===vu?`\\[${i}${BI(r)}${n}`:n==="]"&&r.length%2===0?`[${qI(i)}${r}]`:"[]"],[/(?:[^*])$/,e=>/\/$/.test(e)?`${e}$`:`${e}(?=$|\\/$)`],[/(\^|\\\/)?\\\*$/,(e,t)=>`${t?`${t}[^/]+`:"[^/]*"}(?=$|\\/$)`]],Ry=Object.create(null),$I=(e,t)=>{let i=Ry[e];return i||(i=UI.reduce((r,[n,s])=>r.replace(n,s.bind(e)),e),Ry[e]=i),t?new RegExp(i,"i"):new RegExp(i)},_u=e=>typeof e=="string",zI=e=>e&&_u(e)&&!NI.test(e)&&!LI.test(e)&&e.indexOf("#")!==0,HI=e=>e.split(PI),wu=class{constructor(t,i,r,n){this.origin=t,this.pattern=i,this.negative=r,this.regex=n}},GI=(e,t)=>{let i=e,r=!1;e.indexOf("!")===0&&(r=!0,e=e.substr(1)),e=e.replace(kI,"!").replace(RI,"#");let n=$I(e,t);return new wu(i,e,r,n)},VI=(e,t)=>{throw new t(e)},$t=(e,t,i)=>_u(e)?e?$t.isNotRelative(e)?i(`path should be a \`path.relative()\`d string, but got "${t}"`,RangeError):!0:i("path must not be empty",TypeError):i(`path must be a string, but got \`${t}\``,TypeError),jy=e=>FI.test(e);$t.isNotRelative=jy;$t.convert=e=>e;var Eu=class{constructor({ignorecase:t=!0,ignoreCase:i=t,allowRelativePaths:r=!1}={}){jI(this,ky,!0),this._rules=[],this._ignoreCase=i,this._allowRelativePaths=r,this._initCache()}_initCache(){this._ignoreCache=Object.create(null),this._testCache=Object.create(null)}_addPattern(t){if(t&&t[ky]){this._rules=this._rules.concat(t._rules),this._added=!0;return}if(zI(t)){let i=GI(t,this._ignoreCase);this._added=!0,this._rules.push(i)}}add(t){return this._added=!1,Ny(_u(t)?HI(t):t).forEach(this._addPattern,this),this._added&&this._initCache(),this}addPattern(t){return this.add(t)}_testOne(t,i){let r=!1,n=!1;return this._rules.forEach(s=>{let{negative:o}=s;if(n===o&&r!==n||o&&!r&&!n&&!i)return;s.regex.test(t)&&(r=!o,n=o)}),{ignored:r,unignored:n}}_test(t,i,r,n){let s=t&&$t.convert(t);return $t(s,t,this._allowRelativePaths?Fy:VI),this._t(s,i,r,n)}_t(t,i,r,n){if(t in i)return i[t];if(n||(n=t.split(yu)),n.pop(),!n.length)return i[t]=this._testOne(t,r);let s=this._t(n.join(yu)+yu,i,r,n);return i[t]=s.ignored?s:this._testOne(t,r)}ignores(t){return this._test(t,this._ignoreCache,!1).ignored}createFilter(){return t=>!this.ignores(t)}filter(t){return Ny(t).filter(this.createFilter())}test(t){return this._test(t,this._testCache,!0)}},Es=e=>new Eu(e),XI=e=>$t(e&&$t.convert(e),e,Fy);Es.isPathValid=XI;Es.default=Es;My.exports=Es;if(typeof process<"u"&&(process.env&&process.env.IGNORE_TEST_WIN32||process.platform==="win32")){let e=i=>/^\\\\\?\\/.test(i)||/["<>|\u0000-\u001F]+/u.test(i)?i:i.replace(/\\/g,"/");$t.convert=e;let t=/^[a-z]:\//i;$t.isNotRelative=i=>t.test(i)||jy(i)}});var Ps=L(ju=>{"use strict";(function(){ju.defaults={"0.1":{explicitCharkey:!1,trim:!0,normalize:!0,normalizeTags:!1,attrkey:"@",charkey:"#",explicitArray:!1,ignoreAttrs:!1,mergeAttrs:!1,explicitRoot:!1,validator:null,xmlns:!1,explicitChildren:!1,childkey:"@@",charsAsChildren:!1,includeWhiteChars:!1,async:!1,strict:!0,attrNameProcessors:null,attrValueProcessors:null,tagNameProcessors:null,valueProcessors:null,emptyTag:""},"0.2":{explicitCharkey:!1,trim:!1,normalize:!1,normalizeTags:!1,attrkey:"$",charkey:"_",explicitArray:!0,ignoreAttrs:!1,mergeAttrs:!1,explicitRoot:!0,validator:null,xmlns:!1,explicitChildren:!1,preserveChildrenOrder:!1,childkey:"$$",charsAsChildren:!1,includeWhiteChars:!1,async:!1,strict:!0,attrNameProcessors:null,attrValueProcessors:null,tagNameProcessors:null,valueProcessors:null,rootName:"root",xmldec:{version:"1.0",encoding:"UTF-8",standalone:!0},doctype:null,renderOpts:{pretty:!0,indent:"  ",newline:`
`},headless:!1,chunkSize:1e4,emptyTag:"",cdata:!1}}}).call(ju)});var Nt=L((Lb,oi)=>{"use strict";(function(){var e,t,i,r,n,s,o,a=[].slice,c={}.hasOwnProperty;e=function(){var u,m,g,x,p,h;if(h=arguments[0],p=2<=arguments.length?a.call(arguments,1):[],n(Object.assign))Object.assign.apply(null,arguments);else for(u=0,g=p.length;u<g;u++)if(x=p[u],x!=null)for(m in x)c.call(x,m)&&(h[m]=x[m]);return h},n=function(u){return!!u&&Object.prototype.toString.call(u)==="[object Function]"},s=function(u){var m;return!!u&&((m=typeof u)=="function"||m==="object")},i=function(u){return n(Array.isArray)?Array.isArray(u):Object.prototype.toString.call(u)==="[object Array]"},r=function(u){var m;if(i(u))return!u.length;for(m in u)if(c.call(u,m))return!1;return!0},o=function(u){var m,g;return s(u)&&(g=Object.getPrototypeOf(u))&&(m=g.constructor)&&typeof m=="function"&&m instanceof m&&Function.prototype.toString.call(m)===Function.prototype.toString.call(Object)},t=function(u){return n(u.valueOf)?u.valueOf():u},oi.exports.assign=e,oi.exports.isFunction=n,oi.exports.isObject=s,oi.exports.isArray=i,oi.exports.isEmpty=r,oi.exports.isPlainObject=o,oi.exports.getValue=t}).call(Lb)});var Mu=L((kb,Rb)=>{"use strict";(function(){var e;Rb.exports=e=function(){function t(){}return t.prototype.hasFeature=function(i,r){return!0},t.prototype.createDocumentType=function(i,r,n){throw new Error("This DOM method is not implemented.")},t.prototype.createDocument=function(i,r,n){throw new Error("This DOM method is not implemented.")},t.prototype.createHTMLDocument=function(i){throw new Error("This DOM method is not implemented.")},t.prototype.getFeature=function(i,r){throw new Error("This DOM method is not implemented.")},t}()}).call(kb)});var jb=L((Pb,Fb)=>{"use strict";(function(){var e;Fb.exports=e=function(){function t(){}return t.prototype.handleError=function(i){throw new Error(i)},t}()}).call(Pb)});var Bb=L((Mb,qb)=>{"use strict";(function(){var e;qb.exports=e=function(){function t(i){this.arr=i||[]}return Object.defineProperty(t.prototype,"length",{get:function(){return this.arr.length}}),t.prototype.item=function(i){return this.arr[i]||null},t.prototype.contains=function(i){return this.arr.indexOf(i)!==-1},t}()}).call(Mb)});var zb=L((Ub,$b)=>{"use strict";(function(){var e,t,i;t=jb(),i=Bb(),$b.exports=e=function(){function r(){var n;this.defaultParams={"canonical-form":!1,"cdata-sections":!1,comments:!1,"datatype-normalization":!1,"element-content-whitespace":!0,entities:!0,"error-handler":new t,infoset:!0,"validate-if-schema":!1,namespaces:!0,"namespace-declarations":!0,"normalize-characters":!1,"schema-location":"","schema-type":"","split-cdata-sections":!0,validate:!1,"well-formed":!0},this.params=n=Object.create(this.defaultParams)}return Object.defineProperty(r.prototype,"parameterNames",{get:function(){return new i(Object.keys(this.defaultParams))}}),r.prototype.getParameter=function(n){return this.params.hasOwnProperty(n)?this.params[n]:null},r.prototype.canSetParameter=function(n,s){return!0},r.prototype.setParameter=function(n,s){return s!=null?this.params[n]=s:delete this.params[n]},r}()}).call(Ub)});var Ae=L((Hb,Gb)=>{"use strict";(function(){Gb.exports={Element:1,Attribute:2,Text:3,CData:4,EntityReference:5,EntityDeclaration:6,ProcessingInstruction:7,Comment:8,Document:9,DocType:10,DocumentFragment:11,NotationDeclaration:12,Declaration:201,Raw:202,AttributeDeclaration:203,ElementDeclaration:204,Dummy:205}}).call(Hb)});var qu=L((Vb,Xb)=>{"use strict";(function(){var e,t,i;e=Ae(),i=ct(),Xb.exports=t=function(){function r(n,s,o){if(this.parent=n,this.parent&&(this.options=this.parent.options,this.stringify=this.parent.stringify),s==null)throw new Error("Missing attribute name. "+this.debugInfo(s));this.name=this.stringify.name(s),this.value=this.stringify.attValue(o),this.type=e.Attribute,this.isId=!1,this.schemaTypeInfo=null}return Object.defineProperty(r.prototype,"nodeType",{get:function(){return this.type}}),Object.defineProperty(r.prototype,"ownerElement",{get:function(){return this.parent}}),Object.defineProperty(r.prototype,"textContent",{get:function(){return this.value},set:function(n){return this.value=n||""}}),Object.defineProperty(r.prototype,"namespaceURI",{get:function(){return""}}),Object.defineProperty(r.prototype,"prefix",{get:function(){return""}}),Object.defineProperty(r.prototype,"localName",{get:function(){return this.name}}),Object.defineProperty(r.prototype,"specified",{get:function(){return!0}}),r.prototype.clone=function(){return Object.create(this)},r.prototype.toString=function(n){return this.options.writer.attribute(this,this.options.writer.filterOptions(n))},r.prototype.debugInfo=function(n){return n=n||this.name,n==null?"parent: <"+this.parent.name+">":"attribute: {"+n+"}, parent: <"+this.parent.name+">"},r.prototype.isEqualNode=function(n){return!(n.namespaceURI!==this.namespaceURI||n.prefix!==this.prefix||n.localName!==this.localName||n.value!==this.value)},r}()}).call(Vb)});var Fs=L((Yb,Wb)=>{"use strict";(function(){var e;Wb.exports=e=function(){function t(i){this.nodes=i}return Object.defineProperty(t.prototype,"length",{get:function(){return Object.keys(this.nodes).length||0}}),t.prototype.clone=function(){return this.nodes=null},t.prototype.getNamedItem=function(i){return this.nodes[i]},t.prototype.setNamedItem=function(i){var r;return r=this.nodes[i.nodeName],this.nodes[i.nodeName]=i,r||null},t.prototype.removeNamedItem=function(i){var r;return r=this.nodes[i],delete this.nodes[i],r||null},t.prototype.item=function(i){return this.nodes[Object.keys(this.nodes)[i]]||null},t.prototype.getNamedItemNS=function(i,r){throw new Error("This DOM method is not implemented.")},t.prototype.setNamedItemNS=function(i){throw new Error("This DOM method is not implemented.")},t.prototype.removeNamedItemNS=function(i,r){throw new Error("This DOM method is not implemented.")},t}()}).call(Yb)});var js=L((Kb,Jb)=>{"use strict";(function(){var e,t,i,r,n,s,o,a,c,u=function(g,x){for(var p in x)m.call(x,p)&&(g[p]=x[p]);function h(){this.constructor=g}return h.prototype=x.prototype,g.prototype=new h,g.__super__=x.prototype,g},m={}.hasOwnProperty;c=Nt(),a=c.isObject,o=c.isFunction,s=c.getValue,n=ct(),e=Ae(),t=qu(),r=Fs(),Jb.exports=i=function(g){u(x,g);function x(p,h,v){var E,S,_,l;if(x.__super__.constructor.call(this,p),h==null)throw new Error("Missing element name. "+this.debugInfo());if(this.name=this.stringify.name(h),this.type=e.Element,this.attribs={},this.schemaTypeInfo=null,v!=null&&this.attribute(v),p.type===e.Document&&(this.isRoot=!0,this.documentObject=p,p.rootObject=this,p.children)){for(l=p.children,S=0,_=l.length;S<_;S++)if(E=l[S],E.type===e.DocType){E.name=this.name;break}}}return Object.defineProperty(x.prototype,"tagName",{get:function(){return this.name}}),Object.defineProperty(x.prototype,"namespaceURI",{get:function(){return""}}),Object.defineProperty(x.prototype,"prefix",{get:function(){return""}}),Object.defineProperty(x.prototype,"localName",{get:function(){return this.name}}),Object.defineProperty(x.prototype,"id",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(x.prototype,"className",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(x.prototype,"classList",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(x.prototype,"attributes",{get:function(){return(!this.attributeMap||!this.attributeMap.nodes)&&(this.attributeMap=new r(this.attribs)),this.attributeMap}}),x.prototype.clone=function(){var p,h,v,E;v=Object.create(this),v.isRoot&&(v.documentObject=null),v.attribs={},E=this.attribs;for(h in E)m.call(E,h)&&(p=E[h],v.attribs[h]=p.clone());return v.children=[],this.children.forEach(function(S){var _;return _=S.clone(),_.parent=v,v.children.push(_)}),v},x.prototype.attribute=function(p,h){var v,E;if(p!=null&&(p=s(p)),a(p))for(v in p)m.call(p,v)&&(E=p[v],this.attribute(v,E));else o(h)&&(h=h.apply()),this.options.keepNullAttributes&&h==null?this.attribs[p]=new t(this,p,""):h!=null&&(this.attribs[p]=new t(this,p,h));return this},x.prototype.removeAttribute=function(p){var h,v,E;if(p==null)throw new Error("Missing attribute name. "+this.debugInfo());if(p=s(p),Array.isArray(p))for(v=0,E=p.length;v<E;v++)h=p[v],delete this.attribs[h];else delete this.attribs[p];return this},x.prototype.toString=function(p){return this.options.writer.element(this,this.options.writer.filterOptions(p))},x.prototype.att=function(p,h){return this.attribute(p,h)},x.prototype.a=function(p,h){return this.attribute(p,h)},x.prototype.getAttribute=function(p){return this.attribs.hasOwnProperty(p)?this.attribs[p].value:null},x.prototype.setAttribute=function(p,h){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getAttributeNode=function(p){return this.attribs.hasOwnProperty(p)?this.attribs[p]:null},x.prototype.setAttributeNode=function(p){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.removeAttributeNode=function(p){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getElementsByTagName=function(p){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getAttributeNS=function(p,h){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.setAttributeNS=function(p,h,v){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.removeAttributeNS=function(p,h){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getAttributeNodeNS=function(p,h){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.setAttributeNodeNS=function(p){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getElementsByTagNameNS=function(p,h){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.hasAttribute=function(p){return this.attribs.hasOwnProperty(p)},x.prototype.hasAttributeNS=function(p,h){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.setIdAttribute=function(p,h){return this.attribs.hasOwnProperty(p)?this.attribs[p].isId:h},x.prototype.setIdAttributeNS=function(p,h,v){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.setIdAttributeNode=function(p,h){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getElementsByTagName=function(p){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getElementsByTagNameNS=function(p,h){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getElementsByClassName=function(p){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.isEqualNode=function(p){var h,v,E;if(!x.__super__.isEqualNode.apply(this,arguments).isEqualNode(p)||p.namespaceURI!==this.namespaceURI||p.prefix!==this.prefix||p.localName!==this.localName||p.attribs.length!==this.attribs.length)return!1;for(h=v=0,E=this.attribs.length-1;0<=E?v<=E:v>=E;h=0<=E?++v:--v)if(!this.attribs[h].isEqualNode(p.attribs[h]))return!1;return!0},x}(n)}).call(Kb)});var en=L((Zb,Qb)=>{"use strict";(function(){var e,t,i=function(n,s){for(var o in s)r.call(s,o)&&(n[o]=s[o]);function a(){this.constructor=n}return a.prototype=s.prototype,n.prototype=new a,n.__super__=s.prototype,n},r={}.hasOwnProperty;t=ct(),Qb.exports=e=function(n){i(s,n);function s(o){s.__super__.constructor.call(this,o),this.value=""}return Object.defineProperty(s.prototype,"data",{get:function(){return this.value},set:function(o){return this.value=o||""}}),Object.defineProperty(s.prototype,"length",{get:function(){return this.value.length}}),Object.defineProperty(s.prototype,"textContent",{get:function(){return this.value},set:function(o){return this.value=o||""}}),s.prototype.clone=function(){return Object.create(this)},s.prototype.substringData=function(o,a){throw new Error("This DOM method is not implemented."+this.debugInfo())},s.prototype.appendData=function(o){throw new Error("This DOM method is not implemented."+this.debugInfo())},s.prototype.insertData=function(o,a){throw new Error("This DOM method is not implemented."+this.debugInfo())},s.prototype.deleteData=function(o,a){throw new Error("This DOM method is not implemented."+this.debugInfo())},s.prototype.replaceData=function(o,a,c){throw new Error("This DOM method is not implemented."+this.debugInfo())},s.prototype.isEqualNode=function(o){return!(!s.__super__.isEqualNode.apply(this,arguments).isEqualNode(o)||o.data!==this.data)},s}(t)}).call(Zb)});var Ms=L((ew,tw)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;e=Ae(),i=en(),tw.exports=t=function(s){r(o,s);function o(a,c){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing CDATA text. "+this.debugInfo());this.name="#cdata-section",this.type=e.CData,this.value=this.stringify.cdata(c)}return o.prototype.clone=function(){return Object.create(this)},o.prototype.toString=function(a){return this.options.writer.cdata(this,this.options.writer.filterOptions(a))},o}(i)}).call(ew)});var qs=L((iw,rw)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;e=Ae(),t=en(),rw.exports=i=function(s){r(o,s);function o(a,c){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing comment text. "+this.debugInfo());this.name="#comment",this.type=e.Comment,this.value=this.stringify.comment(c)}return o.prototype.clone=function(){return Object.create(this)},o.prototype.toString=function(a){return this.options.writer.comment(this,this.options.writer.filterOptions(a))},o}(t)}).call(iw)});var Bs=L((nw,sw)=>{"use strict";(function(){var e,t,i,r,n=function(o,a){for(var c in a)s.call(a,c)&&(o[c]=a[c]);function u(){this.constructor=o}return u.prototype=a.prototype,o.prototype=new u,o.__super__=a.prototype,o},s={}.hasOwnProperty;r=Nt().isObject,i=ct(),e=Ae(),sw.exports=t=function(o){n(a,o);function a(c,u,m,g){var x;a.__super__.constructor.call(this,c),r(u)&&(x=u,u=x.version,m=x.encoding,g=x.standalone),u||(u="1.0"),this.type=e.Declaration,this.version=this.stringify.xmlVersion(u),m!=null&&(this.encoding=this.stringify.xmlEncoding(m)),g!=null&&(this.standalone=this.stringify.xmlStandalone(g))}return a.prototype.toString=function(c){return this.options.writer.declaration(this,this.options.writer.filterOptions(c))},a}(i)}).call(nw)});var Us=L((ow,aw)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;i=ct(),e=Ae(),aw.exports=t=function(s){r(o,s);function o(a,c,u,m,g,x){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing DTD element name. "+this.debugInfo());if(u==null)throw new Error("Missing DTD attribute name. "+this.debugInfo(c));if(!m)throw new Error("Missing DTD attribute type. "+this.debugInfo(c));if(!g)throw new Error("Missing DTD attribute default. "+this.debugInfo(c));if(g.indexOf("#")!==0&&(g="#"+g),!g.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/))throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. "+this.debugInfo(c));if(x&&!g.match(/^(#FIXED|#DEFAULT)$/))throw new Error("Default value only applies to #FIXED or #DEFAULT. "+this.debugInfo(c));this.elementName=this.stringify.name(c),this.type=e.AttributeDeclaration,this.attributeName=this.stringify.name(u),this.attributeType=this.stringify.dtdAttType(m),x&&(this.defaultValue=this.stringify.dtdAttDefault(x)),this.defaultValueType=g}return o.prototype.toString=function(a){return this.options.writer.dtdAttList(this,this.options.writer.filterOptions(a))},o}(i)}).call(ow)});var $s=L((cw,uw)=>{"use strict";(function(){var e,t,i,r,n=function(o,a){for(var c in a)s.call(a,c)&&(o[c]=a[c]);function u(){this.constructor=o}return u.prototype=a.prototype,o.prototype=new u,o.__super__=a.prototype,o},s={}.hasOwnProperty;r=Nt().isObject,i=ct(),e=Ae(),uw.exports=t=function(o){n(a,o);function a(c,u,m,g){if(a.__super__.constructor.call(this,c),m==null)throw new Error("Missing DTD entity name. "+this.debugInfo(m));if(g==null)throw new Error("Missing DTD entity value. "+this.debugInfo(m));if(this.pe=!!u,this.name=this.stringify.name(m),this.type=e.EntityDeclaration,!r(g))this.value=this.stringify.dtdEntityValue(g),this.internal=!0;else{if(!g.pubID&&!g.sysID)throw new Error("Public and/or system identifiers are required for an external entity. "+this.debugInfo(m));if(g.pubID&&!g.sysID)throw new Error("System identifier is required for a public external entity. "+this.debugInfo(m));if(this.internal=!1,g.pubID!=null&&(this.pubID=this.stringify.dtdPubID(g.pubID)),g.sysID!=null&&(this.sysID=this.stringify.dtdSysID(g.sysID)),g.nData!=null&&(this.nData=this.stringify.dtdNData(g.nData)),this.pe&&this.nData)throw new Error("Notation declaration is not allowed in a parameter entity. "+this.debugInfo(m))}}return Object.defineProperty(a.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(a.prototype,"systemId",{get:function(){return this.sysID}}),Object.defineProperty(a.prototype,"notationName",{get:function(){return this.nData||null}}),Object.defineProperty(a.prototype,"inputEncoding",{get:function(){return null}}),Object.defineProperty(a.prototype,"xmlEncoding",{get:function(){return null}}),Object.defineProperty(a.prototype,"xmlVersion",{get:function(){return null}}),a.prototype.toString=function(c){return this.options.writer.dtdEntity(this,this.options.writer.filterOptions(c))},a}(i)}).call(cw)});var zs=L((lw,pw)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;i=ct(),e=Ae(),pw.exports=t=function(s){r(o,s);function o(a,c,u){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing DTD element name. "+this.debugInfo());u||(u="(#PCDATA)"),Array.isArray(u)&&(u="("+u.join(",")+")"),this.name=this.stringify.name(c),this.type=e.ElementDeclaration,this.value=this.stringify.dtdElementValue(u)}return o.prototype.toString=function(a){return this.options.writer.dtdElement(this,this.options.writer.filterOptions(a))},o}(i)}).call(lw)});var Hs=L((dw,fw)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;i=ct(),e=Ae(),fw.exports=t=function(s){r(o,s);function o(a,c,u){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing DTD notation name. "+this.debugInfo(c));if(!u.pubID&&!u.sysID)throw new Error("Public or system identifiers are required for an external entity. "+this.debugInfo(c));this.name=this.stringify.name(c),this.type=e.NotationDeclaration,u.pubID!=null&&(this.pubID=this.stringify.dtdPubID(u.pubID)),u.sysID!=null&&(this.sysID=this.stringify.dtdSysID(u.sysID))}return Object.defineProperty(o.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(o.prototype,"systemId",{get:function(){return this.sysID}}),o.prototype.toString=function(a){return this.options.writer.dtdNotation(this,this.options.writer.filterOptions(a))},o}(i)}).call(dw)});var Gs=L((hw,mw)=>{"use strict";(function(){var e,t,i,r,n,s,o,a,c,u=function(g,x){for(var p in x)m.call(x,p)&&(g[p]=x[p]);function h(){this.constructor=g}return h.prototype=x.prototype,g.prototype=new h,g.__super__=x.prototype,g},m={}.hasOwnProperty;c=Nt().isObject,a=ct(),e=Ae(),t=Us(),r=$s(),i=zs(),n=Hs(),o=Fs(),mw.exports=s=function(g){u(x,g);function x(p,h,v){var E,S,_,l,d,f;if(x.__super__.constructor.call(this,p),this.type=e.DocType,p.children){for(l=p.children,S=0,_=l.length;S<_;S++)if(E=l[S],E.type===e.Element){this.name=E.name;break}}this.documentObject=p,c(h)&&(d=h,h=d.pubID,v=d.sysID),v==null&&(f=[h,v],v=f[0],h=f[1]),h!=null&&(this.pubID=this.stringify.dtdPubID(h)),v!=null&&(this.sysID=this.stringify.dtdSysID(v))}return Object.defineProperty(x.prototype,"entities",{get:function(){var p,h,v,E,S;for(E={},S=this.children,h=0,v=S.length;h<v;h++)p=S[h],p.type===e.EntityDeclaration&&!p.pe&&(E[p.name]=p);return new o(E)}}),Object.defineProperty(x.prototype,"notations",{get:function(){var p,h,v,E,S;for(E={},S=this.children,h=0,v=S.length;h<v;h++)p=S[h],p.type===e.NotationDeclaration&&(E[p.name]=p);return new o(E)}}),Object.defineProperty(x.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(x.prototype,"systemId",{get:function(){return this.sysID}}),Object.defineProperty(x.prototype,"internalSubset",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),x.prototype.element=function(p,h){var v;return v=new i(this,p,h),this.children.push(v),this},x.prototype.attList=function(p,h,v,E,S){var _;return _=new t(this,p,h,v,E,S),this.children.push(_),this},x.prototype.entity=function(p,h){var v;return v=new r(this,!1,p,h),this.children.push(v),this},x.prototype.pEntity=function(p,h){var v;return v=new r(this,!0,p,h),this.children.push(v),this},x.prototype.notation=function(p,h){var v;return v=new n(this,p,h),this.children.push(v),this},x.prototype.toString=function(p){return this.options.writer.docType(this,this.options.writer.filterOptions(p))},x.prototype.ele=function(p,h){return this.element(p,h)},x.prototype.att=function(p,h,v,E,S){return this.attList(p,h,v,E,S)},x.prototype.ent=function(p,h){return this.entity(p,h)},x.prototype.pent=function(p,h){return this.pEntity(p,h)},x.prototype.not=function(p,h){return this.notation(p,h)},x.prototype.up=function(){return this.root()||this.documentObject},x.prototype.isEqualNode=function(p){return!(!x.__super__.isEqualNode.apply(this,arguments).isEqualNode(p)||p.name!==this.name||p.publicId!==this.publicId||p.systemId!==this.systemId)},x}(a)}).call(hw)});var Vs=L((gw,xw)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;e=Ae(),t=ct(),xw.exports=i=function(s){r(o,s);function o(a,c){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing raw text. "+this.debugInfo());this.type=e.Raw,this.value=this.stringify.raw(c)}return o.prototype.clone=function(){return Object.create(this)},o.prototype.toString=function(a){return this.options.writer.raw(this,this.options.writer.filterOptions(a))},o}(t)}).call(gw)});var Xs=L((vw,yw)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;e=Ae(),t=en(),yw.exports=i=function(s){r(o,s);function o(a,c){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing element text. "+this.debugInfo());this.name="#text",this.type=e.Text,this.value=this.stringify.text(c)}return Object.defineProperty(o.prototype,"isElementContentWhitespace",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(o.prototype,"wholeText",{get:function(){var a,c,u;for(u="",c=this.previousSibling;c;)u=c.data+u,c=c.previousSibling;for(u+=this.data,a=this.nextSibling;a;)u=u+a.data,a=a.nextSibling;return u}}),o.prototype.clone=function(){return Object.create(this)},o.prototype.toString=function(a){return this.options.writer.text(this,this.options.writer.filterOptions(a))},o.prototype.splitText=function(a){throw new Error("This DOM method is not implemented."+this.debugInfo())},o.prototype.replaceWholeText=function(a){throw new Error("This DOM method is not implemented."+this.debugInfo())},o}(t)}).call(vw)});var Ys=L((bw,ww)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;e=Ae(),t=en(),ww.exports=i=function(s){r(o,s);function o(a,c,u){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing instruction target. "+this.debugInfo());this.type=e.ProcessingInstruction,this.target=this.stringify.insTarget(c),this.name=this.target,u&&(this.value=this.stringify.insValue(u))}return o.prototype.clone=function(){return Object.create(this)},o.prototype.toString=function(a){return this.options.writer.processingInstruction(this,this.options.writer.filterOptions(a))},o.prototype.isEqualNode=function(a){return!(!o.__super__.isEqualNode.apply(this,arguments).isEqualNode(a)||a.target!==this.target)},o}(t)}).call(bw)});var Bu=L((Ew,_w)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;i=ct(),e=Ae(),_w.exports=t=function(s){r(o,s);function o(a){o.__super__.constructor.call(this,a),this.type=e.Dummy}return o.prototype.clone=function(){return Object.create(this)},o.prototype.toString=function(a){return""},o}(i)}).call(Ew)});var Cw=L((Tw,Sw)=>{"use strict";(function(){var e;Sw.exports=e=function(){function t(i){this.nodes=i}return Object.defineProperty(t.prototype,"length",{get:function(){return this.nodes.length||0}}),t.prototype.clone=function(){return this.nodes=null},t.prototype.item=function(i){return this.nodes[i]||null},t}()}).call(Tw)});var Dw=L((Ow,Aw)=>{"use strict";(function(){Aw.exports={Disconnected:1,Preceding:2,Following:4,Contains:8,ContainedBy:16,ImplementationSpecific:32}}).call(Ow)});var ct=L((Iw,Nw)=>{"use strict";(function(){var e,t,i,r,n,s,o,a,c,u,m,g,x,p,h,v,E,S,_,l={}.hasOwnProperty;_=Nt(),S=_.isObject,E=_.isFunction,v=_.isEmpty,h=_.getValue,a=null,i=null,r=null,n=null,s=null,x=null,p=null,g=null,o=null,t=null,m=null,c=null,e=null,Nw.exports=u=function(){function d(f){this.parent=f,this.parent&&(this.options=this.parent.options,this.stringify=this.parent.stringify),this.value=null,this.children=[],this.baseURI=null,a||(a=js(),i=Ms(),r=qs(),n=Bs(),s=Gs(),x=Vs(),p=Xs(),g=Ys(),o=Bu(),t=Ae(),m=Cw(),c=Fs(),e=Dw())}return Object.defineProperty(d.prototype,"nodeName",{get:function(){return this.name}}),Object.defineProperty(d.prototype,"nodeType",{get:function(){return this.type}}),Object.defineProperty(d.prototype,"nodeValue",{get:function(){return this.value}}),Object.defineProperty(d.prototype,"parentNode",{get:function(){return this.parent}}),Object.defineProperty(d.prototype,"childNodes",{get:function(){return(!this.childNodeList||!this.childNodeList.nodes)&&(this.childNodeList=new m(this.children)),this.childNodeList}}),Object.defineProperty(d.prototype,"firstChild",{get:function(){return this.children[0]||null}}),Object.defineProperty(d.prototype,"lastChild",{get:function(){return this.children[this.children.length-1]||null}}),Object.defineProperty(d.prototype,"previousSibling",{get:function(){var f;return f=this.parent.children.indexOf(this),this.parent.children[f-1]||null}}),Object.defineProperty(d.prototype,"nextSibling",{get:function(){var f;return f=this.parent.children.indexOf(this),this.parent.children[f+1]||null}}),Object.defineProperty(d.prototype,"ownerDocument",{get:function(){return this.document()||null}}),Object.defineProperty(d.prototype,"textContent",{get:function(){var f,w,O,y,A;if(this.nodeType===t.Element||this.nodeType===t.DocumentFragment){for(A="",y=this.children,w=0,O=y.length;w<O;w++)f=y[w],f.textContent&&(A+=f.textContent);return A}else return null},set:function(f){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),d.prototype.setParent=function(f){var w,O,y,A,C;for(this.parent=f,f&&(this.options=f.options,this.stringify=f.stringify),A=this.children,C=[],O=0,y=A.length;O<y;O++)w=A[O],C.push(w.setParent(this));return C},d.prototype.element=function(f,w,O){var y,A,C,I,R,F,G,K,$,z,j;if(F=null,w===null&&O==null&&($=[{},null],w=$[0],O=$[1]),w==null&&(w={}),w=h(w),S(w)||(z=[w,O],O=z[0],w=z[1]),f!=null&&(f=h(f)),Array.isArray(f))for(C=0,G=f.length;C<G;C++)A=f[C],F=this.element(A);else if(E(f))F=this.element(f.apply());else if(S(f)){for(R in f)if(l.call(f,R))if(j=f[R],E(j)&&(j=j.apply()),!this.options.ignoreDecorators&&this.stringify.convertAttKey&&R.indexOf(this.stringify.convertAttKey)===0)F=this.attribute(R.substr(this.stringify.convertAttKey.length),j);else if(!this.options.separateArrayItems&&Array.isArray(j)&&v(j))F=this.dummy();else if(S(j)&&v(j))F=this.element(R);else if(!this.options.keepNullNodes&&j==null)F=this.dummy();else if(!this.options.separateArrayItems&&Array.isArray(j))for(I=0,K=j.length;I<K;I++)A=j[I],y={},y[R]=A,F=this.element(y);else S(j)?!this.options.ignoreDecorators&&this.stringify.convertTextKey&&R.indexOf(this.stringify.convertTextKey)===0?F=this.element(j):(F=this.element(R),F.element(j)):F=this.element(R,j)}else!this.options.keepNullNodes&&O===null?F=this.dummy():!this.options.ignoreDecorators&&this.stringify.convertTextKey&&f.indexOf(this.stringify.convertTextKey)===0?F=this.text(O):!this.options.ignoreDecorators&&this.stringify.convertCDataKey&&f.indexOf(this.stringify.convertCDataKey)===0?F=this.cdata(O):!this.options.ignoreDecorators&&this.stringify.convertCommentKey&&f.indexOf(this.stringify.convertCommentKey)===0?F=this.comment(O):!this.options.ignoreDecorators&&this.stringify.convertRawKey&&f.indexOf(this.stringify.convertRawKey)===0?F=this.raw(O):!this.options.ignoreDecorators&&this.stringify.convertPIKey&&f.indexOf(this.stringify.convertPIKey)===0?F=this.instruction(f.substr(this.stringify.convertPIKey.length),O):F=this.node(f,w,O);if(F==null)throw new Error("Could not create any elements with: "+f+". "+this.debugInfo());return F},d.prototype.insertBefore=function(f,w,O){var y,A,C,I,R;if(f?.type)return C=f,I=w,C.setParent(this),I?(A=children.indexOf(I),R=children.splice(A),children.push(C),Array.prototype.push.apply(children,R)):children.push(C),C;if(this.isRoot)throw new Error("Cannot insert elements at root level. "+this.debugInfo(f));return A=this.parent.children.indexOf(this),R=this.parent.children.splice(A),y=this.parent.element(f,w,O),Array.prototype.push.apply(this.parent.children,R),y},d.prototype.insertAfter=function(f,w,O){var y,A,C;if(this.isRoot)throw new Error("Cannot insert elements at root level. "+this.debugInfo(f));return A=this.parent.children.indexOf(this),C=this.parent.children.splice(A+1),y=this.parent.element(f,w,O),Array.prototype.push.apply(this.parent.children,C),y},d.prototype.remove=function(){var f,w;if(this.isRoot)throw new Error("Cannot remove the root element. "+this.debugInfo());return f=this.parent.children.indexOf(this),[].splice.apply(this.parent.children,[f,f-f+1].concat(w=[])),this.parent},d.prototype.node=function(f,w,O){var y,A;return f!=null&&(f=h(f)),w||(w={}),w=h(w),S(w)||(A=[w,O],O=A[0],w=A[1]),y=new a(this,f,w),O!=null&&y.text(O),this.children.push(y),y},d.prototype.text=function(f){var w;return S(f)&&this.element(f),w=new p(this,f),this.children.push(w),this},d.prototype.cdata=function(f){var w;return w=new i(this,f),this.children.push(w),this},d.prototype.comment=function(f){var w;return w=new r(this,f),this.children.push(w),this},d.prototype.commentBefore=function(f){var w,O,y;return O=this.parent.children.indexOf(this),y=this.parent.children.splice(O),w=this.parent.comment(f),Array.prototype.push.apply(this.parent.children,y),this},d.prototype.commentAfter=function(f){var w,O,y;return O=this.parent.children.indexOf(this),y=this.parent.children.splice(O+1),w=this.parent.comment(f),Array.prototype.push.apply(this.parent.children,y),this},d.prototype.raw=function(f){var w;return w=new x(this,f),this.children.push(w),this},d.prototype.dummy=function(){var f;return f=new o(this),f},d.prototype.instruction=function(f,w){var O,y,A,C,I;if(f!=null&&(f=h(f)),w!=null&&(w=h(w)),Array.isArray(f))for(C=0,I=f.length;C<I;C++)O=f[C],this.instruction(O);else if(S(f))for(O in f)l.call(f,O)&&(y=f[O],this.instruction(O,y));else E(w)&&(w=w.apply()),A=new g(this,f,w),this.children.push(A);return this},d.prototype.instructionBefore=function(f,w){var O,y,A;return y=this.parent.children.indexOf(this),A=this.parent.children.splice(y),O=this.parent.instruction(f,w),Array.prototype.push.apply(this.parent.children,A),this},d.prototype.instructionAfter=function(f,w){var O,y,A;return y=this.parent.children.indexOf(this),A=this.parent.children.splice(y+1),O=this.parent.instruction(f,w),Array.prototype.push.apply(this.parent.children,A),this},d.prototype.declaration=function(f,w,O){var y,A;return y=this.document(),A=new n(y,f,w,O),y.children.length===0?y.children.unshift(A):y.children[0].type===t.Declaration?y.children[0]=A:y.children.unshift(A),y.root()||y},d.prototype.dtd=function(f,w){var O,y,A,C,I,R,F,G,K,$;for(y=this.document(),A=new s(y,f,w),K=y.children,C=I=0,F=K.length;I<F;C=++I)if(O=K[C],O.type===t.DocType)return y.children[C]=A,A;for($=y.children,C=R=0,G=$.length;R<G;C=++R)if(O=$[C],O.isRoot)return y.children.splice(C,0,A),A;return y.children.push(A),A},d.prototype.up=function(){if(this.isRoot)throw new Error("The root node has no parent. Use doc() if you need to get the document object.");return this.parent},d.prototype.root=function(){var f;for(f=this;f;){if(f.type===t.Document)return f.rootObject;if(f.isRoot)return f;f=f.parent}},d.prototype.document=function(){var f;for(f=this;f;){if(f.type===t.Document)return f;f=f.parent}},d.prototype.end=function(f){return this.document().end(f)},d.prototype.prev=function(){var f;if(f=this.parent.children.indexOf(this),f<1)throw new Error("Already at the first node. "+this.debugInfo());return this.parent.children[f-1]},d.prototype.next=function(){var f;if(f=this.parent.children.indexOf(this),f===-1||f===this.parent.children.length-1)throw new Error("Already at the last node. "+this.debugInfo());return this.parent.children[f+1]},d.prototype.importDocument=function(f){var w;return w=f.root().clone(),w.parent=this,w.isRoot=!1,this.children.push(w),this},d.prototype.debugInfo=function(f){var w,O;return f=f||this.name,f==null&&!((w=this.parent)!=null&&w.name)?"":f==null?"parent: <"+this.parent.name+">":(O=this.parent)!=null&&O.name?"node: <"+f+">, parent: <"+this.parent.name+">":"node: <"+f+">"},d.prototype.ele=function(f,w,O){return this.element(f,w,O)},d.prototype.nod=function(f,w,O){return this.node(f,w,O)},d.prototype.txt=function(f){return this.text(f)},d.prototype.dat=function(f){return this.cdata(f)},d.prototype.com=function(f){return this.comment(f)},d.prototype.ins=function(f,w){return this.instruction(f,w)},d.prototype.doc=function(){return this.document()},d.prototype.dec=function(f,w,O){return this.declaration(f,w,O)},d.prototype.e=function(f,w,O){return this.element(f,w,O)},d.prototype.n=function(f,w,O){return this.node(f,w,O)},d.prototype.t=function(f){return this.text(f)},d.prototype.d=function(f){return this.cdata(f)},d.prototype.c=function(f){return this.comment(f)},d.prototype.r=function(f){return this.raw(f)},d.prototype.i=function(f,w){return this.instruction(f,w)},d.prototype.u=function(){return this.up()},d.prototype.importXMLBuilder=function(f){return this.importDocument(f)},d.prototype.replaceChild=function(f,w){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.removeChild=function(f){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.appendChild=function(f){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.hasChildNodes=function(){return this.children.length!==0},d.prototype.cloneNode=function(f){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.normalize=function(){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.isSupported=function(f,w){return!0},d.prototype.hasAttributes=function(){return this.attribs.length!==0},d.prototype.compareDocumentPosition=function(f){var w,O;return w=this,w===f?0:this.document()!==f.document()?(O=e.Disconnected|e.ImplementationSpecific,Math.random()<.5?O|=e.Preceding:O|=e.Following,O):w.isAncestor(f)?e.Contains|e.Preceding:w.isDescendant(f)?e.Contains|e.Following:w.isPreceding(f)?e.Preceding:e.Following},d.prototype.isSameNode=function(f){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.lookupPrefix=function(f){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.isDefaultNamespace=function(f){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.lookupNamespaceURI=function(f){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.isEqualNode=function(f){var w,O,y;if(f.nodeType!==this.nodeType||f.children.length!==this.children.length)return!1;for(w=O=0,y=this.children.length-1;0<=y?O<=y:O>=y;w=0<=y?++O:--O)if(!this.children[w].isEqualNode(f.children[w]))return!1;return!0},d.prototype.getFeature=function(f,w){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.setUserData=function(f,w,O){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.getUserData=function(f){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.contains=function(f){return f?f===this||this.isDescendant(f):!1},d.prototype.isDescendant=function(f){var w,O,y,A,C;for(C=this.children,y=0,A=C.length;y<A;y++)if(w=C[y],f===w||(O=w.isDescendant(f),O))return!0;return!1},d.prototype.isAncestor=function(f){return f.isDescendant(this)},d.prototype.isPreceding=function(f){var w,O;return w=this.treePosition(f),O=this.treePosition(this),w===-1||O===-1?!1:w<O},d.prototype.isFollowing=function(f){var w,O;return w=this.treePosition(f),O=this.treePosition(this),w===-1||O===-1?!1:w>O},d.prototype.treePosition=function(f){var w,O;return O=0,w=!1,this.foreachTreeNode(this.document(),function(y){if(O++,!w&&y===f)return w=!0}),w?O:-1},d.prototype.foreachTreeNode=function(f,w){var O,y,A,C,I;for(f||(f=this.document()),C=f.children,y=0,A=C.length;y<A;y++){if(O=C[y],I=w(O))return I;if(I=this.foreachTreeNode(O,w),I)return I}},d}()}).call(Iw)});var Uu=L((Lw,kw)=>{"use strict";(function(){var e,t=function(r,n){return function(){return r.apply(n,arguments)}},i={}.hasOwnProperty;kw.exports=e=function(){function r(n){this.assertLegalName=t(this.assertLegalName,this),this.assertLegalChar=t(this.assertLegalChar,this);var s,o,a;n||(n={}),this.options=n,this.options.version||(this.options.version="1.0"),o=n.stringify||{};for(s in o)i.call(o,s)&&(a=o[s],this[s]=a)}return r.prototype.name=function(n){return this.options.noValidation?n:this.assertLegalName(""+n||"")},r.prototype.text=function(n){return this.options.noValidation?n:this.assertLegalChar(this.textEscape(""+n||""))},r.prototype.cdata=function(n){return this.options.noValidation?n:(n=""+n||"",n=n.replace("]]>","]]]]><![CDATA[>"),this.assertLegalChar(n))},r.prototype.comment=function(n){if(this.options.noValidation)return n;if(n=""+n||"",n.match(/--/))throw new Error("Comment text cannot contain double-hypen: "+n);return this.assertLegalChar(n)},r.prototype.raw=function(n){return this.options.noValidation?n:""+n||""},r.prototype.attValue=function(n){return this.options.noValidation?n:this.assertLegalChar(this.attEscape(n=""+n||""))},r.prototype.insTarget=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.insValue=function(n){if(this.options.noValidation)return n;if(n=""+n||"",n.match(/\?>/))throw new Error("Invalid processing instruction value: "+n);return this.assertLegalChar(n)},r.prototype.xmlVersion=function(n){if(this.options.noValidation)return n;if(n=""+n||"",!n.match(/1\.[0-9]+/))throw new Error("Invalid version number: "+n);return n},r.prototype.xmlEncoding=function(n){if(this.options.noValidation)return n;if(n=""+n||"",!n.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/))throw new Error("Invalid encoding: "+n);return this.assertLegalChar(n)},r.prototype.xmlStandalone=function(n){return this.options.noValidation?n:n?"yes":"no"},r.prototype.dtdPubID=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.dtdSysID=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.dtdElementValue=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.dtdAttType=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.dtdAttDefault=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.dtdEntityValue=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.dtdNData=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.convertAttKey="@",r.prototype.convertPIKey="?",r.prototype.convertTextKey="#text",r.prototype.convertCDataKey="#cdata",r.prototype.convertCommentKey="#comment",r.prototype.convertRawKey="#raw",r.prototype.assertLegalChar=function(n){var s,o;if(this.options.noValidation)return n;if(s="",this.options.version==="1.0"){if(s=/[\0-\x08\x0B\f\x0E-\x1F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,o=n.match(s))throw new Error("Invalid character in string: "+n+" at index "+o.index)}else if(this.options.version==="1.1"&&(s=/[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,o=n.match(s)))throw new Error("Invalid character in string: "+n+" at index "+o.index);return n},r.prototype.assertLegalName=function(n){var s;if(this.options.noValidation)return n;if(this.assertLegalChar(n),s=/^([:A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])([\x2D\.0-:A-Z_a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*$/,!n.match(s))throw new Error("Invalid character in name");return n},r.prototype.textEscape=function(n){var s;return this.options.noValidation?n:(s=this.options.noDoubleEncoding?/(?!&\S+;)&/g:/&/g,n.replace(s,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/\r/g,"&#xD;"))},r.prototype.attEscape=function(n){var s;return this.options.noValidation?n:(s=this.options.noDoubleEncoding?/(?!&\S+;)&/g:/&/g,n.replace(s,"&amp;").replace(/</g,"&lt;").replace(/"/g,"&quot;").replace(/\t/g,"&#x9;").replace(/\n/g,"&#xA;").replace(/\r/g,"&#xD;"))},r}()}).call(Lw)});var tn=L((Rw,Pw)=>{"use strict";(function(){Pw.exports={None:0,OpenTag:1,InsideTag:2,CloseTag:3}}).call(Rw)});var $u=L((Fw,jw)=>{"use strict";(function(){var e,t,i,r,n,s,o,a,c,u,m,g,x,p,h,v,E,S={}.hasOwnProperty;E=Nt().assign,e=Ae(),c=Bs(),u=Gs(),i=Ms(),r=qs(),g=js(),p=Vs(),h=Xs(),x=Ys(),m=Bu(),n=Us(),s=zs(),o=$s(),a=Hs(),t=tn(),jw.exports=v=function(){function _(l){var d,f,w;l||(l={}),this.options=l,f=l.writer||{};for(d in f)S.call(f,d)&&(w=f[d],this["_"+d]=this[d],this[d]=w)}return _.prototype.filterOptions=function(l){var d,f,w,O,y,A,C,I;return l||(l={}),l=E({},this.options,l),d={writer:this},d.pretty=l.pretty||!1,d.allowEmpty=l.allowEmpty||!1,d.indent=(f=l.indent)!=null?f:"  ",d.newline=(w=l.newline)!=null?w:`
`,d.offset=(O=l.offset)!=null?O:0,d.dontPrettyTextNodes=(y=(A=l.dontPrettyTextNodes)!=null?A:l.dontprettytextnodes)!=null?y:0,d.spaceBeforeSlash=(C=(I=l.spaceBeforeSlash)!=null?I:l.spacebeforeslash)!=null?C:"",d.spaceBeforeSlash===!0&&(d.spaceBeforeSlash=" "),d.suppressPrettyCount=0,d.user={},d.state=t.None,d},_.prototype.indent=function(l,d,f){var w;return!d.pretty||d.suppressPrettyCount?"":d.pretty&&(w=(f||0)+d.offset+1,w>0)?new Array(w).join(d.indent):""},_.prototype.endline=function(l,d,f){return!d.pretty||d.suppressPrettyCount?"":d.newline},_.prototype.attribute=function(l,d,f){var w;return this.openAttribute(l,d,f),w=" "+l.name+'="'+l.value+'"',this.closeAttribute(l,d,f),w},_.prototype.cdata=function(l,d,f){var w;return this.openNode(l,d,f),d.state=t.OpenTag,w=this.indent(l,d,f)+"<![CDATA[",d.state=t.InsideTag,w+=l.value,d.state=t.CloseTag,w+="]]>"+this.endline(l,d,f),d.state=t.None,this.closeNode(l,d,f),w},_.prototype.comment=function(l,d,f){var w;return this.openNode(l,d,f),d.state=t.OpenTag,w=this.indent(l,d,f)+"<!-- ",d.state=t.InsideTag,w+=l.value,d.state=t.CloseTag,w+=" -->"+this.endline(l,d,f),d.state=t.None,this.closeNode(l,d,f),w},_.prototype.declaration=function(l,d,f){var w;return this.openNode(l,d,f),d.state=t.OpenTag,w=this.indent(l,d,f)+"<?xml",d.state=t.InsideTag,w+=' version="'+l.version+'"',l.encoding!=null&&(w+=' encoding="'+l.encoding+'"'),l.standalone!=null&&(w+=' standalone="'+l.standalone+'"'),d.state=t.CloseTag,w+=d.spaceBeforeSlash+"?>",w+=this.endline(l,d,f),d.state=t.None,this.closeNode(l,d,f),w},_.prototype.docType=function(l,d,f){var w,O,y,A,C;if(f||(f=0),this.openNode(l,d,f),d.state=t.OpenTag,A=this.indent(l,d,f),A+="<!DOCTYPE "+l.root().name,l.pubID&&l.sysID?A+=' PUBLIC "'+l.pubID+'" "'+l.sysID+'"':l.sysID&&(A+=' SYSTEM "'+l.sysID+'"'),l.children.length>0){for(A+=" [",A+=this.endline(l,d,f),d.state=t.InsideTag,C=l.children,O=0,y=C.length;O<y;O++)w=C[O],A+=this.writeChildNode(w,d,f+1);d.state=t.CloseTag,A+="]"}return d.state=t.CloseTag,A+=d.spaceBeforeSlash+">",A+=this.endline(l,d,f),d.state=t.None,this.closeNode(l,d,f),A},_.prototype.element=function(l,d,f){var w,O,y,A,C,I,R,F,G,K,$,z,j,oe;f||(f=0),K=!1,$="",this.openNode(l,d,f),d.state=t.OpenTag,$+=this.indent(l,d,f)+"<"+l.name,z=l.attribs;for(G in z)S.call(z,G)&&(w=z[G],$+=this.attribute(w,d,f));if(y=l.children.length,A=y===0?null:l.children[0],y===0||l.children.every(function(Se){return(Se.type===e.Text||Se.type===e.Raw)&&Se.value===""}))d.allowEmpty?($+=">",d.state=t.CloseTag,$+="</"+l.name+">"+this.endline(l,d,f)):(d.state=t.CloseTag,$+=d.spaceBeforeSlash+"/>"+this.endline(l,d,f));else if(d.pretty&&y===1&&(A.type===e.Text||A.type===e.Raw)&&A.value!=null)$+=">",d.state=t.InsideTag,d.suppressPrettyCount++,K=!0,$+=this.writeChildNode(A,d,f+1),d.suppressPrettyCount--,K=!1,d.state=t.CloseTag,$+="</"+l.name+">"+this.endline(l,d,f);else{if(d.dontPrettyTextNodes){for(j=l.children,C=0,R=j.length;C<R;C++)if(O=j[C],(O.type===e.Text||O.type===e.Raw)&&O.value!=null){d.suppressPrettyCount++,K=!0;break}}for($+=">"+this.endline(l,d,f),d.state=t.InsideTag,oe=l.children,I=0,F=oe.length;I<F;I++)O=oe[I],$+=this.writeChildNode(O,d,f+1);d.state=t.CloseTag,$+=this.indent(l,d,f)+"</"+l.name+">",K&&d.suppressPrettyCount--,$+=this.endline(l,d,f),d.state=t.None}return this.closeNode(l,d,f),$},_.prototype.writeChildNode=function(l,d,f){switch(l.type){case e.CData:return this.cdata(l,d,f);case e.Comment:return this.comment(l,d,f);case e.Element:return this.element(l,d,f);case e.Raw:return this.raw(l,d,f);case e.Text:return this.text(l,d,f);case e.ProcessingInstruction:return this.processingInstruction(l,d,f);case e.Dummy:return"";case e.Declaration:return this.declaration(l,d,f);case e.DocType:return this.docType(l,d,f);case e.AttributeDeclaration:return this.dtdAttList(l,d,f);case e.ElementDeclaration:return this.dtdElement(l,d,f);case e.EntityDeclaration:return this.dtdEntity(l,d,f);case e.NotationDeclaration:return this.dtdNotation(l,d,f);default:throw new Error("Unknown XML node type: "+l.constructor.name)}},_.prototype.processingInstruction=function(l,d,f){var w;return this.openNode(l,d,f),d.state=t.OpenTag,w=this.indent(l,d,f)+"<?",d.state=t.InsideTag,w+=l.target,l.value&&(w+=" "+l.value),d.state=t.CloseTag,w+=d.spaceBeforeSlash+"?>",w+=this.endline(l,d,f),d.state=t.None,this.closeNode(l,d,f),w},_.prototype.raw=function(l,d,f){var w;return this.openNode(l,d,f),d.state=t.OpenTag,w=this.indent(l,d,f),d.state=t.InsideTag,w+=l.value,d.state=t.CloseTag,w+=this.endline(l,d,f),d.state=t.None,this.closeNode(l,d,f),w},_.prototype.text=function(l,d,f){var w;return this.openNode(l,d,f),d.state=t.OpenTag,w=this.indent(l,d,f),d.state=t.InsideTag,w+=l.value,d.state=t.CloseTag,w+=this.endline(l,d,f),d.state=t.None,this.closeNode(l,d,f),w},_.prototype.dtdAttList=function(l,d,f){var w;return this.openNode(l,d,f),d.state=t.OpenTag,w=this.indent(l,d,f)+"<!ATTLIST",d.state=t.InsideTag,w+=" "+l.elementName+" "+l.attributeName+" "+l.attributeType,l.defaultValueType!=="#DEFAULT"&&(w+=" "+l.defaultValueType),l.defaultValue&&(w+=' "'+l.defaultValue+'"'),d.state=t.CloseTag,w+=d.spaceBeforeSlash+">"+this.endline(l,d,f),d.state=t.None,this.closeNode(l,d,f),w},_.prototype.dtdElement=function(l,d,f){var w;return this.openNode(l,d,f),d.state=t.OpenTag,w=this.indent(l,d,f)+"<!ELEMENT",d.state=t.InsideTag,w+=" "+l.name+" "+l.value,d.state=t.CloseTag,w+=d.spaceBeforeSlash+">"+this.endline(l,d,f),d.state=t.None,this.closeNode(l,d,f),w},_.prototype.dtdEntity=function(l,d,f){var w;return this.openNode(l,d,f),d.state=t.OpenTag,w=this.indent(l,d,f)+"<!ENTITY",d.state=t.InsideTag,l.pe&&(w+=" %"),w+=" "+l.name,l.value?w+=' "'+l.value+'"':(l.pubID&&l.sysID?w+=' PUBLIC "'+l.pubID+'" "'+l.sysID+'"':l.sysID&&(w+=' SYSTEM "'+l.sysID+'"'),l.nData&&(w+=" NDATA "+l.nData)),d.state=t.CloseTag,w+=d.spaceBeforeSlash+">"+this.endline(l,d,f),d.state=t.None,this.closeNode(l,d,f),w},_.prototype.dtdNotation=function(l,d,f){var w;return this.openNode(l,d,f),d.state=t.OpenTag,w=this.indent(l,d,f)+"<!NOTATION",d.state=t.InsideTag,w+=" "+l.name,l.pubID&&l.sysID?w+=' PUBLIC "'+l.pubID+'" "'+l.sysID+'"':l.pubID?w+=' PUBLIC "'+l.pubID+'"':l.sysID&&(w+=' SYSTEM "'+l.sysID+'"'),d.state=t.CloseTag,w+=d.spaceBeforeSlash+">"+this.endline(l,d,f),d.state=t.None,this.closeNode(l,d,f),w},_.prototype.openNode=function(l,d,f){},_.prototype.closeNode=function(l,d,f){},_.prototype.openAttribute=function(l,d,f){},_.prototype.closeAttribute=function(l,d,f){},_}()}).call(Fw)});var Ws=L((Mw,qw)=>{"use strict";(function(){var e,t,i=function(n,s){for(var o in s)r.call(s,o)&&(n[o]=s[o]);function a(){this.constructor=n}return a.prototype=s.prototype,n.prototype=new a,n.__super__=s.prototype,n},r={}.hasOwnProperty;t=$u(),qw.exports=e=function(n){i(s,n);function s(o){s.__super__.constructor.call(this,o)}return s.prototype.document=function(o,a){var c,u,m,g,x;for(a=this.filterOptions(a),g="",x=o.children,u=0,m=x.length;u<m;u++)c=x[u],g+=this.writeChildNode(c,a,0);return a.pretty&&g.slice(-a.newline.length)===a.newline&&(g=g.slice(0,-a.newline.length)),g},s}(t)}).call(Mw)});var zu=L((Bw,Uw)=>{"use strict";(function(){var e,t,i,r,n,s,o,a,c=function(m,g){for(var x in g)u.call(g,x)&&(m[x]=g[x]);function p(){this.constructor=m}return p.prototype=g.prototype,m.prototype=new p,m.__super__=g.prototype,m},u={}.hasOwnProperty;a=Nt().isPlainObject,i=Mu(),t=zb(),n=ct(),e=Ae(),o=Uu(),s=Ws(),Uw.exports=r=function(m){c(g,m);function g(x){g.__super__.constructor.call(this,null),this.name="#document",this.type=e.Document,this.documentURI=null,this.domConfig=new t,x||(x={}),x.writer||(x.writer=new s),this.options=x,this.stringify=new o(x)}return Object.defineProperty(g.prototype,"implementation",{value:new i}),Object.defineProperty(g.prototype,"doctype",{get:function(){var x,p,h,v;for(v=this.children,p=0,h=v.length;p<h;p++)if(x=v[p],x.type===e.DocType)return x;return null}}),Object.defineProperty(g.prototype,"documentElement",{get:function(){return this.rootObject||null}}),Object.defineProperty(g.prototype,"inputEncoding",{get:function(){return null}}),Object.defineProperty(g.prototype,"strictErrorChecking",{get:function(){return!1}}),Object.defineProperty(g.prototype,"xmlEncoding",{get:function(){return this.children.length!==0&&this.children[0].type===e.Declaration?this.children[0].encoding:null}}),Object.defineProperty(g.prototype,"xmlStandalone",{get:function(){return this.children.length!==0&&this.children[0].type===e.Declaration?this.children[0].standalone==="yes":!1}}),Object.defineProperty(g.prototype,"xmlVersion",{get:function(){return this.children.length!==0&&this.children[0].type===e.Declaration?this.children[0].version:"1.0"}}),Object.defineProperty(g.prototype,"URL",{get:function(){return this.documentURI}}),Object.defineProperty(g.prototype,"origin",{get:function(){return null}}),Object.defineProperty(g.prototype,"compatMode",{get:function(){return null}}),Object.defineProperty(g.prototype,"characterSet",{get:function(){return null}}),Object.defineProperty(g.prototype,"contentType",{get:function(){return null}}),g.prototype.end=function(x){var p;return p={},x?a(x)&&(p=x,x=this.options.writer):x=this.options.writer,x.document(this,x.filterOptions(p))},g.prototype.toString=function(x){return this.options.writer.document(this,this.options.writer.filterOptions(x))},g.prototype.createElement=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createDocumentFragment=function(){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createTextNode=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createComment=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createCDATASection=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createProcessingInstruction=function(x,p){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createAttribute=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createEntityReference=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.getElementsByTagName=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.importNode=function(x,p){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createElementNS=function(x,p){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createAttributeNS=function(x,p){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.getElementsByTagNameNS=function(x,p){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.getElementById=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.adoptNode=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.normalizeDocument=function(){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.renameNode=function(x,p,h){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.getElementsByClassName=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createEvent=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createRange=function(){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createNodeIterator=function(x,p,h){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createTreeWalker=function(x,p,h){throw new Error("This DOM method is not implemented."+this.debugInfo())},g}(n)}).call(Bw)});var Hw=L(($w,zw)=>{"use strict";(function(){var e,t,i,r,n,s,o,a,c,u,m,g,x,p,h,v,E,S,_,l,d,f,w,O,y={}.hasOwnProperty;O=Nt(),f=O.isObject,d=O.isFunction,w=O.isPlainObject,l=O.getValue,e=Ae(),g=zu(),p=js(),r=Ms(),n=qs(),v=Vs(),_=Xs(),h=Ys(),u=Bs(),m=Gs(),s=Us(),a=$s(),o=zs(),c=Hs(),i=qu(),S=Uu(),E=Ws(),t=tn(),zw.exports=x=function(){function A(C,I,R){var F;this.name="?xml",this.type=e.Document,C||(C={}),F={},C.writer?w(C.writer)&&(F=C.writer,C.writer=new E):C.writer=new E,this.options=C,this.writer=C.writer,this.writerOptions=this.writer.filterOptions(F),this.stringify=new S(C),this.onDataCallback=I||function(){},this.onEndCallback=R||function(){},this.currentNode=null,this.currentLevel=-1,this.openTags={},this.documentStarted=!1,this.documentCompleted=!1,this.root=null}return A.prototype.createChildNode=function(C){var I,R,F,G,K,$,z,j;switch(C.type){case e.CData:this.cdata(C.value);break;case e.Comment:this.comment(C.value);break;case e.Element:F={},z=C.attribs;for(R in z)y.call(z,R)&&(I=z[R],F[R]=I.value);this.node(C.name,F);break;case e.Dummy:this.dummy();break;case e.Raw:this.raw(C.value);break;case e.Text:this.text(C.value);break;case e.ProcessingInstruction:this.instruction(C.target,C.value);break;default:throw new Error("This XML node type is not supported in a JS object: "+C.constructor.name)}for(j=C.children,K=0,$=j.length;K<$;K++)G=j[K],this.createChildNode(G),G.type===e.Element&&this.up();return this},A.prototype.dummy=function(){return this},A.prototype.node=function(C,I,R){var F;if(C==null)throw new Error("Missing node name.");if(this.root&&this.currentLevel===-1)throw new Error("Document can only have one root node. "+this.debugInfo(C));return this.openCurrent(),C=l(C),I==null&&(I={}),I=l(I),f(I)||(F=[I,R],R=F[0],I=F[1]),this.currentNode=new p(this,C,I),this.currentNode.children=!1,this.currentLevel++,this.openTags[this.currentLevel]=this.currentNode,R!=null&&this.text(R),this},A.prototype.element=function(C,I,R){var F,G,K,$,z,j;if(this.currentNode&&this.currentNode.type===e.DocType)this.dtdElement.apply(this,arguments);else if(Array.isArray(C)||f(C)||d(C))for($=this.options.noValidation,this.options.noValidation=!0,j=new g(this.options).element("TEMP_ROOT"),j.element(C),this.options.noValidation=$,z=j.children,G=0,K=z.length;G<K;G++)F=z[G],this.createChildNode(F),F.type===e.Element&&this.up();else this.node(C,I,R);return this},A.prototype.attribute=function(C,I){var R,F;if(!this.currentNode||this.currentNode.children)throw new Error("att() can only be used immediately after an ele() call in callback mode. "+this.debugInfo(C));if(C!=null&&(C=l(C)),f(C))for(R in C)y.call(C,R)&&(F=C[R],this.attribute(R,F));else d(I)&&(I=I.apply()),this.options.keepNullAttributes&&I==null?this.currentNode.attribs[C]=new i(this,C,""):I!=null&&(this.currentNode.attribs[C]=new i(this,C,I));return this},A.prototype.text=function(C){var I;return this.openCurrent(),I=new _(this,C),this.onData(this.writer.text(I,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},A.prototype.cdata=function(C){var I;return this.openCurrent(),I=new r(this,C),this.onData(this.writer.cdata(I,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},A.prototype.comment=function(C){var I;return this.openCurrent(),I=new n(this,C),this.onData(this.writer.comment(I,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},A.prototype.raw=function(C){var I;return this.openCurrent(),I=new v(this,C),this.onData(this.writer.raw(I,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},A.prototype.instruction=function(C,I){var R,F,G,K,$;if(this.openCurrent(),C!=null&&(C=l(C)),I!=null&&(I=l(I)),Array.isArray(C))for(R=0,K=C.length;R<K;R++)F=C[R],this.instruction(F);else if(f(C))for(F in C)y.call(C,F)&&(G=C[F],this.instruction(F,G));else d(I)&&(I=I.apply()),$=new h(this,C,I),this.onData(this.writer.processingInstruction($,this.writerOptions,this.currentLevel+1),this.currentLevel+1);return this},A.prototype.declaration=function(C,I,R){var F;if(this.openCurrent(),this.documentStarted)throw new Error("declaration() must be the first node.");return F=new u(this,C,I,R),this.onData(this.writer.declaration(F,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},A.prototype.doctype=function(C,I,R){if(this.openCurrent(),C==null)throw new Error("Missing root node name.");if(this.root)throw new Error("dtd() must come before the root node.");return this.currentNode=new m(this,I,R),this.currentNode.rootNodeName=C,this.currentNode.children=!1,this.currentLevel++,this.openTags[this.currentLevel]=this.currentNode,this},A.prototype.dtdElement=function(C,I){var R;return this.openCurrent(),R=new o(this,C,I),this.onData(this.writer.dtdElement(R,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},A.prototype.attList=function(C,I,R,F,G){var K;return this.openCurrent(),K=new s(this,C,I,R,F,G),this.onData(this.writer.dtdAttList(K,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},A.prototype.entity=function(C,I){var R;return this.openCurrent(),R=new a(this,!1,C,I),this.onData(this.writer.dtdEntity(R,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},A.prototype.pEntity=function(C,I){var R;return this.openCurrent(),R=new a(this,!0,C,I),this.onData(this.writer.dtdEntity(R,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},A.prototype.notation=function(C,I){var R;return this.openCurrent(),R=new c(this,C,I),this.onData(this.writer.dtdNotation(R,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},A.prototype.up=function(){if(this.currentLevel<0)throw new Error("The document node has no parent.");return this.currentNode?(this.currentNode.children?this.closeNode(this.currentNode):this.openNode(this.currentNode),this.currentNode=null):this.closeNode(this.openTags[this.currentLevel]),delete this.openTags[this.currentLevel],this.currentLevel--,this},A.prototype.end=function(){for(;this.currentLevel>=0;)this.up();return this.onEnd()},A.prototype.openCurrent=function(){if(this.currentNode)return this.currentNode.children=!0,this.openNode(this.currentNode)},A.prototype.openNode=function(C){var I,R,F,G;if(!C.isOpen){if(!this.root&&this.currentLevel===0&&C.type===e.Element&&(this.root=C),R="",C.type===e.Element){this.writerOptions.state=t.OpenTag,R=this.writer.indent(C,this.writerOptions,this.currentLevel)+"<"+C.name,G=C.attribs;for(F in G)y.call(G,F)&&(I=G[F],R+=this.writer.attribute(I,this.writerOptions,this.currentLevel));R+=(C.children?">":"/>")+this.writer.endline(C,this.writerOptions,this.currentLevel),this.writerOptions.state=t.InsideTag}else this.writerOptions.state=t.OpenTag,R=this.writer.indent(C,this.writerOptions,this.currentLevel)+"<!DOCTYPE "+C.rootNodeName,C.pubID&&C.sysID?R+=' PUBLIC "'+C.pubID+'" "'+C.sysID+'"':C.sysID&&(R+=' SYSTEM "'+C.sysID+'"'),C.children?(R+=" [",this.writerOptions.state=t.InsideTag):(this.writerOptions.state=t.CloseTag,R+=">"),R+=this.writer.endline(C,this.writerOptions,this.currentLevel);return this.onData(R,this.currentLevel),C.isOpen=!0}},A.prototype.closeNode=function(C){var I;if(!C.isClosed)return I="",this.writerOptions.state=t.CloseTag,C.type===e.Element?I=this.writer.indent(C,this.writerOptions,this.currentLevel)+"</"+C.name+">"+this.writer.endline(C,this.writerOptions,this.currentLevel):I=this.writer.indent(C,this.writerOptions,this.currentLevel)+"]>"+this.writer.endline(C,this.writerOptions,this.currentLevel),this.writerOptions.state=t.None,this.onData(I,this.currentLevel),C.isClosed=!0},A.prototype.onData=function(C,I){return this.documentStarted=!0,this.onDataCallback(C,I+1)},A.prototype.onEnd=function(){return this.documentCompleted=!0,this.onEndCallback()},A.prototype.debugInfo=function(C){return C==null?"":"node: <"+C+">"},A.prototype.ele=function(){return this.element.apply(this,arguments)},A.prototype.nod=function(C,I,R){return this.node(C,I,R)},A.prototype.txt=function(C){return this.text(C)},A.prototype.dat=function(C){return this.cdata(C)},A.prototype.com=function(C){return this.comment(C)},A.prototype.ins=function(C,I){return this.instruction(C,I)},A.prototype.dec=function(C,I,R){return this.declaration(C,I,R)},A.prototype.dtd=function(C,I,R){return this.doctype(C,I,R)},A.prototype.e=function(C,I,R){return this.element(C,I,R)},A.prototype.n=function(C,I,R){return this.node(C,I,R)},A.prototype.t=function(C){return this.text(C)},A.prototype.d=function(C){return this.cdata(C)},A.prototype.c=function(C){return this.comment(C)},A.prototype.r=function(C){return this.raw(C)},A.prototype.i=function(C,I){return this.instruction(C,I)},A.prototype.att=function(){return this.currentNode&&this.currentNode.type===e.DocType?this.attList.apply(this,arguments):this.attribute.apply(this,arguments)},A.prototype.a=function(){return this.currentNode&&this.currentNode.type===e.DocType?this.attList.apply(this,arguments):this.attribute.apply(this,arguments)},A.prototype.ent=function(C,I){return this.entity(C,I)},A.prototype.pent=function(C,I){return this.pEntity(C,I)},A.prototype.not=function(C,I){return this.notation(C,I)},A}()}).call($w)});var Xw=L((Gw,Vw)=>{"use strict";(function(){var e,t,i,r,n=function(o,a){for(var c in a)s.call(a,c)&&(o[c]=a[c]);function u(){this.constructor=o}return u.prototype=a.prototype,o.prototype=new u,o.__super__=a.prototype,o},s={}.hasOwnProperty;e=Ae(),r=$u(),t=tn(),Vw.exports=i=function(o){n(a,o);function a(c,u){this.stream=c,a.__super__.constructor.call(this,u)}return a.prototype.endline=function(c,u,m){return c.isLastRootNode&&u.state===t.CloseTag?"":a.__super__.endline.call(this,c,u,m)},a.prototype.document=function(c,u){var m,g,x,p,h,v,E,S,_;for(E=c.children,g=x=0,h=E.length;x<h;g=++x)m=E[g],m.isLastRootNode=g===c.children.length-1;for(u=this.filterOptions(u),S=c.children,_=[],p=0,v=S.length;p<v;p++)m=S[p],_.push(this.writeChildNode(m,u,0));return _},a.prototype.attribute=function(c,u,m){return this.stream.write(a.__super__.attribute.call(this,c,u,m))},a.prototype.cdata=function(c,u,m){return this.stream.write(a.__super__.cdata.call(this,c,u,m))},a.prototype.comment=function(c,u,m){return this.stream.write(a.__super__.comment.call(this,c,u,m))},a.prototype.declaration=function(c,u,m){return this.stream.write(a.__super__.declaration.call(this,c,u,m))},a.prototype.docType=function(c,u,m){var g,x,p,h;if(m||(m=0),this.openNode(c,u,m),u.state=t.OpenTag,this.stream.write(this.indent(c,u,m)),this.stream.write("<!DOCTYPE "+c.root().name),c.pubID&&c.sysID?this.stream.write(' PUBLIC "'+c.pubID+'" "'+c.sysID+'"'):c.sysID&&this.stream.write(' SYSTEM "'+c.sysID+'"'),c.children.length>0){for(this.stream.write(" ["),this.stream.write(this.endline(c,u,m)),u.state=t.InsideTag,h=c.children,x=0,p=h.length;x<p;x++)g=h[x],this.writeChildNode(g,u,m+1);u.state=t.CloseTag,this.stream.write("]")}return u.state=t.CloseTag,this.stream.write(u.spaceBeforeSlash+">"),this.stream.write(this.endline(c,u,m)),u.state=t.None,this.closeNode(c,u,m)},a.prototype.element=function(c,u,m){var g,x,p,h,v,E,S,_,l,d;m||(m=0),this.openNode(c,u,m),u.state=t.OpenTag,this.stream.write(this.indent(c,u,m)+"<"+c.name),l=c.attribs;for(S in l)s.call(l,S)&&(g=l[S],this.attribute(g,u,m));if(p=c.children.length,h=p===0?null:c.children[0],p===0||c.children.every(function(f){return(f.type===e.Text||f.type===e.Raw)&&f.value===""}))u.allowEmpty?(this.stream.write(">"),u.state=t.CloseTag,this.stream.write("</"+c.name+">")):(u.state=t.CloseTag,this.stream.write(u.spaceBeforeSlash+"/>"));else if(u.pretty&&p===1&&(h.type===e.Text||h.type===e.Raw)&&h.value!=null)this.stream.write(">"),u.state=t.InsideTag,u.suppressPrettyCount++,_=!0,this.writeChildNode(h,u,m+1),u.suppressPrettyCount--,_=!1,u.state=t.CloseTag,this.stream.write("</"+c.name+">");else{for(this.stream.write(">"+this.endline(c,u,m)),u.state=t.InsideTag,d=c.children,v=0,E=d.length;v<E;v++)x=d[v],this.writeChildNode(x,u,m+1);u.state=t.CloseTag,this.stream.write(this.indent(c,u,m)+"</"+c.name+">")}return this.stream.write(this.endline(c,u,m)),u.state=t.None,this.closeNode(c,u,m)},a.prototype.processingInstruction=function(c,u,m){return this.stream.write(a.__super__.processingInstruction.call(this,c,u,m))},a.prototype.raw=function(c,u,m){return this.stream.write(a.__super__.raw.call(this,c,u,m))},a.prototype.text=function(c,u,m){return this.stream.write(a.__super__.text.call(this,c,u,m))},a.prototype.dtdAttList=function(c,u,m){return this.stream.write(a.__super__.dtdAttList.call(this,c,u,m))},a.prototype.dtdElement=function(c,u,m){return this.stream.write(a.__super__.dtdElement.call(this,c,u,m))},a.prototype.dtdEntity=function(c,u,m){return this.stream.write(a.__super__.dtdEntity.call(this,c,u,m))},a.prototype.dtdNotation=function(c,u,m){return this.stream.write(a.__super__.dtdNotation.call(this,c,u,m))},a}(r)}).call(Gw)});var Ww=L((Yw,ai)=>{"use strict";(function(){var e,t,i,r,n,s,o,a,c,u;u=Nt(),a=u.assign,c=u.isFunction,i=Mu(),r=zu(),n=Hw(),o=Ws(),s=Xw(),e=Ae(),t=tn(),ai.exports.create=function(m,g,x,p){var h,v;if(m==null)throw new Error("Root element needs a name.");return p=a({},g,x,p),h=new r(p),v=h.element(m),p.headless||(h.declaration(p),(p.pubID!=null||p.sysID!=null)&&h.dtd(p)),v},ai.exports.begin=function(m,g,x){var p;return c(m)&&(p=[m,g],g=p[0],x=p[1],m={}),g?new n(m,g,x):new r(m)},ai.exports.stringWriter=function(m){return new o(m)},ai.exports.streamWriter=function(m,g){return new s(m,g)},ai.exports.implementation=new i,ai.exports.nodeType=e,ai.exports.writerState=t}).call(Yw)});var Kw=L(Hu=>{"use strict";(function(){"use strict";var e,t,i,r,n,s={}.hasOwnProperty;e=Ww(),t=Ps().defaults,r=function(o){return typeof o=="string"&&(o.indexOf("&")>=0||o.indexOf(">")>=0||o.indexOf("<")>=0)},n=function(o){return"<![CDATA["+i(o)+"]]>"},i=function(o){return o.replace("]]>","]]]]><![CDATA[>")},Hu.Builder=function(){function o(a){var c,u,m;this.options={},u=t["0.2"];for(c in u)s.call(u,c)&&(m=u[c],this.options[c]=m);for(c in a)s.call(a,c)&&(m=a[c],this.options[c]=m)}return o.prototype.buildObject=function(a){var c,u,m,g,x;return c=this.options.attrkey,u=this.options.charkey,Object.keys(a).length===1&&this.options.rootName===t["0.2"].rootName?(x=Object.keys(a)[0],a=a[x]):x=this.options.rootName,m=function(p){return function(h,v){var E,S,_,l,d,f;if(typeof v!="object")p.options.cdata&&r(v)?h.raw(n(v)):h.txt(v);else if(Array.isArray(v)){for(l in v)if(s.call(v,l)){S=v[l];for(d in S)_=S[d],h=m(h.ele(d),_).up()}}else for(d in v)if(s.call(v,d))if(S=v[d],d===c){if(typeof S=="object")for(E in S)f=S[E],h=h.att(E,f)}else if(d===u)p.options.cdata&&r(S)?h=h.raw(n(S)):h=h.txt(S);else if(Array.isArray(S))for(l in S)s.call(S,l)&&(_=S[l],typeof _=="string"?p.options.cdata&&r(_)?h=h.ele(d).raw(n(_)).up():h=h.ele(d,_).up():h=m(h.ele(d),_).up());else typeof S=="object"?h=m(h.ele(d),S).up():typeof S=="string"&&p.options.cdata&&r(S)?h=h.ele(d).raw(n(S)).up():(S==null&&(S=""),h=h.ele(d,S.toString()).up());return h}}(this),g=e.create(x,this.options.xmldec,this.options.doctype,{headless:this.options.headless,allowSurrogateChars:this.options.allowSurrogateChars}),m(g,a).end(this.options.renderOpts)},o}()}).call(Hu)});var Jw=L(Ks=>{"use strict";(function(e){e.parser=function(T,b){return new i(T,b)},e.SAXParser=i,e.SAXStream=u,e.createStream=c,e.MAX_BUFFER_LENGTH=64*1024;var t=["comment","sgmlDecl","textNode","tagName","doctype","procInstName","procInstBody","entity","attribName","attribValue","cdata","script"];e.EVENTS=["text","processinginstruction","sgmldeclaration","doctype","comment","opentagstart","attribute","opentag","closetag","opencdata","cdata","closecdata","error","end","ready","script","opennamespace","closenamespace"];function i(T,b){if(!(this instanceof i))return new i(T,b);var k=this;n(k),k.q=k.c="",k.bufferCheckPosition=e.MAX_BUFFER_LENGTH,k.opt=b||{},k.opt.lowercase=k.opt.lowercase||k.opt.lowercasetags,k.looseCase=k.opt.lowercase?"toLowerCase":"toUpperCase",k.tags=[],k.closed=k.closedRoot=k.sawRoot=!1,k.tag=k.error=null,k.strict=!!T,k.noscript=!!(T||k.opt.noscript),k.state=y.BEGIN,k.strictEntities=k.opt.strictEntities,k.ENTITIES=k.strictEntities?Object.create(e.XML_ENTITIES):Object.create(e.ENTITIES),k.attribList=[],k.opt.xmlns&&(k.ns=Object.create(h)),k.opt.unquotedAttributeValues===void 0&&(k.opt.unquotedAttributeValues=!T),k.trackPosition=k.opt.position!==!1,k.trackPosition&&(k.position=k.line=k.column=0),C(k,"onready")}Object.create||(Object.create=function(T){function b(){}b.prototype=T;var k=new b;return k}),Object.keys||(Object.keys=function(T){var b=[];for(var k in T)T.hasOwnProperty(k)&&b.push(k);return b});function r(T){for(var b=Math.max(e.MAX_BUFFER_LENGTH,10),k=0,N=0,te=t.length;N<te;N++){var re=T[t[N]].length;if(re>b)switch(t[N]){case"textNode":R(T);break;case"cdata":I(T,"oncdata",T.cdata),T.cdata="";break;case"script":I(T,"onscript",T.script),T.script="";break;default:G(T,"Max buffer length exceeded: "+t[N])}k=Math.max(k,re)}var U=e.MAX_BUFFER_LENGTH-k;T.bufferCheckPosition=U+T.position}function n(T){for(var b=0,k=t.length;b<k;b++)T[t[b]]=""}function s(T){R(T),T.cdata!==""&&(I(T,"oncdata",T.cdata),T.cdata=""),T.script!==""&&(I(T,"onscript",T.script),T.script="")}i.prototype={end:function(){K(this)},write:Ge,resume:function(){return this.error=null,this},close:function(){return this.write(null)},flush:function(){s(this)}};var o;try{o=require("stream").Stream}catch{o=function(){}}o||(o=function(){});var a=e.EVENTS.filter(function(T){return T!=="error"&&T!=="end"});function c(T,b){return new u(T,b)}function u(T,b){if(!(this instanceof u))return new u(T,b);o.apply(this),this._parser=new i(T,b),this.writable=!0,this.readable=!0;var k=this;this._parser.onend=function(){k.emit("end")},this._parser.onerror=function(N){k.emit("error",N),k._parser.error=null},this._decoder=null,a.forEach(function(N){Object.defineProperty(k,"on"+N,{get:function(){return k._parser["on"+N]},set:function(te){if(!te)return k.removeAllListeners(N),k._parser["on"+N]=te,te;k.on(N,te)},enumerable:!0,configurable:!1})})}u.prototype=Object.create(o.prototype,{constructor:{value:u}}),u.prototype.write=function(T){if(typeof Buffer=="function"&&typeof Buffer.isBuffer=="function"&&Buffer.isBuffer(T)){if(!this._decoder){var b=require("string_decoder").StringDecoder;this._decoder=new b("utf8")}T=this._decoder.write(T)}return this._parser.write(T.toString()),this.emit("data",T),!0},u.prototype.end=function(T){return T&&T.length&&this.write(T),this._parser.end(),!0},u.prototype.on=function(T,b){var k=this;return!k._parser["on"+T]&&a.indexOf(T)!==-1&&(k._parser["on"+T]=function(){var N=arguments.length===1?[arguments[0]]:Array.apply(null,arguments);N.splice(0,0,T),k.emit.apply(k,N)}),o.prototype.on.call(k,T,b)};var m="[CDATA[",g="DOCTYPE",x="http://www.w3.org/XML/1998/namespace",p="http://www.w3.org/2000/xmlns/",h={xml:x,xmlns:p},v=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,E=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/,S=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,_=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;function l(T){return T===" "||T===`
`||T==="\r"||T==="	"}function d(T){return T==='"'||T==="'"}function f(T){return T===">"||l(T)}function w(T,b){return T.test(b)}function O(T,b){return!w(T,b)}var y=0;e.STATE={BEGIN:y++,BEGIN_WHITESPACE:y++,TEXT:y++,TEXT_ENTITY:y++,OPEN_WAKA:y++,SGML_DECL:y++,SGML_DECL_QUOTED:y++,DOCTYPE:y++,DOCTYPE_QUOTED:y++,DOCTYPE_DTD:y++,DOCTYPE_DTD_QUOTED:y++,COMMENT_STARTING:y++,COMMENT:y++,COMMENT_ENDING:y++,COMMENT_ENDED:y++,CDATA:y++,CDATA_ENDING:y++,CDATA_ENDING_2:y++,PROC_INST:y++,PROC_INST_BODY:y++,PROC_INST_ENDING:y++,OPEN_TAG:y++,OPEN_TAG_SLASH:y++,ATTRIB:y++,ATTRIB_NAME:y++,ATTRIB_NAME_SAW_WHITE:y++,ATTRIB_VALUE:y++,ATTRIB_VALUE_QUOTED:y++,ATTRIB_VALUE_CLOSED:y++,ATTRIB_VALUE_UNQUOTED:y++,ATTRIB_VALUE_ENTITY_Q:y++,ATTRIB_VALUE_ENTITY_U:y++,CLOSE_TAG:y++,CLOSE_TAG_SAW_WHITE:y++,SCRIPT:y++,SCRIPT_ENDING:y++},e.XML_ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'"},e.ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'",AElig:198,Aacute:193,Acirc:194,Agrave:192,Aring:197,Atilde:195,Auml:196,Ccedil:199,ETH:208,Eacute:201,Ecirc:202,Egrave:200,Euml:203,Iacute:205,Icirc:206,Igrave:204,Iuml:207,Ntilde:209,Oacute:211,Ocirc:212,Ograve:210,Oslash:216,Otilde:213,Ouml:214,THORN:222,Uacute:218,Ucirc:219,Ugrave:217,Uuml:220,Yacute:221,aacute:225,acirc:226,aelig:230,agrave:224,aring:229,atilde:227,auml:228,ccedil:231,eacute:233,ecirc:234,egrave:232,eth:240,euml:235,iacute:237,icirc:238,igrave:236,iuml:239,ntilde:241,oacute:243,ocirc:244,ograve:242,oslash:248,otilde:245,ouml:246,szlig:223,thorn:254,uacute:250,ucirc:251,ugrave:249,uuml:252,yacute:253,yuml:255,copy:169,reg:174,nbsp:160,iexcl:161,cent:162,pound:163,curren:164,yen:165,brvbar:166,sect:167,uml:168,ordf:170,laquo:171,not:172,shy:173,macr:175,deg:176,plusmn:177,sup1:185,sup2:178,sup3:179,acute:180,micro:181,para:182,middot:183,cedil:184,ordm:186,raquo:187,frac14:188,frac12:189,frac34:190,iquest:191,times:215,divide:247,OElig:338,oelig:339,Scaron:352,scaron:353,Yuml:376,fnof:402,circ:710,tilde:732,Alpha:913,Beta:914,Gamma:915,Delta:916,Epsilon:917,Zeta:918,Eta:919,Theta:920,Iota:921,Kappa:922,Lambda:923,Mu:924,Nu:925,Xi:926,Omicron:927,Pi:928,Rho:929,Sigma:931,Tau:932,Upsilon:933,Phi:934,Chi:935,Psi:936,Omega:937,alpha:945,beta:946,gamma:947,delta:948,epsilon:949,zeta:950,eta:951,theta:952,iota:953,kappa:954,lambda:955,mu:956,nu:957,xi:958,omicron:959,pi:960,rho:961,sigmaf:962,sigma:963,tau:964,upsilon:965,phi:966,chi:967,psi:968,omega:969,thetasym:977,upsih:978,piv:982,ensp:8194,emsp:8195,thinsp:8201,zwnj:8204,zwj:8205,lrm:8206,rlm:8207,ndash:8211,mdash:8212,lsquo:8216,rsquo:8217,sbquo:8218,ldquo:8220,rdquo:8221,bdquo:8222,dagger:8224,Dagger:8225,bull:8226,hellip:8230,permil:8240,prime:8242,Prime:8243,lsaquo:8249,rsaquo:8250,oline:8254,frasl:8260,euro:8364,image:8465,weierp:8472,real:8476,trade:8482,alefsym:8501,larr:8592,uarr:8593,rarr:8594,darr:8595,harr:8596,crarr:8629,lArr:8656,uArr:8657,rArr:8658,dArr:8659,hArr:8660,forall:8704,part:8706,exist:8707,empty:8709,nabla:8711,isin:8712,notin:8713,ni:8715,prod:8719,sum:8721,minus:8722,lowast:8727,radic:8730,prop:8733,infin:8734,ang:8736,and:8743,or:8744,cap:8745,cup:8746,int:8747,there4:8756,sim:8764,cong:8773,asymp:8776,ne:8800,equiv:8801,le:8804,ge:8805,sub:8834,sup:8835,nsub:8836,sube:8838,supe:8839,oplus:8853,otimes:8855,perp:8869,sdot:8901,lceil:8968,rceil:8969,lfloor:8970,rfloor:8971,lang:9001,rang:9002,loz:9674,spades:9824,clubs:9827,hearts:9829,diams:9830},Object.keys(e.ENTITIES).forEach(function(T){var b=e.ENTITIES[T],k=typeof b=="number"?String.fromCharCode(b):b;e.ENTITIES[T]=k});for(var A in e.STATE)e.STATE[e.STATE[A]]=A;y=e.STATE;function C(T,b,k){T[b]&&T[b](k)}function I(T,b,k){T.textNode&&R(T),C(T,b,k)}function R(T){T.textNode=F(T.opt,T.textNode),T.textNode&&C(T,"ontext",T.textNode),T.textNode=""}function F(T,b){return T.trim&&(b=b.trim()),T.normalize&&(b=b.replace(/\s+/g," ")),b}function G(T,b){return R(T),T.trackPosition&&(b+=`
Line: `+T.line+`
Column: `+T.column+`
Char: `+T.c),b=new Error(b),T.error=b,C(T,"onerror",b),T}function K(T){return T.sawRoot&&!T.closedRoot&&$(T,"Unclosed root tag"),T.state!==y.BEGIN&&T.state!==y.BEGIN_WHITESPACE&&T.state!==y.TEXT&&G(T,"Unexpected end"),R(T),T.c="",T.closed=!0,C(T,"onend"),i.call(T,T.strict,T.opt),T}function $(T,b){if(typeof T!="object"||!(T instanceof i))throw new Error("bad call to strictFail");T.strict&&G(T,b)}function z(T){T.strict||(T.tagName=T.tagName[T.looseCase]());var b=T.tags[T.tags.length-1]||T,k=T.tag={name:T.tagName,attributes:{}};T.opt.xmlns&&(k.ns=b.ns),T.attribList.length=0,I(T,"onopentagstart",k)}function j(T,b){var k=T.indexOf(":"),N=k<0?["",T]:T.split(":"),te=N[0],re=N[1];return b&&T==="xmlns"&&(te="xmlns",re=""),{prefix:te,local:re}}function oe(T){if(T.strict||(T.attribName=T.attribName[T.looseCase]()),T.attribList.indexOf(T.attribName)!==-1||T.tag.attributes.hasOwnProperty(T.attribName)){T.attribName=T.attribValue="";return}if(T.opt.xmlns){var b=j(T.attribName,!0),k=b.prefix,N=b.local;if(k==="xmlns")if(N==="xml"&&T.attribValue!==x)$(T,"xml: prefix must be bound to "+x+`
Actual: `+T.attribValue);else if(N==="xmlns"&&T.attribValue!==p)$(T,"xmlns: prefix must be bound to "+p+`
Actual: `+T.attribValue);else{var te=T.tag,re=T.tags[T.tags.length-1]||T;te.ns===re.ns&&(te.ns=Object.create(re.ns)),te.ns[N]=T.attribValue}T.attribList.push([T.attribName,T.attribValue])}else T.tag.attributes[T.attribName]=T.attribValue,I(T,"onattribute",{name:T.attribName,value:T.attribValue});T.attribName=T.attribValue=""}function Se(T,b){if(T.opt.xmlns){var k=T.tag,N=j(T.tagName);k.prefix=N.prefix,k.local=N.local,k.uri=k.ns[N.prefix]||"",k.prefix&&!k.uri&&($(T,"Unbound namespace prefix: "+JSON.stringify(T.tagName)),k.uri=N.prefix);var te=T.tags[T.tags.length-1]||T;k.ns&&te.ns!==k.ns&&Object.keys(k.ns).forEach(function(rl){I(T,"onopennamespace",{prefix:rl,uri:k.ns[rl]})});for(var re=0,U=T.attribList.length;re<U;re++){var Me=T.attribList[re],P=Me[0],H=Me[1],X=j(P,!0),ue=X.prefix,it=X.local,Ii=ue===""?"":k.ns[ue]||"",so={name:P,value:H,prefix:ue,local:it,uri:Ii};ue&&ue!=="xmlns"&&!Ii&&($(T,"Unbound namespace prefix: "+JSON.stringify(ue)),so.uri=ue),T.tag.attributes[P]=so,I(T,"onattribute",so)}T.attribList.length=0}T.tag.isSelfClosing=!!b,T.sawRoot=!0,T.tags.push(T.tag),I(T,"onopentag",T.tag),b||(!T.noscript&&T.tagName.toLowerCase()==="script"?T.state=y.SCRIPT:T.state=y.TEXT,T.tag=null,T.tagName=""),T.attribName=T.attribValue="",T.attribList.length=0}function pe(T){if(!T.tagName){$(T,"Weird empty close tag."),T.textNode+="</>",T.state=y.TEXT;return}if(T.script){if(T.tagName!=="script"){T.script+="</"+T.tagName+">",T.tagName="",T.state=y.SCRIPT;return}I(T,"onscript",T.script),T.script=""}var b=T.tags.length,k=T.tagName;T.strict||(k=k[T.looseCase]());for(var N=k;b--;){var te=T.tags[b];if(te.name!==N)$(T,"Unexpected close tag");else break}if(b<0){$(T,"Unmatched closing tag: "+T.tagName),T.textNode+="</"+T.tagName+">",T.state=y.TEXT;return}T.tagName=k;for(var re=T.tags.length;re-- >b;){var U=T.tag=T.tags.pop();T.tagName=T.tag.name,I(T,"onclosetag",T.tagName);var Me={};for(var P in U.ns)Me[P]=U.ns[P];var H=T.tags[T.tags.length-1]||T;T.opt.xmlns&&U.ns!==H.ns&&Object.keys(U.ns).forEach(function(X){var ue=U.ns[X];I(T,"onclosenamespace",{prefix:X,uri:ue})})}b===0&&(T.closedRoot=!0),T.tagName=T.attribValue=T.attribName="",T.attribList.length=0,T.state=y.TEXT}function lt(T){var b=T.entity,k=b.toLowerCase(),N,te="";return T.ENTITIES[b]?T.ENTITIES[b]:T.ENTITIES[k]?T.ENTITIES[k]:(b=k,b.charAt(0)==="#"&&(b.charAt(1)==="x"?(b=b.slice(2),N=parseInt(b,16),te=N.toString(16)):(b=b.slice(1),N=parseInt(b,10),te=N.toString(10))),b=b.replace(/^0+/,""),isNaN(N)||te.toLowerCase()!==b?($(T,"Invalid character entity"),"&"+T.entity+";"):String.fromCodePoint(N))}function Vt(T,b){b==="<"?(T.state=y.OPEN_WAKA,T.startTagPosition=T.position):l(b)||($(T,"Non-whitespace before first tag."),T.textNode=b,T.state=y.TEXT)}function He(T,b){var k="";return b<T.length&&(k=T.charAt(b)),k}function Ge(T){var b=this;if(this.error)throw this.error;if(b.closed)return G(b,"Cannot write after close. Assign an onready handler.");if(T===null)return K(b);typeof T=="object"&&(T=T.toString());for(var k=0,N="";N=He(T,k++),b.c=N,!!N;)switch(b.trackPosition&&(b.position++,N===`
`?(b.line++,b.column=0):b.column++),b.state){case y.BEGIN:if(b.state=y.BEGIN_WHITESPACE,N==="\uFEFF")continue;Vt(b,N);continue;case y.BEGIN_WHITESPACE:Vt(b,N);continue;case y.TEXT:if(b.sawRoot&&!b.closedRoot){for(var te=k-1;N&&N!=="<"&&N!=="&";)N=He(T,k++),N&&b.trackPosition&&(b.position++,N===`
`?(b.line++,b.column=0):b.column++);b.textNode+=T.substring(te,k-1)}N==="<"&&!(b.sawRoot&&b.closedRoot&&!b.strict)?(b.state=y.OPEN_WAKA,b.startTagPosition=b.position):(!l(N)&&(!b.sawRoot||b.closedRoot)&&$(b,"Text data outside of root node."),N==="&"?b.state=y.TEXT_ENTITY:b.textNode+=N);continue;case y.SCRIPT:N==="<"?b.state=y.SCRIPT_ENDING:b.script+=N;continue;case y.SCRIPT_ENDING:N==="/"?b.state=y.CLOSE_TAG:(b.script+="<"+N,b.state=y.SCRIPT);continue;case y.OPEN_WAKA:if(N==="!")b.state=y.SGML_DECL,b.sgmlDecl="";else if(!l(N))if(w(v,N))b.state=y.OPEN_TAG,b.tagName=N;else if(N==="/")b.state=y.CLOSE_TAG,b.tagName="";else if(N==="?")b.state=y.PROC_INST,b.procInstName=b.procInstBody="";else{if($(b,"Unencoded <"),b.startTagPosition+1<b.position){var re=b.position-b.startTagPosition;N=new Array(re).join(" ")+N}b.textNode+="<"+N,b.state=y.TEXT}continue;case y.SGML_DECL:if(b.sgmlDecl+N==="--"){b.state=y.COMMENT,b.comment="",b.sgmlDecl="";continue}b.doctype&&b.doctype!==!0&&b.sgmlDecl?(b.state=y.DOCTYPE_DTD,b.doctype+="<!"+b.sgmlDecl+N,b.sgmlDecl=""):(b.sgmlDecl+N).toUpperCase()===m?(I(b,"onopencdata"),b.state=y.CDATA,b.sgmlDecl="",b.cdata=""):(b.sgmlDecl+N).toUpperCase()===g?(b.state=y.DOCTYPE,(b.doctype||b.sawRoot)&&$(b,"Inappropriately located doctype declaration"),b.doctype="",b.sgmlDecl=""):N===">"?(I(b,"onsgmldeclaration",b.sgmlDecl),b.sgmlDecl="",b.state=y.TEXT):(d(N)&&(b.state=y.SGML_DECL_QUOTED),b.sgmlDecl+=N);continue;case y.SGML_DECL_QUOTED:N===b.q&&(b.state=y.SGML_DECL,b.q=""),b.sgmlDecl+=N;continue;case y.DOCTYPE:N===">"?(b.state=y.TEXT,I(b,"ondoctype",b.doctype),b.doctype=!0):(b.doctype+=N,N==="["?b.state=y.DOCTYPE_DTD:d(N)&&(b.state=y.DOCTYPE_QUOTED,b.q=N));continue;case y.DOCTYPE_QUOTED:b.doctype+=N,N===b.q&&(b.q="",b.state=y.DOCTYPE);continue;case y.DOCTYPE_DTD:N==="]"?(b.doctype+=N,b.state=y.DOCTYPE):N==="<"?(b.state=y.OPEN_WAKA,b.startTagPosition=b.position):d(N)?(b.doctype+=N,b.state=y.DOCTYPE_DTD_QUOTED,b.q=N):b.doctype+=N;continue;case y.DOCTYPE_DTD_QUOTED:b.doctype+=N,N===b.q&&(b.state=y.DOCTYPE_DTD,b.q="");continue;case y.COMMENT:N==="-"?b.state=y.COMMENT_ENDING:b.comment+=N;continue;case y.COMMENT_ENDING:N==="-"?(b.state=y.COMMENT_ENDED,b.comment=F(b.opt,b.comment),b.comment&&I(b,"oncomment",b.comment),b.comment=""):(b.comment+="-"+N,b.state=y.COMMENT);continue;case y.COMMENT_ENDED:N!==">"?($(b,"Malformed comment"),b.comment+="--"+N,b.state=y.COMMENT):b.doctype&&b.doctype!==!0?b.state=y.DOCTYPE_DTD:b.state=y.TEXT;continue;case y.CDATA:N==="]"?b.state=y.CDATA_ENDING:b.cdata+=N;continue;case y.CDATA_ENDING:N==="]"?b.state=y.CDATA_ENDING_2:(b.cdata+="]"+N,b.state=y.CDATA);continue;case y.CDATA_ENDING_2:N===">"?(b.cdata&&I(b,"oncdata",b.cdata),I(b,"onclosecdata"),b.cdata="",b.state=y.TEXT):N==="]"?b.cdata+="]":(b.cdata+="]]"+N,b.state=y.CDATA);continue;case y.PROC_INST:N==="?"?b.state=y.PROC_INST_ENDING:l(N)?b.state=y.PROC_INST_BODY:b.procInstName+=N;continue;case y.PROC_INST_BODY:if(!b.procInstBody&&l(N))continue;N==="?"?b.state=y.PROC_INST_ENDING:b.procInstBody+=N;continue;case y.PROC_INST_ENDING:N===">"?(I(b,"onprocessinginstruction",{name:b.procInstName,body:b.procInstBody}),b.procInstName=b.procInstBody="",b.state=y.TEXT):(b.procInstBody+="?"+N,b.state=y.PROC_INST_BODY);continue;case y.OPEN_TAG:w(E,N)?b.tagName+=N:(z(b),N===">"?Se(b):N==="/"?b.state=y.OPEN_TAG_SLASH:(l(N)||$(b,"Invalid character in tag name"),b.state=y.ATTRIB));continue;case y.OPEN_TAG_SLASH:N===">"?(Se(b,!0),pe(b)):($(b,"Forward-slash in opening tag not followed by >"),b.state=y.ATTRIB);continue;case y.ATTRIB:if(l(N))continue;N===">"?Se(b):N==="/"?b.state=y.OPEN_TAG_SLASH:w(v,N)?(b.attribName=N,b.attribValue="",b.state=y.ATTRIB_NAME):$(b,"Invalid attribute name");continue;case y.ATTRIB_NAME:N==="="?b.state=y.ATTRIB_VALUE:N===">"?($(b,"Attribute without value"),b.attribValue=b.attribName,oe(b),Se(b)):l(N)?b.state=y.ATTRIB_NAME_SAW_WHITE:w(E,N)?b.attribName+=N:$(b,"Invalid attribute name");continue;case y.ATTRIB_NAME_SAW_WHITE:if(N==="=")b.state=y.ATTRIB_VALUE;else{if(l(N))continue;$(b,"Attribute without value"),b.tag.attributes[b.attribName]="",b.attribValue="",I(b,"onattribute",{name:b.attribName,value:""}),b.attribName="",N===">"?Se(b):w(v,N)?(b.attribName=N,b.state=y.ATTRIB_NAME):($(b,"Invalid attribute name"),b.state=y.ATTRIB)}continue;case y.ATTRIB_VALUE:if(l(N))continue;d(N)?(b.q=N,b.state=y.ATTRIB_VALUE_QUOTED):(b.opt.unquotedAttributeValues||G(b,"Unquoted attribute value"),b.state=y.ATTRIB_VALUE_UNQUOTED,b.attribValue=N);continue;case y.ATTRIB_VALUE_QUOTED:if(N!==b.q){N==="&"?b.state=y.ATTRIB_VALUE_ENTITY_Q:b.attribValue+=N;continue}oe(b),b.q="",b.state=y.ATTRIB_VALUE_CLOSED;continue;case y.ATTRIB_VALUE_CLOSED:l(N)?b.state=y.ATTRIB:N===">"?Se(b):N==="/"?b.state=y.OPEN_TAG_SLASH:w(v,N)?($(b,"No whitespace between attributes"),b.attribName=N,b.attribValue="",b.state=y.ATTRIB_NAME):$(b,"Invalid attribute name");continue;case y.ATTRIB_VALUE_UNQUOTED:if(!f(N)){N==="&"?b.state=y.ATTRIB_VALUE_ENTITY_U:b.attribValue+=N;continue}oe(b),N===">"?Se(b):b.state=y.ATTRIB;continue;case y.CLOSE_TAG:if(b.tagName)N===">"?pe(b):w(E,N)?b.tagName+=N:b.script?(b.script+="</"+b.tagName,b.tagName="",b.state=y.SCRIPT):(l(N)||$(b,"Invalid tagname in closing tag"),b.state=y.CLOSE_TAG_SAW_WHITE);else{if(l(N))continue;O(v,N)?b.script?(b.script+="</"+N,b.state=y.SCRIPT):$(b,"Invalid tagname in closing tag."):b.tagName=N}continue;case y.CLOSE_TAG_SAW_WHITE:if(l(N))continue;N===">"?pe(b):$(b,"Invalid characters in closing tag");continue;case y.TEXT_ENTITY:case y.ATTRIB_VALUE_ENTITY_Q:case y.ATTRIB_VALUE_ENTITY_U:var U,Me;switch(b.state){case y.TEXT_ENTITY:U=y.TEXT,Me="textNode";break;case y.ATTRIB_VALUE_ENTITY_Q:U=y.ATTRIB_VALUE_QUOTED,Me="attribValue";break;case y.ATTRIB_VALUE_ENTITY_U:U=y.ATTRIB_VALUE_UNQUOTED,Me="attribValue";break}if(N===";"){var P=lt(b);b.opt.unparsedEntities&&!Object.values(e.XML_ENTITIES).includes(P)?(b.entity="",b.state=U,b.write(P)):(b[Me]+=P,b.entity="",b.state=U)}else w(b.entity.length?_:S,N)?b.entity+=N:($(b,"Invalid character in entity name"),b[Me]+="&"+b.entity+N,b.entity="",b.state=U);continue;default:throw new Error(b,"Unknown state: "+b.state)}return b.position>=b.bufferCheckPosition&&r(b),b}String.fromCodePoint||function(){var T=String.fromCharCode,b=Math.floor,k=function(){var N=16384,te=[],re,U,Me=-1,P=arguments.length;if(!P)return"";for(var H="";++Me<P;){var X=Number(arguments[Me]);if(!isFinite(X)||X<0||X>1114111||b(X)!==X)throw RangeError("Invalid code point: "+X);X<=65535?te.push(X):(X-=65536,re=(X>>10)+55296,U=X%1024+56320,te.push(re,U)),(Me+1===P||te.length>N)&&(H+=T.apply(null,te),te.length=0)}return H};Object.defineProperty?Object.defineProperty(String,"fromCodePoint",{value:k,configurable:!0,writable:!0}):String.fromCodePoint=k}()})(typeof Ks>"u"?Ks.sax={}:Ks)});var Zw=L(Gu=>{"use strict";(function(){"use strict";Gu.stripBOM=function(e){return e[0]==="\uFEFF"?e.substring(1):e}}).call(Gu)});var Vu=L(Ci=>{"use strict";(function(){"use strict";var e;e=new RegExp(/(?!xmlns)^.*:/),Ci.normalize=function(t){return t.toLowerCase()},Ci.firstCharLowerCase=function(t){return t.charAt(0).toLowerCase()+t.slice(1)},Ci.stripPrefix=function(t){return t.replace(e,"")},Ci.parseNumbers=function(t){return isNaN(t)||(t=t%1===0?parseInt(t,10):parseFloat(t)),t},Ci.parseBooleans=function(t){return/^(?:true|false)$/i.test(t)&&(t=t.toLowerCase()==="true"),t}}).call(Ci)});var Qw=L(Ht=>{"use strict";(function(){"use strict";var e,t,i,r,n,s,o,a,c,u=function(x,p){return function(){return x.apply(p,arguments)}},m=function(x,p){for(var h in p)g.call(p,h)&&(x[h]=p[h]);function v(){this.constructor=x}return v.prototype=p.prototype,x.prototype=new v,x.__super__=p.prototype,x},g={}.hasOwnProperty;a=Jw(),r=require("events"),e=Zw(),o=Vu(),c=require("timers").setImmediate,t=Ps().defaults,n=function(x){return typeof x=="object"&&x!=null&&Object.keys(x).length===0},s=function(x,p,h){var v,E,S;for(v=0,E=x.length;v<E;v++)S=x[v],p=S(p,h);return p},i=function(x,p,h){var v;return v=Object.create(null),v.value=h,v.writable=!0,v.enumerable=!0,v.configurable=!0,Object.defineProperty(x,p,v)},Ht.Parser=function(x){m(p,x);function p(h){this.parseStringPromise=u(this.parseStringPromise,this),this.parseString=u(this.parseString,this),this.reset=u(this.reset,this),this.assignOrPush=u(this.assignOrPush,this),this.processAsync=u(this.processAsync,this);var v,E,S;if(!(this instanceof Ht.Parser))return new Ht.Parser(h);this.options={},E=t["0.2"];for(v in E)g.call(E,v)&&(S=E[v],this.options[v]=S);for(v in h)g.call(h,v)&&(S=h[v],this.options[v]=S);this.options.xmlns&&(this.options.xmlnskey=this.options.attrkey+"ns"),this.options.normalizeTags&&(this.options.tagNameProcessors||(this.options.tagNameProcessors=[]),this.options.tagNameProcessors.unshift(o.normalize)),this.reset()}return p.prototype.processAsync=function(){var h,v;try{return this.remaining.length<=this.options.chunkSize?(h=this.remaining,this.remaining="",this.saxParser=this.saxParser.write(h),this.saxParser.close()):(h=this.remaining.substr(0,this.options.chunkSize),this.remaining=this.remaining.substr(this.options.chunkSize,this.remaining.length),this.saxParser=this.saxParser.write(h),c(this.processAsync))}catch(E){if(v=E,!this.saxParser.errThrown)return this.saxParser.errThrown=!0,this.emit(v)}},p.prototype.assignOrPush=function(h,v,E){return v in h?(h[v]instanceof Array||i(h,v,[h[v]]),h[v].push(E)):this.options.explicitArray?i(h,v,[E]):i(h,v,E)},p.prototype.reset=function(){var h,v,E,S;return this.removeAllListeners(),this.saxParser=a.parser(this.options.strict,{trim:!1,normalize:!1,xmlns:this.options.xmlns}),this.saxParser.errThrown=!1,this.saxParser.onerror=function(_){return function(l){if(_.saxParser.resume(),!_.saxParser.errThrown)return _.saxParser.errThrown=!0,_.emit("error",l)}}(this),this.saxParser.onend=function(_){return function(){if(!_.saxParser.ended)return _.saxParser.ended=!0,_.emit("end",_.resultObject)}}(this),this.saxParser.ended=!1,this.EXPLICIT_CHARKEY=this.options.explicitCharkey,this.resultObject=null,S=[],h=this.options.attrkey,v=this.options.charkey,this.saxParser.onopentag=function(_){return function(l){var d,f,w,O,y;if(w={},w[v]="",!_.options.ignoreAttrs){y=l.attributes;for(d in y)g.call(y,d)&&(!(h in w)&&!_.options.mergeAttrs&&(w[h]={}),f=_.options.attrValueProcessors?s(_.options.attrValueProcessors,l.attributes[d],d):l.attributes[d],O=_.options.attrNameProcessors?s(_.options.attrNameProcessors,d):d,_.options.mergeAttrs?_.assignOrPush(w,O,f):i(w[h],O,f))}return w["#name"]=_.options.tagNameProcessors?s(_.options.tagNameProcessors,l.name):l.name,_.options.xmlns&&(w[_.options.xmlnskey]={uri:l.uri,local:l.local}),S.push(w)}}(this),this.saxParser.onclosetag=function(_){return function(){var l,d,f,w,O,y,A,C,I,R;if(y=S.pop(),O=y["#name"],(!_.options.explicitChildren||!_.options.preserveChildrenOrder)&&delete y["#name"],y.cdata===!0&&(l=y.cdata,delete y.cdata),I=S[S.length-1],y[v].match(/^\s*$/)&&!l?(d=y[v],delete y[v]):(_.options.trim&&(y[v]=y[v].trim()),_.options.normalize&&(y[v]=y[v].replace(/\s{2,}/g," ").trim()),y[v]=_.options.valueProcessors?s(_.options.valueProcessors,y[v],O):y[v],Object.keys(y).length===1&&v in y&&!_.EXPLICIT_CHARKEY&&(y=y[v])),n(y)&&(typeof _.options.emptyTag=="function"?y=_.options.emptyTag():y=_.options.emptyTag!==""?_.options.emptyTag:d),_.options.validator!=null&&(R="/"+function(){var F,G,K;for(K=[],F=0,G=S.length;F<G;F++)w=S[F],K.push(w["#name"]);return K}().concat(O).join("/"),function(){var F;try{return y=_.options.validator(R,I&&I[O],y)}catch(G){return F=G,_.emit("error",F)}}()),_.options.explicitChildren&&!_.options.mergeAttrs&&typeof y=="object"){if(!_.options.preserveChildrenOrder)w={},_.options.attrkey in y&&(w[_.options.attrkey]=y[_.options.attrkey],delete y[_.options.attrkey]),!_.options.charsAsChildren&&_.options.charkey in y&&(w[_.options.charkey]=y[_.options.charkey],delete y[_.options.charkey]),Object.getOwnPropertyNames(y).length>0&&(w[_.options.childkey]=y),y=w;else if(I){I[_.options.childkey]=I[_.options.childkey]||[],A={};for(f in y)g.call(y,f)&&i(A,f,y[f]);I[_.options.childkey].push(A),delete y["#name"],Object.keys(y).length===1&&v in y&&!_.EXPLICIT_CHARKEY&&(y=y[v])}}return S.length>0?_.assignOrPush(I,O,y):(_.options.explicitRoot&&(C=y,y={},i(y,O,C)),_.resultObject=y,_.saxParser.ended=!0,_.emit("end",_.resultObject))}}(this),E=function(_){return function(l){var d,f;if(f=S[S.length-1],f)return f[v]+=l,_.options.explicitChildren&&_.options.preserveChildrenOrder&&_.options.charsAsChildren&&(_.options.includeWhiteChars||l.replace(/\\n/g,"").trim()!=="")&&(f[_.options.childkey]=f[_.options.childkey]||[],d={"#name":"__text__"},d[v]=l,_.options.normalize&&(d[v]=d[v].replace(/\s{2,}/g," ").trim()),f[_.options.childkey].push(d)),f}}(this),this.saxParser.ontext=E,this.saxParser.oncdata=function(_){return function(l){var d;if(d=E(l),d)return d.cdata=!0}}(this)},p.prototype.parseString=function(h,v){var E;v!=null&&typeof v=="function"&&(this.on("end",function(S){return this.reset(),v(null,S)}),this.on("error",function(S){return this.reset(),v(S)}));try{return h=h.toString(),h.trim()===""?(this.emit("end",null),!0):(h=e.stripBOM(h),this.options.async?(this.remaining=h,c(this.processAsync),this.saxParser):this.saxParser.write(h).close())}catch(S){if(E=S,this.saxParser.errThrown||this.saxParser.ended){if(this.saxParser.ended)throw E}else return this.emit("error",E),this.saxParser.errThrown=!0}},p.prototype.parseStringPromise=function(h){return new Promise(function(v){return function(E,S){return v.parseString(h,function(_,l){return _?S(_):E(l)})}}(this))},p}(r),Ht.parseString=function(x,p,h){var v,E,S;return h!=null?(typeof h=="function"&&(v=h),typeof p=="object"&&(E=p)):(typeof p=="function"&&(v=p),E={}),S=new Ht.Parser(E),S.parseString(x,v)},Ht.parseStringPromise=function(x,p){var h,v;return typeof p=="object"&&(h=p),v=new Ht.Parser(h),v.parseStringPromise(x)}}).call(Ht)});var e0=L(Gt=>{"use strict";(function(){"use strict";var e,t,i,r,n=function(o,a){for(var c in a)s.call(a,c)&&(o[c]=a[c]);function u(){this.constructor=o}return u.prototype=a.prototype,o.prototype=new u,o.__super__=a.prototype,o},s={}.hasOwnProperty;t=Ps(),e=Kw(),i=Qw(),r=Vu(),Gt.defaults=t.defaults,Gt.processors=r,Gt.ValidationError=function(o){n(a,o);function a(c){this.message=c}return a}(Error),Gt.Builder=e.Builder,Gt.Parser=i.Parser,Gt.parseString=i.parseString,Gt.parseStringPromise=i.parseStringPromise}).call(Gt)});var d0=L(mt=>{"use strict";var Lk=/[|\\{}()[\]^$+*?.]/g,kk=Object.prototype.hasOwnProperty,Ju=function(e,t){return kk.apply(e,[t])};mt.escapeRegExpChars=function(e){return e?String(e).replace(Lk,"\\$&"):""};var Rk={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&#34;","'":"&#39;"},Pk=/[&<>'"]/g;function Fk(e){return Rk[e]||e}var jk=`var _ENCODE_HTML_RULES = {
      "&": "&amp;"
    , "<": "&lt;"
    , ">": "&gt;"
    , '"': "&#34;"
    , "'": "&#39;"
    }
  , _MATCH_HTML = /[&<>'"]/g;
function encode_char(c) {
  return _ENCODE_HTML_RULES[c] || c;
};
`;mt.escapeXML=function(e){return e==null?"":String(e).replace(Pk,Fk)};function p0(){return Function.prototype.toString.call(this)+`;
`+jk}try{typeof Object.defineProperty=="function"?Object.defineProperty(mt.escapeXML,"toString",{value:p0}):mt.escapeXML.toString=p0}catch{console.warn("Unable to set escapeXML.toString (is the Function prototype frozen?)")}mt.shallowCopy=function(e,t){if(t=t||{},e!=null)for(var i in t)Ju(t,i)&&(i==="__proto__"||i==="constructor"||(e[i]=t[i]));return e};mt.shallowCopyFromList=function(e,t,i){if(i=i||[],t=t||{},e!=null)for(var r=0;r<i.length;r++){var n=i[r];if(typeof t[n]<"u"){if(!Ju(t,n)||n==="__proto__"||n==="constructor")continue;e[n]=t[n]}}return e};mt.cache={_data:{},set:function(e,t){this._data[e]=t},get:function(e){return this._data[e]},remove:function(e){delete this._data[e]},reset:function(){this._data={}}};mt.hyphenToCamel=function(e){return e.replace(/-[a-z]/g,function(t){return t[1].toUpperCase()})};mt.createNullProtoObjWherePossible=function(){return typeof Object.create=="function"?function(){return Object.create(null)}:{__proto__:null}instanceof Object?function(){return{}}:function(){return{__proto__:null}}}();mt.hasOwnOnlyObject=function(e){var t=mt.createNullProtoObjWherePossible();for(var i in e)Ju(e,i)&&(t[i]=e[i]);return t}});var f0=L((LB,Mk)=>{Mk.exports={name:"ejs",description:"Embedded JavaScript templates",keywords:["template","engine","ejs"],version:"3.1.10",author:"Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)",license:"Apache-2.0",bin:{ejs:"./bin/cli.js"},main:"./lib/ejs.js",jsdelivr:"ejs.min.js",unpkg:"ejs.min.js",repository:{type:"git",url:"git://github.com/mde/ejs.git"},bugs:"https://github.com/mde/ejs/issues",homepage:"https://github.com/mde/ejs",dependencies:{jake:"^10.8.5"},devDependencies:{browserify:"^16.5.1",eslint:"^6.8.0","git-directory-deploy":"^1.5.1",jsdoc:"^4.0.2","lru-cache":"^4.0.1",mocha:"^10.2.0","uglify-js":"^3.3.16"},engines:{node:">=0.10.0"},scripts:{test:"npx jake test"}}});var E0=L(ie=>{"use strict";var Qu=require("fs"),an=require("path"),De=d0(),h0=!1,qk=f0().version,Bk="<",Uk=">",$k="%",b0="locals",zk="ejs",Hk="(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)",w0=["delimiter","scope","context","debug","compileDebug","client","_with","rmWhitespace","strict","filename","async"],Gk=w0.concat("cache"),m0=/^\uFEFF/,Zu=/^[a-zA-Z_$][0-9a-zA-Z_$]*$/;ie.cache=De.cache;ie.fileLoader=Qu.readFileSync;ie.localsName=b0;ie.promiseImpl=new Function("return this;")().Promise;ie.resolveInclude=function(e,t,i){var r=an.dirname,n=an.extname,s=an.resolve,o=s(i?t:r(t),e),a=n(e);return a||(o+=".ejs"),o};function g0(e,t){var i;if(t.some(function(r){return i=ie.resolveInclude(e,r,!0),Qu.existsSync(i)}))return i}function Vk(e,t){var i,r,n=t.views,s=/^[A-Za-z]+:\\|^\//.exec(e);if(s&&s.length)e=e.replace(/^\/*/,""),Array.isArray(t.root)?i=g0(e,t.root):i=ie.resolveInclude(e,t.root||"/",!0);else if(t.filename&&(r=ie.resolveInclude(e,t.filename),Qu.existsSync(r)&&(i=r)),!i&&Array.isArray(n)&&(i=g0(e,n)),!i&&typeof t.includer!="function")throw new Error('Could not find the include file "'+t.escapeFunction(e)+'"');return i}function cn(e,t){var i,r=e.filename,n=arguments.length>1;if(e.cache){if(!r)throw new Error("cache option requires a filename");if(i=ie.cache.get(r),i)return i;n||(t=x0(r).toString().replace(m0,""))}else if(!n){if(!r)throw new Error("Internal EJS error: no file name or template provided");t=x0(r).toString().replace(m0,"")}return i=ie.compile(t,e),e.cache&&ie.cache.set(r,i),i}function Xk(e,t,i){var r;if(i){try{r=cn(e)(t)}catch(n){return i(n)}i(null,r)}else{if(typeof ie.promiseImpl=="function")return new ie.promiseImpl(function(n,s){try{r=cn(e)(t),n(r)}catch(o){s(o)}});throw new Error("Please provide a callback function")}}function x0(e){return ie.fileLoader(e)}function Yk(e,t){var i=De.shallowCopy(De.createNullProtoObjWherePossible(),t);if(i.filename=Vk(e,i),typeof t.includer=="function"){var r=t.includer(e,i.filename);if(r&&(r.filename&&(i.filename=r.filename),r.template))return cn(i,r.template)}return cn(i)}function v0(e,t,i,r,n){var s=t.split(`
`),o=Math.max(r-3,0),a=Math.min(s.length,r+3),c=n(i),u=s.slice(o,a).map(function(m,g){var x=g+o+1;return(x==r?" >> ":"    ")+x+"| "+m}).join(`
`);throw e.path=c,e.message=(c||"ejs")+":"+r+`
`+u+`

`+e.message,e}function y0(e){return e.replace(/;(\s*$)/,"$1")}ie.compile=function(t,i){var r;return i&&i.scope&&(h0||(console.warn("`scope` option is deprecated and will be removed in EJS 3"),h0=!0),i.context||(i.context=i.scope),delete i.scope),r=new Pe(t,i),r.compile()};ie.render=function(e,t,i){var r=t||De.createNullProtoObjWherePossible(),n=i||De.createNullProtoObjWherePossible();return arguments.length==2&&De.shallowCopyFromList(n,r,w0),cn(n,e)(r)};ie.renderFile=function(){var e=Array.prototype.slice.call(arguments),t=e.shift(),i,r={filename:t},n,s;return typeof arguments[arguments.length-1]=="function"&&(i=e.pop()),e.length?(n=e.shift(),e.length?De.shallowCopy(r,e.pop()):(n.settings&&(n.settings.views&&(r.views=n.settings.views),n.settings["view cache"]&&(r.cache=!0),s=n.settings["view options"],s&&De.shallowCopy(r,s)),De.shallowCopyFromList(r,n,Gk)),r.filename=t):n=De.createNullProtoObjWherePossible(),Xk(r,n,i)};ie.Template=Pe;ie.clearCache=function(){ie.cache.reset()};function Pe(e,t){var i=De.hasOwnOnlyObject(t),r=De.createNullProtoObjWherePossible();this.templateText=e,this.mode=null,this.truncate=!1,this.currentLine=1,this.source="",r.client=i.client||!1,r.escapeFunction=i.escape||i.escapeFunction||De.escapeXML,r.compileDebug=i.compileDebug!==!1,r.debug=!!i.debug,r.filename=i.filename,r.openDelimiter=i.openDelimiter||ie.openDelimiter||Bk,r.closeDelimiter=i.closeDelimiter||ie.closeDelimiter||Uk,r.delimiter=i.delimiter||ie.delimiter||$k,r.strict=i.strict||!1,r.context=i.context,r.cache=i.cache||!1,r.rmWhitespace=i.rmWhitespace,r.root=i.root,r.includer=i.includer,r.outputFunctionName=i.outputFunctionName,r.localsName=i.localsName||ie.localsName||b0,r.views=i.views,r.async=i.async,r.destructuredLocals=i.destructuredLocals,r.legacyInclude=typeof i.legacyInclude<"u"?!!i.legacyInclude:!0,r.strict?r._with=!1:r._with=typeof i._with<"u"?i._with:!0,this.opts=r,this.regex=this.createRegex()}Pe.modes={EVAL:"eval",ESCAPED:"escaped",RAW:"raw",COMMENT:"comment",LITERAL:"literal"};Pe.prototype={createRegex:function(){var e=Hk,t=De.escapeRegExpChars(this.opts.delimiter),i=De.escapeRegExpChars(this.opts.openDelimiter),r=De.escapeRegExpChars(this.opts.closeDelimiter);return e=e.replace(/%/g,t).replace(/</g,i).replace(/>/g,r),new RegExp(e)},compile:function(){var e,t,i=this.opts,r="",n="",s=i.escapeFunction,o,a=i.filename?JSON.stringify(i.filename):"undefined";if(!this.source){if(this.generateSource(),r+=`  var __output = "";
  function __append(s) { if (s !== undefined && s !== null) __output += s }
`,i.outputFunctionName){if(!Zu.test(i.outputFunctionName))throw new Error("outputFunctionName is not a valid JS identifier.");r+="  var "+i.outputFunctionName+` = __append;
`}if(i.localsName&&!Zu.test(i.localsName))throw new Error("localsName is not a valid JS identifier.");if(i.destructuredLocals&&i.destructuredLocals.length){for(var c="  var __locals = ("+i.localsName+` || {}),
`,u=0;u<i.destructuredLocals.length;u++){var m=i.destructuredLocals[u];if(!Zu.test(m))throw new Error("destructuredLocals["+u+"] is not a valid JS identifier.");u>0&&(c+=`,
  `),c+=m+" = __locals."+m}r+=c+`;
`}i._with!==!1&&(r+="  with ("+i.localsName+` || {}) {
`,n+=`  }
`),n+=`  return __output;
`,this.source=r+this.source+n}i.compileDebug?e=`var __line = 1
  , __lines = `+JSON.stringify(this.templateText)+`
  , __filename = `+a+`;
try {
`+this.source+`} catch (e) {
  rethrow(e, __lines, __filename, __line, escapeFn);
}
`:e=this.source,i.client&&(e="escapeFn = escapeFn || "+s.toString()+`;
`+e,i.compileDebug&&(e="rethrow = rethrow || "+v0.toString()+`;
`+e)),i.strict&&(e=`"use strict";
`+e),i.debug&&console.log(e),i.compileDebug&&i.filename&&(e=e+`
//# sourceURL=`+a+`
`);try{if(i.async)try{o=new Function("return (async function(){}).constructor;")()}catch(h){throw h instanceof SyntaxError?new Error("This environment does not support async/await"):h}else o=Function;t=new o(i.localsName+", escapeFn, include, rethrow",e)}catch(h){throw h instanceof SyntaxError&&(i.filename&&(h.message+=" in "+i.filename),h.message+=` while compiling ejs

`,h.message+=`If the above error is not helpful, you may want to try EJS-Lint:
`,h.message+="https://github.com/RyanZim/EJS-Lint",i.async||(h.message+=`
`,h.message+="Or, if you meant to create an async function, pass `async: true` as an option.")),h}var g=i.client?t:function(v){var E=function(S,_){var l=De.shallowCopy(De.createNullProtoObjWherePossible(),v);return _&&(l=De.shallowCopy(l,_)),Yk(S,i)(l)};return t.apply(i.context,[v||De.createNullProtoObjWherePossible(),s,E,v0])};if(i.filename&&typeof Object.defineProperty=="function"){var x=i.filename,p=an.basename(x,an.extname(x));try{Object.defineProperty(g,"name",{value:p,writable:!1,enumerable:!1,configurable:!0})}catch{}}return g},generateSource:function(){var e=this.opts;e.rmWhitespace&&(this.templateText=this.templateText.replace(/[\r\n]+/g,`
`).replace(/^\s+|\s+$/gm,"")),this.templateText=this.templateText.replace(/[ \t]*<%_/gm,"<%_").replace(/_%>[ \t]*/gm,"_%>");var t=this,i=this.parseTemplateText(),r=this.opts.delimiter,n=this.opts.openDelimiter,s=this.opts.closeDelimiter;i&&i.length&&i.forEach(function(o,a){var c;if(o.indexOf(n+r)===0&&o.indexOf(n+r+r)!==0&&(c=i[a+2],!(c==r+s||c=="-"+r+s||c=="_"+r+s)))throw new Error('Could not find matching close tag for "'+o+'".');t.scanLine(o)})},parseTemplateText:function(){for(var e=this.templateText,t=this.regex,i=t.exec(e),r=[],n;i;)n=i.index,n!==0&&(r.push(e.substring(0,n)),e=e.slice(n)),r.push(i[0]),e=e.slice(i[0].length),i=t.exec(e);return e&&r.push(e),r},_addOutput:function(e){if(this.truncate&&(e=e.replace(/^(?:\r\n|\r|\n)/,""),this.truncate=!1),!e)return e;e=e.replace(/\\/g,"\\\\"),e=e.replace(/\n/g,"\\n"),e=e.replace(/\r/g,"\\r"),e=e.replace(/"/g,'\\"'),this.source+='    ; __append("'+e+`")
`},scanLine:function(e){var t=this,i=this.opts.delimiter,r=this.opts.openDelimiter,n=this.opts.closeDelimiter,s=0;switch(s=e.split(`
`).length-1,e){case r+i:case r+i+"_":this.mode=Pe.modes.EVAL;break;case r+i+"=":this.mode=Pe.modes.ESCAPED;break;case r+i+"-":this.mode=Pe.modes.RAW;break;case r+i+"#":this.mode=Pe.modes.COMMENT;break;case r+i+i:this.mode=Pe.modes.LITERAL,this.source+='    ; __append("'+e.replace(r+i+i,r+i)+`")
`;break;case i+i+n:this.mode=Pe.modes.LITERAL,this.source+='    ; __append("'+e.replace(i+i+n,i+n)+`")
`;break;case i+n:case"-"+i+n:case"_"+i+n:this.mode==Pe.modes.LITERAL&&this._addOutput(e),this.mode=null,this.truncate=e.indexOf("-")===0||e.indexOf("_")===0;break;default:if(this.mode){switch(this.mode){case Pe.modes.EVAL:case Pe.modes.ESCAPED:case Pe.modes.RAW:e.lastIndexOf("//")>e.lastIndexOf(`
`)&&(e+=`
`)}switch(this.mode){case Pe.modes.EVAL:this.source+="    ; "+e+`
`;break;case Pe.modes.ESCAPED:this.source+="    ; __append(escapeFn("+y0(e)+`))
`;break;case Pe.modes.RAW:this.source+="    ; __append("+y0(e)+`)
`;break;case Pe.modes.COMMENT:break;case Pe.modes.LITERAL:this._addOutput(e);break}}else this._addOutput(e)}t.opts.compileDebug&&s&&(this.currentLine+=s,this.source+="    ; __line = "+this.currentLine+`
`)}};ie.escapeXML=De.escapeXML;ie.__express=ie.renderFile;ie.VERSION=qk;ie.name=zk;typeof window<"u"&&(window.ejs=ie)});var oR={};nl(oR,{createApp:()=>k0});module.exports=q0(oR);var Ie=ae(require("fs")),C0=ae(require("os")),Be=ae(require("path")),O0=ae(Ml()),A0=ae($l()),il=ae(yh());var pi=!0,Mi=typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{},wr=0;if(Mi.process&&Mi.process.env&&Mi.process.stdout){let{FORCE_COLOR:e,NODE_DISABLE_COLORS:t,NO_COLOR:i,TERM:r,COLORTERM:n}=Mi.process.env;t||i||e==="0"?pi=!1:e==="1"||e==="2"||e==="3"?pi=!0:r==="dumb"?pi=!1:"CI"in Mi.process.env&&["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI","GITHUB_ACTIONS","BUILDKITE","DRONE"].some(s=>s in Mi.process.env)?pi=!0:pi=process.stdout.isTTY,pi&&(process.platform==="win32"||n&&(n==="truecolor"||n==="24bit")?wr=3:r&&(r.endsWith("-256color")||r.endsWith("256"))?wr=2:wr=1)}var bh={enabled:pi,supportLevel:wr};function Z(e,t,i=1){let r=`\x1B[${e}m`,n=`\x1B[${t}m`,s=new RegExp(`\\x1b\\[${t}m`,"g");return o=>bh.enabled&&bh.supportLevel>=i?r+(""+o).replace(s,r)+n:""+o}var qi=Z(0,0),MP=Z(1,22),qP=Z(2,22),BP=Z(3,23),UP=Z(4,24),$P=Z(7,27),zP=Z(8,28),HP=Z(9,29),GP=Z(30,39),_a=Z(31,39),VP=Z(32,39),Ta=Z(33,39),XP=Z(34,39),YP=Z(35,39),WP=Z(36,39),KP=Z(97,39),JP=Z(90,39),ZP=Z(37,39),QP=Z(91,39),e2=Z(92,39),t2=Z(93,39),i2=Z(94,39),r2=Z(95,39),n2=Z(96,39),s2=Z(40,49),o2=Z(41,49),a2=Z(42,49),c2=Z(43,49),u2=Z(44,49),l2=Z(45,49),p2=Z(46,49),d2=Z(107,49),f2=Z(100,49),h2=Z(101,49),m2=Z(102,49),g2=Z(103,49),x2=Z(104,49),v2=Z(105,49),y2=Z(106,49),b2=Z(47,49);function Er(e,t){return function(){return e.apply(t,arguments)}}var{toString:lS}=Object.prototype,{getPrototypeOf:Oa}=Object,Nn=(e=>t=>{let i=lS.call(t);return e[i]||(e[i]=i.slice(8,-1).toLowerCase())})(Object.create(null)),vt=e=>(e=e.toLowerCase(),t=>Nn(t)===e),Ln=e=>t=>typeof t===e,{isArray:Bi}=Array,_r=Ln("undefined");function pS(e){return e!==null&&!_r(e)&&e.constructor!==null&&!_r(e.constructor)&&pt(e.constructor.isBuffer)&&e.constructor.isBuffer(e)}var _h=vt("ArrayBuffer");function dS(e){let t;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?t=ArrayBuffer.isView(e):t=e&&e.buffer&&_h(e.buffer),t}var fS=Ln("string"),pt=Ln("function"),Th=Ln("number"),kn=e=>e!==null&&typeof e=="object",hS=e=>e===!0||e===!1,In=e=>{if(Nn(e)!=="object")return!1;let t=Oa(e);return(t===null||t===Object.prototype||Object.getPrototypeOf(t)===null)&&!(Symbol.toStringTag in e)&&!(Symbol.iterator in e)},mS=vt("Date"),gS=vt("File"),xS=vt("Blob"),vS=vt("FileList"),yS=e=>kn(e)&&pt(e.pipe),bS=e=>{let t;return e&&(typeof FormData=="function"&&e instanceof FormData||pt(e.append)&&((t=Nn(e))==="formdata"||t==="object"&&pt(e.toString)&&e.toString()==="[object FormData]"))},wS=vt("URLSearchParams"),[ES,_S,TS,SS]=["ReadableStream","Request","Response","Headers"].map(vt),CS=e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"");function Tr(e,t,{allOwnKeys:i=!1}={}){if(e===null||typeof e>"u")return;let r,n;if(typeof e!="object"&&(e=[e]),Bi(e))for(r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else{let s=i?Object.getOwnPropertyNames(e):Object.keys(e),o=s.length,a;for(r=0;r<o;r++)a=s[r],t.call(null,e[a],a,e)}}function Sh(e,t){t=t.toLowerCase();let i=Object.keys(e),r=i.length,n;for(;r-- >0;)if(n=i[r],t===n.toLowerCase())return n;return null}var Ch=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:global,Oh=e=>!_r(e)&&e!==Ch;function Ca(){let{caseless:e}=Oh(this)&&this||{},t={},i=(r,n)=>{let s=e&&Sh(t,n)||n;In(t[s])&&In(r)?t[s]=Ca(t[s],r):In(r)?t[s]=Ca({},r):Bi(r)?t[s]=r.slice():t[s]=r};for(let r=0,n=arguments.length;r<n;r++)arguments[r]&&Tr(arguments[r],i);return t}var OS=(e,t,i,{allOwnKeys:r}={})=>(Tr(t,(n,s)=>{i&&pt(n)?e[s]=Er(n,i):e[s]=n},{allOwnKeys:r}),e),AS=e=>(e.charCodeAt(0)===65279&&(e=e.slice(1)),e),DS=(e,t,i,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),i&&Object.assign(e.prototype,i)},IS=(e,t,i,r)=>{let n,s,o,a={};if(t=t||{},e==null)return t;do{for(n=Object.getOwnPropertyNames(e),s=n.length;s-- >0;)o=n[s],(!r||r(o,e,t))&&!a[o]&&(t[o]=e[o],a[o]=!0);e=i!==!1&&Oa(e)}while(e&&(!i||i(e,t))&&e!==Object.prototype);return t},NS=(e,t,i)=>{e=String(e),(i===void 0||i>e.length)&&(i=e.length),i-=t.length;let r=e.indexOf(t,i);return r!==-1&&r===i},LS=e=>{if(!e)return null;if(Bi(e))return e;let t=e.length;if(!Th(t))return null;let i=new Array(t);for(;t-- >0;)i[t]=e[t];return i},kS=(e=>t=>e&&t instanceof e)(typeof Uint8Array<"u"&&Oa(Uint8Array)),RS=(e,t)=>{let r=(e&&e[Symbol.iterator]).call(e),n;for(;(n=r.next())&&!n.done;){let s=n.value;t.call(e,s[0],s[1])}},PS=(e,t)=>{let i,r=[];for(;(i=e.exec(t))!==null;)r.push(i);return r},FS=vt("HTMLFormElement"),jS=e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(i,r,n){return r.toUpperCase()+n}),wh=(({hasOwnProperty:e})=>(t,i)=>e.call(t,i))(Object.prototype),MS=vt("RegExp"),Ah=(e,t)=>{let i=Object.getOwnPropertyDescriptors(e),r={};Tr(i,(n,s)=>{let o;(o=t(n,s,e))!==!1&&(r[s]=o||n)}),Object.defineProperties(e,r)},qS=e=>{Ah(e,(t,i)=>{if(pt(e)&&["arguments","caller","callee"].indexOf(i)!==-1)return!1;let r=e[i];if(pt(r)){if(t.enumerable=!1,"writable"in t){t.writable=!1;return}t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+i+"'")})}})},BS=(e,t)=>{let i={},r=n=>{n.forEach(s=>{i[s]=!0})};return Bi(e)?r(e):r(String(e).split(t)),i},US=()=>{},$S=(e,t)=>e!=null&&Number.isFinite(e=+e)?e:t,Sa="abcdefghijklmnopqrstuvwxyz",Eh="0123456789",Dh={DIGIT:Eh,ALPHA:Sa,ALPHA_DIGIT:Sa+Sa.toUpperCase()+Eh},zS=(e=16,t=Dh.ALPHA_DIGIT)=>{let i="",{length:r}=t;for(;e--;)i+=t[Math.random()*r|0];return i};function HS(e){return!!(e&&pt(e.append)&&e[Symbol.toStringTag]==="FormData"&&e[Symbol.iterator])}var GS=e=>{let t=new Array(10),i=(r,n)=>{if(kn(r)){if(t.indexOf(r)>=0)return;if(!("toJSON"in r)){t[n]=r;let s=Bi(r)?[]:{};return Tr(r,(o,a)=>{let c=i(o,n+1);!_r(c)&&(s[a]=c)}),t[n]=void 0,s}}return r};return i(e,0)},VS=vt("AsyncFunction"),XS=e=>e&&(kn(e)||pt(e))&&pt(e.then)&&pt(e.catch),D={isArray:Bi,isArrayBuffer:_h,isBuffer:pS,isFormData:bS,isArrayBufferView:dS,isString:fS,isNumber:Th,isBoolean:hS,isObject:kn,isPlainObject:In,isReadableStream:ES,isRequest:_S,isResponse:TS,isHeaders:SS,isUndefined:_r,isDate:mS,isFile:gS,isBlob:xS,isRegExp:MS,isFunction:pt,isStream:yS,isURLSearchParams:wS,isTypedArray:kS,isFileList:vS,forEach:Tr,merge:Ca,extend:OS,trim:CS,stripBOM:AS,inherits:DS,toFlatObject:IS,kindOf:Nn,kindOfTest:vt,endsWith:NS,toArray:LS,forEachEntry:RS,matchAll:PS,isHTMLForm:FS,hasOwnProperty:wh,hasOwnProp:wh,reduceDescriptors:Ah,freezeMethods:qS,toObjectSet:BS,toCamelCase:jS,noop:US,toFiniteNumber:$S,findKey:Sh,global:Ch,isContextDefined:Oh,ALPHABET:Dh,generateString:zS,isSpecCompliantForm:HS,toJSONObject:GS,isAsyncFn:VS,isThenable:XS};function Ui(e,t,i,r,n){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack,this.message=e,this.name="AxiosError",t&&(this.code=t),i&&(this.config=i),r&&(this.request=r),n&&(this.response=n)}D.inherits(Ui,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:D.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var Ih=Ui.prototype,Nh={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(e=>{Nh[e]={value:e}});Object.defineProperties(Ui,Nh);Object.defineProperty(Ih,"isAxiosError",{value:!0});Ui.from=(e,t,i,r,n,s)=>{let o=Object.create(Ih);return D.toFlatObject(e,o,function(c){return c!==Error.prototype},a=>a!=="isAxiosError"),Ui.call(o,e.message,t,i,r,n),o.cause=e,o.name=e.name,s&&Object.assign(o,s),o};var q=Ui;var fm=ae(dm(),1),Fn=fm.default;function Ma(e){return D.isPlainObject(e)||D.isArray(e)}function mm(e){return D.endsWith(e,"[]")?e.slice(0,-2):e}function hm(e,t,i){return e?e.concat(t).map(function(n,s){return n=mm(n),!i&&s?"["+n+"]":n}).join(i?".":""):t}function IC(e){return D.isArray(e)&&!e.some(Ma)}var NC=D.toFlatObject(D,{},null,function(t){return/^is[A-Z]/.test(t)});function LC(e,t,i){if(!D.isObject(e))throw new TypeError("target must be an object");t=t||new(Fn||FormData),i=D.toFlatObject(i,{metaTokens:!0,dots:!1,indexes:!1},!1,function(v,E){return!D.isUndefined(E[v])});let r=i.metaTokens,n=i.visitor||m,s=i.dots,o=i.indexes,c=(i.Blob||typeof Blob<"u"&&Blob)&&D.isSpecCompliantForm(t);if(!D.isFunction(n))throw new TypeError("visitor must be a function");function u(h){if(h===null)return"";if(D.isDate(h))return h.toISOString();if(!c&&D.isBlob(h))throw new q("Blob is not supported. Use a Buffer instead.");return D.isArrayBuffer(h)||D.isTypedArray(h)?c&&typeof Blob=="function"?new Blob([h]):Buffer.from(h):h}function m(h,v,E){let S=h;if(h&&!E&&typeof h=="object"){if(D.endsWith(v,"{}"))v=r?v:v.slice(0,-2),h=JSON.stringify(h);else if(D.isArray(h)&&IC(h)||(D.isFileList(h)||D.endsWith(v,"[]"))&&(S=D.toArray(h)))return v=mm(v),S.forEach(function(l,d){!(D.isUndefined(l)||l===null)&&t.append(o===!0?hm([v],d,s):o===null?v:v+"[]",u(l))}),!1}return Ma(h)?!0:(t.append(hm(E,v,s),u(h)),!1)}let g=[],x=Object.assign(NC,{defaultVisitor:m,convertValue:u,isVisitable:Ma});function p(h,v){if(!D.isUndefined(h)){if(g.indexOf(h)!==-1)throw Error("Circular reference detected in "+v.join("."));g.push(h),D.forEach(h,function(S,_){(!(D.isUndefined(S)||S===null)&&n.call(t,S,D.isString(_)?_.trim():_,v,x))===!0&&p(S,v?v.concat(_):[_])}),g.pop()}}if(!D.isObject(e))throw new TypeError("data must be an object");return p(e),t}var Zt=LC;function gm(e){let t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,function(r){return t[r]})}function xm(e,t){this._pairs=[],e&&Zt(e,this,t)}var vm=xm.prototype;vm.append=function(t,i){this._pairs.push([t,i])};vm.toString=function(t){let i=t?function(r){return t.call(this,r,gm)}:gm;return this._pairs.map(function(n){return i(n[0])+"="+i(n[1])},"").join("&")};var ym=xm;function kC(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function di(e,t,i){if(!t)return e;let r=i&&i.encode||kC,n=i&&i.serialize,s;if(n?s=n(t,i):s=D.isURLSearchParams(t)?t.toString():new ym(t,i).toString(r),s){let o=e.indexOf("#");o!==-1&&(e=e.slice(0,o)),e+=(e.indexOf("?")===-1?"?":"&")+s}return e}var qa=class{constructor(){this.handlers=[]}use(t,i,r){return this.handlers.push({fulfilled:t,rejected:i,synchronous:r?r.synchronous:!1,runWhen:r?r.runWhen:null}),this.handlers.length-1}eject(t){this.handlers[t]&&(this.handlers[t]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(t){D.forEach(this.handlers,function(r){r!==null&&t(r)})}},Ba=qa;var $i={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1};var bm=ae(require("url"),1),wm=bm.default.URLSearchParams;var Em={isNode:!0,classes:{URLSearchParams:wm,FormData:Fn,Blob:typeof Blob<"u"&&Blob||null},protocols:["http","https","file","data"]};var $a={};nl($a,{hasBrowserEnv:()=>Ua,hasStandardBrowserEnv:()=>RC,hasStandardBrowserWebWorkerEnv:()=>PC,origin:()=>FC});var Ua=typeof window<"u"&&typeof document<"u",RC=(e=>Ua&&["ReactNative","NativeScript","NS"].indexOf(e)<0)(typeof navigator<"u"&&navigator.product),PC=typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&typeof self.importScripts=="function",FC=Ua&&window.location.href||"http://localhost";var Ee={...$a,...Em};function za(e,t){return Zt(e,new Ee.classes.URLSearchParams,Object.assign({visitor:function(i,r,n,s){return Ee.isNode&&D.isBuffer(i)?(this.append(r,i.toString("base64")),!1):s.defaultVisitor.apply(this,arguments)}},t))}function jC(e){return D.matchAll(/\w+|\[(\w*)]/g,e).map(t=>t[0]==="[]"?"":t[1]||t[0])}function MC(e){let t={},i=Object.keys(e),r,n=i.length,s;for(r=0;r<n;r++)s=i[r],t[s]=e[s];return t}function qC(e){function t(i,r,n,s){let o=i[s++];if(o==="__proto__")return!0;let a=Number.isFinite(+o),c=s>=i.length;return o=!o&&D.isArray(n)?n.length:o,c?(D.hasOwnProp(n,o)?n[o]=[n[o],r]:n[o]=r,!a):((!n[o]||!D.isObject(n[o]))&&(n[o]=[]),t(i,r,n[o],s)&&D.isArray(n[o])&&(n[o]=MC(n[o])),!a)}if(D.isFormData(e)&&D.isFunction(e.entries)){let i={};return D.forEachEntry(e,(r,n)=>{t(jC(r),n,i,0)}),i}return null}var jn=qC;function BC(e,t,i){if(D.isString(e))try{return(t||JSON.parse)(e),D.trim(e)}catch(r){if(r.name!=="SyntaxError")throw r}return(i||JSON.stringify)(e)}var Ha={transitional:$i,adapter:["xhr","http","fetch"],transformRequest:[function(t,i){let r=i.getContentType()||"",n=r.indexOf("application/json")>-1,s=D.isObject(t);if(s&&D.isHTMLForm(t)&&(t=new FormData(t)),D.isFormData(t))return n?JSON.stringify(jn(t)):t;if(D.isArrayBuffer(t)||D.isBuffer(t)||D.isStream(t)||D.isFile(t)||D.isBlob(t)||D.isReadableStream(t))return t;if(D.isArrayBufferView(t))return t.buffer;if(D.isURLSearchParams(t))return i.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),t.toString();let a;if(s){if(r.indexOf("application/x-www-form-urlencoded")>-1)return za(t,this.formSerializer).toString();if((a=D.isFileList(t))||r.indexOf("multipart/form-data")>-1){let c=this.env&&this.env.FormData;return Zt(a?{"files[]":t}:t,c&&new c,this.formSerializer)}}return s||n?(i.setContentType("application/json",!1),BC(t)):t}],transformResponse:[function(t){let i=this.transitional||Ha.transitional,r=i&&i.forcedJSONParsing,n=this.responseType==="json";if(D.isResponse(t)||D.isReadableStream(t))return t;if(t&&D.isString(t)&&(r&&!this.responseType||n)){let o=!(i&&i.silentJSONParsing)&&n;try{return JSON.parse(t)}catch(a){if(o)throw a.name==="SyntaxError"?q.from(a,q.ERR_BAD_RESPONSE,this,null,this.response):a}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Ee.classes.FormData,Blob:Ee.classes.Blob},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};D.forEach(["delete","get","head","post","put","patch"],e=>{Ha.headers[e]={}});var zi=Ha;var UC=D.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),_m=e=>{let t={},i,r,n;return e&&e.split(`
`).forEach(function(o){n=o.indexOf(":"),i=o.substring(0,n).trim().toLowerCase(),r=o.substring(n+1).trim(),!(!i||t[i]&&UC[i])&&(i==="set-cookie"?t[i]?t[i].push(r):t[i]=[r]:t[i]=t[i]?t[i]+", "+r:r)}),t};var Tm=Symbol("internals");function Sr(e){return e&&String(e).trim().toLowerCase()}function Mn(e){return e===!1||e==null?e:D.isArray(e)?e.map(Mn):String(e)}function $C(e){let t=Object.create(null),i=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g,r;for(;r=i.exec(e);)t[r[1]]=r[2];return t}var zC=e=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim());function Ga(e,t,i,r,n){if(D.isFunction(r))return r.call(this,t,i);if(n&&(t=i),!!D.isString(t)){if(D.isString(r))return t.indexOf(r)!==-1;if(D.isRegExp(r))return r.test(t)}}function HC(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(t,i,r)=>i.toUpperCase()+r)}function GC(e,t){let i=D.toCamelCase(" "+t);["get","set","has"].forEach(r=>{Object.defineProperty(e,r+i,{value:function(n,s,o){return this[r].call(this,t,n,s,o)},configurable:!0})})}var Hi=class{constructor(t){t&&this.set(t)}set(t,i,r){let n=this;function s(a,c,u){let m=Sr(c);if(!m)throw new Error("header name must be a non-empty string");let g=D.findKey(n,m);(!g||n[g]===void 0||u===!0||u===void 0&&n[g]!==!1)&&(n[g||c]=Mn(a))}let o=(a,c)=>D.forEach(a,(u,m)=>s(u,m,c));if(D.isPlainObject(t)||t instanceof this.constructor)o(t,i);else if(D.isString(t)&&(t=t.trim())&&!zC(t))o(_m(t),i);else if(D.isHeaders(t))for(let[a,c]of t.entries())s(c,a,r);else t!=null&&s(i,t,r);return this}get(t,i){if(t=Sr(t),t){let r=D.findKey(this,t);if(r){let n=this[r];if(!i)return n;if(i===!0)return $C(n);if(D.isFunction(i))return i.call(this,n,r);if(D.isRegExp(i))return i.exec(n);throw new TypeError("parser must be boolean|regexp|function")}}}has(t,i){if(t=Sr(t),t){let r=D.findKey(this,t);return!!(r&&this[r]!==void 0&&(!i||Ga(this,this[r],r,i)))}return!1}delete(t,i){let r=this,n=!1;function s(o){if(o=Sr(o),o){let a=D.findKey(r,o);a&&(!i||Ga(r,r[a],a,i))&&(delete r[a],n=!0)}}return D.isArray(t)?t.forEach(s):s(t),n}clear(t){let i=Object.keys(this),r=i.length,n=!1;for(;r--;){let s=i[r];(!t||Ga(this,this[s],s,t,!0))&&(delete this[s],n=!0)}return n}normalize(t){let i=this,r={};return D.forEach(this,(n,s)=>{let o=D.findKey(r,s);if(o){i[o]=Mn(n),delete i[s];return}let a=t?HC(s):String(s).trim();a!==s&&delete i[s],i[a]=Mn(n),r[a]=!0}),this}concat(...t){return this.constructor.concat(this,...t)}toJSON(t){let i=Object.create(null);return D.forEach(this,(r,n)=>{r!=null&&r!==!1&&(i[n]=t&&D.isArray(r)?r.join(", "):r)}),i}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([t,i])=>t+": "+i).join(`
`)}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(t){return t instanceof this?t:new this(t)}static concat(t,...i){let r=new this(t);return i.forEach(n=>r.set(n)),r}static accessor(t){let r=(this[Tm]=this[Tm]={accessors:{}}).accessors,n=this.prototype;function s(o){let a=Sr(o);r[a]||(GC(n,o),r[a]=!0)}return D.isArray(t)?t.forEach(s):s(t),this}};Hi.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]);D.reduceDescriptors(Hi.prototype,({value:e},t)=>{let i=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(r){this[i]=r}}});D.freezeMethods(Hi);var xe=Hi;function Cr(e,t){let i=this||zi,r=t||i,n=xe.from(r.headers),s=r.data;return D.forEach(e,function(a){s=a.call(i,s,n.normalize(),t?t.status:void 0)}),n.normalize(),s}function Or(e){return!!(e&&e.__CANCEL__)}function Sm(e,t,i){q.call(this,e??"canceled",q.ERR_CANCELED,t,i),this.name="CanceledError"}D.inherits(Sm,q,{__CANCEL__:!0});var rt=Sm;function Ot(e,t,i){let r=i.config.validateStatus;!i.status||!r||r(i.status)?e(i):t(new q("Request failed with status code "+i.status,[q.ERR_BAD_REQUEST,q.ERR_BAD_RESPONSE][Math.floor(i.status/100)-4],i.config,i.request,i))}function Va(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}function Xa(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}function fi(e,t){return e&&!Va(t)?Xa(e,t):t}var ng=ae(Om(),1),sg=ae(require("http"),1),og=ae(require("https"),1),ag=ae(require("util"),1),cg=ae(Gm(),1),qt=ae(require("zlib"),1);var gi="1.7.2";function kr(e){let t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}var IO=/^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\s\S]*)$/;function lc(e,t,i){let r=i&&i.Blob||Ee.classes.Blob,n=kr(e);if(t===void 0&&r&&(t=!0),n==="data"){e=n.length?e.slice(n.length+1):e;let s=IO.exec(e);if(!s)throw new q("Invalid URL",q.ERR_INVALID_URL);let o=s[1],a=s[2],c=s[3],u=Buffer.from(decodeURIComponent(c),a?"base64":"utf8");if(t){if(!r)throw new q("Blob is not supported",q.ERR_NOT_SUPPORT);return new r([u],{type:o})}return u}throw new q("Unsupported protocol "+n,q.ERR_NOT_SUPPORT)}var xi=ae(require("stream"),1);var Vm=ae(require("stream"),1);function NO(e,t){let i=0,r=1e3/t,n=null;return function(){let o=this===!0,a=Date.now();if(o||a-i>r)return n&&(clearTimeout(n),n=null),i=a,e.apply(null,arguments);n||(n=setTimeout(()=>(n=null,i=Date.now(),e.apply(null,arguments)),r-(a-i)))}}var Hn=NO;function LO(e,t){e=e||10;let i=new Array(e),r=new Array(e),n=0,s=0,o;return t=t!==void 0?t:1e3,function(c){let u=Date.now(),m=r[s];o||(o=u),i[n]=c,r[n]=u;let g=s,x=0;for(;g!==n;)x+=i[g++],g=g%e;if(n=(n+1)%e,n===s&&(s=(s+1)%e),u-o<t)return;let p=m&&u-m;return p?Math.round(x*1e3/p):void 0}}var Gn=LO;var Vn=Symbol("internals"),pc=class extends Vm.default.Transform{constructor(t){t=D.toFlatObject(t,{maxRate:0,chunkSize:64*1024,minChunkSize:100,timeWindow:500,ticksRate:2,samplesCount:15},null,(a,c)=>!D.isUndefined(c[a])),super({readableHighWaterMark:t.chunkSize});let i=this,r=this[Vn]={length:t.length,timeWindow:t.timeWindow,ticksRate:t.ticksRate,chunkSize:t.chunkSize,maxRate:t.maxRate,minChunkSize:t.minChunkSize,bytesSeen:0,isCaptured:!1,notifiedBytesLoaded:0,ts:Date.now(),bytes:0,onReadCallback:null},n=Gn(r.ticksRate*t.samplesCount,r.timeWindow);this.on("newListener",a=>{a==="progress"&&(r.isCaptured||(r.isCaptured=!0))});let s=0;r.updateProgress=Hn(function(){let c=r.length,u=r.bytesSeen,m=u-s;if(!m||i.destroyed)return;let g=n(m);s=u,process.nextTick(()=>{i.emit("progress",{loaded:u,total:c,progress:c?u/c:void 0,bytes:m,rate:g||void 0,estimated:g&&c&&u<=c?(c-u)/g:void 0,lengthComputable:c!=null})})},r.ticksRate);let o=()=>{r.updateProgress.call(!0)};this.once("end",o),this.once("error",o)}_read(t){let i=this[Vn];return i.onReadCallback&&i.onReadCallback(),super._read(t)}_transform(t,i,r){let n=this,s=this[Vn],o=s.maxRate,a=this.readableHighWaterMark,c=s.timeWindow,u=1e3/c,m=o/u,g=s.minChunkSize!==!1?Math.max(s.minChunkSize,m*.01):0;function x(h,v){let E=Buffer.byteLength(h);s.bytesSeen+=E,s.bytes+=E,s.isCaptured&&s.updateProgress(),n.push(h)?process.nextTick(v):s.onReadCallback=()=>{s.onReadCallback=null,process.nextTick(v)}}let p=(h,v)=>{let E=Buffer.byteLength(h),S=null,_=a,l,d=0;if(o){let f=Date.now();(!s.ts||(d=f-s.ts)>=c)&&(s.ts=f,l=m-s.bytes,s.bytes=l<0?-l:0,d=0),l=m-s.bytes}if(o){if(l<=0)return setTimeout(()=>{v(null,h)},c-d);l<_&&(_=l)}_&&E>_&&E-_>g&&(S=h.subarray(_),h=h.subarray(0,_)),x(h,S?()=>{process.nextTick(v,null,S)}:v)};p(t,function h(v,E){if(v)return r(v);E?p(E,h):r(null)})}setLength(t){return this[Vn].length=+t,this}},dc=pc;var ug=require("events");var Ym=require("util"),Wm=require("stream");var{asyncIterator:Xm}=Symbol,kO=async function*(e){e.stream?yield*e.stream():e.arrayBuffer?yield await e.arrayBuffer():e[Xm]?yield*e[Xm]():yield e},Xn=kO;var RO=D.ALPHABET.ALPHA_DIGIT+"-_",Rr=new Ym.TextEncoder,ei=`\r
`,PO=Rr.encode(ei),FO=2,fc=class{constructor(t,i){let{escapeName:r}=this.constructor,n=D.isString(i),s=`Content-Disposition: form-data; name="${r(t)}"${!n&&i.name?`; filename="${r(i.name)}"`:""}${ei}`;n?i=Rr.encode(String(i).replace(/\r?\n|\r\n?/g,ei)):s+=`Content-Type: ${i.type||"application/octet-stream"}${ei}`,this.headers=Rr.encode(s+ei),this.contentLength=n?i.byteLength:i.size,this.size=this.headers.byteLength+this.contentLength+FO,this.name=t,this.value=i}async*encode(){yield this.headers;let{value:t}=this;D.isTypedArray(t)?yield t:yield*Xn(t),yield PO}static escapeName(t){return String(t).replace(/[\r\n"]/g,i=>({"\r":"%0D","\n":"%0A",'"':"%22"})[i])}},jO=(e,t,i)=>{let{tag:r="form-data-boundary",size:n=25,boundary:s=r+"-"+D.generateString(n,RO)}=i||{};if(!D.isFormData(e))throw TypeError("FormData instance required");if(s.length<1||s.length>70)throw Error("boundary must be 10-70 characters long");let o=Rr.encode("--"+s+ei),a=Rr.encode("--"+s+"--"+ei+ei),c=a.byteLength,u=Array.from(e.entries()).map(([g,x])=>{let p=new fc(g,x);return c+=p.size,p});c+=o.byteLength*u.length,c=D.toFiniteNumber(c);let m={"Content-Type":`multipart/form-data; boundary=${s}`};return Number.isFinite(c)&&(m["Content-Length"]=c),t&&t(m),Wm.Readable.from(async function*(){for(let g of u)yield o,yield*g.encode();yield a}())},Km=jO;var Jm=ae(require("stream"),1),hc=class extends Jm.default.Transform{__transform(t,i,r){this.push(t),r()}_transform(t,i,r){if(t.length!==0&&(this._transform=this.__transform,t[0]!==120)){let n=Buffer.alloc(2);n[0]=120,n[1]=156,this.push(n,i)}this.__transform(t,i,r)}},Zm=hc;var MO=(e,t)=>D.isAsyncFn(e)?function(...i){let r=i.pop();e.apply(this,i).then(n=>{try{t?r(null,...t(n)):r(null,n)}catch(s){r(s)}},r)}:e,Qm=MO;var eg={flush:qt.default.constants.Z_SYNC_FLUSH,finishFlush:qt.default.constants.Z_SYNC_FLUSH},qO={flush:qt.default.constants.BROTLI_OPERATION_FLUSH,finishFlush:qt.default.constants.BROTLI_OPERATION_FLUSH},tg=D.isFunction(qt.default.createBrotliDecompress),{http:BO,https:UO}=cg.default,$O=/https:?/,ig=Ee.protocols.map(e=>e+":");function zO(e,t){e.beforeRedirects.proxy&&e.beforeRedirects.proxy(e),e.beforeRedirects.config&&e.beforeRedirects.config(e,t)}function lg(e,t,i){let r=t;if(!r&&r!==!1){let n=(0,ng.getProxyForUrl)(i);n&&(r=new URL(n))}if(r){if(r.username&&(r.auth=(r.username||"")+":"+(r.password||"")),r.auth){(r.auth.username||r.auth.password)&&(r.auth=(r.auth.username||"")+":"+(r.auth.password||""));let s=Buffer.from(r.auth,"utf8").toString("base64");e.headers["Proxy-Authorization"]="Basic "+s}e.headers.host=e.hostname+(e.port?":"+e.port:"");let n=r.hostname||r.host;e.hostname=n,e.host=n,e.port=r.port,e.path=i,r.protocol&&(e.protocol=r.protocol.includes(":")?r.protocol:`${r.protocol}:`)}e.beforeRedirects.proxy=function(s){lg(s,t,s.href)}}var HO=typeof process<"u"&&D.kindOf(process)==="process",GO=e=>new Promise((t,i)=>{let r,n,s=(c,u)=>{n||(n=!0,r&&r(c,u))},o=c=>{s(c),t(c)},a=c=>{s(c,!0),i(c)};e(o,a,c=>r=c).catch(a)}),VO=({address:e,family:t})=>{if(!D.isString(e))throw TypeError("address must be a string");return{address:e,family:t||(e.indexOf(".")<0?6:4)}},rg=(e,t)=>VO(D.isObject(e)?e:{address:e,family:t}),pg=HO&&function(t){return GO(async function(r,n,s){let{data:o,lookup:a,family:c}=t,{responseType:u,responseEncoding:m}=t,g=t.method.toUpperCase(),x,p=!1,h;if(a){let z=Qm(a,j=>D.isArray(j)?j:[j]);a=(j,oe,Se)=>{z(j,oe,(pe,lt,Vt)=>{if(pe)return Se(pe);let He=D.isArray(lt)?lt.map(Ge=>rg(Ge)):[rg(lt,Vt)];oe.all?Se(pe,He):Se(pe,He[0].address,He[0].family)})}}let v=new ug.EventEmitter,E=()=>{t.cancelToken&&t.cancelToken.unsubscribe(S),t.signal&&t.signal.removeEventListener("abort",S),v.removeAllListeners()};s((z,j)=>{x=!0,j&&(p=!0,E())});function S(z){v.emit("abort",!z||z.type?new rt(null,t,h):z)}v.once("abort",n),(t.cancelToken||t.signal)&&(t.cancelToken&&t.cancelToken.subscribe(S),t.signal&&(t.signal.aborted?S():t.signal.addEventListener("abort",S)));let _=fi(t.baseURL,t.url),l=new URL(_,"http://localhost"),d=l.protocol||ig[0];if(d==="data:"){let z;if(g!=="GET")return Ot(r,n,{status:405,statusText:"method not allowed",headers:{},config:t});try{z=lc(t.url,u==="blob",{Blob:t.env&&t.env.Blob})}catch(j){throw q.from(j,q.ERR_BAD_REQUEST,t)}return u==="text"?(z=z.toString(m),(!m||m==="utf8")&&(z=D.stripBOM(z))):u==="stream"&&(z=xi.default.Readable.from(z)),Ot(r,n,{data:z,status:200,statusText:"OK",headers:new xe,config:t})}if(ig.indexOf(d)===-1)return n(new q("Unsupported protocol "+d,q.ERR_BAD_REQUEST,t));let f=xe.from(t.headers).normalize();f.set("User-Agent","axios/"+gi,!1);let w=t.onDownloadProgress,O=t.onUploadProgress,y=t.maxRate,A,C;if(D.isSpecCompliantForm(o)){let z=f.getContentType(/boundary=([-_\w\d]{10,70})/i);o=Km(o,j=>{f.set(j)},{tag:`axios-${gi}-boundary`,boundary:z&&z[1]||void 0})}else if(D.isFormData(o)&&D.isFunction(o.getHeaders)){if(f.set(o.getHeaders()),!f.hasContentLength())try{let z=await ag.default.promisify(o.getLength).call(o);Number.isFinite(z)&&z>=0&&f.setContentLength(z)}catch{}}else if(D.isBlob(o))o.size&&f.setContentType(o.type||"application/octet-stream"),f.setContentLength(o.size||0),o=xi.default.Readable.from(Xn(o));else if(o&&!D.isStream(o)){if(!Buffer.isBuffer(o))if(D.isArrayBuffer(o))o=Buffer.from(new Uint8Array(o));else if(D.isString(o))o=Buffer.from(o,"utf-8");else return n(new q("Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream",q.ERR_BAD_REQUEST,t));if(f.setContentLength(o.length,!1),t.maxBodyLength>-1&&o.length>t.maxBodyLength)return n(new q("Request body larger than maxBodyLength limit",q.ERR_BAD_REQUEST,t))}let I=D.toFiniteNumber(f.getContentLength());D.isArray(y)?(A=y[0],C=y[1]):A=C=y,o&&(O||A)&&(D.isStream(o)||(o=xi.default.Readable.from(o,{objectMode:!1})),o=xi.default.pipeline([o,new dc({length:I,maxRate:D.toFiniteNumber(A)})],D.noop),O&&o.on("progress",z=>{O(Object.assign(z,{upload:!0}))}));let R;if(t.auth){let z=t.auth.username||"",j=t.auth.password||"";R=z+":"+j}if(!R&&l.username){let z=l.username,j=l.password;R=z+":"+j}R&&f.delete("authorization");let F;try{F=di(l.pathname+l.search,t.params,t.paramsSerializer).replace(/^\?/,"")}catch(z){let j=new Error(z.message);return j.config=t,j.url=t.url,j.exists=!0,n(j)}f.set("Accept-Encoding","gzip, compress, deflate"+(tg?", br":""),!1);let G={path:F,method:g,headers:f.toJSON(),agents:{http:t.httpAgent,https:t.httpsAgent},auth:R,protocol:d,family:c,beforeRedirect:zO,beforeRedirects:{}};!D.isUndefined(a)&&(G.lookup=a),t.socketPath?G.socketPath=t.socketPath:(G.hostname=l.hostname,G.port=l.port,lg(G,t.proxy,d+"//"+l.hostname+(l.port?":"+l.port:"")+G.path));let K,$=$O.test(G.protocol);if(G.agent=$?t.httpsAgent:t.httpAgent,t.transport?K=t.transport:t.maxRedirects===0?K=$?og.default:sg.default:(t.maxRedirects&&(G.maxRedirects=t.maxRedirects),t.beforeRedirect&&(G.beforeRedirects.config=t.beforeRedirect),K=$?UO:BO),t.maxBodyLength>-1?G.maxBodyLength=t.maxBodyLength:G.maxBodyLength=1/0,t.insecureHTTPParser&&(G.insecureHTTPParser=t.insecureHTTPParser),h=K.request(G,function(j){if(h.destroyed)return;let oe=[j],Se=+j.headers["content-length"];if(w){let Ge=new dc({length:D.toFiniteNumber(Se),maxRate:D.toFiniteNumber(C)});w&&Ge.on("progress",T=>{w(Object.assign(T,{download:!0}))}),oe.push(Ge)}let pe=j,lt=j.req||h;if(t.decompress!==!1&&j.headers["content-encoding"])switch((g==="HEAD"||j.statusCode===204)&&delete j.headers["content-encoding"],(j.headers["content-encoding"]||"").toLowerCase()){case"gzip":case"x-gzip":case"compress":case"x-compress":oe.push(qt.default.createUnzip(eg)),delete j.headers["content-encoding"];break;case"deflate":oe.push(new Zm),oe.push(qt.default.createUnzip(eg)),delete j.headers["content-encoding"];break;case"br":tg&&(oe.push(qt.default.createBrotliDecompress(qO)),delete j.headers["content-encoding"])}pe=oe.length>1?xi.default.pipeline(oe,D.noop):oe[0];let Vt=xi.default.finished(pe,()=>{Vt(),E()}),He={status:j.statusCode,statusText:j.statusMessage,headers:new xe(j.headers),config:t,request:lt};if(u==="stream")He.data=pe,Ot(r,n,He);else{let Ge=[],T=0;pe.on("data",function(k){Ge.push(k),T+=k.length,t.maxContentLength>-1&&T>t.maxContentLength&&(p=!0,pe.destroy(),n(new q("maxContentLength size of "+t.maxContentLength+" exceeded",q.ERR_BAD_RESPONSE,t,lt)))}),pe.on("aborted",function(){if(p)return;let k=new q("maxContentLength size of "+t.maxContentLength+" exceeded",q.ERR_BAD_RESPONSE,t,lt);pe.destroy(k),n(k)}),pe.on("error",function(k){h.destroyed||n(q.from(k,null,t,lt))}),pe.on("end",function(){try{let k=Ge.length===1?Ge[0]:Buffer.concat(Ge);u!=="arraybuffer"&&(k=k.toString(m),(!m||m==="utf8")&&(k=D.stripBOM(k))),He.data=k}catch(k){return n(q.from(k,null,t,He.request,He))}Ot(r,n,He)})}v.once("abort",Ge=>{pe.destroyed||(pe.emit("error",Ge),pe.destroy())})}),v.once("abort",z=>{n(z),h.destroy(z)}),h.on("error",function(j){n(q.from(j,null,t,h))}),h.on("socket",function(j){j.setKeepAlive(!0,1e3*60)}),t.timeout){let z=parseInt(t.timeout,10);if(Number.isNaN(z)){n(new q("error trying to parse `config.timeout` to int",q.ERR_BAD_OPTION_VALUE,t,h));return}h.setTimeout(z,function(){if(x)return;let oe=t.timeout?"timeout of "+t.timeout+"ms exceeded":"timeout exceeded",Se=t.transitional||$i;t.timeoutErrorMessage&&(oe=t.timeoutErrorMessage),n(new q(oe,Se.clarifyTimeoutError?q.ETIMEDOUT:q.ECONNABORTED,t,h)),S()})}if(D.isStream(o)){let z=!1,j=!1;o.on("end",()=>{z=!0}),o.once("error",oe=>{j=!0,h.destroy(oe)}),o.on("close",()=>{!z&&!j&&S(new rt("Request stream has been aborted",t,h))}),o.pipe(h)}else h.end(o)})};var Wi=(e,t,i=3)=>{let r=0,n=Gn(50,250);return Hn(s=>{let o=s.loaded,a=s.lengthComputable?s.total:void 0,c=o-r,u=n(c),m=o<=a;r=o;let g={loaded:o,total:a,progress:a?o/a:void 0,bytes:c,rate:u||void 0,estimated:u&&a&&m?(a-o)/u:void 0,event:s,lengthComputable:a!=null};g[t?"download":"upload"]=!0,e(g)},i)};var dg=Ee.hasStandardBrowserEnv?function(){let t=/(msie|trident)/i.test(navigator.userAgent),i=document.createElement("a"),r;function n(s){let o=s;return t&&(i.setAttribute("href",o),o=i.href),i.setAttribute("href",o),{href:i.href,protocol:i.protocol?i.protocol.replace(/:$/,""):"",host:i.host,search:i.search?i.search.replace(/^\?/,""):"",hash:i.hash?i.hash.replace(/^#/,""):"",hostname:i.hostname,port:i.port,pathname:i.pathname.charAt(0)==="/"?i.pathname:"/"+i.pathname}}return r=n(window.location.href),function(o){let a=D.isString(o)?n(o):o;return a.protocol===r.protocol&&a.host===r.host}}():function(){return function(){return!0}}();var fg=Ee.hasStandardBrowserEnv?{write(e,t,i,r,n,s){let o=[e+"="+encodeURIComponent(t)];D.isNumber(i)&&o.push("expires="+new Date(i).toGMTString()),D.isString(r)&&o.push("path="+r),D.isString(n)&&o.push("domain="+n),s===!0&&o.push("secure"),document.cookie=o.join("; ")},read(e){let t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read(){return null},remove(){}};var hg=e=>e instanceof xe?{...e}:e;function bt(e,t){t=t||{};let i={};function r(u,m,g){return D.isPlainObject(u)&&D.isPlainObject(m)?D.merge.call({caseless:g},u,m):D.isPlainObject(m)?D.merge({},m):D.isArray(m)?m.slice():m}function n(u,m,g){if(D.isUndefined(m)){if(!D.isUndefined(u))return r(void 0,u,g)}else return r(u,m,g)}function s(u,m){if(!D.isUndefined(m))return r(void 0,m)}function o(u,m){if(D.isUndefined(m)){if(!D.isUndefined(u))return r(void 0,u)}else return r(void 0,m)}function a(u,m,g){if(g in t)return r(u,m);if(g in e)return r(void 0,u)}let c={url:s,method:s,data:s,baseURL:o,transformRequest:o,transformResponse:o,paramsSerializer:o,timeout:o,timeoutMessage:o,withCredentials:o,withXSRFToken:o,adapter:o,responseType:o,xsrfCookieName:o,xsrfHeaderName:o,onUploadProgress:o,onDownloadProgress:o,decompress:o,maxContentLength:o,maxBodyLength:o,beforeRedirect:o,transport:o,httpAgent:o,httpsAgent:o,cancelToken:o,socketPath:o,responseEncoding:o,validateStatus:a,headers:(u,m)=>n(hg(u),hg(m),!0)};return D.forEach(Object.keys(Object.assign({},e,t)),function(m){let g=c[m]||n,x=g(e[m],t[m],m);D.isUndefined(x)&&g!==a||(i[m]=x)}),i}var Yn=e=>{let t=bt({},e),{data:i,withXSRFToken:r,xsrfHeaderName:n,xsrfCookieName:s,headers:o,auth:a}=t;t.headers=o=xe.from(o),t.url=di(fi(t.baseURL,t.url),e.params,e.paramsSerializer),a&&o.set("Authorization","Basic "+btoa((a.username||"")+":"+(a.password?unescape(encodeURIComponent(a.password)):"")));let c;if(D.isFormData(i)){if(Ee.hasStandardBrowserEnv||Ee.hasStandardBrowserWebWorkerEnv)o.setContentType(void 0);else if((c=o.getContentType())!==!1){let[u,...m]=c?c.split(";").map(g=>g.trim()).filter(Boolean):[];o.setContentType([u||"multipart/form-data",...m].join("; "))}}if(Ee.hasStandardBrowserEnv&&(r&&D.isFunction(r)&&(r=r(t)),r||r!==!1&&dg(t.url))){let u=n&&s&&fg.read(s);u&&o.set(n,u)}return t};var XO=typeof XMLHttpRequest<"u",mg=XO&&function(e){return new Promise(function(i,r){let n=Yn(e),s=n.data,o=xe.from(n.headers).normalize(),{responseType:a}=n,c;function u(){n.cancelToken&&n.cancelToken.unsubscribe(c),n.signal&&n.signal.removeEventListener("abort",c)}let m=new XMLHttpRequest;m.open(n.method.toUpperCase(),n.url,!0),m.timeout=n.timeout;function g(){if(!m)return;let p=xe.from("getAllResponseHeaders"in m&&m.getAllResponseHeaders()),v={data:!a||a==="text"||a==="json"?m.responseText:m.response,status:m.status,statusText:m.statusText,headers:p,config:e,request:m};Ot(function(S){i(S),u()},function(S){r(S),u()},v),m=null}"onloadend"in m?m.onloadend=g:m.onreadystatechange=function(){!m||m.readyState!==4||m.status===0&&!(m.responseURL&&m.responseURL.indexOf("file:")===0)||setTimeout(g)},m.onabort=function(){m&&(r(new q("Request aborted",q.ECONNABORTED,n,m)),m=null)},m.onerror=function(){r(new q("Network Error",q.ERR_NETWORK,n,m)),m=null},m.ontimeout=function(){let h=n.timeout?"timeout of "+n.timeout+"ms exceeded":"timeout exceeded",v=n.transitional||$i;n.timeoutErrorMessage&&(h=n.timeoutErrorMessage),r(new q(h,v.clarifyTimeoutError?q.ETIMEDOUT:q.ECONNABORTED,n,m)),m=null},s===void 0&&o.setContentType(null),"setRequestHeader"in m&&D.forEach(o.toJSON(),function(h,v){m.setRequestHeader(v,h)}),D.isUndefined(n.withCredentials)||(m.withCredentials=!!n.withCredentials),a&&a!=="json"&&(m.responseType=n.responseType),typeof n.onDownloadProgress=="function"&&m.addEventListener("progress",Wi(n.onDownloadProgress,!0)),typeof n.onUploadProgress=="function"&&m.upload&&m.upload.addEventListener("progress",Wi(n.onUploadProgress)),(n.cancelToken||n.signal)&&(c=p=>{m&&(r(!p||p.type?new rt(null,e,m):p),m.abort(),m=null)},n.cancelToken&&n.cancelToken.subscribe(c),n.signal&&(n.signal.aborted?c():n.signal.addEventListener("abort",c)));let x=kr(n.url);if(x&&Ee.protocols.indexOf(x)===-1){r(new q("Unsupported protocol "+x+":",q.ERR_BAD_REQUEST,e));return}m.send(s||null)})};var YO=(e,t)=>{let i=new AbortController,r,n=function(c){if(!r){r=!0,o();let u=c instanceof Error?c:this.reason;i.abort(u instanceof q?u:new rt(u instanceof Error?u.message:u))}},s=t&&setTimeout(()=>{n(new q(`timeout ${t} of ms exceeded`,q.ETIMEDOUT))},t),o=()=>{e&&(s&&clearTimeout(s),s=null,e.forEach(c=>{c&&(c.removeEventListener?c.removeEventListener("abort",n):c.unsubscribe(n))}),e=null)};e.forEach(c=>c&&c.addEventListener&&c.addEventListener("abort",n));let{signal:a}=i;return a.unsubscribe=o,[a,()=>{s&&clearTimeout(s),s=null}]},gg=YO;var WO=function*(e,t){let i=e.byteLength;if(!t||i<t){yield e;return}let r=0,n;for(;r<i;)n=r+t,yield e.slice(r,n),r=n},KO=async function*(e,t,i){for await(let r of e)yield*WO(ArrayBuffer.isView(r)?r:await i(String(r)),t)},mc=(e,t,i,r,n)=>{let s=KO(e,t,n),o=0;return new ReadableStream({type:"bytes",async pull(a){let{done:c,value:u}=await s.next();if(c){a.close(),r();return}let m=u.byteLength;i&&i(o+=m),a.enqueue(new Uint8Array(u))},cancel(a){return r(a),s.return()}},{highWaterMark:2})};var xg=(e,t)=>{let i=e!=null;return r=>setTimeout(()=>t({lengthComputable:i,total:e,loaded:r}))},Kn=typeof fetch=="function"&&typeof Request=="function"&&typeof Response=="function",yg=Kn&&typeof ReadableStream=="function",gc=Kn&&(typeof TextEncoder=="function"?(e=>t=>e.encode(t))(new TextEncoder):async e=>new Uint8Array(await new Response(e).arrayBuffer())),JO=yg&&(()=>{let e=!1,t=new Request(Ee.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!t})(),vg=64*1024,xc=yg&&!!(()=>{try{return D.isReadableStream(new Response("").body)}catch{}})(),Wn={stream:xc&&(e=>e.body)};Kn&&(e=>{["text","arrayBuffer","blob","formData","stream"].forEach(t=>{!Wn[t]&&(Wn[t]=D.isFunction(e[t])?i=>i[t]():(i,r)=>{throw new q(`Response type '${t}' is not supported`,q.ERR_NOT_SUPPORT,r)})})})(new Response);var ZO=async e=>{if(e==null)return 0;if(D.isBlob(e))return e.size;if(D.isSpecCompliantForm(e))return(await new Request(e).arrayBuffer()).byteLength;if(D.isArrayBufferView(e))return e.byteLength;if(D.isURLSearchParams(e)&&(e=e+""),D.isString(e))return(await gc(e)).byteLength},QO=async(e,t)=>{let i=D.toFiniteNumber(e.getContentLength());return i??ZO(t)},bg=Kn&&(async e=>{let{url:t,method:i,data:r,signal:n,cancelToken:s,timeout:o,onDownloadProgress:a,onUploadProgress:c,responseType:u,headers:m,withCredentials:g="same-origin",fetchOptions:x}=Yn(e);u=u?(u+"").toLowerCase():"text";let[p,h]=n||s||o?gg([n,s],o):[],v,E,S=()=>{!v&&setTimeout(()=>{p&&p.unsubscribe()}),v=!0},_;try{if(c&&JO&&i!=="get"&&i!=="head"&&(_=await QO(m,r))!==0){let w=new Request(t,{method:"POST",body:r,duplex:"half"}),O;D.isFormData(r)&&(O=w.headers.get("content-type"))&&m.setContentType(O),w.body&&(r=mc(w.body,vg,xg(_,Wi(c)),null,gc))}D.isString(g)||(g=g?"cors":"omit"),E=new Request(t,{...x,signal:p,method:i.toUpperCase(),headers:m.normalize().toJSON(),body:r,duplex:"half",withCredentials:g});let l=await fetch(E),d=xc&&(u==="stream"||u==="response");if(xc&&(a||d)){let w={};["status","statusText","headers"].forEach(y=>{w[y]=l[y]});let O=D.toFiniteNumber(l.headers.get("content-length"));l=new Response(mc(l.body,vg,a&&xg(O,Wi(a,!0)),d&&S,gc),w)}u=u||"text";let f=await Wn[D.findKey(Wn,u)||"text"](l,e);return!d&&S(),h&&h(),await new Promise((w,O)=>{Ot(w,O,{data:f,headers:xe.from(l.headers),status:l.status,statusText:l.statusText,config:e,request:E})})}catch(l){throw S(),l&&l.name==="TypeError"&&/fetch/i.test(l.message)?Object.assign(new q("Network Error",q.ERR_NETWORK,e,E),{cause:l.cause||l}):q.from(l,l&&l.code,e,E)}});var vc={http:pg,xhr:mg,fetch:bg};D.forEach(vc,(e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch{}Object.defineProperty(e,"adapterName",{value:t})}});var wg=e=>`- ${e}`,e1=e=>D.isFunction(e)||e===null||e===!1,Jn={getAdapter:e=>{e=D.isArray(e)?e:[e];let{length:t}=e,i,r,n={};for(let s=0;s<t;s++){i=e[s];let o;if(r=i,!e1(i)&&(r=vc[(o=String(i)).toLowerCase()],r===void 0))throw new q(`Unknown adapter '${o}'`);if(r)break;n[o||"#"+s]=r}if(!r){let s=Object.entries(n).map(([a,c])=>`adapter ${a} `+(c===!1?"is not supported by the environment":"is not available in the build")),o=t?s.length>1?`since :
`+s.map(wg).join(`
`):" "+wg(s[0]):"as no adapter specified";throw new q("There is no suitable adapter to dispatch the request "+o,"ERR_NOT_SUPPORT")}return r},adapters:vc};function yc(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new rt(null,e)}function Zn(e){return yc(e),e.headers=xe.from(e.headers),e.data=Cr.call(e,e.transformRequest),["post","put","patch"].indexOf(e.method)!==-1&&e.headers.setContentType("application/x-www-form-urlencoded",!1),Jn.getAdapter(e.adapter||zi.adapter)(e).then(function(r){return yc(e),r.data=Cr.call(e,e.transformResponse,r),r.headers=xe.from(r.headers),r},function(r){return Or(r)||(yc(e),r&&r.response&&(r.response.data=Cr.call(e,e.transformResponse,r.response),r.response.headers=xe.from(r.response.headers))),Promise.reject(r)})}var bc={};["object","boolean","number","function","string","symbol"].forEach((e,t)=>{bc[e]=function(r){return typeof r===e||"a"+(t<1?"n ":" ")+e}});var Eg={};bc.transitional=function(t,i,r){function n(s,o){return"[Axios v"+gi+"] Transitional option '"+s+"'"+o+(r?". "+r:"")}return(s,o,a)=>{if(t===!1)throw new q(n(o," has been removed"+(i?" in "+i:"")),q.ERR_DEPRECATED);return i&&!Eg[o]&&(Eg[o]=!0,console.warn(n(o," has been deprecated since v"+i+" and will be removed in the near future"))),t?t(s,o,a):!0}};function t1(e,t,i){if(typeof e!="object")throw new q("options must be an object",q.ERR_BAD_OPTION_VALUE);let r=Object.keys(e),n=r.length;for(;n-- >0;){let s=r[n],o=t[s];if(o){let a=e[s],c=a===void 0||o(a,s,e);if(c!==!0)throw new q("option "+s+" must be "+c,q.ERR_BAD_OPTION_VALUE);continue}if(i!==!0)throw new q("Unknown option "+s,q.ERR_BAD_OPTION)}}var Qn={assertOptions:t1,validators:bc};var ti=Qn.validators,Ki=class{constructor(t){this.defaults=t,this.interceptors={request:new Ba,response:new Ba}}async request(t,i){try{return await this._request(t,i)}catch(r){if(r instanceof Error){let n;Error.captureStackTrace?Error.captureStackTrace(n={}):n=new Error;let s=n.stack?n.stack.replace(/^.+\n/,""):"";try{r.stack?s&&!String(r.stack).endsWith(s.replace(/^.+\n.+\n/,""))&&(r.stack+=`
`+s):r.stack=s}catch{}}throw r}}_request(t,i){typeof t=="string"?(i=i||{},i.url=t):i=t||{},i=bt(this.defaults,i);let{transitional:r,paramsSerializer:n,headers:s}=i;r!==void 0&&Qn.assertOptions(r,{silentJSONParsing:ti.transitional(ti.boolean),forcedJSONParsing:ti.transitional(ti.boolean),clarifyTimeoutError:ti.transitional(ti.boolean)},!1),n!=null&&(D.isFunction(n)?i.paramsSerializer={serialize:n}:Qn.assertOptions(n,{encode:ti.function,serialize:ti.function},!0)),i.method=(i.method||this.defaults.method||"get").toLowerCase();let o=s&&D.merge(s.common,s[i.method]);s&&D.forEach(["delete","get","head","post","put","patch","common"],h=>{delete s[h]}),i.headers=xe.concat(o,s);let a=[],c=!0;this.interceptors.request.forEach(function(v){typeof v.runWhen=="function"&&v.runWhen(i)===!1||(c=c&&v.synchronous,a.unshift(v.fulfilled,v.rejected))});let u=[];this.interceptors.response.forEach(function(v){u.push(v.fulfilled,v.rejected)});let m,g=0,x;if(!c){let h=[Zn.bind(this),void 0];for(h.unshift.apply(h,a),h.push.apply(h,u),x=h.length,m=Promise.resolve(i);g<x;)m=m.then(h[g++],h[g++]);return m}x=a.length;let p=i;for(g=0;g<x;){let h=a[g++],v=a[g++];try{p=h(p)}catch(E){v.call(this,E);break}}try{m=Zn.call(this,p)}catch(h){return Promise.reject(h)}for(g=0,x=u.length;g<x;)m=m.then(u[g++],u[g++]);return m}getUri(t){t=bt(this.defaults,t);let i=fi(t.baseURL,t.url);return di(i,t.params,t.paramsSerializer)}};D.forEach(["delete","get","head","options"],function(t){Ki.prototype[t]=function(i,r){return this.request(bt(r||{},{method:t,url:i,data:(r||{}).data}))}});D.forEach(["post","put","patch"],function(t){function i(r){return function(s,o,a){return this.request(bt(a||{},{method:t,headers:r?{"Content-Type":"multipart/form-data"}:{},url:s,data:o}))}}Ki.prototype[t]=i(),Ki.prototype[t+"Form"]=i(!0)});var Pr=Ki;var wc=class e{constructor(t){if(typeof t!="function")throw new TypeError("executor must be a function.");let i;this.promise=new Promise(function(s){i=s});let r=this;this.promise.then(n=>{if(!r._listeners)return;let s=r._listeners.length;for(;s-- >0;)r._listeners[s](n);r._listeners=null}),this.promise.then=n=>{let s,o=new Promise(a=>{r.subscribe(a),s=a}).then(n);return o.cancel=function(){r.unsubscribe(s)},o},t(function(s,o,a){r.reason||(r.reason=new rt(s,o,a),i(r.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(t){if(this.reason){t(this.reason);return}this._listeners?this._listeners.push(t):this._listeners=[t]}unsubscribe(t){if(!this._listeners)return;let i=this._listeners.indexOf(t);i!==-1&&this._listeners.splice(i,1)}static source(){let t;return{token:new e(function(n){t=n}),cancel:t}}},_g=wc;function Ec(e){return function(i){return e.apply(null,i)}}function _c(e){return D.isObject(e)&&e.isAxiosError===!0}var Tc={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Tc).forEach(([e,t])=>{Tc[t]=e});var Tg=Tc;function Sg(e){let t=new Pr(e),i=Er(Pr.prototype.request,t);return D.extend(i,Pr.prototype,t,{allOwnKeys:!0}),D.extend(i,t,null,{allOwnKeys:!0}),i.create=function(n){return Sg(bt(e,n))},i}var Ne=Sg(zi);Ne.Axios=Pr;Ne.CanceledError=rt;Ne.CancelToken=_g;Ne.isCancel=Or;Ne.VERSION=gi;Ne.toFormData=Zt;Ne.AxiosError=q;Ne.Cancel=Ne.CanceledError;Ne.all=function(t){return Promise.all(t)};Ne.spread=Ec;Ne.isAxiosError=_c;Ne.mergeConfig=bt;Ne.AxiosHeaders=xe;Ne.formToJSON=e=>jn(D.isHTMLForm(e)?new FormData(e):e);Ne.getAdapter=Jn.getAdapter;Ne.HttpStatusCode=Tg;Ne.default=Ne;var Ji=Ne;var{Axios:wq,AxiosError:Eq,CanceledError:_q,isCancel:Tq,CancelToken:Sq,VERSION:Cq,all:Oq,Cancel:Aq,isAxiosError:Dq,spread:Iq,toFormData:Nq,AxiosHeaders:Lq,HttpStatusCode:kq,formToJSON:Rq,getAdapter:Pq,mergeConfig:Fq}=Ji;var fs=ae(Og(),1),us=ae(zn(),1),ev=require("child_process"),jv=ae(Cc(),1),Qi=ae(Cc(),1),uy=require("events"),ps=Object.defineProperty,c1=Object.defineProperties,u1=Object.getOwnPropertyDescriptor,l1=Object.getOwnPropertyDescriptors,Gc=Object.getOwnPropertyNames,Ag=Object.getOwnPropertySymbols,ax=Object.prototype.hasOwnProperty,p1=Object.prototype.propertyIsEnumerable,Dg=(e,t,i)=>t in e?ps(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i,ft=(e,t)=>{for(var i in t||(t={}))ax.call(t,i)&&Dg(e,i,t[i]);if(Ag)for(var i of Ag(t))p1.call(t,i)&&Dg(e,i,t[i]);return e},Mr=(e,t)=>c1(e,l1(t)),M=(e,t)=>function(){return e&&(t=(0,e[Gc(e)[0]])(e=0)),t},d1=(e,t)=>function(){return t||(0,e[Gc(e)[0]])((t={exports:{}}).exports,t),t.exports},Oe=(e,t)=>{for(var i in t)ps(e,i,{get:t[i],enumerable:!0})},f1=(e,t,i,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Gc(t))!ax.call(e,n)&&n!==i&&ps(e,n,{get:()=>t[n],enumerable:!(r=u1(t,n))||r.enumerable});return e},_e=e=>f1(ps({},"__esModule",{value:!0}),e),jr=(e,t,i)=>new Promise((r,n)=>{var s=c=>{try{a(i.next(c))}catch(u){n(u)}},o=c=>{try{a(i.throw(c))}catch(u){n(u)}},a=c=>c.done?r(c.value):Promise.resolve(c.value).then(s,o);a((i=i.apply(e,t)).next())});function h1(...e){let t=new String(e);return ds.set(t,e),t}function as(e){return e instanceof String&&ds.has(e)}function Ig(e){return ds.get(e)||[]}var ds,$r=M({"src/lib/args/pathspec.ts"(){"use strict";ds=new WeakMap}}),Ut,ri=M({"src/lib/errors/git-error.ts"(){"use strict";Ut=class extends Error{constructor(e,t){super(t),this.task=e,Object.setPrototypeOf(this,new.target.prototype)}}}}),zr,tr=M({"src/lib/errors/git-response-error.ts"(){"use strict";ri(),zr=class extends Ut{constructor(e,t){super(void 0,t||String(e)),this.git=e}}}}),cx,ux=M({"src/lib/errors/task-configuration-error.ts"(){"use strict";ri(),cx=class extends Ut{constructor(e){super(void 0,e)}}}});function lx(e){return typeof e=="function"?e:wi}function px(e){return typeof e=="function"&&e!==wi}function dx(e,t){let i=e.indexOf(t);return i<=0?[e,""]:[e.substr(0,i),e.substr(i+1)]}function fx(e,t=0){return hx(e)&&e.length>t?e[t]:void 0}function bi(e,t=0){if(hx(e)&&e.length>t)return e[e.length-1-t]}function hx(e){return!!(e&&typeof e.length=="number")}function Hr(e="",t=!0,i=`
`){return e.split(i).reduce((r,n)=>{let s=t?n.trim():n;return s&&r.push(s),r},[])}function Vc(e,t){return Hr(e,!0).map(i=>t(i))}function Xc(e){return(0,fs.exists)(e,fs.FOLDER)}function ee(e,t){return Array.isArray(e)?e.includes(t)||e.push(t):e.add(t),t}function mx(e,t){return Array.isArray(e)&&!e.includes(t)&&e.push(t),e}function hs(e,t){if(Array.isArray(e)){let i=e.indexOf(t);i>=0&&e.splice(i,1)}else e.delete(t);return t}function At(e){return Array.isArray(e)?e:[e]}function gx(e){return e.replace(/[\s-]+(.)/g,(t,i)=>i.toUpperCase())}function xx(e){return At(e).map(String)}function le(e,t=0){if(e==null)return t;let i=parseInt(e,10);return isNaN(i)?t:i}function qr(e,t){let i=[];for(let r=0,n=e.length;r<n;r++)i.push(t,e[r]);return i}function Br(e){return(Array.isArray(e)?Buffer.concat(e):e).toString("utf-8")}function vx(e,t){return Object.assign({},...t.map(i=>i in e?{[i]:e[i]}:{}))}function kc(e=0){return new Promise(t=>setTimeout(t,e))}function yx(e){if(e!==!1)return e}var er,wi,Gr,ms=M({"src/lib/utils/util.ts"(){"use strict";er="\0",wi=()=>{},Gr=Object.prototype.toString.call.bind(Object.prototype.toString)}});function Dt(e,t,i){return t(e)?e:arguments.length>2?i:void 0}function Yc(e,t){let i=as(e)?"string":typeof e;return/number|string|boolean/.test(i)&&(!t||!t.includes(i))}function Wc(e){return!!e&&Gr(e)==="[object Object]"}function bx(e){return typeof e=="function"}var Vr,Ue,wx,cs,Kc,Ex=M({"src/lib/utils/argument-filters.ts"(){"use strict";ms(),$r(),Vr=e=>Array.isArray(e),Ue=e=>typeof e=="string",wx=e=>Array.isArray(e)&&e.every(Ue),cs=e=>Ue(e)||Array.isArray(e)&&e.every(Ue),Kc=e=>e==null||"number|boolean|function".includes(typeof e)?!1:Array.isArray(e)||typeof e=="string"||typeof e.length=="number"}}),Rc,m1=M({"src/lib/utils/exit-codes.ts"(){"use strict";Rc=(e=>(e[e.SUCCESS=0]="SUCCESS",e[e.ERROR=1]="ERROR",e[e.NOT_FOUND=-2]="NOT_FOUND",e[e.UNCLEAN=128]="UNCLEAN",e))(Rc||{})}}),Ur,g1=M({"src/lib/utils/git-output-streams.ts"(){"use strict";Ur=class{constructor(e,t){this.stdOut=e,this.stdErr=t}asStrings(){return new Ur(this.stdOut.toString("utf8"),this.stdErr.toString("utf8"))}}}}),J,ii,x1=M({"src/lib/utils/line-parser.ts"(){"use strict";J=class{constructor(e,t){this.matches=[],this.parse=(i,r)=>(this.resetMatches(),this._regExp.every((n,s)=>this.addMatch(n,s,i(s)))?this.useMatches(r,this.prepareMatches())!==!1:!1),this._regExp=Array.isArray(e)?e:[e],t&&(this.useMatches=t)}useMatches(e,t){throw new Error("LineParser:useMatches not implemented")}resetMatches(){this.matches.length=0}prepareMatches(){return this.matches}addMatch(e,t,i){let r=i&&e.exec(i);return r&&this.pushMatch(t,r),!!r}pushMatch(e,t){this.matches.push(...t.slice(1))}},ii=class extends J{addMatch(e,t,i){return/^remote:\s/.test(String(i))&&super.addMatch(e,t,i)}pushMatch(e,t){(e>0||t.length>1)&&super.pushMatch(e,t)}}}});function _x(...e){let t=process.cwd(),i=Object.assign(ft({baseDir:t},Tx),...e.filter(r=>typeof r=="object"&&r));return i.baseDir=i.baseDir||t,i.trimmed=i.trimmed===!0,i}var Tx,v1=M({"src/lib/utils/simple-git-options.ts"(){"use strict";Tx={binary:"git",maxConcurrentProcesses:5,config:[],trimmed:!1}}});function Jc(e,t=[]){return Wc(e)?Object.keys(e).reduce((i,r)=>{let n=e[r];return as(n)?i.push(n):Yc(n,["boolean"])?i.push(r+"="+n):i.push(r),i},t):t}function Je(e,t=0,i=!1){let r=[];for(let n=0,s=t<0?e.length:t;n<s;n++)"string|number".includes(typeof e[n])&&r.push(String(e[n]));return Jc(Zc(e),r),i||r.push(...y1(e)),r}function y1(e){let t=typeof bi(e)=="function";return Dt(bi(e,t?1:0),Vr,[])}function Zc(e){let t=bx(bi(e));return Dt(bi(e,t?1:0),Wc)}function Te(e,t=!0){let i=lx(bi(e));return t||px(i)?i:void 0}var b1=M({"src/lib/utils/task-options.ts"(){"use strict";Ex(),ms(),$r()}});function Pc(e,t){return e(t.stdOut,t.stdErr)}function Qe(e,t,i,r=!0){return At(i).forEach(n=>{for(let s=Hr(n,r),o=0,a=s.length;o<a;o++){let c=(u=0)=>{if(!(o+u>=a))return s[o+u]};t.some(({parse:u})=>u(c,e))}}),e}var w1=M({"src/lib/utils/task-parser.ts"(){"use strict";ms()}}),Sx={};Oe(Sx,{ExitCodes:()=>Rc,GitOutputStreams:()=>Ur,LineParser:()=>J,NOOP:()=>wi,NULL:()=>er,RemoteLineParser:()=>ii,append:()=>ee,appendTaskOptions:()=>Jc,asArray:()=>At,asCamelCase:()=>gx,asFunction:()=>lx,asNumber:()=>le,asStringArray:()=>xx,bufferToString:()=>Br,callTaskParser:()=>Pc,createInstanceConfig:()=>_x,delay:()=>kc,filterArray:()=>Vr,filterFunction:()=>bx,filterHasLength:()=>Kc,filterPlainObject:()=>Wc,filterPrimitives:()=>Yc,filterString:()=>Ue,filterStringArray:()=>wx,filterStringOrStringArray:()=>cs,filterType:()=>Dt,first:()=>fx,folderExists:()=>Xc,forEachLineWithContent:()=>Vc,getTrailingOptions:()=>Je,including:()=>mx,isUserFunction:()=>px,last:()=>bi,objectToString:()=>Gr,orVoid:()=>yx,parseStringResponse:()=>Qe,pick:()=>vx,prefixedArray:()=>qr,remove:()=>hs,splitOn:()=>dx,toLinesWithContent:()=>Hr,trailingFunctionArgument:()=>Te,trailingOptionsArgument:()=>Zc});var Y=M({"src/lib/utils/index.ts"(){"use strict";Ex(),m1(),g1(),x1(),v1(),b1(),w1(),ms()}}),Cx={};Oe(Cx,{CheckRepoActions:()=>Fc,checkIsBareRepoTask:()=>Ax,checkIsRepoRootTask:()=>Ox,checkIsRepoTask:()=>E1});function E1(e){switch(e){case"bare":return Ax();case"root":return Ox()}return{commands:["rev-parse","--is-inside-work-tree"],format:"utf-8",onError:gs,parser:Qc}}function Ox(){return{commands:["rev-parse","--git-dir"],format:"utf-8",onError:gs,parser(t){return/^\.(git)?$/.test(t.trim())}}}function Ax(){return{commands:["rev-parse","--is-bare-repository"],format:"utf-8",onError:gs,parser:Qc}}function _1(e){return/(Not a git repository|Kein Git-Repository)/i.test(String(e))}var Fc,gs,Qc,Dx=M({"src/lib/tasks/check-is-repo.ts"(){"use strict";Y(),Fc=(e=>(e.BARE="bare",e.IN_TREE="tree",e.IS_REPO_ROOT="root",e))(Fc||{}),gs=({exitCode:e},t,i,r)=>{if(e===128&&_1(t))return i(Buffer.from("false"));r(t)},Qc=e=>e.trim()==="true"}});function T1(e,t){let i=new Ix(e),r=e?Lx:Nx;return Hr(t).forEach(n=>{let s=n.replace(r,"");i.paths.push(s),(kx.test(s)?i.folders:i.files).push(s)}),i}var Ix,Nx,Lx,kx,S1=M({"src/lib/responses/CleanSummary.ts"(){"use strict";Y(),Ix=class{constructor(e){this.dryRun=e,this.paths=[],this.files=[],this.folders=[]}},Nx=/^[a-z]+\s*/i,Lx=/^[a-z]+\s+[a-z]+\s*/i,kx=/\/$/}}),jc={};Oe(jc,{EMPTY_COMMANDS:()=>xs,adhocExecTask:()=>Rx,configurationErrorTask:()=>Ze,isBufferTask:()=>Fx,isEmptyTask:()=>jx,straightThroughBufferTask:()=>Px,straightThroughStringTask:()=>Ve});function Rx(e){return{commands:xs,format:"empty",parser:e}}function Ze(e){return{commands:xs,format:"empty",parser(){throw typeof e=="string"?new cx(e):e}}}function Ve(e,t=!1){return{commands:e,format:"utf-8",parser(i){return t?String(i).trim():i}}}function Px(e){return{commands:e,format:"buffer",parser(t){return t}}}function Fx(e){return e.format==="buffer"}function jx(e){return e.format==="empty"||!e.commands.length}var xs,Ce=M({"src/lib/tasks/task.ts"(){"use strict";ux(),xs=[]}}),Mx={};Oe(Mx,{CONFIG_ERROR_INTERACTIVE_MODE:()=>eu,CONFIG_ERROR_MODE_REQUIRED:()=>tu,CONFIG_ERROR_UNKNOWN_OPTION:()=>iu,CleanOptions:()=>rs,cleanTask:()=>qx,cleanWithOptionsTask:()=>C1,isCleanOptionsArray:()=>O1});function C1(e,t){let{cleanMode:i,options:r,valid:n}=A1(e);return i?n.options?(r.push(...t),r.some(N1)?Ze(eu):qx(i,r)):Ze(iu+JSON.stringify(e)):Ze(tu)}function qx(e,t){return{commands:["clean",`-${e}`,...t],format:"utf-8",parser(r){return T1(e==="n",r)}}}function O1(e){return Array.isArray(e)&&e.every(t=>ru.has(t))}function A1(e){let t,i=[],r={cleanMode:!1,options:!0};return e.replace(/[^a-z]i/g,"").split("").forEach(n=>{D1(n)?(t=n,r.cleanMode=!0):r.options=r.options&&I1(i[i.length]=`-${n}`)}),{cleanMode:t,options:i,valid:r}}function D1(e){return e==="f"||e==="n"}function I1(e){return/^-[a-z]$/i.test(e)&&ru.has(e.charAt(1))}function N1(e){return/^-[^\-]/.test(e)?e.indexOf("i")>0:e==="--interactive"}var eu,tu,iu,rs,ru,Bx=M({"src/lib/tasks/clean.ts"(){"use strict";S1(),Y(),Ce(),eu="Git clean interactive mode is not supported",tu='Git clean mode parameter ("n" or "f") is required',iu="Git clean unknown option found in: ",rs=(e=>(e.DRY_RUN="n",e.FORCE="f",e.IGNORED_INCLUDED="x",e.IGNORED_ONLY="X",e.EXCLUDING="e",e.QUIET="q",e.RECURSIVE="d",e))(rs||{}),ru=new Set(["i",...xx(Object.values(rs))])}});function L1(e){let t=new $x;for(let i of Ux(e))t.addValue(i.file,String(i.key),i.value);return t}function k1(e,t){let i=null,r=[],n=new Map;for(let s of Ux(e,t))s.key===t&&(r.push(i=s.value),n.has(s.file)||n.set(s.file,[]),n.get(s.file).push(i));return{key:t,paths:Array.from(n.keys()),scopes:n,value:i,values:r}}function R1(e){return e.replace(/^(file):/,"")}function*Ux(e,t=null){let i=e.split("\0");for(let r=0,n=i.length-1;r<n;){let s=R1(i[r++]),o=i[r++],a=t;if(o.includes(`
`)){let c=dx(o,`
`);a=c[0],o=c[1]}yield{file:s,key:a,value:o}}}var $x,P1=M({"src/lib/responses/ConfigList.ts"(){"use strict";Y(),$x=class{constructor(){this.files=[],this.values=Object.create(null)}get all(){return this._all||(this._all=this.files.reduce((e,t)=>Object.assign(e,this.values[t]),{})),this._all}addFile(e){if(!(e in this.values)){let t=bi(this.files);this.values[e]=t?Object.create(this.values[t]):{},this.files.push(e)}return this.values[e]}addValue(e,t,i){let r=this.addFile(e);r.hasOwnProperty(t)?Array.isArray(r[t])?r[t].push(i):r[t]=[r[t],i]:r[t]=i,this._all=void 0}}}});function Oc(e,t){return typeof e=="string"&&Mc.hasOwnProperty(e)?e:t}function F1(e,t,i,r){let n=["config",`--${r}`];return i&&n.push("--add"),n.push(e,t),{commands:n,format:"utf-8",parser(s){return s}}}function j1(e,t){let i=["config","--null","--show-origin","--get-all",e];return t&&i.splice(1,0,`--${t}`),{commands:i,format:"utf-8",parser(r){return k1(r,e)}}}function M1(e){let t=["config","--list","--show-origin","--null"];return e&&t.push(`--${e}`),{commands:t,format:"utf-8",parser(i){return L1(i)}}}function q1(){return{addConfig(e,t,...i){return this._runTask(F1(e,t,i[0]===!0,Oc(i[1],"local")),Te(arguments))},getConfig(e,t){return this._runTask(j1(e,Oc(t,void 0)),Te(arguments))},listConfig(...e){return this._runTask(M1(Oc(e[0],void 0)),Te(arguments))}}}var Mc,zx=M({"src/lib/tasks/config.ts"(){"use strict";P1(),Y(),Mc=(e=>(e.system="system",e.global="global",e.local="local",e.worktree="worktree",e))(Mc||{})}});function B1(e){return Hx.has(e)}var Ac,Hx,Gx=M({"src/lib/tasks/diff-name-status.ts"(){"use strict";Ac=(e=>(e.ADDED="A",e.COPIED="C",e.DELETED="D",e.MODIFIED="M",e.RENAMED="R",e.CHANGED="T",e.UNMERGED="U",e.UNKNOWN="X",e.BROKEN="B",e))(Ac||{}),Hx=new Set(Object.values(Ac))}});function U1(...e){return new Xx().param(...e)}function $1(e){let t=new Set,i={};return Vc(e,r=>{let[n,s,o]=r.split(er);t.add(n),(i[n]=i[n]||[]).push({line:le(s),path:n,preview:o})}),{paths:t,results:i}}function z1(){return{grep(e){let t=Te(arguments),i=Je(arguments);for(let n of Vx)if(i.includes(n))return this._runTask(Ze(`git.grep: use of "${n}" is not supported.`),t);typeof e=="string"&&(e=U1().param(e));let r=["grep","--null","-n","--full-name",...i,...e];return this._runTask({commands:r,format:"utf-8",parser(n){return $1(n)}},t)}}}var Vx,Fr,Ng,Xx,Yx=M({"src/lib/tasks/grep.ts"(){"use strict";Y(),Ce(),Vx=["-h"],Fr=Symbol("grepQuery"),Xx=class{constructor(){this[Ng]=[]}*[(Ng=Fr,Symbol.iterator)](){for(let e of this[Fr])yield e}and(...e){return e.length&&this[Fr].push("--and","(",...qr(e,"-e"),")"),this}param(...e){return this[Fr].push(...qr(e,"-e")),this}}}}),Wx={};Oe(Wx,{ResetMode:()=>ns,getResetMode:()=>G1,resetTask:()=>H1});function H1(e,t){let i=["reset"];return Kx(e)&&i.push(`--${e}`),i.push(...t),Ve(i)}function G1(e){if(Kx(e))return e;switch(typeof e){case"string":case"undefined":return"soft"}}function Kx(e){return Jx.includes(e)}var ns,Jx,Zx=M({"src/lib/tasks/reset.ts"(){"use strict";Ce(),ns=(e=>(e.MIXED="mixed",e.SOFT="soft",e.HARD="hard",e.MERGE="merge",e.KEEP="keep",e))(ns||{}),Jx=Array.from(Object.values(ns))}});function V1(){return(0,us.default)("simple-git")}function Lg(e,t,i){return!t||!String(t).replace(/\s*/,"")?i?(r,...n)=>{e(r,...n),i(r,...n)}:e:(r,...n)=>{e(`%s ${r}`,t,...n),i&&i(r,...n)}}function X1(e,t,{namespace:i}){if(typeof e=="string")return e;let r=t&&t.namespace||"";return r.startsWith(i)?r.substr(i.length+1):r||i}function nu(e,t,i,r=V1()){let n=e&&`[${e}]`||"",s=[],o=typeof t=="string"?r.extend(t):t,a=X1(Dt(t,Ue),o,r);return u(i);function c(m,g){return ee(s,nu(e,a.replace(/^[^:]+/,m),g,r))}function u(m){let g=m&&`[${m}]`||"",x=o&&Lg(o,g)||wi,p=Lg(r,`${n} ${g}`,x);return Object.assign(o?x:p,{label:e,sibling:c,info:p,step:u})}}var Qx=M({"src/lib/git-logger.ts"(){"use strict";Y(),us.default.formatters.L=e=>String(Kc(e)?e.length:"-"),us.default.formatters.B=e=>Buffer.isBuffer(e)?e.toString("utf8"):Gr(e)}}),ts,qc,Y1=M({"src/lib/runners/tasks-pending-queue.ts"(){"use strict";ri(),Qx(),ts=class{constructor(e="GitExecutor"){this.logLabel=e,this._queue=new Map}withProgress(e){return this._queue.get(e)}createProgress(e){let t=ts.getName(e.commands[0]),i=nu(this.logLabel,t);return{task:e,logger:i,name:t}}push(e){let t=this.createProgress(e);return t.logger("Adding task to the queue, commands = %o",e.commands),this._queue.set(e,t),t}fatal(e){for(let[t,{logger:i}]of Array.from(this._queue.entries()))t===e.task?(i.info("Failed %o",e),i("Fatal exception, any as-yet un-started tasks run through this executor will not be attempted")):i.info("A fatal exception occurred in a previous task, the queue has been purged: %o",e.message),this.complete(t);if(this._queue.size!==0)throw new Error(`Queue size should be zero after fatal: ${this._queue.size}`)}complete(e){this.withProgress(e)&&this._queue.delete(e)}attempt(e){let t=this.withProgress(e);if(!t)throw new Ut(void 0,"TasksPendingQueue: attempt called for an unknown task");return t.logger("Starting task"),t}static getName(e="empty"){return`task:${e}:${++ts.counter}`}},qc=ts,qc.counter=0}});function yi(e,t){return{method:fx(e.commands)||"",commands:t}}function W1(e,t){return i=>{t("[ERROR] child process exception %o",i),e.push(Buffer.from(String(i.stack),"ascii"))}}function kg(e,t,i,r){return n=>{i("%s received %L bytes",t,n),r("%B",n),e.push(n)}}var Bc,K1=M({"src/lib/runners/git-executor-chain.ts"(){"use strict";ri(),Ce(),Y(),Y1(),Bc=class{constructor(e,t,i){this._executor=e,this._scheduler=t,this._plugins=i,this._chain=Promise.resolve(),this._queue=new qc}get cwd(){return this._cwd||this._executor.cwd}set cwd(e){this._cwd=e}get env(){return this._executor.env}get outputHandler(){return this._executor.outputHandler}chain(){return this}push(e){return this._queue.push(e),this._chain=this._chain.then(()=>this.attemptTask(e))}attemptTask(e){return jr(this,null,function*(){let t=yield this._scheduler.next(),i=()=>this._queue.complete(e);try{let{logger:r}=this._queue.attempt(e);return yield jx(e)?this.attemptEmptyTask(e,r):this.attemptRemoteTask(e,r)}catch(r){throw this.onFatalException(e,r)}finally{i(),t()}})}onFatalException(e,t){let i=t instanceof Ut?Object.assign(t,{task:e}):new Ut(e,t&&String(t));return this._chain=Promise.resolve(),this._queue.fatal(i),i}attemptRemoteTask(e,t){return jr(this,null,function*(){let i=this._plugins.exec("spawn.binary","",yi(e,e.commands)),r=this._plugins.exec("spawn.args",[...e.commands],yi(e,e.commands)),n=yield this.gitResponse(e,i,r,this.outputHandler,t.step("SPAWN")),s=yield this.handleTaskData(e,r,n,t.step("HANDLE"));return t("passing response to task's parser as a %s",e.format),Fx(e)?Pc(e.parser,s):Pc(e.parser,s.asStrings())})}attemptEmptyTask(e,t){return jr(this,null,function*(){return t("empty task bypassing child process to call to task's parser"),e.parser(this)})}handleTaskData(e,t,i,r){let{exitCode:n,rejection:s,stdOut:o,stdErr:a}=i;return new Promise((c,u)=>{r("Preparing to handle process response exitCode=%d stdOut=",n);let{error:m}=this._plugins.exec("task.error",{error:s},ft(ft({},yi(e,t)),i));if(m&&e.onError)return r.info("exitCode=%s handling with custom error handler"),e.onError(i,m,g=>{r.info("custom error handler treated as success"),r("custom error returned a %s",Gr(g)),c(new Ur(Array.isArray(g)?Buffer.concat(g):g,Buffer.concat(a)))},u);if(m)return r.info("handling as error: exitCode=%s stdErr=%s rejection=%o",n,a.length,s),u(m);r.info("retrieving task output complete"),c(new Ur(Buffer.concat(o),Buffer.concat(a)))})}gitResponse(e,t,i,r,n){return jr(this,null,function*(){let s=n.sibling("output"),o=this._plugins.exec("spawn.options",{cwd:this.cwd,env:this.env,windowsHide:!0},yi(e,e.commands));return new Promise(a=>{let c=[],u=[];n.info("%s %o",t,i),n("%O",o);let m=this._beforeSpawn(e,i);if(m)return a({stdOut:c,stdErr:u,exitCode:9901,rejection:m});this._plugins.exec("spawn.before",void 0,Mr(ft({},yi(e,i)),{kill(x){m=x||m}}));let g=(0,ev.spawn)(t,i,o);g.stdout.on("data",kg(c,"stdOut",n,s.step("stdOut"))),g.stderr.on("data",kg(u,"stdErr",n,s.step("stdErr"))),g.on("error",W1(u,n)),r&&(n("Passing child process stdOut/stdErr to custom outputHandler"),r(t,g.stdout,g.stderr,[...i])),this._plugins.exec("spawn.after",void 0,Mr(ft({},yi(e,i)),{spawned:g,close(x,p){a({stdOut:c,stdErr:u,exitCode:x,rejection:m||p})},kill(x){g.killed||(m=x,g.kill("SIGINT"))}}))})})}_beforeSpawn(e,t){let i;return this._plugins.exec("spawn.before",void 0,Mr(ft({},yi(e,t)),{kill(r){i=r||i}})),i}}}}),tv={};Oe(tv,{GitExecutor:()=>iv});var iv,J1=M({"src/lib/runners/git-executor.ts"(){"use strict";K1(),iv=class{constructor(e,t,i){this.cwd=e,this._scheduler=t,this._plugins=i,this._chain=new Bc(this,this._scheduler,this._plugins)}chain(){return new Bc(this,this._scheduler,this._plugins)}push(e){return this._chain.push(e)}}}});function Z1(e,t,i=wi){let r=s=>{i(null,s)},n=s=>{s?.task===e&&i(s instanceof zr?Q1(s):s,void 0)};t.then(r,n)}function Q1(e){let t=r=>{console.warn(`simple-git deprecation notice: accessing GitResponseError.${r} should be GitResponseError.git.${r}, this will no longer be available in version 3`),t=wi};return Object.create(e,Object.getOwnPropertyNames(e.git).reduce(i,{}));function i(r,n){return n in e||(r[n]={enumerable:!1,configurable:!1,get(){return t(n),e.git[n]}}),r}}var eA=M({"src/lib/task-callback.ts"(){"use strict";tr(),Y()}});function Rg(e,t){return Rx(i=>{if(!Xc(e))throw new Error(`Git.cwd: cannot change to non-directory "${e}"`);return(t||i).cwd=e})}var tA=M({"src/lib/tasks/change-working-directory.ts"(){"use strict";Y(),Ce()}});function Dc(e){let t=["checkout",...e];return t[1]==="-b"&&t.includes("-B")&&(t[1]=hs(t,"-B")),Ve(t)}function iA(){return{checkout(){return this._runTask(Dc(Je(arguments,1)),Te(arguments))},checkoutBranch(e,t){return this._runTask(Dc(["-b",e,t,...Je(arguments)]),Te(arguments))},checkoutLocalBranch(e){return this._runTask(Dc(["-b",e,...Je(arguments)]),Te(arguments))}}}var rA=M({"src/lib/tasks/checkout.ts"(){"use strict";Y(),Ce()}});function nA(){return{count:0,garbage:0,inPack:0,packs:0,prunePackable:0,size:0,sizeGarbage:0,sizePack:0}}function sA(){return{countObjects(){return this._runTask({commands:["count-objects","--verbose"],format:"utf-8",parser(e){return Qe(nA(),[rv],e)}})}}}var rv,oA=M({"src/lib/tasks/count-objects.ts"(){"use strict";Y(),rv=new J(/([a-z-]+): (\d+)$/,(e,[t,i])=>{let r=gx(t);e.hasOwnProperty(r)&&(e[r]=le(i))})}});function aA(e){return Qe({author:null,branch:"",commit:"",root:!1,summary:{changes:0,insertions:0,deletions:0}},nv,e)}var nv,cA=M({"src/lib/parsers/parse-commit.ts"(){"use strict";Y(),nv=[new J(/^\[([^\s]+)( \([^)]+\))? ([^\]]+)/,(e,[t,i,r])=>{e.branch=t,e.commit=r,e.root=!!i}),new J(/\s*Author:\s(.+)/i,(e,[t])=>{let i=t.split("<"),r=i.pop();!r||!r.includes("@")||(e.author={email:r.substr(0,r.length-1),name:i.join("<").trim()})}),new J(/(\d+)[^,]*(?:,\s*(\d+)[^,]*)(?:,\s*(\d+))/g,(e,[t,i,r])=>{e.summary.changes=parseInt(t,10)||0,e.summary.insertions=parseInt(i,10)||0,e.summary.deletions=parseInt(r,10)||0}),new J(/^(\d+)[^,]*(?:,\s*(\d+)[^(]+\(([+-]))?/,(e,[t,i,r])=>{e.summary.changes=parseInt(t,10)||0;let n=parseInt(i,10)||0;r==="-"?e.summary.deletions=n:r==="+"&&(e.summary.insertions=n)})]}});function uA(e,t,i){return{commands:["-c","core.abbrev=40","commit",...qr(e,"-m"),...t,...i],format:"utf-8",parser:aA}}function lA(){return{commit(t,...i){let r=Te(arguments),n=e(t)||uA(At(t),At(Dt(i[0],cs,[])),[...Dt(i[1],Vr,[]),...Je(arguments,0,!0)]);return this._runTask(n,r)}};function e(t){return!cs(t)&&Ze("git.commit: requires the commit message to be supplied as a string/string[]")}}var pA=M({"src/lib/tasks/commit.ts"(){"use strict";cA(),Y(),Ce()}});function dA(){return{firstCommit(){return this._runTask(Ve(["rev-list","--max-parents=0","HEAD"],!0),Te(arguments))}}}var fA=M({"src/lib/tasks/first-commit.ts"(){"use strict";Y(),Ce()}});function hA(e,t){let i=["hash-object",e];return t&&i.push("-w"),Ve(i,!0)}var mA=M({"src/lib/tasks/hash-object.ts"(){"use strict";Ce()}});function gA(e,t,i){let r=String(i).trim(),n;if(n=sv.exec(r))return new ss(e,t,!1,n[1]);if(n=ov.exec(r))return new ss(e,t,!0,n[1]);let s="",o=r.split(" ");for(;o.length;)if(o.shift()==="in"){s=o.join(" ");break}return new ss(e,t,/^re/i.test(r),s)}var ss,sv,ov,xA=M({"src/lib/responses/InitSummary.ts"(){"use strict";ss=class{constructor(e,t,i,r){this.bare=e,this.path=t,this.existing=i,this.gitDir=r}},sv=/^Init.+ repository in (.+)$/,ov=/^Rein.+ in (.+)$/}});function vA(e){return e.includes(su)}function yA(e=!1,t,i){let r=["init",...i];return e&&!vA(r)&&r.splice(1,0,su),{commands:r,format:"utf-8",parser(n){return gA(r.includes("--bare"),t,n)}}}var su,bA=M({"src/lib/tasks/init.ts"(){"use strict";xA(),su="--bare"}});function ou(e){for(let t=0;t<e.length;t++){let i=au.exec(e[t]);if(i)return`--${i[1]}`}return""}function wA(e){return au.test(e)}var au,Xr=M({"src/lib/args/log-format.ts"(){"use strict";au=/^--(stat|numstat|name-only|name-status)(=|$)/}}),av,EA=M({"src/lib/responses/DiffSummary.ts"(){"use strict";av=class{constructor(){this.changed=0,this.deletions=0,this.insertions=0,this.files=[]}}}});function cv(e=""){let t=uv[e];return i=>Qe(new av,t,i,!1)}var Ic,Pg,Fg,jg,uv,lv=M({"src/lib/parsers/parse-diff-summary.ts"(){"use strict";Xr(),EA(),Gx(),Y(),Ic=[new J(/^(.+)\s+\|\s+(\d+)(\s+[+\-]+)?$/,(e,[t,i,r=""])=>{e.files.push({file:t.trim(),changes:le(i),insertions:r.replace(/[^+]/g,"").length,deletions:r.replace(/[^-]/g,"").length,binary:!1})}),new J(/^(.+) \|\s+Bin ([0-9.]+) -> ([0-9.]+) ([a-z]+)/,(e,[t,i,r])=>{e.files.push({file:t.trim(),before:le(i),after:le(r),binary:!0})}),new J(/(\d+) files? changed\s*((?:, \d+ [^,]+){0,2})/,(e,[t,i])=>{let r=/(\d+) i/.exec(i),n=/(\d+) d/.exec(i);e.changed=le(t),e.insertions=le(r?.[1]),e.deletions=le(n?.[1])})],Pg=[new J(/(\d+)\t(\d+)\t(.+)$/,(e,[t,i,r])=>{let n=le(t),s=le(i);e.changed++,e.insertions+=n,e.deletions+=s,e.files.push({file:r,changes:n+s,insertions:n,deletions:s,binary:!1})}),new J(/-\t-\t(.+)$/,(e,[t])=>{e.changed++,e.files.push({file:t,after:0,before:0,binary:!0})})],Fg=[new J(/(.+)$/,(e,[t])=>{e.changed++,e.files.push({file:t,changes:0,insertions:0,deletions:0,binary:!1})})],jg=[new J(/([ACDMRTUXB])([0-9]{0,3})\t(.[^\t]*)(\t(.[^\t]*))?$/,(e,[t,i,r,n,s])=>{e.changed++,e.files.push({file:s??r,changes:0,status:yx(B1(t)&&t),insertions:0,deletions:0,binary:!1})})],uv={"":Ic,"--stat":Ic,"--numstat":Pg,"--name-status":jg,"--name-only":Fg}}});function _A(e,t){return t.reduce((i,r,n)=>(i[r]=e[n]||"",i),Object.create({diff:null}))}function pv(e=lu,t=dv,i=""){let r=cv(i);return function(n){let s=Hr(n,!0,cu).map(function(o){let a=o.trim().split(uu),c=_A(a[0].trim().split(e),t);return a.length>1&&a[1].trim()&&(c.diff=r(a[1])),c});return{all:s,latest:s.length&&s[0]||null,total:s.length}}}var cu,uu,lu,dv,fv=M({"src/lib/parsers/parse-list-log-summary.ts"(){"use strict";Y(),lv(),Xr(),cu="\xF2\xF2\xF2\xF2\xF2\xF2 ",uu=" \xF2\xF2",lu=" \xF2 ",dv=["hash","date","message","refs","author_name","author_email"]}}),hv={};Oe(hv,{diffSummaryTask:()=>TA,validateLogFormatConfig:()=>vs});function TA(e){let t=ou(e),i=["diff"];return t===""&&(t="--stat",i.push("--stat=4096")),i.push(...e),vs(i)||{commands:i,format:"utf-8",parser:cv(t)}}function vs(e){let t=e.filter(wA);if(t.length>1)return Ze(`Summary flags are mutually exclusive - pick one of ${t.join(",")}`);if(t.length&&e.includes("-z"))return Ze(`Summary flag ${t} parsing is not compatible with null termination option '-z'`)}var pu=M({"src/lib/tasks/diff.ts"(){"use strict";Xr(),lv(),Ce()}});function SA(e,t){let i=[],r=[];return Object.keys(e).forEach(n=>{i.push(n),r.push(String(e[n]))}),[i,r.join(t)]}function CA(e){return Object.keys(e).reduce((t,i)=>(i in Uc||(t[i]=e[i]),t),{})}function mv(e={},t=[]){let i=Dt(e.splitter,Ue,lu),r=!Yc(e.format)&&e.format?e.format:{hash:"%H",date:e.strictDate===!1?"%ai":"%aI",message:"%s",refs:"%D",body:e.multiLine?"%B":"%b",author_name:e.mailMap!==!1?"%aN":"%an",author_email:e.mailMap!==!1?"%aE":"%ae"},[n,s]=SA(r,i),o=[],a=[`--pretty=format:${cu}${s}${uu}`,...t],c=e.n||e["max-count"]||e.maxCount;if(c&&a.push(`--max-count=${c}`),e.from||e.to){let u=e.symmetric!==!1?"...":"..";o.push(`${e.from||""}${u}${e.to||""}`)}return Ue(e.file)&&a.push("--follow",h1(e.file)),Jc(CA(e),a),{fields:n,splitter:i,commands:[...a,...o]}}function OA(e,t,i){let r=pv(e,t,ou(i));return{commands:["log",...i],format:"utf-8",parser:r}}function AA(){return{log(...i){let r=Te(arguments),n=mv(Zc(arguments),Dt(arguments[0],Vr)),s=t(...i)||vs(n.commands)||e(n);return this._runTask(s,r)}};function e(i){return OA(i.splitter,i.fields,i.commands)}function t(i,r){return Ue(i)&&Ue(r)&&Ze("git.log(string, string) should be replaced with git.log({ from: string, to: string })")}}var Uc,gv=M({"src/lib/tasks/log.ts"(){"use strict";Xr(),$r(),fv(),Y(),Ce(),pu(),Uc=(e=>(e[e["--pretty"]=0]="--pretty",e[e["max-count"]=1]="max-count",e[e.maxCount=2]="maxCount",e[e.n=3]="n",e[e.file=4]="file",e[e.format=5]="format",e[e.from=6]="from",e[e.to=7]="to",e[e.splitter=8]="splitter",e[e.symmetric=9]="symmetric",e[e.mailMap=10]="mailMap",e[e.multiLine=11]="multiLine",e[e.strictDate=12]="strictDate",e))(Uc||{})}}),os,xv,DA=M({"src/lib/responses/MergeSummary.ts"(){"use strict";os=class{constructor(e,t=null,i){this.reason=e,this.file=t,this.meta=i}toString(){return`${this.file}:${this.reason}`}},xv=class{constructor(){this.conflicts=[],this.merges=[],this.result="success"}get failed(){return this.conflicts.length>0}get reason(){return this.result}toString(){return this.conflicts.length?`CONFLICTS: ${this.conflicts.join(", ")}`:"OK"}}}}),$c,vv,IA=M({"src/lib/responses/PullSummary.ts"(){"use strict";$c=class{constructor(){this.remoteMessages={all:[]},this.created=[],this.deleted=[],this.files=[],this.deletions={},this.insertions={},this.summary={changes:0,deletions:0,insertions:0}}},vv=class{constructor(){this.remote="",this.hash={local:"",remote:""},this.branch={local:"",remote:""},this.message=""}toString(){return this.message}}}});function Nc(e){return e.objects=e.objects||{compressing:0,counting:0,enumerating:0,packReused:0,reused:{count:0,delta:0},total:{count:0,delta:0}}}function Mg(e){let t=/^\s*(\d+)/.exec(e),i=/delta (\d+)/i.exec(e);return{count:le(t&&t[1]||"0"),delta:le(i&&i[1]||"0")}}var yv,NA=M({"src/lib/parsers/parse-remote-objects.ts"(){"use strict";Y(),yv=[new ii(/^remote:\s*(enumerating|counting|compressing) objects: (\d+),/i,(e,[t,i])=>{let r=t.toLowerCase(),n=Nc(e.remoteMessages);Object.assign(n,{[r]:le(i)})}),new ii(/^remote:\s*(enumerating|counting|compressing) objects: \d+% \(\d+\/(\d+)\),/i,(e,[t,i])=>{let r=t.toLowerCase(),n=Nc(e.remoteMessages);Object.assign(n,{[r]:le(i)})}),new ii(/total ([^,]+), reused ([^,]+), pack-reused (\d+)/i,(e,[t,i,r])=>{let n=Nc(e.remoteMessages);n.total=Mg(t),n.reused=Mg(i),n.packReused=le(r)})]}});function bv(e,t){return Qe({remoteMessages:new Ev},wv,t)}var wv,Ev,_v=M({"src/lib/parsers/parse-remote-messages.ts"(){"use strict";Y(),NA(),wv=[new ii(/^remote:\s*(.+)$/,(e,[t])=>(e.remoteMessages.all.push(t.trim()),!1)),...yv,new ii([/create a (?:pull|merge) request/i,/\s(https?:\/\/\S+)$/],(e,[t])=>{e.remoteMessages.pullRequestUrl=t}),new ii([/found (\d+) vulnerabilities.+\(([^)]+)\)/i,/\s(https?:\/\/\S+)$/],(e,[t,i,r])=>{e.remoteMessages.vulnerabilities={count:le(t),summary:i,url:r}})],Ev=class{constructor(){this.all=[]}}}});function LA(e,t){let i=Qe(new vv,Tv,[e,t]);return i.message&&i}var qg,Bg,Ug,$g,Tv,zg,du,Sv=M({"src/lib/parsers/parse-pull.ts"(){"use strict";IA(),Y(),_v(),qg=/^\s*(.+?)\s+\|\s+\d+\s*(\+*)(-*)/,Bg=/(\d+)\D+((\d+)\D+\(\+\))?(\D+(\d+)\D+\(-\))?/,Ug=/^(create|delete) mode \d+ (.+)/,$g=[new J(qg,(e,[t,i,r])=>{e.files.push(t),i&&(e.insertions[t]=i.length),r&&(e.deletions[t]=r.length)}),new J(Bg,(e,[t,,i,,r])=>i!==void 0||r!==void 0?(e.summary.changes=+t||0,e.summary.insertions=+i||0,e.summary.deletions=+r||0,!0):!1),new J(Ug,(e,[t,i])=>{ee(e.files,i),ee(t==="create"?e.created:e.deleted,i)})],Tv=[new J(/^from\s(.+)$/i,(e,[t])=>void(e.remote=t)),new J(/^fatal:\s(.+)$/,(e,[t])=>void(e.message=t)),new J(/([a-z0-9]+)\.\.([a-z0-9]+)\s+(\S+)\s+->\s+(\S+)$/,(e,[t,i,r,n])=>{e.branch.local=r,e.hash.local=t,e.branch.remote=n,e.hash.remote=i})],zg=(e,t)=>Qe(new $c,$g,[e,t]),du=(e,t)=>Object.assign(new $c,zg(e,t),bv(e,t))}}),Hg,Cv,Gg,kA=M({"src/lib/parsers/parse-merge.ts"(){"use strict";DA(),Y(),Sv(),Hg=[new J(/^Auto-merging\s+(.+)$/,(e,[t])=>{e.merges.push(t)}),new J(/^CONFLICT\s+\((.+)\): Merge conflict in (.+)$/,(e,[t,i])=>{e.conflicts.push(new os(t,i))}),new J(/^CONFLICT\s+\((.+\/delete)\): (.+) deleted in (.+) and/,(e,[t,i,r])=>{e.conflicts.push(new os(t,i,{deleteRef:r}))}),new J(/^CONFLICT\s+\((.+)\):/,(e,[t])=>{e.conflicts.push(new os(t,null))}),new J(/^Automatic merge failed;\s+(.+)$/,(e,[t])=>{e.result=t})],Cv=(e,t)=>Object.assign(Gg(e,t),du(e,t)),Gg=e=>Qe(new xv,Hg,e)}});function Vg(e){return e.length?{commands:["merge",...e],format:"utf-8",parser(t,i){let r=Cv(t,i);if(r.failed)throw new zr(r);return r}}:Ze("Git.merge requires at least one option")}var RA=M({"src/lib/tasks/merge.ts"(){"use strict";tr(),kA(),Ce()}});function PA(e,t,i){let r=i.includes("deleted"),n=i.includes("tag")||/^refs\/tags/.test(e),s=!i.includes("new");return{deleted:r,tag:n,branch:!n,new:!s,alreadyUpdated:s,local:e,remote:t}}var Xg,Ov,Yg,FA=M({"src/lib/parsers/parse-push.ts"(){"use strict";Y(),_v(),Xg=[new J(/^Pushing to (.+)$/,(e,[t])=>{e.repo=t}),new J(/^updating local tracking ref '(.+)'/,(e,[t])=>{e.ref=Mr(ft({},e.ref||{}),{local:t})}),new J(/^[=*-]\s+([^:]+):(\S+)\s+\[(.+)]$/,(e,[t,i,r])=>{e.pushed.push(PA(t,i,r))}),new J(/^Branch '([^']+)' set up to track remote branch '([^']+)' from '([^']+)'/,(e,[t,i,r])=>{e.branch=Mr(ft({},e.branch||{}),{local:t,remote:i,remoteName:r})}),new J(/^([^:]+):(\S+)\s+([a-z0-9]+)\.\.([a-z0-9]+)$/,(e,[t,i,r,n])=>{e.update={head:{local:t,remote:i},hash:{from:r,to:n}}})],Ov=(e,t)=>{let i=Yg(e,t),r=bv(e,t);return ft(ft({},i),r)},Yg=(e,t)=>Qe({pushed:[]},Xg,[e,t])}}),Av={};Oe(Av,{pushTagsTask:()=>jA,pushTask:()=>fu});function jA(e={},t){return ee(t,"--tags"),fu(e,t)}function fu(e={},t){let i=["push",...t];return e.branch&&i.splice(1,0,e.branch),e.remote&&i.splice(1,0,e.remote),hs(i,"-v"),ee(i,"--verbose"),ee(i,"--porcelain"),{commands:i,format:"utf-8",parser:Ov}}var Dv=M({"src/lib/tasks/push.ts"(){"use strict";FA(),Y()}});function MA(){return{showBuffer(){let e=["show",...Je(arguments,1)];return e.includes("--binary")||e.splice(1,0,"--binary"),this._runTask(Px(e),Te(arguments))},show(){let e=["show",...Je(arguments,1)];return this._runTask(Ve(e),Te(arguments))}}}var qA=M({"src/lib/tasks/show.ts"(){"use strict";Y(),Ce()}}),Wg,Iv,BA=M({"src/lib/responses/FileStatusSummary.ts"(){"use strict";Wg=/^(.+) -> (.+)$/,Iv=class{constructor(e,t,i){if(this.path=e,this.index=t,this.working_dir=i,t+i==="R"){let r=Wg.exec(e)||[null,e,e];this.from=r[1]||"",this.path=r[2]||""}}}}});function Kg(e){let[t,i]=e.split(er);return{from:i||t,to:t}}function ot(e,t,i){return[`${e}${t}`,i]}function Lc(e,...t){return t.map(i=>ot(e,i,(r,n)=>ee(r.conflicted,n)))}function UA(e,t){let i=t.trim();switch(" "){case i.charAt(2):return r(i.charAt(0),i.charAt(1),i.substr(3));case i.charAt(1):return r(" ",i.charAt(0),i.substr(2));default:return}function r(n,s,o){let a=`${n}${s}`,c=Nv.get(a);c&&c(e,o),a!=="##"&&a!=="!!"&&e.files.push(new Iv(o.replace(/\0.+$/,""),n,s))}}var Jg,Nv,Lv,$A=M({"src/lib/responses/StatusSummary.ts"(){"use strict";Y(),BA(),Jg=class{constructor(){this.not_added=[],this.conflicted=[],this.created=[],this.deleted=[],this.ignored=void 0,this.modified=[],this.renamed=[],this.files=[],this.staged=[],this.ahead=0,this.behind=0,this.current=null,this.tracking=null,this.detached=!1,this.isClean=()=>!this.files.length}},Nv=new Map([ot(" ","A",(e,t)=>ee(e.created,t)),ot(" ","D",(e,t)=>ee(e.deleted,t)),ot(" ","M",(e,t)=>ee(e.modified,t)),ot("A"," ",(e,t)=>ee(e.created,t)&&ee(e.staged,t)),ot("A","M",(e,t)=>ee(e.created,t)&&ee(e.staged,t)&&ee(e.modified,t)),ot("D"," ",(e,t)=>ee(e.deleted,t)&&ee(e.staged,t)),ot("M"," ",(e,t)=>ee(e.modified,t)&&ee(e.staged,t)),ot("M","M",(e,t)=>ee(e.modified,t)&&ee(e.staged,t)),ot("R"," ",(e,t)=>{ee(e.renamed,Kg(t))}),ot("R","M",(e,t)=>{let i=Kg(t);ee(e.renamed,i),ee(e.modified,i.to)}),ot("!","!",(e,t)=>{ee(e.ignored=e.ignored||[],t)}),ot("?","?",(e,t)=>ee(e.not_added,t)),...Lc("A","A","U"),...Lc("D","D","U"),...Lc("U","A","D","U"),["##",(e,t)=>{let i=/ahead (\d+)/,r=/behind (\d+)/,n=/^(.+?(?=(?:\.{3}|\s|$)))/,s=/\.{3}(\S*)/,o=/\son\s([\S]+)$/,a;a=i.exec(t),e.ahead=a&&+a[1]||0,a=r.exec(t),e.behind=a&&+a[1]||0,a=n.exec(t),e.current=a&&a[1],a=s.exec(t),e.tracking=a&&a[1],a=o.exec(t),e.current=a&&a[1]||e.current,e.detached=/\(no branch\)/.test(t)}]]),Lv=function(e){let t=e.split(er),i=new Jg;for(let r=0,n=t.length;r<n;){let s=t[r++].trim();s&&(s.charAt(0)==="R"&&(s+=er+(t[r++]||"")),UA(i,s))}return i}}});function zA(e){return{format:"utf-8",commands:["status","--porcelain","-b","-u","--null",...e.filter(i=>!kv.includes(i))],parser(i){return Lv(i)}}}var kv,HA=M({"src/lib/tasks/status.ts"(){"use strict";$A(),kv=["--null","-z"]}});function ls(e=0,t=0,i=0,r="",n=!0){return Object.defineProperty({major:e,minor:t,patch:i,agent:r,installed:n},"toString",{value(){return`${this.major}.${this.minor}.${this.patch}`},configurable:!1,enumerable:!1})}function GA(){return ls(0,0,0,"",!1)}function VA(){return{version(){return this._runTask({commands:["--version"],format:"utf-8",parser:XA,onError(e,t,i,r){if(e.exitCode===-2)return i(Buffer.from(hu));r(t)}})}}}function XA(e){return e===hu?GA():Qe(ls(0,0,0,e),Rv,e)}var hu,Rv,YA=M({"src/lib/tasks/version.ts"(){"use strict";Y(),hu="installed=false",Rv=[new J(/version (\d+)\.(\d+)\.(\d+)(?:\s*\((.+)\))?/,(e,[t,i,r,n=""])=>{Object.assign(e,ls(le(t),le(i),le(r),n))}),new J(/version (\d+)\.(\d+)\.(\D+)(.+)?$/,(e,[t,i,r,n=""])=>{Object.assign(e,ls(le(t),le(i),r,n))})]}}),Pv={};Oe(Pv,{SimpleGitApi:()=>zc});var zc,WA=M({"src/lib/simple-git-api.ts"(){"use strict";eA(),tA(),rA(),oA(),pA(),zx(),fA(),Yx(),mA(),bA(),gv(),RA(),Dv(),qA(),HA(),Ce(),YA(),Y(),zc=class{constructor(e){this._executor=e}_runTask(e,t){let i=this._executor.chain(),r=i.push(e);return t&&Z1(e,r,t),Object.create(this,{then:{value:r.then.bind(r)},catch:{value:r.catch.bind(r)},_executor:{value:i}})}add(e){return this._runTask(Ve(["add",...At(e)]),Te(arguments))}cwd(e){let t=Te(arguments);return typeof e=="string"?this._runTask(Rg(e,this._executor),t):typeof e?.path=="string"?this._runTask(Rg(e.path,e.root&&this._executor||void 0),t):this._runTask(Ze("Git.cwd: workingDirectory must be supplied as a string"),t)}hashObject(e,t){return this._runTask(hA(e,t===!0),Te(arguments))}init(e){return this._runTask(yA(e===!0,this._executor.cwd,Je(arguments)),Te(arguments))}merge(){return this._runTask(Vg(Je(arguments)),Te(arguments))}mergeFromTo(e,t){return Ue(e)&&Ue(t)?this._runTask(Vg([e,t,...Je(arguments)]),Te(arguments,!1)):this._runTask(Ze("Git.mergeFromTo requires that the 'remote' and 'branch' arguments are supplied as strings"))}outputHandler(e){return this._executor.outputHandler=e,this}push(){let e=fu({remote:Dt(arguments[0],Ue),branch:Dt(arguments[1],Ue)},Je(arguments));return this._runTask(e,Te(arguments))}stash(){return this._runTask(Ve(["stash",...Je(arguments)]),Te(arguments))}status(){return this._runTask(zA(Je(arguments)),Te(arguments))}},Object.assign(zc.prototype,iA(),lA(),q1(),sA(),dA(),z1(),AA(),MA(),VA())}}),Fv={};Oe(Fv,{Scheduler:()=>Mv});var Zg,Mv,KA=M({"src/lib/runners/scheduler.ts"(){"use strict";Y(),Qx(),Zg=(()=>{let e=0;return()=>{e++;let{promise:t,done:i}=(0,jv.createDeferred)();return{promise:t,done:i,id:e}}})(),Mv=class{constructor(e=2){this.concurrency=e,this.logger=nu("","scheduler"),this.pending=[],this.running=[],this.logger("Constructed, concurrency=%s",e)}schedule(){if(!this.pending.length||this.running.length>=this.concurrency){this.logger("Schedule attempt ignored, pending=%s running=%s concurrency=%s",this.pending.length,this.running.length,this.concurrency);return}let e=ee(this.running,this.pending.shift());this.logger("Attempting id=%s",e.id),e.done(()=>{this.logger("Completing id=",e.id),hs(this.running,e),this.schedule()})}next(){let{promise:e,id:t}=ee(this.pending,Zg());return this.logger("Scheduling id=%s",t),this.schedule(),e}}}}),qv={};Oe(qv,{applyPatchTask:()=>JA});function JA(e,t){return Ve(["apply",...t,...e])}var ZA=M({"src/lib/tasks/apply-patch.ts"(){"use strict";Ce()}});function QA(e,t){return{branch:e,hash:t,success:!0}}function eD(e){return{branch:e,hash:null,success:!1}}var Bv,tD=M({"src/lib/responses/BranchDeleteSummary.ts"(){"use strict";Bv=class{constructor(){this.all=[],this.branches={},this.errors=[]}get success(){return!this.errors.length}}}});function Uv(e,t){return t===1&&Hc.test(e)}var Qg,Hc,ex,ys,iD=M({"src/lib/parsers/parse-branch-delete.ts"(){"use strict";tD(),Y(),Qg=/(\S+)\s+\(\S+\s([^)]+)\)/,Hc=/^error[^']+'([^']+)'/m,ex=[new J(Qg,(e,[t,i])=>{let r=QA(t,i);e.all.push(r),e.branches[t]=r}),new J(Hc,(e,[t])=>{let i=eD(t);e.errors.push(i),e.all.push(i),e.branches[t]=i})],ys=(e,t)=>Qe(new Bv,ex,[e,t])}}),$v,rD=M({"src/lib/responses/BranchSummary.ts"(){"use strict";$v=class{constructor(){this.all=[],this.branches={},this.current="",this.detached=!1}push(e,t,i,r,n){e==="*"&&(this.detached=t,this.current=i),this.all.push(i),this.branches[i]={current:e==="*",linkedWorkTree:e==="+",name:i,commit:r,label:n}}}}});function tx(e){return e?e.charAt(0):""}function zv(e){return Qe(new $v,Hv,e)}var Hv,nD=M({"src/lib/parsers/parse-branch.ts"(){"use strict";rD(),Y(),Hv=[new J(/^([*+]\s)?\((?:HEAD )?detached (?:from|at) (\S+)\)\s+([a-z0-9]+)\s(.*)$/,(e,[t,i,r,n])=>{e.push(tx(t),!0,i,r,n)}),new J(new RegExp("^([*+]\\s)?(\\S+)\\s+([a-z0-9]+)\\s?(.*)$","s"),(e,[t,i,r,n])=>{e.push(tx(t),!1,i,r,n)})]}}),Gv={};Oe(Gv,{branchLocalTask:()=>oD,branchTask:()=>sD,containsDeleteBranchCommand:()=>Vv,deleteBranchTask:()=>cD,deleteBranchesTask:()=>aD});function Vv(e){let t=["-d","-D","--delete"];return e.some(i=>t.includes(i))}function sD(e){let t=Vv(e),i=["branch",...e];return i.length===1&&i.push("-a"),i.includes("-v")||i.splice(1,0,"-v"),{format:"utf-8",commands:i,parser(r,n){return t?ys(r,n).all[0]:zv(r)}}}function oD(){return{format:"utf-8",commands:["branch","-v"],parser:zv}}function aD(e,t=!1){return{format:"utf-8",commands:["branch","-v",t?"-D":"-d",...e],parser(i,r){return ys(i,r)},onError({exitCode:i,stdOut:r},n,s,o){if(!Uv(String(n),i))return o(n);s(r)}}}function cD(e,t=!1){let i={format:"utf-8",commands:["branch","-v",t?"-D":"-d",e],parser(r,n){return ys(r,n).branches[e]},onError({exitCode:r,stdErr:n,stdOut:s},o,a,c){if(!Uv(String(o),r))return c(o);throw new zr(i.parser(Br(s),Br(n)),String(o))}};return i}var uD=M({"src/lib/tasks/branch.ts"(){"use strict";tr(),iD(),nD(),Y()}}),Xv,lD=M({"src/lib/responses/CheckIgnore.ts"(){"use strict";Xv=e=>e.split(/\n/g).map(t=>t.trim()).filter(t=>!!t)}}),Yv={};Oe(Yv,{checkIgnoreTask:()=>pD});function pD(e){return{commands:["check-ignore",...e],format:"utf-8",parser:Xv}}var dD=M({"src/lib/tasks/check-ignore.ts"(){"use strict";lD()}}),Wv={};Oe(Wv,{cloneMirrorTask:()=>hD,cloneTask:()=>Kv});function fD(e){return/^--upload-pack(=|$)/.test(e)}function Kv(e,t,i){let r=["clone",...i];return Ue(e)&&r.push(e),Ue(t)&&r.push(t),r.find(fD)?Ze("git.fetch: potential exploit argument blocked."):Ve(r)}function hD(e,t,i){return ee(i,"--mirror"),Kv(e,t,i)}var mD=M({"src/lib/tasks/clone.ts"(){"use strict";Ce(),Y()}});function gD(e,t){return Qe({raw:e,remote:null,branches:[],tags:[],updated:[],deleted:[]},Jv,[e,t])}var Jv,xD=M({"src/lib/parsers/parse-fetch.ts"(){"use strict";Y(),Jv=[new J(/From (.+)$/,(e,[t])=>{e.remote=t}),new J(/\* \[new branch]\s+(\S+)\s*-> (.+)$/,(e,[t,i])=>{e.branches.push({name:t,tracking:i})}),new J(/\* \[new tag]\s+(\S+)\s*-> (.+)$/,(e,[t,i])=>{e.tags.push({name:t,tracking:i})}),new J(/- \[deleted]\s+\S+\s*-> (.+)$/,(e,[t])=>{e.deleted.push({tracking:t})}),new J(/\s*([^.]+)\.\.(\S+)\s+(\S+)\s*-> (.+)$/,(e,[t,i,r,n])=>{e.updated.push({name:r,tracking:n,to:i,from:t})})]}}),Zv={};Oe(Zv,{fetchTask:()=>yD});function vD(e){return/^--upload-pack(=|$)/.test(e)}function yD(e,t,i){let r=["fetch",...i];return e&&t&&r.push(e,t),r.find(vD)?Ze("git.fetch: potential exploit argument blocked."):{commands:r,format:"utf-8",parser:gD}}var bD=M({"src/lib/tasks/fetch.ts"(){"use strict";xD(),Ce()}});function wD(e){return Qe({moves:[]},Qv,e)}var Qv,ED=M({"src/lib/parsers/parse-move.ts"(){"use strict";Y(),Qv=[new J(/^Renaming (.+) to (.+)$/,(e,[t,i])=>{e.moves.push({from:t,to:i})})]}}),ey={};Oe(ey,{moveTask:()=>_D});function _D(e,t){return{commands:["mv","-v",...At(e),t],format:"utf-8",parser:wD}}var TD=M({"src/lib/tasks/move.ts"(){"use strict";ED(),Y()}}),ty={};Oe(ty,{pullTask:()=>SD});function SD(e,t,i){let r=["pull",...i];return e&&t&&r.splice(1,0,e,t),{commands:r,format:"utf-8",parser(n,s){return du(n,s)},onError(n,s,o,a){let c=LA(Br(n.stdOut),Br(n.stdErr));if(c)return a(new zr(c));a(s)}}}var CD=M({"src/lib/tasks/pull.ts"(){"use strict";tr(),Sv(),Y()}});function OD(e){let t={};return iy(e,([i])=>t[i]={name:i}),Object.values(t)}function AD(e){let t={};return iy(e,([i,r,n])=>{t.hasOwnProperty(i)||(t[i]={name:i,refs:{fetch:"",push:""}}),n&&r&&(t[i].refs[n.replace(/[^a-z]/g,"")]=r)}),Object.values(t)}function iy(e,t){Vc(e,i=>t(i.split(/\s+/)))}var DD=M({"src/lib/responses/GetRemoteSummary.ts"(){"use strict";Y()}}),ry={};Oe(ry,{addRemoteTask:()=>ID,getRemotesTask:()=>ND,listRemotesTask:()=>LD,remoteTask:()=>kD,removeRemoteTask:()=>RD});function ID(e,t,i){return Ve(["remote","add",...i,e,t])}function ND(e){let t=["remote"];return e&&t.push("-v"),{commands:t,format:"utf-8",parser:e?AD:OD}}function LD(e){let t=[...e];return t[0]!=="ls-remote"&&t.unshift("ls-remote"),Ve(t)}function kD(e){let t=[...e];return t[0]!=="remote"&&t.unshift("remote"),Ve(t)}function RD(e){return Ve(["remote","remove",e])}var PD=M({"src/lib/tasks/remote.ts"(){"use strict";DD(),Ce()}}),ny={};Oe(ny,{stashListTask:()=>FD});function FD(e={},t){let i=mv(e),r=["stash","list",...i.commands,...t],n=pv(i.splitter,i.fields,ou(r));return vs(r)||{commands:r,format:"utf-8",parser:n}}var jD=M({"src/lib/tasks/stash-list.ts"(){"use strict";Xr(),fv(),pu(),gv()}}),sy={};Oe(sy,{addSubModuleTask:()=>MD,initSubModuleTask:()=>qD,subModuleTask:()=>bs,updateSubModuleTask:()=>BD});function MD(e,t){return bs(["add",e,t])}function qD(e){return bs(["init",...e])}function bs(e){let t=[...e];return t[0]!=="submodule"&&t.unshift("submodule"),Ve(t)}function BD(e){return bs(["update",...e])}var UD=M({"src/lib/tasks/sub-module.ts"(){"use strict";Ce()}});function $D(e,t){let i=isNaN(e),r=isNaN(t);return i!==r?i?1:-1:i?oy(e,t):0}function oy(e,t){return e===t?0:e>t?1:-1}function zD(e){return e.trim()}function is(e){return typeof e=="string"&&parseInt(e.replace(/^\D+/g,""),10)||0}var ix,ay,HD=M({"src/lib/responses/TagList.ts"(){"use strict";ix=class{constructor(e,t){this.all=e,this.latest=t}},ay=function(e,t=!1){let i=e.split(`
`).map(zD).filter(Boolean);t||i.sort(function(n,s){let o=n.split("."),a=s.split(".");if(o.length===1||a.length===1)return $D(is(o[0]),is(a[0]));for(let c=0,u=Math.max(o.length,a.length);c<u;c++){let m=oy(is(o[c]),is(a[c]));if(m)return m}return 0});let r=t?i[0]:[...i].reverse().find(n=>n.indexOf(".")>=0);return new ix(i,r)}}}),cy={};Oe(cy,{addAnnotatedTagTask:()=>XD,addTagTask:()=>VD,tagListTask:()=>GD});function GD(e=[]){let t=e.some(i=>/^--sort=/.test(i));return{format:"utf-8",commands:["tag","-l",...e],parser(i){return ay(i,t)}}}function VD(e){return{format:"utf-8",commands:["tag",e],parser(){return{name:e}}}}function XD(e,t){return{format:"utf-8",commands:["tag","-a","-m",t,e],parser(){return{name:e}}}}var YD=M({"src/lib/tasks/tag.ts"(){"use strict";HD()}}),WD=d1({"src/git.js"(e,t){"use strict";var{GitExecutor:i}=(J1(),_e(tv)),{SimpleGitApi:r}=(WA(),_e(Pv)),{Scheduler:n}=(KA(),_e(Fv)),{configurationErrorTask:s}=(Ce(),_e(jc)),{asArray:o,filterArray:a,filterPrimitives:c,filterString:u,filterStringOrStringArray:m,filterType:g,getTrailingOptions:x,trailingFunctionArgument:p,trailingOptionsArgument:h}=(Y(),_e(Sx)),{applyPatchTask:v}=(ZA(),_e(qv)),{branchTask:E,branchLocalTask:S,deleteBranchesTask:_,deleteBranchTask:l}=(uD(),_e(Gv)),{checkIgnoreTask:d}=(dD(),_e(Yv)),{checkIsRepoTask:f}=(Dx(),_e(Cx)),{cloneTask:w,cloneMirrorTask:O}=(mD(),_e(Wv)),{cleanWithOptionsTask:y,isCleanOptionsArray:A}=(Bx(),_e(Mx)),{diffSummaryTask:C}=(pu(),_e(hv)),{fetchTask:I}=(bD(),_e(Zv)),{moveTask:R}=(TD(),_e(ey)),{pullTask:F}=(CD(),_e(ty)),{pushTagsTask:G}=(Dv(),_e(Av)),{addRemoteTask:K,getRemotesTask:$,listRemotesTask:z,remoteTask:j,removeRemoteTask:oe}=(PD(),_e(ry)),{getResetMode:Se,resetTask:pe}=(Zx(),_e(Wx)),{stashListTask:lt}=(jD(),_e(ny)),{addSubModuleTask:Vt,initSubModuleTask:He,subModuleTask:Ge,updateSubModuleTask:T}=(UD(),_e(sy)),{addAnnotatedTagTask:b,addTagTask:k,tagListTask:N}=(YD(),_e(cy)),{straightThroughBufferTask:te,straightThroughStringTask:re}=(Ce(),_e(jc));function U(P,H){this._plugins=H,this._executor=new i(P.baseDir,new n(P.maxConcurrentProcesses),H),this._trimmed=P.trimmed}(U.prototype=Object.create(r.prototype)).constructor=U,U.prototype.customBinary=function(P){return this._plugins.reconfigure("binary",P),this},U.prototype.env=function(P,H){return arguments.length===1&&typeof P=="object"?this._executor.env=P:(this._executor.env=this._executor.env||{})[P]=H,this},U.prototype.stashList=function(P){return this._runTask(lt(h(arguments)||{},a(P)&&P||[]),p(arguments))};function Me(P,H,X,ue){return typeof X!="string"?s(`git.${P}() requires a string 'repoPath'`):H(X,g(ue,u),x(arguments))}U.prototype.clone=function(){return this._runTask(Me("clone",w,...arguments),p(arguments))},U.prototype.mirror=function(){return this._runTask(Me("mirror",O,...arguments),p(arguments))},U.prototype.mv=function(P,H){return this._runTask(R(P,H),p(arguments))},U.prototype.checkoutLatestTag=function(P){var H=this;return this.pull(function(){H.tags(function(X,ue){H.checkout(ue.latest,P)})})},U.prototype.pull=function(P,H,X,ue){return this._runTask(F(g(P,u),g(H,u),x(arguments)),p(arguments))},U.prototype.fetch=function(P,H){return this._runTask(I(g(P,u),g(H,u),x(arguments)),p(arguments))},U.prototype.silent=function(P){return console.warn("simple-git deprecation notice: git.silent: logging should be configured using the `debug` library / `DEBUG` environment variable, this will be an error in version 3"),this},U.prototype.tags=function(P,H){return this._runTask(N(x(arguments)),p(arguments))},U.prototype.rebase=function(){return this._runTask(re(["rebase",...x(arguments)]),p(arguments))},U.prototype.reset=function(P){return this._runTask(pe(Se(P),x(arguments)),p(arguments))},U.prototype.revert=function(P){let H=p(arguments);return typeof P!="string"?this._runTask(s("Commit must be a string"),H):this._runTask(re(["revert",...x(arguments,0,!0),P]),H)},U.prototype.addTag=function(P){let H=typeof P=="string"?k(P):s("Git.addTag requires a tag name");return this._runTask(H,p(arguments))},U.prototype.addAnnotatedTag=function(P,H){return this._runTask(b(P,H),p(arguments))},U.prototype.deleteLocalBranch=function(P,H,X){return this._runTask(l(P,typeof H=="boolean"?H:!1),p(arguments))},U.prototype.deleteLocalBranches=function(P,H,X){return this._runTask(_(P,typeof H=="boolean"?H:!1),p(arguments))},U.prototype.branch=function(P,H){return this._runTask(E(x(arguments)),p(arguments))},U.prototype.branchLocal=function(P){return this._runTask(S(),p(arguments))},U.prototype.raw=function(P){let H=!Array.isArray(P),X=[].slice.call(H?arguments:P,0);for(let it=0;it<X.length&&H;it++)if(!c(X[it])){X.splice(it,X.length-it);break}X.push(...x(arguments,0,!0));var ue=p(arguments);return X.length?this._runTask(re(X,this._trimmed),ue):this._runTask(s("Raw: must supply one or more command to execute"),ue)},U.prototype.submoduleAdd=function(P,H,X){return this._runTask(Vt(P,H),p(arguments))},U.prototype.submoduleUpdate=function(P,H){return this._runTask(T(x(arguments,!0)),p(arguments))},U.prototype.submoduleInit=function(P,H){return this._runTask(He(x(arguments,!0)),p(arguments))},U.prototype.subModule=function(P,H){return this._runTask(Ge(x(arguments)),p(arguments))},U.prototype.listRemote=function(){return this._runTask(z(x(arguments)),p(arguments))},U.prototype.addRemote=function(P,H,X){return this._runTask(K(P,H,x(arguments)),p(arguments))},U.prototype.removeRemote=function(P,H){return this._runTask(oe(P),p(arguments))},U.prototype.getRemotes=function(P,H){return this._runTask($(P===!0),p(arguments))},U.prototype.remote=function(P,H){return this._runTask(j(x(arguments)),p(arguments))},U.prototype.tag=function(P,H){let X=x(arguments);return X[0]!=="tag"&&X.unshift("tag"),this._runTask(re(X),p(arguments))},U.prototype.updateServerInfo=function(P){return this._runTask(re(["update-server-info"]),p(arguments))},U.prototype.pushTags=function(P,H){let X=G({remote:g(P,u)},x(arguments));return this._runTask(X,p(arguments))},U.prototype.rm=function(P){return this._runTask(re(["rm","-f",...o(P)]),p(arguments))},U.prototype.rmKeepLocal=function(P){return this._runTask(re(["rm","--cached",...o(P)]),p(arguments))},U.prototype.catFile=function(P,H){return this._catFile("utf-8",arguments)},U.prototype.binaryCatFile=function(){return this._catFile("buffer",arguments)},U.prototype._catFile=function(P,H){var X=p(H),ue=["cat-file"],it=H[0];if(typeof it=="string")return this._runTask(s("Git.catFile: options must be supplied as an array of strings"),X);Array.isArray(it)&&ue.push.apply(ue,it);let Ii=P==="buffer"?te(ue):re(ue);return this._runTask(Ii,X)},U.prototype.diff=function(P,H){let X=u(P)?s("git.diff: supplying options as a single string is no longer supported, switch to an array of strings"):re(["diff",...x(arguments)]);return this._runTask(X,p(arguments))},U.prototype.diffSummary=function(){return this._runTask(C(x(arguments,1)),p(arguments))},U.prototype.applyPatch=function(P){let H=m(P)?v(o(P),x([].slice.call(arguments,1))):s("git.applyPatch requires one or more string patches as the first argument");return this._runTask(H,p(arguments))},U.prototype.revparse=function(){let P=["rev-parse",...x(arguments,!0)];return this._runTask(re(P,!0),p(arguments))},U.prototype.clean=function(P,H,X){let ue=A(P),it=ue&&P.join("")||g(P,u)||"",Ii=x([].slice.call(arguments,ue?1:0));return this._runTask(y(it,Ii),p(arguments))},U.prototype.exec=function(P){let H={commands:[],format:"utf-8",parser(){typeof P=="function"&&P()}};return this._runTask(H)},U.prototype.clearQueue=function(){return this},U.prototype.checkIgnore=function(P,H){return this._runTask(d(o(g(P,m,[]))),p(arguments))},U.prototype.checkIsRepo=function(P,H){return this._runTask(f(g(P,u)),p(arguments))},t.exports=U}});$r();ri();var KD=class extends Ut{constructor(e,t){super(void 0,t),this.config=e}};ri();ri();var Bt=class extends Ut{constructor(e,t,i){super(e,i),this.task=e,this.plugin=t,Object.setPrototypeOf(this,new.target.prototype)}};tr();ux();Dx();Bx();zx();Gx();Yx();Zx();function JD(e){return e?[{type:"spawn.before",action(r,n){e.aborted&&n.kill(new Bt(void 0,"abort","Abort already signaled"))}},{type:"spawn.after",action(r,n){function s(){n.kill(new Bt(void 0,"abort","Abort signal received"))}e.addEventListener("abort",s),n.spawned.on("close",()=>e.removeEventListener("abort",s))}}]:void 0}function ZD(e){return typeof e=="string"&&e.trim().toLowerCase()==="-c"}function QD(e,t){if(ZD(e)&&/^\s*protocol(.[a-z]+)?.allow/.test(t))throw new Bt(void 0,"unsafe","Configuring protocol.allow is not permitted without enabling allowUnsafeExtProtocol")}function eI(e,t){if(/^\s*--(upload|receive)-pack/.test(e))throw new Bt(void 0,"unsafe","Use of --upload-pack or --receive-pack is not permitted without enabling allowUnsafePack");if(t==="clone"&&/^\s*-u\b/.test(e))throw new Bt(void 0,"unsafe","Use of clone with option -u is not permitted without enabling allowUnsafePack");if(t==="push"&&/^\s*--exec\b/.test(e))throw new Bt(void 0,"unsafe","Use of push with option --exec is not permitted without enabling allowUnsafePack")}function tI({allowUnsafeProtocolOverride:e=!1,allowUnsafePack:t=!1}={}){return{type:"spawn.args",action(i,r){return i.forEach((n,s)=>{let o=s<i.length?i[s+1]:"";e||QD(n,o),t||eI(n,r.method)}),i}}}Y();function iI(e){let t=qr(e,"-c");return{type:"spawn.args",action(i){return[...t,...i]}}}Y();var rx=(0,Qi.deferred)().promise;function rI({onClose:e=!0,onExit:t=50}={}){function i(){let n=-1,s={close:(0,Qi.deferred)(),closeTimeout:(0,Qi.deferred)(),exit:(0,Qi.deferred)(),exitTimeout:(0,Qi.deferred)()},o=Promise.race([e===!1?rx:s.closeTimeout.promise,t===!1?rx:s.exitTimeout.promise]);return r(e,s.close,s.closeTimeout),r(t,s.exit,s.exitTimeout),{close(a){n=a,s.close.done()},exit(a){n=a,s.exit.done()},get exitCode(){return n},result:o}}function r(n,s,o){n!==!1&&(n===!0?s.promise:s.promise.then(()=>kc(n))).then(o.done)}return{type:"spawn.after",action(n,s){return jr(this,arguments,function*(o,{spawned:a,close:c}){var u,m;let g=i(),x=!0,p=()=>void(x=!1);(u=a.stdout)==null||u.on("data",p),(m=a.stderr)==null||m.on("data",p),a.on("error",p),a.on("close",h=>g.close(h)),a.on("exit",h=>g.exit(h));try{yield g.result,x&&(yield kc(50)),c(g.exitCode)}catch(h){c(g.exitCode,h)}})}}}Y();var nI="Invalid value supplied for custom binary, requires a single string or an array containing either one or two strings",nx="Invalid value supplied for custom binary, restricted characters must be removed or supply the unsafe.allowUnsafeCustomBinary option";function sI(e){return!e||!/^([a-z]:)?([a-z0-9/.\\_-]+)$/i.test(e)}function sx(e,t){if(e.length<1||e.length>2)throw new Bt(void 0,"binary",nI);if(e.some(sI))if(t)console.warn(nx);else throw new Bt(void 0,"binary",nx);let[r,n]=e;return{binary:r,prefix:n}}function oI(e,t=["git"],i=!1){let r=sx(At(t),i);e.on("binary",n=>{r=sx(At(n),i)}),e.append("spawn.binary",()=>r.binary),e.append("spawn.args",n=>r.prefix?[r.prefix,...n]:n)}ri();function aI(e){return!!(e.exitCode&&e.stdErr.length)}function cI(e){return Buffer.concat([...e.stdOut,...e.stdErr])}function uI(e=!1,t=aI,i=cI){return(r,n)=>!e&&r||!t(n)?r:i(n)}function ox(e){return{type:"task.error",action(t,i){let r=e(t.error,{stdErr:i.stdErr,stdOut:i.stdOut,exitCode:i.exitCode});return Buffer.isBuffer(r)?{error:new Ut(void 0,r.toString("utf-8"))}:{error:r}}}}Y();var lI=class{constructor(){this.plugins=new Set,this.events=new uy.EventEmitter}on(e,t){this.events.on(e,t)}reconfigure(e,t){this.events.emit(e,t)}append(e,t){let i=ee(this.plugins,{type:e,action:t});return()=>this.plugins.delete(i)}add(e){let t=[];return At(e).forEach(i=>i&&this.plugins.add(ee(t,i))),()=>{t.forEach(i=>this.plugins.delete(i))}}exec(e,t,i){let r=t,n=Object.freeze(Object.create(i));for(let s of this.plugins)s.type===e&&(r=s.action(r,n));return r}};Y();function pI(e){let t="--progress",i=["checkout","clone","fetch","pull","push"];return[{type:"spawn.args",action(s,o){return i.includes(o.method)?mx(s,t):s}},{type:"spawn.after",action(s,o){var a;o.commands.includes(t)&&((a=o.spawned.stderr)==null||a.on("data",c=>{let u=/^([\s\S]+?):\s*(\d+)% \((\d+)\/(\d+)\)/.exec(c.toString("utf8"));u&&e({method:o.method,stage:dI(u[1]),progress:le(u[2]),processed:le(u[3]),total:le(u[4])})}))}}]}function dI(e){return String(e.toLowerCase().split(" ",1))||"unknown"}Y();function fI(e){let t=vx(e,["uid","gid"]);return{type:"spawn.options",action(i){return ft(ft({},t),i)}}}function hI({block:e,stdErr:t=!0,stdOut:i=!0}){if(e>0)return{type:"spawn.after",action(r,n){var s,o;let a;function c(){a&&clearTimeout(a),a=setTimeout(m,e)}function u(){var g,x;(g=n.spawned.stdout)==null||g.off("data",c),(x=n.spawned.stderr)==null||x.off("data",c),n.spawned.off("exit",u),n.spawned.off("close",u),a&&clearTimeout(a)}function m(){u(),n.kill(new Bt(void 0,"timeout","block timeout reached"))}i&&((s=n.spawned.stdout)==null||s.on("data",c)),t&&((o=n.spawned.stderr)==null||o.on("data",c)),n.spawned.on("exit",u),n.spawned.on("close",u),c()}}}$r();function mI(){return{type:"spawn.args",action(e){let t=[],i;function r(n){(i=i||[]).push(...n)}for(let n=0;n<e.length;n++){let s=e[n];if(as(s)){r(Ig(s));continue}if(s==="--"){r(e.slice(n+1).flatMap(o=>as(o)&&Ig(o)||o));break}t.push(s)}return i?[...t,"--",...i.map(String)]:t}}}Y();var gI=WD();function xI(e,t){var i;let r=new lI,n=_x(e&&(typeof e=="string"?{baseDir:e}:e)||{},t);if(!Xc(n.baseDir))throw new KD(n,"Cannot use simple-git on a directory that does not exist");return Array.isArray(n.config)&&r.add(iI(n.config)),r.add(tI(n.unsafe)),r.add(mI()),r.add(rI(n.completion)),n.abort&&r.add(JD(n.abort)),n.progress&&r.add(pI(n.progress)),n.timeout&&r.add(hI(n.timeout)),n.spawnOptions&&r.add(fI(n.spawnOptions)),r.add(ox(uI(!0))),n.errors&&r.add(ox(n.errors)),oI(r,n.binary,(i=n.unsafe)==null?void 0:i.allowUnsafeCustomBinary),new gI(n,r)}tr();var ly=xI;var D0=ae(require("child_process")),I0=ae(Dy());var Ei=require("fs"),zy=require("path");var Cs=require("fs");function gu(e){if(!Number.isSafeInteger(e))throw new Error(`Wrong integer: ${e}`)}function SI(e){return e instanceof Uint8Array||e!=null&&typeof e=="object"&&e.constructor.name==="Uint8Array"}function CI(...e){let t=s=>s,i=(s,o)=>a=>s(o(a)),r=e.map(s=>s.encode).reduceRight(i,t),n=e.map(s=>s.decode).reduce(i,t);return{encode:r,decode:n}}function OI(e){return{encode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="number")throw new Error("alphabet.encode input should be an array of numbers");return t.map(i=>{if(i<0||i>=e.length)throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${e.length})`);return e[i]})},decode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="string")throw new Error("alphabet.decode input should be array of strings");return t.map(i=>{if(typeof i!="string")throw new Error(`alphabet.decode: not string element=${i}`);let r=e.indexOf(i);if(r===-1)throw new Error(`Unknown letter: "${i}". Allowed: ${e}`);return r})}}}function AI(e=""){if(typeof e!="string")throw new Error("join separator should be string");return{encode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="string")throw new Error("join.encode input should be array of strings");for(let i of t)if(typeof i!="string")throw new Error(`join.encode: non-string input=${i}`);return t.join(e)},decode:t=>{if(typeof t!="string")throw new Error("join.decode input should be string");return t.split(e)}}}function Iy(e,t,i){if(t<2)throw new Error(`convertRadix: wrong from=${t}, base cannot be less than 2`);if(i<2)throw new Error(`convertRadix: wrong to=${i}, base cannot be less than 2`);if(!Array.isArray(e))throw new Error("convertRadix: data should be array");if(!e.length)return[];let r=0,n=[],s=Array.from(e);for(s.forEach(o=>{if(o<0||o>=t)throw new Error(`Wrong integer: ${o}`)});;){let o=0,a=!0;for(let c=r;c<s.length;c++){let u=s[c],m=t*o+u;if(!Number.isSafeInteger(m)||t*o/t!==o||m-u!==t*o)throw new Error("convertRadix: carry overflow");o=m%i;let g=Math.floor(m/i);if(s[c]=g,!Number.isSafeInteger(g)||g*i+o!==m)throw new Error("convertRadix: carry overflow");if(a)g?a=!1:r=c;else continue}if(n.push(o),a)break}for(let o=0;o<e.length-1&&e[o]===0;o++)n.push(0);return n.reverse()}function DI(e){return{encode:t=>{if(!SI(t))throw new Error("radix.encode input should be Uint8Array");return Iy(Array.from(t),2**8,e)},decode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="number")throw new Error("radix.decode input should be array of numbers");return Uint8Array.from(Iy(t,e,2**8))}}}var II=e=>CI(DI(58),OI(e),AI("")),xu=II("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");var at=require("path"),Uy=ae(qy()),rr=require("fs"),Yr=".",By="/*",_s="scaffoldly/scaffoldly:1";var YI=(0,at.join)(at.sep,"var","task"),WI=e=>{if(e.startsWith(`${_s}:`))return JSON.parse(new TextDecoder().decode(xu.decode(e.split(`${_s}:`)[1])));throw new Error(`Invalid config: ${e}`)},KI=e=>`${_s}:${xu.encode(new TextEncoder().encode(JSON.stringify(e)))}`,Ts=class e{commands;constructor(){this.commands=[]}add=t=>(this.commands.push(t),this);isEmpty=t=>(t?this.commands.filter(r=>r.schedule===t.schedule):this.commands).length===0;toString=t=>(t?this.commands.filter(r=>r.schedule===t.schedule):this.commands).map(r=>r.workdir?`( cd ${r.workdir} && ${r.cmd} )`:`( ${r.cmd} )`).join(" & ");encode=()=>KI(this.commands);static decode=t=>{let i=WI(t),r=new e;return i.forEach(n=>{r.add(n)}),r}},Ss=class e{constructor(t,i,r={},n="production"){this.baseDir=t;this.workDir=i;this.mode=n;let{projectJson:s,serviceConfig:o}=r;if(this.projectJson=s,s){let{scaffoldly:a={},name:c="unknown",version:u="0.0.0-0"}=s;this.scaffoldly=a,this._name=c,this._version=u,this._bin={...s.bin||{},...a.bin||{}},this._files=[...s.files||[],...a.files||[]],this._packages=a.packages||[],o&&(this.scaffoldly={...a,runtime:o.runtime||a.runtime,services:[],routes:void 0},this.serviceConfig=o,this._name=o.name,this._packages=[...o.packages||[]],this._files=[...new Set([...this._files||[],...o.files||[]])],this._bin={...this._bin||{},...o.bin||{}});return}throw new Error("Unable to create scaffoldly config")}projectJson;scaffoldly;serviceConfig;mode;_id="";_name;_version;_bin;_files;_packages;_ignoreFilter;set id(t){this._id=t}get id(){let{_id:t}=this;return t||""}get name(){let t=this.serviceConfig?.name||this._name||"unknown-service",i=/[a-z0-9]+(?:[._-][a-z0-9]+)*/,n=t.replace(/\//g,"-").toLowerCase().replace(/[^a-z0-9._-]/g,""),s=n.match(i);if(!s||!s[0])throw new Error(`Invalid service name: '${t}' (sanitized: ${n})`);t=s[0];let o=this.serviceConfig?.id||this._id;return o&&(t=`${t}-${o}`),t}get version(){let{_version:t}=this;return t}get runtime(){let{runtime:t="alpine:3"}=this.serviceConfig||this.scaffoldly;return t}get handler(){let{handler:t="localhost:3000"}=this.serviceConfig||this.scaffoldly;return t}get files(){let{_files:t=[]}=this;return[...new Set(t)]}get src(){let{src:t=Yr}=this.serviceConfig||this.scaffoldly;return t}get bin(){let{_bin:t={}}=this;return t}get scripts(){let{scripts:t={}}=this.serviceConfig||this.scaffoldly;return t}get services(){let{services:t=[]}=this.scaffoldly;return t.map((i,r)=>new e(this.baseDir,this.workDir,{projectJson:this.projectJson,serviceConfig:{id:i.id||"",name:i.name||`${r+1}`,runtime:i.runtime||this.runtime,handler:i.handler||this.handler,src:i.src||this.src,files:i.files||[],bin:i.bin||{},packages:i.packages||[],shell:i.shell,scripts:i.scripts||{},schedules:i.schedules||{}}},this.mode))}get routes(){let{routes:t}=this.scaffoldly;return t||(t={}),t[By]||(t[By]=this.handler),t}get installCommands(){let t="install",i=new Ts,r=this.src!==Yr?this.src:void 0;return this.scripts[t]&&i.add({cmd:this.scripts[t],workdir:r}),this.services.forEach(n=>{r=n.src!==Yr?n.src:void 0,n.scripts[t]&&i.add({cmd:n.scripts[t],workdir:r})}),i}get serveCommands(){let t=this.mode==="development"?"dev":"start",i=new Ts,r=this.src!==Yr?this.src:void 0;return this.scripts[t]&&i.add({cmd:this.scripts[t],workdir:r}),Object.entries(this.schedules).forEach(([n,s])=>{i.add({cmd:s,workdir:r,schedule:n})}),this.services.forEach(n=>{r=n.src!==Yr?n.src:void 0,n.scripts[t]&&i.add({cmd:n.scripts[t],workdir:r}),Object.entries(n.schedules).forEach(([s,o])=>{i.add({cmd:o,workdir:r,schedule:s})})}),i}get rootdir(){let{taskdir:t}=this.scaffoldly;return t||(t=YI),t}get taskdir(){let{rootdir:t}=this;return(0,at.join)(t,(0,at.relative)(this.baseDir,(0,at.join)(this.workDir)))}get packages(){return this._packages||[]}get shell(){let{shell:t}=this.serviceConfig||this.scaffoldly;return t}get schedules(){let{schedules:t={}}=this.serviceConfig||this.scaffoldly;return t}get resources(){let{resources:t=[]}=this.scaffoldly;return t}get runtimes(){let t=[_s,this.runtime,...this.services.map(i=>i.runtime)];return[...new Set(t)]}get timeout(){let{timeout:t=900}=this.scaffoldly;return t}get memorySize(){let{memorySize:t=1024}=this.scaffoldly;return t}get ignoreFilter(){if(this._ignoreFilter)return this._ignoreFilter;let t=(0,Uy.default)();return[".gitignore",".dockerignore"].map(i=>{[(0,at.join)(this.baseDir,i),(0,at.join)(this.workDir,i),(0,at.join)(this.workDir,this.src,i)].forEach(r=>{(0,rr.existsSync)(r)&&t.add((0,rr.readFileSync)(r).toString())})}),this._ignoreFilter=t.createFilter(),this._ignoreFilter}get ignoredFiles(){let t=(0,at.join)(this.workDir,this.src);return(0,rr.readdirSync)(t).filter(r=>{let n=(0,at.relative)(this.workDir,r);return!this.ignoreFilter(n)})}get generatedFiles(){let{generatedFiles:t=[]}=this.scaffoldly;return t}get user(){let{user:t}=this.scaffoldly;return t}};var $y=require("path"),ht=class{constructor(t,i){this.gitService=t;this.workDir=i}get workdir(){if(this.gitService)return this.gitService.workDir;if(this.workDir)return Promise.resolve(this.workDir);throw new Error("Workdir is unknown")}get standaloneConfigFile(){return this.workdir.then(t=>{let i=(0,$y.join)(t,"scaffoldly.json");if((0,Cs.existsSync)(i))return i})}get standaloneConfig(){return this.standaloneConfigFile.then(t=>{if(!t)return;let i={},r=JSON.parse((0,Cs.readFileSync)(t,"utf-8"));return Object.assign(i,r),i})}get installCommands(){return Promise.all([this.workDir,this.projectJson]).then(([t,i])=>!i||!t?void 0:new Ss(t,t,{projectJson:i}).installCommands)}};var Os=class extends ht{async setProject(t){return this.packageJsonFile.then(i=>{if(!i)return;let r=JSON.parse((0,Ei.readFileSync)(i,"utf8"));r.name=t,delete r.license,delete r.description,(0,Ei.writeFileSync)(i,JSON.stringify(r,null,2))})}get packageJsonFile(){return this.workdir.then(t=>(0,zy.join)(t,"package.json")).then(t=>{if((0,Ei.existsSync)(t))return t})}get packageJson(){return this.packageJsonFile.then(t=>{if(t)try{let i=JSON.parse((0,Ei.readFileSync)(t,"utf8"));return i.type="node",i}catch{return}})}get projectJson(){return this.packageJson}};function sb(e){return typeof e>"u"||e===null}function JI(e){return typeof e=="object"&&e!==null}function ZI(e){return Array.isArray(e)?e:sb(e)?[]:[e]}function QI(e,t){var i,r,n,s;if(t)for(s=Object.keys(t),i=0,r=s.length;i<r;i+=1)n=s[i],e[n]=t[n];return e}function eN(e,t){var i="",r;for(r=0;r<t;r+=1)i+=e;return i}function tN(e){return e===0&&Number.NEGATIVE_INFINITY===1/e}var iN=sb,rN=JI,nN=ZI,sN=eN,oN=tN,aN=QI,Re={isNothing:iN,isObject:rN,toArray:nN,repeat:sN,isNegativeZero:oN,extend:aN};function ob(e,t){var i="",r=e.reason||"(unknown reason)";return e.mark?(e.mark.name&&(i+='in "'+e.mark.name+'" '),i+="("+(e.mark.line+1)+":"+(e.mark.column+1)+")",!t&&e.mark.snippet&&(i+=`

`+e.mark.snippet),r+" "+i):r}function Kr(e,t){Error.call(this),this.name="YAMLException",this.reason=e,this.mark=t,this.message=ob(this,!1),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack||""}Kr.prototype=Object.create(Error.prototype);Kr.prototype.constructor=Kr;Kr.prototype.toString=function(t){return this.name+": "+ob(this,t)};var et=Kr;function Tu(e,t,i,r,n){var s="",o="",a=Math.floor(n/2)-1;return r-t>a&&(s=" ... ",t=r-a+s.length),i-r>a&&(o=" ...",i=r+a-o.length),{str:s+e.slice(t,i).replace(/\t/g,"\u2192")+o,pos:r-t+s.length}}function Su(e,t){return Re.repeat(" ",t-e.length)+e}function cN(e,t){if(t=Object.create(t||null),!e.buffer)return null;t.maxLength||(t.maxLength=79),typeof t.indent!="number"&&(t.indent=1),typeof t.linesBefore!="number"&&(t.linesBefore=3),typeof t.linesAfter!="number"&&(t.linesAfter=2);for(var i=/\r?\n|\r|\0/g,r=[0],n=[],s,o=-1;s=i.exec(e.buffer);)n.push(s.index),r.push(s.index+s[0].length),e.position<=s.index&&o<0&&(o=r.length-2);o<0&&(o=r.length-1);var a="",c,u,m=Math.min(e.line+t.linesAfter,n.length).toString().length,g=t.maxLength-(t.indent+m+3);for(c=1;c<=t.linesBefore&&!(o-c<0);c++)u=Tu(e.buffer,r[o-c],n[o-c],e.position-(r[o]-r[o-c]),g),a=Re.repeat(" ",t.indent)+Su((e.line-c+1).toString(),m)+" | "+u.str+`
`+a;for(u=Tu(e.buffer,r[o],n[o],e.position,g),a+=Re.repeat(" ",t.indent)+Su((e.line+1).toString(),m)+" | "+u.str+`
`,a+=Re.repeat("-",t.indent+m+3+u.pos)+`^
`,c=1;c<=t.linesAfter&&!(o+c>=n.length);c++)u=Tu(e.buffer,r[o+c],n[o+c],e.position-(r[o]-r[o+c]),g),a+=Re.repeat(" ",t.indent)+Su((e.line+c+1).toString(),m)+" | "+u.str+`
`;return a.replace(/\n$/,"")}var uN=cN,lN=["kind","multi","resolve","construct","instanceOf","predicate","represent","representName","defaultStyle","styleAliases"],pN=["scalar","sequence","mapping"];function dN(e){var t={};return e!==null&&Object.keys(e).forEach(function(i){e[i].forEach(function(r){t[String(r)]=i})}),t}function fN(e,t){if(t=t||{},Object.keys(t).forEach(function(i){if(lN.indexOf(i)===-1)throw new et('Unknown option "'+i+'" is met in definition of "'+e+'" YAML type.')}),this.options=t,this.tag=e,this.kind=t.kind||null,this.resolve=t.resolve||function(){return!0},this.construct=t.construct||function(i){return i},this.instanceOf=t.instanceOf||null,this.predicate=t.predicate||null,this.represent=t.represent||null,this.representName=t.representName||null,this.defaultStyle=t.defaultStyle||null,this.multi=t.multi||!1,this.styleAliases=dN(t.styleAliases||null),pN.indexOf(this.kind)===-1)throw new et('Unknown kind "'+this.kind+'" is specified for "'+e+'" YAML type.')}var $e=fN;function Hy(e,t){var i=[];return e[t].forEach(function(r){var n=i.length;i.forEach(function(s,o){s.tag===r.tag&&s.kind===r.kind&&s.multi===r.multi&&(n=o)}),i[n]=r}),i}function hN(){var e={scalar:{},sequence:{},mapping:{},fallback:{},multi:{scalar:[],sequence:[],mapping:[],fallback:[]}},t,i;function r(n){n.multi?(e.multi[n.kind].push(n),e.multi.fallback.push(n)):e[n.kind][n.tag]=e.fallback[n.tag]=n}for(t=0,i=arguments.length;t<i;t+=1)arguments[t].forEach(r);return e}function Ou(e){return this.extend(e)}Ou.prototype.extend=function(t){var i=[],r=[];if(t instanceof $e)r.push(t);else if(Array.isArray(t))r=r.concat(t);else if(t&&(Array.isArray(t.implicit)||Array.isArray(t.explicit)))t.implicit&&(i=i.concat(t.implicit)),t.explicit&&(r=r.concat(t.explicit));else throw new et("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");i.forEach(function(s){if(!(s instanceof $e))throw new et("Specified list of YAML types (or a single Type object) contains a non-Type object.");if(s.loadKind&&s.loadKind!=="scalar")throw new et("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");if(s.multi)throw new et("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.")}),r.forEach(function(s){if(!(s instanceof $e))throw new et("Specified list of YAML types (or a single Type object) contains a non-Type object.")});var n=Object.create(Ou.prototype);return n.implicit=(this.implicit||[]).concat(i),n.explicit=(this.explicit||[]).concat(r),n.compiledImplicit=Hy(n,"implicit"),n.compiledExplicit=Hy(n,"explicit"),n.compiledTypeMap=hN(n.compiledImplicit,n.compiledExplicit),n};var mN=Ou,gN=new $e("tag:yaml.org,2002:str",{kind:"scalar",construct:function(e){return e!==null?e:""}}),xN=new $e("tag:yaml.org,2002:seq",{kind:"sequence",construct:function(e){return e!==null?e:[]}}),vN=new $e("tag:yaml.org,2002:map",{kind:"mapping",construct:function(e){return e!==null?e:{}}}),yN=new mN({explicit:[gN,xN,vN]});function bN(e){if(e===null)return!0;var t=e.length;return t===1&&e==="~"||t===4&&(e==="null"||e==="Null"||e==="NULL")}function wN(){return null}function EN(e){return e===null}var _N=new $e("tag:yaml.org,2002:null",{kind:"scalar",resolve:bN,construct:wN,predicate:EN,represent:{canonical:function(){return"~"},lowercase:function(){return"null"},uppercase:function(){return"NULL"},camelcase:function(){return"Null"},empty:function(){return""}},defaultStyle:"lowercase"});function TN(e){if(e===null)return!1;var t=e.length;return t===4&&(e==="true"||e==="True"||e==="TRUE")||t===5&&(e==="false"||e==="False"||e==="FALSE")}function SN(e){return e==="true"||e==="True"||e==="TRUE"}function CN(e){return Object.prototype.toString.call(e)==="[object Boolean]"}var ON=new $e("tag:yaml.org,2002:bool",{kind:"scalar",resolve:TN,construct:SN,predicate:CN,represent:{lowercase:function(e){return e?"true":"false"},uppercase:function(e){return e?"TRUE":"FALSE"},camelcase:function(e){return e?"True":"False"}},defaultStyle:"lowercase"});function AN(e){return 48<=e&&e<=57||65<=e&&e<=70||97<=e&&e<=102}function DN(e){return 48<=e&&e<=55}function IN(e){return 48<=e&&e<=57}function NN(e){if(e===null)return!1;var t=e.length,i=0,r=!1,n;if(!t)return!1;if(n=e[i],(n==="-"||n==="+")&&(n=e[++i]),n==="0"){if(i+1===t)return!0;if(n=e[++i],n==="b"){for(i++;i<t;i++)if(n=e[i],n!=="_"){if(n!=="0"&&n!=="1")return!1;r=!0}return r&&n!=="_"}if(n==="x"){for(i++;i<t;i++)if(n=e[i],n!=="_"){if(!AN(e.charCodeAt(i)))return!1;r=!0}return r&&n!=="_"}if(n==="o"){for(i++;i<t;i++)if(n=e[i],n!=="_"){if(!DN(e.charCodeAt(i)))return!1;r=!0}return r&&n!=="_"}}if(n==="_")return!1;for(;i<t;i++)if(n=e[i],n!=="_"){if(!IN(e.charCodeAt(i)))return!1;r=!0}return!(!r||n==="_")}function LN(e){var t=e,i=1,r;if(t.indexOf("_")!==-1&&(t=t.replace(/_/g,"")),r=t[0],(r==="-"||r==="+")&&(r==="-"&&(i=-1),t=t.slice(1),r=t[0]),t==="0")return 0;if(r==="0"){if(t[1]==="b")return i*parseInt(t.slice(2),2);if(t[1]==="x")return i*parseInt(t.slice(2),16);if(t[1]==="o")return i*parseInt(t.slice(2),8)}return i*parseInt(t,10)}function kN(e){return Object.prototype.toString.call(e)==="[object Number]"&&e%1===0&&!Re.isNegativeZero(e)}var RN=new $e("tag:yaml.org,2002:int",{kind:"scalar",resolve:NN,construct:LN,predicate:kN,represent:{binary:function(e){return e>=0?"0b"+e.toString(2):"-0b"+e.toString(2).slice(1)},octal:function(e){return e>=0?"0o"+e.toString(8):"-0o"+e.toString(8).slice(1)},decimal:function(e){return e.toString(10)},hexadecimal:function(e){return e>=0?"0x"+e.toString(16).toUpperCase():"-0x"+e.toString(16).toUpperCase().slice(1)}},defaultStyle:"decimal",styleAliases:{binary:[2,"bin"],octal:[8,"oct"],decimal:[10,"dec"],hexadecimal:[16,"hex"]}}),PN=new RegExp("^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");function FN(e){return!(e===null||!PN.test(e)||e[e.length-1]==="_")}function jN(e){var t,i;return t=e.replace(/_/g,"").toLowerCase(),i=t[0]==="-"?-1:1,"+-".indexOf(t[0])>=0&&(t=t.slice(1)),t===".inf"?i===1?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY:t===".nan"?NaN:i*parseFloat(t,10)}var MN=/^[-+]?[0-9]+e/;function qN(e,t){var i;if(isNaN(e))switch(t){case"lowercase":return".nan";case"uppercase":return".NAN";case"camelcase":return".NaN"}else if(Number.POSITIVE_INFINITY===e)switch(t){case"lowercase":return".inf";case"uppercase":return".INF";case"camelcase":return".Inf"}else if(Number.NEGATIVE_INFINITY===e)switch(t){case"lowercase":return"-.inf";case"uppercase":return"-.INF";case"camelcase":return"-.Inf"}else if(Re.isNegativeZero(e))return"-0.0";return i=e.toString(10),MN.test(i)?i.replace("e",".e"):i}function BN(e){return Object.prototype.toString.call(e)==="[object Number]"&&(e%1!==0||Re.isNegativeZero(e))}var UN=new $e("tag:yaml.org,2002:float",{kind:"scalar",resolve:FN,construct:jN,predicate:BN,represent:qN,defaultStyle:"lowercase"}),$N=yN.extend({implicit:[_N,ON,RN,UN]}),zN=$N,ab=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"),cb=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");function HN(e){return e===null?!1:ab.exec(e)!==null||cb.exec(e)!==null}function GN(e){var t,i,r,n,s,o,a,c=0,u=null,m,g,x;if(t=ab.exec(e),t===null&&(t=cb.exec(e)),t===null)throw new Error("Date resolve error");if(i=+t[1],r=+t[2]-1,n=+t[3],!t[4])return new Date(Date.UTC(i,r,n));if(s=+t[4],o=+t[5],a=+t[6],t[7]){for(c=t[7].slice(0,3);c.length<3;)c+="0";c=+c}return t[9]&&(m=+t[10],g=+(t[11]||0),u=(m*60+g)*6e4,t[9]==="-"&&(u=-u)),x=new Date(Date.UTC(i,r,n,s,o,a,c)),u&&x.setTime(x.getTime()-u),x}function VN(e){return e.toISOString()}var XN=new $e("tag:yaml.org,2002:timestamp",{kind:"scalar",resolve:HN,construct:GN,instanceOf:Date,represent:VN});function YN(e){return e==="<<"||e===null}var WN=new $e("tag:yaml.org,2002:merge",{kind:"scalar",resolve:YN}),Lu=`ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=
\r`;function KN(e){if(e===null)return!1;var t,i,r=0,n=e.length,s=Lu;for(i=0;i<n;i++)if(t=s.indexOf(e.charAt(i)),!(t>64)){if(t<0)return!1;r+=6}return r%8===0}function JN(e){var t,i,r=e.replace(/[\r\n=]/g,""),n=r.length,s=Lu,o=0,a=[];for(t=0;t<n;t++)t%4===0&&t&&(a.push(o>>16&255),a.push(o>>8&255),a.push(o&255)),o=o<<6|s.indexOf(r.charAt(t));return i=n%4*6,i===0?(a.push(o>>16&255),a.push(o>>8&255),a.push(o&255)):i===18?(a.push(o>>10&255),a.push(o>>2&255)):i===12&&a.push(o>>4&255),new Uint8Array(a)}function ZN(e){var t="",i=0,r,n,s=e.length,o=Lu;for(r=0;r<s;r++)r%3===0&&r&&(t+=o[i>>18&63],t+=o[i>>12&63],t+=o[i>>6&63],t+=o[i&63]),i=(i<<8)+e[r];return n=s%3,n===0?(t+=o[i>>18&63],t+=o[i>>12&63],t+=o[i>>6&63],t+=o[i&63]):n===2?(t+=o[i>>10&63],t+=o[i>>4&63],t+=o[i<<2&63],t+=o[64]):n===1&&(t+=o[i>>2&63],t+=o[i<<4&63],t+=o[64],t+=o[64]),t}function QN(e){return Object.prototype.toString.call(e)==="[object Uint8Array]"}var eL=new $e("tag:yaml.org,2002:binary",{kind:"scalar",resolve:KN,construct:JN,predicate:QN,represent:ZN}),tL=Object.prototype.hasOwnProperty,iL=Object.prototype.toString;function rL(e){if(e===null)return!0;var t=[],i,r,n,s,o,a=e;for(i=0,r=a.length;i<r;i+=1){if(n=a[i],o=!1,iL.call(n)!=="[object Object]")return!1;for(s in n)if(tL.call(n,s))if(!o)o=!0;else return!1;if(!o)return!1;if(t.indexOf(s)===-1)t.push(s);else return!1}return!0}function nL(e){return e!==null?e:[]}var sL=new $e("tag:yaml.org,2002:omap",{kind:"sequence",resolve:rL,construct:nL}),oL=Object.prototype.toString;function aL(e){if(e===null)return!0;var t,i,r,n,s,o=e;for(s=new Array(o.length),t=0,i=o.length;t<i;t+=1){if(r=o[t],oL.call(r)!=="[object Object]"||(n=Object.keys(r),n.length!==1))return!1;s[t]=[n[0],r[n[0]]]}return!0}function cL(e){if(e===null)return[];var t,i,r,n,s,o=e;for(s=new Array(o.length),t=0,i=o.length;t<i;t+=1)r=o[t],n=Object.keys(r),s[t]=[n[0],r[n[0]]];return s}var uL=new $e("tag:yaml.org,2002:pairs",{kind:"sequence",resolve:aL,construct:cL}),lL=Object.prototype.hasOwnProperty;function pL(e){if(e===null)return!0;var t,i=e;for(t in i)if(lL.call(i,t)&&i[t]!==null)return!1;return!0}function dL(e){return e!==null?e:{}}var fL=new $e("tag:yaml.org,2002:set",{kind:"mapping",resolve:pL,construct:dL}),ub=zN.extend({implicit:[XN,WN],explicit:[eL,sL,uL,fL]}),si=Object.prototype.hasOwnProperty,As=1,lb=2,pb=3,Ds=4,Cu=1,hL=2,Gy=3,mL=/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,gL=/[\x85\u2028\u2029]/,xL=/[,\[\]\{\}]/,db=/^(?:!|!!|![a-z\-]+!)$/i,fb=/^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;function Vy(e){return Object.prototype.toString.call(e)}function It(e){return e===10||e===13}function Ti(e){return e===9||e===32}function tt(e){return e===9||e===32||e===10||e===13}function sr(e){return e===44||e===91||e===93||e===123||e===125}function vL(e){var t;return 48<=e&&e<=57?e-48:(t=e|32,97<=t&&t<=102?t-97+10:-1)}function yL(e){return e===120?2:e===117?4:e===85?8:0}function bL(e){return 48<=e&&e<=57?e-48:-1}function Xy(e){return e===48?"\0":e===97?"\x07":e===98?"\b":e===116||e===9?"	":e===110?`
`:e===118?"\v":e===102?"\f":e===114?"\r":e===101?"\x1B":e===32?" ":e===34?'"':e===47?"/":e===92?"\\":e===78?"\x85":e===95?"\xA0":e===76?"\u2028":e===80?"\u2029":""}function wL(e){return e<=65535?String.fromCharCode(e):String.fromCharCode((e-65536>>10)+55296,(e-65536&1023)+56320)}var hb=new Array(256),mb=new Array(256);for(_i=0;_i<256;_i++)hb[_i]=Xy(_i)?1:0,mb[_i]=Xy(_i);var _i;function EL(e,t){this.input=e,this.filename=t.filename||null,this.schema=t.schema||ub,this.onWarning=t.onWarning||null,this.legacy=t.legacy||!1,this.json=t.json||!1,this.listener=t.listener||null,this.implicitTypes=this.schema.compiledImplicit,this.typeMap=this.schema.compiledTypeMap,this.length=e.length,this.position=0,this.line=0,this.lineStart=0,this.lineIndent=0,this.firstTabInLine=-1,this.documents=[]}function gb(e,t){var i={name:e.filename,buffer:e.input.slice(0,-1),position:e.position,line:e.line,column:e.position-e.lineStart};return i.snippet=uN(i),new et(t,i)}function V(e,t){throw gb(e,t)}function Is(e,t){e.onWarning&&e.onWarning.call(null,gb(e,t))}var Yy={YAML:function(t,i,r){var n,s,o;t.version!==null&&V(t,"duplication of %YAML directive"),r.length!==1&&V(t,"YAML directive accepts exactly one argument"),n=/^([0-9]+)\.([0-9]+)$/.exec(r[0]),n===null&&V(t,"ill-formed argument of the YAML directive"),s=parseInt(n[1],10),o=parseInt(n[2],10),s!==1&&V(t,"unacceptable YAML version of the document"),t.version=r[0],t.checkLineBreaks=o<2,o!==1&&o!==2&&Is(t,"unsupported YAML version of the document")},TAG:function(t,i,r){var n,s;r.length!==2&&V(t,"TAG directive accepts exactly two arguments"),n=r[0],s=r[1],db.test(n)||V(t,"ill-formed tag handle (first argument) of the TAG directive"),si.call(t.tagMap,n)&&V(t,'there is a previously declared suffix for "'+n+'" tag handle'),fb.test(s)||V(t,"ill-formed tag prefix (second argument) of the TAG directive");try{s=decodeURIComponent(s)}catch{V(t,"tag prefix is malformed: "+s)}t.tagMap[n]=s}};function ni(e,t,i,r){var n,s,o,a;if(t<i){if(a=e.input.slice(t,i),r)for(n=0,s=a.length;n<s;n+=1)o=a.charCodeAt(n),o===9||32<=o&&o<=1114111||V(e,"expected valid JSON character");else mL.test(a)&&V(e,"the stream contains non-printable characters");e.result+=a}}function Wy(e,t,i,r){var n,s,o,a;for(Re.isObject(i)||V(e,"cannot merge mappings; the provided source object is unacceptable"),n=Object.keys(i),o=0,a=n.length;o<a;o+=1)s=n[o],si.call(t,s)||(t[s]=i[s],r[s]=!0)}function or(e,t,i,r,n,s,o,a,c){var u,m;if(Array.isArray(n))for(n=Array.prototype.slice.call(n),u=0,m=n.length;u<m;u+=1)Array.isArray(n[u])&&V(e,"nested arrays are not supported inside keys"),typeof n=="object"&&Vy(n[u])==="[object Object]"&&(n[u]="[object Object]");if(typeof n=="object"&&Vy(n)==="[object Object]"&&(n="[object Object]"),n=String(n),t===null&&(t={}),r==="tag:yaml.org,2002:merge")if(Array.isArray(s))for(u=0,m=s.length;u<m;u+=1)Wy(e,t,s[u],i);else Wy(e,t,s,i);else!e.json&&!si.call(i,n)&&si.call(t,n)&&(e.line=o||e.line,e.lineStart=a||e.lineStart,e.position=c||e.position,V(e,"duplicated mapping key")),n==="__proto__"?Object.defineProperty(t,n,{configurable:!0,enumerable:!0,writable:!0,value:s}):t[n]=s,delete i[n];return t}function ku(e){var t;t=e.input.charCodeAt(e.position),t===10?e.position++:t===13?(e.position++,e.input.charCodeAt(e.position)===10&&e.position++):V(e,"a line break is expected"),e.line+=1,e.lineStart=e.position,e.firstTabInLine=-1}function Le(e,t,i){for(var r=0,n=e.input.charCodeAt(e.position);n!==0;){for(;Ti(n);)n===9&&e.firstTabInLine===-1&&(e.firstTabInLine=e.position),n=e.input.charCodeAt(++e.position);if(t&&n===35)do n=e.input.charCodeAt(++e.position);while(n!==10&&n!==13&&n!==0);if(It(n))for(ku(e),n=e.input.charCodeAt(e.position),r++,e.lineIndent=0;n===32;)e.lineIndent++,n=e.input.charCodeAt(++e.position);else break}return i!==-1&&r!==0&&e.lineIndent<i&&Is(e,"deficient indentation"),r}function ks(e){var t=e.position,i;return i=e.input.charCodeAt(t),!!((i===45||i===46)&&i===e.input.charCodeAt(t+1)&&i===e.input.charCodeAt(t+2)&&(t+=3,i=e.input.charCodeAt(t),i===0||tt(i)))}function Ru(e,t){t===1?e.result+=" ":t>1&&(e.result+=Re.repeat(`
`,t-1))}function _L(e,t,i){var r,n,s,o,a,c,u,m,g=e.kind,x=e.result,p;if(p=e.input.charCodeAt(e.position),tt(p)||sr(p)||p===35||p===38||p===42||p===33||p===124||p===62||p===39||p===34||p===37||p===64||p===96||(p===63||p===45)&&(n=e.input.charCodeAt(e.position+1),tt(n)||i&&sr(n)))return!1;for(e.kind="scalar",e.result="",s=o=e.position,a=!1;p!==0;){if(p===58){if(n=e.input.charCodeAt(e.position+1),tt(n)||i&&sr(n))break}else if(p===35){if(r=e.input.charCodeAt(e.position-1),tt(r))break}else{if(e.position===e.lineStart&&ks(e)||i&&sr(p))break;if(It(p))if(c=e.line,u=e.lineStart,m=e.lineIndent,Le(e,!1,-1),e.lineIndent>=t){a=!0,p=e.input.charCodeAt(e.position);continue}else{e.position=o,e.line=c,e.lineStart=u,e.lineIndent=m;break}}a&&(ni(e,s,o,!1),Ru(e,e.line-c),s=o=e.position,a=!1),Ti(p)||(o=e.position+1),p=e.input.charCodeAt(++e.position)}return ni(e,s,o,!1),e.result?!0:(e.kind=g,e.result=x,!1)}function TL(e,t){var i,r,n;if(i=e.input.charCodeAt(e.position),i!==39)return!1;for(e.kind="scalar",e.result="",e.position++,r=n=e.position;(i=e.input.charCodeAt(e.position))!==0;)if(i===39)if(ni(e,r,e.position,!0),i=e.input.charCodeAt(++e.position),i===39)r=e.position,e.position++,n=e.position;else return!0;else It(i)?(ni(e,r,n,!0),Ru(e,Le(e,!1,t)),r=n=e.position):e.position===e.lineStart&&ks(e)?V(e,"unexpected end of the document within a single quoted scalar"):(e.position++,n=e.position);V(e,"unexpected end of the stream within a single quoted scalar")}function SL(e,t){var i,r,n,s,o,a;if(a=e.input.charCodeAt(e.position),a!==34)return!1;for(e.kind="scalar",e.result="",e.position++,i=r=e.position;(a=e.input.charCodeAt(e.position))!==0;){if(a===34)return ni(e,i,e.position,!0),e.position++,!0;if(a===92){if(ni(e,i,e.position,!0),a=e.input.charCodeAt(++e.position),It(a))Le(e,!1,t);else if(a<256&&hb[a])e.result+=mb[a],e.position++;else if((o=yL(a))>0){for(n=o,s=0;n>0;n--)a=e.input.charCodeAt(++e.position),(o=vL(a))>=0?s=(s<<4)+o:V(e,"expected hexadecimal character");e.result+=wL(s),e.position++}else V(e,"unknown escape sequence");i=r=e.position}else It(a)?(ni(e,i,r,!0),Ru(e,Le(e,!1,t)),i=r=e.position):e.position===e.lineStart&&ks(e)?V(e,"unexpected end of the document within a double quoted scalar"):(e.position++,r=e.position)}V(e,"unexpected end of the stream within a double quoted scalar")}function CL(e,t){var i=!0,r,n,s,o=e.tag,a,c=e.anchor,u,m,g,x,p,h=Object.create(null),v,E,S,_;if(_=e.input.charCodeAt(e.position),_===91)m=93,p=!1,a=[];else if(_===123)m=125,p=!0,a={};else return!1;for(e.anchor!==null&&(e.anchorMap[e.anchor]=a),_=e.input.charCodeAt(++e.position);_!==0;){if(Le(e,!0,t),_=e.input.charCodeAt(e.position),_===m)return e.position++,e.tag=o,e.anchor=c,e.kind=p?"mapping":"sequence",e.result=a,!0;i?_===44&&V(e,"expected the node content, but found ','"):V(e,"missed comma between flow collection entries"),E=v=S=null,g=x=!1,_===63&&(u=e.input.charCodeAt(e.position+1),tt(u)&&(g=x=!0,e.position++,Le(e,!0,t))),r=e.line,n=e.lineStart,s=e.position,ar(e,t,As,!1,!0),E=e.tag,v=e.result,Le(e,!0,t),_=e.input.charCodeAt(e.position),(x||e.line===r)&&_===58&&(g=!0,_=e.input.charCodeAt(++e.position),Le(e,!0,t),ar(e,t,As,!1,!0),S=e.result),p?or(e,a,h,E,v,S,r,n,s):g?a.push(or(e,null,h,E,v,S,r,n,s)):a.push(v),Le(e,!0,t),_=e.input.charCodeAt(e.position),_===44?(i=!0,_=e.input.charCodeAt(++e.position)):i=!1}V(e,"unexpected end of the stream within a flow collection")}function OL(e,t){var i,r,n=Cu,s=!1,o=!1,a=t,c=0,u=!1,m,g;if(g=e.input.charCodeAt(e.position),g===124)r=!1;else if(g===62)r=!0;else return!1;for(e.kind="scalar",e.result="";g!==0;)if(g=e.input.charCodeAt(++e.position),g===43||g===45)Cu===n?n=g===43?Gy:hL:V(e,"repeat of a chomping mode identifier");else if((m=bL(g))>=0)m===0?V(e,"bad explicit indentation width of a block scalar; it cannot be less than one"):o?V(e,"repeat of an indentation width identifier"):(a=t+m-1,o=!0);else break;if(Ti(g)){do g=e.input.charCodeAt(++e.position);while(Ti(g));if(g===35)do g=e.input.charCodeAt(++e.position);while(!It(g)&&g!==0)}for(;g!==0;){for(ku(e),e.lineIndent=0,g=e.input.charCodeAt(e.position);(!o||e.lineIndent<a)&&g===32;)e.lineIndent++,g=e.input.charCodeAt(++e.position);if(!o&&e.lineIndent>a&&(a=e.lineIndent),It(g)){c++;continue}if(e.lineIndent<a){n===Gy?e.result+=Re.repeat(`
`,s?1+c:c):n===Cu&&s&&(e.result+=`
`);break}for(r?Ti(g)?(u=!0,e.result+=Re.repeat(`
`,s?1+c:c)):u?(u=!1,e.result+=Re.repeat(`
`,c+1)):c===0?s&&(e.result+=" "):e.result+=Re.repeat(`
`,c):e.result+=Re.repeat(`
`,s?1+c:c),s=!0,o=!0,c=0,i=e.position;!It(g)&&g!==0;)g=e.input.charCodeAt(++e.position);ni(e,i,e.position,!1)}return!0}function Ky(e,t){var i,r=e.tag,n=e.anchor,s=[],o,a=!1,c;if(e.firstTabInLine!==-1)return!1;for(e.anchor!==null&&(e.anchorMap[e.anchor]=s),c=e.input.charCodeAt(e.position);c!==0&&(e.firstTabInLine!==-1&&(e.position=e.firstTabInLine,V(e,"tab characters must not be used in indentation")),!(c!==45||(o=e.input.charCodeAt(e.position+1),!tt(o))));){if(a=!0,e.position++,Le(e,!0,-1)&&e.lineIndent<=t){s.push(null),c=e.input.charCodeAt(e.position);continue}if(i=e.line,ar(e,t,pb,!1,!0),s.push(e.result),Le(e,!0,-1),c=e.input.charCodeAt(e.position),(e.line===i||e.lineIndent>t)&&c!==0)V(e,"bad indentation of a sequence entry");else if(e.lineIndent<t)break}return a?(e.tag=r,e.anchor=n,e.kind="sequence",e.result=s,!0):!1}function AL(e,t,i){var r,n,s,o,a,c,u=e.tag,m=e.anchor,g={},x=Object.create(null),p=null,h=null,v=null,E=!1,S=!1,_;if(e.firstTabInLine!==-1)return!1;for(e.anchor!==null&&(e.anchorMap[e.anchor]=g),_=e.input.charCodeAt(e.position);_!==0;){if(!E&&e.firstTabInLine!==-1&&(e.position=e.firstTabInLine,V(e,"tab characters must not be used in indentation")),r=e.input.charCodeAt(e.position+1),s=e.line,(_===63||_===58)&&tt(r))_===63?(E&&(or(e,g,x,p,h,null,o,a,c),p=h=v=null),S=!0,E=!0,n=!0):E?(E=!1,n=!0):V(e,"incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line"),e.position+=1,_=r;else{if(o=e.line,a=e.lineStart,c=e.position,!ar(e,i,lb,!1,!0))break;if(e.line===s){for(_=e.input.charCodeAt(e.position);Ti(_);)_=e.input.charCodeAt(++e.position);if(_===58)_=e.input.charCodeAt(++e.position),tt(_)||V(e,"a whitespace character is expected after the key-value separator within a block mapping"),E&&(or(e,g,x,p,h,null,o,a,c),p=h=v=null),S=!0,E=!1,n=!1,p=e.tag,h=e.result;else if(S)V(e,"can not read an implicit mapping pair; a colon is missed");else return e.tag=u,e.anchor=m,!0}else if(S)V(e,"can not read a block mapping entry; a multiline key may not be an implicit key");else return e.tag=u,e.anchor=m,!0}if((e.line===s||e.lineIndent>t)&&(E&&(o=e.line,a=e.lineStart,c=e.position),ar(e,t,Ds,!0,n)&&(E?h=e.result:v=e.result),E||(or(e,g,x,p,h,v,o,a,c),p=h=v=null),Le(e,!0,-1),_=e.input.charCodeAt(e.position)),(e.line===s||e.lineIndent>t)&&_!==0)V(e,"bad indentation of a mapping entry");else if(e.lineIndent<t)break}return E&&or(e,g,x,p,h,null,o,a,c),S&&(e.tag=u,e.anchor=m,e.kind="mapping",e.result=g),S}function DL(e){var t,i=!1,r=!1,n,s,o;if(o=e.input.charCodeAt(e.position),o!==33)return!1;if(e.tag!==null&&V(e,"duplication of a tag property"),o=e.input.charCodeAt(++e.position),o===60?(i=!0,o=e.input.charCodeAt(++e.position)):o===33?(r=!0,n="!!",o=e.input.charCodeAt(++e.position)):n="!",t=e.position,i){do o=e.input.charCodeAt(++e.position);while(o!==0&&o!==62);e.position<e.length?(s=e.input.slice(t,e.position),o=e.input.charCodeAt(++e.position)):V(e,"unexpected end of the stream within a verbatim tag")}else{for(;o!==0&&!tt(o);)o===33&&(r?V(e,"tag suffix cannot contain exclamation marks"):(n=e.input.slice(t-1,e.position+1),db.test(n)||V(e,"named tag handle cannot contain such characters"),r=!0,t=e.position+1)),o=e.input.charCodeAt(++e.position);s=e.input.slice(t,e.position),xL.test(s)&&V(e,"tag suffix cannot contain flow indicator characters")}s&&!fb.test(s)&&V(e,"tag name cannot contain such characters: "+s);try{s=decodeURIComponent(s)}catch{V(e,"tag name is malformed: "+s)}return i?e.tag=s:si.call(e.tagMap,n)?e.tag=e.tagMap[n]+s:n==="!"?e.tag="!"+s:n==="!!"?e.tag="tag:yaml.org,2002:"+s:V(e,'undeclared tag handle "'+n+'"'),!0}function IL(e){var t,i;if(i=e.input.charCodeAt(e.position),i!==38)return!1;for(e.anchor!==null&&V(e,"duplication of an anchor property"),i=e.input.charCodeAt(++e.position),t=e.position;i!==0&&!tt(i)&&!sr(i);)i=e.input.charCodeAt(++e.position);return e.position===t&&V(e,"name of an anchor node must contain at least one character"),e.anchor=e.input.slice(t,e.position),!0}function NL(e){var t,i,r;if(r=e.input.charCodeAt(e.position),r!==42)return!1;for(r=e.input.charCodeAt(++e.position),t=e.position;r!==0&&!tt(r)&&!sr(r);)r=e.input.charCodeAt(++e.position);return e.position===t&&V(e,"name of an alias node must contain at least one character"),i=e.input.slice(t,e.position),si.call(e.anchorMap,i)||V(e,'unidentified alias "'+i+'"'),e.result=e.anchorMap[i],Le(e,!0,-1),!0}function ar(e,t,i,r,n){var s,o,a,c=1,u=!1,m=!1,g,x,p,h,v,E;if(e.listener!==null&&e.listener("open",e),e.tag=null,e.anchor=null,e.kind=null,e.result=null,s=o=a=Ds===i||pb===i,r&&Le(e,!0,-1)&&(u=!0,e.lineIndent>t?c=1:e.lineIndent===t?c=0:e.lineIndent<t&&(c=-1)),c===1)for(;DL(e)||IL(e);)Le(e,!0,-1)?(u=!0,a=s,e.lineIndent>t?c=1:e.lineIndent===t?c=0:e.lineIndent<t&&(c=-1)):a=!1;if(a&&(a=u||n),(c===1||Ds===i)&&(As===i||lb===i?v=t:v=t+1,E=e.position-e.lineStart,c===1?a&&(Ky(e,E)||AL(e,E,v))||CL(e,v)?m=!0:(o&&OL(e,v)||TL(e,v)||SL(e,v)?m=!0:NL(e)?(m=!0,(e.tag!==null||e.anchor!==null)&&V(e,"alias node should not have any properties")):_L(e,v,As===i)&&(m=!0,e.tag===null&&(e.tag="?")),e.anchor!==null&&(e.anchorMap[e.anchor]=e.result)):c===0&&(m=a&&Ky(e,E))),e.tag===null)e.anchor!==null&&(e.anchorMap[e.anchor]=e.result);else if(e.tag==="?"){for(e.result!==null&&e.kind!=="scalar"&&V(e,'unacceptable node kind for !<?> tag; it should be "scalar", not "'+e.kind+'"'),g=0,x=e.implicitTypes.length;g<x;g+=1)if(h=e.implicitTypes[g],h.resolve(e.result)){e.result=h.construct(e.result),e.tag=h.tag,e.anchor!==null&&(e.anchorMap[e.anchor]=e.result);break}}else if(e.tag!=="!"){if(si.call(e.typeMap[e.kind||"fallback"],e.tag))h=e.typeMap[e.kind||"fallback"][e.tag];else for(h=null,p=e.typeMap.multi[e.kind||"fallback"],g=0,x=p.length;g<x;g+=1)if(e.tag.slice(0,p[g].tag.length)===p[g].tag){h=p[g];break}h||V(e,"unknown tag !<"+e.tag+">"),e.result!==null&&h.kind!==e.kind&&V(e,"unacceptable node kind for !<"+e.tag+'> tag; it should be "'+h.kind+'", not "'+e.kind+'"'),h.resolve(e.result,e.tag)?(e.result=h.construct(e.result,e.tag),e.anchor!==null&&(e.anchorMap[e.anchor]=e.result)):V(e,"cannot resolve a node with !<"+e.tag+"> explicit tag")}return e.listener!==null&&e.listener("close",e),e.tag!==null||e.anchor!==null||m}function LL(e){var t=e.position,i,r,n,s=!1,o;for(e.version=null,e.checkLineBreaks=e.legacy,e.tagMap=Object.create(null),e.anchorMap=Object.create(null);(o=e.input.charCodeAt(e.position))!==0&&(Le(e,!0,-1),o=e.input.charCodeAt(e.position),!(e.lineIndent>0||o!==37));){for(s=!0,o=e.input.charCodeAt(++e.position),i=e.position;o!==0&&!tt(o);)o=e.input.charCodeAt(++e.position);for(r=e.input.slice(i,e.position),n=[],r.length<1&&V(e,"directive name must not be less than one character in length");o!==0;){for(;Ti(o);)o=e.input.charCodeAt(++e.position);if(o===35){do o=e.input.charCodeAt(++e.position);while(o!==0&&!It(o));break}if(It(o))break;for(i=e.position;o!==0&&!tt(o);)o=e.input.charCodeAt(++e.position);n.push(e.input.slice(i,e.position))}o!==0&&ku(e),si.call(Yy,r)?Yy[r](e,r,n):Is(e,'unknown document directive "'+r+'"')}if(Le(e,!0,-1),e.lineIndent===0&&e.input.charCodeAt(e.position)===45&&e.input.charCodeAt(e.position+1)===45&&e.input.charCodeAt(e.position+2)===45?(e.position+=3,Le(e,!0,-1)):s&&V(e,"directives end mark is expected"),ar(e,e.lineIndent-1,Ds,!1,!0),Le(e,!0,-1),e.checkLineBreaks&&gL.test(e.input.slice(t,e.position))&&Is(e,"non-ASCII line breaks are interpreted as content"),e.documents.push(e.result),e.position===e.lineStart&&ks(e)){e.input.charCodeAt(e.position)===46&&(e.position+=3,Le(e,!0,-1));return}if(e.position<e.length-1)V(e,"end of the stream or a document separator is expected");else return}function xb(e,t){e=String(e),t=t||{},e.length!==0&&(e.charCodeAt(e.length-1)!==10&&e.charCodeAt(e.length-1)!==13&&(e+=`
`),e.charCodeAt(0)===65279&&(e=e.slice(1)));var i=new EL(e,t),r=e.indexOf("\0");for(r!==-1&&(i.position=r,V(i,"null byte is not allowed in input")),i.input+="\0";i.input.charCodeAt(i.position)===32;)i.lineIndent+=1,i.position+=1;for(;i.position<i.length-1;)LL(i);return i.documents}function kL(e,t,i){t!==null&&typeof t=="object"&&typeof i>"u"&&(i=t,t=null);var r=xb(e,i);if(typeof t!="function")return r;for(var n=0,s=r.length;n<s;n+=1)t(r[n])}function RL(e,t){var i=xb(e,t);if(i.length!==0){if(i.length===1)return i[0];throw new et("expected a single document in the stream, but found more")}}var PL=kL,FL=RL,vb={loadAll:PL,load:FL},yb=Object.prototype.toString,bb=Object.prototype.hasOwnProperty,Pu=65279,jL=9,Jr=10,ML=13,qL=32,BL=33,UL=34,Au=35,$L=37,zL=38,HL=39,GL=42,wb=44,VL=45,Ns=58,XL=61,YL=62,WL=63,KL=64,Eb=91,_b=93,JL=96,Tb=123,ZL=124,Sb=125,ze={};ze[0]="\\0";ze[7]="\\a";ze[8]="\\b";ze[9]="\\t";ze[10]="\\n";ze[11]="\\v";ze[12]="\\f";ze[13]="\\r";ze[27]="\\e";ze[34]='\\"';ze[92]="\\\\";ze[133]="\\N";ze[160]="\\_";ze[8232]="\\L";ze[8233]="\\P";var QL=["y","Y","yes","Yes","YES","on","On","ON","n","N","no","No","NO","off","Off","OFF"],ek=/^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;function tk(e,t){var i,r,n,s,o,a,c;if(t===null)return{};for(i={},r=Object.keys(t),n=0,s=r.length;n<s;n+=1)o=r[n],a=String(t[o]),o.slice(0,2)==="!!"&&(o="tag:yaml.org,2002:"+o.slice(2)),c=e.compiledTypeMap.fallback[o],c&&bb.call(c.styleAliases,a)&&(a=c.styleAliases[a]),i[o]=a;return i}function ik(e){var t,i,r;if(t=e.toString(16).toUpperCase(),e<=255)i="x",r=2;else if(e<=65535)i="u",r=4;else if(e<=4294967295)i="U",r=8;else throw new et("code point within a string may not be greater than 0xFFFFFFFF");return"\\"+i+Re.repeat("0",r-t.length)+t}var rk=1,Zr=2;function nk(e){this.schema=e.schema||ub,this.indent=Math.max(1,e.indent||2),this.noArrayIndent=e.noArrayIndent||!1,this.skipInvalid=e.skipInvalid||!1,this.flowLevel=Re.isNothing(e.flowLevel)?-1:e.flowLevel,this.styleMap=tk(this.schema,e.styles||null),this.sortKeys=e.sortKeys||!1,this.lineWidth=e.lineWidth||80,this.noRefs=e.noRefs||!1,this.noCompatMode=e.noCompatMode||!1,this.condenseFlow=e.condenseFlow||!1,this.quotingType=e.quotingType==='"'?Zr:rk,this.forceQuotes=e.forceQuotes||!1,this.replacer=typeof e.replacer=="function"?e.replacer:null,this.implicitTypes=this.schema.compiledImplicit,this.explicitTypes=this.schema.compiledExplicit,this.tag=null,this.result="",this.duplicates=[],this.usedDuplicates=null}function Jy(e,t){for(var i=Re.repeat(" ",t),r=0,n=-1,s="",o,a=e.length;r<a;)n=e.indexOf(`
`,r),n===-1?(o=e.slice(r),r=a):(o=e.slice(r,n+1),r=n+1),o.length&&o!==`
`&&(s+=i),s+=o;return s}function Du(e,t){return`
`+Re.repeat(" ",e.indent*t)}function sk(e,t){var i,r,n;for(i=0,r=e.implicitTypes.length;i<r;i+=1)if(n=e.implicitTypes[i],n.resolve(t))return!0;return!1}function Ls(e){return e===qL||e===jL}function Qr(e){return 32<=e&&e<=126||161<=e&&e<=55295&&e!==8232&&e!==8233||57344<=e&&e<=65533&&e!==Pu||65536<=e&&e<=1114111}function Zy(e){return Qr(e)&&e!==Pu&&e!==ML&&e!==Jr}function Qy(e,t,i){var r=Zy(e),n=r&&!Ls(e);return(i?r:r&&e!==wb&&e!==Eb&&e!==_b&&e!==Tb&&e!==Sb)&&e!==Au&&!(t===Ns&&!n)||Zy(t)&&!Ls(t)&&e===Au||t===Ns&&n}function ok(e){return Qr(e)&&e!==Pu&&!Ls(e)&&e!==VL&&e!==WL&&e!==Ns&&e!==wb&&e!==Eb&&e!==_b&&e!==Tb&&e!==Sb&&e!==Au&&e!==zL&&e!==GL&&e!==BL&&e!==ZL&&e!==XL&&e!==YL&&e!==HL&&e!==UL&&e!==$L&&e!==KL&&e!==JL}function ak(e){return!Ls(e)&&e!==Ns}function Wr(e,t){var i=e.charCodeAt(t),r;return i>=55296&&i<=56319&&t+1<e.length&&(r=e.charCodeAt(t+1),r>=56320&&r<=57343)?(i-55296)*1024+r-56320+65536:i}function Cb(e){var t=/^\n* /;return t.test(e)}var Ob=1,Iu=2,Ab=3,Db=4,nr=5;function ck(e,t,i,r,n,s,o,a){var c,u=0,m=null,g=!1,x=!1,p=r!==-1,h=-1,v=ok(Wr(e,0))&&ak(Wr(e,e.length-1));if(t||o)for(c=0;c<e.length;u>=65536?c+=2:c++){if(u=Wr(e,c),!Qr(u))return nr;v=v&&Qy(u,m,a),m=u}else{for(c=0;c<e.length;u>=65536?c+=2:c++){if(u=Wr(e,c),u===Jr)g=!0,p&&(x=x||c-h-1>r&&e[h+1]!==" ",h=c);else if(!Qr(u))return nr;v=v&&Qy(u,m,a),m=u}x=x||p&&c-h-1>r&&e[h+1]!==" "}return!g&&!x?v&&!o&&!n(e)?Ob:s===Zr?nr:Iu:i>9&&Cb(e)?nr:o?s===Zr?nr:Iu:x?Db:Ab}function uk(e,t,i,r,n){e.dump=function(){if(t.length===0)return e.quotingType===Zr?'""':"''";if(!e.noCompatMode&&(QL.indexOf(t)!==-1||ek.test(t)))return e.quotingType===Zr?'"'+t+'"':"'"+t+"'";var s=e.indent*Math.max(1,i),o=e.lineWidth===-1?-1:Math.max(Math.min(e.lineWidth,40),e.lineWidth-s),a=r||e.flowLevel>-1&&i>=e.flowLevel;function c(u){return sk(e,u)}switch(ck(t,a,e.indent,o,c,e.quotingType,e.forceQuotes&&!r,n)){case Ob:return t;case Iu:return"'"+t.replace(/'/g,"''")+"'";case Ab:return"|"+eb(t,e.indent)+tb(Jy(t,s));case Db:return">"+eb(t,e.indent)+tb(Jy(lk(t,o),s));case nr:return'"'+pk(t)+'"';default:throw new et("impossible error: invalid scalar style")}}()}function eb(e,t){var i=Cb(e)?String(t):"",r=e[e.length-1]===`
`,n=r&&(e[e.length-2]===`
`||e===`
`),s=n?"+":r?"":"-";return i+s+`
`}function tb(e){return e[e.length-1]===`
`?e.slice(0,-1):e}function lk(e,t){for(var i=/(\n+)([^\n]*)/g,r=function(){var u=e.indexOf(`
`);return u=u!==-1?u:e.length,i.lastIndex=u,ib(e.slice(0,u),t)}(),n=e[0]===`
`||e[0]===" ",s,o;o=i.exec(e);){var a=o[1],c=o[2];s=c[0]===" ",r+=a+(!n&&!s&&c!==""?`
`:"")+ib(c,t),n=s}return r}function ib(e,t){if(e===""||e[0]===" ")return e;for(var i=/ [^ ]/g,r,n=0,s,o=0,a=0,c="";r=i.exec(e);)a=r.index,a-n>t&&(s=o>n?o:a,c+=`
`+e.slice(n,s),n=s+1),o=a;return c+=`
`,e.length-n>t&&o>n?c+=e.slice(n,o)+`
`+e.slice(o+1):c+=e.slice(n),c.slice(1)}function pk(e){for(var t="",i=0,r,n=0;n<e.length;i>=65536?n+=2:n++)i=Wr(e,n),r=ze[i],!r&&Qr(i)?(t+=e[n],i>=65536&&(t+=e[n+1])):t+=r||ik(i);return t}function dk(e,t,i){var r="",n=e.tag,s,o,a;for(s=0,o=i.length;s<o;s+=1)a=i[s],e.replacer&&(a=e.replacer.call(i,String(s),a)),(zt(e,t,a,!1,!1)||typeof a>"u"&&zt(e,t,null,!1,!1))&&(r!==""&&(r+=","+(e.condenseFlow?"":" ")),r+=e.dump);e.tag=n,e.dump="["+r+"]"}function rb(e,t,i,r){var n="",s=e.tag,o,a,c;for(o=0,a=i.length;o<a;o+=1)c=i[o],e.replacer&&(c=e.replacer.call(i,String(o),c)),(zt(e,t+1,c,!0,!0,!1,!0)||typeof c>"u"&&zt(e,t+1,null,!0,!0,!1,!0))&&((!r||n!=="")&&(n+=Du(e,t)),e.dump&&Jr===e.dump.charCodeAt(0)?n+="-":n+="- ",n+=e.dump);e.tag=s,e.dump=n||"[]"}function fk(e,t,i){var r="",n=e.tag,s=Object.keys(i),o,a,c,u,m;for(o=0,a=s.length;o<a;o+=1)m="",r!==""&&(m+=", "),e.condenseFlow&&(m+='"'),c=s[o],u=i[c],e.replacer&&(u=e.replacer.call(i,c,u)),zt(e,t,c,!1,!1)&&(e.dump.length>1024&&(m+="? "),m+=e.dump+(e.condenseFlow?'"':"")+":"+(e.condenseFlow?"":" "),zt(e,t,u,!1,!1)&&(m+=e.dump,r+=m));e.tag=n,e.dump="{"+r+"}"}function hk(e,t,i,r){var n="",s=e.tag,o=Object.keys(i),a,c,u,m,g,x;if(e.sortKeys===!0)o.sort();else if(typeof e.sortKeys=="function")o.sort(e.sortKeys);else if(e.sortKeys)throw new et("sortKeys must be a boolean or a function");for(a=0,c=o.length;a<c;a+=1)x="",(!r||n!=="")&&(x+=Du(e,t)),u=o[a],m=i[u],e.replacer&&(m=e.replacer.call(i,u,m)),zt(e,t+1,u,!0,!0,!0)&&(g=e.tag!==null&&e.tag!=="?"||e.dump&&e.dump.length>1024,g&&(e.dump&&Jr===e.dump.charCodeAt(0)?x+="?":x+="? "),x+=e.dump,g&&(x+=Du(e,t)),zt(e,t+1,m,!0,g)&&(e.dump&&Jr===e.dump.charCodeAt(0)?x+=":":x+=": ",x+=e.dump,n+=x));e.tag=s,e.dump=n||"{}"}function nb(e,t,i){var r,n,s,o,a,c;for(n=i?e.explicitTypes:e.implicitTypes,s=0,o=n.length;s<o;s+=1)if(a=n[s],(a.instanceOf||a.predicate)&&(!a.instanceOf||typeof t=="object"&&t instanceof a.instanceOf)&&(!a.predicate||a.predicate(t))){if(i?a.multi&&a.representName?e.tag=a.representName(t):e.tag=a.tag:e.tag="?",a.represent){if(c=e.styleMap[a.tag]||a.defaultStyle,yb.call(a.represent)==="[object Function]")r=a.represent(t,c);else if(bb.call(a.represent,c))r=a.represent[c](t,c);else throw new et("!<"+a.tag+'> tag resolver accepts not "'+c+'" style');e.dump=r}return!0}return!1}function zt(e,t,i,r,n,s,o){e.tag=null,e.dump=i,nb(e,i,!1)||nb(e,i,!0);var a=yb.call(e.dump),c=r,u;r&&(r=e.flowLevel<0||e.flowLevel>t);var m=a==="[object Object]"||a==="[object Array]",g,x;if(m&&(g=e.duplicates.indexOf(i),x=g!==-1),(e.tag!==null&&e.tag!=="?"||x||e.indent!==2&&t>0)&&(n=!1),x&&e.usedDuplicates[g])e.dump="*ref_"+g;else{if(m&&x&&!e.usedDuplicates[g]&&(e.usedDuplicates[g]=!0),a==="[object Object]")r&&Object.keys(e.dump).length!==0?(hk(e,t,e.dump,n),x&&(e.dump="&ref_"+g+e.dump)):(fk(e,t,e.dump),x&&(e.dump="&ref_"+g+" "+e.dump));else if(a==="[object Array]")r&&e.dump.length!==0?(e.noArrayIndent&&!o&&t>0?rb(e,t-1,e.dump,n):rb(e,t,e.dump,n),x&&(e.dump="&ref_"+g+e.dump)):(dk(e,t,e.dump),x&&(e.dump="&ref_"+g+" "+e.dump));else if(a==="[object String]")e.tag!=="?"&&uk(e,e.dump,t,s,c);else{if(a==="[object Undefined]")return!1;if(e.skipInvalid)return!1;throw new et("unacceptable kind of an object to dump "+a)}e.tag!==null&&e.tag!=="?"&&(u=encodeURI(e.tag[0]==="!"?e.tag.slice(1):e.tag).replace(/!/g,"%21"),e.tag[0]==="!"?u="!"+u:u.slice(0,18)==="tag:yaml.org,2002:"?u="!!"+u.slice(18):u="!<"+u+">",e.dump=u+" "+e.dump)}return!0}function mk(e,t){var i=[],r=[],n,s;for(Nu(e,i,r),n=0,s=r.length;n<s;n+=1)t.duplicates.push(i[r[n]]);t.usedDuplicates=new Array(s)}function Nu(e,t,i){var r,n,s;if(e!==null&&typeof e=="object")if(n=t.indexOf(e),n!==-1)i.indexOf(n)===-1&&i.push(n);else if(t.push(e),Array.isArray(e))for(n=0,s=e.length;n<s;n+=1)Nu(e[n],t,i);else for(r=Object.keys(e),n=0,s=r.length;n<s;n+=1)Nu(e[r[n]],t,i)}function gk(e,t){t=t||{};var i=new nk(t);i.noRefs||mk(e,i);var r=e;return i.replacer&&(r=i.replacer.call({"":r},"",r)),zt(i,0,r,!0,!0)?i.dump+`
`:""}var xk=gk,vk={dump:xk};function Fu(e,t){return function(){throw new Error("Function yaml."+e+" is removed in js-yaml 4. Use yaml."+t+" instead, which is now safe by default.")}}var Ib=vb.load,k3=vb.loadAll,R3=vk.dump;var P3=Fu("safeLoad","load"),F3=Fu("safeLoadAll","loadAll"),j3=Fu("safeDump","dump");var Si=require("fs"),Nb=require("path");var Rs=class extends ht{async setProject(t){this.goModFile.then(i=>{if(!i)return;let n=(0,Si.readFileSync)(i,"utf8").split(`
`).map(s=>s.match(/^module\s+(\S+)/)?`module ${t}`:s);(0,Si.writeFileSync)(i,n.join(`
`))})}get goModFile(){return this.workdir.then(t=>(0,Nb.join)(t,"go.mod")).then(t=>{if((0,Si.existsSync)(t))return t})}get goProject(){return this.goModFile.then(t=>{if(!t)return;let i=(0,Si.readFileSync)(t,"utf8").split(`
`),r,n=!1,s={};return i.forEach(o=>{let a=o.match(/^module\s+(\S+)/),c=o.match(/^require\s+(\S+)\s+(\S+)/),u=o.match(/^require\s*\(\s*$/),m=o.match(/^\s*\)\s*$/);if(a){s.module=a[1];let g=o.match(/(?:^module\s+|\/)([^/\s]+)$/);g&&(r=g[1])}else if(u)n=!0;else if(m)n=!1;else if(n){let g=o.match(/^\s*(\S+)\s+(\S+)\s(.*)$/);g&&(s.require||(s.require=[]),s.require.push({module:g[1],version:g[2]}))}else c&&(s.require||(s.require=[]),s.require.push({module:c[1],version:c[2]}))}),{projectName:r,goMod:s}})}get projectJson(){return Promise.all([this.goProject,this.standaloneConfig]).then(([t,i])=>{let r={type:"golang"};if(!t)return;let{projectName:n,goMod:s}=t;return r.name=n,r.dependencies=s.require?.reduce((o,a)=>(o[a.module]=a.version,o),{}),i&&(r.scaffoldly=i),r})}};var Zs=require("fs"),t0=require("path");var i0=ae(e0()),Js=class extends ht{async setProject(t){throw new Error("Not implemented")}get projectFile(){return this.workdir.then(t=>{let i=(0,Zs.readdirSync)(t).filter(r=>r.endsWith(".csproj"));if(i.length!==0){if(i.length>1)throw new Error(`Multiple .csproj files found: ${i.join(", ")}.`);return i[0]}})}get project(){return Promise.all([this.projectFile,this.workdir]).then(([t,i])=>{if(t)return(0,i0.parseStringPromise)((0,Zs.readFileSync)((0,t0.join)(i,t))).then(r=>({projectName:t.replace(".csproj",""),csProj:r}))})}get projectJson(){return this.project.then(t=>{let i={type:"dotnet"};if(!t)return;let{projectName:r,csProj:n}=t;i.name=r;let s=n?.Project;if(!s)return;let o=s.PropertyGroup?.[0];if(!o)return;let a=o.Version?.[0];i.version=a;let c=o.Scaffoldly?.[0];if(!c)return;let u=(c.Bin||[]).reduce((g,x)=>{let p=x.$?.name,h=x._;return!p||!h||(g[p]=h),g},{}),m=(c.Service||[]).map(g=>{let x=(g.Script||[]).reduce((p,h)=>{let v=h.$?.name,E=h._;return!v||!E||(p[v]=E),p},{});return{name:g.$?.name,scripts:x,files:g.File}});return i.scaffoldly={runtime:c.Runtime?.[0],handler:c.Handler?.[0],bin:u,services:m},i})}};var Ai=require("fs"),u0=require("path");function yk(e,t){let i=e.slice(0,t).split(/\r\n|\n|\r/g);return[i.length,i.pop().length+1]}function bk(e,t,i){let r=e.split(/\r\n|\n|\r/g),n="",s=(Math.log10(t+1)|0)+1;for(let o=t-1;o<=t+1;o++){let a=r[o-1];a&&(n+=o.toString().padEnd(s," "),n+=":  ",n+=a,n+=`
`,o===t&&(n+=" ".repeat(s+i+2),n+=`^
`))}return n}var W=class extends Error{line;column;codeblock;constructor(t,i){let[r,n]=yk(i.toml,i.ptr),s=bk(i.toml,r,n);super(`Invalid TOML document: ${t}

${s}`,i),this.line=r,this.column=n,this.codeblock=s}};function cr(e,t=0,i=e.length){let r=e.indexOf(`
`,t);return e[r-1]==="\r"&&r--,r<=i?r:-1}function rn(e,t){for(let i=t;i<e.length;i++){let r=e[i];if(r===`
`)return i;if(r==="\r"&&e[i+1]===`
`)return i+1;if(r<" "&&r!=="	"||r==="\x7F")throw new W("control characters are not allowed in comments",{toml:e,ptr:t})}return e.length}function ut(e,t,i,r){let n;for(;(n=e[t])===" "||n==="	"||!i&&(n===`
`||n==="\r"&&e[t+1]===`
`);)t++;return r||n!=="#"?t:ut(e,rn(e,t),i)}function Xu(e,t,i,r,n=!1){if(!r)return t=cr(e,t),t<0?e.length:t;for(let s=t;s<e.length;s++){let o=e[s];if(o==="#")s=cr(e,s);else{if(o===i)return s+1;if(o===r)return s;if(n&&(o===`
`||o==="\r"&&e[s+1]===`
`))return s}}throw new W("cannot find end of structure",{toml:e,ptr:t})}function Qs(e,t){let i=e[t],r=i===e[t+1]&&e[t+1]===e[t+2]?e.slice(t,t+3):i;t+=r.length-1;do t=e.indexOf(r,++t);while(t>-1&&i!=="'"&&e[t-1]==="\\"&&e[t-2]!=="\\");return t>-1&&(t+=r.length,r.length>1&&(e[t]===i&&t++,e[t]===i&&t++)),t}var wk=/^(\d{4}-\d{2}-\d{2})?[T ]?(?:(\d{2}):\d{2}:\d{2}(?:\.\d+)?)?(Z|[-+]\d{2}:\d{2})?$/i,nn=class e extends Date{#t=!1;#i=!1;#e=null;constructor(t){let i=!0,r=!0,n="Z";if(typeof t=="string"){let s=t.match(wk);s?(s[1]||(i=!1,t=`0000-01-01T${t}`),r=!!s[2],s[2]&&+s[2]>23?t="":(n=s[3]||null,t=t.toUpperCase(),!n&&r&&(t+="Z"))):t=""}super(t),isNaN(this.getTime())||(this.#t=i,this.#i=r,this.#e=n)}isDateTime(){return this.#t&&this.#i}isLocal(){return!this.#t||!this.#i||!this.#e}isDate(){return this.#t&&!this.#i}isTime(){return this.#i&&!this.#t}isValid(){return this.#t||this.#i}toISOString(){let t=super.toISOString();if(this.isDate())return t.slice(0,10);if(this.isTime())return t.slice(11,23);if(this.#e===null)return t.slice(0,-1);if(this.#e==="Z")return t;let i=+this.#e.slice(1,3)*60+ +this.#e.slice(4,6);return i=this.#e[0]==="-"?i:-i,new Date(this.getTime()-i*6e4).toISOString().slice(0,-1)+this.#e}static wrapAsOffsetDateTime(t,i="Z"){let r=new e(t);return r.#e=i,r}static wrapAsLocalDateTime(t){let i=new e(t);return i.#e=null,i}static wrapAsLocalDate(t){let i=new e(t);return i.#i=!1,i.#e=null,i}static wrapAsLocalTime(t){let i=new e(t);return i.#t=!1,i.#e=null,i}};var Ek=/^((0x[0-9a-fA-F](_?[0-9a-fA-F])*)|(([+-]|0[ob])?\d(_?\d)*))$/,_k=/^[+-]?\d(_?\d)*(\.\d(_?\d)*)?([eE][+-]?\d(_?\d)*)?$/,Tk=/^[+-]?0[0-9_]/,Sk=/^[0-9a-f]{4,8}$/i,r0={b:"\b",t:"	",n:`
`,f:"\f",r:"\r",'"':'"',"\\":"\\"};function eo(e,t=0,i=e.length){let r=e[t]==="'",n=e[t++]===e[t]&&e[t]===e[t+1];n&&(i-=2,e[t+=2]==="\r"&&t++,e[t]===`
`&&t++);let s=0,o,a="",c=t;for(;t<i-1;){let u=e[t++];if(u===`
`||u==="\r"&&e[t]===`
`){if(!n)throw new W("newlines are not allowed in strings",{toml:e,ptr:t-1})}else if(u<" "&&u!=="	"||u==="\x7F")throw new W("control characters are not allowed in strings",{toml:e,ptr:t-1});if(o){if(o=!1,u==="u"||u==="U"){let m=e.slice(t,t+=u==="u"?4:8);if(!Sk.test(m))throw new W("invalid unicode escape",{toml:e,ptr:s});try{a+=String.fromCodePoint(parseInt(m,16))}catch{throw new W("invalid unicode escape",{toml:e,ptr:s})}}else if(n&&(u===`
`||u===" "||u==="	"||u==="\r")){if(t=ut(e,t-1,!0),e[t]!==`
`&&e[t]!=="\r")throw new W("invalid escape: only line-ending whitespace may be escaped",{toml:e,ptr:s});t=ut(e,t)}else if(u in r0)a+=r0[u];else throw new W("unrecognized escape sequence",{toml:e,ptr:s});c=t}else!r&&u==="\\"&&(s=t-1,o=!0,a+=e.slice(c,s))}return a+e.slice(c,i-1)}function n0(e,t,i){if(e==="true")return!0;if(e==="false")return!1;if(e==="-inf")return-1/0;if(e==="inf"||e==="+inf")return 1/0;if(e==="nan"||e==="+nan"||e==="-nan")return NaN;if(e==="-0")return 0;let r;if((r=Ek.test(e))||_k.test(e)){if(Tk.test(e))throw new W("leading zeroes are not allowed",{toml:t,ptr:i});let s=+e.replace(/_/g,"");if(isNaN(s))throw new W("invalid number",{toml:t,ptr:i});if(r&&!Number.isSafeInteger(s))throw new W("integer value cannot be represented losslessly",{toml:t,ptr:i});return s}let n=new nn(e);if(!n.isValid())throw new W("invalid value",{toml:t,ptr:i});return n}function Ck(e,t,i,r){let n=e.slice(t,i),s=n.indexOf("#");s>-1&&(rn(e,s),n=n.slice(0,s));let o=n.trimEnd();if(!r){let a=n.indexOf(`
`,o.length);if(a>-1)throw new W("newlines are not allowed in inline tables",{toml:e,ptr:t+a})}return[o,s]}function sn(e,t,i){let r=e[t];if(r==="["||r==="{"){let[o,a]=r==="["?o0(e,t):s0(e,t),c=Xu(e,a,",",i);if(i==="}"){let u=cr(e,a,c);if(u>-1)throw new W("newlines are not allowed in inline tables",{toml:e,ptr:u})}return[o,c]}let n;if(r==='"'||r==="'"){n=Qs(e,t);let o=eo(e,t,n);if(i){if(n=ut(e,n,i!=="]"),e[n]&&e[n]!==","&&e[n]!==i&&e[n]!==`
`&&e[n]!=="\r")throw new W("unexpected character encountered",{toml:e,ptr:n});n+=+(e[n]===",")}return[o,n]}n=Xu(e,t,",",i);let s=Ck(e,t,n-+(e[n-1]===","),i==="]");if(!s[0])throw new W("incomplete key-value declaration: no value specified",{toml:e,ptr:t});return i&&s[1]>-1&&(n=ut(e,t+s[1]),n+=+(e[n]===",")),[n0(s[0],e,t),n]}var Ok=/^[a-zA-Z0-9-_]+[ \t]*$/;function to(e,t,i="="){let r=t-1,n=[],s=e.indexOf(i,t);if(s<0)throw new W("incomplete key-value: cannot find end of key",{toml:e,ptr:t});do{let o=e[t=++r];if(o!==" "&&o!=="	")if(o==='"'||o==="'"){if(o===e[t+1]&&o===e[t+2])throw new W("multiline strings are not allowed in keys",{toml:e,ptr:t});let a=Qs(e,t);if(a<0)throw new W("unfinished string encountered",{toml:e,ptr:t});r=e.indexOf(".",a);let c=e.slice(a,r<0||r>s?s:r),u=cr(c);if(u>-1)throw new W("newlines are not allowed in keys",{toml:e,ptr:t+r+u});if(c.trimStart())throw new W("found extra tokens after the string part",{toml:e,ptr:a});if(s<a&&(s=e.indexOf(i,a),s<0))throw new W("incomplete key-value: cannot find end of key",{toml:e,ptr:t});n.push(eo(e,t,a))}else{r=e.indexOf(".",t);let a=e.slice(t,r<0||r>s?s:r);if(!Ok.test(a))throw new W("only letter, numbers, dashes and underscores are allowed in keys",{toml:e,ptr:t});n.push(a.trimEnd())}}while(r+1&&r<s);return[n,ut(e,s+1,!0,!0)]}function s0(e,t){let i={},r=new Set,n,s=0;for(t++;(n=e[t++])!=="}"&&n;){if(n===`
`)throw new W("newlines are not allowed in inline tables",{toml:e,ptr:t-1});if(n==="#")throw new W("inline tables cannot contain comments",{toml:e,ptr:t-1});if(n===",")throw new W("expected key-value, found comma",{toml:e,ptr:t-1});if(n!==" "&&n!=="	"){let o,a=i,c=!1,[u,m]=to(e,t-1);for(let p=0;p<u.length;p++){if(p&&(a=c?a[o]:a[o]={}),o=u[p],(c=Object.hasOwn(a,o))&&(typeof a[o]!="object"||r.has(a[o])))throw new W("trying to redefine an already defined value",{toml:e,ptr:t});!c&&o==="__proto__"&&Object.defineProperty(a,o,{enumerable:!0,configurable:!0,writable:!0})}if(c)throw new W("trying to redefine an already defined value",{toml:e,ptr:t});let[g,x]=sn(e,m,"}");r.add(g),a[o]=g,t=x,s=e[t-1]===","?t-1:0}}if(s)throw new W("trailing commas are not allowed in inline tables",{toml:e,ptr:s});if(!n)throw new W("unfinished table encountered",{toml:e,ptr:t});return[i,t]}function o0(e,t){let i=[],r;for(t++;(r=e[t++])!=="]"&&r;){if(r===",")throw new W("expected value, found comma",{toml:e,ptr:t-1});if(r==="#")t=rn(e,t);else if(r!==" "&&r!=="	"&&r!==`
`&&r!=="\r"){let n=sn(e,t-1,"]");i.push(n[0]),t=n[1]}}if(!r)throw new W("unfinished array encountered",{toml:e,ptr:t});return[i,t]}function a0(e,t,i,r){let n=t,s=i,o,a=!1,c;for(let u=0;u<e.length;u++){if(u){if(n=a?n[o]:n[o]={},s=(c=s[o]).c,r===0&&(c.t===1||c.t===2))return null;if(c.t===2){let m=n.length-1;n=n[m],s=s[m].c}}if(o=e[u],(a=Object.hasOwn(n,o))&&s[o]?.t===0&&s[o]?.d)return null;a||(o==="__proto__"&&(Object.defineProperty(n,o,{enumerable:!0,configurable:!0,writable:!0}),Object.defineProperty(s,o,{enumerable:!0,configurable:!0,writable:!0})),s[o]={t:u<e.length-1&&r===2?3:r,d:!1,i:0,c:{}})}if(c=s[o],c.t!==r&&!(r===1&&c.t===3)||(r===2&&(c.d||(c.d=!0,n[o]=[]),n[o].push(n={}),c.c[c.i++]=c={t:1,d:!1,i:0,c:{}}),c.d))return null;if(c.d=!0,r===1)n=a?n[o]:n[o]={};else if(r===0&&a)return null;return[o,n,c.c]}function Oi(e){let t={},i={},r=t,n=i;for(let s=ut(e,0);s<e.length;){if(e[s]==="["){let o=e[++s]==="[",a=to(e,s+=+o,"]");if(o){if(e[a[1]-1]!=="]")throw new W("expected end of table declaration",{toml:e,ptr:a[1]-1});a[1]++}let c=a0(a[0],t,i,o?2:1);if(!c)throw new W("trying to redefine an already defined table or value",{toml:e,ptr:s});n=c[2],r=c[1],s=a[1]}else{let o=to(e,s),a=a0(o[0],r,n,0);if(!a)throw new W("trying to redefine an already defined table or value",{toml:e,ptr:s});let c=sn(e,o[1]);a[1][a[0]]=c[0],s=c[1]}if(s=ut(e,s,!0),e[s]&&e[s]!==`
`&&e[s]!=="\r")throw new W("each key-value declaration must be followed by an end-of-line",{toml:e,ptr:s});s=ut(e,s)}return t}var c0=/^[a-z0-9-_]+$/i;function io(e){let t=typeof e;if(t==="object"){if(Array.isArray(e))return"array";if(e instanceof Date)return"date"}return t}function Ak(e){for(let t=0;t<e.length;t++)if(io(e[t])!=="object")return!1;return e.length!=0}function Yu(e){return JSON.stringify(e).replace(/\x7f/g,"\\u007f")}function Wu(e,t=io(e)){if(t==="number")return isNaN(e)?"nan":e===1/0?"inf":e===-1/0?"-inf":e.toString();if(t==="bigint"||t==="boolean")return e.toString();if(t==="string")return Yu(e);if(t==="date"){if(isNaN(e.getTime()))throw new TypeError("cannot serialize invalid date");return e.toISOString()}if(t==="object")return Dk(e);if(t==="array")return Ik(e)}function Dk(e){let t=Object.keys(e);if(t.length===0)return"{}";let i="{ ";for(let r=0;r<t.length;r++){let n=t[r];r&&(i+=", "),i+=c0.test(n)?n:Yu(n),i+=" = ",i+=Wu(e[n])}return i+" }"}function Ik(e){if(e.length===0)return"[]";let t="[ ";for(let i=0;i<e.length;i++){if(i&&(t+=", "),e[i]===null||e[i]===void 0)throw new TypeError("arrays cannot contain null or undefined values");t+=Wu(e[i])}return t+" ]"}function Nk(e,t){let i="";for(let r=0;r<e.length;r++)i+=`[[${t}]]
`,i+=Ku(e[r],t),i+=`

`;return i}function Ku(e,t=""){let i="",r="",n=Object.keys(e);for(let s=0;s<n.length;s++){let o=n[s];if(e[o]!==null&&e[o]!==void 0){let a=io(e[o]);if(a==="symbol"||a==="function")throw new TypeError(`cannot serialize values of type '${a}'`);let c=c0.test(o)?o:Yu(o);if(a==="array"&&Ak(e[o]))r+=Nk(e[o],t?`${t}.${c}`:c);else if(a==="object"){let u=t?`${t}.${c}`:c;r+=`[${u}]
`,r+=Ku(e[o],u),r+=`

`}else i+=c,i+=" = ",i+=Wu(e[o],a),i+=`
`}}return`${i}
${r}`.trim()}function on(e){if(io(e)!=="object")throw new TypeError("stringify can only be called with an object");return Ku(e)}var ro=class extends ht{async setProject(t){return this.pyProjectFile.then(i=>{if(!i)return;let r=Oi((0,Ai.readFileSync)(i,"utf-8"));r.tool?.poetry&&(r.tool.poetry.name=t),(0,Ai.writeFileSync)(i,on(r))})}get pyProjectFile(){return this.workdir.then(t=>(0,u0.join)(t,"pyproject.toml")).then(t=>{if((0,Ai.existsSync)(t))return t})}get pyProject(){return this.pyProjectFile.then(t=>t?{pyprojectToml:Oi((0,Ai.readFileSync)(t,"utf-8"))}:void 0)}get projectJson(){return Promise.all([this.pyProject]).then(([t])=>{let i={type:"python"};if(!t)return;let{pyprojectToml:r}=t,n=r.tool?.poetry?.dependencies||{};r.tool?.poetry&&(i.name=r.tool.poetry.name,i.version=r.tool.poetry.version),i.dependencies=Object.entries(n||{}).reduce((a,[c,u])=>(typeof u=="string"?a[c]=u:typeof u=="object"&&typeof u.version=="string"&&(a[c]=u.version),a),{});let s=r.tool?.scaffoldly?.services&&Array.isArray(r.tool?.scaffoldly?.services)?r.tool.scaffoldly.services:Object.entries(r.tool?.scaffoldly?.services||{}).map(([a,c])=>({...c,name:a})),o={...r.tool?.scaffoldly,packages:[...r.tool?.scaffoldly?.packages||[],...(r["build-system"]?.requires||[]).map(a=>`pip:${a}`)],services:s};return i.scaffoldly=o,i})}};var Di=require("fs"),l0=require("path");var no=class extends ht{async setProject(t){return this.cargoTomlFile.then(i=>{if(!i)return;let r=Oi((0,Di.readFileSync)(i,"utf-8"));r.package&&(r.package&&(r.package.name=t),(0,Di.writeFileSync)(i,on(r)))})}get cargoTomlFile(){return this.workdir.then(t=>(0,l0.join)(t,"Cargo.toml")).then(t=>{if((0,Di.existsSync)(t))return t})}get rustProject(){return this.cargoTomlFile.then(t=>t?{cargoToml:Oi((0,Di.readFileSync)(t,"utf-8"))}:void 0)}get projectJson(){return Promise.all([this.rustProject]).then(([t])=>{let i={type:"rust"};if(!t)return;let{cargoToml:r}=t;return i.name=r.package?.name,i.version=r.package?.version,i.dependencies=Object.entries(r.dependencies||{}).reduce((n,[s,o])=>(typeof o=="string"?n[s]=o:typeof o=="object"&&typeof o.version=="string"&&(n[s]=o.version),n),{}),i.scaffoldly=r.package?.metadata?.scaffoldly,i})}};var N0=ae(E0()),el=process.cwd(),Wk=async()=>{let{data:e}=await Ji.get("https://raw.githubusercontent.com/scaffoldly/scaffoldly-examples/refs/heads/main/index.yml",{headers:{"Cache-Control":"no-cache, no-store, must-revalidate",Pragma:"no-cache",Expires:"0"}}),t=Ib(e);return Object.entries(t.Frameworks).reduce((r,[n,s])=>(r.push({display:n,downloadUrl:"https://codeload.github.com/scaffoldly",repo:"scaffoldly-examples",color:Ta,variants:Object.entries(s).reduce((o,[a,c])=>(o.push({configFile:c.projectFile,...c,display:a,color:Ta}),o),[])}),r),[])},Kk=async e=>{let{data:t}=await Ji.get("https://raw.githubusercontent.com/scaffoldly/scaffoldly-examples/refs/heads/main/.templates/csa/README.md.tpl",{headers:{"Cache-Control":"no-cache, no-store, must-revalidate",Pragma:"no-cache",Expires:"0"}});return N0.default.render(t,e,{async:!0})};function _0(e){return e.map(t=>t.variants&&t.variants.map(i=>i.branch)||[t.repo]).reduce((t,i)=>t.concat(i),[])}function Jk(e,t){for(let i of e){let r=i.variants.find(n=>n.branch===t);if(r)return{framework:i,variant:r}}return{}}var Zk={_gitignore:".gitignore"},tl="my-app",Qk=async(e,t)=>new Promise((i,r)=>{let n={...process.env},s;try{s=I0.default.sync(t[0])}catch{r(new Error(`Unable to locate the \`${t[0]}\` command on this system.`));return}let o=D0.default.spawn(`"${s}"`,t.slice(1),{cwd:e,shell:!0,env:n});o.on("error",a=>{console.error(a),r(a)}),o.on("exit",a=>{if(a!==0){r(new Error(`Command failed with code ${a}`));return}i()}),o.stdin.pipe(process.stdin),o.stdout.pipe(process.stdout),o.stderr.pipe(process.stderr)});function T0(e){return e?.trim().replace(/\/+$/g,"")}function eR(e){let t=Ie.default.readdirSync(e);return t.length===0||t.length===1&&t[0]===".git"}function S0(e){return/^(?:@[a-z\d\-*~][a-z\d\-*._~]*\/)?[a-z\d\-~][a-z\d\-._~]*$/.test(e)}function tR(e){return e.trim().toLowerCase().replace(/\s+/g,"-").replace(/^[._]/,"").replace(/[^a-z\d\-~]+/g,"-")}function iR(e){if(Ie.default.existsSync(e))for(let t of Ie.default.readdirSync(e))t!==".git"&&Ie.default.rmSync(Be.default.resolve(e,t),{recursive:!0,force:!0})}async function rR(e,t){let{downloadUrl:i,repo:r}=e,n=new URL(`${i}/${r}/zip/refs/heads/${t}`);console.log(""),console.log(`Downloading template from the \`${t}\` branch from \`${r}\`...`),console.log("");try{let s=await Ji({method:"get",url:n.toString(),responseType:"arraybuffer"}),o=Ie.default.mkdtempSync(Be.default.join(C0.default.tmpdir(),"template-")),a=n.pathname.split("/").pop();if(!a)throw new Error(`Error extracting ZIP file: ${n}`);let c=Be.default.join(o,a);return Ie.default.writeFileSync(c,s.data),new O0.default(c).extractAllTo(o,!0),Ie.default.unlinkSync(c),Be.default.join(o,`${r}-${t}`)}catch(s){throw new Error(`Error downloading or extracting ZIP file: ${s}`)}}function L0(e,t){if(Ie.default.statSync(e).isDirectory()){Ie.default.mkdirSync(t,{recursive:!0});for(let r of Ie.default.readdirSync(e)){let n=Be.default.resolve(e,r),s=Be.default.resolve(t,r);L0(n,s)}}else Ie.default.copyFileSync(e,t)}function nR(e,t,i){let n=Ie.default.readFileSync(e,"utf-8").split(`
`),s=-1,o=-1;for(let a=0;a<n.length;a++)if(n[a].includes(t))s=a;else if(n[a].includes(i)){o=a;break}s!==-1&&o!==-1&&n.splice(s,o-s+1),Ie.default.writeFileSync(e,n.join(`
`),{encoding:"utf-8"})}var sR=(e,t)=>{switch(e){case"node":return new Os(void 0,t);case"go":return new Rs(void 0,t);case"dotnet":return new Js(void 0,t);case"python":return new ro(void 0,t);case"rust":return new no(void 0,t);default:return}},k0=async()=>{let e=await Wk(),t=(0,A0.default)(process.argv.slice(2).filter(y=>y.toLowerCase()!=="create"&&y.toLowerCase()!=="app"),{string:["_"]}),i=T0(t._[0]),r=t.template||t.t,n=i||tl,s=()=>n==="."?Be.default.basename(Be.default.resolve()):n,o;il.default.override({overwrite:t.overwrite});try{o=await(0,il.default)([{type:i?null:"text",name:"projectName",message:qi("Project name:"),initial:tl,onState:y=>{n=T0(y.value)||tl}},{type:()=>!Ie.default.existsSync(n)||eR(n)?null:"select",name:"overwrite",message:()=>(n==="."?"Current directory":`Target directory "${n}"`)+" is not empty. Please choose how to proceed:",initial:0,choices:[{title:"Remove existing files and continue",value:"yes"},{title:"Cancel operation",value:"no"},{title:"Ignore files and continue",value:"ignore"}]},{type:(y,{overwrite:A})=>{if(A==="no")throw new Error(_a("\u2716")+" Operation cancelled");return null},name:"overwriteChecker"},{type:()=>S0(s())?null:"text",name:"packageName",message:qi("Package name:"),initial:()=>tR(s()),validate:y=>S0(y)||"Invalid name"},{type:r&&_0(e).includes(r)?null:"select",name:"framework",message:typeof r=="string"&&!_0(e).includes(r)?qi(`"${r}" isn't a valid template. Please choose from below: `):qi("Select a framework:"),initial:0,choices:e.map(y=>{let A=y.color;return{title:A(y.display||y.repo),value:y}})},{type:y=>y&&y.variants?"select":null,name:"variant",message:qi("Select a variant:"),choices:y=>y.variants.map(A=>{let C=A.color;return{title:C(A.display),value:A.branch}})}],{onCancel:()=>{throw new Error(_a("\u2716")+" Operation cancelled")}})}catch(y){console.log(y.message);return}let{overwrite:a,packageName:c,variant:u}=o,{framework:m,variant:g}=Jk(e,u||r);if(!m||!g)throw new Error(`Invalid variant: ${g}`);let{rm:x,type:p,devCommand:h,branch:v}=g;if(!p)throw new Error("Invalid or missing project type");if(!v)throw new Error("Invalid or missing variant branch");let E=Be.default.join(el,n);a==="yes"?iR(E):Ie.default.existsSync(E)||Ie.default.mkdirSync(E,{recursive:!0}),console.log(`
Creating project in ${E}...`);let S=await rR(m,v),_=(y,A)=>{let C=Be.default.join(E,Zk[y]??y);A?Ie.default.writeFileSync(C,A):L0(Be.default.join(S,y),C)},l=Ie.default.readdirSync(S);for(let y of l.filter(A=>A!=="README.md"&&A!=="LICENSE"&&A!=="LICENSE.md"&&x&&!x.includes(A)))_(y);let d=sR(p,E);if(!d)throw new Error(`Invalid project type: ${g.type}`);await d.setProject(c||s()),(0,Ie.writeFileSync)(Be.default.join(E,"README.md"),await Kk(g)),nR(Be.default.join(E,".gitignore"),"### +CSA-OMIT ###","### -CSA-OMIT ###");let f=await d.installCommands;f&&await Promise.all(f.commands.map(y=>{let A=(0,Be.join)(E,y.workdir||".");return console.log(`Installing dependencies using \`${y.cmd}\` in ${A}...`),Qk(A,y.cmd.split(" "))})),console.log(""),console.log(`Initializing git in ${E}...`);let w=ly(E);await w.init({"--initial-branch":"main"}),await w.add("."),await w.commit("Initial commit");let O=Be.default.relative(el,E);console.log(""),console.log("\u2728 Done. Begin development with the following commands:"),console.log(""),E!==el&&console.log(`    cd ${O.includes(" ")?`"${O}"`:O}`),console.log(`    ${h}`),console.log(""),console.log("Push this repository to GitHub:"),console.log(""),console.log("    1) Create a new repository on GitHub"),console.log("    2) Run: `git remote add origin <repository-url>`"),console.log("    3) Run: `git push -u origin main`"),console.log(""),console.log("Scaffoldly can package and deploy your application:"),console.log(""),console.log("    1) Run: `npx scaffoldly deploy`"),console.log(""),console.log("    \u{1F4A1} A `git push` will also package and deploy using GitHub Actions!"),console.log(""),console.log("See our documentation at https://scaffoldly.dev/docs"),console.log(""),console.log("\u{1F680} Happy coding, and thanks for using Scaffoldly!"),console.log("")};0&&(module.exports={createApp});
/*! Bundled license information:

mime-db/index.js:
  (*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   *)

mime-types/index.js:
  (*!
   * mime-types
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

sax/lib/sax.js:
  (*! http://mths.be/fromcodepoint v0.1.0 by @mathias *)

ejs/lib/ejs.js:
  (**
   * @file Embedded JavaScript templating engine. {@link http://ejs.co}
   * @author Matthew Eernisse <mde@fleegix.org>
   * @author Tiancheng "Timothy" Gu <timothygu99@gmail.com>
   * @project EJS
   * @license {@link http://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0}
   *)

@scure/base/lib/esm/index.js:
  (*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

js-yaml/dist/js-yaml.mjs:
  (*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT *)

smol-toml/dist/error.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/util.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/date.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/primitive.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/extract.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/struct.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/parse.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/stringify.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/index.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vbm9kZV9tb2R1bGVzL2FkbS16aXAvdXRpbC9jb25zdGFudHMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FkbS16aXAvdXRpbC9lcnJvcnMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FkbS16aXAvdXRpbC91dGlscy5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWRtLXppcC91dGlsL2ZhdHRyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hZG0temlwL3V0aWwvZGVjb2Rlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWRtLXppcC91dGlsL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hZG0temlwL2hlYWRlcnMvZW50cnlIZWFkZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FkbS16aXAvaGVhZGVycy9tYWluSGVhZGVyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hZG0temlwL2hlYWRlcnMvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FkbS16aXAvbWV0aG9kcy9kZWZsYXRlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWRtLXppcC9tZXRob2RzL2luZmxhdGVyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hZG0temlwL21ldGhvZHMvemlwY3J5cHRvLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hZG0temlwL21ldGhvZHMvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FkbS16aXAvemlwRW50cnkuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FkbS16aXAvemlwRmlsZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWRtLXppcC9hZG0temlwLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9taW5pbWlzdC9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMva2xldXIvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC91dGlsL2FjdGlvbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L3V0aWwvc3RyaXAuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Npc3RlcmFuc2kvc3JjL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvdXRpbC9jbGVhci5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L3V0aWwvZmlndXJlcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L3V0aWwvc3R5bGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC91dGlsL2xpbmVzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvdXRpbC93cmFwLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvdXRpbC9lbnRyaWVzVG9EaXNwbGF5LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvdXRpbC9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2VsZW1lbnRzL3Byb21wdC5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2VsZW1lbnRzL3RleHQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC9lbGVtZW50cy9zZWxlY3QuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC9lbGVtZW50cy90b2dnbGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC9kYXRlcGFydHMvZGF0ZXBhcnQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC9kYXRlcGFydHMvbWVyaWRpZW0uanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC9kYXRlcGFydHMvZGF5LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvZGF0ZXBhcnRzL2hvdXJzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvZGF0ZXBhcnRzL21pbGxpc2Vjb25kcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2RhdGVwYXJ0cy9taW51dGVzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvZGF0ZXBhcnRzL21vbnRoLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvZGF0ZXBhcnRzL3NlY29uZHMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC9kYXRlcGFydHMveWVhci5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2RhdGVwYXJ0cy9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2VsZW1lbnRzL2RhdGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC9lbGVtZW50cy9udW1iZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC9lbGVtZW50cy9tdWx0aXNlbGVjdC5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2VsZW1lbnRzL2F1dG9jb21wbGV0ZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2VsZW1lbnRzL2F1dG9jb21wbGV0ZU11bHRpc2VsZWN0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvZWxlbWVudHMvY29uZmlybS5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2VsZW1lbnRzL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvcHJvbXB0cy5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi91dGlsL2FjdGlvbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvdXRpbC9zdHJpcC5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvdXRpbC9jbGVhci5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvdXRpbC9maWd1cmVzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi91dGlsL3N0eWxlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi91dGlsL2xpbmVzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi91dGlsL3dyYXAuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL3V0aWwvZW50cmllc1RvRGlzcGxheS5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvdXRpbC9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvZWxlbWVudHMvcHJvbXB0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi9lbGVtZW50cy90ZXh0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi9lbGVtZW50cy9zZWxlY3QuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2VsZW1lbnRzL3RvZ2dsZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvZGF0ZXBhcnRzL2RhdGVwYXJ0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi9kYXRlcGFydHMvbWVyaWRpZW0uanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2RhdGVwYXJ0cy9kYXkuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2RhdGVwYXJ0cy9ob3Vycy5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvZGF0ZXBhcnRzL21pbGxpc2Vjb25kcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvZGF0ZXBhcnRzL21pbnV0ZXMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2RhdGVwYXJ0cy9tb250aC5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvZGF0ZXBhcnRzL3NlY29uZHMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2RhdGVwYXJ0cy95ZWFyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi9kYXRlcGFydHMvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2VsZW1lbnRzL2RhdGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2VsZW1lbnRzL251bWJlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvZWxlbWVudHMvbXVsdGlzZWxlY3QuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2VsZW1lbnRzL2F1dG9jb21wbGV0ZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvZWxlbWVudHMvYXV0b2NvbXBsZXRlTXVsdGlzZWxlY3QuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2VsZW1lbnRzL2NvbmZpcm0uanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2VsZW1lbnRzL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi9wcm9tcHRzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvZGVsYXllZC1zdHJlYW0vbGliL2RlbGF5ZWRfc3RyZWFtLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9jb21iaW5lZC1zdHJlYW0vbGliL2NvbWJpbmVkX3N0cmVhbS5qcyIsICIuLi9ub2RlX21vZHVsZXMvbWltZS1kYi9kYi5qc29uIiwgIi4uL25vZGVfbW9kdWxlcy9taW1lLWRiL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9taW1lLXR5cGVzL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9saWIvZGVmZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FzeW5ja2l0L2xpYi9hc3luYy5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXN5bmNraXQvbGliL2Fib3J0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9saWIvaXRlcmF0ZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXN5bmNraXQvbGliL3N0YXRlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9saWIvdGVybWluYXRvci5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXN5bmNraXQvcGFyYWxsZWwuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FzeW5ja2l0L3NlcmlhbE9yZGVyZWQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2FzeW5ja2l0L3NlcmlhbC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXN5bmNraXQvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Zvcm0tZGF0YS9saWIvcG9wdWxhdGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Zvcm0tZGF0YS9saWIvZm9ybV9kYXRhLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9wcm94eS1mcm9tLWVudi9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvZGVidWcvbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvY29tbW9uLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvYnJvd3Nlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvaGFzLWZsYWcvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3N1cHBvcnRzLWNvbG9yL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvbm9kZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9mb2xsb3ctcmVkaXJlY3RzL2RlYnVnLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9mb2xsb3ctcmVkaXJlY3RzL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9Aa3dzaXRlcy9maWxlLWV4aXN0cy9zcmMvaW5kZXgudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0Brd3NpdGVzL2ZpbGUtZXhpc3RzL2luZGV4LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9Aa3dzaXRlcy9wcm9taXNlLWRlZmVycmVkL3NyYy9pbmRleC50cyIsICIuLi9ub2RlX21vZHVsZXMvaXNleGUvd2luZG93cy5qcyIsICIuLi9ub2RlX21vZHVsZXMvaXNleGUvbW9kZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvaXNleGUvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3doaWNoL3doaWNoLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9pZ25vcmUvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbDJqcy9saWIvZGVmYXVsdHMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1V0aWxpdHkuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERPTUltcGxlbWVudGF0aW9uLmpzIiwgIi4uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxET01FcnJvckhhbmRsZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERPTVN0cmluZ0xpc3QuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERPTUNvbmZpZ3VyYXRpb24uanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL05vZGVUeXBlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxBdHRyaWJ1dGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTE5hbWVkTm9kZU1hcC5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRWxlbWVudC5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MQ2hhcmFjdGVyRGF0YS5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MQ0RhdGEuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTENvbW1lbnQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERlY2xhcmF0aW9uLmpzIiwgIi4uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEVERBdHRMaXN0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEVERFbnRpdHkuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERUREVsZW1lbnQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERURE5vdGF0aW9uLmpzIiwgIi4uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEb2NUeXBlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxSYXcuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFRleHQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbi5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRHVtbXkuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTE5vZGVMaXN0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9Eb2N1bWVudFBvc2l0aW9uLmpzIiwgIi4uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxOb2RlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxTdHJpbmdpZmllci5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvV3JpdGVyU3RhdGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFdyaXRlckJhc2UuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFN0cmluZ1dyaXRlci5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRG9jdW1lbnQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERvY3VtZW50Q0IuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFN0cmVhbVdyaXRlci5qcyIsICIuLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbDJqcy9saWIvYnVpbGRlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvc2F4L2xpYi9zYXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbDJqcy9saWIvYm9tLmpzIiwgIi4uL25vZGVfbW9kdWxlcy94bWwyanMvbGliL3Byb2Nlc3NvcnMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3htbDJqcy9saWIvcGFyc2VyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy94bWwyanMvbGliL3htbDJqcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvZWpzL2xpYi91dGlscy5qcyIsICIuLi9ub2RlX21vZHVsZXMvZWpzL3BhY2thZ2UuanNvbiIsICIuLi9ub2RlX21vZHVsZXMvZWpzL2xpYi9lanMuanMiLCAiLi4vc3JjL2luZGV4LnRzIiwgIi4uL3NyYy9jcmVhdGUtYXBwLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9rb2xvcmlzdC9zcmMvaW5kZXgudHMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NFcnJvci5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL25vZGUvY2xhc3Nlcy9Gb3JtRGF0YS5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy90cmFuc2l0aW9uYWwuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9ub2RlL2NsYXNzZXMvVVJMU2VhcmNoUGFyYW1zLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vbm9kZS9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2NvbW1vbi91dGlscy5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90b1VSTEVuY29kZWRGb3JtLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zSGVhZGVycy5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMvaHR0cC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2Vudi9kYXRhLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZVByb3RvY29sLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9mcm9tRGF0YVVSSS5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvQXhpb3NUcmFuc2Zvcm1TdHJlYW0uanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3Rocm90dGxlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcGVlZG9tZXRlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvZm9ybURhdGFUb1N0cmVhbS5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcmVhZEJsb2IuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL1psaWJIZWFkZXJUcmFuc2Zvcm1TdHJlYW0uanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NhbGxiYWNraWZ5LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wcm9ncmVzc0V2ZW50UmVkdWNlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcmVzb2x2ZUNvbmZpZy5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tcG9zZVNpZ25hbHMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RyYWNrU3RyZWFtLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMvZmV0Y2guanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy9hZGFwdGVycy5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvSHR0cFN0YXR1c0NvZGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9hcmdzL3BhdGhzcGVjLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvZXJyb3JzL2dpdC1lcnJvci50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL2Vycm9ycy9naXQtcmVzcG9uc2UtZXJyb3IudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9lcnJvcnMvdGFzay1jb25maWd1cmF0aW9uLWVycm9yLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdXRpbHMvdXRpbC50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3V0aWxzL2FyZ3VtZW50LWZpbHRlcnMudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi91dGlscy9leGl0LWNvZGVzLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdXRpbHMvZ2l0LW91dHB1dC1zdHJlYW1zLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdXRpbHMvbGluZS1wYXJzZXIudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi91dGlscy9zaW1wbGUtZ2l0LW9wdGlvbnMudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi91dGlscy90YXNrLW9wdGlvbnMudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi91dGlscy90YXNrLXBhcnNlci50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3V0aWxzL2luZGV4LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdGFza3MvY2hlY2staXMtcmVwby50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Jlc3BvbnNlcy9DbGVhblN1bW1hcnkudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrcy90YXNrLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdGFza3MvY2xlYW4udHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9yZXNwb25zZXMvQ29uZmlnTGlzdC50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL2NvbmZpZy50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL2RpZmYtbmFtZS1zdGF0dXMudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrcy9ncmVwLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdGFza3MvcmVzZXQudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9naXQtbG9nZ2VyLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcnVubmVycy90YXNrcy1wZW5kaW5nLXF1ZXVlLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcnVubmVycy9naXQtZXhlY3V0b3ItY2hhaW4udHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9ydW5uZXJzL2dpdC1leGVjdXRvci50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2stY2FsbGJhY2sudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrcy9jaGFuZ2Utd29ya2luZy1kaXJlY3RvcnkudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrcy9jaGVja291dC50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL2NvdW50LW9iamVjdHMudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9wYXJzZXJzL3BhcnNlLWNvbW1pdC50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL2NvbW1pdC50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL2ZpcnN0LWNvbW1pdC50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL2hhc2gtb2JqZWN0LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcmVzcG9uc2VzL0luaXRTdW1tYXJ5LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdGFza3MvaW5pdC50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL2FyZ3MvbG9nLWZvcm1hdC50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Jlc3BvbnNlcy9EaWZmU3VtbWFyeS50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3BhcnNlcnMvcGFyc2UtZGlmZi1zdW1tYXJ5LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcGFyc2Vycy9wYXJzZS1saXN0LWxvZy1zdW1tYXJ5LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdGFza3MvZGlmZi50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL2xvZy50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Jlc3BvbnNlcy9NZXJnZVN1bW1hcnkudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9yZXNwb25zZXMvUHVsbFN1bW1hcnkudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9wYXJzZXJzL3BhcnNlLXJlbW90ZS1vYmplY3RzLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcGFyc2Vycy9wYXJzZS1yZW1vdGUtbWVzc2FnZXMudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9wYXJzZXJzL3BhcnNlLXB1bGwudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9wYXJzZXJzL3BhcnNlLW1lcmdlLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdGFza3MvbWVyZ2UudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9wYXJzZXJzL3BhcnNlLXB1c2gudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrcy9wdXNoLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdGFza3Mvc2hvdy50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Jlc3BvbnNlcy9GaWxlU3RhdHVzU3VtbWFyeS50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Jlc3BvbnNlcy9TdGF0dXNTdW1tYXJ5LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdGFza3Mvc3RhdHVzLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdGFza3MvdmVyc2lvbi50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3NpbXBsZS1naXQtYXBpLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcnVubmVycy9zY2hlZHVsZXIudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrcy9hcHBseS1wYXRjaC50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Jlc3BvbnNlcy9CcmFuY2hEZWxldGVTdW1tYXJ5LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcGFyc2Vycy9wYXJzZS1icmFuY2gtZGVsZXRlLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcmVzcG9uc2VzL0JyYW5jaFN1bW1hcnkudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9wYXJzZXJzL3BhcnNlLWJyYW5jaC50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL2JyYW5jaC50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Jlc3BvbnNlcy9DaGVja0lnbm9yZS50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL2NoZWNrLWlnbm9yZS50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL2Nsb25lLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcGFyc2Vycy9wYXJzZS1mZXRjaC50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL2ZldGNoLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcGFyc2Vycy9wYXJzZS1tb3ZlLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvdGFza3MvbW92ZS50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL3B1bGwudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9yZXNwb25zZXMvR2V0UmVtb3RlU3VtbWFyeS50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL3JlbW90ZS50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3Rhc2tzL3N0YXNoLWxpc3QudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrcy9zdWItbW9kdWxlLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcmVzcG9uc2VzL1RhZ0xpc3QudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi90YXNrcy90YWcudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2dpdC5qcyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL2FwaS50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL2Vycm9ycy9naXQtY29uc3RydWN0LWVycm9yLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvZXJyb3JzL2dpdC1wbHVnaW4tZXJyb3IudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9wbHVnaW5zL2Fib3J0LXBsdWdpbi50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3BsdWdpbnMvYmxvY2stdW5zYWZlLW9wZXJhdGlvbnMtcGx1Z2luLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcGx1Z2lucy9jb21tYW5kLWNvbmZpZy1wcmVmaXhpbmctcGx1Z2luLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcGx1Z2lucy9jb21wbGV0aW9uLWRldGVjdGlvbi5wbHVnaW4udHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9wbHVnaW5zL2N1c3RvbS1iaW5hcnkucGx1Z2luLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcGx1Z2lucy9lcnJvci1kZXRlY3Rpb24ucGx1Z2luLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcGx1Z2lucy9wbHVnaW4tc3RvcmUudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2xpYi9wbHVnaW5zL3Byb2dyZXNzLW1vbml0b3ItcGx1Z2luLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcGx1Z2lucy9zcGF3bi1vcHRpb25zLXBsdWdpbi50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3BsdWdpbnMvdGltb3V0LXBsdWdpbi50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL3BsdWdpbnMvc3VmZml4LXBhdGhzLnBsdWdpbi50cyIsICIuLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdpdC9zcmMvbGliL2dpdC1mYWN0b3J5LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2l0L3NyYy9saWIvcnVubmVycy9wcm9taXNlLXdyYXBwZWQudHMiLCAiLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1naXQvc3JjL2VzbS5tanMiLCAiLi4vc3JjL2NvbmZpZy9wcm9qZWN0cy9ub2RlLnRzIiwgIi4uL3NyYy9jb25maWcvcHJvamVjdHMvaW5kZXgudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BzY3VyZS9iYXNlL2luZGV4LnRzIiwgIi4uL3NyYy9jb25maWcvaW5kZXgudHMiLCAiLi4vbm9kZV9tb2R1bGVzL2pzLXlhbWwvZGlzdC9qcy15YW1sLm1qcyIsICIuLi9zcmMvY29uZmlnL3Byb2plY3RzL2dvbGFuZy50cyIsICIuLi9zcmMvY29uZmlnL3Byb2plY3RzL2RvdG5ldC50cyIsICIuLi9zcmMvY29uZmlnL3Byb2plY3RzL3B5dGhvbi50cyIsICIuLi9ub2RlX21vZHVsZXMvc21vbC10b21sL2Rpc3QvZXJyb3IuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Ntb2wtdG9tbC9kaXN0L3V0aWwuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Ntb2wtdG9tbC9kaXN0L2RhdGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3Ntb2wtdG9tbC9kaXN0L3ByaW1pdGl2ZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvc21vbC10b21sL2Rpc3QvZXh0cmFjdC5qcyIsICIuLi9ub2RlX21vZHVsZXMvc21vbC10b21sL2Rpc3Qvc3RydWN0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9zbW9sLXRvbWwvZGlzdC9wYXJzZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvc21vbC10b21sL2Rpc3Qvc3RyaW5naWZ5LmpzIiwgIi4uL3NyYy9jb25maWcvcHJvamVjdHMvcnVzdC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsibW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgLyogVGhlIGxvY2FsIGZpbGUgaGVhZGVyICovXG4gICAgTE9DSERSICAgICAgICAgICA6IDMwLCAvLyBMT0MgaGVhZGVyIHNpemVcbiAgICBMT0NTSUcgICAgICAgICAgIDogMHgwNDAzNGI1MCwgLy8gXCJQS1xcMDAzXFwwMDRcIlxuICAgIExPQ1ZFUiAgICAgICAgICAgOiA0LFx0Ly8gdmVyc2lvbiBuZWVkZWQgdG8gZXh0cmFjdFxuICAgIExPQ0ZMRyAgICAgICAgICAgOiA2LCAvLyBnZW5lcmFsIHB1cnBvc2UgYml0IGZsYWdcbiAgICBMT0NIT1cgICAgICAgICAgIDogOCwgLy8gY29tcHJlc3Npb24gbWV0aG9kXG4gICAgTE9DVElNICAgICAgICAgICA6IDEwLCAvLyBtb2RpZmljYXRpb24gdGltZSAoMiBieXRlcyB0aW1lLCAyIGJ5dGVzIGRhdGUpXG4gICAgTE9DQ1JDICAgICAgICAgICA6IDE0LCAvLyB1bmNvbXByZXNzZWQgZmlsZSBjcmMtMzIgdmFsdWVcbiAgICBMT0NTSVogICAgICAgICAgIDogMTgsIC8vIGNvbXByZXNzZWQgc2l6ZVxuICAgIExPQ0xFTiAgICAgICAgICAgOiAyMiwgLy8gdW5jb21wcmVzc2VkIHNpemVcbiAgICBMT0NOQU0gICAgICAgICAgIDogMjYsIC8vIGZpbGVuYW1lIGxlbmd0aFxuICAgIExPQ0VYVCAgICAgICAgICAgOiAyOCwgLy8gZXh0cmEgZmllbGQgbGVuZ3RoXG5cbiAgICAvKiBUaGUgRGF0YSBkZXNjcmlwdG9yICovXG4gICAgRVhUU0lHICAgICAgICAgICA6IDB4MDgwNzRiNTAsIC8vIFwiUEtcXDAwN1xcMDA4XCJcbiAgICBFWFRIRFIgICAgICAgICAgIDogMTYsIC8vIEVYVCBoZWFkZXIgc2l6ZVxuICAgIEVYVENSQyAgICAgICAgICAgOiA0LCAvLyB1bmNvbXByZXNzZWQgZmlsZSBjcmMtMzIgdmFsdWVcbiAgICBFWFRTSVogICAgICAgICAgIDogOCwgLy8gY29tcHJlc3NlZCBzaXplXG4gICAgRVhUTEVOICAgICAgICAgICA6IDEyLCAvLyB1bmNvbXByZXNzZWQgc2l6ZVxuXG4gICAgLyogVGhlIGNlbnRyYWwgZGlyZWN0b3J5IGZpbGUgaGVhZGVyICovXG4gICAgQ0VOSERSICAgICAgICAgICA6IDQ2LCAvLyBDRU4gaGVhZGVyIHNpemVcbiAgICBDRU5TSUcgICAgICAgICAgIDogMHgwMjAxNGI1MCwgLy8gXCJQS1xcMDAxXFwwMDJcIlxuICAgIENFTlZFTSAgICAgICAgICAgOiA0LCAvLyB2ZXJzaW9uIG1hZGUgYnlcbiAgICBDRU5WRVIgICAgICAgICAgIDogNiwgLy8gdmVyc2lvbiBuZWVkZWQgdG8gZXh0cmFjdFxuICAgIENFTkZMRyAgICAgICAgICAgOiA4LCAvLyBlbmNyeXB0LCBkZWNyeXB0IGZsYWdzXG4gICAgQ0VOSE9XICAgICAgICAgICA6IDEwLCAvLyBjb21wcmVzc2lvbiBtZXRob2RcbiAgICBDRU5USU0gICAgICAgICAgIDogMTIsIC8vIG1vZGlmaWNhdGlvbiB0aW1lICgyIGJ5dGVzIHRpbWUsIDIgYnl0ZXMgZGF0ZSlcbiAgICBDRU5DUkMgICAgICAgICAgIDogMTYsIC8vIHVuY29tcHJlc3NlZCBmaWxlIGNyYy0zMiB2YWx1ZVxuICAgIENFTlNJWiAgICAgICAgICAgOiAyMCwgLy8gY29tcHJlc3NlZCBzaXplXG4gICAgQ0VOTEVOICAgICAgICAgICA6IDI0LCAvLyB1bmNvbXByZXNzZWQgc2l6ZVxuICAgIENFTk5BTSAgICAgICAgICAgOiAyOCwgLy8gZmlsZW5hbWUgbGVuZ3RoXG4gICAgQ0VORVhUICAgICAgICAgICA6IDMwLCAvLyBleHRyYSBmaWVsZCBsZW5ndGhcbiAgICBDRU5DT00gICAgICAgICAgIDogMzIsIC8vIGZpbGUgY29tbWVudCBsZW5ndGhcbiAgICBDRU5EU0sgICAgICAgICAgIDogMzQsIC8vIHZvbHVtZSBudW1iZXIgc3RhcnRcbiAgICBDRU5BVFQgICAgICAgICAgIDogMzYsIC8vIGludGVybmFsIGZpbGUgYXR0cmlidXRlc1xuICAgIENFTkFUWCAgICAgICAgICAgOiAzOCwgLy8gZXh0ZXJuYWwgZmlsZSBhdHRyaWJ1dGVzIChob3N0IHN5c3RlbSBkZXBlbmRlbnQpXG4gICAgQ0VOT0ZGICAgICAgICAgICA6IDQyLCAvLyBMT0MgaGVhZGVyIG9mZnNldFxuXG4gICAgLyogVGhlIGVudHJpZXMgaW4gdGhlIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeSAqL1xuICAgIEVOREhEUiAgICAgICAgICAgOiAyMiwgLy8gRU5EIGhlYWRlciBzaXplXG4gICAgRU5EU0lHICAgICAgICAgICA6IDB4MDYwNTRiNTAsIC8vIFwiUEtcXDAwNVxcMDA2XCJcbiAgICBFTkRTVUIgICAgICAgICAgIDogOCwgLy8gbnVtYmVyIG9mIGVudHJpZXMgb24gdGhpcyBkaXNrXG4gICAgRU5EVE9UICAgICAgICAgICA6IDEwLCAvLyB0b3RhbCBudW1iZXIgb2YgZW50cmllc1xuICAgIEVORFNJWiAgICAgICAgICAgOiAxMiwgLy8gY2VudHJhbCBkaXJlY3Rvcnkgc2l6ZSBpbiBieXRlc1xuICAgIEVORE9GRiAgICAgICAgICAgOiAxNiwgLy8gb2Zmc2V0IG9mIGZpcnN0IENFTiBoZWFkZXJcbiAgICBFTkRDT00gICAgICAgICAgIDogMjAsIC8vIHppcCBmaWxlIGNvbW1lbnQgbGVuZ3RoXG5cbiAgICBFTkQ2NEhEUiAgICAgICAgIDogMjAsIC8vIHppcDY0IEVORCBoZWFkZXIgc2l6ZVxuICAgIEVORDY0U0lHICAgICAgICAgOiAweDA3MDY0YjUwLCAvLyB6aXA2NCBMb2NhdG9yIHNpZ25hdHVyZSwgXCJQS1xcMDA2XFwwMDdcIlxuICAgIEVORDY0U1RBUlQgICAgICAgOiA0LCAvLyBudW1iZXIgb2YgdGhlIGRpc2sgd2l0aCB0aGUgc3RhcnQgb2YgdGhlIHppcDY0XG4gICAgRU5ENjRPRkYgICAgICAgICA6IDgsIC8vIHJlbGF0aXZlIG9mZnNldCBvZiB0aGUgemlwNjQgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5XG4gICAgRU5ENjROVU1ESVNLUyAgICA6IDE2LCAvLyB0b3RhbCBudW1iZXIgb2YgZGlza3NcblxuICAgIFpJUDY0U0lHICAgICAgICAgOiAweDA2MDY0YjUwLCAvLyB6aXA2NCBzaWduYXR1cmUsIFwiUEtcXDAwNlxcMDA2XCJcbiAgICBaSVA2NEhEUiAgICAgICAgIDogNTYsIC8vIHppcDY0IHJlY29yZCBtaW5pbXVtIHNpemVcbiAgICBaSVA2NExFQUQgICAgICAgIDogMTIsIC8vIGxlYWRpbmcgYnl0ZXMgYXQgdGhlIHN0YXJ0IG9mIHRoZSByZWNvcmQsIG5vdCBjb3VudGVkIGJ5IHRoZSB2YWx1ZSBzdG9yZWQgaW4gWklQNjRTSVpFXG4gICAgWklQNjRTSVpFICAgICAgICA6IDQsIC8vIHppcDY0IHNpemUgb2YgdGhlIGNlbnRyYWwgZGlyZWN0b3J5IHJlY29yZFxuICAgIFpJUDY0VkVNICAgICAgICAgOiAxMiwgLy8gemlwNjQgdmVyc2lvbiBtYWRlIGJ5XG4gICAgWklQNjRWRVIgICAgICAgICA6IDE0LCAvLyB6aXA2NCB2ZXJzaW9uIG5lZWRlZCB0byBleHRyYWN0XG4gICAgWklQNjREU0sgICAgICAgICA6IDE2LCAvLyB6aXA2NCBudW1iZXIgb2YgdGhpcyBkaXNrXG4gICAgWklQNjREU0tESVIgICAgICA6IDIwLCAvLyBudW1iZXIgb2YgdGhlIGRpc2sgd2l0aCB0aGUgc3RhcnQgb2YgdGhlIHJlY29yZCBkaXJlY3RvcnlcbiAgICBaSVA2NFNVQiAgICAgICAgIDogMjQsIC8vIG51bWJlciBvZiBlbnRyaWVzIG9uIHRoaXMgZGlza1xuICAgIFpJUDY0VE9UICAgICAgICAgOiAzMiwgLy8gdG90YWwgbnVtYmVyIG9mIGVudHJpZXNcbiAgICBaSVA2NFNJWkIgICAgICAgIDogNDAsIC8vIHppcDY0IGNlbnRyYWwgZGlyZWN0b3J5IHNpemUgaW4gYnl0ZXNcbiAgICBaSVA2NE9GRiAgICAgICAgIDogNDgsIC8vIG9mZnNldCBvZiBzdGFydCBvZiBjZW50cmFsIGRpcmVjdG9yeSB3aXRoIHJlc3BlY3QgdG8gdGhlIHN0YXJ0aW5nIGRpc2sgbnVtYmVyXG4gICAgWklQNjRFWFRSQSAgICAgICA6IDU2LCAvLyBleHRlbnNpYmxlIGRhdGEgc2VjdG9yXG5cbiAgICAvKiBDb21wcmVzc2lvbiBtZXRob2RzICovXG4gICAgU1RPUkVEICAgICAgICAgICA6IDAsIC8vIG5vIGNvbXByZXNzaW9uXG4gICAgU0hSVU5LICAgICAgICAgICA6IDEsIC8vIHNocnVua1xuICAgIFJFRFVDRUQxICAgICAgICAgOiAyLCAvLyByZWR1Y2VkIHdpdGggY29tcHJlc3Npb24gZmFjdG9yIDFcbiAgICBSRURVQ0VEMiAgICAgICAgIDogMywgLy8gcmVkdWNlZCB3aXRoIGNvbXByZXNzaW9uIGZhY3RvciAyXG4gICAgUkVEVUNFRDMgICAgICAgICA6IDQsIC8vIHJlZHVjZWQgd2l0aCBjb21wcmVzc2lvbiBmYWN0b3IgM1xuICAgIFJFRFVDRUQ0ICAgICAgICAgOiA1LCAvLyByZWR1Y2VkIHdpdGggY29tcHJlc3Npb24gZmFjdG9yIDRcbiAgICBJTVBMT0RFRCAgICAgICAgIDogNiwgLy8gaW1wbG9kZWRcbiAgICAvLyA3IHJlc2VydmVkIGZvciBUb2tlbml6aW5nIGNvbXByZXNzaW9uIGFsZ29yaXRobVxuICAgIERFRkxBVEVEICAgICAgICAgOiA4LCAvLyBkZWZsYXRlZFxuICAgIEVOSEFOQ0VEX0RFRkxBVEVEOiA5LCAvLyBlbmhhbmNlZCBkZWZsYXRlZFxuICAgIFBLV0FSRSAgICAgICAgICAgOiAxMCwvLyBQS1dhcmUgRENMIGltcGxvZGVkXG4gICAgLy8gMTEgcmVzZXJ2ZWQgYnkgUEtXQVJFXG4gICAgQlpJUDIgICAgICAgICAgICA6IDEyLCAvLyAgY29tcHJlc3NlZCB1c2luZyBCWklQMlxuICAgIC8vIDEzIHJlc2VydmVkIGJ5IFBLV0FSRVxuICAgIExaTUEgICAgICAgICAgICAgOiAxNCwgLy8gTFpNQVxuICAgIC8vIDE1LTE3IHJlc2VydmVkIGJ5IFBLV0FSRVxuICAgIElCTV9URVJTRSAgICAgICAgOiAxOCwgLy8gY29tcHJlc3NlZCB1c2luZyBJQk0gVEVSU0VcbiAgICBJQk1fTFo3NyAgICAgICAgIDogMTksIC8vIElCTSBMWjc3IHpcbiAgICBBRVNfRU5DUllQVCAgICAgIDogOTksIC8vIFdpblpJUCBBRVMgZW5jcnlwdGlvbiBtZXRob2RcblxuICAgIC8qIEdlbmVyYWwgcHVycG9zZSBiaXQgZmxhZyAqL1xuICAgIC8vIHZhbHVlcyBjYW4gb2J0YWluZWQgd2l0aCBleHByZXNzaW9uIDIqKmJpdG5yXG4gICAgRkxHX0VOQyAgICAgICAgICA6IDEsICAgIC8vIEJpdCAwOiBlbmNyeXB0ZWQgZmlsZVxuICAgIEZMR19DT01QMSAgICAgICAgOiAyLCAgICAvLyBCaXQgMSwgY29tcHJlc3Npb24gb3B0aW9uXG4gICAgRkxHX0NPTVAyICAgICAgICA6IDQsICAgIC8vIEJpdCAyLCBjb21wcmVzc2lvbiBvcHRpb25cbiAgICBGTEdfREVTQyAgICAgICAgIDogOCwgICAgLy8gQml0IDMsIGRhdGEgZGVzY3JpcHRvclxuICAgIEZMR19FTkggICAgICAgICAgOiAxNiwgICAvLyBCaXQgNCwgZW5oYW5jZWQgZGVmbGF0aW5nXG4gICAgRkxHX1BBVENIICAgICAgICA6IDMyLCAgIC8vIEJpdCA1LCBpbmRpY2F0ZXMgdGhhdCB0aGUgZmlsZSBpcyBjb21wcmVzc2VkIHBhdGNoZWQgZGF0YS5cbiAgICBGTEdfU1RSICAgICAgICAgIDogNjQsICAgLy8gQml0IDYsIHN0cm9uZyBlbmNyeXB0aW9uIChwYXRlbnRlZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQml0cyA3LTEwOiBDdXJyZW50bHkgdW51c2VkLlxuICAgIEZMR19FRlMgICAgICAgICAgOiAyMDQ4LCAvLyBCaXQgMTE6IExhbmd1YWdlIGVuY29kaW5nIGZsYWcgKEVGUylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQml0IDEyOiBSZXNlcnZlZCBieSBQS1dBUkUgZm9yIGVuaGFuY2VkIGNvbXByZXNzaW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCaXQgMTM6IGVuY3J5cHRlZCB0aGUgQ2VudHJhbCBEaXJlY3RvcnkgKHBhdGVudGVkKS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQml0cyAxNC0xNTogUmVzZXJ2ZWQgYnkgUEtXQVJFLlxuICAgIEZMR19NU0sgICAgICAgICAgOiA0MDk2LCAvLyBtYXNrIGhlYWRlciB2YWx1ZXNcblxuICAgIC8qIExvYWQgdHlwZSAqL1xuICAgIEZJTEUgICAgICAgICAgICAgOiAyLFxuICAgIEJVRkZFUiAgICAgICAgICAgOiAxLFxuICAgIE5PTkUgICAgICAgICAgICAgOiAwLFxuXG4gICAgLyogNC41IEV4dGVuc2libGUgZGF0YSBmaWVsZHMgKi9cbiAgICBFRl9JRCAgICAgICAgICAgIDogMCxcbiAgICBFRl9TSVpFICAgICAgICAgIDogMixcblxuICAgIC8qIEhlYWRlciBJRHMgKi9cbiAgICBJRF9aSVA2NCAgICAgICAgIDogMHgwMDAxLFxuICAgIElEX0FWSU5GTyAgICAgICAgOiAweDAwMDcsXG4gICAgSURfUEZTICAgICAgICAgICA6IDB4MDAwOCxcbiAgICBJRF9PUzIgICAgICAgICAgIDogMHgwMDA5LFxuICAgIElEX05URlMgICAgICAgICAgOiAweDAwMGEsXG4gICAgSURfT1BFTlZNUyAgICAgICA6IDB4MDAwYyxcbiAgICBJRF9VTklYICAgICAgICAgIDogMHgwMDBkLFxuICAgIElEX0ZPUksgICAgICAgICAgOiAweDAwMGUsXG4gICAgSURfUEFUQ0ggICAgICAgICA6IDB4MDAwZixcbiAgICBJRF9YNTA5X1BLQ1M3ICAgIDogMHgwMDE0LFxuICAgIElEX1g1MDlfQ0VSVElEX0YgOiAweDAwMTUsXG4gICAgSURfWDUwOV9DRVJUSURfQyA6IDB4MDAxNixcbiAgICBJRF9TVFJPTkdFTkMgICAgIDogMHgwMDE3LFxuICAgIElEX1JFQ09SRF9NR1QgICAgOiAweDAwMTgsXG4gICAgSURfWDUwOV9QS0NTN19STCA6IDB4MDAxOSxcbiAgICBJRF9JQk0xICAgICAgICAgIDogMHgwMDY1LFxuICAgIElEX0lCTTIgICAgICAgICAgOiAweDAwNjYsXG4gICAgSURfUE9TWklQICAgICAgICA6IDB4NDY5MCxcblxuICAgIEVGX1pJUDY0X09SXzMyICAgOiAweGZmZmZmZmZmLFxuICAgIEVGX1pJUDY0X09SXzE2ICAgOiAweGZmZmYsXG4gICAgRUZfWklQNjRfU1VOQ09NUCA6IDAsXG4gICAgRUZfWklQNjRfU0NPTVAgICA6IDgsXG4gICAgRUZfWklQNjRfUkhPICAgICA6IDE2LFxuICAgIEVGX1pJUDY0X0RTTiAgICAgOiAyNFxufTtcbiIsICJjb25zdCBlcnJvcnMgPSB7XG4gICAgLyogSGVhZGVyIGVycm9yIG1lc3NhZ2VzICovXG4gICAgSU5WQUxJRF9MT0M6IFwiSW52YWxpZCBMT0MgaGVhZGVyIChiYWQgc2lnbmF0dXJlKVwiLFxuICAgIElOVkFMSURfQ0VOOiBcIkludmFsaWQgQ0VOIGhlYWRlciAoYmFkIHNpZ25hdHVyZSlcIixcbiAgICBJTlZBTElEX0VORDogXCJJbnZhbGlkIEVORCBoZWFkZXIgKGJhZCBzaWduYXR1cmUpXCIsXG5cbiAgICAvKiBEZXNjcmlwdG9yICovXG4gICAgREVTQ1JJUFRPUl9OT1RfRVhJU1Q6IFwiTm8gZGVzY3JpcHRvciBwcmVzZW50XCIsXG4gICAgREVTQ1JJUFRPUl9VTktOT1dOOiBcIlVua25vd24gZGVzY3JpcHRvciBmb3JtYXRcIixcbiAgICBERVNDUklQVE9SX0ZBVUxUWTogXCJEZXNjcmlwdG9yIGRhdGEgaXMgbWFsZm9ybWVkXCIsXG5cbiAgICAvKiBaaXBFbnRyeSBlcnJvciBtZXNzYWdlcyovXG4gICAgTk9fREFUQTogXCJOb3RoaW5nIHRvIGRlY29tcHJlc3NcIixcbiAgICBCQURfQ1JDOiBcIkNSQzMyIGNoZWNrc3VtIGZhaWxlZCB7MH1cIixcbiAgICBGSUxFX0lOX1RIRV9XQVk6IFwiVGhlcmUgaXMgYSBmaWxlIGluIHRoZSB3YXk6IHswfVwiLFxuICAgIFVOS05PV05fTUVUSE9EOiBcIkludmFsaWQvdW5zdXBwb3J0ZWQgY29tcHJlc3Npb24gbWV0aG9kXCIsXG5cbiAgICAvKiBJbmZsYXRlciBlcnJvciBtZXNzYWdlcyAqL1xuICAgIEFWQUlMX0RBVEE6IFwiaW5mbGF0ZTo6QXZhaWxhYmxlIGluZmxhdGUgZGF0YSBkaWQgbm90IHRlcm1pbmF0ZVwiLFxuICAgIElOVkFMSURfRElTVEFOQ0U6IFwiaW5mbGF0ZTo6SW52YWxpZCBsaXRlcmFsL2xlbmd0aCBvciBkaXN0YW5jZSBjb2RlIGluIGZpeGVkIG9yIGR5bmFtaWMgYmxvY2tcIixcbiAgICBUT19NQU5ZX0NPREVTOiBcImluZmxhdGU6OkR5bmFtaWMgYmxvY2sgY29kZSBkZXNjcmlwdGlvbjogdG9vIG1hbnkgbGVuZ3RoIG9yIGRpc3RhbmNlIGNvZGVzXCIsXG4gICAgSU5WQUxJRF9SRVBFQVRfTEVOOiBcImluZmxhdGU6OkR5bmFtaWMgYmxvY2sgY29kZSBkZXNjcmlwdGlvbjogcmVwZWF0IG1vcmUgdGhhbiBzcGVjaWZpZWQgbGVuZ3Roc1wiLFxuICAgIElOVkFMSURfUkVQRUFUX0ZJUlNUOiBcImluZmxhdGU6OkR5bmFtaWMgYmxvY2sgY29kZSBkZXNjcmlwdGlvbjogcmVwZWF0IGxlbmd0aHMgd2l0aCBubyBmaXJzdCBsZW5ndGhcIixcbiAgICBJTkNPTVBMRVRFX0NPREVTOiBcImluZmxhdGU6OkR5bmFtaWMgYmxvY2sgY29kZSBkZXNjcmlwdGlvbjogY29kZSBsZW5ndGhzIGNvZGVzIGluY29tcGxldGVcIixcbiAgICBJTlZBTElEX0RZTl9ESVNUQU5DRTogXCJpbmZsYXRlOjpEeW5hbWljIGJsb2NrIGNvZGUgZGVzY3JpcHRpb246IGludmFsaWQgZGlzdGFuY2UgY29kZSBsZW5ndGhzXCIsXG4gICAgSU5WQUxJRF9DT0RFU19MRU46IFwiaW5mbGF0ZTo6RHluYW1pYyBibG9jayBjb2RlIGRlc2NyaXB0aW9uOiBpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGUgbGVuZ3Roc1wiLFxuICAgIElOVkFMSURfU1RPUkVfQkxPQ0s6IFwiaW5mbGF0ZTo6U3RvcmVkIGJsb2NrIGxlbmd0aCBkaWQgbm90IG1hdGNoIG9uZSdzIGNvbXBsZW1lbnRcIixcbiAgICBJTlZBTElEX0JMT0NLX1RZUEU6IFwiaW5mbGF0ZTo6SW52YWxpZCBibG9jayB0eXBlICh0eXBlID09IDMpXCIsXG5cbiAgICAvKiBBRE0tWklQIGVycm9yIG1lc3NhZ2VzICovXG4gICAgQ0FOVF9FWFRSQUNUX0ZJTEU6IFwiQ291bGQgbm90IGV4dHJhY3QgdGhlIGZpbGVcIixcbiAgICBDQU5UX09WRVJSSURFOiBcIlRhcmdldCBmaWxlIGFscmVhZHkgZXhpc3RzXCIsXG4gICAgRElTS19FTlRSWV9UT09fTEFSR0U6IFwiTnVtYmVyIG9mIGRpc2sgZW50cmllcyBpcyB0b28gbGFyZ2VcIixcbiAgICBOT19aSVA6IFwiTm8gemlwIGZpbGUgd2FzIGxvYWRlZFwiLFxuICAgIE5PX0VOVFJZOiBcIkVudHJ5IGRvZXNuJ3QgZXhpc3RcIixcbiAgICBESVJFQ1RPUllfQ09OVEVOVF9FUlJPUjogXCJBIGRpcmVjdG9yeSBjYW5ub3QgaGF2ZSBjb250ZW50XCIsXG4gICAgRklMRV9OT1RfRk9VTkQ6ICdGaWxlIG5vdCBmb3VuZDogXCJ7MH1cIicsXG4gICAgTk9UX0lNUExFTUVOVEVEOiBcIk5vdCBpbXBsZW1lbnRlZFwiLFxuICAgIElOVkFMSURfRklMRU5BTUU6IFwiSW52YWxpZCBmaWxlbmFtZVwiLFxuICAgIElOVkFMSURfRk9STUFUOiBcIkludmFsaWQgb3IgdW5zdXBwb3J0ZWQgemlwIGZvcm1hdC4gTm8gRU5EIGhlYWRlciBmb3VuZFwiLFxuICAgIElOVkFMSURfUEFTU19QQVJBTTogXCJJbmNvbXBhdGlibGUgcGFzc3dvcmQgcGFyYW1ldGVyXCIsXG4gICAgV1JPTkdfUEFTU1dPUkQ6IFwiV3JvbmcgUGFzc3dvcmRcIixcblxuICAgIC8qIEFETS1aSVAgKi9cbiAgICBDT01NRU5UX1RPT19MT05HOiBcIkNvbW1lbnQgaXMgdG9vIGxvbmdcIiwgLy8gQ29tbWVudCBjYW4gYmUgbWF4IDY1NTM1IGJ5dGVzIGxvbmcgKE5PVEU6IHNvbWUgbm9uLVVTIGNoYXJhY3RlcnMgbWF5IHRha2UgbW9yZSBzcGFjZSlcbiAgICBFWFRSQV9GSUVMRF9QQVJTRV9FUlJPUjogXCJFeHRyYSBmaWVsZCBwYXJzaW5nIGVycm9yXCJcbn07XG5cbi8vIHRlbXBsYXRlXG5mdW5jdGlvbiBFKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoKSB7IC8vIEFsbG93IHswfSAuLiB7OX0gYXJndW1lbnRzIGluIGVycm9yIG1lc3NhZ2UsIGJhc2VkIG9uIGFyZ3VtZW50IG51bWJlclxuICAgICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2UucmVwbGFjZSgvXFx7KFxcZClcXH0vZywgKF8sIG4pID0+IGFyZ3Nbbl0gfHwgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignQURNLVpJUDogJyArIG1lc3NhZ2UpO1xuICAgIH07XG59XG5cbi8vIEluaXQgZXJyb3JzIHdpdGggdGVtcGxhdGVcbmZvciAoY29uc3QgbXNnIG9mIE9iamVjdC5rZXlzKGVycm9ycykpIHtcbiAgICBleHBvcnRzW21zZ10gPSBFKGVycm9yc1ttc2ddKTtcbn1cbiIsICJjb25zdCBmc3lzdGVtID0gcmVxdWlyZShcImZzXCIpO1xuY29uc3QgcHRoID0gcmVxdWlyZShcInBhdGhcIik7XG5jb25zdCBDb25zdGFudHMgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5jb25zdCBFcnJvcnMgPSByZXF1aXJlKFwiLi9lcnJvcnNcIik7XG5jb25zdCBpc1dpbiA9IHR5cGVvZiBwcm9jZXNzID09PSBcIm9iamVjdFwiICYmIFwid2luMzJcIiA9PT0gcHJvY2Vzcy5wbGF0Zm9ybTtcblxuY29uc3QgaXNfT2JqID0gKG9iaikgPT4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJiBvYmogIT09IG51bGw7XG5cbi8vIGdlbmVyYXRlIENSQzMyIGxvb2t1cCB0YWJsZVxuY29uc3QgY3JjVGFibGUgPSBuZXcgVWludDMyQXJyYXkoMjU2KS5tYXAoKHQsIGMpID0+IHtcbiAgICBmb3IgKGxldCBrID0gMDsgayA8IDg7IGsrKykge1xuICAgICAgICBpZiAoKGMgJiAxKSAhPT0gMCkge1xuICAgICAgICAgICAgYyA9IDB4ZWRiODgzMjAgXiAoYyA+Pj4gMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjID4+Pj0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYyA+Pj4gMDtcbn0pO1xuXG4vLyBVVElMUyBmdW5jdGlvbnNcblxuZnVuY3Rpb24gVXRpbHMob3B0cykge1xuICAgIHRoaXMuc2VwID0gcHRoLnNlcDtcbiAgICB0aGlzLmZzID0gZnN5c3RlbTtcblxuICAgIGlmIChpc19PYmoob3B0cykpIHtcbiAgICAgICAgLy8gY3VzdG9tIGZpbGVzeXN0ZW1cbiAgICAgICAgaWYgKGlzX09iaihvcHRzLmZzKSAmJiB0eXBlb2Ygb3B0cy5mcy5zdGF0U3luYyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aGlzLmZzID0gb3B0cy5mcztcbiAgICAgICAgfVxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBVdGlscztcblxuLy8gSU5TVEFOVElBQkxFIGZ1bmN0aW9uc1xuXG5VdGlscy5wcm90b3R5cGUubWFrZURpciA9IGZ1bmN0aW9uICgvKlN0cmluZyovIGZvbGRlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gU3luYyAtIG1ha2UgZGlyZWN0b3JpZXMgdHJlZVxuICAgIGZ1bmN0aW9uIG1rZGlyU3luYygvKlN0cmluZyovIGZwYXRoKSB7XG4gICAgICAgIGxldCByZXNvbHZlZFBhdGggPSBmcGF0aC5zcGxpdChzZWxmLnNlcClbMF07XG4gICAgICAgIGZwYXRoLnNwbGl0KHNlbGYuc2VwKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICBpZiAoIW5hbWUgfHwgbmFtZS5zdWJzdHIoLTEsIDEpID09PSBcIjpcIikgcmV0dXJuO1xuICAgICAgICAgICAgcmVzb2x2ZWRQYXRoICs9IHNlbGYuc2VwICsgbmFtZTtcbiAgICAgICAgICAgIHZhciBzdGF0O1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBzdGF0ID0gc2VsZi5mcy5zdGF0U3luYyhyZXNvbHZlZFBhdGgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHNlbGYuZnMubWtkaXJTeW5jKHJlc29sdmVkUGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdCAmJiBzdGF0LmlzRmlsZSgpKSB0aHJvdyBFcnJvcnMuRklMRV9JTl9USEVfV0FZKGBcIiR7cmVzb2x2ZWRQYXRofVwiYCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG1rZGlyU3luYyhmb2xkZXIpO1xufTtcblxuVXRpbHMucHJvdG90eXBlLndyaXRlRmlsZVRvID0gZnVuY3Rpb24gKC8qU3RyaW5nKi8gcGF0aCwgLypCdWZmZXIqLyBjb250ZW50LCAvKkJvb2xlYW4qLyBvdmVyd3JpdGUsIC8qTnVtYmVyKi8gYXR0cikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmIChzZWxmLmZzLmV4aXN0c1N5bmMocGF0aCkpIHtcbiAgICAgICAgaWYgKCFvdmVyd3JpdGUpIHJldHVybiBmYWxzZTsgLy8gY2Fubm90IG92ZXJ3cml0ZVxuXG4gICAgICAgIHZhciBzdGF0ID0gc2VsZi5mcy5zdGF0U3luYyhwYXRoKTtcbiAgICAgICAgaWYgKHN0YXQuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBmb2xkZXIgPSBwdGguZGlybmFtZShwYXRoKTtcbiAgICBpZiAoIXNlbGYuZnMuZXhpc3RzU3luYyhmb2xkZXIpKSB7XG4gICAgICAgIHNlbGYubWFrZURpcihmb2xkZXIpO1xuICAgIH1cblxuICAgIHZhciBmZDtcbiAgICB0cnkge1xuICAgICAgICBmZCA9IHNlbGYuZnMub3BlblN5bmMocGF0aCwgXCJ3XCIsIDBvNjY2KTsgLy8gMDY2NlxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgc2VsZi5mcy5jaG1vZFN5bmMocGF0aCwgMG82NjYpO1xuICAgICAgICBmZCA9IHNlbGYuZnMub3BlblN5bmMocGF0aCwgXCJ3XCIsIDBvNjY2KTtcbiAgICB9XG4gICAgaWYgKGZkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzZWxmLmZzLndyaXRlU3luYyhmZCwgY29udGVudCwgMCwgY29udGVudC5sZW5ndGgsIDApO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgc2VsZi5mcy5jbG9zZVN5bmMoZmQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNlbGYuZnMuY2htb2RTeW5jKHBhdGgsIGF0dHIgfHwgMG82NjYpO1xuICAgIHJldHVybiB0cnVlO1xufTtcblxuVXRpbHMucHJvdG90eXBlLndyaXRlRmlsZVRvQXN5bmMgPSBmdW5jdGlvbiAoLypTdHJpbmcqLyBwYXRoLCAvKkJ1ZmZlciovIGNvbnRlbnQsIC8qQm9vbGVhbiovIG92ZXJ3cml0ZSwgLypOdW1iZXIqLyBhdHRyLCAvKkZ1bmN0aW9uKi8gY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIGF0dHIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayA9IGF0dHI7XG4gICAgICAgIGF0dHIgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBzZWxmLmZzLmV4aXN0cyhwYXRoLCBmdW5jdGlvbiAoZXhpc3QpIHtcbiAgICAgICAgaWYgKGV4aXN0ICYmICFvdmVyd3JpdGUpIHJldHVybiBjYWxsYmFjayhmYWxzZSk7XG5cbiAgICAgICAgc2VsZi5mcy5zdGF0KHBhdGgsIGZ1bmN0aW9uIChlcnIsIHN0YXQpIHtcbiAgICAgICAgICAgIGlmIChleGlzdCAmJiBzdGF0LmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZmFsc2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZm9sZGVyID0gcHRoLmRpcm5hbWUocGF0aCk7XG4gICAgICAgICAgICBzZWxmLmZzLmV4aXN0cyhmb2xkZXIsIGZ1bmN0aW9uIChleGlzdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWV4aXN0cykgc2VsZi5tYWtlRGlyKGZvbGRlcik7XG5cbiAgICAgICAgICAgICAgICBzZWxmLmZzLm9wZW4ocGF0aCwgXCJ3XCIsIDBvNjY2LCBmdW5jdGlvbiAoZXJyLCBmZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmZzLmNobW9kKHBhdGgsIDBvNjY2LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mcy5vcGVuKHBhdGgsIFwid1wiLCAwbzY2NiwgZnVuY3Rpb24gKGVyciwgZmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mcy53cml0ZShmZCwgY29udGVudCwgMCwgY29udGVudC5sZW5ndGgsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZnMuY2xvc2UoZmQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmZzLmNobW9kKHBhdGgsIGF0dHIgfHwgMG82NjYsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mcy53cml0ZShmZCwgY29udGVudCwgMCwgY29udGVudC5sZW5ndGgsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmZzLmNsb3NlKGZkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZnMuY2htb2QocGF0aCwgYXR0ciB8fCAwbzY2NiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmZzLmNobW9kKHBhdGgsIGF0dHIgfHwgMG82NjYsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuXG5VdGlscy5wcm90b3R5cGUuZmluZEZpbGVzID0gZnVuY3Rpb24gKC8qU3RyaW5nKi8gcGF0aCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgZnVuY3Rpb24gZmluZFN5bmMoLypTdHJpbmcqLyBkaXIsIC8qUmVnRXhwKi8gcGF0dGVybiwgLypCb29sZWFuKi8gcmVjdXJzaXZlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIHJlY3Vyc2l2ZSA9IHBhdHRlcm47XG4gICAgICAgICAgICBwYXR0ZXJuID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGxldCBmaWxlcyA9IFtdO1xuICAgICAgICBzZWxmLmZzLnJlYWRkaXJTeW5jKGRpcikuZm9yRWFjaChmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IHB0aC5qb2luKGRpciwgZmlsZSk7XG4gICAgICAgICAgICBjb25zdCBzdGF0ID0gc2VsZi5mcy5zdGF0U3luYyhwYXRoKTtcblxuICAgICAgICAgICAgaWYgKCFwYXR0ZXJuIHx8IHBhdHRlcm4udGVzdChwYXRoKSkge1xuICAgICAgICAgICAgICAgIGZpbGVzLnB1c2gocHRoLm5vcm1hbGl6ZShwYXRoKSArIChzdGF0LmlzRGlyZWN0b3J5KCkgPyBzZWxmLnNlcCA6IFwiXCIpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHN0YXQuaXNEaXJlY3RvcnkoKSAmJiByZWN1cnNpdmUpIGZpbGVzID0gZmlsZXMuY29uY2F0KGZpbmRTeW5jKHBhdGgsIHBhdHRlcm4sIHJlY3Vyc2l2ZSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZpbGVzO1xuICAgIH1cblxuICAgIHJldHVybiBmaW5kU3luYyhwYXRoLCB1bmRlZmluZWQsIHRydWUpO1xufTtcblxuLyoqXG4gKiBDYWxsYmFjayBmb3Igc2hvd2luZyBpZiBldmVyeXRoaW5nIHdhcyBkb25lLlxuICpcbiAqIEBjYWxsYmFjayBmaWxlbGlzdENhbGxiYWNrXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnIgLSBFcnJvciBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nW119IGxpc3QgLSB3YXMgcmVxdWVzdCBmdWxseSBjb21wbGV0ZWRcbiAqL1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlyXG4gKiBAcGFyYW0ge2ZpbGVsaXN0Q2FsbGJhY2t9IGNiXG4gKi9cblV0aWxzLnByb3RvdHlwZS5maW5kRmlsZXNBc3luYyA9IGZ1bmN0aW9uIChkaXIsIGNiKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgbGV0IHJlc3VsdHMgPSBbXTtcbiAgICBzZWxmLmZzLnJlYWRkaXIoZGlyLCBmdW5jdGlvbiAoZXJyLCBsaXN0KSB7XG4gICAgICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpO1xuICAgICAgICBsZXQgbGlzdF9sZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgICAgICAgaWYgKCFsaXN0X2xlbmd0aCkgcmV0dXJuIGNiKG51bGwsIHJlc3VsdHMpO1xuICAgICAgICBsaXN0LmZvckVhY2goZnVuY3Rpb24gKGZpbGUpIHtcbiAgICAgICAgICAgIGZpbGUgPSBwdGguam9pbihkaXIsIGZpbGUpO1xuICAgICAgICAgICAgc2VsZi5mcy5zdGF0KGZpbGUsIGZ1bmN0aW9uIChlcnIsIHN0YXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKTtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gocHRoLm5vcm1hbGl6ZShmaWxlKSArIChzdGF0LmlzRGlyZWN0b3J5KCkgPyBzZWxmLnNlcCA6IFwiXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXQuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5maW5kRmlsZXNBc3luYyhmaWxlLCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5jb25jYXQocmVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIS0tbGlzdF9sZW5ndGgpIGNiKG51bGwsIHJlc3VsdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIS0tbGlzdF9sZW5ndGgpIGNiKG51bGwsIHJlc3VsdHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcblxuVXRpbHMucHJvdG90eXBlLmdldEF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoKSB7fTtcblxuVXRpbHMucHJvdG90eXBlLnNldEF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoKSB7fTtcblxuLy8gU1RBVElDIGZ1bmN0aW9uc1xuXG4vLyBjcmMzMiBzaW5nbGUgdXBkYXRlIChpdCBpcyBwYXJ0IG9mIGNyYzMyKVxuVXRpbHMuY3JjMzJ1cGRhdGUgPSBmdW5jdGlvbiAoY3JjLCBieXRlKSB7XG4gICAgcmV0dXJuIGNyY1RhYmxlWyhjcmMgXiBieXRlKSAmIDB4ZmZdIF4gKGNyYyA+Pj4gOCk7XG59O1xuXG5VdGlscy5jcmMzMiA9IGZ1bmN0aW9uIChidWYpIHtcbiAgICBpZiAodHlwZW9mIGJ1ZiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBidWYgPSBCdWZmZXIuZnJvbShidWYsIFwidXRmOFwiKTtcbiAgICB9XG5cbiAgICBsZXQgbGVuID0gYnVmLmxlbmd0aDtcbiAgICBsZXQgY3JjID0gfjA7XG4gICAgZm9yIChsZXQgb2ZmID0gMDsgb2ZmIDwgbGVuOyApIGNyYyA9IFV0aWxzLmNyYzMydXBkYXRlKGNyYywgYnVmW29mZisrXSk7XG4gICAgLy8geG9yIGFuZCBjYXN0IGFzIHVpbnQzMiBudW1iZXJcbiAgICByZXR1cm4gfmNyYyA+Pj4gMDtcbn07XG5cblV0aWxzLm1ldGhvZFRvU3RyaW5nID0gZnVuY3Rpb24gKC8qTnVtYmVyKi8gbWV0aG9kKSB7XG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgICAgY2FzZSBDb25zdGFudHMuU1RPUkVEOlxuICAgICAgICAgICAgcmV0dXJuIFwiU1RPUkVEIChcIiArIG1ldGhvZCArIFwiKVwiO1xuICAgICAgICBjYXNlIENvbnN0YW50cy5ERUZMQVRFRDpcbiAgICAgICAgICAgIHJldHVybiBcIkRFRkxBVEVEIChcIiArIG1ldGhvZCArIFwiKVwiO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFwiVU5TVVBQT1JURUQgKFwiICsgbWV0aG9kICsgXCIpXCI7XG4gICAgfVxufTtcblxuLyoqXG4gKiByZW1vdmVzIFwiLi5cIiBzdHlsZSBwYXRoIGVsZW1lbnRzXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIGZpeGFibGUgcGF0aFxuICogQHJldHVybnMgc3RyaW5nIC0gZml4ZWQgZmlsZXBhdGhcbiAqL1xuVXRpbHMuY2Fub25pY2FsID0gZnVuY3Rpb24gKC8qc3RyaW5nKi8gcGF0aCkge1xuICAgIGlmICghcGF0aCkgcmV0dXJuIFwiXCI7XG4gICAgLy8gdHJpY2sgbm9ybWFsaXplIHRoaW5rIHBhdGggaXMgYWJzb2x1dGVcbiAgICBjb25zdCBzYWZlU3VmZml4ID0gcHRoLnBvc2l4Lm5vcm1hbGl6ZShcIi9cIiArIHBhdGguc3BsaXQoXCJcXFxcXCIpLmpvaW4oXCIvXCIpKTtcbiAgICByZXR1cm4gcHRoLmpvaW4oXCIuXCIsIHNhZmVTdWZmaXgpO1xufTtcblxuLyoqXG4gKiBmaXggZmlsZSBuYW1lcyBpbiBhY2hpdmVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gZml4YWJsZSBwYXRoXG4gKiBAcmV0dXJucyBzdHJpbmcgLSBmaXhlZCBmaWxlcGF0aFxuICovXG5cblV0aWxzLnppcG5hbWVmaXggPSBmdW5jdGlvbiAocGF0aCkge1xuICAgIGlmICghcGF0aCkgcmV0dXJuIFwiXCI7XG4gICAgLy8gdHJpY2sgbm9ybWFsaXplIHRoaW5rIHBhdGggaXMgYWJzb2x1dGVcbiAgICBjb25zdCBzYWZlU3VmZml4ID0gcHRoLnBvc2l4Lm5vcm1hbGl6ZShcIi9cIiArIHBhdGguc3BsaXQoXCJcXFxcXCIpLmpvaW4oXCIvXCIpKTtcbiAgICByZXR1cm4gcHRoLnBvc2l4LmpvaW4oXCIuXCIsIHNhZmVTdWZmaXgpO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnNcbiAqL1xuVXRpbHMuZmluZExhc3QgPSBmdW5jdGlvbiAoYXJyLCBjYWxsYmFjaykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXJyIGlzIG5vdCBhcnJheVwiKTtcblxuICAgIGNvbnN0IGxlbiA9IGFyci5sZW5ndGggPj4+IDA7XG4gICAgZm9yIChsZXQgaSA9IGxlbiAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGlmIChjYWxsYmFjayhhcnJbaV0sIGksIGFycikpIHtcbiAgICAgICAgICAgIHJldHVybiBhcnJbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZvaWQgMDtcbn07XG5cbi8vIG1ha2UgYWJvbHV0ZSBwYXRocyB0YWtpbmcgcHJlZml4IGFzIHJvb3QgZm9sZGVyXG5VdGlscy5zYW5pdGl6ZSA9IGZ1bmN0aW9uICgvKnN0cmluZyovIHByZWZpeCwgLypzdHJpbmcqLyBuYW1lKSB7XG4gICAgcHJlZml4ID0gcHRoLnJlc29sdmUocHRoLm5vcm1hbGl6ZShwcmVmaXgpKTtcbiAgICB2YXIgcGFydHMgPSBuYW1lLnNwbGl0KFwiL1wiKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgcGF0aCA9IHB0aC5ub3JtYWxpemUocHRoLmpvaW4ocHJlZml4LCBwYXJ0cy5zbGljZShpLCBsKS5qb2luKHB0aC5zZXApKSk7XG4gICAgICAgIGlmIChwYXRoLmluZGV4T2YocHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHB0aC5ub3JtYWxpemUocHRoLmpvaW4ocHJlZml4LCBwdGguYmFzZW5hbWUobmFtZSkpKTtcbn07XG5cbi8vIGNvbnZlcnRzIGJ1ZmZlciwgVWludDhBcnJheSwgc3RyaW5nIHR5cGVzIHRvIGJ1ZmZlclxuVXRpbHMudG9CdWZmZXIgPSBmdW5jdGlvbiB0b0J1ZmZlcigvKmJ1ZmZlciwgVWludDhBcnJheSwgc3RyaW5nKi8gaW5wdXQsIC8qIGZ1bmN0aW9uICovIGVuY29kZXIpIHtcbiAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGlucHV0KSkge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfSBlbHNlIGlmIChpbnB1dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGlucHV0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBleHBlY3Qgc3RyaW5nIGFsbCBvdGhlciB2YWx1ZXMgYXJlIGludmFsaWQgYW5kIHJldHVybiBlbXB0eSBidWZmZXJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gXCJzdHJpbmdcIiA/IGVuY29kZXIoaW5wdXQpIDogQnVmZmVyLmFsbG9jKDApO1xuICAgIH1cbn07XG5cblV0aWxzLnJlYWRCaWdVSW50NjRMRSA9IGZ1bmN0aW9uICgvKkJ1ZmZlciovIGJ1ZmZlciwgLyppbnQqLyBpbmRleCkge1xuICAgIHZhciBzbGljZSA9IEJ1ZmZlci5mcm9tKGJ1ZmZlci5zbGljZShpbmRleCwgaW5kZXggKyA4KSk7XG4gICAgc2xpY2Uuc3dhcDY0KCk7XG5cbiAgICByZXR1cm4gcGFyc2VJbnQoYDB4JHtzbGljZS50b1N0cmluZyhcImhleFwiKX1gKTtcbn07XG5cblV0aWxzLmZyb21ET1MyRGF0ZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoKCh2YWwgPj4gMjUpICYgMHg3ZikgKyAxOTgwLCBNYXRoLm1heCgoKHZhbCA+PiAyMSkgJiAweDBmKSAtIDEsIDApLCBNYXRoLm1heCgodmFsID4+IDE2KSAmIDB4MWYsIDEpLCAodmFsID4+IDExKSAmIDB4MWYsICh2YWwgPj4gNSkgJiAweDNmLCAodmFsICYgMHgxZikgPDwgMSk7XG59O1xuXG5VdGlscy5mcm9tRGF0ZTJET1MgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgbGV0IGRhdGUgPSAwO1xuICAgIGxldCB0aW1lID0gMDtcbiAgICBpZiAodmFsLmdldEZ1bGxZZWFyKCkgPiAxOTc5KSB7XG4gICAgICAgIGRhdGUgPSAoKCh2YWwuZ2V0RnVsbFllYXIoKSAtIDE5ODApICYgMHg3ZikgPDwgOSkgfCAoKHZhbC5nZXRNb250aCgpICsgMSkgPDwgNSkgfCB2YWwuZ2V0RGF0ZSgpO1xuICAgICAgICB0aW1lID0gKHZhbC5nZXRIb3VycygpIDw8IDExKSB8ICh2YWwuZ2V0TWludXRlcygpIDw8IDUpIHwgKHZhbC5nZXRTZWNvbmRzKCkgPj4gMSk7XG4gICAgfVxuICAgIHJldHVybiAoZGF0ZSA8PCAxNikgfCB0aW1lO1xufTtcblxuVXRpbHMuaXNXaW4gPSBpc1dpbjsgLy8gRG8gd2UgaGF2ZSB3aW5kb3dzIHN5c3RlbVxuVXRpbHMuY3JjVGFibGUgPSBjcmNUYWJsZTtcbiIsICJjb25zdCBwdGggPSByZXF1aXJlKFwicGF0aFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoLypTdHJpbmcqLyBwYXRoLCAvKlV0aWxzIG9iamVjdCovIHsgZnMgfSkge1xuICAgIHZhciBfcGF0aCA9IHBhdGggfHwgXCJcIixcbiAgICAgICAgX29iaiA9IG5ld0F0dHIoKSxcbiAgICAgICAgX3N0YXQgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gbmV3QXR0cigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRpcmVjdG9yeTogZmFsc2UsXG4gICAgICAgICAgICByZWFkb25seTogZmFsc2UsXG4gICAgICAgICAgICBoaWRkZW46IGZhbHNlLFxuICAgICAgICAgICAgZXhlY3V0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICBtdGltZTogMCxcbiAgICAgICAgICAgIGF0aW1lOiAwXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKF9wYXRoICYmIGZzLmV4aXN0c1N5bmMoX3BhdGgpKSB7XG4gICAgICAgIF9zdGF0ID0gZnMuc3RhdFN5bmMoX3BhdGgpO1xuICAgICAgICBfb2JqLmRpcmVjdG9yeSA9IF9zdGF0LmlzRGlyZWN0b3J5KCk7XG4gICAgICAgIF9vYmoubXRpbWUgPSBfc3RhdC5tdGltZTtcbiAgICAgICAgX29iai5hdGltZSA9IF9zdGF0LmF0aW1lO1xuICAgICAgICBfb2JqLmV4ZWN1dGFibGUgPSAoMG8xMTEgJiBfc3RhdC5tb2RlKSAhPT0gMDsgLy8gZmlsZSBpcyBleGVjdXRhYmxlIHdobyBldmVyIGhhciByaWdodCBub3QganVzdCBvd25lclxuICAgICAgICBfb2JqLnJlYWRvbmx5ID0gKDBvMjAwICYgX3N0YXQubW9kZSkgPT09IDA7IC8vIHJlYWRvbmx5IGlmIG93bmVyIGhhcyBubyB3cml0ZSByaWdodFxuICAgICAgICBfb2JqLmhpZGRlbiA9IHB0aC5iYXNlbmFtZShfcGF0aClbMF0gPT09IFwiLlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIkludmFsaWQgcGF0aDogXCIgKyBfcGF0aCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0IGRpcmVjdG9yeSgpIHtcbiAgICAgICAgICAgIHJldHVybiBfb2JqLmRpcmVjdG9yeTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgcmVhZE9ubHkoKSB7XG4gICAgICAgICAgICByZXR1cm4gX29iai5yZWFkb25seTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgaGlkZGVuKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9vYmouaGlkZGVuO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBtdGltZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBfb2JqLm10aW1lO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBhdGltZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBfb2JqLmF0aW1lO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBleGVjdXRhYmxlKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9vYmouZXhlY3V0YWJsZTtcbiAgICAgICAgfSxcblxuICAgICAgICBkZWNvZGVBdHRyaWJ1dGVzOiBmdW5jdGlvbiAoKSB7fSxcblxuICAgICAgICBlbmNvZGVBdHRyaWJ1dGVzOiBmdW5jdGlvbiAoKSB7fSxcblxuICAgICAgICB0b0pTT046IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcGF0aDogX3BhdGgsXG4gICAgICAgICAgICAgICAgaXNEaXJlY3Rvcnk6IF9vYmouZGlyZWN0b3J5LFxuICAgICAgICAgICAgICAgIGlzUmVhZE9ubHk6IF9vYmoucmVhZG9ubHksXG4gICAgICAgICAgICAgICAgaXNIaWRkZW46IF9vYmouaGlkZGVuLFxuICAgICAgICAgICAgICAgIGlzRXhlY3V0YWJsZTogX29iai5leGVjdXRhYmxlLFxuICAgICAgICAgICAgICAgIG1UaW1lOiBfb2JqLm10aW1lLFxuICAgICAgICAgICAgICAgIGFUaW1lOiBfb2JqLmF0aW1lXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy50b0pTT04oKSwgbnVsbCwgXCJcXHRcIik7XG4gICAgICAgIH1cbiAgICB9O1xufTtcbiIsICJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBlZnM6IHRydWUsXG4gICAgZW5jb2RlOiAoZGF0YSkgPT4gQnVmZmVyLmZyb20oZGF0YSwgXCJ1dGY4XCIpLFxuICAgIGRlY29kZTogKGRhdGEpID0+IGRhdGEudG9TdHJpbmcoXCJ1dGY4XCIpXG59O1xuIiwgIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5tb2R1bGUuZXhwb3J0cy5Db25zdGFudHMgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5tb2R1bGUuZXhwb3J0cy5FcnJvcnMgPSByZXF1aXJlKFwiLi9lcnJvcnNcIik7XG5tb2R1bGUuZXhwb3J0cy5GaWxlQXR0ciA9IHJlcXVpcmUoXCIuL2ZhdHRyXCIpO1xubW9kdWxlLmV4cG9ydHMuZGVjb2RlciA9IHJlcXVpcmUoXCIuL2RlY29kZXJcIik7XG4iLCAidmFyIFV0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxcIiksXG4gICAgQ29uc3RhbnRzID0gVXRpbHMuQ29uc3RhbnRzO1xuXG4vKiBUaGUgY2VudHJhbCBkaXJlY3RvcnkgZmlsZSBoZWFkZXIgKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdmVyTWFkZSA9IDIwLCAvLyB2Mi4wXG4gICAgICAgIF92ZXJzaW9uID0gMTAsIC8vIHYxLjBcbiAgICAgICAgX2ZsYWdzID0gMCxcbiAgICAgICAgX21ldGhvZCA9IDAsXG4gICAgICAgIF90aW1lID0gMCxcbiAgICAgICAgX2NyYyA9IDAsXG4gICAgICAgIF9jb21wcmVzc2VkU2l6ZSA9IDAsXG4gICAgICAgIF9zaXplID0gMCxcbiAgICAgICAgX2ZuYW1lTGVuID0gMCxcbiAgICAgICAgX2V4dHJhTGVuID0gMCxcbiAgICAgICAgX2NvbUxlbiA9IDAsXG4gICAgICAgIF9kaXNrU3RhcnQgPSAwLFxuICAgICAgICBfaW5hdHRyID0gMCxcbiAgICAgICAgX2F0dHIgPSAwLFxuICAgICAgICBfb2Zmc2V0ID0gMDtcblxuICAgIF92ZXJNYWRlIHw9IFV0aWxzLmlzV2luID8gMHgwYTAwIDogMHgwMzAwO1xuXG4gICAgLy8gU2V0IEVGUyBmbGFnIHNpbmNlIGZpbGVuYW1lIGFuZCBjb21tZW50IGZpZWxkcyBhcmUgYWxsIGJ5IGRlZmF1bHQgZW5jb2RlZCB1c2luZyBVVEYtOC5cbiAgICAvLyBXaXRob3V0IGl0IGZpbGUgbmFtZXMgbWF5IGJlIGNvcnJ1cHRlZCBmb3Igb3RoZXIgYXBwcyB3aGVuIGZpbGUgbmFtZXMgdXNlIHVuaWNvZGUgY2hhcnNcbiAgICBfZmxhZ3MgfD0gQ29uc3RhbnRzLkZMR19FRlM7XG5cbiAgICBjb25zdCBfbG9jYWxIZWFkZXIgPSB7XG4gICAgICAgIGV4dHJhTGVuOiAwXG4gICAgfTtcblxuICAgIC8vIGNhc3RpbmdcbiAgICBjb25zdCB1aW50MzIgPSAodmFsKSA9PiBNYXRoLm1heCgwLCB2YWwpID4+PiAwO1xuICAgIGNvbnN0IHVpbnQxNiA9ICh2YWwpID0+IE1hdGgubWF4KDAsIHZhbCkgJiAweGZmZmY7XG4gICAgY29uc3QgdWludDggPSAodmFsKSA9PiBNYXRoLm1heCgwLCB2YWwpICYgMHhmZjtcblxuICAgIF90aW1lID0gVXRpbHMuZnJvbURhdGUyRE9TKG5ldyBEYXRlKCkpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0IG1hZGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3Zlck1hZGU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCBtYWRlKHZhbCkge1xuICAgICAgICAgICAgX3Zlck1hZGUgPSB2YWw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IHZlcnNpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gX3ZlcnNpb247XG4gICAgICAgIH0sXG4gICAgICAgIHNldCB2ZXJzaW9uKHZhbCkge1xuICAgICAgICAgICAgX3ZlcnNpb24gPSB2YWw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IGZsYWdzKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9mbGFncztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IGZsYWdzKHZhbCkge1xuICAgICAgICAgICAgX2ZsYWdzID0gdmFsO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBmbGFnc19lZnMoKSB7XG4gICAgICAgICAgICByZXR1cm4gKF9mbGFncyAmIENvbnN0YW50cy5GTEdfRUZTKSA+IDA7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCBmbGFnc19lZnModmFsKSB7XG4gICAgICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgICAgICAgX2ZsYWdzIHw9IENvbnN0YW50cy5GTEdfRUZTO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfZmxhZ3MgJj0gfkNvbnN0YW50cy5GTEdfRUZTO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBmbGFnc19kZXNjKCkge1xuICAgICAgICAgICAgcmV0dXJuIChfZmxhZ3MgJiBDb25zdGFudHMuRkxHX0RFU0MpID4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IGZsYWdzX2Rlc2ModmFsKSB7XG4gICAgICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgICAgICAgX2ZsYWdzIHw9IENvbnN0YW50cy5GTEdfREVTQztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX2ZsYWdzICY9IH5Db25zdGFudHMuRkxHX0RFU0M7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IG1ldGhvZCgpIHtcbiAgICAgICAgICAgIHJldHVybiBfbWV0aG9kO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgbWV0aG9kKHZhbCkge1xuICAgICAgICAgICAgc3dpdGNoICh2YWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIENvbnN0YW50cy5TVE9SRUQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmVyc2lvbiA9IDEwO1xuICAgICAgICAgICAgICAgIGNhc2UgQ29uc3RhbnRzLkRFRkxBVEVEOlxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmVyc2lvbiA9IDIwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX21ldGhvZCA9IHZhbDtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgdGltZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBVdGlscy5mcm9tRE9TMkRhdGUodGhpcy50aW1ldmFsKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IHRpbWUodmFsKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWV2YWwgPSBVdGlscy5mcm9tRGF0ZTJET1ModmFsKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgdGltZXZhbCgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGltZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IHRpbWV2YWwodmFsKSB7XG4gICAgICAgICAgICBfdGltZSA9IHVpbnQzMih2YWwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCB0aW1lSGlnaEJ5dGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdWludDgoX3RpbWUgPj4+IDgpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgY3JjKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9jcmM7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCBjcmModmFsKSB7XG4gICAgICAgICAgICBfY3JjID0gdWludDMyKHZhbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IGNvbXByZXNzZWRTaXplKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9jb21wcmVzc2VkU2l6ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IGNvbXByZXNzZWRTaXplKHZhbCkge1xuICAgICAgICAgICAgX2NvbXByZXNzZWRTaXplID0gdWludDMyKHZhbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IHNpemUoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3NpemU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCBzaXplKHZhbCkge1xuICAgICAgICAgICAgX3NpemUgPSB1aW50MzIodmFsKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgZmlsZU5hbWVMZW5ndGgoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2ZuYW1lTGVuO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgZmlsZU5hbWVMZW5ndGgodmFsKSB7XG4gICAgICAgICAgICBfZm5hbWVMZW4gPSB2YWw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IGV4dHJhTGVuZ3RoKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9leHRyYUxlbjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IGV4dHJhTGVuZ3RoKHZhbCkge1xuICAgICAgICAgICAgX2V4dHJhTGVuID0gdmFsO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBleHRyYUxvY2FsTGVuZ3RoKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9sb2NhbEhlYWRlci5leHRyYUxlbjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IGV4dHJhTG9jYWxMZW5ndGgodmFsKSB7XG4gICAgICAgICAgICBfbG9jYWxIZWFkZXIuZXh0cmFMZW4gPSB2YWw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IGNvbW1lbnRMZW5ndGgoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2NvbUxlbjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IGNvbW1lbnRMZW5ndGgodmFsKSB7XG4gICAgICAgICAgICBfY29tTGVuID0gdmFsO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBkaXNrTnVtU3RhcnQoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2Rpc2tTdGFydDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IGRpc2tOdW1TdGFydCh2YWwpIHtcbiAgICAgICAgICAgIF9kaXNrU3RhcnQgPSB1aW50MzIodmFsKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgaW5BdHRyKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9pbmF0dHI7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCBpbkF0dHIodmFsKSB7XG4gICAgICAgICAgICBfaW5hdHRyID0gdWludDMyKHZhbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IGF0dHIoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2F0dHI7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCBhdHRyKHZhbCkge1xuICAgICAgICAgICAgX2F0dHIgPSB1aW50MzIodmFsKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBnZXQgVW5peCBmaWxlIHBlcm1pc3Npb25zXG4gICAgICAgIGdldCBmaWxlQXR0cigpIHtcbiAgICAgICAgICAgIHJldHVybiAoX2F0dHIgfHwgMCkgPj4gMTYgJiAweGZmZjtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgb2Zmc2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIF9vZmZzZXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCBvZmZzZXQodmFsKSB7XG4gICAgICAgICAgICBfb2Zmc2V0ID0gdWludDMyKHZhbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IGVuY3J5cHRlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiAoX2ZsYWdzICYgQ29uc3RhbnRzLkZMR19FTkMpID09PSBDb25zdGFudHMuRkxHX0VOQztcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgY2VudHJhbEhlYWRlclNpemUoKSB7XG4gICAgICAgICAgICByZXR1cm4gQ29uc3RhbnRzLkNFTkhEUiArIF9mbmFtZUxlbiArIF9leHRyYUxlbiArIF9jb21MZW47XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IHJlYWxEYXRhT2Zmc2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIF9vZmZzZXQgKyBDb25zdGFudHMuTE9DSERSICsgX2xvY2FsSGVhZGVyLmZuYW1lTGVuICsgX2xvY2FsSGVhZGVyLmV4dHJhTGVuO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBsb2NhbEhlYWRlcigpIHtcbiAgICAgICAgICAgIHJldHVybiBfbG9jYWxIZWFkZXI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbG9hZExvY2FsSGVhZGVyRnJvbUJpbmFyeTogZnVuY3Rpb24gKC8qQnVmZmVyKi8gaW5wdXQpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gaW5wdXQuc2xpY2UoX29mZnNldCwgX29mZnNldCArIENvbnN0YW50cy5MT0NIRFIpO1xuICAgICAgICAgICAgLy8gMzAgYnl0ZXMgYW5kIHNob3VsZCBzdGFydCB3aXRoIFwiUEtcXDAwM1xcMDA0XCJcbiAgICAgICAgICAgIGlmIChkYXRhLnJlYWRVSW50MzJMRSgwKSAhPT0gQ29uc3RhbnRzLkxPQ1NJRykge1xuICAgICAgICAgICAgICAgIHRocm93IFV0aWxzLkVycm9ycy5JTlZBTElEX0xPQygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyB2ZXJzaW9uIG5lZWRlZCB0byBleHRyYWN0XG4gICAgICAgICAgICBfbG9jYWxIZWFkZXIudmVyc2lvbiA9IGRhdGEucmVhZFVJbnQxNkxFKENvbnN0YW50cy5MT0NWRVIpO1xuICAgICAgICAgICAgLy8gZ2VuZXJhbCBwdXJwb3NlIGJpdCBmbGFnXG4gICAgICAgICAgICBfbG9jYWxIZWFkZXIuZmxhZ3MgPSBkYXRhLnJlYWRVSW50MTZMRShDb25zdGFudHMuTE9DRkxHKTtcbiAgICAgICAgICAgIC8vIGNvbXByZXNzaW9uIG1ldGhvZFxuICAgICAgICAgICAgX2xvY2FsSGVhZGVyLm1ldGhvZCA9IGRhdGEucmVhZFVJbnQxNkxFKENvbnN0YW50cy5MT0NIT1cpO1xuICAgICAgICAgICAgLy8gbW9kaWZpY2F0aW9uIHRpbWUgKDIgYnl0ZXMgdGltZSwgMiBieXRlcyBkYXRlKVxuICAgICAgICAgICAgX2xvY2FsSGVhZGVyLnRpbWUgPSBkYXRhLnJlYWRVSW50MzJMRShDb25zdGFudHMuTE9DVElNKTtcbiAgICAgICAgICAgIC8vIHVuY29tcHJlc3NlZCBmaWxlIGNyYy0zMiB2YWx1XG4gICAgICAgICAgICBfbG9jYWxIZWFkZXIuY3JjID0gZGF0YS5yZWFkVUludDMyTEUoQ29uc3RhbnRzLkxPQ0NSQyk7XG4gICAgICAgICAgICAvLyBjb21wcmVzc2VkIHNpemVcbiAgICAgICAgICAgIF9sb2NhbEhlYWRlci5jb21wcmVzc2VkU2l6ZSA9IGRhdGEucmVhZFVJbnQzMkxFKENvbnN0YW50cy5MT0NTSVopO1xuICAgICAgICAgICAgLy8gdW5jb21wcmVzc2VkIHNpemVcbiAgICAgICAgICAgIF9sb2NhbEhlYWRlci5zaXplID0gZGF0YS5yZWFkVUludDMyTEUoQ29uc3RhbnRzLkxPQ0xFTik7XG4gICAgICAgICAgICAvLyBmaWxlbmFtZSBsZW5ndGhcbiAgICAgICAgICAgIF9sb2NhbEhlYWRlci5mbmFtZUxlbiA9IGRhdGEucmVhZFVJbnQxNkxFKENvbnN0YW50cy5MT0NOQU0pO1xuICAgICAgICAgICAgLy8gZXh0cmEgZmllbGQgbGVuZ3RoXG4gICAgICAgICAgICBfbG9jYWxIZWFkZXIuZXh0cmFMZW4gPSBkYXRhLnJlYWRVSW50MTZMRShDb25zdGFudHMuTE9DRVhUKTtcblxuICAgICAgICAgICAgLy8gcmVhZCBleHRyYSBkYXRhXG4gICAgICAgICAgICBjb25zdCBleHRyYVN0YXJ0ID0gX29mZnNldCArIENvbnN0YW50cy5MT0NIRFIgKyBfbG9jYWxIZWFkZXIuZm5hbWVMZW47XG4gICAgICAgICAgICBjb25zdCBleHRyYUVuZCA9IGV4dHJhU3RhcnQgKyBfbG9jYWxIZWFkZXIuZXh0cmFMZW47XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQuc2xpY2UoZXh0cmFTdGFydCwgZXh0cmFFbmQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGxvYWRGcm9tQmluYXJ5OiBmdW5jdGlvbiAoLypCdWZmZXIqLyBkYXRhKSB7XG4gICAgICAgICAgICAvLyBkYXRhIHNob3VsZCBiZSA0NiBieXRlcyBhbmQgc3RhcnQgd2l0aCBcIlBLIDAxIDAyXCJcbiAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aCAhPT0gQ29uc3RhbnRzLkNFTkhEUiB8fCBkYXRhLnJlYWRVSW50MzJMRSgwKSAhPT0gQ29uc3RhbnRzLkNFTlNJRykge1xuICAgICAgICAgICAgICAgIHRocm93IFV0aWxzLkVycm9ycy5JTlZBTElEX0NFTigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdmVyc2lvbiBtYWRlIGJ5XG4gICAgICAgICAgICBfdmVyTWFkZSA9IGRhdGEucmVhZFVJbnQxNkxFKENvbnN0YW50cy5DRU5WRU0pO1xuICAgICAgICAgICAgLy8gdmVyc2lvbiBuZWVkZWQgdG8gZXh0cmFjdFxuICAgICAgICAgICAgX3ZlcnNpb24gPSBkYXRhLnJlYWRVSW50MTZMRShDb25zdGFudHMuQ0VOVkVSKTtcbiAgICAgICAgICAgIC8vIGVuY3J5cHQsIGRlY3J5cHQgZmxhZ3NcbiAgICAgICAgICAgIF9mbGFncyA9IGRhdGEucmVhZFVJbnQxNkxFKENvbnN0YW50cy5DRU5GTEcpO1xuICAgICAgICAgICAgLy8gY29tcHJlc3Npb24gbWV0aG9kXG4gICAgICAgICAgICBfbWV0aG9kID0gZGF0YS5yZWFkVUludDE2TEUoQ29uc3RhbnRzLkNFTkhPVyk7XG4gICAgICAgICAgICAvLyBtb2RpZmljYXRpb24gdGltZSAoMiBieXRlcyB0aW1lLCAyIGJ5dGVzIGRhdGUpXG4gICAgICAgICAgICBfdGltZSA9IGRhdGEucmVhZFVJbnQzMkxFKENvbnN0YW50cy5DRU5USU0pO1xuICAgICAgICAgICAgLy8gdW5jb21wcmVzc2VkIGZpbGUgY3JjLTMyIHZhbHVlXG4gICAgICAgICAgICBfY3JjID0gZGF0YS5yZWFkVUludDMyTEUoQ29uc3RhbnRzLkNFTkNSQyk7XG4gICAgICAgICAgICAvLyBjb21wcmVzc2VkIHNpemVcbiAgICAgICAgICAgIF9jb21wcmVzc2VkU2l6ZSA9IGRhdGEucmVhZFVJbnQzMkxFKENvbnN0YW50cy5DRU5TSVopO1xuICAgICAgICAgICAgLy8gdW5jb21wcmVzc2VkIHNpemVcbiAgICAgICAgICAgIF9zaXplID0gZGF0YS5yZWFkVUludDMyTEUoQ29uc3RhbnRzLkNFTkxFTik7XG4gICAgICAgICAgICAvLyBmaWxlbmFtZSBsZW5ndGhcbiAgICAgICAgICAgIF9mbmFtZUxlbiA9IGRhdGEucmVhZFVJbnQxNkxFKENvbnN0YW50cy5DRU5OQU0pO1xuICAgICAgICAgICAgLy8gZXh0cmEgZmllbGQgbGVuZ3RoXG4gICAgICAgICAgICBfZXh0cmFMZW4gPSBkYXRhLnJlYWRVSW50MTZMRShDb25zdGFudHMuQ0VORVhUKTtcbiAgICAgICAgICAgIC8vIGZpbGUgY29tbWVudCBsZW5ndGhcbiAgICAgICAgICAgIF9jb21MZW4gPSBkYXRhLnJlYWRVSW50MTZMRShDb25zdGFudHMuQ0VOQ09NKTtcbiAgICAgICAgICAgIC8vIHZvbHVtZSBudW1iZXIgc3RhcnRcbiAgICAgICAgICAgIF9kaXNrU3RhcnQgPSBkYXRhLnJlYWRVSW50MTZMRShDb25zdGFudHMuQ0VORFNLKTtcbiAgICAgICAgICAgIC8vIGludGVybmFsIGZpbGUgYXR0cmlidXRlc1xuICAgICAgICAgICAgX2luYXR0ciA9IGRhdGEucmVhZFVJbnQxNkxFKENvbnN0YW50cy5DRU5BVFQpO1xuICAgICAgICAgICAgLy8gZXh0ZXJuYWwgZmlsZSBhdHRyaWJ1dGVzXG4gICAgICAgICAgICBfYXR0ciA9IGRhdGEucmVhZFVJbnQzMkxFKENvbnN0YW50cy5DRU5BVFgpO1xuICAgICAgICAgICAgLy8gTE9DIGhlYWRlciBvZmZzZXRcbiAgICAgICAgICAgIF9vZmZzZXQgPSBkYXRhLnJlYWRVSW50MzJMRShDb25zdGFudHMuQ0VOT0ZGKTtcbiAgICAgICAgfSxcblxuICAgICAgICBsb2NhbEhlYWRlclRvQmluYXJ5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBMT0MgaGVhZGVyIHNpemUgKDMwIGJ5dGVzKVxuICAgICAgICAgICAgdmFyIGRhdGEgPSBCdWZmZXIuYWxsb2MoQ29uc3RhbnRzLkxPQ0hEUik7XG4gICAgICAgICAgICAvLyBcIlBLXFwwMDNcXDAwNFwiXG4gICAgICAgICAgICBkYXRhLndyaXRlVUludDMyTEUoQ29uc3RhbnRzLkxPQ1NJRywgMCk7XG4gICAgICAgICAgICAvLyB2ZXJzaW9uIG5lZWRlZCB0byBleHRyYWN0XG4gICAgICAgICAgICBkYXRhLndyaXRlVUludDE2TEUoX3ZlcnNpb24sIENvbnN0YW50cy5MT0NWRVIpO1xuICAgICAgICAgICAgLy8gZ2VuZXJhbCBwdXJwb3NlIGJpdCBmbGFnXG4gICAgICAgICAgICBkYXRhLndyaXRlVUludDE2TEUoX2ZsYWdzLCBDb25zdGFudHMuTE9DRkxHKTtcbiAgICAgICAgICAgIC8vIGNvbXByZXNzaW9uIG1ldGhvZFxuICAgICAgICAgICAgZGF0YS53cml0ZVVJbnQxNkxFKF9tZXRob2QsIENvbnN0YW50cy5MT0NIT1cpO1xuICAgICAgICAgICAgLy8gbW9kaWZpY2F0aW9uIHRpbWUgKDIgYnl0ZXMgdGltZSwgMiBieXRlcyBkYXRlKVxuICAgICAgICAgICAgZGF0YS53cml0ZVVJbnQzMkxFKF90aW1lLCBDb25zdGFudHMuTE9DVElNKTtcbiAgICAgICAgICAgIC8vIHVuY29tcHJlc3NlZCBmaWxlIGNyYy0zMiB2YWx1ZVxuICAgICAgICAgICAgZGF0YS53cml0ZVVJbnQzMkxFKF9jcmMsIENvbnN0YW50cy5MT0NDUkMpO1xuICAgICAgICAgICAgLy8gY29tcHJlc3NlZCBzaXplXG4gICAgICAgICAgICBkYXRhLndyaXRlVUludDMyTEUoX2NvbXByZXNzZWRTaXplLCBDb25zdGFudHMuTE9DU0laKTtcbiAgICAgICAgICAgIC8vIHVuY29tcHJlc3NlZCBzaXplXG4gICAgICAgICAgICBkYXRhLndyaXRlVUludDMyTEUoX3NpemUsIENvbnN0YW50cy5MT0NMRU4pO1xuICAgICAgICAgICAgLy8gZmlsZW5hbWUgbGVuZ3RoXG4gICAgICAgICAgICBkYXRhLndyaXRlVUludDE2TEUoX2ZuYW1lTGVuLCBDb25zdGFudHMuTE9DTkFNKTtcbiAgICAgICAgICAgIC8vIGV4dHJhIGZpZWxkIGxlbmd0aFxuICAgICAgICAgICAgZGF0YS53cml0ZVVJbnQxNkxFKF9sb2NhbEhlYWRlci5leHRyYUxlbiwgQ29uc3RhbnRzLkxPQ0VYVCk7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSxcblxuICAgICAgICBjZW50cmFsSGVhZGVyVG9CaW5hcnk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIENFTiBoZWFkZXIgc2l6ZSAoNDYgYnl0ZXMpXG4gICAgICAgICAgICB2YXIgZGF0YSA9IEJ1ZmZlci5hbGxvYyhDb25zdGFudHMuQ0VOSERSICsgX2ZuYW1lTGVuICsgX2V4dHJhTGVuICsgX2NvbUxlbik7XG4gICAgICAgICAgICAvLyBcIlBLXFwwMDFcXDAwMlwiXG4gICAgICAgICAgICBkYXRhLndyaXRlVUludDMyTEUoQ29uc3RhbnRzLkNFTlNJRywgMCk7XG4gICAgICAgICAgICAvLyB2ZXJzaW9uIG1hZGUgYnlcbiAgICAgICAgICAgIGRhdGEud3JpdGVVSW50MTZMRShfdmVyTWFkZSwgQ29uc3RhbnRzLkNFTlZFTSk7XG4gICAgICAgICAgICAvLyB2ZXJzaW9uIG5lZWRlZCB0byBleHRyYWN0XG4gICAgICAgICAgICBkYXRhLndyaXRlVUludDE2TEUoX3ZlcnNpb24sIENvbnN0YW50cy5DRU5WRVIpO1xuICAgICAgICAgICAgLy8gZW5jcnlwdCwgZGVjcnlwdCBmbGFnc1xuICAgICAgICAgICAgZGF0YS53cml0ZVVJbnQxNkxFKF9mbGFncywgQ29uc3RhbnRzLkNFTkZMRyk7XG4gICAgICAgICAgICAvLyBjb21wcmVzc2lvbiBtZXRob2RcbiAgICAgICAgICAgIGRhdGEud3JpdGVVSW50MTZMRShfbWV0aG9kLCBDb25zdGFudHMuQ0VOSE9XKTtcbiAgICAgICAgICAgIC8vIG1vZGlmaWNhdGlvbiB0aW1lICgyIGJ5dGVzIHRpbWUsIDIgYnl0ZXMgZGF0ZSlcbiAgICAgICAgICAgIGRhdGEud3JpdGVVSW50MzJMRShfdGltZSwgQ29uc3RhbnRzLkNFTlRJTSk7XG4gICAgICAgICAgICAvLyB1bmNvbXByZXNzZWQgZmlsZSBjcmMtMzIgdmFsdWVcbiAgICAgICAgICAgIGRhdGEud3JpdGVVSW50MzJMRShfY3JjLCBDb25zdGFudHMuQ0VOQ1JDKTtcbiAgICAgICAgICAgIC8vIGNvbXByZXNzZWQgc2l6ZVxuICAgICAgICAgICAgZGF0YS53cml0ZVVJbnQzMkxFKF9jb21wcmVzc2VkU2l6ZSwgQ29uc3RhbnRzLkNFTlNJWik7XG4gICAgICAgICAgICAvLyB1bmNvbXByZXNzZWQgc2l6ZVxuICAgICAgICAgICAgZGF0YS53cml0ZVVJbnQzMkxFKF9zaXplLCBDb25zdGFudHMuQ0VOTEVOKTtcbiAgICAgICAgICAgIC8vIGZpbGVuYW1lIGxlbmd0aFxuICAgICAgICAgICAgZGF0YS53cml0ZVVJbnQxNkxFKF9mbmFtZUxlbiwgQ29uc3RhbnRzLkNFTk5BTSk7XG4gICAgICAgICAgICAvLyBleHRyYSBmaWVsZCBsZW5ndGhcbiAgICAgICAgICAgIGRhdGEud3JpdGVVSW50MTZMRShfZXh0cmFMZW4sIENvbnN0YW50cy5DRU5FWFQpO1xuICAgICAgICAgICAgLy8gZmlsZSBjb21tZW50IGxlbmd0aFxuICAgICAgICAgICAgZGF0YS53cml0ZVVJbnQxNkxFKF9jb21MZW4sIENvbnN0YW50cy5DRU5DT00pO1xuICAgICAgICAgICAgLy8gdm9sdW1lIG51bWJlciBzdGFydFxuICAgICAgICAgICAgZGF0YS53cml0ZVVJbnQxNkxFKF9kaXNrU3RhcnQsIENvbnN0YW50cy5DRU5EU0spO1xuICAgICAgICAgICAgLy8gaW50ZXJuYWwgZmlsZSBhdHRyaWJ1dGVzXG4gICAgICAgICAgICBkYXRhLndyaXRlVUludDE2TEUoX2luYXR0ciwgQ29uc3RhbnRzLkNFTkFUVCk7XG4gICAgICAgICAgICAvLyBleHRlcm5hbCBmaWxlIGF0dHJpYnV0ZXNcbiAgICAgICAgICAgIGRhdGEud3JpdGVVSW50MzJMRShfYXR0ciwgQ29uc3RhbnRzLkNFTkFUWCk7XG4gICAgICAgICAgICAvLyBMT0MgaGVhZGVyIG9mZnNldFxuICAgICAgICAgICAgZGF0YS53cml0ZVVJbnQzMkxFKF9vZmZzZXQsIENvbnN0YW50cy5DRU5PRkYpO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9KU09OOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zdCBieXRlcyA9IGZ1bmN0aW9uIChucikge1xuICAgICAgICAgICAgICAgIHJldHVybiBuciArIFwiIGJ5dGVzXCI7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1hZGU6IF92ZXJNYWRlLFxuICAgICAgICAgICAgICAgIHZlcnNpb246IF92ZXJzaW9uLFxuICAgICAgICAgICAgICAgIGZsYWdzOiBfZmxhZ3MsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBVdGlscy5tZXRob2RUb1N0cmluZyhfbWV0aG9kKSxcbiAgICAgICAgICAgICAgICB0aW1lOiB0aGlzLnRpbWUsXG4gICAgICAgICAgICAgICAgY3JjOiBcIjB4XCIgKyBfY3JjLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpLFxuICAgICAgICAgICAgICAgIGNvbXByZXNzZWRTaXplOiBieXRlcyhfY29tcHJlc3NlZFNpemUpLFxuICAgICAgICAgICAgICAgIHNpemU6IGJ5dGVzKF9zaXplKSxcbiAgICAgICAgICAgICAgICBmaWxlTmFtZUxlbmd0aDogYnl0ZXMoX2ZuYW1lTGVuKSxcbiAgICAgICAgICAgICAgICBleHRyYUxlbmd0aDogYnl0ZXMoX2V4dHJhTGVuKSxcbiAgICAgICAgICAgICAgICBjb21tZW50TGVuZ3RoOiBieXRlcyhfY29tTGVuKSxcbiAgICAgICAgICAgICAgICBkaXNrTnVtU3RhcnQ6IF9kaXNrU3RhcnQsXG4gICAgICAgICAgICAgICAgaW5BdHRyOiBfaW5hdHRyLFxuICAgICAgICAgICAgICAgIGF0dHI6IF9hdHRyLFxuICAgICAgICAgICAgICAgIG9mZnNldDogX29mZnNldCxcbiAgICAgICAgICAgICAgICBjZW50cmFsSGVhZGVyU2l6ZTogYnl0ZXMoQ29uc3RhbnRzLkNFTkhEUiArIF9mbmFtZUxlbiArIF9leHRyYUxlbiArIF9jb21MZW4pXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy50b0pTT04oKSwgbnVsbCwgXCJcXHRcIik7XG4gICAgICAgIH1cbiAgICB9O1xufTtcbiIsICJ2YXIgVXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbFwiKSxcbiAgICBDb25zdGFudHMgPSBVdGlscy5Db25zdGFudHM7XG5cbi8qIFRoZSBlbnRyaWVzIGluIHRoZSBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnkgKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm9sdW1lRW50cmllcyA9IDAsXG4gICAgICAgIF90b3RhbEVudHJpZXMgPSAwLFxuICAgICAgICBfc2l6ZSA9IDAsXG4gICAgICAgIF9vZmZzZXQgPSAwLFxuICAgICAgICBfY29tbWVudExlbmd0aCA9IDA7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBnZXQgZGlza0VudHJpZXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3ZvbHVtZUVudHJpZXM7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCBkaXNrRW50cmllcygvKk51bWJlciovIHZhbCkge1xuICAgICAgICAgICAgX3ZvbHVtZUVudHJpZXMgPSBfdG90YWxFbnRyaWVzID0gdmFsO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCB0b3RhbEVudHJpZXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RvdGFsRW50cmllcztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IHRvdGFsRW50cmllcygvKk51bWJlciovIHZhbCkge1xuICAgICAgICAgICAgX3RvdGFsRW50cmllcyA9IF92b2x1bWVFbnRyaWVzID0gdmFsO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBzaXplKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zaXplO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgc2l6ZSgvKk51bWJlciovIHZhbCkge1xuICAgICAgICAgICAgX3NpemUgPSB2YWw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IG9mZnNldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBfb2Zmc2V0O1xuICAgICAgICB9LFxuICAgICAgICBzZXQgb2Zmc2V0KC8qTnVtYmVyKi8gdmFsKSB7XG4gICAgICAgICAgICBfb2Zmc2V0ID0gdmFsO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBjb21tZW50TGVuZ3RoKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9jb21tZW50TGVuZ3RoO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgY29tbWVudExlbmd0aCgvKk51bWJlciovIHZhbCkge1xuICAgICAgICAgICAgX2NvbW1lbnRMZW5ndGggPSB2YWw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IG1haW5IZWFkZXJTaXplKCkge1xuICAgICAgICAgICAgcmV0dXJuIENvbnN0YW50cy5FTkRIRFIgKyBfY29tbWVudExlbmd0aDtcbiAgICAgICAgfSxcblxuICAgICAgICBsb2FkRnJvbUJpbmFyeTogZnVuY3Rpb24gKC8qQnVmZmVyKi8gZGF0YSkge1xuICAgICAgICAgICAgLy8gZGF0YSBzaG91bGQgYmUgMjIgYnl0ZXMgYW5kIHN0YXJ0IHdpdGggXCJQSyAwNSAwNlwiXG4gICAgICAgICAgICAvLyBvciBiZSA1NisgYnl0ZXMgYW5kIHN0YXJ0IHdpdGggXCJQSyAwNiAwNlwiIGZvciBaaXA2NFxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIChkYXRhLmxlbmd0aCAhPT0gQ29uc3RhbnRzLkVOREhEUiB8fCBkYXRhLnJlYWRVSW50MzJMRSgwKSAhPT0gQ29uc3RhbnRzLkVORFNJRykgJiZcbiAgICAgICAgICAgICAgICAoZGF0YS5sZW5ndGggPCBDb25zdGFudHMuWklQNjRIRFIgfHwgZGF0YS5yZWFkVUludDMyTEUoMCkgIT09IENvbnN0YW50cy5aSVA2NFNJRylcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHRocm93IFV0aWxzLkVycm9ycy5JTlZBTElEX0VORCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGF0YS5yZWFkVUludDMyTEUoMCkgPT09IENvbnN0YW50cy5FTkRTSUcpIHtcbiAgICAgICAgICAgICAgICAvLyBudW1iZXIgb2YgZW50cmllcyBvbiB0aGlzIHZvbHVtZVxuICAgICAgICAgICAgICAgIF92b2x1bWVFbnRyaWVzID0gZGF0YS5yZWFkVUludDE2TEUoQ29uc3RhbnRzLkVORFNVQik7XG4gICAgICAgICAgICAgICAgLy8gdG90YWwgbnVtYmVyIG9mIGVudHJpZXNcbiAgICAgICAgICAgICAgICBfdG90YWxFbnRyaWVzID0gZGF0YS5yZWFkVUludDE2TEUoQ29uc3RhbnRzLkVORFRPVCk7XG4gICAgICAgICAgICAgICAgLy8gY2VudHJhbCBkaXJlY3Rvcnkgc2l6ZSBpbiBieXRlc1xuICAgICAgICAgICAgICAgIF9zaXplID0gZGF0YS5yZWFkVUludDMyTEUoQ29uc3RhbnRzLkVORFNJWik7XG4gICAgICAgICAgICAgICAgLy8gb2Zmc2V0IG9mIGZpcnN0IENFTiBoZWFkZXJcbiAgICAgICAgICAgICAgICBfb2Zmc2V0ID0gZGF0YS5yZWFkVUludDMyTEUoQ29uc3RhbnRzLkVORE9GRik7XG4gICAgICAgICAgICAgICAgLy8gemlwIGZpbGUgY29tbWVudCBsZW5ndGhcbiAgICAgICAgICAgICAgICBfY29tbWVudExlbmd0aCA9IGRhdGEucmVhZFVJbnQxNkxFKENvbnN0YW50cy5FTkRDT00pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBudW1iZXIgb2YgZW50cmllcyBvbiB0aGlzIHZvbHVtZVxuICAgICAgICAgICAgICAgIF92b2x1bWVFbnRyaWVzID0gVXRpbHMucmVhZEJpZ1VJbnQ2NExFKGRhdGEsIENvbnN0YW50cy5aSVA2NFNVQik7XG4gICAgICAgICAgICAgICAgLy8gdG90YWwgbnVtYmVyIG9mIGVudHJpZXNcbiAgICAgICAgICAgICAgICBfdG90YWxFbnRyaWVzID0gVXRpbHMucmVhZEJpZ1VJbnQ2NExFKGRhdGEsIENvbnN0YW50cy5aSVA2NFRPVCk7XG4gICAgICAgICAgICAgICAgLy8gY2VudHJhbCBkaXJlY3Rvcnkgc2l6ZSBpbiBieXRlc1xuICAgICAgICAgICAgICAgIF9zaXplID0gVXRpbHMucmVhZEJpZ1VJbnQ2NExFKGRhdGEsIENvbnN0YW50cy5aSVA2NFNJWkUpO1xuICAgICAgICAgICAgICAgIC8vIG9mZnNldCBvZiBmaXJzdCBDRU4gaGVhZGVyXG4gICAgICAgICAgICAgICAgX29mZnNldCA9IFV0aWxzLnJlYWRCaWdVSW50NjRMRShkYXRhLCBDb25zdGFudHMuWklQNjRPRkYpO1xuXG4gICAgICAgICAgICAgICAgX2NvbW1lbnRMZW5ndGggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHRvQmluYXJ5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYiA9IEJ1ZmZlci5hbGxvYyhDb25zdGFudHMuRU5ESERSICsgX2NvbW1lbnRMZW5ndGgpO1xuICAgICAgICAgICAgLy8gXCJQSyAwNSAwNlwiIHNpZ25hdHVyZVxuICAgICAgICAgICAgYi53cml0ZVVJbnQzMkxFKENvbnN0YW50cy5FTkRTSUcsIDApO1xuICAgICAgICAgICAgYi53cml0ZVVJbnQzMkxFKDAsIDQpO1xuICAgICAgICAgICAgLy8gbnVtYmVyIG9mIGVudHJpZXMgb24gdGhpcyB2b2x1bWVcbiAgICAgICAgICAgIGIud3JpdGVVSW50MTZMRShfdm9sdW1lRW50cmllcywgQ29uc3RhbnRzLkVORFNVQik7XG4gICAgICAgICAgICAvLyB0b3RhbCBudW1iZXIgb2YgZW50cmllc1xuICAgICAgICAgICAgYi53cml0ZVVJbnQxNkxFKF90b3RhbEVudHJpZXMsIENvbnN0YW50cy5FTkRUT1QpO1xuICAgICAgICAgICAgLy8gY2VudHJhbCBkaXJlY3Rvcnkgc2l6ZSBpbiBieXRlc1xuICAgICAgICAgICAgYi53cml0ZVVJbnQzMkxFKF9zaXplLCBDb25zdGFudHMuRU5EU0laKTtcbiAgICAgICAgICAgIC8vIG9mZnNldCBvZiBmaXJzdCBDRU4gaGVhZGVyXG4gICAgICAgICAgICBiLndyaXRlVUludDMyTEUoX29mZnNldCwgQ29uc3RhbnRzLkVORE9GRik7XG4gICAgICAgICAgICAvLyB6aXAgZmlsZSBjb21tZW50IGxlbmd0aFxuICAgICAgICAgICAgYi53cml0ZVVJbnQxNkxFKF9jb21tZW50TGVuZ3RoLCBDb25zdGFudHMuRU5EQ09NKTtcbiAgICAgICAgICAgIC8vIGZpbGwgY29tbWVudCBtZW1vcnkgd2l0aCBzcGFjZXMgc28gbm8gZ2FyYmFnZSBpcyBsZWZ0IHRoZXJlXG4gICAgICAgICAgICBiLmZpbGwoXCIgXCIsIENvbnN0YW50cy5FTkRIRFIpO1xuXG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgfSxcblxuICAgICAgICB0b0pTT046IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIGNyZWF0ZXMgMHgwMDAwIHN0eWxlIG91dHB1dFxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gZnVuY3Rpb24gKG5yLCBsZW4pIHtcbiAgICAgICAgICAgICAgICBsZXQgb2ZmcyA9IG5yLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChvZmZzLmxlbmd0aCA8IGxlbikgb2ZmcyA9IFwiMFwiICsgb2ZmcztcbiAgICAgICAgICAgICAgICByZXR1cm4gXCIweFwiICsgb2ZmcztcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGlza0VudHJpZXM6IF92b2x1bWVFbnRyaWVzLFxuICAgICAgICAgICAgICAgIHRvdGFsRW50cmllczogX3RvdGFsRW50cmllcyxcbiAgICAgICAgICAgICAgICBzaXplOiBfc2l6ZSArIFwiIGJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBvZmZzZXQoX29mZnNldCwgNCksXG4gICAgICAgICAgICAgICAgY29tbWVudExlbmd0aDogX2NvbW1lbnRMZW5ndGhcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvSlNPTigpLCBudWxsLCBcIlxcdFwiKTtcbiAgICAgICAgfVxuICAgIH07XG59O1xuLy8gTWlzc3BlbGxlZFxuIiwgImV4cG9ydHMuRW50cnlIZWFkZXIgPSByZXF1aXJlKFwiLi9lbnRyeUhlYWRlclwiKTtcbmV4cG9ydHMuTWFpbkhlYWRlciA9IHJlcXVpcmUoXCIuL21haW5IZWFkZXJcIik7XG4iLCAibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoLypCdWZmZXIqLyBpbmJ1Zikge1xuICAgIHZhciB6bGliID0gcmVxdWlyZShcInpsaWJcIik7XG5cbiAgICB2YXIgb3B0cyA9IHsgY2h1bmtTaXplOiAocGFyc2VJbnQoaW5idWYubGVuZ3RoIC8gMTAyNCkgKyAxKSAqIDEwMjQgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGRlZmxhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB6bGliLmRlZmxhdGVSYXdTeW5jKGluYnVmLCBvcHRzKTtcbiAgICAgICAgfSxcblxuICAgICAgICBkZWZsYXRlQXN5bmM6IGZ1bmN0aW9uICgvKkZ1bmN0aW9uKi8gY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciB0bXAgPSB6bGliLmNyZWF0ZURlZmxhdGVSYXcob3B0cyksXG4gICAgICAgICAgICAgICAgcGFydHMgPSBbXSxcbiAgICAgICAgICAgICAgICB0b3RhbCA9IDA7XG4gICAgICAgICAgICB0bXAub24oXCJkYXRhXCIsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgcGFydHMucHVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICB0b3RhbCArPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdG1wLm9uKFwiZW5kXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jKHRvdGFsKSxcbiAgICAgICAgICAgICAgICAgICAgd3JpdHRlbiA9IDA7XG4gICAgICAgICAgICAgICAgYnVmLmZpbGwoMCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFydCA9IHBhcnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICBwYXJ0LmNvcHkoYnVmLCB3cml0dGVuKTtcbiAgICAgICAgICAgICAgICAgICAgd3JpdHRlbiArPSBwYXJ0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soYnVmKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdG1wLmVuZChpbmJ1Zik7XG4gICAgICAgIH1cbiAgICB9O1xufTtcbiIsICJjb25zdCB2ZXJzaW9uID0gKyhwcm9jZXNzLnZlcnNpb25zID8gcHJvY2Vzcy52ZXJzaW9ucy5ub2RlIDogXCJcIikuc3BsaXQoXCIuXCIpWzBdIHx8IDA7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKC8qQnVmZmVyKi8gaW5idWYsIC8qbnVtYmVyKi8gZXhwZWN0ZWRMZW5ndGgpIHtcbiAgICB2YXIgemxpYiA9IHJlcXVpcmUoXCJ6bGliXCIpO1xuICAgIGNvbnN0IG9wdGlvbiA9IHZlcnNpb24gPj0gMTUgJiYgZXhwZWN0ZWRMZW5ndGggPiAwID8geyBtYXhPdXRwdXRMZW5ndGg6IGV4cGVjdGVkTGVuZ3RoIH0gOiB7fTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGluZmxhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB6bGliLmluZmxhdGVSYXdTeW5jKGluYnVmLCBvcHRpb24pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluZmxhdGVBc3luYzogZnVuY3Rpb24gKC8qRnVuY3Rpb24qLyBjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIHRtcCA9IHpsaWIuY3JlYXRlSW5mbGF0ZVJhdyhvcHRpb24pLFxuICAgICAgICAgICAgICAgIHBhcnRzID0gW10sXG4gICAgICAgICAgICAgICAgdG90YWwgPSAwO1xuICAgICAgICAgICAgdG1wLm9uKFwiZGF0YVwiLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goZGF0YSk7XG4gICAgICAgICAgICAgICAgdG90YWwgKz0gZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRtcC5vbihcImVuZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvYyh0b3RhbCksXG4gICAgICAgICAgICAgICAgICAgIHdyaXR0ZW4gPSAwO1xuICAgICAgICAgICAgICAgIGJ1Zi5maWxsKDApO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgcGFydC5jb3B5KGJ1Ziwgd3JpdHRlbik7XG4gICAgICAgICAgICAgICAgICAgIHdyaXR0ZW4gKz0gcGFydC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKGJ1Zik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRtcC5lbmQoaW5idWYpO1xuICAgICAgICB9XG4gICAgfTtcbn07XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIG5vZGUgY3J5cHQsIHdlIHVzZSBpdCBmb3IgZ2VuZXJhdGUgc2FsdFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuY29uc3QgeyByYW5kb21GaWxsU3luYyB9ID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbmNvbnN0IEVycm9ycyA9IHJlcXVpcmUoXCIuLi91dGlsL2Vycm9yc1wiKTtcblxuLy8gZ2VuZXJhdGUgQ1JDMzIgbG9va3VwIHRhYmxlXG5jb25zdCBjcmN0YWJsZSA9IG5ldyBVaW50MzJBcnJheSgyNTYpLm1hcCgodCwgY3JjKSA9PiB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCA4OyBqKyspIHtcbiAgICAgICAgaWYgKDAgIT09IChjcmMgJiAxKSkge1xuICAgICAgICAgICAgY3JjID0gKGNyYyA+Pj4gMSkgXiAweGVkYjg4MzIwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3JjID4+Pj0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3JjID4+PiAwO1xufSk7XG5cbi8vIEMtc3R5bGUgdUludDMyIE11bHRpcGx5IChkaXNjYXJkcyBoaWdoZXIgYml0cywgd2hlbiBKUyBtdWx0aXBseSBkaXNjYXJkcyBsb3dlciBiaXRzKVxuY29uc3QgdU11bCA9IChhLCBiKSA9PiBNYXRoLmltdWwoYSwgYikgPj4+IDA7XG5cbi8vIGNyYzMyIGJ5dGUgc2luZ2xlIHVwZGF0ZSAoYWN0dWFsbHkgc2FtZSBmdW5jdGlvbiBpcyBwYXJ0IG9mIHV0aWxzLmNyYzMyIGZ1bmN0aW9uIDopIClcbmNvbnN0IGNyYzMydXBkYXRlID0gKHBDcmMzMiwgYnZhbCkgPT4ge1xuICAgIHJldHVybiBjcmN0YWJsZVsocENyYzMyIF4gYnZhbCkgJiAweGZmXSBeIChwQ3JjMzIgPj4+IDgpO1xufTtcblxuLy8gZnVuY3Rpb24gZm9yIGdlbmVyYXRpbmcgc2FsdCBmb3IgZW5jcnl0aW9uIGhlYWRlclxuY29uc3QgZ2VuU2FsdCA9ICgpID0+IHtcbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmFuZG9tRmlsbFN5bmMpIHtcbiAgICAgICAgcmV0dXJuIHJhbmRvbUZpbGxTeW5jKEJ1ZmZlci5hbGxvYygxMikpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGZhbGxiYWNrIGlmIGZ1bmN0aW9uIGlzIG5vdCBkZWZpbmVkXG4gICAgICAgIHJldHVybiBnZW5TYWx0Lm5vZGUoKTtcbiAgICB9XG59O1xuXG4vLyBzYWx0IGdlbmVyYXRpb24gd2l0aCBub2RlIHJhbmRvbSBmdW5jdGlvbiAobWFpbmx5IGFzIGZhbGxiYWNrKVxuZ2VuU2FsdC5ub2RlID0gKCkgPT4ge1xuICAgIGNvbnN0IHNhbHQgPSBCdWZmZXIuYWxsb2MoMTIpO1xuICAgIGNvbnN0IGxlbiA9IHNhbHQubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHNhbHRbaV0gPSAoTWF0aC5yYW5kb20oKSAqIDI1NikgJiAweGZmO1xuICAgIHJldHVybiBzYWx0O1xufTtcblxuLy8gZ2VuZXJhbCBjb25maWdcbmNvbnN0IGNvbmZpZyA9IHtcbiAgICBnZW5TYWx0XG59O1xuXG4vLyBDbGFzcyBJbml0a2V5cyBoYW5kbGVzIHNhbWUgYmFzaWMgb3BzIHdpdGgga2V5c1xuZnVuY3Rpb24gSW5pdGtleXMocHcpIHtcbiAgICBjb25zdCBwYXNzID0gQnVmZmVyLmlzQnVmZmVyKHB3KSA/IHB3IDogQnVmZmVyLmZyb20ocHcpO1xuICAgIHRoaXMua2V5cyA9IG5ldyBVaW50MzJBcnJheShbMHgxMjM0NTY3OCwgMHgyMzQ1Njc4OSwgMHgzNDU2Nzg5MF0pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFzcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLnVwZGF0ZUtleXMocGFzc1tpXSk7XG4gICAgfVxufVxuXG5Jbml0a2V5cy5wcm90b3R5cGUudXBkYXRlS2V5cyA9IGZ1bmN0aW9uIChieXRlVmFsdWUpIHtcbiAgICBjb25zdCBrZXlzID0gdGhpcy5rZXlzO1xuICAgIGtleXNbMF0gPSBjcmMzMnVwZGF0ZShrZXlzWzBdLCBieXRlVmFsdWUpO1xuICAgIGtleXNbMV0gKz0ga2V5c1swXSAmIDB4ZmY7XG4gICAga2V5c1sxXSA9IHVNdWwoa2V5c1sxXSwgMTM0Nzc1ODEzKSArIDE7XG4gICAga2V5c1syXSA9IGNyYzMydXBkYXRlKGtleXNbMl0sIGtleXNbMV0gPj4+IDI0KTtcbiAgICByZXR1cm4gYnl0ZVZhbHVlO1xufTtcblxuSW5pdGtleXMucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgayA9ICh0aGlzLmtleXNbMl0gfCAyKSA+Pj4gMDsgLy8ga2V5XG4gICAgcmV0dXJuICh1TXVsKGssIGsgXiAxKSA+PiA4KSAmIDB4ZmY7IC8vIGRlY29kZVxufTtcblxuZnVuY3Rpb24gbWFrZV9kZWNyeXB0ZXIoLypCdWZmZXIqLyBwd2QpIHtcbiAgICAvLyAxLiBTdGFnZSBpbml0aWFsaXplIGtleVxuICAgIGNvbnN0IGtleXMgPSBuZXcgSW5pdGtleXMocHdkKTtcblxuICAgIC8vIHJldHVybiBkZWNyeXB0ZXIgZnVuY3Rpb25cbiAgICByZXR1cm4gZnVuY3Rpb24gKC8qQnVmZmVyKi8gZGF0YSkge1xuICAgICAgICAvLyByZXN1bHQgLSB3ZSBjcmVhdGUgbmV3IEJ1ZmZlciBmb3IgcmVzdWx0c1xuICAgICAgICBjb25zdCByZXN1bHQgPSBCdWZmZXIuYWxsb2MoZGF0YS5sZW5ndGgpO1xuICAgICAgICBsZXQgcG9zID0gMDtcbiAgICAgICAgLy8gcHJvY2VzcyBpbnB1dCBkYXRhXG4gICAgICAgIGZvciAobGV0IGMgb2YgZGF0YSkge1xuICAgICAgICAgICAgLy9jIF49IGtleXMubmV4dCgpO1xuICAgICAgICAgICAgLy9yZXN1bHRbcG9zKytdID0gYzsgLy8gZGVjb2RlICYgU2F2ZSBWYWx1ZVxuICAgICAgICAgICAgcmVzdWx0W3BvcysrXSA9IGtleXMudXBkYXRlS2V5cyhjIF4ga2V5cy5uZXh0KCkpOyAvLyB1cGRhdGUga2V5cyB3aXRoIGRlY29kZWQgYnl0ZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gbWFrZV9lbmNyeXB0ZXIoLypCdWZmZXIqLyBwd2QpIHtcbiAgICAvLyAxLiBTdGFnZSBpbml0aWFsaXplIGtleVxuICAgIGNvbnN0IGtleXMgPSBuZXcgSW5pdGtleXMocHdkKTtcblxuICAgIC8vIHJldHVybiBlbmNyeXB0aW5nIGZ1bmN0aW9uLCByZXN1bHQgYW5kIHBvcyBpcyBoZXJlIHNvIHdlIGRvbnQgaGF2ZSB0byBtZXJnZSBidWZmZXJzIGxhdGVyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgvKkJ1ZmZlciovIGRhdGEsIC8qQnVmZmVyKi8gcmVzdWx0LCAvKiBOdW1iZXIgKi8gcG9zID0gMCkge1xuICAgICAgICAvLyByZXN1bHQgLSB3ZSBjcmVhdGUgbmV3IEJ1ZmZlciBmb3IgcmVzdWx0c1xuICAgICAgICBpZiAoIXJlc3VsdCkgcmVzdWx0ID0gQnVmZmVyLmFsbG9jKGRhdGEubGVuZ3RoKTtcbiAgICAgICAgLy8gcHJvY2VzcyBpbnB1dCBkYXRhXG4gICAgICAgIGZvciAobGV0IGMgb2YgZGF0YSkge1xuICAgICAgICAgICAgY29uc3QgayA9IGtleXMubmV4dCgpOyAvLyBzYXZlIGtleSBieXRlXG4gICAgICAgICAgICByZXN1bHRbcG9zKytdID0gYyBeIGs7IC8vIHNhdmUgdmFsXG4gICAgICAgICAgICBrZXlzLnVwZGF0ZUtleXMoYyk7IC8vIHVwZGF0ZSBrZXlzIHdpdGggZGVjb2RlZCBieXRlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBkZWNyeXB0KC8qQnVmZmVyKi8gZGF0YSwgLypPYmplY3QqLyBoZWFkZXIsIC8qU3RyaW5nLCBCdWZmZXIqLyBwd2QpIHtcbiAgICBpZiAoIWRhdGEgfHwgIUJ1ZmZlci5pc0J1ZmZlcihkYXRhKSB8fCBkYXRhLmxlbmd0aCA8IDEyKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMCk7XG4gICAgfVxuXG4gICAgLy8gMS4gV2UgSW5pdGlhbGl6ZSBhbmQgZ2VuZXJhdGUgZGVjcnlwdGluZyBmdW5jdGlvblxuICAgIGNvbnN0IGRlY3J5cHRlciA9IG1ha2VfZGVjcnlwdGVyKHB3ZCk7XG5cbiAgICAvLyAyLiBkZWNyeXB0IHNhbHQgd2hhdCBpcyBhbHdheXMgMTIgYnl0ZXMgYW5kIGlzIGEgcGFydCBvZiBmaWxlIGNvbnRlbnRcbiAgICBjb25zdCBzYWx0ID0gZGVjcnlwdGVyKGRhdGEuc2xpY2UoMCwgMTIpKTtcblxuICAgIC8vIGlmIGJpdCAzICgweDA4KSBvZiB0aGUgZ2VuZXJhbC1wdXJwb3NlIGZsYWdzIGZpZWxkIGlzIHNldCwgY2hlY2sgc2FsdFsxMV0gd2l0aCB0aGUgaGlnaCBieXRlIG9mIHRoZSBoZWFkZXIgdGltZVxuICAgIC8vIDIgYnl0ZSBkYXRhIGJsb2NrIChhcyBwZXIgSW5mby1aaXAgc3BlYyksIG90aGVyd2lzZSBjaGVjayB3aXRoIHRoZSBoaWdoIGJ5dGUgb2YgdGhlIGhlYWRlciBlbnRyeVxuICAgIGNvbnN0IHZlcmlmeUJ5dGUgPSAoaGVhZGVyLmZsYWdzICYgMHg4KSA9PT0gMHg4ID8gaGVhZGVyLnRpbWVIaWdoQnl0ZSA6IGhlYWRlci5jcmMgPj4+IDI0O1xuXG4gICAgLy8zLiBkb2VzIHBhc3N3b3JkIG1lZXQgZXhwZWN0YXRpb25zXG4gICAgaWYgKHNhbHRbMTFdICE9PSB2ZXJpZnlCeXRlKSB7XG4gICAgICAgIHRocm93IEVycm9ycy5XUk9OR19QQVNTV09SRCgpO1xuICAgIH1cblxuICAgIC8vIDQuIGRlY29kZSBjb250ZW50XG4gICAgcmV0dXJuIGRlY3J5cHRlcihkYXRhLnNsaWNlKDEyKSk7XG59XG5cbi8vIGxldHMgYWRkIHdheSB0byBwb3B1bGF0ZSBzYWx0LCBOT1QgUkVDT01NRU5ERUQgZm9yIHByb2R1Y3Rpb24gYnV0IG1heWJlIHVzZWZ1bCBmb3IgdGVzdGluZyBnZW5lcmFsIGZ1bmN0aW9uYWxpdHlcbmZ1bmN0aW9uIF9zYWx0ZXIoZGF0YSkge1xuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoZGF0YSkgJiYgZGF0YS5sZW5ndGggPj0gMTIpIHtcbiAgICAgICAgLy8gYmUgYXdhcmUgLSBjdXJyZW50bHkgc2FsdGluZyBidWZmZXIgZGF0YSBpcyBtb2RpZmllZFxuICAgICAgICBjb25maWcuZ2VuU2FsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhLnNsaWNlKDAsIDEyKTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGRhdGEgPT09IFwibm9kZVwiKSB7XG4gICAgICAgIC8vIHRlc3Qgc2FsdCBnZW5lcmF0aW9uIHdpdGggbm9kZSByYW5kb20gZnVuY3Rpb25cbiAgICAgICAgY29uZmlnLmdlblNhbHQgPSBnZW5TYWx0Lm5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaWYgdmFsdWUgaXMgbm90IGFjY2VwdGFibGUgY29uZmlnIGdldHMgcmVzZXQuXG4gICAgICAgIGNvbmZpZy5nZW5TYWx0ID0gZ2VuU2FsdDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGVuY3J5cHQoLypCdWZmZXIqLyBkYXRhLCAvKk9iamVjdCovIGhlYWRlciwgLypTdHJpbmcsIEJ1ZmZlciovIHB3ZCwgLypCb29sZWFuKi8gb2xkbGlrZSA9IGZhbHNlKSB7XG4gICAgLy8gMS4gdGVzdCBkYXRhIGlmIGRhdGEgaXMgbm90IEJ1ZmZlciB3ZSBtYWtlIGJ1ZmZlciBmcm9tIGl0XG4gICAgaWYgKGRhdGEgPT0gbnVsbCkgZGF0YSA9IEJ1ZmZlci5hbGxvYygwKTtcbiAgICAvLyBpZiBkYXRhIGlzIG5vdCBidWZmZXIgYmUgbWFrZSBidWZmZXIgZnJvbSBpdFxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSBkYXRhID0gQnVmZmVyLmZyb20oZGF0YS50b1N0cmluZygpKTtcblxuICAgIC8vIDIuIFdlIEluaXRpYWxpemUgYW5kIGdlbmVyYXRlIGVuY3J5cHRpbmcgZnVuY3Rpb25cbiAgICBjb25zdCBlbmNyeXB0ZXIgPSBtYWtlX2VuY3J5cHRlcihwd2QpO1xuXG4gICAgLy8gMy4gZ2VuZXJhdGUgc2FsdCAoMTItYnl0ZXMgb2YgcmFuZG9tIGRhdGEpXG4gICAgY29uc3Qgc2FsdCA9IGNvbmZpZy5nZW5TYWx0KCk7XG4gICAgc2FsdFsxMV0gPSAoaGVhZGVyLmNyYyA+Pj4gMjQpICYgMHhmZjtcblxuICAgIC8vIG9sZCBpbXBsZW1lbnRhdGlvbnMgKGJlZm9yZSBQS1ppcCAyLjA0ZykgdXNlZCB0d28gYnl0ZSBjaGVja1xuICAgIGlmIChvbGRsaWtlKSBzYWx0WzEwXSA9IChoZWFkZXIuY3JjID4+PiAxNikgJiAweGZmO1xuXG4gICAgLy8gNC4gY3JlYXRlIG91dHB1dFxuICAgIGNvbnN0IHJlc3VsdCA9IEJ1ZmZlci5hbGxvYyhkYXRhLmxlbmd0aCArIDEyKTtcbiAgICBlbmNyeXB0ZXIoc2FsdCwgcmVzdWx0KTtcblxuICAgIC8vIGZpbmFsbHkgZW5jb2RlIGNvbnRlbnRcbiAgICByZXR1cm4gZW5jcnlwdGVyKGRhdGEsIHJlc3VsdCwgMTIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgZGVjcnlwdCwgZW5jcnlwdCwgX3NhbHRlciB9O1xuIiwgImV4cG9ydHMuRGVmbGF0ZXIgPSByZXF1aXJlKFwiLi9kZWZsYXRlclwiKTtcbmV4cG9ydHMuSW5mbGF0ZXIgPSByZXF1aXJlKFwiLi9pbmZsYXRlclwiKTtcbmV4cG9ydHMuWmlwQ3J5cHRvID0gcmVxdWlyZShcIi4vemlwY3J5cHRvXCIpO1xuIiwgInZhciBVdGlscyA9IHJlcXVpcmUoXCIuL3V0aWxcIiksXG4gICAgSGVhZGVycyA9IHJlcXVpcmUoXCIuL2hlYWRlcnNcIiksXG4gICAgQ29uc3RhbnRzID0gVXRpbHMuQ29uc3RhbnRzLFxuICAgIE1ldGhvZHMgPSByZXF1aXJlKFwiLi9tZXRob2RzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgvKiogb2JqZWN0ICovIG9wdGlvbnMsIC8qQnVmZmVyKi8gaW5wdXQpIHtcbiAgICB2YXIgX2NlbnRyYWxIZWFkZXIgPSBuZXcgSGVhZGVycy5FbnRyeUhlYWRlcigpLFxuICAgICAgICBfZW50cnlOYW1lID0gQnVmZmVyLmFsbG9jKDApLFxuICAgICAgICBfY29tbWVudCA9IEJ1ZmZlci5hbGxvYygwKSxcbiAgICAgICAgX2lzRGlyZWN0b3J5ID0gZmFsc2UsXG4gICAgICAgIHVuY29tcHJlc3NlZERhdGEgPSBudWxsLFxuICAgICAgICBfZXh0cmEgPSBCdWZmZXIuYWxsb2MoMCksXG4gICAgICAgIF9leHRyYWxvY2FsID0gQnVmZmVyLmFsbG9jKDApLFxuICAgICAgICBfZWZzID0gdHJ1ZTtcblxuICAgIC8vIGFzc2lnbiBvcHRpb25zXG4gICAgY29uc3Qgb3B0cyA9IG9wdGlvbnM7XG5cbiAgICBjb25zdCBkZWNvZGVyID0gdHlwZW9mIG9wdHMuZGVjb2RlciA9PT0gXCJvYmplY3RcIiA/IG9wdHMuZGVjb2RlciA6IFV0aWxzLmRlY29kZXI7XG4gICAgX2VmcyA9IGRlY29kZXIuaGFzT3duUHJvcGVydHkoXCJlZnNcIikgPyBkZWNvZGVyLmVmcyA6IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gZ2V0Q29tcHJlc3NlZERhdGFGcm9tWmlwKCkge1xuICAgICAgICAvL2lmICghaW5wdXQgfHwgIUJ1ZmZlci5pc0J1ZmZlcihpbnB1dCkpIHtcbiAgICAgICAgaWYgKCFpbnB1dCB8fCAhKGlucHV0IGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgICAgICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMCk7XG4gICAgICAgIH1cbiAgICAgICAgX2V4dHJhbG9jYWwgPSBfY2VudHJhbEhlYWRlci5sb2FkTG9jYWxIZWFkZXJGcm9tQmluYXJ5KGlucHV0KTtcbiAgICAgICAgcmV0dXJuIGlucHV0LnNsaWNlKF9jZW50cmFsSGVhZGVyLnJlYWxEYXRhT2Zmc2V0LCBfY2VudHJhbEhlYWRlci5yZWFsRGF0YU9mZnNldCArIF9jZW50cmFsSGVhZGVyLmNvbXByZXNzZWRTaXplKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmMzMk9LKGRhdGEpIHtcbiAgICAgICAgLy8gaWYgYml0IDMgKDB4MDgpIG9mIHRoZSBnZW5lcmFsLXB1cnBvc2UgZmxhZ3MgZmllbGQgaXMgc2V0LCB0aGVuIHRoZSBDUkMtMzIgYW5kIGZpbGUgc2l6ZXMgYXJlIG5vdCBrbm93biB3aGVuIHRoZSBsb2NhbCBoZWFkZXIgaXMgd3JpdHRlblxuICAgICAgICBpZiAoIV9jZW50cmFsSGVhZGVyLmZsYWdzX2Rlc2MpIHtcbiAgICAgICAgICAgIGlmIChVdGlscy5jcmMzMihkYXRhKSAhPT0gX2NlbnRyYWxIZWFkZXIubG9jYWxIZWFkZXIuY3JjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IHt9O1xuICAgICAgICAgICAgY29uc3QgZGF0YUVuZE9mZnNldCA9IF9jZW50cmFsSGVhZGVyLnJlYWxEYXRhT2Zmc2V0ICsgX2NlbnRyYWxIZWFkZXIuY29tcHJlc3NlZFNpemU7XG4gICAgICAgICAgICAvLyBubyBkZXNjcmlwdG9yIGFmdGVyIGNvbXByZXNzZWQgZGF0YSwgaW5zdGVhZCBuZXcgbG9jYWwgaGVhZGVyXG4gICAgICAgICAgICBpZiAoaW5wdXQucmVhZFVJbnQzMkxFKGRhdGFFbmRPZmZzZXQpID09IENvbnN0YW50cy5MT0NTSUcgfHwgaW5wdXQucmVhZFVJbnQzMkxFKGRhdGFFbmRPZmZzZXQpID09IENvbnN0YW50cy5DRU5TSUcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBVdGlscy5FcnJvcnMuREVTQ1JJUFRPUl9OT1RfRVhJU1QoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZ2V0IGRlY3JpcHRvciBkYXRhXG4gICAgICAgICAgICBpZiAoaW5wdXQucmVhZFVJbnQzMkxFKGRhdGFFbmRPZmZzZXQpID09IENvbnN0YW50cy5FWFRTSUcpIHtcbiAgICAgICAgICAgICAgICAvLyBkZXNjcmlwdG9yIHdpdGggc2lnbmF0dXJlXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRvci5jcmMgPSBpbnB1dC5yZWFkVUludDMyTEUoZGF0YUVuZE9mZnNldCArIENvbnN0YW50cy5FWFRDUkMpO1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IuY29tcHJlc3NlZFNpemUgPSBpbnB1dC5yZWFkVUludDMyTEUoZGF0YUVuZE9mZnNldCArIENvbnN0YW50cy5FWFRTSVopO1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3Iuc2l6ZSA9IGlucHV0LnJlYWRVSW50MzJMRShkYXRhRW5kT2Zmc2V0ICsgQ29uc3RhbnRzLkVYVExFTik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0LnJlYWRVSW50MTZMRShkYXRhRW5kT2Zmc2V0ICsgMTIpID09PSAweDRiNTApIHtcbiAgICAgICAgICAgICAgICAvLyBkZXNjcmlwdG9yIHdpdGhvdXQgc2lnbmF0dXJlICh3ZSBjaGVjayBpcyBuZXcgaGVhZGVyIHN0YXJ0aW5nIHdoZXJlIHdlIGV4cGVjdClcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLmNyYyA9IGlucHV0LnJlYWRVSW50MzJMRShkYXRhRW5kT2Zmc2V0ICsgQ29uc3RhbnRzLkVYVENSQyAtIDQpO1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IuY29tcHJlc3NlZFNpemUgPSBpbnB1dC5yZWFkVUludDMyTEUoZGF0YUVuZE9mZnNldCArIENvbnN0YW50cy5FWFRTSVogLSA0KTtcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLnNpemUgPSBpbnB1dC5yZWFkVUludDMyTEUoZGF0YUVuZE9mZnNldCArIENvbnN0YW50cy5FWFRMRU4gLSA0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgVXRpbHMuRXJyb3JzLkRFU0NSSVBUT1JfVU5LTk9XTigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjaGVjayBkYXRhIGludGVncml0eVxuICAgICAgICAgICAgaWYgKGRlc2NyaXB0b3IuY29tcHJlc3NlZFNpemUgIT09IF9jZW50cmFsSGVhZGVyLmNvbXByZXNzZWRTaXplIHx8IGRlc2NyaXB0b3Iuc2l6ZSAhPT0gX2NlbnRyYWxIZWFkZXIuc2l6ZSB8fCBkZXNjcmlwdG9yLmNyYyAhPT0gX2NlbnRyYWxIZWFkZXIuY3JjKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgVXRpbHMuRXJyb3JzLkRFU0NSSVBUT1JfRkFVTFRZKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoVXRpbHMuY3JjMzIoZGF0YSkgIT09IGRlc2NyaXB0b3IuY3JjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBAVE9ETzogemlwNjQgYml0IGRlc2NyaXB0b3IgZmllbGRzXG4gICAgICAgICAgICAvLyBpZiBiaXQgMyBpcyBzZXQgYW5kIGFueSB2YWx1ZSBpbiBsb2NhbCBoZWFkZXIgXCJ6aXA2NCBFeHRlbmRlZCBpbmZvcm1hdGlvblwiIGV4dHJhIGZpZWxkIGFyZSBzZXQgMCAocGxhY2UgaG9sZGVyKVxuICAgICAgICAgICAgLy8gdGhlbiA2NC1iaXQgZGVzY3JpcHRvciBmb3JtYXQgaXMgdXNlZCBpbnN0ZWFkIG9mIDMyLWJpdFxuICAgICAgICAgICAgLy8gY2VudHJhbCBoZWFkZXIgLSBcInppcDY0IEV4dGVuZGVkIGluZm9ybWF0aW9uXCIgZXh0cmEgZmllbGQgc2hvdWxkIHN0b3JlIHJlYWwgdmFsdWVzIGFuZCBub3QgcGxhY2UgaG9sZGVyc1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlY29tcHJlc3MoLypCb29sZWFuKi8gYXN5bmMsIC8qRnVuY3Rpb24qLyBjYWxsYmFjaywgLypTdHJpbmcsIEJ1ZmZlciovIHBhc3MpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgYXN5bmMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHBhc3MgPSBhc3luYztcbiAgICAgICAgICAgIGFzeW5jID0gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfaXNEaXJlY3RvcnkpIHtcbiAgICAgICAgICAgIGlmIChhc3luYyAmJiBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKEJ1ZmZlci5hbGxvYygwKSwgVXRpbHMuRXJyb3JzLkRJUkVDVE9SWV9DT05URU5UX0VSUk9SKCkpOyAvL3NpIGFkZGVkIGVycm9yLlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb21wcmVzc2VkRGF0YSA9IGdldENvbXByZXNzZWREYXRhRnJvbVppcCgpO1xuXG4gICAgICAgIGlmIChjb21wcmVzc2VkRGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIC8vIEZpbGUgaXMgZW1wdHksIG5vdGhpbmcgdG8gZGVjb21wcmVzcy5cbiAgICAgICAgICAgIGlmIChhc3luYyAmJiBjYWxsYmFjaykgY2FsbGJhY2soY29tcHJlc3NlZERhdGEpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbXByZXNzZWREYXRhO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9jZW50cmFsSGVhZGVyLmVuY3J5cHRlZCkge1xuICAgICAgICAgICAgaWYgKFwic3RyaW5nXCIgIT09IHR5cGVvZiBwYXNzICYmICFCdWZmZXIuaXNCdWZmZXIocGFzcykpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBVdGlscy5FcnJvcnMuSU5WQUxJRF9QQVNTX1BBUkFNKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21wcmVzc2VkRGF0YSA9IE1ldGhvZHMuWmlwQ3J5cHRvLmRlY3J5cHQoY29tcHJlc3NlZERhdGEsIF9jZW50cmFsSGVhZGVyLCBwYXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkYXRhID0gQnVmZmVyLmFsbG9jKF9jZW50cmFsSGVhZGVyLnNpemUpO1xuXG4gICAgICAgIHN3aXRjaCAoX2NlbnRyYWxIZWFkZXIubWV0aG9kKSB7XG4gICAgICAgICAgICBjYXNlIFV0aWxzLkNvbnN0YW50cy5TVE9SRUQ6XG4gICAgICAgICAgICAgICAgY29tcHJlc3NlZERhdGEuY29weShkYXRhKTtcbiAgICAgICAgICAgICAgICBpZiAoIWNyYzMyT0soZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFzeW5jICYmIGNhbGxiYWNrKSBjYWxsYmFjayhkYXRhLCBVdGlscy5FcnJvcnMuQkFEX0NSQygpKTsgLy9zaSBhZGRlZCBlcnJvclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBVdGlscy5FcnJvcnMuQkFEX0NSQygpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vc2kgYWRkZWQgb3RoZXJ3aXNlIGRpZCBub3Qgc2VlbSB0byByZXR1cm4gZGF0YS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFzeW5jICYmIGNhbGxiYWNrKSBjYWxsYmFjayhkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBVdGlscy5Db25zdGFudHMuREVGTEFURUQ6XG4gICAgICAgICAgICAgICAgdmFyIGluZmxhdGVyID0gbmV3IE1ldGhvZHMuSW5mbGF0ZXIoY29tcHJlc3NlZERhdGEsIF9jZW50cmFsSGVhZGVyLnNpemUpO1xuICAgICAgICAgICAgICAgIGlmICghYXN5bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gaW5mbGF0ZXIuaW5mbGF0ZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmNvcHkoZGF0YSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY3JjMzJPSyhkYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgVXRpbHMuRXJyb3JzLkJBRF9DUkMoYFwiJHtkZWNvZGVyLmRlY29kZShfZW50cnlOYW1lKX1cImApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluZmxhdGVyLmluZmxhdGVBc3luYyhmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuY29weShyZXN1bHQsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjcmMzMk9LKHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2socmVzdWx0LCBVdGlscy5FcnJvcnMuQkFEX0NSQygpKTsgLy9zaSBhZGRlZCBlcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmIChhc3luYyAmJiBjYWxsYmFjaykgY2FsbGJhY2soQnVmZmVyLmFsbG9jKDApLCBVdGlscy5FcnJvcnMuVU5LTk9XTl9NRVRIT0QoKSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgVXRpbHMuRXJyb3JzLlVOS05PV05fTUVUSE9EKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wcmVzcygvKkJvb2xlYW4qLyBhc3luYywgLypGdW5jdGlvbiovIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICgoIXVuY29tcHJlc3NlZERhdGEgfHwgIXVuY29tcHJlc3NlZERhdGEubGVuZ3RoKSAmJiBCdWZmZXIuaXNCdWZmZXIoaW5wdXQpKSB7XG4gICAgICAgICAgICAvLyBubyBkYXRhIHNldCBvciB0aGUgZGF0YSB3YXNuJ3QgY2hhbmdlZCB0byByZXF1aXJlIHJlY29tcHJlc3Npb25cbiAgICAgICAgICAgIGlmIChhc3luYyAmJiBjYWxsYmFjaykgY2FsbGJhY2soZ2V0Q29tcHJlc3NlZERhdGFGcm9tWmlwKCkpO1xuICAgICAgICAgICAgcmV0dXJuIGdldENvbXByZXNzZWREYXRhRnJvbVppcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVuY29tcHJlc3NlZERhdGEubGVuZ3RoICYmICFfaXNEaXJlY3RvcnkpIHtcbiAgICAgICAgICAgIHZhciBjb21wcmVzc2VkRGF0YTtcbiAgICAgICAgICAgIC8vIExvY2FsIGZpbGUgaGVhZGVyXG4gICAgICAgICAgICBzd2l0Y2ggKF9jZW50cmFsSGVhZGVyLm1ldGhvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgVXRpbHMuQ29uc3RhbnRzLlNUT1JFRDpcbiAgICAgICAgICAgICAgICAgICAgX2NlbnRyYWxIZWFkZXIuY29tcHJlc3NlZFNpemUgPSBfY2VudHJhbEhlYWRlci5zaXplO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbXByZXNzZWREYXRhID0gQnVmZmVyLmFsbG9jKHVuY29tcHJlc3NlZERhdGEubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgdW5jb21wcmVzc2VkRGF0YS5jb3B5KGNvbXByZXNzZWREYXRhKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYXN5bmMgJiYgY2FsbGJhY2spIGNhbGxiYWNrKGNvbXByZXNzZWREYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbXByZXNzZWREYXRhO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY2FzZSBVdGlscy5Db25zdGFudHMuREVGTEFURUQ6XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWZsYXRlciA9IG5ldyBNZXRob2RzLkRlZmxhdGVyKHVuY29tcHJlc3NlZERhdGEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWFzeW5jKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVmbGF0ZWQgPSBkZWZsYXRlci5kZWZsYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY2VudHJhbEhlYWRlci5jb21wcmVzc2VkU2l6ZSA9IGRlZmxhdGVkLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWZsYXRlZDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmxhdGVyLmRlZmxhdGVBc3luYyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXByZXNzZWREYXRhID0gQnVmZmVyLmFsbG9jKGRhdGEubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2VudHJhbEhlYWRlci5jb21wcmVzc2VkU2l6ZSA9IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuY29weShjb21wcmVzc2VkRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soY29tcHJlc3NlZERhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGVmbGF0ZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChhc3luYyAmJiBjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2soQnVmZmVyLmFsbG9jKDApKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWFkVUludDY0TEUoYnVmZmVyLCBvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIChidWZmZXIucmVhZFVJbnQzMkxFKG9mZnNldCArIDQpIDw8IDQpICsgYnVmZmVyLnJlYWRVSW50MzJMRShvZmZzZXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlRXh0cmEoZGF0YSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgICAgICB2YXIgc2lnbmF0dXJlLCBzaXplLCBwYXJ0O1xuICAgICAgICAgICAgd2hpbGUgKG9mZnNldCArIDQgPCBkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHNpZ25hdHVyZSA9IGRhdGEucmVhZFVJbnQxNkxFKG9mZnNldCk7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDI7XG4gICAgICAgICAgICAgICAgc2l6ZSA9IGRhdGEucmVhZFVJbnQxNkxFKG9mZnNldCk7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDI7XG4gICAgICAgICAgICAgICAgcGFydCA9IGRhdGEuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBzaXplKTtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gc2l6ZTtcbiAgICAgICAgICAgICAgICBpZiAoQ29uc3RhbnRzLklEX1pJUDY0ID09PSBzaWduYXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VaaXA2NEV4dGVuZGVkSW5mb3JtYXRpb24ocGFydCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgVXRpbHMuRXJyb3JzLkVYVFJBX0ZJRUxEX1BBUlNFX0VSUk9SKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL092ZXJyaWRlIGhlYWRlciBmaWVsZCB2YWx1ZXMgd2l0aCB2YWx1ZXMgZnJvbSB0aGUgWklQNjQgZXh0cmEgZmllbGRcbiAgICBmdW5jdGlvbiBwYXJzZVppcDY0RXh0ZW5kZWRJbmZvcm1hdGlvbihkYXRhKSB7XG4gICAgICAgIHZhciBzaXplLCBjb21wcmVzc2VkU2l6ZSwgb2Zmc2V0LCBkaXNrTnVtU3RhcnQ7XG5cbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID49IENvbnN0YW50cy5FRl9aSVA2NF9TQ09NUCkge1xuICAgICAgICAgICAgc2l6ZSA9IHJlYWRVSW50NjRMRShkYXRhLCBDb25zdGFudHMuRUZfWklQNjRfU1VOQ09NUCk7XG4gICAgICAgICAgICBpZiAoX2NlbnRyYWxIZWFkZXIuc2l6ZSA9PT0gQ29uc3RhbnRzLkVGX1pJUDY0X09SXzMyKSB7XG4gICAgICAgICAgICAgICAgX2NlbnRyYWxIZWFkZXIuc2l6ZSA9IHNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID49IENvbnN0YW50cy5FRl9aSVA2NF9SSE8pIHtcbiAgICAgICAgICAgIGNvbXByZXNzZWRTaXplID0gcmVhZFVJbnQ2NExFKGRhdGEsIENvbnN0YW50cy5FRl9aSVA2NF9TQ09NUCk7XG4gICAgICAgICAgICBpZiAoX2NlbnRyYWxIZWFkZXIuY29tcHJlc3NlZFNpemUgPT09IENvbnN0YW50cy5FRl9aSVA2NF9PUl8zMikge1xuICAgICAgICAgICAgICAgIF9jZW50cmFsSGVhZGVyLmNvbXByZXNzZWRTaXplID0gY29tcHJlc3NlZFNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID49IENvbnN0YW50cy5FRl9aSVA2NF9EU04pIHtcbiAgICAgICAgICAgIG9mZnNldCA9IHJlYWRVSW50NjRMRShkYXRhLCBDb25zdGFudHMuRUZfWklQNjRfUkhPKTtcbiAgICAgICAgICAgIGlmIChfY2VudHJhbEhlYWRlci5vZmZzZXQgPT09IENvbnN0YW50cy5FRl9aSVA2NF9PUl8zMikge1xuICAgICAgICAgICAgICAgIF9jZW50cmFsSGVhZGVyLm9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPj0gQ29uc3RhbnRzLkVGX1pJUDY0X0RTTiArIDQpIHtcbiAgICAgICAgICAgIGRpc2tOdW1TdGFydCA9IGRhdGEucmVhZFVJbnQzMkxFKENvbnN0YW50cy5FRl9aSVA2NF9EU04pO1xuICAgICAgICAgICAgaWYgKF9jZW50cmFsSGVhZGVyLmRpc2tOdW1TdGFydCA9PT0gQ29uc3RhbnRzLkVGX1pJUDY0X09SXzE2KSB7XG4gICAgICAgICAgICAgICAgX2NlbnRyYWxIZWFkZXIuZGlza051bVN0YXJ0ID0gZGlza051bVN0YXJ0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0IGVudHJ5TmFtZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWNvZGVyLmRlY29kZShfZW50cnlOYW1lKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IHJhd0VudHJ5TmFtZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBfZW50cnlOYW1lO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgZW50cnlOYW1lKHZhbCkge1xuICAgICAgICAgICAgX2VudHJ5TmFtZSA9IFV0aWxzLnRvQnVmZmVyKHZhbCwgZGVjb2Rlci5lbmNvZGUpO1xuICAgICAgICAgICAgdmFyIGxhc3RDaGFyID0gX2VudHJ5TmFtZVtfZW50cnlOYW1lLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgX2lzRGlyZWN0b3J5ID0gbGFzdENoYXIgPT09IDQ3IHx8IGxhc3RDaGFyID09PSA5MjtcbiAgICAgICAgICAgIF9jZW50cmFsSGVhZGVyLmZpbGVOYW1lTGVuZ3RoID0gX2VudHJ5TmFtZS5sZW5ndGg7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IGVmcygpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgX2VmcyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9lZnModGhpcy5lbnRyeU5hbWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2VmcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgZXh0cmEoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2V4dHJhO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgZXh0cmEodmFsKSB7XG4gICAgICAgICAgICBfZXh0cmEgPSB2YWw7XG4gICAgICAgICAgICBfY2VudHJhbEhlYWRlci5leHRyYUxlbmd0aCA9IHZhbC5sZW5ndGg7XG4gICAgICAgICAgICBwYXJzZUV4dHJhKHZhbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IGNvbW1lbnQoKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVjb2Rlci5kZWNvZGUoX2NvbW1lbnQpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgY29tbWVudCh2YWwpIHtcbiAgICAgICAgICAgIF9jb21tZW50ID0gVXRpbHMudG9CdWZmZXIodmFsLCBkZWNvZGVyLmVuY29kZSk7XG4gICAgICAgICAgICBfY2VudHJhbEhlYWRlci5jb21tZW50TGVuZ3RoID0gX2NvbW1lbnQubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKF9jb21tZW50Lmxlbmd0aCA+IDB4ZmZmZikgdGhyb3cgVXRpbHMuRXJyb3JzLkNPTU1FTlRfVE9PX0xPTkcoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgICAgIHZhciBuID0gZGVjb2Rlci5kZWNvZGUoX2VudHJ5TmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gX2lzRGlyZWN0b3J5XG4gICAgICAgICAgICAgICAgPyBuXG4gICAgICAgICAgICAgICAgICAgICAgLnN1YnN0cihuLmxlbmd0aCAtIDEpXG4gICAgICAgICAgICAgICAgICAgICAgLnNwbGl0KFwiL1wiKVxuICAgICAgICAgICAgICAgICAgICAgIC5wb3AoKVxuICAgICAgICAgICAgICAgIDogbi5zcGxpdChcIi9cIikucG9wKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBpc0RpcmVjdG9yeSgpIHtcbiAgICAgICAgICAgIHJldHVybiBfaXNEaXJlY3Rvcnk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0Q29tcHJlc3NlZERhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBjb21wcmVzcyhmYWxzZSwgbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0Q29tcHJlc3NlZERhdGFBc3luYzogZnVuY3Rpb24gKC8qRnVuY3Rpb24qLyBjYWxsYmFjaykge1xuICAgICAgICAgICAgY29tcHJlc3ModHJ1ZSwgY2FsbGJhY2spO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldERhdGE6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdW5jb21wcmVzc2VkRGF0YSA9IFV0aWxzLnRvQnVmZmVyKHZhbHVlLCBVdGlscy5kZWNvZGVyLmVuY29kZSk7XG4gICAgICAgICAgICBpZiAoIV9pc0RpcmVjdG9yeSAmJiB1bmNvbXByZXNzZWREYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIF9jZW50cmFsSGVhZGVyLnNpemUgPSB1bmNvbXByZXNzZWREYXRhLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBfY2VudHJhbEhlYWRlci5tZXRob2QgPSBVdGlscy5Db25zdGFudHMuREVGTEFURUQ7XG4gICAgICAgICAgICAgICAgX2NlbnRyYWxIZWFkZXIuY3JjID0gVXRpbHMuY3JjMzIodmFsdWUpO1xuICAgICAgICAgICAgICAgIF9jZW50cmFsSGVhZGVyLmNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBmb2xkZXJzIGFuZCBibGFuayBmaWxlcyBzaG91bGQgYmUgc3RvcmVkXG4gICAgICAgICAgICAgICAgX2NlbnRyYWxIZWFkZXIubWV0aG9kID0gVXRpbHMuQ29uc3RhbnRzLlNUT1JFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBnZXREYXRhOiBmdW5jdGlvbiAocGFzcykge1xuICAgICAgICAgICAgaWYgKF9jZW50cmFsSGVhZGVyLmNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5jb21wcmVzc2VkRGF0YTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlY29tcHJlc3MoZmFsc2UsIG51bGwsIHBhc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGdldERhdGFBc3luYzogZnVuY3Rpb24gKC8qRnVuY3Rpb24qLyBjYWxsYmFjaywgcGFzcykge1xuICAgICAgICAgICAgaWYgKF9jZW50cmFsSGVhZGVyLmNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh1bmNvbXByZXNzZWREYXRhKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVjb21wcmVzcyh0cnVlLCBjYWxsYmFjaywgcGFzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0IGF0dHIoYXR0cikge1xuICAgICAgICAgICAgX2NlbnRyYWxIZWFkZXIuYXR0ciA9IGF0dHI7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBhdHRyKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9jZW50cmFsSGVhZGVyLmF0dHI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0IGhlYWRlcigvKkJ1ZmZlciovIGRhdGEpIHtcbiAgICAgICAgICAgIF9jZW50cmFsSGVhZGVyLmxvYWRGcm9tQmluYXJ5KGRhdGEpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBoZWFkZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2NlbnRyYWxIZWFkZXI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcGFja0NlbnRyYWxIZWFkZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF9jZW50cmFsSGVhZGVyLmZsYWdzX2VmcyA9IHRoaXMuZWZzO1xuICAgICAgICAgICAgX2NlbnRyYWxIZWFkZXIuZXh0cmFMZW5ndGggPSBfZXh0cmEubGVuZ3RoO1xuICAgICAgICAgICAgLy8gMS4gY3JlYXRlIGhlYWRlciAoYnVmZmVyKVxuICAgICAgICAgICAgdmFyIGhlYWRlciA9IF9jZW50cmFsSGVhZGVyLmNlbnRyYWxIZWFkZXJUb0JpbmFyeSgpO1xuICAgICAgICAgICAgdmFyIGFkZHBvcyA9IFV0aWxzLkNvbnN0YW50cy5DRU5IRFI7XG4gICAgICAgICAgICAvLyAyLiBhZGQgZmlsZSBuYW1lXG4gICAgICAgICAgICBfZW50cnlOYW1lLmNvcHkoaGVhZGVyLCBhZGRwb3MpO1xuICAgICAgICAgICAgYWRkcG9zICs9IF9lbnRyeU5hbWUubGVuZ3RoO1xuICAgICAgICAgICAgLy8gMy4gYWRkIGV4dHJhIGRhdGFcbiAgICAgICAgICAgIF9leHRyYS5jb3B5KGhlYWRlciwgYWRkcG9zKTtcbiAgICAgICAgICAgIGFkZHBvcyArPSBfY2VudHJhbEhlYWRlci5leHRyYUxlbmd0aDtcbiAgICAgICAgICAgIC8vIDQuIGFkZCBmaWxlIGNvbW1lbnRcbiAgICAgICAgICAgIF9jb21tZW50LmNvcHkoaGVhZGVyLCBhZGRwb3MpO1xuICAgICAgICAgICAgcmV0dXJuIGhlYWRlcjtcbiAgICAgICAgfSxcblxuICAgICAgICBwYWNrTG9jYWxIZWFkZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxldCBhZGRwb3MgPSAwO1xuICAgICAgICAgICAgX2NlbnRyYWxIZWFkZXIuZmxhZ3NfZWZzID0gdGhpcy5lZnM7XG4gICAgICAgICAgICBfY2VudHJhbEhlYWRlci5leHRyYUxvY2FsTGVuZ3RoID0gX2V4dHJhbG9jYWwubGVuZ3RoO1xuICAgICAgICAgICAgLy8gMS4gY29uc3RydWN0IGxvY2FsIGhlYWRlciBCdWZmZXJcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsSGVhZGVyQnVmID0gX2NlbnRyYWxIZWFkZXIubG9jYWxIZWFkZXJUb0JpbmFyeSgpO1xuICAgICAgICAgICAgLy8gMi4gbG9jYWxIZWFkZXIgLSBjcmF0ZSBoZWFkZXIgYnVmZmVyXG4gICAgICAgICAgICBjb25zdCBsb2NhbEhlYWRlciA9IEJ1ZmZlci5hbGxvYyhsb2NhbEhlYWRlckJ1Zi5sZW5ndGggKyBfZW50cnlOYW1lLmxlbmd0aCArIF9jZW50cmFsSGVhZGVyLmV4dHJhTG9jYWxMZW5ndGgpO1xuICAgICAgICAgICAgLy8gMi4xIGFkZCBsb2NhbGhlYWRlclxuICAgICAgICAgICAgbG9jYWxIZWFkZXJCdWYuY29weShsb2NhbEhlYWRlciwgYWRkcG9zKTtcbiAgICAgICAgICAgIGFkZHBvcyArPSBsb2NhbEhlYWRlckJ1Zi5sZW5ndGg7XG4gICAgICAgICAgICAvLyAyLjIgYWRkIGZpbGUgbmFtZVxuICAgICAgICAgICAgX2VudHJ5TmFtZS5jb3B5KGxvY2FsSGVhZGVyLCBhZGRwb3MpO1xuICAgICAgICAgICAgYWRkcG9zICs9IF9lbnRyeU5hbWUubGVuZ3RoO1xuICAgICAgICAgICAgLy8gMi4zIGFkZCBleHRyYSBmaWVsZFxuICAgICAgICAgICAgX2V4dHJhbG9jYWwuY29weShsb2NhbEhlYWRlciwgYWRkcG9zKTtcbiAgICAgICAgICAgIGFkZHBvcyArPSBfZXh0cmFsb2NhbC5sZW5ndGg7XG5cbiAgICAgICAgICAgIHJldHVybiBsb2NhbEhlYWRlcjtcbiAgICAgICAgfSxcblxuICAgICAgICB0b0pTT046IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gZnVuY3Rpb24gKG5yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiPFwiICsgKChuciAmJiBuci5sZW5ndGggKyBcIiBieXRlcyBidWZmZXJcIikgfHwgXCJudWxsXCIpICsgXCI+XCI7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVudHJ5TmFtZTogdGhpcy5lbnRyeU5hbWUsXG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgICAgIGNvbW1lbnQ6IHRoaXMuY29tbWVudCxcbiAgICAgICAgICAgICAgICBpc0RpcmVjdG9yeTogdGhpcy5pc0RpcmVjdG9yeSxcbiAgICAgICAgICAgICAgICBoZWFkZXI6IF9jZW50cmFsSGVhZGVyLnRvSlNPTigpLFxuICAgICAgICAgICAgICAgIGNvbXByZXNzZWREYXRhOiBieXRlcyhpbnB1dCksXG4gICAgICAgICAgICAgICAgZGF0YTogYnl0ZXModW5jb21wcmVzc2VkRGF0YSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvSlNPTigpLCBudWxsLCBcIlxcdFwiKTtcbiAgICAgICAgfVxuICAgIH07XG59O1xuIiwgImNvbnN0IFppcEVudHJ5ID0gcmVxdWlyZShcIi4vemlwRW50cnlcIik7XG5jb25zdCBIZWFkZXJzID0gcmVxdWlyZShcIi4vaGVhZGVyc1wiKTtcbmNvbnN0IFV0aWxzID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoLypCdWZmZXJ8bnVsbCovIGluQnVmZmVyLCAvKiogb2JqZWN0ICovIG9wdGlvbnMpIHtcbiAgICB2YXIgZW50cnlMaXN0ID0gW10sXG4gICAgICAgIGVudHJ5VGFibGUgPSB7fSxcbiAgICAgICAgX2NvbW1lbnQgPSBCdWZmZXIuYWxsb2MoMCksXG4gICAgICAgIG1haW5IZWFkZXIgPSBuZXcgSGVhZGVycy5NYWluSGVhZGVyKCksXG4gICAgICAgIGxvYWRlZEVudHJpZXMgPSBmYWxzZTtcbiAgICB2YXIgcGFzc3dvcmQgPSBudWxsO1xuICAgIGNvbnN0IHRlbXBvcmFyeSA9IG5ldyBTZXQoKTtcblxuICAgIC8vIGFzc2lnbiBvcHRpb25zXG4gICAgY29uc3Qgb3B0cyA9IG9wdGlvbnM7XG5cbiAgICBjb25zdCB7IG5vU29ydCwgZGVjb2RlciB9ID0gb3B0cztcblxuICAgIGlmIChpbkJ1ZmZlcikge1xuICAgICAgICAvLyBpcyBhIG1lbW9yeSBidWZmZXJcbiAgICAgICAgcmVhZE1haW5IZWFkZXIob3B0cy5yZWFkRW50cmllcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbm9uZS4gaXMgYSBuZXcgZmlsZVxuICAgICAgICBsb2FkZWRFbnRyaWVzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlVGVtcG9yYXJ5Rm9sZGVycygpIHtcbiAgICAgICAgY29uc3QgZm9sZGVyc0xpc3QgPSBuZXcgU2V0KCk7XG5cbiAgICAgICAgLy8gTWFrZSBsaXN0IG9mIGFsbCBmb2xkZXJzIGluIGZpbGVcbiAgICAgICAgZm9yIChjb25zdCBlbGVtIG9mIE9iamVjdC5rZXlzKGVudHJ5VGFibGUpKSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50cyA9IGVsZW0uc3BsaXQoXCIvXCIpO1xuICAgICAgICAgICAgZWxlbWVudHMucG9wKCk7IC8vIGZpbGVuYW1lXG4gICAgICAgICAgICBpZiAoIWVsZW1lbnRzLmxlbmd0aCkgY29udGludWU7IC8vIG5vIGZvbGRlcnNcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdWIgPSBlbGVtZW50cy5zbGljZSgwLCBpICsgMSkuam9pbihcIi9cIikgKyBcIi9cIjtcbiAgICAgICAgICAgICAgICBmb2xkZXJzTGlzdC5hZGQoc3ViKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNyZWF0ZSBtaXNzaW5nIGZvbGRlcnMgYXMgdGVtcG9yYXJ5XG4gICAgICAgIGZvciAoY29uc3QgZWxlbSBvZiBmb2xkZXJzTGlzdCkge1xuICAgICAgICAgICAgaWYgKCEoZWxlbSBpbiBlbnRyeVRhYmxlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBmb2xkZXIgPSBuZXcgWmlwRW50cnkob3B0cyk7XG4gICAgICAgICAgICAgICAgdGVtcGZvbGRlci5lbnRyeU5hbWUgPSBlbGVtO1xuICAgICAgICAgICAgICAgIHRlbXBmb2xkZXIuYXR0ciA9IDB4MTA7XG4gICAgICAgICAgICAgICAgdGVtcGZvbGRlci50ZW1wb3JhcnkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGVudHJ5TGlzdC5wdXNoKHRlbXBmb2xkZXIpO1xuICAgICAgICAgICAgICAgIGVudHJ5VGFibGVbdGVtcGZvbGRlci5lbnRyeU5hbWVdID0gdGVtcGZvbGRlcjtcbiAgICAgICAgICAgICAgICB0ZW1wb3JhcnkuYWRkKHRlbXBmb2xkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVhZEVudHJpZXMoKSB7XG4gICAgICAgIGxvYWRlZEVudHJpZXMgPSB0cnVlO1xuICAgICAgICBlbnRyeVRhYmxlID0ge307XG4gICAgICAgIGlmIChtYWluSGVhZGVyLmRpc2tFbnRyaWVzID4gKGluQnVmZmVyLmxlbmd0aCAtIG1haW5IZWFkZXIub2Zmc2V0KSAvIFV0aWxzLkNvbnN0YW50cy5DRU5IRFIpIHtcbiAgICAgICAgICAgIHRocm93IFV0aWxzLkVycm9ycy5ESVNLX0VOVFJZX1RPT19MQVJHRSgpO1xuICAgICAgICB9XG4gICAgICAgIGVudHJ5TGlzdCA9IG5ldyBBcnJheShtYWluSGVhZGVyLmRpc2tFbnRyaWVzKTsgLy8gdG90YWwgbnVtYmVyIG9mIGVudHJpZXNcbiAgICAgICAgdmFyIGluZGV4ID0gbWFpbkhlYWRlci5vZmZzZXQ7IC8vIG9mZnNldCBvZiBmaXJzdCBDRU4gaGVhZGVyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW50cnlMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdG1wID0gaW5kZXgsXG4gICAgICAgICAgICAgICAgZW50cnkgPSBuZXcgWmlwRW50cnkob3B0cywgaW5CdWZmZXIpO1xuICAgICAgICAgICAgZW50cnkuaGVhZGVyID0gaW5CdWZmZXIuc2xpY2UodG1wLCAodG1wICs9IFV0aWxzLkNvbnN0YW50cy5DRU5IRFIpKTtcblxuICAgICAgICAgICAgZW50cnkuZW50cnlOYW1lID0gaW5CdWZmZXIuc2xpY2UodG1wLCAodG1wICs9IGVudHJ5LmhlYWRlci5maWxlTmFtZUxlbmd0aCkpO1xuXG4gICAgICAgICAgICBpZiAoZW50cnkuaGVhZGVyLmV4dHJhTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZW50cnkuZXh0cmEgPSBpbkJ1ZmZlci5zbGljZSh0bXAsICh0bXAgKz0gZW50cnkuaGVhZGVyLmV4dHJhTGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChlbnRyeS5oZWFkZXIuY29tbWVudExlbmd0aCkgZW50cnkuY29tbWVudCA9IGluQnVmZmVyLnNsaWNlKHRtcCwgdG1wICsgZW50cnkuaGVhZGVyLmNvbW1lbnRMZW5ndGgpO1xuXG4gICAgICAgICAgICBpbmRleCArPSBlbnRyeS5oZWFkZXIuY2VudHJhbEhlYWRlclNpemU7XG5cbiAgICAgICAgICAgIGVudHJ5TGlzdFtpXSA9IGVudHJ5O1xuICAgICAgICAgICAgZW50cnlUYWJsZVtlbnRyeS5lbnRyeU5hbWVdID0gZW50cnk7XG4gICAgICAgIH1cbiAgICAgICAgdGVtcG9yYXJ5LmNsZWFyKCk7XG4gICAgICAgIG1ha2VUZW1wb3JhcnlGb2xkZXJzKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVhZE1haW5IZWFkZXIoLypCb29sZWFuKi8gcmVhZE5vdykge1xuICAgICAgICB2YXIgaSA9IGluQnVmZmVyLmxlbmd0aCAtIFV0aWxzLkNvbnN0YW50cy5FTkRIRFIsIC8vIEVORCBoZWFkZXIgc2l6ZVxuICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgoMCwgaSAtIDB4ZmZmZiksIC8vIDB4RkZGRiBpcyB0aGUgbWF4IHppcCBmaWxlIGNvbW1lbnQgbGVuZ3RoXG4gICAgICAgICAgICBuID0gbWF4LFxuICAgICAgICAgICAgZW5kU3RhcnQgPSBpbkJ1ZmZlci5sZW5ndGgsXG4gICAgICAgICAgICBlbmRPZmZzZXQgPSAtMSwgLy8gU3RhcnQgb2Zmc2V0IG9mIHRoZSBFTkQgaGVhZGVyXG4gICAgICAgICAgICBjb21tZW50RW5kID0gMDtcblxuICAgICAgICAvLyBvcHRpb24gdG8gc2VhcmNoIGhlYWRlciBmb3JtIGVudGlyZSBmaWxlXG4gICAgICAgIGNvbnN0IHRyYWlsaW5nU3BhY2UgPSB0eXBlb2Ygb3B0cy50cmFpbGluZ1NwYWNlID09PSBcImJvb2xlYW5cIiA/IG9wdHMudHJhaWxpbmdTcGFjZSA6IGZhbHNlO1xuICAgICAgICBpZiAodHJhaWxpbmdTcGFjZSkgbWF4ID0gMDtcblxuICAgICAgICBmb3IgKGk7IGkgPj0gbjsgaS0tKSB7XG4gICAgICAgICAgICBpZiAoaW5CdWZmZXJbaV0gIT09IDB4NTApIGNvbnRpbnVlOyAvLyBxdWljayBjaGVjayB0aGF0IHRoZSBieXRlIGlzICdQJ1xuICAgICAgICAgICAgaWYgKGluQnVmZmVyLnJlYWRVSW50MzJMRShpKSA9PT0gVXRpbHMuQ29uc3RhbnRzLkVORFNJRykge1xuICAgICAgICAgICAgICAgIC8vIFwiUEtcXDAwNVxcMDA2XCJcbiAgICAgICAgICAgICAgICBlbmRPZmZzZXQgPSBpO1xuICAgICAgICAgICAgICAgIGNvbW1lbnRFbmQgPSBpO1xuICAgICAgICAgICAgICAgIGVuZFN0YXJ0ID0gaSArIFV0aWxzLkNvbnN0YW50cy5FTkRIRFI7XG4gICAgICAgICAgICAgICAgLy8gV2UgYWxyZWFkeSBmb3VuZCBhIHJlZ3VsYXIgc2lnbmF0dXJlLCBsZXQncyBsb29rIGp1c3QgYSBiaXQgZnVydGhlciB0byBjaGVjayBpZiB0aGVyZSdzIGFueSB6aXA2NCBzaWduYXR1cmVcbiAgICAgICAgICAgICAgICBuID0gaSAtIFV0aWxzLkNvbnN0YW50cy5FTkQ2NEhEUjtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGluQnVmZmVyLnJlYWRVSW50MzJMRShpKSA9PT0gVXRpbHMuQ29uc3RhbnRzLkVORDY0U0lHKSB7XG4gICAgICAgICAgICAgICAgLy8gRm91bmQgYSB6aXA2NCBzaWduYXR1cmUsIGxldCdzIGNvbnRpbnVlIHJlYWRpbmcgdGhlIHdob2xlIHppcDY0IHJlY29yZFxuICAgICAgICAgICAgICAgIG4gPSBtYXg7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpbkJ1ZmZlci5yZWFkVUludDMyTEUoaSkgPT09IFV0aWxzLkNvbnN0YW50cy5aSVA2NFNJRykge1xuICAgICAgICAgICAgICAgIC8vIEZvdW5kIHRoZSB6aXA2NCByZWNvcmQsIGxldCdzIGRldGVybWluZSBpdCdzIHNpemVcbiAgICAgICAgICAgICAgICBlbmRPZmZzZXQgPSBpO1xuICAgICAgICAgICAgICAgIGVuZFN0YXJ0ID0gaSArIFV0aWxzLnJlYWRCaWdVSW50NjRMRShpbkJ1ZmZlciwgaSArIFV0aWxzLkNvbnN0YW50cy5aSVA2NFNJWkUpICsgVXRpbHMuQ29uc3RhbnRzLlpJUDY0TEVBRDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbmRPZmZzZXQgPT0gLTEpIHRocm93IFV0aWxzLkVycm9ycy5JTlZBTElEX0ZPUk1BVCgpO1xuXG4gICAgICAgIG1haW5IZWFkZXIubG9hZEZyb21CaW5hcnkoaW5CdWZmZXIuc2xpY2UoZW5kT2Zmc2V0LCBlbmRTdGFydCkpO1xuICAgICAgICBpZiAobWFpbkhlYWRlci5jb21tZW50TGVuZ3RoKSB7XG4gICAgICAgICAgICBfY29tbWVudCA9IGluQnVmZmVyLnNsaWNlKGNvbW1lbnRFbmQgKyBVdGlscy5Db25zdGFudHMuRU5ESERSKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVhZE5vdykgcmVhZEVudHJpZXMoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzb3J0RW50cmllcygpIHtcbiAgICAgICAgaWYgKGVudHJ5TGlzdC5sZW5ndGggPiAxICYmICFub1NvcnQpIHtcbiAgICAgICAgICAgIGVudHJ5TGlzdC5zb3J0KChhLCBiKSA9PiBhLmVudHJ5TmFtZS50b0xvd2VyQ2FzZSgpLmxvY2FsZUNvbXBhcmUoYi5lbnRyeU5hbWUudG9Mb3dlckNhc2UoKSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgYW4gYXJyYXkgb2YgWmlwRW50cnkgb2JqZWN0cyBleGlzdGVudCBpbiB0aGUgY3VycmVudCBvcGVuZWQgYXJjaGl2ZVxuICAgICAgICAgKiBAcmV0dXJuIEFycmF5XG4gICAgICAgICAqL1xuICAgICAgICBnZXQgZW50cmllcygpIHtcbiAgICAgICAgICAgIGlmICghbG9hZGVkRW50cmllcykge1xuICAgICAgICAgICAgICAgIHJlYWRFbnRyaWVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZW50cnlMaXN0LmZpbHRlcigoZSkgPT4gIXRlbXBvcmFyeS5oYXMoZSkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcmNoaXZlIGNvbW1lbnRcbiAgICAgICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0IGNvbW1lbnQoKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVjb2Rlci5kZWNvZGUoX2NvbW1lbnQpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgY29tbWVudCh2YWwpIHtcbiAgICAgICAgICAgIF9jb21tZW50ID0gVXRpbHMudG9CdWZmZXIodmFsLCBkZWNvZGVyLmVuY29kZSk7XG4gICAgICAgICAgICBtYWluSGVhZGVyLmNvbW1lbnRMZW5ndGggPSBfY29tbWVudC5sZW5ndGg7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0RW50cnlDb3VudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFsb2FkZWRFbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1haW5IZWFkZXIuZGlza0VudHJpZXM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBlbnRyeUxpc3QubGVuZ3RoO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5lbnRyaWVzLmZvckVhY2goY2FsbGJhY2spO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSBlbnRyeSB3aXRoIHRoZSBnaXZlbiBuYW1lIG9yIG51bGwgaWYgZW50cnkgaXMgaW5leGlzdGVudFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gZW50cnlOYW1lXG4gICAgICAgICAqIEByZXR1cm4gWmlwRW50cnlcbiAgICAgICAgICovXG4gICAgICAgIGdldEVudHJ5OiBmdW5jdGlvbiAoLypTdHJpbmcqLyBlbnRyeU5hbWUpIHtcbiAgICAgICAgICAgIGlmICghbG9hZGVkRW50cmllcykge1xuICAgICAgICAgICAgICAgIHJlYWRFbnRyaWVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZW50cnlUYWJsZVtlbnRyeU5hbWVdIHx8IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZHMgdGhlIGdpdmVuIGVudHJ5IHRvIHRoZSBlbnRyeSBsaXN0XG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBlbnRyeVxuICAgICAgICAgKi9cbiAgICAgICAgc2V0RW50cnk6IGZ1bmN0aW9uICgvKlppcEVudHJ5Ki8gZW50cnkpIHtcbiAgICAgICAgICAgIGlmICghbG9hZGVkRW50cmllcykge1xuICAgICAgICAgICAgICAgIHJlYWRFbnRyaWVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbnRyeUxpc3QucHVzaChlbnRyeSk7XG4gICAgICAgICAgICBlbnRyeVRhYmxlW2VudHJ5LmVudHJ5TmFtZV0gPSBlbnRyeTtcbiAgICAgICAgICAgIG1haW5IZWFkZXIudG90YWxFbnRyaWVzID0gZW50cnlMaXN0Lmxlbmd0aDtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlcyB0aGUgZmlsZSB3aXRoIHRoZSBnaXZlbiBuYW1lIGZyb20gdGhlIGVudHJ5IGxpc3QuXG4gICAgICAgICAqXG4gICAgICAgICAqIElmIHRoZSBlbnRyeSBpcyBhIGRpcmVjdG9yeSwgdGhlbiBhbGwgbmVzdGVkIGZpbGVzIGFuZCBkaXJlY3RvcmllcyB3aWxsIGJlIHJlbW92ZWRcbiAgICAgICAgICogQHBhcmFtIGVudHJ5TmFtZVxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgICAgICovXG4gICAgICAgIGRlbGV0ZUZpbGU6IGZ1bmN0aW9uICgvKlN0cmluZyovIGVudHJ5TmFtZSwgd2l0aHN1YmZvbGRlcnMgPSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoIWxvYWRlZEVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICByZWFkRW50cmllcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZW50cnkgPSBlbnRyeVRhYmxlW2VudHJ5TmFtZV07XG4gICAgICAgICAgICBjb25zdCBsaXN0ID0gdGhpcy5nZXRFbnRyeUNoaWxkcmVuKGVudHJ5LCB3aXRoc3ViZm9sZGVycykubWFwKChjaGlsZCkgPT4gY2hpbGQuZW50cnlOYW1lKTtcblxuICAgICAgICAgICAgbGlzdC5mb3JFYWNoKHRoaXMuZGVsZXRlRW50cnkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW1vdmVzIHRoZSBlbnRyeSB3aXRoIHRoZSBnaXZlbiBuYW1lIGZyb20gdGhlIGVudHJ5IGxpc3QuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlbnRyeU5hbWVcbiAgICAgICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICAgICAqL1xuICAgICAgICBkZWxldGVFbnRyeTogZnVuY3Rpb24gKC8qU3RyaW5nKi8gZW50cnlOYW1lKSB7XG4gICAgICAgICAgICBpZiAoIWxvYWRlZEVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICByZWFkRW50cmllcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZW50cnkgPSBlbnRyeVRhYmxlW2VudHJ5TmFtZV07XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGVudHJ5TGlzdC5pbmRleE9mKGVudHJ5KTtcbiAgICAgICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgZW50cnlMaXN0LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGVudHJ5VGFibGVbZW50cnlOYW1lXTtcbiAgICAgICAgICAgICAgICBtYWluSGVhZGVyLnRvdGFsRW50cmllcyA9IGVudHJ5TGlzdC5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICBJdGVyYXRlcyBhbmQgcmV0dXJucyBhbGwgbmVzdGVkIGZpbGVzIGFuZCBkaXJlY3RvcmllcyBvZiB0aGUgZ2l2ZW4gZW50cnlcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGVudHJ5XG4gICAgICAgICAqIEByZXR1cm4gQXJyYXlcbiAgICAgICAgICovXG4gICAgICAgIGdldEVudHJ5Q2hpbGRyZW46IGZ1bmN0aW9uICgvKlppcEVudHJ5Ki8gZW50cnksIHN1YmZvbGRlcnMgPSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoIWxvYWRlZEVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICByZWFkRW50cmllcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIGlmIChlbnRyeS5pc0RpcmVjdG9yeSAmJiBzdWJmb2xkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGVudHJ5LmVudHJ5TmFtZTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHppcEVudHJ5IG9mIGVudHJ5TGlzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHppcEVudHJ5LmVudHJ5TmFtZS5zdGFydHNXaXRoKG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdC5wdXNoKHppcEVudHJ5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGlzdDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2VudHJ5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICBIb3cgbWFueSBjaGlsZCBlbGVtZW50cyBlbnRyeSBoYXNcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtaaXBFbnRyeX0gZW50cnlcbiAgICAgICAgICogQHJldHVybiB7aW50ZWdlcn1cbiAgICAgICAgICovXG4gICAgICAgIGdldENoaWxkQ291bnQ6IGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgaWYgKGVudHJ5ICYmIGVudHJ5LmlzRGlyZWN0b3J5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGlzdCA9IHRoaXMuZ2V0RW50cnlDaGlsZHJlbihlbnRyeSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpc3QuaW5jbHVkZXMoZW50cnkpID8gbGlzdC5sZW5ndGggLSAxIDogbGlzdC5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgemlwIGZpbGVcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybiBCdWZmZXJcbiAgICAgICAgICovXG4gICAgICAgIGNvbXByZXNzVG9CdWZmZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghbG9hZGVkRW50cmllcykge1xuICAgICAgICAgICAgICAgIHJlYWRFbnRyaWVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzb3J0RW50cmllcygpO1xuXG4gICAgICAgICAgICBjb25zdCBkYXRhQmxvY2sgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlckJsb2NrcyA9IFtdO1xuICAgICAgICAgICAgbGV0IHRvdGFsU2l6ZSA9IDA7XG4gICAgICAgICAgICBsZXQgZGluZGV4ID0gMDtcblxuICAgICAgICAgICAgbWFpbkhlYWRlci5zaXplID0gMDtcbiAgICAgICAgICAgIG1haW5IZWFkZXIub2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIGxldCB0b3RhbEVudHJpZXMgPSAwO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIHRoaXMuZW50cmllcykge1xuICAgICAgICAgICAgICAgIC8vIGNvbXByZXNzIGRhdGEgYW5kIHNldCBsb2NhbCBhbmQgZW50cnkgaGVhZGVyIGFjY29yZGluZ2x5LiBSZWFzb24gd2h5IGlzIGNhbGxlZCBmaXJzdFxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXByZXNzZWREYXRhID0gZW50cnkuZ2V0Q29tcHJlc3NlZERhdGEoKTtcbiAgICAgICAgICAgICAgICBlbnRyeS5oZWFkZXIub2Zmc2V0ID0gZGluZGV4O1xuXG4gICAgICAgICAgICAgICAgLy8gMS4gY29uc3RydWN0IGxvY2FsIGhlYWRlclxuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsSGVhZGVyID0gZW50cnkucGFja0xvY2FsSGVhZGVyKCk7XG5cbiAgICAgICAgICAgICAgICAvLyAyLiBvZmZzZXRzXG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YUxlbmd0aCA9IGxvY2FsSGVhZGVyLmxlbmd0aCArIGNvbXByZXNzZWREYXRhLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBkaW5kZXggKz0gZGF0YUxlbmd0aDtcblxuICAgICAgICAgICAgICAgIC8vIDMuIHN0b3JlIHZhbHVlcyBpbiBzZXF1ZW5jZVxuICAgICAgICAgICAgICAgIGRhdGFCbG9jay5wdXNoKGxvY2FsSGVhZGVyKTtcbiAgICAgICAgICAgICAgICBkYXRhQmxvY2sucHVzaChjb21wcmVzc2VkRGF0YSk7XG5cbiAgICAgICAgICAgICAgICAvLyA0LiBjb25zdHJ1Y3QgY2VudHJhbCBoZWFkZXJcbiAgICAgICAgICAgICAgICBjb25zdCBjZW50cmFsSGVhZGVyID0gZW50cnkucGFja0NlbnRyYWxIZWFkZXIoKTtcbiAgICAgICAgICAgICAgICBoZWFkZXJCbG9ja3MucHVzaChjZW50cmFsSGVhZGVyKTtcbiAgICAgICAgICAgICAgICAvLyA1LiB1cGRhdGUgbWFpbiBoZWFkZXJcbiAgICAgICAgICAgICAgICBtYWluSGVhZGVyLnNpemUgKz0gY2VudHJhbEhlYWRlci5sZW5ndGg7XG4gICAgICAgICAgICAgICAgdG90YWxTaXplICs9IGRhdGFMZW5ndGggKyBjZW50cmFsSGVhZGVyLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB0b3RhbEVudHJpZXMrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdG90YWxTaXplICs9IG1haW5IZWFkZXIubWFpbkhlYWRlclNpemU7IC8vIGFsc28gaW5jbHVkZXMgemlwIGZpbGUgY29tbWVudCBsZW5ndGhcbiAgICAgICAgICAgIC8vIHBvaW50IHRvIGVuZCBvZiBkYXRhIGFuZCBiZWdpbm5pbmcgb2YgY2VudHJhbCBkaXJlY3RvcnkgZmlyc3QgcmVjb3JkXG4gICAgICAgICAgICBtYWluSGVhZGVyLm9mZnNldCA9IGRpbmRleDtcbiAgICAgICAgICAgIG1haW5IZWFkZXIudG90YWxFbnRyaWVzID0gdG90YWxFbnRyaWVzO1xuXG4gICAgICAgICAgICBkaW5kZXggPSAwO1xuICAgICAgICAgICAgY29uc3Qgb3V0QnVmZmVyID0gQnVmZmVyLmFsbG9jKHRvdGFsU2l6ZSk7XG4gICAgICAgICAgICAvLyB3cml0ZSBkYXRhIGJsb2Nrc1xuICAgICAgICAgICAgZm9yIChjb25zdCBjb250ZW50IG9mIGRhdGFCbG9jaykge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQuY29weShvdXRCdWZmZXIsIGRpbmRleCk7XG4gICAgICAgICAgICAgICAgZGluZGV4ICs9IGNvbnRlbnQubGVuZ3RoO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyB3cml0ZSBjZW50cmFsIGRpcmVjdG9yeSBlbnRyaWVzXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvbnRlbnQgb2YgaGVhZGVyQmxvY2tzKSB7XG4gICAgICAgICAgICAgICAgY29udGVudC5jb3B5KG91dEJ1ZmZlciwgZGluZGV4KTtcbiAgICAgICAgICAgICAgICBkaW5kZXggKz0gY29udGVudC5sZW5ndGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHdyaXRlIG1haW4gaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBtaCA9IG1haW5IZWFkZXIudG9CaW5hcnkoKTtcbiAgICAgICAgICAgIGlmIChfY29tbWVudCkge1xuICAgICAgICAgICAgICAgIF9jb21tZW50LmNvcHkobWgsIFV0aWxzLkNvbnN0YW50cy5FTkRIRFIpOyAvLyBhZGQgemlwIGZpbGUgY29tbWVudFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWguY29weShvdXRCdWZmZXIsIGRpbmRleCk7XG5cbiAgICAgICAgICAgIC8vIFNpbmNlIHdlIHVwZGF0ZSBlbnRyeSBhbmQgbWFpbiBoZWFkZXIgb2Zmc2V0cyxcbiAgICAgICAgICAgIC8vIHRoZXkgYXJlIG5vIGxvbmdlciB2YWxpZCBhbmQgd2UgaGF2ZSB0byByZXNldCBjb250ZW50XG4gICAgICAgICAgICAvLyAoSXNzdWUgNjQpXG5cbiAgICAgICAgICAgIGluQnVmZmVyID0gb3V0QnVmZmVyO1xuICAgICAgICAgICAgbG9hZGVkRW50cmllcyA9IGZhbHNlO1xuXG4gICAgICAgICAgICByZXR1cm4gb3V0QnVmZmVyO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRvQXN5bmNCdWZmZXI6IGZ1bmN0aW9uICgvKkZ1bmN0aW9uKi8gb25TdWNjZXNzLCAvKkZ1bmN0aW9uKi8gb25GYWlsLCAvKkZ1bmN0aW9uKi8gb25JdGVtU3RhcnQsIC8qRnVuY3Rpb24qLyBvbkl0ZW1FbmQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCFsb2FkZWRFbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlYWRFbnRyaWVzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNvcnRFbnRyaWVzKCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhQmxvY2sgPSBbXTtcbiAgICAgICAgICAgICAgICBjb25zdCBjZW50cmFsSGVhZGVycyA9IFtdO1xuICAgICAgICAgICAgICAgIGxldCB0b3RhbFNpemUgPSAwO1xuICAgICAgICAgICAgICAgIGxldCBkaW5kZXggPSAwO1xuICAgICAgICAgICAgICAgIGxldCB0b3RhbEVudHJpZXMgPSAwO1xuXG4gICAgICAgICAgICAgICAgbWFpbkhlYWRlci5zaXplID0gMDtcbiAgICAgICAgICAgICAgICBtYWluSGVhZGVyLm9mZnNldCA9IDA7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBjb21wcmVzczJCdWZmZXIgPSBmdW5jdGlvbiAoZW50cnlMaXN0cykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnlMaXN0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbnRyeSA9IGVudHJ5TGlzdHMuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBlbnRyeS5lbnRyeU5hbWUgKyBlbnRyeS5leHRyYS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9uSXRlbVN0YXJ0KSBvbkl0ZW1TdGFydChuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5LmdldENvbXByZXNzZWREYXRhQXN5bmMoZnVuY3Rpb24gKGNvbXByZXNzZWREYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9uSXRlbUVuZCkgb25JdGVtRW5kKG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5LmhlYWRlci5vZmZzZXQgPSBkaW5kZXg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAxLiBjb25zdHJ1Y3QgbG9jYWwgaGVhZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9jYWxIZWFkZXIgPSBlbnRyeS5wYWNrTG9jYWxIZWFkZXIoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDIuIG9mZnNldHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhTGVuZ3RoID0gbG9jYWxIZWFkZXIubGVuZ3RoICsgY29tcHJlc3NlZERhdGEubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpbmRleCArPSBkYXRhTGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMy4gc3RvcmUgdmFsdWVzIGluIHNlcXVlbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUJsb2NrLnB1c2gobG9jYWxIZWFkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFCbG9jay5wdXNoKGNvbXByZXNzZWREYXRhKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNlbnRyYWwgaGVhZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VudGFsSGVhZGVyID0gZW50cnkucGFja0NlbnRyYWxIZWFkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50cmFsSGVhZGVycy5wdXNoKGNlbnRhbEhlYWRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkhlYWRlci5zaXplICs9IGNlbnRhbEhlYWRlci5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxTaXplICs9IGRhdGFMZW5ndGggKyBjZW50YWxIZWFkZXIubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsRW50cmllcysrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcHJlc3MyQnVmZmVyKGVudHJ5TGlzdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbFNpemUgKz0gbWFpbkhlYWRlci5tYWluSGVhZGVyU2l6ZTsgLy8gYWxzbyBpbmNsdWRlcyB6aXAgZmlsZSBjb21tZW50IGxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcG9pbnQgdG8gZW5kIG9mIGRhdGEgYW5kIGJlZ2lubmluZyBvZiBjZW50cmFsIGRpcmVjdG9yeSBmaXJzdCByZWNvcmRcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5IZWFkZXIub2Zmc2V0ID0gZGluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkhlYWRlci50b3RhbEVudHJpZXMgPSB0b3RhbEVudHJpZXM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRpbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvdXRCdWZmZXIgPSBCdWZmZXIuYWxsb2ModG90YWxTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFCbG9jay5mb3JFYWNoKGZ1bmN0aW9uIChjb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudC5jb3B5KG91dEJ1ZmZlciwgZGluZGV4KTsgLy8gd3JpdGUgZGF0YSBibG9ja3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaW5kZXggKz0gY29udGVudC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRyYWxIZWFkZXJzLmZvckVhY2goZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LmNvcHkob3V0QnVmZmVyLCBkaW5kZXgpOyAvLyB3cml0ZSBjZW50cmFsIGRpcmVjdG9yeSBlbnRyaWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGluZGV4ICs9IGNvbnRlbnQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1oID0gbWFpbkhlYWRlci50b0JpbmFyeSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbW1lbnQuY29weShtaCwgVXRpbHMuQ29uc3RhbnRzLkVOREhEUik7IC8vIGFkZCB6aXAgZmlsZSBjb21tZW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG1oLmNvcHkob3V0QnVmZmVyLCBkaW5kZXgpOyAvLyB3cml0ZSBtYWluIGhlYWRlclxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaW5jZSB3ZSB1cGRhdGUgZW50cnkgYW5kIG1haW4gaGVhZGVyIG9mZnNldHMsIHRoZXkgYXJlIG5vXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsb25nZXIgdmFsaWQgYW5kIHdlIGhhdmUgdG8gcmVzZXQgY29udGVudCB1c2luZyBvdXIgbmV3IGJ1ZmZlclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gKElzc3VlIDY0KVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpbkJ1ZmZlciA9IG91dEJ1ZmZlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRlZEVudHJpZXMgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgb25TdWNjZXNzKG91dEJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY29tcHJlc3MyQnVmZmVyKEFycmF5LmZyb20odGhpcy5lbnRyaWVzKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgb25GYWlsKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn07XG4iLCAiY29uc3QgVXRpbHMgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuY29uc3QgcHRoID0gcmVxdWlyZShcInBhdGhcIik7XG5jb25zdCBaaXBFbnRyeSA9IHJlcXVpcmUoXCIuL3ppcEVudHJ5XCIpO1xuY29uc3QgWmlwRmlsZSA9IHJlcXVpcmUoXCIuL3ppcEZpbGVcIik7XG5cbmNvbnN0IGdldF9Cb29sID0gKC4uLnZhbCkgPT4gVXRpbHMuZmluZExhc3QodmFsLCAoYykgPT4gdHlwZW9mIGMgPT09IFwiYm9vbGVhblwiKTtcbmNvbnN0IGdldF9TdHIgPSAoLi4udmFsKSA9PiBVdGlscy5maW5kTGFzdCh2YWwsIChjKSA9PiB0eXBlb2YgYyA9PT0gXCJzdHJpbmdcIik7XG5jb25zdCBnZXRfRnVuID0gKC4uLnZhbCkgPT4gVXRpbHMuZmluZExhc3QodmFsLCAoYykgPT4gdHlwZW9mIGMgPT09IFwiZnVuY3Rpb25cIik7XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgIC8vIG9wdGlvbiBcIm5vU29ydFwiIDogaWYgdHJ1ZSBpdCBkaXNhYmxlcyBmaWxlcyBzb3J0aW5nXG4gICAgbm9Tb3J0OiBmYWxzZSxcbiAgICAvLyByZWFkIGVudHJpZXMgZHVyaW5nIGxvYWQgKGluaXRpYWwgbG9hZGluZyBtYXkgYmUgc2xvd2VyKVxuICAgIHJlYWRFbnRyaWVzOiBmYWxzZSxcbiAgICAvLyBkZWZhdWx0IG1ldGhvZCBpcyBub25lXG4gICAgbWV0aG9kOiBVdGlscy5Db25zdGFudHMuTk9ORSxcbiAgICAvLyBmaWxlIHN5c3RlbVxuICAgIGZzOiBudWxsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgvKipTdHJpbmcqLyBpbnB1dCwgLyoqIG9iamVjdCAqLyBvcHRpb25zKSB7XG4gICAgbGV0IGluQnVmZmVyID0gbnVsbDtcblxuICAgIC8vIGNyZWF0ZSBvYmplY3QgYmFzZWQgZGVmYXVsdCBvcHRpb25zLCBhbGxvd2luZyB0aGVtIHRvIGJlIG92ZXJ3cml0dGVuXG4gICAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShudWxsKSwgZGVmYXVsdE9wdGlvbnMpO1xuXG4gICAgLy8gdGVzdCBpbnB1dCB2YXJpYWJsZVxuICAgIGlmIChpbnB1dCAmJiBcIm9iamVjdFwiID09PSB0eXBlb2YgaW5wdXQpIHtcbiAgICAgICAgLy8gaWYgdmFsdWUgaXMgbm90IGJ1ZmZlciB3ZSBhY2NlcHQgaXQgdG8gYmUgb2JqZWN0IHdpdGggb3B0aW9uc1xuICAgICAgICBpZiAoIShpbnB1dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKG9wdHMsIGlucHV0KTtcbiAgICAgICAgICAgIGlucHV0ID0gb3B0cy5pbnB1dCA/IG9wdHMuaW5wdXQgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAob3B0cy5pbnB1dCkgZGVsZXRlIG9wdHMuaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBpbnB1dCBpcyBidWZmZXJcbiAgICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihpbnB1dCkpIHtcbiAgICAgICAgICAgIGluQnVmZmVyID0gaW5wdXQ7XG4gICAgICAgICAgICBvcHRzLm1ldGhvZCA9IFV0aWxzLkNvbnN0YW50cy5CVUZGRVI7XG4gICAgICAgICAgICBpbnB1dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFzc2lnbiBvcHRpb25zXG4gICAgT2JqZWN0LmFzc2lnbihvcHRzLCBvcHRpb25zKTtcblxuICAgIC8vIGluc3RhbmNpYXRlIHV0aWxzIGZpbGVzeXN0ZW1cbiAgICBjb25zdCBmaWxldG9vbHMgPSBuZXcgVXRpbHMob3B0cyk7XG5cbiAgICBpZiAodHlwZW9mIG9wdHMuZGVjb2RlciAhPT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb3B0cy5kZWNvZGVyLmVuY29kZSAhPT0gXCJmdW5jdGlvblwiIHx8IHR5cGVvZiBvcHRzLmRlY29kZXIuZGVjb2RlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgb3B0cy5kZWNvZGVyID0gVXRpbHMuZGVjb2RlcjtcbiAgICB9XG5cbiAgICAvLyBpZiBpbnB1dCBpcyBmaWxlIG5hbWUgd2UgcmV0cmlldmUgaXRzIGNvbnRlbnRcbiAgICBpZiAoaW5wdXQgJiYgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGlucHV0KSB7XG4gICAgICAgIC8vIGxvYWQgemlwIGZpbGVcbiAgICAgICAgaWYgKGZpbGV0b29scy5mcy5leGlzdHNTeW5jKGlucHV0KSkge1xuICAgICAgICAgICAgb3B0cy5tZXRob2QgPSBVdGlscy5Db25zdGFudHMuRklMRTtcbiAgICAgICAgICAgIG9wdHMuZmlsZW5hbWUgPSBpbnB1dDtcbiAgICAgICAgICAgIGluQnVmZmVyID0gZmlsZXRvb2xzLmZzLnJlYWRGaWxlU3luYyhpbnB1dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBVdGlscy5FcnJvcnMuSU5WQUxJRF9GSUxFTkFNRSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gY3JlYXRlIHZhcmlhYmxlXG4gICAgY29uc3QgX3ppcCA9IG5ldyBaaXBGaWxlKGluQnVmZmVyLCBvcHRzKTtcblxuICAgIGNvbnN0IHsgY2Fub25pY2FsLCBzYW5pdGl6ZSwgemlwbmFtZWZpeCB9ID0gVXRpbHM7XG5cbiAgICBmdW5jdGlvbiBnZXRFbnRyeSgvKipPYmplY3QqLyBlbnRyeSkge1xuICAgICAgICBpZiAoZW50cnkgJiYgX3ppcCkge1xuICAgICAgICAgICAgdmFyIGl0ZW07XG4gICAgICAgICAgICAvLyBJZiBlbnRyeSB3YXMgZ2l2ZW4gYXMgYSBmaWxlIG5hbWVcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZW50cnkgPT09IFwic3RyaW5nXCIpIGl0ZW0gPSBfemlwLmdldEVudHJ5KHB0aC5wb3NpeC5ub3JtYWxpemUoZW50cnkpKTtcbiAgICAgICAgICAgIC8vIGlmIGVudHJ5IHdhcyBnaXZlbiBhcyBhIFppcEVudHJ5IG9iamVjdFxuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgZW50cnkuZW50cnlOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBlbnRyeS5oZWFkZXIgIT09IFwidW5kZWZpbmVkXCIpIGl0ZW0gPSBfemlwLmdldEVudHJ5KGVudHJ5LmVudHJ5TmFtZSk7XG5cbiAgICAgICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZml4UGF0aCh6aXBQYXRoKSB7XG4gICAgICAgIGNvbnN0IHsgam9pbiwgbm9ybWFsaXplLCBzZXAgfSA9IHB0aC5wb3NpeDtcbiAgICAgICAgLy8gY29udmVydCB3aW5kb3dzIGZpbGUgc2VwYXJhdG9ycyBhbmQgbm9ybWFsaXplXG4gICAgICAgIHJldHVybiBqb2luKFwiLlwiLCBub3JtYWxpemUoc2VwICsgemlwUGF0aC5zcGxpdChcIlxcXFxcIikuam9pbihzZXApICsgc2VwKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmlsZW5hbWVGaWx0ZXIoZmlsdGVyZm4pIHtcbiAgICAgICAgaWYgKGZpbHRlcmZuIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgICAgICAvLyBpZiBmaWx0ZXIgaXMgUmVnRXhwIHdyYXAgaXRcbiAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHJ4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChmaWxlbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcngudGVzdChmaWxlbmFtZSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKGZpbHRlcmZuKTtcbiAgICAgICAgfSBlbHNlIGlmIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBmaWx0ZXJmbikge1xuICAgICAgICAgICAgLy8gaWYgZmlsdGVyIGlzIG5vdCBmdW5jdGlvbiB3ZSB3aWxsIHJlcGxhY2UgaXRcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWx0ZXJmbjtcbiAgICB9XG5cbiAgICAvLyBrZWVwIGxhc3QgY2hhcmFjdGVyIG9uIGZvbGRlcnNcbiAgICBjb25zdCByZWxhdGl2ZVBhdGggPSAobG9jYWwsIGVudHJ5KSA9PiB7XG4gICAgICAgIGxldCBsYXN0Q2hhciA9IGVudHJ5LnNsaWNlKC0xKTtcbiAgICAgICAgbGFzdENoYXIgPSBsYXN0Q2hhciA9PT0gZmlsZXRvb2xzLnNlcCA/IGZpbGV0b29scy5zZXAgOiBcIlwiO1xuICAgICAgICByZXR1cm4gcHRoLnJlbGF0aXZlKGxvY2FsLCBlbnRyeSkgKyBsYXN0Q2hhcjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEV4dHJhY3RzIHRoZSBnaXZlbiBlbnRyeSBmcm9tIHRoZSBhcmNoaXZlIGFuZCByZXR1cm5zIHRoZSBjb250ZW50IGFzIGEgQnVmZmVyIG9iamVjdFxuICAgICAgICAgKiBAcGFyYW0ge1ppcEVudHJ5fHN0cmluZ30gZW50cnkgWmlwRW50cnkgb2JqZWN0IG9yIFN0cmluZyB3aXRoIHRoZSBmdWxsIHBhdGggb2YgdGhlIGVudHJ5XG4gICAgICAgICAqIEBwYXJhbSB7QnVmZmVyfHN0cmluZ30gW3Bhc3NdIC0gcGFzc3dvcmRcbiAgICAgICAgICogQHJldHVybiBCdWZmZXIgb3IgTnVsbCBpbiBjYXNlIG9mIGVycm9yXG4gICAgICAgICAqL1xuICAgICAgICByZWFkRmlsZTogZnVuY3Rpb24gKGVudHJ5LCBwYXNzKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IGdldEVudHJ5KGVudHJ5KTtcbiAgICAgICAgICAgIHJldHVybiAoaXRlbSAmJiBpdGVtLmdldERhdGEocGFzcykpIHx8IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgaG93IG1hbnkgY2hpbGQgZWxlbWVudHMgaGFzIG9uIGVudHJ5IChkaXJlY3Rvcmllcykgb24gZmlsZXMgaXQgaXMgYWx3YXlzIDBcbiAgICAgICAgICogQHBhcmFtIHtaaXBFbnRyeXxzdHJpbmd9IGVudHJ5IFppcEVudHJ5IG9iamVjdCBvciBTdHJpbmcgd2l0aCB0aGUgZnVsbCBwYXRoIG9mIHRoZSBlbnRyeVxuICAgICAgICAgKiBAcmV0dXJucyB7aW50ZWdlcn1cbiAgICAgICAgICovXG4gICAgICAgIGNoaWxkQ291bnQ6IGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGdldEVudHJ5KGVudHJ5KTtcbiAgICAgICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF96aXAuZ2V0Q2hpbGRDb3VudChpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQXN5bmNocm9ub3VzIHJlYWRGaWxlXG4gICAgICAgICAqIEBwYXJhbSB7WmlwRW50cnl8c3RyaW5nfSBlbnRyeSBaaXBFbnRyeSBvYmplY3Qgb3IgU3RyaW5nIHdpdGggdGhlIGZ1bGwgcGF0aCBvZiB0aGUgZW50cnlcbiAgICAgICAgICogQHBhcmFtIHtjYWxsYmFja30gY2FsbGJhY2tcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybiBCdWZmZXIgb3IgTnVsbCBpbiBjYXNlIG9mIGVycm9yXG4gICAgICAgICAqL1xuICAgICAgICByZWFkRmlsZUFzeW5jOiBmdW5jdGlvbiAoZW50cnksIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IGdldEVudHJ5KGVudHJ5KTtcbiAgICAgICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgaXRlbS5nZXREYXRhQXN5bmMoY2FsbGJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBcImdldEVudHJ5IGZhaWxlZCBmb3I6XCIgKyBlbnRyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEV4dHJhY3RzIHRoZSBnaXZlbiBlbnRyeSBmcm9tIHRoZSBhcmNoaXZlIGFuZCByZXR1cm5zIHRoZSBjb250ZW50IGFzIHBsYWluIHRleHQgaW4gdGhlIGdpdmVuIGVuY29kaW5nXG4gICAgICAgICAqIEBwYXJhbSB7WmlwRW50cnl8c3RyaW5nfSBlbnRyeSAtIFppcEVudHJ5IG9iamVjdCBvciBTdHJpbmcgd2l0aCB0aGUgZnVsbCBwYXRoIG9mIHRoZSBlbnRyeVxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZW5jb2RpbmcgLSBPcHRpb25hbC4gSWYgbm8gZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHV0ZjggaXMgdXNlZFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJuIFN0cmluZ1xuICAgICAgICAgKi9cbiAgICAgICAgcmVhZEFzVGV4dDogZnVuY3Rpb24gKGVudHJ5LCBlbmNvZGluZykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBnZXRFbnRyeShlbnRyeSk7XG4gICAgICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gaXRlbS5nZXREYXRhKCk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoZW5jb2RpbmcgfHwgXCJ1dGY4XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBc3luY2hyb25vdXMgcmVhZEFzVGV4dFxuICAgICAgICAgKiBAcGFyYW0ge1ppcEVudHJ5fHN0cmluZ30gZW50cnkgWmlwRW50cnkgb2JqZWN0IG9yIFN0cmluZyB3aXRoIHRoZSBmdWxsIHBhdGggb2YgdGhlIGVudHJ5XG4gICAgICAgICAqIEBwYXJhbSB7Y2FsbGJhY2t9IGNhbGxiYWNrXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbZW5jb2RpbmddIC0gT3B0aW9uYWwuIElmIG5vIGVuY29kaW5nIGlzIHNwZWNpZmllZCB1dGY4IGlzIHVzZWRcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybiBTdHJpbmdcbiAgICAgICAgICovXG4gICAgICAgIHJlYWRBc1RleHRBc3luYzogZnVuY3Rpb24gKGVudHJ5LCBjYWxsYmFjaywgZW5jb2RpbmcpIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gZ2V0RW50cnkoZW50cnkpO1xuICAgICAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICBpdGVtLmdldERhdGFBc3luYyhmdW5jdGlvbiAoZGF0YSwgZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEsIGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YS50b1N0cmluZyhlbmNvZGluZyB8fCBcInV0ZjhcIikpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soXCJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW92ZSB0aGUgZW50cnkgZnJvbSB0aGUgZmlsZSBvciB0aGUgZW50cnkgYW5kIGFsbCBpdCdzIG5lc3RlZCBkaXJlY3RvcmllcyBhbmQgZmlsZXMgaWYgdGhlIGdpdmVuIGVudHJ5IGlzIGEgZGlyZWN0b3J5XG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7WmlwRW50cnl8c3RyaW5nfSBlbnRyeVxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgICAgICovXG4gICAgICAgIGRlbGV0ZUZpbGU6IGZ1bmN0aW9uIChlbnRyeSwgd2l0aHN1YmZvbGRlcnMgPSB0cnVlKSB7XG4gICAgICAgICAgICAvLyBAVE9ETzogdGVzdCBkZWxldGVGaWxlXG4gICAgICAgICAgICB2YXIgaXRlbSA9IGdldEVudHJ5KGVudHJ5KTtcbiAgICAgICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgX3ppcC5kZWxldGVGaWxlKGl0ZW0uZW50cnlOYW1lLCB3aXRoc3ViZm9sZGVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW92ZSB0aGUgZW50cnkgZnJvbSB0aGUgZmlsZSBvciBkaXJlY3Rvcnkgd2l0aG91dCBhZmZlY3RpbmcgYW55IG5lc3RlZCBlbnRyaWVzXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7WmlwRW50cnl8c3RyaW5nfSBlbnRyeVxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgICAgICovXG4gICAgICAgIGRlbGV0ZUVudHJ5OiBmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgIC8vIEBUT0RPOiB0ZXN0IGRlbGV0ZUVudHJ5XG4gICAgICAgICAgICB2YXIgaXRlbSA9IGdldEVudHJ5KGVudHJ5KTtcbiAgICAgICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgX3ppcC5kZWxldGVFbnRyeShpdGVtLmVudHJ5TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZHMgYSBjb21tZW50IHRvIHRoZSB6aXAuIFRoZSB6aXAgbXVzdCBiZSByZXdyaXR0ZW4gYWZ0ZXIgYWRkaW5nIHRoZSBjb21tZW50LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29tbWVudFxuICAgICAgICAgKi9cbiAgICAgICAgYWRkWmlwQ29tbWVudDogZnVuY3Rpb24gKGNvbW1lbnQpIHtcbiAgICAgICAgICAgIC8vIEBUT0RPOiB0ZXN0IGFkZFppcENvbW1lbnRcbiAgICAgICAgICAgIF96aXAuY29tbWVudCA9IGNvbW1lbnQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIHppcCBjb21tZW50XG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm4gU3RyaW5nXG4gICAgICAgICAqL1xuICAgICAgICBnZXRaaXBDb21tZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3ppcC5jb21tZW50IHx8IFwiXCI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZHMgYSBjb21tZW50IHRvIGEgc3BlY2lmaWVkIHppcEVudHJ5LiBUaGUgemlwIG11c3QgYmUgcmV3cml0dGVuIGFmdGVyIGFkZGluZyB0aGUgY29tbWVudFxuICAgICAgICAgKiBUaGUgY29tbWVudCBjYW5ub3QgZXhjZWVkIDY1NTM1IGNoYXJhY3RlcnMgaW4gbGVuZ3RoXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7WmlwRW50cnl9IGVudHJ5XG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb21tZW50XG4gICAgICAgICAqL1xuICAgICAgICBhZGRaaXBFbnRyeUNvbW1lbnQ6IGZ1bmN0aW9uIChlbnRyeSwgY29tbWVudCkge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBnZXRFbnRyeShlbnRyeSk7XG4gICAgICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIGl0ZW0uY29tbWVudCA9IGNvbW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIGNvbW1lbnQgb2YgdGhlIHNwZWNpZmllZCBlbnRyeVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1ppcEVudHJ5fSBlbnRyeVxuICAgICAgICAgKiBAcmV0dXJuIFN0cmluZ1xuICAgICAgICAgKi9cbiAgICAgICAgZ2V0WmlwRW50cnlDb21tZW50OiBmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gZ2V0RW50cnkoZW50cnkpO1xuICAgICAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5jb21tZW50IHx8IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlcyB0aGUgY29udGVudCBvZiBhbiBleGlzdGluZyBlbnRyeSBpbnNpZGUgdGhlIGFyY2hpdmUuIFRoZSB6aXAgbXVzdCBiZSByZXdyaXR0ZW4gYWZ0ZXIgdXBkYXRpbmcgdGhlIGNvbnRlbnRcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtaaXBFbnRyeX0gZW50cnlcbiAgICAgICAgICogQHBhcmFtIHtCdWZmZXJ9IGNvbnRlbnRcbiAgICAgICAgICovXG4gICAgICAgIHVwZGF0ZUZpbGU6IGZ1bmN0aW9uIChlbnRyeSwgY29udGVudCkge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBnZXRFbnRyeShlbnRyeSk7XG4gICAgICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIGl0ZW0uc2V0RGF0YShjb250ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkcyBhIGZpbGUgZnJvbSB0aGUgZGlzayB0byB0aGUgYXJjaGl2ZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxQYXRoIEZpbGUgdG8gYWRkIHRvIHppcFxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3ppcFBhdGhdIE9wdGlvbmFsIHBhdGggaW5zaWRlIHRoZSB6aXBcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFt6aXBOYW1lXSBPcHRpb25hbCBuYW1lIGZvciB0aGUgZmlsZVxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NvbW1lbnRdIE9wdGlvbmFsIGZpbGUgY29tbWVudFxuICAgICAgICAgKi9cbiAgICAgICAgYWRkTG9jYWxGaWxlOiBmdW5jdGlvbiAobG9jYWxQYXRoLCB6aXBQYXRoLCB6aXBOYW1lLCBjb21tZW50KSB7XG4gICAgICAgICAgICBpZiAoZmlsZXRvb2xzLmZzLmV4aXN0c1N5bmMobG9jYWxQYXRoKSkge1xuICAgICAgICAgICAgICAgIC8vIGZpeCBaaXBQYXRoXG4gICAgICAgICAgICAgICAgemlwUGF0aCA9IHppcFBhdGggPyBmaXhQYXRoKHppcFBhdGgpIDogXCJcIjtcblxuICAgICAgICAgICAgICAgIC8vIHAgLSBsb2NhbCBmaWxlIG5hbWVcbiAgICAgICAgICAgICAgICBjb25zdCBwID0gcHRoLndpbjMyLmJhc2VuYW1lKHB0aC53aW4zMi5ub3JtYWxpemUobG9jYWxQYXRoKSk7XG5cbiAgICAgICAgICAgICAgICAvLyBhZGQgZmlsZSBuYW1lIGludG8gemlwcGF0aFxuICAgICAgICAgICAgICAgIHppcFBhdGggKz0gemlwTmFtZSA/IHppcE5hbWUgOiBwO1xuXG4gICAgICAgICAgICAgICAgLy8gcmVhZCBmaWxlIGF0dHJpYnV0ZXNcbiAgICAgICAgICAgICAgICBjb25zdCBfYXR0ciA9IGZpbGV0b29scy5mcy5zdGF0U3luYyhsb2NhbFBhdGgpO1xuXG4gICAgICAgICAgICAgICAgLy8gZ2V0IGZpbGUgY29udGVudFxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBfYXR0ci5pc0ZpbGUoKSA/IGZpbGV0b29scy5mcy5yZWFkRmlsZVN5bmMobG9jYWxQYXRoKSA6IEJ1ZmZlci5hbGxvYygwKTtcblxuICAgICAgICAgICAgICAgIC8vIGlmIGZvbGRlclxuICAgICAgICAgICAgICAgIGlmIChfYXR0ci5pc0RpcmVjdG9yeSgpKSB6aXBQYXRoICs9IGZpbGV0b29scy5zZXA7XG5cbiAgICAgICAgICAgICAgICAvLyBhZGQgZmlsZSBpbnRvIHppcCBmaWxlXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRGaWxlKHppcFBhdGgsIGRhdGEsIGNvbW1lbnQsIF9hdHRyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgVXRpbHMuRXJyb3JzLkZJTEVfTk9UX0ZPVU5EKGxvY2FsUGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGxiYWNrIGZvciBzaG93aW5nIGlmIGV2ZXJ5dGhpbmcgd2FzIGRvbmUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBjYWxsYmFjayBkb25lQ2FsbGJhY2tcbiAgICAgICAgICogQHBhcmFtIHtFcnJvcn0gZXJyIC0gRXJyb3Igb2JqZWN0XG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZG9uZSAtIHdhcyByZXF1ZXN0IGZ1bGx5IGNvbXBsZXRlZFxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkcyBhIGZpbGUgZnJvbSB0aGUgZGlzayB0byB0aGUgYXJjaGl2ZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0geyhvYmplY3R8c3RyaW5nKX0gb3B0aW9ucyAtIG9wdGlvbnMgb2JqZWN0LCBpZiBpdCBpcyBzdHJpbmcgaXQgdXMgdXNlZCBhcyBsb2NhbFBhdGguXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmxvY2FsUGF0aCAtIExvY2FsIHBhdGggdG8gdGhlIGZpbGUuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jb21tZW50XSAtIE9wdGlvbmFsIGZpbGUgY29tbWVudC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnppcFBhdGhdIC0gT3B0aW9uYWwgcGF0aCBpbnNpZGUgdGhlIHppcFxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuemlwTmFtZV0gLSBPcHRpb25hbCBuYW1lIGZvciB0aGUgZmlsZVxuICAgICAgICAgKiBAcGFyYW0ge2RvbmVDYWxsYmFja30gY2FsbGJhY2sgLSBUaGUgY2FsbGJhY2sgdGhhdCBoYW5kbGVzIHRoZSByZXNwb25zZS5cbiAgICAgICAgICovXG4gICAgICAgIGFkZExvY2FsRmlsZUFzeW5jOiBmdW5jdGlvbiAob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMgOiB7IGxvY2FsUGF0aDogb3B0aW9ucyB9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxQYXRoID0gcHRoLnJlc29sdmUob3B0aW9ucy5sb2NhbFBhdGgpO1xuICAgICAgICAgICAgY29uc3QgeyBjb21tZW50IH0gPSBvcHRpb25zO1xuICAgICAgICAgICAgbGV0IHsgemlwUGF0aCwgemlwTmFtZSB9ID0gb3B0aW9ucztcbiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICBmaWxldG9vbHMuZnMuc3RhdChsb2NhbFBhdGgsIGZ1bmN0aW9uIChlcnIsIHN0YXRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVyciwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIC8vIGZpeCBaaXBQYXRoXG4gICAgICAgICAgICAgICAgemlwUGF0aCA9IHppcFBhdGggPyBmaXhQYXRoKHppcFBhdGgpIDogXCJcIjtcbiAgICAgICAgICAgICAgICAvLyBwIC0gbG9jYWwgZmlsZSBuYW1lXG4gICAgICAgICAgICAgICAgY29uc3QgcCA9IHB0aC53aW4zMi5iYXNlbmFtZShwdGgud2luMzIubm9ybWFsaXplKGxvY2FsUGF0aCkpO1xuICAgICAgICAgICAgICAgIC8vIGFkZCBmaWxlIG5hbWUgaW50byB6aXBwYXRoXG4gICAgICAgICAgICAgICAgemlwUGF0aCArPSB6aXBOYW1lID8gemlwTmFtZSA6IHA7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RhdHMuaXNGaWxlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZXRvb2xzLmZzLnJlYWRGaWxlKGxvY2FsUGF0aCwgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVyciwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hZGRGaWxlKHppcFBhdGgsIGRhdGEsIGNvbW1lbnQsIHN0YXRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXRJbW1lZGlhdGUoY2FsbGJhY2ssIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHMuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICAgICAgICAgICAgICB6aXBQYXRoICs9IGZpbGV0b29scy5zZXA7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYWRkRmlsZSh6aXBQYXRoLCBCdWZmZXIuYWxsb2MoMCksIGNvbW1lbnQsIHN0YXRzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldEltbWVkaWF0ZShjYWxsYmFjaywgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkcyBhIGxvY2FsIGRpcmVjdG9yeSBhbmQgYWxsIGl0cyBuZXN0ZWQgZmlsZXMgYW5kIGRpcmVjdG9yaWVzIHRvIHRoZSBhcmNoaXZlXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbFBhdGggLSBsb2NhbCBwYXRoIHRvIHRoZSBmb2xkZXJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFt6aXBQYXRoXSAtIG9wdGlvbmFsIHBhdGggaW5zaWRlIHppcFxuICAgICAgICAgKiBAcGFyYW0geyhSZWdFeHB8ZnVuY3Rpb24pfSBbZmlsdGVyXSAtIG9wdGlvbmFsIFJlZ0V4cCBvciBGdW5jdGlvbiBpZiBmaWxlcyBtYXRjaCB3aWxsIGJlIGluY2x1ZGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgYWRkTG9jYWxGb2xkZXI6IGZ1bmN0aW9uIChsb2NhbFBhdGgsIHppcFBhdGgsIGZpbHRlcikge1xuICAgICAgICAgICAgLy8gUHJlcGFyZSBmaWx0ZXJcbiAgICAgICAgICAgIGZpbHRlciA9IGZpbGVuYW1lRmlsdGVyKGZpbHRlcik7XG5cbiAgICAgICAgICAgIC8vIGZpeCBaaXBQYXRoXG4gICAgICAgICAgICB6aXBQYXRoID0gemlwUGF0aCA/IGZpeFBhdGgoemlwUGF0aCkgOiBcIlwiO1xuXG4gICAgICAgICAgICAvLyBub3JtYWxpemUgdGhlIHBhdGggZmlyc3RcbiAgICAgICAgICAgIGxvY2FsUGF0aCA9IHB0aC5ub3JtYWxpemUobG9jYWxQYXRoKTtcblxuICAgICAgICAgICAgaWYgKGZpbGV0b29scy5mcy5leGlzdHNTeW5jKGxvY2FsUGF0aCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtcyA9IGZpbGV0b29scy5maW5kRmlsZXMobG9jYWxQYXRoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgICAgIGlmIChpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBmaWxlcGF0aCBvZiBpdGVtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcCA9IHB0aC5qb2luKHppcFBhdGgsIHJlbGF0aXZlUGF0aChsb2NhbFBhdGgsIGZpbGVwYXRoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyKHApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hZGRMb2NhbEZpbGUoZmlsZXBhdGgsIHB0aC5kaXJuYW1lKHApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgVXRpbHMuRXJyb3JzLkZJTEVfTk9UX0ZPVU5EKGxvY2FsUGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFzeW5jaHJvbm91cyBhZGRMb2NhbEZvbGRlclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxQYXRoXG4gICAgICAgICAqIEBwYXJhbSB7Y2FsbGJhY2t9IGNhbGxiYWNrXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbemlwUGF0aF0gb3B0aW9uYWwgcGF0aCBpbnNpZGUgemlwXG4gICAgICAgICAqIEBwYXJhbSB7UmVnRXhwfGZ1bmN0aW9ufSBbZmlsdGVyXSBvcHRpb25hbCBSZWdFeHAgb3IgRnVuY3Rpb24gaWYgZmlsZXMgbWF0Y2ggd2lsbFxuICAgICAgICAgKiAgICAgICAgICAgICAgIGJlIGluY2x1ZGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgYWRkTG9jYWxGb2xkZXJBc3luYzogZnVuY3Rpb24gKGxvY2FsUGF0aCwgY2FsbGJhY2ssIHppcFBhdGgsIGZpbHRlcikge1xuICAgICAgICAgICAgLy8gUHJlcGFyZSBmaWx0ZXJcbiAgICAgICAgICAgIGZpbHRlciA9IGZpbGVuYW1lRmlsdGVyKGZpbHRlcik7XG5cbiAgICAgICAgICAgIC8vIGZpeCBaaXBQYXRoXG4gICAgICAgICAgICB6aXBQYXRoID0gemlwUGF0aCA/IGZpeFBhdGgoemlwUGF0aCkgOiBcIlwiO1xuXG4gICAgICAgICAgICAvLyBub3JtYWxpemUgdGhlIHBhdGggZmlyc3RcbiAgICAgICAgICAgIGxvY2FsUGF0aCA9IHB0aC5ub3JtYWxpemUobG9jYWxQYXRoKTtcblxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgZmlsZXRvb2xzLmZzLm9wZW4obG9jYWxQYXRoLCBcInJcIiwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgPT09IFwiRU5PRU5UXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCBVdGlscy5FcnJvcnMuRklMRV9OT1RfRk9VTkQobG9jYWxQYXRoKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCBlcnIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IGZpbGV0b29scy5maW5kRmlsZXMobG9jYWxQYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAtMTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpIDwgaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVwYXRoID0gaXRlbXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSByZWxhdGl2ZVBhdGgobG9jYWxQYXRoLCBmaWxlcGF0aCkuc3BsaXQoXCJcXFxcXCIpLmpvaW4oXCIvXCIpOyAvL3dpbmRvd3MgZml4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IHBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm5vcm1hbGl6ZShcIk5GRFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvW1xcdTAzMDAtXFx1MDM2Zl0vZywgXCJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1teXFx4MjAtXFx4N0VdL2csIFwiXCIpOyAvLyBhY2NlbnQgZml4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbHRlcihwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxldG9vbHMuZnMuc3RhdChmaWxlcGF0aCwgZnVuY3Rpb24gKGVyMCwgc3RhdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcjApIGNhbGxiYWNrKHVuZGVmaW5lZCwgZXIwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0cy5pc0ZpbGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGV0b29scy5mcy5yZWFkRmlsZShmaWxlcGF0aCwgZnVuY3Rpb24gKGVyMSwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXIxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh1bmRlZmluZWQsIGVyMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFkZEZpbGUoemlwUGF0aCArIHAsIGRhdGEsIFwiXCIsIHN0YXRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFkZEZpbGUoemlwUGF0aCArIHAgKyBcIi9cIiwgQnVmZmVyLmFsbG9jKDApLCBcIlwiLCBzdGF0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0cnVlLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkcyBhIGxvY2FsIGRpcmVjdG9yeSBhbmQgYWxsIGl0cyBuZXN0ZWQgZmlsZXMgYW5kIGRpcmVjdG9yaWVzIHRvIHRoZSBhcmNoaXZlXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0IHwgc3RyaW5nfSBvcHRpb25zIC0gb3B0aW9ucyBvYmplY3QsIGlmIGl0IGlzIHN0cmluZyBpdCB1cyB1c2VkIGFzIGxvY2FsUGF0aC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubG9jYWxQYXRoIC0gTG9jYWwgcGF0aCB0byB0aGUgZm9sZGVyLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuemlwUGF0aF0gLSBvcHRpb25hbCBwYXRoIGluc2lkZSB6aXAuXG4gICAgICAgICAqIEBwYXJhbSB7UmVnRXhwfGZ1bmN0aW9ufSBbb3B0aW9ucy5maWx0ZXJdIC0gb3B0aW9uYWwgUmVnRXhwIG9yIEZ1bmN0aW9uIGlmIGZpbGVzIG1hdGNoIHdpbGwgYmUgaW5jbHVkZWQuXG4gICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb258c3RyaW5nfSBbb3B0aW9ucy5uYW1lZml4XSAtIG9wdGlvbmFsIGZ1bmN0aW9uIHRvIGhlbHAgZml4IGZpbGVuYW1lXG4gICAgICAgICAqIEBwYXJhbSB7ZG9uZUNhbGxiYWNrfSBjYWxsYmFjayAtIFRoZSBjYWxsYmFjayB0aGF0IGhhbmRsZXMgdGhlIHJlc3BvbnNlLlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgYWRkTG9jYWxGb2xkZXJBc3luYzI6IGZ1bmN0aW9uIChvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zIDogeyBsb2NhbFBhdGg6IG9wdGlvbnMgfTtcbiAgICAgICAgICAgIGxvY2FsUGF0aCA9IHB0aC5yZXNvbHZlKGZpeFBhdGgob3B0aW9ucy5sb2NhbFBhdGgpKTtcbiAgICAgICAgICAgIGxldCB7IHppcFBhdGgsIGZpbHRlciwgbmFtZWZpeCB9ID0gb3B0aW9ucztcblxuICAgICAgICAgICAgaWYgKGZpbHRlciBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICAgICAgICAgIGZpbHRlciA9IChmdW5jdGlvbiAocngpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChmaWxlbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ4LnRlc3QoZmlsZW5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pKGZpbHRlcik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGZpbHRlcikge1xuICAgICAgICAgICAgICAgIGZpbHRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZml4IFppcFBhdGhcbiAgICAgICAgICAgIHppcFBhdGggPSB6aXBQYXRoID8gZml4UGF0aCh6aXBQYXRoKSA6IFwiXCI7XG5cbiAgICAgICAgICAgIC8vIENoZWNrIE5hbWVmaXggZnVuY3Rpb25cbiAgICAgICAgICAgIGlmIChuYW1lZml4ID09IFwibGF0aW4xXCIpIHtcbiAgICAgICAgICAgICAgICBuYW1lZml4ID0gKHN0cikgPT5cbiAgICAgICAgICAgICAgICAgICAgc3RyXG4gICAgICAgICAgICAgICAgICAgICAgICAubm9ybWFsaXplKFwiTkZEXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvW1xcdTAzMDAtXFx1MDM2Zl0vZywgXCJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXlxceDIwLVxceDdFXS9nLCBcIlwiKTsgLy8gYWNjZW50IGZpeCAobGF0aW4xIGNoYXJhY2VycyBvbmx5KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIG5hbWVmaXggIT09IFwiZnVuY3Rpb25cIikgbmFtZWZpeCA9IChzdHIpID0+IHN0cjtcblxuICAgICAgICAgICAgLy8gaW50ZXJuYWwsIGNyZWF0ZSByZWxhdGl2ZSBwYXRoICsgZml4IHRoZSBuYW1lXG4gICAgICAgICAgICBjb25zdCByZWxQYXRoRml4ID0gKGVudHJ5KSA9PiBwdGguam9pbih6aXBQYXRoLCBuYW1lZml4KHJlbGF0aXZlUGF0aChsb2NhbFBhdGgsIGVudHJ5KSkpO1xuICAgICAgICAgICAgY29uc3QgZmlsZU5hbWVGaXggPSAoZW50cnkpID0+IHB0aC53aW4zMi5iYXNlbmFtZShwdGgud2luMzIubm9ybWFsaXplKG5hbWVmaXgoZW50cnkpKSk7XG5cbiAgICAgICAgICAgIGZpbGV0b29scy5mcy5vcGVuKGxvY2FsUGF0aCwgXCJyXCIsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyICYmIGVyci5jb2RlID09PSBcIkVOT0VOVFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgVXRpbHMuRXJyb3JzLkZJTEVfTk9UX0ZPVU5EKGxvY2FsUGF0aCkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgZXJyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmaWxldG9vbHMuZmluZEZpbGVzQXN5bmMobG9jYWxQYXRoLCBmdW5jdGlvbiAoZXJyLCBmaWxlRW50cmllcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlRW50cmllcyA9IGZpbGVFbnRyaWVzLmZpbHRlcigoZGlyKSA9PiBmaWx0ZXIocmVsUGF0aEZpeChkaXIpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbGVFbnRyaWVzLmxlbmd0aCkgY2FsbGJhY2sodW5kZWZpbmVkLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEltbWVkaWF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlRW50cmllcy5yZXZlcnNlKCkucmVkdWNlKGZ1bmN0aW9uIChuZXh0LCBlbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGVyciwgZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVyciB8fCBkb25lID09PSBmYWxzZSkgcmV0dXJuIHNldEltbWVkaWF0ZShuZXh0LCBlcnIsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hZGRMb2NhbEZpbGVBc3luYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsUGF0aDogZW50cnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHppcFBhdGg6IHB0aC5kaXJuYW1lKHJlbFBhdGhGaXgoZW50cnkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgemlwTmFtZTogZmlsZU5hbWVGaXgoZW50cnkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGNhbGxiYWNrKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZHMgYSBsb2NhbCBkaXJlY3RvcnkgYW5kIGFsbCBpdHMgbmVzdGVkIGZpbGVzIGFuZCBkaXJlY3RvcmllcyB0byB0aGUgYXJjaGl2ZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxQYXRoIC0gcGF0aCB3aGVyZSBmaWxlcyB3aWxsIGJlIGV4dHJhY3RlZFxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgLSBvcHRpb25hbCBwcm9wZXJ0aWVzXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcHJvcHMuemlwUGF0aF0gLSBvcHRpb25hbCBwYXRoIGluc2lkZSB6aXBcbiAgICAgICAgICogQHBhcmFtIHtSZWdFeHB8ZnVuY3Rpb259IFtwcm9wcy5maWx0ZXJdIC0gb3B0aW9uYWwgUmVnRXhwIG9yIEZ1bmN0aW9uIGlmIGZpbGVzIG1hdGNoIHdpbGwgYmUgaW5jbHVkZWQuXG4gICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb258c3RyaW5nfSBbcHJvcHMubmFtZWZpeF0gLSBvcHRpb25hbCBmdW5jdGlvbiB0byBoZWxwIGZpeCBmaWxlbmFtZVxuICAgICAgICAgKi9cbiAgICAgICAgYWRkTG9jYWxGb2xkZXJQcm9taXNlOiBmdW5jdGlvbiAobG9jYWxQYXRoLCBwcm9wcykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZExvY2FsRm9sZGVyQXN5bmMyKE9iamVjdC5hc3NpZ24oeyBsb2NhbFBhdGggfSwgcHJvcHMpLCAoZXJyLCBkb25lKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkgcmVzb2x2ZSh0aGlzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbGxvd3MgeW91IHRvIGNyZWF0ZSBhIGVudHJ5IChmaWxlIG9yIGRpcmVjdG9yeSkgaW4gdGhlIHppcCBmaWxlLlxuICAgICAgICAgKiBJZiB5b3Ugd2FudCB0byBjcmVhdGUgYSBkaXJlY3RvcnkgdGhlIGVudHJ5TmFtZSBtdXN0IGVuZCBpbiAvIGFuZCBhIG51bGwgYnVmZmVyIHNob3VsZCBiZSBwcm92aWRlZC5cbiAgICAgICAgICogQ29tbWVudCBhbmQgYXR0cmlidXRlcyBhcmUgb3B0aW9uYWxcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGVudHJ5TmFtZVxuICAgICAgICAgKiBAcGFyYW0ge0J1ZmZlciB8IHN0cmluZ30gY29udGVudCAtIGZpbGUgY29udGVudCBhcyBidWZmZXIgb3IgdXRmOCBjb2RlZCBzdHJpbmdcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtjb21tZW50XSAtIGZpbGUgY29tbWVudFxuICAgICAgICAgKiBAcGFyYW0ge251bWJlciB8IG9iamVjdH0gW2F0dHJdIC0gbnVtYmVyIGFzIHVuaXggZmlsZSBwZXJtaXNzaW9ucywgb2JqZWN0IGFzIGZpbGVzeXN0ZW0gU3RhdHMgb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBhZGRGaWxlOiBmdW5jdGlvbiAoZW50cnlOYW1lLCBjb250ZW50LCBjb21tZW50LCBhdHRyKSB7XG4gICAgICAgICAgICBlbnRyeU5hbWUgPSB6aXBuYW1lZml4KGVudHJ5TmFtZSk7XG4gICAgICAgICAgICBsZXQgZW50cnkgPSBnZXRFbnRyeShlbnRyeU5hbWUpO1xuICAgICAgICAgICAgY29uc3QgdXBkYXRlID0gZW50cnkgIT0gbnVsbDtcblxuICAgICAgICAgICAgLy8gcHJlcGFyZSBuZXcgZW50cnlcbiAgICAgICAgICAgIGlmICghdXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgZW50cnkgPSBuZXcgWmlwRW50cnkob3B0cyk7XG4gICAgICAgICAgICAgICAgZW50cnkuZW50cnlOYW1lID0gZW50cnlOYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW50cnkuY29tbWVudCA9IGNvbW1lbnQgfHwgXCJcIjtcblxuICAgICAgICAgICAgY29uc3QgaXNTdGF0ID0gXCJvYmplY3RcIiA9PT0gdHlwZW9mIGF0dHIgJiYgYXR0ciBpbnN0YW5jZW9mIGZpbGV0b29scy5mcy5TdGF0cztcblxuICAgICAgICAgICAgLy8gbGFzdCBtb2RpZmljYXRpb24gdGltZSBmcm9tIGZpbGUgc3RhdHNcbiAgICAgICAgICAgIGlmIChpc1N0YXQpIHtcbiAgICAgICAgICAgICAgICBlbnRyeS5oZWFkZXIudGltZSA9IGF0dHIubXRpbWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCBmaWxlIGF0dHJpYnV0ZVxuICAgICAgICAgICAgdmFyIGZpbGVhdHRyID0gZW50cnkuaXNEaXJlY3RvcnkgPyAweDEwIDogMDsgLy8gKE1TLURPUyBkaXJlY3RvcnkgZmxhZylcblxuICAgICAgICAgICAgLy8gZXh0ZW5kZWQgYXR0cmlidXRlcyBmaWVsZCBmb3IgVW5peFxuICAgICAgICAgICAgLy8gc2V0IGZpbGUgdHlwZSBlaXRoZXIgU19JRkRJUiAvIFNfSUZSRUdcbiAgICAgICAgICAgIGxldCB1bml4ID0gZW50cnkuaXNEaXJlY3RvcnkgPyAweDQwMDAgOiAweDgwMDA7XG5cbiAgICAgICAgICAgIGlmIChpc1N0YXQpIHtcbiAgICAgICAgICAgICAgICAvLyBGaWxlIGF0dHJpYnV0ZXMgZnJvbSBmaWxlIHN0YXRzXG4gICAgICAgICAgICAgICAgdW5peCB8PSAweGZmZiAmIGF0dHIubW9kZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXCJudW1iZXJcIiA9PT0gdHlwZW9mIGF0dHIpIHtcbiAgICAgICAgICAgICAgICAvLyBhdHRyIGZyb20gZ2l2ZW4gYXR0ciB2YWx1ZXNcbiAgICAgICAgICAgICAgICB1bml4IHw9IDB4ZmZmICYgYXR0cjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRGVmYXVsdCB2YWx1ZXM6XG4gICAgICAgICAgICAgICAgdW5peCB8PSBlbnRyeS5pc0RpcmVjdG9yeSA/IDBvNzU1IDogMG82NDQ7IC8vIHBlcm1pc3Npb25zIChkcnd4ci14ci14KSBvciAoLXItd3ItLXItLSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmlsZWF0dHIgPSAoZmlsZWF0dHIgfCAodW5peCA8PCAxNikpID4+PiAwOyAvLyBhZGQgYXR0cmlidXRlc1xuXG4gICAgICAgICAgICBlbnRyeS5hdHRyID0gZmlsZWF0dHI7XG5cbiAgICAgICAgICAgIGVudHJ5LnNldERhdGEoY29udGVudCk7XG4gICAgICAgICAgICBpZiAoIXVwZGF0ZSkgX3ppcC5zZXRFbnRyeShlbnRyeSk7XG5cbiAgICAgICAgICAgIHJldHVybiBlbnRyeTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBaaXBFbnRyeSBvYmplY3RzIHJlcHJlc2VudGluZyB0aGUgZmlsZXMgYW5kIGZvbGRlcnMgaW5zaWRlIHRoZSBhcmNoaXZlXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcGFzc3dvcmRdXG4gICAgICAgICAqIEByZXR1cm5zIEFycmF5XG4gICAgICAgICAqL1xuICAgICAgICBnZXRFbnRyaWVzOiBmdW5jdGlvbiAocGFzc3dvcmQpIHtcbiAgICAgICAgICAgIF96aXAucGFzc3dvcmQgPSBwYXNzd29yZDtcbiAgICAgICAgICAgIHJldHVybiBfemlwID8gX3ppcC5lbnRyaWVzIDogW107XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgYSBaaXBFbnRyeSBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBmaWxlIG9yIGZvbGRlciBzcGVjaWZpZWQgYnkgYGBuYW1lYGAuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAgICAgICAqIEByZXR1cm4gWmlwRW50cnlcbiAgICAgICAgICovXG4gICAgICAgIGdldEVudHJ5OiBmdW5jdGlvbiAoLyoqU3RyaW5nKi8gbmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEVudHJ5KG5hbWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldEVudHJ5Q291bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfemlwLmdldEVudHJ5Q291bnQoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBmb3JFYWNoOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBfemlwLmZvckVhY2goY2FsbGJhY2spO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFeHRyYWN0cyB0aGUgZ2l2ZW4gZW50cnkgdG8gdGhlIGdpdmVuIHRhcmdldFBhdGhcbiAgICAgICAgICogSWYgdGhlIGVudHJ5IGlzIGEgZGlyZWN0b3J5IGluc2lkZSB0aGUgYXJjaGl2ZSwgdGhlIGVudGlyZSBkaXJlY3RvcnkgYW5kIGl0J3Mgc3ViZGlyZWN0b3JpZXMgd2lsbCBiZSBleHRyYWN0ZWRcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd8WmlwRW50cnl9IGVudHJ5IC0gWmlwRW50cnkgb2JqZWN0IG9yIFN0cmluZyB3aXRoIHRoZSBmdWxsIHBhdGggb2YgdGhlIGVudHJ5XG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXRQYXRoIC0gVGFyZ2V0IGZvbGRlciB3aGVyZSB0byB3cml0ZSB0aGUgZmlsZVxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFttYWludGFpbkVudHJ5UGF0aD10cnVlXSAtIElmIG1haW50YWluRW50cnlQYXRoIGlzIHRydWUgYW5kIHRoZSBlbnRyeSBpcyBpbnNpZGUgYSBmb2xkZXIsIHRoZSBlbnRyeSBmb2xkZXIgd2lsbCBiZSBjcmVhdGVkIGluIHRhcmdldFBhdGggYXMgd2VsbC4gRGVmYXVsdCBpcyBUUlVFXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW292ZXJ3cml0ZT1mYWxzZV0gLSBJZiB0aGUgZmlsZSBhbHJlYWR5IGV4aXN0cyBhdCB0aGUgdGFyZ2V0IHBhdGgsIHRoZSBmaWxlIHdpbGwgYmUgb3ZlcndyaXRlbiBpZiB0aGlzIGlzIHRydWUuXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2tlZXBPcmlnaW5hbFBlcm1pc3Npb249ZmFsc2VdIC0gVGhlIGZpbGUgd2lsbCBiZSBzZXQgYXMgdGhlIHBlcm1pc3Npb24gZnJvbSB0aGUgZW50cnkgaWYgdGhpcyBpcyB0cnVlLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW291dEZpbGVOYW1lXSAtIFN0cmluZyBJZiBzZXQgd2lsbCBvdmVycmlkZSB0aGUgZmlsZW5hbWUgb2YgdGhlIGV4dHJhY3RlZCBmaWxlIChPbmx5IHdvcmtzIGlmIHRoZSBlbnRyeSBpcyBhIGZpbGUpXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAgICAgKi9cbiAgICAgICAgZXh0cmFjdEVudHJ5VG86IGZ1bmN0aW9uIChlbnRyeSwgdGFyZ2V0UGF0aCwgbWFpbnRhaW5FbnRyeVBhdGgsIG92ZXJ3cml0ZSwga2VlcE9yaWdpbmFsUGVybWlzc2lvbiwgb3V0RmlsZU5hbWUpIHtcbiAgICAgICAgICAgIG92ZXJ3cml0ZSA9IGdldF9Cb29sKGZhbHNlLCBvdmVyd3JpdGUpO1xuICAgICAgICAgICAga2VlcE9yaWdpbmFsUGVybWlzc2lvbiA9IGdldF9Cb29sKGZhbHNlLCBrZWVwT3JpZ2luYWxQZXJtaXNzaW9uKTtcbiAgICAgICAgICAgIG1haW50YWluRW50cnlQYXRoID0gZ2V0X0Jvb2wodHJ1ZSwgbWFpbnRhaW5FbnRyeVBhdGgpO1xuICAgICAgICAgICAgb3V0RmlsZU5hbWUgPSBnZXRfU3RyKGtlZXBPcmlnaW5hbFBlcm1pc3Npb24sIG91dEZpbGVOYW1lKTtcblxuICAgICAgICAgICAgdmFyIGl0ZW0gPSBnZXRFbnRyeShlbnRyeSk7XG4gICAgICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBVdGlscy5FcnJvcnMuTk9fRU5UUlkoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGVudHJ5TmFtZSA9IGNhbm9uaWNhbChpdGVtLmVudHJ5TmFtZSk7XG5cbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSBzYW5pdGl6ZSh0YXJnZXRQYXRoLCBvdXRGaWxlTmFtZSAmJiAhaXRlbS5pc0RpcmVjdG9yeSA/IG91dEZpbGVOYW1lIDogbWFpbnRhaW5FbnRyeVBhdGggPyBlbnRyeU5hbWUgOiBwdGguYmFzZW5hbWUoZW50cnlOYW1lKSk7XG5cbiAgICAgICAgICAgIGlmIChpdGVtLmlzRGlyZWN0b3J5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gX3ppcC5nZXRFbnRyeUNoaWxkcmVuKGl0ZW0pO1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5pc0RpcmVjdG9yeSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9IGNoaWxkLmdldERhdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBVdGlscy5FcnJvcnMuQ0FOVF9FWFRSQUNUX0ZJTEUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IGNhbm9uaWNhbChjaGlsZC5lbnRyeU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGROYW1lID0gc2FuaXRpemUodGFyZ2V0UGF0aCwgbWFpbnRhaW5FbnRyeVBhdGggPyBuYW1lIDogcHRoLmJhc2VuYW1lKG5hbWUpKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHJldmVyc2Ugb3BlcmF0aW9uIGZvciBhdHRyIGRlcGVuZCBvbiBtZXRob2QgYWRkRmlsZSgpXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVBdHRyID0ga2VlcE9yaWdpbmFsUGVybWlzc2lvbiA/IGNoaWxkLmhlYWRlci5maWxlQXR0ciA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgZmlsZXRvb2xzLndyaXRlRmlsZVRvKGNoaWxkTmFtZSwgY29udGVudCwgb3ZlcndyaXRlLCBmaWxlQXR0cik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gaXRlbS5nZXREYXRhKF96aXAucGFzc3dvcmQpO1xuICAgICAgICAgICAgaWYgKCFjb250ZW50KSB0aHJvdyBVdGlscy5FcnJvcnMuQ0FOVF9FWFRSQUNUX0ZJTEUoKTtcblxuICAgICAgICAgICAgaWYgKGZpbGV0b29scy5mcy5leGlzdHNTeW5jKHRhcmdldCkgJiYgIW92ZXJ3cml0ZSkge1xuICAgICAgICAgICAgICAgIHRocm93IFV0aWxzLkVycm9ycy5DQU5UX09WRVJSSURFKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUaGUgcmV2ZXJzZSBvcGVyYXRpb24gZm9yIGF0dHIgZGVwZW5kIG9uIG1ldGhvZCBhZGRGaWxlKClcbiAgICAgICAgICAgIGNvbnN0IGZpbGVBdHRyID0ga2VlcE9yaWdpbmFsUGVybWlzc2lvbiA/IGVudHJ5LmhlYWRlci5maWxlQXR0ciA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGZpbGV0b29scy53cml0ZUZpbGVUbyh0YXJnZXQsIGNvbnRlbnQsIG92ZXJ3cml0ZSwgZmlsZUF0dHIpO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGVzdCB0aGUgYXJjaGl2ZVxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Bhc3NdXG4gICAgICAgICAqL1xuICAgICAgICB0ZXN0OiBmdW5jdGlvbiAocGFzcykge1xuICAgICAgICAgICAgaWYgKCFfemlwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBlbnRyeSBpbiBfemlwLmVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkuaXNEaXJlY3RvcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gX3ppcC5lbnRyaWVzW2VudHJ5XS5nZXREYXRhKHBhc3MpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEV4dHJhY3RzIHRoZSBlbnRpcmUgYXJjaGl2ZSB0byB0aGUgZ2l2ZW4gbG9jYXRpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldFBhdGggVGFyZ2V0IGxvY2F0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW292ZXJ3cml0ZT1mYWxzZV0gSWYgdGhlIGZpbGUgYWxyZWFkeSBleGlzdHMgYXQgdGhlIHRhcmdldCBwYXRoLCB0aGUgZmlsZSB3aWxsIGJlIG92ZXJ3cml0ZW4gaWYgdGhpcyBpcyB0cnVlLlxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgIERlZmF1bHQgaXMgRkFMU0VcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBba2VlcE9yaWdpbmFsUGVybWlzc2lvbj1mYWxzZV0gVGhlIGZpbGUgd2lsbCBiZSBzZXQgYXMgdGhlIHBlcm1pc3Npb24gZnJvbSB0aGUgZW50cnkgaWYgdGhpcyBpcyB0cnVlLlxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgIERlZmF1bHQgaXMgRkFMU0VcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd8QnVmZmVyfSBbcGFzc10gcGFzc3dvcmRcbiAgICAgICAgICovXG4gICAgICAgIGV4dHJhY3RBbGxUbzogZnVuY3Rpb24gKHRhcmdldFBhdGgsIG92ZXJ3cml0ZSwga2VlcE9yaWdpbmFsUGVybWlzc2lvbiwgcGFzcykge1xuICAgICAgICAgICAga2VlcE9yaWdpbmFsUGVybWlzc2lvbiA9IGdldF9Cb29sKGZhbHNlLCBrZWVwT3JpZ2luYWxQZXJtaXNzaW9uKTtcbiAgICAgICAgICAgIHBhc3MgPSBnZXRfU3RyKGtlZXBPcmlnaW5hbFBlcm1pc3Npb24sIHBhc3MpO1xuICAgICAgICAgICAgb3ZlcndyaXRlID0gZ2V0X0Jvb2woZmFsc2UsIG92ZXJ3cml0ZSk7XG4gICAgICAgICAgICBpZiAoIV96aXApIHRocm93IFV0aWxzLkVycm9ycy5OT19aSVAoKTtcblxuICAgICAgICAgICAgX3ppcC5lbnRyaWVzLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGVudHJ5TmFtZSA9IHNhbml0aXplKHRhcmdldFBhdGgsIGNhbm9uaWNhbChlbnRyeS5lbnRyeU5hbWUpKTtcbiAgICAgICAgICAgICAgICBpZiAoZW50cnkuaXNEaXJlY3RvcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZXRvb2xzLm1ha2VEaXIoZW50cnlOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9IGVudHJ5LmdldERhdGEocGFzcyk7XG4gICAgICAgICAgICAgICAgaWYgKCFjb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IFV0aWxzLkVycm9ycy5DQU5UX0VYVFJBQ1RfRklMRSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBUaGUgcmV2ZXJzZSBvcGVyYXRpb24gZm9yIGF0dHIgZGVwZW5kIG9uIG1ldGhvZCBhZGRGaWxlKClcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlQXR0ciA9IGtlZXBPcmlnaW5hbFBlcm1pc3Npb24gPyBlbnRyeS5oZWFkZXIuZmlsZUF0dHIgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgZmlsZXRvb2xzLndyaXRlRmlsZVRvKGVudHJ5TmFtZSwgY29udGVudCwgb3ZlcndyaXRlLCBmaWxlQXR0cik7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZXRvb2xzLmZzLnV0aW1lc1N5bmMoZW50cnlOYW1lLCBlbnRyeS5oZWFkZXIudGltZSwgZW50cnkuaGVhZGVyLnRpbWUpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBVdGlscy5FcnJvcnMuQ0FOVF9FWFRSQUNUX0ZJTEUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQXN5bmNocm9ub3VzIGV4dHJhY3RBbGxUb1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0UGF0aCBUYXJnZXQgbG9jYXRpb25cbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBbb3ZlcndyaXRlPWZhbHNlXSBJZiB0aGUgZmlsZSBhbHJlYWR5IGV4aXN0cyBhdCB0aGUgdGFyZ2V0IHBhdGgsIHRoZSBmaWxlIHdpbGwgYmUgb3ZlcndyaXRlbiBpZiB0aGlzIGlzIHRydWUuXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgRGVmYXVsdCBpcyBGQUxTRVxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtrZWVwT3JpZ2luYWxQZXJtaXNzaW9uPWZhbHNlXSBUaGUgZmlsZSB3aWxsIGJlIHNldCBhcyB0aGUgcGVybWlzc2lvbiBmcm9tIHRoZSBlbnRyeSBpZiB0aGlzIGlzIHRydWUuXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgRGVmYXVsdCBpcyBGQUxTRVxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgd2lsbCBiZSBleGVjdXRlZCB3aGVuIGFsbCBlbnRyaWVzIGFyZSBleHRyYWN0ZWQgc3VjY2Vzc2Z1bGx5IG9yIGFueSBlcnJvciBpcyB0aHJvd24uXG4gICAgICAgICAqL1xuICAgICAgICBleHRyYWN0QWxsVG9Bc3luYzogZnVuY3Rpb24gKHRhcmdldFBhdGgsIG92ZXJ3cml0ZSwga2VlcE9yaWdpbmFsUGVybWlzc2lvbiwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gZ2V0X0Z1bihvdmVyd3JpdGUsIGtlZXBPcmlnaW5hbFBlcm1pc3Npb24sIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIGtlZXBPcmlnaW5hbFBlcm1pc3Npb24gPSBnZXRfQm9vbChmYWxzZSwga2VlcE9yaWdpbmFsUGVybWlzc2lvbik7XG4gICAgICAgICAgICBvdmVyd3JpdGUgPSBnZXRfQm9vbChmYWxzZSwgb3ZlcndyaXRlKTtcbiAgICAgICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmV4dHJhY3RBbGxUb0FzeW5jKHRhcmdldFBhdGgsIG92ZXJ3cml0ZSwga2VlcE9yaWdpbmFsUGVybWlzc2lvbiwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghX3ppcCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKFV0aWxzLkVycm9ycy5OT19aSVAoKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0YXJnZXRQYXRoID0gcHRoLnJlc29sdmUodGFyZ2V0UGF0aCk7XG4gICAgICAgICAgICAvLyBjb252ZXJ0IGVudHJ5TmFtZSB0b1xuICAgICAgICAgICAgY29uc3QgZ2V0UGF0aCA9IChlbnRyeSkgPT4gc2FuaXRpemUodGFyZ2V0UGF0aCwgcHRoLm5vcm1hbGl6ZShjYW5vbmljYWwoZW50cnkuZW50cnlOYW1lKSkpO1xuICAgICAgICAgICAgY29uc3QgZ2V0RXJyb3IgPSAobXNnLCBmaWxlKSA9PiBuZXcgRXJyb3IobXNnICsgJzogXCInICsgZmlsZSArICdcIicpO1xuXG4gICAgICAgICAgICAvLyBzZXBhcmF0ZSBkaXJlY3RvcmllcyBmcm9tIGZpbGVzXG4gICAgICAgICAgICBjb25zdCBkaXJFbnRyaWVzID0gW107XG4gICAgICAgICAgICBjb25zdCBmaWxlRW50cmllcyA9IFtdO1xuICAgICAgICAgICAgX3ppcC5lbnRyaWVzLmZvckVhY2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZS5pc0RpcmVjdG9yeSkge1xuICAgICAgICAgICAgICAgICAgICBkaXJFbnRyaWVzLnB1c2goZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZUVudHJpZXMucHVzaChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gQ3JlYXRlIGRpcmVjdG9yeSBlbnRyaWVzIGZpcnN0IHN5bmNocm9ub3VzbHlcbiAgICAgICAgICAgIC8vIHRoaXMgcHJldmVudHMgcmFjZSBjb25kaXRpb24gYW5kIGFzc3VyZXMgZm9sZGVycyBhcmUgdGhlcmUgYmVmb3JlIHdyaXRpbmcgZmlsZXNcbiAgICAgICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgZGlyRW50cmllcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpclBhdGggPSBnZXRQYXRoKGVudHJ5KTtcbiAgICAgICAgICAgICAgICAvLyBUaGUgcmV2ZXJzZSBvcGVyYXRpb24gZm9yIGF0dHIgZGVwZW5kIG9uIG1ldGhvZCBhZGRGaWxlKClcbiAgICAgICAgICAgICAgICBjb25zdCBkaXJBdHRyID0ga2VlcE9yaWdpbmFsUGVybWlzc2lvbiA/IGVudHJ5LmhlYWRlci5maWxlQXR0ciA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmaWxldG9vbHMubWFrZURpcihkaXJQYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpckF0dHIpIGZpbGV0b29scy5mcy5jaG1vZFN5bmMoZGlyUGF0aCwgZGlyQXR0cik7XG4gICAgICAgICAgICAgICAgICAgIC8vIGluIHVuaXggdGltZXN0YW1wIHdpbGwgY2hhbmdlIGlmIGZpbGVzIGFyZSBsYXRlciBhZGRlZCB0byBmb2xkZXIsIGJ1dCBzdGlsbFxuICAgICAgICAgICAgICAgICAgICBmaWxldG9vbHMuZnMudXRpbWVzU3luYyhkaXJQYXRoLCBlbnRyeS5oZWFkZXIudGltZSwgZW50cnkuaGVhZGVyLnRpbWUpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGdldEVycm9yKFwiVW5hYmxlIHRvIGNyZWF0ZSBmb2xkZXJcIiwgZGlyUGF0aCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmlsZUVudHJpZXMucmV2ZXJzZSgpLnJlZHVjZShmdW5jdGlvbiAobmV4dCwgZW50cnkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbnRyeU5hbWUgPSBwdGgubm9ybWFsaXplKGNhbm9uaWNhbChlbnRyeS5lbnRyeU5hbWUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVQYXRoID0gc2FuaXRpemUodGFyZ2V0UGF0aCwgZW50cnlOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5LmdldERhdGFBc3luYyhmdW5jdGlvbiAoY29udGVudCwgZXJyXzEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyXzEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dChlcnJfMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghY29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0KFV0aWxzLkVycm9ycy5DQU5UX0VYVFJBQ1RfRklMRSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcmV2ZXJzZSBvcGVyYXRpb24gZm9yIGF0dHIgZGVwZW5kIG9uIG1ldGhvZCBhZGRGaWxlKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZUF0dHIgPSBrZWVwT3JpZ2luYWxQZXJtaXNzaW9uID8gZW50cnkuaGVhZGVyLmZpbGVBdHRyIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxldG9vbHMud3JpdGVGaWxlVG9Bc3luYyhmaWxlUGF0aCwgY29udGVudCwgb3ZlcndyaXRlLCBmaWxlQXR0ciwgZnVuY3Rpb24gKHN1Y2MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3VjYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoZ2V0RXJyb3IoXCJVbmFibGUgdG8gd3JpdGUgZmlsZVwiLCBmaWxlUGF0aCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXRvb2xzLmZzLnV0aW1lcyhmaWxlUGF0aCwgZW50cnkuaGVhZGVyLnRpbWUsIGVudHJ5LmhlYWRlci50aW1lLCBmdW5jdGlvbiAoZXJyXzIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyXzIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dChnZXRFcnJvcihcIlVuYWJsZSB0byBzZXQgdGltZXNcIiwgZmlsZVBhdGgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sIGNhbGxiYWNrKSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXcml0ZXMgdGhlIG5ld2x5IGNyZWF0ZWQgemlwIGZpbGUgdG8gZGlzayBhdCB0aGUgc3BlY2lmaWVkIGxvY2F0aW9uIG9yIGlmIGEgemlwIHdhcyBvcGVuZWQgYW5kIG5vIGBgdGFyZ2V0RmlsZU5hbWVgYCBpcyBwcm92aWRlZCwgaXQgd2lsbCBvdmVyd3JpdGUgdGhlIG9wZW5lZCB6aXBcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldEZpbGVOYW1lXG4gICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICAgICAqL1xuICAgICAgICB3cml0ZVppcDogZnVuY3Rpb24gKHRhcmdldEZpbGVOYW1lLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldEZpbGVOYW1lID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPSB0YXJnZXRGaWxlTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RmlsZU5hbWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF0YXJnZXRGaWxlTmFtZSAmJiBvcHRzLmZpbGVuYW1lKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0RmlsZU5hbWUgPSBvcHRzLmZpbGVuYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0YXJnZXRGaWxlTmFtZSkgcmV0dXJuO1xuXG4gICAgICAgICAgICB2YXIgemlwRGF0YSA9IF96aXAuY29tcHJlc3NUb0J1ZmZlcigpO1xuICAgICAgICAgICAgaWYgKHppcERhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2sgPSBmaWxldG9vbHMud3JpdGVGaWxlVG8odGFyZ2V0RmlsZU5hbWUsIHppcERhdGEsIHRydWUpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIikgY2FsbGJhY2soIW9rID8gbmV3IEVycm9yKFwiZmFpbGVkXCIpIDogbnVsbCwgXCJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXRGaWxlTmFtZVxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gW3Byb3BzXVxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtwcm9wcy5vdmVyd3JpdGU9dHJ1ZV0gSWYgdGhlIGZpbGUgYWxyZWFkeSBleGlzdHMgYXQgdGhlIHRhcmdldCBwYXRoLCB0aGUgZmlsZSB3aWxsIGJlIG92ZXJ3cml0ZW4gaWYgdGhpcyBpcyB0cnVlLlxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtwcm9wcy5wZXJtXSBUaGUgZmlsZSB3aWxsIGJlIHNldCBhcyB0aGUgcGVybWlzc2lvbiBmcm9tIHRoZSBlbnRyeSBpZiB0aGlzIGlzIHRydWUuXG5cbiAgICAgICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAgICAgICAqL1xuICAgICAgICB3cml0ZVppcFByb21pc2U6IGZ1bmN0aW9uICgvKipTdHJpbmcqLyB0YXJnZXRGaWxlTmFtZSwgLyogb2JqZWN0ICovIHByb3BzKSB7XG4gICAgICAgICAgICBjb25zdCB7IG92ZXJ3cml0ZSwgcGVybSB9ID0gT2JqZWN0LmFzc2lnbih7IG92ZXJ3cml0ZTogdHJ1ZSB9LCBwcm9wcyk7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gZmluZCBmaWxlIG5hbWVcbiAgICAgICAgICAgICAgICBpZiAoIXRhcmdldEZpbGVOYW1lICYmIG9wdHMuZmlsZW5hbWUpIHRhcmdldEZpbGVOYW1lID0gb3B0cy5maWxlbmFtZTtcbiAgICAgICAgICAgICAgICBpZiAoIXRhcmdldEZpbGVOYW1lKSByZWplY3QoXCJBRE0tWklQOiBaSVAgRmlsZSBOYW1lIE1pc3NpbmdcIik7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnRvQnVmZmVyUHJvbWlzZSgpLnRoZW4oKHppcERhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmV0ID0gKGRvbmUpID0+IChkb25lID8gcmVzb2x2ZShkb25lKSA6IHJlamVjdChcIkFETS1aSVA6IFdhc24ndCBhYmxlIHRvIHdyaXRlIHppcCBmaWxlXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgZmlsZXRvb2xzLndyaXRlRmlsZVRvQXN5bmModGFyZ2V0RmlsZU5hbWUsIHppcERhdGEsIG92ZXJ3cml0ZSwgcGVybSwgcmV0KTtcbiAgICAgICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEJ1ZmZlcj59IEEgcHJvbWlzZSB0byB0aGUgQnVmZmVyLlxuICAgICAgICAgKi9cbiAgICAgICAgdG9CdWZmZXJQcm9taXNlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIF96aXAudG9Bc3luY0J1ZmZlcihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIGNvbnRlbnQgb2YgdGhlIGVudGlyZSB6aXAgZmlsZSBhcyBhIEJ1ZmZlciBvYmplY3RcbiAgICAgICAgICpcbiAgICAgICAgICogQHByb3Age2Z1bmN0aW9ufSBbb25TdWNjZXNzXVxuICAgICAgICAgKiBAcHJvcCB7ZnVuY3Rpb259IFtvbkZhaWxdXG4gICAgICAgICAqIEBwcm9wIHtmdW5jdGlvbn0gW29uSXRlbVN0YXJ0XVxuICAgICAgICAgKiBAcHJvcCB7ZnVuY3Rpb259IFtvbkl0ZW1FbmRdXG4gICAgICAgICAqIEByZXR1cm5zIHtCdWZmZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0b0J1ZmZlcjogZnVuY3Rpb24gKG9uU3VjY2Vzcywgb25GYWlsLCBvbkl0ZW1TdGFydCwgb25JdGVtRW5kKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9uU3VjY2VzcyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgX3ppcC50b0FzeW5jQnVmZmVyKG9uU3VjY2Vzcywgb25GYWlsLCBvbkl0ZW1TdGFydCwgb25JdGVtRW5kKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfemlwLmNvbXByZXNzVG9CdWZmZXIoKTtcbiAgICAgICAgfVxuICAgIH07XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gaGFzS2V5KG9iaiwga2V5cykge1xuXHR2YXIgbyA9IG9iajtcblx0a2V5cy5zbGljZSgwLCAtMSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0byA9IG9ba2V5XSB8fCB7fTtcblx0fSk7XG5cblx0dmFyIGtleSA9IGtleXNba2V5cy5sZW5ndGggLSAxXTtcblx0cmV0dXJuIGtleSBpbiBvO1xufVxuXG5mdW5jdGlvbiBpc051bWJlcih4KSB7XG5cdGlmICh0eXBlb2YgeCA9PT0gJ251bWJlcicpIHsgcmV0dXJuIHRydWU7IH1cblx0aWYgKCgvXjB4WzAtOWEtZl0rJC9pKS50ZXN0KHgpKSB7IHJldHVybiB0cnVlOyB9XG5cdHJldHVybiAoL15bLStdPyg/OlxcZCsoPzpcXC5cXGQqKT98XFwuXFxkKykoZVstK10/XFxkKyk/JC8pLnRlc3QoeCk7XG59XG5cbmZ1bmN0aW9uIGlzQ29uc3RydWN0b3JPclByb3RvKG9iaiwga2V5KSB7XG5cdHJldHVybiAoa2V5ID09PSAnY29uc3RydWN0b3InICYmIHR5cGVvZiBvYmpba2V5XSA9PT0gJ2Z1bmN0aW9uJykgfHwga2V5ID09PSAnX19wcm90b19fJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJncywgb3B0cykge1xuXHRpZiAoIW9wdHMpIHsgb3B0cyA9IHt9OyB9XG5cblx0dmFyIGZsYWdzID0ge1xuXHRcdGJvb2xzOiB7fSxcblx0XHRzdHJpbmdzOiB7fSxcblx0XHR1bmtub3duRm46IG51bGwsXG5cdH07XG5cblx0aWYgKHR5cGVvZiBvcHRzLnVua25vd24gPT09ICdmdW5jdGlvbicpIHtcblx0XHRmbGFncy51bmtub3duRm4gPSBvcHRzLnVua25vd247XG5cdH1cblxuXHRpZiAodHlwZW9mIG9wdHMuYm9vbGVhbiA9PT0gJ2Jvb2xlYW4nICYmIG9wdHMuYm9vbGVhbikge1xuXHRcdGZsYWdzLmFsbEJvb2xzID0gdHJ1ZTtcblx0fSBlbHNlIHtcblx0XHRbXS5jb25jYXQob3B0cy5ib29sZWFuKS5maWx0ZXIoQm9vbGVhbikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRmbGFncy5ib29sc1trZXldID0gdHJ1ZTtcblx0XHR9KTtcblx0fVxuXG5cdHZhciBhbGlhc2VzID0ge307XG5cblx0ZnVuY3Rpb24gYWxpYXNJc0Jvb2xlYW4oa2V5KSB7XG5cdFx0cmV0dXJuIGFsaWFzZXNba2V5XS5zb21lKGZ1bmN0aW9uICh4KSB7XG5cdFx0XHRyZXR1cm4gZmxhZ3MuYm9vbHNbeF07XG5cdFx0fSk7XG5cdH1cblxuXHRPYmplY3Qua2V5cyhvcHRzLmFsaWFzIHx8IHt9KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRhbGlhc2VzW2tleV0gPSBbXS5jb25jYXQob3B0cy5hbGlhc1trZXldKTtcblx0XHRhbGlhc2VzW2tleV0uZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuXHRcdFx0YWxpYXNlc1t4XSA9IFtrZXldLmNvbmNhdChhbGlhc2VzW2tleV0uZmlsdGVyKGZ1bmN0aW9uICh5KSB7XG5cdFx0XHRcdHJldHVybiB4ICE9PSB5O1xuXHRcdFx0fSkpO1xuXHRcdH0pO1xuXHR9KTtcblxuXHRbXS5jb25jYXQob3B0cy5zdHJpbmcpLmZpbHRlcihCb29sZWFuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRmbGFncy5zdHJpbmdzW2tleV0gPSB0cnVlO1xuXHRcdGlmIChhbGlhc2VzW2tleV0pIHtcblx0XHRcdFtdLmNvbmNhdChhbGlhc2VzW2tleV0pLmZvckVhY2goZnVuY3Rpb24gKGspIHtcblx0XHRcdFx0ZmxhZ3Muc3RyaW5nc1trXSA9IHRydWU7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0pO1xuXG5cdHZhciBkZWZhdWx0cyA9IG9wdHMuZGVmYXVsdCB8fCB7fTtcblxuXHR2YXIgYXJndiA9IHsgXzogW10gfTtcblxuXHRmdW5jdGlvbiBhcmdEZWZpbmVkKGtleSwgYXJnKSB7XG5cdFx0cmV0dXJuIChmbGFncy5hbGxCb29scyAmJiAoL14tLVtePV0rJC8pLnRlc3QoYXJnKSlcblx0XHRcdHx8IGZsYWdzLnN0cmluZ3Nba2V5XVxuXHRcdFx0fHwgZmxhZ3MuYm9vbHNba2V5XVxuXHRcdFx0fHwgYWxpYXNlc1trZXldO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2V0S2V5KG9iaiwga2V5cywgdmFsdWUpIHtcblx0XHR2YXIgbyA9IG9iajtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoIC0gMTsgaSsrKSB7XG5cdFx0XHR2YXIga2V5ID0ga2V5c1tpXTtcblx0XHRcdGlmIChpc0NvbnN0cnVjdG9yT3JQcm90byhvLCBrZXkpKSB7IHJldHVybjsgfVxuXHRcdFx0aWYgKG9ba2V5XSA9PT0gdW5kZWZpbmVkKSB7IG9ba2V5XSA9IHt9OyB9XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG9ba2V5XSA9PT0gT2JqZWN0LnByb3RvdHlwZVxuXHRcdFx0XHR8fCBvW2tleV0gPT09IE51bWJlci5wcm90b3R5cGVcblx0XHRcdFx0fHwgb1trZXldID09PSBTdHJpbmcucHJvdG90eXBlXG5cdFx0XHQpIHtcblx0XHRcdFx0b1trZXldID0ge307XG5cdFx0XHR9XG5cdFx0XHRpZiAob1trZXldID09PSBBcnJheS5wcm90b3R5cGUpIHsgb1trZXldID0gW107IH1cblx0XHRcdG8gPSBvW2tleV07XG5cdFx0fVxuXG5cdFx0dmFyIGxhc3RLZXkgPSBrZXlzW2tleXMubGVuZ3RoIC0gMV07XG5cdFx0aWYgKGlzQ29uc3RydWN0b3JPclByb3RvKG8sIGxhc3RLZXkpKSB7IHJldHVybjsgfVxuXHRcdGlmIChcblx0XHRcdG8gPT09IE9iamVjdC5wcm90b3R5cGVcblx0XHRcdHx8IG8gPT09IE51bWJlci5wcm90b3R5cGVcblx0XHRcdHx8IG8gPT09IFN0cmluZy5wcm90b3R5cGVcblx0XHQpIHtcblx0XHRcdG8gPSB7fTtcblx0XHR9XG5cdFx0aWYgKG8gPT09IEFycmF5LnByb3RvdHlwZSkgeyBvID0gW107IH1cblx0XHRpZiAob1tsYXN0S2V5XSA9PT0gdW5kZWZpbmVkIHx8IGZsYWdzLmJvb2xzW2xhc3RLZXldIHx8IHR5cGVvZiBvW2xhc3RLZXldID09PSAnYm9vbGVhbicpIHtcblx0XHRcdG9bbGFzdEtleV0gPSB2YWx1ZTtcblx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob1tsYXN0S2V5XSkpIHtcblx0XHRcdG9bbGFzdEtleV0ucHVzaCh2YWx1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG9bbGFzdEtleV0gPSBbb1tsYXN0S2V5XSwgdmFsdWVdO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIHNldEFyZyhrZXksIHZhbCwgYXJnKSB7XG5cdFx0aWYgKGFyZyAmJiBmbGFncy51bmtub3duRm4gJiYgIWFyZ0RlZmluZWQoa2V5LCBhcmcpKSB7XG5cdFx0XHRpZiAoZmxhZ3MudW5rbm93bkZuKGFyZykgPT09IGZhbHNlKSB7IHJldHVybjsgfVxuXHRcdH1cblxuXHRcdHZhciB2YWx1ZSA9ICFmbGFncy5zdHJpbmdzW2tleV0gJiYgaXNOdW1iZXIodmFsKVxuXHRcdFx0PyBOdW1iZXIodmFsKVxuXHRcdFx0OiB2YWw7XG5cdFx0c2V0S2V5KGFyZ3YsIGtleS5zcGxpdCgnLicpLCB2YWx1ZSk7XG5cblx0XHQoYWxpYXNlc1trZXldIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG5cdFx0XHRzZXRLZXkoYXJndiwgeC5zcGxpdCgnLicpLCB2YWx1ZSk7XG5cdFx0fSk7XG5cdH1cblxuXHRPYmplY3Qua2V5cyhmbGFncy5ib29scykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0c2V0QXJnKGtleSwgZGVmYXVsdHNba2V5XSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBkZWZhdWx0c1trZXldKTtcblx0fSk7XG5cblx0dmFyIG5vdEZsYWdzID0gW107XG5cblx0aWYgKGFyZ3MuaW5kZXhPZignLS0nKSAhPT0gLTEpIHtcblx0XHRub3RGbGFncyA9IGFyZ3Muc2xpY2UoYXJncy5pbmRleE9mKCctLScpICsgMSk7XG5cdFx0YXJncyA9IGFyZ3Muc2xpY2UoMCwgYXJncy5pbmRleE9mKCctLScpKTtcblx0fVxuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBhcmcgPSBhcmdzW2ldO1xuXHRcdHZhciBrZXk7XG5cdFx0dmFyIG5leHQ7XG5cblx0XHRpZiAoKC9eLS0uKz0vKS50ZXN0KGFyZykpIHtcblx0XHRcdC8vIFVzaW5nIFtcXHNcXFNdIGluc3RlYWQgb2YgLiBiZWNhdXNlIGpzIGRvZXNuJ3Qgc3VwcG9ydCB0aGVcblx0XHRcdC8vICdkb3RhbGwnIHJlZ2V4IG1vZGlmaWVyLiBTZWU6XG5cdFx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMDY4MzA4LzEzMjE2XG5cdFx0XHR2YXIgbSA9IGFyZy5tYXRjaCgvXi0tKFtePV0rKT0oW1xcc1xcU10qKSQvKTtcblx0XHRcdGtleSA9IG1bMV07XG5cdFx0XHR2YXIgdmFsdWUgPSBtWzJdO1xuXHRcdFx0aWYgKGZsYWdzLmJvb2xzW2tleV0pIHtcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZSAhPT0gJ2ZhbHNlJztcblx0XHRcdH1cblx0XHRcdHNldEFyZyhrZXksIHZhbHVlLCBhcmcpO1xuXHRcdH0gZWxzZSBpZiAoKC9eLS1uby0uKy8pLnRlc3QoYXJnKSkge1xuXHRcdFx0a2V5ID0gYXJnLm1hdGNoKC9eLS1uby0oLispLylbMV07XG5cdFx0XHRzZXRBcmcoa2V5LCBmYWxzZSwgYXJnKTtcblx0XHR9IGVsc2UgaWYgKCgvXi0tLisvKS50ZXN0KGFyZykpIHtcblx0XHRcdGtleSA9IGFyZy5tYXRjaCgvXi0tKC4rKS8pWzFdO1xuXHRcdFx0bmV4dCA9IGFyZ3NbaSArIDFdO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuZXh0ICE9PSB1bmRlZmluZWRcblx0XHRcdFx0JiYgISgvXigtfC0tKVteLV0vKS50ZXN0KG5leHQpXG5cdFx0XHRcdCYmICFmbGFncy5ib29sc1trZXldXG5cdFx0XHRcdCYmICFmbGFncy5hbGxCb29sc1xuXHRcdFx0XHQmJiAoYWxpYXNlc1trZXldID8gIWFsaWFzSXNCb29sZWFuKGtleSkgOiB0cnVlKVxuXHRcdFx0KSB7XG5cdFx0XHRcdHNldEFyZyhrZXksIG5leHQsIGFyZyk7XG5cdFx0XHRcdGkgKz0gMTtcblx0XHRcdH0gZWxzZSBpZiAoKC9eKHRydWV8ZmFsc2UpJC8pLnRlc3QobmV4dCkpIHtcblx0XHRcdFx0c2V0QXJnKGtleSwgbmV4dCA9PT0gJ3RydWUnLCBhcmcpO1xuXHRcdFx0XHRpICs9IDE7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZXRBcmcoa2V5LCBmbGFncy5zdHJpbmdzW2tleV0gPyAnJyA6IHRydWUsIGFyZyk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICgoL14tW14tXSsvKS50ZXN0KGFyZykpIHtcblx0XHRcdHZhciBsZXR0ZXJzID0gYXJnLnNsaWNlKDEsIC0xKS5zcGxpdCgnJyk7XG5cblx0XHRcdHZhciBicm9rZW4gPSBmYWxzZTtcblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgbGV0dGVycy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRuZXh0ID0gYXJnLnNsaWNlKGogKyAyKTtcblxuXHRcdFx0XHRpZiAobmV4dCA9PT0gJy0nKSB7XG5cdFx0XHRcdFx0c2V0QXJnKGxldHRlcnNbal0sIG5leHQsIGFyZyk7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoKC9bQS1aYS16XS8pLnRlc3QobGV0dGVyc1tqXSkgJiYgbmV4dFswXSA9PT0gJz0nKSB7XG5cdFx0XHRcdFx0c2V0QXJnKGxldHRlcnNbal0sIG5leHQuc2xpY2UoMSksIGFyZyk7XG5cdFx0XHRcdFx0YnJva2VuID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHQoL1tBLVphLXpdLykudGVzdChsZXR0ZXJzW2pdKVxuXHRcdFx0XHRcdCYmICgvLT9cXGQrKFxcLlxcZCopPyhlLT9cXGQrKT8kLykudGVzdChuZXh0KVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRzZXRBcmcobGV0dGVyc1tqXSwgbmV4dCwgYXJnKTtcblx0XHRcdFx0XHRicm9rZW4gPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGxldHRlcnNbaiArIDFdICYmIGxldHRlcnNbaiArIDFdLm1hdGNoKC9cXFcvKSkge1xuXHRcdFx0XHRcdHNldEFyZyhsZXR0ZXJzW2pdLCBhcmcuc2xpY2UoaiArIDIpLCBhcmcpO1xuXHRcdFx0XHRcdGJyb2tlbiA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2V0QXJnKGxldHRlcnNbal0sIGZsYWdzLnN0cmluZ3NbbGV0dGVyc1tqXV0gPyAnJyA6IHRydWUsIGFyZyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0a2V5ID0gYXJnLnNsaWNlKC0xKVswXTtcblx0XHRcdGlmICghYnJva2VuICYmIGtleSAhPT0gJy0nKSB7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRhcmdzW2kgKyAxXVxuXHRcdFx0XHRcdCYmICEoL14oLXwtLSlbXi1dLykudGVzdChhcmdzW2kgKyAxXSlcblx0XHRcdFx0XHQmJiAhZmxhZ3MuYm9vbHNba2V5XVxuXHRcdFx0XHRcdCYmIChhbGlhc2VzW2tleV0gPyAhYWxpYXNJc0Jvb2xlYW4oa2V5KSA6IHRydWUpXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHNldEFyZyhrZXksIGFyZ3NbaSArIDFdLCBhcmcpO1xuXHRcdFx0XHRcdGkgKz0gMTtcblx0XHRcdFx0fSBlbHNlIGlmIChhcmdzW2kgKyAxXSAmJiAoL14odHJ1ZXxmYWxzZSkkLykudGVzdChhcmdzW2kgKyAxXSkpIHtcblx0XHRcdFx0XHRzZXRBcmcoa2V5LCBhcmdzW2kgKyAxXSA9PT0gJ3RydWUnLCBhcmcpO1xuXHRcdFx0XHRcdGkgKz0gMTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZXRBcmcoa2V5LCBmbGFncy5zdHJpbmdzW2tleV0gPyAnJyA6IHRydWUsIGFyZyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCFmbGFncy51bmtub3duRm4gfHwgZmxhZ3MudW5rbm93bkZuKGFyZykgIT09IGZhbHNlKSB7XG5cdFx0XHRcdGFyZ3YuXy5wdXNoKGZsYWdzLnN0cmluZ3MuXyB8fCAhaXNOdW1iZXIoYXJnKSA/IGFyZyA6IE51bWJlcihhcmcpKTtcblx0XHRcdH1cblx0XHRcdGlmIChvcHRzLnN0b3BFYXJseSkge1xuXHRcdFx0XHRhcmd2Ll8ucHVzaC5hcHBseShhcmd2Ll8sIGFyZ3Muc2xpY2UoaSArIDEpKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0T2JqZWN0LmtleXMoZGVmYXVsdHMpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcblx0XHRpZiAoIWhhc0tleShhcmd2LCBrLnNwbGl0KCcuJykpKSB7XG5cdFx0XHRzZXRLZXkoYXJndiwgay5zcGxpdCgnLicpLCBkZWZhdWx0c1trXSk7XG5cblx0XHRcdChhbGlhc2VzW2tdIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG5cdFx0XHRcdHNldEtleShhcmd2LCB4LnNwbGl0KCcuJyksIGRlZmF1bHRzW2tdKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fSk7XG5cblx0aWYgKG9wdHNbJy0tJ10pIHtcblx0XHRhcmd2WyctLSddID0gbm90RmxhZ3Muc2xpY2UoKTtcblx0fSBlbHNlIHtcblx0XHRub3RGbGFncy5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG5cdFx0XHRhcmd2Ll8ucHVzaChrKTtcblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiBhcmd2O1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHsgRk9SQ0VfQ09MT1IsIE5PREVfRElTQUJMRV9DT0xPUlMsIFRFUk0gfSA9IHByb2Nlc3MuZW52O1xuXG5jb25zdCAkID0ge1xuXHRlbmFibGVkOiAhTk9ERV9ESVNBQkxFX0NPTE9SUyAmJiBURVJNICE9PSAnZHVtYicgJiYgRk9SQ0VfQ09MT1IgIT09ICcwJyxcblxuXHQvLyBtb2RpZmllcnNcblx0cmVzZXQ6IGluaXQoMCwgMCksXG5cdGJvbGQ6IGluaXQoMSwgMjIpLFxuXHRkaW06IGluaXQoMiwgMjIpLFxuXHRpdGFsaWM6IGluaXQoMywgMjMpLFxuXHR1bmRlcmxpbmU6IGluaXQoNCwgMjQpLFxuXHRpbnZlcnNlOiBpbml0KDcsIDI3KSxcblx0aGlkZGVuOiBpbml0KDgsIDI4KSxcblx0c3RyaWtldGhyb3VnaDogaW5pdCg5LCAyOSksXG5cblx0Ly8gY29sb3JzXG5cdGJsYWNrOiBpbml0KDMwLCAzOSksXG5cdHJlZDogaW5pdCgzMSwgMzkpLFxuXHRncmVlbjogaW5pdCgzMiwgMzkpLFxuXHR5ZWxsb3c6IGluaXQoMzMsIDM5KSxcblx0Ymx1ZTogaW5pdCgzNCwgMzkpLFxuXHRtYWdlbnRhOiBpbml0KDM1LCAzOSksXG5cdGN5YW46IGluaXQoMzYsIDM5KSxcblx0d2hpdGU6IGluaXQoMzcsIDM5KSxcblx0Z3JheTogaW5pdCg5MCwgMzkpLFxuXHRncmV5OiBpbml0KDkwLCAzOSksXG5cblx0Ly8gYmFja2dyb3VuZCBjb2xvcnNcblx0YmdCbGFjazogaW5pdCg0MCwgNDkpLFxuXHRiZ1JlZDogaW5pdCg0MSwgNDkpLFxuXHRiZ0dyZWVuOiBpbml0KDQyLCA0OSksXG5cdGJnWWVsbG93OiBpbml0KDQzLCA0OSksXG5cdGJnQmx1ZTogaW5pdCg0NCwgNDkpLFxuXHRiZ01hZ2VudGE6IGluaXQoNDUsIDQ5KSxcblx0YmdDeWFuOiBpbml0KDQ2LCA0OSksXG5cdGJnV2hpdGU6IGluaXQoNDcsIDQ5KVxufTtcblxuZnVuY3Rpb24gcnVuKGFyciwgc3RyKSB7XG5cdGxldCBpPTAsIHRtcCwgYmVnPScnLCBlbmQ9Jyc7XG5cdGZvciAoOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG5cdFx0dG1wID0gYXJyW2ldO1xuXHRcdGJlZyArPSB0bXAub3Blbjtcblx0XHRlbmQgKz0gdG1wLmNsb3NlO1xuXHRcdGlmIChzdHIuaW5jbHVkZXModG1wLmNsb3NlKSkge1xuXHRcdFx0c3RyID0gc3RyLnJlcGxhY2UodG1wLnJneCwgdG1wLmNsb3NlICsgdG1wLm9wZW4pO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYmVnICsgc3RyICsgZW5kO1xufVxuXG5mdW5jdGlvbiBjaGFpbihoYXMsIGtleXMpIHtcblx0bGV0IGN0eCA9IHsgaGFzLCBrZXlzIH07XG5cblx0Y3R4LnJlc2V0ID0gJC5yZXNldC5iaW5kKGN0eCk7XG5cdGN0eC5ib2xkID0gJC5ib2xkLmJpbmQoY3R4KTtcblx0Y3R4LmRpbSA9ICQuZGltLmJpbmQoY3R4KTtcblx0Y3R4Lml0YWxpYyA9ICQuaXRhbGljLmJpbmQoY3R4KTtcblx0Y3R4LnVuZGVybGluZSA9ICQudW5kZXJsaW5lLmJpbmQoY3R4KTtcblx0Y3R4LmludmVyc2UgPSAkLmludmVyc2UuYmluZChjdHgpO1xuXHRjdHguaGlkZGVuID0gJC5oaWRkZW4uYmluZChjdHgpO1xuXHRjdHguc3RyaWtldGhyb3VnaCA9ICQuc3RyaWtldGhyb3VnaC5iaW5kKGN0eCk7XG5cblx0Y3R4LmJsYWNrID0gJC5ibGFjay5iaW5kKGN0eCk7XG5cdGN0eC5yZWQgPSAkLnJlZC5iaW5kKGN0eCk7XG5cdGN0eC5ncmVlbiA9ICQuZ3JlZW4uYmluZChjdHgpO1xuXHRjdHgueWVsbG93ID0gJC55ZWxsb3cuYmluZChjdHgpO1xuXHRjdHguYmx1ZSA9ICQuYmx1ZS5iaW5kKGN0eCk7XG5cdGN0eC5tYWdlbnRhID0gJC5tYWdlbnRhLmJpbmQoY3R4KTtcblx0Y3R4LmN5YW4gPSAkLmN5YW4uYmluZChjdHgpO1xuXHRjdHgud2hpdGUgPSAkLndoaXRlLmJpbmQoY3R4KTtcblx0Y3R4LmdyYXkgPSAkLmdyYXkuYmluZChjdHgpO1xuXHRjdHguZ3JleSA9ICQuZ3JleS5iaW5kKGN0eCk7XG5cblx0Y3R4LmJnQmxhY2sgPSAkLmJnQmxhY2suYmluZChjdHgpO1xuXHRjdHguYmdSZWQgPSAkLmJnUmVkLmJpbmQoY3R4KTtcblx0Y3R4LmJnR3JlZW4gPSAkLmJnR3JlZW4uYmluZChjdHgpO1xuXHRjdHguYmdZZWxsb3cgPSAkLmJnWWVsbG93LmJpbmQoY3R4KTtcblx0Y3R4LmJnQmx1ZSA9ICQuYmdCbHVlLmJpbmQoY3R4KTtcblx0Y3R4LmJnTWFnZW50YSA9ICQuYmdNYWdlbnRhLmJpbmQoY3R4KTtcblx0Y3R4LmJnQ3lhbiA9ICQuYmdDeWFuLmJpbmQoY3R4KTtcblx0Y3R4LmJnV2hpdGUgPSAkLmJnV2hpdGUuYmluZChjdHgpO1xuXG5cdHJldHVybiBjdHg7XG59XG5cbmZ1bmN0aW9uIGluaXQob3BlbiwgY2xvc2UpIHtcblx0bGV0IGJsayA9IHtcblx0XHRvcGVuOiBgXFx4MWJbJHtvcGVufW1gLFxuXHRcdGNsb3NlOiBgXFx4MWJbJHtjbG9zZX1tYCxcblx0XHRyZ3g6IG5ldyBSZWdFeHAoYFxcXFx4MWJcXFxcWyR7Y2xvc2V9bWAsICdnJylcblx0fTtcblx0cmV0dXJuIGZ1bmN0aW9uICh0eHQpIHtcblx0XHRpZiAodGhpcyAhPT0gdm9pZCAwICYmIHRoaXMuaGFzICE9PSB2b2lkIDApIHtcblx0XHRcdHRoaXMuaGFzLmluY2x1ZGVzKG9wZW4pIHx8ICh0aGlzLmhhcy5wdXNoKG9wZW4pLHRoaXMua2V5cy5wdXNoKGJsaykpO1xuXHRcdFx0cmV0dXJuIHR4dCA9PT0gdm9pZCAwID8gdGhpcyA6ICQuZW5hYmxlZCA/IHJ1bih0aGlzLmtleXMsIHR4dCsnJykgOiB0eHQrJyc7XG5cdFx0fVxuXHRcdHJldHVybiB0eHQgPT09IHZvaWQgMCA/IGNoYWluKFtvcGVuXSwgW2Jsa10pIDogJC5lbmFibGVkID8gcnVuKFtibGtdLCB0eHQrJycpIDogdHh0KycnO1xuXHR9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9ICQ7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChrZXksIGlzU2VsZWN0KSA9PiB7XG4gIGlmIChrZXkubWV0YSAmJiBrZXkubmFtZSAhPT0gJ2VzY2FwZScpIHJldHVybjtcblxuICBpZiAoa2V5LmN0cmwpIHtcbiAgICBpZiAoa2V5Lm5hbWUgPT09ICdhJykgcmV0dXJuICdmaXJzdCc7XG4gICAgaWYgKGtleS5uYW1lID09PSAnYycpIHJldHVybiAnYWJvcnQnO1xuICAgIGlmIChrZXkubmFtZSA9PT0gJ2QnKSByZXR1cm4gJ2Fib3J0JztcbiAgICBpZiAoa2V5Lm5hbWUgPT09ICdlJykgcmV0dXJuICdsYXN0JztcbiAgICBpZiAoa2V5Lm5hbWUgPT09ICdnJykgcmV0dXJuICdyZXNldCc7XG4gIH1cblxuICBpZiAoaXNTZWxlY3QpIHtcbiAgICBpZiAoa2V5Lm5hbWUgPT09ICdqJykgcmV0dXJuICdkb3duJztcbiAgICBpZiAoa2V5Lm5hbWUgPT09ICdrJykgcmV0dXJuICd1cCc7XG4gIH1cblxuICBpZiAoa2V5Lm5hbWUgPT09ICdyZXR1cm4nKSByZXR1cm4gJ3N1Ym1pdCc7XG4gIGlmIChrZXkubmFtZSA9PT0gJ2VudGVyJykgcmV0dXJuICdzdWJtaXQnOyAvLyBjdHJsICsgSlxuXG4gIGlmIChrZXkubmFtZSA9PT0gJ2JhY2tzcGFjZScpIHJldHVybiAnZGVsZXRlJztcbiAgaWYgKGtleS5uYW1lID09PSAnZGVsZXRlJykgcmV0dXJuICdkZWxldGVGb3J3YXJkJztcbiAgaWYgKGtleS5uYW1lID09PSAnYWJvcnQnKSByZXR1cm4gJ2Fib3J0JztcbiAgaWYgKGtleS5uYW1lID09PSAnZXNjYXBlJykgcmV0dXJuICdleGl0JztcbiAgaWYgKGtleS5uYW1lID09PSAndGFiJykgcmV0dXJuICduZXh0JztcbiAgaWYgKGtleS5uYW1lID09PSAncGFnZWRvd24nKSByZXR1cm4gJ25leHRQYWdlJztcbiAgaWYgKGtleS5uYW1lID09PSAncGFnZXVwJykgcmV0dXJuICdwcmV2UGFnZSc7IC8vIFRPRE8gY3JlYXRlIGhvbWUoKSBpbiBwcm9tcHQgdHlwZXMgKGUuZy4gVGV4dFByb21wdClcblxuICBpZiAoa2V5Lm5hbWUgPT09ICdob21lJykgcmV0dXJuICdob21lJzsgLy8gVE9ETyBjcmVhdGUgZW5kKCkgaW4gcHJvbXB0IHR5cGVzIChlLmcuIFRleHRQcm9tcHQpXG5cbiAgaWYgKGtleS5uYW1lID09PSAnZW5kJykgcmV0dXJuICdlbmQnO1xuICBpZiAoa2V5Lm5hbWUgPT09ICd1cCcpIHJldHVybiAndXAnO1xuICBpZiAoa2V5Lm5hbWUgPT09ICdkb3duJykgcmV0dXJuICdkb3duJztcbiAgaWYgKGtleS5uYW1lID09PSAncmlnaHQnKSByZXR1cm4gJ3JpZ2h0JztcbiAgaWYgKGtleS5uYW1lID09PSAnbGVmdCcpIHJldHVybiAnbGVmdCc7XG4gIHJldHVybiBmYWxzZTtcbn07IiwgIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBzdHIgPT4ge1xuICBjb25zdCBwYXR0ZXJuID0gWydbXFxcXHUwMDFCXFxcXHUwMDlCXVtbXFxcXF0oKSM7P10qKD86KD86KD86KD86O1stYS16QS1aXFxcXGRcXFxcLyMmLjo9PyVAfl9dKykqfFthLXpBLVpcXFxcZF0rKD86O1stYS16QS1aXFxcXGRcXFxcLyMmLjo9PyVAfl9dKikqKT9cXFxcdTAwMDcpJywgJyg/Oig/OlxcXFxkezEsNH0oPzo7XFxcXGR7MCw0fSkqKT9bXFxcXGRBLVBSWmNmLW50cXJ5PT48fl0pKSddLmpvaW4oJ3wnKTtcbiAgY29uc3QgUkdYID0gbmV3IFJlZ0V4cChwYXR0ZXJuLCAnZycpO1xuICByZXR1cm4gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgPyBzdHIucmVwbGFjZShSR1gsICcnKSA6IHN0cjtcbn07IiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRVNDID0gJ1xceDFCJztcbmNvbnN0IENTSSA9IGAke0VTQ31bYDtcbmNvbnN0IGJlZXAgPSAnXFx1MDAwNyc7XG5cbmNvbnN0IGN1cnNvciA9IHtcbiAgdG8oeCwgeSkge1xuICAgIGlmICgheSkgcmV0dXJuIGAke0NTSX0ke3ggKyAxfUdgO1xuICAgIHJldHVybiBgJHtDU0l9JHt5ICsgMX07JHt4ICsgMX1IYDtcbiAgfSxcbiAgbW92ZSh4LCB5KSB7XG4gICAgbGV0IHJldCA9ICcnO1xuXG4gICAgaWYgKHggPCAwKSByZXQgKz0gYCR7Q1NJfSR7LXh9RGA7XG4gICAgZWxzZSBpZiAoeCA+IDApIHJldCArPSBgJHtDU0l9JHt4fUNgO1xuXG4gICAgaWYgKHkgPCAwKSByZXQgKz0gYCR7Q1NJfSR7LXl9QWA7XG4gICAgZWxzZSBpZiAoeSA+IDApIHJldCArPSBgJHtDU0l9JHt5fUJgO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfSxcbiAgdXA6IChjb3VudCA9IDEpID0+IGAke0NTSX0ke2NvdW50fUFgLFxuICBkb3duOiAoY291bnQgPSAxKSA9PiBgJHtDU0l9JHtjb3VudH1CYCxcbiAgZm9yd2FyZDogKGNvdW50ID0gMSkgPT4gYCR7Q1NJfSR7Y291bnR9Q2AsXG4gIGJhY2t3YXJkOiAoY291bnQgPSAxKSA9PiBgJHtDU0l9JHtjb3VudH1EYCxcbiAgbmV4dExpbmU6IChjb3VudCA9IDEpID0+IGAke0NTSX1FYC5yZXBlYXQoY291bnQpLFxuICBwcmV2TGluZTogKGNvdW50ID0gMSkgPT4gYCR7Q1NJfUZgLnJlcGVhdChjb3VudCksXG4gIGxlZnQ6IGAke0NTSX1HYCxcbiAgaGlkZTogYCR7Q1NJfT8yNWxgLFxuICBzaG93OiBgJHtDU0l9PzI1aGAsXG4gIHNhdmU6IGAke0VTQ303YCxcbiAgcmVzdG9yZTogYCR7RVNDfThgXG59XG5cbmNvbnN0IHNjcm9sbCA9IHtcbiAgdXA6IChjb3VudCA9IDEpID0+IGAke0NTSX1TYC5yZXBlYXQoY291bnQpLFxuICBkb3duOiAoY291bnQgPSAxKSA9PiBgJHtDU0l9VGAucmVwZWF0KGNvdW50KVxufVxuXG5jb25zdCBlcmFzZSA9IHtcbiAgc2NyZWVuOiBgJHtDU0l9MkpgLFxuICB1cDogKGNvdW50ID0gMSkgPT4gYCR7Q1NJfTFKYC5yZXBlYXQoY291bnQpLFxuICBkb3duOiAoY291bnQgPSAxKSA9PiBgJHtDU0l9SmAucmVwZWF0KGNvdW50KSxcbiAgbGluZTogYCR7Q1NJfTJLYCxcbiAgbGluZUVuZDogYCR7Q1NJfUtgLFxuICBsaW5lU3RhcnQ6IGAke0NTSX0xS2AsXG4gIGxpbmVzKGNvdW50KSB7XG4gICAgbGV0IGNsZWFyID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKVxuICAgICAgY2xlYXIgKz0gdGhpcy5saW5lICsgKGkgPCBjb3VudCAtIDEgPyBjdXJzb3IudXAoKSA6ICcnKTtcbiAgICBpZiAoY291bnQpXG4gICAgICBjbGVhciArPSBjdXJzb3IubGVmdDtcbiAgICByZXR1cm4gY2xlYXI7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IGN1cnNvciwgc2Nyb2xsLCBlcmFzZSwgYmVlcCB9O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1tcIkBAaXRlcmF0b3JcIl07IGlmICghaXQpIHsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTsgcmV0dXJuIHsgczogRiwgbjogZnVuY3Rpb24gbigpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfSwgZTogZnVuY3Rpb24gZShfZSkgeyB0aHJvdyBfZTsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfSB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIGRpZEVyciA9IGZhbHNlLCBlcnI7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IGl0ID0gaXQuY2FsbChvKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9lMikgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTI7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdC5yZXR1cm4gIT0gbnVsbCkgaXQucmV0dXJuKCk7IH0gZmluYWxseSB7IGlmIChkaWRFcnIpIHRocm93IGVycjsgfSB9IH07IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07IHJldHVybiBhcnIyOyB9XG5cbmNvbnN0IHN0cmlwID0gcmVxdWlyZSgnLi9zdHJpcCcpO1xuXG5jb25zdCBfcmVxdWlyZSA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKSxcbiAgICAgIGVyYXNlID0gX3JlcXVpcmUuZXJhc2UsXG4gICAgICBjdXJzb3IgPSBfcmVxdWlyZS5jdXJzb3I7XG5cbmNvbnN0IHdpZHRoID0gc3RyID0+IFsuLi5zdHJpcChzdHIpXS5sZW5ndGg7XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9tcHRcbiAqIEBwYXJhbSB7bnVtYmVyfSBwZXJMaW5lXG4gKi9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwcm9tcHQsIHBlckxpbmUpIHtcbiAgaWYgKCFwZXJMaW5lKSByZXR1cm4gZXJhc2UubGluZSArIGN1cnNvci50bygwKTtcbiAgbGV0IHJvd3MgPSAwO1xuICBjb25zdCBsaW5lcyA9IHByb21wdC5zcGxpdCgvXFxyP1xcbi8pO1xuXG4gIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihsaW5lcyksXG4gICAgICBfc3RlcDtcblxuICB0cnkge1xuICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICBsZXQgbGluZSA9IF9zdGVwLnZhbHVlO1xuICAgICAgcm93cyArPSAxICsgTWF0aC5mbG9vcihNYXRoLm1heCh3aWR0aChsaW5lKSAtIDEsIDApIC8gcGVyTGluZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfaXRlcmF0b3IuZShlcnIpO1xuICB9IGZpbmFsbHkge1xuICAgIF9pdGVyYXRvci5mKCk7XG4gIH1cblxuICByZXR1cm4gZXJhc2UubGluZXMocm93cyk7XG59OyIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG1haW4gPSB7XG4gIGFycm93VXA6ICdcdTIxOTEnLFxuICBhcnJvd0Rvd246ICdcdTIxOTMnLFxuICBhcnJvd0xlZnQ6ICdcdTIxOTAnLFxuICBhcnJvd1JpZ2h0OiAnXHUyMTkyJyxcbiAgcmFkaW9PbjogJ1x1MjVDOScsXG4gIHJhZGlvT2ZmOiAnXHUyNUVGJyxcbiAgdGljazogJ1x1MjcxNCcsXG4gIGNyb3NzOiAnXHUyNzE2JyxcbiAgZWxsaXBzaXM6ICdcdTIwMjYnLFxuICBwb2ludGVyU21hbGw6ICdcdTIwM0EnLFxuICBsaW5lOiAnXHUyNTAwJyxcbiAgcG9pbnRlcjogJ1x1Mjc2Ridcbn07XG5jb25zdCB3aW4gPSB7XG4gIGFycm93VXA6IG1haW4uYXJyb3dVcCxcbiAgYXJyb3dEb3duOiBtYWluLmFycm93RG93bixcbiAgYXJyb3dMZWZ0OiBtYWluLmFycm93TGVmdCxcbiAgYXJyb3dSaWdodDogbWFpbi5hcnJvd1JpZ2h0LFxuICByYWRpb09uOiAnKCopJyxcbiAgcmFkaW9PZmY6ICcoICknLFxuICB0aWNrOiAnXHUyMjFBJyxcbiAgY3Jvc3M6ICdcdTAwRDcnLFxuICBlbGxpcHNpczogJy4uLicsXG4gIHBvaW50ZXJTbWFsbDogJ1x1MDBCQicsXG4gIGxpbmU6ICdcdTI1MDAnLFxuICBwb2ludGVyOiAnPidcbn07XG5jb25zdCBmaWd1cmVzID0gcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJyA/IHdpbiA6IG1haW47XG5tb2R1bGUuZXhwb3J0cyA9IGZpZ3VyZXM7IiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgYyA9IHJlcXVpcmUoJ2tsZXVyJyk7XG5cbmNvbnN0IGZpZ3VyZXMgPSByZXF1aXJlKCcuL2ZpZ3VyZXMnKTsgLy8gcmVuZGVyaW5nIHVzZXIgaW5wdXQuXG5cblxuY29uc3Qgc3R5bGVzID0gT2JqZWN0LmZyZWV6ZSh7XG4gIHBhc3N3b3JkOiB7XG4gICAgc2NhbGU6IDEsXG4gICAgcmVuZGVyOiBpbnB1dCA9PiAnKicucmVwZWF0KGlucHV0Lmxlbmd0aClcbiAgfSxcbiAgZW1vamk6IHtcbiAgICBzY2FsZTogMixcbiAgICByZW5kZXI6IGlucHV0ID0+ICdcdUQ4M0RcdURFMDMnLnJlcGVhdChpbnB1dC5sZW5ndGgpXG4gIH0sXG4gIGludmlzaWJsZToge1xuICAgIHNjYWxlOiAwLFxuICAgIHJlbmRlcjogaW5wdXQgPT4gJydcbiAgfSxcbiAgZGVmYXVsdDoge1xuICAgIHNjYWxlOiAxLFxuICAgIHJlbmRlcjogaW5wdXQgPT4gYCR7aW5wdXR9YFxuICB9XG59KTtcblxuY29uc3QgcmVuZGVyID0gdHlwZSA9PiBzdHlsZXNbdHlwZV0gfHwgc3R5bGVzLmRlZmF1bHQ7IC8vIGljb24gdG8gc2lnbmFsaXplIGEgcHJvbXB0LlxuXG5cbmNvbnN0IHN5bWJvbHMgPSBPYmplY3QuZnJlZXplKHtcbiAgYWJvcnRlZDogYy5yZWQoZmlndXJlcy5jcm9zcyksXG4gIGRvbmU6IGMuZ3JlZW4oZmlndXJlcy50aWNrKSxcbiAgZXhpdGVkOiBjLnllbGxvdyhmaWd1cmVzLmNyb3NzKSxcbiAgZGVmYXVsdDogYy5jeWFuKCc/Jylcbn0pO1xuXG5jb25zdCBzeW1ib2wgPSAoZG9uZSwgYWJvcnRlZCwgZXhpdGVkKSA9PiBhYm9ydGVkID8gc3ltYm9scy5hYm9ydGVkIDogZXhpdGVkID8gc3ltYm9scy5leGl0ZWQgOiBkb25lID8gc3ltYm9scy5kb25lIDogc3ltYm9scy5kZWZhdWx0OyAvLyBiZXR3ZWVuIHRoZSBxdWVzdGlvbiBhbmQgdGhlIHVzZXIncyBpbnB1dC5cblxuXG5jb25zdCBkZWxpbWl0ZXIgPSBjb21wbGV0aW5nID0+IGMuZ3JheShjb21wbGV0aW5nID8gZmlndXJlcy5lbGxpcHNpcyA6IGZpZ3VyZXMucG9pbnRlclNtYWxsKTtcblxuY29uc3QgaXRlbSA9IChleHBhbmRhYmxlLCBleHBhbmRlZCkgPT4gYy5ncmF5KGV4cGFuZGFibGUgPyBleHBhbmRlZCA/IGZpZ3VyZXMucG9pbnRlclNtYWxsIDogJysnIDogZmlndXJlcy5saW5lKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN0eWxlcyxcbiAgcmVuZGVyLFxuICBzeW1ib2xzLFxuICBzeW1ib2wsXG4gIGRlbGltaXRlcixcbiAgaXRlbVxufTsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBzdHJpcCA9IHJlcXVpcmUoJy4vc3RyaXAnKTtcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG1zZ1xuICogQHBhcmFtIHtudW1iZXJ9IHBlckxpbmVcbiAqL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1zZywgcGVyTGluZSkge1xuICBsZXQgbGluZXMgPSBTdHJpbmcoc3RyaXAobXNnKSB8fCAnJykuc3BsaXQoL1xccj9cXG4vKTtcbiAgaWYgKCFwZXJMaW5lKSByZXR1cm4gbGluZXMubGVuZ3RoO1xuICByZXR1cm4gbGluZXMubWFwKGwgPT4gTWF0aC5jZWlsKGwubGVuZ3RoIC8gcGVyTGluZSkpLnJlZHVjZSgoYSwgYikgPT4gYSArIGIpO1xufTsiLCAiJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbXNnIFRoZSBtZXNzYWdlIHRvIHdyYXBcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IFtvcHRzLm1hcmdpbl0gTGVmdCBtYXJnaW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLndpZHRoIE1heGltdW0gY2hhcmFjdGVycyBwZXIgbGluZSBpbmNsdWRpbmcgdGhlIG1hcmdpblxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gKG1zZywgb3B0cyA9IHt9KSA9PiB7XG4gIGNvbnN0IHRhYiA9IE51bWJlci5pc1NhZmVJbnRlZ2VyKHBhcnNlSW50KG9wdHMubWFyZ2luKSkgPyBuZXcgQXJyYXkocGFyc2VJbnQob3B0cy5tYXJnaW4pKS5maWxsKCcgJykuam9pbignJykgOiBvcHRzLm1hcmdpbiB8fCAnJztcbiAgY29uc3Qgd2lkdGggPSBvcHRzLndpZHRoO1xuICByZXR1cm4gKG1zZyB8fCAnJykuc3BsaXQoL1xccj9cXG4vZykubWFwKGxpbmUgPT4gbGluZS5zcGxpdCgvXFxzKy9nKS5yZWR1Y2UoKGFyciwgdykgPT4ge1xuICAgIGlmICh3Lmxlbmd0aCArIHRhYi5sZW5ndGggPj0gd2lkdGggfHwgYXJyW2Fyci5sZW5ndGggLSAxXS5sZW5ndGggKyB3Lmxlbmd0aCArIDEgPCB3aWR0aCkgYXJyW2Fyci5sZW5ndGggLSAxXSArPSBgICR7d31gO2Vsc2UgYXJyLnB1c2goYCR7dGFifSR7d31gKTtcbiAgICByZXR1cm4gYXJyO1xuICB9LCBbdGFiXSkuam9pbignXFxuJykpLmpvaW4oJ1xcbicpO1xufTsiLCAiJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBEZXRlcm1pbmUgd2hhdCBlbnRyaWVzIHNob3VsZCBiZSBkaXNwbGF5ZWQgb24gdGhlIHNjcmVlbiwgYmFzZWQgb24gdGhlXG4gKiBjdXJyZW50bHkgc2VsZWN0ZWQgaW5kZXggYW5kIHRoZSBtYXhpbXVtIHZpc2libGUuIFVzZWQgaW4gbGlzdC1iYXNlZFxuICogcHJvbXB0cyBsaWtlIGBzZWxlY3RgIGFuZCBgbXVsdGlzZWxlY3RgLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBjdXJzb3IgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBlbnRyeVxuICogQHBhcmFtIHtudW1iZXJ9IHRvdGFsIHRoZSB0b3RhbCBlbnRyaWVzIGF2YWlsYWJsZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge251bWJlcn0gW21heFZpc2libGVdIHRoZSBudW1iZXIgb2YgZW50cmllcyB0aGF0IGNhbiBiZSBkaXNwbGF5ZWRcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IChjdXJzb3IsIHRvdGFsLCBtYXhWaXNpYmxlKSA9PiB7XG4gIG1heFZpc2libGUgPSBtYXhWaXNpYmxlIHx8IHRvdGFsO1xuICBsZXQgc3RhcnRJbmRleCA9IE1hdGgubWluKHRvdGFsIC0gbWF4VmlzaWJsZSwgY3Vyc29yIC0gTWF0aC5mbG9vcihtYXhWaXNpYmxlIC8gMikpO1xuICBpZiAoc3RhcnRJbmRleCA8IDApIHN0YXJ0SW5kZXggPSAwO1xuICBsZXQgZW5kSW5kZXggPSBNYXRoLm1pbihzdGFydEluZGV4ICsgbWF4VmlzaWJsZSwgdG90YWwpO1xuICByZXR1cm4ge1xuICAgIHN0YXJ0SW5kZXgsXG4gICAgZW5kSW5kZXhcbiAgfTtcbn07IiwgIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFjdGlvbjogcmVxdWlyZSgnLi9hY3Rpb24nKSxcbiAgY2xlYXI6IHJlcXVpcmUoJy4vY2xlYXInKSxcbiAgc3R5bGU6IHJlcXVpcmUoJy4vc3R5bGUnKSxcbiAgc3RyaXA6IHJlcXVpcmUoJy4vc3RyaXAnKSxcbiAgZmlndXJlczogcmVxdWlyZSgnLi9maWd1cmVzJyksXG4gIGxpbmVzOiByZXF1aXJlKCcuL2xpbmVzJyksXG4gIHdyYXA6IHJlcXVpcmUoJy4vd3JhcCcpLFxuICBlbnRyaWVzVG9EaXNwbGF5OiByZXF1aXJlKCcuL2VudHJpZXNUb0Rpc3BsYXknKVxufTsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCByZWFkbGluZSA9IHJlcXVpcmUoJ3JlYWRsaW5lJyk7XG5cbmNvbnN0IF9yZXF1aXJlID0gcmVxdWlyZSgnLi4vdXRpbCcpLFxuICAgICAgYWN0aW9uID0gX3JlcXVpcmUuYWN0aW9uO1xuXG5jb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKTtcblxuY29uc3QgX3JlcXVpcmUyID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpLFxuICAgICAgYmVlcCA9IF9yZXF1aXJlMi5iZWVwLFxuICAgICAgY3Vyc29yID0gX3JlcXVpcmUyLmN1cnNvcjtcblxuY29uc3QgY29sb3IgPSByZXF1aXJlKCdrbGV1cicpO1xuLyoqXG4gKiBCYXNlIHByb21wdCBza2VsZXRvblxuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKi9cblxuXG5jbGFzcyBQcm9tcHQgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZmlyc3RSZW5kZXIgPSB0cnVlO1xuICAgIHRoaXMuaW4gPSBvcHRzLnN0ZGluIHx8IHByb2Nlc3Muc3RkaW47XG4gICAgdGhpcy5vdXQgPSBvcHRzLnN0ZG91dCB8fCBwcm9jZXNzLnN0ZG91dDtcblxuICAgIHRoaXMub25SZW5kZXIgPSAob3B0cy5vblJlbmRlciB8fCAoKCkgPT4gdm9pZCAwKSkuYmluZCh0aGlzKTtcblxuICAgIGNvbnN0IHJsID0gcmVhZGxpbmUuY3JlYXRlSW50ZXJmYWNlKHtcbiAgICAgIGlucHV0OiB0aGlzLmluLFxuICAgICAgZXNjYXBlQ29kZVRpbWVvdXQ6IDUwXG4gICAgfSk7XG4gICAgcmVhZGxpbmUuZW1pdEtleXByZXNzRXZlbnRzKHRoaXMuaW4sIHJsKTtcbiAgICBpZiAodGhpcy5pbi5pc1RUWSkgdGhpcy5pbi5zZXRSYXdNb2RlKHRydWUpO1xuICAgIGNvbnN0IGlzU2VsZWN0ID0gWydTZWxlY3RQcm9tcHQnLCAnTXVsdGlzZWxlY3RQcm9tcHQnXS5pbmRleE9mKHRoaXMuY29uc3RydWN0b3IubmFtZSkgPiAtMTtcblxuICAgIGNvbnN0IGtleXByZXNzID0gKHN0ciwga2V5KSA9PiB7XG4gICAgICBsZXQgYSA9IGFjdGlvbihrZXksIGlzU2VsZWN0KTtcblxuICAgICAgaWYgKGEgPT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuXyAmJiB0aGlzLl8oc3RyLCBrZXkpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpc1thXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzW2FdKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmJlbGwoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5jbG9zZSA9ICgpID0+IHtcbiAgICAgIHRoaXMub3V0LndyaXRlKGN1cnNvci5zaG93KTtcbiAgICAgIHRoaXMuaW4ucmVtb3ZlTGlzdGVuZXIoJ2tleXByZXNzJywga2V5cHJlc3MpO1xuICAgICAgaWYgKHRoaXMuaW4uaXNUVFkpIHRoaXMuaW4uc2V0UmF3TW9kZShmYWxzZSk7XG4gICAgICBybC5jbG9zZSgpO1xuICAgICAgdGhpcy5lbWl0KHRoaXMuYWJvcnRlZCA/ICdhYm9ydCcgOiB0aGlzLmV4aXRlZCA/ICdleGl0JyA6ICdzdWJtaXQnLCB0aGlzLnZhbHVlKTtcbiAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgdGhpcy5pbi5vbigna2V5cHJlc3MnLCBrZXlwcmVzcyk7XG4gIH1cblxuICBmaXJlKCkge1xuICAgIHRoaXMuZW1pdCgnc3RhdGUnLCB7XG4gICAgICB2YWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgIGFib3J0ZWQ6ICEhdGhpcy5hYm9ydGVkLFxuICAgICAgZXhpdGVkOiAhIXRoaXMuZXhpdGVkXG4gICAgfSk7XG4gIH1cblxuICBiZWxsKCkge1xuICAgIHRoaXMub3V0LndyaXRlKGJlZXApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHRoaXMub25SZW5kZXIoY29sb3IpO1xuICAgIGlmICh0aGlzLmZpcnN0UmVuZGVyKSB0aGlzLmZpcnN0UmVuZGVyID0gZmFsc2U7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21wdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH1cblxuZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIHNlbGYgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzOyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7IGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9XG5cbmNvbnN0IGNvbG9yID0gcmVxdWlyZSgna2xldXInKTtcblxuY29uc3QgUHJvbXB0ID0gcmVxdWlyZSgnLi9wcm9tcHQnKTtcblxuY29uc3QgX3JlcXVpcmUgPSByZXF1aXJlKCdzaXN0ZXJhbnNpJyksXG4gICAgICBlcmFzZSA9IF9yZXF1aXJlLmVyYXNlLFxuICAgICAgY3Vyc29yID0gX3JlcXVpcmUuY3Vyc29yO1xuXG5jb25zdCBfcmVxdWlyZTIgPSByZXF1aXJlKCcuLi91dGlsJyksXG4gICAgICBzdHlsZSA9IF9yZXF1aXJlMi5zdHlsZSxcbiAgICAgIGNsZWFyID0gX3JlcXVpcmUyLmNsZWFyLFxuICAgICAgbGluZXMgPSBfcmVxdWlyZTIubGluZXMsXG4gICAgICBmaWd1cmVzID0gX3JlcXVpcmUyLmZpZ3VyZXM7XG4vKipcbiAqIFRleHRQcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5zdHlsZT0nZGVmYXVsdCddIFJlbmRlciBzdHlsZVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmluaXRpYWxdIERlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLnZhbGlkYXRlXSBWYWxpZGF0ZSBmdW5jdGlvblxuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuZXJyb3JdIFRoZSBpbnZhbGlkIGVycm9yIGxhYmVsXG4gKi9cblxuXG5jbGFzcyBUZXh0UHJvbXB0IGV4dGVuZHMgUHJvbXB0IHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy50cmFuc2Zvcm0gPSBzdHlsZS5yZW5kZXIob3B0cy5zdHlsZSk7XG4gICAgdGhpcy5zY2FsZSA9IHRoaXMudHJhbnNmb3JtLnNjYWxlO1xuICAgIHRoaXMubXNnID0gb3B0cy5tZXNzYWdlO1xuICAgIHRoaXMuaW5pdGlhbCA9IG9wdHMuaW5pdGlhbCB8fCBgYDtcblxuICAgIHRoaXMudmFsaWRhdG9yID0gb3B0cy52YWxpZGF0ZSB8fCAoKCkgPT4gdHJ1ZSk7XG5cbiAgICB0aGlzLnZhbHVlID0gYGA7XG4gICAgdGhpcy5lcnJvck1zZyA9IG9wdHMuZXJyb3IgfHwgYFBsZWFzZSBFbnRlciBBIFZhbGlkIFZhbHVlYDtcbiAgICB0aGlzLmN1cnNvciA9IE51bWJlcighIXRoaXMuaW5pdGlhbCk7XG4gICAgdGhpcy5jdXJzb3JPZmZzZXQgPSAwO1xuICAgIHRoaXMuY2xlYXIgPSBjbGVhcihgYCwgdGhpcy5vdXQuY29sdW1ucyk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHNldCB2YWx1ZSh2KSB7XG4gICAgaWYgKCF2ICYmIHRoaXMuaW5pdGlhbCkge1xuICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICB0aGlzLnJlbmRlcmVkID0gY29sb3IuZ3JheSh0aGlzLnRyYW5zZm9ybS5yZW5kZXIodGhpcy5pbml0aWFsKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSBmYWxzZTtcbiAgICAgIHRoaXMucmVuZGVyZWQgPSB0aGlzLnRyYW5zZm9ybS5yZW5kZXIodik7XG4gICAgfVxuXG4gICAgdGhpcy5fdmFsdWUgPSB2O1xuICAgIHRoaXMuZmlyZSgpO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMudmFsdWUgPSBgYDtcbiAgICB0aGlzLmN1cnNvciA9IE51bWJlcighIXRoaXMuaW5pdGlhbCk7XG4gICAgdGhpcy5jdXJzb3JPZmZzZXQgPSAwO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBleGl0KCkge1xuICAgIHRoaXMuYWJvcnQoKTtcbiAgfVxuXG4gIGFib3J0KCkge1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLnZhbHVlIHx8IHRoaXMuaW5pdGlhbDtcbiAgICB0aGlzLmRvbmUgPSB0aGlzLmFib3J0ZWQgPSB0cnVlO1xuICAgIHRoaXMuZXJyb3IgPSBmYWxzZTtcbiAgICB0aGlzLnJlZCA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIHZhbGlkYXRlKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoZnVuY3Rpb24qICgpIHtcbiAgICAgIGxldCB2YWxpZCA9IHlpZWxkIF90aGlzLnZhbGlkYXRvcihfdGhpcy52YWx1ZSk7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsaWQgPT09IGBzdHJpbmdgKSB7XG4gICAgICAgIF90aGlzLmVycm9yTXNnID0gdmFsaWQ7XG4gICAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmVycm9yID0gIXZhbGlkO1xuICAgIH0pKCk7XG4gIH1cblxuICBzdWJtaXQoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoZnVuY3Rpb24qICgpIHtcbiAgICAgIF90aGlzMi52YWx1ZSA9IF90aGlzMi52YWx1ZSB8fCBfdGhpczIuaW5pdGlhbDtcbiAgICAgIF90aGlzMi5jdXJzb3JPZmZzZXQgPSAwO1xuICAgICAgX3RoaXMyLmN1cnNvciA9IF90aGlzMi5yZW5kZXJlZC5sZW5ndGg7XG4gICAgICB5aWVsZCBfdGhpczIudmFsaWRhdGUoKTtcblxuICAgICAgaWYgKF90aGlzMi5lcnJvcikge1xuICAgICAgICBfdGhpczIucmVkID0gdHJ1ZTtcblxuICAgICAgICBfdGhpczIuZmlyZSgpO1xuXG4gICAgICAgIF90aGlzMi5yZW5kZXIoKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzMi5kb25lID0gdHJ1ZTtcbiAgICAgIF90aGlzMi5hYm9ydGVkID0gZmFsc2U7XG5cbiAgICAgIF90aGlzMi5maXJlKCk7XG5cbiAgICAgIF90aGlzMi5yZW5kZXIoKTtcblxuICAgICAgX3RoaXMyLm91dC53cml0ZSgnXFxuJyk7XG5cbiAgICAgIF90aGlzMi5jbG9zZSgpO1xuICAgIH0pKCk7XG4gIH1cblxuICBuZXh0KCkge1xuICAgIGlmICghdGhpcy5wbGFjZWhvbGRlcikgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLmluaXRpYWw7XG4gICAgdGhpcy5jdXJzb3IgPSB0aGlzLnJlbmRlcmVkLmxlbmd0aDtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbW92ZUN1cnNvcihuKSB7XG4gICAgaWYgKHRoaXMucGxhY2Vob2xkZXIpIHJldHVybjtcbiAgICB0aGlzLmN1cnNvciA9IHRoaXMuY3Vyc29yICsgbjtcbiAgICB0aGlzLmN1cnNvck9mZnNldCArPSBuO1xuICB9XG5cbiAgXyhjLCBrZXkpIHtcbiAgICBsZXQgczEgPSB0aGlzLnZhbHVlLnNsaWNlKDAsIHRoaXMuY3Vyc29yKTtcbiAgICBsZXQgczIgPSB0aGlzLnZhbHVlLnNsaWNlKHRoaXMuY3Vyc29yKTtcbiAgICB0aGlzLnZhbHVlID0gYCR7czF9JHtjfSR7czJ9YDtcbiAgICB0aGlzLnJlZCA9IGZhbHNlO1xuICAgIHRoaXMuY3Vyc29yID0gdGhpcy5wbGFjZWhvbGRlciA/IDAgOiBzMS5sZW5ndGggKyAxO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkZWxldGUoKSB7XG4gICAgaWYgKHRoaXMuaXNDdXJzb3JBdFN0YXJ0KCkpIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICBsZXQgczEgPSB0aGlzLnZhbHVlLnNsaWNlKDAsIHRoaXMuY3Vyc29yIC0gMSk7XG4gICAgbGV0IHMyID0gdGhpcy52YWx1ZS5zbGljZSh0aGlzLmN1cnNvcik7XG4gICAgdGhpcy52YWx1ZSA9IGAke3MxfSR7czJ9YDtcbiAgICB0aGlzLnJlZCA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMuaXNDdXJzb3JBdFN0YXJ0KCkpIHtcbiAgICAgIHRoaXMuY3Vyc29yT2Zmc2V0ID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jdXJzb3JPZmZzZXQrKztcbiAgICAgIHRoaXMubW92ZUN1cnNvcigtMSk7XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRlbGV0ZUZvcndhcmQoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yICogdGhpcy5zY2FsZSA+PSB0aGlzLnJlbmRlcmVkLmxlbmd0aCB8fCB0aGlzLnBsYWNlaG9sZGVyKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgbGV0IHMxID0gdGhpcy52YWx1ZS5zbGljZSgwLCB0aGlzLmN1cnNvcik7XG4gICAgbGV0IHMyID0gdGhpcy52YWx1ZS5zbGljZSh0aGlzLmN1cnNvciArIDEpO1xuICAgIHRoaXMudmFsdWUgPSBgJHtzMX0ke3MyfWA7XG4gICAgdGhpcy5yZWQgPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLmlzQ3Vyc29yQXRFbmQoKSkge1xuICAgICAgdGhpcy5jdXJzb3JPZmZzZXQgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnNvck9mZnNldCsrO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBmaXJzdCgpIHtcbiAgICB0aGlzLmN1cnNvciA9IDA7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGxhc3QoKSB7XG4gICAgdGhpcy5jdXJzb3IgPSB0aGlzLnZhbHVlLmxlbmd0aDtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbGVmdCgpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IgPD0gMCB8fCB0aGlzLnBsYWNlaG9sZGVyKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy5tb3ZlQ3Vyc29yKC0xKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcmlnaHQoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yICogdGhpcy5zY2FsZSA+PSB0aGlzLnJlbmRlcmVkLmxlbmd0aCB8fCB0aGlzLnBsYWNlaG9sZGVyKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy5tb3ZlQ3Vyc29yKDEpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBpc0N1cnNvckF0U3RhcnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3Vyc29yID09PSAwIHx8IHRoaXMucGxhY2Vob2xkZXIgJiYgdGhpcy5jdXJzb3IgPT09IDE7XG4gIH1cblxuICBpc0N1cnNvckF0RW5kKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnNvciA9PT0gdGhpcy5yZW5kZXJlZC5sZW5ndGggfHwgdGhpcy5wbGFjZWhvbGRlciAmJiB0aGlzLmN1cnNvciA9PT0gdGhpcy5yZW5kZXJlZC5sZW5ndGggKyAxO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLmNsb3NlZCkgcmV0dXJuO1xuXG4gICAgaWYgKCF0aGlzLmZpcnN0UmVuZGVyKSB7XG4gICAgICBpZiAodGhpcy5vdXRwdXRFcnJvcikgdGhpcy5vdXQud3JpdGUoY3Vyc29yLmRvd24obGluZXModGhpcy5vdXRwdXRFcnJvciwgdGhpcy5vdXQuY29sdW1ucykgLSAxKSArIGNsZWFyKHRoaXMub3V0cHV0RXJyb3IsIHRoaXMub3V0LmNvbHVtbnMpKTtcbiAgICAgIHRoaXMub3V0LndyaXRlKGNsZWFyKHRoaXMub3V0cHV0VGV4dCwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgIH1cblxuICAgIHN1cGVyLnJlbmRlcigpO1xuICAgIHRoaXMub3V0cHV0RXJyb3IgPSAnJztcbiAgICB0aGlzLm91dHB1dFRleHQgPSBbc3R5bGUuc3ltYm9sKHRoaXMuZG9uZSwgdGhpcy5hYm9ydGVkKSwgY29sb3IuYm9sZCh0aGlzLm1zZyksIHN0eWxlLmRlbGltaXRlcih0aGlzLmRvbmUpLCB0aGlzLnJlZCA/IGNvbG9yLnJlZCh0aGlzLnJlbmRlcmVkKSA6IHRoaXMucmVuZGVyZWRdLmpvaW4oYCBgKTtcblxuICAgIGlmICh0aGlzLmVycm9yKSB7XG4gICAgICB0aGlzLm91dHB1dEVycm9yICs9IHRoaXMuZXJyb3JNc2cuc3BsaXQoYFxcbmApLnJlZHVjZSgoYSwgbCwgaSkgPT4gYSArIGBcXG4ke2kgPyAnICcgOiBmaWd1cmVzLnBvaW50ZXJTbWFsbH0gJHtjb2xvci5yZWQoKS5pdGFsaWMobCl9YCwgYGApO1xuICAgIH1cblxuICAgIHRoaXMub3V0LndyaXRlKGVyYXNlLmxpbmUgKyBjdXJzb3IudG8oMCkgKyB0aGlzLm91dHB1dFRleHQgKyBjdXJzb3Iuc2F2ZSArIHRoaXMub3V0cHV0RXJyb3IgKyBjdXJzb3IucmVzdG9yZSArIGN1cnNvci5tb3ZlKHRoaXMuY3Vyc29yT2Zmc2V0LCAwKSk7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRleHRQcm9tcHQ7IiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY29sb3IgPSByZXF1aXJlKCdrbGV1cicpO1xuXG5jb25zdCBQcm9tcHQgPSByZXF1aXJlKCcuL3Byb21wdCcpO1xuXG5jb25zdCBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uL3V0aWwnKSxcbiAgICAgIHN0eWxlID0gX3JlcXVpcmUuc3R5bGUsXG4gICAgICBjbGVhciA9IF9yZXF1aXJlLmNsZWFyLFxuICAgICAgZmlndXJlcyA9IF9yZXF1aXJlLmZpZ3VyZXMsXG4gICAgICB3cmFwID0gX3JlcXVpcmUud3JhcCxcbiAgICAgIGVudHJpZXNUb0Rpc3BsYXkgPSBfcmVxdWlyZS5lbnRyaWVzVG9EaXNwbGF5O1xuXG5jb25zdCBfcmVxdWlyZTIgPSByZXF1aXJlKCdzaXN0ZXJhbnNpJyksXG4gICAgICBjdXJzb3IgPSBfcmVxdWlyZTIuY3Vyc29yO1xuLyoqXG4gKiBTZWxlY3RQcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7QXJyYXl9IG9wdHMuY2hvaWNlcyBBcnJheSBvZiBjaG9pY2Ugb2JqZWN0c1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmhpbnRdIEhpbnQgdG8gZGlzcGxheVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmluaXRpYWxdIEluZGV4IG9mIGRlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLm9wdGlvbnNQZXJQYWdlPTEwXSBNYXggb3B0aW9ucyB0byBkaXNwbGF5IGF0IG9uY2VcbiAqL1xuXG5cbmNsYXNzIFNlbGVjdFByb21wdCBleHRlbmRzIFByb21wdCB7XG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXMubXNnID0gb3B0cy5tZXNzYWdlO1xuICAgIHRoaXMuaGludCA9IG9wdHMuaGludCB8fCAnLSBVc2UgYXJyb3cta2V5cy4gUmV0dXJuIHRvIHN1Ym1pdC4nO1xuICAgIHRoaXMud2FybiA9IG9wdHMud2FybiB8fCAnLSBUaGlzIG9wdGlvbiBpcyBkaXNhYmxlZCc7XG4gICAgdGhpcy5jdXJzb3IgPSBvcHRzLmluaXRpYWwgfHwgMDtcbiAgICB0aGlzLmNob2ljZXMgPSBvcHRzLmNob2ljZXMubWFwKChjaCwgaWR4KSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGNoID09PSAnc3RyaW5nJykgY2ggPSB7XG4gICAgICAgIHRpdGxlOiBjaCxcbiAgICAgICAgdmFsdWU6IGlkeFxuICAgICAgfTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRpdGxlOiBjaCAmJiAoY2gudGl0bGUgfHwgY2gudmFsdWUgfHwgY2gpLFxuICAgICAgICB2YWx1ZTogY2ggJiYgKGNoLnZhbHVlID09PSB1bmRlZmluZWQgPyBpZHggOiBjaC52YWx1ZSksXG4gICAgICAgIGRlc2NyaXB0aW9uOiBjaCAmJiBjaC5kZXNjcmlwdGlvbixcbiAgICAgICAgc2VsZWN0ZWQ6IGNoICYmIGNoLnNlbGVjdGVkLFxuICAgICAgICBkaXNhYmxlZDogY2ggJiYgY2guZGlzYWJsZWRcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdGhpcy5vcHRpb25zUGVyUGFnZSA9IG9wdHMub3B0aW9uc1BlclBhZ2UgfHwgMTA7XG4gICAgdGhpcy52YWx1ZSA9ICh0aGlzLmNob2ljZXNbdGhpcy5jdXJzb3JdIHx8IHt9KS52YWx1ZTtcbiAgICB0aGlzLmNsZWFyID0gY2xlYXIoJycsIHRoaXMub3V0LmNvbHVtbnMpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBtb3ZlQ3Vyc29yKG4pIHtcbiAgICB0aGlzLmN1cnNvciA9IG47XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMuY2hvaWNlc1tuXS52YWx1ZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMubW92ZUN1cnNvcigwKTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZXhpdCgpIHtcbiAgICB0aGlzLmFib3J0KCk7XG4gIH1cblxuICBhYm9ydCgpIHtcbiAgICB0aGlzLmRvbmUgPSB0aGlzLmFib3J0ZWQgPSB0cnVlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIHN1Ym1pdCgpIHtcbiAgICBpZiAoIXRoaXMuc2VsZWN0aW9uLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgICAgdGhpcy5hYm9ydGVkID0gZmFsc2U7XG4gICAgICB0aGlzLmZpcmUoKTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICB0aGlzLm91dC53cml0ZSgnXFxuJyk7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfSBlbHNlIHRoaXMuYmVsbCgpO1xuICB9XG5cbiAgZmlyc3QoKSB7XG4gICAgdGhpcy5tb3ZlQ3Vyc29yKDApO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBsYXN0KCkge1xuICAgIHRoaXMubW92ZUN1cnNvcih0aGlzLmNob2ljZXMubGVuZ3RoIC0gMSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIGlmICh0aGlzLmN1cnNvciA9PT0gMCkge1xuICAgICAgdGhpcy5tb3ZlQ3Vyc29yKHRoaXMuY2hvaWNlcy5sZW5ndGggLSAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tb3ZlQ3Vyc29yKHRoaXMuY3Vyc29yIC0gMSk7XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yID09PSB0aGlzLmNob2ljZXMubGVuZ3RoIC0gMSkge1xuICAgICAgdGhpcy5tb3ZlQ3Vyc29yKDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1vdmVDdXJzb3IodGhpcy5jdXJzb3IgKyAxKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbmV4dCgpIHtcbiAgICB0aGlzLm1vdmVDdXJzb3IoKHRoaXMuY3Vyc29yICsgMSkgJSB0aGlzLmNob2ljZXMubGVuZ3RoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgXyhjLCBrZXkpIHtcbiAgICBpZiAoYyA9PT0gJyAnKSByZXR1cm4gdGhpcy5zdWJtaXQoKTtcbiAgfVxuXG4gIGdldCBzZWxlY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hvaWNlc1t0aGlzLmN1cnNvcl07XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuY2xvc2VkKSByZXR1cm47XG4gICAgaWYgKHRoaXMuZmlyc3RSZW5kZXIpIHRoaXMub3V0LndyaXRlKGN1cnNvci5oaWRlKTtlbHNlIHRoaXMub3V0LndyaXRlKGNsZWFyKHRoaXMub3V0cHV0VGV4dCwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgIHN1cGVyLnJlbmRlcigpO1xuXG4gICAgbGV0IF9lbnRyaWVzVG9EaXNwbGF5ID0gZW50cmllc1RvRGlzcGxheSh0aGlzLmN1cnNvciwgdGhpcy5jaG9pY2VzLmxlbmd0aCwgdGhpcy5vcHRpb25zUGVyUGFnZSksXG4gICAgICAgIHN0YXJ0SW5kZXggPSBfZW50cmllc1RvRGlzcGxheS5zdGFydEluZGV4LFxuICAgICAgICBlbmRJbmRleCA9IF9lbnRyaWVzVG9EaXNwbGF5LmVuZEluZGV4OyAvLyBQcmludCBwcm9tcHRcblxuXG4gICAgdGhpcy5vdXRwdXRUZXh0ID0gW3N0eWxlLnN5bWJvbCh0aGlzLmRvbmUsIHRoaXMuYWJvcnRlZCksIGNvbG9yLmJvbGQodGhpcy5tc2cpLCBzdHlsZS5kZWxpbWl0ZXIoZmFsc2UpLCB0aGlzLmRvbmUgPyB0aGlzLnNlbGVjdGlvbi50aXRsZSA6IHRoaXMuc2VsZWN0aW9uLmRpc2FibGVkID8gY29sb3IueWVsbG93KHRoaXMud2FybikgOiBjb2xvci5ncmF5KHRoaXMuaGludCldLmpvaW4oJyAnKTsgLy8gUHJpbnQgY2hvaWNlc1xuXG4gICAgaWYgKCF0aGlzLmRvbmUpIHtcbiAgICAgIHRoaXMub3V0cHV0VGV4dCArPSAnXFxuJztcblxuICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0SW5kZXg7IGkgPCBlbmRJbmRleDsgaSsrKSB7XG4gICAgICAgIGxldCB0aXRsZSxcbiAgICAgICAgICAgIHByZWZpeCxcbiAgICAgICAgICAgIGRlc2MgPSAnJyxcbiAgICAgICAgICAgIHYgPSB0aGlzLmNob2ljZXNbaV07IC8vIERldGVybWluZSB3aGV0aGVyIHRvIGRpc3BsYXkgXCJtb3JlIGNob2ljZXNcIiBpbmRpY2F0b3JzXG5cbiAgICAgICAgaWYgKGkgPT09IHN0YXJ0SW5kZXggJiYgc3RhcnRJbmRleCA+IDApIHtcbiAgICAgICAgICBwcmVmaXggPSBmaWd1cmVzLmFycm93VXA7XG4gICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gZW5kSW5kZXggLSAxICYmIGVuZEluZGV4IDwgdGhpcy5jaG9pY2VzLmxlbmd0aCkge1xuICAgICAgICAgIHByZWZpeCA9IGZpZ3VyZXMuYXJyb3dEb3duO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZWZpeCA9ICcgJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2LmRpc2FibGVkKSB7XG4gICAgICAgICAgdGl0bGUgPSB0aGlzLmN1cnNvciA9PT0gaSA/IGNvbG9yLmdyYXkoKS51bmRlcmxpbmUodi50aXRsZSkgOiBjb2xvci5zdHJpa2V0aHJvdWdoKCkuZ3JheSh2LnRpdGxlKTtcbiAgICAgICAgICBwcmVmaXggPSAodGhpcy5jdXJzb3IgPT09IGkgPyBjb2xvci5ib2xkKCkuZ3JheShmaWd1cmVzLnBvaW50ZXIpICsgJyAnIDogJyAgJykgKyBwcmVmaXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGl0bGUgPSB0aGlzLmN1cnNvciA9PT0gaSA/IGNvbG9yLmN5YW4oKS51bmRlcmxpbmUodi50aXRsZSkgOiB2LnRpdGxlO1xuICAgICAgICAgIHByZWZpeCA9ICh0aGlzLmN1cnNvciA9PT0gaSA/IGNvbG9yLmN5YW4oZmlndXJlcy5wb2ludGVyKSArICcgJyA6ICcgICcpICsgcHJlZml4O1xuXG4gICAgICAgICAgaWYgKHYuZGVzY3JpcHRpb24gJiYgdGhpcy5jdXJzb3IgPT09IGkpIHtcbiAgICAgICAgICAgIGRlc2MgPSBgIC0gJHt2LmRlc2NyaXB0aW9ufWA7XG5cbiAgICAgICAgICAgIGlmIChwcmVmaXgubGVuZ3RoICsgdGl0bGUubGVuZ3RoICsgZGVzYy5sZW5ndGggPj0gdGhpcy5vdXQuY29sdW1ucyB8fCB2LmRlc2NyaXB0aW9uLnNwbGl0KC9cXHI/XFxuLykubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICBkZXNjID0gJ1xcbicgKyB3cmFwKHYuZGVzY3JpcHRpb24sIHtcbiAgICAgICAgICAgICAgICBtYXJnaW46IDMsXG4gICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMub3V0LmNvbHVtbnNcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vdXRwdXRUZXh0ICs9IGAke3ByZWZpeH0gJHt0aXRsZX0ke2NvbG9yLmdyYXkoZGVzYyl9XFxuYDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLm91dC53cml0ZSh0aGlzLm91dHB1dFRleHQpO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTZWxlY3RQcm9tcHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBjb2xvciA9IHJlcXVpcmUoJ2tsZXVyJyk7XG5cbmNvbnN0IFByb21wdCA9IHJlcXVpcmUoJy4vcHJvbXB0Jyk7XG5cbmNvbnN0IF9yZXF1aXJlID0gcmVxdWlyZSgnLi4vdXRpbCcpLFxuICAgICAgc3R5bGUgPSBfcmVxdWlyZS5zdHlsZSxcbiAgICAgIGNsZWFyID0gX3JlcXVpcmUuY2xlYXI7XG5cbmNvbnN0IF9yZXF1aXJlMiA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKSxcbiAgICAgIGN1cnNvciA9IF9yZXF1aXJlMi5jdXJzb3IsXG4gICAgICBlcmFzZSA9IF9yZXF1aXJlMi5lcmFzZTtcbi8qKlxuICogVG9nZ2xlUHJvbXB0IEJhc2UgRWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG9wdHMubWVzc2FnZSBNZXNzYWdlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRzLmluaXRpYWw9ZmFsc2VdIERlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5hY3RpdmU9J25vJ10gQWN0aXZlIGxhYmVsXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuaW5hY3RpdmU9J29mZiddIEluYWN0aXZlIGxhYmVsXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqL1xuXG5cbmNsYXNzIFRvZ2dsZVByb21wdCBleHRlbmRzIFByb21wdCB7XG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXMubXNnID0gb3B0cy5tZXNzYWdlO1xuICAgIHRoaXMudmFsdWUgPSAhIW9wdHMuaW5pdGlhbDtcbiAgICB0aGlzLmFjdGl2ZSA9IG9wdHMuYWN0aXZlIHx8ICdvbic7XG4gICAgdGhpcy5pbmFjdGl2ZSA9IG9wdHMuaW5hY3RpdmUgfHwgJ29mZic7XG4gICAgdGhpcy5pbml0aWFsVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5pbml0aWFsVmFsdWU7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGV4aXQoKSB7XG4gICAgdGhpcy5hYm9ydCgpO1xuICB9XG5cbiAgYWJvcnQoKSB7XG4gICAgdGhpcy5kb25lID0gdGhpcy5hYm9ydGVkID0gdHJ1ZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICBzdWJtaXQoKSB7XG4gICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICB0aGlzLmFib3J0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICBkZWFjdGl2YXRlKCkge1xuICAgIGlmICh0aGlzLnZhbHVlID09PSBmYWxzZSkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMudmFsdWUgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgYWN0aXZhdGUoKSB7XG4gICAgaWYgKHRoaXMudmFsdWUgPT09IHRydWUpIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLnZhbHVlID0gdHJ1ZTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZGVsZXRlKCkge1xuICAgIHRoaXMuZGVhY3RpdmF0ZSgpO1xuICB9XG5cbiAgbGVmdCgpIHtcbiAgICB0aGlzLmRlYWN0aXZhdGUoKTtcbiAgfVxuXG4gIHJpZ2h0KCkge1xuICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gIH1cblxuICB1cCgpIHtcbiAgICB0aGlzLmFjdGl2YXRlKCk7XG4gIH1cblxuICBuZXh0KCkge1xuICAgIHRoaXMudmFsdWUgPSAhdGhpcy52YWx1ZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgXyhjLCBrZXkpIHtcbiAgICBpZiAoYyA9PT0gJyAnKSB7XG4gICAgICB0aGlzLnZhbHVlID0gIXRoaXMudmFsdWU7XG4gICAgfSBlbHNlIGlmIChjID09PSAnMScpIHtcbiAgICAgIHRoaXMudmFsdWUgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gJzAnKSB7XG4gICAgICB0aGlzLnZhbHVlID0gZmFsc2U7XG4gICAgfSBlbHNlIHJldHVybiB0aGlzLmJlbGwoKTtcblxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuY2xvc2VkKSByZXR1cm47XG4gICAgaWYgKHRoaXMuZmlyc3RSZW5kZXIpIHRoaXMub3V0LndyaXRlKGN1cnNvci5oaWRlKTtlbHNlIHRoaXMub3V0LndyaXRlKGNsZWFyKHRoaXMub3V0cHV0VGV4dCwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgIHN1cGVyLnJlbmRlcigpO1xuICAgIHRoaXMub3V0cHV0VGV4dCA9IFtzdHlsZS5zeW1ib2wodGhpcy5kb25lLCB0aGlzLmFib3J0ZWQpLCBjb2xvci5ib2xkKHRoaXMubXNnKSwgc3R5bGUuZGVsaW1pdGVyKHRoaXMuZG9uZSksIHRoaXMudmFsdWUgPyB0aGlzLmluYWN0aXZlIDogY29sb3IuY3lhbigpLnVuZGVybGluZSh0aGlzLmluYWN0aXZlKSwgY29sb3IuZ3JheSgnLycpLCB0aGlzLnZhbHVlID8gY29sb3IuY3lhbigpLnVuZGVybGluZSh0aGlzLmFjdGl2ZSkgOiB0aGlzLmFjdGl2ZV0uam9pbignICcpO1xuICAgIHRoaXMub3V0LndyaXRlKGVyYXNlLmxpbmUgKyBjdXJzb3IudG8oMCkgKyB0aGlzLm91dHB1dFRleHQpO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUb2dnbGVQcm9tcHQ7IiwgIid1c2Ugc3RyaWN0JztcblxuY2xhc3MgRGF0ZVBhcnQge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgdG9rZW4sXG4gICAgZGF0ZSxcbiAgICBwYXJ0cyxcbiAgICBsb2NhbGVzXG4gIH0pIHtcbiAgICB0aGlzLnRva2VuID0gdG9rZW47XG4gICAgdGhpcy5kYXRlID0gZGF0ZSB8fCBuZXcgRGF0ZSgpO1xuICAgIHRoaXMucGFydHMgPSBwYXJ0cyB8fCBbdGhpc107XG4gICAgdGhpcy5sb2NhbGVzID0gbG9jYWxlcyB8fCB7fTtcbiAgfVxuXG4gIHVwKCkge31cblxuICBkb3duKCkge31cblxuICBuZXh0KCkge1xuICAgIGNvbnN0IGN1cnJlbnRJZHggPSB0aGlzLnBhcnRzLmluZGV4T2YodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucGFydHMuZmluZCgocGFydCwgaWR4KSA9PiBpZHggPiBjdXJyZW50SWR4ICYmIHBhcnQgaW5zdGFuY2VvZiBEYXRlUGFydCk7XG4gIH1cblxuICBzZXRUbyh2YWwpIHt9XG5cbiAgcHJldigpIHtcbiAgICBsZXQgcGFydHMgPSBbXS5jb25jYXQodGhpcy5wYXJ0cykucmV2ZXJzZSgpO1xuICAgIGNvbnN0IGN1cnJlbnRJZHggPSBwYXJ0cy5pbmRleE9mKHRoaXMpO1xuICAgIHJldHVybiBwYXJ0cy5maW5kKChwYXJ0LCBpZHgpID0+IGlkeCA+IGN1cnJlbnRJZHggJiYgcGFydCBpbnN0YW5jZW9mIERhdGVQYXJ0KTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBTdHJpbmcodGhpcy5kYXRlKTtcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0ZVBhcnQ7IiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGF0ZVBhcnQgPSByZXF1aXJlKCcuL2RhdGVwYXJ0Jyk7XG5cbmNsYXNzIE1lcmlkaWVtIGV4dGVuZHMgRGF0ZVBhcnQge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRIb3VycygodGhpcy5kYXRlLmdldEhvdXJzKCkgKyAxMikgJSAyNCk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIHRoaXMudXAoKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCBtZXJpZGllbSA9IHRoaXMuZGF0ZS5nZXRIb3VycygpID4gMTIgPyAncG0nIDogJ2FtJztcbiAgICByZXR1cm4gL1xcQS8udGVzdCh0aGlzLnRva2VuKSA/IG1lcmlkaWVtLnRvVXBwZXJDYXNlKCkgOiBtZXJpZGllbTtcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gTWVyaWRpZW07IiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGF0ZVBhcnQgPSByZXF1aXJlKCcuL2RhdGVwYXJ0Jyk7XG5cbmNvbnN0IHBvcyA9IG4gPT4ge1xuICBuID0gbiAlIDEwO1xuICByZXR1cm4gbiA9PT0gMSA/ICdzdCcgOiBuID09PSAyID8gJ25kJyA6IG4gPT09IDMgPyAncmQnIDogJ3RoJztcbn07XG5cbmNsYXNzIERheSBleHRlbmRzIERhdGVQYXJ0IHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gIH1cblxuICB1cCgpIHtcbiAgICB0aGlzLmRhdGUuc2V0RGF0ZSh0aGlzLmRhdGUuZ2V0RGF0ZSgpICsgMSk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIHRoaXMuZGF0ZS5zZXREYXRlKHRoaXMuZGF0ZS5nZXREYXRlKCkgLSAxKTtcbiAgfVxuXG4gIHNldFRvKHZhbCkge1xuICAgIHRoaXMuZGF0ZS5zZXREYXRlKHBhcnNlSW50KHZhbC5zdWJzdHIoLTIpKSk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICBsZXQgZGF0ZSA9IHRoaXMuZGF0ZS5nZXREYXRlKCk7XG4gICAgbGV0IGRheSA9IHRoaXMuZGF0ZS5nZXREYXkoKTtcbiAgICByZXR1cm4gdGhpcy50b2tlbiA9PT0gJ0REJyA/IFN0cmluZyhkYXRlKS5wYWRTdGFydCgyLCAnMCcpIDogdGhpcy50b2tlbiA9PT0gJ0RvJyA/IGRhdGUgKyBwb3MoZGF0ZSkgOiB0aGlzLnRva2VuID09PSAnZCcgPyBkYXkgKyAxIDogdGhpcy50b2tlbiA9PT0gJ2RkZCcgPyB0aGlzLmxvY2FsZXMud2Vla2RheXNTaG9ydFtkYXldIDogdGhpcy50b2tlbiA9PT0gJ2RkZGQnID8gdGhpcy5sb2NhbGVzLndlZWtkYXlzW2RheV0gOiBkYXRlO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEYXk7IiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGF0ZVBhcnQgPSByZXF1aXJlKCcuL2RhdGVwYXJ0Jyk7XG5cbmNsYXNzIEhvdXJzIGV4dGVuZHMgRGF0ZVBhcnQge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRIb3Vycyh0aGlzLmRhdGUuZ2V0SG91cnMoKSArIDEpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLmRhdGUuc2V0SG91cnModGhpcy5kYXRlLmdldEhvdXJzKCkgLSAxKTtcbiAgfVxuXG4gIHNldFRvKHZhbCkge1xuICAgIHRoaXMuZGF0ZS5zZXRIb3VycyhwYXJzZUludCh2YWwuc3Vic3RyKC0yKSkpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IGhvdXJzID0gdGhpcy5kYXRlLmdldEhvdXJzKCk7XG4gICAgaWYgKC9oLy50ZXN0KHRoaXMudG9rZW4pKSBob3VycyA9IGhvdXJzICUgMTIgfHwgMTI7XG4gICAgcmV0dXJuIHRoaXMudG9rZW4ubGVuZ3RoID4gMSA/IFN0cmluZyhob3VycykucGFkU3RhcnQoMiwgJzAnKSA6IGhvdXJzO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIb3VyczsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBEYXRlUGFydCA9IHJlcXVpcmUoJy4vZGF0ZXBhcnQnKTtcblxuY2xhc3MgTWlsbGlzZWNvbmRzIGV4dGVuZHMgRGF0ZVBhcnQge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRNaWxsaXNlY29uZHModGhpcy5kYXRlLmdldE1pbGxpc2Vjb25kcygpICsgMSk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRNaWxsaXNlY29uZHModGhpcy5kYXRlLmdldE1pbGxpc2Vjb25kcygpIC0gMSk7XG4gIH1cblxuICBzZXRUbyh2YWwpIHtcbiAgICB0aGlzLmRhdGUuc2V0TWlsbGlzZWNvbmRzKHBhcnNlSW50KHZhbC5zdWJzdHIoLXRoaXMudG9rZW4ubGVuZ3RoKSkpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIFN0cmluZyh0aGlzLmRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpLnBhZFN0YXJ0KDQsICcwJykuc3Vic3RyKDAsIHRoaXMudG9rZW4ubGVuZ3RoKTtcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gTWlsbGlzZWNvbmRzOyIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IERhdGVQYXJ0ID0gcmVxdWlyZSgnLi9kYXRlcGFydCcpO1xuXG5jbGFzcyBNaW51dGVzIGV4dGVuZHMgRGF0ZVBhcnQge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRNaW51dGVzKHRoaXMuZGF0ZS5nZXRNaW51dGVzKCkgKyAxKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgdGhpcy5kYXRlLnNldE1pbnV0ZXModGhpcy5kYXRlLmdldE1pbnV0ZXMoKSAtIDEpO1xuICB9XG5cbiAgc2V0VG8odmFsKSB7XG4gICAgdGhpcy5kYXRlLnNldE1pbnV0ZXMocGFyc2VJbnQodmFsLnN1YnN0cigtMikpKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCBtID0gdGhpcy5kYXRlLmdldE1pbnV0ZXMoKTtcbiAgICByZXR1cm4gdGhpcy50b2tlbi5sZW5ndGggPiAxID8gU3RyaW5nKG0pLnBhZFN0YXJ0KDIsICcwJykgOiBtO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNaW51dGVzOyIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IERhdGVQYXJ0ID0gcmVxdWlyZSgnLi9kYXRlcGFydCcpO1xuXG5jbGFzcyBNb250aCBleHRlbmRzIERhdGVQYXJ0IHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gIH1cblxuICB1cCgpIHtcbiAgICB0aGlzLmRhdGUuc2V0TW9udGgodGhpcy5kYXRlLmdldE1vbnRoKCkgKyAxKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgdGhpcy5kYXRlLnNldE1vbnRoKHRoaXMuZGF0ZS5nZXRNb250aCgpIC0gMSk7XG4gIH1cblxuICBzZXRUbyh2YWwpIHtcbiAgICB2YWwgPSBwYXJzZUludCh2YWwuc3Vic3RyKC0yKSkgLSAxO1xuICAgIHRoaXMuZGF0ZS5zZXRNb250aCh2YWwgPCAwID8gMCA6IHZhbCk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICBsZXQgbW9udGggPSB0aGlzLmRhdGUuZ2V0TW9udGgoKTtcbiAgICBsZXQgdGwgPSB0aGlzLnRva2VuLmxlbmd0aDtcbiAgICByZXR1cm4gdGwgPT09IDIgPyBTdHJpbmcobW9udGggKyAxKS5wYWRTdGFydCgyLCAnMCcpIDogdGwgPT09IDMgPyB0aGlzLmxvY2FsZXMubW9udGhzU2hvcnRbbW9udGhdIDogdGwgPT09IDQgPyB0aGlzLmxvY2FsZXMubW9udGhzW21vbnRoXSA6IFN0cmluZyhtb250aCArIDEpO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNb250aDsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBEYXRlUGFydCA9IHJlcXVpcmUoJy4vZGF0ZXBhcnQnKTtcblxuY2xhc3MgU2Vjb25kcyBleHRlbmRzIERhdGVQYXJ0IHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gIH1cblxuICB1cCgpIHtcbiAgICB0aGlzLmRhdGUuc2V0U2Vjb25kcyh0aGlzLmRhdGUuZ2V0U2Vjb25kcygpICsgMSk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRTZWNvbmRzKHRoaXMuZGF0ZS5nZXRTZWNvbmRzKCkgLSAxKTtcbiAgfVxuXG4gIHNldFRvKHZhbCkge1xuICAgIHRoaXMuZGF0ZS5zZXRTZWNvbmRzKHBhcnNlSW50KHZhbC5zdWJzdHIoLTIpKSk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICBsZXQgcyA9IHRoaXMuZGF0ZS5nZXRTZWNvbmRzKCk7XG4gICAgcmV0dXJuIHRoaXMudG9rZW4ubGVuZ3RoID4gMSA/IFN0cmluZyhzKS5wYWRTdGFydCgyLCAnMCcpIDogcztcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2Vjb25kczsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBEYXRlUGFydCA9IHJlcXVpcmUoJy4vZGF0ZXBhcnQnKTtcblxuY2xhc3MgWWVhciBleHRlbmRzIERhdGVQYXJ0IHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gIH1cblxuICB1cCgpIHtcbiAgICB0aGlzLmRhdGUuc2V0RnVsbFllYXIodGhpcy5kYXRlLmdldEZ1bGxZZWFyKCkgKyAxKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgdGhpcy5kYXRlLnNldEZ1bGxZZWFyKHRoaXMuZGF0ZS5nZXRGdWxsWWVhcigpIC0gMSk7XG4gIH1cblxuICBzZXRUbyh2YWwpIHtcbiAgICB0aGlzLmRhdGUuc2V0RnVsbFllYXIodmFsLnN1YnN0cigtNCkpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IHllYXIgPSBTdHJpbmcodGhpcy5kYXRlLmdldEZ1bGxZZWFyKCkpLnBhZFN0YXJ0KDQsICcwJyk7XG4gICAgcmV0dXJuIHRoaXMudG9rZW4ubGVuZ3RoID09PSAyID8geWVhci5zdWJzdHIoLTIpIDogeWVhcjtcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gWWVhcjsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgRGF0ZVBhcnQ6IHJlcXVpcmUoJy4vZGF0ZXBhcnQnKSxcbiAgTWVyaWRpZW06IHJlcXVpcmUoJy4vbWVyaWRpZW0nKSxcbiAgRGF5OiByZXF1aXJlKCcuL2RheScpLFxuICBIb3VyczogcmVxdWlyZSgnLi9ob3VycycpLFxuICBNaWxsaXNlY29uZHM6IHJlcXVpcmUoJy4vbWlsbGlzZWNvbmRzJyksXG4gIE1pbnV0ZXM6IHJlcXVpcmUoJy4vbWludXRlcycpLFxuICBNb250aDogcmVxdWlyZSgnLi9tb250aCcpLFxuICBTZWNvbmRzOiByZXF1aXJlKCcuL3NlY29uZHMnKSxcbiAgWWVhcjogcmVxdWlyZSgnLi95ZWFyJylcbn07IiwgIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH1cblxuY29uc3QgY29sb3IgPSByZXF1aXJlKCdrbGV1cicpO1xuXG5jb25zdCBQcm9tcHQgPSByZXF1aXJlKCcuL3Byb21wdCcpO1xuXG5jb25zdCBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uL3V0aWwnKSxcbiAgICAgIHN0eWxlID0gX3JlcXVpcmUuc3R5bGUsXG4gICAgICBjbGVhciA9IF9yZXF1aXJlLmNsZWFyLFxuICAgICAgZmlndXJlcyA9IF9yZXF1aXJlLmZpZ3VyZXM7XG5cbmNvbnN0IF9yZXF1aXJlMiA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKSxcbiAgICAgIGVyYXNlID0gX3JlcXVpcmUyLmVyYXNlLFxuICAgICAgY3Vyc29yID0gX3JlcXVpcmUyLmN1cnNvcjtcblxuY29uc3QgX3JlcXVpcmUzID0gcmVxdWlyZSgnLi4vZGF0ZXBhcnRzJyksXG4gICAgICBEYXRlUGFydCA9IF9yZXF1aXJlMy5EYXRlUGFydCxcbiAgICAgIE1lcmlkaWVtID0gX3JlcXVpcmUzLk1lcmlkaWVtLFxuICAgICAgRGF5ID0gX3JlcXVpcmUzLkRheSxcbiAgICAgIEhvdXJzID0gX3JlcXVpcmUzLkhvdXJzLFxuICAgICAgTWlsbGlzZWNvbmRzID0gX3JlcXVpcmUzLk1pbGxpc2Vjb25kcyxcbiAgICAgIE1pbnV0ZXMgPSBfcmVxdWlyZTMuTWludXRlcyxcbiAgICAgIE1vbnRoID0gX3JlcXVpcmUzLk1vbnRoLFxuICAgICAgU2Vjb25kcyA9IF9yZXF1aXJlMy5TZWNvbmRzLFxuICAgICAgWWVhciA9IF9yZXF1aXJlMy5ZZWFyO1xuXG5jb25zdCByZWdleCA9IC9cXFxcKC4pfFwiKCg/OlxcXFxbXCJcXFxcXXxbXlwiXSkrKVwifChEW0RvXT98ZHszLDR9fGQpfChNezEsNH0pfChZWSg/OllZKT8pfChbYUFdKXwoW0hoXXsxLDJ9KXwobXsxLDJ9KXwoc3sxLDJ9KXwoU3sxLDR9KXwuL2c7XG5jb25zdCByZWdleEdyb3VwcyA9IHtcbiAgMTogKHtcbiAgICB0b2tlblxuICB9KSA9PiB0b2tlbi5yZXBsYWNlKC9cXFxcKC4pL2csICckMScpLFxuICAyOiBvcHRzID0+IG5ldyBEYXkob3B0cyksXG4gIC8vIERheSAvLyBUT0RPXG4gIDM6IG9wdHMgPT4gbmV3IE1vbnRoKG9wdHMpLFxuICAvLyBNb250aFxuICA0OiBvcHRzID0+IG5ldyBZZWFyKG9wdHMpLFxuICAvLyBZZWFyXG4gIDU6IG9wdHMgPT4gbmV3IE1lcmlkaWVtKG9wdHMpLFxuICAvLyBBTS9QTSAvLyBUT0RPIChzcGVjaWFsKVxuICA2OiBvcHRzID0+IG5ldyBIb3VycyhvcHRzKSxcbiAgLy8gSG91cnNcbiAgNzogb3B0cyA9PiBuZXcgTWludXRlcyhvcHRzKSxcbiAgLy8gTWludXRlc1xuICA4OiBvcHRzID0+IG5ldyBTZWNvbmRzKG9wdHMpLFxuICAvLyBTZWNvbmRzXG4gIDk6IG9wdHMgPT4gbmV3IE1pbGxpc2Vjb25kcyhvcHRzKSAvLyBGcmFjdGlvbmFsIHNlY29uZHNcblxufTtcbmNvbnN0IGRmbHRMb2NhbGVzID0ge1xuICBtb250aHM6ICdKYW51YXJ5LEZlYnJ1YXJ5LE1hcmNoLEFwcmlsLE1heSxKdW5lLEp1bHksQXVndXN0LFNlcHRlbWJlcixPY3RvYmVyLE5vdmVtYmVyLERlY2VtYmVyJy5zcGxpdCgnLCcpLFxuICBtb250aHNTaG9ydDogJ0phbixGZWIsTWFyLEFwcixNYXksSnVuLEp1bCxBdWcsU2VwLE9jdCxOb3YsRGVjJy5zcGxpdCgnLCcpLFxuICB3ZWVrZGF5czogJ1N1bmRheSxNb25kYXksVHVlc2RheSxXZWRuZXNkYXksVGh1cnNkYXksRnJpZGF5LFNhdHVyZGF5Jy5zcGxpdCgnLCcpLFxuICB3ZWVrZGF5c1Nob3J0OiAnU3VuLE1vbixUdWUsV2VkLFRodSxGcmksU2F0Jy5zcGxpdCgnLCcpXG59O1xuLyoqXG4gKiBEYXRlUHJvbXB0IEJhc2UgRWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG9wdHMubWVzc2FnZSBNZXNzYWdlXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMuaW5pdGlhbF0gSW5kZXggb2YgZGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLm1hc2tdIFRoZSBmb3JtYXQgbWFza1xuICogQHBhcmFtIHtvYmplY3R9IFtvcHRzLmxvY2FsZXNdIFRoZSBkYXRlIGxvY2FsZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5lcnJvcl0gVGhlIGVycm9yIG1lc3NhZ2Ugc2hvd24gb24gaW52YWxpZCB2YWx1ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMudmFsaWRhdGVdIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIHRoZSBzdWJtaXR0ZWQgdmFsdWVcbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICovXG5cbmNsYXNzIERhdGVQcm9tcHQgZXh0ZW5kcyBQcm9tcHQge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgICB0aGlzLm1zZyA9IG9wdHMubWVzc2FnZTtcbiAgICB0aGlzLmN1cnNvciA9IDA7XG4gICAgdGhpcy50eXBlZCA9ICcnO1xuICAgIHRoaXMubG9jYWxlcyA9IE9iamVjdC5hc3NpZ24oZGZsdExvY2FsZXMsIG9wdHMubG9jYWxlcyk7XG4gICAgdGhpcy5fZGF0ZSA9IG9wdHMuaW5pdGlhbCB8fCBuZXcgRGF0ZSgpO1xuICAgIHRoaXMuZXJyb3JNc2cgPSBvcHRzLmVycm9yIHx8ICdQbGVhc2UgRW50ZXIgQSBWYWxpZCBWYWx1ZSc7XG5cbiAgICB0aGlzLnZhbGlkYXRvciA9IG9wdHMudmFsaWRhdGUgfHwgKCgpID0+IHRydWUpO1xuXG4gICAgdGhpcy5tYXNrID0gb3B0cy5tYXNrIHx8ICdZWVlZLU1NLUREIEhIOm1tOnNzJztcbiAgICB0aGlzLmNsZWFyID0gY2xlYXIoJycsIHRoaXMub3V0LmNvbHVtbnMpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0ZTtcbiAgfVxuXG4gIGdldCBkYXRlKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRlO1xuICB9XG5cbiAgc2V0IGRhdGUoZGF0ZSkge1xuICAgIGlmIChkYXRlKSB0aGlzLl9kYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkpO1xuICB9XG5cbiAgc2V0IG1hc2sobWFzaykge1xuICAgIGxldCByZXN1bHQ7XG4gICAgdGhpcy5wYXJ0cyA9IFtdO1xuXG4gICAgd2hpbGUgKHJlc3VsdCA9IHJlZ2V4LmV4ZWMobWFzaykpIHtcbiAgICAgIGxldCBtYXRjaCA9IHJlc3VsdC5zaGlmdCgpO1xuICAgICAgbGV0IGlkeCA9IHJlc3VsdC5maW5kSW5kZXgoZ3IgPT4gZ3IgIT0gbnVsbCk7XG4gICAgICB0aGlzLnBhcnRzLnB1c2goaWR4IGluIHJlZ2V4R3JvdXBzID8gcmVnZXhHcm91cHNbaWR4XSh7XG4gICAgICAgIHRva2VuOiByZXN1bHRbaWR4XSB8fCBtYXRjaCxcbiAgICAgICAgZGF0ZTogdGhpcy5kYXRlLFxuICAgICAgICBwYXJ0czogdGhpcy5wYXJ0cyxcbiAgICAgICAgbG9jYWxlczogdGhpcy5sb2NhbGVzXG4gICAgICB9KSA6IHJlc3VsdFtpZHhdIHx8IG1hdGNoKTtcbiAgICB9XG5cbiAgICBsZXQgcGFydHMgPSB0aGlzLnBhcnRzLnJlZHVjZSgoYXJyLCBpKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGkgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBhcnJbYXJyLmxlbmd0aCAtIDFdID09PSAnc3RyaW5nJykgYXJyW2Fyci5sZW5ndGggLSAxXSArPSBpO2Vsc2UgYXJyLnB1c2goaSk7XG4gICAgICByZXR1cm4gYXJyO1xuICAgIH0sIFtdKTtcbiAgICB0aGlzLnBhcnRzLnNwbGljZSgwKTtcbiAgICB0aGlzLnBhcnRzLnB1c2goLi4ucGFydHMpO1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuXG4gIG1vdmVDdXJzb3Iobikge1xuICAgIHRoaXMudHlwZWQgPSAnJztcbiAgICB0aGlzLmN1cnNvciA9IG47XG4gICAgdGhpcy5maXJlKCk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLm1vdmVDdXJzb3IodGhpcy5wYXJ0cy5maW5kSW5kZXgocCA9PiBwIGluc3RhbmNlb2YgRGF0ZVBhcnQpKTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZXhpdCgpIHtcbiAgICB0aGlzLmFib3J0KCk7XG4gIH1cblxuICBhYm9ydCgpIHtcbiAgICB0aGlzLmRvbmUgPSB0aGlzLmFib3J0ZWQgPSB0cnVlO1xuICAgIHRoaXMuZXJyb3IgPSBmYWxzZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICB2YWxpZGF0ZSgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKGZ1bmN0aW9uKiAoKSB7XG4gICAgICBsZXQgdmFsaWQgPSB5aWVsZCBfdGhpcy52YWxpZGF0b3IoX3RoaXMudmFsdWUpO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbGlkID09PSAnc3RyaW5nJykge1xuICAgICAgICBfdGhpcy5lcnJvck1zZyA9IHZhbGlkO1xuICAgICAgICB2YWxpZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5lcnJvciA9ICF2YWxpZDtcbiAgICB9KSgpO1xuICB9XG5cbiAgc3VibWl0KCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKGZ1bmN0aW9uKiAoKSB7XG4gICAgICB5aWVsZCBfdGhpczIudmFsaWRhdGUoKTtcblxuICAgICAgaWYgKF90aGlzMi5lcnJvcikge1xuICAgICAgICBfdGhpczIuY29sb3IgPSAncmVkJztcblxuICAgICAgICBfdGhpczIuZmlyZSgpO1xuXG4gICAgICAgIF90aGlzMi5yZW5kZXIoKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzMi5kb25lID0gdHJ1ZTtcbiAgICAgIF90aGlzMi5hYm9ydGVkID0gZmFsc2U7XG5cbiAgICAgIF90aGlzMi5maXJlKCk7XG5cbiAgICAgIF90aGlzMi5yZW5kZXIoKTtcblxuICAgICAgX3RoaXMyLm91dC53cml0ZSgnXFxuJyk7XG5cbiAgICAgIF90aGlzMi5jbG9zZSgpO1xuICAgIH0pKCk7XG4gIH1cblxuICB1cCgpIHtcbiAgICB0aGlzLnR5cGVkID0gJyc7XG4gICAgdGhpcy5wYXJ0c1t0aGlzLmN1cnNvcl0udXAoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLnR5cGVkID0gJyc7XG4gICAgdGhpcy5wYXJ0c1t0aGlzLmN1cnNvcl0uZG93bigpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBsZWZ0KCkge1xuICAgIGxldCBwcmV2ID0gdGhpcy5wYXJ0c1t0aGlzLmN1cnNvcl0ucHJldigpO1xuICAgIGlmIChwcmV2ID09IG51bGwpIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLm1vdmVDdXJzb3IodGhpcy5wYXJ0cy5pbmRleE9mKHByZXYpKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcmlnaHQoKSB7XG4gICAgbGV0IG5leHQgPSB0aGlzLnBhcnRzW3RoaXMuY3Vyc29yXS5uZXh0KCk7XG4gICAgaWYgKG5leHQgPT0gbnVsbCkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMubW92ZUN1cnNvcih0aGlzLnBhcnRzLmluZGV4T2YobmV4dCkpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBuZXh0KCkge1xuICAgIGxldCBuZXh0ID0gdGhpcy5wYXJ0c1t0aGlzLmN1cnNvcl0ubmV4dCgpO1xuICAgIHRoaXMubW92ZUN1cnNvcihuZXh0ID8gdGhpcy5wYXJ0cy5pbmRleE9mKG5leHQpIDogdGhpcy5wYXJ0cy5maW5kSW5kZXgocGFydCA9PiBwYXJ0IGluc3RhbmNlb2YgRGF0ZVBhcnQpKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgXyhjKSB7XG4gICAgaWYgKC9cXGQvLnRlc3QoYykpIHtcbiAgICAgIHRoaXMudHlwZWQgKz0gYztcbiAgICAgIHRoaXMucGFydHNbdGhpcy5jdXJzb3JdLnNldFRvKHRoaXMudHlwZWQpO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuY2xvc2VkKSByZXR1cm47XG4gICAgaWYgKHRoaXMuZmlyc3RSZW5kZXIpIHRoaXMub3V0LndyaXRlKGN1cnNvci5oaWRlKTtlbHNlIHRoaXMub3V0LndyaXRlKGNsZWFyKHRoaXMub3V0cHV0VGV4dCwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgIHN1cGVyLnJlbmRlcigpOyAvLyBQcmludCBwcm9tcHRcblxuICAgIHRoaXMub3V0cHV0VGV4dCA9IFtzdHlsZS5zeW1ib2wodGhpcy5kb25lLCB0aGlzLmFib3J0ZWQpLCBjb2xvci5ib2xkKHRoaXMubXNnKSwgc3R5bGUuZGVsaW1pdGVyKGZhbHNlKSwgdGhpcy5wYXJ0cy5yZWR1Y2UoKGFyciwgcCwgaWR4KSA9PiBhcnIuY29uY2F0KGlkeCA9PT0gdGhpcy5jdXJzb3IgJiYgIXRoaXMuZG9uZSA/IGNvbG9yLmN5YW4oKS51bmRlcmxpbmUocC50b1N0cmluZygpKSA6IHApLCBbXSkuam9pbignJyldLmpvaW4oJyAnKTsgLy8gUHJpbnQgZXJyb3JcblxuICAgIGlmICh0aGlzLmVycm9yKSB7XG4gICAgICB0aGlzLm91dHB1dFRleHQgKz0gdGhpcy5lcnJvck1zZy5zcGxpdCgnXFxuJykucmVkdWNlKChhLCBsLCBpKSA9PiBhICsgYFxcbiR7aSA/IGAgYCA6IGZpZ3VyZXMucG9pbnRlclNtYWxsfSAke2NvbG9yLnJlZCgpLml0YWxpYyhsKX1gLCBgYCk7XG4gICAgfVxuXG4gICAgdGhpcy5vdXQud3JpdGUoZXJhc2UubGluZSArIGN1cnNvci50bygwKSArIHRoaXMub3V0cHV0VGV4dCk7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGVQcm9tcHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9XG5cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7IH0gZnVuY3Rpb24gX3Rocm93KGVycikgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfVxuXG5jb25zdCBjb2xvciA9IHJlcXVpcmUoJ2tsZXVyJyk7XG5cbmNvbnN0IFByb21wdCA9IHJlcXVpcmUoJy4vcHJvbXB0Jyk7XG5cbmNvbnN0IF9yZXF1aXJlID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpLFxuICAgICAgY3Vyc29yID0gX3JlcXVpcmUuY3Vyc29yLFxuICAgICAgZXJhc2UgPSBfcmVxdWlyZS5lcmFzZTtcblxuY29uc3QgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi4vdXRpbCcpLFxuICAgICAgc3R5bGUgPSBfcmVxdWlyZTIuc3R5bGUsXG4gICAgICBmaWd1cmVzID0gX3JlcXVpcmUyLmZpZ3VyZXMsXG4gICAgICBjbGVhciA9IF9yZXF1aXJlMi5jbGVhcixcbiAgICAgIGxpbmVzID0gX3JlcXVpcmUyLmxpbmVzO1xuXG5jb25zdCBpc051bWJlciA9IC9bMC05XS87XG5cbmNvbnN0IGlzRGVmID0gYW55ID0+IGFueSAhPT0gdW5kZWZpbmVkO1xuXG5jb25zdCByb3VuZCA9IChudW1iZXIsIHByZWNpc2lvbikgPT4ge1xuICBsZXQgZmFjdG9yID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbik7XG4gIHJldHVybiBNYXRoLnJvdW5kKG51bWJlciAqIGZhY3RvcikgLyBmYWN0b3I7XG59O1xuLyoqXG4gKiBOdW1iZXJQcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5zdHlsZT0nZGVmYXVsdCddIFJlbmRlciBzdHlsZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmluaXRpYWxdIERlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5tYXg9K0luZmluaXR5XSBNYXggdmFsdWVcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5taW49LUluZmluaXR5XSBNaW4gdmFsdWVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdHMuZmxvYXQ9ZmFsc2VdIFBhcnNlIGlucHV0IGFzIGZsb2F0c1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLnJvdW5kPTJdIFJvdW5kIGZsb2F0cyB0byB4IGRlY2ltYWxzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMuaW5jcmVtZW50PTFdIE51bWJlciB0byBpbmNyZW1lbnQgYnkgd2hlbiB1c2luZyBhcnJvdy1rZXlzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy52YWxpZGF0ZV0gVmFsaWRhdGUgZnVuY3Rpb25cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmVycm9yXSBUaGUgaW52YWxpZCBlcnJvciBsYWJlbFxuICovXG5cblxuY2xhc3MgTnVtYmVyUHJvbXB0IGV4dGVuZHMgUHJvbXB0IHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy50cmFuc2Zvcm0gPSBzdHlsZS5yZW5kZXIob3B0cy5zdHlsZSk7XG4gICAgdGhpcy5tc2cgPSBvcHRzLm1lc3NhZ2U7XG4gICAgdGhpcy5pbml0aWFsID0gaXNEZWYob3B0cy5pbml0aWFsKSA/IG9wdHMuaW5pdGlhbCA6ICcnO1xuICAgIHRoaXMuZmxvYXQgPSAhIW9wdHMuZmxvYXQ7XG4gICAgdGhpcy5yb3VuZCA9IG9wdHMucm91bmQgfHwgMjtcbiAgICB0aGlzLmluYyA9IG9wdHMuaW5jcmVtZW50IHx8IDE7XG4gICAgdGhpcy5taW4gPSBpc0RlZihvcHRzLm1pbikgPyBvcHRzLm1pbiA6IC1JbmZpbml0eTtcbiAgICB0aGlzLm1heCA9IGlzRGVmKG9wdHMubWF4KSA/IG9wdHMubWF4IDogSW5maW5pdHk7XG4gICAgdGhpcy5lcnJvck1zZyA9IG9wdHMuZXJyb3IgfHwgYFBsZWFzZSBFbnRlciBBIFZhbGlkIFZhbHVlYDtcblxuICAgIHRoaXMudmFsaWRhdG9yID0gb3B0cy52YWxpZGF0ZSB8fCAoKCkgPT4gdHJ1ZSk7XG5cbiAgICB0aGlzLmNvbG9yID0gYGN5YW5gO1xuICAgIHRoaXMudmFsdWUgPSBgYDtcbiAgICB0aGlzLnR5cGVkID0gYGA7XG4gICAgdGhpcy5sYXN0SGl0ID0gMDtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgc2V0IHZhbHVlKHYpIHtcbiAgICBpZiAoIXYgJiYgdiAhPT0gMCkge1xuICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICB0aGlzLnJlbmRlcmVkID0gY29sb3IuZ3JheSh0aGlzLnRyYW5zZm9ybS5yZW5kZXIoYCR7dGhpcy5pbml0aWFsfWApKTtcbiAgICAgIHRoaXMuX3ZhbHVlID0gYGA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSBmYWxzZTtcbiAgICAgIHRoaXMucmVuZGVyZWQgPSB0aGlzLnRyYW5zZm9ybS5yZW5kZXIoYCR7cm91bmQodiwgdGhpcy5yb3VuZCl9YCk7XG4gICAgICB0aGlzLl92YWx1ZSA9IHJvdW5kKHYsIHRoaXMucm91bmQpO1xuICAgIH1cblxuICAgIHRoaXMuZmlyZSgpO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIHBhcnNlKHgpIHtcbiAgICByZXR1cm4gdGhpcy5mbG9hdCA/IHBhcnNlRmxvYXQoeCkgOiBwYXJzZUludCh4KTtcbiAgfVxuXG4gIHZhbGlkKGMpIHtcbiAgICByZXR1cm4gYyA9PT0gYC1gIHx8IGMgPT09IGAuYCAmJiB0aGlzLmZsb2F0IHx8IGlzTnVtYmVyLnRlc3QoYyk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnR5cGVkID0gYGA7XG4gICAgdGhpcy52YWx1ZSA9IGBgO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBleGl0KCkge1xuICAgIHRoaXMuYWJvcnQoKTtcbiAgfVxuXG4gIGFib3J0KCkge1xuICAgIGxldCB4ID0gdGhpcy52YWx1ZTtcbiAgICB0aGlzLnZhbHVlID0geCAhPT0gYGAgPyB4IDogdGhpcy5pbml0aWFsO1xuICAgIHRoaXMuZG9uZSA9IHRoaXMuYWJvcnRlZCA9IHRydWU7XG4gICAgdGhpcy5lcnJvciA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoYFxcbmApO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIHZhbGlkYXRlKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoZnVuY3Rpb24qICgpIHtcbiAgICAgIGxldCB2YWxpZCA9IHlpZWxkIF90aGlzLnZhbGlkYXRvcihfdGhpcy52YWx1ZSk7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsaWQgPT09IGBzdHJpbmdgKSB7XG4gICAgICAgIF90aGlzLmVycm9yTXNnID0gdmFsaWQ7XG4gICAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmVycm9yID0gIXZhbGlkO1xuICAgIH0pKCk7XG4gIH1cblxuICBzdWJtaXQoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoZnVuY3Rpb24qICgpIHtcbiAgICAgIHlpZWxkIF90aGlzMi52YWxpZGF0ZSgpO1xuXG4gICAgICBpZiAoX3RoaXMyLmVycm9yKSB7XG4gICAgICAgIF90aGlzMi5jb2xvciA9IGByZWRgO1xuXG4gICAgICAgIF90aGlzMi5maXJlKCk7XG5cbiAgICAgICAgX3RoaXMyLnJlbmRlcigpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbGV0IHggPSBfdGhpczIudmFsdWU7XG4gICAgICBfdGhpczIudmFsdWUgPSB4ICE9PSBgYCA/IHggOiBfdGhpczIuaW5pdGlhbDtcbiAgICAgIF90aGlzMi5kb25lID0gdHJ1ZTtcbiAgICAgIF90aGlzMi5hYm9ydGVkID0gZmFsc2U7XG4gICAgICBfdGhpczIuZXJyb3IgPSBmYWxzZTtcblxuICAgICAgX3RoaXMyLmZpcmUoKTtcblxuICAgICAgX3RoaXMyLnJlbmRlcigpO1xuXG4gICAgICBfdGhpczIub3V0LndyaXRlKGBcXG5gKTtcblxuICAgICAgX3RoaXMyLmNsb3NlKCk7XG4gICAgfSkoKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMudHlwZWQgPSBgYDtcblxuICAgIGlmICh0aGlzLnZhbHVlID09PSAnJykge1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMubWluIC0gdGhpcy5pbmM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudmFsdWUgPj0gdGhpcy5tYXgpIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLnZhbHVlICs9IHRoaXMuaW5jO1xuICAgIHRoaXMuY29sb3IgPSBgY3lhbmA7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgdGhpcy50eXBlZCA9IGBgO1xuXG4gICAgaWYgKHRoaXMudmFsdWUgPT09ICcnKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5taW4gKyB0aGlzLmluYztcbiAgICB9XG5cbiAgICBpZiAodGhpcy52YWx1ZSA8PSB0aGlzLm1pbikgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMudmFsdWUgLT0gdGhpcy5pbmM7XG4gICAgdGhpcy5jb2xvciA9IGBjeWFuYDtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZGVsZXRlKCkge1xuICAgIGxldCB2YWwgPSB0aGlzLnZhbHVlLnRvU3RyaW5nKCk7XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5wYXJzZSh2YWwgPSB2YWwuc2xpY2UoMCwgLTEpKSB8fCBgYDtcblxuICAgIGlmICh0aGlzLnZhbHVlICE9PSAnJyAmJiB0aGlzLnZhbHVlIDwgdGhpcy5taW4pIHtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLm1pbjtcbiAgICB9XG5cbiAgICB0aGlzLmNvbG9yID0gYGN5YW5gO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBuZXh0KCkge1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLmluaXRpYWw7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIF8oYywga2V5KSB7XG4gICAgaWYgKCF0aGlzLnZhbGlkKGMpKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBpZiAobm93IC0gdGhpcy5sYXN0SGl0ID4gMTAwMCkgdGhpcy50eXBlZCA9IGBgOyAvLyAxcyBlbGFwc2VkXG5cbiAgICB0aGlzLnR5cGVkICs9IGM7XG4gICAgdGhpcy5sYXN0SGl0ID0gbm93O1xuICAgIHRoaXMuY29sb3IgPSBgY3lhbmA7XG4gICAgaWYgKGMgPT09IGAuYCkgcmV0dXJuIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMudmFsdWUgPSBNYXRoLm1pbih0aGlzLnBhcnNlKHRoaXMudHlwZWQpLCB0aGlzLm1heCk7XG4gICAgaWYgKHRoaXMudmFsdWUgPiB0aGlzLm1heCkgdGhpcy52YWx1ZSA9IHRoaXMubWF4O1xuICAgIGlmICh0aGlzLnZhbHVlIDwgdGhpcy5taW4pIHRoaXMudmFsdWUgPSB0aGlzLm1pbjtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLmNsb3NlZCkgcmV0dXJuO1xuXG4gICAgaWYgKCF0aGlzLmZpcnN0UmVuZGVyKSB7XG4gICAgICBpZiAodGhpcy5vdXRwdXRFcnJvcikgdGhpcy5vdXQud3JpdGUoY3Vyc29yLmRvd24obGluZXModGhpcy5vdXRwdXRFcnJvciwgdGhpcy5vdXQuY29sdW1ucykgLSAxKSArIGNsZWFyKHRoaXMub3V0cHV0RXJyb3IsIHRoaXMub3V0LmNvbHVtbnMpKTtcbiAgICAgIHRoaXMub3V0LndyaXRlKGNsZWFyKHRoaXMub3V0cHV0VGV4dCwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgIH1cblxuICAgIHN1cGVyLnJlbmRlcigpO1xuICAgIHRoaXMub3V0cHV0RXJyb3IgPSAnJzsgLy8gUHJpbnQgcHJvbXB0XG5cbiAgICB0aGlzLm91dHB1dFRleHQgPSBbc3R5bGUuc3ltYm9sKHRoaXMuZG9uZSwgdGhpcy5hYm9ydGVkKSwgY29sb3IuYm9sZCh0aGlzLm1zZyksIHN0eWxlLmRlbGltaXRlcih0aGlzLmRvbmUpLCAhdGhpcy5kb25lIHx8ICF0aGlzLmRvbmUgJiYgIXRoaXMucGxhY2Vob2xkZXIgPyBjb2xvclt0aGlzLmNvbG9yXSgpLnVuZGVybGluZSh0aGlzLnJlbmRlcmVkKSA6IHRoaXMucmVuZGVyZWRdLmpvaW4oYCBgKTsgLy8gUHJpbnQgZXJyb3JcblxuICAgIGlmICh0aGlzLmVycm9yKSB7XG4gICAgICB0aGlzLm91dHB1dEVycm9yICs9IHRoaXMuZXJyb3JNc2cuc3BsaXQoYFxcbmApLnJlZHVjZSgoYSwgbCwgaSkgPT4gYSArIGBcXG4ke2kgPyBgIGAgOiBmaWd1cmVzLnBvaW50ZXJTbWFsbH0gJHtjb2xvci5yZWQoKS5pdGFsaWMobCl9YCwgYGApO1xuICAgIH1cblxuICAgIHRoaXMub3V0LndyaXRlKGVyYXNlLmxpbmUgKyBjdXJzb3IudG8oMCkgKyB0aGlzLm91dHB1dFRleHQgKyBjdXJzb3Iuc2F2ZSArIHRoaXMub3V0cHV0RXJyb3IgKyBjdXJzb3IucmVzdG9yZSk7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE51bWJlclByb21wdDsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb2xvciA9IHJlcXVpcmUoJ2tsZXVyJyk7XG5cbmNvbnN0IF9yZXF1aXJlID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpLFxuICAgICAgY3Vyc29yID0gX3JlcXVpcmUuY3Vyc29yO1xuXG5jb25zdCBQcm9tcHQgPSByZXF1aXJlKCcuL3Byb21wdCcpO1xuXG5jb25zdCBfcmVxdWlyZTIgPSByZXF1aXJlKCcuLi91dGlsJyksXG4gICAgICBjbGVhciA9IF9yZXF1aXJlMi5jbGVhcixcbiAgICAgIGZpZ3VyZXMgPSBfcmVxdWlyZTIuZmlndXJlcyxcbiAgICAgIHN0eWxlID0gX3JlcXVpcmUyLnN0eWxlLFxuICAgICAgd3JhcCA9IF9yZXF1aXJlMi53cmFwLFxuICAgICAgZW50cmllc1RvRGlzcGxheSA9IF9yZXF1aXJlMi5lbnRyaWVzVG9EaXNwbGF5O1xuLyoqXG4gKiBNdWx0aXNlbGVjdFByb21wdCBCYXNlIEVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRzLm1lc3NhZ2UgTWVzc2FnZVxuICogQHBhcmFtIHtBcnJheX0gb3B0cy5jaG9pY2VzIEFycmF5IG9mIGNob2ljZSBvYmplY3RzXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuaGludF0gSGludCB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMud2Fybl0gSGludCBzaG93biBmb3IgZGlzYWJsZWQgY2hvaWNlc1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLm1heF0gTWF4IGNob2ljZXNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5jdXJzb3I9MF0gQ3Vyc29yIHN0YXJ0IHBvc2l0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMub3B0aW9uc1BlclBhZ2U9MTBdIE1heCBvcHRpb25zIHRvIGRpc3BsYXkgYXQgb25jZVxuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKi9cblxuXG5jbGFzcyBNdWx0aXNlbGVjdFByb21wdCBleHRlbmRzIFByb21wdCB7XG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXMubXNnID0gb3B0cy5tZXNzYWdlO1xuICAgIHRoaXMuY3Vyc29yID0gb3B0cy5jdXJzb3IgfHwgMDtcbiAgICB0aGlzLnNjcm9sbEluZGV4ID0gb3B0cy5jdXJzb3IgfHwgMDtcbiAgICB0aGlzLmhpbnQgPSBvcHRzLmhpbnQgfHwgJyc7XG4gICAgdGhpcy53YXJuID0gb3B0cy53YXJuIHx8ICctIFRoaXMgb3B0aW9uIGlzIGRpc2FibGVkIC0nO1xuICAgIHRoaXMubWluU2VsZWN0ZWQgPSBvcHRzLm1pbjtcbiAgICB0aGlzLnNob3dNaW5FcnJvciA9IGZhbHNlO1xuICAgIHRoaXMubWF4Q2hvaWNlcyA9IG9wdHMubWF4O1xuICAgIHRoaXMuaW5zdHJ1Y3Rpb25zID0gb3B0cy5pbnN0cnVjdGlvbnM7XG4gICAgdGhpcy5vcHRpb25zUGVyUGFnZSA9IG9wdHMub3B0aW9uc1BlclBhZ2UgfHwgMTA7XG4gICAgdGhpcy52YWx1ZSA9IG9wdHMuY2hvaWNlcy5tYXAoKGNoLCBpZHgpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgY2ggPT09ICdzdHJpbmcnKSBjaCA9IHtcbiAgICAgICAgdGl0bGU6IGNoLFxuICAgICAgICB2YWx1ZTogaWR4XG4gICAgICB9O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGl0bGU6IGNoICYmIChjaC50aXRsZSB8fCBjaC52YWx1ZSB8fCBjaCksXG4gICAgICAgIGRlc2NyaXB0aW9uOiBjaCAmJiBjaC5kZXNjcmlwdGlvbixcbiAgICAgICAgdmFsdWU6IGNoICYmIChjaC52YWx1ZSA9PT0gdW5kZWZpbmVkID8gaWR4IDogY2gudmFsdWUpLFxuICAgICAgICBzZWxlY3RlZDogY2ggJiYgY2guc2VsZWN0ZWQsXG4gICAgICAgIGRpc2FibGVkOiBjaCAmJiBjaC5kaXNhYmxlZFxuICAgICAgfTtcbiAgICB9KTtcbiAgICB0aGlzLmNsZWFyID0gY2xlYXIoJycsIHRoaXMub3V0LmNvbHVtbnMpO1xuXG4gICAgaWYgKCFvcHRzLm92ZXJyaWRlUmVuZGVyKSB7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMudmFsdWUubWFwKHYgPT4gIXYuc2VsZWN0ZWQpO1xuICAgIHRoaXMuY3Vyc29yID0gMDtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgc2VsZWN0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWUuZmlsdGVyKHYgPT4gdi5zZWxlY3RlZCk7XG4gIH1cblxuICBleGl0KCkge1xuICAgIHRoaXMuYWJvcnQoKTtcbiAgfVxuXG4gIGFib3J0KCkge1xuICAgIHRoaXMuZG9uZSA9IHRoaXMuYWJvcnRlZCA9IHRydWU7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm91dC53cml0ZSgnXFxuJyk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgc3VibWl0KCkge1xuICAgIGNvbnN0IHNlbGVjdGVkID0gdGhpcy52YWx1ZS5maWx0ZXIoZSA9PiBlLnNlbGVjdGVkKTtcblxuICAgIGlmICh0aGlzLm1pblNlbGVjdGVkICYmIHNlbGVjdGVkLmxlbmd0aCA8IHRoaXMubWluU2VsZWN0ZWQpIHtcbiAgICAgIHRoaXMuc2hvd01pbkVycm9yID0gdHJ1ZTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgICB0aGlzLmFib3J0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuZmlyZSgpO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBmaXJzdCgpIHtcbiAgICB0aGlzLmN1cnNvciA9IDA7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGxhc3QoKSB7XG4gICAgdGhpcy5jdXJzb3IgPSB0aGlzLnZhbHVlLmxlbmd0aCAtIDE7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgdGhpcy5jdXJzb3IgPSAodGhpcy5jdXJzb3IgKyAxKSAlIHRoaXMudmFsdWUubGVuZ3RoO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICB1cCgpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IgPT09IDApIHtcbiAgICAgIHRoaXMuY3Vyc29yID0gdGhpcy52YWx1ZS5sZW5ndGggLSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnNvci0tO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIGlmICh0aGlzLmN1cnNvciA9PT0gdGhpcy52YWx1ZS5sZW5ndGggLSAxKSB7XG4gICAgICB0aGlzLmN1cnNvciA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3Vyc29yKys7XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGxlZnQoKSB7XG4gICAgdGhpcy52YWx1ZVt0aGlzLmN1cnNvcl0uc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcmlnaHQoKSB7XG4gICAgaWYgKHRoaXMudmFsdWUuZmlsdGVyKGUgPT4gZS5zZWxlY3RlZCkubGVuZ3RoID49IHRoaXMubWF4Q2hvaWNlcykgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMudmFsdWVbdGhpcy5jdXJzb3JdLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgaGFuZGxlU3BhY2VUb2dnbGUoKSB7XG4gICAgY29uc3QgdiA9IHRoaXMudmFsdWVbdGhpcy5jdXJzb3JdO1xuXG4gICAgaWYgKHYuc2VsZWN0ZWQpIHtcbiAgICAgIHYuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfSBlbHNlIGlmICh2LmRpc2FibGVkIHx8IHRoaXMudmFsdWUuZmlsdGVyKGUgPT4gZS5zZWxlY3RlZCkubGVuZ3RoID49IHRoaXMubWF4Q2hvaWNlcykge1xuICAgICAgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2LnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICB9XG5cbiAgdG9nZ2xlQWxsKCkge1xuICAgIGlmICh0aGlzLm1heENob2ljZXMgIT09IHVuZGVmaW5lZCB8fCB0aGlzLnZhbHVlW3RoaXMuY3Vyc29yXS5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIH1cblxuICAgIGNvbnN0IG5ld1NlbGVjdGVkID0gIXRoaXMudmFsdWVbdGhpcy5jdXJzb3JdLnNlbGVjdGVkO1xuICAgIHRoaXMudmFsdWUuZmlsdGVyKHYgPT4gIXYuZGlzYWJsZWQpLmZvckVhY2godiA9PiB2LnNlbGVjdGVkID0gbmV3U2VsZWN0ZWQpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBfKGMsIGtleSkge1xuICAgIGlmIChjID09PSAnICcpIHtcbiAgICAgIHRoaXMuaGFuZGxlU3BhY2VUb2dnbGUoKTtcbiAgICB9IGVsc2UgaWYgKGMgPT09ICdhJykge1xuICAgICAgdGhpcy50b2dnbGVBbGwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlckluc3RydWN0aW9ucygpIHtcbiAgICBpZiAodGhpcy5pbnN0cnVjdGlvbnMgPT09IHVuZGVmaW5lZCB8fCB0aGlzLmluc3RydWN0aW9ucykge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLmluc3RydWN0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdHJ1Y3Rpb25zO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJ1xcbkluc3RydWN0aW9uczpcXG4nICsgYCAgICAke2ZpZ3VyZXMuYXJyb3dVcH0vJHtmaWd1cmVzLmFycm93RG93bn06IEhpZ2hsaWdodCBvcHRpb25cXG5gICsgYCAgICAke2ZpZ3VyZXMuYXJyb3dMZWZ0fS8ke2ZpZ3VyZXMuYXJyb3dSaWdodH0vW3NwYWNlXTogVG9nZ2xlIHNlbGVjdGlvblxcbmAgKyAodGhpcy5tYXhDaG9pY2VzID09PSB1bmRlZmluZWQgPyBgICAgIGE6IFRvZ2dsZSBhbGxcXG5gIDogJycpICsgYCAgICBlbnRlci9yZXR1cm46IENvbXBsZXRlIGFuc3dlcmA7XG4gICAgfVxuXG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgcmVuZGVyT3B0aW9uKGN1cnNvciwgdiwgaSwgYXJyb3dJbmRpY2F0b3IpIHtcbiAgICBjb25zdCBwcmVmaXggPSAodi5zZWxlY3RlZCA/IGNvbG9yLmdyZWVuKGZpZ3VyZXMucmFkaW9PbikgOiBmaWd1cmVzLnJhZGlvT2ZmKSArICcgJyArIGFycm93SW5kaWNhdG9yICsgJyAnO1xuICAgIGxldCB0aXRsZSwgZGVzYztcblxuICAgIGlmICh2LmRpc2FibGVkKSB7XG4gICAgICB0aXRsZSA9IGN1cnNvciA9PT0gaSA/IGNvbG9yLmdyYXkoKS51bmRlcmxpbmUodi50aXRsZSkgOiBjb2xvci5zdHJpa2V0aHJvdWdoKCkuZ3JheSh2LnRpdGxlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGl0bGUgPSBjdXJzb3IgPT09IGkgPyBjb2xvci5jeWFuKCkudW5kZXJsaW5lKHYudGl0bGUpIDogdi50aXRsZTtcblxuICAgICAgaWYgKGN1cnNvciA9PT0gaSAmJiB2LmRlc2NyaXB0aW9uKSB7XG4gICAgICAgIGRlc2MgPSBgIC0gJHt2LmRlc2NyaXB0aW9ufWA7XG5cbiAgICAgICAgaWYgKHByZWZpeC5sZW5ndGggKyB0aXRsZS5sZW5ndGggKyBkZXNjLmxlbmd0aCA+PSB0aGlzLm91dC5jb2x1bW5zIHx8IHYuZGVzY3JpcHRpb24uc3BsaXQoL1xccj9cXG4vKS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgZGVzYyA9ICdcXG4nICsgd3JhcCh2LmRlc2NyaXB0aW9uLCB7XG4gICAgICAgICAgICBtYXJnaW46IHByZWZpeC5sZW5ndGgsXG4gICAgICAgICAgICB3aWR0aDogdGhpcy5vdXQuY29sdW1uc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWZpeCArIHRpdGxlICsgY29sb3IuZ3JheShkZXNjIHx8ICcnKTtcbiAgfSAvLyBzaGFyZWQgd2l0aCBhdXRvY29tcGxldGVNdWx0aXNlbGVjdFxuXG5cbiAgcGFnaW5hdGVPcHRpb25zKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBjb2xvci5yZWQoJ05vIG1hdGNoZXMgZm9yIHRoaXMgcXVlcnkuJyk7XG4gICAgfVxuXG4gICAgbGV0IF9lbnRyaWVzVG9EaXNwbGF5ID0gZW50cmllc1RvRGlzcGxheSh0aGlzLmN1cnNvciwgb3B0aW9ucy5sZW5ndGgsIHRoaXMub3B0aW9uc1BlclBhZ2UpLFxuICAgICAgICBzdGFydEluZGV4ID0gX2VudHJpZXNUb0Rpc3BsYXkuc3RhcnRJbmRleCxcbiAgICAgICAgZW5kSW5kZXggPSBfZW50cmllc1RvRGlzcGxheS5lbmRJbmRleDtcblxuICAgIGxldCBwcmVmaXgsXG4gICAgICAgIHN0eWxlZE9wdGlvbnMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSBzdGFydEluZGV4OyBpIDwgZW5kSW5kZXg7IGkrKykge1xuICAgICAgaWYgKGkgPT09IHN0YXJ0SW5kZXggJiYgc3RhcnRJbmRleCA+IDApIHtcbiAgICAgICAgcHJlZml4ID0gZmlndXJlcy5hcnJvd1VwO1xuICAgICAgfSBlbHNlIGlmIChpID09PSBlbmRJbmRleCAtIDEgJiYgZW5kSW5kZXggPCBvcHRpb25zLmxlbmd0aCkge1xuICAgICAgICBwcmVmaXggPSBmaWd1cmVzLmFycm93RG93bjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByZWZpeCA9ICcgJztcbiAgICAgIH1cblxuICAgICAgc3R5bGVkT3B0aW9ucy5wdXNoKHRoaXMucmVuZGVyT3B0aW9uKHRoaXMuY3Vyc29yLCBvcHRpb25zW2ldLCBpLCBwcmVmaXgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJ1xcbicgKyBzdHlsZWRPcHRpb25zLmpvaW4oJ1xcbicpO1xuICB9IC8vIHNoYXJlZCB3aXRoIGF1dG9jb21sZXRlTXVsdGlzZWxlY3RcblxuXG4gIHJlbmRlck9wdGlvbnMob3B0aW9ucykge1xuICAgIGlmICghdGhpcy5kb25lKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYWdpbmF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgcmVuZGVyRG9uZU9ySW5zdHJ1Y3Rpb25zKCkge1xuICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlLmZpbHRlcihlID0+IGUuc2VsZWN0ZWQpLm1hcCh2ID0+IHYudGl0bGUpLmpvaW4oJywgJyk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3V0cHV0ID0gW2NvbG9yLmdyYXkodGhpcy5oaW50KSwgdGhpcy5yZW5kZXJJbnN0cnVjdGlvbnMoKV07XG5cbiAgICBpZiAodGhpcy52YWx1ZVt0aGlzLmN1cnNvcl0uZGlzYWJsZWQpIHtcbiAgICAgIG91dHB1dC5wdXNoKGNvbG9yLnllbGxvdyh0aGlzLndhcm4pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0LmpvaW4oJyAnKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5jbG9zZWQpIHJldHVybjtcbiAgICBpZiAodGhpcy5maXJzdFJlbmRlcikgdGhpcy5vdXQud3JpdGUoY3Vyc29yLmhpZGUpO1xuICAgIHN1cGVyLnJlbmRlcigpOyAvLyBwcmludCBwcm9tcHRcblxuICAgIGxldCBwcm9tcHQgPSBbc3R5bGUuc3ltYm9sKHRoaXMuZG9uZSwgdGhpcy5hYm9ydGVkKSwgY29sb3IuYm9sZCh0aGlzLm1zZyksIHN0eWxlLmRlbGltaXRlcihmYWxzZSksIHRoaXMucmVuZGVyRG9uZU9ySW5zdHJ1Y3Rpb25zKCldLmpvaW4oJyAnKTtcblxuICAgIGlmICh0aGlzLnNob3dNaW5FcnJvcikge1xuICAgICAgcHJvbXB0ICs9IGNvbG9yLnJlZChgWW91IG11c3Qgc2VsZWN0IGEgbWluaW11bSBvZiAke3RoaXMubWluU2VsZWN0ZWR9IGNob2ljZXMuYCk7XG4gICAgICB0aGlzLnNob3dNaW5FcnJvciA9IGZhbHNlO1xuICAgIH1cblxuICAgIHByb21wdCArPSB0aGlzLnJlbmRlck9wdGlvbnModGhpcy52YWx1ZSk7XG4gICAgdGhpcy5vdXQud3JpdGUodGhpcy5jbGVhciArIHByb21wdCk7XG4gICAgdGhpcy5jbGVhciA9IGNsZWFyKHByb21wdCwgdGhpcy5vdXQuY29sdW1ucyk7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE11bHRpc2VsZWN0UHJvbXB0OyIsICIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH1cblxuZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIHNlbGYgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzOyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7IGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9XG5cbmNvbnN0IGNvbG9yID0gcmVxdWlyZSgna2xldXInKTtcblxuY29uc3QgUHJvbXB0ID0gcmVxdWlyZSgnLi9wcm9tcHQnKTtcblxuY29uc3QgX3JlcXVpcmUgPSByZXF1aXJlKCdzaXN0ZXJhbnNpJyksXG4gICAgICBlcmFzZSA9IF9yZXF1aXJlLmVyYXNlLFxuICAgICAgY3Vyc29yID0gX3JlcXVpcmUuY3Vyc29yO1xuXG5jb25zdCBfcmVxdWlyZTIgPSByZXF1aXJlKCcuLi91dGlsJyksXG4gICAgICBzdHlsZSA9IF9yZXF1aXJlMi5zdHlsZSxcbiAgICAgIGNsZWFyID0gX3JlcXVpcmUyLmNsZWFyLFxuICAgICAgZmlndXJlcyA9IF9yZXF1aXJlMi5maWd1cmVzLFxuICAgICAgd3JhcCA9IF9yZXF1aXJlMi53cmFwLFxuICAgICAgZW50cmllc1RvRGlzcGxheSA9IF9yZXF1aXJlMi5lbnRyaWVzVG9EaXNwbGF5O1xuXG5jb25zdCBnZXRWYWwgPSAoYXJyLCBpKSA9PiBhcnJbaV0gJiYgKGFycltpXS52YWx1ZSB8fCBhcnJbaV0udGl0bGUgfHwgYXJyW2ldKTtcblxuY29uc3QgZ2V0VGl0bGUgPSAoYXJyLCBpKSA9PiBhcnJbaV0gJiYgKGFycltpXS50aXRsZSB8fCBhcnJbaV0udmFsdWUgfHwgYXJyW2ldKTtcblxuY29uc3QgZ2V0SW5kZXggPSAoYXJyLCB2YWxPclRpdGxlKSA9PiB7XG4gIGNvbnN0IGluZGV4ID0gYXJyLmZpbmRJbmRleChlbCA9PiBlbC52YWx1ZSA9PT0gdmFsT3JUaXRsZSB8fCBlbC50aXRsZSA9PT0gdmFsT3JUaXRsZSk7XG4gIHJldHVybiBpbmRleCA+IC0xID8gaW5kZXggOiB1bmRlZmluZWQ7XG59O1xuLyoqXG4gKiBUZXh0UHJvbXB0IEJhc2UgRWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG9wdHMubWVzc2FnZSBNZXNzYWdlXG4gKiBAcGFyYW0ge0FycmF5fSBvcHRzLmNob2ljZXMgQXJyYXkgb2YgYXV0by1jb21wbGV0ZSBjaG9pY2VzIG9iamVjdHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLnN1Z2dlc3RdIEZpbHRlciBmdW5jdGlvbi4gRGVmYXVsdHMgdG8gc29ydCBieSB0aXRsZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmxpbWl0PTEwXSBNYXggbnVtYmVyIG9mIHJlc3VsdHMgdG8gc2hvd1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmN1cnNvcj0wXSBDdXJzb3Igc3RhcnQgcG9zaXRpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5zdHlsZT0nZGVmYXVsdCddIFJlbmRlciBzdHlsZVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmZhbGxiYWNrXSBGYWxsYmFjayBtZXNzYWdlIC0gaW5pdGlhbCB0byBkZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuaW5pdGlhbF0gSW5kZXggb2YgdGhlIGRlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdHMuY2xlYXJGaXJzdF0gVGhlIGZpcnN0IEVTQ0FQRSBrZXlwcmVzcyB3aWxsIGNsZWFyIHRoZSBpbnB1dFxuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMubm9NYXRjaGVzXSBUaGUgbm8gbWF0Y2hlcyBmb3VuZCBsYWJlbFxuICovXG5cblxuY2xhc3MgQXV0b2NvbXBsZXRlUHJvbXB0IGV4dGVuZHMgUHJvbXB0IHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy5tc2cgPSBvcHRzLm1lc3NhZ2U7XG4gICAgdGhpcy5zdWdnZXN0ID0gb3B0cy5zdWdnZXN0O1xuICAgIHRoaXMuY2hvaWNlcyA9IG9wdHMuY2hvaWNlcztcbiAgICB0aGlzLmluaXRpYWwgPSB0eXBlb2Ygb3B0cy5pbml0aWFsID09PSAnbnVtYmVyJyA/IG9wdHMuaW5pdGlhbCA6IGdldEluZGV4KG9wdHMuY2hvaWNlcywgb3B0cy5pbml0aWFsKTtcbiAgICB0aGlzLnNlbGVjdCA9IHRoaXMuaW5pdGlhbCB8fCBvcHRzLmN1cnNvciB8fCAwO1xuICAgIHRoaXMuaTE4biA9IHtcbiAgICAgIG5vTWF0Y2hlczogb3B0cy5ub01hdGNoZXMgfHwgJ25vIG1hdGNoZXMgZm91bmQnXG4gICAgfTtcbiAgICB0aGlzLmZhbGxiYWNrID0gb3B0cy5mYWxsYmFjayB8fCB0aGlzLmluaXRpYWw7XG4gICAgdGhpcy5jbGVhckZpcnN0ID0gb3B0cy5jbGVhckZpcnN0IHx8IGZhbHNlO1xuICAgIHRoaXMuc3VnZ2VzdGlvbnMgPSBbXTtcbiAgICB0aGlzLmlucHV0ID0gJyc7XG4gICAgdGhpcy5saW1pdCA9IG9wdHMubGltaXQgfHwgMTA7XG4gICAgdGhpcy5jdXJzb3IgPSAwO1xuICAgIHRoaXMudHJhbnNmb3JtID0gc3R5bGUucmVuZGVyKG9wdHMuc3R5bGUpO1xuICAgIHRoaXMuc2NhbGUgPSB0aGlzLnRyYW5zZm9ybS5zY2FsZTtcbiAgICB0aGlzLnJlbmRlciA9IHRoaXMucmVuZGVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jb21wbGV0ZSA9IHRoaXMuY29tcGxldGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNsZWFyID0gY2xlYXIoJycsIHRoaXMub3V0LmNvbHVtbnMpO1xuICAgIHRoaXMuY29tcGxldGUodGhpcy5yZW5kZXIpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBzZXQgZmFsbGJhY2soZmIpIHtcbiAgICB0aGlzLl9mYiA9IE51bWJlci5pc1NhZmVJbnRlZ2VyKHBhcnNlSW50KGZiKSkgPyBwYXJzZUludChmYikgOiBmYjtcbiAgfVxuXG4gIGdldCBmYWxsYmFjaygpIHtcbiAgICBsZXQgY2hvaWNlO1xuICAgIGlmICh0eXBlb2YgdGhpcy5fZmIgPT09ICdudW1iZXInKSBjaG9pY2UgPSB0aGlzLmNob2ljZXNbdGhpcy5fZmJdO2Vsc2UgaWYgKHR5cGVvZiB0aGlzLl9mYiA9PT0gJ3N0cmluZycpIGNob2ljZSA9IHtcbiAgICAgIHRpdGxlOiB0aGlzLl9mYlxuICAgIH07XG4gICAgcmV0dXJuIGNob2ljZSB8fCB0aGlzLl9mYiB8fCB7XG4gICAgICB0aXRsZTogdGhpcy5pMThuLm5vTWF0Y2hlc1xuICAgIH07XG4gIH1cblxuICBtb3ZlU2VsZWN0KGkpIHtcbiAgICB0aGlzLnNlbGVjdCA9IGk7XG4gICAgaWYgKHRoaXMuc3VnZ2VzdGlvbnMubGVuZ3RoID4gMCkgdGhpcy52YWx1ZSA9IGdldFZhbCh0aGlzLnN1Z2dlc3Rpb25zLCBpKTtlbHNlIHRoaXMudmFsdWUgPSB0aGlzLmZhbGxiYWNrLnZhbHVlO1xuICAgIHRoaXMuZmlyZSgpO1xuICB9XG5cbiAgY29tcGxldGUoY2IpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKGZ1bmN0aW9uKiAoKSB7XG4gICAgICBjb25zdCBwID0gX3RoaXMuY29tcGxldGluZyA9IF90aGlzLnN1Z2dlc3QoX3RoaXMuaW5wdXQsIF90aGlzLmNob2ljZXMpO1xuXG4gICAgICBjb25zdCBzdWdnZXN0aW9ucyA9IHlpZWxkIHA7XG4gICAgICBpZiAoX3RoaXMuY29tcGxldGluZyAhPT0gcCkgcmV0dXJuO1xuICAgICAgX3RoaXMuc3VnZ2VzdGlvbnMgPSBzdWdnZXN0aW9ucy5tYXAoKHMsIGksIGFycikgPT4gKHtcbiAgICAgICAgdGl0bGU6IGdldFRpdGxlKGFyciwgaSksXG4gICAgICAgIHZhbHVlOiBnZXRWYWwoYXJyLCBpKSxcbiAgICAgICAgZGVzY3JpcHRpb246IHMuZGVzY3JpcHRpb25cbiAgICAgIH0pKTtcbiAgICAgIF90aGlzLmNvbXBsZXRpbmcgPSBmYWxzZTtcbiAgICAgIGNvbnN0IGwgPSBNYXRoLm1heChzdWdnZXN0aW9ucy5sZW5ndGggLSAxLCAwKTtcblxuICAgICAgX3RoaXMubW92ZVNlbGVjdChNYXRoLm1pbihsLCBfdGhpcy5zZWxlY3QpKTtcblxuICAgICAgY2IgJiYgY2IoKTtcbiAgICB9KSgpO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5pbnB1dCA9ICcnO1xuICAgIHRoaXMuY29tcGxldGUoKCkgPT4ge1xuICAgICAgdGhpcy5tb3ZlU2VsZWN0KHRoaXMuaW5pdGlhbCAhPT0gdm9pZCAwID8gdGhpcy5pbml0aWFsIDogMCk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH0pO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBleGl0KCkge1xuICAgIGlmICh0aGlzLmNsZWFyRmlyc3QgJiYgdGhpcy5pbnB1dC5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRoaXMuZXhpdGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuYWJvcnRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5maXJlKCk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIGFib3J0KCkge1xuICAgIHRoaXMuZG9uZSA9IHRoaXMuYWJvcnRlZCA9IHRydWU7XG4gICAgdGhpcy5leGl0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICBzdWJtaXQoKSB7XG4gICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICB0aGlzLmFib3J0ZWQgPSB0aGlzLmV4aXRlZCA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIF8oYywga2V5KSB7XG4gICAgbGV0IHMxID0gdGhpcy5pbnB1dC5zbGljZSgwLCB0aGlzLmN1cnNvcik7XG4gICAgbGV0IHMyID0gdGhpcy5pbnB1dC5zbGljZSh0aGlzLmN1cnNvcik7XG4gICAgdGhpcy5pbnB1dCA9IGAke3MxfSR7Y30ke3MyfWA7XG4gICAgdGhpcy5jdXJzb3IgPSBzMS5sZW5ndGggKyAxO1xuICAgIHRoaXMuY29tcGxldGUodGhpcy5yZW5kZXIpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkZWxldGUoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yID09PSAwKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgbGV0IHMxID0gdGhpcy5pbnB1dC5zbGljZSgwLCB0aGlzLmN1cnNvciAtIDEpO1xuICAgIGxldCBzMiA9IHRoaXMuaW5wdXQuc2xpY2UodGhpcy5jdXJzb3IpO1xuICAgIHRoaXMuaW5wdXQgPSBgJHtzMX0ke3MyfWA7XG4gICAgdGhpcy5jb21wbGV0ZSh0aGlzLnJlbmRlcik7XG4gICAgdGhpcy5jdXJzb3IgPSB0aGlzLmN1cnNvciAtIDE7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRlbGV0ZUZvcndhcmQoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yICogdGhpcy5zY2FsZSA+PSB0aGlzLnJlbmRlcmVkLmxlbmd0aCkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIGxldCBzMSA9IHRoaXMuaW5wdXQuc2xpY2UoMCwgdGhpcy5jdXJzb3IpO1xuICAgIGxldCBzMiA9IHRoaXMuaW5wdXQuc2xpY2UodGhpcy5jdXJzb3IgKyAxKTtcbiAgICB0aGlzLmlucHV0ID0gYCR7czF9JHtzMn1gO1xuICAgIHRoaXMuY29tcGxldGUodGhpcy5yZW5kZXIpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBmaXJzdCgpIHtcbiAgICB0aGlzLm1vdmVTZWxlY3QoMCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGxhc3QoKSB7XG4gICAgdGhpcy5tb3ZlU2VsZWN0KHRoaXMuc3VnZ2VzdGlvbnMubGVuZ3RoIC0gMSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIGlmICh0aGlzLnNlbGVjdCA9PT0gMCkge1xuICAgICAgdGhpcy5tb3ZlU2VsZWN0KHRoaXMuc3VnZ2VzdGlvbnMubGVuZ3RoIC0gMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubW92ZVNlbGVjdCh0aGlzLnNlbGVjdCAtIDEpO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIGlmICh0aGlzLnNlbGVjdCA9PT0gdGhpcy5zdWdnZXN0aW9ucy5sZW5ndGggLSAxKSB7XG4gICAgICB0aGlzLm1vdmVTZWxlY3QoMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubW92ZVNlbGVjdCh0aGlzLnNlbGVjdCArIDEpO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBuZXh0KCkge1xuICAgIGlmICh0aGlzLnNlbGVjdCA9PT0gdGhpcy5zdWdnZXN0aW9ucy5sZW5ndGggLSAxKSB7XG4gICAgICB0aGlzLm1vdmVTZWxlY3QoMCk7XG4gICAgfSBlbHNlIHRoaXMubW92ZVNlbGVjdCh0aGlzLnNlbGVjdCArIDEpO1xuXG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIG5leHRQYWdlKCkge1xuICAgIHRoaXMubW92ZVNlbGVjdChNYXRoLm1pbih0aGlzLnNlbGVjdCArIHRoaXMubGltaXQsIHRoaXMuc3VnZ2VzdGlvbnMubGVuZ3RoIC0gMSkpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBwcmV2UGFnZSgpIHtcbiAgICB0aGlzLm1vdmVTZWxlY3QoTWF0aC5tYXgodGhpcy5zZWxlY3QgLSB0aGlzLmxpbWl0LCAwKSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGxlZnQoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yIDw9IDApIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLmN1cnNvciA9IHRoaXMuY3Vyc29yIC0gMTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcmlnaHQoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yICogdGhpcy5zY2FsZSA+PSB0aGlzLnJlbmRlcmVkLmxlbmd0aCkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMuY3Vyc29yID0gdGhpcy5jdXJzb3IgKyAxO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByZW5kZXJPcHRpb24odiwgaG92ZXJlZCwgaXNTdGFydCwgaXNFbmQpIHtcbiAgICBsZXQgZGVzYztcbiAgICBsZXQgcHJlZml4ID0gaXNTdGFydCA/IGZpZ3VyZXMuYXJyb3dVcCA6IGlzRW5kID8gZmlndXJlcy5hcnJvd0Rvd24gOiAnICc7XG4gICAgbGV0IHRpdGxlID0gaG92ZXJlZCA/IGNvbG9yLmN5YW4oKS51bmRlcmxpbmUodi50aXRsZSkgOiB2LnRpdGxlO1xuICAgIHByZWZpeCA9IChob3ZlcmVkID8gY29sb3IuY3lhbihmaWd1cmVzLnBvaW50ZXIpICsgJyAnIDogJyAgJykgKyBwcmVmaXg7XG5cbiAgICBpZiAodi5kZXNjcmlwdGlvbikge1xuICAgICAgZGVzYyA9IGAgLSAke3YuZGVzY3JpcHRpb259YDtcblxuICAgICAgaWYgKHByZWZpeC5sZW5ndGggKyB0aXRsZS5sZW5ndGggKyBkZXNjLmxlbmd0aCA+PSB0aGlzLm91dC5jb2x1bW5zIHx8IHYuZGVzY3JpcHRpb24uc3BsaXQoL1xccj9cXG4vKS5sZW5ndGggPiAxKSB7XG4gICAgICAgIGRlc2MgPSAnXFxuJyArIHdyYXAodi5kZXNjcmlwdGlvbiwge1xuICAgICAgICAgIG1hcmdpbjogMyxcbiAgICAgICAgICB3aWR0aDogdGhpcy5vdXQuY29sdW1uc1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4ICsgJyAnICsgdGl0bGUgKyBjb2xvci5ncmF5KGRlc2MgfHwgJycpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLmNsb3NlZCkgcmV0dXJuO1xuICAgIGlmICh0aGlzLmZpcnN0UmVuZGVyKSB0aGlzLm91dC53cml0ZShjdXJzb3IuaGlkZSk7ZWxzZSB0aGlzLm91dC53cml0ZShjbGVhcih0aGlzLm91dHB1dFRleHQsIHRoaXMub3V0LmNvbHVtbnMpKTtcbiAgICBzdXBlci5yZW5kZXIoKTtcblxuICAgIGxldCBfZW50cmllc1RvRGlzcGxheSA9IGVudHJpZXNUb0Rpc3BsYXkodGhpcy5zZWxlY3QsIHRoaXMuY2hvaWNlcy5sZW5ndGgsIHRoaXMubGltaXQpLFxuICAgICAgICBzdGFydEluZGV4ID0gX2VudHJpZXNUb0Rpc3BsYXkuc3RhcnRJbmRleCxcbiAgICAgICAgZW5kSW5kZXggPSBfZW50cmllc1RvRGlzcGxheS5lbmRJbmRleDtcblxuICAgIHRoaXMub3V0cHV0VGV4dCA9IFtzdHlsZS5zeW1ib2wodGhpcy5kb25lLCB0aGlzLmFib3J0ZWQsIHRoaXMuZXhpdGVkKSwgY29sb3IuYm9sZCh0aGlzLm1zZyksIHN0eWxlLmRlbGltaXRlcih0aGlzLmNvbXBsZXRpbmcpLCB0aGlzLmRvbmUgJiYgdGhpcy5zdWdnZXN0aW9uc1t0aGlzLnNlbGVjdF0gPyB0aGlzLnN1Z2dlc3Rpb25zW3RoaXMuc2VsZWN0XS50aXRsZSA6IHRoaXMucmVuZGVyZWQgPSB0aGlzLnRyYW5zZm9ybS5yZW5kZXIodGhpcy5pbnB1dCldLmpvaW4oJyAnKTtcblxuICAgIGlmICghdGhpcy5kb25lKSB7XG4gICAgICBjb25zdCBzdWdnZXN0aW9ucyA9IHRoaXMuc3VnZ2VzdGlvbnMuc2xpY2Uoc3RhcnRJbmRleCwgZW5kSW5kZXgpLm1hcCgoaXRlbSwgaSkgPT4gdGhpcy5yZW5kZXJPcHRpb24oaXRlbSwgdGhpcy5zZWxlY3QgPT09IGkgKyBzdGFydEluZGV4LCBpID09PSAwICYmIHN0YXJ0SW5kZXggPiAwLCBpICsgc3RhcnRJbmRleCA9PT0gZW5kSW5kZXggLSAxICYmIGVuZEluZGV4IDwgdGhpcy5jaG9pY2VzLmxlbmd0aCkpLmpvaW4oJ1xcbicpO1xuICAgICAgdGhpcy5vdXRwdXRUZXh0ICs9IGBcXG5gICsgKHN1Z2dlc3Rpb25zIHx8IGNvbG9yLmdyYXkodGhpcy5mYWxsYmFjay50aXRsZSkpO1xuICAgIH1cblxuICAgIHRoaXMub3V0LndyaXRlKGVyYXNlLmxpbmUgKyBjdXJzb3IudG8oMCkgKyB0aGlzLm91dHB1dFRleHQpO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBdXRvY29tcGxldGVQcm9tcHQ7IiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY29sb3IgPSByZXF1aXJlKCdrbGV1cicpO1xuXG5jb25zdCBfcmVxdWlyZSA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKSxcbiAgICAgIGN1cnNvciA9IF9yZXF1aXJlLmN1cnNvcjtcblxuY29uc3QgTXVsdGlzZWxlY3RQcm9tcHQgPSByZXF1aXJlKCcuL211bHRpc2VsZWN0Jyk7XG5cbmNvbnN0IF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4uL3V0aWwnKSxcbiAgICAgIGNsZWFyID0gX3JlcXVpcmUyLmNsZWFyLFxuICAgICAgc3R5bGUgPSBfcmVxdWlyZTIuc3R5bGUsXG4gICAgICBmaWd1cmVzID0gX3JlcXVpcmUyLmZpZ3VyZXM7XG4vKipcbiAqIE11bHRpc2VsZWN0UHJvbXB0IEJhc2UgRWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG9wdHMubWVzc2FnZSBNZXNzYWdlXG4gKiBAcGFyYW0ge0FycmF5fSBvcHRzLmNob2ljZXMgQXJyYXkgb2YgY2hvaWNlIG9iamVjdHNcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5oaW50XSBIaW50IHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy53YXJuXSBIaW50IHNob3duIGZvciBkaXNhYmxlZCBjaG9pY2VzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMubWF4XSBNYXggY2hvaWNlc1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmN1cnNvcj0wXSBDdXJzb3Igc3RhcnQgcG9zaXRpb25cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICovXG5cblxuY2xhc3MgQXV0b2NvbXBsZXRlTXVsdGlzZWxlY3RQcm9tcHQgZXh0ZW5kcyBNdWx0aXNlbGVjdFByb21wdCB7XG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgIG9wdHMub3ZlcnJpZGVSZW5kZXIgPSB0cnVlO1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXMuaW5wdXRWYWx1ZSA9ICcnO1xuICAgIHRoaXMuY2xlYXIgPSBjbGVhcignJywgdGhpcy5vdXQuY29sdW1ucyk7XG4gICAgdGhpcy5maWx0ZXJlZE9wdGlvbnMgPSB0aGlzLnZhbHVlO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBsYXN0KCkge1xuICAgIHRoaXMuY3Vyc29yID0gdGhpcy5maWx0ZXJlZE9wdGlvbnMubGVuZ3RoIC0gMTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbmV4dCgpIHtcbiAgICB0aGlzLmN1cnNvciA9ICh0aGlzLmN1cnNvciArIDEpICUgdGhpcy5maWx0ZXJlZE9wdGlvbnMubGVuZ3RoO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICB1cCgpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IgPT09IDApIHtcbiAgICAgIHRoaXMuY3Vyc29yID0gdGhpcy5maWx0ZXJlZE9wdGlvbnMubGVuZ3RoIC0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jdXJzb3ItLTtcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IgPT09IHRoaXMuZmlsdGVyZWRPcHRpb25zLmxlbmd0aCAtIDEpIHtcbiAgICAgIHRoaXMuY3Vyc29yID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jdXJzb3IrKztcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbGVmdCgpIHtcbiAgICB0aGlzLmZpbHRlcmVkT3B0aW9uc1t0aGlzLmN1cnNvcl0uc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcmlnaHQoKSB7XG4gICAgaWYgKHRoaXMudmFsdWUuZmlsdGVyKGUgPT4gZS5zZWxlY3RlZCkubGVuZ3RoID49IHRoaXMubWF4Q2hvaWNlcykgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMuZmlsdGVyZWRPcHRpb25zW3RoaXMuY3Vyc29yXS5zZWxlY3RlZCA9IHRydWU7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRlbGV0ZSgpIHtcbiAgICBpZiAodGhpcy5pbnB1dFZhbHVlLmxlbmd0aCkge1xuICAgICAgdGhpcy5pbnB1dFZhbHVlID0gdGhpcy5pbnB1dFZhbHVlLnN1YnN0cigwLCB0aGlzLmlucHV0VmFsdWUubGVuZ3RoIC0gMSk7XG4gICAgICB0aGlzLnVwZGF0ZUZpbHRlcmVkT3B0aW9ucygpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUZpbHRlcmVkT3B0aW9ucygpIHtcbiAgICBjb25zdCBjdXJyZW50SGlnaGxpZ2h0ID0gdGhpcy5maWx0ZXJlZE9wdGlvbnNbdGhpcy5jdXJzb3JdO1xuICAgIHRoaXMuZmlsdGVyZWRPcHRpb25zID0gdGhpcy52YWx1ZS5maWx0ZXIodiA9PiB7XG4gICAgICBpZiAodGhpcy5pbnB1dFZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygdi50aXRsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodi50aXRsZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHRoaXMuaW5wdXRWYWx1ZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2LnZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh2LnZhbHVlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXModGhpcy5pbnB1dFZhbHVlLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICAgIGNvbnN0IG5ld0hpZ2hsaWdodEluZGV4ID0gdGhpcy5maWx0ZXJlZE9wdGlvbnMuZmluZEluZGV4KHYgPT4gdiA9PT0gY3VycmVudEhpZ2hsaWdodCk7XG4gICAgdGhpcy5jdXJzb3IgPSBuZXdIaWdobGlnaHRJbmRleCA8IDAgPyAwIDogbmV3SGlnaGxpZ2h0SW5kZXg7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGhhbmRsZVNwYWNlVG9nZ2xlKCkge1xuICAgIGNvbnN0IHYgPSB0aGlzLmZpbHRlcmVkT3B0aW9uc1t0aGlzLmN1cnNvcl07XG5cbiAgICBpZiAodi5zZWxlY3RlZCkge1xuICAgICAgdi5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9IGVsc2UgaWYgKHYuZGlzYWJsZWQgfHwgdGhpcy52YWx1ZS5maWx0ZXIoZSA9PiBlLnNlbGVjdGVkKS5sZW5ndGggPj0gdGhpcy5tYXhDaG9pY2VzKSB7XG4gICAgICByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHYuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVJbnB1dENoYW5nZShjKSB7XG4gICAgdGhpcy5pbnB1dFZhbHVlID0gdGhpcy5pbnB1dFZhbHVlICsgYztcbiAgICB0aGlzLnVwZGF0ZUZpbHRlcmVkT3B0aW9ucygpO1xuICB9XG5cbiAgXyhjLCBrZXkpIHtcbiAgICBpZiAoYyA9PT0gJyAnKSB7XG4gICAgICB0aGlzLmhhbmRsZVNwYWNlVG9nZ2xlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGFuZGxlSW5wdXRDaGFuZ2UoYyk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVySW5zdHJ1Y3Rpb25zKCkge1xuICAgIGlmICh0aGlzLmluc3RydWN0aW9ucyA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuaW5zdHJ1Y3Rpb25zKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuaW5zdHJ1Y3Rpb25zID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnN0cnVjdGlvbnM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBgXG5JbnN0cnVjdGlvbnM6XG4gICAgJHtmaWd1cmVzLmFycm93VXB9LyR7ZmlndXJlcy5hcnJvd0Rvd259OiBIaWdobGlnaHQgb3B0aW9uXG4gICAgJHtmaWd1cmVzLmFycm93TGVmdH0vJHtmaWd1cmVzLmFycm93UmlnaHR9L1tzcGFjZV06IFRvZ2dsZSBzZWxlY3Rpb25cbiAgICBbYSxiLGNdL2RlbGV0ZTogRmlsdGVyIGNob2ljZXNcbiAgICBlbnRlci9yZXR1cm46IENvbXBsZXRlIGFuc3dlclxuYDtcbiAgICB9XG5cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICByZW5kZXJDdXJyZW50SW5wdXQoKSB7XG4gICAgcmV0dXJuIGBcbkZpbHRlcmVkIHJlc3VsdHMgZm9yOiAke3RoaXMuaW5wdXRWYWx1ZSA/IHRoaXMuaW5wdXRWYWx1ZSA6IGNvbG9yLmdyYXkoJ0VudGVyIHNvbWV0aGluZyB0byBmaWx0ZXInKX1cXG5gO1xuICB9XG5cbiAgcmVuZGVyT3B0aW9uKGN1cnNvciwgdiwgaSkge1xuICAgIGxldCB0aXRsZTtcbiAgICBpZiAodi5kaXNhYmxlZCkgdGl0bGUgPSBjdXJzb3IgPT09IGkgPyBjb2xvci5ncmF5KCkudW5kZXJsaW5lKHYudGl0bGUpIDogY29sb3Iuc3RyaWtldGhyb3VnaCgpLmdyYXkodi50aXRsZSk7ZWxzZSB0aXRsZSA9IGN1cnNvciA9PT0gaSA/IGNvbG9yLmN5YW4oKS51bmRlcmxpbmUodi50aXRsZSkgOiB2LnRpdGxlO1xuICAgIHJldHVybiAodi5zZWxlY3RlZCA/IGNvbG9yLmdyZWVuKGZpZ3VyZXMucmFkaW9PbikgOiBmaWd1cmVzLnJhZGlvT2ZmKSArICcgICcgKyB0aXRsZTtcbiAgfVxuXG4gIHJlbmRlckRvbmVPckluc3RydWN0aW9ucygpIHtcbiAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZS5maWx0ZXIoZSA9PiBlLnNlbGVjdGVkKS5tYXAodiA9PiB2LnRpdGxlKS5qb2luKCcsICcpO1xuICAgIH1cblxuICAgIGNvbnN0IG91dHB1dCA9IFtjb2xvci5ncmF5KHRoaXMuaGludCksIHRoaXMucmVuZGVySW5zdHJ1Y3Rpb25zKCksIHRoaXMucmVuZGVyQ3VycmVudElucHV0KCldO1xuXG4gICAgaWYgKHRoaXMuZmlsdGVyZWRPcHRpb25zLmxlbmd0aCAmJiB0aGlzLmZpbHRlcmVkT3B0aW9uc1t0aGlzLmN1cnNvcl0uZGlzYWJsZWQpIHtcbiAgICAgIG91dHB1dC5wdXNoKGNvbG9yLnllbGxvdyh0aGlzLndhcm4pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0LmpvaW4oJyAnKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5jbG9zZWQpIHJldHVybjtcbiAgICBpZiAodGhpcy5maXJzdFJlbmRlcikgdGhpcy5vdXQud3JpdGUoY3Vyc29yLmhpZGUpO1xuICAgIHN1cGVyLnJlbmRlcigpOyAvLyBwcmludCBwcm9tcHRcblxuICAgIGxldCBwcm9tcHQgPSBbc3R5bGUuc3ltYm9sKHRoaXMuZG9uZSwgdGhpcy5hYm9ydGVkKSwgY29sb3IuYm9sZCh0aGlzLm1zZyksIHN0eWxlLmRlbGltaXRlcihmYWxzZSksIHRoaXMucmVuZGVyRG9uZU9ySW5zdHJ1Y3Rpb25zKCldLmpvaW4oJyAnKTtcblxuICAgIGlmICh0aGlzLnNob3dNaW5FcnJvcikge1xuICAgICAgcHJvbXB0ICs9IGNvbG9yLnJlZChgWW91IG11c3Qgc2VsZWN0IGEgbWluaW11bSBvZiAke3RoaXMubWluU2VsZWN0ZWR9IGNob2ljZXMuYCk7XG4gICAgICB0aGlzLnNob3dNaW5FcnJvciA9IGZhbHNlO1xuICAgIH1cblxuICAgIHByb21wdCArPSB0aGlzLnJlbmRlck9wdGlvbnModGhpcy5maWx0ZXJlZE9wdGlvbnMpO1xuICAgIHRoaXMub3V0LndyaXRlKHRoaXMuY2xlYXIgKyBwcm9tcHQpO1xuICAgIHRoaXMuY2xlYXIgPSBjbGVhcihwcm9tcHQsIHRoaXMub3V0LmNvbHVtbnMpO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBdXRvY29tcGxldGVNdWx0aXNlbGVjdFByb21wdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IGNvbG9yID0gcmVxdWlyZSgna2xldXInKTtcblxuY29uc3QgUHJvbXB0ID0gcmVxdWlyZSgnLi9wcm9tcHQnKTtcblxuY29uc3QgX3JlcXVpcmUgPSByZXF1aXJlKCcuLi91dGlsJyksXG4gICAgICBzdHlsZSA9IF9yZXF1aXJlLnN0eWxlLFxuICAgICAgY2xlYXIgPSBfcmVxdWlyZS5jbGVhcjtcblxuY29uc3QgX3JlcXVpcmUyID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpLFxuICAgICAgZXJhc2UgPSBfcmVxdWlyZTIuZXJhc2UsXG4gICAgICBjdXJzb3IgPSBfcmVxdWlyZTIuY3Vyc29yO1xuLyoqXG4gKiBDb25maXJtUHJvbXB0IEJhc2UgRWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG9wdHMubWVzc2FnZSBNZXNzYWdlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRzLmluaXRpYWxdIERlZmF1bHQgdmFsdWUgKHRydWUvZmFsc2UpXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy55ZXNdIFRoZSBcIlllc1wiIGxhYmVsXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMueWVzT3B0aW9uXSBUaGUgXCJZZXNcIiBvcHRpb24gd2hlbiBjaG9vc2luZyBiZXR3ZWVuIHllcy9ub1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLm5vXSBUaGUgXCJOb1wiIGxhYmVsXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMubm9PcHRpb25dIFRoZSBcIk5vXCIgb3B0aW9uIHdoZW4gY2hvb3NpbmcgYmV0d2VlbiB5ZXMvbm9cbiAqL1xuXG5cbmNsYXNzIENvbmZpcm1Qcm9tcHQgZXh0ZW5kcyBQcm9tcHQge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgICB0aGlzLm1zZyA9IG9wdHMubWVzc2FnZTtcbiAgICB0aGlzLnZhbHVlID0gb3B0cy5pbml0aWFsO1xuICAgIHRoaXMuaW5pdGlhbFZhbHVlID0gISFvcHRzLmluaXRpYWw7XG4gICAgdGhpcy55ZXNNc2cgPSBvcHRzLnllcyB8fCAneWVzJztcbiAgICB0aGlzLnllc09wdGlvbiA9IG9wdHMueWVzT3B0aW9uIHx8ICcoWS9uKSc7XG4gICAgdGhpcy5ub01zZyA9IG9wdHMubm8gfHwgJ25vJztcbiAgICB0aGlzLm5vT3B0aW9uID0gb3B0cy5ub09wdGlvbiB8fCAnKHkvTiknO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5pbml0aWFsVmFsdWU7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGV4aXQoKSB7XG4gICAgdGhpcy5hYm9ydCgpO1xuICB9XG5cbiAgYWJvcnQoKSB7XG4gICAgdGhpcy5kb25lID0gdGhpcy5hYm9ydGVkID0gdHJ1ZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICBzdWJtaXQoKSB7XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUgfHwgZmFsc2U7XG4gICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICB0aGlzLmFib3J0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICBfKGMsIGtleSkge1xuICAgIGlmIChjLnRvTG93ZXJDYXNlKCkgPT09ICd5Jykge1xuICAgICAgdGhpcy52YWx1ZSA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcy5zdWJtaXQoKTtcbiAgICB9XG5cbiAgICBpZiAoYy50b0xvd2VyQ2FzZSgpID09PSAnbicpIHtcbiAgICAgIHRoaXMudmFsdWUgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0aGlzLnN1Ym1pdCgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5jbG9zZWQpIHJldHVybjtcbiAgICBpZiAodGhpcy5maXJzdFJlbmRlcikgdGhpcy5vdXQud3JpdGUoY3Vyc29yLmhpZGUpO2Vsc2UgdGhpcy5vdXQud3JpdGUoY2xlYXIodGhpcy5vdXRwdXRUZXh0LCB0aGlzLm91dC5jb2x1bW5zKSk7XG4gICAgc3VwZXIucmVuZGVyKCk7XG4gICAgdGhpcy5vdXRwdXRUZXh0ID0gW3N0eWxlLnN5bWJvbCh0aGlzLmRvbmUsIHRoaXMuYWJvcnRlZCksIGNvbG9yLmJvbGQodGhpcy5tc2cpLCBzdHlsZS5kZWxpbWl0ZXIodGhpcy5kb25lKSwgdGhpcy5kb25lID8gdGhpcy52YWx1ZSA/IHRoaXMueWVzTXNnIDogdGhpcy5ub01zZyA6IGNvbG9yLmdyYXkodGhpcy5pbml0aWFsVmFsdWUgPyB0aGlzLnllc09wdGlvbiA6IHRoaXMubm9PcHRpb24pXS5qb2luKCcgJyk7XG4gICAgdGhpcy5vdXQud3JpdGUoZXJhc2UubGluZSArIGN1cnNvci50bygwKSArIHRoaXMub3V0cHV0VGV4dCk7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbmZpcm1Qcm9tcHQ7IiwgIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFRleHRQcm9tcHQ6IHJlcXVpcmUoJy4vdGV4dCcpLFxuICBTZWxlY3RQcm9tcHQ6IHJlcXVpcmUoJy4vc2VsZWN0JyksXG4gIFRvZ2dsZVByb21wdDogcmVxdWlyZSgnLi90b2dnbGUnKSxcbiAgRGF0ZVByb21wdDogcmVxdWlyZSgnLi9kYXRlJyksXG4gIE51bWJlclByb21wdDogcmVxdWlyZSgnLi9udW1iZXInKSxcbiAgTXVsdGlzZWxlY3RQcm9tcHQ6IHJlcXVpcmUoJy4vbXVsdGlzZWxlY3QnKSxcbiAgQXV0b2NvbXBsZXRlUHJvbXB0OiByZXF1aXJlKCcuL2F1dG9jb21wbGV0ZScpLFxuICBBdXRvY29tcGxldGVNdWx0aXNlbGVjdFByb21wdDogcmVxdWlyZSgnLi9hdXRvY29tcGxldGVNdWx0aXNlbGVjdCcpLFxuICBDb25maXJtUHJvbXB0OiByZXF1aXJlKCcuL2NvbmZpcm0nKVxufTsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCAkID0gZXhwb3J0cztcblxuY29uc3QgZWwgPSByZXF1aXJlKCcuL2VsZW1lbnRzJyk7XG5cbmNvbnN0IG5vb3AgPSB2ID0+IHY7XG5cbmZ1bmN0aW9uIHRvUHJvbXB0KHR5cGUsIGFyZ3MsIG9wdHMgPSB7fSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG4gICAgY29uc3QgcCA9IG5ldyBlbFt0eXBlXShhcmdzKTtcbiAgICBjb25zdCBvbkFib3J0ID0gb3B0cy5vbkFib3J0IHx8IG5vb3A7XG4gICAgY29uc3Qgb25TdWJtaXQgPSBvcHRzLm9uU3VibWl0IHx8IG5vb3A7XG4gICAgY29uc3Qgb25FeGl0ID0gb3B0cy5vbkV4aXQgfHwgbm9vcDtcbiAgICBwLm9uKCdzdGF0ZScsIGFyZ3Mub25TdGF0ZSB8fCBub29wKTtcbiAgICBwLm9uKCdzdWJtaXQnLCB4ID0+IHJlcyhvblN1Ym1pdCh4KSkpO1xuICAgIHAub24oJ2V4aXQnLCB4ID0+IHJlcyhvbkV4aXQoeCkpKTtcbiAgICBwLm9uKCdhYm9ydCcsIHggPT4gcmVqKG9uQWJvcnQoeCkpKTtcbiAgfSk7XG59XG4vKipcbiAqIFRleHQgcHJvbXB0XG4gKiBAcGFyYW0ge3N0cmluZ30gYXJncy5tZXNzYWdlIFByb21wdCBtZXNzYWdlIHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5pbml0aWFsXSBEZWZhdWx0IHN0cmluZyB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLnN0eWxlPVwiZGVmYXVsdFwiXSBSZW5kZXIgc3R5bGUgKCdkZWZhdWx0JywgJ3Bhc3N3b3JkJywgJ2ludmlzaWJsZScpXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLnZhbGlkYXRlXSBGdW5jdGlvbiB0byB2YWxpZGF0ZSB1c2VyIGlucHV0XG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHdpdGggdXNlciBpbnB1dFxuICovXG5cblxuJC50ZXh0ID0gYXJncyA9PiB0b1Byb21wdCgnVGV4dFByb21wdCcsIGFyZ3MpO1xuLyoqXG4gKiBQYXNzd29yZCBwcm9tcHQgd2l0aCBtYXNrZWQgaW5wdXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLm1lc3NhZ2UgUHJvbXB0IG1lc3NhZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLmluaXRpYWxdIERlZmF1bHQgc3RyaW5nIHZhbHVlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLnZhbGlkYXRlXSBGdW5jdGlvbiB0byB2YWxpZGF0ZSB1c2VyIGlucHV0XG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHdpdGggdXNlciBpbnB1dFxuICovXG5cblxuJC5wYXNzd29yZCA9IGFyZ3MgPT4ge1xuICBhcmdzLnN0eWxlID0gJ3Bhc3N3b3JkJztcbiAgcmV0dXJuICQudGV4dChhcmdzKTtcbn07XG4vKipcbiAqIFByb21wdCB3aGVyZSBpbnB1dCBpcyBpbnZpc2libGUsIGxpa2Ugc3Vkb1xuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3MuaW5pdGlhbF0gRGVmYXVsdCBzdHJpbmcgdmFsdWVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3MudmFsaWRhdGVdIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIHVzZXIgaW5wdXRcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cblxuXG4kLmludmlzaWJsZSA9IGFyZ3MgPT4ge1xuICBhcmdzLnN0eWxlID0gJ2ludmlzaWJsZSc7XG4gIHJldHVybiAkLnRleHQoYXJncyk7XG59O1xuLyoqXG4gKiBOdW1iZXIgcHJvbXB0XG4gKiBAcGFyYW0ge3N0cmluZ30gYXJncy5tZXNzYWdlIFByb21wdCBtZXNzYWdlIHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7bnVtYmVyfSBhcmdzLmluaXRpYWwgRGVmYXVsdCBudW1iZXIgdmFsdWVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtudW1iZXJ9IFthcmdzLm1heF0gTWF4IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyZ3MubWluXSBNaW4gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5zdHlsZT1cImRlZmF1bHRcIl0gUmVuZGVyIHN0eWxlICgnZGVmYXVsdCcsICdwYXNzd29yZCcsICdpbnZpc2libGUnKVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0cy5mbG9hdD1mYWxzZV0gUGFyc2UgaW5wdXQgYXMgZmxvYXRzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMucm91bmQ9Ml0gUm91bmQgZmxvYXRzIHRvIHggZGVjaW1hbHNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5pbmNyZW1lbnQ9MV0gTnVtYmVyIHRvIGluY3JlbWVudCBieSB3aGVuIHVzaW5nIGFycm93LWtleXNcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLnZhbGlkYXRlXSBGdW5jdGlvbiB0byB2YWxpZGF0ZSB1c2VyIGlucHV0XG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHdpdGggdXNlciBpbnB1dFxuICovXG5cblxuJC5udW1iZXIgPSBhcmdzID0+IHRvUHJvbXB0KCdOdW1iZXJQcm9tcHQnLCBhcmdzKTtcbi8qKlxuICogRGF0ZSBwcm9tcHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLm1lc3NhZ2UgUHJvbXB0IG1lc3NhZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtIHtudW1iZXJ9IGFyZ3MuaW5pdGlhbCBEZWZhdWx0IG51bWJlciB2YWx1ZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3Mub25TdGF0ZV0gT24gc3RhdGUgY2hhbmdlIGNhbGxiYWNrXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyZ3MubWF4XSBNYXggdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJncy5taW5dIE1pbiB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLnN0eWxlPVwiZGVmYXVsdFwiXSBSZW5kZXIgc3R5bGUgKCdkZWZhdWx0JywgJ3Bhc3N3b3JkJywgJ2ludmlzaWJsZScpXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRzLmZsb2F0PWZhbHNlXSBQYXJzZSBpbnB1dCBhcyBmbG9hdHNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5yb3VuZD0yXSBSb3VuZCBmbG9hdHMgdG8geCBkZWNpbWFsc1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmluY3JlbWVudD0xXSBOdW1iZXIgdG8gaW5jcmVtZW50IGJ5IHdoZW4gdXNpbmcgYXJyb3cta2V5c1xuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3MudmFsaWRhdGVdIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIHVzZXIgaW5wdXRcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cblxuXG4kLmRhdGUgPSBhcmdzID0+IHRvUHJvbXB0KCdEYXRlUHJvbXB0JywgYXJncyk7XG4vKipcbiAqIENsYXNzaWMgeWVzL25vIHByb21wdFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFthcmdzLmluaXRpYWw9ZmFsc2VdIERlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuXG5cbiQuY29uZmlybSA9IGFyZ3MgPT4gdG9Qcm9tcHQoJ0NvbmZpcm1Qcm9tcHQnLCBhcmdzKTtcbi8qKlxuICogTGlzdCBwcm9tcHQsIHNwbGl0IGludHB1dCBzdHJpbmcgYnkgYHNlcGVyYXRvcmBcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLm1lc3NhZ2UgUHJvbXB0IG1lc3NhZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLmluaXRpYWxdIERlZmF1bHQgc3RyaW5nIHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3Muc3R5bGU9XCJkZWZhdWx0XCJdIFJlbmRlciBzdHlsZSAoJ2RlZmF1bHQnLCAncGFzc3dvcmQnLCAnaW52aXNpYmxlJylcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5zZXBhcmF0b3JdIFN0cmluZyBzZXBhcmF0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXQsIGluIGZvcm0gb2YgYW4gYEFycmF5YFxuICovXG5cblxuJC5saXN0ID0gYXJncyA9PiB7XG4gIGNvbnN0IHNlcCA9IGFyZ3Muc2VwYXJhdG9yIHx8ICcsJztcbiAgcmV0dXJuIHRvUHJvbXB0KCdUZXh0UHJvbXB0JywgYXJncywge1xuICAgIG9uU3VibWl0OiBzdHIgPT4gc3RyLnNwbGl0KHNlcCkubWFwKHMgPT4gcy50cmltKCkpXG4gIH0pO1xufTtcbi8qKlxuICogVG9nZ2xlL3N3aXRjaCBwcm9tcHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLm1lc3NhZ2UgUHJvbXB0IG1lc3NhZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtIHtib29sZWFufSBbYXJncy5pbml0aWFsPWZhbHNlXSBEZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3MuYWN0aXZlPVwib25cIl0gVGV4dCBmb3IgYGFjdGl2ZWAgc3RhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5pbmFjdGl2ZT1cIm9mZlwiXSBUZXh0IGZvciBgaW5hY3RpdmVgIHN0YXRlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cblxuXG4kLnRvZ2dsZSA9IGFyZ3MgPT4gdG9Qcm9tcHQoJ1RvZ2dsZVByb21wdCcsIGFyZ3MpO1xuLyoqXG4gKiBJbnRlcmFjdGl2ZSBzZWxlY3QgcHJvbXB0XG4gKiBAcGFyYW0ge3N0cmluZ30gYXJncy5tZXNzYWdlIFByb21wdCBtZXNzYWdlIHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MuY2hvaWNlcyBBcnJheSBvZiBjaG9pY2VzIG9iamVjdHMgYFt7IHRpdGxlLCB2YWx1ZSB9LCAuLi5dYFxuICogQHBhcmFtIHtudW1iZXJ9IFthcmdzLmluaXRpYWxdIEluZGV4IG9mIGRlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7U3RyaW5nfSBbYXJncy5oaW50XSBIaW50IHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuXG5cbiQuc2VsZWN0ID0gYXJncyA9PiB0b1Byb21wdCgnU2VsZWN0UHJvbXB0JywgYXJncyk7XG4vKipcbiAqIEludGVyYWN0aXZlIG11bHRpLXNlbGVjdCAvIGF1dG9jb21wbGV0ZU11bHRpc2VsZWN0IHByb21wdFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzLmNob2ljZXMgQXJyYXkgb2YgY2hvaWNlcyBvYmplY3RzIGBbeyB0aXRsZSwgdmFsdWUsIFtzZWxlY3RlZF0gfSwgLi4uXWBcbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJncy5tYXhdIE1heCBzZWxlY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5oaW50XSBIaW50IHRvIGRpc3BsYXkgdXNlclxuICogQHBhcmFtIHtOdW1iZXJ9IFthcmdzLmN1cnNvcj0wXSBDdXJzb3Igc3RhcnQgcG9zaXRpb25cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuXG5cbiQubXVsdGlzZWxlY3QgPSBhcmdzID0+IHtcbiAgYXJncy5jaG9pY2VzID0gW10uY29uY2F0KGFyZ3MuY2hvaWNlcyB8fCBbXSk7XG5cbiAgY29uc3QgdG9TZWxlY3RlZCA9IGl0ZW1zID0+IGl0ZW1zLmZpbHRlcihpdGVtID0+IGl0ZW0uc2VsZWN0ZWQpLm1hcChpdGVtID0+IGl0ZW0udmFsdWUpO1xuXG4gIHJldHVybiB0b1Byb21wdCgnTXVsdGlzZWxlY3RQcm9tcHQnLCBhcmdzLCB7XG4gICAgb25BYm9ydDogdG9TZWxlY3RlZCxcbiAgICBvblN1Ym1pdDogdG9TZWxlY3RlZFxuICB9KTtcbn07XG5cbiQuYXV0b2NvbXBsZXRlTXVsdGlzZWxlY3QgPSBhcmdzID0+IHtcbiAgYXJncy5jaG9pY2VzID0gW10uY29uY2F0KGFyZ3MuY2hvaWNlcyB8fCBbXSk7XG5cbiAgY29uc3QgdG9TZWxlY3RlZCA9IGl0ZW1zID0+IGl0ZW1zLmZpbHRlcihpdGVtID0+IGl0ZW0uc2VsZWN0ZWQpLm1hcChpdGVtID0+IGl0ZW0udmFsdWUpO1xuXG4gIHJldHVybiB0b1Byb21wdCgnQXV0b2NvbXBsZXRlTXVsdGlzZWxlY3RQcm9tcHQnLCBhcmdzLCB7XG4gICAgb25BYm9ydDogdG9TZWxlY3RlZCxcbiAgICBvblN1Ym1pdDogdG9TZWxlY3RlZFxuICB9KTtcbn07XG5cbmNvbnN0IGJ5VGl0bGUgPSAoaW5wdXQsIGNob2ljZXMpID0+IFByb21pc2UucmVzb2x2ZShjaG9pY2VzLmZpbHRlcihpdGVtID0+IGl0ZW0udGl0bGUuc2xpY2UoMCwgaW5wdXQubGVuZ3RoKS50b0xvd2VyQ2FzZSgpID09PSBpbnB1dC50b0xvd2VyQ2FzZSgpKSk7XG4vKipcbiAqIEludGVyYWN0aXZlIGF1dG8tY29tcGxldGUgcHJvbXB0XG4gKiBAcGFyYW0ge3N0cmluZ30gYXJncy5tZXNzYWdlIFByb21wdCBtZXNzYWdlIHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MuY2hvaWNlcyBBcnJheSBvZiBhdXRvLWNvbXBsZXRlIGNob2ljZXMgb2JqZWN0cyBgW3sgdGl0bGUsIHZhbHVlIH0sIC4uLl1gXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbYXJncy5zdWdnZXN0XSBGdW5jdGlvbiB0byBmaWx0ZXIgcmVzdWx0cyBiYXNlZCBvbiB1c2VyIGlucHV0LiBEZWZhdWx0cyB0byBzb3J0IGJ5IGB0aXRsZWBcbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJncy5saW1pdD0xMF0gTWF4IG51bWJlciBvZiByZXN1bHRzIHRvIHNob3dcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5zdHlsZT1cImRlZmF1bHRcIl0gUmVuZGVyIHN0eWxlICgnZGVmYXVsdCcsICdwYXNzd29yZCcsICdpbnZpc2libGUnKVxuICogQHBhcmFtIHtTdHJpbmd9IFthcmdzLmluaXRpYWxdIEluZGV4IG9mIHRoZSBkZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmNsZWFyRmlyc3RdIFRoZSBmaXJzdCBFU0NBUEUga2V5cHJlc3Mgd2lsbCBjbGVhciB0aGUgaW5wdXRcbiAqIEBwYXJhbSB7U3RyaW5nfSBbYXJncy5mYWxsYmFja10gRmFsbGJhY2sgbWVzc2FnZSAtIGRlZmF1bHRzIHRvIGluaXRpYWwgdmFsdWVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuXG5cbiQuYXV0b2NvbXBsZXRlID0gYXJncyA9PiB7XG4gIGFyZ3Muc3VnZ2VzdCA9IGFyZ3Muc3VnZ2VzdCB8fCBieVRpdGxlO1xuICBhcmdzLmNob2ljZXMgPSBbXS5jb25jYXQoYXJncy5jaG9pY2VzIHx8IFtdKTtcbiAgcmV0dXJuIHRvUHJvbXB0KCdBdXRvY29tcGxldGVQcm9tcHQnLCBhcmdzKTtcbn07IiwgIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgeyBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IH0ga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvW1wiQEBpdGVyYXRvclwiXTsgaWYgKCFpdCkgeyBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7IGlmIChpdCkgbyA9IGl0OyB2YXIgaSA9IDA7IHZhciBGID0gZnVuY3Rpb24gRigpIHt9OyByZXR1cm4geyBzOiBGLCBuOiBmdW5jdGlvbiBuKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9LCBlOiBmdW5jdGlvbiBlKF9lKSB7IHRocm93IF9lOyB9LCBmOiBGIH07IH0gdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9IHZhciBub3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgZGlkRXJyID0gZmFsc2UsIGVycjsgcmV0dXJuIHsgczogZnVuY3Rpb24gcygpIHsgaXQgPSBpdC5jYWxsKG8pOyB9LCBuOiBmdW5jdGlvbiBuKCkgeyB2YXIgc3RlcCA9IGl0Lm5leHQoKTsgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTsgcmV0dXJuIHN0ZXA7IH0sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7IGRpZEVyciA9IHRydWU7IGVyciA9IF9lMjsgfSwgZjogZnVuY3Rpb24gZigpIHsgdHJ5IHsgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0LnJldHVybiAhPSBudWxsKSBpdC5yZXR1cm4oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTsgcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH1cblxuY29uc3QgcHJvbXB0cyA9IHJlcXVpcmUoJy4vcHJvbXB0cycpO1xuXG5jb25zdCBwYXNzT24gPSBbJ3N1Z2dlc3QnLCAnZm9ybWF0JywgJ29uU3RhdGUnLCAndmFsaWRhdGUnLCAnb25SZW5kZXInLCAndHlwZSddO1xuXG5jb25zdCBub29wID0gKCkgPT4ge307XG4vKipcbiAqIFByb21wdCBmb3IgYSBzZXJpZXMgb2YgcXVlc3Rpb25zXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gcXVlc3Rpb25zIFNpbmdsZSBxdWVzdGlvbiBvYmplY3Qgb3IgQXJyYXkgb2YgcXVlc3Rpb24gb2JqZWN0c1xuICogQHBhcmFtIHtGdW5jdGlvbn0gW29uU3VibWl0XSBDYWxsYmFjayBmdW5jdGlvbiBjYWxsZWQgb24gcHJvbXB0IHN1Ym1pdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29uQ2FuY2VsXSBDYWxsYmFjayBmdW5jdGlvbiBjYWxsZWQgb24gY2FuY2VsL2Fib3J0XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBPYmplY3Qgd2l0aCB2YWx1ZXMgZnJvbSB1c2VyIGlucHV0XG4gKi9cblxuXG5mdW5jdGlvbiBwcm9tcHQoKSB7XG4gIHJldHVybiBfcHJvbXB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9wcm9tcHQoKSB7XG4gIF9wcm9tcHQgPSBfYXN5bmNUb0dlbmVyYXRvcihmdW5jdGlvbiogKHF1ZXN0aW9ucyA9IFtdLCB7XG4gICAgb25TdWJtaXQgPSBub29wLFxuICAgIG9uQ2FuY2VsID0gbm9vcFxuICB9ID0ge30pIHtcbiAgICBjb25zdCBhbnN3ZXJzID0ge307XG4gICAgY29uc3Qgb3ZlcnJpZGUgPSBwcm9tcHQuX292ZXJyaWRlIHx8IHt9O1xuICAgIHF1ZXN0aW9ucyA9IFtdLmNvbmNhdChxdWVzdGlvbnMpO1xuICAgIGxldCBhbnN3ZXIsIHF1ZXN0aW9uLCBxdWl0LCBuYW1lLCB0eXBlLCBsYXN0UHJvbXB0O1xuXG4gICAgY29uc3QgZ2V0Rm9ybWF0dGVkQW5zd2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoZnVuY3Rpb24qIChxdWVzdGlvbiwgYW5zd2VyLCBza2lwVmFsaWRhdGlvbiA9IGZhbHNlKSB7XG4gICAgICAgIGlmICghc2tpcFZhbGlkYXRpb24gJiYgcXVlc3Rpb24udmFsaWRhdGUgJiYgcXVlc3Rpb24udmFsaWRhdGUoYW5zd2VyKSAhPT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBxdWVzdGlvbi5mb3JtYXQgPyB5aWVsZCBxdWVzdGlvbi5mb3JtYXQoYW5zd2VyLCBhbnN3ZXJzKSA6IGFuc3dlcjtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gZ2V0Rm9ybWF0dGVkQW5zd2VyKF94LCBfeDIpIHtcbiAgICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSgpO1xuXG4gICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHF1ZXN0aW9ucyksXG4gICAgICAgIF9zdGVwO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHF1ZXN0aW9uID0gX3N0ZXAudmFsdWU7XG4gICAgICAgIHZhciBfcXVlc3Rpb24gPSBxdWVzdGlvbjtcbiAgICAgICAgbmFtZSA9IF9xdWVzdGlvbi5uYW1lO1xuICAgICAgICB0eXBlID0gX3F1ZXN0aW9uLnR5cGU7XG5cbiAgICAgICAgLy8gZXZhbHVhdGUgdHlwZSBmaXJzdCBhbmQgc2tpcCBpZiB0eXBlIGlzIGEgZmFsc3kgdmFsdWVcbiAgICAgICAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdHlwZSA9IHlpZWxkIHR5cGUoYW5zd2VyLCBfb2JqZWN0U3ByZWFkKHt9LCBhbnN3ZXJzKSwgcXVlc3Rpb24pO1xuICAgICAgICAgIHF1ZXN0aW9uWyd0eXBlJ10gPSB0eXBlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0eXBlKSBjb250aW51ZTsgLy8gaWYgcHJvcGVydHkgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IHVubGVzcyBpdCdzIGEgc3BlY2lhbCBmdW5jdGlvblxuXG4gICAgICAgIGZvciAobGV0IGtleSBpbiBxdWVzdGlvbikge1xuICAgICAgICAgIGlmIChwYXNzT24uaW5jbHVkZXMoa2V5KSkgY29udGludWU7XG4gICAgICAgICAgbGV0IHZhbHVlID0gcXVlc3Rpb25ba2V5XTtcbiAgICAgICAgICBxdWVzdGlvbltrZXldID0gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nID8geWllbGQgdmFsdWUoYW5zd2VyLCBfb2JqZWN0U3ByZWFkKHt9LCBhbnN3ZXJzKSwgbGFzdFByb21wdCkgOiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3RQcm9tcHQgPSBxdWVzdGlvbjtcblxuICAgICAgICBpZiAodHlwZW9mIHF1ZXN0aW9uLm1lc3NhZ2UgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcm9tcHQgbWVzc2FnZSBpcyByZXF1aXJlZCcpO1xuICAgICAgICB9IC8vIHVwZGF0ZSB2YXJzIGluIGNhc2UgdGhleSBjaGFuZ2VkXG5cblxuICAgICAgICB2YXIgX3F1ZXN0aW9uMiA9IHF1ZXN0aW9uO1xuICAgICAgICBuYW1lID0gX3F1ZXN0aW9uMi5uYW1lO1xuICAgICAgICB0eXBlID0gX3F1ZXN0aW9uMi50eXBlO1xuXG4gICAgICAgIGlmIChwcm9tcHRzW3R5cGVdID09PSB2b2lkIDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHByb21wdCB0eXBlICgke3R5cGV9KSBpcyBub3QgZGVmaW5lZGApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG92ZXJyaWRlW3F1ZXN0aW9uLm5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBhbnN3ZXIgPSB5aWVsZCBnZXRGb3JtYXR0ZWRBbnN3ZXIocXVlc3Rpb24sIG92ZXJyaWRlW3F1ZXN0aW9uLm5hbWVdKTtcblxuICAgICAgICAgIGlmIChhbnN3ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYW5zd2Vyc1tuYW1lXSA9IGFuc3dlcjtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gR2V0IHRoZSBpbmplY3RlZCBhbnN3ZXIgaWYgdGhlcmUgaXMgb25lIG9yIHByb21wdCB0aGUgdXNlclxuICAgICAgICAgIGFuc3dlciA9IHByb21wdC5faW5qZWN0ZWQgPyBnZXRJbmplY3RlZEFuc3dlcihwcm9tcHQuX2luamVjdGVkLCBxdWVzdGlvbi5pbml0aWFsKSA6IHlpZWxkIHByb21wdHNbdHlwZV0ocXVlc3Rpb24pO1xuICAgICAgICAgIGFuc3dlcnNbbmFtZV0gPSBhbnN3ZXIgPSB5aWVsZCBnZXRGb3JtYXR0ZWRBbnN3ZXIocXVlc3Rpb24sIGFuc3dlciwgdHJ1ZSk7XG4gICAgICAgICAgcXVpdCA9IHlpZWxkIG9uU3VibWl0KHF1ZXN0aW9uLCBhbnN3ZXIsIGFuc3dlcnMpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBxdWl0ID0gISh5aWVsZCBvbkNhbmNlbChxdWVzdGlvbiwgYW5zd2VycykpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHF1aXQpIHJldHVybiBhbnN3ZXJzO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2l0ZXJhdG9yLmYoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYW5zd2VycztcbiAgfSk7XG4gIHJldHVybiBfcHJvbXB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGdldEluamVjdGVkQW5zd2VyKGluamVjdGVkLCBkZWFmdWx0VmFsdWUpIHtcbiAgY29uc3QgYW5zd2VyID0gaW5qZWN0ZWQuc2hpZnQoKTtcblxuICBpZiAoYW5zd2VyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICB0aHJvdyBhbnN3ZXI7XG4gIH1cblxuICByZXR1cm4gYW5zd2VyID09PSB1bmRlZmluZWQgPyBkZWFmdWx0VmFsdWUgOiBhbnN3ZXI7XG59XG5cbmZ1bmN0aW9uIGluamVjdChhbnN3ZXJzKSB7XG4gIHByb21wdC5faW5qZWN0ZWQgPSAocHJvbXB0Ll9pbmplY3RlZCB8fCBbXSkuY29uY2F0KGFuc3dlcnMpO1xufVxuXG5mdW5jdGlvbiBvdmVycmlkZShhbnN3ZXJzKSB7XG4gIHByb21wdC5fb3ZlcnJpZGUgPSBPYmplY3QuYXNzaWduKHt9LCBhbnN3ZXJzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKHByb21wdCwge1xuICBwcm9tcHQsXG4gIHByb21wdHMsXG4gIGluamVjdCxcbiAgb3ZlcnJpZGVcbn0pOyIsICIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gKGtleSwgaXNTZWxlY3QpID0+IHtcbiAgaWYgKGtleS5tZXRhICYmIGtleS5uYW1lICE9PSAnZXNjYXBlJykgcmV0dXJuO1xuICBcbiAgaWYgKGtleS5jdHJsKSB7XG4gICAgaWYgKGtleS5uYW1lID09PSAnYScpIHJldHVybiAnZmlyc3QnO1xuICAgIGlmIChrZXkubmFtZSA9PT0gJ2MnKSByZXR1cm4gJ2Fib3J0JztcbiAgICBpZiAoa2V5Lm5hbWUgPT09ICdkJykgcmV0dXJuICdhYm9ydCc7XG4gICAgaWYgKGtleS5uYW1lID09PSAnZScpIHJldHVybiAnbGFzdCc7XG4gICAgaWYgKGtleS5uYW1lID09PSAnZycpIHJldHVybiAncmVzZXQnO1xuICB9XG4gIFxuICBpZiAoaXNTZWxlY3QpIHtcbiAgICBpZiAoa2V5Lm5hbWUgPT09ICdqJykgcmV0dXJuICdkb3duJztcbiAgICBpZiAoa2V5Lm5hbWUgPT09ICdrJykgcmV0dXJuICd1cCc7XG4gIH1cblxuICBpZiAoa2V5Lm5hbWUgPT09ICdyZXR1cm4nKSByZXR1cm4gJ3N1Ym1pdCc7XG4gIGlmIChrZXkubmFtZSA9PT0gJ2VudGVyJykgcmV0dXJuICdzdWJtaXQnOyAvLyBjdHJsICsgSlxuICBpZiAoa2V5Lm5hbWUgPT09ICdiYWNrc3BhY2UnKSByZXR1cm4gJ2RlbGV0ZSc7XG4gIGlmIChrZXkubmFtZSA9PT0gJ2RlbGV0ZScpIHJldHVybiAnZGVsZXRlRm9yd2FyZCc7XG4gIGlmIChrZXkubmFtZSA9PT0gJ2Fib3J0JykgcmV0dXJuICdhYm9ydCc7XG4gIGlmIChrZXkubmFtZSA9PT0gJ2VzY2FwZScpIHJldHVybiAnZXhpdCc7XG4gIGlmIChrZXkubmFtZSA9PT0gJ3RhYicpIHJldHVybiAnbmV4dCc7XG4gIGlmIChrZXkubmFtZSA9PT0gJ3BhZ2Vkb3duJykgcmV0dXJuICduZXh0UGFnZSc7XG4gIGlmIChrZXkubmFtZSA9PT0gJ3BhZ2V1cCcpIHJldHVybiAncHJldlBhZ2UnO1xuICAvLyBUT0RPIGNyZWF0ZSBob21lKCkgaW4gcHJvbXB0IHR5cGVzIChlLmcuIFRleHRQcm9tcHQpXG4gIGlmIChrZXkubmFtZSA9PT0gJ2hvbWUnKSByZXR1cm4gJ2hvbWUnO1xuICAvLyBUT0RPIGNyZWF0ZSBlbmQoKSBpbiBwcm9tcHQgdHlwZXMgKGUuZy4gVGV4dFByb21wdClcbiAgaWYgKGtleS5uYW1lID09PSAnZW5kJykgcmV0dXJuICdlbmQnO1xuXG4gIGlmIChrZXkubmFtZSA9PT0gJ3VwJykgcmV0dXJuICd1cCc7XG4gIGlmIChrZXkubmFtZSA9PT0gJ2Rvd24nKSByZXR1cm4gJ2Rvd24nO1xuICBpZiAoa2V5Lm5hbWUgPT09ICdyaWdodCcpIHJldHVybiAncmlnaHQnO1xuICBpZiAoa2V5Lm5hbWUgPT09ICdsZWZ0JykgcmV0dXJuICdsZWZ0JztcblxuICByZXR1cm4gZmFsc2U7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBzdHIgPT4ge1xuICBjb25zdCBwYXR0ZXJuID0gW1xuICAgICdbXFxcXHUwMDFCXFxcXHUwMDlCXVtbXFxcXF0oKSM7P10qKD86KD86KD86KD86O1stYS16QS1aXFxcXGRcXFxcLyMmLjo9PyVAfl9dKykqfFthLXpBLVpcXFxcZF0rKD86O1stYS16QS1aXFxcXGRcXFxcLyMmLjo9PyVAfl9dKikqKT9cXFxcdTAwMDcpJyxcbiAgICAnKD86KD86XFxcXGR7MSw0fSg/OjtcXFxcZHswLDR9KSopP1tcXFxcZEEtUFJaY2YtbnRxcnk9Pjx+XSkpJ1xuICBdLmpvaW4oJ3wnKTtcblxuICBjb25zdCBSR1ggPSBuZXcgUmVnRXhwKHBhdHRlcm4sICdnJyk7XG4gIHJldHVybiB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyA/IHN0ci5yZXBsYWNlKFJHWCwgJycpIDogc3RyO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHN0cmlwID0gcmVxdWlyZSgnLi9zdHJpcCcpO1xuY29uc3QgeyBlcmFzZSwgY3Vyc29yIH0gPSByZXF1aXJlKCdzaXN0ZXJhbnNpJyk7XG5cbmNvbnN0IHdpZHRoID0gc3RyID0+IFsuLi5zdHJpcChzdHIpXS5sZW5ndGg7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHByb21wdFxuICogQHBhcmFtIHtudW1iZXJ9IHBlckxpbmVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihwcm9tcHQsIHBlckxpbmUpIHtcbiAgaWYgKCFwZXJMaW5lKSByZXR1cm4gZXJhc2UubGluZSArIGN1cnNvci50bygwKTtcblxuICBsZXQgcm93cyA9IDA7XG4gIGNvbnN0IGxpbmVzID0gcHJvbXB0LnNwbGl0KC9cXHI/XFxuLyk7XG4gIGZvciAobGV0IGxpbmUgb2YgbGluZXMpIHtcbiAgICByb3dzICs9IDEgKyBNYXRoLmZsb29yKE1hdGgubWF4KHdpZHRoKGxpbmUpIC0gMSwgMCkgLyBwZXJMaW5lKTtcbiAgfVxuXG4gIHJldHVybiBlcmFzZS5saW5lcyhyb3dzKTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1x0XG5cbiBjb25zdCBtYWluID0ge1xuICBhcnJvd1VwOiAnXHUyMTkxJyxcbiAgYXJyb3dEb3duOiAnXHUyMTkzJyxcbiAgYXJyb3dMZWZ0OiAnXHUyMTkwJyxcbiAgYXJyb3dSaWdodDogJ1x1MjE5MicsXG4gIHJhZGlvT246ICdcdTI1QzknLFxuICByYWRpb09mZjogJ1x1MjVFRicsXG4gIHRpY2s6ICdcdTI3MTQnLFx0XG4gIGNyb3NzOiAnXHUyNzE2JyxcdFxuICBlbGxpcHNpczogJ1x1MjAyNicsXHRcbiAgcG9pbnRlclNtYWxsOiAnXHUyMDNBJyxcdFxuICBsaW5lOiAnXHUyNTAwJyxcdFxuICBwb2ludGVyOiAnXHUyNzZGJ1x0XG59O1x0XG5jb25zdCB3aW4gPSB7XG4gIGFycm93VXA6IG1haW4uYXJyb3dVcCxcbiAgYXJyb3dEb3duOiBtYWluLmFycm93RG93bixcbiAgYXJyb3dMZWZ0OiBtYWluLmFycm93TGVmdCxcbiAgYXJyb3dSaWdodDogbWFpbi5hcnJvd1JpZ2h0LFxuICByYWRpb09uOiAnKCopJyxcbiAgcmFkaW9PZmY6ICcoICknLFx0XG4gIHRpY2s6ICdcdTIyMUEnLFx0XG4gIGNyb3NzOiAnXHUwMEQ3JyxcdFxuICBlbGxpcHNpczogJy4uLicsXHRcbiAgcG9pbnRlclNtYWxsOiAnXHUwMEJCJyxcdFxuICBsaW5lOiAnXHUyNTAwJyxcdFxuICBwb2ludGVyOiAnPidcdFxufTtcdFxuY29uc3QgZmlndXJlcyA9IHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicgPyB3aW4gOiBtYWluO1x0XG5cbiBtb2R1bGUuZXhwb3J0cyA9IGZpZ3VyZXM7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjID0gcmVxdWlyZSgna2xldXInKTtcbmNvbnN0IGZpZ3VyZXMgPSByZXF1aXJlKCcuL2ZpZ3VyZXMnKTtcblxuLy8gcmVuZGVyaW5nIHVzZXIgaW5wdXQuXG5jb25zdCBzdHlsZXMgPSBPYmplY3QuZnJlZXplKHtcbiAgcGFzc3dvcmQ6IHsgc2NhbGU6IDEsIHJlbmRlcjogaW5wdXQgPT4gJyonLnJlcGVhdChpbnB1dC5sZW5ndGgpIH0sXG4gIGVtb2ppOiB7IHNjYWxlOiAyLCByZW5kZXI6IGlucHV0ID0+ICdcdUQ4M0RcdURFMDMnLnJlcGVhdChpbnB1dC5sZW5ndGgpIH0sXG4gIGludmlzaWJsZTogeyBzY2FsZTogMCwgcmVuZGVyOiBpbnB1dCA9PiAnJyB9LFxuICBkZWZhdWx0OiB7IHNjYWxlOiAxLCByZW5kZXI6IGlucHV0ID0+IGAke2lucHV0fWAgfVxufSk7XG5jb25zdCByZW5kZXIgPSB0eXBlID0+IHN0eWxlc1t0eXBlXSB8fCBzdHlsZXMuZGVmYXVsdDtcblxuLy8gaWNvbiB0byBzaWduYWxpemUgYSBwcm9tcHQuXG5jb25zdCBzeW1ib2xzID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGFib3J0ZWQ6IGMucmVkKGZpZ3VyZXMuY3Jvc3MpLFxuICBkb25lOiBjLmdyZWVuKGZpZ3VyZXMudGljayksXG4gIGV4aXRlZDogYy55ZWxsb3coZmlndXJlcy5jcm9zcyksXG4gIGRlZmF1bHQ6IGMuY3lhbignPycpXG59KTtcblxuY29uc3Qgc3ltYm9sID0gKGRvbmUsIGFib3J0ZWQsIGV4aXRlZCkgPT5cbiAgYWJvcnRlZCA/IHN5bWJvbHMuYWJvcnRlZCA6IGV4aXRlZCA/IHN5bWJvbHMuZXhpdGVkIDogZG9uZSA/IHN5bWJvbHMuZG9uZSA6IHN5bWJvbHMuZGVmYXVsdDtcblxuLy8gYmV0d2VlbiB0aGUgcXVlc3Rpb24gYW5kIHRoZSB1c2VyJ3MgaW5wdXQuXG5jb25zdCBkZWxpbWl0ZXIgPSBjb21wbGV0aW5nID0+XG4gIGMuZ3JheShjb21wbGV0aW5nID8gZmlndXJlcy5lbGxpcHNpcyA6IGZpZ3VyZXMucG9pbnRlclNtYWxsKTtcblxuY29uc3QgaXRlbSA9IChleHBhbmRhYmxlLCBleHBhbmRlZCkgPT5cbiAgYy5ncmF5KGV4cGFuZGFibGUgPyAoZXhwYW5kZWQgPyBmaWd1cmVzLnBvaW50ZXJTbWFsbCA6ICcrJykgOiBmaWd1cmVzLmxpbmUpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3R5bGVzLFxuICByZW5kZXIsXG4gIHN5bWJvbHMsXG4gIHN5bWJvbCxcbiAgZGVsaW1pdGVyLFxuICBpdGVtXG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc3RyaXAgPSByZXF1aXJlKCcuL3N0cmlwJyk7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG1zZ1xuICogQHBhcmFtIHtudW1iZXJ9IHBlckxpbmVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobXNnLCBwZXJMaW5lKSB7XG4gIGxldCBsaW5lcyA9IFN0cmluZyhzdHJpcChtc2cpIHx8ICcnKS5zcGxpdCgvXFxyP1xcbi8pO1xuXG4gIGlmICghcGVyTGluZSkgcmV0dXJuIGxpbmVzLmxlbmd0aDtcbiAgcmV0dXJuIGxpbmVzLm1hcChsID0+IE1hdGguY2VpbChsLmxlbmd0aCAvIHBlckxpbmUpKVxuICAgICAgLnJlZHVjZSgoYSwgYikgPT4gYSArIGIpO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG1zZyBUaGUgbWVzc2FnZSB0byB3cmFwXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0c1xuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBbb3B0cy5tYXJnaW5dIExlZnQgbWFyZ2luXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0cy53aWR0aCBNYXhpbXVtIGNoYXJhY3RlcnMgcGVyIGxpbmUgaW5jbHVkaW5nIHRoZSBtYXJnaW5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAobXNnLCBvcHRzID0ge30pID0+IHtcbiAgY29uc3QgdGFiID0gTnVtYmVyLmlzU2FmZUludGVnZXIocGFyc2VJbnQob3B0cy5tYXJnaW4pKVxuICAgID8gbmV3IEFycmF5KHBhcnNlSW50KG9wdHMubWFyZ2luKSkuZmlsbCgnICcpLmpvaW4oJycpXG4gICAgOiAob3B0cy5tYXJnaW4gfHwgJycpO1xuXG4gIGNvbnN0IHdpZHRoID0gb3B0cy53aWR0aDtcblxuICByZXR1cm4gKG1zZyB8fCAnJykuc3BsaXQoL1xccj9cXG4vZylcbiAgICAubWFwKGxpbmUgPT4gbGluZVxuICAgICAgLnNwbGl0KC9cXHMrL2cpXG4gICAgICAucmVkdWNlKChhcnIsIHcpID0+IHtcbiAgICAgICAgaWYgKHcubGVuZ3RoICsgdGFiLmxlbmd0aCA+PSB3aWR0aCB8fCBhcnJbYXJyLmxlbmd0aCAtIDFdLmxlbmd0aCArIHcubGVuZ3RoICsgMSA8IHdpZHRoKVxuICAgICAgICAgIGFyclthcnIubGVuZ3RoIC0gMV0gKz0gYCAke3d9YDtcbiAgICAgICAgZWxzZSBhcnIucHVzaChgJHt0YWJ9JHt3fWApO1xuICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgfSwgWyB0YWIgXSlcbiAgICAgIC5qb2luKCdcXG4nKSlcbiAgICAuam9pbignXFxuJyk7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmUgd2hhdCBlbnRyaWVzIHNob3VsZCBiZSBkaXNwbGF5ZWQgb24gdGhlIHNjcmVlbiwgYmFzZWQgb24gdGhlXG4gKiBjdXJyZW50bHkgc2VsZWN0ZWQgaW5kZXggYW5kIHRoZSBtYXhpbXVtIHZpc2libGUuIFVzZWQgaW4gbGlzdC1iYXNlZFxuICogcHJvbXB0cyBsaWtlIGBzZWxlY3RgIGFuZCBgbXVsdGlzZWxlY3RgLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBjdXJzb3IgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBlbnRyeVxuICogQHBhcmFtIHtudW1iZXJ9IHRvdGFsIHRoZSB0b3RhbCBlbnRyaWVzIGF2YWlsYWJsZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge251bWJlcn0gW21heFZpc2libGVdIHRoZSBudW1iZXIgb2YgZW50cmllcyB0aGF0IGNhbiBiZSBkaXNwbGF5ZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAoY3Vyc29yLCB0b3RhbCwgbWF4VmlzaWJsZSkgID0+IHtcbiAgbWF4VmlzaWJsZSA9IG1heFZpc2libGUgfHwgdG90YWw7XG5cbiAgbGV0IHN0YXJ0SW5kZXggPSBNYXRoLm1pbih0b3RhbC0gbWF4VmlzaWJsZSwgY3Vyc29yIC0gTWF0aC5mbG9vcihtYXhWaXNpYmxlIC8gMikpO1xuICBpZiAoc3RhcnRJbmRleCA8IDApIHN0YXJ0SW5kZXggPSAwO1xuXG4gIGxldCBlbmRJbmRleCA9IE1hdGgubWluKHN0YXJ0SW5kZXggKyBtYXhWaXNpYmxlLCB0b3RhbCk7XG5cbiAgcmV0dXJuIHsgc3RhcnRJbmRleCwgZW5kSW5kZXggfTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYWN0aW9uOiByZXF1aXJlKCcuL2FjdGlvbicpLFxuICBjbGVhcjogcmVxdWlyZSgnLi9jbGVhcicpLFxuICBzdHlsZTogcmVxdWlyZSgnLi9zdHlsZScpLFxuICBzdHJpcDogcmVxdWlyZSgnLi9zdHJpcCcpLFxuICBmaWd1cmVzOiByZXF1aXJlKCcuL2ZpZ3VyZXMnKSxcbiAgbGluZXM6IHJlcXVpcmUoJy4vbGluZXMnKSxcbiAgd3JhcDogcmVxdWlyZSgnLi93cmFwJyksXG4gIGVudHJpZXNUb0Rpc3BsYXk6IHJlcXVpcmUoJy4vZW50cmllc1RvRGlzcGxheScpXG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcmVhZGxpbmUgPSByZXF1aXJlKCdyZWFkbGluZScpO1xuY29uc3QgeyBhY3Rpb24gfSA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcbmNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpO1xuY29uc3QgeyBiZWVwLCBjdXJzb3IgfSA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKTtcbmNvbnN0IGNvbG9yID0gcmVxdWlyZSgna2xldXInKTtcblxuLyoqXG4gKiBCYXNlIHByb21wdCBza2VsZXRvblxuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKi9cbmNsYXNzIFByb21wdCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKG9wdHM9e30pIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5maXJzdFJlbmRlciA9IHRydWU7XG4gICAgdGhpcy5pbiA9IG9wdHMuc3RkaW4gfHwgcHJvY2Vzcy5zdGRpbjtcbiAgICB0aGlzLm91dCA9IG9wdHMuc3Rkb3V0IHx8IHByb2Nlc3Muc3Rkb3V0O1xuICAgIHRoaXMub25SZW5kZXIgPSAob3B0cy5vblJlbmRlciB8fCAoKCkgPT4gdm9pZCAwKSkuYmluZCh0aGlzKTtcbiAgICBjb25zdCBybCA9IHJlYWRsaW5lLmNyZWF0ZUludGVyZmFjZSh7IGlucHV0OnRoaXMuaW4sIGVzY2FwZUNvZGVUaW1lb3V0OjUwIH0pO1xuICAgIHJlYWRsaW5lLmVtaXRLZXlwcmVzc0V2ZW50cyh0aGlzLmluLCBybCk7XG5cbiAgICBpZiAodGhpcy5pbi5pc1RUWSkgdGhpcy5pbi5zZXRSYXdNb2RlKHRydWUpO1xuICAgIGNvbnN0IGlzU2VsZWN0ID0gWyAnU2VsZWN0UHJvbXB0JywgJ011bHRpc2VsZWN0UHJvbXB0JyBdLmluZGV4T2YodGhpcy5jb25zdHJ1Y3Rvci5uYW1lKSA+IC0xO1xuICAgIGNvbnN0IGtleXByZXNzID0gKHN0ciwga2V5KSA9PiB7XG4gICAgICBsZXQgYSA9IGFjdGlvbihrZXksIGlzU2VsZWN0KTtcbiAgICAgIGlmIChhID09PSBmYWxzZSkge1xuICAgICAgICB0aGlzLl8gJiYgdGhpcy5fKHN0ciwga2V5KTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXNbYV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpc1thXShrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5iZWxsKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuY2xvc2UgPSAoKSA9PiB7XG4gICAgICB0aGlzLm91dC53cml0ZShjdXJzb3Iuc2hvdyk7XG4gICAgICB0aGlzLmluLnJlbW92ZUxpc3RlbmVyKCdrZXlwcmVzcycsIGtleXByZXNzKTtcbiAgICAgIGlmICh0aGlzLmluLmlzVFRZKSB0aGlzLmluLnNldFJhd01vZGUoZmFsc2UpO1xuICAgICAgcmwuY2xvc2UoKTtcbiAgICAgIHRoaXMuZW1pdCh0aGlzLmFib3J0ZWQgPyAnYWJvcnQnIDogdGhpcy5leGl0ZWQgPyAnZXhpdCcgOiAnc3VibWl0JywgdGhpcy52YWx1ZSk7XG4gICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgfTtcblxuICAgIHRoaXMuaW4ub24oJ2tleXByZXNzJywga2V5cHJlc3MpO1xuICB9XG5cbiAgZmlyZSgpIHtcbiAgICB0aGlzLmVtaXQoJ3N0YXRlJywge1xuICAgICAgdmFsdWU6IHRoaXMudmFsdWUsXG4gICAgICBhYm9ydGVkOiAhIXRoaXMuYWJvcnRlZCxcbiAgICAgIGV4aXRlZDogISF0aGlzLmV4aXRlZFxuICAgIH0pO1xuICB9XG5cbiAgYmVsbCgpIHtcbiAgICB0aGlzLm91dC53cml0ZShiZWVwKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLm9uUmVuZGVyKGNvbG9yKTtcbiAgICBpZiAodGhpcy5maXJzdFJlbmRlcikgdGhpcy5maXJzdFJlbmRlciA9IGZhbHNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvbXB0O1xuIiwgImNvbnN0IGNvbG9yID0gcmVxdWlyZSgna2xldXInKTtcbmNvbnN0IFByb21wdCA9IHJlcXVpcmUoJy4vcHJvbXB0Jyk7XG5jb25zdCB7IGVyYXNlLCBjdXJzb3IgfSA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKTtcbmNvbnN0IHsgc3R5bGUsIGNsZWFyLCBsaW5lcywgZmlndXJlcyB9ID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuXG4vKipcbiAqIFRleHRQcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5zdHlsZT0nZGVmYXVsdCddIFJlbmRlciBzdHlsZVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmluaXRpYWxdIERlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLnZhbGlkYXRlXSBWYWxpZGF0ZSBmdW5jdGlvblxuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuZXJyb3JdIFRoZSBpbnZhbGlkIGVycm9yIGxhYmVsXG4gKi9cbmNsYXNzIFRleHRQcm9tcHQgZXh0ZW5kcyBQcm9tcHQge1xuICBjb25zdHJ1Y3RvcihvcHRzPXt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy50cmFuc2Zvcm0gPSBzdHlsZS5yZW5kZXIob3B0cy5zdHlsZSk7XG4gICAgdGhpcy5zY2FsZSA9IHRoaXMudHJhbnNmb3JtLnNjYWxlO1xuICAgIHRoaXMubXNnID0gb3B0cy5tZXNzYWdlO1xuICAgIHRoaXMuaW5pdGlhbCA9IG9wdHMuaW5pdGlhbCB8fCBgYDtcbiAgICB0aGlzLnZhbGlkYXRvciA9IG9wdHMudmFsaWRhdGUgfHwgKCgpID0+IHRydWUpO1xuICAgIHRoaXMudmFsdWUgPSBgYDtcbiAgICB0aGlzLmVycm9yTXNnID0gb3B0cy5lcnJvciB8fCBgUGxlYXNlIEVudGVyIEEgVmFsaWQgVmFsdWVgO1xuICAgIHRoaXMuY3Vyc29yID0gTnVtYmVyKCEhdGhpcy5pbml0aWFsKTtcbiAgICB0aGlzLmN1cnNvck9mZnNldCA9IDA7XG4gICAgdGhpcy5jbGVhciA9IGNsZWFyKGBgLCB0aGlzLm91dC5jb2x1bW5zKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgc2V0IHZhbHVlKHYpIHtcbiAgICBpZiAoIXYgJiYgdGhpcy5pbml0aWFsKSB7XG4gICAgICB0aGlzLnBsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIHRoaXMucmVuZGVyZWQgPSBjb2xvci5ncmF5KHRoaXMudHJhbnNmb3JtLnJlbmRlcih0aGlzLmluaXRpYWwpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IGZhbHNlO1xuICAgICAgdGhpcy5yZW5kZXJlZCA9IHRoaXMudHJhbnNmb3JtLnJlbmRlcih2KTtcbiAgICB9XG4gICAgdGhpcy5fdmFsdWUgPSB2O1xuICAgIHRoaXMuZmlyZSgpO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMudmFsdWUgPSBgYDtcbiAgICB0aGlzLmN1cnNvciA9IE51bWJlcighIXRoaXMuaW5pdGlhbCk7XG4gICAgdGhpcy5jdXJzb3JPZmZzZXQgPSAwO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBleGl0KCkge1xuICAgIHRoaXMuYWJvcnQoKTtcbiAgfVxuXG4gIGFib3J0KCkge1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLnZhbHVlIHx8IHRoaXMuaW5pdGlhbDtcbiAgICB0aGlzLmRvbmUgPSB0aGlzLmFib3J0ZWQgPSB0cnVlO1xuICAgIHRoaXMuZXJyb3IgPSBmYWxzZTtcbiAgICB0aGlzLnJlZCA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIGFzeW5jIHZhbGlkYXRlKCkge1xuICAgIGxldCB2YWxpZCA9IGF3YWl0IHRoaXMudmFsaWRhdG9yKHRoaXMudmFsdWUpO1xuICAgIGlmICh0eXBlb2YgdmFsaWQgPT09IGBzdHJpbmdgKSB7XG4gICAgICB0aGlzLmVycm9yTXNnID0gdmFsaWQ7XG4gICAgICB2YWxpZCA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmVycm9yID0gIXZhbGlkO1xuICB9XG5cbiAgYXN5bmMgc3VibWl0KCkge1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLnZhbHVlIHx8IHRoaXMuaW5pdGlhbDtcbiAgICB0aGlzLmN1cnNvck9mZnNldCA9IDA7XG4gICAgdGhpcy5jdXJzb3IgPSB0aGlzLnJlbmRlcmVkLmxlbmd0aDtcbiAgICBhd2FpdCB0aGlzLnZhbGlkYXRlKCk7XG4gICAgaWYgKHRoaXMuZXJyb3IpIHtcbiAgICAgIHRoaXMucmVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuZmlyZSgpO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICB0aGlzLmFib3J0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICBuZXh0KCkge1xuICAgIGlmICghdGhpcy5wbGFjZWhvbGRlcikgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLmluaXRpYWw7XG4gICAgdGhpcy5jdXJzb3IgPSB0aGlzLnJlbmRlcmVkLmxlbmd0aDtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbW92ZUN1cnNvcihuKSB7XG4gICAgaWYgKHRoaXMucGxhY2Vob2xkZXIpIHJldHVybjtcbiAgICB0aGlzLmN1cnNvciA9IHRoaXMuY3Vyc29yK247XG4gICAgdGhpcy5jdXJzb3JPZmZzZXQgKz0gbjtcbiAgfVxuXG4gIF8oYywga2V5KSB7XG4gICAgbGV0IHMxID0gdGhpcy52YWx1ZS5zbGljZSgwLCB0aGlzLmN1cnNvcik7XG4gICAgbGV0IHMyID0gdGhpcy52YWx1ZS5zbGljZSh0aGlzLmN1cnNvcik7XG4gICAgdGhpcy52YWx1ZSA9IGAke3MxfSR7Y30ke3MyfWA7XG4gICAgdGhpcy5yZWQgPSBmYWxzZTtcbiAgICB0aGlzLmN1cnNvciA9IHRoaXMucGxhY2Vob2xkZXIgPyAwIDogczEubGVuZ3RoKzE7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRlbGV0ZSgpIHtcbiAgICBpZiAodGhpcy5pc0N1cnNvckF0U3RhcnQoKSkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIGxldCBzMSA9IHRoaXMudmFsdWUuc2xpY2UoMCwgdGhpcy5jdXJzb3ItMSk7XG4gICAgbGV0IHMyID0gdGhpcy52YWx1ZS5zbGljZSh0aGlzLmN1cnNvcik7XG4gICAgdGhpcy52YWx1ZSA9IGAke3MxfSR7czJ9YDtcbiAgICB0aGlzLnJlZCA9IGZhbHNlO1xuICAgIGlmICh0aGlzLmlzQ3Vyc29yQXRTdGFydCgpKSB7XG4gICAgICB0aGlzLmN1cnNvck9mZnNldCA9IDBcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jdXJzb3JPZmZzZXQrKztcbiAgICAgIHRoaXMubW92ZUN1cnNvcigtMSk7XG4gICAgfVxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkZWxldGVGb3J3YXJkKCkge1xuICAgIGlmKHRoaXMuY3Vyc29yKnRoaXMuc2NhbGUgPj0gdGhpcy5yZW5kZXJlZC5sZW5ndGggfHwgdGhpcy5wbGFjZWhvbGRlcikgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIGxldCBzMSA9IHRoaXMudmFsdWUuc2xpY2UoMCwgdGhpcy5jdXJzb3IpO1xuICAgIGxldCBzMiA9IHRoaXMudmFsdWUuc2xpY2UodGhpcy5jdXJzb3IrMSk7XG4gICAgdGhpcy52YWx1ZSA9IGAke3MxfSR7czJ9YDtcbiAgICB0aGlzLnJlZCA9IGZhbHNlO1xuICAgIGlmICh0aGlzLmlzQ3Vyc29yQXRFbmQoKSkge1xuICAgICAgdGhpcy5jdXJzb3JPZmZzZXQgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnNvck9mZnNldCsrO1xuICAgIH1cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZmlyc3QoKSB7XG4gICAgdGhpcy5jdXJzb3IgPSAwO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBsYXN0KCkge1xuICAgIHRoaXMuY3Vyc29yID0gdGhpcy52YWx1ZS5sZW5ndGg7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGxlZnQoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yIDw9IDAgfHwgdGhpcy5wbGFjZWhvbGRlcikgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMubW92ZUN1cnNvcigtMSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHJpZ2h0KCkge1xuICAgIGlmICh0aGlzLmN1cnNvcip0aGlzLnNjYWxlID49IHRoaXMucmVuZGVyZWQubGVuZ3RoIHx8IHRoaXMucGxhY2Vob2xkZXIpIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLm1vdmVDdXJzb3IoMSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGlzQ3Vyc29yQXRTdGFydCgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJzb3IgPT09IDAgfHwgKHRoaXMucGxhY2Vob2xkZXIgJiYgdGhpcy5jdXJzb3IgPT09IDEpO1xuICB9XG5cbiAgaXNDdXJzb3JBdEVuZCgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJzb3IgPT09IHRoaXMucmVuZGVyZWQubGVuZ3RoIHx8ICh0aGlzLnBsYWNlaG9sZGVyICYmIHRoaXMuY3Vyc29yID09PSB0aGlzLnJlbmRlcmVkLmxlbmd0aCArIDEpXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuY2xvc2VkKSByZXR1cm47XG4gICAgaWYgKCF0aGlzLmZpcnN0UmVuZGVyKSB7XG4gICAgICBpZiAodGhpcy5vdXRwdXRFcnJvcilcbiAgICAgICAgdGhpcy5vdXQud3JpdGUoY3Vyc29yLmRvd24obGluZXModGhpcy5vdXRwdXRFcnJvciwgdGhpcy5vdXQuY29sdW1ucykgLSAxKSArIGNsZWFyKHRoaXMub3V0cHV0RXJyb3IsIHRoaXMub3V0LmNvbHVtbnMpKTtcbiAgICAgIHRoaXMub3V0LndyaXRlKGNsZWFyKHRoaXMub3V0cHV0VGV4dCwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgIH1cbiAgICBzdXBlci5yZW5kZXIoKTtcbiAgICB0aGlzLm91dHB1dEVycm9yID0gJyc7XG5cbiAgICB0aGlzLm91dHB1dFRleHQgPSBbXG4gICAgICBzdHlsZS5zeW1ib2wodGhpcy5kb25lLCB0aGlzLmFib3J0ZWQpLFxuICAgICAgY29sb3IuYm9sZCh0aGlzLm1zZyksXG4gICAgICBzdHlsZS5kZWxpbWl0ZXIodGhpcy5kb25lKSxcbiAgICAgIHRoaXMucmVkID8gY29sb3IucmVkKHRoaXMucmVuZGVyZWQpIDogdGhpcy5yZW5kZXJlZFxuICAgIF0uam9pbihgIGApO1xuXG4gICAgaWYgKHRoaXMuZXJyb3IpIHtcbiAgICAgIHRoaXMub3V0cHV0RXJyb3IgKz0gdGhpcy5lcnJvck1zZy5zcGxpdChgXFxuYClcbiAgICAgICAgICAucmVkdWNlKChhLCBsLCBpKSA9PiBhICsgYFxcbiR7aSA/ICcgJyA6IGZpZ3VyZXMucG9pbnRlclNtYWxsfSAke2NvbG9yLnJlZCgpLml0YWxpYyhsKX1gLCBgYCk7XG4gICAgfVxuXG4gICAgdGhpcy5vdXQud3JpdGUoZXJhc2UubGluZSArIGN1cnNvci50bygwKSArIHRoaXMub3V0cHV0VGV4dCArIGN1cnNvci5zYXZlICsgdGhpcy5vdXRwdXRFcnJvciArIGN1cnNvci5yZXN0b3JlICsgY3Vyc29yLm1vdmUodGhpcy5jdXJzb3JPZmZzZXQsIDApKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRleHRQcm9tcHQ7IiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY29sb3IgPSByZXF1aXJlKCdrbGV1cicpO1xuY29uc3QgUHJvbXB0ID0gcmVxdWlyZSgnLi9wcm9tcHQnKTtcbmNvbnN0IHsgc3R5bGUsIGNsZWFyLCBmaWd1cmVzLCB3cmFwLCBlbnRyaWVzVG9EaXNwbGF5IH0gPSByZXF1aXJlKCcuLi91dGlsJyk7XG5jb25zdCB7IGN1cnNvciB9ID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpO1xuXG4vKipcbiAqIFNlbGVjdFByb21wdCBCYXNlIEVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRzLm1lc3NhZ2UgTWVzc2FnZVxuICogQHBhcmFtIHtBcnJheX0gb3B0cy5jaG9pY2VzIEFycmF5IG9mIGNob2ljZSBvYmplY3RzXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuaGludF0gSGludCB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMuaW5pdGlhbF0gSW5kZXggb2YgZGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMub3B0aW9uc1BlclBhZ2U9MTBdIE1heCBvcHRpb25zIHRvIGRpc3BsYXkgYXQgb25jZVxuICovXG5jbGFzcyBTZWxlY3RQcm9tcHQgZXh0ZW5kcyBQcm9tcHQge1xuICBjb25zdHJ1Y3RvcihvcHRzPXt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy5tc2cgPSBvcHRzLm1lc3NhZ2U7XG4gICAgdGhpcy5oaW50ID0gb3B0cy5oaW50IHx8ICctIFVzZSBhcnJvdy1rZXlzLiBSZXR1cm4gdG8gc3VibWl0Lic7XG4gICAgdGhpcy53YXJuID0gb3B0cy53YXJuIHx8ICctIFRoaXMgb3B0aW9uIGlzIGRpc2FibGVkJztcbiAgICB0aGlzLmN1cnNvciA9IG9wdHMuaW5pdGlhbCB8fCAwO1xuICAgIHRoaXMuY2hvaWNlcyA9IG9wdHMuY2hvaWNlcy5tYXAoKGNoLCBpZHgpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgY2ggPT09ICdzdHJpbmcnKVxuICAgICAgICBjaCA9IHt0aXRsZTogY2gsIHZhbHVlOiBpZHh9O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGl0bGU6IGNoICYmIChjaC50aXRsZSB8fCBjaC52YWx1ZSB8fCBjaCksXG4gICAgICAgIHZhbHVlOiBjaCAmJiAoY2gudmFsdWUgPT09IHVuZGVmaW5lZCA/IGlkeCA6IGNoLnZhbHVlKSxcbiAgICAgICAgZGVzY3JpcHRpb246IGNoICYmIGNoLmRlc2NyaXB0aW9uLFxuICAgICAgICBzZWxlY3RlZDogY2ggJiYgY2guc2VsZWN0ZWQsXG4gICAgICAgIGRpc2FibGVkOiBjaCAmJiBjaC5kaXNhYmxlZFxuICAgICAgfTtcbiAgICB9KTtcbiAgICB0aGlzLm9wdGlvbnNQZXJQYWdlID0gb3B0cy5vcHRpb25zUGVyUGFnZSB8fCAxMDtcbiAgICB0aGlzLnZhbHVlID0gKHRoaXMuY2hvaWNlc1t0aGlzLmN1cnNvcl0gfHwge30pLnZhbHVlO1xuICAgIHRoaXMuY2xlYXIgPSBjbGVhcignJywgdGhpcy5vdXQuY29sdW1ucyk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIG1vdmVDdXJzb3Iobikge1xuICAgIHRoaXMuY3Vyc29yID0gbjtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5jaG9pY2VzW25dLnZhbHVlO1xuICAgIHRoaXMuZmlyZSgpO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5tb3ZlQ3Vyc29yKDApO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBleGl0KCkge1xuICAgIHRoaXMuYWJvcnQoKTtcbiAgfVxuXG4gIGFib3J0KCkge1xuICAgIHRoaXMuZG9uZSA9IHRoaXMuYWJvcnRlZCA9IHRydWU7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm91dC53cml0ZSgnXFxuJyk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgc3VibWl0KCkge1xuICAgIGlmICghdGhpcy5zZWxlY3Rpb24uZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgICB0aGlzLmFib3J0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuZmlyZSgpO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9IGVsc2VcbiAgICAgIHRoaXMuYmVsbCgpO1xuICB9XG5cbiAgZmlyc3QoKSB7XG4gICAgdGhpcy5tb3ZlQ3Vyc29yKDApO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBsYXN0KCkge1xuICAgIHRoaXMubW92ZUN1cnNvcih0aGlzLmNob2ljZXMubGVuZ3RoIC0gMSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIGlmICh0aGlzLmN1cnNvciA9PT0gMCkge1xuICAgICAgdGhpcy5tb3ZlQ3Vyc29yKHRoaXMuY2hvaWNlcy5sZW5ndGggLSAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tb3ZlQ3Vyc29yKHRoaXMuY3Vyc29yIC0gMSk7XG4gICAgfVxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIGlmICh0aGlzLmN1cnNvciA9PT0gdGhpcy5jaG9pY2VzLmxlbmd0aCAtIDEpIHtcbiAgICAgIHRoaXMubW92ZUN1cnNvcigwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tb3ZlQ3Vyc29yKHRoaXMuY3Vyc29yICsgMSk7XG4gICAgfVxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBuZXh0KCkge1xuICAgIHRoaXMubW92ZUN1cnNvcigodGhpcy5jdXJzb3IgKyAxKSAlIHRoaXMuY2hvaWNlcy5sZW5ndGgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBfKGMsIGtleSkge1xuICAgIGlmIChjID09PSAnICcpIHJldHVybiB0aGlzLnN1Ym1pdCgpO1xuICB9XG5cbiAgZ2V0IHNlbGVjdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jaG9pY2VzW3RoaXMuY3Vyc29yXTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5jbG9zZWQpIHJldHVybjtcbiAgICBpZiAodGhpcy5maXJzdFJlbmRlcikgdGhpcy5vdXQud3JpdGUoY3Vyc29yLmhpZGUpO1xuICAgIGVsc2UgdGhpcy5vdXQud3JpdGUoY2xlYXIodGhpcy5vdXRwdXRUZXh0LCB0aGlzLm91dC5jb2x1bW5zKSk7XG4gICAgc3VwZXIucmVuZGVyKCk7XG5cbiAgICBsZXQgeyBzdGFydEluZGV4LCBlbmRJbmRleCB9ID0gZW50cmllc1RvRGlzcGxheSh0aGlzLmN1cnNvciwgdGhpcy5jaG9pY2VzLmxlbmd0aCwgdGhpcy5vcHRpb25zUGVyUGFnZSk7XG5cbiAgICAvLyBQcmludCBwcm9tcHRcbiAgICB0aGlzLm91dHB1dFRleHQgPSBbXG4gICAgICBzdHlsZS5zeW1ib2wodGhpcy5kb25lLCB0aGlzLmFib3J0ZWQpLFxuICAgICAgY29sb3IuYm9sZCh0aGlzLm1zZyksXG4gICAgICBzdHlsZS5kZWxpbWl0ZXIoZmFsc2UpLFxuICAgICAgdGhpcy5kb25lID8gdGhpcy5zZWxlY3Rpb24udGl0bGUgOiB0aGlzLnNlbGVjdGlvbi5kaXNhYmxlZFxuICAgICAgICAgID8gY29sb3IueWVsbG93KHRoaXMud2FybikgOiBjb2xvci5ncmF5KHRoaXMuaGludClcbiAgICBdLmpvaW4oJyAnKTtcblxuICAgIC8vIFByaW50IGNob2ljZXNcbiAgICBpZiAoIXRoaXMuZG9uZSkge1xuICAgICAgdGhpcy5vdXRwdXRUZXh0ICs9ICdcXG4nO1xuICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0SW5kZXg7IGkgPCBlbmRJbmRleDsgaSsrKSB7XG4gICAgICAgIGxldCB0aXRsZSwgcHJlZml4LCBkZXNjID0gJycsIHYgPSB0aGlzLmNob2ljZXNbaV07XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIHdoZXRoZXIgdG8gZGlzcGxheSBcIm1vcmUgY2hvaWNlc1wiIGluZGljYXRvcnNcbiAgICAgICAgaWYgKGkgPT09IHN0YXJ0SW5kZXggJiYgc3RhcnRJbmRleCA+IDApIHtcbiAgICAgICAgICBwcmVmaXggPSBmaWd1cmVzLmFycm93VXA7XG4gICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gZW5kSW5kZXggLSAxICYmIGVuZEluZGV4IDwgdGhpcy5jaG9pY2VzLmxlbmd0aCkge1xuICAgICAgICAgIHByZWZpeCA9IGZpZ3VyZXMuYXJyb3dEb3duO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZWZpeCA9ICcgJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2LmRpc2FibGVkKSB7XG4gICAgICAgICAgdGl0bGUgPSB0aGlzLmN1cnNvciA9PT0gaSA/IGNvbG9yLmdyYXkoKS51bmRlcmxpbmUodi50aXRsZSkgOiBjb2xvci5zdHJpa2V0aHJvdWdoKCkuZ3JheSh2LnRpdGxlKTtcbiAgICAgICAgICBwcmVmaXggPSAodGhpcy5jdXJzb3IgPT09IGkgPyBjb2xvci5ib2xkKCkuZ3JheShmaWd1cmVzLnBvaW50ZXIpICsgJyAnIDogJyAgJykgKyBwcmVmaXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGl0bGUgPSB0aGlzLmN1cnNvciA9PT0gaSA/IGNvbG9yLmN5YW4oKS51bmRlcmxpbmUodi50aXRsZSkgOiB2LnRpdGxlO1xuICAgICAgICAgIHByZWZpeCA9ICh0aGlzLmN1cnNvciA9PT0gaSA/IGNvbG9yLmN5YW4oZmlndXJlcy5wb2ludGVyKSArICcgJyA6ICcgICcpICsgcHJlZml4O1xuICAgICAgICAgIGlmICh2LmRlc2NyaXB0aW9uICYmIHRoaXMuY3Vyc29yID09PSBpKSB7XG4gICAgICAgICAgICBkZXNjID0gYCAtICR7di5kZXNjcmlwdGlvbn1gO1xuICAgICAgICAgICAgaWYgKHByZWZpeC5sZW5ndGggKyB0aXRsZS5sZW5ndGggKyBkZXNjLmxlbmd0aCA+PSB0aGlzLm91dC5jb2x1bW5zXG4gICAgICAgICAgICAgICAgfHwgdi5kZXNjcmlwdGlvbi5zcGxpdCgvXFxyP1xcbi8pLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgZGVzYyA9ICdcXG4nICsgd3JhcCh2LmRlc2NyaXB0aW9uLCB7IG1hcmdpbjogMywgd2lkdGg6IHRoaXMub3V0LmNvbHVtbnMgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vdXRwdXRUZXh0ICs9IGAke3ByZWZpeH0gJHt0aXRsZX0ke2NvbG9yLmdyYXkoZGVzYyl9XFxuYDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLm91dC53cml0ZSh0aGlzLm91dHB1dFRleHQpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2VsZWN0UHJvbXB0O1xuIiwgImNvbnN0IGNvbG9yID0gcmVxdWlyZSgna2xldXInKTtcbmNvbnN0IFByb21wdCA9IHJlcXVpcmUoJy4vcHJvbXB0Jyk7XG5jb25zdCB7IHN0eWxlLCBjbGVhciB9ID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuY29uc3QgeyBjdXJzb3IsIGVyYXNlIH0gPSByZXF1aXJlKCdzaXN0ZXJhbnNpJyk7XG5cbi8qKlxuICogVG9nZ2xlUHJvbXB0IEJhc2UgRWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG9wdHMubWVzc2FnZSBNZXNzYWdlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRzLmluaXRpYWw9ZmFsc2VdIERlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5hY3RpdmU9J25vJ10gQWN0aXZlIGxhYmVsXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuaW5hY3RpdmU9J29mZiddIEluYWN0aXZlIGxhYmVsXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqL1xuY2xhc3MgVG9nZ2xlUHJvbXB0IGV4dGVuZHMgUHJvbXB0IHtcbiAgY29uc3RydWN0b3Iob3B0cz17fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXMubXNnID0gb3B0cy5tZXNzYWdlO1xuICAgIHRoaXMudmFsdWUgPSAhIW9wdHMuaW5pdGlhbDtcbiAgICB0aGlzLmFjdGl2ZSA9IG9wdHMuYWN0aXZlIHx8ICdvbic7XG4gICAgdGhpcy5pbmFjdGl2ZSA9IG9wdHMuaW5hY3RpdmUgfHwgJ29mZic7XG4gICAgdGhpcy5pbml0aWFsVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5pbml0aWFsVmFsdWU7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGV4aXQoKSB7XG4gICAgdGhpcy5hYm9ydCgpO1xuICB9XG5cbiAgYWJvcnQoKSB7XG4gICAgdGhpcy5kb25lID0gdGhpcy5hYm9ydGVkID0gdHJ1ZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICBzdWJtaXQoKSB7XG4gICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICB0aGlzLmFib3J0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICBkZWFjdGl2YXRlKCkge1xuICAgIGlmICh0aGlzLnZhbHVlID09PSBmYWxzZSkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMudmFsdWUgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgYWN0aXZhdGUoKSB7XG4gICAgaWYgKHRoaXMudmFsdWUgPT09IHRydWUpIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLnZhbHVlID0gdHJ1ZTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZGVsZXRlKCkge1xuICAgIHRoaXMuZGVhY3RpdmF0ZSgpO1xuICB9XG4gIGxlZnQoKSB7XG4gICAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gIH1cbiAgcmlnaHQoKSB7XG4gICAgdGhpcy5hY3RpdmF0ZSgpO1xuICB9XG4gIGRvd24oKSB7XG4gICAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gIH1cbiAgdXAoKSB7XG4gICAgdGhpcy5hY3RpdmF0ZSgpO1xuICB9XG5cbiAgbmV4dCgpIHtcbiAgICB0aGlzLnZhbHVlID0gIXRoaXMudmFsdWU7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIF8oYywga2V5KSB7XG4gICAgaWYgKGMgPT09ICcgJykge1xuICAgICAgdGhpcy52YWx1ZSA9ICF0aGlzLnZhbHVlO1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gJzEnKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGMgPT09ICcwJykge1xuICAgICAgdGhpcy52YWx1ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5jbG9zZWQpIHJldHVybjtcbiAgICBpZiAodGhpcy5maXJzdFJlbmRlcikgdGhpcy5vdXQud3JpdGUoY3Vyc29yLmhpZGUpO1xuICAgIGVsc2UgdGhpcy5vdXQud3JpdGUoY2xlYXIodGhpcy5vdXRwdXRUZXh0LCB0aGlzLm91dC5jb2x1bW5zKSk7XG4gICAgc3VwZXIucmVuZGVyKCk7XG5cbiAgICB0aGlzLm91dHB1dFRleHQgPSBbXG4gICAgICBzdHlsZS5zeW1ib2wodGhpcy5kb25lLCB0aGlzLmFib3J0ZWQpLFxuICAgICAgY29sb3IuYm9sZCh0aGlzLm1zZyksXG4gICAgICBzdHlsZS5kZWxpbWl0ZXIodGhpcy5kb25lKSxcbiAgICAgIHRoaXMudmFsdWUgPyB0aGlzLmluYWN0aXZlIDogY29sb3IuY3lhbigpLnVuZGVybGluZSh0aGlzLmluYWN0aXZlKSxcbiAgICAgIGNvbG9yLmdyYXkoJy8nKSxcbiAgICAgIHRoaXMudmFsdWUgPyBjb2xvci5jeWFuKCkudW5kZXJsaW5lKHRoaXMuYWN0aXZlKSA6IHRoaXMuYWN0aXZlXG4gICAgXS5qb2luKCcgJyk7XG5cbiAgICB0aGlzLm91dC53cml0ZShlcmFzZS5saW5lICsgY3Vyc29yLnRvKDApICsgdGhpcy5vdXRwdXRUZXh0KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRvZ2dsZVByb21wdDtcbiIsICIndXNlIHN0cmljdCc7XG5cbmNsYXNzIERhdGVQYXJ0IHtcbiAgY29uc3RydWN0b3Ioe3Rva2VuLCBkYXRlLCBwYXJ0cywgbG9jYWxlc30pIHtcbiAgICB0aGlzLnRva2VuID0gdG9rZW47XG4gICAgdGhpcy5kYXRlID0gZGF0ZSB8fCBuZXcgRGF0ZSgpO1xuICAgIHRoaXMucGFydHMgPSBwYXJ0cyB8fCBbdGhpc107XG4gICAgdGhpcy5sb2NhbGVzID0gbG9jYWxlcyB8fCB7fTtcbiAgfVxuXG4gIHVwKCkge31cblxuICBkb3duKCkge31cblxuICBuZXh0KCkge1xuICAgIGNvbnN0IGN1cnJlbnRJZHggPSB0aGlzLnBhcnRzLmluZGV4T2YodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucGFydHMuZmluZCgocGFydCwgaWR4KSA9PiBpZHggPiBjdXJyZW50SWR4ICYmIHBhcnQgaW5zdGFuY2VvZiBEYXRlUGFydCk7XG4gIH1cblxuICBzZXRUbyh2YWwpIHt9XG5cbiAgcHJldigpIHtcbiAgICBsZXQgcGFydHMgPSBbXS5jb25jYXQodGhpcy5wYXJ0cykucmV2ZXJzZSgpO1xuICAgIGNvbnN0IGN1cnJlbnRJZHggPSBwYXJ0cy5pbmRleE9mKHRoaXMpO1xuICAgIHJldHVybiBwYXJ0cy5maW5kKChwYXJ0LCBpZHgpID0+IGlkeCA+IGN1cnJlbnRJZHggJiYgcGFydCBpbnN0YW5jZW9mIERhdGVQYXJ0KTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBTdHJpbmcodGhpcy5kYXRlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGVQYXJ0O1xuXG5cbiIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IERhdGVQYXJ0ID0gcmVxdWlyZSgnLi9kYXRlcGFydCcpO1xuXG5jbGFzcyBNZXJpZGllbSBleHRlbmRzIERhdGVQYXJ0IHtcbiAgY29uc3RydWN0b3Iob3B0cz17fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgdGhpcy5kYXRlLnNldEhvdXJzKCh0aGlzLmRhdGUuZ2V0SG91cnMoKSArIDEyKSAlIDI0KTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgdGhpcy51cCgpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IG1lcmlkaWVtID0gdGhpcy5kYXRlLmdldEhvdXJzKCkgPiAxMiA/ICdwbScgOiAnYW0nO1xuICAgIHJldHVybiAvXFxBLy50ZXN0KHRoaXMudG9rZW4pID8gbWVyaWRpZW0udG9VcHBlckNhc2UoKSA6IG1lcmlkaWVtO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTWVyaWRpZW07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBEYXRlUGFydCA9IHJlcXVpcmUoJy4vZGF0ZXBhcnQnKTtcblxuY29uc3QgcG9zID0gbiA9PiB7XG4gIG4gPSBuICUgMTA7XG4gIHJldHVybiBuID09PSAxID8gJ3N0J1xuICAgICAgIDogbiA9PT0gMiA/ICduZCdcbiAgICAgICA6IG4gPT09IDMgPyAncmQnXG4gICAgICAgOiAndGgnO1xufVxuXG5jbGFzcyBEYXkgZXh0ZW5kcyBEYXRlUGFydCB7XG4gIGNvbnN0cnVjdG9yKG9wdHM9e30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMuZGF0ZS5zZXREYXRlKHRoaXMuZGF0ZS5nZXREYXRlKCkgKyAxKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgdGhpcy5kYXRlLnNldERhdGUodGhpcy5kYXRlLmdldERhdGUoKSAtIDEpO1xuICB9XG5cbiAgc2V0VG8odmFsKSB7XG4gICAgdGhpcy5kYXRlLnNldERhdGUocGFyc2VJbnQodmFsLnN1YnN0cigtMikpKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCBkYXRlID0gdGhpcy5kYXRlLmdldERhdGUoKTtcbiAgICBsZXQgZGF5ID0gdGhpcy5kYXRlLmdldERheSgpO1xuICAgIHJldHVybiB0aGlzLnRva2VuID09PSAnREQnID8gU3RyaW5nKGRhdGUpLnBhZFN0YXJ0KDIsICcwJylcbiAgICAgICAgIDogdGhpcy50b2tlbiA9PT0gJ0RvJyA/IGRhdGUgKyBwb3MoZGF0ZSlcbiAgICAgICAgIDogdGhpcy50b2tlbiA9PT0gJ2QnID8gZGF5ICsgMVxuICAgICAgICAgOiB0aGlzLnRva2VuID09PSAnZGRkJyA/IHRoaXMubG9jYWxlcy53ZWVrZGF5c1Nob3J0W2RheV1cbiAgICAgICAgIDogdGhpcy50b2tlbiA9PT0gJ2RkZGQnID8gdGhpcy5sb2NhbGVzLndlZWtkYXlzW2RheV1cbiAgICAgICAgIDogZGF0ZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERheTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IERhdGVQYXJ0ID0gcmVxdWlyZSgnLi9kYXRlcGFydCcpO1xuXG5jbGFzcyBIb3VycyBleHRlbmRzIERhdGVQYXJ0IHtcbiAgY29uc3RydWN0b3Iob3B0cz17fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgdGhpcy5kYXRlLnNldEhvdXJzKHRoaXMuZGF0ZS5nZXRIb3VycygpICsgMSk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRIb3Vycyh0aGlzLmRhdGUuZ2V0SG91cnMoKSAtIDEpO1xuICB9XG5cbiAgc2V0VG8odmFsKSB7XG4gICAgdGhpcy5kYXRlLnNldEhvdXJzKHBhcnNlSW50KHZhbC5zdWJzdHIoLTIpKSk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICBsZXQgaG91cnMgPSB0aGlzLmRhdGUuZ2V0SG91cnMoKTtcbiAgICBpZiAoL2gvLnRlc3QodGhpcy50b2tlbikpXG4gICAgICBob3VycyA9IChob3VycyAlIDEyKSB8fCAxMjtcbiAgICByZXR1cm4gdGhpcy50b2tlbi5sZW5ndGggPiAxID8gU3RyaW5nKGhvdXJzKS5wYWRTdGFydCgyLCAnMCcpIDogaG91cnM7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIb3VycztcbiIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IERhdGVQYXJ0ID0gcmVxdWlyZSgnLi9kYXRlcGFydCcpO1xuXG5jbGFzcyBNaWxsaXNlY29uZHMgZXh0ZW5kcyBEYXRlUGFydCB7XG4gIGNvbnN0cnVjdG9yKG9wdHM9e30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRNaWxsaXNlY29uZHModGhpcy5kYXRlLmdldE1pbGxpc2Vjb25kcygpICsgMSk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRNaWxsaXNlY29uZHModGhpcy5kYXRlLmdldE1pbGxpc2Vjb25kcygpIC0gMSk7XG4gIH1cblxuICBzZXRUbyh2YWwpIHtcbiAgICB0aGlzLmRhdGUuc2V0TWlsbGlzZWNvbmRzKHBhcnNlSW50KHZhbC5zdWJzdHIoLSh0aGlzLnRva2VuLmxlbmd0aCkpKSk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gU3RyaW5nKHRoaXMuZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSkucGFkU3RhcnQoNCwgJzAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdWJzdHIoMCwgdGhpcy50b2tlbi5sZW5ndGgpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTWlsbGlzZWNvbmRzO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGF0ZVBhcnQgPSByZXF1aXJlKCcuL2RhdGVwYXJ0Jyk7XG5cbmNsYXNzIE1pbnV0ZXMgZXh0ZW5kcyBEYXRlUGFydCB7XG4gIGNvbnN0cnVjdG9yKG9wdHM9e30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRNaW51dGVzKHRoaXMuZGF0ZS5nZXRNaW51dGVzKCkgKyAxKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgdGhpcy5kYXRlLnNldE1pbnV0ZXModGhpcy5kYXRlLmdldE1pbnV0ZXMoKSAtIDEpO1xuICB9XG5cbiAgc2V0VG8odmFsKSB7XG4gICAgdGhpcy5kYXRlLnNldE1pbnV0ZXMocGFyc2VJbnQodmFsLnN1YnN0cigtMikpKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCBtID0gdGhpcy5kYXRlLmdldE1pbnV0ZXMoKTtcbiAgICByZXR1cm4gdGhpcy50b2tlbi5sZW5ndGggPiAxID8gU3RyaW5nKG0pLnBhZFN0YXJ0KDIsICcwJykgOiBtO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTWludXRlcztcbiIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IERhdGVQYXJ0ID0gcmVxdWlyZSgnLi9kYXRlcGFydCcpO1xuXG5jbGFzcyBNb250aCBleHRlbmRzIERhdGVQYXJ0IHtcbiAgY29uc3RydWN0b3Iob3B0cz17fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgdGhpcy5kYXRlLnNldE1vbnRoKHRoaXMuZGF0ZS5nZXRNb250aCgpICsgMSk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRNb250aCh0aGlzLmRhdGUuZ2V0TW9udGgoKSAtIDEpO1xuICB9XG5cbiAgc2V0VG8odmFsKSB7XG4gICAgdmFsID0gcGFyc2VJbnQodmFsLnN1YnN0cigtMikpIC0gMTtcbiAgICB0aGlzLmRhdGUuc2V0TW9udGgodmFsIDwgMCA/IDAgOiB2YWwpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IG1vbnRoID0gdGhpcy5kYXRlLmdldE1vbnRoKCk7XG4gICAgbGV0IHRsID0gdGhpcy50b2tlbi5sZW5ndGg7XG4gICAgcmV0dXJuIHRsID09PSAyID8gU3RyaW5nKG1vbnRoICsgMSkucGFkU3RhcnQoMiwgJzAnKVxuICAgICAgICAgICA6IHRsID09PSAzID8gdGhpcy5sb2NhbGVzLm1vbnRoc1Nob3J0W21vbnRoXVxuICAgICAgICAgICAgIDogdGwgPT09IDQgPyB0aGlzLmxvY2FsZXMubW9udGhzW21vbnRoXVxuICAgICAgICAgICAgICAgOiBTdHJpbmcobW9udGggKyAxKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1vbnRoO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGF0ZVBhcnQgPSByZXF1aXJlKCcuL2RhdGVwYXJ0Jyk7XG5cbmNsYXNzIFNlY29uZHMgZXh0ZW5kcyBEYXRlUGFydCB7XG4gIGNvbnN0cnVjdG9yKG9wdHM9e30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRTZWNvbmRzKHRoaXMuZGF0ZS5nZXRTZWNvbmRzKCkgKyAxKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgdGhpcy5kYXRlLnNldFNlY29uZHModGhpcy5kYXRlLmdldFNlY29uZHMoKSAtIDEpO1xuICB9XG5cbiAgc2V0VG8odmFsKSB7XG4gICAgdGhpcy5kYXRlLnNldFNlY29uZHMocGFyc2VJbnQodmFsLnN1YnN0cigtMikpKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCBzID0gdGhpcy5kYXRlLmdldFNlY29uZHMoKTtcbiAgICByZXR1cm4gdGhpcy50b2tlbi5sZW5ndGggPiAxID8gU3RyaW5nKHMpLnBhZFN0YXJ0KDIsICcwJykgOiBzO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2Vjb25kcztcbiIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IERhdGVQYXJ0ID0gcmVxdWlyZSgnLi9kYXRlcGFydCcpO1xuXG5jbGFzcyBZZWFyIGV4dGVuZHMgRGF0ZVBhcnQge1xuICBjb25zdHJ1Y3RvcihvcHRzPXt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gIH1cblxuICB1cCgpIHtcbiAgICB0aGlzLmRhdGUuc2V0RnVsbFllYXIodGhpcy5kYXRlLmdldEZ1bGxZZWFyKCkgKyAxKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgdGhpcy5kYXRlLnNldEZ1bGxZZWFyKHRoaXMuZGF0ZS5nZXRGdWxsWWVhcigpIC0gMSk7XG4gIH1cblxuICBzZXRUbyh2YWwpIHtcbiAgICB0aGlzLmRhdGUuc2V0RnVsbFllYXIodmFsLnN1YnN0cigtNCkpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IHllYXIgPSBTdHJpbmcodGhpcy5kYXRlLmdldEZ1bGxZZWFyKCkpLnBhZFN0YXJ0KDQsICcwJyk7XG4gICAgcmV0dXJuIHRoaXMudG9rZW4ubGVuZ3RoID09PSAyID8geWVhci5zdWJzdHIoLTIpIDogeWVhcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFllYXI7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgRGF0ZVBhcnQ6IHJlcXVpcmUoJy4vZGF0ZXBhcnQnKSxcbiAgTWVyaWRpZW06IHJlcXVpcmUoJy4vbWVyaWRpZW0nKSxcbiAgRGF5OiByZXF1aXJlKCcuL2RheScpLFxuICBIb3VyczogcmVxdWlyZSgnLi9ob3VycycpLFxuICBNaWxsaXNlY29uZHM6IHJlcXVpcmUoJy4vbWlsbGlzZWNvbmRzJyksXG4gIE1pbnV0ZXM6IHJlcXVpcmUoJy4vbWludXRlcycpLFxuICBNb250aDogcmVxdWlyZSgnLi9tb250aCcpLFxuICBTZWNvbmRzOiByZXF1aXJlKCcuL3NlY29uZHMnKSxcbiAgWWVhcjogcmVxdWlyZSgnLi95ZWFyJyksXG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb2xvciA9IHJlcXVpcmUoJ2tsZXVyJyk7XG5jb25zdCBQcm9tcHQgPSByZXF1aXJlKCcuL3Byb21wdCcpO1xuY29uc3QgeyBzdHlsZSwgY2xlYXIsIGZpZ3VyZXMgfSA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcbmNvbnN0IHsgZXJhc2UsIGN1cnNvciB9ID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpO1xuY29uc3QgeyBEYXRlUGFydCwgTWVyaWRpZW0sIERheSwgSG91cnMsIE1pbGxpc2Vjb25kcywgTWludXRlcywgTW9udGgsIFNlY29uZHMsIFllYXIgfSA9IHJlcXVpcmUoJy4uL2RhdGVwYXJ0cycpO1xuXG5jb25zdCByZWdleCA9IC9cXFxcKC4pfFwiKCg/OlxcXFxbXCJcXFxcXXxbXlwiXSkrKVwifChEW0RvXT98ZHszLDR9fGQpfChNezEsNH0pfChZWSg/OllZKT8pfChbYUFdKXwoW0hoXXsxLDJ9KXwobXsxLDJ9KXwoc3sxLDJ9KXwoU3sxLDR9KXwuL2c7XG5jb25zdCByZWdleEdyb3VwcyA9IHtcbiAgMTogKHt0b2tlbn0pID0+IHRva2VuLnJlcGxhY2UoL1xcXFwoLikvZywgJyQxJyksXG4gIDI6IChvcHRzKSA9PiBuZXcgRGF5KG9wdHMpLCAvLyBEYXkgLy8gVE9ET1xuICAzOiAob3B0cykgPT4gbmV3IE1vbnRoKG9wdHMpLCAvLyBNb250aFxuICA0OiAob3B0cykgPT4gbmV3IFllYXIob3B0cyksIC8vIFllYXJcbiAgNTogKG9wdHMpID0+IG5ldyBNZXJpZGllbShvcHRzKSwgLy8gQU0vUE0gLy8gVE9ETyAoc3BlY2lhbClcbiAgNjogKG9wdHMpID0+IG5ldyBIb3VycyhvcHRzKSwgLy8gSG91cnNcbiAgNzogKG9wdHMpID0+IG5ldyBNaW51dGVzKG9wdHMpLCAvLyBNaW51dGVzXG4gIDg6IChvcHRzKSA9PiBuZXcgU2Vjb25kcyhvcHRzKSwgLy8gU2Vjb25kc1xuICA5OiAob3B0cykgPT4gbmV3IE1pbGxpc2Vjb25kcyhvcHRzKSwgLy8gRnJhY3Rpb25hbCBzZWNvbmRzXG59XG5cbmNvbnN0IGRmbHRMb2NhbGVzID0ge1xuICBtb250aHM6ICdKYW51YXJ5LEZlYnJ1YXJ5LE1hcmNoLEFwcmlsLE1heSxKdW5lLEp1bHksQXVndXN0LFNlcHRlbWJlcixPY3RvYmVyLE5vdmVtYmVyLERlY2VtYmVyJy5zcGxpdCgnLCcpLFxuICBtb250aHNTaG9ydDogJ0phbixGZWIsTWFyLEFwcixNYXksSnVuLEp1bCxBdWcsU2VwLE9jdCxOb3YsRGVjJy5zcGxpdCgnLCcpLFxuICB3ZWVrZGF5czogJ1N1bmRheSxNb25kYXksVHVlc2RheSxXZWRuZXNkYXksVGh1cnNkYXksRnJpZGF5LFNhdHVyZGF5Jy5zcGxpdCgnLCcpLFxuICB3ZWVrZGF5c1Nob3J0OiAnU3VuLE1vbixUdWUsV2VkLFRodSxGcmksU2F0Jy5zcGxpdCgnLCcpXG59XG5cblxuLyoqXG4gKiBEYXRlUHJvbXB0IEJhc2UgRWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG9wdHMubWVzc2FnZSBNZXNzYWdlXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMuaW5pdGlhbF0gSW5kZXggb2YgZGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLm1hc2tdIFRoZSBmb3JtYXQgbWFza1xuICogQHBhcmFtIHtvYmplY3R9IFtvcHRzLmxvY2FsZXNdIFRoZSBkYXRlIGxvY2FsZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5lcnJvcl0gVGhlIGVycm9yIG1lc3NhZ2Ugc2hvd24gb24gaW52YWxpZCB2YWx1ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMudmFsaWRhdGVdIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIHRoZSBzdWJtaXR0ZWQgdmFsdWVcbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICovXG5jbGFzcyBEYXRlUHJvbXB0IGV4dGVuZHMgUHJvbXB0IHtcbiAgY29uc3RydWN0b3Iob3B0cz17fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXMubXNnID0gb3B0cy5tZXNzYWdlO1xuICAgIHRoaXMuY3Vyc29yID0gMDtcbiAgICB0aGlzLnR5cGVkID0gJyc7XG4gICAgdGhpcy5sb2NhbGVzID0gT2JqZWN0LmFzc2lnbihkZmx0TG9jYWxlcywgb3B0cy5sb2NhbGVzKTtcbiAgICB0aGlzLl9kYXRlID0gb3B0cy5pbml0aWFsIHx8IG5ldyBEYXRlKCk7XG4gICAgdGhpcy5lcnJvck1zZyA9IG9wdHMuZXJyb3IgfHwgJ1BsZWFzZSBFbnRlciBBIFZhbGlkIFZhbHVlJztcbiAgICB0aGlzLnZhbGlkYXRvciA9IG9wdHMudmFsaWRhdGUgfHwgKCgpID0+IHRydWUpO1xuICAgIHRoaXMubWFzayA9IG9wdHMubWFzayB8fCAnWVlZWS1NTS1ERCBISDptbTpzcyc7XG4gICAgdGhpcy5jbGVhciA9IGNsZWFyKCcnLCB0aGlzLm91dC5jb2x1bW5zKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGVcbiAgfVxuXG4gIGdldCBkYXRlKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRlO1xuICB9XG5cbiAgc2V0IGRhdGUoZGF0ZSkge1xuICAgIGlmIChkYXRlKSB0aGlzLl9kYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkpO1xuICB9XG5cbiAgc2V0IG1hc2sobWFzaykge1xuICAgIGxldCByZXN1bHQ7XG4gICAgdGhpcy5wYXJ0cyA9IFtdO1xuICAgIHdoaWxlKHJlc3VsdCA9IHJlZ2V4LmV4ZWMobWFzaykpIHtcbiAgICAgIGxldCBtYXRjaCA9IHJlc3VsdC5zaGlmdCgpO1xuICAgICAgbGV0IGlkeCA9IHJlc3VsdC5maW5kSW5kZXgoZ3IgPT4gZ3IgIT0gbnVsbCk7XG4gICAgICB0aGlzLnBhcnRzLnB1c2goaWR4IGluIHJlZ2V4R3JvdXBzXG4gICAgICAgID8gcmVnZXhHcm91cHNbaWR4XSh7IHRva2VuOiByZXN1bHRbaWR4XSB8fCBtYXRjaCwgZGF0ZTogdGhpcy5kYXRlLCBwYXJ0czogdGhpcy5wYXJ0cywgbG9jYWxlczogdGhpcy5sb2NhbGVzIH0pXG4gICAgICAgIDogcmVzdWx0W2lkeF0gfHwgbWF0Y2gpO1xuICAgIH1cblxuICAgIGxldCBwYXJ0cyA9IHRoaXMucGFydHMucmVkdWNlKChhcnIsIGkpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgaSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIGFyclthcnIubGVuZ3RoIC0gMV0gPT09ICdzdHJpbmcnKVxuICAgICAgICBhcnJbYXJyLmxlbmd0aCAtIDFdICs9IGk7XG4gICAgICBlbHNlIGFyci5wdXNoKGkpO1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9LCBbXSk7XG5cbiAgICB0aGlzLnBhcnRzLnNwbGljZSgwKTtcbiAgICB0aGlzLnBhcnRzLnB1c2goLi4ucGFydHMpO1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuXG4gIG1vdmVDdXJzb3Iobikge1xuICAgIHRoaXMudHlwZWQgPSAnJztcbiAgICB0aGlzLmN1cnNvciA9IG47XG4gICAgdGhpcy5maXJlKCk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLm1vdmVDdXJzb3IodGhpcy5wYXJ0cy5maW5kSW5kZXgocCA9PiBwIGluc3RhbmNlb2YgRGF0ZVBhcnQpKTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZXhpdCgpIHtcbiAgICB0aGlzLmFib3J0KCk7XG4gIH1cblxuICBhYm9ydCgpIHtcbiAgICB0aGlzLmRvbmUgPSB0aGlzLmFib3J0ZWQgPSB0cnVlO1xuICAgIHRoaXMuZXJyb3IgPSBmYWxzZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICBhc3luYyB2YWxpZGF0ZSgpIHtcbiAgICBsZXQgdmFsaWQgPSBhd2FpdCB0aGlzLnZhbGlkYXRvcih0aGlzLnZhbHVlKTtcbiAgICBpZiAodHlwZW9mIHZhbGlkID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5lcnJvck1zZyA9IHZhbGlkO1xuICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5lcnJvciA9ICF2YWxpZDtcbiAgfVxuXG4gIGFzeW5jIHN1Ym1pdCgpIHtcbiAgICBhd2FpdCB0aGlzLnZhbGlkYXRlKCk7XG4gICAgaWYgKHRoaXMuZXJyb3IpIHtcbiAgICAgIHRoaXMuY29sb3IgPSAncmVkJztcbiAgICAgIHRoaXMuZmlyZSgpO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICB0aGlzLmFib3J0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICB1cCgpIHtcbiAgICB0aGlzLnR5cGVkID0gJyc7XG4gICAgdGhpcy5wYXJ0c1t0aGlzLmN1cnNvcl0udXAoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLnR5cGVkID0gJyc7XG4gICAgdGhpcy5wYXJ0c1t0aGlzLmN1cnNvcl0uZG93bigpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBsZWZ0KCkge1xuICAgIGxldCBwcmV2ID0gdGhpcy5wYXJ0c1t0aGlzLmN1cnNvcl0ucHJldigpO1xuICAgIGlmIChwcmV2ID09IG51bGwpIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLm1vdmVDdXJzb3IodGhpcy5wYXJ0cy5pbmRleE9mKHByZXYpKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcmlnaHQoKSB7XG4gICAgbGV0IG5leHQgPSB0aGlzLnBhcnRzW3RoaXMuY3Vyc29yXS5uZXh0KCk7XG4gICAgaWYgKG5leHQgPT0gbnVsbCkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMubW92ZUN1cnNvcih0aGlzLnBhcnRzLmluZGV4T2YobmV4dCkpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBuZXh0KCkge1xuICAgIGxldCBuZXh0ID0gdGhpcy5wYXJ0c1t0aGlzLmN1cnNvcl0ubmV4dCgpO1xuICAgIHRoaXMubW92ZUN1cnNvcihuZXh0XG4gICAgICA/IHRoaXMucGFydHMuaW5kZXhPZihuZXh0KVxuICAgICAgOiB0aGlzLnBhcnRzLmZpbmRJbmRleCgocGFydCkgPT4gcGFydCBpbnN0YW5jZW9mIERhdGVQYXJ0KSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIF8oYykge1xuICAgIGlmICgvXFxkLy50ZXN0KGMpKSB7XG4gICAgICB0aGlzLnR5cGVkICs9IGM7XG4gICAgICB0aGlzLnBhcnRzW3RoaXMuY3Vyc29yXS5zZXRUbyh0aGlzLnR5cGVkKTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLmNsb3NlZCkgcmV0dXJuO1xuICAgIGlmICh0aGlzLmZpcnN0UmVuZGVyKSB0aGlzLm91dC53cml0ZShjdXJzb3IuaGlkZSk7XG4gICAgZWxzZSB0aGlzLm91dC53cml0ZShjbGVhcih0aGlzLm91dHB1dFRleHQsIHRoaXMub3V0LmNvbHVtbnMpKTtcbiAgICBzdXBlci5yZW5kZXIoKTtcblxuICAgIC8vIFByaW50IHByb21wdFxuICAgIHRoaXMub3V0cHV0VGV4dCA9IFtcbiAgICAgIHN0eWxlLnN5bWJvbCh0aGlzLmRvbmUsIHRoaXMuYWJvcnRlZCksXG4gICAgICBjb2xvci5ib2xkKHRoaXMubXNnKSxcbiAgICAgIHN0eWxlLmRlbGltaXRlcihmYWxzZSksXG4gICAgICB0aGlzLnBhcnRzLnJlZHVjZSgoYXJyLCBwLCBpZHgpID0+IGFyci5jb25jYXQoaWR4ID09PSB0aGlzLmN1cnNvciAmJiAhdGhpcy5kb25lID8gY29sb3IuY3lhbigpLnVuZGVybGluZShwLnRvU3RyaW5nKCkpIDogcCksIFtdKVxuICAgICAgICAgIC5qb2luKCcnKVxuICAgIF0uam9pbignICcpO1xuXG4gICAgLy8gUHJpbnQgZXJyb3JcbiAgICBpZiAodGhpcy5lcnJvcikge1xuICAgICAgdGhpcy5vdXRwdXRUZXh0ICs9IHRoaXMuZXJyb3JNc2cuc3BsaXQoJ1xcbicpLnJlZHVjZShcbiAgICAgICAgICAoYSwgbCwgaSkgPT4gYSArIGBcXG4ke2kgPyBgIGAgOiBmaWd1cmVzLnBvaW50ZXJTbWFsbH0gJHtjb2xvci5yZWQoKS5pdGFsaWMobCl9YCwgYGApO1xuICAgIH1cblxuICAgIHRoaXMub3V0LndyaXRlKGVyYXNlLmxpbmUgKyBjdXJzb3IudG8oMCkgKyB0aGlzLm91dHB1dFRleHQpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0ZVByb21wdDtcbiIsICJjb25zdCBjb2xvciA9IHJlcXVpcmUoJ2tsZXVyJyk7XG5jb25zdCBQcm9tcHQgPSByZXF1aXJlKCcuL3Byb21wdCcpO1xuY29uc3QgeyBjdXJzb3IsIGVyYXNlIH0gPSByZXF1aXJlKCdzaXN0ZXJhbnNpJyk7XG5jb25zdCB7IHN0eWxlLCBmaWd1cmVzLCBjbGVhciwgbGluZXMgfSA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcblxuY29uc3QgaXNOdW1iZXIgPSAvWzAtOV0vO1xuY29uc3QgaXNEZWYgPSBhbnkgPT4gYW55ICE9PSB1bmRlZmluZWQ7XG5jb25zdCByb3VuZCA9IChudW1iZXIsIHByZWNpc2lvbikgPT4ge1xuICBsZXQgZmFjdG9yID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbik7XG4gIHJldHVybiBNYXRoLnJvdW5kKG51bWJlciAqIGZhY3RvcikgLyBmYWN0b3I7XG59XG5cbi8qKlxuICogTnVtYmVyUHJvbXB0IEJhc2UgRWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG9wdHMubWVzc2FnZSBNZXNzYWdlXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuc3R5bGU9J2RlZmF1bHQnXSBSZW5kZXIgc3R5bGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5pbml0aWFsXSBEZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMubWF4PStJbmZpbml0eV0gTWF4IHZhbHVlXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMubWluPS1JbmZpbml0eV0gTWluIHZhbHVlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRzLmZsb2F0PWZhbHNlXSBQYXJzZSBpbnB1dCBhcyBmbG9hdHNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5yb3VuZD0yXSBSb3VuZCBmbG9hdHMgdG8geCBkZWNpbWFsc1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmluY3JlbWVudD0xXSBOdW1iZXIgdG8gaW5jcmVtZW50IGJ5IHdoZW4gdXNpbmcgYXJyb3cta2V5c1xuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMudmFsaWRhdGVdIFZhbGlkYXRlIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5lcnJvcl0gVGhlIGludmFsaWQgZXJyb3IgbGFiZWxcbiAqL1xuY2xhc3MgTnVtYmVyUHJvbXB0IGV4dGVuZHMgUHJvbXB0IHtcbiAgY29uc3RydWN0b3Iob3B0cz17fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXMudHJhbnNmb3JtID0gc3R5bGUucmVuZGVyKG9wdHMuc3R5bGUpO1xuICAgIHRoaXMubXNnID0gb3B0cy5tZXNzYWdlO1xuICAgIHRoaXMuaW5pdGlhbCA9IGlzRGVmKG9wdHMuaW5pdGlhbCkgPyBvcHRzLmluaXRpYWwgOiAnJztcbiAgICB0aGlzLmZsb2F0ID0gISFvcHRzLmZsb2F0O1xuICAgIHRoaXMucm91bmQgPSBvcHRzLnJvdW5kIHx8IDI7XG4gICAgdGhpcy5pbmMgPSBvcHRzLmluY3JlbWVudCB8fCAxO1xuICAgIHRoaXMubWluID0gaXNEZWYob3B0cy5taW4pID8gb3B0cy5taW4gOiAtSW5maW5pdHk7XG4gICAgdGhpcy5tYXggPSBpc0RlZihvcHRzLm1heCkgPyBvcHRzLm1heCA6IEluZmluaXR5O1xuICAgIHRoaXMuZXJyb3JNc2cgPSBvcHRzLmVycm9yIHx8IGBQbGVhc2UgRW50ZXIgQSBWYWxpZCBWYWx1ZWA7XG4gICAgdGhpcy52YWxpZGF0b3IgPSBvcHRzLnZhbGlkYXRlIHx8ICgoKSA9PiB0cnVlKTtcbiAgICB0aGlzLmNvbG9yID0gYGN5YW5gO1xuICAgIHRoaXMudmFsdWUgPSBgYDtcbiAgICB0aGlzLnR5cGVkID0gYGA7XG4gICAgdGhpcy5sYXN0SGl0ID0gMDtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgc2V0IHZhbHVlKHYpIHtcbiAgICBpZiAoIXYgJiYgdiAhPT0gMCkge1xuICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICB0aGlzLnJlbmRlcmVkID0gY29sb3IuZ3JheSh0aGlzLnRyYW5zZm9ybS5yZW5kZXIoYCR7dGhpcy5pbml0aWFsfWApKTtcbiAgICAgIHRoaXMuX3ZhbHVlID0gYGA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSBmYWxzZTtcbiAgICAgIHRoaXMucmVuZGVyZWQgPSB0aGlzLnRyYW5zZm9ybS5yZW5kZXIoYCR7cm91bmQodiwgdGhpcy5yb3VuZCl9YCk7XG4gICAgICB0aGlzLl92YWx1ZSA9IHJvdW5kKHYsIHRoaXMucm91bmQpO1xuICAgIH1cbiAgICB0aGlzLmZpcmUoKTtcbiAgfVxuXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBwYXJzZSh4KSB7XG4gICAgcmV0dXJuIHRoaXMuZmxvYXQgPyBwYXJzZUZsb2F0KHgpIDogcGFyc2VJbnQoeCk7XG4gIH1cblxuICB2YWxpZChjKSB7XG4gICAgcmV0dXJuIGMgPT09IGAtYCB8fCBjID09PSBgLmAgJiYgdGhpcy5mbG9hdCB8fCBpc051bWJlci50ZXN0KGMpXG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnR5cGVkID0gYGA7XG4gICAgdGhpcy52YWx1ZSA9IGBgO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBleGl0KCkge1xuICAgIHRoaXMuYWJvcnQoKTtcbiAgfVxuXG4gIGFib3J0KCkge1xuICAgIGxldCB4ID0gdGhpcy52YWx1ZTtcbiAgICB0aGlzLnZhbHVlID0geCAhPT0gYGAgPyB4IDogdGhpcy5pbml0aWFsO1xuICAgIHRoaXMuZG9uZSA9IHRoaXMuYWJvcnRlZCA9IHRydWU7XG4gICAgdGhpcy5lcnJvciA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoYFxcbmApO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIGFzeW5jIHZhbGlkYXRlKCkge1xuICAgIGxldCB2YWxpZCA9IGF3YWl0IHRoaXMudmFsaWRhdG9yKHRoaXMudmFsdWUpO1xuICAgIGlmICh0eXBlb2YgdmFsaWQgPT09IGBzdHJpbmdgKSB7XG4gICAgICB0aGlzLmVycm9yTXNnID0gdmFsaWQ7XG4gICAgICB2YWxpZCA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmVycm9yID0gIXZhbGlkO1xuICB9XG5cbiAgYXN5bmMgc3VibWl0KCkge1xuICAgIGF3YWl0IHRoaXMudmFsaWRhdGUoKTtcbiAgICBpZiAodGhpcy5lcnJvcikge1xuICAgICAgdGhpcy5jb2xvciA9IGByZWRgO1xuICAgICAgdGhpcy5maXJlKCk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgeCA9IHRoaXMudmFsdWU7XG4gICAgdGhpcy52YWx1ZSA9IHggIT09IGBgID8geCA6IHRoaXMuaW5pdGlhbDtcbiAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgIHRoaXMuYWJvcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuZXJyb3IgPSBmYWxzZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKGBcXG5gKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICB1cCgpIHtcbiAgICB0aGlzLnR5cGVkID0gYGA7XG4gICAgaWYodGhpcy52YWx1ZSA9PT0gJycpIHtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLm1pbiAtIHRoaXMuaW5jO1xuICAgIH1cbiAgICBpZiAodGhpcy52YWx1ZSA+PSB0aGlzLm1heCkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMudmFsdWUgKz0gdGhpcy5pbmM7XG4gICAgdGhpcy5jb2xvciA9IGBjeWFuYDtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLnR5cGVkID0gYGA7XG4gICAgaWYodGhpcy52YWx1ZSA9PT0gJycpIHtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLm1pbiArIHRoaXMuaW5jO1xuICAgIH1cbiAgICBpZiAodGhpcy52YWx1ZSA8PSB0aGlzLm1pbikgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMudmFsdWUgLT0gdGhpcy5pbmM7XG4gICAgdGhpcy5jb2xvciA9IGBjeWFuYDtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZGVsZXRlKCkge1xuICAgIGxldCB2YWwgPSB0aGlzLnZhbHVlLnRvU3RyaW5nKCk7XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5wYXJzZSgodmFsID0gdmFsLnNsaWNlKDAsIC0xKSkpIHx8IGBgO1xuICAgIGlmICh0aGlzLnZhbHVlICE9PSAnJyAmJiB0aGlzLnZhbHVlIDwgdGhpcy5taW4pIHtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLm1pbjtcbiAgICB9XG4gICAgdGhpcy5jb2xvciA9IGBjeWFuYDtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbmV4dCgpIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5pbml0aWFsO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBfKGMsIGtleSkge1xuICAgIGlmICghdGhpcy52YWxpZChjKSkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuXG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBpZiAobm93IC0gdGhpcy5sYXN0SGl0ID4gMTAwMCkgdGhpcy50eXBlZCA9IGBgOyAvLyAxcyBlbGFwc2VkXG4gICAgdGhpcy50eXBlZCArPSBjO1xuICAgIHRoaXMubGFzdEhpdCA9IG5vdztcbiAgICB0aGlzLmNvbG9yID0gYGN5YW5gO1xuXG4gICAgaWYgKGMgPT09IGAuYCkgcmV0dXJuIHRoaXMuZmlyZSgpO1xuXG4gICAgdGhpcy52YWx1ZSA9IE1hdGgubWluKHRoaXMucGFyc2UodGhpcy50eXBlZCksIHRoaXMubWF4KTtcbiAgICBpZiAodGhpcy52YWx1ZSA+IHRoaXMubWF4KSB0aGlzLnZhbHVlID0gdGhpcy5tYXg7XG4gICAgaWYgKHRoaXMudmFsdWUgPCB0aGlzLm1pbikgdGhpcy52YWx1ZSA9IHRoaXMubWluO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuY2xvc2VkKSByZXR1cm47XG4gICAgaWYgKCF0aGlzLmZpcnN0UmVuZGVyKSB7XG4gICAgICBpZiAodGhpcy5vdXRwdXRFcnJvcilcbiAgICAgICAgdGhpcy5vdXQud3JpdGUoY3Vyc29yLmRvd24obGluZXModGhpcy5vdXRwdXRFcnJvciwgdGhpcy5vdXQuY29sdW1ucykgLSAxKSArIGNsZWFyKHRoaXMub3V0cHV0RXJyb3IsIHRoaXMub3V0LmNvbHVtbnMpKTtcbiAgICAgIHRoaXMub3V0LndyaXRlKGNsZWFyKHRoaXMub3V0cHV0VGV4dCwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgIH1cbiAgICBzdXBlci5yZW5kZXIoKTtcbiAgICB0aGlzLm91dHB1dEVycm9yID0gJyc7XG5cbiAgICAvLyBQcmludCBwcm9tcHRcbiAgICB0aGlzLm91dHB1dFRleHQgPSBbXG4gICAgICBzdHlsZS5zeW1ib2wodGhpcy5kb25lLCB0aGlzLmFib3J0ZWQpLFxuICAgICAgY29sb3IuYm9sZCh0aGlzLm1zZyksXG4gICAgICBzdHlsZS5kZWxpbWl0ZXIodGhpcy5kb25lKSxcbiAgICAgICF0aGlzLmRvbmUgfHwgKCF0aGlzLmRvbmUgJiYgIXRoaXMucGxhY2Vob2xkZXIpXG4gICAgICAgICAgPyBjb2xvclt0aGlzLmNvbG9yXSgpLnVuZGVybGluZSh0aGlzLnJlbmRlcmVkKSA6IHRoaXMucmVuZGVyZWRcbiAgICBdLmpvaW4oYCBgKTtcblxuICAgIC8vIFByaW50IGVycm9yXG4gICAgaWYgKHRoaXMuZXJyb3IpIHtcbiAgICAgIHRoaXMub3V0cHV0RXJyb3IgKz0gdGhpcy5lcnJvck1zZy5zcGxpdChgXFxuYClcbiAgICAgICAgICAucmVkdWNlKChhLCBsLCBpKSA9PiBhICsgYFxcbiR7aSA/IGAgYCA6IGZpZ3VyZXMucG9pbnRlclNtYWxsfSAke2NvbG9yLnJlZCgpLml0YWxpYyhsKX1gLCBgYCk7XG4gICAgfVxuXG4gICAgdGhpcy5vdXQud3JpdGUoZXJhc2UubGluZSArIGN1cnNvci50bygwKSArIHRoaXMub3V0cHV0VGV4dCArIGN1cnNvci5zYXZlICsgdGhpcy5vdXRwdXRFcnJvciArIGN1cnNvci5yZXN0b3JlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE51bWJlclByb21wdDtcbiIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNvbG9yID0gcmVxdWlyZSgna2xldXInKTtcbmNvbnN0IHsgY3Vyc29yIH0gPSByZXF1aXJlKCdzaXN0ZXJhbnNpJyk7XG5jb25zdCBQcm9tcHQgPSByZXF1aXJlKCcuL3Byb21wdCcpO1xuY29uc3QgeyBjbGVhciwgZmlndXJlcywgc3R5bGUsIHdyYXAsIGVudHJpZXNUb0Rpc3BsYXkgfSA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcblxuLyoqXG4gKiBNdWx0aXNlbGVjdFByb21wdCBCYXNlIEVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRzLm1lc3NhZ2UgTWVzc2FnZVxuICogQHBhcmFtIHtBcnJheX0gb3B0cy5jaG9pY2VzIEFycmF5IG9mIGNob2ljZSBvYmplY3RzXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuaGludF0gSGludCB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMud2Fybl0gSGludCBzaG93biBmb3IgZGlzYWJsZWQgY2hvaWNlc1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLm1heF0gTWF4IGNob2ljZXNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5jdXJzb3I9MF0gQ3Vyc29yIHN0YXJ0IHBvc2l0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMub3B0aW9uc1BlclBhZ2U9MTBdIE1heCBvcHRpb25zIHRvIGRpc3BsYXkgYXQgb25jZVxuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKi9cbmNsYXNzIE11bHRpc2VsZWN0UHJvbXB0IGV4dGVuZHMgUHJvbXB0IHtcbiAgY29uc3RydWN0b3Iob3B0cz17fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXMubXNnID0gb3B0cy5tZXNzYWdlO1xuICAgIHRoaXMuY3Vyc29yID0gb3B0cy5jdXJzb3IgfHwgMDtcbiAgICB0aGlzLnNjcm9sbEluZGV4ID0gb3B0cy5jdXJzb3IgfHwgMDtcbiAgICB0aGlzLmhpbnQgPSBvcHRzLmhpbnQgfHwgJyc7XG4gICAgdGhpcy53YXJuID0gb3B0cy53YXJuIHx8ICctIFRoaXMgb3B0aW9uIGlzIGRpc2FibGVkIC0nO1xuICAgIHRoaXMubWluU2VsZWN0ZWQgPSBvcHRzLm1pbjtcbiAgICB0aGlzLnNob3dNaW5FcnJvciA9IGZhbHNlO1xuICAgIHRoaXMubWF4Q2hvaWNlcyA9IG9wdHMubWF4O1xuICAgIHRoaXMuaW5zdHJ1Y3Rpb25zID0gb3B0cy5pbnN0cnVjdGlvbnM7XG4gICAgdGhpcy5vcHRpb25zUGVyUGFnZSA9IG9wdHMub3B0aW9uc1BlclBhZ2UgfHwgMTA7XG4gICAgdGhpcy52YWx1ZSA9IG9wdHMuY2hvaWNlcy5tYXAoKGNoLCBpZHgpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgY2ggPT09ICdzdHJpbmcnKVxuICAgICAgICBjaCA9IHt0aXRsZTogY2gsIHZhbHVlOiBpZHh9O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGl0bGU6IGNoICYmIChjaC50aXRsZSB8fCBjaC52YWx1ZSB8fCBjaCksXG4gICAgICAgIGRlc2NyaXB0aW9uOiBjaCAmJiBjaC5kZXNjcmlwdGlvbixcbiAgICAgICAgdmFsdWU6IGNoICYmIChjaC52YWx1ZSA9PT0gdW5kZWZpbmVkID8gaWR4IDogY2gudmFsdWUpLFxuICAgICAgICBzZWxlY3RlZDogY2ggJiYgY2guc2VsZWN0ZWQsXG4gICAgICAgIGRpc2FibGVkOiBjaCAmJiBjaC5kaXNhYmxlZFxuICAgICAgfTtcbiAgICB9KTtcbiAgICB0aGlzLmNsZWFyID0gY2xlYXIoJycsIHRoaXMub3V0LmNvbHVtbnMpO1xuICAgIGlmICghb3B0cy5vdmVycmlkZVJlbmRlcikge1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnZhbHVlLm1hcCh2ID0+ICF2LnNlbGVjdGVkKTtcbiAgICB0aGlzLmN1cnNvciA9IDA7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHNlbGVjdGVkKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlLmZpbHRlcih2ID0+IHYuc2VsZWN0ZWQpO1xuICB9XG5cbiAgZXhpdCgpIHtcbiAgICB0aGlzLmFib3J0KCk7XG4gIH1cblxuICBhYm9ydCgpIHtcbiAgICB0aGlzLmRvbmUgPSB0aGlzLmFib3J0ZWQgPSB0cnVlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIHN1Ym1pdCgpIHtcbiAgICBjb25zdCBzZWxlY3RlZCA9IHRoaXMudmFsdWVcbiAgICAgIC5maWx0ZXIoZSA9PiBlLnNlbGVjdGVkKTtcbiAgICBpZiAodGhpcy5taW5TZWxlY3RlZCAmJiBzZWxlY3RlZC5sZW5ndGggPCB0aGlzLm1pblNlbGVjdGVkKSB7XG4gICAgICB0aGlzLnNob3dNaW5FcnJvciA9IHRydWU7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgICAgdGhpcy5hYm9ydGVkID0gZmFsc2U7XG4gICAgICB0aGlzLmZpcmUoKTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICB0aGlzLm91dC53cml0ZSgnXFxuJyk7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgZmlyc3QoKSB7XG4gICAgdGhpcy5jdXJzb3IgPSAwO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBsYXN0KCkge1xuICAgIHRoaXMuY3Vyc29yID0gdGhpcy52YWx1ZS5sZW5ndGggLSAxO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cbiAgbmV4dCgpIHtcbiAgICB0aGlzLmN1cnNvciA9ICh0aGlzLmN1cnNvciArIDEpICUgdGhpcy52YWx1ZS5sZW5ndGg7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIGlmICh0aGlzLmN1cnNvciA9PT0gMCkge1xuICAgICAgdGhpcy5jdXJzb3IgPSB0aGlzLnZhbHVlLmxlbmd0aCAtIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3Vyc29yLS07XG4gICAgfVxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIGlmICh0aGlzLmN1cnNvciA9PT0gdGhpcy52YWx1ZS5sZW5ndGggLSAxKSB7XG4gICAgICB0aGlzLmN1cnNvciA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3Vyc29yKys7XG4gICAgfVxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBsZWZ0KCkge1xuICAgIHRoaXMudmFsdWVbdGhpcy5jdXJzb3JdLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHJpZ2h0KCkge1xuICAgIGlmICh0aGlzLnZhbHVlLmZpbHRlcihlID0+IGUuc2VsZWN0ZWQpLmxlbmd0aCA+PSB0aGlzLm1heENob2ljZXMpIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLnZhbHVlW3RoaXMuY3Vyc29yXS5zZWxlY3RlZCA9IHRydWU7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGhhbmRsZVNwYWNlVG9nZ2xlKCkge1xuICAgIGNvbnN0IHYgPSB0aGlzLnZhbHVlW3RoaXMuY3Vyc29yXTtcblxuICAgIGlmICh2LnNlbGVjdGVkKSB7XG4gICAgICB2LnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH0gZWxzZSBpZiAodi5kaXNhYmxlZCB8fCB0aGlzLnZhbHVlLmZpbHRlcihlID0+IGUuc2VsZWN0ZWQpLmxlbmd0aCA+PSB0aGlzLm1heENob2ljZXMpIHtcbiAgICAgIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdi5zZWxlY3RlZCA9IHRydWU7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgfVxuXG4gIHRvZ2dsZUFsbCgpIHtcbiAgICBpZiAodGhpcy5tYXhDaG9pY2VzICE9PSB1bmRlZmluZWQgfHwgdGhpcy52YWx1ZVt0aGlzLmN1cnNvcl0uZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB9XG5cbiAgICBjb25zdCBuZXdTZWxlY3RlZCA9ICF0aGlzLnZhbHVlW3RoaXMuY3Vyc29yXS5zZWxlY3RlZDtcbiAgICB0aGlzLnZhbHVlLmZpbHRlcih2ID0+ICF2LmRpc2FibGVkKS5mb3JFYWNoKHYgPT4gdi5zZWxlY3RlZCA9IG5ld1NlbGVjdGVkKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgXyhjLCBrZXkpIHtcbiAgICBpZiAoYyA9PT0gJyAnKSB7XG4gICAgICB0aGlzLmhhbmRsZVNwYWNlVG9nZ2xlKCk7XG4gICAgfSBlbHNlIGlmIChjID09PSAnYScpIHtcbiAgICAgIHRoaXMudG9nZ2xlQWxsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJJbnN0cnVjdGlvbnMoKSB7XG4gICAgaWYgKHRoaXMuaW5zdHJ1Y3Rpb25zID09PSB1bmRlZmluZWQgfHwgdGhpcy5pbnN0cnVjdGlvbnMpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5pbnN0cnVjdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluc3RydWN0aW9ucztcbiAgICAgIH1cbiAgICAgIHJldHVybiAnXFxuSW5zdHJ1Y3Rpb25zOlxcbidcbiAgICAgICAgKyBgICAgICR7ZmlndXJlcy5hcnJvd1VwfS8ke2ZpZ3VyZXMuYXJyb3dEb3dufTogSGlnaGxpZ2h0IG9wdGlvblxcbmBcbiAgICAgICAgKyBgICAgICR7ZmlndXJlcy5hcnJvd0xlZnR9LyR7ZmlndXJlcy5hcnJvd1JpZ2h0fS9bc3BhY2VdOiBUb2dnbGUgc2VsZWN0aW9uXFxuYFxuICAgICAgICArICh0aGlzLm1heENob2ljZXMgPT09IHVuZGVmaW5lZCA/IGAgICAgYTogVG9nZ2xlIGFsbFxcbmAgOiAnJylcbiAgICAgICAgKyBgICAgIGVudGVyL3JldHVybjogQ29tcGxldGUgYW5zd2VyYDtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgcmVuZGVyT3B0aW9uKGN1cnNvciwgdiwgaSwgYXJyb3dJbmRpY2F0b3IpIHtcbiAgICBjb25zdCBwcmVmaXggPSAodi5zZWxlY3RlZCA/IGNvbG9yLmdyZWVuKGZpZ3VyZXMucmFkaW9PbikgOiBmaWd1cmVzLnJhZGlvT2ZmKSArICcgJyArIGFycm93SW5kaWNhdG9yICsgJyAnO1xuICAgIGxldCB0aXRsZSwgZGVzYztcblxuICAgIGlmICh2LmRpc2FibGVkKSB7XG4gICAgICB0aXRsZSA9IGN1cnNvciA9PT0gaSA/IGNvbG9yLmdyYXkoKS51bmRlcmxpbmUodi50aXRsZSkgOiBjb2xvci5zdHJpa2V0aHJvdWdoKCkuZ3JheSh2LnRpdGxlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGl0bGUgPSBjdXJzb3IgPT09IGkgPyBjb2xvci5jeWFuKCkudW5kZXJsaW5lKHYudGl0bGUpIDogdi50aXRsZTtcbiAgICAgIGlmIChjdXJzb3IgPT09IGkgJiYgdi5kZXNjcmlwdGlvbikge1xuICAgICAgICBkZXNjID0gYCAtICR7di5kZXNjcmlwdGlvbn1gO1xuICAgICAgICBpZiAocHJlZml4Lmxlbmd0aCArIHRpdGxlLmxlbmd0aCArIGRlc2MubGVuZ3RoID49IHRoaXMub3V0LmNvbHVtbnNcbiAgICAgICAgICB8fCB2LmRlc2NyaXB0aW9uLnNwbGl0KC9cXHI/XFxuLykubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGRlc2MgPSAnXFxuJyArIHdyYXAodi5kZXNjcmlwdGlvbiwgeyBtYXJnaW46IHByZWZpeC5sZW5ndGgsIHdpZHRoOiB0aGlzLm91dC5jb2x1bW5zIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWZpeCArIHRpdGxlICsgY29sb3IuZ3JheShkZXNjIHx8ICcnKTtcbiAgfVxuXG4gIC8vIHNoYXJlZCB3aXRoIGF1dG9jb21wbGV0ZU11bHRpc2VsZWN0XG4gIHBhZ2luYXRlT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gY29sb3IucmVkKCdObyBtYXRjaGVzIGZvciB0aGlzIHF1ZXJ5LicpO1xuICAgIH1cblxuICAgIGxldCB7IHN0YXJ0SW5kZXgsIGVuZEluZGV4IH0gPSBlbnRyaWVzVG9EaXNwbGF5KHRoaXMuY3Vyc29yLCBvcHRpb25zLmxlbmd0aCwgdGhpcy5vcHRpb25zUGVyUGFnZSk7XG4gICAgbGV0IHByZWZpeCwgc3R5bGVkT3B0aW9ucyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0SW5kZXg7IGkgPCBlbmRJbmRleDsgaSsrKSB7XG4gICAgICBpZiAoaSA9PT0gc3RhcnRJbmRleCAmJiBzdGFydEluZGV4ID4gMCkge1xuICAgICAgICBwcmVmaXggPSBmaWd1cmVzLmFycm93VXA7XG4gICAgICB9IGVsc2UgaWYgKGkgPT09IGVuZEluZGV4IC0gMSAmJiBlbmRJbmRleCA8IG9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgIHByZWZpeCA9IGZpZ3VyZXMuYXJyb3dEb3duO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJlZml4ID0gJyAnO1xuICAgICAgfVxuICAgICAgc3R5bGVkT3B0aW9ucy5wdXNoKHRoaXMucmVuZGVyT3B0aW9uKHRoaXMuY3Vyc29yLCBvcHRpb25zW2ldLCBpLCBwcmVmaXgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJ1xcbicgKyBzdHlsZWRPcHRpb25zLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgLy8gc2hhcmVkIHdpdGggYXV0b2NvbWxldGVNdWx0aXNlbGVjdFxuICByZW5kZXJPcHRpb25zKG9wdGlvbnMpIHtcbiAgICBpZiAoIXRoaXMuZG9uZSkge1xuICAgICAgcmV0dXJuIHRoaXMucGFnaW5hdGVPcHRpb25zKG9wdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICByZW5kZXJEb25lT3JJbnN0cnVjdGlvbnMoKSB7XG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWVcbiAgICAgICAgLmZpbHRlcihlID0+IGUuc2VsZWN0ZWQpXG4gICAgICAgIC5tYXAodiA9PiB2LnRpdGxlKVxuICAgICAgICAuam9pbignLCAnKTtcbiAgICB9XG5cbiAgICBjb25zdCBvdXRwdXQgPSBbY29sb3IuZ3JheSh0aGlzLmhpbnQpLCB0aGlzLnJlbmRlckluc3RydWN0aW9ucygpXTtcblxuICAgIGlmICh0aGlzLnZhbHVlW3RoaXMuY3Vyc29yXS5kaXNhYmxlZCkge1xuICAgICAgb3V0cHV0LnB1c2goY29sb3IueWVsbG93KHRoaXMud2FybikpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0LmpvaW4oJyAnKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5jbG9zZWQpIHJldHVybjtcbiAgICBpZiAodGhpcy5maXJzdFJlbmRlcikgdGhpcy5vdXQud3JpdGUoY3Vyc29yLmhpZGUpO1xuICAgIHN1cGVyLnJlbmRlcigpO1xuXG4gICAgLy8gcHJpbnQgcHJvbXB0XG4gICAgbGV0IHByb21wdCA9IFtcbiAgICAgIHN0eWxlLnN5bWJvbCh0aGlzLmRvbmUsIHRoaXMuYWJvcnRlZCksXG4gICAgICBjb2xvci5ib2xkKHRoaXMubXNnKSxcbiAgICAgIHN0eWxlLmRlbGltaXRlcihmYWxzZSksXG4gICAgICB0aGlzLnJlbmRlckRvbmVPckluc3RydWN0aW9ucygpXG4gICAgXS5qb2luKCcgJyk7XG4gICAgaWYgKHRoaXMuc2hvd01pbkVycm9yKSB7XG4gICAgICBwcm9tcHQgKz0gY29sb3IucmVkKGBZb3UgbXVzdCBzZWxlY3QgYSBtaW5pbXVtIG9mICR7dGhpcy5taW5TZWxlY3RlZH0gY2hvaWNlcy5gKTtcbiAgICAgIHRoaXMuc2hvd01pbkVycm9yID0gZmFsc2U7XG4gICAgfVxuICAgIHByb21wdCArPSB0aGlzLnJlbmRlck9wdGlvbnModGhpcy52YWx1ZSk7XG5cbiAgICB0aGlzLm91dC53cml0ZSh0aGlzLmNsZWFyICsgcHJvbXB0KTtcbiAgICB0aGlzLmNsZWFyID0gY2xlYXIocHJvbXB0LCB0aGlzLm91dC5jb2x1bW5zKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE11bHRpc2VsZWN0UHJvbXB0O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY29sb3IgPSByZXF1aXJlKCdrbGV1cicpO1xuY29uc3QgUHJvbXB0ID0gcmVxdWlyZSgnLi9wcm9tcHQnKTtcbmNvbnN0IHsgZXJhc2UsIGN1cnNvciB9ID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpO1xuY29uc3QgeyBzdHlsZSwgY2xlYXIsIGZpZ3VyZXMsIHdyYXAsIGVudHJpZXNUb0Rpc3BsYXkgfSA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcblxuY29uc3QgZ2V0VmFsID0gKGFyciwgaSkgPT4gYXJyW2ldICYmIChhcnJbaV0udmFsdWUgfHwgYXJyW2ldLnRpdGxlIHx8IGFycltpXSk7XG5jb25zdCBnZXRUaXRsZSA9IChhcnIsIGkpID0+IGFycltpXSAmJiAoYXJyW2ldLnRpdGxlIHx8IGFycltpXS52YWx1ZSB8fCBhcnJbaV0pO1xuY29uc3QgZ2V0SW5kZXggPSAoYXJyLCB2YWxPclRpdGxlKSA9PiB7XG4gIGNvbnN0IGluZGV4ID0gYXJyLmZpbmRJbmRleChlbCA9PiBlbC52YWx1ZSA9PT0gdmFsT3JUaXRsZSB8fCBlbC50aXRsZSA9PT0gdmFsT3JUaXRsZSk7XG4gIHJldHVybiBpbmRleCA+IC0xID8gaW5kZXggOiB1bmRlZmluZWQ7XG59O1xuXG4vKipcbiAqIFRleHRQcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7QXJyYXl9IG9wdHMuY2hvaWNlcyBBcnJheSBvZiBhdXRvLWNvbXBsZXRlIGNob2ljZXMgb2JqZWN0c1xuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMuc3VnZ2VzdF0gRmlsdGVyIGZ1bmN0aW9uLiBEZWZhdWx0cyB0byBzb3J0IGJ5IHRpdGxlXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMubGltaXQ9MTBdIE1heCBudW1iZXIgb2YgcmVzdWx0cyB0byBzaG93XG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMuY3Vyc29yPTBdIEN1cnNvciBzdGFydCBwb3NpdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLnN0eWxlPSdkZWZhdWx0J10gUmVuZGVyIHN0eWxlXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuZmFsbGJhY2tdIEZhbGxiYWNrIG1lc3NhZ2UgLSBpbml0aWFsIHRvIGRlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5pbml0aWFsXSBJbmRleCBvZiB0aGUgZGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0cy5jbGVhckZpcnN0XSBUaGUgZmlyc3QgRVNDQVBFIGtleXByZXNzIHdpbGwgY2xlYXIgdGhlIGlucHV0XG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5ub01hdGNoZXNdIFRoZSBubyBtYXRjaGVzIGZvdW5kIGxhYmVsXG4gKi9cbmNsYXNzIEF1dG9jb21wbGV0ZVByb21wdCBleHRlbmRzIFByb21wdCB7XG4gIGNvbnN0cnVjdG9yKG9wdHM9e30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgICB0aGlzLm1zZyA9IG9wdHMubWVzc2FnZTtcbiAgICB0aGlzLnN1Z2dlc3QgPSBvcHRzLnN1Z2dlc3Q7XG4gICAgdGhpcy5jaG9pY2VzID0gb3B0cy5jaG9pY2VzO1xuICAgIHRoaXMuaW5pdGlhbCA9IHR5cGVvZiBvcHRzLmluaXRpYWwgPT09ICdudW1iZXInXG4gICAgICA/IG9wdHMuaW5pdGlhbFxuICAgICAgOiBnZXRJbmRleChvcHRzLmNob2ljZXMsIG9wdHMuaW5pdGlhbCk7XG4gICAgdGhpcy5zZWxlY3QgPSB0aGlzLmluaXRpYWwgfHwgb3B0cy5jdXJzb3IgfHwgMDtcbiAgICB0aGlzLmkxOG4gPSB7IG5vTWF0Y2hlczogb3B0cy5ub01hdGNoZXMgfHwgJ25vIG1hdGNoZXMgZm91bmQnIH07XG4gICAgdGhpcy5mYWxsYmFjayA9IG9wdHMuZmFsbGJhY2sgfHwgdGhpcy5pbml0aWFsO1xuICAgIHRoaXMuY2xlYXJGaXJzdCA9IG9wdHMuY2xlYXJGaXJzdCB8fCBmYWxzZTtcbiAgICB0aGlzLnN1Z2dlc3Rpb25zID0gW107XG4gICAgdGhpcy5pbnB1dCA9ICcnO1xuICAgIHRoaXMubGltaXQgPSBvcHRzLmxpbWl0IHx8IDEwO1xuICAgIHRoaXMuY3Vyc29yID0gMDtcbiAgICB0aGlzLnRyYW5zZm9ybSA9IHN0eWxlLnJlbmRlcihvcHRzLnN0eWxlKTtcbiAgICB0aGlzLnNjYWxlID0gdGhpcy50cmFuc2Zvcm0uc2NhbGU7XG4gICAgdGhpcy5yZW5kZXIgPSB0aGlzLnJlbmRlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY29tcGxldGUgPSB0aGlzLmNvbXBsZXRlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jbGVhciA9IGNsZWFyKCcnLCB0aGlzLm91dC5jb2x1bW5zKTtcbiAgICB0aGlzLmNvbXBsZXRlKHRoaXMucmVuZGVyKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgc2V0IGZhbGxiYWNrKGZiKSB7XG4gICAgdGhpcy5fZmIgPSBOdW1iZXIuaXNTYWZlSW50ZWdlcihwYXJzZUludChmYikpID8gcGFyc2VJbnQoZmIpIDogZmI7XG4gIH1cblxuICBnZXQgZmFsbGJhY2soKSB7XG4gICAgbGV0IGNob2ljZTtcbiAgICBpZiAodHlwZW9mIHRoaXMuX2ZiID09PSAnbnVtYmVyJylcbiAgICAgIGNob2ljZSA9IHRoaXMuY2hvaWNlc1t0aGlzLl9mYl07XG4gICAgZWxzZSBpZiAodHlwZW9mIHRoaXMuX2ZiID09PSAnc3RyaW5nJylcbiAgICAgIGNob2ljZSA9IHsgdGl0bGU6IHRoaXMuX2ZiIH07XG4gICAgcmV0dXJuIGNob2ljZSB8fCB0aGlzLl9mYiB8fCB7IHRpdGxlOiB0aGlzLmkxOG4ubm9NYXRjaGVzIH07XG4gIH1cblxuICBtb3ZlU2VsZWN0KGkpIHtcbiAgICB0aGlzLnNlbGVjdCA9IGk7XG4gICAgaWYgKHRoaXMuc3VnZ2VzdGlvbnMubGVuZ3RoID4gMClcbiAgICAgIHRoaXMudmFsdWUgPSBnZXRWYWwodGhpcy5zdWdnZXN0aW9ucywgaSk7XG4gICAgZWxzZSB0aGlzLnZhbHVlID0gdGhpcy5mYWxsYmFjay52YWx1ZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgfVxuXG4gIGFzeW5jIGNvbXBsZXRlKGNiKSB7XG4gICAgY29uc3QgcCA9ICh0aGlzLmNvbXBsZXRpbmcgPSB0aGlzLnN1Z2dlc3QodGhpcy5pbnB1dCwgdGhpcy5jaG9pY2VzKSk7XG4gICAgY29uc3Qgc3VnZ2VzdGlvbnMgPSBhd2FpdCBwO1xuXG4gICAgaWYgKHRoaXMuY29tcGxldGluZyAhPT0gcCkgcmV0dXJuO1xuICAgIHRoaXMuc3VnZ2VzdGlvbnMgPSBzdWdnZXN0aW9uc1xuICAgICAgLm1hcCgocywgaSwgYXJyKSA9PiAoeyB0aXRsZTogZ2V0VGl0bGUoYXJyLCBpKSwgdmFsdWU6IGdldFZhbChhcnIsIGkpLCBkZXNjcmlwdGlvbjogcy5kZXNjcmlwdGlvbiB9KSk7XG4gICAgdGhpcy5jb21wbGV0aW5nID0gZmFsc2U7XG4gICAgY29uc3QgbCA9IE1hdGgubWF4KHN1Z2dlc3Rpb25zLmxlbmd0aCAtIDEsIDApO1xuICAgIHRoaXMubW92ZVNlbGVjdChNYXRoLm1pbihsLCB0aGlzLnNlbGVjdCkpO1xuXG4gICAgY2IgJiYgY2IoKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuaW5wdXQgPSAnJztcbiAgICB0aGlzLmNvbXBsZXRlKCgpID0+IHtcbiAgICAgIHRoaXMubW92ZVNlbGVjdCh0aGlzLmluaXRpYWwgIT09IHZvaWQgMCA/IHRoaXMuaW5pdGlhbCA6IDApO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9KTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZXhpdCgpIHtcbiAgICBpZiAodGhpcy5jbGVhckZpcnN0ICYmIHRoaXMuaW5wdXQubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRvbmUgPSB0aGlzLmV4aXRlZCA9IHRydWU7IFxuICAgICAgdGhpcy5hYm9ydGVkID0gZmFsc2U7XG4gICAgICB0aGlzLmZpcmUoKTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICB0aGlzLm91dC53cml0ZSgnXFxuJyk7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgYWJvcnQoKSB7XG4gICAgdGhpcy5kb25lID0gdGhpcy5hYm9ydGVkID0gdHJ1ZTtcbiAgICB0aGlzLmV4aXRlZCA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIHN1Ym1pdCgpIHtcbiAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgIHRoaXMuYWJvcnRlZCA9IHRoaXMuZXhpdGVkID0gZmFsc2U7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm91dC53cml0ZSgnXFxuJyk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgXyhjLCBrZXkpIHtcbiAgICBsZXQgczEgPSB0aGlzLmlucHV0LnNsaWNlKDAsIHRoaXMuY3Vyc29yKTtcbiAgICBsZXQgczIgPSB0aGlzLmlucHV0LnNsaWNlKHRoaXMuY3Vyc29yKTtcbiAgICB0aGlzLmlucHV0ID0gYCR7czF9JHtjfSR7czJ9YDtcbiAgICB0aGlzLmN1cnNvciA9IHMxLmxlbmd0aCsxO1xuICAgIHRoaXMuY29tcGxldGUodGhpcy5yZW5kZXIpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkZWxldGUoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yID09PSAwKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgbGV0IHMxID0gdGhpcy5pbnB1dC5zbGljZSgwLCB0aGlzLmN1cnNvci0xKTtcbiAgICBsZXQgczIgPSB0aGlzLmlucHV0LnNsaWNlKHRoaXMuY3Vyc29yKTtcbiAgICB0aGlzLmlucHV0ID0gYCR7czF9JHtzMn1gO1xuICAgIHRoaXMuY29tcGxldGUodGhpcy5yZW5kZXIpO1xuICAgIHRoaXMuY3Vyc29yID0gdGhpcy5jdXJzb3ItMTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZGVsZXRlRm9yd2FyZCgpIHtcbiAgICBpZih0aGlzLmN1cnNvcip0aGlzLnNjYWxlID49IHRoaXMucmVuZGVyZWQubGVuZ3RoKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgbGV0IHMxID0gdGhpcy5pbnB1dC5zbGljZSgwLCB0aGlzLmN1cnNvcik7XG4gICAgbGV0IHMyID0gdGhpcy5pbnB1dC5zbGljZSh0aGlzLmN1cnNvcisxKTtcbiAgICB0aGlzLmlucHV0ID0gYCR7czF9JHtzMn1gO1xuICAgIHRoaXMuY29tcGxldGUodGhpcy5yZW5kZXIpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBmaXJzdCgpIHtcbiAgICB0aGlzLm1vdmVTZWxlY3QoMCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGxhc3QoKSB7XG4gICAgdGhpcy5tb3ZlU2VsZWN0KHRoaXMuc3VnZ2VzdGlvbnMubGVuZ3RoIC0gMSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIGlmICh0aGlzLnNlbGVjdCA9PT0gMCkge1xuICAgICAgdGhpcy5tb3ZlU2VsZWN0KHRoaXMuc3VnZ2VzdGlvbnMubGVuZ3RoIC0gMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubW92ZVNlbGVjdCh0aGlzLnNlbGVjdCAtIDEpO1xuICAgIH1cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICBpZiAodGhpcy5zZWxlY3QgPT09IHRoaXMuc3VnZ2VzdGlvbnMubGVuZ3RoIC0gMSkge1xuICAgICAgdGhpcy5tb3ZlU2VsZWN0KDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1vdmVTZWxlY3QodGhpcy5zZWxlY3QgKyAxKTtcbiAgICB9XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0ID09PSB0aGlzLnN1Z2dlc3Rpb25zLmxlbmd0aCAtIDEpIHtcbiAgICAgIHRoaXMubW92ZVNlbGVjdCgwKTtcbiAgICB9IGVsc2UgdGhpcy5tb3ZlU2VsZWN0KHRoaXMuc2VsZWN0ICsgMSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIG5leHRQYWdlKCkge1xuICAgIHRoaXMubW92ZVNlbGVjdChNYXRoLm1pbih0aGlzLnNlbGVjdCArIHRoaXMubGltaXQsIHRoaXMuc3VnZ2VzdGlvbnMubGVuZ3RoIC0gMSkpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBwcmV2UGFnZSgpIHtcbiAgICB0aGlzLm1vdmVTZWxlY3QoTWF0aC5tYXgodGhpcy5zZWxlY3QgLSB0aGlzLmxpbWl0LCAwKSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGxlZnQoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yIDw9IDApIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLmN1cnNvciA9IHRoaXMuY3Vyc29yLTE7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHJpZ2h0KCkge1xuICAgIGlmICh0aGlzLmN1cnNvcip0aGlzLnNjYWxlID49IHRoaXMucmVuZGVyZWQubGVuZ3RoKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy5jdXJzb3IgPSB0aGlzLmN1cnNvcisxO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByZW5kZXJPcHRpb24odiwgaG92ZXJlZCwgaXNTdGFydCwgaXNFbmQpIHtcbiAgICBsZXQgZGVzYztcbiAgICBsZXQgcHJlZml4ID0gaXNTdGFydCA/IGZpZ3VyZXMuYXJyb3dVcCA6IGlzRW5kID8gZmlndXJlcy5hcnJvd0Rvd24gOiAnICc7XG4gICAgbGV0IHRpdGxlID0gaG92ZXJlZCA/IGNvbG9yLmN5YW4oKS51bmRlcmxpbmUodi50aXRsZSkgOiB2LnRpdGxlO1xuICAgIHByZWZpeCA9IChob3ZlcmVkID8gY29sb3IuY3lhbihmaWd1cmVzLnBvaW50ZXIpICsgJyAnIDogJyAgJykgKyBwcmVmaXg7XG4gICAgaWYgKHYuZGVzY3JpcHRpb24pIHtcbiAgICAgIGRlc2MgPSBgIC0gJHt2LmRlc2NyaXB0aW9ufWA7XG4gICAgICBpZiAocHJlZml4Lmxlbmd0aCArIHRpdGxlLmxlbmd0aCArIGRlc2MubGVuZ3RoID49IHRoaXMub3V0LmNvbHVtbnNcbiAgICAgICAgfHwgdi5kZXNjcmlwdGlvbi5zcGxpdCgvXFxyP1xcbi8pLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZGVzYyA9ICdcXG4nICsgd3JhcCh2LmRlc2NyaXB0aW9uLCB7IG1hcmdpbjogMywgd2lkdGg6IHRoaXMub3V0LmNvbHVtbnMgfSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByZWZpeCArICcgJyArIHRpdGxlICsgY29sb3IuZ3JheShkZXNjIHx8ICcnKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5jbG9zZWQpIHJldHVybjtcbiAgICBpZiAodGhpcy5maXJzdFJlbmRlcikgdGhpcy5vdXQud3JpdGUoY3Vyc29yLmhpZGUpO1xuICAgIGVsc2UgdGhpcy5vdXQud3JpdGUoY2xlYXIodGhpcy5vdXRwdXRUZXh0LCB0aGlzLm91dC5jb2x1bW5zKSk7XG4gICAgc3VwZXIucmVuZGVyKCk7XG5cbiAgICBsZXQgeyBzdGFydEluZGV4LCBlbmRJbmRleCB9ID0gZW50cmllc1RvRGlzcGxheSh0aGlzLnNlbGVjdCwgdGhpcy5jaG9pY2VzLmxlbmd0aCwgdGhpcy5saW1pdCk7XG5cbiAgICB0aGlzLm91dHB1dFRleHQgPSBbXG4gICAgICBzdHlsZS5zeW1ib2wodGhpcy5kb25lLCB0aGlzLmFib3J0ZWQsIHRoaXMuZXhpdGVkKSxcbiAgICAgIGNvbG9yLmJvbGQodGhpcy5tc2cpLFxuICAgICAgc3R5bGUuZGVsaW1pdGVyKHRoaXMuY29tcGxldGluZyksXG4gICAgICB0aGlzLmRvbmUgJiYgdGhpcy5zdWdnZXN0aW9uc1t0aGlzLnNlbGVjdF1cbiAgICAgICAgPyB0aGlzLnN1Z2dlc3Rpb25zW3RoaXMuc2VsZWN0XS50aXRsZVxuICAgICAgICA6IHRoaXMucmVuZGVyZWQgPSB0aGlzLnRyYW5zZm9ybS5yZW5kZXIodGhpcy5pbnB1dClcbiAgICBdLmpvaW4oJyAnKTtcblxuICAgIGlmICghdGhpcy5kb25lKSB7XG4gICAgICBjb25zdCBzdWdnZXN0aW9ucyA9IHRoaXMuc3VnZ2VzdGlvbnNcbiAgICAgICAgLnNsaWNlKHN0YXJ0SW5kZXgsIGVuZEluZGV4KVxuICAgICAgICAubWFwKChpdGVtLCBpKSA9PiAgdGhpcy5yZW5kZXJPcHRpb24oaXRlbSxcbiAgICAgICAgICB0aGlzLnNlbGVjdCA9PT0gaSArIHN0YXJ0SW5kZXgsXG4gICAgICAgICAgaSA9PT0gMCAmJiBzdGFydEluZGV4ID4gMCxcbiAgICAgICAgICBpICsgc3RhcnRJbmRleCA9PT0gZW5kSW5kZXggLSAxICYmIGVuZEluZGV4IDwgdGhpcy5jaG9pY2VzLmxlbmd0aCkpXG4gICAgICAgIC5qb2luKCdcXG4nKTtcbiAgICAgIHRoaXMub3V0cHV0VGV4dCArPSBgXFxuYCArIChzdWdnZXN0aW9ucyB8fCBjb2xvci5ncmF5KHRoaXMuZmFsbGJhY2sudGl0bGUpKTtcbiAgICB9XG5cbiAgICB0aGlzLm91dC53cml0ZShlcmFzZS5saW5lICsgY3Vyc29yLnRvKDApICsgdGhpcy5vdXRwdXRUZXh0KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEF1dG9jb21wbGV0ZVByb21wdDtcbiIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNvbG9yID0gcmVxdWlyZSgna2xldXInKTtcbmNvbnN0IHsgY3Vyc29yIH0gPSByZXF1aXJlKCdzaXN0ZXJhbnNpJyk7XG5jb25zdCBNdWx0aXNlbGVjdFByb21wdCA9IHJlcXVpcmUoJy4vbXVsdGlzZWxlY3QnKTtcbmNvbnN0IHsgY2xlYXIsIHN0eWxlLCBmaWd1cmVzIH0gPSByZXF1aXJlKCcuLi91dGlsJyk7XG4vKipcbiAqIE11bHRpc2VsZWN0UHJvbXB0IEJhc2UgRWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG9wdHMubWVzc2FnZSBNZXNzYWdlXG4gKiBAcGFyYW0ge0FycmF5fSBvcHRzLmNob2ljZXMgQXJyYXkgb2YgY2hvaWNlIG9iamVjdHNcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5oaW50XSBIaW50IHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy53YXJuXSBIaW50IHNob3duIGZvciBkaXNhYmxlZCBjaG9pY2VzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMubWF4XSBNYXggY2hvaWNlc1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmN1cnNvcj0wXSBDdXJzb3Igc3RhcnQgcG9zaXRpb25cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICovXG5jbGFzcyBBdXRvY29tcGxldGVNdWx0aXNlbGVjdFByb21wdCBleHRlbmRzIE11bHRpc2VsZWN0UHJvbXB0IHtcbiAgY29uc3RydWN0b3Iob3B0cz17fSkge1xuICAgIG9wdHMub3ZlcnJpZGVSZW5kZXIgPSB0cnVlO1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXMuaW5wdXRWYWx1ZSA9ICcnO1xuICAgIHRoaXMuY2xlYXIgPSBjbGVhcignJywgdGhpcy5vdXQuY29sdW1ucyk7XG4gICAgdGhpcy5maWx0ZXJlZE9wdGlvbnMgPSB0aGlzLnZhbHVlO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBsYXN0KCkge1xuICAgIHRoaXMuY3Vyc29yID0gdGhpcy5maWx0ZXJlZE9wdGlvbnMubGVuZ3RoIC0gMTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG4gIG5leHQoKSB7XG4gICAgdGhpcy5jdXJzb3IgPSAodGhpcy5jdXJzb3IgKyAxKSAlIHRoaXMuZmlsdGVyZWRPcHRpb25zLmxlbmd0aDtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yID09PSAwKSB7XG4gICAgICB0aGlzLmN1cnNvciA9IHRoaXMuZmlsdGVyZWRPcHRpb25zLmxlbmd0aCAtIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3Vyc29yLS07XG4gICAgfVxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIGlmICh0aGlzLmN1cnNvciA9PT0gdGhpcy5maWx0ZXJlZE9wdGlvbnMubGVuZ3RoIC0gMSkge1xuICAgICAgdGhpcy5jdXJzb3IgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnNvcisrO1xuICAgIH1cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbGVmdCgpIHtcbiAgICB0aGlzLmZpbHRlcmVkT3B0aW9uc1t0aGlzLmN1cnNvcl0uc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcmlnaHQoKSB7XG4gICAgaWYgKHRoaXMudmFsdWUuZmlsdGVyKGUgPT4gZS5zZWxlY3RlZCkubGVuZ3RoID49IHRoaXMubWF4Q2hvaWNlcykgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMuZmlsdGVyZWRPcHRpb25zW3RoaXMuY3Vyc29yXS5zZWxlY3RlZCA9IHRydWU7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRlbGV0ZSgpIHtcbiAgICBpZiAodGhpcy5pbnB1dFZhbHVlLmxlbmd0aCkge1xuICAgICAgdGhpcy5pbnB1dFZhbHVlID0gdGhpcy5pbnB1dFZhbHVlLnN1YnN0cigwLCB0aGlzLmlucHV0VmFsdWUubGVuZ3RoIC0gMSk7XG4gICAgICB0aGlzLnVwZGF0ZUZpbHRlcmVkT3B0aW9ucygpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUZpbHRlcmVkT3B0aW9ucygpIHtcbiAgICBjb25zdCBjdXJyZW50SGlnaGxpZ2h0ID0gdGhpcy5maWx0ZXJlZE9wdGlvbnNbdGhpcy5jdXJzb3JdO1xuICAgIHRoaXMuZmlsdGVyZWRPcHRpb25zID0gdGhpcy52YWx1ZVxuICAgICAgLmZpbHRlcih2ID0+IHtcbiAgICAgICAgaWYgKHRoaXMuaW5wdXRWYWx1ZSkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygdi50aXRsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmICh2LnRpdGxlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXModGhpcy5pbnB1dFZhbHVlLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHYudmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAodi52YWx1ZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHRoaXMuaW5wdXRWYWx1ZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSk7XG4gICAgY29uc3QgbmV3SGlnaGxpZ2h0SW5kZXggPSB0aGlzLmZpbHRlcmVkT3B0aW9ucy5maW5kSW5kZXgodiA9PiB2ID09PSBjdXJyZW50SGlnaGxpZ2h0KVxuICAgIHRoaXMuY3Vyc29yID0gbmV3SGlnaGxpZ2h0SW5kZXggPCAwID8gMCA6IG5ld0hpZ2hsaWdodEluZGV4O1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBoYW5kbGVTcGFjZVRvZ2dsZSgpIHtcbiAgICBjb25zdCB2ID0gdGhpcy5maWx0ZXJlZE9wdGlvbnNbdGhpcy5jdXJzb3JdO1xuXG4gICAgaWYgKHYuc2VsZWN0ZWQpIHtcbiAgICAgIHYuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfSBlbHNlIGlmICh2LmRpc2FibGVkIHx8IHRoaXMudmFsdWUuZmlsdGVyKGUgPT4gZS5zZWxlY3RlZCkubGVuZ3RoID49IHRoaXMubWF4Q2hvaWNlcykge1xuICAgICAgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2LnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlSW5wdXRDaGFuZ2UoYykge1xuICAgIHRoaXMuaW5wdXRWYWx1ZSA9IHRoaXMuaW5wdXRWYWx1ZSArIGM7XG4gICAgdGhpcy51cGRhdGVGaWx0ZXJlZE9wdGlvbnMoKTtcbiAgfVxuXG4gIF8oYywga2V5KSB7XG4gICAgaWYgKGMgPT09ICcgJykge1xuICAgICAgdGhpcy5oYW5kbGVTcGFjZVRvZ2dsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhhbmRsZUlucHV0Q2hhbmdlKGMpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlckluc3RydWN0aW9ucygpIHtcbiAgICBpZiAodGhpcy5pbnN0cnVjdGlvbnMgPT09IHVuZGVmaW5lZCB8fCB0aGlzLmluc3RydWN0aW9ucykge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLmluc3RydWN0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdHJ1Y3Rpb25zO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGBcbkluc3RydWN0aW9uczpcbiAgICAke2ZpZ3VyZXMuYXJyb3dVcH0vJHtmaWd1cmVzLmFycm93RG93bn06IEhpZ2hsaWdodCBvcHRpb25cbiAgICAke2ZpZ3VyZXMuYXJyb3dMZWZ0fS8ke2ZpZ3VyZXMuYXJyb3dSaWdodH0vW3NwYWNlXTogVG9nZ2xlIHNlbGVjdGlvblxuICAgIFthLGIsY10vZGVsZXRlOiBGaWx0ZXIgY2hvaWNlc1xuICAgIGVudGVyL3JldHVybjogQ29tcGxldGUgYW5zd2VyXG5gO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICByZW5kZXJDdXJyZW50SW5wdXQoKSB7XG4gICAgcmV0dXJuIGBcbkZpbHRlcmVkIHJlc3VsdHMgZm9yOiAke3RoaXMuaW5wdXRWYWx1ZSA/IHRoaXMuaW5wdXRWYWx1ZSA6IGNvbG9yLmdyYXkoJ0VudGVyIHNvbWV0aGluZyB0byBmaWx0ZXInKX1cXG5gO1xuICB9XG5cbiAgcmVuZGVyT3B0aW9uKGN1cnNvciwgdiwgaSkge1xuICAgIGxldCB0aXRsZTtcbiAgICBpZiAodi5kaXNhYmxlZCkgdGl0bGUgPSBjdXJzb3IgPT09IGkgPyBjb2xvci5ncmF5KCkudW5kZXJsaW5lKHYudGl0bGUpIDogY29sb3Iuc3RyaWtldGhyb3VnaCgpLmdyYXkodi50aXRsZSk7XG4gICAgZWxzZSB0aXRsZSA9IGN1cnNvciA9PT0gaSA/IGNvbG9yLmN5YW4oKS51bmRlcmxpbmUodi50aXRsZSkgOiB2LnRpdGxlO1xuICAgIHJldHVybiAodi5zZWxlY3RlZCA/IGNvbG9yLmdyZWVuKGZpZ3VyZXMucmFkaW9PbikgOiBmaWd1cmVzLnJhZGlvT2ZmKSArICcgICcgKyB0aXRsZVxuICB9XG5cbiAgcmVuZGVyRG9uZU9ySW5zdHJ1Y3Rpb25zKCkge1xuICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlXG4gICAgICAgIC5maWx0ZXIoZSA9PiBlLnNlbGVjdGVkKVxuICAgICAgICAubWFwKHYgPT4gdi50aXRsZSlcbiAgICAgICAgLmpvaW4oJywgJyk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3V0cHV0ID0gW2NvbG9yLmdyYXkodGhpcy5oaW50KSwgdGhpcy5yZW5kZXJJbnN0cnVjdGlvbnMoKSwgdGhpcy5yZW5kZXJDdXJyZW50SW5wdXQoKV07XG5cbiAgICBpZiAodGhpcy5maWx0ZXJlZE9wdGlvbnMubGVuZ3RoICYmIHRoaXMuZmlsdGVyZWRPcHRpb25zW3RoaXMuY3Vyc29yXS5kaXNhYmxlZCkge1xuICAgICAgb3V0cHV0LnB1c2goY29sb3IueWVsbG93KHRoaXMud2FybikpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0LmpvaW4oJyAnKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5jbG9zZWQpIHJldHVybjtcbiAgICBpZiAodGhpcy5maXJzdFJlbmRlcikgdGhpcy5vdXQud3JpdGUoY3Vyc29yLmhpZGUpO1xuICAgIHN1cGVyLnJlbmRlcigpO1xuXG4gICAgLy8gcHJpbnQgcHJvbXB0XG5cbiAgICBsZXQgcHJvbXB0ID0gW1xuICAgICAgc3R5bGUuc3ltYm9sKHRoaXMuZG9uZSwgdGhpcy5hYm9ydGVkKSxcbiAgICAgIGNvbG9yLmJvbGQodGhpcy5tc2cpLFxuICAgICAgc3R5bGUuZGVsaW1pdGVyKGZhbHNlKSxcbiAgICAgIHRoaXMucmVuZGVyRG9uZU9ySW5zdHJ1Y3Rpb25zKClcbiAgICBdLmpvaW4oJyAnKTtcblxuICAgIGlmICh0aGlzLnNob3dNaW5FcnJvcikge1xuICAgICAgcHJvbXB0ICs9IGNvbG9yLnJlZChgWW91IG11c3Qgc2VsZWN0IGEgbWluaW11bSBvZiAke3RoaXMubWluU2VsZWN0ZWR9IGNob2ljZXMuYCk7XG4gICAgICB0aGlzLnNob3dNaW5FcnJvciA9IGZhbHNlO1xuICAgIH1cbiAgICBwcm9tcHQgKz0gdGhpcy5yZW5kZXJPcHRpb25zKHRoaXMuZmlsdGVyZWRPcHRpb25zKTtcblxuICAgIHRoaXMub3V0LndyaXRlKHRoaXMuY2xlYXIgKyBwcm9tcHQpO1xuICAgIHRoaXMuY2xlYXIgPSBjbGVhcihwcm9tcHQsIHRoaXMub3V0LmNvbHVtbnMpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXV0b2NvbXBsZXRlTXVsdGlzZWxlY3RQcm9tcHQ7XG4iLCAiY29uc3QgY29sb3IgPSByZXF1aXJlKCdrbGV1cicpO1xuY29uc3QgUHJvbXB0ID0gcmVxdWlyZSgnLi9wcm9tcHQnKTtcbmNvbnN0IHsgc3R5bGUsIGNsZWFyIH0gPSByZXF1aXJlKCcuLi91dGlsJyk7XG5jb25zdCB7IGVyYXNlLCBjdXJzb3IgfSA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKTtcblxuLyoqXG4gKiBDb25maXJtUHJvbXB0IEJhc2UgRWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG9wdHMubWVzc2FnZSBNZXNzYWdlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRzLmluaXRpYWxdIERlZmF1bHQgdmFsdWUgKHRydWUvZmFsc2UpXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy55ZXNdIFRoZSBcIlllc1wiIGxhYmVsXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMueWVzT3B0aW9uXSBUaGUgXCJZZXNcIiBvcHRpb24gd2hlbiBjaG9vc2luZyBiZXR3ZWVuIHllcy9ub1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLm5vXSBUaGUgXCJOb1wiIGxhYmVsXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMubm9PcHRpb25dIFRoZSBcIk5vXCIgb3B0aW9uIHdoZW4gY2hvb3NpbmcgYmV0d2VlbiB5ZXMvbm9cbiAqL1xuY2xhc3MgQ29uZmlybVByb21wdCBleHRlbmRzIFByb21wdCB7XG4gIGNvbnN0cnVjdG9yKG9wdHM9e30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgICB0aGlzLm1zZyA9IG9wdHMubWVzc2FnZTtcbiAgICB0aGlzLnZhbHVlID0gb3B0cy5pbml0aWFsO1xuICAgIHRoaXMuaW5pdGlhbFZhbHVlID0gISFvcHRzLmluaXRpYWw7XG4gICAgdGhpcy55ZXNNc2cgPSBvcHRzLnllcyB8fCAneWVzJztcbiAgICB0aGlzLnllc09wdGlvbiA9IG9wdHMueWVzT3B0aW9uIHx8ICcoWS9uKSc7XG4gICAgdGhpcy5ub01zZyA9IG9wdHMubm8gfHwgJ25vJztcbiAgICB0aGlzLm5vT3B0aW9uID0gb3B0cy5ub09wdGlvbiB8fCAnKHkvTiknO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5pbml0aWFsVmFsdWU7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGV4aXQoKSB7XG4gICAgdGhpcy5hYm9ydCgpO1xuICB9XG5cbiAgYWJvcnQoKSB7XG4gICAgdGhpcy5kb25lID0gdGhpcy5hYm9ydGVkID0gdHJ1ZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICBzdWJtaXQoKSB7XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUgfHwgZmFsc2U7XG4gICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICB0aGlzLmFib3J0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICBfKGMsIGtleSkge1xuICAgIGlmIChjLnRvTG93ZXJDYXNlKCkgPT09ICd5Jykge1xuICAgICAgdGhpcy52YWx1ZSA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcy5zdWJtaXQoKTtcbiAgICB9XG4gICAgaWYgKGMudG9Mb3dlckNhc2UoKSA9PT0gJ24nKSB7XG4gICAgICB0aGlzLnZhbHVlID0gZmFsc2U7XG4gICAgICByZXR1cm4gdGhpcy5zdWJtaXQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLmNsb3NlZCkgcmV0dXJuO1xuICAgIGlmICh0aGlzLmZpcnN0UmVuZGVyKSB0aGlzLm91dC53cml0ZShjdXJzb3IuaGlkZSk7XG4gICAgZWxzZSB0aGlzLm91dC53cml0ZShjbGVhcih0aGlzLm91dHB1dFRleHQsIHRoaXMub3V0LmNvbHVtbnMpKTtcbiAgICBzdXBlci5yZW5kZXIoKTtcblxuICAgIHRoaXMub3V0cHV0VGV4dCA9IFtcbiAgICAgIHN0eWxlLnN5bWJvbCh0aGlzLmRvbmUsIHRoaXMuYWJvcnRlZCksXG4gICAgICBjb2xvci5ib2xkKHRoaXMubXNnKSxcbiAgICAgIHN0eWxlLmRlbGltaXRlcih0aGlzLmRvbmUpLFxuICAgICAgdGhpcy5kb25lID8gKHRoaXMudmFsdWUgPyB0aGlzLnllc01zZyA6IHRoaXMubm9Nc2cpXG4gICAgICAgICAgOiBjb2xvci5ncmF5KHRoaXMuaW5pdGlhbFZhbHVlID8gdGhpcy55ZXNPcHRpb24gOiB0aGlzLm5vT3B0aW9uKVxuICAgIF0uam9pbignICcpO1xuXG4gICAgdGhpcy5vdXQud3JpdGUoZXJhc2UubGluZSArIGN1cnNvci50bygwKSArIHRoaXMub3V0cHV0VGV4dCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb25maXJtUHJvbXB0O1xuIiwgIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFRleHRQcm9tcHQ6IHJlcXVpcmUoJy4vdGV4dCcpLFxuICBTZWxlY3RQcm9tcHQ6IHJlcXVpcmUoJy4vc2VsZWN0JyksXG4gIFRvZ2dsZVByb21wdDogcmVxdWlyZSgnLi90b2dnbGUnKSxcbiAgRGF0ZVByb21wdDogcmVxdWlyZSgnLi9kYXRlJyksXG4gIE51bWJlclByb21wdDogcmVxdWlyZSgnLi9udW1iZXInKSxcbiAgTXVsdGlzZWxlY3RQcm9tcHQ6IHJlcXVpcmUoJy4vbXVsdGlzZWxlY3QnKSxcbiAgQXV0b2NvbXBsZXRlUHJvbXB0OiByZXF1aXJlKCcuL2F1dG9jb21wbGV0ZScpLFxuICBBdXRvY29tcGxldGVNdWx0aXNlbGVjdFByb21wdDogcmVxdWlyZSgnLi9hdXRvY29tcGxldGVNdWx0aXNlbGVjdCcpLFxuICBDb25maXJtUHJvbXB0OiByZXF1aXJlKCcuL2NvbmZpcm0nKVxufTtcbiIsICIndXNlIHN0cmljdCc7XG5jb25zdCAkID0gZXhwb3J0cztcbmNvbnN0IGVsID0gcmVxdWlyZSgnLi9lbGVtZW50cycpO1xuY29uc3Qgbm9vcCA9IHYgPT4gdjtcblxuZnVuY3Rpb24gdG9Qcm9tcHQodHlwZSwgYXJncywgb3B0cz17fSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG4gICAgY29uc3QgcCA9IG5ldyBlbFt0eXBlXShhcmdzKTtcbiAgICBjb25zdCBvbkFib3J0ID0gb3B0cy5vbkFib3J0IHx8IG5vb3A7XG4gICAgY29uc3Qgb25TdWJtaXQgPSBvcHRzLm9uU3VibWl0IHx8IG5vb3A7XG4gICAgY29uc3Qgb25FeGl0ID0gb3B0cy5vbkV4aXQgfHwgbm9vcDtcbiAgICBwLm9uKCdzdGF0ZScsIGFyZ3Mub25TdGF0ZSB8fCBub29wKTtcbiAgICBwLm9uKCdzdWJtaXQnLCB4ID0+IHJlcyhvblN1Ym1pdCh4KSkpO1xuICAgIHAub24oJ2V4aXQnLCB4ID0+IHJlcyhvbkV4aXQoeCkpKTtcbiAgICBwLm9uKCdhYm9ydCcsIHggPT4gcmVqKG9uQWJvcnQoeCkpKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGV4dCBwcm9tcHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLm1lc3NhZ2UgUHJvbXB0IG1lc3NhZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLmluaXRpYWxdIERlZmF1bHQgc3RyaW5nIHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3Muc3R5bGU9XCJkZWZhdWx0XCJdIFJlbmRlciBzdHlsZSAoJ2RlZmF1bHQnLCAncGFzc3dvcmQnLCAnaW52aXNpYmxlJylcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3MudmFsaWRhdGVdIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIHVzZXIgaW5wdXRcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cbiQudGV4dCA9IGFyZ3MgPT4gdG9Qcm9tcHQoJ1RleHRQcm9tcHQnLCBhcmdzKTtcblxuLyoqXG4gKiBQYXNzd29yZCBwcm9tcHQgd2l0aCBtYXNrZWQgaW5wdXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLm1lc3NhZ2UgUHJvbXB0IG1lc3NhZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLmluaXRpYWxdIERlZmF1bHQgc3RyaW5nIHZhbHVlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLnZhbGlkYXRlXSBGdW5jdGlvbiB0byB2YWxpZGF0ZSB1c2VyIGlucHV0XG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHdpdGggdXNlciBpbnB1dFxuICovXG4kLnBhc3N3b3JkID0gYXJncyA9PiB7XG4gIGFyZ3Muc3R5bGUgPSAncGFzc3dvcmQnO1xuICByZXR1cm4gJC50ZXh0KGFyZ3MpO1xufTtcblxuLyoqXG4gKiBQcm9tcHQgd2hlcmUgaW5wdXQgaXMgaW52aXNpYmxlLCBsaWtlIHN1ZG9cbiAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLm1lc3NhZ2UgUHJvbXB0IG1lc3NhZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLmluaXRpYWxdIERlZmF1bHQgc3RyaW5nIHZhbHVlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLnZhbGlkYXRlXSBGdW5jdGlvbiB0byB2YWxpZGF0ZSB1c2VyIGlucHV0XG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHdpdGggdXNlciBpbnB1dFxuICovXG4kLmludmlzaWJsZSA9IGFyZ3MgPT4ge1xuICBhcmdzLnN0eWxlID0gJ2ludmlzaWJsZSc7XG4gIHJldHVybiAkLnRleHQoYXJncyk7XG59O1xuXG4vKipcbiAqIE51bWJlciBwcm9tcHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLm1lc3NhZ2UgUHJvbXB0IG1lc3NhZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtIHtudW1iZXJ9IGFyZ3MuaW5pdGlhbCBEZWZhdWx0IG51bWJlciB2YWx1ZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3Mub25TdGF0ZV0gT24gc3RhdGUgY2hhbmdlIGNhbGxiYWNrXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyZ3MubWF4XSBNYXggdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJncy5taW5dIE1pbiB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLnN0eWxlPVwiZGVmYXVsdFwiXSBSZW5kZXIgc3R5bGUgKCdkZWZhdWx0JywgJ3Bhc3N3b3JkJywgJ2ludmlzaWJsZScpXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRzLmZsb2F0PWZhbHNlXSBQYXJzZSBpbnB1dCBhcyBmbG9hdHNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5yb3VuZD0yXSBSb3VuZCBmbG9hdHMgdG8geCBkZWNpbWFsc1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmluY3JlbWVudD0xXSBOdW1iZXIgdG8gaW5jcmVtZW50IGJ5IHdoZW4gdXNpbmcgYXJyb3cta2V5c1xuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3MudmFsaWRhdGVdIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIHVzZXIgaW5wdXRcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cbiQubnVtYmVyID0gYXJncyA9PiB0b1Byb21wdCgnTnVtYmVyUHJvbXB0JywgYXJncyk7XG5cbi8qKlxuICogRGF0ZSBwcm9tcHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLm1lc3NhZ2UgUHJvbXB0IG1lc3NhZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtIHtudW1iZXJ9IGFyZ3MuaW5pdGlhbCBEZWZhdWx0IG51bWJlciB2YWx1ZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3Mub25TdGF0ZV0gT24gc3RhdGUgY2hhbmdlIGNhbGxiYWNrXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyZ3MubWF4XSBNYXggdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJncy5taW5dIE1pbiB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLnN0eWxlPVwiZGVmYXVsdFwiXSBSZW5kZXIgc3R5bGUgKCdkZWZhdWx0JywgJ3Bhc3N3b3JkJywgJ2ludmlzaWJsZScpXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRzLmZsb2F0PWZhbHNlXSBQYXJzZSBpbnB1dCBhcyBmbG9hdHNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5yb3VuZD0yXSBSb3VuZCBmbG9hdHMgdG8geCBkZWNpbWFsc1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmluY3JlbWVudD0xXSBOdW1iZXIgdG8gaW5jcmVtZW50IGJ5IHdoZW4gdXNpbmcgYXJyb3cta2V5c1xuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3MudmFsaWRhdGVdIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIHVzZXIgaW5wdXRcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cbiQuZGF0ZSA9IGFyZ3MgPT4gdG9Qcm9tcHQoJ0RhdGVQcm9tcHQnLCBhcmdzKTtcblxuLyoqXG4gKiBDbGFzc2ljIHllcy9ubyBwcm9tcHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLm1lc3NhZ2UgUHJvbXB0IG1lc3NhZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtIHtib29sZWFufSBbYXJncy5pbml0aWFsPWZhbHNlXSBEZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cbiQuY29uZmlybSA9IGFyZ3MgPT4gdG9Qcm9tcHQoJ0NvbmZpcm1Qcm9tcHQnLCBhcmdzKTtcblxuLyoqXG4gKiBMaXN0IHByb21wdCwgc3BsaXQgaW50cHV0IHN0cmluZyBieSBgc2VwZXJhdG9yYFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3MuaW5pdGlhbF0gRGVmYXVsdCBzdHJpbmcgdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5zdHlsZT1cImRlZmF1bHRcIl0gUmVuZGVyIHN0eWxlICgnZGVmYXVsdCcsICdwYXNzd29yZCcsICdpbnZpc2libGUnKVxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLnNlcGFyYXRvcl0gU3RyaW5nIHNlcGFyYXRvclxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3Mub25TdGF0ZV0gT24gc3RhdGUgY2hhbmdlIGNhbGxiYWNrXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHdpdGggdXNlciBpbnB1dCwgaW4gZm9ybSBvZiBhbiBgQXJyYXlgXG4gKi9cbiQubGlzdCA9IGFyZ3MgPT4ge1xuICBjb25zdCBzZXAgPSBhcmdzLnNlcGFyYXRvciB8fCAnLCc7XG4gIHJldHVybiB0b1Byb21wdCgnVGV4dFByb21wdCcsIGFyZ3MsIHtcbiAgICBvblN1Ym1pdDogc3RyID0+IHN0ci5zcGxpdChzZXApLm1hcChzID0+IHMudHJpbSgpKVxuICB9KTtcbn07XG5cbi8qKlxuICogVG9nZ2xlL3N3aXRjaCBwcm9tcHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLm1lc3NhZ2UgUHJvbXB0IG1lc3NhZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtIHtib29sZWFufSBbYXJncy5pbml0aWFsPWZhbHNlXSBEZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3MuYWN0aXZlPVwib25cIl0gVGV4dCBmb3IgYGFjdGl2ZWAgc3RhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5pbmFjdGl2ZT1cIm9mZlwiXSBUZXh0IGZvciBgaW5hY3RpdmVgIHN0YXRlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cbiQudG9nZ2xlID0gYXJncyA9PiB0b1Byb21wdCgnVG9nZ2xlUHJvbXB0JywgYXJncyk7XG5cbi8qKlxuICogSW50ZXJhY3RpdmUgc2VsZWN0IHByb21wdFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzLmNob2ljZXMgQXJyYXkgb2YgY2hvaWNlcyBvYmplY3RzIGBbeyB0aXRsZSwgdmFsdWUgfSwgLi4uXWBcbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJncy5pbml0aWFsXSBJbmRleCBvZiBkZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge1N0cmluZ30gW2FyZ3MuaGludF0gSGludCB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cbiQuc2VsZWN0ID0gYXJncyA9PiB0b1Byb21wdCgnU2VsZWN0UHJvbXB0JywgYXJncyk7XG5cbi8qKlxuICogSW50ZXJhY3RpdmUgbXVsdGktc2VsZWN0IC8gYXV0b2NvbXBsZXRlTXVsdGlzZWxlY3QgcHJvbXB0XG4gKiBAcGFyYW0ge3N0cmluZ30gYXJncy5tZXNzYWdlIFByb21wdCBtZXNzYWdlIHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MuY2hvaWNlcyBBcnJheSBvZiBjaG9pY2VzIG9iamVjdHMgYFt7IHRpdGxlLCB2YWx1ZSwgW3NlbGVjdGVkXSB9LCAuLi5dYFxuICogQHBhcmFtIHtudW1iZXJ9IFthcmdzLm1heF0gTWF4IHNlbGVjdFxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLmhpbnRdIEhpbnQgdG8gZGlzcGxheSB1c2VyXG4gKiBAcGFyYW0ge051bWJlcn0gW2FyZ3MuY3Vyc29yPTBdIEN1cnNvciBzdGFydCBwb3NpdGlvblxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3Mub25TdGF0ZV0gT24gc3RhdGUgY2hhbmdlIGNhbGxiYWNrXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHdpdGggdXNlciBpbnB1dFxuICovXG4kLm11bHRpc2VsZWN0ID0gYXJncyA9PiB7XG4gIGFyZ3MuY2hvaWNlcyA9IFtdLmNvbmNhdChhcmdzLmNob2ljZXMgfHwgW10pO1xuICBjb25zdCB0b1NlbGVjdGVkID0gaXRlbXMgPT4gaXRlbXMuZmlsdGVyKGl0ZW0gPT4gaXRlbS5zZWxlY3RlZCkubWFwKGl0ZW0gPT4gaXRlbS52YWx1ZSk7XG4gIHJldHVybiB0b1Byb21wdCgnTXVsdGlzZWxlY3RQcm9tcHQnLCBhcmdzLCB7XG4gICAgb25BYm9ydDogdG9TZWxlY3RlZCxcbiAgICBvblN1Ym1pdDogdG9TZWxlY3RlZFxuICB9KTtcbn07XG5cbiQuYXV0b2NvbXBsZXRlTXVsdGlzZWxlY3QgPSBhcmdzID0+IHtcbiAgYXJncy5jaG9pY2VzID0gW10uY29uY2F0KGFyZ3MuY2hvaWNlcyB8fCBbXSk7XG4gIGNvbnN0IHRvU2VsZWN0ZWQgPSBpdGVtcyA9PiBpdGVtcy5maWx0ZXIoaXRlbSA9PiBpdGVtLnNlbGVjdGVkKS5tYXAoaXRlbSA9PiBpdGVtLnZhbHVlKTtcbiAgcmV0dXJuIHRvUHJvbXB0KCdBdXRvY29tcGxldGVNdWx0aXNlbGVjdFByb21wdCcsIGFyZ3MsIHtcbiAgICBvbkFib3J0OiB0b1NlbGVjdGVkLFxuICAgIG9uU3VibWl0OiB0b1NlbGVjdGVkXG4gIH0pO1xufTtcblxuY29uc3QgYnlUaXRsZSA9IChpbnB1dCwgY2hvaWNlcykgPT4gUHJvbWlzZS5yZXNvbHZlKFxuICBjaG9pY2VzLmZpbHRlcihpdGVtID0+IGl0ZW0udGl0bGUuc2xpY2UoMCwgaW5wdXQubGVuZ3RoKS50b0xvd2VyQ2FzZSgpID09PSBpbnB1dC50b0xvd2VyQ2FzZSgpKVxuKTtcblxuLyoqXG4gKiBJbnRlcmFjdGl2ZSBhdXRvLWNvbXBsZXRlIHByb21wdFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzLmNob2ljZXMgQXJyYXkgb2YgYXV0by1jb21wbGV0ZSBjaG9pY2VzIG9iamVjdHMgYFt7IHRpdGxlLCB2YWx1ZSB9LCAuLi5dYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2FyZ3Muc3VnZ2VzdF0gRnVuY3Rpb24gdG8gZmlsdGVyIHJlc3VsdHMgYmFzZWQgb24gdXNlciBpbnB1dC4gRGVmYXVsdHMgdG8gc29ydCBieSBgdGl0bGVgXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyZ3MubGltaXQ9MTBdIE1heCBudW1iZXIgb2YgcmVzdWx0cyB0byBzaG93XG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3Muc3R5bGU9XCJkZWZhdWx0XCJdIFJlbmRlciBzdHlsZSAoJ2RlZmF1bHQnLCAncGFzc3dvcmQnLCAnaW52aXNpYmxlJylcbiAqIEBwYXJhbSB7U3RyaW5nfSBbYXJncy5pbml0aWFsXSBJbmRleCBvZiB0aGUgZGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5jbGVhckZpcnN0XSBUaGUgZmlyc3QgRVNDQVBFIGtleXByZXNzIHdpbGwgY2xlYXIgdGhlIGlucHV0XG4gKiBAcGFyYW0ge1N0cmluZ30gW2FyZ3MuZmFsbGJhY2tdIEZhbGxiYWNrIG1lc3NhZ2UgLSBkZWZhdWx0cyB0byBpbml0aWFsIHZhbHVlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cbiQuYXV0b2NvbXBsZXRlID0gYXJncyA9PiB7XG4gIGFyZ3Muc3VnZ2VzdCA9IGFyZ3Muc3VnZ2VzdCB8fCBieVRpdGxlO1xuICBhcmdzLmNob2ljZXMgPSBbXS5jb25jYXQoYXJncy5jaG9pY2VzIHx8IFtdKTtcbiAgcmV0dXJuIHRvUHJvbXB0KCdBdXRvY29tcGxldGVQcm9tcHQnLCBhcmdzKTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBwcm9tcHRzID0gcmVxdWlyZSgnLi9wcm9tcHRzJyk7XG5cbmNvbnN0IHBhc3NPbiA9IFsnc3VnZ2VzdCcsICdmb3JtYXQnLCAnb25TdGF0ZScsICd2YWxpZGF0ZScsICdvblJlbmRlcicsICd0eXBlJ107XG5jb25zdCBub29wID0gKCkgPT4ge307XG5cbi8qKlxuICogUHJvbXB0IGZvciBhIHNlcmllcyBvZiBxdWVzdGlvbnNcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBxdWVzdGlvbnMgU2luZ2xlIHF1ZXN0aW9uIG9iamVjdCBvciBBcnJheSBvZiBxdWVzdGlvbiBvYmplY3RzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb25TdWJtaXRdIENhbGxiYWNrIGZ1bmN0aW9uIGNhbGxlZCBvbiBwcm9tcHQgc3VibWl0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb25DYW5jZWxdIENhbGxiYWNrIGZ1bmN0aW9uIGNhbGxlZCBvbiBjYW5jZWwvYWJvcnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IE9iamVjdCB3aXRoIHZhbHVlcyBmcm9tIHVzZXIgaW5wdXRcbiAqL1xuYXN5bmMgZnVuY3Rpb24gcHJvbXB0KHF1ZXN0aW9ucz1bXSwgeyBvblN1Ym1pdD1ub29wLCBvbkNhbmNlbD1ub29wIH09e30pIHtcbiAgY29uc3QgYW5zd2VycyA9IHt9O1xuICBjb25zdCBvdmVycmlkZSA9IHByb21wdC5fb3ZlcnJpZGUgfHwge307XG4gIHF1ZXN0aW9ucyA9IFtdLmNvbmNhdChxdWVzdGlvbnMpO1xuICBsZXQgYW5zd2VyLCBxdWVzdGlvbiwgcXVpdCwgbmFtZSwgdHlwZSwgbGFzdFByb21wdDtcblxuICBjb25zdCBnZXRGb3JtYXR0ZWRBbnN3ZXIgPSBhc3luYyAocXVlc3Rpb24sIGFuc3dlciwgc2tpcFZhbGlkYXRpb24gPSBmYWxzZSkgPT4ge1xuICAgIGlmICghc2tpcFZhbGlkYXRpb24gJiYgcXVlc3Rpb24udmFsaWRhdGUgJiYgcXVlc3Rpb24udmFsaWRhdGUoYW5zd2VyKSAhPT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gcXVlc3Rpb24uZm9ybWF0ID8gYXdhaXQgcXVlc3Rpb24uZm9ybWF0KGFuc3dlciwgYW5zd2VycykgOiBhbnN3ZXJcbiAgfTtcblxuICBmb3IgKHF1ZXN0aW9uIG9mIHF1ZXN0aW9ucykge1xuICAgICh7IG5hbWUsIHR5cGUgfSA9IHF1ZXN0aW9uKTtcblxuICAgIC8vIGV2YWx1YXRlIHR5cGUgZmlyc3QgYW5kIHNraXAgaWYgdHlwZSBpcyBhIGZhbHN5IHZhbHVlXG4gICAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0eXBlID0gYXdhaXQgdHlwZShhbnN3ZXIsIHsgLi4uYW5zd2VycyB9LCBxdWVzdGlvbilcbiAgICAgIHF1ZXN0aW9uWyd0eXBlJ10gPSB0eXBlXG4gICAgfVxuICAgIGlmICghdHlwZSkgY29udGludWU7XG5cbiAgICAvLyBpZiBwcm9wZXJ0eSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgdW5sZXNzIGl0J3MgYSBzcGVjaWFsIGZ1bmN0aW9uXG4gICAgZm9yIChsZXQga2V5IGluIHF1ZXN0aW9uKSB7XG4gICAgICBpZiAocGFzc09uLmluY2x1ZGVzKGtleSkpIGNvbnRpbnVlO1xuICAgICAgbGV0IHZhbHVlID0gcXVlc3Rpb25ba2V5XTtcbiAgICAgIHF1ZXN0aW9uW2tleV0gPSB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgPyBhd2FpdCB2YWx1ZShhbnN3ZXIsIHsgLi4uYW5zd2VycyB9LCBsYXN0UHJvbXB0KSA6IHZhbHVlO1xuICAgIH1cblxuICAgIGxhc3RQcm9tcHQgPSBxdWVzdGlvbjtcblxuICAgIGlmICh0eXBlb2YgcXVlc3Rpb24ubWVzc2FnZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigncHJvbXB0IG1lc3NhZ2UgaXMgcmVxdWlyZWQnKTtcbiAgICB9XG5cbiAgICAvLyB1cGRhdGUgdmFycyBpbiBjYXNlIHRoZXkgY2hhbmdlZFxuICAgICh7IG5hbWUsIHR5cGUgfSA9IHF1ZXN0aW9uKTtcblxuICAgIGlmIChwcm9tcHRzW3R5cGVdID09PSB2b2lkIDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgcHJvbXB0IHR5cGUgKCR7dHlwZX0pIGlzIG5vdCBkZWZpbmVkYCk7XG4gICAgfVxuXG4gICAgaWYgKG92ZXJyaWRlW3F1ZXN0aW9uLm5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGFuc3dlciA9IGF3YWl0IGdldEZvcm1hdHRlZEFuc3dlcihxdWVzdGlvbiwgb3ZlcnJpZGVbcXVlc3Rpb24ubmFtZV0pO1xuICAgICAgaWYgKGFuc3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGFuc3dlcnNbbmFtZV0gPSBhbnN3ZXI7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyBHZXQgdGhlIGluamVjdGVkIGFuc3dlciBpZiB0aGVyZSBpcyBvbmUgb3IgcHJvbXB0IHRoZSB1c2VyXG4gICAgICBhbnN3ZXIgPSBwcm9tcHQuX2luamVjdGVkID8gZ2V0SW5qZWN0ZWRBbnN3ZXIocHJvbXB0Ll9pbmplY3RlZCwgcXVlc3Rpb24uaW5pdGlhbCkgOiBhd2FpdCBwcm9tcHRzW3R5cGVdKHF1ZXN0aW9uKTtcbiAgICAgIGFuc3dlcnNbbmFtZV0gPSBhbnN3ZXIgPSBhd2FpdCBnZXRGb3JtYXR0ZWRBbnN3ZXIocXVlc3Rpb24sIGFuc3dlciwgdHJ1ZSk7XG4gICAgICBxdWl0ID0gYXdhaXQgb25TdWJtaXQocXVlc3Rpb24sIGFuc3dlciwgYW5zd2Vycyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBxdWl0ID0gIShhd2FpdCBvbkNhbmNlbChxdWVzdGlvbiwgYW5zd2VycykpO1xuICAgIH1cblxuICAgIGlmIChxdWl0KSByZXR1cm4gYW5zd2VycztcbiAgfVxuXG4gIHJldHVybiBhbnN3ZXJzO1xufVxuXG5mdW5jdGlvbiBnZXRJbmplY3RlZEFuc3dlcihpbmplY3RlZCwgZGVhZnVsdFZhbHVlKSB7XG4gIGNvbnN0IGFuc3dlciA9IGluamVjdGVkLnNoaWZ0KCk7XG4gICAgaWYgKGFuc3dlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICB0aHJvdyBhbnN3ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIChhbnN3ZXIgPT09IHVuZGVmaW5lZCkgPyBkZWFmdWx0VmFsdWUgOiBhbnN3ZXI7XG59XG5cbmZ1bmN0aW9uIGluamVjdChhbnN3ZXJzKSB7XG4gIHByb21wdC5faW5qZWN0ZWQgPSAocHJvbXB0Ll9pbmplY3RlZCB8fCBbXSkuY29uY2F0KGFuc3dlcnMpO1xufVxuXG5mdW5jdGlvbiBvdmVycmlkZShhbnN3ZXJzKSB7XG4gIHByb21wdC5fb3ZlcnJpZGUgPSBPYmplY3QuYXNzaWduKHt9LCBhbnN3ZXJzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKHByb21wdCwgeyBwcm9tcHQsIHByb21wdHMsIGluamVjdCwgb3ZlcnJpZGUgfSk7XG4iLCAiZnVuY3Rpb24gaXNOb2RlTFQodGFyKSB7XG4gIHRhciA9IChBcnJheS5pc0FycmF5KHRhcikgPyB0YXIgOiB0YXIuc3BsaXQoJy4nKSkubWFwKE51bWJlcik7XG4gIGxldCBpPTAsIHNyYz1wcm9jZXNzLnZlcnNpb25zLm5vZGUuc3BsaXQoJy4nKS5tYXAoTnVtYmVyKTtcbiAgZm9yICg7IGkgPCB0YXIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3JjW2ldID4gdGFyW2ldKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHRhcltpXSA+IHNyY1tpXSkgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9XG4gIGlzTm9kZUxUKCc4LjYuMCcpXG4gICAgPyByZXF1aXJlKCcuL2Rpc3QvaW5kZXguanMnKVxuICAgIDogcmVxdWlyZSgnLi9saWIvaW5kZXguanMnKTtcbiIsICJ2YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJykuU3RyZWFtO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGVsYXllZFN0cmVhbTtcbmZ1bmN0aW9uIERlbGF5ZWRTdHJlYW0oKSB7XG4gIHRoaXMuc291cmNlID0gbnVsbDtcbiAgdGhpcy5kYXRhU2l6ZSA9IDA7XG4gIHRoaXMubWF4RGF0YVNpemUgPSAxMDI0ICogMTAyNDtcbiAgdGhpcy5wYXVzZVN0cmVhbSA9IHRydWU7XG5cbiAgdGhpcy5fbWF4RGF0YVNpemVFeGNlZWRlZCA9IGZhbHNlO1xuICB0aGlzLl9yZWxlYXNlZCA9IGZhbHNlO1xuICB0aGlzLl9idWZmZXJlZEV2ZW50cyA9IFtdO1xufVxudXRpbC5pbmhlcml0cyhEZWxheWVkU3RyZWFtLCBTdHJlYW0pO1xuXG5EZWxheWVkU3RyZWFtLmNyZWF0ZSA9IGZ1bmN0aW9uKHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZGVsYXllZFN0cmVhbSA9IG5ldyB0aGlzKCk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGZvciAodmFyIG9wdGlvbiBpbiBvcHRpb25zKSB7XG4gICAgZGVsYXllZFN0cmVhbVtvcHRpb25dID0gb3B0aW9uc1tvcHRpb25dO1xuICB9XG5cbiAgZGVsYXllZFN0cmVhbS5zb3VyY2UgPSBzb3VyY2U7XG5cbiAgdmFyIHJlYWxFbWl0ID0gc291cmNlLmVtaXQ7XG4gIHNvdXJjZS5lbWl0ID0gZnVuY3Rpb24oKSB7XG4gICAgZGVsYXllZFN0cmVhbS5faGFuZGxlRW1pdChhcmd1bWVudHMpO1xuICAgIHJldHVybiByZWFsRW1pdC5hcHBseShzb3VyY2UsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgc291cmNlLm9uKCdlcnJvcicsIGZ1bmN0aW9uKCkge30pO1xuICBpZiAoZGVsYXllZFN0cmVhbS5wYXVzZVN0cmVhbSkge1xuICAgIHNvdXJjZS5wYXVzZSgpO1xuICB9XG5cbiAgcmV0dXJuIGRlbGF5ZWRTdHJlYW07XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRGVsYXllZFN0cmVhbS5wcm90b3R5cGUsICdyZWFkYWJsZScsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZS5yZWFkYWJsZTtcbiAgfVxufSk7XG5cbkRlbGF5ZWRTdHJlYW0ucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNvdXJjZS5zZXRFbmNvZGluZy5hcHBseSh0aGlzLnNvdXJjZSwgYXJndW1lbnRzKTtcbn07XG5cbkRlbGF5ZWRTdHJlYW0ucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuX3JlbGVhc2VkKSB7XG4gICAgdGhpcy5yZWxlYXNlKCk7XG4gIH1cblxuICB0aGlzLnNvdXJjZS5yZXN1bWUoKTtcbn07XG5cbkRlbGF5ZWRTdHJlYW0ucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc291cmNlLnBhdXNlKCk7XG59O1xuXG5EZWxheWVkU3RyZWFtLnByb3RvdHlwZS5yZWxlYXNlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3JlbGVhc2VkID0gdHJ1ZTtcblxuICB0aGlzLl9idWZmZXJlZEV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gIH0uYmluZCh0aGlzKSk7XG4gIHRoaXMuX2J1ZmZlcmVkRXZlbnRzID0gW107XG59O1xuXG5EZWxheWVkU3RyZWFtLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oKSB7XG4gIHZhciByID0gU3RyZWFtLnByb3RvdHlwZS5waXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIHRoaXMucmVzdW1lKCk7XG4gIHJldHVybiByO1xufTtcblxuRGVsYXllZFN0cmVhbS5wcm90b3R5cGUuX2hhbmRsZUVtaXQgPSBmdW5jdGlvbihhcmdzKSB7XG4gIGlmICh0aGlzLl9yZWxlYXNlZCkge1xuICAgIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoYXJnc1swXSA9PT0gJ2RhdGEnKSB7XG4gICAgdGhpcy5kYXRhU2l6ZSArPSBhcmdzWzFdLmxlbmd0aDtcbiAgICB0aGlzLl9jaGVja0lmTWF4RGF0YVNpemVFeGNlZWRlZCgpO1xuICB9XG5cbiAgdGhpcy5fYnVmZmVyZWRFdmVudHMucHVzaChhcmdzKTtcbn07XG5cbkRlbGF5ZWRTdHJlYW0ucHJvdG90eXBlLl9jaGVja0lmTWF4RGF0YVNpemVFeGNlZWRlZCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5fbWF4RGF0YVNpemVFeGNlZWRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzLmRhdGFTaXplIDw9IHRoaXMubWF4RGF0YVNpemUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLl9tYXhEYXRhU2l6ZUV4Y2VlZGVkID0gdHJ1ZTtcbiAgdmFyIG1lc3NhZ2UgPVxuICAgICdEZWxheWVkU3RyZWFtI21heERhdGFTaXplIG9mICcgKyB0aGlzLm1heERhdGFTaXplICsgJyBieXRlcyBleGNlZWRlZC4nXG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IobWVzc2FnZSkpO1xufTtcbiIsICJ2YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKS5TdHJlYW07XG52YXIgRGVsYXllZFN0cmVhbSA9IHJlcXVpcmUoJ2RlbGF5ZWQtc3RyZWFtJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tYmluZWRTdHJlYW07XG5mdW5jdGlvbiBDb21iaW5lZFN0cmVhbSgpIHtcbiAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcbiAgdGhpcy5kYXRhU2l6ZSA9IDA7XG4gIHRoaXMubWF4RGF0YVNpemUgPSAyICogMTAyNCAqIDEwMjQ7XG4gIHRoaXMucGF1c2VTdHJlYW1zID0gdHJ1ZTtcblxuICB0aGlzLl9yZWxlYXNlZCA9IGZhbHNlO1xuICB0aGlzLl9zdHJlYW1zID0gW107XG4gIHRoaXMuX2N1cnJlbnRTdHJlYW0gPSBudWxsO1xuICB0aGlzLl9pbnNpZGVMb29wID0gZmFsc2U7XG4gIHRoaXMuX3BlbmRpbmdOZXh0ID0gZmFsc2U7XG59XG51dGlsLmluaGVyaXRzKENvbWJpbmVkU3RyZWFtLCBTdHJlYW0pO1xuXG5Db21iaW5lZFN0cmVhbS5jcmVhdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIHZhciBjb21iaW5lZFN0cmVhbSA9IG5ldyB0aGlzKCk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGZvciAodmFyIG9wdGlvbiBpbiBvcHRpb25zKSB7XG4gICAgY29tYmluZWRTdHJlYW1bb3B0aW9uXSA9IG9wdGlvbnNbb3B0aW9uXTtcbiAgfVxuXG4gIHJldHVybiBjb21iaW5lZFN0cmVhbTtcbn07XG5cbkNvbWJpbmVkU3RyZWFtLmlzU3RyZWFtTGlrZSA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICByZXR1cm4gKHR5cGVvZiBzdHJlYW0gIT09ICdmdW5jdGlvbicpXG4gICAgJiYgKHR5cGVvZiBzdHJlYW0gIT09ICdzdHJpbmcnKVxuICAgICYmICh0eXBlb2Ygc3RyZWFtICE9PSAnYm9vbGVhbicpXG4gICAgJiYgKHR5cGVvZiBzdHJlYW0gIT09ICdudW1iZXInKVxuICAgICYmICghQnVmZmVyLmlzQnVmZmVyKHN0cmVhbSkpO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICB2YXIgaXNTdHJlYW1MaWtlID0gQ29tYmluZWRTdHJlYW0uaXNTdHJlYW1MaWtlKHN0cmVhbSk7XG5cbiAgaWYgKGlzU3RyZWFtTGlrZSkge1xuICAgIGlmICghKHN0cmVhbSBpbnN0YW5jZW9mIERlbGF5ZWRTdHJlYW0pKSB7XG4gICAgICB2YXIgbmV3U3RyZWFtID0gRGVsYXllZFN0cmVhbS5jcmVhdGUoc3RyZWFtLCB7XG4gICAgICAgIG1heERhdGFTaXplOiBJbmZpbml0eSxcbiAgICAgICAgcGF1c2VTdHJlYW06IHRoaXMucGF1c2VTdHJlYW1zLFxuICAgICAgfSk7XG4gICAgICBzdHJlYW0ub24oJ2RhdGEnLCB0aGlzLl9jaGVja0RhdGFTaXplLmJpbmQodGhpcykpO1xuICAgICAgc3RyZWFtID0gbmV3U3RyZWFtO1xuICAgIH1cblxuICAgIHRoaXMuX2hhbmRsZUVycm9ycyhzdHJlYW0pO1xuXG4gICAgaWYgKHRoaXMucGF1c2VTdHJlYW1zKSB7XG4gICAgICBzdHJlYW0ucGF1c2UoKTtcbiAgICB9XG4gIH1cblxuICB0aGlzLl9zdHJlYW1zLnB1c2goc3RyZWFtKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uKGRlc3QsIG9wdGlvbnMpIHtcbiAgU3RyZWFtLnByb3RvdHlwZS5waXBlLmNhbGwodGhpcywgZGVzdCwgb3B0aW9ucyk7XG4gIHRoaXMucmVzdW1lKCk7XG4gIHJldHVybiBkZXN0O1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLl9nZXROZXh0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2N1cnJlbnRTdHJlYW0gPSBudWxsO1xuXG4gIGlmICh0aGlzLl9pbnNpZGVMb29wKSB7XG4gICAgdGhpcy5fcGVuZGluZ05leHQgPSB0cnVlO1xuICAgIHJldHVybjsgLy8gZGVmZXIgY2FsbFxuICB9XG5cbiAgdGhpcy5faW5zaWRlTG9vcCA9IHRydWU7XG4gIHRyeSB7XG4gICAgZG8ge1xuICAgICAgdGhpcy5fcGVuZGluZ05leHQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3JlYWxHZXROZXh0KCk7XG4gICAgfSB3aGlsZSAodGhpcy5fcGVuZGluZ05leHQpO1xuICB9IGZpbmFsbHkge1xuICAgIHRoaXMuX2luc2lkZUxvb3AgPSBmYWxzZTtcbiAgfVxufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLl9yZWFsR2V0TmV4dCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RyZWFtID0gdGhpcy5fc3RyZWFtcy5zaGlmdCgpO1xuXG5cbiAgaWYgKHR5cGVvZiBzdHJlYW0gPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aGlzLmVuZCgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3RyZWFtICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5fcGlwZU5leHQoc3RyZWFtKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZ2V0U3RyZWFtID0gc3RyZWFtO1xuICBnZXRTdHJlYW0oZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgdmFyIGlzU3RyZWFtTGlrZSA9IENvbWJpbmVkU3RyZWFtLmlzU3RyZWFtTGlrZShzdHJlYW0pO1xuICAgIGlmIChpc1N0cmVhbUxpa2UpIHtcbiAgICAgIHN0cmVhbS5vbignZGF0YScsIHRoaXMuX2NoZWNrRGF0YVNpemUuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLl9oYW5kbGVFcnJvcnMoc3RyZWFtKTtcbiAgICB9XG5cbiAgICB0aGlzLl9waXBlTmV4dChzdHJlYW0pO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLl9waXBlTmV4dCA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICB0aGlzLl9jdXJyZW50U3RyZWFtID0gc3RyZWFtO1xuXG4gIHZhciBpc1N0cmVhbUxpa2UgPSBDb21iaW5lZFN0cmVhbS5pc1N0cmVhbUxpa2Uoc3RyZWFtKTtcbiAgaWYgKGlzU3RyZWFtTGlrZSkge1xuICAgIHN0cmVhbS5vbignZW5kJywgdGhpcy5fZ2V0TmV4dC5iaW5kKHRoaXMpKTtcbiAgICBzdHJlYW0ucGlwZSh0aGlzLCB7ZW5kOiBmYWxzZX0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB2YWx1ZSA9IHN0cmVhbTtcbiAgdGhpcy53cml0ZSh2YWx1ZSk7XG4gIHRoaXMuX2dldE5leHQoKTtcbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5faGFuZGxlRXJyb3JzID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgc3RyZWFtLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGVycikge1xuICAgIHNlbGYuX2VtaXRFcnJvcihlcnIpO1xuICB9KTtcbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgdGhpcy5lbWl0KCdkYXRhJywgZGF0YSk7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLnBhdXNlU3RyZWFtcykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmKHRoaXMucGF1c2VTdHJlYW1zICYmIHRoaXMuX2N1cnJlbnRTdHJlYW0gJiYgdHlwZW9mKHRoaXMuX2N1cnJlbnRTdHJlYW0ucGF1c2UpID09ICdmdW5jdGlvbicpIHRoaXMuX2N1cnJlbnRTdHJlYW0ucGF1c2UoKTtcbiAgdGhpcy5lbWl0KCdwYXVzZScpO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuX3JlbGVhc2VkKSB7XG4gICAgdGhpcy5fcmVsZWFzZWQgPSB0cnVlO1xuICAgIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuICAgIHRoaXMuX2dldE5leHQoKTtcbiAgfVxuXG4gIGlmKHRoaXMucGF1c2VTdHJlYW1zICYmIHRoaXMuX2N1cnJlbnRTdHJlYW0gJiYgdHlwZW9mKHRoaXMuX2N1cnJlbnRTdHJlYW0ucmVzdW1lKSA9PSAnZnVuY3Rpb24nKSB0aGlzLl9jdXJyZW50U3RyZWFtLnJlc3VtZSgpO1xuICB0aGlzLmVtaXQoJ3Jlc3VtZScpO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9yZXNldCgpO1xuICB0aGlzLmVtaXQoJ2VuZCcpO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fcmVzZXQoKTtcbiAgdGhpcy5lbWl0KCdjbG9zZScpO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLl9yZXNldCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG4gIHRoaXMuX3N0cmVhbXMgPSBbXTtcbiAgdGhpcy5fY3VycmVudFN0cmVhbSA9IG51bGw7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUuX2NoZWNrRGF0YVNpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fdXBkYXRlRGF0YVNpemUoKTtcbiAgaWYgKHRoaXMuZGF0YVNpemUgPD0gdGhpcy5tYXhEYXRhU2l6ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBtZXNzYWdlID1cbiAgICAnRGVsYXllZFN0cmVhbSNtYXhEYXRhU2l6ZSBvZiAnICsgdGhpcy5tYXhEYXRhU2l6ZSArICcgYnl0ZXMgZXhjZWVkZWQuJztcbiAgdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcihtZXNzYWdlKSk7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUuX3VwZGF0ZURhdGFTaXplID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZGF0YVNpemUgPSAwO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5fc3RyZWFtcy5mb3JFYWNoKGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIGlmICghc3RyZWFtLmRhdGFTaXplKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2VsZi5kYXRhU2l6ZSArPSBzdHJlYW0uZGF0YVNpemU7XG4gIH0pO1xuXG4gIGlmICh0aGlzLl9jdXJyZW50U3RyZWFtICYmIHRoaXMuX2N1cnJlbnRTdHJlYW0uZGF0YVNpemUpIHtcbiAgICB0aGlzLmRhdGFTaXplICs9IHRoaXMuX2N1cnJlbnRTdHJlYW0uZGF0YVNpemU7XG4gIH1cbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5fZW1pdEVycm9yID0gZnVuY3Rpb24oZXJyKSB7XG4gIHRoaXMuX3Jlc2V0KCk7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xufTtcbiIsICJ7XG4gIFwiYXBwbGljYXRpb24vMWQtaW50ZXJsZWF2ZWQtcGFyaXR5ZmVjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uLzNncGRhc2gtcW9lLXJlcG9ydCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uLzNncHAtaW1zK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uLzNncHBoYWwranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uLzNncHBoYWxmb3Jtcytqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYTJsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2FjZStjYm9yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2FjdGl2ZW1lc3NhZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYWN0aXZpdHkranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2FsdG8tY29zdG1hcCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYWx0by1jb3N0bWFwZmlsdGVyK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hbHRvLWRpcmVjdG9yeStqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYWx0by1lbmRwb2ludGNvc3QranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2FsdG8tZW5kcG9pbnRjb3N0cGFyYW1zK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hbHRvLWVuZHBvaW50cHJvcCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYWx0by1lbmRwb2ludHByb3BwYXJhbXMranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2FsdG8tZXJyb3IranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2FsdG8tbmV0d29ya21hcCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYWx0by1uZXR3b3JrbWFwZmlsdGVyK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hbHRvLXVwZGF0ZXN0cmVhbWNvbnRyb2wranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2FsdG8tdXBkYXRlc3RyZWFtcGFyYW1zK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hbWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYW5kcmV3LWluc2V0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZXpcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hcHBsZWZpbGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYXBwbGl4d2FyZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hdCtqd3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYXRmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2F0ZnhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYXRvbSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImF0b21cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hdG9tY2F0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXRvbWNhdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2F0b21kZWxldGVkK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXRvbWRlbGV0ZWRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hdG9taWNtYWlsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2F0b21zdmMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhdG9tc3ZjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYXRzYy1kd2QreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkd2RcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hdHNjLWR5bmFtaWMtZXZlbnQtbWVzc2FnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hdHNjLWhlbGQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJoZWxkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYXRzYy1yZHQranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2F0c2MtcnNhdCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJzYXRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hdHhtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hdXRoLXBvbGljeSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9iYWNuZXQteGRkK3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9iYXRjaC1zbXRwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2Jkb2NcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJiZG9jXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYmVlcCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NhbGVuZGFyK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jYWxlbmRhcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhjc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NhbGwtY29tcGxldGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jYWxzLTE4NDBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY2FwdGl2ZStqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY2JvclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jYm9yLXNlcVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jY2NleFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jY21wK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NjeG1sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2N4bWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jZGZ4K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2RmeFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NkbWktY2FwYWJpbGl0eVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNkbWlhXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY2RtaS1jb250YWluZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjZG1pY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NkbWktZG9tYWluXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2RtaWRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jZG1pLW9iamVjdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNkbWlvXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY2RtaS1xdWV1ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNkbWlxXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY2RuaVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jZWFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY2VhLTIwMTgreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY2VsbG1sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2Nmd1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jaXR5K2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jbHJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY2x1ZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jbHVlX2luZm8reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY21zXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NucnAreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY29hcC1ncm91cCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY29hcC1wYXlsb2FkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NvbW1vbmdyb3VuZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jb25mZXJlbmNlLWluZm8reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY29zZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jb3NlLWtleVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jb3NlLWtleS1zZXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY3BsK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY3BsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY3NyYXR0cnNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY3N0YSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jc3RhZGF0YSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jc3ZtK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jdS1zZWVtZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY3VcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jd3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY3liZXJjYXNoXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2RhcnRcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9kYXNoK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXBkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZGFzaC1wYXRjaCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1wcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2Rhc2hkZWx0YVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9kYXZtb3VudCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRhdm1vdW50XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZGNhLXJmdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9kY2RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZGVjLWR4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2RpYWxvZy1pbmZvK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2RpY29tXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2RpY29tK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9kaWNvbSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9kaWlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZGl0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2Ruc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9kbnMranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2Rucy1tZXNzYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2RvY2Jvb2sreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRia1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2RvdHMrY2JvclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9kc2twcCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9kc3NjK2RlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRzc2NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9kc3NjK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGRzc2NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9kdmNzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImVzXCIsXCJlY21hXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZWRpLWNvbnNlbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZWRpLXgxMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9lZGlmYWN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2VmaVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9lbG0ranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZWxtK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2VtZXJnZW5jeWNhbGxkYXRhLmNhcCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2VtZXJnZW5jeWNhbGxkYXRhLmNvbW1lbnQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZW1lcmdlbmN5Y2FsbGRhdGEuY29udHJvbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9lbWVyZ2VuY3ljYWxsZGF0YS5kZXZpY2VpbmZvK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2VtZXJnZW5jeWNhbGxkYXRhLmVjYWxsLm1zZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9lbWVyZ2VuY3ljYWxsZGF0YS5wcm92aWRlcmluZm8reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZW1lcmdlbmN5Y2FsbGRhdGEuc2VydmljZWluZm8reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZW1lcmdlbmN5Y2FsbGRhdGEuc3Vic2NyaWJlcmluZm8reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZW1lcmdlbmN5Y2FsbGRhdGEudmVkcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9lbW1hK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZW1tYVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2Vtb3Rpb25tbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImVtb3Rpb25tbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2VuY2FwcnRwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2VwcCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9lcHViK3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImVwdWJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9lc2hvcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9leGlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJleGlcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9leHBlY3QtY3QtcmVwb3J0K2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9leHByZXNzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZXhwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZmFzdGluZm9zZXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZmFzdHNvYXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZmR0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZmR0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZmhpcitqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9maGlyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZmlkby50cnVzdGVkLWFwcHMranNvblwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2ZpdHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZmxleGZlY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9mb250LXNmbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZm9udC10ZHBmclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBmclwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2ZvbnQtd29mZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9mcmFtZXdvcmstYXR0cmlidXRlcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9nZW8ranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ2VvanNvblwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2dlbytqc29uLXNlcVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9nZW9wYWNrYWdlK3NxbGl0ZTNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZ2VveGFjbWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZ2x0Zi1idWZmZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZ21sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ21sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZ3B4K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJncHhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9neGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImd4ZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2d6aXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnelwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2gyMjRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vaGVsZCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9oanNvblwiOiB7XG4gICAgXCJleHRlbnNpb25zXCI6IFtcImhqc29uXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vaHR0cFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9oeXBlcnN0dWRpb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInN0a1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2liZS1rZXktcmVxdWVzdCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9pYmUtcGtnLXJlcGx5K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2liZS1wcC1kYXRhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2lnZXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vaW0taXNjb21wb3NpbmcreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9pbmRleFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9pbmRleC5jbWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vaW5kZXgub2JqXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2luZGV4LnJlc3BvbnNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2luZGV4LnZuZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9pbmttbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImlua1wiLFwiaW5rbWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9pb3RwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2lwZml4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaXBmaXhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9pcHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vaXN1cFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9pdHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpdHNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9qYXZhLWFyY2hpdmVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImphclwiLFwid2FyXCIsXCJlYXJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9qYXZhLXNlcmlhbGl6ZWQtb2JqZWN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzZXJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9qYXZhLXZtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjbGFzc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2phdmFzY3JpcHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wianNcIixcIm1qc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2pmMmZlZWQranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2pvc2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vam9zZStqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vanJkK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9qc2NhbGVuZGFyK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9qc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImpzb25cIixcIm1hcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2pzb24tcGF0Y2granNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2pzb24tc2VxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2pzb241XCI6IHtcbiAgICBcImV4dGVuc2lvbnNcIjogW1wianNvbjVcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9qc29ubWwranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqc29ubWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9qd2sranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2p3ay1zZXQranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2p3dFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9rcG1sLXJlcXVlc3QreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24va3BtbC1yZXNwb25zZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9sZCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqc29ubGRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9sZ3IreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJsZ3JcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9saW5rLWZvcm1hdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9sb2FkLWNvbnRyb2wreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbG9zdCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImxvc3R4bWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9sb3N0c3luYyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9scGYremlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2x4ZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tYWMtYmluaGV4NDBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJocXhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tYWMtY29tcGFjdHByb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY3B0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWFjd3JpdGVpaVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tYWRzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibWFkc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21hbmlmZXN0K2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid2VibWFuaWZlc3RcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tYXJjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXJjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWFyY3htbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1yY3hcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tYXRoZW1hdGljYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1hXCIsXCJuYlwiLFwibWJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tYXRobWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtYXRobWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tYXRobWwtY29udGVudCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tYXRobWwtcHJlc2VudGF0aW9uK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21ibXMtYXNzb2NpYXRlZC1wcm9jZWR1cmUtZGVzY3JpcHRpb24reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWJtcy1kZXJlZ2lzdGVyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21ibXMtZW52ZWxvcGUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWJtcy1tc2sreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWJtcy1tc2stcmVzcG9uc2UreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWJtcy1wcm90ZWN0aW9uLWRlc2NyaXB0aW9uK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21ibXMtcmVjZXB0aW9uLXJlcG9ydCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tYm1zLXJlZ2lzdGVyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21ibXMtcmVnaXN0ZXItcmVzcG9uc2UreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWJtcy1zY2hlZHVsZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tYm1zLXVzZXItc2VydmljZS1kZXNjcmlwdGlvbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tYm94XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibWJveFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21lZGlhLXBvbGljeS1kYXRhc2V0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXBmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWVkaWFfY29udHJvbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tZWRpYXNlcnZlcmNvbnRyb2wreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtc2NtbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21lcmdlLXBhdGNoK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tZXRhbGluayt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibWV0YWxpbmtcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tZXRhbGluazQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtZXRhNFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21ldHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtZXRzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWY0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21pa2V5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21pcGNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWlzc2luZy1ibG9ja3MrY2Jvci1zZXFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbW10LWFlaSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1hZWlcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tbXQtdXNkK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXVzZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21vZHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtb2RzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbW9zcy1rZXlzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21vc3Mtc2lnbmF0dXJlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21vc3NrZXktZGF0YVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tb3Nza2V5LXJlcXVlc3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbXAyMVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm0yMVwiLFwibXAyMVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21wNFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1wNHNcIixcIm00cFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21wZWc0LWdlbmVyaWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbXBlZzQtaW9kXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21wZWc0LWlvZC14bXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbXJiLWNvbnN1bWVyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21yYi1wdWJsaXNoK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21zYy1pdnIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tc2MtbWl4ZXIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tc3dvcmRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkb2NcIixcImRvdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL211ZCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbXVsdGlwYXJ0LWNvcmVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbXhmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXhmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbi1xdWFkc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm5xXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbi10cmlwbGVzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibnRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9uYXNkYXRhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL25ld3MtY2hlY2tncm91cHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVTLUFTQ0lJXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9uZXdzLWdyb3VwaW5mb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVMtQVNDSUlcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL25ld3MtdHJhbnNtaXNzaW9uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL25sc21sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL25vZGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjanNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9uc3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vb2F1dGgtYXV0aHotcmVxK2p3dFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9vYmxpdmlvdXMtZG5zLW1lc3NhZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vb2NzcC1yZXF1ZXN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL29jc3AtcmVzcG9uc2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYmluXCIsXCJkbXNcIixcImxyZlwiLFwibWFyXCIsXCJzb1wiLFwiZGlzdFwiLFwiZGlzdHpcIixcInBrZ1wiLFwiYnBrXCIsXCJkdW1wXCIsXCJlbGNcIixcImRlcGxveVwiLFwiZXhlXCIsXCJkbGxcIixcImRlYlwiLFwiZG1nXCIsXCJpc29cIixcImltZ1wiLFwibXNpXCIsXCJtc3BcIixcIm1zbVwiLFwiYnVmZmVyXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vb2RhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib2RhXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vb2RtK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL29keFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9vZWJwcy1wYWNrYWdlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib3BmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vb2dnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib2d4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vb21kb2MreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9tZG9jXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vb25lbm90ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib25ldG9jXCIsXCJvbmV0b2MyXCIsXCJvbmV0bXBcIixcIm9uZXBrZ1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL29wYy1ub2Rlc2V0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL29zY29yZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9veHBzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib3hwc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3AyMVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wMjEremlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3AycC1vdmVybGF5K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicmVsb1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Bhcml0eWZlY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wYXNzcG9ydFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wYXRjaC1vcHMtZXJyb3IreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4ZXJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wZGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwZGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wZHhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcGVtLWNlcnRpZmljYXRlLWNoYWluXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3BncC1lbmNyeXB0ZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwZ3BcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wZ3Ata2V5c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFzY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3BncC1zaWduYXR1cmVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhc2NcIixcInNpZ1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3BpY3MtcnVsZXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInByZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3BpZGYreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9waWRmLWRpZmYreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wa2NzMTBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwMTBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wa2NzMTJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcGtjczctbWltZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInA3bVwiLFwicDdjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcGtjczctc2lnbmF0dXJlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicDdzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcGtjczhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwOFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3BrY3M4LWVuY3J5cHRlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wa2l4LWF0dHItY2VydFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcGtpeC1jZXJ0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2VyXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcGtpeC1jcmxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjcmxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wa2l4LXBraXBhdGhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwa2lwYXRoXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcGtpeGNtcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBraVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Bscyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBsc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3BvYy1zZXR0aW5ncyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Bvc3RzY3JpcHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFpXCIsXCJlcHNcIixcInBzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcHBzcC10cmFja2VyK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wcm9ibGVtK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wcm9ibGVtK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Byb3ZlbmFuY2UreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwcm92eFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Bycy5hbHZlc3RyYW5kLnRpdHJheC1zaGVldFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wcnMuY3d3XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY3d3XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcHJzLmN5blwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiNy1CSVRcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Bycy5ocHViK3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wcnMubnByZW5kXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Bycy5wbHVja2VyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Bycy5yZGYteG1sLWNyeXB0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Bycy54c2YreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcHNrYyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBza2N4bWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wdmQranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3FzaWdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcmFtbCt5YW1sXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyYW1sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcmFwdG9yZmVjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3JkYXAranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3JkZit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJkZlwiLFwib3dsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcmVnaW5mbyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJpZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3JlbGF4LW5nLWNvbXBhY3Qtc3ludGF4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicm5jXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcmVtb3RlLXByaW50aW5nXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3JlcHV0b24ranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Jlc291cmNlLWxpc3RzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicmxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9yZXNvdXJjZS1saXN0cy1kaWZmK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicmxkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcmZjK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Jpc2Nvc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9ybG1pK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Jscy1zZXJ2aWNlcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcm91dGUtYXBkK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicmFwZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3JvdXRlLXMtdHNpZCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNsc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3JvdXRlLXVzZCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJ1c2RcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9ycGtpLWdob3N0YnVzdGVyc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdiclwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Jwa2ktbWFuaWZlc3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtZnRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9ycGtpLXB1YmxpY2F0aW9uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Jwa2ktcm9hXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicm9hXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcnBraS11cGRvd25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcnNkK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyc2RcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9yc3MreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJzc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3J0ZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicnRmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcnRwbG9vcGJhY2tcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcnR4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NhbWxhc3NlcnRpb24reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2FtbG1ldGFkYXRhK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NhcmlmK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zYXJpZi1leHRlcm5hbC1wcm9wZXJ0aWVzK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zYmVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2JtbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNibWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zY2FpcCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zY2ltK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zY3ZwLWN2LXJlcXVlc3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzY3FcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zY3ZwLWN2LXJlc3BvbnNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2NzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2N2cC12cC1yZXF1ZXN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3BxXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2N2cC12cC1yZXNwb25zZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNwcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NkcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNkcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NlY2V2ZW50K2p3dFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zZW5tbCtjYm9yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Nlbm1sK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zZW5tbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNlbm1seFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Nlbm1sLWV0Y2grY2JvclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zZW5tbC1ldGNoK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zZW5tbC1leGlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2Vuc21sK2Nib3JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2Vuc21sK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zZW5zbWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzZW5zbWx4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2Vuc21sLWV4aVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zZXAreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2VwLWV4aVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zZXNzaW9uLWluZm9cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2V0LXBheW1lbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2V0LXBheW1lbnQtaW5pdGlhdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNldHBheVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NldC1yZWdpc3RyYXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2V0LXJlZ2lzdHJhdGlvbi1pbml0aWF0aW9uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2V0cmVnXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2dtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zZ21sLW9wZW4tY2F0YWxvZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zaGYreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzaGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zaWV2ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNpdlwiLFwic2lldmVcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zaW1wbGUtZmlsdGVyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NpbXBsZS1tZXNzYWdlLXN1bW1hcnlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2ltcGxlc3ltYm9sY29udGFpbmVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NpcGNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2xhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc21pbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zbWlsK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic21pXCIsXCJzbWlsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc21wdGUzMzZtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NvYXArZmFzdGluZm9zZXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc29hcCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zcGFycWwtcXVlcnlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJycVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NwYXJxbC1yZXN1bHRzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3J4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc3BkeCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc3Bpcml0cy1ldmVudCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zcWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc3Jnc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdyYW1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zcmdzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ3J4bWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zcnUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzcnVcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zc2RsK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzc2RsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc3NtbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNzbWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zdGl4K2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zd2lkK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3dpZHRhZ1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3RhbXAtYXBleC11cGRhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGFtcC1hcGV4LXVwZGF0ZS1jb25maXJtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3RhbXAtY29tbXVuaXR5LXVwZGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90YW1wLWNvbW11bml0eS11cGRhdGUtY29uZmlybVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90YW1wLWVycm9yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3RhbXAtc2VxdWVuY2UtYWRqdXN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3RhbXAtc2VxdWVuY2UtYWRqdXN0LWNvbmZpcm1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGFtcC1zdGF0dXMtcXVlcnlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGFtcC1zdGF0dXMtcmVzcG9uc2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGFtcC11cGRhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGFtcC11cGRhdGUtY29uZmlybVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90YXJcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90YXhpaStqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGQranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3RlaSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRlaVwiLFwidGVpY29ycHVzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGV0cmFfaXNpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3RocmF1ZCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRmaVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3RpbWVzdGFtcC1xdWVyeVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90aW1lc3RhbXAtcmVwbHlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGltZXN0YW1wZWQtZGF0YVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRzZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Rsc3JwdCtnemlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Rsc3JwdCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdG5hdXRobGlzdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90b2tlbi1pbnRyb3NwZWN0aW9uK2p3dFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90b21sXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0b21sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdHJpY2tsZS1pY2Utc2RwZnJhZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90cmlnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widHJpZ1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3R0bWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0dG1sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdHZlLXRyaWdnZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdHppZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90emlmLWxlYXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdWJqc29uXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1widWJqXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdWxwZmVjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3VyYy1ncnBzaGVldCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi91cmMtcmVzc2hlZXQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyc2hlZXRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi91cmMtdGFyZ2V0ZGVzYyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdXJjLXVpc29ja2V0ZGVzYyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92Y2FyZCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdmNhcmQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdmVtbWlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdml2aWRlbmNlLnNjcmlwdGZpbGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuMTAwMG1pbmRzLmRlY2lzaW9uLW1vZGVsK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiMWttXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAtcHJvc2UreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAtcHJvc2UtcGMzY2greG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAtdjJ4LWxvY2FsLXNlcnZpY2UtaW5mb3JtYXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAuNWduYXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAuYWNjZXNzLXRyYW5zZmVyLWV2ZW50cyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5ic2YreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAuZ21vcCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5ndHBjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLmludGVyd29ya2luZy1kYXRhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLmxwcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5tYy1zaWduYWxsaW5nLWVhclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5tY2RhdGEtYWZmaWxpYXRpb24tY29tbWFuZCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5tY2RhdGEtaW5mbyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5tY2RhdGEtcGF5bG9hZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5tY2RhdGEtc2VydmljZS1jb25maWcreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAubWNkYXRhLXNpZ25hbGxpbmdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAubWNkYXRhLXVlLWNvbmZpZyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5tY2RhdGEtdXNlci1wcm9maWxlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLm1jcHR0LWFmZmlsaWF0aW9uLWNvbW1hbmQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAubWNwdHQtZmxvb3ItcmVxdWVzdCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5tY3B0dC1pbmZvK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLm1jcHR0LWxvY2F0aW9uLWluZm8reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAubWNwdHQtbWJtcy11c2FnZS1pbmZvK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLm1jcHR0LXNlcnZpY2UtY29uZmlnK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLm1jcHR0LXNpZ25lZCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5tY3B0dC11ZS1jb25maWcreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAubWNwdHQtdWUtaW5pdC1jb25maWcreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAubWNwdHQtdXNlci1wcm9maWxlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLm1jdmlkZW8tYWZmaWxpYXRpb24tY29tbWFuZCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5tY3ZpZGVvLWFmZmlsaWF0aW9uLWluZm8reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAubWN2aWRlby1pbmZvK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLm1jdmlkZW8tbG9jYXRpb24taW5mbyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5tY3ZpZGVvLW1ibXMtdXNhZ2UtaW5mbyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5tY3ZpZGVvLXNlcnZpY2UtY29uZmlnK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLm1jdmlkZW8tdHJhbnNtaXNzaW9uLXJlcXVlc3QreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAubWN2aWRlby11ZS1jb25maWcreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAubWN2aWRlby11c2VyLXByb2ZpbGUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAubWlkLWNhbGwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAubmdhcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5wZmNwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLnBpYy1idy1sYXJnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBsYlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLnBpYy1idy1zbWFsbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBzYlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLnBpYy1idy12YXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwdmJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5zMWFwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLnNtc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5zbXMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAuc3J2Y2MtZXh0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLnNydmNjLWluZm8reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAuc3RhdGUtYW5kLWV2ZW50LWluZm8reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAudXNzZCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcDIuYmNtY3NpbmZvK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwMi5zbXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAyLnRjYXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0Y2FwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNsaWdodHNzb2Z0d2FyZS5pbWFnZXNjYWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNtLnBvc3QtaXQtbm90ZXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwd25cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWNjcGFjLnNpbXBseS5hc29cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhc29cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWNjcGFjLnNpbXBseS5pbXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpbXBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWN1Y29ib2xcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhY3VcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWN1Y29ycFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImF0Y1wiLFwiYWN1dGNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWRvYmUuYWlyLWFwcGxpY2F0aW9uLWluc3RhbGxlci1wYWNrYWdlK3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWlyXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFkb2JlLmZsYXNoLm1vdmllXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5mb3Jtc2NlbnRyYWwuZmNkdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZjZHRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWRvYmUuZnhwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZnhwXCIsXCJmeHBsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFkb2JlLnBhcnRpYWwtdXBsb2FkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hZG9iZS54ZHAreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4ZHBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWRvYmUueGZkZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhmZGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWV0aGVyLmltcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWZwYy5hZnBsaW5lZGF0YVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWZwYy5hZnBsaW5lZGF0YS1wYWdlZGVmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hZnBjLmNtb2NhLWNtcmVzb3VyY2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFmcGMuZm9jYS1jaGFyc2V0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hZnBjLmZvY2EtY29kZWRmb250XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hZnBjLmZvY2EtY29kZXBhZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFmcGMubW9kY2FcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFmcGMubW9kY2EtY210YWJsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWZwYy5tb2RjYS1mb3JtZGVmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hZnBjLm1vZGNhLW1lZGl1bW1hcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWZwYy5tb2RjYS1vYmplY3Rjb250YWluZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFmcGMubW9kY2Etb3ZlcmxheVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWZwYy5tb2RjYS1wYWdlc2VnbWVudFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWdlXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFoLWJhcmNvZGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFoZWFkLnNwYWNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWhlYWRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWlyemlwLmZpbGVzZWN1cmUuYXpmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXpmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFpcnppcC5maWxlc2VjdXJlLmF6c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImF6c1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hbWFkZXVzK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYW1hem9uLmVib29rXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhendcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYW1hem9uLm1vYmk4LWVib29rXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hbWVyaWNhbmR5bmFtaWNzLmFjY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFjY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hbWlnYS5hbWlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhbWlcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYW11bmRzZW4ubWF6ZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYW5kcm9pZC5vdGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFuZHJvaWQucGFja2FnZS1hcmNoaXZlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhcGtcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYW5raVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYW5zZXItd2ViLWNlcnRpZmljYXRlLWlzc3VlLWluaXRpYXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjaWlcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYW5zZXItd2ViLWZ1bmRzLXRyYW5zZmVyLWluaXRpYXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZ0aVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hbnRpeC5nYW1lLWNvbXBvbmVudFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImF0eFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hcGFjaGUuYXJyb3cuZmlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYXBhY2hlLmFycm93LnN0cmVhbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYXBhY2hlLnRocmlmdC5iaW5hcnlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFwYWNoZS50aHJpZnQuY29tcGFjdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYXBhY2hlLnRocmlmdC5qc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hcGkranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hcGxleHRvci53YXJycCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFwb3RoZWtlbmRlLnJlc2VydmF0aW9uK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYXBwbGUuaW5zdGFsbGVyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXBrZ1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hcHBsZS5rZXlub3RlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wia2V5XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFwcGxlLm1wZWd1cmxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtM3U4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFwcGxlLm51bWJlcnNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJudW1iZXJzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFwcGxlLnBhZ2VzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGFnZXNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYXBwbGUucGtwYXNzXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGtwYXNzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFyYXN0cmEuc3dpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hcmlzdGFuZXR3b3Jrcy5zd2lcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzd2lcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYXJ0aXNhbitqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFydHNxdWFyZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYXN0cmFlYS1zb2Z0d2FyZS5pb3RhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaW90YVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hdWRpb2dyYXBoXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWVwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmF1dG9wYWNrYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hdmFsb24ranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hdmlzdGFyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5iYWxzYW1pcS5ibW1sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYm1tbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5iYWxzYW1pcS5ibXByXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5iYW5hbmEtYWNjb3VudGluZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYmJmLnVzcC5lcnJvclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYmJmLnVzcC5tc2dcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmJiZi51c3AubXNnK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYmVraXR6dXItc3RlY2granNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5iaW50Lm1lZC1jb250ZW50XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5iaW9wYXgucmRmK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ibGluay1pZGItdmFsdWUtd3JhcHBlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYmx1ZWljZS5tdWx0aXBhc3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtcG1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYmx1ZXRvb3RoLmVwLm9vYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYmx1ZXRvb3RoLmxlLm9vYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYm1pXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYm1pXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmJwZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYnBmM1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYnVzaW5lc3NvYmplY3RzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicmVwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmJ5dS51YXBpK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2FiLWpzY3JpcHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNhbm9uLWNwZGxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNhbm9uLWxpcHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNhcGFzeXN0ZW1zLXBnK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2VuZGlvLnRoaW5saW5jLmNsaWVudGNvbmZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNlbnR1cnktc3lzdGVtcy50Y3Bfc3RyZWFtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jaGVtZHJhdyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNkeG1sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNoZXNzLXBnblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2hpcG51dHMua2FyYW9rZS1tbWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtbWRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2llZGlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNpbmRlcmVsbGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjZHlcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2lycGFjay5pc2RuLWV4dFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2l0YXRpb25zdHlsZXMuc3R5bGUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjc2xcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2xheW1vcmVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjbGFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2xvYW50by5ycDlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJycDlcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2xvbmsuYzRncm91cFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImM0Z1wiLFwiYzRkXCIsXCJjNGZcIixcImM0cFwiLFwiYzR1XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNsdWV0cnVzdC5jYXJ0b21vYmlsZS1jb25maWdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjMTFhbWNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2x1ZXRydXN0LmNhcnRvbW9iaWxlLWNvbmZpZy1wa2dcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjMTFhbXpcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY29mZmVlc2NyaXB0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jb2xsYWJpby54b2RvY3VtZW50cy5kb2N1bWVudFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY29sbGFiaW8ueG9kb2N1bWVudHMuZG9jdW1lbnQtdGVtcGxhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNvbGxhYmlvLnhvZG9jdW1lbnRzLnByZXNlbnRhdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY29sbGFiaW8ueG9kb2N1bWVudHMucHJlc2VudGF0aW9uLXRlbXBsYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jb2xsYWJpby54b2RvY3VtZW50cy5zcHJlYWRzaGVldFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY29sbGFiaW8ueG9kb2N1bWVudHMuc3ByZWFkc2hlZXQtdGVtcGxhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNvbGxlY3Rpb24ranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jb2xsZWN0aW9uLmRvYytqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNvbGxlY3Rpb24ubmV4dCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNvbWljYm9vayt6aXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNvbWljYm9vay1yYXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNvbW1lcmNlLWJhdHRlbGxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jb21tb25zcGFjZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNzcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jb250YWN0LmNtc2dcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjZGJjbXNnXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNvcmVvcy5pZ25pdGlvbitqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNvc21vY2FsbGVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY21jXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNyaWNrLmNsaWNrZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjbGt4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNyaWNrLmNsaWNrZXIua2V5Ym9hcmRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjbGtrXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNyaWNrLmNsaWNrZXIucGFsZXR0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNsa3BcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3JpY2suY2xpY2tlci50ZW1wbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNsa3RcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3JpY2suY2xpY2tlci53b3JkYmFua1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNsa3dcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3JpdGljYWx0b29scy53YnMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3YnNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3J5cHRpaS5waXBlK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3J5cHRvLXNoYWRlLWZpbGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNyeXB0b21hdG9yLmVuY3J5cHRlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3J5cHRvbWF0b3IudmF1bHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmN0Yy1wb3NtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBtbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jdGN0LndzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jdXBzLXBkZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3Vwcy1wb3N0c2NyaXB0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jdXBzLXBwZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBwZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jdXBzLXJhc3RlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3Vwcy1yYXdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmN1cmxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmN1cmwuY2FyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjYXJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3VybC5wY3VybFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGN1cmxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3lhbi5kZWFuLnJvb3QreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmN5YmFua1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3ljbG9uZWR4K2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3ljbG9uZWR4K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kMmwuY291cnNlcGFja2FnZTFwMCt6aXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmQzbS1kYXRhc2V0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kM20tcHJvYmxlbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZGFydFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGFydFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kYXRhLXZpc2lvbi5yZHpcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyZHpcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZGF0YXBhY2thZ2UranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kYXRhcmVzb3VyY2UranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kYmZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkYmZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZGViaWFuLmJpbmFyeS1wYWNrYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kZWNlLmRhdGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1dmZcIixcInV2dmZcIixcInV2ZFwiLFwidXZ2ZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kZWNlLnR0bWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1dnRcIixcInV2dnRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZGVjZS51bnNwZWNpZmllZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInV2eFwiLFwidXZ2eFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kZWNlLnppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInV2elwiLFwidXZ2elwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kZW5vdm8uZmNzZWxheW91dC1saW5rXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZmVfbGF1bmNoXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmRlc211bWUubW92aWVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmRpci1iaS5wbGF0ZS1kbC1ub3N1ZmZpeFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZG0uZGVsZWdhdGlvbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZG5hXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZG5hXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmRvY3VtZW50K2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZG9sYnkubWxwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtbHBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZG9sYnkubW9iaWxlLjFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmRvbGJ5Lm1vYmlsZS4yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kb3JlbWlyLnNjb3JlY2xvdWQtYmluYXJ5LWRvY3VtZW50XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kcGdyYXBoXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZHBnXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmRyZWFtZmFjdG9yeVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRmYWNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHJpdmUranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kcy1rZXlwb2ludFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wia3B4eFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kdGcubG9jYWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR0Zy5sb2NhbC5mbGFzaFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHRnLmxvY2FsLmh0bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR2Yi5haXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhaXRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLmR2YmlzbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLmR2YmpcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR2Yi5lc2djb250YWluZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR2Yi5pcGRjZGZ0bm90aWZhY2Nlc3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR2Yi5pcGRjZXNnYWNjZXNzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kdmIuaXBkY2VzZ2FjY2VzczJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR2Yi5pcGRjZXNncGRkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kdmIuaXBkY3JvYW1pbmdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR2Yi5pcHR2LmFsZmVjLWJhc2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR2Yi5pcHR2LmFsZmVjLWVuaGFuY2VtZW50XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kdmIubm90aWYtYWdncmVnYXRlLXJvb3QreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR2Yi5ub3RpZi1jb250YWluZXIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR2Yi5ub3RpZi1nZW5lcmljK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kdmIubm90aWYtaWEtbXNnbGlzdCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLm5vdGlmLWlhLXJlZ2lzdHJhdGlvbi1yZXF1ZXN0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kdmIubm90aWYtaWEtcmVnaXN0cmF0aW9uLXJlc3BvbnNlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kdmIubm90aWYtaW5pdCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLnBmclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLnNlcnZpY2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzdmNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHhyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5keW5hZ2VvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ2VvXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR6clwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZWFzeWthcmFva2UuY2RnZG93bmxvYWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmVjZGlzLXVwZGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZWNpcC5ybHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmVjbGlwc2UuZGl0dG8ranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lY293aW4uY2hhcnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtYWdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZWNvd2luLmZpbGVyZXF1ZXN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lY293aW4uZmlsZXVwZGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZWNvd2luLnNlcmllc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZWNvd2luLnNlcmllc3JlcXVlc3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmVjb3dpbi5zZXJpZXN1cGRhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmVmaS5pbWdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmVmaS5pc29cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmVtY2xpZW50LmFjY2Vzc3JlcXVlc3QreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmVubGl2ZW5cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJubWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZW5waGFzZS5lbnZveVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXByaW50cy5kYXRhK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lcHNvbi5lc2ZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJlc2ZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXBzb24ubXNmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXNmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmVwc29uLnF1aWNrYW5pbWVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJxYW1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXBzb24uc2FsdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNsdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lcHNvbi5zc2ZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzc2ZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXJpY3Nzb24ucXVpY2tjYWxsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lc3Bhc3MtZXNwYXNzK3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXN6aWdubzMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJlczNcIixcImV0M1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLmFvYyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXRzaS5hc2ljLWUremlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLmFzaWMtcyt6aXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV0c2kuY3VnK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLmlwdHZjb21tYW5kK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLmlwdHZkaXNjb3ZlcnkreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV0c2kuaXB0dnByb2ZpbGUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV0c2kuaXB0dnNhZC1iYyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXRzaS5pcHR2c2FkLWNvZCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXRzaS5pcHR2c2FkLW5wdnIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV0c2kuaXB0dnNlcnZpY2UreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV0c2kuaXB0dnN5bmMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV0c2kuaXB0dnVlcHJvZmlsZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXRzaS5tY2lkK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLm1oZWc1XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLm92ZXJsb2FkLWNvbnRyb2wtcG9saWN5LWRhdGFzZXQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV0c2kucHN0bit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXRzaS5zY2kreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV0c2kuc2ltc2VydnMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV0c2kudGltZXN0YW1wLXRva2VuXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLnRzbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXRzaS50c2wuZGVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldS5rYXNwYXJpYW4uY2FyK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXVkb3JhLmRhdGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV2b2x2LmVjaWcucHJvZmlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXZvbHYuZWNpZy5zZXR0aW5nc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXZvbHYuZWNpZy50aGVtZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXhzdHJlYW0tZW1wb3dlcit6aXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV4c3RyZWFtLXBhY2thZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV6cGl4LWFsYnVtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZXoyXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV6cGl4LXBhY2thZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJlejNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZi1zZWN1cmUubW9iaWxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mYW1pbHlzZWFyY2guZ2VkY29tK3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZmFzdGNvcHktZGlzay1pbWFnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZmRmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZmRmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZkc24ubXNlZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtc2VlZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mZHNuLnNlZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzZWVkXCIsXCJkYXRhbGVzc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mZnNuc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZmljbGFiLmZsYit6aXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZpbG1pdC56ZmNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZpbnRzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5maXJlbW9ua2V5cy5jbG91ZGNlbGxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZsb2dyYXBoaXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJncGhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZmx1eHRpbWUuY2xpcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZ0Y1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mb250LWZvbnRmb3JnZS1zZmRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZyYW1lbWFrZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmbVwiLFwiZnJhbWVcIixcIm1ha2VyXCIsXCJib29rXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZyb2dhbnMuZm5jXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZm5jXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZyb2dhbnMubHRmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibHRmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZzYy53ZWJsYXVuY2hcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmc2NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnVqaWZpbG0uZmIuZG9jdXdvcmtzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mdWppZmlsbS5mYi5kb2N1d29ya3MuYmluZGVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mdWppZmlsbS5mYi5kb2N1d29ya3MuY29udGFpbmVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mdWppZmlsbS5mYi5qZmkreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZ1aml0c3Uub2FzeXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvYXNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnVqaXRzdS5vYXN5czJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvYTJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnVqaXRzdS5vYXN5czNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvYTNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnVqaXRzdS5vYXN5c2dwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZmc1XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZ1aml0c3Uub2FzeXNwcnNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJiaDJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnVqaXhlcm94LmFydC1leFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnVqaXhlcm94LmFydDRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZ1aml4ZXJveC5kZGRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkZGRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnVqaXhlcm94LmRvY3V3b3Jrc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhkd1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mdWppeGVyb3guZG9jdXdvcmtzLmJpbmRlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhiZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mdWppeGVyb3guZG9jdXdvcmtzLmNvbnRhaW5lclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnVqaXhlcm94LmhicGxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZ1dC1taXNuZXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZ1dG9pbitjYm9yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mdXRvaW4ranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mdXp6eXNoZWV0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZnpzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdlbm9tYXRpeC50dXhlZG9cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0eGRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ2VudGljcy5ncmQranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5nZW8ranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5nZW9jdWJlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5nZW9nZWJyYS5maWxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ2diXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdlb2dlYnJhLnNsaWRlc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ2VvZ2VicmEudG9vbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdndFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5nZW9tZXRyeS1leHBsb3JlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdleFwiLFwiZ3JlXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdlb25leHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJneHRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ2VvcGxhblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImcyd1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5nZW9zcGFjZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImczd1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5nZXJiZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdsb2JhbHBsYXRmb3JtLmNhcmQtY29udGVudC1tZ3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdsb2JhbHBsYXRmb3JtLmNhcmQtY29udGVudC1tZ3QtcmVzcG9uc2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdteFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdteFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5kb2N1bWVudFwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdkb2NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMucHJlc2VudGF0aW9uXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ3NsaWRlc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5zcHJlYWRzaGVldFwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdzaGVldFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5nb29nbGUtZWFydGgua21sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wia21sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdvb2dsZS1lYXJ0aC5rbXpcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJrbXpcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ292LnNrLmUtZm9ybSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ292LnNrLmUtZm9ybSt6aXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdvdi5zay54bWxkYXRhY29udGFpbmVyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ncmFmZXFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJncWZcIixcImdxc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ncmlkbXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdyb292ZS1hY2NvdW50XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ2FjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdyb292ZS1oZWxwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ2hmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdyb292ZS1pZGVudGl0eS1tZXNzYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ2ltXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdyb292ZS1pbmplY3RvclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdydlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ncm9vdmUtdG9vbC1tZXNzYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ3RtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdyb292ZS10b29sLXRlbXBsYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widHBsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdyb292ZS12Y2FyZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInZjZ1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5oYWwranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5oYWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJoYWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaGFuZGhlbGQtZW50ZXJ0YWlubWVudCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInptbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5oYmNpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaGJjaVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5oYytqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmhjbC1iaXJlcG9ydHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmhkdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaGVyb2t1K2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaGhlLmxlc3Nvbi1wbGF5ZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJsZXNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaGw3Y2RhK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmhsN3YyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmhwLWhwZ2xcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJocGdsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmhwLWhwaWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJocGlkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmhwLWhwc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImhwc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ocC1qbHl0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiamx0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmhwLXBjbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBjbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ocC1wY2x4bFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBjbHhsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmh0dHBob25lXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5oeWRyb3N0YXRpeC5zb2YtZGF0YVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNmZC1oZHN0eFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5oeXBlcitqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmh5cGVyLWl0ZW0ranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5oeXBlcmRyaXZlK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaHpuLTNkLWNyb3Nzd29yZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaWJtLmFmcGxpbmVkYXRhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pYm0uZWxlY3Ryb25pYy1tZWRpYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaWJtLm1pbmlwYXlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtcHlcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaWJtLm1vZGNhcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFmcFwiLFwibGlzdGFmcFwiLFwibGlzdDM4MjBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaWJtLnJpZ2h0cy1tYW5hZ2VtZW50XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaXJtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmlibS5zZWN1cmUtY29udGFpbmVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaWNjcHJvZmlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImljY1wiLFwiaWNtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmllZWUuMTkwNVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaWdsb2FkZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpZ2xcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW1hZ2VtZXRlci5mb2xkZXIremlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pbWFnZW1ldGVyLmltYWdlK3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW1tZXJ2aXNpb24taXZwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaXZwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmltbWVydmlzaW9uLWl2dVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIml2dVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pbXMuaW1zY2N2MXAxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pbXMuaW1zY2N2MXAyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pbXMuaW1zY2N2MXAzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pbXMubGlzLnYyLnJlc3VsdCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmltcy5sdGkudjIudG9vbGNvbnN1bWVycHJvZmlsZStqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmltcy5sdGkudjIudG9vbHByb3h5K2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW1zLmx0aS52Mi50b29scHJveHkuaWQranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pbXMubHRpLnYyLnRvb2xzZXR0aW5ncytqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmltcy5sdGkudjIudG9vbHNldHRpbmdzLnNpbXBsZStqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmluZm9ybWVkY29udHJvbC5ybXMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmluZm9ybWl4LXZpc2lvbmFyeVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW5mb3RlY2gucHJvamVjdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW5mb3RlY2gucHJvamVjdCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW5ub3BhdGgud2FtcC5ub3RpZmljYXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmluc29ycy5pZ21cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpZ21cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW50ZXJjb24uZm9ybW5ldFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhwd1wiLFwieHB4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmludGVyZ2VvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaTJnXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmludGVydHJ1c3QuZGlnaWJveFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW50ZXJ0cnVzdC5ubmNwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pbnR1LnFib1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInFib1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pbnR1LnFmeFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInFmeFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pcHRjLmcyLmNhdGFsb2dpdGVtK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pcHRjLmcyLmNvbmNlcHRpdGVtK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pcHRjLmcyLmtub3dsZWRnZWl0ZW0reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmlwdGMuZzIubmV3c2l0ZW0reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmlwdGMuZzIubmV3c21lc3NhZ2UreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmlwdGMuZzIucGFja2FnZWl0ZW0reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmlwdGMuZzIucGxhbm5pbmdpdGVtK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pcHVucGx1Z2dlZC5yY3Byb2ZpbGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyY3Byb2ZpbGVcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaXJlcG9zaXRvcnkucGFja2FnZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImlycFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pcy14cHJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4cHJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaXNhYy5mY3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmY3NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaXNvMTE3ODMtMTAremlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5qYW1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqYW1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuamFwYW5uZXQtZGlyZWN0b3J5LXNlcnZpY2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmphcGFubmV0LWpwbnN0b3JlLXdha2V1cFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuamFwYW5uZXQtcGF5bWVudC13YWtldXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmphcGFubmV0LXJlZ2lzdHJhdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuamFwYW5uZXQtcmVnaXN0cmF0aW9uLXdha2V1cFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuamFwYW5uZXQtc2V0c3RvcmUtd2FrZXVwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5qYXBhbm5ldC12ZXJpZmljYXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmphcGFubmV0LXZlcmlmaWNhdGlvbi13YWtldXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmpjcC5qYXZhbWUubWlkbGV0LXJtc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJtc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5qaXNwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiamlzcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5qb29zdC5qb2RhLWFyY2hpdmVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqb2RhXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmpzay5pc2RuLW5nblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQua2Fob290elwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImt0elwiLFwia3RyXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmtkZS5rYXJib25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJrYXJib25cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQua2RlLmtjaGFydFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNocnRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQua2RlLmtmb3JtdWxhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wia2ZvXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmtkZS5raXZpb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZsd1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5rZGUua29udG91clwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImtvblwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5rZGUua3ByZXNlbnRlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImtwclwiLFwia3B0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmtkZS5rc3ByZWFkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wia3NwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmtkZS5rd29yZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImt3ZFwiLFwia3d0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmtlbmFtZWFhcHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJodGtlXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmtpZHNwaXJhdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImtpYVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5raW5hclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImtuZVwiLFwia25wXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmtvYW5cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJza3BcIixcInNrZFwiLFwic2t0XCIsXCJza21cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQua29kYWstZGVzY3JpcHRvclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNzZVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5sYXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmxhcy5sYXMranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5sYXMubGFzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibGFzeG1sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmxhc3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubGVhcCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmxpYmVydHktcmVxdWVzdCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubGxhbWFncmFwaGljcy5saWZlLWJhbGFuY2UuZGVza3RvcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImxiZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5sbGFtYWdyYXBoaWNzLmxpZmUtYmFsYW5jZS5leGNoYW5nZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImxiZVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5sb2dpcGlwZS5jaXJjdWl0K3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubG9vbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubG90dXMtMS0yLTNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCIxMjNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubG90dXMtYXBwcm9hY2hcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhcHJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubG90dXMtZnJlZWxhbmNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicHJlXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmxvdHVzLW5vdGVzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibnNmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmxvdHVzLW9yZ2FuaXplclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9yZ1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5sb3R1cy1zY3JlZW5jYW1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzY21cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubG90dXMtd29yZHByb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImx3cFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tYWNwb3J0cy5wb3J0cGtnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicG9ydHBrZ1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tYXBib3gtdmVjdG9yLXRpbGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtdnRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubWFybGluLmRybS5hY3Rpb250b2tlbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubWFybGluLmRybS5jb25mdG9rZW4reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1hcmxpbi5kcm0ubGljZW5zZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubWFybGluLmRybS5tZGNmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tYXNvbitqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1heGFyLmFyY2hpdmUuM3R6K3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubWF4bWluZC5tYXhtaW5kLWRiXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tY2RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtY2RcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubWVkY2FsY2RhdGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtYzFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubWVkaWFzdGF0aW9uLmNka2V5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2RrZXlcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubWVyaWRpYW4tc2xpbmdzaG90XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tZmVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXdmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1mbXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtZm1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubWljcm8ranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5taWNyb2dyYWZ4LmZsb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZsb1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5taWNyb2dyYWZ4LmlneFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImlneFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5taWNyb3NvZnQucG9ydGFibGUtZXhlY3V0YWJsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubWljcm9zb2Z0LndpbmRvd3MudGh1bWJuYWlsLWNhY2hlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5taWVsZStqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1pZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1pZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5taW5pc29mdC1ocDMwMDAtc2F2ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubWl0c3ViaXNoaS5taXN0eS1ndWFyZC50cnVzdHdlYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW9iaXVzLmRhZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRhZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tb2JpdXMuZGlzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGlzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1vYml1cy5tYmtcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtYmtcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW9iaXVzLm1xeVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1xeVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tb2JpdXMubXNsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXNsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1vYml1cy5wbGNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwbGNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW9iaXVzLnR4ZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInR4ZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tb3BodW4uYXBwbGljYXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtcG5cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW9waHVuLmNlcnRpZmljYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXBjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1vdG9yb2xhLmZsZXhzdWl0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW90b3JvbGEuZmxleHN1aXRlLmFkc2lcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1vdG9yb2xhLmZsZXhzdWl0ZS5maXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1vdG9yb2xhLmZsZXhzdWl0ZS5nb3RhcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW90b3JvbGEuZmxleHN1aXRlLmttclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW90b3JvbGEuZmxleHN1aXRlLnR0Y1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW90b3JvbGEuZmxleHN1aXRlLndlbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW90b3JvbGEuaXBybVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW96aWxsYS54dWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4dWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtM21mZG9jdW1lbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLWFydGdhbHJ5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2lsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLWFzZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtY2FiLWNvbXByZXNzZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjYWJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtY29sb3IuaWNjcHJvZmlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhsc1wiLFwieGxtXCIsXCJ4bGFcIixcInhsY1wiLFwieGx0XCIsXCJ4bHdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuYWRkaW4ubWFjcm9lbmFibGVkLjEyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGxhbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5zaGVldC5iaW5hcnkubWFjcm9lbmFibGVkLjEyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGxzYlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5zaGVldC5tYWNyb2VuYWJsZWQuMTJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4bHNtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnRlbXBsYXRlLm1hY3JvZW5hYmxlZC4xMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhsdG1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtZm9udG9iamVjdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZW90XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLWh0bWxoZWxwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2htXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLWltc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImltc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1scm1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJscm1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtb2ZmaWNlLmFjdGl2ZXgreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLW9mZmljZXRoZW1lXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widGhteFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1vcGVudHlwZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLW91dGxvb2tcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtc2dcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtcGFja2FnZS5vYmZ1c2NhdGVkLW9wZW50eXBlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXBraS5zZWNjYXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNhdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1wa2kuc3RsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzdGxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtcGxheXJlYWR5LmluaXRpYXRvcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBwdFwiLFwicHBzXCIsXCJwb3RcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludC5hZGRpbi5tYWNyb2VuYWJsZWQuMTJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwcGFtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQucHJlc2VudGF0aW9uLm1hY3JvZW5hYmxlZC4xMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBwdG1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludC5zbGlkZS5tYWNyb2VuYWJsZWQuMTJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzbGRtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQuc2xpZGVzaG93Lm1hY3JvZW5hYmxlZC4xMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBwc21cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludC50ZW1wbGF0ZS5tYWNyb2VuYWJsZWQuMTJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwb3RtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXByaW50ZGV2aWNlY2FwYWJpbGl0aWVzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1wcmludGluZy5wcmludHRpY2tldCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1wcmludHNjaGVtYXRpY2tldCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtcHJvamVjdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1wcFwiLFwibXB0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXRuZWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXdpbmRvd3MuZGV2aWNlcGFpcmluZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtd2luZG93cy5ud3ByaW50aW5nLm9vYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtd2luZG93cy5wcmludGVycGFpcmluZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtd2luZG93cy53c2Qub29iXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy13bWRybS5saWMtY2hsZy1yZXFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXdtZHJtLmxpYy1yZXNwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy13bWRybS5tZXRlci1jaGxnLXJlcVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtd21kcm0ubWV0ZXItcmVzcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtd29yZC5kb2N1bWVudC5tYWNyb2VuYWJsZWQuMTJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkb2NtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXdvcmQudGVtcGxhdGUubWFjcm9lbmFibGVkLjEyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZG90bVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy13b3Jrc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndwc1wiLFwid2tzXCIsXCJ3Y21cIixcIndkYlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy13cGxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3cGxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMteHBzZG9jdW1lbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4cHNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXNhLWRpc2staW1hZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zZXFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtc2VxXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zaWduXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tdWx0aWFkLmNyZWF0b3JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm11bHRpYWQuY3JlYXRvci5jaWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm11c2ljLW5pZmZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm11c2ljaWFuXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXVzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm11dmVlLnN0eWxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXN0eVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5teW5mY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRhZ2xldFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5uYWNhbWFyLnlicmlkK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubmNkLmNvbnRyb2xcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5jZC5yZWZlcmVuY2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5lYXJzdC5pbnYranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5uZWJ1bWluZC5saW5lXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5uZXJ2YW5hXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5uZXRmcHhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5ldXJvbGFuZ3VhZ2Uubmx1XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibmx1XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5pbW5cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5pbnRlbmRvLm5pdHJvLnJvbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubmludGVuZG8uc25lcy5yb21cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5pdGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJudGZcIixcIm5pdGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm9ibGVuZXQtZGlyZWN0b3J5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibm5kXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5vYmxlbmV0LXNlYWxlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm5uc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ub2JsZW5ldC13ZWJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJubndcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm9raWEuY2F0YWxvZ3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5va2lhLmNvbm1sK3dieG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ub2tpYS5jb25tbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm9raWEuaXB0di5jb25maWcreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5va2lhLmlzZHMtcmFkaW8tcHJlc2V0c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm9raWEubGFuZG1hcmsrd2J4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5va2lhLmxhbmRtYXJrK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ub2tpYS5sYW5kbWFya2NvbGxlY3Rpb24reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5va2lhLm4tZ2FnZS5hYyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5va2lhLm4tZ2FnZS5kYXRhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibmdkYXRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm9raWEubi1nYWdlLnN5bWJpYW4uaW5zdGFsbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm4tZ2FnZVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ub2tpYS5uY2RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5va2lhLnBjZCt3YnhtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm9raWEucGNkK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ub2tpYS5yYWRpby1wcmVzZXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJycHN0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5va2lhLnJhZGlvLXByZXNldHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJycHNzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5vdmFkaWdtLmVkbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImVkbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ub3ZhZGlnbS5lZHhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJlZHhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm92YWRpZ20uZXh0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZXh0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm50dC1sb2NhbC5jb250ZW50LXNoYXJlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5udHQtbG9jYWwuZmlsZS10cmFuc2ZlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubnR0LWxvY2FsLm9nd19yZW1vdGUtYWNjZXNzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5udHQtbG9jYWwuc2lwLXRhX3JlbW90ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubnR0LWxvY2FsLnNpcC10YV90Y3Bfc3RyZWFtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuY2hhcnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvZGNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmNoYXJ0LXRlbXBsYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib3RjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5kYXRhYmFzZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9kYlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuZm9ybXVsYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9kZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuZm9ybXVsYS10ZW1wbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9kZnRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmdyYXBoaWNzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib2RnXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5ncmFwaGljcy10ZW1wbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm90Z1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuaW1hZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvZGlcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmltYWdlLXRlbXBsYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib3RpXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5wcmVzZW50YXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvZHBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnByZXNlbnRhdGlvbi10ZW1wbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm90cFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuc3ByZWFkc2hlZXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvZHNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnNwcmVhZHNoZWV0LXRlbXBsYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib3RzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC50ZXh0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib2R0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC50ZXh0LW1hc3RlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9kbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQudGV4dC10ZW1wbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm90dFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQudGV4dC13ZWJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvdGhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2JuXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vY2YrY2JvclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2NpLmltYWdlLm1hbmlmZXN0LnYxK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2Z0bi5sMTBuK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2lwZi5jb250ZW50YWNjZXNzZG93bmxvYWQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9pcGYuY29udGVudGFjY2Vzc3N0cmVhbWluZyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2lwZi5jc3BnLWhleGJpbmFyeVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2lwZi5kYWUuc3ZnK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vaXBmLmRhZS54aHRtbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2lwZi5taXBwdmNvbnRyb2xtZXNzYWdlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vaXBmLnBhZS5nZW1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9pcGYuc3BkaXNjb3ZlcnkreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9pcGYuc3BkbGlzdCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2lwZi51ZXByb2ZpbGUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9pcGYudXNlcnByb2ZpbGUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9scGMtc3VnYXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4b1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEtc2N3cy1jb25maWdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS1zY3dzLWh0dHAtcmVxdWVzdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLXNjd3MtaHR0cC1yZXNwb25zZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmJjYXN0LmFzc29jaWF0ZWQtcHJvY2VkdXJlLXBhcmFtZXRlcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmJjYXN0LmRybS10cmlnZ2VyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuYmNhc3QuaW1kK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuYmNhc3QubHRrbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmJjYXN0Lm5vdGlmaWNhdGlvbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmJjYXN0LnByb3Zpc2lvbmluZ3RyaWdnZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5iY2FzdC5zZ2Jvb3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5iY2FzdC5zZ2RkK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuYmNhc3Quc2dkdVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmJjYXN0LnNpbXBsZS1zeW1ib2wtY29udGFpbmVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuYmNhc3Quc21hcnRjYXJkLXRyaWdnZXIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5iY2FzdC5zcHJvdit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmJjYXN0LnN0a21cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5jYWItYWRkcmVzcy1ib29rK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuY2FiLWZlYXR1cmUtaGFuZGxlcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmNhYi1wY2MreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5jYWItc3Vicy1pbnZpdGUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5jYWItdXNlci1wcmVmcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmRjZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmRjZGNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5kZDIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkZDJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmRybS5yaXNkK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuZ3JvdXAtdXNhZ2UtbGlzdCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmx3bTJtK2Nib3JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5sd20ybStqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5sd20ybSt0bHZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5wYWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5wb2MuZGV0YWlsZWQtcHJvZ3Jlc3MtcmVwb3J0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEucG9jLmZpbmFsLXJlcG9ydCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLnBvYy5ncm91cHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5wb2MuaW52b2NhdGlvbi1kZXNjcmlwdG9yK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEucG9jLm9wdGltaXplZC1wcm9ncmVzcy1yZXBvcnQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5wdXNoXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuc2NpZG0ubWVzc2FnZXMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS54Y2FwLWRpcmVjdG9yeSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hZHMtZW1haWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hZHMtZmlsZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWFkcy1mb2xkZXIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hbG9jLXN1cGwtaW5pdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub25lcGFnZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9uZXBhZ2VydGFtcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub25lcGFnZXJ0YW14XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbmVwYWdlcnRhdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub25lcGFnZXJ0YXRwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbmVwYWdlcnRhdHhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW5ibG94LmdhbWUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvYmd4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW5ibG94LmdhbWUtYmluYXJ5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVuZXllLm9lYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3Blbm9mZmljZW9yZy5leHRlbnNpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm94dFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVuc3RyZWV0bWFwLmRhdGEreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvc21cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnRpbWVzdGFtcHMub3RzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5jdXN0b20tcHJvcGVydGllcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuY3VzdG9teG1scHJvcGVydGllcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuZHJhd2luZyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuZHJhd2luZ21sLmNoYXJ0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5kcmF3aW5nbWwuY2hhcnRzaGFwZXMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmRyYXdpbmdtbC5kaWFncmFtY29sb3JzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5kcmF3aW5nbWwuZGlhZ3JhbWRhdGEreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmRyYXdpbmdtbC5kaWFncmFtbGF5b3V0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5kcmF3aW5nbWwuZGlhZ3JhbXN0eWxlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5leHRlbmRlZC1wcm9wZXJ0aWVzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5jb21tZW50YXV0aG9ycyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwuY29tbWVudHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLmhhbmRvdXRtYXN0ZXIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLm5vdGVzbWFzdGVyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5ub3Rlc3NsaWRlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5wcmVzZW50YXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwcHR4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnByZXNlbnRhdGlvbi5tYWluK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5wcmVzcHJvcHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnNsaWRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2xkeFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5zbGlkZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwuc2xpZGVsYXlvdXQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnNsaWRlbWFzdGVyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5zbGlkZXNob3dcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwcHN4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnNsaWRlc2hvdy5tYWluK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5zbGlkZXVwZGF0ZWluZm8reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnRhYmxlc3R5bGVzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC50YWdzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC50ZW1wbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBvdHhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwudGVtcGxhdGUubWFpbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwudmlld3Byb3BzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLmNhbGNjaGFpbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5jaGFydHNoZWV0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLmNvbW1lbnRzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLmNvbm5lY3Rpb25zK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLmRpYWxvZ3NoZWV0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLmV4dGVybmFsbGluayt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5waXZvdGNhY2hlZGVmaW5pdGlvbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5waXZvdGNhY2hlcmVjb3Jkcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5waXZvdHRhYmxlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnF1ZXJ5dGFibGUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwucmV2aXNpb25oZWFkZXJzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnJldmlzaW9ubG9nK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoYXJlZHN0cmluZ3MreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hlZXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4bHN4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hlZXQubWFpbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldG1ldGFkYXRhK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnN0eWxlcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC50YWJsZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC50YWJsZXNpbmdsZWNlbGxzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnRlbXBsYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGx0eFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnRlbXBsYXRlLm1haW4reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwudXNlcm5hbWVzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnZvbGF0aWxlZGVwZW5kZW5jaWVzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLndvcmtzaGVldCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQudGhlbWUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnRoZW1lb3ZlcnJpZGUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnZtbGRyYXdpbmdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuY29tbWVudHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkb2N4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnQuZ2xvc3NhcnkreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnQubWFpbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5lbmRub3Rlcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5mb250dGFibGUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZm9vdGVyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmZvb3Rub3Rlcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5udW1iZXJpbmcreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuc2V0dGluZ3MreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuc3R5bGVzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLnRlbXBsYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZG90eFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLnRlbXBsYXRlLm1haW4reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwud2Vic2V0dGluZ3MreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLXBhY2thZ2UuY29yZS1wcm9wZXJ0aWVzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1wYWNrYWdlLmRpZ2l0YWwtc2lnbmF0dXJlLXhtbHNpZ25hdHVyZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtcGFja2FnZS5yZWxhdGlvbnNoaXBzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcmFjbGUucmVzb3VyY2UranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcmFuZ2UuaW5kYXRhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vc2EubmV0ZGVwbG95XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vc2dlby5tYXBndWlkZS5wYWNrYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibWdwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9zZ2kuYnVuZGxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vc2dpLmRwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZHBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3NnaS5zdWJzeXN0ZW1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJlc2FcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3Rwcy5jdC1raXAreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm94bGkuY291bnRncmFwaFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucGFnZXJkdXR5K2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucGFsbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBkYlwiLFwicHFhXCIsXCJvcHJjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBhbm9wbHlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBhb3MueG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wYXRlbnRkaXZlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wYXRpZW50ZWNvbW1zZG9jXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wYXdhYWZpbGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwYXdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucGNvc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucGcuZm9ybWF0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3RyXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBnLm9zYXNsaVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImVpNlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5waWFjY2Vzcy5hcHBsaWNhdGlvbi1saWNlbmNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5waWNzZWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJlZmlmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBtaS53aWRnZXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3Z1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wb2MuZ3JvdXAtYWR2ZXJ0aXNlbWVudCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucG9ja2V0bGVhcm5cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwbGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucG93ZXJidWlsZGVyNlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBiZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wb3dlcmJ1aWxkZXI2LXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBvd2VyYnVpbGRlcjdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBvd2VyYnVpbGRlcjctc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucG93ZXJidWlsZGVyNzVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBvd2VyYnVpbGRlcjc1LXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnByZW1pbmV0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wcmV2aWV3c3lzdGVtcy5ib3hcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJib3hcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucHJvdGV1cy5tYWdhemluZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1nelwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wc2ZzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wdWJsaXNoYXJlLWRlbHRhLXRyZWVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJxcHNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucHZpLnB0aWQxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicHRpZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wd2ctbXVsdGlwbGV4ZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnB3Zy14aHRtbC1wcmludCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucXVhbGNvbW0uYnJldy1hcHAtcmVzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5xdWFyYW50YWluZW5ldFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucXVhcmsucXVhcmt4cHJlc3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJxeGRcIixcInF4dFwiLFwicXdkXCIsXCJxd3RcIixcInF4bFwiLFwicXhiXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnF1b2JqZWN0LXF1b3hkb2N1bWVudFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmFkaXN5cy5tb21sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yYWRpc3lzLm1zbWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJhZGlzeXMubXNtbC1hdWRpdCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmFkaXN5cy5tc21sLWF1ZGl0LWNvbmYreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJhZGlzeXMubXNtbC1hdWRpdC1jb25uK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yYWRpc3lzLm1zbWwtYXVkaXQtZGlhbG9nK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yYWRpc3lzLm1zbWwtYXVkaXQtc3RyZWFtK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yYWRpc3lzLm1zbWwtY29uZit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmFkaXN5cy5tc21sLWRpYWxvZyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmFkaXN5cy5tc21sLWRpYWxvZy1iYXNlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yYWRpc3lzLm1zbWwtZGlhbG9nLWZheC1kZXRlY3QreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJhZGlzeXMubXNtbC1kaWFsb2ctZmF4LXNlbmRyZWN2K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yYWRpc3lzLm1zbWwtZGlhbG9nLWdyb3VwK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yYWRpc3lzLm1zbWwtZGlhbG9nLXNwZWVjaCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmFkaXN5cy5tc21sLWRpYWxvZy10cmFuc2Zvcm0reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJhaW5zdG9yLmRhdGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJhcGlkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yYXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyYXJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmVhbHZuYy5iZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJiZWRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmVjb3JkYXJlLm11c2ljeG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXhsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJlY29yZGFyZS5tdXNpY3htbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm11c2ljeG1sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJlbmxlYXJuLnJscHJpbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJlc2lsaWVudC5sb2dpY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmVzdGZ1bCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJpZy5jcnlwdG9ub3RlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY3J5cHRvbm90ZVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yaW0uY29kXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjb2RcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucm4tcmVhbG1lZGlhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJybVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ybi1yZWFsbWVkaWEtdmJyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJybXZiXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJvdXRlNjYubGluazY2K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibGluazY2XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJzLTI3NHhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJ1Y2t1cy5kb3dubG9hZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuczNzbXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNhaWxpbmd0cmFja2VyLnRyYWNrXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3RcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2FyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zYm0uY2lkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zYm0ubWlkMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2NyaWJ1c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2VhbGVkLjNkZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2VhbGVkLmNzZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2VhbGVkLmRvY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2VhbGVkLmVtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2VhbGVkLm1odFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2VhbGVkLm5ldFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2VhbGVkLnBwdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2VhbGVkLnRpZmZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNlYWxlZC54bHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNlYWxlZG1lZGlhLnNvZnRzZWFsLmh0bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNlYWxlZG1lZGlhLnNvZnRzZWFsLnBkZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2VlbWFpbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNlZVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zZWlzK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2VtYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNlbWFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2VtZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNlbWRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2VtZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNlbWZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2hhZGUtc2F2ZS1maWxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zaGFuYS5pbmZvcm1lZC5mb3JtZGF0YVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImlmbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zaGFuYS5pbmZvcm1lZC5mb3JtdGVtcGxhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpdHBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2hhbmEuaW5mb3JtZWQuaW50ZXJjaGFuZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpaWZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2hhbmEuaW5mb3JtZWQucGFja2FnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImlwa1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zaG9vdHByb29mK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2hvcGtpY2sranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zaHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNoeFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2lncm9rLnNlc3Npb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNpbXRlY2gtbWluZG1hcHBlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInR3ZFwiLFwidHdkc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zaXJlbitqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNtYWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtbWZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc21hcnQubm90ZWJvb2tcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNtYXJ0LnRlYWNoZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0ZWFjaGVyXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNuZXNkZXYtcGFnZS10YWJsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc29mdHdhcmU2MDIuZmlsbGVyLmZvcm0reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmb1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zb2Z0d2FyZTYwMi5maWxsZXIuZm9ybS14bWwtemlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zb2xlbnQuc2RrbSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNka21cIixcInNka2RcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3BvdGZpcmUuZHhwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZHhwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNwb3RmaXJlLnNmc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNmc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zcWxpdGUzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zc3MtY29kXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zc3MtZHRmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zc3MtbnRmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zdGFyZGl2aXNpb24uY2FsY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2RjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN0YXJkaXZpc2lvbi5kcmF3XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzZGFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3RhcmRpdmlzaW9uLmltcHJlc3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNkZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zdGFyZGl2aXNpb24ubWF0aFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic21mXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN0YXJkaXZpc2lvbi53cml0ZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNkd1wiLFwidm9yXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN0YXJkaXZpc2lvbi53cml0ZXItZ2xvYmFsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzZ2xcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3RlcG1hbmlhLnBhY2thZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzbXppcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zdGVwbWFuaWEuc3RlcGNoYXJ0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic21cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3RyZWV0LXN0cmVhbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3VuLndhZGwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3YWRsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN1bi54bWwuY2FsY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3hjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN1bi54bWwuY2FsYy50ZW1wbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3RjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN1bi54bWwuZHJhd1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3hkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN1bi54bWwuZHJhdy50ZW1wbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3RkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN1bi54bWwuaW1wcmVzc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3hpXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN1bi54bWwuaW1wcmVzcy50ZW1wbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3RpXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN1bi54bWwubWF0aFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3htXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN1bi54bWwud3JpdGVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzeHdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC53cml0ZXIuZ2xvYmFsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzeGdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC53cml0ZXIudGVtcGxhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInN0d1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zdXMtY2FsZW5kYXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzdXNcIixcInN1c3BcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3ZkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3ZkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN3aWZ0dmlldy1pY3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN5Y2xlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zeWZ0K2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3ltYmlhbi5pbnN0YWxsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzaXNcIixcInNpc3hcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3luY21sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4c21cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3luY21sLmRtK3dieG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJiZG1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3luY21sLmRtK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4ZG1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3luY21sLmRtLm5vdGlmaWNhdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3luY21sLmRtZGRmK3dieG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zeW5jbWwuZG1kZGYreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRkZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zeW5jbWwuZG10bmRzK3dieG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zeW5jbWwuZG10bmRzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN5bmNtbC5kcy5ub3RpZmljYXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnRhYmxlc2NoZW1hK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudGFvLmludGVudC1tb2R1bGUtYXJjaGl2ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRhb1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC50Y3BkdW1wLnBjYXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwY2FwXCIsXCJjYXBcIixcImRtcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC50aGluay1jZWxsLnBwdHRjK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudG1kLm1lZGlhZmxleC5hcGkreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnRtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudG1vYmlsZS1saXZldHZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0bW9cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudHJpLm9uZXNvdXJjZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudHJpZC50cHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0cHRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudHJpc2NhcGUubXhzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXhzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnRydWVhcHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0cmFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudHJ1ZWRvY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudWJpc29mdC53ZWJwbGF5ZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnVmZGxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1ZmRcIixcInVmZGxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudWlxLnRoZW1lXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widXR6XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnVtYWppblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInVtalwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC51bml0eVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInVuaXR5d2ViXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnVvbWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1b21sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnVwbGFuZXQuYWxlcnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnVwbGFuZXQuYWxlcnQtd2J4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnVwbGFuZXQuYmVhcmVyLWNob2ljZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudXBsYW5ldC5iZWFyZXItY2hvaWNlLXdieG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC51cGxhbmV0LmNhY2hlb3BcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnVwbGFuZXQuY2FjaGVvcC13YnhtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudXBsYW5ldC5jaGFubmVsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC51cGxhbmV0LmNoYW5uZWwtd2J4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnVwbGFuZXQubGlzdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudXBsYW5ldC5saXN0LXdieG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC51cGxhbmV0Lmxpc3RjbWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnVwbGFuZXQubGlzdGNtZC13YnhtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudXBsYW5ldC5zaWduYWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnVyaS1tYXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnZhbHZlLnNvdXJjZS5tYXRlcmlhbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudmN4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widmN4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnZkLXN0dWR5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC52ZWN0b3J3b3Jrc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudmVsK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudmVyaW1hdHJpeC52Y2FzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC52ZXJpdG9uZS5haW9uK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudmVyeWFudC50aGluXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC52ZXMuZW5jcnlwdGVkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC52aWRzb2Z0LnZpZGNvbmZlcmVuY2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnZpc2lvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widnNkXCIsXCJ2c3RcIixcInZzc1wiLFwidnN3XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnZpc2lvbmFyeVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInZpc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC52aXZpZGVuY2Uuc2NyaXB0ZmlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudnNmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widnNmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLndhcC5zaWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLndhcC5zbGNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLndhcC53YnhtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid2J4bWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud2FwLndtbGNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3bWxjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLndhcC53bWxzY3JpcHRjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid21sc2NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud2VidHVyYm9cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3dGJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud2ZhLmRwcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud2ZhLnAycFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud2ZhLndzY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud2luZG93cy5kZXZpY2VwYWlyaW5nXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53bWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLndtZi5ib290c3RyYXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLndvbGZyYW0ubWF0aGVtYXRpY2FcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLndvbGZyYW0ubWF0aGVtYXRpY2EucGFja2FnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud29sZnJhbS5wbGF5ZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJuYnBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud29yZHBlcmZlY3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3cGRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud3FkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid3FkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLndycS1ocDMwMDAtbGFiZWxsZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnd0LnN0ZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInN0ZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53di5jc3Ard2J4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnd2LmNzcCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud3Yuc3NwK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC54YWNtbCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnhhcmFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4YXJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQueGZkbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhmZGxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQueGZkbC53ZWJmb3JtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC54bWkreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnhtcGllLmNwa2dcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnhtcGllLmRwa2dcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnhtcGllLnBsYW5cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnhtcGllLnBwa2dcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnhtcGllLnhsaW1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnlhbWFoYS5odi1kaWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJodmRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQueWFtYWhhLmh2LXNjcmlwdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImh2c1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC55YW1haGEuaHYtdm9pY2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJodnBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQueWFtYWhhLm9wZW5zY29yZWZvcm1hdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9zZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC55YW1haGEub3BlbnNjb3JlZm9ybWF0Lm9zZnB2Zyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9zZnB2Z1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC55YW1haGEucmVtb3RlLXNldHVwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC55YW1haGEuc21hZi1hdWRpb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNhZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC55YW1haGEuc21hZi1waHJhc2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzcGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQueWFtYWhhLnRocm91Z2gtbmduXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC55YW1haGEudHVubmVsLXVkcGVuY2FwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC55YW93ZW1lXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC55ZWxsb3dyaXZlci1jdXN0b20tbWVudVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNtcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC55b3V0dWJlLnl0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC56dWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ6aXJcIixcInppcnpcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuenphenouZGVjayt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInphelwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZvaWNleG1sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1widnhtbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZvdWNoZXItY21zK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92cS1ydGNweHJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vd2FzbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid2FzbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3dhdGNoZXJpbmZvK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid2lmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vd2VicHVzaC1vcHRpb25zK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi93aG9pc3BwLXF1ZXJ5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3dob2lzcHAtcmVzcG9uc2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vd2lkZ2V0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid2d0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vd2luaGxwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJobHBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi93aXRhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3dvcmRwZXJmZWN0NS4xXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3dzZGwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3c2RsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vd3Nwb2xpY3kreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3c3BvbGljeVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtN3otY29tcHJlc3NlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiN3pcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWFiaXdvcmRcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFid1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtYWNlLWNvbXByZXNzZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFjZVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtYW1mXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1hcHBsZS1kaXNraW1hZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRtZ1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtYXJqXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXJqXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1hdXRob3J3YXJlLWJpblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWFiXCIsXCJ4MzJcIixcInUzMlwiLFwidm94XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1hdXRob3J3YXJlLW1hcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWFtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1hdXRob3J3YXJlLXNlZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWFzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1iY3Bpb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYmNwaW9cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWJkb2NcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJiZG9jXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1iaXR0b3JyZW50XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0b3JyZW50XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1ibG9yYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYmxiXCIsXCJibG9yYlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtYnppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYnpcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWJ6aXAyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJiejJcIixcImJvelwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtY2JyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjYnJcIixcImNiYVwiLFwiY2J0XCIsXCJjYnpcIixcImNiN1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtY2RsaW5rXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ2Y2RcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWNmcy1jb21wcmVzc2VkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjZnNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWNoYXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNoYXRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWNoZXNzLXBnblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGduXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1jaHJvbWUtZXh0ZW5zaW9uXCI6IHtcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY3J4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1jb2NvYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJuZ2lueFwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjY29cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWNvbXByZXNzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1jb25mZXJlbmNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJuc2NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWNwaW9cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNwaW9cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWNzaFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY3NoXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1kZWJcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1kZWJpYW4tcGFja2FnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGViXCIsXCJ1ZGViXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1kZ2MtY29tcHJlc3NlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGdjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1kaXJlY3RvclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGlyXCIsXCJkY3JcIixcImR4clwiLFwiY3N0XCIsXCJjY3RcIixcImN4dFwiLFwidzNkXCIsXCJmZ2RcIixcInN3YVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZG9vbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid2FkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1kdGJuY3greG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm5jeFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZHRib29rK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkdGJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWR0YnJlc291cmNlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyZXNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWR2aVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZHZpXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1lbnZveVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZXZ5XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1ldmFcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImV2YVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZm9udC1iZGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImJkZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZm9udC1kb3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWZvbnQtZnJhbWVtYWtlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZm9udC1naG9zdHNjcmlwdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ3NmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1mb250LWxpYmdyeFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZm9udC1saW51eC1wc2ZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBzZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZm9udC1wY2ZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBjZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZm9udC1zbmZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNuZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZm9udC1zcGVlZG9cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWZvbnQtc3Vub3MtbmV3c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZm9udC10eXBlMVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGZhXCIsXCJwZmJcIixcInBmbVwiLFwiYWZtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1mb250LXZmb250XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1mcmVlYXJjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhcmNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWZ1dHVyZXNwbGFzaFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3BsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1nY2EtY29tcHJlc3NlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ2NhXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1nbHVseFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widWx4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1nbnVtZXJpY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ251bWVyaWNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWdyYW1wcy14bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdyYW1wc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZ3RhclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ3RhclwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZ3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtaGRmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJoZGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWh0dHBkLXBocFwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGhwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1pbnN0YWxsLWluc3RydWN0aW9uc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaW5zdGFsbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtaXNvOTY2MC1pbWFnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaXNvXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1pd29yay1rZXlub3RlLXNmZmtleVwiOiB7XG4gICAgXCJleHRlbnNpb25zXCI6IFtcImtleVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtaXdvcmstbnVtYmVycy1zZmZudW1iZXJzXCI6IHtcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibnVtYmVyc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtaXdvcmstcGFnZXMtc2ZmcGFnZXNcIjoge1xuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwYWdlc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtamF2YS1hcmNoaXZlLWRpZmZcIjoge1xuICAgIFwic291cmNlXCI6IFwibmdpbnhcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiamFyZGlmZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtamF2YS1qbmxwLWZpbGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImpubHBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWphdmFzY3JpcHRcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWtlZXBhc3MyXCI6IHtcbiAgICBcImV4dGVuc2lvbnNcIjogW1wia2RieFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbGF0ZXhcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImxhdGV4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1sdWEtYnl0ZWNvZGVcIjoge1xuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJsdWFjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1semgtY29tcHJlc3NlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibHpoXCIsXCJsaGFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW1ha2VzZWxmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcIm5naW54XCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJ1blwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbWllXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtaWVcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW1vYmlwb2NrZXQtZWJvb2tcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInByY1wiLFwibW9iaVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbXBlZ3VybFwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW1zLWFwcGxpY2F0aW9uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhcHBsaWNhdGlvblwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbXMtc2hvcnRjdXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImxua1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbXMtd21kXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3bWRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW1zLXdtelwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid216XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1tcy14YmFwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4YmFwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1tc2FjY2Vzc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibWRiXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1tc2JpbmRlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib2JkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1tc2NhcmRmaWxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjcmRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW1zY2xpcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2xwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1tc2Rvcy1wcm9ncmFtXCI6IHtcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZXhlXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1tc2Rvd25sb2FkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJleGVcIixcImRsbFwiLFwiY29tXCIsXCJiYXRcIixcIm1zaVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbXNtZWRpYXZpZXdcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm12YlwiLFwibTEzXCIsXCJtMTRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW1zbWV0YWZpbGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndtZlwiLFwid216XCIsXCJlbWZcIixcImVtelwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbXNtb25leVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibW55XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1tc3B1Ymxpc2hlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicHViXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1tc3NjaGVkdWxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzY2RcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW1zdGVybWluYWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRybVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbXN3cml0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid3JpXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1uZXRjZGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm5jXCIsXCJjZGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW5zLXByb3h5LWF1dG9jb25maWdcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBhY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbnpiXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJuemJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXBlcmxcIjoge1xuICAgIFwic291cmNlXCI6IFwibmdpbnhcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGxcIixcInBtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1waWxvdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJuZ2lueFwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwcmNcIixcInBkYlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtcGtjczEyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwMTJcIixcInBmeFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtcGtjczctY2VydGlmaWNhdGVzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwN2JcIixcInNwY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtcGtjczctY2VydHJlcXJlc3BcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInA3clwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtcGtpLW1lc3NhZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1yYXItY29tcHJlc3NlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicmFyXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1yZWRoYXQtcGFja2FnZS1tYW5hZ2VyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcIm5naW54XCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJwbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtcmVzZWFyY2gtaW5mby1zeXN0ZW1zXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyaXNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXNlYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJuZ2lueFwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzZWFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXNoXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNoXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1zaGFyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzaGFyXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1zaG9ja3dhdmUtZmxhc2hcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInN3ZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtc2lsdmVybGlnaHQtYXBwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4YXBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXNxbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3FsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1zdHVmZml0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzaXRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXN0dWZmaXR4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzaXR4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1zdWJyaXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNydFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtc3Y0Y3Bpb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3Y0Y3Bpb1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtc3Y0Y3JjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzdjRjcmNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXQzdm0taW1hZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInQzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC10YWRzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnYW1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXRhclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0YXJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXRjbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widGNsXCIsXCJ0a1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtdGV4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0ZXhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXRleC10Zm1cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRmbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtdGV4aW5mb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widGV4aW5mb1wiLFwidGV4aVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtdGdpZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib2JqXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC11c3RhclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widXN0YXJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXZpcnR1YWxib3gtaGRkXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJoZGRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXZpcnR1YWxib3gtb3ZhXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvdmFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXZpcnR1YWxib3gtb3ZmXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvdmZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXZpcnR1YWxib3gtdmJveFwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1widmJveFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtdmlydHVhbGJveC12Ym94LWV4dHBhY2tcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ2Ym94LWV4dHBhY2tcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXZpcnR1YWxib3gtdmRpXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ2ZGlcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXZpcnR1YWxib3gtdmhkXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ2aGRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXZpcnR1YWxib3gtdm1ka1wiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1widm1ka1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtd2Fpcy1zb3VyY2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNyY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtd2ViLWFwcC1tYW5pZmVzdCtqc29uXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3ZWJhcHBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXg1MDktY2EtY2VydFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRlclwiLFwiY3J0XCIsXCJwZW1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXg1MDktY2EtcmEtY2VydFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXg1MDktbmV4dC1jYS1jZXJ0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gteGZpZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZmlnXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC14bGlmZit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGxmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC14cGluc3RhbGxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhwaVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gteHpcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInh6XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC16bWFjaGluZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiejFcIixcInoyXCIsXCJ6M1wiLFwiejRcIixcIno1XCIsXCJ6NlwiLFwiejdcIixcIno4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veDQwMC1icFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94YWNtbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94YW1sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4YW1sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veGNhcC1hdHQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4YXZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94Y2FwLWNhcHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4Y2FcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94Y2FwLWRpZmYreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4ZGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94Y2FwLWVsK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGVsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veGNhcC1lcnJvcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94Y2FwLW5zK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieG5zXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veGNvbi1jb25mZXJlbmNlLWluZm8reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veGNvbi1jb25mZXJlbmNlLWluZm8tZGlmZit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94ZW5jK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGVuY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3hodG1sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGh0bWxcIixcInhodFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3hodG1sLXZvaWNlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veGxpZmYreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4bGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhtbFwiLFwieHNsXCIsXCJ4c2RcIixcInJuZ1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3htbC1kdGRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImR0ZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3htbC1leHRlcm5hbC1wYXJzZWQtZW50aXR5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3htbC1wYXRjaCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94bXBwK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3hvcCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhvcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3hwcm9jK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4cGxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94c2x0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieHNsXCIsXCJ4c2x0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veHNwZit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieHNwZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3h2K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXhtbFwiLFwieGh2bWxcIixcInh2bWxcIixcInh2bVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3lhbmdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ5YW5nXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veWFuZy1kYXRhK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi95YW5nLWRhdGEreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veWFuZy1wYXRjaCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veWFuZy1wYXRjaCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi95aW4reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ5aW5cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi96aXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ6aXBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi96bGliXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3pzdGRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vMWQtaW50ZXJsZWF2ZWQtcGFyaXR5ZmVjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvLzMya2FkcGNtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvLzNncHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCIzZ3BwXCJdXG4gIH0sXG4gIFwiYXVkaW8vM2dwcDJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vYWFjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2FjM1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9hZHBjbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWRwXCJdXG4gIH0sXG4gIFwiYXVkaW8vYW1yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYW1yXCJdXG4gIH0sXG4gIFwiYXVkaW8vYW1yLXdiXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2Ftci13YitcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vYXB0eFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9hc2NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vYXRyYWMtYWR2YW5jZWQtbG9zc2xlc3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vYXRyYWMteFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9hdHJhYzNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vYmFzaWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhdVwiLFwic25kXCJdXG4gIH0sXG4gIFwiYXVkaW8vYnYxNlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9idjMyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2NsZWFybW9kZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9jblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9kYXQxMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9kbHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZHNyLWVzMjAxMTA4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2Rzci1lczIwMjA1MFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9kc3ItZXMyMDIyMTFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZHNyLWVzMjAyMjEyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2R2XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2R2aTRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZWFjM1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9lbmNhcHJ0cFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9ldnJjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2V2cmMtcWNwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2V2cmMwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2V2cmMxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2V2cmNiXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2V2cmNiMFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9ldnJjYjFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZXZyY253XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2V2cmNudzBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZXZyY253MVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9ldnJjd2JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZXZyY3diMFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9ldnJjd2IxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2V2c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9mbGV4ZmVjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2Z3ZHJlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9nNzExLTBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZzcxOVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9nNzIyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2c3MjIxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2c3MjNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZzcyNi0xNlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9nNzI2LTI0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2c3MjYtMzJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZzcyNi00MFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9nNzI4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2c3MjlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZzcyOTFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZzcyOWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZzcyOWVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZ3NtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2dzbS1lZnJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZ3NtLWhyLTA4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2lsYmNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vaXAtbXJfdjIuNVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9pc2FjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwiYXVkaW8vbDE2XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2wyMFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9sMjRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwiYXVkaW8vbDhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vbHBjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL21lbHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vbWVscDEyMDBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vbWVscDI0MDBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vbWVscDYwMFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9taGFzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL21pZGlcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1pZFwiLFwibWlkaVwiLFwia2FyXCIsXCJybWlcIl1cbiAgfSxcbiAgXCJhdWRpby9tb2JpbGUteG1mXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXhtZlwiXVxuICB9LFxuICBcImF1ZGlvL21wM1wiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1wM1wiXVxuICB9LFxuICBcImF1ZGlvL21wNFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm00YVwiLFwibXA0YVwiXVxuICB9LFxuICBcImF1ZGlvL21wNGEtbGF0bVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9tcGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vbXBhLXJvYnVzdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9tcGVnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXBnYVwiLFwibXAyXCIsXCJtcDJhXCIsXCJtcDNcIixcIm0yYVwiLFwibTNhXCJdXG4gIH0sXG4gIFwiYXVkaW8vbXBlZzQtZ2VuZXJpY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9tdXNlcGFja1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcImF1ZGlvL29nZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9nYVwiLFwib2dnXCIsXCJzcHhcIixcIm9wdXNcIl1cbiAgfSxcbiAgXCJhdWRpby9vcHVzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3Bhcml0eWZlY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9wY21hXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3BjbWEtd2JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vcGNtdVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9wY211LXdiXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3Bycy5zaWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vcWNlbHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vcmFwdG9yZmVjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3JlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9ydHAtZW5jLWFlc2NtMTI4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3J0cC1taWRpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3J0cGxvb3BiYWNrXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3J0eFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9zM21cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInMzbVwiXVxuICB9LFxuICBcImF1ZGlvL3NjaXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vc2lsa1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2lsXCJdXG4gIH0sXG4gIFwiYXVkaW8vc212XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3Ntdi1xY3BcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vc212MFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9zb2ZhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3NwLW1pZGlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vc3BlZXhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdDE0MGNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdDM4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3RlbGVwaG9uZS1ldmVudFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby90ZXRyYV9hY2VscFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby90ZXRyYV9hY2VscF9iYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby90b25lXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3RzdmNpc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby91ZW1jbGlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3VscGZlY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby91c2FjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZkdmlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm1yLXdiXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC4zZ3BwLml1ZnBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLjRzYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQuYXVkaW9rb3pcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmNlbHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmNpc2NvLm5zZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQuY21sZXMucmFkaW8tZXZlbnRzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5jbnMuYW5wMVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQuY25zLmluZjFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmRlY2UuYXVkaW9cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1dmFcIixcInV2dmFcIl1cbiAgfSxcbiAgXCJhdWRpby92bmQuZGlnaXRhbC13aW5kc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImVvbFwiXVxuICB9LFxuICBcImF1ZGlvL3ZuZC5kbG5hLmFkdHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmRvbGJ5LmhlYWFjLjFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmRvbGJ5LmhlYWFjLjJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmRvbGJ5Lm1scFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQuZG9sYnkubXBzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5kb2xieS5wbDJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmRvbGJ5LnBsMnhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmRvbGJ5LnBsMnpcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmRvbGJ5LnB1bHNlLjFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmRyYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRyYVwiXVxuICB9LFxuICBcImF1ZGlvL3ZuZC5kdHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkdHNcIl1cbiAgfSxcbiAgXCJhdWRpby92bmQuZHRzLmhkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZHRzaGRcIl1cbiAgfSxcbiAgXCJhdWRpby92bmQuZHRzLnVoZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQuZHZiLmZpbGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmV2ZXJhZC5wbGpcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmhucy5hdWRpb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQubHVjZW50LnZvaWNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibHZwXCJdXG4gIH0sXG4gIFwiYXVkaW8vdm5kLm1zLXBsYXlyZWFkeS5tZWRpYS5weWFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJweWFcIl1cbiAgfSxcbiAgXCJhdWRpby92bmQubm9raWEubW9iaWxlLXhtZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQubm9ydGVsLnZia1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQubnVlcmEuZWNlbHA0ODAwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZWNlbHA0ODAwXCJdXG4gIH0sXG4gIFwiYXVkaW8vdm5kLm51ZXJhLmVjZWxwNzQ3MFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImVjZWxwNzQ3MFwiXVxuICB9LFxuICBcImF1ZGlvL3ZuZC5udWVyYS5lY2VscDk2MDBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJlY2VscDk2MDBcIl1cbiAgfSxcbiAgXCJhdWRpby92bmQub2N0ZWwuc2JjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5wcmVzb251cy5tdWx0aXRyYWNrXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5xY2VscFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQucmhldG9yZXguMzJrYWRwY21cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLnJpcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJpcFwiXVxuICB9LFxuICBcImF1ZGlvL3ZuZC5ybi1yZWFsYXVkaW9cIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwiYXVkaW8vdm5kLnNlYWxlZG1lZGlhLnNvZnRzZWFsLm1wZWdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLnZteC5jdnNkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC53YXZlXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcImF1ZGlvL3ZvcmJpc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhdWRpby92b3JiaXMtY29uZmlnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3dhdlwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndhdlwiXVxuICB9LFxuICBcImF1ZGlvL3dhdmVcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3YXZcIl1cbiAgfSxcbiAgXCJhdWRpby93ZWJtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3ZWJhXCJdXG4gIH0sXG4gIFwiYXVkaW8veC1hYWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFhY1wiXVxuICB9LFxuICBcImF1ZGlvL3gtYWlmZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWlmXCIsXCJhaWZmXCIsXCJhaWZjXCJdXG4gIH0sXG4gIFwiYXVkaW8veC1jYWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNhZlwiXVxuICB9LFxuICBcImF1ZGlvL3gtZmxhY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZmxhY1wiXVxuICB9LFxuICBcImF1ZGlvL3gtbTRhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcIm5naW54XCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm00YVwiXVxuICB9LFxuICBcImF1ZGlvL3gtbWF0cm9za2FcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1rYVwiXVxuICB9LFxuICBcImF1ZGlvL3gtbXBlZ3VybFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibTN1XCJdXG4gIH0sXG4gIFwiYXVkaW8veC1tcy13YXhcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndheFwiXVxuICB9LFxuICBcImF1ZGlvL3gtbXMtd21hXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3bWFcIl1cbiAgfSxcbiAgXCJhdWRpby94LXBuLXJlYWxhdWRpb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicmFtXCIsXCJyYVwiXVxuICB9LFxuICBcImF1ZGlvL3gtcG4tcmVhbGF1ZGlvLXBsdWdpblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicm1wXCJdXG4gIH0sXG4gIFwiYXVkaW8veC1yZWFsYXVkaW9cIjoge1xuICAgIFwic291cmNlXCI6IFwibmdpbnhcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicmFcIl1cbiAgfSxcbiAgXCJhdWRpby94LXR0YVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcImF1ZGlvL3gtd2F2XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3YXZcIl1cbiAgfSxcbiAgXCJhdWRpby94bVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieG1cIl1cbiAgfSxcbiAgXCJjaGVtaWNhbC94LWNkeFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2R4XCJdXG4gIH0sXG4gIFwiY2hlbWljYWwveC1jaWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNpZlwiXVxuICB9LFxuICBcImNoZW1pY2FsL3gtY21kZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY21kZlwiXVxuICB9LFxuICBcImNoZW1pY2FsL3gtY21sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjbWxcIl1cbiAgfSxcbiAgXCJjaGVtaWNhbC94LWNzbWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNzbWxcIl1cbiAgfSxcbiAgXCJjaGVtaWNhbC94LXBkYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcImNoZW1pY2FsL3gteHl6XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4eXpcIl1cbiAgfSxcbiAgXCJmb250L2NvbGxlY3Rpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0dGNcIl1cbiAgfSxcbiAgXCJmb250L290ZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib3RmXCJdXG4gIH0sXG4gIFwiZm9udC9zZm50XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImZvbnQvdHRmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0dGZcIl1cbiAgfSxcbiAgXCJmb250L3dvZmZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3b2ZmXCJdXG4gIH0sXG4gIFwiZm9udC93b2ZmMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndvZmYyXCJdXG4gIH0sXG4gIFwiaW1hZ2UvYWNlc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImV4clwiXVxuICB9LFxuICBcImltYWdlL2FwbmdcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhcG5nXCJdXG4gIH0sXG4gIFwiaW1hZ2UvYXZjaVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImF2Y2lcIl1cbiAgfSxcbiAgXCJpbWFnZS9hdmNzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXZjc1wiXVxuICB9LFxuICBcImltYWdlL2F2aWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhdmlmXCJdXG4gIH0sXG4gIFwiaW1hZ2UvYm1wXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJibXBcIl1cbiAgfSxcbiAgXCJpbWFnZS9jZ21cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjZ21cIl1cbiAgfSxcbiAgXCJpbWFnZS9kaWNvbS1ybGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkcmxlXCJdXG4gIH0sXG4gIFwiaW1hZ2UvZW1mXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZW1mXCJdXG4gIH0sXG4gIFwiaW1hZ2UvZml0c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZpdHNcIl1cbiAgfSxcbiAgXCJpbWFnZS9nM2ZheFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImczXCJdXG4gIH0sXG4gIFwiaW1hZ2UvZ2lmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ2lmXCJdXG4gIH0sXG4gIFwiaW1hZ2UvaGVpY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImhlaWNcIl1cbiAgfSxcbiAgXCJpbWFnZS9oZWljLXNlcXVlbmNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaGVpY3NcIl1cbiAgfSxcbiAgXCJpbWFnZS9oZWlmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaGVpZlwiXVxuICB9LFxuICBcImltYWdlL2hlaWYtc2VxdWVuY2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJoZWlmc1wiXVxuICB9LFxuICBcImltYWdlL2hlajJrXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaGVqMlwiXVxuICB9LFxuICBcImltYWdlL2hzajJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJoc2oyXCJdXG4gIH0sXG4gIFwiaW1hZ2UvaWVmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaWVmXCJdXG4gIH0sXG4gIFwiaW1hZ2UvamxzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiamxzXCJdXG4gIH0sXG4gIFwiaW1hZ2UvanAyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wianAyXCIsXCJqcGcyXCJdXG4gIH0sXG4gIFwiaW1hZ2UvanBlZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImpwZWdcIixcImpwZ1wiLFwianBlXCJdXG4gIH0sXG4gIFwiaW1hZ2UvanBoXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wianBoXCJdXG4gIH0sXG4gIFwiaW1hZ2UvanBoY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImpoY1wiXVxuICB9LFxuICBcImltYWdlL2pwbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImpwbVwiXVxuICB9LFxuICBcImltYWdlL2pweFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImpweFwiLFwianBmXCJdXG4gIH0sXG4gIFwiaW1hZ2UvanhyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wianhyXCJdXG4gIH0sXG4gIFwiaW1hZ2UvanhyYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImp4cmFcIl1cbiAgfSxcbiAgXCJpbWFnZS9qeHJzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wianhyc1wiXVxuICB9LFxuICBcImltYWdlL2p4c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImp4c1wiXVxuICB9LFxuICBcImltYWdlL2p4c2NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqeHNjXCJdXG4gIH0sXG4gIFwiaW1hZ2UvanhzaVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImp4c2lcIl1cbiAgfSxcbiAgXCJpbWFnZS9qeHNzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wianhzc1wiXVxuICB9LFxuICBcImltYWdlL2t0eFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImt0eFwiXVxuICB9LFxuICBcImltYWdlL2t0eDJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJrdHgyXCJdXG4gIH0sXG4gIFwiaW1hZ2UvbmFwbHBzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImltYWdlL3BqcGVnXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcImltYWdlL3BuZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBuZ1wiXVxuICB9LFxuICBcImltYWdlL3Bycy5idGlmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYnRpZlwiXVxuICB9LFxuICBcImltYWdlL3Bycy5wdGlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwdGlcIl1cbiAgfSxcbiAgXCJpbWFnZS9wd2ctcmFzdGVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImltYWdlL3NnaVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2dpXCJdXG4gIH0sXG4gIFwiaW1hZ2Uvc3ZnK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3ZnXCIsXCJzdmd6XCJdXG4gIH0sXG4gIFwiaW1hZ2UvdDM4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widDM4XCJdXG4gIH0sXG4gIFwiaW1hZ2UvdGlmZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRpZlwiLFwidGlmZlwiXVxuICB9LFxuICBcImltYWdlL3RpZmYtZnhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0ZnhcIl1cbiAgfSxcbiAgXCJpbWFnZS92bmQuYWRvYmUucGhvdG9zaG9wXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwc2RcIl1cbiAgfSxcbiAgXCJpbWFnZS92bmQuYWlyemlwLmFjY2VsZXJhdG9yLmF6dlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImF6dlwiXVxuICB9LFxuICBcImltYWdlL3ZuZC5jbnMuaW5mMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJpbWFnZS92bmQuZGVjZS5ncmFwaGljXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widXZpXCIsXCJ1dnZpXCIsXCJ1dmdcIixcInV2dmdcIl1cbiAgfSxcbiAgXCJpbWFnZS92bmQuZGp2dVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRqdnVcIixcImRqdlwiXVxuICB9LFxuICBcImltYWdlL3ZuZC5kdmIuc3VidGl0bGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzdWJcIl1cbiAgfSxcbiAgXCJpbWFnZS92bmQuZHdnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZHdnXCJdXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLmR4ZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImR4ZlwiXVxuICB9LFxuICBcImltYWdlL3ZuZC5mYXN0Ymlkc2hlZXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmYnNcIl1cbiAgfSxcbiAgXCJpbWFnZS92bmQuZnB4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZnB4XCJdXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLmZzdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZzdFwiXVxuICB9LFxuICBcImltYWdlL3ZuZC5mdWppeGVyb3guZWRtaWNzLW1tclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1tclwiXVxuICB9LFxuICBcImltYWdlL3ZuZC5mdWppeGVyb3guZWRtaWNzLXJsY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJsY1wiXVxuICB9LFxuICBcImltYWdlL3ZuZC5nbG9iYWxncmFwaGljcy5wZ2JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLm1pY3Jvc29mdC5pY29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpY29cIl1cbiAgfSxcbiAgXCJpbWFnZS92bmQubWl4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImltYWdlL3ZuZC5tb3ppbGxhLmFwbmdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLm1zLWRkc1wiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGRzXCJdXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLm1zLW1vZGlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtZGlcIl1cbiAgfSxcbiAgXCJpbWFnZS92bmQubXMtcGhvdG9cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndkcFwiXVxuICB9LFxuICBcImltYWdlL3ZuZC5uZXQtZnB4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibnB4XCJdXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLnBjby5iMTZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJiMTZcIl1cbiAgfSxcbiAgXCJpbWFnZS92bmQucmFkaWFuY2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLnNlYWxlZC5wbmdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLnNlYWxlZG1lZGlhLnNvZnRzZWFsLmdpZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJpbWFnZS92bmQuc2VhbGVkbWVkaWEuc29mdHNlYWwuanBnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImltYWdlL3ZuZC5zdmZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLnRlbmNlbnQudGFwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widGFwXCJdXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLnZhbHZlLnNvdXJjZS50ZXh0dXJlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widnRmXCJdXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLndhcC53Ym1wXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid2JtcFwiXVxuICB9LFxuICBcImltYWdlL3ZuZC54aWZmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGlmXCJdXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLnpicnVzaC5wY3hcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwY3hcIl1cbiAgfSxcbiAgXCJpbWFnZS93ZWJwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3ZWJwXCJdXG4gIH0sXG4gIFwiaW1hZ2Uvd21mXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid21mXCJdXG4gIH0sXG4gIFwiaW1hZ2UveC0zZHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIjNkc1wiXVxuICB9LFxuICBcImltYWdlL3gtY211LXJhc3RlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicmFzXCJdXG4gIH0sXG4gIFwiaW1hZ2UveC1jbXhcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNteFwiXVxuICB9LFxuICBcImltYWdlL3gtZnJlZWhhbmRcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZoXCIsXCJmaGNcIixcImZoNFwiLFwiZmg1XCIsXCJmaDdcIl1cbiAgfSxcbiAgXCJpbWFnZS94LWljb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaWNvXCJdXG4gIH0sXG4gIFwiaW1hZ2UveC1qbmdcIjoge1xuICAgIFwic291cmNlXCI6IFwibmdpbnhcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiam5nXCJdXG4gIH0sXG4gIFwiaW1hZ2UveC1tcnNpZC1pbWFnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2lkXCJdXG4gIH0sXG4gIFwiaW1hZ2UveC1tcy1ibXBcIjoge1xuICAgIFwic291cmNlXCI6IFwibmdpbnhcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJibXBcIl1cbiAgfSxcbiAgXCJpbWFnZS94LXBjeFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGN4XCJdXG4gIH0sXG4gIFwiaW1hZ2UveC1waWN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwaWNcIixcInBjdFwiXVxuICB9LFxuICBcImltYWdlL3gtcG9ydGFibGUtYW55bWFwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwbm1cIl1cbiAgfSxcbiAgXCJpbWFnZS94LXBvcnRhYmxlLWJpdG1hcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGJtXCJdXG4gIH0sXG4gIFwiaW1hZ2UveC1wb3J0YWJsZS1ncmF5bWFwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwZ21cIl1cbiAgfSxcbiAgXCJpbWFnZS94LXBvcnRhYmxlLXBpeG1hcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicHBtXCJdXG4gIH0sXG4gIFwiaW1hZ2UveC1yZ2JcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJnYlwiXVxuICB9LFxuICBcImltYWdlL3gtdGdhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0Z2FcIl1cbiAgfSxcbiAgXCJpbWFnZS94LXhiaXRtYXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhibVwiXVxuICB9LFxuICBcImltYWdlL3gteGNmXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcImltYWdlL3gteHBpeG1hcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieHBtXCJdXG4gIH0sXG4gIFwiaW1hZ2UveC14d2luZG93ZHVtcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieHdkXCJdXG4gIH0sXG4gIFwibWVzc2FnZS9jcGltXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm1lc3NhZ2UvZGVsaXZlcnktc3RhdHVzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm1lc3NhZ2UvZGlzcG9zaXRpb24tbm90aWZpY2F0aW9uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1xuICAgICAgXCJkaXNwb3NpdGlvbi1ub3RpZmljYXRpb25cIlxuICAgIF1cbiAgfSxcbiAgXCJtZXNzYWdlL2V4dGVybmFsLWJvZHlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibWVzc2FnZS9mZWVkYmFjay1yZXBvcnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibWVzc2FnZS9nbG9iYWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1OG1zZ1wiXVxuICB9LFxuICBcIm1lc3NhZ2UvZ2xvYmFsLWRlbGl2ZXJ5LXN0YXR1c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInU4ZHNuXCJdXG4gIH0sXG4gIFwibWVzc2FnZS9nbG9iYWwtZGlzcG9zaXRpb24tbm90aWZpY2F0aW9uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widThtZG5cIl1cbiAgfSxcbiAgXCJtZXNzYWdlL2dsb2JhbC1oZWFkZXJzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widThoZHJcIl1cbiAgfSxcbiAgXCJtZXNzYWdlL2h0dHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwibWVzc2FnZS9pbWRuK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcIm1lc3NhZ2UvbmV3c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtZXNzYWdlL3BhcnRpYWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwibWVzc2FnZS9yZmM4MjJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImVtbFwiLFwibWltZVwiXVxuICB9LFxuICBcIm1lc3NhZ2Uvcy1odHRwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm1lc3NhZ2Uvc2lwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm1lc3NhZ2Uvc2lwZnJhZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtZXNzYWdlL3RyYWNraW5nLXN0YXR1c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtZXNzYWdlL3ZuZC5zaS5zaW1wXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm1lc3NhZ2Uvdm5kLndmYS53c2NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3c2NcIl1cbiAgfSxcbiAgXCJtb2RlbC8zbWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCIzbWZcIl1cbiAgfSxcbiAgXCJtb2RlbC9lNTdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibW9kZWwvZ2x0Zitqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnbHRmXCJdXG4gIH0sXG4gIFwibW9kZWwvZ2x0Zi1iaW5hcnlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdsYlwiXVxuICB9LFxuICBcIm1vZGVsL2lnZXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpZ3NcIixcImlnZXNcIl1cbiAgfSxcbiAgXCJtb2RlbC9tZXNoXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXNoXCIsXCJtZXNoXCIsXCJzaWxvXCJdXG4gIH0sXG4gIFwibW9kZWwvbXRsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXRsXCJdXG4gIH0sXG4gIFwibW9kZWwvb2JqXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib2JqXCJdXG4gIH0sXG4gIFwibW9kZWwvc3RlcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtb2RlbC9zdGVwK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3RweFwiXVxuICB9LFxuICBcIm1vZGVsL3N0ZXAremlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3RwelwiXVxuICB9LFxuICBcIm1vZGVsL3N0ZXAteG1sK3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInN0cHh6XCJdXG4gIH0sXG4gIFwibW9kZWwvc3RsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3RsXCJdXG4gIH0sXG4gIFwibW9kZWwvdm5kLmNvbGxhZGEreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkYWVcIl1cbiAgfSxcbiAgXCJtb2RlbC92bmQuZHdmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZHdmXCJdXG4gIH0sXG4gIFwibW9kZWwvdm5kLmZsYXRsYW5kLjNkbWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibW9kZWwvdm5kLmdkbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdkbFwiXVxuICB9LFxuICBcIm1vZGVsL3ZuZC5ncy1nZGxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJtb2RlbC92bmQuZ3MuZ2RsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm1vZGVsL3ZuZC5ndHdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJndHdcIl1cbiAgfSxcbiAgXCJtb2RlbC92bmQubW9tbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJtb2RlbC92bmQubXRzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXRzXCJdXG4gIH0sXG4gIFwibW9kZWwvdm5kLm9wZW5nZXhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvZ2V4XCJdXG4gIH0sXG4gIFwibW9kZWwvdm5kLnBhcmFzb2xpZC50cmFuc21pdC5iaW5hcnlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4X2JcIl1cbiAgfSxcbiAgXCJtb2RlbC92bmQucGFyYXNvbGlkLnRyYW5zbWl0LnRleHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4X3RcIl1cbiAgfSxcbiAgXCJtb2RlbC92bmQucHl0aGEucHlveFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtb2RlbC92bmQucm9zZXR0ZS5hbm5vdGF0ZWQtZGF0YS1tb2RlbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtb2RlbC92bmQuc2FwLnZkc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInZkc1wiXVxuICB9LFxuICBcIm1vZGVsL3ZuZC51c2R6K3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInVzZHpcIl1cbiAgfSxcbiAgXCJtb2RlbC92bmQudmFsdmUuc291cmNlLmNvbXBpbGVkLW1hcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImJzcFwiXVxuICB9LFxuICBcIm1vZGVsL3ZuZC52dHVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ2dHVcIl1cbiAgfSxcbiAgXCJtb2RlbC92cm1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid3JsXCIsXCJ2cm1sXCJdXG4gIH0sXG4gIFwibW9kZWwveDNkK2JpbmFyeVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieDNkYlwiLFwieDNkYnpcIl1cbiAgfSxcbiAgXCJtb2RlbC94M2QrZmFzdGluZm9zZXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4M2RiXCJdXG4gIH0sXG4gIFwibW9kZWwveDNkK3ZybWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIngzZHZcIixcIngzZHZ6XCJdXG4gIH0sXG4gIFwibW9kZWwveDNkK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieDNkXCIsXCJ4M2R6XCJdXG4gIH0sXG4gIFwibW9kZWwveDNkLXZybWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4M2R2XCJdXG4gIH0sXG4gIFwibXVsdGlwYXJ0L2FsdGVybmF0aXZlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcIm11bHRpcGFydC9hcHBsZWRvdWJsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtdWx0aXBhcnQvYnl0ZXJhbmdlc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtdWx0aXBhcnQvZGlnZXN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm11bHRpcGFydC9lbmNyeXB0ZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJtdWx0aXBhcnQvaGVhZGVyLXNldFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtdWx0aXBhcnQvbWl4ZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibXVsdGlwYXJ0L211bHRpbGluZ3VhbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtdWx0aXBhcnQvcGFyYWxsZWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibXVsdGlwYXJ0L3JlbGF0ZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwibXVsdGlwYXJ0L3JlcG9ydFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtdWx0aXBhcnQvc2lnbmVkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcIm11bHRpcGFydC92bmQuYmludC5tZWQtcGx1c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtdWx0aXBhcnQvdm9pY2UtbWVzc2FnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtdWx0aXBhcnQveC1taXhlZC1yZXBsYWNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvMWQtaW50ZXJsZWF2ZWQtcGFyaXR5ZmVjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvY2FjaGUtbWFuaWZlc3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFwcGNhY2hlXCIsXCJtYW5pZmVzdFwiXVxuICB9LFxuICBcInRleHQvY2FsZW5kYXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpY3NcIixcImlmYlwiXVxuICB9LFxuICBcInRleHQvY2FsZW5kZXJcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJ0ZXh0L2NtZFwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcInRleHQvY29mZmVlc2NyaXB0XCI6IHtcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY29mZmVlXCIsXCJsaXRjb2ZmZWVcIl1cbiAgfSxcbiAgXCJ0ZXh0L2NxbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L2NxbC1leHByZXNzaW9uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvY3FsLWlkZW50aWZpZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC9jc3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY3NzXCJdXG4gIH0sXG4gIFwidGV4dC9jc3ZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNzdlwiXVxuICB9LFxuICBcInRleHQvY3N2LXNjaGVtYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L2RpcmVjdG9yeVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L2Ruc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L2VjbWFzY3JpcHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC9lbmNhcHJ0cFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L2VucmljaGVkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvZmhpcnBhdGhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC9mbGV4ZmVjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvZndkcmVkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvZ2ZmM1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L2dyYW1tYXItcmVmLWxpc3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC9odG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJodG1sXCIsXCJodG1cIixcInNodG1sXCJdXG4gIH0sXG4gIFwidGV4dC9qYWRlXCI6IHtcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiamFkZVwiXVxuICB9LFxuICBcInRleHQvamF2YXNjcmlwdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcInRleHQvamNyLWNuZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L2pzeFwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wianN4XCJdXG4gIH0sXG4gIFwidGV4dC9sZXNzXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJsZXNzXCJdXG4gIH0sXG4gIFwidGV4dC9tYXJrZG93blwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibWFya2Rvd25cIixcIm1kXCJdXG4gIH0sXG4gIFwidGV4dC9tYXRobWxcIjoge1xuICAgIFwic291cmNlXCI6IFwibmdpbnhcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibW1sXCJdXG4gIH0sXG4gIFwidGV4dC9tZHhcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1keFwiXVxuICB9LFxuICBcInRleHQvbWl6YXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC9uM1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJuM1wiXVxuICB9LFxuICBcInRleHQvcGFyYW1ldGVyc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIlxuICB9LFxuICBcInRleHQvcGFyaXR5ZmVjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvcGxhaW5cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInR4dFwiLFwidGV4dFwiLFwiY29uZlwiLFwiZGVmXCIsXCJsaXN0XCIsXCJsb2dcIixcImluXCIsXCJpbmlcIl1cbiAgfSxcbiAgXCJ0ZXh0L3Byb3ZlbmFuY2Utbm90YXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCJcbiAgfSxcbiAgXCJ0ZXh0L3Bycy5mYWxsZW5zdGVpbi5yc3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC9wcnMubGluZXMudGFnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZHNjXCJdXG4gIH0sXG4gIFwidGV4dC9wcnMucHJvcC5sb2dpY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3JhcHRvcmZlY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3JlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3JmYzgyMi1oZWFkZXJzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvcmljaHRleHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJ0eFwiXVxuICB9LFxuICBcInRleHQvcnRmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJydGZcIl1cbiAgfSxcbiAgXCJ0ZXh0L3J0cC1lbmMtYWVzY20xMjhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC9ydHBsb29wYmFja1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3J0eFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3NnbWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzZ21sXCIsXCJzZ21cIl1cbiAgfSxcbiAgXCJ0ZXh0L3NoYWNsY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3NoZXhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzaGV4XCJdXG4gIH0sXG4gIFwidGV4dC9zbGltXCI6IHtcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2xpbVwiLFwic2xtXCJdXG4gIH0sXG4gIFwidGV4dC9zcGR4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3BkeFwiXVxuICB9LFxuICBcInRleHQvc3RyaW5nc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3N0eWx1c1wiOiB7XG4gICAgXCJleHRlbnNpb25zXCI6IFtcInN0eWx1c1wiLFwic3R5bFwiXVxuICB9LFxuICBcInRleHQvdDE0MFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3RhYi1zZXBhcmF0ZWQtdmFsdWVzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0c3ZcIl1cbiAgfSxcbiAgXCJ0ZXh0L3Ryb2ZmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widFwiLFwidHJcIixcInJvZmZcIixcIm1hblwiLFwibWVcIixcIm1zXCJdXG4gIH0sXG4gIFwidGV4dC90dXJ0bGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInR0bFwiXVxuICB9LFxuICBcInRleHQvdWxwZmVjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvdXJpLWxpc3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInVyaVwiLFwidXJpc1wiLFwidXJsc1wiXVxuICB9LFxuICBcInRleHQvdmNhcmRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInZjYXJkXCJdXG4gIH0sXG4gIFwidGV4dC92bmQuYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5hYmNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC92bmQuYXNjaWktYXJ0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvdm5kLmN1cmxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjdXJsXCJdXG4gIH0sXG4gIFwidGV4dC92bmQuY3VybC5kY3VybFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGN1cmxcIl1cbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5jdXJsLm1jdXJsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtY3VybFwiXVxuICB9LFxuICBcInRleHQvdm5kLmN1cmwuc2N1cmxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNjdXJsXCJdXG4gIH0sXG4gIFwidGV4dC92bmQuZGViaWFuLmNvcHlyaWdodFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIlxuICB9LFxuICBcInRleHQvdm5kLmRtY2xpZW50c2NyaXB0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvdm5kLmR2Yi5zdWJ0aXRsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInN1YlwiXVxuICB9LFxuICBcInRleHQvdm5kLmVzbWVydGVjLnRoZW1lLWRlc2NyaXB0b3JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCJcbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5mYW1pbHlzZWFyY2guZ2VkY29tXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ2VkXCJdXG4gIH0sXG4gIFwidGV4dC92bmQuZmljbGFiLmZsdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5mbHlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmbHlcIl1cbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5mbWkuZmxleHN0b3JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmbHhcIl1cbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5nbWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC92bmQuZ3JhcGh2aXpcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJndlwiXVxuICB9LFxuICBcInRleHQvdm5kLmhhbnNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC92bmQuaGdsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvdm5kLmluM2QuM2RtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIjNkbWxcIl1cbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5pbjNkLnNwb3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzcG90XCJdXG4gIH0sXG4gIFwidGV4dC92bmQuaXB0Yy5uZXdzbWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC92bmQuaXB0Yy5uaXRmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvdm5kLmxhdGV4LXpcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC92bmQubW90b3JvbGEucmVmbGV4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvdm5kLm1zLW1lZGlhcGFja2FnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5uZXQycGhvbmUuY29tbWNlbnRlci5jb21tYW5kXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvdm5kLnJhZGlzeXMubXNtbC1iYXNpYy1sYXlvdXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC92bmQuc2VueC53YXJwc2NyaXB0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvdm5kLnNpLnVyaWNhdGFsb2d1ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5zb3NpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvdm5kLnN1bi5qMm1lLmFwcC1kZXNjcmlwdG9yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqYWRcIl1cbiAgfSxcbiAgXCJ0ZXh0L3ZuZC50cm9sbHRlY2gubGluZ3Vpc3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCJcbiAgfSxcbiAgXCJ0ZXh0L3ZuZC53YXAuc2lcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC92bmQud2FwLnNsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvdm5kLndhcC53bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3bWxcIl1cbiAgfSxcbiAgXCJ0ZXh0L3ZuZC53YXAud21sc2NyaXB0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid21sc1wiXVxuICB9LFxuICBcInRleHQvdnR0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInZ0dFwiXVxuICB9LFxuICBcInRleHQveC1hc21cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNcIixcImFzbVwiXVxuICB9LFxuICBcInRleHQveC1jXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjXCIsXCJjY1wiLFwiY3h4XCIsXCJjcHBcIixcImhcIixcImhoXCIsXCJkaWNcIl1cbiAgfSxcbiAgXCJ0ZXh0L3gtY29tcG9uZW50XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcIm5naW54XCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImh0Y1wiXVxuICB9LFxuICBcInRleHQveC1mb3J0cmFuXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmXCIsXCJmb3JcIixcImY3N1wiLFwiZjkwXCJdXG4gIH0sXG4gIFwidGV4dC94LWd3dC1ycGNcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJ0ZXh0L3gtaGFuZGxlYmFycy10ZW1wbGF0ZVwiOiB7XG4gICAgXCJleHRlbnNpb25zXCI6IFtcImhic1wiXVxuICB9LFxuICBcInRleHQveC1qYXZhLXNvdXJjZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiamF2YVwiXVxuICB9LFxuICBcInRleHQveC1qcXVlcnktdG1wbFwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcInRleHQveC1sdWFcIjoge1xuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJsdWFcIl1cbiAgfSxcbiAgXCJ0ZXh0L3gtbWFya2Rvd25cIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1rZFwiXVxuICB9LFxuICBcInRleHQveC1uZm9cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm5mb1wiXVxuICB9LFxuICBcInRleHQveC1vcG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvcG1sXCJdXG4gIH0sXG4gIFwidGV4dC94LW9yZ1wiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib3JnXCJdXG4gIH0sXG4gIFwidGV4dC94LXBhc2NhbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicFwiLFwicGFzXCJdXG4gIH0sXG4gIFwidGV4dC94LXByb2Nlc3NpbmdcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBkZVwiXVxuICB9LFxuICBcInRleHQveC1zYXNzXCI6IHtcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2Fzc1wiXVxuICB9LFxuICBcInRleHQveC1zY3NzXCI6IHtcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2Nzc1wiXVxuICB9LFxuICBcInRleHQveC1zZXRleHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImV0eFwiXVxuICB9LFxuICBcInRleHQveC1zZnZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNmdlwiXVxuICB9LFxuICBcInRleHQveC1zdXNlLXltcFwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieW1wXCJdXG4gIH0sXG4gIFwidGV4dC94LXV1ZW5jb2RlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1dVwiXVxuICB9LFxuICBcInRleHQveC12Y2FsZW5kYXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInZjc1wiXVxuICB9LFxuICBcInRleHQveC12Y2FyZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widmNmXCJdXG4gIH0sXG4gIFwidGV4dC94bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhtbFwiXVxuICB9LFxuICBcInRleHQveG1sLWV4dGVybmFsLXBhcnNlZC1lbnRpdHlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC95YW1sXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ5YW1sXCIsXCJ5bWxcIl1cbiAgfSxcbiAgXCJ2aWRlby8xZC1pbnRlcmxlYXZlZC1wYXJpdHlmZWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vM2dwcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIjNncFwiLFwiM2dwcFwiXVxuICB9LFxuICBcInZpZGVvLzNncHAtdHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vM2dwcDJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCIzZzJcIl1cbiAgfSxcbiAgXCJ2aWRlby9hdjFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vYm1wZWdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vYnQ2NTZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vY2VsYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby9kdlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby9lbmNhcHJ0cFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby9mZnYxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL2ZsZXhmZWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vaDI2MVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImgyNjFcIl1cbiAgfSxcbiAgXCJ2aWRlby9oMjYzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaDI2M1wiXVxuICB9LFxuICBcInZpZGVvL2gyNjMtMTk5OFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby9oMjYzLTIwMDBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vaDI2NFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImgyNjRcIl1cbiAgfSxcbiAgXCJ2aWRlby9oMjY0LXJjZG9cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vaDI2NC1zdmNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vaDI2NVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby9pc28uc2VnbWVudFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm00c1wiXVxuICB9LFxuICBcInZpZGVvL2pwZWdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqcGd2XCJdXG4gIH0sXG4gIFwidmlkZW8vanBlZzIwMDBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vanBtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqcG1cIixcImpwZ21cIl1cbiAgfSxcbiAgXCJ2aWRlby9qeHN2XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL21qMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1qMlwiLFwibWpwMlwiXVxuICB9LFxuICBcInZpZGVvL21wMXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vbXAycFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby9tcDJ0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widHNcIl1cbiAgfSxcbiAgXCJ2aWRlby9tcDRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtcDRcIixcIm1wNHZcIixcIm1wZzRcIl1cbiAgfSxcbiAgXCJ2aWRlby9tcDR2LWVzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL21wZWdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtcGVnXCIsXCJtcGdcIixcIm1wZVwiLFwibTF2XCIsXCJtMnZcIl1cbiAgfSxcbiAgXCJ2aWRlby9tcGVnNC1nZW5lcmljXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL21wdlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby9udlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby9vZ2dcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvZ3ZcIl1cbiAgfSxcbiAgXCJ2aWRlby9wYXJpdHlmZWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vcG9pbnRlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby9xdWlja3RpbWVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJxdFwiLFwibW92XCJdXG4gIH0sXG4gIFwidmlkZW8vcmFwdG9yZmVjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3Jhd1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby9ydHAtZW5jLWFlc2NtMTI4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3J0cGxvb3BiYWNrXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3J0eFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby9zY2lwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3NtcHRlMjkxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3NtcHRlMjkybVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby91bHBmZWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vdmMxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZjMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQuY2N0dlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQuZGVjZS5oZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInV2aFwiLFwidXZ2aFwiXVxuICB9LFxuICBcInZpZGVvL3ZuZC5kZWNlLm1vYmlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInV2bVwiLFwidXZ2bVwiXVxuICB9LFxuICBcInZpZGVvL3ZuZC5kZWNlLm1wNFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQuZGVjZS5wZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInV2cFwiLFwidXZ2cFwiXVxuICB9LFxuICBcInZpZGVvL3ZuZC5kZWNlLnNkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widXZzXCIsXCJ1dnZzXCJdXG4gIH0sXG4gIFwidmlkZW8vdm5kLmRlY2UudmlkZW9cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1dnZcIixcInV2dnZcIl1cbiAgfSxcbiAgXCJ2aWRlby92bmQuZGlyZWN0di5tcGVnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5kaXJlY3R2Lm1wZWctdHRzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5kbG5hLm1wZWctdHRzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5kdmIuZmlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImR2YlwiXVxuICB9LFxuICBcInZpZGVvL3ZuZC5mdnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmdnRcIl1cbiAgfSxcbiAgXCJ2aWRlby92bmQuaG5zLnZpZGVvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5pcHR2Zm9ydW0uMWRwYXJpdHlmZWMtMTAxMFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQuaXB0dmZvcnVtLjFkcGFyaXR5ZmVjLTIwMDVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vdm5kLmlwdHZmb3J1bS4yZHBhcml0eWZlYy0xMDEwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5pcHR2Zm9ydW0uMmRwYXJpdHlmZWMtMjAwNVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQuaXB0dmZvcnVtLnR0c2F2Y1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQuaXB0dmZvcnVtLnR0c21wZWcyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5tb3Rvcm9sYS52aWRlb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQubW90b3JvbGEudmlkZW9wXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5tcGVndXJsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXh1XCIsXCJtNHVcIl1cbiAgfSxcbiAgXCJ2aWRlby92bmQubXMtcGxheXJlYWR5Lm1lZGlhLnB5dlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInB5dlwiXVxuICB9LFxuICBcInZpZGVvL3ZuZC5ub2tpYS5pbnRlcmxlYXZlZC1tdWx0aW1lZGlhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5ub2tpYS5tcDR2clwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQubm9raWEudmlkZW92b2lwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5vYmplY3R2aWRlb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQucmFkZ2FtZXR0b29scy5iaW5rXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5yYWRnYW1ldHRvb2xzLnNtYWNrZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vdm5kLnNlYWxlZC5tcGVnMVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQuc2VhbGVkLm1wZWc0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5zZWFsZWQuc3dmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5zZWFsZWRtZWRpYS5zb2Z0c2VhbC5tb3ZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vdm5kLnV2dnUubXA0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widXZ1XCIsXCJ1dnZ1XCJdXG4gIH0sXG4gIFwidmlkZW8vdm5kLnZpdm9cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ2aXZcIl1cbiAgfSxcbiAgXCJ2aWRlby92bmQueW91dHViZS55dFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ2aWRlby92cDhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidmlkZW8vdnA5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInZpZGVvL3dlYm1cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndlYm1cIl1cbiAgfSxcbiAgXCJ2aWRlby94LWY0dlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZjR2XCJdXG4gIH0sXG4gIFwidmlkZW8veC1mbGlcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZsaVwiXVxuICB9LFxuICBcInZpZGVvL3gtZmx2XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmbHZcIl1cbiAgfSxcbiAgXCJ2aWRlby94LW00dlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibTR2XCJdXG4gIH0sXG4gIFwidmlkZW8veC1tYXRyb3NrYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibWt2XCIsXCJtazNkXCIsXCJta3NcIl1cbiAgfSxcbiAgXCJ2aWRlby94LW1uZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibW5nXCJdXG4gIH0sXG4gIFwidmlkZW8veC1tcy1hc2ZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFzZlwiLFwiYXN4XCJdXG4gIH0sXG4gIFwidmlkZW8veC1tcy12b2JcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInZvYlwiXVxuICB9LFxuICBcInZpZGVvL3gtbXMtd21cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndtXCJdXG4gIH0sXG4gIFwidmlkZW8veC1tcy13bXZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndtdlwiXVxuICB9LFxuICBcInZpZGVvL3gtbXMtd214XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3bXhcIl1cbiAgfSxcbiAgXCJ2aWRlby94LW1zLXd2eFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid3Z4XCJdXG4gIH0sXG4gIFwidmlkZW8veC1tc3ZpZGVvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhdmlcIl1cbiAgfSxcbiAgXCJ2aWRlby94LXNnaS1tb3ZpZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibW92aWVcIl1cbiAgfSxcbiAgXCJ2aWRlby94LXNtdlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic212XCJdXG4gIH0sXG4gIFwieC1jb25mZXJlbmNlL3gtY29vbHRhbGtcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImljZVwiXVxuICB9LFxuICBcIngtc2hhZGVyL3gtZnJhZ21lbnRcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJ4LXNoYWRlci94LXZlcnRleFwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9XG59XG4iLCAiLyohXG4gKiBtaW1lLWRiXG4gKiBDb3B5cmlnaHQoYykgMjAxNCBKb25hdGhhbiBPbmdcbiAqIENvcHlyaWdodChjKSAyMDE1LTIwMjIgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2RiLmpzb24nKVxuIiwgIi8qIVxuICogbWltZS10eXBlc1xuICogQ29weXJpZ2h0KGMpIDIwMTQgSm9uYXRoYW4gT25nXG4gKiBDb3B5cmlnaHQoYykgMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGRiID0gcmVxdWlyZSgnbWltZS1kYicpXG52YXIgZXh0bmFtZSA9IHJlcXVpcmUoJ3BhdGgnKS5leHRuYW1lXG5cbi8qKlxuICogTW9kdWxlIHZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIEVYVFJBQ1RfVFlQRV9SRUdFWFAgPSAvXlxccyooW147XFxzXSopKD86O3xcXHN8JCkvXG52YXIgVEVYVF9UWVBFX1JFR0VYUCA9IC9edGV4dFxcLy9pXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxuZXhwb3J0cy5jaGFyc2V0ID0gY2hhcnNldFxuZXhwb3J0cy5jaGFyc2V0cyA9IHsgbG9va3VwOiBjaGFyc2V0IH1cbmV4cG9ydHMuY29udGVudFR5cGUgPSBjb250ZW50VHlwZVxuZXhwb3J0cy5leHRlbnNpb24gPSBleHRlbnNpb25cbmV4cG9ydHMuZXh0ZW5zaW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbClcbmV4cG9ydHMubG9va3VwID0gbG9va3VwXG5leHBvcnRzLnR5cGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuXG4vLyBQb3B1bGF0ZSB0aGUgZXh0ZW5zaW9ucy90eXBlcyBtYXBzXG5wb3B1bGF0ZU1hcHMoZXhwb3J0cy5leHRlbnNpb25zLCBleHBvcnRzLnR5cGVzKVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCBjaGFyc2V0IGZvciBhIE1JTUUgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHJldHVybiB7Ym9vbGVhbnxzdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gY2hhcnNldCAodHlwZSkge1xuICBpZiAoIXR5cGUgfHwgdHlwZW9mIHR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBUT0RPOiB1c2UgbWVkaWEtdHlwZXJcbiAgdmFyIG1hdGNoID0gRVhUUkFDVF9UWVBFX1JFR0VYUC5leGVjKHR5cGUpXG4gIHZhciBtaW1lID0gbWF0Y2ggJiYgZGJbbWF0Y2hbMV0udG9Mb3dlckNhc2UoKV1cblxuICBpZiAobWltZSAmJiBtaW1lLmNoYXJzZXQpIHtcbiAgICByZXR1cm4gbWltZS5jaGFyc2V0XG4gIH1cblxuICAvLyBkZWZhdWx0IHRleHQvKiB0byB1dGYtOFxuICBpZiAobWF0Y2ggJiYgVEVYVF9UWVBFX1JFR0VYUC50ZXN0KG1hdGNoWzFdKSkge1xuICAgIHJldHVybiAnVVRGLTgnXG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBmdWxsIENvbnRlbnQtVHlwZSBoZWFkZXIgZ2l2ZW4gYSBNSU1FIHR5cGUgb3IgZXh0ZW5zaW9uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge2Jvb2xlYW58c3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIGNvbnRlbnRUeXBlIChzdHIpIHtcbiAgLy8gVE9ETzogc2hvdWxkIHRoaXMgZXZlbiBiZSBpbiB0aGlzIG1vZHVsZT9cbiAgaWYgKCFzdHIgfHwgdHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHZhciBtaW1lID0gc3RyLmluZGV4T2YoJy8nKSA9PT0gLTFcbiAgICA/IGV4cG9ydHMubG9va3VwKHN0cilcbiAgICA6IHN0clxuXG4gIGlmICghbWltZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gVE9ETzogdXNlIGNvbnRlbnQtdHlwZSBvciBvdGhlciBtb2R1bGVcbiAgaWYgKG1pbWUuaW5kZXhPZignY2hhcnNldCcpID09PSAtMSkge1xuICAgIHZhciBjaGFyc2V0ID0gZXhwb3J0cy5jaGFyc2V0KG1pbWUpXG4gICAgaWYgKGNoYXJzZXQpIG1pbWUgKz0gJzsgY2hhcnNldD0nICsgY2hhcnNldC50b0xvd2VyQ2FzZSgpXG4gIH1cblxuICByZXR1cm4gbWltZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCBleHRlbnNpb24gZm9yIGEgTUlNRSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcmV0dXJuIHtib29sZWFufHN0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBleHRlbnNpb24gKHR5cGUpIHtcbiAgaWYgKCF0eXBlIHx8IHR5cGVvZiB0eXBlICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gVE9ETzogdXNlIG1lZGlhLXR5cGVyXG4gIHZhciBtYXRjaCA9IEVYVFJBQ1RfVFlQRV9SRUdFWFAuZXhlYyh0eXBlKVxuXG4gIC8vIGdldCBleHRlbnNpb25zXG4gIHZhciBleHRzID0gbWF0Y2ggJiYgZXhwb3J0cy5leHRlbnNpb25zW21hdGNoWzFdLnRvTG93ZXJDYXNlKCldXG5cbiAgaWYgKCFleHRzIHx8ICFleHRzLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIGV4dHNbMF1cbn1cblxuLyoqXG4gKiBMb29rdXAgdGhlIE1JTUUgdHlwZSBmb3IgYSBmaWxlIHBhdGgvZXh0ZW5zaW9uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoXG4gKiBAcmV0dXJuIHtib29sZWFufHN0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBsb29rdXAgKHBhdGgpIHtcbiAgaWYgKCFwYXRoIHx8IHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gZ2V0IHRoZSBleHRlbnNpb24gKFwiZXh0XCIgb3IgXCIuZXh0XCIgb3IgZnVsbCBwYXRoKVxuICB2YXIgZXh0ZW5zaW9uID0gZXh0bmFtZSgneC4nICsgcGF0aClcbiAgICAudG9Mb3dlckNhc2UoKVxuICAgIC5zdWJzdHIoMSlcblxuICBpZiAoIWV4dGVuc2lvbikge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMudHlwZXNbZXh0ZW5zaW9uXSB8fCBmYWxzZVxufVxuXG4vKipcbiAqIFBvcHVsYXRlIHRoZSBleHRlbnNpb25zIGFuZCB0eXBlcyBtYXBzLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwb3B1bGF0ZU1hcHMgKGV4dGVuc2lvbnMsIHR5cGVzKSB7XG4gIC8vIHNvdXJjZSBwcmVmZXJlbmNlIChsZWFzdCAtPiBtb3N0KVxuICB2YXIgcHJlZmVyZW5jZSA9IFsnbmdpbngnLCAnYXBhY2hlJywgdW5kZWZpbmVkLCAnaWFuYSddXG5cbiAgT2JqZWN0LmtleXMoZGIpLmZvckVhY2goZnVuY3Rpb24gZm9yRWFjaE1pbWVUeXBlICh0eXBlKSB7XG4gICAgdmFyIG1pbWUgPSBkYlt0eXBlXVxuICAgIHZhciBleHRzID0gbWltZS5leHRlbnNpb25zXG5cbiAgICBpZiAoIWV4dHMgfHwgIWV4dHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBtaW1lIC0+IGV4dGVuc2lvbnNcbiAgICBleHRlbnNpb25zW3R5cGVdID0gZXh0c1xuXG4gICAgLy8gZXh0ZW5zaW9uIC0+IG1pbWVcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4dHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBleHRlbnNpb24gPSBleHRzW2ldXG5cbiAgICAgIGlmICh0eXBlc1tleHRlbnNpb25dKSB7XG4gICAgICAgIHZhciBmcm9tID0gcHJlZmVyZW5jZS5pbmRleE9mKGRiW3R5cGVzW2V4dGVuc2lvbl1dLnNvdXJjZSlcbiAgICAgICAgdmFyIHRvID0gcHJlZmVyZW5jZS5pbmRleE9mKG1pbWUuc291cmNlKVxuXG4gICAgICAgIGlmICh0eXBlc1tleHRlbnNpb25dICE9PSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyAmJlxuICAgICAgICAgIChmcm9tID4gdG8gfHwgKGZyb20gPT09IHRvICYmIHR5cGVzW2V4dGVuc2lvbl0uc3Vic3RyKDAsIDEyKSA9PT0gJ2FwcGxpY2F0aW9uLycpKSkge1xuICAgICAgICAgIC8vIHNraXAgdGhlIHJlbWFwcGluZ1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gc2V0IHRoZSBleHRlbnNpb24gLT4gbWltZVxuICAgICAgdHlwZXNbZXh0ZW5zaW9uXSA9IHR5cGVcbiAgICB9XG4gIH0pXG59XG4iLCAibW9kdWxlLmV4cG9ydHMgPSBkZWZlcjtcblxuLyoqXG4gKiBSdW5zIHByb3ZpZGVkIGZ1bmN0aW9uIG9uIG5leHQgaXRlcmF0aW9uIG9mIHRoZSBldmVudCBsb29wXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZm4gLSBmdW5jdGlvbiB0byBydW5cbiAqL1xuZnVuY3Rpb24gZGVmZXIoZm4pXG57XG4gIHZhciBuZXh0VGljayA9IHR5cGVvZiBzZXRJbW1lZGlhdGUgPT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2V0SW1tZWRpYXRlXG4gICAgOiAoXG4gICAgICB0eXBlb2YgcHJvY2VzcyA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgcHJvY2Vzcy5uZXh0VGljayA9PSAnZnVuY3Rpb24nXG4gICAgICA/IHByb2Nlc3MubmV4dFRpY2tcbiAgICAgIDogbnVsbFxuICAgICk7XG5cbiAgaWYgKG5leHRUaWNrKVxuICB7XG4gICAgbmV4dFRpY2soZm4pO1xuICB9XG4gIGVsc2VcbiAge1xuICAgIHNldFRpbWVvdXQoZm4sIDApO1xuICB9XG59XG4iLCAidmFyIGRlZmVyID0gcmVxdWlyZSgnLi9kZWZlci5qcycpO1xuXG4vLyBBUElcbm1vZHVsZS5leHBvcnRzID0gYXN5bmM7XG5cbi8qKlxuICogUnVucyBwcm92aWRlZCBjYWxsYmFjayBhc3luY2hyb25vdXNseVxuICogZXZlbiBpZiBjYWxsYmFjayBpdHNlbGYgaXMgbm90XG4gKlxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGNhbGxiYWNrIHRvIGludm9rZVxuICogQHJldHVybnMge2Z1bmN0aW9ufSAtIGF1Z21lbnRlZCBjYWxsYmFja1xuICovXG5mdW5jdGlvbiBhc3luYyhjYWxsYmFjaylcbntcbiAgdmFyIGlzQXN5bmMgPSBmYWxzZTtcblxuICAvLyBjaGVjayBpZiBhc3luYyBoYXBwZW5lZFxuICBkZWZlcihmdW5jdGlvbigpIHsgaXNBc3luYyA9IHRydWU7IH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbiBhc3luY19jYWxsYmFjayhlcnIsIHJlc3VsdClcbiAge1xuICAgIGlmIChpc0FzeW5jKVxuICAgIHtcbiAgICAgIGNhbGxiYWNrKGVyciwgcmVzdWx0KTtcbiAgICB9XG4gICAgZWxzZVxuICAgIHtcbiAgICAgIGRlZmVyKGZ1bmN0aW9uIG5leHRUaWNrX2NhbGxiYWNrKClcbiAgICAgIHtcbiAgICAgICAgY2FsbGJhY2soZXJyLCByZXN1bHQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuIiwgIi8vIEFQSVxubW9kdWxlLmV4cG9ydHMgPSBhYm9ydDtcblxuLyoqXG4gKiBBYm9ydHMgbGVmdG92ZXIgYWN0aXZlIGpvYnNcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gc3RhdGUgLSBjdXJyZW50IHN0YXRlIG9iamVjdFxuICovXG5mdW5jdGlvbiBhYm9ydChzdGF0ZSlcbntcbiAgT2JqZWN0LmtleXMoc3RhdGUuam9icykuZm9yRWFjaChjbGVhbi5iaW5kKHN0YXRlKSk7XG5cbiAgLy8gcmVzZXQgbGVmdG92ZXIgam9ic1xuICBzdGF0ZS5qb2JzID0ge307XG59XG5cbi8qKlxuICogQ2xlYW5zIHVwIGxlZnRvdmVyIGpvYiBieSBpbnZva2luZyBhYm9ydCBmdW5jdGlvbiBmb3IgdGhlIHByb3ZpZGVkIGpvYiBpZFxuICpcbiAqIEB0aGlzICBzdGF0ZVxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBrZXkgLSBqb2IgaWQgdG8gYWJvcnRcbiAqL1xuZnVuY3Rpb24gY2xlYW4oa2V5KVxue1xuICBpZiAodHlwZW9mIHRoaXMuam9ic1trZXldID09ICdmdW5jdGlvbicpXG4gIHtcbiAgICB0aGlzLmpvYnNba2V5XSgpO1xuICB9XG59XG4iLCAidmFyIGFzeW5jID0gcmVxdWlyZSgnLi9hc3luYy5qcycpXG4gICwgYWJvcnQgPSByZXF1aXJlKCcuL2Fib3J0LmpzJylcbiAgO1xuXG4vLyBBUElcbm1vZHVsZS5leHBvcnRzID0gaXRlcmF0ZTtcblxuLyoqXG4gKiBJdGVyYXRlcyBvdmVyIGVhY2ggam9iIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7YXJyYXl8b2JqZWN0fSBsaXN0IC0gYXJyYXkgb3Igb2JqZWN0IChuYW1lZCBsaXN0KSB0byBpdGVyYXRlIG92ZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGl0ZXJhdG9yIC0gaXRlcmF0b3IgdG8gcnVuXG4gKiBAcGFyYW0ge29iamVjdH0gc3RhdGUgLSBjdXJyZW50IGpvYiBzdGF0dXNcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gaW52b2tlZCB3aGVuIGFsbCBlbGVtZW50cyBwcm9jZXNzZWRcbiAqL1xuZnVuY3Rpb24gaXRlcmF0ZShsaXN0LCBpdGVyYXRvciwgc3RhdGUsIGNhbGxiYWNrKVxue1xuICAvLyBzdG9yZSBjdXJyZW50IGluZGV4XG4gIHZhciBrZXkgPSBzdGF0ZVsna2V5ZWRMaXN0J10gPyBzdGF0ZVsna2V5ZWRMaXN0J11bc3RhdGUuaW5kZXhdIDogc3RhdGUuaW5kZXg7XG5cbiAgc3RhdGUuam9ic1trZXldID0gcnVuSm9iKGl0ZXJhdG9yLCBrZXksIGxpc3Rba2V5XSwgZnVuY3Rpb24oZXJyb3IsIG91dHB1dClcbiAge1xuICAgIC8vIGRvbid0IHJlcGVhdCB5b3Vyc2VsZlxuICAgIC8vIHNraXAgc2Vjb25kYXJ5IGNhbGxiYWNrc1xuICAgIGlmICghKGtleSBpbiBzdGF0ZS5qb2JzKSlcbiAgICB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gY2xlYW4gdXAgam9ic1xuICAgIGRlbGV0ZSBzdGF0ZS5qb2JzW2tleV07XG5cbiAgICBpZiAoZXJyb3IpXG4gICAge1xuICAgICAgLy8gZG9uJ3QgcHJvY2VzcyByZXN0IG9mIHRoZSByZXN1bHRzXG4gICAgICAvLyBzdG9wIHN0aWxsIGFjdGl2ZSBqb2JzXG4gICAgICAvLyBhbmQgcmVzZXQgdGhlIGxpc3RcbiAgICAgIGFib3J0KHN0YXRlKTtcbiAgICB9XG4gICAgZWxzZVxuICAgIHtcbiAgICAgIHN0YXRlLnJlc3VsdHNba2V5XSA9IG91dHB1dDtcbiAgICB9XG5cbiAgICAvLyByZXR1cm4gc2FsdmFnZWQgcmVzdWx0c1xuICAgIGNhbGxiYWNrKGVycm9yLCBzdGF0ZS5yZXN1bHRzKTtcbiAgfSk7XG59XG5cbi8qKlxuICogUnVucyBpdGVyYXRvciBvdmVyIHByb3ZpZGVkIGpvYiBlbGVtZW50XG4gKlxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBpdGVyYXRvciAtIGl0ZXJhdG9yIHRvIGludm9rZVxuICogQHBhcmFtICAge3N0cmluZ3xudW1iZXJ9IGtleSAtIGtleS9pbmRleCBvZiB0aGUgZWxlbWVudCBpbiB0aGUgbGlzdCBvZiBqb2JzXG4gKiBAcGFyYW0gICB7bWl4ZWR9IGl0ZW0gLSBqb2IgZGVzY3JpcHRpb25cbiAqIEBwYXJhbSAgIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBpbnZva2VkIGFmdGVyIGl0ZXJhdG9yIGlzIGRvbmUgd2l0aCB0aGUgam9iXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb258bWl4ZWR9IC0gam9iIGFib3J0IGZ1bmN0aW9uIG9yIHNvbWV0aGluZyBlbHNlXG4gKi9cbmZ1bmN0aW9uIHJ1bkpvYihpdGVyYXRvciwga2V5LCBpdGVtLCBjYWxsYmFjaylcbntcbiAgdmFyIGFib3J0ZXI7XG5cbiAgLy8gYWxsb3cgc2hvcnRjdXQgaWYgaXRlcmF0b3IgZXhwZWN0cyBvbmx5IHR3byBhcmd1bWVudHNcbiAgaWYgKGl0ZXJhdG9yLmxlbmd0aCA9PSAyKVxuICB7XG4gICAgYWJvcnRlciA9IGl0ZXJhdG9yKGl0ZW0sIGFzeW5jKGNhbGxiYWNrKSk7XG4gIH1cbiAgLy8gb3RoZXJ3aXNlIGdvIHdpdGggZnVsbCB0aHJlZSBhcmd1bWVudHNcbiAgZWxzZVxuICB7XG4gICAgYWJvcnRlciA9IGl0ZXJhdG9yKGl0ZW0sIGtleSwgYXN5bmMoY2FsbGJhY2spKTtcbiAgfVxuXG4gIHJldHVybiBhYm9ydGVyO1xufVxuIiwgIi8vIEFQSVxubW9kdWxlLmV4cG9ydHMgPSBzdGF0ZTtcblxuLyoqXG4gKiBDcmVhdGVzIGluaXRpYWwgc3RhdGUgb2JqZWN0XG4gKiBmb3IgaXRlcmF0aW9uIG92ZXIgbGlzdFxuICpcbiAqIEBwYXJhbSAgIHthcnJheXxvYmplY3R9IGxpc3QgLSBsaXN0IHRvIGl0ZXJhdGUgb3ZlclxuICogQHBhcmFtICAge2Z1bmN0aW9ufG51bGx9IHNvcnRNZXRob2QgLSBmdW5jdGlvbiB0byB1c2UgZm9yIGtleXMgc29ydCxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIGBudWxsYCB0byBrZWVwIHRoZW0gYXMgaXNcbiAqIEByZXR1cm5zIHtvYmplY3R9IC0gaW5pdGlhbCBzdGF0ZSBvYmplY3RcbiAqL1xuZnVuY3Rpb24gc3RhdGUobGlzdCwgc29ydE1ldGhvZClcbntcbiAgdmFyIGlzTmFtZWRMaXN0ID0gIUFycmF5LmlzQXJyYXkobGlzdClcbiAgICAsIGluaXRTdGF0ZSA9XG4gICAge1xuICAgICAgaW5kZXggICAgOiAwLFxuICAgICAga2V5ZWRMaXN0OiBpc05hbWVkTGlzdCB8fCBzb3J0TWV0aG9kID8gT2JqZWN0LmtleXMobGlzdCkgOiBudWxsLFxuICAgICAgam9icyAgICAgOiB7fSxcbiAgICAgIHJlc3VsdHMgIDogaXNOYW1lZExpc3QgPyB7fSA6IFtdLFxuICAgICAgc2l6ZSAgICAgOiBpc05hbWVkTGlzdCA/IE9iamVjdC5rZXlzKGxpc3QpLmxlbmd0aCA6IGxpc3QubGVuZ3RoXG4gICAgfVxuICAgIDtcblxuICBpZiAoc29ydE1ldGhvZClcbiAge1xuICAgIC8vIHNvcnQgYXJyYXkga2V5cyBiYXNlZCBvbiBpdCdzIHZhbHVlc1xuICAgIC8vIHNvcnQgb2JqZWN0J3Mga2V5cyBqdXN0IG9uIG93biBtZXJpdFxuICAgIGluaXRTdGF0ZS5rZXllZExpc3Quc29ydChpc05hbWVkTGlzdCA/IHNvcnRNZXRob2QgOiBmdW5jdGlvbihhLCBiKVxuICAgIHtcbiAgICAgIHJldHVybiBzb3J0TWV0aG9kKGxpc3RbYV0sIGxpc3RbYl0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGluaXRTdGF0ZTtcbn1cbiIsICJ2YXIgYWJvcnQgPSByZXF1aXJlKCcuL2Fib3J0LmpzJylcbiAgLCBhc3luYyA9IHJlcXVpcmUoJy4vYXN5bmMuanMnKVxuICA7XG5cbi8vIEFQSVxubW9kdWxlLmV4cG9ydHMgPSB0ZXJtaW5hdG9yO1xuXG4vKipcbiAqIFRlcm1pbmF0ZXMgam9icyBpbiB0aGUgYXR0YWNoZWQgc3RhdGUgY29udGV4dFxuICpcbiAqIEB0aGlzICBBc3luY0tpdFN0YXRlI1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBmaW5hbCBjYWxsYmFjayB0byBpbnZva2UgYWZ0ZXIgdGVybWluYXRpb25cbiAqL1xuZnVuY3Rpb24gdGVybWluYXRvcihjYWxsYmFjaylcbntcbiAgaWYgKCFPYmplY3Qua2V5cyh0aGlzLmpvYnMpLmxlbmd0aClcbiAge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGZhc3QgZm9yd2FyZCBpdGVyYXRpb24gaW5kZXhcbiAgdGhpcy5pbmRleCA9IHRoaXMuc2l6ZTtcblxuICAvLyBhYm9ydCBqb2JzXG4gIGFib3J0KHRoaXMpO1xuXG4gIC8vIHNlbmQgYmFjayByZXN1bHRzIHdlIGhhdmUgc28gZmFyXG4gIGFzeW5jKGNhbGxiYWNrKShudWxsLCB0aGlzLnJlc3VsdHMpO1xufVxuIiwgInZhciBpdGVyYXRlICAgID0gcmVxdWlyZSgnLi9saWIvaXRlcmF0ZS5qcycpXG4gICwgaW5pdFN0YXRlICA9IHJlcXVpcmUoJy4vbGliL3N0YXRlLmpzJylcbiAgLCB0ZXJtaW5hdG9yID0gcmVxdWlyZSgnLi9saWIvdGVybWluYXRvci5qcycpXG4gIDtcblxuLy8gUHVibGljIEFQSVxubW9kdWxlLmV4cG9ydHMgPSBwYXJhbGxlbDtcblxuLyoqXG4gKiBSdW5zIGl0ZXJhdG9yIG92ZXIgcHJvdmlkZWQgYXJyYXkgZWxlbWVudHMgaW4gcGFyYWxsZWxcbiAqXG4gKiBAcGFyYW0gICB7YXJyYXl8b2JqZWN0fSBsaXN0IC0gYXJyYXkgb3Igb2JqZWN0IChuYW1lZCBsaXN0KSB0byBpdGVyYXRlIG92ZXJcbiAqIEBwYXJhbSAgIHtmdW5jdGlvbn0gaXRlcmF0b3IgLSBpdGVyYXRvciB0byBydW5cbiAqIEBwYXJhbSAgIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBpbnZva2VkIHdoZW4gYWxsIGVsZW1lbnRzIHByb2Nlc3NlZFxuICogQHJldHVybnMge2Z1bmN0aW9ufSAtIGpvYnMgdGVybWluYXRvclxuICovXG5mdW5jdGlvbiBwYXJhbGxlbChsaXN0LCBpdGVyYXRvciwgY2FsbGJhY2spXG57XG4gIHZhciBzdGF0ZSA9IGluaXRTdGF0ZShsaXN0KTtcblxuICB3aGlsZSAoc3RhdGUuaW5kZXggPCAoc3RhdGVbJ2tleWVkTGlzdCddIHx8IGxpc3QpLmxlbmd0aClcbiAge1xuICAgIGl0ZXJhdGUobGlzdCwgaXRlcmF0b3IsIHN0YXRlLCBmdW5jdGlvbihlcnJvciwgcmVzdWx0KVxuICAgIHtcbiAgICAgIGlmIChlcnJvcilcbiAgICAgIHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gbG9va3MgbGlrZSBpdCdzIHRoZSBsYXN0IG9uZVxuICAgICAgaWYgKE9iamVjdC5rZXlzKHN0YXRlLmpvYnMpLmxlbmd0aCA9PT0gMClcbiAgICAgIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgc3RhdGUucmVzdWx0cyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHN0YXRlLmluZGV4Kys7XG4gIH1cblxuICByZXR1cm4gdGVybWluYXRvci5iaW5kKHN0YXRlLCBjYWxsYmFjayk7XG59XG4iLCAidmFyIGl0ZXJhdGUgICAgPSByZXF1aXJlKCcuL2xpYi9pdGVyYXRlLmpzJylcbiAgLCBpbml0U3RhdGUgID0gcmVxdWlyZSgnLi9saWIvc3RhdGUuanMnKVxuICAsIHRlcm1pbmF0b3IgPSByZXF1aXJlKCcuL2xpYi90ZXJtaW5hdG9yLmpzJylcbiAgO1xuXG4vLyBQdWJsaWMgQVBJXG5tb2R1bGUuZXhwb3J0cyA9IHNlcmlhbE9yZGVyZWQ7XG4vLyBzb3J0aW5nIGhlbHBlcnNcbm1vZHVsZS5leHBvcnRzLmFzY2VuZGluZyAgPSBhc2NlbmRpbmc7XG5tb2R1bGUuZXhwb3J0cy5kZXNjZW5kaW5nID0gZGVzY2VuZGluZztcblxuLyoqXG4gKiBSdW5zIGl0ZXJhdG9yIG92ZXIgcHJvdmlkZWQgc29ydGVkIGFycmF5IGVsZW1lbnRzIGluIHNlcmllc1xuICpcbiAqIEBwYXJhbSAgIHthcnJheXxvYmplY3R9IGxpc3QgLSBhcnJheSBvciBvYmplY3QgKG5hbWVkIGxpc3QpIHRvIGl0ZXJhdGUgb3ZlclxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBpdGVyYXRvciAtIGl0ZXJhdG9yIHRvIHJ1blxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBzb3J0TWV0aG9kIC0gY3VzdG9tIHNvcnQgZnVuY3Rpb25cbiAqIEBwYXJhbSAgIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBpbnZva2VkIHdoZW4gYWxsIGVsZW1lbnRzIHByb2Nlc3NlZFxuICogQHJldHVybnMge2Z1bmN0aW9ufSAtIGpvYnMgdGVybWluYXRvclxuICovXG5mdW5jdGlvbiBzZXJpYWxPcmRlcmVkKGxpc3QsIGl0ZXJhdG9yLCBzb3J0TWV0aG9kLCBjYWxsYmFjaylcbntcbiAgdmFyIHN0YXRlID0gaW5pdFN0YXRlKGxpc3QsIHNvcnRNZXRob2QpO1xuXG4gIGl0ZXJhdGUobGlzdCwgaXRlcmF0b3IsIHN0YXRlLCBmdW5jdGlvbiBpdGVyYXRvckhhbmRsZXIoZXJyb3IsIHJlc3VsdClcbiAge1xuICAgIGlmIChlcnJvcilcbiAgICB7XG4gICAgICBjYWxsYmFjayhlcnJvciwgcmVzdWx0KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdGF0ZS5pbmRleCsrO1xuXG4gICAgLy8gYXJlIHdlIHRoZXJlIHlldD9cbiAgICBpZiAoc3RhdGUuaW5kZXggPCAoc3RhdGVbJ2tleWVkTGlzdCddIHx8IGxpc3QpLmxlbmd0aClcbiAgICB7XG4gICAgICBpdGVyYXRlKGxpc3QsIGl0ZXJhdG9yLCBzdGF0ZSwgaXRlcmF0b3JIYW5kbGVyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBkb25lIGhlcmVcbiAgICBjYWxsYmFjayhudWxsLCBzdGF0ZS5yZXN1bHRzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHRlcm1pbmF0b3IuYmluZChzdGF0ZSwgY2FsbGJhY2spO1xufVxuXG4vKlxuICogLS0gU29ydCBtZXRob2RzXG4gKi9cblxuLyoqXG4gKiBzb3J0IGhlbHBlciB0byBzb3J0IGFycmF5IGVsZW1lbnRzIGluIGFzY2VuZGluZyBvcmRlclxuICpcbiAqIEBwYXJhbSAgIHttaXhlZH0gYSAtIGFuIGl0ZW0gdG8gY29tcGFyZVxuICogQHBhcmFtICAge21peGVkfSBiIC0gYW4gaXRlbSB0byBjb21wYXJlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSAtIGNvbXBhcmlzb24gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzY2VuZGluZyhhLCBiKVxue1xuICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IDA7XG59XG5cbi8qKlxuICogc29ydCBoZWxwZXIgdG8gc29ydCBhcnJheSBlbGVtZW50cyBpbiBkZXNjZW5kaW5nIG9yZGVyXG4gKlxuICogQHBhcmFtICAge21peGVkfSBhIC0gYW4gaXRlbSB0byBjb21wYXJlXG4gKiBAcGFyYW0gICB7bWl4ZWR9IGIgLSBhbiBpdGVtIHRvIGNvbXBhcmVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IC0gY29tcGFyaXNvbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gZGVzY2VuZGluZyhhLCBiKVxue1xuICByZXR1cm4gLTEgKiBhc2NlbmRpbmcoYSwgYik7XG59XG4iLCAidmFyIHNlcmlhbE9yZGVyZWQgPSByZXF1aXJlKCcuL3NlcmlhbE9yZGVyZWQuanMnKTtcblxuLy8gUHVibGljIEFQSVxubW9kdWxlLmV4cG9ydHMgPSBzZXJpYWw7XG5cbi8qKlxuICogUnVucyBpdGVyYXRvciBvdmVyIHByb3ZpZGVkIGFycmF5IGVsZW1lbnRzIGluIHNlcmllc1xuICpcbiAqIEBwYXJhbSAgIHthcnJheXxvYmplY3R9IGxpc3QgLSBhcnJheSBvciBvYmplY3QgKG5hbWVkIGxpc3QpIHRvIGl0ZXJhdGUgb3ZlclxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBpdGVyYXRvciAtIGl0ZXJhdG9yIHRvIHJ1blxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGludm9rZWQgd2hlbiBhbGwgZWxlbWVudHMgcHJvY2Vzc2VkXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IC0gam9icyB0ZXJtaW5hdG9yXG4gKi9cbmZ1bmN0aW9uIHNlcmlhbChsaXN0LCBpdGVyYXRvciwgY2FsbGJhY2spXG57XG4gIHJldHVybiBzZXJpYWxPcmRlcmVkKGxpc3QsIGl0ZXJhdG9yLCBudWxsLCBjYWxsYmFjayk7XG59XG4iLCAibW9kdWxlLmV4cG9ydHMgPVxue1xuICBwYXJhbGxlbCAgICAgIDogcmVxdWlyZSgnLi9wYXJhbGxlbC5qcycpLFxuICBzZXJpYWwgICAgICAgIDogcmVxdWlyZSgnLi9zZXJpYWwuanMnKSxcbiAgc2VyaWFsT3JkZXJlZCA6IHJlcXVpcmUoJy4vc2VyaWFsT3JkZXJlZC5qcycpXG59O1xuIiwgIi8vIHBvcHVsYXRlcyBtaXNzaW5nIHZhbHVlc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihkc3QsIHNyYykge1xuXG4gIE9iamVjdC5rZXlzKHNyYykuZm9yRWFjaChmdW5jdGlvbihwcm9wKVxuICB7XG4gICAgZHN0W3Byb3BdID0gZHN0W3Byb3BdIHx8IHNyY1twcm9wXTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRzdDtcbn07XG4iLCAidmFyIENvbWJpbmVkU3RyZWFtID0gcmVxdWlyZSgnY29tYmluZWQtc3RyZWFtJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG52YXIgaHR0cHMgPSByZXF1aXJlKCdodHRwcycpO1xudmFyIHBhcnNlVXJsID0gcmVxdWlyZSgndXJsJykucGFyc2U7XG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpLlN0cmVhbTtcbnZhciBtaW1lID0gcmVxdWlyZSgnbWltZS10eXBlcycpO1xudmFyIGFzeW5ja2l0ID0gcmVxdWlyZSgnYXN5bmNraXQnKTtcbnZhciBwb3B1bGF0ZSA9IHJlcXVpcmUoJy4vcG9wdWxhdGUuanMnKTtcblxuLy8gUHVibGljIEFQSVxubW9kdWxlLmV4cG9ydHMgPSBGb3JtRGF0YTtcblxuLy8gbWFrZSBpdCBhIFN0cmVhbVxudXRpbC5pbmhlcml0cyhGb3JtRGF0YSwgQ29tYmluZWRTdHJlYW0pO1xuXG4vKipcbiAqIENyZWF0ZSByZWFkYWJsZSBcIm11bHRpcGFydC9mb3JtLWRhdGFcIiBzdHJlYW1zLlxuICogQ2FuIGJlIHVzZWQgdG8gc3VibWl0IGZvcm1zXG4gKiBhbmQgZmlsZSB1cGxvYWRzIHRvIG90aGVyIHdlYiBhcHBsaWNhdGlvbnMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFByb3BlcnRpZXMgdG8gYmUgYWRkZWQvb3ZlcnJpZGVuIGZvciBGb3JtRGF0YSBhbmQgQ29tYmluZWRTdHJlYW1cbiAqL1xuZnVuY3Rpb24gRm9ybURhdGEob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRm9ybURhdGEpKSB7XG4gICAgcmV0dXJuIG5ldyBGb3JtRGF0YShvcHRpb25zKTtcbiAgfVxuXG4gIHRoaXMuX292ZXJoZWFkTGVuZ3RoID0gMDtcbiAgdGhpcy5fdmFsdWVMZW5ndGggPSAwO1xuICB0aGlzLl92YWx1ZXNUb01lYXN1cmUgPSBbXTtcblxuICBDb21iaW5lZFN0cmVhbS5jYWxsKHRoaXMpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBmb3IgKHZhciBvcHRpb24gaW4gb3B0aW9ucykge1xuICAgIHRoaXNbb3B0aW9uXSA9IG9wdGlvbnNbb3B0aW9uXTtcbiAgfVxufVxuXG5Gb3JtRGF0YS5MSU5FX0JSRUFLID0gJ1xcclxcbic7XG5Gb3JtRGF0YS5ERUZBVUxUX0NPTlRFTlRfVFlQRSA9ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nO1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24oZmllbGQsIHZhbHVlLCBvcHRpb25zKSB7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gYWxsb3cgZmlsZW5hbWUgYXMgc2luZ2xlIG9wdGlvblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT0gJ3N0cmluZycpIHtcbiAgICBvcHRpb25zID0ge2ZpbGVuYW1lOiBvcHRpb25zfTtcbiAgfVxuXG4gIHZhciBhcHBlbmQgPSBDb21iaW5lZFN0cmVhbS5wcm90b3R5cGUuYXBwZW5kLmJpbmQodGhpcyk7XG5cbiAgLy8gYWxsIHRoYXQgc3RyZWFteSBidXNpbmVzcyBjYW4ndCBoYW5kbGUgbnVtYmVyc1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgdmFsdWUgPSAnJyArIHZhbHVlO1xuICB9XG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZlbGl4Z2Uvbm9kZS1mb3JtLWRhdGEvaXNzdWVzLzM4XG4gIGlmICh1dGlsLmlzQXJyYXkodmFsdWUpKSB7XG4gICAgLy8gUGxlYXNlIGNvbnZlcnQgeW91ciBhcnJheSBpbnRvIHN0cmluZ1xuICAgIC8vIHRoZSB3YXkgd2ViIHNlcnZlciBleHBlY3RzIGl0XG4gICAgdGhpcy5fZXJyb3IobmV3IEVycm9yKCdBcnJheXMgYXJlIG5vdCBzdXBwb3J0ZWQuJykpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBoZWFkZXIgPSB0aGlzLl9tdWx0aVBhcnRIZWFkZXIoZmllbGQsIHZhbHVlLCBvcHRpb25zKTtcbiAgdmFyIGZvb3RlciA9IHRoaXMuX211bHRpUGFydEZvb3RlcigpO1xuXG4gIGFwcGVuZChoZWFkZXIpO1xuICBhcHBlbmQodmFsdWUpO1xuICBhcHBlbmQoZm9vdGVyKTtcblxuICAvLyBwYXNzIGFsb25nIG9wdGlvbnMua25vd25MZW5ndGhcbiAgdGhpcy5fdHJhY2tMZW5ndGgoaGVhZGVyLCB2YWx1ZSwgb3B0aW9ucyk7XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuX3RyYWNrTGVuZ3RoID0gZnVuY3Rpb24oaGVhZGVyLCB2YWx1ZSwgb3B0aW9ucykge1xuICB2YXIgdmFsdWVMZW5ndGggPSAwO1xuXG4gIC8vIHVzZWQgdy8gZ2V0TGVuZ3RoU3luYygpLCB3aGVuIGxlbmd0aCBpcyBrbm93bi5cbiAgLy8gZS5nLiBmb3Igc3RyZWFtaW5nIGRpcmVjdGx5IGZyb20gYSByZW1vdGUgc2VydmVyLFxuICAvLyB3LyBhIGtub3duIGZpbGUgYSBzaXplLCBhbmQgbm90IHdhbnRpbmcgdG8gd2FpdCBmb3JcbiAgLy8gaW5jb21pbmcgZmlsZSB0byBmaW5pc2ggdG8gZ2V0IGl0cyBzaXplLlxuICBpZiAob3B0aW9ucy5rbm93bkxlbmd0aCAhPSBudWxsKSB7XG4gICAgdmFsdWVMZW5ndGggKz0gK29wdGlvbnMua25vd25MZW5ndGg7XG4gIH0gZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgIHZhbHVlTGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWx1ZUxlbmd0aCA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHZhbHVlKTtcbiAgfVxuXG4gIHRoaXMuX3ZhbHVlTGVuZ3RoICs9IHZhbHVlTGVuZ3RoO1xuXG4gIC8vIEBjaGVjayB3aHkgYWRkIENSTEY/IGRvZXMgdGhpcyBhY2NvdW50IGZvciBjdXN0b20vbXVsdGlwbGUgQ1JMRnM/XG4gIHRoaXMuX292ZXJoZWFkTGVuZ3RoICs9XG4gICAgQnVmZmVyLmJ5dGVMZW5ndGgoaGVhZGVyKSArXG4gICAgRm9ybURhdGEuTElORV9CUkVBSy5sZW5ndGg7XG5cbiAgLy8gZW1wdHkgb3IgZWl0aGVyIGRvZXNuJ3QgaGF2ZSBwYXRoIG9yIG5vdCBhbiBodHRwIHJlc3BvbnNlIG9yIG5vdCBhIHN0cmVhbVxuICBpZiAoIXZhbHVlIHx8ICggIXZhbHVlLnBhdGggJiYgISh2YWx1ZS5yZWFkYWJsZSAmJiB2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnaHR0cFZlcnNpb24nKSkgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIFN0cmVhbSkpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gbm8gbmVlZCB0byBib3RoZXIgd2l0aCB0aGUgbGVuZ3RoXG4gIGlmICghb3B0aW9ucy5rbm93bkxlbmd0aCkge1xuICAgIHRoaXMuX3ZhbHVlc1RvTWVhc3VyZS5wdXNoKHZhbHVlKTtcbiAgfVxufTtcblxuRm9ybURhdGEucHJvdG90eXBlLl9sZW5ndGhSZXRyaWV2ZXIgPSBmdW5jdGlvbih2YWx1ZSwgY2FsbGJhY2spIHtcblxuICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ2ZkJykpIHtcblxuICAgIC8vIHRha2UgcmVhZCByYW5nZSBpbnRvIGEgYWNjb3VudFxuICAgIC8vIGBlbmRgID0gSW5maW5pdHkgXHUyMDEzPiByZWFkIGZpbGUgdGlsbCB0aGUgZW5kXG4gICAgLy9cbiAgICAvLyBUT0RPOiBMb29rcyBsaWtlIHRoZXJlIGlzIGJ1ZyBpbiBOb2RlIGZzLmNyZWF0ZVJlYWRTdHJlYW1cbiAgICAvLyBpdCBkb2Vzbid0IHJlc3BlY3QgYGVuZGAgb3B0aW9ucyB3aXRob3V0IGBzdGFydGAgb3B0aW9uc1xuICAgIC8vIEZpeCBpdCB3aGVuIG5vZGUgZml4ZXMgaXQuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2lzc3Vlcy83ODE5XG4gICAgaWYgKHZhbHVlLmVuZCAhPSB1bmRlZmluZWQgJiYgdmFsdWUuZW5kICE9IEluZmluaXR5ICYmIHZhbHVlLnN0YXJ0ICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAvLyB3aGVuIGVuZCBzcGVjaWZpZWRcbiAgICAgIC8vIG5vIG5lZWQgdG8gY2FsY3VsYXRlIHJhbmdlXG4gICAgICAvLyBpbmNsdXNpdmUsIHN0YXJ0cyB3aXRoIDBcbiAgICAgIGNhbGxiYWNrKG51bGwsIHZhbHVlLmVuZCArIDEgLSAodmFsdWUuc3RhcnQgPyB2YWx1ZS5zdGFydCA6IDApKTtcblxuICAgIC8vIG5vdCB0aGF0IGZhc3Qgc25vb3B5XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHN0aWxsIG5lZWQgdG8gZmV0Y2ggZmlsZSBzaXplIGZyb20gZnNcbiAgICAgIGZzLnN0YXQodmFsdWUucGF0aCwgZnVuY3Rpb24oZXJyLCBzdGF0KSB7XG5cbiAgICAgICAgdmFyIGZpbGVTaXplO1xuXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSBmaW5hbCBzaXplIGJhc2VkIG9uIHRoZSByYW5nZSBvcHRpb25zXG4gICAgICAgIGZpbGVTaXplID0gc3RhdC5zaXplIC0gKHZhbHVlLnN0YXJ0ID8gdmFsdWUuc3RhcnQgOiAwKTtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgZmlsZVNpemUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gIC8vIG9yIGh0dHAgcmVzcG9uc2VcbiAgfSBlbHNlIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnaHR0cFZlcnNpb24nKSkge1xuICAgIGNhbGxiYWNrKG51bGwsICt2YWx1ZS5oZWFkZXJzWydjb250ZW50LWxlbmd0aCddKTtcblxuICAvLyBvciByZXF1ZXN0IHN0cmVhbSBodHRwOi8vZ2l0aHViLmNvbS9taWtlYWwvcmVxdWVzdFxuICB9IGVsc2UgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdodHRwTW9kdWxlJykpIHtcbiAgICAvLyB3YWl0IHRpbGwgcmVzcG9uc2UgY29tZSBiYWNrXG4gICAgdmFsdWUub24oJ3Jlc3BvbnNlJywgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgIHZhbHVlLnBhdXNlKCk7XG4gICAgICBjYWxsYmFjayhudWxsLCArcmVzcG9uc2UuaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSk7XG4gICAgfSk7XG4gICAgdmFsdWUucmVzdW1lKCk7XG5cbiAgLy8gc29tZXRoaW5nIGVsc2VcbiAgfSBlbHNlIHtcbiAgICBjYWxsYmFjaygnVW5rbm93biBzdHJlYW0nKTtcbiAgfVxufTtcblxuRm9ybURhdGEucHJvdG90eXBlLl9tdWx0aVBhcnRIZWFkZXIgPSBmdW5jdGlvbihmaWVsZCwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgLy8gY3VzdG9tIGhlYWRlciBzcGVjaWZpZWQgKGFzIHN0cmluZyk/XG4gIC8vIGl0IGJlY29tZXMgcmVzcG9uc2libGUgZm9yIGJvdW5kYXJ5XG4gIC8vIChlLmcuIHRvIGhhbmRsZSBleHRyYSBDUkxGcyBvbiAuTkVUIHNlcnZlcnMpXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5oZWFkZXIgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5oZWFkZXI7XG4gIH1cblxuICB2YXIgY29udGVudERpc3Bvc2l0aW9uID0gdGhpcy5fZ2V0Q29udGVudERpc3Bvc2l0aW9uKHZhbHVlLCBvcHRpb25zKTtcbiAgdmFyIGNvbnRlbnRUeXBlID0gdGhpcy5fZ2V0Q29udGVudFR5cGUodmFsdWUsIG9wdGlvbnMpO1xuXG4gIHZhciBjb250ZW50cyA9ICcnO1xuICB2YXIgaGVhZGVycyAgPSB7XG4gICAgLy8gYWRkIGN1c3RvbSBkaXNwb3NpdGlvbiBhcyB0aGlyZCBlbGVtZW50IG9yIGtlZXAgaXQgdHdvIGVsZW1lbnRzIGlmIG5vdFxuICAgICdDb250ZW50LURpc3Bvc2l0aW9uJzogWydmb3JtLWRhdGEnLCAnbmFtZT1cIicgKyBmaWVsZCArICdcIiddLmNvbmNhdChjb250ZW50RGlzcG9zaXRpb24gfHwgW10pLFxuICAgIC8vIGlmIG5vIGNvbnRlbnQgdHlwZS4gYWxsb3cgaXQgdG8gYmUgZW1wdHkgYXJyYXlcbiAgICAnQ29udGVudC1UeXBlJzogW10uY29uY2F0KGNvbnRlbnRUeXBlIHx8IFtdKVxuICB9O1xuXG4gIC8vIGFsbG93IGN1c3RvbSBoZWFkZXJzLlxuICBpZiAodHlwZW9mIG9wdGlvbnMuaGVhZGVyID09ICdvYmplY3QnKSB7XG4gICAgcG9wdWxhdGUoaGVhZGVycywgb3B0aW9ucy5oZWFkZXIpO1xuICB9XG5cbiAgdmFyIGhlYWRlcjtcbiAgZm9yICh2YXIgcHJvcCBpbiBoZWFkZXJzKSB7XG4gICAgaWYgKCFoZWFkZXJzLmhhc093blByb3BlcnR5KHByb3ApKSBjb250aW51ZTtcbiAgICBoZWFkZXIgPSBoZWFkZXJzW3Byb3BdO1xuXG4gICAgLy8gc2tpcCBudWxsaXNoIGhlYWRlcnMuXG4gICAgaWYgKGhlYWRlciA9PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBjb252ZXJ0IGFsbCBoZWFkZXJzIHRvIGFycmF5cy5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoaGVhZGVyKSkge1xuICAgICAgaGVhZGVyID0gW2hlYWRlcl07XG4gICAgfVxuXG4gICAgLy8gYWRkIG5vbi1lbXB0eSBoZWFkZXJzLlxuICAgIGlmIChoZWFkZXIubGVuZ3RoKSB7XG4gICAgICBjb250ZW50cyArPSBwcm9wICsgJzogJyArIGhlYWRlci5qb2luKCc7ICcpICsgRm9ybURhdGEuTElORV9CUkVBSztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gJy0tJyArIHRoaXMuZ2V0Qm91bmRhcnkoKSArIEZvcm1EYXRhLkxJTkVfQlJFQUsgKyBjb250ZW50cyArIEZvcm1EYXRhLkxJTkVfQlJFQUs7XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuX2dldENvbnRlbnREaXNwb3NpdGlvbiA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRpb25zKSB7XG5cbiAgdmFyIGZpbGVuYW1lXG4gICAgLCBjb250ZW50RGlzcG9zaXRpb25cbiAgICA7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbGVwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIGN1c3RvbSBmaWxlcGF0aCBmb3IgcmVsYXRpdmUgcGF0aHNcbiAgICBmaWxlbmFtZSA9IHBhdGgubm9ybWFsaXplKG9wdGlvbnMuZmlsZXBhdGgpLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcbiAgfSBlbHNlIGlmIChvcHRpb25zLmZpbGVuYW1lIHx8IHZhbHVlLm5hbWUgfHwgdmFsdWUucGF0aCkge1xuICAgIC8vIGN1c3RvbSBmaWxlbmFtZSB0YWtlIHByZWNlZGVuY2VcbiAgICAvLyBmb3JtaWRhYmxlIGFuZCB0aGUgYnJvd3NlciBhZGQgYSBuYW1lIHByb3BlcnR5XG4gICAgLy8gZnMtIGFuZCByZXF1ZXN0LSBzdHJlYW1zIGhhdmUgcGF0aCBwcm9wZXJ0eVxuICAgIGZpbGVuYW1lID0gcGF0aC5iYXNlbmFtZShvcHRpb25zLmZpbGVuYW1lIHx8IHZhbHVlLm5hbWUgfHwgdmFsdWUucGF0aCk7XG4gIH0gZWxzZSBpZiAodmFsdWUucmVhZGFibGUgJiYgdmFsdWUuaGFzT3duUHJvcGVydHkoJ2h0dHBWZXJzaW9uJykpIHtcbiAgICAvLyBvciB0cnkgaHR0cCByZXNwb25zZVxuICAgIGZpbGVuYW1lID0gcGF0aC5iYXNlbmFtZSh2YWx1ZS5jbGllbnQuX2h0dHBNZXNzYWdlLnBhdGggfHwgJycpO1xuICB9XG5cbiAgaWYgKGZpbGVuYW1lKSB7XG4gICAgY29udGVudERpc3Bvc2l0aW9uID0gJ2ZpbGVuYW1lPVwiJyArIGZpbGVuYW1lICsgJ1wiJztcbiAgfVxuXG4gIHJldHVybiBjb250ZW50RGlzcG9zaXRpb247XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuX2dldENvbnRlbnRUeXBlID0gZnVuY3Rpb24odmFsdWUsIG9wdGlvbnMpIHtcblxuICAvLyB1c2UgY3VzdG9tIGNvbnRlbnQtdHlwZSBhYm92ZSBhbGxcbiAgdmFyIGNvbnRlbnRUeXBlID0gb3B0aW9ucy5jb250ZW50VHlwZTtcblxuICAvLyBvciB0cnkgYG5hbWVgIGZyb20gZm9ybWlkYWJsZSwgYnJvd3NlclxuICBpZiAoIWNvbnRlbnRUeXBlICYmIHZhbHVlLm5hbWUpIHtcbiAgICBjb250ZW50VHlwZSA9IG1pbWUubG9va3VwKHZhbHVlLm5hbWUpO1xuICB9XG5cbiAgLy8gb3IgdHJ5IGBwYXRoYCBmcm9tIGZzLSwgcmVxdWVzdC0gc3RyZWFtc1xuICBpZiAoIWNvbnRlbnRUeXBlICYmIHZhbHVlLnBhdGgpIHtcbiAgICBjb250ZW50VHlwZSA9IG1pbWUubG9va3VwKHZhbHVlLnBhdGgpO1xuICB9XG5cbiAgLy8gb3IgaWYgaXQncyBodHRwLXJlcG9uc2VcbiAgaWYgKCFjb250ZW50VHlwZSAmJiB2YWx1ZS5yZWFkYWJsZSAmJiB2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnaHR0cFZlcnNpb24nKSkge1xuICAgIGNvbnRlbnRUeXBlID0gdmFsdWUuaGVhZGVyc1snY29udGVudC10eXBlJ107XG4gIH1cblxuICAvLyBvciBndWVzcyBpdCBmcm9tIHRoZSBmaWxlcGF0aCBvciBmaWxlbmFtZVxuICBpZiAoIWNvbnRlbnRUeXBlICYmIChvcHRpb25zLmZpbGVwYXRoIHx8IG9wdGlvbnMuZmlsZW5hbWUpKSB7XG4gICAgY29udGVudFR5cGUgPSBtaW1lLmxvb2t1cChvcHRpb25zLmZpbGVwYXRoIHx8IG9wdGlvbnMuZmlsZW5hbWUpO1xuICB9XG5cbiAgLy8gZmFsbGJhY2sgdG8gdGhlIGRlZmF1bHQgY29udGVudCB0eXBlIGlmIGB2YWx1ZWAgaXMgbm90IHNpbXBsZSB2YWx1ZVxuICBpZiAoIWNvbnRlbnRUeXBlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgIGNvbnRlbnRUeXBlID0gRm9ybURhdGEuREVGQVVMVF9DT05URU5UX1RZUEU7XG4gIH1cblxuICByZXR1cm4gY29udGVudFR5cGU7XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuX211bHRpUGFydEZvb3RlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZnVuY3Rpb24obmV4dCkge1xuICAgIHZhciBmb290ZXIgPSBGb3JtRGF0YS5MSU5FX0JSRUFLO1xuXG4gICAgdmFyIGxhc3RQYXJ0ID0gKHRoaXMuX3N0cmVhbXMubGVuZ3RoID09PSAwKTtcbiAgICBpZiAobGFzdFBhcnQpIHtcbiAgICAgIGZvb3RlciArPSB0aGlzLl9sYXN0Qm91bmRhcnkoKTtcbiAgICB9XG5cbiAgICBuZXh0KGZvb3Rlcik7XG4gIH0uYmluZCh0aGlzKTtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5fbGFzdEJvdW5kYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnLS0nICsgdGhpcy5nZXRCb3VuZGFyeSgpICsgJy0tJyArIEZvcm1EYXRhLkxJTkVfQlJFQUs7XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuZ2V0SGVhZGVycyA9IGZ1bmN0aW9uKHVzZXJIZWFkZXJzKSB7XG4gIHZhciBoZWFkZXI7XG4gIHZhciBmb3JtSGVhZGVycyA9IHtcbiAgICAnY29udGVudC10eXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGE7IGJvdW5kYXJ5PScgKyB0aGlzLmdldEJvdW5kYXJ5KClcbiAgfTtcblxuICBmb3IgKGhlYWRlciBpbiB1c2VySGVhZGVycykge1xuICAgIGlmICh1c2VySGVhZGVycy5oYXNPd25Qcm9wZXJ0eShoZWFkZXIpKSB7XG4gICAgICBmb3JtSGVhZGVyc1toZWFkZXIudG9Mb3dlckNhc2UoKV0gPSB1c2VySGVhZGVyc1toZWFkZXJdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmb3JtSGVhZGVycztcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5zZXRCb3VuZGFyeSA9IGZ1bmN0aW9uKGJvdW5kYXJ5KSB7XG4gIHRoaXMuX2JvdW5kYXJ5ID0gYm91bmRhcnk7XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuZ2V0Qm91bmRhcnkgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLl9ib3VuZGFyeSkge1xuICAgIHRoaXMuX2dlbmVyYXRlQm91bmRhcnkoKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9ib3VuZGFyeTtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5nZXRCdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGRhdGFCdWZmZXIgPSBuZXcgQnVmZmVyLmFsbG9jKCAwICk7XG4gIHZhciBib3VuZGFyeSA9IHRoaXMuZ2V0Qm91bmRhcnkoKTtcblxuICAvLyBDcmVhdGUgdGhlIGZvcm0gY29udGVudC4gQWRkIExpbmUgYnJlYWtzIHRvIHRoZSBlbmQgb2YgZGF0YS5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuX3N0cmVhbXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX3N0cmVhbXNbaV0gIT09ICdmdW5jdGlvbicpIHtcblxuICAgICAgLy8gQWRkIGNvbnRlbnQgdG8gdGhlIGJ1ZmZlci5cbiAgICAgIGlmKEJ1ZmZlci5pc0J1ZmZlcih0aGlzLl9zdHJlYW1zW2ldKSkge1xuICAgICAgICBkYXRhQnVmZmVyID0gQnVmZmVyLmNvbmNhdCggW2RhdGFCdWZmZXIsIHRoaXMuX3N0cmVhbXNbaV1dKTtcbiAgICAgIH1lbHNlIHtcbiAgICAgICAgZGF0YUJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoIFtkYXRhQnVmZmVyLCBCdWZmZXIuZnJvbSh0aGlzLl9zdHJlYW1zW2ldKV0pO1xuICAgICAgfVxuXG4gICAgICAvLyBBZGQgYnJlYWsgYWZ0ZXIgY29udGVudC5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5fc3RyZWFtc1tpXSAhPT0gJ3N0cmluZycgfHwgdGhpcy5fc3RyZWFtc1tpXS5zdWJzdHJpbmcoIDIsIGJvdW5kYXJ5Lmxlbmd0aCArIDIgKSAhPT0gYm91bmRhcnkpIHtcbiAgICAgICAgZGF0YUJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoIFtkYXRhQnVmZmVyLCBCdWZmZXIuZnJvbShGb3JtRGF0YS5MSU5FX0JSRUFLKV0gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBBZGQgdGhlIGZvb3RlciBhbmQgcmV0dXJuIHRoZSBCdWZmZXIgb2JqZWN0LlxuICByZXR1cm4gQnVmZmVyLmNvbmNhdCggW2RhdGFCdWZmZXIsIEJ1ZmZlci5mcm9tKHRoaXMuX2xhc3RCb3VuZGFyeSgpKV0gKTtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5fZ2VuZXJhdGVCb3VuZGFyeSA9IGZ1bmN0aW9uKCkge1xuICAvLyBUaGlzIGdlbmVyYXRlcyBhIDUwIGNoYXJhY3RlciBib3VuZGFyeSBzaW1pbGFyIHRvIHRob3NlIHVzZWQgYnkgRmlyZWZveC5cbiAgLy8gVGhleSBhcmUgb3B0aW1pemVkIGZvciBib3llci1tb29yZSBwYXJzaW5nLlxuICB2YXIgYm91bmRhcnkgPSAnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDI0OyBpKyspIHtcbiAgICBib3VuZGFyeSArPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCkudG9TdHJpbmcoMTYpO1xuICB9XG5cbiAgdGhpcy5fYm91bmRhcnkgPSBib3VuZGFyeTtcbn07XG5cbi8vIE5vdGU6IGdldExlbmd0aFN5bmMgRE9FU04nVCBjYWxjdWxhdGUgc3RyZWFtcyBsZW5ndGhcbi8vIEFzIHdvcmthcm91bmQgb25lIGNhbiBjYWxjdWxhdGUgZmlsZSBzaXplIG1hbnVhbGx5XG4vLyBhbmQgYWRkIGl0IGFzIGtub3duTGVuZ3RoIG9wdGlvblxuRm9ybURhdGEucHJvdG90eXBlLmdldExlbmd0aFN5bmMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGtub3duTGVuZ3RoID0gdGhpcy5fb3ZlcmhlYWRMZW5ndGggKyB0aGlzLl92YWx1ZUxlbmd0aDtcblxuICAvLyBEb24ndCBnZXQgY29uZnVzZWQsIHRoZXJlIGFyZSAzIFwiaW50ZXJuYWxcIiBzdHJlYW1zIGZvciBlYWNoIGtleXZhbCBwYWlyXG4gIC8vIHNvIGl0IGJhc2ljYWxseSBjaGVja3MgaWYgdGhlcmUgaXMgYW55IHZhbHVlIGFkZGVkIHRvIHRoZSBmb3JtXG4gIGlmICh0aGlzLl9zdHJlYW1zLmxlbmd0aCkge1xuICAgIGtub3duTGVuZ3RoICs9IHRoaXMuX2xhc3RCb3VuZGFyeSgpLmxlbmd0aDtcbiAgfVxuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mb3JtLWRhdGEvZm9ybS1kYXRhL2lzc3Vlcy80MFxuICBpZiAoIXRoaXMuaGFzS25vd25MZW5ndGgoKSkge1xuICAgIC8vIFNvbWUgYXN5bmMgbGVuZ3RoIHJldHJpZXZlcnMgYXJlIHByZXNlbnRcbiAgICAvLyB0aGVyZWZvcmUgc3luY2hyb25vdXMgbGVuZ3RoIGNhbGN1bGF0aW9uIGlzIGZhbHNlLlxuICAgIC8vIFBsZWFzZSB1c2UgZ2V0TGVuZ3RoKGNhbGxiYWNrKSB0byBnZXQgcHJvcGVyIGxlbmd0aFxuICAgIHRoaXMuX2Vycm9yKG5ldyBFcnJvcignQ2Fubm90IGNhbGN1bGF0ZSBwcm9wZXIgbGVuZ3RoIGluIHN5bmNocm9ub3VzIHdheS4nKSk7XG4gIH1cblxuICByZXR1cm4ga25vd25MZW5ndGg7XG59O1xuXG4vLyBQdWJsaWMgQVBJIHRvIGNoZWNrIGlmIGxlbmd0aCBvZiBhZGRlZCB2YWx1ZXMgaXMga25vd25cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mb3JtLWRhdGEvZm9ybS1kYXRhL2lzc3Vlcy8xOTZcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mb3JtLWRhdGEvZm9ybS1kYXRhL2lzc3Vlcy8yNjJcbkZvcm1EYXRhLnByb3RvdHlwZS5oYXNLbm93bkxlbmd0aCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaGFzS25vd25MZW5ndGggPSB0cnVlO1xuXG4gIGlmICh0aGlzLl92YWx1ZXNUb01lYXN1cmUubGVuZ3RoKSB7XG4gICAgaGFzS25vd25MZW5ndGggPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBoYXNLbm93bkxlbmd0aDtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5nZXRMZW5ndGggPSBmdW5jdGlvbihjYikge1xuICB2YXIga25vd25MZW5ndGggPSB0aGlzLl9vdmVyaGVhZExlbmd0aCArIHRoaXMuX3ZhbHVlTGVuZ3RoO1xuXG4gIGlmICh0aGlzLl9zdHJlYW1zLmxlbmd0aCkge1xuICAgIGtub3duTGVuZ3RoICs9IHRoaXMuX2xhc3RCb3VuZGFyeSgpLmxlbmd0aDtcbiAgfVxuXG4gIGlmICghdGhpcy5fdmFsdWVzVG9NZWFzdXJlLmxlbmd0aCkge1xuICAgIHByb2Nlc3MubmV4dFRpY2soY2IuYmluZCh0aGlzLCBudWxsLCBrbm93bkxlbmd0aCkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGFzeW5ja2l0LnBhcmFsbGVsKHRoaXMuX3ZhbHVlc1RvTWVhc3VyZSwgdGhpcy5fbGVuZ3RoUmV0cmlldmVyLCBmdW5jdGlvbihlcnIsIHZhbHVlcykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGNiKGVycik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFsdWVzLmZvckVhY2goZnVuY3Rpb24obGVuZ3RoKSB7XG4gICAgICBrbm93bkxlbmd0aCArPSBsZW5ndGg7XG4gICAgfSk7XG5cbiAgICBjYihudWxsLCBrbm93bkxlbmd0aCk7XG4gIH0pO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLnN1Ym1pdCA9IGZ1bmN0aW9uKHBhcmFtcywgY2IpIHtcbiAgdmFyIHJlcXVlc3RcbiAgICAsIG9wdGlvbnNcbiAgICAsIGRlZmF1bHRzID0ge21ldGhvZDogJ3Bvc3QnfVxuICAgIDtcblxuICAvLyBwYXJzZSBwcm92aWRlZCB1cmwgaWYgaXQncyBzdHJpbmdcbiAgLy8gb3IgdHJlYXQgaXQgYXMgb3B0aW9ucyBvYmplY3RcbiAgaWYgKHR5cGVvZiBwYXJhbXMgPT0gJ3N0cmluZycpIHtcblxuICAgIHBhcmFtcyA9IHBhcnNlVXJsKHBhcmFtcyk7XG4gICAgb3B0aW9ucyA9IHBvcHVsYXRlKHtcbiAgICAgIHBvcnQ6IHBhcmFtcy5wb3J0LFxuICAgICAgcGF0aDogcGFyYW1zLnBhdGhuYW1lLFxuICAgICAgaG9zdDogcGFyYW1zLmhvc3RuYW1lLFxuICAgICAgcHJvdG9jb2w6IHBhcmFtcy5wcm90b2NvbFxuICAgIH0sIGRlZmF1bHRzKTtcblxuICAvLyB1c2UgY3VzdG9tIHBhcmFtc1xuICB9IGVsc2Uge1xuXG4gICAgb3B0aW9ucyA9IHBvcHVsYXRlKHBhcmFtcywgZGVmYXVsdHMpO1xuICAgIC8vIGlmIG5vIHBvcnQgcHJvdmlkZWQgdXNlIGRlZmF1bHQgb25lXG4gICAgaWYgKCFvcHRpb25zLnBvcnQpIHtcbiAgICAgIG9wdGlvbnMucG9ydCA9IG9wdGlvbnMucHJvdG9jb2wgPT0gJ2h0dHBzOicgPyA0NDMgOiA4MDtcbiAgICB9XG4gIH1cblxuICAvLyBwdXQgdGhhdCBnb29kIGNvZGUgaW4gZ2V0SGVhZGVycyB0byBzb21lIHVzZVxuICBvcHRpb25zLmhlYWRlcnMgPSB0aGlzLmdldEhlYWRlcnMocGFyYW1zLmhlYWRlcnMpO1xuXG4gIC8vIGh0dHBzIGlmIHNwZWNpZmllZCwgZmFsbGJhY2sgdG8gaHR0cCBpbiBhbnkgb3RoZXIgY2FzZVxuICBpZiAob3B0aW9ucy5wcm90b2NvbCA9PSAnaHR0cHM6Jykge1xuICAgIHJlcXVlc3QgPSBodHRwcy5yZXF1ZXN0KG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHJlcXVlc3QgPSBodHRwLnJlcXVlc3Qob3B0aW9ucyk7XG4gIH1cblxuICAvLyBnZXQgY29udGVudCBsZW5ndGggYW5kIGZpcmUgYXdheVxuICB0aGlzLmdldExlbmd0aChmdW5jdGlvbihlcnIsIGxlbmd0aCkge1xuICAgIGlmIChlcnIgJiYgZXJyICE9PSAnVW5rbm93biBzdHJlYW0nKSB7XG4gICAgICB0aGlzLl9lcnJvcihlcnIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGFkZCBjb250ZW50IGxlbmd0aFxuICAgIGlmIChsZW5ndGgpIHtcbiAgICAgIHJlcXVlc3Quc2V0SGVhZGVyKCdDb250ZW50LUxlbmd0aCcsIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgdGhpcy5waXBlKHJlcXVlc3QpO1xuICAgIGlmIChjYikge1xuICAgICAgdmFyIG9uUmVzcG9uc2U7XG5cbiAgICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uIChlcnJvciwgcmVzcG9uY2UpIHtcbiAgICAgICAgcmVxdWVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBjYWxsYmFjayk7XG4gICAgICAgIHJlcXVlc3QucmVtb3ZlTGlzdGVuZXIoJ3Jlc3BvbnNlJywgb25SZXNwb25zZSk7XG5cbiAgICAgICAgcmV0dXJuIGNiLmNhbGwodGhpcywgZXJyb3IsIHJlc3BvbmNlKTtcbiAgICAgIH07XG5cbiAgICAgIG9uUmVzcG9uc2UgPSBjYWxsYmFjay5iaW5kKHRoaXMsIG51bGwpO1xuXG4gICAgICByZXF1ZXN0Lm9uKCdlcnJvcicsIGNhbGxiYWNrKTtcbiAgICAgIHJlcXVlc3Qub24oJ3Jlc3BvbnNlJywgb25SZXNwb25zZSk7XG4gICAgfVxuICB9LmJpbmQodGhpcykpO1xuXG4gIHJldHVybiByZXF1ZXN0O1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uKGVycikge1xuICBpZiAoIXRoaXMuZXJyb3IpIHtcbiAgICB0aGlzLmVycm9yID0gZXJyO1xuICAgIHRoaXMucGF1c2UoKTtcbiAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgfVxufTtcblxuRm9ybURhdGEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJ1tvYmplY3QgRm9ybURhdGFdJztcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcGFyc2VVcmwgPSByZXF1aXJlKCd1cmwnKS5wYXJzZTtcblxudmFyIERFRkFVTFRfUE9SVFMgPSB7XG4gIGZ0cDogMjEsXG4gIGdvcGhlcjogNzAsXG4gIGh0dHA6IDgwLFxuICBodHRwczogNDQzLFxuICB3czogODAsXG4gIHdzczogNDQzLFxufTtcblxudmFyIHN0cmluZ0VuZHNXaXRoID0gU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aCB8fCBmdW5jdGlvbihzKSB7XG4gIHJldHVybiBzLmxlbmd0aCA8PSB0aGlzLmxlbmd0aCAmJlxuICAgIHRoaXMuaW5kZXhPZihzLCB0aGlzLmxlbmd0aCAtIHMubGVuZ3RoKSAhPT0gLTE7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gdXJsIC0gVGhlIFVSTCwgb3IgdGhlIHJlc3VsdCBmcm9tIHVybC5wYXJzZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFVSTCBvZiB0aGUgcHJveHkgdGhhdCBzaG91bGQgaGFuZGxlIHRoZSByZXF1ZXN0IHRvIHRoZVxuICogIGdpdmVuIFVSTC4gSWYgbm8gcHJveHkgaXMgc2V0LCB0aGlzIHdpbGwgYmUgYW4gZW1wdHkgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBnZXRQcm94eUZvclVybCh1cmwpIHtcbiAgdmFyIHBhcnNlZFVybCA9IHR5cGVvZiB1cmwgPT09ICdzdHJpbmcnID8gcGFyc2VVcmwodXJsKSA6IHVybCB8fCB7fTtcbiAgdmFyIHByb3RvID0gcGFyc2VkVXJsLnByb3RvY29sO1xuICB2YXIgaG9zdG5hbWUgPSBwYXJzZWRVcmwuaG9zdDtcbiAgdmFyIHBvcnQgPSBwYXJzZWRVcmwucG9ydDtcbiAgaWYgKHR5cGVvZiBob3N0bmFtZSAhPT0gJ3N0cmluZycgfHwgIWhvc3RuYW1lIHx8IHR5cGVvZiBwcm90byAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gJyc7ICAvLyBEb24ndCBwcm94eSBVUkxzIHdpdGhvdXQgYSB2YWxpZCBzY2hlbWUgb3IgaG9zdC5cbiAgfVxuXG4gIHByb3RvID0gcHJvdG8uc3BsaXQoJzonLCAxKVswXTtcbiAgLy8gU3RyaXBwaW5nIHBvcnRzIGluIHRoaXMgd2F5IGluc3RlYWQgb2YgdXNpbmcgcGFyc2VkVXJsLmhvc3RuYW1lIHRvIG1ha2VcbiAgLy8gc3VyZSB0aGF0IHRoZSBicmFja2V0cyBhcm91bmQgSVB2NiBhZGRyZXNzZXMgYXJlIGtlcHQuXG4gIGhvc3RuYW1lID0gaG9zdG5hbWUucmVwbGFjZSgvOlxcZCokLywgJycpO1xuICBwb3J0ID0gcGFyc2VJbnQocG9ydCkgfHwgREVGQVVMVF9QT1JUU1twcm90b10gfHwgMDtcbiAgaWYgKCFzaG91bGRQcm94eShob3N0bmFtZSwgcG9ydCkpIHtcbiAgICByZXR1cm4gJyc7ICAvLyBEb24ndCBwcm94eSBVUkxzIHRoYXQgbWF0Y2ggTk9fUFJPWFkuXG4gIH1cblxuICB2YXIgcHJveHkgPVxuICAgIGdldEVudignbnBtX2NvbmZpZ18nICsgcHJvdG8gKyAnX3Byb3h5JykgfHxcbiAgICBnZXRFbnYocHJvdG8gKyAnX3Byb3h5JykgfHxcbiAgICBnZXRFbnYoJ25wbV9jb25maWdfcHJveHknKSB8fFxuICAgIGdldEVudignYWxsX3Byb3h5Jyk7XG4gIGlmIChwcm94eSAmJiBwcm94eS5pbmRleE9mKCc6Ly8nKSA9PT0gLTEpIHtcbiAgICAvLyBNaXNzaW5nIHNjaGVtZSBpbiBwcm94eSwgZGVmYXVsdCB0byB0aGUgcmVxdWVzdGVkIFVSTCdzIHNjaGVtZS5cbiAgICBwcm94eSA9IHByb3RvICsgJzovLycgKyBwcm94eTtcbiAgfVxuICByZXR1cm4gcHJveHk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgZ2l2ZW4gVVJMIHNob3VsZCBiZSBwcm94aWVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBob3N0bmFtZSAtIFRoZSBob3N0IG5hbWUgb2YgdGhlIFVSTC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3J0IC0gVGhlIGVmZmVjdGl2ZSBwb3J0IG9mIHRoZSBVUkwuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciB0aGUgZ2l2ZW4gVVJMIHNob3VsZCBiZSBwcm94aWVkLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2hvdWxkUHJveHkoaG9zdG5hbWUsIHBvcnQpIHtcbiAgdmFyIE5PX1BST1hZID1cbiAgICAoZ2V0RW52KCducG1fY29uZmlnX25vX3Byb3h5JykgfHwgZ2V0RW52KCdub19wcm94eScpKS50b0xvd2VyQ2FzZSgpO1xuICBpZiAoIU5PX1BST1hZKSB7XG4gICAgcmV0dXJuIHRydWU7ICAvLyBBbHdheXMgcHJveHkgaWYgTk9fUFJPWFkgaXMgbm90IHNldC5cbiAgfVxuICBpZiAoTk9fUFJPWFkgPT09ICcqJykge1xuICAgIHJldHVybiBmYWxzZTsgIC8vIE5ldmVyIHByb3h5IGlmIHdpbGRjYXJkIGlzIHNldC5cbiAgfVxuXG4gIHJldHVybiBOT19QUk9YWS5zcGxpdCgvWyxcXHNdLykuZXZlcnkoZnVuY3Rpb24ocHJveHkpIHtcbiAgICBpZiAoIXByb3h5KSB7XG4gICAgICByZXR1cm4gdHJ1ZTsgIC8vIFNraXAgemVyby1sZW5ndGggaG9zdHMuXG4gICAgfVxuICAgIHZhciBwYXJzZWRQcm94eSA9IHByb3h5Lm1hdGNoKC9eKC4rKTooXFxkKykkLyk7XG4gICAgdmFyIHBhcnNlZFByb3h5SG9zdG5hbWUgPSBwYXJzZWRQcm94eSA/IHBhcnNlZFByb3h5WzFdIDogcHJveHk7XG4gICAgdmFyIHBhcnNlZFByb3h5UG9ydCA9IHBhcnNlZFByb3h5ID8gcGFyc2VJbnQocGFyc2VkUHJveHlbMl0pIDogMDtcbiAgICBpZiAocGFyc2VkUHJveHlQb3J0ICYmIHBhcnNlZFByb3h5UG9ydCAhPT0gcG9ydCkge1xuICAgICAgcmV0dXJuIHRydWU7ICAvLyBTa2lwIGlmIHBvcnRzIGRvbid0IG1hdGNoLlxuICAgIH1cblxuICAgIGlmICghL15bLipdLy50ZXN0KHBhcnNlZFByb3h5SG9zdG5hbWUpKSB7XG4gICAgICAvLyBObyB3aWxkY2FyZHMsIHNvIHN0b3AgcHJveHlpbmcgaWYgdGhlcmUgaXMgYW4gZXhhY3QgbWF0Y2guXG4gICAgICByZXR1cm4gaG9zdG5hbWUgIT09IHBhcnNlZFByb3h5SG9zdG5hbWU7XG4gICAgfVxuXG4gICAgaWYgKHBhcnNlZFByb3h5SG9zdG5hbWUuY2hhckF0KDApID09PSAnKicpIHtcbiAgICAgIC8vIFJlbW92ZSBsZWFkaW5nIHdpbGRjYXJkLlxuICAgICAgcGFyc2VkUHJveHlIb3N0bmFtZSA9IHBhcnNlZFByb3h5SG9zdG5hbWUuc2xpY2UoMSk7XG4gICAgfVxuICAgIC8vIFN0b3AgcHJveHlpbmcgaWYgdGhlIGhvc3RuYW1lIGVuZHMgd2l0aCB0aGUgbm9fcHJveHkgaG9zdC5cbiAgICByZXR1cm4gIXN0cmluZ0VuZHNXaXRoLmNhbGwoaG9zdG5hbWUsIHBhcnNlZFByb3h5SG9zdG5hbWUpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIGZvciBhbiBlbnZpcm9ubWVudCB2YXJpYWJsZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIG5hbWUgb2YgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgdmFsdWUgb2YgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0RW52KGtleSkge1xuICByZXR1cm4gcHJvY2Vzcy5lbnZba2V5LnRvTG93ZXJDYXNlKCldIHx8IHByb2Nlc3MuZW52W2tleS50b1VwcGVyQ2FzZSgpXSB8fCAnJztcbn1cblxuZXhwb3J0cy5nZXRQcm94eUZvclVybCA9IGdldFByb3h5Rm9yVXJsO1xuIiwgIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgdyA9IGQgKiA3O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWwpKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigtPyg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8d2Vla3M/fHd8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ3dlZWtzJzpcbiAgICBjYXNlICd3ZWVrJzpcbiAgICBjYXNlICd3JzpcbiAgICAgIHJldHVybiBuICogdztcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgZCwgJ2RheScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGgsICdob3VyJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgbSwgJ21pbnV0ZScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIHMsICdzZWNvbmQnKTtcbiAgfVxuICByZXR1cm4gbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG1zQWJzLCBuLCBuYW1lKSB7XG4gIHZhciBpc1BsdXJhbCA9IG1zQWJzID49IG4gKiAxLjU7XG4gIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbikgKyAnICcgKyBuYW1lICsgKGlzUGx1cmFsID8gJ3MnIDogJycpO1xufVxuIiwgIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICovXG5cbmZ1bmN0aW9uIHNldHVwKGVudikge1xuXHRjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5kZWZhdWx0ID0gY3JlYXRlRGVidWc7XG5cdGNyZWF0ZURlYnVnLmNvZXJjZSA9IGNvZXJjZTtcblx0Y3JlYXRlRGVidWcuZGlzYWJsZSA9IGRpc2FibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZSA9IGVuYWJsZTtcblx0Y3JlYXRlRGVidWcuZW5hYmxlZCA9IGVuYWJsZWQ7XG5cdGNyZWF0ZURlYnVnLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblx0Y3JlYXRlRGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cblx0T2JqZWN0LmtleXMoZW52KS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0Y3JlYXRlRGVidWdba2V5XSA9IGVudltrZXldO1xuXHR9KTtcblxuXHQvKipcblx0KiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cblx0Ki9cblxuXHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuXG5cdC8qKlxuXHQqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cblx0KlxuXHQqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cblx0Ki9cblx0Y3JlYXRlRGVidWcuZm9ybWF0dGVycyA9IHt9O1xuXG5cdC8qKlxuXHQqIFNlbGVjdHMgYSBjb2xvciBmb3IgYSBkZWJ1ZyBuYW1lc3BhY2Vcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIFRoZSBuYW1lc3BhY2Ugc3RyaW5nIGZvciB0aGUgZGVidWcgaW5zdGFuY2UgdG8gYmUgY29sb3JlZFxuXHQqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9IEFuIEFOU0kgY29sb3IgY29kZSBmb3IgdGhlIGdpdmVuIG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcblx0XHRsZXQgaGFzaCA9IDA7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzcGFjZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0aGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG5cdFx0XHRoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuXHRcdH1cblxuXHRcdHJldHVybiBjcmVhdGVEZWJ1Zy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBjcmVhdGVEZWJ1Zy5jb2xvcnMubGVuZ3RoXTtcblx0fVxuXHRjcmVhdGVEZWJ1Zy5zZWxlY3RDb2xvciA9IHNlbGVjdENvbG9yO1xuXG5cdC8qKlxuXHQqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEByZXR1cm4ge0Z1bmN0aW9ufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXHRcdGxldCBwcmV2VGltZTtcblx0XHRsZXQgZW5hYmxlT3ZlcnJpZGUgPSBudWxsO1xuXHRcdGxldCBuYW1lc3BhY2VzQ2FjaGU7XG5cdFx0bGV0IGVuYWJsZWRDYWNoZTtcblxuXHRcdGZ1bmN0aW9uIGRlYnVnKC4uLmFyZ3MpIHtcblx0XHRcdC8vIERpc2FibGVkP1xuXHRcdFx0aWYgKCFkZWJ1Zy5lbmFibGVkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3Qgc2VsZiA9IGRlYnVnO1xuXG5cdFx0XHQvLyBTZXQgYGRpZmZgIHRpbWVzdGFtcFxuXHRcdFx0Y29uc3QgY3VyciA9IE51bWJlcihuZXcgRGF0ZSgpKTtcblx0XHRcdGNvbnN0IG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcblx0XHRcdHNlbGYuZGlmZiA9IG1zO1xuXHRcdFx0c2VsZi5wcmV2ID0gcHJldlRpbWU7XG5cdFx0XHRzZWxmLmN1cnIgPSBjdXJyO1xuXHRcdFx0cHJldlRpbWUgPSBjdXJyO1xuXG5cdFx0XHRhcmdzWzBdID0gY3JlYXRlRGVidWcuY29lcmNlKGFyZ3NbMF0pO1xuXG5cdFx0XHRpZiAodHlwZW9mIGFyZ3NbMF0gIT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdC8vIEFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG5cdFx0XHRcdGFyZ3MudW5zaGlmdCgnJU8nKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcblx0XHRcdGxldCBpbmRleCA9IDA7XG5cdFx0XHRhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgKG1hdGNoLCBmb3JtYXQpID0+IHtcblx0XHRcdFx0Ly8gSWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuXHRcdFx0XHRpZiAobWF0Y2ggPT09ICclJScpIHtcblx0XHRcdFx0XHRyZXR1cm4gJyUnO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdGNvbnN0IGZvcm1hdHRlciA9IGNyZWF0ZURlYnVnLmZvcm1hdHRlcnNbZm9ybWF0XTtcblx0XHRcdFx0aWYgKHR5cGVvZiBmb3JtYXR0ZXIgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRjb25zdCB2YWwgPSBhcmdzW2luZGV4XTtcblx0XHRcdFx0XHRtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cblx0XHRcdFx0XHQvLyBOb3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG5cdFx0XHRcdFx0YXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHRcdGluZGV4LS07XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIEFwcGx5IGVudi1zcGVjaWZpYyBmb3JtYXR0aW5nIChjb2xvcnMsIGV0Yy4pXG5cdFx0XHRjcmVhdGVEZWJ1Zy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG5cblx0XHRcdGNvbnN0IGxvZ0ZuID0gc2VsZi5sb2cgfHwgY3JlYXRlRGVidWcubG9nO1xuXHRcdFx0bG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cdFx0fVxuXG5cdFx0ZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuXHRcdGRlYnVnLnVzZUNvbG9ycyA9IGNyZWF0ZURlYnVnLnVzZUNvbG9ycygpO1xuXHRcdGRlYnVnLmNvbG9yID0gY3JlYXRlRGVidWcuc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcblx0XHRkZWJ1Zy5leHRlbmQgPSBleHRlbmQ7XG5cdFx0ZGVidWcuZGVzdHJveSA9IGNyZWF0ZURlYnVnLmRlc3Ryb3k7IC8vIFhYWCBUZW1wb3JhcnkuIFdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlxuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGRlYnVnLCAnZW5hYmxlZCcsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuXHRcdFx0Z2V0OiAoKSA9PiB7XG5cdFx0XHRcdGlmIChlbmFibGVPdmVycmlkZSAhPT0gbnVsbCkge1xuXHRcdFx0XHRcdHJldHVybiBlbmFibGVPdmVycmlkZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAobmFtZXNwYWNlc0NhY2hlICE9PSBjcmVhdGVEZWJ1Zy5uYW1lc3BhY2VzKSB7XG5cdFx0XHRcdFx0bmFtZXNwYWNlc0NhY2hlID0gY3JlYXRlRGVidWcubmFtZXNwYWNlcztcblx0XHRcdFx0XHRlbmFibGVkQ2FjaGUgPSBjcmVhdGVEZWJ1Zy5lbmFibGVkKG5hbWVzcGFjZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZW5hYmxlZENhY2hlO1xuXHRcdFx0fSxcblx0XHRcdHNldDogdiA9PiB7XG5cdFx0XHRcdGVuYWJsZU92ZXJyaWRlID0gdjtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIEVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG5cdFx0aWYgKHR5cGVvZiBjcmVhdGVEZWJ1Zy5pbml0ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRjcmVhdGVEZWJ1Zy5pbml0KGRlYnVnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGVidWc7XG5cdH1cblxuXHRmdW5jdGlvbiBleHRlbmQobmFtZXNwYWNlLCBkZWxpbWl0ZXIpIHtcblx0XHRjb25zdCBuZXdEZWJ1ZyA9IGNyZWF0ZURlYnVnKHRoaXMubmFtZXNwYWNlICsgKHR5cGVvZiBkZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gJzonIDogZGVsaW1pdGVyKSArIG5hbWVzcGFjZSk7XG5cdFx0bmV3RGVidWcubG9nID0gdGhpcy5sb2c7XG5cdFx0cmV0dXJuIG5ld0RlYnVnO1xuXHR9XG5cblx0LyoqXG5cdCogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuXHQqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG5cdFx0Y3JlYXRlRGVidWcuc2F2ZShuYW1lc3BhY2VzKTtcblx0XHRjcmVhdGVEZWJ1Zy5uYW1lc3BhY2VzID0gbmFtZXNwYWNlcztcblxuXHRcdGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG5cdFx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHRcdGxldCBpO1xuXHRcdGNvbnN0IHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcblx0XHRjb25zdCBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmICghc3BsaXRbaV0pIHtcblx0XHRcdFx0Ly8gaWdub3JlIGVtcHR5IHN0cmluZ3Ncblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuXG5cdFx0XHRpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG5cdFx0XHRcdGNyZWF0ZURlYnVnLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnNsaWNlKDEpICsgJyQnKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuXHQqXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZGlzYWJsZSgpIHtcblx0XHRjb25zdCBuYW1lc3BhY2VzID0gW1xuXHRcdFx0Li4uY3JlYXRlRGVidWcubmFtZXMubWFwKHRvTmFtZXNwYWNlKSxcblx0XHRcdC4uLmNyZWF0ZURlYnVnLnNraXBzLm1hcCh0b05hbWVzcGFjZSkubWFwKG5hbWVzcGFjZSA9PiAnLScgKyBuYW1lc3BhY2UpXG5cdFx0XS5qb2luKCcsJyk7XG5cdFx0Y3JlYXRlRGVidWcuZW5hYmxlKCcnKTtcblx0XHRyZXR1cm4gbmFtZXNwYWNlcztcblx0fVxuXG5cdC8qKlxuXHQqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG5cdCogQHJldHVybiB7Qm9vbGVhbn1cblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcblx0XHRpZiAobmFtZVtuYW1lLmxlbmd0aCAtIDFdID09PSAnKicpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGxldCBpO1xuXHRcdGxldCBsZW47XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGNyZWF0ZURlYnVnLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoY3JlYXRlRGVidWcubmFtZXNbaV0udGVzdChuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0KiBDb252ZXJ0IHJlZ2V4cCB0byBuYW1lc3BhY2Vcblx0KlxuXHQqIEBwYXJhbSB7UmVnRXhwfSByZWd4ZXBcblx0KiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiB0b05hbWVzcGFjZShyZWdleHApIHtcblx0XHRyZXR1cm4gcmVnZXhwLnRvU3RyaW5nKClcblx0XHRcdC5zdWJzdHJpbmcoMiwgcmVnZXhwLnRvU3RyaW5nKCkubGVuZ3RoIC0gMilcblx0XHRcdC5yZXBsYWNlKC9cXC5cXCpcXD8kLywgJyonKTtcblx0fVxuXG5cdC8qKlxuXHQqIENvZXJjZSBgdmFsYC5cblx0KlxuXHQqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuXHQqIEByZXR1cm4ge01peGVkfVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBjb2VyY2UodmFsKSB7XG5cdFx0aWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSB7XG5cdFx0XHRyZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cblx0LyoqXG5cdCogWFhYIERPIE5PVCBVU0UuIFRoaXMgaXMgYSB0ZW1wb3Jhcnkgc3R1YiBmdW5jdGlvbi5cblx0KiBYWFggSXQgV0lMTCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuXG5cdCovXG5cdGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG5cdFx0Y29uc29sZS53YXJuKCdJbnN0YW5jZSBtZXRob2QgYGRlYnVnLmRlc3Ryb3koKWAgaXMgZGVwcmVjYXRlZCBhbmQgbm8gbG9uZ2VyIGRvZXMgYW55dGhpbmcuIEl0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIGBkZWJ1Z2AuJyk7XG5cdH1cblxuXHRjcmVhdGVEZWJ1Zy5lbmFibGUoY3JlYXRlRGVidWcubG9hZCgpKTtcblxuXHRyZXR1cm4gY3JlYXRlRGVidWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0dXA7XG4iLCAiLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qKlxuICogVGhpcyBpcyB0aGUgd2ViIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICovXG5cbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gbG9jYWxzdG9yYWdlKCk7XG5leHBvcnRzLmRlc3Ryb3kgPSAoKCkgPT4ge1xuXHRsZXQgd2FybmVkID0gZmFsc2U7XG5cblx0cmV0dXJuICgpID0+IHtcblx0XHRpZiAoIXdhcm5lZCkge1xuXHRcdFx0d2FybmVkID0gdHJ1ZTtcblx0XHRcdGNvbnNvbGUud2FybignSW5zdGFuY2UgbWV0aG9kIGBkZWJ1Zy5kZXN0cm95KClgIGlzIGRlcHJlY2F0ZWQgYW5kIG5vIGxvbmdlciBkb2VzIGFueXRoaW5nLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBgZGVidWdgLicpO1xuXHRcdH1cblx0fTtcbn0pKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuXHQnIzAwMDBDQycsXG5cdCcjMDAwMEZGJyxcblx0JyMwMDMzQ0MnLFxuXHQnIzAwMzNGRicsXG5cdCcjMDA2NkNDJyxcblx0JyMwMDY2RkYnLFxuXHQnIzAwOTlDQycsXG5cdCcjMDA5OUZGJyxcblx0JyMwMENDMDAnLFxuXHQnIzAwQ0MzMycsXG5cdCcjMDBDQzY2Jyxcblx0JyMwMENDOTknLFxuXHQnIzAwQ0NDQycsXG5cdCcjMDBDQ0ZGJyxcblx0JyMzMzAwQ0MnLFxuXHQnIzMzMDBGRicsXG5cdCcjMzMzM0NDJyxcblx0JyMzMzMzRkYnLFxuXHQnIzMzNjZDQycsXG5cdCcjMzM2NkZGJyxcblx0JyMzMzk5Q0MnLFxuXHQnIzMzOTlGRicsXG5cdCcjMzNDQzAwJyxcblx0JyMzM0NDMzMnLFxuXHQnIzMzQ0M2NicsXG5cdCcjMzNDQzk5Jyxcblx0JyMzM0NDQ0MnLFxuXHQnIzMzQ0NGRicsXG5cdCcjNjYwMENDJyxcblx0JyM2NjAwRkYnLFxuXHQnIzY2MzNDQycsXG5cdCcjNjYzM0ZGJyxcblx0JyM2NkNDMDAnLFxuXHQnIzY2Q0MzMycsXG5cdCcjOTkwMENDJyxcblx0JyM5OTAwRkYnLFxuXHQnIzk5MzNDQycsXG5cdCcjOTkzM0ZGJyxcblx0JyM5OUNDMDAnLFxuXHQnIzk5Q0MzMycsXG5cdCcjQ0MwMDAwJyxcblx0JyNDQzAwMzMnLFxuXHQnI0NDMDA2NicsXG5cdCcjQ0MwMDk5Jyxcblx0JyNDQzAwQ0MnLFxuXHQnI0NDMDBGRicsXG5cdCcjQ0MzMzAwJyxcblx0JyNDQzMzMzMnLFxuXHQnI0NDMzM2NicsXG5cdCcjQ0MzMzk5Jyxcblx0JyNDQzMzQ0MnLFxuXHQnI0NDMzNGRicsXG5cdCcjQ0M2NjAwJyxcblx0JyNDQzY2MzMnLFxuXHQnI0NDOTkwMCcsXG5cdCcjQ0M5OTMzJyxcblx0JyNDQ0NDMDAnLFxuXHQnI0NDQ0MzMycsXG5cdCcjRkYwMDAwJyxcblx0JyNGRjAwMzMnLFxuXHQnI0ZGMDA2NicsXG5cdCcjRkYwMDk5Jyxcblx0JyNGRjAwQ0MnLFxuXHQnI0ZGMDBGRicsXG5cdCcjRkYzMzAwJyxcblx0JyNGRjMzMzMnLFxuXHQnI0ZGMzM2NicsXG5cdCcjRkYzMzk5Jyxcblx0JyNGRjMzQ0MnLFxuXHQnI0ZGMzNGRicsXG5cdCcjRkY2NjAwJyxcblx0JyNGRjY2MzMnLFxuXHQnI0ZGOTkwMCcsXG5cdCcjRkY5OTMzJyxcblx0JyNGRkNDMDAnLFxuXHQnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcblx0Ly8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuXHQvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuXHQvLyBleHBsaWNpdGx5XG5cdGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiAod2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJyB8fCB3aW5kb3cucHJvY2Vzcy5fX253anMpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvLyBJbnRlcm5ldCBFeHBsb3JlciBhbmQgRWRnZSBkbyBub3Qgc3VwcG9ydCBjb2xvcnMuXG5cdGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvKGVkZ2V8dHJpZGVudClcXC8oXFxkKykvKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIElzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG5cdC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG5cdHJldHVybiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuXHRcdC8vIElzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcblx0XHQodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuXHRcdC8vIElzIGZpcmVmb3ggPj0gdjMxP1xuXHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuXHRcdCh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuXHRcdC8vIERvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xufVxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuXHRhcmdzWzBdID0gKHRoaXMudXNlQ29sb3JzID8gJyVjJyA6ICcnKSArXG5cdFx0dGhpcy5uYW1lc3BhY2UgK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKSArXG5cdFx0YXJnc1swXSArXG5cdFx0KHRoaXMudXNlQ29sb3JzID8gJyVjICcgOiAnICcpICtcblx0XHQnKycgKyBtb2R1bGUuZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG5cdGlmICghdGhpcy51c2VDb2xvcnMpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRjb25zdCBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcblx0YXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0Jyk7XG5cblx0Ly8gVGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcblx0Ly8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuXHQvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cblx0bGV0IGluZGV4ID0gMDtcblx0bGV0IGxhc3RDID0gMDtcblx0YXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIG1hdGNoID0+IHtcblx0XHRpZiAobWF0Y2ggPT09ICclJScpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aW5kZXgrKztcblx0XHRpZiAobWF0Y2ggPT09ICclYycpIHtcblx0XHRcdC8vIFdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuXHRcdFx0Ly8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcblx0XHRcdGxhc3RDID0gaW5kZXg7XG5cdFx0fVxuXHR9KTtcblxuXHRhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5kZWJ1ZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUuZGVidWdgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqIElmIGBjb25zb2xlLmRlYnVnYCBpcyBub3QgYXZhaWxhYmxlLCBmYWxscyBiYWNrXG4gKiB0byBgY29uc29sZS5sb2dgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cbmV4cG9ydHMubG9nID0gY29uc29sZS5kZWJ1ZyB8fCBjb25zb2xlLmxvZyB8fCAoKCkgPT4ge30pO1xuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG5cdHRyeSB7XG5cdFx0aWYgKG5hbWVzcGFjZXMpIHtcblx0XHRcdGV4cG9ydHMuc3RvcmFnZS5zZXRJdGVtKCdkZWJ1ZycsIG5hbWVzcGFjZXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcblx0XHR9XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGxvYWQoKSB7XG5cdGxldCByO1xuXHR0cnkge1xuXHRcdHIgPSBleHBvcnRzLnN0b3JhZ2UuZ2V0SXRlbSgnZGVidWcnKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cblxuXHQvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG5cdGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuXHRcdHIgPSBwcm9jZXNzLmVudi5ERUJVRztcblx0fVxuXG5cdHJldHVybiByO1xufVxuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcblx0dHJ5IHtcblx0XHQvLyBUVk1MS2l0IChBcHBsZSBUViBKUyBSdW50aW1lKSBkb2VzIG5vdCBoYXZlIGEgd2luZG93IG9iamVjdCwganVzdCBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0XG5cdFx0Ly8gVGhlIEJyb3dzZXIgYWxzbyBoYXMgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dC5cblx0XHRyZXR1cm4gbG9jYWxTdG9yYWdlO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29tbW9uJykoZXhwb3J0cyk7XG5cbmNvbnN0IHtmb3JtYXR0ZXJzfSA9IG1vZHVsZS5leHBvcnRzO1xuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbiAodikge1xuXHR0cnkge1xuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRyZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyb3IubWVzc2FnZTtcblx0fVxufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gKGZsYWcsIGFyZ3YgPSBwcm9jZXNzLmFyZ3YpID0+IHtcblx0Y29uc3QgcHJlZml4ID0gZmxhZy5zdGFydHNXaXRoKCctJykgPyAnJyA6IChmbGFnLmxlbmd0aCA9PT0gMSA/ICctJyA6ICctLScpO1xuXHRjb25zdCBwb3NpdGlvbiA9IGFyZ3YuaW5kZXhPZihwcmVmaXggKyBmbGFnKTtcblx0Y29uc3QgdGVybWluYXRvclBvc2l0aW9uID0gYXJndi5pbmRleE9mKCctLScpO1xuXHRyZXR1cm4gcG9zaXRpb24gIT09IC0xICYmICh0ZXJtaW5hdG9yUG9zaXRpb24gPT09IC0xIHx8IHBvc2l0aW9uIDwgdGVybWluYXRvclBvc2l0aW9uKTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuY29uc3Qgb3MgPSByZXF1aXJlKCdvcycpO1xuY29uc3QgdHR5ID0gcmVxdWlyZSgndHR5Jyk7XG5jb25zdCBoYXNGbGFnID0gcmVxdWlyZSgnaGFzLWZsYWcnKTtcblxuY29uc3Qge2Vudn0gPSBwcm9jZXNzO1xuXG5sZXQgZm9yY2VDb2xvcjtcbmlmIChoYXNGbGFnKCduby1jb2xvcicpIHx8XG5cdGhhc0ZsYWcoJ25vLWNvbG9ycycpIHx8XG5cdGhhc0ZsYWcoJ2NvbG9yPWZhbHNlJykgfHxcblx0aGFzRmxhZygnY29sb3I9bmV2ZXInKSkge1xuXHRmb3JjZUNvbG9yID0gMDtcbn0gZWxzZSBpZiAoaGFzRmxhZygnY29sb3InKSB8fFxuXHRoYXNGbGFnKCdjb2xvcnMnKSB8fFxuXHRoYXNGbGFnKCdjb2xvcj10cnVlJykgfHxcblx0aGFzRmxhZygnY29sb3I9YWx3YXlzJykpIHtcblx0Zm9yY2VDb2xvciA9IDE7XG59XG5cbmlmICgnRk9SQ0VfQ09MT1InIGluIGVudikge1xuXHRpZiAoZW52LkZPUkNFX0NPTE9SID09PSAndHJ1ZScpIHtcblx0XHRmb3JjZUNvbG9yID0gMTtcblx0fSBlbHNlIGlmIChlbnYuRk9SQ0VfQ09MT1IgPT09ICdmYWxzZScpIHtcblx0XHRmb3JjZUNvbG9yID0gMDtcblx0fSBlbHNlIHtcblx0XHRmb3JjZUNvbG9yID0gZW52LkZPUkNFX0NPTE9SLmxlbmd0aCA9PT0gMCA/IDEgOiBNYXRoLm1pbihwYXJzZUludChlbnYuRk9SQ0VfQ09MT1IsIDEwKSwgMyk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlTGV2ZWwobGV2ZWwpIHtcblx0aWYgKGxldmVsID09PSAwKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRsZXZlbCxcblx0XHRoYXNCYXNpYzogdHJ1ZSxcblx0XHRoYXMyNTY6IGxldmVsID49IDIsXG5cdFx0aGFzMTZtOiBsZXZlbCA+PSAzXG5cdH07XG59XG5cbmZ1bmN0aW9uIHN1cHBvcnRzQ29sb3IoaGF2ZVN0cmVhbSwgc3RyZWFtSXNUVFkpIHtcblx0aWYgKGZvcmNlQ29sb3IgPT09IDApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGlmIChoYXNGbGFnKCdjb2xvcj0xNm0nKSB8fFxuXHRcdGhhc0ZsYWcoJ2NvbG9yPWZ1bGwnKSB8fFxuXHRcdGhhc0ZsYWcoJ2NvbG9yPXRydWVjb2xvcicpKSB7XG5cdFx0cmV0dXJuIDM7XG5cdH1cblxuXHRpZiAoaGFzRmxhZygnY29sb3I9MjU2JykpIHtcblx0XHRyZXR1cm4gMjtcblx0fVxuXG5cdGlmIChoYXZlU3RyZWFtICYmICFzdHJlYW1Jc1RUWSAmJiBmb3JjZUNvbG9yID09PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGNvbnN0IG1pbiA9IGZvcmNlQ29sb3IgfHwgMDtcblxuXHRpZiAoZW52LlRFUk0gPT09ICdkdW1iJykge1xuXHRcdHJldHVybiBtaW47XG5cdH1cblxuXHRpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuXHRcdC8vIFdpbmRvd3MgMTAgYnVpbGQgMTA1ODYgaXMgdGhlIGZpcnN0IFdpbmRvd3MgcmVsZWFzZSB0aGF0IHN1cHBvcnRzIDI1NiBjb2xvcnMuXG5cdFx0Ly8gV2luZG93cyAxMCBidWlsZCAxNDkzMSBpcyB0aGUgZmlyc3QgcmVsZWFzZSB0aGF0IHN1cHBvcnRzIDE2bS9UcnVlQ29sb3IuXG5cdFx0Y29uc3Qgb3NSZWxlYXNlID0gb3MucmVsZWFzZSgpLnNwbGl0KCcuJyk7XG5cdFx0aWYgKFxuXHRcdFx0TnVtYmVyKG9zUmVsZWFzZVswXSkgPj0gMTAgJiZcblx0XHRcdE51bWJlcihvc1JlbGVhc2VbMl0pID49IDEwNTg2XG5cdFx0KSB7XG5cdFx0XHRyZXR1cm4gTnVtYmVyKG9zUmVsZWFzZVsyXSkgPj0gMTQ5MzEgPyAzIDogMjtcblx0XHR9XG5cblx0XHRyZXR1cm4gMTtcblx0fVxuXG5cdGlmICgnQ0knIGluIGVudikge1xuXHRcdGlmIChbJ1RSQVZJUycsICdDSVJDTEVDSScsICdBUFBWRVlPUicsICdHSVRMQUJfQ0knLCAnR0lUSFVCX0FDVElPTlMnLCAnQlVJTERLSVRFJ10uc29tZShzaWduID0+IHNpZ24gaW4gZW52KSB8fCBlbnYuQ0lfTkFNRSA9PT0gJ2NvZGVzaGlwJykge1xuXHRcdFx0cmV0dXJuIDE7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1pbjtcblx0fVxuXG5cdGlmICgnVEVBTUNJVFlfVkVSU0lPTicgaW4gZW52KSB7XG5cdFx0cmV0dXJuIC9eKDlcXC4oMCpbMS05XVxcZCopXFwufFxcZHsyLH1cXC4pLy50ZXN0KGVudi5URUFNQ0lUWV9WRVJTSU9OKSA/IDEgOiAwO1xuXHR9XG5cblx0aWYgKGVudi5DT0xPUlRFUk0gPT09ICd0cnVlY29sb3InKSB7XG5cdFx0cmV0dXJuIDM7XG5cdH1cblxuXHRpZiAoJ1RFUk1fUFJPR1JBTScgaW4gZW52KSB7XG5cdFx0Y29uc3QgdmVyc2lvbiA9IHBhcnNlSW50KChlbnYuVEVSTV9QUk9HUkFNX1ZFUlNJT04gfHwgJycpLnNwbGl0KCcuJylbMF0sIDEwKTtcblxuXHRcdHN3aXRjaCAoZW52LlRFUk1fUFJPR1JBTSkge1xuXHRcdFx0Y2FzZSAnaVRlcm0uYXBwJzpcblx0XHRcdFx0cmV0dXJuIHZlcnNpb24gPj0gMyA/IDMgOiAyO1xuXHRcdFx0Y2FzZSAnQXBwbGVfVGVybWluYWwnOlxuXHRcdFx0XHRyZXR1cm4gMjtcblx0XHRcdC8vIE5vIGRlZmF1bHRcblx0XHR9XG5cdH1cblxuXHRpZiAoLy0yNTYoY29sb3IpPyQvaS50ZXN0KGVudi5URVJNKSkge1xuXHRcdHJldHVybiAyO1xuXHR9XG5cblx0aWYgKC9ec2NyZWVufF54dGVybXxednQxMDB8XnZ0MjIwfF5yeHZ0fGNvbG9yfGFuc2l8Y3lnd2lufGxpbnV4L2kudGVzdChlbnYuVEVSTSkpIHtcblx0XHRyZXR1cm4gMTtcblx0fVxuXG5cdGlmICgnQ09MT1JURVJNJyBpbiBlbnYpIHtcblx0XHRyZXR1cm4gMTtcblx0fVxuXG5cdHJldHVybiBtaW47XG59XG5cbmZ1bmN0aW9uIGdldFN1cHBvcnRMZXZlbChzdHJlYW0pIHtcblx0Y29uc3QgbGV2ZWwgPSBzdXBwb3J0c0NvbG9yKHN0cmVhbSwgc3RyZWFtICYmIHN0cmVhbS5pc1RUWSk7XG5cdHJldHVybiB0cmFuc2xhdGVMZXZlbChsZXZlbCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRzdXBwb3J0c0NvbG9yOiBnZXRTdXBwb3J0TGV2ZWwsXG5cdHN0ZG91dDogdHJhbnNsYXRlTGV2ZWwoc3VwcG9ydHNDb2xvcih0cnVlLCB0dHkuaXNhdHR5KDEpKSksXG5cdHN0ZGVycjogdHJhbnNsYXRlTGV2ZWwoc3VwcG9ydHNDb2xvcih0cnVlLCB0dHkuaXNhdHR5KDIpKSlcbn07XG4iLCAiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbmNvbnN0IHR0eSA9IHJlcXVpcmUoJ3R0eScpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBOb2RlLmpzIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5leHBvcnRzLmluaXQgPSBpbml0O1xuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuZGVzdHJveSA9IHV0aWwuZGVwcmVjYXRlKFxuXHQoKSA9PiB7fSxcblx0J0luc3RhbmNlIG1ldGhvZCBgZGVidWcuZGVzdHJveSgpYCBpcyBkZXByZWNhdGVkIGFuZCBubyBsb25nZXIgZG9lcyBhbnl0aGluZy4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgYGRlYnVnYC4nXG4pO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFs2LCAyLCAzLCA0LCA1LCAxXTtcblxudHJ5IHtcblx0Ly8gT3B0aW9uYWwgZGVwZW5kZW5jeSAoYXMgaW4sIGRvZXNuJ3QgbmVlZCB0byBiZSBpbnN0YWxsZWQsIE5PVCBsaWtlIG9wdGlvbmFsRGVwZW5kZW5jaWVzIGluIHBhY2thZ2UuanNvbilcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llc1xuXHRjb25zdCBzdXBwb3J0c0NvbG9yID0gcmVxdWlyZSgnc3VwcG9ydHMtY29sb3InKTtcblxuXHRpZiAoc3VwcG9ydHNDb2xvciAmJiAoc3VwcG9ydHNDb2xvci5zdGRlcnIgfHwgc3VwcG9ydHNDb2xvcikubGV2ZWwgPj0gMikge1xuXHRcdGV4cG9ydHMuY29sb3JzID0gW1xuXHRcdFx0MjAsXG5cdFx0XHQyMSxcblx0XHRcdDI2LFxuXHRcdFx0MjcsXG5cdFx0XHQzMixcblx0XHRcdDMzLFxuXHRcdFx0MzgsXG5cdFx0XHQzOSxcblx0XHRcdDQwLFxuXHRcdFx0NDEsXG5cdFx0XHQ0Mixcblx0XHRcdDQzLFxuXHRcdFx0NDQsXG5cdFx0XHQ0NSxcblx0XHRcdDU2LFxuXHRcdFx0NTcsXG5cdFx0XHQ2Mixcblx0XHRcdDYzLFxuXHRcdFx0NjgsXG5cdFx0XHQ2OSxcblx0XHRcdDc0LFxuXHRcdFx0NzUsXG5cdFx0XHQ3Nixcblx0XHRcdDc3LFxuXHRcdFx0NzgsXG5cdFx0XHQ3OSxcblx0XHRcdDgwLFxuXHRcdFx0ODEsXG5cdFx0XHQ5Mixcblx0XHRcdDkzLFxuXHRcdFx0OTgsXG5cdFx0XHQ5OSxcblx0XHRcdDExMixcblx0XHRcdDExMyxcblx0XHRcdDEyOCxcblx0XHRcdDEyOSxcblx0XHRcdDEzNCxcblx0XHRcdDEzNSxcblx0XHRcdDE0OCxcblx0XHRcdDE0OSxcblx0XHRcdDE2MCxcblx0XHRcdDE2MSxcblx0XHRcdDE2Mixcblx0XHRcdDE2Myxcblx0XHRcdDE2NCxcblx0XHRcdDE2NSxcblx0XHRcdDE2Nixcblx0XHRcdDE2Nyxcblx0XHRcdDE2OCxcblx0XHRcdDE2OSxcblx0XHRcdDE3MCxcblx0XHRcdDE3MSxcblx0XHRcdDE3Mixcblx0XHRcdDE3Myxcblx0XHRcdDE3OCxcblx0XHRcdDE3OSxcblx0XHRcdDE4NCxcblx0XHRcdDE4NSxcblx0XHRcdDE5Nixcblx0XHRcdDE5Nyxcblx0XHRcdDE5OCxcblx0XHRcdDE5OSxcblx0XHRcdDIwMCxcblx0XHRcdDIwMSxcblx0XHRcdDIwMixcblx0XHRcdDIwMyxcblx0XHRcdDIwNCxcblx0XHRcdDIwNSxcblx0XHRcdDIwNixcblx0XHRcdDIwNyxcblx0XHRcdDIwOCxcblx0XHRcdDIwOSxcblx0XHRcdDIxNCxcblx0XHRcdDIxNSxcblx0XHRcdDIyMCxcblx0XHRcdDIyMVxuXHRcdF07XG5cdH1cbn0gY2F0Y2ggKGVycm9yKSB7XG5cdC8vIFN3YWxsb3cgLSB3ZSBvbmx5IGNhcmUgaWYgYHN1cHBvcnRzLWNvbG9yYCBpcyBhdmFpbGFibGU7IGl0IGRvZXNuJ3QgaGF2ZSB0byBiZS5cbn1cblxuLyoqXG4gKiBCdWlsZCB1cCB0aGUgZGVmYXVsdCBgaW5zcGVjdE9wdHNgIG9iamVjdCBmcm9tIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXG4gKlxuICogICAkIERFQlVHX0NPTE9SUz1ubyBERUJVR19ERVBUSD0xMCBERUJVR19TSE9XX0hJRERFTj1lbmFibGVkIG5vZGUgc2NyaXB0LmpzXG4gKi9cblxuZXhwb3J0cy5pbnNwZWN0T3B0cyA9IE9iamVjdC5rZXlzKHByb2Nlc3MuZW52KS5maWx0ZXIoa2V5ID0+IHtcblx0cmV0dXJuIC9eZGVidWdfL2kudGVzdChrZXkpO1xufSkucmVkdWNlKChvYmosIGtleSkgPT4ge1xuXHQvLyBDYW1lbC1jYXNlXG5cdGNvbnN0IHByb3AgPSBrZXlcblx0XHQuc3Vic3RyaW5nKDYpXG5cdFx0LnRvTG93ZXJDYXNlKClcblx0XHQucmVwbGFjZSgvXyhbYS16XSkvZywgKF8sIGspID0+IHtcblx0XHRcdHJldHVybiBrLnRvVXBwZXJDYXNlKCk7XG5cdFx0fSk7XG5cblx0Ly8gQ29lcmNlIHN0cmluZyB2YWx1ZSBpbnRvIEpTIHZhbHVlXG5cdGxldCB2YWwgPSBwcm9jZXNzLmVudltrZXldO1xuXHRpZiAoL14oeWVzfG9ufHRydWV8ZW5hYmxlZCkkL2kudGVzdCh2YWwpKSB7XG5cdFx0dmFsID0gdHJ1ZTtcblx0fSBlbHNlIGlmICgvXihub3xvZmZ8ZmFsc2V8ZGlzYWJsZWQpJC9pLnRlc3QodmFsKSkge1xuXHRcdHZhbCA9IGZhbHNlO1xuXHR9IGVsc2UgaWYgKHZhbCA9PT0gJ251bGwnKSB7XG5cdFx0dmFsID0gbnVsbDtcblx0fSBlbHNlIHtcblx0XHR2YWwgPSBOdW1iZXIodmFsKTtcblx0fVxuXG5cdG9ialtwcm9wXSA9IHZhbDtcblx0cmV0dXJuIG9iajtcbn0sIHt9KTtcblxuLyoqXG4gKiBJcyBzdGRvdXQgYSBUVFk/IENvbG9yZWQgb3V0cHV0IGlzIGVuYWJsZWQgd2hlbiBgdHJ1ZWAuXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuXHRyZXR1cm4gJ2NvbG9ycycgaW4gZXhwb3J0cy5pbnNwZWN0T3B0cyA/XG5cdFx0Qm9vbGVhbihleHBvcnRzLmluc3BlY3RPcHRzLmNvbG9ycykgOlxuXHRcdHR0eS5pc2F0dHkocHJvY2Vzcy5zdGRlcnIuZmQpO1xufVxuXG4vKipcbiAqIEFkZHMgQU5TSSBjb2xvciBlc2NhcGUgY29kZXMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuXHRjb25zdCB7bmFtZXNwYWNlOiBuYW1lLCB1c2VDb2xvcnN9ID0gdGhpcztcblxuXHRpZiAodXNlQ29sb3JzKSB7XG5cdFx0Y29uc3QgYyA9IHRoaXMuY29sb3I7XG5cdFx0Y29uc3QgY29sb3JDb2RlID0gJ1xcdTAwMUJbMycgKyAoYyA8IDggPyBjIDogJzg7NTsnICsgYyk7XG5cdFx0Y29uc3QgcHJlZml4ID0gYCAgJHtjb2xvckNvZGV9OzFtJHtuYW1lfSBcXHUwMDFCWzBtYDtcblxuXHRcdGFyZ3NbMF0gPSBwcmVmaXggKyBhcmdzWzBdLnNwbGl0KCdcXG4nKS5qb2luKCdcXG4nICsgcHJlZml4KTtcblx0XHRhcmdzLnB1c2goY29sb3JDb2RlICsgJ20rJyArIG1vZHVsZS5leHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZikgKyAnXFx1MDAxQlswbScpO1xuXHR9IGVsc2Uge1xuXHRcdGFyZ3NbMF0gPSBnZXREYXRlKCkgKyBuYW1lICsgJyAnICsgYXJnc1swXTtcblx0fVxufVxuXG5mdW5jdGlvbiBnZXREYXRlKCkge1xuXHRpZiAoZXhwb3J0cy5pbnNwZWN0T3B0cy5oaWRlRGF0ZSkge1xuXHRcdHJldHVybiAnJztcblx0fVxuXHRyZXR1cm4gbmV3IERhdGUoKS50b0lTT1N0cmluZygpICsgJyAnO1xufVxuXG4vKipcbiAqIEludm9rZXMgYHV0aWwuZm9ybWF0V2l0aE9wdGlvbnMoKWAgd2l0aCB0aGUgc3BlY2lmaWVkIGFyZ3VtZW50cyBhbmQgd3JpdGVzIHRvIHN0ZGVyci5cbiAqL1xuXG5mdW5jdGlvbiBsb2coLi4uYXJncykge1xuXHRyZXR1cm4gcHJvY2Vzcy5zdGRlcnIud3JpdGUodXRpbC5mb3JtYXRXaXRoT3B0aW9ucyhleHBvcnRzLmluc3BlY3RPcHRzLCAuLi5hcmdzKSArICdcXG4nKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuXHRpZiAobmFtZXNwYWNlcykge1xuXHRcdHByb2Nlc3MuZW52LkRFQlVHID0gbmFtZXNwYWNlcztcblx0fSBlbHNlIHtcblx0XHQvLyBJZiB5b3Ugc2V0IGEgcHJvY2Vzcy5lbnYgZmllbGQgdG8gbnVsbCBvciB1bmRlZmluZWQsIGl0IGdldHMgY2FzdCB0byB0aGVcblx0XHQvLyBzdHJpbmcgJ251bGwnIG9yICd1bmRlZmluZWQnLiBKdXN0IGRlbGV0ZSBpbnN0ZWFkLlxuXHRcdGRlbGV0ZSBwcm9jZXNzLmVudi5ERUJVRztcblx0fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG5cdHJldHVybiBwcm9jZXNzLmVudi5ERUJVRztcbn1cblxuLyoqXG4gKiBJbml0IGxvZ2ljIGZvciBgZGVidWdgIGluc3RhbmNlcy5cbiAqXG4gKiBDcmVhdGUgYSBuZXcgYGluc3BlY3RPcHRzYCBvYmplY3QgaW4gY2FzZSBgdXNlQ29sb3JzYCBpcyBzZXRcbiAqIGRpZmZlcmVudGx5IGZvciBhIHBhcnRpY3VsYXIgYGRlYnVnYCBpbnN0YW5jZS5cbiAqL1xuXG5mdW5jdGlvbiBpbml0KGRlYnVnKSB7XG5cdGRlYnVnLmluc3BlY3RPcHRzID0ge307XG5cblx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGV4cG9ydHMuaW5zcGVjdE9wdHMpO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0XHRkZWJ1Zy5pbnNwZWN0T3B0c1trZXlzW2ldXSA9IGV4cG9ydHMuaW5zcGVjdE9wdHNba2V5c1tpXV07XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbW1vbicpKGV4cG9ydHMpO1xuXG5jb25zdCB7Zm9ybWF0dGVyc30gPSBtb2R1bGUuZXhwb3J0cztcblxuLyoqXG4gKiBNYXAgJW8gdG8gYHV0aWwuaW5zcGVjdCgpYCwgYWxsIG9uIGEgc2luZ2xlIGxpbmUuXG4gKi9cblxuZm9ybWF0dGVycy5vID0gZnVuY3Rpb24gKHYpIHtcblx0dGhpcy5pbnNwZWN0T3B0cy5jb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblx0cmV0dXJuIHV0aWwuaW5zcGVjdCh2LCB0aGlzLmluc3BlY3RPcHRzKVxuXHRcdC5zcGxpdCgnXFxuJylcblx0XHQubWFwKHN0ciA9PiBzdHIudHJpbSgpKVxuXHRcdC5qb2luKCcgJyk7XG59O1xuXG4vKipcbiAqIE1hcCAlTyB0byBgdXRpbC5pbnNwZWN0KClgLCBhbGxvd2luZyBtdWx0aXBsZSBsaW5lcyBpZiBuZWVkZWQuXG4gKi9cblxuZm9ybWF0dGVycy5PID0gZnVuY3Rpb24gKHYpIHtcblx0dGhpcy5pbnNwZWN0T3B0cy5jb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblx0cmV0dXJuIHV0aWwuaW5zcGVjdCh2LCB0aGlzLmluc3BlY3RPcHRzKTtcbn07XG4iLCAiLyoqXG4gKiBEZXRlY3QgRWxlY3Ryb24gcmVuZGVyZXIgLyBud2pzIHByb2Nlc3MsIHdoaWNoIGlzIG5vZGUsIGJ1dCB3ZSBzaG91bGRcbiAqIHRyZWF0IGFzIGEgYnJvd3Nlci5cbiAqL1xuXG5pZiAodHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnIHx8IHByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJyB8fCBwcm9jZXNzLmJyb3dzZXIgPT09IHRydWUgfHwgcHJvY2Vzcy5fX253anMpIHtcblx0bW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Jyb3dzZXIuanMnKTtcbn0gZWxzZSB7XG5cdG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9ub2RlLmpzJyk7XG59XG4iLCAidmFyIGRlYnVnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCFkZWJ1Zykge1xuICAgIHRyeSB7XG4gICAgICAvKiBlc2xpbnQgZ2xvYmFsLXJlcXVpcmU6IG9mZiAqL1xuICAgICAgZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIikoXCJmb2xsb3ctcmVkaXJlY3RzXCIpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgLyogKi8gfVxuICAgIGlmICh0eXBlb2YgZGVidWcgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgZGVidWcgPSBmdW5jdGlvbiAoKSB7IC8qICovIH07XG4gICAgfVxuICB9XG4gIGRlYnVnLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59O1xuIiwgInZhciB1cmwgPSByZXF1aXJlKFwidXJsXCIpO1xudmFyIFVSTCA9IHVybC5VUkw7XG52YXIgaHR0cCA9IHJlcXVpcmUoXCJodHRwXCIpO1xudmFyIGh0dHBzID0gcmVxdWlyZShcImh0dHBzXCIpO1xudmFyIFdyaXRhYmxlID0gcmVxdWlyZShcInN0cmVhbVwiKS5Xcml0YWJsZTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKFwiYXNzZXJ0XCIpO1xudmFyIGRlYnVnID0gcmVxdWlyZShcIi4vZGVidWdcIik7XG5cbi8vIFdoZXRoZXIgdG8gdXNlIHRoZSBuYXRpdmUgVVJMIG9iamVjdCBvciB0aGUgbGVnYWN5IHVybCBtb2R1bGVcbnZhciB1c2VOYXRpdmVVUkwgPSBmYWxzZTtcbnRyeSB7XG4gIGFzc2VydChuZXcgVVJMKCkpO1xufVxuY2F0Y2ggKGVycm9yKSB7XG4gIHVzZU5hdGl2ZVVSTCA9IGVycm9yLmNvZGUgPT09IFwiRVJSX0lOVkFMSURfVVJMXCI7XG59XG5cbi8vIFVSTCBmaWVsZHMgdG8gcHJlc2VydmUgaW4gY29weSBvcGVyYXRpb25zXG52YXIgcHJlc2VydmVkVXJsRmllbGRzID0gW1xuICBcImF1dGhcIixcbiAgXCJob3N0XCIsXG4gIFwiaG9zdG5hbWVcIixcbiAgXCJocmVmXCIsXG4gIFwicGF0aFwiLFxuICBcInBhdGhuYW1lXCIsXG4gIFwicG9ydFwiLFxuICBcInByb3RvY29sXCIsXG4gIFwicXVlcnlcIixcbiAgXCJzZWFyY2hcIixcbiAgXCJoYXNoXCIsXG5dO1xuXG4vLyBDcmVhdGUgaGFuZGxlcnMgdGhhdCBwYXNzIGV2ZW50cyBmcm9tIG5hdGl2ZSByZXF1ZXN0c1xudmFyIGV2ZW50cyA9IFtcImFib3J0XCIsIFwiYWJvcnRlZFwiLCBcImNvbm5lY3RcIiwgXCJlcnJvclwiLCBcInNvY2tldFwiLCBcInRpbWVvdXRcIl07XG52YXIgZXZlbnRIYW5kbGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5ldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgZXZlbnRIYW5kbGVyc1tldmVudF0gPSBmdW5jdGlvbiAoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIHRoaXMuX3JlZGlyZWN0YWJsZS5lbWl0KGV2ZW50LCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgfTtcbn0pO1xuXG4vLyBFcnJvciB0eXBlcyB3aXRoIGNvZGVzXG52YXIgSW52YWxpZFVybEVycm9yID0gY3JlYXRlRXJyb3JUeXBlKFxuICBcIkVSUl9JTlZBTElEX1VSTFwiLFxuICBcIkludmFsaWQgVVJMXCIsXG4gIFR5cGVFcnJvclxuKTtcbnZhciBSZWRpcmVjdGlvbkVycm9yID0gY3JlYXRlRXJyb3JUeXBlKFxuICBcIkVSUl9GUl9SRURJUkVDVElPTl9GQUlMVVJFXCIsXG4gIFwiUmVkaXJlY3RlZCByZXF1ZXN0IGZhaWxlZFwiXG4pO1xudmFyIFRvb01hbnlSZWRpcmVjdHNFcnJvciA9IGNyZWF0ZUVycm9yVHlwZShcbiAgXCJFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTXCIsXG4gIFwiTWF4aW11bSBudW1iZXIgb2YgcmVkaXJlY3RzIGV4Y2VlZGVkXCIsXG4gIFJlZGlyZWN0aW9uRXJyb3Jcbik7XG52YXIgTWF4Qm9keUxlbmd0aEV4Y2VlZGVkRXJyb3IgPSBjcmVhdGVFcnJvclR5cGUoXG4gIFwiRVJSX0ZSX01BWF9CT0RZX0xFTkdUSF9FWENFRURFRFwiLFxuICBcIlJlcXVlc3QgYm9keSBsYXJnZXIgdGhhbiBtYXhCb2R5TGVuZ3RoIGxpbWl0XCJcbik7XG52YXIgV3JpdGVBZnRlckVuZEVycm9yID0gY3JlYXRlRXJyb3JUeXBlKFxuICBcIkVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EXCIsXG4gIFwid3JpdGUgYWZ0ZXIgZW5kXCJcbik7XG5cbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG52YXIgZGVzdHJveSA9IFdyaXRhYmxlLnByb3RvdHlwZS5kZXN0cm95IHx8IG5vb3A7XG5cbi8vIEFuIEhUVFAoUykgcmVxdWVzdCB0aGF0IGNhbiBiZSByZWRpcmVjdGVkXG5mdW5jdGlvbiBSZWRpcmVjdGFibGVSZXF1ZXN0KG9wdGlvbnMsIHJlc3BvbnNlQ2FsbGJhY2spIHtcbiAgLy8gSW5pdGlhbGl6ZSB0aGUgcmVxdWVzdFxuICBXcml0YWJsZS5jYWxsKHRoaXMpO1xuICB0aGlzLl9zYW5pdGl6ZU9wdGlvbnMob3B0aW9ucyk7XG4gIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLl9lbmRlZCA9IGZhbHNlO1xuICB0aGlzLl9lbmRpbmcgPSBmYWxzZTtcbiAgdGhpcy5fcmVkaXJlY3RDb3VudCA9IDA7XG4gIHRoaXMuX3JlZGlyZWN0cyA9IFtdO1xuICB0aGlzLl9yZXF1ZXN0Qm9keUxlbmd0aCA9IDA7XG4gIHRoaXMuX3JlcXVlc3RCb2R5QnVmZmVycyA9IFtdO1xuXG4gIC8vIEF0dGFjaCBhIGNhbGxiYWNrIGlmIHBhc3NlZFxuICBpZiAocmVzcG9uc2VDYWxsYmFjaykge1xuICAgIHRoaXMub24oXCJyZXNwb25zZVwiLCByZXNwb25zZUNhbGxiYWNrKTtcbiAgfVxuXG4gIC8vIFJlYWN0IHRvIHJlc3BvbnNlcyBvZiBuYXRpdmUgcmVxdWVzdHNcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLl9vbk5hdGl2ZVJlc3BvbnNlID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHNlbGYuX3Byb2Nlc3NSZXNwb25zZShyZXNwb25zZSk7XG4gICAgfVxuICAgIGNhdGNoIChjYXVzZSkge1xuICAgICAgc2VsZi5lbWl0KFwiZXJyb3JcIiwgY2F1c2UgaW5zdGFuY2VvZiBSZWRpcmVjdGlvbkVycm9yID9cbiAgICAgICAgY2F1c2UgOiBuZXcgUmVkaXJlY3Rpb25FcnJvcih7IGNhdXNlOiBjYXVzZSB9KSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFBlcmZvcm0gdGhlIGZpcnN0IHJlcXVlc3RcbiAgdGhpcy5fcGVyZm9ybVJlcXVlc3QoKTtcbn1cblJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShXcml0YWJsZS5wcm90b3R5cGUpO1xuXG5SZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgZGVzdHJveVJlcXVlc3QodGhpcy5fY3VycmVudFJlcXVlc3QpO1xuICB0aGlzLl9jdXJyZW50UmVxdWVzdC5hYm9ydCgpO1xuICB0aGlzLmVtaXQoXCJhYm9ydFwiKTtcbn07XG5cblJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgZGVzdHJveVJlcXVlc3QodGhpcy5fY3VycmVudFJlcXVlc3QsIGVycm9yKTtcbiAgZGVzdHJveS5jYWxsKHRoaXMsIGVycm9yKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBXcml0ZXMgYnVmZmVyZWQgZGF0YSB0byB0aGUgY3VycmVudCBuYXRpdmUgcmVxdWVzdFxuUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoZGF0YSwgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gIC8vIFdyaXRpbmcgaXMgbm90IGFsbG93ZWQgaWYgZW5kIGhhcyBiZWVuIGNhbGxlZFxuICBpZiAodGhpcy5fZW5kaW5nKSB7XG4gICAgdGhyb3cgbmV3IFdyaXRlQWZ0ZXJFbmRFcnJvcigpO1xuICB9XG5cbiAgLy8gVmFsaWRhdGUgaW5wdXQgYW5kIHNoaWZ0IHBhcmFtZXRlcnMgaWYgbmVjZXNzYXJ5XG4gIGlmICghaXNTdHJpbmcoZGF0YSkgJiYgIWlzQnVmZmVyKGRhdGEpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImRhdGEgc2hvdWxkIGJlIGEgc3RyaW5nLCBCdWZmZXIgb3IgVWludDhBcnJheVwiKTtcbiAgfVxuICBpZiAoaXNGdW5jdGlvbihlbmNvZGluZykpIHtcbiAgICBjYWxsYmFjayA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIC8vIElnbm9yZSBlbXB0eSBidWZmZXJzLCBzaW5jZSB3cml0aW5nIHRoZW0gZG9lc24ndCBpbnZva2UgdGhlIGNhbGxiYWNrXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvMjIwNjZcbiAgaWYgKGRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgLy8gT25seSB3cml0ZSB3aGVuIHdlIGRvbid0IGV4Y2VlZCB0aGUgbWF4aW11bSBib2R5IGxlbmd0aFxuICBpZiAodGhpcy5fcmVxdWVzdEJvZHlMZW5ndGggKyBkYXRhLmxlbmd0aCA8PSB0aGlzLl9vcHRpb25zLm1heEJvZHlMZW5ndGgpIHtcbiAgICB0aGlzLl9yZXF1ZXN0Qm9keUxlbmd0aCArPSBkYXRhLmxlbmd0aDtcbiAgICB0aGlzLl9yZXF1ZXN0Qm9keUJ1ZmZlcnMucHVzaCh7IGRhdGE6IGRhdGEsIGVuY29kaW5nOiBlbmNvZGluZyB9KTtcbiAgICB0aGlzLl9jdXJyZW50UmVxdWVzdC53cml0ZShkYXRhLCBlbmNvZGluZywgY2FsbGJhY2spO1xuICB9XG4gIC8vIEVycm9yIHdoZW4gd2UgZXhjZWVkIHRoZSBtYXhpbXVtIGJvZHkgbGVuZ3RoXG4gIGVsc2Uge1xuICAgIHRoaXMuZW1pdChcImVycm9yXCIsIG5ldyBNYXhCb2R5TGVuZ3RoRXhjZWVkZWRFcnJvcigpKTtcbiAgICB0aGlzLmFib3J0KCk7XG4gIH1cbn07XG5cbi8vIEVuZHMgdGhlIGN1cnJlbnQgbmF0aXZlIHJlcXVlc3RcblJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChkYXRhLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgLy8gU2hpZnQgcGFyYW1ldGVycyBpZiBuZWNlc3NhcnlcbiAgaWYgKGlzRnVuY3Rpb24oZGF0YSkpIHtcbiAgICBjYWxsYmFjayA9IGRhdGE7XG4gICAgZGF0YSA9IGVuY29kaW5nID0gbnVsbDtcbiAgfVxuICBlbHNlIGlmIChpc0Z1bmN0aW9uKGVuY29kaW5nKSkge1xuICAgIGNhbGxiYWNrID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgLy8gV3JpdGUgZGF0YSBpZiBuZWVkZWQgYW5kIGVuZFxuICBpZiAoIWRhdGEpIHtcbiAgICB0aGlzLl9lbmRlZCA9IHRoaXMuX2VuZGluZyA9IHRydWU7XG4gICAgdGhpcy5fY3VycmVudFJlcXVlc3QuZW5kKG51bGwsIG51bGwsIGNhbGxiYWNrKTtcbiAgfVxuICBlbHNlIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGN1cnJlbnRSZXF1ZXN0ID0gdGhpcy5fY3VycmVudFJlcXVlc3Q7XG4gICAgdGhpcy53cml0ZShkYXRhLCBlbmNvZGluZywgZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5fZW5kZWQgPSB0cnVlO1xuICAgICAgY3VycmVudFJlcXVlc3QuZW5kKG51bGwsIG51bGwsIGNhbGxiYWNrKTtcbiAgICB9KTtcbiAgICB0aGlzLl9lbmRpbmcgPSB0cnVlO1xuICB9XG59O1xuXG4vLyBTZXRzIGEgaGVhZGVyIHZhbHVlIG9uIHRoZSBjdXJyZW50IG5hdGl2ZSByZXF1ZXN0XG5SZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZS5zZXRIZWFkZXIgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgdGhpcy5fb3B0aW9ucy5oZWFkZXJzW25hbWVdID0gdmFsdWU7XG4gIHRoaXMuX2N1cnJlbnRSZXF1ZXN0LnNldEhlYWRlcihuYW1lLCB2YWx1ZSk7XG59O1xuXG4vLyBDbGVhcnMgYSBoZWFkZXIgdmFsdWUgb24gdGhlIGN1cnJlbnQgbmF0aXZlIHJlcXVlc3RcblJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlLnJlbW92ZUhlYWRlciA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlbGV0ZSB0aGlzLl9vcHRpb25zLmhlYWRlcnNbbmFtZV07XG4gIHRoaXMuX2N1cnJlbnRSZXF1ZXN0LnJlbW92ZUhlYWRlcihuYW1lKTtcbn07XG5cbi8vIEdsb2JhbCB0aW1lb3V0IGZvciBhbGwgdW5kZXJseWluZyByZXF1ZXN0c1xuUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUuc2V0VGltZW91dCA9IGZ1bmN0aW9uIChtc2VjcywgY2FsbGJhY2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIC8vIERlc3Ryb3lzIHRoZSBzb2NrZXQgb24gdGltZW91dFxuICBmdW5jdGlvbiBkZXN0cm95T25UaW1lb3V0KHNvY2tldCkge1xuICAgIHNvY2tldC5zZXRUaW1lb3V0KG1zZWNzKTtcbiAgICBzb2NrZXQucmVtb3ZlTGlzdGVuZXIoXCJ0aW1lb3V0XCIsIHNvY2tldC5kZXN0cm95KTtcbiAgICBzb2NrZXQuYWRkTGlzdGVuZXIoXCJ0aW1lb3V0XCIsIHNvY2tldC5kZXN0cm95KTtcbiAgfVxuXG4gIC8vIFNldHMgdXAgYSB0aW1lciB0byB0cmlnZ2VyIGEgdGltZW91dCBldmVudFxuICBmdW5jdGlvbiBzdGFydFRpbWVyKHNvY2tldCkge1xuICAgIGlmIChzZWxmLl90aW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQoc2VsZi5fdGltZW91dCk7XG4gICAgfVxuICAgIHNlbGYuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuZW1pdChcInRpbWVvdXRcIik7XG4gICAgICBjbGVhclRpbWVyKCk7XG4gICAgfSwgbXNlY3MpO1xuICAgIGRlc3Ryb3lPblRpbWVvdXQoc29ja2V0KTtcbiAgfVxuXG4gIC8vIFN0b3BzIGEgdGltZW91dCBmcm9tIHRyaWdnZXJpbmdcbiAgZnVuY3Rpb24gY2xlYXJUaW1lcigpIHtcbiAgICAvLyBDbGVhciB0aGUgdGltZW91dFxuICAgIGlmIChzZWxmLl90aW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQoc2VsZi5fdGltZW91dCk7XG4gICAgICBzZWxmLl90aW1lb3V0ID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBDbGVhbiB1cCBhbGwgYXR0YWNoZWQgbGlzdGVuZXJzXG4gICAgc2VsZi5yZW1vdmVMaXN0ZW5lcihcImFib3J0XCIsIGNsZWFyVGltZXIpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLCBjbGVhclRpbWVyKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKFwicmVzcG9uc2VcIiwgY2xlYXJUaW1lcik7XG4gICAgc2VsZi5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsIGNsZWFyVGltZXIpO1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgc2VsZi5yZW1vdmVMaXN0ZW5lcihcInRpbWVvdXRcIiwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBpZiAoIXNlbGYuc29ja2V0KSB7XG4gICAgICBzZWxmLl9jdXJyZW50UmVxdWVzdC5yZW1vdmVMaXN0ZW5lcihcInNvY2tldFwiLCBzdGFydFRpbWVyKTtcbiAgICB9XG4gIH1cblxuICAvLyBBdHRhY2ggY2FsbGJhY2sgaWYgcGFzc2VkXG4gIGlmIChjYWxsYmFjaykge1xuICAgIHRoaXMub24oXCJ0aW1lb3V0XCIsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8vIFN0YXJ0IHRoZSB0aW1lciBpZiBvciB3aGVuIHRoZSBzb2NrZXQgaXMgb3BlbmVkXG4gIGlmICh0aGlzLnNvY2tldCkge1xuICAgIHN0YXJ0VGltZXIodGhpcy5zb2NrZXQpO1xuICB9XG4gIGVsc2Uge1xuICAgIHRoaXMuX2N1cnJlbnRSZXF1ZXN0Lm9uY2UoXCJzb2NrZXRcIiwgc3RhcnRUaW1lcik7XG4gIH1cblxuICAvLyBDbGVhbiB1cCBvbiBldmVudHNcbiAgdGhpcy5vbihcInNvY2tldFwiLCBkZXN0cm95T25UaW1lb3V0KTtcbiAgdGhpcy5vbihcImFib3J0XCIsIGNsZWFyVGltZXIpO1xuICB0aGlzLm9uKFwiZXJyb3JcIiwgY2xlYXJUaW1lcik7XG4gIHRoaXMub24oXCJyZXNwb25zZVwiLCBjbGVhclRpbWVyKTtcbiAgdGhpcy5vbihcImNsb3NlXCIsIGNsZWFyVGltZXIpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gUHJveHkgYWxsIG90aGVyIHB1YmxpYyBDbGllbnRSZXF1ZXN0IG1ldGhvZHNcbltcbiAgXCJmbHVzaEhlYWRlcnNcIiwgXCJnZXRIZWFkZXJcIixcbiAgXCJzZXROb0RlbGF5XCIsIFwic2V0U29ja2V0S2VlcEFsaXZlXCIsXG5dLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICBSZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gdGhpcy5fY3VycmVudFJlcXVlc3RbbWV0aG9kXShhLCBiKTtcbiAgfTtcbn0pO1xuXG4vLyBQcm94eSBhbGwgcHVibGljIENsaWVudFJlcXVlc3QgcHJvcGVydGllc1xuW1wiYWJvcnRlZFwiLCBcImNvbm5lY3Rpb25cIiwgXCJzb2NrZXRcIl0uZm9yRWFjaChmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlLCBwcm9wZXJ0eSwge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fY3VycmVudFJlcXVlc3RbcHJvcGVydHldOyB9LFxuICB9KTtcbn0pO1xuXG5SZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZS5fc2FuaXRpemVPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgLy8gRW5zdXJlIGhlYWRlcnMgYXJlIGFsd2F5cyBwcmVzZW50XG4gIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgb3B0aW9ucy5oZWFkZXJzID0ge307XG4gIH1cblxuICAvLyBTaW5jZSBodHRwLnJlcXVlc3QgdHJlYXRzIGhvc3QgYXMgYW4gYWxpYXMgb2YgaG9zdG5hbWUsXG4gIC8vIGJ1dCB0aGUgdXJsIG1vZHVsZSBpbnRlcnByZXRzIGhvc3QgYXMgaG9zdG5hbWUgcGx1cyBwb3J0LFxuICAvLyBlbGltaW5hdGUgdGhlIGhvc3QgcHJvcGVydHkgdG8gYXZvaWQgY29uZnVzaW9uLlxuICBpZiAob3B0aW9ucy5ob3N0KSB7XG4gICAgLy8gVXNlIGhvc3RuYW1lIGlmIHNldCwgYmVjYXVzZSBpdCBoYXMgcHJlY2VkZW5jZVxuICAgIGlmICghb3B0aW9ucy5ob3N0bmFtZSkge1xuICAgICAgb3B0aW9ucy5ob3N0bmFtZSA9IG9wdGlvbnMuaG9zdDtcbiAgICB9XG4gICAgZGVsZXRlIG9wdGlvbnMuaG9zdDtcbiAgfVxuXG4gIC8vIENvbXBsZXRlIHRoZSBVUkwgb2JqZWN0IHdoZW4gbmVjZXNzYXJ5XG4gIGlmICghb3B0aW9ucy5wYXRobmFtZSAmJiBvcHRpb25zLnBhdGgpIHtcbiAgICB2YXIgc2VhcmNoUG9zID0gb3B0aW9ucy5wYXRoLmluZGV4T2YoXCI/XCIpO1xuICAgIGlmIChzZWFyY2hQb3MgPCAwKSB7XG4gICAgICBvcHRpb25zLnBhdGhuYW1lID0gb3B0aW9ucy5wYXRoO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIG9wdGlvbnMucGF0aG5hbWUgPSBvcHRpb25zLnBhdGguc3Vic3RyaW5nKDAsIHNlYXJjaFBvcyk7XG4gICAgICBvcHRpb25zLnNlYXJjaCA9IG9wdGlvbnMucGF0aC5zdWJzdHJpbmcoc2VhcmNoUG9zKTtcbiAgICB9XG4gIH1cbn07XG5cblxuLy8gRXhlY3V0ZXMgdGhlIG5leHQgbmF0aXZlIHJlcXVlc3QgKGluaXRpYWwgb3IgcmVkaXJlY3QpXG5SZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZS5fcGVyZm9ybVJlcXVlc3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIExvYWQgdGhlIG5hdGl2ZSBwcm90b2NvbFxuICB2YXIgcHJvdG9jb2wgPSB0aGlzLl9vcHRpb25zLnByb3RvY29sO1xuICB2YXIgbmF0aXZlUHJvdG9jb2wgPSB0aGlzLl9vcHRpb25zLm5hdGl2ZVByb3RvY29sc1twcm90b2NvbF07XG4gIGlmICghbmF0aXZlUHJvdG9jb2wpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5zdXBwb3J0ZWQgcHJvdG9jb2wgXCIgKyBwcm90b2NvbCk7XG4gIH1cblxuICAvLyBJZiBzcGVjaWZpZWQsIHVzZSB0aGUgYWdlbnQgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvdG9jb2xcbiAgLy8gKEhUVFAgYW5kIEhUVFBTIHVzZSBkaWZmZXJlbnQgdHlwZXMgb2YgYWdlbnRzKVxuICBpZiAodGhpcy5fb3B0aW9ucy5hZ2VudHMpIHtcbiAgICB2YXIgc2NoZW1lID0gcHJvdG9jb2wuc2xpY2UoMCwgLTEpO1xuICAgIHRoaXMuX29wdGlvbnMuYWdlbnQgPSB0aGlzLl9vcHRpb25zLmFnZW50c1tzY2hlbWVdO1xuICB9XG5cbiAgLy8gQ3JlYXRlIHRoZSBuYXRpdmUgcmVxdWVzdCBhbmQgc2V0IHVwIGl0cyBldmVudCBoYW5kbGVyc1xuICB2YXIgcmVxdWVzdCA9IHRoaXMuX2N1cnJlbnRSZXF1ZXN0ID1cbiAgICAgICAgbmF0aXZlUHJvdG9jb2wucmVxdWVzdCh0aGlzLl9vcHRpb25zLCB0aGlzLl9vbk5hdGl2ZVJlc3BvbnNlKTtcbiAgcmVxdWVzdC5fcmVkaXJlY3RhYmxlID0gdGhpcztcbiAgZm9yICh2YXIgZXZlbnQgb2YgZXZlbnRzKSB7XG4gICAgcmVxdWVzdC5vbihldmVudCwgZXZlbnRIYW5kbGVyc1tldmVudF0pO1xuICB9XG5cbiAgLy8gUkZDNzIzMFx1MDBBNzUuMy4xOiBXaGVuIG1ha2luZyBhIHJlcXVlc3QgZGlyZWN0bHkgdG8gYW4gb3JpZ2luIHNlcnZlciwgW1x1MjAyNl1cbiAgLy8gYSBjbGllbnQgTVVTVCBzZW5kIG9ubHkgdGhlIGFic29sdXRlIHBhdGggW1x1MjAyNl0gYXMgdGhlIHJlcXVlc3QtdGFyZ2V0LlxuICB0aGlzLl9jdXJyZW50VXJsID0gL15cXC8vLnRlc3QodGhpcy5fb3B0aW9ucy5wYXRoKSA/XG4gICAgdXJsLmZvcm1hdCh0aGlzLl9vcHRpb25zKSA6XG4gICAgLy8gV2hlbiBtYWtpbmcgYSByZXF1ZXN0IHRvIGEgcHJveHksIFtcdTIwMjZdXG4gICAgLy8gYSBjbGllbnQgTVVTVCBzZW5kIHRoZSB0YXJnZXQgVVJJIGluIGFic29sdXRlLWZvcm0gW1x1MjAyNl0uXG4gICAgdGhpcy5fb3B0aW9ucy5wYXRoO1xuXG4gIC8vIEVuZCBhIHJlZGlyZWN0ZWQgcmVxdWVzdFxuICAvLyAoVGhlIGZpcnN0IHJlcXVlc3QgbXVzdCBiZSBlbmRlZCBleHBsaWNpdGx5IHdpdGggUmVkaXJlY3RhYmxlUmVxdWVzdCNlbmQpXG4gIGlmICh0aGlzLl9pc1JlZGlyZWN0KSB7XG4gICAgLy8gV3JpdGUgdGhlIHJlcXVlc3QgZW50aXR5IGFuZCBlbmRcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBidWZmZXJzID0gdGhpcy5fcmVxdWVzdEJvZHlCdWZmZXJzO1xuICAgIChmdW5jdGlvbiB3cml0ZU5leHQoZXJyb3IpIHtcbiAgICAgIC8vIE9ubHkgd3JpdGUgaWYgdGhpcyByZXF1ZXN0IGhhcyBub3QgYmVlbiByZWRpcmVjdGVkIHlldFxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChyZXF1ZXN0ID09PSBzZWxmLl9jdXJyZW50UmVxdWVzdCkge1xuICAgICAgICAvLyBSZXBvcnQgYW55IHdyaXRlIGVycm9yc1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgc2VsZi5lbWl0KFwiZXJyb3JcIiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdyaXRlIHRoZSBuZXh0IGJ1ZmZlciBpZiB0aGVyZSBhcmUgc3RpbGwgbGVmdFxuICAgICAgICBlbHNlIGlmIChpIDwgYnVmZmVycy5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgYnVmZmVyID0gYnVmZmVyc1tpKytdO1xuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgaWYgKCFyZXF1ZXN0LmZpbmlzaGVkKSB7XG4gICAgICAgICAgICByZXF1ZXN0LndyaXRlKGJ1ZmZlci5kYXRhLCBidWZmZXIuZW5jb2RpbmcsIHdyaXRlTmV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEVuZCB0aGUgcmVxdWVzdCBpZiBgZW5kYCBoYXMgYmVlbiBjYWxsZWQgb24gdXNcbiAgICAgICAgZWxzZSBpZiAoc2VsZi5fZW5kZWQpIHtcbiAgICAgICAgICByZXF1ZXN0LmVuZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSgpKTtcbiAgfVxufTtcblxuLy8gUHJvY2Vzc2VzIGEgcmVzcG9uc2UgZnJvbSB0aGUgY3VycmVudCBuYXRpdmUgcmVxdWVzdFxuUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUuX3Byb2Nlc3NSZXNwb25zZSA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAvLyBTdG9yZSB0aGUgcmVkaXJlY3RlZCByZXNwb25zZVxuICB2YXIgc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1c0NvZGU7XG4gIGlmICh0aGlzLl9vcHRpb25zLnRyYWNrUmVkaXJlY3RzKSB7XG4gICAgdGhpcy5fcmVkaXJlY3RzLnB1c2goe1xuICAgICAgdXJsOiB0aGlzLl9jdXJyZW50VXJsLFxuICAgICAgaGVhZGVyczogcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIHN0YXR1c0NvZGU6IHN0YXR1c0NvZGUsXG4gICAgfSk7XG4gIH1cblxuICAvLyBSRkM3MjMxXHUwMEE3Ni40OiBUaGUgM3h4IChSZWRpcmVjdGlvbikgY2xhc3Mgb2Ygc3RhdHVzIGNvZGUgaW5kaWNhdGVzXG4gIC8vIHRoYXQgZnVydGhlciBhY3Rpb24gbmVlZHMgdG8gYmUgdGFrZW4gYnkgdGhlIHVzZXIgYWdlbnQgaW4gb3JkZXIgdG9cbiAgLy8gZnVsZmlsbCB0aGUgcmVxdWVzdC4gSWYgYSBMb2NhdGlvbiBoZWFkZXIgZmllbGQgaXMgcHJvdmlkZWQsXG4gIC8vIHRoZSB1c2VyIGFnZW50IE1BWSBhdXRvbWF0aWNhbGx5IHJlZGlyZWN0IGl0cyByZXF1ZXN0IHRvIHRoZSBVUklcbiAgLy8gcmVmZXJlbmNlZCBieSB0aGUgTG9jYXRpb24gZmllbGQgdmFsdWUsXG4gIC8vIGV2ZW4gaWYgdGhlIHNwZWNpZmljIHN0YXR1cyBjb2RlIGlzIG5vdCB1bmRlcnN0b29kLlxuXG4gIC8vIElmIHRoZSByZXNwb25zZSBpcyBub3QgYSByZWRpcmVjdDsgcmV0dXJuIGl0IGFzLWlzXG4gIHZhciBsb2NhdGlvbiA9IHJlc3BvbnNlLmhlYWRlcnMubG9jYXRpb247XG4gIGlmICghbG9jYXRpb24gfHwgdGhpcy5fb3B0aW9ucy5mb2xsb3dSZWRpcmVjdHMgPT09IGZhbHNlIHx8XG4gICAgICBzdGF0dXNDb2RlIDwgMzAwIHx8IHN0YXR1c0NvZGUgPj0gNDAwKSB7XG4gICAgcmVzcG9uc2UucmVzcG9uc2VVcmwgPSB0aGlzLl9jdXJyZW50VXJsO1xuICAgIHJlc3BvbnNlLnJlZGlyZWN0cyA9IHRoaXMuX3JlZGlyZWN0cztcbiAgICB0aGlzLmVtaXQoXCJyZXNwb25zZVwiLCByZXNwb25zZSk7XG5cbiAgICAvLyBDbGVhbiB1cFxuICAgIHRoaXMuX3JlcXVlc3RCb2R5QnVmZmVycyA9IFtdO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFRoZSByZXNwb25zZSBpcyBhIHJlZGlyZWN0LCBzbyBhYm9ydCB0aGUgY3VycmVudCByZXF1ZXN0XG4gIGRlc3Ryb3lSZXF1ZXN0KHRoaXMuX2N1cnJlbnRSZXF1ZXN0KTtcbiAgLy8gRGlzY2FyZCB0aGUgcmVtYWluZGVyIG9mIHRoZSByZXNwb25zZSB0byBhdm9pZCB3YWl0aW5nIGZvciBkYXRhXG4gIHJlc3BvbnNlLmRlc3Ryb3koKTtcblxuICAvLyBSRkM3MjMxXHUwMEE3Ni40OiBBIGNsaWVudCBTSE9VTEQgZGV0ZWN0IGFuZCBpbnRlcnZlbmVcbiAgLy8gaW4gY3ljbGljYWwgcmVkaXJlY3Rpb25zIChpLmUuLCBcImluZmluaXRlXCIgcmVkaXJlY3Rpb24gbG9vcHMpLlxuICBpZiAoKyt0aGlzLl9yZWRpcmVjdENvdW50ID4gdGhpcy5fb3B0aW9ucy5tYXhSZWRpcmVjdHMpIHtcbiAgICB0aHJvdyBuZXcgVG9vTWFueVJlZGlyZWN0c0Vycm9yKCk7XG4gIH1cblxuICAvLyBTdG9yZSB0aGUgcmVxdWVzdCBoZWFkZXJzIGlmIGFwcGxpY2FibGVcbiAgdmFyIHJlcXVlc3RIZWFkZXJzO1xuICB2YXIgYmVmb3JlUmVkaXJlY3QgPSB0aGlzLl9vcHRpb25zLmJlZm9yZVJlZGlyZWN0O1xuICBpZiAoYmVmb3JlUmVkaXJlY3QpIHtcbiAgICByZXF1ZXN0SGVhZGVycyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgLy8gVGhlIEhvc3QgaGVhZGVyIHdhcyBzZXQgYnkgbmF0aXZlUHJvdG9jb2wucmVxdWVzdFxuICAgICAgSG9zdDogcmVzcG9uc2UucmVxLmdldEhlYWRlcihcImhvc3RcIiksXG4gICAgfSwgdGhpcy5fb3B0aW9ucy5oZWFkZXJzKTtcbiAgfVxuXG4gIC8vIFJGQzcyMzFcdTAwQTc2LjQ6IEF1dG9tYXRpYyByZWRpcmVjdGlvbiBuZWVkcyB0byBkb25lIHdpdGhcbiAgLy8gY2FyZSBmb3IgbWV0aG9kcyBub3Qga25vd24gdG8gYmUgc2FmZSwgW1x1MjAyNl1cbiAgLy8gUkZDNzIzMVx1MDBBNzYuNC4yXHUyMDEzMzogRm9yIGhpc3RvcmljYWwgcmVhc29ucywgYSB1c2VyIGFnZW50IE1BWSBjaGFuZ2VcbiAgLy8gdGhlIHJlcXVlc3QgbWV0aG9kIGZyb20gUE9TVCB0byBHRVQgZm9yIHRoZSBzdWJzZXF1ZW50IHJlcXVlc3QuXG4gIHZhciBtZXRob2QgPSB0aGlzLl9vcHRpb25zLm1ldGhvZDtcbiAgaWYgKChzdGF0dXNDb2RlID09PSAzMDEgfHwgc3RhdHVzQ29kZSA9PT0gMzAyKSAmJiB0aGlzLl9vcHRpb25zLm1ldGhvZCA9PT0gXCJQT1NUXCIgfHxcbiAgICAgIC8vIFJGQzcyMzFcdTAwQTc2LjQuNDogVGhlIDMwMyAoU2VlIE90aGVyKSBzdGF0dXMgY29kZSBpbmRpY2F0ZXMgdGhhdFxuICAgICAgLy8gdGhlIHNlcnZlciBpcyByZWRpcmVjdGluZyB0aGUgdXNlciBhZ2VudCB0byBhIGRpZmZlcmVudCByZXNvdXJjZSBbXHUyMDI2XVxuICAgICAgLy8gQSB1c2VyIGFnZW50IGNhbiBwZXJmb3JtIGEgcmV0cmlldmFsIHJlcXVlc3QgdGFyZ2V0aW5nIHRoYXQgVVJJXG4gICAgICAvLyAoYSBHRVQgb3IgSEVBRCByZXF1ZXN0IGlmIHVzaW5nIEhUVFApIFtcdTIwMjZdXG4gICAgICAoc3RhdHVzQ29kZSA9PT0gMzAzKSAmJiAhL14oPzpHRVR8SEVBRCkkLy50ZXN0KHRoaXMuX29wdGlvbnMubWV0aG9kKSkge1xuICAgIHRoaXMuX29wdGlvbnMubWV0aG9kID0gXCJHRVRcIjtcbiAgICAvLyBEcm9wIGEgcG9zc2libGUgZW50aXR5IGFuZCBoZWFkZXJzIHJlbGF0ZWQgdG8gaXRcbiAgICB0aGlzLl9yZXF1ZXN0Qm9keUJ1ZmZlcnMgPSBbXTtcbiAgICByZW1vdmVNYXRjaGluZ0hlYWRlcnMoL15jb250ZW50LS9pLCB0aGlzLl9vcHRpb25zLmhlYWRlcnMpO1xuICB9XG5cbiAgLy8gRHJvcCB0aGUgSG9zdCBoZWFkZXIsIGFzIHRoZSByZWRpcmVjdCBtaWdodCBsZWFkIHRvIGEgZGlmZmVyZW50IGhvc3RcbiAgdmFyIGN1cnJlbnRIb3N0SGVhZGVyID0gcmVtb3ZlTWF0Y2hpbmdIZWFkZXJzKC9eaG9zdCQvaSwgdGhpcy5fb3B0aW9ucy5oZWFkZXJzKTtcblxuICAvLyBJZiB0aGUgcmVkaXJlY3QgaXMgcmVsYXRpdmUsIGNhcnJ5IG92ZXIgdGhlIGhvc3Qgb2YgdGhlIGxhc3QgcmVxdWVzdFxuICB2YXIgY3VycmVudFVybFBhcnRzID0gcGFyc2VVcmwodGhpcy5fY3VycmVudFVybCk7XG4gIHZhciBjdXJyZW50SG9zdCA9IGN1cnJlbnRIb3N0SGVhZGVyIHx8IGN1cnJlbnRVcmxQYXJ0cy5ob3N0O1xuICB2YXIgY3VycmVudFVybCA9IC9eXFx3KzovLnRlc3QobG9jYXRpb24pID8gdGhpcy5fY3VycmVudFVybCA6XG4gICAgdXJsLmZvcm1hdChPYmplY3QuYXNzaWduKGN1cnJlbnRVcmxQYXJ0cywgeyBob3N0OiBjdXJyZW50SG9zdCB9KSk7XG5cbiAgLy8gQ3JlYXRlIHRoZSByZWRpcmVjdGVkIHJlcXVlc3RcbiAgdmFyIHJlZGlyZWN0VXJsID0gcmVzb2x2ZVVybChsb2NhdGlvbiwgY3VycmVudFVybCk7XG4gIGRlYnVnKFwicmVkaXJlY3RpbmcgdG9cIiwgcmVkaXJlY3RVcmwuaHJlZik7XG4gIHRoaXMuX2lzUmVkaXJlY3QgPSB0cnVlO1xuICBzcHJlYWRVcmxPYmplY3QocmVkaXJlY3RVcmwsIHRoaXMuX29wdGlvbnMpO1xuXG4gIC8vIERyb3AgY29uZmlkZW50aWFsIGhlYWRlcnMgd2hlbiByZWRpcmVjdGluZyB0byBhIGxlc3Mgc2VjdXJlIHByb3RvY29sXG4gIC8vIG9yIHRvIGEgZGlmZmVyZW50IGRvbWFpbiB0aGF0IGlzIG5vdCBhIHN1cGVyZG9tYWluXG4gIGlmIChyZWRpcmVjdFVybC5wcm90b2NvbCAhPT0gY3VycmVudFVybFBhcnRzLnByb3RvY29sICYmXG4gICAgIHJlZGlyZWN0VXJsLnByb3RvY29sICE9PSBcImh0dHBzOlwiIHx8XG4gICAgIHJlZGlyZWN0VXJsLmhvc3QgIT09IGN1cnJlbnRIb3N0ICYmXG4gICAgICFpc1N1YmRvbWFpbihyZWRpcmVjdFVybC5ob3N0LCBjdXJyZW50SG9zdCkpIHtcbiAgICByZW1vdmVNYXRjaGluZ0hlYWRlcnMoL14oPzooPzpwcm94eS0pP2F1dGhvcml6YXRpb258Y29va2llKSQvaSwgdGhpcy5fb3B0aW9ucy5oZWFkZXJzKTtcbiAgfVxuXG4gIC8vIEV2YWx1YXRlIHRoZSBiZWZvcmVSZWRpcmVjdCBjYWxsYmFja1xuICBpZiAoaXNGdW5jdGlvbihiZWZvcmVSZWRpcmVjdCkpIHtcbiAgICB2YXIgcmVzcG9uc2VEZXRhaWxzID0ge1xuICAgICAgaGVhZGVyczogcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIHN0YXR1c0NvZGU6IHN0YXR1c0NvZGUsXG4gICAgfTtcbiAgICB2YXIgcmVxdWVzdERldGFpbHMgPSB7XG4gICAgICB1cmw6IGN1cnJlbnRVcmwsXG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIGhlYWRlcnM6IHJlcXVlc3RIZWFkZXJzLFxuICAgIH07XG4gICAgYmVmb3JlUmVkaXJlY3QodGhpcy5fb3B0aW9ucywgcmVzcG9uc2VEZXRhaWxzLCByZXF1ZXN0RGV0YWlscyk7XG4gICAgdGhpcy5fc2FuaXRpemVPcHRpb25zKHRoaXMuX29wdGlvbnMpO1xuICB9XG5cbiAgLy8gUGVyZm9ybSB0aGUgcmVkaXJlY3RlZCByZXF1ZXN0XG4gIHRoaXMuX3BlcmZvcm1SZXF1ZXN0KCk7XG59O1xuXG4vLyBXcmFwcyB0aGUga2V5L3ZhbHVlIG9iamVjdCBvZiBwcm90b2NvbHMgd2l0aCByZWRpcmVjdCBmdW5jdGlvbmFsaXR5XG5mdW5jdGlvbiB3cmFwKHByb3RvY29scykge1xuICAvLyBEZWZhdWx0IHNldHRpbmdzXG4gIHZhciBleHBvcnRzID0ge1xuICAgIG1heFJlZGlyZWN0czogMjEsXG4gICAgbWF4Qm9keUxlbmd0aDogMTAgKiAxMDI0ICogMTAyNCxcbiAgfTtcblxuICAvLyBXcmFwIGVhY2ggcHJvdG9jb2xcbiAgdmFyIG5hdGl2ZVByb3RvY29scyA9IHt9O1xuICBPYmplY3Qua2V5cyhwcm90b2NvbHMpLmZvckVhY2goZnVuY3Rpb24gKHNjaGVtZSkge1xuICAgIHZhciBwcm90b2NvbCA9IHNjaGVtZSArIFwiOlwiO1xuICAgIHZhciBuYXRpdmVQcm90b2NvbCA9IG5hdGl2ZVByb3RvY29sc1twcm90b2NvbF0gPSBwcm90b2NvbHNbc2NoZW1lXTtcbiAgICB2YXIgd3JhcHBlZFByb3RvY29sID0gZXhwb3J0c1tzY2hlbWVdID0gT2JqZWN0LmNyZWF0ZShuYXRpdmVQcm90b2NvbCk7XG5cbiAgICAvLyBFeGVjdXRlcyBhIHJlcXVlc3QsIGZvbGxvd2luZyByZWRpcmVjdHNcbiAgICBmdW5jdGlvbiByZXF1ZXN0KGlucHV0LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgLy8gUGFyc2UgcGFyYW1ldGVycywgZW5zdXJpbmcgdGhhdCBpbnB1dCBpcyBhbiBvYmplY3RcbiAgICAgIGlmIChpc1VSTChpbnB1dCkpIHtcbiAgICAgICAgaW5wdXQgPSBzcHJlYWRVcmxPYmplY3QoaW5wdXQpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaXNTdHJpbmcoaW5wdXQpKSB7XG4gICAgICAgIGlucHV0ID0gc3ByZWFkVXJsT2JqZWN0KHBhcnNlVXJsKGlucHV0KSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0gdmFsaWRhdGVVcmwoaW5wdXQpO1xuICAgICAgICBpbnB1dCA9IHsgcHJvdG9jb2w6IHByb3RvY29sIH07XG4gICAgICB9XG4gICAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zKSkge1xuICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXQgZGVmYXVsdHNcbiAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgbWF4UmVkaXJlY3RzOiBleHBvcnRzLm1heFJlZGlyZWN0cyxcbiAgICAgICAgbWF4Qm9keUxlbmd0aDogZXhwb3J0cy5tYXhCb2R5TGVuZ3RoLFxuICAgICAgfSwgaW5wdXQsIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5uYXRpdmVQcm90b2NvbHMgPSBuYXRpdmVQcm90b2NvbHM7XG4gICAgICBpZiAoIWlzU3RyaW5nKG9wdGlvbnMuaG9zdCkgJiYgIWlzU3RyaW5nKG9wdGlvbnMuaG9zdG5hbWUpKSB7XG4gICAgICAgIG9wdGlvbnMuaG9zdG5hbWUgPSBcIjo6MVwiO1xuICAgICAgfVxuXG4gICAgICBhc3NlcnQuZXF1YWwob3B0aW9ucy5wcm90b2NvbCwgcHJvdG9jb2wsIFwicHJvdG9jb2wgbWlzbWF0Y2hcIik7XG4gICAgICBkZWJ1ZyhcIm9wdGlvbnNcIiwgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gbmV3IFJlZGlyZWN0YWJsZVJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8vIEV4ZWN1dGVzIGEgR0VUIHJlcXVlc3QsIGZvbGxvd2luZyByZWRpcmVjdHNcbiAgICBmdW5jdGlvbiBnZXQoaW5wdXQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgd3JhcHBlZFJlcXVlc3QgPSB3cmFwcGVkUHJvdG9jb2wucmVxdWVzdChpbnB1dCwgb3B0aW9ucywgY2FsbGJhY2spO1xuICAgICAgd3JhcHBlZFJlcXVlc3QuZW5kKCk7XG4gICAgICByZXR1cm4gd3JhcHBlZFJlcXVlc3Q7XG4gICAgfVxuXG4gICAgLy8gRXhwb3NlIHRoZSBwcm9wZXJ0aWVzIG9uIHRoZSB3cmFwcGVkIHByb3RvY29sXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMod3JhcHBlZFByb3RvY29sLCB7XG4gICAgICByZXF1ZXN0OiB7IHZhbHVlOiByZXF1ZXN0LCBjb25maWd1cmFibGU6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0sXG4gICAgICBnZXQ6IHsgdmFsdWU6IGdldCwgY29uZmlndXJhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9LFxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIGV4cG9ydHM7XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7IC8qIGVtcHR5ICovIH1cblxuZnVuY3Rpb24gcGFyc2VVcmwoaW5wdXQpIHtcbiAgdmFyIHBhcnNlZDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHVzZU5hdGl2ZVVSTCkge1xuICAgIHBhcnNlZCA9IG5ldyBVUkwoaW5wdXQpO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vIEVuc3VyZSB0aGUgVVJMIGlzIHZhbGlkIGFuZCBhYnNvbHV0ZVxuICAgIHBhcnNlZCA9IHZhbGlkYXRlVXJsKHVybC5wYXJzZShpbnB1dCkpO1xuICAgIGlmICghaXNTdHJpbmcocGFyc2VkLnByb3RvY29sKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRVcmxFcnJvcih7IGlucHV0IH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGFyc2VkO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlVXJsKHJlbGF0aXZlLCBiYXNlKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiB1c2VOYXRpdmVVUkwgPyBuZXcgVVJMKHJlbGF0aXZlLCBiYXNlKSA6IHBhcnNlVXJsKHVybC5yZXNvbHZlKGJhc2UsIHJlbGF0aXZlKSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVXJsKGlucHV0KSB7XG4gIGlmICgvXlxcWy8udGVzdChpbnB1dC5ob3N0bmFtZSkgJiYgIS9eXFxbWzowLTlhLWZdK1xcXSQvaS50ZXN0KGlucHV0Lmhvc3RuYW1lKSkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkVXJsRXJyb3IoeyBpbnB1dDogaW5wdXQuaHJlZiB8fCBpbnB1dCB9KTtcbiAgfVxuICBpZiAoL15cXFsvLnRlc3QoaW5wdXQuaG9zdCkgJiYgIS9eXFxbWzowLTlhLWZdK1xcXSg6XFxkKyk/JC9pLnRlc3QoaW5wdXQuaG9zdCkpIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZFVybEVycm9yKHsgaW5wdXQ6IGlucHV0LmhyZWYgfHwgaW5wdXQgfSk7XG4gIH1cbiAgcmV0dXJuIGlucHV0O1xufVxuXG5mdW5jdGlvbiBzcHJlYWRVcmxPYmplY3QodXJsT2JqZWN0LCB0YXJnZXQpIHtcbiAgdmFyIHNwcmVhZCA9IHRhcmdldCB8fCB7fTtcbiAgZm9yICh2YXIga2V5IG9mIHByZXNlcnZlZFVybEZpZWxkcykge1xuICAgIHNwcmVhZFtrZXldID0gdXJsT2JqZWN0W2tleV07XG4gIH1cblxuICAvLyBGaXggSVB2NiBob3N0bmFtZVxuICBpZiAoc3ByZWFkLmhvc3RuYW1lLnN0YXJ0c1dpdGgoXCJbXCIpKSB7XG4gICAgc3ByZWFkLmhvc3RuYW1lID0gc3ByZWFkLmhvc3RuYW1lLnNsaWNlKDEsIC0xKTtcbiAgfVxuICAvLyBFbnN1cmUgcG9ydCBpcyBhIG51bWJlclxuICBpZiAoc3ByZWFkLnBvcnQgIT09IFwiXCIpIHtcbiAgICBzcHJlYWQucG9ydCA9IE51bWJlcihzcHJlYWQucG9ydCk7XG4gIH1cbiAgLy8gQ29uY2F0ZW5hdGUgcGF0aFxuICBzcHJlYWQucGF0aCA9IHNwcmVhZC5zZWFyY2ggPyBzcHJlYWQucGF0aG5hbWUgKyBzcHJlYWQuc2VhcmNoIDogc3ByZWFkLnBhdGhuYW1lO1xuXG4gIHJldHVybiBzcHJlYWQ7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZU1hdGNoaW5nSGVhZGVycyhyZWdleCwgaGVhZGVycykge1xuICB2YXIgbGFzdFZhbHVlO1xuICBmb3IgKHZhciBoZWFkZXIgaW4gaGVhZGVycykge1xuICAgIGlmIChyZWdleC50ZXN0KGhlYWRlcikpIHtcbiAgICAgIGxhc3RWYWx1ZSA9IGhlYWRlcnNbaGVhZGVyXTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW2hlYWRlcl07XG4gICAgfVxuICB9XG4gIHJldHVybiAobGFzdFZhbHVlID09PSBudWxsIHx8IHR5cGVvZiBsYXN0VmFsdWUgPT09IFwidW5kZWZpbmVkXCIpID9cbiAgICB1bmRlZmluZWQgOiBTdHJpbmcobGFzdFZhbHVlKS50cmltKCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVycm9yVHlwZShjb2RlLCBtZXNzYWdlLCBiYXNlQ2xhc3MpIHtcbiAgLy8gQ3JlYXRlIGNvbnN0cnVjdG9yXG4gIGZ1bmN0aW9uIEN1c3RvbUVycm9yKHByb3BlcnRpZXMpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIHByb3BlcnRpZXMgfHwge30pO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgdGhpcy5tZXNzYWdlID0gdGhpcy5jYXVzZSA/IG1lc3NhZ2UgKyBcIjogXCIgKyB0aGlzLmNhdXNlLm1lc3NhZ2UgOiBtZXNzYWdlO1xuICB9XG5cbiAgLy8gQXR0YWNoIGNvbnN0cnVjdG9yIGFuZCBzZXQgZGVmYXVsdCBwcm9wZXJ0aWVzXG4gIEN1c3RvbUVycm9yLnByb3RvdHlwZSA9IG5ldyAoYmFzZUNsYXNzIHx8IEVycm9yKSgpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhDdXN0b21FcnJvci5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IEN1c3RvbUVycm9yLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgfSxcbiAgICBuYW1lOiB7XG4gICAgICB2YWx1ZTogXCJFcnJvciBbXCIgKyBjb2RlICsgXCJdXCIsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB9LFxuICB9KTtcbiAgcmV0dXJuIEN1c3RvbUVycm9yO1xufVxuXG5mdW5jdGlvbiBkZXN0cm95UmVxdWVzdChyZXF1ZXN0LCBlcnJvcikge1xuICBmb3IgKHZhciBldmVudCBvZiBldmVudHMpIHtcbiAgICByZXF1ZXN0LnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBldmVudEhhbmRsZXJzW2V2ZW50XSk7XG4gIH1cbiAgcmVxdWVzdC5vbihcImVycm9yXCIsIG5vb3ApO1xuICByZXF1ZXN0LmRlc3Ryb3koZXJyb3IpO1xufVxuXG5mdW5jdGlvbiBpc1N1YmRvbWFpbihzdWJkb21haW4sIGRvbWFpbikge1xuICBhc3NlcnQoaXNTdHJpbmcoc3ViZG9tYWluKSAmJiBpc1N0cmluZyhkb21haW4pKTtcbiAgdmFyIGRvdCA9IHN1YmRvbWFpbi5sZW5ndGggLSBkb21haW4ubGVuZ3RoIC0gMTtcbiAgcmV0dXJuIGRvdCA+IDAgJiYgc3ViZG9tYWluW2RvdF0gPT09IFwiLlwiICYmIHN1YmRvbWFpbi5lbmRzV2l0aChkb21haW4pO1xufVxuXG5mdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiIHx8IHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nO1xufVxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiAoXCJsZW5ndGhcIiBpbiB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGlzVVJMKHZhbHVlKSB7XG4gIHJldHVybiBVUkwgJiYgdmFsdWUgaW5zdGFuY2VvZiBVUkw7XG59XG5cbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gd3JhcCh7IGh0dHA6IGh0dHAsIGh0dHBzOiBodHRwcyB9KTtcbm1vZHVsZS5leHBvcnRzLndyYXAgPSB3cmFwO1xuIiwgbnVsbCwgbnVsbCwgbnVsbCwgIm1vZHVsZS5leHBvcnRzID0gaXNleGVcbmlzZXhlLnN5bmMgPSBzeW5jXG5cbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJylcblxuZnVuY3Rpb24gY2hlY2tQYXRoRXh0IChwYXRoLCBvcHRpb25zKSB7XG4gIHZhciBwYXRoZXh0ID0gb3B0aW9ucy5wYXRoRXh0ICE9PSB1bmRlZmluZWQgP1xuICAgIG9wdGlvbnMucGF0aEV4dCA6IHByb2Nlc3MuZW52LlBBVEhFWFRcblxuICBpZiAoIXBhdGhleHQpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgcGF0aGV4dCA9IHBhdGhleHQuc3BsaXQoJzsnKVxuICBpZiAocGF0aGV4dC5pbmRleE9mKCcnKSAhPT0gLTEpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aGV4dC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwID0gcGF0aGV4dFtpXS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKHAgJiYgcGF0aC5zdWJzdHIoLXAubGVuZ3RoKS50b0xvd2VyQ2FzZSgpID09PSBwKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gY2hlY2tTdGF0IChzdGF0LCBwYXRoLCBvcHRpb25zKSB7XG4gIGlmICghc3RhdC5pc1N5bWJvbGljTGluaygpICYmICFzdGF0LmlzRmlsZSgpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIGNoZWNrUGF0aEV4dChwYXRoLCBvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBpc2V4ZSAocGF0aCwgb3B0aW9ucywgY2IpIHtcbiAgZnMuc3RhdChwYXRoLCBmdW5jdGlvbiAoZXIsIHN0YXQpIHtcbiAgICBjYihlciwgZXIgPyBmYWxzZSA6IGNoZWNrU3RhdChzdGF0LCBwYXRoLCBvcHRpb25zKSlcbiAgfSlcbn1cblxuZnVuY3Rpb24gc3luYyAocGF0aCwgb3B0aW9ucykge1xuICByZXR1cm4gY2hlY2tTdGF0KGZzLnN0YXRTeW5jKHBhdGgpLCBwYXRoLCBvcHRpb25zKVxufVxuIiwgIm1vZHVsZS5leHBvcnRzID0gaXNleGVcbmlzZXhlLnN5bmMgPSBzeW5jXG5cbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJylcblxuZnVuY3Rpb24gaXNleGUgKHBhdGgsIG9wdGlvbnMsIGNiKSB7XG4gIGZzLnN0YXQocGF0aCwgZnVuY3Rpb24gKGVyLCBzdGF0KSB7XG4gICAgY2IoZXIsIGVyID8gZmFsc2UgOiBjaGVja1N0YXQoc3RhdCwgb3B0aW9ucykpXG4gIH0pXG59XG5cbmZ1bmN0aW9uIHN5bmMgKHBhdGgsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGNoZWNrU3RhdChmcy5zdGF0U3luYyhwYXRoKSwgb3B0aW9ucylcbn1cblxuZnVuY3Rpb24gY2hlY2tTdGF0IChzdGF0LCBvcHRpb25zKSB7XG4gIHJldHVybiBzdGF0LmlzRmlsZSgpICYmIGNoZWNrTW9kZShzdGF0LCBvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBjaGVja01vZGUgKHN0YXQsIG9wdGlvbnMpIHtcbiAgdmFyIG1vZCA9IHN0YXQubW9kZVxuICB2YXIgdWlkID0gc3RhdC51aWRcbiAgdmFyIGdpZCA9IHN0YXQuZ2lkXG5cbiAgdmFyIG15VWlkID0gb3B0aW9ucy51aWQgIT09IHVuZGVmaW5lZCA/XG4gICAgb3B0aW9ucy51aWQgOiBwcm9jZXNzLmdldHVpZCAmJiBwcm9jZXNzLmdldHVpZCgpXG4gIHZhciBteUdpZCA9IG9wdGlvbnMuZ2lkICE9PSB1bmRlZmluZWQgP1xuICAgIG9wdGlvbnMuZ2lkIDogcHJvY2Vzcy5nZXRnaWQgJiYgcHJvY2Vzcy5nZXRnaWQoKVxuXG4gIHZhciB1ID0gcGFyc2VJbnQoJzEwMCcsIDgpXG4gIHZhciBnID0gcGFyc2VJbnQoJzAxMCcsIDgpXG4gIHZhciBvID0gcGFyc2VJbnQoJzAwMScsIDgpXG4gIHZhciB1ZyA9IHUgfCBnXG5cbiAgdmFyIHJldCA9IChtb2QgJiBvKSB8fFxuICAgIChtb2QgJiBnKSAmJiBnaWQgPT09IG15R2lkIHx8XG4gICAgKG1vZCAmIHUpICYmIHVpZCA9PT0gbXlVaWQgfHxcbiAgICAobW9kICYgdWcpICYmIG15VWlkID09PSAwXG5cbiAgcmV0dXJuIHJldFxufVxuIiwgInZhciBmcyA9IHJlcXVpcmUoJ2ZzJylcbnZhciBjb3JlXG5pZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJyB8fCBnbG9iYWwuVEVTVElOR19XSU5ET1dTKSB7XG4gIGNvcmUgPSByZXF1aXJlKCcuL3dpbmRvd3MuanMnKVxufSBlbHNlIHtcbiAgY29yZSA9IHJlcXVpcmUoJy4vbW9kZS5qcycpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNleGVcbmlzZXhlLnN5bmMgPSBzeW5jXG5cbmZ1bmN0aW9uIGlzZXhlIChwYXRoLCBvcHRpb25zLCBjYikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IG9wdGlvbnNcbiAgICBvcHRpb25zID0ge31cbiAgfVxuXG4gIGlmICghY2IpIHtcbiAgICBpZiAodHlwZW9mIFByb21pc2UgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NhbGxiYWNrIG5vdCBwcm92aWRlZCcpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlzZXhlKHBhdGgsIG9wdGlvbnMgfHwge30sIGZ1bmN0aW9uIChlciwgaXMpIHtcbiAgICAgICAgaWYgKGVyKSB7XG4gICAgICAgICAgcmVqZWN0KGVyKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUoaXMpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGNvcmUocGF0aCwgb3B0aW9ucyB8fCB7fSwgZnVuY3Rpb24gKGVyLCBpcykge1xuICAgIC8vIGlnbm9yZSBFQUNDRVMgYmVjYXVzZSB0aGF0IGp1c3QgbWVhbnMgd2UgYXJlbid0IGFsbG93ZWQgdG8gcnVuIGl0XG4gICAgaWYgKGVyKSB7XG4gICAgICBpZiAoZXIuY29kZSA9PT0gJ0VBQ0NFUycgfHwgb3B0aW9ucyAmJiBvcHRpb25zLmlnbm9yZUVycm9ycykge1xuICAgICAgICBlciA9IG51bGxcbiAgICAgICAgaXMgPSBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgICBjYihlciwgaXMpXG4gIH0pXG59XG5cbmZ1bmN0aW9uIHN5bmMgKHBhdGgsIG9wdGlvbnMpIHtcbiAgLy8gbXkga2luZ2RvbSBmb3IgYSBmaWx0ZXJlZCBjYXRjaFxuICB0cnkge1xuICAgIHJldHVybiBjb3JlLnN5bmMocGF0aCwgb3B0aW9ucyB8fCB7fSlcbiAgfSBjYXRjaCAoZXIpIHtcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmlnbm9yZUVycm9ycyB8fCBlci5jb2RlID09PSAnRUFDQ0VTJykge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVyXG4gICAgfVxuICB9XG59XG4iLCAiY29uc3QgaXNXaW5kb3dzID0gcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJyB8fFxuICAgIHByb2Nlc3MuZW52Lk9TVFlQRSA9PT0gJ2N5Z3dpbicgfHxcbiAgICBwcm9jZXNzLmVudi5PU1RZUEUgPT09ICdtc3lzJ1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG5jb25zdCBDT0xPTiA9IGlzV2luZG93cyA/ICc7JyA6ICc6J1xuY29uc3QgaXNleGUgPSByZXF1aXJlKCdpc2V4ZScpXG5cbmNvbnN0IGdldE5vdEZvdW5kRXJyb3IgPSAoY21kKSA9PlxuICBPYmplY3QuYXNzaWduKG5ldyBFcnJvcihgbm90IGZvdW5kOiAke2NtZH1gKSwgeyBjb2RlOiAnRU5PRU5UJyB9KVxuXG5jb25zdCBnZXRQYXRoSW5mbyA9IChjbWQsIG9wdCkgPT4ge1xuICBjb25zdCBjb2xvbiA9IG9wdC5jb2xvbiB8fCBDT0xPTlxuXG4gIC8vIElmIGl0IGhhcyBhIHNsYXNoLCB0aGVuIHdlIGRvbid0IGJvdGhlciBzZWFyY2hpbmcgdGhlIHBhdGhlbnYuXG4gIC8vIGp1c3QgY2hlY2sgdGhlIGZpbGUgaXRzZWxmLCBhbmQgdGhhdCdzIGl0LlxuICBjb25zdCBwYXRoRW52ID0gY21kLm1hdGNoKC9cXC8vKSB8fCBpc1dpbmRvd3MgJiYgY21kLm1hdGNoKC9cXFxcLykgPyBbJyddXG4gICAgOiAoXG4gICAgICBbXG4gICAgICAgIC8vIHdpbmRvd3MgYWx3YXlzIGNoZWNrcyB0aGUgY3dkIGZpcnN0XG4gICAgICAgIC4uLihpc1dpbmRvd3MgPyBbcHJvY2Vzcy5jd2QoKV0gOiBbXSksXG4gICAgICAgIC4uLihvcHQucGF0aCB8fCBwcm9jZXNzLmVudi5QQVRIIHx8XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IHZlcnkgdW51c3VhbCAqLyAnJykuc3BsaXQoY29sb24pLFxuICAgICAgXVxuICAgIClcbiAgY29uc3QgcGF0aEV4dEV4ZSA9IGlzV2luZG93c1xuICAgID8gb3B0LnBhdGhFeHQgfHwgcHJvY2Vzcy5lbnYuUEFUSEVYVCB8fCAnLkVYRTsuQ01EOy5CQVQ7LkNPTSdcbiAgICA6ICcnXG4gIGNvbnN0IHBhdGhFeHQgPSBpc1dpbmRvd3MgPyBwYXRoRXh0RXhlLnNwbGl0KGNvbG9uKSA6IFsnJ11cblxuICBpZiAoaXNXaW5kb3dzKSB7XG4gICAgaWYgKGNtZC5pbmRleE9mKCcuJykgIT09IC0xICYmIHBhdGhFeHRbMF0gIT09ICcnKVxuICAgICAgcGF0aEV4dC51bnNoaWZ0KCcnKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoRW52LFxuICAgIHBhdGhFeHQsXG4gICAgcGF0aEV4dEV4ZSxcbiAgfVxufVxuXG5jb25zdCB3aGljaCA9IChjbWQsIG9wdCwgY2IpID0+IHtcbiAgaWYgKHR5cGVvZiBvcHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IG9wdFxuICAgIG9wdCA9IHt9XG4gIH1cbiAgaWYgKCFvcHQpXG4gICAgb3B0ID0ge31cblxuICBjb25zdCB7IHBhdGhFbnYsIHBhdGhFeHQsIHBhdGhFeHRFeGUgfSA9IGdldFBhdGhJbmZvKGNtZCwgb3B0KVxuICBjb25zdCBmb3VuZCA9IFtdXG5cbiAgY29uc3Qgc3RlcCA9IGkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGlmIChpID09PSBwYXRoRW52Lmxlbmd0aClcbiAgICAgIHJldHVybiBvcHQuYWxsICYmIGZvdW5kLmxlbmd0aCA/IHJlc29sdmUoZm91bmQpXG4gICAgICAgIDogcmVqZWN0KGdldE5vdEZvdW5kRXJyb3IoY21kKSlcblxuICAgIGNvbnN0IHBwUmF3ID0gcGF0aEVudltpXVxuICAgIGNvbnN0IHBhdGhQYXJ0ID0gL15cIi4qXCIkLy50ZXN0KHBwUmF3KSA/IHBwUmF3LnNsaWNlKDEsIC0xKSA6IHBwUmF3XG5cbiAgICBjb25zdCBwQ21kID0gcGF0aC5qb2luKHBhdGhQYXJ0LCBjbWQpXG4gICAgY29uc3QgcCA9ICFwYXRoUGFydCAmJiAvXlxcLltcXFxcXFwvXS8udGVzdChjbWQpID8gY21kLnNsaWNlKDAsIDIpICsgcENtZFxuICAgICAgOiBwQ21kXG5cbiAgICByZXNvbHZlKHN1YlN0ZXAocCwgaSwgMCkpXG4gIH0pXG5cbiAgY29uc3Qgc3ViU3RlcCA9IChwLCBpLCBpaSkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGlmIChpaSA9PT0gcGF0aEV4dC5sZW5ndGgpXG4gICAgICByZXR1cm4gcmVzb2x2ZShzdGVwKGkgKyAxKSlcbiAgICBjb25zdCBleHQgPSBwYXRoRXh0W2lpXVxuICAgIGlzZXhlKHAgKyBleHQsIHsgcGF0aEV4dDogcGF0aEV4dEV4ZSB9LCAoZXIsIGlzKSA9PiB7XG4gICAgICBpZiAoIWVyICYmIGlzKSB7XG4gICAgICAgIGlmIChvcHQuYWxsKVxuICAgICAgICAgIGZvdW5kLnB1c2gocCArIGV4dClcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHJldHVybiByZXNvbHZlKHAgKyBleHQpXG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzb2x2ZShzdWJTdGVwKHAsIGksIGlpICsgMSkpXG4gICAgfSlcbiAgfSlcblxuICByZXR1cm4gY2IgPyBzdGVwKDApLnRoZW4ocmVzID0+IGNiKG51bGwsIHJlcyksIGNiKSA6IHN0ZXAoMClcbn1cblxuY29uc3Qgd2hpY2hTeW5jID0gKGNtZCwgb3B0KSA9PiB7XG4gIG9wdCA9IG9wdCB8fCB7fVxuXG4gIGNvbnN0IHsgcGF0aEVudiwgcGF0aEV4dCwgcGF0aEV4dEV4ZSB9ID0gZ2V0UGF0aEluZm8oY21kLCBvcHQpXG4gIGNvbnN0IGZvdW5kID0gW11cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdGhFbnYubGVuZ3RoOyBpICsrKSB7XG4gICAgY29uc3QgcHBSYXcgPSBwYXRoRW52W2ldXG4gICAgY29uc3QgcGF0aFBhcnQgPSAvXlwiLipcIiQvLnRlc3QocHBSYXcpID8gcHBSYXcuc2xpY2UoMSwgLTEpIDogcHBSYXdcblxuICAgIGNvbnN0IHBDbWQgPSBwYXRoLmpvaW4ocGF0aFBhcnQsIGNtZClcbiAgICBjb25zdCBwID0gIXBhdGhQYXJ0ICYmIC9eXFwuW1xcXFxcXC9dLy50ZXN0KGNtZCkgPyBjbWQuc2xpY2UoMCwgMikgKyBwQ21kXG4gICAgICA6IHBDbWRcblxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgcGF0aEV4dC5sZW5ndGg7IGogKyspIHtcbiAgICAgIGNvbnN0IGN1ciA9IHAgKyBwYXRoRXh0W2pdXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBpcyA9IGlzZXhlLnN5bmMoY3VyLCB7IHBhdGhFeHQ6IHBhdGhFeHRFeGUgfSlcbiAgICAgICAgaWYgKGlzKSB7XG4gICAgICAgICAgaWYgKG9wdC5hbGwpXG4gICAgICAgICAgICBmb3VuZC5wdXNoKGN1cilcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gY3VyXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGV4KSB7fVxuICAgIH1cbiAgfVxuXG4gIGlmIChvcHQuYWxsICYmIGZvdW5kLmxlbmd0aClcbiAgICByZXR1cm4gZm91bmRcblxuICBpZiAob3B0Lm5vdGhyb3cpXG4gICAgcmV0dXJuIG51bGxcblxuICB0aHJvdyBnZXROb3RGb3VuZEVycm9yKGNtZClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3aGljaFxud2hpY2guc3luYyA9IHdoaWNoU3luY1xuIiwgIi8vIEEgc2ltcGxlIGltcGxlbWVudGF0aW9uIG9mIG1ha2UtYXJyYXlcbmZ1bmN0aW9uIG1ha2VBcnJheSAoc3ViamVjdCkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShzdWJqZWN0KVxuICAgID8gc3ViamVjdFxuICAgIDogW3N1YmplY3RdXG59XG5cbmNvbnN0IEVNUFRZID0gJydcbmNvbnN0IFNQQUNFID0gJyAnXG5jb25zdCBFU0NBUEUgPSAnXFxcXCdcbmNvbnN0IFJFR0VYX1RFU1RfQkxBTktfTElORSA9IC9eXFxzKyQvXG5jb25zdCBSRUdFWF9JTlZBTElEX1RSQUlMSU5HX0JBQ0tTTEFTSCA9IC8oPzpbXlxcXFxdfF4pXFxcXCQvXG5jb25zdCBSRUdFWF9SRVBMQUNFX0xFQURJTkdfRVhDQVBFRF9FWENMQU1BVElPTiA9IC9eXFxcXCEvXG5jb25zdCBSRUdFWF9SRVBMQUNFX0xFQURJTkdfRVhDQVBFRF9IQVNIID0gL15cXFxcIy9cbmNvbnN0IFJFR0VYX1NQTElUQUxMX0NSTEYgPSAvXFxyP1xcbi9nXG4vLyAvZm9vLFxuLy8gLi9mb28sXG4vLyAuLi9mb28sXG4vLyAuXG4vLyAuLlxuY29uc3QgUkVHRVhfVEVTVF9JTlZBTElEX1BBVEggPSAvXlxcLipcXC98XlxcLiskL1xuXG5jb25zdCBTTEFTSCA9ICcvJ1xuXG4vLyBEbyBub3QgdXNlIHRlcm5hcnkgZXhwcmVzc2lvbiBoZXJlLCBzaW5jZSBcImlzdGFuYnVsIGlnbm9yZSBuZXh0XCIgaXMgYnVnZ3lcbmxldCBUTVBfS0VZX0lHTk9SRSA9ICdub2RlLWlnbm9yZSdcbi8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG5pZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgVE1QX0tFWV9JR05PUkUgPSBTeW1ib2wuZm9yKCdub2RlLWlnbm9yZScpXG59XG5jb25zdCBLRVlfSUdOT1JFID0gVE1QX0tFWV9JR05PUkVcblxuY29uc3QgZGVmaW5lID0gKG9iamVjdCwga2V5LCB2YWx1ZSkgPT5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7dmFsdWV9KVxuXG5jb25zdCBSRUdFWF9SRUdFWFBfUkFOR0UgPSAvKFswLXpdKS0oWzAtel0pL2dcblxuY29uc3QgUkVUVVJOX0ZBTFNFID0gKCkgPT4gZmFsc2VcblxuLy8gU2FuaXRpemUgdGhlIHJhbmdlIG9mIGEgcmVndWxhciBleHByZXNzaW9uXG4vLyBUaGUgY2FzZXMgYXJlIGNvbXBsaWNhdGVkLCBzZWUgdGVzdCBjYXNlcyBmb3IgZGV0YWlsc1xuY29uc3Qgc2FuaXRpemVSYW5nZSA9IHJhbmdlID0+IHJhbmdlLnJlcGxhY2UoXG4gIFJFR0VYX1JFR0VYUF9SQU5HRSxcbiAgKG1hdGNoLCBmcm9tLCB0bykgPT4gZnJvbS5jaGFyQ29kZUF0KDApIDw9IHRvLmNoYXJDb2RlQXQoMClcbiAgICA/IG1hdGNoXG4gICAgLy8gSW52YWxpZCByYW5nZSAob3V0IG9mIG9yZGVyKSB3aGljaCBpcyBvayBmb3IgZ2l0aWdub3JlIHJ1bGVzIGJ1dFxuICAgIC8vICAgZmF0YWwgZm9yIEphdmFTY3JpcHQgcmVndWxhciBleHByZXNzaW9uLCBzbyBlbGltaW5hdGUgaXQuXG4gICAgOiBFTVBUWVxuKVxuXG4vLyBTZWUgZml4dHVyZXMgIzU5XG5jb25zdCBjbGVhblJhbmdlQmFja1NsYXNoID0gc2xhc2hlcyA9PiB7XG4gIGNvbnN0IHtsZW5ndGh9ID0gc2xhc2hlc1xuICByZXR1cm4gc2xhc2hlcy5zbGljZSgwLCBsZW5ndGggLSBsZW5ndGggJSAyKVxufVxuXG4vLyA+IElmIHRoZSBwYXR0ZXJuIGVuZHMgd2l0aCBhIHNsYXNoLFxuLy8gPiBpdCBpcyByZW1vdmVkIGZvciB0aGUgcHVycG9zZSBvZiB0aGUgZm9sbG93aW5nIGRlc2NyaXB0aW9uLFxuLy8gPiBidXQgaXQgd291bGQgb25seSBmaW5kIGEgbWF0Y2ggd2l0aCBhIGRpcmVjdG9yeS5cbi8vID4gSW4gb3RoZXIgd29yZHMsIGZvby8gd2lsbCBtYXRjaCBhIGRpcmVjdG9yeSBmb28gYW5kIHBhdGhzIHVuZGVybmVhdGggaXQsXG4vLyA+IGJ1dCB3aWxsIG5vdCBtYXRjaCBhIHJlZ3VsYXIgZmlsZSBvciBhIHN5bWJvbGljIGxpbmsgZm9vXG4vLyA+ICAodGhpcyBpcyBjb25zaXN0ZW50IHdpdGggdGhlIHdheSBob3cgcGF0aHNwZWMgd29ya3MgaW4gZ2VuZXJhbCBpbiBHaXQpLlxuLy8gJ2Bmb28vYCcgd2lsbCBub3QgbWF0Y2ggcmVndWxhciBmaWxlICdgZm9vYCcgb3Igc3ltYm9saWMgbGluayAnYGZvb2AnXG4vLyAtPiBpZ25vcmUtcnVsZXMgd2lsbCBub3QgZGVhbCB3aXRoIGl0LCBiZWNhdXNlIGl0IGNvc3RzIGV4dHJhIGBmcy5zdGF0YCBjYWxsXG4vLyAgICAgIHlvdSBjb3VsZCB1c2Ugb3B0aW9uIGBtYXJrOiB0cnVlYCB3aXRoIGBnbG9iYFxuXG4vLyAnYGZvby9gJyBzaG91bGQgbm90IGNvbnRpbnVlIHdpdGggdGhlICdgLi5gJ1xuY29uc3QgUkVQTEFDRVJTID0gW1xuXG4gIFtcbiAgICAvLyByZW1vdmUgQk9NXG4gICAgLy8gVE9ETzpcbiAgICAvLyBPdGhlciBzaW1pbGFyIHplcm8td2lkdGggY2hhcmFjdGVycz9cbiAgICAvXlxcdUZFRkYvLFxuICAgICgpID0+IEVNUFRZXG4gIF0sXG5cbiAgLy8gPiBUcmFpbGluZyBzcGFjZXMgYXJlIGlnbm9yZWQgdW5sZXNzIHRoZXkgYXJlIHF1b3RlZCB3aXRoIGJhY2tzbGFzaCAoXCJcXFwiKVxuICBbXG4gICAgLy8gKGFcXCApIC0+IChhIClcbiAgICAvLyAoYSAgKSAtPiAoYSlcbiAgICAvLyAoYSApIC0+IChhKVxuICAgIC8vIChhIFxcICkgLT4gKGEgIClcbiAgICAvKCg/OlxcXFxcXFxcKSo/KShcXFxcP1xccyspJC8sXG4gICAgKF8sIG0xLCBtMikgPT4gbTEgKyAoXG4gICAgICBtMi5pbmRleE9mKCdcXFxcJykgPT09IDBcbiAgICAgICAgPyBTUEFDRVxuICAgICAgICA6IEVNUFRZXG4gICAgKVxuICBdLFxuXG4gIC8vIHJlcGxhY2UgKFxcICkgd2l0aCAnICdcbiAgLy8gKFxcICkgLT4gJyAnXG4gIC8vIChcXFxcICkgLT4gJ1xcXFwgJ1xuICAvLyAoXFxcXFxcICkgLT4gJ1xcXFwgJ1xuICBbXG4gICAgLyhcXFxcKz8pXFxzL2csXG4gICAgKF8sIG0xKSA9PiB7XG4gICAgICBjb25zdCB7bGVuZ3RofSA9IG0xXG4gICAgICByZXR1cm4gbTEuc2xpY2UoMCwgbGVuZ3RoIC0gbGVuZ3RoICUgMikgKyBTUEFDRVxuICAgIH1cbiAgXSxcblxuICAvLyBFc2NhcGUgbWV0YWNoYXJhY3RlcnNcbiAgLy8gd2hpY2ggaXMgd3JpdHRlbiBkb3duIGJ5IHVzZXJzIGJ1dCBtZWFucyBzcGVjaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zLlxuXG4gIC8vID4gVGhlcmUgYXJlIDEyIGNoYXJhY3RlcnMgd2l0aCBzcGVjaWFsIG1lYW5pbmdzOlxuICAvLyA+IC0gdGhlIGJhY2tzbGFzaCBcXCxcbiAgLy8gPiAtIHRoZSBjYXJldCBeLFxuICAvLyA+IC0gdGhlIGRvbGxhciBzaWduICQsXG4gIC8vID4gLSB0aGUgcGVyaW9kIG9yIGRvdCAuLFxuICAvLyA+IC0gdGhlIHZlcnRpY2FsIGJhciBvciBwaXBlIHN5bWJvbCB8LFxuICAvLyA+IC0gdGhlIHF1ZXN0aW9uIG1hcmsgPyxcbiAgLy8gPiAtIHRoZSBhc3RlcmlzayBvciBzdGFyICosXG4gIC8vID4gLSB0aGUgcGx1cyBzaWduICssXG4gIC8vID4gLSB0aGUgb3BlbmluZyBwYXJlbnRoZXNpcyAoLFxuICAvLyA+IC0gdGhlIGNsb3NpbmcgcGFyZW50aGVzaXMgKSxcbiAgLy8gPiAtIGFuZCB0aGUgb3BlbmluZyBzcXVhcmUgYnJhY2tldCBbLFxuICAvLyA+IC0gdGhlIG9wZW5pbmcgY3VybHkgYnJhY2UgeyxcbiAgLy8gPiBUaGVzZSBzcGVjaWFsIGNoYXJhY3RlcnMgYXJlIG9mdGVuIGNhbGxlZCBcIm1ldGFjaGFyYWN0ZXJzXCIuXG4gIFtcbiAgICAvW1xcXFwkLnwqKygpe15dL2csXG4gICAgbWF0Y2ggPT4gYFxcXFwke21hdGNofWBcbiAgXSxcblxuICBbXG4gICAgLy8gPiBhIHF1ZXN0aW9uIG1hcmsgKD8pIG1hdGNoZXMgYSBzaW5nbGUgY2hhcmFjdGVyXG4gICAgLyg/IVxcXFwpXFw/L2csXG4gICAgKCkgPT4gJ1teL10nXG4gIF0sXG5cbiAgLy8gbGVhZGluZyBzbGFzaFxuICBbXG5cbiAgICAvLyA+IEEgbGVhZGluZyBzbGFzaCBtYXRjaGVzIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHBhdGhuYW1lLlxuICAgIC8vID4gRm9yIGV4YW1wbGUsIFwiLyouY1wiIG1hdGNoZXMgXCJjYXQtZmlsZS5jXCIgYnV0IG5vdCBcIm1vemlsbGEtc2hhMS9zaGExLmNcIi5cbiAgICAvLyBBIGxlYWRpbmcgc2xhc2ggbWF0Y2hlcyB0aGUgYmVnaW5uaW5nIG9mIHRoZSBwYXRobmFtZVxuICAgIC9eXFwvLyxcbiAgICAoKSA9PiAnXidcbiAgXSxcblxuICAvLyByZXBsYWNlIHNwZWNpYWwgbWV0YWNoYXJhY3RlciBzbGFzaCBhZnRlciB0aGUgbGVhZGluZyBzbGFzaFxuICBbXG4gICAgL1xcLy9nLFxuICAgICgpID0+ICdcXFxcLydcbiAgXSxcblxuICBbXG4gICAgLy8gPiBBIGxlYWRpbmcgXCIqKlwiIGZvbGxvd2VkIGJ5IGEgc2xhc2ggbWVhbnMgbWF0Y2ggaW4gYWxsIGRpcmVjdG9yaWVzLlxuICAgIC8vID4gRm9yIGV4YW1wbGUsIFwiKiovZm9vXCIgbWF0Y2hlcyBmaWxlIG9yIGRpcmVjdG9yeSBcImZvb1wiIGFueXdoZXJlLFxuICAgIC8vID4gdGhlIHNhbWUgYXMgcGF0dGVybiBcImZvb1wiLlxuICAgIC8vID4gXCIqKi9mb28vYmFyXCIgbWF0Y2hlcyBmaWxlIG9yIGRpcmVjdG9yeSBcImJhclwiIGFueXdoZXJlIHRoYXQgaXMgZGlyZWN0bHlcbiAgICAvLyA+ICAgdW5kZXIgZGlyZWN0b3J5IFwiZm9vXCIuXG4gICAgLy8gTm90aWNlIHRoYXQgdGhlICcqJ3MgaGF2ZSBiZWVuIHJlcGxhY2VkIGFzICdcXFxcKidcbiAgICAvXlxcXipcXFxcXFwqXFxcXFxcKlxcXFxcXC8vLFxuXG4gICAgLy8gJyoqL2ZvbycgPC0+ICdmb28nXG4gICAgKCkgPT4gJ14oPzouKlxcXFwvKT8nXG4gIF0sXG5cbiAgLy8gc3RhcnRpbmdcbiAgW1xuICAgIC8vIHRoZXJlIHdpbGwgYmUgbm8gbGVhZGluZyAnLydcbiAgICAvLyAgICh3aGljaCBoYXMgYmVlbiByZXBsYWNlZCBieSBzZWN0aW9uIFwibGVhZGluZyBzbGFzaFwiKVxuICAgIC8vIElmIHN0YXJ0cyB3aXRoICcqKicsIGFkZGluZyBhICdeJyB0byB0aGUgcmVndWxhciBleHByZXNzaW9uIGFsc28gd29ya3NcbiAgICAvXig/PVteXl0pLyxcbiAgICBmdW5jdGlvbiBzdGFydGluZ1JlcGxhY2VyICgpIHtcbiAgICAgIC8vIElmIGhhcyBhIHNsYXNoIGAvYCBhdCB0aGUgYmVnaW5uaW5nIG9yIG1pZGRsZVxuICAgICAgcmV0dXJuICEvXFwvKD8hJCkvLnRlc3QodGhpcylcbiAgICAgICAgLy8gPiBQcmlvciB0byAyLjIyLjFcbiAgICAgICAgLy8gPiBJZiB0aGUgcGF0dGVybiBkb2VzIG5vdCBjb250YWluIGEgc2xhc2ggLyxcbiAgICAgICAgLy8gPiAgIEdpdCB0cmVhdHMgaXQgYXMgYSBzaGVsbCBnbG9iIHBhdHRlcm5cbiAgICAgICAgLy8gQWN0dWFsbHksIGlmIHRoZXJlIGlzIG9ubHkgYSB0cmFpbGluZyBzbGFzaCxcbiAgICAgICAgLy8gICBnaXQgYWxzbyB0cmVhdHMgaXQgYXMgYSBzaGVsbCBnbG9iIHBhdHRlcm5cblxuICAgICAgICAvLyBBZnRlciAyLjIyLjEgKGNvbXBhdGlibGUgYnV0IGNsZWFyZXIpXG4gICAgICAgIC8vID4gSWYgdGhlcmUgaXMgYSBzZXBhcmF0b3IgYXQgdGhlIGJlZ2lubmluZyBvciBtaWRkbGUgKG9yIGJvdGgpXG4gICAgICAgIC8vID4gb2YgdGhlIHBhdHRlcm4sIHRoZW4gdGhlIHBhdHRlcm4gaXMgcmVsYXRpdmUgdG8gdGhlIGRpcmVjdG9yeVxuICAgICAgICAvLyA+IGxldmVsIG9mIHRoZSBwYXJ0aWN1bGFyIC5naXRpZ25vcmUgZmlsZSBpdHNlbGYuXG4gICAgICAgIC8vID4gT3RoZXJ3aXNlIHRoZSBwYXR0ZXJuIG1heSBhbHNvIG1hdGNoIGF0IGFueSBsZXZlbCBiZWxvd1xuICAgICAgICAvLyA+IHRoZSAuZ2l0aWdub3JlIGxldmVsLlxuICAgICAgICA/ICcoPzpefFxcXFwvKSdcblxuICAgICAgICAvLyA+IE90aGVyd2lzZSwgR2l0IHRyZWF0cyB0aGUgcGF0dGVybiBhcyBhIHNoZWxsIGdsb2Igc3VpdGFibGUgZm9yXG4gICAgICAgIC8vID4gICBjb25zdW1wdGlvbiBieSBmbm1hdGNoKDMpXG4gICAgICAgIDogJ14nXG4gICAgfVxuICBdLFxuXG4gIC8vIHR3byBnbG9ic3RhcnNcbiAgW1xuICAgIC8vIFVzZSBsb29rYWhlYWQgYXNzZXJ0aW9ucyBzbyB0aGF0IHdlIGNvdWxkIG1hdGNoIG1vcmUgdGhhbiBvbmUgYCcvKionYFxuICAgIC9cXFxcXFwvXFxcXFxcKlxcXFxcXCooPz1cXFxcXFwvfCQpL2csXG5cbiAgICAvLyBaZXJvLCBvbmUgb3Igc2V2ZXJhbCBkaXJlY3Rvcmllc1xuICAgIC8vIHNob3VsZCBub3QgdXNlICcqJywgb3IgaXQgd2lsbCBiZSByZXBsYWNlZCBieSB0aGUgbmV4dCByZXBsYWNlclxuXG4gICAgLy8gQ2hlY2sgaWYgaXQgaXMgbm90IHRoZSBsYXN0IGAnLyoqJ2BcbiAgICAoXywgaW5kZXgsIHN0cikgPT4gaW5kZXggKyA2IDwgc3RyLmxlbmd0aFxuXG4gICAgICAvLyBjYXNlOiAvKiovXG4gICAgICAvLyA+IEEgc2xhc2ggZm9sbG93ZWQgYnkgdHdvIGNvbnNlY3V0aXZlIGFzdGVyaXNrcyB0aGVuIGEgc2xhc2ggbWF0Y2hlc1xuICAgICAgLy8gPiAgIHplcm8gb3IgbW9yZSBkaXJlY3Rvcmllcy5cbiAgICAgIC8vID4gRm9yIGV4YW1wbGUsIFwiYS8qKi9iXCIgbWF0Y2hlcyBcImEvYlwiLCBcImEveC9iXCIsIFwiYS94L3kvYlwiIGFuZCBzbyBvbi5cbiAgICAgIC8vICcvKiovJ1xuICAgICAgPyAnKD86XFxcXC9bXlxcXFwvXSspKidcblxuICAgICAgLy8gY2FzZTogLyoqXG4gICAgICAvLyA+IEEgdHJhaWxpbmcgYFwiLyoqXCJgIG1hdGNoZXMgZXZlcnl0aGluZyBpbnNpZGUuXG5cbiAgICAgIC8vICMyMTogZXZlcnl0aGluZyBpbnNpZGUgYnV0IGl0IHNob3VsZCBub3QgaW5jbHVkZSB0aGUgY3VycmVudCBmb2xkZXJcbiAgICAgIDogJ1xcXFwvLisnXG4gIF0sXG5cbiAgLy8gbm9ybWFsIGludGVybWVkaWF0ZSB3aWxkY2FyZHNcbiAgW1xuICAgIC8vIE5ldmVyIHJlcGxhY2UgZXNjYXBlZCAnKidcbiAgICAvLyBpZ25vcmUgcnVsZSAnXFwqJyB3aWxsIG1hdGNoIHRoZSBwYXRoICcqJ1xuXG4gICAgLy8gJ2FiYy4qLycgLT4gZ29cbiAgICAvLyAnYWJjLionICAtPiBza2lwIHRoaXMgcnVsZSxcbiAgICAvLyAgICBjb3ogdHJhaWxpbmcgc2luZ2xlIHdpbGRjYXJkIHdpbGwgYmUgaGFuZGVkIGJ5IFt0cmFpbGluZyB3aWxkY2FyZF1cbiAgICAvKF58W15cXFxcXSspKFxcXFxcXCopKyg/PS4rKS9nLFxuXG4gICAgLy8gJyouanMnIG1hdGNoZXMgJy5qcydcbiAgICAvLyAnKi5qcycgZG9lc24ndCBtYXRjaCAnYWJjJ1xuICAgIChfLCBwMSwgcDIpID0+IHtcbiAgICAgIC8vIDEuXG4gICAgICAvLyA+IEFuIGFzdGVyaXNrIFwiKlwiIG1hdGNoZXMgYW55dGhpbmcgZXhjZXB0IGEgc2xhc2guXG4gICAgICAvLyAyLlxuICAgICAgLy8gPiBPdGhlciBjb25zZWN1dGl2ZSBhc3Rlcmlza3MgYXJlIGNvbnNpZGVyZWQgcmVndWxhciBhc3Rlcmlza3NcbiAgICAgIC8vID4gYW5kIHdpbGwgbWF0Y2ggYWNjb3JkaW5nIHRvIHRoZSBwcmV2aW91cyBydWxlcy5cbiAgICAgIGNvbnN0IHVuZXNjYXBlZCA9IHAyLnJlcGxhY2UoL1xcXFxcXCovZywgJ1teXFxcXC9dKicpXG4gICAgICByZXR1cm4gcDEgKyB1bmVzY2FwZWRcbiAgICB9XG4gIF0sXG5cbiAgW1xuICAgIC8vIHVuZXNjYXBlLCByZXZlcnQgc3RlcCAzIGV4Y2VwdCBmb3IgYmFjayBzbGFzaFxuICAgIC8vIEZvciBleGFtcGxlLCBpZiBhIHVzZXIgZXNjYXBlIGEgJ1xcXFwqJyxcbiAgICAvLyBhZnRlciBzdGVwIDMsIHRoZSByZXN1bHQgd2lsbCBiZSAnXFxcXFxcXFxcXFxcKidcbiAgICAvXFxcXFxcXFxcXFxcKD89WyQufCorKCl7Xl0pL2csXG4gICAgKCkgPT4gRVNDQVBFXG4gIF0sXG5cbiAgW1xuICAgIC8vICdcXFxcXFxcXCcgLT4gJ1xcXFwnXG4gICAgL1xcXFxcXFxcL2csXG4gICAgKCkgPT4gRVNDQVBFXG4gIF0sXG5cbiAgW1xuICAgIC8vID4gVGhlIHJhbmdlIG5vdGF0aW9uLCBlLmcuIFthLXpBLVpdLFxuICAgIC8vID4gY2FuIGJlIHVzZWQgdG8gbWF0Y2ggb25lIG9mIHRoZSBjaGFyYWN0ZXJzIGluIGEgcmFuZ2UuXG5cbiAgICAvLyBgXFxgIGlzIGVzY2FwZWQgYnkgc3RlcCAzXG4gICAgLyhcXFxcKT9cXFsoW15cXF0vXSo/KShcXFxcKikoJHxcXF0pL2csXG4gICAgKG1hdGNoLCBsZWFkRXNjYXBlLCByYW5nZSwgZW5kRXNjYXBlLCBjbG9zZSkgPT4gbGVhZEVzY2FwZSA9PT0gRVNDQVBFXG4gICAgICAvLyAnXFxcXFtiYXJdJyAtPiAnXFxcXFxcXFxbYmFyXFxcXF0nXG4gICAgICA/IGBcXFxcWyR7cmFuZ2V9JHtjbGVhblJhbmdlQmFja1NsYXNoKGVuZEVzY2FwZSl9JHtjbG9zZX1gXG4gICAgICA6IGNsb3NlID09PSAnXSdcbiAgICAgICAgPyBlbmRFc2NhcGUubGVuZ3RoICUgMiA9PT0gMFxuICAgICAgICAgIC8vIEEgbm9ybWFsIGNhc2UsIGFuZCBpdCBpcyBhIHJhbmdlIG5vdGF0aW9uXG4gICAgICAgICAgLy8gJ1tiYXJdJ1xuICAgICAgICAgIC8vICdbYmFyXFxcXFxcXFxdJ1xuICAgICAgICAgID8gYFske3Nhbml0aXplUmFuZ2UocmFuZ2UpfSR7ZW5kRXNjYXBlfV1gXG4gICAgICAgICAgLy8gSW52YWxpZCByYW5nZSBub3RhdG9uXG4gICAgICAgICAgLy8gJ1tiYXJcXFxcXScgLT4gJ1tiYXJcXFxcXFxcXF0nXG4gICAgICAgICAgOiAnW10nXG4gICAgICAgIDogJ1tdJ1xuICBdLFxuXG4gIC8vIGVuZGluZ1xuICBbXG4gICAgLy8gJ2pzJyB3aWxsIG5vdCBtYXRjaCAnanMuJ1xuICAgIC8vICdhYicgd2lsbCBub3QgbWF0Y2ggJ2FiYydcbiAgICAvKD86W14qXSkkLyxcblxuICAgIC8vIFdURiFcbiAgICAvLyBodHRwczovL2dpdC1zY20uY29tL2RvY3MvZ2l0aWdub3JlXG4gICAgLy8gY2hhbmdlcyBpbiBbMi4yMi4xXShodHRwczovL2dpdC1zY20uY29tL2RvY3MvZ2l0aWdub3JlLzIuMjIuMSlcbiAgICAvLyB3aGljaCByZS1maXhlcyAjMjQsICMzOFxuXG4gICAgLy8gPiBJZiB0aGVyZSBpcyBhIHNlcGFyYXRvciBhdCB0aGUgZW5kIG9mIHRoZSBwYXR0ZXJuIHRoZW4gdGhlIHBhdHRlcm5cbiAgICAvLyA+IHdpbGwgb25seSBtYXRjaCBkaXJlY3Rvcmllcywgb3RoZXJ3aXNlIHRoZSBwYXR0ZXJuIGNhbiBtYXRjaCBib3RoXG4gICAgLy8gPiBmaWxlcyBhbmQgZGlyZWN0b3JpZXMuXG5cbiAgICAvLyAnanMqJyB3aWxsIG5vdCBtYXRjaCAnYS5qcydcbiAgICAvLyAnanMvJyB3aWxsIG5vdCBtYXRjaCAnYS5qcydcbiAgICAvLyAnanMnIHdpbGwgbWF0Y2ggJ2EuanMnIGFuZCAnYS5qcy8nXG4gICAgbWF0Y2ggPT4gL1xcLyQvLnRlc3QobWF0Y2gpXG4gICAgICAvLyBmb28vIHdpbGwgbm90IG1hdGNoICdmb28nXG4gICAgICA/IGAke21hdGNofSRgXG4gICAgICAvLyBmb28gbWF0Y2hlcyAnZm9vJyBhbmQgJ2Zvby8nXG4gICAgICA6IGAke21hdGNofSg/PSR8XFxcXC8kKWBcbiAgXSxcblxuICAvLyB0cmFpbGluZyB3aWxkY2FyZFxuICBbXG4gICAgLyhcXF58XFxcXFxcLyk/XFxcXFxcKiQvLFxuICAgIChfLCBwMSkgPT4ge1xuICAgICAgY29uc3QgcHJlZml4ID0gcDFcbiAgICAgICAgLy8gJ1xcXic6XG4gICAgICAgIC8vICcvKicgZG9lcyBub3QgbWF0Y2ggRU1QVFlcbiAgICAgICAgLy8gJy8qJyBkb2VzIG5vdCBtYXRjaCBldmVyeXRoaW5nXG5cbiAgICAgICAgLy8gJ1xcXFxcXC8nOlxuICAgICAgICAvLyAnYWJjLyonIGRvZXMgbm90IG1hdGNoICdhYmMvJ1xuICAgICAgICA/IGAke3AxfVteL10rYFxuXG4gICAgICAgIC8vICdhKicgbWF0Y2hlcyAnYSdcbiAgICAgICAgLy8gJ2EqJyBtYXRjaGVzICdhYSdcbiAgICAgICAgOiAnW14vXSonXG5cbiAgICAgIHJldHVybiBgJHtwcmVmaXh9KD89JHxcXFxcLyQpYFxuICAgIH1cbiAgXSxcbl1cblxuLy8gQSBzaW1wbGUgY2FjaGUsIGJlY2F1c2UgYW4gaWdub3JlIHJ1bGUgb25seSBoYXMgb25seSBvbmUgY2VydGFpbiBtZWFuaW5nXG5jb25zdCByZWdleENhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuXG4vLyBAcGFyYW0ge3BhdHRlcm59XG5jb25zdCBtYWtlUmVnZXggPSAocGF0dGVybiwgaWdub3JlQ2FzZSkgPT4ge1xuICBsZXQgc291cmNlID0gcmVnZXhDYWNoZVtwYXR0ZXJuXVxuXG4gIGlmICghc291cmNlKSB7XG4gICAgc291cmNlID0gUkVQTEFDRVJTLnJlZHVjZShcbiAgICAgIChwcmV2LCBbbWF0Y2hlciwgcmVwbGFjZXJdKSA9PlxuICAgICAgICBwcmV2LnJlcGxhY2UobWF0Y2hlciwgcmVwbGFjZXIuYmluZChwYXR0ZXJuKSksXG4gICAgICBwYXR0ZXJuXG4gICAgKVxuICAgIHJlZ2V4Q2FjaGVbcGF0dGVybl0gPSBzb3VyY2VcbiAgfVxuXG4gIHJldHVybiBpZ25vcmVDYXNlXG4gICAgPyBuZXcgUmVnRXhwKHNvdXJjZSwgJ2knKVxuICAgIDogbmV3IFJlZ0V4cChzb3VyY2UpXG59XG5cbmNvbnN0IGlzU3RyaW5nID0gc3ViamVjdCA9PiB0eXBlb2Ygc3ViamVjdCA9PT0gJ3N0cmluZydcblxuLy8gPiBBIGJsYW5rIGxpbmUgbWF0Y2hlcyBubyBmaWxlcywgc28gaXQgY2FuIHNlcnZlIGFzIGEgc2VwYXJhdG9yIGZvciByZWFkYWJpbGl0eS5cbmNvbnN0IGNoZWNrUGF0dGVybiA9IHBhdHRlcm4gPT4gcGF0dGVyblxuICAmJiBpc1N0cmluZyhwYXR0ZXJuKVxuICAmJiAhUkVHRVhfVEVTVF9CTEFOS19MSU5FLnRlc3QocGF0dGVybilcbiAgJiYgIVJFR0VYX0lOVkFMSURfVFJBSUxJTkdfQkFDS1NMQVNILnRlc3QocGF0dGVybilcblxuICAvLyA+IEEgbGluZSBzdGFydGluZyB3aXRoICMgc2VydmVzIGFzIGEgY29tbWVudC5cbiAgJiYgcGF0dGVybi5pbmRleE9mKCcjJykgIT09IDBcblxuY29uc3Qgc3BsaXRQYXR0ZXJuID0gcGF0dGVybiA9PiBwYXR0ZXJuLnNwbGl0KFJFR0VYX1NQTElUQUxMX0NSTEYpXG5cbmNsYXNzIElnbm9yZVJ1bGUge1xuICBjb25zdHJ1Y3RvciAoXG4gICAgb3JpZ2luLFxuICAgIHBhdHRlcm4sXG4gICAgbmVnYXRpdmUsXG4gICAgcmVnZXhcbiAgKSB7XG4gICAgdGhpcy5vcmlnaW4gPSBvcmlnaW5cbiAgICB0aGlzLnBhdHRlcm4gPSBwYXR0ZXJuXG4gICAgdGhpcy5uZWdhdGl2ZSA9IG5lZ2F0aXZlXG4gICAgdGhpcy5yZWdleCA9IHJlZ2V4XG4gIH1cbn1cblxuY29uc3QgY3JlYXRlUnVsZSA9IChwYXR0ZXJuLCBpZ25vcmVDYXNlKSA9PiB7XG4gIGNvbnN0IG9yaWdpbiA9IHBhdHRlcm5cbiAgbGV0IG5lZ2F0aXZlID0gZmFsc2VcblxuICAvLyA+IEFuIG9wdGlvbmFsIHByZWZpeCBcIiFcIiB3aGljaCBuZWdhdGVzIHRoZSBwYXR0ZXJuO1xuICBpZiAocGF0dGVybi5pbmRleE9mKCchJykgPT09IDApIHtcbiAgICBuZWdhdGl2ZSA9IHRydWVcbiAgICBwYXR0ZXJuID0gcGF0dGVybi5zdWJzdHIoMSlcbiAgfVxuXG4gIHBhdHRlcm4gPSBwYXR0ZXJuXG4gIC8vID4gUHV0IGEgYmFja3NsYXNoIChcIlxcXCIpIGluIGZyb250IG9mIHRoZSBmaXJzdCBcIiFcIiBmb3IgcGF0dGVybnMgdGhhdFxuICAvLyA+ICAgYmVnaW4gd2l0aCBhIGxpdGVyYWwgXCIhXCIsIGZvciBleGFtcGxlLCBgXCJcXCFpbXBvcnRhbnQhLnR4dFwiYC5cbiAgLnJlcGxhY2UoUkVHRVhfUkVQTEFDRV9MRUFESU5HX0VYQ0FQRURfRVhDTEFNQVRJT04sICchJylcbiAgLy8gPiBQdXQgYSBiYWNrc2xhc2ggKFwiXFxcIikgaW4gZnJvbnQgb2YgdGhlIGZpcnN0IGhhc2ggZm9yIHBhdHRlcm5zIHRoYXRcbiAgLy8gPiAgIGJlZ2luIHdpdGggYSBoYXNoLlxuICAucmVwbGFjZShSRUdFWF9SRVBMQUNFX0xFQURJTkdfRVhDQVBFRF9IQVNILCAnIycpXG5cbiAgY29uc3QgcmVnZXggPSBtYWtlUmVnZXgocGF0dGVybiwgaWdub3JlQ2FzZSlcblxuICByZXR1cm4gbmV3IElnbm9yZVJ1bGUoXG4gICAgb3JpZ2luLFxuICAgIHBhdHRlcm4sXG4gICAgbmVnYXRpdmUsXG4gICAgcmVnZXhcbiAgKVxufVxuXG5jb25zdCB0aHJvd0Vycm9yID0gKG1lc3NhZ2UsIEN0b3IpID0+IHtcbiAgdGhyb3cgbmV3IEN0b3IobWVzc2FnZSlcbn1cblxuY29uc3QgY2hlY2tQYXRoID0gKHBhdGgsIG9yaWdpbmFsUGF0aCwgZG9UaHJvdykgPT4ge1xuICBpZiAoIWlzU3RyaW5nKHBhdGgpKSB7XG4gICAgcmV0dXJuIGRvVGhyb3coXG4gICAgICBgcGF0aCBtdXN0IGJlIGEgc3RyaW5nLCBidXQgZ290IFxcYCR7b3JpZ2luYWxQYXRofVxcYGAsXG4gICAgICBUeXBlRXJyb3JcbiAgICApXG4gIH1cblxuICAvLyBXZSBkb24ndCBrbm93IGlmIHdlIHNob3VsZCBpZ25vcmUgRU1QVFksIHNvIHRocm93XG4gIGlmICghcGF0aCkge1xuICAgIHJldHVybiBkb1Rocm93KGBwYXRoIG11c3Qgbm90IGJlIGVtcHR5YCwgVHlwZUVycm9yKVxuICB9XG5cbiAgLy8gQ2hlY2sgaWYgaXQgaXMgYSByZWxhdGl2ZSBwYXRoXG4gIGlmIChjaGVja1BhdGguaXNOb3RSZWxhdGl2ZShwYXRoKSkge1xuICAgIGNvbnN0IHIgPSAnYHBhdGgucmVsYXRpdmUoKWBkJ1xuICAgIHJldHVybiBkb1Rocm93KFxuICAgICAgYHBhdGggc2hvdWxkIGJlIGEgJHtyfSBzdHJpbmcsIGJ1dCBnb3QgXCIke29yaWdpbmFsUGF0aH1cImAsXG4gICAgICBSYW5nZUVycm9yXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHRydWVcbn1cblxuY29uc3QgaXNOb3RSZWxhdGl2ZSA9IHBhdGggPT4gUkVHRVhfVEVTVF9JTlZBTElEX1BBVEgudGVzdChwYXRoKVxuXG5jaGVja1BhdGguaXNOb3RSZWxhdGl2ZSA9IGlzTm90UmVsYXRpdmVcbmNoZWNrUGF0aC5jb252ZXJ0ID0gcCA9PiBwXG5cbmNsYXNzIElnbm9yZSB7XG4gIGNvbnN0cnVjdG9yICh7XG4gICAgaWdub3JlY2FzZSA9IHRydWUsXG4gICAgaWdub3JlQ2FzZSA9IGlnbm9yZWNhc2UsXG4gICAgYWxsb3dSZWxhdGl2ZVBhdGhzID0gZmFsc2VcbiAgfSA9IHt9KSB7XG4gICAgZGVmaW5lKHRoaXMsIEtFWV9JR05PUkUsIHRydWUpXG5cbiAgICB0aGlzLl9ydWxlcyA9IFtdXG4gICAgdGhpcy5faWdub3JlQ2FzZSA9IGlnbm9yZUNhc2VcbiAgICB0aGlzLl9hbGxvd1JlbGF0aXZlUGF0aHMgPSBhbGxvd1JlbGF0aXZlUGF0aHNcbiAgICB0aGlzLl9pbml0Q2FjaGUoKVxuICB9XG5cbiAgX2luaXRDYWNoZSAoKSB7XG4gICAgdGhpcy5faWdub3JlQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpXG4gICAgdGhpcy5fdGVzdENhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuICB9XG5cbiAgX2FkZFBhdHRlcm4gKHBhdHRlcm4pIHtcbiAgICAvLyAjMzJcbiAgICBpZiAocGF0dGVybiAmJiBwYXR0ZXJuW0tFWV9JR05PUkVdKSB7XG4gICAgICB0aGlzLl9ydWxlcyA9IHRoaXMuX3J1bGVzLmNvbmNhdChwYXR0ZXJuLl9ydWxlcylcbiAgICAgIHRoaXMuX2FkZGVkID0gdHJ1ZVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGNoZWNrUGF0dGVybihwYXR0ZXJuKSkge1xuICAgICAgY29uc3QgcnVsZSA9IGNyZWF0ZVJ1bGUocGF0dGVybiwgdGhpcy5faWdub3JlQ2FzZSlcbiAgICAgIHRoaXMuX2FkZGVkID0gdHJ1ZVxuICAgICAgdGhpcy5fcnVsZXMucHVzaChydWxlKVxuICAgIH1cbiAgfVxuXG4gIC8vIEBwYXJhbSB7QXJyYXk8c3RyaW5nPiB8IHN0cmluZyB8IElnbm9yZX0gcGF0dGVyblxuICBhZGQgKHBhdHRlcm4pIHtcbiAgICB0aGlzLl9hZGRlZCA9IGZhbHNlXG5cbiAgICBtYWtlQXJyYXkoXG4gICAgICBpc1N0cmluZyhwYXR0ZXJuKVxuICAgICAgICA/IHNwbGl0UGF0dGVybihwYXR0ZXJuKVxuICAgICAgICA6IHBhdHRlcm5cbiAgICApLmZvckVhY2godGhpcy5fYWRkUGF0dGVybiwgdGhpcylcblxuICAgIC8vIFNvbWUgcnVsZXMgaGF2ZSBqdXN0IGFkZGVkIHRvIHRoZSBpZ25vcmUsXG4gICAgLy8gbWFraW5nIHRoZSBiZWhhdmlvciBjaGFuZ2VkLlxuICAgIGlmICh0aGlzLl9hZGRlZCkge1xuICAgICAgdGhpcy5faW5pdENhY2hlKClcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLy8gbGVnYWN5XG4gIGFkZFBhdHRlcm4gKHBhdHRlcm4pIHtcbiAgICByZXR1cm4gdGhpcy5hZGQocGF0dGVybilcbiAgfVxuXG4gIC8vICAgICAgICAgIHwgICAgICAgICAgIGlnbm9yZWQgOiB1bmlnbm9yZWRcbiAgLy8gbmVnYXRpdmUgfCAgIDA6MCAgIHwgICAwOjEgICB8ICAgMTowICAgfCAgIDE6MVxuICAvLyAtLS0tLS0tLSB8IC0tLS0tLS0gfCAtLS0tLS0tIHwgLS0tLS0tLSB8IC0tLS0tLS0tXG4gIC8vICAgICAwICAgIHwgIFRFU1QgICB8ICBURVNUICAgfCAgU0tJUCAgIHwgICAgWFxuICAvLyAgICAgMSAgICB8ICBURVNUSUYgfCAgU0tJUCAgIHwgIFRFU1QgICB8ICAgIFhcblxuICAvLyAtIFNLSVA6IGFsd2F5cyBza2lwXG4gIC8vIC0gVEVTVDogYWx3YXlzIHRlc3RcbiAgLy8gLSBURVNUSUY6IG9ubHkgdGVzdCBpZiBjaGVja1VuaWdub3JlZFxuICAvLyAtIFg6IHRoYXQgbmV2ZXIgaGFwcGVuXG5cbiAgLy8gQHBhcmFtIHtib29sZWFufSB3aGV0aGVyIHNob3VsZCBjaGVjayBpZiB0aGUgcGF0aCBpcyB1bmlnbm9yZWQsXG4gIC8vICAgc2V0dGluZyBgY2hlY2tVbmlnbm9yZWRgIHRvIGBmYWxzZWAgY291bGQgcmVkdWNlIGFkZGl0aW9uYWxcbiAgLy8gICBwYXRoIG1hdGNoaW5nLlxuXG4gIC8vIEByZXR1cm5zIHtUZXN0UmVzdWx0fSB0cnVlIGlmIGEgZmlsZSBpcyBpZ25vcmVkXG4gIF90ZXN0T25lIChwYXRoLCBjaGVja1VuaWdub3JlZCkge1xuICAgIGxldCBpZ25vcmVkID0gZmFsc2VcbiAgICBsZXQgdW5pZ25vcmVkID0gZmFsc2VcblxuICAgIHRoaXMuX3J1bGVzLmZvckVhY2gocnVsZSA9PiB7XG4gICAgICBjb25zdCB7bmVnYXRpdmV9ID0gcnVsZVxuICAgICAgaWYgKFxuICAgICAgICB1bmlnbm9yZWQgPT09IG5lZ2F0aXZlICYmIGlnbm9yZWQgIT09IHVuaWdub3JlZFxuICAgICAgICB8fCBuZWdhdGl2ZSAmJiAhaWdub3JlZCAmJiAhdW5pZ25vcmVkICYmICFjaGVja1VuaWdub3JlZFxuICAgICAgKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBjb25zdCBtYXRjaGVkID0gcnVsZS5yZWdleC50ZXN0KHBhdGgpXG5cbiAgICAgIGlmIChtYXRjaGVkKSB7XG4gICAgICAgIGlnbm9yZWQgPSAhbmVnYXRpdmVcbiAgICAgICAgdW5pZ25vcmVkID0gbmVnYXRpdmVcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlnbm9yZWQsXG4gICAgICB1bmlnbm9yZWRcbiAgICB9XG4gIH1cblxuICAvLyBAcmV0dXJucyB7VGVzdFJlc3VsdH1cbiAgX3Rlc3QgKG9yaWdpbmFsUGF0aCwgY2FjaGUsIGNoZWNrVW5pZ25vcmVkLCBzbGljZXMpIHtcbiAgICBjb25zdCBwYXRoID0gb3JpZ2luYWxQYXRoXG4gICAgICAvLyBTdXBwb3J0cyBudWxsYWJsZSBwYXRoXG4gICAgICAmJiBjaGVja1BhdGguY29udmVydChvcmlnaW5hbFBhdGgpXG5cbiAgICBjaGVja1BhdGgoXG4gICAgICBwYXRoLFxuICAgICAgb3JpZ2luYWxQYXRoLFxuICAgICAgdGhpcy5fYWxsb3dSZWxhdGl2ZVBhdGhzXG4gICAgICAgID8gUkVUVVJOX0ZBTFNFXG4gICAgICAgIDogdGhyb3dFcnJvclxuICAgIClcblxuICAgIHJldHVybiB0aGlzLl90KHBhdGgsIGNhY2hlLCBjaGVja1VuaWdub3JlZCwgc2xpY2VzKVxuICB9XG5cbiAgX3QgKHBhdGgsIGNhY2hlLCBjaGVja1VuaWdub3JlZCwgc2xpY2VzKSB7XG4gICAgaWYgKHBhdGggaW4gY2FjaGUpIHtcbiAgICAgIHJldHVybiBjYWNoZVtwYXRoXVxuICAgIH1cblxuICAgIGlmICghc2xpY2VzKSB7XG4gICAgICAvLyBwYXRoL3RvL2EuanNcbiAgICAgIC8vIFsncGF0aCcsICd0bycsICdhLmpzJ11cbiAgICAgIHNsaWNlcyA9IHBhdGguc3BsaXQoU0xBU0gpXG4gICAgfVxuXG4gICAgc2xpY2VzLnBvcCgpXG5cbiAgICAvLyBJZiB0aGUgcGF0aCBoYXMgbm8gcGFyZW50IGRpcmVjdG9yeSwganVzdCB0ZXN0IGl0XG4gICAgaWYgKCFzbGljZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gY2FjaGVbcGF0aF0gPSB0aGlzLl90ZXN0T25lKHBhdGgsIGNoZWNrVW5pZ25vcmVkKVxuICAgIH1cblxuICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuX3QoXG4gICAgICBzbGljZXMuam9pbihTTEFTSCkgKyBTTEFTSCxcbiAgICAgIGNhY2hlLFxuICAgICAgY2hlY2tVbmlnbm9yZWQsXG4gICAgICBzbGljZXNcbiAgICApXG5cbiAgICAvLyBJZiB0aGUgcGF0aCBjb250YWlucyBhIHBhcmVudCBkaXJlY3RvcnksIGNoZWNrIHRoZSBwYXJlbnQgZmlyc3RcbiAgICByZXR1cm4gY2FjaGVbcGF0aF0gPSBwYXJlbnQuaWdub3JlZFxuICAgICAgLy8gPiBJdCBpcyBub3QgcG9zc2libGUgdG8gcmUtaW5jbHVkZSBhIGZpbGUgaWYgYSBwYXJlbnQgZGlyZWN0b3J5IG9mXG4gICAgICAvLyA+ICAgdGhhdCBmaWxlIGlzIGV4Y2x1ZGVkLlxuICAgICAgPyBwYXJlbnRcbiAgICAgIDogdGhpcy5fdGVzdE9uZShwYXRoLCBjaGVja1VuaWdub3JlZClcbiAgfVxuXG4gIGlnbm9yZXMgKHBhdGgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGVzdChwYXRoLCB0aGlzLl9pZ25vcmVDYWNoZSwgZmFsc2UpLmlnbm9yZWRcbiAgfVxuXG4gIGNyZWF0ZUZpbHRlciAoKSB7XG4gICAgcmV0dXJuIHBhdGggPT4gIXRoaXMuaWdub3JlcyhwYXRoKVxuICB9XG5cbiAgZmlsdGVyIChwYXRocykge1xuICAgIHJldHVybiBtYWtlQXJyYXkocGF0aHMpLmZpbHRlcih0aGlzLmNyZWF0ZUZpbHRlcigpKVxuICB9XG5cbiAgLy8gQHJldHVybnMge1Rlc3RSZXN1bHR9XG4gIHRlc3QgKHBhdGgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGVzdChwYXRoLCB0aGlzLl90ZXN0Q2FjaGUsIHRydWUpXG4gIH1cbn1cblxuY29uc3QgZmFjdG9yeSA9IG9wdGlvbnMgPT4gbmV3IElnbm9yZShvcHRpb25zKVxuXG5jb25zdCBpc1BhdGhWYWxpZCA9IHBhdGggPT5cbiAgY2hlY2tQYXRoKHBhdGggJiYgY2hlY2tQYXRoLmNvbnZlcnQocGF0aCksIHBhdGgsIFJFVFVSTl9GQUxTRSlcblxuZmFjdG9yeS5pc1BhdGhWYWxpZCA9IGlzUGF0aFZhbGlkXG5cbi8vIEZpeGVzIHR5cGVzY3JpcHRcbmZhY3RvcnkuZGVmYXVsdCA9IGZhY3RvcnlcblxubW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5XG5cbi8vIFdpbmRvd3Ncbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmIChcbiAgLy8gRGV0ZWN0IGBwcm9jZXNzYCBzbyB0aGF0IGl0IGNhbiBydW4gaW4gYnJvd3NlcnMuXG4gIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJ1xuICAmJiAoXG4gICAgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuSUdOT1JFX1RFU1RfV0lOMzJcbiAgICB8fCBwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInXG4gIClcbikge1xuICAvKiBlc2xpbnQgbm8tY29udHJvbC1yZWdleDogXCJvZmZcIiAqL1xuICBjb25zdCBtYWtlUG9zaXggPSBzdHIgPT4gL15cXFxcXFxcXFxcP1xcXFwvLnRlc3Qoc3RyKVxuICB8fCAvW1wiPD58XFx1MDAwMC1cXHUwMDFGXSsvdS50ZXN0KHN0cilcbiAgICA/IHN0clxuICAgIDogc3RyLnJlcGxhY2UoL1xcXFwvZywgJy8nKVxuXG4gIGNoZWNrUGF0aC5jb252ZXJ0ID0gbWFrZVBvc2l4XG5cbiAgLy8gJ0M6XFxcXGZvbycgICAgIDwtICdDOlxcXFxmb28nIGhhcyBiZWVuIGNvbnZlcnRlZCB0byAnQzovJ1xuICAvLyAnZDpcXFxcZm9vJ1xuICBjb25zdCBSRUdJWF9JU19XSU5ET1dTX1BBVEhfQUJTT0xVVEUgPSAvXlthLXpdOlxcLy9pXG4gIGNoZWNrUGF0aC5pc05vdFJlbGF0aXZlID0gcGF0aCA9PlxuICAgIFJFR0lYX0lTX1dJTkRPV1NfUEFUSF9BQlNPTFVURS50ZXN0KHBhdGgpXG4gICAgfHwgaXNOb3RSZWxhdGl2ZShwYXRoKVxufVxuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIGV4cG9ydHMuZGVmYXVsdHMgPSB7XG4gICAgXCIwLjFcIjoge1xuICAgICAgZXhwbGljaXRDaGFya2V5OiBmYWxzZSxcbiAgICAgIHRyaW06IHRydWUsXG4gICAgICBub3JtYWxpemU6IHRydWUsXG4gICAgICBub3JtYWxpemVUYWdzOiBmYWxzZSxcbiAgICAgIGF0dHJrZXk6IFwiQFwiLFxuICAgICAgY2hhcmtleTogXCIjXCIsXG4gICAgICBleHBsaWNpdEFycmF5OiBmYWxzZSxcbiAgICAgIGlnbm9yZUF0dHJzOiBmYWxzZSxcbiAgICAgIG1lcmdlQXR0cnM6IGZhbHNlLFxuICAgICAgZXhwbGljaXRSb290OiBmYWxzZSxcbiAgICAgIHZhbGlkYXRvcjogbnVsbCxcbiAgICAgIHhtbG5zOiBmYWxzZSxcbiAgICAgIGV4cGxpY2l0Q2hpbGRyZW46IGZhbHNlLFxuICAgICAgY2hpbGRrZXk6ICdAQCcsXG4gICAgICBjaGFyc0FzQ2hpbGRyZW46IGZhbHNlLFxuICAgICAgaW5jbHVkZVdoaXRlQ2hhcnM6IGZhbHNlLFxuICAgICAgYXN5bmM6IGZhbHNlLFxuICAgICAgc3RyaWN0OiB0cnVlLFxuICAgICAgYXR0ck5hbWVQcm9jZXNzb3JzOiBudWxsLFxuICAgICAgYXR0clZhbHVlUHJvY2Vzc29yczogbnVsbCxcbiAgICAgIHRhZ05hbWVQcm9jZXNzb3JzOiBudWxsLFxuICAgICAgdmFsdWVQcm9jZXNzb3JzOiBudWxsLFxuICAgICAgZW1wdHlUYWc6ICcnXG4gICAgfSxcbiAgICBcIjAuMlwiOiB7XG4gICAgICBleHBsaWNpdENoYXJrZXk6IGZhbHNlLFxuICAgICAgdHJpbTogZmFsc2UsXG4gICAgICBub3JtYWxpemU6IGZhbHNlLFxuICAgICAgbm9ybWFsaXplVGFnczogZmFsc2UsXG4gICAgICBhdHRya2V5OiBcIiRcIixcbiAgICAgIGNoYXJrZXk6IFwiX1wiLFxuICAgICAgZXhwbGljaXRBcnJheTogdHJ1ZSxcbiAgICAgIGlnbm9yZUF0dHJzOiBmYWxzZSxcbiAgICAgIG1lcmdlQXR0cnM6IGZhbHNlLFxuICAgICAgZXhwbGljaXRSb290OiB0cnVlLFxuICAgICAgdmFsaWRhdG9yOiBudWxsLFxuICAgICAgeG1sbnM6IGZhbHNlLFxuICAgICAgZXhwbGljaXRDaGlsZHJlbjogZmFsc2UsXG4gICAgICBwcmVzZXJ2ZUNoaWxkcmVuT3JkZXI6IGZhbHNlLFxuICAgICAgY2hpbGRrZXk6ICckJCcsXG4gICAgICBjaGFyc0FzQ2hpbGRyZW46IGZhbHNlLFxuICAgICAgaW5jbHVkZVdoaXRlQ2hhcnM6IGZhbHNlLFxuICAgICAgYXN5bmM6IGZhbHNlLFxuICAgICAgc3RyaWN0OiB0cnVlLFxuICAgICAgYXR0ck5hbWVQcm9jZXNzb3JzOiBudWxsLFxuICAgICAgYXR0clZhbHVlUHJvY2Vzc29yczogbnVsbCxcbiAgICAgIHRhZ05hbWVQcm9jZXNzb3JzOiBudWxsLFxuICAgICAgdmFsdWVQcm9jZXNzb3JzOiBudWxsLFxuICAgICAgcm9vdE5hbWU6ICdyb290JyxcbiAgICAgIHhtbGRlYzoge1xuICAgICAgICAndmVyc2lvbic6ICcxLjAnLFxuICAgICAgICAnZW5jb2RpbmcnOiAnVVRGLTgnLFxuICAgICAgICAnc3RhbmRhbG9uZSc6IHRydWVcbiAgICAgIH0sXG4gICAgICBkb2N0eXBlOiBudWxsLFxuICAgICAgcmVuZGVyT3B0czoge1xuICAgICAgICAncHJldHR5JzogdHJ1ZSxcbiAgICAgICAgJ2luZGVudCc6ICcgICcsXG4gICAgICAgICduZXdsaW5lJzogJ1xcbidcbiAgICAgIH0sXG4gICAgICBoZWFkbGVzczogZmFsc2UsXG4gICAgICBjaHVua1NpemU6IDEwMDAwLFxuICAgICAgZW1wdHlUYWc6ICcnLFxuICAgICAgY2RhdGE6IGZhbHNlXG4gICAgfVxuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBhc3NpZ24sIGdldFZhbHVlLCBpc0FycmF5LCBpc0VtcHR5LCBpc0Z1bmN0aW9uLCBpc09iamVjdCwgaXNQbGFpbk9iamVjdCxcbiAgICBzbGljZSA9IFtdLnNsaWNlLFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBhc3NpZ24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwga2V5LCBsZW4sIHNvdXJjZSwgc291cmNlcywgdGFyZ2V0O1xuICAgIHRhcmdldCA9IGFyZ3VtZW50c1swXSwgc291cmNlcyA9IDIgPD0gYXJndW1lbnRzLmxlbmd0aCA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSA6IFtdO1xuICAgIGlmIChpc0Z1bmN0aW9uKE9iamVjdC5hc3NpZ24pKSB7XG4gICAgICBPYmplY3QuYXNzaWduLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHNvdXJjZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgc291cmNlID0gc291cmNlc1tpXTtcbiAgICAgICAgaWYgKHNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgICAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICBpc0Z1bmN0aW9uID0gZnVuY3Rpb24odmFsKSB7XG4gICAgcmV0dXJuICEhdmFsICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuICB9O1xuXG4gIGlzT2JqZWN0ID0gZnVuY3Rpb24odmFsKSB7XG4gICAgdmFyIHJlZjtcbiAgICByZXR1cm4gISF2YWwgJiYgKChyZWYgPSB0eXBlb2YgdmFsKSA9PT0gJ2Z1bmN0aW9uJyB8fCByZWYgPT09ICdvYmplY3QnKTtcbiAgfTtcblxuICBpc0FycmF5ID0gZnVuY3Rpb24odmFsKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oQXJyYXkuaXNBcnJheSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICB9XG4gIH07XG5cbiAgaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHZhciBrZXk7XG4gICAgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmV0dXJuICF2YWwubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGtleSBpbiB2YWwpIHtcbiAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwodmFsLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xuXG4gIGlzUGxhaW5PYmplY3QgPSBmdW5jdGlvbih2YWwpIHtcbiAgICB2YXIgY3RvciwgcHJvdG87XG4gICAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgKHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCkpICYmIChjdG9yID0gcHJvdG8uY29uc3RydWN0b3IpICYmICh0eXBlb2YgY3RvciA9PT0gJ2Z1bmN0aW9uJykgJiYgKGN0b3IgaW5zdGFuY2VvZiBjdG9yKSAmJiAoRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoY3RvcikgPT09IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKE9iamVjdCkpO1xuICB9O1xuXG4gIGdldFZhbHVlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24ob2JqLnZhbHVlT2YpKSB7XG4gICAgICByZXR1cm4gb2JqLnZhbHVlT2YoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHMuYXNzaWduID0gYXNzaWduO1xuXG4gIG1vZHVsZS5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG4gIG1vZHVsZS5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbiAgbW9kdWxlLmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbiAgbW9kdWxlLmV4cG9ydHMuaXNFbXB0eSA9IGlzRW1wdHk7XG5cbiAgbW9kdWxlLmV4cG9ydHMuaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG5cbiAgbW9kdWxlLmV4cG9ydHMuZ2V0VmFsdWUgPSBnZXRWYWx1ZTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MRE9NSW1wbGVtZW50YXRpb247XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxET01JbXBsZW1lbnRhdGlvbiA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBYTUxET01JbXBsZW1lbnRhdGlvbigpIHt9XG5cbiAgICBYTUxET01JbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUuaGFzRmVhdHVyZSA9IGZ1bmN0aW9uKGZlYXR1cmUsIHZlcnNpb24pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICBYTUxET01JbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUuY3JlYXRlRG9jdW1lbnRUeXBlID0gZnVuY3Rpb24ocXVhbGlmaWVkTmFtZSwgcHVibGljSWQsIHN5c3RlbUlkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgICB9O1xuXG4gICAgWE1MRE9NSW1wbGVtZW50YXRpb24ucHJvdG90eXBlLmNyZWF0ZURvY3VtZW50ID0gZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBxdWFsaWZpZWROYW1lLCBkb2N0eXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgICB9O1xuXG4gICAgWE1MRE9NSW1wbGVtZW50YXRpb24ucHJvdG90eXBlLmNyZWF0ZUhUTUxEb2N1bWVudCA9IGZ1bmN0aW9uKHRpdGxlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgICB9O1xuXG4gICAgWE1MRE9NSW1wbGVtZW50YXRpb24ucHJvdG90eXBlLmdldEZlYXR1cmUgPSBmdW5jdGlvbihmZWF0dXJlLCB2ZXJzaW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTERPTUltcGxlbWVudGF0aW9uO1xuXG4gIH0pKCk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTERPTUVycm9ySGFuZGxlcjtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERPTUVycm9ySGFuZGxlciA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBYTUxET01FcnJvckhhbmRsZXIoKSB7fVxuXG4gICAgWE1MRE9NRXJyb3JIYW5kbGVyLnByb3RvdHlwZS5oYW5kbGVFcnJvciA9IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRE9NRXJyb3JIYW5kbGVyO1xuXG4gIH0pKCk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTERPTVN0cmluZ0xpc3Q7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxET01TdHJpbmdMaXN0ID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFhNTERPTVN0cmluZ0xpc3QoYXJyKSB7XG4gICAgICB0aGlzLmFyciA9IGFyciB8fCBbXTtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRE9NU3RyaW5nTGlzdC5wcm90b3R5cGUsICdsZW5ndGgnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcnIubGVuZ3RoO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgWE1MRE9NU3RyaW5nTGlzdC5wcm90b3R5cGUuaXRlbSA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICByZXR1cm4gdGhpcy5hcnJbaW5kZXhdIHx8IG51bGw7XG4gICAgfTtcblxuICAgIFhNTERPTVN0cmluZ0xpc3QucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgICByZXR1cm4gdGhpcy5hcnIuaW5kZXhPZihzdHIpICE9PSAtMTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTERPTVN0cmluZ0xpc3Q7XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MRE9NQ29uZmlndXJhdGlvbiwgWE1MRE9NRXJyb3JIYW5kbGVyLCBYTUxET01TdHJpbmdMaXN0O1xuXG4gIFhNTERPTUVycm9ySGFuZGxlciA9IHJlcXVpcmUoJy4vWE1MRE9NRXJyb3JIYW5kbGVyJyk7XG5cbiAgWE1MRE9NU3RyaW5nTGlzdCA9IHJlcXVpcmUoJy4vWE1MRE9NU3RyaW5nTGlzdCcpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRE9NQ29uZmlndXJhdGlvbiA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBYTUxET01Db25maWd1cmF0aW9uKCkge1xuICAgICAgdmFyIGNsb25lZFNlbGY7XG4gICAgICB0aGlzLmRlZmF1bHRQYXJhbXMgPSB7XG4gICAgICAgIFwiY2Fub25pY2FsLWZvcm1cIjogZmFsc2UsXG4gICAgICAgIFwiY2RhdGEtc2VjdGlvbnNcIjogZmFsc2UsXG4gICAgICAgIFwiY29tbWVudHNcIjogZmFsc2UsXG4gICAgICAgIFwiZGF0YXR5cGUtbm9ybWFsaXphdGlvblwiOiBmYWxzZSxcbiAgICAgICAgXCJlbGVtZW50LWNvbnRlbnQtd2hpdGVzcGFjZVwiOiB0cnVlLFxuICAgICAgICBcImVudGl0aWVzXCI6IHRydWUsXG4gICAgICAgIFwiZXJyb3ItaGFuZGxlclwiOiBuZXcgWE1MRE9NRXJyb3JIYW5kbGVyKCksXG4gICAgICAgIFwiaW5mb3NldFwiOiB0cnVlLFxuICAgICAgICBcInZhbGlkYXRlLWlmLXNjaGVtYVwiOiBmYWxzZSxcbiAgICAgICAgXCJuYW1lc3BhY2VzXCI6IHRydWUsXG4gICAgICAgIFwibmFtZXNwYWNlLWRlY2xhcmF0aW9uc1wiOiB0cnVlLFxuICAgICAgICBcIm5vcm1hbGl6ZS1jaGFyYWN0ZXJzXCI6IGZhbHNlLFxuICAgICAgICBcInNjaGVtYS1sb2NhdGlvblwiOiAnJyxcbiAgICAgICAgXCJzY2hlbWEtdHlwZVwiOiAnJyxcbiAgICAgICAgXCJzcGxpdC1jZGF0YS1zZWN0aW9uc1wiOiB0cnVlLFxuICAgICAgICBcInZhbGlkYXRlXCI6IGZhbHNlLFxuICAgICAgICBcIndlbGwtZm9ybWVkXCI6IHRydWVcbiAgICAgIH07XG4gICAgICB0aGlzLnBhcmFtcyA9IGNsb25lZFNlbGYgPSBPYmplY3QuY3JlYXRlKHRoaXMuZGVmYXVsdFBhcmFtcyk7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERPTUNvbmZpZ3VyYXRpb24ucHJvdG90eXBlLCAncGFyYW1ldGVyTmFtZXMnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IFhNTERPTVN0cmluZ0xpc3QoT2JqZWN0LmtleXModGhpcy5kZWZhdWx0UGFyYW1zKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxET01Db25maWd1cmF0aW9uLnByb3RvdHlwZS5nZXRQYXJhbWV0ZXIgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICBpZiAodGhpcy5wYXJhbXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyYW1zW25hbWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTERPTUNvbmZpZ3VyYXRpb24ucHJvdG90eXBlLmNhblNldFBhcmFtZXRlciA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgWE1MRE9NQ29uZmlndXJhdGlvbi5wcm90b3R5cGUuc2V0UGFyYW1ldGVyID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmFtc1tuYW1lXSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlbGV0ZSB0aGlzLnBhcmFtc1tuYW1lXTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTERPTUNvbmZpZ3VyYXRpb247XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBFbGVtZW50OiAxLFxuICAgIEF0dHJpYnV0ZTogMixcbiAgICBUZXh0OiAzLFxuICAgIENEYXRhOiA0LFxuICAgIEVudGl0eVJlZmVyZW5jZTogNSxcbiAgICBFbnRpdHlEZWNsYXJhdGlvbjogNixcbiAgICBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb246IDcsXG4gICAgQ29tbWVudDogOCxcbiAgICBEb2N1bWVudDogOSxcbiAgICBEb2NUeXBlOiAxMCxcbiAgICBEb2N1bWVudEZyYWdtZW50OiAxMSxcbiAgICBOb3RhdGlvbkRlY2xhcmF0aW9uOiAxMixcbiAgICBEZWNsYXJhdGlvbjogMjAxLFxuICAgIFJhdzogMjAyLFxuICAgIEF0dHJpYnV0ZURlY2xhcmF0aW9uOiAyMDMsXG4gICAgRWxlbWVudERlY2xhcmF0aW9uOiAyMDQsXG4gICAgRHVtbXk6IDIwNVxuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MQXR0cmlidXRlLCBYTUxOb2RlO1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTEF0dHJpYnV0ZSA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBYTUxBdHRyaWJ1dGUocGFyZW50LCBuYW1lLCB2YWx1ZSkge1xuICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdGhpcy5wYXJlbnQub3B0aW9ucztcbiAgICAgICAgdGhpcy5zdHJpbmdpZnkgPSB0aGlzLnBhcmVudC5zdHJpbmdpZnk7XG4gICAgICB9XG4gICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgYXR0cmlidXRlIG5hbWUuIFwiICsgdGhpcy5kZWJ1Z0luZm8obmFtZSkpO1xuICAgICAgfVxuICAgICAgdGhpcy5uYW1lID0gdGhpcy5zdHJpbmdpZnkubmFtZShuYW1lKTtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5hdHRWYWx1ZSh2YWx1ZSk7XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5BdHRyaWJ1dGU7XG4gICAgICB0aGlzLmlzSWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuc2NoZW1hVHlwZUluZm8gPSBudWxsO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxBdHRyaWJ1dGUucHJvdG90eXBlLCAnbm9kZVR5cGUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUsICdvd25lckVsZW1lbnQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MQXR0cmlidXRlLnByb3RvdHlwZSwgJ3RleHRDb250ZW50Jywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA9IHZhbHVlIHx8ICcnO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUsICduYW1lc3BhY2VVUkknLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MQXR0cmlidXRlLnByb3RvdHlwZSwgJ3ByZWZpeCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxBdHRyaWJ1dGUucHJvdG90eXBlLCAnbG9jYWxOYW1lJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxBdHRyaWJ1dGUucHJvdG90eXBlLCAnc3BlY2lmaWVkJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxBdHRyaWJ1dGUucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgWE1MQXR0cmlidXRlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLmF0dHJpYnV0ZSh0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH07XG5cbiAgICBYTUxBdHRyaWJ1dGUucHJvdG90eXBlLmRlYnVnSW5mbyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIG5hbWUgPSBuYW1lIHx8IHRoaXMubmFtZTtcbiAgICAgIGlmIChuYW1lID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFwicGFyZW50OiA8XCIgKyB0aGlzLnBhcmVudC5uYW1lICsgXCI+XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJhdHRyaWJ1dGU6IHtcIiArIG5hbWUgKyBcIn0sIHBhcmVudDogPFwiICsgdGhpcy5wYXJlbnQubmFtZSArIFwiPlwiO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxBdHRyaWJ1dGUucHJvdG90eXBlLmlzRXF1YWxOb2RlID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKG5vZGUubmFtZXNwYWNlVVJJICE9PSB0aGlzLm5hbWVzcGFjZVVSSSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5wcmVmaXggIT09IHRoaXMucHJlZml4KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLmxvY2FsTmFtZSAhPT0gdGhpcy5sb2NhbE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUudmFsdWUgIT09IHRoaXMudmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxBdHRyaWJ1dGU7XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MTmFtZWROb2RlTWFwO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MTmFtZWROb2RlTWFwID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFhNTE5hbWVkTm9kZU1hcChub2Rlcykge1xuICAgICAgdGhpcy5ub2RlcyA9IG5vZGVzO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxOYW1lZE5vZGVNYXAucHJvdG90eXBlLCAnbGVuZ3RoJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMubm9kZXMpLmxlbmd0aCB8fCAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgWE1MTmFtZWROb2RlTWFwLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZXMgPSBudWxsO1xuICAgIH07XG5cbiAgICBYTUxOYW1lZE5vZGVNYXAucHJvdG90eXBlLmdldE5hbWVkSXRlbSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vZGVzW25hbWVdO1xuICAgIH07XG5cbiAgICBYTUxOYW1lZE5vZGVNYXAucHJvdG90eXBlLnNldE5hbWVkSXRlbSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHZhciBvbGROb2RlO1xuICAgICAgb2xkTm9kZSA9IHRoaXMubm9kZXNbbm9kZS5ub2RlTmFtZV07XG4gICAgICB0aGlzLm5vZGVzW25vZGUubm9kZU5hbWVdID0gbm9kZTtcbiAgICAgIHJldHVybiBvbGROb2RlIHx8IG51bGw7XG4gICAgfTtcblxuICAgIFhNTE5hbWVkTm9kZU1hcC5wcm90b3R5cGUucmVtb3ZlTmFtZWRJdGVtID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgdmFyIG9sZE5vZGU7XG4gICAgICBvbGROb2RlID0gdGhpcy5ub2Rlc1tuYW1lXTtcbiAgICAgIGRlbGV0ZSB0aGlzLm5vZGVzW25hbWVdO1xuICAgICAgcmV0dXJuIG9sZE5vZGUgfHwgbnVsbDtcbiAgICB9O1xuXG4gICAgWE1MTmFtZWROb2RlTWFwLnByb3RvdHlwZS5pdGVtID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vZGVzW09iamVjdC5rZXlzKHRoaXMubm9kZXMpW2luZGV4XV0gfHwgbnVsbDtcbiAgICB9O1xuXG4gICAgWE1MTmFtZWROb2RlTWFwLnByb3RvdHlwZS5nZXROYW1lZEl0ZW1OUyA9IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgICB9O1xuXG4gICAgWE1MTmFtZWROb2RlTWFwLnByb3RvdHlwZS5zZXROYW1lZEl0ZW1OUyA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH07XG5cbiAgICBYTUxOYW1lZE5vZGVNYXAucHJvdG90eXBlLnJlbW92ZU5hbWVkSXRlbU5TID0gZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MTmFtZWROb2RlTWFwO1xuXG4gIH0pKCk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxBdHRyaWJ1dGUsIFhNTEVsZW1lbnQsIFhNTE5hbWVkTm9kZU1hcCwgWE1MTm9kZSwgZ2V0VmFsdWUsIGlzRnVuY3Rpb24sIGlzT2JqZWN0LCByZWYsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICByZWYgPSByZXF1aXJlKCcuL1V0aWxpdHknKSwgaXNPYmplY3QgPSByZWYuaXNPYmplY3QsIGlzRnVuY3Rpb24gPSByZWYuaXNGdW5jdGlvbiwgZ2V0VmFsdWUgPSByZWYuZ2V0VmFsdWU7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIFhNTEF0dHJpYnV0ZSA9IHJlcXVpcmUoJy4vWE1MQXR0cmlidXRlJyk7XG5cbiAgWE1MTmFtZWROb2RlTWFwID0gcmVxdWlyZSgnLi9YTUxOYW1lZE5vZGVNYXAnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTEVsZW1lbnQgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxFbGVtZW50LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTEVsZW1lbnQocGFyZW50LCBuYW1lLCBhdHRyaWJ1dGVzKSB7XG4gICAgICB2YXIgY2hpbGQsIGosIGxlbiwgcmVmMTtcbiAgICAgIFhNTEVsZW1lbnQuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIGlmIChuYW1lID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBlbGVtZW50IG5hbWUuIFwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgICB0aGlzLm5hbWUgPSB0aGlzLnN0cmluZ2lmeS5uYW1lKG5hbWUpO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuRWxlbWVudDtcbiAgICAgIHRoaXMuYXR0cmlicyA9IHt9O1xuICAgICAgdGhpcy5zY2hlbWFUeXBlSW5mbyA9IG51bGw7XG4gICAgICBpZiAoYXR0cmlidXRlcyAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlKGF0dHJpYnV0ZXMpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmVudC50eXBlID09PSBOb2RlVHlwZS5Eb2N1bWVudCkge1xuICAgICAgICB0aGlzLmlzUm9vdCA9IHRydWU7XG4gICAgICAgIHRoaXMuZG9jdW1lbnRPYmplY3QgPSBwYXJlbnQ7XG4gICAgICAgIHBhcmVudC5yb290T2JqZWN0ID0gdGhpcztcbiAgICAgICAgaWYgKHBhcmVudC5jaGlsZHJlbikge1xuICAgICAgICAgIHJlZjEgPSBwYXJlbnQuY2hpbGRyZW47XG4gICAgICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmMS5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgICAgY2hpbGQgPSByZWYxW2pdO1xuICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IE5vZGVUeXBlLkRvY1R5cGUpIHtcbiAgICAgICAgICAgICAgY2hpbGQubmFtZSA9IHRoaXMubmFtZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTEVsZW1lbnQucHJvdG90eXBlLCAndGFnTmFtZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRWxlbWVudC5wcm90b3R5cGUsICduYW1lc3BhY2VVUkknLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRWxlbWVudC5wcm90b3R5cGUsICdwcmVmaXgnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRWxlbWVudC5wcm90b3R5cGUsICdsb2NhbE5hbWUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTEVsZW1lbnQucHJvdG90eXBlLCAnaWQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRWxlbWVudC5wcm90b3R5cGUsICdjbGFzc05hbWUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRWxlbWVudC5wcm90b3R5cGUsICdjbGFzc0xpc3QnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRWxlbWVudC5wcm90b3R5cGUsICdhdHRyaWJ1dGVzJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmF0dHJpYnV0ZU1hcCB8fCAhdGhpcy5hdHRyaWJ1dGVNYXAubm9kZXMpIHtcbiAgICAgICAgICB0aGlzLmF0dHJpYnV0ZU1hcCA9IG5ldyBYTUxOYW1lZE5vZGVNYXAodGhpcy5hdHRyaWJzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVNYXA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGF0dCwgYXR0TmFtZSwgY2xvbmVkU2VsZiwgcmVmMTtcbiAgICAgIGNsb25lZFNlbGYgPSBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgICAgaWYgKGNsb25lZFNlbGYuaXNSb290KSB7XG4gICAgICAgIGNsb25lZFNlbGYuZG9jdW1lbnRPYmplY3QgPSBudWxsO1xuICAgICAgfVxuICAgICAgY2xvbmVkU2VsZi5hdHRyaWJzID0ge307XG4gICAgICByZWYxID0gdGhpcy5hdHRyaWJzO1xuICAgICAgZm9yIChhdHROYW1lIGluIHJlZjEpIHtcbiAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwocmVmMSwgYXR0TmFtZSkpIGNvbnRpbnVlO1xuICAgICAgICBhdHQgPSByZWYxW2F0dE5hbWVdO1xuICAgICAgICBjbG9uZWRTZWxmLmF0dHJpYnNbYXR0TmFtZV0gPSBhdHQuY2xvbmUoKTtcbiAgICAgIH1cbiAgICAgIGNsb25lZFNlbGYuY2hpbGRyZW4gPSBbXTtcbiAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICB2YXIgY2xvbmVkQ2hpbGQ7XG4gICAgICAgIGNsb25lZENoaWxkID0gY2hpbGQuY2xvbmUoKTtcbiAgICAgICAgY2xvbmVkQ2hpbGQucGFyZW50ID0gY2xvbmVkU2VsZjtcbiAgICAgICAgcmV0dXJuIGNsb25lZFNlbGYuY2hpbGRyZW4ucHVzaChjbG9uZWRDaGlsZCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjbG9uZWRTZWxmO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5hdHRyaWJ1dGUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIGF0dE5hbWUsIGF0dFZhbHVlO1xuICAgICAgaWYgKG5hbWUgIT0gbnVsbCkge1xuICAgICAgICBuYW1lID0gZ2V0VmFsdWUobmFtZSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3QobmFtZSkpIHtcbiAgICAgICAgZm9yIChhdHROYW1lIGluIG5hbWUpIHtcbiAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChuYW1lLCBhdHROYW1lKSkgY29udGludWU7XG4gICAgICAgICAgYXR0VmFsdWUgPSBuYW1lW2F0dE5hbWVdO1xuICAgICAgICAgIHRoaXMuYXR0cmlidXRlKGF0dE5hbWUsIGF0dFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS5hcHBseSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMua2VlcE51bGxBdHRyaWJ1dGVzICYmICh2YWx1ZSA9PSBudWxsKSkge1xuICAgICAgICAgIHRoaXMuYXR0cmlic1tuYW1lXSA9IG5ldyBYTUxBdHRyaWJ1dGUodGhpcywgbmFtZSwgXCJcIik7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuYXR0cmlic1tuYW1lXSA9IG5ldyBYTUxBdHRyaWJ1dGUodGhpcywgbmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgdmFyIGF0dE5hbWUsIGosIGxlbjtcbiAgICAgIGlmIChuYW1lID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBhdHRyaWJ1dGUgbmFtZS4gXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICAgIG5hbWUgPSBnZXRWYWx1ZShuYW1lKTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG5hbWUpKSB7XG4gICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IG5hbWUubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICBhdHROYW1lID0gbmFtZVtqXTtcbiAgICAgICAgICBkZWxldGUgdGhpcy5hdHRyaWJzW2F0dE5hbWVdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWxldGUgdGhpcy5hdHRyaWJzW25hbWVdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuZWxlbWVudCh0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5hdHQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRWxlbWVudC5wcm90b3R5cGUuYSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICBpZiAodGhpcy5hdHRyaWJzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dHJpYnNbbmFtZV0udmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MRWxlbWVudC5wcm90b3R5cGUuc2V0QXR0cmlidXRlID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRWxlbWVudC5wcm90b3R5cGUuZ2V0QXR0cmlidXRlTm9kZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIGlmICh0aGlzLmF0dHJpYnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0cmlic1tuYW1lXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGVOb2RlID0gZnVuY3Rpb24obmV3QXR0cikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGVOb2RlID0gZnVuY3Rpb24ob2xkQXR0cikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRWxlbWVudC5wcm90b3R5cGUuZ2V0QXR0cmlidXRlTlMgPSBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGVOUyA9IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgcXVhbGlmaWVkTmFtZSwgdmFsdWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlTlMgPSBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVOb2RlTlMgPSBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGVOb2RlTlMgPSBmdW5jdGlvbihuZXdBdHRyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lTlMgPSBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5oYXNBdHRyaWJ1dGUgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRyaWJzLmhhc093blByb3BlcnR5KG5hbWUpO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5oYXNBdHRyaWJ1dGVOUyA9IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLnNldElkQXR0cmlidXRlID0gZnVuY3Rpb24obmFtZSwgaXNJZCkge1xuICAgICAgaWYgKHRoaXMuYXR0cmlicy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRyaWJzW25hbWVdLmlzSWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaXNJZDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MRWxlbWVudC5wcm90b3R5cGUuc2V0SWRBdHRyaWJ1dGVOUyA9IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lLCBpc0lkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLnNldElkQXR0cmlidXRlTm9kZSA9IGZ1bmN0aW9uKGlkQXR0ciwgaXNJZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGZ1bmN0aW9uKHRhZ25hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRWxlbWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWVOUyA9IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBmdW5jdGlvbihjbGFzc05hbWVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLmlzRXF1YWxOb2RlID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgdmFyIGksIGosIHJlZjE7XG4gICAgICBpZiAoIVhNTEVsZW1lbnQuX19zdXBlcl9fLmlzRXF1YWxOb2RlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykuaXNFcXVhbE5vZGUobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUubmFtZXNwYWNlVVJJICE9PSB0aGlzLm5hbWVzcGFjZVVSSSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5wcmVmaXggIT09IHRoaXMucHJlZml4KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLmxvY2FsTmFtZSAhPT0gdGhpcy5sb2NhbE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUuYXR0cmlicy5sZW5ndGggIT09IHRoaXMuYXR0cmlicy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gaiA9IDAsIHJlZjEgPSB0aGlzLmF0dHJpYnMubGVuZ3RoIC0gMTsgMCA8PSByZWYxID8gaiA8PSByZWYxIDogaiA+PSByZWYxOyBpID0gMCA8PSByZWYxID8gKytqIDogLS1qKSB7XG4gICAgICAgIGlmICghdGhpcy5hdHRyaWJzW2ldLmlzRXF1YWxOb2RlKG5vZGUuYXR0cmlic1tpXSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRWxlbWVudDtcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MQ2hhcmFjdGVyRGF0YSwgWE1MTm9kZSxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTENoYXJhY3RlckRhdGEgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxDaGFyYWN0ZXJEYXRhLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTENoYXJhY3RlckRhdGEocGFyZW50KSB7XG4gICAgICBYTUxDaGFyYWN0ZXJEYXRhLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICB0aGlzLnZhbHVlID0gJyc7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLCAnZGF0YScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgPSB2YWx1ZSB8fCAnJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxDaGFyYWN0ZXJEYXRhLnByb3RvdHlwZSwgJ2xlbmd0aCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxDaGFyYWN0ZXJEYXRhLnByb3RvdHlwZSwgJ3RleHRDb250ZW50Jywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA9IHZhbHVlIHx8ICcnO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgWE1MQ2hhcmFjdGVyRGF0YS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH07XG5cbiAgICBYTUxDaGFyYWN0ZXJEYXRhLnByb3RvdHlwZS5zdWJzdHJpbmdEYXRhID0gZnVuY3Rpb24ob2Zmc2V0LCBjb3VudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxDaGFyYWN0ZXJEYXRhLnByb3RvdHlwZS5hcHBlbmREYXRhID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLmluc2VydERhdGEgPSBmdW5jdGlvbihvZmZzZXQsIGFyZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxDaGFyYWN0ZXJEYXRhLnByb3RvdHlwZS5kZWxldGVEYXRhID0gZnVuY3Rpb24ob2Zmc2V0LCBjb3VudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxDaGFyYWN0ZXJEYXRhLnByb3RvdHlwZS5yZXBsYWNlRGF0YSA9IGZ1bmN0aW9uKG9mZnNldCwgY291bnQsIGFyZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxDaGFyYWN0ZXJEYXRhLnByb3RvdHlwZS5pc0VxdWFsTm9kZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmICghWE1MQ2hhcmFjdGVyRGF0YS5fX3N1cGVyX18uaXNFcXVhbE5vZGUuYXBwbHkodGhpcywgYXJndW1lbnRzKS5pc0VxdWFsTm9kZShub2RlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5kYXRhICE9PSB0aGlzLmRhdGEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxDaGFyYWN0ZXJEYXRhO1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MQ0RhdGEsIFhNTENoYXJhY3RlckRhdGEsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBYTUxDaGFyYWN0ZXJEYXRhID0gcmVxdWlyZSgnLi9YTUxDaGFyYWN0ZXJEYXRhJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxDRGF0YSA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTENEYXRhLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTENEYXRhKHBhcmVudCwgdGV4dCkge1xuICAgICAgWE1MQ0RhdGEuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIGlmICh0ZXh0ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBDREFUQSB0ZXh0LiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgdGhpcy5uYW1lID0gXCIjY2RhdGEtc2VjdGlvblwiO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuQ0RhdGE7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5zdHJpbmdpZnkuY2RhdGEodGV4dCk7XG4gICAgfVxuXG4gICAgWE1MQ0RhdGEucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgWE1MQ0RhdGEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuY2RhdGEodGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTENEYXRhO1xuXG4gIH0pKFhNTENoYXJhY3RlckRhdGEpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MQ2hhcmFjdGVyRGF0YSwgWE1MQ29tbWVudCxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIFhNTENoYXJhY3RlckRhdGEgPSByZXF1aXJlKCcuL1hNTENoYXJhY3RlckRhdGEnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTENvbW1lbnQgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxDb21tZW50LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTENvbW1lbnQocGFyZW50LCB0ZXh0KSB7XG4gICAgICBYTUxDb21tZW50Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAodGV4dCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgY29tbWVudCB0ZXh0LiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgdGhpcy5uYW1lID0gXCIjY29tbWVudFwiO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuQ29tbWVudDtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5jb21tZW50KHRleHQpO1xuICAgIH1cblxuICAgIFhNTENvbW1lbnQucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgWE1MQ29tbWVudC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5jb21tZW50KHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxDb21tZW50O1xuXG4gIH0pKFhNTENoYXJhY3RlckRhdGEpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MRGVjbGFyYXRpb24sIFhNTE5vZGUsIGlzT2JqZWN0LFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgaXNPYmplY3QgPSByZXF1aXJlKCcuL1V0aWxpdHknKS5pc09iamVjdDtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEZWNsYXJhdGlvbiA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTERlY2xhcmF0aW9uLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTERlY2xhcmF0aW9uKHBhcmVudCwgdmVyc2lvbiwgZW5jb2RpbmcsIHN0YW5kYWxvbmUpIHtcbiAgICAgIHZhciByZWY7XG4gICAgICBYTUxEZWNsYXJhdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKGlzT2JqZWN0KHZlcnNpb24pKSB7XG4gICAgICAgIHJlZiA9IHZlcnNpb24sIHZlcnNpb24gPSByZWYudmVyc2lvbiwgZW5jb2RpbmcgPSByZWYuZW5jb2RpbmcsIHN0YW5kYWxvbmUgPSByZWYuc3RhbmRhbG9uZTtcbiAgICAgIH1cbiAgICAgIGlmICghdmVyc2lvbikge1xuICAgICAgICB2ZXJzaW9uID0gJzEuMCc7XG4gICAgICB9XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5EZWNsYXJhdGlvbjtcbiAgICAgIHRoaXMudmVyc2lvbiA9IHRoaXMuc3RyaW5naWZ5LnhtbFZlcnNpb24odmVyc2lvbik7XG4gICAgICBpZiAoZW5jb2RpbmcgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLmVuY29kaW5nID0gdGhpcy5zdHJpbmdpZnkueG1sRW5jb2RpbmcoZW5jb2RpbmcpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YW5kYWxvbmUgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnN0YW5kYWxvbmUgPSB0aGlzLnN0cmluZ2lmeS54bWxTdGFuZGFsb25lKHN0YW5kYWxvbmUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIFhNTERlY2xhcmF0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLmRlY2xhcmF0aW9uKHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxEZWNsYXJhdGlvbjtcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFhNTERUREF0dExpc3QsIFhNTE5vZGUsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEVERBdHRMaXN0ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MRFREQXR0TGlzdCwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxEVERBdHRMaXN0KHBhcmVudCwgZWxlbWVudE5hbWUsIGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVR5cGUsIGRlZmF1bHRWYWx1ZVR5cGUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgWE1MRFREQXR0TGlzdC5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKGVsZW1lbnROYW1lID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBEVEQgZWxlbWVudCBuYW1lLiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgaWYgKGF0dHJpYnV0ZU5hbWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIERURCBhdHRyaWJ1dGUgbmFtZS4gXCIgKyB0aGlzLmRlYnVnSW5mbyhlbGVtZW50TmFtZSkpO1xuICAgICAgfVxuICAgICAgaWYgKCFhdHRyaWJ1dGVUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRFREIGF0dHJpYnV0ZSB0eXBlLiBcIiArIHRoaXMuZGVidWdJbmZvKGVsZW1lbnROYW1lKSk7XG4gICAgICB9XG4gICAgICBpZiAoIWRlZmF1bHRWYWx1ZVR5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBEVEQgYXR0cmlidXRlIGRlZmF1bHQuIFwiICsgdGhpcy5kZWJ1Z0luZm8oZWxlbWVudE5hbWUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZhdWx0VmFsdWVUeXBlLmluZGV4T2YoJyMnKSAhPT0gMCkge1xuICAgICAgICBkZWZhdWx0VmFsdWVUeXBlID0gJyMnICsgZGVmYXVsdFZhbHVlVHlwZTtcbiAgICAgIH1cbiAgICAgIGlmICghZGVmYXVsdFZhbHVlVHlwZS5tYXRjaCgvXigjUkVRVUlSRUR8I0lNUExJRUR8I0ZJWEVEfCNERUZBVUxUKSQvKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGRlZmF1bHQgdmFsdWUgdHlwZTsgZXhwZWN0ZWQ6ICNSRVFVSVJFRCwgI0lNUExJRUQsICNGSVhFRCBvciAjREVGQVVMVC4gXCIgKyB0aGlzLmRlYnVnSW5mbyhlbGVtZW50TmFtZSkpO1xuICAgICAgfVxuICAgICAgaWYgKGRlZmF1bHRWYWx1ZSAmJiAhZGVmYXVsdFZhbHVlVHlwZS5tYXRjaCgvXigjRklYRUR8I0RFRkFVTFQpJC8pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRlZmF1bHQgdmFsdWUgb25seSBhcHBsaWVzIHRvICNGSVhFRCBvciAjREVGQVVMVC4gXCIgKyB0aGlzLmRlYnVnSW5mbyhlbGVtZW50TmFtZSkpO1xuICAgICAgfVxuICAgICAgdGhpcy5lbGVtZW50TmFtZSA9IHRoaXMuc3RyaW5naWZ5Lm5hbWUoZWxlbWVudE5hbWUpO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuQXR0cmlidXRlRGVjbGFyYXRpb247XG4gICAgICB0aGlzLmF0dHJpYnV0ZU5hbWUgPSB0aGlzLnN0cmluZ2lmeS5uYW1lKGF0dHJpYnV0ZU5hbWUpO1xuICAgICAgdGhpcy5hdHRyaWJ1dGVUeXBlID0gdGhpcy5zdHJpbmdpZnkuZHRkQXR0VHlwZShhdHRyaWJ1dGVUeXBlKTtcbiAgICAgIGlmIChkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5kdGRBdHREZWZhdWx0KGRlZmF1bHRWYWx1ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLmRlZmF1bHRWYWx1ZVR5cGUgPSBkZWZhdWx0VmFsdWVUeXBlO1xuICAgIH1cblxuICAgIFhNTERUREF0dExpc3QucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuZHRkQXR0TGlzdCh0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRFREQXR0TGlzdDtcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFhNTERUREVudGl0eSwgWE1MTm9kZSwgaXNPYmplY3QsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBpc09iamVjdCA9IHJlcXVpcmUoJy4vVXRpbGl0eScpLmlzT2JqZWN0O1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERUREVudGl0eSA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTERUREVudGl0eSwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxEVERFbnRpdHkocGFyZW50LCBwZSwgbmFtZSwgdmFsdWUpIHtcbiAgICAgIFhNTERUREVudGl0eS5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIERURCBlbnRpdHkgbmFtZS4gXCIgKyB0aGlzLmRlYnVnSW5mbyhuYW1lKSk7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIERURCBlbnRpdHkgdmFsdWUuIFwiICsgdGhpcy5kZWJ1Z0luZm8obmFtZSkpO1xuICAgICAgfVxuICAgICAgdGhpcy5wZSA9ICEhcGU7XG4gICAgICB0aGlzLm5hbWUgPSB0aGlzLnN0cmluZ2lmeS5uYW1lKG5hbWUpO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuRW50aXR5RGVjbGFyYXRpb247XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5zdHJpbmdpZnkuZHRkRW50aXR5VmFsdWUodmFsdWUpO1xuICAgICAgICB0aGlzLmludGVybmFsID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdmFsdWUucHViSUQgJiYgIXZhbHVlLnN5c0lEKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHVibGljIGFuZC9vciBzeXN0ZW0gaWRlbnRpZmllcnMgYXJlIHJlcXVpcmVkIGZvciBhbiBleHRlcm5hbCBlbnRpdHkuIFwiICsgdGhpcy5kZWJ1Z0luZm8obmFtZSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZS5wdWJJRCAmJiAhdmFsdWUuc3lzSUQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTeXN0ZW0gaWRlbnRpZmllciBpcyByZXF1aXJlZCBmb3IgYSBwdWJsaWMgZXh0ZXJuYWwgZW50aXR5LiBcIiArIHRoaXMuZGVidWdJbmZvKG5hbWUpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmludGVybmFsID0gZmFsc2U7XG4gICAgICAgIGlmICh2YWx1ZS5wdWJJRCAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5wdWJJRCA9IHRoaXMuc3RyaW5naWZ5LmR0ZFB1YklEKHZhbHVlLnB1YklEKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUuc3lzSUQgIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuc3lzSUQgPSB0aGlzLnN0cmluZ2lmeS5kdGRTeXNJRCh2YWx1ZS5zeXNJRCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlLm5EYXRhICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLm5EYXRhID0gdGhpcy5zdHJpbmdpZnkuZHRkTkRhdGEodmFsdWUubkRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBlICYmIHRoaXMubkRhdGEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3RhdGlvbiBkZWNsYXJhdGlvbiBpcyBub3QgYWxsb3dlZCBpbiBhIHBhcmFtZXRlciBlbnRpdHkuIFwiICsgdGhpcy5kZWJ1Z0luZm8obmFtZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERUREVudGl0eS5wcm90b3R5cGUsICdwdWJsaWNJZCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnB1YklEO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERUREVudGl0eS5wcm90b3R5cGUsICdzeXN0ZW1JZCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN5c0lEO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERUREVudGl0eS5wcm90b3R5cGUsICdub3RhdGlvbk5hbWUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uRGF0YSB8fCBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERUREVudGl0eS5wcm90b3R5cGUsICdpbnB1dEVuY29kaW5nJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRFRERW50aXR5LnByb3RvdHlwZSwgJ3htbEVuY29kaW5nJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRFRERW50aXR5LnByb3RvdHlwZSwgJ3htbFZlcnNpb24nLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIFhNTERUREVudGl0eS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5kdGRFbnRpdHkodGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTERUREVudGl0eTtcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFhNTERUREVsZW1lbnQsIFhNTE5vZGUsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEVERFbGVtZW50ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MRFRERWxlbWVudCwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxEVERFbGVtZW50KHBhcmVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgIFhNTERUREVsZW1lbnQuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIGlmIChuYW1lID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBEVEQgZWxlbWVudCBuYW1lLiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9ICcoI1BDREFUQSknO1xuICAgICAgfVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gJygnICsgdmFsdWUuam9pbignLCcpICsgJyknO1xuICAgICAgfVxuICAgICAgdGhpcy5uYW1lID0gdGhpcy5zdHJpbmdpZnkubmFtZShuYW1lKTtcbiAgICAgIHRoaXMudHlwZSA9IE5vZGVUeXBlLkVsZW1lbnREZWNsYXJhdGlvbjtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5kdGRFbGVtZW50VmFsdWUodmFsdWUpO1xuICAgIH1cblxuICAgIFhNTERUREVsZW1lbnQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuZHRkRWxlbWVudCh0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRFRERWxlbWVudDtcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFhNTERURE5vdGF0aW9uLCBYTUxOb2RlLFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRFRETm90YXRpb24gPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxEVEROb3RhdGlvbiwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxEVEROb3RhdGlvbihwYXJlbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgICBYTUxEVEROb3RhdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIERURCBub3RhdGlvbiBuYW1lLiBcIiArIHRoaXMuZGVidWdJbmZvKG5hbWUpKTtcbiAgICAgIH1cbiAgICAgIGlmICghdmFsdWUucHViSUQgJiYgIXZhbHVlLnN5c0lEKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlB1YmxpYyBvciBzeXN0ZW0gaWRlbnRpZmllcnMgYXJlIHJlcXVpcmVkIGZvciBhbiBleHRlcm5hbCBlbnRpdHkuIFwiICsgdGhpcy5kZWJ1Z0luZm8obmFtZSkpO1xuICAgICAgfVxuICAgICAgdGhpcy5uYW1lID0gdGhpcy5zdHJpbmdpZnkubmFtZShuYW1lKTtcbiAgICAgIHRoaXMudHlwZSA9IE5vZGVUeXBlLk5vdGF0aW9uRGVjbGFyYXRpb247XG4gICAgICBpZiAodmFsdWUucHViSUQgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnB1YklEID0gdGhpcy5zdHJpbmdpZnkuZHRkUHViSUQodmFsdWUucHViSUQpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlLnN5c0lEICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5zeXNJRCA9IHRoaXMuc3RyaW5naWZ5LmR0ZFN5c0lEKHZhbHVlLnN5c0lEKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRFRETm90YXRpb24ucHJvdG90eXBlLCAncHVibGljSWQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wdWJJRDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEVEROb3RhdGlvbi5wcm90b3R5cGUsICdzeXN0ZW1JZCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN5c0lEO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgWE1MRFRETm90YXRpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuZHRkTm90YXRpb24odGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTERURE5vdGF0aW9uO1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MRFREQXR0TGlzdCwgWE1MRFRERWxlbWVudCwgWE1MRFRERW50aXR5LCBYTUxEVEROb3RhdGlvbiwgWE1MRG9jVHlwZSwgWE1MTmFtZWROb2RlTWFwLCBYTUxOb2RlLCBpc09iamVjdCxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9VdGlsaXR5JykuaXNPYmplY3Q7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIFhNTERUREF0dExpc3QgPSByZXF1aXJlKCcuL1hNTERUREF0dExpc3QnKTtcblxuICBYTUxEVERFbnRpdHkgPSByZXF1aXJlKCcuL1hNTERUREVudGl0eScpO1xuXG4gIFhNTERUREVsZW1lbnQgPSByZXF1aXJlKCcuL1hNTERUREVsZW1lbnQnKTtcblxuICBYTUxEVEROb3RhdGlvbiA9IHJlcXVpcmUoJy4vWE1MRFRETm90YXRpb24nKTtcblxuICBYTUxOYW1lZE5vZGVNYXAgPSByZXF1aXJlKCcuL1hNTE5hbWVkTm9kZU1hcCcpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRG9jVHlwZSA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTERvY1R5cGUsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MRG9jVHlwZShwYXJlbnQsIHB1YklELCBzeXNJRCkge1xuICAgICAgdmFyIGNoaWxkLCBpLCBsZW4sIHJlZiwgcmVmMSwgcmVmMjtcbiAgICAgIFhNTERvY1R5cGUuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIHRoaXMudHlwZSA9IE5vZGVUeXBlLkRvY1R5cGU7XG4gICAgICBpZiAocGFyZW50LmNoaWxkcmVuKSB7XG4gICAgICAgIHJlZiA9IHBhcmVudC5jaGlsZHJlbjtcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgY2hpbGQgPSByZWZbaV07XG4gICAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IE5vZGVUeXBlLkVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IGNoaWxkLm5hbWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuZG9jdW1lbnRPYmplY3QgPSBwYXJlbnQ7XG4gICAgICBpZiAoaXNPYmplY3QocHViSUQpKSB7XG4gICAgICAgIHJlZjEgPSBwdWJJRCwgcHViSUQgPSByZWYxLnB1YklELCBzeXNJRCA9IHJlZjEuc3lzSUQ7XG4gICAgICB9XG4gICAgICBpZiAoc3lzSUQgPT0gbnVsbCkge1xuICAgICAgICByZWYyID0gW3B1YklELCBzeXNJRF0sIHN5c0lEID0gcmVmMlswXSwgcHViSUQgPSByZWYyWzFdO1xuICAgICAgfVxuICAgICAgaWYgKHB1YklEICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5wdWJJRCA9IHRoaXMuc3RyaW5naWZ5LmR0ZFB1YklEKHB1YklEKTtcbiAgICAgIH1cbiAgICAgIGlmIChzeXNJRCAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuc3lzSUQgPSB0aGlzLnN0cmluZ2lmeS5kdGRTeXNJRChzeXNJRCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERvY1R5cGUucHJvdG90eXBlLCAnZW50aXRpZXMnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2hpbGQsIGksIGxlbiwgbm9kZXMsIHJlZjtcbiAgICAgICAgbm9kZXMgPSB7fTtcbiAgICAgICAgcmVmID0gdGhpcy5jaGlsZHJlbjtcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgY2hpbGQgPSByZWZbaV07XG4gICAgICAgICAgaWYgKChjaGlsZC50eXBlID09PSBOb2RlVHlwZS5FbnRpdHlEZWNsYXJhdGlvbikgJiYgIWNoaWxkLnBlKSB7XG4gICAgICAgICAgICBub2Rlc1tjaGlsZC5uYW1lXSA9IGNoaWxkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFhNTE5hbWVkTm9kZU1hcChub2Rlcyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRG9jVHlwZS5wcm90b3R5cGUsICdub3RhdGlvbnMnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2hpbGQsIGksIGxlbiwgbm9kZXMsIHJlZjtcbiAgICAgICAgbm9kZXMgPSB7fTtcbiAgICAgICAgcmVmID0gdGhpcy5jaGlsZHJlbjtcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgY2hpbGQgPSByZWZbaV07XG4gICAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IE5vZGVUeXBlLk5vdGF0aW9uRGVjbGFyYXRpb24pIHtcbiAgICAgICAgICAgIG5vZGVzW2NoaWxkLm5hbWVdID0gY2hpbGQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgWE1MTmFtZWROb2RlTWFwKG5vZGVzKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEb2NUeXBlLnByb3RvdHlwZSwgJ3B1YmxpY0lkJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHViSUQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRG9jVHlwZS5wcm90b3R5cGUsICdzeXN0ZW1JZCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN5c0lEO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERvY1R5cGUucHJvdG90eXBlLCAnaW50ZXJuYWxTdWJzZXQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxEb2NUeXBlLnByb3RvdHlwZS5lbGVtZW50ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHZhciBjaGlsZDtcbiAgICAgIGNoaWxkID0gbmV3IFhNTERUREVsZW1lbnQodGhpcywgbmFtZSwgdmFsdWUpO1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2NUeXBlLnByb3RvdHlwZS5hdHRMaXN0ID0gZnVuY3Rpb24oZWxlbWVudE5hbWUsIGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVR5cGUsIGRlZmF1bHRWYWx1ZVR5cGUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgdmFyIGNoaWxkO1xuICAgICAgY2hpbGQgPSBuZXcgWE1MRFREQXR0TGlzdCh0aGlzLCBlbGVtZW50TmFtZSwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVHlwZSwgZGVmYXVsdFZhbHVlVHlwZSwgZGVmYXVsdFZhbHVlKTtcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jVHlwZS5wcm90b3R5cGUuZW50aXR5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHZhciBjaGlsZDtcbiAgICAgIGNoaWxkID0gbmV3IFhNTERUREVudGl0eSh0aGlzLCBmYWxzZSwgbmFtZSwgdmFsdWUpO1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2NUeXBlLnByb3RvdHlwZS5wRW50aXR5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHZhciBjaGlsZDtcbiAgICAgIGNoaWxkID0gbmV3IFhNTERUREVudGl0eSh0aGlzLCB0cnVlLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY1R5cGUucHJvdG90eXBlLm5vdGF0aW9uID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHZhciBjaGlsZDtcbiAgICAgIGNoaWxkID0gbmV3IFhNTERURE5vdGF0aW9uKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jVHlwZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5kb2NUeXBlKHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIFhNTERvY1R5cGUucHJvdG90eXBlLmVsZSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50KG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jVHlwZS5wcm90b3R5cGUuYXR0ID0gZnVuY3Rpb24oZWxlbWVudE5hbWUsIGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVR5cGUsIGRlZmF1bHRWYWx1ZVR5cGUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0TGlzdChlbGVtZW50TmFtZSwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVHlwZSwgZGVmYXVsdFZhbHVlVHlwZSwgZGVmYXVsdFZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jVHlwZS5wcm90b3R5cGUuZW50ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmVudGl0eShuYW1lLCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTERvY1R5cGUucHJvdG90eXBlLnBlbnQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucEVudGl0eShuYW1lLCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTERvY1R5cGUucHJvdG90eXBlLm5vdCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub3RhdGlvbihuYW1lLCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTERvY1R5cGUucHJvdG90eXBlLnVwID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5yb290KCkgfHwgdGhpcy5kb2N1bWVudE9iamVjdDtcbiAgICB9O1xuXG4gICAgWE1MRG9jVHlwZS5wcm90b3R5cGUuaXNFcXVhbE5vZGUgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAoIVhNTERvY1R5cGUuX19zdXBlcl9fLmlzRXF1YWxOb2RlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykuaXNFcXVhbE5vZGUobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUubmFtZSAhPT0gdGhpcy5uYW1lKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLnB1YmxpY0lkICE9PSB0aGlzLnB1YmxpY0lkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLnN5c3RlbUlkICE9PSB0aGlzLnN5c3RlbUlkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRG9jVHlwZTtcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFhNTE5vZGUsIFhNTFJhdyxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTFJhdyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTFJhdywgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxSYXcocGFyZW50LCB0ZXh0KSB7XG4gICAgICBYTUxSYXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIGlmICh0ZXh0ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyByYXcgdGV4dC4gXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMudHlwZSA9IE5vZGVUeXBlLlJhdztcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5yYXcodGV4dCk7XG4gICAgfVxuXG4gICAgWE1MUmF3LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgfTtcblxuICAgIFhNTFJhdy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5yYXcodGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTFJhdztcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFhNTENoYXJhY3RlckRhdGEsIFhNTFRleHQsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBYTUxDaGFyYWN0ZXJEYXRhID0gcmVxdWlyZSgnLi9YTUxDaGFyYWN0ZXJEYXRhJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxUZXh0ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MVGV4dCwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxUZXh0KHBhcmVudCwgdGV4dCkge1xuICAgICAgWE1MVGV4dC5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKHRleHQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGVsZW1lbnQgdGV4dC4gXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubmFtZSA9IFwiI3RleHRcIjtcbiAgICAgIHRoaXMudHlwZSA9IE5vZGVUeXBlLlRleHQ7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5zdHJpbmdpZnkudGV4dCh0ZXh0KTtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MVGV4dC5wcm90b3R5cGUsICdpc0VsZW1lbnRDb250ZW50V2hpdGVzcGFjZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxUZXh0LnByb3RvdHlwZSwgJ3dob2xlVGV4dCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBuZXh0LCBwcmV2LCBzdHI7XG4gICAgICAgIHN0ciA9ICcnO1xuICAgICAgICBwcmV2ID0gdGhpcy5wcmV2aW91c1NpYmxpbmc7XG4gICAgICAgIHdoaWxlIChwcmV2KSB7XG4gICAgICAgICAgc3RyID0gcHJldi5kYXRhICsgc3RyO1xuICAgICAgICAgIHByZXYgPSBwcmV2LnByZXZpb3VzU2libGluZztcbiAgICAgICAgfVxuICAgICAgICBzdHIgKz0gdGhpcy5kYXRhO1xuICAgICAgICBuZXh0ID0gdGhpcy5uZXh0U2libGluZztcbiAgICAgICAgd2hpbGUgKG5leHQpIHtcbiAgICAgICAgICBzdHIgPSBzdHIgKyBuZXh0LmRhdGE7XG4gICAgICAgICAgbmV4dCA9IG5leHQubmV4dFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIFhNTFRleHQucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgWE1MVGV4dC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci50ZXh0KHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIFhNTFRleHQucHJvdG90eXBlLnNwbGl0VGV4dCA9IGZ1bmN0aW9uKG9mZnNldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxUZXh0LnByb3RvdHlwZS5yZXBsYWNlV2hvbGVUZXh0ID0gZnVuY3Rpb24oY29udGVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MVGV4dDtcblxuICB9KShYTUxDaGFyYWN0ZXJEYXRhKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFhNTENoYXJhY3RlckRhdGEsIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbixcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIFhNTENoYXJhY3RlckRhdGEgPSByZXF1aXJlKCcuL1hNTENoYXJhY3RlckRhdGEnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbiA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbiwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24ocGFyZW50LCB0YXJnZXQsIHZhbHVlKSB7XG4gICAgICBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24uX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIGlmICh0YXJnZXQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGluc3RydWN0aW9uIHRhcmdldC4gXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMudHlwZSA9IE5vZGVUeXBlLlByb2Nlc3NpbmdJbnN0cnVjdGlvbjtcbiAgICAgIHRoaXMudGFyZ2V0ID0gdGhpcy5zdHJpbmdpZnkuaW5zVGFyZ2V0KHRhcmdldCk7XG4gICAgICB0aGlzLm5hbWUgPSB0aGlzLnRhcmdldDtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5zdHJpbmdpZnkuaW5zVmFsdWUodmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH07XG5cbiAgICBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIucHJvY2Vzc2luZ0luc3RydWN0aW9uKHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbi5wcm90b3R5cGUuaXNFcXVhbE5vZGUgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAoIVhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbi5fX3N1cGVyX18uaXNFcXVhbE5vZGUuYXBwbHkodGhpcywgYXJndW1lbnRzKS5pc0VxdWFsTm9kZShub2RlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS50YXJnZXQgIT09IHRoaXMudGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uO1xuXG4gIH0pKFhNTENoYXJhY3RlckRhdGEpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MRHVtbXksIFhNTE5vZGUsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEdW1teSA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTER1bW15LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTER1bW15KHBhcmVudCkge1xuICAgICAgWE1MRHVtbXkuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIHRoaXMudHlwZSA9IE5vZGVUeXBlLkR1bW15O1xuICAgIH1cblxuICAgIFhNTER1bW15LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgfTtcblxuICAgIFhNTER1bW15LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTER1bW15O1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxOb2RlTGlzdDtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTE5vZGVMaXN0ID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFhNTE5vZGVMaXN0KG5vZGVzKSB7XG4gICAgICB0aGlzLm5vZGVzID0gbm9kZXM7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTE5vZGVMaXN0LnByb3RvdHlwZSwgJ2xlbmd0aCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVzLmxlbmd0aCB8fCAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgWE1MTm9kZUxpc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlcyA9IG51bGw7XG4gICAgfTtcblxuICAgIFhNTE5vZGVMaXN0LnByb3RvdHlwZS5pdGVtID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vZGVzW2luZGV4XSB8fCBudWxsO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MTm9kZUxpc3Q7XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBEaXNjb25uZWN0ZWQ6IDEsXG4gICAgUHJlY2VkaW5nOiAyLFxuICAgIEZvbGxvd2luZzogNCxcbiAgICBDb250YWluczogOCxcbiAgICBDb250YWluZWRCeTogMTYsXG4gICAgSW1wbGVtZW50YXRpb25TcGVjaWZpYzogMzJcbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgRG9jdW1lbnRQb3NpdGlvbiwgTm9kZVR5cGUsIFhNTENEYXRhLCBYTUxDb21tZW50LCBYTUxEZWNsYXJhdGlvbiwgWE1MRG9jVHlwZSwgWE1MRHVtbXksIFhNTEVsZW1lbnQsIFhNTE5hbWVkTm9kZU1hcCwgWE1MTm9kZSwgWE1MTm9kZUxpc3QsIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbiwgWE1MUmF3LCBYTUxUZXh0LCBnZXRWYWx1ZSwgaXNFbXB0eSwgaXNGdW5jdGlvbiwgaXNPYmplY3QsIHJlZjEsXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIHJlZjEgPSByZXF1aXJlKCcuL1V0aWxpdHknKSwgaXNPYmplY3QgPSByZWYxLmlzT2JqZWN0LCBpc0Z1bmN0aW9uID0gcmVmMS5pc0Z1bmN0aW9uLCBpc0VtcHR5ID0gcmVmMS5pc0VtcHR5LCBnZXRWYWx1ZSA9IHJlZjEuZ2V0VmFsdWU7XG5cbiAgWE1MRWxlbWVudCA9IG51bGw7XG5cbiAgWE1MQ0RhdGEgPSBudWxsO1xuXG4gIFhNTENvbW1lbnQgPSBudWxsO1xuXG4gIFhNTERlY2xhcmF0aW9uID0gbnVsbDtcblxuICBYTUxEb2NUeXBlID0gbnVsbDtcblxuICBYTUxSYXcgPSBudWxsO1xuXG4gIFhNTFRleHQgPSBudWxsO1xuXG4gIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbiA9IG51bGw7XG5cbiAgWE1MRHVtbXkgPSBudWxsO1xuXG4gIE5vZGVUeXBlID0gbnVsbDtcblxuICBYTUxOb2RlTGlzdCA9IG51bGw7XG5cbiAgWE1MTmFtZWROb2RlTWFwID0gbnVsbDtcblxuICBEb2N1bWVudFBvc2l0aW9uID0gbnVsbDtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTE5vZGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MTm9kZShwYXJlbnQxKSB7XG4gICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDE7XG4gICAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdGhpcy5wYXJlbnQub3B0aW9ucztcbiAgICAgICAgdGhpcy5zdHJpbmdpZnkgPSB0aGlzLnBhcmVudC5zdHJpbmdpZnk7XG4gICAgICB9XG4gICAgICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICAgIHRoaXMuYmFzZVVSSSA9IG51bGw7XG4gICAgICBpZiAoIVhNTEVsZW1lbnQpIHtcbiAgICAgICAgWE1MRWxlbWVudCA9IHJlcXVpcmUoJy4vWE1MRWxlbWVudCcpO1xuICAgICAgICBYTUxDRGF0YSA9IHJlcXVpcmUoJy4vWE1MQ0RhdGEnKTtcbiAgICAgICAgWE1MQ29tbWVudCA9IHJlcXVpcmUoJy4vWE1MQ29tbWVudCcpO1xuICAgICAgICBYTUxEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4vWE1MRGVjbGFyYXRpb24nKTtcbiAgICAgICAgWE1MRG9jVHlwZSA9IHJlcXVpcmUoJy4vWE1MRG9jVHlwZScpO1xuICAgICAgICBYTUxSYXcgPSByZXF1aXJlKCcuL1hNTFJhdycpO1xuICAgICAgICBYTUxUZXh0ID0gcmVxdWlyZSgnLi9YTUxUZXh0Jyk7XG4gICAgICAgIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbiA9IHJlcXVpcmUoJy4vWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uJyk7XG4gICAgICAgIFhNTER1bW15ID0gcmVxdWlyZSgnLi9YTUxEdW1teScpO1xuICAgICAgICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcbiAgICAgICAgWE1MTm9kZUxpc3QgPSByZXF1aXJlKCcuL1hNTE5vZGVMaXN0Jyk7XG4gICAgICAgIFhNTE5hbWVkTm9kZU1hcCA9IHJlcXVpcmUoJy4vWE1MTmFtZWROb2RlTWFwJyk7XG4gICAgICAgIERvY3VtZW50UG9zaXRpb24gPSByZXF1aXJlKCcuL0RvY3VtZW50UG9zaXRpb24nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MTm9kZS5wcm90b3R5cGUsICdub2RlTmFtZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MTm9kZS5wcm90b3R5cGUsICdub2RlVHlwZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MTm9kZS5wcm90b3R5cGUsICdub2RlVmFsdWUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxOb2RlLnByb3RvdHlwZSwgJ3BhcmVudE5vZGUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MTm9kZS5wcm90b3R5cGUsICdjaGlsZE5vZGVzJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNoaWxkTm9kZUxpc3QgfHwgIXRoaXMuY2hpbGROb2RlTGlzdC5ub2Rlcykge1xuICAgICAgICAgIHRoaXMuY2hpbGROb2RlTGlzdCA9IG5ldyBYTUxOb2RlTGlzdCh0aGlzLmNoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZE5vZGVMaXN0O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTE5vZGUucHJvdG90eXBlLCAnZmlyc3RDaGlsZCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuWzBdIHx8IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MTm9kZS5wcm90b3R5cGUsICdsYXN0Q2hpbGQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlblt0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIDFdIHx8IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MTm9kZS5wcm90b3R5cGUsICdwcmV2aW91c1NpYmxpbmcnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgaSA9IHRoaXMucGFyZW50LmNoaWxkcmVuLmluZGV4T2YodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5jaGlsZHJlbltpIC0gMV0gfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxOb2RlLnByb3RvdHlwZSwgJ25leHRTaWJsaW5nJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGkgPSB0aGlzLnBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuY2hpbGRyZW5baSArIDFdIHx8IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MTm9kZS5wcm90b3R5cGUsICdvd25lckRvY3VtZW50Jywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnQoKSB8fCBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTE5vZGUucHJvdG90eXBlLCAndGV4dENvbnRlbnQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2hpbGQsIGosIGxlbiwgcmVmMiwgc3RyO1xuICAgICAgICBpZiAodGhpcy5ub2RlVHlwZSA9PT0gTm9kZVR5cGUuRWxlbWVudCB8fCB0aGlzLm5vZGVUeXBlID09PSBOb2RlVHlwZS5Eb2N1bWVudEZyYWdtZW50KSB7XG4gICAgICAgICAgc3RyID0gJyc7XG4gICAgICAgICAgcmVmMiA9IHRoaXMuY2hpbGRyZW47XG4gICAgICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmMi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgICAgY2hpbGQgPSByZWYyW2pdO1xuICAgICAgICAgICAgaWYgKGNoaWxkLnRleHRDb250ZW50KSB7XG4gICAgICAgICAgICAgIHN0ciArPSBjaGlsZC50ZXh0Q29udGVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuc2V0UGFyZW50ID0gZnVuY3Rpb24ocGFyZW50KSB7XG4gICAgICB2YXIgY2hpbGQsIGosIGxlbiwgcmVmMiwgcmVzdWx0cztcbiAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBwYXJlbnQub3B0aW9ucztcbiAgICAgICAgdGhpcy5zdHJpbmdpZnkgPSBwYXJlbnQuc3RyaW5naWZ5O1xuICAgICAgfVxuICAgICAgcmVmMiA9IHRoaXMuY2hpbGRyZW47XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYyLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgIGNoaWxkID0gcmVmMltqXTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKGNoaWxkLnNldFBhcmVudCh0aGlzKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZWxlbWVudCA9IGZ1bmN0aW9uKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpIHtcbiAgICAgIHZhciBjaGlsZE5vZGUsIGl0ZW0sIGosIGssIGtleSwgbGFzdENoaWxkLCBsZW4sIGxlbjEsIHJlZjIsIHJlZjMsIHZhbDtcbiAgICAgIGxhc3RDaGlsZCA9IG51bGw7XG4gICAgICBpZiAoYXR0cmlidXRlcyA9PT0gbnVsbCAmJiAodGV4dCA9PSBudWxsKSkge1xuICAgICAgICByZWYyID0gW3t9LCBudWxsXSwgYXR0cmlidXRlcyA9IHJlZjJbMF0sIHRleHQgPSByZWYyWzFdO1xuICAgICAgfVxuICAgICAgaWYgKGF0dHJpYnV0ZXMgPT0gbnVsbCkge1xuICAgICAgICBhdHRyaWJ1dGVzID0ge307XG4gICAgICB9XG4gICAgICBhdHRyaWJ1dGVzID0gZ2V0VmFsdWUoYXR0cmlidXRlcyk7XG4gICAgICBpZiAoIWlzT2JqZWN0KGF0dHJpYnV0ZXMpKSB7XG4gICAgICAgIHJlZjMgPSBbYXR0cmlidXRlcywgdGV4dF0sIHRleHQgPSByZWYzWzBdLCBhdHRyaWJ1dGVzID0gcmVmM1sxXTtcbiAgICAgIH1cbiAgICAgIGlmIChuYW1lICE9IG51bGwpIHtcbiAgICAgICAgbmFtZSA9IGdldFZhbHVlKG5hbWUpO1xuICAgICAgfVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkobmFtZSkpIHtcbiAgICAgICAgZm9yIChqID0gMCwgbGVuID0gbmFtZS5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgIGl0ZW0gPSBuYW1lW2pdO1xuICAgICAgICAgIGxhc3RDaGlsZCA9IHRoaXMuZWxlbWVudChpdGVtKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKG5hbWUpKSB7XG4gICAgICAgIGxhc3RDaGlsZCA9IHRoaXMuZWxlbWVudChuYW1lLmFwcGx5KCkpO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChuYW1lKSkge1xuICAgICAgICBmb3IgKGtleSBpbiBuYW1lKSB7XG4gICAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwobmFtZSwga2V5KSkgY29udGludWU7XG4gICAgICAgICAgdmFsID0gbmFtZVtrZXldO1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbCkpIHtcbiAgICAgICAgICAgIHZhbCA9IHZhbC5hcHBseSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5pZ25vcmVEZWNvcmF0b3JzICYmIHRoaXMuc3RyaW5naWZ5LmNvbnZlcnRBdHRLZXkgJiYga2V5LmluZGV4T2YodGhpcy5zdHJpbmdpZnkuY29udmVydEF0dEtleSkgPT09IDApIHtcbiAgICAgICAgICAgIGxhc3RDaGlsZCA9IHRoaXMuYXR0cmlidXRlKGtleS5zdWJzdHIodGhpcy5zdHJpbmdpZnkuY29udmVydEF0dEtleS5sZW5ndGgpLCB2YWwpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMub3B0aW9ucy5zZXBhcmF0ZUFycmF5SXRlbXMgJiYgQXJyYXkuaXNBcnJheSh2YWwpICYmIGlzRW1wdHkodmFsKSkge1xuICAgICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5kdW1teSgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsKSAmJiBpc0VtcHR5KHZhbCkpIHtcbiAgICAgICAgICAgIGxhc3RDaGlsZCA9IHRoaXMuZWxlbWVudChrZXkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMub3B0aW9ucy5rZWVwTnVsbE5vZGVzICYmICh2YWwgPT0gbnVsbCkpIHtcbiAgICAgICAgICAgIGxhc3RDaGlsZCA9IHRoaXMuZHVtbXkoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLm9wdGlvbnMuc2VwYXJhdGVBcnJheUl0ZW1zICYmIEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgICAgICAgZm9yIChrID0gMCwgbGVuMSA9IHZhbC5sZW5ndGg7IGsgPCBsZW4xOyBrKyspIHtcbiAgICAgICAgICAgICAgaXRlbSA9IHZhbFtrXTtcbiAgICAgICAgICAgICAgY2hpbGROb2RlID0ge307XG4gICAgICAgICAgICAgIGNoaWxkTm9kZVtrZXldID0gaXRlbTtcbiAgICAgICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5lbGVtZW50KGNoaWxkTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5pZ25vcmVEZWNvcmF0b3JzICYmIHRoaXMuc3RyaW5naWZ5LmNvbnZlcnRUZXh0S2V5ICYmIGtleS5pbmRleE9mKHRoaXMuc3RyaW5naWZ5LmNvbnZlcnRUZXh0S2V5KSA9PT0gMCkge1xuICAgICAgICAgICAgICBsYXN0Q2hpbGQgPSB0aGlzLmVsZW1lbnQodmFsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGxhc3RDaGlsZCA9IHRoaXMuZWxlbWVudChrZXkpO1xuICAgICAgICAgICAgICBsYXN0Q2hpbGQuZWxlbWVudCh2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsYXN0Q2hpbGQgPSB0aGlzLmVsZW1lbnQoa2V5LCB2YWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghdGhpcy5vcHRpb25zLmtlZXBOdWxsTm9kZXMgJiYgdGV4dCA9PT0gbnVsbCkge1xuICAgICAgICBsYXN0Q2hpbGQgPSB0aGlzLmR1bW15KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5pZ25vcmVEZWNvcmF0b3JzICYmIHRoaXMuc3RyaW5naWZ5LmNvbnZlcnRUZXh0S2V5ICYmIG5hbWUuaW5kZXhPZih0aGlzLnN0cmluZ2lmeS5jb252ZXJ0VGV4dEtleSkgPT09IDApIHtcbiAgICAgICAgICBsYXN0Q2hpbGQgPSB0aGlzLnRleHQodGV4dCk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMub3B0aW9ucy5pZ25vcmVEZWNvcmF0b3JzICYmIHRoaXMuc3RyaW5naWZ5LmNvbnZlcnRDRGF0YUtleSAmJiBuYW1lLmluZGV4T2YodGhpcy5zdHJpbmdpZnkuY29udmVydENEYXRhS2V5KSA9PT0gMCkge1xuICAgICAgICAgIGxhc3RDaGlsZCA9IHRoaXMuY2RhdGEodGV4dCk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMub3B0aW9ucy5pZ25vcmVEZWNvcmF0b3JzICYmIHRoaXMuc3RyaW5naWZ5LmNvbnZlcnRDb21tZW50S2V5ICYmIG5hbWUuaW5kZXhPZih0aGlzLnN0cmluZ2lmeS5jb252ZXJ0Q29tbWVudEtleSkgPT09IDApIHtcbiAgICAgICAgICBsYXN0Q2hpbGQgPSB0aGlzLmNvbW1lbnQodGV4dCk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMub3B0aW9ucy5pZ25vcmVEZWNvcmF0b3JzICYmIHRoaXMuc3RyaW5naWZ5LmNvbnZlcnRSYXdLZXkgJiYgbmFtZS5pbmRleE9mKHRoaXMuc3RyaW5naWZ5LmNvbnZlcnRSYXdLZXkpID09PSAwKSB7XG4gICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5yYXcodGV4dCk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMub3B0aW9ucy5pZ25vcmVEZWNvcmF0b3JzICYmIHRoaXMuc3RyaW5naWZ5LmNvbnZlcnRQSUtleSAmJiBuYW1lLmluZGV4T2YodGhpcy5zdHJpbmdpZnkuY29udmVydFBJS2V5KSA9PT0gMCkge1xuICAgICAgICAgIGxhc3RDaGlsZCA9IHRoaXMuaW5zdHJ1Y3Rpb24obmFtZS5zdWJzdHIodGhpcy5zdHJpbmdpZnkuY29udmVydFBJS2V5Lmxlbmd0aCksIHRleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhc3RDaGlsZCA9IHRoaXMubm9kZShuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxhc3RDaGlsZCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBjcmVhdGUgYW55IGVsZW1lbnRzIHdpdGg6IFwiICsgbmFtZSArIFwiLiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxhc3RDaGlsZDtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaW5zZXJ0QmVmb3JlID0gZnVuY3Rpb24obmFtZSwgYXR0cmlidXRlcywgdGV4dCkge1xuICAgICAgdmFyIGNoaWxkLCBpLCBuZXdDaGlsZCwgcmVmQ2hpbGQsIHJlbW92ZWQ7XG4gICAgICBpZiAobmFtZSAhPSBudWxsID8gbmFtZS50eXBlIDogdm9pZCAwKSB7XG4gICAgICAgIG5ld0NoaWxkID0gbmFtZTtcbiAgICAgICAgcmVmQ2hpbGQgPSBhdHRyaWJ1dGVzO1xuICAgICAgICBuZXdDaGlsZC5zZXRQYXJlbnQodGhpcyk7XG4gICAgICAgIGlmIChyZWZDaGlsZCkge1xuICAgICAgICAgIGkgPSBjaGlsZHJlbi5pbmRleE9mKHJlZkNoaWxkKTtcbiAgICAgICAgICByZW1vdmVkID0gY2hpbGRyZW4uc3BsaWNlKGkpO1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2gobmV3Q2hpbGQpO1xuICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGNoaWxkcmVuLCByZW1vdmVkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKG5ld0NoaWxkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3Q2hpbGQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5pc1Jvb3QpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgaW5zZXJ0IGVsZW1lbnRzIGF0IHJvb3QgbGV2ZWwuIFwiICsgdGhpcy5kZWJ1Z0luZm8obmFtZSkpO1xuICAgICAgICB9XG4gICAgICAgIGkgPSB0aGlzLnBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHRoaXMpO1xuICAgICAgICByZW1vdmVkID0gdGhpcy5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGkpO1xuICAgICAgICBjaGlsZCA9IHRoaXMucGFyZW50LmVsZW1lbnQobmFtZSwgYXR0cmlidXRlcywgdGV4dCk7XG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMucGFyZW50LmNoaWxkcmVuLCByZW1vdmVkKTtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5pbnNlcnRBZnRlciA9IGZ1bmN0aW9uKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpIHtcbiAgICAgIHZhciBjaGlsZCwgaSwgcmVtb3ZlZDtcbiAgICAgIGlmICh0aGlzLmlzUm9vdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgaW5zZXJ0IGVsZW1lbnRzIGF0IHJvb3QgbGV2ZWwuIFwiICsgdGhpcy5kZWJ1Z0luZm8obmFtZSkpO1xuICAgICAgfVxuICAgICAgaSA9IHRoaXMucGFyZW50LmNoaWxkcmVuLmluZGV4T2YodGhpcyk7XG4gICAgICByZW1vdmVkID0gdGhpcy5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGkgKyAxKTtcbiAgICAgIGNoaWxkID0gdGhpcy5wYXJlbnQuZWxlbWVudChuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KTtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMucGFyZW50LmNoaWxkcmVuLCByZW1vdmVkKTtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSwgcmVmMjtcbiAgICAgIGlmICh0aGlzLmlzUm9vdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgcmVtb3ZlIHRoZSByb290IGVsZW1lbnQuIFwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgICBpID0gdGhpcy5wYXJlbnQuY2hpbGRyZW4uaW5kZXhPZih0aGlzKTtcbiAgICAgIFtdLnNwbGljZS5hcHBseSh0aGlzLnBhcmVudC5jaGlsZHJlbiwgW2ksIGkgLSBpICsgMV0uY29uY2F0KHJlZjIgPSBbXSkpLCByZWYyO1xuICAgICAgcmV0dXJuIHRoaXMucGFyZW50O1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5ub2RlID0gZnVuY3Rpb24obmFtZSwgYXR0cmlidXRlcywgdGV4dCkge1xuICAgICAgdmFyIGNoaWxkLCByZWYyO1xuICAgICAgaWYgKG5hbWUgIT0gbnVsbCkge1xuICAgICAgICBuYW1lID0gZ2V0VmFsdWUobmFtZSk7XG4gICAgICB9XG4gICAgICBhdHRyaWJ1dGVzIHx8IChhdHRyaWJ1dGVzID0ge30pO1xuICAgICAgYXR0cmlidXRlcyA9IGdldFZhbHVlKGF0dHJpYnV0ZXMpO1xuICAgICAgaWYgKCFpc09iamVjdChhdHRyaWJ1dGVzKSkge1xuICAgICAgICByZWYyID0gW2F0dHJpYnV0ZXMsIHRleHRdLCB0ZXh0ID0gcmVmMlswXSwgYXR0cmlidXRlcyA9IHJlZjJbMV07XG4gICAgICB9XG4gICAgICBjaGlsZCA9IG5ldyBYTUxFbGVtZW50KHRoaXMsIG5hbWUsIGF0dHJpYnV0ZXMpO1xuICAgICAgaWYgKHRleHQgIT0gbnVsbCkge1xuICAgICAgICBjaGlsZC50ZXh0KHRleHQpO1xuICAgICAgfVxuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgY2hpbGQ7XG4gICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBjaGlsZCA9IG5ldyBYTUxUZXh0KHRoaXMsIHZhbHVlKTtcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuY2RhdGEgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIGNoaWxkO1xuICAgICAgY2hpbGQgPSBuZXcgWE1MQ0RhdGEodGhpcywgdmFsdWUpO1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5jb21tZW50ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBjaGlsZDtcbiAgICAgIGNoaWxkID0gbmV3IFhNTENvbW1lbnQodGhpcywgdmFsdWUpO1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5jb21tZW50QmVmb3JlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBjaGlsZCwgaSwgcmVtb3ZlZDtcbiAgICAgIGkgPSB0aGlzLnBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHRoaXMpO1xuICAgICAgcmVtb3ZlZCA9IHRoaXMucGFyZW50LmNoaWxkcmVuLnNwbGljZShpKTtcbiAgICAgIGNoaWxkID0gdGhpcy5wYXJlbnQuY29tbWVudCh2YWx1ZSk7XG4gICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLnBhcmVudC5jaGlsZHJlbiwgcmVtb3ZlZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuY29tbWVudEFmdGVyID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBjaGlsZCwgaSwgcmVtb3ZlZDtcbiAgICAgIGkgPSB0aGlzLnBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHRoaXMpO1xuICAgICAgcmVtb3ZlZCA9IHRoaXMucGFyZW50LmNoaWxkcmVuLnNwbGljZShpICsgMSk7XG4gICAgICBjaGlsZCA9IHRoaXMucGFyZW50LmNvbW1lbnQodmFsdWUpO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5wYXJlbnQuY2hpbGRyZW4sIHJlbW92ZWQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLnJhdyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgY2hpbGQ7XG4gICAgICBjaGlsZCA9IG5ldyBYTUxSYXcodGhpcywgdmFsdWUpO1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5kdW1teSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNoaWxkO1xuICAgICAgY2hpbGQgPSBuZXcgWE1MRHVtbXkodGhpcyk7XG4gICAgICByZXR1cm4gY2hpbGQ7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmluc3RydWN0aW9uID0gZnVuY3Rpb24odGFyZ2V0LCB2YWx1ZSkge1xuICAgICAgdmFyIGluc1RhcmdldCwgaW5zVmFsdWUsIGluc3RydWN0aW9uLCBqLCBsZW47XG4gICAgICBpZiAodGFyZ2V0ICE9IG51bGwpIHtcbiAgICAgICAgdGFyZ2V0ID0gZ2V0VmFsdWUodGFyZ2V0KTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHZhbHVlID0gZ2V0VmFsdWUodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSB0YXJnZXQubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICBpbnNUYXJnZXQgPSB0YXJnZXRbal07XG4gICAgICAgICAgdGhpcy5pbnN0cnVjdGlvbihpbnNUYXJnZXQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHRhcmdldCkpIHtcbiAgICAgICAgZm9yIChpbnNUYXJnZXQgaW4gdGFyZ2V0KSB7XG4gICAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwodGFyZ2V0LCBpbnNUYXJnZXQpKSBjb250aW51ZTtcbiAgICAgICAgICBpbnNWYWx1ZSA9IHRhcmdldFtpbnNUYXJnZXRdO1xuICAgICAgICAgIHRoaXMuaW5zdHJ1Y3Rpb24oaW5zVGFyZ2V0LCBpbnNWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICAgIHZhbHVlID0gdmFsdWUuYXBwbHkoKTtcbiAgICAgICAgfVxuICAgICAgICBpbnN0cnVjdGlvbiA9IG5ldyBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24odGhpcywgdGFyZ2V0LCB2YWx1ZSk7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChpbnN0cnVjdGlvbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaW5zdHJ1Y3Rpb25CZWZvcmUgPSBmdW5jdGlvbih0YXJnZXQsIHZhbHVlKSB7XG4gICAgICB2YXIgY2hpbGQsIGksIHJlbW92ZWQ7XG4gICAgICBpID0gdGhpcy5wYXJlbnQuY2hpbGRyZW4uaW5kZXhPZih0aGlzKTtcbiAgICAgIHJlbW92ZWQgPSB0aGlzLnBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaSk7XG4gICAgICBjaGlsZCA9IHRoaXMucGFyZW50Lmluc3RydWN0aW9uKHRhcmdldCwgdmFsdWUpO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5wYXJlbnQuY2hpbGRyZW4sIHJlbW92ZWQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmluc3RydWN0aW9uQWZ0ZXIgPSBmdW5jdGlvbih0YXJnZXQsIHZhbHVlKSB7XG4gICAgICB2YXIgY2hpbGQsIGksIHJlbW92ZWQ7XG4gICAgICBpID0gdGhpcy5wYXJlbnQuY2hpbGRyZW4uaW5kZXhPZih0aGlzKTtcbiAgICAgIHJlbW92ZWQgPSB0aGlzLnBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaSArIDEpO1xuICAgICAgY2hpbGQgPSB0aGlzLnBhcmVudC5pbnN0cnVjdGlvbih0YXJnZXQsIHZhbHVlKTtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMucGFyZW50LmNoaWxkcmVuLCByZW1vdmVkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5kZWNsYXJhdGlvbiA9IGZ1bmN0aW9uKHZlcnNpb24sIGVuY29kaW5nLCBzdGFuZGFsb25lKSB7XG4gICAgICB2YXIgZG9jLCB4bWxkZWM7XG4gICAgICBkb2MgPSB0aGlzLmRvY3VtZW50KCk7XG4gICAgICB4bWxkZWMgPSBuZXcgWE1MRGVjbGFyYXRpb24oZG9jLCB2ZXJzaW9uLCBlbmNvZGluZywgc3RhbmRhbG9uZSk7XG4gICAgICBpZiAoZG9jLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBkb2MuY2hpbGRyZW4udW5zaGlmdCh4bWxkZWMpO1xuICAgICAgfSBlbHNlIGlmIChkb2MuY2hpbGRyZW5bMF0udHlwZSA9PT0gTm9kZVR5cGUuRGVjbGFyYXRpb24pIHtcbiAgICAgICAgZG9jLmNoaWxkcmVuWzBdID0geG1sZGVjO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9jLmNoaWxkcmVuLnVuc2hpZnQoeG1sZGVjKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkb2Mucm9vdCgpIHx8IGRvYztcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZHRkID0gZnVuY3Rpb24ocHViSUQsIHN5c0lEKSB7XG4gICAgICB2YXIgY2hpbGQsIGRvYywgZG9jdHlwZSwgaSwgaiwgaywgbGVuLCBsZW4xLCByZWYyLCByZWYzO1xuICAgICAgZG9jID0gdGhpcy5kb2N1bWVudCgpO1xuICAgICAgZG9jdHlwZSA9IG5ldyBYTUxEb2NUeXBlKGRvYywgcHViSUQsIHN5c0lEKTtcbiAgICAgIHJlZjIgPSBkb2MuY2hpbGRyZW47XG4gICAgICBmb3IgKGkgPSBqID0gMCwgbGVuID0gcmVmMi5sZW5ndGg7IGogPCBsZW47IGkgPSArK2opIHtcbiAgICAgICAgY2hpbGQgPSByZWYyW2ldO1xuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gTm9kZVR5cGUuRG9jVHlwZSkge1xuICAgICAgICAgIGRvYy5jaGlsZHJlbltpXSA9IGRvY3R5cGU7XG4gICAgICAgICAgcmV0dXJuIGRvY3R5cGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlZjMgPSBkb2MuY2hpbGRyZW47XG4gICAgICBmb3IgKGkgPSBrID0gMCwgbGVuMSA9IHJlZjMubGVuZ3RoOyBrIDwgbGVuMTsgaSA9ICsraykge1xuICAgICAgICBjaGlsZCA9IHJlZjNbaV07XG4gICAgICAgIGlmIChjaGlsZC5pc1Jvb3QpIHtcbiAgICAgICAgICBkb2MuY2hpbGRyZW4uc3BsaWNlKGksIDAsIGRvY3R5cGUpO1xuICAgICAgICAgIHJldHVybiBkb2N0eXBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkb2MuY2hpbGRyZW4ucHVzaChkb2N0eXBlKTtcbiAgICAgIHJldHVybiBkb2N0eXBlO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS51cCA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuaXNSb290KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSByb290IG5vZGUgaGFzIG5vIHBhcmVudC4gVXNlIGRvYygpIGlmIHlvdSBuZWVkIHRvIGdldCB0aGUgZG9jdW1lbnQgb2JqZWN0LlwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnBhcmVudDtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUucm9vdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG5vZGU7XG4gICAgICBub2RlID0gdGhpcztcbiAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgIGlmIChub2RlLnR5cGUgPT09IE5vZGVUeXBlLkRvY3VtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGUucm9vdE9iamVjdDtcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLmlzUm9vdCkge1xuICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5kb2N1bWVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG5vZGU7XG4gICAgICBub2RlID0gdGhpcztcbiAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgIGlmIChub2RlLnR5cGUgPT09IE5vZGVUeXBlLkRvY3VtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50KCkuZW5kKG9wdGlvbnMpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5wcmV2ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIGkgPSB0aGlzLnBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHRoaXMpO1xuICAgICAgaWYgKGkgPCAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFscmVhZHkgYXQgdGhlIGZpcnN0IG5vZGUuIFwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnQuY2hpbGRyZW5baSAtIDFdO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIGkgPSB0aGlzLnBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHRoaXMpO1xuICAgICAgaWYgKGkgPT09IC0xIHx8IGkgPT09IHRoaXMucGFyZW50LmNoaWxkcmVuLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQWxyZWFkeSBhdCB0aGUgbGFzdCBub2RlLiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmNoaWxkcmVuW2kgKyAxXTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaW1wb3J0RG9jdW1lbnQgPSBmdW5jdGlvbihkb2MpIHtcbiAgICAgIHZhciBjbG9uZWRSb290O1xuICAgICAgY2xvbmVkUm9vdCA9IGRvYy5yb290KCkuY2xvbmUoKTtcbiAgICAgIGNsb25lZFJvb3QucGFyZW50ID0gdGhpcztcbiAgICAgIGNsb25lZFJvb3QuaXNSb290ID0gZmFsc2U7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2xvbmVkUm9vdCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZGVidWdJbmZvID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgdmFyIHJlZjIsIHJlZjM7XG4gICAgICBuYW1lID0gbmFtZSB8fCB0aGlzLm5hbWU7XG4gICAgICBpZiAoKG5hbWUgPT0gbnVsbCkgJiYgISgocmVmMiA9IHRoaXMucGFyZW50KSAhPSBudWxsID8gcmVmMi5uYW1lIDogdm9pZCAwKSkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIH0gZWxzZSBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBcInBhcmVudDogPFwiICsgdGhpcy5wYXJlbnQubmFtZSArIFwiPlwiO1xuICAgICAgfSBlbHNlIGlmICghKChyZWYzID0gdGhpcy5wYXJlbnQpICE9IG51bGwgPyByZWYzLm5hbWUgOiB2b2lkIDApKSB7XG4gICAgICAgIHJldHVybiBcIm5vZGU6IDxcIiArIG5hbWUgKyBcIj5cIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcIm5vZGU6IDxcIiArIG5hbWUgKyBcIj4sIHBhcmVudDogPFwiICsgdGhpcy5wYXJlbnQubmFtZSArIFwiPlwiO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5lbGUgPSBmdW5jdGlvbihuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50KG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5ub2QgPSBmdW5jdGlvbihuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS50eHQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dCh2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmRhdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jZGF0YSh2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmNvbSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb21tZW50KHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaW5zID0gZnVuY3Rpb24odGFyZ2V0LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5zdHJ1Y3Rpb24odGFyZ2V0LCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmRvYyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnQoKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZGVjID0gZnVuY3Rpb24odmVyc2lvbiwgZW5jb2RpbmcsIHN0YW5kYWxvbmUpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlY2xhcmF0aW9uKHZlcnNpb24sIGVuY29kaW5nLCBzdGFuZGFsb25lKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZSA9IGZ1bmN0aW9uKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQobmFtZSwgYXR0cmlidXRlcywgdGV4dCk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLm4gPSBmdW5jdGlvbihuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS50ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQodmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5kID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNkYXRhKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuYyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb21tZW50KHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yYXcodmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5pID0gZnVuY3Rpb24odGFyZ2V0LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5zdHJ1Y3Rpb24odGFyZ2V0LCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLnUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnVwKCk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmltcG9ydFhNTEJ1aWxkZXIgPSBmdW5jdGlvbihkb2MpIHtcbiAgICAgIHJldHVybiB0aGlzLmltcG9ydERvY3VtZW50KGRvYyk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLnJlcGxhY2VDaGlsZCA9IGZ1bmN0aW9uKG5ld0NoaWxkLCBvbGRDaGlsZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5yZW1vdmVDaGlsZCA9IGZ1bmN0aW9uKG9sZENoaWxkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmFwcGVuZENoaWxkID0gZnVuY3Rpb24obmV3Q2hpbGQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaGFzQ2hpbGROb2RlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4ubGVuZ3RoICE9PSAwO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5jbG9uZU5vZGUgPSBmdW5jdGlvbihkZWVwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5pc1N1cHBvcnRlZCA9IGZ1bmN0aW9uKGZlYXR1cmUsIHZlcnNpb24pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5oYXNBdHRyaWJ1dGVzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRyaWJzLmxlbmd0aCAhPT0gMDtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24gPSBmdW5jdGlvbihvdGhlcikge1xuICAgICAgdmFyIHJlZiwgcmVzO1xuICAgICAgcmVmID0gdGhpcztcbiAgICAgIGlmIChyZWYgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmRvY3VtZW50KCkgIT09IG90aGVyLmRvY3VtZW50KCkpIHtcbiAgICAgICAgcmVzID0gRG9jdW1lbnRQb3NpdGlvbi5EaXNjb25uZWN0ZWQgfCBEb2N1bWVudFBvc2l0aW9uLkltcGxlbWVudGF0aW9uU3BlY2lmaWM7XG4gICAgICAgIGlmIChNYXRoLnJhbmRvbSgpIDwgMC41KSB7XG4gICAgICAgICAgcmVzIHw9IERvY3VtZW50UG9zaXRpb24uUHJlY2VkaW5nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcyB8PSBEb2N1bWVudFBvc2l0aW9uLkZvbGxvd2luZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfSBlbHNlIGlmIChyZWYuaXNBbmNlc3RvcihvdGhlcikpIHtcbiAgICAgICAgcmV0dXJuIERvY3VtZW50UG9zaXRpb24uQ29udGFpbnMgfCBEb2N1bWVudFBvc2l0aW9uLlByZWNlZGluZztcbiAgICAgIH0gZWxzZSBpZiAocmVmLmlzRGVzY2VuZGFudChvdGhlcikpIHtcbiAgICAgICAgcmV0dXJuIERvY3VtZW50UG9zaXRpb24uQ29udGFpbnMgfCBEb2N1bWVudFBvc2l0aW9uLkZvbGxvd2luZztcbiAgICAgIH0gZWxzZSBpZiAocmVmLmlzUHJlY2VkaW5nKG90aGVyKSkge1xuICAgICAgICByZXR1cm4gRG9jdW1lbnRQb3NpdGlvbi5QcmVjZWRpbmc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gRG9jdW1lbnRQb3NpdGlvbi5Gb2xsb3dpbmc7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmlzU2FtZU5vZGUgPSBmdW5jdGlvbihvdGhlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5sb29rdXBQcmVmaXggPSBmdW5jdGlvbihuYW1lc3BhY2VVUkkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaXNEZWZhdWx0TmFtZXNwYWNlID0gZnVuY3Rpb24obmFtZXNwYWNlVVJJKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmxvb2t1cE5hbWVzcGFjZVVSSSA9IGZ1bmN0aW9uKHByZWZpeCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5pc0VxdWFsTm9kZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHZhciBpLCBqLCByZWYyO1xuICAgICAgaWYgKG5vZGUubm9kZVR5cGUgIT09IHRoaXMubm9kZVR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUuY2hpbGRyZW4ubGVuZ3RoICE9PSB0aGlzLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSBqID0gMCwgcmVmMiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgMCA8PSByZWYyID8gaiA8PSByZWYyIDogaiA+PSByZWYyOyBpID0gMCA8PSByZWYyID8gKytqIDogLS1qKSB7XG4gICAgICAgIGlmICghdGhpcy5jaGlsZHJlbltpXS5pc0VxdWFsTm9kZShub2RlLmNoaWxkcmVuW2ldKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmdldEZlYXR1cmUgPSBmdW5jdGlvbihmZWF0dXJlLCB2ZXJzaW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLnNldFVzZXJEYXRhID0gZnVuY3Rpb24oa2V5LCBkYXRhLCBoYW5kbGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmdldFVzZXJEYXRhID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgICAgIGlmICghb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG90aGVyID09PSB0aGlzIHx8IHRoaXMuaXNEZXNjZW5kYW50KG90aGVyKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaXNEZXNjZW5kYW50ID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgdmFyIGNoaWxkLCBpc0Rlc2NlbmRhbnRDaGlsZCwgaiwgbGVuLCByZWYyO1xuICAgICAgcmVmMiA9IHRoaXMuY2hpbGRyZW47XG4gICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYyLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgIGNoaWxkID0gcmVmMltqXTtcbiAgICAgICAgaWYgKG5vZGUgPT09IGNoaWxkKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaXNEZXNjZW5kYW50Q2hpbGQgPSBjaGlsZC5pc0Rlc2NlbmRhbnQobm9kZSk7XG4gICAgICAgIGlmIChpc0Rlc2NlbmRhbnRDaGlsZCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmlzQW5jZXN0b3IgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICByZXR1cm4gbm9kZS5pc0Rlc2NlbmRhbnQodGhpcyk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmlzUHJlY2VkaW5nID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgdmFyIG5vZGVQb3MsIHRoaXNQb3M7XG4gICAgICBub2RlUG9zID0gdGhpcy50cmVlUG9zaXRpb24obm9kZSk7XG4gICAgICB0aGlzUG9zID0gdGhpcy50cmVlUG9zaXRpb24odGhpcyk7XG4gICAgICBpZiAobm9kZVBvcyA9PT0gLTEgfHwgdGhpc1BvcyA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5vZGVQb3MgPCB0aGlzUG9zO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5pc0ZvbGxvd2luZyA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHZhciBub2RlUG9zLCB0aGlzUG9zO1xuICAgICAgbm9kZVBvcyA9IHRoaXMudHJlZVBvc2l0aW9uKG5vZGUpO1xuICAgICAgdGhpc1BvcyA9IHRoaXMudHJlZVBvc2l0aW9uKHRoaXMpO1xuICAgICAgaWYgKG5vZGVQb3MgPT09IC0xIHx8IHRoaXNQb3MgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBub2RlUG9zID4gdGhpc1BvcztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUudHJlZVBvc2l0aW9uID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgdmFyIGZvdW5kLCBwb3M7XG4gICAgICBwb3MgPSAwO1xuICAgICAgZm91bmQgPSBmYWxzZTtcbiAgICAgIHRoaXMuZm9yZWFjaFRyZWVOb2RlKHRoaXMuZG9jdW1lbnQoKSwgZnVuY3Rpb24oY2hpbGROb2RlKSB7XG4gICAgICAgIHBvcysrO1xuICAgICAgICBpZiAoIWZvdW5kICYmIGNoaWxkTm9kZSA9PT0gbm9kZSkge1xuICAgICAgICAgIHJldHVybiBmb3VuZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKGZvdW5kKSB7XG4gICAgICAgIHJldHVybiBwb3M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmZvcmVhY2hUcmVlTm9kZSA9IGZ1bmN0aW9uKG5vZGUsIGZ1bmMpIHtcbiAgICAgIHZhciBjaGlsZCwgaiwgbGVuLCByZWYyLCByZXM7XG4gICAgICBub2RlIHx8IChub2RlID0gdGhpcy5kb2N1bWVudCgpKTtcbiAgICAgIHJlZjIgPSBub2RlLmNoaWxkcmVuO1xuICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmMi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICBjaGlsZCA9IHJlZjJbal07XG4gICAgICAgIGlmIChyZXMgPSBmdW5jKGNoaWxkKSkge1xuICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzID0gdGhpcy5mb3JlYWNoVHJlZU5vZGUoY2hpbGQsIGZ1bmMpO1xuICAgICAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxOb2RlO1xuXG4gIH0pKCk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTFN0cmluZ2lmaWVyLFxuICAgIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTFN0cmluZ2lmaWVyID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFhNTFN0cmluZ2lmaWVyKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuYXNzZXJ0TGVnYWxOYW1lID0gYmluZCh0aGlzLmFzc2VydExlZ2FsTmFtZSwgdGhpcyk7XG4gICAgICB0aGlzLmFzc2VydExlZ2FsQ2hhciA9IGJpbmQodGhpcy5hc3NlcnRMZWdhbENoYXIsIHRoaXMpO1xuICAgICAgdmFyIGtleSwgcmVmLCB2YWx1ZTtcbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMudmVyc2lvbikge1xuICAgICAgICB0aGlzLm9wdGlvbnMudmVyc2lvbiA9ICcxLjAnO1xuICAgICAgfVxuICAgICAgcmVmID0gb3B0aW9ucy5zdHJpbmdpZnkgfHwge307XG4gICAgICBmb3IgKGtleSBpbiByZWYpIHtcbiAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwocmVmLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgdmFsdWUgPSByZWZba2V5XTtcbiAgICAgICAgdGhpc1trZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLm5hbWUgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5hc3NlcnRMZWdhbE5hbWUoJycgKyB2YWwgfHwgJycpO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub1ZhbGlkYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmFzc2VydExlZ2FsQ2hhcih0aGlzLnRleHRFc2NhcGUoJycgKyB2YWwgfHwgJycpKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmNkYXRhID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgdmFsID0gJycgKyB2YWwgfHwgJyc7XG4gICAgICB2YWwgPSB2YWwucmVwbGFjZSgnXV0+JywgJ11dXV0+PCFbQ0RBVEFbPicpO1xuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0TGVnYWxDaGFyKHZhbCk7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5jb21tZW50ID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgdmFsID0gJycgKyB2YWwgfHwgJyc7XG4gICAgICBpZiAodmFsLm1hdGNoKC8tLS8pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbW1lbnQgdGV4dCBjYW5ub3QgY29udGFpbiBkb3VibGUtaHlwZW46IFwiICsgdmFsKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmFzc2VydExlZ2FsQ2hhcih2YWwpO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUucmF3ID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuICcnICsgdmFsIHx8ICcnO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuYXR0VmFsdWUgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5hc3NlcnRMZWdhbENoYXIodGhpcy5hdHRFc2NhcGUodmFsID0gJycgKyB2YWwgfHwgJycpKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmluc1RhcmdldCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub1ZhbGlkYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmFzc2VydExlZ2FsQ2hhcignJyArIHZhbCB8fCAnJyk7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5pbnNWYWx1ZSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub1ZhbGlkYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH1cbiAgICAgIHZhbCA9ICcnICsgdmFsIHx8ICcnO1xuICAgICAgaWYgKHZhbC5tYXRjaCgvXFw/Pi8pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiB2YWx1ZTogXCIgKyB2YWwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0TGVnYWxDaGFyKHZhbCk7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS54bWxWZXJzaW9uID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgdmFsID0gJycgKyB2YWwgfHwgJyc7XG4gICAgICBpZiAoIXZhbC5tYXRjaCgvMVxcLlswLTldKy8pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmVyc2lvbiBudW1iZXI6IFwiICsgdmFsKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWw7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS54bWxFbmNvZGluZyA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub1ZhbGlkYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH1cbiAgICAgIHZhbCA9ICcnICsgdmFsIHx8ICcnO1xuICAgICAgaWYgKCF2YWwubWF0Y2goL15bQS1aYS16XSg/OltBLVphLXowLTkuXy1dKSokLykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBlbmNvZGluZzogXCIgKyB2YWwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0TGVnYWxDaGFyKHZhbCk7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS54bWxTdGFuZGFsb25lID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgaWYgKHZhbCkge1xuICAgICAgICByZXR1cm4gXCJ5ZXNcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcIm5vXCI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5kdGRQdWJJRCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub1ZhbGlkYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmFzc2VydExlZ2FsQ2hhcignJyArIHZhbCB8fCAnJyk7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5kdGRTeXNJRCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub1ZhbGlkYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmFzc2VydExlZ2FsQ2hhcignJyArIHZhbCB8fCAnJyk7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5kdGRFbGVtZW50VmFsdWUgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5hc3NlcnRMZWdhbENoYXIoJycgKyB2YWwgfHwgJycpO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuZHRkQXR0VHlwZSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub1ZhbGlkYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmFzc2VydExlZ2FsQ2hhcignJyArIHZhbCB8fCAnJyk7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5kdGRBdHREZWZhdWx0ID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0TGVnYWxDaGFyKCcnICsgdmFsIHx8ICcnKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmR0ZEVudGl0eVZhbHVlID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0TGVnYWxDaGFyKCcnICsgdmFsIHx8ICcnKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmR0ZE5EYXRhID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0TGVnYWxDaGFyKCcnICsgdmFsIHx8ICcnKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmNvbnZlcnRBdHRLZXkgPSAnQCc7XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuY29udmVydFBJS2V5ID0gJz8nO1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmNvbnZlcnRUZXh0S2V5ID0gJyN0ZXh0JztcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5jb252ZXJ0Q0RhdGFLZXkgPSAnI2NkYXRhJztcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5jb252ZXJ0Q29tbWVudEtleSA9ICcjY29tbWVudCc7XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuY29udmVydFJhd0tleSA9ICcjcmF3JztcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5hc3NlcnRMZWdhbENoYXIgPSBmdW5jdGlvbihzdHIpIHtcbiAgICAgIHZhciByZWdleCwgcmVzO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub1ZhbGlkYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgIH1cbiAgICAgIHJlZ2V4ID0gJyc7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnZlcnNpb24gPT09ICcxLjAnKSB7XG4gICAgICAgIHJlZ2V4ID0gL1tcXDAtXFx4MDhcXHgwQlxcZlxceDBFLVxceDFGXFx1RkZGRVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdLztcbiAgICAgICAgaWYgKHJlcyA9IHN0ci5tYXRjaChyZWdleCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNoYXJhY3RlciBpbiBzdHJpbmc6IFwiICsgc3RyICsgXCIgYXQgaW5kZXggXCIgKyByZXMuaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy52ZXJzaW9uID09PSAnMS4xJykge1xuICAgICAgICByZWdleCA9IC9bXFwwXFx1RkZGRVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdLztcbiAgICAgICAgaWYgKHJlcyA9IHN0ci5tYXRjaChyZWdleCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNoYXJhY3RlciBpbiBzdHJpbmc6IFwiICsgc3RyICsgXCIgYXQgaW5kZXggXCIgKyByZXMuaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuYXNzZXJ0TGVnYWxOYW1lID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgICB2YXIgcmVnZXg7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbikge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgfVxuICAgICAgdGhpcy5hc3NlcnRMZWdhbENoYXIoc3RyKTtcbiAgICAgIHJlZ2V4ID0gL14oWzpBLVpfYS16XFx4QzAtXFx4RDZcXHhEOC1cXHhGNlxceEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF18W1xcdUQ4MDAtXFx1REI3Rl1bXFx1REMwMC1cXHVERkZGXSkoW1xceDJEXFwuMC06QS1aX2EtelxceEI3XFx4QzAtXFx4RDZcXHhEOC1cXHhGNlxceEY4LVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDXFx1MjAwRFxcdTIwM0ZcXHUyMDQwXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXXxbXFx1RDgwMC1cXHVEQjdGXVtcXHVEQzAwLVxcdURGRkZdKSokLztcbiAgICAgIGlmICghc3RyLm1hdGNoKHJlZ2V4KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNoYXJhY3RlciBpbiBuYW1lXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLnRleHRFc2NhcGUgPSBmdW5jdGlvbihzdHIpIHtcbiAgICAgIHZhciBhbXByZWdleDtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgICB9XG4gICAgICBhbXByZWdleCA9IHRoaXMub3B0aW9ucy5ub0RvdWJsZUVuY29kaW5nID8gLyg/ISZcXFMrOykmL2cgOiAvJi9nO1xuICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKGFtcHJlZ2V4LCAnJmFtcDsnKS5yZXBsYWNlKC88L2csICcmbHQ7JykucmVwbGFjZSgvPi9nLCAnJmd0OycpLnJlcGxhY2UoL1xcci9nLCAnJiN4RDsnKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmF0dEVzY2FwZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgICAgdmFyIGFtcHJlZ2V4O1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub1ZhbGlkYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgIH1cbiAgICAgIGFtcHJlZ2V4ID0gdGhpcy5vcHRpb25zLm5vRG91YmxlRW5jb2RpbmcgPyAvKD8hJlxcUys7KSYvZyA6IC8mL2c7XG4gICAgICByZXR1cm4gc3RyLnJlcGxhY2UoYW1wcmVnZXgsICcmYW1wOycpLnJlcGxhY2UoLzwvZywgJyZsdDsnKS5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JykucmVwbGFjZSgvXFx0L2csICcmI3g5OycpLnJlcGxhY2UoL1xcbi9nLCAnJiN4QTsnKS5yZXBsYWNlKC9cXHIvZywgJyYjeEQ7Jyk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxTdHJpbmdpZmllcjtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIE5vbmU6IDAsXG4gICAgT3BlblRhZzogMSxcbiAgICBJbnNpZGVUYWc6IDIsXG4gICAgQ2xvc2VUYWc6IDNcbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFdyaXRlclN0YXRlLCBYTUxDRGF0YSwgWE1MQ29tbWVudCwgWE1MRFREQXR0TGlzdCwgWE1MRFRERWxlbWVudCwgWE1MRFRERW50aXR5LCBYTUxEVEROb3RhdGlvbiwgWE1MRGVjbGFyYXRpb24sIFhNTERvY1R5cGUsIFhNTER1bW15LCBYTUxFbGVtZW50LCBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24sIFhNTFJhdywgWE1MVGV4dCwgWE1MV3JpdGVyQmFzZSwgYXNzaWduLFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBhc3NpZ24gPSByZXF1aXJlKCcuL1V0aWxpdHknKS5hc3NpZ247XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MRGVjbGFyYXRpb24gPSByZXF1aXJlKCcuL1hNTERlY2xhcmF0aW9uJyk7XG5cbiAgWE1MRG9jVHlwZSA9IHJlcXVpcmUoJy4vWE1MRG9jVHlwZScpO1xuXG4gIFhNTENEYXRhID0gcmVxdWlyZSgnLi9YTUxDRGF0YScpO1xuXG4gIFhNTENvbW1lbnQgPSByZXF1aXJlKCcuL1hNTENvbW1lbnQnKTtcblxuICBYTUxFbGVtZW50ID0gcmVxdWlyZSgnLi9YTUxFbGVtZW50Jyk7XG5cbiAgWE1MUmF3ID0gcmVxdWlyZSgnLi9YTUxSYXcnKTtcblxuICBYTUxUZXh0ID0gcmVxdWlyZSgnLi9YTUxUZXh0Jyk7XG5cbiAgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uID0gcmVxdWlyZSgnLi9YTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24nKTtcblxuICBYTUxEdW1teSA9IHJlcXVpcmUoJy4vWE1MRHVtbXknKTtcblxuICBYTUxEVERBdHRMaXN0ID0gcmVxdWlyZSgnLi9YTUxEVERBdHRMaXN0Jyk7XG5cbiAgWE1MRFRERWxlbWVudCA9IHJlcXVpcmUoJy4vWE1MRFRERWxlbWVudCcpO1xuXG4gIFhNTERUREVudGl0eSA9IHJlcXVpcmUoJy4vWE1MRFRERW50aXR5Jyk7XG5cbiAgWE1MRFRETm90YXRpb24gPSByZXF1aXJlKCcuL1hNTERURE5vdGF0aW9uJyk7XG5cbiAgV3JpdGVyU3RhdGUgPSByZXF1aXJlKCcuL1dyaXRlclN0YXRlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxXcml0ZXJCYXNlID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFhNTFdyaXRlckJhc2Uob3B0aW9ucykge1xuICAgICAgdmFyIGtleSwgcmVmLCB2YWx1ZTtcbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgcmVmID0gb3B0aW9ucy53cml0ZXIgfHwge307XG4gICAgICBmb3IgKGtleSBpbiByZWYpIHtcbiAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwocmVmLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgdmFsdWUgPSByZWZba2V5XTtcbiAgICAgICAgdGhpc1tcIl9cIiArIGtleV0gPSB0aGlzW2tleV07XG4gICAgICAgIHRoaXNba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLmZpbHRlck9wdGlvbnMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgZmlsdGVyZWRPcHRpb25zLCByZWYsIHJlZjEsIHJlZjIsIHJlZjMsIHJlZjQsIHJlZjUsIHJlZjY7XG4gICAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuICAgICAgb3B0aW9ucyA9IGFzc2lnbih7fSwgdGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgIGZpbHRlcmVkT3B0aW9ucyA9IHtcbiAgICAgICAgd3JpdGVyOiB0aGlzXG4gICAgICB9O1xuICAgICAgZmlsdGVyZWRPcHRpb25zLnByZXR0eSA9IG9wdGlvbnMucHJldHR5IHx8IGZhbHNlO1xuICAgICAgZmlsdGVyZWRPcHRpb25zLmFsbG93RW1wdHkgPSBvcHRpb25zLmFsbG93RW1wdHkgfHwgZmFsc2U7XG4gICAgICBmaWx0ZXJlZE9wdGlvbnMuaW5kZW50ID0gKHJlZiA9IG9wdGlvbnMuaW5kZW50KSAhPSBudWxsID8gcmVmIDogJyAgJztcbiAgICAgIGZpbHRlcmVkT3B0aW9ucy5uZXdsaW5lID0gKHJlZjEgPSBvcHRpb25zLm5ld2xpbmUpICE9IG51bGwgPyByZWYxIDogJ1xcbic7XG4gICAgICBmaWx0ZXJlZE9wdGlvbnMub2Zmc2V0ID0gKHJlZjIgPSBvcHRpb25zLm9mZnNldCkgIT0gbnVsbCA/IHJlZjIgOiAwO1xuICAgICAgZmlsdGVyZWRPcHRpb25zLmRvbnRQcmV0dHlUZXh0Tm9kZXMgPSAocmVmMyA9IChyZWY0ID0gb3B0aW9ucy5kb250UHJldHR5VGV4dE5vZGVzKSAhPSBudWxsID8gcmVmNCA6IG9wdGlvbnMuZG9udHByZXR0eXRleHRub2RlcykgIT0gbnVsbCA/IHJlZjMgOiAwO1xuICAgICAgZmlsdGVyZWRPcHRpb25zLnNwYWNlQmVmb3JlU2xhc2ggPSAocmVmNSA9IChyZWY2ID0gb3B0aW9ucy5zcGFjZUJlZm9yZVNsYXNoKSAhPSBudWxsID8gcmVmNiA6IG9wdGlvbnMuc3BhY2ViZWZvcmVzbGFzaCkgIT0gbnVsbCA/IHJlZjUgOiAnJztcbiAgICAgIGlmIChmaWx0ZXJlZE9wdGlvbnMuc3BhY2VCZWZvcmVTbGFzaCA9PT0gdHJ1ZSkge1xuICAgICAgICBmaWx0ZXJlZE9wdGlvbnMuc3BhY2VCZWZvcmVTbGFzaCA9ICcgJztcbiAgICAgIH1cbiAgICAgIGZpbHRlcmVkT3B0aW9ucy5zdXBwcmVzc1ByZXR0eUNvdW50ID0gMDtcbiAgICAgIGZpbHRlcmVkT3B0aW9ucy51c2VyID0ge307XG4gICAgICBmaWx0ZXJlZE9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5Ob25lO1xuICAgICAgcmV0dXJuIGZpbHRlcmVkT3B0aW9ucztcbiAgICB9O1xuXG4gICAgWE1MV3JpdGVyQmFzZS5wcm90b3R5cGUuaW5kZW50ID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHZhciBpbmRlbnRMZXZlbDtcbiAgICAgIGlmICghb3B0aW9ucy5wcmV0dHkgfHwgb3B0aW9ucy5zdXBwcmVzc1ByZXR0eUNvdW50KSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5wcmV0dHkpIHtcbiAgICAgICAgaW5kZW50TGV2ZWwgPSAobGV2ZWwgfHwgMCkgKyBvcHRpb25zLm9mZnNldCArIDE7XG4gICAgICAgIGlmIChpbmRlbnRMZXZlbCA+IDApIHtcbiAgICAgICAgICByZXR1cm4gbmV3IEFycmF5KGluZGVudExldmVsKS5qb2luKG9wdGlvbnMuaW5kZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuICcnO1xuICAgIH07XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS5lbmRsaW5lID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIGlmICghb3B0aW9ucy5wcmV0dHkgfHwgb3B0aW9ucy5zdXBwcmVzc1ByZXR0eUNvdW50KSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLm5ld2xpbmU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLmF0dHJpYnV0ZSA9IGZ1bmN0aW9uKGF0dCwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHZhciByO1xuICAgICAgdGhpcy5vcGVuQXR0cmlidXRlKGF0dCwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgciA9ICcgJyArIGF0dC5uYW1lICsgJz1cIicgKyBhdHQudmFsdWUgKyAnXCInO1xuICAgICAgdGhpcy5jbG9zZUF0dHJpYnV0ZShhdHQsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIHJldHVybiByO1xuICAgIH07XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS5jZGF0YSA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICB2YXIgcjtcbiAgICAgIHRoaXMub3Blbk5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk9wZW5UYWc7XG4gICAgICByID0gdGhpcy5pbmRlbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpICsgJzwhW0NEQVRBWyc7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuSW5zaWRlVGFnO1xuICAgICAgciArPSBub2RlLnZhbHVlO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgciArPSAnXV0+JyArIHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuTm9uZTtcbiAgICAgIHRoaXMuY2xvc2VOb2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIHJldHVybiByO1xuICAgIH07XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS5jb21tZW50ID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHZhciByO1xuICAgICAgdGhpcy5vcGVuTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuT3BlblRhZztcbiAgICAgIHIgPSB0aGlzLmluZGVudChub2RlLCBvcHRpb25zLCBsZXZlbCkgKyAnPCEtLSAnO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkluc2lkZVRhZztcbiAgICAgIHIgKz0gbm9kZS52YWx1ZTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgIHIgKz0gJyAtLT4nICsgdGhpcy5lbmRsaW5lKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5Ob25lO1xuICAgICAgdGhpcy5jbG9zZU5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLmRlY2xhcmF0aW9uID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHZhciByO1xuICAgICAgdGhpcy5vcGVuTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuT3BlblRhZztcbiAgICAgIHIgPSB0aGlzLmluZGVudChub2RlLCBvcHRpb25zLCBsZXZlbCkgKyAnPD94bWwnO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkluc2lkZVRhZztcbiAgICAgIHIgKz0gJyB2ZXJzaW9uPVwiJyArIG5vZGUudmVyc2lvbiArICdcIic7XG4gICAgICBpZiAobm9kZS5lbmNvZGluZyAhPSBudWxsKSB7XG4gICAgICAgIHIgKz0gJyBlbmNvZGluZz1cIicgKyBub2RlLmVuY29kaW5nICsgJ1wiJztcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLnN0YW5kYWxvbmUgIT0gbnVsbCkge1xuICAgICAgICByICs9ICcgc3RhbmRhbG9uZT1cIicgKyBub2RlLnN0YW5kYWxvbmUgKyAnXCInO1xuICAgICAgfVxuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgciArPSBvcHRpb25zLnNwYWNlQmVmb3JlU2xhc2ggKyAnPz4nO1xuICAgICAgciArPSB0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk5vbmU7XG4gICAgICB0aGlzLmNsb3NlTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICByZXR1cm4gcjtcbiAgICB9O1xuXG4gICAgWE1MV3JpdGVyQmFzZS5wcm90b3R5cGUuZG9jVHlwZSA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICB2YXIgY2hpbGQsIGksIGxlbiwgciwgcmVmO1xuICAgICAgbGV2ZWwgfHwgKGxldmVsID0gMCk7XG4gICAgICB0aGlzLm9wZW5Ob2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5PcGVuVGFnO1xuICAgICAgciA9IHRoaXMuaW5kZW50KG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIHIgKz0gJzwhRE9DVFlQRSAnICsgbm9kZS5yb290KCkubmFtZTtcbiAgICAgIGlmIChub2RlLnB1YklEICYmIG5vZGUuc3lzSUQpIHtcbiAgICAgICAgciArPSAnIFBVQkxJQyBcIicgKyBub2RlLnB1YklEICsgJ1wiIFwiJyArIG5vZGUuc3lzSUQgKyAnXCInO1xuICAgICAgfSBlbHNlIGlmIChub2RlLnN5c0lEKSB7XG4gICAgICAgIHIgKz0gJyBTWVNURU0gXCInICsgbm9kZS5zeXNJRCArICdcIic7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIHIgKz0gJyBbJztcbiAgICAgICAgciArPSB0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuSW5zaWRlVGFnO1xuICAgICAgICByZWYgPSBub2RlLmNoaWxkcmVuO1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBjaGlsZCA9IHJlZltpXTtcbiAgICAgICAgICByICs9IHRoaXMud3JpdGVDaGlsZE5vZGUoY2hpbGQsIG9wdGlvbnMsIGxldmVsICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgICByICs9ICddJztcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgIHIgKz0gb3B0aW9ucy5zcGFjZUJlZm9yZVNsYXNoICsgJz4nO1xuICAgICAgciArPSB0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk5vbmU7XG4gICAgICB0aGlzLmNsb3NlTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICByZXR1cm4gcjtcbiAgICB9O1xuXG4gICAgWE1MV3JpdGVyQmFzZS5wcm90b3R5cGUuZWxlbWVudCA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICB2YXIgYXR0LCBjaGlsZCwgY2hpbGROb2RlQ291bnQsIGZpcnN0Q2hpbGROb2RlLCBpLCBqLCBsZW4sIGxlbjEsIG5hbWUsIHByZXR0eVN1cHByZXNzZWQsIHIsIHJlZiwgcmVmMSwgcmVmMjtcbiAgICAgIGxldmVsIHx8IChsZXZlbCA9IDApO1xuICAgICAgcHJldHR5U3VwcHJlc3NlZCA9IGZhbHNlO1xuICAgICAgciA9ICcnO1xuICAgICAgdGhpcy5vcGVuTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuT3BlblRhZztcbiAgICAgIHIgKz0gdGhpcy5pbmRlbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpICsgJzwnICsgbm9kZS5uYW1lO1xuICAgICAgcmVmID0gbm9kZS5hdHRyaWJzO1xuICAgICAgZm9yIChuYW1lIGluIHJlZikge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChyZWYsIG5hbWUpKSBjb250aW51ZTtcbiAgICAgICAgYXR0ID0gcmVmW25hbWVdO1xuICAgICAgICByICs9IHRoaXMuYXR0cmlidXRlKGF0dCwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgfVxuICAgICAgY2hpbGROb2RlQ291bnQgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgIGZpcnN0Q2hpbGROb2RlID0gY2hpbGROb2RlQ291bnQgPT09IDAgPyBudWxsIDogbm9kZS5jaGlsZHJlblswXTtcbiAgICAgIGlmIChjaGlsZE5vZGVDb3VudCA9PT0gMCB8fCBub2RlLmNoaWxkcmVuLmV2ZXJ5KGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIChlLnR5cGUgPT09IE5vZGVUeXBlLlRleHQgfHwgZS50eXBlID09PSBOb2RlVHlwZS5SYXcpICYmIGUudmFsdWUgPT09ICcnO1xuICAgICAgfSkpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuYWxsb3dFbXB0eSkge1xuICAgICAgICAgIHIgKz0gJz4nO1xuICAgICAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgICAgICByICs9ICc8LycgKyBub2RlLm5hbWUgKyAnPicgKyB0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgICAgICByICs9IG9wdGlvbnMuc3BhY2VCZWZvcmVTbGFzaCArICcvPicgKyB0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMucHJldHR5ICYmIGNoaWxkTm9kZUNvdW50ID09PSAxICYmIChmaXJzdENoaWxkTm9kZS50eXBlID09PSBOb2RlVHlwZS5UZXh0IHx8IGZpcnN0Q2hpbGROb2RlLnR5cGUgPT09IE5vZGVUeXBlLlJhdykgJiYgKGZpcnN0Q2hpbGROb2RlLnZhbHVlICE9IG51bGwpKSB7XG4gICAgICAgIHIgKz0gJz4nO1xuICAgICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuSW5zaWRlVGFnO1xuICAgICAgICBvcHRpb25zLnN1cHByZXNzUHJldHR5Q291bnQrKztcbiAgICAgICAgcHJldHR5U3VwcHJlc3NlZCA9IHRydWU7XG4gICAgICAgIHIgKz0gdGhpcy53cml0ZUNoaWxkTm9kZShmaXJzdENoaWxkTm9kZSwgb3B0aW9ucywgbGV2ZWwgKyAxKTtcbiAgICAgICAgb3B0aW9ucy5zdXBwcmVzc1ByZXR0eUNvdW50LS07XG4gICAgICAgIHByZXR0eVN1cHByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgICByICs9ICc8LycgKyBub2RlLm5hbWUgKyAnPicgKyB0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuZG9udFByZXR0eVRleHROb2Rlcykge1xuICAgICAgICAgIHJlZjEgPSBub2RlLmNoaWxkcmVuO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZjEubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNoaWxkID0gcmVmMVtpXTtcbiAgICAgICAgICAgIGlmICgoY2hpbGQudHlwZSA9PT0gTm9kZVR5cGUuVGV4dCB8fCBjaGlsZC50eXBlID09PSBOb2RlVHlwZS5SYXcpICYmIChjaGlsZC52YWx1ZSAhPSBudWxsKSkge1xuICAgICAgICAgICAgICBvcHRpb25zLnN1cHByZXNzUHJldHR5Q291bnQrKztcbiAgICAgICAgICAgICAgcHJldHR5U3VwcHJlc3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByICs9ICc+JyArIHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5JbnNpZGVUYWc7XG4gICAgICAgIHJlZjIgPSBub2RlLmNoaWxkcmVuO1xuICAgICAgICBmb3IgKGogPSAwLCBsZW4xID0gcmVmMi5sZW5ndGg7IGogPCBsZW4xOyBqKyspIHtcbiAgICAgICAgICBjaGlsZCA9IHJlZjJbal07XG4gICAgICAgICAgciArPSB0aGlzLndyaXRlQ2hpbGROb2RlKGNoaWxkLCBvcHRpb25zLCBsZXZlbCArIDEpO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgICAgciArPSB0aGlzLmluZGVudChub2RlLCBvcHRpb25zLCBsZXZlbCkgKyAnPC8nICsgbm9kZS5uYW1lICsgJz4nO1xuICAgICAgICBpZiAocHJldHR5U3VwcHJlc3NlZCkge1xuICAgICAgICAgIG9wdGlvbnMuc3VwcHJlc3NQcmV0dHlDb3VudC0tO1xuICAgICAgICB9XG4gICAgICAgIHIgKz0gdGhpcy5lbmRsaW5lKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk5vbmU7XG4gICAgICB9XG4gICAgICB0aGlzLmNsb3NlTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICByZXR1cm4gcjtcbiAgICB9O1xuXG4gICAgWE1MV3JpdGVyQmFzZS5wcm90b3R5cGUud3JpdGVDaGlsZE5vZGUgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5DRGF0YTpcbiAgICAgICAgICByZXR1cm4gdGhpcy5jZGF0YShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuQ29tbWVudDpcbiAgICAgICAgICByZXR1cm4gdGhpcy5jb21tZW50KG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5FbGVtZW50OlxuICAgICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgICBjYXNlIE5vZGVUeXBlLlJhdzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5yYXcobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgICBjYXNlIE5vZGVUeXBlLlRleHQ6XG4gICAgICAgICAgcmV0dXJuIHRoaXMudGV4dChub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuUHJvY2Vzc2luZ0luc3RydWN0aW9uOlxuICAgICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NpbmdJbnN0cnVjdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuRHVtbXk6XG4gICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICBjYXNlIE5vZGVUeXBlLkRlY2xhcmF0aW9uOlxuICAgICAgICAgIHJldHVybiB0aGlzLmRlY2xhcmF0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5Eb2NUeXBlOlxuICAgICAgICAgIHJldHVybiB0aGlzLmRvY1R5cGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgICBjYXNlIE5vZGVUeXBlLkF0dHJpYnV0ZURlY2xhcmF0aW9uOlxuICAgICAgICAgIHJldHVybiB0aGlzLmR0ZEF0dExpc3Qobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgICBjYXNlIE5vZGVUeXBlLkVsZW1lbnREZWNsYXJhdGlvbjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5kdGRFbGVtZW50KG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5FbnRpdHlEZWNsYXJhdGlvbjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5kdGRFbnRpdHkobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgICBjYXNlIE5vZGVUeXBlLk5vdGF0aW9uRGVjbGFyYXRpb246XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZHRkTm90YXRpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gWE1MIG5vZGUgdHlwZTogXCIgKyBub2RlLmNvbnN0cnVjdG9yLm5hbWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS5wcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgdmFyIHI7XG4gICAgICB0aGlzLm9wZW5Ob2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5PcGVuVGFnO1xuICAgICAgciA9IHRoaXMuaW5kZW50KG5vZGUsIG9wdGlvbnMsIGxldmVsKSArICc8Pyc7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuSW5zaWRlVGFnO1xuICAgICAgciArPSBub2RlLnRhcmdldDtcbiAgICAgIGlmIChub2RlLnZhbHVlKSB7XG4gICAgICAgIHIgKz0gJyAnICsgbm9kZS52YWx1ZTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgIHIgKz0gb3B0aW9ucy5zcGFjZUJlZm9yZVNsYXNoICsgJz8+JztcbiAgICAgIHIgKz0gdGhpcy5lbmRsaW5lKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5Ob25lO1xuICAgICAgdGhpcy5jbG9zZU5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLnJhdyA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICB2YXIgcjtcbiAgICAgIHRoaXMub3Blbk5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk9wZW5UYWc7XG4gICAgICByID0gdGhpcy5pbmRlbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkluc2lkZVRhZztcbiAgICAgIHIgKz0gbm9kZS52YWx1ZTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgIHIgKz0gdGhpcy5lbmRsaW5lKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5Ob25lO1xuICAgICAgdGhpcy5jbG9zZU5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfTtcblxuICAgIFhNTFdyaXRlckJhc2UucHJvdG90eXBlLnRleHQgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgdmFyIHI7XG4gICAgICB0aGlzLm9wZW5Ob2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5PcGVuVGFnO1xuICAgICAgciA9IHRoaXMuaW5kZW50KG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5JbnNpZGVUYWc7XG4gICAgICByICs9IG5vZGUudmFsdWU7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuQ2xvc2VUYWc7XG4gICAgICByICs9IHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuTm9uZTtcbiAgICAgIHRoaXMuY2xvc2VOb2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIHJldHVybiByO1xuICAgIH07XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS5kdGRBdHRMaXN0ID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHZhciByO1xuICAgICAgdGhpcy5vcGVuTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuT3BlblRhZztcbiAgICAgIHIgPSB0aGlzLmluZGVudChub2RlLCBvcHRpb25zLCBsZXZlbCkgKyAnPCFBVFRMSVNUJztcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5JbnNpZGVUYWc7XG4gICAgICByICs9ICcgJyArIG5vZGUuZWxlbWVudE5hbWUgKyAnICcgKyBub2RlLmF0dHJpYnV0ZU5hbWUgKyAnICcgKyBub2RlLmF0dHJpYnV0ZVR5cGU7XG4gICAgICBpZiAobm9kZS5kZWZhdWx0VmFsdWVUeXBlICE9PSAnI0RFRkFVTFQnKSB7XG4gICAgICAgIHIgKz0gJyAnICsgbm9kZS5kZWZhdWx0VmFsdWVUeXBlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUuZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHIgKz0gJyBcIicgKyBub2RlLmRlZmF1bHRWYWx1ZSArICdcIic7XG4gICAgICB9XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuQ2xvc2VUYWc7XG4gICAgICByICs9IG9wdGlvbnMuc3BhY2VCZWZvcmVTbGFzaCArICc+JyArIHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuTm9uZTtcbiAgICAgIHRoaXMuY2xvc2VOb2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIHJldHVybiByO1xuICAgIH07XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS5kdGRFbGVtZW50ID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHZhciByO1xuICAgICAgdGhpcy5vcGVuTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuT3BlblRhZztcbiAgICAgIHIgPSB0aGlzLmluZGVudChub2RlLCBvcHRpb25zLCBsZXZlbCkgKyAnPCFFTEVNRU5UJztcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5JbnNpZGVUYWc7XG4gICAgICByICs9ICcgJyArIG5vZGUubmFtZSArICcgJyArIG5vZGUudmFsdWU7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuQ2xvc2VUYWc7XG4gICAgICByICs9IG9wdGlvbnMuc3BhY2VCZWZvcmVTbGFzaCArICc+JyArIHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuTm9uZTtcbiAgICAgIHRoaXMuY2xvc2VOb2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIHJldHVybiByO1xuICAgIH07XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS5kdGRFbnRpdHkgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgdmFyIHI7XG4gICAgICB0aGlzLm9wZW5Ob2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5PcGVuVGFnO1xuICAgICAgciA9IHRoaXMuaW5kZW50KG5vZGUsIG9wdGlvbnMsIGxldmVsKSArICc8IUVOVElUWSc7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuSW5zaWRlVGFnO1xuICAgICAgaWYgKG5vZGUucGUpIHtcbiAgICAgICAgciArPSAnICUnO1xuICAgICAgfVxuICAgICAgciArPSAnICcgKyBub2RlLm5hbWU7XG4gICAgICBpZiAobm9kZS52YWx1ZSkge1xuICAgICAgICByICs9ICcgXCInICsgbm9kZS52YWx1ZSArICdcIic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobm9kZS5wdWJJRCAmJiBub2RlLnN5c0lEKSB7XG4gICAgICAgICAgciArPSAnIFBVQkxJQyBcIicgKyBub2RlLnB1YklEICsgJ1wiIFwiJyArIG5vZGUuc3lzSUQgKyAnXCInO1xuICAgICAgICB9IGVsc2UgaWYgKG5vZGUuc3lzSUQpIHtcbiAgICAgICAgICByICs9ICcgU1lTVEVNIFwiJyArIG5vZGUuc3lzSUQgKyAnXCInO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlLm5EYXRhKSB7XG4gICAgICAgICAgciArPSAnIE5EQVRBICcgKyBub2RlLm5EYXRhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuQ2xvc2VUYWc7XG4gICAgICByICs9IG9wdGlvbnMuc3BhY2VCZWZvcmVTbGFzaCArICc+JyArIHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuTm9uZTtcbiAgICAgIHRoaXMuY2xvc2VOb2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIHJldHVybiByO1xuICAgIH07XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS5kdGROb3RhdGlvbiA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICB2YXIgcjtcbiAgICAgIHRoaXMub3Blbk5vZGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk9wZW5UYWc7XG4gICAgICByID0gdGhpcy5pbmRlbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpICsgJzwhTk9UQVRJT04nO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkluc2lkZVRhZztcbiAgICAgIHIgKz0gJyAnICsgbm9kZS5uYW1lO1xuICAgICAgaWYgKG5vZGUucHViSUQgJiYgbm9kZS5zeXNJRCkge1xuICAgICAgICByICs9ICcgUFVCTElDIFwiJyArIG5vZGUucHViSUQgKyAnXCIgXCInICsgbm9kZS5zeXNJRCArICdcIic7XG4gICAgICB9IGVsc2UgaWYgKG5vZGUucHViSUQpIHtcbiAgICAgICAgciArPSAnIFBVQkxJQyBcIicgKyBub2RlLnB1YklEICsgJ1wiJztcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5zeXNJRCkge1xuICAgICAgICByICs9ICcgU1lTVEVNIFwiJyArIG5vZGUuc3lzSUQgKyAnXCInO1xuICAgICAgfVxuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgciArPSBvcHRpb25zLnNwYWNlQmVmb3JlU2xhc2ggKyAnPicgKyB0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk5vbmU7XG4gICAgICB0aGlzLmNsb3NlTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICByZXR1cm4gcjtcbiAgICB9O1xuXG4gICAgWE1MV3JpdGVyQmFzZS5wcm90b3R5cGUub3Blbk5vZGUgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge307XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS5jbG9zZU5vZGUgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge307XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS5vcGVuQXR0cmlidXRlID0gZnVuY3Rpb24oYXR0LCBvcHRpb25zLCBsZXZlbCkge307XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS5jbG9zZUF0dHJpYnV0ZSA9IGZ1bmN0aW9uKGF0dCwgb3B0aW9ucywgbGV2ZWwpIHt9O1xuXG4gICAgcmV0dXJuIFhNTFdyaXRlckJhc2U7XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MU3RyaW5nV3JpdGVyLCBYTUxXcml0ZXJCYXNlLFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgWE1MV3JpdGVyQmFzZSA9IHJlcXVpcmUoJy4vWE1MV3JpdGVyQmFzZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MU3RyaW5nV3JpdGVyID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MU3RyaW5nV3JpdGVyLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTFN0cmluZ1dyaXRlcihvcHRpb25zKSB7XG4gICAgICBYTUxTdHJpbmdXcml0ZXIuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgWE1MU3RyaW5nV3JpdGVyLnByb3RvdHlwZS5kb2N1bWVudCA9IGZ1bmN0aW9uKGRvYywgb3B0aW9ucykge1xuICAgICAgdmFyIGNoaWxkLCBpLCBsZW4sIHIsIHJlZjtcbiAgICAgIG9wdGlvbnMgPSB0aGlzLmZpbHRlck9wdGlvbnMob3B0aW9ucyk7XG4gICAgICByID0gJyc7XG4gICAgICByZWYgPSBkb2MuY2hpbGRyZW47XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgY2hpbGQgPSByZWZbaV07XG4gICAgICAgIHIgKz0gdGhpcy53cml0ZUNoaWxkTm9kZShjaGlsZCwgb3B0aW9ucywgMCk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5wcmV0dHkgJiYgci5zbGljZSgtb3B0aW9ucy5uZXdsaW5lLmxlbmd0aCkgPT09IG9wdGlvbnMubmV3bGluZSkge1xuICAgICAgICByID0gci5zbGljZSgwLCAtb3B0aW9ucy5uZXdsaW5lLmxlbmd0aCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTFN0cmluZ1dyaXRlcjtcblxuICB9KShYTUxXcml0ZXJCYXNlKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFhNTERPTUNvbmZpZ3VyYXRpb24sIFhNTERPTUltcGxlbWVudGF0aW9uLCBYTUxEb2N1bWVudCwgWE1MTm9kZSwgWE1MU3RyaW5nV3JpdGVyLCBYTUxTdHJpbmdpZmllciwgaXNQbGFpbk9iamVjdCxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIGlzUGxhaW5PYmplY3QgPSByZXF1aXJlKCcuL1V0aWxpdHknKS5pc1BsYWluT2JqZWN0O1xuXG4gIFhNTERPTUltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9YTUxET01JbXBsZW1lbnRhdGlvbicpO1xuXG4gIFhNTERPTUNvbmZpZ3VyYXRpb24gPSByZXF1aXJlKCcuL1hNTERPTUNvbmZpZ3VyYXRpb24nKTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MU3RyaW5naWZpZXIgPSByZXF1aXJlKCcuL1hNTFN0cmluZ2lmaWVyJyk7XG5cbiAgWE1MU3RyaW5nV3JpdGVyID0gcmVxdWlyZSgnLi9YTUxTdHJpbmdXcml0ZXInKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERvY3VtZW50ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MRG9jdW1lbnQsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MRG9jdW1lbnQob3B0aW9ucykge1xuICAgICAgWE1MRG9jdW1lbnQuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgbnVsbCk7XG4gICAgICB0aGlzLm5hbWUgPSBcIiNkb2N1bWVudFwiO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuRG9jdW1lbnQ7XG4gICAgICB0aGlzLmRvY3VtZW50VVJJID0gbnVsbDtcbiAgICAgIHRoaXMuZG9tQ29uZmlnID0gbmV3IFhNTERPTUNvbmZpZ3VyYXRpb24oKTtcbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG4gICAgICBpZiAoIW9wdGlvbnMud3JpdGVyKSB7XG4gICAgICAgIG9wdGlvbnMud3JpdGVyID0gbmV3IFhNTFN0cmluZ1dyaXRlcigpO1xuICAgICAgfVxuICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgIHRoaXMuc3RyaW5naWZ5ID0gbmV3IFhNTFN0cmluZ2lmaWVyKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEb2N1bWVudC5wcm90b3R5cGUsICdpbXBsZW1lbnRhdGlvbicsIHtcbiAgICAgIHZhbHVlOiBuZXcgWE1MRE9NSW1wbGVtZW50YXRpb24oKVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERvY3VtZW50LnByb3RvdHlwZSwgJ2RvY3R5cGUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2hpbGQsIGksIGxlbiwgcmVmO1xuICAgICAgICByZWYgPSB0aGlzLmNoaWxkcmVuO1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBjaGlsZCA9IHJlZltpXTtcbiAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gTm9kZVR5cGUuRG9jVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEb2N1bWVudC5wcm90b3R5cGUsICdkb2N1bWVudEVsZW1lbnQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290T2JqZWN0IHx8IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRG9jdW1lbnQucHJvdG90eXBlLCAnaW5wdXRFbmNvZGluZycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERvY3VtZW50LnByb3RvdHlwZSwgJ3N0cmljdEVycm9yQ2hlY2tpbmcnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRG9jdW1lbnQucHJvdG90eXBlLCAneG1sRW5jb2RpbmcnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5jaGlsZHJlbi5sZW5ndGggIT09IDAgJiYgdGhpcy5jaGlsZHJlblswXS50eXBlID09PSBOb2RlVHlwZS5EZWNsYXJhdGlvbikge1xuICAgICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuWzBdLmVuY29kaW5nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRG9jdW1lbnQucHJvdG90eXBlLCAneG1sU3RhbmRhbG9uZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCAhPT0gMCAmJiB0aGlzLmNoaWxkcmVuWzBdLnR5cGUgPT09IE5vZGVUeXBlLkRlY2xhcmF0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5bMF0uc3RhbmRhbG9uZSA9PT0gJ3llcyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRG9jdW1lbnQucHJvdG90eXBlLCAneG1sVmVyc2lvbicsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCAhPT0gMCAmJiB0aGlzLmNoaWxkcmVuWzBdLnR5cGUgPT09IE5vZGVUeXBlLkRlY2xhcmF0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5bMF0udmVyc2lvbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gXCIxLjBcIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERvY3VtZW50LnByb3RvdHlwZSwgJ1VSTCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50VVJJO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERvY3VtZW50LnByb3RvdHlwZSwgJ29yaWdpbicsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERvY3VtZW50LnByb3RvdHlwZSwgJ2NvbXBhdE1vZGUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEb2N1bWVudC5wcm90b3R5cGUsICdjaGFyYWN0ZXJTZXQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEb2N1bWVudC5wcm90b3R5cGUsICdjb250ZW50VHlwZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKHdyaXRlcikge1xuICAgICAgdmFyIHdyaXRlck9wdGlvbnM7XG4gICAgICB3cml0ZXJPcHRpb25zID0ge307XG4gICAgICBpZiAoIXdyaXRlcikge1xuICAgICAgICB3cml0ZXIgPSB0aGlzLm9wdGlvbnMud3JpdGVyO1xuICAgICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHdyaXRlcikpIHtcbiAgICAgICAgd3JpdGVyT3B0aW9ucyA9IHdyaXRlcjtcbiAgICAgICAgd3JpdGVyID0gdGhpcy5vcHRpb25zLndyaXRlcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cml0ZXIuZG9jdW1lbnQodGhpcywgd3JpdGVyLmZpbHRlck9wdGlvbnMod3JpdGVyT3B0aW9ucykpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5kb2N1bWVudCh0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uKHRhZ05hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZVRleHROb2RlID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlQ29tbWVudCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZUNEQVRBU2VjdGlvbiA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZVByb2Nlc3NpbmdJbnN0cnVjdGlvbiA9IGZ1bmN0aW9uKHRhcmdldCwgZGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlQXR0cmlidXRlID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlRW50aXR5UmVmZXJlbmNlID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBmdW5jdGlvbih0YWduYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5pbXBvcnROb2RlID0gZnVuY3Rpb24oaW1wb3J0ZWROb2RlLCBkZWVwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVFbGVtZW50TlMgPSBmdW5jdGlvbihuYW1lc3BhY2VVUkksIHF1YWxpZmllZE5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZUF0dHJpYnV0ZU5TID0gZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBxdWFsaWZpZWROYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5nZXRFbGVtZW50c0J5VGFnTmFtZU5TID0gZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRCeUlkID0gZnVuY3Rpb24oZWxlbWVudElkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5hZG9wdE5vZGUgPSBmdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLm5vcm1hbGl6ZURvY3VtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5yZW5hbWVOb2RlID0gZnVuY3Rpb24obm9kZSwgbmFtZXNwYWNlVVJJLCBxdWFsaWZpZWROYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gZnVuY3Rpb24oY2xhc3NOYW1lcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlRXZlbnQgPSBmdW5jdGlvbihldmVudEludGVyZmFjZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlUmFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZU5vZGVJdGVyYXRvciA9IGZ1bmN0aW9uKHJvb3QsIHdoYXRUb1Nob3csIGZpbHRlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlVHJlZVdhbGtlciA9IGZ1bmN0aW9uKHJvb3QsIHdoYXRUb1Nob3csIGZpbHRlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRG9jdW1lbnQ7XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBXcml0ZXJTdGF0ZSwgWE1MQXR0cmlidXRlLCBYTUxDRGF0YSwgWE1MQ29tbWVudCwgWE1MRFREQXR0TGlzdCwgWE1MRFRERWxlbWVudCwgWE1MRFRERW50aXR5LCBYTUxEVEROb3RhdGlvbiwgWE1MRGVjbGFyYXRpb24sIFhNTERvY1R5cGUsIFhNTERvY3VtZW50LCBYTUxEb2N1bWVudENCLCBYTUxFbGVtZW50LCBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24sIFhNTFJhdywgWE1MU3RyaW5nV3JpdGVyLCBYTUxTdHJpbmdpZmllciwgWE1MVGV4dCwgZ2V0VmFsdWUsIGlzRnVuY3Rpb24sIGlzT2JqZWN0LCBpc1BsYWluT2JqZWN0LCByZWYsXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIHJlZiA9IHJlcXVpcmUoJy4vVXRpbGl0eScpLCBpc09iamVjdCA9IHJlZi5pc09iamVjdCwgaXNGdW5jdGlvbiA9IHJlZi5pc0Z1bmN0aW9uLCBpc1BsYWluT2JqZWN0ID0gcmVmLmlzUGxhaW5PYmplY3QsIGdldFZhbHVlID0gcmVmLmdldFZhbHVlO1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIFhNTERvY3VtZW50ID0gcmVxdWlyZSgnLi9YTUxEb2N1bWVudCcpO1xuXG4gIFhNTEVsZW1lbnQgPSByZXF1aXJlKCcuL1hNTEVsZW1lbnQnKTtcblxuICBYTUxDRGF0YSA9IHJlcXVpcmUoJy4vWE1MQ0RhdGEnKTtcblxuICBYTUxDb21tZW50ID0gcmVxdWlyZSgnLi9YTUxDb21tZW50Jyk7XG5cbiAgWE1MUmF3ID0gcmVxdWlyZSgnLi9YTUxSYXcnKTtcblxuICBYTUxUZXh0ID0gcmVxdWlyZSgnLi9YTUxUZXh0Jyk7XG5cbiAgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uID0gcmVxdWlyZSgnLi9YTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24nKTtcblxuICBYTUxEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4vWE1MRGVjbGFyYXRpb24nKTtcblxuICBYTUxEb2NUeXBlID0gcmVxdWlyZSgnLi9YTUxEb2NUeXBlJyk7XG5cbiAgWE1MRFREQXR0TGlzdCA9IHJlcXVpcmUoJy4vWE1MRFREQXR0TGlzdCcpO1xuXG4gIFhNTERUREVudGl0eSA9IHJlcXVpcmUoJy4vWE1MRFRERW50aXR5Jyk7XG5cbiAgWE1MRFRERWxlbWVudCA9IHJlcXVpcmUoJy4vWE1MRFRERWxlbWVudCcpO1xuXG4gIFhNTERURE5vdGF0aW9uID0gcmVxdWlyZSgnLi9YTUxEVEROb3RhdGlvbicpO1xuXG4gIFhNTEF0dHJpYnV0ZSA9IHJlcXVpcmUoJy4vWE1MQXR0cmlidXRlJyk7XG5cbiAgWE1MU3RyaW5naWZpZXIgPSByZXF1aXJlKCcuL1hNTFN0cmluZ2lmaWVyJyk7XG5cbiAgWE1MU3RyaW5nV3JpdGVyID0gcmVxdWlyZSgnLi9YTUxTdHJpbmdXcml0ZXInKTtcblxuICBXcml0ZXJTdGF0ZSA9IHJlcXVpcmUoJy4vV3JpdGVyU3RhdGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERvY3VtZW50Q0IgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MRG9jdW1lbnRDQihvcHRpb25zLCBvbkRhdGEsIG9uRW5kKSB7XG4gICAgICB2YXIgd3JpdGVyT3B0aW9ucztcbiAgICAgIHRoaXMubmFtZSA9IFwiP3htbFwiO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuRG9jdW1lbnQ7XG4gICAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuICAgICAgd3JpdGVyT3B0aW9ucyA9IHt9O1xuICAgICAgaWYgKCFvcHRpb25zLndyaXRlcikge1xuICAgICAgICBvcHRpb25zLndyaXRlciA9IG5ldyBYTUxTdHJpbmdXcml0ZXIoKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChvcHRpb25zLndyaXRlcikpIHtcbiAgICAgICAgd3JpdGVyT3B0aW9ucyA9IG9wdGlvbnMud3JpdGVyO1xuICAgICAgICBvcHRpb25zLndyaXRlciA9IG5ldyBYTUxTdHJpbmdXcml0ZXIoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICB0aGlzLndyaXRlciA9IG9wdGlvbnMud3JpdGVyO1xuICAgICAgdGhpcy53cml0ZXJPcHRpb25zID0gdGhpcy53cml0ZXIuZmlsdGVyT3B0aW9ucyh3cml0ZXJPcHRpb25zKTtcbiAgICAgIHRoaXMuc3RyaW5naWZ5ID0gbmV3IFhNTFN0cmluZ2lmaWVyKG9wdGlvbnMpO1xuICAgICAgdGhpcy5vbkRhdGFDYWxsYmFjayA9IG9uRGF0YSB8fCBmdW5jdGlvbigpIHt9O1xuICAgICAgdGhpcy5vbkVuZENhbGxiYWNrID0gb25FbmQgfHwgZnVuY3Rpb24oKSB7fTtcbiAgICAgIHRoaXMuY3VycmVudE5vZGUgPSBudWxsO1xuICAgICAgdGhpcy5jdXJyZW50TGV2ZWwgPSAtMTtcbiAgICAgIHRoaXMub3BlblRhZ3MgPSB7fTtcbiAgICAgIHRoaXMuZG9jdW1lbnRTdGFydGVkID0gZmFsc2U7XG4gICAgICB0aGlzLmRvY3VtZW50Q29tcGxldGVkID0gZmFsc2U7XG4gICAgICB0aGlzLnJvb3QgPSBudWxsO1xuICAgIH1cblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmNyZWF0ZUNoaWxkTm9kZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHZhciBhdHQsIGF0dE5hbWUsIGF0dHJpYnV0ZXMsIGNoaWxkLCBpLCBsZW4sIHJlZjEsIHJlZjI7XG4gICAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlIE5vZGVUeXBlLkNEYXRhOlxuICAgICAgICAgIHRoaXMuY2RhdGEobm9kZS52YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuQ29tbWVudDpcbiAgICAgICAgICB0aGlzLmNvbW1lbnQobm9kZS52YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuRWxlbWVudDpcbiAgICAgICAgICBhdHRyaWJ1dGVzID0ge307XG4gICAgICAgICAgcmVmMSA9IG5vZGUuYXR0cmlicztcbiAgICAgICAgICBmb3IgKGF0dE5hbWUgaW4gcmVmMSkge1xuICAgICAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwocmVmMSwgYXR0TmFtZSkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgYXR0ID0gcmVmMVthdHROYW1lXTtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXNbYXR0TmFtZV0gPSBhdHQudmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMubm9kZShub2RlLm5hbWUsIGF0dHJpYnV0ZXMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE5vZGVUeXBlLkR1bW15OlxuICAgICAgICAgIHRoaXMuZHVtbXkoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5SYXc6XG4gICAgICAgICAgdGhpcy5yYXcobm9kZS52YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuVGV4dDpcbiAgICAgICAgICB0aGlzLnRleHQobm9kZS52YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuUHJvY2Vzc2luZ0luc3RydWN0aW9uOlxuICAgICAgICAgIHRoaXMuaW5zdHJ1Y3Rpb24obm9kZS50YXJnZXQsIG5vZGUudmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgWE1MIG5vZGUgdHlwZSBpcyBub3Qgc3VwcG9ydGVkIGluIGEgSlMgb2JqZWN0OiBcIiArIG5vZGUuY29uc3RydWN0b3IubmFtZSk7XG4gICAgICB9XG4gICAgICByZWYyID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZjIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgY2hpbGQgPSByZWYyW2ldO1xuICAgICAgICB0aGlzLmNyZWF0ZUNoaWxkTm9kZShjaGlsZCk7XG4gICAgICAgIGlmIChjaGlsZC50eXBlID09PSBOb2RlVHlwZS5FbGVtZW50KSB7XG4gICAgICAgICAgdGhpcy51cCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZHVtbXkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5ub2RlID0gZnVuY3Rpb24obmFtZSwgYXR0cmlidXRlcywgdGV4dCkge1xuICAgICAgdmFyIHJlZjE7XG4gICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3Npbmcgbm9kZSBuYW1lLlwiKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnJvb3QgJiYgdGhpcy5jdXJyZW50TGV2ZWwgPT09IC0xKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRvY3VtZW50IGNhbiBvbmx5IGhhdmUgb25lIHJvb3Qgbm9kZS4gXCIgKyB0aGlzLmRlYnVnSW5mbyhuYW1lKSk7XG4gICAgICB9XG4gICAgICB0aGlzLm9wZW5DdXJyZW50KCk7XG4gICAgICBuYW1lID0gZ2V0VmFsdWUobmFtZSk7XG4gICAgICBpZiAoYXR0cmlidXRlcyA9PSBudWxsKSB7XG4gICAgICAgIGF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgIH1cbiAgICAgIGF0dHJpYnV0ZXMgPSBnZXRWYWx1ZShhdHRyaWJ1dGVzKTtcbiAgICAgIGlmICghaXNPYmplY3QoYXR0cmlidXRlcykpIHtcbiAgICAgICAgcmVmMSA9IFthdHRyaWJ1dGVzLCB0ZXh0XSwgdGV4dCA9IHJlZjFbMF0sIGF0dHJpYnV0ZXMgPSByZWYxWzFdO1xuICAgICAgfVxuICAgICAgdGhpcy5jdXJyZW50Tm9kZSA9IG5ldyBYTUxFbGVtZW50KHRoaXMsIG5hbWUsIGF0dHJpYnV0ZXMpO1xuICAgICAgdGhpcy5jdXJyZW50Tm9kZS5jaGlsZHJlbiA9IGZhbHNlO1xuICAgICAgdGhpcy5jdXJyZW50TGV2ZWwrKztcbiAgICAgIHRoaXMub3BlblRhZ3NbdGhpcy5jdXJyZW50TGV2ZWxdID0gdGhpcy5jdXJyZW50Tm9kZTtcbiAgICAgIGlmICh0ZXh0ICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy50ZXh0KHRleHQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmVsZW1lbnQgPSBmdW5jdGlvbihuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KSB7XG4gICAgICB2YXIgY2hpbGQsIGksIGxlbiwgb2xkVmFsaWRhdGlvbkZsYWcsIHJlZjEsIHJvb3Q7XG4gICAgICBpZiAodGhpcy5jdXJyZW50Tm9kZSAmJiB0aGlzLmN1cnJlbnROb2RlLnR5cGUgPT09IE5vZGVUeXBlLkRvY1R5cGUpIHtcbiAgICAgICAgdGhpcy5kdGRFbGVtZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShuYW1lKSB8fCBpc09iamVjdChuYW1lKSB8fCBpc0Z1bmN0aW9uKG5hbWUpKSB7XG4gICAgICAgICAgb2xkVmFsaWRhdGlvbkZsYWcgPSB0aGlzLm9wdGlvbnMubm9WYWxpZGF0aW9uO1xuICAgICAgICAgIHRoaXMub3B0aW9ucy5ub1ZhbGlkYXRpb24gPSB0cnVlO1xuICAgICAgICAgIHJvb3QgPSBuZXcgWE1MRG9jdW1lbnQodGhpcy5vcHRpb25zKS5lbGVtZW50KCdURU1QX1JPT1QnKTtcbiAgICAgICAgICByb290LmVsZW1lbnQobmFtZSk7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLm5vVmFsaWRhdGlvbiA9IG9sZFZhbGlkYXRpb25GbGFnO1xuICAgICAgICAgIHJlZjEgPSByb290LmNoaWxkcmVuO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZjEubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNoaWxkID0gcmVmMVtpXTtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ2hpbGROb2RlKGNoaWxkKTtcbiAgICAgICAgICAgIGlmIChjaGlsZC50eXBlID09PSBOb2RlVHlwZS5FbGVtZW50KSB7XG4gICAgICAgICAgICAgIHRoaXMudXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5ub2RlKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuYXR0cmlidXRlID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHZhciBhdHROYW1lLCBhdHRWYWx1ZTtcbiAgICAgIGlmICghdGhpcy5jdXJyZW50Tm9kZSB8fCB0aGlzLmN1cnJlbnROb2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImF0dCgpIGNhbiBvbmx5IGJlIHVzZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgYW4gZWxlKCkgY2FsbCBpbiBjYWxsYmFjayBtb2RlLiBcIiArIHRoaXMuZGVidWdJbmZvKG5hbWUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChuYW1lICE9IG51bGwpIHtcbiAgICAgICAgbmFtZSA9IGdldFZhbHVlKG5hbWUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KG5hbWUpKSB7XG4gICAgICAgIGZvciAoYXR0TmFtZSBpbiBuYW1lKSB7XG4gICAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwobmFtZSwgYXR0TmFtZSkpIGNvbnRpbnVlO1xuICAgICAgICAgIGF0dFZhbHVlID0gbmFtZVthdHROYW1lXTtcbiAgICAgICAgICB0aGlzLmF0dHJpYnV0ZShhdHROYW1lLCBhdHRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICAgIHZhbHVlID0gdmFsdWUuYXBwbHkoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmtlZXBOdWxsQXR0cmlidXRlcyAmJiAodmFsdWUgPT0gbnVsbCkpIHtcbiAgICAgICAgICB0aGlzLmN1cnJlbnROb2RlLmF0dHJpYnNbbmFtZV0gPSBuZXcgWE1MQXR0cmlidXRlKHRoaXMsIG5hbWUsIFwiXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLmN1cnJlbnROb2RlLmF0dHJpYnNbbmFtZV0gPSBuZXcgWE1MQXR0cmlidXRlKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLnRleHQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIG5vZGU7XG4gICAgICB0aGlzLm9wZW5DdXJyZW50KCk7XG4gICAgICBub2RlID0gbmV3IFhNTFRleHQodGhpcywgdmFsdWUpO1xuICAgICAgdGhpcy5vbkRhdGEodGhpcy53cml0ZXIudGV4dChub2RlLCB0aGlzLndyaXRlck9wdGlvbnMsIHRoaXMuY3VycmVudExldmVsICsgMSksIHRoaXMuY3VycmVudExldmVsICsgMSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuY2RhdGEgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIG5vZGU7XG4gICAgICB0aGlzLm9wZW5DdXJyZW50KCk7XG4gICAgICBub2RlID0gbmV3IFhNTENEYXRhKHRoaXMsIHZhbHVlKTtcbiAgICAgIHRoaXMub25EYXRhKHRoaXMud3JpdGVyLmNkYXRhKG5vZGUsIHRoaXMud3JpdGVyT3B0aW9ucywgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKSwgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5jb21tZW50ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBub2RlO1xuICAgICAgdGhpcy5vcGVuQ3VycmVudCgpO1xuICAgICAgbm9kZSA9IG5ldyBYTUxDb21tZW50KHRoaXMsIHZhbHVlKTtcbiAgICAgIHRoaXMub25EYXRhKHRoaXMud3JpdGVyLmNvbW1lbnQobm9kZSwgdGhpcy53cml0ZXJPcHRpb25zLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLnJhdyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIHRoaXMub3BlbkN1cnJlbnQoKTtcbiAgICAgIG5vZGUgPSBuZXcgWE1MUmF3KHRoaXMsIHZhbHVlKTtcbiAgICAgIHRoaXMub25EYXRhKHRoaXMud3JpdGVyLnJhdyhub2RlLCB0aGlzLndyaXRlck9wdGlvbnMsIHRoaXMuY3VycmVudExldmVsICsgMSksIHRoaXMuY3VycmVudExldmVsICsgMSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuaW5zdHJ1Y3Rpb24gPSBmdW5jdGlvbih0YXJnZXQsIHZhbHVlKSB7XG4gICAgICB2YXIgaSwgaW5zVGFyZ2V0LCBpbnNWYWx1ZSwgbGVuLCBub2RlO1xuICAgICAgdGhpcy5vcGVuQ3VycmVudCgpO1xuICAgICAgaWYgKHRhcmdldCAhPSBudWxsKSB7XG4gICAgICAgIHRhcmdldCA9IGdldFZhbHVlKHRhcmdldCk7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICB2YWx1ZSA9IGdldFZhbHVlKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkpIHtcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gdGFyZ2V0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgaW5zVGFyZ2V0ID0gdGFyZ2V0W2ldO1xuICAgICAgICAgIHRoaXMuaW5zdHJ1Y3Rpb24oaW5zVGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc09iamVjdCh0YXJnZXQpKSB7XG4gICAgICAgIGZvciAoaW5zVGFyZ2V0IGluIHRhcmdldCkge1xuICAgICAgICAgIGlmICghaGFzUHJvcC5jYWxsKHRhcmdldCwgaW5zVGFyZ2V0KSkgY29udGludWU7XG4gICAgICAgICAgaW5zVmFsdWUgPSB0YXJnZXRbaW5zVGFyZ2V0XTtcbiAgICAgICAgICB0aGlzLmluc3RydWN0aW9uKGluc1RhcmdldCwgaW5zVmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmFwcGx5KCk7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZSA9IG5ldyBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24odGhpcywgdGFyZ2V0LCB2YWx1ZSk7XG4gICAgICAgIHRoaXMub25EYXRhKHRoaXMud3JpdGVyLnByb2Nlc3NpbmdJbnN0cnVjdGlvbihub2RlLCB0aGlzLndyaXRlck9wdGlvbnMsIHRoaXMuY3VycmVudExldmVsICsgMSksIHRoaXMuY3VycmVudExldmVsICsgMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZGVjbGFyYXRpb24gPSBmdW5jdGlvbih2ZXJzaW9uLCBlbmNvZGluZywgc3RhbmRhbG9uZSkge1xuICAgICAgdmFyIG5vZGU7XG4gICAgICB0aGlzLm9wZW5DdXJyZW50KCk7XG4gICAgICBpZiAodGhpcy5kb2N1bWVudFN0YXJ0ZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZGVjbGFyYXRpb24oKSBtdXN0IGJlIHRoZSBmaXJzdCBub2RlLlwiKTtcbiAgICAgIH1cbiAgICAgIG5vZGUgPSBuZXcgWE1MRGVjbGFyYXRpb24odGhpcywgdmVyc2lvbiwgZW5jb2RpbmcsIHN0YW5kYWxvbmUpO1xuICAgICAgdGhpcy5vbkRhdGEodGhpcy53cml0ZXIuZGVjbGFyYXRpb24obm9kZSwgdGhpcy53cml0ZXJPcHRpb25zLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmRvY3R5cGUgPSBmdW5jdGlvbihyb290LCBwdWJJRCwgc3lzSUQpIHtcbiAgICAgIHRoaXMub3BlbkN1cnJlbnQoKTtcbiAgICAgIGlmIChyb290ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyByb290IG5vZGUgbmFtZS5cIik7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5yb290KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImR0ZCgpIG11c3QgY29tZSBiZWZvcmUgdGhlIHJvb3Qgbm9kZS5cIik7XG4gICAgICB9XG4gICAgICB0aGlzLmN1cnJlbnROb2RlID0gbmV3IFhNTERvY1R5cGUodGhpcywgcHViSUQsIHN5c0lEKTtcbiAgICAgIHRoaXMuY3VycmVudE5vZGUucm9vdE5vZGVOYW1lID0gcm9vdDtcbiAgICAgIHRoaXMuY3VycmVudE5vZGUuY2hpbGRyZW4gPSBmYWxzZTtcbiAgICAgIHRoaXMuY3VycmVudExldmVsKys7XG4gICAgICB0aGlzLm9wZW5UYWdzW3RoaXMuY3VycmVudExldmVsXSA9IHRoaXMuY3VycmVudE5vZGU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZHRkRWxlbWVudCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIHRoaXMub3BlbkN1cnJlbnQoKTtcbiAgICAgIG5vZGUgPSBuZXcgWE1MRFRERWxlbWVudCh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB0aGlzLm9uRGF0YSh0aGlzLndyaXRlci5kdGRFbGVtZW50KG5vZGUsIHRoaXMud3JpdGVyT3B0aW9ucywgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKSwgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5hdHRMaXN0ID0gZnVuY3Rpb24oZWxlbWVudE5hbWUsIGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVR5cGUsIGRlZmF1bHRWYWx1ZVR5cGUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgdmFyIG5vZGU7XG4gICAgICB0aGlzLm9wZW5DdXJyZW50KCk7XG4gICAgICBub2RlID0gbmV3IFhNTERUREF0dExpc3QodGhpcywgZWxlbWVudE5hbWUsIGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVR5cGUsIGRlZmF1bHRWYWx1ZVR5cGUsIGRlZmF1bHRWYWx1ZSk7XG4gICAgICB0aGlzLm9uRGF0YSh0aGlzLndyaXRlci5kdGRBdHRMaXN0KG5vZGUsIHRoaXMud3JpdGVyT3B0aW9ucywgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKSwgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5lbnRpdHkgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIG5vZGU7XG4gICAgICB0aGlzLm9wZW5DdXJyZW50KCk7XG4gICAgICBub2RlID0gbmV3IFhNTERUREVudGl0eSh0aGlzLCBmYWxzZSwgbmFtZSwgdmFsdWUpO1xuICAgICAgdGhpcy5vbkRhdGEodGhpcy53cml0ZXIuZHRkRW50aXR5KG5vZGUsIHRoaXMud3JpdGVyT3B0aW9ucywgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKSwgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5wRW50aXR5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHZhciBub2RlO1xuICAgICAgdGhpcy5vcGVuQ3VycmVudCgpO1xuICAgICAgbm9kZSA9IG5ldyBYTUxEVERFbnRpdHkodGhpcywgdHJ1ZSwgbmFtZSwgdmFsdWUpO1xuICAgICAgdGhpcy5vbkRhdGEodGhpcy53cml0ZXIuZHRkRW50aXR5KG5vZGUsIHRoaXMud3JpdGVyT3B0aW9ucywgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKSwgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5ub3RhdGlvbiA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIHRoaXMub3BlbkN1cnJlbnQoKTtcbiAgICAgIG5vZGUgPSBuZXcgWE1MRFRETm90YXRpb24odGhpcywgbmFtZSwgdmFsdWUpO1xuICAgICAgdGhpcy5vbkRhdGEodGhpcy53cml0ZXIuZHRkTm90YXRpb24obm9kZSwgdGhpcy53cml0ZXJPcHRpb25zLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLnVwID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5jdXJyZW50TGV2ZWwgPCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBkb2N1bWVudCBub2RlIGhhcyBubyBwYXJlbnQuXCIpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuY3VycmVudE5vZGUpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudE5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICB0aGlzLmNsb3NlTm9kZSh0aGlzLmN1cnJlbnROb2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm9wZW5Ob2RlKHRoaXMuY3VycmVudE5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudE5vZGUgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jbG9zZU5vZGUodGhpcy5vcGVuVGFnc1t0aGlzLmN1cnJlbnRMZXZlbF0pO1xuICAgICAgfVxuICAgICAgZGVsZXRlIHRoaXMub3BlblRhZ3NbdGhpcy5jdXJyZW50TGV2ZWxdO1xuICAgICAgdGhpcy5jdXJyZW50TGV2ZWwtLTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHdoaWxlICh0aGlzLmN1cnJlbnRMZXZlbCA+PSAwKSB7XG4gICAgICAgIHRoaXMudXAoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLm9uRW5kKCk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLm9wZW5DdXJyZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5jdXJyZW50Tm9kZSkge1xuICAgICAgICB0aGlzLmN1cnJlbnROb2RlLmNoaWxkcmVuID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXMub3Blbk5vZGUodGhpcy5jdXJyZW50Tm9kZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLm9wZW5Ob2RlID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgdmFyIGF0dCwgY2h1bmssIG5hbWUsIHJlZjE7XG4gICAgICBpZiAoIW5vZGUuaXNPcGVuKSB7XG4gICAgICAgIGlmICghdGhpcy5yb290ICYmIHRoaXMuY3VycmVudExldmVsID09PSAwICYmIG5vZGUudHlwZSA9PT0gTm9kZVR5cGUuRWxlbWVudCkge1xuICAgICAgICAgIHRoaXMucm9vdCA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgY2h1bmsgPSAnJztcbiAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gTm9kZVR5cGUuRWxlbWVudCkge1xuICAgICAgICAgIHRoaXMud3JpdGVyT3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLk9wZW5UYWc7XG4gICAgICAgICAgY2h1bmsgPSB0aGlzLndyaXRlci5pbmRlbnQobm9kZSwgdGhpcy53cml0ZXJPcHRpb25zLCB0aGlzLmN1cnJlbnRMZXZlbCkgKyAnPCcgKyBub2RlLm5hbWU7XG4gICAgICAgICAgcmVmMSA9IG5vZGUuYXR0cmlicztcbiAgICAgICAgICBmb3IgKG5hbWUgaW4gcmVmMSkge1xuICAgICAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwocmVmMSwgbmFtZSkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgYXR0ID0gcmVmMVtuYW1lXTtcbiAgICAgICAgICAgIGNodW5rICs9IHRoaXMud3JpdGVyLmF0dHJpYnV0ZShhdHQsIHRoaXMud3JpdGVyT3B0aW9ucywgdGhpcy5jdXJyZW50TGV2ZWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjaHVuayArPSAobm9kZS5jaGlsZHJlbiA/ICc+JyA6ICcvPicpICsgdGhpcy53cml0ZXIuZW5kbGluZShub2RlLCB0aGlzLndyaXRlck9wdGlvbnMsIHRoaXMuY3VycmVudExldmVsKTtcbiAgICAgICAgICB0aGlzLndyaXRlck9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5JbnNpZGVUYWc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy53cml0ZXJPcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuT3BlblRhZztcbiAgICAgICAgICBjaHVuayA9IHRoaXMud3JpdGVyLmluZGVudChub2RlLCB0aGlzLndyaXRlck9wdGlvbnMsIHRoaXMuY3VycmVudExldmVsKSArICc8IURPQ1RZUEUgJyArIG5vZGUucm9vdE5vZGVOYW1lO1xuICAgICAgICAgIGlmIChub2RlLnB1YklEICYmIG5vZGUuc3lzSUQpIHtcbiAgICAgICAgICAgIGNodW5rICs9ICcgUFVCTElDIFwiJyArIG5vZGUucHViSUQgKyAnXCIgXCInICsgbm9kZS5zeXNJRCArICdcIic7XG4gICAgICAgICAgfSBlbHNlIGlmIChub2RlLnN5c0lEKSB7XG4gICAgICAgICAgICBjaHVuayArPSAnIFNZU1RFTSBcIicgKyBub2RlLnN5c0lEICsgJ1wiJztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGNodW5rICs9ICcgWyc7XG4gICAgICAgICAgICB0aGlzLndyaXRlck9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5JbnNpZGVUYWc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMud3JpdGVyT3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgICAgICAgY2h1bmsgKz0gJz4nO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjaHVuayArPSB0aGlzLndyaXRlci5lbmRsaW5lKG5vZGUsIHRoaXMud3JpdGVyT3B0aW9ucywgdGhpcy5jdXJyZW50TGV2ZWwpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub25EYXRhKGNodW5rLCB0aGlzLmN1cnJlbnRMZXZlbCk7XG4gICAgICAgIHJldHVybiBub2RlLmlzT3BlbiA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmNsb3NlTm9kZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHZhciBjaHVuaztcbiAgICAgIGlmICghbm9kZS5pc0Nsb3NlZCkge1xuICAgICAgICBjaHVuayA9ICcnO1xuICAgICAgICB0aGlzLndyaXRlck9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gTm9kZVR5cGUuRWxlbWVudCkge1xuICAgICAgICAgIGNodW5rID0gdGhpcy53cml0ZXIuaW5kZW50KG5vZGUsIHRoaXMud3JpdGVyT3B0aW9ucywgdGhpcy5jdXJyZW50TGV2ZWwpICsgJzwvJyArIG5vZGUubmFtZSArICc+JyArIHRoaXMud3JpdGVyLmVuZGxpbmUobm9kZSwgdGhpcy53cml0ZXJPcHRpb25zLCB0aGlzLmN1cnJlbnRMZXZlbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2h1bmsgPSB0aGlzLndyaXRlci5pbmRlbnQobm9kZSwgdGhpcy53cml0ZXJPcHRpb25zLCB0aGlzLmN1cnJlbnRMZXZlbCkgKyAnXT4nICsgdGhpcy53cml0ZXIuZW5kbGluZShub2RlLCB0aGlzLndyaXRlck9wdGlvbnMsIHRoaXMuY3VycmVudExldmVsKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndyaXRlck9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5Ob25lO1xuICAgICAgICB0aGlzLm9uRGF0YShjaHVuaywgdGhpcy5jdXJyZW50TGV2ZWwpO1xuICAgICAgICByZXR1cm4gbm9kZS5pc0Nsb3NlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uKGNodW5rLCBsZXZlbCkge1xuICAgICAgdGhpcy5kb2N1bWVudFN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXMub25EYXRhQ2FsbGJhY2soY2h1bmssIGxldmVsICsgMSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLm9uRW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvY3VtZW50Q29tcGxldGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzLm9uRW5kQ2FsbGJhY2soKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZGVidWdJbmZvID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcIm5vZGU6IDxcIiArIG5hbWUgKyBcIj5cIjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZWxlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLm5vZCA9IGZ1bmN0aW9uKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vZGUobmFtZSwgYXR0cmlidXRlcywgdGV4dCk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLnR4dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZGF0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNkYXRhKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuY29tID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbW1lbnQodmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5pbnMgPSBmdW5jdGlvbih0YXJnZXQsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnN0cnVjdGlvbih0YXJnZXQsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZGVjID0gZnVuY3Rpb24odmVyc2lvbiwgZW5jb2RpbmcsIHN0YW5kYWxvbmUpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlY2xhcmF0aW9uKHZlcnNpb24sIGVuY29kaW5nLCBzdGFuZGFsb25lKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZHRkID0gZnVuY3Rpb24ocm9vdCwgcHViSUQsIHN5c0lEKSB7XG4gICAgICByZXR1cm4gdGhpcy5kb2N0eXBlKHJvb3QsIHB1YklELCBzeXNJRCk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmUgPSBmdW5jdGlvbihuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50KG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5uID0gZnVuY3Rpb24obmFtZSwgYXR0cmlidXRlcywgdGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZShuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUudCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jZGF0YSh2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29tbWVudCh2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLnIgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmF3KHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuaSA9IGZ1bmN0aW9uKHRhcmdldCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmluc3RydWN0aW9uKHRhcmdldCwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5hdHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnROb2RlICYmIHRoaXMuY3VycmVudE5vZGUudHlwZSA9PT0gTm9kZVR5cGUuRG9jVHlwZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRMaXN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuY3VycmVudE5vZGUgJiYgdGhpcy5jdXJyZW50Tm9kZS50eXBlID09PSBOb2RlVHlwZS5Eb2NUeXBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dExpc3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5lbnQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZW50aXR5KG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUucGVudCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5wRW50aXR5KG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUubm90ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vdGF0aW9uKG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTERvY3VtZW50Q0I7XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFdyaXRlclN0YXRlLCBYTUxTdHJlYW1Xcml0ZXIsIFhNTFdyaXRlckJhc2UsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBYTUxXcml0ZXJCYXNlID0gcmVxdWlyZSgnLi9YTUxXcml0ZXJCYXNlJyk7XG5cbiAgV3JpdGVyU3RhdGUgPSByZXF1aXJlKCcuL1dyaXRlclN0YXRlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxTdHJlYW1Xcml0ZXIgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxTdHJlYW1Xcml0ZXIsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MU3RyZWFtV3JpdGVyKHN0cmVhbSwgb3B0aW9ucykge1xuICAgICAgdGhpcy5zdHJlYW0gPSBzdHJlYW07XG4gICAgICBYTUxTdHJlYW1Xcml0ZXIuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS5lbmRsaW5lID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIGlmIChub2RlLmlzTGFzdFJvb3ROb2RlICYmIG9wdGlvbnMuc3RhdGUgPT09IFdyaXRlclN0YXRlLkNsb3NlVGFnKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBYTUxTdHJlYW1Xcml0ZXIuX19zdXBlcl9fLmVuZGxpbmUuY2FsbCh0aGlzLCBub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTFN0cmVhbVdyaXRlci5wcm90b3R5cGUuZG9jdW1lbnQgPSBmdW5jdGlvbihkb2MsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBjaGlsZCwgaSwgaiwgaywgbGVuLCBsZW4xLCByZWYsIHJlZjEsIHJlc3VsdHM7XG4gICAgICByZWYgPSBkb2MuY2hpbGRyZW47XG4gICAgICBmb3IgKGkgPSBqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgICBjaGlsZCA9IHJlZltpXTtcbiAgICAgICAgY2hpbGQuaXNMYXN0Um9vdE5vZGUgPSBpID09PSBkb2MuY2hpbGRyZW4ubGVuZ3RoIC0gMTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMgPSB0aGlzLmZpbHRlck9wdGlvbnMob3B0aW9ucyk7XG4gICAgICByZWYxID0gZG9jLmNoaWxkcmVuO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yIChrID0gMCwgbGVuMSA9IHJlZjEubGVuZ3RoOyBrIDwgbGVuMTsgaysrKSB7XG4gICAgICAgIGNoaWxkID0gcmVmMVtrXTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHRoaXMud3JpdGVDaGlsZE5vZGUoY2hpbGQsIG9wdGlvbnMsIDApKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH07XG5cbiAgICBYTUxTdHJlYW1Xcml0ZXIucHJvdG90eXBlLmF0dHJpYnV0ZSA9IGZ1bmN0aW9uKGF0dCwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZShYTUxTdHJlYW1Xcml0ZXIuX19zdXBlcl9fLmF0dHJpYnV0ZS5jYWxsKHRoaXMsIGF0dCwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS5jZGF0YSA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdHJlYW0ud3JpdGUoWE1MU3RyZWFtV3JpdGVyLl9fc3VwZXJfXy5jZGF0YS5jYWxsKHRoaXMsIG5vZGUsIG9wdGlvbnMsIGxldmVsKSk7XG4gICAgfTtcblxuICAgIFhNTFN0cmVhbVdyaXRlci5wcm90b3R5cGUuY29tbWVudCA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdHJlYW0ud3JpdGUoWE1MU3RyZWFtV3JpdGVyLl9fc3VwZXJfXy5jb21tZW50LmNhbGwodGhpcywgbm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS5kZWNsYXJhdGlvbiA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdHJlYW0ud3JpdGUoWE1MU3RyZWFtV3JpdGVyLl9fc3VwZXJfXy5kZWNsYXJhdGlvbi5jYWxsKHRoaXMsIG5vZGUsIG9wdGlvbnMsIGxldmVsKSk7XG4gICAgfTtcblxuICAgIFhNTFN0cmVhbVdyaXRlci5wcm90b3R5cGUuZG9jVHlwZSA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICB2YXIgY2hpbGQsIGosIGxlbiwgcmVmO1xuICAgICAgbGV2ZWwgfHwgKGxldmVsID0gMCk7XG4gICAgICB0aGlzLm9wZW5Ob2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5PcGVuVGFnO1xuICAgICAgdGhpcy5zdHJlYW0ud3JpdGUodGhpcy5pbmRlbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCc8IURPQ1RZUEUgJyArIG5vZGUucm9vdCgpLm5hbWUpO1xuICAgICAgaWYgKG5vZGUucHViSUQgJiYgbm9kZS5zeXNJRCkge1xuICAgICAgICB0aGlzLnN0cmVhbS53cml0ZSgnIFBVQkxJQyBcIicgKyBub2RlLnB1YklEICsgJ1wiIFwiJyArIG5vZGUuc3lzSUQgKyAnXCInKTtcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5zeXNJRCkge1xuICAgICAgICB0aGlzLnN0cmVhbS53cml0ZSgnIFNZU1RFTSBcIicgKyBub2RlLnN5c0lEICsgJ1wiJyk7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCcgWycpO1xuICAgICAgICB0aGlzLnN0cmVhbS53cml0ZSh0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkluc2lkZVRhZztcbiAgICAgICAgcmVmID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgY2hpbGQgPSByZWZbal07XG4gICAgICAgICAgdGhpcy53cml0ZUNoaWxkTm9kZShjaGlsZCwgb3B0aW9ucywgbGV2ZWwgKyAxKTtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuQ2xvc2VUYWc7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCddJyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuQ2xvc2VUYWc7XG4gICAgICB0aGlzLnN0cmVhbS53cml0ZShvcHRpb25zLnNwYWNlQmVmb3JlU2xhc2ggKyAnPicpO1xuICAgICAgdGhpcy5zdHJlYW0ud3JpdGUodGhpcy5lbmRsaW5lKG5vZGUsIG9wdGlvbnMsIGxldmVsKSk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuTm9uZTtcbiAgICAgIHJldHVybiB0aGlzLmNsb3NlTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgfTtcblxuICAgIFhNTFN0cmVhbVdyaXRlci5wcm90b3R5cGUuZWxlbWVudCA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICB2YXIgYXR0LCBjaGlsZCwgY2hpbGROb2RlQ291bnQsIGZpcnN0Q2hpbGROb2RlLCBqLCBsZW4sIG5hbWUsIHByZXR0eVN1cHByZXNzZWQsIHJlZiwgcmVmMTtcbiAgICAgIGxldmVsIHx8IChsZXZlbCA9IDApO1xuICAgICAgdGhpcy5vcGVuTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuT3BlblRhZztcbiAgICAgIHRoaXMuc3RyZWFtLndyaXRlKHRoaXMuaW5kZW50KG5vZGUsIG9wdGlvbnMsIGxldmVsKSArICc8JyArIG5vZGUubmFtZSk7XG4gICAgICByZWYgPSBub2RlLmF0dHJpYnM7XG4gICAgICBmb3IgKG5hbWUgaW4gcmVmKSB7XG4gICAgICAgIGlmICghaGFzUHJvcC5jYWxsKHJlZiwgbmFtZSkpIGNvbnRpbnVlO1xuICAgICAgICBhdHQgPSByZWZbbmFtZV07XG4gICAgICAgIHRoaXMuYXR0cmlidXRlKGF0dCwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgfVxuICAgICAgY2hpbGROb2RlQ291bnQgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgIGZpcnN0Q2hpbGROb2RlID0gY2hpbGROb2RlQ291bnQgPT09IDAgPyBudWxsIDogbm9kZS5jaGlsZHJlblswXTtcbiAgICAgIGlmIChjaGlsZE5vZGVDb3VudCA9PT0gMCB8fCBub2RlLmNoaWxkcmVuLmV2ZXJ5KGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIChlLnR5cGUgPT09IE5vZGVUeXBlLlRleHQgfHwgZS50eXBlID09PSBOb2RlVHlwZS5SYXcpICYmIGUudmFsdWUgPT09ICcnO1xuICAgICAgfSkpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuYWxsb3dFbXB0eSkge1xuICAgICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCc+Jyk7XG4gICAgICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCc8LycgKyBub2RlLm5hbWUgKyAnPicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgICAgICB0aGlzLnN0cmVhbS53cml0ZShvcHRpb25zLnNwYWNlQmVmb3JlU2xhc2ggKyAnLz4nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnByZXR0eSAmJiBjaGlsZE5vZGVDb3VudCA9PT0gMSAmJiAoZmlyc3RDaGlsZE5vZGUudHlwZSA9PT0gTm9kZVR5cGUuVGV4dCB8fCBmaXJzdENoaWxkTm9kZS50eXBlID09PSBOb2RlVHlwZS5SYXcpICYmIChmaXJzdENoaWxkTm9kZS52YWx1ZSAhPSBudWxsKSkge1xuICAgICAgICB0aGlzLnN0cmVhbS53cml0ZSgnPicpO1xuICAgICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuSW5zaWRlVGFnO1xuICAgICAgICBvcHRpb25zLnN1cHByZXNzUHJldHR5Q291bnQrKztcbiAgICAgICAgcHJldHR5U3VwcHJlc3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMud3JpdGVDaGlsZE5vZGUoZmlyc3RDaGlsZE5vZGUsIG9wdGlvbnMsIGxldmVsICsgMSk7XG4gICAgICAgIG9wdGlvbnMuc3VwcHJlc3NQcmV0dHlDb3VudC0tO1xuICAgICAgICBwcmV0dHlTdXBwcmVzc2VkID0gZmFsc2U7XG4gICAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgICAgdGhpcy5zdHJlYW0ud3JpdGUoJzwvJyArIG5vZGUubmFtZSArICc+Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnN0cmVhbS53cml0ZSgnPicgKyB0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkluc2lkZVRhZztcbiAgICAgICAgcmVmMSA9IG5vZGUuY2hpbGRyZW47XG4gICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZjEubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICBjaGlsZCA9IHJlZjFbal07XG4gICAgICAgICAgdGhpcy53cml0ZUNoaWxkTm9kZShjaGlsZCwgb3B0aW9ucywgbGV2ZWwgKyAxKTtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuQ2xvc2VUYWc7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKHRoaXMuaW5kZW50KG5vZGUsIG9wdGlvbnMsIGxldmVsKSArICc8LycgKyBub2RlLm5hbWUgKyAnPicpO1xuICAgICAgfVxuICAgICAgdGhpcy5zdHJlYW0ud3JpdGUodGhpcy5lbmRsaW5lKG5vZGUsIG9wdGlvbnMsIGxldmVsKSk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuTm9uZTtcbiAgICAgIHJldHVybiB0aGlzLmNsb3NlTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgfTtcblxuICAgIFhNTFN0cmVhbVdyaXRlci5wcm90b3R5cGUucHJvY2Vzc2luZ0luc3RydWN0aW9uID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZShYTUxTdHJlYW1Xcml0ZXIuX19zdXBlcl9fLnByb2Nlc3NpbmdJbnN0cnVjdGlvbi5jYWxsKHRoaXMsIG5vZGUsIG9wdGlvbnMsIGxldmVsKSk7XG4gICAgfTtcblxuICAgIFhNTFN0cmVhbVdyaXRlci5wcm90b3R5cGUucmF3ID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZShYTUxTdHJlYW1Xcml0ZXIuX19zdXBlcl9fLnJhdy5jYWxsKHRoaXMsIG5vZGUsIG9wdGlvbnMsIGxldmVsKSk7XG4gICAgfTtcblxuICAgIFhNTFN0cmVhbVdyaXRlci5wcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdHJlYW0ud3JpdGUoWE1MU3RyZWFtV3JpdGVyLl9fc3VwZXJfXy50ZXh0LmNhbGwodGhpcywgbm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS5kdGRBdHRMaXN0ID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZShYTUxTdHJlYW1Xcml0ZXIuX19zdXBlcl9fLmR0ZEF0dExpc3QuY2FsbCh0aGlzLCBub2RlLCBvcHRpb25zLCBsZXZlbCkpO1xuICAgIH07XG5cbiAgICBYTUxTdHJlYW1Xcml0ZXIucHJvdG90eXBlLmR0ZEVsZW1lbnQgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLndyaXRlKFhNTFN0cmVhbVdyaXRlci5fX3N1cGVyX18uZHRkRWxlbWVudC5jYWxsKHRoaXMsIG5vZGUsIG9wdGlvbnMsIGxldmVsKSk7XG4gICAgfTtcblxuICAgIFhNTFN0cmVhbVdyaXRlci5wcm90b3R5cGUuZHRkRW50aXR5ID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZShYTUxTdHJlYW1Xcml0ZXIuX19zdXBlcl9fLmR0ZEVudGl0eS5jYWxsKHRoaXMsIG5vZGUsIG9wdGlvbnMsIGxldmVsKSk7XG4gICAgfTtcblxuICAgIFhNTFN0cmVhbVdyaXRlci5wcm90b3R5cGUuZHRkTm90YXRpb24gPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLndyaXRlKFhNTFN0cmVhbVdyaXRlci5fX3N1cGVyX18uZHRkTm90YXRpb24uY2FsbCh0aGlzLCBub2RlLCBvcHRpb25zLCBsZXZlbCkpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MU3RyZWFtV3JpdGVyO1xuXG4gIH0pKFhNTFdyaXRlckJhc2UpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgV3JpdGVyU3RhdGUsIFhNTERPTUltcGxlbWVudGF0aW9uLCBYTUxEb2N1bWVudCwgWE1MRG9jdW1lbnRDQiwgWE1MU3RyZWFtV3JpdGVyLCBYTUxTdHJpbmdXcml0ZXIsIGFzc2lnbiwgaXNGdW5jdGlvbiwgcmVmO1xuXG4gIHJlZiA9IHJlcXVpcmUoJy4vVXRpbGl0eScpLCBhc3NpZ24gPSByZWYuYXNzaWduLCBpc0Z1bmN0aW9uID0gcmVmLmlzRnVuY3Rpb247XG5cbiAgWE1MRE9NSW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL1hNTERPTUltcGxlbWVudGF0aW9uJyk7XG5cbiAgWE1MRG9jdW1lbnQgPSByZXF1aXJlKCcuL1hNTERvY3VtZW50Jyk7XG5cbiAgWE1MRG9jdW1lbnRDQiA9IHJlcXVpcmUoJy4vWE1MRG9jdW1lbnRDQicpO1xuXG4gIFhNTFN0cmluZ1dyaXRlciA9IHJlcXVpcmUoJy4vWE1MU3RyaW5nV3JpdGVyJyk7XG5cbiAgWE1MU3RyZWFtV3JpdGVyID0gcmVxdWlyZSgnLi9YTUxTdHJlYW1Xcml0ZXInKTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBXcml0ZXJTdGF0ZSA9IHJlcXVpcmUoJy4vV3JpdGVyU3RhdGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cy5jcmVhdGUgPSBmdW5jdGlvbihuYW1lLCB4bWxkZWMsIGRvY3R5cGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZG9jLCByb290O1xuICAgIGlmIChuYW1lID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJvb3QgZWxlbWVudCBuZWVkcyBhIG5hbWUuXCIpO1xuICAgIH1cbiAgICBvcHRpb25zID0gYXNzaWduKHt9LCB4bWxkZWMsIGRvY3R5cGUsIG9wdGlvbnMpO1xuICAgIGRvYyA9IG5ldyBYTUxEb2N1bWVudChvcHRpb25zKTtcbiAgICByb290ID0gZG9jLmVsZW1lbnQobmFtZSk7XG4gICAgaWYgKCFvcHRpb25zLmhlYWRsZXNzKSB7XG4gICAgICBkb2MuZGVjbGFyYXRpb24ob3B0aW9ucyk7XG4gICAgICBpZiAoKG9wdGlvbnMucHViSUQgIT0gbnVsbCkgfHwgKG9wdGlvbnMuc3lzSUQgIT0gbnVsbCkpIHtcbiAgICAgICAgZG9jLmR0ZChvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJvb3Q7XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHMuYmVnaW4gPSBmdW5jdGlvbihvcHRpb25zLCBvbkRhdGEsIG9uRW5kKSB7XG4gICAgdmFyIHJlZjE7XG4gICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICAgIHJlZjEgPSBbb3B0aW9ucywgb25EYXRhXSwgb25EYXRhID0gcmVmMVswXSwgb25FbmQgPSByZWYxWzFdO1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBpZiAob25EYXRhKSB7XG4gICAgICByZXR1cm4gbmV3IFhNTERvY3VtZW50Q0Iob3B0aW9ucywgb25EYXRhLCBvbkVuZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgWE1MRG9jdW1lbnQob3B0aW9ucyk7XG4gICAgfVxuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzLnN0cmluZ1dyaXRlciA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IFhNTFN0cmluZ1dyaXRlcihvcHRpb25zKTtcbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0cy5zdHJlYW1Xcml0ZXIgPSBmdW5jdGlvbihzdHJlYW0sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IFhNTFN0cmVhbVdyaXRlcihzdHJlYW0sIG9wdGlvbnMpO1xuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzLmltcGxlbWVudGF0aW9uID0gbmV3IFhNTERPTUltcGxlbWVudGF0aW9uKCk7XG5cbiAgbW9kdWxlLmV4cG9ydHMubm9kZVR5cGUgPSBOb2RlVHlwZTtcblxuICBtb2R1bGUuZXhwb3J0cy53cml0ZXJTdGF0ZSA9IFdyaXRlclN0YXRlO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICB2YXIgYnVpbGRlciwgZGVmYXVsdHMsIGVzY2FwZUNEQVRBLCByZXF1aXJlc0NEQVRBLCB3cmFwQ0RBVEEsXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIGJ1aWxkZXIgPSByZXF1aXJlKCd4bWxidWlsZGVyJyk7XG5cbiAgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJykuZGVmYXVsdHM7XG5cbiAgcmVxdWlyZXNDREFUQSA9IGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gXCJzdHJpbmdcIiAmJiAoZW50cnkuaW5kZXhPZignJicpID49IDAgfHwgZW50cnkuaW5kZXhPZignPicpID49IDAgfHwgZW50cnkuaW5kZXhPZignPCcpID49IDApO1xuICB9O1xuXG4gIHdyYXBDREFUQSA9IGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgcmV0dXJuIFwiPCFbQ0RBVEFbXCIgKyAoZXNjYXBlQ0RBVEEoZW50cnkpKSArIFwiXV0+XCI7XG4gIH07XG5cbiAgZXNjYXBlQ0RBVEEgPSBmdW5jdGlvbihlbnRyeSkge1xuICAgIHJldHVybiBlbnRyeS5yZXBsYWNlKCddXT4nLCAnXV1dXT48IVtDREFUQVs+Jyk7XG4gIH07XG5cbiAgZXhwb3J0cy5CdWlsZGVyID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIEJ1aWxkZXIob3B0cykge1xuICAgICAgdmFyIGtleSwgcmVmLCB2YWx1ZTtcbiAgICAgIHRoaXMub3B0aW9ucyA9IHt9O1xuICAgICAgcmVmID0gZGVmYXVsdHNbXCIwLjJcIl07XG4gICAgICBmb3IgKGtleSBpbiByZWYpIHtcbiAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwocmVmLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgdmFsdWUgPSByZWZba2V5XTtcbiAgICAgICAgdGhpcy5vcHRpb25zW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGZvciAoa2V5IGluIG9wdHMpIHtcbiAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwob3B0cywga2V5KSkgY29udGludWU7XG4gICAgICAgIHZhbHVlID0gb3B0c1trZXldO1xuICAgICAgICB0aGlzLm9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIEJ1aWxkZXIucHJvdG90eXBlLmJ1aWxkT2JqZWN0ID0gZnVuY3Rpb24ocm9vdE9iaikge1xuICAgICAgdmFyIGF0dHJrZXksIGNoYXJrZXksIHJlbmRlciwgcm9vdEVsZW1lbnQsIHJvb3ROYW1lO1xuICAgICAgYXR0cmtleSA9IHRoaXMub3B0aW9ucy5hdHRya2V5O1xuICAgICAgY2hhcmtleSA9IHRoaXMub3B0aW9ucy5jaGFya2V5O1xuICAgICAgaWYgKChPYmplY3Qua2V5cyhyb290T2JqKS5sZW5ndGggPT09IDEpICYmICh0aGlzLm9wdGlvbnMucm9vdE5hbWUgPT09IGRlZmF1bHRzWycwLjInXS5yb290TmFtZSkpIHtcbiAgICAgICAgcm9vdE5hbWUgPSBPYmplY3Qua2V5cyhyb290T2JqKVswXTtcbiAgICAgICAgcm9vdE9iaiA9IHJvb3RPYmpbcm9vdE5hbWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdE5hbWUgPSB0aGlzLm9wdGlvbnMucm9vdE5hbWU7XG4gICAgICB9XG4gICAgICByZW5kZXIgPSAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGVsZW1lbnQsIG9iaikge1xuICAgICAgICAgIHZhciBhdHRyLCBjaGlsZCwgZW50cnksIGluZGV4LCBrZXksIHZhbHVlO1xuICAgICAgICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuY2RhdGEgJiYgcmVxdWlyZXNDREFUQShvYmopKSB7XG4gICAgICAgICAgICAgIGVsZW1lbnQucmF3KHdyYXBDREFUQShvYmopKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGVsZW1lbnQudHh0KG9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgICAgIGZvciAoaW5kZXggaW4gb2JqKSB7XG4gICAgICAgICAgICAgIGlmICghaGFzUHJvcC5jYWxsKG9iaiwgaW5kZXgpKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgY2hpbGQgPSBvYmpbaW5kZXhdO1xuICAgICAgICAgICAgICBmb3IgKGtleSBpbiBjaGlsZCkge1xuICAgICAgICAgICAgICAgIGVudHJ5ID0gY2hpbGRba2V5XTtcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gcmVuZGVyKGVsZW1lbnQuZWxlKGtleSksIGVudHJ5KS51cCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChvYmosIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICBjaGlsZCA9IG9ialtrZXldO1xuICAgICAgICAgICAgICBpZiAoa2V5ID09PSBhdHRya2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgICAgZm9yIChhdHRyIGluIGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gY2hpbGRbYXR0cl07XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LmF0dChhdHRyLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gY2hhcmtleSkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmNkYXRhICYmIHJlcXVpcmVzQ0RBVEEoY2hpbGQpKSB7XG4gICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5yYXcod3JhcENEQVRBKGNoaWxkKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnR4dChjaGlsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGQpKSB7XG4gICAgICAgICAgICAgICAgZm9yIChpbmRleCBpbiBjaGlsZCkge1xuICAgICAgICAgICAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwoY2hpbGQsIGluZGV4KSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgICBlbnRyeSA9IGNoaWxkW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmNkYXRhICYmIHJlcXVpcmVzQ0RBVEEoZW50cnkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQuZWxlKGtleSkucmF3KHdyYXBDREFUQShlbnRyeSkpLnVwKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQuZWxlKGtleSwgZW50cnkpLnVwKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSByZW5kZXIoZWxlbWVudC5lbGUoa2V5KSwgZW50cnkpLnVwKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjaGlsZCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSByZW5kZXIoZWxlbWVudC5lbGUoa2V5KSwgY2hpbGQpLnVwKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ3N0cmluZycgJiYgX3RoaXMub3B0aW9ucy5jZGF0YSAmJiByZXF1aXJlc0NEQVRBKGNoaWxkKSkge1xuICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQuZWxlKGtleSkucmF3KHdyYXBDREFUQShjaGlsZCkpLnVwKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGlmIChjaGlsZCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkID0gJyc7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5lbGUoa2V5LCBjaGlsZC50b1N0cmluZygpKS51cCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpO1xuICAgICAgcm9vdEVsZW1lbnQgPSBidWlsZGVyLmNyZWF0ZShyb290TmFtZSwgdGhpcy5vcHRpb25zLnhtbGRlYywgdGhpcy5vcHRpb25zLmRvY3R5cGUsIHtcbiAgICAgICAgaGVhZGxlc3M6IHRoaXMub3B0aW9ucy5oZWFkbGVzcyxcbiAgICAgICAgYWxsb3dTdXJyb2dhdGVDaGFyczogdGhpcy5vcHRpb25zLmFsbG93U3Vycm9nYXRlQ2hhcnNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlbmRlcihyb290RWxlbWVudCwgcm9vdE9iaikuZW5kKHRoaXMub3B0aW9ucy5yZW5kZXJPcHRzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEJ1aWxkZXI7XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICI7KGZ1bmN0aW9uIChzYXgpIHsgLy8gd3JhcHBlciBmb3Igbm9uLW5vZGUgZW52c1xuICBzYXgucGFyc2VyID0gZnVuY3Rpb24gKHN0cmljdCwgb3B0KSB7IHJldHVybiBuZXcgU0FYUGFyc2VyKHN0cmljdCwgb3B0KSB9XG4gIHNheC5TQVhQYXJzZXIgPSBTQVhQYXJzZXJcbiAgc2F4LlNBWFN0cmVhbSA9IFNBWFN0cmVhbVxuICBzYXguY3JlYXRlU3RyZWFtID0gY3JlYXRlU3RyZWFtXG5cbiAgLy8gV2hlbiB3ZSBwYXNzIHRoZSBNQVhfQlVGRkVSX0xFTkdUSCBwb3NpdGlvbiwgc3RhcnQgY2hlY2tpbmcgZm9yIGJ1ZmZlciBvdmVycnVucy5cbiAgLy8gV2hlbiB3ZSBjaGVjaywgc2NoZWR1bGUgdGhlIG5leHQgY2hlY2sgZm9yIE1BWF9CVUZGRVJfTEVOR1RIIC0gKG1heChidWZmZXIgbGVuZ3RocykpLFxuICAvLyBzaW5jZSB0aGF0J3MgdGhlIGVhcmxpZXN0IHRoYXQgYSBidWZmZXIgb3ZlcnJ1biBjb3VsZCBvY2N1ci4gIFRoaXMgd2F5LCBjaGVja3MgYXJlXG4gIC8vIGFzIHJhcmUgYXMgcmVxdWlyZWQsIGJ1dCBhcyBvZnRlbiBhcyBuZWNlc3NhcnkgdG8gZW5zdXJlIG5ldmVyIGNyb3NzaW5nIHRoaXMgYm91bmQuXG4gIC8vIEZ1cnRoZXJtb3JlLCBidWZmZXJzIGFyZSBvbmx5IHRlc3RlZCBhdCBtb3N0IG9uY2UgcGVyIHdyaXRlKCksIHNvIHBhc3NpbmcgYSB2ZXJ5XG4gIC8vIGxhcmdlIHN0cmluZyBpbnRvIHdyaXRlKCkgbWlnaHQgaGF2ZSB1bmRlc2lyYWJsZSBlZmZlY3RzLCBidXQgdGhpcyBpcyBtYW5hZ2VhYmxlIGJ5XG4gIC8vIHRoZSBjYWxsZXIsIHNvIGl0IGlzIGFzc3VtZWQgdG8gYmUgc2FmZS4gIFRodXMsIGEgY2FsbCB0byB3cml0ZSgpIG1heSwgaW4gdGhlIGV4dHJlbWVcbiAgLy8gZWRnZSBjYXNlLCByZXN1bHQgaW4gY3JlYXRpbmcgYXQgbW9zdCBvbmUgY29tcGxldGUgY29weSBvZiB0aGUgc3RyaW5nIHBhc3NlZCBpbi5cbiAgLy8gU2V0IHRvIEluZmluaXR5IHRvIGhhdmUgdW5saW1pdGVkIGJ1ZmZlcnMuXG4gIHNheC5NQVhfQlVGRkVSX0xFTkdUSCA9IDY0ICogMTAyNFxuXG4gIHZhciBidWZmZXJzID0gW1xuICAgICdjb21tZW50JywgJ3NnbWxEZWNsJywgJ3RleHROb2RlJywgJ3RhZ05hbWUnLCAnZG9jdHlwZScsXG4gICAgJ3Byb2NJbnN0TmFtZScsICdwcm9jSW5zdEJvZHknLCAnZW50aXR5JywgJ2F0dHJpYk5hbWUnLFxuICAgICdhdHRyaWJWYWx1ZScsICdjZGF0YScsICdzY3JpcHQnXG4gIF1cblxuICBzYXguRVZFTlRTID0gW1xuICAgICd0ZXh0JyxcbiAgICAncHJvY2Vzc2luZ2luc3RydWN0aW9uJyxcbiAgICAnc2dtbGRlY2xhcmF0aW9uJyxcbiAgICAnZG9jdHlwZScsXG4gICAgJ2NvbW1lbnQnLFxuICAgICdvcGVudGFnc3RhcnQnLFxuICAgICdhdHRyaWJ1dGUnLFxuICAgICdvcGVudGFnJyxcbiAgICAnY2xvc2V0YWcnLFxuICAgICdvcGVuY2RhdGEnLFxuICAgICdjZGF0YScsXG4gICAgJ2Nsb3NlY2RhdGEnLFxuICAgICdlcnJvcicsXG4gICAgJ2VuZCcsXG4gICAgJ3JlYWR5JyxcbiAgICAnc2NyaXB0JyxcbiAgICAnb3Blbm5hbWVzcGFjZScsXG4gICAgJ2Nsb3NlbmFtZXNwYWNlJ1xuICBdXG5cbiAgZnVuY3Rpb24gU0FYUGFyc2VyIChzdHJpY3QsIG9wdCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTQVhQYXJzZXIpKSB7XG4gICAgICByZXR1cm4gbmV3IFNBWFBhcnNlcihzdHJpY3QsIG9wdClcbiAgICB9XG5cbiAgICB2YXIgcGFyc2VyID0gdGhpc1xuICAgIGNsZWFyQnVmZmVycyhwYXJzZXIpXG4gICAgcGFyc2VyLnEgPSBwYXJzZXIuYyA9ICcnXG4gICAgcGFyc2VyLmJ1ZmZlckNoZWNrUG9zaXRpb24gPSBzYXguTUFYX0JVRkZFUl9MRU5HVEhcbiAgICBwYXJzZXIub3B0ID0gb3B0IHx8IHt9XG4gICAgcGFyc2VyLm9wdC5sb3dlcmNhc2UgPSBwYXJzZXIub3B0Lmxvd2VyY2FzZSB8fCBwYXJzZXIub3B0Lmxvd2VyY2FzZXRhZ3NcbiAgICBwYXJzZXIubG9vc2VDYXNlID0gcGFyc2VyLm9wdC5sb3dlcmNhc2UgPyAndG9Mb3dlckNhc2UnIDogJ3RvVXBwZXJDYXNlJ1xuICAgIHBhcnNlci50YWdzID0gW11cbiAgICBwYXJzZXIuY2xvc2VkID0gcGFyc2VyLmNsb3NlZFJvb3QgPSBwYXJzZXIuc2F3Um9vdCA9IGZhbHNlXG4gICAgcGFyc2VyLnRhZyA9IHBhcnNlci5lcnJvciA9IG51bGxcbiAgICBwYXJzZXIuc3RyaWN0ID0gISFzdHJpY3RcbiAgICBwYXJzZXIubm9zY3JpcHQgPSAhIShzdHJpY3QgfHwgcGFyc2VyLm9wdC5ub3NjcmlwdClcbiAgICBwYXJzZXIuc3RhdGUgPSBTLkJFR0lOXG4gICAgcGFyc2VyLnN0cmljdEVudGl0aWVzID0gcGFyc2VyLm9wdC5zdHJpY3RFbnRpdGllc1xuICAgIHBhcnNlci5FTlRJVElFUyA9IHBhcnNlci5zdHJpY3RFbnRpdGllcyA/IE9iamVjdC5jcmVhdGUoc2F4LlhNTF9FTlRJVElFUykgOiBPYmplY3QuY3JlYXRlKHNheC5FTlRJVElFUylcbiAgICBwYXJzZXIuYXR0cmliTGlzdCA9IFtdXG5cbiAgICAvLyBuYW1lc3BhY2VzIGZvcm0gYSBwcm90b3R5cGUgY2hhaW4uXG4gICAgLy8gaXQgYWx3YXlzIHBvaW50cyBhdCB0aGUgY3VycmVudCB0YWcsXG4gICAgLy8gd2hpY2ggcHJvdG9zIHRvIGl0cyBwYXJlbnQgdGFnLlxuICAgIGlmIChwYXJzZXIub3B0LnhtbG5zKSB7XG4gICAgICBwYXJzZXIubnMgPSBPYmplY3QuY3JlYXRlKHJvb3ROUylcbiAgICB9XG5cbiAgICAvLyBkaXNhbGxvdyB1bnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWVzIGlmIG5vdCBvdGhlcndpc2UgY29uZmlndXJlZFxuICAgIC8vIGFuZCBzdHJpY3QgbW9kZSBpcyB0cnVlXG4gICAgaWYgKHBhcnNlci5vcHQudW5xdW90ZWRBdHRyaWJ1dGVWYWx1ZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyc2VyLm9wdC51bnF1b3RlZEF0dHJpYnV0ZVZhbHVlcyA9ICFzdHJpY3Q7XG4gICAgfVxuXG4gICAgLy8gbW9zdGx5IGp1c3QgZm9yIGVycm9yIHJlcG9ydGluZ1xuICAgIHBhcnNlci50cmFja1Bvc2l0aW9uID0gcGFyc2VyLm9wdC5wb3NpdGlvbiAhPT0gZmFsc2VcbiAgICBpZiAocGFyc2VyLnRyYWNrUG9zaXRpb24pIHtcbiAgICAgIHBhcnNlci5wb3NpdGlvbiA9IHBhcnNlci5saW5lID0gcGFyc2VyLmNvbHVtbiA9IDBcbiAgICB9XG4gICAgZW1pdChwYXJzZXIsICdvbnJlYWR5JylcbiAgfVxuXG4gIGlmICghT2JqZWN0LmNyZWF0ZSkge1xuICAgIE9iamVjdC5jcmVhdGUgPSBmdW5jdGlvbiAobykge1xuICAgICAgZnVuY3Rpb24gRiAoKSB7fVxuICAgICAgRi5wcm90b3R5cGUgPSBvXG4gICAgICB2YXIgbmV3ZiA9IG5ldyBGKClcbiAgICAgIHJldHVybiBuZXdmXG4gICAgfVxuICB9XG5cbiAgaWYgKCFPYmplY3Qua2V5cykge1xuICAgIE9iamVjdC5rZXlzID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgIHZhciBhID0gW11cbiAgICAgIGZvciAodmFyIGkgaW4gbykgaWYgKG8uaGFzT3duUHJvcGVydHkoaSkpIGEucHVzaChpKVxuICAgICAgcmV0dXJuIGFcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0J1ZmZlckxlbmd0aCAocGFyc2VyKSB7XG4gICAgdmFyIG1heEFsbG93ZWQgPSBNYXRoLm1heChzYXguTUFYX0JVRkZFUl9MRU5HVEgsIDEwKVxuICAgIHZhciBtYXhBY3R1YWwgPSAwXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBidWZmZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGxlbiA9IHBhcnNlcltidWZmZXJzW2ldXS5sZW5ndGhcbiAgICAgIGlmIChsZW4gPiBtYXhBbGxvd2VkKSB7XG4gICAgICAgIC8vIFRleHQvY2RhdGEgbm9kZXMgY2FuIGdldCBiaWcsIGFuZCBzaW5jZSB0aGV5J3JlIGJ1ZmZlcmVkLFxuICAgICAgICAvLyB3ZSBjYW4gZ2V0IGhlcmUgdW5kZXIgbm9ybWFsIGNvbmRpdGlvbnMuXG4gICAgICAgIC8vIEF2b2lkIGlzc3VlcyBieSBlbWl0dGluZyB0aGUgdGV4dCBub2RlIG5vdyxcbiAgICAgICAgLy8gc28gYXQgbGVhc3QgaXQgd29uJ3QgZ2V0IGFueSBiaWdnZXIuXG4gICAgICAgIHN3aXRjaCAoYnVmZmVyc1tpXSkge1xuICAgICAgICAgIGNhc2UgJ3RleHROb2RlJzpcbiAgICAgICAgICAgIGNsb3NlVGV4dChwYXJzZXIpXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgY2FzZSAnY2RhdGEnOlxuICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25jZGF0YScsIHBhcnNlci5jZGF0YSlcbiAgICAgICAgICAgIHBhcnNlci5jZGF0YSA9ICcnXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgY2FzZSAnc2NyaXB0JzpcbiAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uc2NyaXB0JywgcGFyc2VyLnNjcmlwdClcbiAgICAgICAgICAgIHBhcnNlci5zY3JpcHQgPSAnJ1xuICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBlcnJvcihwYXJzZXIsICdNYXggYnVmZmVyIGxlbmd0aCBleGNlZWRlZDogJyArIGJ1ZmZlcnNbaV0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG1heEFjdHVhbCA9IE1hdGgubWF4KG1heEFjdHVhbCwgbGVuKVxuICAgIH1cbiAgICAvLyBzY2hlZHVsZSB0aGUgbmV4dCBjaGVjayBmb3IgdGhlIGVhcmxpZXN0IHBvc3NpYmxlIGJ1ZmZlciBvdmVycnVuLlxuICAgIHZhciBtID0gc2F4Lk1BWF9CVUZGRVJfTEVOR1RIIC0gbWF4QWN0dWFsXG4gICAgcGFyc2VyLmJ1ZmZlckNoZWNrUG9zaXRpb24gPSBtICsgcGFyc2VyLnBvc2l0aW9uXG4gIH1cblxuICBmdW5jdGlvbiBjbGVhckJ1ZmZlcnMgKHBhcnNlcikge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYnVmZmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHBhcnNlcltidWZmZXJzW2ldXSA9ICcnXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2hCdWZmZXJzIChwYXJzZXIpIHtcbiAgICBjbG9zZVRleHQocGFyc2VyKVxuICAgIGlmIChwYXJzZXIuY2RhdGEgIT09ICcnKSB7XG4gICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbmNkYXRhJywgcGFyc2VyLmNkYXRhKVxuICAgICAgcGFyc2VyLmNkYXRhID0gJydcbiAgICB9XG4gICAgaWYgKHBhcnNlci5zY3JpcHQgIT09ICcnKSB7XG4gICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbnNjcmlwdCcsIHBhcnNlci5zY3JpcHQpXG4gICAgICBwYXJzZXIuc2NyaXB0ID0gJydcbiAgICB9XG4gIH1cblxuICBTQVhQYXJzZXIucHJvdG90eXBlID0ge1xuICAgIGVuZDogZnVuY3Rpb24gKCkgeyBlbmQodGhpcykgfSxcbiAgICB3cml0ZTogd3JpdGUsXG4gICAgcmVzdW1lOiBmdW5jdGlvbiAoKSB7IHRoaXMuZXJyb3IgPSBudWxsOyByZXR1cm4gdGhpcyB9LFxuICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLndyaXRlKG51bGwpIH0sXG4gICAgZmx1c2g6IGZ1bmN0aW9uICgpIHsgZmx1c2hCdWZmZXJzKHRoaXMpIH1cbiAgfVxuXG4gIHZhciBTdHJlYW1cbiAgdHJ5IHtcbiAgICBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKS5TdHJlYW1cbiAgfSBjYXRjaCAoZXgpIHtcbiAgICBTdHJlYW0gPSBmdW5jdGlvbiAoKSB7fVxuICB9XG4gIGlmICghU3RyZWFtKSBTdHJlYW0gPSBmdW5jdGlvbiAoKSB7fVxuXG4gIHZhciBzdHJlYW1XcmFwcyA9IHNheC5FVkVOVFMuZmlsdGVyKGZ1bmN0aW9uIChldikge1xuICAgIHJldHVybiBldiAhPT0gJ2Vycm9yJyAmJiBldiAhPT0gJ2VuZCdcbiAgfSlcblxuICBmdW5jdGlvbiBjcmVhdGVTdHJlYW0gKHN0cmljdCwgb3B0KSB7XG4gICAgcmV0dXJuIG5ldyBTQVhTdHJlYW0oc3RyaWN0LCBvcHQpXG4gIH1cblxuICBmdW5jdGlvbiBTQVhTdHJlYW0gKHN0cmljdCwgb3B0KSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNBWFN0cmVhbSkpIHtcbiAgICAgIHJldHVybiBuZXcgU0FYU3RyZWFtKHN0cmljdCwgb3B0KVxuICAgIH1cblxuICAgIFN0cmVhbS5hcHBseSh0aGlzKVxuXG4gICAgdGhpcy5fcGFyc2VyID0gbmV3IFNBWFBhcnNlcihzdHJpY3QsIG9wdClcbiAgICB0aGlzLndyaXRhYmxlID0gdHJ1ZVxuICAgIHRoaXMucmVhZGFibGUgPSB0cnVlXG5cbiAgICB2YXIgbWUgPSB0aGlzXG5cbiAgICB0aGlzLl9wYXJzZXIub25lbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBtZS5lbWl0KCdlbmQnKVxuICAgIH1cblxuICAgIHRoaXMuX3BhcnNlci5vbmVycm9yID0gZnVuY3Rpb24gKGVyKSB7XG4gICAgICBtZS5lbWl0KCdlcnJvcicsIGVyKVxuXG4gICAgICAvLyBpZiBkaWRuJ3QgdGhyb3csIHRoZW4gbWVhbnMgZXJyb3Igd2FzIGhhbmRsZWQuXG4gICAgICAvLyBnbyBhaGVhZCBhbmQgY2xlYXIgZXJyb3IsIHNvIHdlIGNhbiB3cml0ZSBhZ2Fpbi5cbiAgICAgIG1lLl9wYXJzZXIuZXJyb3IgPSBudWxsXG4gICAgfVxuXG4gICAgdGhpcy5fZGVjb2RlciA9IG51bGxcblxuICAgIHN0cmVhbVdyYXBzLmZvckVhY2goZnVuY3Rpb24gKGV2KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobWUsICdvbicgKyBldiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gbWUuX3BhcnNlclsnb24nICsgZXZdXG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgICBpZiAoIWgpIHtcbiAgICAgICAgICAgIG1lLnJlbW92ZUFsbExpc3RlbmVycyhldilcbiAgICAgICAgICAgIG1lLl9wYXJzZXJbJ29uJyArIGV2XSA9IGhcbiAgICAgICAgICAgIHJldHVybiBoXG4gICAgICAgICAgfVxuICAgICAgICAgIG1lLm9uKGV2LCBoKVxuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBTQVhTdHJlYW0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdHJlYW0ucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBTQVhTdHJlYW1cbiAgICB9XG4gIH0pXG5cbiAgU0FYU3RyZWFtLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgaWYgKHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIHR5cGVvZiBCdWZmZXIuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkge1xuICAgICAgaWYgKCF0aGlzLl9kZWNvZGVyKSB7XG4gICAgICAgIHZhciBTRCA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyJykuU3RyaW5nRGVjb2RlclxuICAgICAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFNEKCd1dGY4JylcbiAgICAgIH1cbiAgICAgIGRhdGEgPSB0aGlzLl9kZWNvZGVyLndyaXRlKGRhdGEpXG4gICAgfVxuXG4gICAgdGhpcy5fcGFyc2VyLndyaXRlKGRhdGEudG9TdHJpbmcoKSlcbiAgICB0aGlzLmVtaXQoJ2RhdGEnLCBkYXRhKVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBTQVhTdHJlYW0ucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChjaHVuaykge1xuICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcbiAgICAgIHRoaXMud3JpdGUoY2h1bmspXG4gICAgfVxuICAgIHRoaXMuX3BhcnNlci5lbmQoKVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBTQVhTdHJlYW0ucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2LCBoYW5kbGVyKSB7XG4gICAgdmFyIG1lID0gdGhpc1xuICAgIGlmICghbWUuX3BhcnNlclsnb24nICsgZXZdICYmIHN0cmVhbVdyYXBzLmluZGV4T2YoZXYpICE9PSAtMSkge1xuICAgICAgbWUuX3BhcnNlclsnb24nICsgZXZdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBbYXJndW1lbnRzWzBdXSA6IEFycmF5LmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICAgICAgYXJncy5zcGxpY2UoMCwgMCwgZXYpXG4gICAgICAgIG1lLmVtaXQuYXBwbHkobWUsIGFyZ3MpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFN0cmVhbS5wcm90b3R5cGUub24uY2FsbChtZSwgZXYsIGhhbmRsZXIpXG4gIH1cblxuICAvLyB0aGlzIHJlYWxseSBuZWVkcyB0byBiZSByZXBsYWNlZCB3aXRoIGNoYXJhY3RlciBjbGFzc2VzLlxuICAvLyBYTUwgYWxsb3dzIGFsbCBtYW5uZXIgb2YgcmlkaWN1bG91cyBudW1iZXJzIGFuZCBkaWdpdHMuXG4gIHZhciBDREFUQSA9ICdbQ0RBVEFbJ1xuICB2YXIgRE9DVFlQRSA9ICdET0NUWVBFJ1xuICB2YXIgWE1MX05BTUVTUEFDRSA9ICdodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2UnXG4gIHZhciBYTUxOU19OQU1FU1BBQ0UgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy8nXG4gIHZhciByb290TlMgPSB7IHhtbDogWE1MX05BTUVTUEFDRSwgeG1sbnM6IFhNTE5TX05BTUVTUEFDRSB9XG5cbiAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvUkVDLXhtbC8jTlQtTmFtZVN0YXJ0Q2hhclxuICAvLyBUaGlzIGltcGxlbWVudGF0aW9uIHdvcmtzIG9uIHN0cmluZ3MsIGEgc2luZ2xlIGNoYXJhY3RlciBhdCBhIHRpbWVcbiAgLy8gYXMgc3VjaCwgaXQgY2Fubm90IGV2ZXIgc3VwcG9ydCBhc3RyYWwtcGxhbmUgY2hhcmFjdGVycyAoMTAwMDAtRUZGRkYpXG4gIC8vIHdpdGhvdXQgYSBzaWduaWZpY2FudCBicmVha2luZyBjaGFuZ2UgdG8gZWl0aGVyIHRoaXMgIHBhcnNlciwgb3IgdGhlXG4gIC8vIEphdmFTY3JpcHQgbGFuZ3VhZ2UuICBJbXBsZW1lbnRhdGlvbiBvZiBhbiBlbW9qaS1jYXBhYmxlIHhtbCBwYXJzZXJcbiAgLy8gaXMgbGVmdCBhcyBhbiBleGVyY2lzZSBmb3IgdGhlIHJlYWRlci5cbiAgdmFyIG5hbWVTdGFydCA9IC9bOl9BLVphLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdL1xuXG4gIHZhciBuYW1lQm9keSA9IC9bOl9BLVphLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwLlxcZC1dL1xuXG4gIHZhciBlbnRpdHlTdGFydCA9IC9bIzpfQS1aYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXS9cbiAgdmFyIGVudGl0eUJvZHkgPSAvWyM6X0EtWmEtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDAuXFxkLV0vXG5cbiAgZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChjKSB7XG4gICAgcmV0dXJuIGMgPT09ICcgJyB8fCBjID09PSAnXFxuJyB8fCBjID09PSAnXFxyJyB8fCBjID09PSAnXFx0J1xuICB9XG5cbiAgZnVuY3Rpb24gaXNRdW90ZSAoYykge1xuICAgIHJldHVybiBjID09PSAnXCInIHx8IGMgPT09ICdcXCcnXG4gIH1cblxuICBmdW5jdGlvbiBpc0F0dHJpYkVuZCAoYykge1xuICAgIHJldHVybiBjID09PSAnPicgfHwgaXNXaGl0ZXNwYWNlKGMpXG4gIH1cblxuICBmdW5jdGlvbiBpc01hdGNoIChyZWdleCwgYykge1xuICAgIHJldHVybiByZWdleC50ZXN0KGMpXG4gIH1cblxuICBmdW5jdGlvbiBub3RNYXRjaCAocmVnZXgsIGMpIHtcbiAgICByZXR1cm4gIWlzTWF0Y2gocmVnZXgsIGMpXG4gIH1cblxuICB2YXIgUyA9IDBcbiAgc2F4LlNUQVRFID0ge1xuICAgIEJFR0lOOiBTKyssIC8vIGxlYWRpbmcgYnl0ZSBvcmRlciBtYXJrIG9yIHdoaXRlc3BhY2VcbiAgICBCRUdJTl9XSElURVNQQUNFOiBTKyssIC8vIGxlYWRpbmcgd2hpdGVzcGFjZVxuICAgIFRFWFQ6IFMrKywgLy8gZ2VuZXJhbCBzdHVmZlxuICAgIFRFWFRfRU5USVRZOiBTKyssIC8vICZhbXAgYW5kIHN1Y2guXG4gICAgT1BFTl9XQUtBOiBTKyssIC8vIDxcbiAgICBTR01MX0RFQ0w6IFMrKywgLy8gPCFCTEFSR1xuICAgIFNHTUxfREVDTF9RVU9URUQ6IFMrKywgLy8gPCFCTEFSRyBmb28gXCJiYXJcbiAgICBET0NUWVBFOiBTKyssIC8vIDwhRE9DVFlQRVxuICAgIERPQ1RZUEVfUVVPVEVEOiBTKyssIC8vIDwhRE9DVFlQRSBcIi8vYmxhaFxuICAgIERPQ1RZUEVfRFREOiBTKyssIC8vIDwhRE9DVFlQRSBcIi8vYmxhaFwiIFsgLi4uXG4gICAgRE9DVFlQRV9EVERfUVVPVEVEOiBTKyssIC8vIDwhRE9DVFlQRSBcIi8vYmxhaFwiIFsgXCJmb29cbiAgICBDT01NRU5UX1NUQVJUSU5HOiBTKyssIC8vIDwhLVxuICAgIENPTU1FTlQ6IFMrKywgLy8gPCEtLVxuICAgIENPTU1FTlRfRU5ESU5HOiBTKyssIC8vIDwhLS0gYmxhaCAtXG4gICAgQ09NTUVOVF9FTkRFRDogUysrLCAvLyA8IS0tIGJsYWggLS1cbiAgICBDREFUQTogUysrLCAvLyA8IVtDREFUQVsgc29tZXRoaW5nXG4gICAgQ0RBVEFfRU5ESU5HOiBTKyssIC8vIF1cbiAgICBDREFUQV9FTkRJTkdfMjogUysrLCAvLyBdXVxuICAgIFBST0NfSU5TVDogUysrLCAvLyA8P2hpXG4gICAgUFJPQ19JTlNUX0JPRFk6IFMrKywgLy8gPD9oaSB0aGVyZVxuICAgIFBST0NfSU5TVF9FTkRJTkc6IFMrKywgLy8gPD9oaSBcInRoZXJlXCIgP1xuICAgIE9QRU5fVEFHOiBTKyssIC8vIDxzdHJvbmdcbiAgICBPUEVOX1RBR19TTEFTSDogUysrLCAvLyA8c3Ryb25nIC9cbiAgICBBVFRSSUI6IFMrKywgLy8gPGFcbiAgICBBVFRSSUJfTkFNRTogUysrLCAvLyA8YSBmb29cbiAgICBBVFRSSUJfTkFNRV9TQVdfV0hJVEU6IFMrKywgLy8gPGEgZm9vIF9cbiAgICBBVFRSSUJfVkFMVUU6IFMrKywgLy8gPGEgZm9vPVxuICAgIEFUVFJJQl9WQUxVRV9RVU9URUQ6IFMrKywgLy8gPGEgZm9vPVwiYmFyXG4gICAgQVRUUklCX1ZBTFVFX0NMT1NFRDogUysrLCAvLyA8YSBmb289XCJiYXJcIlxuICAgIEFUVFJJQl9WQUxVRV9VTlFVT1RFRDogUysrLCAvLyA8YSBmb289YmFyXG4gICAgQVRUUklCX1ZBTFVFX0VOVElUWV9ROiBTKyssIC8vIDxmb28gYmFyPVwiJnF1b3Q7XCJcbiAgICBBVFRSSUJfVkFMVUVfRU5USVRZX1U6IFMrKywgLy8gPGZvbyBiYXI9JnF1b3RcbiAgICBDTE9TRV9UQUc6IFMrKywgLy8gPC9hXG4gICAgQ0xPU0VfVEFHX1NBV19XSElURTogUysrLCAvLyA8L2EgICA+XG4gICAgU0NSSVBUOiBTKyssIC8vIDxzY3JpcHQ+IC4uLlxuICAgIFNDUklQVF9FTkRJTkc6IFMrKyAvLyA8c2NyaXB0PiAuLi4gPFxuICB9XG5cbiAgc2F4LlhNTF9FTlRJVElFUyA9IHtcbiAgICAnYW1wJzogJyYnLFxuICAgICdndCc6ICc+JyxcbiAgICAnbHQnOiAnPCcsXG4gICAgJ3F1b3QnOiAnXCInLFxuICAgICdhcG9zJzogXCInXCJcbiAgfVxuXG4gIHNheC5FTlRJVElFUyA9IHtcbiAgICAnYW1wJzogJyYnLFxuICAgICdndCc6ICc+JyxcbiAgICAnbHQnOiAnPCcsXG4gICAgJ3F1b3QnOiAnXCInLFxuICAgICdhcG9zJzogXCInXCIsXG4gICAgJ0FFbGlnJzogMTk4LFxuICAgICdBYWN1dGUnOiAxOTMsXG4gICAgJ0FjaXJjJzogMTk0LFxuICAgICdBZ3JhdmUnOiAxOTIsXG4gICAgJ0FyaW5nJzogMTk3LFxuICAgICdBdGlsZGUnOiAxOTUsXG4gICAgJ0F1bWwnOiAxOTYsXG4gICAgJ0NjZWRpbCc6IDE5OSxcbiAgICAnRVRIJzogMjA4LFxuICAgICdFYWN1dGUnOiAyMDEsXG4gICAgJ0VjaXJjJzogMjAyLFxuICAgICdFZ3JhdmUnOiAyMDAsXG4gICAgJ0V1bWwnOiAyMDMsXG4gICAgJ0lhY3V0ZSc6IDIwNSxcbiAgICAnSWNpcmMnOiAyMDYsXG4gICAgJ0lncmF2ZSc6IDIwNCxcbiAgICAnSXVtbCc6IDIwNyxcbiAgICAnTnRpbGRlJzogMjA5LFxuICAgICdPYWN1dGUnOiAyMTEsXG4gICAgJ09jaXJjJzogMjEyLFxuICAgICdPZ3JhdmUnOiAyMTAsXG4gICAgJ09zbGFzaCc6IDIxNixcbiAgICAnT3RpbGRlJzogMjEzLFxuICAgICdPdW1sJzogMjE0LFxuICAgICdUSE9STic6IDIyMixcbiAgICAnVWFjdXRlJzogMjE4LFxuICAgICdVY2lyYyc6IDIxOSxcbiAgICAnVWdyYXZlJzogMjE3LFxuICAgICdVdW1sJzogMjIwLFxuICAgICdZYWN1dGUnOiAyMjEsXG4gICAgJ2FhY3V0ZSc6IDIyNSxcbiAgICAnYWNpcmMnOiAyMjYsXG4gICAgJ2FlbGlnJzogMjMwLFxuICAgICdhZ3JhdmUnOiAyMjQsXG4gICAgJ2FyaW5nJzogMjI5LFxuICAgICdhdGlsZGUnOiAyMjcsXG4gICAgJ2F1bWwnOiAyMjgsXG4gICAgJ2NjZWRpbCc6IDIzMSxcbiAgICAnZWFjdXRlJzogMjMzLFxuICAgICdlY2lyYyc6IDIzNCxcbiAgICAnZWdyYXZlJzogMjMyLFxuICAgICdldGgnOiAyNDAsXG4gICAgJ2V1bWwnOiAyMzUsXG4gICAgJ2lhY3V0ZSc6IDIzNyxcbiAgICAnaWNpcmMnOiAyMzgsXG4gICAgJ2lncmF2ZSc6IDIzNixcbiAgICAnaXVtbCc6IDIzOSxcbiAgICAnbnRpbGRlJzogMjQxLFxuICAgICdvYWN1dGUnOiAyNDMsXG4gICAgJ29jaXJjJzogMjQ0LFxuICAgICdvZ3JhdmUnOiAyNDIsXG4gICAgJ29zbGFzaCc6IDI0OCxcbiAgICAnb3RpbGRlJzogMjQ1LFxuICAgICdvdW1sJzogMjQ2LFxuICAgICdzemxpZyc6IDIyMyxcbiAgICAndGhvcm4nOiAyNTQsXG4gICAgJ3VhY3V0ZSc6IDI1MCxcbiAgICAndWNpcmMnOiAyNTEsXG4gICAgJ3VncmF2ZSc6IDI0OSxcbiAgICAndXVtbCc6IDI1MixcbiAgICAneWFjdXRlJzogMjUzLFxuICAgICd5dW1sJzogMjU1LFxuICAgICdjb3B5JzogMTY5LFxuICAgICdyZWcnOiAxNzQsXG4gICAgJ25ic3AnOiAxNjAsXG4gICAgJ2lleGNsJzogMTYxLFxuICAgICdjZW50JzogMTYyLFxuICAgICdwb3VuZCc6IDE2MyxcbiAgICAnY3VycmVuJzogMTY0LFxuICAgICd5ZW4nOiAxNjUsXG4gICAgJ2JydmJhcic6IDE2NixcbiAgICAnc2VjdCc6IDE2NyxcbiAgICAndW1sJzogMTY4LFxuICAgICdvcmRmJzogMTcwLFxuICAgICdsYXF1byc6IDE3MSxcbiAgICAnbm90JzogMTcyLFxuICAgICdzaHknOiAxNzMsXG4gICAgJ21hY3InOiAxNzUsXG4gICAgJ2RlZyc6IDE3NixcbiAgICAncGx1c21uJzogMTc3LFxuICAgICdzdXAxJzogMTg1LFxuICAgICdzdXAyJzogMTc4LFxuICAgICdzdXAzJzogMTc5LFxuICAgICdhY3V0ZSc6IDE4MCxcbiAgICAnbWljcm8nOiAxODEsXG4gICAgJ3BhcmEnOiAxODIsXG4gICAgJ21pZGRvdCc6IDE4MyxcbiAgICAnY2VkaWwnOiAxODQsXG4gICAgJ29yZG0nOiAxODYsXG4gICAgJ3JhcXVvJzogMTg3LFxuICAgICdmcmFjMTQnOiAxODgsXG4gICAgJ2ZyYWMxMic6IDE4OSxcbiAgICAnZnJhYzM0JzogMTkwLFxuICAgICdpcXVlc3QnOiAxOTEsXG4gICAgJ3RpbWVzJzogMjE1LFxuICAgICdkaXZpZGUnOiAyNDcsXG4gICAgJ09FbGlnJzogMzM4LFxuICAgICdvZWxpZyc6IDMzOSxcbiAgICAnU2Nhcm9uJzogMzUyLFxuICAgICdzY2Fyb24nOiAzNTMsXG4gICAgJ1l1bWwnOiAzNzYsXG4gICAgJ2Zub2YnOiA0MDIsXG4gICAgJ2NpcmMnOiA3MTAsXG4gICAgJ3RpbGRlJzogNzMyLFxuICAgICdBbHBoYSc6IDkxMyxcbiAgICAnQmV0YSc6IDkxNCxcbiAgICAnR2FtbWEnOiA5MTUsXG4gICAgJ0RlbHRhJzogOTE2LFxuICAgICdFcHNpbG9uJzogOTE3LFxuICAgICdaZXRhJzogOTE4LFxuICAgICdFdGEnOiA5MTksXG4gICAgJ1RoZXRhJzogOTIwLFxuICAgICdJb3RhJzogOTIxLFxuICAgICdLYXBwYSc6IDkyMixcbiAgICAnTGFtYmRhJzogOTIzLFxuICAgICdNdSc6IDkyNCxcbiAgICAnTnUnOiA5MjUsXG4gICAgJ1hpJzogOTI2LFxuICAgICdPbWljcm9uJzogOTI3LFxuICAgICdQaSc6IDkyOCxcbiAgICAnUmhvJzogOTI5LFxuICAgICdTaWdtYSc6IDkzMSxcbiAgICAnVGF1JzogOTMyLFxuICAgICdVcHNpbG9uJzogOTMzLFxuICAgICdQaGknOiA5MzQsXG4gICAgJ0NoaSc6IDkzNSxcbiAgICAnUHNpJzogOTM2LFxuICAgICdPbWVnYSc6IDkzNyxcbiAgICAnYWxwaGEnOiA5NDUsXG4gICAgJ2JldGEnOiA5NDYsXG4gICAgJ2dhbW1hJzogOTQ3LFxuICAgICdkZWx0YSc6IDk0OCxcbiAgICAnZXBzaWxvbic6IDk0OSxcbiAgICAnemV0YSc6IDk1MCxcbiAgICAnZXRhJzogOTUxLFxuICAgICd0aGV0YSc6IDk1MixcbiAgICAnaW90YSc6IDk1MyxcbiAgICAna2FwcGEnOiA5NTQsXG4gICAgJ2xhbWJkYSc6IDk1NSxcbiAgICAnbXUnOiA5NTYsXG4gICAgJ251JzogOTU3LFxuICAgICd4aSc6IDk1OCxcbiAgICAnb21pY3Jvbic6IDk1OSxcbiAgICAncGknOiA5NjAsXG4gICAgJ3Jobyc6IDk2MSxcbiAgICAnc2lnbWFmJzogOTYyLFxuICAgICdzaWdtYSc6IDk2MyxcbiAgICAndGF1JzogOTY0LFxuICAgICd1cHNpbG9uJzogOTY1LFxuICAgICdwaGknOiA5NjYsXG4gICAgJ2NoaSc6IDk2NyxcbiAgICAncHNpJzogOTY4LFxuICAgICdvbWVnYSc6IDk2OSxcbiAgICAndGhldGFzeW0nOiA5NzcsXG4gICAgJ3Vwc2loJzogOTc4LFxuICAgICdwaXYnOiA5ODIsXG4gICAgJ2Vuc3AnOiA4MTk0LFxuICAgICdlbXNwJzogODE5NSxcbiAgICAndGhpbnNwJzogODIwMSxcbiAgICAnenduaic6IDgyMDQsXG4gICAgJ3p3aic6IDgyMDUsXG4gICAgJ2xybSc6IDgyMDYsXG4gICAgJ3JsbSc6IDgyMDcsXG4gICAgJ25kYXNoJzogODIxMSxcbiAgICAnbWRhc2gnOiA4MjEyLFxuICAgICdsc3F1byc6IDgyMTYsXG4gICAgJ3JzcXVvJzogODIxNyxcbiAgICAnc2JxdW8nOiA4MjE4LFxuICAgICdsZHF1byc6IDgyMjAsXG4gICAgJ3JkcXVvJzogODIyMSxcbiAgICAnYmRxdW8nOiA4MjIyLFxuICAgICdkYWdnZXInOiA4MjI0LFxuICAgICdEYWdnZXInOiA4MjI1LFxuICAgICdidWxsJzogODIyNixcbiAgICAnaGVsbGlwJzogODIzMCxcbiAgICAncGVybWlsJzogODI0MCxcbiAgICAncHJpbWUnOiA4MjQyLFxuICAgICdQcmltZSc6IDgyNDMsXG4gICAgJ2xzYXF1byc6IDgyNDksXG4gICAgJ3JzYXF1byc6IDgyNTAsXG4gICAgJ29saW5lJzogODI1NCxcbiAgICAnZnJhc2wnOiA4MjYwLFxuICAgICdldXJvJzogODM2NCxcbiAgICAnaW1hZ2UnOiA4NDY1LFxuICAgICd3ZWllcnAnOiA4NDcyLFxuICAgICdyZWFsJzogODQ3NixcbiAgICAndHJhZGUnOiA4NDgyLFxuICAgICdhbGVmc3ltJzogODUwMSxcbiAgICAnbGFycic6IDg1OTIsXG4gICAgJ3VhcnInOiA4NTkzLFxuICAgICdyYXJyJzogODU5NCxcbiAgICAnZGFycic6IDg1OTUsXG4gICAgJ2hhcnInOiA4NTk2LFxuICAgICdjcmFycic6IDg2MjksXG4gICAgJ2xBcnInOiA4NjU2LFxuICAgICd1QXJyJzogODY1NyxcbiAgICAnckFycic6IDg2NTgsXG4gICAgJ2RBcnInOiA4NjU5LFxuICAgICdoQXJyJzogODY2MCxcbiAgICAnZm9yYWxsJzogODcwNCxcbiAgICAncGFydCc6IDg3MDYsXG4gICAgJ2V4aXN0JzogODcwNyxcbiAgICAnZW1wdHknOiA4NzA5LFxuICAgICduYWJsYSc6IDg3MTEsXG4gICAgJ2lzaW4nOiA4NzEyLFxuICAgICdub3Rpbic6IDg3MTMsXG4gICAgJ25pJzogODcxNSxcbiAgICAncHJvZCc6IDg3MTksXG4gICAgJ3N1bSc6IDg3MjEsXG4gICAgJ21pbnVzJzogODcyMixcbiAgICAnbG93YXN0JzogODcyNyxcbiAgICAncmFkaWMnOiA4NzMwLFxuICAgICdwcm9wJzogODczMyxcbiAgICAnaW5maW4nOiA4NzM0LFxuICAgICdhbmcnOiA4NzM2LFxuICAgICdhbmQnOiA4NzQzLFxuICAgICdvcic6IDg3NDQsXG4gICAgJ2NhcCc6IDg3NDUsXG4gICAgJ2N1cCc6IDg3NDYsXG4gICAgJ2ludCc6IDg3NDcsXG4gICAgJ3RoZXJlNCc6IDg3NTYsXG4gICAgJ3NpbSc6IDg3NjQsXG4gICAgJ2NvbmcnOiA4NzczLFxuICAgICdhc3ltcCc6IDg3NzYsXG4gICAgJ25lJzogODgwMCxcbiAgICAnZXF1aXYnOiA4ODAxLFxuICAgICdsZSc6IDg4MDQsXG4gICAgJ2dlJzogODgwNSxcbiAgICAnc3ViJzogODgzNCxcbiAgICAnc3VwJzogODgzNSxcbiAgICAnbnN1Yic6IDg4MzYsXG4gICAgJ3N1YmUnOiA4ODM4LFxuICAgICdzdXBlJzogODgzOSxcbiAgICAnb3BsdXMnOiA4ODUzLFxuICAgICdvdGltZXMnOiA4ODU1LFxuICAgICdwZXJwJzogODg2OSxcbiAgICAnc2RvdCc6IDg5MDEsXG4gICAgJ2xjZWlsJzogODk2OCxcbiAgICAncmNlaWwnOiA4OTY5LFxuICAgICdsZmxvb3InOiA4OTcwLFxuICAgICdyZmxvb3InOiA4OTcxLFxuICAgICdsYW5nJzogOTAwMSxcbiAgICAncmFuZyc6IDkwMDIsXG4gICAgJ2xveic6IDk2NzQsXG4gICAgJ3NwYWRlcyc6IDk4MjQsXG4gICAgJ2NsdWJzJzogOTgyNyxcbiAgICAnaGVhcnRzJzogOTgyOSxcbiAgICAnZGlhbXMnOiA5ODMwXG4gIH1cblxuICBPYmplY3Qua2V5cyhzYXguRU5USVRJRVMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBlID0gc2F4LkVOVElUSUVTW2tleV1cbiAgICB2YXIgcyA9IHR5cGVvZiBlID09PSAnbnVtYmVyJyA/IFN0cmluZy5mcm9tQ2hhckNvZGUoZSkgOiBlXG4gICAgc2F4LkVOVElUSUVTW2tleV0gPSBzXG4gIH0pXG5cbiAgZm9yICh2YXIgcyBpbiBzYXguU1RBVEUpIHtcbiAgICBzYXguU1RBVEVbc2F4LlNUQVRFW3NdXSA9IHNcbiAgfVxuXG4gIC8vIHNob3J0aGFuZFxuICBTID0gc2F4LlNUQVRFXG5cbiAgZnVuY3Rpb24gZW1pdCAocGFyc2VyLCBldmVudCwgZGF0YSkge1xuICAgIHBhcnNlcltldmVudF0gJiYgcGFyc2VyW2V2ZW50XShkYXRhKVxuICB9XG5cbiAgZnVuY3Rpb24gZW1pdE5vZGUgKHBhcnNlciwgbm9kZVR5cGUsIGRhdGEpIHtcbiAgICBpZiAocGFyc2VyLnRleHROb2RlKSBjbG9zZVRleHQocGFyc2VyKVxuICAgIGVtaXQocGFyc2VyLCBub2RlVHlwZSwgZGF0YSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3NlVGV4dCAocGFyc2VyKSB7XG4gICAgcGFyc2VyLnRleHROb2RlID0gdGV4dG9wdHMocGFyc2VyLm9wdCwgcGFyc2VyLnRleHROb2RlKVxuICAgIGlmIChwYXJzZXIudGV4dE5vZGUpIGVtaXQocGFyc2VyLCAnb250ZXh0JywgcGFyc2VyLnRleHROb2RlKVxuICAgIHBhcnNlci50ZXh0Tm9kZSA9ICcnXG4gIH1cblxuICBmdW5jdGlvbiB0ZXh0b3B0cyAob3B0LCB0ZXh0KSB7XG4gICAgaWYgKG9wdC50cmltKSB0ZXh0ID0gdGV4dC50cmltKClcbiAgICBpZiAob3B0Lm5vcm1hbGl6ZSkgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxzKy9nLCAnICcpXG4gICAgcmV0dXJuIHRleHRcbiAgfVxuXG4gIGZ1bmN0aW9uIGVycm9yIChwYXJzZXIsIGVyKSB7XG4gICAgY2xvc2VUZXh0KHBhcnNlcilcbiAgICBpZiAocGFyc2VyLnRyYWNrUG9zaXRpb24pIHtcbiAgICAgIGVyICs9ICdcXG5MaW5lOiAnICsgcGFyc2VyLmxpbmUgK1xuICAgICAgICAnXFxuQ29sdW1uOiAnICsgcGFyc2VyLmNvbHVtbiArXG4gICAgICAgICdcXG5DaGFyOiAnICsgcGFyc2VyLmNcbiAgICB9XG4gICAgZXIgPSBuZXcgRXJyb3IoZXIpXG4gICAgcGFyc2VyLmVycm9yID0gZXJcbiAgICBlbWl0KHBhcnNlciwgJ29uZXJyb3InLCBlcilcbiAgICByZXR1cm4gcGFyc2VyXG4gIH1cblxuICBmdW5jdGlvbiBlbmQgKHBhcnNlcikge1xuICAgIGlmIChwYXJzZXIuc2F3Um9vdCAmJiAhcGFyc2VyLmNsb3NlZFJvb3QpIHN0cmljdEZhaWwocGFyc2VyLCAnVW5jbG9zZWQgcm9vdCB0YWcnKVxuICAgIGlmICgocGFyc2VyLnN0YXRlICE9PSBTLkJFR0lOKSAmJlxuICAgICAgKHBhcnNlci5zdGF0ZSAhPT0gUy5CRUdJTl9XSElURVNQQUNFKSAmJlxuICAgICAgKHBhcnNlci5zdGF0ZSAhPT0gUy5URVhUKSkge1xuICAgICAgZXJyb3IocGFyc2VyLCAnVW5leHBlY3RlZCBlbmQnKVxuICAgIH1cbiAgICBjbG9zZVRleHQocGFyc2VyKVxuICAgIHBhcnNlci5jID0gJydcbiAgICBwYXJzZXIuY2xvc2VkID0gdHJ1ZVxuICAgIGVtaXQocGFyc2VyLCAnb25lbmQnKVxuICAgIFNBWFBhcnNlci5jYWxsKHBhcnNlciwgcGFyc2VyLnN0cmljdCwgcGFyc2VyLm9wdClcbiAgICByZXR1cm4gcGFyc2VyXG4gIH1cblxuICBmdW5jdGlvbiBzdHJpY3RGYWlsIChwYXJzZXIsIG1lc3NhZ2UpIHtcbiAgICBpZiAodHlwZW9mIHBhcnNlciAhPT0gJ29iamVjdCcgfHwgIShwYXJzZXIgaW5zdGFuY2VvZiBTQVhQYXJzZXIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBjYWxsIHRvIHN0cmljdEZhaWwnKVxuICAgIH1cbiAgICBpZiAocGFyc2VyLnN0cmljdCkge1xuICAgICAgZXJyb3IocGFyc2VyLCBtZXNzYWdlKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG5ld1RhZyAocGFyc2VyKSB7XG4gICAgaWYgKCFwYXJzZXIuc3RyaWN0KSBwYXJzZXIudGFnTmFtZSA9IHBhcnNlci50YWdOYW1lW3BhcnNlci5sb29zZUNhc2VdKClcbiAgICB2YXIgcGFyZW50ID0gcGFyc2VyLnRhZ3NbcGFyc2VyLnRhZ3MubGVuZ3RoIC0gMV0gfHwgcGFyc2VyXG4gICAgdmFyIHRhZyA9IHBhcnNlci50YWcgPSB7IG5hbWU6IHBhcnNlci50YWdOYW1lLCBhdHRyaWJ1dGVzOiB7fSB9XG5cbiAgICAvLyB3aWxsIGJlIG92ZXJyaWRkZW4gaWYgdGFnIGNvbnRhaWxzIGFuIHhtbG5zPVwiZm9vXCIgb3IgeG1sbnM6Zm9vPVwiYmFyXCJcbiAgICBpZiAocGFyc2VyLm9wdC54bWxucykge1xuICAgICAgdGFnLm5zID0gcGFyZW50Lm5zXG4gICAgfVxuICAgIHBhcnNlci5hdHRyaWJMaXN0Lmxlbmd0aCA9IDBcbiAgICBlbWl0Tm9kZShwYXJzZXIsICdvbm9wZW50YWdzdGFydCcsIHRhZylcbiAgfVxuXG4gIGZ1bmN0aW9uIHFuYW1lIChuYW1lLCBhdHRyaWJ1dGUpIHtcbiAgICB2YXIgaSA9IG5hbWUuaW5kZXhPZignOicpXG4gICAgdmFyIHF1YWxOYW1lID0gaSA8IDAgPyBbICcnLCBuYW1lIF0gOiBuYW1lLnNwbGl0KCc6JylcbiAgICB2YXIgcHJlZml4ID0gcXVhbE5hbWVbMF1cbiAgICB2YXIgbG9jYWwgPSBxdWFsTmFtZVsxXVxuXG4gICAgLy8gPHggXCJ4bWxuc1wiPVwiaHR0cDovL2Zvb1wiPlxuICAgIGlmIChhdHRyaWJ1dGUgJiYgbmFtZSA9PT0gJ3htbG5zJykge1xuICAgICAgcHJlZml4ID0gJ3htbG5zJ1xuICAgICAgbG9jYWwgPSAnJ1xuICAgIH1cblxuICAgIHJldHVybiB7IHByZWZpeDogcHJlZml4LCBsb2NhbDogbG9jYWwgfVxuICB9XG5cbiAgZnVuY3Rpb24gYXR0cmliIChwYXJzZXIpIHtcbiAgICBpZiAoIXBhcnNlci5zdHJpY3QpIHtcbiAgICAgIHBhcnNlci5hdHRyaWJOYW1lID0gcGFyc2VyLmF0dHJpYk5hbWVbcGFyc2VyLmxvb3NlQ2FzZV0oKVxuICAgIH1cblxuICAgIGlmIChwYXJzZXIuYXR0cmliTGlzdC5pbmRleE9mKHBhcnNlci5hdHRyaWJOYW1lKSAhPT0gLTEgfHxcbiAgICAgIHBhcnNlci50YWcuYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShwYXJzZXIuYXR0cmliTmFtZSkpIHtcbiAgICAgIHBhcnNlci5hdHRyaWJOYW1lID0gcGFyc2VyLmF0dHJpYlZhbHVlID0gJydcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChwYXJzZXIub3B0LnhtbG5zKSB7XG4gICAgICB2YXIgcW4gPSBxbmFtZShwYXJzZXIuYXR0cmliTmFtZSwgdHJ1ZSlcbiAgICAgIHZhciBwcmVmaXggPSBxbi5wcmVmaXhcbiAgICAgIHZhciBsb2NhbCA9IHFuLmxvY2FsXG5cbiAgICAgIGlmIChwcmVmaXggPT09ICd4bWxucycpIHtcbiAgICAgICAgLy8gbmFtZXNwYWNlIGJpbmRpbmcgYXR0cmlidXRlLiBwdXNoIHRoZSBiaW5kaW5nIGludG8gc2NvcGVcbiAgICAgICAgaWYgKGxvY2FsID09PSAneG1sJyAmJiBwYXJzZXIuYXR0cmliVmFsdWUgIT09IFhNTF9OQU1FU1BBQ0UpIHtcbiAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlcixcbiAgICAgICAgICAgICd4bWw6IHByZWZpeCBtdXN0IGJlIGJvdW5kIHRvICcgKyBYTUxfTkFNRVNQQUNFICsgJ1xcbicgK1xuICAgICAgICAgICAgJ0FjdHVhbDogJyArIHBhcnNlci5hdHRyaWJWYWx1ZSlcbiAgICAgICAgfSBlbHNlIGlmIChsb2NhbCA9PT0gJ3htbG5zJyAmJiBwYXJzZXIuYXR0cmliVmFsdWUgIT09IFhNTE5TX05BTUVTUEFDRSkge1xuICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLFxuICAgICAgICAgICAgJ3htbG5zOiBwcmVmaXggbXVzdCBiZSBib3VuZCB0byAnICsgWE1MTlNfTkFNRVNQQUNFICsgJ1xcbicgK1xuICAgICAgICAgICAgJ0FjdHVhbDogJyArIHBhcnNlci5hdHRyaWJWYWx1ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdGFnID0gcGFyc2VyLnRhZ1xuICAgICAgICAgIHZhciBwYXJlbnQgPSBwYXJzZXIudGFnc1twYXJzZXIudGFncy5sZW5ndGggLSAxXSB8fCBwYXJzZXJcbiAgICAgICAgICBpZiAodGFnLm5zID09PSBwYXJlbnQubnMpIHtcbiAgICAgICAgICAgIHRhZy5ucyA9IE9iamVjdC5jcmVhdGUocGFyZW50Lm5zKVxuICAgICAgICAgIH1cbiAgICAgICAgICB0YWcubnNbbG9jYWxdID0gcGFyc2VyLmF0dHJpYlZhbHVlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gZGVmZXIgb25hdHRyaWJ1dGUgZXZlbnRzIHVudGlsIGFsbCBhdHRyaWJ1dGVzIGhhdmUgYmVlbiBzZWVuXG4gICAgICAvLyBzbyBhbnkgbmV3IGJpbmRpbmdzIGNhbiB0YWtlIGVmZmVjdC4gcHJlc2VydmUgYXR0cmlidXRlIG9yZGVyXG4gICAgICAvLyBzbyBkZWZlcnJlZCBldmVudHMgY2FuIGJlIGVtaXR0ZWQgaW4gZG9jdW1lbnQgb3JkZXJcbiAgICAgIHBhcnNlci5hdHRyaWJMaXN0LnB1c2goW3BhcnNlci5hdHRyaWJOYW1lLCBwYXJzZXIuYXR0cmliVmFsdWVdKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbiBub24teG1sbnMgbW9kZSwgd2UgY2FuIGVtaXQgdGhlIGV2ZW50IHJpZ2h0IGF3YXlcbiAgICAgIHBhcnNlci50YWcuYXR0cmlidXRlc1twYXJzZXIuYXR0cmliTmFtZV0gPSBwYXJzZXIuYXR0cmliVmFsdWVcbiAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uYXR0cmlidXRlJywge1xuICAgICAgICBuYW1lOiBwYXJzZXIuYXR0cmliTmFtZSxcbiAgICAgICAgdmFsdWU6IHBhcnNlci5hdHRyaWJWYWx1ZVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBwYXJzZXIuYXR0cmliTmFtZSA9IHBhcnNlci5hdHRyaWJWYWx1ZSA9ICcnXG4gIH1cblxuICBmdW5jdGlvbiBvcGVuVGFnIChwYXJzZXIsIHNlbGZDbG9zaW5nKSB7XG4gICAgaWYgKHBhcnNlci5vcHQueG1sbnMpIHtcbiAgICAgIC8vIGVtaXQgbmFtZXNwYWNlIGJpbmRpbmcgZXZlbnRzXG4gICAgICB2YXIgdGFnID0gcGFyc2VyLnRhZ1xuXG4gICAgICAvLyBhZGQgbmFtZXNwYWNlIGluZm8gdG8gdGFnXG4gICAgICB2YXIgcW4gPSBxbmFtZShwYXJzZXIudGFnTmFtZSlcbiAgICAgIHRhZy5wcmVmaXggPSBxbi5wcmVmaXhcbiAgICAgIHRhZy5sb2NhbCA9IHFuLmxvY2FsXG4gICAgICB0YWcudXJpID0gdGFnLm5zW3FuLnByZWZpeF0gfHwgJydcblxuICAgICAgaWYgKHRhZy5wcmVmaXggJiYgIXRhZy51cmkpIHtcbiAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdVbmJvdW5kIG5hbWVzcGFjZSBwcmVmaXg6ICcgK1xuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHBhcnNlci50YWdOYW1lKSlcbiAgICAgICAgdGFnLnVyaSA9IHFuLnByZWZpeFxuICAgICAgfVxuXG4gICAgICB2YXIgcGFyZW50ID0gcGFyc2VyLnRhZ3NbcGFyc2VyLnRhZ3MubGVuZ3RoIC0gMV0gfHwgcGFyc2VyXG4gICAgICBpZiAodGFnLm5zICYmIHBhcmVudC5ucyAhPT0gdGFnLm5zKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHRhZy5ucykuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29ub3Blbm5hbWVzcGFjZScsIHtcbiAgICAgICAgICAgIHByZWZpeDogcCxcbiAgICAgICAgICAgIHVyaTogdGFnLm5zW3BdXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgLy8gaGFuZGxlIGRlZmVycmVkIG9uYXR0cmlidXRlIGV2ZW50c1xuICAgICAgLy8gTm90ZTogZG8gbm90IGFwcGx5IGRlZmF1bHQgbnMgdG8gYXR0cmlidXRlczpcbiAgICAgIC8vICAgaHR0cDovL3d3dy53My5vcmcvVFIvUkVDLXhtbC1uYW1lcy8jZGVmYXVsdGluZ1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYXJzZXIuYXR0cmliTGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdmFyIG52ID0gcGFyc2VyLmF0dHJpYkxpc3RbaV1cbiAgICAgICAgdmFyIG5hbWUgPSBudlswXVxuICAgICAgICB2YXIgdmFsdWUgPSBudlsxXVxuICAgICAgICB2YXIgcXVhbE5hbWUgPSBxbmFtZShuYW1lLCB0cnVlKVxuICAgICAgICB2YXIgcHJlZml4ID0gcXVhbE5hbWUucHJlZml4XG4gICAgICAgIHZhciBsb2NhbCA9IHF1YWxOYW1lLmxvY2FsXG4gICAgICAgIHZhciB1cmkgPSBwcmVmaXggPT09ICcnID8gJycgOiAodGFnLm5zW3ByZWZpeF0gfHwgJycpXG4gICAgICAgIHZhciBhID0ge1xuICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIHByZWZpeDogcHJlZml4LFxuICAgICAgICAgIGxvY2FsOiBsb2NhbCxcbiAgICAgICAgICB1cmk6IHVyaVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgdGhlcmUncyBhbnkgYXR0cmlidXRlcyB3aXRoIGFuIHVuZGVmaW5lZCBuYW1lc3BhY2UsXG4gICAgICAgIC8vIHRoZW4gZmFpbCBvbiB0aGVtIG5vdy5cbiAgICAgICAgaWYgKHByZWZpeCAmJiBwcmVmaXggIT09ICd4bWxucycgJiYgIXVyaSkge1xuICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnVW5ib3VuZCBuYW1lc3BhY2UgcHJlZml4OiAnICtcbiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHByZWZpeCkpXG4gICAgICAgICAgYS51cmkgPSBwcmVmaXhcbiAgICAgICAgfVxuICAgICAgICBwYXJzZXIudGFnLmF0dHJpYnV0ZXNbbmFtZV0gPSBhXG4gICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uYXR0cmlidXRlJywgYSlcbiAgICAgIH1cbiAgICAgIHBhcnNlci5hdHRyaWJMaXN0Lmxlbmd0aCA9IDBcbiAgICB9XG5cbiAgICBwYXJzZXIudGFnLmlzU2VsZkNsb3NpbmcgPSAhIXNlbGZDbG9zaW5nXG5cbiAgICAvLyBwcm9jZXNzIHRoZSB0YWdcbiAgICBwYXJzZXIuc2F3Um9vdCA9IHRydWVcbiAgICBwYXJzZXIudGFncy5wdXNoKHBhcnNlci50YWcpXG4gICAgZW1pdE5vZGUocGFyc2VyLCAnb25vcGVudGFnJywgcGFyc2VyLnRhZylcbiAgICBpZiAoIXNlbGZDbG9zaW5nKSB7XG4gICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIDxzY3JpcHQ+IGluIG5vbi1zdHJpY3QgbW9kZS5cbiAgICAgIGlmICghcGFyc2VyLm5vc2NyaXB0ICYmIHBhcnNlci50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzY3JpcHQnKSB7XG4gICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuU0NSSVBUXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFRcbiAgICAgIH1cbiAgICAgIHBhcnNlci50YWcgPSBudWxsXG4gICAgICBwYXJzZXIudGFnTmFtZSA9ICcnXG4gICAgfVxuICAgIHBhcnNlci5hdHRyaWJOYW1lID0gcGFyc2VyLmF0dHJpYlZhbHVlID0gJydcbiAgICBwYXJzZXIuYXR0cmliTGlzdC5sZW5ndGggPSAwXG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZVRhZyAocGFyc2VyKSB7XG4gICAgaWYgKCFwYXJzZXIudGFnTmFtZSkge1xuICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdXZWlyZCBlbXB0eSBjbG9zZSB0YWcuJylcbiAgICAgIHBhcnNlci50ZXh0Tm9kZSArPSAnPC8+J1xuICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAocGFyc2VyLnNjcmlwdCkge1xuICAgICAgaWYgKHBhcnNlci50YWdOYW1lICE9PSAnc2NyaXB0Jykge1xuICAgICAgICBwYXJzZXIuc2NyaXB0ICs9ICc8LycgKyBwYXJzZXIudGFnTmFtZSArICc+J1xuICAgICAgICBwYXJzZXIudGFnTmFtZSA9ICcnXG4gICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuU0NSSVBUXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25zY3JpcHQnLCBwYXJzZXIuc2NyaXB0KVxuICAgICAgcGFyc2VyLnNjcmlwdCA9ICcnXG4gICAgfVxuXG4gICAgLy8gZmlyc3QgbWFrZSBzdXJlIHRoYXQgdGhlIGNsb3NpbmcgdGFnIGFjdHVhbGx5IGV4aXN0cy5cbiAgICAvLyA8YT48Yj48L2M+PC9iPjwvYT4gd2lsbCBjbG9zZSBldmVyeXRoaW5nLCBvdGhlcndpc2UuXG4gICAgdmFyIHQgPSBwYXJzZXIudGFncy5sZW5ndGhcbiAgICB2YXIgdGFnTmFtZSA9IHBhcnNlci50YWdOYW1lXG4gICAgaWYgKCFwYXJzZXIuc3RyaWN0KSB7XG4gICAgICB0YWdOYW1lID0gdGFnTmFtZVtwYXJzZXIubG9vc2VDYXNlXSgpXG4gICAgfVxuICAgIHZhciBjbG9zZVRvID0gdGFnTmFtZVxuICAgIHdoaWxlICh0LS0pIHtcbiAgICAgIHZhciBjbG9zZSA9IHBhcnNlci50YWdzW3RdXG4gICAgICBpZiAoY2xvc2UubmFtZSAhPT0gY2xvc2VUbykge1xuICAgICAgICAvLyBmYWlsIHRoZSBmaXJzdCB0aW1lIGluIHN0cmljdCBtb2RlXG4gICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnVW5leHBlY3RlZCBjbG9zZSB0YWcnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkaWRuJ3QgZmluZCBpdC4gIHdlIGFscmVhZHkgZmFpbGVkIGZvciBzdHJpY3QsIHNvIGp1c3QgYWJvcnQuXG4gICAgaWYgKHQgPCAwKSB7XG4gICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ1VubWF0Y2hlZCBjbG9zaW5nIHRhZzogJyArIHBhcnNlci50YWdOYW1lKVxuICAgICAgcGFyc2VyLnRleHROb2RlICs9ICc8LycgKyBwYXJzZXIudGFnTmFtZSArICc+J1xuICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgcGFyc2VyLnRhZ05hbWUgPSB0YWdOYW1lXG4gICAgdmFyIHMgPSBwYXJzZXIudGFncy5sZW5ndGhcbiAgICB3aGlsZSAocy0tID4gdCkge1xuICAgICAgdmFyIHRhZyA9IHBhcnNlci50YWcgPSBwYXJzZXIudGFncy5wb3AoKVxuICAgICAgcGFyc2VyLnRhZ05hbWUgPSBwYXJzZXIudGFnLm5hbWVcbiAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uY2xvc2V0YWcnLCBwYXJzZXIudGFnTmFtZSlcblxuICAgICAgdmFyIHggPSB7fVxuICAgICAgZm9yICh2YXIgaSBpbiB0YWcubnMpIHtcbiAgICAgICAgeFtpXSA9IHRhZy5uc1tpXVxuICAgICAgfVxuXG4gICAgICB2YXIgcGFyZW50ID0gcGFyc2VyLnRhZ3NbcGFyc2VyLnRhZ3MubGVuZ3RoIC0gMV0gfHwgcGFyc2VyXG4gICAgICBpZiAocGFyc2VyLm9wdC54bWxucyAmJiB0YWcubnMgIT09IHBhcmVudC5ucykge1xuICAgICAgICAvLyByZW1vdmUgbmFtZXNwYWNlIGJpbmRpbmdzIGludHJvZHVjZWQgYnkgdGFnXG4gICAgICAgIE9iamVjdC5rZXlzKHRhZy5ucykuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgICAgIHZhciBuID0gdGFnLm5zW3BdXG4gICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25jbG9zZW5hbWVzcGFjZScsIHsgcHJlZml4OiBwLCB1cmk6IG4gfSlcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHQgPT09IDApIHBhcnNlci5jbG9zZWRSb290ID0gdHJ1ZVxuICAgIHBhcnNlci50YWdOYW1lID0gcGFyc2VyLmF0dHJpYlZhbHVlID0gcGFyc2VyLmF0dHJpYk5hbWUgPSAnJ1xuICAgIHBhcnNlci5hdHRyaWJMaXN0Lmxlbmd0aCA9IDBcbiAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFRcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRW50aXR5IChwYXJzZXIpIHtcbiAgICB2YXIgZW50aXR5ID0gcGFyc2VyLmVudGl0eVxuICAgIHZhciBlbnRpdHlMQyA9IGVudGl0eS50b0xvd2VyQ2FzZSgpXG4gICAgdmFyIG51bVxuICAgIHZhciBudW1TdHIgPSAnJ1xuXG4gICAgaWYgKHBhcnNlci5FTlRJVElFU1tlbnRpdHldKSB7XG4gICAgICByZXR1cm4gcGFyc2VyLkVOVElUSUVTW2VudGl0eV1cbiAgICB9XG4gICAgaWYgKHBhcnNlci5FTlRJVElFU1tlbnRpdHlMQ10pIHtcbiAgICAgIHJldHVybiBwYXJzZXIuRU5USVRJRVNbZW50aXR5TENdXG4gICAgfVxuICAgIGVudGl0eSA9IGVudGl0eUxDXG4gICAgaWYgKGVudGl0eS5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgICAgaWYgKGVudGl0eS5jaGFyQXQoMSkgPT09ICd4Jykge1xuICAgICAgICBlbnRpdHkgPSBlbnRpdHkuc2xpY2UoMilcbiAgICAgICAgbnVtID0gcGFyc2VJbnQoZW50aXR5LCAxNilcbiAgICAgICAgbnVtU3RyID0gbnVtLnRvU3RyaW5nKDE2KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW50aXR5ID0gZW50aXR5LnNsaWNlKDEpXG4gICAgICAgIG51bSA9IHBhcnNlSW50KGVudGl0eSwgMTApXG4gICAgICAgIG51bVN0ciA9IG51bS50b1N0cmluZygxMClcbiAgICAgIH1cbiAgICB9XG4gICAgZW50aXR5ID0gZW50aXR5LnJlcGxhY2UoL14wKy8sICcnKVxuICAgIGlmIChpc05hTihudW0pIHx8IG51bVN0ci50b0xvd2VyQ2FzZSgpICE9PSBlbnRpdHkpIHtcbiAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnSW52YWxpZCBjaGFyYWN0ZXIgZW50aXR5JylcbiAgICAgIHJldHVybiAnJicgKyBwYXJzZXIuZW50aXR5ICsgJzsnXG4gICAgfVxuXG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KG51bSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGJlZ2luV2hpdGVTcGFjZSAocGFyc2VyLCBjKSB7XG4gICAgaWYgKGMgPT09ICc8Jykge1xuICAgICAgcGFyc2VyLnN0YXRlID0gUy5PUEVOX1dBS0FcbiAgICAgIHBhcnNlci5zdGFydFRhZ1Bvc2l0aW9uID0gcGFyc2VyLnBvc2l0aW9uXG4gICAgfSBlbHNlIGlmICghaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAvLyBoYXZlIHRvIHByb2Nlc3MgdGhpcyBhcyBhIHRleHQgbm9kZS5cbiAgICAgIC8vIHdlaXJkLCBidXQgaGFwcGVucy5cbiAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnTm9uLXdoaXRlc3BhY2UgYmVmb3JlIGZpcnN0IHRhZy4nKVxuICAgICAgcGFyc2VyLnRleHROb2RlID0gY1xuICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hhckF0IChjaHVuaywgaSkge1xuICAgIHZhciByZXN1bHQgPSAnJ1xuICAgIGlmIChpIDwgY2h1bmsubGVuZ3RoKSB7XG4gICAgICByZXN1bHQgPSBjaHVuay5jaGFyQXQoaSlcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgZnVuY3Rpb24gd3JpdGUgKGNodW5rKSB7XG4gICAgdmFyIHBhcnNlciA9IHRoaXNcbiAgICBpZiAodGhpcy5lcnJvcikge1xuICAgICAgdGhyb3cgdGhpcy5lcnJvclxuICAgIH1cbiAgICBpZiAocGFyc2VyLmNsb3NlZCkge1xuICAgICAgcmV0dXJuIGVycm9yKHBhcnNlcixcbiAgICAgICAgJ0Nhbm5vdCB3cml0ZSBhZnRlciBjbG9zZS4gQXNzaWduIGFuIG9ucmVhZHkgaGFuZGxlci4nKVxuICAgIH1cbiAgICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBlbmQocGFyc2VyKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGNodW5rID09PSAnb2JqZWN0Jykge1xuICAgICAgY2h1bmsgPSBjaHVuay50b1N0cmluZygpXG4gICAgfVxuICAgIHZhciBpID0gMFxuICAgIHZhciBjID0gJydcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgYyA9IGNoYXJBdChjaHVuaywgaSsrKVxuICAgICAgcGFyc2VyLmMgPSBjXG5cbiAgICAgIGlmICghYykge1xuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyc2VyLnRyYWNrUG9zaXRpb24pIHtcbiAgICAgICAgcGFyc2VyLnBvc2l0aW9uKytcbiAgICAgICAgaWYgKGMgPT09ICdcXG4nKSB7XG4gICAgICAgICAgcGFyc2VyLmxpbmUrK1xuICAgICAgICAgIHBhcnNlci5jb2x1bW4gPSAwXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyc2VyLmNvbHVtbisrXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChwYXJzZXIuc3RhdGUpIHtcbiAgICAgICAgY2FzZSBTLkJFR0lOOlxuICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQkVHSU5fV0hJVEVTUEFDRVxuICAgICAgICAgIGlmIChjID09PSAnXFx1RkVGRicpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJlZ2luV2hpdGVTcGFjZShwYXJzZXIsIGMpXG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQkVHSU5fV0hJVEVTUEFDRTpcbiAgICAgICAgICBiZWdpbldoaXRlU3BhY2UocGFyc2VyLCBjKVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLlRFWFQ6XG4gICAgICAgICAgaWYgKHBhcnNlci5zYXdSb290ICYmICFwYXJzZXIuY2xvc2VkUm9vdCkge1xuICAgICAgICAgICAgdmFyIHN0YXJ0aSA9IGkgLSAxXG4gICAgICAgICAgICB3aGlsZSAoYyAmJiBjICE9PSAnPCcgJiYgYyAhPT0gJyYnKSB7XG4gICAgICAgICAgICAgIGMgPSBjaGFyQXQoY2h1bmssIGkrKylcbiAgICAgICAgICAgICAgaWYgKGMgJiYgcGFyc2VyLnRyYWNrUG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICBwYXJzZXIucG9zaXRpb24rK1xuICAgICAgICAgICAgICAgIGlmIChjID09PSAnXFxuJykge1xuICAgICAgICAgICAgICAgICAgcGFyc2VyLmxpbmUrK1xuICAgICAgICAgICAgICAgICAgcGFyc2VyLmNvbHVtbiA9IDBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGFyc2VyLmNvbHVtbisrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJzZXIudGV4dE5vZGUgKz0gY2h1bmsuc3Vic3RyaW5nKHN0YXJ0aSwgaSAtIDEpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjID09PSAnPCcgJiYgIShwYXJzZXIuc2F3Um9vdCAmJiBwYXJzZXIuY2xvc2VkUm9vdCAmJiAhcGFyc2VyLnN0cmljdCkpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuT1BFTl9XQUtBXG4gICAgICAgICAgICBwYXJzZXIuc3RhcnRUYWdQb3NpdGlvbiA9IHBhcnNlci5wb3NpdGlvblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWlzV2hpdGVzcGFjZShjKSAmJiAoIXBhcnNlci5zYXdSb290IHx8IHBhcnNlci5jbG9zZWRSb290KSkge1xuICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ1RleHQgZGF0YSBvdXRzaWRlIG9mIHJvb3Qgbm9kZS4nKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMgPT09ICcmJykge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFRfRU5USVRZXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXJzZXIudGV4dE5vZGUgKz0gY1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5TQ1JJUFQ6XG4gICAgICAgICAgLy8gb25seSBub24tc3RyaWN0XG4gICAgICAgICAgaWYgKGMgPT09ICc8Jykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TQ1JJUFRfRU5ESU5HXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5zY3JpcHQgKz0gY1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5TQ1JJUFRfRU5ESU5HOlxuICAgICAgICAgIGlmIChjID09PSAnLycpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ0xPU0VfVEFHXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5zY3JpcHQgKz0gJzwnICsgY1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TQ1JJUFRcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuT1BFTl9XQUtBOlxuICAgICAgICAgIC8vIGVpdGhlciBhIC8sID8sICEsIG9yIHRleHQgaXMgY29taW5nIG5leHQuXG4gICAgICAgICAgaWYgKGMgPT09ICchJykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TR01MX0RFQ0xcbiAgICAgICAgICAgIHBhcnNlci5zZ21sRGVjbCA9ICcnXG4gICAgICAgICAgfSBlbHNlIGlmIChpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIC8vIHdhaXQgZm9yIGl0Li4uXG4gICAgICAgICAgfSBlbHNlIGlmIChpc01hdGNoKG5hbWVTdGFydCwgYykpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuT1BFTl9UQUdcbiAgICAgICAgICAgIHBhcnNlci50YWdOYW1lID0gY1xuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJy8nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNMT1NFX1RBR1xuICAgICAgICAgICAgcGFyc2VyLnRhZ05hbWUgPSAnJ1xuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJz8nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlBST0NfSU5TVFxuICAgICAgICAgICAgcGFyc2VyLnByb2NJbnN0TmFtZSA9IHBhcnNlci5wcm9jSW5zdEJvZHkgPSAnJ1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ1VuZW5jb2RlZCA8JylcbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIHdhcyBzb21lIHdoaXRlc3BhY2UsIHRoZW4gYWRkIHRoYXQgaW4uXG4gICAgICAgICAgICBpZiAocGFyc2VyLnN0YXJ0VGFnUG9zaXRpb24gKyAxIDwgcGFyc2VyLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgIHZhciBwYWQgPSBwYXJzZXIucG9zaXRpb24gLSBwYXJzZXIuc3RhcnRUYWdQb3NpdGlvblxuICAgICAgICAgICAgICBjID0gbmV3IEFycmF5KHBhZCkuam9pbignICcpICsgY1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyc2VyLnRleHROb2RlICs9ICc8JyArIGNcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVFxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5TR01MX0RFQ0w6XG4gICAgICAgICAgaWYgKHBhcnNlci5zZ21sRGVjbCArIGMgPT09ICctLScpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ09NTUVOVFxuICAgICAgICAgICAgcGFyc2VyLmNvbW1lbnQgPSAnJ1xuICAgICAgICAgICAgcGFyc2VyLnNnbWxEZWNsID0gJydcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwYXJzZXIuZG9jdHlwZSAmJiBwYXJzZXIuZG9jdHlwZSAhPT0gdHJ1ZSAmJiBwYXJzZXIuc2dtbERlY2wpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRV9EVERcbiAgICAgICAgICAgIHBhcnNlci5kb2N0eXBlICs9ICc8IScgKyBwYXJzZXIuc2dtbERlY2wgKyBjXG4gICAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgPSAnJ1xuICAgICAgICAgIH0gZWxzZSBpZiAoKHBhcnNlci5zZ21sRGVjbCArIGMpLnRvVXBwZXJDYXNlKCkgPT09IENEQVRBKSB7XG4gICAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbm9wZW5jZGF0YScpXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNEQVRBXG4gICAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgPSAnJ1xuICAgICAgICAgICAgcGFyc2VyLmNkYXRhID0gJydcbiAgICAgICAgICB9IGVsc2UgaWYgKChwYXJzZXIuc2dtbERlY2wgKyBjKS50b1VwcGVyQ2FzZSgpID09PSBET0NUWVBFKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkRPQ1RZUEVcbiAgICAgICAgICAgIGlmIChwYXJzZXIuZG9jdHlwZSB8fCBwYXJzZXIuc2F3Um9vdCkge1xuICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlcixcbiAgICAgICAgICAgICAgICAnSW5hcHByb3ByaWF0ZWx5IGxvY2F0ZWQgZG9jdHlwZSBkZWNsYXJhdGlvbicpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJzZXIuZG9jdHlwZSA9ICcnXG4gICAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgPSAnJ1xuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbnNnbWxkZWNsYXJhdGlvbicsIHBhcnNlci5zZ21sRGVjbClcbiAgICAgICAgICAgIHBhcnNlci5zZ21sRGVjbCA9ICcnXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFRcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzUXVvdGUoYykpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuU0dNTF9ERUNMX1FVT1RFRFxuICAgICAgICAgICAgcGFyc2VyLnNnbWxEZWNsICs9IGNcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VyLnNnbWxEZWNsICs9IGNcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuU0dNTF9ERUNMX1FVT1RFRDpcbiAgICAgICAgICBpZiAoYyA9PT0gcGFyc2VyLnEpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuU0dNTF9ERUNMXG4gICAgICAgICAgICBwYXJzZXIucSA9ICcnXG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcnNlci5zZ21sRGVjbCArPSBjXG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuRE9DVFlQRTpcbiAgICAgICAgICBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFRcbiAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uZG9jdHlwZScsIHBhcnNlci5kb2N0eXBlKVxuICAgICAgICAgICAgcGFyc2VyLmRvY3R5cGUgPSB0cnVlIC8vIGp1c3QgcmVtZW1iZXIgdGhhdCB3ZSBzYXcgaXQuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5kb2N0eXBlICs9IGNcbiAgICAgICAgICAgIGlmIChjID09PSAnWycpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5ET0NUWVBFX0RURFxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1F1b3RlKGMpKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRV9RVU9URURcbiAgICAgICAgICAgICAgcGFyc2VyLnEgPSBjXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkRPQ1RZUEVfUVVPVEVEOlxuICAgICAgICAgIHBhcnNlci5kb2N0eXBlICs9IGNcbiAgICAgICAgICBpZiAoYyA9PT0gcGFyc2VyLnEpIHtcbiAgICAgICAgICAgIHBhcnNlci5xID0gJydcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5ET0NUWVBFX0RURDpcbiAgICAgICAgICBpZiAoYyA9PT0gJ10nKSB7XG4gICAgICAgICAgICBwYXJzZXIuZG9jdHlwZSArPSBjXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkRPQ1RZUEVcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICc8Jykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5PUEVOX1dBS0FcbiAgICAgICAgICAgIHBhcnNlci5zdGFydFRhZ1Bvc2l0aW9uID0gcGFyc2VyLnBvc2l0aW9uXG4gICAgICAgICAgfSBlbHNlIGlmIChpc1F1b3RlKGMpKSB7XG4gICAgICAgICAgICBwYXJzZXIuZG9jdHlwZSArPSBjXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkRPQ1RZUEVfRFREX1FVT1RFRFxuICAgICAgICAgICAgcGFyc2VyLnEgPSBjXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5kb2N0eXBlICs9IGNcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuRE9DVFlQRV9EVERfUVVPVEVEOlxuICAgICAgICAgIHBhcnNlci5kb2N0eXBlICs9IGNcbiAgICAgICAgICBpZiAoYyA9PT0gcGFyc2VyLnEpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRV9EVERcbiAgICAgICAgICAgIHBhcnNlci5xID0gJydcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQ09NTUVOVDpcbiAgICAgICAgICBpZiAoYyA9PT0gJy0nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNPTU1FTlRfRU5ESU5HXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5jb21tZW50ICs9IGNcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQ09NTUVOVF9FTkRJTkc6XG4gICAgICAgICAgaWYgKGMgPT09ICctJykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DT01NRU5UX0VOREVEXG4gICAgICAgICAgICBwYXJzZXIuY29tbWVudCA9IHRleHRvcHRzKHBhcnNlci5vcHQsIHBhcnNlci5jb21tZW50KVxuICAgICAgICAgICAgaWYgKHBhcnNlci5jb21tZW50KSB7XG4gICAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uY29tbWVudCcsIHBhcnNlci5jb21tZW50KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyc2VyLmNvbW1lbnQgPSAnJ1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIuY29tbWVudCArPSAnLScgKyBjXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNPTU1FTlRcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQ09NTUVOVF9FTkRFRDpcbiAgICAgICAgICBpZiAoYyAhPT0gJz4nKSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ01hbGZvcm1lZCBjb21tZW50JylcbiAgICAgICAgICAgIC8vIGFsbG93IDwhLS0gYmxhaCAtLSBibG9vIC0tPiBpbiBub24tc3RyaWN0IG1vZGUsXG4gICAgICAgICAgICAvLyB3aGljaCBpcyBhIGNvbW1lbnQgb2YgXCIgYmxhaCAtLSBibG9vIFwiXG4gICAgICAgICAgICBwYXJzZXIuY29tbWVudCArPSAnLS0nICsgY1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DT01NRU5UXG4gICAgICAgICAgfSBlbHNlIGlmIChwYXJzZXIuZG9jdHlwZSAmJiBwYXJzZXIuZG9jdHlwZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5ET0NUWVBFX0RURFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFRcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQ0RBVEE6XG4gICAgICAgICAgaWYgKGMgPT09ICddJykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DREFUQV9FTkRJTkdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VyLmNkYXRhICs9IGNcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQ0RBVEFfRU5ESU5HOlxuICAgICAgICAgIGlmIChjID09PSAnXScpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ0RBVEFfRU5ESU5HXzJcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VyLmNkYXRhICs9ICddJyArIGNcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ0RBVEFcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQ0RBVEFfRU5ESU5HXzI6XG4gICAgICAgICAgaWYgKGMgPT09ICc+Jykge1xuICAgICAgICAgICAgaWYgKHBhcnNlci5jZGF0YSkge1xuICAgICAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbmNkYXRhJywgcGFyc2VyLmNkYXRhKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25jbG9zZWNkYXRhJylcbiAgICAgICAgICAgIHBhcnNlci5jZGF0YSA9ICcnXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFRcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICddJykge1xuICAgICAgICAgICAgcGFyc2VyLmNkYXRhICs9ICddJ1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIuY2RhdGEgKz0gJ11dJyArIGNcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ0RBVEFcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuUFJPQ19JTlNUOlxuICAgICAgICAgIGlmIChjID09PSAnPycpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuUFJPQ19JTlNUX0VORElOR1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlBST0NfSU5TVF9CT0RZXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5wcm9jSW5zdE5hbWUgKz0gY1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5QUk9DX0lOU1RfQk9EWTpcbiAgICAgICAgICBpZiAoIXBhcnNlci5wcm9jSW5zdEJvZHkgJiYgaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJz8nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlBST0NfSU5TVF9FTkRJTkdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VyLnByb2NJbnN0Qm9keSArPSBjXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLlBST0NfSU5TVF9FTkRJTkc6XG4gICAgICAgICAgaWYgKGMgPT09ICc+Jykge1xuICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24nLCB7XG4gICAgICAgICAgICAgIG5hbWU6IHBhcnNlci5wcm9jSW5zdE5hbWUsXG4gICAgICAgICAgICAgIGJvZHk6IHBhcnNlci5wcm9jSW5zdEJvZHlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBwYXJzZXIucHJvY0luc3ROYW1lID0gcGFyc2VyLnByb2NJbnN0Qm9keSA9ICcnXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFRcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VyLnByb2NJbnN0Qm9keSArPSAnPycgKyBjXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlBST0NfSU5TVF9CT0RZXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLk9QRU5fVEFHOlxuICAgICAgICAgIGlmIChpc01hdGNoKG5hbWVCb2R5LCBjKSkge1xuICAgICAgICAgICAgcGFyc2VyLnRhZ05hbWUgKz0gY1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdUYWcocGFyc2VyKVxuICAgICAgICAgICAgaWYgKGMgPT09ICc+Jykge1xuICAgICAgICAgICAgICBvcGVuVGFnKHBhcnNlcilcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJy8nKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuT1BFTl9UQUdfU0xBU0hcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICghaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdJbnZhbGlkIGNoYXJhY3RlciBpbiB0YWcgbmFtZScpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuT1BFTl9UQUdfU0xBU0g6XG4gICAgICAgICAgaWYgKGMgPT09ICc+Jykge1xuICAgICAgICAgICAgb3BlblRhZyhwYXJzZXIsIHRydWUpXG4gICAgICAgICAgICBjbG9zZVRhZyhwYXJzZXIpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnRm9yd2FyZC1zbGFzaCBpbiBvcGVuaW5nIHRhZyBub3QgZm9sbG93ZWQgYnkgPicpXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQlxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5BVFRSSUI6XG4gICAgICAgICAgLy8gaGF2ZW4ndCByZWFkIHRoZSBhdHRyaWJ1dGUgbmFtZSB5ZXQuXG4gICAgICAgICAgaWYgKGlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICc+Jykge1xuICAgICAgICAgICAgb3BlblRhZyhwYXJzZXIpXG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnLycpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuT1BFTl9UQUdfU0xBU0hcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzTWF0Y2gobmFtZVN0YXJ0LCBjKSkge1xuICAgICAgICAgICAgcGFyc2VyLmF0dHJpYk5hbWUgPSBjXG4gICAgICAgICAgICBwYXJzZXIuYXR0cmliVmFsdWUgPSAnJ1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfTkFNRVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0ludmFsaWQgYXR0cmlidXRlIG5hbWUnKVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5BVFRSSUJfTkFNRTpcbiAgICAgICAgICBpZiAoYyA9PT0gJz0nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQl9WQUxVRVxuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0F0dHJpYnV0ZSB3aXRob3V0IHZhbHVlJylcbiAgICAgICAgICAgIHBhcnNlci5hdHRyaWJWYWx1ZSA9IHBhcnNlci5hdHRyaWJOYW1lXG4gICAgICAgICAgICBhdHRyaWIocGFyc2VyKVxuICAgICAgICAgICAgb3BlblRhZyhwYXJzZXIpXG4gICAgICAgICAgfSBlbHNlIGlmIChpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX05BTUVfU0FXX1dISVRFXG4gICAgICAgICAgfSBlbHNlIGlmIChpc01hdGNoKG5hbWVCb2R5LCBjKSkge1xuICAgICAgICAgICAgcGFyc2VyLmF0dHJpYk5hbWUgKz0gY1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0ludmFsaWQgYXR0cmlidXRlIG5hbWUnKVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5BVFRSSUJfTkFNRV9TQVdfV0hJVEU6XG4gICAgICAgICAgaWYgKGMgPT09ICc9Jykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfVkFMVUVcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdBdHRyaWJ1dGUgd2l0aG91dCB2YWx1ZScpXG4gICAgICAgICAgICBwYXJzZXIudGFnLmF0dHJpYnV0ZXNbcGFyc2VyLmF0dHJpYk5hbWVdID0gJydcbiAgICAgICAgICAgIHBhcnNlci5hdHRyaWJWYWx1ZSA9ICcnXG4gICAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbmF0dHJpYnV0ZScsIHtcbiAgICAgICAgICAgICAgbmFtZTogcGFyc2VyLmF0dHJpYk5hbWUsXG4gICAgICAgICAgICAgIHZhbHVlOiAnJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHBhcnNlci5hdHRyaWJOYW1lID0gJydcbiAgICAgICAgICAgIGlmIChjID09PSAnPicpIHtcbiAgICAgICAgICAgICAgb3BlblRhZyhwYXJzZXIpXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzTWF0Y2gobmFtZVN0YXJ0LCBjKSkge1xuICAgICAgICAgICAgICBwYXJzZXIuYXR0cmliTmFtZSA9IGNcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfTkFNRVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdJbnZhbGlkIGF0dHJpYnV0ZSBuYW1lJylcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFOlxuICAgICAgICAgIGlmIChpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIGlmIChpc1F1b3RlKGMpKSB7XG4gICAgICAgICAgICBwYXJzZXIucSA9IGNcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX1ZBTFVFX1FVT1RFRFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXBhcnNlci5vcHQudW5xdW90ZWRBdHRyaWJ1dGVWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgZXJyb3IocGFyc2VyLCAnVW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX1ZBTFVFX1VOUVVPVEVEXG4gICAgICAgICAgICBwYXJzZXIuYXR0cmliVmFsdWUgPSBjXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkFUVFJJQl9WQUxVRV9RVU9URUQ6XG4gICAgICAgICAgaWYgKGMgIT09IHBhcnNlci5xKSB7XG4gICAgICAgICAgICBpZiAoYyA9PT0gJyYnKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX1ZBTFVFX0VOVElUWV9RXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXJzZXIuYXR0cmliVmFsdWUgKz0gY1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgICAgYXR0cmliKHBhcnNlcilcbiAgICAgICAgICBwYXJzZXIucSA9ICcnXG4gICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfVkFMVUVfQ0xPU0VEXG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFX0NMT1NFRDpcbiAgICAgICAgICBpZiAoaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQlxuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICBvcGVuVGFnKHBhcnNlcilcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICcvJykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5PUEVOX1RBR19TTEFTSFxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNNYXRjaChuYW1lU3RhcnQsIGMpKSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ05vIHdoaXRlc3BhY2UgYmV0d2VlbiBhdHRyaWJ1dGVzJylcbiAgICAgICAgICAgIHBhcnNlci5hdHRyaWJOYW1lID0gY1xuICAgICAgICAgICAgcGFyc2VyLmF0dHJpYlZhbHVlID0gJydcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX05BTUVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdJbnZhbGlkIGF0dHJpYnV0ZSBuYW1lJylcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFX1VOUVVPVEVEOlxuICAgICAgICAgIGlmICghaXNBdHRyaWJFbmQoYykpIHtcbiAgICAgICAgICAgIGlmIChjID09PSAnJicpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfVkFMVUVfRU5USVRZX1VcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhcnNlci5hdHRyaWJWYWx1ZSArPSBjXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBhdHRyaWIocGFyc2VyKVxuICAgICAgICAgIGlmIChjID09PSAnPicpIHtcbiAgICAgICAgICAgIG9wZW5UYWcocGFyc2VyKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQlxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5DTE9TRV9UQUc6XG4gICAgICAgICAgaWYgKCFwYXJzZXIudGFnTmFtZSkge1xuICAgICAgICAgICAgaWYgKGlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgfSBlbHNlIGlmIChub3RNYXRjaChuYW1lU3RhcnQsIGMpKSB7XG4gICAgICAgICAgICAgIGlmIChwYXJzZXIuc2NyaXB0KSB7XG4gICAgICAgICAgICAgICAgcGFyc2VyLnNjcmlwdCArPSAnPC8nICsgY1xuICAgICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuU0NSSVBUXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdJbnZhbGlkIHRhZ25hbWUgaW4gY2xvc2luZyB0YWcuJylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnRhZ05hbWUgPSBjXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnPicpIHtcbiAgICAgICAgICAgIGNsb3NlVGFnKHBhcnNlcilcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzTWF0Y2gobmFtZUJvZHksIGMpKSB7XG4gICAgICAgICAgICBwYXJzZXIudGFnTmFtZSArPSBjXG4gICAgICAgICAgfSBlbHNlIGlmIChwYXJzZXIuc2NyaXB0KSB7XG4gICAgICAgICAgICBwYXJzZXIuc2NyaXB0ICs9ICc8LycgKyBwYXJzZXIudGFnTmFtZVxuICAgICAgICAgICAgcGFyc2VyLnRhZ05hbWUgPSAnJ1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TQ1JJUFRcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdJbnZhbGlkIHRhZ25hbWUgaW4gY2xvc2luZyB0YWcnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DTE9TRV9UQUdfU0FXX1dISVRFXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkNMT1NFX1RBR19TQVdfV0hJVEU6XG4gICAgICAgICAgaWYgKGlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGMgPT09ICc+Jykge1xuICAgICAgICAgICAgY2xvc2VUYWcocGFyc2VyKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0ludmFsaWQgY2hhcmFjdGVycyBpbiBjbG9zaW5nIHRhZycpXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLlRFWFRfRU5USVRZOlxuICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFX0VOVElUWV9ROlxuICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFX0VOVElUWV9VOlxuICAgICAgICAgIHZhciByZXR1cm5TdGF0ZVxuICAgICAgICAgIHZhciBidWZmZXJcbiAgICAgICAgICBzd2l0Y2ggKHBhcnNlci5zdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSBTLlRFWFRfRU5USVRZOlxuICAgICAgICAgICAgICByZXR1cm5TdGF0ZSA9IFMuVEVYVFxuICAgICAgICAgICAgICBidWZmZXIgPSAndGV4dE5vZGUnXG4gICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgIGNhc2UgUy5BVFRSSUJfVkFMVUVfRU5USVRZX1E6XG4gICAgICAgICAgICAgIHJldHVyblN0YXRlID0gUy5BVFRSSUJfVkFMVUVfUVVPVEVEXG4gICAgICAgICAgICAgIGJ1ZmZlciA9ICdhdHRyaWJWYWx1ZSdcbiAgICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgICAgY2FzZSBTLkFUVFJJQl9WQUxVRV9FTlRJVFlfVTpcbiAgICAgICAgICAgICAgcmV0dXJuU3RhdGUgPSBTLkFUVFJJQl9WQUxVRV9VTlFVT1RFRFxuICAgICAgICAgICAgICBidWZmZXIgPSAnYXR0cmliVmFsdWUnXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGMgPT09ICc7Jykge1xuICAgICAgICAgICAgdmFyIHBhcnNlZEVudGl0eSA9IHBhcnNlRW50aXR5KHBhcnNlcilcbiAgICAgICAgICAgIGlmIChwYXJzZXIub3B0LnVucGFyc2VkRW50aXRpZXMgJiYgIU9iamVjdC52YWx1ZXMoc2F4LlhNTF9FTlRJVElFUykuaW5jbHVkZXMocGFyc2VkRW50aXR5KSkge1xuICAgICAgICAgICAgICBwYXJzZXIuZW50aXR5ID0gJydcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gcmV0dXJuU3RhdGVcbiAgICAgICAgICAgICAgcGFyc2VyLndyaXRlKHBhcnNlZEVudGl0eSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhcnNlcltidWZmZXJdICs9IHBhcnNlZEVudGl0eVxuICAgICAgICAgICAgICBwYXJzZXIuZW50aXR5ID0gJydcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gcmV0dXJuU3RhdGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGlzTWF0Y2gocGFyc2VyLmVudGl0eS5sZW5ndGggPyBlbnRpdHlCb2R5IDogZW50aXR5U3RhcnQsIGMpKSB7XG4gICAgICAgICAgICBwYXJzZXIuZW50aXR5ICs9IGNcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdJbnZhbGlkIGNoYXJhY3RlciBpbiBlbnRpdHkgbmFtZScpXG4gICAgICAgICAgICBwYXJzZXJbYnVmZmVyXSArPSAnJicgKyBwYXJzZXIuZW50aXR5ICsgY1xuICAgICAgICAgICAgcGFyc2VyLmVudGl0eSA9ICcnXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSByZXR1cm5TdGF0ZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgZGVmYXVsdDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8ge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihwYXJzZXIsICdVbmtub3duIHN0YXRlOiAnICsgcGFyc2VyLnN0YXRlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyB3aGlsZVxuXG4gICAgaWYgKHBhcnNlci5wb3NpdGlvbiA+PSBwYXJzZXIuYnVmZmVyQ2hlY2tQb3NpdGlvbikge1xuICAgICAgY2hlY2tCdWZmZXJMZW5ndGgocGFyc2VyKVxuICAgIH1cbiAgICByZXR1cm4gcGFyc2VyXG4gIH1cblxuICAvKiEgaHR0cDovL210aHMuYmUvZnJvbWNvZGVwb2ludCB2MC4xLjAgYnkgQG1hdGhpYXMgKi9cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKCFTdHJpbmcuZnJvbUNvZGVQb2ludCkge1xuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZVxuICAgICAgdmFyIGZsb29yID0gTWF0aC5mbG9vclxuICAgICAgdmFyIGZyb21Db2RlUG9pbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBNQVhfU0laRSA9IDB4NDAwMFxuICAgICAgICB2YXIgY29kZVVuaXRzID0gW11cbiAgICAgICAgdmFyIGhpZ2hTdXJyb2dhdGVcbiAgICAgICAgdmFyIGxvd1N1cnJvZ2F0ZVxuICAgICAgICB2YXIgaW5kZXggPSAtMVxuICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSAnJ1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciBjb2RlUG9pbnQgPSBOdW1iZXIoYXJndW1lbnRzW2luZGV4XSlcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAhaXNGaW5pdGUoY29kZVBvaW50KSB8fCAvLyBgTmFOYCwgYCtJbmZpbml0eWAsIG9yIGAtSW5maW5pdHlgXG4gICAgICAgICAgICBjb2RlUG9pbnQgPCAwIHx8IC8vIG5vdCBhIHZhbGlkIFVuaWNvZGUgY29kZSBwb2ludFxuICAgICAgICAgICAgY29kZVBvaW50ID4gMHgxMEZGRkYgfHwgLy8gbm90IGEgdmFsaWQgVW5pY29kZSBjb2RlIHBvaW50XG4gICAgICAgICAgICBmbG9vcihjb2RlUG9pbnQpICE9PSBjb2RlUG9pbnQgLy8gbm90IGFuIGludGVnZXJcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludDogJyArIGNvZGVQb2ludClcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvZGVQb2ludCA8PSAweEZGRkYpIHsgLy8gQk1QIGNvZGUgcG9pbnRcbiAgICAgICAgICAgIGNvZGVVbml0cy5wdXNoKGNvZGVQb2ludClcbiAgICAgICAgICB9IGVsc2UgeyAvLyBBc3RyYWwgY29kZSBwb2ludDsgc3BsaXQgaW4gc3Vycm9nYXRlIGhhbHZlc1xuICAgICAgICAgICAgLy8gaHR0cDovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZyNzdXJyb2dhdGUtZm9ybXVsYWVcbiAgICAgICAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICAgICAgICBoaWdoU3Vycm9nYXRlID0gKGNvZGVQb2ludCA+PiAxMCkgKyAweEQ4MDBcbiAgICAgICAgICAgIGxvd1N1cnJvZ2F0ZSA9IChjb2RlUG9pbnQgJSAweDQwMCkgKyAweERDMDBcbiAgICAgICAgICAgIGNvZGVVbml0cy5wdXNoKGhpZ2hTdXJyb2dhdGUsIGxvd1N1cnJvZ2F0ZSlcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGluZGV4ICsgMSA9PT0gbGVuZ3RoIHx8IGNvZGVVbml0cy5sZW5ndGggPiBNQVhfU0laRSkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZS5hcHBseShudWxsLCBjb2RlVW5pdHMpXG4gICAgICAgICAgICBjb2RlVW5pdHMubGVuZ3RoID0gMFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICB9XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RyaW5nLCAnZnJvbUNvZGVQb2ludCcsIHtcbiAgICAgICAgICB2YWx1ZTogZnJvbUNvZGVQb2ludCxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFN0cmluZy5mcm9tQ29kZVBvaW50ID0gZnJvbUNvZGVQb2ludFxuICAgICAgfVxuICAgIH0oKSlcbiAgfVxufSkodHlwZW9mIGV4cG9ydHMgPT09ICd1bmRlZmluZWQnID8gdGhpcy5zYXggPSB7fSA6IGV4cG9ydHMpXG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIGV4cG9ydHMuc3RyaXBCT00gPSBmdW5jdGlvbihzdHIpIHtcbiAgICBpZiAoc3RyWzBdID09PSAnXFx1RkVGRicpIHtcbiAgICAgIHJldHVybiBzdHIuc3Vic3RyaW5nKDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgdmFyIHByZWZpeE1hdGNoO1xuXG4gIHByZWZpeE1hdGNoID0gbmV3IFJlZ0V4cCgvKD8heG1sbnMpXi4qOi8pO1xuXG4gIGV4cG9ydHMubm9ybWFsaXplID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpO1xuICB9O1xuXG4gIGV4cG9ydHMuZmlyc3RDaGFyTG93ZXJDYXNlID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbiAgfTtcblxuICBleHBvcnRzLnN0cmlwUHJlZml4ID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKHByZWZpeE1hdGNoLCAnJyk7XG4gIH07XG5cbiAgZXhwb3J0cy5wYXJzZU51bWJlcnMgPSBmdW5jdGlvbihzdHIpIHtcbiAgICBpZiAoIWlzTmFOKHN0cikpIHtcbiAgICAgIHN0ciA9IHN0ciAlIDEgPT09IDAgPyBwYXJzZUludChzdHIsIDEwKSA6IHBhcnNlRmxvYXQoc3RyKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICBleHBvcnRzLnBhcnNlQm9vbGVhbnMgPSBmdW5jdGlvbihzdHIpIHtcbiAgICBpZiAoL14oPzp0cnVlfGZhbHNlKSQvaS50ZXN0KHN0cikpIHtcbiAgICAgIHN0ciA9IHN0ci50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIHZhciBib20sIGRlZmF1bHRzLCBkZWZpbmVQcm9wZXJ0eSwgZXZlbnRzLCBpc0VtcHR5LCBwcm9jZXNzSXRlbSwgcHJvY2Vzc29ycywgc2F4LCBzZXRJbW1lZGlhdGUsXG4gICAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH0sXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBzYXggPSByZXF1aXJlKCdzYXgnKTtcblxuICBldmVudHMgPSByZXF1aXJlKCdldmVudHMnKTtcblxuICBib20gPSByZXF1aXJlKCcuL2JvbScpO1xuXG4gIHByb2Nlc3NvcnMgPSByZXF1aXJlKCcuL3Byb2Nlc3NvcnMnKTtcblxuICBzZXRJbW1lZGlhdGUgPSByZXF1aXJlKCd0aW1lcnMnKS5zZXRJbW1lZGlhdGU7XG5cbiAgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJykuZGVmYXVsdHM7XG5cbiAgaXNFbXB0eSA9IGZ1bmN0aW9uKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gXCJvYmplY3RcIiAmJiAodGhpbmcgIT0gbnVsbCkgJiYgT2JqZWN0LmtleXModGhpbmcpLmxlbmd0aCA9PT0gMDtcbiAgfTtcblxuICBwcm9jZXNzSXRlbSA9IGZ1bmN0aW9uKHByb2Nlc3NvcnMsIGl0ZW0sIGtleSkge1xuICAgIHZhciBpLCBsZW4sIHByb2Nlc3M7XG4gICAgZm9yIChpID0gMCwgbGVuID0gcHJvY2Vzc29ycy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgcHJvY2VzcyA9IHByb2Nlc3NvcnNbaV07XG4gICAgICBpdGVtID0gcHJvY2VzcyhpdGVtLCBrZXkpO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbiAgfTtcblxuICBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBkZXNjcmlwdG9yO1xuICAgIGRlc2NyaXB0b3IgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGRlc2NyaXB0b3IudmFsdWUgPSB2YWx1ZTtcbiAgICBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSB0cnVlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCBkZXNjcmlwdG9yKTtcbiAgfTtcblxuICBleHBvcnRzLlBhcnNlciA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFBhcnNlciwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBQYXJzZXIob3B0cykge1xuICAgICAgdGhpcy5wYXJzZVN0cmluZ1Byb21pc2UgPSBiaW5kKHRoaXMucGFyc2VTdHJpbmdQcm9taXNlLCB0aGlzKTtcbiAgICAgIHRoaXMucGFyc2VTdHJpbmcgPSBiaW5kKHRoaXMucGFyc2VTdHJpbmcsIHRoaXMpO1xuICAgICAgdGhpcy5yZXNldCA9IGJpbmQodGhpcy5yZXNldCwgdGhpcyk7XG4gICAgICB0aGlzLmFzc2lnbk9yUHVzaCA9IGJpbmQodGhpcy5hc3NpZ25PclB1c2gsIHRoaXMpO1xuICAgICAgdGhpcy5wcm9jZXNzQXN5bmMgPSBiaW5kKHRoaXMucHJvY2Vzc0FzeW5jLCB0aGlzKTtcbiAgICAgIHZhciBrZXksIHJlZiwgdmFsdWU7XG4gICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgZXhwb3J0cy5QYXJzZXIpKSB7XG4gICAgICAgIHJldHVybiBuZXcgZXhwb3J0cy5QYXJzZXIob3B0cyk7XG4gICAgICB9XG4gICAgICB0aGlzLm9wdGlvbnMgPSB7fTtcbiAgICAgIHJlZiA9IGRlZmF1bHRzW1wiMC4yXCJdO1xuICAgICAgZm9yIChrZXkgaW4gcmVmKSB7XG4gICAgICAgIGlmICghaGFzUHJvcC5jYWxsKHJlZiwga2V5KSkgY29udGludWU7XG4gICAgICAgIHZhbHVlID0gcmVmW2tleV07XG4gICAgICAgIHRoaXMub3B0aW9uc1trZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBmb3IgKGtleSBpbiBvcHRzKSB7XG4gICAgICAgIGlmICghaGFzUHJvcC5jYWxsKG9wdHMsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICB2YWx1ZSA9IG9wdHNba2V5XTtcbiAgICAgICAgdGhpcy5vcHRpb25zW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMueG1sbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnhtbG5za2V5ID0gdGhpcy5vcHRpb25zLmF0dHJrZXkgKyBcIm5zXCI7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5vcm1hbGl6ZVRhZ3MpIHtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMudGFnTmFtZVByb2Nlc3NvcnMpIHtcbiAgICAgICAgICB0aGlzLm9wdGlvbnMudGFnTmFtZVByb2Nlc3NvcnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnMudGFnTmFtZVByb2Nlc3NvcnMudW5zaGlmdChwcm9jZXNzb3JzLm5vcm1hbGl6ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgUGFyc2VyLnByb3RvdHlwZS5wcm9jZXNzQXN5bmMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjaHVuaywgZXJyO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHRoaXMucmVtYWluaW5nLmxlbmd0aCA8PSB0aGlzLm9wdGlvbnMuY2h1bmtTaXplKSB7XG4gICAgICAgICAgY2h1bmsgPSB0aGlzLnJlbWFpbmluZztcbiAgICAgICAgICB0aGlzLnJlbWFpbmluZyA9ICcnO1xuICAgICAgICAgIHRoaXMuc2F4UGFyc2VyID0gdGhpcy5zYXhQYXJzZXIud3JpdGUoY2h1bmspO1xuICAgICAgICAgIHJldHVybiB0aGlzLnNheFBhcnNlci5jbG9zZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNodW5rID0gdGhpcy5yZW1haW5pbmcuc3Vic3RyKDAsIHRoaXMub3B0aW9ucy5jaHVua1NpemUpO1xuICAgICAgICAgIHRoaXMucmVtYWluaW5nID0gdGhpcy5yZW1haW5pbmcuc3Vic3RyKHRoaXMub3B0aW9ucy5jaHVua1NpemUsIHRoaXMucmVtYWluaW5nLmxlbmd0aCk7XG4gICAgICAgICAgdGhpcy5zYXhQYXJzZXIgPSB0aGlzLnNheFBhcnNlci53cml0ZShjaHVuayk7XG4gICAgICAgICAgcmV0dXJuIHNldEltbWVkaWF0ZSh0aGlzLnByb2Nlc3NBc3luYyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgICAgICBlcnIgPSBlcnJvcjE7XG4gICAgICAgIGlmICghdGhpcy5zYXhQYXJzZXIuZXJyVGhyb3duKSB7XG4gICAgICAgICAgdGhpcy5zYXhQYXJzZXIuZXJyVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5lbWl0KGVycik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgUGFyc2VyLnByb3RvdHlwZS5hc3NpZ25PclB1c2ggPSBmdW5jdGlvbihvYmosIGtleSwgbmV3VmFsdWUpIHtcbiAgICAgIGlmICghKGtleSBpbiBvYmopKSB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmV4cGxpY2l0QXJyYXkpIHtcbiAgICAgICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIFtuZXdWYWx1ZV0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIShvYmpba2V5XSBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KG9iaiwga2V5LCBbb2JqW2tleV1dKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqW2tleV0ucHVzaChuZXdWYWx1ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFBhcnNlci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhdHRya2V5LCBjaGFya2V5LCBvbnRleHQsIHN0YWNrO1xuICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgIHRoaXMuc2F4UGFyc2VyID0gc2F4LnBhcnNlcih0aGlzLm9wdGlvbnMuc3RyaWN0LCB7XG4gICAgICAgIHRyaW06IGZhbHNlLFxuICAgICAgICBub3JtYWxpemU6IGZhbHNlLFxuICAgICAgICB4bWxuczogdGhpcy5vcHRpb25zLnhtbG5zXG4gICAgICB9KTtcbiAgICAgIHRoaXMuc2F4UGFyc2VyLmVyclRocm93biA9IGZhbHNlO1xuICAgICAgdGhpcy5zYXhQYXJzZXIub25lcnJvciA9IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICBfdGhpcy5zYXhQYXJzZXIucmVzdW1lKCk7XG4gICAgICAgICAgaWYgKCFfdGhpcy5zYXhQYXJzZXIuZXJyVGhyb3duKSB7XG4gICAgICAgICAgICBfdGhpcy5zYXhQYXJzZXIuZXJyVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpO1xuICAgICAgdGhpcy5zYXhQYXJzZXIub25lbmQgPSAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICghX3RoaXMuc2F4UGFyc2VyLmVuZGVkKSB7XG4gICAgICAgICAgICBfdGhpcy5zYXhQYXJzZXIuZW5kZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmVtaXQoXCJlbmRcIiwgX3RoaXMucmVzdWx0T2JqZWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKTtcbiAgICAgIHRoaXMuc2F4UGFyc2VyLmVuZGVkID0gZmFsc2U7XG4gICAgICB0aGlzLkVYUExJQ0lUX0NIQVJLRVkgPSB0aGlzLm9wdGlvbnMuZXhwbGljaXRDaGFya2V5O1xuICAgICAgdGhpcy5yZXN1bHRPYmplY3QgPSBudWxsO1xuICAgICAgc3RhY2sgPSBbXTtcbiAgICAgIGF0dHJrZXkgPSB0aGlzLm9wdGlvbnMuYXR0cmtleTtcbiAgICAgIGNoYXJrZXkgPSB0aGlzLm9wdGlvbnMuY2hhcmtleTtcbiAgICAgIHRoaXMuc2F4UGFyc2VyLm9ub3BlbnRhZyA9IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgIHZhciBrZXksIG5ld1ZhbHVlLCBvYmosIHByb2Nlc3NlZEtleSwgcmVmO1xuICAgICAgICAgIG9iaiA9IHt9O1xuICAgICAgICAgIG9ialtjaGFya2V5XSA9IFwiXCI7XG4gICAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLmlnbm9yZUF0dHJzKSB7XG4gICAgICAgICAgICByZWYgPSBub2RlLmF0dHJpYnV0ZXM7XG4gICAgICAgICAgICBmb3IgKGtleSBpbiByZWYpIHtcbiAgICAgICAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwocmVmLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgaWYgKCEoYXR0cmtleSBpbiBvYmopICYmICFfdGhpcy5vcHRpb25zLm1lcmdlQXR0cnMpIHtcbiAgICAgICAgICAgICAgICBvYmpbYXR0cmtleV0gPSB7fTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBuZXdWYWx1ZSA9IF90aGlzLm9wdGlvbnMuYXR0clZhbHVlUHJvY2Vzc29ycyA/IHByb2Nlc3NJdGVtKF90aGlzLm9wdGlvbnMuYXR0clZhbHVlUHJvY2Vzc29ycywgbm9kZS5hdHRyaWJ1dGVzW2tleV0sIGtleSkgOiBub2RlLmF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgICAgICAgcHJvY2Vzc2VkS2V5ID0gX3RoaXMub3B0aW9ucy5hdHRyTmFtZVByb2Nlc3NvcnMgPyBwcm9jZXNzSXRlbShfdGhpcy5vcHRpb25zLmF0dHJOYW1lUHJvY2Vzc29ycywga2V5KSA6IGtleTtcbiAgICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMubWVyZ2VBdHRycykge1xuICAgICAgICAgICAgICAgIF90aGlzLmFzc2lnbk9yUHVzaChvYmosIHByb2Nlc3NlZEtleSwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KG9ialthdHRya2V5XSwgcHJvY2Vzc2VkS2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgb2JqW1wiI25hbWVcIl0gPSBfdGhpcy5vcHRpb25zLnRhZ05hbWVQcm9jZXNzb3JzID8gcHJvY2Vzc0l0ZW0oX3RoaXMub3B0aW9ucy50YWdOYW1lUHJvY2Vzc29ycywgbm9kZS5uYW1lKSA6IG5vZGUubmFtZTtcbiAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy54bWxucykge1xuICAgICAgICAgICAgb2JqW190aGlzLm9wdGlvbnMueG1sbnNrZXldID0ge1xuICAgICAgICAgICAgICB1cmk6IG5vZGUudXJpLFxuICAgICAgICAgICAgICBsb2NhbDogbm9kZS5sb2NhbFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHN0YWNrLnB1c2gob2JqKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpO1xuICAgICAgdGhpcy5zYXhQYXJzZXIub25jbG9zZXRhZyA9IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGNkYXRhLCBlbXB0eVN0ciwga2V5LCBub2RlLCBub2RlTmFtZSwgb2JqLCBvYmpDbG9uZSwgb2xkLCBzLCB4cGF0aDtcbiAgICAgICAgICBvYmogPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICBub2RlTmFtZSA9IG9ialtcIiNuYW1lXCJdO1xuICAgICAgICAgIGlmICghX3RoaXMub3B0aW9ucy5leHBsaWNpdENoaWxkcmVuIHx8ICFfdGhpcy5vcHRpb25zLnByZXNlcnZlQ2hpbGRyZW5PcmRlcikge1xuICAgICAgICAgICAgZGVsZXRlIG9ialtcIiNuYW1lXCJdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob2JqLmNkYXRhID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjZGF0YSA9IG9iai5jZGF0YTtcbiAgICAgICAgICAgIGRlbGV0ZSBvYmouY2RhdGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHMgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAob2JqW2NoYXJrZXldLm1hdGNoKC9eXFxzKiQvKSAmJiAhY2RhdGEpIHtcbiAgICAgICAgICAgIGVtcHR5U3RyID0gb2JqW2NoYXJrZXldO1xuICAgICAgICAgICAgZGVsZXRlIG9ialtjaGFya2V5XTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMudHJpbSkge1xuICAgICAgICAgICAgICBvYmpbY2hhcmtleV0gPSBvYmpbY2hhcmtleV0udHJpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMubm9ybWFsaXplKSB7XG4gICAgICAgICAgICAgIG9ialtjaGFya2V5XSA9IG9ialtjaGFya2V5XS5yZXBsYWNlKC9cXHN7Mix9L2csIFwiIFwiKS50cmltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvYmpbY2hhcmtleV0gPSBfdGhpcy5vcHRpb25zLnZhbHVlUHJvY2Vzc29ycyA/IHByb2Nlc3NJdGVtKF90aGlzLm9wdGlvbnMudmFsdWVQcm9jZXNzb3JzLCBvYmpbY2hhcmtleV0sIG5vZGVOYW1lKSA6IG9ialtjaGFya2V5XTtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMSAmJiBjaGFya2V5IGluIG9iaiAmJiAhX3RoaXMuRVhQTElDSVRfQ0hBUktFWSkge1xuICAgICAgICAgICAgICBvYmogPSBvYmpbY2hhcmtleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc0VtcHR5KG9iaikpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgX3RoaXMub3B0aW9ucy5lbXB0eVRhZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBvYmogPSBfdGhpcy5vcHRpb25zLmVtcHR5VGFnKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBvYmogPSBfdGhpcy5vcHRpb25zLmVtcHR5VGFnICE9PSAnJyA/IF90aGlzLm9wdGlvbnMuZW1wdHlUYWcgOiBlbXB0eVN0cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMudmFsaWRhdG9yICE9IG51bGwpIHtcbiAgICAgICAgICAgIHhwYXRoID0gXCIvXCIgKyAoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgaSwgbGVuLCByZXN1bHRzO1xuICAgICAgICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHN0YWNrLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbm9kZSA9IHN0YWNrW2ldO1xuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChub2RlW1wiI25hbWVcIl0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgICAgfSkoKSkuY29uY2F0KG5vZGVOYW1lKS5qb2luKFwiL1wiKTtcbiAgICAgICAgICAgIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdmFyIGVycjtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqID0gX3RoaXMub3B0aW9ucy52YWxpZGF0b3IoeHBhdGgsIHMgJiYgc1tub2RlTmFtZV0sIG9iaik7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgICAgICAgICAgICAgIGVyciA9IGVycm9yMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZW1pdChcImVycm9yXCIsIGVycik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmV4cGxpY2l0Q2hpbGRyZW4gJiYgIV90aGlzLm9wdGlvbnMubWVyZ2VBdHRycyAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLnByZXNlcnZlQ2hpbGRyZW5PcmRlcikge1xuICAgICAgICAgICAgICBub2RlID0ge307XG4gICAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmF0dHJrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgbm9kZVtfdGhpcy5vcHRpb25zLmF0dHJrZXldID0gb2JqW190aGlzLm9wdGlvbnMuYXR0cmtleV07XG4gICAgICAgICAgICAgICAgZGVsZXRlIG9ialtfdGhpcy5vcHRpb25zLmF0dHJrZXldO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICghX3RoaXMub3B0aW9ucy5jaGFyc0FzQ2hpbGRyZW4gJiYgX3RoaXMub3B0aW9ucy5jaGFya2V5IGluIG9iaikge1xuICAgICAgICAgICAgICAgIG5vZGVbX3RoaXMub3B0aW9ucy5jaGFya2V5XSA9IG9ialtfdGhpcy5vcHRpb25zLmNoYXJrZXldO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBvYmpbX3RoaXMub3B0aW9ucy5jaGFya2V5XTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgbm9kZVtfdGhpcy5vcHRpb25zLmNoaWxka2V5XSA9IG9iajtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBvYmogPSBub2RlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzKSB7XG4gICAgICAgICAgICAgIHNbX3RoaXMub3B0aW9ucy5jaGlsZGtleV0gPSBzW190aGlzLm9wdGlvbnMuY2hpbGRrZXldIHx8IFtdO1xuICAgICAgICAgICAgICBvYmpDbG9uZSA9IHt9O1xuICAgICAgICAgICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChvYmosIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KG9iakNsb25lLCBrZXksIG9ialtrZXldKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzW190aGlzLm9wdGlvbnMuY2hpbGRrZXldLnB1c2gob2JqQ2xvbmUpO1xuICAgICAgICAgICAgICBkZWxldGUgb2JqW1wiI25hbWVcIl07XG4gICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMSAmJiBjaGFya2V5IGluIG9iaiAmJiAhX3RoaXMuRVhQTElDSVRfQ0hBUktFWSkge1xuICAgICAgICAgICAgICAgIG9iaiA9IG9ialtjaGFya2V5XTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmFzc2lnbk9yUHVzaChzLCBub2RlTmFtZSwgb2JqKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuZXhwbGljaXRSb290KSB7XG4gICAgICAgICAgICAgIG9sZCA9IG9iajtcbiAgICAgICAgICAgICAgb2JqID0ge307XG4gICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KG9iaiwgbm9kZU5hbWUsIG9sZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5yZXN1bHRPYmplY3QgPSBvYmo7XG4gICAgICAgICAgICBfdGhpcy5zYXhQYXJzZXIuZW5kZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmVtaXQoXCJlbmRcIiwgX3RoaXMucmVzdWx0T2JqZWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKTtcbiAgICAgIG9udGV4dCA9IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odGV4dCkge1xuICAgICAgICAgIHZhciBjaGFyQ2hpbGQsIHM7XG4gICAgICAgICAgcyA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChzKSB7XG4gICAgICAgICAgICBzW2NoYXJrZXldICs9IHRleHQ7XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5leHBsaWNpdENoaWxkcmVuICYmIF90aGlzLm9wdGlvbnMucHJlc2VydmVDaGlsZHJlbk9yZGVyICYmIF90aGlzLm9wdGlvbnMuY2hhcnNBc0NoaWxkcmVuICYmIChfdGhpcy5vcHRpb25zLmluY2x1ZGVXaGl0ZUNoYXJzIHx8IHRleHQucmVwbGFjZSgvXFxcXG4vZywgJycpLnRyaW0oKSAhPT0gJycpKSB7XG4gICAgICAgICAgICAgIHNbX3RoaXMub3B0aW9ucy5jaGlsZGtleV0gPSBzW190aGlzLm9wdGlvbnMuY2hpbGRrZXldIHx8IFtdO1xuICAgICAgICAgICAgICBjaGFyQ2hpbGQgPSB7XG4gICAgICAgICAgICAgICAgJyNuYW1lJzogJ19fdGV4dF9fJ1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBjaGFyQ2hpbGRbY2hhcmtleV0gPSB0ZXh0O1xuICAgICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5ub3JtYWxpemUpIHtcbiAgICAgICAgICAgICAgICBjaGFyQ2hpbGRbY2hhcmtleV0gPSBjaGFyQ2hpbGRbY2hhcmtleV0ucmVwbGFjZSgvXFxzezIsfS9nLCBcIiBcIikudHJpbSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHNbX3RoaXMub3B0aW9ucy5jaGlsZGtleV0ucHVzaChjaGFyQ2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSkodGhpcyk7XG4gICAgICB0aGlzLnNheFBhcnNlci5vbnRleHQgPSBvbnRleHQ7XG4gICAgICByZXR1cm4gdGhpcy5zYXhQYXJzZXIub25jZGF0YSA9IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odGV4dCkge1xuICAgICAgICAgIHZhciBzO1xuICAgICAgICAgIHMgPSBvbnRleHQodGV4dCk7XG4gICAgICAgICAgaWYgKHMpIHtcbiAgICAgICAgICAgIHJldHVybiBzLmNkYXRhID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKTtcbiAgICB9O1xuXG4gICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVN0cmluZyA9IGZ1bmN0aW9uKHN0ciwgY2IpIHtcbiAgICAgIHZhciBlcnI7XG4gICAgICBpZiAoKGNiICE9IG51bGwpICYmIHR5cGVvZiBjYiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRoaXMub24oXCJlbmRcIiwgZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgIHJldHVybiBjYihudWxsLCByZXN1bHQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbihcImVycm9yXCIsIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgICByZXR1cm4gY2IoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBzdHIgPSBzdHIudG9TdHJpbmcoKTtcbiAgICAgICAgaWYgKHN0ci50cmltKCkgPT09ICcnKSB7XG4gICAgICAgICAgdGhpcy5lbWl0KFwiZW5kXCIsIG51bGwpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHN0ciA9IGJvbS5zdHJpcEJPTShzdHIpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFzeW5jKSB7XG4gICAgICAgICAgdGhpcy5yZW1haW5pbmcgPSBzdHI7XG4gICAgICAgICAgc2V0SW1tZWRpYXRlKHRoaXMucHJvY2Vzc0FzeW5jKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zYXhQYXJzZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc2F4UGFyc2VyLndyaXRlKHN0cikuY2xvc2UoKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgICAgICBlcnIgPSBlcnJvcjE7XG4gICAgICAgIGlmICghKHRoaXMuc2F4UGFyc2VyLmVyclRocm93biB8fCB0aGlzLnNheFBhcnNlci5lbmRlZCkpIHtcbiAgICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zYXhQYXJzZXIuZXJyVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnNheFBhcnNlci5lbmRlZCkge1xuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlU3RyaW5nUHJvbWlzZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnBhcnNlU3RyaW5nKHN0ciwgZnVuY3Rpb24oZXJyLCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBQYXJzZXI7XG5cbiAgfSkoZXZlbnRzKTtcblxuICBleHBvcnRzLnBhcnNlU3RyaW5nID0gZnVuY3Rpb24oc3RyLCBhLCBiKSB7XG4gICAgdmFyIGNiLCBvcHRpb25zLCBwYXJzZXI7XG4gICAgaWYgKGIgIT0gbnVsbCkge1xuICAgICAgaWYgKHR5cGVvZiBiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNiID0gYjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgb3B0aW9ucyA9IGE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYiA9IGE7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIHBhcnNlciA9IG5ldyBleHBvcnRzLlBhcnNlcihvcHRpb25zKTtcbiAgICByZXR1cm4gcGFyc2VyLnBhcnNlU3RyaW5nKHN0ciwgY2IpO1xuICB9O1xuXG4gIGV4cG9ydHMucGFyc2VTdHJpbmdQcm9taXNlID0gZnVuY3Rpb24oc3RyLCBhKSB7XG4gICAgdmFyIG9wdGlvbnMsIHBhcnNlcjtcbiAgICBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnKSB7XG4gICAgICBvcHRpb25zID0gYTtcbiAgICB9XG4gICAgcGFyc2VyID0gbmV3IGV4cG9ydHMuUGFyc2VyKG9wdGlvbnMpO1xuICAgIHJldHVybiBwYXJzZXIucGFyc2VTdHJpbmdQcm9taXNlKHN0cik7XG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIHZhciBidWlsZGVyLCBkZWZhdWx0cywgcGFyc2VyLCBwcm9jZXNzb3JzLFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbiAgYnVpbGRlciA9IHJlcXVpcmUoJy4vYnVpbGRlcicpO1xuXG4gIHBhcnNlciA9IHJlcXVpcmUoJy4vcGFyc2VyJyk7XG5cbiAgcHJvY2Vzc29ycyA9IHJlcXVpcmUoJy4vcHJvY2Vzc29ycycpO1xuXG4gIGV4cG9ydHMuZGVmYXVsdHMgPSBkZWZhdWx0cy5kZWZhdWx0cztcblxuICBleHBvcnRzLnByb2Nlc3NvcnMgPSBwcm9jZXNzb3JzO1xuXG4gIGV4cG9ydHMuVmFsaWRhdGlvbkVycm9yID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoVmFsaWRhdGlvbkVycm9yLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFZhbGlkYXRpb25FcnJvcihtZXNzYWdlKSB7XG4gICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIH1cblxuICAgIHJldHVybiBWYWxpZGF0aW9uRXJyb3I7XG5cbiAgfSkoRXJyb3IpO1xuXG4gIGV4cG9ydHMuQnVpbGRlciA9IGJ1aWxkZXIuQnVpbGRlcjtcblxuICBleHBvcnRzLlBhcnNlciA9IHBhcnNlci5QYXJzZXI7XG5cbiAgZXhwb3J0cy5wYXJzZVN0cmluZyA9IHBhcnNlci5wYXJzZVN0cmluZztcblxuICBleHBvcnRzLnBhcnNlU3RyaW5nUHJvbWlzZSA9IHBhcnNlci5wYXJzZVN0cmluZ1Byb21pc2U7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLypcbiAqIEVKUyBFbWJlZGRlZCBKYXZhU2NyaXB0IHRlbXBsYXRlc1xuICogQ29weXJpZ2h0IDIxMTIgTWF0dGhldyBFZXJuaXNzZSAobWRlQGZsZWVnaXgub3JnKVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuKi9cblxuLyoqXG4gKiBQcml2YXRlIHV0aWxpdHkgZnVuY3Rpb25zXG4gKiBAbW9kdWxlIHV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHJlZ0V4cENoYXJzID0gL1t8XFxcXHt9KClbXFxdXiQrKj8uXS9nO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBoYXNPd24gPSBmdW5jdGlvbiAob2JqLCBrZXkpIHsgcmV0dXJuIGhhc093blByb3BlcnR5LmFwcGx5KG9iaiwgW2tleV0pOyB9O1xuXG4vKipcbiAqIEVzY2FwZSBjaGFyYWN0ZXJzIHJlc2VydmVkIGluIHJlZ3VsYXIgZXhwcmVzc2lvbnMuXG4gKlxuICogSWYgYHN0cmluZ2AgaXMgYHVuZGVmaW5lZGAgb3IgYG51bGxgLCB0aGUgZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgSW5wdXQgc3RyaW5nXG4gKiBAcmV0dXJuIHtTdHJpbmd9IEVzY2FwZWQgc3RyaW5nXG4gKiBAc3RhdGljXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnRzLmVzY2FwZVJlZ0V4cENoYXJzID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKCFzdHJpbmcpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVnRXhwQ2hhcnMsICdcXFxcJCYnKTtcbn07XG5cbnZhciBfRU5DT0RFX0hUTUxfUlVMRVMgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJiMzNDsnLFxuICBcIidcIjogJyYjMzk7J1xufTtcbnZhciBfTUFUQ0hfSFRNTCA9IC9bJjw+J1wiXS9nO1xuXG5mdW5jdGlvbiBlbmNvZGVfY2hhcihjKSB7XG4gIHJldHVybiBfRU5DT0RFX0hUTUxfUlVMRVNbY10gfHwgYztcbn1cblxuLyoqXG4gKiBTdHJpbmdpZmllZCB2ZXJzaW9uIG9mIGNvbnN0YW50cyB1c2VkIGJ5IHtAbGluayBtb2R1bGU6dXRpbHMuZXNjYXBlWE1MfS5cbiAqXG4gKiBJdCBpcyB1c2VkIGluIHRoZSBwcm9jZXNzIG9mIGdlbmVyYXRpbmcge0BsaW5rIENsaWVudEZ1bmN0aW9ufXMuXG4gKlxuICogQHJlYWRvbmx5XG4gKiBAdHlwZSB7U3RyaW5nfVxuICovXG5cbnZhciBlc2NhcGVGdW5jU3RyID1cbiAgJ3ZhciBfRU5DT0RFX0hUTUxfUlVMRVMgPSB7XFxuJ1xuKyAnICAgICAgXCImXCI6IFwiJmFtcDtcIlxcbidcbisgJyAgICAsIFwiPFwiOiBcIiZsdDtcIlxcbidcbisgJyAgICAsIFwiPlwiOiBcIiZndDtcIlxcbidcbisgJyAgICAsIFxcJ1wiXFwnOiBcIiYjMzQ7XCJcXG4nXG4rICcgICAgLCBcIlxcJ1wiOiBcIiYjMzk7XCJcXG4nXG4rICcgICAgfVxcbidcbisgJyAgLCBfTUFUQ0hfSFRNTCA9IC9bJjw+XFwnXCJdL2c7XFxuJ1xuKyAnZnVuY3Rpb24gZW5jb2RlX2NoYXIoYykge1xcbidcbisgJyAgcmV0dXJuIF9FTkNPREVfSFRNTF9SVUxFU1tjXSB8fCBjO1xcbidcbisgJ307XFxuJztcblxuLyoqXG4gKiBFc2NhcGUgY2hhcmFjdGVycyByZXNlcnZlZCBpbiBYTUwuXG4gKlxuICogSWYgYG1hcmt1cGAgaXMgYHVuZGVmaW5lZGAgb3IgYG51bGxgLCB0aGUgZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkLlxuICpcbiAqIEBpbXBsZW1lbnRzIHtFc2NhcGVDYWxsYmFja31cbiAqIEBwYXJhbSB7U3RyaW5nfSBtYXJrdXAgSW5wdXQgc3RyaW5nXG4gKiBAcmV0dXJuIHtTdHJpbmd9IEVzY2FwZWQgc3RyaW5nXG4gKiBAc3RhdGljXG4gKiBAcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZXNjYXBlWE1MID0gZnVuY3Rpb24gKG1hcmt1cCkge1xuICByZXR1cm4gbWFya3VwID09IHVuZGVmaW5lZFxuICAgID8gJydcbiAgICA6IFN0cmluZyhtYXJrdXApXG4gICAgICAucmVwbGFjZShfTUFUQ0hfSFRNTCwgZW5jb2RlX2NoYXIpO1xufTtcblxuZnVuY3Rpb24gZXNjYXBlWE1MVG9TdHJpbmcoKSB7XG4gIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0aGlzKSArICc7XFxuJyArIGVzY2FwZUZ1bmNTdHI7XG59XG5cbnRyeSB7XG4gIGlmICh0eXBlb2YgT2JqZWN0LmRlZmluZVByb3BlcnR5ID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIElmIHRoZSBGdW5jdGlvbiBwcm90b3R5cGUgaXMgZnJvemVuLCB0aGUgXCJ0b1N0cmluZ1wiIHByb3BlcnR5IGlzIG5vbi13cml0YWJsZS4gVGhpcyBtZWFucyB0aGF0IGFueSBvYmplY3RzIHdoaWNoIGluaGVyaXQgdGhpcyBwcm9wZXJ0eVxuICAvLyBjYW5ub3QgaGF2ZSB0aGUgcHJvcGVydHkgY2hhbmdlZCB1c2luZyBhbiBhc3NpZ25tZW50LiBJZiB1c2luZyBzdHJpY3QgbW9kZSwgYXR0ZW1wdGluZyB0aGF0IHdpbGwgY2F1c2UgYW4gZXJyb3IuIElmIG5vdCB1c2luZyBzdHJpY3RcbiAgLy8gbW9kZSwgYXR0ZW1wdGluZyB0aGF0IHdpbGwgYmUgc2lsZW50bHkgaWdub3JlZC5cbiAgLy8gSG93ZXZlciwgd2UgY2FuIHN0aWxsIGV4cGxpY2l0bHkgc2hhZG93IHRoZSBwcm90b3R5cGUncyBcInRvU3RyaW5nXCIgcHJvcGVydHkgYnkgZGVmaW5pbmcgYSBuZXcgXCJ0b1N0cmluZ1wiIHByb3BlcnR5IG9uIHRoaXMgb2JqZWN0LlxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmVzY2FwZVhNTCwgJ3RvU3RyaW5nJywgeyB2YWx1ZTogZXNjYXBlWE1MVG9TdHJpbmcgfSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgT2JqZWN0LmRlZmluZVByb3BlcnR5KCkgZG9lc24ndCBleGlzdCwgYXR0ZW1wdCB0byBzaGFkb3cgdGhpcyBwcm9wZXJ0eSB1c2luZyB0aGUgYXNzaWdubWVudCBvcGVyYXRvci5cbiAgICBleHBvcnRzLmVzY2FwZVhNTC50b1N0cmluZyA9IGVzY2FwZVhNTFRvU3RyaW5nO1xuICB9XG59IGNhdGNoIChlcnIpIHtcbiAgY29uc29sZS53YXJuKCdVbmFibGUgdG8gc2V0IGVzY2FwZVhNTC50b1N0cmluZyAoaXMgdGhlIEZ1bmN0aW9uIHByb3RvdHlwZSBmcm96ZW4/KScpO1xufVxuXG4vKipcbiAqIE5haXZlIGNvcHkgb2YgcHJvcGVydGllcyBmcm9tIG9uZSBvYmplY3QgdG8gYW5vdGhlci5cbiAqIERvZXMgbm90IHJlY3Vyc2UgaW50byBub24tc2NhbGFyIHByb3BlcnRpZXNcbiAqIERvZXMgbm90IGNoZWNrIHRvIHNlZSBpZiB0aGUgcHJvcGVydHkgaGFzIGEgdmFsdWUgYmVmb3JlIGNvcHlpbmdcbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IHRvICAgRGVzdGluYXRpb24gb2JqZWN0XG4gKiBAcGFyYW0gIHtPYmplY3R9IGZyb20gU291cmNlIG9iamVjdFxuICogQHJldHVybiB7T2JqZWN0fSAgICAgIERlc3RpbmF0aW9uIG9iamVjdFxuICogQHN0YXRpY1xuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0cy5zaGFsbG93Q29weSA9IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICBmcm9tID0gZnJvbSB8fCB7fTtcbiAgaWYgKCh0byAhPT0gbnVsbCkgJiYgKHRvICE9PSB1bmRlZmluZWQpKSB7XG4gICAgZm9yICh2YXIgcCBpbiBmcm9tKSB7XG4gICAgICBpZiAoIWhhc093bihmcm9tLCBwKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChwID09PSAnX19wcm90b19fJyB8fCBwID09PSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdG9bcF0gPSBmcm9tW3BdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdG87XG59O1xuXG4vKipcbiAqIE5haXZlIGNvcHkgb2YgYSBsaXN0IG9mIGtleSBuYW1lcywgZnJvbSBvbmUgb2JqZWN0IHRvIGFub3RoZXIuXG4gKiBPbmx5IGNvcGllcyBwcm9wZXJ0eSBpZiBpdCBpcyBhY3R1YWxseSBkZWZpbmVkXG4gKiBEb2VzIG5vdCByZWN1cnNlIGludG8gbm9uLXNjYWxhciBwcm9wZXJ0aWVzXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSB0byAgIERlc3RpbmF0aW9uIG9iamVjdFxuICogQHBhcmFtICB7T2JqZWN0fSBmcm9tIFNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSAge0FycmF5fSBsaXN0IExpc3Qgb2YgcHJvcGVydGllcyB0byBjb3B5XG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgRGVzdGluYXRpb24gb2JqZWN0XG4gKiBAc3RhdGljXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnRzLnNoYWxsb3dDb3B5RnJvbUxpc3QgPSBmdW5jdGlvbiAodG8sIGZyb20sIGxpc3QpIHtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIGZyb20gPSBmcm9tIHx8IHt9O1xuICBpZiAoKHRvICE9PSBudWxsKSAmJiAodG8gIT09IHVuZGVmaW5lZCkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwID0gbGlzdFtpXTtcbiAgICAgIGlmICh0eXBlb2YgZnJvbVtwXSAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAoIWhhc093bihmcm9tLCBwKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwID09PSAnX19wcm90b19fJyB8fCBwID09PSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdG9bcF0gPSBmcm9tW3BdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdG87XG59O1xuXG4vKipcbiAqIFNpbXBsZSBpbi1wcm9jZXNzIGNhY2hlIGltcGxlbWVudGF0aW9uLiBEb2VzIG5vdCBpbXBsZW1lbnQgbGltaXRzIG9mIGFueVxuICogc29ydC5cbiAqXG4gKiBAaW1wbGVtZW50cyB7Q2FjaGV9XG4gKiBAc3RhdGljXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnRzLmNhY2hlID0ge1xuICBfZGF0YToge30sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsKSB7XG4gICAgdGhpcy5fZGF0YVtrZXldID0gdmFsO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YVtrZXldO1xuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBkZWxldGUgdGhpcy5fZGF0YVtrZXldO1xuICB9LFxuICByZXNldDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2RhdGEgPSB7fTtcbiAgfVxufTtcblxuLyoqXG4gKiBUcmFuc2Zvcm1zIGh5cGhlbiBjYXNlIHZhcmlhYmxlIGludG8gY2FtZWwgY2FzZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIEh5cGhlbiBjYXNlIHN0cmluZ1xuICogQHJldHVybiB7U3RyaW5nfSBDYW1lbCBjYXNlIHN0cmluZ1xuICogQHN0YXRpY1xuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0cy5oeXBoZW5Ub0NhbWVsID0gZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLy1bYS16XS9nLCBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoWzFdLnRvVXBwZXJDYXNlKCk7IH0pO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgbnVsbC1wcm90b3R5cGUgb2JqZWN0IGluIHJ1bnRpbWVzIHRoYXQgc3VwcG9ydCBpdFxuICpcbiAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0LCBwcm90b3R5cGUgd2lsbCBiZSBzZXQgdG8gbnVsbCB3aGVyZSBwb3NzaWJsZVxuICogQHN0YXRpY1xuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0cy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfTtcbiAgfVxuICBpZiAoISh7X19wcm90b19fOiBudWxsfSBpbnN0YW5jZW9mIE9iamVjdCkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtfX3Byb3RvX186IG51bGx9O1xuICAgIH07XG4gIH1cbiAgLy8gTm90IHBvc3NpYmxlLCBqdXN0IHBhc3MgdGhyb3VnaFxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfTtcbn0pKCk7XG5cbmV4cG9ydHMuaGFzT3duT25seU9iamVjdCA9IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIG8gPSBleHBvcnRzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKTtcbiAgZm9yICh2YXIgcCBpbiBvYmopIHtcbiAgICBpZiAoaGFzT3duKG9iaiwgcCkpIHtcbiAgICAgIG9bcF0gPSBvYmpbcF07XG4gICAgfVxuICB9XG4gIHJldHVybiBvO1xufTtcblxuIiwgIntcbiAgXCJuYW1lXCI6IFwiZWpzXCIsXG4gIFwiZGVzY3JpcHRpb25cIjogXCJFbWJlZGRlZCBKYXZhU2NyaXB0IHRlbXBsYXRlc1wiLFxuICBcImtleXdvcmRzXCI6IFtcbiAgICBcInRlbXBsYXRlXCIsXG4gICAgXCJlbmdpbmVcIixcbiAgICBcImVqc1wiXG4gIF0sXG4gIFwidmVyc2lvblwiOiBcIjMuMS4xMFwiLFxuICBcImF1dGhvclwiOiBcIk1hdHRoZXcgRWVybmlzc2UgPG1kZUBmbGVlZ2l4Lm9yZz4gKGh0dHA6Ly9mbGVlZ2l4Lm9yZylcIixcbiAgXCJsaWNlbnNlXCI6IFwiQXBhY2hlLTIuMFwiLFxuICBcImJpblwiOiB7XG4gICAgXCJlanNcIjogXCIuL2Jpbi9jbGkuanNcIlxuICB9LFxuICBcIm1haW5cIjogXCIuL2xpYi9lanMuanNcIixcbiAgXCJqc2RlbGl2clwiOiBcImVqcy5taW4uanNcIixcbiAgXCJ1bnBrZ1wiOiBcImVqcy5taW4uanNcIixcbiAgXCJyZXBvc2l0b3J5XCI6IHtcbiAgICBcInR5cGVcIjogXCJnaXRcIixcbiAgICBcInVybFwiOiBcImdpdDovL2dpdGh1Yi5jb20vbWRlL2Vqcy5naXRcIlxuICB9LFxuICBcImJ1Z3NcIjogXCJodHRwczovL2dpdGh1Yi5jb20vbWRlL2Vqcy9pc3N1ZXNcIixcbiAgXCJob21lcGFnZVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9tZGUvZWpzXCIsXG4gIFwiZGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcImpha2VcIjogXCJeMTAuOC41XCJcbiAgfSxcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiYnJvd3NlcmlmeVwiOiBcIl4xNi41LjFcIixcbiAgICBcImVzbGludFwiOiBcIl42LjguMFwiLFxuICAgIFwiZ2l0LWRpcmVjdG9yeS1kZXBsb3lcIjogXCJeMS41LjFcIixcbiAgICBcImpzZG9jXCI6IFwiXjQuMC4yXCIsXG4gICAgXCJscnUtY2FjaGVcIjogXCJeNC4wLjFcIixcbiAgICBcIm1vY2hhXCI6IFwiXjEwLjIuMFwiLFxuICAgIFwidWdsaWZ5LWpzXCI6IFwiXjMuMy4xNlwiXG4gIH0sXG4gIFwiZW5naW5lc1wiOiB7XG4gICAgXCJub2RlXCI6IFwiPj0wLjEwLjBcIlxuICB9LFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwidGVzdFwiOiBcIm5weCBqYWtlIHRlc3RcIlxuICB9XG59XG4iLCAiLypcbiAqIEVKUyBFbWJlZGRlZCBKYXZhU2NyaXB0IHRlbXBsYXRlc1xuICogQ29weXJpZ2h0IDIxMTIgTWF0dGhldyBFZXJuaXNzZSAobWRlQGZsZWVnaXgub3JnKVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBmaWxlIEVtYmVkZGVkIEphdmFTY3JpcHQgdGVtcGxhdGluZyBlbmdpbmUuIHtAbGluayBodHRwOi8vZWpzLmNvfVxuICogQGF1dGhvciBNYXR0aGV3IEVlcm5pc3NlIDxtZGVAZmxlZWdpeC5vcmc+XG4gKiBAYXV0aG9yIFRpYW5jaGVuZyBcIlRpbW90aHlcIiBHdSA8dGltb3RoeWd1OTlAZ21haWwuY29tPlxuICogQHByb2plY3QgRUpTXG4gKiBAbGljZW5zZSB7QGxpbmsgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMH1cbiAqL1xuXG4vKipcbiAqIEVKUyBpbnRlcm5hbCBmdW5jdGlvbnMuXG4gKlxuICogVGVjaG5pY2FsbHkgdGhpcyBcIm1vZHVsZVwiIGxpZXMgaW4gdGhlIHNhbWUgZmlsZSBhcyB7QGxpbmsgbW9kdWxlOmVqc30sIGZvclxuICogdGhlIHNha2Ugb2Ygb3JnYW5pemF0aW9uIGFsbCB0aGUgcHJpdmF0ZSBmdW5jdGlvbnMgcmUgZ3JvdXBlZCBpbnRvIHRoaXNcbiAqIG1vZHVsZS5cbiAqXG4gKiBAbW9kdWxlIGVqcy1pbnRlcm5hbFxuICogQHByaXZhdGVcbiAqL1xuXG4vKipcbiAqIEVtYmVkZGVkIEphdmFTY3JpcHQgdGVtcGxhdGluZyBlbmdpbmUuXG4gKlxuICogQG1vZHVsZSBlanNcbiAqIEBwdWJsaWNcbiAqL1xuXG5cbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIHNjb3BlT3B0aW9uV2FybmVkID0gZmFsc2U7XG4vKiogQHR5cGUge3N0cmluZ30gKi9cbnZhciBfVkVSU0lPTl9TVFJJTkcgPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uO1xudmFyIF9ERUZBVUxUX09QRU5fREVMSU1JVEVSID0gJzwnO1xudmFyIF9ERUZBVUxUX0NMT1NFX0RFTElNSVRFUiA9ICc+JztcbnZhciBfREVGQVVMVF9ERUxJTUlURVIgPSAnJSc7XG52YXIgX0RFRkFVTFRfTE9DQUxTX05BTUUgPSAnbG9jYWxzJztcbnZhciBfTkFNRSA9ICdlanMnO1xudmFyIF9SRUdFWF9TVFJJTkcgPSAnKDwlJXwlJT58PCU9fDwlLXw8JV98PCUjfDwlfCU+fC0lPnxfJT4pJztcbnZhciBfT1BUU19QQVNTQUJMRV9XSVRIX0RBVEEgPSBbJ2RlbGltaXRlcicsICdzY29wZScsICdjb250ZXh0JywgJ2RlYnVnJywgJ2NvbXBpbGVEZWJ1ZycsXG4gICdjbGllbnQnLCAnX3dpdGgnLCAncm1XaGl0ZXNwYWNlJywgJ3N0cmljdCcsICdmaWxlbmFtZScsICdhc3luYyddO1xuLy8gV2UgZG9uJ3QgYWxsb3cgJ2NhY2hlJyBvcHRpb24gdG8gYmUgcGFzc2VkIGluIHRoZSBkYXRhIG9iaiBmb3Jcbi8vIHRoZSBub3JtYWwgYHJlbmRlcmAgY2FsbCwgYnV0IHRoaXMgaXMgd2hlcmUgRXhwcmVzcyAyICYgMyBwdXQgaXRcbi8vIHNvIHdlIG1ha2UgYW4gZXhjZXB0aW9uIGZvciBgcmVuZGVyRmlsZWBcbnZhciBfT1BUU19QQVNTQUJMRV9XSVRIX0RBVEFfRVhQUkVTUyA9IF9PUFRTX1BBU1NBQkxFX1dJVEhfREFUQS5jb25jYXQoJ2NhY2hlJyk7XG52YXIgX0JPTSA9IC9eXFx1RkVGRi87XG52YXIgX0pTX0lERU5USUZJRVIgPSAvXlthLXpBLVpfJF1bMC05YS16QS1aXyRdKiQvO1xuXG4vKipcbiAqIEVKUyB0ZW1wbGF0ZSBmdW5jdGlvbiBjYWNoZS4gVGhpcyBjYW4gYmUgYSBMUlUgb2JqZWN0IGZyb20gbHJ1LWNhY2hlIE5QTVxuICogbW9kdWxlLiBCeSBkZWZhdWx0LCBpdCBpcyB7QGxpbmsgbW9kdWxlOnV0aWxzLmNhY2hlfSwgYSBzaW1wbGUgaW4tcHJvY2Vzc1xuICogY2FjaGUgdGhhdCBncm93cyBjb250aW51b3VzbHkuXG4gKlxuICogQHR5cGUge0NhY2hlfVxuICovXG5cbmV4cG9ydHMuY2FjaGUgPSB1dGlscy5jYWNoZTtcblxuLyoqXG4gKiBDdXN0b20gZmlsZSBsb2FkZXIuIFVzZWZ1bCBmb3IgdGVtcGxhdGUgcHJlcHJvY2Vzc2luZyBvciByZXN0cmljdGluZyBhY2Nlc3NcbiAqIHRvIGEgY2VydGFpbiBwYXJ0IG9mIHRoZSBmaWxlc3lzdGVtLlxuICpcbiAqIEB0eXBlIHtmaWxlTG9hZGVyfVxuICovXG5cbmV4cG9ydHMuZmlsZUxvYWRlciA9IGZzLnJlYWRGaWxlU3luYztcblxuLyoqXG4gKiBOYW1lIG9mIHRoZSBvYmplY3QgY29udGFpbmluZyB0aGUgbG9jYWxzLlxuICpcbiAqIFRoaXMgdmFyaWFibGUgaXMgb3ZlcnJpZGRlbiBieSB7QGxpbmsgT3B0aW9uc31gLmxvY2Fsc05hbWVgIGlmIGl0IGlzIG5vdFxuICogYHVuZGVmaW5lZGAuXG4gKlxuICogQHR5cGUge1N0cmluZ31cbiAqIEBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmxvY2Fsc05hbWUgPSBfREVGQVVMVF9MT0NBTFNfTkFNRTtcblxuLyoqXG4gKiBQcm9taXNlIGltcGxlbWVudGF0aW9uIC0tIGRlZmF1bHRzIHRvIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24gaWYgYXZhaWxhYmxlXG4gKiBUaGlzIGlzIG1vc3RseSBqdXN0IGZvciB0ZXN0YWJpbGl0eVxuICpcbiAqIEB0eXBlIHtQcm9taXNlQ29uc3RydWN0b3JMaWtlfVxuICogQHB1YmxpY1xuICovXG5cbmV4cG9ydHMucHJvbWlzZUltcGwgPSAobmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpczsnKSkoKS5Qcm9taXNlO1xuXG4vKipcbiAqIEdldCB0aGUgcGF0aCB0byB0aGUgaW5jbHVkZWQgZmlsZSBmcm9tIHRoZSBwYXJlbnQgZmlsZSBwYXRoIGFuZCB0aGVcbiAqIHNwZWNpZmllZCBwYXRoLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSAgbmFtZSAgICAgc3BlY2lmaWVkIHBhdGhcbiAqIEBwYXJhbSB7U3RyaW5nfSAgZmlsZW5hbWUgcGFyZW50IGZpbGUgcGF0aFxuICogQHBhcmFtIHtCb29sZWFufSBbaXNEaXI9ZmFsc2VdIHdoZXRoZXIgdGhlIHBhcmVudCBmaWxlIHBhdGggaXMgYSBkaXJlY3RvcnlcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZXhwb3J0cy5yZXNvbHZlSW5jbHVkZSA9IGZ1bmN0aW9uKG5hbWUsIGZpbGVuYW1lLCBpc0Rpcikge1xuICB2YXIgZGlybmFtZSA9IHBhdGguZGlybmFtZTtcbiAgdmFyIGV4dG5hbWUgPSBwYXRoLmV4dG5hbWU7XG4gIHZhciByZXNvbHZlID0gcGF0aC5yZXNvbHZlO1xuICB2YXIgaW5jbHVkZVBhdGggPSByZXNvbHZlKGlzRGlyID8gZmlsZW5hbWUgOiBkaXJuYW1lKGZpbGVuYW1lKSwgbmFtZSk7XG4gIHZhciBleHQgPSBleHRuYW1lKG5hbWUpO1xuICBpZiAoIWV4dCkge1xuICAgIGluY2x1ZGVQYXRoICs9ICcuZWpzJztcbiAgfVxuICByZXR1cm4gaW5jbHVkZVBhdGg7XG59O1xuXG4vKipcbiAqIFRyeSB0byByZXNvbHZlIGZpbGUgcGF0aCBvbiBtdWx0aXBsZSBkaXJlY3Rvcmllc1xuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgIG5hbWUgIHNwZWNpZmllZCBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheTxTdHJpbmc+fSBwYXRocyBsaXN0IG9mIHBvc3NpYmxlIHBhcmVudCBkaXJlY3RvcnkgcGF0aHNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVBhdGhzKG5hbWUsIHBhdGhzKSB7XG4gIHZhciBmaWxlUGF0aDtcbiAgaWYgKHBhdGhzLnNvbWUoZnVuY3Rpb24gKHYpIHtcbiAgICBmaWxlUGF0aCA9IGV4cG9ydHMucmVzb2x2ZUluY2x1ZGUobmFtZSwgdiwgdHJ1ZSk7XG4gICAgcmV0dXJuIGZzLmV4aXN0c1N5bmMoZmlsZVBhdGgpO1xuICB9KSkge1xuICAgIHJldHVybiBmaWxlUGF0aDtcbiAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgcGF0aCB0byB0aGUgaW5jbHVkZWQgZmlsZSBieSBPcHRpb25zXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSAgcGF0aCAgICBzcGVjaWZpZWQgcGF0aFxuICogQHBhcmFtICB7T3B0aW9uc30gb3B0aW9ucyBjb21waWxhdGlvbiBvcHRpb25zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldEluY2x1ZGVQYXRoKHBhdGgsIG9wdGlvbnMpIHtcbiAgdmFyIGluY2x1ZGVQYXRoO1xuICB2YXIgZmlsZVBhdGg7XG4gIHZhciB2aWV3cyA9IG9wdGlvbnMudmlld3M7XG4gIHZhciBtYXRjaCA9IC9eW0EtWmEtel0rOlxcXFx8XlxcLy8uZXhlYyhwYXRoKTtcblxuICAvLyBBYnMgcGF0aFxuICBpZiAobWF0Y2ggJiYgbWF0Y2gubGVuZ3RoKSB7XG4gICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXlxcLyovLCAnJyk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy5yb290KSkge1xuICAgICAgaW5jbHVkZVBhdGggPSByZXNvbHZlUGF0aHMocGF0aCwgb3B0aW9ucy5yb290KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5jbHVkZVBhdGggPSBleHBvcnRzLnJlc29sdmVJbmNsdWRlKHBhdGgsIG9wdGlvbnMucm9vdCB8fCAnLycsIHRydWUpO1xuICAgIH1cbiAgfVxuICAvLyBSZWxhdGl2ZSBwYXRoc1xuICBlbHNlIHtcbiAgICAvLyBMb29rIHJlbGF0aXZlIHRvIGEgcGFzc2VkIGZpbGVuYW1lIGZpcnN0XG4gICAgaWYgKG9wdGlvbnMuZmlsZW5hbWUpIHtcbiAgICAgIGZpbGVQYXRoID0gZXhwb3J0cy5yZXNvbHZlSW5jbHVkZShwYXRoLCBvcHRpb25zLmZpbGVuYW1lKTtcbiAgICAgIGlmIChmcy5leGlzdHNTeW5jKGZpbGVQYXRoKSkge1xuICAgICAgICBpbmNsdWRlUGF0aCA9IGZpbGVQYXRoO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBUaGVuIGxvb2sgaW4gYW55IHZpZXdzIGRpcmVjdG9yaWVzXG4gICAgaWYgKCFpbmNsdWRlUGF0aCAmJiBBcnJheS5pc0FycmF5KHZpZXdzKSkge1xuICAgICAgaW5jbHVkZVBhdGggPSByZXNvbHZlUGF0aHMocGF0aCwgdmlld3MpO1xuICAgIH1cbiAgICBpZiAoIWluY2x1ZGVQYXRoICYmIHR5cGVvZiBvcHRpb25zLmluY2x1ZGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIHRoZSBpbmNsdWRlIGZpbGUgXCInICtcbiAgICAgICAgICBvcHRpb25zLmVzY2FwZUZ1bmN0aW9uKHBhdGgpICsgJ1wiJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpbmNsdWRlUGF0aDtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHRlbXBsYXRlIGZyb20gYSBzdHJpbmcgb3IgYSBmaWxlLCBlaXRoZXIgY29tcGlsZWQgb24tdGhlLWZseSBvclxuICogcmVhZCBmcm9tIGNhY2hlIChpZiBlbmFibGVkKSwgYW5kIGNhY2hlIHRoZSB0ZW1wbGF0ZSBpZiBuZWVkZWQuXG4gKlxuICogSWYgYHRlbXBsYXRlYCBpcyBub3Qgc2V0LCB0aGUgZmlsZSBzcGVjaWZpZWQgaW4gYG9wdGlvbnMuZmlsZW5hbWVgIHdpbGwgYmVcbiAqIHJlYWQuXG4gKlxuICogSWYgYG9wdGlvbnMuY2FjaGVgIGlzIHRydWUsIHRoaXMgZnVuY3Rpb24gcmVhZHMgdGhlIGZpbGUgZnJvbVxuICogYG9wdGlvbnMuZmlsZW5hbWVgIHNvIGl0IG11c3QgYmUgc2V0IHByaW9yIHRvIGNhbGxpbmcgdGhpcyBmdW5jdGlvbi5cbiAqXG4gKiBAbWVtYmVyb2YgbW9kdWxlOmVqcy1pbnRlcm5hbFxuICogQHBhcmFtIHtPcHRpb25zfSBvcHRpb25zICAgY29tcGlsYXRpb24gb3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IFt0ZW1wbGF0ZV0gdGVtcGxhdGUgc291cmNlXG4gKiBAcmV0dXJuIHsoVGVtcGxhdGVGdW5jdGlvbnxDbGllbnRGdW5jdGlvbil9XG4gKiBEZXBlbmRpbmcgb24gdGhlIHZhbHVlIG9mIGBvcHRpb25zLmNsaWVudGAsIGVpdGhlciB0eXBlIG1pZ2h0IGJlIHJldHVybmVkLlxuICogQHN0YXRpY1xuICovXG5cbmZ1bmN0aW9uIGhhbmRsZUNhY2hlKG9wdGlvbnMsIHRlbXBsYXRlKSB7XG4gIHZhciBmdW5jO1xuICB2YXIgZmlsZW5hbWUgPSBvcHRpb25zLmZpbGVuYW1lO1xuICB2YXIgaGFzVGVtcGxhdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMTtcblxuICBpZiAob3B0aW9ucy5jYWNoZSkge1xuICAgIGlmICghZmlsZW5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY2FjaGUgb3B0aW9uIHJlcXVpcmVzIGEgZmlsZW5hbWUnKTtcbiAgICB9XG4gICAgZnVuYyA9IGV4cG9ydHMuY2FjaGUuZ2V0KGZpbGVuYW1lKTtcbiAgICBpZiAoZnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfVxuICAgIGlmICghaGFzVGVtcGxhdGUpIHtcbiAgICAgIHRlbXBsYXRlID0gZmlsZUxvYWRlcihmaWxlbmFtZSkudG9TdHJpbmcoKS5yZXBsYWNlKF9CT00sICcnKTtcbiAgICB9XG4gIH1cbiAgZWxzZSBpZiAoIWhhc1RlbXBsYXRlKSB7XG4gICAgLy8gaXN0YW5idWwgaWdub3JlIGlmOiBzaG91bGQgbm90IGhhcHBlbiBhdCBhbGxcbiAgICBpZiAoIWZpbGVuYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludGVybmFsIEVKUyBlcnJvcjogbm8gZmlsZSBuYW1lIG9yIHRlbXBsYXRlICdcbiAgICAgICAgICAgICAgICAgICAgKyAncHJvdmlkZWQnKTtcbiAgICB9XG4gICAgdGVtcGxhdGUgPSBmaWxlTG9hZGVyKGZpbGVuYW1lKS50b1N0cmluZygpLnJlcGxhY2UoX0JPTSwgJycpO1xuICB9XG4gIGZ1bmMgPSBleHBvcnRzLmNvbXBpbGUodGVtcGxhdGUsIG9wdGlvbnMpO1xuICBpZiAob3B0aW9ucy5jYWNoZSkge1xuICAgIGV4cG9ydHMuY2FjaGUuc2V0KGZpbGVuYW1lLCBmdW5jKTtcbiAgfVxuICByZXR1cm4gZnVuYztcbn1cblxuLyoqXG4gKiBUcnkgY2FsbGluZyBoYW5kbGVDYWNoZSB3aXRoIHRoZSBnaXZlbiBvcHRpb25zIGFuZCBkYXRhIGFuZCBjYWxsIHRoZVxuICogY2FsbGJhY2sgd2l0aCB0aGUgcmVzdWx0LiBJZiBhbiBlcnJvciBvY2N1cnMsIGNhbGwgdGhlIGNhbGxiYWNrIHdpdGhcbiAqIHRoZSBlcnJvci4gVXNlZCBieSByZW5kZXJGaWxlKCkuXG4gKlxuICogQG1lbWJlcm9mIG1vZHVsZTplanMtaW50ZXJuYWxcbiAqIEBwYXJhbSB7T3B0aW9uc30gb3B0aW9ucyAgICBjb21waWxhdGlvbiBvcHRpb25zXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YSAgICAgICAgdGVtcGxhdGUgZGF0YVxuICogQHBhcmFtIHtSZW5kZXJGaWxlQ2FsbGJhY2t9IGNiIGNhbGxiYWNrXG4gKiBAc3RhdGljXG4gKi9cblxuZnVuY3Rpb24gdHJ5SGFuZGxlQ2FjaGUob3B0aW9ucywgZGF0YSwgY2IpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCFjYikge1xuICAgIGlmICh0eXBlb2YgZXhwb3J0cy5wcm9taXNlSW1wbCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gbmV3IGV4cG9ydHMucHJvbWlzZUltcGwoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZUNhY2hlKG9wdGlvbnMpKGRhdGEpO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIHByb3ZpZGUgYSBjYWxsYmFjayBmdW5jdGlvbicpO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gaGFuZGxlQ2FjaGUob3B0aW9ucykoZGF0YSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBjYihlcnIpO1xuICAgIH1cblxuICAgIGNiKG51bGwsIHJlc3VsdCk7XG4gIH1cbn1cblxuLyoqXG4gKiBmaWxlTG9hZGVyIGlzIGluZGVwZW5kZW50XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGZpbGVQYXRoIGVqcyBmaWxlIHBhdGguXG4gKiBAcmV0dXJuIHtTdHJpbmd9IFRoZSBjb250ZW50cyBvZiB0aGUgc3BlY2lmaWVkIGZpbGUuXG4gKiBAc3RhdGljXG4gKi9cblxuZnVuY3Rpb24gZmlsZUxvYWRlcihmaWxlUGF0aCl7XG4gIHJldHVybiBleHBvcnRzLmZpbGVMb2FkZXIoZmlsZVBhdGgpO1xufVxuXG4vKipcbiAqIEdldCB0aGUgdGVtcGxhdGUgZnVuY3Rpb24uXG4gKlxuICogSWYgYG9wdGlvbnMuY2FjaGVgIGlzIGB0cnVlYCwgdGhlbiB0aGUgdGVtcGxhdGUgaXMgY2FjaGVkLlxuICpcbiAqIEBtZW1iZXJvZiBtb2R1bGU6ZWpzLWludGVybmFsXG4gKiBAcGFyYW0ge1N0cmluZ30gIHBhdGggICAgcGF0aCBmb3IgdGhlIHNwZWNpZmllZCBmaWxlXG4gKiBAcGFyYW0ge09wdGlvbnN9IG9wdGlvbnMgY29tcGlsYXRpb24gb3B0aW9uc1xuICogQHJldHVybiB7KFRlbXBsYXRlRnVuY3Rpb258Q2xpZW50RnVuY3Rpb24pfVxuICogRGVwZW5kaW5nIG9uIHRoZSB2YWx1ZSBvZiBgb3B0aW9ucy5jbGllbnRgLCBlaXRoZXIgdHlwZSBtaWdodCBiZSByZXR1cm5lZFxuICogQHN0YXRpY1xuICovXG5cbmZ1bmN0aW9uIGluY2x1ZGVGaWxlKHBhdGgsIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB1dGlscy5zaGFsbG93Q29weSh1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCksIG9wdGlvbnMpO1xuICBvcHRzLmZpbGVuYW1lID0gZ2V0SW5jbHVkZVBhdGgocGF0aCwgb3B0cyk7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbmNsdWRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBpbmNsdWRlclJlc3VsdCA9IG9wdGlvbnMuaW5jbHVkZXIocGF0aCwgb3B0cy5maWxlbmFtZSk7XG4gICAgaWYgKGluY2x1ZGVyUmVzdWx0KSB7XG4gICAgICBpZiAoaW5jbHVkZXJSZXN1bHQuZmlsZW5hbWUpIHtcbiAgICAgICAgb3B0cy5maWxlbmFtZSA9IGluY2x1ZGVyUmVzdWx0LmZpbGVuYW1lO1xuICAgICAgfVxuICAgICAgaWYgKGluY2x1ZGVyUmVzdWx0LnRlbXBsYXRlKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVDYWNoZShvcHRzLCBpbmNsdWRlclJlc3VsdC50ZW1wbGF0ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBoYW5kbGVDYWNoZShvcHRzKTtcbn1cblxuLyoqXG4gKiBSZS10aHJvdyB0aGUgZ2l2ZW4gYGVycmAgaW4gY29udGV4dCB0byB0aGUgYHN0cmAgb2YgZWpzLCBgZmlsZW5hbWVgLCBhbmRcbiAqIGBsaW5lbm9gLlxuICpcbiAqIEBpbXBsZW1lbnRzIHtSZXRocm93Q2FsbGJhY2t9XG4gKiBAbWVtYmVyb2YgbW9kdWxlOmVqcy1pbnRlcm5hbFxuICogQHBhcmFtIHtFcnJvcn0gIGVyciAgICAgIEVycm9yIG9iamVjdFxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciAgICAgIEVKUyBzb3VyY2VcbiAqIEBwYXJhbSB7U3RyaW5nfSBmbG5tICAgICBmaWxlIG5hbWUgb2YgdGhlIEVKUyBmaWxlXG4gKiBAcGFyYW0ge051bWJlcn0gbGluZW5vICAgbGluZSBudW1iZXIgb2YgdGhlIGVycm9yXG4gKiBAcGFyYW0ge0VzY2FwZUNhbGxiYWNrfSBlc2NcbiAqIEBzdGF0aWNcbiAqL1xuXG5mdW5jdGlvbiByZXRocm93KGVyciwgc3RyLCBmbG5tLCBsaW5lbm8sIGVzYykge1xuICB2YXIgbGluZXMgPSBzdHIuc3BsaXQoJ1xcbicpO1xuICB2YXIgc3RhcnQgPSBNYXRoLm1heChsaW5lbm8gLSAzLCAwKTtcbiAgdmFyIGVuZCA9IE1hdGgubWluKGxpbmVzLmxlbmd0aCwgbGluZW5vICsgMyk7XG4gIHZhciBmaWxlbmFtZSA9IGVzYyhmbG5tKTtcbiAgLy8gRXJyb3IgY29udGV4dFxuICB2YXIgY29udGV4dCA9IGxpbmVzLnNsaWNlKHN0YXJ0LCBlbmQpLm1hcChmdW5jdGlvbiAobGluZSwgaSl7XG4gICAgdmFyIGN1cnIgPSBpICsgc3RhcnQgKyAxO1xuICAgIHJldHVybiAoY3VyciA9PSBsaW5lbm8gPyAnID4+ICcgOiAnICAgICcpXG4gICAgICArIGN1cnJcbiAgICAgICsgJ3wgJ1xuICAgICAgKyBsaW5lO1xuICB9KS5qb2luKCdcXG4nKTtcblxuICAvLyBBbHRlciBleGNlcHRpb24gbWVzc2FnZVxuICBlcnIucGF0aCA9IGZpbGVuYW1lO1xuICBlcnIubWVzc2FnZSA9IChmaWxlbmFtZSB8fCAnZWpzJykgKyAnOidcbiAgICArIGxpbmVubyArICdcXG4nXG4gICAgKyBjb250ZXh0ICsgJ1xcblxcbidcbiAgICArIGVyci5tZXNzYWdlO1xuXG4gIHRocm93IGVycjtcbn1cblxuZnVuY3Rpb24gc3RyaXBTZW1pKHN0cil7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvOyhcXHMqJCkvLCAnJDEnKTtcbn1cblxuLyoqXG4gKiBDb21waWxlIHRoZSBnaXZlbiBgc3RyYCBvZiBlanMgaW50byBhIHRlbXBsYXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSAgdGVtcGxhdGUgRUpTIHRlbXBsYXRlXG4gKlxuICogQHBhcmFtIHtPcHRpb25zfSBbb3B0c10gY29tcGlsYXRpb24gb3B0aW9uc1xuICpcbiAqIEByZXR1cm4geyhUZW1wbGF0ZUZ1bmN0aW9ufENsaWVudEZ1bmN0aW9uKX1cbiAqIERlcGVuZGluZyBvbiB0aGUgdmFsdWUgb2YgYG9wdHMuY2xpZW50YCwgZWl0aGVyIHR5cGUgbWlnaHQgYmUgcmV0dXJuZWQuXG4gKiBOb3RlIHRoYXQgdGhlIHJldHVybiB0eXBlIG9mIHRoZSBmdW5jdGlvbiBhbHNvIGRlcGVuZHMgb24gdGhlIHZhbHVlIG9mIGBvcHRzLmFzeW5jYC5cbiAqIEBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmNvbXBpbGUgPSBmdW5jdGlvbiBjb21waWxlKHRlbXBsYXRlLCBvcHRzKSB7XG4gIHZhciB0ZW1wbDtcblxuICAvLyB2MSBjb21wYXRcbiAgLy8gJ3Njb3BlJyBpcyAnY29udGV4dCdcbiAgLy8gRklYTUU6IFJlbW92ZSB0aGlzIGluIGEgZnV0dXJlIHZlcnNpb25cbiAgaWYgKG9wdHMgJiYgb3B0cy5zY29wZSkge1xuICAgIGlmICghc2NvcGVPcHRpb25XYXJuZWQpe1xuICAgICAgY29uc29sZS53YXJuKCdgc2NvcGVgIG9wdGlvbiBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gRUpTIDMnKTtcbiAgICAgIHNjb3BlT3B0aW9uV2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFvcHRzLmNvbnRleHQpIHtcbiAgICAgIG9wdHMuY29udGV4dCA9IG9wdHMuc2NvcGU7XG4gICAgfVxuICAgIGRlbGV0ZSBvcHRzLnNjb3BlO1xuICB9XG4gIHRlbXBsID0gbmV3IFRlbXBsYXRlKHRlbXBsYXRlLCBvcHRzKTtcbiAgcmV0dXJuIHRlbXBsLmNvbXBpbGUoKTtcbn07XG5cbi8qKlxuICogUmVuZGVyIHRoZSBnaXZlbiBgdGVtcGxhdGVgIG9mIGVqcy5cbiAqXG4gKiBJZiB5b3Ugd291bGQgbGlrZSB0byBpbmNsdWRlIG9wdGlvbnMgYnV0IG5vdCBkYXRhLCB5b3UgbmVlZCB0byBleHBsaWNpdGx5XG4gKiBjYWxsIHRoaXMgZnVuY3Rpb24gd2l0aCBgZGF0YWAgYmVpbmcgYW4gZW1wdHkgb2JqZWN0IG9yIGBudWxsYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gICB0ZW1wbGF0ZSBFSlMgdGVtcGxhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSAgW2RhdGE9e31dIHRlbXBsYXRlIGRhdGFcbiAqIEBwYXJhbSB7T3B0aW9uc30gW29wdHM9e31dIGNvbXBpbGF0aW9uIGFuZCByZW5kZXJpbmcgb3B0aW9uc1xuICogQHJldHVybiB7KFN0cmluZ3xQcm9taXNlPFN0cmluZz4pfVxuICogUmV0dXJuIHZhbHVlIHR5cGUgZGVwZW5kcyBvbiBgb3B0cy5hc3luY2AuXG4gKiBAcHVibGljXG4gKi9cblxuZXhwb3J0cy5yZW5kZXIgPSBmdW5jdGlvbiAodGVtcGxhdGUsIGQsIG8pIHtcbiAgdmFyIGRhdGEgPSBkIHx8IHV0aWxzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKTtcbiAgdmFyIG9wdHMgPSBvIHx8IHV0aWxzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKTtcblxuICAvLyBObyBvcHRpb25zIG9iamVjdCAtLSBpZiB0aGVyZSBhcmUgb3B0aW9ueSBuYW1lc1xuICAvLyBpbiB0aGUgZGF0YSwgY29weSB0aGVtIHRvIG9wdGlvbnNcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMikge1xuICAgIHV0aWxzLnNoYWxsb3dDb3B5RnJvbUxpc3Qob3B0cywgZGF0YSwgX09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBKTtcbiAgfVxuXG4gIHJldHVybiBoYW5kbGVDYWNoZShvcHRzLCB0ZW1wbGF0ZSkoZGF0YSk7XG59O1xuXG4vKipcbiAqIFJlbmRlciBhbiBFSlMgZmlsZSBhdCB0aGUgZ2l2ZW4gYHBhdGhgIGFuZCBjYWxsYmFjayBgY2IoZXJyLCBzdHIpYC5cbiAqXG4gKiBJZiB5b3Ugd291bGQgbGlrZSB0byBpbmNsdWRlIG9wdGlvbnMgYnV0IG5vdCBkYXRhLCB5b3UgbmVlZCB0byBleHBsaWNpdGx5XG4gKiBjYWxsIHRoaXMgZnVuY3Rpb24gd2l0aCBgZGF0YWAgYmVpbmcgYW4gZW1wdHkgb2JqZWN0IG9yIGBudWxsYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gICAgICAgICAgICAgcGF0aCAgICAgcGF0aCB0byB0aGUgRUpTIGZpbGVcbiAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgIFtkYXRhPXt9XSB0ZW1wbGF0ZSBkYXRhXG4gKiBAcGFyYW0ge09wdGlvbnN9ICAgICAgICAgICBbb3B0cz17fV0gY29tcGlsYXRpb24gYW5kIHJlbmRlcmluZyBvcHRpb25zXG4gKiBAcGFyYW0ge1JlbmRlckZpbGVDYWxsYmFja30gY2IgY2FsbGJhY2tcbiAqIEBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnJlbmRlckZpbGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgdmFyIGZpbGVuYW1lID0gYXJncy5zaGlmdCgpO1xuICB2YXIgY2I7XG4gIHZhciBvcHRzID0ge2ZpbGVuYW1lOiBmaWxlbmFtZX07XG4gIHZhciBkYXRhO1xuICB2YXIgdmlld09wdHM7XG5cbiAgLy8gRG8gd2UgaGF2ZSBhIGNhbGxiYWNrP1xuICBpZiAodHlwZW9mIGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV0gPT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gYXJncy5wb3AoKTtcbiAgfVxuICAvLyBEbyB3ZSBoYXZlIGRhdGEvb3B0cz9cbiAgaWYgKGFyZ3MubGVuZ3RoKSB7XG4gICAgLy8gU2hvdWxkIGFsd2F5cyBoYXZlIGRhdGEgb2JqXG4gICAgZGF0YSA9IGFyZ3Muc2hpZnQoKTtcbiAgICAvLyBOb3JtYWwgcGFzc2VkIG9wdHMgKGRhdGEgb2JqICsgb3B0cyBvYmopXG4gICAgaWYgKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAvLyBVc2Ugc2hhbGxvd0NvcHkgc28gd2UgZG9uJ3QgcG9sbHV0ZSBwYXNzZWQgaW4gb3B0cyBvYmogd2l0aCBuZXcgdmFsc1xuICAgICAgdXRpbHMuc2hhbGxvd0NvcHkob3B0cywgYXJncy5wb3AoKSk7XG4gICAgfVxuICAgIC8vIFNwZWNpYWwgY2FzaW5nIGZvciBFeHByZXNzIChzZXR0aW5ncyArIG9wdHMtaW4tZGF0YSlcbiAgICBlbHNlIHtcbiAgICAgIC8vIEV4cHJlc3MgMyBhbmQgNFxuICAgICAgaWYgKGRhdGEuc2V0dGluZ3MpIHtcbiAgICAgICAgLy8gUHVsbCBhIGZldyB0aGluZ3MgZnJvbSBrbm93biBsb2NhdGlvbnNcbiAgICAgICAgaWYgKGRhdGEuc2V0dGluZ3Mudmlld3MpIHtcbiAgICAgICAgICBvcHRzLnZpZXdzID0gZGF0YS5zZXR0aW5ncy52aWV3cztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5zZXR0aW5nc1sndmlldyBjYWNoZSddKSB7XG4gICAgICAgICAgb3B0cy5jYWNoZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVW5kb2N1bWVudGVkIGFmdGVyIEV4cHJlc3MgMiwgYnV0IHN0aWxsIHVzYWJsZSwgZXNwLiBmb3JcbiAgICAgICAgLy8gaXRlbXMgdGhhdCBhcmUgdW5zYWZlIHRvIGJlIHBhc3NlZCBhbG9uZyB3aXRoIGRhdGEsIGxpa2UgYHJvb3RgXG4gICAgICAgIHZpZXdPcHRzID0gZGF0YS5zZXR0aW5nc1sndmlldyBvcHRpb25zJ107XG4gICAgICAgIGlmICh2aWV3T3B0cykge1xuICAgICAgICAgIHV0aWxzLnNoYWxsb3dDb3B5KG9wdHMsIHZpZXdPcHRzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRXhwcmVzcyAyIGFuZCBsb3dlciwgdmFsdWVzIHNldCBpbiBhcHAubG9jYWxzLCBvciBwZW9wbGUgd2hvIGp1c3RcbiAgICAgIC8vIHdhbnQgdG8gcGFzcyBvcHRpb25zIGluIHRoZWlyIGRhdGEuIE5PVEU6IFRoZXNlIHZhbHVlcyB3aWxsIG92ZXJyaWRlXG4gICAgICAvLyBhbnl0aGluZyBwcmV2aW91c2x5IHNldCBpbiBzZXR0aW5ncyAgb3Igc2V0dGluZ3NbJ3ZpZXcgb3B0aW9ucyddXG4gICAgICB1dGlscy5zaGFsbG93Q29weUZyb21MaXN0KG9wdHMsIGRhdGEsIF9PUFRTX1BBU1NBQkxFX1dJVEhfREFUQV9FWFBSRVNTKTtcbiAgICB9XG4gICAgb3B0cy5maWxlbmFtZSA9IGZpbGVuYW1lO1xuICB9XG4gIGVsc2Uge1xuICAgIGRhdGEgPSB1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCk7XG4gIH1cblxuICByZXR1cm4gdHJ5SGFuZGxlQ2FjaGUob3B0cywgZGF0YSwgY2IpO1xufTtcblxuLyoqXG4gKiBDbGVhciBpbnRlcm1lZGlhdGUgSmF2YVNjcmlwdCBjYWNoZS4gQ2FsbHMge0BsaW5rIENhY2hlI3Jlc2V0fS5cbiAqIEBwdWJsaWNcbiAqL1xuXG4vKipcbiAqIEVKUyB0ZW1wbGF0ZSBjbGFzc1xuICogQHB1YmxpY1xuICovXG5leHBvcnRzLlRlbXBsYXRlID0gVGVtcGxhdGU7XG5cbmV4cG9ydHMuY2xlYXJDYWNoZSA9IGZ1bmN0aW9uICgpIHtcbiAgZXhwb3J0cy5jYWNoZS5yZXNldCgpO1xufTtcblxuZnVuY3Rpb24gVGVtcGxhdGUodGV4dCwgb3B0c1BhcmFtKSB7XG4gIHZhciBvcHRzID0gdXRpbHMuaGFzT3duT25seU9iamVjdChvcHRzUGFyYW0pO1xuICB2YXIgb3B0aW9ucyA9IHV0aWxzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKTtcbiAgdGhpcy50ZW1wbGF0ZVRleHQgPSB0ZXh0O1xuICAvKiogQHR5cGUge3N0cmluZyB8IG51bGx9ICovXG4gIHRoaXMubW9kZSA9IG51bGw7XG4gIHRoaXMudHJ1bmNhdGUgPSBmYWxzZTtcbiAgdGhpcy5jdXJyZW50TGluZSA9IDE7XG4gIHRoaXMuc291cmNlID0gJyc7XG4gIG9wdGlvbnMuY2xpZW50ID0gb3B0cy5jbGllbnQgfHwgZmFsc2U7XG4gIG9wdGlvbnMuZXNjYXBlRnVuY3Rpb24gPSBvcHRzLmVzY2FwZSB8fCBvcHRzLmVzY2FwZUZ1bmN0aW9uIHx8IHV0aWxzLmVzY2FwZVhNTDtcbiAgb3B0aW9ucy5jb21waWxlRGVidWcgPSBvcHRzLmNvbXBpbGVEZWJ1ZyAhPT0gZmFsc2U7XG4gIG9wdGlvbnMuZGVidWcgPSAhIW9wdHMuZGVidWc7XG4gIG9wdGlvbnMuZmlsZW5hbWUgPSBvcHRzLmZpbGVuYW1lO1xuICBvcHRpb25zLm9wZW5EZWxpbWl0ZXIgPSBvcHRzLm9wZW5EZWxpbWl0ZXIgfHwgZXhwb3J0cy5vcGVuRGVsaW1pdGVyIHx8IF9ERUZBVUxUX09QRU5fREVMSU1JVEVSO1xuICBvcHRpb25zLmNsb3NlRGVsaW1pdGVyID0gb3B0cy5jbG9zZURlbGltaXRlciB8fCBleHBvcnRzLmNsb3NlRGVsaW1pdGVyIHx8IF9ERUZBVUxUX0NMT1NFX0RFTElNSVRFUjtcbiAgb3B0aW9ucy5kZWxpbWl0ZXIgPSBvcHRzLmRlbGltaXRlciB8fCBleHBvcnRzLmRlbGltaXRlciB8fCBfREVGQVVMVF9ERUxJTUlURVI7XG4gIG9wdGlvbnMuc3RyaWN0ID0gb3B0cy5zdHJpY3QgfHwgZmFsc2U7XG4gIG9wdGlvbnMuY29udGV4dCA9IG9wdHMuY29udGV4dDtcbiAgb3B0aW9ucy5jYWNoZSA9IG9wdHMuY2FjaGUgfHwgZmFsc2U7XG4gIG9wdGlvbnMucm1XaGl0ZXNwYWNlID0gb3B0cy5ybVdoaXRlc3BhY2U7XG4gIG9wdGlvbnMucm9vdCA9IG9wdHMucm9vdDtcbiAgb3B0aW9ucy5pbmNsdWRlciA9IG9wdHMuaW5jbHVkZXI7XG4gIG9wdGlvbnMub3V0cHV0RnVuY3Rpb25OYW1lID0gb3B0cy5vdXRwdXRGdW5jdGlvbk5hbWU7XG4gIG9wdGlvbnMubG9jYWxzTmFtZSA9IG9wdHMubG9jYWxzTmFtZSB8fCBleHBvcnRzLmxvY2Fsc05hbWUgfHwgX0RFRkFVTFRfTE9DQUxTX05BTUU7XG4gIG9wdGlvbnMudmlld3MgPSBvcHRzLnZpZXdzO1xuICBvcHRpb25zLmFzeW5jID0gb3B0cy5hc3luYztcbiAgb3B0aW9ucy5kZXN0cnVjdHVyZWRMb2NhbHMgPSBvcHRzLmRlc3RydWN0dXJlZExvY2FscztcbiAgb3B0aW9ucy5sZWdhY3lJbmNsdWRlID0gdHlwZW9mIG9wdHMubGVnYWN5SW5jbHVkZSAhPSAndW5kZWZpbmVkJyA/ICEhb3B0cy5sZWdhY3lJbmNsdWRlIDogdHJ1ZTtcblxuICBpZiAob3B0aW9ucy5zdHJpY3QpIHtcbiAgICBvcHRpb25zLl93aXRoID0gZmFsc2U7XG4gIH1cbiAgZWxzZSB7XG4gICAgb3B0aW9ucy5fd2l0aCA9IHR5cGVvZiBvcHRzLl93aXRoICE9ICd1bmRlZmluZWQnID8gb3B0cy5fd2l0aCA6IHRydWU7XG4gIH1cblxuICB0aGlzLm9wdHMgPSBvcHRpb25zO1xuXG4gIHRoaXMucmVnZXggPSB0aGlzLmNyZWF0ZVJlZ2V4KCk7XG59XG5cblRlbXBsYXRlLm1vZGVzID0ge1xuICBFVkFMOiAnZXZhbCcsXG4gIEVTQ0FQRUQ6ICdlc2NhcGVkJyxcbiAgUkFXOiAncmF3JyxcbiAgQ09NTUVOVDogJ2NvbW1lbnQnLFxuICBMSVRFUkFMOiAnbGl0ZXJhbCdcbn07XG5cblRlbXBsYXRlLnByb3RvdHlwZSA9IHtcbiAgY3JlYXRlUmVnZXg6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RyID0gX1JFR0VYX1NUUklORztcbiAgICB2YXIgZGVsaW0gPSB1dGlscy5lc2NhcGVSZWdFeHBDaGFycyh0aGlzLm9wdHMuZGVsaW1pdGVyKTtcbiAgICB2YXIgb3BlbiA9IHV0aWxzLmVzY2FwZVJlZ0V4cENoYXJzKHRoaXMub3B0cy5vcGVuRGVsaW1pdGVyKTtcbiAgICB2YXIgY2xvc2UgPSB1dGlscy5lc2NhcGVSZWdFeHBDaGFycyh0aGlzLm9wdHMuY2xvc2VEZWxpbWl0ZXIpO1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKC8lL2csIGRlbGltKVxuICAgICAgLnJlcGxhY2UoLzwvZywgb3BlbilcbiAgICAgIC5yZXBsYWNlKC8+L2csIGNsb3NlKTtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChzdHIpO1xuICB9LFxuXG4gIGNvbXBpbGU6IGZ1bmN0aW9uICgpIHtcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICB2YXIgc3JjO1xuICAgIC8qKiBAdHlwZSB7Q2xpZW50RnVuY3Rpb259ICovXG4gICAgdmFyIGZuO1xuICAgIHZhciBvcHRzID0gdGhpcy5vcHRzO1xuICAgIHZhciBwcmVwZW5kZWQgPSAnJztcbiAgICB2YXIgYXBwZW5kZWQgPSAnJztcbiAgICAvKiogQHR5cGUge0VzY2FwZUNhbGxiYWNrfSAqL1xuICAgIHZhciBlc2NhcGVGbiA9IG9wdHMuZXNjYXBlRnVuY3Rpb247XG4gICAgLyoqIEB0eXBlIHtGdW5jdGlvbkNvbnN0cnVjdG9yfSAqL1xuICAgIHZhciBjdG9yO1xuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIHZhciBzYW5pdGl6ZWRGaWxlbmFtZSA9IG9wdHMuZmlsZW5hbWUgPyBKU09OLnN0cmluZ2lmeShvcHRzLmZpbGVuYW1lKSA6ICd1bmRlZmluZWQnO1xuXG4gICAgaWYgKCF0aGlzLnNvdXJjZSkge1xuICAgICAgdGhpcy5nZW5lcmF0ZVNvdXJjZSgpO1xuICAgICAgcHJlcGVuZGVkICs9XG4gICAgICAgICcgIHZhciBfX291dHB1dCA9IFwiXCI7XFxuJyArXG4gICAgICAgICcgIGZ1bmN0aW9uIF9fYXBwZW5kKHMpIHsgaWYgKHMgIT09IHVuZGVmaW5lZCAmJiBzICE9PSBudWxsKSBfX291dHB1dCArPSBzIH1cXG4nO1xuICAgICAgaWYgKG9wdHMub3V0cHV0RnVuY3Rpb25OYW1lKSB7XG4gICAgICAgIGlmICghX0pTX0lERU5USUZJRVIudGVzdChvcHRzLm91dHB1dEZ1bmN0aW9uTmFtZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ291dHB1dEZ1bmN0aW9uTmFtZSBpcyBub3QgYSB2YWxpZCBKUyBpZGVudGlmaWVyLicpO1xuICAgICAgICB9XG4gICAgICAgIHByZXBlbmRlZCArPSAnICB2YXIgJyArIG9wdHMub3V0cHV0RnVuY3Rpb25OYW1lICsgJyA9IF9fYXBwZW5kOycgKyAnXFxuJztcbiAgICAgIH1cbiAgICAgIGlmIChvcHRzLmxvY2Fsc05hbWUgJiYgIV9KU19JREVOVElGSUVSLnRlc3Qob3B0cy5sb2NhbHNOYW1lKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2xvY2Fsc05hbWUgaXMgbm90IGEgdmFsaWQgSlMgaWRlbnRpZmllci4nKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRzLmRlc3RydWN0dXJlZExvY2FscyAmJiBvcHRzLmRlc3RydWN0dXJlZExvY2Fscy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGRlc3RydWN0dXJpbmcgPSAnICB2YXIgX19sb2NhbHMgPSAoJyArIG9wdHMubG9jYWxzTmFtZSArICcgfHwge30pLFxcbic7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3B0cy5kZXN0cnVjdHVyZWRMb2NhbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgbmFtZSA9IG9wdHMuZGVzdHJ1Y3R1cmVkTG9jYWxzW2ldO1xuICAgICAgICAgIGlmICghX0pTX0lERU5USUZJRVIudGVzdChuYW1lKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkZXN0cnVjdHVyZWRMb2NhbHNbJyArIGkgKyAnXSBpcyBub3QgYSB2YWxpZCBKUyBpZGVudGlmaWVyLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICAgIGRlc3RydWN0dXJpbmcgKz0gJyxcXG4gICc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlc3RydWN0dXJpbmcgKz0gbmFtZSArICcgPSBfX2xvY2Fscy4nICsgbmFtZTtcbiAgICAgICAgfVxuICAgICAgICBwcmVwZW5kZWQgKz0gZGVzdHJ1Y3R1cmluZyArICc7XFxuJztcbiAgICAgIH1cbiAgICAgIGlmIChvcHRzLl93aXRoICE9PSBmYWxzZSkge1xuICAgICAgICBwcmVwZW5kZWQgKz0gICcgIHdpdGggKCcgKyBvcHRzLmxvY2Fsc05hbWUgKyAnIHx8IHt9KSB7JyArICdcXG4nO1xuICAgICAgICBhcHBlbmRlZCArPSAnICB9JyArICdcXG4nO1xuICAgICAgfVxuICAgICAgYXBwZW5kZWQgKz0gJyAgcmV0dXJuIF9fb3V0cHV0OycgKyAnXFxuJztcbiAgICAgIHRoaXMuc291cmNlID0gcHJlcGVuZGVkICsgdGhpcy5zb3VyY2UgKyBhcHBlbmRlZDtcbiAgICB9XG5cbiAgICBpZiAob3B0cy5jb21waWxlRGVidWcpIHtcbiAgICAgIHNyYyA9ICd2YXIgX19saW5lID0gMScgKyAnXFxuJ1xuICAgICAgICArICcgICwgX19saW5lcyA9ICcgKyBKU09OLnN0cmluZ2lmeSh0aGlzLnRlbXBsYXRlVGV4dCkgKyAnXFxuJ1xuICAgICAgICArICcgICwgX19maWxlbmFtZSA9ICcgKyBzYW5pdGl6ZWRGaWxlbmFtZSArICc7JyArICdcXG4nXG4gICAgICAgICsgJ3RyeSB7JyArICdcXG4nXG4gICAgICAgICsgdGhpcy5zb3VyY2VcbiAgICAgICAgKyAnfSBjYXRjaCAoZSkgeycgKyAnXFxuJ1xuICAgICAgICArICcgIHJldGhyb3coZSwgX19saW5lcywgX19maWxlbmFtZSwgX19saW5lLCBlc2NhcGVGbik7JyArICdcXG4nXG4gICAgICAgICsgJ30nICsgJ1xcbic7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgc3JjID0gdGhpcy5zb3VyY2U7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMuY2xpZW50KSB7XG4gICAgICBzcmMgPSAnZXNjYXBlRm4gPSBlc2NhcGVGbiB8fCAnICsgZXNjYXBlRm4udG9TdHJpbmcoKSArICc7JyArICdcXG4nICsgc3JjO1xuICAgICAgaWYgKG9wdHMuY29tcGlsZURlYnVnKSB7XG4gICAgICAgIHNyYyA9ICdyZXRocm93ID0gcmV0aHJvdyB8fCAnICsgcmV0aHJvdy50b1N0cmluZygpICsgJzsnICsgJ1xcbicgKyBzcmM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdHMuc3RyaWN0KSB7XG4gICAgICBzcmMgPSAnXCJ1c2Ugc3RyaWN0XCI7XFxuJyArIHNyYztcbiAgICB9XG4gICAgaWYgKG9wdHMuZGVidWcpIHtcbiAgICAgIGNvbnNvbGUubG9nKHNyYyk7XG4gICAgfVxuICAgIGlmIChvcHRzLmNvbXBpbGVEZWJ1ZyAmJiBvcHRzLmZpbGVuYW1lKSB7XG4gICAgICBzcmMgPSBzcmMgKyAnXFxuJ1xuICAgICAgICArICcvLyMgc291cmNlVVJMPScgKyBzYW5pdGl6ZWRGaWxlbmFtZSArICdcXG4nO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpZiAob3B0cy5hc3luYykge1xuICAgICAgICAvLyBIYXZlIHRvIHVzZSBnZW5lcmF0ZWQgZnVuY3Rpb24gZm9yIHRoaXMsIHNpbmNlIGluIGVudnMgd2l0aG91dCBzdXBwb3J0LFxuICAgICAgICAvLyBpdCBicmVha3MgaW4gcGFyc2luZ1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGN0b3IgPSAobmV3IEZ1bmN0aW9uKCdyZXR1cm4gKGFzeW5jIGZ1bmN0aW9uKCl7fSkuY29uc3RydWN0b3I7JykpKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2goZSkge1xuICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgU3ludGF4RXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBlbnZpcm9ubWVudCBkb2VzIG5vdCBzdXBwb3J0IGFzeW5jL2F3YWl0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjdG9yID0gRnVuY3Rpb247XG4gICAgICB9XG4gICAgICBmbiA9IG5ldyBjdG9yKG9wdHMubG9jYWxzTmFtZSArICcsIGVzY2FwZUZuLCBpbmNsdWRlLCByZXRocm93Jywgc3JjKTtcbiAgICB9XG4gICAgY2F0Y2goZSkge1xuICAgICAgLy8gaXN0YW5idWwgaWdub3JlIGVsc2VcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgU3ludGF4RXJyb3IpIHtcbiAgICAgICAgaWYgKG9wdHMuZmlsZW5hbWUpIHtcbiAgICAgICAgICBlLm1lc3NhZ2UgKz0gJyBpbiAnICsgb3B0cy5maWxlbmFtZTtcbiAgICAgICAgfVxuICAgICAgICBlLm1lc3NhZ2UgKz0gJyB3aGlsZSBjb21waWxpbmcgZWpzXFxuXFxuJztcbiAgICAgICAgZS5tZXNzYWdlICs9ICdJZiB0aGUgYWJvdmUgZXJyb3IgaXMgbm90IGhlbHBmdWwsIHlvdSBtYXkgd2FudCB0byB0cnkgRUpTLUxpbnQ6XFxuJztcbiAgICAgICAgZS5tZXNzYWdlICs9ICdodHRwczovL2dpdGh1Yi5jb20vUnlhblppbS9FSlMtTGludCc7XG4gICAgICAgIGlmICghb3B0cy5hc3luYykge1xuICAgICAgICAgIGUubWVzc2FnZSArPSAnXFxuJztcbiAgICAgICAgICBlLm1lc3NhZ2UgKz0gJ09yLCBpZiB5b3UgbWVhbnQgdG8gY3JlYXRlIGFuIGFzeW5jIGZ1bmN0aW9uLCBwYXNzIGBhc3luYzogdHJ1ZWAgYXMgYW4gb3B0aW9uLic7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRocm93IGU7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGEgY2FsbGFibGUgZnVuY3Rpb24gd2hpY2ggd2lsbCBleGVjdXRlIHRoZSBmdW5jdGlvblxuICAgIC8vIGNyZWF0ZWQgYnkgdGhlIHNvdXJjZS1jb2RlLCB3aXRoIHRoZSBwYXNzZWQgZGF0YSBhcyBsb2NhbHNcbiAgICAvLyBBZGRzIGEgbG9jYWwgYGluY2x1ZGVgIGZ1bmN0aW9uIHdoaWNoIGFsbG93cyBmdWxsIHJlY3Vyc2l2ZSBpbmNsdWRlXG4gICAgdmFyIHJldHVybmVkRm4gPSBvcHRzLmNsaWVudCA/IGZuIDogZnVuY3Rpb24gYW5vbnltb3VzKGRhdGEpIHtcbiAgICAgIHZhciBpbmNsdWRlID0gZnVuY3Rpb24gKHBhdGgsIGluY2x1ZGVEYXRhKSB7XG4gICAgICAgIHZhciBkID0gdXRpbHMuc2hhbGxvd0NvcHkodXRpbHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpLCBkYXRhKTtcbiAgICAgICAgaWYgKGluY2x1ZGVEYXRhKSB7XG4gICAgICAgICAgZCA9IHV0aWxzLnNoYWxsb3dDb3B5KGQsIGluY2x1ZGVEYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5jbHVkZUZpbGUocGF0aCwgb3B0cykoZCk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KG9wdHMuY29udGV4dCxcbiAgICAgICAgW2RhdGEgfHwgdXRpbHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpLCBlc2NhcGVGbiwgaW5jbHVkZSwgcmV0aHJvd10pO1xuICAgIH07XG4gICAgaWYgKG9wdHMuZmlsZW5hbWUgJiYgdHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIGZpbGVuYW1lID0gb3B0cy5maWxlbmFtZTtcbiAgICAgIHZhciBiYXNlbmFtZSA9IHBhdGguYmFzZW5hbWUoZmlsZW5hbWUsIHBhdGguZXh0bmFtZShmaWxlbmFtZSkpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJldHVybmVkRm4sICduYW1lJywge1xuICAgICAgICAgIHZhbHVlOiBiYXNlbmFtZSxcbiAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZSkgey8qIGlnbm9yZSAqL31cbiAgICB9XG4gICAgcmV0dXJuIHJldHVybmVkRm47XG4gIH0sXG5cbiAgZ2VuZXJhdGVTb3VyY2U6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0cyA9IHRoaXMub3B0cztcblxuICAgIGlmIChvcHRzLnJtV2hpdGVzcGFjZSkge1xuICAgICAgLy8gSGF2ZSB0byB1c2UgdHdvIHNlcGFyYXRlIHJlcGxhY2UgaGVyZSBhcyBgXmAgYW5kIGAkYCBvcGVyYXRvcnMgZG9uJ3RcbiAgICAgIC8vIHdvcmsgd2VsbCB3aXRoIGBcXHJgIGFuZCBlbXB0eSBsaW5lcyBkb24ndCB3b3JrIHdlbGwgd2l0aCB0aGUgYG1gIGZsYWcuXG4gICAgICB0aGlzLnRlbXBsYXRlVGV4dCA9XG4gICAgICAgIHRoaXMudGVtcGxhdGVUZXh0LnJlcGxhY2UoL1tcXHJcXG5dKy9nLCAnXFxuJykucmVwbGFjZSgvXlxccyt8XFxzKyQvZ20sICcnKTtcbiAgICB9XG5cbiAgICAvLyBTbHVycCBzcGFjZXMgYW5kIHRhYnMgYmVmb3JlIDwlXyBhbmQgYWZ0ZXIgXyU+XG4gICAgdGhpcy50ZW1wbGF0ZVRleHQgPVxuICAgICAgdGhpcy50ZW1wbGF0ZVRleHQucmVwbGFjZSgvWyBcXHRdKjwlXy9nbSwgJzwlXycpLnJlcGxhY2UoL18lPlsgXFx0XSovZ20sICdfJT4nKTtcblxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgbWF0Y2hlcyA9IHRoaXMucGFyc2VUZW1wbGF0ZVRleHQoKTtcbiAgICB2YXIgZCA9IHRoaXMub3B0cy5kZWxpbWl0ZXI7XG4gICAgdmFyIG8gPSB0aGlzLm9wdHMub3BlbkRlbGltaXRlcjtcbiAgICB2YXIgYyA9IHRoaXMub3B0cy5jbG9zZURlbGltaXRlcjtcblxuICAgIGlmIChtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoKSB7XG4gICAgICBtYXRjaGVzLmZvckVhY2goZnVuY3Rpb24gKGxpbmUsIGluZGV4KSB7XG4gICAgICAgIHZhciBjbG9zaW5nO1xuICAgICAgICAvLyBJZiB0aGlzIGlzIGFuIG9wZW5pbmcgdGFnLCBjaGVjayBmb3IgY2xvc2luZyB0YWdzXG4gICAgICAgIC8vIEZJWE1FOiBNYXkgZW5kIHVwIHdpdGggc29tZSBmYWxzZSBwb3NpdGl2ZXMgaGVyZVxuICAgICAgICAvLyBCZXR0ZXIgdG8gc3RvcmUgbW9kZXMgYXMgay92IHdpdGggb3BlbkRlbGltaXRlciArIGRlbGltaXRlciBhcyBrZXlcbiAgICAgICAgLy8gVGhlbiB0aGlzIGNhbiBzaW1wbHkgY2hlY2sgYWdhaW5zdCB0aGUgbWFwXG4gICAgICAgIGlmICggbGluZS5pbmRleE9mKG8gKyBkKSA9PT0gMCAgICAgICAgLy8gSWYgaXQgaXMgYSB0YWdcbiAgICAgICAgICAmJiBsaW5lLmluZGV4T2YobyArIGQgKyBkKSAhPT0gMCkgeyAvLyBhbmQgaXMgbm90IGVzY2FwZWRcbiAgICAgICAgICBjbG9zaW5nID0gbWF0Y2hlc1tpbmRleCArIDJdO1xuICAgICAgICAgIGlmICghKGNsb3NpbmcgPT0gZCArIGMgfHwgY2xvc2luZyA9PSAnLScgKyBkICsgYyB8fCBjbG9zaW5nID09ICdfJyArIGQgKyBjKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCBtYXRjaGluZyBjbG9zZSB0YWcgZm9yIFwiJyArIGxpbmUgKyAnXCIuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNlbGYuc2NhbkxpbmUobGluZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgfSxcblxuICBwYXJzZVRlbXBsYXRlVGV4dDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdHIgPSB0aGlzLnRlbXBsYXRlVGV4dDtcbiAgICB2YXIgcGF0ID0gdGhpcy5yZWdleDtcbiAgICB2YXIgcmVzdWx0ID0gcGF0LmV4ZWMoc3RyKTtcbiAgICB2YXIgYXJyID0gW107XG4gICAgdmFyIGZpcnN0UG9zO1xuXG4gICAgd2hpbGUgKHJlc3VsdCkge1xuICAgICAgZmlyc3RQb3MgPSByZXN1bHQuaW5kZXg7XG5cbiAgICAgIGlmIChmaXJzdFBvcyAhPT0gMCkge1xuICAgICAgICBhcnIucHVzaChzdHIuc3Vic3RyaW5nKDAsIGZpcnN0UG9zKSk7XG4gICAgICAgIHN0ciA9IHN0ci5zbGljZShmaXJzdFBvcyk7XG4gICAgICB9XG5cbiAgICAgIGFyci5wdXNoKHJlc3VsdFswXSk7XG4gICAgICBzdHIgPSBzdHIuc2xpY2UocmVzdWx0WzBdLmxlbmd0aCk7XG4gICAgICByZXN1bHQgPSBwYXQuZXhlYyhzdHIpO1xuICAgIH1cblxuICAgIGlmIChzdHIpIHtcbiAgICAgIGFyci5wdXNoKHN0cik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycjtcbiAgfSxcblxuICBfYWRkT3V0cHV0OiBmdW5jdGlvbiAobGluZSkge1xuICAgIGlmICh0aGlzLnRydW5jYXRlKSB7XG4gICAgICAvLyBPbmx5IHJlcGxhY2Ugc2luZ2xlIGxlYWRpbmcgbGluZWJyZWFrIGluIHRoZSBsaW5lIGFmdGVyXG4gICAgICAvLyAtJT4gdGFnIC0tIHRoaXMgaXMgdGhlIHNpbmdsZSwgdHJhaWxpbmcgbGluZWJyZWFrXG4gICAgICAvLyBhZnRlciB0aGUgdGFnIHRoYXQgdGhlIHRydW5jYXRpb24gbW9kZSByZXBsYWNlc1xuICAgICAgLy8gSGFuZGxlIFdpbiAvIFVuaXggLyBvbGQgTWFjIGxpbmVicmVha3MgLS0gZG8gdGhlIFxcclxcblxuICAgICAgLy8gY29tYm8gZmlyc3QgaW4gdGhlIHJlZ2V4LW9yXG4gICAgICBsaW5lID0gbGluZS5yZXBsYWNlKC9eKD86XFxyXFxufFxccnxcXG4pLywgJycpO1xuICAgICAgdGhpcy50cnVuY2F0ZSA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIWxpbmUpIHtcbiAgICAgIHJldHVybiBsaW5lO1xuICAgIH1cblxuICAgIC8vIFByZXNlcnZlIGxpdGVyYWwgc2xhc2hlc1xuICAgIGxpbmUgPSBsaW5lLnJlcGxhY2UoL1xcXFwvZywgJ1xcXFxcXFxcJyk7XG5cbiAgICAvLyBDb252ZXJ0IGxpbmVicmVha3NcbiAgICBsaW5lID0gbGluZS5yZXBsYWNlKC9cXG4vZywgJ1xcXFxuJyk7XG4gICAgbGluZSA9IGxpbmUucmVwbGFjZSgvXFxyL2csICdcXFxccicpO1xuXG4gICAgLy8gRXNjYXBlIGRvdWJsZS1xdW90ZXNcbiAgICAvLyAtIHRoaXMgd2lsbCBiZSB0aGUgZGVsaW1pdGVyIGR1cmluZyBleGVjdXRpb25cbiAgICBsaW5lID0gbGluZS5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJyk7XG4gICAgdGhpcy5zb3VyY2UgKz0gJyAgICA7IF9fYXBwZW5kKFwiJyArIGxpbmUgKyAnXCIpJyArICdcXG4nO1xuICB9LFxuXG4gIHNjYW5MaW5lOiBmdW5jdGlvbiAobGluZSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgZCA9IHRoaXMub3B0cy5kZWxpbWl0ZXI7XG4gICAgdmFyIG8gPSB0aGlzLm9wdHMub3BlbkRlbGltaXRlcjtcbiAgICB2YXIgYyA9IHRoaXMub3B0cy5jbG9zZURlbGltaXRlcjtcbiAgICB2YXIgbmV3TGluZUNvdW50ID0gMDtcblxuICAgIG5ld0xpbmVDb3VudCA9IChsaW5lLnNwbGl0KCdcXG4nKS5sZW5ndGggLSAxKTtcblxuICAgIHN3aXRjaCAobGluZSkge1xuICAgIGNhc2UgbyArIGQ6XG4gICAgY2FzZSBvICsgZCArICdfJzpcbiAgICAgIHRoaXMubW9kZSA9IFRlbXBsYXRlLm1vZGVzLkVWQUw7XG4gICAgICBicmVhaztcbiAgICBjYXNlIG8gKyBkICsgJz0nOlxuICAgICAgdGhpcy5tb2RlID0gVGVtcGxhdGUubW9kZXMuRVNDQVBFRDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgbyArIGQgKyAnLSc6XG4gICAgICB0aGlzLm1vZGUgPSBUZW1wbGF0ZS5tb2Rlcy5SQVc7XG4gICAgICBicmVhaztcbiAgICBjYXNlIG8gKyBkICsgJyMnOlxuICAgICAgdGhpcy5tb2RlID0gVGVtcGxhdGUubW9kZXMuQ09NTUVOVDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgbyArIGQgKyBkOlxuICAgICAgdGhpcy5tb2RlID0gVGVtcGxhdGUubW9kZXMuTElURVJBTDtcbiAgICAgIHRoaXMuc291cmNlICs9ICcgICAgOyBfX2FwcGVuZChcIicgKyBsaW5lLnJlcGxhY2UobyArIGQgKyBkLCBvICsgZCkgKyAnXCIpJyArICdcXG4nO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBkICsgZCArIGM6XG4gICAgICB0aGlzLm1vZGUgPSBUZW1wbGF0ZS5tb2Rlcy5MSVRFUkFMO1xuICAgICAgdGhpcy5zb3VyY2UgKz0gJyAgICA7IF9fYXBwZW5kKFwiJyArIGxpbmUucmVwbGFjZShkICsgZCArIGMsIGQgKyBjKSArICdcIiknICsgJ1xcbic7XG4gICAgICBicmVhaztcbiAgICBjYXNlIGQgKyBjOlxuICAgIGNhc2UgJy0nICsgZCArIGM6XG4gICAgY2FzZSAnXycgKyBkICsgYzpcbiAgICAgIGlmICh0aGlzLm1vZGUgPT0gVGVtcGxhdGUubW9kZXMuTElURVJBTCkge1xuICAgICAgICB0aGlzLl9hZGRPdXRwdXQobGluZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubW9kZSA9IG51bGw7XG4gICAgICB0aGlzLnRydW5jYXRlID0gbGluZS5pbmRleE9mKCctJykgPT09IDAgfHwgbGluZS5pbmRleE9mKCdfJykgPT09IDA7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgLy8gSW4gc2NyaXB0IG1vZGUsIGRlcGVuZHMgb24gdHlwZSBvZiB0YWdcbiAgICAgIGlmICh0aGlzLm1vZGUpIHtcbiAgICAgICAgLy8gSWYgJy8vJyBpcyBmb3VuZCB3aXRob3V0IGEgbGluZSBicmVhaywgYWRkIGEgbGluZSBicmVhay5cbiAgICAgICAgc3dpdGNoICh0aGlzLm1vZGUpIHtcbiAgICAgICAgY2FzZSBUZW1wbGF0ZS5tb2Rlcy5FVkFMOlxuICAgICAgICBjYXNlIFRlbXBsYXRlLm1vZGVzLkVTQ0FQRUQ6XG4gICAgICAgIGNhc2UgVGVtcGxhdGUubW9kZXMuUkFXOlxuICAgICAgICAgIGlmIChsaW5lLmxhc3RJbmRleE9mKCcvLycpID4gbGluZS5sYXN0SW5kZXhPZignXFxuJykpIHtcbiAgICAgICAgICAgIGxpbmUgKz0gJ1xcbic7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodGhpcy5tb2RlKSB7XG4gICAgICAgIC8vIEp1c3QgZXhlY3V0aW5nIGNvZGVcbiAgICAgICAgY2FzZSBUZW1wbGF0ZS5tb2Rlcy5FVkFMOlxuICAgICAgICAgIHRoaXMuc291cmNlICs9ICcgICAgOyAnICsgbGluZSArICdcXG4nO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIC8vIEV4ZWMsIGVzYywgYW5kIG91dHB1dFxuICAgICAgICBjYXNlIFRlbXBsYXRlLm1vZGVzLkVTQ0FQRUQ6XG4gICAgICAgICAgdGhpcy5zb3VyY2UgKz0gJyAgICA7IF9fYXBwZW5kKGVzY2FwZUZuKCcgKyBzdHJpcFNlbWkobGluZSkgKyAnKSknICsgJ1xcbic7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgLy8gRXhlYyBhbmQgb3V0cHV0XG4gICAgICAgIGNhc2UgVGVtcGxhdGUubW9kZXMuUkFXOlxuICAgICAgICAgIHRoaXMuc291cmNlICs9ICcgICAgOyBfX2FwcGVuZCgnICsgc3RyaXBTZW1pKGxpbmUpICsgJyknICsgJ1xcbic7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgVGVtcGxhdGUubW9kZXMuQ09NTUVOVDpcbiAgICAgICAgICAvLyBEbyBub3RoaW5nXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgLy8gTGl0ZXJhbCA8JSUgbW9kZSwgYXBwZW5kIGFzIHJhdyBvdXRwdXRcbiAgICAgICAgY2FzZSBUZW1wbGF0ZS5tb2Rlcy5MSVRFUkFMOlxuICAgICAgICAgIHRoaXMuX2FkZE91dHB1dChsaW5lKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gSW4gc3RyaW5nIG1vZGUsIGp1c3QgYWRkIHRoZSBvdXRwdXRcbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLl9hZGRPdXRwdXQobGluZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNlbGYub3B0cy5jb21waWxlRGVidWcgJiYgbmV3TGluZUNvdW50KSB7XG4gICAgICB0aGlzLmN1cnJlbnRMaW5lICs9IG5ld0xpbmVDb3VudDtcbiAgICAgIHRoaXMuc291cmNlICs9ICcgICAgOyBfX2xpbmUgPSAnICsgdGhpcy5jdXJyZW50TGluZSArICdcXG4nO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBFc2NhcGUgY2hhcmFjdGVycyByZXNlcnZlZCBpbiBYTUwuXG4gKlxuICogVGhpcyBpcyBzaW1wbHkgYW4gZXhwb3J0IG9mIHtAbGluayBtb2R1bGU6dXRpbHMuZXNjYXBlWE1MfS5cbiAqXG4gKiBJZiBgbWFya3VwYCBpcyBgdW5kZWZpbmVkYCBvciBgbnVsbGAsIHRoZSBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1hcmt1cCBJbnB1dCBzdHJpbmdcbiAqIEByZXR1cm4ge1N0cmluZ30gRXNjYXBlZCBzdHJpbmdcbiAqIEBwdWJsaWNcbiAqIEBmdW5jXG4gKiAqL1xuZXhwb3J0cy5lc2NhcGVYTUwgPSB1dGlscy5lc2NhcGVYTUw7XG5cbi8qKlxuICogRXhwcmVzcy5qcyBzdXBwb3J0LlxuICpcbiAqIFRoaXMgaXMgYW4gYWxpYXMgZm9yIHtAbGluayBtb2R1bGU6ZWpzLnJlbmRlckZpbGV9LCBpbiBvcmRlciB0byBzdXBwb3J0XG4gKiBFeHByZXNzLmpzIG91dC1vZi10aGUtYm94LlxuICpcbiAqIEBmdW5jXG4gKi9cblxuZXhwb3J0cy5fX2V4cHJlc3MgPSBleHBvcnRzLnJlbmRlckZpbGU7XG5cbi8qKlxuICogVmVyc2lvbiBvZiBFSlMuXG4gKlxuICogQHJlYWRvbmx5XG4gKiBAdHlwZSB7U3RyaW5nfVxuICogQHB1YmxpY1xuICovXG5cbmV4cG9ydHMuVkVSU0lPTiA9IF9WRVJTSU9OX1NUUklORztcblxuLyoqXG4gKiBOYW1lIGZvciBkZXRlY3Rpb24gb2YgRUpTLlxuICpcbiAqIEByZWFkb25seVxuICogQHR5cGUge1N0cmluZ31cbiAqIEBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLm5hbWUgPSBfTkFNRTtcblxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAodHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJykge1xuICB3aW5kb3cuZWpzID0gZXhwb3J0cztcbn1cblxuIiwgImV4cG9ydCB7IHJ1biBhcyBjcmVhdGVBcHAgfSBmcm9tICcuL2NyZWF0ZS1hcHAnO1xuIiwgImltcG9ydCBmcywgeyB3cml0ZUZpbGVTeW5jIH0gZnJvbSAnZnMnO1xuaW1wb3J0IG9zIGZyb20gJ29zJztcbmltcG9ydCBwYXRoLCB7IGpvaW4gfSBmcm9tICdwYXRoJztcbmltcG9ydCBBZG1aaXAgZnJvbSAnYWRtLXppcCc7XG5pbXBvcnQgbWluaW1pc3QgZnJvbSAnbWluaW1pc3QnO1xuaW1wb3J0IHByb21wdHMgZnJvbSAncHJvbXB0cyc7XG5pbXBvcnQgeyByZWQsIHJlc2V0LCB5ZWxsb3cgfSBmcm9tICdrb2xvcmlzdCc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgc2ltcGxlR2l0IH0gZnJvbSAnc2ltcGxlLWdpdCc7XG5pbXBvcnQgcHJvYyBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCB3aGljaCBmcm9tICd3aGljaCc7XG5pbXBvcnQgeyBOb2RlUHJvamVjdCB9IGZyb20gJy4vY29uZmlnL3Byb2plY3RzL25vZGUnO1xuaW1wb3J0IHsgbG9hZCB9IGZyb20gJ2pzLXlhbWwnO1xuaW1wb3J0IHsgQWJzdHJhY3RQcm9qZWN0IH0gZnJvbSAnLi9jb25maWcvcHJvamVjdHMnO1xuaW1wb3J0IHsgR29sYW5nUHJvamVjdCB9IGZyb20gJy4vY29uZmlnL3Byb2plY3RzL2dvbGFuZyc7XG5pbXBvcnQgeyBEb3RuZXRQcm9qZWN0IH0gZnJvbSAnLi9jb25maWcvcHJvamVjdHMvZG90bmV0JztcbmltcG9ydCB7IFB5dGhvblByb2plY3QgfSBmcm9tICcuL2NvbmZpZy9wcm9qZWN0cy9weXRob24nO1xuaW1wb3J0IHsgUnVzdFByb2plY3QgfSBmcm9tICcuL2NvbmZpZy9wcm9qZWN0cy9ydXN0JztcbmltcG9ydCBlanMgZnJvbSAnZWpzJztcblxuY29uc3QgY3dkID0gcHJvY2Vzcy5jd2QoKTtcblxudHlwZSBDb2xvckZ1bmMgPSAoc3RyOiBzdHJpbmcgfCBudW1iZXIpID0+IHN0cmluZztcblxudHlwZSBEaXNwbGF5ZWRGcmFtZXdvcmtWYXJpYW50ID0gRnJhbWV3b3JrVmFyaWFudCAmIHtcbiAgZGlzcGxheTogc3RyaW5nO1xuICBjb2xvcjogQ29sb3JGdW5jO1xufTtcblxudHlwZSBGcmFtZXdvcmsgPSB7XG4gIHJlcG86IHN0cmluZztcbiAgZGlzcGxheTogc3RyaW5nO1xuICBjb2xvcjogQ29sb3JGdW5jO1xuICB2YXJpYW50czogRGlzcGxheWVkRnJhbWV3b3JrVmFyaWFudFtdO1xuICBkb3dubG9hZFVybDogc3RyaW5nO1xufTtcblxudHlwZSBQcm9qZWN0VHlwZSA9ICdkb3RuZXQnIHwgJ2dvJyB8ICdub2RlJyB8ICdweXRob24nIHwgJ3J1c3QnO1xuXG50eXBlIENob2ljZSA9IHtcbiAgcHJvamVjdE5hbWU6IHN0cmluZztcbiAgZnJhbWV3b3JrOiBGcmFtZXdvcms7XG4gIHZhcmlhbnQ/OiBzdHJpbmc7XG4gIG92ZXJ3cml0ZT86ICd5ZXMnO1xuICBwYWNrYWdlTmFtZTogc3RyaW5nO1xufTtcblxudHlwZSBGcmFtZXdvcmtWYXJpYW50ID0ge1xuICBicmFuY2g/OiBzdHJpbmc7XG4gIHByb2plY3RGaWxlPzogc3RyaW5nO1xuICBjb25maWdGaWxlPzogc3RyaW5nO1xuICB0eXBlPzogUHJvamVjdFR5cGU7XG4gIHJtPzogc3RyaW5nW107XG4gIGhhbmRsZXI/OiBzdHJpbmc7XG4gIG1haW4/OiBzdHJpbmc7XG4gIGRldkNvbW1hbmQ/OiBzdHJpbmc7XG59O1xuXG50eXBlIEluZGV4ID0ge1xuICBGcmFtZXdvcmtzOiB7XG4gICAgW2xhbmd1YWdlOiBzdHJpbmddOiB7XG4gICAgICBbdmFyaWFudDogc3RyaW5nXTogRnJhbWV3b3JrVmFyaWFudDtcbiAgICB9O1xuICB9O1xufTtcblxuY29uc3QgZmV0Y2hGcmFtZXdvcmtzID0gYXN5bmMgKCk6IFByb21pc2U8RnJhbWV3b3JrW10+ID0+IHtcbiAgY29uc3QgeyBkYXRhOiBpbmRleFlhbWwgfSA9IGF3YWl0IGF4aW9zLmdldChcbiAgICAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NjYWZmb2xkbHkvc2NhZmZvbGRseS1leGFtcGxlcy9yZWZzL2hlYWRzL21haW4vaW5kZXgueW1sJyxcbiAgICB7XG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDYWNoZS1Db250cm9sJzogJ25vLWNhY2hlLCBuby1zdG9yZSwgbXVzdC1yZXZhbGlkYXRlJyxcbiAgICAgICAgUHJhZ21hOiAnbm8tY2FjaGUnLFxuICAgICAgICBFeHBpcmVzOiAnMCcsXG4gICAgICB9LFxuICAgIH0sXG4gICk7XG5cbiAgY29uc3QgaW5kZXggPSBsb2FkKGluZGV4WWFtbCkgYXMgSW5kZXg7XG5cbiAgY29uc3QgZnJhbWV3b3JrcyA9IE9iamVjdC5lbnRyaWVzKGluZGV4LkZyYW1ld29ya3MpLnJlZHVjZSgoYWNjLCBbbGFuZ3VhZ2UsIHZhcmlhbnRzXSkgPT4ge1xuICAgIGFjYy5wdXNoKHtcbiAgICAgIGRpc3BsYXk6IGxhbmd1YWdlLFxuICAgICAgZG93bmxvYWRVcmw6ICdodHRwczovL2NvZGVsb2FkLmdpdGh1Yi5jb20vc2NhZmZvbGRseScsXG4gICAgICByZXBvOiAnc2NhZmZvbGRseS1leGFtcGxlcycsXG4gICAgICBjb2xvcjogeWVsbG93LFxuICAgICAgdmFyaWFudHM6IE9iamVjdC5lbnRyaWVzKHZhcmlhbnRzKS5yZWR1Y2UoKGFjY1YsIFt2YXJpYW50LCBmcmFtZXdvcmtWYXJpYW50XSkgPT4ge1xuICAgICAgICBhY2NWLnB1c2goe1xuICAgICAgICAgIGNvbmZpZ0ZpbGU6IGZyYW1ld29ya1ZhcmlhbnQucHJvamVjdEZpbGUsXG4gICAgICAgICAgLi4uZnJhbWV3b3JrVmFyaWFudCxcbiAgICAgICAgICBkaXNwbGF5OiB2YXJpYW50LFxuICAgICAgICAgIGNvbG9yOiB5ZWxsb3csXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYWNjVjtcbiAgICAgIH0sIFtdIGFzIERpc3BsYXllZEZyYW1ld29ya1ZhcmlhbnRbXSksXG4gICAgfSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwgW10gYXMgRnJhbWV3b3JrW10pO1xuXG4gIHJldHVybiBmcmFtZXdvcmtzO1xufTtcblxuY29uc3QgZ2VuZXJhdGVSZWFkbWUgPSBhc3luYyAodmFyaWFudDogRnJhbWV3b3JrVmFyaWFudCk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gIGNvbnN0IHsgZGF0YTogcmVhZG1lVGVtcGxhdGUgfSA9IGF3YWl0IGF4aW9zLmdldChcbiAgICAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NjYWZmb2xkbHkvc2NhZmZvbGRseS1leGFtcGxlcy9yZWZzL2hlYWRzL21haW4vLnRlbXBsYXRlcy9jc2EvUkVBRE1FLm1kLnRwbCcsXG4gICAge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ2FjaGUtQ29udHJvbCc6ICduby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZScsXG4gICAgICAgIFByYWdtYTogJ25vLWNhY2hlJyxcbiAgICAgICAgRXhwaXJlczogJzAnLFxuICAgICAgfSxcbiAgICB9LFxuICApO1xuXG4gIHJldHVybiBlanMucmVuZGVyKHJlYWRtZVRlbXBsYXRlLCB2YXJpYW50LCB7IGFzeW5jOiB0cnVlIH0pO1xufTtcblxuZnVuY3Rpb24gdGVtcGxhdGVzKGZyYW1ld29ya3M6IEZyYW1ld29ya1tdKSB7XG4gIHJldHVybiBmcmFtZXdvcmtzXG4gICAgLm1hcCgoZikgPT4gKGYudmFyaWFudHMgJiYgZi52YXJpYW50cy5tYXAoKHYpID0+IHYuYnJhbmNoKSkgfHwgW2YucmVwb10pXG4gICAgLnJlZHVjZSgoYSwgYikgPT4gYS5jb25jYXQoYiksIFtdKTtcbn1cblxuZnVuY3Rpb24gZ2V0VmFyaWFudChcbiAgZnJhbWV3b3JrczogRnJhbWV3b3JrW10sXG4gIGJyYW5jaD86IHN0cmluZyxcbik6IHsgZnJhbWV3b3JrPzogRnJhbWV3b3JrOyB2YXJpYW50PzogRnJhbWV3b3JrVmFyaWFudCB9IHtcbiAgZm9yIChjb25zdCBmcmFtZXdvcmsgb2YgZnJhbWV3b3Jrcykge1xuICAgIGNvbnN0IHZhcmlhbnQgPSBmcmFtZXdvcmsudmFyaWFudHMuZmluZCgodikgPT4gdi5icmFuY2ggPT09IGJyYW5jaCk7XG4gICAgaWYgKHZhcmlhbnQpIHtcbiAgICAgIHJldHVybiB7IGZyYW1ld29yaywgdmFyaWFudCB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4ge307XG59XG5cbmNvbnN0IHJlbmFtZUZpbGVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCB1bmRlZmluZWQ+ID0ge1xuICBfZ2l0aWdub3JlOiAnLmdpdGlnbm9yZScsXG59O1xuXG5jb25zdCBkZWZhdWx0VGFyZ2V0RGlyID0gJ215LWFwcCc7XG5cbmNvbnN0IGV4ZWMgPSBhc3luYyAod29ya2luZ0RpcmVjdG9yeTogc3RyaW5nLCBhcmdzOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGVudiA9IHtcbiAgICAgIC4uLnByb2Nlc3MuZW52LFxuICAgIH07XG5cbiAgICBsZXQgY29tbWFuZDogc3RyaW5nO1xuICAgIHRyeSB7XG4gICAgICBjb21tYW5kID0gd2hpY2guc3luYyhhcmdzWzBdKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZWplY3QobmV3IEVycm9yKGBVbmFibGUgdG8gbG9jYXRlIHRoZSBcXGAke2FyZ3NbMF19XFxgIGNvbW1hbmQgb24gdGhpcyBzeXN0ZW0uYCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHAgPSBwcm9jLnNwYXduKGBcIiR7Y29tbWFuZH1cImAsIGFyZ3Muc2xpY2UoMSksIHtcbiAgICAgIGN3ZDogd29ya2luZ0RpcmVjdG9yeSxcbiAgICAgIHNoZWxsOiB0cnVlLFxuICAgICAgZW52LFxuICAgIH0pO1xuXG4gICAgcC5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9KTtcblxuICAgIHAub24oJ2V4aXQnLCAoY29kZSkgPT4ge1xuICAgICAgaWYgKGNvZGUgIT09IDApIHtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgQ29tbWFuZCBmYWlsZWQgd2l0aCBjb2RlICR7Y29kZX1gKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoKTtcbiAgICB9KTtcblxuICAgIHAuc3RkaW4ucGlwZShwcm9jZXNzLnN0ZGluKTtcbiAgICBwLnN0ZG91dC5waXBlKHByb2Nlc3Muc3Rkb3V0KTtcbiAgICBwLnN0ZGVyci5waXBlKHByb2Nlc3Muc3RkZXJyKTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRUYXJnZXREaXIodGFyZ2V0RGlyOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcbiAgcmV0dXJuIHRhcmdldERpcj8udHJpbSgpLnJlcGxhY2UoL1xcLyskL2csICcnKTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eShmaWxlUGF0aDogc3RyaW5nKSB7XG4gIGNvbnN0IGZpbGVzID0gZnMucmVhZGRpclN5bmMoZmlsZVBhdGgpO1xuICByZXR1cm4gZmlsZXMubGVuZ3RoID09PSAwIHx8IChmaWxlcy5sZW5ndGggPT09IDEgJiYgZmlsZXNbMF0gPT09ICcuZ2l0Jyk7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRQYWNrYWdlTmFtZShwcm9qZWN0TmFtZTogc3RyaW5nKSB7XG4gIHJldHVybiAvXig/OkBbYS16XFxkXFwtKn5dW2EtelxcZFxcLSouX35dKlxcLyk/W2EtelxcZFxcLX5dW2EtelxcZFxcLS5ffl0qJC8udGVzdChwcm9qZWN0TmFtZSk7XG59XG5cbmZ1bmN0aW9uIHRvVmFsaWRQYWNrYWdlTmFtZShwcm9qZWN0TmFtZTogc3RyaW5nKSB7XG4gIHJldHVybiBwcm9qZWN0TmFtZVxuICAgIC50cmltKClcbiAgICAudG9Mb3dlckNhc2UoKVxuICAgIC5yZXBsYWNlKC9cXHMrL2csICctJylcbiAgICAucmVwbGFjZSgvXlsuX10vLCAnJylcbiAgICAucmVwbGFjZSgvW15hLXpcXGRcXC1+XSsvZywgJy0nKTtcbn1cblxuZnVuY3Rpb24gZW1wdHlEaXIoZGlyOiBzdHJpbmcpIHtcbiAgaWYgKCFmcy5leGlzdHNTeW5jKGRpcikpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZm9yIChjb25zdCBmaWxlIG9mIGZzLnJlYWRkaXJTeW5jKGRpcikpIHtcbiAgICBpZiAoZmlsZSA9PT0gJy5naXQnKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgZnMucm1TeW5jKHBhdGgucmVzb2x2ZShkaXIsIGZpbGUpLCB7IHJlY3Vyc2l2ZTogdHJ1ZSwgZm9yY2U6IHRydWUgfSk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZG93bmxvYWRBbmRFeHRyYWN0WmlwKGZyYW1ld29yazogRnJhbWV3b3JrLCBicmFuY2g6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IHsgZG93bmxvYWRVcmwsIHJlcG8gfSA9IGZyYW1ld29yaztcblxuICBjb25zdCB1cmwgPSBuZXcgVVJMKGAke2Rvd25sb2FkVXJsfS8ke3JlcG99L3ppcC9yZWZzL2hlYWRzLyR7YnJhbmNofWApO1xuXG4gIGNvbnNvbGUubG9nKGBgKTtcbiAgY29uc29sZS5sb2coYERvd25sb2FkaW5nIHRlbXBsYXRlIGZyb20gdGhlIFxcYCR7YnJhbmNofVxcYCBicmFuY2ggZnJvbSBcXGAke3JlcG99XFxgLi4uYCk7XG4gIGNvbnNvbGUubG9nKGBgKTtcblxuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3Moe1xuICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgIHVybDogdXJsLnRvU3RyaW5nKCksXG4gICAgICByZXNwb25zZVR5cGU6ICdhcnJheWJ1ZmZlcicsXG4gICAgfSk7XG5cbiAgICBjb25zdCB0ZW1wRGlyUGF0aCA9IGZzLm1rZHRlbXBTeW5jKHBhdGguam9pbihvcy50bXBkaXIoKSwgJ3RlbXBsYXRlLScpKTtcbiAgICBjb25zdCB0ZW1wRmlsZU5hbWUgPSB1cmwucGF0aG5hbWUuc3BsaXQoJy8nKS5wb3AoKTtcblxuICAgIGlmICghdGVtcEZpbGVOYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIGV4dHJhY3RpbmcgWklQIGZpbGU6ICR7dXJsfWApO1xuICAgIH1cblxuICAgIGNvbnN0IHRlbXBaaXBQYXRoID0gcGF0aC5qb2luKHRlbXBEaXJQYXRoLCB0ZW1wRmlsZU5hbWUpO1xuICAgIGZzLndyaXRlRmlsZVN5bmModGVtcFppcFBhdGgsIHJlc3BvbnNlLmRhdGEpO1xuXG4gICAgY29uc3QgemlwID0gbmV3IEFkbVppcCh0ZW1wWmlwUGF0aCk7XG4gICAgemlwLmV4dHJhY3RBbGxUbyh0ZW1wRGlyUGF0aCwgdHJ1ZSk7XG5cbiAgICBmcy51bmxpbmtTeW5jKHRlbXBaaXBQYXRoKTtcblxuICAgIHJldHVybiBwYXRoLmpvaW4odGVtcERpclBhdGgsIGAke3JlcG99LSR7YnJhbmNofWApO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgZG93bmxvYWRpbmcgb3IgZXh0cmFjdGluZyBaSVAgZmlsZTogJHtlcnJvcn1gKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb3B5KHNyYzogc3RyaW5nLCBkZXN0OiBzdHJpbmcpIHtcbiAgY29uc3Qgc3RhdCA9IGZzLnN0YXRTeW5jKHNyYyk7XG4gIGlmIChzdGF0LmlzRGlyZWN0b3J5KCkpIHtcbiAgICBmcy5ta2RpclN5bmMoZGVzdCwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgZm9yIChjb25zdCBmaWxlIG9mIGZzLnJlYWRkaXJTeW5jKHNyYykpIHtcbiAgICAgIGNvbnN0IHNyY0ZpbGUgPSBwYXRoLnJlc29sdmUoc3JjLCBmaWxlKTtcbiAgICAgIGNvbnN0IGRlc3RGaWxlID0gcGF0aC5yZXNvbHZlKGRlc3QsIGZpbGUpO1xuICAgICAgY29weShzcmNGaWxlLCBkZXN0RmlsZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZzLmNvcHlGaWxlU3luYyhzcmMsIGRlc3QpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNhbml0aXplKGZpbGVuYW1lOiBzdHJpbmcsIHN0YXJ0TWFya2VyOiBzdHJpbmcsIGVuZE1hcmtlcjogc3RyaW5nKSB7XG4gIGNvbnN0IHRleHQgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZW5hbWUsICd1dGYtOCcpO1xuICBjb25zdCBsaW5lcyA9IHRleHQuc3BsaXQoJ1xcbicpO1xuICBsZXQgc3RhcnRMaW5lID0gLTE7XG4gIGxldCBlbmRMaW5lID0gLTE7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChsaW5lc1tpXS5pbmNsdWRlcyhzdGFydE1hcmtlcikpIHtcbiAgICAgIHN0YXJ0TGluZSA9IGk7XG4gICAgfSBlbHNlIGlmIChsaW5lc1tpXS5pbmNsdWRlcyhlbmRNYXJrZXIpKSB7XG4gICAgICBlbmRMaW5lID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGFydExpbmUgIT09IC0xICYmIGVuZExpbmUgIT09IC0xKSB7XG4gICAgbGluZXMuc3BsaWNlKHN0YXJ0TGluZSwgZW5kTGluZSAtIHN0YXJ0TGluZSArIDEpO1xuICB9XG5cbiAgZnMud3JpdGVGaWxlU3luYyhmaWxlbmFtZSwgbGluZXMuam9pbignXFxuJyksIHsgZW5jb2Rpbmc6ICd1dGYtOCcgfSk7XG59XG5cbmNvbnN0IGdldFByb2plY3QgPSAocHJvamVjdFR5cGU6IFByb2plY3RUeXBlLCB3b3JrZGlyOiBzdHJpbmcpOiBBYnN0cmFjdFByb2plY3QgfCB1bmRlZmluZWQgPT4ge1xuICBzd2l0Y2ggKHByb2plY3RUeXBlKSB7XG4gICAgY2FzZSAnbm9kZSc6XG4gICAgICByZXR1cm4gbmV3IE5vZGVQcm9qZWN0KHVuZGVmaW5lZCwgd29ya2Rpcik7XG4gICAgY2FzZSAnZ28nOlxuICAgICAgcmV0dXJuIG5ldyBHb2xhbmdQcm9qZWN0KHVuZGVmaW5lZCwgd29ya2Rpcik7XG4gICAgY2FzZSAnZG90bmV0JzpcbiAgICAgIHJldHVybiBuZXcgRG90bmV0UHJvamVjdCh1bmRlZmluZWQsIHdvcmtkaXIpO1xuICAgIGNhc2UgJ3B5dGhvbic6XG4gICAgICByZXR1cm4gbmV3IFB5dGhvblByb2plY3QodW5kZWZpbmVkLCB3b3JrZGlyKTtcbiAgICBjYXNlICdydXN0JzpcbiAgICAgIHJldHVybiBuZXcgUnVzdFByb2plY3QodW5kZWZpbmVkLCB3b3JrZGlyKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHJ1biA9IGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgY29uc3QgZnJhbWV3b3JrcyA9IGF3YWl0IGZldGNoRnJhbWV3b3JrcygpO1xuXG4gIGNvbnN0IGFyZ3YgPSBtaW5pbWlzdDx7XG4gICAgdD86IHN0cmluZztcbiAgICB0ZW1wbGF0ZT86IHN0cmluZztcbiAgfT4oXG4gICAgLy8gU3VwcG9ydGluZyB0aGUgZm9sbG93aW5nIGludm9jYXRpb24gcGF0dGVybnM6XG4gICAgLy8gIC0gbnB4IGNyZWF0ZS1zY2FmZm9sZGx5LWFwcFxuICAgIC8vICAtIG5wbSBjcmVhdGUgc2NhZmZvbGRseS1hcHAgKCducG0nIGdldCBsb2JiZWQgb2ZmIGJ5IG5wbSlcbiAgICAvLyAgLSB5YXJuIGNyZWF0ZSBzY2FmZm9sZGx5LWFwcCAoJ3lhcm4nIGdldCBsb2JiZWQgb2ZmIGJ5IHlhcm4pXG4gICAgLy8gIC0gbnB4IHNjYWZmb2xkbHkgY3JlYXRlIGFwcFxuICAgIHByb2Nlc3MuYXJndlxuICAgICAgLnNsaWNlKDIpXG4gICAgICAuZmlsdGVyKChhcmcpID0+IGFyZy50b0xvd2VyQ2FzZSgpICE9PSAnY3JlYXRlJyAmJiBhcmcudG9Mb3dlckNhc2UoKSAhPT0gJ2FwcCcpLFxuICAgIHsgc3RyaW5nOiBbJ18nXSB9LFxuICApO1xuXG4gIGNvbnN0IGFyZ1RhcmdldERpciA9IGZvcm1hdFRhcmdldERpcihhcmd2Ll9bMF0pO1xuICBjb25zdCBhcmdUZW1wbGF0ZSA9IGFyZ3YudGVtcGxhdGUgfHwgYXJndi50O1xuXG4gIGxldCB0YXJnZXREaXIgPSBhcmdUYXJnZXREaXIgfHwgZGVmYXVsdFRhcmdldERpcjtcbiAgY29uc3QgZ2V0UHJvamVjdE5hbWUgPSAoKSA9PiAodGFyZ2V0RGlyID09PSAnLicgPyBwYXRoLmJhc2VuYW1lKHBhdGgucmVzb2x2ZSgpKSA6IHRhcmdldERpcik7XG5cbiAgbGV0IHJlc3VsdDogcHJvbXB0cy5BbnN3ZXJzPFxuICAgICdwcm9qZWN0TmFtZScgfCAnb3ZlcndyaXRlJyB8ICdwYWNrYWdlTmFtZScgfCAnZnJhbWV3b3JrJyB8ICd2YXJpYW50J1xuICA+O1xuXG4gIHByb21wdHMub3ZlcnJpZGUoe1xuICAgIG92ZXJ3cml0ZTogYXJndi5vdmVyd3JpdGUsXG4gIH0pO1xuXG4gIHRyeSB7XG4gICAgcmVzdWx0ID0gYXdhaXQgcHJvbXB0cyhcbiAgICAgIFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IGFyZ1RhcmdldERpciA/IG51bGwgOiAndGV4dCcsXG4gICAgICAgICAgbmFtZTogJ3Byb2plY3ROYW1lJyxcbiAgICAgICAgICBtZXNzYWdlOiByZXNldCgnUHJvamVjdCBuYW1lOicpLFxuICAgICAgICAgIGluaXRpYWw6IGRlZmF1bHRUYXJnZXREaXIsXG4gICAgICAgICAgb25TdGF0ZTogKHN0YXRlKSA9PiB7XG4gICAgICAgICAgICB0YXJnZXREaXIgPSBmb3JtYXRUYXJnZXREaXIoc3RhdGUudmFsdWUpIHx8IGRlZmF1bHRUYXJnZXREaXI7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6ICgpID0+ICghZnMuZXhpc3RzU3luYyh0YXJnZXREaXIpIHx8IGlzRW1wdHkodGFyZ2V0RGlyKSA/IG51bGwgOiAnc2VsZWN0JyksXG4gICAgICAgICAgbmFtZTogJ292ZXJ3cml0ZScsXG4gICAgICAgICAgbWVzc2FnZTogKCkgPT5cbiAgICAgICAgICAgICh0YXJnZXREaXIgPT09ICcuJyA/ICdDdXJyZW50IGRpcmVjdG9yeScgOiBgVGFyZ2V0IGRpcmVjdG9yeSBcIiR7dGFyZ2V0RGlyfVwiYCkgK1xuICAgICAgICAgICAgYCBpcyBub3QgZW1wdHkuIFBsZWFzZSBjaG9vc2UgaG93IHRvIHByb2NlZWQ6YCxcbiAgICAgICAgICBpbml0aWFsOiAwLFxuICAgICAgICAgIGNob2ljZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdGl0bGU6ICdSZW1vdmUgZXhpc3RpbmcgZmlsZXMgYW5kIGNvbnRpbnVlJyxcbiAgICAgICAgICAgICAgdmFsdWU6ICd5ZXMnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdGl0bGU6ICdDYW5jZWwgb3BlcmF0aW9uJyxcbiAgICAgICAgICAgICAgdmFsdWU6ICdubycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0aXRsZTogJ0lnbm9yZSBmaWxlcyBhbmQgY29udGludWUnLFxuICAgICAgICAgICAgICB2YWx1ZTogJ2lnbm9yZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiAoXywgeyBvdmVyd3JpdGUgfTogeyBvdmVyd3JpdGU/OiBzdHJpbmcgfSkgPT4ge1xuICAgICAgICAgICAgaWYgKG92ZXJ3cml0ZSA9PT0gJ25vJykge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVkKCdcdTI3MTYnKSArICcgT3BlcmF0aW9uIGNhbmNlbGxlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBuYW1lOiAnb3ZlcndyaXRlQ2hlY2tlcicsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiAoKSA9PiAoaXNWYWxpZFBhY2thZ2VOYW1lKGdldFByb2plY3ROYW1lKCkpID8gbnVsbCA6ICd0ZXh0JyksXG4gICAgICAgICAgbmFtZTogJ3BhY2thZ2VOYW1lJyxcbiAgICAgICAgICBtZXNzYWdlOiByZXNldCgnUGFja2FnZSBuYW1lOicpLFxuICAgICAgICAgIGluaXRpYWw6ICgpID0+IHRvVmFsaWRQYWNrYWdlTmFtZShnZXRQcm9qZWN0TmFtZSgpKSxcbiAgICAgICAgICB2YWxpZGF0ZTogKGRpcikgPT4gaXNWYWxpZFBhY2thZ2VOYW1lKGRpcikgfHwgJ0ludmFsaWQgbmFtZScsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBhcmdUZW1wbGF0ZSAmJiB0ZW1wbGF0ZXMoZnJhbWV3b3JrcykuaW5jbHVkZXMoYXJnVGVtcGxhdGUpID8gbnVsbCA6ICdzZWxlY3QnLFxuICAgICAgICAgIG5hbWU6ICdmcmFtZXdvcmsnLFxuICAgICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgICB0eXBlb2YgYXJnVGVtcGxhdGUgPT09ICdzdHJpbmcnICYmICF0ZW1wbGF0ZXMoZnJhbWV3b3JrcykuaW5jbHVkZXMoYXJnVGVtcGxhdGUpXG4gICAgICAgICAgICAgID8gcmVzZXQoYFwiJHthcmdUZW1wbGF0ZX1cIiBpc24ndCBhIHZhbGlkIHRlbXBsYXRlLiBQbGVhc2UgY2hvb3NlIGZyb20gYmVsb3c6IGApXG4gICAgICAgICAgICAgIDogcmVzZXQoJ1NlbGVjdCBhIGZyYW1ld29yazonKSxcbiAgICAgICAgICBpbml0aWFsOiAwLFxuICAgICAgICAgIGNob2ljZXM6IGZyYW1ld29ya3MubWFwKChmcmFtZXdvcmspID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZyYW1ld29ya0NvbG9yID0gZnJhbWV3b3JrLmNvbG9yO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgdGl0bGU6IGZyYW1ld29ya0NvbG9yKGZyYW1ld29yay5kaXNwbGF5IHx8IGZyYW1ld29yay5yZXBvKSxcbiAgICAgICAgICAgICAgdmFsdWU6IGZyYW1ld29yayxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSksXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiAoZnJhbWV3b3JrOiBGcmFtZXdvcmspID0+IChmcmFtZXdvcmsgJiYgZnJhbWV3b3JrLnZhcmlhbnRzID8gJ3NlbGVjdCcgOiBudWxsKSxcbiAgICAgICAgICBuYW1lOiAndmFyaWFudCcsXG4gICAgICAgICAgbWVzc2FnZTogcmVzZXQoJ1NlbGVjdCBhIHZhcmlhbnQ6JyksXG4gICAgICAgICAgY2hvaWNlczogKGZyYW1ld29yazogRnJhbWV3b3JrKSA9PlxuICAgICAgICAgICAgZnJhbWV3b3JrLnZhcmlhbnRzLm1hcCgodmFyaWFudCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCB2YXJpYW50Q29sb3IgPSB2YXJpYW50LmNvbG9yO1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRpdGxlOiB2YXJpYW50Q29sb3IodmFyaWFudC5kaXNwbGF5KSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFyaWFudC5icmFuY2gsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICB7XG4gICAgICAgIG9uQ2FuY2VsOiAoKSA9PiB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlZCgnXHUyNzE2JykgKyAnIE9wZXJhdGlvbiBjYW5jZWxsZWQnKTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgKTtcbiAgfSBjYXRjaCAoY2FuY2VsbGVkKSB7XG4gICAgY29uc29sZS5sb2coY2FuY2VsbGVkLm1lc3NhZ2UpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIHVzZXIgY2hvaWNlIGFzc29jaWF0ZWQgd2l0aCBwcm9tcHRzXG4gIGNvbnN0IHsgb3ZlcndyaXRlLCBwYWNrYWdlTmFtZSwgdmFyaWFudDogYnJhbmNoIH0gPSByZXN1bHQgYXMgQ2hvaWNlO1xuICBjb25zdCB7IGZyYW1ld29yaywgdmFyaWFudCB9ID0gZ2V0VmFyaWFudChmcmFtZXdvcmtzLCBicmFuY2ggfHwgYXJnVGVtcGxhdGUpO1xuXG4gIGlmICghZnJhbWV3b3JrIHx8ICF2YXJpYW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHZhcmlhbnQ6ICR7dmFyaWFudH1gKTtcbiAgfVxuXG4gIGNvbnN0IHsgcm06IGV4Y2x1ZGVGaWxlcywgdHlwZSwgZGV2Q29tbWFuZCwgYnJhbmNoOiB2YXJpYW50QnJhbmNoIH0gPSB2YXJpYW50O1xuXG4gIGlmICghdHlwZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBvciBtaXNzaW5nIHByb2plY3QgdHlwZWApO1xuICB9XG5cbiAgaWYgKCF2YXJpYW50QnJhbmNoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIG9yIG1pc3NpbmcgdmFyaWFudCBicmFuY2hgKTtcbiAgfVxuXG4gIGNvbnN0IHJvb3QgPSBwYXRoLmpvaW4oY3dkLCB0YXJnZXREaXIpO1xuXG4gIGlmIChvdmVyd3JpdGUgPT09ICd5ZXMnKSB7XG4gICAgZW1wdHlEaXIocm9vdCk7XG4gIH0gZWxzZSBpZiAoIWZzLmV4aXN0c1N5bmMocm9vdCkpIHtcbiAgICBmcy5ta2RpclN5bmMocm9vdCwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gIH1cblxuICBjb25zb2xlLmxvZyhgXFxuQ3JlYXRpbmcgcHJvamVjdCBpbiAke3Jvb3R9Li4uYCk7XG5cbiAgY29uc3QgdGVtcGxhdGVEaXIgPSBhd2FpdCBkb3dubG9hZEFuZEV4dHJhY3RaaXAoZnJhbWV3b3JrLCB2YXJpYW50QnJhbmNoKTtcblxuICBjb25zdCB3cml0ZSA9IChmaWxlOiBzdHJpbmcsIGNvbnRlbnQ/OiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCB0YXJnZXRQYXRoID0gcGF0aC5qb2luKHJvb3QsIHJlbmFtZUZpbGVzW2ZpbGVdID8/IGZpbGUpO1xuICAgIGlmIChjb250ZW50KSB7XG4gICAgICBmcy53cml0ZUZpbGVTeW5jKHRhcmdldFBhdGgsIGNvbnRlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb3B5KHBhdGguam9pbih0ZW1wbGF0ZURpciwgZmlsZSksIHRhcmdldFBhdGgpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBmaWxlcyA9IGZzLnJlYWRkaXJTeW5jKHRlbXBsYXRlRGlyKTtcbiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzLmZpbHRlcihcbiAgICAoZikgPT5cbiAgICAgIGYgIT09ICdSRUFETUUubWQnICYmXG4gICAgICBmICE9PSAnTElDRU5TRScgJiZcbiAgICAgIGYgIT09ICdMSUNFTlNFLm1kJyAmJlxuICAgICAgZXhjbHVkZUZpbGVzICYmXG4gICAgICAhZXhjbHVkZUZpbGVzLmluY2x1ZGVzKGYpLFxuICApKSB7XG4gICAgd3JpdGUoZmlsZSk7XG4gIH1cblxuICBjb25zdCBwcm9qZWN0ID0gZ2V0UHJvamVjdCh0eXBlLCByb290KTtcbiAgaWYgKCFwcm9qZWN0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHByb2plY3QgdHlwZTogJHt2YXJpYW50LnR5cGV9YCk7XG4gIH1cblxuICBhd2FpdCBwcm9qZWN0LnNldFByb2plY3QocGFja2FnZU5hbWUgfHwgZ2V0UHJvamVjdE5hbWUoKSk7XG4gIHdyaXRlRmlsZVN5bmMocGF0aC5qb2luKHJvb3QsICdSRUFETUUubWQnKSwgYXdhaXQgZ2VuZXJhdGVSZWFkbWUodmFyaWFudCkpO1xuXG4gIHNhbml0aXplKHBhdGguam9pbihyb290LCAnLmdpdGlnbm9yZScpLCAnIyMjICtDU0EtT01JVCAjIyMnLCAnIyMjIC1DU0EtT01JVCAjIyMnKTtcblxuICBjb25zdCBpbnN0YWxsQ29tbWFuZHMgPSBhd2FpdCBwcm9qZWN0Lmluc3RhbGxDb21tYW5kcztcbiAgaWYgKGluc3RhbGxDb21tYW5kcykge1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgaW5zdGFsbENvbW1hbmRzLmNvbW1hbmRzLm1hcCgoY29tbWFuZCkgPT4ge1xuICAgICAgICBjb25zdCB3b3JraW5nRGlyZWN0b3J5ID0gam9pbihyb290LCBjb21tYW5kLndvcmtkaXIgfHwgJy4nKTtcbiAgICAgICAgY29uc29sZS5sb2coYEluc3RhbGxpbmcgZGVwZW5kZW5jaWVzIHVzaW5nIFxcYCR7Y29tbWFuZC5jbWR9XFxgIGluICR7d29ya2luZ0RpcmVjdG9yeX0uLi5gKTtcbiAgICAgICAgcmV0dXJuIGV4ZWMod29ya2luZ0RpcmVjdG9yeSwgY29tbWFuZC5jbWQuc3BsaXQoJyAnKSk7XG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgY29uc29sZS5sb2coYGApO1xuICBjb25zb2xlLmxvZyhgSW5pdGlhbGl6aW5nIGdpdCBpbiAke3Jvb3R9Li4uYCk7XG4gIGNvbnN0IGdpdCA9IHNpbXBsZUdpdChyb290KTtcbiAgYXdhaXQgZ2l0LmluaXQoeyAnLS1pbml0aWFsLWJyYW5jaCc6ICdtYWluJyB9KTtcbiAgYXdhaXQgZ2l0LmFkZCgnLicpO1xuICBhd2FpdCBnaXQuY29tbWl0KCdJbml0aWFsIGNvbW1pdCcpO1xuXG4gIGNvbnN0IGNkUHJvamVjdE5hbWUgPSBwYXRoLnJlbGF0aXZlKGN3ZCwgcm9vdCk7XG4gIGNvbnNvbGUubG9nKGBgKTtcbiAgY29uc29sZS5sb2coYFx1MjcyOCBEb25lLiBCZWdpbiBkZXZlbG9wbWVudCB3aXRoIHRoZSBmb2xsb3dpbmcgY29tbWFuZHM6YCk7XG4gIGNvbnNvbGUubG9nKGBgKTtcbiAgaWYgKHJvb3QgIT09IGN3ZCkge1xuICAgIGNvbnNvbGUubG9nKGAgICAgY2QgJHtjZFByb2plY3ROYW1lLmluY2x1ZGVzKCcgJykgPyBgXCIke2NkUHJvamVjdE5hbWV9XCJgIDogY2RQcm9qZWN0TmFtZX1gKTtcbiAgfVxuICBjb25zb2xlLmxvZyhgICAgICR7ZGV2Q29tbWFuZH1gKTtcbiAgY29uc29sZS5sb2coYGApO1xuICBjb25zb2xlLmxvZyhgUHVzaCB0aGlzIHJlcG9zaXRvcnkgdG8gR2l0SHViOmApO1xuICBjb25zb2xlLmxvZyhgYCk7XG4gIGNvbnNvbGUubG9nKGAgICAgMSkgQ3JlYXRlIGEgbmV3IHJlcG9zaXRvcnkgb24gR2l0SHViYCk7XG4gIGNvbnNvbGUubG9nKGAgICAgMikgUnVuOiBcXGBnaXQgcmVtb3RlIGFkZCBvcmlnaW4gPHJlcG9zaXRvcnktdXJsPlxcYGApO1xuICBjb25zb2xlLmxvZyhgICAgIDMpIFJ1bjogXFxgZ2l0IHB1c2ggLXUgb3JpZ2luIG1haW5cXGBgKTtcbiAgY29uc29sZS5sb2coYGApO1xuICBjb25zb2xlLmxvZyhgU2NhZmZvbGRseSBjYW4gcGFja2FnZSBhbmQgZGVwbG95IHlvdXIgYXBwbGljYXRpb246YCk7XG4gIGNvbnNvbGUubG9nKGBgKTtcbiAgY29uc29sZS5sb2coYCAgICAxKSBSdW46IFxcYG5weCBzY2FmZm9sZGx5IGRlcGxveVxcYGApO1xuICBjb25zb2xlLmxvZyhgYCk7XG4gIGNvbnNvbGUubG9nKGAgICAgXHVEODNEXHVEQ0ExIEEgXFxgZ2l0IHB1c2hcXGAgd2lsbCBhbHNvIHBhY2thZ2UgYW5kIGRlcGxveSB1c2luZyBHaXRIdWIgQWN0aW9ucyFgKTtcbiAgY29uc29sZS5sb2coYGApO1xuICBjb25zb2xlLmxvZyhgU2VlIG91ciBkb2N1bWVudGF0aW9uIGF0IGh0dHBzOi8vc2NhZmZvbGRseS5kZXYvZG9jc2ApO1xuICBjb25zb2xlLmxvZyhgYCk7XG4gIGNvbnNvbGUubG9nKGBcdUQ4M0RcdURFODAgSGFwcHkgY29kaW5nLCBhbmQgdGhhbmtzIGZvciB1c2luZyBTY2FmZm9sZGx5IWApO1xuICBjb25zb2xlLmxvZyhgYCk7XG59O1xuIiwgbnVsbCwgIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJndW1lbnRzKTtcbiAgfTtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBiaW5kIGZyb20gJy4vaGVscGVycy9iaW5kLmpzJztcblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxuY29uc3Qge3RvU3RyaW5nfSA9IE9iamVjdC5wcm90b3R5cGU7XG5jb25zdCB7Z2V0UHJvdG90eXBlT2Z9ID0gT2JqZWN0O1xuXG5jb25zdCBraW5kT2YgPSAoY2FjaGUgPT4gdGhpbmcgPT4ge1xuICAgIGNvbnN0IHN0ciA9IHRvU3RyaW5nLmNhbGwodGhpbmcpO1xuICAgIHJldHVybiBjYWNoZVtzdHJdIHx8IChjYWNoZVtzdHJdID0gc3RyLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpKTtcbn0pKE9iamVjdC5jcmVhdGUobnVsbCkpO1xuXG5jb25zdCBraW5kT2ZUZXN0ID0gKHR5cGUpID0+IHtcbiAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuICh0aGluZykgPT4ga2luZE9mKHRoaW5nKSA9PT0gdHlwZVxufVxuXG5jb25zdCB0eXBlT2ZUZXN0ID0gdHlwZSA9PiB0aGluZyA9PiB0eXBlb2YgdGhpbmcgPT09IHR5cGU7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCB7aXNBcnJheX0gPSBBcnJheTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1VuZGVmaW5lZCA9IHR5cGVPZlRlc3QoJ3VuZGVmaW5lZCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIGlzRnVuY3Rpb24odmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKSAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0FycmF5QnVmZmVyID0ga2luZE9mVGVzdCgnQXJyYXlCdWZmZXInKTtcblxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIGxldCByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKGlzQXJyYXlCdWZmZXIodmFsLmJ1ZmZlcikpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNTdHJpbmcgPSB0eXBlT2ZUZXN0KCdzdHJpbmcnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Z1bmN0aW9uID0gdHlwZU9mVGVzdCgnZnVuY3Rpb24nKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc051bWJlciA9IHR5cGVPZlRlc3QoJ251bWJlcicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc09iamVjdCA9ICh0aGluZykgPT4gdGhpbmcgIT09IG51bGwgJiYgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJvb2xlYW5cbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJvb2xlYW4sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Jvb2xlYW4gPSB0aGluZyA9PiB0aGluZyA9PT0gdHJ1ZSB8fCB0aGluZyA9PT0gZmFsc2U7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNQbGFpbk9iamVjdCA9ICh2YWwpID0+IHtcbiAgaWYgKGtpbmRPZih2YWwpICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiAocHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG90eXBlKSA9PT0gbnVsbCkgJiYgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsKSAmJiAhKFN5bWJvbC5pdGVyYXRvciBpbiB2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNEYXRlID0ga2luZE9mVGVzdCgnRGF0ZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGaWxlID0ga2luZE9mVGVzdCgnRmlsZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNCbG9iID0ga2luZE9mVGVzdCgnQmxvYicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZUxpc3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZUxpc3QgPSBraW5kT2ZUZXN0KCdGaWxlTGlzdCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzU3RyZWFtID0gKHZhbCkgPT4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGb3JtRGF0YSA9ICh0aGluZykgPT4ge1xuICBsZXQga2luZDtcbiAgcmV0dXJuIHRoaW5nICYmIChcbiAgICAodHlwZW9mIEZvcm1EYXRhID09PSAnZnVuY3Rpb24nICYmIHRoaW5nIGluc3RhbmNlb2YgRm9ybURhdGEpIHx8IChcbiAgICAgIGlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiAoXG4gICAgICAgIChraW5kID0ga2luZE9mKHRoaW5nKSkgPT09ICdmb3JtZGF0YScgfHxcbiAgICAgICAgLy8gZGV0ZWN0IGZvcm0tZGF0YSBpbnN0YW5jZVxuICAgICAgICAoa2luZCA9PT0gJ29iamVjdCcgJiYgaXNGdW5jdGlvbih0aGluZy50b1N0cmluZykgJiYgdGhpbmcudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgRm9ybURhdGFdJylcbiAgICAgIClcbiAgICApXG4gIClcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVVJMU2VhcmNoUGFyYW1zID0ga2luZE9mVGVzdCgnVVJMU2VhcmNoUGFyYW1zJyk7XG5cbmNvbnN0IFtpc1JlYWRhYmxlU3RyZWFtLCBpc1JlcXVlc3QsIGlzUmVzcG9uc2UsIGlzSGVhZGVyc10gPSBbJ1JlYWRhYmxlU3RyZWFtJywgJ1JlcXVlc3QnLCAnUmVzcG9uc2UnLCAnSGVhZGVycyddLm1hcChraW5kT2ZUZXN0KTtcblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuY29uc3QgdHJpbSA9IChzdHIpID0+IHN0ci50cmltID9cbiAgc3RyLnRyaW0oKSA6IHN0ci5yZXBsYWNlKC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZywgJycpO1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBbYWxsT3duS2V5cyA9IGZhbHNlXVxuICogQHJldHVybnMge2FueX1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuLCB7YWxsT3duS2V5cyA9IGZhbHNlfSA9IHt9KSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGk7XG4gIGxldCBsO1xuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yIChpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBjb25zdCBrZXlzID0gYWxsT3duS2V5cyA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikgOiBPYmplY3Qua2V5cyhvYmopO1xuICAgIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICAgIGxldCBrZXk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRLZXkob2JqLCBrZXkpIHtcbiAga2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICBsZXQgX2tleTtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBfa2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoa2V5ID09PSBfa2V5LnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIHJldHVybiBfa2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuY29uc3QgX2dsb2JhbCA9ICgoKSA9PiB7XG4gIC8qZXNsaW50IG5vLXVuZGVmOjAqL1xuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpIHJldHVybiBnbG9iYWxUaGlzO1xuICByZXR1cm4gdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKVxufSkoKTtcblxuY29uc3QgaXNDb250ZXh0RGVmaW5lZCA9IChjb250ZXh0KSA9PiAhaXNVbmRlZmluZWQoY29udGV4dCkgJiYgY29udGV4dCAhPT0gX2dsb2JhbDtcblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKlxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICBjb25zdCB7Y2FzZWxlc3N9ID0gaXNDb250ZXh0RGVmaW5lZCh0aGlzKSAmJiB0aGlzIHx8IHt9O1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgY29uc3QgYXNzaWduVmFsdWUgPSAodmFsLCBrZXkpID0+IHtcbiAgICBjb25zdCB0YXJnZXRLZXkgPSBjYXNlbGVzcyAmJiBmaW5kS2V5KHJlc3VsdCwga2V5KSB8fCBrZXk7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W3RhcmdldEtleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSBtZXJnZShyZXN1bHRbdGFyZ2V0S2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgYXJndW1lbnRzW2ldICYmIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXNdXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmNvbnN0IGV4dGVuZCA9IChhLCBiLCB0aGlzQXJnLCB7YWxsT3duS2V5c309IHt9KSA9PiB7XG4gIGZvckVhY2goYiwgKHZhbCwga2V5KSA9PiB7XG4gICAgaWYgKHRoaXNBcmcgJiYgaXNGdW5jdGlvbih2YWwpKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0sIHthbGxPd25LZXlzfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5jb25zdCBzdHJpcEJPTSA9IChjb250ZW50KSA9PiB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlclxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ29uc3RydWN0b3JcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcHJvcHNdXG4gKiBAcGFyYW0ge29iamVjdH0gW2Rlc2NyaXB0b3JzXVxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5jb25zdCBpbmhlcml0cyA9IChjb25zdHJ1Y3Rvciwgc3VwZXJDb25zdHJ1Y3RvciwgcHJvcHMsIGRlc2NyaXB0b3JzKSA9PiB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIGRlc2NyaXB0b3JzKTtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb25zdHJ1Y3RvciwgJ3N1cGVyJywge1xuICAgIHZhbHVlOiBzdXBlckNvbnN0cnVjdG9yLnByb3RvdHlwZVxuICB9KTtcbiAgcHJvcHMgJiYgT2JqZWN0LmFzc2lnbihjb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3BzKTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlIG9iamVjdCB3aXRoIGRlZXAgcHJvdG90eXBlIGNoYWluIHRvIGEgZmxhdCBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2VPYmogc291cmNlIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IFtkZXN0T2JqXVxuICogQHBhcmFtIHtGdW5jdGlvbnxCb29sZWFufSBbZmlsdGVyXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Byb3BGaWx0ZXJdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuY29uc3QgdG9GbGF0T2JqZWN0ID0gKHNvdXJjZU9iaiwgZGVzdE9iaiwgZmlsdGVyLCBwcm9wRmlsdGVyKSA9PiB7XG4gIGxldCBwcm9wcztcbiAgbGV0IGk7XG4gIGxldCBwcm9wO1xuICBjb25zdCBtZXJnZWQgPSB7fTtcblxuICBkZXN0T2JqID0gZGVzdE9iaiB8fCB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIGlmIChzb3VyY2VPYmogPT0gbnVsbCkgcmV0dXJuIGRlc3RPYmo7XG5cbiAgZG8ge1xuICAgIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc291cmNlT2JqKTtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICBwcm9wID0gcHJvcHNbaV07XG4gICAgICBpZiAoKCFwcm9wRmlsdGVyIHx8IHByb3BGaWx0ZXIocHJvcCwgc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgIW1lcmdlZFtwcm9wXSkge1xuICAgICAgICBkZXN0T2JqW3Byb3BdID0gc291cmNlT2JqW3Byb3BdO1xuICAgICAgICBtZXJnZWRbcHJvcF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3VyY2VPYmogPSBmaWx0ZXIgIT09IGZhbHNlICYmIGdldFByb3RvdHlwZU9mKHNvdXJjZU9iaik7XG4gIH0gd2hpbGUgKHNvdXJjZU9iaiAmJiAoIWZpbHRlciB8fCBmaWx0ZXIoc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgc291cmNlT2JqICE9PSBPYmplY3QucHJvdG90eXBlKTtcblxuICByZXR1cm4gZGVzdE9iajtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBzdHJpbmcgZW5kcyB3aXRoIHRoZSBjaGFyYWN0ZXJzIG9mIGEgc3BlY2lmaWVkIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWFyY2hTdHJpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb249IDBdXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGVuZHNXaXRoID0gKHN0ciwgc2VhcmNoU3RyaW5nLCBwb3NpdGlvbikgPT4ge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQgfHwgcG9zaXRpb24gPiBzdHIubGVuZ3RoKSB7XG4gICAgcG9zaXRpb24gPSBzdHIubGVuZ3RoO1xuICB9XG4gIHBvc2l0aW9uIC09IHNlYXJjaFN0cmluZy5sZW5ndGg7XG4gIGNvbnN0IGxhc3RJbmRleCA9IHN0ci5pbmRleE9mKHNlYXJjaFN0cmluZywgcG9zaXRpb24pO1xuICByZXR1cm4gbGFzdEluZGV4ICE9PSAtMSAmJiBsYXN0SW5kZXggPT09IHBvc2l0aW9uO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyBuZXcgYXJyYXkgZnJvbSBhcnJheSBsaWtlIG9iamVjdCBvciBudWxsIGlmIGZhaWxlZFxuICpcbiAqIEBwYXJhbSB7Kn0gW3RoaW5nXVxuICpcbiAqIEByZXR1cm5zIHs/QXJyYXl9XG4gKi9cbmNvbnN0IHRvQXJyYXkgPSAodGhpbmcpID0+IHtcbiAgaWYgKCF0aGluZykgcmV0dXJuIG51bGw7XG4gIGlmIChpc0FycmF5KHRoaW5nKSkgcmV0dXJuIHRoaW5nO1xuICBsZXQgaSA9IHRoaW5nLmxlbmd0aDtcbiAgaWYgKCFpc051bWJlcihpKSkgcmV0dXJuIG51bGw7XG4gIGNvbnN0IGFyciA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBhcnJbaV0gPSB0aGluZ1tpXTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG4vKipcbiAqIENoZWNraW5nIGlmIHRoZSBVaW50OEFycmF5IGV4aXN0cyBhbmQgaWYgaXQgZG9lcywgaXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmIHRoZVxuICogdGhpbmcgcGFzc2VkIGluIGlzIGFuIGluc3RhbmNlIG9mIFVpbnQ4QXJyYXlcbiAqXG4gKiBAcGFyYW0ge1R5cGVkQXJyYXl9XG4gKlxuICogQHJldHVybnMge0FycmF5fVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuY29uc3QgaXNUeXBlZEFycmF5ID0gKFR5cGVkQXJyYXkgPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gdGhpbmcgPT4ge1xuICAgIHJldHVybiBUeXBlZEFycmF5ICYmIHRoaW5nIGluc3RhbmNlb2YgVHlwZWRBcnJheTtcbiAgfTtcbn0pKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBnZXRQcm90b3R5cGVPZihVaW50OEFycmF5KSk7XG5cbi8qKlxuICogRm9yIGVhY2ggZW50cnkgaW4gdGhlIG9iamVjdCwgY2FsbCB0aGUgZnVuY3Rpb24gd2l0aCB0aGUga2V5IGFuZCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBlbnRyeS5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgZm9yRWFjaEVudHJ5ID0gKG9iaiwgZm4pID0+IHtcbiAgY29uc3QgZ2VuZXJhdG9yID0gb2JqICYmIG9ialtTeW1ib2wuaXRlcmF0b3JdO1xuXG4gIGNvbnN0IGl0ZXJhdG9yID0gZ2VuZXJhdG9yLmNhbGwob2JqKTtcblxuICBsZXQgcmVzdWx0O1xuXG4gIHdoaWxlICgocmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpKSAmJiAhcmVzdWx0LmRvbmUpIHtcbiAgICBjb25zdCBwYWlyID0gcmVzdWx0LnZhbHVlO1xuICAgIGZuLmNhbGwob2JqLCBwYWlyWzBdLCBwYWlyWzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgcmVndWxhciBleHByZXNzaW9uIGFuZCBhIHN0cmluZywgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgYWxsIHRoZSBtYXRjaGVzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJlZ0V4cCAtIFRoZSByZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggYWdhaW5zdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBUaGUgc3RyaW5nIHRvIHNlYXJjaC5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXk8Ym9vbGVhbj59XG4gKi9cbmNvbnN0IG1hdGNoQWxsID0gKHJlZ0V4cCwgc3RyKSA9PiB7XG4gIGxldCBtYXRjaGVzO1xuICBjb25zdCBhcnIgPSBbXTtcblxuICB3aGlsZSAoKG1hdGNoZXMgPSByZWdFeHAuZXhlYyhzdHIpKSAhPT0gbnVsbCkge1xuICAgIGFyci5wdXNoKG1hdGNoZXMpO1xuICB9XG5cbiAgcmV0dXJuIGFycjtcbn1cblxuLyogQ2hlY2tpbmcgaWYgdGhlIGtpbmRPZlRlc3QgZnVuY3Rpb24gcmV0dXJucyB0cnVlIHdoZW4gcGFzc2VkIGFuIEhUTUxGb3JtRWxlbWVudC4gKi9cbmNvbnN0IGlzSFRNTEZvcm0gPSBraW5kT2ZUZXN0KCdIVE1MRm9ybUVsZW1lbnQnKTtcblxuY29uc3QgdG9DYW1lbENhc2UgPSBzdHIgPT4ge1xuICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvWy1fXFxzXShbYS16XFxkXSkoXFx3KikvZyxcbiAgICBmdW5jdGlvbiByZXBsYWNlcihtLCBwMSwgcDIpIHtcbiAgICAgIHJldHVybiBwMS50b1VwcGVyQ2FzZSgpICsgcDI7XG4gICAgfVxuICApO1xufTtcblxuLyogQ3JlYXRpbmcgYSBmdW5jdGlvbiB0aGF0IHdpbGwgY2hlY2sgaWYgYW4gb2JqZWN0IGhhcyBhIHByb3BlcnR5LiAqL1xuY29uc3QgaGFzT3duUHJvcGVydHkgPSAoKHtoYXNPd25Qcm9wZXJ0eX0pID0+IChvYmosIHByb3ApID0+IGhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkoT2JqZWN0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1JlZ0V4cCA9IGtpbmRPZlRlc3QoJ1JlZ0V4cCcpO1xuXG5jb25zdCByZWR1Y2VEZXNjcmlwdG9ycyA9IChvYmosIHJlZHVjZXIpID0+IHtcbiAgY29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmopO1xuICBjb25zdCByZWR1Y2VkRGVzY3JpcHRvcnMgPSB7fTtcblxuICBmb3JFYWNoKGRlc2NyaXB0b3JzLCAoZGVzY3JpcHRvciwgbmFtZSkgPT4ge1xuICAgIGxldCByZXQ7XG4gICAgaWYgKChyZXQgPSByZWR1Y2VyKGRlc2NyaXB0b3IsIG5hbWUsIG9iaikpICE9PSBmYWxzZSkge1xuICAgICAgcmVkdWNlZERlc2NyaXB0b3JzW25hbWVdID0gcmV0IHx8IGRlc2NyaXB0b3I7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvYmosIHJlZHVjZWREZXNjcmlwdG9ycyk7XG59XG5cbi8qKlxuICogTWFrZXMgYWxsIG1ldGhvZHMgcmVhZC1vbmx5XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKi9cblxuY29uc3QgZnJlZXplTWV0aG9kcyA9IChvYmopID0+IHtcbiAgcmVkdWNlRGVzY3JpcHRvcnMob2JqLCAoZGVzY3JpcHRvciwgbmFtZSkgPT4ge1xuICAgIC8vIHNraXAgcmVzdHJpY3RlZCBwcm9wcyBpbiBzdHJpY3QgbW9kZVxuICAgIGlmIChpc0Z1bmN0aW9uKG9iaikgJiYgWydhcmd1bWVudHMnLCAnY2FsbGVyJywgJ2NhbGxlZSddLmluZGV4T2YobmFtZSkgIT09IC0xKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsdWUgPSBvYmpbbmFtZV07XG5cbiAgICBpZiAoIWlzRnVuY3Rpb24odmFsdWUpKSByZXR1cm47XG5cbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBmYWxzZTtcblxuICAgIGlmICgnd3JpdGFibGUnIGluIGRlc2NyaXB0b3IpIHtcbiAgICAgIGRlc2NyaXB0b3Iud3JpdGFibGUgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWRlc2NyaXB0b3Iuc2V0KSB7XG4gICAgICBkZXNjcmlwdG9yLnNldCA9ICgpID0+IHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0NhbiBub3QgcmV3cml0ZSByZWFkLW9ubHkgbWV0aG9kIFxcJycgKyBuYW1lICsgJ1xcJycpO1xuICAgICAgfTtcbiAgICB9XG4gIH0pO1xufVxuXG5jb25zdCB0b09iamVjdFNldCA9IChhcnJheU9yU3RyaW5nLCBkZWxpbWl0ZXIpID0+IHtcbiAgY29uc3Qgb2JqID0ge307XG5cbiAgY29uc3QgZGVmaW5lID0gKGFycikgPT4ge1xuICAgIGFyci5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgIG9ialt2YWx1ZV0gPSB0cnVlO1xuICAgIH0pO1xuICB9XG5cbiAgaXNBcnJheShhcnJheU9yU3RyaW5nKSA/IGRlZmluZShhcnJheU9yU3RyaW5nKSA6IGRlZmluZShTdHJpbmcoYXJyYXlPclN0cmluZykuc3BsaXQoZGVsaW1pdGVyKSk7XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuY29uc3Qgbm9vcCA9ICgpID0+IHt9XG5cbmNvbnN0IHRvRmluaXRlTnVtYmVyID0gKHZhbHVlLCBkZWZhdWx0VmFsdWUpID0+IHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgTnVtYmVyLmlzRmluaXRlKHZhbHVlID0gK3ZhbHVlKSA/IHZhbHVlIDogZGVmYXVsdFZhbHVlO1xufVxuXG5jb25zdCBBTFBIQSA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eidcblxuY29uc3QgRElHSVQgPSAnMDEyMzQ1Njc4OSc7XG5cbmNvbnN0IEFMUEhBQkVUID0ge1xuICBESUdJVCxcbiAgQUxQSEEsXG4gIEFMUEhBX0RJR0lUOiBBTFBIQSArIEFMUEhBLnRvVXBwZXJDYXNlKCkgKyBESUdJVFxufVxuXG5jb25zdCBnZW5lcmF0ZVN0cmluZyA9IChzaXplID0gMTYsIGFscGhhYmV0ID0gQUxQSEFCRVQuQUxQSEFfRElHSVQpID0+IHtcbiAgbGV0IHN0ciA9ICcnO1xuICBjb25zdCB7bGVuZ3RofSA9IGFscGhhYmV0O1xuICB3aGlsZSAoc2l6ZS0tKSB7XG4gICAgc3RyICs9IGFscGhhYmV0W01hdGgucmFuZG9tKCkgKiBsZW5ndGh8MF1cbiAgfVxuXG4gIHJldHVybiBzdHI7XG59XG5cbi8qKlxuICogSWYgdGhlIHRoaW5nIGlzIGEgRm9ybURhdGEgb2JqZWN0LCByZXR1cm4gdHJ1ZSwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IHRoaW5nIC0gVGhlIHRoaW5nIHRvIGNoZWNrLlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1NwZWNDb21wbGlhbnRGb3JtKHRoaW5nKSB7XG4gIHJldHVybiAhISh0aGluZyAmJiBpc0Z1bmN0aW9uKHRoaW5nLmFwcGVuZCkgJiYgdGhpbmdbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ0Zvcm1EYXRhJyAmJiB0aGluZ1tTeW1ib2wuaXRlcmF0b3JdKTtcbn1cblxuY29uc3QgdG9KU09OT2JqZWN0ID0gKG9iaikgPT4ge1xuICBjb25zdCBzdGFjayA9IG5ldyBBcnJheSgxMCk7XG5cbiAgY29uc3QgdmlzaXQgPSAoc291cmNlLCBpKSA9PiB7XG5cbiAgICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgaWYgKHN0YWNrLmluZGV4T2Yoc291cmNlKSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYoISgndG9KU09OJyBpbiBzb3VyY2UpKSB7XG4gICAgICAgIHN0YWNrW2ldID0gc291cmNlO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBpc0FycmF5KHNvdXJjZSkgPyBbXSA6IHt9O1xuXG4gICAgICAgIGZvckVhY2goc291cmNlLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlZHVjZWRWYWx1ZSA9IHZpc2l0KHZhbHVlLCBpICsgMSk7XG4gICAgICAgICAgIWlzVW5kZWZpbmVkKHJlZHVjZWRWYWx1ZSkgJiYgKHRhcmdldFtrZXldID0gcmVkdWNlZFZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RhY2tbaV0gPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgcmV0dXJuIHZpc2l0KG9iaiwgMCk7XG59XG5cbmNvbnN0IGlzQXN5bmNGbiA9IGtpbmRPZlRlc3QoJ0FzeW5jRnVuY3Rpb24nKTtcblxuY29uc3QgaXNUaGVuYWJsZSA9ICh0aGluZykgPT5cbiAgdGhpbmcgJiYgKGlzT2JqZWN0KHRoaW5nKSB8fCBpc0Z1bmN0aW9uKHRoaW5nKSkgJiYgaXNGdW5jdGlvbih0aGluZy50aGVuKSAmJiBpc0Z1bmN0aW9uKHRoaW5nLmNhdGNoKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nLFxuICBpc051bWJlcixcbiAgaXNCb29sZWFuLFxuICBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdCxcbiAgaXNSZWFkYWJsZVN0cmVhbSxcbiAgaXNSZXF1ZXN0LFxuICBpc1Jlc3BvbnNlLFxuICBpc0hlYWRlcnMsXG4gIGlzVW5kZWZpbmVkLFxuICBpc0RhdGUsXG4gIGlzRmlsZSxcbiAgaXNCbG9iLFxuICBpc1JlZ0V4cCxcbiAgaXNGdW5jdGlvbixcbiAgaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1R5cGVkQXJyYXksXG4gIGlzRmlsZUxpc3QsXG4gIGZvckVhY2gsXG4gIG1lcmdlLFxuICBleHRlbmQsXG4gIHRyaW0sXG4gIHN0cmlwQk9NLFxuICBpbmhlcml0cyxcbiAgdG9GbGF0T2JqZWN0LFxuICBraW5kT2YsXG4gIGtpbmRPZlRlc3QsXG4gIGVuZHNXaXRoLFxuICB0b0FycmF5LFxuICBmb3JFYWNoRW50cnksXG4gIG1hdGNoQWxsLFxuICBpc0hUTUxGb3JtLFxuICBoYXNPd25Qcm9wZXJ0eSxcbiAgaGFzT3duUHJvcDogaGFzT3duUHJvcGVydHksIC8vIGFuIGFsaWFzIHRvIGF2b2lkIEVTTGludCBuby1wcm90b3R5cGUtYnVpbHRpbnMgZGV0ZWN0aW9uXG4gIHJlZHVjZURlc2NyaXB0b3JzLFxuICBmcmVlemVNZXRob2RzLFxuICB0b09iamVjdFNldCxcbiAgdG9DYW1lbENhc2UsXG4gIG5vb3AsXG4gIHRvRmluaXRlTnVtYmVyLFxuICBmaW5kS2V5LFxuICBnbG9iYWw6IF9nbG9iYWwsXG4gIGlzQ29udGV4dERlZmluZWQsXG4gIEFMUEhBQkVULFxuICBnZW5lcmF0ZVN0cmluZyxcbiAgaXNTcGVjQ29tcGxpYW50Rm9ybSxcbiAgdG9KU09OT2JqZWN0LFxuICBpc0FzeW5jRm4sXG4gIGlzVGhlbmFibGVcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZ10gVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQXhpb3NFcnJvcihtZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIEVycm9yLmNhbGwodGhpcyk7XG5cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IoKSkuc3RhY2s7XG4gIH1cblxuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLm5hbWUgPSAnQXhpb3NFcnJvcic7XG4gIGNvZGUgJiYgKHRoaXMuY29kZSA9IGNvZGUpO1xuICBjb25maWcgJiYgKHRoaXMuY29uZmlnID0gY29uZmlnKTtcbiAgcmVxdWVzdCAmJiAodGhpcy5yZXF1ZXN0ID0gcmVxdWVzdCk7XG4gIHJlc3BvbnNlICYmICh0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2UpO1xufVxuXG51dGlscy5pbmhlcml0cyhBeGlvc0Vycm9yLCBFcnJvciwge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB1dGlscy50b0pTT05PYmplY3QodGhpcy5jb25maWcpLFxuICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgc3RhdHVzOiB0aGlzLnJlc3BvbnNlICYmIHRoaXMucmVzcG9uc2Uuc3RhdHVzID8gdGhpcy5yZXNwb25zZS5zdGF0dXMgOiBudWxsXG4gICAgfTtcbiAgfVxufSk7XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zRXJyb3IucHJvdG90eXBlO1xuY29uc3QgZGVzY3JpcHRvcnMgPSB7fTtcblxuW1xuICAnRVJSX0JBRF9PUFRJT05fVkFMVUUnLFxuICAnRVJSX0JBRF9PUFRJT04nLFxuICAnRUNPTk5BQk9SVEVEJyxcbiAgJ0VUSU1FRE9VVCcsXG4gICdFUlJfTkVUV09SSycsXG4gICdFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTJyxcbiAgJ0VSUl9ERVBSRUNBVEVEJyxcbiAgJ0VSUl9CQURfUkVTUE9OU0UnLFxuICAnRVJSX0JBRF9SRVFVRVNUJyxcbiAgJ0VSUl9DQU5DRUxFRCcsXG4gICdFUlJfTk9UX1NVUFBPUlQnLFxuICAnRVJSX0lOVkFMSURfVVJMJ1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbl0uZm9yRWFjaChjb2RlID0+IHtcbiAgZGVzY3JpcHRvcnNbY29kZV0gPSB7dmFsdWU6IGNvZGV9O1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEF4aW9zRXJyb3IsIGRlc2NyaXB0b3JzKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsICdpc0F4aW9zRXJyb3InLCB7dmFsdWU6IHRydWV9KTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbkF4aW9zRXJyb3IuZnJvbSA9IChlcnJvciwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSwgY3VzdG9tUHJvcHMpID0+IHtcbiAgY29uc3QgYXhpb3NFcnJvciA9IE9iamVjdC5jcmVhdGUocHJvdG90eXBlKTtcblxuICB1dGlscy50b0ZsYXRPYmplY3QoZXJyb3IsIGF4aW9zRXJyb3IsIGZ1bmN0aW9uIGZpbHRlcihvYmopIHtcbiAgICByZXR1cm4gb2JqICE9PSBFcnJvci5wcm90b3R5cGU7XG4gIH0sIHByb3AgPT4ge1xuICAgIHJldHVybiBwcm9wICE9PSAnaXNBeGlvc0Vycm9yJztcbiAgfSk7XG5cbiAgQXhpb3NFcnJvci5jYWxsKGF4aW9zRXJyb3IsIGVycm9yLm1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpO1xuXG4gIGF4aW9zRXJyb3IuY2F1c2UgPSBlcnJvcjtcblxuICBheGlvc0Vycm9yLm5hbWUgPSBlcnJvci5uYW1lO1xuXG4gIGN1c3RvbVByb3BzICYmIE9iamVjdC5hc3NpZ24oYXhpb3NFcnJvciwgY3VzdG9tUHJvcHMpO1xuXG4gIHJldHVybiBheGlvc0Vycm9yO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NFcnJvcjtcbiIsICJpbXBvcnQgRm9ybURhdGEgZnJvbSAnZm9ybS1kYXRhJztcblxuZXhwb3J0IGRlZmF1bHQgRm9ybURhdGE7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbi8vIHRlbXBvcmFyeSBob3RmaXggdG8gYXZvaWQgY2lyY3VsYXIgcmVmZXJlbmNlcyB1bnRpbCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBpcyByZWZhY3RvcmVkXG5pbXBvcnQgUGxhdGZvcm1Gb3JtRGF0YSBmcm9tICcuLi9wbGF0Zm9ybS9ub2RlL2NsYXNzZXMvRm9ybURhdGEuanMnO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGdpdmVuIHRoaW5nIGlzIGEgYXJyYXkgb3IganMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0aGluZyAtIFRoZSBvYmplY3Qgb3IgYXJyYXkgdG8gYmUgdmlzaXRlZC5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNWaXNpdGFibGUodGhpbmcpIHtcbiAgcmV0dXJuIHV0aWxzLmlzUGxhaW5PYmplY3QodGhpbmcpIHx8IHV0aWxzLmlzQXJyYXkodGhpbmcpO1xufVxuXG4vKipcbiAqIEl0IHJlbW92ZXMgdGhlIGJyYWNrZXRzIGZyb20gdGhlIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBwYXJhbWV0ZXIuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gdGhlIGtleSB3aXRob3V0IHRoZSBicmFja2V0cy5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQnJhY2tldHMoa2V5KSB7XG4gIHJldHVybiB1dGlscy5lbmRzV2l0aChrZXksICdbXScpID8ga2V5LnNsaWNlKDAsIC0yKSA6IGtleTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhdGgsIGEga2V5LCBhbmQgYSBib29sZWFuLCBhbmQgcmV0dXJucyBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgb2YgdGhlIGN1cnJlbnQgb2JqZWN0IGJlaW5nIGl0ZXJhdGVkIG92ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gZG90cyAtIElmIHRydWUsIHRoZSBrZXkgd2lsbCBiZSByZW5kZXJlZCB3aXRoIGRvdHMgaW5zdGVhZCBvZiBicmFja2V0cy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcGF0aCB0byB0aGUgY3VycmVudCBrZXkuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpIHtcbiAgaWYgKCFwYXRoKSByZXR1cm4ga2V5O1xuICByZXR1cm4gcGF0aC5jb25jYXQoa2V5KS5tYXAoZnVuY3Rpb24gZWFjaCh0b2tlbiwgaSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHRva2VuID0gcmVtb3ZlQnJhY2tldHModG9rZW4pO1xuICAgIHJldHVybiAhZG90cyAmJiBpID8gJ1snICsgdG9rZW4gKyAnXScgOiB0b2tlbjtcbiAgfSkuam9pbihkb3RzID8gJy4nIDogJycpO1xufVxuXG4vKipcbiAqIElmIHRoZSBhcnJheSBpcyBhbiBhcnJheSBhbmQgbm9uZSBvZiBpdHMgZWxlbWVudHMgYXJlIHZpc2l0YWJsZSwgdGhlbiBpdCdzIGEgZmxhdCBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjaGVja1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZsYXRBcnJheShhcnIpIHtcbiAgcmV0dXJuIHV0aWxzLmlzQXJyYXkoYXJyKSAmJiAhYXJyLnNvbWUoaXNWaXNpdGFibGUpO1xufVxuXG5jb25zdCBwcmVkaWNhdGVzID0gdXRpbHMudG9GbGF0T2JqZWN0KHV0aWxzLCB7fSwgbnVsbCwgZnVuY3Rpb24gZmlsdGVyKHByb3ApIHtcbiAgcmV0dXJuIC9eaXNbQS1aXS8udGVzdChwcm9wKTtcbn0pO1xuXG4vKipcbiAqIENvbnZlcnQgYSBkYXRhIG9iamVjdCB0byBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7P09iamVjdH0gW2Zvcm1EYXRhXVxuICogQHBhcmFtIHs/T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLnZpc2l0b3JdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm1ldGFUb2tlbnMgPSB0cnVlXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5kb3RzID0gZmFsc2VdXG4gKiBAcGFyYW0gez9Cb29sZWFufSBbb3B0aW9ucy5pbmRleGVzID0gZmFsc2VdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqKi9cblxuLyoqXG4gKiBJdCBjb252ZXJ0cyBhbiBvYmplY3QgaW50byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PGFueSwgYW55Pn0gb2JqIC0gVGhlIG9iamVjdCB0byBjb252ZXJ0IHRvIGZvcm0gZGF0YS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSAtIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gYXBwZW5kIHRvLlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zXG4gKlxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gdG9Gb3JtRGF0YShvYmosIGZvcm1EYXRhLCBvcHRpb25zKSB7XG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RhcmdldCBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGZvcm1EYXRhID0gZm9ybURhdGEgfHwgbmV3IChQbGF0Zm9ybUZvcm1EYXRhIHx8IEZvcm1EYXRhKSgpO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBvcHRpb25zID0gdXRpbHMudG9GbGF0T2JqZWN0KG9wdGlvbnMsIHtcbiAgICBtZXRhVG9rZW5zOiB0cnVlLFxuICAgIGRvdHM6IGZhbHNlLFxuICAgIGluZGV4ZXM6IGZhbHNlXG4gIH0sIGZhbHNlLCBmdW5jdGlvbiBkZWZpbmVkKG9wdGlvbiwgc291cmNlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gICAgcmV0dXJuICF1dGlscy5pc1VuZGVmaW5lZChzb3VyY2Vbb3B0aW9uXSk7XG4gIH0pO1xuXG4gIGNvbnN0IG1ldGFUb2tlbnMgPSBvcHRpb25zLm1ldGFUb2tlbnM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICBjb25zdCB2aXNpdG9yID0gb3B0aW9ucy52aXNpdG9yIHx8IGRlZmF1bHRWaXNpdG9yO1xuICBjb25zdCBkb3RzID0gb3B0aW9ucy5kb3RzO1xuICBjb25zdCBpbmRleGVzID0gb3B0aW9ucy5pbmRleGVzO1xuICBjb25zdCBfQmxvYiA9IG9wdGlvbnMuQmxvYiB8fCB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgQmxvYjtcbiAgY29uc3QgdXNlQmxvYiA9IF9CbG9iICYmIHV0aWxzLmlzU3BlY0NvbXBsaWFudEZvcm0oZm9ybURhdGEpO1xuXG4gIGlmICghdXRpbHMuaXNGdW5jdGlvbih2aXNpdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Zpc2l0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjb252ZXJ0VmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiAnJztcblxuICAgIGlmICh1dGlscy5pc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9JU09TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBpZiAoIXVzZUJsb2IgJiYgdXRpbHMuaXNCbG9iKHZhbHVlKSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ0Jsb2IgaXMgbm90IHN1cHBvcnRlZC4gVXNlIGEgQnVmZmVyIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIodmFsdWUpIHx8IHV0aWxzLmlzVHlwZWRBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB1c2VCbG9iICYmIHR5cGVvZiBCbG9iID09PSAnZnVuY3Rpb24nID8gbmV3IEJsb2IoW3ZhbHVlXSkgOiBCdWZmZXIuZnJvbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgdmlzaXRvci5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IGtleVxuICAgKiBAcGFyYW0ge0FycmF5PFN0cmluZ3xOdW1iZXI+fSBwYXRoXG4gICAqIEB0aGlzIHtGb3JtRGF0YX1cbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHJldHVybiB0cnVlIHRvIHZpc2l0IHRoZSBlYWNoIHByb3Agb2YgdGhlIHZhbHVlIHJlY3Vyc2l2ZWx5XG4gICAqL1xuICBmdW5jdGlvbiBkZWZhdWx0VmlzaXRvcih2YWx1ZSwga2V5LCBwYXRoKSB7XG4gICAgbGV0IGFyciA9IHZhbHVlO1xuXG4gICAgaWYgKHZhbHVlICYmICFwYXRoICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmICh1dGlscy5lbmRzV2l0aChrZXksICd7fScpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSBtZXRhVG9rZW5zID8ga2V5IDoga2V5LnNsaWNlKDAsIC0yKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgKHV0aWxzLmlzQXJyYXkodmFsdWUpICYmIGlzRmxhdEFycmF5KHZhbHVlKSkgfHxcbiAgICAgICAgKCh1dGlscy5pc0ZpbGVMaXN0KHZhbHVlKSB8fCB1dGlscy5lbmRzV2l0aChrZXksICdbXScpKSAmJiAoYXJyID0gdXRpbHMudG9BcnJheSh2YWx1ZSkpXG4gICAgICAgICkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGtleSA9IHJlbW92ZUJyYWNrZXRzKGtleSk7XG5cbiAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24gZWFjaChlbCwgaW5kZXgpIHtcbiAgICAgICAgICAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgZm9ybURhdGEuYXBwZW5kKFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgICAgICAgICBpbmRleGVzID09PSB0cnVlID8gcmVuZGVyS2V5KFtrZXldLCBpbmRleCwgZG90cykgOiAoaW5kZXhlcyA9PT0gbnVsbCA/IGtleSA6IGtleSArICdbXScpLFxuICAgICAgICAgICAgY29udmVydFZhbHVlKGVsKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzVmlzaXRhYmxlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZm9ybURhdGEuYXBwZW5kKHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpLCBjb252ZXJ0VmFsdWUodmFsdWUpKTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHN0YWNrID0gW107XG5cbiAgY29uc3QgZXhwb3NlZEhlbHBlcnMgPSBPYmplY3QuYXNzaWduKHByZWRpY2F0ZXMsIHtcbiAgICBkZWZhdWx0VmlzaXRvcixcbiAgICBjb252ZXJ0VmFsdWUsXG4gICAgaXNWaXNpdGFibGVcbiAgfSk7XG5cbiAgZnVuY3Rpb24gYnVpbGQodmFsdWUsIHBhdGgpIHtcbiAgICBpZiAodXRpbHMuaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG5cbiAgICBpZiAoc3RhY2suaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG4gICAgICB0aHJvdyBFcnJvcignQ2lyY3VsYXIgcmVmZXJlbmNlIGRldGVjdGVkIGluICcgKyBwYXRoLmpvaW4oJy4nKSk7XG4gICAgfVxuXG4gICAgc3RhY2sucHVzaCh2YWx1ZSk7XG5cbiAgICB1dGlscy5mb3JFYWNoKHZhbHVlLCBmdW5jdGlvbiBlYWNoKGVsLCBrZXkpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9ICEodXRpbHMuaXNVbmRlZmluZWQoZWwpIHx8IGVsID09PSBudWxsKSAmJiB2aXNpdG9yLmNhbGwoXG4gICAgICAgIGZvcm1EYXRhLCBlbCwgdXRpbHMuaXNTdHJpbmcoa2V5KSA/IGtleS50cmltKCkgOiBrZXksIHBhdGgsIGV4cG9zZWRIZWxwZXJzXG4gICAgICApO1xuXG4gICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgIGJ1aWxkKGVsLCBwYXRoID8gcGF0aC5jb25jYXQoa2V5KSA6IFtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHN0YWNrLnBvcCgpO1xuICB9XG5cbiAgaWYgKCF1dGlscy5pc09iamVjdChvYmopKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGF0YSBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgYnVpbGQob2JqKTtcblxuICByZXR1cm4gZm9ybURhdGE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvRm9ybURhdGE7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuXG4vKipcbiAqIEl0IGVuY29kZXMgYSBzdHJpbmcgYnkgcmVwbGFjaW5nIGFsbCBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCBpbiB0aGUgdW5yZXNlcnZlZCBzZXQgd2l0aFxuICogdGhlaXIgcGVyY2VudC1lbmNvZGVkIGVxdWl2YWxlbnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gZW5jb2RlLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHN0cikge1xuICBjb25zdCBjaGFyTWFwID0ge1xuICAgICchJzogJyUyMScsXG4gICAgXCInXCI6ICclMjcnLFxuICAgICcoJzogJyUyOCcsXG4gICAgJyknOiAnJTI5JyxcbiAgICAnfic6ICclN0UnLFxuICAgICclMjAnOiAnKycsXG4gICAgJyUwMCc6ICdcXHgwMCdcbiAgfTtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpfl18JTIwfCUwMC9nLCBmdW5jdGlvbiByZXBsYWNlcihtYXRjaCkge1xuICAgIHJldHVybiBjaGFyTWFwW21hdGNoXTtcbiAgfSk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXJhbXMgb2JqZWN0IGFuZCBjb252ZXJ0cyBpdCB0byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gcGFyYW1zIC0gVGhlIHBhcmFtZXRlcnMgdG8gYmUgY29udmVydGVkIHRvIGEgRm9ybURhdGEgb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB0byB0aGUgQXhpb3MgY29uc3RydWN0b3IuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykge1xuICB0aGlzLl9wYWlycyA9IFtdO1xuXG4gIHBhcmFtcyAmJiB0b0Zvcm1EYXRhKHBhcmFtcywgdGhpcywgb3B0aW9ucyk7XG59XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZTtcblxucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZChuYW1lLCB2YWx1ZSkge1xuICB0aGlzLl9wYWlycy5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xufTtcblxucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoZW5jb2Rlcikge1xuICBjb25zdCBfZW5jb2RlID0gZW5jb2RlciA/IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGVuY29kZXIuY2FsbCh0aGlzLCB2YWx1ZSwgZW5jb2RlKTtcbiAgfSA6IGVuY29kZTtcblxuICByZXR1cm4gdGhpcy5fcGFpcnMubWFwKGZ1bmN0aW9uIGVhY2gocGFpcikge1xuICAgIHJldHVybiBfZW5jb2RlKHBhaXJbMF0pICsgJz0nICsgX2VuY29kZShwYWlyWzFdKTtcbiAgfSwgJycpLmpvaW4oJyYnKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zVVJMU2VhcmNoUGFyYW1zO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBmcm9tICcuLi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzJztcblxuLyoqXG4gKiBJdCByZXBsYWNlcyBhbGwgaW5zdGFuY2VzIG9mIHRoZSBjaGFyYWN0ZXJzIGA6YCwgYCRgLCBgLGAsIGArYCwgYFtgLCBhbmQgYF1gIHdpdGggdGhlaXJcbiAqIFVSSSBlbmNvZGVkIGNvdW50ZXJwYXJ0c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWwgVGhlIHZhbHVlIHRvIGJlIGVuY29kZWQuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGVuY29kZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcGFyYW0gez9vYmplY3R9IG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgb3B0aW9ucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIFxuICBjb25zdCBfZW5jb2RlID0gb3B0aW9ucyAmJiBvcHRpb25zLmVuY29kZSB8fCBlbmNvZGU7XG5cbiAgY29uc3Qgc2VyaWFsaXplRm4gPSBvcHRpb25zICYmIG9wdGlvbnMuc2VyaWFsaXplO1xuXG4gIGxldCBzZXJpYWxpemVkUGFyYW1zO1xuXG4gIGlmIChzZXJpYWxpemVGbikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBzZXJpYWxpemVGbihwYXJhbXMsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSB1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpID9cbiAgICAgIHBhcmFtcy50b1N0cmluZygpIDpcbiAgICAgIG5ldyBBeGlvc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMsIG9wdGlvbnMpLnRvU3RyaW5nKF9lbmNvZGUpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICBjb25zdCBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoXCIjXCIpO1xuXG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbmNsYXNzIEludGVyY2VwdG9yTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICAgKi9cbiAgdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgICAgZnVsZmlsbGVkLFxuICAgICAgcmVqZWN0ZWQsXG4gICAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICAgIHJ1bldoZW46IG9wdGlvbnMgPyBvcHRpb25zLnJ1bldoZW4gOiBudWxsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICAgKlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBpbnRlcmNlcHRvciB3YXMgcmVtb3ZlZCwgYGZhbHNlYCBvdGhlcndpc2VcbiAgICovXG4gIGVqZWN0KGlkKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIGFsbCBpbnRlcmNlcHRvcnMgZnJvbSB0aGUgc3RhY2tcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBjbGVhcigpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVycykge1xuICAgICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICAgKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmb3JFYWNoKGZuKSB7XG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgICBmbihoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXJsIGZyb20gJ3VybCc7XG5leHBvcnQgZGVmYXVsdCB1cmwuVVJMU2VhcmNoUGFyYW1zO1xuIiwgImltcG9ydCBVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcy5qcydcbmltcG9ydCBGb3JtRGF0YSBmcm9tICcuL2NsYXNzZXMvRm9ybURhdGEuanMnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNOb2RlOiB0cnVlLFxuICBjbGFzc2VzOiB7XG4gICAgVVJMU2VhcmNoUGFyYW1zLFxuICAgIEZvcm1EYXRhLFxuICAgIEJsb2I6IHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiBCbG9iIHx8IG51bGxcbiAgfSxcbiAgcHJvdG9jb2xzOiBbICdodHRwJywgJ2h0dHBzJywgJ2ZpbGUnLCAnZGF0YScgXVxufTtcbiIsICJjb25zdCBoYXNCcm93c2VyRW52ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGhhc1N0YW5kYXJkQnJvd3NlckVudiA9IChcbiAgKHByb2R1Y3QpID0+IHtcbiAgICByZXR1cm4gaGFzQnJvd3NlckVudiAmJiBbJ1JlYWN0TmF0aXZlJywgJ05hdGl2ZVNjcmlwdCcsICdOUyddLmluZGV4T2YocHJvZHVjdCkgPCAwXG4gIH0pKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0KTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgd2ViV29ya2VyIGVudmlyb25tZW50XG4gKlxuICogQWx0aG91Z2ggdGhlIGBpc1N0YW5kYXJkQnJvd3NlckVudmAgbWV0aG9kIGluZGljYXRlcyB0aGF0XG4gKiBgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXJgLCB0aGUgV2ViV29ya2VyIHdpbGwgc3RpbGwgYmVcbiAqIGZpbHRlcmVkIG91dCBkdWUgdG8gaXRzIGp1ZGdtZW50IHN0YW5kYXJkXG4gKiBgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ2AuXG4gKiBUaGlzIGxlYWRzIHRvIGEgcHJvYmxlbSB3aGVuIGF4aW9zIHBvc3QgYEZvcm1EYXRhYCBpbiB3ZWJXb3JrZXJcbiAqL1xuY29uc3QgaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52ID0gKCgpID0+IHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlICYmXG4gICAgdHlwZW9mIHNlbGYuaW1wb3J0U2NyaXB0cyA9PT0gJ2Z1bmN0aW9uJ1xuICApO1xufSkoKTtcblxuY29uc3Qgb3JpZ2luID0gaGFzQnJvd3NlckVudiAmJiB3aW5kb3cubG9jYXRpb24uaHJlZiB8fCAnaHR0cDovL2xvY2FsaG9zdCc7XG5cbmV4cG9ydCB7XG4gIGhhc0Jyb3dzZXJFbnYsXG4gIGhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudixcbiAgaGFzU3RhbmRhcmRCcm93c2VyRW52LFxuICBvcmlnaW5cbn1cbiIsICJpbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi9ub2RlL2luZGV4LmpzJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vY29tbW9uL3V0aWxzLmpzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAuLi51dGlscyxcbiAgLi4ucGxhdGZvcm1cbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b0Zvcm1EYXRhKGRhdGEsIG5ldyBwbGF0Zm9ybS5jbGFzc2VzLlVSTFNlYXJjaFBhcmFtcygpLCBPYmplY3QuYXNzaWduKHtcbiAgICB2aXNpdG9yOiBmdW5jdGlvbih2YWx1ZSwga2V5LCBwYXRoLCBoZWxwZXJzKSB7XG4gICAgICBpZiAocGxhdGZvcm0uaXNOb2RlICYmIHV0aWxzLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICB0aGlzLmFwcGVuZChrZXksIHZhbHVlLnRvU3RyaW5nKCdiYXNlNjQnKSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhlbHBlcnMuZGVmYXVsdFZpc2l0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH0sIG9wdGlvbnMpKTtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcgbGlrZSBgZm9vW3hdW3ldW3pdYCBhbmQgcmV0dXJucyBhbiBhcnJheSBsaWtlIGBbJ2ZvbycsICd4JywgJ3knLCAneiddXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICpcbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHN0cmluZ3MuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlUHJvcFBhdGgobmFtZSkge1xuICAvLyBmb29beF1beV1bel1cbiAgLy8gZm9vLngueS56XG4gIC8vIGZvby14LXktelxuICAvLyBmb28geCB5IHpcbiAgcmV0dXJuIHV0aWxzLm1hdGNoQWxsKC9cXHcrfFxcWyhcXHcqKV0vZywgbmFtZSkubWFwKG1hdGNoID0+IHtcbiAgICByZXR1cm4gbWF0Y2hbMF0gPT09ICdbXScgPyAnJyA6IG1hdGNoWzFdIHx8IG1hdGNoWzBdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIGFycmF5IHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjb252ZXJ0IHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcmV0dXJucyBBbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFuZCB2YWx1ZXMgYXMgdGhlIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheVRvT2JqZWN0KGFycikge1xuICBjb25zdCBvYmogPSB7fTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGFycik7XG4gIGxldCBpO1xuICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgbGV0IGtleTtcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICBvYmpba2V5XSA9IGFycltrZXldO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBGb3JtRGF0YSBvYmplY3QgYW5kIHJldHVybnMgYSBKYXZhU2NyaXB0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGNvbnZlcnQgdG8gSlNPTi5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0PHN0cmluZywgYW55PiB8IG51bGx9IFRoZSBjb252ZXJ0ZWQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBmb3JtRGF0YVRvSlNPTihmb3JtRGF0YSkge1xuICBmdW5jdGlvbiBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldCwgaW5kZXgpIHtcbiAgICBsZXQgbmFtZSA9IHBhdGhbaW5kZXgrK107XG5cbiAgICBpZiAobmFtZSA9PT0gJ19fcHJvdG9fXycpIHJldHVybiB0cnVlO1xuXG4gICAgY29uc3QgaXNOdW1lcmljS2V5ID0gTnVtYmVyLmlzRmluaXRlKCtuYW1lKTtcbiAgICBjb25zdCBpc0xhc3QgPSBpbmRleCA+PSBwYXRoLmxlbmd0aDtcbiAgICBuYW1lID0gIW5hbWUgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXQpID8gdGFyZ2V0Lmxlbmd0aCA6IG5hbWU7XG5cbiAgICBpZiAoaXNMYXN0KSB7XG4gICAgICBpZiAodXRpbHMuaGFzT3duUHJvcCh0YXJnZXQsIG5hbWUpKSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IFt0YXJnZXRbbmFtZV0sIHZhbHVlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldFtuYW1lXSB8fCAhdXRpbHMuaXNPYmplY3QodGFyZ2V0W25hbWVdKSkge1xuICAgICAgdGFyZ2V0W25hbWVdID0gW107XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYnVpbGRQYXRoKHBhdGgsIHZhbHVlLCB0YXJnZXRbbmFtZV0sIGluZGV4KTtcblxuICAgIGlmIChyZXN1bHQgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBhcnJheVRvT2JqZWN0KHRhcmdldFtuYW1lXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICFpc051bWVyaWNLZXk7XG4gIH1cblxuICBpZiAodXRpbHMuaXNGb3JtRGF0YShmb3JtRGF0YSkgJiYgdXRpbHMuaXNGdW5jdGlvbihmb3JtRGF0YS5lbnRyaWVzKSkge1xuICAgIGNvbnN0IG9iaiA9IHt9O1xuXG4gICAgdXRpbHMuZm9yRWFjaEVudHJ5KGZvcm1EYXRhLCAobmFtZSwgdmFsdWUpID0+IHtcbiAgICAgIGJ1aWxkUGF0aChwYXJzZVByb3BQYXRoKG5hbWUpLCB2YWx1ZSwgb2JqLCAwKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZm9ybURhdGFUb0pTT047XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCB0cmFuc2l0aW9uYWxEZWZhdWx0cyBmcm9tICcuL3RyYW5zaXRpb25hbC5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuLi9oZWxwZXJzL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IHRvVVJMRW5jb2RlZEZvcm0gZnJvbSAnLi4vaGVscGVycy90b1VSTEVuY29kZWRGb3JtLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybURhdGFUb0pTT04gZnJvbSAnLi4vaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyc7XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcsIHRyaWVzIHRvIHBhcnNlIGl0LCBhbmQgaWYgaXQgZmFpbHMsIGl0IHJldHVybnMgdGhlIHN0cmluZ2lmaWVkIHZlcnNpb25cbiAqIG9mIHRoZSBpbnB1dFxuICpcbiAqIEBwYXJhbSB7YW55fSByYXdWYWx1ZSAtIFRoZSB2YWx1ZSB0byBiZSBzdHJpbmdpZmllZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHBhcnNlciAtIEEgZnVuY3Rpb24gdGhhdCBwYXJzZXMgYSBzdHJpbmcgaW50byBhIEphdmFTY3JpcHQgb2JqZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZW5jb2RlciAtIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIHZhbHVlIGFuZCByZXR1cm5zIGEgc3RyaW5nLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgc3RyaW5naWZpZWQgdmVyc2lvbiBvZiB0aGUgcmF3VmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG5jb25zdCBkZWZhdWx0cyA9IHtcblxuICB0cmFuc2l0aW9uYWw6IHRyYW5zaXRpb25hbERlZmF1bHRzLFxuXG4gIGFkYXB0ZXI6IFsneGhyJywgJ2h0dHAnLCAnZmV0Y2gnXSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgY29uc3QgY29udGVudFR5cGUgPSBoZWFkZXJzLmdldENvbnRlbnRUeXBlKCkgfHwgJyc7XG4gICAgY29uc3QgaGFzSlNPTkNvbnRlbnRUeXBlID0gY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24vanNvbicpID4gLTE7XG4gICAgY29uc3QgaXNPYmplY3RQYXlsb2FkID0gdXRpbHMuaXNPYmplY3QoZGF0YSk7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkICYmIHV0aWxzLmlzSFRNTEZvcm0oZGF0YSkpIHtcbiAgICAgIGRhdGEgPSBuZXcgRm9ybURhdGEoZGF0YSk7XG4gICAgfVxuXG4gICAgY29uc3QgaXNGb3JtRGF0YSA9IHV0aWxzLmlzRm9ybURhdGEoZGF0YSk7XG5cbiAgICBpZiAoaXNGb3JtRGF0YSkge1xuICAgICAgcmV0dXJuIGhhc0pTT05Db250ZW50VHlwZSA/IEpTT04uc3RyaW5naWZ5KGZvcm1EYXRhVG9KU09OKGRhdGEpKSA6IGRhdGE7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzUmVhZGFibGVTdHJlYW0oZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcsIGZhbHNlKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgbGV0IGlzRmlsZUxpc3Q7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkKSB7XG4gICAgICBpZiAoY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJykgPiAtMSkge1xuICAgICAgICByZXR1cm4gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCB0aGlzLmZvcm1TZXJpYWxpemVyKS50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAoKGlzRmlsZUxpc3QgPSB1dGlscy5pc0ZpbGVMaXN0KGRhdGEpKSB8fCBjb250ZW50VHlwZS5pbmRleE9mKCdtdWx0aXBhcnQvZm9ybS1kYXRhJykgPiAtMSkge1xuICAgICAgICBjb25zdCBfRm9ybURhdGEgPSB0aGlzLmVudiAmJiB0aGlzLmVudi5Gb3JtRGF0YTtcblxuICAgICAgICByZXR1cm4gdG9Gb3JtRGF0YShcbiAgICAgICAgICBpc0ZpbGVMaXN0ID8geydmaWxlc1tdJzogZGF0YX0gOiBkYXRhLFxuICAgICAgICAgIF9Gb3JtRGF0YSAmJiBuZXcgX0Zvcm1EYXRhKCksXG4gICAgICAgICAgdGhpcy5mb3JtU2VyaWFsaXplclxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc09iamVjdFBheWxvYWQgfHwgaGFzSlNPTkNvbnRlbnRUeXBlICkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24vanNvbicsIGZhbHNlKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIGNvbnN0IHRyYW5zaXRpb25hbCA9IHRoaXMudHJhbnNpdGlvbmFsIHx8IGRlZmF1bHRzLnRyYW5zaXRpb25hbDtcbiAgICBjb25zdCBmb3JjZWRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuZm9yY2VkSlNPTlBhcnNpbmc7XG4gICAgY29uc3QgSlNPTlJlcXVlc3RlZCA9IHRoaXMucmVzcG9uc2VUeXBlID09PSAnanNvbic7XG5cbiAgICBpZiAodXRpbHMuaXNSZXNwb25zZShkYXRhKSB8fCB1dGlscy5pc1JlYWRhYmxlU3RyZWFtKGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YSAmJiB1dGlscy5pc1N0cmluZyhkYXRhKSAmJiAoKGZvcmNlZEpTT05QYXJzaW5nICYmICF0aGlzLnJlc3BvbnNlVHlwZSkgfHwgSlNPTlJlcXVlc3RlZCkpIHtcbiAgICAgIGNvbnN0IHNpbGVudEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5zaWxlbnRKU09OUGFyc2luZztcbiAgICAgIGNvbnN0IHN0cmljdEpTT05QYXJzaW5nID0gIXNpbGVudEpTT05QYXJzaW5nICYmIEpTT05SZXF1ZXN0ZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcpIHtcbiAgICAgICAgICBpZiAoZS5uYW1lID09PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBBeGlvc0Vycm9yLmZyb20oZSwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFLCB0aGlzLCBudWxsLCB0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgZW52OiB7XG4gICAgRm9ybURhdGE6IHBsYXRmb3JtLmNsYXNzZXMuRm9ybURhdGEsXG4gICAgQmxvYjogcGxhdGZvcm0uY2xhc3Nlcy5CbG9iXG4gIH0sXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfSxcblxuICBoZWFkZXJzOiB7XG4gICAgY29tbW9uOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKicsXG4gICAgICAnQ29udGVudC1UeXBlJzogdW5kZWZpbmVkXG4gICAgfVxuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIChtZXRob2QpID0+IHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdHM7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbi8vIFJhd0F4aW9zSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbmNvbnN0IGlnbm9yZUR1cGxpY2F0ZU9mID0gdXRpbHMudG9PYmplY3RTZXQoW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl0pO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmF3SGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKlxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgcmF3SGVhZGVycyA9PiB7XG4gIGNvbnN0IHBhcnNlZCA9IHt9O1xuICBsZXQga2V5O1xuICBsZXQgdmFsO1xuICBsZXQgaTtcblxuICByYXdIZWFkZXJzICYmIHJhd0hlYWRlcnMuc3BsaXQoJ1xcbicpLmZvckVhY2goZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gbGluZS5zdWJzdHJpbmcoMCwgaSkudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gbGluZS5zdWJzdHJpbmcoaSArIDEpLnRyaW0oKTtcblxuICAgIGlmICgha2V5IHx8IChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZltrZXldKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgaWYgKHBhcnNlZFtrZXldKSB7XG4gICAgICAgIHBhcnNlZFtrZXldLnB1c2godmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gW3ZhbF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgcGFyc2VIZWFkZXJzIGZyb20gJy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzJztcblxuY29uc3QgJGludGVybmFscyA9IFN5bWJvbCgnaW50ZXJuYWxzJyk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpIHtcbiAgcmV0dXJuIGhlYWRlciAmJiBTdHJpbmcoaGVhZGVyKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKG5vcm1hbGl6ZVZhbHVlKSA6IFN0cmluZyh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVG9rZW5zKHN0cikge1xuICBjb25zdCB0b2tlbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCB0b2tlbnNSRSA9IC8oW15cXHMsOz1dKylcXHMqKD86PVxccyooW14sO10rKSk/L2c7XG4gIGxldCBtYXRjaDtcblxuICB3aGlsZSAoKG1hdGNoID0gdG9rZW5zUkUuZXhlYyhzdHIpKSkge1xuICAgIHRva2Vuc1ttYXRjaFsxXV0gPSBtYXRjaFsyXTtcbiAgfVxuXG4gIHJldHVybiB0b2tlbnM7XG59XG5cbmNvbnN0IGlzVmFsaWRIZWFkZXJOYW1lID0gKHN0cikgPT4gL15bLV9hLXpBLVowLTleYHx+LCEjJCUmJyorLl0rJC8udGVzdChzdHIudHJpbSgpKTtcblxuZnVuY3Rpb24gbWF0Y2hIZWFkZXJWYWx1ZShjb250ZXh0LCB2YWx1ZSwgaGVhZGVyLCBmaWx0ZXIsIGlzSGVhZGVyTmFtZUZpbHRlcikge1xuICBpZiAodXRpbHMuaXNGdW5jdGlvbihmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci5jYWxsKHRoaXMsIHZhbHVlLCBoZWFkZXIpO1xuICB9XG5cbiAgaWYgKGlzSGVhZGVyTmFtZUZpbHRlcikge1xuICAgIHZhbHVlID0gaGVhZGVyO1xuICB9XG5cbiAgaWYgKCF1dGlscy5pc1N0cmluZyh2YWx1ZSkpIHJldHVybjtcblxuICBpZiAodXRpbHMuaXNTdHJpbmcoZmlsdGVyKSkge1xuICAgIHJldHVybiB2YWx1ZS5pbmRleE9mKGZpbHRlcikgIT09IC0xO1xuICB9XG5cbiAgaWYgKHV0aWxzLmlzUmVnRXhwKGZpbHRlcikpIHtcbiAgICByZXR1cm4gZmlsdGVyLnRlc3QodmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhlYWRlcihoZWFkZXIpIHtcbiAgcmV0dXJuIGhlYWRlci50cmltKClcbiAgICAudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8oW2EtelxcZF0pKFxcdyopL2csICh3LCBjaGFyLCBzdHIpID0+IHtcbiAgICAgIHJldHVybiBjaGFyLnRvVXBwZXJDYXNlKCkgKyBzdHI7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkQWNjZXNzb3JzKG9iaiwgaGVhZGVyKSB7XG4gIGNvbnN0IGFjY2Vzc29yTmFtZSA9IHV0aWxzLnRvQ2FtZWxDYXNlKCcgJyArIGhlYWRlcik7XG5cbiAgWydnZXQnLCAnc2V0JywgJ2hhcyddLmZvckVhY2gobWV0aG9kTmFtZSA9PiB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbWV0aG9kTmFtZSArIGFjY2Vzc29yTmFtZSwge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbbWV0aG9kTmFtZV0uY2FsbCh0aGlzLCBoZWFkZXIsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgICAgfSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9KTtcbn1cblxuY2xhc3MgQXhpb3NIZWFkZXJzIHtcbiAgY29uc3RydWN0b3IoaGVhZGVycykge1xuICAgIGhlYWRlcnMgJiYgdGhpcy5zZXQoaGVhZGVycyk7XG4gIH1cblxuICBzZXQoaGVhZGVyLCB2YWx1ZU9yUmV3cml0ZSwgcmV3cml0ZSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgZnVuY3Rpb24gc2V0SGVhZGVyKF92YWx1ZSwgX2hlYWRlciwgX3Jld3JpdGUpIHtcbiAgICAgIGNvbnN0IGxIZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmICghbEhlYWRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hlYWRlciBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoc2VsZiwgbEhlYWRlcik7XG5cbiAgICAgIGlmKCFrZXkgfHwgc2VsZltrZXldID09PSB1bmRlZmluZWQgfHwgX3Jld3JpdGUgPT09IHRydWUgfHwgKF9yZXdyaXRlID09PSB1bmRlZmluZWQgJiYgc2VsZltrZXldICE9PSBmYWxzZSkpIHtcbiAgICAgICAgc2VsZltrZXkgfHwgX2hlYWRlcl0gPSBub3JtYWxpemVWYWx1ZShfdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHNldEhlYWRlcnMgPSAoaGVhZGVycywgX3Jld3JpdGUpID0+XG4gICAgICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIChfdmFsdWUsIF9oZWFkZXIpID0+IHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSk7XG5cbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChoZWFkZXIpIHx8IGhlYWRlciBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IpIHtcbiAgICAgIHNldEhlYWRlcnMoaGVhZGVyLCB2YWx1ZU9yUmV3cml0ZSlcbiAgICB9IGVsc2UgaWYodXRpbHMuaXNTdHJpbmcoaGVhZGVyKSAmJiAoaGVhZGVyID0gaGVhZGVyLnRyaW0oKSkgJiYgIWlzVmFsaWRIZWFkZXJOYW1lKGhlYWRlcikpIHtcbiAgICAgIHNldEhlYWRlcnMocGFyc2VIZWFkZXJzKGhlYWRlciksIHZhbHVlT3JSZXdyaXRlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzSGVhZGVycyhoZWFkZXIpKSB7XG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBoZWFkZXIuZW50cmllcygpKSB7XG4gICAgICAgIHNldEhlYWRlcih2YWx1ZSwga2V5LCByZXdyaXRlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZGVyICE9IG51bGwgJiYgc2V0SGVhZGVyKHZhbHVlT3JSZXdyaXRlLCBoZWFkZXIsIHJld3JpdGUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0KGhlYWRlciwgcGFyc2VyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzW2tleV07XG5cbiAgICAgICAgaWYgKCFwYXJzZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyc2VyID09PSB0cnVlKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVG9rZW5zKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc0Z1bmN0aW9uKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmNhbGwodGhpcywgdmFsdWUsIGtleSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNSZWdFeHAocGFyc2VyKSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZXIuZXhlYyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXJzZXIgbXVzdCBiZSBib29sZWFufHJlZ2V4cHxmdW5jdGlvbicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhhcyhoZWFkZXIsIG1hdGNoZXIpIHtcbiAgICBoZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoaGVhZGVyKTtcblxuICAgIGlmIChoZWFkZXIpIHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkodGhpcywgaGVhZGVyKTtcblxuICAgICAgcmV0dXJuICEhKGtleSAmJiB0aGlzW2tleV0gIT09IHVuZGVmaW5lZCAmJiAoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZSh0aGlzLCB0aGlzW2tleV0sIGtleSwgbWF0Y2hlcikpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBkZWxldGUoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgbGV0IGRlbGV0ZWQgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGRlbGV0ZUhlYWRlcihfaGVhZGVyKSB7XG4gICAgICBfaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoX2hlYWRlcikge1xuICAgICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHNlbGYsIF9oZWFkZXIpO1xuXG4gICAgICAgIGlmIChrZXkgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUoc2VsZiwgc2VsZltrZXldLCBrZXksIG1hdGNoZXIpKSkge1xuICAgICAgICAgIGRlbGV0ZSBzZWxmW2tleV07XG5cbiAgICAgICAgICBkZWxldGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5KGhlYWRlcikpIHtcbiAgICAgIGhlYWRlci5mb3JFYWNoKGRlbGV0ZUhlYWRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZUhlYWRlcihoZWFkZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9XG5cbiAgY2xlYXIobWF0Y2hlcikge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzKTtcbiAgICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZSh0aGlzLCB0aGlzW2tleV0sIGtleSwgbWF0Y2hlciwgdHJ1ZSkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXNba2V5XTtcbiAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlbGV0ZWQ7XG4gIH1cblxuICBub3JtYWxpemUoZm9ybWF0KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuXG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShoZWFkZXJzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIHNlbGZba2V5XSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICAgICAgZGVsZXRlIHNlbGZbaGVhZGVyXTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBub3JtYWxpemVkID0gZm9ybWF0ID8gZm9ybWF0SGVhZGVyKGhlYWRlcikgOiBTdHJpbmcoaGVhZGVyKS50cmltKCk7XG5cbiAgICAgIGlmIChub3JtYWxpemVkICE9PSBoZWFkZXIpIHtcbiAgICAgICAgZGVsZXRlIHNlbGZbaGVhZGVyXTtcbiAgICAgIH1cblxuICAgICAgc2VsZltub3JtYWxpemVkXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcblxuICAgICAgaGVhZGVyc1tub3JtYWxpemVkXSA9IHRydWU7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNvbmNhdCguLi50YXJnZXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuY29uY2F0KHRoaXMsIC4uLnRhcmdldHMpO1xuICB9XG5cbiAgdG9KU09OKGFzU3RyaW5ncykge1xuICAgIGNvbnN0IG9iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICB1dGlscy5mb3JFYWNoKHRoaXMsICh2YWx1ZSwgaGVhZGVyKSA9PiB7XG4gICAgICB2YWx1ZSAhPSBudWxsICYmIHZhbHVlICE9PSBmYWxzZSAmJiAob2JqW2hlYWRlcl0gPSBhc1N0cmluZ3MgJiYgdXRpbHMuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5qb2luKCcsICcpIDogdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLnRvSlNPTigpKVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSkubWFwKChbaGVhZGVyLCB2YWx1ZV0pID0+IGhlYWRlciArICc6ICcgKyB2YWx1ZSkuam9pbignXFxuJyk7XG4gIH1cblxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdBeGlvc0hlYWRlcnMnO1xuICB9XG5cbiAgc3RhdGljIGZyb20odGhpbmcpIHtcbiAgICByZXR1cm4gdGhpbmcgaW5zdGFuY2VvZiB0aGlzID8gdGhpbmcgOiBuZXcgdGhpcyh0aGluZyk7XG4gIH1cblxuICBzdGF0aWMgY29uY2F0KGZpcnN0LCAuLi50YXJnZXRzKSB7XG4gICAgY29uc3QgY29tcHV0ZWQgPSBuZXcgdGhpcyhmaXJzdCk7XG5cbiAgICB0YXJnZXRzLmZvckVhY2goKHRhcmdldCkgPT4gY29tcHV0ZWQuc2V0KHRhcmdldCkpO1xuXG4gICAgcmV0dXJuIGNvbXB1dGVkO1xuICB9XG5cbiAgc3RhdGljIGFjY2Vzc29yKGhlYWRlcikge1xuICAgIGNvbnN0IGludGVybmFscyA9IHRoaXNbJGludGVybmFsc10gPSAodGhpc1skaW50ZXJuYWxzXSA9IHtcbiAgICAgIGFjY2Vzc29yczoge31cbiAgICB9KTtcblxuICAgIGNvbnN0IGFjY2Vzc29ycyA9IGludGVybmFscy5hY2Nlc3NvcnM7XG4gICAgY29uc3QgcHJvdG90eXBlID0gdGhpcy5wcm90b3R5cGU7XG5cbiAgICBmdW5jdGlvbiBkZWZpbmVBY2Nlc3NvcihfaGVhZGVyKSB7XG4gICAgICBjb25zdCBsSGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoIWFjY2Vzc29yc1tsSGVhZGVyXSkge1xuICAgICAgICBidWlsZEFjY2Vzc29ycyhwcm90b3R5cGUsIF9oZWFkZXIpO1xuICAgICAgICBhY2Nlc3NvcnNbbEhlYWRlcl0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHV0aWxzLmlzQXJyYXkoaGVhZGVyKSA/IGhlYWRlci5mb3JFYWNoKGRlZmluZUFjY2Vzc29yKSA6IGRlZmluZUFjY2Vzc29yKGhlYWRlcik7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5BeGlvc0hlYWRlcnMuYWNjZXNzb3IoWydDb250ZW50LVR5cGUnLCAnQ29udGVudC1MZW5ndGgnLCAnQWNjZXB0JywgJ0FjY2VwdC1FbmNvZGluZycsICdVc2VyLUFnZW50JywgJ0F1dGhvcml6YXRpb24nXSk7XG5cbi8vIHJlc2VydmVkIG5hbWVzIGhvdGZpeFxudXRpbHMucmVkdWNlRGVzY3JpcHRvcnMoQXhpb3NIZWFkZXJzLnByb3RvdHlwZSwgKHt2YWx1ZX0sIGtleSkgPT4ge1xuICBsZXQgbWFwcGVkID0ga2V5WzBdLnRvVXBwZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSk7IC8vIG1hcCBgc2V0YCA9PiBgU2V0YFxuICByZXR1cm4ge1xuICAgIGdldDogKCkgPT4gdmFsdWUsXG4gICAgc2V0KGhlYWRlclZhbHVlKSB7XG4gICAgICB0aGlzW21hcHBlZF0gPSBoZWFkZXJWYWx1ZTtcbiAgICB9XG4gIH1cbn0pO1xuXG51dGlscy5mcmVlemVNZXRob2RzKEF4aW9zSGVhZGVycyk7XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zSGVhZGVycztcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHBhcmFtIHs/T2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2Ugb2JqZWN0XG4gKlxuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGZucywgcmVzcG9uc2UpIHtcbiAgY29uc3QgY29uZmlnID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgY29uc3QgY29udGV4dCA9IHJlc3BvbnNlIHx8IGNvbmZpZztcbiAgY29uc3QgaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbnRleHQuaGVhZGVycyk7XG4gIGxldCBkYXRhID0gY29udGV4dC5kYXRhO1xuXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb25maWcsIGRhdGEsIGhlYWRlcnMubm9ybWFsaXplKCksIHJlc3BvbnNlID8gcmVzcG9uc2Uuc3RhdHVzIDogdW5kZWZpbmVkKTtcbiAgfSk7XG5cbiAgaGVhZGVycy5ub3JtYWxpemUoKTtcblxuICByZXR1cm4gZGF0YTtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIEEgYENhbmNlbGVkRXJyb3JgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3Q9fSByZXF1ZXN0IFRoZSByZXF1ZXN0LlxuICpcbiAqIEByZXR1cm5zIHtDYW5jZWxlZEVycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsZWRFcnJvcihtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIEF4aW9zRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlID09IG51bGwgPyAnY2FuY2VsZWQnIDogbWVzc2FnZSwgQXhpb3NFcnJvci5FUlJfQ0FOQ0VMRUQsIGNvbmZpZywgcmVxdWVzdCk7XG4gIHRoaXMubmFtZSA9ICdDYW5jZWxlZEVycm9yJztcbn1cblxudXRpbHMuaW5oZXJpdHMoQ2FuY2VsZWRFcnJvciwgQXhpb3NFcnJvciwge1xuICBfX0NBTkNFTF9fOiB0cnVlXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FuY2VsZWRFcnJvcjtcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4vQXhpb3NFcnJvci5qcyc7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge29iamVjdH0gVGhlIHJlc3BvbnNlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICBjb25zdCB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgW0F4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0VdW01hdGguZmxvb3IocmVzcG9uc2Uuc3RhdHVzIC8gMTAwKSAtIDRdLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkK1xcLS5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8/XFwvJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufVxuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGlzQWJzb2x1dGVVUkwgZnJvbSAnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMLmpzJztcbmltcG9ydCBjb21iaW5lVVJMcyBmcm9tICcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufVxuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IHNldHRsZSBmcm9tICcuLy4uL2NvcmUvc2V0dGxlLmpzJztcbmltcG9ydCBidWlsZEZ1bGxQYXRoIGZyb20gJy4uL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyc7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSAnLi8uLi9oZWxwZXJzL2J1aWxkVVJMLmpzJztcbmltcG9ydCB7Z2V0UHJveHlGb3JVcmx9IGZyb20gJ3Byb3h5LWZyb20tZW52JztcbmltcG9ydCBodHRwIGZyb20gJ2h0dHAnO1xuaW1wb3J0IGh0dHBzIGZyb20gJ2h0dHBzJztcbmltcG9ydCB1dGlsIGZyb20gJ3V0aWwnO1xuaW1wb3J0IGZvbGxvd1JlZGlyZWN0cyBmcm9tICdmb2xsb3ctcmVkaXJlY3RzJztcbmltcG9ydCB6bGliIGZyb20gJ3psaWInO1xuaW1wb3J0IHtWRVJTSU9OfSBmcm9tICcuLi9lbnYvZGF0YS5qcyc7XG5pbXBvcnQgdHJhbnNpdGlvbmFsRGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuaW1wb3J0IGZyb21EYXRhVVJJIGZyb20gJy4uL2hlbHBlcnMvZnJvbURhdGFVUkkuanMnO1xuaW1wb3J0IHN0cmVhbSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQgQXhpb3NUcmFuc2Zvcm1TdHJlYW0gZnJvbSAnLi4vaGVscGVycy9BeGlvc1RyYW5zZm9ybVN0cmVhbS5qcyc7XG5pbXBvcnQge0V2ZW50RW1pdHRlcn0gZnJvbSAnZXZlbnRzJztcbmltcG9ydCBmb3JtRGF0YVRvU3RyZWFtIGZyb20gXCIuLi9oZWxwZXJzL2Zvcm1EYXRhVG9TdHJlYW0uanNcIjtcbmltcG9ydCByZWFkQmxvYiBmcm9tIFwiLi4vaGVscGVycy9yZWFkQmxvYi5qc1wiO1xuaW1wb3J0IFpsaWJIZWFkZXJUcmFuc2Zvcm1TdHJlYW0gZnJvbSAnLi4vaGVscGVycy9abGliSGVhZGVyVHJhbnNmb3JtU3RyZWFtLmpzJztcbmltcG9ydCBjYWxsYmFja2lmeSBmcm9tIFwiLi4vaGVscGVycy9jYWxsYmFja2lmeS5qc1wiO1xuXG5jb25zdCB6bGliT3B0aW9ucyA9IHtcbiAgZmx1c2g6IHpsaWIuY29uc3RhbnRzLlpfU1lOQ19GTFVTSCxcbiAgZmluaXNoRmx1c2g6IHpsaWIuY29uc3RhbnRzLlpfU1lOQ19GTFVTSFxufTtcblxuY29uc3QgYnJvdGxpT3B0aW9ucyA9IHtcbiAgZmx1c2g6IHpsaWIuY29uc3RhbnRzLkJST1RMSV9PUEVSQVRJT05fRkxVU0gsXG4gIGZpbmlzaEZsdXNoOiB6bGliLmNvbnN0YW50cy5CUk9UTElfT1BFUkFUSU9OX0ZMVVNIXG59XG5cbmNvbnN0IGlzQnJvdGxpU3VwcG9ydGVkID0gdXRpbHMuaXNGdW5jdGlvbih6bGliLmNyZWF0ZUJyb3RsaURlY29tcHJlc3MpO1xuXG5jb25zdCB7aHR0cDogaHR0cEZvbGxvdywgaHR0cHM6IGh0dHBzRm9sbG93fSA9IGZvbGxvd1JlZGlyZWN0cztcblxuY29uc3QgaXNIdHRwcyA9IC9odHRwczo/LztcblxuY29uc3Qgc3VwcG9ydGVkUHJvdG9jb2xzID0gcGxhdGZvcm0ucHJvdG9jb2xzLm1hcChwcm90b2NvbCA9PiB7XG4gIHJldHVybiBwcm90b2NvbCArICc6Jztcbn0pO1xuXG4vKipcbiAqIElmIHRoZSBwcm94eSBvciBjb25maWcgYmVmb3JlUmVkaXJlY3RzIGZ1bmN0aW9ucyBhcmUgZGVmaW5lZCwgY2FsbCB0aGVtIHdpdGggdGhlIG9wdGlvbnNcbiAqIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QgdGhhdCB3YXMgcGFzc2VkIHRvIHRoZSByZXF1ZXN0LlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3Q8c3RyaW5nLCBhbnk+fVxuICovXG5mdW5jdGlvbiBkaXNwYXRjaEJlZm9yZVJlZGlyZWN0KG9wdGlvbnMsIHJlc3BvbnNlRGV0YWlscykge1xuICBpZiAob3B0aW9ucy5iZWZvcmVSZWRpcmVjdHMucHJveHkpIHtcbiAgICBvcHRpb25zLmJlZm9yZVJlZGlyZWN0cy5wcm94eShvcHRpb25zKTtcbiAgfVxuICBpZiAob3B0aW9ucy5iZWZvcmVSZWRpcmVjdHMuY29uZmlnKSB7XG4gICAgb3B0aW9ucy5iZWZvcmVSZWRpcmVjdHMuY29uZmlnKG9wdGlvbnMsIHJlc3BvbnNlRGV0YWlscyk7XG4gIH1cbn1cblxuLyoqXG4gKiBJZiB0aGUgcHJveHkgb3IgY29uZmlnIGFmdGVyUmVkaXJlY3RzIGZ1bmN0aW9ucyBhcmUgZGVmaW5lZCwgY2FsbCB0aGVtIHdpdGggdGhlIG9wdGlvbnNcbiAqXG4gKiBAcGFyYW0ge2h0dHAuQ2xpZW50UmVxdWVzdEFyZ3N9IG9wdGlvbnNcbiAqIEBwYXJhbSB7QXhpb3NQcm94eUNvbmZpZ30gY29uZmlnUHJveHkgY29uZmlndXJhdGlvbiBmcm9tIEF4aW9zIG9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb25cbiAqXG4gKiBAcmV0dXJucyB7aHR0cC5DbGllbnRSZXF1ZXN0QXJnc31cbiAqL1xuZnVuY3Rpb24gc2V0UHJveHkob3B0aW9ucywgY29uZmlnUHJveHksIGxvY2F0aW9uKSB7XG4gIGxldCBwcm94eSA9IGNvbmZpZ1Byb3h5O1xuICBpZiAoIXByb3h5ICYmIHByb3h5ICE9PSBmYWxzZSkge1xuICAgIGNvbnN0IHByb3h5VXJsID0gZ2V0UHJveHlGb3JVcmwobG9jYXRpb24pO1xuICAgIGlmIChwcm94eVVybCkge1xuICAgICAgcHJveHkgPSBuZXcgVVJMKHByb3h5VXJsKTtcbiAgICB9XG4gIH1cbiAgaWYgKHByb3h5KSB7XG4gICAgLy8gQmFzaWMgcHJveHkgYXV0aG9yaXphdGlvblxuICAgIGlmIChwcm94eS51c2VybmFtZSkge1xuICAgICAgcHJveHkuYXV0aCA9IChwcm94eS51c2VybmFtZSB8fCAnJykgKyAnOicgKyAocHJveHkucGFzc3dvcmQgfHwgJycpO1xuICAgIH1cblxuICAgIGlmIChwcm94eS5hdXRoKSB7XG4gICAgICAvLyBTdXBwb3J0IHByb3h5IGF1dGggb2JqZWN0IGZvcm1cbiAgICAgIGlmIChwcm94eS5hdXRoLnVzZXJuYW1lIHx8IHByb3h5LmF1dGgucGFzc3dvcmQpIHtcbiAgICAgICAgcHJveHkuYXV0aCA9IChwcm94eS5hdXRoLnVzZXJuYW1lIHx8ICcnKSArICc6JyArIChwcm94eS5hdXRoLnBhc3N3b3JkIHx8ICcnKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGJhc2U2NCA9IEJ1ZmZlclxuICAgICAgICAuZnJvbShwcm94eS5hdXRoLCAndXRmOCcpXG4gICAgICAgIC50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgICBvcHRpb25zLmhlYWRlcnNbJ1Byb3h5LUF1dGhvcml6YXRpb24nXSA9ICdCYXNpYyAnICsgYmFzZTY0O1xuICAgIH1cblxuICAgIG9wdGlvbnMuaGVhZGVycy5ob3N0ID0gb3B0aW9ucy5ob3N0bmFtZSArIChvcHRpb25zLnBvcnQgPyAnOicgKyBvcHRpb25zLnBvcnQgOiAnJyk7XG4gICAgY29uc3QgcHJveHlIb3N0ID0gcHJveHkuaG9zdG5hbWUgfHwgcHJveHkuaG9zdDtcbiAgICBvcHRpb25zLmhvc3RuYW1lID0gcHJveHlIb3N0O1xuICAgIC8vIFJlcGxhY2UgJ2hvc3QnIHNpbmNlIG9wdGlvbnMgaXMgbm90IGEgVVJMIG9iamVjdFxuICAgIG9wdGlvbnMuaG9zdCA9IHByb3h5SG9zdDtcbiAgICBvcHRpb25zLnBvcnQgPSBwcm94eS5wb3J0O1xuICAgIG9wdGlvbnMucGF0aCA9IGxvY2F0aW9uO1xuICAgIGlmIChwcm94eS5wcm90b2NvbCkge1xuICAgICAgb3B0aW9ucy5wcm90b2NvbCA9IHByb3h5LnByb3RvY29sLmluY2x1ZGVzKCc6JykgPyBwcm94eS5wcm90b2NvbCA6IGAke3Byb3h5LnByb3RvY29sfTpgO1xuICAgIH1cbiAgfVxuXG4gIG9wdGlvbnMuYmVmb3JlUmVkaXJlY3RzLnByb3h5ID0gZnVuY3Rpb24gYmVmb3JlUmVkaXJlY3QocmVkaXJlY3RPcHRpb25zKSB7XG4gICAgLy8gQ29uZmlndXJlIHByb3h5IGZvciByZWRpcmVjdGVkIHJlcXVlc3QsIHBhc3NpbmcgdGhlIG9yaWdpbmFsIGNvbmZpZyBwcm94eSB0byBhcHBseVxuICAgIC8vIHRoZSBleGFjdCBzYW1lIGxvZ2ljIGFzIGlmIHRoZSByZWRpcmVjdGVkIHJlcXVlc3Qgd2FzIHBlcmZvcm1lZCBieSBheGlvcyBkaXJlY3RseS5cbiAgICBzZXRQcm94eShyZWRpcmVjdE9wdGlvbnMsIGNvbmZpZ1Byb3h5LCByZWRpcmVjdE9wdGlvbnMuaHJlZik7XG4gIH07XG59XG5cbmNvbnN0IGlzSHR0cEFkYXB0ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdXRpbHMua2luZE9mKHByb2Nlc3MpID09PSAncHJvY2Vzcyc7XG5cbi8vIHRlbXBvcmFyeSBob3RmaXhcblxuY29uc3Qgd3JhcEFzeW5jID0gKGFzeW5jRXhlY3V0b3IpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBsZXQgb25Eb25lO1xuICAgIGxldCBpc0RvbmU7XG5cbiAgICBjb25zdCBkb25lID0gKHZhbHVlLCBpc1JlamVjdGVkKSA9PiB7XG4gICAgICBpZiAoaXNEb25lKSByZXR1cm47XG4gICAgICBpc0RvbmUgPSB0cnVlO1xuICAgICAgb25Eb25lICYmIG9uRG9uZSh2YWx1ZSwgaXNSZWplY3RlZCk7XG4gICAgfVxuXG4gICAgY29uc3QgX3Jlc29sdmUgPSAodmFsdWUpID0+IHtcbiAgICAgIGRvbmUodmFsdWUpO1xuICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgfTtcblxuICAgIGNvbnN0IF9yZWplY3QgPSAocmVhc29uKSA9PiB7XG4gICAgICBkb25lKHJlYXNvbiwgdHJ1ZSk7XG4gICAgICByZWplY3QocmVhc29uKTtcbiAgICB9XG5cbiAgICBhc3luY0V4ZWN1dG9yKF9yZXNvbHZlLCBfcmVqZWN0LCAob25Eb25lSGFuZGxlcikgPT4gKG9uRG9uZSA9IG9uRG9uZUhhbmRsZXIpKS5jYXRjaChfcmVqZWN0KTtcbiAgfSlcbn07XG5cbmNvbnN0IHJlc29sdmVGYW1pbHkgPSAoe2FkZHJlc3MsIGZhbWlseX0pID0+IHtcbiAgaWYgKCF1dGlscy5pc1N0cmluZyhhZGRyZXNzKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignYWRkcmVzcyBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gIH1cbiAgcmV0dXJuICh7XG4gICAgYWRkcmVzcyxcbiAgICBmYW1pbHk6IGZhbWlseSB8fCAoYWRkcmVzcy5pbmRleE9mKCcuJykgPCAwID8gNiA6IDQpXG4gIH0pO1xufVxuXG5jb25zdCBidWlsZEFkZHJlc3NFbnRyeSA9IChhZGRyZXNzLCBmYW1pbHkpID0+IHJlc29sdmVGYW1pbHkodXRpbHMuaXNPYmplY3QoYWRkcmVzcykgPyBhZGRyZXNzIDoge2FkZHJlc3MsIGZhbWlseX0pO1xuXG4vKmVzbGludCBjb25zaXN0ZW50LXJldHVybjowKi9cbmV4cG9ydCBkZWZhdWx0IGlzSHR0cEFkYXB0ZXJTdXBwb3J0ZWQgJiYgZnVuY3Rpb24gaHR0cEFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiB3cmFwQXN5bmMoYXN5bmMgZnVuY3Rpb24gZGlzcGF0Y2hIdHRwUmVxdWVzdChyZXNvbHZlLCByZWplY3QsIG9uRG9uZSkge1xuICAgIGxldCB7ZGF0YSwgbG9va3VwLCBmYW1pbHl9ID0gY29uZmlnO1xuICAgIGNvbnN0IHtyZXNwb25zZVR5cGUsIHJlc3BvbnNlRW5jb2Rpbmd9ID0gY29uZmlnO1xuICAgIGNvbnN0IG1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKTtcbiAgICBsZXQgaXNEb25lO1xuICAgIGxldCByZWplY3RlZCA9IGZhbHNlO1xuICAgIGxldCByZXE7XG5cbiAgICBpZiAobG9va3VwKSB7XG4gICAgICBjb25zdCBfbG9va3VwID0gY2FsbGJhY2tpZnkobG9va3VwLCAodmFsdWUpID0+IHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdKTtcbiAgICAgIC8vIGhvdGZpeCB0byBzdXBwb3J0IG9wdC5hbGwgb3B0aW9uIHdoaWNoIGlzIHJlcXVpcmVkIGZvciBub2RlIDIwLnhcbiAgICAgIGxvb2t1cCA9IChob3N0bmFtZSwgb3B0LCBjYikgPT4ge1xuICAgICAgICBfbG9va3VwKGhvc3RuYW1lLCBvcHQsIChlcnIsIGFyZzAsIGFyZzEpID0+IHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gY2IoZXJyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBhZGRyZXNzZXMgPSB1dGlscy5pc0FycmF5KGFyZzApID8gYXJnMC5tYXAoYWRkciA9PiBidWlsZEFkZHJlc3NFbnRyeShhZGRyKSkgOiBbYnVpbGRBZGRyZXNzRW50cnkoYXJnMCwgYXJnMSldO1xuXG4gICAgICAgICAgb3B0LmFsbCA/IGNiKGVyciwgYWRkcmVzc2VzKSA6IGNiKGVyciwgYWRkcmVzc2VzWzBdLmFkZHJlc3MsIGFkZHJlc3Nlc1swXS5mYW1pbHkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB0ZW1wb3JhcnkgaW50ZXJuYWwgZW1pdHRlciB1bnRpbCB0aGUgQXhpb3NSZXF1ZXN0IGNsYXNzIHdpbGwgYmUgaW1wbGVtZW50ZWRcbiAgICBjb25zdCBlbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgY29uc3Qgb25GaW5pc2hlZCA9ICgpID0+IHtcbiAgICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKGFib3J0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0KTtcbiAgICAgIH1cblxuICAgICAgZW1pdHRlci5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICBvbkRvbmUoKHZhbHVlLCBpc1JlamVjdGVkKSA9PiB7XG4gICAgICBpc0RvbmUgPSB0cnVlO1xuICAgICAgaWYgKGlzUmVqZWN0ZWQpIHtcbiAgICAgICAgcmVqZWN0ZWQgPSB0cnVlO1xuICAgICAgICBvbkZpbmlzaGVkKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBhYm9ydChyZWFzb24pIHtcbiAgICAgIGVtaXR0ZXIuZW1pdCgnYWJvcnQnLCAhcmVhc29uIHx8IHJlYXNvbi50eXBlID8gbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnLCByZXEpIDogcmVhc29uKTtcbiAgICB9XG5cbiAgICBlbWl0dGVyLm9uY2UoJ2Fib3J0JywgcmVqZWN0KTtcblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4gfHwgY29uZmlnLnNpZ25hbCkge1xuICAgICAgY29uZmlnLmNhbmNlbFRva2VuICYmIGNvbmZpZy5jYW5jZWxUb2tlbi5zdWJzY3JpYmUoYWJvcnQpO1xuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5hYm9ydGVkID8gYWJvcnQoKSA6IGNvbmZpZy5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUGFyc2UgdXJsXG4gICAgY29uc3QgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICBjb25zdCBwYXJzZWQgPSBuZXcgVVJMKGZ1bGxQYXRoLCAnaHR0cDovL2xvY2FsaG9zdCcpO1xuICAgIGNvbnN0IHByb3RvY29sID0gcGFyc2VkLnByb3RvY29sIHx8IHN1cHBvcnRlZFByb3RvY29sc1swXTtcblxuICAgIGlmIChwcm90b2NvbCA9PT0gJ2RhdGE6Jykge1xuICAgICAgbGV0IGNvbnZlcnRlZERhdGE7XG5cbiAgICAgIGlmIChtZXRob2QgIT09ICdHRVQnKSB7XG4gICAgICAgIHJldHVybiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB7XG4gICAgICAgICAgc3RhdHVzOiA0MDUsXG4gICAgICAgICAgc3RhdHVzVGV4dDogJ21ldGhvZCBub3QgYWxsb3dlZCcsXG4gICAgICAgICAgaGVhZGVyczoge30sXG4gICAgICAgICAgY29uZmlnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBjb252ZXJ0ZWREYXRhID0gZnJvbURhdGFVUkkoY29uZmlnLnVybCwgcmVzcG9uc2VUeXBlID09PSAnYmxvYicsIHtcbiAgICAgICAgICBCbG9iOiBjb25maWcuZW52ICYmIGNvbmZpZy5lbnYuQmxvYlxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB0aHJvdyBBeGlvc0Vycm9yLmZyb20oZXJyLCBBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgY29uZmlnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgIGNvbnZlcnRlZERhdGEgPSBjb252ZXJ0ZWREYXRhLnRvU3RyaW5nKHJlc3BvbnNlRW5jb2RpbmcpO1xuXG4gICAgICAgIGlmICghcmVzcG9uc2VFbmNvZGluZyB8fCByZXNwb25zZUVuY29kaW5nID09PSAndXRmOCcpIHtcbiAgICAgICAgICBjb252ZXJ0ZWREYXRhID0gdXRpbHMuc3RyaXBCT00oY29udmVydGVkRGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2VUeXBlID09PSAnc3RyZWFtJykge1xuICAgICAgICBjb252ZXJ0ZWREYXRhID0gc3RyZWFtLlJlYWRhYmxlLmZyb20oY29udmVydGVkRGF0YSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB7XG4gICAgICAgIGRhdGE6IGNvbnZlcnRlZERhdGEsXG4gICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICBzdGF0dXNUZXh0OiAnT0snLFxuICAgICAgICBoZWFkZXJzOiBuZXcgQXhpb3NIZWFkZXJzKCksXG4gICAgICAgIGNvbmZpZ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnRlZFByb3RvY29scy5pbmRleE9mKHByb3RvY29sKSA9PT0gLTEpIHtcbiAgICAgIHJldHVybiByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAgICdVbnN1cHBvcnRlZCBwcm90b2NvbCAnICsgcHJvdG9jb2wsXG4gICAgICAgIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULFxuICAgICAgICBjb25maWdcbiAgICAgICkpO1xuICAgIH1cblxuICAgIGNvbnN0IGhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb25maWcuaGVhZGVycykubm9ybWFsaXplKCk7XG5cbiAgICAvLyBTZXQgVXNlci1BZ2VudCAocmVxdWlyZWQgYnkgc29tZSBzZXJ2ZXJzKVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYXhpb3MvYXhpb3MvaXNzdWVzLzY5XG4gICAgLy8gVXNlci1BZ2VudCBpcyBzcGVjaWZpZWQ7IGhhbmRsZSBjYXNlIHdoZXJlIG5vIFVBIGhlYWRlciBpcyBkZXNpcmVkXG4gICAgLy8gT25seSBzZXQgaGVhZGVyIGlmIGl0IGhhc24ndCBiZWVuIHNldCBpbiBjb25maWdcbiAgICBoZWFkZXJzLnNldCgnVXNlci1BZ2VudCcsICdheGlvcy8nICsgVkVSU0lPTiwgZmFsc2UpO1xuXG4gICAgY29uc3Qgb25Eb3dubG9hZFByb2dyZXNzID0gY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcztcbiAgICBjb25zdCBvblVwbG9hZFByb2dyZXNzID0gY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3M7XG4gICAgY29uc3QgbWF4UmF0ZSA9IGNvbmZpZy5tYXhSYXRlO1xuICAgIGxldCBtYXhVcGxvYWRSYXRlID0gdW5kZWZpbmVkO1xuICAgIGxldCBtYXhEb3dubG9hZFJhdGUgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBzdXBwb3J0IGZvciBzcGVjIGNvbXBsaWFudCBGb3JtRGF0YSBvYmplY3RzXG4gICAgaWYgKHV0aWxzLmlzU3BlY0NvbXBsaWFudEZvcm0oZGF0YSkpIHtcbiAgICAgIGNvbnN0IHVzZXJCb3VuZGFyeSA9IGhlYWRlcnMuZ2V0Q29udGVudFR5cGUoL2JvdW5kYXJ5PShbLV9cXHdcXGRdezEwLDcwfSkvaSk7XG5cbiAgICAgIGRhdGEgPSBmb3JtRGF0YVRvU3RyZWFtKGRhdGEsIChmb3JtSGVhZGVycykgPT4ge1xuICAgICAgICBoZWFkZXJzLnNldChmb3JtSGVhZGVycyk7XG4gICAgICB9LCB7XG4gICAgICAgIHRhZzogYGF4aW9zLSR7VkVSU0lPTn0tYm91bmRhcnlgLFxuICAgICAgICBib3VuZGFyeTogdXNlckJvdW5kYXJ5ICYmIHVzZXJCb3VuZGFyeVsxXSB8fCB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgLy8gc3VwcG9ydCBmb3IgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZm9ybS1kYXRhIGFwaVxuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSAmJiB1dGlscy5pc0Z1bmN0aW9uKGRhdGEuZ2V0SGVhZGVycykpIHtcbiAgICAgIGhlYWRlcnMuc2V0KGRhdGEuZ2V0SGVhZGVycygpKTtcblxuICAgICAgaWYgKCFoZWFkZXJzLmhhc0NvbnRlbnRMZW5ndGgoKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGtub3duTGVuZ3RoID0gYXdhaXQgdXRpbC5wcm9taXNpZnkoZGF0YS5nZXRMZW5ndGgpLmNhbGwoZGF0YSk7XG4gICAgICAgICAgTnVtYmVyLmlzRmluaXRlKGtub3duTGVuZ3RoKSAmJiBrbm93bkxlbmd0aCA+PSAwICYmIGhlYWRlcnMuc2V0Q29udGVudExlbmd0aChrbm93bkxlbmd0aCk7XG4gICAgICAgICAgLyplc2xpbnQgbm8tZW1wdHk6MCovXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNCbG9iKGRhdGEpKSB7XG4gICAgICBkYXRhLnNpemUgJiYgaGVhZGVycy5zZXRDb250ZW50VHlwZShkYXRhLnR5cGUgfHwgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpO1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50TGVuZ3RoKGRhdGEuc2l6ZSB8fCAwKTtcbiAgICAgIGRhdGEgPSBzdHJlYW0uUmVhZGFibGUuZnJvbShyZWFkQmxvYihkYXRhKSk7XG4gICAgfSBlbHNlIGlmIChkYXRhICYmICF1dGlscy5pc1N0cmVhbShkYXRhKSkge1xuICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkge1xuICAgICAgICAvLyBOb3RoaW5nIHRvIGRvLi4uXG4gICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkpIHtcbiAgICAgICAgZGF0YSA9IEJ1ZmZlci5mcm9tKG5ldyBVaW50OEFycmF5KGRhdGEpKTtcbiAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNTdHJpbmcoZGF0YSkpIHtcbiAgICAgICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsICd1dGYtOCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgICAnRGF0YSBhZnRlciB0cmFuc2Zvcm1hdGlvbiBtdXN0IGJlIGEgc3RyaW5nLCBhbiBBcnJheUJ1ZmZlciwgYSBCdWZmZXIsIG9yIGEgU3RyZWFtJyxcbiAgICAgICAgICBBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCxcbiAgICAgICAgICBjb25maWdcbiAgICAgICAgKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCBDb250ZW50LUxlbmd0aCBoZWFkZXIgaWYgZGF0YSBleGlzdHNcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudExlbmd0aChkYXRhLmxlbmd0aCwgZmFsc2UpO1xuXG4gICAgICBpZiAoY29uZmlnLm1heEJvZHlMZW5ndGggPiAtMSAmJiBkYXRhLmxlbmd0aCA+IGNvbmZpZy5tYXhCb2R5TGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAgICAgJ1JlcXVlc3QgYm9keSBsYXJnZXIgdGhhbiBtYXhCb2R5TGVuZ3RoIGxpbWl0JyxcbiAgICAgICAgICBBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCxcbiAgICAgICAgICBjb25maWdcbiAgICAgICAgKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY29udGVudExlbmd0aCA9IHV0aWxzLnRvRmluaXRlTnVtYmVyKGhlYWRlcnMuZ2V0Q29udGVudExlbmd0aCgpKTtcblxuICAgIGlmICh1dGlscy5pc0FycmF5KG1heFJhdGUpKSB7XG4gICAgICBtYXhVcGxvYWRSYXRlID0gbWF4UmF0ZVswXTtcbiAgICAgIG1heERvd25sb2FkUmF0ZSA9IG1heFJhdGVbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIG1heFVwbG9hZFJhdGUgPSBtYXhEb3dubG9hZFJhdGUgPSBtYXhSYXRlO1xuICAgIH1cblxuICAgIGlmIChkYXRhICYmIChvblVwbG9hZFByb2dyZXNzIHx8IG1heFVwbG9hZFJhdGUpKSB7XG4gICAgICBpZiAoIXV0aWxzLmlzU3RyZWFtKGRhdGEpKSB7XG4gICAgICAgIGRhdGEgPSBzdHJlYW0uUmVhZGFibGUuZnJvbShkYXRhLCB7b2JqZWN0TW9kZTogZmFsc2V9KTtcbiAgICAgIH1cblxuICAgICAgZGF0YSA9IHN0cmVhbS5waXBlbGluZShbZGF0YSwgbmV3IEF4aW9zVHJhbnNmb3JtU3RyZWFtKHtcbiAgICAgICAgbGVuZ3RoOiBjb250ZW50TGVuZ3RoLFxuICAgICAgICBtYXhSYXRlOiB1dGlscy50b0Zpbml0ZU51bWJlcihtYXhVcGxvYWRSYXRlKVxuICAgICAgfSldLCB1dGlscy5ub29wKTtcblxuICAgICAgb25VcGxvYWRQcm9ncmVzcyAmJiBkYXRhLm9uKCdwcm9ncmVzcycsIHByb2dyZXNzID0+IHtcbiAgICAgICAgb25VcGxvYWRQcm9ncmVzcyhPYmplY3QuYXNzaWduKHByb2dyZXNzLCB7XG4gICAgICAgICAgdXBsb2FkOiB0cnVlXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBsZXQgYXV0aCA9IHVuZGVmaW5lZDtcbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIGNvbnN0IHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICBjb25zdCBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgYXV0aCA9IHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQ7XG4gICAgfVxuXG4gICAgaWYgKCFhdXRoICYmIHBhcnNlZC51c2VybmFtZSkge1xuICAgICAgY29uc3QgdXJsVXNlcm5hbWUgPSBwYXJzZWQudXNlcm5hbWU7XG4gICAgICBjb25zdCB1cmxQYXNzd29yZCA9IHBhcnNlZC5wYXNzd29yZDtcbiAgICAgIGF1dGggPSB1cmxVc2VybmFtZSArICc6JyArIHVybFBhc3N3b3JkO1xuICAgIH1cblxuICAgIGF1dGggJiYgaGVhZGVycy5kZWxldGUoJ2F1dGhvcml6YXRpb24nKTtcblxuICAgIGxldCBwYXRoO1xuXG4gICAgdHJ5IHtcbiAgICAgIHBhdGggPSBidWlsZFVSTChcbiAgICAgICAgcGFyc2VkLnBhdGhuYW1lICsgcGFyc2VkLnNlYXJjaCxcbiAgICAgICAgY29uZmlnLnBhcmFtcyxcbiAgICAgICAgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXJcbiAgICAgICkucmVwbGFjZSgvXlxcPy8sICcnKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnN0IGN1c3RvbUVyciA9IG5ldyBFcnJvcihlcnIubWVzc2FnZSk7XG4gICAgICBjdXN0b21FcnIuY29uZmlnID0gY29uZmlnO1xuICAgICAgY3VzdG9tRXJyLnVybCA9IGNvbmZpZy51cmw7XG4gICAgICBjdXN0b21FcnIuZXhpc3RzID0gdHJ1ZTtcbiAgICAgIHJldHVybiByZWplY3QoY3VzdG9tRXJyKTtcbiAgICB9XG5cbiAgICBoZWFkZXJzLnNldChcbiAgICAgICdBY2NlcHQtRW5jb2RpbmcnLFxuICAgICAgJ2d6aXAsIGNvbXByZXNzLCBkZWZsYXRlJyArIChpc0Jyb3RsaVN1cHBvcnRlZCA/ICcsIGJyJyA6ICcnKSwgZmFsc2VcbiAgICAgICk7XG5cbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgcGF0aCxcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgaGVhZGVyczogaGVhZGVycy50b0pTT04oKSxcbiAgICAgIGFnZW50czogeyBodHRwOiBjb25maWcuaHR0cEFnZW50LCBodHRwczogY29uZmlnLmh0dHBzQWdlbnQgfSxcbiAgICAgIGF1dGgsXG4gICAgICBwcm90b2NvbCxcbiAgICAgIGZhbWlseSxcbiAgICAgIGJlZm9yZVJlZGlyZWN0OiBkaXNwYXRjaEJlZm9yZVJlZGlyZWN0LFxuICAgICAgYmVmb3JlUmVkaXJlY3RzOiB7fVxuICAgIH07XG5cbiAgICAvLyBjYWNoZWFibGUtbG9va3VwIGludGVncmF0aW9uIGhvdGZpeFxuICAgICF1dGlscy5pc1VuZGVmaW5lZChsb29rdXApICYmIChvcHRpb25zLmxvb2t1cCA9IGxvb2t1cCk7XG5cbiAgICBpZiAoY29uZmlnLnNvY2tldFBhdGgpIHtcbiAgICAgIG9wdGlvbnMuc29ja2V0UGF0aCA9IGNvbmZpZy5zb2NrZXRQYXRoO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zLmhvc3RuYW1lID0gcGFyc2VkLmhvc3RuYW1lO1xuICAgICAgb3B0aW9ucy5wb3J0ID0gcGFyc2VkLnBvcnQ7XG4gICAgICBzZXRQcm94eShvcHRpb25zLCBjb25maWcucHJveHksIHByb3RvY29sICsgJy8vJyArIHBhcnNlZC5ob3N0bmFtZSArIChwYXJzZWQucG9ydCA/ICc6JyArIHBhcnNlZC5wb3J0IDogJycpICsgb3B0aW9ucy5wYXRoKTtcbiAgICB9XG5cbiAgICBsZXQgdHJhbnNwb3J0O1xuICAgIGNvbnN0IGlzSHR0cHNSZXF1ZXN0ID0gaXNIdHRwcy50ZXN0KG9wdGlvbnMucHJvdG9jb2wpO1xuICAgIG9wdGlvbnMuYWdlbnQgPSBpc0h0dHBzUmVxdWVzdCA/IGNvbmZpZy5odHRwc0FnZW50IDogY29uZmlnLmh0dHBBZ2VudDtcbiAgICBpZiAoY29uZmlnLnRyYW5zcG9ydCkge1xuICAgICAgdHJhbnNwb3J0ID0gY29uZmlnLnRyYW5zcG9ydDtcbiAgICB9IGVsc2UgaWYgKGNvbmZpZy5tYXhSZWRpcmVjdHMgPT09IDApIHtcbiAgICAgIHRyYW5zcG9ydCA9IGlzSHR0cHNSZXF1ZXN0ID8gaHR0cHMgOiBodHRwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoY29uZmlnLm1heFJlZGlyZWN0cykge1xuICAgICAgICBvcHRpb25zLm1heFJlZGlyZWN0cyA9IGNvbmZpZy5tYXhSZWRpcmVjdHM7XG4gICAgICB9XG4gICAgICBpZiAoY29uZmlnLmJlZm9yZVJlZGlyZWN0KSB7XG4gICAgICAgIG9wdGlvbnMuYmVmb3JlUmVkaXJlY3RzLmNvbmZpZyA9IGNvbmZpZy5iZWZvcmVSZWRpcmVjdDtcbiAgICAgIH1cbiAgICAgIHRyYW5zcG9ydCA9IGlzSHR0cHNSZXF1ZXN0ID8gaHR0cHNGb2xsb3cgOiBodHRwRm9sbG93O1xuICAgIH1cblxuICAgIGlmIChjb25maWcubWF4Qm9keUxlbmd0aCA+IC0xKSB7XG4gICAgICBvcHRpb25zLm1heEJvZHlMZW5ndGggPSBjb25maWcubWF4Qm9keUxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZm9sbG93LXJlZGlyZWN0cyBkb2VzIG5vdCBza2lwIGNvbXBhcmlzb24sIHNvIGl0IHNob3VsZCBhbHdheXMgc3VjY2VlZCBmb3IgYXhpb3MgLTEgdW5saW1pdGVkXG4gICAgICBvcHRpb25zLm1heEJvZHlMZW5ndGggPSBJbmZpbml0eTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmluc2VjdXJlSFRUUFBhcnNlcikge1xuICAgICAgb3B0aW9ucy5pbnNlY3VyZUhUVFBQYXJzZXIgPSBjb25maWcuaW5zZWN1cmVIVFRQUGFyc2VyO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSB0aGUgcmVxdWVzdFxuICAgIHJlcSA9IHRyYW5zcG9ydC5yZXF1ZXN0KG9wdGlvbnMsIGZ1bmN0aW9uIGhhbmRsZVJlc3BvbnNlKHJlcykge1xuICAgICAgaWYgKHJlcS5kZXN0cm95ZWQpIHJldHVybjtcblxuICAgICAgY29uc3Qgc3RyZWFtcyA9IFtyZXNdO1xuXG4gICAgICBjb25zdCByZXNwb25zZUxlbmd0aCA9ICtyZXMuaGVhZGVyc1snY29udGVudC1sZW5ndGgnXTtcblxuICAgICAgaWYgKG9uRG93bmxvYWRQcm9ncmVzcykge1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm1TdHJlYW0gPSBuZXcgQXhpb3NUcmFuc2Zvcm1TdHJlYW0oe1xuICAgICAgICAgIGxlbmd0aDogdXRpbHMudG9GaW5pdGVOdW1iZXIocmVzcG9uc2VMZW5ndGgpLFxuICAgICAgICAgIG1heFJhdGU6IHV0aWxzLnRvRmluaXRlTnVtYmVyKG1heERvd25sb2FkUmF0ZSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgb25Eb3dubG9hZFByb2dyZXNzICYmIHRyYW5zZm9ybVN0cmVhbS5vbigncHJvZ3Jlc3MnLCBwcm9ncmVzcyA9PiB7XG4gICAgICAgICAgb25Eb3dubG9hZFByb2dyZXNzKE9iamVjdC5hc3NpZ24ocHJvZ3Jlc3MsIHtcbiAgICAgICAgICAgIGRvd25sb2FkOiB0cnVlXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzdHJlYW1zLnB1c2godHJhbnNmb3JtU3RyZWFtKTtcbiAgICAgIH1cblxuICAgICAgLy8gZGVjb21wcmVzcyB0aGUgcmVzcG9uc2UgYm9keSB0cmFuc3BhcmVudGx5IGlmIHJlcXVpcmVkXG4gICAgICBsZXQgcmVzcG9uc2VTdHJlYW0gPSByZXM7XG5cbiAgICAgIC8vIHJldHVybiB0aGUgbGFzdCByZXF1ZXN0IGluIGNhc2Ugb2YgcmVkaXJlY3RzXG4gICAgICBjb25zdCBsYXN0UmVxdWVzdCA9IHJlcy5yZXEgfHwgcmVxO1xuXG4gICAgICAvLyBpZiBkZWNvbXByZXNzIGRpc2FibGVkIHdlIHNob3VsZCBub3QgZGVjb21wcmVzc1xuICAgICAgaWYgKGNvbmZpZy5kZWNvbXByZXNzICE9PSBmYWxzZSAmJiByZXMuaGVhZGVyc1snY29udGVudC1lbmNvZGluZyddKSB7XG4gICAgICAgIC8vIGlmIG5vIGNvbnRlbnQsIGJ1dCBoZWFkZXJzIHN0aWxsIHNheSB0aGF0IGl0IGlzIGVuY29kZWQsXG4gICAgICAgIC8vIHJlbW92ZSB0aGUgaGVhZGVyIG5vdCBjb25mdXNlIGRvd25zdHJlYW0gb3BlcmF0aW9uc1xuICAgICAgICBpZiAobWV0aG9kID09PSAnSEVBRCcgfHwgcmVzLnN0YXR1c0NvZGUgPT09IDIwNCkge1xuICAgICAgICAgIGRlbGV0ZSByZXMuaGVhZGVyc1snY29udGVudC1lbmNvZGluZyddO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoICgocmVzLmhlYWRlcnNbJ2NvbnRlbnQtZW5jb2RpbmcnXSB8fCAnJykudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAvKmVzbGludCBkZWZhdWx0LWNhc2U6MCovXG4gICAgICAgIGNhc2UgJ2d6aXAnOlxuICAgICAgICBjYXNlICd4LWd6aXAnOlxuICAgICAgICBjYXNlICdjb21wcmVzcyc6XG4gICAgICAgIGNhc2UgJ3gtY29tcHJlc3MnOlxuICAgICAgICAgIC8vIGFkZCB0aGUgdW56aXBwZXIgdG8gdGhlIGJvZHkgc3RyZWFtIHByb2Nlc3NpbmcgcGlwZWxpbmVcbiAgICAgICAgICBzdHJlYW1zLnB1c2goemxpYi5jcmVhdGVVbnppcCh6bGliT3B0aW9ucykpO1xuXG4gICAgICAgICAgLy8gcmVtb3ZlIHRoZSBjb250ZW50LWVuY29kaW5nIGluIG9yZGVyIHRvIG5vdCBjb25mdXNlIGRvd25zdHJlYW0gb3BlcmF0aW9uc1xuICAgICAgICAgIGRlbGV0ZSByZXMuaGVhZGVyc1snY29udGVudC1lbmNvZGluZyddO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkZWZsYXRlJzpcbiAgICAgICAgICBzdHJlYW1zLnB1c2gobmV3IFpsaWJIZWFkZXJUcmFuc2Zvcm1TdHJlYW0oKSk7XG5cbiAgICAgICAgICAvLyBhZGQgdGhlIHVuemlwcGVyIHRvIHRoZSBib2R5IHN0cmVhbSBwcm9jZXNzaW5nIHBpcGVsaW5lXG4gICAgICAgICAgc3RyZWFtcy5wdXNoKHpsaWIuY3JlYXRlVW56aXAoemxpYk9wdGlvbnMpKTtcblxuICAgICAgICAgIC8vIHJlbW92ZSB0aGUgY29udGVudC1lbmNvZGluZyBpbiBvcmRlciB0byBub3QgY29uZnVzZSBkb3duc3RyZWFtIG9wZXJhdGlvbnNcbiAgICAgICAgICBkZWxldGUgcmVzLmhlYWRlcnNbJ2NvbnRlbnQtZW5jb2RpbmcnXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYnInOlxuICAgICAgICAgIGlmIChpc0Jyb3RsaVN1cHBvcnRlZCkge1xuICAgICAgICAgICAgc3RyZWFtcy5wdXNoKHpsaWIuY3JlYXRlQnJvdGxpRGVjb21wcmVzcyhicm90bGlPcHRpb25zKSk7XG4gICAgICAgICAgICBkZWxldGUgcmVzLmhlYWRlcnNbJ2NvbnRlbnQtZW5jb2RpbmcnXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmVzcG9uc2VTdHJlYW0gPSBzdHJlYW1zLmxlbmd0aCA+IDEgPyBzdHJlYW0ucGlwZWxpbmUoc3RyZWFtcywgdXRpbHMubm9vcCkgOiBzdHJlYW1zWzBdO1xuXG4gICAgICBjb25zdCBvZmZMaXN0ZW5lcnMgPSBzdHJlYW0uZmluaXNoZWQocmVzcG9uc2VTdHJlYW0sICgpID0+IHtcbiAgICAgICAgb2ZmTGlzdGVuZXJzKCk7XG4gICAgICAgIG9uRmluaXNoZWQoKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgc3RhdHVzOiByZXMuc3RhdHVzQ29kZSxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVzLnN0YXR1c01lc3NhZ2UsXG4gICAgICAgIGhlYWRlcnM6IG5ldyBBeGlvc0hlYWRlcnMocmVzLmhlYWRlcnMpLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IGxhc3RSZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBpZiAocmVzcG9uc2VUeXBlID09PSAnc3RyZWFtJykge1xuICAgICAgICByZXNwb25zZS5kYXRhID0gcmVzcG9uc2VTdHJlYW07XG4gICAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlQnVmZmVyID0gW107XG4gICAgICAgIGxldCB0b3RhbFJlc3BvbnNlQnl0ZXMgPSAwO1xuXG4gICAgICAgIHJlc3BvbnNlU3RyZWFtLm9uKCdkYXRhJywgZnVuY3Rpb24gaGFuZGxlU3RyZWFtRGF0YShjaHVuaykge1xuICAgICAgICAgIHJlc3BvbnNlQnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgICAgIHRvdGFsUmVzcG9uc2VCeXRlcyArPSBjaHVuay5sZW5ndGg7XG5cbiAgICAgICAgICAvLyBtYWtlIHN1cmUgdGhlIGNvbnRlbnQgbGVuZ3RoIGlzIG5vdCBvdmVyIHRoZSBtYXhDb250ZW50TGVuZ3RoIGlmIHNwZWNpZmllZFxuICAgICAgICAgIGlmIChjb25maWcubWF4Q29udGVudExlbmd0aCA+IC0xICYmIHRvdGFsUmVzcG9uc2VCeXRlcyA+IGNvbmZpZy5tYXhDb250ZW50TGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBzdHJlYW0uZGVzdHJveSgpIGVtaXQgYWJvcnRlZCBldmVudCBiZWZvcmUgY2FsbGluZyByZWplY3QoKSBvbiBOb2RlLmpzIHYxNlxuICAgICAgICAgICAgcmVqZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmVzcG9uc2VTdHJlYW0uZGVzdHJveSgpO1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdtYXhDb250ZW50TGVuZ3RoIHNpemUgb2YgJyArIGNvbmZpZy5tYXhDb250ZW50TGVuZ3RoICsgJyBleGNlZWRlZCcsXG4gICAgICAgICAgICAgIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgY29uZmlnLCBsYXN0UmVxdWVzdCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmVzcG9uc2VTdHJlYW0ub24oJ2Fib3J0ZWQnLCBmdW5jdGlvbiBoYW5kbGVyU3RyZWFtQWJvcnRlZCgpIHtcbiAgICAgICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgICAgICdtYXhDb250ZW50TGVuZ3RoIHNpemUgb2YgJyArIGNvbmZpZy5tYXhDb250ZW50TGVuZ3RoICsgJyBleGNlZWRlZCcsXG4gICAgICAgICAgICBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0UsXG4gICAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgICBsYXN0UmVxdWVzdFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmVzcG9uc2VTdHJlYW0uZGVzdHJveShlcnIpO1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXNwb25zZVN0cmVhbS5vbignZXJyb3InLCBmdW5jdGlvbiBoYW5kbGVTdHJlYW1FcnJvcihlcnIpIHtcbiAgICAgICAgICBpZiAocmVxLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgIHJlamVjdChBeGlvc0Vycm9yLmZyb20oZXJyLCBudWxsLCBjb25maWcsIGxhc3RSZXF1ZXN0KSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJlc3BvbnNlU3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiBoYW5kbGVTdHJlYW1FbmQoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCByZXNwb25zZURhdGEgPSByZXNwb25zZUJ1ZmZlci5sZW5ndGggPT09IDEgPyByZXNwb25zZUJ1ZmZlclswXSA6IEJ1ZmZlci5jb25jYXQocmVzcG9uc2VCdWZmZXIpO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlVHlwZSAhPT0gJ2FycmF5YnVmZmVyJykge1xuICAgICAgICAgICAgICByZXNwb25zZURhdGEgPSByZXNwb25zZURhdGEudG9TdHJpbmcocmVzcG9uc2VFbmNvZGluZyk7XG4gICAgICAgICAgICAgIGlmICghcmVzcG9uc2VFbmNvZGluZyB8fCByZXNwb25zZUVuY29kaW5nID09PSAndXRmOCcpIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZURhdGEgPSB1dGlscy5zdHJpcEJPTShyZXNwb25zZURhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNwb25zZS5kYXRhID0gcmVzcG9uc2VEYXRhO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChBeGlvc0Vycm9yLmZyb20oZXJyLCBudWxsLCBjb25maWcsIHJlc3BvbnNlLnJlcXVlc3QsIHJlc3BvbnNlKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGVtaXR0ZXIub25jZSgnYWJvcnQnLCBlcnIgPT4ge1xuICAgICAgICBpZiAoIXJlc3BvbnNlU3RyZWFtLmRlc3Ryb3llZCkge1xuICAgICAgICAgIHJlc3BvbnNlU3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgICByZXNwb25zZVN0cmVhbS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZW1pdHRlci5vbmNlKCdhYm9ydCcsIGVyciA9PiB7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICAgIHJlcS5kZXN0cm95KGVycik7XG4gICAgfSk7XG5cbiAgICAvLyBIYW5kbGUgZXJyb3JzXG4gICAgcmVxLm9uKCdlcnJvcicsIGZ1bmN0aW9uIGhhbmRsZVJlcXVlc3RFcnJvcihlcnIpIHtcbiAgICAgIC8vIEB0b2RvIHJlbW92ZVxuICAgICAgLy8gaWYgKHJlcS5hYm9ydGVkICYmIGVyci5jb2RlICE9PSBBeGlvc0Vycm9yLkVSUl9GUl9UT09fTUFOWV9SRURJUkVDVFMpIHJldHVybjtcbiAgICAgIHJlamVjdChBeGlvc0Vycm9yLmZyb20oZXJyLCBudWxsLCBjb25maWcsIHJlcSkpO1xuICAgIH0pO1xuXG4gICAgLy8gc2V0IHRjcCBrZWVwIGFsaXZlIHRvIHByZXZlbnQgZHJvcCBjb25uZWN0aW9uIGJ5IHBlZXJcbiAgICByZXEub24oJ3NvY2tldCcsIGZ1bmN0aW9uIGhhbmRsZVJlcXVlc3RTb2NrZXQoc29ja2V0KSB7XG4gICAgICAvLyBkZWZhdWx0IGludGVydmFsIG9mIHNlbmRpbmcgYWNrIHBhY2tldCBpcyAxIG1pbnV0ZVxuICAgICAgc29ja2V0LnNldEtlZXBBbGl2ZSh0cnVlLCAxMDAwICogNjApO1xuICAgIH0pO1xuXG4gICAgLy8gSGFuZGxlIHJlcXVlc3QgdGltZW91dFxuICAgIGlmIChjb25maWcudGltZW91dCkge1xuICAgICAgLy8gVGhpcyBpcyBmb3JjaW5nIGEgaW50IHRpbWVvdXQgdG8gYXZvaWQgcHJvYmxlbXMgaWYgdGhlIGByZXFgIGludGVyZmFjZSBkb2Vzbid0IGhhbmRsZSBvdGhlciB0eXBlcy5cbiAgICAgIGNvbnN0IHRpbWVvdXQgPSBwYXJzZUludChjb25maWcudGltZW91dCwgMTApO1xuXG4gICAgICBpZiAoTnVtYmVyLmlzTmFOKHRpbWVvdXQpKSB7XG4gICAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgICAnZXJyb3IgdHJ5aW5nIHRvIHBhcnNlIGBjb25maWcudGltZW91dGAgdG8gaW50JyxcbiAgICAgICAgICBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFLFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICByZXFcbiAgICAgICAgKSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBTb21ldGltZSwgdGhlIHJlc3BvbnNlIHdpbGwgYmUgdmVyeSBzbG93LCBhbmQgZG9lcyBub3QgcmVzcG9uZCwgdGhlIGNvbm5lY3QgZXZlbnQgd2lsbCBiZSBibG9jayBieSBldmVudCBsb29wIHN5c3RlbS5cbiAgICAgIC8vIEFuZCB0aW1lciBjYWxsYmFjayB3aWxsIGJlIGZpcmVkLCBhbmQgYWJvcnQoKSB3aWxsIGJlIGludm9rZWQgYmVmb3JlIGNvbm5lY3Rpb24sIHRoZW4gZ2V0IFwic29ja2V0IGhhbmcgdXBcIiBhbmQgY29kZSBFQ09OTlJFU0VULlxuICAgICAgLy8gQXQgdGhpcyB0aW1lLCBpZiB3ZSBoYXZlIGEgbGFyZ2UgbnVtYmVyIG9mIHJlcXVlc3QsIG5vZGVqcyB3aWxsIGhhbmcgdXAgc29tZSBzb2NrZXQgb24gYmFja2dyb3VuZC4gYW5kIHRoZSBudW1iZXIgd2lsbCB1cCBhbmQgdXAuXG4gICAgICAvLyBBbmQgdGhlbiB0aGVzZSBzb2NrZXQgd2hpY2ggYmUgaGFuZyB1cCB3aWxsIGRldm91cmluZyBDUFUgbGl0dGxlIGJ5IGxpdHRsZS5cbiAgICAgIC8vIENsaWVudFJlcXVlc3Quc2V0VGltZW91dCB3aWxsIGJlIGZpcmVkIG9uIHRoZSBzcGVjaWZ5IG1pbGxpc2Vjb25kcywgYW5kIGNhbiBtYWtlIHN1cmUgdGhhdCBhYm9ydCgpIHdpbGwgYmUgZmlyZWQgYWZ0ZXIgY29ubmVjdC5cbiAgICAgIHJlcS5zZXRUaW1lb3V0KHRpbWVvdXQsIGZ1bmN0aW9uIGhhbmRsZVJlcXVlc3RUaW1lb3V0KCkge1xuICAgICAgICBpZiAoaXNEb25lKSByZXR1cm47XG4gICAgICAgIGxldCB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXQgPyAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnIDogJ3RpbWVvdXQgZXhjZWVkZWQnO1xuICAgICAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsIHx8IHRyYW5zaXRpb25hbERlZmF1bHRzO1xuICAgICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UsXG4gICAgICAgICAgdHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyBBeGlvc0Vycm9yLkVUSU1FRE9VVCA6IEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICByZXFcbiAgICAgICAgKSk7XG4gICAgICAgIGFib3J0KCk7XG4gICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICBpZiAodXRpbHMuaXNTdHJlYW0oZGF0YSkpIHtcbiAgICAgIGxldCBlbmRlZCA9IGZhbHNlO1xuICAgICAgbGV0IGVycm9yZWQgPSBmYWxzZTtcblxuICAgICAgZGF0YS5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICBlbmRlZCA9IHRydWU7XG4gICAgICB9KTtcblxuICAgICAgZGF0YS5vbmNlKCdlcnJvcicsIGVyciA9PiB7XG4gICAgICAgIGVycm9yZWQgPSB0cnVlO1xuICAgICAgICByZXEuZGVzdHJveShlcnIpO1xuICAgICAgfSk7XG5cbiAgICAgIGRhdGEub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICBpZiAoIWVuZGVkICYmICFlcnJvcmVkKSB7XG4gICAgICAgICAgYWJvcnQobmV3IENhbmNlbGVkRXJyb3IoJ1JlcXVlc3Qgc3RyZWFtIGhhcyBiZWVuIGFib3J0ZWQnLCBjb25maWcsIHJlcSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgZGF0YS5waXBlKHJlcSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcS5lbmQoZGF0YSk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGNvbnN0IF9fc2V0UHJveHkgPSBzZXRQcm94eTtcbiIsICJleHBvcnQgY29uc3QgVkVSU0lPTiA9IFwiMS43LjJcIjsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZVByb3RvY29sKHVybCkge1xuICBjb25zdCBtYXRjaCA9IC9eKFstK1xcd117MSwyNX0pKDo/XFwvXFwvfDopLy5leGVjKHVybCk7XG4gIHJldHVybiBtYXRjaCAmJiBtYXRjaFsxXSB8fCAnJztcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgcGFyc2VQcm90b2NvbCBmcm9tICcuL3BhcnNlUHJvdG9jb2wuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuY29uc3QgREFUQV9VUkxfUEFUVEVSTiA9IC9eKD86KFteO10rKTspPyg/OlteO10rOyk/KGJhc2U2NHwpLChbXFxzXFxTXSopJC87XG5cbi8qKlxuICogUGFyc2UgZGF0YSB1cmkgdG8gYSBCdWZmZXIgb3IgQmxvYlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmlcbiAqIEBwYXJhbSB7P0Jvb2xlYW59IGFzQmxvYlxuICogQHBhcmFtIHs/T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0gez9GdW5jdGlvbn0gb3B0aW9ucy5CbG9iXG4gKlxuICogQHJldHVybnMge0J1ZmZlcnxCbG9ifVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmcm9tRGF0YVVSSSh1cmksIGFzQmxvYiwgb3B0aW9ucykge1xuICBjb25zdCBfQmxvYiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5CbG9iIHx8IHBsYXRmb3JtLmNsYXNzZXMuQmxvYjtcbiAgY29uc3QgcHJvdG9jb2wgPSBwYXJzZVByb3RvY29sKHVyaSk7XG5cbiAgaWYgKGFzQmxvYiA9PT0gdW5kZWZpbmVkICYmIF9CbG9iKSB7XG4gICAgYXNCbG9iID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChwcm90b2NvbCA9PT0gJ2RhdGEnKSB7XG4gICAgdXJpID0gcHJvdG9jb2wubGVuZ3RoID8gdXJpLnNsaWNlKHByb3RvY29sLmxlbmd0aCArIDEpIDogdXJpO1xuXG4gICAgY29uc3QgbWF0Y2ggPSBEQVRBX1VSTF9QQVRURVJOLmV4ZWModXJpKTtcblxuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdJbnZhbGlkIFVSTCcsIEF4aW9zRXJyb3IuRVJSX0lOVkFMSURfVVJMKTtcbiAgICB9XG5cbiAgICBjb25zdCBtaW1lID0gbWF0Y2hbMV07XG4gICAgY29uc3QgaXNCYXNlNjQgPSBtYXRjaFsyXTtcbiAgICBjb25zdCBib2R5ID0gbWF0Y2hbM107XG4gICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmZyb20oZGVjb2RlVVJJQ29tcG9uZW50KGJvZHkpLCBpc0Jhc2U2NCA/ICdiYXNlNjQnIDogJ3V0ZjgnKTtcblxuICAgIGlmIChhc0Jsb2IpIHtcbiAgICAgIGlmICghX0Jsb2IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ0Jsb2IgaXMgbm90IHN1cHBvcnRlZCcsIEF4aW9zRXJyb3IuRVJSX05PVF9TVVBQT1JUKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBfQmxvYihbYnVmZmVyXSwge3R5cGU6IG1pbWV9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmZmVyO1xuICB9XG5cbiAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ1Vuc3VwcG9ydGVkIHByb3RvY29sICcgKyBwcm90b2NvbCwgQXhpb3NFcnJvci5FUlJfTk9UX1NVUFBPUlQpO1xufVxuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHN0cmVhbSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCB0aHJvdHRsZSBmcm9tICcuL3Rocm90dGxlLmpzJztcbmltcG9ydCBzcGVlZG9tZXRlciBmcm9tICcuL3NwZWVkb21ldGVyLmpzJztcblxuY29uc3Qga0ludGVybmFscyA9IFN5bWJvbCgnaW50ZXJuYWxzJyk7XG5cbmNsYXNzIEF4aW9zVHJhbnNmb3JtU3RyZWFtIGV4dGVuZHMgc3RyZWFtLlRyYW5zZm9ybXtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB1dGlscy50b0ZsYXRPYmplY3Qob3B0aW9ucywge1xuICAgICAgbWF4UmF0ZTogMCxcbiAgICAgIGNodW5rU2l6ZTogNjQgKiAxMDI0LFxuICAgICAgbWluQ2h1bmtTaXplOiAxMDAsXG4gICAgICB0aW1lV2luZG93OiA1MDAsXG4gICAgICB0aWNrc1JhdGU6IDIsXG4gICAgICBzYW1wbGVzQ291bnQ6IDE1XG4gICAgfSwgbnVsbCwgKHByb3AsIHNvdXJjZSkgPT4ge1xuICAgICAgcmV0dXJuICF1dGlscy5pc1VuZGVmaW5lZChzb3VyY2VbcHJvcF0pO1xuICAgIH0pO1xuXG4gICAgc3VwZXIoe1xuICAgICAgcmVhZGFibGVIaWdoV2F0ZXJNYXJrOiBvcHRpb25zLmNodW5rU2l6ZVxuICAgIH0pO1xuXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBjb25zdCBpbnRlcm5hbHMgPSB0aGlzW2tJbnRlcm5hbHNdID0ge1xuICAgICAgbGVuZ3RoOiBvcHRpb25zLmxlbmd0aCxcbiAgICAgIHRpbWVXaW5kb3c6IG9wdGlvbnMudGltZVdpbmRvdyxcbiAgICAgIHRpY2tzUmF0ZTogb3B0aW9ucy50aWNrc1JhdGUsXG4gICAgICBjaHVua1NpemU6IG9wdGlvbnMuY2h1bmtTaXplLFxuICAgICAgbWF4UmF0ZTogb3B0aW9ucy5tYXhSYXRlLFxuICAgICAgbWluQ2h1bmtTaXplOiBvcHRpb25zLm1pbkNodW5rU2l6ZSxcbiAgICAgIGJ5dGVzU2VlbjogMCxcbiAgICAgIGlzQ2FwdHVyZWQ6IGZhbHNlLFxuICAgICAgbm90aWZpZWRCeXRlc0xvYWRlZDogMCxcbiAgICAgIHRzOiBEYXRlLm5vdygpLFxuICAgICAgYnl0ZXM6IDAsXG4gICAgICBvblJlYWRDYWxsYmFjazogbnVsbFxuICAgIH07XG5cbiAgICBjb25zdCBfc3BlZWRvbWV0ZXIgPSBzcGVlZG9tZXRlcihpbnRlcm5hbHMudGlja3NSYXRlICogb3B0aW9ucy5zYW1wbGVzQ291bnQsIGludGVybmFscy50aW1lV2luZG93KTtcblxuICAgIHRoaXMub24oJ25ld0xpc3RlbmVyJywgZXZlbnQgPT4ge1xuICAgICAgaWYgKGV2ZW50ID09PSAncHJvZ3Jlc3MnKSB7XG4gICAgICAgIGlmICghaW50ZXJuYWxzLmlzQ2FwdHVyZWQpIHtcbiAgICAgICAgICBpbnRlcm5hbHMuaXNDYXB0dXJlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGxldCBieXRlc05vdGlmaWVkID0gMDtcblxuICAgIGludGVybmFscy51cGRhdGVQcm9ncmVzcyA9IHRocm90dGxlKGZ1bmN0aW9uIHRocm90dGxlZEhhbmRsZXIoKSB7XG4gICAgICBjb25zdCB0b3RhbEJ5dGVzID0gaW50ZXJuYWxzLmxlbmd0aDtcbiAgICAgIGNvbnN0IGJ5dGVzVHJhbnNmZXJyZWQgPSBpbnRlcm5hbHMuYnl0ZXNTZWVuO1xuICAgICAgY29uc3QgcHJvZ3Jlc3NCeXRlcyA9IGJ5dGVzVHJhbnNmZXJyZWQgLSBieXRlc05vdGlmaWVkO1xuICAgICAgaWYgKCFwcm9ncmVzc0J5dGVzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm47XG5cbiAgICAgIGNvbnN0IHJhdGUgPSBfc3BlZWRvbWV0ZXIocHJvZ3Jlc3NCeXRlcyk7XG5cbiAgICAgIGJ5dGVzTm90aWZpZWQgPSBieXRlc1RyYW5zZmVycmVkO1xuXG4gICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgc2VsZi5lbWl0KCdwcm9ncmVzcycsIHtcbiAgICAgICAgICBsb2FkZWQ6IGJ5dGVzVHJhbnNmZXJyZWQsXG4gICAgICAgICAgdG90YWw6IHRvdGFsQnl0ZXMsXG4gICAgICAgICAgcHJvZ3Jlc3M6IHRvdGFsQnl0ZXMgPyAoYnl0ZXNUcmFuc2ZlcnJlZCAvIHRvdGFsQnl0ZXMpIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGJ5dGVzOiBwcm9ncmVzc0J5dGVzLFxuICAgICAgICAgIHJhdGU6IHJhdGUgPyByYXRlIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGVzdGltYXRlZDogcmF0ZSAmJiB0b3RhbEJ5dGVzICYmIGJ5dGVzVHJhbnNmZXJyZWQgPD0gdG90YWxCeXRlcyA/XG4gICAgICAgICAgICAodG90YWxCeXRlcyAtIGJ5dGVzVHJhbnNmZXJyZWQpIC8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBsZW5ndGhDb21wdXRhYmxlOiB0b3RhbEJ5dGVzICE9IG51bGxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LCBpbnRlcm5hbHMudGlja3NSYXRlKTtcblxuICAgIGNvbnN0IG9uRmluaXNoID0gKCkgPT4ge1xuICAgICAgaW50ZXJuYWxzLnVwZGF0ZVByb2dyZXNzLmNhbGwodHJ1ZSk7XG4gICAgfTtcblxuICAgIHRoaXMub25jZSgnZW5kJywgb25GaW5pc2gpO1xuICAgIHRoaXMub25jZSgnZXJyb3InLCBvbkZpbmlzaCk7XG4gIH1cblxuICBfcmVhZChzaXplKSB7XG4gICAgY29uc3QgaW50ZXJuYWxzID0gdGhpc1trSW50ZXJuYWxzXTtcblxuICAgIGlmIChpbnRlcm5hbHMub25SZWFkQ2FsbGJhY2spIHtcbiAgICAgIGludGVybmFscy5vblJlYWRDYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJldHVybiBzdXBlci5fcmVhZChzaXplKTtcbiAgfVxuXG4gIF90cmFuc2Zvcm0oY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGludGVybmFscyA9IHRoaXNba0ludGVybmFsc107XG4gICAgY29uc3QgbWF4UmF0ZSA9IGludGVybmFscy5tYXhSYXRlO1xuXG4gICAgY29uc3QgcmVhZGFibGVIaWdoV2F0ZXJNYXJrID0gdGhpcy5yZWFkYWJsZUhpZ2hXYXRlck1hcms7XG5cbiAgICBjb25zdCB0aW1lV2luZG93ID0gaW50ZXJuYWxzLnRpbWVXaW5kb3c7XG5cbiAgICBjb25zdCBkaXZpZGVyID0gMTAwMCAvIHRpbWVXaW5kb3c7XG4gICAgY29uc3QgYnl0ZXNUaHJlc2hvbGQgPSAobWF4UmF0ZSAvIGRpdmlkZXIpO1xuICAgIGNvbnN0IG1pbkNodW5rU2l6ZSA9IGludGVybmFscy5taW5DaHVua1NpemUgIT09IGZhbHNlID8gTWF0aC5tYXgoaW50ZXJuYWxzLm1pbkNodW5rU2l6ZSwgYnl0ZXNUaHJlc2hvbGQgKiAwLjAxKSA6IDA7XG5cbiAgICBmdW5jdGlvbiBwdXNoQ2h1bmsoX2NodW5rLCBfY2FsbGJhY2spIHtcbiAgICAgIGNvbnN0IGJ5dGVzID0gQnVmZmVyLmJ5dGVMZW5ndGgoX2NodW5rKTtcbiAgICAgIGludGVybmFscy5ieXRlc1NlZW4gKz0gYnl0ZXM7XG4gICAgICBpbnRlcm5hbHMuYnl0ZXMgKz0gYnl0ZXM7XG5cbiAgICAgIGlmIChpbnRlcm5hbHMuaXNDYXB0dXJlZCkge1xuICAgICAgICBpbnRlcm5hbHMudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGYucHVzaChfY2h1bmspKSB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soX2NhbGxiYWNrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludGVybmFscy5vblJlYWRDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgICBpbnRlcm5hbHMub25SZWFkQ2FsbGJhY2sgPSBudWxsO1xuICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soX2NhbGxiYWNrKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB0cmFuc2Zvcm1DaHVuayA9IChfY2h1bmssIF9jYWxsYmFjaykgPT4ge1xuICAgICAgY29uc3QgY2h1bmtTaXplID0gQnVmZmVyLmJ5dGVMZW5ndGgoX2NodW5rKTtcbiAgICAgIGxldCBjaHVua1JlbWFpbmRlciA9IG51bGw7XG4gICAgICBsZXQgbWF4Q2h1bmtTaXplID0gcmVhZGFibGVIaWdoV2F0ZXJNYXJrO1xuICAgICAgbGV0IGJ5dGVzTGVmdDtcbiAgICAgIGxldCBwYXNzZWQgPSAwO1xuXG4gICAgICBpZiAobWF4UmF0ZSkge1xuICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXG4gICAgICAgIGlmICghaW50ZXJuYWxzLnRzIHx8IChwYXNzZWQgPSAobm93IC0gaW50ZXJuYWxzLnRzKSkgPj0gdGltZVdpbmRvdykge1xuICAgICAgICAgIGludGVybmFscy50cyA9IG5vdztcbiAgICAgICAgICBieXRlc0xlZnQgPSBieXRlc1RocmVzaG9sZCAtIGludGVybmFscy5ieXRlcztcbiAgICAgICAgICBpbnRlcm5hbHMuYnl0ZXMgPSBieXRlc0xlZnQgPCAwID8gLWJ5dGVzTGVmdCA6IDA7XG4gICAgICAgICAgcGFzc2VkID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGJ5dGVzTGVmdCA9IGJ5dGVzVGhyZXNob2xkIC0gaW50ZXJuYWxzLmJ5dGVzO1xuICAgICAgfVxuXG4gICAgICBpZiAobWF4UmF0ZSkge1xuICAgICAgICBpZiAoYnl0ZXNMZWZ0IDw9IDApIHtcbiAgICAgICAgICAvLyBuZXh0IHRpbWUgd2luZG93XG4gICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgX2NhbGxiYWNrKG51bGwsIF9jaHVuayk7XG4gICAgICAgICAgfSwgdGltZVdpbmRvdyAtIHBhc3NlZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYnl0ZXNMZWZ0IDwgbWF4Q2h1bmtTaXplKSB7XG4gICAgICAgICAgbWF4Q2h1bmtTaXplID0gYnl0ZXNMZWZ0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXhDaHVua1NpemUgJiYgY2h1bmtTaXplID4gbWF4Q2h1bmtTaXplICYmIChjaHVua1NpemUgLSBtYXhDaHVua1NpemUpID4gbWluQ2h1bmtTaXplKSB7XG4gICAgICAgIGNodW5rUmVtYWluZGVyID0gX2NodW5rLnN1YmFycmF5KG1heENodW5rU2l6ZSk7XG4gICAgICAgIF9jaHVuayA9IF9jaHVuay5zdWJhcnJheSgwLCBtYXhDaHVua1NpemUpO1xuICAgICAgfVxuXG4gICAgICBwdXNoQ2h1bmsoX2NodW5rLCBjaHVua1JlbWFpbmRlciA/ICgpID0+IHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhfY2FsbGJhY2ssIG51bGwsIGNodW5rUmVtYWluZGVyKTtcbiAgICAgIH0gOiBfY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICB0cmFuc2Zvcm1DaHVuayhjaHVuaywgZnVuY3Rpb24gdHJhbnNmb3JtTmV4dENodW5rKGVyciwgX2NodW5rKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2NodW5rKSB7XG4gICAgICAgIHRyYW5zZm9ybUNodW5rKF9jaHVuaywgdHJhbnNmb3JtTmV4dENodW5rKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc2V0TGVuZ3RoKGxlbmd0aCkge1xuICAgIHRoaXNba0ludGVybmFsc10ubGVuZ3RoID0gK2xlbmd0aDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBeGlvc1RyYW5zZm9ybVN0cmVhbTtcbiIsICIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVGhyb3R0bGUgZGVjb3JhdG9yXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtOdW1iZXJ9IGZyZXFcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiB0aHJvdHRsZShmbiwgZnJlcSkge1xuICBsZXQgdGltZXN0YW1wID0gMDtcbiAgY29uc3QgdGhyZXNob2xkID0gMTAwMCAvIGZyZXE7XG4gIGxldCB0aW1lciA9IG51bGw7XG4gIHJldHVybiBmdW5jdGlvbiB0aHJvdHRsZWQoKSB7XG4gICAgY29uc3QgZm9yY2UgPSB0aGlzID09PSB0cnVlO1xuXG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBpZiAoZm9yY2UgfHwgbm93IC0gdGltZXN0YW1wID4gdGhyZXNob2xkKSB7XG4gICAgICBpZiAodGltZXIpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgfVxuICAgICAgdGltZXN0YW1wID0gbm93O1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIGlmICghdGltZXIpIHtcbiAgICAgIHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICB9LCB0aHJlc2hvbGQgLSAobm93IC0gdGltZXN0YW1wKSk7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCB0aHJvdHRsZTtcbiIsICIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2FsY3VsYXRlIGRhdGEgbWF4UmF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtzYW1wbGVzQ291bnQ9IDEwXVxuICogQHBhcmFtIHtOdW1iZXJ9IFttaW49IDEwMDBdXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHNwZWVkb21ldGVyKHNhbXBsZXNDb3VudCwgbWluKSB7XG4gIHNhbXBsZXNDb3VudCA9IHNhbXBsZXNDb3VudCB8fCAxMDtcbiAgY29uc3QgYnl0ZXMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgY29uc3QgdGltZXN0YW1wcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBsZXQgaGVhZCA9IDA7XG4gIGxldCB0YWlsID0gMDtcbiAgbGV0IGZpcnN0U2FtcGxlVFM7XG5cbiAgbWluID0gbWluICE9PSB1bmRlZmluZWQgPyBtaW4gOiAxMDAwO1xuXG4gIHJldHVybiBmdW5jdGlvbiBwdXNoKGNodW5rTGVuZ3RoKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgIGNvbnN0IHN0YXJ0ZWRBdCA9IHRpbWVzdGFtcHNbdGFpbF07XG5cbiAgICBpZiAoIWZpcnN0U2FtcGxlVFMpIHtcbiAgICAgIGZpcnN0U2FtcGxlVFMgPSBub3c7XG4gICAgfVxuXG4gICAgYnl0ZXNbaGVhZF0gPSBjaHVua0xlbmd0aDtcbiAgICB0aW1lc3RhbXBzW2hlYWRdID0gbm93O1xuXG4gICAgbGV0IGkgPSB0YWlsO1xuICAgIGxldCBieXRlc0NvdW50ID0gMDtcblxuICAgIHdoaWxlIChpICE9PSBoZWFkKSB7XG4gICAgICBieXRlc0NvdW50ICs9IGJ5dGVzW2krK107XG4gICAgICBpID0gaSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBoZWFkID0gKGhlYWQgKyAxKSAlIHNhbXBsZXNDb3VudDtcblxuICAgIGlmIChoZWFkID09PSB0YWlsKSB7XG4gICAgICB0YWlsID0gKHRhaWwgKyAxKSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBpZiAobm93IC0gZmlyc3RTYW1wbGVUUyA8IG1pbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBhc3NlZCA9IHN0YXJ0ZWRBdCAmJiBub3cgLSBzdGFydGVkQXQ7XG5cbiAgICByZXR1cm4gcGFzc2VkID8gTWF0aC5yb3VuZChieXRlc0NvdW50ICogMTAwMCAvIHBhc3NlZCkgOiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNwZWVkb21ldGVyO1xuIiwgImltcG9ydCB7VGV4dEVuY29kZXJ9IGZyb20gJ3V0aWwnO1xuaW1wb3J0IHtSZWFkYWJsZX0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmltcG9ydCByZWFkQmxvYiBmcm9tIFwiLi9yZWFkQmxvYi5qc1wiO1xuXG5jb25zdCBCT1VOREFSWV9BTFBIQUJFVCA9IHV0aWxzLkFMUEhBQkVULkFMUEhBX0RJR0lUICsgJy1fJztcblxuY29uc3QgdGV4dEVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcblxuY29uc3QgQ1JMRiA9ICdcXHJcXG4nO1xuY29uc3QgQ1JMRl9CWVRFUyA9IHRleHRFbmNvZGVyLmVuY29kZShDUkxGKTtcbmNvbnN0IENSTEZfQllURVNfQ09VTlQgPSAyO1xuXG5jbGFzcyBGb3JtRGF0YVBhcnQge1xuICBjb25zdHJ1Y3RvcihuYW1lLCB2YWx1ZSkge1xuICAgIGNvbnN0IHtlc2NhcGVOYW1lfSA9IHRoaXMuY29uc3RydWN0b3I7XG4gICAgY29uc3QgaXNTdHJpbmdWYWx1ZSA9IHV0aWxzLmlzU3RyaW5nKHZhbHVlKTtcblxuICAgIGxldCBoZWFkZXJzID0gYENvbnRlbnQtRGlzcG9zaXRpb246IGZvcm0tZGF0YTsgbmFtZT1cIiR7ZXNjYXBlTmFtZShuYW1lKX1cIiR7XG4gICAgICAhaXNTdHJpbmdWYWx1ZSAmJiB2YWx1ZS5uYW1lID8gYDsgZmlsZW5hbWU9XCIke2VzY2FwZU5hbWUodmFsdWUubmFtZSl9XCJgIDogJydcbiAgICB9JHtDUkxGfWA7XG5cbiAgICBpZiAoaXNTdHJpbmdWYWx1ZSkge1xuICAgICAgdmFsdWUgPSB0ZXh0RW5jb2Rlci5lbmNvZGUoU3RyaW5nKHZhbHVlKS5yZXBsYWNlKC9cXHI/XFxufFxcclxcbj8vZywgQ1JMRikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkZXJzICs9IGBDb250ZW50LVR5cGU6ICR7dmFsdWUudHlwZSB8fCBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwifSR7Q1JMRn1gXG4gICAgfVxuXG4gICAgdGhpcy5oZWFkZXJzID0gdGV4dEVuY29kZXIuZW5jb2RlKGhlYWRlcnMgKyBDUkxGKTtcblxuICAgIHRoaXMuY29udGVudExlbmd0aCA9IGlzU3RyaW5nVmFsdWUgPyB2YWx1ZS5ieXRlTGVuZ3RoIDogdmFsdWUuc2l6ZTtcblxuICAgIHRoaXMuc2l6ZSA9IHRoaXMuaGVhZGVycy5ieXRlTGVuZ3RoICsgdGhpcy5jb250ZW50TGVuZ3RoICsgQ1JMRl9CWVRFU19DT1VOVDtcblxuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgYXN5bmMgKmVuY29kZSgpe1xuICAgIHlpZWxkIHRoaXMuaGVhZGVycztcblxuICAgIGNvbnN0IHt2YWx1ZX0gPSB0aGlzO1xuXG4gICAgaWYodXRpbHMuaXNUeXBlZEFycmF5KHZhbHVlKSkge1xuICAgICAgeWllbGQgdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHlpZWxkKiByZWFkQmxvYih2YWx1ZSk7XG4gICAgfVxuXG4gICAgeWllbGQgQ1JMRl9CWVRFUztcbiAgfVxuXG4gIHN0YXRpYyBlc2NhcGVOYW1lKG5hbWUpIHtcbiAgICAgIHJldHVybiBTdHJpbmcobmFtZSkucmVwbGFjZSgvW1xcclxcblwiXS9nLCAobWF0Y2gpID0+ICh7XG4gICAgICAgICdcXHInIDogJyUwRCcsXG4gICAgICAgICdcXG4nIDogJyUwQScsXG4gICAgICAgICdcIicgOiAnJTIyJyxcbiAgICAgIH1bbWF0Y2hdKSk7XG4gIH1cbn1cblxuY29uc3QgZm9ybURhdGFUb1N0cmVhbSA9IChmb3JtLCBoZWFkZXJzSGFuZGxlciwgb3B0aW9ucykgPT4ge1xuICBjb25zdCB7XG4gICAgdGFnID0gJ2Zvcm0tZGF0YS1ib3VuZGFyeScsXG4gICAgc2l6ZSA9IDI1LFxuICAgIGJvdW5kYXJ5ID0gdGFnICsgJy0nICsgdXRpbHMuZ2VuZXJhdGVTdHJpbmcoc2l6ZSwgQk9VTkRBUllfQUxQSEFCRVQpXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuXG4gIGlmKCF1dGlscy5pc0Zvcm1EYXRhKGZvcm0pKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdGb3JtRGF0YSBpbnN0YW5jZSByZXF1aXJlZCcpO1xuICB9XG5cbiAgaWYgKGJvdW5kYXJ5Lmxlbmd0aCA8IDEgfHwgYm91bmRhcnkubGVuZ3RoID4gNzApIHtcbiAgICB0aHJvdyBFcnJvcignYm91bmRhcnkgbXVzdCBiZSAxMC03MCBjaGFyYWN0ZXJzIGxvbmcnKVxuICB9XG5cbiAgY29uc3QgYm91bmRhcnlCeXRlcyA9IHRleHRFbmNvZGVyLmVuY29kZSgnLS0nICsgYm91bmRhcnkgKyBDUkxGKTtcbiAgY29uc3QgZm9vdGVyQnl0ZXMgPSB0ZXh0RW5jb2Rlci5lbmNvZGUoJy0tJyArIGJvdW5kYXJ5ICsgJy0tJyArIENSTEYgKyBDUkxGKTtcbiAgbGV0IGNvbnRlbnRMZW5ndGggPSBmb290ZXJCeXRlcy5ieXRlTGVuZ3RoO1xuXG4gIGNvbnN0IHBhcnRzID0gQXJyYXkuZnJvbShmb3JtLmVudHJpZXMoKSkubWFwKChbbmFtZSwgdmFsdWVdKSA9PiB7XG4gICAgY29uc3QgcGFydCA9IG5ldyBGb3JtRGF0YVBhcnQobmFtZSwgdmFsdWUpO1xuICAgIGNvbnRlbnRMZW5ndGggKz0gcGFydC5zaXplO1xuICAgIHJldHVybiBwYXJ0O1xuICB9KTtcblxuICBjb250ZW50TGVuZ3RoICs9IGJvdW5kYXJ5Qnl0ZXMuYnl0ZUxlbmd0aCAqIHBhcnRzLmxlbmd0aDtcblxuICBjb250ZW50TGVuZ3RoID0gdXRpbHMudG9GaW5pdGVOdW1iZXIoY29udGVudExlbmd0aCk7XG5cbiAgY29uc3QgY29tcHV0ZWRIZWFkZXJzID0ge1xuICAgICdDb250ZW50LVR5cGUnOiBgbXVsdGlwYXJ0L2Zvcm0tZGF0YTsgYm91bmRhcnk9JHtib3VuZGFyeX1gXG4gIH1cblxuICBpZiAoTnVtYmVyLmlzRmluaXRlKGNvbnRlbnRMZW5ndGgpKSB7XG4gICAgY29tcHV0ZWRIZWFkZXJzWydDb250ZW50LUxlbmd0aCddID0gY29udGVudExlbmd0aDtcbiAgfVxuXG4gIGhlYWRlcnNIYW5kbGVyICYmIGhlYWRlcnNIYW5kbGVyKGNvbXB1dGVkSGVhZGVycyk7XG5cbiAgcmV0dXJuIFJlYWRhYmxlLmZyb20oKGFzeW5jIGZ1bmN0aW9uICooKSB7XG4gICAgZm9yKGNvbnN0IHBhcnQgb2YgcGFydHMpIHtcbiAgICAgIHlpZWxkIGJvdW5kYXJ5Qnl0ZXM7XG4gICAgICB5aWVsZCogcGFydC5lbmNvZGUoKTtcbiAgICB9XG5cbiAgICB5aWVsZCBmb290ZXJCeXRlcztcbiAgfSkoKSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtRGF0YVRvU3RyZWFtO1xuIiwgImNvbnN0IHthc3luY0l0ZXJhdG9yfSA9IFN5bWJvbDtcblxuY29uc3QgcmVhZEJsb2IgPSBhc3luYyBmdW5jdGlvbiogKGJsb2IpIHtcbiAgaWYgKGJsb2Iuc3RyZWFtKSB7XG4gICAgeWllbGQqIGJsb2Iuc3RyZWFtKClcbiAgfSBlbHNlIGlmIChibG9iLmFycmF5QnVmZmVyKSB7XG4gICAgeWllbGQgYXdhaXQgYmxvYi5hcnJheUJ1ZmZlcigpXG4gIH0gZWxzZSBpZiAoYmxvYlthc3luY0l0ZXJhdG9yXSkge1xuICAgIHlpZWxkKiBibG9iW2FzeW5jSXRlcmF0b3JdKCk7XG4gIH0gZWxzZSB7XG4gICAgeWllbGQgYmxvYjtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCByZWFkQmxvYjtcbiIsICJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHN0cmVhbSBmcm9tIFwic3RyZWFtXCI7XG5cbmNsYXNzIFpsaWJIZWFkZXJUcmFuc2Zvcm1TdHJlYW0gZXh0ZW5kcyBzdHJlYW0uVHJhbnNmb3JtIHtcbiAgX190cmFuc2Zvcm0oY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAgIHRoaXMucHVzaChjaHVuayk7XG4gICAgY2FsbGJhY2soKTtcbiAgfVxuXG4gIF90cmFuc2Zvcm0oY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAgIGlmIChjaHVuay5sZW5ndGggIT09IDApIHtcbiAgICAgIHRoaXMuX3RyYW5zZm9ybSA9IHRoaXMuX190cmFuc2Zvcm07XG5cbiAgICAgIC8vIEFkZCBEZWZhdWx0IENvbXByZXNzaW9uIGhlYWRlcnMgaWYgbm8gemxpYiBoZWFkZXJzIGFyZSBwcmVzZW50XG4gICAgICBpZiAoY2h1bmtbMF0gIT09IDEyMCkgeyAvLyBIZXg6IDc4XG4gICAgICAgIGNvbnN0IGhlYWRlciA9IEJ1ZmZlci5hbGxvYygyKTtcbiAgICAgICAgaGVhZGVyWzBdID0gMTIwOyAvLyBIZXg6IDc4XG4gICAgICAgIGhlYWRlclsxXSA9IDE1NjsgLy8gSGV4OiA5QyBcbiAgICAgICAgdGhpcy5wdXNoKGhlYWRlciwgZW5jb2RpbmcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX190cmFuc2Zvcm0oY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjayk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgWmxpYkhlYWRlclRyYW5zZm9ybVN0cmVhbTtcbiIsICJpbXBvcnQgdXRpbHMgZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5cbmNvbnN0IGNhbGxiYWNraWZ5ID0gKGZuLCByZWR1Y2VyKSA9PiB7XG4gIHJldHVybiB1dGlscy5pc0FzeW5jRm4oZm4pID8gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBjYiA9IGFyZ3MucG9wKCk7XG4gICAgZm4uYXBwbHkodGhpcywgYXJncykudGhlbigodmFsdWUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlZHVjZXIgPyBjYihudWxsLCAuLi5yZWR1Y2VyKHZhbHVlKSkgOiBjYihudWxsLCB2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY2IoZXJyKTtcbiAgICAgIH1cbiAgICB9LCBjYik7XG4gIH0gOiBmbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2FsbGJhY2tpZnk7XG4iLCAiaW1wb3J0IHNwZWVkb21ldGVyIGZyb20gXCIuL3NwZWVkb21ldGVyLmpzXCI7XG5pbXBvcnQgdGhyb3R0bGUgZnJvbSBcIi4vdGhyb3R0bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGxpc3RlbmVyLCBpc0Rvd25sb2FkU3RyZWFtLCBmcmVxID0gMykgPT4ge1xuICBsZXQgYnl0ZXNOb3RpZmllZCA9IDA7XG4gIGNvbnN0IF9zcGVlZG9tZXRlciA9IHNwZWVkb21ldGVyKDUwLCAyNTApO1xuXG4gIHJldHVybiB0aHJvdHRsZShlID0+IHtcbiAgICBjb25zdCBsb2FkZWQgPSBlLmxvYWRlZDtcbiAgICBjb25zdCB0b3RhbCA9IGUubGVuZ3RoQ29tcHV0YWJsZSA/IGUudG90YWwgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgcHJvZ3Jlc3NCeXRlcyA9IGxvYWRlZCAtIGJ5dGVzTm90aWZpZWQ7XG4gICAgY29uc3QgcmF0ZSA9IF9zcGVlZG9tZXRlcihwcm9ncmVzc0J5dGVzKTtcbiAgICBjb25zdCBpblJhbmdlID0gbG9hZGVkIDw9IHRvdGFsO1xuXG4gICAgYnl0ZXNOb3RpZmllZCA9IGxvYWRlZDtcblxuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICBsb2FkZWQsXG4gICAgICB0b3RhbCxcbiAgICAgIHByb2dyZXNzOiB0b3RhbCA/IChsb2FkZWQgLyB0b3RhbCkgOiB1bmRlZmluZWQsXG4gICAgICBieXRlczogcHJvZ3Jlc3NCeXRlcyxcbiAgICAgIHJhdGU6IHJhdGUgPyByYXRlIDogdW5kZWZpbmVkLFxuICAgICAgZXN0aW1hdGVkOiByYXRlICYmIHRvdGFsICYmIGluUmFuZ2UgPyAodG90YWwgLSBsb2FkZWQpIC8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGV2ZW50OiBlLFxuICAgICAgbGVuZ3RoQ29tcHV0YWJsZTogdG90YWwgIT0gbnVsbFxuICAgIH07XG5cbiAgICBkYXRhW2lzRG93bmxvYWRTdHJlYW0gPyAnZG93bmxvYWQnIDogJ3VwbG9hZCddID0gdHJ1ZTtcblxuICAgIGxpc3RlbmVyKGRhdGEpO1xuICB9LCBmcmVxKTtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbi8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgY29uc3QgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgY29uc3QgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgbGV0IG9yaWdpblVSTDtcblxuICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXRzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIGxldCBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICBjb25zdCBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpO1xuIiwgImltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIHtcbiAgICB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgIGNvbnN0IGNvb2tpZSA9IFtuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKV07XG5cbiAgICAgIHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpICYmIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcblxuICAgICAgdXRpbHMuaXNTdHJpbmcocGF0aCkgJiYgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuXG4gICAgICB1dGlscy5pc1N0cmluZyhkb21haW4pICYmIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG5cbiAgICAgIHNlY3VyZSA9PT0gdHJ1ZSAmJiBjb29raWUucHVzaCgnc2VjdXJlJyk7XG5cbiAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgIH0sXG5cbiAgICByZWFkKG5hbWUpIHtcbiAgICAgIGNvbnN0IG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgfSxcblxuICAgIHJlbW92ZShuYW1lKSB7XG4gICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgIH1cbiAgfVxuXG4gIDpcblxuICAvLyBOb24tc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIHtcbiAgICB3cml0ZSgpIHt9LFxuICAgIHJlYWQoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIHJlbW92ZSgpIHt9XG4gIH07XG5cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuL0F4aW9zSGVhZGVycy5qc1wiO1xuXG5jb25zdCBoZWFkZXJzVG9PYmplY3QgPSAodGhpbmcpID0+IHRoaW5nIGluc3RhbmNlb2YgQXhpb3NIZWFkZXJzID8geyAuLi50aGluZyB9IDogdGhpbmc7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIGNvbnN0IGNvbmZpZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlLCBjYXNlbGVzcykge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UuY2FsbCh7Y2FzZWxlc3N9LCB0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMoYSwgYiwgY2FzZWxlc3MpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYiwgY2FzZWxlc3MpO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGEpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhLCBjYXNlbGVzcyk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIoYSwgYikge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKGEsIGIpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChhKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGlyZWN0S2V5cyhhLCBiLCBwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGEsIGIpO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBtZXJnZU1hcCA9IHtcbiAgICB1cmw6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgbWV0aG9kOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIGRhdGE6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgYmFzZVVSTDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHBhcmFtc1NlcmlhbGl6ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdGltZW91dDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0TWVzc2FnZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB3aXRoQ3JlZGVudGlhbHM6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgd2l0aFhTUkZUb2tlbjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBhZGFwdGVyOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlVHlwZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmQ29va2llTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmSGVhZGVyTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBvblVwbG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uRG93bmxvYWRQcm9ncmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBkZWNvbXByZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG1heENvbnRlbnRMZW5ndGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Qm9keUxlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBiZWZvcmVSZWRpcmVjdDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc3BvcnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cEFnZW50OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGh0dHBzQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgY2FuY2VsVG9rZW46IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgc29ja2V0UGF0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICByZXNwb25zZUVuY29kaW5nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHZhbGlkYXRlU3RhdHVzOiBtZXJnZURpcmVjdEtleXMsXG4gICAgaGVhZGVyczogKGEsIGIpID0+IG1lcmdlRGVlcFByb3BlcnRpZXMoaGVhZGVyc1RvT2JqZWN0KGEpLCBoZWFkZXJzVG9PYmplY3QoYiksIHRydWUpXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBjb25maWcxLCBjb25maWcyKSksIGZ1bmN0aW9uIGNvbXB1dGVDb25maWdWYWx1ZShwcm9wKSB7XG4gICAgY29uc3QgbWVyZ2UgPSBtZXJnZU1hcFtwcm9wXSB8fCBtZXJnZURlZXBQcm9wZXJ0aWVzO1xuICAgIGNvbnN0IGNvbmZpZ1ZhbHVlID0gbWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSwgcHJvcCk7XG4gICAgKHV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufVxuIiwgImltcG9ydCBwbGF0Zm9ybSBmcm9tIFwiLi4vcGxhdGZvcm0vaW5kZXguanNcIjtcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmltcG9ydCBpc1VSTFNhbWVPcmlnaW4gZnJvbSBcIi4vaXNVUkxTYW1lT3JpZ2luLmpzXCI7XG5pbXBvcnQgY29va2llcyBmcm9tIFwiLi9jb29raWVzLmpzXCI7XG5pbXBvcnQgYnVpbGRGdWxsUGF0aCBmcm9tIFwiLi4vY29yZS9idWlsZEZ1bGxQYXRoLmpzXCI7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSBcIi4uL2NvcmUvbWVyZ2VDb25maWcuanNcIjtcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSBcIi4vYnVpbGRVUkwuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGNvbmZpZykgPT4ge1xuICBjb25zdCBuZXdDb25maWcgPSBtZXJnZUNvbmZpZyh7fSwgY29uZmlnKTtcblxuICBsZXQge2RhdGEsIHdpdGhYU1JGVG9rZW4sIHhzcmZIZWFkZXJOYW1lLCB4c3JmQ29va2llTmFtZSwgaGVhZGVycywgYXV0aH0gPSBuZXdDb25maWc7XG5cbiAgbmV3Q29uZmlnLmhlYWRlcnMgPSBoZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oaGVhZGVycyk7XG5cbiAgbmV3Q29uZmlnLnVybCA9IGJ1aWxkVVJMKGJ1aWxkRnVsbFBhdGgobmV3Q29uZmlnLmJhc2VVUkwsIG5ld0NvbmZpZy51cmwpLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcik7XG5cbiAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICBpZiAoYXV0aCkge1xuICAgIGhlYWRlcnMuc2V0KCdBdXRob3JpemF0aW9uJywgJ0Jhc2ljICcgK1xuICAgICAgYnRvYSgoYXV0aC51c2VybmFtZSB8fCAnJykgKyAnOicgKyAoYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChhdXRoLnBhc3N3b3JkKSkgOiAnJykpXG4gICAgKTtcbiAgfVxuXG4gIGxldCBjb250ZW50VHlwZTtcblxuICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSkge1xuICAgIGlmIChwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgfHwgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52KSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKHVuZGVmaW5lZCk7IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9IGVsc2UgaWYgKChjb250ZW50VHlwZSA9IGhlYWRlcnMuZ2V0Q29udGVudFR5cGUoKSkgIT09IGZhbHNlKSB7XG4gICAgICAvLyBmaXggc2VtaWNvbG9uIGR1cGxpY2F0aW9uIGlzc3VlIGZvciBSZWFjdE5hdGl2ZSBGb3JtRGF0YSBpbXBsZW1lbnRhdGlvblxuICAgICAgY29uc3QgW3R5cGUsIC4uLnRva2Vuc10gPSBjb250ZW50VHlwZSA/IGNvbnRlbnRUeXBlLnNwbGl0KCc7JykubWFwKHRva2VuID0+IHRva2VuLnRyaW0oKSkuZmlsdGVyKEJvb2xlYW4pIDogW107XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKFt0eXBlIHx8ICdtdWx0aXBhcnQvZm9ybS1kYXRhJywgLi4udG9rZW5zXS5qb2luKCc7ICcpKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG5cbiAgaWYgKHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudikge1xuICAgIHdpdGhYU1JGVG9rZW4gJiYgdXRpbHMuaXNGdW5jdGlvbih3aXRoWFNSRlRva2VuKSAmJiAod2l0aFhTUkZUb2tlbiA9IHdpdGhYU1JGVG9rZW4obmV3Q29uZmlnKSk7XG5cbiAgICBpZiAod2l0aFhTUkZUb2tlbiB8fCAod2l0aFhTUkZUb2tlbiAhPT0gZmFsc2UgJiYgaXNVUkxTYW1lT3JpZ2luKG5ld0NvbmZpZy51cmwpKSkge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICBjb25zdCB4c3JmVmFsdWUgPSB4c3JmSGVhZGVyTmFtZSAmJiB4c3JmQ29va2llTmFtZSAmJiBjb29raWVzLnJlYWQoeHNyZkNvb2tpZU5hbWUpO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIGhlYWRlcnMuc2V0KHhzcmZIZWFkZXJOYW1lLCB4c3JmVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdDb25maWc7XG59XG5cbiIsICJpbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgc2V0dGxlIGZyb20gJy4vLi4vY29yZS9zZXR0bGUuanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IHBhcnNlUHJvdG9jb2wgZnJvbSAnLi4vaGVscGVycy9wYXJzZVByb3RvY29sLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcbmltcG9ydCBwcm9ncmVzc0V2ZW50UmVkdWNlciBmcm9tICcuLi9oZWxwZXJzL3Byb2dyZXNzRXZlbnRSZWR1Y2VyLmpzJztcbmltcG9ydCByZXNvbHZlQ29uZmlnIGZyb20gXCIuLi9oZWxwZXJzL3Jlc29sdmVDb25maWcuanNcIjtcblxuY29uc3QgaXNYSFJBZGFwdGVyU3VwcG9ydGVkID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJztcblxuZXhwb3J0IGRlZmF1bHQgaXNYSFJBZGFwdGVyU3VwcG9ydGVkICYmIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBjb25zdCBfY29uZmlnID0gcmVzb2x2ZUNvbmZpZyhjb25maWcpO1xuICAgIGxldCByZXF1ZXN0RGF0YSA9IF9jb25maWcuZGF0YTtcbiAgICBjb25zdCByZXF1ZXN0SGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKF9jb25maWcuaGVhZGVycykubm9ybWFsaXplKCk7XG4gICAgbGV0IHtyZXNwb25zZVR5cGV9ID0gX2NvbmZpZztcbiAgICBsZXQgb25DYW5jZWxlZDtcbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgaWYgKF9jb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgX2NvbmZpZy5jYW5jZWxUb2tlbi51bnN1YnNjcmliZShvbkNhbmNlbGVkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9jb25maWcuc2lnbmFsKSB7XG4gICAgICAgIF9jb25maWcuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIHJlcXVlc3Qub3BlbihfY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBfY29uZmlnLnVybCwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IF9jb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgY29uc3QgcmVzcG9uc2VIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oXG4gICAgICAgICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgJiYgcmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgcmVzcG9uc2VUeXBlID09PSAnanNvbicgP1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUoZnVuY3Rpb24gX3Jlc29sdmUodmFsdWUpIHtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIGZ1bmN0aW9uIF9yZWplY3QoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICgnb25sb2FkZW5kJyBpbiByZXF1ZXN0KSB7XG4gICAgICAvLyBVc2Ugb25sb2FkZW5kIGlmIGF2YWlsYWJsZVxuICAgICAgcmVxdWVzdC5vbmxvYWRlbmQgPSBvbmxvYWRlbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGUgdG8gZW11bGF0ZSBvbmxvYWRlbmRcbiAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWFkeXN0YXRlIGhhbmRsZXIgaXMgY2FsbGluZyBiZWZvcmUgb25lcnJvciBvciBvbnRpbWVvdXQgaGFuZGxlcnMsXG4gICAgICAgIC8vIHNvIHdlIHNob3VsZCBjYWxsIG9ubG9hZGVuZCBvbiB0aGUgbmV4dCAndGljaydcbiAgICAgICAgc2V0VGltZW91dChvbmxvYWRlbmQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELCBfY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdOZXR3b3JrIEVycm9yJywgQXhpb3NFcnJvci5FUlJfTkVUV09SSywgX2NvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICBsZXQgdGltZW91dEVycm9yTWVzc2FnZSA9IF9jb25maWcudGltZW91dCA/ICd0aW1lb3V0IG9mICcgKyBfY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnIDogJ3RpbWVvdXQgZXhjZWVkZWQnO1xuICAgICAgY29uc3QgdHJhbnNpdGlvbmFsID0gX2NvbmZpZy50cmFuc2l0aW9uYWwgfHwgdHJhbnNpdGlvbmFsRGVmYXVsdHM7XG4gICAgICBpZiAoX2NvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBfY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UsXG4gICAgICAgIHRyYW5zaXRpb25hbC5jbGFyaWZ5VGltZW91dEVycm9yID8gQXhpb3NFcnJvci5FVElNRURPVVQgOiBBeGlvc0Vycm9yLkVDT05OQUJPUlRFRCxcbiAgICAgICAgX2NvbmZpZyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgIHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQgJiYgcmVxdWVzdEhlYWRlcnMuc2V0Q29udGVudFR5cGUobnVsbCk7XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycy50b0pTT04oKSwgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoX2NvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhX2NvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChyZXNwb25zZVR5cGUgJiYgcmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gX2NvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgX2NvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBwcm9ncmVzc0V2ZW50UmVkdWNlcihfY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcywgdHJ1ZSkpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBfY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgcHJvZ3Jlc3NFdmVudFJlZHVjZXIoX2NvbmZpZy5vblVwbG9hZFByb2dyZXNzKSk7XG4gICAgfVxuXG4gICAgaWYgKF9jb25maWcuY2FuY2VsVG9rZW4gfHwgX2NvbmZpZy5zaWduYWwpIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBvbkNhbmNlbGVkID0gY2FuY2VsID0+IHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdCghY2FuY2VsIHx8IGNhbmNlbC50eXBlID8gbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnLCByZXF1ZXN0KSA6IGNhbmNlbCk7XG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICBfY29uZmlnLmNhbmNlbFRva2VuICYmIF9jb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKF9jb25maWcuc2lnbmFsKSB7XG4gICAgICAgIF9jb25maWcuc2lnbmFsLmFib3J0ZWQgPyBvbkNhbmNlbGVkKCkgOiBfY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHByb3RvY29sID0gcGFyc2VQcm90b2NvbChfY29uZmlnLnVybCk7XG5cbiAgICBpZiAocHJvdG9jb2wgJiYgcGxhdGZvcm0ucHJvdG9jb2xzLmluZGV4T2YocHJvdG9jb2wpID09PSAtMSkge1xuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdVbnN1cHBvcnRlZCBwcm90b2NvbCAnICsgcHJvdG9jb2wgKyAnOicsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBjb25maWcpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwgImltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gXCIuLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qc1wiO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuXG5jb25zdCBjb21wb3NlU2lnbmFscyA9IChzaWduYWxzLCB0aW1lb3V0KSA9PiB7XG4gIGxldCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuXG4gIGxldCBhYm9ydGVkO1xuXG4gIGNvbnN0IG9uYWJvcnQgPSBmdW5jdGlvbiAoY2FuY2VsKSB7XG4gICAgaWYgKCFhYm9ydGVkKSB7XG4gICAgICBhYm9ydGVkID0gdHJ1ZTtcbiAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICBjb25zdCBlcnIgPSBjYW5jZWwgaW5zdGFuY2VvZiBFcnJvciA/IGNhbmNlbCA6IHRoaXMucmVhc29uO1xuICAgICAgY29udHJvbGxlci5hYm9ydChlcnIgaW5zdGFuY2VvZiBBeGlvc0Vycm9yID8gZXJyIDogbmV3IENhbmNlbGVkRXJyb3IoZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIubWVzc2FnZSA6IGVycikpO1xuICAgIH1cbiAgfVxuXG4gIGxldCB0aW1lciA9IHRpbWVvdXQgJiYgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgb25hYm9ydChuZXcgQXhpb3NFcnJvcihgdGltZW91dCAke3RpbWVvdXR9IG9mIG1zIGV4Y2VlZGVkYCwgQXhpb3NFcnJvci5FVElNRURPVVQpKVxuICB9LCB0aW1lb3V0KVxuXG4gIGNvbnN0IHVuc3Vic2NyaWJlID0gKCkgPT4ge1xuICAgIGlmIChzaWduYWxzKSB7XG4gICAgICB0aW1lciAmJiBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgc2lnbmFscy5mb3JFYWNoKHNpZ25hbCA9PiB7XG4gICAgICAgIHNpZ25hbCAmJlxuICAgICAgICAoc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbmFib3J0KSA6IHNpZ25hbC51bnN1YnNjcmliZShvbmFib3J0KSk7XG4gICAgICB9KTtcbiAgICAgIHNpZ25hbHMgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHNpZ25hbHMuZm9yRWFjaCgoc2lnbmFsKSA9PiBzaWduYWwgJiYgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25hYm9ydCkpO1xuXG4gIGNvbnN0IHtzaWduYWx9ID0gY29udHJvbGxlcjtcblxuICBzaWduYWwudW5zdWJzY3JpYmUgPSB1bnN1YnNjcmliZTtcblxuICByZXR1cm4gW3NpZ25hbCwgKCkgPT4ge1xuICAgIHRpbWVyICYmIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgdGltZXIgPSBudWxsO1xuICB9XTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29tcG9zZVNpZ25hbHM7XG4iLCAiXG5cbmV4cG9ydCBjb25zdCBzdHJlYW1DaHVuayA9IGZ1bmN0aW9uKiAoY2h1bmssIGNodW5rU2l6ZSkge1xuICBsZXQgbGVuID0gY2h1bmsuYnl0ZUxlbmd0aDtcblxuICBpZiAoIWNodW5rU2l6ZSB8fCBsZW4gPCBjaHVua1NpemUpIHtcbiAgICB5aWVsZCBjaHVuaztcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgcG9zID0gMDtcbiAgbGV0IGVuZDtcblxuICB3aGlsZSAocG9zIDwgbGVuKSB7XG4gICAgZW5kID0gcG9zICsgY2h1bmtTaXplO1xuICAgIHlpZWxkIGNodW5rLnNsaWNlKHBvcywgZW5kKTtcbiAgICBwb3MgPSBlbmQ7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHJlYWRCeXRlcyA9IGFzeW5jIGZ1bmN0aW9uKiAoaXRlcmFibGUsIGNodW5rU2l6ZSwgZW5jb2RlKSB7XG4gIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgaXRlcmFibGUpIHtcbiAgICB5aWVsZCogc3RyZWFtQ2h1bmsoQXJyYXlCdWZmZXIuaXNWaWV3KGNodW5rKSA/IGNodW5rIDogKGF3YWl0IGVuY29kZShTdHJpbmcoY2h1bmspKSksIGNodW5rU2l6ZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHRyYWNrU3RyZWFtID0gKHN0cmVhbSwgY2h1bmtTaXplLCBvblByb2dyZXNzLCBvbkZpbmlzaCwgZW5jb2RlKSA9PiB7XG4gIGNvbnN0IGl0ZXJhdG9yID0gcmVhZEJ5dGVzKHN0cmVhbSwgY2h1bmtTaXplLCBlbmNvZGUpO1xuXG4gIGxldCBieXRlcyA9IDA7XG5cbiAgcmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgdHlwZTogJ2J5dGVzJyxcblxuICAgIGFzeW5jIHB1bGwoY29udHJvbGxlcikge1xuICAgICAgY29uc3Qge2RvbmUsIHZhbHVlfSA9IGF3YWl0IGl0ZXJhdG9yLm5leHQoKTtcblxuICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICBvbkZpbmlzaCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBsZW4gPSB2YWx1ZS5ieXRlTGVuZ3RoO1xuICAgICAgb25Qcm9ncmVzcyAmJiBvblByb2dyZXNzKGJ5dGVzICs9IGxlbik7XG4gICAgICBjb250cm9sbGVyLmVucXVldWUobmV3IFVpbnQ4QXJyYXkodmFsdWUpKTtcbiAgICB9LFxuICAgIGNhbmNlbChyZWFzb24pIHtcbiAgICAgIG9uRmluaXNoKHJlYXNvbik7XG4gICAgICByZXR1cm4gaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgfVxuICB9LCB7XG4gICAgaGlnaFdhdGVyTWFyazogMlxuICB9KVxufVxuIiwgImltcG9ydCBwbGF0Zm9ybSBmcm9tIFwiLi4vcGxhdGZvcm0vaW5kZXguanNcIjtcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gXCIuLi9jb3JlL0F4aW9zRXJyb3IuanNcIjtcbmltcG9ydCBjb21wb3NlU2lnbmFscyBmcm9tIFwiLi4vaGVscGVycy9jb21wb3NlU2lnbmFscy5qc1wiO1xuaW1wb3J0IHt0cmFja1N0cmVhbX0gZnJvbSBcIi4uL2hlbHBlcnMvdHJhY2tTdHJlYW0uanNcIjtcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQgcHJvZ3Jlc3NFdmVudFJlZHVjZXIgZnJvbSBcIi4uL2hlbHBlcnMvcHJvZ3Jlc3NFdmVudFJlZHVjZXIuanNcIjtcbmltcG9ydCByZXNvbHZlQ29uZmlnIGZyb20gXCIuLi9oZWxwZXJzL3Jlc29sdmVDb25maWcuanNcIjtcbmltcG9ydCBzZXR0bGUgZnJvbSBcIi4uL2NvcmUvc2V0dGxlLmpzXCI7XG5cbmNvbnN0IGZldGNoUHJvZ3Jlc3NEZWNvcmF0b3IgPSAodG90YWwsIGZuKSA9PiB7XG4gIGNvbnN0IGxlbmd0aENvbXB1dGFibGUgPSB0b3RhbCAhPSBudWxsO1xuICByZXR1cm4gKGxvYWRlZCkgPT4gc2V0VGltZW91dCgoKSA9PiBmbih7XG4gICAgbGVuZ3RoQ29tcHV0YWJsZSxcbiAgICB0b3RhbCxcbiAgICBsb2FkZWRcbiAgfSkpO1xufVxuXG5jb25zdCBpc0ZldGNoU3VwcG9ydGVkID0gdHlwZW9mIGZldGNoID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBSZXF1ZXN0ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBSZXNwb25zZSA9PT0gJ2Z1bmN0aW9uJztcbmNvbnN0IGlzUmVhZGFibGVTdHJlYW1TdXBwb3J0ZWQgPSBpc0ZldGNoU3VwcG9ydGVkICYmIHR5cGVvZiBSZWFkYWJsZVN0cmVhbSA9PT0gJ2Z1bmN0aW9uJztcblxuLy8gdXNlZCBvbmx5IGluc2lkZSB0aGUgZmV0Y2ggYWRhcHRlclxuY29uc3QgZW5jb2RlVGV4dCA9IGlzRmV0Y2hTdXBwb3J0ZWQgJiYgKHR5cGVvZiBUZXh0RW5jb2RlciA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgKChlbmNvZGVyKSA9PiAoc3RyKSA9PiBlbmNvZGVyLmVuY29kZShzdHIpKShuZXcgVGV4dEVuY29kZXIoKSkgOlxuICAgIGFzeW5jIChzdHIpID0+IG5ldyBVaW50OEFycmF5KGF3YWl0IG5ldyBSZXNwb25zZShzdHIpLmFycmF5QnVmZmVyKCkpXG4pO1xuXG5jb25zdCBzdXBwb3J0c1JlcXVlc3RTdHJlYW0gPSBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkICYmICgoKSA9PiB7XG4gIGxldCBkdXBsZXhBY2Nlc3NlZCA9IGZhbHNlO1xuXG4gIGNvbnN0IGhhc0NvbnRlbnRUeXBlID0gbmV3IFJlcXVlc3QocGxhdGZvcm0ub3JpZ2luLCB7XG4gICAgYm9keTogbmV3IFJlYWRhYmxlU3RyZWFtKCksXG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgZ2V0IGR1cGxleCgpIHtcbiAgICAgIGR1cGxleEFjY2Vzc2VkID0gdHJ1ZTtcbiAgICAgIHJldHVybiAnaGFsZic7XG4gICAgfSxcbiAgfSkuaGVhZGVycy5oYXMoJ0NvbnRlbnQtVHlwZScpO1xuXG4gIHJldHVybiBkdXBsZXhBY2Nlc3NlZCAmJiAhaGFzQ29udGVudFR5cGU7XG59KSgpO1xuXG5jb25zdCBERUZBVUxUX0NIVU5LX1NJWkUgPSA2NCAqIDEwMjQ7XG5cbmNvbnN0IHN1cHBvcnRzUmVzcG9uc2VTdHJlYW0gPSBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkICYmICEhKCgpPT4ge1xuICB0cnkge1xuICAgIHJldHVybiB1dGlscy5pc1JlYWRhYmxlU3RyZWFtKG5ldyBSZXNwb25zZSgnJykuYm9keSk7XG4gIH0gY2F0Y2goZXJyKSB7XG4gICAgLy8gcmV0dXJuIHVuZGVmaW5lZFxuICB9XG59KSgpO1xuXG5jb25zdCByZXNvbHZlcnMgPSB7XG4gIHN0cmVhbTogc3VwcG9ydHNSZXNwb25zZVN0cmVhbSAmJiAoKHJlcykgPT4gcmVzLmJvZHkpXG59O1xuXG5pc0ZldGNoU3VwcG9ydGVkICYmICgoKHJlcykgPT4ge1xuICBbJ3RleHQnLCAnYXJyYXlCdWZmZXInLCAnYmxvYicsICdmb3JtRGF0YScsICdzdHJlYW0nXS5mb3JFYWNoKHR5cGUgPT4ge1xuICAgICFyZXNvbHZlcnNbdHlwZV0gJiYgKHJlc29sdmVyc1t0eXBlXSA9IHV0aWxzLmlzRnVuY3Rpb24ocmVzW3R5cGVdKSA/IChyZXMpID0+IHJlc1t0eXBlXSgpIDpcbiAgICAgIChfLCBjb25maWcpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoYFJlc3BvbnNlIHR5cGUgJyR7dHlwZX0nIGlzIG5vdCBzdXBwb3J0ZWRgLCBBeGlvc0Vycm9yLkVSUl9OT1RfU1VQUE9SVCwgY29uZmlnKTtcbiAgICAgIH0pXG4gIH0pO1xufSkobmV3IFJlc3BvbnNlKSk7XG5cbmNvbnN0IGdldEJvZHlMZW5ndGggPSBhc3luYyAoYm9keSkgPT4ge1xuICBpZiAoYm9keSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZih1dGlscy5pc0Jsb2IoYm9keSkpIHtcbiAgICByZXR1cm4gYm9keS5zaXplO1xuICB9XG5cbiAgaWYodXRpbHMuaXNTcGVjQ29tcGxpYW50Rm9ybShib2R5KSkge1xuICAgIHJldHVybiAoYXdhaXQgbmV3IFJlcXVlc3QoYm9keSkuYXJyYXlCdWZmZXIoKSkuYnl0ZUxlbmd0aDtcbiAgfVxuXG4gIGlmKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpKSB7XG4gICAgcmV0dXJuIGJvZHkuYnl0ZUxlbmd0aDtcbiAgfVxuXG4gIGlmKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGJvZHkpKSB7XG4gICAgYm9keSA9IGJvZHkgKyAnJztcbiAgfVxuXG4gIGlmKHV0aWxzLmlzU3RyaW5nKGJvZHkpKSB7XG4gICAgcmV0dXJuIChhd2FpdCBlbmNvZGVUZXh0KGJvZHkpKS5ieXRlTGVuZ3RoO1xuICB9XG59XG5cbmNvbnN0IHJlc29sdmVCb2R5TGVuZ3RoID0gYXN5bmMgKGhlYWRlcnMsIGJvZHkpID0+IHtcbiAgY29uc3QgbGVuZ3RoID0gdXRpbHMudG9GaW5pdGVOdW1iZXIoaGVhZGVycy5nZXRDb250ZW50TGVuZ3RoKCkpO1xuXG4gIHJldHVybiBsZW5ndGggPT0gbnVsbCA/IGdldEJvZHlMZW5ndGgoYm9keSkgOiBsZW5ndGg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzRmV0Y2hTdXBwb3J0ZWQgJiYgKGFzeW5jIChjb25maWcpID0+IHtcbiAgbGV0IHtcbiAgICB1cmwsXG4gICAgbWV0aG9kLFxuICAgIGRhdGEsXG4gICAgc2lnbmFsLFxuICAgIGNhbmNlbFRva2VuLFxuICAgIHRpbWVvdXQsXG4gICAgb25Eb3dubG9hZFByb2dyZXNzLFxuICAgIG9uVXBsb2FkUHJvZ3Jlc3MsXG4gICAgcmVzcG9uc2VUeXBlLFxuICAgIGhlYWRlcnMsXG4gICAgd2l0aENyZWRlbnRpYWxzID0gJ3NhbWUtb3JpZ2luJyxcbiAgICBmZXRjaE9wdGlvbnNcbiAgfSA9IHJlc29sdmVDb25maWcoY29uZmlnKTtcblxuICByZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGUgPyAocmVzcG9uc2VUeXBlICsgJycpLnRvTG93ZXJDYXNlKCkgOiAndGV4dCc7XG5cbiAgbGV0IFtjb21wb3NlZFNpZ25hbCwgc3RvcFRpbWVvdXRdID0gKHNpZ25hbCB8fCBjYW5jZWxUb2tlbiB8fCB0aW1lb3V0KSA/XG4gICAgY29tcG9zZVNpZ25hbHMoW3NpZ25hbCwgY2FuY2VsVG9rZW5dLCB0aW1lb3V0KSA6IFtdO1xuXG4gIGxldCBmaW5pc2hlZCwgcmVxdWVzdDtcblxuICBjb25zdCBvbkZpbmlzaCA9ICgpID0+IHtcbiAgICAhZmluaXNoZWQgJiYgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjb21wb3NlZFNpZ25hbCAmJiBjb21wb3NlZFNpZ25hbC51bnN1YnNjcmliZSgpO1xuICAgIH0pO1xuXG4gICAgZmluaXNoZWQgPSB0cnVlO1xuICB9XG5cbiAgbGV0IHJlcXVlc3RDb250ZW50TGVuZ3RoO1xuXG4gIHRyeSB7XG4gICAgaWYgKFxuICAgICAgb25VcGxvYWRQcm9ncmVzcyAmJiBzdXBwb3J0c1JlcXVlc3RTdHJlYW0gJiYgbWV0aG9kICE9PSAnZ2V0JyAmJiBtZXRob2QgIT09ICdoZWFkJyAmJlxuICAgICAgKHJlcXVlc3RDb250ZW50TGVuZ3RoID0gYXdhaXQgcmVzb2x2ZUJvZHlMZW5ndGgoaGVhZGVycywgZGF0YSkpICE9PSAwXG4gICAgKSB7XG4gICAgICBsZXQgX3JlcXVlc3QgPSBuZXcgUmVxdWVzdCh1cmwsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGJvZHk6IGRhdGEsXG4gICAgICAgIGR1cGxleDogXCJoYWxmXCJcbiAgICAgIH0pO1xuXG4gICAgICBsZXQgY29udGVudFR5cGVIZWFkZXI7XG5cbiAgICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpICYmIChjb250ZW50VHlwZUhlYWRlciA9IF9yZXF1ZXN0LmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkpIHtcbiAgICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZShjb250ZW50VHlwZUhlYWRlcilcbiAgICAgIH1cblxuICAgICAgaWYgKF9yZXF1ZXN0LmJvZHkpIHtcbiAgICAgICAgZGF0YSA9IHRyYWNrU3RyZWFtKF9yZXF1ZXN0LmJvZHksIERFRkFVTFRfQ0hVTktfU0laRSwgZmV0Y2hQcm9ncmVzc0RlY29yYXRvcihcbiAgICAgICAgICByZXF1ZXN0Q29udGVudExlbmd0aCxcbiAgICAgICAgICBwcm9ncmVzc0V2ZW50UmVkdWNlcihvblVwbG9hZFByb2dyZXNzKVxuICAgICAgICApLCBudWxsLCBlbmNvZGVUZXh0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXV0aWxzLmlzU3RyaW5nKHdpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHdpdGhDcmVkZW50aWFscyA9IHdpdGhDcmVkZW50aWFscyA/ICdjb3JzJyA6ICdvbWl0JztcbiAgICB9XG5cbiAgICByZXF1ZXN0ID0gbmV3IFJlcXVlc3QodXJsLCB7XG4gICAgICAuLi5mZXRjaE9wdGlvbnMsXG4gICAgICBzaWduYWw6IGNvbXBvc2VkU2lnbmFsLFxuICAgICAgbWV0aG9kOiBtZXRob2QudG9VcHBlckNhc2UoKSxcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnMubm9ybWFsaXplKCkudG9KU09OKCksXG4gICAgICBib2R5OiBkYXRhLFxuICAgICAgZHVwbGV4OiBcImhhbGZcIixcbiAgICAgIHdpdGhDcmVkZW50aWFsc1xuICAgIH0pO1xuXG4gICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gocmVxdWVzdCk7XG5cbiAgICBjb25zdCBpc1N0cmVhbVJlc3BvbnNlID0gc3VwcG9ydHNSZXNwb25zZVN0cmVhbSAmJiAocmVzcG9uc2VUeXBlID09PSAnc3RyZWFtJyB8fCByZXNwb25zZVR5cGUgPT09ICdyZXNwb25zZScpO1xuXG4gICAgaWYgKHN1cHBvcnRzUmVzcG9uc2VTdHJlYW0gJiYgKG9uRG93bmxvYWRQcm9ncmVzcyB8fCBpc1N0cmVhbVJlc3BvbnNlKSkge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHt9O1xuXG4gICAgICBbJ3N0YXR1cycsICdzdGF0dXNUZXh0JywgJ2hlYWRlcnMnXS5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICBvcHRpb25zW3Byb3BdID0gcmVzcG9uc2VbcHJvcF07XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzcG9uc2VDb250ZW50TGVuZ3RoID0gdXRpbHMudG9GaW5pdGVOdW1iZXIocmVzcG9uc2UuaGVhZGVycy5nZXQoJ2NvbnRlbnQtbGVuZ3RoJykpO1xuXG4gICAgICByZXNwb25zZSA9IG5ldyBSZXNwb25zZShcbiAgICAgICAgdHJhY2tTdHJlYW0ocmVzcG9uc2UuYm9keSwgREVGQVVMVF9DSFVOS19TSVpFLCBvbkRvd25sb2FkUHJvZ3Jlc3MgJiYgZmV0Y2hQcm9ncmVzc0RlY29yYXRvcihcbiAgICAgICAgICByZXNwb25zZUNvbnRlbnRMZW5ndGgsXG4gICAgICAgICAgcHJvZ3Jlc3NFdmVudFJlZHVjZXIob25Eb3dubG9hZFByb2dyZXNzLCB0cnVlKVxuICAgICAgICApLCBpc1N0cmVhbVJlc3BvbnNlICYmIG9uRmluaXNoLCBlbmNvZGVUZXh0KSxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGUgfHwgJ3RleHQnO1xuXG4gICAgbGV0IHJlc3BvbnNlRGF0YSA9IGF3YWl0IHJlc29sdmVyc1t1dGlscy5maW5kS2V5KHJlc29sdmVycywgcmVzcG9uc2VUeXBlKSB8fCAndGV4dCddKHJlc3BvbnNlLCBjb25maWcpO1xuXG4gICAgIWlzU3RyZWFtUmVzcG9uc2UgJiYgb25GaW5pc2goKTtcblxuICAgIHN0b3BUaW1lb3V0ICYmIHN0b3BUaW1lb3V0KCk7XG5cbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIGhlYWRlcnM6IEF4aW9zSGVhZGVycy5mcm9tKHJlc3BvbnNlLmhlYWRlcnMpLFxuICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0XG4gICAgICB9KVxuICAgIH0pXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIG9uRmluaXNoKCk7XG5cbiAgICBpZiAoZXJyICYmIGVyci5uYW1lID09PSAnVHlwZUVycm9yJyAmJiAvZmV0Y2gvaS50ZXN0KGVyci5tZXNzYWdlKSkge1xuICAgICAgdGhyb3cgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgbmV3IEF4aW9zRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBBeGlvc0Vycm9yLkVSUl9ORVRXT1JLLCBjb25maWcsIHJlcXVlc3QpLFxuICAgICAgICB7XG4gICAgICAgICAgY2F1c2U6IGVyci5jYXVzZSB8fCBlcnJcbiAgICAgICAgfVxuICAgICAgKVxuICAgIH1cblxuICAgIHRocm93IEF4aW9zRXJyb3IuZnJvbShlcnIsIGVyciAmJiBlcnIuY29kZSwgY29uZmlnLCByZXF1ZXN0KTtcbiAgfVxufSk7XG5cblxuIiwgImltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgaHR0cEFkYXB0ZXIgZnJvbSAnLi9odHRwLmpzJztcbmltcG9ydCB4aHJBZGFwdGVyIGZyb20gJy4veGhyLmpzJztcbmltcG9ydCBmZXRjaEFkYXB0ZXIgZnJvbSAnLi9mZXRjaC5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tIFwiLi4vY29yZS9BeGlvc0Vycm9yLmpzXCI7XG5cbmNvbnN0IGtub3duQWRhcHRlcnMgPSB7XG4gIGh0dHA6IGh0dHBBZGFwdGVyLFxuICB4aHI6IHhockFkYXB0ZXIsXG4gIGZldGNoOiBmZXRjaEFkYXB0ZXJcbn1cblxudXRpbHMuZm9yRWFjaChrbm93bkFkYXB0ZXJzLCAoZm4sIHZhbHVlKSA9PiB7XG4gIGlmIChmbikge1xuICAgIHRyeSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICduYW1lJywge3ZhbHVlfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ2FkYXB0ZXJOYW1lJywge3ZhbHVlfSk7XG4gIH1cbn0pO1xuXG5jb25zdCByZW5kZXJSZWFzb24gPSAocmVhc29uKSA9PiBgLSAke3JlYXNvbn1gO1xuXG5jb25zdCBpc1Jlc29sdmVkSGFuZGxlID0gKGFkYXB0ZXIpID0+IHV0aWxzLmlzRnVuY3Rpb24oYWRhcHRlcikgfHwgYWRhcHRlciA9PT0gbnVsbCB8fCBhZGFwdGVyID09PSBmYWxzZTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnZXRBZGFwdGVyOiAoYWRhcHRlcnMpID0+IHtcbiAgICBhZGFwdGVycyA9IHV0aWxzLmlzQXJyYXkoYWRhcHRlcnMpID8gYWRhcHRlcnMgOiBbYWRhcHRlcnNdO1xuXG4gICAgY29uc3Qge2xlbmd0aH0gPSBhZGFwdGVycztcbiAgICBsZXQgbmFtZU9yQWRhcHRlcjtcbiAgICBsZXQgYWRhcHRlcjtcblxuICAgIGNvbnN0IHJlamVjdGVkUmVhc29ucyA9IHt9O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgbmFtZU9yQWRhcHRlciA9IGFkYXB0ZXJzW2ldO1xuICAgICAgbGV0IGlkO1xuXG4gICAgICBhZGFwdGVyID0gbmFtZU9yQWRhcHRlcjtcblxuICAgICAgaWYgKCFpc1Jlc29sdmVkSGFuZGxlKG5hbWVPckFkYXB0ZXIpKSB7XG4gICAgICAgIGFkYXB0ZXIgPSBrbm93bkFkYXB0ZXJzWyhpZCA9IFN0cmluZyhuYW1lT3JBZGFwdGVyKSkudG9Mb3dlckNhc2UoKV07XG5cbiAgICAgICAgaWYgKGFkYXB0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKGBVbmtub3duIGFkYXB0ZXIgJyR7aWR9J2ApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGFwdGVyKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZWplY3RlZFJlYXNvbnNbaWQgfHwgJyMnICsgaV0gPSBhZGFwdGVyO1xuICAgIH1cblxuICAgIGlmICghYWRhcHRlcikge1xuXG4gICAgICBjb25zdCByZWFzb25zID0gT2JqZWN0LmVudHJpZXMocmVqZWN0ZWRSZWFzb25zKVxuICAgICAgICAubWFwKChbaWQsIHN0YXRlXSkgPT4gYGFkYXB0ZXIgJHtpZH0gYCArXG4gICAgICAgICAgKHN0YXRlID09PSBmYWxzZSA/ICdpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBlbnZpcm9ubWVudCcgOiAnaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgYnVpbGQnKVxuICAgICAgICApO1xuXG4gICAgICBsZXQgcyA9IGxlbmd0aCA/XG4gICAgICAgIChyZWFzb25zLmxlbmd0aCA+IDEgPyAnc2luY2UgOlxcbicgKyByZWFzb25zLm1hcChyZW5kZXJSZWFzb24pLmpvaW4oJ1xcbicpIDogJyAnICsgcmVuZGVyUmVhc29uKHJlYXNvbnNbMF0pKSA6XG4gICAgICAgICdhcyBubyBhZGFwdGVyIHNwZWNpZmllZCc7XG5cbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICBgVGhlcmUgaXMgbm8gc3VpdGFibGUgYWRhcHRlciB0byBkaXNwYXRjaCB0aGUgcmVxdWVzdCBgICsgcyxcbiAgICAgICAgJ0VSUl9OT1RfU1VQUE9SVCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkYXB0ZXI7XG4gIH0sXG4gIGFkYXB0ZXJzOiBrbm93bkFkYXB0ZXJzXG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHJhbnNmb3JtRGF0YSBmcm9tICcuL3RyYW5zZm9ybURhdGEuanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4uL2NhbmNlbC9pc0NhbmNlbC5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQgYWRhcHRlcnMgZnJvbSBcIi4uL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzXCI7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cblxuICBpZiAoY29uZmlnLnNpZ25hbCAmJiBjb25maWcuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICB0aHJvdyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICpcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb25maWcuaGVhZGVycyk7XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICBpZiAoWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLmluZGV4T2YoY29uZmlnLm1ldGhvZCkgIT09IC0xKSB7XG4gICAgY29uZmlnLmhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsIGZhbHNlKTtcbiAgfVxuXG4gIGNvbnN0IGFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyKGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXIpO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgcmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlc3BvbnNlLmhlYWRlcnMpO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZVxuICAgICAgICApO1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge1ZFUlNJT059IGZyb20gJy4uL2Vudi9kYXRhLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKCh0eXBlLCBpKSA9PiB7XG4gIHZhbGlkYXRvcnNbdHlwZV0gPSBmdW5jdGlvbiB2YWxpZGF0b3IodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSB0eXBlIHx8ICdhJyArIChpIDwgMSA/ICduICcgOiAnICcpICsgdHlwZTtcbiAgfTtcbn0pO1xuXG5jb25zdCBkZXByZWNhdGVkV2FybmluZ3MgPSB7fTtcblxuLyoqXG4gKiBUcmFuc2l0aW9uYWwgb3B0aW9uIHZhbGlkYXRvclxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvciAtIHNldCB0byBmYWxzZSBpZiB0aGUgdHJhbnNpdGlvbmFsIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkXG4gKiBAcGFyYW0ge3N0cmluZz99IHZlcnNpb24gLSBkZXByZWNhdGVkIHZlcnNpb24gLyByZW1vdmVkIHNpbmNlIHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gbWVzc2FnZSAtIHNvbWUgbWVzc2FnZSB3aXRoIGFkZGl0aW9uYWwgaW5mb1xuICpcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiAodmFsdWUsIG9wdCwgb3B0cykgPT4ge1xuICAgIGlmICh2YWxpZGF0b3IgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShvcHQsICcgaGFzIGJlZW4gcmVtb3ZlZCcgKyAodmVyc2lvbiA/ICcgaW4gJyArIHZlcnNpb24gOiAnJykpLFxuICAgICAgICBBeGlvc0Vycm9yLkVSUl9ERVBSRUNBVEVEXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEFzc2VydCBvYmplY3QncyBwcm9wZXJ0aWVzIHR5cGVcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKlxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgYWxsb3dVbmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICB9XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBjb25zdCBvcHQgPSBrZXlzW2ldO1xuICAgIGNvbnN0IHZhbGlkYXRvciA9IHNjaGVtYVtvcHRdO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYXNzZXJ0T3B0aW9ucyxcbiAgdmFsaWRhdG9yc1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBidWlsZFVSTCBmcm9tICcuLi9oZWxwZXJzL2J1aWxkVVJMLmpzJztcbmltcG9ydCBJbnRlcmNlcHRvck1hbmFnZXIgZnJvbSAnLi9JbnRlcmNlcHRvck1hbmFnZXIuanMnO1xuaW1wb3J0IGRpc3BhdGNoUmVxdWVzdCBmcm9tICcuL2Rpc3BhdGNoUmVxdWVzdC5qcyc7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSAnLi9tZXJnZUNvbmZpZy5qcyc7XG5pbXBvcnQgYnVpbGRGdWxsUGF0aCBmcm9tICcuL2J1aWxkRnVsbFBhdGguanMnO1xuaW1wb3J0IHZhbGlkYXRvciBmcm9tICcuLi9oZWxwZXJzL3ZhbGlkYXRvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4vQXhpb3NIZWFkZXJzLmpzJztcblxuY29uc3QgdmFsaWRhdG9ycyA9IHZhbGlkYXRvci52YWxpZGF0b3JzO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5jbGFzcyBBeGlvcyB7XG4gIGNvbnN0cnVjdG9yKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gY29uZmlnT3JVcmwgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICAgKiBAcGFyYW0gez9PYmplY3R9IGNvbmZpZ1xuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gICAqL1xuICBhc3luYyByZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX3JlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgbGV0IGR1bW15O1xuXG4gICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlID8gRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZHVtbXkgPSB7fSkgOiAoZHVtbXkgPSBuZXcgRXJyb3IoKSk7XG5cbiAgICAgICAgLy8gc2xpY2Ugb2ZmIHRoZSBFcnJvcjogLi4uIGxpbmVcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBkdW1teS5zdGFjayA/IGR1bW15LnN0YWNrLnJlcGxhY2UoL14uK1xcbi8sICcnKSA6ICcnO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghZXJyLnN0YWNrKSB7XG4gICAgICAgICAgICBlcnIuc3RhY2sgPSBzdGFjaztcbiAgICAgICAgICAgIC8vIG1hdGNoIHdpdGhvdXQgdGhlIDIgdG9wIHN0YWNrIGxpbmVzXG4gICAgICAgICAgfSBlbHNlIGlmIChzdGFjayAmJiAhU3RyaW5nKGVyci5zdGFjaykuZW5kc1dpdGgoc3RhY2sucmVwbGFjZSgvXi4rXFxuLitcXG4vLCAnJykpKSB7XG4gICAgICAgICAgICBlcnIuc3RhY2sgKz0gJ1xcbicgKyBzdGFja1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlnbm9yZSB0aGUgY2FzZSB3aGVyZSBcInN0YWNrXCIgaXMgYW4gdW4td3JpdGFibGUgcHJvcGVydHlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG5cbiAgX3JlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgICBpZiAodHlwZW9mIGNvbmZpZ09yVXJsID09PSAnc3RyaW5nJykge1xuICAgICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgICAgY29uZmlnLnVybCA9IGNvbmZpZ09yVXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25maWcgPSBjb25maWdPclVybCB8fCB7fTtcbiAgICB9XG5cbiAgICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gICAgY29uc3Qge3RyYW5zaXRpb25hbCwgcGFyYW1zU2VyaWFsaXplciwgaGVhZGVyc30gPSBjb25maWc7XG5cbiAgICBpZiAodHJhbnNpdGlvbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHRyYW5zaXRpb25hbCwge1xuICAgICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgICAgZm9yY2VkSlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbilcbiAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zU2VyaWFsaXplciAhPSBudWxsKSB7XG4gICAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihwYXJhbXNTZXJpYWxpemVyKSkge1xuICAgICAgICBjb25maWcucGFyYW1zU2VyaWFsaXplciA9IHtcbiAgICAgICAgICBzZXJpYWxpemU6IHBhcmFtc1NlcmlhbGl6ZXJcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnMocGFyYW1zU2VyaWFsaXplciwge1xuICAgICAgICAgIGVuY29kZTogdmFsaWRhdG9ycy5mdW5jdGlvbixcbiAgICAgICAgICBzZXJpYWxpemU6IHZhbGlkYXRvcnMuZnVuY3Rpb25cbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgICBjb25maWcubWV0aG9kID0gKGNvbmZpZy5tZXRob2QgfHwgdGhpcy5kZWZhdWx0cy5tZXRob2QgfHwgJ2dldCcpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgICBsZXQgY29udGV4dEhlYWRlcnMgPSBoZWFkZXJzICYmIHV0aWxzLm1lcmdlKFxuICAgICAgaGVhZGVycy5jb21tb24sXG4gICAgICBoZWFkZXJzW2NvbmZpZy5tZXRob2RdXG4gICAgKTtcblxuICAgIGhlYWRlcnMgJiYgdXRpbHMuZm9yRWFjaChcbiAgICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgICAgKG1ldGhvZCkgPT4ge1xuICAgICAgICBkZWxldGUgaGVhZGVyc1ttZXRob2RdO1xuICAgICAgfVxuICAgICk7XG5cbiAgICBjb25maWcuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5jb25jYXQoY29udGV4dEhlYWRlcnMsIGhlYWRlcnMpO1xuXG4gICAgLy8gZmlsdGVyIG91dCBza2lwcGVkIGludGVyY2VwdG9yc1xuICAgIGNvbnN0IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gICAgbGV0IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHRydWU7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgICAgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIGxldCBwcm9taXNlO1xuICAgIGxldCBpID0gMDtcbiAgICBsZXQgbGVuO1xuXG4gICAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICAgIGNvbnN0IGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdC5iaW5kKHRoaXMpLCB1bmRlZmluZWRdO1xuICAgICAgY2hhaW4udW5zaGlmdC5hcHBseShjaGFpbiwgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4pO1xuICAgICAgY2hhaW4ucHVzaC5hcHBseShjaGFpbiwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGxlbiA9IGNoYWluLmxlbmd0aDtcblxuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluW2krK10sIGNoYWluW2krK10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICBsZW4gPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGg7XG5cbiAgICBsZXQgbmV3Q29uZmlnID0gY29uZmlnO1xuXG4gICAgaSA9IDA7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgY29uc3Qgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgY29uc3Qgb25SZWplY3RlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluW2krK107XG4gICAgICB0cnkge1xuICAgICAgICBuZXdDb25maWcgPSBvbkZ1bGZpbGxlZChuZXdDb25maWcpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgb25SZWplY3RlZC5jYWxsKHRoaXMsIGVycm9yKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QuY2FsbCh0aGlzLCBuZXdDb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cblxuICAgIGkgPSAwO1xuICAgIGxlbiA9IHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihyZXNwb25zZUludGVyY2VwdG9yQ2hhaW5baSsrXSwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10pO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgZ2V0VXJpKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gICAgY29uc3QgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXR1cm4gYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKTtcbiAgfVxufVxuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZCxcbiAgICAgIHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cblxuICBmdW5jdGlvbiBnZW5lcmF0ZUhUVFBNZXRob2QoaXNGb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGh0dHBNZXRob2QodXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgaGVhZGVyczogaXNGb3JtID8ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSdcbiAgICAgICAgfSA6IHt9LFxuICAgICAgICB1cmwsXG4gICAgICAgIGRhdGFcbiAgICAgIH0pKTtcbiAgICB9O1xuICB9XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBnZW5lcmF0ZUhUVFBNZXRob2QoKTtcblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kICsgJ0Zvcm0nXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCh0cnVlKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvcztcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vQ2FuY2VsZWRFcnJvci5qcyc7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKlxuICogQHJldHVybnMge0NhbmNlbFRva2VufVxuICovXG5jbGFzcyBDYW5jZWxUb2tlbiB7XG4gIGNvbnN0cnVjdG9yKGV4ZWN1dG9yKSB7XG4gICAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGxldCByZXNvbHZlUHJvbWlzZTtcblxuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgfSk7XG5cbiAgICBjb25zdCB0b2tlbiA9IHRoaXM7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuKGNhbmNlbCA9PiB7XG4gICAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgICAgbGV0IGkgPSB0b2tlbi5fbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgICAgfVxuICAgICAgdG9rZW4uX2xpc3RlbmVycyA9IG51bGw7XG4gICAgfSk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuID0gb25mdWxmaWxsZWQgPT4ge1xuICAgICAgbGV0IF9yZXNvbHZlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB9KS50aGVuKG9uZnVsZmlsbGVkKTtcblxuICAgICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICAgIHRva2VuLnVuc3Vic2NyaWJlKF9yZXNvbHZlKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG5cbiAgICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gICAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWxlZEVycm9yKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCk7XG4gICAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICAgKi9cbiAgdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIHRocm93IHRoaXMucmVhc29uO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgdG8gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICBsaXN0ZW5lcih0aGlzLnJlYXNvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xpc3RlbmVycykge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMgPSBbbGlzdGVuZXJdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gICAqL1xuXG4gIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAgICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAgICovXG4gIHN0YXRpYyBzb3VyY2UoKSB7XG4gICAgbGV0IGNhbmNlbDtcbiAgICBjb25zdCB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgICBjYW5jZWwgPSBjO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICB0b2tlbixcbiAgICAgIGNhbmNlbFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FuY2VsVG9rZW47XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuIHV0aWxzLmlzT2JqZWN0KHBheWxvYWQpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59XG4iLCAiY29uc3QgSHR0cFN0YXR1c0NvZGUgPSB7XG4gIENvbnRpbnVlOiAxMDAsXG4gIFN3aXRjaGluZ1Byb3RvY29sczogMTAxLFxuICBQcm9jZXNzaW5nOiAxMDIsXG4gIEVhcmx5SGludHM6IDEwMyxcbiAgT2s6IDIwMCxcbiAgQ3JlYXRlZDogMjAxLFxuICBBY2NlcHRlZDogMjAyLFxuICBOb25BdXRob3JpdGF0aXZlSW5mb3JtYXRpb246IDIwMyxcbiAgTm9Db250ZW50OiAyMDQsXG4gIFJlc2V0Q29udGVudDogMjA1LFxuICBQYXJ0aWFsQ29udGVudDogMjA2LFxuICBNdWx0aVN0YXR1czogMjA3LFxuICBBbHJlYWR5UmVwb3J0ZWQ6IDIwOCxcbiAgSW1Vc2VkOiAyMjYsXG4gIE11bHRpcGxlQ2hvaWNlczogMzAwLFxuICBNb3ZlZFBlcm1hbmVudGx5OiAzMDEsXG4gIEZvdW5kOiAzMDIsXG4gIFNlZU90aGVyOiAzMDMsXG4gIE5vdE1vZGlmaWVkOiAzMDQsXG4gIFVzZVByb3h5OiAzMDUsXG4gIFVudXNlZDogMzA2LFxuICBUZW1wb3JhcnlSZWRpcmVjdDogMzA3LFxuICBQZXJtYW5lbnRSZWRpcmVjdDogMzA4LFxuICBCYWRSZXF1ZXN0OiA0MDAsXG4gIFVuYXV0aG9yaXplZDogNDAxLFxuICBQYXltZW50UmVxdWlyZWQ6IDQwMixcbiAgRm9yYmlkZGVuOiA0MDMsXG4gIE5vdEZvdW5kOiA0MDQsXG4gIE1ldGhvZE5vdEFsbG93ZWQ6IDQwNSxcbiAgTm90QWNjZXB0YWJsZTogNDA2LFxuICBQcm94eUF1dGhlbnRpY2F0aW9uUmVxdWlyZWQ6IDQwNyxcbiAgUmVxdWVzdFRpbWVvdXQ6IDQwOCxcbiAgQ29uZmxpY3Q6IDQwOSxcbiAgR29uZTogNDEwLFxuICBMZW5ndGhSZXF1aXJlZDogNDExLFxuICBQcmVjb25kaXRpb25GYWlsZWQ6IDQxMixcbiAgUGF5bG9hZFRvb0xhcmdlOiA0MTMsXG4gIFVyaVRvb0xvbmc6IDQxNCxcbiAgVW5zdXBwb3J0ZWRNZWRpYVR5cGU6IDQxNSxcbiAgUmFuZ2VOb3RTYXRpc2ZpYWJsZTogNDE2LFxuICBFeHBlY3RhdGlvbkZhaWxlZDogNDE3LFxuICBJbUFUZWFwb3Q6IDQxOCxcbiAgTWlzZGlyZWN0ZWRSZXF1ZXN0OiA0MjEsXG4gIFVucHJvY2Vzc2FibGVFbnRpdHk6IDQyMixcbiAgTG9ja2VkOiA0MjMsXG4gIEZhaWxlZERlcGVuZGVuY3k6IDQyNCxcbiAgVG9vRWFybHk6IDQyNSxcbiAgVXBncmFkZVJlcXVpcmVkOiA0MjYsXG4gIFByZWNvbmRpdGlvblJlcXVpcmVkOiA0MjgsXG4gIFRvb01hbnlSZXF1ZXN0czogNDI5LFxuICBSZXF1ZXN0SGVhZGVyRmllbGRzVG9vTGFyZ2U6IDQzMSxcbiAgVW5hdmFpbGFibGVGb3JMZWdhbFJlYXNvbnM6IDQ1MSxcbiAgSW50ZXJuYWxTZXJ2ZXJFcnJvcjogNTAwLFxuICBOb3RJbXBsZW1lbnRlZDogNTAxLFxuICBCYWRHYXRld2F5OiA1MDIsXG4gIFNlcnZpY2VVbmF2YWlsYWJsZTogNTAzLFxuICBHYXRld2F5VGltZW91dDogNTA0LFxuICBIdHRwVmVyc2lvbk5vdFN1cHBvcnRlZDogNTA1LFxuICBWYXJpYW50QWxzb05lZ290aWF0ZXM6IDUwNixcbiAgSW5zdWZmaWNpZW50U3RvcmFnZTogNTA3LFxuICBMb29wRGV0ZWN0ZWQ6IDUwOCxcbiAgTm90RXh0ZW5kZWQ6IDUxMCxcbiAgTmV0d29ya0F1dGhlbnRpY2F0aW9uUmVxdWlyZWQ6IDUxMSxcbn07XG5cbk9iamVjdC5lbnRyaWVzKEh0dHBTdGF0dXNDb2RlKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgSHR0cFN0YXR1c0NvZGVbdmFsdWVdID0ga2V5O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEh0dHBTdGF0dXNDb2RlO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IGJpbmQgZnJvbSAnLi9oZWxwZXJzL2JpbmQuanMnO1xuaW1wb3J0IEF4aW9zIGZyb20gJy4vY29yZS9BeGlvcy5qcyc7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSAnLi9jb3JlL21lcmdlQ29uZmlnLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBmb3JtRGF0YVRvSlNPTiBmcm9tICcuL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgQ2FuY2VsVG9rZW4gZnJvbSAnLi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4vY2FuY2VsL2lzQ2FuY2VsLmpzJztcbmltcG9ydCB7VkVSU0lPTn0gZnJvbSAnLi9lbnYvZGF0YS5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgc3ByZWFkIGZyb20gJy4vaGVscGVycy9zcHJlYWQuanMnO1xuaW1wb3J0IGlzQXhpb3NFcnJvciBmcm9tICcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4vY29yZS9BeGlvc0hlYWRlcnMuanNcIjtcbmltcG9ydCBhZGFwdGVycyBmcm9tICcuL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzJztcbmltcG9ydCBIdHRwU3RhdHVzQ29kZSBmcm9tICcuL2hlbHBlcnMvSHR0cFN0YXR1c0NvZGUuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKlxuICogQHJldHVybnMge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIGNvbnN0IGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIGNvbnN0IGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCwgbnVsbCwge2FsbE93bktleXM6IHRydWV9KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG5jb25zdCBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbGVkRXJyb3IgPSBDYW5jZWxlZEVycm9yO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSBDYW5jZWxUb2tlbjtcbmF4aW9zLmlzQ2FuY2VsID0gaXNDYW5jZWw7XG5heGlvcy5WRVJTSU9OID0gVkVSU0lPTjtcbmF4aW9zLnRvRm9ybURhdGEgPSB0b0Zvcm1EYXRhO1xuXG4vLyBFeHBvc2UgQXhpb3NFcnJvciBjbGFzc1xuYXhpb3MuQXhpb3NFcnJvciA9IEF4aW9zRXJyb3I7XG5cbi8vIGFsaWFzIGZvciBDYW5jZWxlZEVycm9yIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5heGlvcy5DYW5jZWwgPSBheGlvcy5DYW5jZWxlZEVycm9yO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuXG5heGlvcy5zcHJlYWQgPSBzcHJlYWQ7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IGlzQXhpb3NFcnJvcjtcblxuLy8gRXhwb3NlIG1lcmdlQ29uZmlnXG5heGlvcy5tZXJnZUNvbmZpZyA9IG1lcmdlQ29uZmlnO1xuXG5heGlvcy5BeGlvc0hlYWRlcnMgPSBBeGlvc0hlYWRlcnM7XG5cbmF4aW9zLmZvcm1Ub0pTT04gPSB0aGluZyA9PiBmb3JtRGF0YVRvSlNPTih1dGlscy5pc0hUTUxGb3JtKHRoaW5nKSA/IG5ldyBGb3JtRGF0YSh0aGluZykgOiB0aGluZyk7XG5cbmF4aW9zLmdldEFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyO1xuXG5heGlvcy5IdHRwU3RhdHVzQ29kZSA9IEh0dHBTdGF0dXNDb2RlO1xuXG5heGlvcy5kZWZhdWx0ID0gYXhpb3M7XG5cbi8vIHRoaXMgbW9kdWxlIHNob3VsZCBvbmx5IGhhdmUgYSBkZWZhdWx0IGV4cG9ydFxuZXhwb3J0IGRlZmF1bHQgYXhpb3NcbiIsICJpbXBvcnQgYXhpb3MgZnJvbSAnLi9saWIvYXhpb3MuanMnO1xuXG4vLyBUaGlzIG1vZHVsZSBpcyBpbnRlbmRlZCB0byB1bndyYXAgQXhpb3MgZGVmYXVsdCBleHBvcnQgYXMgbmFtZWQuXG4vLyBLZWVwIHRvcC1sZXZlbCBleHBvcnQgc2FtZSB3aXRoIHN0YXRpYyBwcm9wZXJ0aWVzXG4vLyBzbyB0aGF0IGl0IGNhbiBrZWVwIHNhbWUgd2l0aCBlcyBtb2R1bGUgb3IgY2pzXG5jb25zdCB7XG4gIEF4aW9zLFxuICBBeGlvc0Vycm9yLFxuICBDYW5jZWxlZEVycm9yLFxuICBpc0NhbmNlbCxcbiAgQ2FuY2VsVG9rZW4sXG4gIFZFUlNJT04sXG4gIGFsbCxcbiAgQ2FuY2VsLFxuICBpc0F4aW9zRXJyb3IsXG4gIHNwcmVhZCxcbiAgdG9Gb3JtRGF0YSxcbiAgQXhpb3NIZWFkZXJzLFxuICBIdHRwU3RhdHVzQ29kZSxcbiAgZm9ybVRvSlNPTixcbiAgZ2V0QWRhcHRlcixcbiAgbWVyZ2VDb25maWdcbn0gPSBheGlvcztcblxuZXhwb3J0IHtcbiAgYXhpb3MgYXMgZGVmYXVsdCxcbiAgQXhpb3MsXG4gIEF4aW9zRXJyb3IsXG4gIENhbmNlbGVkRXJyb3IsXG4gIGlzQ2FuY2VsLFxuICBDYW5jZWxUb2tlbixcbiAgVkVSU0lPTixcbiAgYWxsLFxuICBDYW5jZWwsXG4gIGlzQXhpb3NFcnJvcixcbiAgc3ByZWFkLFxuICB0b0Zvcm1EYXRhLFxuICBBeGlvc0hlYWRlcnMsXG4gIEh0dHBTdGF0dXNDb2RlLFxuICBmb3JtVG9KU09OLFxuICBnZXRBZGFwdGVyLFxuICBtZXJnZUNvbmZpZ1xufVxuIiwgImNvbnN0IGNhY2hlID0gbmV3IFdlYWtNYXA8U3RyaW5nLCBzdHJpbmdbXT4oKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhdGhzcGVjKC4uLnBhdGhzOiBzdHJpbmdbXSkge1xuICAgY29uc3Qga2V5ID0gbmV3IFN0cmluZyhwYXRocyk7XG4gICBjYWNoZS5zZXQoa2V5LCBwYXRocyk7XG5cbiAgIHJldHVybiBrZXkgYXMgc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQYXRoU3BlYyhwYXRoOiBzdHJpbmcgfCB1bmtub3duKTogcGF0aCBpcyBzdHJpbmcge1xuICAgcmV0dXJuIHBhdGggaW5zdGFuY2VvZiBTdHJpbmcgJiYgY2FjaGUuaGFzKHBhdGgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9QYXRocyhwYXRoU3BlYzogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgcmV0dXJuIGNhY2hlLmdldChwYXRoU3BlYykgfHwgW107XG59XG4iLCAiaW1wb3J0IHR5cGUgeyBTaW1wbGVHaXRUYXNrIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG4vKipcbiAqIFRoZSBgR2l0RXJyb3JgIGlzIHRocm93biB3aGVuIHRoZSB1bmRlcmx5aW5nIGBnaXRgIHByb2Nlc3MgdGhyb3dzIGFcbiAqIGZhdGFsIGV4Y2VwdGlvbiAoZWcgYW4gYEVOT0VOVGAgZXhjZXB0aW9uIHdoZW4gYXR0ZW1wdGluZyB0byB1c2UgYVxuICogbm9uLXdyaXRhYmxlIGRpcmVjdG9yeSBhcyB0aGUgcm9vdCBmb3IgeW91ciByZXBvKSwgYW5kIGFjdHMgYXMgdGhlXG4gKiBiYXNlIGNsYXNzIGZvciBtb3JlIHNwZWNpZmljIGVycm9ycyB0aHJvd24gYnkgdGhlIHBhcnNpbmcgb2YgdGhlXG4gKiBnaXQgcmVzcG9uc2Ugb3IgZXJyb3JzIGluIHRoZSBjb25maWd1cmF0aW9uIG9mIHRoZSB0YXNrIGFib3V0IHRvXG4gKiBiZSBydW4uXG4gKlxuICogV2hlbiBhbiBleGNlcHRpb24gaXMgdGhyb3duLCBwZW5kaW5nIHRhc2tzIGluIHRoZSBzYW1lIGluc3RhbmNlIHdpbGxcbiAqIG5vdCBiZSBleGVjdXRlZC4gVGhlIHJlY29tbWVuZGVkIHdheSB0byBydW4gYSBzZXJpZXMgb2YgdGFza3MgdGhhdFxuICogY2FuIGluZGVwZW5kZW50bHkgZmFpbCB3aXRob3V0IG5lZWRpbmcgdG8gcHJldmVudCBmdXR1cmUgdGFza3MgZnJvbVxuICogcnVubmluZyBpcyB0byBjYXRjaCB0aGVtIGluZGl2aWR1YWxseTpcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gaW1wb3J0IHsgZ2l0UCwgU2ltcGxlR2l0LCBHaXRFcnJvciwgUHVsbFJlc3VsdCB9IGZyb20gJ3NpbXBsZS1naXQnO1xuXG4gZnVuY3Rpb24gY2F0Y2hUYXNrIChlOiBHaXRFcnJvcikge1xuICAgcmV0dXJuIGUuXG4gfVxuXG4gY29uc3QgZ2l0ID0gZ2l0UChyZXBvV29ya2luZ0Rpcik7XG4gY29uc3QgcHVsbGVkOiBQdWxsUmVzdWx0IHwgR2l0RXJyb3IgPSBhd2FpdCBnaXQucHVsbCgpLmNhdGNoKGNhdGNoVGFzayk7XG4gY29uc3QgcHVzaGVkOiBzdHJpbmcgfCBHaXRFcnJvciA9IGF3YWl0IGdpdC5wdXNoVGFncygpLmNhdGNoKGNhdGNoVGFzayk7XG4gYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBHaXRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgIGNvbnN0cnVjdG9yKFxuICAgICAgcHVibGljIHRhc2s/OiBTaW1wbGVHaXRUYXNrPGFueT4sXG4gICAgICBtZXNzYWdlPzogc3RyaW5nXG4gICApIHtcbiAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIG5ldy50YXJnZXQucHJvdG90eXBlKTtcbiAgIH1cbn1cbiIsICJpbXBvcnQgeyBHaXRFcnJvciB9IGZyb20gJy4vZ2l0LWVycm9yJztcblxuLyoqXG4gKiBUaGUgYEdpdFJlc3BvbnNlRXJyb3JgIGlzIHRoZSB3cmFwcGVyIGZvciBhIHBhcnNlZCByZXNwb25zZSB0aGF0IGlzIHRyZWF0ZWQgYXNcbiAqIGEgZmF0YWwgZXJyb3IsIGZvciBleGFtcGxlIGF0dGVtcHRpbmcgYSBgbWVyZ2VgIGNhbiBsZWF2ZSB0aGUgcmVwbyBpbiBhIGNvcnJ1cHRlZFxuICogc3RhdGUgd2hlbiB0aGVyZSBhcmUgY29uZmxpY3RzIHNvIHRoZSB0YXNrIHdpbGwgcmVqZWN0IHJhdGhlciB0aGFuIHJlc29sdmUuXG4gKlxuICogRm9yIGV4YW1wbGUsIGNhdGNoaW5nIHRoZSBtZXJnZSBjb25mbGljdCBleGNlcHRpb246XG4gKlxuICogYGBgdHlwZXNjcmlwdFxuIGltcG9ydCB7IGdpdFAsIFNpbXBsZUdpdCwgR2l0UmVzcG9uc2VFcnJvciwgTWVyZ2VTdW1tYXJ5IH0gZnJvbSAnc2ltcGxlLWdpdCc7XG5cbiBjb25zdCBnaXQgPSBnaXRQKHJlcG9Sb290KTtcbiBjb25zdCBtZXJnZU9wdGlvbnM6IHN0cmluZ1tdID0gWyctLW5vLWZmJywgJ290aGVyLWJyYW5jaCddO1xuIGNvbnN0IG1lcmdlU3VtbWFyeTogTWVyZ2VTdW1tYXJ5ID0gYXdhaXQgZ2l0Lm1lcmdlKG1lcmdlT3B0aW9ucylcbiAgICAgIC5jYXRjaCgoZTogR2l0UmVzcG9uc2VFcnJvcjxNZXJnZVN1bW1hcnk+KSA9PiBlLmdpdCk7XG5cbiBpZiAobWVyZ2VTdW1tYXJ5LmZhaWxlZCkge1xuICAgLy8gZGVhbCB3aXRoIHRoZSBlcnJvclxuIH1cbiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIEdpdFJlc3BvbnNlRXJyb3I8VCA9IGFueT4gZXh0ZW5kcyBHaXRFcnJvciB7XG4gICBjb25zdHJ1Y3RvcihcbiAgICAgIC8qKlxuICAgICAgICogYC5naXRgIGFjY2VzcyB0aGUgcGFyc2VkIHJlc3BvbnNlIHRoYXQgaXMgdHJlYXRlZCBhcyBiZWluZyBhbiBlcnJvclxuICAgICAgICovXG4gICAgICBwdWJsaWMgcmVhZG9ubHkgZ2l0OiBULFxuICAgICAgbWVzc2FnZT86IHN0cmluZ1xuICAgKSB7XG4gICAgICBzdXBlcih1bmRlZmluZWQsIG1lc3NhZ2UgfHwgU3RyaW5nKGdpdCkpO1xuICAgfVxufVxuIiwgImltcG9ydCB7IEdpdEVycm9yIH0gZnJvbSAnLi9naXQtZXJyb3InO1xuXG4vKipcbiAqIFRoZSBgVGFza0NvbmZpZ3VyYXRpb25FcnJvcmAgaXMgdGhyb3duIHdoZW4gYSBjb21tYW5kIHdhcyBpbmNvcnJlY3RseVxuICogY29uZmlndXJlZC4gQW4gZXJyb3Igb2YgdGhpcyBraW5kIG1lYW5zIHRoYXQgbm8gYXR0ZW1wdCB3YXMgbWFkZSB0b1xuICogcnVuIHlvdXIgY29tbWFuZCB0aHJvdWdoIHRoZSB1bmRlcmx5aW5nIGBnaXRgIGJpbmFyeS5cbiAqXG4gKiBDaGVjayB0aGUgYC5tZXNzYWdlYCBwcm9wZXJ0eSBmb3IgbW9yZSBkZXRhaWwgb24gd2h5IHlvdXIgY29uZmlndXJhdGlvblxuICogcmVzdWx0ZWQgaW4gYW4gZXJyb3IuXG4gKi9cbmV4cG9ydCBjbGFzcyBUYXNrQ29uZmlndXJhdGlvbkVycm9yIGV4dGVuZHMgR2l0RXJyb3Ige1xuICAgY29uc3RydWN0b3IobWVzc2FnZT86IHN0cmluZykge1xuICAgICAgc3VwZXIodW5kZWZpbmVkLCBtZXNzYWdlKTtcbiAgIH1cbn1cbiIsICJpbXBvcnQgeyBleGlzdHMsIEZPTERFUiB9IGZyb20gJ0Brd3NpdGVzL2ZpbGUtZXhpc3RzJztcbmltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgTlVMTCA9ICdcXDAnO1xuXG5leHBvcnQgY29uc3QgTk9PUDogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkID0gKCkgPT4ge307XG5cbi8qKlxuICogUmV0dXJucyBlaXRoZXIgdGhlIHNvdXJjZSBhcmd1bWVudCB3aGVuIGl0IGlzIGEgYEZ1bmN0aW9uYCwgb3IgdGhlIGRlZmF1bHRcbiAqIGBOT09QYCBmdW5jdGlvbiBjb25zdGFudFxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNGdW5jdGlvbjxUIGV4dGVuZHMgKCkgPT4gYW55Pihzb3VyY2U6IFQgfCBhbnkpOiBUIHtcbiAgIHJldHVybiB0eXBlb2Ygc291cmNlID09PSAnZnVuY3Rpb24nID8gc291cmNlIDogTk9PUDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHN1cHBsaWVkIGFyZ3VtZW50IGlzIGJvdGggYSBmdW5jdGlvbiwgYW5kIGlzIG5vdFxuICogdGhlIGBOT09QYCBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVXNlckZ1bmN0aW9uPFQgZXh0ZW5kcyBGdW5jdGlvbj4oc291cmNlOiBUIHwgYW55KTogc291cmNlIGlzIFQge1xuICAgcmV0dXJuIHR5cGVvZiBzb3VyY2UgPT09ICdmdW5jdGlvbicgJiYgc291cmNlICE9PSBOT09QO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRPbihpbnB1dDogc3RyaW5nLCBjaGFyOiBzdHJpbmcpOiBbc3RyaW5nLCBzdHJpbmddIHtcbiAgIGNvbnN0IGluZGV4ID0gaW5wdXQuaW5kZXhPZihjaGFyKTtcbiAgIGlmIChpbmRleCA8PSAwKSB7XG4gICAgICByZXR1cm4gW2lucHV0LCAnJ107XG4gICB9XG5cbiAgIHJldHVybiBbaW5wdXQuc3Vic3RyKDAsIGluZGV4KSwgaW5wdXQuc3Vic3RyKGluZGV4ICsgMSldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlyc3Q8VCBleHRlbmRzIGFueVtdPihpbnB1dDogVCwgb2Zmc2V0PzogbnVtYmVyKTogTWF5YmU8VFtudW1iZXJdPjtcbmV4cG9ydCBmdW5jdGlvbiBmaXJzdDxUIGV4dGVuZHMgSUFyZ3VtZW50cz4oaW5wdXQ6IFQsIG9mZnNldD86IG51bWJlcik6IE1heWJlPHVua25vd24+O1xuZXhwb3J0IGZ1bmN0aW9uIGZpcnN0KGlucHV0OiBhbnlbXSB8IElBcmd1bWVudHMsIG9mZnNldCA9IDApOiBNYXliZTx1bmtub3duPiB7XG4gICByZXR1cm4gaXNBcnJheUxpa2UoaW5wdXQpICYmIGlucHV0Lmxlbmd0aCA+IG9mZnNldCA/IGlucHV0W29mZnNldF0gOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsYXN0PFQgZXh0ZW5kcyBhbnlbXT4oaW5wdXQ6IFQsIG9mZnNldD86IG51bWJlcik6IE1heWJlPFRbbnVtYmVyXT47XG5leHBvcnQgZnVuY3Rpb24gbGFzdDxUIGV4dGVuZHMgSUFyZ3VtZW50cz4oaW5wdXQ6IFQsIG9mZnNldD86IG51bWJlcik6IE1heWJlPHVua25vd24+O1xuZXhwb3J0IGZ1bmN0aW9uIGxhc3Q8VD4oaW5wdXQ6IFQsIG9mZnNldD86IG51bWJlcik6IE1heWJlPHVua25vd24+O1xuZXhwb3J0IGZ1bmN0aW9uIGxhc3QoaW5wdXQ6IHVua25vd24sIG9mZnNldCA9IDApIHtcbiAgIGlmIChpc0FycmF5TGlrZShpbnB1dCkgJiYgaW5wdXQubGVuZ3RoID4gb2Zmc2V0KSB7XG4gICAgICByZXR1cm4gaW5wdXRbaW5wdXQubGVuZ3RoIC0gMSAtIG9mZnNldF07XG4gICB9XG59XG5cbnR5cGUgQXJyYXlMaWtlPFQgPSBhbnk+ID0gVFtdIHwgSUFyZ3VtZW50cyB8IHsgW2luZGV4OiBudW1iZXJdOiBUOyBsZW5ndGg6IG51bWJlciB9O1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZShpbnB1dDogYW55KTogaW5wdXQgaXMgQXJyYXlMaWtlIHtcbiAgIHJldHVybiAhIShpbnB1dCAmJiB0eXBlb2YgaW5wdXQubGVuZ3RoID09PSAnbnVtYmVyJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0xpbmVzV2l0aENvbnRlbnQoaW5wdXQgPSAnJywgdHJpbW1lZCA9IHRydWUsIHNlcGFyYXRvciA9ICdcXG4nKTogc3RyaW5nW10ge1xuICAgcmV0dXJuIGlucHV0LnNwbGl0KHNlcGFyYXRvcikucmVkdWNlKChvdXRwdXQsIGxpbmUpID0+IHtcbiAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gdHJpbW1lZCA/IGxpbmUudHJpbSgpIDogbGluZTtcbiAgICAgIGlmIChsaW5lQ29udGVudCkge1xuICAgICAgICAgb3V0cHV0LnB1c2gobGluZUNvbnRlbnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgIH0sIFtdIGFzIHN0cmluZ1tdKTtcbn1cblxudHlwZSBMaW5lV2l0aENvbnRlbnRDYWxsYmFjazxUID0gdm9pZD4gPSAobGluZTogc3RyaW5nKSA9PiBUO1xuXG5leHBvcnQgZnVuY3Rpb24gZm9yRWFjaExpbmVXaXRoQ29udGVudDxUPihcbiAgIGlucHV0OiBzdHJpbmcsXG4gICBjYWxsYmFjazogTGluZVdpdGhDb250ZW50Q2FsbGJhY2s8VD5cbik6IFRbXSB7XG4gICByZXR1cm4gdG9MaW5lc1dpdGhDb250ZW50KGlucHV0LCB0cnVlKS5tYXAoKGxpbmUpID0+IGNhbGxiYWNrKGxpbmUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvbGRlckV4aXN0cyhwYXRoOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgIHJldHVybiBleGlzdHMocGF0aCwgRk9MREVSKTtcbn1cblxuLyoqXG4gKiBBZGRzIGBpdGVtYCBpbnRvIHRoZSBgdGFyZ2V0YCBgQXJyYXlgIG9yIGBTZXRgIHdoZW4gaXQgaXMgbm90IGFscmVhZHkgcHJlc2VudCBhbmQgcmV0dXJucyB0aGUgYGl0ZW1gLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kPFQ+KHRhcmdldDogVFtdIHwgU2V0PFQ+LCBpdGVtOiBUKTogdHlwZW9mIGl0ZW0ge1xuICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgaWYgKCF0YXJnZXQuaW5jbHVkZXMoaXRlbSkpIHtcbiAgICAgICAgIHRhcmdldC5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldC5hZGQoaXRlbSk7XG4gICB9XG4gICByZXR1cm4gaXRlbTtcbn1cblxuLyoqXG4gKiBBZGRzIGBpdGVtYCBpbnRvIHRoZSBgdGFyZ2V0YCBgQXJyYXlgIHdoZW4gaXQgaXMgbm90IGFscmVhZHkgcHJlc2VudCBhbmQgcmV0dXJucyB0aGUgYHRhcmdldGAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbmNsdWRpbmc8VD4odGFyZ2V0OiBUW10sIGl0ZW06IFQpOiB0eXBlb2YgdGFyZ2V0IHtcbiAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgIXRhcmdldC5pbmNsdWRlcyhpdGVtKSkge1xuICAgICAgdGFyZ2V0LnB1c2goaXRlbSk7XG4gICB9XG5cbiAgIHJldHVybiB0YXJnZXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmU8VD4odGFyZ2V0OiBTZXQ8VD4gfCBUW10sIGl0ZW06IFQpOiBUIHtcbiAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gdGFyZ2V0LmluZGV4T2YoaXRlbSk7XG4gICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgdGFyZ2V0LnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9XG4gICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0LmRlbGV0ZShpdGVtKTtcbiAgIH1cbiAgIHJldHVybiBpdGVtO1xufVxuXG5leHBvcnQgY29uc3Qgb2JqZWN0VG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKSBhcyAoXG4gICBpbnB1dDogYW55XG4pID0+IHN0cmluZztcblxuZXhwb3J0IGZ1bmN0aW9uIGFzQXJyYXk8VD4oc291cmNlOiBUIHwgVFtdKTogVFtdIHtcbiAgIHJldHVybiBBcnJheS5pc0FycmF5KHNvdXJjZSkgPyBzb3VyY2UgOiBbc291cmNlXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzQ2FtZWxDYXNlKHN0cjogc3RyaW5nKSB7XG4gICByZXR1cm4gc3RyLnJlcGxhY2UoL1tcXHMtXSsoLikvZywgKF9hbGwsIGNocikgPT4ge1xuICAgICAgcmV0dXJuIGNoci50b1VwcGVyQ2FzZSgpO1xuICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc1N0cmluZ0FycmF5PFQ+KHNvdXJjZTogVCB8IFRbXSk6IHN0cmluZ1tdIHtcbiAgIHJldHVybiBhc0FycmF5KHNvdXJjZSkubWFwKFN0cmluZyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc051bWJlcihzb3VyY2U6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQsIG9uTmFOID0gMCkge1xuICAgaWYgKHNvdXJjZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gb25OYU47XG4gICB9XG5cbiAgIGNvbnN0IG51bSA9IHBhcnNlSW50KHNvdXJjZSwgMTApO1xuICAgcmV0dXJuIGlzTmFOKG51bSkgPyBvbk5hTiA6IG51bTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZWZpeGVkQXJyYXk8VD4oaW5wdXQ6IFRbXSwgcHJlZml4OiBUKTogVFtdIHtcbiAgIGNvbnN0IG91dHB1dDogVFtdID0gW107XG4gICBmb3IgKGxldCBpID0gMCwgbWF4ID0gaW5wdXQubGVuZ3RoOyBpIDwgbWF4OyBpKyspIHtcbiAgICAgIG91dHB1dC5wdXNoKHByZWZpeCwgaW5wdXRbaV0pO1xuICAgfVxuICAgcmV0dXJuIG91dHB1dDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJ1ZmZlclRvU3RyaW5nKGlucHV0OiBCdWZmZXIgfCBCdWZmZXJbXSk6IHN0cmluZyB7XG4gICByZXR1cm4gKEFycmF5LmlzQXJyYXkoaW5wdXQpID8gQnVmZmVyLmNvbmNhdChpbnB1dCkgOiBpbnB1dCkudG9TdHJpbmcoJ3V0Zi04Jyk7XG59XG5cbi8qKlxuICogR2V0IGEgbmV3IG9iamVjdCBmcm9tIGEgc291cmNlIG9iamVjdCB3aXRoIG9ubHkgdGhlIGxpc3RlZCBwcm9wZXJ0aWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGljayhzb3VyY2U6IFJlY29yZDxzdHJpbmcsIGFueT4sIHByb3BlcnRpZXM6IHN0cmluZ1tdKSB7XG4gICByZXR1cm4gT2JqZWN0LmFzc2lnbihcbiAgICAgIHt9LFxuICAgICAgLi4ucHJvcGVydGllcy5tYXAoKHByb3BlcnR5KSA9PiAocHJvcGVydHkgaW4gc291cmNlID8geyBbcHJvcGVydHldOiBzb3VyY2VbcHJvcGVydHldIH0gOiB7fSkpXG4gICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVsYXkoZHVyYXRpb24gPSAwKTogUHJvbWlzZTx2b2lkPiB7XG4gICByZXR1cm4gbmV3IFByb21pc2UoKGRvbmUpID0+IHNldFRpbWVvdXQoZG9uZSwgZHVyYXRpb24pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9yVm9pZDxUPihpbnB1dDogVCB8IGZhbHNlKSB7XG4gICBpZiAoaW5wdXQgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgfVxuICAgcmV0dXJuIGlucHV0O1xufVxuIiwgImltcG9ydCB7IE1heWJlLCBPcHRpb25zLCBQcmltaXRpdmVzIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgb2JqZWN0VG9TdHJpbmcgfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHsgaXNQYXRoU3BlYyB9IGZyb20gJy4uL2FyZ3MvcGF0aHNwZWMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFyZ3VtZW50RmlsdGVyUHJlZGljYXRlPFQ+IHtcbiAgIChpbnB1dDogYW55KTogaW5wdXQgaXMgVDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlclR5cGU8VCwgSz4oXG4gICBpbnB1dDogSyxcbiAgIGZpbHRlcjogQXJndW1lbnRGaWx0ZXJQcmVkaWNhdGU8VD5cbik6IEsgZXh0ZW5kcyBUID8gVCA6IHVuZGVmaW5lZDtcbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJUeXBlPFQsIEs+KGlucHV0OiBLLCBmaWx0ZXI6IEFyZ3VtZW50RmlsdGVyUHJlZGljYXRlPFQ+LCBkZWY6IFQpOiBUO1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlclR5cGU8VCwgSz4oaW5wdXQ6IEssIGZpbHRlcjogQXJndW1lbnRGaWx0ZXJQcmVkaWNhdGU8VD4sIGRlZj86IFQpOiBNYXliZTxUPiB7XG4gICBpZiAoZmlsdGVyKGlucHV0KSkge1xuICAgICAgcmV0dXJuIGlucHV0O1xuICAgfVxuICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gZGVmIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgY29uc3QgZmlsdGVyQXJyYXk6IEFyZ3VtZW50RmlsdGVyUHJlZGljYXRlPEFycmF5PGFueT4+ID0gKGlucHV0KTogaW5wdXQgaXMgQXJyYXk8YW55PiA9PiB7XG4gICByZXR1cm4gQXJyYXkuaXNBcnJheShpbnB1dCk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyUHJpbWl0aXZlcyhcbiAgIGlucHV0OiB1bmtub3duLFxuICAgb21pdD86IEFycmF5PCdib29sZWFuJyB8ICdzdHJpbmcnIHwgJ251bWJlcic+XG4pOiBpbnB1dCBpcyBQcmltaXRpdmVzIHtcbiAgIGNvbnN0IHR5cGUgPSBpc1BhdGhTcGVjKGlucHV0KSA/ICdzdHJpbmcnIDogdHlwZW9mIGlucHV0O1xuXG4gICByZXR1cm4gKFxuICAgICAgL251bWJlcnxzdHJpbmd8Ym9vbGVhbi8udGVzdCh0eXBlKSAmJlxuICAgICAgKCFvbWl0IHx8ICFvbWl0LmluY2x1ZGVzKHR5cGUgYXMgJ2Jvb2xlYW4nIHwgJ3N0cmluZycgfCAnbnVtYmVyJykpXG4gICApO1xufVxuXG5leHBvcnQgY29uc3QgZmlsdGVyU3RyaW5nOiBBcmd1bWVudEZpbHRlclByZWRpY2F0ZTxzdHJpbmc+ID0gKGlucHV0KTogaW5wdXQgaXMgc3RyaW5nID0+IHtcbiAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnO1xufTtcblxuZXhwb3J0IGNvbnN0IGZpbHRlclN0cmluZ0FycmF5OiBBcmd1bWVudEZpbHRlclByZWRpY2F0ZTxzdHJpbmdbXT4gPSAoaW5wdXQpOiBpbnB1dCBpcyBzdHJpbmdbXSA9PiB7XG4gICByZXR1cm4gQXJyYXkuaXNBcnJheShpbnB1dCkgJiYgaW5wdXQuZXZlcnkoZmlsdGVyU3RyaW5nKTtcbn07XG5cbmV4cG9ydCBjb25zdCBmaWx0ZXJTdHJpbmdPclN0cmluZ0FycmF5OiBBcmd1bWVudEZpbHRlclByZWRpY2F0ZTxzdHJpbmcgfCBzdHJpbmdbXT4gPSAoXG4gICBpbnB1dFxuKTogaW5wdXQgaXMgc3RyaW5nIHwgc3RyaW5nW10gPT4ge1xuICAgcmV0dXJuIGZpbHRlclN0cmluZyhpbnB1dCkgfHwgKEFycmF5LmlzQXJyYXkoaW5wdXQpICYmIGlucHV0LmV2ZXJ5KGZpbHRlclN0cmluZykpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlclBsYWluT2JqZWN0PFQgZXh0ZW5kcyBPcHRpb25zPihpbnB1dDogVCB8IHVua25vd24pOiBpbnB1dCBpcyBUO1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlclBsYWluT2JqZWN0PFQgZXh0ZW5kcyBPYmplY3Q+KGlucHV0OiBUIHwgdW5rbm93bik6IGlucHV0IGlzIFQge1xuICAgcmV0dXJuICEhaW5wdXQgJiYgb2JqZWN0VG9TdHJpbmcoaW5wdXQpID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlckZ1bmN0aW9uKGlucHV0OiB1bmtub3duKTogaW5wdXQgaXMgRnVuY3Rpb24ge1xuICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZXhwb3J0IGNvbnN0IGZpbHRlckhhc0xlbmd0aDogQXJndW1lbnRGaWx0ZXJQcmVkaWNhdGU8eyBsZW5ndGg6IG51bWJlciB9PiA9IChcbiAgIGlucHV0XG4pOiBpbnB1dCBpcyB7IGxlbmd0aDogbnVtYmVyIH0gPT4ge1xuICAgaWYgKGlucHV0ID09IG51bGwgfHwgJ251bWJlcnxib29sZWFufGZ1bmN0aW9uJy5pbmNsdWRlcyh0eXBlb2YgaW5wdXQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICB9XG4gICByZXR1cm4gQXJyYXkuaXNBcnJheShpbnB1dCkgfHwgdHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgaW5wdXQubGVuZ3RoID09PSAnbnVtYmVyJztcbn07XG4iLCAiLyoqXG4gKiBLbm93biBwcm9jZXNzIGV4aXQgY29kZXMgdXNlZCBieSB0aGUgdGFzayBwYXJzZXJzIHRvIGRldGVybWluZSB3aGV0aGVyIGFuIGVycm9yXG4gKiB3YXMgb25lIHRoZXkgY2FuIGF1dG9tYXRpY2FsbHkgaGFuZGxlXG4gKi9cbmV4cG9ydCBlbnVtIEV4aXRDb2RlcyB7XG4gICBTVUNDRVNTLFxuICAgRVJST1IsXG4gICBOT1RfRk9VTkQgPSAtMixcbiAgIFVOQ0xFQU4gPSAxMjgsXG59XG4iLCAiaW1wb3J0IHsgVGFza1Jlc3BvbnNlRm9ybWF0IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgR2l0T3V0cHV0U3RyZWFtczxUIGV4dGVuZHMgVGFza1Jlc3BvbnNlRm9ybWF0ID0gQnVmZmVyPiB7XG4gICBjb25zdHJ1Y3RvcihcbiAgICAgIHB1YmxpYyByZWFkb25seSBzdGRPdXQ6IFQsXG4gICAgICBwdWJsaWMgcmVhZG9ubHkgc3RkRXJyOiBUXG4gICApIHt9XG5cbiAgIGFzU3RyaW5ncygpOiBHaXRPdXRwdXRTdHJlYW1zPHN0cmluZz4ge1xuICAgICAgcmV0dXJuIG5ldyBHaXRPdXRwdXRTdHJlYW1zKHRoaXMuc3RkT3V0LnRvU3RyaW5nKCd1dGY4JyksIHRoaXMuc3RkRXJyLnRvU3RyaW5nKCd1dGY4JykpO1xuICAgfVxufVxuIiwgImV4cG9ydCBjbGFzcyBMaW5lUGFyc2VyPFQ+IHtcbiAgIHByb3RlY3RlZCBtYXRjaGVzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICBwcml2YXRlIF9yZWdFeHA6IFJlZ0V4cFtdO1xuXG4gICBjb25zdHJ1Y3RvcihcbiAgICAgIHJlZ0V4cDogUmVnRXhwIHwgUmVnRXhwW10sXG4gICAgICB1c2VNYXRjaGVzPzogKHRhcmdldDogVCwgbWF0Y2g6IHN0cmluZ1tdKSA9PiBib29sZWFuIHwgdm9pZFxuICAgKSB7XG4gICAgICB0aGlzLl9yZWdFeHAgPSBBcnJheS5pc0FycmF5KHJlZ0V4cCkgPyByZWdFeHAgOiBbcmVnRXhwXTtcbiAgICAgIGlmICh1c2VNYXRjaGVzKSB7XG4gICAgICAgICB0aGlzLnVzZU1hdGNoZXMgPSB1c2VNYXRjaGVzO1xuICAgICAgfVxuICAgfVxuXG4gICBwYXJzZSA9IChsaW5lOiAob2Zmc2V0OiBudW1iZXIpID0+IHN0cmluZyB8IHVuZGVmaW5lZCwgdGFyZ2V0OiBUKTogYm9vbGVhbiA9PiB7XG4gICAgICB0aGlzLnJlc2V0TWF0Y2hlcygpO1xuXG4gICAgICBpZiAoIXRoaXMuX3JlZ0V4cC5ldmVyeSgocmVnLCBpbmRleCkgPT4gdGhpcy5hZGRNYXRjaChyZWcsIGluZGV4LCBsaW5lKGluZGV4KSkpKSB7XG4gICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnVzZU1hdGNoZXModGFyZ2V0LCB0aGlzLnByZXBhcmVNYXRjaGVzKCkpICE9PSBmYWxzZTtcbiAgIH07XG5cbiAgIC8vIEB0cy1pZ25vcmVcbiAgIHByb3RlY3RlZCB1c2VNYXRjaGVzKHRhcmdldDogVCwgbWF0Y2g6IHN0cmluZ1tdKTogYm9vbGVhbiB8IHZvaWQge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBMaW5lUGFyc2VyOnVzZU1hdGNoZXMgbm90IGltcGxlbWVudGVkYCk7XG4gICB9XG5cbiAgIHByb3RlY3RlZCByZXNldE1hdGNoZXMoKSB7XG4gICAgICB0aGlzLm1hdGNoZXMubGVuZ3RoID0gMDtcbiAgIH1cblxuICAgcHJvdGVjdGVkIHByZXBhcmVNYXRjaGVzKCkge1xuICAgICAgcmV0dXJuIHRoaXMubWF0Y2hlcztcbiAgIH1cblxuICAgcHJvdGVjdGVkIGFkZE1hdGNoKHJlZzogUmVnRXhwLCBpbmRleDogbnVtYmVyLCBsaW5lPzogc3RyaW5nKSB7XG4gICAgICBjb25zdCBtYXRjaGVkID0gbGluZSAmJiByZWcuZXhlYyhsaW5lKTtcbiAgICAgIGlmIChtYXRjaGVkKSB7XG4gICAgICAgICB0aGlzLnB1c2hNYXRjaChpbmRleCwgbWF0Y2hlZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhIW1hdGNoZWQ7XG4gICB9XG5cbiAgIHByb3RlY3RlZCBwdXNoTWF0Y2goX2luZGV4OiBudW1iZXIsIG1hdGNoZWQ6IHN0cmluZ1tdKSB7XG4gICAgICB0aGlzLm1hdGNoZXMucHVzaCguLi5tYXRjaGVkLnNsaWNlKDEpKTtcbiAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlbW90ZUxpbmVQYXJzZXI8VD4gZXh0ZW5kcyBMaW5lUGFyc2VyPFQ+IHtcbiAgIHByb3RlY3RlZCBhZGRNYXRjaChyZWc6IFJlZ0V4cCwgaW5kZXg6IG51bWJlciwgbGluZT86IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIC9ecmVtb3RlOlxccy8udGVzdChTdHJpbmcobGluZSkpICYmIHN1cGVyLmFkZE1hdGNoKHJlZywgaW5kZXgsIGxpbmUpO1xuICAgfVxuXG4gICBwcm90ZWN0ZWQgcHVzaE1hdGNoKGluZGV4OiBudW1iZXIsIG1hdGNoZWQ6IHN0cmluZ1tdKSB7XG4gICAgICBpZiAoaW5kZXggPiAwIHx8IG1hdGNoZWQubGVuZ3RoID4gMSkge1xuICAgICAgICAgc3VwZXIucHVzaE1hdGNoKGluZGV4LCBtYXRjaGVkKTtcbiAgICAgIH1cbiAgIH1cbn1cbiIsICJpbXBvcnQgeyBTaW1wbGVHaXRPcHRpb25zIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5jb25zdCBkZWZhdWx0T3B0aW9uczogT21pdDxTaW1wbGVHaXRPcHRpb25zLCAnYmFzZURpcic+ID0ge1xuICAgYmluYXJ5OiAnZ2l0JyxcbiAgIG1heENvbmN1cnJlbnRQcm9jZXNzZXM6IDUsXG4gICBjb25maWc6IFtdLFxuICAgdHJpbW1lZDogZmFsc2UsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VDb25maWcoXG4gICAuLi5vcHRpb25zOiBBcnJheTxQYXJ0aWFsPFNpbXBsZUdpdE9wdGlvbnM+IHwgdW5kZWZpbmVkPlxuKTogU2ltcGxlR2l0T3B0aW9ucyB7XG4gICBjb25zdCBiYXNlRGlyID0gcHJvY2Vzcy5jd2QoKTtcbiAgIGNvbnN0IGNvbmZpZzogU2ltcGxlR2l0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7IGJhc2VEaXIsIC4uLmRlZmF1bHRPcHRpb25zIH0sXG4gICAgICAuLi5vcHRpb25zLmZpbHRlcigobykgPT4gdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIG8pXG4gICApO1xuXG4gICBjb25maWcuYmFzZURpciA9IGNvbmZpZy5iYXNlRGlyIHx8IGJhc2VEaXI7XG4gICBjb25maWcudHJpbW1lZCA9IGNvbmZpZy50cmltbWVkID09PSB0cnVlO1xuXG4gICByZXR1cm4gY29uZmlnO1xufVxuIiwgImltcG9ydCB7XG4gICBmaWx0ZXJBcnJheSxcbiAgIGZpbHRlckZ1bmN0aW9uLFxuICAgZmlsdGVyUGxhaW5PYmplY3QsXG4gICBmaWx0ZXJQcmltaXRpdmVzLFxuICAgZmlsdGVyVHlwZSxcbn0gZnJvbSAnLi9hcmd1bWVudC1maWx0ZXJzJztcbmltcG9ydCB7IGFzRnVuY3Rpb24sIGlzVXNlckZ1bmN0aW9uLCBsYXN0IH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7IE1heWJlLCBPcHRpb25zLCBPcHRpb25zVmFsdWVzIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgaXNQYXRoU3BlYyB9IGZyb20gJy4uL2FyZ3MvcGF0aHNwZWMnO1xuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kVGFza09wdGlvbnM8VCBleHRlbmRzIE9wdGlvbnMgPSBPcHRpb25zPihcbiAgIG9wdGlvbnM6IE1heWJlPFQ+LFxuICAgY29tbWFuZHM6IHN0cmluZ1tdID0gW11cbik6IHN0cmluZ1tdIHtcbiAgIGlmICghZmlsdGVyUGxhaW5PYmplY3Q8T3B0aW9ucz4ob3B0aW9ucykpIHtcbiAgICAgIHJldHVybiBjb21tYW5kcztcbiAgIH1cblxuICAgcmV0dXJuIE9iamVjdC5rZXlzKG9wdGlvbnMpLnJlZHVjZSgoY29tbWFuZHM6IHN0cmluZ1tdLCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgY29uc3QgdmFsdWU6IE9wdGlvbnNWYWx1ZXMgPSBvcHRpb25zW2tleV07XG5cbiAgICAgIGlmIChpc1BhdGhTcGVjKHZhbHVlKSkge1xuICAgICAgICAgY29tbWFuZHMucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGZpbHRlclByaW1pdGl2ZXModmFsdWUsIFsnYm9vbGVhbiddKSkge1xuICAgICAgICAgY29tbWFuZHMucHVzaChrZXkgKyAnPScgKyB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgY29tbWFuZHMucHVzaChrZXkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29tbWFuZHM7XG4gICB9LCBjb21tYW5kcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFpbGluZ09wdGlvbnMoXG4gICBhcmdzOiBJQXJndW1lbnRzLFxuICAgaW5pdGlhbFByaW1pdGl2ZSA9IDAsXG4gICBvYmplY3RPbmx5ID0gZmFsc2Vcbik6IHN0cmluZ1tdIHtcbiAgIGNvbnN0IGNvbW1hbmQ6IHN0cmluZ1tdID0gW107XG5cbiAgIGZvciAobGV0IGkgPSAwLCBtYXggPSBpbml0aWFsUHJpbWl0aXZlIDwgMCA/IGFyZ3MubGVuZ3RoIDogaW5pdGlhbFByaW1pdGl2ZTsgaSA8IG1heDsgaSsrKSB7XG4gICAgICBpZiAoJ3N0cmluZ3xudW1iZXInLmluY2x1ZGVzKHR5cGVvZiBhcmdzW2ldKSkge1xuICAgICAgICAgY29tbWFuZC5wdXNoKFN0cmluZyhhcmdzW2ldKSk7XG4gICAgICB9XG4gICB9XG5cbiAgIGFwcGVuZFRhc2tPcHRpb25zKHRyYWlsaW5nT3B0aW9uc0FyZ3VtZW50KGFyZ3MpLCBjb21tYW5kKTtcbiAgIGlmICghb2JqZWN0T25seSkge1xuICAgICAgY29tbWFuZC5wdXNoKC4uLnRyYWlsaW5nQXJyYXlBcmd1bWVudChhcmdzKSk7XG4gICB9XG5cbiAgIHJldHVybiBjb21tYW5kO1xufVxuXG5mdW5jdGlvbiB0cmFpbGluZ0FycmF5QXJndW1lbnQoYXJnczogSUFyZ3VtZW50cykge1xuICAgY29uc3QgaGFzVHJhaWxpbmdDYWxsYmFjayA9IHR5cGVvZiBsYXN0KGFyZ3MpID09PSAnZnVuY3Rpb24nO1xuICAgcmV0dXJuIGZpbHRlclR5cGUobGFzdChhcmdzLCBoYXNUcmFpbGluZ0NhbGxiYWNrID8gMSA6IDApLCBmaWx0ZXJBcnJheSwgW10pO1xufVxuXG4vKipcbiAqIEdpdmVuIGFueSBudW1iZXIgb2YgYXJndW1lbnRzLCByZXR1cm5zIHRoZSB0cmFpbGluZyBvcHRpb25zIGFyZ3VtZW50LCBpZ25vcmluZyBhIHRyYWlsaW5nIGZ1bmN0aW9uIGFyZ3VtZW50XG4gKiBpZiB0aGVyZSBpcyBvbmUuIFdoZW4gbm90IGZvdW5kLCB0aGUgcmV0dXJuIHZhbHVlIGlzIG51bGwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFpbGluZ09wdGlvbnNBcmd1bWVudChhcmdzOiBJQXJndW1lbnRzKTogTWF5YmU8T3B0aW9ucz4ge1xuICAgY29uc3QgaGFzVHJhaWxpbmdDYWxsYmFjayA9IGZpbHRlckZ1bmN0aW9uKGxhc3QoYXJncykpO1xuICAgcmV0dXJuIGZpbHRlclR5cGUobGFzdChhcmdzLCBoYXNUcmFpbGluZ0NhbGxiYWNrID8gMSA6IDApLCBmaWx0ZXJQbGFpbk9iamVjdCk7XG59XG5cbi8qKlxuICogUmV0dXJucyBlaXRoZXIgdGhlIHNvdXJjZSBhcmd1bWVudCB3aGVuIGl0IGlzIGEgYEZ1bmN0aW9uYCwgb3IgdGhlIGRlZmF1bHRcbiAqIGBOT09QYCBmdW5jdGlvbiBjb25zdGFudFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KFxuICAgYXJnczogdW5rbm93bltdIHwgSUFyZ3VtZW50cyB8IHVua25vd24sXG4gICBpbmNsdWRlTm9vcCA9IHRydWVcbik6IE1heWJlPCguLi5hcmdzOiBhbnlbXSkgPT4gdW5rbm93bj4ge1xuICAgY29uc3QgY2FsbGJhY2sgPSBhc0Z1bmN0aW9uKGxhc3QoYXJncykpO1xuICAgcmV0dXJuIGluY2x1ZGVOb29wIHx8IGlzVXNlckZ1bmN0aW9uKGNhbGxiYWNrKSA/IGNhbGxiYWNrIDogdW5kZWZpbmVkO1xufVxuIiwgImltcG9ydCB0eXBlIHsgTWF5YmVBcnJheSwgVGFza1BhcnNlciwgVGFza1Jlc3BvbnNlRm9ybWF0IH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgR2l0T3V0cHV0U3RyZWFtcyB9IGZyb20gJy4vZ2l0LW91dHB1dC1zdHJlYW1zJztcbmltcG9ydCB7IExpbmVQYXJzZXIgfSBmcm9tICcuL2xpbmUtcGFyc2VyJztcbmltcG9ydCB7IGFzQXJyYXksIHRvTGluZXNXaXRoQ29udGVudCB9IGZyb20gJy4vdXRpbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxsVGFza1BhcnNlcjxJTlBVVCBleHRlbmRzIFRhc2tSZXNwb25zZUZvcm1hdCwgUkVTUE9OU0U+KFxuICAgcGFyc2VyOiBUYXNrUGFyc2VyPElOUFVULCBSRVNQT05TRT4sXG4gICBzdHJlYW1zOiBHaXRPdXRwdXRTdHJlYW1zPElOUFVUPlxuKSB7XG4gICByZXR1cm4gcGFyc2VyKHN0cmVhbXMuc3RkT3V0LCBzdHJlYW1zLnN0ZEVycik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN0cmluZ1Jlc3BvbnNlPFQ+KFxuICAgcmVzdWx0OiBULFxuICAgcGFyc2VyczogTGluZVBhcnNlcjxUPltdLFxuICAgdGV4dHM6IE1heWJlQXJyYXk8c3RyaW5nPixcbiAgIHRyaW0gPSB0cnVlXG4pOiBUIHtcbiAgIGFzQXJyYXkodGV4dHMpLmZvckVhY2goKHRleHQpID0+IHtcbiAgICAgIGZvciAobGV0IGxpbmVzID0gdG9MaW5lc1dpdGhDb250ZW50KHRleHQsIHRyaW0pLCBpID0gMCwgbWF4ID0gbGluZXMubGVuZ3RoOyBpIDwgbWF4OyBpKyspIHtcbiAgICAgICAgIGNvbnN0IGxpbmUgPSAob2Zmc2V0ID0gMCkgPT4ge1xuICAgICAgICAgICAgaWYgKGkgKyBvZmZzZXQgPj0gbWF4KSB7XG4gICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbGluZXNbaSArIG9mZnNldF07XG4gICAgICAgICB9O1xuXG4gICAgICAgICBwYXJzZXJzLnNvbWUoKHsgcGFyc2UgfSkgPT4gcGFyc2UobGluZSwgcmVzdWx0KSk7XG4gICAgICB9XG4gICB9KTtcblxuICAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsICJleHBvcnQgKiBmcm9tICcuL2FyZ3VtZW50LWZpbHRlcnMnO1xuZXhwb3J0ICogZnJvbSAnLi9leGl0LWNvZGVzJztcbmV4cG9ydCAqIGZyb20gJy4vZ2l0LW91dHB1dC1zdHJlYW1zJztcbmV4cG9ydCAqIGZyb20gJy4vbGluZS1wYXJzZXInO1xuZXhwb3J0ICogZnJvbSAnLi9zaW1wbGUtZ2l0LW9wdGlvbnMnO1xuZXhwb3J0ICogZnJvbSAnLi90YXNrLW9wdGlvbnMnO1xuZXhwb3J0ICogZnJvbSAnLi90YXNrLXBhcnNlcic7XG5leHBvcnQgKiBmcm9tICcuL3V0aWwnO1xuIiwgImltcG9ydCB7IEV4aXRDb2RlcyB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IE1heWJlLCBTdHJpbmdUYXNrIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZW51bSBDaGVja1JlcG9BY3Rpb25zIHtcbiAgIEJBUkUgPSAnYmFyZScsXG4gICBJTl9UUkVFID0gJ3RyZWUnLFxuICAgSVNfUkVQT19ST09UID0gJ3Jvb3QnLFxufVxuXG5jb25zdCBvbkVycm9yOiBTdHJpbmdUYXNrPGJvb2xlYW4+WydvbkVycm9yJ10gPSAoeyBleGl0Q29kZSB9LCBlcnJvciwgZG9uZSwgZmFpbCkgPT4ge1xuICAgaWYgKGV4aXRDb2RlID09PSBFeGl0Q29kZXMuVU5DTEVBTiAmJiBpc05vdFJlcG9NZXNzYWdlKGVycm9yKSkge1xuICAgICAgcmV0dXJuIGRvbmUoQnVmZmVyLmZyb20oJ2ZhbHNlJykpO1xuICAgfVxuXG4gICBmYWlsKGVycm9yKTtcbn07XG5cbmNvbnN0IHBhcnNlcjogU3RyaW5nVGFzazxib29sZWFuPlsncGFyc2VyJ10gPSAodGV4dCkgPT4ge1xuICAgcmV0dXJuIHRleHQudHJpbSgpID09PSAndHJ1ZSc7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tJc1JlcG9UYXNrKGFjdGlvbjogTWF5YmU8Q2hlY2tSZXBvQWN0aW9ucz4pOiBTdHJpbmdUYXNrPGJvb2xlYW4+IHtcbiAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICBjYXNlIENoZWNrUmVwb0FjdGlvbnMuQkFSRTpcbiAgICAgICAgIHJldHVybiBjaGVja0lzQmFyZVJlcG9UYXNrKCk7XG4gICAgICBjYXNlIENoZWNrUmVwb0FjdGlvbnMuSVNfUkVQT19ST09UOlxuICAgICAgICAgcmV0dXJuIGNoZWNrSXNSZXBvUm9vdFRhc2soKTtcbiAgIH1cblxuICAgY29uc3QgY29tbWFuZHMgPSBbJ3Jldi1wYXJzZScsICctLWlzLWluc2lkZS13b3JrLXRyZWUnXTtcblxuICAgcmV0dXJuIHtcbiAgICAgIGNvbW1hbmRzLFxuICAgICAgZm9ybWF0OiAndXRmLTgnLFxuICAgICAgb25FcnJvcixcbiAgICAgIHBhcnNlcixcbiAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0lzUmVwb1Jvb3RUYXNrKCk6IFN0cmluZ1Rhc2s8Ym9vbGVhbj4ge1xuICAgY29uc3QgY29tbWFuZHMgPSBbJ3Jldi1wYXJzZScsICctLWdpdC1kaXInXTtcblxuICAgcmV0dXJuIHtcbiAgICAgIGNvbW1hbmRzLFxuICAgICAgZm9ybWF0OiAndXRmLTgnLFxuICAgICAgb25FcnJvcixcbiAgICAgIHBhcnNlcihwYXRoKSB7XG4gICAgICAgICByZXR1cm4gL15cXC4oZ2l0KT8kLy50ZXN0KHBhdGgudHJpbSgpKTtcbiAgICAgIH0sXG4gICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tJc0JhcmVSZXBvVGFzaygpOiBTdHJpbmdUYXNrPGJvb2xlYW4+IHtcbiAgIGNvbnN0IGNvbW1hbmRzID0gWydyZXYtcGFyc2UnLCAnLS1pcy1iYXJlLXJlcG9zaXRvcnknXTtcblxuICAgcmV0dXJuIHtcbiAgICAgIGNvbW1hbmRzLFxuICAgICAgZm9ybWF0OiAndXRmLTgnLFxuICAgICAgb25FcnJvcixcbiAgICAgIHBhcnNlcixcbiAgIH07XG59XG5cbmZ1bmN0aW9uIGlzTm90UmVwb01lc3NhZ2UoZXJyb3I6IEVycm9yKTogYm9vbGVhbiB7XG4gICByZXR1cm4gLyhOb3QgYSBnaXQgcmVwb3NpdG9yeXxLZWluIEdpdC1SZXBvc2l0b3J5KS9pLnRlc3QoU3RyaW5nKGVycm9yKSk7XG59XG4iLCAiaW1wb3J0IHsgQ2xlYW5TdW1tYXJ5IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyB0b0xpbmVzV2l0aENvbnRlbnQgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBjbGFzcyBDbGVhblJlc3BvbnNlIGltcGxlbWVudHMgQ2xlYW5TdW1tYXJ5IHtcbiAgIHB1YmxpYyBwYXRoczogc3RyaW5nW10gPSBbXTtcbiAgIHB1YmxpYyBmaWxlczogc3RyaW5nW10gPSBbXTtcbiAgIHB1YmxpYyBmb2xkZXJzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgZHJ5UnVuOiBib29sZWFuKSB7fVxufVxuXG5jb25zdCByZW1vdmFsUmVnZXhwID0gL15bYS16XStcXHMqL2k7XG5jb25zdCBkcnlSdW5SZW1vdmFsUmVnZXhwID0gL15bYS16XStcXHMrW2Etel0rXFxzKi9pO1xuY29uc3QgaXNGb2xkZXJSZWdleHAgPSAvXFwvJC87XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhblN1bW1hcnlQYXJzZXIoZHJ5UnVuOiBib29sZWFuLCB0ZXh0OiBzdHJpbmcpOiBDbGVhblN1bW1hcnkge1xuICAgY29uc3Qgc3VtbWFyeSA9IG5ldyBDbGVhblJlc3BvbnNlKGRyeVJ1bik7XG4gICBjb25zdCByZWdleHAgPSBkcnlSdW4gPyBkcnlSdW5SZW1vdmFsUmVnZXhwIDogcmVtb3ZhbFJlZ2V4cDtcblxuICAgdG9MaW5lc1dpdGhDb250ZW50KHRleHQpLmZvckVhY2goKGxpbmUpID0+IHtcbiAgICAgIGNvbnN0IHJlbW92ZWQgPSBsaW5lLnJlcGxhY2UocmVnZXhwLCAnJyk7XG5cbiAgICAgIHN1bW1hcnkucGF0aHMucHVzaChyZW1vdmVkKTtcbiAgICAgIChpc0ZvbGRlclJlZ2V4cC50ZXN0KHJlbW92ZWQpID8gc3VtbWFyeS5mb2xkZXJzIDogc3VtbWFyeS5maWxlcykucHVzaChyZW1vdmVkKTtcbiAgIH0pO1xuXG4gICByZXR1cm4gc3VtbWFyeTtcbn1cbiIsICJpbXBvcnQgeyBUYXNrQ29uZmlndXJhdGlvbkVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL3Rhc2stY29uZmlndXJhdGlvbi1lcnJvcic7XG5pbXBvcnQgdHlwZSB7IEJ1ZmZlclRhc2ssIEVtcHR5VGFza1BhcnNlciwgU2ltcGxlR2l0VGFzaywgU3RyaW5nVGFzayB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IEVNUFRZX0NPTU1BTkRTOiBbXSA9IFtdO1xuXG5leHBvcnQgdHlwZSBFbXB0eVRhc2sgPSB7XG4gICBjb21tYW5kczogdHlwZW9mIEVNUFRZX0NPTU1BTkRTO1xuICAgZm9ybWF0OiAnZW1wdHknO1xuICAgcGFyc2VyOiBFbXB0eVRhc2tQYXJzZXI7XG4gICBvbkVycm9yPzogdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFkaG9jRXhlY1Rhc2socGFyc2VyOiBFbXB0eVRhc2tQYXJzZXIpOiBFbXB0eVRhc2sge1xuICAgcmV0dXJuIHtcbiAgICAgIGNvbW1hbmRzOiBFTVBUWV9DT01NQU5EUyxcbiAgICAgIGZvcm1hdDogJ2VtcHR5JyxcbiAgICAgIHBhcnNlcixcbiAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmF0aW9uRXJyb3JUYXNrKGVycm9yOiBFcnJvciB8IHN0cmluZyk6IEVtcHR5VGFzayB7XG4gICByZXR1cm4ge1xuICAgICAgY29tbWFuZHM6IEVNUFRZX0NPTU1BTkRTLFxuICAgICAgZm9ybWF0OiAnZW1wdHknLFxuICAgICAgcGFyc2VyKCkge1xuICAgICAgICAgdGhyb3cgdHlwZW9mIGVycm9yID09PSAnc3RyaW5nJyA/IG5ldyBUYXNrQ29uZmlndXJhdGlvbkVycm9yKGVycm9yKSA6IGVycm9yO1xuICAgICAgfSxcbiAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKGNvbW1hbmRzOiBzdHJpbmdbXSwgdHJpbW1lZCA9IGZhbHNlKTogU3RyaW5nVGFzazxzdHJpbmc+IHtcbiAgIHJldHVybiB7XG4gICAgICBjb21tYW5kcyxcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIHBhcnNlcih0ZXh0KSB7XG4gICAgICAgICByZXR1cm4gdHJpbW1lZCA/IFN0cmluZyh0ZXh0KS50cmltKCkgOiB0ZXh0O1xuICAgICAgfSxcbiAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJhaWdodFRocm91Z2hCdWZmZXJUYXNrKGNvbW1hbmRzOiBzdHJpbmdbXSk6IEJ1ZmZlclRhc2s8YW55PiB7XG4gICByZXR1cm4ge1xuICAgICAgY29tbWFuZHMsXG4gICAgICBmb3JtYXQ6ICdidWZmZXInLFxuICAgICAgcGFyc2VyKGJ1ZmZlcikge1xuICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICAgIH0sXG4gICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCdWZmZXJUYXNrPFI+KHRhc2s6IFNpbXBsZUdpdFRhc2s8Uj4pOiB0YXNrIGlzIEJ1ZmZlclRhc2s8Uj4ge1xuICAgcmV0dXJuIHRhc2suZm9ybWF0ID09PSAnYnVmZmVyJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHlUYXNrPFI+KHRhc2s6IFNpbXBsZUdpdFRhc2s8Uj4pOiB0YXNrIGlzIEVtcHR5VGFzayB7XG4gICByZXR1cm4gdGFzay5mb3JtYXQgPT09ICdlbXB0eScgfHwgIXRhc2suY29tbWFuZHMubGVuZ3RoO1xufVxuIiwgImltcG9ydCB7IENsZWFuU3VtbWFyeSB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuaW1wb3J0IHsgY2xlYW5TdW1tYXJ5UGFyc2VyIH0gZnJvbSAnLi4vcmVzcG9uc2VzL0NsZWFuU3VtbWFyeSc7XG5pbXBvcnQgeyBNYXliZSwgU3RyaW5nVGFzayB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGFzU3RyaW5nQXJyYXkgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBjb25maWd1cmF0aW9uRXJyb3JUYXNrIH0gZnJvbSAnLi90YXNrJztcblxuZXhwb3J0IGNvbnN0IENPTkZJR19FUlJPUl9JTlRFUkFDVElWRV9NT0RFID0gJ0dpdCBjbGVhbiBpbnRlcmFjdGl2ZSBtb2RlIGlzIG5vdCBzdXBwb3J0ZWQnO1xuZXhwb3J0IGNvbnN0IENPTkZJR19FUlJPUl9NT0RFX1JFUVVJUkVEID0gJ0dpdCBjbGVhbiBtb2RlIHBhcmFtZXRlciAoXCJuXCIgb3IgXCJmXCIpIGlzIHJlcXVpcmVkJztcbmV4cG9ydCBjb25zdCBDT05GSUdfRVJST1JfVU5LTk9XTl9PUFRJT04gPSAnR2l0IGNsZWFuIHVua25vd24gb3B0aW9uIGZvdW5kIGluOiAnO1xuXG4vKipcbiAqIEFsbCBzdXBwb3J0ZWQgb3B0aW9uIHN3aXRjaGVzIGF2YWlsYWJsZSBmb3IgdXNlIGluIGEgYGdpdC5jbGVhbmAgb3BlcmF0aW9uXG4gKi9cbmV4cG9ydCBlbnVtIENsZWFuT3B0aW9ucyB7XG4gICBEUllfUlVOID0gJ24nLFxuICAgRk9SQ0UgPSAnZicsXG4gICBJR05PUkVEX0lOQ0xVREVEID0gJ3gnLFxuICAgSUdOT1JFRF9PTkxZID0gJ1gnLFxuICAgRVhDTFVESU5HID0gJ2UnLFxuICAgUVVJRVQgPSAncScsXG4gICBSRUNVUlNJVkUgPSAnZCcsXG59XG5cbi8qKlxuICogVGhlIHR3byBtb2RlcyBgZ2l0LmNsZWFuYCBjYW4gcnVuIGluIC0gb25lIG9mIHRoZXNlIG11c3QgYmUgc3VwcGxpZWQgaW4gb3JkZXJcbiAqIGZvciB0aGUgY29tbWFuZCB0byBub3QgdGhyb3cgYSBgVGFza0NvbmZpZ3VyYXRpb25FcnJvcmBcbiAqL1xuZXhwb3J0IHR5cGUgQ2xlYW5Nb2RlID0gQ2xlYW5PcHRpb25zLkZPUkNFIHwgQ2xlYW5PcHRpb25zLkRSWV9SVU47XG5cbmNvbnN0IENsZWFuT3B0aW9uVmFsdWVzOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoW1xuICAgJ2knLFxuICAgLi4uYXNTdHJpbmdBcnJheShPYmplY3QudmFsdWVzKENsZWFuT3B0aW9ucyBhcyBhbnkpKSxcbl0pO1xuXG5leHBvcnQgZnVuY3Rpb24gY2xlYW5XaXRoT3B0aW9uc1Rhc2sobW9kZTogQ2xlYW5Nb2RlIHwgc3RyaW5nLCBjdXN0b21BcmdzOiBzdHJpbmdbXSkge1xuICAgY29uc3QgeyBjbGVhbk1vZGUsIG9wdGlvbnMsIHZhbGlkIH0gPSBnZXRDbGVhbk9wdGlvbnMobW9kZSk7XG5cbiAgIGlmICghY2xlYW5Nb2RlKSB7XG4gICAgICByZXR1cm4gY29uZmlndXJhdGlvbkVycm9yVGFzayhDT05GSUdfRVJST1JfTU9ERV9SRVFVSVJFRCk7XG4gICB9XG5cbiAgIGlmICghdmFsaWQub3B0aW9ucykge1xuICAgICAgcmV0dXJuIGNvbmZpZ3VyYXRpb25FcnJvclRhc2soQ09ORklHX0VSUk9SX1VOS05PV05fT1BUSU9OICsgSlNPTi5zdHJpbmdpZnkobW9kZSkpO1xuICAgfVxuXG4gICBvcHRpb25zLnB1c2goLi4uY3VzdG9tQXJncyk7XG5cbiAgIGlmIChvcHRpb25zLnNvbWUoaXNJbnRlcmFjdGl2ZU1vZGUpKSB7XG4gICAgICByZXR1cm4gY29uZmlndXJhdGlvbkVycm9yVGFzayhDT05GSUdfRVJST1JfSU5URVJBQ1RJVkVfTU9ERSk7XG4gICB9XG5cbiAgIHJldHVybiBjbGVhblRhc2soY2xlYW5Nb2RlLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFuVGFzayhtb2RlOiBDbGVhbk1vZGUsIGN1c3RvbUFyZ3M6IHN0cmluZ1tdKTogU3RyaW5nVGFzazxDbGVhblN1bW1hcnk+IHtcbiAgIGNvbnN0IGNvbW1hbmRzOiBzdHJpbmdbXSA9IFsnY2xlYW4nLCBgLSR7bW9kZX1gLCAuLi5jdXN0b21BcmdzXTtcblxuICAgcmV0dXJuIHtcbiAgICAgIGNvbW1hbmRzLFxuICAgICAgZm9ybWF0OiAndXRmLTgnLFxuICAgICAgcGFyc2VyKHRleHQ6IHN0cmluZyk6IENsZWFuU3VtbWFyeSB7XG4gICAgICAgICByZXR1cm4gY2xlYW5TdW1tYXJ5UGFyc2VyKG1vZGUgPT09IENsZWFuT3B0aW9ucy5EUllfUlVOLCB0ZXh0KTtcbiAgICAgIH0sXG4gICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDbGVhbk9wdGlvbnNBcnJheShpbnB1dDogc3RyaW5nW10pOiBpbnB1dCBpcyBDbGVhbk9wdGlvbnNbXSB7XG4gICByZXR1cm4gQXJyYXkuaXNBcnJheShpbnB1dCkgJiYgaW5wdXQuZXZlcnkoKHRlc3QpID0+IENsZWFuT3B0aW9uVmFsdWVzLmhhcyh0ZXN0KSk7XG59XG5cbmZ1bmN0aW9uIGdldENsZWFuT3B0aW9ucyhpbnB1dDogc3RyaW5nKSB7XG4gICBsZXQgY2xlYW5Nb2RlOiBNYXliZTxDbGVhbk1vZGU+O1xuICAgbGV0IG9wdGlvbnM6IHN0cmluZ1tdID0gW107XG4gICBsZXQgdmFsaWQgPSB7IGNsZWFuTW9kZTogZmFsc2UsIG9wdGlvbnM6IHRydWUgfTtcblxuICAgaW5wdXRcbiAgICAgIC5yZXBsYWNlKC9bXmEtel1pL2csICcnKVxuICAgICAgLnNwbGl0KCcnKVxuICAgICAgLmZvckVhY2goKGNoYXIpID0+IHtcbiAgICAgICAgIGlmIChpc0NsZWFuTW9kZShjaGFyKSkge1xuICAgICAgICAgICAgY2xlYW5Nb2RlID0gY2hhcjtcbiAgICAgICAgICAgIHZhbGlkLmNsZWFuTW9kZSA9IHRydWU7XG4gICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsaWQub3B0aW9ucyA9IHZhbGlkLm9wdGlvbnMgJiYgaXNLbm93bk9wdGlvbigob3B0aW9uc1tvcHRpb25zLmxlbmd0aF0gPSBgLSR7Y2hhcn1gKSk7XG4gICAgICAgICB9XG4gICAgICB9KTtcblxuICAgcmV0dXJuIHtcbiAgICAgIGNsZWFuTW9kZSxcbiAgICAgIG9wdGlvbnMsXG4gICAgICB2YWxpZCxcbiAgIH07XG59XG5cbmZ1bmN0aW9uIGlzQ2xlYW5Nb2RlKGNsZWFuTW9kZT86IHN0cmluZyk6IGNsZWFuTW9kZSBpcyBDbGVhbk1vZGUge1xuICAgcmV0dXJuIGNsZWFuTW9kZSA9PT0gQ2xlYW5PcHRpb25zLkZPUkNFIHx8IGNsZWFuTW9kZSA9PT0gQ2xlYW5PcHRpb25zLkRSWV9SVU47XG59XG5cbmZ1bmN0aW9uIGlzS25vd25PcHRpb24ob3B0aW9uOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgIHJldHVybiAvXi1bYS16XSQvaS50ZXN0KG9wdGlvbikgJiYgQ2xlYW5PcHRpb25WYWx1ZXMuaGFzKG9wdGlvbi5jaGFyQXQoMSkpO1xufVxuXG5mdW5jdGlvbiBpc0ludGVyYWN0aXZlTW9kZShvcHRpb246IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgaWYgKC9eLVteXFwtXS8udGVzdChvcHRpb24pKSB7XG4gICAgICByZXR1cm4gb3B0aW9uLmluZGV4T2YoJ2knKSA+IDA7XG4gICB9XG5cbiAgIHJldHVybiBvcHRpb24gPT09ICctLWludGVyYWN0aXZlJztcbn1cbiIsICJpbXBvcnQgeyBDb25maWdHZXRSZXN1bHQsIENvbmZpZ0xpc3RTdW1tYXJ5LCBDb25maWdWYWx1ZXMgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IGxhc3QsIHNwbGl0T24gfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBjbGFzcyBDb25maWdMaXN0IGltcGxlbWVudHMgQ29uZmlnTGlzdFN1bW1hcnkge1xuICAgcHVibGljIGZpbGVzOiBzdHJpbmdbXSA9IFtdO1xuICAgcHVibGljIHZhbHVlczogeyBbZmlsZU5hbWU6IHN0cmluZ106IENvbmZpZ1ZhbHVlcyB9ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgcHJpdmF0ZSBfYWxsOiBDb25maWdWYWx1ZXMgfCB1bmRlZmluZWQ7XG5cbiAgIHB1YmxpYyBnZXQgYWxsKCk6IENvbmZpZ1ZhbHVlcyB7XG4gICAgICBpZiAoIXRoaXMuX2FsbCkge1xuICAgICAgICAgdGhpcy5fYWxsID0gdGhpcy5maWxlcy5yZWR1Y2UoKGFsbDogQ29uZmlnVmFsdWVzLCBmaWxlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGFsbCwgdGhpcy52YWx1ZXNbZmlsZV0pO1xuICAgICAgICAgfSwge30pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fYWxsO1xuICAgfVxuXG4gICBwdWJsaWMgYWRkRmlsZShmaWxlOiBzdHJpbmcpOiBDb25maWdWYWx1ZXMge1xuICAgICAgaWYgKCEoZmlsZSBpbiB0aGlzLnZhbHVlcykpIHtcbiAgICAgICAgIGNvbnN0IGxhdGVzdCA9IGxhc3QodGhpcy5maWxlcyk7XG4gICAgICAgICB0aGlzLnZhbHVlc1tmaWxlXSA9IGxhdGVzdCA/IE9iamVjdC5jcmVhdGUodGhpcy52YWx1ZXNbbGF0ZXN0XSkgOiB7fTtcblxuICAgICAgICAgdGhpcy5maWxlcy5wdXNoKGZpbGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy52YWx1ZXNbZmlsZV07XG4gICB9XG5cbiAgIHB1YmxpYyBhZGRWYWx1ZShmaWxlOiBzdHJpbmcsIGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLmFkZEZpbGUoZmlsZSk7XG5cbiAgICAgIGlmICghdmFsdWVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgIHZhbHVlc1trZXldID0gdmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVzW2tleV0pKSB7XG4gICAgICAgICAodmFsdWVzW2tleV0gYXMgc3RyaW5nW10pLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgIHZhbHVlc1trZXldID0gW3ZhbHVlc1trZXldIGFzIHN0cmluZywgdmFsdWVdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9hbGwgPSB1bmRlZmluZWQ7XG4gICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25maWdMaXN0UGFyc2VyKHRleHQ6IHN0cmluZyk6IENvbmZpZ0xpc3Qge1xuICAgY29uc3QgY29uZmlnID0gbmV3IENvbmZpZ0xpc3QoKTtcblxuICAgZm9yIChjb25zdCBpdGVtIG9mIGNvbmZpZ1BhcnNlcih0ZXh0KSkge1xuICAgICAgY29uZmlnLmFkZFZhbHVlKGl0ZW0uZmlsZSwgU3RyaW5nKGl0ZW0ua2V5KSwgaXRlbS52YWx1ZSk7XG4gICB9XG5cbiAgIHJldHVybiBjb25maWc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25maWdHZXRQYXJzZXIodGV4dDogc3RyaW5nLCBrZXk6IHN0cmluZyk6IENvbmZpZ0dldFJlc3VsdCB7XG4gICBsZXQgdmFsdWU6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICAgY29uc3QgdmFsdWVzOiBzdHJpbmdbXSA9IFtdO1xuICAgY29uc3Qgc2NvcGVzOiBNYXA8c3RyaW5nLCBzdHJpbmdbXT4gPSBuZXcgTWFwKCk7XG5cbiAgIGZvciAoY29uc3QgaXRlbSBvZiBjb25maWdQYXJzZXIodGV4dCwga2V5KSkge1xuICAgICAgaWYgKGl0ZW0ua2V5ICE9PSBrZXkpIHtcbiAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZXMucHVzaCgodmFsdWUgPSBpdGVtLnZhbHVlKSk7XG5cbiAgICAgIGlmICghc2NvcGVzLmhhcyhpdGVtLmZpbGUpKSB7XG4gICAgICAgICBzY29wZXMuc2V0KGl0ZW0uZmlsZSwgW10pO1xuICAgICAgfVxuXG4gICAgICBzY29wZXMuZ2V0KGl0ZW0uZmlsZSkhLnB1c2godmFsdWUpO1xuICAgfVxuXG4gICByZXR1cm4ge1xuICAgICAga2V5LFxuICAgICAgcGF0aHM6IEFycmF5LmZyb20oc2NvcGVzLmtleXMoKSksXG4gICAgICBzY29wZXMsXG4gICAgICB2YWx1ZSxcbiAgICAgIHZhbHVlcyxcbiAgIH07XG59XG5cbmZ1bmN0aW9uIGNvbmZpZ0ZpbGVQYXRoKGZpbGVQYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgcmV0dXJuIGZpbGVQYXRoLnJlcGxhY2UoL14oZmlsZSk6LywgJycpO1xufVxuXG5mdW5jdGlvbiogY29uZmlnUGFyc2VyKHRleHQ6IHN0cmluZywgcmVxdWVzdGVkS2V5OiBzdHJpbmcgfCBudWxsID0gbnVsbCkge1xuICAgY29uc3QgbGluZXMgPSB0ZXh0LnNwbGl0KCdcXDAnKTtcblxuICAgZm9yIChsZXQgaSA9IDAsIG1heCA9IGxpbmVzLmxlbmd0aCAtIDE7IGkgPCBtYXg7ICkge1xuICAgICAgY29uc3QgZmlsZSA9IGNvbmZpZ0ZpbGVQYXRoKGxpbmVzW2krK10pO1xuXG4gICAgICBsZXQgdmFsdWUgPSBsaW5lc1tpKytdO1xuICAgICAgbGV0IGtleSA9IHJlcXVlc3RlZEtleTtcblxuICAgICAgaWYgKHZhbHVlLmluY2x1ZGVzKCdcXG4nKSkge1xuICAgICAgICAgY29uc3QgbGluZSA9IHNwbGl0T24odmFsdWUsICdcXG4nKTtcbiAgICAgICAgIGtleSA9IGxpbmVbMF07XG4gICAgICAgICB2YWx1ZSA9IGxpbmVbMV07XG4gICAgICB9XG5cbiAgICAgIHlpZWxkIHsgZmlsZSwga2V5LCB2YWx1ZSB9O1xuICAgfVxufVxuIiwgImltcG9ydCB0eXBlIHsgQ29uZmlnR2V0UmVzdWx0LCBDb25maWdMaXN0U3VtbWFyeSwgU2ltcGxlR2l0IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBjb25maWdHZXRQYXJzZXIsIGNvbmZpZ0xpc3RQYXJzZXIgfSBmcm9tICcuLi9yZXNwb25zZXMvQ29uZmlnTGlzdCc7XG5pbXBvcnQgdHlwZSB7IFNpbXBsZUdpdEFwaSB9IGZyb20gJy4uL3NpbXBsZS1naXQtYXBpJztcbmltcG9ydCB0eXBlIHsgU3RyaW5nVGFzayB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudCB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGVudW0gR2l0Q29uZmlnU2NvcGUge1xuICAgc3lzdGVtID0gJ3N5c3RlbScsXG4gICBnbG9iYWwgPSAnZ2xvYmFsJyxcbiAgIGxvY2FsID0gJ2xvY2FsJyxcbiAgIHdvcmt0cmVlID0gJ3dvcmt0cmVlJyxcbn1cblxuZnVuY3Rpb24gYXNDb25maWdTY29wZTxUIGV4dGVuZHMgR2l0Q29uZmlnU2NvcGUgfCB1bmRlZmluZWQ+KFxuICAgc2NvcGU6IEdpdENvbmZpZ1Njb3BlIHwgdW5rbm93bixcbiAgIGZhbGxiYWNrOiBUXG4pOiBHaXRDb25maWdTY29wZSB8IFQge1xuICAgaWYgKHR5cGVvZiBzY29wZSA9PT0gJ3N0cmluZycgJiYgR2l0Q29uZmlnU2NvcGUuaGFzT3duUHJvcGVydHkoc2NvcGUpKSB7XG4gICAgICByZXR1cm4gc2NvcGUgYXMgR2l0Q29uZmlnU2NvcGU7XG4gICB9XG4gICByZXR1cm4gZmFsbGJhY2s7XG59XG5cbmZ1bmN0aW9uIGFkZENvbmZpZ1Rhc2soXG4gICBrZXk6IHN0cmluZyxcbiAgIHZhbHVlOiBzdHJpbmcsXG4gICBhcHBlbmQ6IGJvb2xlYW4sXG4gICBzY29wZTogR2l0Q29uZmlnU2NvcGVcbik6IFN0cmluZ1Rhc2s8c3RyaW5nPiB7XG4gICBjb25zdCBjb21tYW5kczogc3RyaW5nW10gPSBbJ2NvbmZpZycsIGAtLSR7c2NvcGV9YF07XG5cbiAgIGlmIChhcHBlbmQpIHtcbiAgICAgIGNvbW1hbmRzLnB1c2goJy0tYWRkJyk7XG4gICB9XG5cbiAgIGNvbW1hbmRzLnB1c2goa2V5LCB2YWx1ZSk7XG5cbiAgIHJldHVybiB7XG4gICAgICBjb21tYW5kcyxcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIHBhcnNlcih0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgICB9LFxuICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29uZmlnVGFzayhrZXk6IHN0cmluZywgc2NvcGU/OiBHaXRDb25maWdTY29wZSk6IFN0cmluZ1Rhc2s8Q29uZmlnR2V0UmVzdWx0PiB7XG4gICBjb25zdCBjb21tYW5kczogc3RyaW5nW10gPSBbJ2NvbmZpZycsICctLW51bGwnLCAnLS1zaG93LW9yaWdpbicsICctLWdldC1hbGwnLCBrZXldO1xuXG4gICBpZiAoc2NvcGUpIHtcbiAgICAgIGNvbW1hbmRzLnNwbGljZSgxLCAwLCBgLS0ke3Njb3BlfWApO1xuICAgfVxuXG4gICByZXR1cm4ge1xuICAgICAgY29tbWFuZHMsXG4gICAgICBmb3JtYXQ6ICd1dGYtOCcsXG4gICAgICBwYXJzZXIodGV4dCkge1xuICAgICAgICAgcmV0dXJuIGNvbmZpZ0dldFBhcnNlcih0ZXh0LCBrZXkpO1xuICAgICAgfSxcbiAgIH07XG59XG5cbmZ1bmN0aW9uIGxpc3RDb25maWdUYXNrKHNjb3BlPzogR2l0Q29uZmlnU2NvcGUpOiBTdHJpbmdUYXNrPENvbmZpZ0xpc3RTdW1tYXJ5PiB7XG4gICBjb25zdCBjb21tYW5kcyA9IFsnY29uZmlnJywgJy0tbGlzdCcsICctLXNob3ctb3JpZ2luJywgJy0tbnVsbCddO1xuXG4gICBpZiAoc2NvcGUpIHtcbiAgICAgIGNvbW1hbmRzLnB1c2goYC0tJHtzY29wZX1gKTtcbiAgIH1cblxuICAgcmV0dXJuIHtcbiAgICAgIGNvbW1hbmRzLFxuICAgICAgZm9ybWF0OiAndXRmLTgnLFxuICAgICAgcGFyc2VyKHRleHQ6IHN0cmluZykge1xuICAgICAgICAgcmV0dXJuIGNvbmZpZ0xpc3RQYXJzZXIodGV4dCk7XG4gICAgICB9LFxuICAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCk6IFBpY2s8U2ltcGxlR2l0LCAnYWRkQ29uZmlnJyB8ICdnZXRDb25maWcnIHwgJ2xpc3RDb25maWcnPiB7XG4gICByZXR1cm4ge1xuICAgICAgYWRkQ29uZmlnKHRoaXM6IFNpbXBsZUdpdEFwaSwga2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIC4uLnJlc3Q6IHVua25vd25bXSkge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICAgICAgICBhZGRDb25maWdUYXNrKFxuICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICByZXN0WzBdID09PSB0cnVlLFxuICAgICAgICAgICAgICAgYXNDb25maWdTY29wZShyZXN0WzFdLCBHaXRDb25maWdTY29wZS5sb2NhbClcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKVxuICAgICAgICAgKTtcbiAgICAgIH0sXG5cbiAgICAgIGdldENvbmZpZyh0aGlzOiBTaW1wbGVHaXRBcGksIGtleTogc3RyaW5nLCBzY29wZT86IEdpdENvbmZpZ1Njb3BlKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcnVuVGFzayhcbiAgICAgICAgICAgIGdldENvbmZpZ1Rhc2soa2V5LCBhc0NvbmZpZ1Njb3BlKHNjb3BlLCB1bmRlZmluZWQpKSxcbiAgICAgICAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICAgICAgICApO1xuICAgICAgfSxcblxuICAgICAgbGlzdENvbmZpZyh0aGlzOiBTaW1wbGVHaXRBcGksIC4uLnJlc3Q6IHVua25vd25bXSkge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICAgICAgICBsaXN0Q29uZmlnVGFzayhhc0NvbmZpZ1Njb3BlKHJlc3RbMF0sIHVuZGVmaW5lZCkpLFxuICAgICAgICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICAgICAgICk7XG4gICAgICB9LFxuICAgfTtcbn1cbiIsICJleHBvcnQgZW51bSBEaWZmTmFtZVN0YXR1cyB7XG4gICBBRERFRCA9ICdBJyxcbiAgIENPUElFRCA9ICdDJyxcbiAgIERFTEVURUQgPSAnRCcsXG4gICBNT0RJRklFRCA9ICdNJyxcbiAgIFJFTkFNRUQgPSAnUicsXG4gICBDSEFOR0VEID0gJ1QnLFxuICAgVU5NRVJHRUQgPSAnVScsXG4gICBVTktOT1dOID0gJ1gnLFxuICAgQlJPS0VOID0gJ0InLFxufVxuXG5jb25zdCBkaWZmTmFtZVN0YXR1cyA9IG5ldyBTZXQoT2JqZWN0LnZhbHVlcyhEaWZmTmFtZVN0YXR1cykpO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNEaWZmTmFtZVN0YXR1cyhpbnB1dDogc3RyaW5nKTogaW5wdXQgaXMgRGlmZk5hbWVTdGF0dXMge1xuICAgcmV0dXJuIGRpZmZOYW1lU3RhdHVzLmhhcyhpbnB1dCBhcyBEaWZmTmFtZVN0YXR1cyk7XG59XG4iLCAiaW1wb3J0IHsgR3JlcFJlc3VsdCwgU2ltcGxlR2l0IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBTaW1wbGVHaXRBcGkgfSBmcm9tICcuLi9zaW1wbGUtZ2l0LWFwaSc7XG5pbXBvcnQge1xuICAgYXNOdW1iZXIsXG4gICBmb3JFYWNoTGluZVdpdGhDb250ZW50LFxuICAgZ2V0VHJhaWxpbmdPcHRpb25zLFxuICAgTlVMTCxcbiAgIHByZWZpeGVkQXJyYXksXG4gICB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQsXG59IGZyb20gJy4uL3V0aWxzJztcblxuaW1wb3J0IHsgY29uZmlndXJhdGlvbkVycm9yVGFzayB9IGZyb20gJy4vdGFzayc7XG5cbmNvbnN0IGRpc2FsbG93ZWRPcHRpb25zID0gWyctaCddO1xuXG5jb25zdCBRdWVyeSA9IFN5bWJvbCgnZ3JlcFF1ZXJ5Jyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2l0R3JlcFF1ZXJ5IGV4dGVuZHMgSXRlcmFibGU8c3RyaW5nPiB7XG4gICAvKiogQWRkcyBvbmUgb3IgbW9yZSB0ZXJtcyB0byBiZSBncm91cGVkIGFzIGFuIFwiYW5kXCIgdG8gYW55IG90aGVyIHRlcm1zICovXG4gICBhbmQoLi4uYW5kOiBzdHJpbmdbXSk6IHRoaXM7XG5cbiAgIC8qKiBBZGRzIG9uZSBvciBtb3JlIHNlYXJjaCB0ZXJtcyAtIGdpdC5ncmVwIHdpbGwgXCJvclwiIHRoaXMgdG8gb3RoZXIgdGVybXMgKi9cbiAgIHBhcmFtKC4uLnBhcmFtOiBzdHJpbmdbXSk6IHRoaXM7XG59XG5cbmNsYXNzIEdyZXBRdWVyeSBpbXBsZW1lbnRzIEdpdEdyZXBRdWVyeSB7XG4gICBwcml2YXRlIFtRdWVyeV06IHN0cmluZ1tdID0gW107XG5cbiAgICpbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgIGZvciAoY29uc3QgcXVlcnkgb2YgdGhpc1tRdWVyeV0pIHtcbiAgICAgICAgIHlpZWxkIHF1ZXJ5O1xuICAgICAgfVxuICAgfVxuXG4gICBhbmQoLi4uYW5kOiBzdHJpbmdbXSkge1xuICAgICAgYW5kLmxlbmd0aCAmJiB0aGlzW1F1ZXJ5XS5wdXNoKCctLWFuZCcsICcoJywgLi4ucHJlZml4ZWRBcnJheShhbmQsICctZScpLCAnKScpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICB9XG5cbiAgIHBhcmFtKC4uLnBhcmFtOiBzdHJpbmdbXSkge1xuICAgICAgdGhpc1tRdWVyeV0ucHVzaCguLi5wcmVmaXhlZEFycmF5KHBhcmFtLCAnLWUnKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgIH1cbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGJ1aWxkZXIgZm9yIGEgYGdpdC5ncmVwYCBxdWVyeSB3aXRoIG9wdGlvbmFsIHBhcmFtc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ3JlcFF1ZXJ5QnVpbGRlciguLi5wYXJhbXM6IHN0cmluZ1tdKTogR2l0R3JlcFF1ZXJ5IHtcbiAgIHJldHVybiBuZXcgR3JlcFF1ZXJ5KCkucGFyYW0oLi4ucGFyYW1zKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VHcmVwKGdyZXA6IHN0cmluZyk6IEdyZXBSZXN1bHQge1xuICAgY29uc3QgcGF0aHM6IEdyZXBSZXN1bHRbJ3BhdGhzJ10gPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgIGNvbnN0IHJlc3VsdHM6IEdyZXBSZXN1bHRbJ3Jlc3VsdHMnXSA9IHt9O1xuXG4gICBmb3JFYWNoTGluZVdpdGhDb250ZW50KGdyZXAsIChpbnB1dCkgPT4ge1xuICAgICAgY29uc3QgW3BhdGgsIGxpbmUsIHByZXZpZXddID0gaW5wdXQuc3BsaXQoTlVMTCk7XG4gICAgICBwYXRocy5hZGQocGF0aCk7XG4gICAgICAocmVzdWx0c1twYXRoXSA9IHJlc3VsdHNbcGF0aF0gfHwgW10pLnB1c2goe1xuICAgICAgICAgbGluZTogYXNOdW1iZXIobGluZSksXG4gICAgICAgICBwYXRoLFxuICAgICAgICAgcHJldmlldyxcbiAgICAgIH0pO1xuICAgfSk7XG5cbiAgIHJldHVybiB7XG4gICAgICBwYXRocyxcbiAgICAgIHJlc3VsdHMsXG4gICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKTogUGljazxTaW1wbGVHaXQsICdncmVwJz4ge1xuICAgcmV0dXJuIHtcbiAgICAgIGdyZXAodGhpczogU2ltcGxlR2l0QXBpLCBzZWFyY2hUZXJtOiBzdHJpbmcgfCBHaXRHcmVwUXVlcnkpIHtcbiAgICAgICAgIGNvbnN0IHRoZW4gPSB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKTtcbiAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBnZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzKTtcblxuICAgICAgICAgZm9yIChjb25zdCBvcHRpb24gb2YgZGlzYWxsb3dlZE9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmluY2x1ZGVzKG9wdGlvbikpIHtcbiAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbkVycm9yVGFzayhgZ2l0LmdyZXA6IHVzZSBvZiBcIiR7b3B0aW9ufVwiIGlzIG5vdCBzdXBwb3J0ZWQuYCksXG4gICAgICAgICAgICAgICAgICB0aGVuXG4gICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgfVxuXG4gICAgICAgICBpZiAodHlwZW9mIHNlYXJjaFRlcm0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBzZWFyY2hUZXJtID0gZ3JlcFF1ZXJ5QnVpbGRlcigpLnBhcmFtKHNlYXJjaFRlcm0pO1xuICAgICAgICAgfVxuXG4gICAgICAgICBjb25zdCBjb21tYW5kcyA9IFsnZ3JlcCcsICctLW51bGwnLCAnLW4nLCAnLS1mdWxsLW5hbWUnLCAuLi5vcHRpb25zLCAuLi5zZWFyY2hUZXJtXTtcblxuICAgICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICBjb21tYW5kcyxcbiAgICAgICAgICAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgICAgICAgICAgIHBhcnNlcihzdGRPdXQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUdyZXAoc3RkT3V0KTtcbiAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGhlblxuICAgICAgICAgKTtcbiAgICAgIH0sXG4gICB9O1xufVxuIiwgImltcG9ydCB7IHN0cmFpZ2h0VGhyb3VnaFN0cmluZ1Rhc2sgfSBmcm9tICcuL3Rhc2snO1xuaW1wb3J0IHsgTWF5YmUsIE9wdGlvbkZsYWdzLCBPcHRpb25zIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZW51bSBSZXNldE1vZGUge1xuICAgTUlYRUQgPSAnbWl4ZWQnLFxuICAgU09GVCA9ICdzb2Z0JyxcbiAgIEhBUkQgPSAnaGFyZCcsXG4gICBNRVJHRSA9ICdtZXJnZScsXG4gICBLRUVQID0gJ2tlZXAnLFxufVxuXG5jb25zdCBSZXNldE1vZGVzID0gQXJyYXkuZnJvbShPYmplY3QudmFsdWVzKFJlc2V0TW9kZSkpO1xuXG5leHBvcnQgdHlwZSBSZXNldE9wdGlvbnMgPSBPcHRpb25zICZcbiAgIE9wdGlvbkZsYWdzPCctcScgfCAnLS1xdWlldCcgfCAnLS1uby1xdWlldCcgfCAnLS1wYXRoc3BlYy1mcm9tLW51bCc+ICZcbiAgIE9wdGlvbkZsYWdzPCctLXBhdGhzcGVjLWZyb20tZmlsZScsIHN0cmluZz47XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNldFRhc2sobW9kZTogTWF5YmU8UmVzZXRNb2RlPiwgY3VzdG9tQXJnczogc3RyaW5nW10pIHtcbiAgIGNvbnN0IGNvbW1hbmRzOiBzdHJpbmdbXSA9IFsncmVzZXQnXTtcbiAgIGlmIChpc1ZhbGlkUmVzZXRNb2RlKG1vZGUpKSB7XG4gICAgICBjb21tYW5kcy5wdXNoKGAtLSR7bW9kZX1gKTtcbiAgIH1cbiAgIGNvbW1hbmRzLnB1c2goLi4uY3VzdG9tQXJncyk7XG5cbiAgIHJldHVybiBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKGNvbW1hbmRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlc2V0TW9kZShtb2RlOiBSZXNldE1vZGUgfCBhbnkpOiBNYXliZTxSZXNldE1vZGU+IHtcbiAgIGlmIChpc1ZhbGlkUmVzZXRNb2RlKG1vZGUpKSB7XG4gICAgICByZXR1cm4gbW9kZTtcbiAgIH1cblxuICAgc3dpdGNoICh0eXBlb2YgbW9kZSkge1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgICByZXR1cm4gUmVzZXRNb2RlLlNPRlQ7XG4gICB9XG5cbiAgIHJldHVybjtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZFJlc2V0TW9kZShtb2RlOiBSZXNldE1vZGUgfCBhbnkpOiBtb2RlIGlzIFJlc2V0TW9kZSB7XG4gICByZXR1cm4gUmVzZXRNb2Rlcy5pbmNsdWRlcyhtb2RlKTtcbn1cbiIsICJpbXBvcnQgZGVidWcsIHsgRGVidWdnZXIgfSBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQge1xuICAgYXBwZW5kLFxuICAgZmlsdGVySGFzTGVuZ3RoLFxuICAgZmlsdGVyU3RyaW5nLFxuICAgZmlsdGVyVHlwZSxcbiAgIE5PT1AsXG4gICBvYmplY3RUb1N0cmluZyxcbiAgIHJlbW92ZSxcbn0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBNYXliZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5kZWJ1Zy5mb3JtYXR0ZXJzLkwgPSAodmFsdWU6IGFueSkgPT4gU3RyaW5nKGZpbHRlckhhc0xlbmd0aCh2YWx1ZSkgPyB2YWx1ZS5sZW5ndGggOiAnLScpO1xuZGVidWcuZm9ybWF0dGVycy5CID0gKHZhbHVlOiBCdWZmZXIpID0+IHtcbiAgIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoJ3V0ZjgnKTtcbiAgIH1cbiAgIHJldHVybiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59O1xuXG50eXBlIE91dHB1dExvZ2dpbmdIYW5kbGVyID0gKG1lc3NhZ2U6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHZvaWQ7XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvZygpIHtcbiAgIHJldHVybiBkZWJ1Zygnc2ltcGxlLWdpdCcpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE91dHB1dExvZ2dlciBleHRlbmRzIE91dHB1dExvZ2dpbmdIYW5kbGVyIHtcbiAgIHJlYWRvbmx5IGxhYmVsOiBzdHJpbmc7XG5cbiAgIGluZm86IE91dHB1dExvZ2dpbmdIYW5kbGVyO1xuICAgc3RlcChuZXh0U3RlcD86IHN0cmluZyk6IE91dHB1dExvZ2dlcjtcbiAgIHNpYmxpbmcobmFtZTogc3RyaW5nKTogT3V0cHV0TG9nZ2VyO1xufVxuXG5mdW5jdGlvbiBwcmVmaXhlZExvZ2dlcihcbiAgIHRvOiBEZWJ1Z2dlcixcbiAgIHByZWZpeDogc3RyaW5nLFxuICAgZm9yd2FyZD86IE91dHB1dExvZ2dpbmdIYW5kbGVyXG4pOiBPdXRwdXRMb2dnaW5nSGFuZGxlciB7XG4gICBpZiAoIXByZWZpeCB8fCAhU3RyaW5nKHByZWZpeCkucmVwbGFjZSgvXFxzKi8sICcnKSkge1xuICAgICAgcmV0dXJuICFmb3J3YXJkXG4gICAgICAgICA/IHRvXG4gICAgICAgICA6IChtZXNzYWdlLCAuLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgIHRvKG1lc3NhZ2UsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgICBmb3J3YXJkKG1lc3NhZ2UsIC4uLmFyZ3MpO1xuICAgICAgICAgICB9O1xuICAgfVxuXG4gICByZXR1cm4gKG1lc3NhZ2UsIC4uLmFyZ3MpID0+IHtcbiAgICAgIHRvKGAlcyAke21lc3NhZ2V9YCwgcHJlZml4LCAuLi5hcmdzKTtcbiAgICAgIGlmIChmb3J3YXJkKSB7XG4gICAgICAgICBmb3J3YXJkKG1lc3NhZ2UsIC4uLmFyZ3MpO1xuICAgICAgfVxuICAgfTtcbn1cblxuZnVuY3Rpb24gY2hpbGRMb2dnZXJOYW1lKFxuICAgbmFtZTogTWF5YmU8c3RyaW5nPixcbiAgIGNoaWxkRGVidWdnZXI6IE1heWJlPERlYnVnZ2VyPixcbiAgIHsgbmFtZXNwYWNlOiBwYXJlbnROYW1lc3BhY2UgfTogRGVidWdnZXJcbik6IHN0cmluZyB7XG4gICBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gbmFtZTtcbiAgIH1cbiAgIGNvbnN0IGNoaWxkTmFtZXNwYWNlID0gKGNoaWxkRGVidWdnZXIgJiYgY2hpbGREZWJ1Z2dlci5uYW1lc3BhY2UpIHx8ICcnO1xuXG4gICBpZiAoY2hpbGROYW1lc3BhY2Uuc3RhcnRzV2l0aChwYXJlbnROYW1lc3BhY2UpKSB7XG4gICAgICByZXR1cm4gY2hpbGROYW1lc3BhY2Uuc3Vic3RyKHBhcmVudE5hbWVzcGFjZS5sZW5ndGggKyAxKTtcbiAgIH1cblxuICAgcmV0dXJuIGNoaWxkTmFtZXNwYWNlIHx8IHBhcmVudE5hbWVzcGFjZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxvZ2dlcihcbiAgIGxhYmVsOiBzdHJpbmcsXG4gICB2ZXJib3NlPzogc3RyaW5nIHwgRGVidWdnZXIsXG4gICBpbml0aWFsU3RlcD86IHN0cmluZyxcbiAgIGluZm9EZWJ1Z2dlciA9IGNyZWF0ZUxvZygpXG4pOiBPdXRwdXRMb2dnZXIge1xuICAgY29uc3QgbGFiZWxQcmVmaXggPSAobGFiZWwgJiYgYFske2xhYmVsfV1gKSB8fCAnJztcblxuICAgY29uc3Qgc3Bhd25lZDogT3V0cHV0TG9nZ2VyW10gPSBbXTtcbiAgIGNvbnN0IGRlYnVnRGVidWdnZXI6IE1heWJlPERlYnVnZ2VyPiA9XG4gICAgICB0eXBlb2YgdmVyYm9zZSA9PT0gJ3N0cmluZycgPyBpbmZvRGVidWdnZXIuZXh0ZW5kKHZlcmJvc2UpIDogdmVyYm9zZTtcbiAgIGNvbnN0IGtleSA9IGNoaWxkTG9nZ2VyTmFtZShmaWx0ZXJUeXBlKHZlcmJvc2UsIGZpbHRlclN0cmluZyksIGRlYnVnRGVidWdnZXIsIGluZm9EZWJ1Z2dlcik7XG5cbiAgIHJldHVybiBzdGVwKGluaXRpYWxTdGVwKTtcblxuICAgZnVuY3Rpb24gc2libGluZyhuYW1lOiBzdHJpbmcsIGluaXRpYWw/OiBzdHJpbmcpIHtcbiAgICAgIHJldHVybiBhcHBlbmQoXG4gICAgICAgICBzcGF3bmVkLFxuICAgICAgICAgY3JlYXRlTG9nZ2VyKGxhYmVsLCBrZXkucmVwbGFjZSgvXlteOl0rLywgbmFtZSksIGluaXRpYWwsIGluZm9EZWJ1Z2dlcilcbiAgICAgICk7XG4gICB9XG5cbiAgIGZ1bmN0aW9uIHN0ZXAocGhhc2U/OiBzdHJpbmcpIHtcbiAgICAgIGNvbnN0IHN0ZXBQcmVmaXggPSAocGhhc2UgJiYgYFske3BoYXNlfV1gKSB8fCAnJztcbiAgICAgIGNvbnN0IGRlYnVnID0gKGRlYnVnRGVidWdnZXIgJiYgcHJlZml4ZWRMb2dnZXIoZGVidWdEZWJ1Z2dlciwgc3RlcFByZWZpeCkpIHx8IE5PT1A7XG4gICAgICBjb25zdCBpbmZvID0gcHJlZml4ZWRMb2dnZXIoaW5mb0RlYnVnZ2VyLCBgJHtsYWJlbFByZWZpeH0gJHtzdGVwUHJlZml4fWAsIGRlYnVnKTtcblxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZGVidWdEZWJ1Z2dlciA/IGRlYnVnIDogaW5mbywge1xuICAgICAgICAgbGFiZWwsXG4gICAgICAgICBzaWJsaW5nLFxuICAgICAgICAgaW5mbyxcbiAgICAgICAgIHN0ZXAsXG4gICAgICB9KTtcbiAgIH1cbn1cblxuLyoqXG4gKiBUaGUgYEdpdExvZ2dlcmAgaXMgdXNlZCBieSB0aGUgbWFpbiBgU2ltcGxlR2l0YCBydW5uZXIgdG8gaGFuZGxlIGxvZ2dpbmdcbiAqIGFueSB3YXJuaW5ncyBvciBlcnJvcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBHaXRMb2dnZXIge1xuICAgcHVibGljIGVycm9yOiBPdXRwdXRMb2dnaW5nSGFuZGxlcjtcblxuICAgcHVibGljIHdhcm46IE91dHB1dExvZ2dpbmdIYW5kbGVyO1xuXG4gICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9vdXQ6IERlYnVnZ2VyID0gY3JlYXRlTG9nKCkpIHtcbiAgICAgIHRoaXMuZXJyb3IgPSBwcmVmaXhlZExvZ2dlcihfb3V0LCAnW0VSUk9SXScpO1xuICAgICAgdGhpcy53YXJuID0gcHJlZml4ZWRMb2dnZXIoX291dCwgJ1tXQVJOXScpO1xuICAgfVxuXG4gICBzaWxlbnQoc2lsZW5jZSA9IGZhbHNlKSB7XG4gICAgICBpZiAoc2lsZW5jZSAhPT0gdGhpcy5fb3V0LmVuYWJsZWQpIHtcbiAgICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBuYW1lc3BhY2UgfSA9IHRoaXMuX291dDtcbiAgICAgIGNvbnN0IGVudiA9IChwcm9jZXNzLmVudi5ERUJVRyB8fCAnJykuc3BsaXQoJywnKS5maWx0ZXIoKHMpID0+ICEhcyk7XG4gICAgICBjb25zdCBoYXNPbiA9IGVudi5pbmNsdWRlcyhuYW1lc3BhY2UpO1xuICAgICAgY29uc3QgaGFzT2ZmID0gZW52LmluY2x1ZGVzKGAtJHtuYW1lc3BhY2V9YCk7XG5cbiAgICAgIC8vIGVuYWJsaW5nIHRoZSBsb2dcbiAgICAgIGlmICghc2lsZW5jZSkge1xuICAgICAgICAgaWYgKGhhc09mZikge1xuICAgICAgICAgICAgcmVtb3ZlKGVudiwgYC0ke25hbWVzcGFjZX1gKTtcbiAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbnYucHVzaChuYW1lc3BhY2UpO1xuICAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgIGlmIChoYXNPbikge1xuICAgICAgICAgICAgcmVtb3ZlKGVudiwgbmFtZXNwYWNlKTtcbiAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbnYucHVzaChgLSR7bmFtZXNwYWNlfWApO1xuICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkZWJ1Zy5lbmFibGUoZW52LmpvaW4oJywnKSk7XG4gICB9XG59XG4iLCAiaW1wb3J0IHsgU2ltcGxlR2l0VGFzayB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IEdpdEVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2dpdC1lcnJvcic7XG5pbXBvcnQgeyBjcmVhdGVMb2dnZXIsIE91dHB1dExvZ2dlciB9IGZyb20gJy4uL2dpdC1sb2dnZXInO1xuXG50eXBlIEFueVNpbXBsZUdpdFRhc2sgPSBTaW1wbGVHaXRUYXNrPGFueT47XG5cbnR5cGUgVGFza0luUHJvZ3Jlc3MgPSB7XG4gICBuYW1lOiBzdHJpbmc7XG4gICBsb2dnZXI6IE91dHB1dExvZ2dlcjtcbiAgIHRhc2s6IEFueVNpbXBsZUdpdFRhc2s7XG59O1xuXG5leHBvcnQgY2xhc3MgVGFza3NQZW5kaW5nUXVldWUge1xuICAgcHJpdmF0ZSBfcXVldWU6IE1hcDxBbnlTaW1wbGVHaXRUYXNrLCBUYXNrSW5Qcm9ncmVzcz4gPSBuZXcgTWFwKCk7XG5cbiAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9nTGFiZWwgPSAnR2l0RXhlY3V0b3InKSB7fVxuXG4gICBwcml2YXRlIHdpdGhQcm9ncmVzcyh0YXNrOiBBbnlTaW1wbGVHaXRUYXNrKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcXVldWUuZ2V0KHRhc2spO1xuICAgfVxuXG4gICBwcml2YXRlIGNyZWF0ZVByb2dyZXNzKHRhc2s6IEFueVNpbXBsZUdpdFRhc2spOiBUYXNrSW5Qcm9ncmVzcyB7XG4gICAgICBjb25zdCBuYW1lID0gVGFza3NQZW5kaW5nUXVldWUuZ2V0TmFtZSh0YXNrLmNvbW1hbmRzWzBdKTtcbiAgICAgIGNvbnN0IGxvZ2dlciA9IGNyZWF0ZUxvZ2dlcih0aGlzLmxvZ0xhYmVsLCBuYW1lKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgIHRhc2ssXG4gICAgICAgICBsb2dnZXIsXG4gICAgICAgICBuYW1lLFxuICAgICAgfTtcbiAgIH1cblxuICAgcHVzaCh0YXNrOiBBbnlTaW1wbGVHaXRUYXNrKTogVGFza0luUHJvZ3Jlc3Mge1xuICAgICAgY29uc3QgcHJvZ3Jlc3MgPSB0aGlzLmNyZWF0ZVByb2dyZXNzKHRhc2spO1xuICAgICAgcHJvZ3Jlc3MubG9nZ2VyKCdBZGRpbmcgdGFzayB0byB0aGUgcXVldWUsIGNvbW1hbmRzID0gJW8nLCB0YXNrLmNvbW1hbmRzKTtcblxuICAgICAgdGhpcy5fcXVldWUuc2V0KHRhc2ssIHByb2dyZXNzKTtcblxuICAgICAgcmV0dXJuIHByb2dyZXNzO1xuICAgfVxuXG4gICBmYXRhbChlcnI6IEdpdEVycm9yKSB7XG4gICAgICBmb3IgKGNvbnN0IFt0YXNrLCB7IGxvZ2dlciB9XSBvZiBBcnJheS5mcm9tKHRoaXMuX3F1ZXVlLmVudHJpZXMoKSkpIHtcbiAgICAgICAgIGlmICh0YXNrID09PSBlcnIudGFzaykge1xuICAgICAgICAgICAgbG9nZ2VyLmluZm8oYEZhaWxlZCAlb2AsIGVycik7XG4gICAgICAgICAgICBsb2dnZXIoXG4gICAgICAgICAgICAgICBgRmF0YWwgZXhjZXB0aW9uLCBhbnkgYXMteWV0IHVuLXN0YXJ0ZWQgdGFza3MgcnVuIHRocm91Z2ggdGhpcyBleGVjdXRvciB3aWxsIG5vdCBiZSBhdHRlbXB0ZWRgXG4gICAgICAgICAgICApO1xuICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKFxuICAgICAgICAgICAgICAgYEEgZmF0YWwgZXhjZXB0aW9uIG9jY3VycmVkIGluIGEgcHJldmlvdXMgdGFzaywgdGhlIHF1ZXVlIGhhcyBiZWVuIHB1cmdlZDogJW9gLFxuICAgICAgICAgICAgICAgZXJyLm1lc3NhZ2VcbiAgICAgICAgICAgICk7XG4gICAgICAgICB9XG5cbiAgICAgICAgIHRoaXMuY29tcGxldGUodGFzayk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9xdWV1ZS5zaXplICE9PSAwKSB7XG4gICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFF1ZXVlIHNpemUgc2hvdWxkIGJlIHplcm8gYWZ0ZXIgZmF0YWw6ICR7dGhpcy5fcXVldWUuc2l6ZX1gKTtcbiAgICAgIH1cbiAgIH1cblxuICAgY29tcGxldGUodGFzazogQW55U2ltcGxlR2l0VGFzaykge1xuICAgICAgY29uc3QgcHJvZ3Jlc3MgPSB0aGlzLndpdGhQcm9ncmVzcyh0YXNrKTtcbiAgICAgIGlmIChwcm9ncmVzcykge1xuICAgICAgICAgdGhpcy5fcXVldWUuZGVsZXRlKHRhc2spO1xuICAgICAgfVxuICAgfVxuXG4gICBhdHRlbXB0KHRhc2s6IEFueVNpbXBsZUdpdFRhc2spOiBUYXNrSW5Qcm9ncmVzcyB7XG4gICAgICBjb25zdCBwcm9ncmVzcyA9IHRoaXMud2l0aFByb2dyZXNzKHRhc2spO1xuICAgICAgaWYgKCFwcm9ncmVzcykge1xuICAgICAgICAgdGhyb3cgbmV3IEdpdEVycm9yKHVuZGVmaW5lZCwgJ1Rhc2tzUGVuZGluZ1F1ZXVlOiBhdHRlbXB0IGNhbGxlZCBmb3IgYW4gdW5rbm93biB0YXNrJyk7XG4gICAgICB9XG4gICAgICBwcm9ncmVzcy5sb2dnZXIoJ1N0YXJ0aW5nIHRhc2snKTtcblxuICAgICAgcmV0dXJuIHByb2dyZXNzO1xuICAgfVxuXG4gICBzdGF0aWMgZ2V0TmFtZShuYW1lID0gJ2VtcHR5Jykge1xuICAgICAgcmV0dXJuIGB0YXNrOiR7bmFtZX06JHsrK1Rhc2tzUGVuZGluZ1F1ZXVlLmNvdW50ZXJ9YDtcbiAgIH1cblxuICAgcHJpdmF0ZSBzdGF0aWMgY291bnRlciA9IDA7XG59XG4iLCAiaW1wb3J0IHsgc3Bhd24sIFNwYXduT3B0aW9ucyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHsgR2l0RXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvZ2l0LWVycm9yJztcbmltcG9ydCB7IE91dHB1dExvZ2dlciB9IGZyb20gJy4uL2dpdC1sb2dnZXInO1xuaW1wb3J0IHsgUGx1Z2luU3RvcmUgfSBmcm9tICcuLi9wbHVnaW5zJztcbmltcG9ydCB7IEVtcHR5VGFzaywgaXNCdWZmZXJUYXNrLCBpc0VtcHR5VGFzayB9IGZyb20gJy4uL3Rhc2tzL3Rhc2snO1xuaW1wb3J0IHtcbiAgIEdpdEV4ZWN1dG9yUmVzdWx0LFxuICAgTWF5YmUsXG4gICBvdXRwdXRIYW5kbGVyLFxuICAgUnVubmFibGVUYXNrLFxuICAgU2ltcGxlR2l0RXhlY3V0b3IsXG4gICBTaW1wbGVHaXRUYXNrLFxufSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBjYWxsVGFza1BhcnNlciwgZmlyc3QsIEdpdE91dHB1dFN0cmVhbXMsIG9iamVjdFRvU3RyaW5nIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgU2NoZWR1bGVyIH0gZnJvbSAnLi9zY2hlZHVsZXInO1xuaW1wb3J0IHsgVGFza3NQZW5kaW5nUXVldWUgfSBmcm9tICcuL3Rhc2tzLXBlbmRpbmctcXVldWUnO1xuXG5leHBvcnQgY2xhc3MgR2l0RXhlY3V0b3JDaGFpbiBpbXBsZW1lbnRzIFNpbXBsZUdpdEV4ZWN1dG9yIHtcbiAgIHByaXZhdGUgX2NoYWluOiBQcm9taXNlPGFueT4gPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgIHByaXZhdGUgX3F1ZXVlID0gbmV3IFRhc2tzUGVuZGluZ1F1ZXVlKCk7XG4gICBwcml2YXRlIF9jd2Q6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICAgcHVibGljIGdldCBjd2QoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY3dkIHx8IHRoaXMuX2V4ZWN1dG9yLmN3ZDtcbiAgIH1cblxuICAgcHVibGljIHNldCBjd2QoY3dkOiBzdHJpbmcpIHtcbiAgICAgIHRoaXMuX2N3ZCA9IGN3ZDtcbiAgIH1cblxuICAgcHVibGljIGdldCBlbnYoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZXhlY3V0b3IuZW52O1xuICAgfVxuXG4gICBwdWJsaWMgZ2V0IG91dHB1dEhhbmRsZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZXhlY3V0b3Iub3V0cHV0SGFuZGxlcjtcbiAgIH1cblxuICAgY29uc3RydWN0b3IoXG4gICAgICBwcml2YXRlIF9leGVjdXRvcjogU2ltcGxlR2l0RXhlY3V0b3IsXG4gICAgICBwcml2YXRlIF9zY2hlZHVsZXI6IFNjaGVkdWxlcixcbiAgICAgIHByaXZhdGUgX3BsdWdpbnM6IFBsdWdpblN0b3JlXG4gICApIHt9XG5cbiAgIHB1YmxpYyBjaGFpbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgfVxuXG4gICBwdWJsaWMgcHVzaDxSPih0YXNrOiBTaW1wbGVHaXRUYXNrPFI+KTogUHJvbWlzZTxSPiB7XG4gICAgICB0aGlzLl9xdWV1ZS5wdXNoKHRhc2spO1xuXG4gICAgICByZXR1cm4gKHRoaXMuX2NoYWluID0gdGhpcy5fY2hhaW4udGhlbigoKSA9PiB0aGlzLmF0dGVtcHRUYXNrKHRhc2spKSk7XG4gICB9XG5cbiAgIHByaXZhdGUgYXN5bmMgYXR0ZW1wdFRhc2s8Uj4odGFzazogU2ltcGxlR2l0VGFzazxSPik6IFByb21pc2U8dm9pZCB8IFI+IHtcbiAgICAgIGNvbnN0IG9uU2NoZWR1bGVDb21wbGV0ZSA9IGF3YWl0IHRoaXMuX3NjaGVkdWxlci5uZXh0KCk7XG4gICAgICBjb25zdCBvblF1ZXVlQ29tcGxldGUgPSAoKSA9PiB0aGlzLl9xdWV1ZS5jb21wbGV0ZSh0YXNrKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgIGNvbnN0IHsgbG9nZ2VyIH0gPSB0aGlzLl9xdWV1ZS5hdHRlbXB0KHRhc2spO1xuICAgICAgICAgcmV0dXJuIChhd2FpdCAoaXNFbXB0eVRhc2sodGFzaylcbiAgICAgICAgICAgID8gdGhpcy5hdHRlbXB0RW1wdHlUYXNrKHRhc2ssIGxvZ2dlcilcbiAgICAgICAgICAgIDogdGhpcy5hdHRlbXB0UmVtb3RlVGFzayh0YXNrLCBsb2dnZXIpKSkgYXMgUjtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgIHRocm93IHRoaXMub25GYXRhbEV4Y2VwdGlvbih0YXNrLCBlIGFzIEVycm9yKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICBvblF1ZXVlQ29tcGxldGUoKTtcbiAgICAgICAgIG9uU2NoZWR1bGVDb21wbGV0ZSgpO1xuICAgICAgfVxuICAgfVxuXG4gICBwcml2YXRlIG9uRmF0YWxFeGNlcHRpb248Uj4odGFzazogU2ltcGxlR2l0VGFzazxSPiwgZTogRXJyb3IpIHtcbiAgICAgIGNvbnN0IGdpdEVycm9yID1cbiAgICAgICAgIGUgaW5zdGFuY2VvZiBHaXRFcnJvciA/IE9iamVjdC5hc3NpZ24oZSwgeyB0YXNrIH0pIDogbmV3IEdpdEVycm9yKHRhc2ssIGUgJiYgU3RyaW5nKGUpKTtcblxuICAgICAgdGhpcy5fY2hhaW4gPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIHRoaXMuX3F1ZXVlLmZhdGFsKGdpdEVycm9yKTtcblxuICAgICAgcmV0dXJuIGdpdEVycm9yO1xuICAgfVxuXG4gICBwcml2YXRlIGFzeW5jIGF0dGVtcHRSZW1vdGVUYXNrPFI+KHRhc2s6IFJ1bm5hYmxlVGFzazxSPiwgbG9nZ2VyOiBPdXRwdXRMb2dnZXIpIHtcbiAgICAgIGNvbnN0IGJpbmFyeSA9IHRoaXMuX3BsdWdpbnMuZXhlYygnc3Bhd24uYmluYXJ5JywgJycsIHBsdWdpbkNvbnRleHQodGFzaywgdGFzay5jb21tYW5kcykpO1xuICAgICAgY29uc3QgYXJncyA9IHRoaXMuX3BsdWdpbnMuZXhlYyhcbiAgICAgICAgICdzcGF3bi5hcmdzJyxcbiAgICAgICAgIFsuLi50YXNrLmNvbW1hbmRzXSxcbiAgICAgICAgIHBsdWdpbkNvbnRleHQodGFzaywgdGFzay5jb21tYW5kcylcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHJhdyA9IGF3YWl0IHRoaXMuZ2l0UmVzcG9uc2UoXG4gICAgICAgICB0YXNrLFxuICAgICAgICAgYmluYXJ5LFxuICAgICAgICAgYXJncyxcbiAgICAgICAgIHRoaXMub3V0cHV0SGFuZGxlcixcbiAgICAgICAgIGxvZ2dlci5zdGVwKCdTUEFXTicpXG4gICAgICApO1xuICAgICAgY29uc3Qgb3V0cHV0U3RyZWFtcyA9IGF3YWl0IHRoaXMuaGFuZGxlVGFza0RhdGEodGFzaywgYXJncywgcmF3LCBsb2dnZXIuc3RlcCgnSEFORExFJykpO1xuXG4gICAgICBsb2dnZXIoYHBhc3NpbmcgcmVzcG9uc2UgdG8gdGFzaydzIHBhcnNlciBhcyBhICVzYCwgdGFzay5mb3JtYXQpO1xuXG4gICAgICBpZiAoaXNCdWZmZXJUYXNrKHRhc2spKSB7XG4gICAgICAgICByZXR1cm4gY2FsbFRhc2tQYXJzZXIodGFzay5wYXJzZXIsIG91dHB1dFN0cmVhbXMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2FsbFRhc2tQYXJzZXIodGFzay5wYXJzZXIsIG91dHB1dFN0cmVhbXMuYXNTdHJpbmdzKCkpO1xuICAgfVxuXG4gICBwcml2YXRlIGFzeW5jIGF0dGVtcHRFbXB0eVRhc2sodGFzazogRW1wdHlUYXNrLCBsb2dnZXI6IE91dHB1dExvZ2dlcikge1xuICAgICAgbG9nZ2VyKGBlbXB0eSB0YXNrIGJ5cGFzc2luZyBjaGlsZCBwcm9jZXNzIHRvIGNhbGwgdG8gdGFzaydzIHBhcnNlcmApO1xuICAgICAgcmV0dXJuIHRhc2sucGFyc2VyKHRoaXMpO1xuICAgfVxuXG4gICBwcml2YXRlIGhhbmRsZVRhc2tEYXRhPFI+KFxuICAgICAgdGFzazogU2ltcGxlR2l0VGFzazxSPixcbiAgICAgIGFyZ3M6IHN0cmluZ1tdLFxuICAgICAgcmVzdWx0OiBHaXRFeGVjdXRvclJlc3VsdCxcbiAgICAgIGxvZ2dlcjogT3V0cHV0TG9nZ2VyXG4gICApOiBQcm9taXNlPEdpdE91dHB1dFN0cmVhbXM+IHtcbiAgICAgIGNvbnN0IHsgZXhpdENvZGUsIHJlamVjdGlvbiwgc3RkT3V0LCBzdGRFcnIgfSA9IHJlc3VsdDtcblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChkb25lLCBmYWlsKSA9PiB7XG4gICAgICAgICBsb2dnZXIoYFByZXBhcmluZyB0byBoYW5kbGUgcHJvY2VzcyByZXNwb25zZSBleGl0Q29kZT0lZCBzdGRPdXQ9YCwgZXhpdENvZGUpO1xuXG4gICAgICAgICBjb25zdCB7IGVycm9yIH0gPSB0aGlzLl9wbHVnaW5zLmV4ZWMoXG4gICAgICAgICAgICAndGFzay5lcnJvcicsXG4gICAgICAgICAgICB7IGVycm9yOiByZWplY3Rpb24gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgIC4uLnBsdWdpbkNvbnRleHQodGFzaywgYXJncyksXG4gICAgICAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgICB9XG4gICAgICAgICApO1xuXG4gICAgICAgICBpZiAoZXJyb3IgJiYgdGFzay5vbkVycm9yKSB7XG4gICAgICAgICAgICBsb2dnZXIuaW5mbyhgZXhpdENvZGU9JXMgaGFuZGxpbmcgd2l0aCBjdXN0b20gZXJyb3IgaGFuZGxlcmApO1xuXG4gICAgICAgICAgICByZXR1cm4gdGFzay5vbkVycm9yKFxuICAgICAgICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgICAobmV3U3RkT3V0KSA9PiB7XG4gICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhgY3VzdG9tIGVycm9yIGhhbmRsZXIgdHJlYXRlZCBhcyBzdWNjZXNzYCk7XG4gICAgICAgICAgICAgICAgICBsb2dnZXIoYGN1c3RvbSBlcnJvciByZXR1cm5lZCBhICVzYCwgb2JqZWN0VG9TdHJpbmcobmV3U3RkT3V0KSk7XG5cbiAgICAgICAgICAgICAgICAgIGRvbmUoXG4gICAgICAgICAgICAgICAgICAgICBuZXcgR2l0T3V0cHV0U3RyZWFtcyhcbiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkobmV3U3RkT3V0KSA/IEJ1ZmZlci5jb25jYXQobmV3U3RkT3V0KSA6IG5ld1N0ZE91dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIEJ1ZmZlci5jb25jYXQoc3RkRXJyKVxuICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICBmYWlsXG4gICAgICAgICAgICApO1xuICAgICAgICAgfVxuXG4gICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKFxuICAgICAgICAgICAgICAgYGhhbmRsaW5nIGFzIGVycm9yOiBleGl0Q29kZT0lcyBzdGRFcnI9JXMgcmVqZWN0aW9uPSVvYCxcbiAgICAgICAgICAgICAgIGV4aXRDb2RlLFxuICAgICAgICAgICAgICAgc3RkRXJyLmxlbmd0aCxcbiAgICAgICAgICAgICAgIHJlamVjdGlvblxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybiBmYWlsKGVycm9yKTtcbiAgICAgICAgIH1cblxuICAgICAgICAgbG9nZ2VyLmluZm8oYHJldHJpZXZpbmcgdGFzayBvdXRwdXQgY29tcGxldGVgKTtcbiAgICAgICAgIGRvbmUobmV3IEdpdE91dHB1dFN0cmVhbXMoQnVmZmVyLmNvbmNhdChzdGRPdXQpLCBCdWZmZXIuY29uY2F0KHN0ZEVycikpKTtcbiAgICAgIH0pO1xuICAgfVxuXG4gICBwcml2YXRlIGFzeW5jIGdpdFJlc3BvbnNlPFI+KFxuICAgICAgdGFzazogU2ltcGxlR2l0VGFzazxSPixcbiAgICAgIGNvbW1hbmQ6IHN0cmluZyxcbiAgICAgIGFyZ3M6IHN0cmluZ1tdLFxuICAgICAgb3V0cHV0SGFuZGxlcjogTWF5YmU8b3V0cHV0SGFuZGxlcj4sXG4gICAgICBsb2dnZXI6IE91dHB1dExvZ2dlclxuICAgKTogUHJvbWlzZTxHaXRFeGVjdXRvclJlc3VsdD4ge1xuICAgICAgY29uc3Qgb3V0cHV0TG9nZ2VyID0gbG9nZ2VyLnNpYmxpbmcoJ291dHB1dCcpO1xuICAgICAgY29uc3Qgc3Bhd25PcHRpb25zOiBTcGF3bk9wdGlvbnMgPSB0aGlzLl9wbHVnaW5zLmV4ZWMoXG4gICAgICAgICAnc3Bhd24ub3B0aW9ucycsXG4gICAgICAgICB7XG4gICAgICAgICAgICBjd2Q6IHRoaXMuY3dkLFxuICAgICAgICAgICAgZW52OiB0aGlzLmVudixcbiAgICAgICAgICAgIHdpbmRvd3NIaWRlOiB0cnVlLFxuICAgICAgICAgfSxcbiAgICAgICAgIHBsdWdpbkNvbnRleHQodGFzaywgdGFzay5jb21tYW5kcylcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoZG9uZSkgPT4ge1xuICAgICAgICAgY29uc3Qgc3RkT3V0OiBCdWZmZXJbXSA9IFtdO1xuICAgICAgICAgY29uc3Qgc3RkRXJyOiBCdWZmZXJbXSA9IFtdO1xuXG4gICAgICAgICBsb2dnZXIuaW5mbyhgJXMgJW9gLCBjb21tYW5kLCBhcmdzKTtcbiAgICAgICAgIGxvZ2dlcignJU8nLCBzcGF3bk9wdGlvbnMpO1xuXG4gICAgICAgICBsZXQgcmVqZWN0aW9uID0gdGhpcy5fYmVmb3JlU3Bhd24odGFzaywgYXJncyk7XG4gICAgICAgICBpZiAocmVqZWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9uZSh7XG4gICAgICAgICAgICAgICBzdGRPdXQsXG4gICAgICAgICAgICAgICBzdGRFcnIsXG4gICAgICAgICAgICAgICBleGl0Q29kZTogOTkwMSxcbiAgICAgICAgICAgICAgIHJlamVjdGlvbixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgfVxuXG4gICAgICAgICB0aGlzLl9wbHVnaW5zLmV4ZWMoJ3NwYXduLmJlZm9yZScsIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgLi4ucGx1Z2luQ29udGV4dCh0YXNrLCBhcmdzKSxcbiAgICAgICAgICAgIGtpbGwocmVhc29uKSB7XG4gICAgICAgICAgICAgICByZWplY3Rpb24gPSByZWFzb24gfHwgcmVqZWN0aW9uO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgIH0pO1xuXG4gICAgICAgICBjb25zdCBzcGF3bmVkID0gc3Bhd24oY29tbWFuZCwgYXJncywgc3Bhd25PcHRpb25zKTtcblxuICAgICAgICAgc3Bhd25lZC5zdGRvdXQhLm9uKFxuICAgICAgICAgICAgJ2RhdGEnLFxuICAgICAgICAgICAgb25EYXRhUmVjZWl2ZWQoc3RkT3V0LCAnc3RkT3V0JywgbG9nZ2VyLCBvdXRwdXRMb2dnZXIuc3RlcCgnc3RkT3V0JykpXG4gICAgICAgICApO1xuICAgICAgICAgc3Bhd25lZC5zdGRlcnIhLm9uKFxuICAgICAgICAgICAgJ2RhdGEnLFxuICAgICAgICAgICAgb25EYXRhUmVjZWl2ZWQoc3RkRXJyLCAnc3RkRXJyJywgbG9nZ2VyLCBvdXRwdXRMb2dnZXIuc3RlcCgnc3RkRXJyJykpXG4gICAgICAgICApO1xuXG4gICAgICAgICBzcGF3bmVkLm9uKCdlcnJvcicsIG9uRXJyb3JSZWNlaXZlZChzdGRFcnIsIGxvZ2dlcikpO1xuXG4gICAgICAgICBpZiAob3V0cHV0SGFuZGxlcikge1xuICAgICAgICAgICAgbG9nZ2VyKGBQYXNzaW5nIGNoaWxkIHByb2Nlc3Mgc3RkT3V0L3N0ZEVyciB0byBjdXN0b20gb3V0cHV0SGFuZGxlcmApO1xuICAgICAgICAgICAgb3V0cHV0SGFuZGxlcihjb21tYW5kLCBzcGF3bmVkLnN0ZG91dCEsIHNwYXduZWQuc3RkZXJyISwgWy4uLmFyZ3NdKTtcbiAgICAgICAgIH1cblxuICAgICAgICAgdGhpcy5fcGx1Z2lucy5leGVjKCdzcGF3bi5hZnRlcicsIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgLi4ucGx1Z2luQ29udGV4dCh0YXNrLCBhcmdzKSxcbiAgICAgICAgICAgIHNwYXduZWQsXG4gICAgICAgICAgICBjbG9zZShleGl0Q29kZTogbnVtYmVyLCByZWFzb24/OiBFcnJvcikge1xuICAgICAgICAgICAgICAgZG9uZSh7XG4gICAgICAgICAgICAgICAgICBzdGRPdXQsXG4gICAgICAgICAgICAgICAgICBzdGRFcnIsXG4gICAgICAgICAgICAgICAgICBleGl0Q29kZSxcbiAgICAgICAgICAgICAgICAgIHJlamVjdGlvbjogcmVqZWN0aW9uIHx8IHJlYXNvbixcbiAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGtpbGwocmVhc29uOiBFcnJvcikge1xuICAgICAgICAgICAgICAgaWYgKHNwYXduZWQua2lsbGVkKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgIHJlamVjdGlvbiA9IHJlYXNvbjtcbiAgICAgICAgICAgICAgIHNwYXduZWQua2lsbCgnU0lHSU5UJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgIH1cblxuICAgcHJpdmF0ZSBfYmVmb3JlU3Bhd248Uj4odGFzazogU2ltcGxlR2l0VGFzazxSPiwgYXJnczogc3RyaW5nW10pIHtcbiAgICAgIGxldCByZWplY3Rpb246IE1heWJlPEVycm9yPjtcbiAgICAgIHRoaXMuX3BsdWdpbnMuZXhlYygnc3Bhd24uYmVmb3JlJywgdW5kZWZpbmVkLCB7XG4gICAgICAgICAuLi5wbHVnaW5Db250ZXh0KHRhc2ssIGFyZ3MpLFxuICAgICAgICAga2lsbChyZWFzb24pIHtcbiAgICAgICAgICAgIHJlamVjdGlvbiA9IHJlYXNvbiB8fCByZWplY3Rpb247XG4gICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiByZWplY3Rpb247XG4gICB9XG59XG5cbmZ1bmN0aW9uIHBsdWdpbkNvbnRleHQ8Uj4odGFzazogU2ltcGxlR2l0VGFzazxSPiwgY29tbWFuZHM6IHN0cmluZ1tdKSB7XG4gICByZXR1cm4ge1xuICAgICAgbWV0aG9kOiBmaXJzdCh0YXNrLmNvbW1hbmRzKSB8fCAnJyxcbiAgICAgIGNvbW1hbmRzLFxuICAgfTtcbn1cblxuZnVuY3Rpb24gb25FcnJvclJlY2VpdmVkKHRhcmdldDogQnVmZmVyW10sIGxvZ2dlcjogT3V0cHV0TG9nZ2VyKSB7XG4gICByZXR1cm4gKGVycjogRXJyb3IpID0+IHtcbiAgICAgIGxvZ2dlcihgW0VSUk9SXSBjaGlsZCBwcm9jZXNzIGV4Y2VwdGlvbiAlb2AsIGVycik7XG4gICAgICB0YXJnZXQucHVzaChCdWZmZXIuZnJvbShTdHJpbmcoZXJyLnN0YWNrKSwgJ2FzY2lpJykpO1xuICAgfTtcbn1cblxuZnVuY3Rpb24gb25EYXRhUmVjZWl2ZWQoXG4gICB0YXJnZXQ6IEJ1ZmZlcltdLFxuICAgbmFtZTogc3RyaW5nLFxuICAgbG9nZ2VyOiBPdXRwdXRMb2dnZXIsXG4gICBvdXRwdXQ6IE91dHB1dExvZ2dlclxuKSB7XG4gICByZXR1cm4gKGJ1ZmZlcjogQnVmZmVyKSA9PiB7XG4gICAgICBsb2dnZXIoYCVzIHJlY2VpdmVkICVMIGJ5dGVzYCwgbmFtZSwgYnVmZmVyKTtcbiAgICAgIG91dHB1dChgJUJgLCBidWZmZXIpO1xuICAgICAgdGFyZ2V0LnB1c2goYnVmZmVyKTtcbiAgIH07XG59XG4iLCAiaW1wb3J0IHR5cGUgeyBQbHVnaW5TdG9yZSB9IGZyb20gJy4uL3BsdWdpbnMnO1xuaW1wb3J0IHR5cGUgeyBHaXRFeGVjdXRvckVudiwgb3V0cHV0SGFuZGxlciwgU2ltcGxlR2l0RXhlY3V0b3IsIFNpbXBsZUdpdFRhc2sgfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB7IEdpdEV4ZWN1dG9yQ2hhaW4gfSBmcm9tICcuL2dpdC1leGVjdXRvci1jaGFpbic7XG5pbXBvcnQgeyBTY2hlZHVsZXIgfSBmcm9tICcuL3NjaGVkdWxlcic7XG5cbmV4cG9ydCBjbGFzcyBHaXRFeGVjdXRvciBpbXBsZW1lbnRzIFNpbXBsZUdpdEV4ZWN1dG9yIHtcbiAgIHByaXZhdGUgX2NoYWluID0gbmV3IEdpdEV4ZWN1dG9yQ2hhaW4odGhpcywgdGhpcy5fc2NoZWR1bGVyLCB0aGlzLl9wbHVnaW5zKTtcblxuICAgcHVibGljIGVudjogR2l0RXhlY3V0b3JFbnY7XG4gICBwdWJsaWMgb3V0cHV0SGFuZGxlcj86IG91dHB1dEhhbmRsZXI7XG5cbiAgIGNvbnN0cnVjdG9yKFxuICAgICAgcHVibGljIGN3ZDogc3RyaW5nLFxuICAgICAgcHJpdmF0ZSBfc2NoZWR1bGVyOiBTY2hlZHVsZXIsXG4gICAgICBwcml2YXRlIF9wbHVnaW5zOiBQbHVnaW5TdG9yZVxuICAgKSB7fVxuXG4gICBjaGFpbigpOiBTaW1wbGVHaXRFeGVjdXRvciB7XG4gICAgICByZXR1cm4gbmV3IEdpdEV4ZWN1dG9yQ2hhaW4odGhpcywgdGhpcy5fc2NoZWR1bGVyLCB0aGlzLl9wbHVnaW5zKTtcbiAgIH1cblxuICAgcHVzaDxSPih0YXNrOiBTaW1wbGVHaXRUYXNrPFI+KTogUHJvbWlzZTxSPiB7XG4gICAgICByZXR1cm4gdGhpcy5fY2hhaW4ucHVzaCh0YXNrKTtcbiAgIH1cbn1cbiIsICJpbXBvcnQgeyBHaXRFcnJvciB9IGZyb20gJy4vZXJyb3JzL2dpdC1lcnJvcic7XG5pbXBvcnQgeyBHaXRSZXNwb25zZUVycm9yIH0gZnJvbSAnLi9lcnJvcnMvZ2l0LXJlc3BvbnNlLWVycm9yJztcbmltcG9ydCB7IFNpbXBsZUdpdFRhc2ssIFNpbXBsZUdpdFRhc2tDYWxsYmFjayB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgTk9PUCB9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gdGFza0NhbGxiYWNrPFI+KFxuICAgdGFzazogU2ltcGxlR2l0VGFzazxSPixcbiAgIHJlc3BvbnNlOiBQcm9taXNlPFI+LFxuICAgY2FsbGJhY2s6IFNpbXBsZUdpdFRhc2tDYWxsYmFjazxSPiA9IE5PT1Bcbikge1xuICAgY29uc3Qgb25TdWNjZXNzID0gKGRhdGE6IFIpID0+IHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgfTtcblxuICAgY29uc3Qgb25FcnJvciA9IChlcnI6IEdpdEVycm9yIHwgR2l0UmVzcG9uc2VFcnJvcikgPT4ge1xuICAgICAgaWYgKGVycj8udGFzayA9PT0gdGFzaykge1xuICAgICAgICAgY2FsbGJhY2soXG4gICAgICAgICAgICBlcnIgaW5zdGFuY2VvZiBHaXRSZXNwb25zZUVycm9yID8gYWRkRGVwcmVjYXRpb25Ob3RpY2VUb0Vycm9yKGVycikgOiBlcnIsXG4gICAgICAgICAgICB1bmRlZmluZWQgYXMgYW55XG4gICAgICAgICApO1xuICAgICAgfVxuICAgfTtcblxuICAgcmVzcG9uc2UudGhlbihvblN1Y2Nlc3MsIG9uRXJyb3IpO1xufVxuXG5mdW5jdGlvbiBhZGREZXByZWNhdGlvbk5vdGljZVRvRXJyb3IoZXJyOiBHaXRSZXNwb25zZUVycm9yKSB7XG4gICBsZXQgbG9nID0gKG5hbWU6IHN0cmluZykgPT4ge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgYHNpbXBsZS1naXQgZGVwcmVjYXRpb24gbm90aWNlOiBhY2Nlc3NpbmcgR2l0UmVzcG9uc2VFcnJvci4ke25hbWV9IHNob3VsZCBiZSBHaXRSZXNwb25zZUVycm9yLmdpdC4ke25hbWV9LCB0aGlzIHdpbGwgbm8gbG9uZ2VyIGJlIGF2YWlsYWJsZSBpbiB2ZXJzaW9uIDNgXG4gICAgICApO1xuICAgICAgbG9nID0gTk9PUDtcbiAgIH07XG5cbiAgIHJldHVybiBPYmplY3QuY3JlYXRlKGVyciwgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZXJyLmdpdCkucmVkdWNlKGRlc2NyaXB0b3JSZWR1Y2VyLCB7fSkpO1xuXG4gICBmdW5jdGlvbiBkZXNjcmlwdG9yUmVkdWNlcihhbGw6IFByb3BlcnR5RGVzY3JpcHRvck1hcCwgbmFtZTogc3RyaW5nKTogdHlwZW9mIGFsbCB7XG4gICAgICBpZiAobmFtZSBpbiBlcnIpIHtcbiAgICAgICAgIHJldHVybiBhbGw7XG4gICAgICB9XG5cbiAgICAgIGFsbFtuYW1lXSA9IHtcbiAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIGxvZyhuYW1lKTtcbiAgICAgICAgICAgIHJldHVybiBlcnIuZ2l0W25hbWVdO1xuICAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBhbGw7XG4gICB9XG59XG4iLCAiaW1wb3J0IHsgZm9sZGVyRXhpc3RzIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgU2ltcGxlR2l0RXhlY3V0b3IgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBhZGhvY0V4ZWNUYXNrIH0gZnJvbSAnLi90YXNrJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZVdvcmtpbmdEaXJlY3RvcnlUYXNrKGRpcmVjdG9yeTogc3RyaW5nLCByb290PzogU2ltcGxlR2l0RXhlY3V0b3IpIHtcbiAgIHJldHVybiBhZGhvY0V4ZWNUYXNrKChpbnN0YW5jZTogU2ltcGxlR2l0RXhlY3V0b3IpID0+IHtcbiAgICAgIGlmICghZm9sZGVyRXhpc3RzKGRpcmVjdG9yeSkpIHtcbiAgICAgICAgIHRocm93IG5ldyBFcnJvcihgR2l0LmN3ZDogY2Fubm90IGNoYW5nZSB0byBub24tZGlyZWN0b3J5IFwiJHtkaXJlY3Rvcnl9XCJgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICgocm9vdCB8fCBpbnN0YW5jZSkuY3dkID0gZGlyZWN0b3J5KTtcbiAgIH0pO1xufVxuIiwgImltcG9ydCB0eXBlIHsgU2ltcGxlR2l0IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgdHlwZSB7IFNpbXBsZUdpdEFwaSB9IGZyb20gJy4uL3NpbXBsZS1naXQtYXBpJztcbmltcG9ydCB7IGdldFRyYWlsaW5nT3B0aW9ucywgcmVtb3ZlLCB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrIH0gZnJvbSAnLi90YXNrJztcblxuZnVuY3Rpb24gY2hlY2tvdXRUYXNrKGFyZ3M6IHN0cmluZ1tdKSB7XG4gICBjb25zdCBjb21tYW5kcyA9IFsnY2hlY2tvdXQnLCAuLi5hcmdzXTtcbiAgIGlmIChjb21tYW5kc1sxXSA9PT0gJy1iJyAmJiBjb21tYW5kcy5pbmNsdWRlcygnLUInKSkge1xuICAgICAgY29tbWFuZHNbMV0gPSByZW1vdmUoY29tbWFuZHMsICctQicpO1xuICAgfVxuXG4gICByZXR1cm4gc3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayhjb21tYW5kcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpOiBQaWNrPFNpbXBsZUdpdCwgJ2NoZWNrb3V0JyB8ICdjaGVja291dEJyYW5jaCcgfCAnY2hlY2tvdXRMb2NhbEJyYW5jaCc+IHtcbiAgIHJldHVybiB7XG4gICAgICBjaGVja291dCh0aGlzOiBTaW1wbGVHaXRBcGkpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgICAgICAgY2hlY2tvdXRUYXNrKGdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMsIDEpKSxcbiAgICAgICAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICAgICAgICApO1xuICAgICAgfSxcblxuICAgICAgY2hlY2tvdXRCcmFuY2godGhpczogU2ltcGxlR2l0QXBpLCBicmFuY2hOYW1lLCBzdGFydFBvaW50KSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcnVuVGFzayhcbiAgICAgICAgICAgIGNoZWNrb3V0VGFzayhbJy1iJywgYnJhbmNoTmFtZSwgc3RhcnRQb2ludCwgLi4uZ2V0VHJhaWxpbmdPcHRpb25zKGFyZ3VtZW50cyldKSxcbiAgICAgICAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICAgICAgICApO1xuICAgICAgfSxcblxuICAgICAgY2hlY2tvdXRMb2NhbEJyYW5jaCh0aGlzOiBTaW1wbGVHaXRBcGksIGJyYW5jaE5hbWUpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgICAgICAgY2hlY2tvdXRUYXNrKFsnLWInLCBicmFuY2hOYW1lLCAuLi5nZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzKV0pLFxuICAgICAgICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICAgICAgICk7XG4gICAgICB9LFxuICAgfTtcbn1cbiIsICJpbXBvcnQgdHlwZSB7IFNpbXBsZUdpdEFwaSB9IGZyb20gJy4uL3NpbXBsZS1naXQtYXBpJztcbmltcG9ydCB0eXBlIHsgU2ltcGxlR2l0IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBhc0NhbWVsQ2FzZSwgYXNOdW1iZXIsIExpbmVQYXJzZXIsIHBhcnNlU3RyaW5nUmVzcG9uc2UgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ291bnRPYmplY3RzUmVzdWx0IHtcbiAgIGNvdW50OiBudW1iZXI7XG4gICBzaXplOiBudW1iZXI7XG4gICBpblBhY2s6IG51bWJlcjtcbiAgIHBhY2tzOiBudW1iZXI7XG4gICBzaXplUGFjazogbnVtYmVyO1xuICAgcHJ1bmVQYWNrYWJsZTogbnVtYmVyO1xuICAgZ2FyYmFnZTogbnVtYmVyO1xuICAgc2l6ZUdhcmJhZ2U6IG51bWJlcjtcbn1cblxuZnVuY3Rpb24gY291bnRPYmplY3RzUmVzcG9uc2UoKTogQ291bnRPYmplY3RzUmVzdWx0IHtcbiAgIHJldHVybiB7XG4gICAgICBjb3VudDogMCxcbiAgICAgIGdhcmJhZ2U6IDAsXG4gICAgICBpblBhY2s6IDAsXG4gICAgICBwYWNrczogMCxcbiAgICAgIHBydW5lUGFja2FibGU6IDAsXG4gICAgICBzaXplOiAwLFxuICAgICAgc2l6ZUdhcmJhZ2U6IDAsXG4gICAgICBzaXplUGFjazogMCxcbiAgIH07XG59XG5cbmNvbnN0IHBhcnNlcjogTGluZVBhcnNlcjxDb3VudE9iamVjdHNSZXN1bHQ+ID0gbmV3IExpbmVQYXJzZXIoXG4gICAvKFthLXotXSspOiAoXFxkKykkLyxcbiAgIChyZXN1bHQsIFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgY29uc3QgcHJvcGVydHkgPSBhc0NhbWVsQ2FzZShrZXkpO1xuICAgICAgaWYgKHJlc3VsdC5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICAgICAgIHJlc3VsdFtwcm9wZXJ0eSBhcyBrZXlvZiB0eXBlb2YgcmVzdWx0XSA9IGFzTnVtYmVyKHZhbHVlKTtcbiAgICAgIH1cbiAgIH1cbik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpOiBQaWNrPFNpbXBsZUdpdCwgJ2NvdW50T2JqZWN0cyc+IHtcbiAgIHJldHVybiB7XG4gICAgICBjb3VudE9iamVjdHModGhpczogU2ltcGxlR2l0QXBpKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcnVuVGFzayh7XG4gICAgICAgICAgICBjb21tYW5kczogWydjb3VudC1vYmplY3RzJywgJy0tdmVyYm9zZSddLFxuICAgICAgICAgICAgZm9ybWF0OiAndXRmLTgnLFxuICAgICAgICAgICAgcGFyc2VyKHN0ZE91dDogc3RyaW5nKSB7XG4gICAgICAgICAgICAgICByZXR1cm4gcGFyc2VTdHJpbmdSZXNwb25zZShjb3VudE9iamVjdHNSZXNwb25zZSgpLCBbcGFyc2VyXSwgc3RkT3V0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICB9KTtcbiAgICAgIH0sXG4gICB9O1xufVxuIiwgImltcG9ydCB7IENvbW1pdFJlc3VsdCB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuaW1wb3J0IHsgTGluZVBhcnNlciwgcGFyc2VTdHJpbmdSZXNwb25zZSB9IGZyb20gJy4uL3V0aWxzJztcblxuY29uc3QgcGFyc2VyczogTGluZVBhcnNlcjxDb21taXRSZXN1bHQ+W10gPSBbXG4gICBuZXcgTGluZVBhcnNlcigvXlxcWyhbXlxcc10rKSggXFwoW14pXStcXCkpPyAoW15cXF1dKykvLCAocmVzdWx0LCBbYnJhbmNoLCByb290LCBjb21taXRdKSA9PiB7XG4gICAgICByZXN1bHQuYnJhbmNoID0gYnJhbmNoO1xuICAgICAgcmVzdWx0LmNvbW1pdCA9IGNvbW1pdDtcbiAgICAgIHJlc3VsdC5yb290ID0gISFyb290O1xuICAgfSksXG4gICBuZXcgTGluZVBhcnNlcigvXFxzKkF1dGhvcjpcXHMoLispL2ksIChyZXN1bHQsIFthdXRob3JdKSA9PiB7XG4gICAgICBjb25zdCBwYXJ0cyA9IGF1dGhvci5zcGxpdCgnPCcpO1xuICAgICAgY29uc3QgZW1haWwgPSBwYXJ0cy5wb3AoKTtcblxuICAgICAgaWYgKCFlbWFpbCB8fCAhZW1haWwuaW5jbHVkZXMoJ0AnKSkge1xuICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQuYXV0aG9yID0ge1xuICAgICAgICAgZW1haWw6IGVtYWlsLnN1YnN0cigwLCBlbWFpbC5sZW5ndGggLSAxKSxcbiAgICAgICAgIG5hbWU6IHBhcnRzLmpvaW4oJzwnKS50cmltKCksXG4gICAgICB9O1xuICAgfSksXG4gICBuZXcgTGluZVBhcnNlcihcbiAgICAgIC8oXFxkKylbXixdKig/OixcXHMqKFxcZCspW14sXSopKD86LFxccyooXFxkKykpL2csXG4gICAgICAocmVzdWx0LCBbY2hhbmdlcywgaW5zZXJ0aW9ucywgZGVsZXRpb25zXSkgPT4ge1xuICAgICAgICAgcmVzdWx0LnN1bW1hcnkuY2hhbmdlcyA9IHBhcnNlSW50KGNoYW5nZXMsIDEwKSB8fCAwO1xuICAgICAgICAgcmVzdWx0LnN1bW1hcnkuaW5zZXJ0aW9ucyA9IHBhcnNlSW50KGluc2VydGlvbnMsIDEwKSB8fCAwO1xuICAgICAgICAgcmVzdWx0LnN1bW1hcnkuZGVsZXRpb25zID0gcGFyc2VJbnQoZGVsZXRpb25zLCAxMCkgfHwgMDtcbiAgICAgIH1cbiAgICksXG4gICBuZXcgTGluZVBhcnNlcihcbiAgICAgIC9eKFxcZCspW14sXSooPzosXFxzKihcXGQrKVteKF0rXFwoKFsrLV0pKT8vLFxuICAgICAgKHJlc3VsdCwgW2NoYW5nZXMsIGxpbmVzLCBkaXJlY3Rpb25dKSA9PiB7XG4gICAgICAgICByZXN1bHQuc3VtbWFyeS5jaGFuZ2VzID0gcGFyc2VJbnQoY2hhbmdlcywgMTApIHx8IDA7XG4gICAgICAgICBjb25zdCBjb3VudCA9IHBhcnNlSW50KGxpbmVzLCAxMCkgfHwgMDtcbiAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICctJykge1xuICAgICAgICAgICAgcmVzdWx0LnN1bW1hcnkuZGVsZXRpb25zID0gY291bnQ7XG4gICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJysnKSB7XG4gICAgICAgICAgICByZXN1bHQuc3VtbWFyeS5pbnNlcnRpb25zID0gY291bnQ7XG4gICAgICAgICB9XG4gICAgICB9XG4gICApLFxuXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ29tbWl0UmVzdWx0KHN0ZE91dDogc3RyaW5nKTogQ29tbWl0UmVzdWx0IHtcbiAgIGNvbnN0IHJlc3VsdDogQ29tbWl0UmVzdWx0ID0ge1xuICAgICAgYXV0aG9yOiBudWxsLFxuICAgICAgYnJhbmNoOiAnJyxcbiAgICAgIGNvbW1pdDogJycsXG4gICAgICByb290OiBmYWxzZSxcbiAgICAgIHN1bW1hcnk6IHtcbiAgICAgICAgIGNoYW5nZXM6IDAsXG4gICAgICAgICBpbnNlcnRpb25zOiAwLFxuICAgICAgICAgZGVsZXRpb25zOiAwLFxuICAgICAgfSxcbiAgIH07XG4gICByZXR1cm4gcGFyc2VTdHJpbmdSZXNwb25zZShyZXN1bHQsIHBhcnNlcnMsIHN0ZE91dCk7XG59XG4iLCAiaW1wb3J0IHR5cGUgeyBDb21taXRSZXN1bHQsIFNpbXBsZUdpdCB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuaW1wb3J0IHR5cGUgeyBTaW1wbGVHaXRBcGkgfSBmcm9tICcuLi9zaW1wbGUtZ2l0LWFwaSc7XG5pbXBvcnQgdHlwZSB7IFN0cmluZ1Rhc2sgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBwYXJzZUNvbW1pdFJlc3VsdCB9IGZyb20gJy4uL3BhcnNlcnMvcGFyc2UtY29tbWl0JztcbmltcG9ydCB7XG4gICBhc0FycmF5LFxuICAgZmlsdGVyQXJyYXksXG4gICBmaWx0ZXJTdHJpbmdPclN0cmluZ0FycmF5LFxuICAgZmlsdGVyVHlwZSxcbiAgIGdldFRyYWlsaW5nT3B0aW9ucyxcbiAgIHByZWZpeGVkQXJyYXksXG4gICB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQsXG59IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IGNvbmZpZ3VyYXRpb25FcnJvclRhc2sgfSBmcm9tICcuL3Rhc2snO1xuXG5leHBvcnQgZnVuY3Rpb24gY29tbWl0VGFzayhcbiAgIG1lc3NhZ2U6IHN0cmluZ1tdLFxuICAgZmlsZXM6IHN0cmluZ1tdLFxuICAgY3VzdG9tQXJnczogc3RyaW5nW11cbik6IFN0cmluZ1Rhc2s8Q29tbWl0UmVzdWx0PiB7XG4gICBjb25zdCBjb21tYW5kczogc3RyaW5nW10gPSBbXG4gICAgICAnLWMnLFxuICAgICAgJ2NvcmUuYWJicmV2PTQwJyxcbiAgICAgICdjb21taXQnLFxuICAgICAgLi4ucHJlZml4ZWRBcnJheShtZXNzYWdlLCAnLW0nKSxcbiAgICAgIC4uLmZpbGVzLFxuICAgICAgLi4uY3VzdG9tQXJncyxcbiAgIF07XG5cbiAgIHJldHVybiB7XG4gICAgICBjb21tYW5kcyxcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIHBhcnNlcjogcGFyc2VDb21taXRSZXN1bHQsXG4gICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKTogUGljazxTaW1wbGVHaXQsICdjb21taXQnPiB7XG4gICByZXR1cm4ge1xuICAgICAgY29tbWl0KHRoaXM6IFNpbXBsZUdpdEFwaSwgbWVzc2FnZTogc3RyaW5nIHwgc3RyaW5nW10sIC4uLnJlc3Q6IHVua25vd25bXSkge1xuICAgICAgICAgY29uc3QgbmV4dCA9IHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpO1xuICAgICAgICAgY29uc3QgdGFzayA9XG4gICAgICAgICAgICByZWplY3REZXByZWNhdGVkU2lnbmF0dXJlcyhtZXNzYWdlKSB8fFxuICAgICAgICAgICAgY29tbWl0VGFzayhcbiAgICAgICAgICAgICAgIGFzQXJyYXkobWVzc2FnZSksXG4gICAgICAgICAgICAgICBhc0FycmF5KGZpbHRlclR5cGUocmVzdFswXSwgZmlsdGVyU3RyaW5nT3JTdHJpbmdBcnJheSwgW10pKSxcbiAgICAgICAgICAgICAgIFsuLi5maWx0ZXJUeXBlKHJlc3RbMV0sIGZpbHRlckFycmF5LCBbXSksIC4uLmdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMsIDAsIHRydWUpXVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2sodGFzaywgbmV4dCk7XG4gICAgICB9LFxuICAgfTtcblxuICAgZnVuY3Rpb24gcmVqZWN0RGVwcmVjYXRlZFNpZ25hdHVyZXMobWVzc2FnZT86IHVua25vd24pIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgICAhZmlsdGVyU3RyaW5nT3JTdHJpbmdBcnJheShtZXNzYWdlKSAmJlxuICAgICAgICAgY29uZmlndXJhdGlvbkVycm9yVGFzayhcbiAgICAgICAgICAgIGBnaXQuY29tbWl0OiByZXF1aXJlcyB0aGUgY29tbWl0IG1lc3NhZ2UgdG8gYmUgc3VwcGxpZWQgYXMgYSBzdHJpbmcvc3RyaW5nW11gXG4gICAgICAgICApXG4gICAgICApO1xuICAgfVxufVxuIiwgImltcG9ydCB7IFJlc3BvbnNlLCBTaW1wbGVHaXQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IFNpbXBsZUdpdEFwaSB9IGZyb20gJy4uL3NpbXBsZS1naXQtYXBpJztcbmltcG9ydCB7IHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IHN0cmFpZ2h0VGhyb3VnaFN0cmluZ1Rhc2sgfSBmcm9tICcuL3Rhc2snO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKTogUGljazxTaW1wbGVHaXQsICdmaXJzdENvbW1pdCc+IHtcbiAgIHJldHVybiB7XG4gICAgICBmaXJzdENvbW1pdCh0aGlzOiBTaW1wbGVHaXRBcGkpOiBSZXNwb25zZTxzdHJpbmc+IHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgICAgICAgc3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayhbJ3Jldi1saXN0JywgJy0tbWF4LXBhcmVudHM9MCcsICdIRUFEJ10sIHRydWUpLFxuICAgICAgICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICAgICAgICk7XG4gICAgICB9LFxuICAgfTtcbn1cbiIsICJpbXBvcnQgeyBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrIH0gZnJvbSAnLi90YXNrJztcbmltcG9ydCB7IFN0cmluZ1Rhc2sgfSBmcm9tICcuLi90eXBlcyc7XG5cbi8qKlxuICogVGFzayB1c2VkIGJ5IGBnaXQuaGFzaE9iamVjdGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc2hPYmplY3RUYXNrKGZpbGVQYXRoOiBzdHJpbmcsIHdyaXRlOiBib29sZWFuKTogU3RyaW5nVGFzazxzdHJpbmc+IHtcbiAgIGNvbnN0IGNvbW1hbmRzID0gWydoYXNoLW9iamVjdCcsIGZpbGVQYXRoXTtcbiAgIGlmICh3cml0ZSkge1xuICAgICAgY29tbWFuZHMucHVzaCgnLXcnKTtcbiAgIH1cblxuICAgcmV0dXJuIHN0cmFpZ2h0VGhyb3VnaFN0cmluZ1Rhc2soY29tbWFuZHMsIHRydWUpO1xufVxuIiwgImltcG9ydCB7IEluaXRSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcblxuZXhwb3J0IGNsYXNzIEluaXRTdW1tYXJ5IGltcGxlbWVudHMgSW5pdFJlc3VsdCB7XG4gICBjb25zdHJ1Y3RvcihcbiAgICAgIHB1YmxpYyByZWFkb25seSBiYXJlOiBib29sZWFuLFxuICAgICAgcHVibGljIHJlYWRvbmx5IHBhdGg6IHN0cmluZyxcbiAgICAgIHB1YmxpYyByZWFkb25seSBleGlzdGluZzogYm9vbGVhbixcbiAgICAgIHB1YmxpYyByZWFkb25seSBnaXREaXI6IHN0cmluZ1xuICAgKSB7fVxufVxuXG5jb25zdCBpbml0UmVzcG9uc2VSZWdleCA9IC9eSW5pdC4rIHJlcG9zaXRvcnkgaW4gKC4rKSQvO1xuY29uc3QgcmVJbml0UmVzcG9uc2VSZWdleCA9IC9eUmVpbi4rIGluICguKykkLztcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSW5pdChiYXJlOiBib29sZWFuLCBwYXRoOiBzdHJpbmcsIHRleHQ6IHN0cmluZykge1xuICAgY29uc3QgcmVzcG9uc2UgPSBTdHJpbmcodGV4dCkudHJpbSgpO1xuICAgbGV0IHJlc3VsdDtcblxuICAgaWYgKChyZXN1bHQgPSBpbml0UmVzcG9uc2VSZWdleC5leGVjKHJlc3BvbnNlKSkpIHtcbiAgICAgIHJldHVybiBuZXcgSW5pdFN1bW1hcnkoYmFyZSwgcGF0aCwgZmFsc2UsIHJlc3VsdFsxXSk7XG4gICB9XG5cbiAgIGlmICgocmVzdWx0ID0gcmVJbml0UmVzcG9uc2VSZWdleC5leGVjKHJlc3BvbnNlKSkpIHtcbiAgICAgIHJldHVybiBuZXcgSW5pdFN1bW1hcnkoYmFyZSwgcGF0aCwgdHJ1ZSwgcmVzdWx0WzFdKTtcbiAgIH1cblxuICAgbGV0IGdpdERpciA9ICcnO1xuICAgY29uc3QgdG9rZW5zID0gcmVzcG9uc2Uuc3BsaXQoJyAnKTtcbiAgIHdoaWxlICh0b2tlbnMubGVuZ3RoKSB7XG4gICAgICBjb25zdCB0b2tlbiA9IHRva2Vucy5zaGlmdCgpO1xuICAgICAgaWYgKHRva2VuID09PSAnaW4nKSB7XG4gICAgICAgICBnaXREaXIgPSB0b2tlbnMuam9pbignICcpO1xuICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICB9XG5cbiAgIHJldHVybiBuZXcgSW5pdFN1bW1hcnkoYmFyZSwgcGF0aCwgL15yZS9pLnRlc3QocmVzcG9uc2UpLCBnaXREaXIpO1xufVxuIiwgImltcG9ydCB7IEluaXRSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IHBhcnNlSW5pdCB9IGZyb20gJy4uL3Jlc3BvbnNlcy9Jbml0U3VtbWFyeSc7XG5pbXBvcnQgeyBTdHJpbmdUYXNrIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5jb25zdCBiYXJlQ29tbWFuZCA9ICctLWJhcmUnO1xuXG5mdW5jdGlvbiBoYXNCYXJlQ29tbWFuZChjb21tYW5kOiBzdHJpbmdbXSkge1xuICAgcmV0dXJuIGNvbW1hbmQuaW5jbHVkZXMoYmFyZUNvbW1hbmQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdFRhc2soYmFyZSA9IGZhbHNlLCBwYXRoOiBzdHJpbmcsIGN1c3RvbUFyZ3M6IHN0cmluZ1tdKTogU3RyaW5nVGFzazxJbml0UmVzdWx0PiB7XG4gICBjb25zdCBjb21tYW5kcyA9IFsnaW5pdCcsIC4uLmN1c3RvbUFyZ3NdO1xuICAgaWYgKGJhcmUgJiYgIWhhc0JhcmVDb21tYW5kKGNvbW1hbmRzKSkge1xuICAgICAgY29tbWFuZHMuc3BsaWNlKDEsIDAsIGJhcmVDb21tYW5kKTtcbiAgIH1cblxuICAgcmV0dXJuIHtcbiAgICAgIGNvbW1hbmRzLFxuICAgICAgZm9ybWF0OiAndXRmLTgnLFxuICAgICAgcGFyc2VyKHRleHQ6IHN0cmluZyk6IEluaXRSZXN1bHQge1xuICAgICAgICAgcmV0dXJuIHBhcnNlSW5pdChjb21tYW5kcy5pbmNsdWRlcygnLS1iYXJlJyksIHBhdGgsIHRleHQpO1xuICAgICAgfSxcbiAgIH07XG59XG4iLCAiZXhwb3J0IGVudW0gTG9nRm9ybWF0IHtcbiAgIE5PTkUgPSAnJyxcbiAgIFNUQVQgPSAnLS1zdGF0JyxcbiAgIE5VTV9TVEFUID0gJy0tbnVtc3RhdCcsXG4gICBOQU1FX09OTFkgPSAnLS1uYW1lLW9ubHknLFxuICAgTkFNRV9TVEFUVVMgPSAnLS1uYW1lLXN0YXR1cycsXG59XG5cbmNvbnN0IGxvZ0Zvcm1hdFJlZ2V4ID0gL14tLShzdGF0fG51bXN0YXR8bmFtZS1vbmx5fG5hbWUtc3RhdHVzKSg9fCQpLztcblxuZXhwb3J0IGZ1bmN0aW9uIGxvZ0Zvcm1hdEZyb21Db21tYW5kKGN1c3RvbUFyZ3M6IHN0cmluZ1tdKSB7XG4gICBmb3IgKGxldCBpID0gMDsgaSA8IGN1c3RvbUFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGZvcm1hdCA9IGxvZ0Zvcm1hdFJlZ2V4LmV4ZWMoY3VzdG9tQXJnc1tpXSk7XG4gICAgICBpZiAoZm9ybWF0KSB7XG4gICAgICAgICByZXR1cm4gYC0tJHtmb3JtYXRbMV19YCBhcyBMb2dGb3JtYXQ7XG4gICAgICB9XG4gICB9XG5cbiAgIHJldHVybiBMb2dGb3JtYXQuTk9ORTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTG9nRm9ybWF0KGN1c3RvbUFyZzogc3RyaW5nIHwgdW5rbm93bikge1xuICAgcmV0dXJuIGxvZ0Zvcm1hdFJlZ2V4LnRlc3QoY3VzdG9tQXJnIGFzIHN0cmluZyk7XG59XG4iLCAiaW1wb3J0IHsgRGlmZlJlc3VsdCwgRGlmZlJlc3VsdEJpbmFyeUZpbGUsIERpZmZSZXN1bHRUZXh0RmlsZSB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuXG4vKioqXG4gKiBUaGUgRGlmZlN1bW1hcnkgaXMgcmV0dXJuZWQgYXMgYSByZXNwb25zZSB0byBnZXR0aW5nIGBnaXQoKS5zdGF0dXMoKWBcbiAqL1xuZXhwb3J0IGNsYXNzIERpZmZTdW1tYXJ5IGltcGxlbWVudHMgRGlmZlJlc3VsdCB7XG4gICBjaGFuZ2VkID0gMDtcbiAgIGRlbGV0aW9ucyA9IDA7XG4gICBpbnNlcnRpb25zID0gMDtcblxuICAgZmlsZXM6IEFycmF5PERpZmZSZXN1bHRUZXh0RmlsZSB8IERpZmZSZXN1bHRCaW5hcnlGaWxlPiA9IFtdO1xufVxuIiwgImltcG9ydCB7IERpZmZSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IExvZ0Zvcm1hdCB9IGZyb20gJy4uL2FyZ3MvbG9nLWZvcm1hdCc7XG5pbXBvcnQgeyBEaWZmU3VtbWFyeSB9IGZyb20gJy4uL3Jlc3BvbnNlcy9EaWZmU3VtbWFyeSc7XG5pbXBvcnQgeyBpc0RpZmZOYW1lU3RhdHVzIH0gZnJvbSAnLi4vdGFza3MvZGlmZi1uYW1lLXN0YXR1cyc7XG5pbXBvcnQgeyBhc051bWJlciwgTGluZVBhcnNlciwgb3JWb2lkLCBwYXJzZVN0cmluZ1Jlc3BvbnNlIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5jb25zdCBzdGF0UGFyc2VyID0gW1xuICAgbmV3IExpbmVQYXJzZXI8RGlmZlJlc3VsdD4oXG4gICAgICAvXiguKylcXHMrXFx8XFxzKyhcXGQrKShcXHMrWytcXC1dKyk/JC8sXG4gICAgICAocmVzdWx0LCBbZmlsZSwgY2hhbmdlcywgYWx0ZXJhdGlvbnMgPSAnJ10pID0+IHtcbiAgICAgICAgIHJlc3VsdC5maWxlcy5wdXNoKHtcbiAgICAgICAgICAgIGZpbGU6IGZpbGUudHJpbSgpLFxuICAgICAgICAgICAgY2hhbmdlczogYXNOdW1iZXIoY2hhbmdlcyksXG4gICAgICAgICAgICBpbnNlcnRpb25zOiBhbHRlcmF0aW9ucy5yZXBsYWNlKC9bXitdL2csICcnKS5sZW5ndGgsXG4gICAgICAgICAgICBkZWxldGlvbnM6IGFsdGVyYXRpb25zLnJlcGxhY2UoL1teLV0vZywgJycpLmxlbmd0aCxcbiAgICAgICAgICAgIGJpbmFyeTogZmFsc2UsXG4gICAgICAgICB9KTtcbiAgICAgIH1cbiAgICksXG4gICBuZXcgTGluZVBhcnNlcjxEaWZmUmVzdWx0PihcbiAgICAgIC9eKC4rKSBcXHxcXHMrQmluIChbMC05Ll0rKSAtPiAoWzAtOS5dKykgKFthLXpdKykvLFxuICAgICAgKHJlc3VsdCwgW2ZpbGUsIGJlZm9yZSwgYWZ0ZXJdKSA9PiB7XG4gICAgICAgICByZXN1bHQuZmlsZXMucHVzaCh7XG4gICAgICAgICAgICBmaWxlOiBmaWxlLnRyaW0oKSxcbiAgICAgICAgICAgIGJlZm9yZTogYXNOdW1iZXIoYmVmb3JlKSxcbiAgICAgICAgICAgIGFmdGVyOiBhc051bWJlcihhZnRlciksXG4gICAgICAgICAgICBiaW5hcnk6IHRydWUsXG4gICAgICAgICB9KTtcbiAgICAgIH1cbiAgICksXG4gICBuZXcgTGluZVBhcnNlcjxEaWZmUmVzdWx0PihcbiAgICAgIC8oXFxkKykgZmlsZXM/IGNoYW5nZWRcXHMqKCg/OiwgXFxkKyBbXixdKyl7MCwyfSkvLFxuICAgICAgKHJlc3VsdCwgW2NoYW5nZWQsIHN1bW1hcnldKSA9PiB7XG4gICAgICAgICBjb25zdCBpbnNlcnRlZCA9IC8oXFxkKykgaS8uZXhlYyhzdW1tYXJ5KTtcbiAgICAgICAgIGNvbnN0IGRlbGV0ZWQgPSAvKFxcZCspIGQvLmV4ZWMoc3VtbWFyeSk7XG5cbiAgICAgICAgIHJlc3VsdC5jaGFuZ2VkID0gYXNOdW1iZXIoY2hhbmdlZCk7XG4gICAgICAgICByZXN1bHQuaW5zZXJ0aW9ucyA9IGFzTnVtYmVyKGluc2VydGVkPy5bMV0pO1xuICAgICAgICAgcmVzdWx0LmRlbGV0aW9ucyA9IGFzTnVtYmVyKGRlbGV0ZWQ/LlsxXSk7XG4gICAgICB9XG4gICApLFxuXTtcblxuY29uc3QgbnVtU3RhdFBhcnNlciA9IFtcbiAgIG5ldyBMaW5lUGFyc2VyPERpZmZSZXN1bHQ+KFxuICAgICAgLyhcXGQrKVxcdChcXGQrKVxcdCguKykkLyxcbiAgICAgIChyZXN1bHQsIFtjaGFuZ2VzSW5zZXJ0LCBjaGFuZ2VzRGVsZXRlLCBmaWxlXSkgPT4ge1xuICAgICAgICAgY29uc3QgaW5zZXJ0aW9ucyA9IGFzTnVtYmVyKGNoYW5nZXNJbnNlcnQpO1xuICAgICAgICAgY29uc3QgZGVsZXRpb25zID0gYXNOdW1iZXIoY2hhbmdlc0RlbGV0ZSk7XG5cbiAgICAgICAgIHJlc3VsdC5jaGFuZ2VkKys7XG4gICAgICAgICByZXN1bHQuaW5zZXJ0aW9ucyArPSBpbnNlcnRpb25zO1xuICAgICAgICAgcmVzdWx0LmRlbGV0aW9ucyArPSBkZWxldGlvbnM7XG5cbiAgICAgICAgIHJlc3VsdC5maWxlcy5wdXNoKHtcbiAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICBjaGFuZ2VzOiBpbnNlcnRpb25zICsgZGVsZXRpb25zLFxuICAgICAgICAgICAgaW5zZXJ0aW9ucyxcbiAgICAgICAgICAgIGRlbGV0aW9ucyxcbiAgICAgICAgICAgIGJpbmFyeTogZmFsc2UsXG4gICAgICAgICB9KTtcbiAgICAgIH1cbiAgICksXG4gICBuZXcgTGluZVBhcnNlcjxEaWZmUmVzdWx0PigvLVxcdC1cXHQoLispJC8sIChyZXN1bHQsIFtmaWxlXSkgPT4ge1xuICAgICAgcmVzdWx0LmNoYW5nZWQrKztcblxuICAgICAgcmVzdWx0LmZpbGVzLnB1c2goe1xuICAgICAgICAgZmlsZSxcbiAgICAgICAgIGFmdGVyOiAwLFxuICAgICAgICAgYmVmb3JlOiAwLFxuICAgICAgICAgYmluYXJ5OiB0cnVlLFxuICAgICAgfSk7XG4gICB9KSxcbl07XG5cbmNvbnN0IG5hbWVPbmx5UGFyc2VyID0gW1xuICAgbmV3IExpbmVQYXJzZXI8RGlmZlJlc3VsdD4oLyguKykkLywgKHJlc3VsdCwgW2ZpbGVdKSA9PiB7XG4gICAgICByZXN1bHQuY2hhbmdlZCsrO1xuICAgICAgcmVzdWx0LmZpbGVzLnB1c2goe1xuICAgICAgICAgZmlsZSxcbiAgICAgICAgIGNoYW5nZXM6IDAsXG4gICAgICAgICBpbnNlcnRpb25zOiAwLFxuICAgICAgICAgZGVsZXRpb25zOiAwLFxuICAgICAgICAgYmluYXJ5OiBmYWxzZSxcbiAgICAgIH0pO1xuICAgfSksXG5dO1xuXG5jb25zdCBuYW1lU3RhdHVzUGFyc2VyID0gW1xuICAgbmV3IExpbmVQYXJzZXI8RGlmZlJlc3VsdD4oXG4gICAgICAvKFtBQ0RNUlRVWEJdKShbMC05XXswLDN9KVxcdCguW15cXHRdKikoXFx0KC5bXlxcdF0qKSk/JC8sXG4gICAgICAocmVzdWx0LCBbc3RhdHVzLCBfc2ltaWxhcml0eSwgZnJvbSwgX3RvLCB0b10pID0+IHtcbiAgICAgICAgIHJlc3VsdC5jaGFuZ2VkKys7XG4gICAgICAgICByZXN1bHQuZmlsZXMucHVzaCh7XG4gICAgICAgICAgICBmaWxlOiB0byA/PyBmcm9tLFxuICAgICAgICAgICAgY2hhbmdlczogMCxcbiAgICAgICAgICAgIHN0YXR1czogb3JWb2lkKGlzRGlmZk5hbWVTdGF0dXMoc3RhdHVzKSAmJiBzdGF0dXMpLFxuICAgICAgICAgICAgaW5zZXJ0aW9uczogMCxcbiAgICAgICAgICAgIGRlbGV0aW9uczogMCxcbiAgICAgICAgICAgIGJpbmFyeTogZmFsc2UsXG4gICAgICAgICB9KTtcbiAgICAgIH1cbiAgICksXG5dO1xuXG5jb25zdCBkaWZmU3VtbWFyeVBhcnNlcnM6IFJlY29yZDxMb2dGb3JtYXQsIExpbmVQYXJzZXI8RGlmZlJlc3VsdD5bXT4gPSB7XG4gICBbTG9nRm9ybWF0Lk5PTkVdOiBzdGF0UGFyc2VyLFxuICAgW0xvZ0Zvcm1hdC5TVEFUXTogc3RhdFBhcnNlcixcbiAgIFtMb2dGb3JtYXQuTlVNX1NUQVRdOiBudW1TdGF0UGFyc2VyLFxuICAgW0xvZ0Zvcm1hdC5OQU1FX1NUQVRVU106IG5hbWVTdGF0dXNQYXJzZXIsXG4gICBbTG9nRm9ybWF0Lk5BTUVfT05MWV06IG5hbWVPbmx5UGFyc2VyLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldERpZmZQYXJzZXIoZm9ybWF0ID0gTG9nRm9ybWF0Lk5PTkUpIHtcbiAgIGNvbnN0IHBhcnNlciA9IGRpZmZTdW1tYXJ5UGFyc2Vyc1tmb3JtYXRdO1xuXG4gICByZXR1cm4gKHN0ZE91dDogc3RyaW5nKSA9PiBwYXJzZVN0cmluZ1Jlc3BvbnNlKG5ldyBEaWZmU3VtbWFyeSgpLCBwYXJzZXIsIHN0ZE91dCwgZmFsc2UpO1xufVxuIiwgImltcG9ydCB7IExpc3RMb2dMaW5lLCBMb2dSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IHRvTGluZXNXaXRoQ29udGVudCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IGdldERpZmZQYXJzZXIgfSBmcm9tICcuL3BhcnNlLWRpZmYtc3VtbWFyeSc7XG5pbXBvcnQgeyBMb2dGb3JtYXQgfSBmcm9tICcuLi9hcmdzL2xvZy1mb3JtYXQnO1xuXG5leHBvcnQgY29uc3QgU1RBUlRfQk9VTkRBUlkgPSAnXHUwMEYyXHUwMEYyXHUwMEYyXHUwMEYyXHUwMEYyXHUwMEYyICc7XG5cbmV4cG9ydCBjb25zdCBDT01NSVRfQk9VTkRBUlkgPSAnIFx1MDBGMlx1MDBGMic7XG5cbmV4cG9ydCBjb25zdCBTUExJVFRFUiA9ICcgXHUwMEYyICc7XG5cbmNvbnN0IGRlZmF1bHRGaWVsZE5hbWVzID0gWydoYXNoJywgJ2RhdGUnLCAnbWVzc2FnZScsICdyZWZzJywgJ2F1dGhvcl9uYW1lJywgJ2F1dGhvcl9lbWFpbCddO1xuXG5mdW5jdGlvbiBsaW5lQnVpbGRlcih0b2tlbnM6IHN0cmluZ1tdLCBmaWVsZHM6IHN0cmluZ1tdKTogYW55IHtcbiAgIHJldHVybiBmaWVsZHMucmVkdWNlKFxuICAgICAgKGxpbmUsIGZpZWxkLCBpbmRleCkgPT4ge1xuICAgICAgICAgbGluZVtmaWVsZF0gPSB0b2tlbnNbaW5kZXhdIHx8ICcnO1xuICAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgICB9LFxuICAgICAgT2JqZWN0LmNyZWF0ZSh7IGRpZmY6IG51bGwgfSkgYXMgYW55XG4gICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTGlzdExvZ1N1bW1hcnlQYXJzZXI8VCA9IGFueT4oXG4gICBzcGxpdHRlciA9IFNQTElUVEVSLFxuICAgZmllbGRzID0gZGVmYXVsdEZpZWxkTmFtZXMsXG4gICBsb2dGb3JtYXQgPSBMb2dGb3JtYXQuTk9ORVxuKSB7XG4gICBjb25zdCBwYXJzZURpZmZSZXN1bHQgPSBnZXREaWZmUGFyc2VyKGxvZ0Zvcm1hdCk7XG5cbiAgIHJldHVybiBmdW5jdGlvbiAoc3RkT3V0OiBzdHJpbmcpOiBMb2dSZXN1bHQ8VD4ge1xuICAgICAgY29uc3QgYWxsOiBSZWFkb25seUFycmF5PFQgJiBMaXN0TG9nTGluZT4gPSB0b0xpbmVzV2l0aENvbnRlbnQoXG4gICAgICAgICBzdGRPdXQsXG4gICAgICAgICB0cnVlLFxuICAgICAgICAgU1RBUlRfQk9VTkRBUllcbiAgICAgICkubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICBjb25zdCBsaW5lRGV0YWlsID0gaXRlbS50cmltKCkuc3BsaXQoQ09NTUlUX0JPVU5EQVJZKTtcbiAgICAgICAgIGNvbnN0IGxpc3RMb2dMaW5lOiBUICYgTGlzdExvZ0xpbmUgPSBsaW5lQnVpbGRlcihcbiAgICAgICAgICAgIGxpbmVEZXRhaWxbMF0udHJpbSgpLnNwbGl0KHNwbGl0dGVyKSxcbiAgICAgICAgICAgIGZpZWxkc1xuICAgICAgICAgKTtcblxuICAgICAgICAgaWYgKGxpbmVEZXRhaWwubGVuZ3RoID4gMSAmJiAhIWxpbmVEZXRhaWxbMV0udHJpbSgpKSB7XG4gICAgICAgICAgICBsaXN0TG9nTGluZS5kaWZmID0gcGFyc2VEaWZmUmVzdWx0KGxpbmVEZXRhaWxbMV0pO1xuICAgICAgICAgfVxuXG4gICAgICAgICByZXR1cm4gbGlzdExvZ0xpbmU7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgIGFsbCxcbiAgICAgICAgIGxhdGVzdDogKGFsbC5sZW5ndGggJiYgYWxsWzBdKSB8fCBudWxsLFxuICAgICAgICAgdG90YWw6IGFsbC5sZW5ndGgsXG4gICAgICB9O1xuICAgfTtcbn1cbiIsICJpbXBvcnQgeyBTdHJpbmdUYXNrIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgRGlmZlJlc3VsdCB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuaW1wb3J0IHsgaXNMb2dGb3JtYXQsIExvZ0Zvcm1hdCwgbG9nRm9ybWF0RnJvbUNvbW1hbmQgfSBmcm9tICcuLi9hcmdzL2xvZy1mb3JtYXQnO1xuaW1wb3J0IHsgZ2V0RGlmZlBhcnNlciB9IGZyb20gJy4uL3BhcnNlcnMvcGFyc2UtZGlmZi1zdW1tYXJ5JztcbmltcG9ydCB7IGNvbmZpZ3VyYXRpb25FcnJvclRhc2ssIEVtcHR5VGFzayB9IGZyb20gJy4vdGFzayc7XG5cbmV4cG9ydCBmdW5jdGlvbiBkaWZmU3VtbWFyeVRhc2soY3VzdG9tQXJnczogc3RyaW5nW10pOiBTdHJpbmdUYXNrPERpZmZSZXN1bHQ+IHwgRW1wdHlUYXNrIHtcbiAgIGxldCBsb2dGb3JtYXQgPSBsb2dGb3JtYXRGcm9tQ29tbWFuZChjdXN0b21BcmdzKTtcblxuICAgY29uc3QgY29tbWFuZHMgPSBbJ2RpZmYnXTtcblxuICAgaWYgKGxvZ0Zvcm1hdCA9PT0gTG9nRm9ybWF0Lk5PTkUpIHtcbiAgICAgIGxvZ0Zvcm1hdCA9IExvZ0Zvcm1hdC5TVEFUO1xuICAgICAgY29tbWFuZHMucHVzaCgnLS1zdGF0PTQwOTYnKTtcbiAgIH1cblxuICAgY29tbWFuZHMucHVzaCguLi5jdXN0b21BcmdzKTtcblxuICAgcmV0dXJuIChcbiAgICAgIHZhbGlkYXRlTG9nRm9ybWF0Q29uZmlnKGNvbW1hbmRzKSB8fCB7XG4gICAgICAgICBjb21tYW5kcyxcbiAgICAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgICAgIHBhcnNlcjogZ2V0RGlmZlBhcnNlcihsb2dGb3JtYXQpLFxuICAgICAgfVxuICAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlTG9nRm9ybWF0Q29uZmlnKGN1c3RvbUFyZ3M6IHVua25vd25bXSk6IEVtcHR5VGFzayB8IHZvaWQge1xuICAgY29uc3QgZmxhZ3MgPSBjdXN0b21BcmdzLmZpbHRlcihpc0xvZ0Zvcm1hdCk7XG5cbiAgIGlmIChmbGFncy5sZW5ndGggPiAxKSB7XG4gICAgICByZXR1cm4gY29uZmlndXJhdGlvbkVycm9yVGFzayhcbiAgICAgICAgIGBTdW1tYXJ5IGZsYWdzIGFyZSBtdXR1YWxseSBleGNsdXNpdmUgLSBwaWNrIG9uZSBvZiAke2ZsYWdzLmpvaW4oJywnKX1gXG4gICAgICApO1xuICAgfVxuXG4gICBpZiAoZmxhZ3MubGVuZ3RoICYmIGN1c3RvbUFyZ3MuaW5jbHVkZXMoJy16JykpIHtcbiAgICAgIHJldHVybiBjb25maWd1cmF0aW9uRXJyb3JUYXNrKFxuICAgICAgICAgYFN1bW1hcnkgZmxhZyAke2ZsYWdzfSBwYXJzaW5nIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggbnVsbCB0ZXJtaW5hdGlvbiBvcHRpb24gJy16J2BcbiAgICAgICk7XG4gICB9XG59XG4iLCAiaW1wb3J0IHR5cGUgeyBPcHRpb25zLCBTdHJpbmdUYXNrIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBMb2dSZXN1bHQsIFNpbXBsZUdpdCB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuaW1wb3J0IHsgbG9nRm9ybWF0RnJvbUNvbW1hbmQgfSBmcm9tICcuLi9hcmdzL2xvZy1mb3JtYXQnO1xuaW1wb3J0IHsgcGF0aHNwZWMgfSBmcm9tICcuLi9hcmdzL3BhdGhzcGVjJztcbmltcG9ydCB7XG4gICBDT01NSVRfQk9VTkRBUlksXG4gICBjcmVhdGVMaXN0TG9nU3VtbWFyeVBhcnNlcixcbiAgIFNQTElUVEVSLFxuICAgU1RBUlRfQk9VTkRBUlksXG59IGZyb20gJy4uL3BhcnNlcnMvcGFyc2UtbGlzdC1sb2ctc3VtbWFyeSc7XG5pbXBvcnQge1xuICAgYXBwZW5kVGFza09wdGlvbnMsXG4gICBmaWx0ZXJBcnJheSxcbiAgIGZpbHRlclByaW1pdGl2ZXMsXG4gICBmaWx0ZXJTdHJpbmcsXG4gICBmaWx0ZXJUeXBlLFxuICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50LFxuICAgdHJhaWxpbmdPcHRpb25zQXJndW1lbnQsXG59IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IFNpbXBsZUdpdEFwaSB9IGZyb20gJy4uL3NpbXBsZS1naXQtYXBpJztcbmltcG9ydCB7IGNvbmZpZ3VyYXRpb25FcnJvclRhc2sgfSBmcm9tICcuL3Rhc2snO1xuaW1wb3J0IHsgdmFsaWRhdGVMb2dGb3JtYXRDb25maWcgfSBmcm9tICcuL2RpZmYnO1xuXG5lbnVtIGV4Y2x1ZGVPcHRpb25zIHtcbiAgICctLXByZXR0eScsXG4gICAnbWF4LWNvdW50JyxcbiAgICdtYXhDb3VudCcsXG4gICAnbicsXG4gICAnZmlsZScsXG4gICAnZm9ybWF0JyxcbiAgICdmcm9tJyxcbiAgICd0bycsXG4gICAnc3BsaXR0ZXInLFxuICAgJ3N5bW1ldHJpYycsXG4gICAnbWFpbE1hcCcsXG4gICAnbXVsdGlMaW5lJyxcbiAgICdzdHJpY3REYXRlJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEZWZhdWx0TG9nRmllbGRzIHtcbiAgIGhhc2g6IHN0cmluZztcbiAgIGRhdGU6IHN0cmluZztcbiAgIG1lc3NhZ2U6IHN0cmluZztcbiAgIHJlZnM6IHN0cmluZztcbiAgIGJvZHk6IHN0cmluZztcbiAgIGF1dGhvcl9uYW1lOiBzdHJpbmc7XG4gICBhdXRob3JfZW1haWw6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgTG9nT3B0aW9uczxUID0gRGVmYXVsdExvZ0ZpZWxkcz4gPSB7XG4gICBmaWxlPzogc3RyaW5nO1xuICAgZm9ybWF0PzogVDtcbiAgIGZyb20/OiBzdHJpbmc7XG4gICBtYWlsTWFwPzogYm9vbGVhbjtcbiAgIG1heENvdW50PzogbnVtYmVyO1xuICAgbXVsdGlMaW5lPzogYm9vbGVhbjtcbiAgIHNwbGl0dGVyPzogc3RyaW5nO1xuICAgc3RyaWN0RGF0ZT86IGJvb2xlYW47XG4gICBzeW1tZXRyaWM/OiBib29sZWFuO1xuICAgdG8/OiBzdHJpbmc7XG59O1xuXG5pbnRlcmZhY2UgUGFyc2VkTG9nT3B0aW9ucyB7XG4gICBmaWVsZHM6IHN0cmluZ1tdO1xuICAgc3BsaXR0ZXI6IHN0cmluZztcbiAgIGNvbW1hbmRzOiBzdHJpbmdbXTtcbn1cblxuZnVuY3Rpb24gcHJldHR5Rm9ybWF0KFxuICAgZm9ybWF0OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCB1bmtub3duPixcbiAgIHNwbGl0dGVyOiBzdHJpbmdcbik6IFtzdHJpbmdbXSwgc3RyaW5nXSB7XG4gICBjb25zdCBmaWVsZHM6IHN0cmluZ1tdID0gW107XG4gICBjb25zdCBmb3JtYXRTdHI6IHN0cmluZ1tdID0gW107XG5cbiAgIE9iamVjdC5rZXlzKGZvcm1hdCkuZm9yRWFjaCgoZmllbGQpID0+IHtcbiAgICAgIGZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICAgIGZvcm1hdFN0ci5wdXNoKFN0cmluZyhmb3JtYXRbZmllbGRdKSk7XG4gICB9KTtcblxuICAgcmV0dXJuIFtmaWVsZHMsIGZvcm1hdFN0ci5qb2luKHNwbGl0dGVyKV07XG59XG5cbmZ1bmN0aW9uIHVzZXJPcHRpb25zPFQgZXh0ZW5kcyBPcHRpb25zPihpbnB1dDogVCk6IE9wdGlvbnMge1xuICAgcmV0dXJuIE9iamVjdC5rZXlzKGlucHV0KS5yZWR1Y2UoKG91dCwga2V5KSA9PiB7XG4gICAgICBpZiAoIShrZXkgaW4gZXhjbHVkZU9wdGlvbnMpKSB7XG4gICAgICAgICBvdXRba2V5XSA9IGlucHV0W2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgfSwge30gYXMgT3B0aW9ucyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUxvZ09wdGlvbnM8VCBleHRlbmRzIE9wdGlvbnM+KFxuICAgb3B0OiBPcHRpb25zIHwgTG9nT3B0aW9uczxUPiA9IHt9LFxuICAgY3VzdG9tQXJnczogc3RyaW5nW10gPSBbXVxuKTogUGFyc2VkTG9nT3B0aW9ucyB7XG4gICBjb25zdCBzcGxpdHRlciA9IGZpbHRlclR5cGUob3B0LnNwbGl0dGVyLCBmaWx0ZXJTdHJpbmcsIFNQTElUVEVSKTtcbiAgIGNvbnN0IGZvcm1hdCA9XG4gICAgICAhZmlsdGVyUHJpbWl0aXZlcyhvcHQuZm9ybWF0KSAmJiBvcHQuZm9ybWF0XG4gICAgICAgICA/IG9wdC5mb3JtYXRcbiAgICAgICAgIDoge1xuICAgICAgICAgICAgICBoYXNoOiAnJUgnLFxuICAgICAgICAgICAgICBkYXRlOiBvcHQuc3RyaWN0RGF0ZSA9PT0gZmFsc2UgPyAnJWFpJyA6ICclYUknLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnJXMnLFxuICAgICAgICAgICAgICByZWZzOiAnJUQnLFxuICAgICAgICAgICAgICBib2R5OiBvcHQubXVsdGlMaW5lID8gJyVCJyA6ICclYicsXG4gICAgICAgICAgICAgIGF1dGhvcl9uYW1lOiBvcHQubWFpbE1hcCAhPT0gZmFsc2UgPyAnJWFOJyA6ICclYW4nLFxuICAgICAgICAgICAgICBhdXRob3JfZW1haWw6IG9wdC5tYWlsTWFwICE9PSBmYWxzZSA/ICclYUUnIDogJyVhZScsXG4gICAgICAgICAgIH07XG5cbiAgIGNvbnN0IFtmaWVsZHMsIGZvcm1hdFN0cl0gPSBwcmV0dHlGb3JtYXQoZm9ybWF0LCBzcGxpdHRlcik7XG5cbiAgIGNvbnN0IHN1ZmZpeDogc3RyaW5nW10gPSBbXTtcbiAgIGNvbnN0IGNvbW1hbmQ6IHN0cmluZ1tdID0gW1xuICAgICAgYC0tcHJldHR5PWZvcm1hdDoke1NUQVJUX0JPVU5EQVJZfSR7Zm9ybWF0U3RyfSR7Q09NTUlUX0JPVU5EQVJZfWAsXG4gICAgICAuLi5jdXN0b21BcmdzLFxuICAgXTtcblxuICAgY29uc3QgbWF4Q291bnQ6IG51bWJlciB8IHVuZGVmaW5lZCA9IChvcHQgYXMgYW55KS5uIHx8IChvcHQgYXMgYW55KVsnbWF4LWNvdW50J10gfHwgb3B0Lm1heENvdW50O1xuICAgaWYgKG1heENvdW50KSB7XG4gICAgICBjb21tYW5kLnB1c2goYC0tbWF4LWNvdW50PSR7bWF4Q291bnR9YCk7XG4gICB9XG5cbiAgIGlmIChvcHQuZnJvbSB8fCBvcHQudG8pIHtcbiAgICAgIGNvbnN0IHJhbmdlT3BlcmF0b3IgPSBvcHQuc3ltbWV0cmljICE9PSBmYWxzZSA/ICcuLi4nIDogJy4uJztcbiAgICAgIHN1ZmZpeC5wdXNoKGAke29wdC5mcm9tIHx8ICcnfSR7cmFuZ2VPcGVyYXRvcn0ke29wdC50byB8fCAnJ31gKTtcbiAgIH1cblxuICAgaWYgKGZpbHRlclN0cmluZyhvcHQuZmlsZSkpIHtcbiAgICAgIGNvbW1hbmQucHVzaCgnLS1mb2xsb3cnLCBwYXRoc3BlYyhvcHQuZmlsZSkpO1xuICAgfVxuXG4gICBhcHBlbmRUYXNrT3B0aW9ucyh1c2VyT3B0aW9ucyhvcHQgYXMgT3B0aW9ucyksIGNvbW1hbmQpO1xuXG4gICByZXR1cm4ge1xuICAgICAgZmllbGRzLFxuICAgICAgc3BsaXR0ZXIsXG4gICAgICBjb21tYW5kczogWy4uLmNvbW1hbmQsIC4uLnN1ZmZpeF0sXG4gICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9nVGFzazxUPihcbiAgIHNwbGl0dGVyOiBzdHJpbmcsXG4gICBmaWVsZHM6IHN0cmluZ1tdLFxuICAgY3VzdG9tQXJnczogc3RyaW5nW11cbik6IFN0cmluZ1Rhc2s8TG9nUmVzdWx0PFQ+PiB7XG4gICBjb25zdCBwYXJzZXIgPSBjcmVhdGVMaXN0TG9nU3VtbWFyeVBhcnNlcihzcGxpdHRlciwgZmllbGRzLCBsb2dGb3JtYXRGcm9tQ29tbWFuZChjdXN0b21BcmdzKSk7XG5cbiAgIHJldHVybiB7XG4gICAgICBjb21tYW5kczogWydsb2cnLCAuLi5jdXN0b21BcmdzXSxcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIHBhcnNlcixcbiAgIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpOiBQaWNrPFNpbXBsZUdpdCwgJ2xvZyc+IHtcbiAgIHJldHVybiB7XG4gICAgICBsb2c8VCBleHRlbmRzIE9wdGlvbnM+KHRoaXM6IFNpbXBsZUdpdEFwaSwgLi4ucmVzdDogdW5rbm93bltdKSB7XG4gICAgICAgICBjb25zdCBuZXh0ID0gdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cyk7XG4gICAgICAgICBjb25zdCBvcHRpb25zID0gcGFyc2VMb2dPcHRpb25zPFQ+KFxuICAgICAgICAgICAgdHJhaWxpbmdPcHRpb25zQXJndW1lbnQoYXJndW1lbnRzKSxcbiAgICAgICAgICAgIGZpbHRlclR5cGUoYXJndW1lbnRzWzBdLCBmaWx0ZXJBcnJheSlcbiAgICAgICAgICk7XG4gICAgICAgICBjb25zdCB0YXNrID1cbiAgICAgICAgICAgIHJlamVjdERlcHJlY2F0ZWRTaWduYXR1cmVzKC4uLnJlc3QpIHx8XG4gICAgICAgICAgICB2YWxpZGF0ZUxvZ0Zvcm1hdENvbmZpZyhvcHRpb25zLmNvbW1hbmRzKSB8fFxuICAgICAgICAgICAgY3JlYXRlTG9nVGFzayhvcHRpb25zKTtcblxuICAgICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2sodGFzaywgbmV4dCk7XG4gICAgICB9LFxuICAgfTtcblxuICAgZnVuY3Rpb24gY3JlYXRlTG9nVGFzayhvcHRpb25zOiBQYXJzZWRMb2dPcHRpb25zKSB7XG4gICAgICByZXR1cm4gbG9nVGFzayhvcHRpb25zLnNwbGl0dGVyLCBvcHRpb25zLmZpZWxkcywgb3B0aW9ucy5jb21tYW5kcyk7XG4gICB9XG5cbiAgIGZ1bmN0aW9uIHJlamVjdERlcHJlY2F0ZWRTaWduYXR1cmVzKGZyb20/OiB1bmtub3duLCB0bz86IHVua25vd24pIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgICBmaWx0ZXJTdHJpbmcoZnJvbSkgJiZcbiAgICAgICAgIGZpbHRlclN0cmluZyh0bykgJiZcbiAgICAgICAgIGNvbmZpZ3VyYXRpb25FcnJvclRhc2soXG4gICAgICAgICAgICBgZ2l0LmxvZyhzdHJpbmcsIHN0cmluZykgc2hvdWxkIGJlIHJlcGxhY2VkIHdpdGggZ2l0LmxvZyh7IGZyb206IHN0cmluZywgdG86IHN0cmluZyB9KWBcbiAgICAgICAgIClcbiAgICAgICk7XG4gICB9XG59XG4iLCAiaW1wb3J0IHtcbiAgIE1lcmdlQ29uZmxpY3QsXG4gICBNZXJnZUNvbmZsaWN0RGVsZXRpb24sXG4gICBNZXJnZURldGFpbCxcbiAgIE1lcmdlUmVzdWx0U3RhdHVzLFxufSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcblxuZXhwb3J0IGNsYXNzIE1lcmdlU3VtbWFyeUNvbmZsaWN0IGltcGxlbWVudHMgTWVyZ2VDb25mbGljdCB7XG4gICBjb25zdHJ1Y3RvcihcbiAgICAgIHB1YmxpYyByZWFkb25seSByZWFzb246IHN0cmluZyxcbiAgICAgIHB1YmxpYyByZWFkb25seSBmaWxlOiBzdHJpbmcgfCBudWxsID0gbnVsbCxcbiAgICAgIHB1YmxpYyByZWFkb25seSBtZXRhPzogTWVyZ2VDb25mbGljdERlbGV0aW9uXG4gICApIHt9XG5cbiAgIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGAke3RoaXMuZmlsZX06JHt0aGlzLnJlYXNvbn1gO1xuICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTWVyZ2VTdW1tYXJ5RGV0YWlsIGltcGxlbWVudHMgTWVyZ2VEZXRhaWwge1xuICAgcHVibGljIGNvbmZsaWN0czogTWVyZ2VDb25mbGljdFtdID0gW107XG4gICBwdWJsaWMgbWVyZ2VzOiBzdHJpbmdbXSA9IFtdO1xuICAgcHVibGljIHJlc3VsdDogTWVyZ2VSZXN1bHRTdGF0dXMgPSAnc3VjY2Vzcyc7XG5cbiAgIGdldCBmYWlsZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb25mbGljdHMubGVuZ3RoID4gMDtcbiAgIH1cblxuICAgZ2V0IHJlYXNvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlc3VsdDtcbiAgIH1cblxuICAgdG9TdHJpbmcoKSB7XG4gICAgICBpZiAodGhpcy5jb25mbGljdHMubGVuZ3RoKSB7XG4gICAgICAgICByZXR1cm4gYENPTkZMSUNUUzogJHt0aGlzLmNvbmZsaWN0cy5qb2luKCcsICcpfWA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAnT0snO1xuICAgfVxufVxuIiwgImltcG9ydCB7XG4gICBQdWxsRGV0YWlsRmlsZUNoYW5nZXMsXG4gICBQdWxsRGV0YWlsU3VtbWFyeSxcbiAgIFB1bGxGYWlsZWRSZXN1bHQsXG4gICBQdWxsUmVzdWx0LFxufSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcblxuZXhwb3J0IGNsYXNzIFB1bGxTdW1tYXJ5IGltcGxlbWVudHMgUHVsbFJlc3VsdCB7XG4gICBwdWJsaWMgcmVtb3RlTWVzc2FnZXMgPSB7XG4gICAgICBhbGw6IFtdLFxuICAgfTtcbiAgIHB1YmxpYyBjcmVhdGVkID0gW107XG4gICBwdWJsaWMgZGVsZXRlZDogc3RyaW5nW10gPSBbXTtcbiAgIHB1YmxpYyBmaWxlczogc3RyaW5nW10gPSBbXTtcbiAgIHB1YmxpYyBkZWxldGlvbnM6IFB1bGxEZXRhaWxGaWxlQ2hhbmdlcyA9IHt9O1xuICAgcHVibGljIGluc2VydGlvbnM6IFB1bGxEZXRhaWxGaWxlQ2hhbmdlcyA9IHt9O1xuICAgcHVibGljIHN1bW1hcnk6IFB1bGxEZXRhaWxTdW1tYXJ5ID0ge1xuICAgICAgY2hhbmdlczogMCxcbiAgICAgIGRlbGV0aW9uczogMCxcbiAgICAgIGluc2VydGlvbnM6IDAsXG4gICB9O1xufVxuXG5leHBvcnQgY2xhc3MgUHVsbEZhaWxlZFN1bW1hcnkgaW1wbGVtZW50cyBQdWxsRmFpbGVkUmVzdWx0IHtcbiAgIHJlbW90ZSA9ICcnO1xuICAgaGFzaCA9IHtcbiAgICAgIGxvY2FsOiAnJyxcbiAgICAgIHJlbW90ZTogJycsXG4gICB9O1xuICAgYnJhbmNoID0ge1xuICAgICAgbG9jYWw6ICcnLFxuICAgICAgcmVtb3RlOiAnJyxcbiAgIH07XG4gICBtZXNzYWdlID0gJyc7XG5cbiAgIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZTtcbiAgIH1cbn1cbiIsICJpbXBvcnQge1xuICAgUmVtb3RlTWVzc2FnZVJlc3VsdCxcbiAgIFJlbW90ZU1lc3NhZ2VzLFxuICAgUmVtb3RlTWVzc2FnZXNPYmplY3RFbnVtZXJhdGlvbixcbn0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBhc051bWJlciwgUmVtb3RlTGluZVBhcnNlciB9IGZyb20gJy4uL3V0aWxzJztcblxuZnVuY3Rpb24gb2JqZWN0RW51bWVyYXRpb25SZXN1bHQ8VCBleHRlbmRzIFJlbW90ZU1lc3NhZ2VzID0gUmVtb3RlTWVzc2FnZXM+KFxuICAgcmVtb3RlTWVzc2FnZXM6IFRcbik6IFJlbW90ZU1lc3NhZ2VzT2JqZWN0RW51bWVyYXRpb24ge1xuICAgcmV0dXJuIChyZW1vdGVNZXNzYWdlcy5vYmplY3RzID0gcmVtb3RlTWVzc2FnZXMub2JqZWN0cyB8fCB7XG4gICAgICBjb21wcmVzc2luZzogMCxcbiAgICAgIGNvdW50aW5nOiAwLFxuICAgICAgZW51bWVyYXRpbmc6IDAsXG4gICAgICBwYWNrUmV1c2VkOiAwLFxuICAgICAgcmV1c2VkOiB7IGNvdW50OiAwLCBkZWx0YTogMCB9LFxuICAgICAgdG90YWw6IHsgY291bnQ6IDAsIGRlbHRhOiAwIH0sXG4gICB9KTtcbn1cblxuZnVuY3Rpb24gYXNPYmplY3RDb3VudChzb3VyY2U6IHN0cmluZykge1xuICAgY29uc3QgY291bnQgPSAvXlxccyooXFxkKykvLmV4ZWMoc291cmNlKTtcbiAgIGNvbnN0IGRlbHRhID0gL2RlbHRhIChcXGQrKS9pLmV4ZWMoc291cmNlKTtcblxuICAgcmV0dXJuIHtcbiAgICAgIGNvdW50OiBhc051bWJlcigoY291bnQgJiYgY291bnRbMV0pIHx8ICcwJyksXG4gICAgICBkZWx0YTogYXNOdW1iZXIoKGRlbHRhICYmIGRlbHRhWzFdKSB8fCAnMCcpLFxuICAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IHJlbW90ZU1lc3NhZ2VzT2JqZWN0UGFyc2VyczogUmVtb3RlTGluZVBhcnNlcjxSZW1vdGVNZXNzYWdlUmVzdWx0PFJlbW90ZU1lc3NhZ2VzPj5bXSA9XG4gICBbXG4gICAgICBuZXcgUmVtb3RlTGluZVBhcnNlcihcbiAgICAgICAgIC9ecmVtb3RlOlxccyooZW51bWVyYXRpbmd8Y291bnRpbmd8Y29tcHJlc3NpbmcpIG9iamVjdHM6IChcXGQrKSwvaSxcbiAgICAgICAgIChyZXN1bHQsIFthY3Rpb24sIGNvdW50XSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gYWN0aW9uLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBjb25zdCBlbnVtZXJhdGlvbiA9IG9iamVjdEVudW1lcmF0aW9uUmVzdWx0KHJlc3VsdC5yZW1vdGVNZXNzYWdlcyk7XG5cbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZW51bWVyYXRpb24sIHsgW2tleV06IGFzTnVtYmVyKGNvdW50KSB9KTtcbiAgICAgICAgIH1cbiAgICAgICksXG4gICAgICBuZXcgUmVtb3RlTGluZVBhcnNlcihcbiAgICAgICAgIC9ecmVtb3RlOlxccyooZW51bWVyYXRpbmd8Y291bnRpbmd8Y29tcHJlc3NpbmcpIG9iamVjdHM6IFxcZCslIFxcKFxcZCtcXC8oXFxkKylcXCksL2ksXG4gICAgICAgICAocmVzdWx0LCBbYWN0aW9uLCBjb3VudF0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGFjdGlvbi50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgY29uc3QgZW51bWVyYXRpb24gPSBvYmplY3RFbnVtZXJhdGlvblJlc3VsdChyZXN1bHQucmVtb3RlTWVzc2FnZXMpO1xuXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGVudW1lcmF0aW9uLCB7IFtrZXldOiBhc051bWJlcihjb3VudCkgfSk7XG4gICAgICAgICB9XG4gICAgICApLFxuICAgICAgbmV3IFJlbW90ZUxpbmVQYXJzZXIoXG4gICAgICAgICAvdG90YWwgKFteLF0rKSwgcmV1c2VkIChbXixdKyksIHBhY2stcmV1c2VkIChcXGQrKS9pLFxuICAgICAgICAgKHJlc3VsdCwgW3RvdGFsLCByZXVzZWQsIHBhY2tSZXVzZWRdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvYmplY3RzID0gb2JqZWN0RW51bWVyYXRpb25SZXN1bHQocmVzdWx0LnJlbW90ZU1lc3NhZ2VzKTtcbiAgICAgICAgICAgIG9iamVjdHMudG90YWwgPSBhc09iamVjdENvdW50KHRvdGFsKTtcbiAgICAgICAgICAgIG9iamVjdHMucmV1c2VkID0gYXNPYmplY3RDb3VudChyZXVzZWQpO1xuICAgICAgICAgICAgb2JqZWN0cy5wYWNrUmV1c2VkID0gYXNOdW1iZXIocGFja1JldXNlZCk7XG4gICAgICAgICB9XG4gICAgICApLFxuICAgXTtcbiIsICJpbXBvcnQgeyBQdXNoUmVzdWx0UmVtb3RlTWVzc2FnZXMsIFJlbW90ZU1lc3NhZ2VSZXN1bHQsIFJlbW90ZU1lc3NhZ2VzIH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBhc051bWJlciwgcGFyc2VTdHJpbmdSZXNwb25zZSwgUmVtb3RlTGluZVBhcnNlciB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IHJlbW90ZU1lc3NhZ2VzT2JqZWN0UGFyc2VycyB9IGZyb20gJy4vcGFyc2UtcmVtb3RlLW9iamVjdHMnO1xuXG5jb25zdCBwYXJzZXJzOiBSZW1vdGVMaW5lUGFyc2VyPFJlbW90ZU1lc3NhZ2VSZXN1bHQ8UHVzaFJlc3VsdFJlbW90ZU1lc3NhZ2VzIHwgUmVtb3RlTWVzc2FnZXM+PltdID1cbiAgIFtcbiAgICAgIG5ldyBSZW1vdGVMaW5lUGFyc2VyKC9ecmVtb3RlOlxccyooLispJC8sIChyZXN1bHQsIFt0ZXh0XSkgPT4ge1xuICAgICAgICAgcmVzdWx0LnJlbW90ZU1lc3NhZ2VzLmFsbC5wdXNoKHRleHQudHJpbSgpKTtcbiAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0pLFxuICAgICAgLi4ucmVtb3RlTWVzc2FnZXNPYmplY3RQYXJzZXJzLFxuICAgICAgbmV3IFJlbW90ZUxpbmVQYXJzZXIoXG4gICAgICAgICBbL2NyZWF0ZSBhICg/OnB1bGx8bWVyZ2UpIHJlcXVlc3QvaSwgL1xccyhodHRwcz86XFwvXFwvXFxTKykkL10sXG4gICAgICAgICAocmVzdWx0LCBbcHVsbFJlcXVlc3RVcmxdKSA9PiB7XG4gICAgICAgICAgICAocmVzdWx0LnJlbW90ZU1lc3NhZ2VzIGFzIFB1c2hSZXN1bHRSZW1vdGVNZXNzYWdlcykucHVsbFJlcXVlc3RVcmwgPSBwdWxsUmVxdWVzdFVybDtcbiAgICAgICAgIH1cbiAgICAgICksXG4gICAgICBuZXcgUmVtb3RlTGluZVBhcnNlcihcbiAgICAgICAgIFsvZm91bmQgKFxcZCspIHZ1bG5lcmFiaWxpdGllcy4rXFwoKFteKV0rKVxcKS9pLCAvXFxzKGh0dHBzPzpcXC9cXC9cXFMrKSQvXSxcbiAgICAgICAgIChyZXN1bHQsIFtjb3VudCwgc3VtbWFyeSwgdXJsXSkgPT4ge1xuICAgICAgICAgICAgKHJlc3VsdC5yZW1vdGVNZXNzYWdlcyBhcyBQdXNoUmVzdWx0UmVtb3RlTWVzc2FnZXMpLnZ1bG5lcmFiaWxpdGllcyA9IHtcbiAgICAgICAgICAgICAgIGNvdW50OiBhc051bWJlcihjb3VudCksXG4gICAgICAgICAgICAgICBzdW1tYXJ5LFxuICAgICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgIH1cbiAgICAgICksXG4gICBdO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VSZW1vdGVNZXNzYWdlczxUIGV4dGVuZHMgUmVtb3RlTWVzc2FnZXMgPSBSZW1vdGVNZXNzYWdlcz4oXG4gICBfc3RkT3V0OiBzdHJpbmcsXG4gICBzdGRFcnI6IHN0cmluZ1xuKTogUmVtb3RlTWVzc2FnZVJlc3VsdCB7XG4gICByZXR1cm4gcGFyc2VTdHJpbmdSZXNwb25zZSh7IHJlbW90ZU1lc3NhZ2VzOiBuZXcgUmVtb3RlTWVzc2FnZVN1bW1hcnkoKSBhcyBUIH0sIHBhcnNlcnMsIHN0ZEVycik7XG59XG5cbmV4cG9ydCBjbGFzcyBSZW1vdGVNZXNzYWdlU3VtbWFyeSBpbXBsZW1lbnRzIFJlbW90ZU1lc3NhZ2VzIHtcbiAgIHB1YmxpYyByZWFkb25seSBhbGw6IHN0cmluZ1tdID0gW107XG59XG4iLCAiaW1wb3J0IHsgUHVsbERldGFpbCwgUHVsbEZhaWxlZFJlc3VsdCwgUHVsbFJlc3VsdCwgUmVtb3RlTWVzc2FnZXMgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IFB1bGxGYWlsZWRTdW1tYXJ5LCBQdWxsU3VtbWFyeSB9IGZyb20gJy4uL3Jlc3BvbnNlcy9QdWxsU3VtbWFyeSc7XG5pbXBvcnQgeyBUYXNrUGFyc2VyIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgYXBwZW5kLCBMaW5lUGFyc2VyLCBwYXJzZVN0cmluZ1Jlc3BvbnNlIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgcGFyc2VSZW1vdGVNZXNzYWdlcyB9IGZyb20gJy4vcGFyc2UtcmVtb3RlLW1lc3NhZ2VzJztcblxuY29uc3QgRklMRV9VUERBVEVfUkVHRVggPSAvXlxccyooLis/KVxccytcXHxcXHMrXFxkK1xccyooXFwrKikoLSopLztcbmNvbnN0IFNVTU1BUllfUkVHRVggPSAvKFxcZCspXFxEKygoXFxkKylcXEQrXFwoXFwrXFwpKT8oXFxEKyhcXGQrKVxcRCtcXCgtXFwpKT8vO1xuY29uc3QgQUNUSU9OX1JFR0VYID0gL14oY3JlYXRlfGRlbGV0ZSkgbW9kZSBcXGQrICguKykvO1xuXG5jb25zdCBwYXJzZXJzOiBMaW5lUGFyc2VyPFB1bGxSZXN1bHQ+W10gPSBbXG4gICBuZXcgTGluZVBhcnNlcihGSUxFX1VQREFURV9SRUdFWCwgKHJlc3VsdCwgW2ZpbGUsIGluc2VydGlvbnMsIGRlbGV0aW9uc10pID0+IHtcbiAgICAgIHJlc3VsdC5maWxlcy5wdXNoKGZpbGUpO1xuXG4gICAgICBpZiAoaW5zZXJ0aW9ucykge1xuICAgICAgICAgcmVzdWx0Lmluc2VydGlvbnNbZmlsZV0gPSBpbnNlcnRpb25zLmxlbmd0aDtcbiAgICAgIH1cblxuICAgICAgaWYgKGRlbGV0aW9ucykge1xuICAgICAgICAgcmVzdWx0LmRlbGV0aW9uc1tmaWxlXSA9IGRlbGV0aW9ucy5sZW5ndGg7XG4gICAgICB9XG4gICB9KSxcbiAgIG5ldyBMaW5lUGFyc2VyKFNVTU1BUllfUkVHRVgsIChyZXN1bHQsIFtjaGFuZ2VzLCAsIGluc2VydGlvbnMsICwgZGVsZXRpb25zXSkgPT4ge1xuICAgICAgaWYgKGluc2VydGlvbnMgIT09IHVuZGVmaW5lZCB8fCBkZWxldGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgcmVzdWx0LnN1bW1hcnkuY2hhbmdlcyA9ICtjaGFuZ2VzIHx8IDA7XG4gICAgICAgICByZXN1bHQuc3VtbWFyeS5pbnNlcnRpb25zID0gK2luc2VydGlvbnMgfHwgMDtcbiAgICAgICAgIHJlc3VsdC5zdW1tYXJ5LmRlbGV0aW9ucyA9ICtkZWxldGlvbnMgfHwgMDtcbiAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgfSksXG4gICBuZXcgTGluZVBhcnNlcihBQ1RJT05fUkVHRVgsIChyZXN1bHQsIFthY3Rpb24sIGZpbGVdKSA9PiB7XG4gICAgICBhcHBlbmQocmVzdWx0LmZpbGVzLCBmaWxlKTtcbiAgICAgIGFwcGVuZChhY3Rpb24gPT09ICdjcmVhdGUnID8gcmVzdWx0LmNyZWF0ZWQgOiByZXN1bHQuZGVsZXRlZCwgZmlsZSk7XG4gICB9KSxcbl07XG5cbmNvbnN0IGVycm9yUGFyc2VyczogTGluZVBhcnNlcjxQdWxsRmFpbGVkUmVzdWx0PltdID0gW1xuICAgbmV3IExpbmVQYXJzZXIoL15mcm9tXFxzKC4rKSQvaSwgKHJlc3VsdCwgW3JlbW90ZV0pID0+IHZvaWQgKHJlc3VsdC5yZW1vdGUgPSByZW1vdGUpKSxcbiAgIG5ldyBMaW5lUGFyc2VyKC9eZmF0YWw6XFxzKC4rKSQvLCAocmVzdWx0LCBbbWVzc2FnZV0pID0+IHZvaWQgKHJlc3VsdC5tZXNzYWdlID0gbWVzc2FnZSkpLFxuICAgbmV3IExpbmVQYXJzZXIoXG4gICAgICAvKFthLXowLTldKylcXC5cXC4oW2EtejAtOV0rKVxccysoXFxTKylcXHMrLT5cXHMrKFxcUyspJC8sXG4gICAgICAocmVzdWx0LCBbaGFzaExvY2FsLCBoYXNoUmVtb3RlLCBicmFuY2hMb2NhbCwgYnJhbmNoUmVtb3RlXSkgPT4ge1xuICAgICAgICAgcmVzdWx0LmJyYW5jaC5sb2NhbCA9IGJyYW5jaExvY2FsO1xuICAgICAgICAgcmVzdWx0Lmhhc2gubG9jYWwgPSBoYXNoTG9jYWw7XG4gICAgICAgICByZXN1bHQuYnJhbmNoLnJlbW90ZSA9IGJyYW5jaFJlbW90ZTtcbiAgICAgICAgIHJlc3VsdC5oYXNoLnJlbW90ZSA9IGhhc2hSZW1vdGU7XG4gICAgICB9XG4gICApLFxuXTtcblxuZXhwb3J0IGNvbnN0IHBhcnNlUHVsbERldGFpbDogVGFza1BhcnNlcjxzdHJpbmcsIFB1bGxEZXRhaWw+ID0gKHN0ZE91dCwgc3RkRXJyKSA9PiB7XG4gICByZXR1cm4gcGFyc2VTdHJpbmdSZXNwb25zZShuZXcgUHVsbFN1bW1hcnkoKSwgcGFyc2VycywgW3N0ZE91dCwgc3RkRXJyXSk7XG59O1xuXG5leHBvcnQgY29uc3QgcGFyc2VQdWxsUmVzdWx0OiBUYXNrUGFyc2VyPHN0cmluZywgUHVsbFJlc3VsdD4gPSAoc3RkT3V0LCBzdGRFcnIpID0+IHtcbiAgIHJldHVybiBPYmplY3QuYXNzaWduKFxuICAgICAgbmV3IFB1bGxTdW1tYXJ5KCksXG4gICAgICBwYXJzZVB1bGxEZXRhaWwoc3RkT3V0LCBzdGRFcnIpLFxuICAgICAgcGFyc2VSZW1vdGVNZXNzYWdlczxSZW1vdGVNZXNzYWdlcz4oc3RkT3V0LCBzdGRFcnIpXG4gICApO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUHVsbEVycm9yUmVzdWx0KHN0ZE91dDogc3RyaW5nLCBzdGRFcnI6IHN0cmluZykge1xuICAgY29uc3QgcHVsbEVycm9yID0gcGFyc2VTdHJpbmdSZXNwb25zZShuZXcgUHVsbEZhaWxlZFN1bW1hcnkoKSwgZXJyb3JQYXJzZXJzLCBbc3RkT3V0LCBzdGRFcnJdKTtcblxuICAgcmV0dXJuIHB1bGxFcnJvci5tZXNzYWdlICYmIHB1bGxFcnJvcjtcbn1cbiIsICJpbXBvcnQgeyBNZXJnZURldGFpbCwgTWVyZ2VSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IE1lcmdlU3VtbWFyeUNvbmZsaWN0LCBNZXJnZVN1bW1hcnlEZXRhaWwgfSBmcm9tICcuLi9yZXNwb25zZXMvTWVyZ2VTdW1tYXJ5JztcbmltcG9ydCB7IFRhc2tQYXJzZXIgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBMaW5lUGFyc2VyLCBwYXJzZVN0cmluZ1Jlc3BvbnNlIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgcGFyc2VQdWxsUmVzdWx0IH0gZnJvbSAnLi9wYXJzZS1wdWxsJztcblxuY29uc3QgcGFyc2VyczogTGluZVBhcnNlcjxNZXJnZURldGFpbD5bXSA9IFtcbiAgIG5ldyBMaW5lUGFyc2VyKC9eQXV0by1tZXJnaW5nXFxzKyguKykkLywgKHN1bW1hcnksIFthdXRvTWVyZ2VdKSA9PiB7XG4gICAgICBzdW1tYXJ5Lm1lcmdlcy5wdXNoKGF1dG9NZXJnZSk7XG4gICB9KSxcbiAgIG5ldyBMaW5lUGFyc2VyKC9eQ09ORkxJQ1RcXHMrXFwoKC4rKVxcKTogTWVyZ2UgY29uZmxpY3QgaW4gKC4rKSQvLCAoc3VtbWFyeSwgW3JlYXNvbiwgZmlsZV0pID0+IHtcbiAgICAgIHN1bW1hcnkuY29uZmxpY3RzLnB1c2gobmV3IE1lcmdlU3VtbWFyeUNvbmZsaWN0KHJlYXNvbiwgZmlsZSkpO1xuICAgfSksXG4gICBuZXcgTGluZVBhcnNlcihcbiAgICAgIC9eQ09ORkxJQ1RcXHMrXFwoKC4rXFwvZGVsZXRlKVxcKTogKC4rKSBkZWxldGVkIGluICguKykgYW5kLyxcbiAgICAgIChzdW1tYXJ5LCBbcmVhc29uLCBmaWxlLCBkZWxldGVSZWZdKSA9PiB7XG4gICAgICAgICBzdW1tYXJ5LmNvbmZsaWN0cy5wdXNoKG5ldyBNZXJnZVN1bW1hcnlDb25mbGljdChyZWFzb24sIGZpbGUsIHsgZGVsZXRlUmVmIH0pKTtcbiAgICAgIH1cbiAgICksXG4gICBuZXcgTGluZVBhcnNlcigvXkNPTkZMSUNUXFxzK1xcKCguKylcXCk6LywgKHN1bW1hcnksIFtyZWFzb25dKSA9PiB7XG4gICAgICBzdW1tYXJ5LmNvbmZsaWN0cy5wdXNoKG5ldyBNZXJnZVN1bW1hcnlDb25mbGljdChyZWFzb24sIG51bGwpKTtcbiAgIH0pLFxuICAgbmV3IExpbmVQYXJzZXIoL15BdXRvbWF0aWMgbWVyZ2UgZmFpbGVkO1xccysoLispJC8sIChzdW1tYXJ5LCBbcmVzdWx0XSkgPT4ge1xuICAgICAgc3VtbWFyeS5yZXN1bHQgPSByZXN1bHQ7XG4gICB9KSxcbl07XG5cbi8qKlxuICogUGFyc2UgdGhlIGNvbXBsZXRlIHJlc3BvbnNlIGZyb20gYGdpdC5tZXJnZWBcbiAqL1xuZXhwb3J0IGNvbnN0IHBhcnNlTWVyZ2VSZXN1bHQ6IFRhc2tQYXJzZXI8c3RyaW5nLCBNZXJnZVJlc3VsdD4gPSAoc3RkT3V0LCBzdGRFcnIpID0+IHtcbiAgIHJldHVybiBPYmplY3QuYXNzaWduKHBhcnNlTWVyZ2VEZXRhaWwoc3RkT3V0LCBzdGRFcnIpLCBwYXJzZVB1bGxSZXN1bHQoc3RkT3V0LCBzdGRFcnIpKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIG1lcmdlIHNwZWNpZmljIGRldGFpbCAoaWU6IG5vdCB0aGUgY29udGVudCBhbHNvIGF2YWlsYWJsZSBpbiB0aGUgcHVsbCBkZXRhaWwpIGZyb20gYGdpdC5tbmVyZ2VgXG4gKiBAcGFyYW0gc3RkT3V0XG4gKi9cbmV4cG9ydCBjb25zdCBwYXJzZU1lcmdlRGV0YWlsOiBUYXNrUGFyc2VyPHN0cmluZywgTWVyZ2VEZXRhaWw+ID0gKHN0ZE91dCkgPT4ge1xuICAgcmV0dXJuIHBhcnNlU3RyaW5nUmVzcG9uc2UobmV3IE1lcmdlU3VtbWFyeURldGFpbCgpLCBwYXJzZXJzLCBzdGRPdXQpO1xufTtcbiIsICJpbXBvcnQgeyBNZXJnZVJlc3VsdCB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuaW1wb3J0IHsgR2l0UmVzcG9uc2VFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9naXQtcmVzcG9uc2UtZXJyb3InO1xuaW1wb3J0IHsgcGFyc2VNZXJnZVJlc3VsdCB9IGZyb20gJy4uL3BhcnNlcnMvcGFyc2UtbWVyZ2UnO1xuaW1wb3J0IHsgU3RyaW5nVGFzayB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGNvbmZpZ3VyYXRpb25FcnJvclRhc2ssIEVtcHR5VGFzayB9IGZyb20gJy4vdGFzayc7XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZVRhc2soY3VzdG9tQXJnczogc3RyaW5nW10pOiBFbXB0eVRhc2sgfCBTdHJpbmdUYXNrPE1lcmdlUmVzdWx0PiB7XG4gICBpZiAoIWN1c3RvbUFyZ3MubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gY29uZmlndXJhdGlvbkVycm9yVGFzaygnR2l0Lm1lcmdlIHJlcXVpcmVzIGF0IGxlYXN0IG9uZSBvcHRpb24nKTtcbiAgIH1cblxuICAgcmV0dXJuIHtcbiAgICAgIGNvbW1hbmRzOiBbJ21lcmdlJywgLi4uY3VzdG9tQXJnc10sXG4gICAgICBmb3JtYXQ6ICd1dGYtOCcsXG4gICAgICBwYXJzZXIoc3RkT3V0LCBzdGRFcnIpOiBNZXJnZVJlc3VsdCB7XG4gICAgICAgICBjb25zdCBtZXJnZSA9IHBhcnNlTWVyZ2VSZXN1bHQoc3RkT3V0LCBzdGRFcnIpO1xuICAgICAgICAgaWYgKG1lcmdlLmZhaWxlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEdpdFJlc3BvbnNlRXJyb3IobWVyZ2UpO1xuICAgICAgICAgfVxuXG4gICAgICAgICByZXR1cm4gbWVyZ2U7XG4gICAgICB9LFxuICAgfTtcbn1cbiIsICJpbXBvcnQge1xuICAgUHVzaERldGFpbCxcbiAgIFB1c2hSZXN1bHQsXG4gICBQdXNoUmVzdWx0UHVzaGVkSXRlbSxcbiAgIFB1c2hSZXN1bHRSZW1vdGVNZXNzYWdlcyxcbn0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBUYXNrUGFyc2VyIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgTGluZVBhcnNlciwgcGFyc2VTdHJpbmdSZXNwb25zZSB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IHBhcnNlUmVtb3RlTWVzc2FnZXMgfSBmcm9tICcuL3BhcnNlLXJlbW90ZS1tZXNzYWdlcyc7XG5cbmZ1bmN0aW9uIHB1c2hSZXN1bHRQdXNoZWRJdGVtKGxvY2FsOiBzdHJpbmcsIHJlbW90ZTogc3RyaW5nLCBzdGF0dXM6IHN0cmluZyk6IFB1c2hSZXN1bHRQdXNoZWRJdGVtIHtcbiAgIGNvbnN0IGRlbGV0ZWQgPSBzdGF0dXMuaW5jbHVkZXMoJ2RlbGV0ZWQnKTtcbiAgIGNvbnN0IHRhZyA9IHN0YXR1cy5pbmNsdWRlcygndGFnJykgfHwgL15yZWZzXFwvdGFncy8udGVzdChsb2NhbCk7XG4gICBjb25zdCBhbHJlYWR5VXBkYXRlZCA9ICFzdGF0dXMuaW5jbHVkZXMoJ25ldycpO1xuXG4gICByZXR1cm4ge1xuICAgICAgZGVsZXRlZCxcbiAgICAgIHRhZyxcbiAgICAgIGJyYW5jaDogIXRhZyxcbiAgICAgIG5ldzogIWFscmVhZHlVcGRhdGVkLFxuICAgICAgYWxyZWFkeVVwZGF0ZWQsXG4gICAgICBsb2NhbCxcbiAgICAgIHJlbW90ZSxcbiAgIH07XG59XG5cbmNvbnN0IHBhcnNlcnM6IExpbmVQYXJzZXI8UHVzaERldGFpbD5bXSA9IFtcbiAgIG5ldyBMaW5lUGFyc2VyKC9eUHVzaGluZyB0byAoLispJC8sIChyZXN1bHQsIFtyZXBvXSkgPT4ge1xuICAgICAgcmVzdWx0LnJlcG8gPSByZXBvO1xuICAgfSksXG4gICBuZXcgTGluZVBhcnNlcigvXnVwZGF0aW5nIGxvY2FsIHRyYWNraW5nIHJlZiAnKC4rKScvLCAocmVzdWx0LCBbbG9jYWxdKSA9PiB7XG4gICAgICByZXN1bHQucmVmID0ge1xuICAgICAgICAgLi4uKHJlc3VsdC5yZWYgfHwge30pLFxuICAgICAgICAgbG9jYWwsXG4gICAgICB9O1xuICAgfSksXG4gICBuZXcgTGluZVBhcnNlcigvXls9Ki1dXFxzKyhbXjpdKyk6KFxcUyspXFxzK1xcWyguKyldJC8sIChyZXN1bHQsIFtsb2NhbCwgcmVtb3RlLCB0eXBlXSkgPT4ge1xuICAgICAgcmVzdWx0LnB1c2hlZC5wdXNoKHB1c2hSZXN1bHRQdXNoZWRJdGVtKGxvY2FsLCByZW1vdGUsIHR5cGUpKTtcbiAgIH0pLFxuICAgbmV3IExpbmVQYXJzZXIoXG4gICAgICAvXkJyYW5jaCAnKFteJ10rKScgc2V0IHVwIHRvIHRyYWNrIHJlbW90ZSBicmFuY2ggJyhbXiddKyknIGZyb20gJyhbXiddKyknLyxcbiAgICAgIChyZXN1bHQsIFtsb2NhbCwgcmVtb3RlLCByZW1vdGVOYW1lXSkgPT4ge1xuICAgICAgICAgcmVzdWx0LmJyYW5jaCA9IHtcbiAgICAgICAgICAgIC4uLihyZXN1bHQuYnJhbmNoIHx8IHt9KSxcbiAgICAgICAgICAgIGxvY2FsLFxuICAgICAgICAgICAgcmVtb3RlLFxuICAgICAgICAgICAgcmVtb3RlTmFtZSxcbiAgICAgICAgIH07XG4gICAgICB9XG4gICApLFxuICAgbmV3IExpbmVQYXJzZXIoXG4gICAgICAvXihbXjpdKyk6KFxcUyspXFxzKyhbYS16MC05XSspXFwuXFwuKFthLXowLTldKykkLyxcbiAgICAgIChyZXN1bHQsIFtsb2NhbCwgcmVtb3RlLCBmcm9tLCB0b10pID0+IHtcbiAgICAgICAgIHJlc3VsdC51cGRhdGUgPSB7XG4gICAgICAgICAgICBoZWFkOiB7XG4gICAgICAgICAgICAgICBsb2NhbCxcbiAgICAgICAgICAgICAgIHJlbW90ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXNoOiB7XG4gICAgICAgICAgICAgICBmcm9tLFxuICAgICAgICAgICAgICAgdG8sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgfTtcbiAgICAgIH1cbiAgICksXG5dO1xuXG5leHBvcnQgY29uc3QgcGFyc2VQdXNoUmVzdWx0OiBUYXNrUGFyc2VyPHN0cmluZywgUHVzaFJlc3VsdD4gPSAoc3RkT3V0LCBzdGRFcnIpID0+IHtcbiAgIGNvbnN0IHB1c2hEZXRhaWwgPSBwYXJzZVB1c2hEZXRhaWwoc3RkT3V0LCBzdGRFcnIpO1xuICAgY29uc3QgcmVzcG9uc2VEZXRhaWwgPSBwYXJzZVJlbW90ZU1lc3NhZ2VzPFB1c2hSZXN1bHRSZW1vdGVNZXNzYWdlcz4oc3RkT3V0LCBzdGRFcnIpO1xuXG4gICByZXR1cm4ge1xuICAgICAgLi4ucHVzaERldGFpbCxcbiAgICAgIC4uLnJlc3BvbnNlRGV0YWlsLFxuICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBwYXJzZVB1c2hEZXRhaWw6IFRhc2tQYXJzZXI8c3RyaW5nLCBQdXNoRGV0YWlsPiA9IChzdGRPdXQsIHN0ZEVycikgPT4ge1xuICAgcmV0dXJuIHBhcnNlU3RyaW5nUmVzcG9uc2UoeyBwdXNoZWQ6IFtdIH0sIHBhcnNlcnMsIFtzdGRPdXQsIHN0ZEVycl0pO1xufTtcbiIsICJpbXBvcnQgeyBQdXNoUmVzdWx0IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBwYXJzZVB1c2hSZXN1bHQgYXMgcGFyc2VyIH0gZnJvbSAnLi4vcGFyc2Vycy9wYXJzZS1wdXNoJztcbmltcG9ydCB7IFN0cmluZ1Rhc2sgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBhcHBlbmQsIHJlbW92ZSB9IGZyb20gJy4uL3V0aWxzJztcblxudHlwZSBQdXNoUmVmID0geyByZW1vdGU/OiBzdHJpbmc7IGJyYW5jaD86IHN0cmluZyB9O1xuXG5leHBvcnQgZnVuY3Rpb24gcHVzaFRhZ3NUYXNrKHJlZjogUHVzaFJlZiA9IHt9LCBjdXN0b21BcmdzOiBzdHJpbmdbXSk6IFN0cmluZ1Rhc2s8UHVzaFJlc3VsdD4ge1xuICAgYXBwZW5kKGN1c3RvbUFyZ3MsICctLXRhZ3MnKTtcbiAgIHJldHVybiBwdXNoVGFzayhyZWYsIGN1c3RvbUFyZ3MpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHVzaFRhc2socmVmOiBQdXNoUmVmID0ge30sIGN1c3RvbUFyZ3M6IHN0cmluZ1tdKTogU3RyaW5nVGFzazxQdXNoUmVzdWx0PiB7XG4gICBjb25zdCBjb21tYW5kcyA9IFsncHVzaCcsIC4uLmN1c3RvbUFyZ3NdO1xuICAgaWYgKHJlZi5icmFuY2gpIHtcbiAgICAgIGNvbW1hbmRzLnNwbGljZSgxLCAwLCByZWYuYnJhbmNoKTtcbiAgIH1cbiAgIGlmIChyZWYucmVtb3RlKSB7XG4gICAgICBjb21tYW5kcy5zcGxpY2UoMSwgMCwgcmVmLnJlbW90ZSk7XG4gICB9XG5cbiAgIHJlbW92ZShjb21tYW5kcywgJy12Jyk7XG4gICBhcHBlbmQoY29tbWFuZHMsICctLXZlcmJvc2UnKTtcbiAgIGFwcGVuZChjb21tYW5kcywgJy0tcG9yY2VsYWluJyk7XG5cbiAgIHJldHVybiB7XG4gICAgICBjb21tYW5kcyxcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIHBhcnNlcixcbiAgIH07XG59XG4iLCAiaW1wb3J0IHsgU2ltcGxlR2l0IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBTaW1wbGVHaXRBcGkgfSBmcm9tICcuLi9zaW1wbGUtZ2l0LWFwaSc7XG5pbXBvcnQgeyBnZXRUcmFpbGluZ09wdGlvbnMsIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IHN0cmFpZ2h0VGhyb3VnaEJ1ZmZlclRhc2ssIHN0cmFpZ2h0VGhyb3VnaFN0cmluZ1Rhc2sgfSBmcm9tICcuL3Rhc2snO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKTogUGljazxTaW1wbGVHaXQsICdzaG93QnVmZmVyJyB8ICdzaG93Jz4ge1xuICAgcmV0dXJuIHtcbiAgICAgIHNob3dCdWZmZXIodGhpczogU2ltcGxlR2l0QXBpKSB7XG4gICAgICAgICBjb25zdCBjb21tYW5kcyA9IFsnc2hvdycsIC4uLmdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMsIDEpXTtcbiAgICAgICAgIGlmICghY29tbWFuZHMuaW5jbHVkZXMoJy0tYmluYXJ5JykpIHtcbiAgICAgICAgICAgIGNvbW1hbmRzLnNwbGljZSgxLCAwLCAnLS1iaW5hcnknKTtcbiAgICAgICAgIH1cblxuICAgICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICAgICAgICBzdHJhaWdodFRocm91Z2hCdWZmZXJUYXNrKGNvbW1hbmRzKSxcbiAgICAgICAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICAgICAgICApO1xuICAgICAgfSxcblxuICAgICAgc2hvdyh0aGlzOiBTaW1wbGVHaXRBcGkpIHtcbiAgICAgICAgIGNvbnN0IGNvbW1hbmRzID0gWydzaG93JywgLi4uZ2V0VHJhaWxpbmdPcHRpb25zKGFyZ3VtZW50cywgMSldO1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICAgICAgICBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKGNvbW1hbmRzKSxcbiAgICAgICAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICAgICAgICApO1xuICAgICAgfSxcbiAgIH07XG59XG4iLCAiaW1wb3J0IHsgRmlsZVN0YXR1c1Jlc3VsdCB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuXG5leHBvcnQgY29uc3QgZnJvbVBhdGhSZWdleCA9IC9eKC4rKSAtPiAoLispJC87XG5cbmV4cG9ydCBjbGFzcyBGaWxlU3RhdHVzU3VtbWFyeSBpbXBsZW1lbnRzIEZpbGVTdGF0dXNSZXN1bHQge1xuICAgcHVibGljIHJlYWRvbmx5IGZyb206IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICAgY29uc3RydWN0b3IoXG4gICAgICBwdWJsaWMgcGF0aDogc3RyaW5nLFxuICAgICAgcHVibGljIGluZGV4OiBzdHJpbmcsXG4gICAgICBwdWJsaWMgd29ya2luZ19kaXI6IHN0cmluZ1xuICAgKSB7XG4gICAgICBpZiAoJ1InID09PSBpbmRleCArIHdvcmtpbmdfZGlyKSB7XG4gICAgICAgICBjb25zdCBkZXRhaWwgPSBmcm9tUGF0aFJlZ2V4LmV4ZWMocGF0aCkgfHwgW251bGwsIHBhdGgsIHBhdGhdO1xuICAgICAgICAgdGhpcy5mcm9tID0gZGV0YWlsWzFdIHx8ICcnO1xuICAgICAgICAgdGhpcy5wYXRoID0gZGV0YWlsWzJdIHx8ICcnO1xuICAgICAgfVxuICAgfVxufVxuIiwgImltcG9ydCB7IFN0YXR1c1Jlc3VsdCB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuaW1wb3J0IHsgYXBwZW5kLCBOVUxMIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgRmlsZVN0YXR1c1N1bW1hcnkgfSBmcm9tICcuL0ZpbGVTdGF0dXNTdW1tYXJ5JztcblxudHlwZSBTdGF0dXNMaW5lUGFyc2VyID0gKHJlc3VsdDogU3RhdHVzUmVzdWx0LCBmaWxlOiBzdHJpbmcpID0+IHZvaWQ7XG5cbmV4cG9ydCBjbGFzcyBTdGF0dXNTdW1tYXJ5IGltcGxlbWVudHMgU3RhdHVzUmVzdWx0IHtcbiAgIHB1YmxpYyBub3RfYWRkZWQgPSBbXTtcbiAgIHB1YmxpYyBjb25mbGljdGVkID0gW107XG4gICBwdWJsaWMgY3JlYXRlZCA9IFtdO1xuICAgcHVibGljIGRlbGV0ZWQgPSBbXTtcbiAgIHB1YmxpYyBpZ25vcmVkID0gdW5kZWZpbmVkO1xuICAgcHVibGljIG1vZGlmaWVkID0gW107XG4gICBwdWJsaWMgcmVuYW1lZCA9IFtdO1xuICAgcHVibGljIGZpbGVzID0gW107XG4gICBwdWJsaWMgc3RhZ2VkID0gW107XG4gICBwdWJsaWMgYWhlYWQgPSAwO1xuICAgcHVibGljIGJlaGluZCA9IDA7XG4gICBwdWJsaWMgY3VycmVudCA9IG51bGw7XG4gICBwdWJsaWMgdHJhY2tpbmcgPSBudWxsO1xuICAgcHVibGljIGRldGFjaGVkID0gZmFsc2U7XG5cbiAgIHB1YmxpYyBpc0NsZWFuID0gKCkgPT4ge1xuICAgICAgcmV0dXJuICF0aGlzLmZpbGVzLmxlbmd0aDtcbiAgIH07XG59XG5cbmVudW0gUG9yY2VsYWluRmlsZVN0YXR1cyB7XG4gICBBRERFRCA9ICdBJyxcbiAgIERFTEVURUQgPSAnRCcsXG4gICBNT0RJRklFRCA9ICdNJyxcbiAgIFJFTkFNRUQgPSAnUicsXG4gICBDT1BJRUQgPSAnQycsXG4gICBVTk1FUkdFRCA9ICdVJyxcbiAgIFVOVFJBQ0tFRCA9ICc/JyxcbiAgIElHTk9SRUQgPSAnIScsXG4gICBOT05FID0gJyAnLFxufVxuXG5mdW5jdGlvbiByZW5hbWVkRmlsZShsaW5lOiBzdHJpbmcpIHtcbiAgIGNvbnN0IFt0bywgZnJvbV0gPSBsaW5lLnNwbGl0KE5VTEwpO1xuXG4gICByZXR1cm4ge1xuICAgICAgZnJvbTogZnJvbSB8fCB0byxcbiAgICAgIHRvLFxuICAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VyKFxuICAgaW5kZXhYOiBQb3JjZWxhaW5GaWxlU3RhdHVzLFxuICAgaW5kZXhZOiBQb3JjZWxhaW5GaWxlU3RhdHVzLFxuICAgaGFuZGxlcjogU3RhdHVzTGluZVBhcnNlclxuKTogW3N0cmluZywgU3RhdHVzTGluZVBhcnNlcl0ge1xuICAgcmV0dXJuIFtgJHtpbmRleFh9JHtpbmRleFl9YCwgaGFuZGxlcl07XG59XG5cbmZ1bmN0aW9uIGNvbmZsaWN0cyhpbmRleFg6IFBvcmNlbGFpbkZpbGVTdGF0dXMsIC4uLmluZGV4WTogUG9yY2VsYWluRmlsZVN0YXR1c1tdKSB7XG4gICByZXR1cm4gaW5kZXhZLm1hcCgoeSkgPT4gcGFyc2VyKGluZGV4WCwgeSwgKHJlc3VsdCwgZmlsZSkgPT4gYXBwZW5kKHJlc3VsdC5jb25mbGljdGVkLCBmaWxlKSkpO1xufVxuXG5jb25zdCBwYXJzZXJzOiBNYXA8c3RyaW5nLCBTdGF0dXNMaW5lUGFyc2VyPiA9IG5ldyBNYXAoW1xuICAgcGFyc2VyKFBvcmNlbGFpbkZpbGVTdGF0dXMuTk9ORSwgUG9yY2VsYWluRmlsZVN0YXR1cy5BRERFRCwgKHJlc3VsdCwgZmlsZSkgPT5cbiAgICAgIGFwcGVuZChyZXN1bHQuY3JlYXRlZCwgZmlsZSlcbiAgICksXG4gICBwYXJzZXIoUG9yY2VsYWluRmlsZVN0YXR1cy5OT05FLCBQb3JjZWxhaW5GaWxlU3RhdHVzLkRFTEVURUQsIChyZXN1bHQsIGZpbGUpID0+XG4gICAgICBhcHBlbmQocmVzdWx0LmRlbGV0ZWQsIGZpbGUpXG4gICApLFxuICAgcGFyc2VyKFBvcmNlbGFpbkZpbGVTdGF0dXMuTk9ORSwgUG9yY2VsYWluRmlsZVN0YXR1cy5NT0RJRklFRCwgKHJlc3VsdCwgZmlsZSkgPT5cbiAgICAgIGFwcGVuZChyZXN1bHQubW9kaWZpZWQsIGZpbGUpXG4gICApLFxuXG4gICBwYXJzZXIoXG4gICAgICBQb3JjZWxhaW5GaWxlU3RhdHVzLkFEREVELFxuICAgICAgUG9yY2VsYWluRmlsZVN0YXR1cy5OT05FLFxuICAgICAgKHJlc3VsdCwgZmlsZSkgPT4gYXBwZW5kKHJlc3VsdC5jcmVhdGVkLCBmaWxlKSAmJiBhcHBlbmQocmVzdWx0LnN0YWdlZCwgZmlsZSlcbiAgICksXG4gICBwYXJzZXIoXG4gICAgICBQb3JjZWxhaW5GaWxlU3RhdHVzLkFEREVELFxuICAgICAgUG9yY2VsYWluRmlsZVN0YXR1cy5NT0RJRklFRCxcbiAgICAgIChyZXN1bHQsIGZpbGUpID0+XG4gICAgICAgICBhcHBlbmQocmVzdWx0LmNyZWF0ZWQsIGZpbGUpICYmXG4gICAgICAgICBhcHBlbmQocmVzdWx0LnN0YWdlZCwgZmlsZSkgJiZcbiAgICAgICAgIGFwcGVuZChyZXN1bHQubW9kaWZpZWQsIGZpbGUpXG4gICApLFxuXG4gICBwYXJzZXIoXG4gICAgICBQb3JjZWxhaW5GaWxlU3RhdHVzLkRFTEVURUQsXG4gICAgICBQb3JjZWxhaW5GaWxlU3RhdHVzLk5PTkUsXG4gICAgICAocmVzdWx0LCBmaWxlKSA9PiBhcHBlbmQocmVzdWx0LmRlbGV0ZWQsIGZpbGUpICYmIGFwcGVuZChyZXN1bHQuc3RhZ2VkLCBmaWxlKVxuICAgKSxcblxuICAgcGFyc2VyKFxuICAgICAgUG9yY2VsYWluRmlsZVN0YXR1cy5NT0RJRklFRCxcbiAgICAgIFBvcmNlbGFpbkZpbGVTdGF0dXMuTk9ORSxcbiAgICAgIChyZXN1bHQsIGZpbGUpID0+IGFwcGVuZChyZXN1bHQubW9kaWZpZWQsIGZpbGUpICYmIGFwcGVuZChyZXN1bHQuc3RhZ2VkLCBmaWxlKVxuICAgKSxcbiAgIHBhcnNlcihcbiAgICAgIFBvcmNlbGFpbkZpbGVTdGF0dXMuTU9ESUZJRUQsXG4gICAgICBQb3JjZWxhaW5GaWxlU3RhdHVzLk1PRElGSUVELFxuICAgICAgKHJlc3VsdCwgZmlsZSkgPT4gYXBwZW5kKHJlc3VsdC5tb2RpZmllZCwgZmlsZSkgJiYgYXBwZW5kKHJlc3VsdC5zdGFnZWQsIGZpbGUpXG4gICApLFxuXG4gICBwYXJzZXIoUG9yY2VsYWluRmlsZVN0YXR1cy5SRU5BTUVELCBQb3JjZWxhaW5GaWxlU3RhdHVzLk5PTkUsIChyZXN1bHQsIGZpbGUpID0+IHtcbiAgICAgIGFwcGVuZChyZXN1bHQucmVuYW1lZCwgcmVuYW1lZEZpbGUoZmlsZSkpO1xuICAgfSksXG4gICBwYXJzZXIoUG9yY2VsYWluRmlsZVN0YXR1cy5SRU5BTUVELCBQb3JjZWxhaW5GaWxlU3RhdHVzLk1PRElGSUVELCAocmVzdWx0LCBmaWxlKSA9PiB7XG4gICAgICBjb25zdCByZW5hbWVkID0gcmVuYW1lZEZpbGUoZmlsZSk7XG4gICAgICBhcHBlbmQocmVzdWx0LnJlbmFtZWQsIHJlbmFtZWQpO1xuICAgICAgYXBwZW5kKHJlc3VsdC5tb2RpZmllZCwgcmVuYW1lZC50byk7XG4gICB9KSxcbiAgIHBhcnNlcihQb3JjZWxhaW5GaWxlU3RhdHVzLklHTk9SRUQsIFBvcmNlbGFpbkZpbGVTdGF0dXMuSUdOT1JFRCwgKF9yZXN1bHQsIF9maWxlKSA9PiB7XG4gICAgICBhcHBlbmQoKF9yZXN1bHQuaWdub3JlZCA9IF9yZXN1bHQuaWdub3JlZCB8fCBbXSksIF9maWxlKTtcbiAgIH0pLFxuXG4gICBwYXJzZXIoUG9yY2VsYWluRmlsZVN0YXR1cy5VTlRSQUNLRUQsIFBvcmNlbGFpbkZpbGVTdGF0dXMuVU5UUkFDS0VELCAocmVzdWx0LCBmaWxlKSA9PlxuICAgICAgYXBwZW5kKHJlc3VsdC5ub3RfYWRkZWQsIGZpbGUpXG4gICApLFxuXG4gICAuLi5jb25mbGljdHMoUG9yY2VsYWluRmlsZVN0YXR1cy5BRERFRCwgUG9yY2VsYWluRmlsZVN0YXR1cy5BRERFRCwgUG9yY2VsYWluRmlsZVN0YXR1cy5VTk1FUkdFRCksXG4gICAuLi5jb25mbGljdHMoXG4gICAgICBQb3JjZWxhaW5GaWxlU3RhdHVzLkRFTEVURUQsXG4gICAgICBQb3JjZWxhaW5GaWxlU3RhdHVzLkRFTEVURUQsXG4gICAgICBQb3JjZWxhaW5GaWxlU3RhdHVzLlVOTUVSR0VEXG4gICApLFxuICAgLi4uY29uZmxpY3RzKFxuICAgICAgUG9yY2VsYWluRmlsZVN0YXR1cy5VTk1FUkdFRCxcbiAgICAgIFBvcmNlbGFpbkZpbGVTdGF0dXMuQURERUQsXG4gICAgICBQb3JjZWxhaW5GaWxlU3RhdHVzLkRFTEVURUQsXG4gICAgICBQb3JjZWxhaW5GaWxlU3RhdHVzLlVOTUVSR0VEXG4gICApLFxuXG4gICBbXG4gICAgICAnIyMnLFxuICAgICAgKHJlc3VsdCwgbGluZSkgPT4ge1xuICAgICAgICAgY29uc3QgYWhlYWRSZWcgPSAvYWhlYWQgKFxcZCspLztcbiAgICAgICAgIGNvbnN0IGJlaGluZFJlZyA9IC9iZWhpbmQgKFxcZCspLztcbiAgICAgICAgIGNvbnN0IGN1cnJlbnRSZWcgPSAvXiguKz8oPz0oPzpcXC57M318XFxzfCQpKSkvO1xuICAgICAgICAgY29uc3QgdHJhY2tpbmdSZWcgPSAvXFwuezN9KFxcUyopLztcbiAgICAgICAgIGNvbnN0IG9uRW1wdHlCcmFuY2hSZWcgPSAvXFxzb25cXHMoW1xcU10rKSQvO1xuICAgICAgICAgbGV0IHJlZ2V4UmVzdWx0O1xuXG4gICAgICAgICByZWdleFJlc3VsdCA9IGFoZWFkUmVnLmV4ZWMobGluZSk7XG4gICAgICAgICByZXN1bHQuYWhlYWQgPSAocmVnZXhSZXN1bHQgJiYgK3JlZ2V4UmVzdWx0WzFdKSB8fCAwO1xuXG4gICAgICAgICByZWdleFJlc3VsdCA9IGJlaGluZFJlZy5leGVjKGxpbmUpO1xuICAgICAgICAgcmVzdWx0LmJlaGluZCA9IChyZWdleFJlc3VsdCAmJiArcmVnZXhSZXN1bHRbMV0pIHx8IDA7XG5cbiAgICAgICAgIHJlZ2V4UmVzdWx0ID0gY3VycmVudFJlZy5leGVjKGxpbmUpO1xuICAgICAgICAgcmVzdWx0LmN1cnJlbnQgPSByZWdleFJlc3VsdCAmJiByZWdleFJlc3VsdFsxXTtcblxuICAgICAgICAgcmVnZXhSZXN1bHQgPSB0cmFja2luZ1JlZy5leGVjKGxpbmUpO1xuICAgICAgICAgcmVzdWx0LnRyYWNraW5nID0gcmVnZXhSZXN1bHQgJiYgcmVnZXhSZXN1bHRbMV07XG5cbiAgICAgICAgIHJlZ2V4UmVzdWx0ID0gb25FbXB0eUJyYW5jaFJlZy5leGVjKGxpbmUpO1xuICAgICAgICAgcmVzdWx0LmN1cnJlbnQgPSAocmVnZXhSZXN1bHQgJiYgcmVnZXhSZXN1bHRbMV0pIHx8IHJlc3VsdC5jdXJyZW50O1xuXG4gICAgICAgICByZXN1bHQuZGV0YWNoZWQgPSAvXFwobm8gYnJhbmNoXFwpLy50ZXN0KGxpbmUpO1xuICAgICAgfSxcbiAgIF0sXG5dKTtcblxuZXhwb3J0IGNvbnN0IHBhcnNlU3RhdHVzU3VtbWFyeSA9IGZ1bmN0aW9uICh0ZXh0OiBzdHJpbmcpOiBTdGF0dXNSZXN1bHQge1xuICAgY29uc3QgbGluZXMgPSB0ZXh0LnNwbGl0KE5VTEwpO1xuICAgY29uc3Qgc3RhdHVzID0gbmV3IFN0YXR1c1N1bW1hcnkoKTtcblxuICAgZm9yIChsZXQgaSA9IDAsIGwgPSBsaW5lcy5sZW5ndGg7IGkgPCBsOyApIHtcbiAgICAgIGxldCBsaW5lID0gbGluZXNbaSsrXS50cmltKCk7XG5cbiAgICAgIGlmICghbGluZSkge1xuICAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChsaW5lLmNoYXJBdCgwKSA9PT0gUG9yY2VsYWluRmlsZVN0YXR1cy5SRU5BTUVEKSB7XG4gICAgICAgICBsaW5lICs9IE5VTEwgKyAobGluZXNbaSsrXSB8fCAnJyk7XG4gICAgICB9XG5cbiAgICAgIHNwbGl0TGluZShzdGF0dXMsIGxpbmUpO1xuICAgfVxuXG4gICByZXR1cm4gc3RhdHVzO1xufTtcblxuZnVuY3Rpb24gc3BsaXRMaW5lKHJlc3VsdDogU3RhdHVzUmVzdWx0LCBsaW5lU3RyOiBzdHJpbmcpIHtcbiAgIGNvbnN0IHRyaW1tZWQgPSBsaW5lU3RyLnRyaW0oKTtcbiAgIHN3aXRjaCAoJyAnKSB7XG4gICAgICBjYXNlIHRyaW1tZWQuY2hhckF0KDIpOlxuICAgICAgICAgcmV0dXJuIGRhdGEodHJpbW1lZC5jaGFyQXQoMCksIHRyaW1tZWQuY2hhckF0KDEpLCB0cmltbWVkLnN1YnN0cigzKSk7XG4gICAgICBjYXNlIHRyaW1tZWQuY2hhckF0KDEpOlxuICAgICAgICAgcmV0dXJuIGRhdGEoUG9yY2VsYWluRmlsZVN0YXR1cy5OT05FLCB0cmltbWVkLmNoYXJBdCgwKSwgdHJpbW1lZC5zdWJzdHIoMikpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgIHJldHVybjtcbiAgIH1cblxuICAgZnVuY3Rpb24gZGF0YShpbmRleDogc3RyaW5nLCB3b3JraW5nRGlyOiBzdHJpbmcsIHBhdGg6IHN0cmluZykge1xuICAgICAgY29uc3QgcmF3ID0gYCR7aW5kZXh9JHt3b3JraW5nRGlyfWA7XG4gICAgICBjb25zdCBoYW5kbGVyID0gcGFyc2Vycy5nZXQocmF3KTtcblxuICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgIGhhbmRsZXIocmVzdWx0LCBwYXRoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJhdyAhPT0gJyMjJyAmJiByYXcgIT09ICchIScpIHtcbiAgICAgICAgIHJlc3VsdC5maWxlcy5wdXNoKG5ldyBGaWxlU3RhdHVzU3VtbWFyeShwYXRoLnJlcGxhY2UoL1xcMC4rJC8sICcnKSwgaW5kZXgsIHdvcmtpbmdEaXIpKTtcbiAgICAgIH1cbiAgIH1cbn1cbiIsICJpbXBvcnQgeyBTdGF0dXNSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IHBhcnNlU3RhdHVzU3VtbWFyeSB9IGZyb20gJy4uL3Jlc3BvbnNlcy9TdGF0dXNTdW1tYXJ5JztcbmltcG9ydCB7IFN0cmluZ1Rhc2sgfSBmcm9tICcuLi90eXBlcyc7XG5cbmNvbnN0IGlnbm9yZWRPcHRpb25zID0gWyctLW51bGwnLCAnLXonXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXR1c1Rhc2soY3VzdG9tQXJnczogc3RyaW5nW10pOiBTdHJpbmdUYXNrPFN0YXR1c1Jlc3VsdD4ge1xuICAgY29uc3QgY29tbWFuZHMgPSBbXG4gICAgICAnc3RhdHVzJyxcbiAgICAgICctLXBvcmNlbGFpbicsXG4gICAgICAnLWInLFxuICAgICAgJy11JyxcbiAgICAgICctLW51bGwnLFxuICAgICAgLi4uY3VzdG9tQXJncy5maWx0ZXIoKGFyZykgPT4gIWlnbm9yZWRPcHRpb25zLmluY2x1ZGVzKGFyZykpLFxuICAgXTtcblxuICAgcmV0dXJuIHtcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIGNvbW1hbmRzLFxuICAgICAgcGFyc2VyKHRleHQ6IHN0cmluZykge1xuICAgICAgICAgcmV0dXJuIHBhcnNlU3RhdHVzU3VtbWFyeSh0ZXh0KTtcbiAgICAgIH0sXG4gICB9O1xufVxuIiwgImltcG9ydCB0eXBlIHsgU2ltcGxlR2l0QXBpIH0gZnJvbSAnLi4vc2ltcGxlLWdpdC1hcGknO1xuaW1wb3J0IHR5cGUgeyBTaW1wbGVHaXQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IGFzTnVtYmVyLCBFeGl0Q29kZXMsIExpbmVQYXJzZXIsIHBhcnNlU3RyaW5nUmVzcG9uc2UgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmVyc2lvblJlc3VsdCB7XG4gICBtYWpvcjogbnVtYmVyO1xuICAgbWlub3I6IG51bWJlcjtcbiAgIHBhdGNoOiBudW1iZXIgfCBzdHJpbmc7XG4gICBhZ2VudDogc3RyaW5nO1xuICAgaW5zdGFsbGVkOiBib29sZWFuO1xufVxuXG5jb25zdCBOT1RfSU5TVEFMTEVEID0gJ2luc3RhbGxlZD1mYWxzZSc7XG5cbmZ1bmN0aW9uIHZlcnNpb25SZXNwb25zZShcbiAgIG1ham9yID0gMCxcbiAgIG1pbm9yID0gMCxcbiAgIHBhdGNoOiBzdHJpbmcgfCBudW1iZXIgPSAwLFxuICAgYWdlbnQgPSAnJyxcbiAgIGluc3RhbGxlZCA9IHRydWVcbik6IFZlcnNpb25SZXN1bHQge1xuICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgICAgIHtcbiAgICAgICAgIG1ham9yLFxuICAgICAgICAgbWlub3IsXG4gICAgICAgICBwYXRjaCxcbiAgICAgICAgIGFnZW50LFxuICAgICAgICAgaW5zdGFsbGVkLFxuICAgICAgfSxcbiAgICAgICd0b1N0cmluZycsXG4gICAgICB7XG4gICAgICAgICB2YWx1ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLm1ham9yfS4ke3RoaXMubWlub3J9LiR7dGhpcy5wYXRjaH1gO1xuICAgICAgICAgfSxcbiAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIH1cbiAgICk7XG59XG5cbmZ1bmN0aW9uIG5vdEluc3RhbGxlZFJlc3BvbnNlKCkge1xuICAgcmV0dXJuIHZlcnNpb25SZXNwb25zZSgwLCAwLCAwLCAnJywgZmFsc2UpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKTogUGljazxTaW1wbGVHaXQsICd2ZXJzaW9uJz4ge1xuICAgcmV0dXJuIHtcbiAgICAgIHZlcnNpb24odGhpczogU2ltcGxlR2l0QXBpKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcnVuVGFzayh7XG4gICAgICAgICAgICBjb21tYW5kczogWyctLXZlcnNpb24nXSxcbiAgICAgICAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgICAgICAgIHBhcnNlcjogdmVyc2lvblBhcnNlcixcbiAgICAgICAgICAgIG9uRXJyb3IocmVzdWx0LCBlcnJvciwgZG9uZSwgZmFpbCkge1xuICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5leGl0Q29kZSA9PT0gRXhpdENvZGVzLk5PVF9GT1VORCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUoQnVmZmVyLmZyb20oTk9UX0lOU1RBTExFRCkpO1xuICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICBmYWlsKGVycm9yKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICB9KTtcbiAgICAgIH0sXG4gICB9O1xufVxuXG5jb25zdCBwYXJzZXJzOiBMaW5lUGFyc2VyPFZlcnNpb25SZXN1bHQ+W10gPSBbXG4gICBuZXcgTGluZVBhcnNlcihcbiAgICAgIC92ZXJzaW9uIChcXGQrKVxcLihcXGQrKVxcLihcXGQrKSg/OlxccypcXCgoLispXFwpKT8vLFxuICAgICAgKHJlc3VsdCwgW21ham9yLCBtaW5vciwgcGF0Y2gsIGFnZW50ID0gJyddKSA9PiB7XG4gICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgICAgdmVyc2lvblJlc3BvbnNlKGFzTnVtYmVyKG1ham9yKSwgYXNOdW1iZXIobWlub3IpLCBhc051bWJlcihwYXRjaCksIGFnZW50KVxuICAgICAgICAgKTtcbiAgICAgIH1cbiAgICksXG4gICBuZXcgTGluZVBhcnNlcihcbiAgICAgIC92ZXJzaW9uIChcXGQrKVxcLihcXGQrKVxcLihcXEQrKSguKyk/JC8sXG4gICAgICAocmVzdWx0LCBbbWFqb3IsIG1pbm9yLCBwYXRjaCwgYWdlbnQgPSAnJ10pID0+IHtcbiAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzdWx0LCB2ZXJzaW9uUmVzcG9uc2UoYXNOdW1iZXIobWFqb3IpLCBhc051bWJlcihtaW5vciksIHBhdGNoLCBhZ2VudCkpO1xuICAgICAgfVxuICAgKSxcbl07XG5cbmZ1bmN0aW9uIHZlcnNpb25QYXJzZXIoc3RkT3V0OiBzdHJpbmcpIHtcbiAgIGlmIChzdGRPdXQgPT09IE5PVF9JTlNUQUxMRUQpIHtcbiAgICAgIHJldHVybiBub3RJbnN0YWxsZWRSZXNwb25zZSgpO1xuICAgfVxuXG4gICByZXR1cm4gcGFyc2VTdHJpbmdSZXNwb25zZSh2ZXJzaW9uUmVzcG9uc2UoMCwgMCwgMCwgc3RkT3V0KSwgcGFyc2Vycywgc3RkT3V0KTtcbn1cbiIsICJpbXBvcnQgeyBTaW1wbGVHaXRCYXNlIH0gZnJvbSAnLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyB0YXNrQ2FsbGJhY2sgfSBmcm9tICcuL3Rhc2stY2FsbGJhY2snO1xuaW1wb3J0IHsgY2hhbmdlV29ya2luZ0RpcmVjdG9yeVRhc2sgfSBmcm9tICcuL3Rhc2tzL2NoYW5nZS13b3JraW5nLWRpcmVjdG9yeSc7XG5pbXBvcnQgY2hlY2tvdXQgZnJvbSAnLi90YXNrcy9jaGVja291dCc7XG5pbXBvcnQgY291bnRPYmplY3RzIGZyb20gJy4vdGFza3MvY291bnQtb2JqZWN0cyc7XG5pbXBvcnQgY29tbWl0IGZyb20gJy4vdGFza3MvY29tbWl0JztcbmltcG9ydCBjb25maWcgZnJvbSAnLi90YXNrcy9jb25maWcnO1xuaW1wb3J0IGZpcnN0Q29tbWl0IGZyb20gJy4vdGFza3MvZmlyc3QtY29tbWl0JztcbmltcG9ydCBncmVwIGZyb20gJy4vdGFza3MvZ3JlcCc7XG5pbXBvcnQgeyBoYXNoT2JqZWN0VGFzayB9IGZyb20gJy4vdGFza3MvaGFzaC1vYmplY3QnO1xuaW1wb3J0IHsgaW5pdFRhc2sgfSBmcm9tICcuL3Rhc2tzL2luaXQnO1xuaW1wb3J0IGxvZyBmcm9tICcuL3Rhc2tzL2xvZyc7XG5pbXBvcnQgeyBtZXJnZVRhc2sgfSBmcm9tICcuL3Rhc2tzL21lcmdlJztcbmltcG9ydCB7IHB1c2hUYXNrIH0gZnJvbSAnLi90YXNrcy9wdXNoJztcbmltcG9ydCBzaG93IGZyb20gJy4vdGFza3Mvc2hvdyc7XG5pbXBvcnQgeyBzdGF0dXNUYXNrIH0gZnJvbSAnLi90YXNrcy9zdGF0dXMnO1xuaW1wb3J0IHsgY29uZmlndXJhdGlvbkVycm9yVGFzaywgc3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayB9IGZyb20gJy4vdGFza3MvdGFzayc7XG5pbXBvcnQgdmVyc2lvbiBmcm9tICcuL3Rhc2tzL3ZlcnNpb24nO1xuaW1wb3J0IHsgb3V0cHV0SGFuZGxlciwgU2ltcGxlR2l0RXhlY3V0b3IsIFNpbXBsZUdpdFRhc2ssIFNpbXBsZUdpdFRhc2tDYWxsYmFjayB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHtcbiAgIGFzQXJyYXksXG4gICBmaWx0ZXJTdHJpbmcsXG4gICBmaWx0ZXJUeXBlLFxuICAgZ2V0VHJhaWxpbmdPcHRpb25zLFxuICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50LFxufSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNsYXNzIFNpbXBsZUdpdEFwaSBpbXBsZW1lbnRzIFNpbXBsZUdpdEJhc2Uge1xuICAgY29uc3RydWN0b3IocHJpdmF0ZSBfZXhlY3V0b3I6IFNpbXBsZUdpdEV4ZWN1dG9yKSB7fVxuXG4gICBwcm90ZWN0ZWQgX3J1blRhc2s8VD4odGFzazogU2ltcGxlR2l0VGFzazxUPiwgdGhlbj86IFNpbXBsZUdpdFRhc2tDYWxsYmFjazxUPikge1xuICAgICAgY29uc3QgY2hhaW4gPSB0aGlzLl9leGVjdXRvci5jaGFpbigpO1xuICAgICAgY29uc3QgcHJvbWlzZSA9IGNoYWluLnB1c2godGFzayk7XG5cbiAgICAgIGlmICh0aGVuKSB7XG4gICAgICAgICB0YXNrQ2FsbGJhY2sodGFzaywgcHJvbWlzZSwgdGhlbik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMsIHtcbiAgICAgICAgIHRoZW46IHsgdmFsdWU6IHByb21pc2UudGhlbi5iaW5kKHByb21pc2UpIH0sXG4gICAgICAgICBjYXRjaDogeyB2YWx1ZTogcHJvbWlzZS5jYXRjaC5iaW5kKHByb21pc2UpIH0sXG4gICAgICAgICBfZXhlY3V0b3I6IHsgdmFsdWU6IGNoYWluIH0sXG4gICAgICB9KTtcbiAgIH1cblxuICAgYWRkKGZpbGVzOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICAgICBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKFsnYWRkJywgLi4uYXNBcnJheShmaWxlcyldKSxcbiAgICAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICAgICApO1xuICAgfVxuXG4gICBjd2QoZGlyZWN0b3J5OiBzdHJpbmcgfCB7IHBhdGg6IHN0cmluZzsgcm9vdD86IGJvb2xlYW4gfSkge1xuICAgICAgY29uc3QgbmV4dCA9IHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpO1xuXG4gICAgICBpZiAodHlwZW9mIGRpcmVjdG9yeSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgIHJldHVybiB0aGlzLl9ydW5UYXNrKGNoYW5nZVdvcmtpbmdEaXJlY3RvcnlUYXNrKGRpcmVjdG9yeSwgdGhpcy5fZXhlY3V0b3IpLCBuZXh0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBkaXJlY3Rvcnk/LnBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5fcnVuVGFzayhcbiAgICAgICAgICAgIGNoYW5nZVdvcmtpbmdEaXJlY3RvcnlUYXNrKFxuICAgICAgICAgICAgICAgZGlyZWN0b3J5LnBhdGgsXG4gICAgICAgICAgICAgICAoZGlyZWN0b3J5LnJvb3QgJiYgdGhpcy5fZXhlY3V0b3IpIHx8IHVuZGVmaW5lZFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIG5leHRcbiAgICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgICAgY29uZmlndXJhdGlvbkVycm9yVGFzaygnR2l0LmN3ZDogd29ya2luZ0RpcmVjdG9yeSBtdXN0IGJlIHN1cHBsaWVkIGFzIGEgc3RyaW5nJyksXG4gICAgICAgICBuZXh0XG4gICAgICApO1xuICAgfVxuXG4gICBoYXNoT2JqZWN0KHBhdGg6IHN0cmluZywgd3JpdGU6IGJvb2xlYW4gfCB1bmtub3duKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnVuVGFzayhcbiAgICAgICAgIGhhc2hPYmplY3RUYXNrKHBhdGgsIHdyaXRlID09PSB0cnVlKSxcbiAgICAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICAgICApO1xuICAgfVxuXG4gICBpbml0KGJhcmU/OiBib29sZWFuIHwgdW5rbm93bikge1xuICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICAgICBpbml0VGFzayhiYXJlID09PSB0cnVlLCB0aGlzLl9leGVjdXRvci5jd2QsIGdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMpKSxcbiAgICAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICAgICApO1xuICAgfVxuXG4gICBtZXJnZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgICAgbWVyZ2VUYXNrKGdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMpKSxcbiAgICAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICAgICApO1xuICAgfVxuXG4gICBtZXJnZUZyb21UbyhyZW1vdGU6IHN0cmluZywgYnJhbmNoOiBzdHJpbmcpIHtcbiAgICAgIGlmICghKGZpbHRlclN0cmluZyhyZW1vdGUpICYmIGZpbHRlclN0cmluZyhicmFuY2gpKSkge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uRXJyb3JUYXNrKFxuICAgICAgICAgICAgICAgYEdpdC5tZXJnZUZyb21UbyByZXF1aXJlcyB0aGF0IHRoZSAncmVtb3RlJyBhbmQgJ2JyYW5jaCcgYXJndW1lbnRzIGFyZSBzdXBwbGllZCBhcyBzdHJpbmdzYFxuICAgICAgICAgICAgKVxuICAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICAgICBtZXJnZVRhc2soW3JlbW90ZSwgYnJhbmNoLCAuLi5nZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzKV0pLFxuICAgICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cywgZmFsc2UpXG4gICAgICApO1xuICAgfVxuXG4gICBvdXRwdXRIYW5kbGVyKGhhbmRsZXI6IG91dHB1dEhhbmRsZXIpIHtcbiAgICAgIHRoaXMuX2V4ZWN1dG9yLm91dHB1dEhhbmRsZXIgPSBoYW5kbGVyO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICB9XG5cbiAgIHB1c2goKSB7XG4gICAgICBjb25zdCB0YXNrID0gcHVzaFRhc2soXG4gICAgICAgICB7XG4gICAgICAgICAgICByZW1vdGU6IGZpbHRlclR5cGUoYXJndW1lbnRzWzBdLCBmaWx0ZXJTdHJpbmcpLFxuICAgICAgICAgICAgYnJhbmNoOiBmaWx0ZXJUeXBlKGFyZ3VtZW50c1sxXSwgZmlsdGVyU3RyaW5nKSxcbiAgICAgICAgIH0sXG4gICAgICAgICBnZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzKVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2sodGFzaywgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cykpO1xuICAgfVxuXG4gICBzdGFzaCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgICAgc3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayhbJ3N0YXNoJywgLi4uZ2V0VHJhaWxpbmdPcHRpb25zKGFyZ3VtZW50cyldKSxcbiAgICAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICAgICApO1xuICAgfVxuXG4gICBzdGF0dXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnVuVGFzayhcbiAgICAgICAgIHN0YXR1c1Rhc2soZ2V0VHJhaWxpbmdPcHRpb25zKGFyZ3VtZW50cykpLFxuICAgICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICAgICk7XG4gICB9XG59XG5cbk9iamVjdC5hc3NpZ24oXG4gICBTaW1wbGVHaXRBcGkucHJvdG90eXBlLFxuICAgY2hlY2tvdXQoKSxcbiAgIGNvbW1pdCgpLFxuICAgY29uZmlnKCksXG4gICBjb3VudE9iamVjdHMoKSxcbiAgIGZpcnN0Q29tbWl0KCksXG4gICBncmVwKCksXG4gICBsb2coKSxcbiAgIHNob3coKSxcbiAgIHZlcnNpb24oKVxuKTtcbiIsICJpbXBvcnQgeyBhcHBlbmQsIHJlbW92ZSB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IGNyZWF0ZURlZmVycmVkLCBEZWZlcnJlZFByb21pc2UgfSBmcm9tICdAa3dzaXRlcy9wcm9taXNlLWRlZmVycmVkJztcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJy4uL2dpdC1sb2dnZXInO1xuXG50eXBlIFNjaGVkdWxlQ29tcGxldGVDYWxsYmFjayA9ICgpID0+IHZvaWQ7XG50eXBlIFNjaGVkdWxlZFRhc2sgPSBQaWNrPERlZmVycmVkUHJvbWlzZTxTY2hlZHVsZUNvbXBsZXRlQ2FsbGJhY2s+LCAncHJvbWlzZScgfCAnZG9uZSc+ICYge1xuICAgaWQ6IG51bWJlcjtcbn07XG5cbmNvbnN0IGNyZWF0ZVNjaGVkdWxlZFRhc2s6ICgpID0+IFNjaGVkdWxlZFRhc2sgPSAoKCkgPT4ge1xuICAgbGV0IGlkID0gMDtcbiAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZCsrO1xuICAgICAgY29uc3QgeyBwcm9taXNlLCBkb25lIH0gPSBjcmVhdGVEZWZlcnJlZDxTY2hlZHVsZUNvbXBsZXRlQ2FsbGJhY2s+KCk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgICBwcm9taXNlLFxuICAgICAgICAgZG9uZSxcbiAgICAgICAgIGlkLFxuICAgICAgfTtcbiAgIH07XG59KSgpO1xuXG5leHBvcnQgY2xhc3MgU2NoZWR1bGVyIHtcbiAgIHByaXZhdGUgbG9nZ2VyID0gY3JlYXRlTG9nZ2VyKCcnLCAnc2NoZWR1bGVyJyk7XG4gICBwcml2YXRlIHBlbmRpbmc6IFNjaGVkdWxlZFRhc2tbXSA9IFtdO1xuICAgcHJpdmF0ZSBydW5uaW5nOiBTY2hlZHVsZWRUYXNrW10gPSBbXTtcblxuICAgY29uc3RydWN0b3IocHJpdmF0ZSBjb25jdXJyZW5jeSA9IDIpIHtcbiAgICAgIHRoaXMubG9nZ2VyKGBDb25zdHJ1Y3RlZCwgY29uY3VycmVuY3k9JXNgLCBjb25jdXJyZW5jeSk7XG4gICB9XG5cbiAgIHByaXZhdGUgc2NoZWR1bGUoKSB7XG4gICAgICBpZiAoIXRoaXMucGVuZGluZy5sZW5ndGggfHwgdGhpcy5ydW5uaW5nLmxlbmd0aCA+PSB0aGlzLmNvbmN1cnJlbmN5KSB7XG4gICAgICAgICB0aGlzLmxvZ2dlcihcbiAgICAgICAgICAgIGBTY2hlZHVsZSBhdHRlbXB0IGlnbm9yZWQsIHBlbmRpbmc9JXMgcnVubmluZz0lcyBjb25jdXJyZW5jeT0lc2AsXG4gICAgICAgICAgICB0aGlzLnBlbmRpbmcubGVuZ3RoLFxuICAgICAgICAgICAgdGhpcy5ydW5uaW5nLmxlbmd0aCxcbiAgICAgICAgICAgIHRoaXMuY29uY3VycmVuY3lcbiAgICAgICAgICk7XG4gICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRhc2sgPSBhcHBlbmQodGhpcy5ydW5uaW5nLCB0aGlzLnBlbmRpbmcuc2hpZnQoKSEpO1xuICAgICAgdGhpcy5sb2dnZXIoYEF0dGVtcHRpbmcgaWQ9JXNgLCB0YXNrLmlkKTtcbiAgICAgIHRhc2suZG9uZSgoKSA9PiB7XG4gICAgICAgICB0aGlzLmxvZ2dlcihgQ29tcGxldGluZyBpZD1gLCB0YXNrLmlkKTtcbiAgICAgICAgIHJlbW92ZSh0aGlzLnJ1bm5pbmcsIHRhc2spO1xuICAgICAgICAgdGhpcy5zY2hlZHVsZSgpO1xuICAgICAgfSk7XG4gICB9XG5cbiAgIG5leHQoKTogUHJvbWlzZTxTY2hlZHVsZUNvbXBsZXRlQ2FsbGJhY2s+IHtcbiAgICAgIGNvbnN0IHsgcHJvbWlzZSwgaWQgfSA9IGFwcGVuZCh0aGlzLnBlbmRpbmcsIGNyZWF0ZVNjaGVkdWxlZFRhc2soKSk7XG4gICAgICB0aGlzLmxvZ2dlcihgU2NoZWR1bGluZyBpZD0lc2AsIGlkKTtcblxuICAgICAgdGhpcy5zY2hlZHVsZSgpO1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgIH1cbn1cbiIsICJpbXBvcnQgeyBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrIH0gZnJvbSAnLi90YXNrJztcbmltcG9ydCB7IE9wdGlvbkZsYWdzLCBPcHRpb25zLCBTdHJpbmdUYXNrIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBBcHBseU9wdGlvbnMgPSBPcHRpb25zICZcbiAgIE9wdGlvbkZsYWdzPFxuICAgICAgfCAnLS1zdGF0J1xuICAgICAgfCAnLS1udW1zdGF0J1xuICAgICAgfCAnLS1zdW1tYXJ5J1xuICAgICAgfCAnLS1jaGVjaydcbiAgICAgIHwgJy0taW5kZXgnXG4gICAgICB8ICctLWludGVudC10by1hZGQnXG4gICAgICB8ICctLTN3YXknXG4gICAgICB8ICctLWFwcGx5J1xuICAgICAgfCAnLS1uby1hZGQnXG4gICAgICB8ICctUidcbiAgICAgIHwgJy0tcmV2ZXJzZSdcbiAgICAgIHwgJy0tYWxsb3ctYmluYXJ5LXJlcGxhY2VtZW50J1xuICAgICAgfCAnLS1iaW5hcnknXG4gICAgICB8ICctLXJlamVjdCdcbiAgICAgIHwgJy16J1xuICAgICAgfCAnLS1pbmFjY3VyYXRlLWVvZidcbiAgICAgIHwgJy0tcmVjb3VudCdcbiAgICAgIHwgJy0tY2FjaGVkJ1xuICAgICAgfCAnLS1pZ25vcmUtc3BhY2UtY2hhbmdlJ1xuICAgICAgfCAnLS1pZ25vcmUtd2hpdGVzcGFjZSdcbiAgICAgIHwgJy0tdmVyYm9zZSdcbiAgICAgIHwgJy0tdW5zYWZlLXBhdGhzJ1xuICAgPiAmXG4gICBPcHRpb25GbGFnczwnLS13aGl0ZXNwYWNlJywgJ25vd2FybicgfCAnd2FybicgfCAnZml4JyB8ICdlcnJvcicgfCAnZXJyb3ItYWxsJz4gJlxuICAgT3B0aW9uRmxhZ3M8Jy0tYnVpbGQtZmFrZS1hbmNlc3RvcicgfCAnLS1leGNsdWRlJyB8ICctLWluY2x1ZGUnIHwgJy0tZGlyZWN0b3J5Jywgc3RyaW5nPiAmXG4gICBPcHRpb25GbGFnczwnLXAnIHwgJy1DJywgbnVtYmVyPjtcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5UGF0Y2hUYXNrKHBhdGNoZXM6IHN0cmluZ1tdLCBjdXN0b21BcmdzOiBzdHJpbmdbXSk6IFN0cmluZ1Rhc2s8c3RyaW5nPiB7XG4gICByZXR1cm4gc3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayhbJ2FwcGx5JywgLi4uY3VzdG9tQXJncywgLi4ucGF0Y2hlc10pO1xufVxuIiwgImltcG9ydCB7XG4gICBCcmFuY2hNdWx0aURlbGV0ZVJlc3VsdCxcbiAgIEJyYW5jaFNpbmdsZURlbGV0ZUZhaWx1cmUsXG4gICBCcmFuY2hTaW5nbGVEZWxldGVSZXN1bHQsXG4gICBCcmFuY2hTaW5nbGVEZWxldGVTdWNjZXNzLFxufSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcblxuZXhwb3J0IGNsYXNzIEJyYW5jaERlbGV0aW9uQmF0Y2ggaW1wbGVtZW50cyBCcmFuY2hNdWx0aURlbGV0ZVJlc3VsdCB7XG4gICBhbGw6IEJyYW5jaFNpbmdsZURlbGV0ZVJlc3VsdFtdID0gW107XG4gICBicmFuY2hlczogeyBbYnJhbmNoTmFtZTogc3RyaW5nXTogQnJhbmNoU2luZ2xlRGVsZXRlUmVzdWx0IH0gPSB7fTtcbiAgIGVycm9yczogQnJhbmNoU2luZ2xlRGVsZXRlUmVzdWx0W10gPSBbXTtcblxuICAgZ2V0IHN1Y2Nlc3MoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gIXRoaXMuZXJyb3JzLmxlbmd0aDtcbiAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJyYW5jaERlbGV0aW9uU3VjY2VzcyhicmFuY2g6IHN0cmluZywgaGFzaDogc3RyaW5nKTogQnJhbmNoU2luZ2xlRGVsZXRlU3VjY2VzcyB7XG4gICByZXR1cm4ge1xuICAgICAgYnJhbmNoLFxuICAgICAgaGFzaCxcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJhbmNoRGVsZXRpb25GYWlsdXJlKGJyYW5jaDogc3RyaW5nKTogQnJhbmNoU2luZ2xlRGVsZXRlRmFpbHVyZSB7XG4gICByZXR1cm4ge1xuICAgICAgYnJhbmNoLFxuICAgICAgaGFzaDogbnVsbCxcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU2luZ2xlQnJhbmNoRGVsZXRlRmFpbHVyZShcbiAgIHRlc3Q6IEJyYW5jaFNpbmdsZURlbGV0ZVJlc3VsdFxuKTogdGVzdCBpcyBCcmFuY2hTaW5nbGVEZWxldGVTdWNjZXNzIHtcbiAgIHJldHVybiB0ZXN0LnN1Y2Nlc3M7XG59XG4iLCAiaW1wb3J0IHsgQnJhbmNoTXVsdGlEZWxldGVSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7XG4gICBCcmFuY2hEZWxldGlvbkJhdGNoLFxuICAgYnJhbmNoRGVsZXRpb25GYWlsdXJlLFxuICAgYnJhbmNoRGVsZXRpb25TdWNjZXNzLFxufSBmcm9tICcuLi9yZXNwb25zZXMvQnJhbmNoRGVsZXRlU3VtbWFyeSc7XG5pbXBvcnQgeyBUYXNrUGFyc2VyIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgRXhpdENvZGVzLCBMaW5lUGFyc2VyLCBwYXJzZVN0cmluZ1Jlc3BvbnNlIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5jb25zdCBkZWxldGVTdWNjZXNzUmVnZXggPSAvKFxcUyspXFxzK1xcKFxcUytcXHMoW14pXSspXFwpLztcbmNvbnN0IGRlbGV0ZUVycm9yUmVnZXggPSAvXmVycm9yW14nXSsnKFteJ10rKScvbTtcblxuY29uc3QgcGFyc2VyczogTGluZVBhcnNlcjxCcmFuY2hNdWx0aURlbGV0ZVJlc3VsdD5bXSA9IFtcbiAgIG5ldyBMaW5lUGFyc2VyKGRlbGV0ZVN1Y2Nlc3NSZWdleCwgKHJlc3VsdCwgW2JyYW5jaCwgaGFzaF0pID0+IHtcbiAgICAgIGNvbnN0IGRlbGV0aW9uID0gYnJhbmNoRGVsZXRpb25TdWNjZXNzKGJyYW5jaCwgaGFzaCk7XG5cbiAgICAgIHJlc3VsdC5hbGwucHVzaChkZWxldGlvbik7XG4gICAgICByZXN1bHQuYnJhbmNoZXNbYnJhbmNoXSA9IGRlbGV0aW9uO1xuICAgfSksXG4gICBuZXcgTGluZVBhcnNlcihkZWxldGVFcnJvclJlZ2V4LCAocmVzdWx0LCBbYnJhbmNoXSkgPT4ge1xuICAgICAgY29uc3QgZGVsZXRpb24gPSBicmFuY2hEZWxldGlvbkZhaWx1cmUoYnJhbmNoKTtcblxuICAgICAgcmVzdWx0LmVycm9ycy5wdXNoKGRlbGV0aW9uKTtcbiAgICAgIHJlc3VsdC5hbGwucHVzaChkZWxldGlvbik7XG4gICAgICByZXN1bHQuYnJhbmNoZXNbYnJhbmNoXSA9IGRlbGV0aW9uO1xuICAgfSksXG5dO1xuXG5leHBvcnQgY29uc3QgcGFyc2VCcmFuY2hEZWxldGlvbnM6IFRhc2tQYXJzZXI8c3RyaW5nLCBCcmFuY2hNdWx0aURlbGV0ZVJlc3VsdD4gPSAoXG4gICBzdGRPdXQsXG4gICBzdGRFcnJcbikgPT4ge1xuICAgcmV0dXJuIHBhcnNlU3RyaW5nUmVzcG9uc2UobmV3IEJyYW5jaERlbGV0aW9uQmF0Y2goKSwgcGFyc2VycywgW3N0ZE91dCwgc3RkRXJyXSk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gaGFzQnJhbmNoRGVsZXRpb25FcnJvcihkYXRhOiBzdHJpbmcsIHByb2Nlc3NFeGl0Q29kZTogRXhpdENvZGVzKTogYm9vbGVhbiB7XG4gICByZXR1cm4gcHJvY2Vzc0V4aXRDb2RlID09PSBFeGl0Q29kZXMuRVJST1IgJiYgZGVsZXRlRXJyb3JSZWdleC50ZXN0KGRhdGEpO1xufVxuIiwgImltcG9ydCB0eXBlIHsgQnJhbmNoU3VtbWFyeSwgQnJhbmNoU3VtbWFyeUJyYW5jaCB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuXG5leHBvcnQgZW51bSBCcmFuY2hTdGF0dXNJZGVudGlmaWVyIHtcbiAgIENVUlJFTlQgPSAnKicsXG4gICBMSU5LRUQgPSAnKycsXG59XG5cbmV4cG9ydCBjbGFzcyBCcmFuY2hTdW1tYXJ5UmVzdWx0IGltcGxlbWVudHMgQnJhbmNoU3VtbWFyeSB7XG4gICBwdWJsaWMgYWxsOiBzdHJpbmdbXSA9IFtdO1xuICAgcHVibGljIGJyYW5jaGVzOiB7IFtwOiBzdHJpbmddOiBCcmFuY2hTdW1tYXJ5QnJhbmNoIH0gPSB7fTtcbiAgIHB1YmxpYyBjdXJyZW50OiBzdHJpbmcgPSAnJztcbiAgIHB1YmxpYyBkZXRhY2hlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICBwdXNoKFxuICAgICAgc3RhdHVzOiBCcmFuY2hTdGF0dXNJZGVudGlmaWVyIHwgdW5rbm93bixcbiAgICAgIGRldGFjaGVkOiBib29sZWFuLFxuICAgICAgbmFtZTogc3RyaW5nLFxuICAgICAgY29tbWl0OiBzdHJpbmcsXG4gICAgICBsYWJlbDogc3RyaW5nXG4gICApIHtcbiAgICAgIGlmIChzdGF0dXMgPT09IEJyYW5jaFN0YXR1c0lkZW50aWZpZXIuQ1VSUkVOVCkge1xuICAgICAgICAgdGhpcy5kZXRhY2hlZCA9IGRldGFjaGVkO1xuICAgICAgICAgdGhpcy5jdXJyZW50ID0gbmFtZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hbGwucHVzaChuYW1lKTtcbiAgICAgIHRoaXMuYnJhbmNoZXNbbmFtZV0gPSB7XG4gICAgICAgICBjdXJyZW50OiBzdGF0dXMgPT09IEJyYW5jaFN0YXR1c0lkZW50aWZpZXIuQ1VSUkVOVCxcbiAgICAgICAgIGxpbmtlZFdvcmtUcmVlOiBzdGF0dXMgPT09IEJyYW5jaFN0YXR1c0lkZW50aWZpZXIuTElOS0VELFxuICAgICAgICAgbmFtZSxcbiAgICAgICAgIGNvbW1pdCxcbiAgICAgICAgIGxhYmVsLFxuICAgICAgfTtcbiAgIH1cbn1cbiIsICJpbXBvcnQgdHlwZSB7IEJyYW5jaFN1bW1hcnkgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IEJyYW5jaFN1bW1hcnlSZXN1bHQgfSBmcm9tICcuLi9yZXNwb25zZXMvQnJhbmNoU3VtbWFyeSc7XG5pbXBvcnQgeyBMaW5lUGFyc2VyLCBwYXJzZVN0cmluZ1Jlc3BvbnNlIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5jb25zdCBwYXJzZXJzOiBMaW5lUGFyc2VyPEJyYW5jaFN1bW1hcnlSZXN1bHQ+W10gPSBbXG4gICBuZXcgTGluZVBhcnNlcihcbiAgICAgIC9eKFsqK11cXHMpP1xcKCg/OkhFQUQgKT9kZXRhY2hlZCAoPzpmcm9tfGF0KSAoXFxTKylcXClcXHMrKFthLXowLTldKylcXHMoLiopJC8sXG4gICAgICAocmVzdWx0LCBbY3VycmVudCwgbmFtZSwgY29tbWl0LCBsYWJlbF0pID0+IHtcbiAgICAgICAgIHJlc3VsdC5wdXNoKGJyYW5jaFN0YXR1cyhjdXJyZW50KSwgdHJ1ZSwgbmFtZSwgY29tbWl0LCBsYWJlbCk7XG4gICAgICB9XG4gICApLFxuICAgbmV3IExpbmVQYXJzZXIoXG4gICAgICAvXihbKitdXFxzKT8oXFxTKylcXHMrKFthLXowLTldKylcXHM/KC4qKSQvcyxcbiAgICAgIChyZXN1bHQsIFtjdXJyZW50LCBuYW1lLCBjb21taXQsIGxhYmVsXSkgPT4ge1xuICAgICAgICAgcmVzdWx0LnB1c2goYnJhbmNoU3RhdHVzKGN1cnJlbnQpLCBmYWxzZSwgbmFtZSwgY29tbWl0LCBsYWJlbCk7XG4gICAgICB9XG4gICApLFxuXTtcblxuZnVuY3Rpb24gYnJhbmNoU3RhdHVzKGlucHV0Pzogc3RyaW5nKSB7XG4gICByZXR1cm4gaW5wdXQgPyBpbnB1dC5jaGFyQXQoMCkgOiAnJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQnJhbmNoU3VtbWFyeShzdGRPdXQ6IHN0cmluZyk6IEJyYW5jaFN1bW1hcnkge1xuICAgcmV0dXJuIHBhcnNlU3RyaW5nUmVzcG9uc2UobmV3IEJyYW5jaFN1bW1hcnlSZXN1bHQoKSwgcGFyc2Vycywgc3RkT3V0KTtcbn1cbiIsICJpbXBvcnQgeyBCcmFuY2hNdWx0aURlbGV0ZVJlc3VsdCwgQnJhbmNoU2luZ2xlRGVsZXRlUmVzdWx0LCBCcmFuY2hTdW1tYXJ5IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBTdHJpbmdUYXNrIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgR2l0UmVzcG9uc2VFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9naXQtcmVzcG9uc2UtZXJyb3InO1xuaW1wb3J0IHsgaGFzQnJhbmNoRGVsZXRpb25FcnJvciwgcGFyc2VCcmFuY2hEZWxldGlvbnMgfSBmcm9tICcuLi9wYXJzZXJzL3BhcnNlLWJyYW5jaC1kZWxldGUnO1xuaW1wb3J0IHsgcGFyc2VCcmFuY2hTdW1tYXJ5IH0gZnJvbSAnLi4vcGFyc2Vycy9wYXJzZS1icmFuY2gnO1xuaW1wb3J0IHsgYnVmZmVyVG9TdHJpbmcgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb250YWluc0RlbGV0ZUJyYW5jaENvbW1hbmQoY29tbWFuZHM6IHN0cmluZ1tdKSB7XG4gICBjb25zdCBkZWxldGVDb21tYW5kcyA9IFsnLWQnLCAnLUQnLCAnLS1kZWxldGUnXTtcbiAgIHJldHVybiBjb21tYW5kcy5zb21lKChjb21tYW5kKSA9PiBkZWxldGVDb21tYW5kcy5pbmNsdWRlcyhjb21tYW5kKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicmFuY2hUYXNrKFxuICAgY3VzdG9tQXJnczogc3RyaW5nW11cbik6IFN0cmluZ1Rhc2s8QnJhbmNoU3VtbWFyeSB8IEJyYW5jaFNpbmdsZURlbGV0ZVJlc3VsdD4ge1xuICAgY29uc3QgaXNEZWxldGUgPSBjb250YWluc0RlbGV0ZUJyYW5jaENvbW1hbmQoY3VzdG9tQXJncyk7XG4gICBjb25zdCBjb21tYW5kcyA9IFsnYnJhbmNoJywgLi4uY3VzdG9tQXJnc107XG5cbiAgIGlmIChjb21tYW5kcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbW1hbmRzLnB1c2goJy1hJyk7XG4gICB9XG5cbiAgIGlmICghY29tbWFuZHMuaW5jbHVkZXMoJy12JykpIHtcbiAgICAgIGNvbW1hbmRzLnNwbGljZSgxLCAwLCAnLXYnKTtcbiAgIH1cblxuICAgcmV0dXJuIHtcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIGNvbW1hbmRzLFxuICAgICAgcGFyc2VyKHN0ZE91dCwgc3RkRXJyKSB7XG4gICAgICAgICBpZiAoaXNEZWxldGUpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUJyYW5jaERlbGV0aW9ucyhzdGRPdXQsIHN0ZEVycikuYWxsWzBdO1xuICAgICAgICAgfVxuXG4gICAgICAgICByZXR1cm4gcGFyc2VCcmFuY2hTdW1tYXJ5KHN0ZE91dCk7XG4gICAgICB9LFxuICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJyYW5jaExvY2FsVGFzaygpOiBTdHJpbmdUYXNrPEJyYW5jaFN1bW1hcnk+IHtcbiAgIGNvbnN0IHBhcnNlciA9IHBhcnNlQnJhbmNoU3VtbWFyeTtcblxuICAgcmV0dXJuIHtcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIGNvbW1hbmRzOiBbJ2JyYW5jaCcsICctdiddLFxuICAgICAgcGFyc2VyLFxuICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZUJyYW5jaGVzVGFzayhcbiAgIGJyYW5jaGVzOiBzdHJpbmdbXSxcbiAgIGZvcmNlRGVsZXRlID0gZmFsc2Vcbik6IFN0cmluZ1Rhc2s8QnJhbmNoTXVsdGlEZWxldGVSZXN1bHQ+IHtcbiAgIHJldHVybiB7XG4gICAgICBmb3JtYXQ6ICd1dGYtOCcsXG4gICAgICBjb21tYW5kczogWydicmFuY2gnLCAnLXYnLCBmb3JjZURlbGV0ZSA/ICctRCcgOiAnLWQnLCAuLi5icmFuY2hlc10sXG4gICAgICBwYXJzZXIoc3RkT3V0LCBzdGRFcnIpIHtcbiAgICAgICAgIHJldHVybiBwYXJzZUJyYW5jaERlbGV0aW9ucyhzdGRPdXQsIHN0ZEVycik7XG4gICAgICB9LFxuICAgICAgb25FcnJvcih7IGV4aXRDb2RlLCBzdGRPdXQgfSwgZXJyb3IsIGRvbmUsIGZhaWwpIHtcbiAgICAgICAgIGlmICghaGFzQnJhbmNoRGVsZXRpb25FcnJvcihTdHJpbmcoZXJyb3IpLCBleGl0Q29kZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWlsKGVycm9yKTtcbiAgICAgICAgIH1cblxuICAgICAgICAgZG9uZShzdGRPdXQpO1xuICAgICAgfSxcbiAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVCcmFuY2hUYXNrKFxuICAgYnJhbmNoOiBzdHJpbmcsXG4gICBmb3JjZURlbGV0ZSA9IGZhbHNlXG4pOiBTdHJpbmdUYXNrPEJyYW5jaFNpbmdsZURlbGV0ZVJlc3VsdD4ge1xuICAgY29uc3QgdGFzazogU3RyaW5nVGFzazxCcmFuY2hTaW5nbGVEZWxldGVSZXN1bHQ+ID0ge1xuICAgICAgZm9ybWF0OiAndXRmLTgnLFxuICAgICAgY29tbWFuZHM6IFsnYnJhbmNoJywgJy12JywgZm9yY2VEZWxldGUgPyAnLUQnIDogJy1kJywgYnJhbmNoXSxcbiAgICAgIHBhcnNlcihzdGRPdXQsIHN0ZEVycikge1xuICAgICAgICAgcmV0dXJuIHBhcnNlQnJhbmNoRGVsZXRpb25zKHN0ZE91dCwgc3RkRXJyKS5icmFuY2hlc1ticmFuY2hdITtcbiAgICAgIH0sXG4gICAgICBvbkVycm9yKHsgZXhpdENvZGUsIHN0ZEVyciwgc3RkT3V0IH0sIGVycm9yLCBfLCBmYWlsKSB7XG4gICAgICAgICBpZiAoIWhhc0JyYW5jaERlbGV0aW9uRXJyb3IoU3RyaW5nKGVycm9yKSwgZXhpdENvZGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFpbChlcnJvcik7XG4gICAgICAgICB9XG5cbiAgICAgICAgIHRocm93IG5ldyBHaXRSZXNwb25zZUVycm9yKFxuICAgICAgICAgICAgdGFzay5wYXJzZXIoYnVmZmVyVG9TdHJpbmcoc3RkT3V0KSwgYnVmZmVyVG9TdHJpbmcoc3RkRXJyKSksXG4gICAgICAgICAgICBTdHJpbmcoZXJyb3IpXG4gICAgICAgICApO1xuICAgICAgfSxcbiAgIH07XG5cbiAgIHJldHVybiB0YXNrO1xufVxuIiwgIi8qKlxuICogUGFyc2VyIGZvciB0aGUgYGNoZWNrLWlnbm9yZWAgY29tbWFuZCAtIHJldHVybnMgZWFjaCBmaWxlIGFzIGEgc3RyaW5nIGFycmF5XG4gKi9cbmV4cG9ydCBjb25zdCBwYXJzZUNoZWNrSWdub3JlID0gKHRleHQ6IHN0cmluZyk6IHN0cmluZ1tdID0+IHtcbiAgIHJldHVybiB0ZXh0XG4gICAgICAuc3BsaXQoL1xcbi9nKVxuICAgICAgLm1hcCgobGluZSkgPT4gbGluZS50cmltKCkpXG4gICAgICAuZmlsdGVyKChmaWxlKSA9PiAhIWZpbGUpO1xufTtcbiIsICJpbXBvcnQgeyBTdHJpbmdUYXNrIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgcGFyc2VDaGVja0lnbm9yZSB9IGZyb20gJy4uL3Jlc3BvbnNlcy9DaGVja0lnbm9yZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0lnbm9yZVRhc2socGF0aHM6IHN0cmluZ1tdKTogU3RyaW5nVGFzazxzdHJpbmdbXT4ge1xuICAgcmV0dXJuIHtcbiAgICAgIGNvbW1hbmRzOiBbJ2NoZWNrLWlnbm9yZScsIC4uLnBhdGhzXSxcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIHBhcnNlcjogcGFyc2VDaGVja0lnbm9yZSxcbiAgIH07XG59XG4iLCAiaW1wb3J0IHsgY29uZmlndXJhdGlvbkVycm9yVGFzaywgRW1wdHlUYXNrLCBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrIH0gZnJvbSAnLi90YXNrJztcbmltcG9ydCB7IE9wdGlvbkZsYWdzLCBPcHRpb25zLCBTdHJpbmdUYXNrIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgYXBwZW5kLCBmaWx0ZXJTdHJpbmcgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCB0eXBlIENsb25lT3B0aW9ucyA9IE9wdGlvbnMgJlxuICAgT3B0aW9uRmxhZ3M8XG4gICAgICB8ICctLWJhcmUnXG4gICAgICB8ICctLWRpc3NvY2lhdGUnXG4gICAgICB8ICctLW1pcnJvcidcbiAgICAgIHwgJy0tbm8tY2hlY2tvdXQnXG4gICAgICB8ICctLW5vLXJlbW90ZS1zdWJtb2R1bGVzJ1xuICAgICAgfCAnLS1uby1zaGFsbG93LXN1Ym1vZHVsZXMnXG4gICAgICB8ICctLW5vLXNpbmdsZS1icmFuY2gnXG4gICAgICB8ICctLW5vLXRhZ3MnXG4gICAgICB8ICctLXJlbW90ZS1zdWJtb2R1bGVzJ1xuICAgICAgfCAnLS1zaW5nbGUtYnJhbmNoJ1xuICAgICAgfCAnLS1zaGFsbG93LXN1Ym1vZHVsZXMnXG4gICAgICB8ICctLXZlcmJvc2UnXG4gICA+ICZcbiAgIE9wdGlvbkZsYWdzPCctLWRlcHRoJyB8ICctaicgfCAnLS1qb2JzJywgbnVtYmVyPiAmXG4gICBPcHRpb25GbGFnczxcbiAgICAgIHwgJy0tYnJhbmNoJ1xuICAgICAgfCAnLS1vcmlnaW4nXG4gICAgICB8ICctLXJlY3Vyc2Utc3VibW9kdWxlcydcbiAgICAgIHwgJy0tc2VwYXJhdGUtZ2l0LWRpcidcbiAgICAgIHwgJy0tc2hhbGxvdy1leGNsdWRlJ1xuICAgICAgfCAnLS1zaGFsbG93LXNpbmNlJ1xuICAgICAgfCAnLS10ZW1wbGF0ZScsXG4gICAgICBzdHJpbmdcbiAgID47XG5cbmZ1bmN0aW9uIGRpc2FsbG93ZWRDb21tYW5kKGNvbW1hbmQ6IHN0cmluZykge1xuICAgcmV0dXJuIC9eLS11cGxvYWQtcGFjayg9fCQpLy50ZXN0KGNvbW1hbmQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVUYXNrKFxuICAgcmVwbzogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgZGlyZWN0b3J5OiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICBjdXN0b21BcmdzOiBzdHJpbmdbXVxuKTogU3RyaW5nVGFzazxzdHJpbmc+IHwgRW1wdHlUYXNrIHtcbiAgIGNvbnN0IGNvbW1hbmRzID0gWydjbG9uZScsIC4uLmN1c3RvbUFyZ3NdO1xuXG4gICBmaWx0ZXJTdHJpbmcocmVwbykgJiYgY29tbWFuZHMucHVzaChyZXBvKTtcbiAgIGZpbHRlclN0cmluZyhkaXJlY3RvcnkpICYmIGNvbW1hbmRzLnB1c2goZGlyZWN0b3J5KTtcblxuICAgY29uc3QgYmFubmVkID0gY29tbWFuZHMuZmluZChkaXNhbGxvd2VkQ29tbWFuZCk7XG4gICBpZiAoYmFubmVkKSB7XG4gICAgICByZXR1cm4gY29uZmlndXJhdGlvbkVycm9yVGFzayhgZ2l0LmZldGNoOiBwb3RlbnRpYWwgZXhwbG9pdCBhcmd1bWVudCBibG9ja2VkLmApO1xuICAgfVxuXG4gICByZXR1cm4gc3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayhjb21tYW5kcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZU1pcnJvclRhc2soXG4gICByZXBvOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICBkaXJlY3Rvcnk6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgIGN1c3RvbUFyZ3M6IHN0cmluZ1tdXG4pIHtcbiAgIGFwcGVuZChjdXN0b21BcmdzLCAnLS1taXJyb3InKTtcblxuICAgcmV0dXJuIGNsb25lVGFzayhyZXBvLCBkaXJlY3RvcnksIGN1c3RvbUFyZ3MpO1xufVxuIiwgImltcG9ydCB7IEZldGNoUmVzdWx0IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBMaW5lUGFyc2VyLCBwYXJzZVN0cmluZ1Jlc3BvbnNlIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5jb25zdCBwYXJzZXJzOiBMaW5lUGFyc2VyPEZldGNoUmVzdWx0PltdID0gW1xuICAgbmV3IExpbmVQYXJzZXIoL0Zyb20gKC4rKSQvLCAocmVzdWx0LCBbcmVtb3RlXSkgPT4ge1xuICAgICAgcmVzdWx0LnJlbW90ZSA9IHJlbW90ZTtcbiAgIH0pLFxuICAgbmV3IExpbmVQYXJzZXIoL1xcKiBcXFtuZXcgYnJhbmNoXVxccysoXFxTKylcXHMqLT4gKC4rKSQvLCAocmVzdWx0LCBbbmFtZSwgdHJhY2tpbmddKSA9PiB7XG4gICAgICByZXN1bHQuYnJhbmNoZXMucHVzaCh7XG4gICAgICAgICBuYW1lLFxuICAgICAgICAgdHJhY2tpbmcsXG4gICAgICB9KTtcbiAgIH0pLFxuICAgbmV3IExpbmVQYXJzZXIoL1xcKiBcXFtuZXcgdGFnXVxccysoXFxTKylcXHMqLT4gKC4rKSQvLCAocmVzdWx0LCBbbmFtZSwgdHJhY2tpbmddKSA9PiB7XG4gICAgICByZXN1bHQudGFncy5wdXNoKHtcbiAgICAgICAgIG5hbWUsXG4gICAgICAgICB0cmFja2luZyxcbiAgICAgIH0pO1xuICAgfSksXG4gICBuZXcgTGluZVBhcnNlcigvLSBcXFtkZWxldGVkXVxccytcXFMrXFxzKi0+ICguKykkLywgKHJlc3VsdCwgW3RyYWNraW5nXSkgPT4ge1xuICAgICAgcmVzdWx0LmRlbGV0ZWQucHVzaCh7XG4gICAgICAgICB0cmFja2luZyxcbiAgICAgIH0pO1xuICAgfSksXG4gICBuZXcgTGluZVBhcnNlcihcbiAgICAgIC9cXHMqKFteLl0rKVxcLlxcLihcXFMrKVxccysoXFxTKylcXHMqLT4gKC4rKSQvLFxuICAgICAgKHJlc3VsdCwgW2Zyb20sIHRvLCBuYW1lLCB0cmFja2luZ10pID0+IHtcbiAgICAgICAgIHJlc3VsdC51cGRhdGVkLnB1c2goe1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIHRyYWNraW5nLFxuICAgICAgICAgICAgdG8sXG4gICAgICAgICAgICBmcm9tLFxuICAgICAgICAgfSk7XG4gICAgICB9XG4gICApLFxuXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRmV0Y2hSZXN1bHQoc3RkT3V0OiBzdHJpbmcsIHN0ZEVycjogc3RyaW5nKTogRmV0Y2hSZXN1bHQge1xuICAgY29uc3QgcmVzdWx0OiBGZXRjaFJlc3VsdCA9IHtcbiAgICAgIHJhdzogc3RkT3V0LFxuICAgICAgcmVtb3RlOiBudWxsLFxuICAgICAgYnJhbmNoZXM6IFtdLFxuICAgICAgdGFnczogW10sXG4gICAgICB1cGRhdGVkOiBbXSxcbiAgICAgIGRlbGV0ZWQ6IFtdLFxuICAgfTtcbiAgIHJldHVybiBwYXJzZVN0cmluZ1Jlc3BvbnNlKHJlc3VsdCwgcGFyc2VycywgW3N0ZE91dCwgc3RkRXJyXSk7XG59XG4iLCAiaW1wb3J0IHsgRmV0Y2hSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IHBhcnNlRmV0Y2hSZXN1bHQgfSBmcm9tICcuLi9wYXJzZXJzL3BhcnNlLWZldGNoJztcbmltcG9ydCB7IFN0cmluZ1Rhc2sgfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB7IGNvbmZpZ3VyYXRpb25FcnJvclRhc2ssIEVtcHR5VGFzayB9IGZyb20gJy4vdGFzayc7XG5cbmZ1bmN0aW9uIGRpc2FsbG93ZWRDb21tYW5kKGNvbW1hbmQ6IHN0cmluZykge1xuICAgcmV0dXJuIC9eLS11cGxvYWQtcGFjayg9fCQpLy50ZXN0KGNvbW1hbmQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2hUYXNrKFxuICAgcmVtb3RlOiBzdHJpbmcsXG4gICBicmFuY2g6IHN0cmluZyxcbiAgIGN1c3RvbUFyZ3M6IHN0cmluZ1tdXG4pOiBTdHJpbmdUYXNrPEZldGNoUmVzdWx0PiB8IEVtcHR5VGFzayB7XG4gICBjb25zdCBjb21tYW5kcyA9IFsnZmV0Y2gnLCAuLi5jdXN0b21BcmdzXTtcbiAgIGlmIChyZW1vdGUgJiYgYnJhbmNoKSB7XG4gICAgICBjb21tYW5kcy5wdXNoKHJlbW90ZSwgYnJhbmNoKTtcbiAgIH1cblxuICAgY29uc3QgYmFubmVkID0gY29tbWFuZHMuZmluZChkaXNhbGxvd2VkQ29tbWFuZCk7XG4gICBpZiAoYmFubmVkKSB7XG4gICAgICByZXR1cm4gY29uZmlndXJhdGlvbkVycm9yVGFzayhgZ2l0LmZldGNoOiBwb3RlbnRpYWwgZXhwbG9pdCBhcmd1bWVudCBibG9ja2VkLmApO1xuICAgfVxuXG4gICByZXR1cm4ge1xuICAgICAgY29tbWFuZHMsXG4gICAgICBmb3JtYXQ6ICd1dGYtOCcsXG4gICAgICBwYXJzZXI6IHBhcnNlRmV0Y2hSZXN1bHQsXG4gICB9O1xufVxuIiwgImltcG9ydCB7IE1vdmVSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IExpbmVQYXJzZXIsIHBhcnNlU3RyaW5nUmVzcG9uc2UgfSBmcm9tICcuLi91dGlscyc7XG5cbmNvbnN0IHBhcnNlcnM6IExpbmVQYXJzZXI8TW92ZVJlc3VsdD5bXSA9IFtcbiAgIG5ldyBMaW5lUGFyc2VyKC9eUmVuYW1pbmcgKC4rKSB0byAoLispJC8sIChyZXN1bHQsIFtmcm9tLCB0b10pID0+IHtcbiAgICAgIHJlc3VsdC5tb3Zlcy5wdXNoKHsgZnJvbSwgdG8gfSk7XG4gICB9KSxcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU1vdmVSZXN1bHQoc3RkT3V0OiBzdHJpbmcpOiBNb3ZlUmVzdWx0IHtcbiAgIHJldHVybiBwYXJzZVN0cmluZ1Jlc3BvbnNlKHsgbW92ZXM6IFtdIH0sIHBhcnNlcnMsIHN0ZE91dCk7XG59XG4iLCAiaW1wb3J0IHsgTW92ZVJlc3VsdCB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuaW1wb3J0IHsgcGFyc2VNb3ZlUmVzdWx0IH0gZnJvbSAnLi4vcGFyc2Vycy9wYXJzZS1tb3ZlJztcbmltcG9ydCB7IFN0cmluZ1Rhc2sgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBhc0FycmF5IH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gbW92ZVRhc2soZnJvbTogc3RyaW5nIHwgc3RyaW5nW10sIHRvOiBzdHJpbmcpOiBTdHJpbmdUYXNrPE1vdmVSZXN1bHQ+IHtcbiAgIHJldHVybiB7XG4gICAgICBjb21tYW5kczogWydtdicsICctdicsIC4uLmFzQXJyYXkoZnJvbSksIHRvXSxcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIHBhcnNlcjogcGFyc2VNb3ZlUmVzdWx0LFxuICAgfTtcbn1cbiIsICJpbXBvcnQgeyBQdWxsUmVzdWx0IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5pbXBvcnQgeyBHaXRSZXNwb25zZUVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2dpdC1yZXNwb25zZS1lcnJvcic7XG5pbXBvcnQgeyBwYXJzZVB1bGxFcnJvclJlc3VsdCwgcGFyc2VQdWxsUmVzdWx0IH0gZnJvbSAnLi4vcGFyc2Vycy9wYXJzZS1wdWxsJztcbmltcG9ydCB7IE1heWJlLCBTdHJpbmdUYXNrIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgYnVmZmVyVG9TdHJpbmcgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBwdWxsVGFzayhcbiAgIHJlbW90ZTogTWF5YmU8c3RyaW5nPixcbiAgIGJyYW5jaDogTWF5YmU8c3RyaW5nPixcbiAgIGN1c3RvbUFyZ3M6IHN0cmluZ1tdXG4pOiBTdHJpbmdUYXNrPFB1bGxSZXN1bHQ+IHtcbiAgIGNvbnN0IGNvbW1hbmRzOiBzdHJpbmdbXSA9IFsncHVsbCcsIC4uLmN1c3RvbUFyZ3NdO1xuICAgaWYgKHJlbW90ZSAmJiBicmFuY2gpIHtcbiAgICAgIGNvbW1hbmRzLnNwbGljZSgxLCAwLCByZW1vdGUsIGJyYW5jaCk7XG4gICB9XG5cbiAgIHJldHVybiB7XG4gICAgICBjb21tYW5kcyxcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIHBhcnNlcihzdGRPdXQsIHN0ZEVycik6IFB1bGxSZXN1bHQge1xuICAgICAgICAgcmV0dXJuIHBhcnNlUHVsbFJlc3VsdChzdGRPdXQsIHN0ZEVycik7XG4gICAgICB9LFxuICAgICAgb25FcnJvcihyZXN1bHQsIF9lcnJvciwgX2RvbmUsIGZhaWwpIHtcbiAgICAgICAgIGNvbnN0IHB1bGxFcnJvciA9IHBhcnNlUHVsbEVycm9yUmVzdWx0KFxuICAgICAgICAgICAgYnVmZmVyVG9TdHJpbmcocmVzdWx0LnN0ZE91dCksXG4gICAgICAgICAgICBidWZmZXJUb1N0cmluZyhyZXN1bHQuc3RkRXJyKVxuICAgICAgICAgKTtcbiAgICAgICAgIGlmIChwdWxsRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWlsKG5ldyBHaXRSZXNwb25zZUVycm9yKHB1bGxFcnJvcikpO1xuICAgICAgICAgfVxuXG4gICAgICAgICBmYWlsKF9lcnJvcik7XG4gICAgICB9LFxuICAgfTtcbn1cbiIsICJpbXBvcnQgeyBmb3JFYWNoTGluZVdpdGhDb250ZW50IH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlbW90ZVdpdGhvdXRSZWZzIHtcbiAgIG5hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZW1vdGVXaXRoUmVmcyBleHRlbmRzIFJlbW90ZVdpdGhvdXRSZWZzIHtcbiAgIHJlZnM6IHtcbiAgICAgIGZldGNoOiBzdHJpbmc7XG4gICAgICBwdXNoOiBzdHJpbmc7XG4gICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VHZXRSZW1vdGVzKHRleHQ6IHN0cmluZyk6IFJlbW90ZVdpdGhvdXRSZWZzW10ge1xuICAgY29uc3QgcmVtb3RlczogeyBbbmFtZTogc3RyaW5nXTogUmVtb3RlV2l0aG91dFJlZnMgfSA9IHt9O1xuXG4gICBmb3JFYWNoKHRleHQsIChbbmFtZV0pID0+IChyZW1vdGVzW25hbWVdID0geyBuYW1lIH0pKTtcblxuICAgcmV0dXJuIE9iamVjdC52YWx1ZXMocmVtb3Rlcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdldFJlbW90ZXNWZXJib3NlKHRleHQ6IHN0cmluZyk6IFJlbW90ZVdpdGhSZWZzW10ge1xuICAgY29uc3QgcmVtb3RlczogeyBbbmFtZTogc3RyaW5nXTogUmVtb3RlV2l0aFJlZnMgfSA9IHt9O1xuXG4gICBmb3JFYWNoKHRleHQsIChbbmFtZSwgdXJsLCBwdXJwb3NlXSkgPT4ge1xuICAgICAgaWYgKCFyZW1vdGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICByZW1vdGVzW25hbWVdID0ge1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHJlZnM6IHsgZmV0Y2g6ICcnLCBwdXNoOiAnJyB9LFxuICAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKHB1cnBvc2UgJiYgdXJsKSB7XG4gICAgICAgICByZW1vdGVzW25hbWVdLnJlZnNbcHVycG9zZS5yZXBsYWNlKC9bXmEtel0vZywgJycpIGFzIGtleW9mIFJlbW90ZVdpdGhSZWZzWydyZWZzJ11dID0gdXJsO1xuICAgICAgfVxuICAgfSk7XG5cbiAgIHJldHVybiBPYmplY3QudmFsdWVzKHJlbW90ZXMpO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoKHRleHQ6IHN0cmluZywgaGFuZGxlcjogKGxpbmU6IHN0cmluZ1tdKSA9PiB2b2lkKSB7XG4gICBmb3JFYWNoTGluZVdpdGhDb250ZW50KHRleHQsIChsaW5lKSA9PiBoYW5kbGVyKGxpbmUuc3BsaXQoL1xccysvKSkpO1xufVxuIiwgImltcG9ydCB7IHBhcnNlR2V0UmVtb3RlcywgcGFyc2VHZXRSZW1vdGVzVmVyYm9zZSB9IGZyb20gJy4uL3Jlc3BvbnNlcy9HZXRSZW1vdGVTdW1tYXJ5JztcbmltcG9ydCB7IFN0cmluZ1Rhc2sgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrIH0gZnJvbSAnLi90YXNrJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFJlbW90ZVRhc2soXG4gICByZW1vdGVOYW1lOiBzdHJpbmcsXG4gICByZW1vdGVSZXBvOiBzdHJpbmcsXG4gICBjdXN0b21BcmdzOiBzdHJpbmdbXVxuKTogU3RyaW5nVGFzazxzdHJpbmc+IHtcbiAgIHJldHVybiBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKFsncmVtb3RlJywgJ2FkZCcsIC4uLmN1c3RvbUFyZ3MsIHJlbW90ZU5hbWUsIHJlbW90ZVJlcG9dKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlbW90ZXNUYXNrKHZlcmJvc2U6IGJvb2xlYW4pOiBTdHJpbmdUYXNrPGFueT4ge1xuICAgY29uc3QgY29tbWFuZHMgPSBbJ3JlbW90ZSddO1xuICAgaWYgKHZlcmJvc2UpIHtcbiAgICAgIGNvbW1hbmRzLnB1c2goJy12Jyk7XG4gICB9XG5cbiAgIHJldHVybiB7XG4gICAgICBjb21tYW5kcyxcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIHBhcnNlcjogdmVyYm9zZSA/IHBhcnNlR2V0UmVtb3Rlc1ZlcmJvc2UgOiBwYXJzZUdldFJlbW90ZXMsXG4gICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlzdFJlbW90ZXNUYXNrKGN1c3RvbUFyZ3M6IHN0cmluZ1tdKTogU3RyaW5nVGFzazxzdHJpbmc+IHtcbiAgIGNvbnN0IGNvbW1hbmRzID0gWy4uLmN1c3RvbUFyZ3NdO1xuICAgaWYgKGNvbW1hbmRzWzBdICE9PSAnbHMtcmVtb3RlJykge1xuICAgICAgY29tbWFuZHMudW5zaGlmdCgnbHMtcmVtb3RlJyk7XG4gICB9XG5cbiAgIHJldHVybiBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKGNvbW1hbmRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW90ZVRhc2soY3VzdG9tQXJnczogc3RyaW5nW10pOiBTdHJpbmdUYXNrPHN0cmluZz4ge1xuICAgY29uc3QgY29tbWFuZHMgPSBbLi4uY3VzdG9tQXJnc107XG4gICBpZiAoY29tbWFuZHNbMF0gIT09ICdyZW1vdGUnKSB7XG4gICAgICBjb21tYW5kcy51bnNoaWZ0KCdyZW1vdGUnKTtcbiAgIH1cblxuICAgcmV0dXJuIHN0cmFpZ2h0VGhyb3VnaFN0cmluZ1Rhc2soY29tbWFuZHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlUmVtb3RlVGFzayhyZW1vdGVOYW1lOiBzdHJpbmcpIHtcbiAgIHJldHVybiBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKFsncmVtb3RlJywgJ3JlbW92ZScsIHJlbW90ZU5hbWVdKTtcbn1cbiIsICJpbXBvcnQgeyBMb2dPcHRpb25zLCBMb2dSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi90eXBpbmdzJztcbmltcG9ydCB7IGxvZ0Zvcm1hdEZyb21Db21tYW5kIH0gZnJvbSAnLi4vYXJncy9sb2ctZm9ybWF0JztcbmltcG9ydCB7IGNyZWF0ZUxpc3RMb2dTdW1tYXJ5UGFyc2VyIH0gZnJvbSAnLi4vcGFyc2Vycy9wYXJzZS1saXN0LWxvZy1zdW1tYXJ5JztcbmltcG9ydCB0eXBlIHsgU3RyaW5nVGFzayB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IHZhbGlkYXRlTG9nRm9ybWF0Q29uZmlnIH0gZnJvbSAnLi9kaWZmJztcbmltcG9ydCB7IHBhcnNlTG9nT3B0aW9ucyB9IGZyb20gJy4vbG9nJztcbmltcG9ydCB0eXBlIHsgRW1wdHlUYXNrIH0gZnJvbSAnLi90YXNrJztcblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXNoTGlzdFRhc2soXG4gICBvcHQ6IExvZ09wdGlvbnMgPSB7fSxcbiAgIGN1c3RvbUFyZ3M6IHN0cmluZ1tdXG4pOiBFbXB0eVRhc2sgfCBTdHJpbmdUYXNrPExvZ1Jlc3VsdD4ge1xuICAgY29uc3Qgb3B0aW9ucyA9IHBhcnNlTG9nT3B0aW9uczxhbnk+KG9wdCk7XG4gICBjb25zdCBjb21tYW5kcyA9IFsnc3Rhc2gnLCAnbGlzdCcsIC4uLm9wdGlvbnMuY29tbWFuZHMsIC4uLmN1c3RvbUFyZ3NdO1xuICAgY29uc3QgcGFyc2VyID0gY3JlYXRlTGlzdExvZ1N1bW1hcnlQYXJzZXIoXG4gICAgICBvcHRpb25zLnNwbGl0dGVyLFxuICAgICAgb3B0aW9ucy5maWVsZHMsXG4gICAgICBsb2dGb3JtYXRGcm9tQ29tbWFuZChjb21tYW5kcylcbiAgICk7XG5cbiAgIHJldHVybiAoXG4gICAgICB2YWxpZGF0ZUxvZ0Zvcm1hdENvbmZpZyhjb21tYW5kcykgfHwge1xuICAgICAgICAgY29tbWFuZHMsXG4gICAgICAgICBmb3JtYXQ6ICd1dGYtOCcsXG4gICAgICAgICBwYXJzZXIsXG4gICAgICB9XG4gICApO1xufVxuIiwgImltcG9ydCB7IFN0cmluZ1Rhc2sgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrIH0gZnJvbSAnLi90YXNrJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFN1Yk1vZHVsZVRhc2socmVwbzogc3RyaW5nLCBwYXRoOiBzdHJpbmcpOiBTdHJpbmdUYXNrPHN0cmluZz4ge1xuICAgcmV0dXJuIHN1Yk1vZHVsZVRhc2soWydhZGQnLCByZXBvLCBwYXRoXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0U3ViTW9kdWxlVGFzayhjdXN0b21BcmdzOiBzdHJpbmdbXSk6IFN0cmluZ1Rhc2s8c3RyaW5nPiB7XG4gICByZXR1cm4gc3ViTW9kdWxlVGFzayhbJ2luaXQnLCAuLi5jdXN0b21BcmdzXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdWJNb2R1bGVUYXNrKGN1c3RvbUFyZ3M6IHN0cmluZ1tdKTogU3RyaW5nVGFzazxzdHJpbmc+IHtcbiAgIGNvbnN0IGNvbW1hbmRzID0gWy4uLmN1c3RvbUFyZ3NdO1xuICAgaWYgKGNvbW1hbmRzWzBdICE9PSAnc3VibW9kdWxlJykge1xuICAgICAgY29tbWFuZHMudW5zaGlmdCgnc3VibW9kdWxlJyk7XG4gICB9XG5cbiAgIHJldHVybiBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKGNvbW1hbmRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVN1Yk1vZHVsZVRhc2soY3VzdG9tQXJnczogc3RyaW5nW10pOiBTdHJpbmdUYXNrPHN0cmluZz4ge1xuICAgcmV0dXJuIHN1Yk1vZHVsZVRhc2soWyd1cGRhdGUnLCAuLi5jdXN0b21BcmdzXSk7XG59XG4iLCAiaW1wb3J0IHsgVGFnUmVzdWx0IH0gZnJvbSAnLi4vLi4vLi4vdHlwaW5ncyc7XG5cbmV4cG9ydCBjbGFzcyBUYWdMaXN0IGltcGxlbWVudHMgVGFnUmVzdWx0IHtcbiAgIGNvbnN0cnVjdG9yKFxuICAgICAgcHVibGljIHJlYWRvbmx5IGFsbDogc3RyaW5nW10sXG4gICAgICBwdWJsaWMgcmVhZG9ubHkgbGF0ZXN0OiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgICkge31cbn1cblxuZXhwb3J0IGNvbnN0IHBhcnNlVGFnTGlzdCA9IGZ1bmN0aW9uIChkYXRhOiBzdHJpbmcsIGN1c3RvbVNvcnQgPSBmYWxzZSkge1xuICAgY29uc3QgdGFncyA9IGRhdGEuc3BsaXQoJ1xcbicpLm1hcCh0cmltbWVkKS5maWx0ZXIoQm9vbGVhbik7XG5cbiAgIGlmICghY3VzdG9tU29ydCkge1xuICAgICAgdGFncy5zb3J0KGZ1bmN0aW9uICh0YWdBLCB0YWdCKSB7XG4gICAgICAgICBjb25zdCBwYXJ0c0EgPSB0YWdBLnNwbGl0KCcuJyk7XG4gICAgICAgICBjb25zdCBwYXJ0c0IgPSB0YWdCLnNwbGl0KCcuJyk7XG5cbiAgICAgICAgIGlmIChwYXJ0c0EubGVuZ3RoID09PSAxIHx8IHBhcnRzQi5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBzaW5nbGVTb3J0ZWQodG9OdW1iZXIocGFydHNBWzBdKSwgdG9OdW1iZXIocGFydHNCWzBdKSk7XG4gICAgICAgICB9XG5cbiAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gTWF0aC5tYXgocGFydHNBLmxlbmd0aCwgcGFydHNCLmxlbmd0aCk7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGRpZmYgPSBzb3J0ZWQodG9OdW1iZXIocGFydHNBW2ldKSwgdG9OdW1iZXIocGFydHNCW2ldKSk7XG5cbiAgICAgICAgICAgIGlmIChkaWZmKSB7XG4gICAgICAgICAgICAgICByZXR1cm4gZGlmZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgIH1cblxuICAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9KTtcbiAgIH1cblxuICAgY29uc3QgbGF0ZXN0ID0gY3VzdG9tU29ydCA/IHRhZ3NbMF0gOiBbLi4udGFnc10ucmV2ZXJzZSgpLmZpbmQoKHRhZykgPT4gdGFnLmluZGV4T2YoJy4nKSA+PSAwKTtcblxuICAgcmV0dXJuIG5ldyBUYWdMaXN0KHRhZ3MsIGxhdGVzdCk7XG59O1xuXG5mdW5jdGlvbiBzaW5nbGVTb3J0ZWQoYTogbnVtYmVyLCBiOiBudW1iZXIpOiBudW1iZXIge1xuICAgY29uc3QgYUlzTnVtID0gaXNOYU4oYSk7XG4gICBjb25zdCBiSXNOdW0gPSBpc05hTihiKTtcblxuICAgaWYgKGFJc051bSAhPT0gYklzTnVtKSB7XG4gICAgICByZXR1cm4gYUlzTnVtID8gMSA6IC0xO1xuICAgfVxuXG4gICByZXR1cm4gYUlzTnVtID8gc29ydGVkKGEsIGIpIDogMDtcbn1cblxuZnVuY3Rpb24gc29ydGVkKGE6IG51bWJlciwgYjogbnVtYmVyKSB7XG4gICByZXR1cm4gYSA9PT0gYiA/IDAgOiBhID4gYiA/IDEgOiAtMTtcbn1cblxuZnVuY3Rpb24gdHJpbW1lZChpbnB1dDogc3RyaW5nKSB7XG4gICByZXR1cm4gaW5wdXQudHJpbSgpO1xufVxuXG5mdW5jdGlvbiB0b051bWJlcihpbnB1dDogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KGlucHV0LnJlcGxhY2UoL15cXEQrL2csICcnKSwgMTApIHx8IDA7XG4gICB9XG5cbiAgIHJldHVybiAwO1xufVxuIiwgImltcG9ydCB7IFRhZ1Jlc3VsdCB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuaW1wb3J0IHsgcGFyc2VUYWdMaXN0IH0gZnJvbSAnLi4vcmVzcG9uc2VzL1RhZ0xpc3QnO1xuaW1wb3J0IHsgU3RyaW5nVGFzayB9IGZyb20gJy4uL3R5cGVzJztcblxuLyoqXG4gKiBUYXNrIHVzZWQgYnkgYGdpdC50YWdzYFxuICovXG5leHBvcnQgZnVuY3Rpb24gdGFnTGlzdFRhc2soY3VzdG9tQXJnczogc3RyaW5nW10gPSBbXSk6IFN0cmluZ1Rhc2s8VGFnUmVzdWx0PiB7XG4gICBjb25zdCBoYXNDdXN0b21Tb3J0ID0gY3VzdG9tQXJncy5zb21lKChvcHRpb24pID0+IC9eLS1zb3J0PS8udGVzdChvcHRpb24pKTtcblxuICAgcmV0dXJuIHtcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIGNvbW1hbmRzOiBbJ3RhZycsICctbCcsIC4uLmN1c3RvbUFyZ3NdLFxuICAgICAgcGFyc2VyKHRleHQ6IHN0cmluZykge1xuICAgICAgICAgcmV0dXJuIHBhcnNlVGFnTGlzdCh0ZXh0LCBoYXNDdXN0b21Tb3J0KTtcbiAgICAgIH0sXG4gICB9O1xufVxuXG4vKipcbiAqIFRhc2sgdXNlZCBieSBgZ2l0LmFkZFRhZ2BcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZFRhZ1Rhc2sobmFtZTogc3RyaW5nKTogU3RyaW5nVGFzazx7IG5hbWU6IHN0cmluZyB9PiB7XG4gICByZXR1cm4ge1xuICAgICAgZm9ybWF0OiAndXRmLTgnLFxuICAgICAgY29tbWFuZHM6IFsndGFnJywgbmFtZV0sXG4gICAgICBwYXJzZXIoKSB7XG4gICAgICAgICByZXR1cm4geyBuYW1lIH07XG4gICAgICB9LFxuICAgfTtcbn1cblxuLyoqXG4gKiBUYXNrIHVzZWQgYnkgYGdpdC5hZGRUYWdgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRBbm5vdGF0ZWRUYWdUYXNrKFxuICAgbmFtZTogc3RyaW5nLFxuICAgdGFnTWVzc2FnZTogc3RyaW5nXG4pOiBTdHJpbmdUYXNrPHsgbmFtZTogc3RyaW5nIH0+IHtcbiAgIHJldHVybiB7XG4gICAgICBmb3JtYXQ6ICd1dGYtOCcsXG4gICAgICBjb21tYW5kczogWyd0YWcnLCAnLWEnLCAnLW0nLCB0YWdNZXNzYWdlLCBuYW1lXSxcbiAgICAgIHBhcnNlcigpIHtcbiAgICAgICAgIHJldHVybiB7IG5hbWUgfTtcbiAgICAgIH0sXG4gICB9O1xufVxuIiwgImNvbnN0IHsgR2l0RXhlY3V0b3IgfSA9IHJlcXVpcmUoJy4vbGliL3J1bm5lcnMvZ2l0LWV4ZWN1dG9yJyk7XG5jb25zdCB7IFNpbXBsZUdpdEFwaSB9ID0gcmVxdWlyZSgnLi9saWIvc2ltcGxlLWdpdC1hcGknKTtcblxuY29uc3QgeyBTY2hlZHVsZXIgfSA9IHJlcXVpcmUoJy4vbGliL3J1bm5lcnMvc2NoZWR1bGVyJyk7XG5jb25zdCB7IGNvbmZpZ3VyYXRpb25FcnJvclRhc2sgfSA9IHJlcXVpcmUoJy4vbGliL3Rhc2tzL3Rhc2snKTtcbmNvbnN0IHtcbiAgIGFzQXJyYXksXG4gICBmaWx0ZXJBcnJheSxcbiAgIGZpbHRlclByaW1pdGl2ZXMsXG4gICBmaWx0ZXJTdHJpbmcsXG4gICBmaWx0ZXJTdHJpbmdPclN0cmluZ0FycmF5LFxuICAgZmlsdGVyVHlwZSxcbiAgIGdldFRyYWlsaW5nT3B0aW9ucyxcbiAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudCxcbiAgIHRyYWlsaW5nT3B0aW9uc0FyZ3VtZW50LFxufSA9IHJlcXVpcmUoJy4vbGliL3V0aWxzJyk7XG5jb25zdCB7IGFwcGx5UGF0Y2hUYXNrIH0gPSByZXF1aXJlKCcuL2xpYi90YXNrcy9hcHBseS1wYXRjaCcpO1xuY29uc3Qge1xuICAgYnJhbmNoVGFzayxcbiAgIGJyYW5jaExvY2FsVGFzayxcbiAgIGRlbGV0ZUJyYW5jaGVzVGFzayxcbiAgIGRlbGV0ZUJyYW5jaFRhc2ssXG59ID0gcmVxdWlyZSgnLi9saWIvdGFza3MvYnJhbmNoJyk7XG5jb25zdCB7IGNoZWNrSWdub3JlVGFzayB9ID0gcmVxdWlyZSgnLi9saWIvdGFza3MvY2hlY2staWdub3JlJyk7XG5jb25zdCB7IGNoZWNrSXNSZXBvVGFzayB9ID0gcmVxdWlyZSgnLi9saWIvdGFza3MvY2hlY2staXMtcmVwbycpO1xuY29uc3QgeyBjbG9uZVRhc2ssIGNsb25lTWlycm9yVGFzayB9ID0gcmVxdWlyZSgnLi9saWIvdGFza3MvY2xvbmUnKTtcbmNvbnN0IHsgY2xlYW5XaXRoT3B0aW9uc1Rhc2ssIGlzQ2xlYW5PcHRpb25zQXJyYXkgfSA9IHJlcXVpcmUoJy4vbGliL3Rhc2tzL2NsZWFuJyk7XG5jb25zdCB7IGRpZmZTdW1tYXJ5VGFzayB9ID0gcmVxdWlyZSgnLi9saWIvdGFza3MvZGlmZicpO1xuY29uc3QgeyBmZXRjaFRhc2sgfSA9IHJlcXVpcmUoJy4vbGliL3Rhc2tzL2ZldGNoJyk7XG5jb25zdCB7IG1vdmVUYXNrIH0gPSByZXF1aXJlKCcuL2xpYi90YXNrcy9tb3ZlJyk7XG5jb25zdCB7IHB1bGxUYXNrIH0gPSByZXF1aXJlKCcuL2xpYi90YXNrcy9wdWxsJyk7XG5jb25zdCB7IHB1c2hUYWdzVGFzayB9ID0gcmVxdWlyZSgnLi9saWIvdGFza3MvcHVzaCcpO1xuY29uc3Qge1xuICAgYWRkUmVtb3RlVGFzayxcbiAgIGdldFJlbW90ZXNUYXNrLFxuICAgbGlzdFJlbW90ZXNUYXNrLFxuICAgcmVtb3RlVGFzayxcbiAgIHJlbW92ZVJlbW90ZVRhc2ssXG59ID0gcmVxdWlyZSgnLi9saWIvdGFza3MvcmVtb3RlJyk7XG5jb25zdCB7IGdldFJlc2V0TW9kZSwgcmVzZXRUYXNrIH0gPSByZXF1aXJlKCcuL2xpYi90YXNrcy9yZXNldCcpO1xuY29uc3QgeyBzdGFzaExpc3RUYXNrIH0gPSByZXF1aXJlKCcuL2xpYi90YXNrcy9zdGFzaC1saXN0Jyk7XG5jb25zdCB7XG4gICBhZGRTdWJNb2R1bGVUYXNrLFxuICAgaW5pdFN1Yk1vZHVsZVRhc2ssXG4gICBzdWJNb2R1bGVUYXNrLFxuICAgdXBkYXRlU3ViTW9kdWxlVGFzayxcbn0gPSByZXF1aXJlKCcuL2xpYi90YXNrcy9zdWItbW9kdWxlJyk7XG5jb25zdCB7IGFkZEFubm90YXRlZFRhZ1Rhc2ssIGFkZFRhZ1Rhc2ssIHRhZ0xpc3RUYXNrIH0gPSByZXF1aXJlKCcuL2xpYi90YXNrcy90YWcnKTtcbmNvbnN0IHsgc3RyYWlnaHRUaHJvdWdoQnVmZmVyVGFzaywgc3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayB9ID0gcmVxdWlyZSgnLi9saWIvdGFza3MvdGFzaycpO1xuXG5mdW5jdGlvbiBHaXQob3B0aW9ucywgcGx1Z2lucykge1xuICAgdGhpcy5fcGx1Z2lucyA9IHBsdWdpbnM7XG4gICB0aGlzLl9leGVjdXRvciA9IG5ldyBHaXRFeGVjdXRvcihcbiAgICAgIG9wdGlvbnMuYmFzZURpcixcbiAgICAgIG5ldyBTY2hlZHVsZXIob3B0aW9ucy5tYXhDb25jdXJyZW50UHJvY2Vzc2VzKSxcbiAgICAgIHBsdWdpbnNcbiAgICk7XG5cbiAgIHRoaXMuX3RyaW1tZWQgPSBvcHRpb25zLnRyaW1tZWQ7XG59XG5cbihHaXQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTaW1wbGVHaXRBcGkucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBHaXQ7XG5cbi8qKlxuICogU2V0cyB0aGUgcGF0aCB0byBhIGN1c3RvbSBnaXQgYmluYXJ5LCBzaG91bGQgZWl0aGVyIGJlIGBnaXRgIHdoZW4gdGhlcmUgaXMgYW4gaW5zdGFsbGF0aW9uIG9mIGdpdCBhdmFpbGFibGUgb25cbiAqIHRoZSBzeXN0ZW0gcGF0aCwgb3IgYSBmdWxseSBxdWFsaWZpZWQgcGF0aCB0byB0aGUgZXhlY3V0YWJsZS5cbiAqL1xuR2l0LnByb3RvdHlwZS5jdXN0b21CaW5hcnkgPSBmdW5jdGlvbiAoY29tbWFuZCkge1xuICAgdGhpcy5fcGx1Z2lucy5yZWNvbmZpZ3VyZSgnYmluYXJ5JywgY29tbWFuZCk7XG4gICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyBhbiBlbnZpcm9ubWVudCB2YXJpYWJsZSBmb3IgdGhlIHNwYXduZWQgY2hpbGQgcHJvY2VzcywgZWl0aGVyIHN1cHBseSBib3RoIGEgbmFtZSBhbmQgdmFsdWUgYXMgc3RyaW5ncyBvclxuICogYSBzaW5nbGUgb2JqZWN0IHRvIGVudGlyZWx5IHJlcGxhY2UgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQgdmFyaWFibGVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IFt2YWx1ZV1cbiAqIEByZXR1cm5zIHtHaXR9XG4gKi9cbkdpdC5wcm90b3R5cGUuZW52ID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHRoaXMuX2V4ZWN1dG9yLmVudiA9IG5hbWU7XG4gICB9IGVsc2Uge1xuICAgICAgKHRoaXMuX2V4ZWN1dG9yLmVudiA9IHRoaXMuX2V4ZWN1dG9yLmVudiB8fCB7fSlbbmFtZV0gPSB2YWx1ZTtcbiAgIH1cblxuICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIExpc3QgdGhlIHN0YXNoKHMpIG9mIHRoZSBsb2NhbCByZXBvXG4gKi9cbkdpdC5wcm90b3R5cGUuc3Rhc2hMaXN0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgc3Rhc2hMaXN0VGFzayhcbiAgICAgICAgIHRyYWlsaW5nT3B0aW9uc0FyZ3VtZW50KGFyZ3VtZW50cykgfHwge30sXG4gICAgICAgICAoZmlsdGVyQXJyYXkob3B0aW9ucykgJiYgb3B0aW9ucykgfHwgW11cbiAgICAgICksXG4gICAgICB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKVxuICAgKTtcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUNsb25lVGFzayhhcGksIHRhc2ssIHJlcG9QYXRoLCBsb2NhbFBhdGgpIHtcbiAgIGlmICh0eXBlb2YgcmVwb1BhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gY29uZmlndXJhdGlvbkVycm9yVGFzayhgZ2l0LiR7YXBpfSgpIHJlcXVpcmVzIGEgc3RyaW5nICdyZXBvUGF0aCdgKTtcbiAgIH1cblxuICAgcmV0dXJuIHRhc2socmVwb1BhdGgsIGZpbHRlclR5cGUobG9jYWxQYXRoLCBmaWx0ZXJTdHJpbmcpLCBnZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzKSk7XG59XG5cbi8qKlxuICogQ2xvbmUgYSBnaXQgcmVwb1xuICovXG5HaXQucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICBjcmVhdGVDbG9uZVRhc2soJ2Nsb25lJywgY2xvbmVUYXNrLCAuLi5hcmd1bWVudHMpLFxuICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICk7XG59O1xuXG4vKipcbiAqIE1pcnJvciBhIGdpdCByZXBvXG4gKi9cbkdpdC5wcm90b3R5cGUubWlycm9yID0gZnVuY3Rpb24gKCkge1xuICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICBjcmVhdGVDbG9uZVRhc2soJ21pcnJvcicsIGNsb25lTWlycm9yVGFzaywgLi4uYXJndW1lbnRzKSxcbiAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICApO1xufTtcblxuLyoqXG4gKiBNb3ZlcyBvbmUgb3IgbW9yZSBmaWxlcyB0byBhIG5ldyBkZXN0aW5hdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0LXNjbS5jb20vZG9jcy9naXQtbXZcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gZnJvbVxuICogQHBhcmFtIHtzdHJpbmd9IHRvXG4gKi9cbkdpdC5wcm90b3R5cGUubXYgPSBmdW5jdGlvbiAoZnJvbSwgdG8pIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKG1vdmVUYXNrKGZyb20sIHRvKSwgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cykpO1xufTtcblxuLyoqXG4gKiBJbnRlcm5hbGx5IHVzZXMgcHVsbCBhbmQgdGFncyB0byBnZXQgdGhlIGxpc3Qgb2YgdGFncyB0aGVuIGNoZWNrcyBvdXQgdGhlIGxhdGVzdCB0YWcuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3RoZW5dXG4gKi9cbkdpdC5wcm90b3R5cGUuY2hlY2tvdXRMYXRlc3RUYWcgPSBmdW5jdGlvbiAodGhlbikge1xuICAgdmFyIGdpdCA9IHRoaXM7XG4gICByZXR1cm4gdGhpcy5wdWxsKGZ1bmN0aW9uICgpIHtcbiAgICAgIGdpdC50YWdzKGZ1bmN0aW9uIChlcnIsIHRhZ3MpIHtcbiAgICAgICAgIGdpdC5jaGVja291dCh0YWdzLmxhdGVzdCwgdGhlbik7XG4gICAgICB9KTtcbiAgIH0pO1xufTtcblxuLyoqXG4gKiBQdWxsIHRoZSB1cGRhdGVkIGNvbnRlbnRzIG9mIHRoZSBjdXJyZW50IHJlcG9cbiAqL1xuR2l0LnByb3RvdHlwZS5wdWxsID0gZnVuY3Rpb24gKHJlbW90ZSwgYnJhbmNoLCBvcHRpb25zLCB0aGVuKSB7XG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayhcbiAgICAgIHB1bGxUYXNrKFxuICAgICAgICAgZmlsdGVyVHlwZShyZW1vdGUsIGZpbHRlclN0cmluZyksXG4gICAgICAgICBmaWx0ZXJUeXBlKGJyYW5jaCwgZmlsdGVyU3RyaW5nKSxcbiAgICAgICAgIGdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMpXG4gICAgICApLFxuICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICk7XG59O1xuXG4vKipcbiAqIEZldGNoIHRoZSB1cGRhdGVkIGNvbnRlbnRzIG9mIHRoZSBjdXJyZW50IHJlcG8uXG4gKlxuICogQGV4YW1wbGVcbiAqICAgLmZldGNoKCd1cHN0cmVhbScsICdtYXN0ZXInKSAvLyBmZXRjaGVzIGZyb20gbWFzdGVyIG9uIHJlbW90ZSBuYW1lZCB1cHN0cmVhbVxuICogICAuZmV0Y2goZnVuY3Rpb24gKCkge30pIC8vIHJ1bnMgZmV0Y2ggYWdhaW5zdCBkZWZhdWx0IHJlbW90ZSBhbmQgYnJhbmNoIGFuZCBjYWxscyBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcmVtb3RlXVxuICogQHBhcmFtIHtzdHJpbmd9IFticmFuY2hdXG4gKi9cbkdpdC5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbiAocmVtb3RlLCBicmFuY2gpIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgZmV0Y2hUYXNrKFxuICAgICAgICAgZmlsdGVyVHlwZShyZW1vdGUsIGZpbHRlclN0cmluZyksXG4gICAgICAgICBmaWx0ZXJUeXBlKGJyYW5jaCwgZmlsdGVyU3RyaW5nKSxcbiAgICAgICAgIGdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMpXG4gICAgICApLFxuICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICk7XG59O1xuXG4vKipcbiAqIERpc2FibGVzL2VuYWJsZXMgdGhlIHVzZSBvZiB0aGUgY29uc29sZSBmb3IgcHJpbnRpbmcgd2FybmluZ3MgYW5kIGVycm9ycywgYnkgZGVmYXVsdCBtZXNzYWdlcyBhcmUgbm90IHNob3duIGluXG4gKiBhIHByb2R1Y3Rpb24gZW52aXJvbm1lbnQuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSBzaWxlbmNlXG4gKiBAcmV0dXJucyB7R2l0fVxuICovXG5HaXQucHJvdG90eXBlLnNpbGVudCA9IGZ1bmN0aW9uIChzaWxlbmNlKSB7XG4gICBjb25zb2xlLndhcm4oXG4gICAgICAnc2ltcGxlLWdpdCBkZXByZWNhdGlvbiBub3RpY2U6IGdpdC5zaWxlbnQ6IGxvZ2dpbmcgc2hvdWxkIGJlIGNvbmZpZ3VyZWQgdXNpbmcgdGhlIGBkZWJ1Z2AgbGlicmFyeSAvIGBERUJVR2AgZW52aXJvbm1lbnQgdmFyaWFibGUsIHRoaXMgd2lsbCBiZSBhbiBlcnJvciBpbiB2ZXJzaW9uIDMnXG4gICApO1xuICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIExpc3QgYWxsIHRhZ3MuIFdoZW4gdXNpbmcgZ2l0IDIuNy4wIG9yIGFib3ZlLCBpbmNsdWRlIGFuIG9wdGlvbnMgb2JqZWN0IHdpdGggYFwiLS1zb3J0XCI6IFwicHJvcGVydHktbmFtZVwiYCB0b1xuICogc29ydCB0aGUgdGFncyBieSB0aGF0IHByb3BlcnR5IGluc3RlYWQgb2YgdXNpbmcgdGhlIGRlZmF1bHQgc2VtYW50aWMgdmVyc2lvbmluZyBzb3J0LlxuICpcbiAqIE5vdGUsIHN1cHBseWluZyB0aGlzIG9wdGlvbiB3aGVuIGl0IGlzIG5vdCBzdXBwb3J0ZWQgYnkgeW91ciBHaXQgdmVyc2lvbiB3aWxsIGNhdXNlIHRoZSBvcGVyYXRpb24gdG8gZmFpbC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbdGhlbl1cbiAqL1xuR2l0LnByb3RvdHlwZS50YWdzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHRoZW4pIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgdGFnTGlzdFRhc2soZ2V0VHJhaWxpbmdPcHRpb25zKGFyZ3VtZW50cykpLFxuICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICk7XG59O1xuXG4vKipcbiAqIFJlYmFzZXMgdGhlIGN1cnJlbnQgd29ya2luZyBjb3B5LiBPcHRpb25zIGNhbiBiZSBzdXBwbGllZCBlaXRoZXIgYXMgYW4gYXJyYXkgb2Ygc3RyaW5nIHBhcmFtZXRlcnNcbiAqIHRvIGJlIHNlbnQgdG8gdGhlIGBnaXQgcmViYXNlYCBjb21tYW5kLCBvciBhIHN0YW5kYXJkIG9wdGlvbnMgb2JqZWN0LlxuICovXG5HaXQucHJvdG90eXBlLnJlYmFzZSA9IGZ1bmN0aW9uICgpIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgc3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayhbJ3JlYmFzZScsIC4uLmdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMpXSksXG4gICAgICB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKVxuICAgKTtcbn07XG5cbi8qKlxuICogUmVzZXQgYSByZXBvXG4gKi9cbkdpdC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAobW9kZSkge1xuICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICByZXNldFRhc2soZ2V0UmVzZXRNb2RlKG1vZGUpLCBnZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzKSksXG4gICAgICB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKVxuICAgKTtcbn07XG5cbi8qKlxuICogUmV2ZXJ0IG9uZSBvciBtb3JlIGNvbW1pdHMgaW4gdGhlIGxvY2FsIHdvcmtpbmcgY29weVxuICovXG5HaXQucHJvdG90eXBlLnJldmVydCA9IGZ1bmN0aW9uIChjb21taXQpIHtcbiAgIGNvbnN0IG5leHQgPSB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKTtcblxuICAgaWYgKHR5cGVvZiBjb21taXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnVuVGFzayhjb25maWd1cmF0aW9uRXJyb3JUYXNrKCdDb21taXQgbXVzdCBiZSBhIHN0cmluZycpLCBuZXh0KTtcbiAgIH1cblxuICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKFsncmV2ZXJ0JywgLi4uZ2V0VHJhaWxpbmdPcHRpb25zKGFyZ3VtZW50cywgMCwgdHJ1ZSksIGNvbW1pdF0pLFxuICAgICAgbmV4dFxuICAgKTtcbn07XG5cbi8qKlxuICogQWRkIGEgbGlnaHR3ZWlnaHQgdGFnIHRvIHRoZSBoZWFkIG9mIHRoZSBjdXJyZW50IGJyYW5jaFxuICovXG5HaXQucHJvdG90eXBlLmFkZFRhZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICBjb25zdCB0YXNrID1cbiAgICAgIHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJ1xuICAgICAgICAgPyBhZGRUYWdUYXNrKG5hbWUpXG4gICAgICAgICA6IGNvbmZpZ3VyYXRpb25FcnJvclRhc2soJ0dpdC5hZGRUYWcgcmVxdWlyZXMgYSB0YWcgbmFtZScpO1xuXG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayh0YXNrLCB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKSk7XG59O1xuXG4vKipcbiAqIEFkZCBhbiBhbm5vdGF0ZWQgdGFnIHRvIHRoZSBoZWFkIG9mIHRoZSBjdXJyZW50IGJyYW5jaFxuICovXG5HaXQucHJvdG90eXBlLmFkZEFubm90YXRlZFRhZyA9IGZ1bmN0aW9uICh0YWdOYW1lLCB0YWdNZXNzYWdlKSB7XG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayhcbiAgICAgIGFkZEFubm90YXRlZFRhZ1Rhc2sodGFnTmFtZSwgdGFnTWVzc2FnZSksXG4gICAgICB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKVxuICAgKTtcbn07XG5cbi8qKlxuICogRGVsZXRlIGEgbG9jYWwgYnJhbmNoXG4gKi9cbkdpdC5wcm90b3R5cGUuZGVsZXRlTG9jYWxCcmFuY2ggPSBmdW5jdGlvbiAoYnJhbmNoTmFtZSwgZm9yY2VEZWxldGUsIHRoZW4pIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgZGVsZXRlQnJhbmNoVGFzayhicmFuY2hOYW1lLCB0eXBlb2YgZm9yY2VEZWxldGUgPT09ICdib29sZWFuJyA/IGZvcmNlRGVsZXRlIDogZmFsc2UpLFxuICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICk7XG59O1xuXG4vKipcbiAqIERlbGV0ZSBvbmUgb3IgbW9yZSBsb2NhbCBicmFuY2hlc1xuICovXG5HaXQucHJvdG90eXBlLmRlbGV0ZUxvY2FsQnJhbmNoZXMgPSBmdW5jdGlvbiAoYnJhbmNoTmFtZXMsIGZvcmNlRGVsZXRlLCB0aGVuKSB7XG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayhcbiAgICAgIGRlbGV0ZUJyYW5jaGVzVGFzayhicmFuY2hOYW1lcywgdHlwZW9mIGZvcmNlRGVsZXRlID09PSAnYm9vbGVhbicgPyBmb3JjZURlbGV0ZSA6IGZhbHNlKSxcbiAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICApO1xufTtcblxuLyoqXG4gKiBMaXN0IGFsbCBicmFuY2hlc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0IHwgc3RyaW5nW119IFtvcHRpb25zXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3RoZW5dXG4gKi9cbkdpdC5wcm90b3R5cGUuYnJhbmNoID0gZnVuY3Rpb24gKG9wdGlvbnMsIHRoZW4pIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgYnJhbmNoVGFzayhnZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzKSksXG4gICAgICB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKVxuICAgKTtcbn07XG5cbi8qKlxuICogUmV0dXJuIGxpc3Qgb2YgbG9jYWwgYnJhbmNoZXNcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbdGhlbl1cbiAqL1xuR2l0LnByb3RvdHlwZS5icmFuY2hMb2NhbCA9IGZ1bmN0aW9uICh0aGVuKSB7XG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayhicmFuY2hMb2NhbFRhc2soKSwgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cykpO1xufTtcblxuLyoqXG4gKiBFeGVjdXRlcyBhbnkgY29tbWFuZCBhZ2FpbnN0IHRoZSBnaXQgYmluYXJ5LlxuICovXG5HaXQucHJvdG90eXBlLnJhdyA9IGZ1bmN0aW9uIChjb21tYW5kcykge1xuICAgY29uc3QgY3JlYXRlUmVzdENvbW1hbmRzID0gIUFycmF5LmlzQXJyYXkoY29tbWFuZHMpO1xuICAgY29uc3QgY29tbWFuZCA9IFtdLnNsaWNlLmNhbGwoY3JlYXRlUmVzdENvbW1hbmRzID8gYXJndW1lbnRzIDogY29tbWFuZHMsIDApO1xuXG4gICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbW1hbmQubGVuZ3RoICYmIGNyZWF0ZVJlc3RDb21tYW5kczsgaSsrKSB7XG4gICAgICBpZiAoIWZpbHRlclByaW1pdGl2ZXMoY29tbWFuZFtpXSkpIHtcbiAgICAgICAgIGNvbW1hbmQuc3BsaWNlKGksIGNvbW1hbmQubGVuZ3RoIC0gaSk7XG4gICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgIH1cblxuICAgY29tbWFuZC5wdXNoKC4uLmdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMsIDAsIHRydWUpKTtcblxuICAgdmFyIG5leHQgPSB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKTtcblxuICAgaWYgKCFjb21tYW5kLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICAgICBjb25maWd1cmF0aW9uRXJyb3JUYXNrKCdSYXc6IG11c3Qgc3VwcGx5IG9uZSBvciBtb3JlIGNvbW1hbmQgdG8gZXhlY3V0ZScpLFxuICAgICAgICAgbmV4dFxuICAgICAgKTtcbiAgIH1cblxuICAgcmV0dXJuIHRoaXMuX3J1blRhc2soc3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayhjb21tYW5kLCB0aGlzLl90cmltbWVkKSwgbmV4dCk7XG59O1xuXG5HaXQucHJvdG90eXBlLnN1Ym1vZHVsZUFkZCA9IGZ1bmN0aW9uIChyZXBvLCBwYXRoLCB0aGVuKSB7XG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayhhZGRTdWJNb2R1bGVUYXNrKHJlcG8sIHBhdGgpLCB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKSk7XG59O1xuXG5HaXQucHJvdG90eXBlLnN1Ym1vZHVsZVVwZGF0ZSA9IGZ1bmN0aW9uIChhcmdzLCB0aGVuKSB7XG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayhcbiAgICAgIHVwZGF0ZVN1Yk1vZHVsZVRhc2soZ2V0VHJhaWxpbmdPcHRpb25zKGFyZ3VtZW50cywgdHJ1ZSkpLFxuICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICk7XG59O1xuXG5HaXQucHJvdG90eXBlLnN1Ym1vZHVsZUluaXQgPSBmdW5jdGlvbiAoYXJncywgdGhlbikge1xuICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICBpbml0U3ViTW9kdWxlVGFzayhnZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzLCB0cnVlKSksXG4gICAgICB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKVxuICAgKTtcbn07XG5cbkdpdC5wcm90b3R5cGUuc3ViTW9kdWxlID0gZnVuY3Rpb24gKG9wdGlvbnMsIHRoZW4pIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgc3ViTW9kdWxlVGFzayhnZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzKSksXG4gICAgICB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKVxuICAgKTtcbn07XG5cbkdpdC5wcm90b3R5cGUubGlzdFJlbW90ZSA9IGZ1bmN0aW9uICgpIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgbGlzdFJlbW90ZXNUYXNrKGdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMpKSxcbiAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICApO1xufTtcblxuLyoqXG4gKiBBZGRzIGEgcmVtb3RlIHRvIHRoZSBsaXN0IG9mIHJlbW90ZXMuXG4gKi9cbkdpdC5wcm90b3R5cGUuYWRkUmVtb3RlID0gZnVuY3Rpb24gKHJlbW90ZU5hbWUsIHJlbW90ZVJlcG8sIHRoZW4pIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgYWRkUmVtb3RlVGFzayhyZW1vdGVOYW1lLCByZW1vdGVSZXBvLCBnZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzKSksXG4gICAgICB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKVxuICAgKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlcyBhbiBlbnRyeSBieSBuYW1lIGZyb20gdGhlIGxpc3Qgb2YgcmVtb3Rlcy5cbiAqL1xuR2l0LnByb3RvdHlwZS5yZW1vdmVSZW1vdGUgPSBmdW5jdGlvbiAocmVtb3RlTmFtZSwgdGhlbikge1xuICAgcmV0dXJuIHRoaXMuX3J1blRhc2socmVtb3ZlUmVtb3RlVGFzayhyZW1vdGVOYW1lKSwgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cykpO1xufTtcblxuLyoqXG4gKiBHZXRzIHRoZSBjdXJyZW50bHkgYXZhaWxhYmxlIHJlbW90ZXMsIHNldHRpbmcgdGhlIG9wdGlvbmFsIHZlcmJvc2UgYXJndW1lbnQgdG8gdHJ1ZSBpbmNsdWRlcyBhZGRpdGlvbmFsXG4gKiBkZXRhaWwgb24gdGhlIHJlbW90ZXMgdGhlbXNlbHZlcy5cbiAqL1xuR2l0LnByb3RvdHlwZS5nZXRSZW1vdGVzID0gZnVuY3Rpb24gKHZlcmJvc2UsIHRoZW4pIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKGdldFJlbW90ZXNUYXNrKHZlcmJvc2UgPT09IHRydWUpLCB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKSk7XG59O1xuXG4vKipcbiAqIENhbGwgYW55IGBnaXQgcmVtb3RlYCBmdW5jdGlvbiB3aXRoIGFyZ3VtZW50cyBwYXNzZWQgYXMgYW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBvcHRpb25zXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbdGhlbl1cbiAqL1xuR2l0LnByb3RvdHlwZS5yZW1vdGUgPSBmdW5jdGlvbiAob3B0aW9ucywgdGhlbikge1xuICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICByZW1vdGVUYXNrKGdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMpKSxcbiAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICApO1xufTtcblxuLyoqXG4gKiBDYWxsIGFueSBgZ2l0IHRhZ2AgZnVuY3Rpb24gd2l0aCBhcmd1bWVudHMgcGFzc2VkIGFzIGFuIGFycmF5IG9mIHN0cmluZ3MuXG4gKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gb3B0aW9uc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gW3RoZW5dXG4gKi9cbkdpdC5wcm90b3R5cGUudGFnID0gZnVuY3Rpb24gKG9wdGlvbnMsIHRoZW4pIHtcbiAgIGNvbnN0IGNvbW1hbmQgPSBnZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzKTtcblxuICAgaWYgKGNvbW1hbmRbMF0gIT09ICd0YWcnKSB7XG4gICAgICBjb21tYW5kLnVuc2hpZnQoJ3RhZycpO1xuICAgfVxuXG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayhzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKGNvbW1hbmQpLCB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKSk7XG59O1xuXG4vKipcbiAqIFVwZGF0ZXMgcmVwb3NpdG9yeSBzZXJ2ZXIgaW5mb1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFt0aGVuXVxuICovXG5HaXQucHJvdG90eXBlLnVwZGF0ZVNlcnZlckluZm8gPSBmdW5jdGlvbiAodGhlbikge1xuICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKFsndXBkYXRlLXNlcnZlci1pbmZvJ10pLFxuICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICk7XG59O1xuXG4vKipcbiAqIFB1c2hlcyB0aGUgY3VycmVudCB0YWcgY2hhbmdlcyB0byBhIHJlbW90ZSB3aGljaCBjYW4gYmUgZWl0aGVyIGEgVVJMIG9yIG5hbWVkIHJlbW90ZS4gV2hlbiBub3Qgc3BlY2lmaWVkIHVzZXMgdGhlXG4gKiBkZWZhdWx0IGNvbmZpZ3VyZWQgcmVtb3RlIHNwZWMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IFtyZW1vdGVdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbdGhlbl1cbiAqL1xuR2l0LnByb3RvdHlwZS5wdXNoVGFncyA9IGZ1bmN0aW9uIChyZW1vdGUsIHRoZW4pIHtcbiAgIGNvbnN0IHRhc2sgPSBwdXNoVGFnc1Rhc2soXG4gICAgICB7IHJlbW90ZTogZmlsdGVyVHlwZShyZW1vdGUsIGZpbHRlclN0cmluZykgfSxcbiAgICAgIGdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMpXG4gICApO1xuXG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayh0YXNrLCB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJndW1lbnRzKSk7XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgdGhlIG5hbWVkIGZpbGVzIGZyb20gc291cmNlIGNvbnRyb2wuXG4gKi9cbkdpdC5wcm90b3R5cGUucm0gPSBmdW5jdGlvbiAoZmlsZXMpIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgc3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayhbJ3JtJywgJy1mJywgLi4uYXNBcnJheShmaWxlcyldKSxcbiAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICApO1xufTtcblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBuYW1lZCBmaWxlcyBmcm9tIHNvdXJjZSBjb250cm9sIGJ1dCBrZWVwcyB0aGVtIG9uIGRpc2sgcmF0aGVyIHRoYW4gZGVsZXRpbmcgdGhlbSBlbnRpcmVseS4gVG9cbiAqIGNvbXBsZXRlbHkgcmVtb3ZlIHRoZSBmaWxlcywgdXNlIGBybWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IGZpbGVzXG4gKi9cbkdpdC5wcm90b3R5cGUucm1LZWVwTG9jYWwgPSBmdW5jdGlvbiAoZmlsZXMpIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgc3RyYWlnaHRUaHJvdWdoU3RyaW5nVGFzayhbJ3JtJywgJy0tY2FjaGVkJywgLi4uYXNBcnJheShmaWxlcyldKSxcbiAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICApO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgbGlzdCBvZiBvYmplY3RzIGluIGEgdHJlZSBiYXNlZCBvbiBjb21taXQgaGFzaC4gUGFzc2luZyBpbiBhbiBvYmplY3QgaGFzaCByZXR1cm5zIHRoZSBvYmplY3QncyBjb250ZW50LFxuICogc2l6ZSwgYW5kIHR5cGUuXG4gKlxuICogUGFzc2luZyBcIi1wXCIgd2lsbCBpbnN0cnVjdCBjYXQtZmlsZSB0byBkZXRlcm1pbmUgdGhlIG9iamVjdCB0eXBlLCBhbmQgZGlzcGxheSBpdHMgZm9ybWF0dGVkIGNvbnRlbnRzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nW119IFtvcHRpb25zXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3RoZW5dXG4gKi9cbkdpdC5wcm90b3R5cGUuY2F0RmlsZSA9IGZ1bmN0aW9uIChvcHRpb25zLCB0aGVuKSB7XG4gICByZXR1cm4gdGhpcy5fY2F0RmlsZSgndXRmLTgnLCBhcmd1bWVudHMpO1xufTtcblxuR2l0LnByb3RvdHlwZS5iaW5hcnlDYXRGaWxlID0gZnVuY3Rpb24gKCkge1xuICAgcmV0dXJuIHRoaXMuX2NhdEZpbGUoJ2J1ZmZlcicsIGFyZ3VtZW50cyk7XG59O1xuXG5HaXQucHJvdG90eXBlLl9jYXRGaWxlID0gZnVuY3Rpb24gKGZvcm1hdCwgYXJncykge1xuICAgdmFyIGhhbmRsZXIgPSB0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQoYXJncyk7XG4gICB2YXIgY29tbWFuZCA9IFsnY2F0LWZpbGUnXTtcbiAgIHZhciBvcHRpb25zID0gYXJnc1swXTtcblxuICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICAgICBjb25maWd1cmF0aW9uRXJyb3JUYXNrKCdHaXQuY2F0RmlsZTogb3B0aW9ucyBtdXN0IGJlIHN1cHBsaWVkIGFzIGFuIGFycmF5IG9mIHN0cmluZ3MnKSxcbiAgICAgICAgIGhhbmRsZXJcbiAgICAgICk7XG4gICB9XG5cbiAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgICBjb21tYW5kLnB1c2guYXBwbHkoY29tbWFuZCwgb3B0aW9ucyk7XG4gICB9XG5cbiAgIGNvbnN0IHRhc2sgPVxuICAgICAgZm9ybWF0ID09PSAnYnVmZmVyJyA/IHN0cmFpZ2h0VGhyb3VnaEJ1ZmZlclRhc2soY29tbWFuZCkgOiBzdHJhaWdodFRocm91Z2hTdHJpbmdUYXNrKGNvbW1hbmQpO1xuXG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayh0YXNrLCBoYW5kbGVyKTtcbn07XG5cbkdpdC5wcm90b3R5cGUuZGlmZiA9IGZ1bmN0aW9uIChvcHRpb25zLCB0aGVuKSB7XG4gICBjb25zdCB0YXNrID0gZmlsdGVyU3RyaW5nKG9wdGlvbnMpXG4gICAgICA/IGNvbmZpZ3VyYXRpb25FcnJvclRhc2soXG4gICAgICAgICAgICdnaXQuZGlmZjogc3VwcGx5aW5nIG9wdGlvbnMgYXMgYSBzaW5nbGUgc3RyaW5nIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQsIHN3aXRjaCB0byBhbiBhcnJheSBvZiBzdHJpbmdzJ1xuICAgICAgICApXG4gICAgICA6IHN0cmFpZ2h0VGhyb3VnaFN0cmluZ1Rhc2soWydkaWZmJywgLi4uZ2V0VHJhaWxpbmdPcHRpb25zKGFyZ3VtZW50cyldKTtcblxuICAgcmV0dXJuIHRoaXMuX3J1blRhc2sodGFzaywgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cykpO1xufTtcblxuR2l0LnByb3RvdHlwZS5kaWZmU3VtbWFyeSA9IGZ1bmN0aW9uICgpIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgZGlmZlN1bW1hcnlUYXNrKGdldFRyYWlsaW5nT3B0aW9ucyhhcmd1bWVudHMsIDEpKSxcbiAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICApO1xufTtcblxuR2l0LnByb3RvdHlwZS5hcHBseVBhdGNoID0gZnVuY3Rpb24gKHBhdGNoZXMpIHtcbiAgIGNvbnN0IHRhc2sgPSAhZmlsdGVyU3RyaW5nT3JTdHJpbmdBcnJheShwYXRjaGVzKVxuICAgICAgPyBjb25maWd1cmF0aW9uRXJyb3JUYXNrKFxuICAgICAgICAgICBgZ2l0LmFwcGx5UGF0Y2ggcmVxdWlyZXMgb25lIG9yIG1vcmUgc3RyaW5nIHBhdGNoZXMgYXMgdGhlIGZpcnN0IGFyZ3VtZW50YFxuICAgICAgICApXG4gICAgICA6IGFwcGx5UGF0Y2hUYXNrKGFzQXJyYXkocGF0Y2hlcyksIGdldFRyYWlsaW5nT3B0aW9ucyhbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpKTtcblxuICAgcmV0dXJuIHRoaXMuX3J1blRhc2sodGFzaywgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cykpO1xufTtcblxuR2l0LnByb3RvdHlwZS5yZXZwYXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgIGNvbnN0IGNvbW1hbmRzID0gWydyZXYtcGFyc2UnLCAuLi5nZXRUcmFpbGluZ09wdGlvbnMoYXJndW1lbnRzLCB0cnVlKV07XG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayhcbiAgICAgIHN0cmFpZ2h0VGhyb3VnaFN0cmluZ1Rhc2soY29tbWFuZHMsIHRydWUpLFxuICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICk7XG59O1xuXG4vKipcbiAqL1xuR2l0LnByb3RvdHlwZS5jbGVhbiA9IGZ1bmN0aW9uIChtb2RlLCBvcHRpb25zLCB0aGVuKSB7XG4gICBjb25zdCB1c2luZ0NsZWFuT3B0aW9uc0FycmF5ID0gaXNDbGVhbk9wdGlvbnNBcnJheShtb2RlKTtcbiAgIGNvbnN0IGNsZWFuTW9kZSA9XG4gICAgICAodXNpbmdDbGVhbk9wdGlvbnNBcnJheSAmJiBtb2RlLmpvaW4oJycpKSB8fCBmaWx0ZXJUeXBlKG1vZGUsIGZpbHRlclN0cmluZykgfHwgJyc7XG4gICBjb25zdCBjdXN0b21BcmdzID0gZ2V0VHJhaWxpbmdPcHRpb25zKFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCB1c2luZ0NsZWFuT3B0aW9uc0FycmF5ID8gMSA6IDApKTtcblxuICAgcmV0dXJuIHRoaXMuX3J1blRhc2soXG4gICAgICBjbGVhbldpdGhPcHRpb25zVGFzayhjbGVhbk1vZGUsIGN1c3RvbUFyZ3MpLFxuICAgICAgdHJhaWxpbmdGdW5jdGlvbkFyZ3VtZW50KGFyZ3VtZW50cylcbiAgICk7XG59O1xuXG5HaXQucHJvdG90eXBlLmV4ZWMgPSBmdW5jdGlvbiAodGhlbikge1xuICAgY29uc3QgdGFzayA9IHtcbiAgICAgIGNvbW1hbmRzOiBbXSxcbiAgICAgIGZvcm1hdDogJ3V0Zi04JyxcbiAgICAgIHBhcnNlcigpIHtcbiAgICAgICAgIGlmICh0eXBlb2YgdGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhlbigpO1xuICAgICAgICAgfVxuICAgICAgfSxcbiAgIH07XG5cbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKHRhc2spO1xufTtcblxuLyoqXG4gKiBDbGVhcnMgdGhlIHF1ZXVlIG9mIHBlbmRpbmcgY29tbWFuZHMgYW5kIHJldHVybnMgdGhlIHdyYXBwZXIgaW5zdGFuY2UgZm9yIGNoYWluaW5nLlxuICpcbiAqIEByZXR1cm5zIHtHaXR9XG4gKi9cbkdpdC5wcm90b3R5cGUuY2xlYXJRdWV1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgIC8vIFRPRE86XG4gICAvLyB0aGlzLl9leGVjdXRvci5jbGVhcigpO1xuICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGEgcGF0aG5hbWUgb3IgcGF0aG5hbWVzIGFyZSBleGNsdWRlZCBieSAuZ2l0aWdub3JlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IHBhdGhuYW1lc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gW3RoZW5dXG4gKi9cbkdpdC5wcm90b3R5cGUuY2hlY2tJZ25vcmUgPSBmdW5jdGlvbiAocGF0aG5hbWVzLCB0aGVuKSB7XG4gICByZXR1cm4gdGhpcy5fcnVuVGFzayhcbiAgICAgIGNoZWNrSWdub3JlVGFzayhhc0FycmF5KGZpbHRlclR5cGUocGF0aG5hbWVzLCBmaWx0ZXJTdHJpbmdPclN0cmluZ0FycmF5LCBbXSkpKSxcbiAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICApO1xufTtcblxuR2l0LnByb3RvdHlwZS5jaGVja0lzUmVwbyA9IGZ1bmN0aW9uIChjaGVja1R5cGUsIHRoZW4pIHtcbiAgIHJldHVybiB0aGlzLl9ydW5UYXNrKFxuICAgICAgY2hlY2tJc1JlcG9UYXNrKGZpbHRlclR5cGUoY2hlY2tUeXBlLCBmaWx0ZXJTdHJpbmcpKSxcbiAgICAgIHRyYWlsaW5nRnVuY3Rpb25Bcmd1bWVudChhcmd1bWVudHMpXG4gICApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBHaXQ7XG4iLCAiaW1wb3J0IHsgcGF0aHNwZWMgfSBmcm9tICcuL2FyZ3MvcGF0aHNwZWMnO1xuaW1wb3J0IHsgR2l0Q29uc3RydWN0RXJyb3IgfSBmcm9tICcuL2Vycm9ycy9naXQtY29uc3RydWN0LWVycm9yJztcbmltcG9ydCB7IEdpdEVycm9yIH0gZnJvbSAnLi9lcnJvcnMvZ2l0LWVycm9yJztcbmltcG9ydCB7IEdpdFBsdWdpbkVycm9yIH0gZnJvbSAnLi9lcnJvcnMvZ2l0LXBsdWdpbi1lcnJvcic7XG5pbXBvcnQgeyBHaXRSZXNwb25zZUVycm9yIH0gZnJvbSAnLi9lcnJvcnMvZ2l0LXJlc3BvbnNlLWVycm9yJztcbmltcG9ydCB7IFRhc2tDb25maWd1cmF0aW9uRXJyb3IgfSBmcm9tICcuL2Vycm9ycy90YXNrLWNvbmZpZ3VyYXRpb24tZXJyb3InO1xuaW1wb3J0IHsgQ2hlY2tSZXBvQWN0aW9ucyB9IGZyb20gJy4vdGFza3MvY2hlY2staXMtcmVwbyc7XG5pbXBvcnQgeyBDbGVhbk9wdGlvbnMgfSBmcm9tICcuL3Rhc2tzL2NsZWFuJztcbmltcG9ydCB7IEdpdENvbmZpZ1Njb3BlIH0gZnJvbSAnLi90YXNrcy9jb25maWcnO1xuaW1wb3J0IHsgRGlmZk5hbWVTdGF0dXMgfSBmcm9tICcuL3Rhc2tzL2RpZmYtbmFtZS1zdGF0dXMnO1xuaW1wb3J0IHsgZ3JlcFF1ZXJ5QnVpbGRlciB9IGZyb20gJy4vdGFza3MvZ3JlcCc7XG5pbXBvcnQgeyBSZXNldE1vZGUgfSBmcm9tICcuL3Rhc2tzL3Jlc2V0JztcblxuZXhwb3J0IHtcbiAgIENoZWNrUmVwb0FjdGlvbnMsXG4gICBDbGVhbk9wdGlvbnMsXG4gICBEaWZmTmFtZVN0YXR1cyxcbiAgIEdpdENvbmZpZ1Njb3BlLFxuICAgR2l0Q29uc3RydWN0RXJyb3IsXG4gICBHaXRFcnJvcixcbiAgIEdpdFBsdWdpbkVycm9yLFxuICAgR2l0UmVzcG9uc2VFcnJvcixcbiAgIFJlc2V0TW9kZSxcbiAgIFRhc2tDb25maWd1cmF0aW9uRXJyb3IsXG4gICBncmVwUXVlcnlCdWlsZGVyLFxuICAgcGF0aHNwZWMsXG59O1xuIiwgImltcG9ydCB7IEdpdEVycm9yIH0gZnJvbSAnLi9naXQtZXJyb3InO1xuaW1wb3J0IHsgU2ltcGxlR2l0T3B0aW9ucyB9IGZyb20gJy4uL3R5cGVzJztcblxuLyoqXG4gKiBUaGUgYEdpdENvbnN0cnVjdEVycm9yYCBpcyB0aHJvd24gd2hlbiBhbiBlcnJvciBvY2N1cnMgaW4gdGhlIGNvbnN0cnVjdG9yXG4gKiBvZiB0aGUgYHNpbXBsZS1naXRgIGluc3RhbmNlIGl0c2VsZi4gTW9zdCBjb21tb25seSBhcyBhIHJlc3VsdCBvZiB1c2luZ1xuICogYSBgYmFzZURpcmAgb3B0aW9uIHRoYXQgcG9pbnRzIHRvIGEgZm9sZGVyIHRoYXQgZWl0aGVyIGRvZXMgbm90IGV4aXN0LFxuICogb3IgY2Fubm90IGJlIHJlYWQgYnkgdGhlIHVzZXIgdGhlIG5vZGUgc2NyaXB0IGlzIHJ1bm5pbmcgYXMuXG4gKlxuICogQ2hlY2sgdGhlIGAubWVzc2FnZWAgcHJvcGVydHkgZm9yIG1vcmUgZGV0YWlsIGluY2x1ZGluZyB0aGUgcHJvcGVydGllc1xuICogcGFzc2VkIHRvIHRoZSBjb25zdHJ1Y3Rvci5cbiAqL1xuZXhwb3J0IGNsYXNzIEdpdENvbnN0cnVjdEVycm9yIGV4dGVuZHMgR2l0RXJyb3Ige1xuICAgY29uc3RydWN0b3IoXG4gICAgICBwdWJsaWMgcmVhZG9ubHkgY29uZmlnOiBTaW1wbGVHaXRPcHRpb25zLFxuICAgICAgbWVzc2FnZTogc3RyaW5nXG4gICApIHtcbiAgICAgIHN1cGVyKHVuZGVmaW5lZCwgbWVzc2FnZSk7XG4gICB9XG59XG4iLCAiaW1wb3J0IHsgU2ltcGxlR2l0T3B0aW9ucywgU2ltcGxlR2l0VGFzayB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IEdpdEVycm9yIH0gZnJvbSAnLi9naXQtZXJyb3InO1xuXG5leHBvcnQgY2xhc3MgR2l0UGx1Z2luRXJyb3IgZXh0ZW5kcyBHaXRFcnJvciB7XG4gICBjb25zdHJ1Y3RvcihcbiAgICAgIHB1YmxpYyB0YXNrPzogU2ltcGxlR2l0VGFzazxhbnk+LFxuICAgICAgcHVibGljIHJlYWRvbmx5IHBsdWdpbj86IGtleW9mIFNpbXBsZUdpdE9wdGlvbnMsXG4gICAgICBtZXNzYWdlPzogc3RyaW5nXG4gICApIHtcbiAgICAgIHN1cGVyKHRhc2ssIG1lc3NhZ2UpO1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIG5ldy50YXJnZXQucHJvdG90eXBlKTtcbiAgIH1cbn1cbiIsICJpbXBvcnQgeyBTaW1wbGVHaXRPcHRpb25zIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgU2ltcGxlR2l0UGx1Z2luIH0gZnJvbSAnLi9zaW1wbGUtZ2l0LXBsdWdpbic7XG5pbXBvcnQgeyBHaXRQbHVnaW5FcnJvciB9IGZyb20gJy4uL2Vycm9ycy9naXQtcGx1Z2luLWVycm9yJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFib3J0UGx1Z2luKHNpZ25hbDogU2ltcGxlR2l0T3B0aW9uc1snYWJvcnQnXSkge1xuICAgaWYgKCFzaWduYWwpIHtcbiAgICAgIHJldHVybjtcbiAgIH1cblxuICAgY29uc3Qgb25TcGF3bkFmdGVyOiBTaW1wbGVHaXRQbHVnaW48J3NwYXduLmFmdGVyJz4gPSB7XG4gICAgICB0eXBlOiAnc3Bhd24uYWZ0ZXInLFxuICAgICAgYWN0aW9uKF9kYXRhLCBjb250ZXh0KSB7XG4gICAgICAgICBmdW5jdGlvbiBraWxsKCkge1xuICAgICAgICAgICAgY29udGV4dC5raWxsKG5ldyBHaXRQbHVnaW5FcnJvcih1bmRlZmluZWQsICdhYm9ydCcsICdBYm9ydCBzaWduYWwgcmVjZWl2ZWQnKSk7XG4gICAgICAgICB9XG5cbiAgICAgICAgIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGtpbGwpO1xuXG4gICAgICAgICBjb250ZXh0LnNwYXduZWQub24oJ2Nsb3NlJywgKCkgPT4gc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywga2lsbCkpO1xuICAgICAgfSxcbiAgIH07XG5cbiAgIGNvbnN0IG9uU3Bhd25CZWZvcmU6IFNpbXBsZUdpdFBsdWdpbjwnc3Bhd24uYmVmb3JlJz4gPSB7XG4gICAgICB0eXBlOiAnc3Bhd24uYmVmb3JlJyxcbiAgICAgIGFjdGlvbihfZGF0YSwgY29udGV4dCkge1xuICAgICAgICAgaWYgKHNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgICAgICBjb250ZXh0LmtpbGwobmV3IEdpdFBsdWdpbkVycm9yKHVuZGVmaW5lZCwgJ2Fib3J0JywgJ0Fib3J0IGFscmVhZHkgc2lnbmFsZWQnKSk7XG4gICAgICAgICB9XG4gICAgICB9LFxuICAgfTtcblxuICAgcmV0dXJuIFtvblNwYXduQmVmb3JlLCBvblNwYXduQWZ0ZXJdO1xufVxuIiwgImltcG9ydCB0eXBlIHsgU2ltcGxlR2l0UGx1Z2luIH0gZnJvbSAnLi9zaW1wbGUtZ2l0LXBsdWdpbic7XG5cbmltcG9ydCB7IEdpdFBsdWdpbkVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2dpdC1wbHVnaW4tZXJyb3InO1xuaW1wb3J0IHR5cGUgeyBTaW1wbGVHaXRQbHVnaW5Db25maWcgfSBmcm9tICcuLi90eXBlcyc7XG5cbmZ1bmN0aW9uIGlzQ29uZmlnU3dpdGNoKGFyZzogc3RyaW5nIHwgdW5rbm93bikge1xuICAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnICYmIGFyZy50cmltKCkudG9Mb3dlckNhc2UoKSA9PT0gJy1jJztcbn1cblxuZnVuY3Rpb24gcHJldmVudFByb3RvY29sT3ZlcnJpZGUoYXJnOiBzdHJpbmcsIG5leHQ6IHN0cmluZykge1xuICAgaWYgKCFpc0NvbmZpZ1N3aXRjaChhcmcpKSB7XG4gICAgICByZXR1cm47XG4gICB9XG5cbiAgIGlmICghL15cXHMqcHJvdG9jb2woLlthLXpdKyk/LmFsbG93Ly50ZXN0KG5leHQpKSB7XG4gICAgICByZXR1cm47XG4gICB9XG5cbiAgIHRocm93IG5ldyBHaXRQbHVnaW5FcnJvcihcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgICd1bnNhZmUnLFxuICAgICAgJ0NvbmZpZ3VyaW5nIHByb3RvY29sLmFsbG93IGlzIG5vdCBwZXJtaXR0ZWQgd2l0aG91dCBlbmFibGluZyBhbGxvd1Vuc2FmZUV4dFByb3RvY29sJ1xuICAgKTtcbn1cblxuZnVuY3Rpb24gcHJldmVudFVwbG9hZFBhY2soYXJnOiBzdHJpbmcsIG1ldGhvZDogc3RyaW5nKSB7XG4gICBpZiAoL15cXHMqLS0odXBsb2FkfHJlY2VpdmUpLXBhY2svLnRlc3QoYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IEdpdFBsdWdpbkVycm9yKFxuICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgJ3Vuc2FmZScsXG4gICAgICAgICBgVXNlIG9mIC0tdXBsb2FkLXBhY2sgb3IgLS1yZWNlaXZlLXBhY2sgaXMgbm90IHBlcm1pdHRlZCB3aXRob3V0IGVuYWJsaW5nIGFsbG93VW5zYWZlUGFja2BcbiAgICAgICk7XG4gICB9XG5cbiAgIGlmIChtZXRob2QgPT09ICdjbG9uZScgJiYgL15cXHMqLXVcXGIvLnRlc3QoYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IEdpdFBsdWdpbkVycm9yKFxuICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgJ3Vuc2FmZScsXG4gICAgICAgICBgVXNlIG9mIGNsb25lIHdpdGggb3B0aW9uIC11IGlzIG5vdCBwZXJtaXR0ZWQgd2l0aG91dCBlbmFibGluZyBhbGxvd1Vuc2FmZVBhY2tgXG4gICAgICApO1xuICAgfVxuXG4gICBpZiAobWV0aG9kID09PSAncHVzaCcgJiYgL15cXHMqLS1leGVjXFxiLy50ZXN0KGFyZykpIHtcbiAgICAgIHRocm93IG5ldyBHaXRQbHVnaW5FcnJvcihcbiAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICd1bnNhZmUnLFxuICAgICAgICAgYFVzZSBvZiBwdXNoIHdpdGggb3B0aW9uIC0tZXhlYyBpcyBub3QgcGVybWl0dGVkIHdpdGhvdXQgZW5hYmxpbmcgYWxsb3dVbnNhZmVQYWNrYFxuICAgICAgKTtcbiAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2NrVW5zYWZlT3BlcmF0aW9uc1BsdWdpbih7XG4gICBhbGxvd1Vuc2FmZVByb3RvY29sT3ZlcnJpZGUgPSBmYWxzZSxcbiAgIGFsbG93VW5zYWZlUGFjayA9IGZhbHNlLFxufTogU2ltcGxlR2l0UGx1Z2luQ29uZmlnWyd1bnNhZmUnXSA9IHt9KTogU2ltcGxlR2l0UGx1Z2luPCdzcGF3bi5hcmdzJz4ge1xuICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdzcGF3bi5hcmdzJyxcbiAgICAgIGFjdGlvbihhcmdzLCBjb250ZXh0KSB7XG4gICAgICAgICBhcmdzLmZvckVhY2goKGN1cnJlbnQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gaW5kZXggPCBhcmdzLmxlbmd0aCA/IGFyZ3NbaW5kZXggKyAxXSA6ICcnO1xuXG4gICAgICAgICAgICBhbGxvd1Vuc2FmZVByb3RvY29sT3ZlcnJpZGUgfHwgcHJldmVudFByb3RvY29sT3ZlcnJpZGUoY3VycmVudCwgbmV4dCk7XG4gICAgICAgICAgICBhbGxvd1Vuc2FmZVBhY2sgfHwgcHJldmVudFVwbG9hZFBhY2soY3VycmVudCwgY29udGV4dC5tZXRob2QpO1xuICAgICAgICAgfSk7XG5cbiAgICAgICAgIHJldHVybiBhcmdzO1xuICAgICAgfSxcbiAgIH07XG59XG4iLCAiaW1wb3J0IHsgcHJlZml4ZWRBcnJheSB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IFNpbXBsZUdpdFBsdWdpbiB9IGZyb20gJy4vc2ltcGxlLWdpdC1wbHVnaW4nO1xuXG5leHBvcnQgZnVuY3Rpb24gY29tbWFuZENvbmZpZ1ByZWZpeGluZ1BsdWdpbihcbiAgIGNvbmZpZ3VyYXRpb246IHN0cmluZ1tdXG4pOiBTaW1wbGVHaXRQbHVnaW48J3NwYXduLmFyZ3MnPiB7XG4gICBjb25zdCBwcmVmaXggPSBwcmVmaXhlZEFycmF5KGNvbmZpZ3VyYXRpb24sICctYycpO1xuXG4gICByZXR1cm4ge1xuICAgICAgdHlwZTogJ3NwYXduLmFyZ3MnLFxuICAgICAgYWN0aW9uKGRhdGEpIHtcbiAgICAgICAgIHJldHVybiBbLi4ucHJlZml4LCAuLi5kYXRhXTtcbiAgICAgIH0sXG4gICB9O1xufVxuIiwgImltcG9ydCB7IGRlZmVycmVkLCBEZWZlcnJlZFByb21pc2UgfSBmcm9tICdAa3dzaXRlcy9wcm9taXNlLWRlZmVycmVkJztcbmltcG9ydCB7IFNpbXBsZUdpdFBsdWdpbkNvbmZpZyB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGRlbGF5IH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgU2ltcGxlR2l0UGx1Z2luIH0gZnJvbSAnLi9zaW1wbGUtZ2l0LXBsdWdpbic7XG5cbmNvbnN0IG5ldmVyID0gZGVmZXJyZWQoKS5wcm9taXNlO1xuXG5leHBvcnQgZnVuY3Rpb24gY29tcGxldGlvbkRldGVjdGlvblBsdWdpbih7XG4gICBvbkNsb3NlID0gdHJ1ZSxcbiAgIG9uRXhpdCA9IDUwLFxufTogU2ltcGxlR2l0UGx1Z2luQ29uZmlnWydjb21wbGV0aW9uJ10gPSB7fSk6IFNpbXBsZUdpdFBsdWdpbjwnc3Bhd24uYWZ0ZXInPiB7XG4gICBmdW5jdGlvbiBjcmVhdGVFdmVudHMoKSB7XG4gICAgICBsZXQgZXhpdENvZGUgPSAtMTtcbiAgICAgIGNvbnN0IGV2ZW50cyA9IHtcbiAgICAgICAgIGNsb3NlOiBkZWZlcnJlZCgpLFxuICAgICAgICAgY2xvc2VUaW1lb3V0OiBkZWZlcnJlZCgpLFxuICAgICAgICAgZXhpdDogZGVmZXJyZWQoKSxcbiAgICAgICAgIGV4aXRUaW1lb3V0OiBkZWZlcnJlZCgpLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gUHJvbWlzZS5yYWNlKFtcbiAgICAgICAgIG9uQ2xvc2UgPT09IGZhbHNlID8gbmV2ZXIgOiBldmVudHMuY2xvc2VUaW1lb3V0LnByb21pc2UsXG4gICAgICAgICBvbkV4aXQgPT09IGZhbHNlID8gbmV2ZXIgOiBldmVudHMuZXhpdFRpbWVvdXQucHJvbWlzZSxcbiAgICAgIF0pO1xuXG4gICAgICBjb25maWd1cmVUaW1lb3V0KG9uQ2xvc2UsIGV2ZW50cy5jbG9zZSwgZXZlbnRzLmNsb3NlVGltZW91dCk7XG4gICAgICBjb25maWd1cmVUaW1lb3V0KG9uRXhpdCwgZXZlbnRzLmV4aXQsIGV2ZW50cy5leGl0VGltZW91dCk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgICBjbG9zZShjb2RlOiBudW1iZXIpIHtcbiAgICAgICAgICAgIGV4aXRDb2RlID0gY29kZTtcbiAgICAgICAgICAgIGV2ZW50cy5jbG9zZS5kb25lKCk7XG4gICAgICAgICB9LFxuICAgICAgICAgZXhpdChjb2RlOiBudW1iZXIpIHtcbiAgICAgICAgICAgIGV4aXRDb2RlID0gY29kZTtcbiAgICAgICAgICAgIGV2ZW50cy5leGl0LmRvbmUoKTtcbiAgICAgICAgIH0sXG4gICAgICAgICBnZXQgZXhpdENvZGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhpdENvZGU7XG4gICAgICAgICB9LFxuICAgICAgICAgcmVzdWx0LFxuICAgICAgfTtcbiAgIH1cblxuICAgZnVuY3Rpb24gY29uZmlndXJlVGltZW91dChcbiAgICAgIGZsYWc6IGJvb2xlYW4gfCBudW1iZXIsXG4gICAgICBldmVudDogRGVmZXJyZWRQcm9taXNlPHZvaWQ+LFxuICAgICAgdGltZW91dDogRGVmZXJyZWRQcm9taXNlPHZvaWQ+XG4gICApIHtcbiAgICAgIGlmIChmbGFnID09PSBmYWxzZSkge1xuICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAoZmxhZyA9PT0gdHJ1ZSA/IGV2ZW50LnByb21pc2UgOiBldmVudC5wcm9taXNlLnRoZW4oKCkgPT4gZGVsYXkoZmxhZykpKS50aGVuKHRpbWVvdXQuZG9uZSk7XG4gICB9XG5cbiAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnc3Bhd24uYWZ0ZXInLFxuICAgICAgYXN5bmMgYWN0aW9uKF9kYXRhLCB7IHNwYXduZWQsIGNsb3NlIH0pIHtcbiAgICAgICAgIGNvbnN0IGV2ZW50cyA9IGNyZWF0ZUV2ZW50cygpO1xuXG4gICAgICAgICBsZXQgZGVmZXJDbG9zZSA9IHRydWU7XG4gICAgICAgICBsZXQgcXVpY2tDbG9zZSA9ICgpID0+IHZvaWQgKGRlZmVyQ2xvc2UgPSBmYWxzZSk7XG5cbiAgICAgICAgIHNwYXduZWQuc3Rkb3V0Py5vbignZGF0YScsIHF1aWNrQ2xvc2UpO1xuICAgICAgICAgc3Bhd25lZC5zdGRlcnI/Lm9uKCdkYXRhJywgcXVpY2tDbG9zZSk7XG4gICAgICAgICBzcGF3bmVkLm9uKCdlcnJvcicsIHF1aWNrQ2xvc2UpO1xuXG4gICAgICAgICBzcGF3bmVkLm9uKCdjbG9zZScsIChjb2RlOiBudW1iZXIpID0+IGV2ZW50cy5jbG9zZShjb2RlKSk7XG4gICAgICAgICBzcGF3bmVkLm9uKCdleGl0JywgKGNvZGU6IG51bWJlcikgPT4gZXZlbnRzLmV4aXQoY29kZSkpO1xuXG4gICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgZXZlbnRzLnJlc3VsdDtcbiAgICAgICAgICAgIGlmIChkZWZlckNsb3NlKSB7XG4gICAgICAgICAgICAgICBhd2FpdCBkZWxheSg1MCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjbG9zZShldmVudHMuZXhpdENvZGUpO1xuICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjbG9zZShldmVudHMuZXhpdENvZGUsIGVyciBhcyBFcnJvcik7XG4gICAgICAgICB9XG4gICAgICB9LFxuICAgfTtcbn1cbiIsICJpbXBvcnQgdHlwZSB7IFNpbXBsZUdpdE9wdGlvbnMgfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB7IEdpdFBsdWdpbkVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2dpdC1wbHVnaW4tZXJyb3InO1xuaW1wb3J0IHsgYXNBcnJheSB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IFBsdWdpblN0b3JlIH0gZnJvbSAnLi9wbHVnaW4tc3RvcmUnO1xuXG5jb25zdCBXUk9OR19OVU1CRVJfRVJSID0gYEludmFsaWQgdmFsdWUgc3VwcGxpZWQgZm9yIGN1c3RvbSBiaW5hcnksIHJlcXVpcmVzIGEgc2luZ2xlIHN0cmluZyBvciBhbiBhcnJheSBjb250YWluaW5nIGVpdGhlciBvbmUgb3IgdHdvIHN0cmluZ3NgO1xuY29uc3QgV1JPTkdfQ0hBUlNfRVJSID0gYEludmFsaWQgdmFsdWUgc3VwcGxpZWQgZm9yIGN1c3RvbSBiaW5hcnksIHJlc3RyaWN0ZWQgY2hhcmFjdGVycyBtdXN0IGJlIHJlbW92ZWQgb3Igc3VwcGx5IHRoZSB1bnNhZmUuYWxsb3dVbnNhZmVDdXN0b21CaW5hcnkgb3B0aW9uYDtcblxuZnVuY3Rpb24gaXNCYWRBcmd1bWVudChhcmc6IHN0cmluZykge1xuICAgcmV0dXJuICFhcmcgfHwgIS9eKFthLXpdOik/KFthLXowLTkvLlxcXFxfLV0rKSQvaS50ZXN0KGFyZyk7XG59XG5cbmZ1bmN0aW9uIHRvQmluYXJ5Q29uZmlnKFxuICAgaW5wdXQ6IHN0cmluZ1tdLFxuICAgYWxsb3dVbnNhZmU6IGJvb2xlYW5cbik6IHsgYmluYXJ5OiBzdHJpbmc7IHByZWZpeD86IHN0cmluZyB9IHtcbiAgIGlmIChpbnB1dC5sZW5ndGggPCAxIHx8IGlucHV0Lmxlbmd0aCA+IDIpIHtcbiAgICAgIHRocm93IG5ldyBHaXRQbHVnaW5FcnJvcih1bmRlZmluZWQsICdiaW5hcnknLCBXUk9OR19OVU1CRVJfRVJSKTtcbiAgIH1cblxuICAgY29uc3QgaXNCYWQgPSBpbnB1dC5zb21lKGlzQmFkQXJndW1lbnQpO1xuICAgaWYgKGlzQmFkKSB7XG4gICAgICBpZiAoYWxsb3dVbnNhZmUpIHtcbiAgICAgICAgIGNvbnNvbGUud2FybihXUk9OR19DSEFSU19FUlIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgIHRocm93IG5ldyBHaXRQbHVnaW5FcnJvcih1bmRlZmluZWQsICdiaW5hcnknLCBXUk9OR19DSEFSU19FUlIpO1xuICAgICAgfVxuICAgfVxuXG4gICBjb25zdCBbYmluYXJ5LCBwcmVmaXhdID0gaW5wdXQ7XG4gICByZXR1cm4ge1xuICAgICAgYmluYXJ5LFxuICAgICAgcHJlZml4LFxuICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbUJpbmFyeVBsdWdpbihcbiAgIHBsdWdpbnM6IFBsdWdpblN0b3JlLFxuICAgaW5wdXQ6IFNpbXBsZUdpdE9wdGlvbnNbJ2JpbmFyeSddID0gWydnaXQnXSxcbiAgIGFsbG93VW5zYWZlID0gZmFsc2Vcbikge1xuICAgbGV0IGNvbmZpZyA9IHRvQmluYXJ5Q29uZmlnKGFzQXJyYXkoaW5wdXQpLCBhbGxvd1Vuc2FmZSk7XG5cbiAgIHBsdWdpbnMub24oJ2JpbmFyeScsIChpbnB1dCkgPT4ge1xuICAgICAgY29uZmlnID0gdG9CaW5hcnlDb25maWcoYXNBcnJheShpbnB1dCksIGFsbG93VW5zYWZlKTtcbiAgIH0pO1xuXG4gICBwbHVnaW5zLmFwcGVuZCgnc3Bhd24uYmluYXJ5JywgKCkgPT4ge1xuICAgICAgcmV0dXJuIGNvbmZpZy5iaW5hcnk7XG4gICB9KTtcblxuICAgcGx1Z2lucy5hcHBlbmQoJ3NwYXduLmFyZ3MnLCAoZGF0YSkgPT4ge1xuICAgICAgcmV0dXJuIGNvbmZpZy5wcmVmaXggPyBbY29uZmlnLnByZWZpeCwgLi4uZGF0YV0gOiBkYXRhO1xuICAgfSk7XG59XG4iLCAiaW1wb3J0IHsgR2l0RXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvZ2l0LWVycm9yJztcbmltcG9ydCB7IEdpdEV4ZWN1dG9yUmVzdWx0LCBTaW1wbGVHaXRQbHVnaW5Db25maWcgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBTaW1wbGVHaXRQbHVnaW4gfSBmcm9tICcuL3NpbXBsZS1naXQtcGx1Z2luJztcblxudHlwZSBUYXNrUmVzdWx0ID0gT21pdDxHaXRFeGVjdXRvclJlc3VsdCwgJ3JlamVjdGlvbic+O1xuXG5mdW5jdGlvbiBpc1Rhc2tFcnJvcihyZXN1bHQ6IFRhc2tSZXN1bHQpIHtcbiAgIHJldHVybiAhIShyZXN1bHQuZXhpdENvZGUgJiYgcmVzdWx0LnN0ZEVyci5sZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBnZXRFcnJvck1lc3NhZ2UocmVzdWx0OiBUYXNrUmVzdWx0KSB7XG4gICByZXR1cm4gQnVmZmVyLmNvbmNhdChbLi4ucmVzdWx0LnN0ZE91dCwgLi4ucmVzdWx0LnN0ZEVycl0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXJyb3JEZXRlY3Rpb25IYW5kbGVyKFxuICAgb3ZlcndyaXRlID0gZmFsc2UsXG4gICBpc0Vycm9yID0gaXNUYXNrRXJyb3IsXG4gICBlcnJvck1lc3NhZ2U6IChyZXN1bHQ6IFRhc2tSZXN1bHQpID0+IEJ1ZmZlciB8IEVycm9yID0gZ2V0RXJyb3JNZXNzYWdlXG4pIHtcbiAgIHJldHVybiAoZXJyb3I6IEJ1ZmZlciB8IEVycm9yIHwgdW5kZWZpbmVkLCByZXN1bHQ6IFRhc2tSZXN1bHQpID0+IHtcbiAgICAgIGlmICgoIW92ZXJ3cml0ZSAmJiBlcnJvcikgfHwgIWlzRXJyb3IocmVzdWx0KSkge1xuICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXJyb3JNZXNzYWdlKHJlc3VsdCk7XG4gICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXJyb3JEZXRlY3Rpb25QbHVnaW4oXG4gICBjb25maWc6IFNpbXBsZUdpdFBsdWdpbkNvbmZpZ1snZXJyb3JzJ11cbik6IFNpbXBsZUdpdFBsdWdpbjwndGFzay5lcnJvcic+IHtcbiAgIHJldHVybiB7XG4gICAgICB0eXBlOiAndGFzay5lcnJvcicsXG4gICAgICBhY3Rpb24oZGF0YSwgY29udGV4dCkge1xuICAgICAgICAgY29uc3QgZXJyb3IgPSBjb25maWcoZGF0YS5lcnJvciwge1xuICAgICAgICAgICAgc3RkRXJyOiBjb250ZXh0LnN0ZEVycixcbiAgICAgICAgICAgIHN0ZE91dDogY29udGV4dC5zdGRPdXQsXG4gICAgICAgICAgICBleGl0Q29kZTogY29udGV4dC5leGl0Q29kZSxcbiAgICAgICAgIH0pO1xuXG4gICAgICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGVycm9yKSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3I6IG5ldyBHaXRFcnJvcih1bmRlZmluZWQsIGVycm9yLnRvU3RyaW5nKCd1dGYtOCcpKSB9O1xuICAgICAgICAgfVxuXG4gICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICB9O1xuICAgICAgfSxcbiAgIH07XG59XG4iLCAiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnbm9kZTpldmVudHMnO1xuXG5pbXBvcnQgdHlwZSB7XG4gICBTaW1wbGVHaXRQbHVnaW4sXG4gICBTaW1wbGVHaXRQbHVnaW5UeXBlLFxuICAgU2ltcGxlR2l0UGx1Z2luVHlwZXMsXG59IGZyb20gJy4vc2ltcGxlLWdpdC1wbHVnaW4nO1xuaW1wb3J0IHsgYXBwZW5kLCBhc0FycmF5IH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHR5cGUgeyBTaW1wbGVHaXRQbHVnaW5Db25maWcgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBQbHVnaW5TdG9yZSB7XG4gICBwcml2YXRlIHBsdWdpbnM6IFNldDxTaW1wbGVHaXRQbHVnaW48U2ltcGxlR2l0UGx1Z2luVHlwZT4+ID0gbmV3IFNldCgpO1xuICAgcHJpdmF0ZSBldmVudHMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgIG9uPEsgZXh0ZW5kcyBrZXlvZiBTaW1wbGVHaXRQbHVnaW5Db25maWc+KFxuICAgICAgdHlwZTogSyxcbiAgICAgIGxpc3RlbmVyOiAoZGF0YTogU2ltcGxlR2l0UGx1Z2luQ29uZmlnW0tdKSA9PiB2b2lkXG4gICApIHtcbiAgICAgIHRoaXMuZXZlbnRzLm9uKHR5cGUsIGxpc3RlbmVyKTtcbiAgIH1cblxuICAgcmVjb25maWd1cmU8SyBleHRlbmRzIGtleW9mIFNpbXBsZUdpdFBsdWdpbkNvbmZpZz4odHlwZTogSywgZGF0YTogU2ltcGxlR2l0UGx1Z2luQ29uZmlnW0tdKSB7XG4gICAgICB0aGlzLmV2ZW50cy5lbWl0KHR5cGUsIGRhdGEpO1xuICAgfVxuXG4gICBwdWJsaWMgYXBwZW5kPFQgZXh0ZW5kcyBTaW1wbGVHaXRQbHVnaW5UeXBlPih0eXBlOiBULCBhY3Rpb246IFNpbXBsZUdpdFBsdWdpbjxUPlsnYWN0aW9uJ10pIHtcbiAgICAgIGNvbnN0IHBsdWdpbiA9IGFwcGVuZCh0aGlzLnBsdWdpbnMsIHsgdHlwZSwgYWN0aW9uIH0pO1xuXG4gICAgICByZXR1cm4gKCkgPT4gdGhpcy5wbHVnaW5zLmRlbGV0ZShwbHVnaW4pO1xuICAgfVxuXG4gICBwdWJsaWMgYWRkPFQgZXh0ZW5kcyBTaW1wbGVHaXRQbHVnaW5UeXBlPihcbiAgICAgIHBsdWdpbjogdm9pZCB8IFNpbXBsZUdpdFBsdWdpbjxUPiB8IFNpbXBsZUdpdFBsdWdpbjxUPltdXG4gICApIHtcbiAgICAgIGNvbnN0IHBsdWdpbnM6IFNpbXBsZUdpdFBsdWdpbjxUPltdID0gW107XG5cbiAgICAgIGFzQXJyYXkocGx1Z2luKS5mb3JFYWNoKChwbHVnaW4pID0+IHBsdWdpbiAmJiB0aGlzLnBsdWdpbnMuYWRkKGFwcGVuZChwbHVnaW5zLCBwbHVnaW4pKSk7XG5cbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICBwbHVnaW5zLmZvckVhY2goKHBsdWdpbikgPT4gdGhpcy5wbHVnaW5zLmRlbGV0ZShwbHVnaW4pKTtcbiAgICAgIH07XG4gICB9XG5cbiAgIHB1YmxpYyBleGVjPFQgZXh0ZW5kcyBTaW1wbGVHaXRQbHVnaW5UeXBlPihcbiAgICAgIHR5cGU6IFQsXG4gICAgICBkYXRhOiBTaW1wbGVHaXRQbHVnaW5UeXBlc1tUXVsnZGF0YSddLFxuICAgICAgY29udGV4dDogU2ltcGxlR2l0UGx1Z2luVHlwZXNbVF1bJ2NvbnRleHQnXVxuICAgKTogdHlwZW9mIGRhdGEge1xuICAgICAgbGV0IG91dHB1dCA9IGRhdGE7XG4gICAgICBjb25zdCBjb250ZXh0dWFsID0gT2JqZWN0LmZyZWV6ZShPYmplY3QuY3JlYXRlKGNvbnRleHQpKTtcblxuICAgICAgZm9yIChjb25zdCBwbHVnaW4gb2YgdGhpcy5wbHVnaW5zKSB7XG4gICAgICAgICBpZiAocGx1Z2luLnR5cGUgPT09IHR5cGUpIHtcbiAgICAgICAgICAgIG91dHB1dCA9IHBsdWdpbi5hY3Rpb24ob3V0cHV0LCBjb250ZXh0dWFsKTtcbiAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgIH1cbn1cbiIsICJpbXBvcnQgeyBTaW1wbGVHaXRPcHRpb25zIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgYXNOdW1iZXIsIGluY2x1ZGluZyB9IGZyb20gJy4uL3V0aWxzJztcblxuaW1wb3J0IHsgU2ltcGxlR2l0UGx1Z2luIH0gZnJvbSAnLi9zaW1wbGUtZ2l0LXBsdWdpbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9ncmVzc01vbml0b3JQbHVnaW4ocHJvZ3Jlc3M6IEV4Y2x1ZGU8U2ltcGxlR2l0T3B0aW9uc1sncHJvZ3Jlc3MnXSwgdm9pZD4pIHtcbiAgIGNvbnN0IHByb2dyZXNzQ29tbWFuZCA9ICctLXByb2dyZXNzJztcbiAgIGNvbnN0IHByb2dyZXNzTWV0aG9kcyA9IFsnY2hlY2tvdXQnLCAnY2xvbmUnLCAnZmV0Y2gnLCAncHVsbCcsICdwdXNoJ107XG5cbiAgIGNvbnN0IG9uUHJvZ3Jlc3M6IFNpbXBsZUdpdFBsdWdpbjwnc3Bhd24uYWZ0ZXInPiA9IHtcbiAgICAgIHR5cGU6ICdzcGF3bi5hZnRlcicsXG4gICAgICBhY3Rpb24oX2RhdGEsIGNvbnRleHQpIHtcbiAgICAgICAgIGlmICghY29udGV4dC5jb21tYW5kcy5pbmNsdWRlcyhwcm9ncmVzc0NvbW1hbmQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICB9XG5cbiAgICAgICAgIGNvbnRleHQuc3Bhd25lZC5zdGRlcnI/Lm9uKCdkYXRhJywgKGNodW5rOiBCdWZmZXIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSAvXihbXFxzXFxTXSs/KTpcXHMqKFxcZCspJSBcXCgoXFxkKylcXC8oXFxkKylcXCkvLmV4ZWMoY2h1bmsudG9TdHJpbmcoJ3V0ZjgnKSk7XG4gICAgICAgICAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcHJvZ3Jlc3Moe1xuICAgICAgICAgICAgICAgbWV0aG9kOiBjb250ZXh0Lm1ldGhvZCxcbiAgICAgICAgICAgICAgIHN0YWdlOiBwcm9ncmVzc0V2ZW50U3RhZ2UobWVzc2FnZVsxXSksXG4gICAgICAgICAgICAgICBwcm9ncmVzczogYXNOdW1iZXIobWVzc2FnZVsyXSksXG4gICAgICAgICAgICAgICBwcm9jZXNzZWQ6IGFzTnVtYmVyKG1lc3NhZ2VbM10pLFxuICAgICAgICAgICAgICAgdG90YWw6IGFzTnVtYmVyKG1lc3NhZ2VbNF0pLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICB9KTtcbiAgICAgIH0sXG4gICB9O1xuXG4gICBjb25zdCBvbkFyZ3M6IFNpbXBsZUdpdFBsdWdpbjwnc3Bhd24uYXJncyc+ID0ge1xuICAgICAgdHlwZTogJ3NwYXduLmFyZ3MnLFxuICAgICAgYWN0aW9uKGFyZ3MsIGNvbnRleHQpIHtcbiAgICAgICAgIGlmICghcHJvZ3Jlc3NNZXRob2RzLmluY2x1ZGVzKGNvbnRleHQubWV0aG9kKSkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgICAgICB9XG5cbiAgICAgICAgIHJldHVybiBpbmNsdWRpbmcoYXJncywgcHJvZ3Jlc3NDb21tYW5kKTtcbiAgICAgIH0sXG4gICB9O1xuXG4gICByZXR1cm4gW29uQXJncywgb25Qcm9ncmVzc107XG59XG5cbmZ1bmN0aW9uIHByb2dyZXNzRXZlbnRTdGFnZShpbnB1dDogc3RyaW5nKSB7XG4gICByZXR1cm4gU3RyaW5nKGlucHV0LnRvTG93ZXJDYXNlKCkuc3BsaXQoJyAnLCAxKSkgfHwgJ3Vua25vd24nO1xufVxuIiwgImltcG9ydCB7IFNwYXduT3B0aW9ucyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHsgcGljayB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IFNpbXBsZUdpdFBsdWdpbiB9IGZyb20gJy4vc2ltcGxlLWdpdC1wbHVnaW4nO1xuXG5leHBvcnQgZnVuY3Rpb24gc3Bhd25PcHRpb25zUGx1Z2luKFxuICAgc3Bhd25PcHRpb25zOiBQYXJ0aWFsPFNwYXduT3B0aW9ucz5cbik6IFNpbXBsZUdpdFBsdWdpbjwnc3Bhd24ub3B0aW9ucyc+IHtcbiAgIGNvbnN0IG9wdGlvbnMgPSBwaWNrKHNwYXduT3B0aW9ucywgWyd1aWQnLCAnZ2lkJ10pO1xuXG4gICByZXR1cm4ge1xuICAgICAgdHlwZTogJ3NwYXduLm9wdGlvbnMnLFxuICAgICAgYWN0aW9uKGRhdGEpIHtcbiAgICAgICAgIHJldHVybiB7IC4uLm9wdGlvbnMsIC4uLmRhdGEgfTtcbiAgICAgIH0sXG4gICB9O1xufVxuIiwgImltcG9ydCB0eXBlIHsgU2ltcGxlR2l0UGx1Z2luIH0gZnJvbSAnLi9zaW1wbGUtZ2l0LXBsdWdpbic7XG5cbmltcG9ydCB0eXBlIHsgU2ltcGxlR2l0T3B0aW9ucyB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IEdpdFBsdWdpbkVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2dpdC1wbHVnaW4tZXJyb3InO1xuXG5leHBvcnQgZnVuY3Rpb24gdGltZW91dFBsdWdpbih7XG4gICBibG9jayxcbiAgIHN0ZEVyciA9IHRydWUsXG4gICBzdGRPdXQgPSB0cnVlLFxufTogRXhjbHVkZTxTaW1wbGVHaXRPcHRpb25zWyd0aW1lb3V0J10sIHVuZGVmaW5lZD4pOiBTaW1wbGVHaXRQbHVnaW48J3NwYXduLmFmdGVyJz4gfCB2b2lkIHtcbiAgIGlmIChibG9jayA+IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICB0eXBlOiAnc3Bhd24uYWZ0ZXInLFxuICAgICAgICAgYWN0aW9uKF9kYXRhLCBjb250ZXh0KSB7XG4gICAgICAgICAgICBsZXQgdGltZW91dDogTm9kZUpTLlRpbWVvdXQ7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHdhaXQoKSB7XG4gICAgICAgICAgICAgICB0aW1lb3V0ICYmIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGtpbGwsIGJsb2NrKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgICAgICAgIGNvbnRleHQuc3Bhd25lZC5zdGRvdXQ/Lm9mZignZGF0YScsIHdhaXQpO1xuICAgICAgICAgICAgICAgY29udGV4dC5zcGF3bmVkLnN0ZGVycj8ub2ZmKCdkYXRhJywgd2FpdCk7XG4gICAgICAgICAgICAgICBjb250ZXh0LnNwYXduZWQub2ZmKCdleGl0Jywgc3RvcCk7XG4gICAgICAgICAgICAgICBjb250ZXh0LnNwYXduZWQub2ZmKCdjbG9zZScsIHN0b3ApO1xuICAgICAgICAgICAgICAgdGltZW91dCAmJiBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGtpbGwoKSB7XG4gICAgICAgICAgICAgICBzdG9wKCk7XG4gICAgICAgICAgICAgICBjb250ZXh0LmtpbGwobmV3IEdpdFBsdWdpbkVycm9yKHVuZGVmaW5lZCwgJ3RpbWVvdXQnLCBgYmxvY2sgdGltZW91dCByZWFjaGVkYCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdGRPdXQgJiYgY29udGV4dC5zcGF3bmVkLnN0ZG91dD8ub24oJ2RhdGEnLCB3YWl0KTtcbiAgICAgICAgICAgIHN0ZEVyciAmJiBjb250ZXh0LnNwYXduZWQuc3RkZXJyPy5vbignZGF0YScsIHdhaXQpO1xuICAgICAgICAgICAgY29udGV4dC5zcGF3bmVkLm9uKCdleGl0Jywgc3RvcCk7XG4gICAgICAgICAgICBjb250ZXh0LnNwYXduZWQub24oJ2Nsb3NlJywgc3RvcCk7XG5cbiAgICAgICAgICAgIHdhaXQoKTtcbiAgICAgICAgIH0sXG4gICAgICB9O1xuICAgfVxufVxuIiwgImltcG9ydCB7IFNpbXBsZUdpdFBsdWdpbiB9IGZyb20gJy4vc2ltcGxlLWdpdC1wbHVnaW4nO1xuaW1wb3J0IHsgaXNQYXRoU3BlYywgdG9QYXRocyB9IGZyb20gJy4uL2FyZ3MvcGF0aHNwZWMnO1xuXG5leHBvcnQgZnVuY3Rpb24gc3VmZml4UGF0aHNQbHVnaW4oKTogU2ltcGxlR2l0UGx1Z2luPCdzcGF3bi5hcmdzJz4ge1xuICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdzcGF3bi5hcmdzJyxcbiAgICAgIGFjdGlvbihkYXRhKSB7XG4gICAgICAgICBjb25zdCBwcmVmaXg6IHN0cmluZ1tdID0gW107XG4gICAgICAgICBsZXQgc3VmZml4OiB1bmRlZmluZWQgfCBzdHJpbmdbXTtcbiAgICAgICAgIGZ1bmN0aW9uIGFwcGVuZChhcmdzOiBzdHJpbmdbXSkge1xuICAgICAgICAgICAgKHN1ZmZpeCA9IHN1ZmZpeCB8fCBbXSkucHVzaCguLi5hcmdzKTtcbiAgICAgICAgIH1cblxuICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJhbSA9IGRhdGFbaV07XG5cbiAgICAgICAgICAgIGlmIChpc1BhdGhTcGVjKHBhcmFtKSkge1xuICAgICAgICAgICAgICAgYXBwZW5kKHRvUGF0aHMocGFyYW0pKTtcbiAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocGFyYW0gPT09ICctLScpIHtcbiAgICAgICAgICAgICAgIGFwcGVuZChcbiAgICAgICAgICAgICAgICAgIGRhdGEuc2xpY2UoaSArIDEpLmZsYXRNYXAoKGl0ZW0pID0+IChpc1BhdGhTcGVjKGl0ZW0pICYmIHRvUGF0aHMoaXRlbSkpIHx8IGl0ZW0pXG4gICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHByZWZpeC5wdXNoKHBhcmFtKTtcbiAgICAgICAgIH1cblxuICAgICAgICAgcmV0dXJuICFzdWZmaXggPyBwcmVmaXggOiBbLi4ucHJlZml4LCAnLS0nLCAuLi5zdWZmaXgubWFwKFN0cmluZyldO1xuICAgICAgfSxcbiAgIH07XG59XG4iLCAiaW1wb3J0IHsgU2ltcGxlR2l0RmFjdG9yeSB9IGZyb20gJy4uLy4uL3R5cGluZ3MnO1xuXG5pbXBvcnQgKiBhcyBhcGkgZnJvbSAnLi9hcGknO1xuaW1wb3J0IHtcbiAgIGFib3J0UGx1Z2luLFxuICAgYmxvY2tVbnNhZmVPcGVyYXRpb25zUGx1Z2luLFxuICAgY29tbWFuZENvbmZpZ1ByZWZpeGluZ1BsdWdpbixcbiAgIGNvbXBsZXRpb25EZXRlY3Rpb25QbHVnaW4sXG4gICBjdXN0b21CaW5hcnlQbHVnaW4sXG4gICBlcnJvckRldGVjdGlvbkhhbmRsZXIsXG4gICBlcnJvckRldGVjdGlvblBsdWdpbixcbiAgIFBsdWdpblN0b3JlLFxuICAgcHJvZ3Jlc3NNb25pdG9yUGx1Z2luLFxuICAgc3Bhd25PcHRpb25zUGx1Z2luLFxuICAgdGltZW91dFBsdWdpbixcbn0gZnJvbSAnLi9wbHVnaW5zJztcbmltcG9ydCB7IHN1ZmZpeFBhdGhzUGx1Z2luIH0gZnJvbSAnLi9wbHVnaW5zL3N1ZmZpeC1wYXRocy5wbHVnaW4nO1xuaW1wb3J0IHsgY3JlYXRlSW5zdGFuY2VDb25maWcsIGZvbGRlckV4aXN0cyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgU2ltcGxlR2l0T3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBHaXQgPSByZXF1aXJlKCcuLi9naXQnKTtcblxuLyoqXG4gKiBBZGRzIHRoZSBuZWNlc3NhcnkgcHJvcGVydGllcyB0byB0aGUgc3VwcGxpZWQgb2JqZWN0IHRvIGVuYWJsZSBpdCBmb3IgdXNlIGFzXG4gKiB0aGUgZGVmYXVsdCBleHBvcnQgb2YgYSBtb2R1bGUuXG4gKlxuICogRWc6IGBtb2R1bGUuZXhwb3J0cyA9IGVzTW9kdWxlRmFjdG9yeSh7IHNvbWV0aGluZyAoKSB7fSB9KWBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVzTW9kdWxlRmFjdG9yeTxUPihkZWZhdWx0RXhwb3J0OiBUKSB7XG4gICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZGVmYXVsdEV4cG9ydCwge1xuICAgICAgX19lc01vZHVsZTogeyB2YWx1ZTogdHJ1ZSB9LFxuICAgICAgZGVmYXVsdDogeyB2YWx1ZTogZGVmYXVsdEV4cG9ydCB9LFxuICAgfSkgYXMgVCAmIHsgX19lc01vZHVsZTogdHJ1ZTsgZGVmYXVsdDogVCB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2l0RXhwb3J0RmFjdG9yeShmYWN0b3J5OiBTaW1wbGVHaXRGYWN0b3J5KSB7XG4gICByZXR1cm4gT2JqZWN0LmFzc2lnbihmYWN0b3J5LmJpbmQobnVsbCksIGFwaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnaXRJbnN0YW5jZUZhY3RvcnkoXG4gICBiYXNlRGlyPzogc3RyaW5nIHwgUGFydGlhbDxTaW1wbGVHaXRPcHRpb25zPixcbiAgIG9wdGlvbnM/OiBQYXJ0aWFsPFNpbXBsZUdpdE9wdGlvbnM+XG4pIHtcbiAgIGNvbnN0IHBsdWdpbnMgPSBuZXcgUGx1Z2luU3RvcmUoKTtcbiAgIGNvbnN0IGNvbmZpZyA9IGNyZWF0ZUluc3RhbmNlQ29uZmlnKFxuICAgICAgKGJhc2VEaXIgJiYgKHR5cGVvZiBiYXNlRGlyID09PSAnc3RyaW5nJyA/IHsgYmFzZURpciB9IDogYmFzZURpcikpIHx8IHt9LFxuICAgICAgb3B0aW9uc1xuICAgKTtcblxuICAgaWYgKCFmb2xkZXJFeGlzdHMoY29uZmlnLmJhc2VEaXIpKSB7XG4gICAgICB0aHJvdyBuZXcgYXBpLkdpdENvbnN0cnVjdEVycm9yKFxuICAgICAgICAgY29uZmlnLFxuICAgICAgICAgYENhbm5vdCB1c2Ugc2ltcGxlLWdpdCBvbiBhIGRpcmVjdG9yeSB0aGF0IGRvZXMgbm90IGV4aXN0YFxuICAgICAgKTtcbiAgIH1cblxuICAgaWYgKEFycmF5LmlzQXJyYXkoY29uZmlnLmNvbmZpZykpIHtcbiAgICAgIHBsdWdpbnMuYWRkKGNvbW1hbmRDb25maWdQcmVmaXhpbmdQbHVnaW4oY29uZmlnLmNvbmZpZykpO1xuICAgfVxuXG4gICBwbHVnaW5zLmFkZChibG9ja1Vuc2FmZU9wZXJhdGlvbnNQbHVnaW4oY29uZmlnLnVuc2FmZSkpO1xuICAgcGx1Z2lucy5hZGQoc3VmZml4UGF0aHNQbHVnaW4oKSk7XG4gICBwbHVnaW5zLmFkZChjb21wbGV0aW9uRGV0ZWN0aW9uUGx1Z2luKGNvbmZpZy5jb21wbGV0aW9uKSk7XG4gICBjb25maWcuYWJvcnQgJiYgcGx1Z2lucy5hZGQoYWJvcnRQbHVnaW4oY29uZmlnLmFib3J0KSk7XG4gICBjb25maWcucHJvZ3Jlc3MgJiYgcGx1Z2lucy5hZGQocHJvZ3Jlc3NNb25pdG9yUGx1Z2luKGNvbmZpZy5wcm9ncmVzcykpO1xuICAgY29uZmlnLnRpbWVvdXQgJiYgcGx1Z2lucy5hZGQodGltZW91dFBsdWdpbihjb25maWcudGltZW91dCkpO1xuICAgY29uZmlnLnNwYXduT3B0aW9ucyAmJiBwbHVnaW5zLmFkZChzcGF3bk9wdGlvbnNQbHVnaW4oY29uZmlnLnNwYXduT3B0aW9ucykpO1xuXG4gICBwbHVnaW5zLmFkZChlcnJvckRldGVjdGlvblBsdWdpbihlcnJvckRldGVjdGlvbkhhbmRsZXIodHJ1ZSkpKTtcbiAgIGNvbmZpZy5lcnJvcnMgJiYgcGx1Z2lucy5hZGQoZXJyb3JEZXRlY3Rpb25QbHVnaW4oY29uZmlnLmVycm9ycykpO1xuXG4gICBjdXN0b21CaW5hcnlQbHVnaW4ocGx1Z2lucywgY29uZmlnLmJpbmFyeSwgY29uZmlnLnVuc2FmZT8uYWxsb3dVbnNhZmVDdXN0b21CaW5hcnkpO1xuXG4gICByZXR1cm4gbmV3IEdpdChjb25maWcsIHBsdWdpbnMpO1xufVxuIiwgImltcG9ydCB7IFNpbXBsZUdpdCwgU2ltcGxlR2l0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuXG5pbXBvcnQgeyBHaXRSZXNwb25zZUVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2dpdC1yZXNwb25zZS1lcnJvcic7XG5pbXBvcnQgeyBnaXRJbnN0YW5jZUZhY3RvcnkgfSBmcm9tICcuLi9naXQtZmFjdG9yeSc7XG5pbXBvcnQgeyBTaW1wbGVHaXRUYXNrQ2FsbGJhY2sgfSBmcm9tICcuLi90eXBlcyc7XG5cbmNvbnN0IGZ1bmN0aW9uTmFtZXNCdWlsZGVyQXBpID0gWydjdXN0b21CaW5hcnknLCAnZW52JywgJ291dHB1dEhhbmRsZXInLCAnc2lsZW50J107XG5cbmNvbnN0IGZ1bmN0aW9uTmFtZXNQcm9taXNlQXBpID0gW1xuICAgJ2FkZCcsXG4gICAnYWRkQW5ub3RhdGVkVGFnJyxcbiAgICdhZGRDb25maWcnLFxuICAgJ2FkZFJlbW90ZScsXG4gICAnYWRkVGFnJyxcbiAgICdhcHBseVBhdGNoJyxcbiAgICdiaW5hcnlDYXRGaWxlJyxcbiAgICdicmFuY2gnLFxuICAgJ2JyYW5jaExvY2FsJyxcbiAgICdjYXRGaWxlJyxcbiAgICdjaGVja0lnbm9yZScsXG4gICAnY2hlY2tJc1JlcG8nLFxuICAgJ2NoZWNrb3V0JyxcbiAgICdjaGVja291dEJyYW5jaCcsXG4gICAnY2hlY2tvdXRMYXRlc3RUYWcnLFxuICAgJ2NoZWNrb3V0TG9jYWxCcmFuY2gnLFxuICAgJ2NsZWFuJyxcbiAgICdjbG9uZScsXG4gICAnY29tbWl0JyxcbiAgICdjd2QnLFxuICAgJ2RlbGV0ZUxvY2FsQnJhbmNoJyxcbiAgICdkZWxldGVMb2NhbEJyYW5jaGVzJyxcbiAgICdkaWZmJyxcbiAgICdkaWZmU3VtbWFyeScsXG4gICAnZXhlYycsXG4gICAnZmV0Y2gnLFxuICAgJ2dldFJlbW90ZXMnLFxuICAgJ2luaXQnLFxuICAgJ2xpc3RDb25maWcnLFxuICAgJ2xpc3RSZW1vdGUnLFxuICAgJ2xvZycsXG4gICAnbWVyZ2UnLFxuICAgJ21lcmdlRnJvbVRvJyxcbiAgICdtaXJyb3InLFxuICAgJ212JyxcbiAgICdwdWxsJyxcbiAgICdwdXNoJyxcbiAgICdwdXNoVGFncycsXG4gICAncmF3JyxcbiAgICdyZWJhc2UnLFxuICAgJ3JlbW90ZScsXG4gICAncmVtb3ZlUmVtb3RlJyxcbiAgICdyZXNldCcsXG4gICAncmV2ZXJ0JyxcbiAgICdyZXZwYXJzZScsXG4gICAncm0nLFxuICAgJ3JtS2VlcExvY2FsJyxcbiAgICdzaG93JyxcbiAgICdzdGFzaCcsXG4gICAnc3Rhc2hMaXN0JyxcbiAgICdzdGF0dXMnLFxuICAgJ3N1Yk1vZHVsZScsXG4gICAnc3VibW9kdWxlQWRkJyxcbiAgICdzdWJtb2R1bGVJbml0JyxcbiAgICdzdWJtb2R1bGVVcGRhdGUnLFxuICAgJ3RhZycsXG4gICAndGFncycsXG4gICAndXBkYXRlU2VydmVySW5mbycsXG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2l0UChcbiAgIC4uLmFyZ3M6IFtdIHwgW3N0cmluZ10gfCBbUGFydGlhbDxTaW1wbGVHaXRPcHRpb25zPl0gfCBbc3RyaW5nLCBQYXJ0aWFsPFNpbXBsZUdpdE9wdGlvbnM+XVxuKTogU2ltcGxlR2l0IHtcbiAgIGxldCBnaXQ6IGFueTtcblxuICAgbGV0IGNoYWluID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbiAgIHRyeSB7XG4gICAgICBnaXQgPSBnaXRJbnN0YW5jZUZhY3RvcnkoLi4uYXJncyk7XG4gICB9IGNhdGNoIChlKSB7XG4gICAgICBjaGFpbiA9IFByb21pc2UucmVqZWN0KGUpO1xuICAgfVxuXG4gICBmdW5jdGlvbiBidWlsZGVyUmV0dXJuKCkge1xuICAgICAgcmV0dXJuIHByb21pc2VBcGk7XG4gICB9XG5cbiAgIGZ1bmN0aW9uIGNoYWluUmV0dXJuKCkge1xuICAgICAgcmV0dXJuIGNoYWluO1xuICAgfVxuXG4gICBjb25zdCBwcm9taXNlQXBpID0gWy4uLmZ1bmN0aW9uTmFtZXNCdWlsZGVyQXBpLCAuLi5mdW5jdGlvbk5hbWVzUHJvbWlzZUFwaV0ucmVkdWNlKFxuICAgICAgKGFwaTogYW55LCBuYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgIGNvbnN0IGlzQXN5bmMgPSBmdW5jdGlvbk5hbWVzUHJvbWlzZUFwaS5pbmNsdWRlcyhuYW1lKTtcblxuICAgICAgICAgY29uc3QgdmFsaWQgPSBpc0FzeW5jID8gYXN5bmNXcmFwcGVyKG5hbWUsIGdpdCkgOiBzeW5jV3JhcHBlcihuYW1lLCBnaXQsIGFwaSk7XG4gICAgICAgICBjb25zdCBhbHRlcm5hdGl2ZSA9IGlzQXN5bmMgPyBjaGFpblJldHVybiA6IGJ1aWxkZXJSZXR1cm47XG5cbiAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcGksIG5hbWUsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlOiBnaXQgPyB2YWxpZCA6IGFsdGVybmF0aXZlLFxuICAgICAgICAgfSk7XG5cbiAgICAgICAgIHJldHVybiBhcGk7XG4gICAgICB9LFxuICAgICAge31cbiAgICk7XG5cbiAgIHJldHVybiBwcm9taXNlQXBpIGFzIFNpbXBsZUdpdDtcblxuICAgZnVuY3Rpb24gYXN5bmNXcmFwcGVyKGZuOiBzdHJpbmcsIGdpdDogYW55KTogKC4uLmFyZ3M6IGFueVtdKSA9PiBQcm9taXNlPGFueT4ge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzOiBhbnlbXSkge1xuICAgICAgICAgaWYgKHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgICAgICdQcm9taXNlIGludGVyZmFjZSByZXF1aXJlcyB0aGF0IGhhbmRsZXJzIGFyZSBub3Qgc3VwcGxpZWQgaW5saW5lLCAnICtcbiAgICAgICAgICAgICAgICAgICd0cmFpbGluZyBmdW5jdGlvbiBub3QgYWxsb3dlZCBpbiBjYWxsIHRvICcgK1xuICAgICAgICAgICAgICAgICAgZm5cbiAgICAgICAgICAgICk7XG4gICAgICAgICB9XG5cbiAgICAgICAgIHJldHVybiBjaGFpbi50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICBjb25zdCBjYWxsYmFjazogU2ltcGxlR2l0VGFza0NhbGxiYWNrID0gKGVycjogRXJyb3IgfCBudWxsLCByZXN1bHQ/OiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QodG9FcnJvcihlcnIpKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgIGFyZ3MucHVzaChjYWxsYmFjayk7XG5cbiAgICAgICAgICAgICAgIGdpdFtmbl0uYXBwbHkoZ2l0LCBhcmdzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgfSk7XG4gICAgICB9O1xuICAgfVxuXG4gICBmdW5jdGlvbiBzeW5jV3JhcHBlcihmbjogc3RyaW5nLCBnaXQ6IGFueSwgYXBpOiBTaW1wbGVHaXQpIHtcbiAgICAgIHJldHVybiAoLi4uYXJnczogYW55W10pID0+IHtcbiAgICAgICAgIGdpdFtmbl0oLi4uYXJncyk7XG5cbiAgICAgICAgIHJldHVybiBhcGk7XG4gICAgICB9O1xuICAgfVxufVxuXG5mdW5jdGlvbiB0b0Vycm9yKGVycm9yOiBFcnJvciB8IHN0cmluZyB8IGFueSk6IEVycm9yIHtcbiAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICByZXR1cm4gZXJyb3I7XG4gICB9XG5cbiAgIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKGVycm9yKTtcbiAgIH1cblxuICAgcmV0dXJuIG5ldyBHaXRSZXNwb25zZUVycm9yKGVycm9yKTtcbn1cbiIsICJpbXBvcnQgeyBnaXRJbnN0YW5jZUZhY3RvcnkgfSBmcm9tICcuL2xpYi9naXQtZmFjdG9yeSc7XG5cbmV4cG9ydCB7IGdpdFAgfSBmcm9tICcuL2xpYi9ydW5uZXJzL3Byb21pc2Utd3JhcHBlZCc7XG5leHBvcnQgKiBmcm9tICcuL2xpYi9hcGknO1xuXG5leHBvcnQgY29uc3Qgc2ltcGxlR2l0ID0gZ2l0SW5zdGFuY2VGYWN0b3J5O1xuXG5leHBvcnQgZGVmYXVsdCBnaXRJbnN0YW5jZUZhY3Rvcnk7XG4iLCAiaW1wb3J0IHsgZXhpc3RzU3luYywgcmVhZEZpbGVTeW5jLCB3cml0ZUZpbGVTeW5jIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgUHJvamVjdEpzb24gfSBmcm9tICcuLic7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBBYnN0cmFjdFByb2plY3QgfSBmcm9tICcuJztcblxuZXhwb3J0IHR5cGUgUGFja2FnZUpzb24gPSBQcm9qZWN0SnNvbjtcblxuZXhwb3J0IGNsYXNzIE5vZGVQcm9qZWN0IGV4dGVuZHMgQWJzdHJhY3RQcm9qZWN0IHtcbiAgYXN5bmMgc2V0UHJvamVjdChuYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5wYWNrYWdlSnNvbkZpbGUudGhlbigocGFja2FnZUpzb25GaWxlKSA9PiB7XG4gICAgICBpZiAoIXBhY2thZ2VKc29uRmlsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBwYWNrYWdlSnNvbiA9IEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKHBhY2thZ2VKc29uRmlsZSwgJ3V0ZjgnKSk7XG4gICAgICBwYWNrYWdlSnNvbi5uYW1lID0gbmFtZTtcbiAgICAgIGRlbGV0ZSBwYWNrYWdlSnNvbi5saWNlbnNlO1xuICAgICAgZGVsZXRlIHBhY2thZ2VKc29uLmRlc2NyaXB0aW9uO1xuICAgICAgd3JpdGVGaWxlU3luYyhwYWNrYWdlSnNvbkZpbGUsIEpTT04uc3RyaW5naWZ5KHBhY2thZ2VKc29uLCBudWxsLCAyKSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldCBwYWNrYWdlSnNvbkZpbGUoKTogUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy53b3JrZGlyXG4gICAgICAudGhlbigod29ya0RpcikgPT4gam9pbih3b3JrRGlyLCAncGFja2FnZS5qc29uJykpXG4gICAgICAudGhlbigocGFja2FnZUpzb25GaWxlKSA9PiB7XG4gICAgICAgIGlmICghZXhpc3RzU3luYyhwYWNrYWdlSnNvbkZpbGUpKSB7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFja2FnZUpzb25GaWxlO1xuICAgICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldCBwYWNrYWdlSnNvbigpOiBQcm9taXNlPFByb2plY3RKc29uIHwgdW5kZWZpbmVkPiB7XG4gICAgcmV0dXJuIHRoaXMucGFja2FnZUpzb25GaWxlLnRoZW4oKHBhY2thZ2VKc29uRmlsZSkgPT4ge1xuICAgICAgaWYgKCFwYWNrYWdlSnNvbkZpbGUpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBhY2thZ2VKc29uID0gSlNPTi5wYXJzZShyZWFkRmlsZVN5bmMocGFja2FnZUpzb25GaWxlLCAndXRmOCcpKSBhcyBQcm9qZWN0SnNvbjtcbiAgICAgICAgcGFja2FnZUpzb24udHlwZSA9ICdub2RlJztcbiAgICAgICAgcmV0dXJuIHBhY2thZ2VKc29uO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZ2V0IHByb2plY3RKc29uKCk6IFByb21pc2U8UHJvamVjdEpzb24gfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5wYWNrYWdlSnNvbjtcbiAgfVxufVxuIiwgImltcG9ydCB7IGV4aXN0c1N5bmMsIHJlYWRGaWxlU3luYyB9IGZyb20gJ2ZzJztcbmltcG9ydCB7IENvbW1hbmRzLCBJU2NhZmZvbGRseUNvbmZpZywgUHJvamVjdEpzb24sIFNjYWZmb2xkbHlDb25maWcgfSBmcm9tICcuLic7XG5pbXBvcnQgeyBHaXRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2NhZmZvbGRseS9jb21tYW5kcy9jZC9naXQnO1xuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RQcm9qZWN0IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBnaXRTZXJ2aWNlPzogR2l0U2VydmljZSwgcHJpdmF0ZSB3b3JrRGlyPzogc3RyaW5nKSB7fVxuXG4gIGdldCB3b3JrZGlyKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgaWYgKHRoaXMuZ2l0U2VydmljZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2l0U2VydmljZS53b3JrRGlyO1xuICAgIH1cbiAgICBpZiAodGhpcy53b3JrRGlyKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMud29ya0Rpcik7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignV29ya2RpciBpcyB1bmtub3duJyk7XG4gIH1cblxuICBhYnN0cmFjdCBzZXRQcm9qZWN0KG5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG5cbiAgYWJzdHJhY3QgZ2V0IHByb2plY3RKc29uKCk6IFByb21pc2U8UHJvamVjdEpzb24gfCB1bmRlZmluZWQ+O1xuXG4gIGdldCBzdGFuZGFsb25lQ29uZmlnRmlsZSgpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiB0aGlzLndvcmtkaXIudGhlbigod29ya0RpcikgPT4ge1xuICAgICAgY29uc3Qgc3RhbmRhbG9uZUNvbmZpZ0ZpbGUgPSBqb2luKHdvcmtEaXIsICdzY2FmZm9sZGx5Lmpzb24nKTtcbiAgICAgIGlmICghZXhpc3RzU3luYyhzdGFuZGFsb25lQ29uZmlnRmlsZSkpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGFuZGFsb25lQ29uZmlnRmlsZTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldCBzdGFuZGFsb25lQ29uZmlnKCk6IFByb21pc2U8UGFydGlhbDxJU2NhZmZvbGRseUNvbmZpZz4gfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdGFuZGFsb25lQ29uZmlnRmlsZS50aGVuKChzdGFuZGFsb25lQ29uZmlnRmlsZSkgPT4ge1xuICAgICAgaWYgKCFzdGFuZGFsb25lQ29uZmlnRmlsZSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzY2FmZm9sZGx5Q29uZmlnOiBQYXJ0aWFsPElTY2FmZm9sZGx5Q29uZmlnPiA9IHt9O1xuXG4gICAgICAvLyBUT0RPOiBTdXBwb3J0IFlBTUxcbiAgICAgIGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKHN0YW5kYWxvbmVDb25maWdGaWxlLCAndXRmLTgnKSk7XG5cbiAgICAgIE9iamVjdC5hc3NpZ24oc2NhZmZvbGRseUNvbmZpZywgcGFyc2VkKTtcblxuICAgICAgcmV0dXJuIHNjYWZmb2xkbHlDb25maWc7XG4gICAgfSk7XG4gIH1cblxuICBnZXQgaW5zdGFsbENvbW1hbmRzKCk6IFByb21pc2U8Q29tbWFuZHMgfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW3RoaXMud29ya0RpciwgdGhpcy5wcm9qZWN0SnNvbl0pLnRoZW4oKFt3b3JrRGlyLCBwcm9qZWN0SnNvbl0pID0+IHtcbiAgICAgIGlmICghcHJvamVjdEpzb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXdvcmtEaXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjb25maWcgPSBuZXcgU2NhZmZvbGRseUNvbmZpZyh3b3JrRGlyLCB3b3JrRGlyLCB7IHByb2plY3RKc29uIH0pO1xuXG4gICAgICByZXR1cm4gY29uZmlnLmluc3RhbGxDb21tYW5kcztcbiAgICB9KTtcbiAgfVxufVxuIiwgIi8qISBzY3VyZS1iYXNlIC0gTUlUIExpY2Vuc2UgKGMpIDIwMjIgUGF1bCBNaWxsZXIgKHBhdWxtaWxsci5jb20pICovXG5cbi8vIFV0aWxpdGllc1xuLyoqXG4gKiBAX19OT19TSURFX0VGRkVDVFNfX1xuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0TnVtYmVyKG46IG51bWJlcikge1xuICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKG4pKSB0aHJvdyBuZXcgRXJyb3IoYFdyb25nIGludGVnZXI6ICR7bn1gKTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgQ29kZXI8RiwgVD4ge1xuICBlbmNvZGUoZnJvbTogRik6IFQ7XG4gIGRlY29kZSh0bzogVCk6IEY7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnl0ZXNDb2RlciBleHRlbmRzIENvZGVyPFVpbnQ4QXJyYXksIHN0cmluZz4ge1xuICBlbmNvZGU6IChkYXRhOiBVaW50OEFycmF5KSA9PiBzdHJpbmc7XG4gIGRlY29kZTogKHN0cjogc3RyaW5nKSA9PiBVaW50OEFycmF5O1xufVxuXG5mdW5jdGlvbiBpc0J5dGVzKGE6IHVua25vd24pOiBhIGlzIFVpbnQ4QXJyYXkge1xuICByZXR1cm4gKFxuICAgIGEgaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8XG4gICAgKGEgIT0gbnVsbCAmJiB0eXBlb2YgYSA9PT0gJ29iamVjdCcgJiYgYS5jb25zdHJ1Y3Rvci5uYW1lID09PSAnVWludDhBcnJheScpXG4gICk7XG59XG5cbi8vIFRPRE86IHNvbWUgcmVjdXNpdmUgdHlwZSBpbmZlcmVuY2Ugc28gaXQgd291bGQgY2hlY2sgY29ycmVjdCBvcmRlciBvZiBpbnB1dC9vdXRwdXQgaW5zaWRlIHJlc3Q/XG4vLyBsaWtlIDxzdHJpbmcsIG51bWJlcj4sIDxudW1iZXIsIGJ5dGVzPiwgPGJ5dGVzLCBmbG9hdD5cbnR5cGUgQ2hhaW4gPSBbQ29kZXI8YW55LCBhbnk+LCAuLi5Db2RlcjxhbnksIGFueT5bXV07XG4vLyBFeHRyYWN0IGluZm8gZnJvbSBDb2RlciB0eXBlXG50eXBlIElucHV0PEY+ID0gRiBleHRlbmRzIENvZGVyPGluZmVyIFQsIGFueT4gPyBUIDogbmV2ZXI7XG50eXBlIE91dHB1dDxGPiA9IEYgZXh0ZW5kcyBDb2RlcjxhbnksIGluZmVyIFQ+ID8gVCA6IG5ldmVyO1xuLy8gR2VuZXJpYyBmdW5jdGlvbiBmb3IgYXJyYXlzXG50eXBlIEZpcnN0PFQ+ID0gVCBleHRlbmRzIFtpbmZlciBVLCAuLi5hbnlbXV0gPyBVIDogbmV2ZXI7XG50eXBlIExhc3Q8VD4gPSBUIGV4dGVuZHMgWy4uLmFueVtdLCBpbmZlciBVXSA/IFUgOiBuZXZlcjtcbnR5cGUgVGFpbDxUPiA9IFQgZXh0ZW5kcyBbYW55LCAuLi5pbmZlciBVXSA/IFUgOiBuZXZlcjtcblxudHlwZSBBc0NoYWluPEMgZXh0ZW5kcyBDaGFpbiwgUmVzdCA9IFRhaWw8Qz4+ID0ge1xuICAvLyBDW0tdID0gQ29kZXI8SW5wdXQ8Q1tLXT4sIElucHV0PFJlc3Rba10+PlxuICBbSyBpbiBrZXlvZiBDXTogQ29kZXI8SW5wdXQ8Q1tLXT4sIElucHV0PEsgZXh0ZW5kcyBrZXlvZiBSZXN0ID8gUmVzdFtLXSA6IGFueT4+O1xufTtcblxuLyoqXG4gKiBAX19OT19TSURFX0VGRkVDVFNfX1xuICovXG5mdW5jdGlvbiBjaGFpbjxUIGV4dGVuZHMgQ2hhaW4gJiBBc0NoYWluPFQ+PiguLi5hcmdzOiBUKTogQ29kZXI8SW5wdXQ8Rmlyc3Q8VD4+LCBPdXRwdXQ8TGFzdDxUPj4+IHtcbiAgY29uc3QgaWQgPSAoYTogYW55KSA9PiBhO1xuICAvLyBXcmFwIGNhbGwgaW4gY2xvc3VyZSBzbyBKSVQgY2FuIGlubGluZSBjYWxsc1xuICBjb25zdCB3cmFwID0gKGE6IGFueSwgYjogYW55KSA9PiAoYzogYW55KSA9PiBhKGIoYykpO1xuICAvLyBDb25zdHJ1Y3QgY2hhaW4gb2YgYXJnc1stMV0uZW5jb2RlKGFyZ3NbLTJdLmVuY29kZShbLi4uXSkpXG4gIGNvbnN0IGVuY29kZSA9IGFyZ3MubWFwKCh4KSA9PiB4LmVuY29kZSkucmVkdWNlUmlnaHQod3JhcCwgaWQpO1xuICAvLyBDb25zdHJ1Y3QgY2hhaW4gb2YgYXJnc1swXS5kZWNvZGUoYXJnc1sxXS5kZWNvZGUoLi4uKSlcbiAgY29uc3QgZGVjb2RlID0gYXJncy5tYXAoKHgpID0+IHguZGVjb2RlKS5yZWR1Y2Uod3JhcCwgaWQpO1xuICByZXR1cm4geyBlbmNvZGUsIGRlY29kZSB9O1xufVxuXG50eXBlIEFscGhhYmV0ID0gc3RyaW5nW10gfCBzdHJpbmc7XG5cbi8qKlxuICogRW5jb2RlcyBpbnRlZ2VyIHJhZGl4IHJlcHJlc2VudGF0aW9uIHRvIGFycmF5IG9mIHN0cmluZ3MgdXNpbmcgYWxwaGFiZXQgYW5kIGJhY2tcbiAqIEBfX05PX1NJREVfRUZGRUNUU19fXG4gKi9cbmZ1bmN0aW9uIGFscGhhYmV0KGFscGhhYmV0OiBBbHBoYWJldCk6IENvZGVyPG51bWJlcltdLCBzdHJpbmdbXT4ge1xuICByZXR1cm4ge1xuICAgIGVuY29kZTogKGRpZ2l0czogbnVtYmVyW10pID0+IHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShkaWdpdHMpIHx8IChkaWdpdHMubGVuZ3RoICYmIHR5cGVvZiBkaWdpdHNbMF0gIT09ICdudW1iZXInKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhbHBoYWJldC5lbmNvZGUgaW5wdXQgc2hvdWxkIGJlIGFuIGFycmF5IG9mIG51bWJlcnMnKTtcbiAgICAgIHJldHVybiBkaWdpdHMubWFwKChpKSA9PiB7XG4gICAgICAgIGFzc2VydE51bWJlcihpKTtcbiAgICAgICAgaWYgKGkgPCAwIHx8IGkgPj0gYWxwaGFiZXQubGVuZ3RoKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRGlnaXQgaW5kZXggb3V0c2lkZSBhbHBoYWJldDogJHtpfSAoYWxwaGFiZXQ6ICR7YWxwaGFiZXQubGVuZ3RofSlgKTtcbiAgICAgICAgcmV0dXJuIGFscGhhYmV0W2ldITtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZGVjb2RlOiAoaW5wdXQ6IHN0cmluZ1tdKSA9PiB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpIHx8IChpbnB1dC5sZW5ndGggJiYgdHlwZW9mIGlucHV0WzBdICE9PSAnc3RyaW5nJykpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYWxwaGFiZXQuZGVjb2RlIGlucHV0IHNob3VsZCBiZSBhcnJheSBvZiBzdHJpbmdzJyk7XG4gICAgICByZXR1cm4gaW5wdXQubWFwKChsZXR0ZXIpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBsZXR0ZXIgIT09ICdzdHJpbmcnKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgYWxwaGFiZXQuZGVjb2RlOiBub3Qgc3RyaW5nIGVsZW1lbnQ9JHtsZXR0ZXJ9YCk7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gYWxwaGFiZXQuaW5kZXhPZihsZXR0ZXIpO1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gbGV0dGVyOiBcIiR7bGV0dGVyfVwiLiBBbGxvd2VkOiAke2FscGhhYmV0fWApO1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufVxuXG4vKipcbiAqIEBfX05PX1NJREVfRUZGRUNUU19fXG4gKi9cbmZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yID0gJycpOiBDb2RlcjxzdHJpbmdbXSwgc3RyaW5nPiB7XG4gIGlmICh0eXBlb2Ygc2VwYXJhdG9yICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKCdqb2luIHNlcGFyYXRvciBzaG91bGQgYmUgc3RyaW5nJyk7XG4gIHJldHVybiB7XG4gICAgZW5jb2RlOiAoZnJvbSkgPT4ge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGZyb20pIHx8IChmcm9tLmxlbmd0aCAmJiB0eXBlb2YgZnJvbVswXSAhPT0gJ3N0cmluZycpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2pvaW4uZW5jb2RlIGlucHV0IHNob3VsZCBiZSBhcnJheSBvZiBzdHJpbmdzJyk7XG4gICAgICBmb3IgKGxldCBpIG9mIGZyb20pXG4gICAgICAgIGlmICh0eXBlb2YgaSAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBFcnJvcihgam9pbi5lbmNvZGU6IG5vbi1zdHJpbmcgaW5wdXQ9JHtpfWApO1xuICAgICAgcmV0dXJuIGZyb20uam9pbihzZXBhcmF0b3IpO1xuICAgIH0sXG4gICAgZGVjb2RlOiAodG8pID0+IHtcbiAgICAgIGlmICh0eXBlb2YgdG8gIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgRXJyb3IoJ2pvaW4uZGVjb2RlIGlucHV0IHNob3VsZCBiZSBzdHJpbmcnKTtcbiAgICAgIHJldHVybiB0by5zcGxpdChzZXBhcmF0b3IpO1xuICAgIH0sXG4gIH07XG59XG5cbi8qKlxuICogUGFkIHN0cmluZ3MgYXJyYXkgc28gaXQgaGFzIGludGVnZXIgbnVtYmVyIG9mIGJpdHNcbiAqIEBfX05PX1NJREVfRUZGRUNUU19fXG4gKi9cbmZ1bmN0aW9uIHBhZGRpbmcoYml0czogbnVtYmVyLCBjaHIgPSAnPScpOiBDb2RlcjxzdHJpbmdbXSwgc3RyaW5nW10+IHtcbiAgYXNzZXJ0TnVtYmVyKGJpdHMpO1xuICBpZiAodHlwZW9mIGNociAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBFcnJvcigncGFkZGluZyBjaHIgc2hvdWxkIGJlIHN0cmluZycpO1xuICByZXR1cm4ge1xuICAgIGVuY29kZShkYXRhOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSB8fCAoZGF0YS5sZW5ndGggJiYgdHlwZW9mIGRhdGFbMF0gIT09ICdzdHJpbmcnKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwYWRkaW5nLmVuY29kZSBpbnB1dCBzaG91bGQgYmUgYXJyYXkgb2Ygc3RyaW5ncycpO1xuICAgICAgZm9yIChsZXQgaSBvZiBkYXRhKVxuICAgICAgICBpZiAodHlwZW9mIGkgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgRXJyb3IoYHBhZGRpbmcuZW5jb2RlOiBub24tc3RyaW5nIGlucHV0PSR7aX1gKTtcbiAgICAgIHdoaWxlICgoZGF0YS5sZW5ndGggKiBiaXRzKSAlIDgpIGRhdGEucHVzaChjaHIpO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQ6IHN0cmluZ1tdKTogc3RyaW5nW10ge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0KSB8fCAoaW5wdXQubGVuZ3RoICYmIHR5cGVvZiBpbnB1dFswXSAhPT0gJ3N0cmluZycpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BhZGRpbmcuZW5jb2RlIGlucHV0IHNob3VsZCBiZSBhcnJheSBvZiBzdHJpbmdzJyk7XG4gICAgICBmb3IgKGxldCBpIG9mIGlucHV0KVxuICAgICAgICBpZiAodHlwZW9mIGkgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgRXJyb3IoYHBhZGRpbmcuZGVjb2RlOiBub24tc3RyaW5nIGlucHV0PSR7aX1gKTtcbiAgICAgIGxldCBlbmQgPSBpbnB1dC5sZW5ndGg7XG4gICAgICBpZiAoKGVuZCAqIGJpdHMpICUgOClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHBhZGRpbmc6IHN0cmluZyBzaG91bGQgaGF2ZSB3aG9sZSBudW1iZXIgb2YgYnl0ZXMnKTtcbiAgICAgIGZvciAoOyBlbmQgPiAwICYmIGlucHV0W2VuZCAtIDFdID09PSBjaHI7IGVuZC0tKSB7XG4gICAgICAgIGlmICghKCgoZW5kIC0gMSkgKiBiaXRzKSAlIDgpKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBwYWRkaW5nOiBzdHJpbmcgaGFzIHRvbyBtdWNoIHBhZGRpbmcnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpbnB1dC5zbGljZSgwLCBlbmQpO1xuICAgIH0sXG4gIH07XG59XG5cbi8qKlxuICogQF9fTk9fU0lERV9FRkZFQ1RTX19cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplPFQ+KGZuOiAodmFsOiBUKSA9PiBUKTogQ29kZXI8VCwgVD4ge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgRXJyb3IoJ25vcm1hbGl6ZSBmbiBzaG91bGQgYmUgZnVuY3Rpb24nKTtcbiAgcmV0dXJuIHsgZW5jb2RlOiAoZnJvbTogVCkgPT4gZnJvbSwgZGVjb2RlOiAodG86IFQpID0+IGZuKHRvKSB9O1xufVxuXG4vKipcbiAqIFNsb3c6IE8obl4yKSB0aW1lIGNvbXBsZXhpdHlcbiAqIEBfX05PX1NJREVfRUZGRUNUU19fXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRSYWRpeChkYXRhOiBudW1iZXJbXSwgZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKSB7XG4gIC8vIGJhc2UgMSBpcyBpbXBvc3NpYmxlXG4gIGlmIChmcm9tIDwgMikgdGhyb3cgbmV3IEVycm9yKGBjb252ZXJ0UmFkaXg6IHdyb25nIGZyb209JHtmcm9tfSwgYmFzZSBjYW5ub3QgYmUgbGVzcyB0aGFuIDJgKTtcbiAgaWYgKHRvIDwgMikgdGhyb3cgbmV3IEVycm9yKGBjb252ZXJ0UmFkaXg6IHdyb25nIHRvPSR7dG99LCBiYXNlIGNhbm5vdCBiZSBsZXNzIHRoYW4gMmApO1xuICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpIHRocm93IG5ldyBFcnJvcignY29udmVydFJhZGl4OiBkYXRhIHNob3VsZCBiZSBhcnJheScpO1xuICBpZiAoIWRhdGEubGVuZ3RoKSByZXR1cm4gW107XG4gIGxldCBwb3MgPSAwO1xuICBjb25zdCByZXMgPSBbXTtcbiAgY29uc3QgZGlnaXRzID0gQXJyYXkuZnJvbShkYXRhKTtcbiAgZGlnaXRzLmZvckVhY2goKGQpID0+IHtcbiAgICBhc3NlcnROdW1iZXIoZCk7XG4gICAgaWYgKGQgPCAwIHx8IGQgPj0gZnJvbSkgdGhyb3cgbmV3IEVycm9yKGBXcm9uZyBpbnRlZ2VyOiAke2R9YCk7XG4gIH0pO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGxldCBjYXJyeSA9IDA7XG4gICAgbGV0IGRvbmUgPSB0cnVlO1xuICAgIGZvciAobGV0IGkgPSBwb3M7IGkgPCBkaWdpdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGRpZ2l0ID0gZGlnaXRzW2ldITtcbiAgICAgIGNvbnN0IGRpZ2l0QmFzZSA9IGZyb20gKiBjYXJyeSArIGRpZ2l0O1xuICAgICAgaWYgKFxuICAgICAgICAhTnVtYmVyLmlzU2FmZUludGVnZXIoZGlnaXRCYXNlKSB8fFxuICAgICAgICAoZnJvbSAqIGNhcnJ5KSAvIGZyb20gIT09IGNhcnJ5IHx8XG4gICAgICAgIGRpZ2l0QmFzZSAtIGRpZ2l0ICE9PSBmcm9tICogY2FycnlcbiAgICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbnZlcnRSYWRpeDogY2Fycnkgb3ZlcmZsb3cnKTtcbiAgICAgIH1cbiAgICAgIGNhcnJ5ID0gZGlnaXRCYXNlICUgdG87XG4gICAgICBjb25zdCByb3VuZGVkID0gTWF0aC5mbG9vcihkaWdpdEJhc2UgLyB0byk7XG4gICAgICBkaWdpdHNbaV0gPSByb3VuZGVkO1xuICAgICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihyb3VuZGVkKSB8fCByb3VuZGVkICogdG8gKyBjYXJyeSAhPT0gZGlnaXRCYXNlKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbnZlcnRSYWRpeDogY2Fycnkgb3ZlcmZsb3cnKTtcbiAgICAgIGlmICghZG9uZSkgY29udGludWU7XG4gICAgICBlbHNlIGlmICghcm91bmRlZCkgcG9zID0gaTtcbiAgICAgIGVsc2UgZG9uZSA9IGZhbHNlO1xuICAgIH1cbiAgICByZXMucHVzaChjYXJyeSk7XG4gICAgaWYgKGRvbmUpIGJyZWFrO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGggLSAxICYmIGRhdGFbaV0gPT09IDA7IGkrKykgcmVzLnB1c2goMCk7XG4gIHJldHVybiByZXMucmV2ZXJzZSgpO1xufVxuXG5jb25zdCBnY2QgPSAvKiBAX19OT19TSURFX0VGRkVDVFNfXyAqLyAoYTogbnVtYmVyLCBiOiBudW1iZXIpOiBudW1iZXIgPT4gKCFiID8gYSA6IGdjZChiLCBhICUgYikpO1xuY29uc3QgcmFkaXgyY2FycnkgPSAvKkBfX05PX1NJREVfRUZGRUNUU19fICovIChmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpID0+XG4gIGZyb20gKyAodG8gLSBnY2QoZnJvbSwgdG8pKTtcbi8qKlxuICogSW1wbGVtZW50ZWQgd2l0aCBudW1iZXJzLCBiZWNhdXNlIEJpZ0ludCBpcyA1eCBzbG93ZXJcbiAqIEBfX05PX1NJREVfRUZGRUNUU19fXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRSYWRpeDIoZGF0YTogbnVtYmVyW10sIGZyb206IG51bWJlciwgdG86IG51bWJlciwgcGFkZGluZzogYm9vbGVhbik6IG51bWJlcltdIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKSB0aHJvdyBuZXcgRXJyb3IoJ2NvbnZlcnRSYWRpeDI6IGRhdGEgc2hvdWxkIGJlIGFycmF5Jyk7XG4gIGlmIChmcm9tIDw9IDAgfHwgZnJvbSA+IDMyKSB0aHJvdyBuZXcgRXJyb3IoYGNvbnZlcnRSYWRpeDI6IHdyb25nIGZyb209JHtmcm9tfWApO1xuICBpZiAodG8gPD0gMCB8fCB0byA+IDMyKSB0aHJvdyBuZXcgRXJyb3IoYGNvbnZlcnRSYWRpeDI6IHdyb25nIHRvPSR7dG99YCk7XG4gIGlmIChyYWRpeDJjYXJyeShmcm9tLCB0bykgPiAzMikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBjb252ZXJ0UmFkaXgyOiBjYXJyeSBvdmVyZmxvdyBmcm9tPSR7ZnJvbX0gdG89JHt0b30gY2FycnlCaXRzPSR7cmFkaXgyY2FycnkoZnJvbSwgdG8pfWBcbiAgICApO1xuICB9XG4gIGxldCBjYXJyeSA9IDA7XG4gIGxldCBwb3MgPSAwOyAvLyBiaXR3aXNlIHBvc2l0aW9uIGluIGN1cnJlbnQgZWxlbWVudFxuICBjb25zdCBtYXNrID0gMiAqKiB0byAtIDE7XG4gIGNvbnN0IHJlczogbnVtYmVyW10gPSBbXTtcbiAgZm9yIChjb25zdCBuIG9mIGRhdGEpIHtcbiAgICBhc3NlcnROdW1iZXIobik7XG4gICAgaWYgKG4gPj0gMiAqKiBmcm9tKSB0aHJvdyBuZXcgRXJyb3IoYGNvbnZlcnRSYWRpeDI6IGludmFsaWQgZGF0YSB3b3JkPSR7bn0gZnJvbT0ke2Zyb219YCk7XG4gICAgY2FycnkgPSAoY2FycnkgPDwgZnJvbSkgfCBuO1xuICAgIGlmIChwb3MgKyBmcm9tID4gMzIpIHRocm93IG5ldyBFcnJvcihgY29udmVydFJhZGl4MjogY2Fycnkgb3ZlcmZsb3cgcG9zPSR7cG9zfSBmcm9tPSR7ZnJvbX1gKTtcbiAgICBwb3MgKz0gZnJvbTtcbiAgICBmb3IgKDsgcG9zID49IHRvOyBwb3MgLT0gdG8pIHJlcy5wdXNoKCgoY2FycnkgPj4gKHBvcyAtIHRvKSkgJiBtYXNrKSA+Pj4gMCk7XG4gICAgY2FycnkgJj0gMiAqKiBwb3MgLSAxOyAvLyBjbGVhbiBjYXJyeSwgb3RoZXJ3aXNlIGl0IHdpbGwgY2F1c2Ugb3ZlcmZsb3dcbiAgfVxuICBjYXJyeSA9IChjYXJyeSA8PCAodG8gLSBwb3MpKSAmIG1hc2s7XG4gIGlmICghcGFkZGluZyAmJiBwb3MgPj0gZnJvbSkgdGhyb3cgbmV3IEVycm9yKCdFeGNlc3MgcGFkZGluZycpO1xuICBpZiAoIXBhZGRpbmcgJiYgY2FycnkpIHRocm93IG5ldyBFcnJvcihgTm9uLXplcm8gcGFkZGluZzogJHtjYXJyeX1gKTtcbiAgaWYgKHBhZGRpbmcgJiYgcG9zID4gMCkgcmVzLnB1c2goY2FycnkgPj4+IDApO1xuICByZXR1cm4gcmVzO1xufVxuXG4vKipcbiAqIEBfX05PX1NJREVfRUZGRUNUU19fXG4gKi9cbmZ1bmN0aW9uIHJhZGl4KG51bTogbnVtYmVyKTogQ29kZXI8VWludDhBcnJheSwgbnVtYmVyW10+IHtcbiAgYXNzZXJ0TnVtYmVyKG51bSk7XG4gIHJldHVybiB7XG4gICAgZW5jb2RlOiAoYnl0ZXM6IFVpbnQ4QXJyYXkpID0+IHtcbiAgICAgIGlmICghaXNCeXRlcyhieXRlcykpIHRocm93IG5ldyBFcnJvcigncmFkaXguZW5jb2RlIGlucHV0IHNob3VsZCBiZSBVaW50OEFycmF5Jyk7XG4gICAgICByZXR1cm4gY29udmVydFJhZGl4KEFycmF5LmZyb20oYnl0ZXMpLCAyICoqIDgsIG51bSk7XG4gICAgfSxcbiAgICBkZWNvZGU6IChkaWdpdHM6IG51bWJlcltdKSA9PiB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGlnaXRzKSB8fCAoZGlnaXRzLmxlbmd0aCAmJiB0eXBlb2YgZGlnaXRzWzBdICE9PSAnbnVtYmVyJykpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncmFkaXguZGVjb2RlIGlucHV0IHNob3VsZCBiZSBhcnJheSBvZiBudW1iZXJzJyk7XG4gICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKGNvbnZlcnRSYWRpeChkaWdpdHMsIG51bSwgMiAqKiA4KSk7XG4gICAgfSxcbiAgfTtcbn1cblxuLyoqXG4gKiBJZiBib3RoIGJhc2VzIGFyZSBwb3dlciBvZiBzYW1lIG51bWJlciAobGlrZSBgMioqOCA8LT4gMioqNjRgKSxcbiAqIHRoZXJlIGlzIGEgbGluZWFyIGFsZ29yaXRobS4gRm9yIG5vdyB3ZSBoYXZlIGltcGxlbWVudGF0aW9uIGZvciBwb3dlci1vZi10d28gYmFzZXMgb25seS5cbiAqIEBfX05PX1NJREVfRUZGRUNUU19fXG4gKi9cbmZ1bmN0aW9uIHJhZGl4MihiaXRzOiBudW1iZXIsIHJldlBhZGRpbmcgPSBmYWxzZSk6IENvZGVyPFVpbnQ4QXJyYXksIG51bWJlcltdPiB7XG4gIGFzc2VydE51bWJlcihiaXRzKTtcbiAgaWYgKGJpdHMgPD0gMCB8fCBiaXRzID4gMzIpIHRocm93IG5ldyBFcnJvcigncmFkaXgyOiBiaXRzIHNob3VsZCBiZSBpbiAoMC4uMzJdJyk7XG4gIGlmIChyYWRpeDJjYXJyeSg4LCBiaXRzKSA+IDMyIHx8IHJhZGl4MmNhcnJ5KGJpdHMsIDgpID4gMzIpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdyYWRpeDI6IGNhcnJ5IG92ZXJmbG93Jyk7XG4gIHJldHVybiB7XG4gICAgZW5jb2RlOiAoYnl0ZXM6IFVpbnQ4QXJyYXkpID0+IHtcbiAgICAgIGlmICghaXNCeXRlcyhieXRlcykpIHRocm93IG5ldyBFcnJvcigncmFkaXgyLmVuY29kZSBpbnB1dCBzaG91bGQgYmUgVWludDhBcnJheScpO1xuICAgICAgcmV0dXJuIGNvbnZlcnRSYWRpeDIoQXJyYXkuZnJvbShieXRlcyksIDgsIGJpdHMsICFyZXZQYWRkaW5nKTtcbiAgICB9LFxuICAgIGRlY29kZTogKGRpZ2l0czogbnVtYmVyW10pID0+IHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShkaWdpdHMpIHx8IChkaWdpdHMubGVuZ3RoICYmIHR5cGVvZiBkaWdpdHNbMF0gIT09ICdudW1iZXInKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyYWRpeDIuZGVjb2RlIGlucHV0IHNob3VsZCBiZSBhcnJheSBvZiBudW1iZXJzJyk7XG4gICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKGNvbnZlcnRSYWRpeDIoZGlnaXRzLCBiaXRzLCA4LCByZXZQYWRkaW5nKSk7XG4gICAgfSxcbiAgfTtcbn1cblxudHlwZSBBcmd1bWVudFR5cGVzPEYgZXh0ZW5kcyBGdW5jdGlvbj4gPSBGIGV4dGVuZHMgKC4uLmFyZ3M6IGluZmVyIEEpID0+IGFueSA/IEEgOiBuZXZlcjtcbi8qKlxuICogQF9fTk9fU0lERV9FRkZFQ1RTX19cbiAqL1xuZnVuY3Rpb24gdW5zYWZlV3JhcHBlcjxUIGV4dGVuZHMgKC4uLmFyZ3M6IGFueSkgPT4gYW55PihmbjogVCkge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgRXJyb3IoJ3Vuc2FmZVdyYXBwZXIgZm4gc2hvdWxkIGJlIGZ1bmN0aW9uJyk7XG4gIHJldHVybiBmdW5jdGlvbiAoLi4uYXJnczogQXJndW1lbnRUeXBlczxUPik6IFJldHVyblR5cGU8VD4gfCB2b2lkIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH07XG59XG5cbi8qKlxuICogQF9fTk9fU0lERV9FRkZFQ1RTX19cbiAqL1xuZnVuY3Rpb24gY2hlY2tzdW0oXG4gIGxlbjogbnVtYmVyLFxuICBmbjogKGRhdGE6IFVpbnQ4QXJyYXkpID0+IFVpbnQ4QXJyYXlcbik6IENvZGVyPFVpbnQ4QXJyYXksIFVpbnQ4QXJyYXk+IHtcbiAgYXNzZXJ0TnVtYmVyKGxlbik7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBFcnJvcignY2hlY2tzdW0gZm4gc2hvdWxkIGJlIGZ1bmN0aW9uJyk7XG4gIHJldHVybiB7XG4gICAgZW5jb2RlKGRhdGE6IFVpbnQ4QXJyYXkpIHtcbiAgICAgIGlmICghaXNCeXRlcyhkYXRhKSkgdGhyb3cgbmV3IEVycm9yKCdjaGVja3N1bS5lbmNvZGU6IGlucHV0IHNob3VsZCBiZSBVaW50OEFycmF5Jyk7XG4gICAgICBjb25zdCBjaGVja3N1bSA9IGZuKGRhdGEpLnNsaWNlKDAsIGxlbik7XG4gICAgICBjb25zdCByZXMgPSBuZXcgVWludDhBcnJheShkYXRhLmxlbmd0aCArIGxlbik7XG4gICAgICByZXMuc2V0KGRhdGEpO1xuICAgICAgcmVzLnNldChjaGVja3N1bSwgZGF0YS5sZW5ndGgpO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9LFxuICAgIGRlY29kZShkYXRhOiBVaW50OEFycmF5KSB7XG4gICAgICBpZiAoIWlzQnl0ZXMoZGF0YSkpIHRocm93IG5ldyBFcnJvcignY2hlY2tzdW0uZGVjb2RlOiBpbnB1dCBzaG91bGQgYmUgVWludDhBcnJheScpO1xuICAgICAgY29uc3QgcGF5bG9hZCA9IGRhdGEuc2xpY2UoMCwgLWxlbik7XG4gICAgICBjb25zdCBuZXdDaGVja3N1bSA9IGZuKHBheWxvYWQpLnNsaWNlKDAsIGxlbik7XG4gICAgICBjb25zdCBvbGRDaGVja3N1bSA9IGRhdGEuc2xpY2UoLWxlbik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgICAgICBpZiAobmV3Q2hlY2tzdW1baV0gIT09IG9sZENoZWNrc3VtW2ldKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY2hlY2tzdW0nKTtcbiAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgIH0sXG4gIH07XG59XG5cbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0IGNvbnN0IHV0aWxzID0ge1xuICBhbHBoYWJldCwgY2hhaW4sIGNoZWNrc3VtLCBjb252ZXJ0UmFkaXgsIGNvbnZlcnRSYWRpeDIsIHJhZGl4LCByYWRpeDIsIGpvaW4sIHBhZGRpbmcsXG59O1xuXG4vLyBSRkMgNDY0OCBha2EgUkZDIDM1NDhcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZXhwb3J0IGNvbnN0IGJhc2UxNjogQnl0ZXNDb2RlciA9IC8qIEBfX1BVUkVfXyAqLyBjaGFpbihcbiAgcmFkaXgyKDQpLFxuICBhbHBoYWJldCgnMDEyMzQ1Njc4OUFCQ0RFRicpLFxuICBqb2luKCcnKVxuKTtcbmV4cG9ydCBjb25zdCBiYXNlMzI6IEJ5dGVzQ29kZXIgPSAvKiBAX19QVVJFX18gKi8gY2hhaW4oXG4gIHJhZGl4Mig1KSxcbiAgYWxwaGFiZXQoJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaMjM0NTY3JyksXG4gIHBhZGRpbmcoNSksXG4gIGpvaW4oJycpXG4pO1xuZXhwb3J0IGNvbnN0IGJhc2UzMm5vcGFkOiBCeXRlc0NvZGVyID0gLyogQF9fUFVSRV9fICovIGNoYWluKFxuICByYWRpeDIoNSksXG4gIGFscGhhYmV0KCdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjIzNDU2NycpLFxuICBqb2luKCcnKVxuKTtcbmV4cG9ydCBjb25zdCBiYXNlMzJoZXg6IEJ5dGVzQ29kZXIgPSAvKiBAX19QVVJFX18gKi8gY2hhaW4oXG4gIHJhZGl4Mig1KSxcbiAgYWxwaGFiZXQoJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWJyksXG4gIHBhZGRpbmcoNSksXG4gIGpvaW4oJycpXG4pO1xuZXhwb3J0IGNvbnN0IGJhc2UzMmhleG5vcGFkOiBCeXRlc0NvZGVyID0gLyogQF9fUFVSRV9fICovIGNoYWluKFxuICByYWRpeDIoNSksXG4gIGFscGhhYmV0KCcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVicpLFxuICBqb2luKCcnKVxuKTtcbmV4cG9ydCBjb25zdCBiYXNlMzJjcm9ja2ZvcmQ6IEJ5dGVzQ29kZXIgPSAvKiBAX19QVVJFX18gKi8gY2hhaW4oXG4gIHJhZGl4Mig1KSxcbiAgYWxwaGFiZXQoJzAxMjM0NTY3ODlBQkNERUZHSEpLTU5QUVJTVFZXWFlaJyksXG4gIGpvaW4oJycpLFxuICBub3JtYWxpemUoKHM6IHN0cmluZykgPT4gcy50b1VwcGVyQ2FzZSgpLnJlcGxhY2UoL08vZywgJzAnKS5yZXBsYWNlKC9bSUxdL2csICcxJykpXG4pO1xuZXhwb3J0IGNvbnN0IGJhc2U2NDogQnl0ZXNDb2RlciA9IC8qIEBfX1BVUkVfXyAqLyBjaGFpbihcbiAgcmFkaXgyKDYpLFxuICBhbHBoYWJldCgnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLycpLFxuICBwYWRkaW5nKDYpLFxuICBqb2luKCcnKVxuKTtcbmV4cG9ydCBjb25zdCBiYXNlNjRub3BhZDogQnl0ZXNDb2RlciA9IC8qIEBfX1BVUkVfXyAqLyBjaGFpbihcbiAgcmFkaXgyKDYpLFxuICBhbHBoYWJldCgnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLycpLFxuICBqb2luKCcnKVxuKTtcbmV4cG9ydCBjb25zdCBiYXNlNjR1cmw6IEJ5dGVzQ29kZXIgPSAvKiBAX19QVVJFX18gKi8gY2hhaW4oXG4gIHJhZGl4Mig2KSxcbiAgYWxwaGFiZXQoJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5LV8nKSxcbiAgcGFkZGluZyg2KSxcbiAgam9pbignJylcbik7XG5leHBvcnQgY29uc3QgYmFzZTY0dXJsbm9wYWQ6IEJ5dGVzQ29kZXIgPSAvKiBAX19QVVJFX18gKi8gY2hhaW4oXG4gIHJhZGl4Mig2KSxcbiAgYWxwaGFiZXQoJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5LV8nKSxcbiAgam9pbignJylcbik7XG5cbi8vIGJhc2U1OCBjb2RlXG4vLyAtLS0tLS0tLS0tLVxuY29uc3QgZ2VuQmFzZTU4ID0gKGFiYzogc3RyaW5nKSA9PiBjaGFpbihyYWRpeCg1OCksIGFscGhhYmV0KGFiYyksIGpvaW4oJycpKTtcblxuZXhwb3J0IGNvbnN0IGJhc2U1ODogQnl0ZXNDb2RlciA9IC8qIEBfX1BVUkVfXyAqLyBnZW5CYXNlNTgoXG4gICcxMjM0NTY3ODlBQkNERUZHSEpLTE1OUFFSU1RVVldYWVphYmNkZWZnaGlqa21ub3BxcnN0dXZ3eHl6J1xuKTtcbmV4cG9ydCBjb25zdCBiYXNlNThmbGlja3I6IEJ5dGVzQ29kZXIgPSAvKiBAX19QVVJFX18gKi8gZ2VuQmFzZTU4KFxuICAnMTIzNDU2Nzg5YWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5ekFCQ0RFRkdISktMTU5QUVJTVFVWV1hZWidcbik7XG5leHBvcnQgY29uc3QgYmFzZTU4eHJwOiBCeXRlc0NvZGVyID0gLyogQF9fUFVSRV9fICovIGdlbkJhc2U1OChcbiAgJ3Jwc2huYWYzOXdCVURORUdISktMTTRQUVJTVDdWV1hZWjJiY2RlQ2c2NWprbThvRnFpMXR1dkF4eXonXG4pO1xuXG4vLyB4bXIgdmVyIGlzIGRvbmUgaW4gOC1ieXRlIGJsb2NrcyAod2hpY2ggZXF1YWxzIDExIGNoYXJzIGluIGRlY29kaW5nKS4gTGFzdCAobm9uLWZ1bGwpIGJsb2NrIHBhZGRlZCB3aXRoICcxJyB0byBzaXplIGluIFhNUl9CTE9DS19MRU4uXG4vLyBCbG9jayBlbmNvZGluZyBzaWduaWZpY2FudGx5IHJlZHVjZXMgcXVhZHJhdGljIGNvbXBsZXhpdHkgb2YgYmFzZTU4LlxuXG4vLyBEYXRhIGxlbiAoaW5kZXgpIC0+IGVuY29kZWQgYmxvY2sgbGVuXG5jb25zdCBYTVJfQkxPQ0tfTEVOID0gWzAsIDIsIDMsIDUsIDYsIDcsIDksIDEwLCAxMV07XG5leHBvcnQgY29uc3QgYmFzZTU4eG1yOiBCeXRlc0NvZGVyID0ge1xuICBlbmNvZGUoZGF0YTogVWludDhBcnJheSkge1xuICAgIGxldCByZXMgPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDgpIHtcbiAgICAgIGNvbnN0IGJsb2NrID0gZGF0YS5zdWJhcnJheShpLCBpICsgOCk7XG4gICAgICByZXMgKz0gYmFzZTU4LmVuY29kZShibG9jaykucGFkU3RhcnQoWE1SX0JMT0NLX0xFTltibG9jay5sZW5ndGhdISwgJzEnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfSxcbiAgZGVjb2RlKHN0cjogc3RyaW5nKSB7XG4gICAgbGV0IHJlczogbnVtYmVyW10gPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkgKz0gMTEpIHtcbiAgICAgIGNvbnN0IHNsaWNlID0gc3RyLnNsaWNlKGksIGkgKyAxMSk7XG4gICAgICBjb25zdCBibG9ja0xlbiA9IFhNUl9CTE9DS19MRU4uaW5kZXhPZihzbGljZS5sZW5ndGgpO1xuICAgICAgY29uc3QgYmxvY2sgPSBiYXNlNTguZGVjb2RlKHNsaWNlKTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYmxvY2subGVuZ3RoIC0gYmxvY2tMZW47IGorKykge1xuICAgICAgICBpZiAoYmxvY2tbal0gIT09IDApIHRocm93IG5ldyBFcnJvcignYmFzZTU4eG1yOiB3cm9uZyBwYWRkaW5nJyk7XG4gICAgICB9XG4gICAgICByZXMgPSByZXMuY29uY2F0KEFycmF5LmZyb20oYmxvY2suc2xpY2UoYmxvY2subGVuZ3RoIC0gYmxvY2tMZW4pKSk7XG4gICAgfVxuICAgIHJldHVybiBVaW50OEFycmF5LmZyb20ocmVzKTtcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVCYXNlNThjaGVjayA9IChzaGEyNTY6IChkYXRhOiBVaW50OEFycmF5KSA9PiBVaW50OEFycmF5KTogQnl0ZXNDb2RlciA9PlxuICBjaGFpbihcbiAgICBjaGVja3N1bSg0LCAoZGF0YSkgPT4gc2hhMjU2KHNoYTI1NihkYXRhKSkpLFxuICAgIGJhc2U1OFxuICApO1xuLy8gbGVnYWN5IGV4cG9ydCwgYmFkIG5hbWVcbmV4cG9ydCBjb25zdCBiYXNlNThjaGVjayA9IGNyZWF0ZUJhc2U1OGNoZWNrO1xuXG4vLyBCZWNoMzIgY29kZVxuLy8gLS0tLS0tLS0tLS1cbmV4cG9ydCBpbnRlcmZhY2UgQmVjaDMyRGVjb2RlZDxQcmVmaXggZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+IHtcbiAgcHJlZml4OiBQcmVmaXg7XG4gIHdvcmRzOiBudW1iZXJbXTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgQmVjaDMyRGVjb2RlZFdpdGhBcnJheTxQcmVmaXggZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+IHtcbiAgcHJlZml4OiBQcmVmaXg7XG4gIHdvcmRzOiBudW1iZXJbXTtcbiAgYnl0ZXM6IFVpbnQ4QXJyYXk7XG59XG5cbmNvbnN0IEJFQ0hfQUxQSEFCRVQ6IENvZGVyPG51bWJlcltdLCBzdHJpbmc+ID0gLyogQF9fUFVSRV9fICovIGNoYWluKFxuICBhbHBoYWJldCgncXB6cnk5eDhnZjJ0dmR3MHMzam41NGtoY2U2bXVhN2wnKSxcbiAgam9pbignJylcbik7XG5cbmNvbnN0IFBPTFlNT0RfR0VORVJBVE9SUyA9IFsweDNiNmE1N2IyLCAweDI2NTA4ZTZkLCAweDFlYTExOWZhLCAweDNkNDIzM2RkLCAweDJhMTQ2MmIzXTtcbi8qKlxuICogQF9fTk9fU0lERV9FRkZFQ1RTX19cbiAqL1xuZnVuY3Rpb24gYmVjaDMyUG9seW1vZChwcmU6IG51bWJlcik6IG51bWJlciB7XG4gIGNvbnN0IGIgPSBwcmUgPj4gMjU7XG4gIGxldCBjaGsgPSAocHJlICYgMHgxZmZmZmZmKSA8PCA1O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IFBPTFlNT0RfR0VORVJBVE9SUy5sZW5ndGg7IGkrKykge1xuICAgIGlmICgoKGIgPj4gaSkgJiAxKSA9PT0gMSkgY2hrIF49IFBPTFlNT0RfR0VORVJBVE9SU1tpXSE7XG4gIH1cbiAgcmV0dXJuIGNoaztcbn1cblxuLyoqXG4gKiBAX19OT19TSURFX0VGRkVDVFNfX1xuICovXG5mdW5jdGlvbiBiZWNoQ2hlY2tzdW0ocHJlZml4OiBzdHJpbmcsIHdvcmRzOiBudW1iZXJbXSwgZW5jb2RpbmdDb25zdCA9IDEpOiBzdHJpbmcge1xuICBjb25zdCBsZW4gPSBwcmVmaXgubGVuZ3RoO1xuICBsZXQgY2hrID0gMTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGNvbnN0IGMgPSBwcmVmaXguY2hhckNvZGVBdChpKTtcbiAgICBpZiAoYyA8IDMzIHx8IGMgPiAxMjYpIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwcmVmaXggKCR7cHJlZml4fSlgKTtcbiAgICBjaGsgPSBiZWNoMzJQb2x5bW9kKGNoaykgXiAoYyA+PiA1KTtcbiAgfVxuICBjaGsgPSBiZWNoMzJQb2x5bW9kKGNoayk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIGNoayA9IGJlY2gzMlBvbHltb2QoY2hrKSBeIChwcmVmaXguY2hhckNvZGVBdChpKSAmIDB4MWYpO1xuICBmb3IgKGxldCB2IG9mIHdvcmRzKSBjaGsgPSBiZWNoMzJQb2x5bW9kKGNoaykgXiB2O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDY7IGkrKykgY2hrID0gYmVjaDMyUG9seW1vZChjaGspO1xuICBjaGsgXj0gZW5jb2RpbmdDb25zdDtcbiAgcmV0dXJuIEJFQ0hfQUxQSEFCRVQuZW5jb2RlKGNvbnZlcnRSYWRpeDIoW2NoayAlIDIgKiogMzBdLCAzMCwgNSwgZmFsc2UpKTtcbn1cblxuLyoqXG4gKiBAX19OT19TSURFX0VGRkVDVFNfX1xuICovXG5mdW5jdGlvbiBnZW5CZWNoMzIoZW5jb2Rpbmc6ICdiZWNoMzInIHwgJ2JlY2gzMm0nKSB7XG4gIGNvbnN0IEVOQ09ESU5HX0NPTlNUID0gZW5jb2RpbmcgPT09ICdiZWNoMzInID8gMSA6IDB4MmJjODMwYTM7XG4gIGNvbnN0IF93b3JkcyA9IHJhZGl4Mig1KTtcbiAgY29uc3QgZnJvbVdvcmRzID0gX3dvcmRzLmRlY29kZTtcbiAgY29uc3QgdG9Xb3JkcyA9IF93b3Jkcy5lbmNvZGU7XG4gIGNvbnN0IGZyb21Xb3Jkc1Vuc2FmZSA9IHVuc2FmZVdyYXBwZXIoZnJvbVdvcmRzKTtcblxuICBmdW5jdGlvbiBlbmNvZGU8UHJlZml4IGV4dGVuZHMgc3RyaW5nPihcbiAgICBwcmVmaXg6IFByZWZpeCxcbiAgICB3b3JkczogbnVtYmVyW10gfCBVaW50OEFycmF5LFxuICAgIGxpbWl0OiBudW1iZXIgfCBmYWxzZSA9IDkwXG4gICk6IGAke0xvd2VyY2FzZTxQcmVmaXg+fTEke3N0cmluZ31gIHtcbiAgICBpZiAodHlwZW9mIHByZWZpeCAhPT0gJ3N0cmluZycpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGJlY2gzMi5lbmNvZGUgcHJlZml4IHNob3VsZCBiZSBzdHJpbmcsIG5vdCAke3R5cGVvZiBwcmVmaXh9YCk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHdvcmRzKSB8fCAod29yZHMubGVuZ3RoICYmIHR5cGVvZiB3b3Jkc1swXSAhPT0gJ251bWJlcicpKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBiZWNoMzIuZW5jb2RlIHdvcmRzIHNob3VsZCBiZSBhcnJheSBvZiBudW1iZXJzLCBub3QgJHt0eXBlb2Ygd29yZHN9YCk7XG4gICAgaWYgKHByZWZpeC5sZW5ndGggPT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgcHJlZml4IGxlbmd0aCAke3ByZWZpeC5sZW5ndGh9YCk7XG4gICAgY29uc3QgYWN0dWFsTGVuZ3RoID0gcHJlZml4Lmxlbmd0aCArIDcgKyB3b3Jkcy5sZW5ndGg7XG4gICAgaWYgKGxpbWl0ICE9PSBmYWxzZSAmJiBhY3R1YWxMZW5ndGggPiBsaW1pdClcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYExlbmd0aCAke2FjdHVhbExlbmd0aH0gZXhjZWVkcyBsaW1pdCAke2xpbWl0fWApO1xuICAgIGNvbnN0IGxvd2VyZWQgPSBwcmVmaXgudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBzdW0gPSBiZWNoQ2hlY2tzdW0obG93ZXJlZCwgd29yZHMsIEVOQ09ESU5HX0NPTlNUKTtcbiAgICByZXR1cm4gYCR7bG93ZXJlZH0xJHtCRUNIX0FMUEhBQkVULmVuY29kZSh3b3Jkcyl9JHtzdW19YCBhcyBgJHtMb3dlcmNhc2U8UHJlZml4Pn0xJHtzdHJpbmd9YDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlY29kZTxQcmVmaXggZXh0ZW5kcyBzdHJpbmc+KFxuICAgIHN0cjogYCR7UHJlZml4fTEke3N0cmluZ31gLFxuICAgIGxpbWl0PzogbnVtYmVyIHwgZmFsc2VcbiAgKTogQmVjaDMyRGVjb2RlZDxQcmVmaXg+O1xuICBmdW5jdGlvbiBkZWNvZGUoc3RyOiBzdHJpbmcsIGxpbWl0PzogbnVtYmVyIHwgZmFsc2UpOiBCZWNoMzJEZWNvZGVkO1xuICBmdW5jdGlvbiBkZWNvZGUoc3RyOiBzdHJpbmcsIGxpbWl0OiBudW1iZXIgfCBmYWxzZSA9IDkwKTogQmVjaDMyRGVjb2RlZCB7XG4gICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBiZWNoMzIuZGVjb2RlIGlucHV0IHNob3VsZCBiZSBzdHJpbmcsIG5vdCAke3R5cGVvZiBzdHJ9YCk7XG4gICAgaWYgKHN0ci5sZW5ndGggPCA4IHx8IChsaW1pdCAhPT0gZmFsc2UgJiYgc3RyLmxlbmd0aCA+IGxpbWl0KSlcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFdyb25nIHN0cmluZyBsZW5ndGg6ICR7c3RyLmxlbmd0aH0gKCR7c3RyfSkuIEV4cGVjdGVkICg4Li4ke2xpbWl0fSlgKTtcbiAgICAvLyBkb24ndCBhbGxvdyBtaXhlZCBjYXNlXG4gICAgY29uc3QgbG93ZXJlZCA9IHN0ci50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChzdHIgIT09IGxvd2VyZWQgJiYgc3RyICE9PSBzdHIudG9VcHBlckNhc2UoKSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU3RyaW5nIG11c3QgYmUgbG93ZXJjYXNlIG9yIHVwcGVyY2FzZWApO1xuICAgIGNvbnN0IHNlcEluZGV4ID0gbG93ZXJlZC5sYXN0SW5kZXhPZignMScpO1xuICAgIGlmIChzZXBJbmRleCA9PT0gMCB8fCBzZXBJbmRleCA9PT0gLTEpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYExldHRlciBcIjFcIiBtdXN0IGJlIHByZXNlbnQgYmV0d2VlbiBwcmVmaXggYW5kIGRhdGEgb25seWApO1xuICAgIGNvbnN0IHByZWZpeCA9IGxvd2VyZWQuc2xpY2UoMCwgc2VwSW5kZXgpO1xuICAgIGNvbnN0IGRhdGEgPSBsb3dlcmVkLnNsaWNlKHNlcEluZGV4ICsgMSk7XG4gICAgaWYgKGRhdGEubGVuZ3RoIDwgNikgdGhyb3cgbmV3IEVycm9yKCdEYXRhIG11c3QgYmUgYXQgbGVhc3QgNiBjaGFyYWN0ZXJzIGxvbmcnKTtcbiAgICBjb25zdCB3b3JkcyA9IEJFQ0hfQUxQSEFCRVQuZGVjb2RlKGRhdGEpLnNsaWNlKDAsIC02KTtcbiAgICBjb25zdCBzdW0gPSBiZWNoQ2hlY2tzdW0ocHJlZml4LCB3b3JkcywgRU5DT0RJTkdfQ09OU1QpO1xuICAgIGlmICghZGF0YS5lbmRzV2l0aChzdW0pKSB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgY2hlY2tzdW0gaW4gJHtzdHJ9OiBleHBlY3RlZCBcIiR7c3VtfVwiYCk7XG4gICAgcmV0dXJuIHsgcHJlZml4LCB3b3JkcyB9O1xuICB9XG5cbiAgY29uc3QgZGVjb2RlVW5zYWZlID0gdW5zYWZlV3JhcHBlcihkZWNvZGUpO1xuXG4gIGZ1bmN0aW9uIGRlY29kZVRvQnl0ZXMoc3RyOiBzdHJpbmcpOiBCZWNoMzJEZWNvZGVkV2l0aEFycmF5IHtcbiAgICBjb25zdCB7IHByZWZpeCwgd29yZHMgfSA9IGRlY29kZShzdHIsIGZhbHNlKTtcbiAgICByZXR1cm4geyBwcmVmaXgsIHdvcmRzLCBieXRlczogZnJvbVdvcmRzKHdvcmRzKSB9O1xuICB9XG5cbiAgcmV0dXJuIHsgZW5jb2RlLCBkZWNvZGUsIGRlY29kZVRvQnl0ZXMsIGRlY29kZVVuc2FmZSwgZnJvbVdvcmRzLCBmcm9tV29yZHNVbnNhZmUsIHRvV29yZHMgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGJlY2gzMiA9IC8qIEBfX1BVUkVfXyAqLyBnZW5CZWNoMzIoJ2JlY2gzMicpO1xuZXhwb3J0IGNvbnN0IGJlY2gzMm0gPSAvKiBAX19QVVJFX18gKi8gZ2VuQmVjaDMyKCdiZWNoMzJtJyk7XG5cbmRlY2xhcmUgY29uc3QgVGV4dEVuY29kZXI6IGFueTtcbmRlY2xhcmUgY29uc3QgVGV4dERlY29kZXI6IGFueTtcblxuZXhwb3J0IGNvbnN0IHV0Zjg6IEJ5dGVzQ29kZXIgPSB7XG4gIGVuY29kZTogKGRhdGEpID0+IG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShkYXRhKSxcbiAgZGVjb2RlOiAoc3RyKSA9PiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyKSxcbn07XG5cbmV4cG9ydCBjb25zdCBoZXg6IEJ5dGVzQ29kZXIgPSAvKiBAX19QVVJFX18gKi8gY2hhaW4oXG4gIHJhZGl4Mig0KSxcbiAgYWxwaGFiZXQoJzAxMjM0NTY3ODlhYmNkZWYnKSxcbiAgam9pbignJyksXG4gIG5vcm1hbGl6ZSgoczogc3RyaW5nKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBzICE9PSAnc3RyaW5nJyB8fCBzLmxlbmd0aCAlIDIpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBoZXguZGVjb2RlOiBleHBlY3RlZCBzdHJpbmcsIGdvdCAke3R5cGVvZiBzfSB3aXRoIGxlbmd0aCAke3MubGVuZ3RofWApO1xuICAgIHJldHVybiBzLnRvTG93ZXJDYXNlKCk7XG4gIH0pXG4pO1xuXG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IENPREVSUyA9IHtcbiAgdXRmOCwgaGV4LCBiYXNlMTYsIGJhc2UzMiwgYmFzZTY0LCBiYXNlNjR1cmwsIGJhc2U1OCwgYmFzZTU4eG1yXG59O1xudHlwZSBDb2RlclR5cGUgPSBrZXlvZiB0eXBlb2YgQ09ERVJTO1xuY29uc3QgY29kZXJUeXBlRXJyb3IgPVxuICAnSW52YWxpZCBlbmNvZGluZyB0eXBlLiBBdmFpbGFibGUgdHlwZXM6IHV0ZjgsIGhleCwgYmFzZTE2LCBiYXNlMzIsIGJhc2U2NCwgYmFzZTY0dXJsLCBiYXNlNTgsIGJhc2U1OHhtcic7XG5cbmV4cG9ydCBjb25zdCBieXRlc1RvU3RyaW5nID0gKHR5cGU6IENvZGVyVHlwZSwgYnl0ZXM6IFVpbnQ4QXJyYXkpOiBzdHJpbmcgPT4ge1xuICBpZiAodHlwZW9mIHR5cGUgIT09ICdzdHJpbmcnIHx8ICFDT0RFUlMuaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBUeXBlRXJyb3IoY29kZXJUeXBlRXJyb3IpO1xuICBpZiAoIWlzQnl0ZXMoYnl0ZXMpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdieXRlc1RvU3RyaW5nKCkgZXhwZWN0cyBVaW50OEFycmF5Jyk7XG4gIHJldHVybiBDT0RFUlNbdHlwZV0uZW5jb2RlKGJ5dGVzKTtcbn07XG5leHBvcnQgY29uc3Qgc3RyID0gYnl0ZXNUb1N0cmluZzsgLy8gYXMgaW4gcHl0aG9uLCBidXQgZm9yIGJ5dGVzIG9ubHlcblxuZXhwb3J0IGNvbnN0IHN0cmluZ1RvQnl0ZXMgPSAodHlwZTogQ29kZXJUeXBlLCBzdHI6IHN0cmluZyk6IFVpbnQ4QXJyYXkgPT4ge1xuICBpZiAoIUNPREVSUy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihjb2RlclR5cGVFcnJvcik7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IFR5cGVFcnJvcignc3RyaW5nVG9CeXRlcygpIGV4cGVjdHMgc3RyaW5nJyk7XG4gIHJldHVybiBDT0RFUlNbdHlwZV0uZGVjb2RlKHN0cik7XG59O1xuZXhwb3J0IGNvbnN0IGJ5dGVzID0gc3RyaW5nVG9CeXRlcztcbiIsICJpbXBvcnQgeyBiYXNlNTggfSBmcm9tICdAc2N1cmUvYmFzZSc7XG5pbXBvcnQgeyBqb2luLCByZWxhdGl2ZSwgc2VwIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgaWdub3JlIGZyb20gJ2lnbm9yZSc7XG5pbXBvcnQgeyBleGlzdHNTeW5jLCByZWFkZGlyU3luYywgcmVhZEZpbGVTeW5jIH0gZnJvbSAnZnMnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9TUkNfUk9PVCA9IGAuYDtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1JPVVRFID0gJy8qJztcblxuLy8gREVWTk9URTogQ291cGxlZCB3aXRoIHdpdGggdGhlIFwic2NhZmZvbGRseS9zY2FmZm9sZGx5OjFcIiBkb2NrZXIgaW1hZ2Vcbi8vIFdlIHVzZSB0aGlzIGZvcjpcbi8vIC0gVmVyc2lvbiBDb25zaXN0ZW5jeVxuLy8gLSBTY29vcGluZyBjb21waWxlZCBiaW5hcmllcyBvdXQgb2YgdGhlIGNvbnRhaW5lciAoc3VjaCBhcyBhd3NsYW1iZGEtZW50cnlwb2ludClcbmV4cG9ydCBjb25zdCBDT05GSUdfU0lHTkFUVVJFID0gYHNjYWZmb2xkbHkvc2NhZmZvbGRseToxYDtcbmV4cG9ydCBjb25zdCBVU0VSX0FHRU5UID0gJ3NjYWZmb2xkbHkvMS54JztcbmV4cG9ydCBjb25zdCBERUZBVUxUX1RBU0tESVIgPSBqb2luKHNlcCwgJ3ZhcicsICd0YXNrJyk7XG5cbmV4cG9ydCBjb25zdCBkZWNvZGUgPSA8VD4oY29uZmlnOiBzdHJpbmcpOiBUID0+IHtcbiAgaWYgKGNvbmZpZy5zdGFydHNXaXRoKGAke0NPTkZJR19TSUdOQVRVUkV9OmApKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoXG4gICAgICBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoYmFzZTU4LmRlY29kZShjb25maWcuc3BsaXQoYCR7Q09ORklHX1NJR05BVFVSRX06YClbMV0pKSxcbiAgICApO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBjb25maWc6ICR7Y29uZmlnfWApO1xufTtcblxuZXhwb3J0IGNvbnN0IGVuY29kZSA9IDxUPihjb25maWc6IFQpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gYCR7Q09ORklHX1NJR05BVFVSRX06JHtiYXNlNTguZW5jb2RlKG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShKU09OLnN0cmluZ2lmeShjb25maWcpKSl9YDtcbn07XG5cbmV4cG9ydCB0eXBlIFNoZWxsID0gJ2RpcmVudic7XG5cbmV4cG9ydCB0eXBlIENvbW1hbmQgPSB7XG4gIGNtZDogc3RyaW5nO1xuICB3b3JrZGlyPzogc3RyaW5nO1xuICBzY2hlZHVsZT86IFNjaGVkdWxlO1xuICBvdXRwdXQ/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY2xhc3MgQ29tbWFuZHMge1xuICBjb21tYW5kczogQ29tbWFuZFtdO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY29tbWFuZHMgPSBbXTtcbiAgfVxuXG4gIGFkZCA9IChjb21tYW5kOiBDb21tYW5kKTogQ29tbWFuZHMgPT4ge1xuICAgIHRoaXMuY29tbWFuZHMucHVzaChjb21tYW5kKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBpc0VtcHR5ID0gKGZpbHRlcj86IHsgc2NoZWR1bGU/OiBTY2hlZHVsZSB9KTogYm9vbGVhbiA9PiB7XG4gICAgY29uc3QgZmlsdGVyZWQgPSBmaWx0ZXJcbiAgICAgID8gdGhpcy5jb21tYW5kcy5maWx0ZXIoKGNvbW1hbmQpID0+IGNvbW1hbmQuc2NoZWR1bGUgPT09IGZpbHRlci5zY2hlZHVsZSlcbiAgICAgIDogdGhpcy5jb21tYW5kcztcblxuICAgIHJldHVybiBmaWx0ZXJlZC5sZW5ndGggPT09IDA7XG4gIH07XG5cbiAgdG9TdHJpbmcgPSAoZmlsdGVyPzogeyBzY2hlZHVsZT86IFNjaGVkdWxlIH0pOiBzdHJpbmcgPT4ge1xuICAgIGNvbnN0IGZpbHRlcmVkID0gZmlsdGVyXG4gICAgICA/IHRoaXMuY29tbWFuZHMuZmlsdGVyKChjb21tYW5kKSA9PiBjb21tYW5kLnNjaGVkdWxlID09PSBmaWx0ZXIuc2NoZWR1bGUpXG4gICAgICA6IHRoaXMuY29tbWFuZHM7XG5cbiAgICByZXR1cm4gZmlsdGVyZWRcbiAgICAgIC5tYXAoKGNvbW1hbmQpID0+IHtcbiAgICAgICAgcmV0dXJuIGNvbW1hbmQud29ya2RpclxuICAgICAgICAgID8gYCggY2QgJHtjb21tYW5kLndvcmtkaXJ9ICYmICR7Y29tbWFuZC5jbWR9IClgXG4gICAgICAgICAgOiBgKCAke2NvbW1hbmQuY21kfSApYDtcbiAgICAgIH0pXG4gICAgICAuam9pbignICYgJyk7XG4gIH07XG5cbiAgZW5jb2RlID0gKCk6IHN0cmluZyA9PiB7XG4gICAgcmV0dXJuIGVuY29kZSh0aGlzLmNvbW1hbmRzKTtcbiAgfTtcblxuICBzdGF0aWMgZGVjb2RlID0gKGNvbmZpZzogc3RyaW5nKTogQ29tbWFuZHMgPT4ge1xuICAgIGNvbnN0IGNtZHM6IENvbW1hbmRbXSA9IGRlY29kZTxDb21tYW5kW10+KGNvbmZpZyk7XG4gICAgY29uc3QgY29tbWFuZHMgPSBuZXcgQ29tbWFuZHMoKTtcbiAgICBjbWRzLmZvckVhY2goKGNtZCkgPT4ge1xuICAgICAgY29tbWFuZHMuYWRkKGNtZCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbW1hbmRzO1xuICB9O1xufVxuXG5leHBvcnQgdHlwZSBQcm9qZWN0SnNvbiA9IHtcbiAgdHlwZTogJ2RvdG5ldCcgfCAnZ29sYW5nJyB8ICdub2RlJyB8ICdweXRob24nIHwgJ3J1c3QnIHwgJ3N0YW5kYWxvbmUnO1xuICBuYW1lPzogc3RyaW5nO1xuICB2ZXJzaW9uPzogc3RyaW5nO1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgbGljZW5zZT86IHN0cmluZztcbiAgc2NyaXB0cz86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG4gIGJpbj86IFByb2plY3RKc29uQmluO1xuICBmaWxlcz86IHN0cmluZ1tdO1xuICBkZXBlbmRlbmNpZXM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuICBkZXZEZXBlbmRlbmNpZXM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuICBzY2FmZm9sZGx5PzogUGFydGlhbDxJU2NhZmZvbGRseUNvbmZpZz47XG59O1xuXG5leHBvcnQgdHlwZSBSb3V0ZXMgPSB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB8IHVuZGVmaW5lZCB9O1xuZXhwb3J0IHR5cGUgU2NyaXB0cyA9IHsgW2tleSBpbiBTY3JpcHRdPzogc3RyaW5nIH07XG5leHBvcnQgdHlwZSBTY2hlZHVsZXMgPSB7IFtrZXkgaW4gU2NoZWR1bGVdPzogc3RyaW5nIH07XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNjYWZmb2xkbHlDb25maWcgZXh0ZW5kcyBJU2VydmljZUNvbmZpZyB7XG4gIC8vIFN1cHBvcnRlZCBpbiB0b3AgbGV2ZWwgYW5kIHNlcnZpY2UgbGV2ZWw6XG4gIGdldCBpZCgpOiBzdHJpbmc7XG4gIGdldCBuYW1lKCk6IHN0cmluZztcbiAgZ2V0IHJ1bnRpbWUoKTogc3RyaW5nO1xuICBnZXQgaGFuZGxlcigpOiBzdHJpbmc7XG4gIGdldCBiaW4oKTogUHJvamVjdEpzb25CaW47IC8vIEdldCBjb3BpZWQgdG8gd29ya2RpciByb290XG4gIGdldCBmaWxlcygpOiBzdHJpbmdbXTsgLy8gR2V0IGNvcGllZCB0byB3b3JrZGlyL3tmaWxlfSBkdXJpbmcgYnVpbGQgYW5kIHNlcnZlXG4gIGdldCBzcmMoKTogc3RyaW5nOyAvLyBEZWZhdWx0cyB0byBcIi5cIlxuICBnZXQgcGFja2FnZXMoKTogc3RyaW5nW107XG4gIGdldCBzaGVsbCgpOiBTaGVsbCB8IHVuZGVmaW5lZDtcbiAgZ2V0IHNjcmlwdHMoKTogU2NyaXB0cztcbiAgZ2V0IHNjaGVkdWxlcygpOiBTY2hlZHVsZXM7XG5cbiAgLy8gVG9wIGxldmVsIGNvbmZpZ3VyYXRpb24gb25seTpcbiAgZ2V0IHZlcnNpb24oKTogc3RyaW5nO1xuICBnZXQgdGFza2RpcigpOiBzdHJpbmc7IC8vIERlZmF1bHRzIHRvIC92YXIvdGFza1xuICBnZXQgc2VydmljZXMoKTogUGFydGlhbDxJU2VydmljZUNvbmZpZz5bXTtcbiAgZ2V0IHJvdXRlcygpOiBSb3V0ZXM7XG4gIGdldCByZXNvdXJjZXMoKTogc3RyaW5nW107XG4gIGdldCB0aW1lb3V0KCk6IG51bWJlcjtcbiAgZ2V0IG1lbW9yeVNpemUoKTogbnVtYmVyO1xuICBnZXQgZ2VuZXJhdGVkRmlsZXMoKTogc3RyaW5nW107XG4gIGdldCB1c2VyKCk6IHN0cmluZyB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IHR5cGUgU2VydmljZU5hbWUgPSBzdHJpbmc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNlcnZpY2VDb25maWcge1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBTZXJ2aWNlTmFtZTtcbiAgcnVudGltZTogc3RyaW5nO1xuICBoYW5kbGVyOiBzdHJpbmc7XG4gIGJpbj86IFByb2plY3RKc29uQmluO1xuICBmaWxlcz86IHN0cmluZ1tdO1xuICBzcmM6IHN0cmluZztcbiAgcGFja2FnZXM/OiBzdHJpbmdbXTtcbiAgc2hlbGw/OiBTaGVsbDtcbiAgc2NyaXB0czogeyBba2V5IGluIFNjcmlwdF0/OiBzdHJpbmcgfTtcbiAgc2NoZWR1bGVzOiB7IFtrZXkgaW4gU2NoZWR1bGVdPzogc3RyaW5nIH07XG59XG5cbmV4cG9ydCB0eXBlIFByb2plY3RKc29uQmluID0geyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcblxuZXhwb3J0IHR5cGUgU2NyaXB0ID0gJ3ByZXBhcmUnIHwgJ2RldicgfCAnaW5zdGFsbCcgfCAnYnVpbGQnIHwgJ3BhY2thZ2UnIHwgJ3N0YXJ0JztcblxuZXhwb3J0IHR5cGUgTW9kZSA9ICdkZXZlbG9wbWVudCcgfCAnZGVidWcnIHwgJ3Byb2R1Y3Rpb24nO1xuXG4vLyBERVZOT1RFOiBFZGl0IC5naXRodWIvcmVsZWFzZS55bWwgaWYgbW9yZSAnQC1zY2hlZHVsZXNgIGFyZSBhZGRlZFxuZXhwb3J0IHR5cGUgU2NoZWR1bGUgPSAnQGltbWVkaWF0ZWx5JyB8ICdAZnJlcXVlbnRseScgfCAnQGhvdXJseScgfCAnQGRhaWx5JztcblxuZXhwb3J0IGNsYXNzIFNjYWZmb2xkbHlDb25maWcgaW1wbGVtZW50cyBJU2NhZmZvbGRseUNvbmZpZyB7XG4gIHByb2plY3RKc29uPzogUHJvamVjdEpzb247XG5cbiAgc2NhZmZvbGRseTogUGFydGlhbDxJU2NhZmZvbGRseUNvbmZpZz47XG5cbiAgc2VydmljZUNvbmZpZz86IElTZXJ2aWNlQ29uZmlnO1xuXG4gIHByaXZhdGUgbW9kZTogTW9kZTtcblxuICBwcml2YXRlIF9pZCA9ICcnO1xuXG4gIHByaXZhdGUgX25hbWU6IHN0cmluZztcblxuICBwcml2YXRlIF92ZXJzaW9uOiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBfYmluOiBQcm9qZWN0SnNvbkJpbjtcblxuICBwcml2YXRlIF9maWxlczogc3RyaW5nW107XG5cbiAgcHJpdmF0ZSBfcGFja2FnZXM6IHN0cmluZ1tdO1xuXG4gIHByaXZhdGUgX2lnbm9yZUZpbHRlcj86IChwYXRobmFtZTogc3RyaW5nKSA9PiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBiYXNlRGlyOiBzdHJpbmcsXG4gICAgcHJpdmF0ZSB3b3JrRGlyOiBzdHJpbmcsXG4gICAgY29uZmlnczoge1xuICAgICAgcHJvamVjdEpzb24/OiBQcm9qZWN0SnNvbjtcbiAgICAgIHNlcnZpY2VDb25maWc/OiBJU2VydmljZUNvbmZpZztcbiAgICB9ID0ge30sXG4gICAgbW9kZTogTW9kZSA9ICdwcm9kdWN0aW9uJyxcbiAgKSB7XG4gICAgdGhpcy5tb2RlID0gbW9kZTtcblxuICAgIC8vIFRPRE8gU3VwcG9ydCBEZXZjb250YWluZXIgSlNPTiBhbmQgc2NhZmZvbGRseS5qc29uXG4gICAgY29uc3QgeyBwcm9qZWN0SnNvbjogcHJvamVjdEpzb24sIHNlcnZpY2VDb25maWcgfSA9IGNvbmZpZ3M7XG4gICAgdGhpcy5wcm9qZWN0SnNvbiA9IHByb2plY3RKc29uO1xuXG4gICAgaWYgKHByb2plY3RKc29uKSB7XG4gICAgICBjb25zdCB7IHNjYWZmb2xkbHkgPSB7fSwgbmFtZSA9ICd1bmtub3duJywgdmVyc2lvbiA9ICcwLjAuMC0wJyB9ID0gcHJvamVjdEpzb247XG4gICAgICB0aGlzLnNjYWZmb2xkbHkgPSBzY2FmZm9sZGx5O1xuICAgICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgICB0aGlzLl92ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgIHRoaXMuX2JpbiA9IHsgLi4uKHByb2plY3RKc29uLmJpbiB8fCB7fSksIC4uLihzY2FmZm9sZGx5LmJpbiB8fCB7fSkgfTtcbiAgICAgIHRoaXMuX2ZpbGVzID0gWy4uLihwcm9qZWN0SnNvbi5maWxlcyB8fCBbXSksIC4uLihzY2FmZm9sZGx5LmZpbGVzIHx8IFtdKV07XG4gICAgICB0aGlzLl9wYWNrYWdlcyA9IHNjYWZmb2xkbHkucGFja2FnZXMgfHwgW107XG5cbiAgICAgIGlmIChzZXJ2aWNlQ29uZmlnKSB7XG4gICAgICAgIC8vIFdlJ3JlIGluIGEgc3ViLXNlcnZpY2UsIGRvbid0IHB1bGwgaW4gIG5lc3RlZCBzZXJ2aWNlcyBvciByb3V0ZXNcbiAgICAgICAgdGhpcy5zY2FmZm9sZGx5ID0ge1xuICAgICAgICAgIC4uLnNjYWZmb2xkbHksXG4gICAgICAgICAgcnVudGltZTogc2VydmljZUNvbmZpZy5ydW50aW1lIHx8IHNjYWZmb2xkbHkucnVudGltZSxcbiAgICAgICAgICBzZXJ2aWNlczogW10sXG4gICAgICAgICAgcm91dGVzOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2VydmljZUNvbmZpZyA9IHNlcnZpY2VDb25maWc7XG4gICAgICAgIHRoaXMuX25hbWUgPSBzZXJ2aWNlQ29uZmlnLm5hbWU7XG4gICAgICAgIHRoaXMuX3BhY2thZ2VzID0gWy4uLihzZXJ2aWNlQ29uZmlnLnBhY2thZ2VzIHx8IFtdKV07XG4gICAgICAgIHRoaXMuX2ZpbGVzID0gWy4uLm5ldyBTZXQoWy4uLih0aGlzLl9maWxlcyB8fCBbXSksIC4uLihzZXJ2aWNlQ29uZmlnLmZpbGVzIHx8IFtdKV0pXTtcbiAgICAgICAgdGhpcy5fYmluID0ge1xuICAgICAgICAgIC4uLih0aGlzLl9iaW4gfHwge30pLFxuICAgICAgICAgIC4uLihzZXJ2aWNlQ29uZmlnLmJpbiB8fCB7fSksXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBjcmVhdGUgc2NhZmZvbGRseSBjb25maWcnKTtcbiAgfVxuXG4gIHNldCBpZChpZDogc3RyaW5nKSB7XG4gICAgdGhpcy5faWQgPSBpZDtcbiAgfVxuXG4gIGdldCBpZCgpOiBzdHJpbmcge1xuICAgIGNvbnN0IHsgX2lkOiBpZCB9ID0gdGhpcztcbiAgICBpZiAoIWlkKSB7XG4gICAgICByZXR1cm4gJyc7IC8vIEZvciB0cnV0aHkgY2hlY2tzXG4gICAgfVxuICAgIHJldHVybiBpZDtcbiAgfVxuXG4gIGdldCBuYW1lKCk6IFNlcnZpY2VOYW1lIHtcbiAgICBsZXQgbmFtZSA9IHRoaXMuc2VydmljZUNvbmZpZz8ubmFtZSB8fCB0aGlzLl9uYW1lIHx8ICd1bmtub3duLXNlcnZpY2UnO1xuXG4gICAgY29uc3QgcmUgPSAvW2EtejAtOV0rKD86Wy5fLV1bYS16MC05XSspKi87IC8vIEZyb20gRUNSIFJlZ2V4XG5cbiAgICBjb25zdCByZXBsYWNlZCA9IG5hbWUucmVwbGFjZSgvXFwvL2csICctJyk7XG4gICAgY29uc3Qgc2FuaXRpemVkID0gcmVwbGFjZWQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bXmEtejAtOS5fLV0vZywgJycpO1xuICAgIGNvbnN0IG1hdGNoZXMgPSBzYW5pdGl6ZWQubWF0Y2gocmUpO1xuXG4gICAgaWYgKCFtYXRjaGVzIHx8ICFtYXRjaGVzWzBdKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgc2VydmljZSBuYW1lOiAnJHtuYW1lfScgKHNhbml0aXplZDogJHtzYW5pdGl6ZWR9KWApO1xuICAgIH1cblxuICAgIG5hbWUgPSBtYXRjaGVzWzBdO1xuXG4gICAgY29uc3QgaWQgPSB0aGlzLnNlcnZpY2VDb25maWc/LmlkIHx8IHRoaXMuX2lkO1xuICAgIGlmIChpZCkge1xuICAgICAgbmFtZSA9IGAke25hbWV9LSR7aWR9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmFtZTtcbiAgfVxuXG4gIGdldCB2ZXJzaW9uKCk6IHN0cmluZyB7XG4gICAgY29uc3QgeyBfdmVyc2lvbjogdmVyc2lvbiB9ID0gdGhpcztcbiAgICByZXR1cm4gdmVyc2lvbjtcbiAgfVxuXG4gIGdldCBydW50aW1lKCk6IHN0cmluZyB7XG4gICAgY29uc3QgeyBydW50aW1lID0gJ2FscGluZTozJyB9ID0gdGhpcy5zZXJ2aWNlQ29uZmlnIHx8IHRoaXMuc2NhZmZvbGRseTtcbiAgICByZXR1cm4gcnVudGltZTtcbiAgfVxuXG4gIGdldCBoYW5kbGVyKCk6IHN0cmluZyB7XG4gICAgY29uc3QgeyBoYW5kbGVyID0gJ2xvY2FsaG9zdDozMDAwJyB9ID0gdGhpcy5zZXJ2aWNlQ29uZmlnIHx8IHRoaXMuc2NhZmZvbGRseTtcbiAgICByZXR1cm4gaGFuZGxlcjtcbiAgfVxuXG4gIGdldCBmaWxlcygpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgeyBfZmlsZXM6IGZpbGVzID0gW10gfSA9IHRoaXM7XG4gICAgcmV0dXJuIFsuLi5uZXcgU2V0KGZpbGVzKV07XG4gIH1cblxuICBnZXQgc3JjKCk6IHN0cmluZyB7XG4gICAgY29uc3QgeyBzcmMgPSBERUZBVUxUX1NSQ19ST09UIH0gPSB0aGlzLnNlcnZpY2VDb25maWcgfHwgdGhpcy5zY2FmZm9sZGx5O1xuICAgIHJldHVybiBzcmM7XG4gIH1cblxuICBnZXQgYmluKCk6IFByb2plY3RKc29uQmluIHtcbiAgICBjb25zdCB7IF9iaW46IGJpbiA9IHt9IH0gPSB0aGlzO1xuICAgIHJldHVybiBiaW47XG4gIH1cblxuICBnZXQgc2NyaXB0cygpOiB7IFtrZXkgaW4gU2NyaXB0XT86IHN0cmluZyB9IHtcbiAgICBjb25zdCB7IHNjcmlwdHMgPSB7fSB9ID0gdGhpcy5zZXJ2aWNlQ29uZmlnIHx8IHRoaXMuc2NhZmZvbGRseTtcbiAgICByZXR1cm4gc2NyaXB0cztcbiAgfVxuXG4gIGdldCBzZXJ2aWNlcygpOiBTY2FmZm9sZGx5Q29uZmlnW10ge1xuICAgIGNvbnN0IHsgc2VydmljZXMgPSBbXSB9ID0gdGhpcy5zY2FmZm9sZGx5O1xuICAgIHJldHVybiBzZXJ2aWNlcy5tYXAoKHNlcnZpY2UsIGl4KSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFNjYWZmb2xkbHlDb25maWcoXG4gICAgICAgIHRoaXMuYmFzZURpcixcbiAgICAgICAgdGhpcy53b3JrRGlyLFxuICAgICAgICB7XG4gICAgICAgICAgcHJvamVjdEpzb246IHRoaXMucHJvamVjdEpzb24sXG4gICAgICAgICAgc2VydmljZUNvbmZpZzoge1xuICAgICAgICAgICAgaWQ6IHNlcnZpY2UuaWQgfHwgJycsXG4gICAgICAgICAgICBuYW1lOiBzZXJ2aWNlLm5hbWUgfHwgYCR7aXggKyAxfWAsXG4gICAgICAgICAgICBydW50aW1lOiBzZXJ2aWNlLnJ1bnRpbWUgfHwgdGhpcy5ydW50aW1lLFxuICAgICAgICAgICAgaGFuZGxlcjogc2VydmljZS5oYW5kbGVyIHx8IHRoaXMuaGFuZGxlcixcbiAgICAgICAgICAgIHNyYzogc2VydmljZS5zcmMgfHwgdGhpcy5zcmMsXG4gICAgICAgICAgICBmaWxlczogc2VydmljZS5maWxlcyB8fCBbXSxcbiAgICAgICAgICAgIGJpbjogc2VydmljZS5iaW4gfHwge30sXG4gICAgICAgICAgICBwYWNrYWdlczogc2VydmljZS5wYWNrYWdlcyB8fCBbXSxcbiAgICAgICAgICAgIHNoZWxsOiBzZXJ2aWNlLnNoZWxsLFxuICAgICAgICAgICAgc2NyaXB0czogc2VydmljZS5zY3JpcHRzIHx8IHt9LFxuICAgICAgICAgICAgc2NoZWR1bGVzOiBzZXJ2aWNlLnNjaGVkdWxlcyB8fCB7fSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLm1vZGUsXG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0IHJvdXRlcygpOiBSb3V0ZXMge1xuICAgIGxldCB7IHJvdXRlcyB9ID0gdGhpcy5zY2FmZm9sZGx5O1xuICAgIGlmICghcm91dGVzKSB7XG4gICAgICByb3V0ZXMgPSB7fTtcbiAgICB9XG4gICAgaWYgKCFyb3V0ZXNbREVGQVVMVF9ST1VURV0pIHtcbiAgICAgIHJvdXRlc1tERUZBVUxUX1JPVVRFXSA9IHRoaXMuaGFuZGxlcjtcbiAgICB9XG4gICAgcmV0dXJuIHJvdXRlcztcbiAgfVxuXG4gIGdldCBpbnN0YWxsQ29tbWFuZHMoKTogQ29tbWFuZHMge1xuICAgIGNvbnN0IHNjcmlwdDogU2NyaXB0ID0gJ2luc3RhbGwnO1xuXG4gICAgY29uc3QgY21kcyA9IG5ldyBDb21tYW5kcygpO1xuICAgIGxldCB3b3JrZGlyID0gdGhpcy5zcmMgIT09IERFRkFVTFRfU1JDX1JPT1QgPyB0aGlzLnNyYyA6IHVuZGVmaW5lZDtcblxuICAgIGlmICh0aGlzLnNjcmlwdHNbc2NyaXB0XSkge1xuICAgICAgY21kcy5hZGQoe1xuICAgICAgICBjbWQ6IHRoaXMuc2NyaXB0c1tzY3JpcHRdLFxuICAgICAgICB3b3JrZGlyLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXJ2aWNlcy5mb3JFYWNoKChzZXJ2aWNlKSA9PiB7XG4gICAgICB3b3JrZGlyID0gc2VydmljZS5zcmMgIT09IERFRkFVTFRfU1JDX1JPT1QgPyBzZXJ2aWNlLnNyYyA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHNlcnZpY2Uuc2NyaXB0c1tzY3JpcHRdKSB7XG4gICAgICAgIGNtZHMuYWRkKHtcbiAgICAgICAgICBjbWQ6IHNlcnZpY2Uuc2NyaXB0c1tzY3JpcHRdLFxuICAgICAgICAgIHdvcmtkaXIsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNtZHM7XG4gIH1cblxuICBnZXQgc2VydmVDb21tYW5kcygpOiBDb21tYW5kcyB7XG4gICAgY29uc3Qgc2NyaXB0OiBTY3JpcHQgPSB0aGlzLm1vZGUgPT09ICdkZXZlbG9wbWVudCcgPyAnZGV2JyA6ICdzdGFydCc7XG5cbiAgICBjb25zdCBjbWRzID0gbmV3IENvbW1hbmRzKCk7XG4gICAgbGV0IHdvcmtkaXIgPSB0aGlzLnNyYyAhPT0gREVGQVVMVF9TUkNfUk9PVCA/IHRoaXMuc3JjIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKHRoaXMuc2NyaXB0c1tzY3JpcHRdKSB7XG4gICAgICBjbWRzLmFkZCh7XG4gICAgICAgIGNtZDogdGhpcy5zY3JpcHRzW3NjcmlwdF0sXG4gICAgICAgIHdvcmtkaXIsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBPYmplY3QuZW50cmllcyh0aGlzLnNjaGVkdWxlcykuZm9yRWFjaCgoW3NjaGVkdWxlLCBjbWRdKSA9PiB7XG4gICAgICBjbWRzLmFkZCh7XG4gICAgICAgIGNtZCxcbiAgICAgICAgd29ya2RpcixcbiAgICAgICAgc2NoZWR1bGU6IHNjaGVkdWxlIGFzIFNjaGVkdWxlLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnNlcnZpY2VzLmZvckVhY2goKHNlcnZpY2UpID0+IHtcbiAgICAgIHdvcmtkaXIgPSBzZXJ2aWNlLnNyYyAhPT0gREVGQVVMVF9TUkNfUk9PVCA/IHNlcnZpY2Uuc3JjIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoc2VydmljZS5zY3JpcHRzW3NjcmlwdF0pIHtcbiAgICAgICAgY21kcy5hZGQoe1xuICAgICAgICAgIGNtZDogc2VydmljZS5zY3JpcHRzW3NjcmlwdF0sXG4gICAgICAgICAgd29ya2RpcixcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5lbnRyaWVzKHNlcnZpY2Uuc2NoZWR1bGVzKS5mb3JFYWNoKChbc2NoZWR1bGUsIGNtZF0pID0+IHtcbiAgICAgICAgY21kcy5hZGQoe1xuICAgICAgICAgIGNtZCxcbiAgICAgICAgICB3b3JrZGlyLFxuICAgICAgICAgIHNjaGVkdWxlOiBzY2hlZHVsZSBhcyBTY2hlZHVsZSxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBjbWRzO1xuICB9XG5cbiAgZ2V0IHJvb3RkaXIoKTogc3RyaW5nIHtcbiAgICBsZXQgeyB0YXNrZGlyIH0gPSB0aGlzLnNjYWZmb2xkbHk7XG4gICAgaWYgKCF0YXNrZGlyKSB7XG4gICAgICB0YXNrZGlyID0gREVGQVVMVF9UQVNLRElSO1xuICAgIH1cbiAgICByZXR1cm4gdGFza2RpcjtcbiAgfVxuXG4gIGdldCB0YXNrZGlyKCk6IHN0cmluZyB7XG4gICAgY29uc3QgeyByb290ZGlyIH0gPSB0aGlzO1xuICAgIGNvbnN0IHRhc2tkaXIgPSBqb2luKHJvb3RkaXIsIHJlbGF0aXZlKHRoaXMuYmFzZURpciwgam9pbih0aGlzLndvcmtEaXIpKSk7XG4gICAgcmV0dXJuIHRhc2tkaXI7XG4gIH1cblxuICBnZXQgcGFja2FnZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLl9wYWNrYWdlcyB8fCBbXTtcbiAgfVxuXG4gIGdldCBzaGVsbCgpOiBTaGVsbCB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgeyBzaGVsbCB9ID0gdGhpcy5zZXJ2aWNlQ29uZmlnIHx8IHRoaXMuc2NhZmZvbGRseTtcbiAgICByZXR1cm4gc2hlbGw7XG4gIH1cblxuICBnZXQgc2NoZWR1bGVzKCk6IHsgW2tleSBpbiBTY2hlZHVsZV0/OiBzdHJpbmcgfSB7XG4gICAgY29uc3QgeyBzY2hlZHVsZXMgPSB7fSB9ID0gdGhpcy5zZXJ2aWNlQ29uZmlnIHx8IHRoaXMuc2NhZmZvbGRseTtcbiAgICByZXR1cm4gc2NoZWR1bGVzO1xuICB9XG5cbiAgZ2V0IHJlc291cmNlcygpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgeyByZXNvdXJjZXMgPSBbXSB9ID0gdGhpcy5zY2FmZm9sZGx5O1xuICAgIHJldHVybiByZXNvdXJjZXM7XG4gIH1cblxuICBnZXQgcnVudGltZXMoKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IHJ1bnRpbWVzID0gW1xuICAgICAgQ09ORklHX1NJR05BVFVSRSwgLy8gQWx3YXlzIHB1bGwgdGhlIHNjYWZmb2xkbHkgY29udGFpbmVyXG4gICAgICB0aGlzLnJ1bnRpbWUsXG4gICAgICAuLi50aGlzLnNlcnZpY2VzLm1hcCgoc2VydmljZSkgPT4gc2VydmljZS5ydW50aW1lKSxcbiAgICBdO1xuICAgIHJldHVybiBbLi4ubmV3IFNldChydW50aW1lcyldO1xuICB9XG5cbiAgZ2V0IHRpbWVvdXQoKTogbnVtYmVyIHtcbiAgICBjb25zdCB7IHRpbWVvdXQgPSA5MDAgfSA9IHRoaXMuc2NhZmZvbGRseTtcbiAgICByZXR1cm4gdGltZW91dDtcbiAgfVxuXG4gIGdldCBtZW1vcnlTaXplKCk6IG51bWJlciB7XG4gICAgY29uc3QgeyBtZW1vcnlTaXplID0gMTAyNCB9ID0gdGhpcy5zY2FmZm9sZGx5O1xuICAgIHJldHVybiBtZW1vcnlTaXplO1xuICB9XG5cbiAgZ2V0IGlnbm9yZUZpbHRlcigpOiAocGF0aG5hbWU6IHN0cmluZykgPT4gYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuX2lnbm9yZUZpbHRlcikge1xuICAgICAgcmV0dXJuIHRoaXMuX2lnbm9yZUZpbHRlcjtcbiAgICB9XG5cbiAgICBjb25zdCBpZyA9IGlnbm9yZSgpO1xuICAgIFsnLmdpdGlnbm9yZScsICcuZG9ja2VyaWdub3JlJ10ubWFwKChmaWxlbmFtZSkgPT4ge1xuICAgICAgLy8gU2VhcmNoIGZvciAuZ2l0aWdub3JlLy5kb2NrZXJpZ25vcmUgaW4gdGhlIGJhc2VEaXIgYW5kIHdvcmtEaXIgYW5kIHdvcmtEaXIrc3JjXG4gICAgICBbXG4gICAgICAgIGpvaW4odGhpcy5iYXNlRGlyLCBmaWxlbmFtZSksXG4gICAgICAgIGpvaW4odGhpcy53b3JrRGlyLCBmaWxlbmFtZSksXG4gICAgICAgIGpvaW4odGhpcy53b3JrRGlyLCB0aGlzLnNyYywgZmlsZW5hbWUpLFxuICAgICAgXS5mb3JFYWNoKChmaWxlKSA9PiB7XG4gICAgICAgIGlmIChleGlzdHNTeW5jKGZpbGUpKSB7XG4gICAgICAgICAgaWcuYWRkKHJlYWRGaWxlU3luYyhmaWxlKS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9pZ25vcmVGaWx0ZXIgPSBpZy5jcmVhdGVGaWx0ZXIoKTtcbiAgICByZXR1cm4gdGhpcy5faWdub3JlRmlsdGVyO1xuICB9XG5cbiAgZ2V0IGlnbm9yZWRGaWxlcygpOiBzdHJpbmdbXSB7XG4gICAgY29uc3Qgc3JjID0gam9pbih0aGlzLndvcmtEaXIsIHRoaXMuc3JjKTtcbiAgICBjb25zdCBmaWxlcyA9IHJlYWRkaXJTeW5jKHNyYykuZmlsdGVyKChwYXRoKSA9PiB7XG4gICAgICBjb25zdCByZWxhdGl2ZVBhdGggPSByZWxhdGl2ZSh0aGlzLndvcmtEaXIsIHBhdGgpO1xuICAgICAgcmV0dXJuICF0aGlzLmlnbm9yZUZpbHRlcihyZWxhdGl2ZVBhdGgpO1xuICAgIH0pO1xuICAgIHJldHVybiBmaWxlcztcbiAgfVxuXG4gIGdldCBnZW5lcmF0ZWRGaWxlcygpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgeyBnZW5lcmF0ZWRGaWxlcyA9IFtdIH0gPSB0aGlzLnNjYWZmb2xkbHk7XG4gICAgcmV0dXJuIGdlbmVyYXRlZEZpbGVzO1xuICB9XG5cbiAgZ2V0IHVzZXIoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCB7IHVzZXIgfSA9IHRoaXMuc2NhZmZvbGRseTtcbiAgICByZXR1cm4gdXNlcjtcbiAgfVxufVxuIiwgIlxuLyohIGpzLXlhbWwgNC4xLjAgaHR0cHM6Ly9naXRodWIuY29tL25vZGVjYS9qcy15YW1sIEBsaWNlbnNlIE1JVCAqL1xuZnVuY3Rpb24gaXNOb3RoaW5nKHN1YmplY3QpIHtcbiAgcmV0dXJuICh0eXBlb2Ygc3ViamVjdCA9PT0gJ3VuZGVmaW5lZCcpIHx8IChzdWJqZWN0ID09PSBudWxsKTtcbn1cblxuXG5mdW5jdGlvbiBpc09iamVjdChzdWJqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIHN1YmplY3QgPT09ICdvYmplY3QnKSAmJiAoc3ViamVjdCAhPT0gbnVsbCk7XG59XG5cblxuZnVuY3Rpb24gdG9BcnJheShzZXF1ZW5jZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShzZXF1ZW5jZSkpIHJldHVybiBzZXF1ZW5jZTtcbiAgZWxzZSBpZiAoaXNOb3RoaW5nKHNlcXVlbmNlKSkgcmV0dXJuIFtdO1xuXG4gIHJldHVybiBbIHNlcXVlbmNlIF07XG59XG5cblxuZnVuY3Rpb24gZXh0ZW5kKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBpbmRleCwgbGVuZ3RoLCBrZXksIHNvdXJjZUtleXM7XG5cbiAgaWYgKHNvdXJjZSkge1xuICAgIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IHNvdXJjZUtleXMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgICAga2V5ID0gc291cmNlS2V5c1tpbmRleF07XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cblxuZnVuY3Rpb24gcmVwZWF0KHN0cmluZywgY291bnQpIHtcbiAgdmFyIHJlc3VsdCA9ICcnLCBjeWNsZTtcblxuICBmb3IgKGN5Y2xlID0gMDsgY3ljbGUgPCBjb3VudDsgY3ljbGUgKz0gMSkge1xuICAgIHJlc3VsdCArPSBzdHJpbmc7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5cbmZ1bmN0aW9uIGlzTmVnYXRpdmVaZXJvKG51bWJlcikge1xuICByZXR1cm4gKG51bWJlciA9PT0gMCkgJiYgKE51bWJlci5ORUdBVElWRV9JTkZJTklUWSA9PT0gMSAvIG51bWJlcik7XG59XG5cblxudmFyIGlzTm90aGluZ18xICAgICAgPSBpc05vdGhpbmc7XG52YXIgaXNPYmplY3RfMSAgICAgICA9IGlzT2JqZWN0O1xudmFyIHRvQXJyYXlfMSAgICAgICAgPSB0b0FycmF5O1xudmFyIHJlcGVhdF8xICAgICAgICAgPSByZXBlYXQ7XG52YXIgaXNOZWdhdGl2ZVplcm9fMSA9IGlzTmVnYXRpdmVaZXJvO1xudmFyIGV4dGVuZF8xICAgICAgICAgPSBleHRlbmQ7XG5cbnZhciBjb21tb24gPSB7XG5cdGlzTm90aGluZzogaXNOb3RoaW5nXzEsXG5cdGlzT2JqZWN0OiBpc09iamVjdF8xLFxuXHR0b0FycmF5OiB0b0FycmF5XzEsXG5cdHJlcGVhdDogcmVwZWF0XzEsXG5cdGlzTmVnYXRpdmVaZXJvOiBpc05lZ2F0aXZlWmVyb18xLFxuXHRleHRlbmQ6IGV4dGVuZF8xXG59O1xuXG4vLyBZQU1MIGVycm9yIGNsYXNzLiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzg0NTg5ODRcblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcihleGNlcHRpb24sIGNvbXBhY3QpIHtcbiAgdmFyIHdoZXJlID0gJycsIG1lc3NhZ2UgPSBleGNlcHRpb24ucmVhc29uIHx8ICcodW5rbm93biByZWFzb24pJztcblxuICBpZiAoIWV4Y2VwdGlvbi5tYXJrKSByZXR1cm4gbWVzc2FnZTtcblxuICBpZiAoZXhjZXB0aW9uLm1hcmsubmFtZSkge1xuICAgIHdoZXJlICs9ICdpbiBcIicgKyBleGNlcHRpb24ubWFyay5uYW1lICsgJ1wiICc7XG4gIH1cblxuICB3aGVyZSArPSAnKCcgKyAoZXhjZXB0aW9uLm1hcmsubGluZSArIDEpICsgJzonICsgKGV4Y2VwdGlvbi5tYXJrLmNvbHVtbiArIDEpICsgJyknO1xuXG4gIGlmICghY29tcGFjdCAmJiBleGNlcHRpb24ubWFyay5zbmlwcGV0KSB7XG4gICAgd2hlcmUgKz0gJ1xcblxcbicgKyBleGNlcHRpb24ubWFyay5zbmlwcGV0O1xuICB9XG5cbiAgcmV0dXJuIG1lc3NhZ2UgKyAnICcgKyB3aGVyZTtcbn1cblxuXG5mdW5jdGlvbiBZQU1MRXhjZXB0aW9uJDEocmVhc29uLCBtYXJrKSB7XG4gIC8vIFN1cGVyIGNvbnN0cnVjdG9yXG4gIEVycm9yLmNhbGwodGhpcyk7XG5cbiAgdGhpcy5uYW1lID0gJ1lBTUxFeGNlcHRpb24nO1xuICB0aGlzLnJlYXNvbiA9IHJlYXNvbjtcbiAgdGhpcy5tYXJrID0gbWFyaztcbiAgdGhpcy5tZXNzYWdlID0gZm9ybWF0RXJyb3IodGhpcywgZmFsc2UpO1xuXG4gIC8vIEluY2x1ZGUgc3RhY2sgdHJhY2UgaW4gZXJyb3Igb2JqZWN0XG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIC8vIENocm9tZSBhbmQgTm9kZUpTXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSB7XG4gICAgLy8gRkYsIElFIDEwKyBhbmQgU2FmYXJpIDYrLiBGYWxsYmFjayBmb3Igb3RoZXJzXG4gICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IoKSkuc3RhY2sgfHwgJyc7XG4gIH1cbn1cblxuXG4vLyBJbmhlcml0IGZyb20gRXJyb3JcbllBTUxFeGNlcHRpb24kMS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5ZQU1MRXhjZXB0aW9uJDEucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gWUFNTEV4Y2VwdGlvbiQxO1xuXG5cbllBTUxFeGNlcHRpb24kMS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhjb21wYWN0KSB7XG4gIHJldHVybiB0aGlzLm5hbWUgKyAnOiAnICsgZm9ybWF0RXJyb3IodGhpcywgY29tcGFjdCk7XG59O1xuXG5cbnZhciBleGNlcHRpb24gPSBZQU1MRXhjZXB0aW9uJDE7XG5cbi8vIGdldCBzbmlwcGV0IGZvciBhIHNpbmdsZSBsaW5lLCByZXNwZWN0aW5nIG1heExlbmd0aFxuZnVuY3Rpb24gZ2V0TGluZShidWZmZXIsIGxpbmVTdGFydCwgbGluZUVuZCwgcG9zaXRpb24sIG1heExpbmVMZW5ndGgpIHtcbiAgdmFyIGhlYWQgPSAnJztcbiAgdmFyIHRhaWwgPSAnJztcbiAgdmFyIG1heEhhbGZMZW5ndGggPSBNYXRoLmZsb29yKG1heExpbmVMZW5ndGggLyAyKSAtIDE7XG5cbiAgaWYgKHBvc2l0aW9uIC0gbGluZVN0YXJ0ID4gbWF4SGFsZkxlbmd0aCkge1xuICAgIGhlYWQgPSAnIC4uLiAnO1xuICAgIGxpbmVTdGFydCA9IHBvc2l0aW9uIC0gbWF4SGFsZkxlbmd0aCArIGhlYWQubGVuZ3RoO1xuICB9XG5cbiAgaWYgKGxpbmVFbmQgLSBwb3NpdGlvbiA+IG1heEhhbGZMZW5ndGgpIHtcbiAgICB0YWlsID0gJyAuLi4nO1xuICAgIGxpbmVFbmQgPSBwb3NpdGlvbiArIG1heEhhbGZMZW5ndGggLSB0YWlsLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3RyOiBoZWFkICsgYnVmZmVyLnNsaWNlKGxpbmVTdGFydCwgbGluZUVuZCkucmVwbGFjZSgvXFx0L2csICdcdTIxOTInKSArIHRhaWwsXG4gICAgcG9zOiBwb3NpdGlvbiAtIGxpbmVTdGFydCArIGhlYWQubGVuZ3RoIC8vIHJlbGF0aXZlIHBvc2l0aW9uXG4gIH07XG59XG5cblxuZnVuY3Rpb24gcGFkU3RhcnQoc3RyaW5nLCBtYXgpIHtcbiAgcmV0dXJuIGNvbW1vbi5yZXBlYXQoJyAnLCBtYXggLSBzdHJpbmcubGVuZ3RoKSArIHN0cmluZztcbn1cblxuXG5mdW5jdGlvbiBtYWtlU25pcHBldChtYXJrLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG9wdGlvbnMgfHwgbnVsbCk7XG5cbiAgaWYgKCFtYXJrLmJ1ZmZlcikgcmV0dXJuIG51bGw7XG5cbiAgaWYgKCFvcHRpb25zLm1heExlbmd0aCkgb3B0aW9ucy5tYXhMZW5ndGggPSA3OTtcbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluZGVudCAgICAgICE9PSAnbnVtYmVyJykgb3B0aW9ucy5pbmRlbnQgICAgICA9IDE7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5saW5lc0JlZm9yZSAhPT0gJ251bWJlcicpIG9wdGlvbnMubGluZXNCZWZvcmUgPSAzO1xuICBpZiAodHlwZW9mIG9wdGlvbnMubGluZXNBZnRlciAgIT09ICdudW1iZXInKSBvcHRpb25zLmxpbmVzQWZ0ZXIgID0gMjtcblxuICB2YXIgcmUgPSAvXFxyP1xcbnxcXHJ8XFwwL2c7XG4gIHZhciBsaW5lU3RhcnRzID0gWyAwIF07XG4gIHZhciBsaW5lRW5kcyA9IFtdO1xuICB2YXIgbWF0Y2g7XG4gIHZhciBmb3VuZExpbmVObyA9IC0xO1xuXG4gIHdoaWxlICgobWF0Y2ggPSByZS5leGVjKG1hcmsuYnVmZmVyKSkpIHtcbiAgICBsaW5lRW5kcy5wdXNoKG1hdGNoLmluZGV4KTtcbiAgICBsaW5lU3RhcnRzLnB1c2gobWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGgpO1xuXG4gICAgaWYgKG1hcmsucG9zaXRpb24gPD0gbWF0Y2guaW5kZXggJiYgZm91bmRMaW5lTm8gPCAwKSB7XG4gICAgICBmb3VuZExpbmVObyA9IGxpbmVTdGFydHMubGVuZ3RoIC0gMjtcbiAgICB9XG4gIH1cblxuICBpZiAoZm91bmRMaW5lTm8gPCAwKSBmb3VuZExpbmVObyA9IGxpbmVTdGFydHMubGVuZ3RoIC0gMTtcblxuICB2YXIgcmVzdWx0ID0gJycsIGksIGxpbmU7XG4gIHZhciBsaW5lTm9MZW5ndGggPSBNYXRoLm1pbihtYXJrLmxpbmUgKyBvcHRpb25zLmxpbmVzQWZ0ZXIsIGxpbmVFbmRzLmxlbmd0aCkudG9TdHJpbmcoKS5sZW5ndGg7XG4gIHZhciBtYXhMaW5lTGVuZ3RoID0gb3B0aW9ucy5tYXhMZW5ndGggLSAob3B0aW9ucy5pbmRlbnQgKyBsaW5lTm9MZW5ndGggKyAzKTtcblxuICBmb3IgKGkgPSAxOyBpIDw9IG9wdGlvbnMubGluZXNCZWZvcmU7IGkrKykge1xuICAgIGlmIChmb3VuZExpbmVObyAtIGkgPCAwKSBicmVhaztcbiAgICBsaW5lID0gZ2V0TGluZShcbiAgICAgIG1hcmsuYnVmZmVyLFxuICAgICAgbGluZVN0YXJ0c1tmb3VuZExpbmVObyAtIGldLFxuICAgICAgbGluZUVuZHNbZm91bmRMaW5lTm8gLSBpXSxcbiAgICAgIG1hcmsucG9zaXRpb24gLSAobGluZVN0YXJ0c1tmb3VuZExpbmVOb10gLSBsaW5lU3RhcnRzW2ZvdW5kTGluZU5vIC0gaV0pLFxuICAgICAgbWF4TGluZUxlbmd0aFxuICAgICk7XG4gICAgcmVzdWx0ID0gY29tbW9uLnJlcGVhdCgnICcsIG9wdGlvbnMuaW5kZW50KSArIHBhZFN0YXJ0KChtYXJrLmxpbmUgLSBpICsgMSkudG9TdHJpbmcoKSwgbGluZU5vTGVuZ3RoKSArXG4gICAgICAnIHwgJyArIGxpbmUuc3RyICsgJ1xcbicgKyByZXN1bHQ7XG4gIH1cblxuICBsaW5lID0gZ2V0TGluZShtYXJrLmJ1ZmZlciwgbGluZVN0YXJ0c1tmb3VuZExpbmVOb10sIGxpbmVFbmRzW2ZvdW5kTGluZU5vXSwgbWFyay5wb3NpdGlvbiwgbWF4TGluZUxlbmd0aCk7XG4gIHJlc3VsdCArPSBjb21tb24ucmVwZWF0KCcgJywgb3B0aW9ucy5pbmRlbnQpICsgcGFkU3RhcnQoKG1hcmsubGluZSArIDEpLnRvU3RyaW5nKCksIGxpbmVOb0xlbmd0aCkgK1xuICAgICcgfCAnICsgbGluZS5zdHIgKyAnXFxuJztcbiAgcmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoJy0nLCBvcHRpb25zLmluZGVudCArIGxpbmVOb0xlbmd0aCArIDMgKyBsaW5lLnBvcykgKyAnXicgKyAnXFxuJztcblxuICBmb3IgKGkgPSAxOyBpIDw9IG9wdGlvbnMubGluZXNBZnRlcjsgaSsrKSB7XG4gICAgaWYgKGZvdW5kTGluZU5vICsgaSA+PSBsaW5lRW5kcy5sZW5ndGgpIGJyZWFrO1xuICAgIGxpbmUgPSBnZXRMaW5lKFxuICAgICAgbWFyay5idWZmZXIsXG4gICAgICBsaW5lU3RhcnRzW2ZvdW5kTGluZU5vICsgaV0sXG4gICAgICBsaW5lRW5kc1tmb3VuZExpbmVObyArIGldLFxuICAgICAgbWFyay5wb3NpdGlvbiAtIChsaW5lU3RhcnRzW2ZvdW5kTGluZU5vXSAtIGxpbmVTdGFydHNbZm91bmRMaW5lTm8gKyBpXSksXG4gICAgICBtYXhMaW5lTGVuZ3RoXG4gICAgKTtcbiAgICByZXN1bHQgKz0gY29tbW9uLnJlcGVhdCgnICcsIG9wdGlvbnMuaW5kZW50KSArIHBhZFN0YXJ0KChtYXJrLmxpbmUgKyBpICsgMSkudG9TdHJpbmcoKSwgbGluZU5vTGVuZ3RoKSArXG4gICAgICAnIHwgJyArIGxpbmUuc3RyICsgJ1xcbic7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0LnJlcGxhY2UoL1xcbiQvLCAnJyk7XG59XG5cblxudmFyIHNuaXBwZXQgPSBtYWtlU25pcHBldDtcblxudmFyIFRZUEVfQ09OU1RSVUNUT1JfT1BUSU9OUyA9IFtcbiAgJ2tpbmQnLFxuICAnbXVsdGknLFxuICAncmVzb2x2ZScsXG4gICdjb25zdHJ1Y3QnLFxuICAnaW5zdGFuY2VPZicsXG4gICdwcmVkaWNhdGUnLFxuICAncmVwcmVzZW50JyxcbiAgJ3JlcHJlc2VudE5hbWUnLFxuICAnZGVmYXVsdFN0eWxlJyxcbiAgJ3N0eWxlQWxpYXNlcydcbl07XG5cbnZhciBZQU1MX05PREVfS0lORFMgPSBbXG4gICdzY2FsYXInLFxuICAnc2VxdWVuY2UnLFxuICAnbWFwcGluZydcbl07XG5cbmZ1bmN0aW9uIGNvbXBpbGVTdHlsZUFsaWFzZXMobWFwKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcblxuICBpZiAobWFwICE9PSBudWxsKSB7XG4gICAgT2JqZWN0LmtleXMobWFwKS5mb3JFYWNoKGZ1bmN0aW9uIChzdHlsZSkge1xuICAgICAgbWFwW3N0eWxlXS5mb3JFYWNoKGZ1bmN0aW9uIChhbGlhcykge1xuICAgICAgICByZXN1bHRbU3RyaW5nKGFsaWFzKV0gPSBzdHlsZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gVHlwZSQxKHRhZywgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBPYmplY3Qua2V5cyhvcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKFRZUEVfQ09OU1RSVUNUT1JfT1BUSU9OUy5pbmRleE9mKG5hbWUpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbignVW5rbm93biBvcHRpb24gXCInICsgbmFtZSArICdcIiBpcyBtZXQgaW4gZGVmaW5pdGlvbiBvZiBcIicgKyB0YWcgKyAnXCIgWUFNTCB0eXBlLicpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gVE9ETzogQWRkIHRhZyBmb3JtYXQgY2hlY2suXG4gIHRoaXMub3B0aW9ucyAgICAgICA9IG9wdGlvbnM7IC8vIGtlZXAgb3JpZ2luYWwgb3B0aW9ucyBpbiBjYXNlIHVzZXIgd2FudHMgdG8gZXh0ZW5kIHRoaXMgdHlwZSBsYXRlclxuICB0aGlzLnRhZyAgICAgICAgICAgPSB0YWc7XG4gIHRoaXMua2luZCAgICAgICAgICA9IG9wdGlvbnNbJ2tpbmQnXSAgICAgICAgICB8fCBudWxsO1xuICB0aGlzLnJlc29sdmUgICAgICAgPSBvcHRpb25zWydyZXNvbHZlJ10gICAgICAgfHwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfTtcbiAgdGhpcy5jb25zdHJ1Y3QgICAgID0gb3B0aW9uc1snY29uc3RydWN0J10gICAgIHx8IGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBkYXRhOyB9O1xuICB0aGlzLmluc3RhbmNlT2YgICAgPSBvcHRpb25zWydpbnN0YW5jZU9mJ10gICAgfHwgbnVsbDtcbiAgdGhpcy5wcmVkaWNhdGUgICAgID0gb3B0aW9uc1sncHJlZGljYXRlJ10gICAgIHx8IG51bGw7XG4gIHRoaXMucmVwcmVzZW50ICAgICA9IG9wdGlvbnNbJ3JlcHJlc2VudCddICAgICB8fCBudWxsO1xuICB0aGlzLnJlcHJlc2VudE5hbWUgPSBvcHRpb25zWydyZXByZXNlbnROYW1lJ10gfHwgbnVsbDtcbiAgdGhpcy5kZWZhdWx0U3R5bGUgID0gb3B0aW9uc1snZGVmYXVsdFN0eWxlJ10gIHx8IG51bGw7XG4gIHRoaXMubXVsdGkgICAgICAgICA9IG9wdGlvbnNbJ211bHRpJ10gICAgICAgICB8fCBmYWxzZTtcbiAgdGhpcy5zdHlsZUFsaWFzZXMgID0gY29tcGlsZVN0eWxlQWxpYXNlcyhvcHRpb25zWydzdHlsZUFsaWFzZXMnXSB8fCBudWxsKTtcblxuICBpZiAoWUFNTF9OT0RFX0tJTkRTLmluZGV4T2YodGhpcy5raW5kKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgZXhjZXB0aW9uKCdVbmtub3duIGtpbmQgXCInICsgdGhpcy5raW5kICsgJ1wiIGlzIHNwZWNpZmllZCBmb3IgXCInICsgdGFnICsgJ1wiIFlBTUwgdHlwZS4nKTtcbiAgfVxufVxuXG52YXIgdHlwZSA9IFR5cGUkMTtcblxuLyplc2xpbnQtZGlzYWJsZSBtYXgtbGVuKi9cblxuXG5cblxuXG5mdW5jdGlvbiBjb21waWxlTGlzdChzY2hlbWEsIG5hbWUpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gIHNjaGVtYVtuYW1lXS5mb3JFYWNoKGZ1bmN0aW9uIChjdXJyZW50VHlwZSkge1xuICAgIHZhciBuZXdJbmRleCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICByZXN1bHQuZm9yRWFjaChmdW5jdGlvbiAocHJldmlvdXNUeXBlLCBwcmV2aW91c0luZGV4KSB7XG4gICAgICBpZiAocHJldmlvdXNUeXBlLnRhZyA9PT0gY3VycmVudFR5cGUudGFnICYmXG4gICAgICAgICAgcHJldmlvdXNUeXBlLmtpbmQgPT09IGN1cnJlbnRUeXBlLmtpbmQgJiZcbiAgICAgICAgICBwcmV2aW91c1R5cGUubXVsdGkgPT09IGN1cnJlbnRUeXBlLm11bHRpKSB7XG5cbiAgICAgICAgbmV3SW5kZXggPSBwcmV2aW91c0luZGV4O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmVzdWx0W25ld0luZGV4XSA9IGN1cnJlbnRUeXBlO1xuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5cbmZ1bmN0aW9uIGNvbXBpbGVNYXAoLyogbGlzdHMuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgc2NhbGFyOiB7fSxcbiAgICAgICAgc2VxdWVuY2U6IHt9LFxuICAgICAgICBtYXBwaW5nOiB7fSxcbiAgICAgICAgZmFsbGJhY2s6IHt9LFxuICAgICAgICBtdWx0aToge1xuICAgICAgICAgIHNjYWxhcjogW10sXG4gICAgICAgICAgc2VxdWVuY2U6IFtdLFxuICAgICAgICAgIG1hcHBpbmc6IFtdLFxuICAgICAgICAgIGZhbGxiYWNrOiBbXVxuICAgICAgICB9XG4gICAgICB9LCBpbmRleCwgbGVuZ3RoO1xuXG4gIGZ1bmN0aW9uIGNvbGxlY3RUeXBlKHR5cGUpIHtcbiAgICBpZiAodHlwZS5tdWx0aSkge1xuICAgICAgcmVzdWx0Lm11bHRpW3R5cGUua2luZF0ucHVzaCh0eXBlKTtcbiAgICAgIHJlc3VsdC5tdWx0aVsnZmFsbGJhY2snXS5wdXNoKHR5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRbdHlwZS5raW5kXVt0eXBlLnRhZ10gPSByZXN1bHRbJ2ZhbGxiYWNrJ11bdHlwZS50YWddID0gdHlwZTtcbiAgICB9XG4gIH1cblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBhcmd1bWVudHNbaW5kZXhdLmZvckVhY2goY29sbGVjdFR5cGUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cblxuZnVuY3Rpb24gU2NoZW1hJDEoZGVmaW5pdGlvbikge1xuICByZXR1cm4gdGhpcy5leHRlbmQoZGVmaW5pdGlvbik7XG59XG5cblxuU2NoZW1hJDEucHJvdG90eXBlLmV4dGVuZCA9IGZ1bmN0aW9uIGV4dGVuZChkZWZpbml0aW9uKSB7XG4gIHZhciBpbXBsaWNpdCA9IFtdO1xuICB2YXIgZXhwbGljaXQgPSBbXTtcblxuICBpZiAoZGVmaW5pdGlvbiBpbnN0YW5jZW9mIHR5cGUpIHtcbiAgICAvLyBTY2hlbWEuZXh0ZW5kKHR5cGUpXG4gICAgZXhwbGljaXQucHVzaChkZWZpbml0aW9uKTtcblxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGVmaW5pdGlvbikpIHtcbiAgICAvLyBTY2hlbWEuZXh0ZW5kKFsgdHlwZTEsIHR5cGUyLCAuLi4gXSlcbiAgICBleHBsaWNpdCA9IGV4cGxpY2l0LmNvbmNhdChkZWZpbml0aW9uKTtcblxuICB9IGVsc2UgaWYgKGRlZmluaXRpb24gJiYgKEFycmF5LmlzQXJyYXkoZGVmaW5pdGlvbi5pbXBsaWNpdCkgfHwgQXJyYXkuaXNBcnJheShkZWZpbml0aW9uLmV4cGxpY2l0KSkpIHtcbiAgICAvLyBTY2hlbWEuZXh0ZW5kKHsgZXhwbGljaXQ6IFsgdHlwZTEsIHR5cGUyLCAuLi4gXSwgaW1wbGljaXQ6IFsgdHlwZTEsIHR5cGUyLCAuLi4gXSB9KVxuICAgIGlmIChkZWZpbml0aW9uLmltcGxpY2l0KSBpbXBsaWNpdCA9IGltcGxpY2l0LmNvbmNhdChkZWZpbml0aW9uLmltcGxpY2l0KTtcbiAgICBpZiAoZGVmaW5pdGlvbi5leHBsaWNpdCkgZXhwbGljaXQgPSBleHBsaWNpdC5jb25jYXQoZGVmaW5pdGlvbi5leHBsaWNpdCk7XG5cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgZXhjZXB0aW9uKCdTY2hlbWEuZXh0ZW5kIGFyZ3VtZW50IHNob3VsZCBiZSBhIFR5cGUsIFsgVHlwZSBdLCAnICtcbiAgICAgICdvciBhIHNjaGVtYSBkZWZpbml0aW9uICh7IGltcGxpY2l0OiBbLi4uXSwgZXhwbGljaXQ6IFsuLi5dIH0pJyk7XG4gIH1cblxuICBpbXBsaWNpdC5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlJDEpIHtcbiAgICBpZiAoISh0eXBlJDEgaW5zdGFuY2VvZiB0eXBlKSkge1xuICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbignU3BlY2lmaWVkIGxpc3Qgb2YgWUFNTCB0eXBlcyAob3IgYSBzaW5nbGUgVHlwZSBvYmplY3QpIGNvbnRhaW5zIGEgbm9uLVR5cGUgb2JqZWN0LicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlJDEubG9hZEtpbmQgJiYgdHlwZSQxLmxvYWRLaW5kICE9PSAnc2NhbGFyJykge1xuICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbignVGhlcmUgaXMgYSBub24tc2NhbGFyIHR5cGUgaW4gdGhlIGltcGxpY2l0IGxpc3Qgb2YgYSBzY2hlbWEuIEltcGxpY2l0IHJlc29sdmluZyBvZiBzdWNoIHR5cGVzIGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGUkMS5tdWx0aSkge1xuICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbignVGhlcmUgaXMgYSBtdWx0aSB0eXBlIGluIHRoZSBpbXBsaWNpdCBsaXN0IG9mIGEgc2NoZW1hLiBNdWx0aSB0YWdzIGNhbiBvbmx5IGJlIGxpc3RlZCBhcyBleHBsaWNpdC4nKTtcbiAgICB9XG4gIH0pO1xuXG4gIGV4cGxpY2l0LmZvckVhY2goZnVuY3Rpb24gKHR5cGUkMSkge1xuICAgIGlmICghKHR5cGUkMSBpbnN0YW5jZW9mIHR5cGUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uKCdTcGVjaWZpZWQgbGlzdCBvZiBZQU1MIHR5cGVzIChvciBhIHNpbmdsZSBUeXBlIG9iamVjdCkgY29udGFpbnMgYSBub24tVHlwZSBvYmplY3QuJyk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShTY2hlbWEkMS5wcm90b3R5cGUpO1xuXG4gIHJlc3VsdC5pbXBsaWNpdCA9ICh0aGlzLmltcGxpY2l0IHx8IFtdKS5jb25jYXQoaW1wbGljaXQpO1xuICByZXN1bHQuZXhwbGljaXQgPSAodGhpcy5leHBsaWNpdCB8fCBbXSkuY29uY2F0KGV4cGxpY2l0KTtcblxuICByZXN1bHQuY29tcGlsZWRJbXBsaWNpdCA9IGNvbXBpbGVMaXN0KHJlc3VsdCwgJ2ltcGxpY2l0Jyk7XG4gIHJlc3VsdC5jb21waWxlZEV4cGxpY2l0ID0gY29tcGlsZUxpc3QocmVzdWx0LCAnZXhwbGljaXQnKTtcbiAgcmVzdWx0LmNvbXBpbGVkVHlwZU1hcCAgPSBjb21waWxlTWFwKHJlc3VsdC5jb21waWxlZEltcGxpY2l0LCByZXN1bHQuY29tcGlsZWRFeHBsaWNpdCk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxudmFyIHNjaGVtYSA9IFNjaGVtYSQxO1xuXG52YXIgc3RyID0gbmV3IHR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOnN0cicsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkYXRhIDogJyc7IH1cbn0pO1xuXG52YXIgc2VxID0gbmV3IHR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOnNlcScsIHtcbiAga2luZDogJ3NlcXVlbmNlJyxcbiAgY29uc3RydWN0OiBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiBbXTsgfVxufSk7XG5cbnZhciBtYXAgPSBuZXcgdHlwZSgndGFnOnlhbWwub3JnLDIwMDI6bWFwJywge1xuICBraW5kOiAnbWFwcGluZycsXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkYXRhIDoge307IH1cbn0pO1xuXG52YXIgZmFpbHNhZmUgPSBuZXcgc2NoZW1hKHtcbiAgZXhwbGljaXQ6IFtcbiAgICBzdHIsXG4gICAgc2VxLFxuICAgIG1hcFxuICBdXG59KTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxOdWxsKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gIHZhciBtYXggPSBkYXRhLmxlbmd0aDtcblxuICByZXR1cm4gKG1heCA9PT0gMSAmJiBkYXRhID09PSAnficpIHx8XG4gICAgICAgICAobWF4ID09PSA0ICYmIChkYXRhID09PSAnbnVsbCcgfHwgZGF0YSA9PT0gJ051bGwnIHx8IGRhdGEgPT09ICdOVUxMJykpO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sTnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzTnVsbChvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdCA9PT0gbnVsbDtcbn1cblxudmFyIF9udWxsID0gbmV3IHR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOm51bGwnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbE51bGwsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbE51bGwsXG4gIHByZWRpY2F0ZTogaXNOdWxsLFxuICByZXByZXNlbnQ6IHtcbiAgICBjYW5vbmljYWw6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICd+JzsgICAgfSxcbiAgICBsb3dlcmNhc2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdudWxsJzsgfSxcbiAgICB1cHBlcmNhc2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdOVUxMJzsgfSxcbiAgICBjYW1lbGNhc2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdOdWxsJzsgfSxcbiAgICBlbXB0eTogICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuICcnOyAgICAgfVxuICB9LFxuICBkZWZhdWx0U3R5bGU6ICdsb3dlcmNhc2UnXG59KTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxCb29sZWFuKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICB2YXIgbWF4ID0gZGF0YS5sZW5ndGg7XG5cbiAgcmV0dXJuIChtYXggPT09IDQgJiYgKGRhdGEgPT09ICd0cnVlJyB8fCBkYXRhID09PSAnVHJ1ZScgfHwgZGF0YSA9PT0gJ1RSVUUnKSkgfHxcbiAgICAgICAgIChtYXggPT09IDUgJiYgKGRhdGEgPT09ICdmYWxzZScgfHwgZGF0YSA9PT0gJ0ZhbHNlJyB8fCBkYXRhID09PSAnRkFMU0UnKSk7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxCb29sZWFuKGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEgPT09ICd0cnVlJyB8fFxuICAgICAgICAgZGF0YSA9PT0gJ1RydWUnIHx8XG4gICAgICAgICBkYXRhID09PSAnVFJVRSc7XG59XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBCb29sZWFuXSc7XG59XG5cbnZhciBib29sID0gbmV3IHR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOmJvb2wnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbEJvb2xlYW4sXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbEJvb2xlYW4sXG4gIHByZWRpY2F0ZTogaXNCb29sZWFuLFxuICByZXByZXNlbnQ6IHtcbiAgICBsb3dlcmNhc2U6IGZ1bmN0aW9uIChvYmplY3QpIHsgcmV0dXJuIG9iamVjdCA/ICd0cnVlJyA6ICdmYWxzZSc7IH0sXG4gICAgdXBwZXJjYXNlOiBmdW5jdGlvbiAob2JqZWN0KSB7IHJldHVybiBvYmplY3QgPyAnVFJVRScgOiAnRkFMU0UnOyB9LFxuICAgIGNhbWVsY2FzZTogZnVuY3Rpb24gKG9iamVjdCkgeyByZXR1cm4gb2JqZWN0ID8gJ1RydWUnIDogJ0ZhbHNlJzsgfVxuICB9LFxuICBkZWZhdWx0U3R5bGU6ICdsb3dlcmNhc2UnXG59KTtcblxuZnVuY3Rpb24gaXNIZXhDb2RlKGMpIHtcbiAgcmV0dXJuICgoMHgzMC8qIDAgKi8gPD0gYykgJiYgKGMgPD0gMHgzOS8qIDkgKi8pKSB8fFxuICAgICAgICAgKCgweDQxLyogQSAqLyA8PSBjKSAmJiAoYyA8PSAweDQ2LyogRiAqLykpIHx8XG4gICAgICAgICAoKDB4NjEvKiBhICovIDw9IGMpICYmIChjIDw9IDB4NjYvKiBmICovKSk7XG59XG5cbmZ1bmN0aW9uIGlzT2N0Q29kZShjKSB7XG4gIHJldHVybiAoKDB4MzAvKiAwICovIDw9IGMpICYmIChjIDw9IDB4MzcvKiA3ICovKSk7XG59XG5cbmZ1bmN0aW9uIGlzRGVjQ29kZShjKSB7XG4gIHJldHVybiAoKDB4MzAvKiAwICovIDw9IGMpICYmIChjIDw9IDB4MzkvKiA5ICovKSk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sSW50ZWdlcihkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIG1heCA9IGRhdGEubGVuZ3RoLFxuICAgICAgaW5kZXggPSAwLFxuICAgICAgaGFzRGlnaXRzID0gZmFsc2UsXG4gICAgICBjaDtcblxuICBpZiAoIW1heCkgcmV0dXJuIGZhbHNlO1xuXG4gIGNoID0gZGF0YVtpbmRleF07XG5cbiAgLy8gc2lnblxuICBpZiAoY2ggPT09ICctJyB8fCBjaCA9PT0gJysnKSB7XG4gICAgY2ggPSBkYXRhWysraW5kZXhdO1xuICB9XG5cbiAgaWYgKGNoID09PSAnMCcpIHtcbiAgICAvLyAwXG4gICAgaWYgKGluZGV4ICsgMSA9PT0gbWF4KSByZXR1cm4gdHJ1ZTtcbiAgICBjaCA9IGRhdGFbKytpbmRleF07XG5cbiAgICAvLyBiYXNlIDIsIGJhc2UgOCwgYmFzZSAxNlxuXG4gICAgaWYgKGNoID09PSAnYicpIHtcbiAgICAgIC8vIGJhc2UgMlxuICAgICAgaW5kZXgrKztcblxuICAgICAgZm9yICg7IGluZGV4IDwgbWF4OyBpbmRleCsrKSB7XG4gICAgICAgIGNoID0gZGF0YVtpbmRleF07XG4gICAgICAgIGlmIChjaCA9PT0gJ18nKSBjb250aW51ZTtcbiAgICAgICAgaWYgKGNoICE9PSAnMCcgJiYgY2ggIT09ICcxJykgcmV0dXJuIGZhbHNlO1xuICAgICAgICBoYXNEaWdpdHMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc0RpZ2l0cyAmJiBjaCAhPT0gJ18nO1xuICAgIH1cblxuXG4gICAgaWYgKGNoID09PSAneCcpIHtcbiAgICAgIC8vIGJhc2UgMTZcbiAgICAgIGluZGV4Kys7XG5cbiAgICAgIGZvciAoOyBpbmRleCA8IG1heDsgaW5kZXgrKykge1xuICAgICAgICBjaCA9IGRhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoY2ggPT09ICdfJykgY29udGludWU7XG4gICAgICAgIGlmICghaXNIZXhDb2RlKGRhdGEuY2hhckNvZGVBdChpbmRleCkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGhhc0RpZ2l0cyA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzRGlnaXRzICYmIGNoICE9PSAnXyc7XG4gICAgfVxuXG5cbiAgICBpZiAoY2ggPT09ICdvJykge1xuICAgICAgLy8gYmFzZSA4XG4gICAgICBpbmRleCsrO1xuXG4gICAgICBmb3IgKDsgaW5kZXggPCBtYXg7IGluZGV4KyspIHtcbiAgICAgICAgY2ggPSBkYXRhW2luZGV4XTtcbiAgICAgICAgaWYgKGNoID09PSAnXycpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIWlzT2N0Q29kZShkYXRhLmNoYXJDb2RlQXQoaW5kZXgpKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBoYXNEaWdpdHMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc0RpZ2l0cyAmJiBjaCAhPT0gJ18nO1xuICAgIH1cbiAgfVxuXG4gIC8vIGJhc2UgMTAgKGV4Y2VwdCAwKVxuXG4gIC8vIHZhbHVlIHNob3VsZCBub3Qgc3RhcnQgd2l0aCBgX2A7XG4gIGlmIChjaCA9PT0gJ18nKSByZXR1cm4gZmFsc2U7XG5cbiAgZm9yICg7IGluZGV4IDwgbWF4OyBpbmRleCsrKSB7XG4gICAgY2ggPSBkYXRhW2luZGV4XTtcbiAgICBpZiAoY2ggPT09ICdfJykgY29udGludWU7XG4gICAgaWYgKCFpc0RlY0NvZGUoZGF0YS5jaGFyQ29kZUF0KGluZGV4KSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaGFzRGlnaXRzID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIFNob3VsZCBoYXZlIGRpZ2l0cyBhbmQgc2hvdWxkIG5vdCBlbmQgd2l0aCBgX2BcbiAgaWYgKCFoYXNEaWdpdHMgfHwgY2ggPT09ICdfJykgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sSW50ZWdlcihkYXRhKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGEsIHNpZ24gPSAxLCBjaDtcblxuICBpZiAodmFsdWUuaW5kZXhPZignXycpICE9PSAtMSkge1xuICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXy9nLCAnJyk7XG4gIH1cblxuICBjaCA9IHZhbHVlWzBdO1xuXG4gIGlmIChjaCA9PT0gJy0nIHx8IGNoID09PSAnKycpIHtcbiAgICBpZiAoY2ggPT09ICctJykgc2lnbiA9IC0xO1xuICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMSk7XG4gICAgY2ggPSB2YWx1ZVswXTtcbiAgfVxuXG4gIGlmICh2YWx1ZSA9PT0gJzAnKSByZXR1cm4gMDtcblxuICBpZiAoY2ggPT09ICcwJykge1xuICAgIGlmICh2YWx1ZVsxXSA9PT0gJ2InKSByZXR1cm4gc2lnbiAqIHBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCAyKTtcbiAgICBpZiAodmFsdWVbMV0gPT09ICd4JykgcmV0dXJuIHNpZ24gKiBwYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgMTYpO1xuICAgIGlmICh2YWx1ZVsxXSA9PT0gJ28nKSByZXR1cm4gc2lnbiAqIHBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCA4KTtcbiAgfVxuXG4gIHJldHVybiBzaWduICogcGFyc2VJbnQodmFsdWUsIDEwKTtcbn1cblxuZnVuY3Rpb24gaXNJbnRlZ2VyKG9iamVjdCkge1xuICByZXR1cm4gKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpKSA9PT0gJ1tvYmplY3QgTnVtYmVyXScgJiZcbiAgICAgICAgIChvYmplY3QgJSAxID09PSAwICYmICFjb21tb24uaXNOZWdhdGl2ZVplcm8ob2JqZWN0KSk7XG59XG5cbnZhciBpbnQgPSBuZXcgdHlwZSgndGFnOnlhbWwub3JnLDIwMDI6aW50Jywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxJbnRlZ2VyLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxJbnRlZ2VyLFxuICBwcmVkaWNhdGU6IGlzSW50ZWdlcixcbiAgcmVwcmVzZW50OiB7XG4gICAgYmluYXJ5OiAgICAgIGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiA+PSAwID8gJzBiJyArIG9iai50b1N0cmluZygyKSA6ICctMGInICsgb2JqLnRvU3RyaW5nKDIpLnNsaWNlKDEpOyB9LFxuICAgIG9jdGFsOiAgICAgICBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogPj0gMCA/ICcwbycgICsgb2JqLnRvU3RyaW5nKDgpIDogJy0wbycgICsgb2JqLnRvU3RyaW5nKDgpLnNsaWNlKDEpOyB9LFxuICAgIGRlY2ltYWw6ICAgICBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmoudG9TdHJpbmcoMTApOyB9LFxuICAgIC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cbiAgICBoZXhhZGVjaW1hbDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqID49IDAgPyAnMHgnICsgb2JqLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpIDogICctMHgnICsgb2JqLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpLnNsaWNlKDEpOyB9XG4gIH0sXG4gIGRlZmF1bHRTdHlsZTogJ2RlY2ltYWwnLFxuICBzdHlsZUFsaWFzZXM6IHtcbiAgICBiaW5hcnk6ICAgICAgWyAyLCAgJ2JpbicgXSxcbiAgICBvY3RhbDogICAgICAgWyA4LCAgJ29jdCcgXSxcbiAgICBkZWNpbWFsOiAgICAgWyAxMCwgJ2RlYycgXSxcbiAgICBoZXhhZGVjaW1hbDogWyAxNiwgJ2hleCcgXVxuICB9XG59KTtcblxudmFyIFlBTUxfRkxPQVRfUEFUVEVSTiA9IG5ldyBSZWdFeHAoXG4gIC8vIDIuNWU0LCAyLjUgYW5kIGludGVnZXJzXG4gICdeKD86Wy0rXT8oPzpbMC05XVswLTlfXSopKD86XFxcXC5bMC05X10qKT8oPzpbZUVdWy0rXT9bMC05XSspPycgK1xuICAvLyAuMmU0LCAuMlxuICAvLyBzcGVjaWFsIGNhc2UsIHNlZW1zIG5vdCBmcm9tIHNwZWNcbiAgJ3xcXFxcLlswLTlfXSsoPzpbZUVdWy0rXT9bMC05XSspPycgK1xuICAvLyAuaW5mXG4gICd8Wy0rXT9cXFxcLig/OmluZnxJbmZ8SU5GKScgK1xuICAvLyAubmFuXG4gICd8XFxcXC4oPzpuYW58TmFOfE5BTikpJCcpO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbEZsb2F0KGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICBpZiAoIVlBTUxfRkxPQVRfUEFUVEVSTi50ZXN0KGRhdGEpIHx8XG4gICAgICAvLyBRdWljayBoYWNrIHRvIG5vdCBhbGxvdyBpbnRlZ2VycyBlbmQgd2l0aCBgX2BcbiAgICAgIC8vIFByb2JhYmx5IHNob3VsZCB1cGRhdGUgcmVnZXhwICYgY2hlY2sgc3BlZWRcbiAgICAgIGRhdGFbZGF0YS5sZW5ndGggLSAxXSA9PT0gJ18nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxGbG9hdChkYXRhKSB7XG4gIHZhciB2YWx1ZSwgc2lnbjtcblxuICB2YWx1ZSAgPSBkYXRhLnJlcGxhY2UoL18vZywgJycpLnRvTG93ZXJDYXNlKCk7XG4gIHNpZ24gICA9IHZhbHVlWzBdID09PSAnLScgPyAtMSA6IDE7XG5cbiAgaWYgKCcrLScuaW5kZXhPZih2YWx1ZVswXSkgPj0gMCkge1xuICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMSk7XG4gIH1cblxuICBpZiAodmFsdWUgPT09ICcuaW5mJykge1xuICAgIHJldHVybiAoc2lnbiA9PT0gMSkgPyBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgOiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XG5cbiAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJy5uYW4nKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuICByZXR1cm4gc2lnbiAqIHBhcnNlRmxvYXQodmFsdWUsIDEwKTtcbn1cblxuXG52YXIgU0NJRU5USUZJQ19XSVRIT1VUX0RPVCA9IC9eWy0rXT9bMC05XStlLztcblxuZnVuY3Rpb24gcmVwcmVzZW50WWFtbEZsb2F0KG9iamVjdCwgc3R5bGUpIHtcbiAgdmFyIHJlcztcblxuICBpZiAoaXNOYU4ob2JqZWN0KSkge1xuICAgIHN3aXRjaCAoc3R5bGUpIHtcbiAgICAgIGNhc2UgJ2xvd2VyY2FzZSc6IHJldHVybiAnLm5hbic7XG4gICAgICBjYXNlICd1cHBlcmNhc2UnOiByZXR1cm4gJy5OQU4nO1xuICAgICAgY2FzZSAnY2FtZWxjYXNlJzogcmV0dXJuICcuTmFOJztcbiAgICB9XG4gIH0gZWxzZSBpZiAoTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZID09PSBvYmplY3QpIHtcbiAgICBzd2l0Y2ggKHN0eWxlKSB7XG4gICAgICBjYXNlICdsb3dlcmNhc2UnOiByZXR1cm4gJy5pbmYnO1xuICAgICAgY2FzZSAndXBwZXJjYXNlJzogcmV0dXJuICcuSU5GJztcbiAgICAgIGNhc2UgJ2NhbWVsY2FzZSc6IHJldHVybiAnLkluZic7XG4gICAgfVxuICB9IGVsc2UgaWYgKE51bWJlci5ORUdBVElWRV9JTkZJTklUWSA9PT0gb2JqZWN0KSB7XG4gICAgc3dpdGNoIChzdHlsZSkge1xuICAgICAgY2FzZSAnbG93ZXJjYXNlJzogcmV0dXJuICctLmluZic7XG4gICAgICBjYXNlICd1cHBlcmNhc2UnOiByZXR1cm4gJy0uSU5GJztcbiAgICAgIGNhc2UgJ2NhbWVsY2FzZSc6IHJldHVybiAnLS5JbmYnO1xuICAgIH1cbiAgfSBlbHNlIGlmIChjb21tb24uaXNOZWdhdGl2ZVplcm8ob2JqZWN0KSkge1xuICAgIHJldHVybiAnLTAuMCc7XG4gIH1cblxuICByZXMgPSBvYmplY3QudG9TdHJpbmcoMTApO1xuXG4gIC8vIEpTIHN0cmluZ2lmaWVyIGNhbiBidWlsZCBzY2llbnRpZmljIGZvcm1hdCB3aXRob3V0IGRvdHM6IDVlLTEwMCxcbiAgLy8gd2hpbGUgWUFNTCByZXF1cmVzIGRvdDogNS5lLTEwMC4gRml4IGl0IHdpdGggc2ltcGxlIGhhY2tcblxuICByZXR1cm4gU0NJRU5USUZJQ19XSVRIT1VUX0RPVC50ZXN0KHJlcykgPyByZXMucmVwbGFjZSgnZScsICcuZScpIDogcmVzO1xufVxuXG5mdW5jdGlvbiBpc0Zsb2F0KG9iamVjdCkge1xuICByZXR1cm4gKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBOdW1iZXJdJykgJiZcbiAgICAgICAgIChvYmplY3QgJSAxICE9PSAwIHx8IGNvbW1vbi5pc05lZ2F0aXZlWmVybyhvYmplY3QpKTtcbn1cblxudmFyIGZsb2F0ID0gbmV3IHR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0Jywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxGbG9hdCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sRmxvYXQsXG4gIHByZWRpY2F0ZTogaXNGbG9hdCxcbiAgcmVwcmVzZW50OiByZXByZXNlbnRZYW1sRmxvYXQsXG4gIGRlZmF1bHRTdHlsZTogJ2xvd2VyY2FzZSdcbn0pO1xuXG52YXIganNvbiA9IGZhaWxzYWZlLmV4dGVuZCh7XG4gIGltcGxpY2l0OiBbXG4gICAgX251bGwsXG4gICAgYm9vbCxcbiAgICBpbnQsXG4gICAgZmxvYXRcbiAgXVxufSk7XG5cbnZhciBjb3JlID0ganNvbjtcblxudmFyIFlBTUxfREFURV9SRUdFWFAgPSBuZXcgUmVnRXhwKFxuICAnXihbMC05XVswLTldWzAtOV1bMC05XSknICAgICAgICAgICsgLy8gWzFdIHllYXJcbiAgJy0oWzAtOV1bMC05XSknICAgICAgICAgICAgICAgICAgICArIC8vIFsyXSBtb250aFxuICAnLShbMC05XVswLTldKSQnKTsgICAgICAgICAgICAgICAgICAgLy8gWzNdIGRheVxuXG52YXIgWUFNTF9USU1FU1RBTVBfUkVHRVhQID0gbmV3IFJlZ0V4cChcbiAgJ14oWzAtOV1bMC05XVswLTldWzAtOV0pJyAgICAgICAgICArIC8vIFsxXSB5ZWFyXG4gICctKFswLTldWzAtOV0/KScgICAgICAgICAgICAgICAgICAgKyAvLyBbMl0gbW9udGhcbiAgJy0oWzAtOV1bMC05XT8pJyAgICAgICAgICAgICAgICAgICArIC8vIFszXSBkYXlcbiAgJyg/OltUdF18WyBcXFxcdF0rKScgICAgICAgICAgICAgICAgICsgLy8gLi4uXG4gICcoWzAtOV1bMC05XT8pJyAgICAgICAgICAgICAgICAgICAgKyAvLyBbNF0gaG91clxuICAnOihbMC05XVswLTldKScgICAgICAgICAgICAgICAgICAgICsgLy8gWzVdIG1pbnV0ZVxuICAnOihbMC05XVswLTldKScgICAgICAgICAgICAgICAgICAgICsgLy8gWzZdIHNlY29uZFxuICAnKD86XFxcXC4oWzAtOV0qKSk/JyAgICAgICAgICAgICAgICAgKyAvLyBbN10gZnJhY3Rpb25cbiAgJyg/OlsgXFxcXHRdKihafChbLStdKShbMC05XVswLTldPyknICsgLy8gWzhdIHR6IFs5XSB0el9zaWduIFsxMF0gdHpfaG91clxuICAnKD86OihbMC05XVswLTldKSk/KSk/JCcpOyAgICAgICAgICAgLy8gWzExXSB0el9taW51dGVcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxUaW1lc3RhbXAoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoWUFNTF9EQVRFX1JFR0VYUC5leGVjKGRhdGEpICE9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKFlBTUxfVElNRVNUQU1QX1JFR0VYUC5leGVjKGRhdGEpICE9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sVGltZXN0YW1wKGRhdGEpIHtcbiAgdmFyIG1hdGNoLCB5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgZnJhY3Rpb24gPSAwLFxuICAgICAgZGVsdGEgPSBudWxsLCB0el9ob3VyLCB0el9taW51dGUsIGRhdGU7XG5cbiAgbWF0Y2ggPSBZQU1MX0RBVEVfUkVHRVhQLmV4ZWMoZGF0YSk7XG4gIGlmIChtYXRjaCA9PT0gbnVsbCkgbWF0Y2ggPSBZQU1MX1RJTUVTVEFNUF9SRUdFWFAuZXhlYyhkYXRhKTtcblxuICBpZiAobWF0Y2ggPT09IG51bGwpIHRocm93IG5ldyBFcnJvcignRGF0ZSByZXNvbHZlIGVycm9yJyk7XG5cbiAgLy8gbWF0Y2g6IFsxXSB5ZWFyIFsyXSBtb250aCBbM10gZGF5XG5cbiAgeWVhciA9ICsobWF0Y2hbMV0pO1xuICBtb250aCA9ICsobWF0Y2hbMl0pIC0gMTsgLy8gSlMgbW9udGggc3RhcnRzIHdpdGggMFxuICBkYXkgPSArKG1hdGNoWzNdKTtcblxuICBpZiAoIW1hdGNoWzRdKSB7IC8vIG5vIGhvdXJcbiAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGgsIGRheSkpO1xuICB9XG5cbiAgLy8gbWF0Y2g6IFs0XSBob3VyIFs1XSBtaW51dGUgWzZdIHNlY29uZCBbN10gZnJhY3Rpb25cblxuICBob3VyID0gKyhtYXRjaFs0XSk7XG4gIG1pbnV0ZSA9ICsobWF0Y2hbNV0pO1xuICBzZWNvbmQgPSArKG1hdGNoWzZdKTtcblxuICBpZiAobWF0Y2hbN10pIHtcbiAgICBmcmFjdGlvbiA9IG1hdGNoWzddLnNsaWNlKDAsIDMpO1xuICAgIHdoaWxlIChmcmFjdGlvbi5sZW5ndGggPCAzKSB7IC8vIG1pbGxpLXNlY29uZHNcbiAgICAgIGZyYWN0aW9uICs9ICcwJztcbiAgICB9XG4gICAgZnJhY3Rpb24gPSArZnJhY3Rpb247XG4gIH1cblxuICAvLyBtYXRjaDogWzhdIHR6IFs5XSB0el9zaWduIFsxMF0gdHpfaG91ciBbMTFdIHR6X21pbnV0ZVxuXG4gIGlmIChtYXRjaFs5XSkge1xuICAgIHR6X2hvdXIgPSArKG1hdGNoWzEwXSk7XG4gICAgdHpfbWludXRlID0gKyhtYXRjaFsxMV0gfHwgMCk7XG4gICAgZGVsdGEgPSAodHpfaG91ciAqIDYwICsgdHpfbWludXRlKSAqIDYwMDAwOyAvLyBkZWx0YSBpbiBtaWxpLXNlY29uZHNcbiAgICBpZiAobWF0Y2hbOV0gPT09ICctJykgZGVsdGEgPSAtZGVsdGE7XG4gIH1cblxuICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIGZyYWN0aW9uKSk7XG5cbiAgaWYgKGRlbHRhKSBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgLSBkZWx0YSk7XG5cbiAgcmV0dXJuIGRhdGU7XG59XG5cbmZ1bmN0aW9uIHJlcHJlc2VudFlhbWxUaW1lc3RhbXAob2JqZWN0IC8qLCBzdHlsZSovKSB7XG4gIHJldHVybiBvYmplY3QudG9JU09TdHJpbmcoKTtcbn1cblxudmFyIHRpbWVzdGFtcCA9IG5ldyB0eXBlKCd0YWc6eWFtbC5vcmcsMjAwMjp0aW1lc3RhbXAnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbFRpbWVzdGFtcCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sVGltZXN0YW1wLFxuICBpbnN0YW5jZU9mOiBEYXRlLFxuICByZXByZXNlbnQ6IHJlcHJlc2VudFlhbWxUaW1lc3RhbXBcbn0pO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbE1lcmdlKGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEgPT09ICc8PCcgfHwgZGF0YSA9PT0gbnVsbDtcbn1cblxudmFyIG1lcmdlID0gbmV3IHR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOm1lcmdlJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxNZXJnZVxufSk7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSovXG5cblxuXG5cblxuLy8gWyA2NCwgNjUsIDY2IF0gLT4gWyBwYWRkaW5nLCBDUiwgTEYgXVxudmFyIEJBU0U2NF9NQVAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cXG5cXHInO1xuXG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sQmluYXJ5KGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICB2YXIgY29kZSwgaWR4LCBiaXRsZW4gPSAwLCBtYXggPSBkYXRhLmxlbmd0aCwgbWFwID0gQkFTRTY0X01BUDtcblxuICAvLyBDb252ZXJ0IG9uZSBieSBvbmUuXG4gIGZvciAoaWR4ID0gMDsgaWR4IDwgbWF4OyBpZHgrKykge1xuICAgIGNvZGUgPSBtYXAuaW5kZXhPZihkYXRhLmNoYXJBdChpZHgpKTtcblxuICAgIC8vIFNraXAgQ1IvTEZcbiAgICBpZiAoY29kZSA+IDY0KSBjb250aW51ZTtcblxuICAgIC8vIEZhaWwgb24gaWxsZWdhbCBjaGFyYWN0ZXJzXG4gICAgaWYgKGNvZGUgPCAwKSByZXR1cm4gZmFsc2U7XG5cbiAgICBiaXRsZW4gKz0gNjtcbiAgfVxuXG4gIC8vIElmIHRoZXJlIGFyZSBhbnkgYml0cyBsZWZ0LCBzb3VyY2Ugd2FzIGNvcnJ1cHRlZFxuICByZXR1cm4gKGJpdGxlbiAlIDgpID09PSAwO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sQmluYXJ5KGRhdGEpIHtcbiAgdmFyIGlkeCwgdGFpbGJpdHMsXG4gICAgICBpbnB1dCA9IGRhdGEucmVwbGFjZSgvW1xcclxcbj1dL2csICcnKSwgLy8gcmVtb3ZlIENSL0xGICYgcGFkZGluZyB0byBzaW1wbGlmeSBzY2FuXG4gICAgICBtYXggPSBpbnB1dC5sZW5ndGgsXG4gICAgICBtYXAgPSBCQVNFNjRfTUFQLFxuICAgICAgYml0cyA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICAvLyBDb2xsZWN0IGJ5IDYqNCBiaXRzICgzIGJ5dGVzKVxuXG4gIGZvciAoaWR4ID0gMDsgaWR4IDwgbWF4OyBpZHgrKykge1xuICAgIGlmICgoaWR4ICUgNCA9PT0gMCkgJiYgaWR4KSB7XG4gICAgICByZXN1bHQucHVzaCgoYml0cyA+PiAxNikgJiAweEZGKTtcbiAgICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDgpICYgMHhGRik7XG4gICAgICByZXN1bHQucHVzaChiaXRzICYgMHhGRik7XG4gICAgfVxuXG4gICAgYml0cyA9IChiaXRzIDw8IDYpIHwgbWFwLmluZGV4T2YoaW5wdXQuY2hhckF0KGlkeCkpO1xuICB9XG5cbiAgLy8gRHVtcCB0YWlsXG5cbiAgdGFpbGJpdHMgPSAobWF4ICUgNCkgKiA2O1xuXG4gIGlmICh0YWlsYml0cyA9PT0gMCkge1xuICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDE2KSAmIDB4RkYpO1xuICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDgpICYgMHhGRik7XG4gICAgcmVzdWx0LnB1c2goYml0cyAmIDB4RkYpO1xuICB9IGVsc2UgaWYgKHRhaWxiaXRzID09PSAxOCkge1xuICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDEwKSAmIDB4RkYpO1xuICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDIpICYgMHhGRik7XG4gIH0gZWxzZSBpZiAodGFpbGJpdHMgPT09IDEyKSB7XG4gICAgcmVzdWx0LnB1c2goKGJpdHMgPj4gNCkgJiAweEZGKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVWludDhBcnJheShyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiByZXByZXNlbnRZYW1sQmluYXJ5KG9iamVjdCAvKiwgc3R5bGUqLykge1xuICB2YXIgcmVzdWx0ID0gJycsIGJpdHMgPSAwLCBpZHgsIHRhaWwsXG4gICAgICBtYXggPSBvYmplY3QubGVuZ3RoLFxuICAgICAgbWFwID0gQkFTRTY0X01BUDtcblxuICAvLyBDb252ZXJ0IGV2ZXJ5IHRocmVlIGJ5dGVzIHRvIDQgQVNDSUkgY2hhcmFjdGVycy5cblxuICBmb3IgKGlkeCA9IDA7IGlkeCA8IG1heDsgaWR4KyspIHtcbiAgICBpZiAoKGlkeCAlIDMgPT09IDApICYmIGlkeCkge1xuICAgICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxOCkgJiAweDNGXTtcbiAgICAgIHJlc3VsdCArPSBtYXBbKGJpdHMgPj4gMTIpICYgMHgzRl07XG4gICAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDYpICYgMHgzRl07XG4gICAgICByZXN1bHQgKz0gbWFwW2JpdHMgJiAweDNGXTtcbiAgICB9XG5cbiAgICBiaXRzID0gKGJpdHMgPDwgOCkgKyBvYmplY3RbaWR4XTtcbiAgfVxuXG4gIC8vIER1bXAgdGFpbFxuXG4gIHRhaWwgPSBtYXggJSAzO1xuXG4gIGlmICh0YWlsID09PSAwKSB7XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxOCkgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDEyKSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbKGJpdHMgPj4gNikgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwW2JpdHMgJiAweDNGXTtcbiAgfSBlbHNlIGlmICh0YWlsID09PSAyKSB7XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxMCkgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDQpICYgMHgzRl07XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA8PCAyKSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICB9IGVsc2UgaWYgKHRhaWwgPT09IDEpIHtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDIpICYgMHgzRl07XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA8PCA0KSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gaXNCaW5hcnkob2JqKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gICdbb2JqZWN0IFVpbnQ4QXJyYXldJztcbn1cblxudmFyIGJpbmFyeSA9IG5ldyB0eXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpiaW5hcnknLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbEJpbmFyeSxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sQmluYXJ5LFxuICBwcmVkaWNhdGU6IGlzQmluYXJ5LFxuICByZXByZXNlbnQ6IHJlcHJlc2VudFlhbWxCaW5hcnlcbn0pO1xuXG52YXIgX2hhc093blByb3BlcnR5JDMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF90b1N0cmluZyQyICAgICAgID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxPbWFwKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gIHZhciBvYmplY3RLZXlzID0gW10sIGluZGV4LCBsZW5ndGgsIHBhaXIsIHBhaXJLZXksIHBhaXJIYXNLZXksXG4gICAgICBvYmplY3QgPSBkYXRhO1xuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBvYmplY3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHBhaXIgPSBvYmplY3RbaW5kZXhdO1xuICAgIHBhaXJIYXNLZXkgPSBmYWxzZTtcblxuICAgIGlmIChfdG9TdHJpbmckMi5jYWxsKHBhaXIpICE9PSAnW29iamVjdCBPYmplY3RdJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChwYWlyS2V5IGluIHBhaXIpIHtcbiAgICAgIGlmIChfaGFzT3duUHJvcGVydHkkMy5jYWxsKHBhaXIsIHBhaXJLZXkpKSB7XG4gICAgICAgIGlmICghcGFpckhhc0tleSkgcGFpckhhc0tleSA9IHRydWU7XG4gICAgICAgIGVsc2UgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcGFpckhhc0tleSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKG9iamVjdEtleXMuaW5kZXhPZihwYWlyS2V5KSA9PT0gLTEpIG9iamVjdEtleXMucHVzaChwYWlyS2V5KTtcbiAgICBlbHNlIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sT21hcChkYXRhKSB7XG4gIHJldHVybiBkYXRhICE9PSBudWxsID8gZGF0YSA6IFtdO1xufVxuXG52YXIgb21hcCA9IG5ldyB0eXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpvbWFwJywge1xuICBraW5kOiAnc2VxdWVuY2UnLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbE9tYXAsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbE9tYXBcbn0pO1xuXG52YXIgX3RvU3RyaW5nJDEgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbFBhaXJzKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gIHZhciBpbmRleCwgbGVuZ3RoLCBwYWlyLCBrZXlzLCByZXN1bHQsXG4gICAgICBvYmplY3QgPSBkYXRhO1xuXG4gIHJlc3VsdCA9IG5ldyBBcnJheShvYmplY3QubGVuZ3RoKTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBwYWlyID0gb2JqZWN0W2luZGV4XTtcblxuICAgIGlmIChfdG9TdHJpbmckMS5jYWxsKHBhaXIpICE9PSAnW29iamVjdCBPYmplY3RdJykgcmV0dXJuIGZhbHNlO1xuXG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHBhaXIpO1xuXG4gICAgaWYgKGtleXMubGVuZ3RoICE9PSAxKSByZXR1cm4gZmFsc2U7XG5cbiAgICByZXN1bHRbaW5kZXhdID0gWyBrZXlzWzBdLCBwYWlyW2tleXNbMF1dIF07XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbFBhaXJzKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBbXTtcblxuICB2YXIgaW5kZXgsIGxlbmd0aCwgcGFpciwga2V5cywgcmVzdWx0LFxuICAgICAgb2JqZWN0ID0gZGF0YTtcblxuICByZXN1bHQgPSBuZXcgQXJyYXkob2JqZWN0Lmxlbmd0aCk7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgcGFpciA9IG9iamVjdFtpbmRleF07XG5cbiAgICBrZXlzID0gT2JqZWN0LmtleXMocGFpcik7XG5cbiAgICByZXN1bHRbaW5kZXhdID0gWyBrZXlzWzBdLCBwYWlyW2tleXNbMF1dIF07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgcGFpcnMgPSBuZXcgdHlwZSgndGFnOnlhbWwub3JnLDIwMDI6cGFpcnMnLCB7XG4gIGtpbmQ6ICdzZXF1ZW5jZScsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sUGFpcnMsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbFBhaXJzXG59KTtcblxudmFyIF9oYXNPd25Qcm9wZXJ0eSQyID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxTZXQoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIHRydWU7XG5cbiAgdmFyIGtleSwgb2JqZWN0ID0gZGF0YTtcblxuICBmb3IgKGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoX2hhc093blByb3BlcnR5JDIuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgIGlmIChvYmplY3Rba2V5XSAhPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sU2V0KGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkYXRhIDoge307XG59XG5cbnZhciBzZXQgPSBuZXcgdHlwZSgndGFnOnlhbWwub3JnLDIwMDI6c2V0Jywge1xuICBraW5kOiAnbWFwcGluZycsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sU2V0LFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxTZXRcbn0pO1xuXG52YXIgX2RlZmF1bHQgPSBjb3JlLmV4dGVuZCh7XG4gIGltcGxpY2l0OiBbXG4gICAgdGltZXN0YW1wLFxuICAgIG1lcmdlXG4gIF0sXG4gIGV4cGxpY2l0OiBbXG4gICAgYmluYXJ5LFxuICAgIG9tYXAsXG4gICAgcGFpcnMsXG4gICAgc2V0XG4gIF1cbn0pO1xuXG4vKmVzbGludC1kaXNhYmxlIG1heC1sZW4sbm8tdXNlLWJlZm9yZS1kZWZpbmUqL1xuXG5cblxuXG5cblxuXG52YXIgX2hhc093blByb3BlcnR5JDEgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5cbnZhciBDT05URVhUX0ZMT1dfSU4gICA9IDE7XG52YXIgQ09OVEVYVF9GTE9XX09VVCAgPSAyO1xudmFyIENPTlRFWFRfQkxPQ0tfSU4gID0gMztcbnZhciBDT05URVhUX0JMT0NLX09VVCA9IDQ7XG5cblxudmFyIENIT01QSU5HX0NMSVAgID0gMTtcbnZhciBDSE9NUElOR19TVFJJUCA9IDI7XG52YXIgQ0hPTVBJTkdfS0VFUCAgPSAzO1xuXG5cbnZhciBQQVRURVJOX05PTl9QUklOVEFCTEUgICAgICAgICA9IC9bXFx4MDAtXFx4MDhcXHgwQlxceDBDXFx4MEUtXFx4MUZcXHg3Ri1cXHg4NFxceDg2LVxceDlGXFx1RkZGRVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdLztcbnZhciBQQVRURVJOX05PTl9BU0NJSV9MSU5FX0JSRUFLUyA9IC9bXFx4ODVcXHUyMDI4XFx1MjAyOV0vO1xudmFyIFBBVFRFUk5fRkxPV19JTkRJQ0FUT1JTICAgICAgID0gL1ssXFxbXFxdXFx7XFx9XS87XG52YXIgUEFUVEVSTl9UQUdfSEFORExFICAgICAgICAgICAgPSAvXig/OiF8ISF8IVthLXpcXC1dKyEpJC9pO1xudmFyIFBBVFRFUk5fVEFHX1VSSSAgICAgICAgICAgICAgID0gL14oPzohfFteLFxcW1xcXVxce1xcfV0pKD86JVswLTlhLWZdezJ9fFswLTlhLXpcXC0jO1xcL1xcPzpAJj1cXCtcXCQsX1xcLiF+XFwqJ1xcKFxcKVxcW1xcXV0pKiQvaTtcblxuXG5mdW5jdGlvbiBfY2xhc3Mob2JqKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKTsgfVxuXG5mdW5jdGlvbiBpc19FT0woYykge1xuICByZXR1cm4gKGMgPT09IDB4MEEvKiBMRiAqLykgfHwgKGMgPT09IDB4MEQvKiBDUiAqLyk7XG59XG5cbmZ1bmN0aW9uIGlzX1dISVRFX1NQQUNFKGMpIHtcbiAgcmV0dXJuIChjID09PSAweDA5LyogVGFiICovKSB8fCAoYyA9PT0gMHgyMC8qIFNwYWNlICovKTtcbn1cblxuZnVuY3Rpb24gaXNfV1NfT1JfRU9MKGMpIHtcbiAgcmV0dXJuIChjID09PSAweDA5LyogVGFiICovKSB8fFxuICAgICAgICAgKGMgPT09IDB4MjAvKiBTcGFjZSAqLykgfHxcbiAgICAgICAgIChjID09PSAweDBBLyogTEYgKi8pIHx8XG4gICAgICAgICAoYyA9PT0gMHgwRC8qIENSICovKTtcbn1cblxuZnVuY3Rpb24gaXNfRkxPV19JTkRJQ0FUT1IoYykge1xuICByZXR1cm4gYyA9PT0gMHgyQy8qICwgKi8gfHxcbiAgICAgICAgIGMgPT09IDB4NUIvKiBbICovIHx8XG4gICAgICAgICBjID09PSAweDVELyogXSAqLyB8fFxuICAgICAgICAgYyA9PT0gMHg3Qi8qIHsgKi8gfHxcbiAgICAgICAgIGMgPT09IDB4N0QvKiB9ICovO1xufVxuXG5mdW5jdGlvbiBmcm9tSGV4Q29kZShjKSB7XG4gIHZhciBsYztcblxuICBpZiAoKDB4MzAvKiAwICovIDw9IGMpICYmIChjIDw9IDB4MzkvKiA5ICovKSkge1xuICAgIHJldHVybiBjIC0gMHgzMDtcbiAgfVxuXG4gIC8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSovXG4gIGxjID0gYyB8IDB4MjA7XG5cbiAgaWYgKCgweDYxLyogYSAqLyA8PSBsYykgJiYgKGxjIDw9IDB4NjYvKiBmICovKSkge1xuICAgIHJldHVybiBsYyAtIDB4NjEgKyAxMDtcbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gZXNjYXBlZEhleExlbihjKSB7XG4gIGlmIChjID09PSAweDc4LyogeCAqLykgeyByZXR1cm4gMjsgfVxuICBpZiAoYyA9PT0gMHg3NS8qIHUgKi8pIHsgcmV0dXJuIDQ7IH1cbiAgaWYgKGMgPT09IDB4NTUvKiBVICovKSB7IHJldHVybiA4OyB9XG4gIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBmcm9tRGVjaW1hbENvZGUoYykge1xuICBpZiAoKDB4MzAvKiAwICovIDw9IGMpICYmIChjIDw9IDB4MzkvKiA5ICovKSkge1xuICAgIHJldHVybiBjIC0gMHgzMDtcbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gc2ltcGxlRXNjYXBlU2VxdWVuY2UoYykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBpbmRlbnQgKi9cbiAgcmV0dXJuIChjID09PSAweDMwLyogMCAqLykgPyAnXFx4MDAnIDpcbiAgICAgICAgKGMgPT09IDB4NjEvKiBhICovKSA/ICdcXHgwNycgOlxuICAgICAgICAoYyA9PT0gMHg2Mi8qIGIgKi8pID8gJ1xceDA4JyA6XG4gICAgICAgIChjID09PSAweDc0LyogdCAqLykgPyAnXFx4MDknIDpcbiAgICAgICAgKGMgPT09IDB4MDkvKiBUYWIgKi8pID8gJ1xceDA5JyA6XG4gICAgICAgIChjID09PSAweDZFLyogbiAqLykgPyAnXFx4MEEnIDpcbiAgICAgICAgKGMgPT09IDB4NzYvKiB2ICovKSA/ICdcXHgwQicgOlxuICAgICAgICAoYyA9PT0gMHg2Ni8qIGYgKi8pID8gJ1xceDBDJyA6XG4gICAgICAgIChjID09PSAweDcyLyogciAqLykgPyAnXFx4MEQnIDpcbiAgICAgICAgKGMgPT09IDB4NjUvKiBlICovKSA/ICdcXHgxQicgOlxuICAgICAgICAoYyA9PT0gMHgyMC8qIFNwYWNlICovKSA/ICcgJyA6XG4gICAgICAgIChjID09PSAweDIyLyogXCIgKi8pID8gJ1xceDIyJyA6XG4gICAgICAgIChjID09PSAweDJGLyogLyAqLykgPyAnLycgOlxuICAgICAgICAoYyA9PT0gMHg1Qy8qIFxcICovKSA/ICdcXHg1QycgOlxuICAgICAgICAoYyA9PT0gMHg0RS8qIE4gKi8pID8gJ1xceDg1JyA6XG4gICAgICAgIChjID09PSAweDVGLyogXyAqLykgPyAnXFx4QTAnIDpcbiAgICAgICAgKGMgPT09IDB4NEMvKiBMICovKSA/ICdcXHUyMDI4JyA6XG4gICAgICAgIChjID09PSAweDUwLyogUCAqLykgPyAnXFx1MjAyOScgOiAnJztcbn1cblxuZnVuY3Rpb24gY2hhckZyb21Db2RlcG9pbnQoYykge1xuICBpZiAoYyA8PSAweEZGRkYpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgfVxuICAvLyBFbmNvZGUgVVRGLTE2IHN1cnJvZ2F0ZSBwYWlyXG4gIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1VURi0xNiNDb2RlX3BvaW50c19VLjJCMDEwMDAwX3RvX1UuMkIxMEZGRkZcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoXG4gICAgKChjIC0gMHgwMTAwMDApID4+IDEwKSArIDB4RDgwMCxcbiAgICAoKGMgLSAweDAxMDAwMCkgJiAweDAzRkYpICsgMHhEQzAwXG4gICk7XG59XG5cbnZhciBzaW1wbGVFc2NhcGVDaGVjayA9IG5ldyBBcnJheSgyNTYpOyAvLyBpbnRlZ2VyLCBmb3IgZmFzdCBhY2Nlc3NcbnZhciBzaW1wbGVFc2NhcGVNYXAgPSBuZXcgQXJyYXkoMjU2KTtcbmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcbiAgc2ltcGxlRXNjYXBlQ2hlY2tbaV0gPSBzaW1wbGVFc2NhcGVTZXF1ZW5jZShpKSA/IDEgOiAwO1xuICBzaW1wbGVFc2NhcGVNYXBbaV0gPSBzaW1wbGVFc2NhcGVTZXF1ZW5jZShpKTtcbn1cblxuXG5mdW5jdGlvbiBTdGF0ZSQxKGlucHV0LCBvcHRpb25zKSB7XG4gIHRoaXMuaW5wdXQgPSBpbnB1dDtcblxuICB0aGlzLmZpbGVuYW1lICA9IG9wdGlvbnNbJ2ZpbGVuYW1lJ10gIHx8IG51bGw7XG4gIHRoaXMuc2NoZW1hICAgID0gb3B0aW9uc1snc2NoZW1hJ10gICAgfHwgX2RlZmF1bHQ7XG4gIHRoaXMub25XYXJuaW5nID0gb3B0aW9uc1snb25XYXJuaW5nJ10gfHwgbnVsbDtcbiAgLy8gKEhpZGRlbikgUmVtb3ZlPyBtYWtlcyB0aGUgbG9hZGVyIHRvIGV4cGVjdCBZQU1MIDEuMSBkb2N1bWVudHNcbiAgLy8gaWYgc3VjaCBkb2N1bWVudHMgaGF2ZSBubyBleHBsaWNpdCAlWUFNTCBkaXJlY3RpdmVcbiAgdGhpcy5sZWdhY3kgICAgPSBvcHRpb25zWydsZWdhY3knXSAgICB8fCBmYWxzZTtcblxuICB0aGlzLmpzb24gICAgICA9IG9wdGlvbnNbJ2pzb24nXSAgICAgIHx8IGZhbHNlO1xuICB0aGlzLmxpc3RlbmVyICA9IG9wdGlvbnNbJ2xpc3RlbmVyJ10gIHx8IG51bGw7XG5cbiAgdGhpcy5pbXBsaWNpdFR5cGVzID0gdGhpcy5zY2hlbWEuY29tcGlsZWRJbXBsaWNpdDtcbiAgdGhpcy50eXBlTWFwICAgICAgID0gdGhpcy5zY2hlbWEuY29tcGlsZWRUeXBlTWFwO1xuXG4gIHRoaXMubGVuZ3RoICAgICA9IGlucHV0Lmxlbmd0aDtcbiAgdGhpcy5wb3NpdGlvbiAgID0gMDtcbiAgdGhpcy5saW5lICAgICAgID0gMDtcbiAgdGhpcy5saW5lU3RhcnQgID0gMDtcbiAgdGhpcy5saW5lSW5kZW50ID0gMDtcblxuICAvLyBwb3NpdGlvbiBvZiBmaXJzdCBsZWFkaW5nIHRhYiBpbiB0aGUgY3VycmVudCBsaW5lLFxuICAvLyB1c2VkIHRvIG1ha2Ugc3VyZSB0aGVyZSBhcmUgbm8gdGFicyBpbiB0aGUgaW5kZW50YXRpb25cbiAgdGhpcy5maXJzdFRhYkluTGluZSA9IC0xO1xuXG4gIHRoaXMuZG9jdW1lbnRzID0gW107XG5cbiAgLypcbiAgdGhpcy52ZXJzaW9uO1xuICB0aGlzLmNoZWNrTGluZUJyZWFrcztcbiAgdGhpcy50YWdNYXA7XG4gIHRoaXMuYW5jaG9yTWFwO1xuICB0aGlzLnRhZztcbiAgdGhpcy5hbmNob3I7XG4gIHRoaXMua2luZDtcbiAgdGhpcy5yZXN1bHQ7Ki9cblxufVxuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlRXJyb3Ioc3RhdGUsIG1lc3NhZ2UpIHtcbiAgdmFyIG1hcmsgPSB7XG4gICAgbmFtZTogICAgIHN0YXRlLmZpbGVuYW1lLFxuICAgIGJ1ZmZlcjogICBzdGF0ZS5pbnB1dC5zbGljZSgwLCAtMSksIC8vIG9taXQgdHJhaWxpbmcgXFwwXG4gICAgcG9zaXRpb246IHN0YXRlLnBvc2l0aW9uLFxuICAgIGxpbmU6ICAgICBzdGF0ZS5saW5lLFxuICAgIGNvbHVtbjogICBzdGF0ZS5wb3NpdGlvbiAtIHN0YXRlLmxpbmVTdGFydFxuICB9O1xuXG4gIG1hcmsuc25pcHBldCA9IHNuaXBwZXQobWFyayk7XG5cbiAgcmV0dXJuIG5ldyBleGNlcHRpb24obWVzc2FnZSwgbWFyayk7XG59XG5cbmZ1bmN0aW9uIHRocm93RXJyb3Ioc3RhdGUsIG1lc3NhZ2UpIHtcbiAgdGhyb3cgZ2VuZXJhdGVFcnJvcihzdGF0ZSwgbWVzc2FnZSk7XG59XG5cbmZ1bmN0aW9uIHRocm93V2FybmluZyhzdGF0ZSwgbWVzc2FnZSkge1xuICBpZiAoc3RhdGUub25XYXJuaW5nKSB7XG4gICAgc3RhdGUub25XYXJuaW5nLmNhbGwobnVsbCwgZ2VuZXJhdGVFcnJvcihzdGF0ZSwgbWVzc2FnZSkpO1xuICB9XG59XG5cblxudmFyIGRpcmVjdGl2ZUhhbmRsZXJzID0ge1xuXG4gIFlBTUw6IGZ1bmN0aW9uIGhhbmRsZVlhbWxEaXJlY3RpdmUoc3RhdGUsIG5hbWUsIGFyZ3MpIHtcblxuICAgIHZhciBtYXRjaCwgbWFqb3IsIG1pbm9yO1xuXG4gICAgaWYgKHN0YXRlLnZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdkdXBsaWNhdGlvbiBvZiAlWUFNTCBkaXJlY3RpdmUnKTtcbiAgICB9XG5cbiAgICBpZiAoYXJncy5sZW5ndGggIT09IDEpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdZQU1MIGRpcmVjdGl2ZSBhY2NlcHRzIGV4YWN0bHkgb25lIGFyZ3VtZW50Jyk7XG4gICAgfVxuXG4gICAgbWF0Y2ggPSAvXihbMC05XSspXFwuKFswLTldKykkLy5leGVjKGFyZ3NbMF0pO1xuXG4gICAgaWYgKG1hdGNoID09PSBudWxsKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnaWxsLWZvcm1lZCBhcmd1bWVudCBvZiB0aGUgWUFNTCBkaXJlY3RpdmUnKTtcbiAgICB9XG5cbiAgICBtYWpvciA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XG4gICAgbWlub3IgPSBwYXJzZUludChtYXRjaFsyXSwgMTApO1xuXG4gICAgaWYgKG1ham9yICE9PSAxKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5hY2NlcHRhYmxlIFlBTUwgdmVyc2lvbiBvZiB0aGUgZG9jdW1lbnQnKTtcbiAgICB9XG5cbiAgICBzdGF0ZS52ZXJzaW9uID0gYXJnc1swXTtcbiAgICBzdGF0ZS5jaGVja0xpbmVCcmVha3MgPSAobWlub3IgPCAyKTtcblxuICAgIGlmIChtaW5vciAhPT0gMSAmJiBtaW5vciAhPT0gMikge1xuICAgICAgdGhyb3dXYXJuaW5nKHN0YXRlLCAndW5zdXBwb3J0ZWQgWUFNTCB2ZXJzaW9uIG9mIHRoZSBkb2N1bWVudCcpO1xuICAgIH1cbiAgfSxcblxuICBUQUc6IGZ1bmN0aW9uIGhhbmRsZVRhZ0RpcmVjdGl2ZShzdGF0ZSwgbmFtZSwgYXJncykge1xuXG4gICAgdmFyIGhhbmRsZSwgcHJlZml4O1xuXG4gICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAyKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnVEFHIGRpcmVjdGl2ZSBhY2NlcHRzIGV4YWN0bHkgdHdvIGFyZ3VtZW50cycpO1xuICAgIH1cblxuICAgIGhhbmRsZSA9IGFyZ3NbMF07XG4gICAgcHJlZml4ID0gYXJnc1sxXTtcblxuICAgIGlmICghUEFUVEVSTl9UQUdfSEFORExFLnRlc3QoaGFuZGxlKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2lsbC1mb3JtZWQgdGFnIGhhbmRsZSAoZmlyc3QgYXJndW1lbnQpIG9mIHRoZSBUQUcgZGlyZWN0aXZlJyk7XG4gICAgfVxuXG4gICAgaWYgKF9oYXNPd25Qcm9wZXJ0eSQxLmNhbGwoc3RhdGUudGFnTWFwLCBoYW5kbGUpKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGhlcmUgaXMgYSBwcmV2aW91c2x5IGRlY2xhcmVkIHN1ZmZpeCBmb3IgXCInICsgaGFuZGxlICsgJ1wiIHRhZyBoYW5kbGUnKTtcbiAgICB9XG5cbiAgICBpZiAoIVBBVFRFUk5fVEFHX1VSSS50ZXN0KHByZWZpeCkpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdpbGwtZm9ybWVkIHRhZyBwcmVmaXggKHNlY29uZCBhcmd1bWVudCkgb2YgdGhlIFRBRyBkaXJlY3RpdmUnKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcHJlZml4ID0gZGVjb2RlVVJJQ29tcG9uZW50KHByZWZpeCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGFnIHByZWZpeCBpcyBtYWxmb3JtZWQ6ICcgKyBwcmVmaXgpO1xuICAgIH1cblxuICAgIHN0YXRlLnRhZ01hcFtoYW5kbGVdID0gcHJlZml4O1xuICB9XG59O1xuXG5cbmZ1bmN0aW9uIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBzdGFydCwgZW5kLCBjaGVja0pzb24pIHtcbiAgdmFyIF9wb3NpdGlvbiwgX2xlbmd0aCwgX2NoYXJhY3RlciwgX3Jlc3VsdDtcblxuICBpZiAoc3RhcnQgPCBlbmQpIHtcbiAgICBfcmVzdWx0ID0gc3RhdGUuaW5wdXQuc2xpY2Uoc3RhcnQsIGVuZCk7XG5cbiAgICBpZiAoY2hlY2tKc29uKSB7XG4gICAgICBmb3IgKF9wb3NpdGlvbiA9IDAsIF9sZW5ndGggPSBfcmVzdWx0Lmxlbmd0aDsgX3Bvc2l0aW9uIDwgX2xlbmd0aDsgX3Bvc2l0aW9uICs9IDEpIHtcbiAgICAgICAgX2NoYXJhY3RlciA9IF9yZXN1bHQuY2hhckNvZGVBdChfcG9zaXRpb24pO1xuICAgICAgICBpZiAoIShfY2hhcmFjdGVyID09PSAweDA5IHx8XG4gICAgICAgICAgICAgICgweDIwIDw9IF9jaGFyYWN0ZXIgJiYgX2NoYXJhY3RlciA8PSAweDEwRkZGRikpKSB7XG4gICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2V4cGVjdGVkIHZhbGlkIEpTT04gY2hhcmFjdGVyJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFBBVFRFUk5fTk9OX1BSSU5UQUJMRS50ZXN0KF9yZXN1bHQpKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGhlIHN0cmVhbSBjb250YWlucyBub24tcHJpbnRhYmxlIGNoYXJhY3RlcnMnKTtcbiAgICB9XG5cbiAgICBzdGF0ZS5yZXN1bHQgKz0gX3Jlc3VsdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZU1hcHBpbmdzKHN0YXRlLCBkZXN0aW5hdGlvbiwgc291cmNlLCBvdmVycmlkYWJsZUtleXMpIHtcbiAgdmFyIHNvdXJjZUtleXMsIGtleSwgaW5kZXgsIHF1YW50aXR5O1xuXG4gIGlmICghY29tbW9uLmlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnY2Fubm90IG1lcmdlIG1hcHBpbmdzOyB0aGUgcHJvdmlkZWQgc291cmNlIG9iamVjdCBpcyB1bmFjY2VwdGFibGUnKTtcbiAgfVxuXG4gIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gIGZvciAoaW5kZXggPSAwLCBxdWFudGl0eSA9IHNvdXJjZUtleXMubGVuZ3RoOyBpbmRleCA8IHF1YW50aXR5OyBpbmRleCArPSAxKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpbmRleF07XG5cbiAgICBpZiAoIV9oYXNPd25Qcm9wZXJ0eSQxLmNhbGwoZGVzdGluYXRpb24sIGtleSkpIHtcbiAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIG92ZXJyaWRhYmxlS2V5c1trZXldID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RvcmVNYXBwaW5nUGFpcihzdGF0ZSwgX3Jlc3VsdCwgb3ZlcnJpZGFibGVLZXlzLCBrZXlUYWcsIGtleU5vZGUsIHZhbHVlTm9kZSxcbiAgc3RhcnRMaW5lLCBzdGFydExpbmVTdGFydCwgc3RhcnRQb3MpIHtcblxuICB2YXIgaW5kZXgsIHF1YW50aXR5O1xuXG4gIC8vIFRoZSBvdXRwdXQgaXMgYSBwbGFpbiBvYmplY3QgaGVyZSwgc28ga2V5cyBjYW4gb25seSBiZSBzdHJpbmdzLlxuICAvLyBXZSBuZWVkIHRvIGNvbnZlcnQga2V5Tm9kZSB0byBhIHN0cmluZywgYnV0IGRvaW5nIHNvIGNhbiBoYW5nIHRoZSBwcm9jZXNzXG4gIC8vIChkZWVwbHkgbmVzdGVkIGFycmF5cyB0aGF0IGV4cGxvZGUgZXhwb25lbnRpYWxseSB1c2luZyBhbGlhc2VzKS5cbiAgaWYgKEFycmF5LmlzQXJyYXkoa2V5Tm9kZSkpIHtcbiAgICBrZXlOb2RlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoa2V5Tm9kZSk7XG5cbiAgICBmb3IgKGluZGV4ID0gMCwgcXVhbnRpdHkgPSBrZXlOb2RlLmxlbmd0aDsgaW5kZXggPCBxdWFudGl0eTsgaW5kZXggKz0gMSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoa2V5Tm9kZVtpbmRleF0pKSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICduZXN0ZWQgYXJyYXlzIGFyZSBub3Qgc3VwcG9ydGVkIGluc2lkZSBrZXlzJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Yga2V5Tm9kZSA9PT0gJ29iamVjdCcgJiYgX2NsYXNzKGtleU5vZGVbaW5kZXhdKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgICAga2V5Tm9kZVtpbmRleF0gPSAnW29iamVjdCBPYmplY3RdJztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBBdm9pZCBjb2RlIGV4ZWN1dGlvbiBpbiBsb2FkKCkgdmlhIHRvU3RyaW5nIHByb3BlcnR5XG4gIC8vIChzdGlsbCB1c2UgaXRzIG93biB0b1N0cmluZyBmb3IgYXJyYXlzLCB0aW1lc3RhbXBzLFxuICAvLyBhbmQgd2hhdGV2ZXIgdXNlciBzY2hlbWEgZXh0ZW5zaW9ucyBoYXBwZW4gdG8gaGF2ZSBAQHRvU3RyaW5nVGFnKVxuICBpZiAodHlwZW9mIGtleU5vZGUgPT09ICdvYmplY3QnICYmIF9jbGFzcyhrZXlOb2RlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICBrZXlOb2RlID0gJ1tvYmplY3QgT2JqZWN0XSc7XG4gIH1cblxuXG4gIGtleU5vZGUgPSBTdHJpbmcoa2V5Tm9kZSk7XG5cbiAgaWYgKF9yZXN1bHQgPT09IG51bGwpIHtcbiAgICBfcmVzdWx0ID0ge307XG4gIH1cblxuICBpZiAoa2V5VGFnID09PSAndGFnOnlhbWwub3JnLDIwMDI6bWVyZ2UnKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVOb2RlKSkge1xuICAgICAgZm9yIChpbmRleCA9IDAsIHF1YW50aXR5ID0gdmFsdWVOb2RlLmxlbmd0aDsgaW5kZXggPCBxdWFudGl0eTsgaW5kZXggKz0gMSkge1xuICAgICAgICBtZXJnZU1hcHBpbmdzKHN0YXRlLCBfcmVzdWx0LCB2YWx1ZU5vZGVbaW5kZXhdLCBvdmVycmlkYWJsZUtleXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtZXJnZU1hcHBpbmdzKHN0YXRlLCBfcmVzdWx0LCB2YWx1ZU5vZGUsIG92ZXJyaWRhYmxlS2V5cyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICghc3RhdGUuanNvbiAmJlxuICAgICAgICAhX2hhc093blByb3BlcnR5JDEuY2FsbChvdmVycmlkYWJsZUtleXMsIGtleU5vZGUpICYmXG4gICAgICAgIF9oYXNPd25Qcm9wZXJ0eSQxLmNhbGwoX3Jlc3VsdCwga2V5Tm9kZSkpIHtcbiAgICAgIHN0YXRlLmxpbmUgPSBzdGFydExpbmUgfHwgc3RhdGUubGluZTtcbiAgICAgIHN0YXRlLmxpbmVTdGFydCA9IHN0YXJ0TGluZVN0YXJ0IHx8IHN0YXRlLmxpbmVTdGFydDtcbiAgICAgIHN0YXRlLnBvc2l0aW9uID0gc3RhcnRQb3MgfHwgc3RhdGUucG9zaXRpb247XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnZHVwbGljYXRlZCBtYXBwaW5nIGtleScpO1xuICAgIH1cblxuICAgIC8vIHVzZWQgZm9yIHRoaXMgc3BlY2lmaWMga2V5IG9ubHkgYmVjYXVzZSBPYmplY3QuZGVmaW5lUHJvcGVydHkgaXMgc2xvd1xuICAgIGlmIChrZXlOb2RlID09PSAnX19wcm90b19fJykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9yZXN1bHQsIGtleU5vZGUsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZhbHVlTm9kZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9yZXN1bHRba2V5Tm9kZV0gPSB2YWx1ZU5vZGU7XG4gICAgfVxuICAgIGRlbGV0ZSBvdmVycmlkYWJsZUtleXNba2V5Tm9kZV07XG4gIH1cblxuICByZXR1cm4gX3Jlc3VsdDtcbn1cblxuZnVuY3Rpb24gcmVhZExpbmVCcmVhayhzdGF0ZSkge1xuICB2YXIgY2g7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICBpZiAoY2ggPT09IDB4MEEvKiBMRiAqLykge1xuICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gIH0gZWxzZSBpZiAoY2ggPT09IDB4MEQvKiBDUiAqLykge1xuICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgaWYgKHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pID09PSAweDBBLyogTEYgKi8pIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICdhIGxpbmUgYnJlYWsgaXMgZXhwZWN0ZWQnKTtcbiAgfVxuXG4gIHN0YXRlLmxpbmUgKz0gMTtcbiAgc3RhdGUubGluZVN0YXJ0ID0gc3RhdGUucG9zaXRpb247XG4gIHN0YXRlLmZpcnN0VGFiSW5MaW5lID0gLTE7XG59XG5cbmZ1bmN0aW9uIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIGFsbG93Q29tbWVudHMsIGNoZWNrSW5kZW50KSB7XG4gIHZhciBsaW5lQnJlYWtzID0gMCxcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgd2hpbGUgKGNoICE9PSAwKSB7XG4gICAgd2hpbGUgKGlzX1dISVRFX1NQQUNFKGNoKSkge1xuICAgICAgaWYgKGNoID09PSAweDA5LyogVGFiICovICYmIHN0YXRlLmZpcnN0VGFiSW5MaW5lID09PSAtMSkge1xuICAgICAgICBzdGF0ZS5maXJzdFRhYkluTGluZSA9IHN0YXRlLnBvc2l0aW9uO1xuICAgICAgfVxuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIH1cblxuICAgIGlmIChhbGxvd0NvbW1lbnRzICYmIGNoID09PSAweDIzLyogIyAqLykge1xuICAgICAgZG8ge1xuICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgICB9IHdoaWxlIChjaCAhPT0gMHgwQS8qIExGICovICYmIGNoICE9PSAweDBELyogQ1IgKi8gJiYgY2ggIT09IDApO1xuICAgIH1cblxuICAgIGlmIChpc19FT0woY2gpKSB7XG4gICAgICByZWFkTGluZUJyZWFrKHN0YXRlKTtcblxuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcbiAgICAgIGxpbmVCcmVha3MrKztcbiAgICAgIHN0YXRlLmxpbmVJbmRlbnQgPSAwO1xuXG4gICAgICB3aGlsZSAoY2ggPT09IDB4MjAvKiBTcGFjZSAqLykge1xuICAgICAgICBzdGF0ZS5saW5lSW5kZW50Kys7XG4gICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKGNoZWNrSW5kZW50ICE9PSAtMSAmJiBsaW5lQnJlYWtzICE9PSAwICYmIHN0YXRlLmxpbmVJbmRlbnQgPCBjaGVja0luZGVudCkge1xuICAgIHRocm93V2FybmluZyhzdGF0ZSwgJ2RlZmljaWVudCBpbmRlbnRhdGlvbicpO1xuICB9XG5cbiAgcmV0dXJuIGxpbmVCcmVha3M7XG59XG5cbmZ1bmN0aW9uIHRlc3REb2N1bWVudFNlcGFyYXRvcihzdGF0ZSkge1xuICB2YXIgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb24sXG4gICAgICBjaDtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoX3Bvc2l0aW9uKTtcblxuICAvLyBDb25kaXRpb24gc3RhdGUucG9zaXRpb24gPT09IHN0YXRlLmxpbmVTdGFydCBpcyB0ZXN0ZWRcbiAgLy8gaW4gcGFyZW50IG9uIGVhY2ggY2FsbCwgZm9yIGVmZmljaWVuY3kuIE5vIG5lZWRzIHRvIHRlc3QgaGVyZSBhZ2Fpbi5cbiAgaWYgKChjaCA9PT0gMHgyRC8qIC0gKi8gfHwgY2ggPT09IDB4MkUvKiAuICovKSAmJlxuICAgICAgY2ggPT09IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoX3Bvc2l0aW9uICsgMSkgJiZcbiAgICAgIGNoID09PSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KF9wb3NpdGlvbiArIDIpKSB7XG5cbiAgICBfcG9zaXRpb24gKz0gMztcblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChfcG9zaXRpb24pO1xuXG4gICAgaWYgKGNoID09PSAwIHx8IGlzX1dTX09SX0VPTChjaCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gd3JpdGVGb2xkZWRMaW5lcyhzdGF0ZSwgY291bnQpIHtcbiAgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgc3RhdGUucmVzdWx0ICs9ICcgJztcbiAgfSBlbHNlIGlmIChjb3VudCA+IDEpIHtcbiAgICBzdGF0ZS5yZXN1bHQgKz0gY29tbW9uLnJlcGVhdCgnXFxuJywgY291bnQgLSAxKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHJlYWRQbGFpblNjYWxhcihzdGF0ZSwgbm9kZUluZGVudCwgd2l0aGluRmxvd0NvbGxlY3Rpb24pIHtcbiAgdmFyIHByZWNlZGluZyxcbiAgICAgIGZvbGxvd2luZyxcbiAgICAgIGNhcHR1cmVTdGFydCxcbiAgICAgIGNhcHR1cmVFbmQsXG4gICAgICBoYXNQZW5kaW5nQ29udGVudCxcbiAgICAgIF9saW5lLFxuICAgICAgX2xpbmVTdGFydCxcbiAgICAgIF9saW5lSW5kZW50LFxuICAgICAgX2tpbmQgPSBzdGF0ZS5raW5kLFxuICAgICAgX3Jlc3VsdCA9IHN0YXRlLnJlc3VsdCxcbiAgICAgIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGlzX1dTX09SX0VPTChjaCkgICAgICB8fFxuICAgICAgaXNfRkxPV19JTkRJQ0FUT1IoY2gpIHx8XG4gICAgICBjaCA9PT0gMHgyMy8qICMgKi8gICAgfHxcbiAgICAgIGNoID09PSAweDI2LyogJiAqLyAgICB8fFxuICAgICAgY2ggPT09IDB4MkEvKiAqICovICAgIHx8XG4gICAgICBjaCA9PT0gMHgyMS8qICEgKi8gICAgfHxcbiAgICAgIGNoID09PSAweDdDLyogfCAqLyAgICB8fFxuICAgICAgY2ggPT09IDB4M0UvKiA+ICovICAgIHx8XG4gICAgICBjaCA9PT0gMHgyNy8qICcgKi8gICAgfHxcbiAgICAgIGNoID09PSAweDIyLyogXCIgKi8gICAgfHxcbiAgICAgIGNoID09PSAweDI1LyogJSAqLyAgICB8fFxuICAgICAgY2ggPT09IDB4NDAvKiBAICovICAgIHx8XG4gICAgICBjaCA9PT0gMHg2MC8qIGAgKi8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoY2ggPT09IDB4M0YvKiA/ICovIHx8IGNoID09PSAweDJELyogLSAqLykge1xuICAgIGZvbGxvd2luZyA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAxKTtcblxuICAgIGlmIChpc19XU19PUl9FT0woZm9sbG93aW5nKSB8fFxuICAgICAgICB3aXRoaW5GbG93Q29sbGVjdGlvbiAmJiBpc19GTE9XX0lORElDQVRPUihmb2xsb3dpbmcpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgc3RhdGUua2luZCA9ICdzY2FsYXInO1xuICBzdGF0ZS5yZXN1bHQgPSAnJztcbiAgY2FwdHVyZVN0YXJ0ID0gY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuICBoYXNQZW5kaW5nQ29udGVudCA9IGZhbHNlO1xuXG4gIHdoaWxlIChjaCAhPT0gMCkge1xuICAgIGlmIChjaCA9PT0gMHgzQS8qIDogKi8pIHtcbiAgICAgIGZvbGxvd2luZyA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAxKTtcblxuICAgICAgaWYgKGlzX1dTX09SX0VPTChmb2xsb3dpbmcpIHx8XG4gICAgICAgICAgd2l0aGluRmxvd0NvbGxlY3Rpb24gJiYgaXNfRkxPV19JTkRJQ0FUT1IoZm9sbG93aW5nKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAoY2ggPT09IDB4MjMvKiAjICovKSB7XG4gICAgICBwcmVjZWRpbmcgPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uIC0gMSk7XG5cbiAgICAgIGlmIChpc19XU19PUl9FT0wocHJlY2VkaW5nKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAoKHN0YXRlLnBvc2l0aW9uID09PSBzdGF0ZS5saW5lU3RhcnQgJiYgdGVzdERvY3VtZW50U2VwYXJhdG9yKHN0YXRlKSkgfHxcbiAgICAgICAgICAgICAgIHdpdGhpbkZsb3dDb2xsZWN0aW9uICYmIGlzX0ZMT1dfSU5ESUNBVE9SKGNoKSkge1xuICAgICAgYnJlYWs7XG5cbiAgICB9IGVsc2UgaWYgKGlzX0VPTChjaCkpIHtcbiAgICAgIF9saW5lID0gc3RhdGUubGluZTtcbiAgICAgIF9saW5lU3RhcnQgPSBzdGF0ZS5saW5lU3RhcnQ7XG4gICAgICBfbGluZUluZGVudCA9IHN0YXRlLmxpbmVJbmRlbnQ7XG4gICAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCBmYWxzZSwgLTEpO1xuXG4gICAgICBpZiAoc3RhdGUubGluZUluZGVudCA+PSBub2RlSW5kZW50KSB7XG4gICAgICAgIGhhc1BlbmRpbmdDb250ZW50ID0gdHJ1ZTtcbiAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5wb3NpdGlvbiA9IGNhcHR1cmVFbmQ7XG4gICAgICAgIHN0YXRlLmxpbmUgPSBfbGluZTtcbiAgICAgICAgc3RhdGUubGluZVN0YXJ0ID0gX2xpbmVTdGFydDtcbiAgICAgICAgc3RhdGUubGluZUluZGVudCA9IF9saW5lSW5kZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaGFzUGVuZGluZ0NvbnRlbnQpIHtcbiAgICAgIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBjYXB0dXJlU3RhcnQsIGNhcHR1cmVFbmQsIGZhbHNlKTtcbiAgICAgIHdyaXRlRm9sZGVkTGluZXMoc3RhdGUsIHN0YXRlLmxpbmUgLSBfbGluZSk7XG4gICAgICBjYXB0dXJlU3RhcnQgPSBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG4gICAgICBoYXNQZW5kaW5nQ29udGVudCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghaXNfV0hJVEVfU1BBQ0UoY2gpKSB7XG4gICAgICBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb24gKyAxO1xuICAgIH1cblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgfVxuXG4gIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBjYXB0dXJlU3RhcnQsIGNhcHR1cmVFbmQsIGZhbHNlKTtcblxuICBpZiAoc3RhdGUucmVzdWx0KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBzdGF0ZS5raW5kID0gX2tpbmQ7XG4gIHN0YXRlLnJlc3VsdCA9IF9yZXN1bHQ7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcmVhZFNpbmdsZVF1b3RlZFNjYWxhcihzdGF0ZSwgbm9kZUluZGVudCkge1xuICB2YXIgY2gsXG4gICAgICBjYXB0dXJlU3RhcnQsIGNhcHR1cmVFbmQ7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICBpZiAoY2ggIT09IDB4MjcvKiAnICovKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3RhdGUua2luZCA9ICdzY2FsYXInO1xuICBzdGF0ZS5yZXN1bHQgPSAnJztcbiAgc3RhdGUucG9zaXRpb24rKztcbiAgY2FwdHVyZVN0YXJ0ID0gY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gIHdoaWxlICgoY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSkgIT09IDApIHtcbiAgICBpZiAoY2ggPT09IDB4MjcvKiAnICovKSB7XG4gICAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBzdGF0ZS5wb3NpdGlvbiwgdHJ1ZSk7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICAgIGlmIChjaCA9PT0gMHgyNy8qICcgKi8pIHtcbiAgICAgICAgY2FwdHVyZVN0YXJ0ID0gc3RhdGUucG9zaXRpb247XG4gICAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgICAgIGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIGlmIChpc19FT0woY2gpKSB7XG4gICAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBjYXB0dXJlRW5kLCB0cnVlKTtcbiAgICAgIHdyaXRlRm9sZGVkTGluZXMoc3RhdGUsIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIGZhbHNlLCBub2RlSW5kZW50KSk7XG4gICAgICBjYXB0dXJlU3RhcnQgPSBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG5cbiAgICB9IGVsc2UgaWYgKHN0YXRlLnBvc2l0aW9uID09PSBzdGF0ZS5saW5lU3RhcnQgJiYgdGVzdERvY3VtZW50U2VwYXJhdG9yKHN0YXRlKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuZXhwZWN0ZWQgZW5kIG9mIHRoZSBkb2N1bWVudCB3aXRoaW4gYSBzaW5nbGUgcXVvdGVkIHNjYWxhcicpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgICBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG4gICAgfVxuICB9XG5cbiAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuZXhwZWN0ZWQgZW5kIG9mIHRoZSBzdHJlYW0gd2l0aGluIGEgc2luZ2xlIHF1b3RlZCBzY2FsYXInKTtcbn1cblxuZnVuY3Rpb24gcmVhZERvdWJsZVF1b3RlZFNjYWxhcihzdGF0ZSwgbm9kZUluZGVudCkge1xuICB2YXIgY2FwdHVyZVN0YXJ0LFxuICAgICAgY2FwdHVyZUVuZCxcbiAgICAgIGhleExlbmd0aCxcbiAgICAgIGhleFJlc3VsdCxcbiAgICAgIHRtcCxcbiAgICAgIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoICE9PSAweDIyLyogXCIgKi8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdGF0ZS5raW5kID0gJ3NjYWxhcic7XG4gIHN0YXRlLnJlc3VsdCA9ICcnO1xuICBzdGF0ZS5wb3NpdGlvbisrO1xuICBjYXB0dXJlU3RhcnQgPSBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG5cbiAgd2hpbGUgKChjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pKSAhPT0gMCkge1xuICAgIGlmIChjaCA9PT0gMHgyMi8qIFwiICovKSB7XG4gICAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBzdGF0ZS5wb3NpdGlvbiwgdHJ1ZSk7XG4gICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICB9IGVsc2UgaWYgKGNoID09PSAweDVDLyogXFwgKi8pIHtcbiAgICAgIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBjYXB0dXJlU3RhcnQsIHN0YXRlLnBvc2l0aW9uLCB0cnVlKTtcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcblxuICAgICAgaWYgKGlzX0VPTChjaCkpIHtcbiAgICAgICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgZmFsc2UsIG5vZGVJbmRlbnQpO1xuXG4gICAgICAgIC8vIFRPRE86IHJld29yayB0byBpbmxpbmUgZm4gd2l0aCBubyB0eXBlIGNhc3Q/XG4gICAgICB9IGVsc2UgaWYgKGNoIDwgMjU2ICYmIHNpbXBsZUVzY2FwZUNoZWNrW2NoXSkge1xuICAgICAgICBzdGF0ZS5yZXN1bHQgKz0gc2ltcGxlRXNjYXBlTWFwW2NoXTtcbiAgICAgICAgc3RhdGUucG9zaXRpb24rKztcblxuICAgICAgfSBlbHNlIGlmICgodG1wID0gZXNjYXBlZEhleExlbihjaCkpID4gMCkge1xuICAgICAgICBoZXhMZW5ndGggPSB0bXA7XG4gICAgICAgIGhleFJlc3VsdCA9IDA7XG5cbiAgICAgICAgZm9yICg7IGhleExlbmd0aCA+IDA7IGhleExlbmd0aC0tKSB7XG4gICAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuXG4gICAgICAgICAgaWYgKCh0bXAgPSBmcm9tSGV4Q29kZShjaCkpID49IDApIHtcbiAgICAgICAgICAgIGhleFJlc3VsdCA9IChoZXhSZXN1bHQgPDwgNCkgKyB0bXA7XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2V4cGVjdGVkIGhleGFkZWNpbWFsIGNoYXJhY3RlcicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlLnJlc3VsdCArPSBjaGFyRnJvbUNvZGVwb2ludChoZXhSZXN1bHQpO1xuXG4gICAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmtub3duIGVzY2FwZSBzZXF1ZW5jZScpO1xuICAgICAgfVxuXG4gICAgICBjYXB0dXJlU3RhcnQgPSBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG5cbiAgICB9IGVsc2UgaWYgKGlzX0VPTChjaCkpIHtcbiAgICAgIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBjYXB0dXJlU3RhcnQsIGNhcHR1cmVFbmQsIHRydWUpO1xuICAgICAgd3JpdGVGb2xkZWRMaW5lcyhzdGF0ZSwgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgZmFsc2UsIG5vZGVJbmRlbnQpKTtcbiAgICAgIGNhcHR1cmVTdGFydCA9IGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcblxuICAgIH0gZWxzZSBpZiAoc3RhdGUucG9zaXRpb24gPT09IHN0YXRlLmxpbmVTdGFydCAmJiB0ZXN0RG9jdW1lbnRTZXBhcmF0b3Ioc3RhdGUpKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5leHBlY3RlZCBlbmQgb2YgdGhlIGRvY3VtZW50IHdpdGhpbiBhIGRvdWJsZSBxdW90ZWQgc2NhbGFyJyk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUucG9zaXRpb24rKztcbiAgICAgIGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgICB9XG4gIH1cblxuICB0aHJvd0Vycm9yKHN0YXRlLCAndW5leHBlY3RlZCBlbmQgb2YgdGhlIHN0cmVhbSB3aXRoaW4gYSBkb3VibGUgcXVvdGVkIHNjYWxhcicpO1xufVxuXG5mdW5jdGlvbiByZWFkRmxvd0NvbGxlY3Rpb24oc3RhdGUsIG5vZGVJbmRlbnQpIHtcbiAgdmFyIHJlYWROZXh0ID0gdHJ1ZSxcbiAgICAgIF9saW5lLFxuICAgICAgX2xpbmVTdGFydCxcbiAgICAgIF9wb3MsXG4gICAgICBfdGFnICAgICA9IHN0YXRlLnRhZyxcbiAgICAgIF9yZXN1bHQsXG4gICAgICBfYW5jaG9yICA9IHN0YXRlLmFuY2hvcixcbiAgICAgIGZvbGxvd2luZyxcbiAgICAgIHRlcm1pbmF0b3IsXG4gICAgICBpc1BhaXIsXG4gICAgICBpc0V4cGxpY2l0UGFpcixcbiAgICAgIGlzTWFwcGluZyxcbiAgICAgIG92ZXJyaWRhYmxlS2V5cyA9IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBrZXlOb2RlLFxuICAgICAga2V5VGFnLFxuICAgICAgdmFsdWVOb2RlLFxuICAgICAgY2g7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICBpZiAoY2ggPT09IDB4NUIvKiBbICovKSB7XG4gICAgdGVybWluYXRvciA9IDB4NUQ7LyogXSAqL1xuICAgIGlzTWFwcGluZyA9IGZhbHNlO1xuICAgIF9yZXN1bHQgPSBbXTtcbiAgfSBlbHNlIGlmIChjaCA9PT0gMHg3Qi8qIHsgKi8pIHtcbiAgICB0ZXJtaW5hdG9yID0gMHg3RDsvKiB9ICovXG4gICAgaXNNYXBwaW5nID0gdHJ1ZTtcbiAgICBfcmVzdWx0ID0ge307XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHN0YXRlLmFuY2hvciAhPT0gbnVsbCkge1xuICAgIHN0YXRlLmFuY2hvck1hcFtzdGF0ZS5hbmNob3JdID0gX3Jlc3VsdDtcbiAgfVxuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcblxuICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCBub2RlSW5kZW50KTtcblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICBpZiAoY2ggPT09IHRlcm1pbmF0b3IpIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgICBzdGF0ZS50YWcgPSBfdGFnO1xuICAgICAgc3RhdGUuYW5jaG9yID0gX2FuY2hvcjtcbiAgICAgIHN0YXRlLmtpbmQgPSBpc01hcHBpbmcgPyAnbWFwcGluZycgOiAnc2VxdWVuY2UnO1xuICAgICAgc3RhdGUucmVzdWx0ID0gX3Jlc3VsdDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoIXJlYWROZXh0KSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnbWlzc2VkIGNvbW1hIGJldHdlZW4gZmxvdyBjb2xsZWN0aW9uIGVudHJpZXMnKTtcbiAgICB9IGVsc2UgaWYgKGNoID09PSAweDJDLyogLCAqLykge1xuICAgICAgLy8gXCJmbG93IGNvbGxlY3Rpb24gZW50cmllcyBjYW4gbmV2ZXIgYmUgY29tcGxldGVseSBlbXB0eVwiLCBhcyBwZXIgWUFNTCAxLjIsIHNlY3Rpb24gNy40XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCBcImV4cGVjdGVkIHRoZSBub2RlIGNvbnRlbnQsIGJ1dCBmb3VuZCAnLCdcIik7XG4gICAgfVxuXG4gICAga2V5VGFnID0ga2V5Tm9kZSA9IHZhbHVlTm9kZSA9IG51bGw7XG4gICAgaXNQYWlyID0gaXNFeHBsaWNpdFBhaXIgPSBmYWxzZTtcblxuICAgIGlmIChjaCA9PT0gMHgzRi8qID8gKi8pIHtcbiAgICAgIGZvbGxvd2luZyA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAxKTtcblxuICAgICAgaWYgKGlzX1dTX09SX0VPTChmb2xsb3dpbmcpKSB7XG4gICAgICAgIGlzUGFpciA9IGlzRXhwbGljaXRQYWlyID0gdHJ1ZTtcbiAgICAgICAgc3RhdGUucG9zaXRpb24rKztcbiAgICAgICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgbm9kZUluZGVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX2xpbmUgPSBzdGF0ZS5saW5lOyAvLyBTYXZlIHRoZSBjdXJyZW50IGxpbmUuXG4gICAgX2xpbmVTdGFydCA9IHN0YXRlLmxpbmVTdGFydDtcbiAgICBfcG9zID0gc3RhdGUucG9zaXRpb247XG4gICAgY29tcG9zZU5vZGUoc3RhdGUsIG5vZGVJbmRlbnQsIENPTlRFWFRfRkxPV19JTiwgZmFsc2UsIHRydWUpO1xuICAgIGtleVRhZyA9IHN0YXRlLnRhZztcbiAgICBrZXlOb2RlID0gc3RhdGUucmVzdWx0O1xuICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIG5vZGVJbmRlbnQpO1xuXG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICAgIGlmICgoaXNFeHBsaWNpdFBhaXIgfHwgc3RhdGUubGluZSA9PT0gX2xpbmUpICYmIGNoID09PSAweDNBLyogOiAqLykge1xuICAgICAgaXNQYWlyID0gdHJ1ZTtcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIG5vZGVJbmRlbnQpO1xuICAgICAgY29tcG9zZU5vZGUoc3RhdGUsIG5vZGVJbmRlbnQsIENPTlRFWFRfRkxPV19JTiwgZmFsc2UsIHRydWUpO1xuICAgICAgdmFsdWVOb2RlID0gc3RhdGUucmVzdWx0O1xuICAgIH1cblxuICAgIGlmIChpc01hcHBpbmcpIHtcbiAgICAgIHN0b3JlTWFwcGluZ1BhaXIoc3RhdGUsIF9yZXN1bHQsIG92ZXJyaWRhYmxlS2V5cywga2V5VGFnLCBrZXlOb2RlLCB2YWx1ZU5vZGUsIF9saW5lLCBfbGluZVN0YXJ0LCBfcG9zKTtcbiAgICB9IGVsc2UgaWYgKGlzUGFpcikge1xuICAgICAgX3Jlc3VsdC5wdXNoKHN0b3JlTWFwcGluZ1BhaXIoc3RhdGUsIG51bGwsIG92ZXJyaWRhYmxlS2V5cywga2V5VGFnLCBrZXlOb2RlLCB2YWx1ZU5vZGUsIF9saW5lLCBfbGluZVN0YXJ0LCBfcG9zKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9yZXN1bHQucHVzaChrZXlOb2RlKTtcbiAgICB9XG5cbiAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCBub2RlSW5kZW50KTtcblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICBpZiAoY2ggPT09IDB4MkMvKiAsICovKSB7XG4gICAgICByZWFkTmV4dCA9IHRydWU7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlYWROZXh0ID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuZXhwZWN0ZWQgZW5kIG9mIHRoZSBzdHJlYW0gd2l0aGluIGEgZmxvdyBjb2xsZWN0aW9uJyk7XG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9ja1NjYWxhcihzdGF0ZSwgbm9kZUluZGVudCkge1xuICB2YXIgY2FwdHVyZVN0YXJ0LFxuICAgICAgZm9sZGluZyxcbiAgICAgIGNob21waW5nICAgICAgID0gQ0hPTVBJTkdfQ0xJUCxcbiAgICAgIGRpZFJlYWRDb250ZW50ID0gZmFsc2UsXG4gICAgICBkZXRlY3RlZEluZGVudCA9IGZhbHNlLFxuICAgICAgdGV4dEluZGVudCAgICAgPSBub2RlSW5kZW50LFxuICAgICAgZW1wdHlMaW5lcyAgICAgPSAwLFxuICAgICAgYXRNb3JlSW5kZW50ZWQgPSBmYWxzZSxcbiAgICAgIHRtcCxcbiAgICAgIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoID09PSAweDdDLyogfCAqLykge1xuICAgIGZvbGRpbmcgPSBmYWxzZTtcbiAgfSBlbHNlIGlmIChjaCA9PT0gMHgzRS8qID4gKi8pIHtcbiAgICBmb2xkaW5nID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdGF0ZS5raW5kID0gJ3NjYWxhcic7XG4gIHN0YXRlLnJlc3VsdCA9ICcnO1xuXG4gIHdoaWxlIChjaCAhPT0gMCkge1xuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcblxuICAgIGlmIChjaCA9PT0gMHgyQi8qICsgKi8gfHwgY2ggPT09IDB4MkQvKiAtICovKSB7XG4gICAgICBpZiAoQ0hPTVBJTkdfQ0xJUCA9PT0gY2hvbXBpbmcpIHtcbiAgICAgICAgY2hvbXBpbmcgPSAoY2ggPT09IDB4MkIvKiArICovKSA/IENIT01QSU5HX0tFRVAgOiBDSE9NUElOR19TVFJJUDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdyZXBlYXQgb2YgYSBjaG9tcGluZyBtb2RlIGlkZW50aWZpZXInKTtcbiAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAoKHRtcCA9IGZyb21EZWNpbWFsQ29kZShjaCkpID49IDApIHtcbiAgICAgIGlmICh0bXAgPT09IDApIHtcbiAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2JhZCBleHBsaWNpdCBpbmRlbnRhdGlvbiB3aWR0aCBvZiBhIGJsb2NrIHNjYWxhcjsgaXQgY2Fubm90IGJlIGxlc3MgdGhhbiBvbmUnKTtcbiAgICAgIH0gZWxzZSBpZiAoIWRldGVjdGVkSW5kZW50KSB7XG4gICAgICAgIHRleHRJbmRlbnQgPSBub2RlSW5kZW50ICsgdG1wIC0gMTtcbiAgICAgICAgZGV0ZWN0ZWRJbmRlbnQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3JlcGVhdCBvZiBhbiBpbmRlbnRhdGlvbiB3aWR0aCBpZGVudGlmaWVyJyk7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKGlzX1dISVRFX1NQQUNFKGNoKSkge1xuICAgIGRvIHsgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pOyB9XG4gICAgd2hpbGUgKGlzX1dISVRFX1NQQUNFKGNoKSk7XG5cbiAgICBpZiAoY2ggPT09IDB4MjMvKiAjICovKSB7XG4gICAgICBkbyB7IGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTsgfVxuICAgICAgd2hpbGUgKCFpc19FT0woY2gpICYmIChjaCAhPT0gMCkpO1xuICAgIH1cbiAgfVxuXG4gIHdoaWxlIChjaCAhPT0gMCkge1xuICAgIHJlYWRMaW5lQnJlYWsoc3RhdGUpO1xuICAgIHN0YXRlLmxpbmVJbmRlbnQgPSAwO1xuXG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICAgIHdoaWxlICgoIWRldGVjdGVkSW5kZW50IHx8IHN0YXRlLmxpbmVJbmRlbnQgPCB0ZXh0SW5kZW50KSAmJlxuICAgICAgICAgICAoY2ggPT09IDB4MjAvKiBTcGFjZSAqLykpIHtcbiAgICAgIHN0YXRlLmxpbmVJbmRlbnQrKztcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBpZiAoIWRldGVjdGVkSW5kZW50ICYmIHN0YXRlLmxpbmVJbmRlbnQgPiB0ZXh0SW5kZW50KSB7XG4gICAgICB0ZXh0SW5kZW50ID0gc3RhdGUubGluZUluZGVudDtcbiAgICB9XG5cbiAgICBpZiAoaXNfRU9MKGNoKSkge1xuICAgICAgZW1wdHlMaW5lcysrO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gRW5kIG9mIHRoZSBzY2FsYXIuXG4gICAgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPCB0ZXh0SW5kZW50KSB7XG5cbiAgICAgIC8vIFBlcmZvcm0gdGhlIGNob21waW5nLlxuICAgICAgaWYgKGNob21waW5nID09PSBDSE9NUElOR19LRUVQKSB7XG4gICAgICAgIHN0YXRlLnJlc3VsdCArPSBjb21tb24ucmVwZWF0KCdcXG4nLCBkaWRSZWFkQ29udGVudCA/IDEgKyBlbXB0eUxpbmVzIDogZW1wdHlMaW5lcyk7XG4gICAgICB9IGVsc2UgaWYgKGNob21waW5nID09PSBDSE9NUElOR19DTElQKSB7XG4gICAgICAgIGlmIChkaWRSZWFkQ29udGVudCkgeyAvLyBpLmUuIG9ubHkgaWYgdGhlIHNjYWxhciBpcyBub3QgZW1wdHkuXG4gICAgICAgICAgc3RhdGUucmVzdWx0ICs9ICdcXG4nO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEJyZWFrIHRoaXMgYHdoaWxlYCBjeWNsZSBhbmQgZ28gdG8gdGhlIGZ1bmNpdG9uJ3MgZXBpbG9ndWUuXG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyBGb2xkZWQgc3R5bGU6IHVzZSBmYW5jeSBydWxlcyB0byBoYW5kbGUgbGluZSBicmVha3MuXG4gICAgaWYgKGZvbGRpbmcpIHtcblxuICAgICAgLy8gTGluZXMgc3RhcnRpbmcgd2l0aCB3aGl0ZSBzcGFjZSBjaGFyYWN0ZXJzIChtb3JlLWluZGVudGVkIGxpbmVzKSBhcmUgbm90IGZvbGRlZC5cbiAgICAgIGlmIChpc19XSElURV9TUEFDRShjaCkpIHtcbiAgICAgICAgYXRNb3JlSW5kZW50ZWQgPSB0cnVlO1xuICAgICAgICAvLyBleGNlcHQgZm9yIHRoZSBmaXJzdCBjb250ZW50IGxpbmUgKGNmLiBFeGFtcGxlIDguMSlcbiAgICAgICAgc3RhdGUucmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoJ1xcbicsIGRpZFJlYWRDb250ZW50ID8gMSArIGVtcHR5TGluZXMgOiBlbXB0eUxpbmVzKTtcblxuICAgICAgLy8gRW5kIG9mIG1vcmUtaW5kZW50ZWQgYmxvY2suXG4gICAgICB9IGVsc2UgaWYgKGF0TW9yZUluZGVudGVkKSB7XG4gICAgICAgIGF0TW9yZUluZGVudGVkID0gZmFsc2U7XG4gICAgICAgIHN0YXRlLnJlc3VsdCArPSBjb21tb24ucmVwZWF0KCdcXG4nLCBlbXB0eUxpbmVzICsgMSk7XG5cbiAgICAgIC8vIEp1c3Qgb25lIGxpbmUgYnJlYWsgLSBwZXJjZWl2ZSBhcyB0aGUgc2FtZSBsaW5lLlxuICAgICAgfSBlbHNlIGlmIChlbXB0eUxpbmVzID09PSAwKSB7XG4gICAgICAgIGlmIChkaWRSZWFkQ29udGVudCkgeyAvLyBpLmUuIG9ubHkgaWYgd2UgaGF2ZSBhbHJlYWR5IHJlYWQgc29tZSBzY2FsYXIgY29udGVudC5cbiAgICAgICAgICBzdGF0ZS5yZXN1bHQgKz0gJyAnO1xuICAgICAgICB9XG5cbiAgICAgIC8vIFNldmVyYWwgbGluZSBicmVha3MgLSBwZXJjZWl2ZSBhcyBkaWZmZXJlbnQgbGluZXMuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5yZXN1bHQgKz0gY29tbW9uLnJlcGVhdCgnXFxuJywgZW1wdHlMaW5lcyk7XG4gICAgICB9XG5cbiAgICAvLyBMaXRlcmFsIHN0eWxlOiBqdXN0IGFkZCBleGFjdCBudW1iZXIgb2YgbGluZSBicmVha3MgYmV0d2VlbiBjb250ZW50IGxpbmVzLlxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBLZWVwIGFsbCBsaW5lIGJyZWFrcyBleGNlcHQgdGhlIGhlYWRlciBsaW5lIGJyZWFrLlxuICAgICAgc3RhdGUucmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoJ1xcbicsIGRpZFJlYWRDb250ZW50ID8gMSArIGVtcHR5TGluZXMgOiBlbXB0eUxpbmVzKTtcbiAgICB9XG5cbiAgICBkaWRSZWFkQ29udGVudCA9IHRydWU7XG4gICAgZGV0ZWN0ZWRJbmRlbnQgPSB0cnVlO1xuICAgIGVtcHR5TGluZXMgPSAwO1xuICAgIGNhcHR1cmVTdGFydCA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gICAgd2hpbGUgKCFpc19FT0woY2gpICYmIChjaCAhPT0gMCkpIHtcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBzdGF0ZS5wb3NpdGlvbiwgZmFsc2UpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9ja1NlcXVlbmNlKHN0YXRlLCBub2RlSW5kZW50KSB7XG4gIHZhciBfbGluZSxcbiAgICAgIF90YWcgICAgICA9IHN0YXRlLnRhZyxcbiAgICAgIF9hbmNob3IgICA9IHN0YXRlLmFuY2hvcixcbiAgICAgIF9yZXN1bHQgICA9IFtdLFxuICAgICAgZm9sbG93aW5nLFxuICAgICAgZGV0ZWN0ZWQgID0gZmFsc2UsXG4gICAgICBjaDtcblxuICAvLyB0aGVyZSBpcyBhIGxlYWRpbmcgdGFiIGJlZm9yZSB0aGlzIHRva2VuLCBzbyBpdCBjYW4ndCBiZSBhIGJsb2NrIHNlcXVlbmNlL21hcHBpbmc7XG4gIC8vIGl0IGNhbiBzdGlsbCBiZSBmbG93IHNlcXVlbmNlL21hcHBpbmcgb3IgYSBzY2FsYXJcbiAgaWYgKHN0YXRlLmZpcnN0VGFiSW5MaW5lICE9PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IF9yZXN1bHQ7XG4gIH1cblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIHdoaWxlIChjaCAhPT0gMCkge1xuICAgIGlmIChzdGF0ZS5maXJzdFRhYkluTGluZSAhPT0gLTEpIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uID0gc3RhdGUuZmlyc3RUYWJJbkxpbmU7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGFiIGNoYXJhY3RlcnMgbXVzdCBub3QgYmUgdXNlZCBpbiBpbmRlbnRhdGlvbicpO1xuICAgIH1cblxuICAgIGlmIChjaCAhPT0gMHgyRC8qIC0gKi8pIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGZvbGxvd2luZyA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAxKTtcblxuICAgIGlmICghaXNfV1NfT1JfRU9MKGZvbGxvd2luZykpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGRldGVjdGVkID0gdHJ1ZTtcbiAgICBzdGF0ZS5wb3NpdGlvbisrO1xuXG4gICAgaWYgKHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKSkge1xuICAgICAgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPD0gbm9kZUluZGVudCkge1xuICAgICAgICBfcmVzdWx0LnB1c2gobnVsbCk7XG4gICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9saW5lID0gc3RhdGUubGluZTtcbiAgICBjb21wb3NlTm9kZShzdGF0ZSwgbm9kZUluZGVudCwgQ09OVEVYVF9CTE9DS19JTiwgZmFsc2UsIHRydWUpO1xuICAgIF9yZXN1bHQucHVzaChzdGF0ZS5yZXN1bHQpO1xuICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICBpZiAoKHN0YXRlLmxpbmUgPT09IF9saW5lIHx8IHN0YXRlLmxpbmVJbmRlbnQgPiBub2RlSW5kZW50KSAmJiAoY2ggIT09IDApKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnYmFkIGluZGVudGF0aW9uIG9mIGEgc2VxdWVuY2UgZW50cnknKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPCBub2RlSW5kZW50KSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoZGV0ZWN0ZWQpIHtcbiAgICBzdGF0ZS50YWcgPSBfdGFnO1xuICAgIHN0YXRlLmFuY2hvciA9IF9hbmNob3I7XG4gICAgc3RhdGUua2luZCA9ICdzZXF1ZW5jZSc7XG4gICAgc3RhdGUucmVzdWx0ID0gX3Jlc3VsdDtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9ja01hcHBpbmcoc3RhdGUsIG5vZGVJbmRlbnQsIGZsb3dJbmRlbnQpIHtcbiAgdmFyIGZvbGxvd2luZyxcbiAgICAgIGFsbG93Q29tcGFjdCxcbiAgICAgIF9saW5lLFxuICAgICAgX2tleUxpbmUsXG4gICAgICBfa2V5TGluZVN0YXJ0LFxuICAgICAgX2tleVBvcyxcbiAgICAgIF90YWcgICAgICAgICAgPSBzdGF0ZS50YWcsXG4gICAgICBfYW5jaG9yICAgICAgID0gc3RhdGUuYW5jaG9yLFxuICAgICAgX3Jlc3VsdCAgICAgICA9IHt9LFxuICAgICAgb3ZlcnJpZGFibGVLZXlzID0gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgIGtleVRhZyAgICAgICAgPSBudWxsLFxuICAgICAga2V5Tm9kZSAgICAgICA9IG51bGwsXG4gICAgICB2YWx1ZU5vZGUgICAgID0gbnVsbCxcbiAgICAgIGF0RXhwbGljaXRLZXkgPSBmYWxzZSxcbiAgICAgIGRldGVjdGVkICAgICAgPSBmYWxzZSxcbiAgICAgIGNoO1xuXG4gIC8vIHRoZXJlIGlzIGEgbGVhZGluZyB0YWIgYmVmb3JlIHRoaXMgdG9rZW4sIHNvIGl0IGNhbid0IGJlIGEgYmxvY2sgc2VxdWVuY2UvbWFwcGluZztcbiAgLy8gaXQgY2FuIHN0aWxsIGJlIGZsb3cgc2VxdWVuY2UvbWFwcGluZyBvciBhIHNjYWxhclxuICBpZiAoc3RhdGUuZmlyc3RUYWJJbkxpbmUgIT09IC0xKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHN0YXRlLmFuY2hvciAhPT0gbnVsbCkge1xuICAgIHN0YXRlLmFuY2hvck1hcFtzdGF0ZS5hbmNob3JdID0gX3Jlc3VsdDtcbiAgfVxuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgd2hpbGUgKGNoICE9PSAwKSB7XG4gICAgaWYgKCFhdEV4cGxpY2l0S2V5ICYmIHN0YXRlLmZpcnN0VGFiSW5MaW5lICE9PSAtMSkge1xuICAgICAgc3RhdGUucG9zaXRpb24gPSBzdGF0ZS5maXJzdFRhYkluTGluZTtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd0YWIgY2hhcmFjdGVycyBtdXN0IG5vdCBiZSB1c2VkIGluIGluZGVudGF0aW9uJyk7XG4gICAgfVxuXG4gICAgZm9sbG93aW5nID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbiArIDEpO1xuICAgIF9saW5lID0gc3RhdGUubGluZTsgLy8gU2F2ZSB0aGUgY3VycmVudCBsaW5lLlxuXG4gICAgLy9cbiAgICAvLyBFeHBsaWNpdCBub3RhdGlvbiBjYXNlLiBUaGVyZSBhcmUgdHdvIHNlcGFyYXRlIGJsb2NrczpcbiAgICAvLyBmaXJzdCBmb3IgdGhlIGtleSAoZGVub3RlZCBieSBcIj9cIikgYW5kIHNlY29uZCBmb3IgdGhlIHZhbHVlIChkZW5vdGVkIGJ5IFwiOlwiKVxuICAgIC8vXG4gICAgaWYgKChjaCA9PT0gMHgzRi8qID8gKi8gfHwgY2ggPT09IDB4M0EvKiA6ICovKSAmJiBpc19XU19PUl9FT0woZm9sbG93aW5nKSkge1xuXG4gICAgICBpZiAoY2ggPT09IDB4M0YvKiA/ICovKSB7XG4gICAgICAgIGlmIChhdEV4cGxpY2l0S2V5KSB7XG4gICAgICAgICAgc3RvcmVNYXBwaW5nUGFpcihzdGF0ZSwgX3Jlc3VsdCwgb3ZlcnJpZGFibGVLZXlzLCBrZXlUYWcsIGtleU5vZGUsIG51bGwsIF9rZXlMaW5lLCBfa2V5TGluZVN0YXJ0LCBfa2V5UG9zKTtcbiAgICAgICAgICBrZXlUYWcgPSBrZXlOb2RlID0gdmFsdWVOb2RlID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGRldGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgYXRFeHBsaWNpdEtleSA9IHRydWU7XG4gICAgICAgIGFsbG93Q29tcGFjdCA9IHRydWU7XG5cbiAgICAgIH0gZWxzZSBpZiAoYXRFeHBsaWNpdEtleSkge1xuICAgICAgICAvLyBpLmUuIDB4M0EvKiA6ICovID09PSBjaGFyYWN0ZXIgYWZ0ZXIgdGhlIGV4cGxpY2l0IGtleS5cbiAgICAgICAgYXRFeHBsaWNpdEtleSA9IGZhbHNlO1xuICAgICAgICBhbGxvd0NvbXBhY3QgPSB0cnVlO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnaW5jb21wbGV0ZSBleHBsaWNpdCBtYXBwaW5nIHBhaXI7IGEga2V5IG5vZGUgaXMgbWlzc2VkOyBvciBmb2xsb3dlZCBieSBhIG5vbi10YWJ1bGF0ZWQgZW1wdHkgbGluZScpO1xuICAgICAgfVxuXG4gICAgICBzdGF0ZS5wb3NpdGlvbiArPSAxO1xuICAgICAgY2ggPSBmb2xsb3dpbmc7XG5cbiAgICAvL1xuICAgIC8vIEltcGxpY2l0IG5vdGF0aW9uIGNhc2UuIEZsb3ctc3R5bGUgbm9kZSBhcyB0aGUga2V5IGZpcnN0LCB0aGVuIFwiOlwiLCBhbmQgdGhlIHZhbHVlLlxuICAgIC8vXG4gICAgfSBlbHNlIHtcbiAgICAgIF9rZXlMaW5lID0gc3RhdGUubGluZTtcbiAgICAgIF9rZXlMaW5lU3RhcnQgPSBzdGF0ZS5saW5lU3RhcnQ7XG4gICAgICBfa2V5UG9zID0gc3RhdGUucG9zaXRpb247XG5cbiAgICAgIGlmICghY29tcG9zZU5vZGUoc3RhdGUsIGZsb3dJbmRlbnQsIENPTlRFWFRfRkxPV19PVVQsIGZhbHNlLCB0cnVlKSkge1xuICAgICAgICAvLyBOZWl0aGVyIGltcGxpY2l0IG5vciBleHBsaWNpdCBub3RhdGlvbi5cbiAgICAgICAgLy8gUmVhZGluZyBpcyBkb25lLiBHbyB0byB0aGUgZXBpbG9ndWUuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUubGluZSA9PT0gX2xpbmUpIHtcbiAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICAgICAgICB3aGlsZSAoaXNfV0hJVEVfU1BBQ0UoY2gpKSB7XG4gICAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoID09PSAweDNBLyogOiAqLykge1xuICAgICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcblxuICAgICAgICAgIGlmICghaXNfV1NfT1JfRU9MKGNoKSkge1xuICAgICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2Egd2hpdGVzcGFjZSBjaGFyYWN0ZXIgaXMgZXhwZWN0ZWQgYWZ0ZXIgdGhlIGtleS12YWx1ZSBzZXBhcmF0b3Igd2l0aGluIGEgYmxvY2sgbWFwcGluZycpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhdEV4cGxpY2l0S2V5KSB7XG4gICAgICAgICAgICBzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBfcmVzdWx0LCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgbnVsbCwgX2tleUxpbmUsIF9rZXlMaW5lU3RhcnQsIF9rZXlQb3MpO1xuICAgICAgICAgICAga2V5VGFnID0ga2V5Tm9kZSA9IHZhbHVlTm9kZSA9IG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGV0ZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgIGF0RXhwbGljaXRLZXkgPSBmYWxzZTtcbiAgICAgICAgICBhbGxvd0NvbXBhY3QgPSBmYWxzZTtcbiAgICAgICAgICBrZXlUYWcgPSBzdGF0ZS50YWc7XG4gICAgICAgICAga2V5Tm9kZSA9IHN0YXRlLnJlc3VsdDtcblxuICAgICAgICB9IGVsc2UgaWYgKGRldGVjdGVkKSB7XG4gICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2NhbiBub3QgcmVhZCBhbiBpbXBsaWNpdCBtYXBwaW5nIHBhaXI7IGEgY29sb24gaXMgbWlzc2VkJyk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGF0ZS50YWcgPSBfdGFnO1xuICAgICAgICAgIHN0YXRlLmFuY2hvciA9IF9hbmNob3I7XG4gICAgICAgICAgcmV0dXJuIHRydWU7IC8vIEtlZXAgdGhlIHJlc3VsdCBvZiBgY29tcG9zZU5vZGVgLlxuICAgICAgICB9XG5cbiAgICAgIH0gZWxzZSBpZiAoZGV0ZWN0ZWQpIHtcbiAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2NhbiBub3QgcmVhZCBhIGJsb2NrIG1hcHBpbmcgZW50cnk7IGEgbXVsdGlsaW5lIGtleSBtYXkgbm90IGJlIGFuIGltcGxpY2l0IGtleScpO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS50YWcgPSBfdGFnO1xuICAgICAgICBzdGF0ZS5hbmNob3IgPSBfYW5jaG9yO1xuICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gS2VlcCB0aGUgcmVzdWx0IG9mIGBjb21wb3NlTm9kZWAuXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBDb21tb24gcmVhZGluZyBjb2RlIGZvciBib3RoIGV4cGxpY2l0IGFuZCBpbXBsaWNpdCBub3RhdGlvbnMuXG4gICAgLy9cbiAgICBpZiAoc3RhdGUubGluZSA9PT0gX2xpbmUgfHwgc3RhdGUubGluZUluZGVudCA+IG5vZGVJbmRlbnQpIHtcbiAgICAgIGlmIChhdEV4cGxpY2l0S2V5KSB7XG4gICAgICAgIF9rZXlMaW5lID0gc3RhdGUubGluZTtcbiAgICAgICAgX2tleUxpbmVTdGFydCA9IHN0YXRlLmxpbmVTdGFydDtcbiAgICAgICAgX2tleVBvcyA9IHN0YXRlLnBvc2l0aW9uO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29tcG9zZU5vZGUoc3RhdGUsIG5vZGVJbmRlbnQsIENPTlRFWFRfQkxPQ0tfT1VULCB0cnVlLCBhbGxvd0NvbXBhY3QpKSB7XG4gICAgICAgIGlmIChhdEV4cGxpY2l0S2V5KSB7XG4gICAgICAgICAga2V5Tm9kZSA9IHN0YXRlLnJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZU5vZGUgPSBzdGF0ZS5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFhdEV4cGxpY2l0S2V5KSB7XG4gICAgICAgIHN0b3JlTWFwcGluZ1BhaXIoc3RhdGUsIF9yZXN1bHQsIG92ZXJyaWRhYmxlS2V5cywga2V5VGFnLCBrZXlOb2RlLCB2YWx1ZU5vZGUsIF9rZXlMaW5lLCBfa2V5TGluZVN0YXJ0LCBfa2V5UG9zKTtcbiAgICAgICAga2V5VGFnID0ga2V5Tm9kZSA9IHZhbHVlTm9kZSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKChzdGF0ZS5saW5lID09PSBfbGluZSB8fCBzdGF0ZS5saW5lSW5kZW50ID4gbm9kZUluZGVudCkgJiYgKGNoICE9PSAwKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2JhZCBpbmRlbnRhdGlvbiBvZiBhIG1hcHBpbmcgZW50cnknKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPCBub2RlSW5kZW50KSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICAvL1xuICAvLyBFcGlsb2d1ZS5cbiAgLy9cblxuICAvLyBTcGVjaWFsIGNhc2U6IGxhc3QgbWFwcGluZydzIG5vZGUgY29udGFpbnMgb25seSB0aGUga2V5IGluIGV4cGxpY2l0IG5vdGF0aW9uLlxuICBpZiAoYXRFeHBsaWNpdEtleSkge1xuICAgIHN0b3JlTWFwcGluZ1BhaXIoc3RhdGUsIF9yZXN1bHQsIG92ZXJyaWRhYmxlS2V5cywga2V5VGFnLCBrZXlOb2RlLCBudWxsLCBfa2V5TGluZSwgX2tleUxpbmVTdGFydCwgX2tleVBvcyk7XG4gIH1cblxuICAvLyBFeHBvc2UgdGhlIHJlc3VsdGluZyBtYXBwaW5nLlxuICBpZiAoZGV0ZWN0ZWQpIHtcbiAgICBzdGF0ZS50YWcgPSBfdGFnO1xuICAgIHN0YXRlLmFuY2hvciA9IF9hbmNob3I7XG4gICAgc3RhdGUua2luZCA9ICdtYXBwaW5nJztcbiAgICBzdGF0ZS5yZXN1bHQgPSBfcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGRldGVjdGVkO1xufVxuXG5mdW5jdGlvbiByZWFkVGFnUHJvcGVydHkoc3RhdGUpIHtcbiAgdmFyIF9wb3NpdGlvbixcbiAgICAgIGlzVmVyYmF0aW0gPSBmYWxzZSxcbiAgICAgIGlzTmFtZWQgICAgPSBmYWxzZSxcbiAgICAgIHRhZ0hhbmRsZSxcbiAgICAgIHRhZ05hbWUsXG4gICAgICBjaDtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChjaCAhPT0gMHgyMS8qICEgKi8pIHJldHVybiBmYWxzZTtcblxuICBpZiAoc3RhdGUudGFnICE9PSBudWxsKSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2R1cGxpY2F0aW9uIG9mIGEgdGFnIHByb3BlcnR5Jyk7XG4gIH1cblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoID09PSAweDNDLyogPCAqLykge1xuICAgIGlzVmVyYmF0aW0gPSB0cnVlO1xuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcblxuICB9IGVsc2UgaWYgKGNoID09PSAweDIxLyogISAqLykge1xuICAgIGlzTmFtZWQgPSB0cnVlO1xuICAgIHRhZ0hhbmRsZSA9ICchISc7XG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuXG4gIH0gZWxzZSB7XG4gICAgdGFnSGFuZGxlID0gJyEnO1xuICB9XG5cbiAgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb247XG5cbiAgaWYgKGlzVmVyYmF0aW0pIHtcbiAgICBkbyB7IGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTsgfVxuICAgIHdoaWxlIChjaCAhPT0gMCAmJiBjaCAhPT0gMHgzRS8qID4gKi8pO1xuXG4gICAgaWYgKHN0YXRlLnBvc2l0aW9uIDwgc3RhdGUubGVuZ3RoKSB7XG4gICAgICB0YWdOYW1lID0gc3RhdGUuaW5wdXQuc2xpY2UoX3Bvc2l0aW9uLCBzdGF0ZS5wb3NpdGlvbik7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmV4cGVjdGVkIGVuZCBvZiB0aGUgc3RyZWFtIHdpdGhpbiBhIHZlcmJhdGltIHRhZycpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoY2ggIT09IDAgJiYgIWlzX1dTX09SX0VPTChjaCkpIHtcblxuICAgICAgaWYgKGNoID09PSAweDIxLyogISAqLykge1xuICAgICAgICBpZiAoIWlzTmFtZWQpIHtcbiAgICAgICAgICB0YWdIYW5kbGUgPSBzdGF0ZS5pbnB1dC5zbGljZShfcG9zaXRpb24gLSAxLCBzdGF0ZS5wb3NpdGlvbiArIDEpO1xuXG4gICAgICAgICAgaWYgKCFQQVRURVJOX1RBR19IQU5ETEUudGVzdCh0YWdIYW5kbGUpKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnbmFtZWQgdGFnIGhhbmRsZSBjYW5ub3QgY29udGFpbiBzdWNoIGNoYXJhY3RlcnMnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpc05hbWVkID0gdHJ1ZTtcbiAgICAgICAgICBfcG9zaXRpb24gPSBzdGF0ZS5wb3NpdGlvbiArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3RhZyBzdWZmaXggY2Fubm90IGNvbnRhaW4gZXhjbGFtYXRpb24gbWFya3MnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgdGFnTmFtZSA9IHN0YXRlLmlucHV0LnNsaWNlKF9wb3NpdGlvbiwgc3RhdGUucG9zaXRpb24pO1xuXG4gICAgaWYgKFBBVFRFUk5fRkxPV19JTkRJQ0FUT1JTLnRlc3QodGFnTmFtZSkpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd0YWcgc3VmZml4IGNhbm5vdCBjb250YWluIGZsb3cgaW5kaWNhdG9yIGNoYXJhY3RlcnMnKTtcbiAgICB9XG4gIH1cblxuICBpZiAodGFnTmFtZSAmJiAhUEFUVEVSTl9UQUdfVVJJLnRlc3QodGFnTmFtZSkpIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGFnIG5hbWUgY2Fubm90IGNvbnRhaW4gc3VjaCBjaGFyYWN0ZXJzOiAnICsgdGFnTmFtZSk7XG4gIH1cblxuICB0cnkge1xuICAgIHRhZ05hbWUgPSBkZWNvZGVVUklDb21wb25lbnQodGFnTmFtZSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICd0YWcgbmFtZSBpcyBtYWxmb3JtZWQ6ICcgKyB0YWdOYW1lKTtcbiAgfVxuXG4gIGlmIChpc1ZlcmJhdGltKSB7XG4gICAgc3RhdGUudGFnID0gdGFnTmFtZTtcblxuICB9IGVsc2UgaWYgKF9oYXNPd25Qcm9wZXJ0eSQxLmNhbGwoc3RhdGUudGFnTWFwLCB0YWdIYW5kbGUpKSB7XG4gICAgc3RhdGUudGFnID0gc3RhdGUudGFnTWFwW3RhZ0hhbmRsZV0gKyB0YWdOYW1lO1xuXG4gIH0gZWxzZSBpZiAodGFnSGFuZGxlID09PSAnIScpIHtcbiAgICBzdGF0ZS50YWcgPSAnIScgKyB0YWdOYW1lO1xuXG4gIH0gZWxzZSBpZiAodGFnSGFuZGxlID09PSAnISEnKSB7XG4gICAgc3RhdGUudGFnID0gJ3RhZzp5YW1sLm9yZywyMDAyOicgKyB0YWdOYW1lO1xuXG4gIH0gZWxzZSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuZGVjbGFyZWQgdGFnIGhhbmRsZSBcIicgKyB0YWdIYW5kbGUgKyAnXCInKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZWFkQW5jaG9yUHJvcGVydHkoc3RhdGUpIHtcbiAgdmFyIF9wb3NpdGlvbixcbiAgICAgIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoICE9PSAweDI2LyogJiAqLykgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnZHVwbGljYXRpb24gb2YgYW4gYW5jaG9yIHByb3BlcnR5Jyk7XG4gIH1cblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gIHdoaWxlIChjaCAhPT0gMCAmJiAhaXNfV1NfT1JfRU9MKGNoKSAmJiAhaXNfRkxPV19JTkRJQ0FUT1IoY2gpKSB7XG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICB9XG5cbiAgaWYgKHN0YXRlLnBvc2l0aW9uID09PSBfcG9zaXRpb24pIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnbmFtZSBvZiBhbiBhbmNob3Igbm9kZSBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIGNoYXJhY3RlcicpO1xuICB9XG5cbiAgc3RhdGUuYW5jaG9yID0gc3RhdGUuaW5wdXQuc2xpY2UoX3Bvc2l0aW9uLCBzdGF0ZS5wb3NpdGlvbik7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZWFkQWxpYXMoc3RhdGUpIHtcbiAgdmFyIF9wb3NpdGlvbiwgYWxpYXMsXG4gICAgICBjaDtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChjaCAhPT0gMHgyQS8qICogKi8pIHJldHVybiBmYWxzZTtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gIHdoaWxlIChjaCAhPT0gMCAmJiAhaXNfV1NfT1JfRU9MKGNoKSAmJiAhaXNfRkxPV19JTkRJQ0FUT1IoY2gpKSB7XG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICB9XG5cbiAgaWYgKHN0YXRlLnBvc2l0aW9uID09PSBfcG9zaXRpb24pIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnbmFtZSBvZiBhbiBhbGlhcyBub2RlIG11c3QgY29udGFpbiBhdCBsZWFzdCBvbmUgY2hhcmFjdGVyJyk7XG4gIH1cblxuICBhbGlhcyA9IHN0YXRlLmlucHV0LnNsaWNlKF9wb3NpdGlvbiwgc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmICghX2hhc093blByb3BlcnR5JDEuY2FsbChzdGF0ZS5hbmNob3JNYXAsIGFsaWFzKSkge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmlkZW50aWZpZWQgYWxpYXMgXCInICsgYWxpYXMgKyAnXCInKTtcbiAgfVxuXG4gIHN0YXRlLnJlc3VsdCA9IHN0YXRlLmFuY2hvck1hcFthbGlhc107XG4gIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbXBvc2VOb2RlKHN0YXRlLCBwYXJlbnRJbmRlbnQsIG5vZGVDb250ZXh0LCBhbGxvd1RvU2VlaywgYWxsb3dDb21wYWN0KSB7XG4gIHZhciBhbGxvd0Jsb2NrU3R5bGVzLFxuICAgICAgYWxsb3dCbG9ja1NjYWxhcnMsXG4gICAgICBhbGxvd0Jsb2NrQ29sbGVjdGlvbnMsXG4gICAgICBpbmRlbnRTdGF0dXMgPSAxLCAvLyAxOiB0aGlzPnBhcmVudCwgMDogdGhpcz1wYXJlbnQsIC0xOiB0aGlzPHBhcmVudFxuICAgICAgYXROZXdMaW5lICA9IGZhbHNlLFxuICAgICAgaGFzQ29udGVudCA9IGZhbHNlLFxuICAgICAgdHlwZUluZGV4LFxuICAgICAgdHlwZVF1YW50aXR5LFxuICAgICAgdHlwZUxpc3QsXG4gICAgICB0eXBlLFxuICAgICAgZmxvd0luZGVudCxcbiAgICAgIGJsb2NrSW5kZW50O1xuXG4gIGlmIChzdGF0ZS5saXN0ZW5lciAhPT0gbnVsbCkge1xuICAgIHN0YXRlLmxpc3RlbmVyKCdvcGVuJywgc3RhdGUpO1xuICB9XG5cbiAgc3RhdGUudGFnICAgID0gbnVsbDtcbiAgc3RhdGUuYW5jaG9yID0gbnVsbDtcbiAgc3RhdGUua2luZCAgID0gbnVsbDtcbiAgc3RhdGUucmVzdWx0ID0gbnVsbDtcblxuICBhbGxvd0Jsb2NrU3R5bGVzID0gYWxsb3dCbG9ja1NjYWxhcnMgPSBhbGxvd0Jsb2NrQ29sbGVjdGlvbnMgPVxuICAgIENPTlRFWFRfQkxPQ0tfT1VUID09PSBub2RlQ29udGV4dCB8fFxuICAgIENPTlRFWFRfQkxPQ0tfSU4gID09PSBub2RlQ29udGV4dDtcblxuICBpZiAoYWxsb3dUb1NlZWspIHtcbiAgICBpZiAoc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpKSB7XG4gICAgICBhdE5ld0xpbmUgPSB0cnVlO1xuXG4gICAgICBpZiAoc3RhdGUubGluZUluZGVudCA+IHBhcmVudEluZGVudCkge1xuICAgICAgICBpbmRlbnRTdGF0dXMgPSAxO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5saW5lSW5kZW50ID09PSBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgaW5kZW50U3RhdHVzID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGluZUluZGVudCA8IHBhcmVudEluZGVudCkge1xuICAgICAgICBpbmRlbnRTdGF0dXMgPSAtMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoaW5kZW50U3RhdHVzID09PSAxKSB7XG4gICAgd2hpbGUgKHJlYWRUYWdQcm9wZXJ0eShzdGF0ZSkgfHwgcmVhZEFuY2hvclByb3BlcnR5KHN0YXRlKSkge1xuICAgICAgaWYgKHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKSkge1xuICAgICAgICBhdE5ld0xpbmUgPSB0cnVlO1xuICAgICAgICBhbGxvd0Jsb2NrQ29sbGVjdGlvbnMgPSBhbGxvd0Jsb2NrU3R5bGVzO1xuXG4gICAgICAgIGlmIChzdGF0ZS5saW5lSW5kZW50ID4gcGFyZW50SW5kZW50KSB7XG4gICAgICAgICAgaW5kZW50U3RhdHVzID0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5saW5lSW5kZW50ID09PSBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgICBpbmRlbnRTdGF0dXMgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPCBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgICBpbmRlbnRTdGF0dXMgPSAtMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWxsb3dCbG9ja0NvbGxlY3Rpb25zID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGFsbG93QmxvY2tDb2xsZWN0aW9ucykge1xuICAgIGFsbG93QmxvY2tDb2xsZWN0aW9ucyA9IGF0TmV3TGluZSB8fCBhbGxvd0NvbXBhY3Q7XG4gIH1cblxuICBpZiAoaW5kZW50U3RhdHVzID09PSAxIHx8IENPTlRFWFRfQkxPQ0tfT1VUID09PSBub2RlQ29udGV4dCkge1xuICAgIGlmIChDT05URVhUX0ZMT1dfSU4gPT09IG5vZGVDb250ZXh0IHx8IENPTlRFWFRfRkxPV19PVVQgPT09IG5vZGVDb250ZXh0KSB7XG4gICAgICBmbG93SW5kZW50ID0gcGFyZW50SW5kZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBmbG93SW5kZW50ID0gcGFyZW50SW5kZW50ICsgMTtcbiAgICB9XG5cbiAgICBibG9ja0luZGVudCA9IHN0YXRlLnBvc2l0aW9uIC0gc3RhdGUubGluZVN0YXJ0O1xuXG4gICAgaWYgKGluZGVudFN0YXR1cyA9PT0gMSkge1xuICAgICAgaWYgKGFsbG93QmxvY2tDb2xsZWN0aW9ucyAmJlxuICAgICAgICAgIChyZWFkQmxvY2tTZXF1ZW5jZShzdGF0ZSwgYmxvY2tJbmRlbnQpIHx8XG4gICAgICAgICAgIHJlYWRCbG9ja01hcHBpbmcoc3RhdGUsIGJsb2NrSW5kZW50LCBmbG93SW5kZW50KSkgfHxcbiAgICAgICAgICByZWFkRmxvd0NvbGxlY3Rpb24oc3RhdGUsIGZsb3dJbmRlbnQpKSB7XG4gICAgICAgIGhhc0NvbnRlbnQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKChhbGxvd0Jsb2NrU2NhbGFycyAmJiByZWFkQmxvY2tTY2FsYXIoc3RhdGUsIGZsb3dJbmRlbnQpKSB8fFxuICAgICAgICAgICAgcmVhZFNpbmdsZVF1b3RlZFNjYWxhcihzdGF0ZSwgZmxvd0luZGVudCkgfHxcbiAgICAgICAgICAgIHJlYWREb3VibGVRdW90ZWRTY2FsYXIoc3RhdGUsIGZsb3dJbmRlbnQpKSB7XG4gICAgICAgICAgaGFzQ29udGVudCA9IHRydWU7XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWFkQWxpYXMoc3RhdGUpKSB7XG4gICAgICAgICAgaGFzQ29udGVudCA9IHRydWU7XG5cbiAgICAgICAgICBpZiAoc3RhdGUudGFnICE9PSBudWxsIHx8IHN0YXRlLmFuY2hvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2FsaWFzIG5vZGUgc2hvdWxkIG5vdCBoYXZlIGFueSBwcm9wZXJ0aWVzJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAocmVhZFBsYWluU2NhbGFyKHN0YXRlLCBmbG93SW5kZW50LCBDT05URVhUX0ZMT1dfSU4gPT09IG5vZGVDb250ZXh0KSkge1xuICAgICAgICAgIGhhc0NvbnRlbnQgPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKHN0YXRlLnRhZyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgc3RhdGUudGFnID0gJz8nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICAgICAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IHN0YXRlLnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaW5kZW50U3RhdHVzID09PSAwKSB7XG4gICAgICAvLyBTcGVjaWFsIGNhc2U6IGJsb2NrIHNlcXVlbmNlcyBhcmUgYWxsb3dlZCB0byBoYXZlIHNhbWUgaW5kZW50YXRpb24gbGV2ZWwgYXMgdGhlIHBhcmVudC5cbiAgICAgIC8vIGh0dHA6Ly93d3cueWFtbC5vcmcvc3BlYy8xLjIvc3BlYy5odG1sI2lkMjc5OTc4NFxuICAgICAgaGFzQ29udGVudCA9IGFsbG93QmxvY2tDb2xsZWN0aW9ucyAmJiByZWFkQmxvY2tTZXF1ZW5jZShzdGF0ZSwgYmxvY2tJbmRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0ZS50YWcgPT09IG51bGwpIHtcbiAgICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IHN0YXRlLnJlc3VsdDtcbiAgICB9XG5cbiAgfSBlbHNlIGlmIChzdGF0ZS50YWcgPT09ICc/Jykge1xuICAgIC8vIEltcGxpY2l0IHJlc29sdmluZyBpcyBub3QgYWxsb3dlZCBmb3Igbm9uLXNjYWxhciB0eXBlcywgYW5kICc/J1xuICAgIC8vIG5vbi1zcGVjaWZpYyB0YWcgaXMgb25seSBhdXRvbWF0aWNhbGx5IGFzc2lnbmVkIHRvIHBsYWluIHNjYWxhcnMuXG4gICAgLy9cbiAgICAvLyBXZSBvbmx5IG5lZWQgdG8gY2hlY2sga2luZCBjb25mb3JtaXR5IGluIGNhc2UgdXNlciBleHBsaWNpdGx5IGFzc2lnbnMgJz8nXG4gICAgLy8gdGFnLCBmb3IgZXhhbXBsZSBsaWtlIHRoaXM6IFwiITw/PiBbMF1cIlxuICAgIC8vXG4gICAgaWYgKHN0YXRlLnJlc3VsdCAhPT0gbnVsbCAmJiBzdGF0ZS5raW5kICE9PSAnc2NhbGFyJykge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuYWNjZXB0YWJsZSBub2RlIGtpbmQgZm9yICE8Pz4gdGFnOyBpdCBzaG91bGQgYmUgXCJzY2FsYXJcIiwgbm90IFwiJyArIHN0YXRlLmtpbmQgKyAnXCInKTtcbiAgICB9XG5cbiAgICBmb3IgKHR5cGVJbmRleCA9IDAsIHR5cGVRdWFudGl0eSA9IHN0YXRlLmltcGxpY2l0VHlwZXMubGVuZ3RoOyB0eXBlSW5kZXggPCB0eXBlUXVhbnRpdHk7IHR5cGVJbmRleCArPSAxKSB7XG4gICAgICB0eXBlID0gc3RhdGUuaW1wbGljaXRUeXBlc1t0eXBlSW5kZXhdO1xuXG4gICAgICBpZiAodHlwZS5yZXNvbHZlKHN0YXRlLnJlc3VsdCkpIHsgLy8gYHN0YXRlLnJlc3VsdGAgdXBkYXRlZCBpbiByZXNvbHZlciBpZiBtYXRjaGVkXG4gICAgICAgIHN0YXRlLnJlc3VsdCA9IHR5cGUuY29uc3RydWN0KHN0YXRlLnJlc3VsdCk7XG4gICAgICAgIHN0YXRlLnRhZyA9IHR5cGUudGFnO1xuICAgICAgICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgc3RhdGUuYW5jaG9yTWFwW3N0YXRlLmFuY2hvcl0gPSBzdGF0ZS5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHN0YXRlLnRhZyAhPT0gJyEnKSB7XG4gICAgaWYgKF9oYXNPd25Qcm9wZXJ0eSQxLmNhbGwoc3RhdGUudHlwZU1hcFtzdGF0ZS5raW5kIHx8ICdmYWxsYmFjayddLCBzdGF0ZS50YWcpKSB7XG4gICAgICB0eXBlID0gc3RhdGUudHlwZU1hcFtzdGF0ZS5raW5kIHx8ICdmYWxsYmFjayddW3N0YXRlLnRhZ107XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGxvb2tpbmcgZm9yIG11bHRpIHR5cGVcbiAgICAgIHR5cGUgPSBudWxsO1xuICAgICAgdHlwZUxpc3QgPSBzdGF0ZS50eXBlTWFwLm11bHRpW3N0YXRlLmtpbmQgfHwgJ2ZhbGxiYWNrJ107XG5cbiAgICAgIGZvciAodHlwZUluZGV4ID0gMCwgdHlwZVF1YW50aXR5ID0gdHlwZUxpc3QubGVuZ3RoOyB0eXBlSW5kZXggPCB0eXBlUXVhbnRpdHk7IHR5cGVJbmRleCArPSAxKSB7XG4gICAgICAgIGlmIChzdGF0ZS50YWcuc2xpY2UoMCwgdHlwZUxpc3RbdHlwZUluZGV4XS50YWcubGVuZ3RoKSA9PT0gdHlwZUxpc3RbdHlwZUluZGV4XS50YWcpIHtcbiAgICAgICAgICB0eXBlID0gdHlwZUxpc3RbdHlwZUluZGV4XTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdHlwZSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3Vua25vd24gdGFnICE8JyArIHN0YXRlLnRhZyArICc+Jyk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLnJlc3VsdCAhPT0gbnVsbCAmJiB0eXBlLmtpbmQgIT09IHN0YXRlLmtpbmQpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmFjY2VwdGFibGUgbm9kZSBraW5kIGZvciAhPCcgKyBzdGF0ZS50YWcgKyAnPiB0YWc7IGl0IHNob3VsZCBiZSBcIicgKyB0eXBlLmtpbmQgKyAnXCIsIG5vdCBcIicgKyBzdGF0ZS5raW5kICsgJ1wiJyk7XG4gICAgfVxuXG4gICAgaWYgKCF0eXBlLnJlc29sdmUoc3RhdGUucmVzdWx0LCBzdGF0ZS50YWcpKSB7IC8vIGBzdGF0ZS5yZXN1bHRgIHVwZGF0ZWQgaW4gcmVzb2x2ZXIgaWYgbWF0Y2hlZFxuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2Nhbm5vdCByZXNvbHZlIGEgbm9kZSB3aXRoICE8JyArIHN0YXRlLnRhZyArICc+IGV4cGxpY2l0IHRhZycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5yZXN1bHQgPSB0eXBlLmNvbnN0cnVjdChzdGF0ZS5yZXN1bHQsIHN0YXRlLnRhZyk7XG4gICAgICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgICAgIHN0YXRlLmFuY2hvck1hcFtzdGF0ZS5hbmNob3JdID0gc3RhdGUucmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0ZS5saXN0ZW5lciAhPT0gbnVsbCkge1xuICAgIHN0YXRlLmxpc3RlbmVyKCdjbG9zZScsIHN0YXRlKTtcbiAgfVxuICByZXR1cm4gc3RhdGUudGFnICE9PSBudWxsIHx8ICBzdGF0ZS5hbmNob3IgIT09IG51bGwgfHwgaGFzQ29udGVudDtcbn1cblxuZnVuY3Rpb24gcmVhZERvY3VtZW50KHN0YXRlKSB7XG4gIHZhciBkb2N1bWVudFN0YXJ0ID0gc3RhdGUucG9zaXRpb24sXG4gICAgICBfcG9zaXRpb24sXG4gICAgICBkaXJlY3RpdmVOYW1lLFxuICAgICAgZGlyZWN0aXZlQXJncyxcbiAgICAgIGhhc0RpcmVjdGl2ZXMgPSBmYWxzZSxcbiAgICAgIGNoO1xuXG4gIHN0YXRlLnZlcnNpb24gPSBudWxsO1xuICBzdGF0ZS5jaGVja0xpbmVCcmVha3MgPSBzdGF0ZS5sZWdhY3k7XG4gIHN0YXRlLnRhZ01hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHN0YXRlLmFuY2hvck1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgd2hpbGUgKChjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pKSAhPT0gMCkge1xuICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICBpZiAoc3RhdGUubGluZUluZGVudCA+IDAgfHwgY2ggIT09IDB4MjUvKiAlICovKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBoYXNEaXJlY3RpdmVzID0gdHJ1ZTtcbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb247XG5cbiAgICB3aGlsZSAoY2ggIT09IDAgJiYgIWlzX1dTX09SX0VPTChjaCkpIHtcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBkaXJlY3RpdmVOYW1lID0gc3RhdGUuaW5wdXQuc2xpY2UoX3Bvc2l0aW9uLCBzdGF0ZS5wb3NpdGlvbik7XG4gICAgZGlyZWN0aXZlQXJncyA9IFtdO1xuXG4gICAgaWYgKGRpcmVjdGl2ZU5hbWUubGVuZ3RoIDwgMSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2RpcmVjdGl2ZSBuYW1lIG11c3Qgbm90IGJlIGxlc3MgdGhhbiBvbmUgY2hhcmFjdGVyIGluIGxlbmd0aCcpO1xuICAgIH1cblxuICAgIHdoaWxlIChjaCAhPT0gMCkge1xuICAgICAgd2hpbGUgKGlzX1dISVRFX1NQQUNFKGNoKSkge1xuICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaCA9PT0gMHgyMy8qICMgKi8pIHtcbiAgICAgICAgZG8geyBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7IH1cbiAgICAgICAgd2hpbGUgKGNoICE9PSAwICYmICFpc19FT0woY2gpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc19FT0woY2gpKSBicmVhaztcblxuICAgICAgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb247XG5cbiAgICAgIHdoaWxlIChjaCAhPT0gMCAmJiAhaXNfV1NfT1JfRU9MKGNoKSkge1xuICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGRpcmVjdGl2ZUFyZ3MucHVzaChzdGF0ZS5pbnB1dC5zbGljZShfcG9zaXRpb24sIHN0YXRlLnBvc2l0aW9uKSk7XG4gICAgfVxuXG4gICAgaWYgKGNoICE9PSAwKSByZWFkTGluZUJyZWFrKHN0YXRlKTtcblxuICAgIGlmIChfaGFzT3duUHJvcGVydHkkMS5jYWxsKGRpcmVjdGl2ZUhhbmRsZXJzLCBkaXJlY3RpdmVOYW1lKSkge1xuICAgICAgZGlyZWN0aXZlSGFuZGxlcnNbZGlyZWN0aXZlTmFtZV0oc3RhdGUsIGRpcmVjdGl2ZU5hbWUsIGRpcmVjdGl2ZUFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvd1dhcm5pbmcoc3RhdGUsICd1bmtub3duIGRvY3VtZW50IGRpcmVjdGl2ZSBcIicgKyBkaXJlY3RpdmVOYW1lICsgJ1wiJyk7XG4gICAgfVxuICB9XG5cbiAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpO1xuXG4gIGlmIChzdGF0ZS5saW5lSW5kZW50ID09PSAwICYmXG4gICAgICBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSAgICAgPT09IDB4MkQvKiAtICovICYmXG4gICAgICBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uICsgMSkgPT09IDB4MkQvKiAtICovICYmXG4gICAgICBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uICsgMikgPT09IDB4MkQvKiAtICovKSB7XG4gICAgc3RhdGUucG9zaXRpb24gKz0gMztcbiAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG5cbiAgfSBlbHNlIGlmIChoYXNEaXJlY3RpdmVzKSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2RpcmVjdGl2ZXMgZW5kIG1hcmsgaXMgZXhwZWN0ZWQnKTtcbiAgfVxuXG4gIGNvbXBvc2VOb2RlKHN0YXRlLCBzdGF0ZS5saW5lSW5kZW50IC0gMSwgQ09OVEVYVF9CTE9DS19PVVQsIGZhbHNlLCB0cnVlKTtcbiAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpO1xuXG4gIGlmIChzdGF0ZS5jaGVja0xpbmVCcmVha3MgJiZcbiAgICAgIFBBVFRFUk5fTk9OX0FTQ0lJX0xJTkVfQlJFQUtTLnRlc3Qoc3RhdGUuaW5wdXQuc2xpY2UoZG9jdW1lbnRTdGFydCwgc3RhdGUucG9zaXRpb24pKSkge1xuICAgIHRocm93V2FybmluZyhzdGF0ZSwgJ25vbi1BU0NJSSBsaW5lIGJyZWFrcyBhcmUgaW50ZXJwcmV0ZWQgYXMgY29udGVudCcpO1xuICB9XG5cbiAgc3RhdGUuZG9jdW1lbnRzLnB1c2goc3RhdGUucmVzdWx0KTtcblxuICBpZiAoc3RhdGUucG9zaXRpb24gPT09IHN0YXRlLmxpbmVTdGFydCAmJiB0ZXN0RG9jdW1lbnRTZXBhcmF0b3Ioc3RhdGUpKSB7XG5cbiAgICBpZiAoc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbikgPT09IDB4MkUvKiAuICovKSB7XG4gICAgICBzdGF0ZS5wb3NpdGlvbiArPSAzO1xuICAgICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoc3RhdGUucG9zaXRpb24gPCAoc3RhdGUubGVuZ3RoIC0gMSkpIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnZW5kIG9mIHRoZSBzdHJlYW0gb3IgYSBkb2N1bWVudCBzZXBhcmF0b3IgaXMgZXhwZWN0ZWQnKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm47XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBsb2FkRG9jdW1lbnRzKGlucHV0LCBvcHRpb25zKSB7XG4gIGlucHV0ID0gU3RyaW5nKGlucHV0KTtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgaWYgKGlucHV0Lmxlbmd0aCAhPT0gMCkge1xuXG4gICAgLy8gQWRkIHRhaWxpbmcgYFxcbmAgaWYgbm90IGV4aXN0c1xuICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KGlucHV0Lmxlbmd0aCAtIDEpICE9PSAweDBBLyogTEYgKi8gJiZcbiAgICAgICAgaW5wdXQuY2hhckNvZGVBdChpbnB1dC5sZW5ndGggLSAxKSAhPT0gMHgwRC8qIENSICovKSB7XG4gICAgICBpbnB1dCArPSAnXFxuJztcbiAgICB9XG5cbiAgICAvLyBTdHJpcCBCT01cbiAgICBpZiAoaW5wdXQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgICBpbnB1dCA9IGlucHV0LnNsaWNlKDEpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBzdGF0ZSA9IG5ldyBTdGF0ZSQxKGlucHV0LCBvcHRpb25zKTtcblxuICB2YXIgbnVsbHBvcyA9IGlucHV0LmluZGV4T2YoJ1xcMCcpO1xuXG4gIGlmIChudWxscG9zICE9PSAtMSkge1xuICAgIHN0YXRlLnBvc2l0aW9uID0gbnVsbHBvcztcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnbnVsbCBieXRlIGlzIG5vdCBhbGxvd2VkIGluIGlucHV0Jyk7XG4gIH1cblxuICAvLyBVc2UgMCBhcyBzdHJpbmcgdGVybWluYXRvci4gVGhhdCBzaWduaWZpY2FudGx5IHNpbXBsaWZpZXMgYm91bmRzIGNoZWNrLlxuICBzdGF0ZS5pbnB1dCArPSAnXFwwJztcblxuICB3aGlsZSAoc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbikgPT09IDB4MjAvKiBTcGFjZSAqLykge1xuICAgIHN0YXRlLmxpbmVJbmRlbnQgKz0gMTtcbiAgICBzdGF0ZS5wb3NpdGlvbiArPSAxO1xuICB9XG5cbiAgd2hpbGUgKHN0YXRlLnBvc2l0aW9uIDwgKHN0YXRlLmxlbmd0aCAtIDEpKSB7XG4gICAgcmVhZERvY3VtZW50KHN0YXRlKTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZS5kb2N1bWVudHM7XG59XG5cblxuZnVuY3Rpb24gbG9hZEFsbCQxKGlucHV0LCBpdGVyYXRvciwgb3B0aW9ucykge1xuICBpZiAoaXRlcmF0b3IgIT09IG51bGwgJiYgdHlwZW9mIGl0ZXJhdG9yID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb3B0aW9ucyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBvcHRpb25zID0gaXRlcmF0b3I7XG4gICAgaXRlcmF0b3IgPSBudWxsO1xuICB9XG5cbiAgdmFyIGRvY3VtZW50cyA9IGxvYWREb2N1bWVudHMoaW5wdXQsIG9wdGlvbnMpO1xuXG4gIGlmICh0eXBlb2YgaXRlcmF0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZG9jdW1lbnRzO1xuICB9XG5cbiAgZm9yICh2YXIgaW5kZXggPSAwLCBsZW5ndGggPSBkb2N1bWVudHMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIGl0ZXJhdG9yKGRvY3VtZW50c1tpbmRleF0pO1xuICB9XG59XG5cblxuZnVuY3Rpb24gbG9hZCQxKGlucHV0LCBvcHRpb25zKSB7XG4gIHZhciBkb2N1bWVudHMgPSBsb2FkRG9jdW1lbnRzKGlucHV0LCBvcHRpb25zKTtcblxuICBpZiAoZG9jdW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIC8qZXNsaW50LWRpc2FibGUgbm8tdW5kZWZpbmVkKi9cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IGVsc2UgaWYgKGRvY3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZG9jdW1lbnRzWzBdO1xuICB9XG4gIHRocm93IG5ldyBleGNlcHRpb24oJ2V4cGVjdGVkIGEgc2luZ2xlIGRvY3VtZW50IGluIHRoZSBzdHJlYW0sIGJ1dCBmb3VuZCBtb3JlJyk7XG59XG5cblxudmFyIGxvYWRBbGxfMSA9IGxvYWRBbGwkMTtcbnZhciBsb2FkXzEgICAgPSBsb2FkJDE7XG5cbnZhciBsb2FkZXIgPSB7XG5cdGxvYWRBbGw6IGxvYWRBbGxfMSxcblx0bG9hZDogbG9hZF8xXG59O1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lKi9cblxuXG5cblxuXG52YXIgX3RvU3RyaW5nICAgICAgID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBfaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgQ0hBUl9CT00gICAgICAgICAgICAgICAgICA9IDB4RkVGRjtcbnZhciBDSEFSX1RBQiAgICAgICAgICAgICAgICAgID0gMHgwOTsgLyogVGFiICovXG52YXIgQ0hBUl9MSU5FX0ZFRUQgICAgICAgICAgICA9IDB4MEE7IC8qIExGICovXG52YXIgQ0hBUl9DQVJSSUFHRV9SRVRVUk4gICAgICA9IDB4MEQ7IC8qIENSICovXG52YXIgQ0hBUl9TUEFDRSAgICAgICAgICAgICAgICA9IDB4MjA7IC8qIFNwYWNlICovXG52YXIgQ0hBUl9FWENMQU1BVElPTiAgICAgICAgICA9IDB4MjE7IC8qICEgKi9cbnZhciBDSEFSX0RPVUJMRV9RVU9URSAgICAgICAgID0gMHgyMjsgLyogXCIgKi9cbnZhciBDSEFSX1NIQVJQICAgICAgICAgICAgICAgID0gMHgyMzsgLyogIyAqL1xudmFyIENIQVJfUEVSQ0VOVCAgICAgICAgICAgICAgPSAweDI1OyAvKiAlICovXG52YXIgQ0hBUl9BTVBFUlNBTkQgICAgICAgICAgICA9IDB4MjY7IC8qICYgKi9cbnZhciBDSEFSX1NJTkdMRV9RVU9URSAgICAgICAgID0gMHgyNzsgLyogJyAqL1xudmFyIENIQVJfQVNURVJJU0sgICAgICAgICAgICAgPSAweDJBOyAvKiAqICovXG52YXIgQ0hBUl9DT01NQSAgICAgICAgICAgICAgICA9IDB4MkM7IC8qICwgKi9cbnZhciBDSEFSX01JTlVTICAgICAgICAgICAgICAgID0gMHgyRDsgLyogLSAqL1xudmFyIENIQVJfQ09MT04gICAgICAgICAgICAgICAgPSAweDNBOyAvKiA6ICovXG52YXIgQ0hBUl9FUVVBTFMgICAgICAgICAgICAgICA9IDB4M0Q7IC8qID0gKi9cbnZhciBDSEFSX0dSRUFURVJfVEhBTiAgICAgICAgID0gMHgzRTsgLyogPiAqL1xudmFyIENIQVJfUVVFU1RJT04gICAgICAgICAgICAgPSAweDNGOyAvKiA/ICovXG52YXIgQ0hBUl9DT01NRVJDSUFMX0FUICAgICAgICA9IDB4NDA7IC8qIEAgKi9cbnZhciBDSEFSX0xFRlRfU1FVQVJFX0JSQUNLRVQgID0gMHg1QjsgLyogWyAqL1xudmFyIENIQVJfUklHSFRfU1FVQVJFX0JSQUNLRVQgPSAweDVEOyAvKiBdICovXG52YXIgQ0hBUl9HUkFWRV9BQ0NFTlQgICAgICAgICA9IDB4NjA7IC8qIGAgKi9cbnZhciBDSEFSX0xFRlRfQ1VSTFlfQlJBQ0tFVCAgID0gMHg3QjsgLyogeyAqL1xudmFyIENIQVJfVkVSVElDQUxfTElORSAgICAgICAgPSAweDdDOyAvKiB8ICovXG52YXIgQ0hBUl9SSUdIVF9DVVJMWV9CUkFDS0VUICA9IDB4N0Q7IC8qIH0gKi9cblxudmFyIEVTQ0FQRV9TRVFVRU5DRVMgPSB7fTtcblxuRVNDQVBFX1NFUVVFTkNFU1sweDAwXSAgID0gJ1xcXFwwJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgwN10gICA9ICdcXFxcYSc7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MDhdICAgPSAnXFxcXGInO1xuRVNDQVBFX1NFUVVFTkNFU1sweDA5XSAgID0gJ1xcXFx0JztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgwQV0gICA9ICdcXFxcbic7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MEJdICAgPSAnXFxcXHYnO1xuRVNDQVBFX1NFUVVFTkNFU1sweDBDXSAgID0gJ1xcXFxmJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgwRF0gICA9ICdcXFxccic7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MUJdICAgPSAnXFxcXGUnO1xuRVNDQVBFX1NFUVVFTkNFU1sweDIyXSAgID0gJ1xcXFxcIic7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4NUNdICAgPSAnXFxcXFxcXFwnO1xuRVNDQVBFX1NFUVVFTkNFU1sweDg1XSAgID0gJ1xcXFxOJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHhBMF0gICA9ICdcXFxcXyc7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MjAyOF0gPSAnXFxcXEwnO1xuRVNDQVBFX1NFUVVFTkNFU1sweDIwMjldID0gJ1xcXFxQJztcblxudmFyIERFUFJFQ0FURURfQk9PTEVBTlNfU1lOVEFYID0gW1xuICAneScsICdZJywgJ3llcycsICdZZXMnLCAnWUVTJywgJ29uJywgJ09uJywgJ09OJyxcbiAgJ24nLCAnTicsICdubycsICdObycsICdOTycsICdvZmYnLCAnT2ZmJywgJ09GRidcbl07XG5cbnZhciBERVBSRUNBVEVEX0JBU0U2MF9TWU5UQVggPSAvXlstK10/WzAtOV9dKyg/OjpbMC05X10rKSsoPzpcXC5bMC05X10qKT8kLztcblxuZnVuY3Rpb24gY29tcGlsZVN0eWxlTWFwKHNjaGVtYSwgbWFwKSB7XG4gIHZhciByZXN1bHQsIGtleXMsIGluZGV4LCBsZW5ndGgsIHRhZywgc3R5bGUsIHR5cGU7XG5cbiAgaWYgKG1hcCA9PT0gbnVsbCkgcmV0dXJuIHt9O1xuXG4gIHJlc3VsdCA9IHt9O1xuICBrZXlzID0gT2JqZWN0LmtleXMobWFwKTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgdGFnID0ga2V5c1tpbmRleF07XG4gICAgc3R5bGUgPSBTdHJpbmcobWFwW3RhZ10pO1xuXG4gICAgaWYgKHRhZy5zbGljZSgwLCAyKSA9PT0gJyEhJykge1xuICAgICAgdGFnID0gJ3RhZzp5YW1sLm9yZywyMDAyOicgKyB0YWcuc2xpY2UoMik7XG4gICAgfVxuICAgIHR5cGUgPSBzY2hlbWEuY29tcGlsZWRUeXBlTWFwWydmYWxsYmFjayddW3RhZ107XG5cbiAgICBpZiAodHlwZSAmJiBfaGFzT3duUHJvcGVydHkuY2FsbCh0eXBlLnN0eWxlQWxpYXNlcywgc3R5bGUpKSB7XG4gICAgICBzdHlsZSA9IHR5cGUuc3R5bGVBbGlhc2VzW3N0eWxlXTtcbiAgICB9XG5cbiAgICByZXN1bHRbdGFnXSA9IHN0eWxlO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZW5jb2RlSGV4KGNoYXJhY3Rlcikge1xuICB2YXIgc3RyaW5nLCBoYW5kbGUsIGxlbmd0aDtcblxuICBzdHJpbmcgPSBjaGFyYWN0ZXIudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG5cbiAgaWYgKGNoYXJhY3RlciA8PSAweEZGKSB7XG4gICAgaGFuZGxlID0gJ3gnO1xuICAgIGxlbmd0aCA9IDI7XG4gIH0gZWxzZSBpZiAoY2hhcmFjdGVyIDw9IDB4RkZGRikge1xuICAgIGhhbmRsZSA9ICd1JztcbiAgICBsZW5ndGggPSA0O1xuICB9IGVsc2UgaWYgKGNoYXJhY3RlciA8PSAweEZGRkZGRkZGKSB7XG4gICAgaGFuZGxlID0gJ1UnO1xuICAgIGxlbmd0aCA9IDg7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IGV4Y2VwdGlvbignY29kZSBwb2ludCB3aXRoaW4gYSBzdHJpbmcgbWF5IG5vdCBiZSBncmVhdGVyIHRoYW4gMHhGRkZGRkZGRicpO1xuICB9XG5cbiAgcmV0dXJuICdcXFxcJyArIGhhbmRsZSArIGNvbW1vbi5yZXBlYXQoJzAnLCBsZW5ndGggLSBzdHJpbmcubGVuZ3RoKSArIHN0cmluZztcbn1cblxuXG52YXIgUVVPVElOR19UWVBFX1NJTkdMRSA9IDEsXG4gICAgUVVPVElOR19UWVBFX0RPVUJMRSA9IDI7XG5cbmZ1bmN0aW9uIFN0YXRlKG9wdGlvbnMpIHtcbiAgdGhpcy5zY2hlbWEgICAgICAgID0gb3B0aW9uc1snc2NoZW1hJ10gfHwgX2RlZmF1bHQ7XG4gIHRoaXMuaW5kZW50ICAgICAgICA9IE1hdGgubWF4KDEsIChvcHRpb25zWydpbmRlbnQnXSB8fCAyKSk7XG4gIHRoaXMubm9BcnJheUluZGVudCA9IG9wdGlvbnNbJ25vQXJyYXlJbmRlbnQnXSB8fCBmYWxzZTtcbiAgdGhpcy5za2lwSW52YWxpZCAgID0gb3B0aW9uc1snc2tpcEludmFsaWQnXSB8fCBmYWxzZTtcbiAgdGhpcy5mbG93TGV2ZWwgICAgID0gKGNvbW1vbi5pc05vdGhpbmcob3B0aW9uc1snZmxvd0xldmVsJ10pID8gLTEgOiBvcHRpb25zWydmbG93TGV2ZWwnXSk7XG4gIHRoaXMuc3R5bGVNYXAgICAgICA9IGNvbXBpbGVTdHlsZU1hcCh0aGlzLnNjaGVtYSwgb3B0aW9uc1snc3R5bGVzJ10gfHwgbnVsbCk7XG4gIHRoaXMuc29ydEtleXMgICAgICA9IG9wdGlvbnNbJ3NvcnRLZXlzJ10gfHwgZmFsc2U7XG4gIHRoaXMubGluZVdpZHRoICAgICA9IG9wdGlvbnNbJ2xpbmVXaWR0aCddIHx8IDgwO1xuICB0aGlzLm5vUmVmcyAgICAgICAgPSBvcHRpb25zWydub1JlZnMnXSB8fCBmYWxzZTtcbiAgdGhpcy5ub0NvbXBhdE1vZGUgID0gb3B0aW9uc1snbm9Db21wYXRNb2RlJ10gfHwgZmFsc2U7XG4gIHRoaXMuY29uZGVuc2VGbG93ICA9IG9wdGlvbnNbJ2NvbmRlbnNlRmxvdyddIHx8IGZhbHNlO1xuICB0aGlzLnF1b3RpbmdUeXBlICAgPSBvcHRpb25zWydxdW90aW5nVHlwZSddID09PSAnXCInID8gUVVPVElOR19UWVBFX0RPVUJMRSA6IFFVT1RJTkdfVFlQRV9TSU5HTEU7XG4gIHRoaXMuZm9yY2VRdW90ZXMgICA9IG9wdGlvbnNbJ2ZvcmNlUXVvdGVzJ10gfHwgZmFsc2U7XG4gIHRoaXMucmVwbGFjZXIgICAgICA9IHR5cGVvZiBvcHRpb25zWydyZXBsYWNlciddID09PSAnZnVuY3Rpb24nID8gb3B0aW9uc1sncmVwbGFjZXInXSA6IG51bGw7XG5cbiAgdGhpcy5pbXBsaWNpdFR5cGVzID0gdGhpcy5zY2hlbWEuY29tcGlsZWRJbXBsaWNpdDtcbiAgdGhpcy5leHBsaWNpdFR5cGVzID0gdGhpcy5zY2hlbWEuY29tcGlsZWRFeHBsaWNpdDtcblxuICB0aGlzLnRhZyA9IG51bGw7XG4gIHRoaXMucmVzdWx0ID0gJyc7XG5cbiAgdGhpcy5kdXBsaWNhdGVzID0gW107XG4gIHRoaXMudXNlZER1cGxpY2F0ZXMgPSBudWxsO1xufVxuXG4vLyBJbmRlbnRzIGV2ZXJ5IGxpbmUgaW4gYSBzdHJpbmcuIEVtcHR5IGxpbmVzIChcXG4gb25seSkgYXJlIG5vdCBpbmRlbnRlZC5cbmZ1bmN0aW9uIGluZGVudFN0cmluZyhzdHJpbmcsIHNwYWNlcykge1xuICB2YXIgaW5kID0gY29tbW9uLnJlcGVhdCgnICcsIHNwYWNlcyksXG4gICAgICBwb3NpdGlvbiA9IDAsXG4gICAgICBuZXh0ID0gLTEsXG4gICAgICByZXN1bHQgPSAnJyxcbiAgICAgIGxpbmUsXG4gICAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuXG4gIHdoaWxlIChwb3NpdGlvbiA8IGxlbmd0aCkge1xuICAgIG5leHQgPSBzdHJpbmcuaW5kZXhPZignXFxuJywgcG9zaXRpb24pO1xuICAgIGlmIChuZXh0ID09PSAtMSkge1xuICAgICAgbGluZSA9IHN0cmluZy5zbGljZShwb3NpdGlvbik7XG4gICAgICBwb3NpdGlvbiA9IGxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGluZSA9IHN0cmluZy5zbGljZShwb3NpdGlvbiwgbmV4dCArIDEpO1xuICAgICAgcG9zaXRpb24gPSBuZXh0ICsgMTtcbiAgICB9XG5cbiAgICBpZiAobGluZS5sZW5ndGggJiYgbGluZSAhPT0gJ1xcbicpIHJlc3VsdCArPSBpbmQ7XG5cbiAgICByZXN1bHQgKz0gbGluZTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlTmV4dExpbmUoc3RhdGUsIGxldmVsKSB7XG4gIHJldHVybiAnXFxuJyArIGNvbW1vbi5yZXBlYXQoJyAnLCBzdGF0ZS5pbmRlbnQgKiBsZXZlbCk7XG59XG5cbmZ1bmN0aW9uIHRlc3RJbXBsaWNpdFJlc29sdmluZyhzdGF0ZSwgc3RyKSB7XG4gIHZhciBpbmRleCwgbGVuZ3RoLCB0eXBlO1xuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBzdGF0ZS5pbXBsaWNpdFR5cGVzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICB0eXBlID0gc3RhdGUuaW1wbGljaXRUeXBlc1tpbmRleF07XG5cbiAgICBpZiAodHlwZS5yZXNvbHZlKHN0cikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLy8gWzMzXSBzLXdoaXRlIDo6PSBzLXNwYWNlIHwgcy10YWJcbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZShjKSB7XG4gIHJldHVybiBjID09PSBDSEFSX1NQQUNFIHx8IGMgPT09IENIQVJfVEFCO1xufVxuXG4vLyBSZXR1cm5zIHRydWUgaWYgdGhlIGNoYXJhY3RlciBjYW4gYmUgcHJpbnRlZCB3aXRob3V0IGVzY2FwaW5nLlxuLy8gRnJvbSBZQU1MIDEuMjogXCJhbnkgYWxsb3dlZCBjaGFyYWN0ZXJzIGtub3duIHRvIGJlIG5vbi1wcmludGFibGVcbi8vIHNob3VsZCBhbHNvIGJlIGVzY2FwZWQuIFtIb3dldmVyLF0gVGhpcyBpc25cdTIwMTl0IG1hbmRhdG9yeVwiXG4vLyBEZXJpdmVkIGZyb20gbmItY2hhciAtIFxcdCAtICN4ODUgLSAjeEEwIC0gI3gyMDI4IC0gI3gyMDI5LlxuZnVuY3Rpb24gaXNQcmludGFibGUoYykge1xuICByZXR1cm4gICgweDAwMDIwIDw9IGMgJiYgYyA8PSAweDAwMDA3RSlcbiAgICAgIHx8ICgoMHgwMDBBMSA8PSBjICYmIGMgPD0gMHgwMEQ3RkYpICYmIGMgIT09IDB4MjAyOCAmJiBjICE9PSAweDIwMjkpXG4gICAgICB8fCAoKDB4MEUwMDAgPD0gYyAmJiBjIDw9IDB4MDBGRkZEKSAmJiBjICE9PSBDSEFSX0JPTSlcbiAgICAgIHx8ICAoMHgxMDAwMCA8PSBjICYmIGMgPD0gMHgxMEZGRkYpO1xufVxuXG4vLyBbMzRdIG5zLWNoYXIgOjo9IG5iLWNoYXIgLSBzLXdoaXRlXG4vLyBbMjddIG5iLWNoYXIgOjo9IGMtcHJpbnRhYmxlIC0gYi1jaGFyIC0gYy1ieXRlLW9yZGVyLW1hcmtcbi8vIFsyNl0gYi1jaGFyICA6Oj0gYi1saW5lLWZlZWQgfCBiLWNhcnJpYWdlLXJldHVyblxuLy8gSW5jbHVkaW5nIHMtd2hpdGUgKGZvciBzb21lIHJlYXNvbiwgZXhhbXBsZXMgZG9lc24ndCBtYXRjaCBzcGVjcyBpbiB0aGlzIGFzcGVjdClcbi8vIG5zLWNoYXIgOjo9IGMtcHJpbnRhYmxlIC0gYi1saW5lLWZlZWQgLSBiLWNhcnJpYWdlLXJldHVybiAtIGMtYnl0ZS1vcmRlci1tYXJrXG5mdW5jdGlvbiBpc05zQ2hhck9yV2hpdGVzcGFjZShjKSB7XG4gIHJldHVybiBpc1ByaW50YWJsZShjKVxuICAgICYmIGMgIT09IENIQVJfQk9NXG4gICAgLy8gLSBiLWNoYXJcbiAgICAmJiBjICE9PSBDSEFSX0NBUlJJQUdFX1JFVFVSTlxuICAgICYmIGMgIT09IENIQVJfTElORV9GRUVEO1xufVxuXG4vLyBbMTI3XSAgbnMtcGxhaW4tc2FmZShjKSA6Oj0gYyA9IGZsb3ctb3V0ICBcdTIxRDIgbnMtcGxhaW4tc2FmZS1vdXRcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gZmxvdy1pbiAgIFx1MjFEMiBucy1wbGFpbi1zYWZlLWluXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IGJsb2NrLWtleSBcdTIxRDIgbnMtcGxhaW4tc2FmZS1vdXRcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gZmxvdy1rZXkgIFx1MjFEMiBucy1wbGFpbi1zYWZlLWluXG4vLyBbMTI4XSBucy1wbGFpbi1zYWZlLW91dCA6Oj0gbnMtY2hhclxuLy8gWzEyOV0gIG5zLXBsYWluLXNhZmUtaW4gOjo9IG5zLWNoYXIgLSBjLWZsb3ctaW5kaWNhdG9yXG4vLyBbMTMwXSAgbnMtcGxhaW4tY2hhcihjKSA6Oj0gICggbnMtcGxhaW4tc2FmZShjKSAtIFx1MjAxQzpcdTIwMUQgLSBcdTIwMUMjXHUyMDFEIClcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgKCAvKiBBbiBucy1jaGFyIHByZWNlZGluZyAqLyBcdTIwMUMjXHUyMDFEIClcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgKCBcdTIwMUM6XHUyMDFEIC8qIEZvbGxvd2VkIGJ5IGFuIG5zLXBsYWluLXNhZmUoYykgKi8gKVxuZnVuY3Rpb24gaXNQbGFpblNhZmUoYywgcHJldiwgaW5ibG9jaykge1xuICB2YXIgY0lzTnNDaGFyT3JXaGl0ZXNwYWNlID0gaXNOc0NoYXJPcldoaXRlc3BhY2UoYyk7XG4gIHZhciBjSXNOc0NoYXIgPSBjSXNOc0NoYXJPcldoaXRlc3BhY2UgJiYgIWlzV2hpdGVzcGFjZShjKTtcbiAgcmV0dXJuIChcbiAgICAvLyBucy1wbGFpbi1zYWZlXG4gICAgaW5ibG9jayA/IC8vIGMgPSBmbG93LWluXG4gICAgICBjSXNOc0NoYXJPcldoaXRlc3BhY2VcbiAgICAgIDogY0lzTnNDaGFyT3JXaGl0ZXNwYWNlXG4gICAgICAgIC8vIC0gYy1mbG93LWluZGljYXRvclxuICAgICAgICAmJiBjICE9PSBDSEFSX0NPTU1BXG4gICAgICAgICYmIGMgIT09IENIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVFxuICAgICAgICAmJiBjICE9PSBDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VUXG4gICAgICAgICYmIGMgIT09IENIQVJfTEVGVF9DVVJMWV9CUkFDS0VUXG4gICAgICAgICYmIGMgIT09IENIQVJfUklHSFRfQ1VSTFlfQlJBQ0tFVFxuICApXG4gICAgLy8gbnMtcGxhaW4tY2hhclxuICAgICYmIGMgIT09IENIQVJfU0hBUlAgLy8gZmFsc2Ugb24gJyMnXG4gICAgJiYgIShwcmV2ID09PSBDSEFSX0NPTE9OICYmICFjSXNOc0NoYXIpIC8vIGZhbHNlIG9uICc6ICdcbiAgICB8fCAoaXNOc0NoYXJPcldoaXRlc3BhY2UocHJldikgJiYgIWlzV2hpdGVzcGFjZShwcmV2KSAmJiBjID09PSBDSEFSX1NIQVJQKSAvLyBjaGFuZ2UgdG8gdHJ1ZSBvbiAnW14gXSMnXG4gICAgfHwgKHByZXYgPT09IENIQVJfQ09MT04gJiYgY0lzTnNDaGFyKTsgLy8gY2hhbmdlIHRvIHRydWUgb24gJzpbXiBdJ1xufVxuXG4vLyBTaW1wbGlmaWVkIHRlc3QgZm9yIHZhbHVlcyBhbGxvd2VkIGFzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaW4gcGxhaW4gc3R5bGUuXG5mdW5jdGlvbiBpc1BsYWluU2FmZUZpcnN0KGMpIHtcbiAgLy8gVXNlcyBhIHN1YnNldCBvZiBucy1jaGFyIC0gYy1pbmRpY2F0b3JcbiAgLy8gd2hlcmUgbnMtY2hhciA9IG5iLWNoYXIgLSBzLXdoaXRlLlxuICAvLyBObyBzdXBwb3J0IG9mICggKCBcdTIwMUM/XHUyMDFEIHwgXHUyMDFDOlx1MjAxRCB8IFx1MjAxQy1cdTIwMUQgKSAvKiBGb2xsb3dlZCBieSBhbiBucy1wbGFpbi1zYWZlKGMpKSAqLyApIHBhcnRcbiAgcmV0dXJuIGlzUHJpbnRhYmxlKGMpICYmIGMgIT09IENIQVJfQk9NXG4gICAgJiYgIWlzV2hpdGVzcGFjZShjKSAvLyAtIHMtd2hpdGVcbiAgICAvLyAtIChjLWluZGljYXRvciA6Oj1cbiAgICAvLyBcdTIwMUMtXHUyMDFEIHwgXHUyMDFDP1x1MjAxRCB8IFx1MjAxQzpcdTIwMUQgfCBcdTIwMUMsXHUyMDFEIHwgXHUyMDFDW1x1MjAxRCB8IFx1MjAxQ11cdTIwMUQgfCBcdTIwMUN7XHUyMDFEIHwgXHUyMDFDfVx1MjAxRFxuICAgICYmIGMgIT09IENIQVJfTUlOVVNcbiAgICAmJiBjICE9PSBDSEFSX1FVRVNUSU9OXG4gICAgJiYgYyAhPT0gQ0hBUl9DT0xPTlxuICAgICYmIGMgIT09IENIQVJfQ09NTUFcbiAgICAmJiBjICE9PSBDSEFSX0xFRlRfU1FVQVJFX0JSQUNLRVRcbiAgICAmJiBjICE9PSBDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VUXG4gICAgJiYgYyAhPT0gQ0hBUl9MRUZUX0NVUkxZX0JSQUNLRVRcbiAgICAmJiBjICE9PSBDSEFSX1JJR0hUX0NVUkxZX0JSQUNLRVRcbiAgICAvLyB8IFx1MjAxQyNcdTIwMUQgfCBcdTIwMUMmXHUyMDFEIHwgXHUyMDFDKlx1MjAxRCB8IFx1MjAxQyFcdTIwMUQgfCBcdTIwMUN8XHUyMDFEIHwgXHUyMDFDPVx1MjAxRCB8IFx1MjAxQz5cdTIwMUQgfCBcdTIwMUMnXHUyMDFEIHwgXHUyMDFDXCJcdTIwMURcbiAgICAmJiBjICE9PSBDSEFSX1NIQVJQXG4gICAgJiYgYyAhPT0gQ0hBUl9BTVBFUlNBTkRcbiAgICAmJiBjICE9PSBDSEFSX0FTVEVSSVNLXG4gICAgJiYgYyAhPT0gQ0hBUl9FWENMQU1BVElPTlxuICAgICYmIGMgIT09IENIQVJfVkVSVElDQUxfTElORVxuICAgICYmIGMgIT09IENIQVJfRVFVQUxTXG4gICAgJiYgYyAhPT0gQ0hBUl9HUkVBVEVSX1RIQU5cbiAgICAmJiBjICE9PSBDSEFSX1NJTkdMRV9RVU9URVxuICAgICYmIGMgIT09IENIQVJfRE9VQkxFX1FVT1RFXG4gICAgLy8gfCBcdTIwMUMlXHUyMDFEIHwgXHUyMDFDQFx1MjAxRCB8IFx1MjAxQ2BcdTIwMUQpXG4gICAgJiYgYyAhPT0gQ0hBUl9QRVJDRU5UXG4gICAgJiYgYyAhPT0gQ0hBUl9DT01NRVJDSUFMX0FUXG4gICAgJiYgYyAhPT0gQ0hBUl9HUkFWRV9BQ0NFTlQ7XG59XG5cbi8vIFNpbXBsaWZpZWQgdGVzdCBmb3IgdmFsdWVzIGFsbG93ZWQgYXMgdGhlIGxhc3QgY2hhcmFjdGVyIGluIHBsYWluIHN0eWxlLlxuZnVuY3Rpb24gaXNQbGFpblNhZmVMYXN0KGMpIHtcbiAgLy8ganVzdCBub3Qgd2hpdGVzcGFjZSBvciBjb2xvbiwgaXQgd2lsbCBiZSBjaGVja2VkIHRvIGJlIHBsYWluIGNoYXJhY3RlciBsYXRlclxuICByZXR1cm4gIWlzV2hpdGVzcGFjZShjKSAmJiBjICE9PSBDSEFSX0NPTE9OO1xufVxuXG4vLyBTYW1lIGFzICdzdHJpbmcnLmNvZGVQb2ludEF0KHBvcyksIGJ1dCB3b3JrcyBpbiBvbGRlciBicm93c2Vycy5cbmZ1bmN0aW9uIGNvZGVQb2ludEF0KHN0cmluZywgcG9zKSB7XG4gIHZhciBmaXJzdCA9IHN0cmluZy5jaGFyQ29kZUF0KHBvcyksIHNlY29uZDtcbiAgaWYgKGZpcnN0ID49IDB4RDgwMCAmJiBmaXJzdCA8PSAweERCRkYgJiYgcG9zICsgMSA8IHN0cmluZy5sZW5ndGgpIHtcbiAgICBzZWNvbmQgPSBzdHJpbmcuY2hhckNvZGVBdChwb3MgKyAxKTtcbiAgICBpZiAoc2Vjb25kID49IDB4REMwMCAmJiBzZWNvbmQgPD0gMHhERkZGKSB7XG4gICAgICAvLyBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZyNzdXJyb2dhdGUtZm9ybXVsYWVcbiAgICAgIHJldHVybiAoZmlyc3QgLSAweEQ4MDApICogMHg0MDAgKyBzZWNvbmQgLSAweERDMDAgKyAweDEwMDAwO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmlyc3Q7XG59XG5cbi8vIERldGVybWluZXMgd2hldGhlciBibG9jayBpbmRlbnRhdGlvbiBpbmRpY2F0b3IgaXMgcmVxdWlyZWQuXG5mdW5jdGlvbiBuZWVkSW5kZW50SW5kaWNhdG9yKHN0cmluZykge1xuICB2YXIgbGVhZGluZ1NwYWNlUmUgPSAvXlxcbiogLztcbiAgcmV0dXJuIGxlYWRpbmdTcGFjZVJlLnRlc3Qoc3RyaW5nKTtcbn1cblxudmFyIFNUWUxFX1BMQUlOICAgPSAxLFxuICAgIFNUWUxFX1NJTkdMRSAgPSAyLFxuICAgIFNUWUxFX0xJVEVSQUwgPSAzLFxuICAgIFNUWUxFX0ZPTERFRCAgPSA0LFxuICAgIFNUWUxFX0RPVUJMRSAgPSA1O1xuXG4vLyBEZXRlcm1pbmVzIHdoaWNoIHNjYWxhciBzdHlsZXMgYXJlIHBvc3NpYmxlIGFuZCByZXR1cm5zIHRoZSBwcmVmZXJyZWQgc3R5bGUuXG4vLyBsaW5lV2lkdGggPSAtMSA9PiBubyBsaW1pdC5cbi8vIFByZS1jb25kaXRpb25zOiBzdHIubGVuZ3RoID4gMC5cbi8vIFBvc3QtY29uZGl0aW9uczpcbi8vICAgIFNUWUxFX1BMQUlOIG9yIFNUWUxFX1NJTkdMRSA9PiBubyBcXG4gYXJlIGluIHRoZSBzdHJpbmcuXG4vLyAgICBTVFlMRV9MSVRFUkFMID0+IG5vIGxpbmVzIGFyZSBzdWl0YWJsZSBmb3IgZm9sZGluZyAob3IgbGluZVdpZHRoIGlzIC0xKS5cbi8vICAgIFNUWUxFX0ZPTERFRCA9PiBhIGxpbmUgPiBsaW5lV2lkdGggYW5kIGNhbiBiZSBmb2xkZWQgKGFuZCBsaW5lV2lkdGggIT0gLTEpLlxuZnVuY3Rpb24gY2hvb3NlU2NhbGFyU3R5bGUoc3RyaW5nLCBzaW5nbGVMaW5lT25seSwgaW5kZW50UGVyTGV2ZWwsIGxpbmVXaWR0aCxcbiAgdGVzdEFtYmlndW91c1R5cGUsIHF1b3RpbmdUeXBlLCBmb3JjZVF1b3RlcywgaW5ibG9jaykge1xuXG4gIHZhciBpO1xuICB2YXIgY2hhciA9IDA7XG4gIHZhciBwcmV2Q2hhciA9IG51bGw7XG4gIHZhciBoYXNMaW5lQnJlYWsgPSBmYWxzZTtcbiAgdmFyIGhhc0ZvbGRhYmxlTGluZSA9IGZhbHNlOyAvLyBvbmx5IGNoZWNrZWQgaWYgc2hvdWxkVHJhY2tXaWR0aFxuICB2YXIgc2hvdWxkVHJhY2tXaWR0aCA9IGxpbmVXaWR0aCAhPT0gLTE7XG4gIHZhciBwcmV2aW91c0xpbmVCcmVhayA9IC0xOyAvLyBjb3VudCB0aGUgZmlyc3QgbGluZSBjb3JyZWN0bHlcbiAgdmFyIHBsYWluID0gaXNQbGFpblNhZmVGaXJzdChjb2RlUG9pbnRBdChzdHJpbmcsIDApKVxuICAgICAgICAgICYmIGlzUGxhaW5TYWZlTGFzdChjb2RlUG9pbnRBdChzdHJpbmcsIHN0cmluZy5sZW5ndGggLSAxKSk7XG5cbiAgaWYgKHNpbmdsZUxpbmVPbmx5IHx8IGZvcmNlUXVvdGVzKSB7XG4gICAgLy8gQ2FzZTogbm8gYmxvY2sgc3R5bGVzLlxuICAgIC8vIENoZWNrIGZvciBkaXNhbGxvd2VkIGNoYXJhY3RlcnMgdG8gcnVsZSBvdXQgcGxhaW4gYW5kIHNpbmdsZS5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgY2hhciA+PSAweDEwMDAwID8gaSArPSAyIDogaSsrKSB7XG4gICAgICBjaGFyID0gY29kZVBvaW50QXQoc3RyaW5nLCBpKTtcbiAgICAgIGlmICghaXNQcmludGFibGUoY2hhcikpIHtcbiAgICAgICAgcmV0dXJuIFNUWUxFX0RPVUJMRTtcbiAgICAgIH1cbiAgICAgIHBsYWluID0gcGxhaW4gJiYgaXNQbGFpblNhZmUoY2hhciwgcHJldkNoYXIsIGluYmxvY2spO1xuICAgICAgcHJldkNoYXIgPSBjaGFyO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBDYXNlOiBibG9jayBzdHlsZXMgcGVybWl0dGVkLlxuICAgIGZvciAoaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyBjaGFyID49IDB4MTAwMDAgPyBpICs9IDIgOiBpKyspIHtcbiAgICAgIGNoYXIgPSBjb2RlUG9pbnRBdChzdHJpbmcsIGkpO1xuICAgICAgaWYgKGNoYXIgPT09IENIQVJfTElORV9GRUVEKSB7XG4gICAgICAgIGhhc0xpbmVCcmVhayA9IHRydWU7XG4gICAgICAgIC8vIENoZWNrIGlmIGFueSBsaW5lIGNhbiBiZSBmb2xkZWQuXG4gICAgICAgIGlmIChzaG91bGRUcmFja1dpZHRoKSB7XG4gICAgICAgICAgaGFzRm9sZGFibGVMaW5lID0gaGFzRm9sZGFibGVMaW5lIHx8XG4gICAgICAgICAgICAvLyBGb2xkYWJsZSBsaW5lID0gdG9vIGxvbmcsIGFuZCBub3QgbW9yZS1pbmRlbnRlZC5cbiAgICAgICAgICAgIChpIC0gcHJldmlvdXNMaW5lQnJlYWsgLSAxID4gbGluZVdpZHRoICYmXG4gICAgICAgICAgICAgc3RyaW5nW3ByZXZpb3VzTGluZUJyZWFrICsgMV0gIT09ICcgJyk7XG4gICAgICAgICAgcHJldmlvdXNMaW5lQnJlYWsgPSBpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFpc1ByaW50YWJsZShjaGFyKSkge1xuICAgICAgICByZXR1cm4gU1RZTEVfRE9VQkxFO1xuICAgICAgfVxuICAgICAgcGxhaW4gPSBwbGFpbiAmJiBpc1BsYWluU2FmZShjaGFyLCBwcmV2Q2hhciwgaW5ibG9jayk7XG4gICAgICBwcmV2Q2hhciA9IGNoYXI7XG4gICAgfVxuICAgIC8vIGluIGNhc2UgdGhlIGVuZCBpcyBtaXNzaW5nIGEgXFxuXG4gICAgaGFzRm9sZGFibGVMaW5lID0gaGFzRm9sZGFibGVMaW5lIHx8IChzaG91bGRUcmFja1dpZHRoICYmXG4gICAgICAoaSAtIHByZXZpb3VzTGluZUJyZWFrIC0gMSA+IGxpbmVXaWR0aCAmJlxuICAgICAgIHN0cmluZ1twcmV2aW91c0xpbmVCcmVhayArIDFdICE9PSAnICcpKTtcbiAgfVxuICAvLyBBbHRob3VnaCBldmVyeSBzdHlsZSBjYW4gcmVwcmVzZW50IFxcbiB3aXRob3V0IGVzY2FwaW5nLCBwcmVmZXIgYmxvY2sgc3R5bGVzXG4gIC8vIGZvciBtdWx0aWxpbmUsIHNpbmNlIHRoZXkncmUgbW9yZSByZWFkYWJsZSBhbmQgdGhleSBkb24ndCBhZGQgZW1wdHkgbGluZXMuXG4gIC8vIEFsc28gcHJlZmVyIGZvbGRpbmcgYSBzdXBlci1sb25nIGxpbmUuXG4gIGlmICghaGFzTGluZUJyZWFrICYmICFoYXNGb2xkYWJsZUxpbmUpIHtcbiAgICAvLyBTdHJpbmdzIGludGVycHJldGFibGUgYXMgYW5vdGhlciB0eXBlIGhhdmUgdG8gYmUgcXVvdGVkO1xuICAgIC8vIGUuZy4gdGhlIHN0cmluZyAndHJ1ZScgdnMuIHRoZSBib29sZWFuIHRydWUuXG4gICAgaWYgKHBsYWluICYmICFmb3JjZVF1b3RlcyAmJiAhdGVzdEFtYmlndW91c1R5cGUoc3RyaW5nKSkge1xuICAgICAgcmV0dXJuIFNUWUxFX1BMQUlOO1xuICAgIH1cbiAgICByZXR1cm4gcXVvdGluZ1R5cGUgPT09IFFVT1RJTkdfVFlQRV9ET1VCTEUgPyBTVFlMRV9ET1VCTEUgOiBTVFlMRV9TSU5HTEU7XG4gIH1cbiAgLy8gRWRnZSBjYXNlOiBibG9jayBpbmRlbnRhdGlvbiBpbmRpY2F0b3IgY2FuIG9ubHkgaGF2ZSBvbmUgZGlnaXQuXG4gIGlmIChpbmRlbnRQZXJMZXZlbCA+IDkgJiYgbmVlZEluZGVudEluZGljYXRvcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIFNUWUxFX0RPVUJMRTtcbiAgfVxuICAvLyBBdCB0aGlzIHBvaW50IHdlIGtub3cgYmxvY2sgc3R5bGVzIGFyZSB2YWxpZC5cbiAgLy8gUHJlZmVyIGxpdGVyYWwgc3R5bGUgdW5sZXNzIHdlIHdhbnQgdG8gZm9sZC5cbiAgaWYgKCFmb3JjZVF1b3Rlcykge1xuICAgIHJldHVybiBoYXNGb2xkYWJsZUxpbmUgPyBTVFlMRV9GT0xERUQgOiBTVFlMRV9MSVRFUkFMO1xuICB9XG4gIHJldHVybiBxdW90aW5nVHlwZSA9PT0gUVVPVElOR19UWVBFX0RPVUJMRSA/IFNUWUxFX0RPVUJMRSA6IFNUWUxFX1NJTkdMRTtcbn1cblxuLy8gTm90ZTogbGluZSBicmVha2luZy9mb2xkaW5nIGlzIGltcGxlbWVudGVkIGZvciBvbmx5IHRoZSBmb2xkZWQgc3R5bGUuXG4vLyBOQi4gV2UgZHJvcCB0aGUgbGFzdCB0cmFpbGluZyBuZXdsaW5lIChpZiBhbnkpIG9mIGEgcmV0dXJuZWQgYmxvY2sgc2NhbGFyXG4vLyAgc2luY2UgdGhlIGR1bXBlciBhZGRzIGl0cyBvd24gbmV3bGluZS4gVGhpcyBhbHdheXMgd29ya3M6XG4vLyAgICBcdTIwMjIgTm8gZW5kaW5nIG5ld2xpbmUgPT4gdW5hZmZlY3RlZDsgYWxyZWFkeSB1c2luZyBzdHJpcCBcIi1cIiBjaG9tcGluZy5cbi8vICAgIFx1MjAyMiBFbmRpbmcgbmV3bGluZSAgICA9PiByZW1vdmVkIHRoZW4gcmVzdG9yZWQuXG4vLyAgSW1wb3J0YW50bHksIHRoaXMga2VlcHMgdGhlIFwiK1wiIGNob21wIGluZGljYXRvciBmcm9tIGdhaW5pbmcgYW4gZXh0cmEgbGluZS5cbmZ1bmN0aW9uIHdyaXRlU2NhbGFyKHN0YXRlLCBzdHJpbmcsIGxldmVsLCBpc2tleSwgaW5ibG9jaykge1xuICBzdGF0ZS5kdW1wID0gKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc3RyaW5nLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHN0YXRlLnF1b3RpbmdUeXBlID09PSBRVU9USU5HX1RZUEVfRE9VQkxFID8gJ1wiXCInIDogXCInJ1wiO1xuICAgIH1cbiAgICBpZiAoIXN0YXRlLm5vQ29tcGF0TW9kZSkge1xuICAgICAgaWYgKERFUFJFQ0FURURfQk9PTEVBTlNfU1lOVEFYLmluZGV4T2Yoc3RyaW5nKSAhPT0gLTEgfHwgREVQUkVDQVRFRF9CQVNFNjBfU1lOVEFYLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgICByZXR1cm4gc3RhdGUucXVvdGluZ1R5cGUgPT09IFFVT1RJTkdfVFlQRV9ET1VCTEUgPyAoJ1wiJyArIHN0cmluZyArICdcIicpIDogKFwiJ1wiICsgc3RyaW5nICsgXCInXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBpbmRlbnQgPSBzdGF0ZS5pbmRlbnQgKiBNYXRoLm1heCgxLCBsZXZlbCk7IC8vIG5vIDAtaW5kZW50IHNjYWxhcnNcbiAgICAvLyBBcyBpbmRlbnRhdGlvbiBnZXRzIGRlZXBlciwgbGV0IHRoZSB3aWR0aCBkZWNyZWFzZSBtb25vdG9uaWNhbGx5XG4gICAgLy8gdG8gdGhlIGxvd2VyIGJvdW5kIG1pbihzdGF0ZS5saW5lV2lkdGgsIDQwKS5cbiAgICAvLyBOb3RlIHRoYXQgdGhpcyBpbXBsaWVzXG4gICAgLy8gIHN0YXRlLmxpbmVXaWR0aCBcdTIyNjQgNDAgKyBzdGF0ZS5pbmRlbnQ6IHdpZHRoIGlzIGZpeGVkIGF0IHRoZSBsb3dlciBib3VuZC5cbiAgICAvLyAgc3RhdGUubGluZVdpZHRoID4gNDAgKyBzdGF0ZS5pbmRlbnQ6IHdpZHRoIGRlY3JlYXNlcyB1bnRpbCB0aGUgbG93ZXIgYm91bmQuXG4gICAgLy8gVGhpcyBiZWhhdmVzIGJldHRlciB0aGFuIGEgY29uc3RhbnQgbWluaW11bSB3aWR0aCB3aGljaCBkaXNhbGxvd3MgbmFycm93ZXIgb3B0aW9ucyxcbiAgICAvLyBvciBhbiBpbmRlbnQgdGhyZXNob2xkIHdoaWNoIGNhdXNlcyB0aGUgd2lkdGggdG8gc3VkZGVubHkgaW5jcmVhc2UuXG4gICAgdmFyIGxpbmVXaWR0aCA9IHN0YXRlLmxpbmVXaWR0aCA9PT0gLTFcbiAgICAgID8gLTEgOiBNYXRoLm1heChNYXRoLm1pbihzdGF0ZS5saW5lV2lkdGgsIDQwKSwgc3RhdGUubGluZVdpZHRoIC0gaW5kZW50KTtcblxuICAgIC8vIFdpdGhvdXQga25vd2luZyBpZiBrZXlzIGFyZSBpbXBsaWNpdC9leHBsaWNpdCwgYXNzdW1lIGltcGxpY2l0IGZvciBzYWZldHkuXG4gICAgdmFyIHNpbmdsZUxpbmVPbmx5ID0gaXNrZXlcbiAgICAgIC8vIE5vIGJsb2NrIHN0eWxlcyBpbiBmbG93IG1vZGUuXG4gICAgICB8fCAoc3RhdGUuZmxvd0xldmVsID4gLTEgJiYgbGV2ZWwgPj0gc3RhdGUuZmxvd0xldmVsKTtcbiAgICBmdW5jdGlvbiB0ZXN0QW1iaWd1aXR5KHN0cmluZykge1xuICAgICAgcmV0dXJuIHRlc3RJbXBsaWNpdFJlc29sdmluZyhzdGF0ZSwgc3RyaW5nKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGNob29zZVNjYWxhclN0eWxlKHN0cmluZywgc2luZ2xlTGluZU9ubHksIHN0YXRlLmluZGVudCwgbGluZVdpZHRoLFxuICAgICAgdGVzdEFtYmlndWl0eSwgc3RhdGUucXVvdGluZ1R5cGUsIHN0YXRlLmZvcmNlUXVvdGVzICYmICFpc2tleSwgaW5ibG9jaykpIHtcblxuICAgICAgY2FzZSBTVFlMRV9QTEFJTjpcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIGNhc2UgU1RZTEVfU0lOR0xFOlxuICAgICAgICByZXR1cm4gXCInXCIgKyBzdHJpbmcucmVwbGFjZSgvJy9nLCBcIicnXCIpICsgXCInXCI7XG4gICAgICBjYXNlIFNUWUxFX0xJVEVSQUw6XG4gICAgICAgIHJldHVybiAnfCcgKyBibG9ja0hlYWRlcihzdHJpbmcsIHN0YXRlLmluZGVudClcbiAgICAgICAgICArIGRyb3BFbmRpbmdOZXdsaW5lKGluZGVudFN0cmluZyhzdHJpbmcsIGluZGVudCkpO1xuICAgICAgY2FzZSBTVFlMRV9GT0xERUQ6XG4gICAgICAgIHJldHVybiAnPicgKyBibG9ja0hlYWRlcihzdHJpbmcsIHN0YXRlLmluZGVudClcbiAgICAgICAgICArIGRyb3BFbmRpbmdOZXdsaW5lKGluZGVudFN0cmluZyhmb2xkU3RyaW5nKHN0cmluZywgbGluZVdpZHRoKSwgaW5kZW50KSk7XG4gICAgICBjYXNlIFNUWUxFX0RPVUJMRTpcbiAgICAgICAgcmV0dXJuICdcIicgKyBlc2NhcGVTdHJpbmcoc3RyaW5nKSArICdcIic7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uKCdpbXBvc3NpYmxlIGVycm9yOiBpbnZhbGlkIHNjYWxhciBzdHlsZScpO1xuICAgIH1cbiAgfSgpKTtcbn1cblxuLy8gUHJlLWNvbmRpdGlvbnM6IHN0cmluZyBpcyB2YWxpZCBmb3IgYSBibG9jayBzY2FsYXIsIDEgPD0gaW5kZW50UGVyTGV2ZWwgPD0gOS5cbmZ1bmN0aW9uIGJsb2NrSGVhZGVyKHN0cmluZywgaW5kZW50UGVyTGV2ZWwpIHtcbiAgdmFyIGluZGVudEluZGljYXRvciA9IG5lZWRJbmRlbnRJbmRpY2F0b3Ioc3RyaW5nKSA/IFN0cmluZyhpbmRlbnRQZXJMZXZlbCkgOiAnJztcblxuICAvLyBub3RlIHRoZSBzcGVjaWFsIGNhc2U6IHRoZSBzdHJpbmcgJ1xcbicgY291bnRzIGFzIGEgXCJ0cmFpbGluZ1wiIGVtcHR5IGxpbmUuXG4gIHZhciBjbGlwID0gICAgICAgICAgc3RyaW5nW3N0cmluZy5sZW5ndGggLSAxXSA9PT0gJ1xcbic7XG4gIHZhciBrZWVwID0gY2xpcCAmJiAoc3RyaW5nW3N0cmluZy5sZW5ndGggLSAyXSA9PT0gJ1xcbicgfHwgc3RyaW5nID09PSAnXFxuJyk7XG4gIHZhciBjaG9tcCA9IGtlZXAgPyAnKycgOiAoY2xpcCA/ICcnIDogJy0nKTtcblxuICByZXR1cm4gaW5kZW50SW5kaWNhdG9yICsgY2hvbXAgKyAnXFxuJztcbn1cblxuLy8gKFNlZSB0aGUgbm90ZSBmb3Igd3JpdGVTY2FsYXIuKVxuZnVuY3Rpb24gZHJvcEVuZGluZ05ld2xpbmUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmdbc3RyaW5nLmxlbmd0aCAtIDFdID09PSAnXFxuJyA/IHN0cmluZy5zbGljZSgwLCAtMSkgOiBzdHJpbmc7XG59XG5cbi8vIE5vdGU6IGEgbG9uZyBsaW5lIHdpdGhvdXQgYSBzdWl0YWJsZSBicmVhayBwb2ludCB3aWxsIGV4Y2VlZCB0aGUgd2lkdGggbGltaXQuXG4vLyBQcmUtY29uZGl0aW9uczogZXZlcnkgY2hhciBpbiBzdHIgaXNQcmludGFibGUsIHN0ci5sZW5ndGggPiAwLCB3aWR0aCA+IDAuXG5mdW5jdGlvbiBmb2xkU3RyaW5nKHN0cmluZywgd2lkdGgpIHtcbiAgLy8gSW4gZm9sZGVkIHN0eWxlLCAkayQgY29uc2VjdXRpdmUgbmV3bGluZXMgb3V0cHV0IGFzICRrKzEkIG5ld2xpbmVzXHUyMDE0XG4gIC8vIHVubGVzcyB0aGV5J3JlIGJlZm9yZSBvciBhZnRlciBhIG1vcmUtaW5kZW50ZWQgbGluZSwgb3IgYXQgdGhlIHZlcnlcbiAgLy8gYmVnaW5uaW5nIG9yIGVuZCwgaW4gd2hpY2ggY2FzZSAkayQgbWFwcyB0byAkayQuXG4gIC8vIFRoZXJlZm9yZSwgcGFyc2UgZWFjaCBjaHVuayBhcyBuZXdsaW5lKHMpIGZvbGxvd2VkIGJ5IGEgY29udGVudCBsaW5lLlxuICB2YXIgbGluZVJlID0gLyhcXG4rKShbXlxcbl0qKS9nO1xuXG4gIC8vIGZpcnN0IGxpbmUgKHBvc3NpYmx5IGFuIGVtcHR5IGxpbmUpXG4gIHZhciByZXN1bHQgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBuZXh0TEYgPSBzdHJpbmcuaW5kZXhPZignXFxuJyk7XG4gICAgbmV4dExGID0gbmV4dExGICE9PSAtMSA/IG5leHRMRiA6IHN0cmluZy5sZW5ndGg7XG4gICAgbGluZVJlLmxhc3RJbmRleCA9IG5leHRMRjtcbiAgICByZXR1cm4gZm9sZExpbmUoc3RyaW5nLnNsaWNlKDAsIG5leHRMRiksIHdpZHRoKTtcbiAgfSgpKTtcbiAgLy8gSWYgd2UgaGF2ZW4ndCByZWFjaGVkIHRoZSBmaXJzdCBjb250ZW50IGxpbmUgeWV0LCBkb24ndCBhZGQgYW4gZXh0cmEgXFxuLlxuICB2YXIgcHJldk1vcmVJbmRlbnRlZCA9IHN0cmluZ1swXSA9PT0gJ1xcbicgfHwgc3RyaW5nWzBdID09PSAnICc7XG4gIHZhciBtb3JlSW5kZW50ZWQ7XG5cbiAgLy8gcmVzdCBvZiB0aGUgbGluZXNcbiAgdmFyIG1hdGNoO1xuICB3aGlsZSAoKG1hdGNoID0gbGluZVJlLmV4ZWMoc3RyaW5nKSkpIHtcbiAgICB2YXIgcHJlZml4ID0gbWF0Y2hbMV0sIGxpbmUgPSBtYXRjaFsyXTtcbiAgICBtb3JlSW5kZW50ZWQgPSAobGluZVswXSA9PT0gJyAnKTtcbiAgICByZXN1bHQgKz0gcHJlZml4XG4gICAgICArICghcHJldk1vcmVJbmRlbnRlZCAmJiAhbW9yZUluZGVudGVkICYmIGxpbmUgIT09ICcnXG4gICAgICAgID8gJ1xcbicgOiAnJylcbiAgICAgICsgZm9sZExpbmUobGluZSwgd2lkdGgpO1xuICAgIHByZXZNb3JlSW5kZW50ZWQgPSBtb3JlSW5kZW50ZWQ7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyBHcmVlZHkgbGluZSBicmVha2luZy5cbi8vIFBpY2tzIHRoZSBsb25nZXN0IGxpbmUgdW5kZXIgdGhlIGxpbWl0IGVhY2ggdGltZSxcbi8vIG90aGVyd2lzZSBzZXR0bGVzIGZvciB0aGUgc2hvcnRlc3QgbGluZSBvdmVyIHRoZSBsaW1pdC5cbi8vIE5CLiBNb3JlLWluZGVudGVkIGxpbmVzICpjYW5ub3QqIGJlIGZvbGRlZCwgYXMgdGhhdCB3b3VsZCBhZGQgYW4gZXh0cmEgXFxuLlxuZnVuY3Rpb24gZm9sZExpbmUobGluZSwgd2lkdGgpIHtcbiAgaWYgKGxpbmUgPT09ICcnIHx8IGxpbmVbMF0gPT09ICcgJykgcmV0dXJuIGxpbmU7XG5cbiAgLy8gU2luY2UgYSBtb3JlLWluZGVudGVkIGxpbmUgYWRkcyBhIFxcbiwgYnJlYWtzIGNhbid0IGJlIGZvbGxvd2VkIGJ5IGEgc3BhY2UuXG4gIHZhciBicmVha1JlID0gLyBbXiBdL2c7IC8vIG5vdGU6IHRoZSBtYXRjaCBpbmRleCB3aWxsIGFsd2F5cyBiZSA8PSBsZW5ndGgtMi5cbiAgdmFyIG1hdGNoO1xuICAvLyBzdGFydCBpcyBhbiBpbmNsdXNpdmUgaW5kZXguIGVuZCwgY3VyciwgYW5kIG5leHQgYXJlIGV4Y2x1c2l2ZS5cbiAgdmFyIHN0YXJ0ID0gMCwgZW5kLCBjdXJyID0gMCwgbmV4dCA9IDA7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICAvLyBJbnZhcmlhbnRzOiAwIDw9IHN0YXJ0IDw9IGxlbmd0aC0xLlxuICAvLyAgIDAgPD0gY3VyciA8PSBuZXh0IDw9IG1heCgwLCBsZW5ndGgtMikuIGN1cnIgLSBzdGFydCA8PSB3aWR0aC5cbiAgLy8gSW5zaWRlIHRoZSBsb29wOlxuICAvLyAgIEEgbWF0Y2ggaW1wbGllcyBsZW5ndGggPj0gMiwgc28gY3VyciBhbmQgbmV4dCBhcmUgPD0gbGVuZ3RoLTIuXG4gIHdoaWxlICgobWF0Y2ggPSBicmVha1JlLmV4ZWMobGluZSkpKSB7XG4gICAgbmV4dCA9IG1hdGNoLmluZGV4O1xuICAgIC8vIG1haW50YWluIGludmFyaWFudDogY3VyciAtIHN0YXJ0IDw9IHdpZHRoXG4gICAgaWYgKG5leHQgLSBzdGFydCA+IHdpZHRoKSB7XG4gICAgICBlbmQgPSAoY3VyciA+IHN0YXJ0KSA/IGN1cnIgOiBuZXh0OyAvLyBkZXJpdmUgZW5kIDw9IGxlbmd0aC0yXG4gICAgICByZXN1bHQgKz0gJ1xcbicgKyBsaW5lLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgICAgLy8gc2tpcCB0aGUgc3BhY2UgdGhhdCB3YXMgb3V0cHV0IGFzIFxcblxuICAgICAgc3RhcnQgPSBlbmQgKyAxOyAgICAgICAgICAgICAgICAgICAgLy8gZGVyaXZlIHN0YXJ0IDw9IGxlbmd0aC0xXG4gICAgfVxuICAgIGN1cnIgPSBuZXh0O1xuICB9XG5cbiAgLy8gQnkgdGhlIGludmFyaWFudHMsIHN0YXJ0IDw9IGxlbmd0aC0xLCBzbyB0aGVyZSBpcyBzb21ldGhpbmcgbGVmdCBvdmVyLlxuICAvLyBJdCBpcyBlaXRoZXIgdGhlIHdob2xlIHN0cmluZyBvciBhIHBhcnQgc3RhcnRpbmcgZnJvbSBub24td2hpdGVzcGFjZS5cbiAgcmVzdWx0ICs9ICdcXG4nO1xuICAvLyBJbnNlcnQgYSBicmVhayBpZiB0aGUgcmVtYWluZGVyIGlzIHRvbyBsb25nIGFuZCB0aGVyZSBpcyBhIGJyZWFrIGF2YWlsYWJsZS5cbiAgaWYgKGxpbmUubGVuZ3RoIC0gc3RhcnQgPiB3aWR0aCAmJiBjdXJyID4gc3RhcnQpIHtcbiAgICByZXN1bHQgKz0gbGluZS5zbGljZShzdGFydCwgY3VycikgKyAnXFxuJyArIGxpbmUuc2xpY2UoY3VyciArIDEpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCArPSBsaW5lLnNsaWNlKHN0YXJ0KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQuc2xpY2UoMSk7IC8vIGRyb3AgZXh0cmEgXFxuIGpvaW5lclxufVxuXG4vLyBFc2NhcGVzIGEgZG91YmxlLXF1b3RlZCBzdHJpbmcuXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcoc3RyaW5nKSB7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgdmFyIGNoYXIgPSAwO1xuICB2YXIgZXNjYXBlU2VxO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgY2hhciA+PSAweDEwMDAwID8gaSArPSAyIDogaSsrKSB7XG4gICAgY2hhciA9IGNvZGVQb2ludEF0KHN0cmluZywgaSk7XG4gICAgZXNjYXBlU2VxID0gRVNDQVBFX1NFUVVFTkNFU1tjaGFyXTtcblxuICAgIGlmICghZXNjYXBlU2VxICYmIGlzUHJpbnRhYmxlKGNoYXIpKSB7XG4gICAgICByZXN1bHQgKz0gc3RyaW5nW2ldO1xuICAgICAgaWYgKGNoYXIgPj0gMHgxMDAwMCkgcmVzdWx0ICs9IHN0cmluZ1tpICsgMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCArPSBlc2NhcGVTZXEgfHwgZW5jb2RlSGV4KGNoYXIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvd1NlcXVlbmNlKHN0YXRlLCBsZXZlbCwgb2JqZWN0KSB7XG4gIHZhciBfcmVzdWx0ID0gJycsXG4gICAgICBfdGFnICAgID0gc3RhdGUudGFnLFxuICAgICAgaW5kZXgsXG4gICAgICBsZW5ndGgsXG4gICAgICB2YWx1ZTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICB2YWx1ZSA9IG9iamVjdFtpbmRleF07XG5cbiAgICBpZiAoc3RhdGUucmVwbGFjZXIpIHtcbiAgICAgIHZhbHVlID0gc3RhdGUucmVwbGFjZXIuY2FsbChvYmplY3QsIFN0cmluZyhpbmRleCksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBXcml0ZSBvbmx5IHZhbGlkIGVsZW1lbnRzLCBwdXQgbnVsbCBpbnN0ZWFkIG9mIGludmFsaWQgZWxlbWVudHMuXG4gICAgaWYgKHdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwsIHZhbHVlLCBmYWxzZSwgZmFsc2UpIHx8XG4gICAgICAgICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICB3cml0ZU5vZGUoc3RhdGUsIGxldmVsLCBudWxsLCBmYWxzZSwgZmFsc2UpKSkge1xuXG4gICAgICBpZiAoX3Jlc3VsdCAhPT0gJycpIF9yZXN1bHQgKz0gJywnICsgKCFzdGF0ZS5jb25kZW5zZUZsb3cgPyAnICcgOiAnJyk7XG4gICAgICBfcmVzdWx0ICs9IHN0YXRlLmR1bXA7XG4gICAgfVxuICB9XG5cbiAgc3RhdGUudGFnID0gX3RhZztcbiAgc3RhdGUuZHVtcCA9ICdbJyArIF9yZXN1bHQgKyAnXSc7XG59XG5cbmZ1bmN0aW9uIHdyaXRlQmxvY2tTZXF1ZW5jZShzdGF0ZSwgbGV2ZWwsIG9iamVjdCwgY29tcGFjdCkge1xuICB2YXIgX3Jlc3VsdCA9ICcnLFxuICAgICAgX3RhZyAgICA9IHN0YXRlLnRhZyxcbiAgICAgIGluZGV4LFxuICAgICAgbGVuZ3RoLFxuICAgICAgdmFsdWU7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgdmFsdWUgPSBvYmplY3RbaW5kZXhdO1xuXG4gICAgaWYgKHN0YXRlLnJlcGxhY2VyKSB7XG4gICAgICB2YWx1ZSA9IHN0YXRlLnJlcGxhY2VyLmNhbGwob2JqZWN0LCBTdHJpbmcoaW5kZXgpLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gV3JpdGUgb25seSB2YWxpZCBlbGVtZW50cywgcHV0IG51bGwgaW5zdGVhZCBvZiBpbnZhbGlkIGVsZW1lbnRzLlxuICAgIGlmICh3cml0ZU5vZGUoc3RhdGUsIGxldmVsICsgMSwgdmFsdWUsIHRydWUsIHRydWUsIGZhbHNlLCB0cnVlKSB8fFxuICAgICAgICAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgd3JpdGVOb2RlKHN0YXRlLCBsZXZlbCArIDEsIG51bGwsIHRydWUsIHRydWUsIGZhbHNlLCB0cnVlKSkpIHtcblxuICAgICAgaWYgKCFjb21wYWN0IHx8IF9yZXN1bHQgIT09ICcnKSB7XG4gICAgICAgIF9yZXN1bHQgKz0gZ2VuZXJhdGVOZXh0TGluZShzdGF0ZSwgbGV2ZWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuZHVtcCAmJiBDSEFSX0xJTkVfRkVFRCA9PT0gc3RhdGUuZHVtcC5jaGFyQ29kZUF0KDApKSB7XG4gICAgICAgIF9yZXN1bHQgKz0gJy0nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3Jlc3VsdCArPSAnLSAnO1xuICAgICAgfVxuXG4gICAgICBfcmVzdWx0ICs9IHN0YXRlLmR1bXA7XG4gICAgfVxuICB9XG5cbiAgc3RhdGUudGFnID0gX3RhZztcbiAgc3RhdGUuZHVtcCA9IF9yZXN1bHQgfHwgJ1tdJzsgLy8gRW1wdHkgc2VxdWVuY2UgaWYgbm8gdmFsaWQgdmFsdWVzLlxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb3dNYXBwaW5nKHN0YXRlLCBsZXZlbCwgb2JqZWN0KSB7XG4gIHZhciBfcmVzdWx0ICAgICAgID0gJycsXG4gICAgICBfdGFnICAgICAgICAgID0gc3RhdGUudGFnLFxuICAgICAgb2JqZWN0S2V5TGlzdCA9IE9iamVjdC5rZXlzKG9iamVjdCksXG4gICAgICBpbmRleCxcbiAgICAgIGxlbmd0aCxcbiAgICAgIG9iamVjdEtleSxcbiAgICAgIG9iamVjdFZhbHVlLFxuICAgICAgcGFpckJ1ZmZlcjtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0S2V5TGlzdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG5cbiAgICBwYWlyQnVmZmVyID0gJyc7XG4gICAgaWYgKF9yZXN1bHQgIT09ICcnKSBwYWlyQnVmZmVyICs9ICcsICc7XG5cbiAgICBpZiAoc3RhdGUuY29uZGVuc2VGbG93KSBwYWlyQnVmZmVyICs9ICdcIic7XG5cbiAgICBvYmplY3RLZXkgPSBvYmplY3RLZXlMaXN0W2luZGV4XTtcbiAgICBvYmplY3RWYWx1ZSA9IG9iamVjdFtvYmplY3RLZXldO1xuXG4gICAgaWYgKHN0YXRlLnJlcGxhY2VyKSB7XG4gICAgICBvYmplY3RWYWx1ZSA9IHN0YXRlLnJlcGxhY2VyLmNhbGwob2JqZWN0LCBvYmplY3RLZXksIG9iamVjdFZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAoIXdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwsIG9iamVjdEtleSwgZmFsc2UsIGZhbHNlKSkge1xuICAgICAgY29udGludWU7IC8vIFNraXAgdGhpcyBwYWlyIGJlY2F1c2Ugb2YgaW52YWxpZCBrZXk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLmR1bXAubGVuZ3RoID4gMTAyNCkgcGFpckJ1ZmZlciArPSAnPyAnO1xuXG4gICAgcGFpckJ1ZmZlciArPSBzdGF0ZS5kdW1wICsgKHN0YXRlLmNvbmRlbnNlRmxvdyA/ICdcIicgOiAnJykgKyAnOicgKyAoc3RhdGUuY29uZGVuc2VGbG93ID8gJycgOiAnICcpO1xuXG4gICAgaWYgKCF3cml0ZU5vZGUoc3RhdGUsIGxldmVsLCBvYmplY3RWYWx1ZSwgZmFsc2UsIGZhbHNlKSkge1xuICAgICAgY29udGludWU7IC8vIFNraXAgdGhpcyBwYWlyIGJlY2F1c2Ugb2YgaW52YWxpZCB2YWx1ZS5cbiAgICB9XG5cbiAgICBwYWlyQnVmZmVyICs9IHN0YXRlLmR1bXA7XG5cbiAgICAvLyBCb3RoIGtleSBhbmQgdmFsdWUgYXJlIHZhbGlkLlxuICAgIF9yZXN1bHQgKz0gcGFpckJ1ZmZlcjtcbiAgfVxuXG4gIHN0YXRlLnRhZyA9IF90YWc7XG4gIHN0YXRlLmR1bXAgPSAneycgKyBfcmVzdWx0ICsgJ30nO1xufVxuXG5mdW5jdGlvbiB3cml0ZUJsb2NrTWFwcGluZyhzdGF0ZSwgbGV2ZWwsIG9iamVjdCwgY29tcGFjdCkge1xuICB2YXIgX3Jlc3VsdCAgICAgICA9ICcnLFxuICAgICAgX3RhZyAgICAgICAgICA9IHN0YXRlLnRhZyxcbiAgICAgIG9iamVjdEtleUxpc3QgPSBPYmplY3Qua2V5cyhvYmplY3QpLFxuICAgICAgaW5kZXgsXG4gICAgICBsZW5ndGgsXG4gICAgICBvYmplY3RLZXksXG4gICAgICBvYmplY3RWYWx1ZSxcbiAgICAgIGV4cGxpY2l0UGFpcixcbiAgICAgIHBhaXJCdWZmZXI7XG5cbiAgLy8gQWxsb3cgc29ydGluZyBrZXlzIHNvIHRoYXQgdGhlIG91dHB1dCBmaWxlIGlzIGRldGVybWluaXN0aWNcbiAgaWYgKHN0YXRlLnNvcnRLZXlzID09PSB0cnVlKSB7XG4gICAgLy8gRGVmYXVsdCBzb3J0aW5nXG4gICAgb2JqZWN0S2V5TGlzdC5zb3J0KCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHN0YXRlLnNvcnRLZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gQ3VzdG9tIHNvcnQgZnVuY3Rpb25cbiAgICBvYmplY3RLZXlMaXN0LnNvcnQoc3RhdGUuc29ydEtleXMpO1xuICB9IGVsc2UgaWYgKHN0YXRlLnNvcnRLZXlzKSB7XG4gICAgLy8gU29tZXRoaW5nIGlzIHdyb25nXG4gICAgdGhyb3cgbmV3IGV4Y2VwdGlvbignc29ydEtleXMgbXVzdCBiZSBhIGJvb2xlYW4gb3IgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdEtleUxpc3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHBhaXJCdWZmZXIgPSAnJztcblxuICAgIGlmICghY29tcGFjdCB8fCBfcmVzdWx0ICE9PSAnJykge1xuICAgICAgcGFpckJ1ZmZlciArPSBnZW5lcmF0ZU5leHRMaW5lKHN0YXRlLCBsZXZlbCk7XG4gICAgfVxuXG4gICAgb2JqZWN0S2V5ID0gb2JqZWN0S2V5TGlzdFtpbmRleF07XG4gICAgb2JqZWN0VmFsdWUgPSBvYmplY3Rbb2JqZWN0S2V5XTtcblxuICAgIGlmIChzdGF0ZS5yZXBsYWNlcikge1xuICAgICAgb2JqZWN0VmFsdWUgPSBzdGF0ZS5yZXBsYWNlci5jYWxsKG9iamVjdCwgb2JqZWN0S2V5LCBvYmplY3RWYWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKCF3cml0ZU5vZGUoc3RhdGUsIGxldmVsICsgMSwgb2JqZWN0S2V5LCB0cnVlLCB0cnVlLCB0cnVlKSkge1xuICAgICAgY29udGludWU7IC8vIFNraXAgdGhpcyBwYWlyIGJlY2F1c2Ugb2YgaW52YWxpZCBrZXkuXG4gICAgfVxuXG4gICAgZXhwbGljaXRQYWlyID0gKHN0YXRlLnRhZyAhPT0gbnVsbCAmJiBzdGF0ZS50YWcgIT09ICc/JykgfHxcbiAgICAgICAgICAgICAgICAgICAoc3RhdGUuZHVtcCAmJiBzdGF0ZS5kdW1wLmxlbmd0aCA+IDEwMjQpO1xuXG4gICAgaWYgKGV4cGxpY2l0UGFpcikge1xuICAgICAgaWYgKHN0YXRlLmR1bXAgJiYgQ0hBUl9MSU5FX0ZFRUQgPT09IHN0YXRlLmR1bXAuY2hhckNvZGVBdCgwKSkge1xuICAgICAgICBwYWlyQnVmZmVyICs9ICc/JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhaXJCdWZmZXIgKz0gJz8gJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYWlyQnVmZmVyICs9IHN0YXRlLmR1bXA7XG5cbiAgICBpZiAoZXhwbGljaXRQYWlyKSB7XG4gICAgICBwYWlyQnVmZmVyICs9IGdlbmVyYXRlTmV4dExpbmUoc3RhdGUsIGxldmVsKTtcbiAgICB9XG5cbiAgICBpZiAoIXdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwgKyAxLCBvYmplY3RWYWx1ZSwgdHJ1ZSwgZXhwbGljaXRQYWlyKSkge1xuICAgICAgY29udGludWU7IC8vIFNraXAgdGhpcyBwYWlyIGJlY2F1c2Ugb2YgaW52YWxpZCB2YWx1ZS5cbiAgICB9XG5cbiAgICBpZiAoc3RhdGUuZHVtcCAmJiBDSEFSX0xJTkVfRkVFRCA9PT0gc3RhdGUuZHVtcC5jaGFyQ29kZUF0KDApKSB7XG4gICAgICBwYWlyQnVmZmVyICs9ICc6JztcbiAgICB9IGVsc2Uge1xuICAgICAgcGFpckJ1ZmZlciArPSAnOiAnO1xuICAgIH1cblxuICAgIHBhaXJCdWZmZXIgKz0gc3RhdGUuZHVtcDtcblxuICAgIC8vIEJvdGgga2V5IGFuZCB2YWx1ZSBhcmUgdmFsaWQuXG4gICAgX3Jlc3VsdCArPSBwYWlyQnVmZmVyO1xuICB9XG5cbiAgc3RhdGUudGFnID0gX3RhZztcbiAgc3RhdGUuZHVtcCA9IF9yZXN1bHQgfHwgJ3t9JzsgLy8gRW1wdHkgbWFwcGluZyBpZiBubyB2YWxpZCBwYWlycy5cbn1cblxuZnVuY3Rpb24gZGV0ZWN0VHlwZShzdGF0ZSwgb2JqZWN0LCBleHBsaWNpdCkge1xuICB2YXIgX3Jlc3VsdCwgdHlwZUxpc3QsIGluZGV4LCBsZW5ndGgsIHR5cGUsIHN0eWxlO1xuXG4gIHR5cGVMaXN0ID0gZXhwbGljaXQgPyBzdGF0ZS5leHBsaWNpdFR5cGVzIDogc3RhdGUuaW1wbGljaXRUeXBlcztcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gdHlwZUxpc3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHR5cGUgPSB0eXBlTGlzdFtpbmRleF07XG5cbiAgICBpZiAoKHR5cGUuaW5zdGFuY2VPZiAgfHwgdHlwZS5wcmVkaWNhdGUpICYmXG4gICAgICAgICghdHlwZS5pbnN0YW5jZU9mIHx8ICgodHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcpICYmIChvYmplY3QgaW5zdGFuY2VvZiB0eXBlLmluc3RhbmNlT2YpKSkgJiZcbiAgICAgICAgKCF0eXBlLnByZWRpY2F0ZSAgfHwgdHlwZS5wcmVkaWNhdGUob2JqZWN0KSkpIHtcblxuICAgICAgaWYgKGV4cGxpY2l0KSB7XG4gICAgICAgIGlmICh0eXBlLm11bHRpICYmIHR5cGUucmVwcmVzZW50TmFtZSkge1xuICAgICAgICAgIHN0YXRlLnRhZyA9IHR5cGUucmVwcmVzZW50TmFtZShvYmplY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXRlLnRhZyA9IHR5cGUudGFnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS50YWcgPSAnPyc7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlLnJlcHJlc2VudCkge1xuICAgICAgICBzdHlsZSA9IHN0YXRlLnN0eWxlTWFwW3R5cGUudGFnXSB8fCB0eXBlLmRlZmF1bHRTdHlsZTtcblxuICAgICAgICBpZiAoX3RvU3RyaW5nLmNhbGwodHlwZS5yZXByZXNlbnQpID09PSAnW29iamVjdCBGdW5jdGlvbl0nKSB7XG4gICAgICAgICAgX3Jlc3VsdCA9IHR5cGUucmVwcmVzZW50KG9iamVjdCwgc3R5bGUpO1xuICAgICAgICB9IGVsc2UgaWYgKF9oYXNPd25Qcm9wZXJ0eS5jYWxsKHR5cGUucmVwcmVzZW50LCBzdHlsZSkpIHtcbiAgICAgICAgICBfcmVzdWx0ID0gdHlwZS5yZXByZXNlbnRbc3R5bGVdKG9iamVjdCwgc3R5bGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBleGNlcHRpb24oJyE8JyArIHR5cGUudGFnICsgJz4gdGFnIHJlc29sdmVyIGFjY2VwdHMgbm90IFwiJyArIHN0eWxlICsgJ1wiIHN0eWxlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZS5kdW1wID0gX3Jlc3VsdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTZXJpYWxpemVzIGBvYmplY3RgIGFuZCB3cml0ZXMgaXQgdG8gZ2xvYmFsIGByZXN1bHRgLlxuLy8gUmV0dXJucyB0cnVlIG9uIHN1Y2Nlc3MsIG9yIGZhbHNlIG9uIGludmFsaWQgb2JqZWN0LlxuLy9cbmZ1bmN0aW9uIHdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwsIG9iamVjdCwgYmxvY2ssIGNvbXBhY3QsIGlza2V5LCBpc2Jsb2Nrc2VxKSB7XG4gIHN0YXRlLnRhZyA9IG51bGw7XG4gIHN0YXRlLmR1bXAgPSBvYmplY3Q7XG5cbiAgaWYgKCFkZXRlY3RUeXBlKHN0YXRlLCBvYmplY3QsIGZhbHNlKSkge1xuICAgIGRldGVjdFR5cGUoc3RhdGUsIG9iamVjdCwgdHJ1ZSk7XG4gIH1cblxuICB2YXIgdHlwZSA9IF90b1N0cmluZy5jYWxsKHN0YXRlLmR1bXApO1xuICB2YXIgaW5ibG9jayA9IGJsb2NrO1xuICB2YXIgdGFnU3RyO1xuXG4gIGlmIChibG9jaykge1xuICAgIGJsb2NrID0gKHN0YXRlLmZsb3dMZXZlbCA8IDAgfHwgc3RhdGUuZmxvd0xldmVsID4gbGV2ZWwpO1xuICB9XG5cbiAgdmFyIG9iamVjdE9yQXJyYXkgPSB0eXBlID09PSAnW29iamVjdCBPYmplY3RdJyB8fCB0eXBlID09PSAnW29iamVjdCBBcnJheV0nLFxuICAgICAgZHVwbGljYXRlSW5kZXgsXG4gICAgICBkdXBsaWNhdGU7XG5cbiAgaWYgKG9iamVjdE9yQXJyYXkpIHtcbiAgICBkdXBsaWNhdGVJbmRleCA9IHN0YXRlLmR1cGxpY2F0ZXMuaW5kZXhPZihvYmplY3QpO1xuICAgIGR1cGxpY2F0ZSA9IGR1cGxpY2F0ZUluZGV4ICE9PSAtMTtcbiAgfVxuXG4gIGlmICgoc3RhdGUudGFnICE9PSBudWxsICYmIHN0YXRlLnRhZyAhPT0gJz8nKSB8fCBkdXBsaWNhdGUgfHwgKHN0YXRlLmluZGVudCAhPT0gMiAmJiBsZXZlbCA+IDApKSB7XG4gICAgY29tcGFjdCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGR1cGxpY2F0ZSAmJiBzdGF0ZS51c2VkRHVwbGljYXRlc1tkdXBsaWNhdGVJbmRleF0pIHtcbiAgICBzdGF0ZS5kdW1wID0gJypyZWZfJyArIGR1cGxpY2F0ZUluZGV4O1xuICB9IGVsc2Uge1xuICAgIGlmIChvYmplY3RPckFycmF5ICYmIGR1cGxpY2F0ZSAmJiAhc3RhdGUudXNlZER1cGxpY2F0ZXNbZHVwbGljYXRlSW5kZXhdKSB7XG4gICAgICBzdGF0ZS51c2VkRHVwbGljYXRlc1tkdXBsaWNhdGVJbmRleF0gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgIGlmIChibG9jayAmJiAoT2JqZWN0LmtleXMoc3RhdGUuZHVtcCkubGVuZ3RoICE9PSAwKSkge1xuICAgICAgICB3cml0ZUJsb2NrTWFwcGluZyhzdGF0ZSwgbGV2ZWwsIHN0YXRlLmR1bXAsIGNvbXBhY3QpO1xuICAgICAgICBpZiAoZHVwbGljYXRlKSB7XG4gICAgICAgICAgc3RhdGUuZHVtcCA9ICcmcmVmXycgKyBkdXBsaWNhdGVJbmRleCArIHN0YXRlLmR1bXA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdyaXRlRmxvd01hcHBpbmcoc3RhdGUsIGxldmVsLCBzdGF0ZS5kdW1wKTtcbiAgICAgICAgaWYgKGR1cGxpY2F0ZSkge1xuICAgICAgICAgIHN0YXRlLmR1bXAgPSAnJnJlZl8nICsgZHVwbGljYXRlSW5kZXggKyAnICcgKyBzdGF0ZS5kdW1wO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICBpZiAoYmxvY2sgJiYgKHN0YXRlLmR1bXAubGVuZ3RoICE9PSAwKSkge1xuICAgICAgICBpZiAoc3RhdGUubm9BcnJheUluZGVudCAmJiAhaXNibG9ja3NlcSAmJiBsZXZlbCA+IDApIHtcbiAgICAgICAgICB3cml0ZUJsb2NrU2VxdWVuY2Uoc3RhdGUsIGxldmVsIC0gMSwgc3RhdGUuZHVtcCwgY29tcGFjdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd3JpdGVCbG9ja1NlcXVlbmNlKHN0YXRlLCBsZXZlbCwgc3RhdGUuZHVtcCwgY29tcGFjdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGR1cGxpY2F0ZSkge1xuICAgICAgICAgIHN0YXRlLmR1bXAgPSAnJnJlZl8nICsgZHVwbGljYXRlSW5kZXggKyBzdGF0ZS5kdW1wO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3cml0ZUZsb3dTZXF1ZW5jZShzdGF0ZSwgbGV2ZWwsIHN0YXRlLmR1bXApO1xuICAgICAgICBpZiAoZHVwbGljYXRlKSB7XG4gICAgICAgICAgc3RhdGUuZHVtcCA9ICcmcmVmXycgKyBkdXBsaWNhdGVJbmRleCArICcgJyArIHN0YXRlLmR1bXA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdbb2JqZWN0IFN0cmluZ10nKSB7XG4gICAgICBpZiAoc3RhdGUudGFnICE9PSAnPycpIHtcbiAgICAgICAgd3JpdGVTY2FsYXIoc3RhdGUsIHN0YXRlLmR1bXAsIGxldmVsLCBpc2tleSwgaW5ibG9jayk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnW29iamVjdCBVbmRlZmluZWRdJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3RhdGUuc2tpcEludmFsaWQpIHJldHVybiBmYWxzZTtcbiAgICAgIHRocm93IG5ldyBleGNlcHRpb24oJ3VuYWNjZXB0YWJsZSBraW5kIG9mIGFuIG9iamVjdCB0byBkdW1wICcgKyB0eXBlKTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUudGFnICE9PSBudWxsICYmIHN0YXRlLnRhZyAhPT0gJz8nKSB7XG4gICAgICAvLyBOZWVkIHRvIGVuY29kZSBhbGwgY2hhcmFjdGVycyBleGNlcHQgdGhvc2UgYWxsb3dlZCBieSB0aGUgc3BlYzpcbiAgICAgIC8vXG4gICAgICAvLyBbMzVdIG5zLWRlYy1kaWdpdCAgICA6Oj0gIFsjeDMwLSN4MzldIC8qIDAtOSAqL1xuICAgICAgLy8gWzM2XSBucy1oZXgtZGlnaXQgICAgOjo9ICBucy1kZWMtZGlnaXRcbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIHwgWyN4NDEtI3g0Nl0gLyogQS1GICovIHwgWyN4NjEtI3g2Nl0gLyogYS1mICovXG4gICAgICAvLyBbMzddIG5zLWFzY2lpLWxldHRlciA6Oj0gIFsjeDQxLSN4NUFdIC8qIEEtWiAqLyB8IFsjeDYxLSN4N0FdIC8qIGEteiAqL1xuICAgICAgLy8gWzM4XSBucy13b3JkLWNoYXIgICAgOjo9ICBucy1kZWMtZGlnaXQgfCBucy1hc2NpaS1sZXR0ZXIgfCBcdTIwMUMtXHUyMDFEXG4gICAgICAvLyBbMzldIG5zLXVyaS1jaGFyICAgICA6Oj0gIFx1MjAxQyVcdTIwMUQgbnMtaGV4LWRpZ2l0IG5zLWhleC1kaWdpdCB8IG5zLXdvcmQtY2hhciB8IFx1MjAxQyNcdTIwMURcbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIHwgXHUyMDFDO1x1MjAxRCB8IFx1MjAxQy9cdTIwMUQgfCBcdTIwMUM/XHUyMDFEIHwgXHUyMDFDOlx1MjAxRCB8IFx1MjAxQ0BcdTIwMUQgfCBcdTIwMUMmXHUyMDFEIHwgXHUyMDFDPVx1MjAxRCB8IFx1MjAxQytcdTIwMUQgfCBcdTIwMUMkXHUyMDFEIHwgXHUyMDFDLFx1MjAxRFxuICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgfCBcdTIwMUNfXHUyMDFEIHwgXHUyMDFDLlx1MjAxRCB8IFx1MjAxQyFcdTIwMUQgfCBcdTIwMUN+XHUyMDFEIHwgXHUyMDFDKlx1MjAxRCB8IFx1MjAxQydcdTIwMUQgfCBcdTIwMUMoXHUyMDFEIHwgXHUyMDFDKVx1MjAxRCB8IFx1MjAxQ1tcdTIwMUQgfCBcdTIwMUNdXHUyMDFEXG4gICAgICAvL1xuICAgICAgLy8gQWxzbyBuZWVkIHRvIGVuY29kZSAnIScgYmVjYXVzZSBpdCBoYXMgc3BlY2lhbCBtZWFuaW5nIChlbmQgb2YgdGFnIHByZWZpeCkuXG4gICAgICAvL1xuICAgICAgdGFnU3RyID0gZW5jb2RlVVJJKFxuICAgICAgICBzdGF0ZS50YWdbMF0gPT09ICchJyA/IHN0YXRlLnRhZy5zbGljZSgxKSA6IHN0YXRlLnRhZ1xuICAgICAgKS5yZXBsYWNlKC8hL2csICclMjEnKTtcblxuICAgICAgaWYgKHN0YXRlLnRhZ1swXSA9PT0gJyEnKSB7XG4gICAgICAgIHRhZ1N0ciA9ICchJyArIHRhZ1N0cjtcbiAgICAgIH0gZWxzZSBpZiAodGFnU3RyLnNsaWNlKDAsIDE4KSA9PT0gJ3RhZzp5YW1sLm9yZywyMDAyOicpIHtcbiAgICAgICAgdGFnU3RyID0gJyEhJyArIHRhZ1N0ci5zbGljZSgxOCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YWdTdHIgPSAnITwnICsgdGFnU3RyICsgJz4nO1xuICAgICAgfVxuXG4gICAgICBzdGF0ZS5kdW1wID0gdGFnU3RyICsgJyAnICsgc3RhdGUuZHVtcDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0RHVwbGljYXRlUmVmZXJlbmNlcyhvYmplY3QsIHN0YXRlKSB7XG4gIHZhciBvYmplY3RzID0gW10sXG4gICAgICBkdXBsaWNhdGVzSW5kZXhlcyA9IFtdLFxuICAgICAgaW5kZXgsXG4gICAgICBsZW5ndGg7XG5cbiAgaW5zcGVjdE5vZGUob2JqZWN0LCBvYmplY3RzLCBkdXBsaWNhdGVzSW5kZXhlcyk7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IGR1cGxpY2F0ZXNJbmRleGVzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBzdGF0ZS5kdXBsaWNhdGVzLnB1c2gob2JqZWN0c1tkdXBsaWNhdGVzSW5kZXhlc1tpbmRleF1dKTtcbiAgfVxuICBzdGF0ZS51c2VkRHVwbGljYXRlcyA9IG5ldyBBcnJheShsZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBpbnNwZWN0Tm9kZShvYmplY3QsIG9iamVjdHMsIGR1cGxpY2F0ZXNJbmRleGVzKSB7XG4gIHZhciBvYmplY3RLZXlMaXN0LFxuICAgICAgaW5kZXgsXG4gICAgICBsZW5ndGg7XG5cbiAgaWYgKG9iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0Jykge1xuICAgIGluZGV4ID0gb2JqZWN0cy5pbmRleE9mKG9iamVjdCk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgaWYgKGR1cGxpY2F0ZXNJbmRleGVzLmluZGV4T2YoaW5kZXgpID09PSAtMSkge1xuICAgICAgICBkdXBsaWNhdGVzSW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb2JqZWN0cy5wdXNoKG9iamVjdCk7XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgICAgICAgaW5zcGVjdE5vZGUob2JqZWN0W2luZGV4XSwgb2JqZWN0cywgZHVwbGljYXRlc0luZGV4ZXMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3RLZXlMaXN0ID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICAgICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0S2V5TGlzdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgICAgICAgaW5zcGVjdE5vZGUob2JqZWN0W29iamVjdEtleUxpc3RbaW5kZXhdXSwgb2JqZWN0cywgZHVwbGljYXRlc0luZGV4ZXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGR1bXAkMShpbnB1dCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB2YXIgc3RhdGUgPSBuZXcgU3RhdGUob3B0aW9ucyk7XG5cbiAgaWYgKCFzdGF0ZS5ub1JlZnMpIGdldER1cGxpY2F0ZVJlZmVyZW5jZXMoaW5wdXQsIHN0YXRlKTtcblxuICB2YXIgdmFsdWUgPSBpbnB1dDtcblxuICBpZiAoc3RhdGUucmVwbGFjZXIpIHtcbiAgICB2YWx1ZSA9IHN0YXRlLnJlcGxhY2VyLmNhbGwoeyAnJzogdmFsdWUgfSwgJycsIHZhbHVlKTtcbiAgfVxuXG4gIGlmICh3cml0ZU5vZGUoc3RhdGUsIDAsIHZhbHVlLCB0cnVlLCB0cnVlKSkgcmV0dXJuIHN0YXRlLmR1bXAgKyAnXFxuJztcblxuICByZXR1cm4gJyc7XG59XG5cbnZhciBkdW1wXzEgPSBkdW1wJDE7XG5cbnZhciBkdW1wZXIgPSB7XG5cdGR1bXA6IGR1bXBfMVxufTtcblxuZnVuY3Rpb24gcmVuYW1lZChmcm9tLCB0bykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignRnVuY3Rpb24geWFtbC4nICsgZnJvbSArICcgaXMgcmVtb3ZlZCBpbiBqcy15YW1sIDQuICcgK1xuICAgICAgJ1VzZSB5YW1sLicgKyB0byArICcgaW5zdGVhZCwgd2hpY2ggaXMgbm93IHNhZmUgYnkgZGVmYXVsdC4nKTtcbiAgfTtcbn1cblxuXG52YXIgVHlwZSAgICAgICAgICAgICAgICA9IHR5cGU7XG52YXIgU2NoZW1hICAgICAgICAgICAgICA9IHNjaGVtYTtcbnZhciBGQUlMU0FGRV9TQ0hFTUEgICAgID0gZmFpbHNhZmU7XG52YXIgSlNPTl9TQ0hFTUEgICAgICAgICA9IGpzb247XG52YXIgQ09SRV9TQ0hFTUEgICAgICAgICA9IGNvcmU7XG52YXIgREVGQVVMVF9TQ0hFTUEgICAgICA9IF9kZWZhdWx0O1xudmFyIGxvYWQgICAgICAgICAgICAgICAgPSBsb2FkZXIubG9hZDtcbnZhciBsb2FkQWxsICAgICAgICAgICAgID0gbG9hZGVyLmxvYWRBbGw7XG52YXIgZHVtcCAgICAgICAgICAgICAgICA9IGR1bXBlci5kdW1wO1xudmFyIFlBTUxFeGNlcHRpb24gICAgICAgPSBleGNlcHRpb247XG5cbi8vIFJlLWV4cG9ydCBhbGwgdHlwZXMgaW4gY2FzZSB1c2VyIHdhbnRzIHRvIGNyZWF0ZSBjdXN0b20gc2NoZW1hXG52YXIgdHlwZXMgPSB7XG4gIGJpbmFyeTogICAgYmluYXJ5LFxuICBmbG9hdDogICAgIGZsb2F0LFxuICBtYXA6ICAgICAgIG1hcCxcbiAgbnVsbDogICAgICBfbnVsbCxcbiAgcGFpcnM6ICAgICBwYWlycyxcbiAgc2V0OiAgICAgICBzZXQsXG4gIHRpbWVzdGFtcDogdGltZXN0YW1wLFxuICBib29sOiAgICAgIGJvb2wsXG4gIGludDogICAgICAgaW50LFxuICBtZXJnZTogICAgIG1lcmdlLFxuICBvbWFwOiAgICAgIG9tYXAsXG4gIHNlcTogICAgICAgc2VxLFxuICBzdHI6ICAgICAgIHN0clxufTtcblxuLy8gUmVtb3ZlZCBmdW5jdGlvbnMgZnJvbSBKUy1ZQU1MIDMuMC54XG52YXIgc2FmZUxvYWQgICAgICAgICAgICA9IHJlbmFtZWQoJ3NhZmVMb2FkJywgJ2xvYWQnKTtcbnZhciBzYWZlTG9hZEFsbCAgICAgICAgID0gcmVuYW1lZCgnc2FmZUxvYWRBbGwnLCAnbG9hZEFsbCcpO1xudmFyIHNhZmVEdW1wICAgICAgICAgICAgPSByZW5hbWVkKCdzYWZlRHVtcCcsICdkdW1wJyk7XG5cbnZhciBqc1lhbWwgPSB7XG5cdFR5cGU6IFR5cGUsXG5cdFNjaGVtYTogU2NoZW1hLFxuXHRGQUlMU0FGRV9TQ0hFTUE6IEZBSUxTQUZFX1NDSEVNQSxcblx0SlNPTl9TQ0hFTUE6IEpTT05fU0NIRU1BLFxuXHRDT1JFX1NDSEVNQTogQ09SRV9TQ0hFTUEsXG5cdERFRkFVTFRfU0NIRU1BOiBERUZBVUxUX1NDSEVNQSxcblx0bG9hZDogbG9hZCxcblx0bG9hZEFsbDogbG9hZEFsbCxcblx0ZHVtcDogZHVtcCxcblx0WUFNTEV4Y2VwdGlvbjogWUFNTEV4Y2VwdGlvbixcblx0dHlwZXM6IHR5cGVzLFxuXHRzYWZlTG9hZDogc2FmZUxvYWQsXG5cdHNhZmVMb2FkQWxsOiBzYWZlTG9hZEFsbCxcblx0c2FmZUR1bXA6IHNhZmVEdW1wXG59O1xuXG5leHBvcnQgZGVmYXVsdCBqc1lhbWw7XG5leHBvcnQgeyBDT1JFX1NDSEVNQSwgREVGQVVMVF9TQ0hFTUEsIEZBSUxTQUZFX1NDSEVNQSwgSlNPTl9TQ0hFTUEsIFNjaGVtYSwgVHlwZSwgWUFNTEV4Y2VwdGlvbiwgZHVtcCwgbG9hZCwgbG9hZEFsbCwgc2FmZUR1bXAsIHNhZmVMb2FkLCBzYWZlTG9hZEFsbCwgdHlwZXMgfTtcbiIsICJpbXBvcnQgeyBleGlzdHNTeW5jLCByZWFkRmlsZVN5bmMsIHdyaXRlRmlsZVN5bmMgfSBmcm9tICdmcyc7XG5pbXBvcnQgeyBQcm9qZWN0SnNvbiB9IGZyb20gJy4uJztcbmltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcbmltcG9ydCB7IEFic3RyYWN0UHJvamVjdCB9IGZyb20gJy4nO1xuXG50eXBlIEdvTW9kID0ge1xuICBtb2R1bGU/OiBzdHJpbmc7XG4gIHJlcXVpcmU/OiB7IG1vZHVsZTogc3RyaW5nOyB2ZXJzaW9uOiBzdHJpbmcgfVtdO1xuICAvLyB0b2RvIHN1cHBvcnQgcmVwbGFjZSBkaXJlY3RpdmVzXG59O1xuXG5leHBvcnQgY2xhc3MgR29sYW5nUHJvamVjdCBleHRlbmRzIEFic3RyYWN0UHJvamVjdCB7XG4gIGFzeW5jIHNldFByb2plY3QobmFtZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5nb01vZEZpbGUudGhlbigoZ29Nb2RGaWxlKSA9PiB7XG4gICAgICAvLyBGaW5kIHRoZSBmaXJzdCBsaW5lIHRoYXQgc3RhcnRzIHdpdGggXCJtb2R1bGVcIlxuICAgICAgLy8gUmVwbGFjZSB0aGUgbW9kdWxlIG5hbWUgd2l0aCB0aGUgbmV3IG5hbWVcbiAgICAgIC8vIFdyaXRlIHRoZSBmaWxlIGJhY2sgdG8gZGlza1xuICAgICAgaWYgKCFnb01vZEZpbGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBsaW5lcyA9IHJlYWRGaWxlU3luYyhnb01vZEZpbGUsICd1dGY4Jykuc3BsaXQoJ1xcbicpO1xuICAgICAgY29uc3QgbmV3TGluZXMgPSBsaW5lcy5tYXAoKGxpbmUpID0+IHtcbiAgICAgICAgY29uc3QgbW9kdWxlTWF0Y2ggPSBsaW5lLm1hdGNoKC9ebW9kdWxlXFxzKyhcXFMrKS8pO1xuICAgICAgICBpZiAobW9kdWxlTWF0Y2gpIHtcbiAgICAgICAgICByZXR1cm4gYG1vZHVsZSAke25hbWV9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGluZTtcbiAgICAgIH0pO1xuICAgICAgd3JpdGVGaWxlU3luYyhnb01vZEZpbGUsIG5ld0xpbmVzLmpvaW4oJ1xcbicpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IGdvTW9kRmlsZSgpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiB0aGlzLndvcmtkaXJcbiAgICAgIC50aGVuKCh3b3JrRGlyKSA9PiBqb2luKHdvcmtEaXIsICdnby5tb2QnKSlcbiAgICAgIC50aGVuKChnb01vZEZpbGUpID0+IHtcbiAgICAgICAgaWYgKCFleGlzdHNTeW5jKGdvTW9kRmlsZSkpIHtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnb01vZEZpbGU7XG4gICAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IGdvUHJvamVjdCgpOiBQcm9taXNlPHsgcHJvamVjdE5hbWU/OiBzdHJpbmc7IGdvTW9kOiBHb01vZCB9IHwgdW5kZWZpbmVkPiB7XG4gICAgcmV0dXJuIHRoaXMuZ29Nb2RGaWxlLnRoZW4oKGdvTW9kRmlsZSkgPT4ge1xuICAgICAgaWYgKCFnb01vZEZpbGUpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIC8vIFRISVMgSVMgQVdGVUwgSSBXSVNIIEkgSEFEIEEgQkVUVEVSIFdBWSBUTyBETyBUSElTIEkgRkVFTCBESVJUWVxuICAgICAgLy8gLSBBbGwgSSByZWFsbHkgd2FudCBpcyBtb2R1bGUgYW5kIGRlcGVuZGVuY2llc1xuICAgICAgLy8gLSBQZXJoYXBzIGxvb2sgaW50byBnb2xhbmcgdG9vbGluZyBhbmQgbWFrZSBhIEpTIHZhcmlhbnQgb2YgdGhlIGdvIG1vZCBwYXJzZXJcbiAgICAgIC8vIC0gVE9ETzogcmVsZWFzZSBhIGdvIG1vZCBwYXJzZXIgbGlicmFyeVxuICAgICAgY29uc3QgbGluZXMgPSByZWFkRmlsZVN5bmMoZ29Nb2RGaWxlLCAndXRmOCcpLnNwbGl0KCdcXG4nKTtcblxuICAgICAgbGV0IHByb2plY3ROYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gICAgICBsZXQgaW5zaWRlUmVxdWlyZUJsb2NrID0gZmFsc2U7XG5cbiAgICAgIGNvbnN0IHBhcnNlZDogR29Nb2QgPSB7fTtcblxuICAgICAgbGluZXMuZm9yRWFjaCgobGluZSkgPT4ge1xuICAgICAgICBjb25zdCBtb2R1bGVNYXRjaCA9IGxpbmUubWF0Y2goL15tb2R1bGVcXHMrKFxcUyspLyk7XG4gICAgICAgIGNvbnN0IHJlcXVpcmVNYXRjaCA9IGxpbmUubWF0Y2goL15yZXF1aXJlXFxzKyhcXFMrKVxccysoXFxTKykvKTsgLy8gU2luZ2xlLWxpbmUgcmVxdWlyZVxuICAgICAgICBjb25zdCByZXF1aXJlU3RhcnRNYXRjaCA9IGxpbmUubWF0Y2goL15yZXF1aXJlXFxzKlxcKFxccyokLyk7IC8vIFN0YXJ0IG9mIG11bHRpbGluZSByZXF1aXJlXG4gICAgICAgIGNvbnN0IHJlcXVpcmVFbmRNYXRjaCA9IGxpbmUubWF0Y2goL15cXHMqXFwpXFxzKiQvKTsgLy8gRW5kIG9mIG11bHRpbGluZSByZXF1aXJlXG5cbiAgICAgICAgaWYgKG1vZHVsZU1hdGNoKSB7XG4gICAgICAgICAgcGFyc2VkLm1vZHVsZSA9IG1vZHVsZU1hdGNoWzFdO1xuICAgICAgICAgIGNvbnN0IHByb2plY3ROYW1lTWF0Y2ggPSBsaW5lLm1hdGNoKC8oPzpebW9kdWxlXFxzK3xcXC8pKFteL1xcc10rKSQvKTtcbiAgICAgICAgICBpZiAocHJvamVjdE5hbWVNYXRjaCkge1xuICAgICAgICAgICAgcHJvamVjdE5hbWUgPSBwcm9qZWN0TmFtZU1hdGNoWzFdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChyZXF1aXJlU3RhcnRNYXRjaCkge1xuICAgICAgICAgIGluc2lkZVJlcXVpcmVCbG9jayA9IHRydWU7IC8vIFdlJ3JlIGluc2lkZSBhIG11bHRpLWxpbmUgcmVxdWlyZSBibG9ja1xuICAgICAgICB9IGVsc2UgaWYgKHJlcXVpcmVFbmRNYXRjaCkge1xuICAgICAgICAgIGluc2lkZVJlcXVpcmVCbG9jayA9IGZhbHNlOyAvLyBFbmQgb2YgdGhlIG11bHRpLWxpbmUgcmVxdWlyZSBibG9ja1xuICAgICAgICB9IGVsc2UgaWYgKGluc2lkZVJlcXVpcmVCbG9jaykge1xuICAgICAgICAgIGNvbnN0IG11bHRpbGluZVJlcXVpcmVNYXRjaCA9IGxpbmUubWF0Y2goL15cXHMqKFxcUyspXFxzKyhcXFMrKVxccyguKikkLyk7IC8vIFJlcXVpcmUgZW50cmllcyB3aXRoaW4gbXVsdGlsaW5lIGJsb2NrXG4gICAgICAgICAgaWYgKG11bHRpbGluZVJlcXVpcmVNYXRjaCkge1xuICAgICAgICAgICAgaWYgKCFwYXJzZWQucmVxdWlyZSkge1xuICAgICAgICAgICAgICBwYXJzZWQucmVxdWlyZSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyc2VkLnJlcXVpcmUucHVzaCh7XG4gICAgICAgICAgICAgIG1vZHVsZTogbXVsdGlsaW5lUmVxdWlyZU1hdGNoWzFdLFxuICAgICAgICAgICAgICB2ZXJzaW9uOiBtdWx0aWxpbmVSZXF1aXJlTWF0Y2hbMl0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocmVxdWlyZU1hdGNoKSB7XG4gICAgICAgICAgaWYgKCFwYXJzZWQucmVxdWlyZSkge1xuICAgICAgICAgICAgcGFyc2VkLnJlcXVpcmUgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFyc2VkLnJlcXVpcmUucHVzaCh7XG4gICAgICAgICAgICBtb2R1bGU6IHJlcXVpcmVNYXRjaFsxXSxcbiAgICAgICAgICAgIHZlcnNpb246IHJlcXVpcmVNYXRjaFsyXSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB7IHByb2plY3ROYW1lLCBnb01vZDogcGFyc2VkIH07XG4gICAgfSk7XG4gIH1cblxuICBnZXQgcHJvamVjdEpzb24oKTogUHJvbWlzZTxQcm9qZWN0SnNvbiB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiBQcm9taXNlLmFsbChbdGhpcy5nb1Byb2plY3QsIHRoaXMuc3RhbmRhbG9uZUNvbmZpZ10pLnRoZW4oKFtwcm9qZWN0LCBjb25maWddKSA9PiB7XG4gICAgICBjb25zdCBwcm9qZWN0SnNvbjogUHJvamVjdEpzb24gPSB7XG4gICAgICAgIHR5cGU6ICdnb2xhbmcnLFxuICAgICAgfTtcblxuICAgICAgaWYgKCFwcm9qZWN0KSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHsgcHJvamVjdE5hbWUsIGdvTW9kIH0gPSBwcm9qZWN0O1xuICAgICAgcHJvamVjdEpzb24ubmFtZSA9IHByb2plY3ROYW1lO1xuXG4gICAgICAvLyBUT0RPOiBzdXBwb3J0IHZlcnNpb24gZnJvbSBnb2xhbmcgdGFnZ2luZyBzdHJ1Y3R1cmVzXG4gICAgICAvLyBUT0RPOiBzdXBwb3J0IHJlcGxhY2UgZGlyZWN0aXZlc1xuICAgICAgcHJvamVjdEpzb24uZGVwZW5kZW5jaWVzID0gZ29Nb2QucmVxdWlyZT8ucmVkdWNlKChhY2MsIGRlcCkgPT4ge1xuICAgICAgICBhY2NbZGVwLm1vZHVsZV0gPSBkZXAudmVyc2lvbjtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sIHt9IGFzIHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0pO1xuXG4gICAgICBpZiAoY29uZmlnKSB7XG4gICAgICAgIHByb2plY3RKc29uLnNjYWZmb2xkbHkgPSBjb25maWc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9qZWN0SnNvbjtcbiAgICB9KTtcbiAgfVxufVxuIiwgImltcG9ydCB7IHJlYWRkaXJTeW5jLCByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7XG5pbXBvcnQgeyBJU2VydmljZUNvbmZpZywgUHJvamVjdEpzb24sIFByb2plY3RKc29uQmluLCBTY3JpcHQsIFNjcmlwdHMgfSBmcm9tICcuLic7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBBYnN0cmFjdFByb2plY3QgfSBmcm9tICcuJztcbmltcG9ydCB7IHBhcnNlU3RyaW5nUHJvbWlzZSB9IGZyb20gJ3htbDJqcyc7XG5cbmV4cG9ydCB0eXBlIENzUHJvaiA9IHtcbiAgUHJvamVjdD86IHtcbiAgICBQcm9wZXJ0eUdyb3VwPzogQXJyYXk8e1xuICAgICAgVmVyc2lvbj86IEFycmF5PHN0cmluZz47XG4gICAgICBTY2FmZm9sZGx5PzogQXJyYXk8e1xuICAgICAgICBSdW50aW1lPzogQXJyYXk8c3RyaW5nPjtcbiAgICAgICAgSGFuZGxlcj86IEFycmF5PHN0cmluZz47XG4gICAgICAgIEJpbj86IEFycmF5PHtcbiAgICAgICAgICAkPzoge1xuICAgICAgICAgICAgbmFtZT86IHN0cmluZzsgLy8gZS5nLiwgXCJBcGlBcHAuZGxsXCJcbiAgICAgICAgICB9O1xuICAgICAgICAgIF86IHN0cmluZzsgLy8gUGF0aCB0byB0aGUgRExMLCBlLmcuLCBcIkFwaUFwcDpiaW4vUmVsZWFzZS9uZXQ4LjAvQXBpQXBwLmRsbFwiXG4gICAgICAgIH0+O1xuICAgICAgICBTZXJ2aWNlPzogQXJyYXk8e1xuICAgICAgICAgICQ/OiB7XG4gICAgICAgICAgICBuYW1lPzogc3RyaW5nOyAvLyBlLmcuLCBcIkFwaUFwcFwiXG4gICAgICAgICAgfTtcbiAgICAgICAgICBGaWxlOiBBcnJheTxzdHJpbmc+O1xuICAgICAgICAgIFNjcmlwdD86IEFycmF5PHtcbiAgICAgICAgICAgICQ/OiB7XG4gICAgICAgICAgICAgIG5hbWU/OiBzdHJpbmc7IC8vIGUuZy4sIFwiYnVpbGRcIiwgXCJzdGFydFwiXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXzogc3RyaW5nOyAvLyBTY3JpcHQgY29tbWFuZCwgZS5nLiwgXCJkb3RuZXQgcHVibGlzaFwiXG4gICAgICAgICAgfT47XG4gICAgICAgIH0+O1xuICAgICAgfT47XG4gICAgfT47XG4gICAgSXRlbUdyb3VwPzogQXJyYXk8e1xuICAgICAgUGFja2FnZVJlZmVyZW5jZT86IHtcbiAgICAgICAgJD86IHtcbiAgICAgICAgICBJbmNsdWRlPzogc3RyaW5nOyAvLyBlLmcuLCBcIk1pY3Jvc29mdC5Bc3BOZXRDb3JlLk9wZW5BcGlcIlxuICAgICAgICAgIFZlcnNpb24/OiBzdHJpbmc7IC8vIGUuZy4sIFwiOC4wLjhcIlxuICAgICAgICB9O1xuICAgICAgfVtdO1xuICAgIH0+O1xuICB9O1xufTtcblxuZXhwb3J0IGNsYXNzIERvdG5ldFByb2plY3QgZXh0ZW5kcyBBYnN0cmFjdFByb2plY3Qge1xuICBhc3luYyBzZXRQcm9qZWN0KFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICBfbmFtZTogc3RyaW5nLFxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBUaGlzIG9uZSBpcyB0cmlja3k6XG4gICAgLy8gLSBSZW5hbWUgLmNzcHJvaiBmaWxlXG4gICAgLy8gLSBSZW5hbWUgLmh0dHAgZmlsZVxuICAgIC8vIC0gUmVwbGFjZSBcIkRvdE5ldENTaGFycEFwcFwiIGluIC5jc3Byb2ogZmlsZVxuICAgIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG4gIH1cblxuICBwcml2YXRlIGdldCBwcm9qZWN0RmlsZSgpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiB0aGlzLndvcmtkaXIudGhlbigod29ya0RpcikgPT4ge1xuICAgICAgY29uc3QgZmlsZXMgPSByZWFkZGlyU3luYyh3b3JrRGlyKS5maWx0ZXIoKGZpbGUpID0+IGZpbGUuZW5kc1dpdGgoJy5jc3Byb2onKSk7XG4gICAgICBpZiAoZmlsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoZmlsZXMubGVuZ3RoID4gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE11bHRpcGxlIC5jc3Byb2ogZmlsZXMgZm91bmQ6ICR7ZmlsZXMuam9pbignLCAnKX0uYCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmlsZXNbMF07XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldCBwcm9qZWN0KCk6IFByb21pc2U8eyBwcm9qZWN0TmFtZTogc3RyaW5nOyBjc1Byb2o6IENzUHJvaiB9IHwgdW5kZWZpbmVkPiB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFt0aGlzLnByb2plY3RGaWxlLCB0aGlzLndvcmtkaXJdKS50aGVuKChbcHJvamVjdEZpbGUsIHdvcmtEaXJdKSA9PiB7XG4gICAgICBpZiAoIXByb2plY3RGaWxlKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gKHBhcnNlU3RyaW5nUHJvbWlzZShyZWFkRmlsZVN5bmMoam9pbih3b3JrRGlyLCBwcm9qZWN0RmlsZSkpKSBhcyBQcm9taXNlPENzUHJvaj4pLnRoZW4oXG4gICAgICAgIChjc1Byb2opID0+IHtcbiAgICAgICAgICByZXR1cm4geyBwcm9qZWN0TmFtZTogcHJvamVjdEZpbGUucmVwbGFjZSgnLmNzcHJvaicsICcnKSwgY3NQcm9qIH07XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0IHByb2plY3RKc29uKCk6IFByb21pc2U8UHJvamVjdEpzb24gfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5wcm9qZWN0LnRoZW4oKHByb2plY3QpID0+IHtcbiAgICAgIGNvbnN0IHByb2plY3RKc29uOiBQcm9qZWN0SnNvbiA9IHtcbiAgICAgICAgdHlwZTogJ2RvdG5ldCcsXG4gICAgICB9O1xuXG4gICAgICBpZiAoIXByb2plY3QpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBwcm9qZWN0TmFtZSwgY3NQcm9qIH0gPSBwcm9qZWN0O1xuICAgICAgcHJvamVjdEpzb24ubmFtZSA9IHByb2plY3ROYW1lO1xuXG4gICAgICBjb25zdCBjc1Byb2plY3QgPSBjc1Byb2o/LlByb2plY3Q7XG5cbiAgICAgIGlmICghY3NQcm9qZWN0KSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByb3BlcnR5R3JvdXAgPSBjc1Byb2plY3QuUHJvcGVydHlHcm91cD8uWzBdO1xuXG4gICAgICBpZiAoIXByb3BlcnR5R3JvdXApIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdmVyc2lvbiA9IHByb3BlcnR5R3JvdXAuVmVyc2lvbj8uWzBdO1xuICAgICAgcHJvamVjdEpzb24udmVyc2lvbiA9IHZlcnNpb247XG5cbiAgICAgIGNvbnN0IFNjYWZmb2xkbHkgPSBwcm9wZXJ0eUdyb3VwLlNjYWZmb2xkbHk/LlswXTtcblxuICAgICAgaWYgKCFTY2FmZm9sZGx5KSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGJpbjogUHJvamVjdEpzb25CaW4gPSAoU2NhZmZvbGRseS5CaW4gfHwgW10pLnJlZHVjZSgoYWNjLCBiaW5FbnRyeSkgPT4ge1xuICAgICAgICBjb25zdCBuYW1lID0gYmluRW50cnkuJD8ubmFtZTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBiaW5FbnRyeS5fO1xuICAgICAgICBpZiAoIW5hbWUgfHwgIXZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfVxuICAgICAgICBhY2NbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sIHt9IGFzIFByb2plY3RKc29uQmluKTtcblxuICAgICAgY29uc3Qgc2VydmljZXM6IElTZXJ2aWNlQ29uZmlnW10gPSAoU2NhZmZvbGRseS5TZXJ2aWNlIHx8IFtdKS5tYXAoKHNlcnZpY2UpID0+IHtcbiAgICAgICAgY29uc3Qgc2NyaXB0czogU2NyaXB0cyA9IChzZXJ2aWNlLlNjcmlwdCB8fCBbXSkucmVkdWNlKChhY2MsIHNjcmlwdCkgPT4ge1xuICAgICAgICAgIGNvbnN0IG5hbWUgPSBzY3JpcHQuJD8ubmFtZSBhcyBTY3JpcHQ7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBzY3JpcHQuXztcbiAgICAgICAgICBpZiAoIW5hbWUgfHwgIXZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhY2NbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCB7fSBhcyBTY3JpcHRzKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5hbWU6IHNlcnZpY2UuJD8ubmFtZSxcbiAgICAgICAgICBzY3JpcHRzLFxuICAgICAgICAgIGZpbGVzOiBzZXJ2aWNlLkZpbGUsXG4gICAgICAgIH0gYXMgSVNlcnZpY2VDb25maWc7XG4gICAgICB9KTtcblxuICAgICAgcHJvamVjdEpzb24uc2NhZmZvbGRseSA9IHtcbiAgICAgICAgcnVudGltZTogU2NhZmZvbGRseS5SdW50aW1lPy5bMF0sXG4gICAgICAgIGhhbmRsZXI6IFNjYWZmb2xkbHkuSGFuZGxlcj8uWzBdLFxuICAgICAgICBiaW4sXG4gICAgICAgIHNlcnZpY2VzLFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHByb2plY3RKc29uO1xuICAgIH0pO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgZXhpc3RzU3luYywgcmVhZEZpbGVTeW5jLCB3cml0ZUZpbGVTeW5jIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgSVNjYWZmb2xkbHlDb25maWcsIElTZXJ2aWNlQ29uZmlnLCBQcm9qZWN0SnNvbiB9IGZyb20gJy4uJztcbmltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcbmltcG9ydCB7IEFic3RyYWN0UHJvamVjdCB9IGZyb20gJy4nO1xuaW1wb3J0IHsgcGFyc2UsIHN0cmluZ2lmeSB9IGZyb20gJ3Ntb2wtdG9tbCc7XG5cbnR5cGUgU2NhZmZvbGRseUNvbmZpZ1dpdGhTZXJ2aWNlTWFwID0gSVNjYWZmb2xkbHlDb25maWcgJiB7XG4gIHNlcnZpY2VzPzogQXJyYXk8UGFydGlhbDxJU2VydmljZUNvbmZpZz5bXT4gfCB7IFtrZXk6IHN0cmluZ106IFBhcnRpYWw8SVNlcnZpY2VDb25maWc+IH07XG59O1xuXG50eXBlIFB5cHJvamVjdFRvbWwgPSB7XG4gIHRvb2w/OiB7XG4gICAgcG9ldHJ5Pzoge1xuICAgICAgbmFtZT86IHN0cmluZztcbiAgICAgIHZlcnNpb24/OiBzdHJpbmc7XG4gICAgICBkZXBlbmRlbmNpZXM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB8IHsgdmVyc2lvbj86IHN0cmluZzsgZXh0cmFzPzogc3RyaW5nW10gfSB9O1xuICAgIH07XG4gICAgc2NhZmZvbGRseT86IFBhcnRpYWw8U2NhZmZvbGRseUNvbmZpZ1dpdGhTZXJ2aWNlTWFwPjtcbiAgfTtcbiAgJ2J1aWxkLXN5c3RlbSc/OiB7XG4gICAgcmVxdWlyZXM/OiBzdHJpbmdbXTtcbiAgfTtcbn07XG5cbmV4cG9ydCBjbGFzcyBQeXRob25Qcm9qZWN0IGV4dGVuZHMgQWJzdHJhY3RQcm9qZWN0IHtcbiAgYXN5bmMgc2V0UHJvamVjdChuYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5weVByb2plY3RGaWxlLnRoZW4oKHB5UHJvamVjdEZpbGUpID0+IHtcbiAgICAgIGlmICghcHlQcm9qZWN0RmlsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHB5UHJvamVjdCA9IHBhcnNlKHJlYWRGaWxlU3luYyhweVByb2plY3RGaWxlLCAndXRmLTgnKSkgYXMgUGFydGlhbDxQeXByb2plY3RUb21sPjtcblxuICAgICAgaWYgKHB5UHJvamVjdC50b29sPy5wb2V0cnkpIHtcbiAgICAgICAgcHlQcm9qZWN0LnRvb2wucG9ldHJ5Lm5hbWUgPSBuYW1lO1xuICAgICAgfVxuXG4gICAgICB3cml0ZUZpbGVTeW5jKHB5UHJvamVjdEZpbGUsIHN0cmluZ2lmeShweVByb2plY3QpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IHB5UHJvamVjdEZpbGUoKTogUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy53b3JrZGlyXG4gICAgICAudGhlbigod29ya0RpcikgPT4gam9pbih3b3JrRGlyLCAncHlwcm9qZWN0LnRvbWwnKSlcbiAgICAgIC50aGVuKChweVByb2plY3RGaWxlKSA9PiB7XG4gICAgICAgIGlmICghZXhpc3RzU3luYyhweVByb2plY3RGaWxlKSkge1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHB5UHJvamVjdEZpbGU7XG4gICAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IHB5UHJvamVjdCgpOiBQcm9taXNlPHsgcHlwcm9qZWN0VG9tbDogUHlwcm9qZWN0VG9tbCB9IHwgdW5kZWZpbmVkPiB7XG4gICAgcmV0dXJuIHRoaXMucHlQcm9qZWN0RmlsZS50aGVuKChweVByb2plY3RGaWxlKSA9PiB7XG4gICAgICBpZiAoIXB5UHJvamVjdEZpbGUpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcGFyc2VkID0gcGFyc2UocmVhZEZpbGVTeW5jKHB5UHJvamVjdEZpbGUsICd1dGYtOCcpKSBhcyBQeXByb2plY3RUb21sO1xuXG4gICAgICByZXR1cm4geyBweXByb2plY3RUb21sOiBwYXJzZWQgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldCBwcm9qZWN0SnNvbigpOiBQcm9taXNlPFByb2plY3RKc29uIHwgdW5kZWZpbmVkPiB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFt0aGlzLnB5UHJvamVjdF0pLnRoZW4oKFtwcm9qZWN0XSkgPT4ge1xuICAgICAgY29uc3QgcHJvamVjdEpzb246IFByb2plY3RKc29uID0geyB0eXBlOiAncHl0aG9uJyB9O1xuXG4gICAgICBpZiAoIXByb2plY3QpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBweXByb2plY3RUb21sIH0gPSBwcm9qZWN0O1xuXG4gICAgICBjb25zdCBkZXBlbmRlbmNpZXMgPSBweXByb2plY3RUb21sLnRvb2w/LnBvZXRyeT8uZGVwZW5kZW5jaWVzIHx8IHt9O1xuXG4gICAgICBpZiAocHlwcm9qZWN0VG9tbC50b29sPy5wb2V0cnkpIHtcbiAgICAgICAgcHJvamVjdEpzb24ubmFtZSA9IHB5cHJvamVjdFRvbWwudG9vbC5wb2V0cnkubmFtZTtcbiAgICAgICAgcHJvamVjdEpzb24udmVyc2lvbiA9IHB5cHJvamVjdFRvbWwudG9vbC5wb2V0cnkudmVyc2lvbjtcbiAgICAgIH1cblxuICAgICAgcHJvamVjdEpzb24uZGVwZW5kZW5jaWVzID0gT2JqZWN0LmVudHJpZXMoZGVwZW5kZW5jaWVzIHx8IHt9KS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgYWNjW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZS52ZXJzaW9uID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGFjY1trZXldID0gdmFsdWUudmVyc2lvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30gYXMgeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSk7XG5cbiAgICAgIGNvbnN0IHNlcnZpY2VzID1cbiAgICAgICAgcHlwcm9qZWN0VG9tbC50b29sPy5zY2FmZm9sZGx5Py5zZXJ2aWNlcyAmJlxuICAgICAgICBBcnJheS5pc0FycmF5KHB5cHJvamVjdFRvbWwudG9vbD8uc2NhZmZvbGRseT8uc2VydmljZXMpXG4gICAgICAgICAgPyBweXByb2plY3RUb21sLnRvb2wuc2NhZmZvbGRseS5zZXJ2aWNlc1xuICAgICAgICAgIDogT2JqZWN0LmVudHJpZXMocHlwcm9qZWN0VG9tbC50b29sPy5zY2FmZm9sZGx5Py5zZXJ2aWNlcyB8fCB7fSkubWFwKChba2V5LCB2YWx1ZV0pID0+ICh7XG4gICAgICAgICAgICAgIC4uLnZhbHVlLFxuICAgICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgIGNvbnN0IHNjYWZmb2xkbHk6IFBhcnRpYWw8SVNjYWZmb2xkbHlDb25maWc+ID0ge1xuICAgICAgICAuLi5weXByb2plY3RUb21sLnRvb2w/LnNjYWZmb2xkbHksXG4gICAgICAgIHBhY2thZ2VzOiBbXG4gICAgICAgICAgLi4uKHB5cHJvamVjdFRvbWwudG9vbD8uc2NhZmZvbGRseT8ucGFja2FnZXMgfHwgW10pLFxuICAgICAgICAgIC4uLihweXByb2plY3RUb21sWydidWlsZC1zeXN0ZW0nXT8ucmVxdWlyZXMgfHwgW10pLm1hcCgocGtnKSA9PiBgcGlwOiR7cGtnfWApLFxuICAgICAgICBdLFxuICAgICAgICBzZXJ2aWNlcyxcbiAgICAgIH07XG5cbiAgICAgIHByb2plY3RKc29uLnNjYWZmb2xkbHkgPSBzY2FmZm9sZGx5O1xuXG4gICAgICByZXR1cm4gcHJvamVjdEpzb247XG4gICAgfSk7XG4gIH1cbn1cbiIsICIvKiFcbiAqIENvcHlyaWdodCAoYykgU3F1aXJyZWwgQ2hhdCBldCBhbC4sIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbiAqXG4gKiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiAqICAgIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICogMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKiAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBjb3B5cmlnaHQgaG9sZGVyIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuICogICAgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXRcbiAqICAgIHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkRcbiAqIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gKiBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG4gKiBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFXG4gKiBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTFxuICogREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1JcbiAqIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSXG4gKiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLFxuICogT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0VcbiAqIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbmZ1bmN0aW9uIGdldExpbmVDb2xGcm9tUHRyKHN0cmluZywgcHRyKSB7XG4gICAgbGV0IGxpbmVzID0gc3RyaW5nLnNsaWNlKDAsIHB0cikuc3BsaXQoL1xcclxcbnxcXG58XFxyL2cpO1xuICAgIHJldHVybiBbbGluZXMubGVuZ3RoLCBsaW5lcy5wb3AoKS5sZW5ndGggKyAxXTtcbn1cbmZ1bmN0aW9uIG1ha2VDb2RlQmxvY2soc3RyaW5nLCBsaW5lLCBjb2x1bW4pIHtcbiAgICBsZXQgbGluZXMgPSBzdHJpbmcuc3BsaXQoL1xcclxcbnxcXG58XFxyL2cpO1xuICAgIGxldCBjb2RlYmxvY2sgPSAnJztcbiAgICBsZXQgbnVtYmVyTGVuID0gKE1hdGgubG9nMTAobGluZSArIDEpIHwgMCkgKyAxO1xuICAgIGZvciAobGV0IGkgPSBsaW5lIC0gMTsgaSA8PSBsaW5lICsgMTsgaSsrKSB7XG4gICAgICAgIGxldCBsID0gbGluZXNbaSAtIDFdO1xuICAgICAgICBpZiAoIWwpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY29kZWJsb2NrICs9IGkudG9TdHJpbmcoKS5wYWRFbmQobnVtYmVyTGVuLCAnICcpO1xuICAgICAgICBjb2RlYmxvY2sgKz0gJzogICc7XG4gICAgICAgIGNvZGVibG9jayArPSBsO1xuICAgICAgICBjb2RlYmxvY2sgKz0gJ1xcbic7XG4gICAgICAgIGlmIChpID09PSBsaW5lKSB7XG4gICAgICAgICAgICBjb2RlYmxvY2sgKz0gJyAnLnJlcGVhdChudW1iZXJMZW4gKyBjb2x1bW4gKyAyKTtcbiAgICAgICAgICAgIGNvZGVibG9jayArPSAnXlxcbic7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvZGVibG9jaztcbn1cbmV4cG9ydCBjbGFzcyBUb21sRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgbGluZTtcbiAgICBjb2x1bW47XG4gICAgY29kZWJsb2NrO1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgW2xpbmUsIGNvbHVtbl0gPSBnZXRMaW5lQ29sRnJvbVB0cihvcHRpb25zLnRvbWwsIG9wdGlvbnMucHRyKTtcbiAgICAgICAgY29uc3QgY29kZWJsb2NrID0gbWFrZUNvZGVCbG9jayhvcHRpb25zLnRvbWwsIGxpbmUsIGNvbHVtbik7XG4gICAgICAgIHN1cGVyKGBJbnZhbGlkIFRPTUwgZG9jdW1lbnQ6ICR7bWVzc2FnZX1cXG5cXG4ke2NvZGVibG9ja31gLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5saW5lID0gbGluZTtcbiAgICAgICAgdGhpcy5jb2x1bW4gPSBjb2x1bW47XG4gICAgICAgIHRoaXMuY29kZWJsb2NrID0gY29kZWJsb2NrO1xuICAgIH1cbn1cbiIsICIvKiFcbiAqIENvcHlyaWdodCAoYykgU3F1aXJyZWwgQ2hhdCBldCBhbC4sIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbiAqXG4gKiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiAqICAgIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICogMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKiAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBjb3B5cmlnaHQgaG9sZGVyIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuICogICAgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXRcbiAqICAgIHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkRcbiAqIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gKiBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG4gKiBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFXG4gKiBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTFxuICogREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1JcbiAqIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSXG4gKiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLFxuICogT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0VcbiAqIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbmltcG9ydCB7IFRvbWxFcnJvciB9IGZyb20gJy4vZXJyb3IuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGluZGV4T2ZOZXdsaW5lKHN0ciwgc3RhcnQgPSAwLCBlbmQgPSBzdHIubGVuZ3RoKSB7XG4gICAgbGV0IGlkeCA9IHN0ci5pbmRleE9mKCdcXG4nLCBzdGFydCk7XG4gICAgaWYgKHN0cltpZHggLSAxXSA9PT0gJ1xccicpXG4gICAgICAgIGlkeC0tO1xuICAgIHJldHVybiBpZHggPD0gZW5kID8gaWR4IDogLTE7XG59XG5leHBvcnQgZnVuY3Rpb24gc2tpcENvbW1lbnQoc3RyLCBwdHIpIHtcbiAgICBmb3IgKGxldCBpID0gcHRyOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBjID0gc3RyW2ldO1xuICAgICAgICBpZiAoYyA9PT0gJ1xcbicpXG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgaWYgKGMgPT09ICdcXHInICYmIHN0cltpICsgMV0gPT09ICdcXG4nKVxuICAgICAgICAgICAgcmV0dXJuIGkgKyAxO1xuICAgICAgICBpZiAoKGMgPCAnXFx4MjAnICYmIGMgIT09ICdcXHQnKSB8fCBjID09PSAnXFx4N2YnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVG9tbEVycm9yKCdjb250cm9sIGNoYXJhY3RlcnMgYXJlIG5vdCBhbGxvd2VkIGluIGNvbW1lbnRzJywge1xuICAgICAgICAgICAgICAgIHRvbWw6IHN0cixcbiAgICAgICAgICAgICAgICBwdHI6IHB0cixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHIubGVuZ3RoO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNraXBWb2lkKHN0ciwgcHRyLCBiYW5OZXdMaW5lcywgYmFuQ29tbWVudHMpIHtcbiAgICBsZXQgYztcbiAgICB3aGlsZSAoKGMgPSBzdHJbcHRyXSkgPT09ICcgJyB8fCBjID09PSAnXFx0JyB8fCAoIWJhbk5ld0xpbmVzICYmIChjID09PSAnXFxuJyB8fCBjID09PSAnXFxyJyAmJiBzdHJbcHRyICsgMV0gPT09ICdcXG4nKSkpXG4gICAgICAgIHB0cisrO1xuICAgIHJldHVybiBiYW5Db21tZW50cyB8fCBjICE9PSAnIydcbiAgICAgICAgPyBwdHJcbiAgICAgICAgOiBza2lwVm9pZChzdHIsIHNraXBDb21tZW50KHN0ciwgcHRyKSwgYmFuTmV3TGluZXMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNraXBVbnRpbChzdHIsIHB0ciwgc2VwLCBlbmQsIGJhbk5ld0xpbmVzID0gZmFsc2UpIHtcbiAgICBpZiAoIWVuZCkge1xuICAgICAgICBwdHIgPSBpbmRleE9mTmV3bGluZShzdHIsIHB0cik7XG4gICAgICAgIHJldHVybiBwdHIgPCAwID8gc3RyLmxlbmd0aCA6IHB0cjtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IHB0cjsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgYyA9IHN0cltpXTtcbiAgICAgICAgaWYgKGMgPT09ICcjJykge1xuICAgICAgICAgICAgaSA9IGluZGV4T2ZOZXdsaW5lKHN0ciwgaSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gc2VwKSB7XG4gICAgICAgICAgICByZXR1cm4gaSArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gZW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiYW5OZXdMaW5lcyAmJiAoYyA9PT0gJ1xcbicgfHwgYyA9PT0gJ1xccicgJiYgc3RyW2kgKyAxXSA9PT0gJ1xcbicpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgVG9tbEVycm9yKCdjYW5ub3QgZmluZCBlbmQgb2Ygc3RydWN0dXJlJywge1xuICAgICAgICB0b21sOiBzdHIsXG4gICAgICAgIHB0cjogcHRyXG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RyaW5nRW5kKHN0ciwgc2Vlaykge1xuICAgIGxldCBmaXJzdCA9IHN0cltzZWVrXTtcbiAgICBsZXQgdGFyZ2V0ID0gZmlyc3QgPT09IHN0cltzZWVrICsgMV0gJiYgc3RyW3NlZWsgKyAxXSA9PT0gc3RyW3NlZWsgKyAyXVxuICAgICAgICA/IHN0ci5zbGljZShzZWVrLCBzZWVrICsgMylcbiAgICAgICAgOiBmaXJzdDtcbiAgICBzZWVrICs9IHRhcmdldC5sZW5ndGggLSAxO1xuICAgIGRvXG4gICAgICAgIHNlZWsgPSBzdHIuaW5kZXhPZih0YXJnZXQsICsrc2Vlayk7XG4gICAgd2hpbGUgKHNlZWsgPiAtMSAmJiBmaXJzdCAhPT0gXCInXCIgJiYgc3RyW3NlZWsgLSAxXSA9PT0gJ1xcXFwnICYmIHN0cltzZWVrIC0gMl0gIT09ICdcXFxcJyk7XG4gICAgaWYgKHNlZWsgPiAtMSkge1xuICAgICAgICBzZWVrICs9IHRhcmdldC5sZW5ndGg7XG4gICAgICAgIGlmICh0YXJnZXQubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgaWYgKHN0cltzZWVrXSA9PT0gZmlyc3QpXG4gICAgICAgICAgICAgICAgc2VlaysrO1xuICAgICAgICAgICAgaWYgKHN0cltzZWVrXSA9PT0gZmlyc3QpXG4gICAgICAgICAgICAgICAgc2VlaysrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzZWVrO1xufVxuIiwgIi8qIVxuICogQ29weXJpZ2h0IChjKSBTcXVpcnJlbCBDaGF0IGV0IGFsLiwgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICpcbiAqIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuICogICAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICogICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIGNvcHlyaWdodCBob2xkZXIgbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4gKiAgICBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dFxuICogICAgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORFxuICogQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEVcbiAqIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMXG4gKiBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUlxuICogU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVJcbiAqIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksXG4gKiBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRVxuICogT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xubGV0IERBVEVfVElNRV9SRSA9IC9eKFxcZHs0fS1cXGR7Mn0tXFxkezJ9KT9bVCBdPyg/OihcXGR7Mn0pOlxcZHsyfTpcXGR7Mn0oPzpcXC5cXGQrKT8pPyhafFstK11cXGR7Mn06XFxkezJ9KT8kL2k7XG5leHBvcnQgY2xhc3MgVG9tbERhdGUgZXh0ZW5kcyBEYXRlIHtcbiAgICAjaGFzRGF0ZSA9IGZhbHNlO1xuICAgICNoYXNUaW1lID0gZmFsc2U7XG4gICAgI29mZnNldCA9IG51bGw7XG4gICAgY29uc3RydWN0b3IoZGF0ZSkge1xuICAgICAgICBsZXQgaGFzRGF0ZSA9IHRydWU7XG4gICAgICAgIGxldCBoYXNUaW1lID0gdHJ1ZTtcbiAgICAgICAgbGV0IG9mZnNldCA9ICdaJztcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgbGV0IG1hdGNoID0gZGF0ZS5tYXRjaChEQVRFX1RJTUVfUkUpO1xuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFtYXRjaFsxXSkge1xuICAgICAgICAgICAgICAgICAgICBoYXNEYXRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSBgMDAwMC0wMS0wMVQke2RhdGV9YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGFzVGltZSA9ICEhbWF0Y2hbMl07XG4gICAgICAgICAgICAgICAgLy8gRG8gbm90IGFsbG93IHJvbGxvdmVyIGhvdXJzXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoWzJdICYmICttYXRjaFsyXSA+IDIzKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IG1hdGNoWzNdIHx8IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSBkYXRlLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb2Zmc2V0ICYmIGhhc1RpbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlICs9ICdaJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRlID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoZGF0ZSk7XG4gICAgICAgIGlmICghaXNOYU4odGhpcy5nZXRUaW1lKCkpKSB7XG4gICAgICAgICAgICB0aGlzLiNoYXNEYXRlID0gaGFzRGF0ZTtcbiAgICAgICAgICAgIHRoaXMuI2hhc1RpbWUgPSBoYXNUaW1lO1xuICAgICAgICAgICAgdGhpcy4jb2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlzRGF0ZVRpbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNoYXNEYXRlICYmIHRoaXMuI2hhc1RpbWU7XG4gICAgfVxuICAgIGlzTG9jYWwoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy4jaGFzRGF0ZSB8fCAhdGhpcy4jaGFzVGltZSB8fCAhdGhpcy4jb2Zmc2V0O1xuICAgIH1cbiAgICBpc0RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNoYXNEYXRlICYmICF0aGlzLiNoYXNUaW1lO1xuICAgIH1cbiAgICBpc1RpbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNoYXNUaW1lICYmICF0aGlzLiNoYXNEYXRlO1xuICAgIH1cbiAgICBpc1ZhbGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jaGFzRGF0ZSB8fCB0aGlzLiNoYXNUaW1lO1xuICAgIH1cbiAgICB0b0lTT1N0cmluZygpIHtcbiAgICAgICAgbGV0IGlzbyA9IHN1cGVyLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIC8vIExvY2FsIERhdGVcbiAgICAgICAgaWYgKHRoaXMuaXNEYXRlKCkpXG4gICAgICAgICAgICByZXR1cm4gaXNvLnNsaWNlKDAsIDEwKTtcbiAgICAgICAgLy8gTG9jYWwgVGltZVxuICAgICAgICBpZiAodGhpcy5pc1RpbWUoKSlcbiAgICAgICAgICAgIHJldHVybiBpc28uc2xpY2UoMTEsIDIzKTtcbiAgICAgICAgLy8gTG9jYWwgRGF0ZVRpbWVcbiAgICAgICAgaWYgKHRoaXMuI29mZnNldCA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBpc28uc2xpY2UoMCwgLTEpO1xuICAgICAgICAvLyBPZmZzZXQgRGF0ZVRpbWVcbiAgICAgICAgaWYgKHRoaXMuI29mZnNldCA9PT0gJ1onKVxuICAgICAgICAgICAgcmV0dXJuIGlzbztcbiAgICAgICAgLy8gVGhpcyBwYXJ0IGlzIHF1aXRlIGFubm95aW5nOiBKUyBzdHJpcHMgdGhlIG9yaWdpbmFsIHRpbWV6b25lIGZyb20gdGhlIElTTyBzdHJpbmcgcmVwcmVzZW50YXRpb25cbiAgICAgICAgLy8gSW5zdGVhZCBvZiB1c2luZyBhIFwibW9kaWZpZWRcIiBkYXRlIGFuZCBcIlpcIiwgd2UgcmVzdG9yZSB0aGUgcmVwcmVzZW50YXRpb24gXCJhcyBhdXRob3JlZFwiXG4gICAgICAgIGxldCBvZmZzZXQgPSAoKyh0aGlzLiNvZmZzZXQuc2xpY2UoMSwgMykpICogNjApICsgKyh0aGlzLiNvZmZzZXQuc2xpY2UoNCwgNikpO1xuICAgICAgICBvZmZzZXQgPSB0aGlzLiNvZmZzZXRbMF0gPT09ICctJyA/IG9mZnNldCA6IC1vZmZzZXQ7XG4gICAgICAgIGxldCBvZmZzZXREYXRlID0gbmV3IERhdGUodGhpcy5nZXRUaW1lKCkgLSAob2Zmc2V0ICogNjBlMykpO1xuICAgICAgICByZXR1cm4gb2Zmc2V0RGF0ZS50b0lTT1N0cmluZygpLnNsaWNlKDAsIC0xKSArIHRoaXMuI29mZnNldDtcbiAgICB9XG4gICAgc3RhdGljIHdyYXBBc09mZnNldERhdGVUaW1lKGpzRGF0ZSwgb2Zmc2V0ID0gJ1onKSB7XG4gICAgICAgIGxldCBkYXRlID0gbmV3IFRvbWxEYXRlKGpzRGF0ZSk7XG4gICAgICAgIGRhdGUuI29mZnNldCA9IG9mZnNldDtcbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICAgIHN0YXRpYyB3cmFwQXNMb2NhbERhdGVUaW1lKGpzRGF0ZSkge1xuICAgICAgICBsZXQgZGF0ZSA9IG5ldyBUb21sRGF0ZShqc0RhdGUpO1xuICAgICAgICBkYXRlLiNvZmZzZXQgPSBudWxsO1xuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG4gICAgc3RhdGljIHdyYXBBc0xvY2FsRGF0ZShqc0RhdGUpIHtcbiAgICAgICAgbGV0IGRhdGUgPSBuZXcgVG9tbERhdGUoanNEYXRlKTtcbiAgICAgICAgZGF0ZS4jaGFzVGltZSA9IGZhbHNlO1xuICAgICAgICBkYXRlLiNvZmZzZXQgPSBudWxsO1xuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG4gICAgc3RhdGljIHdyYXBBc0xvY2FsVGltZShqc0RhdGUpIHtcbiAgICAgICAgbGV0IGRhdGUgPSBuZXcgVG9tbERhdGUoanNEYXRlKTtcbiAgICAgICAgZGF0ZS4jaGFzRGF0ZSA9IGZhbHNlO1xuICAgICAgICBkYXRlLiNvZmZzZXQgPSBudWxsO1xuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG59XG4iLCAiLyohXG4gKiBDb3B5cmlnaHQgKGMpIFNxdWlycmVsIENoYXQgZXQgYWwuLCBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKlxuICogMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4gKiAgICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqICAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gKiAgICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICogMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgY29weXJpZ2h0IGhvbGRlciBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiAqICAgIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0XG4gKiAgICBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EXG4gKiBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRFxuICogV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICogRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRVxuICogRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUxcbiAqIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SXG4gKiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUlxuICogQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSxcbiAqIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFXG4gKiBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5pbXBvcnQgeyBza2lwVm9pZCB9IGZyb20gJy4vdXRpbC5qcyc7XG5pbXBvcnQgeyBUb21sRGF0ZSB9IGZyb20gJy4vZGF0ZS5qcyc7XG5pbXBvcnQgeyBUb21sRXJyb3IgfSBmcm9tICcuL2Vycm9yLmpzJztcbmxldCBJTlRfUkVHRVggPSAvXigoMHhbMC05YS1mQS1GXShfP1swLTlhLWZBLUZdKSopfCgoWystXXwwW29iXSk/XFxkKF8/XFxkKSopKSQvO1xubGV0IEZMT0FUX1JFR0VYID0gL15bKy1dP1xcZChfP1xcZCkqKFxcLlxcZChfP1xcZCkqKT8oW2VFXVsrLV0/XFxkKF8/XFxkKSopPyQvO1xubGV0IExFQURJTkdfWkVSTyA9IC9eWystXT8wWzAtOV9dLztcbmxldCBFU0NBUEVfUkVHRVggPSAvXlswLTlhLWZdezQsOH0kL2k7XG5sZXQgRVNDX01BUCA9IHtcbiAgICBiOiAnXFxiJyxcbiAgICB0OiAnXFx0JyxcbiAgICBuOiAnXFxuJyxcbiAgICBmOiAnXFxmJyxcbiAgICByOiAnXFxyJyxcbiAgICAnXCInOiAnXCInLFxuICAgICdcXFxcJzogJ1xcXFwnLFxufTtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN0cmluZyhzdHIsIHB0ciA9IDAsIGVuZFB0ciA9IHN0ci5sZW5ndGgpIHtcbiAgICBsZXQgaXNMaXRlcmFsID0gc3RyW3B0cl0gPT09IFwiJ1wiO1xuICAgIGxldCBpc011bHRpbGluZSA9IHN0cltwdHIrK10gPT09IHN0cltwdHJdICYmIHN0cltwdHJdID09PSBzdHJbcHRyICsgMV07XG4gICAgaWYgKGlzTXVsdGlsaW5lKSB7XG4gICAgICAgIGVuZFB0ciAtPSAyO1xuICAgICAgICBpZiAoc3RyW3B0ciArPSAyXSA9PT0gJ1xccicpXG4gICAgICAgICAgICBwdHIrKztcbiAgICAgICAgaWYgKHN0cltwdHJdID09PSAnXFxuJylcbiAgICAgICAgICAgIHB0cisrO1xuICAgIH1cbiAgICBsZXQgdG1wID0gMDtcbiAgICBsZXQgaXNFc2NhcGU7XG4gICAgbGV0IHBhcnNlZCA9ICcnO1xuICAgIGxldCBzbGljZVN0YXJ0ID0gcHRyO1xuICAgIHdoaWxlIChwdHIgPCBlbmRQdHIgLSAxKSB7XG4gICAgICAgIGxldCBjID0gc3RyW3B0cisrXTtcbiAgICAgICAgaWYgKGMgPT09ICdcXG4nIHx8IChjID09PSAnXFxyJyAmJiBzdHJbcHRyXSA9PT0gJ1xcbicpKSB7XG4gICAgICAgICAgICBpZiAoIWlzTXVsdGlsaW5lKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcignbmV3bGluZXMgYXJlIG5vdCBhbGxvd2VkIGluIHN0cmluZ3MnLCB7XG4gICAgICAgICAgICAgICAgICAgIHRvbWw6IHN0cixcbiAgICAgICAgICAgICAgICAgICAgcHRyOiBwdHIgLSAxXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKGMgPCAnXFx4MjAnICYmIGMgIT09ICdcXHQnKSB8fCBjID09PSAnXFx4N2YnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVG9tbEVycm9yKCdjb250cm9sIGNoYXJhY3RlcnMgYXJlIG5vdCBhbGxvd2VkIGluIHN0cmluZ3MnLCB7XG4gICAgICAgICAgICAgICAgdG9tbDogc3RyLFxuICAgICAgICAgICAgICAgIHB0cjogcHRyIC0gMVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRXNjYXBlKSB7XG4gICAgICAgICAgICBpc0VzY2FwZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGMgPT09ICd1JyB8fCBjID09PSAnVScpIHtcbiAgICAgICAgICAgICAgICAvLyBVbmljb2RlIGVzY2FwZVxuICAgICAgICAgICAgICAgIGxldCBjb2RlID0gc3RyLnNsaWNlKHB0ciwgKHB0ciArPSAoYyA9PT0gJ3UnID8gNCA6IDgpKSk7XG4gICAgICAgICAgICAgICAgaWYgKCFFU0NBUEVfUkVHRVgudGVzdChjb2RlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVG9tbEVycm9yKCdpbnZhbGlkIHVuaWNvZGUgZXNjYXBlJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9tbDogc3RyLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHRyOiB0bXBcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZCArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChwYXJzZUludChjb2RlLCAxNikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ2ludmFsaWQgdW5pY29kZSBlc2NhcGUnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b21sOiBzdHIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwdHI6IHRtcFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc011bHRpbGluZSAmJiAoYyA9PT0gJ1xcbicgfHwgYyA9PT0gJyAnIHx8IGMgPT09ICdcXHQnIHx8IGMgPT09ICdcXHInKSkge1xuICAgICAgICAgICAgICAgIC8vIE11bHRpbGluZSBlc2NhcGVcbiAgICAgICAgICAgICAgICBwdHIgPSBza2lwVm9pZChzdHIsIHB0ciAtIDEsIHRydWUpO1xuICAgICAgICAgICAgICAgIGlmIChzdHJbcHRyXSAhPT0gJ1xcbicgJiYgc3RyW3B0cl0gIT09ICdcXHInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ2ludmFsaWQgZXNjYXBlOiBvbmx5IGxpbmUtZW5kaW5nIHdoaXRlc3BhY2UgbWF5IGJlIGVzY2FwZWQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b21sOiBzdHIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwdHI6IHRtcFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHRyID0gc2tpcFZvaWQoc3RyLCBwdHIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYyBpbiBFU0NfTUFQKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2xhc3NpYyBlc2NhcGVcbiAgICAgICAgICAgICAgICBwYXJzZWQgKz0gRVNDX01BUFtjXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ3VucmVjb2duaXplZCBlc2NhcGUgc2VxdWVuY2UnLCB7XG4gICAgICAgICAgICAgICAgICAgIHRvbWw6IHN0cixcbiAgICAgICAgICAgICAgICAgICAgcHRyOiB0bXBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNsaWNlU3RhcnQgPSBwdHI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWlzTGl0ZXJhbCAmJiBjID09PSAnXFxcXCcpIHtcbiAgICAgICAgICAgIHRtcCA9IHB0ciAtIDE7XG4gICAgICAgICAgICBpc0VzY2FwZSA9IHRydWU7XG4gICAgICAgICAgICBwYXJzZWQgKz0gc3RyLnNsaWNlKHNsaWNlU3RhcnQsIHRtcCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZCArIHN0ci5zbGljZShzbGljZVN0YXJ0LCBlbmRQdHIgLSAxKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVZhbHVlKHZhbHVlLCB0b21sLCBwdHIpIHtcbiAgICAvLyBDb25zdGFudCB2YWx1ZXNcbiAgICBpZiAodmFsdWUgPT09ICd0cnVlJylcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKHZhbHVlID09PSAnZmFsc2UnKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHZhbHVlID09PSAnLWluZicpXG4gICAgICAgIHJldHVybiAtSW5maW5pdHk7XG4gICAgaWYgKHZhbHVlID09PSAnaW5mJyB8fCB2YWx1ZSA9PT0gJytpbmYnKVxuICAgICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgaWYgKHZhbHVlID09PSAnbmFuJyB8fCB2YWx1ZSA9PT0gJytuYW4nIHx8IHZhbHVlID09PSAnLW5hbicpXG4gICAgICAgIHJldHVybiBOYU47XG4gICAgaWYgKHZhbHVlID09PSAnLTAnKVxuICAgICAgICByZXR1cm4gMDsgLy8gQXZvaWQgRlAgcmVwcmVzZW50YXRpb24gb2YgLTBcbiAgICAvLyBOdW1iZXJzXG4gICAgbGV0IGlzSW50O1xuICAgIGlmICgoaXNJbnQgPSBJTlRfUkVHRVgudGVzdCh2YWx1ZSkpIHx8IEZMT0FUX1JFR0VYLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIGlmIChMRUFESU5HX1pFUk8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ2xlYWRpbmcgemVyb2VzIGFyZSBub3QgYWxsb3dlZCcsIHtcbiAgICAgICAgICAgICAgICB0b21sOiB0b21sLFxuICAgICAgICAgICAgICAgIHB0cjogcHRyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbnVtZXJpYyA9ICsodmFsdWUucmVwbGFjZSgvXy9nLCAnJykpO1xuICAgICAgICBpZiAoaXNOYU4obnVtZXJpYykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ2ludmFsaWQgbnVtYmVyJywge1xuICAgICAgICAgICAgICAgIHRvbWw6IHRvbWwsXG4gICAgICAgICAgICAgICAgcHRyOiBwdHJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0ludCAmJiAhTnVtYmVyLmlzU2FmZUludGVnZXIobnVtZXJpYykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ2ludGVnZXIgdmFsdWUgY2Fubm90IGJlIHJlcHJlc2VudGVkIGxvc3NsZXNzbHknLCB7XG4gICAgICAgICAgICAgICAgdG9tbDogdG9tbCxcbiAgICAgICAgICAgICAgICBwdHI6IHB0clxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bWVyaWM7XG4gICAgfVxuICAgIGxldCBkYXRlID0gbmV3IFRvbWxEYXRlKHZhbHVlKTtcbiAgICBpZiAoIWRhdGUuaXNWYWxpZCgpKSB7XG4gICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ2ludmFsaWQgdmFsdWUnLCB7XG4gICAgICAgICAgICB0b21sOiB0b21sLFxuICAgICAgICAgICAgcHRyOiBwdHJcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRlO1xufVxuIiwgIi8qIVxuICogQ29weXJpZ2h0IChjKSBTcXVpcnJlbCBDaGF0IGV0IGFsLiwgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICpcbiAqIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuICogICAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICogICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIGNvcHlyaWdodCBob2xkZXIgbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4gKiAgICBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dFxuICogICAgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORFxuICogQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEVcbiAqIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMXG4gKiBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUlxuICogU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVJcbiAqIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksXG4gKiBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRVxuICogT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuaW1wb3J0IHsgcGFyc2VTdHJpbmcsIHBhcnNlVmFsdWUgfSBmcm9tICcuL3ByaW1pdGl2ZS5qcyc7XG5pbXBvcnQgeyBwYXJzZUFycmF5LCBwYXJzZUlubGluZVRhYmxlIH0gZnJvbSAnLi9zdHJ1Y3QuanMnO1xuaW1wb3J0IHsgaW5kZXhPZk5ld2xpbmUsIHNraXBWb2lkLCBza2lwVW50aWwsIHNraXBDb21tZW50LCBnZXRTdHJpbmdFbmQgfSBmcm9tICcuL3V0aWwuanMnO1xuaW1wb3J0IHsgVG9tbEVycm9yIH0gZnJvbSAnLi9lcnJvci5qcyc7XG5mdW5jdGlvbiBzbGljZUFuZFRyaW1FbmRPZihzdHIsIHN0YXJ0UHRyLCBlbmRQdHIsIGFsbG93TmV3TGluZXMpIHtcbiAgICBsZXQgdmFsdWUgPSBzdHIuc2xpY2Uoc3RhcnRQdHIsIGVuZFB0cik7XG4gICAgbGV0IGNvbW1lbnRJZHggPSB2YWx1ZS5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGNvbW1lbnRJZHggPiAtMSkge1xuICAgICAgICAvLyBUaGUgY2FsbCB0byBza2lwQ29tbWVudCBhbGxvd3MgdG8gXCJ2YWxpZGF0ZVwiIHRoZSBjb21tZW50XG4gICAgICAgIC8vIChhYnNlbmNlIG9mIGNvbnRyb2wgY2hhcmFjdGVycylcbiAgICAgICAgc2tpcENvbW1lbnQoc3RyLCBjb21tZW50SWR4KTtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBjb21tZW50SWR4KTtcbiAgICB9XG4gICAgbGV0IHRyaW1tZWQgPSB2YWx1ZS50cmltRW5kKCk7XG4gICAgaWYgKCFhbGxvd05ld0xpbmVzKSB7XG4gICAgICAgIGxldCBuZXdsaW5lSWR4ID0gdmFsdWUuaW5kZXhPZignXFxuJywgdHJpbW1lZC5sZW5ndGgpO1xuICAgICAgICBpZiAobmV3bGluZUlkeCA+IC0xKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVG9tbEVycm9yKCduZXdsaW5lcyBhcmUgbm90IGFsbG93ZWQgaW4gaW5saW5lIHRhYmxlcycsIHtcbiAgICAgICAgICAgICAgICB0b21sOiBzdHIsXG4gICAgICAgICAgICAgICAgcHRyOiBzdGFydFB0ciArIG5ld2xpbmVJZHhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbdHJpbW1lZCwgY29tbWVudElkeF07XG59XG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFZhbHVlKHN0ciwgcHRyLCBlbmQpIHtcbiAgICBsZXQgYyA9IHN0cltwdHJdO1xuICAgIGlmIChjID09PSAnWycgfHwgYyA9PT0gJ3snKSB7XG4gICAgICAgIGxldCBbdmFsdWUsIGVuZFB0cl0gPSBjID09PSAnWydcbiAgICAgICAgICAgID8gcGFyc2VBcnJheShzdHIsIHB0cilcbiAgICAgICAgICAgIDogcGFyc2VJbmxpbmVUYWJsZShzdHIsIHB0cik7XG4gICAgICAgIGxldCBuZXdQdHIgPSBza2lwVW50aWwoc3RyLCBlbmRQdHIsICcsJywgZW5kKTtcbiAgICAgICAgaWYgKGVuZCA9PT0gJ30nKSB7XG4gICAgICAgICAgICBsZXQgbmV4dE5ld0xpbmUgPSBpbmRleE9mTmV3bGluZShzdHIsIGVuZFB0ciwgbmV3UHRyKTtcbiAgICAgICAgICAgIGlmIChuZXh0TmV3TGluZSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcignbmV3bGluZXMgYXJlIG5vdCBhbGxvd2VkIGluIGlubGluZSB0YWJsZXMnLCB7XG4gICAgICAgICAgICAgICAgICAgIHRvbWw6IHN0cixcbiAgICAgICAgICAgICAgICAgICAgcHRyOiBuZXh0TmV3TGluZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdmFsdWUsIG5ld1B0cl07XG4gICAgfVxuICAgIGxldCBlbmRQdHI7XG4gICAgaWYgKGMgPT09ICdcIicgfHwgYyA9PT0gXCInXCIpIHtcbiAgICAgICAgZW5kUHRyID0gZ2V0U3RyaW5nRW5kKHN0ciwgcHRyKTtcbiAgICAgICAgbGV0IHBhcnNlZCA9IHBhcnNlU3RyaW5nKHN0ciwgcHRyLCBlbmRQdHIpO1xuICAgICAgICBpZiAoZW5kKSB7XG4gICAgICAgICAgICBlbmRQdHIgPSBza2lwVm9pZChzdHIsIGVuZFB0ciwgZW5kICE9PSAnXScpO1xuICAgICAgICAgICAgaWYgKHN0cltlbmRQdHJdICYmIHN0cltlbmRQdHJdICE9PSAnLCcgJiYgc3RyW2VuZFB0cl0gIT09IGVuZCAmJiBzdHJbZW5kUHRyXSAhPT0gJ1xcbicgJiYgc3RyW2VuZFB0cl0gIT09ICdcXHInKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcigndW5leHBlY3RlZCBjaGFyYWN0ZXIgZW5jb3VudGVyZWQnLCB7XG4gICAgICAgICAgICAgICAgICAgIHRvbWw6IHN0cixcbiAgICAgICAgICAgICAgICAgICAgcHRyOiBlbmRQdHIsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbmRQdHIgKz0gKCsoc3RyW2VuZFB0cl0gPT09ICcsJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbcGFyc2VkLCBlbmRQdHJdO1xuICAgIH1cbiAgICBlbmRQdHIgPSBza2lwVW50aWwoc3RyLCBwdHIsICcsJywgZW5kKTtcbiAgICBsZXQgc2xpY2UgPSBzbGljZUFuZFRyaW1FbmRPZihzdHIsIHB0ciwgZW5kUHRyIC0gKCsoc3RyW2VuZFB0ciAtIDFdID09PSAnLCcpKSwgZW5kID09PSAnXScpO1xuICAgIGlmICghc2xpY2VbMF0pIHtcbiAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcignaW5jb21wbGV0ZSBrZXktdmFsdWUgZGVjbGFyYXRpb246IG5vIHZhbHVlIHNwZWNpZmllZCcsIHtcbiAgICAgICAgICAgIHRvbWw6IHN0cixcbiAgICAgICAgICAgIHB0cjogcHRyXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoZW5kICYmIHNsaWNlWzFdID4gLTEpIHtcbiAgICAgICAgZW5kUHRyID0gc2tpcFZvaWQoc3RyLCBwdHIgKyBzbGljZVsxXSk7XG4gICAgICAgIGVuZFB0ciArPSArKHN0cltlbmRQdHJdID09PSAnLCcpO1xuICAgIH1cbiAgICByZXR1cm4gW1xuICAgICAgICBwYXJzZVZhbHVlKHNsaWNlWzBdLCBzdHIsIHB0ciksXG4gICAgICAgIGVuZFB0cixcbiAgICBdO1xufVxuIiwgIi8qIVxuICogQ29weXJpZ2h0IChjKSBTcXVpcnJlbCBDaGF0IGV0IGFsLiwgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICpcbiAqIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuICogICAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICogICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIGNvcHlyaWdodCBob2xkZXIgbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4gKiAgICBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dFxuICogICAgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORFxuICogQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEVcbiAqIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMXG4gKiBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUlxuICogU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVJcbiAqIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksXG4gKiBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRVxuICogT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuaW1wb3J0IHsgcGFyc2VTdHJpbmcgfSBmcm9tICcuL3ByaW1pdGl2ZS5qcyc7XG5pbXBvcnQgeyBleHRyYWN0VmFsdWUgfSBmcm9tICcuL2V4dHJhY3QuanMnO1xuaW1wb3J0IHsgc2tpcENvbW1lbnQsIGluZGV4T2ZOZXdsaW5lLCBnZXRTdHJpbmdFbmQsIHNraXBWb2lkIH0gZnJvbSAnLi91dGlsLmpzJztcbmltcG9ydCB7IFRvbWxFcnJvciB9IGZyb20gJy4vZXJyb3IuanMnO1xubGV0IEtFWV9QQVJUX1JFID0gL15bYS16QS1aMC05LV9dK1sgXFx0XSokLztcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUtleShzdHIsIHB0ciwgZW5kID0gJz0nKSB7XG4gICAgbGV0IGRvdCA9IHB0ciAtIDE7XG4gICAgbGV0IHBhcnNlZCA9IFtdO1xuICAgIGxldCBlbmRQdHIgPSBzdHIuaW5kZXhPZihlbmQsIHB0cik7XG4gICAgaWYgKGVuZFB0ciA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcignaW5jb21wbGV0ZSBrZXktdmFsdWU6IGNhbm5vdCBmaW5kIGVuZCBvZiBrZXknLCB7XG4gICAgICAgICAgICB0b21sOiBzdHIsXG4gICAgICAgICAgICBwdHI6IHB0clxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZG8ge1xuICAgICAgICBsZXQgYyA9IHN0cltwdHIgPSArK2RvdF07XG4gICAgICAgIC8vIElmIGl0J3Mgd2hpdGVzcGFjZSwgaWdub3JlXG4gICAgICAgIGlmIChjICE9PSAnICcgJiYgYyAhPT0gJ1xcdCcpIHtcbiAgICAgICAgICAgIC8vIElmIGl0J3MgYSBzdHJpbmdcbiAgICAgICAgICAgIGlmIChjID09PSAnXCInIHx8IGMgPT09IFwiJ1wiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGMgPT09IHN0cltwdHIgKyAxXSAmJiBjID09PSBzdHJbcHRyICsgMl0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcignbXVsdGlsaW5lIHN0cmluZ3MgYXJlIG5vdCBhbGxvd2VkIGluIGtleXMnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b21sOiBzdHIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwdHI6IHB0cixcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBlb3MgPSBnZXRTdHJpbmdFbmQoc3RyLCBwdHIpO1xuICAgICAgICAgICAgICAgIGlmIChlb3MgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ3VuZmluaXNoZWQgc3RyaW5nIGVuY291bnRlcmVkJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9tbDogc3RyLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHRyOiBwdHIsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkb3QgPSBzdHIuaW5kZXhPZignLicsIGVvcyk7XG4gICAgICAgICAgICAgICAgbGV0IHN0ckVuZCA9IHN0ci5zbGljZShlb3MsIGRvdCA8IDAgfHwgZG90ID4gZW5kUHRyID8gZW5kUHRyIDogZG90KTtcbiAgICAgICAgICAgICAgICBsZXQgbmV3TGluZSA9IGluZGV4T2ZOZXdsaW5lKHN0ckVuZCk7XG4gICAgICAgICAgICAgICAgaWYgKG5ld0xpbmUgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVG9tbEVycm9yKCduZXdsaW5lcyBhcmUgbm90IGFsbG93ZWQgaW4ga2V5cycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvbWw6IHN0cixcbiAgICAgICAgICAgICAgICAgICAgICAgIHB0cjogcHRyICsgZG90ICsgbmV3TGluZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzdHJFbmQudHJpbVN0YXJ0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcignZm91bmQgZXh0cmEgdG9rZW5zIGFmdGVyIHRoZSBzdHJpbmcgcGFydCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvbWw6IHN0cixcbiAgICAgICAgICAgICAgICAgICAgICAgIHB0cjogZW9zLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVuZFB0ciA8IGVvcykge1xuICAgICAgICAgICAgICAgICAgICBlbmRQdHIgPSBzdHIuaW5kZXhPZihlbmQsIGVvcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmRQdHIgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVG9tbEVycm9yKCdpbmNvbXBsZXRlIGtleS12YWx1ZTogY2Fubm90IGZpbmQgZW5kIG9mIGtleScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b21sOiBzdHIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHRyOiBwdHIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXJzZWQucHVzaChwYXJzZVN0cmluZyhzdHIsIHB0ciwgZW9zKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBOb3JtYWwgcmF3IGtleSBwYXJ0IGNvbnN1bXB0aW9uIGFuZCB2YWxpZGF0aW9uXG4gICAgICAgICAgICAgICAgZG90ID0gc3RyLmluZGV4T2YoJy4nLCBwdHIpO1xuICAgICAgICAgICAgICAgIGxldCBwYXJ0ID0gc3RyLnNsaWNlKHB0ciwgZG90IDwgMCB8fCBkb3QgPiBlbmRQdHIgPyBlbmRQdHIgOiBkb3QpO1xuICAgICAgICAgICAgICAgIGlmICghS0VZX1BBUlRfUkUudGVzdChwYXJ0KSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVG9tbEVycm9yKCdvbmx5IGxldHRlciwgbnVtYmVycywgZGFzaGVzIGFuZCB1bmRlcnNjb3JlcyBhcmUgYWxsb3dlZCBpbiBrZXlzJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9tbDogc3RyLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHRyOiBwdHIsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXJzZWQucHVzaChwYXJ0LnRyaW1FbmQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gVW50aWwgdGhlcmUncyBubyBtb3JlIGRvdFxuICAgIH0gd2hpbGUgKGRvdCArIDEgJiYgZG90IDwgZW5kUHRyKTtcbiAgICByZXR1cm4gW3BhcnNlZCwgc2tpcFZvaWQoc3RyLCBlbmRQdHIgKyAxLCB0cnVlLCB0cnVlKV07XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VJbmxpbmVUYWJsZShzdHIsIHB0cikge1xuICAgIGxldCByZXMgPSB7fTtcbiAgICBsZXQgc2VlbiA9IG5ldyBTZXQoKTtcbiAgICBsZXQgYztcbiAgICBsZXQgY29tbWEgPSAwO1xuICAgIHB0cisrO1xuICAgIHdoaWxlICgoYyA9IHN0cltwdHIrK10pICE9PSAnfScgJiYgYykge1xuICAgICAgICBpZiAoYyA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ25ld2xpbmVzIGFyZSBub3QgYWxsb3dlZCBpbiBpbmxpbmUgdGFibGVzJywge1xuICAgICAgICAgICAgICAgIHRvbWw6IHN0cixcbiAgICAgICAgICAgICAgICBwdHI6IHB0ciAtIDFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPT09ICcjJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcignaW5saW5lIHRhYmxlcyBjYW5ub3QgY29udGFpbiBjb21tZW50cycsIHtcbiAgICAgICAgICAgICAgICB0b21sOiBzdHIsXG4gICAgICAgICAgICAgICAgcHRyOiBwdHIgLSAxXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSAnLCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ2V4cGVjdGVkIGtleS12YWx1ZSwgZm91bmQgY29tbWEnLCB7XG4gICAgICAgICAgICAgICAgdG9tbDogc3RyLFxuICAgICAgICAgICAgICAgIHB0cjogcHRyIC0gMVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyAhPT0gJyAnICYmIGMgIT09ICdcXHQnKSB7XG4gICAgICAgICAgICBsZXQgaztcbiAgICAgICAgICAgIGxldCB0ID0gcmVzO1xuICAgICAgICAgICAgbGV0IGhhc093biA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IFtrZXksIGtleUVuZFB0cl0gPSBwYXJzZUtleShzdHIsIHB0ciAtIDEpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSlcbiAgICAgICAgICAgICAgICAgICAgdCA9IGhhc093biA/IHRba10gOiAodFtrXSA9IHt9KTtcbiAgICAgICAgICAgICAgICBrID0ga2V5W2ldO1xuICAgICAgICAgICAgICAgIGlmICgoaGFzT3duID0gT2JqZWN0Lmhhc093bih0LCBrKSkgJiYgKHR5cGVvZiB0W2tdICE9PSAnb2JqZWN0JyB8fCBzZWVuLmhhcyh0W2tdKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcigndHJ5aW5nIHRvIHJlZGVmaW5lIGFuIGFscmVhZHkgZGVmaW5lZCB2YWx1ZScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvbWw6IHN0cixcbiAgICAgICAgICAgICAgICAgICAgICAgIHB0cjogcHRyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWhhc093biAmJiBrID09PSAnX19wcm90b19fJykge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgaywgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYXNPd24pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVG9tbEVycm9yKCd0cnlpbmcgdG8gcmVkZWZpbmUgYW4gYWxyZWFkeSBkZWZpbmVkIHZhbHVlJywge1xuICAgICAgICAgICAgICAgICAgICB0b21sOiBzdHIsXG4gICAgICAgICAgICAgICAgICAgIHB0cjogcHRyXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgW3ZhbHVlLCB2YWx1ZUVuZFB0cl0gPSBleHRyYWN0VmFsdWUoc3RyLCBrZXlFbmRQdHIsICd9Jyk7XG4gICAgICAgICAgICBzZWVuLmFkZCh2YWx1ZSk7XG4gICAgICAgICAgICB0W2tdID0gdmFsdWU7XG4gICAgICAgICAgICBwdHIgPSB2YWx1ZUVuZFB0cjtcbiAgICAgICAgICAgIGNvbW1hID0gc3RyW3B0ciAtIDFdID09PSAnLCcgPyBwdHIgLSAxIDogMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoY29tbWEpIHtcbiAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcigndHJhaWxpbmcgY29tbWFzIGFyZSBub3QgYWxsb3dlZCBpbiBpbmxpbmUgdGFibGVzJywge1xuICAgICAgICAgICAgdG9tbDogc3RyLFxuICAgICAgICAgICAgcHRyOiBjb21tYVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKCFjKSB7XG4gICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ3VuZmluaXNoZWQgdGFibGUgZW5jb3VudGVyZWQnLCB7XG4gICAgICAgICAgICB0b21sOiBzdHIsXG4gICAgICAgICAgICBwdHI6IHB0clxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIFtyZXMsIHB0cl07XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VBcnJheShzdHIsIHB0cikge1xuICAgIGxldCByZXMgPSBbXTtcbiAgICBsZXQgYztcbiAgICBwdHIrKztcbiAgICB3aGlsZSAoKGMgPSBzdHJbcHRyKytdKSAhPT0gJ10nICYmIGMpIHtcbiAgICAgICAgaWYgKGMgPT09ICcsJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcignZXhwZWN0ZWQgdmFsdWUsIGZvdW5kIGNvbW1hJywge1xuICAgICAgICAgICAgICAgIHRvbWw6IHN0cixcbiAgICAgICAgICAgICAgICBwdHI6IHB0ciAtIDFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPT09ICcjJylcbiAgICAgICAgICAgIHB0ciA9IHNraXBDb21tZW50KHN0ciwgcHRyKTtcbiAgICAgICAgZWxzZSBpZiAoYyAhPT0gJyAnICYmIGMgIT09ICdcXHQnICYmIGMgIT09ICdcXG4nICYmIGMgIT09ICdcXHInKSB7XG4gICAgICAgICAgICBsZXQgZSA9IGV4dHJhY3RWYWx1ZShzdHIsIHB0ciAtIDEsICddJyk7XG4gICAgICAgICAgICByZXMucHVzaChlWzBdKTtcbiAgICAgICAgICAgIHB0ciA9IGVbMV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFjKSB7XG4gICAgICAgIHRocm93IG5ldyBUb21sRXJyb3IoJ3VuZmluaXNoZWQgYXJyYXkgZW5jb3VudGVyZWQnLCB7XG4gICAgICAgICAgICB0b21sOiBzdHIsXG4gICAgICAgICAgICBwdHI6IHB0clxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIFtyZXMsIHB0cl07XG59XG4iLCAiLyohXG4gKiBDb3B5cmlnaHQgKGMpIFNxdWlycmVsIENoYXQgZXQgYWwuLCBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKlxuICogMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4gKiAgICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqICAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gKiAgICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICogMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgY29weXJpZ2h0IGhvbGRlciBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiAqICAgIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0XG4gKiAgICBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EXG4gKiBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRFxuICogV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICogRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRVxuICogRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUxcbiAqIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SXG4gKiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUlxuICogQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSxcbiAqIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFXG4gKiBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5pbXBvcnQgeyBwYXJzZUtleSB9IGZyb20gJy4vc3RydWN0LmpzJztcbmltcG9ydCB7IGV4dHJhY3RWYWx1ZSB9IGZyb20gJy4vZXh0cmFjdC5qcyc7XG5pbXBvcnQgeyBza2lwVm9pZCB9IGZyb20gJy4vdXRpbC5qcyc7XG5pbXBvcnQgeyBUb21sRXJyb3IgfSBmcm9tICcuL2Vycm9yLmpzJztcbmZ1bmN0aW9uIHBlZWtUYWJsZShrZXksIHRhYmxlLCBtZXRhLCB0eXBlKSB7XG4gICAgbGV0IHQgPSB0YWJsZTtcbiAgICBsZXQgbSA9IG1ldGE7XG4gICAgbGV0IGs7XG4gICAgbGV0IGhhc093biA9IGZhbHNlO1xuICAgIGxldCBzdGF0ZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaSkge1xuICAgICAgICAgICAgdCA9IGhhc093biA/IHRba10gOiAodFtrXSA9IHt9KTtcbiAgICAgICAgICAgIG0gPSAoc3RhdGUgPSBtW2tdKS5jO1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09IDAgLyogVHlwZS5ET1RURUQgKi8gJiYgKHN0YXRlLnQgPT09IDEgLyogVHlwZS5FWFBMSUNJVCAqLyB8fCBzdGF0ZS50ID09PSAyIC8qIFR5cGUuQVJSQVkgKi8pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdGUudCA9PT0gMiAvKiBUeXBlLkFSUkFZICovKSB7XG4gICAgICAgICAgICAgICAgbGV0IGwgPSB0Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgdCA9IHRbbF07XG4gICAgICAgICAgICAgICAgbSA9IG1bbF0uYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBrID0ga2V5W2ldO1xuICAgICAgICBpZiAoKGhhc093biA9IE9iamVjdC5oYXNPd24odCwgaykpICYmIG1ba10/LnQgPT09IDAgLyogVHlwZS5ET1RURUQgKi8gJiYgbVtrXT8uZCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFoYXNPd24pIHtcbiAgICAgICAgICAgIGlmIChrID09PSAnX19wcm90b19fJykge1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBrLCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG0sIGssIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1ba10gPSB7XG4gICAgICAgICAgICAgICAgdDogaSA8IGtleS5sZW5ndGggLSAxICYmIHR5cGUgPT09IDIgLyogVHlwZS5BUlJBWSAqL1xuICAgICAgICAgICAgICAgICAgICA/IDMgLyogVHlwZS5BUlJBWV9ET1RURUQgKi9cbiAgICAgICAgICAgICAgICAgICAgOiB0eXBlLFxuICAgICAgICAgICAgICAgIGQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGk6IDAsXG4gICAgICAgICAgICAgICAgYzoge30sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRlID0gbVtrXTtcbiAgICBpZiAoc3RhdGUudCAhPT0gdHlwZSAmJiAhKHR5cGUgPT09IDEgLyogVHlwZS5FWFBMSUNJVCAqLyAmJiBzdGF0ZS50ID09PSAzIC8qIFR5cGUuQVJSQVlfRE9UVEVEICovKSkge1xuICAgICAgICAvLyBCYWQga2V5IHR5cGUhXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gMiAvKiBUeXBlLkFSUkFZICovKSB7XG4gICAgICAgIGlmICghc3RhdGUuZCkge1xuICAgICAgICAgICAgc3RhdGUuZCA9IHRydWU7XG4gICAgICAgICAgICB0W2tdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgdFtrXS5wdXNoKHQgPSB7fSk7XG4gICAgICAgIHN0YXRlLmNbc3RhdGUuaSsrXSA9IChzdGF0ZSA9IHsgdDogMSAvKiBUeXBlLkVYUExJQ0lUICovLCBkOiBmYWxzZSwgaTogMCwgYzoge30gfSk7XG4gICAgfVxuICAgIGlmIChzdGF0ZS5kKSB7XG4gICAgICAgIC8vIFJlZGVmaW5pbmcgYSB0YWJsZSFcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHN0YXRlLmQgPSB0cnVlO1xuICAgIGlmICh0eXBlID09PSAxIC8qIFR5cGUuRVhQTElDSVQgKi8pIHtcbiAgICAgICAgdCA9IGhhc093biA/IHRba10gOiAodFtrXSA9IHt9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSA9PT0gMCAvKiBUeXBlLkRPVFRFRCAqLyAmJiBoYXNPd24pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBbaywgdCwgc3RhdGUuY107XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2UodG9tbCkge1xuICAgIGxldCByZXMgPSB7fTtcbiAgICBsZXQgbWV0YSA9IHt9O1xuICAgIGxldCB0YmwgPSByZXM7XG4gICAgbGV0IG0gPSBtZXRhO1xuICAgIGZvciAobGV0IHB0ciA9IHNraXBWb2lkKHRvbWwsIDApOyBwdHIgPCB0b21sLmxlbmd0aDspIHtcbiAgICAgICAgaWYgKHRvbWxbcHRyXSA9PT0gJ1snKSB7XG4gICAgICAgICAgICBsZXQgaXNUYWJsZUFycmF5ID0gdG9tbFsrK3B0cl0gPT09ICdbJztcbiAgICAgICAgICAgIGxldCBrID0gcGFyc2VLZXkodG9tbCwgcHRyICs9ICtpc1RhYmxlQXJyYXksICddJyk7XG4gICAgICAgICAgICBpZiAoaXNUYWJsZUFycmF5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRvbWxba1sxXSAtIDFdICE9PSAnXScpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcignZXhwZWN0ZWQgZW5kIG9mIHRhYmxlIGRlY2xhcmF0aW9uJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9tbDogdG9tbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHB0cjoga1sxXSAtIDEsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBrWzFdKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcCA9IHBlZWtUYWJsZShrWzBdLCByZXMsIG1ldGEsIGlzVGFibGVBcnJheSA/IDIgLyogVHlwZS5BUlJBWSAqLyA6IDEgLyogVHlwZS5FWFBMSUNJVCAqLyk7XG4gICAgICAgICAgICBpZiAoIXApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVG9tbEVycm9yKCd0cnlpbmcgdG8gcmVkZWZpbmUgYW4gYWxyZWFkeSBkZWZpbmVkIHRhYmxlIG9yIHZhbHVlJywge1xuICAgICAgICAgICAgICAgICAgICB0b21sOiB0b21sLFxuICAgICAgICAgICAgICAgICAgICBwdHI6IHB0cixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG0gPSBwWzJdO1xuICAgICAgICAgICAgdGJsID0gcFsxXTtcbiAgICAgICAgICAgIHB0ciA9IGtbMV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgayA9IHBhcnNlS2V5KHRvbWwsIHB0cik7XG4gICAgICAgICAgICBsZXQgcCA9IHBlZWtUYWJsZShrWzBdLCB0YmwsIG0sIDAgLyogVHlwZS5ET1RURUQgKi8pO1xuICAgICAgICAgICAgaWYgKCFwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcigndHJ5aW5nIHRvIHJlZGVmaW5lIGFuIGFscmVhZHkgZGVmaW5lZCB0YWJsZSBvciB2YWx1ZScsIHtcbiAgICAgICAgICAgICAgICAgICAgdG9tbDogdG9tbCxcbiAgICAgICAgICAgICAgICAgICAgcHRyOiBwdHIsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdiA9IGV4dHJhY3RWYWx1ZSh0b21sLCBrWzFdKTtcbiAgICAgICAgICAgIHBbMV1bcFswXV0gPSB2WzBdO1xuICAgICAgICAgICAgcHRyID0gdlsxXTtcbiAgICAgICAgfVxuICAgICAgICBwdHIgPSBza2lwVm9pZCh0b21sLCBwdHIsIHRydWUpO1xuICAgICAgICBpZiAodG9tbFtwdHJdICYmIHRvbWxbcHRyXSAhPT0gJ1xcbicgJiYgdG9tbFtwdHJdICE9PSAnXFxyJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFRvbWxFcnJvcignZWFjaCBrZXktdmFsdWUgZGVjbGFyYXRpb24gbXVzdCBiZSBmb2xsb3dlZCBieSBhbiBlbmQtb2YtbGluZScsIHtcbiAgICAgICAgICAgICAgICB0b21sOiB0b21sLFxuICAgICAgICAgICAgICAgIHB0cjogcHRyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBwdHIgPSBza2lwVm9pZCh0b21sLCBwdHIpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuIiwgIi8qIVxuICogQ29weXJpZ2h0IChjKSBTcXVpcnJlbCBDaGF0IGV0IGFsLiwgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICpcbiAqIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuICogICAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICogICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIGNvcHlyaWdodCBob2xkZXIgbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4gKiAgICBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dFxuICogICAgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORFxuICogQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEVcbiAqIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMXG4gKiBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUlxuICogU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVJcbiAqIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksXG4gKiBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRVxuICogT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuY29uc3QgQkFSRV9LRVkgPSAvXlthLXowLTktX10rJC9pO1xuZnVuY3Rpb24gZXh0ZW5kZWRUeXBlT2Yob2JqKSB7XG4gICAgbGV0IHR5cGUgPSB0eXBlb2Ygb2JqO1xuICAgIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKVxuICAgICAgICAgICAgcmV0dXJuICdhcnJheSc7XG4gICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBEYXRlKVxuICAgICAgICAgICAgcmV0dXJuICdkYXRlJztcbiAgICB9XG4gICAgcmV0dXJuIHR5cGU7XG59XG5mdW5jdGlvbiBpc0FycmF5T2ZUYWJsZXMob2JqKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGV4dGVuZGVkVHlwZU9mKG9ialtpXSkgIT09ICdvYmplY3QnKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gb2JqLmxlbmd0aCAhPSAwO1xufVxuZnVuY3Rpb24gZm9ybWF0U3RyaW5nKHMpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocykucmVwbGFjZSgvXFx4N2YvZywgJ1xcXFx1MDA3ZicpO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5VmFsdWUodmFsLCB0eXBlID0gZXh0ZW5kZWRUeXBlT2YodmFsKSkge1xuICAgIGlmICh0eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAoaXNOYU4odmFsKSlcbiAgICAgICAgICAgIHJldHVybiAnbmFuJztcbiAgICAgICAgaWYgKHZhbCA9PT0gSW5maW5pdHkpXG4gICAgICAgICAgICByZXR1cm4gJ2luZic7XG4gICAgICAgIGlmICh2YWwgPT09IC1JbmZpbml0eSlcbiAgICAgICAgICAgIHJldHVybiAnLWluZic7XG4gICAgICAgIHJldHVybiB2YWwudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdiaWdpbnQnIHx8IHR5cGUgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gdmFsLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gZm9ybWF0U3RyaW5nKHZhbCk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAnZGF0ZScpIHtcbiAgICAgICAgaWYgKGlzTmFOKHZhbC5nZXRUaW1lKCkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjYW5ub3Qgc2VyaWFsaXplIGludmFsaWQgZGF0ZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWwudG9JU09TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdpZnlJbmxpbmVUYWJsZSh2YWwpO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ2FycmF5Jykge1xuICAgICAgICByZXR1cm4gc3RyaW5naWZ5QXJyYXkodmFsKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzdHJpbmdpZnlJbmxpbmVUYWJsZShvYmopIHtcbiAgICBsZXQga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgaWYgKGtleXMubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gJ3t9JztcbiAgICBsZXQgcmVzID0gJ3sgJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGsgPSBrZXlzW2ldO1xuICAgICAgICBpZiAoaSlcbiAgICAgICAgICAgIHJlcyArPSAnLCAnO1xuICAgICAgICByZXMgKz0gQkFSRV9LRVkudGVzdChrKSA/IGsgOiBmb3JtYXRTdHJpbmcoayk7XG4gICAgICAgIHJlcyArPSAnID0gJztcbiAgICAgICAgcmVzICs9IHN0cmluZ2lmeVZhbHVlKG9ialtrXSk7XG4gICAgfVxuICAgIHJldHVybiByZXMgKyAnIH0nO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5QXJyYXkoYXJyYXkpIHtcbiAgICBpZiAoYXJyYXkubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gJ1tdJztcbiAgICBsZXQgcmVzID0gJ1sgJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpKVxuICAgICAgICAgICAgcmVzICs9ICcsICc7XG4gICAgICAgIGlmIChhcnJheVtpXSA9PT0gbnVsbCB8fCBhcnJheVtpXSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcnJheXMgY2Fubm90IGNvbnRhaW4gbnVsbCBvciB1bmRlZmluZWQgdmFsdWVzJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzICs9IHN0cmluZ2lmeVZhbHVlKGFycmF5W2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcyArICcgXSc7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnlBcnJheVRhYmxlKGFycmF5LCBrZXkpIHtcbiAgICBsZXQgcmVzID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXMgKz0gYFtbJHtrZXl9XV1cXG5gO1xuICAgICAgICByZXMgKz0gc3RyaW5naWZ5VGFibGUoYXJyYXlbaV0sIGtleSk7XG4gICAgICAgIHJlcyArPSAnXFxuXFxuJztcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeVRhYmxlKG9iaiwgcHJlZml4ID0gJycpIHtcbiAgICBsZXQgcHJlYW1ibGUgPSAnJztcbiAgICBsZXQgdGFibGVzID0gJyc7XG4gICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgayA9IGtleXNbaV07XG4gICAgICAgIGlmIChvYmpba10gIT09IG51bGwgJiYgb2JqW2tdICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGxldCB0eXBlID0gZXh0ZW5kZWRUeXBlT2Yob2JqW2tdKTtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnc3ltYm9sJyB8fCB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgY2Fubm90IHNlcmlhbGl6ZSB2YWx1ZXMgb2YgdHlwZSAnJHt0eXBlfSdgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBrZXkgPSBCQVJFX0tFWS50ZXN0KGspID8gayA6IGZvcm1hdFN0cmluZyhrKTtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnYXJyYXknICYmIGlzQXJyYXlPZlRhYmxlcyhvYmpba10pKSB7XG4gICAgICAgICAgICAgICAgdGFibGVzICs9IHN0cmluZ2lmeUFycmF5VGFibGUob2JqW2tdLCBwcmVmaXggPyBgJHtwcmVmaXh9LiR7a2V5fWAgOiBrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBsZXQgdGJsS2V5ID0gcHJlZml4ID8gYCR7cHJlZml4fS4ke2tleX1gIDoga2V5O1xuICAgICAgICAgICAgICAgIHRhYmxlcyArPSBgWyR7dGJsS2V5fV1cXG5gO1xuICAgICAgICAgICAgICAgIHRhYmxlcyArPSBzdHJpbmdpZnlUYWJsZShvYmpba10sIHRibEtleSk7XG4gICAgICAgICAgICAgICAgdGFibGVzICs9ICdcXG5cXG4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJlYW1ibGUgKz0ga2V5O1xuICAgICAgICAgICAgICAgIHByZWFtYmxlICs9ICcgPSAnO1xuICAgICAgICAgICAgICAgIHByZWFtYmxlICs9IHN0cmluZ2lmeVZhbHVlKG9ialtrXSwgdHlwZSk7XG4gICAgICAgICAgICAgICAgcHJlYW1ibGUgKz0gJ1xcbic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGAke3ByZWFtYmxlfVxcbiR7dGFibGVzfWAudHJpbSgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeShvYmopIHtcbiAgICBpZiAoZXh0ZW5kZWRUeXBlT2Yob2JqKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc3RyaW5naWZ5IGNhbiBvbmx5IGJlIGNhbGxlZCB3aXRoIGFuIG9iamVjdCcpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaW5naWZ5VGFibGUob2JqKTtcbn1cbiIsICJpbXBvcnQgeyBleGlzdHNTeW5jLCByZWFkRmlsZVN5bmMsIHdyaXRlRmlsZVN5bmMgfSBmcm9tICdmcyc7XG5pbXBvcnQgeyBJU2NhZmZvbGRseUNvbmZpZywgUHJvamVjdEpzb24gfSBmcm9tICcuLic7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBBYnN0cmFjdFByb2plY3QgfSBmcm9tICcuJztcbmltcG9ydCB7IHBhcnNlLCBzdHJpbmdpZnkgfSBmcm9tICdzbW9sLXRvbWwnO1xuXG50eXBlIENhcmdvVG9tbCA9IHtcbiAgcGFja2FnZT86IHtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIHZlcnNpb24/OiBzdHJpbmc7XG4gICAgZWRpdGlvbj86IHN0cmluZztcbiAgICBtZXRhZGF0YT86IHtcbiAgICAgIHNjYWZmb2xkbHk/OiBQYXJ0aWFsPElTY2FmZm9sZGx5Q29uZmlnPjtcbiAgICB9O1xuICB9O1xuICBkZXBlbmRlbmNpZXM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB8IHsgdmVyc2lvbj86IHN0cmluZzsgZmVhdHVyZXM/OiBzdHJpbmdbXSB9IH07XG59O1xuXG5leHBvcnQgY2xhc3MgUnVzdFByb2plY3QgZXh0ZW5kcyBBYnN0cmFjdFByb2plY3Qge1xuICBhc3luYyBzZXRQcm9qZWN0KG5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLmNhcmdvVG9tbEZpbGUudGhlbigoY2FyZ29Ub21sRmlsZSkgPT4ge1xuICAgICAgaWYgKCFjYXJnb1RvbWxGaWxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY2FyZ29Ub21sID0gcGFyc2UocmVhZEZpbGVTeW5jKGNhcmdvVG9tbEZpbGUsICd1dGYtOCcpKSBhcyBQYXJ0aWFsPENhcmdvVG9tbD47XG5cbiAgICAgIGlmICghY2FyZ29Ub21sLnBhY2thZ2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FyZ29Ub21sLnBhY2thZ2UpIHtcbiAgICAgICAgY2FyZ29Ub21sLnBhY2thZ2UubmFtZSA9IG5hbWU7XG4gICAgICB9XG5cbiAgICAgIHdyaXRlRmlsZVN5bmMoY2FyZ29Ub21sRmlsZSwgc3RyaW5naWZ5KGNhcmdvVG9tbCkpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXQgY2FyZ29Ub21sRmlsZSgpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiB0aGlzLndvcmtkaXJcbiAgICAgIC50aGVuKCh3b3JrRGlyKSA9PiBqb2luKHdvcmtEaXIsICdDYXJnby50b21sJykpXG4gICAgICAudGhlbigoY2FyZ29Ub21sRmlsZSkgPT4ge1xuICAgICAgICBpZiAoIWV4aXN0c1N5bmMoY2FyZ29Ub21sRmlsZSkpIHtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYXJnb1RvbWxGaWxlO1xuICAgICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldCBydXN0UHJvamVjdCgpOiBQcm9taXNlPHsgY2FyZ29Ub21sOiBDYXJnb1RvbWwgfSB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiB0aGlzLmNhcmdvVG9tbEZpbGUudGhlbigoY2FyZ29Ub21sRmlsZSkgPT4ge1xuICAgICAgaWYgKCFjYXJnb1RvbWxGaWxlKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlKHJlYWRGaWxlU3luYyhjYXJnb1RvbWxGaWxlLCAndXRmLTgnKSkgYXMgQ2FyZ29Ub21sO1xuXG4gICAgICByZXR1cm4geyBjYXJnb1RvbWw6IHBhcnNlZCB9O1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0IHByb2plY3RKc29uKCk6IFByb21pc2U8UHJvamVjdEpzb24gfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW3RoaXMucnVzdFByb2plY3RdKS50aGVuKChbcHJvamVjdF0pID0+IHtcbiAgICAgIGNvbnN0IHByb2plY3RKc29uOiBQcm9qZWN0SnNvbiA9IHsgdHlwZTogJ3J1c3QnIH07XG5cbiAgICAgIGlmICghcHJvamVjdCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IGNhcmdvVG9tbCB9ID0gcHJvamVjdDtcbiAgICAgIHByb2plY3RKc29uLm5hbWUgPSBjYXJnb1RvbWwucGFja2FnZT8ubmFtZTtcbiAgICAgIHByb2plY3RKc29uLnZlcnNpb24gPSBjYXJnb1RvbWwucGFja2FnZT8udmVyc2lvbjtcblxuICAgICAgcHJvamVjdEpzb24uZGVwZW5kZW5jaWVzID0gT2JqZWN0LmVudHJpZXMoY2FyZ29Ub21sLmRlcGVuZGVuY2llcyB8fCB7fSkucmVkdWNlKFxuICAgICAgICAoYWNjLCBba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgYWNjW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLnZlcnNpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBhY2Nba2V5XSA9IHZhbHVlLnZlcnNpb247XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0sXG4gICAgICAgIHt9IGFzIHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0sXG4gICAgICApO1xuXG4gICAgICBwcm9qZWN0SnNvbi5zY2FmZm9sZGx5ID0gY2FyZ29Ub21sLnBhY2thZ2U/Lm1ldGFkYXRhPy5zY2FmZm9sZGx5O1xuXG4gICAgICByZXR1cm4gcHJvamVjdEpzb247XG4gICAgfSk7XG4gIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICJ5b0JBQUEsSUFBQUEsR0FBQUMsRUFBQSxDQUFBQyxHQUFBQyxLQUFBLGNBQUFBLEdBQU8sUUFBVSxDQUViLE9BQW1CLEdBQ25CLE9BQW1CLFNBQ25CLE9BQW1CLEVBQ25CLE9BQW1CLEVBQ25CLE9BQW1CLEVBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBR25CLE9BQW1CLFVBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEVBQ25CLE9BQW1CLEVBQ25CLE9BQW1CLEdBR25CLE9BQW1CLEdBQ25CLE9BQW1CLFNBQ25CLE9BQW1CLEVBQ25CLE9BQW1CLEVBQ25CLE9BQW1CLEVBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBR25CLE9BQW1CLEdBQ25CLE9BQW1CLFVBQ25CLE9BQW1CLEVBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBQ25CLE9BQW1CLEdBRW5CLFNBQW1CLEdBQ25CLFNBQW1CLFVBQ25CLFdBQW1CLEVBQ25CLFNBQW1CLEVBQ25CLGNBQW1CLEdBRW5CLFNBQW1CLFVBQ25CLFNBQW1CLEdBQ25CLFVBQW1CLEdBQ25CLFVBQW1CLEVBQ25CLFNBQW1CLEdBQ25CLFNBQW1CLEdBQ25CLFNBQW1CLEdBQ25CLFlBQW1CLEdBQ25CLFNBQW1CLEdBQ25CLFNBQW1CLEdBQ25CLFVBQW1CLEdBQ25CLFNBQW1CLEdBQ25CLFdBQW1CLEdBR25CLE9BQW1CLEVBQ25CLE9BQW1CLEVBQ25CLFNBQW1CLEVBQ25CLFNBQW1CLEVBQ25CLFNBQW1CLEVBQ25CLFNBQW1CLEVBQ25CLFNBQW1CLEVBRW5CLFNBQW1CLEVBQ25CLGtCQUFtQixFQUNuQixPQUFtQixHQUVuQixNQUFtQixHQUVuQixLQUFtQixHQUVuQixVQUFtQixHQUNuQixTQUFtQixHQUNuQixZQUFtQixHQUluQixRQUFtQixFQUNuQixVQUFtQixFQUNuQixVQUFtQixFQUNuQixTQUFtQixFQUNuQixRQUFtQixHQUNuQixVQUFtQixHQUNuQixRQUFtQixHQUVuQixRQUFtQixLQUluQixRQUFtQixLQUduQixLQUFtQixFQUNuQixPQUFtQixFQUNuQixLQUFtQixFQUduQixNQUFtQixFQUNuQixRQUFtQixFQUduQixT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QVUsSUFDVixLQUFRLElBQ1IsT0FBVSxJQUNWLE9BQVUsSUFDVixNQUFTLElBQ1QsT0FBVSxJQUNWLE9BQVUsSUFDVixPQUFVLElBQ1YsS0FBUSxJQUNSLE1BQVMsSUFDVCxNQUFTLElBQ1QsT0FBVSxJQUNWLE1BQVMsSUFDVCxPQUFVLElBQ1YsS0FBUSxJQUNSLE9BQVUsSUFDVixLQUFRLElBQ1IsS0FBUSxJQUNSLElBQU8sSUFDUCxLQUFRLElBQ1IsTUFBUyxJQUNULEtBQVEsSUFDUixNQUFTLElBQ1QsT0FBVSxJQUNWLElBQU8sSUFDUCxPQUFVLElBQ1YsS0FBUSxJQUNSLElBQU8sSUFDUCxLQUFRLElBQ1IsTUFBUyxJQUNULElBQU8sSUFDUCxJQUFPLElBQ1AsS0FBUSxJQUNSLElBQU8sSUFDUCxPQUFVLElBQ1YsS0FBUSxJQUNSLEtBQVEsSUFDUixLQUFRLElBQ1IsTUFBUyxJQUNULE1BQVMsSUFDVCxLQUFRLElBQ1IsT0FBVSxJQUNWLE1BQVMsSUFDVCxLQUFRLElBQ1IsTUFBUyxJQUNULE9BQVUsSUFDVixPQUFVLElBQ1YsT0FBVSxJQUNWLE9BQVUsSUFDVixNQUFTLElBQ1QsT0FBVSxJQUNWLE1BQVMsSUFDVCxNQUFTLElBQ1QsT0FBVSxJQUNWLE9BQVUsSUFDVixLQUFRLElBQ1IsS0FBUSxJQUNSLEtBQVEsSUFDUixNQUFTLElBQ1QsTUFBUyxJQUNULEtBQVEsSUFDUixNQUFTLElBQ1QsTUFBUyxJQUNULFFBQVcsSUFDWCxLQUFRLElBQ1IsSUFBTyxJQUNQLE1BQVMsSUFDVCxLQUFRLElBQ1IsTUFBUyxJQUNULE9BQVUsSUFDVixHQUFNLElBQ04sR0FBTSxJQUNOLEdBQU0sSUFDTixRQUFXLElBQ1gsR0FBTSxJQUNOLElBQU8sSUFDUCxNQUFTLElBQ1QsSUFBTyxJQUNQLFFBQVcsSUFDWCxJQUFPLElBQ1AsSUFBTyxJQUNQLElBQU8sSUFDUCxNQUFTLElBQ1QsTUFBUyxJQUNULEtBQVEsSUFDUixNQUFTLElBQ1QsTUFBUyxJQUNULFFBQVcsSUFDWCxLQUFRLElBQ1IsSUFBTyxJQUNQLE1BQVMsSUFDVCxLQUFRLElBQ1IsTUFBUyxJQUNULE9BQVUsSUFDVixHQUFNLElBQ04sR0FBTSxJQUNOLEdBQU0sSUFDTixRQUFXLElBQ1gsR0FBTSxJQUNOLElBQU8sSUFDUCxPQUFVLElBQ1YsTUFBUyxJQUNULElBQU8sSUFDUCxRQUFXLElBQ1gsSUFBTyxJQUNQLElBQU8sSUFDUCxJQUFPLElBQ1AsTUFBUyxJQUNULFNBQVksSUFDWixNQUFTLElBQ1QsSUFBTyxJQUNQLEtBQVEsS0FDUixLQUFRLEtBQ1IsT0FBVSxLQUNWLEtBQVEsS0FDUixJQUFPLEtBQ1AsSUFBTyxLQUNQLElBQU8sS0FDUCxNQUFTLEtBQ1QsTUFBUyxLQUNULE1BQVMsS0FDVCxNQUFTLEtBQ1QsTUFBUyxLQUNULE1BQVMsS0FDVCxNQUFTLEtBQ1QsTUFBUyxLQUNULE9BQVUsS0FDVixPQUFVLEtBQ1YsS0FBUSxLQUNSLE9BQVUsS0FDVixPQUFVLEtBQ1YsTUFBUyxLQUNULE1BQVMsS0FDVCxPQUFVLEtBQ1YsT0FBVSxLQUNWLE1BQVMsS0FDVCxNQUFTLEtBQ1QsS0FBUSxLQUNSLE1BQVMsS0FDVCxPQUFVLEtBQ1YsS0FBUSxLQUNSLE1BQVMsS0FDVCxRQUFXLEtBQ1gsS0FBUSxLQUNSLEtBQVEsS0FDUixLQUFRLEtBQ1IsS0FBUSxLQUNSLEtBQVEsS0FDUixNQUFTLEtBQ1QsS0FBUSxLQUNSLEtBQVEsS0FDUixLQUFRLEtBQ1IsS0FBUSxLQUNSLEtBQVEsS0FDUixPQUFVLEtBQ1YsS0FBUSxLQUNSLE1BQVMsS0FDVCxNQUFTLEtBQ1QsTUFBUyxLQUNULEtBQVEsS0FDUixNQUFTLEtBQ1QsR0FBTSxLQUNOLEtBQVEsS0FDUixJQUFPLEtBQ1AsTUFBUyxLQUNULE9BQVUsS0FDVixNQUFTLEtBQ1QsS0FBUSxLQUNSLE1BQVMsS0FDVCxJQUFPLEtBQ1AsSUFBTyxLQUNQLEdBQU0sS0FDTixJQUFPLEtBQ1AsSUFBTyxLQUNQLElBQU8sS0FDUCxPQUFVLEtBQ1YsSUFBTyxLQUNQLEtBQVEsS0FDUixNQUFTLEtBQ1QsR0FBTSxLQUNOLE1B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QUksMENBQTBDLEVBQ3RELFFBQVEsSUFBSSxzREFBd0QsRUFDcEUsUUFBUSxJQUFJLHVDQUF5QyxFQUNyRCxRQUFRLElBQUksRUFBRSxFQUNkLFFBQVEsSUFBSSxxREFBcUQsRUFDakUsUUFBUSxJQUFJLEVBQUUsRUFDZCxRQUFRLElBQUkscUNBQXVDLEVBQ25ELFFBQVEsSUFBSSxFQUFFLEVBQ2QsUUFBUSxJQUFJLCtFQUEwRSxFQUN0RixRQUFRLElBQUksRUFBRSxFQUNkLFFBQVEsSUFBSSxzREFBc0QsRUFDbEUsUUFBUSxJQUFJLEVBQUUsRUFDZCxRQUFRLElBQUksMERBQW1ELEVBQy9ELFFBQVEsSUFBSSxFQUFFLENBQ2hCIiwKICAibmFtZXMiOiBbInJlcXVpcmVfY29uc3RhbnRzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVxdWlyZV9lcnJvcnMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImVycm9ycyIsICJFIiwgIm1lc3NhZ2UiLCAiYXJncyIsICJfIiwgIm4iLCAibXNnIiwgInJlcXVpcmVfdXRpbHMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJmc3lzdGVtIiwgInB0aCIsICJDb25zdGFudHMiLCAiRXJyb3JzIiwgImlzV2luIiwgImlzX09iaiIsICJvYmoiLCAiY3JjVGFibGUiLCAidCIsICJjIiwgImsiLCAiVXRpbHMiLCAib3B0cyIsICJmb2xkZXIiLCAic2VsZiIsICJta2RpclN5bmMiLCAiZnBhdGgiLCAicmVzb2x2ZWRQYXRoIiwgIm5hbWUiLCAic3RhdCIsICJwYXRoIiwgImNvbnRlbnQiLCAib3ZlcndyaXRlIiwgImF0dHIiLCAiZmQiLCAiY2FsbGJhY2siLCAiZXhpc3QiLCAiZXJyIiwgImV4aXN0cyIsICJmaW5kU3luYyIsICJkaXIiLCAicGF0dGVybiIsICJyZWN1cnNpdmUiLCAiZmlsZXMiLCAiZmlsZSIsICJjYiIsICJyZXN1bHRzIiwgImxpc3QiLCAibGlzdF9sZW5ndGgiLCAicmVzIiwgImNyYyIsICJieXRlIiwgImJ1ZiIsICJsZW4iLCAib2ZmIiwgIm1ldGhvZCIsICJzYWZlU3VmZml4IiwgImFyciIsICJpIiwgInByZWZpeCIsICJwYXJ0cyIsICJsIiwgImlucHV0IiwgImVuY29kZXIiLCAiYnVmZmVyIiwgImluZGV4IiwgInNsaWNlIiwgInZhbCIsICJkYXRlIiwgInRpbWUiLCAicmVxdWlyZV9mYXR0ciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInB0aCIsICJwYXRoIiwgImZzIiwgIl9wYXRoIiwgIl9vYmoiLCAibmV3QXR0ciIsICJfc3RhdCIsICJyZXF1aXJlX2RlY29kZXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJkYXRhIiwgInJlcXVpcmVfdXRpbCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInJlcXVpcmVfZW50cnlIZWFkZXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJVdGlscyIsICJDb25zdGFudHMiLCAiX3Zlck1hZGUiLCAiX3ZlcnNpb24iLCAiX2ZsYWdzIiwgIl9tZXRob2QiLCAiX3RpbWUiLCAiX2NyYyIsICJfY29tcHJlc3NlZFNpemUiLCAiX3NpemUiLCAiX2ZuYW1lTGVuIiwgIl9leHRyYUxlbiIsICJfY29tTGVuIiwgIl9kaXNrU3RhcnQiLCAiX2luYXR0ciIsICJfYXR0ciIsICJfb2Zmc2V0IiwgIl9sb2NhbEhlYWRlciIsICJ1aW50MzIiLCAidmFsIiwgInVpbnQxNiIsICJ1aW50OCIsICJpbnB1dCIsICJkYXRhIiwgImV4dHJhU3RhcnQiLCAiZXh0cmFFbmQiLCAiYnl0ZXMiLCAibnIiLCAicmVxdWlyZV9tYWluSGVhZGVyIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiVXRpbHMiLCAiQ29uc3RhbnRzIiwgIl92b2x1bWVFbnRyaWVzIiwgIl90b3RhbEVudHJpZXMiLCAiX3NpemUiLCAiX29mZnNldCIsICJfY29tbWVudExlbmd0aCIsICJ2YWwiLCAiZGF0YSIsICJiIiwgIm9mZnNldCIsICJuciIsICJsZW4iLCAib2ZmcyIsICJyZXF1aXJlX2hlYWRlcnMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgInJlcXVpcmVfZGVmbGF0ZXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJpbmJ1ZiIsICJ6bGliIiwgIm9wdHMiLCAiY2FsbGJhY2siLCAidG1wIiwgInBhcnRzIiwgInRvdGFsIiwgImRhdGEiLCAiYnVmIiwgIndyaXR0ZW4iLCAiaSIsICJwYXJ0IiwgInJlcXVpcmVfaW5mbGF0ZXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJ2ZXJzaW9uIiwgImluYnVmIiwgImV4cGVjdGVkTGVuZ3RoIiwgInpsaWIiLCAib3B0aW9uIiwgImNhbGxiYWNrIiwgInRtcCIsICJwYXJ0cyIsICJ0b3RhbCIsICJkYXRhIiwgImJ1ZiIsICJ3cml0dGVuIiwgImkiLCAicGFydCIsICJyZXF1aXJlX3ppcGNyeXB0byIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInJhbmRvbUZpbGxTeW5jIiwgIkVycm9ycyIsICJjcmN0YWJsZSIsICJ0IiwgImNyYyIsICJqIiwgInVNdWwiLCAiYSIsICJiIiwgImNyYzMydXBkYXRlIiwgInBDcmMzMiIsICJidmFsIiwgImdlblNhbHQiLCAic2FsdCIsICJsZW4iLCAiY29uZmlnIiwgIkluaXRrZXlzIiwgInB3IiwgInBhc3MiLCAiYnl0ZVZhbHVlIiwgImtleXMiLCAiayIsICJtYWtlX2RlY3J5cHRlciIsICJwd2QiLCAiZGF0YSIsICJyZXN1bHQiLCAicG9zIiwgImMiLCAibWFrZV9lbmNyeXB0ZXIiLCAiZGVjcnlwdCIsICJoZWFkZXIiLCAiZGVjcnlwdGVyIiwgInZlcmlmeUJ5dGUiLCAiX3NhbHRlciIsICJlbmNyeXB0IiwgIm9sZGxpa2UiLCAiZW5jcnlwdGVyIiwgInJlcXVpcmVfbWV0aG9kcyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAicmVxdWlyZV96aXBFbnRyeSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIlV0aWxzIiwgIkhlYWRlcnMiLCAiQ29uc3RhbnRzIiwgIk1ldGhvZHMiLCAib3B0aW9ucyIsICJpbnB1dCIsICJfY2VudHJhbEhlYWRlciIsICJfZW50cnlOYW1lIiwgIl9jb21tZW50IiwgIl9pc0RpcmVjdG9yeSIsICJ1bmNvbXByZXNzZWREYXRhIiwgIl9leHRyYSIsICJfZXh0cmFsb2NhbCIsICJfZWZzIiwgIm9wdHMiLCAiZGVjb2RlciIsICJnZXRDb21wcmVzc2VkRGF0YUZyb21aaXAiLCAiY3JjMzJPSyIsICJkYXRhIiwgImRlc2NyaXB0b3IiLCAiZGF0YUVuZE9mZnNldCIsICJkZWNvbXByZXNzIiwgImFzeW5jIiwgImNhbGxiYWNrIiwgInBhc3MiLCAiY29tcHJlc3NlZERhdGEiLCAiaW5mbGF0ZXIiLCAicmVzdWx0IiwgImNvbXByZXNzIiwgImRlZmxhdGVyIiwgImRlZmxhdGVkIiwgInJlYWRVSW50NjRMRSIsICJidWZmZXIiLCAib2Zmc2V0IiwgInBhcnNlRXh0cmEiLCAic2lnbmF0dXJlIiwgInNpemUiLCAicGFydCIsICJwYXJzZVppcDY0RXh0ZW5kZWRJbmZvcm1hdGlvbiIsICJjb21wcmVzc2VkU2l6ZSIsICJkaXNrTnVtU3RhcnQiLCAidmFsIiwgImxhc3RDaGFyIiwgIm4iLCAidmFsdWUiLCAiYXR0ciIsICJoZWFkZXIiLCAiYWRkcG9zIiwgImxvY2FsSGVhZGVyQnVmIiwgImxvY2FsSGVhZGVyIiwgImJ5dGVzIiwgIm5yIiwgInJlcXVpcmVfemlwRmlsZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIlppcEVudHJ5IiwgIkhlYWRlcnMiLCAiVXRpbHMiLCAiaW5CdWZmZXIiLCAib3B0aW9ucyIsICJlbnRyeUxpc3QiLCAiZW50cnlUYWJsZSIsICJfY29tbWVudCIsICJtYWluSGVhZGVyIiwgImxvYWRlZEVudHJpZXMiLCAicGFzc3dvcmQiLCAidGVtcG9yYXJ5IiwgIm9wdHMiLCAibm9Tb3J0IiwgImRlY29kZXIiLCAicmVhZE1haW5IZWFkZXIiLCAibWFrZVRlbXBvcmFyeUZvbGRlcnMiLCAiZm9sZGVyc0xpc3QiLCAiZWxlbSIsICJlbGVtZW50cyIsICJpIiwgInN1YiIsICJ0ZW1wZm9sZGVyIiwgInJlYWRFbnRyaWVzIiwgImluZGV4IiwgInRtcCIsICJlbnRyeSIsICJyZWFkTm93IiwgIm1heCIsICJuIiwgImVuZFN0YXJ0IiwgImVuZE9mZnNldCIsICJjb21tZW50RW5kIiwgInNvcnRFbnRyaWVzIiwgImEiLCAiYiIsICJlIiwgInZhbCIsICJjYWxsYmFjayIsICJlbnRyeU5hbWUiLCAid2l0aHN1YmZvbGRlcnMiLCAiY2hpbGQiLCAic3ViZm9sZGVycyIsICJsaXN0IiwgIm5hbWUiLCAiemlwRW50cnkiLCAiZGF0YUJsb2NrIiwgImhlYWRlckJsb2NrcyIsICJ0b3RhbFNpemUiLCAiZGluZGV4IiwgInRvdGFsRW50cmllcyIsICJjb21wcmVzc2VkRGF0YSIsICJsb2NhbEhlYWRlciIsICJkYXRhTGVuZ3RoIiwgImNlbnRyYWxIZWFkZXIiLCAib3V0QnVmZmVyIiwgImNvbnRlbnQiLCAibWgiLCAib25TdWNjZXNzIiwgIm9uRmFpbCIsICJvbkl0ZW1TdGFydCIsICJvbkl0ZW1FbmQiLCAiY2VudHJhbEhlYWRlcnMiLCAiY29tcHJlc3MyQnVmZmVyIiwgImVudHJ5TGlzdHMiLCAiY2VudGFsSGVhZGVyIiwgInJlcXVpcmVfYWRtX3ppcCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIlV0aWxzIiwgInB0aCIsICJaaXBFbnRyeSIsICJaaXBGaWxlIiwgImdldF9Cb29sIiwgInZhbCIsICJjIiwgImdldF9TdHIiLCAiZ2V0X0Z1biIsICJkZWZhdWx0T3B0aW9ucyIsICJpbnB1dCIsICJvcHRpb25zIiwgImluQnVmZmVyIiwgIm9wdHMiLCAiZmlsZXRvb2xzIiwgIl96aXAiLCAiY2Fub25pY2FsIiwgInNhbml0aXplIiwgInppcG5hbWVmaXgiLCAiZ2V0RW50cnkiLCAiZW50cnkiLCAiaXRlbSIsICJmaXhQYXRoIiwgInppcFBhdGgiLCAiam9pbiIsICJub3JtYWxpemUiLCAic2VwIiwgImZpbGVuYW1lRmlsdGVyIiwgImZpbHRlcmZuIiwgInJ4IiwgImZpbGVuYW1lIiwgInJlbGF0aXZlUGF0aCIsICJsb2NhbCIsICJsYXN0Q2hhciIsICJwYXNzIiwgImNhbGxiYWNrIiwgImVuY29kaW5nIiwgImRhdGEiLCAiZXJyIiwgIndpdGhzdWJmb2xkZXJzIiwgImNvbW1lbnQiLCAiY29udGVudCIsICJsb2NhbFBhdGgiLCAiemlwTmFtZSIsICJwIiwgIl9hdHRyIiwgInNlbGYiLCAic3RhdHMiLCAiZmlsdGVyIiwgIml0ZW1zIiwgImZpbGVwYXRoIiwgImkiLCAibmV4dCIsICJlcjAiLCAiZXIxIiwgIm5hbWVmaXgiLCAic3RyIiwgInJlbFBhdGhGaXgiLCAiZmlsZU5hbWVGaXgiLCAiZmlsZUVudHJpZXMiLCAiZGlyIiwgImRvbmUiLCAicHJvcHMiLCAicmVzb2x2ZSIsICJyZWplY3QiLCAiZW50cnlOYW1lIiwgImF0dHIiLCAidXBkYXRlIiwgImlzU3RhdCIsICJmaWxlYXR0ciIsICJ1bml4IiwgInBhc3N3b3JkIiwgIm5hbWUiLCAidGFyZ2V0UGF0aCIsICJtYWludGFpbkVudHJ5UGF0aCIsICJvdmVyd3JpdGUiLCAia2VlcE9yaWdpbmFsUGVybWlzc2lvbiIsICJvdXRGaWxlTmFtZSIsICJ0YXJnZXQiLCAiY2hpbGRyZW4iLCAiY2hpbGQiLCAiY2hpbGROYW1lIiwgImZpbGVBdHRyIiwgImdldFBhdGgiLCAiZ2V0RXJyb3IiLCAibXNnIiwgImZpbGUiLCAiZGlyRW50cmllcyIsICJlIiwgImRpclBhdGgiLCAiZGlyQXR0ciIsICJmaWxlUGF0aCIsICJlcnJfMSIsICJzdWNjIiwgImVycl8yIiwgInRhcmdldEZpbGVOYW1lIiwgInppcERhdGEiLCAib2siLCAicGVybSIsICJyZXQiLCAib25TdWNjZXNzIiwgIm9uRmFpbCIsICJvbkl0ZW1TdGFydCIsICJvbkl0ZW1FbmQiLCAicmVxdWlyZV9taW5pbWlzdCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImhhc0tleSIsICJvYmoiLCAia2V5cyIsICJvIiwgImtleSIsICJpc051bWJlciIsICJ4IiwgImlzQ29uc3RydWN0b3JPclByb3RvIiwgImFyZ3MiLCAib3B0cyIsICJmbGFncyIsICJhbGlhc2VzIiwgImFsaWFzSXNCb29sZWFuIiwgInkiLCAiayIsICJkZWZhdWx0cyIsICJhcmd2IiwgImFyZ0RlZmluZWQiLCAiYXJnIiwgInNldEtleSIsICJ2YWx1ZSIsICJpIiwgImxhc3RLZXkiLCAic2V0QXJnIiwgInZhbCIsICJub3RGbGFncyIsICJuZXh0IiwgIm0iLCAibGV0dGVycyIsICJicm9rZW4iLCAiaiIsICJyZXF1aXJlX2tsZXVyIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiRk9SQ0VfQ09MT1IiLCAiTk9ERV9ESVNBQkxFX0NPTE9SUyIsICJURVJNIiwgIiQiLCAiaW5pdCIsICJydW4iLCAiYXJyIiwgInN0ciIsICJ0bXAiLCAiYmVnIiwgImVuZCIsICJjaGFpbiIsICJoYXMiLCAia2V5cyIsICJjdHgiLCAib3BlbiIsICJjbG9zZSIsICJibGsiLCAidHh0IiwgInJlcXVpcmVfYWN0aW9uIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAia2V5IiwgImlzU2VsZWN0IiwgInJlcXVpcmVfc3RyaXAiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJzdHIiLCAicGF0dGVybiIsICJSR1giLCAicmVxdWlyZV9zcmMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJFU0MiLCAiQ1NJIiwgImJlZXAiLCAiY3Vyc29yIiwgIngiLCAieSIsICJyZXQiLCAiY291bnQiLCAic2Nyb2xsIiwgImVyYXNlIiwgImNsZWFyIiwgInJlcXVpcmVfY2xlYXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsICJvIiwgImFsbG93QXJyYXlMaWtlIiwgIml0IiwgIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsICJpIiwgIkYiLCAiX2UiLCAibm9ybWFsQ29tcGxldGlvbiIsICJkaWRFcnIiLCAiZXJyIiwgInN0ZXAiLCAiX2UyIiwgIm1pbkxlbiIsICJfYXJyYXlMaWtlVG9BcnJheSIsICJuIiwgImFyciIsICJsZW4iLCAiYXJyMiIsICJzdHJpcCIsICJfcmVxdWlyZSIsICJlcmFzZSIsICJjdXJzb3IiLCAid2lkdGgiLCAic3RyIiwgInByb21wdCIsICJwZXJMaW5lIiwgInJvd3MiLCAibGluZXMiLCAiX2l0ZXJhdG9yIiwgIl9zdGVwIiwgImxpbmUiLCAicmVxdWlyZV9maWd1cmVzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAibWFpbiIsICJ3aW4iLCAiZmlndXJlcyIsICJyZXF1aXJlX3N0eWxlIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiYyIsICJmaWd1cmVzIiwgInN0eWxlcyIsICJpbnB1dCIsICJyZW5kZXIiLCAidHlwZSIsICJzeW1ib2xzIiwgInN5bWJvbCIsICJkb25lIiwgImFib3J0ZWQiLCAiZXhpdGVkIiwgImRlbGltaXRlciIsICJjb21wbGV0aW5nIiwgIml0ZW0iLCAiZXhwYW5kYWJsZSIsICJleHBhbmRlZCIsICJyZXF1aXJlX2xpbmVzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAic3RyaXAiLCAibXNnIiwgInBlckxpbmUiLCAibGluZXMiLCAibCIsICJhIiwgImIiLCAicmVxdWlyZV93cmFwIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAibXNnIiwgIm9wdHMiLCAidGFiIiwgIndpZHRoIiwgImxpbmUiLCAiYXJyIiwgInciLCAicmVxdWlyZV9lbnRyaWVzVG9EaXNwbGF5IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiY3Vyc29yIiwgInRvdGFsIiwgIm1heFZpc2libGUiLCAic3RhcnRJbmRleCIsICJlbmRJbmRleCIsICJyZXF1aXJlX3V0aWwiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJyZXF1aXJlX3Byb21wdCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInJlYWRsaW5lIiwgIl9yZXF1aXJlIiwgImFjdGlvbiIsICJFdmVudEVtaXR0ZXIiLCAiX3JlcXVpcmUyIiwgImJlZXAiLCAiY3Vyc29yIiwgImNvbG9yIiwgIlByb21wdCIsICJvcHRzIiwgInJsIiwgImlzU2VsZWN0IiwgImtleXByZXNzIiwgInN0ciIsICJrZXkiLCAicmVxdWlyZV90ZXh0IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiYXN5bmNHZW5lcmF0b3JTdGVwIiwgImdlbiIsICJyZXNvbHZlIiwgInJlamVjdCIsICJfbmV4dCIsICJfdGhyb3ciLCAia2V5IiwgImFyZyIsICJpbmZvIiwgInZhbHVlIiwgImVycm9yIiwgIl9hc3luY1RvR2VuZXJhdG9yIiwgImZuIiwgInNlbGYiLCAiYXJncyIsICJlcnIiLCAiY29sb3IiLCAiUHJvbXB0IiwgIl9yZXF1aXJlIiwgImVyYXNlIiwgImN1cnNvciIsICJfcmVxdWlyZTIiLCAic3R5bGUiLCAiY2xlYXIiLCAibGluZXMiLCAiZmlndXJlcyIsICJUZXh0UHJvbXB0IiwgIm9wdHMiLCAidiIsICJfdGhpcyIsICJ2YWxpZCIsICJfdGhpczIiLCAibiIsICJjIiwgInMxIiwgInMyIiwgImEiLCAibCIsICJpIiwgInJlcXVpcmVfc2VsZWN0IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiY29sb3IiLCAiUHJvbXB0IiwgIl9yZXF1aXJlIiwgInN0eWxlIiwgImNsZWFyIiwgImZpZ3VyZXMiLCAid3JhcCIsICJlbnRyaWVzVG9EaXNwbGF5IiwgIl9yZXF1aXJlMiIsICJjdXJzb3IiLCAiU2VsZWN0UHJvbXB0IiwgIm9wdHMiLCAiY2giLCAiaWR4IiwgIm4iLCAiYyIsICJrZXkiLCAiX2VudHJpZXNUb0Rpc3BsYXkiLCAic3RhcnRJbmRleCIsICJlbmRJbmRleCIsICJpIiwgInRpdGxlIiwgInByZWZpeCIsICJkZXNjIiwgInYiLCAicmVxdWlyZV90b2dnbGUiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJjb2xvciIsICJQcm9tcHQiLCAiX3JlcXVpcmUiLCAic3R5bGUiLCAiY2xlYXIiLCAiX3JlcXVpcmUyIiwgImN1cnNvciIsICJlcmFzZSIsICJUb2dnbGVQcm9tcHQiLCAib3B0cyIsICJjIiwgImtleSIsICJyZXF1aXJlX2RhdGVwYXJ0IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiRGF0ZVBhcnQiLCAiX0RhdGVQYXJ0IiwgInRva2VuIiwgImRhdGUiLCAicGFydHMiLCAibG9jYWxlcyIsICJjdXJyZW50SWR4IiwgInBhcnQiLCAiaWR4IiwgInZhbCIsICJyZXF1aXJlX21lcmlkaWVtIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiRGF0ZVBhcnQiLCAiTWVyaWRpZW0iLCAib3B0cyIsICJtZXJpZGllbSIsICJyZXF1aXJlX2RheSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIkRhdGVQYXJ0IiwgInBvcyIsICJuIiwgIkRheSIsICJvcHRzIiwgInZhbCIsICJkYXRlIiwgImRheSIsICJyZXF1aXJlX2hvdXJzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiRGF0ZVBhcnQiLCAiSG91cnMiLCAib3B0cyIsICJ2YWwiLCAiaG91cnMiLCAicmVxdWlyZV9taWxsaXNlY29uZHMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJEYXRlUGFydCIsICJNaWxsaXNlY29uZHMiLCAib3B0cyIsICJ2YWwiLCAicmVxdWlyZV9taW51dGVzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiRGF0ZVBhcnQiLCAiTWludXRlcyIsICJvcHRzIiwgInZhbCIsICJtIiwgInJlcXVpcmVfbW9udGgiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJEYXRlUGFydCIsICJNb250aCIsICJvcHRzIiwgInZhbCIsICJtb250aCIsICJ0bCIsICJyZXF1aXJlX3NlY29uZHMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJEYXRlUGFydCIsICJTZWNvbmRzIiwgIm9wdHMiLCAidmFsIiwgInMiLCAicmVxdWlyZV95ZWFyIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiRGF0ZVBhcnQiLCAiWWVhciIsICJvcHRzIiwgInZhbCIsICJ5ZWFyIiwgInJlcXVpcmVfZGF0ZXBhcnRzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVxdWlyZV9kYXRlIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiYXN5bmNHZW5lcmF0b3JTdGVwIiwgImdlbiIsICJyZXNvbHZlIiwgInJlamVjdCIsICJfbmV4dCIsICJfdGhyb3ciLCAia2V5IiwgImFyZyIsICJpbmZvIiwgInZhbHVlIiwgImVycm9yIiwgIl9hc3luY1RvR2VuZXJhdG9yIiwgImZuIiwgInNlbGYiLCAiYXJncyIsICJlcnIiLCAiY29sb3IiLCAiUHJvbXB0IiwgIl9yZXF1aXJlIiwgInN0eWxlIiwgImNsZWFyIiwgImZpZ3VyZXMiLCAiX3JlcXVpcmUyIiwgImVyYXNlIiwgImN1cnNvciIsICJfcmVxdWlyZTMiLCAiRGF0ZVBhcnQiLCAiTWVyaWRpZW0iLCAiRGF5IiwgIkhvdXJzIiwgIk1pbGxpc2Vjb25kcyIsICJNaW51dGVzIiwgIk1vbnRoIiwgIlNlY29uZHMiLCAiWWVhciIsICJyZWdleCIsICJyZWdleEdyb3VwcyIsICJ0b2tlbiIsICJvcHRzIiwgImRmbHRMb2NhbGVzIiwgIkRhdGVQcm9tcHQiLCAiZGF0ZSIsICJtYXNrIiwgInJlc3VsdCIsICJtYXRjaCIsICJpZHgiLCAiZ3IiLCAicGFydHMiLCAiYXJyIiwgImkiLCAibiIsICJwIiwgIl90aGlzIiwgInZhbGlkIiwgIl90aGlzMiIsICJwcmV2IiwgIm5leHQiLCAicGFydCIsICJjIiwgImEiLCAibCIsICJyZXF1aXJlX251bWJlciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImFzeW5jR2VuZXJhdG9yU3RlcCIsICJnZW4iLCAicmVzb2x2ZSIsICJyZWplY3QiLCAiX25leHQiLCAiX3Rocm93IiwgImtleSIsICJhcmciLCAiaW5mbyIsICJ2YWx1ZSIsICJlcnJvciIsICJfYXN5bmNUb0dlbmVyYXRvciIsICJmbiIsICJzZWxmIiwgImFyZ3MiLCAiZXJyIiwgImNvbG9yIiwgIlByb21wdCIsICJfcmVxdWlyZSIsICJjdXJzb3IiLCAiZXJhc2UiLCAiX3JlcXVpcmUyIiwgInN0eWxlIiwgImZpZ3VyZXMiLCAiY2xlYXIiLCAibGluZXMiLCAiaXNOdW1iZXIiLCAiaXNEZWYiLCAiYW55IiwgInJvdW5kIiwgIm51bWJlciIsICJwcmVjaXNpb24iLCAiZmFjdG9yIiwgIk51bWJlclByb21wdCIsICJvcHRzIiwgInYiLCAieCIsICJjIiwgIl90aGlzIiwgInZhbGlkIiwgIl90aGlzMiIsICJ2YWwiLCAibm93IiwgImEiLCAibCIsICJpIiwgInJlcXVpcmVfbXVsdGlzZWxlY3QiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJjb2xvciIsICJfcmVxdWlyZSIsICJjdXJzb3IiLCAiUHJvbXB0IiwgIl9yZXF1aXJlMiIsICJjbGVhciIsICJmaWd1cmVzIiwgInN0eWxlIiwgIndyYXAiLCAiZW50cmllc1RvRGlzcGxheSIsICJNdWx0aXNlbGVjdFByb21wdCIsICJvcHRzIiwgImNoIiwgImlkeCIsICJ2IiwgInNlbGVjdGVkIiwgImUiLCAibmV3U2VsZWN0ZWQiLCAiYyIsICJrZXkiLCAiaSIsICJhcnJvd0luZGljYXRvciIsICJwcmVmaXgiLCAidGl0bGUiLCAiZGVzYyIsICJvcHRpb25zIiwgIl9lbnRyaWVzVG9EaXNwbGF5IiwgInN0YXJ0SW5kZXgiLCAiZW5kSW5kZXgiLCAic3R5bGVkT3B0aW9ucyIsICJvdXRwdXQiLCAicHJvbXB0IiwgInJlcXVpcmVfYXV0b2NvbXBsZXRlIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiYXN5bmNHZW5lcmF0b3JTdGVwIiwgImdlbiIsICJyZXNvbHZlIiwgInJlamVjdCIsICJfbmV4dCIsICJfdGhyb3ciLCAia2V5IiwgImFyZyIsICJpbmZvIiwgInZhbHVlIiwgImVycm9yIiwgIl9hc3luY1RvR2VuZXJhdG9yIiwgImZuIiwgInNlbGYiLCAiYXJncyIsICJlcnIiLCAiY29sb3IiLCAiUHJvbXB0IiwgIl9yZXF1aXJlIiwgImVyYXNlIiwgImN1cnNvciIsICJfcmVxdWlyZTIiLCAic3R5bGUiLCAiY2xlYXIiLCAiZmlndXJlcyIsICJ3cmFwIiwgImVudHJpZXNUb0Rpc3BsYXkiLCAiZ2V0VmFsIiwgImFyciIsICJpIiwgImdldFRpdGxlIiwgImdldEluZGV4IiwgInZhbE9yVGl0bGUiLCAiaW5kZXgiLCAiZWwiLCAiQXV0b2NvbXBsZXRlUHJvbXB0IiwgIm9wdHMiLCAiZmIiLCAiY2hvaWNlIiwgImNiIiwgIl90aGlzIiwgInAiLCAic3VnZ2VzdGlvbnMiLCAicyIsICJsIiwgImMiLCAiczEiLCAiczIiLCAidiIsICJob3ZlcmVkIiwgImlzU3RhcnQiLCAiaXNFbmQiLCAiZGVzYyIsICJwcmVmaXgiLCAidGl0bGUiLCAiX2VudHJpZXNUb0Rpc3BsYXkiLCAic3RhcnRJbmRleCIsICJlbmRJbmRleCIsICJpdGVtIiwgInJlcXVpcmVfYXV0b2NvbXBsZXRlTXVsdGlzZWxlY3QiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJjb2xvciIsICJfcmVxdWlyZSIsICJjdXJzb3IiLCAiTXVsdGlzZWxlY3RQcm9tcHQiLCAiX3JlcXVpcmUyIiwgImNsZWFyIiwgInN0eWxlIiwgImZpZ3VyZXMiLCAiQXV0b2NvbXBsZXRlTXVsdGlzZWxlY3RQcm9tcHQiLCAib3B0cyIsICJlIiwgImN1cnJlbnRIaWdobGlnaHQiLCAidiIsICJuZXdIaWdobGlnaHRJbmRleCIsICJjIiwgImtleSIsICJpIiwgInRpdGxlIiwgIm91dHB1dCIsICJwcm9tcHQiLCAicmVxdWlyZV9jb25maXJtIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiY29sb3IiLCAiUHJvbXB0IiwgIl9yZXF1aXJlIiwgInN0eWxlIiwgImNsZWFyIiwgIl9yZXF1aXJlMiIsICJlcmFzZSIsICJjdXJzb3IiLCAiQ29uZmlybVByb21wdCIsICJvcHRzIiwgImMiLCAia2V5IiwgInJlcXVpcmVfZWxlbWVudHMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJyZXF1aXJlX3Byb21wdHMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIiQiLCAiZWwiLCAibm9vcCIsICJ2IiwgInRvUHJvbXB0IiwgInR5cGUiLCAiYXJncyIsICJvcHRzIiwgInJlcyIsICJyZWoiLCAicCIsICJvbkFib3J0IiwgIm9uU3VibWl0IiwgIm9uRXhpdCIsICJ4IiwgInNlcCIsICJzdHIiLCAicyIsICJ0b1NlbGVjdGVkIiwgIml0ZW1zIiwgIml0ZW0iLCAiYnlUaXRsZSIsICJpbnB1dCIsICJjaG9pY2VzIiwgInJlcXVpcmVfZGlzdCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIm93bktleXMiLCAib2JqZWN0IiwgImVudW1lcmFibGVPbmx5IiwgImtleXMiLCAic3ltYm9scyIsICJzeW0iLCAiX29iamVjdFNwcmVhZCIsICJ0YXJnZXQiLCAiaSIsICJzb3VyY2UiLCAia2V5IiwgIl9kZWZpbmVQcm9wZXJ0eSIsICJvYmoiLCAidmFsdWUiLCAiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiLCAibyIsICJhbGxvd0FycmF5TGlrZSIsICJpdCIsICJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCAiRiIsICJfZSIsICJub3JtYWxDb21wbGV0aW9uIiwgImRpZEVyciIsICJlcnIiLCAic3RlcCIsICJfZTIiLCAibWluTGVuIiwgIl9hcnJheUxpa2VUb0FycmF5IiwgIm4iLCAiYXJyIiwgImxlbiIsICJhcnIyIiwgImFzeW5jR2VuZXJhdG9yU3RlcCIsICJnZW4iLCAicmVzb2x2ZSIsICJyZWplY3QiLCAiX25leHQiLCAiX3Rocm93IiwgImFyZyIsICJpbmZvIiwgImVycm9yIiwgIl9hc3luY1RvR2VuZXJhdG9yIiwgImZuIiwgInNlbGYiLCAiYXJncyIsICJwcm9tcHRzIiwgInBhc3NPbiIsICJub29wIiwgInByb21wdCIsICJfcHJvbXB0IiwgInF1ZXN0aW9ucyIsICJvblN1Ym1pdCIsICJvbkNhbmNlbCIsICJhbnN3ZXJzIiwgIm92ZXJyaWRlIiwgImFuc3dlciIsICJxdWVzdGlvbiIsICJxdWl0IiwgIm5hbWUiLCAidHlwZSIsICJsYXN0UHJvbXB0IiwgImdldEZvcm1hdHRlZEFuc3dlciIsICJfcmVmIiwgInNraXBWYWxpZGF0aW9uIiwgIl94IiwgIl94MiIsICJfaXRlcmF0b3IiLCAiX3N0ZXAiLCAiX3F1ZXN0aW9uIiwgIl9xdWVzdGlvbjIiLCAiZ2V0SW5qZWN0ZWRBbnN3ZXIiLCAiaW5qZWN0ZWQiLCAiZGVhZnVsdFZhbHVlIiwgImluamVjdCIsICJyZXF1aXJlX2FjdGlvbiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImtleSIsICJpc1NlbGVjdCIsICJyZXF1aXJlX3N0cmlwIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAic3RyIiwgInBhdHRlcm4iLCAiUkdYIiwgInJlcXVpcmVfY2xlYXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJzdHJpcCIsICJlcmFzZSIsICJjdXJzb3IiLCAid2lkdGgiLCAic3RyIiwgInByb21wdCIsICJwZXJMaW5lIiwgInJvd3MiLCAibGluZXMiLCAibGluZSIsICJyZXF1aXJlX2ZpZ3VyZXMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJtYWluIiwgIndpbiIsICJmaWd1cmVzIiwgInJlcXVpcmVfc3R5bGUiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJjIiwgImZpZ3VyZXMiLCAic3R5bGVzIiwgImlucHV0IiwgInJlbmRlciIsICJ0eXBlIiwgInN5bWJvbHMiLCAic3ltYm9sIiwgImRvbmUiLCAiYWJvcnRlZCIsICJleGl0ZWQiLCAiZGVsaW1pdGVyIiwgImNvbXBsZXRpbmciLCAiaXRlbSIsICJleHBhbmRhYmxlIiwgImV4cGFuZGVkIiwgInJlcXVpcmVfbGluZXMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJzdHJpcCIsICJtc2ciLCAicGVyTGluZSIsICJsaW5lcyIsICJsIiwgImEiLCAiYiIsICJyZXF1aXJlX3dyYXAiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJtc2ciLCAib3B0cyIsICJ0YWIiLCAid2lkdGgiLCAibGluZSIsICJhcnIiLCAidyIsICJyZXF1aXJlX2VudHJpZXNUb0Rpc3BsYXkiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJjdXJzb3IiLCAidG90YWwiLCAibWF4VmlzaWJsZSIsICJzdGFydEluZGV4IiwgImVuZEluZGV4IiwgInJlcXVpcmVfdXRpbCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInJlcXVpcmVfcHJvbXB0IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVhZGxpbmUiLCAiYWN0aW9uIiwgIkV2ZW50RW1pdHRlciIsICJiZWVwIiwgImN1cnNvciIsICJjb2xvciIsICJQcm9tcHQiLCAib3B0cyIsICJybCIsICJpc1NlbGVjdCIsICJrZXlwcmVzcyIsICJzdHIiLCAia2V5IiwgInJlcXVpcmVfdGV4dCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImNvbG9yIiwgIlByb21wdCIsICJlcmFzZSIsICJjdXJzb3IiLCAic3R5bGUiLCAiY2xlYXIiLCAibGluZXMiLCAiZmlndXJlcyIsICJUZXh0UHJvbXB0IiwgIm9wdHMiLCAidiIsICJ2YWxpZCIsICJuIiwgImMiLCAia2V5IiwgInMxIiwgInMyIiwgImEiLCAibCIsICJpIiwgInJlcXVpcmVfc2VsZWN0IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiY29sb3IiLCAiUHJvbXB0IiwgInN0eWxlIiwgImNsZWFyIiwgImZpZ3VyZXMiLCAid3JhcCIsICJlbnRyaWVzVG9EaXNwbGF5IiwgImN1cnNvciIsICJTZWxlY3RQcm9tcHQiLCAib3B0cyIsICJjaCIsICJpZHgiLCAibiIsICJjIiwgImtleSIsICJzdGFydEluZGV4IiwgImVuZEluZGV4IiwgImkiLCAidGl0bGUiLCAicHJlZml4IiwgImRlc2MiLCAidiIsICJyZXF1aXJlX3RvZ2dsZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImNvbG9yIiwgIlByb21wdCIsICJzdHlsZSIsICJjbGVhciIsICJjdXJzb3IiLCAiZXJhc2UiLCAiVG9nZ2xlUHJvbXB0IiwgIm9wdHMiLCAiYyIsICJrZXkiLCAicmVxdWlyZV9kYXRlcGFydCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIkRhdGVQYXJ0IiwgIl9EYXRlUGFydCIsICJ0b2tlbiIsICJkYXRlIiwgInBhcnRzIiwgImxvY2FsZXMiLCAiY3VycmVudElkeCIsICJwYXJ0IiwgImlkeCIsICJ2YWwiLCAicmVxdWlyZV9tZXJpZGllbSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIkRhdGVQYXJ0IiwgIk1lcmlkaWVtIiwgIm9wdHMiLCAibWVyaWRpZW0iLCAicmVxdWlyZV9kYXkiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJEYXRlUGFydCIsICJwb3MiLCAibiIsICJEYXkiLCAib3B0cyIsICJ2YWwiLCAiZGF0ZSIsICJkYXkiLCAicmVxdWlyZV9ob3VycyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIkRhdGVQYXJ0IiwgIkhvdXJzIiwgIm9wdHMiLCAidmFsIiwgImhvdXJzIiwgInJlcXVpcmVfbWlsbGlzZWNvbmRzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiRGF0ZVBhcnQiLCAiTWlsbGlzZWNvbmRzIiwgIm9wdHMiLCAidmFsIiwgInJlcXVpcmVfbWludXRlcyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIkRhdGVQYXJ0IiwgIk1pbnV0ZXMiLCAib3B0cyIsICJ2YWwiLCAibSIsICJyZXF1aXJlX21vbnRoIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiRGF0ZVBhcnQiLCAiTW9udGgiLCAib3B0cyIsICJ2YWwiLCAibW9udGgiLCAidGwiLCAicmVxdWlyZV9zZWNvbmRzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiRGF0ZVBhcnQiLCAiU2Vjb25kcyIsICJvcHRzIiwgInZhbCIsICJzIiwgInJlcXVpcmVfeWVhciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIkRhdGVQYXJ0IiwgIlllYXIiLCAib3B0cyIsICJ2YWwiLCAieWVhciIsICJyZXF1aXJlX2RhdGVwYXJ0cyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInJlcXVpcmVfZGF0ZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImNvbG9yIiwgIlByb21wdCIsICJzdHlsZSIsICJjbGVhciIsICJmaWd1cmVzIiwgImVyYXNlIiwgImN1cnNvciIsICJEYXRlUGFydCIsICJNZXJpZGllbSIsICJEYXkiLCAiSG91cnMiLCAiTWlsbGlzZWNvbmRzIiwgIk1pbnV0ZXMiLCAiTW9udGgiLCAiU2Vjb25kcyIsICJZZWFyIiwgInJlZ2V4IiwgInJlZ2V4R3JvdXBzIiwgInRva2VuIiwgIm9wdHMiLCAiZGZsdExvY2FsZXMiLCAiRGF0ZVByb21wdCIsICJkYXRlIiwgIm1hc2siLCAicmVzdWx0IiwgIm1hdGNoIiwgImlkeCIsICJnciIsICJwYXJ0cyIsICJhcnIiLCAiaSIsICJuIiwgInAiLCAidmFsaWQiLCAicHJldiIsICJuZXh0IiwgInBhcnQiLCAiYyIsICJhIiwgImwiLCAicmVxdWlyZV9udW1iZXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJjb2xvciIsICJQcm9tcHQiLCAiY3Vyc29yIiwgImVyYXNlIiwgInN0eWxlIiwgImZpZ3VyZXMiLCAiY2xlYXIiLCAibGluZXMiLCAiaXNOdW1iZXIiLCAiaXNEZWYiLCAiYW55IiwgInJvdW5kIiwgIm51bWJlciIsICJwcmVjaXNpb24iLCAiZmFjdG9yIiwgIk51bWJlclByb21wdCIsICJvcHRzIiwgInYiLCAieCIsICJjIiwgInZhbGlkIiwgInZhbCIsICJrZXkiLCAibm93IiwgImEiLCAibCIsICJpIiwgInJlcXVpcmVfbXVsdGlzZWxlY3QiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJjb2xvciIsICJjdXJzb3IiLCAiUHJvbXB0IiwgImNsZWFyIiwgImZpZ3VyZXMiLCAic3R5bGUiLCAid3JhcCIsICJlbnRyaWVzVG9EaXNwbGF5IiwgIk11bHRpc2VsZWN0UHJvbXB0IiwgIm9wdHMiLCAiY2giLCAiaWR4IiwgInYiLCAic2VsZWN0ZWQiLCAiZSIsICJuZXdTZWxlY3RlZCIsICJjIiwgImtleSIsICJpIiwgImFycm93SW5kaWNhdG9yIiwgInByZWZpeCIsICJ0aXRsZSIsICJkZXNjIiwgIm9wdGlvbnMiLCAic3RhcnRJbmRleCIsICJlbmRJbmRleCIsICJzdHlsZWRPcHRpb25zIiwgIm91dHB1dCIsICJwcm9tcHQiLCAicmVxdWlyZV9hdXRvY29tcGxldGUiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJjb2xvciIsICJQcm9tcHQiLCAiZXJhc2UiLCAiY3Vyc29yIiwgInN0eWxlIiwgImNsZWFyIiwgImZpZ3VyZXMiLCAid3JhcCIsICJlbnRyaWVzVG9EaXNwbGF5IiwgImdldFZhbCIsICJhcnIiLCAiaSIsICJnZXRUaXRsZSIsICJnZXRJbmRleCIsICJ2YWxPclRpdGxlIiwgImluZGV4IiwgImVsIiwgIkF1dG9jb21wbGV0ZVByb21wdCIsICJvcHRzIiwgImZiIiwgImNob2ljZSIsICJjYiIsICJwIiwgInN1Z2dlc3Rpb25zIiwgImwiLCAiYyIsICJrZXkiLCAiczEiLCAiczIiLCAidiIsICJob3ZlcmVkIiwgImlzU3RhcnQiLCAiaXNFbmQiLCAiZGVzYyIsICJwcmVmaXgiLCAidGl0bGUiLCAic3RhcnRJbmRleCIsICJlbmRJbmRleCIsICJpdGVtIiwgInJlcXVpcmVfYXV0b2NvbXBsZXRlTXVsdGlzZWxlY3QiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJjb2xvciIsICJjdXJzb3IiLCAiTXVsdGlzZWxlY3RQcm9tcHQiLCAiY2xlYXIiLCAic3R5bGUiLCAiZmlndXJlcyIsICJBdXRvY29tcGxldGVNdWx0aXNlbGVjdFByb21wdCIsICJvcHRzIiwgImUiLCAiY3VycmVudEhpZ2hsaWdodCIsICJ2IiwgIm5ld0hpZ2hsaWdodEluZGV4IiwgImMiLCAia2V5IiwgImkiLCAidGl0bGUiLCAib3V0cHV0IiwgInByb21wdCIsICJyZXF1aXJlX2NvbmZpcm0iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJjb2xvciIsICJQcm9tcHQiLCAic3R5bGUiLCAiY2xlYXIiLCAiZXJhc2UiLCAiY3Vyc29yIiwgIkNvbmZpcm1Qcm9tcHQiLCAib3B0cyIsICJjIiwgImtleSIsICJyZXF1aXJlX2VsZW1lbnRzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVxdWlyZV9wcm9tcHRzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICIkIiwgImVsIiwgIm5vb3AiLCAidiIsICJ0b1Byb21wdCIsICJ0eXBlIiwgImFyZ3MiLCAib3B0cyIsICJyZXMiLCAicmVqIiwgInAiLCAib25BYm9ydCIsICJvblN1Ym1pdCIsICJvbkV4aXQiLCAieCIsICJzZXAiLCAic3RyIiwgInMiLCAidG9TZWxlY3RlZCIsICJpdGVtcyIsICJpdGVtIiwgImJ5VGl0bGUiLCAiaW5wdXQiLCAiY2hvaWNlcyIsICJyZXF1aXJlX2xpYiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInByb21wdHMiLCAicGFzc09uIiwgIm5vb3AiLCAicHJvbXB0IiwgInF1ZXN0aW9ucyIsICJvblN1Ym1pdCIsICJvbkNhbmNlbCIsICJhbnN3ZXJzIiwgIm92ZXJyaWRlIiwgImFuc3dlciIsICJxdWVzdGlvbiIsICJxdWl0IiwgIm5hbWUiLCAidHlwZSIsICJsYXN0UHJvbXB0IiwgImdldEZvcm1hdHRlZEFuc3dlciIsICJza2lwVmFsaWRhdGlvbiIsICJrZXkiLCAidmFsdWUiLCAiZ2V0SW5qZWN0ZWRBbnN3ZXIiLCAiaW5qZWN0ZWQiLCAiZGVhZnVsdFZhbHVlIiwgImluamVjdCIsICJyZXF1aXJlX3Byb21wdHMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJpc05vZGVMVCIsICJ0YXIiLCAiaSIsICJzcmMiLCAicmVxdWlyZV9kZWxheWVkX3N0cmVhbSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIlN0cmVhbSIsICJ1dGlsIiwgIkRlbGF5ZWRTdHJlYW0iLCAic291cmNlIiwgIm9wdGlvbnMiLCAiZGVsYXllZFN0cmVhbSIsICJvcHRpb24iLCAicmVhbEVtaXQiLCAiYXJncyIsICJyIiwgIm1lc3NhZ2UiLCAicmVxdWlyZV9jb21iaW5lZF9zdHJlYW0iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJ1dGlsIiwgIlN0cmVhbSIsICJEZWxheWVkU3RyZWFtIiwgIkNvbWJpbmVkU3RyZWFtIiwgIm9wdGlvbnMiLCAiY29tYmluZWRTdHJlYW0iLCAib3B0aW9uIiwgInN0cmVhbSIsICJpc1N0cmVhbUxpa2UiLCAibmV3U3RyZWFtIiwgImRlc3QiLCAiZ2V0U3RyZWFtIiwgInZhbHVlIiwgInNlbGYiLCAiZXJyIiwgImRhdGEiLCAibWVzc2FnZSIsICJyZXF1aXJlX2RiIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVxdWlyZV9taW1lX2RiIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVxdWlyZV9taW1lX3R5cGVzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJkYiIsICJleHRuYW1lIiwgIkVYVFJBQ1RfVFlQRV9SRUdFWFAiLCAiVEVYVF9UWVBFX1JFR0VYUCIsICJjaGFyc2V0IiwgImNvbnRlbnRUeXBlIiwgImV4dGVuc2lvbiIsICJsb29rdXAiLCAicG9wdWxhdGVNYXBzIiwgInR5cGUiLCAibWF0Y2giLCAibWltZSIsICJzdHIiLCAiZXh0cyIsICJwYXRoIiwgImV4dGVuc2lvbnMiLCAidHlwZXMiLCAicHJlZmVyZW5jZSIsICJpIiwgImZyb20iLCAidG8iLCAicmVxdWlyZV9kZWZlciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImRlZmVyIiwgImZuIiwgIm5leHRUaWNrIiwgInJlcXVpcmVfYXN5bmMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJkZWZlciIsICJhc3luYyIsICJjYWxsYmFjayIsICJpc0FzeW5jIiwgImVyciIsICJyZXN1bHQiLCAicmVxdWlyZV9hYm9ydCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImFib3J0IiwgInN0YXRlIiwgImNsZWFuIiwgImtleSIsICJyZXF1aXJlX2l0ZXJhdGUiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJhc3luYyIsICJhYm9ydCIsICJpdGVyYXRlIiwgImxpc3QiLCAiaXRlcmF0b3IiLCAic3RhdGUiLCAiY2FsbGJhY2siLCAia2V5IiwgInJ1bkpvYiIsICJlcnJvciIsICJvdXRwdXQiLCAiaXRlbSIsICJhYm9ydGVyIiwgInJlcXVpcmVfc3RhdGUiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJzdGF0ZSIsICJsaXN0IiwgInNvcnRNZXRob2QiLCAiaXNOYW1lZExpc3QiLCAiaW5pdFN0YXRlIiwgImEiLCAiYiIsICJyZXF1aXJlX3Rlcm1pbmF0b3IiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJhYm9ydCIsICJhc3luYyIsICJ0ZXJtaW5hdG9yIiwgImNhbGxiYWNrIiwgInJlcXVpcmVfcGFyYWxsZWwiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJpdGVyYXRlIiwgImluaXRTdGF0ZSIsICJ0ZXJtaW5hdG9yIiwgInBhcmFsbGVsIiwgImxpc3QiLCAiaXRlcmF0b3IiLCAiY2FsbGJhY2siLCAic3RhdGUiLCAiZXJyb3IiLCAicmVzdWx0IiwgInJlcXVpcmVfc2VyaWFsT3JkZXJlZCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIml0ZXJhdGUiLCAiaW5pdFN0YXRlIiwgInRlcm1pbmF0b3IiLCAic2VyaWFsT3JkZXJlZCIsICJhc2NlbmRpbmciLCAiZGVzY2VuZGluZyIsICJsaXN0IiwgIml0ZXJhdG9yIiwgInNvcnRNZXRob2QiLCAiY2FsbGJhY2siLCAic3RhdGUiLCAiaXRlcmF0b3JIYW5kbGVyIiwgImVycm9yIiwgInJlc3VsdCIsICJhIiwgImIiLCAicmVxdWlyZV9zZXJpYWwiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJzZXJpYWxPcmRlcmVkIiwgInNlcmlhbCIsICJsaXN0IiwgIml0ZXJhdG9yIiwgImNhbGxiYWNrIiwgInJlcXVpcmVfYXN5bmNraXQiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJyZXF1aXJlX3BvcHVsYXRlIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiZHN0IiwgInNyYyIsICJwcm9wIiwgInJlcXVpcmVfZm9ybV9kYXRhIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiQ29tYmluZWRTdHJlYW0iLCAidXRpbCIsICJwYXRoIiwgImh0dHAiLCAiaHR0cHMiLCAicGFyc2VVcmwiLCAiZnMiLCAiU3RyZWFtIiwgIm1pbWUiLCAiYXN5bmNraXQiLCAicG9wdWxhdGUiLCAiRm9ybURhdGEiLCAib3B0aW9ucyIsICJvcHRpb24iLCAiZmllbGQiLCAidmFsdWUiLCAiYXBwZW5kIiwgImhlYWRlciIsICJmb290ZXIiLCAidmFsdWVMZW5ndGgiLCAiY2FsbGJhY2siLCAiZXJyIiwgInN0YXQiLCAiZmlsZVNpemUiLCAicmVzcG9uc2UiLCAiY29udGVudERpc3Bvc2l0aW9uIiwgImNvbnRlbnRUeXBlIiwgImNvbnRlbnRzIiwgImhlYWRlcnMiLCAicHJvcCIsICJmaWxlbmFtZSIsICJuZXh0IiwgImxhc3RQYXJ0IiwgInVzZXJIZWFkZXJzIiwgImZvcm1IZWFkZXJzIiwgImJvdW5kYXJ5IiwgImRhdGFCdWZmZXIiLCAibGVuIiwgImkiLCAia25vd25MZW5ndGgiLCAiaGFzS25vd25MZW5ndGgiLCAiY2IiLCAidmFsdWVzIiwgImxlbmd0aCIsICJwYXJhbXMiLCAicmVxdWVzdCIsICJkZWZhdWx0cyIsICJvblJlc3BvbnNlIiwgImVycm9yIiwgInJlc3BvbmNlIiwgInJlcXVpcmVfcHJveHlfZnJvbV9lbnYiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgInBhcnNlVXJsIiwgIkRFRkFVTFRfUE9SVFMiLCAic3RyaW5nRW5kc1dpdGgiLCAicyIsICJnZXRQcm94eUZvclVybCIsICJ1cmwiLCAicGFyc2VkVXJsIiwgInByb3RvIiwgImhvc3RuYW1lIiwgInBvcnQiLCAic2hvdWxkUHJveHkiLCAicHJveHkiLCAiZ2V0RW52IiwgIk5PX1BST1hZIiwgInBhcnNlZFByb3h5IiwgInBhcnNlZFByb3h5SG9zdG5hbWUiLCAicGFyc2VkUHJveHlQb3J0IiwgImtleSIsICJyZXF1aXJlX21zIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicyIsICJtIiwgImgiLCAiZCIsICJ3IiwgInkiLCAidmFsIiwgIm9wdGlvbnMiLCAidHlwZSIsICJwYXJzZSIsICJmbXRMb25nIiwgImZtdFNob3J0IiwgInN0ciIsICJtYXRjaCIsICJuIiwgIm1zIiwgIm1zQWJzIiwgInBsdXJhbCIsICJuYW1lIiwgImlzUGx1cmFsIiwgInJlcXVpcmVfY29tbW9uIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAic2V0dXAiLCAiZW52IiwgImNyZWF0ZURlYnVnIiwgImNvZXJjZSIsICJkaXNhYmxlIiwgImVuYWJsZSIsICJlbmFibGVkIiwgImRlc3Ryb3kiLCAia2V5IiwgInNlbGVjdENvbG9yIiwgIm5hbWVzcGFjZSIsICJoYXNoIiwgImkiLCAicHJldlRpbWUiLCAiZW5hYmxlT3ZlcnJpZGUiLCAibmFtZXNwYWNlc0NhY2hlIiwgImVuYWJsZWRDYWNoZSIsICJkZWJ1ZyIsICJhcmdzIiwgInNlbGYiLCAiY3VyciIsICJtcyIsICJpbmRleCIsICJtYXRjaCIsICJmb3JtYXQiLCAiZm9ybWF0dGVyIiwgInZhbCIsICJleHRlbmQiLCAidiIsICJkZWxpbWl0ZXIiLCAibmV3RGVidWciLCAibmFtZXNwYWNlcyIsICJzcGxpdCIsICJsZW4iLCAidG9OYW1lc3BhY2UiLCAibmFtZSIsICJyZWdleHAiLCAicmVxdWlyZV9icm93c2VyIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiZm9ybWF0QXJncyIsICJzYXZlIiwgImxvYWQiLCAidXNlQ29sb3JzIiwgImxvY2Fsc3RvcmFnZSIsICJ3YXJuZWQiLCAiYXJncyIsICJjIiwgImluZGV4IiwgImxhc3RDIiwgIm1hdGNoIiwgIm5hbWVzcGFjZXMiLCAiciIsICJmb3JtYXR0ZXJzIiwgInYiLCAiZXJyb3IiLCAicmVxdWlyZV9oYXNfZmxhZyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImZsYWciLCAiYXJndiIsICJwcmVmaXgiLCAicG9zaXRpb24iLCAidGVybWluYXRvclBvc2l0aW9uIiwgInJlcXVpcmVfc3VwcG9ydHNfY29sb3IiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJvcyIsICJ0dHkiLCAiaGFzRmxhZyIsICJlbnYiLCAiZm9yY2VDb2xvciIsICJ0cmFuc2xhdGVMZXZlbCIsICJsZXZlbCIsICJzdXBwb3J0c0NvbG9yIiwgImhhdmVTdHJlYW0iLCAic3RyZWFtSXNUVFkiLCAibWluIiwgIm9zUmVsZWFzZSIsICJzaWduIiwgInZlcnNpb24iLCAiZ2V0U3VwcG9ydExldmVsIiwgInN0cmVhbSIsICJyZXF1aXJlX25vZGUiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJ0dHkiLCAidXRpbCIsICJpbml0IiwgImxvZyIsICJmb3JtYXRBcmdzIiwgInNhdmUiLCAibG9hZCIsICJ1c2VDb2xvcnMiLCAic3VwcG9ydHNDb2xvciIsICJrZXkiLCAib2JqIiwgInByb3AiLCAiXyIsICJrIiwgInZhbCIsICJhcmdzIiwgIm5hbWUiLCAiYyIsICJjb2xvckNvZGUiLCAicHJlZml4IiwgImdldERhdGUiLCAibmFtZXNwYWNlcyIsICJkZWJ1ZyIsICJrZXlzIiwgImZvcm1hdHRlcnMiLCAidiIsICJzdHIiLCAicmVxdWlyZV9zcmMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJyZXF1aXJlX2RlYnVnIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiZGVidWciLCAicmVxdWlyZV9mb2xsb3dfcmVkaXJlY3RzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAidXJsIiwgIlVSTCIsICJodHRwIiwgImh0dHBzIiwgIldyaXRhYmxlIiwgImFzc2VydCIsICJkZWJ1ZyIsICJ1c2VOYXRpdmVVUkwiLCAiZXJyb3IiLCAicHJlc2VydmVkVXJsRmllbGRzIiwgImV2ZW50cyIsICJldmVudEhhbmRsZXJzIiwgImV2ZW50IiwgImFyZzEiLCAiYXJnMiIsICJhcmczIiwgIkludmFsaWRVcmxFcnJvciIsICJjcmVhdGVFcnJvclR5cGUiLCAiUmVkaXJlY3Rpb25FcnJvciIsICJUb29NYW55UmVkaXJlY3RzRXJyb3IiLCAiTWF4Qm9keUxlbmd0aEV4Y2VlZGVkRXJyb3IiLCAiV3JpdGVBZnRlckVuZEVycm9yIiwgImRlc3Ryb3kiLCAibm9vcCIsICJSZWRpcmVjdGFibGVSZXF1ZXN0IiwgIm9wdGlvbnMiLCAicmVzcG9uc2VDYWxsYmFjayIsICJzZWxmIiwgInJlc3BvbnNlIiwgImNhdXNlIiwgImRlc3Ryb3lSZXF1ZXN0IiwgImRhdGEiLCAiZW5jb2RpbmciLCAiY2FsbGJhY2siLCAiaXNTdHJpbmciLCAiaXNCdWZmZXIiLCAiaXNGdW5jdGlvbiIsICJjdXJyZW50UmVxdWVzdCIsICJuYW1lIiwgInZhbHVlIiwgIm1zZWNzIiwgImRlc3Ryb3lPblRpbWVvdXQiLCAic29ja2V0IiwgInN0YXJ0VGltZXIiLCAiY2xlYXJUaW1lciIsICJtZXRob2QiLCAiYSIsICJiIiwgInByb3BlcnR5IiwgInNlYXJjaFBvcyIsICJwcm90b2NvbCIsICJuYXRpdmVQcm90b2NvbCIsICJzY2hlbWUiLCAicmVxdWVzdCIsICJpIiwgImJ1ZmZlcnMiLCAid3JpdGVOZXh0IiwgImJ1ZmZlciIsICJzdGF0dXNDb2RlIiwgImxvY2F0aW9uIiwgInJlcXVlc3RIZWFkZXJzIiwgImJlZm9yZVJlZGlyZWN0IiwgInJlbW92ZU1hdGNoaW5nSGVhZGVycyIsICJjdXJyZW50SG9zdEhlYWRlciIsICJjdXJyZW50VXJsUGFydHMiLCAicGFyc2VVcmwiLCAiY3VycmVudEhvc3QiLCAiY3VycmVudFVybCIsICJyZWRpcmVjdFVybCIsICJyZXNvbHZlVXJsIiwgInNwcmVhZFVybE9iamVjdCIsICJpc1N1YmRvbWFpbiIsICJyZXNwb25zZURldGFpbHMiLCAicmVxdWVzdERldGFpbHMiLCAid3JhcCIsICJwcm90b2NvbHMiLCAibmF0aXZlUHJvdG9jb2xzIiwgIndyYXBwZWRQcm90b2NvbCIsICJpbnB1dCIsICJpc1VSTCIsICJ2YWxpZGF0ZVVybCIsICJnZXQiLCAid3JhcHBlZFJlcXVlc3QiLCAicGFyc2VkIiwgInJlbGF0aXZlIiwgImJhc2UiLCAidXJsT2JqZWN0IiwgInRhcmdldCIsICJzcHJlYWQiLCAia2V5IiwgInJlZ2V4IiwgImhlYWRlcnMiLCAibGFzdFZhbHVlIiwgImhlYWRlciIsICJjb2RlIiwgIm1lc3NhZ2UiLCAiYmFzZUNsYXNzIiwgIkN1c3RvbUVycm9yIiwgInByb3BlcnRpZXMiLCAic3ViZG9tYWluIiwgImRvbWFpbiIsICJkb3QiLCAiZnNfMSIsICJkZWJ1Z18xIiwgIl9faW1wb3J0RGVmYXVsdCIsICJsb2ciLCAiY2hlY2siLCAicGF0aCIsICJpc0ZpbGUiLCAiaXNEaXJlY3RvcnkiLCAic3RhdCIsICJlIiwgImV4aXN0cyIsICJ0eXBlIiwgImV4cG9ydHMiLCAiX19leHBvcnQiLCAiZGVmZXJyZWQiLCAiZG9uZSIsICJmYWlsIiwgInN0YXR1cyIsICJfZG9uZSIsICJfZmFpbCIsICJyZXN1bHQiLCAiZXJyb3IiLCAiZXhwb3J0cyIsICJyZXF1aXJlX3dpbmRvd3MiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJpc2V4ZSIsICJzeW5jIiwgImZzIiwgImNoZWNrUGF0aEV4dCIsICJwYXRoIiwgIm9wdGlvbnMiLCAicGF0aGV4dCIsICJpIiwgInAiLCAiY2hlY2tTdGF0IiwgInN0YXQiLCAiY2IiLCAiZXIiLCAicmVxdWlyZV9tb2RlIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiaXNleGUiLCAic3luYyIsICJmcyIsICJwYXRoIiwgIm9wdGlvbnMiLCAiY2IiLCAiZXIiLCAic3RhdCIsICJjaGVja1N0YXQiLCAiY2hlY2tNb2RlIiwgIm1vZCIsICJ1aWQiLCAiZ2lkIiwgIm15VWlkIiwgIm15R2lkIiwgInUiLCAiZyIsICJvIiwgInVnIiwgInJldCIsICJyZXF1aXJlX2lzZXhlIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiZnMiLCAiY29yZSIsICJpc2V4ZSIsICJzeW5jIiwgInBhdGgiLCAib3B0aW9ucyIsICJjYiIsICJyZXNvbHZlIiwgInJlamVjdCIsICJlciIsICJpcyIsICJyZXF1aXJlX3doaWNoIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiaXNXaW5kb3dzIiwgInBhdGgiLCAiQ09MT04iLCAiaXNleGUiLCAiZ2V0Tm90Rm91bmRFcnJvciIsICJjbWQiLCAiZ2V0UGF0aEluZm8iLCAib3B0IiwgImNvbG9uIiwgInBhdGhFbnYiLCAicGF0aEV4dEV4ZSIsICJwYXRoRXh0IiwgIndoaWNoIiwgImNiIiwgImZvdW5kIiwgInN0ZXAiLCAiaSIsICJyZXNvbHZlIiwgInJlamVjdCIsICJwcFJhdyIsICJwYXRoUGFydCIsICJwQ21kIiwgInAiLCAic3ViU3RlcCIsICJpaSIsICJleHQiLCAiZXIiLCAiaXMiLCAicmVzIiwgIndoaWNoU3luYyIsICJqIiwgImN1ciIsICJyZXF1aXJlX2lnbm9yZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIm1ha2VBcnJheSIsICJzdWJqZWN0IiwgIkVNUFRZIiwgIlNQQUNFIiwgIkVTQ0FQRSIsICJSRUdFWF9URVNUX0JMQU5LX0xJTkUiLCAiUkVHRVhfSU5WQUxJRF9UUkFJTElOR19CQUNLU0xBU0giLCAiUkVHRVhfUkVQTEFDRV9MRUFESU5HX0VYQ0FQRURfRVhDTEFNQVRJT04iLCAiUkVHRVhfUkVQTEFDRV9MRUFESU5HX0VYQ0FQRURfSEFTSCIsICJSRUdFWF9TUExJVEFMTF9DUkxGIiwgIlJFR0VYX1RFU1RfSU5WQUxJRF9QQVRIIiwgIlNMQVNIIiwgIlRNUF9LRVlfSUdOT1JFIiwgIktFWV9JR05PUkUiLCAiZGVmaW5lIiwgIm9iamVjdCIsICJrZXkiLCAidmFsdWUiLCAiUkVHRVhfUkVHRVhQX1JBTkdFIiwgIlJFVFVSTl9GQUxTRSIsICJzYW5pdGl6ZVJhbmdlIiwgInJhbmdlIiwgIm1hdGNoIiwgImZyb20iLCAidG8iLCAiY2xlYW5SYW5nZUJhY2tTbGFzaCIsICJzbGFzaGVzIiwgImxlbmd0aCIsICJSRVBMQUNFUlMiLCAiXyIsICJtMSIsICJtMiIsICJpbmRleCIsICJzdHIiLCAicDEiLCAicDIiLCAidW5lc2NhcGVkIiwgImxlYWRFc2NhcGUiLCAiZW5kRXNjYXBlIiwgImNsb3NlIiwgInJlZ2V4Q2FjaGUiLCAibWFrZVJlZ2V4IiwgInBhdHRlcm4iLCAiaWdub3JlQ2FzZSIsICJzb3VyY2UiLCAicHJldiIsICJtYXRjaGVyIiwgInJlcGxhY2VyIiwgImlzU3RyaW5nIiwgImNoZWNrUGF0dGVybiIsICJzcGxpdFBhdHRlcm4iLCAiSWdub3JlUnVsZSIsICJvcmlnaW4iLCAibmVnYXRpdmUiLCAicmVnZXgiLCAiY3JlYXRlUnVsZSIsICJ0aHJvd0Vycm9yIiwgIm1lc3NhZ2UiLCAiQ3RvciIsICJjaGVja1BhdGgiLCAicGF0aCIsICJvcmlnaW5hbFBhdGgiLCAiZG9UaHJvdyIsICJpc05vdFJlbGF0aXZlIiwgInAiLCAiSWdub3JlIiwgImlnbm9yZWNhc2UiLCAiYWxsb3dSZWxhdGl2ZVBhdGhzIiwgInJ1bGUiLCAiY2hlY2tVbmlnbm9yZWQiLCAiaWdub3JlZCIsICJ1bmlnbm9yZWQiLCAiY2FjaGUiLCAic2xpY2VzIiwgInBhcmVudCIsICJwYXRocyIsICJmYWN0b3J5IiwgIm9wdGlvbnMiLCAiaXNQYXRoVmFsaWQiLCAibWFrZVBvc2l4IiwgIlJFR0lYX0lTX1dJTkRPV1NfUEFUSF9BQlNPTFVURSIsICJyZXF1aXJlX2RlZmF1bHRzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJyZXF1aXJlX1V0aWxpdHkiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJhc3NpZ24iLCAiZ2V0VmFsdWUiLCAiaXNBcnJheSIsICJpc0VtcHR5IiwgImlzRnVuY3Rpb24iLCAiaXNPYmplY3QiLCAiaXNQbGFpbk9iamVjdCIsICJzbGljZSIsICJoYXNQcm9wIiwgImkiLCAia2V5IiwgImxlbiIsICJzb3VyY2UiLCAic291cmNlcyIsICJ0YXJnZXQiLCAidmFsIiwgInJlZiIsICJjdG9yIiwgInByb3RvIiwgIm9iaiIsICJyZXF1aXJlX1hNTERPTUltcGxlbWVudGF0aW9uIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiWE1MRE9NSW1wbGVtZW50YXRpb24iLCAiZmVhdHVyZSIsICJ2ZXJzaW9uIiwgInF1YWxpZmllZE5hbWUiLCAicHVibGljSWQiLCAic3lzdGVtSWQiLCAibmFtZXNwYWNlVVJJIiwgImRvY3R5cGUiLCAidGl0bGUiLCAicmVxdWlyZV9YTUxET01FcnJvckhhbmRsZXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJYTUxET01FcnJvckhhbmRsZXIiLCAiZXJyb3IiLCAicmVxdWlyZV9YTUxET01TdHJpbmdMaXN0IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiWE1MRE9NU3RyaW5nTGlzdCIsICJhcnIiLCAiaW5kZXgiLCAic3RyIiwgInJlcXVpcmVfWE1MRE9NQ29uZmlndXJhdGlvbiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIlhNTERPTUNvbmZpZ3VyYXRpb24iLCAiWE1MRE9NRXJyb3JIYW5kbGVyIiwgIlhNTERPTVN0cmluZ0xpc3QiLCAiY2xvbmVkU2VsZiIsICJuYW1lIiwgInZhbHVlIiwgInJlcXVpcmVfTm9kZVR5cGUiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJyZXF1aXJlX1hNTEF0dHJpYnV0ZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIk5vZGVUeXBlIiwgIlhNTEF0dHJpYnV0ZSIsICJYTUxOb2RlIiwgInBhcmVudCIsICJuYW1lIiwgInZhbHVlIiwgIm9wdGlvbnMiLCAibm9kZSIsICJyZXF1aXJlX1hNTE5hbWVkTm9kZU1hcCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIlhNTE5hbWVkTm9kZU1hcCIsICJub2RlcyIsICJuYW1lIiwgIm5vZGUiLCAib2xkTm9kZSIsICJpbmRleCIsICJuYW1lc3BhY2VVUkkiLCAibG9jYWxOYW1lIiwgInJlcXVpcmVfWE1MRWxlbWVudCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIk5vZGVUeXBlIiwgIlhNTEF0dHJpYnV0ZSIsICJYTUxFbGVtZW50IiwgIlhNTE5hbWVkTm9kZU1hcCIsICJYTUxOb2RlIiwgImdldFZhbHVlIiwgImlzRnVuY3Rpb24iLCAiaXNPYmplY3QiLCAicmVmIiwgImV4dGVuZCIsICJjaGlsZCIsICJwYXJlbnQiLCAia2V5IiwgImhhc1Byb3AiLCAiY3RvciIsICJzdXBlckNsYXNzIiwgIm5hbWUiLCAiYXR0cmlidXRlcyIsICJqIiwgImxlbiIsICJyZWYxIiwgImF0dCIsICJhdHROYW1lIiwgImNsb25lZFNlbGYiLCAiY2xvbmVkQ2hpbGQiLCAidmFsdWUiLCAiYXR0VmFsdWUiLCAib3B0aW9ucyIsICJuZXdBdHRyIiwgIm9sZEF0dHIiLCAibmFtZXNwYWNlVVJJIiwgImxvY2FsTmFtZSIsICJxdWFsaWZpZWROYW1lIiwgImlzSWQiLCAiaWRBdHRyIiwgInRhZ25hbWUiLCAiY2xhc3NOYW1lcyIsICJub2RlIiwgImkiLCAicmVxdWlyZV9YTUxDaGFyYWN0ZXJEYXRhIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiWE1MQ2hhcmFjdGVyRGF0YSIsICJYTUxOb2RlIiwgImV4dGVuZCIsICJjaGlsZCIsICJwYXJlbnQiLCAia2V5IiwgImhhc1Byb3AiLCAiY3RvciIsICJzdXBlckNsYXNzIiwgInZhbHVlIiwgIm9mZnNldCIsICJjb3VudCIsICJhcmciLCAibm9kZSIsICJyZXF1aXJlX1hNTENEYXRhIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiTm9kZVR5cGUiLCAiWE1MQ0RhdGEiLCAiWE1MQ2hhcmFjdGVyRGF0YSIsICJleHRlbmQiLCAiY2hpbGQiLCAicGFyZW50IiwgImtleSIsICJoYXNQcm9wIiwgImN0b3IiLCAic3VwZXJDbGFzcyIsICJ0ZXh0IiwgIm9wdGlvbnMiLCAicmVxdWlyZV9YTUxDb21tZW50IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiTm9kZVR5cGUiLCAiWE1MQ2hhcmFjdGVyRGF0YSIsICJYTUxDb21tZW50IiwgImV4dGVuZCIsICJjaGlsZCIsICJwYXJlbnQiLCAia2V5IiwgImhhc1Byb3AiLCAiY3RvciIsICJzdXBlckNsYXNzIiwgInRleHQiLCAib3B0aW9ucyIsICJyZXF1aXJlX1hNTERlY2xhcmF0aW9uIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiTm9kZVR5cGUiLCAiWE1MRGVjbGFyYXRpb24iLCAiWE1MTm9kZSIsICJpc09iamVjdCIsICJleHRlbmQiLCAiY2hpbGQiLCAicGFyZW50IiwgImtleSIsICJoYXNQcm9wIiwgImN0b3IiLCAic3VwZXJDbGFzcyIsICJ2ZXJzaW9uIiwgImVuY29kaW5nIiwgInN0YW5kYWxvbmUiLCAicmVmIiwgIm9wdGlvbnMiLCAicmVxdWlyZV9YTUxEVERBdHRMaXN0IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiTm9kZVR5cGUiLCAiWE1MRFREQXR0TGlzdCIsICJYTUxOb2RlIiwgImV4dGVuZCIsICJjaGlsZCIsICJwYXJlbnQiLCAia2V5IiwgImhhc1Byb3AiLCAiY3RvciIsICJzdXBlckNsYXNzIiwgImVsZW1lbnROYW1lIiwgImF0dHJpYnV0ZU5hbWUiLCAiYXR0cmlidXRlVHlwZSIsICJkZWZhdWx0VmFsdWVUeXBlIiwgImRlZmF1bHRWYWx1ZSIsICJvcHRpb25zIiwgInJlcXVpcmVfWE1MRFRERW50aXR5IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiTm9kZVR5cGUiLCAiWE1MRFRERW50aXR5IiwgIlhNTE5vZGUiLCAiaXNPYmplY3QiLCAiZXh0ZW5kIiwgImNoaWxkIiwgInBhcmVudCIsICJrZXkiLCAiaGFzUHJvcCIsICJjdG9yIiwgInN1cGVyQ2xhc3MiLCAicGUiLCAibmFtZSIsICJ2YWx1ZSIsICJvcHRpb25zIiwgInJlcXVpcmVfWE1MRFRERWxlbWVudCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIk5vZGVUeXBlIiwgIlhNTERUREVsZW1lbnQiLCAiWE1MTm9kZSIsICJleHRlbmQiLCAiY2hpbGQiLCAicGFyZW50IiwgImtleSIsICJoYXNQcm9wIiwgImN0b3IiLCAic3VwZXJDbGFzcyIsICJuYW1lIiwgInZhbHVlIiwgIm9wdGlvbnMiLCAicmVxdWlyZV9YTUxEVEROb3RhdGlvbiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIk5vZGVUeXBlIiwgIlhNTERURE5vdGF0aW9uIiwgIlhNTE5vZGUiLCAiZXh0ZW5kIiwgImNoaWxkIiwgInBhcmVudCIsICJrZXkiLCAiaGFzUHJvcCIsICJjdG9yIiwgInN1cGVyQ2xhc3MiLCAibmFtZSIsICJ2YWx1ZSIsICJvcHRpb25zIiwgInJlcXVpcmVfWE1MRG9jVHlwZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIk5vZGVUeXBlIiwgIlhNTERUREF0dExpc3QiLCAiWE1MRFRERWxlbWVudCIsICJYTUxEVERFbnRpdHkiLCAiWE1MRFRETm90YXRpb24iLCAiWE1MRG9jVHlwZSIsICJYTUxOYW1lZE5vZGVNYXAiLCAiWE1MTm9kZSIsICJpc09iamVjdCIsICJleHRlbmQiLCAiY2hpbGQiLCAicGFyZW50IiwgImtleSIsICJoYXNQcm9wIiwgImN0b3IiLCAic3VwZXJDbGFzcyIsICJwdWJJRCIsICJzeXNJRCIsICJpIiwgImxlbiIsICJyZWYiLCAicmVmMSIsICJyZWYyIiwgIm5vZGVzIiwgIm5hbWUiLCAidmFsdWUiLCAiZWxlbWVudE5hbWUiLCAiYXR0cmlidXRlTmFtZSIsICJhdHRyaWJ1dGVUeXBlIiwgImRlZmF1bHRWYWx1ZVR5cGUiLCAiZGVmYXVsdFZhbHVlIiwgIm9wdGlvbnMiLCAibm9kZSIsICJyZXF1aXJlX1hNTFJhdyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIk5vZGVUeXBlIiwgIlhNTE5vZGUiLCAiWE1MUmF3IiwgImV4dGVuZCIsICJjaGlsZCIsICJwYXJlbnQiLCAia2V5IiwgImhhc1Byb3AiLCAiY3RvciIsICJzdXBlckNsYXNzIiwgInRleHQiLCAib3B0aW9ucyIsICJyZXF1aXJlX1hNTFRleHQiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJOb2RlVHlwZSIsICJYTUxDaGFyYWN0ZXJEYXRhIiwgIlhNTFRleHQiLCAiZXh0ZW5kIiwgImNoaWxkIiwgInBhcmVudCIsICJrZXkiLCAiaGFzUHJvcCIsICJjdG9yIiwgInN1cGVyQ2xhc3MiLCAidGV4dCIsICJuZXh0IiwgInByZXYiLCAic3RyIiwgIm9wdGlvbnMiLCAib2Zmc2V0IiwgImNvbnRlbnQiLCAicmVxdWlyZV9YTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJOb2RlVHlwZSIsICJYTUxDaGFyYWN0ZXJEYXRhIiwgIlhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbiIsICJleHRlbmQiLCAiY2hpbGQiLCAicGFyZW50IiwgImtleSIsICJoYXNQcm9wIiwgImN0b3IiLCAic3VwZXJDbGFzcyIsICJ0YXJnZXQiLCAidmFsdWUiLCAib3B0aW9ucyIsICJub2RlIiwgInJlcXVpcmVfWE1MRHVtbXkiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJOb2RlVHlwZSIsICJYTUxEdW1teSIsICJYTUxOb2RlIiwgImV4dGVuZCIsICJjaGlsZCIsICJwYXJlbnQiLCAia2V5IiwgImhhc1Byb3AiLCAiY3RvciIsICJzdXBlckNsYXNzIiwgIm9wdGlvbnMiLCAicmVxdWlyZV9YTUxOb2RlTGlzdCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIlhNTE5vZGVMaXN0IiwgIm5vZGVzIiwgImluZGV4IiwgInJlcXVpcmVfRG9jdW1lbnRQb3NpdGlvbiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInJlcXVpcmVfWE1MTm9kZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIkRvY3VtZW50UG9zaXRpb24iLCAiTm9kZVR5cGUiLCAiWE1MQ0RhdGEiLCAiWE1MQ29tbWVudCIsICJYTUxEZWNsYXJhdGlvbiIsICJYTUxEb2NUeXBlIiwgIlhNTER1bW15IiwgIlhNTEVsZW1lbnQiLCAiWE1MTmFtZWROb2RlTWFwIiwgIlhNTE5vZGUiLCAiWE1MTm9kZUxpc3QiLCAiWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uIiwgIlhNTFJhdyIsICJYTUxUZXh0IiwgImdldFZhbHVlIiwgImlzRW1wdHkiLCAiaXNGdW5jdGlvbiIsICJpc09iamVjdCIsICJyZWYxIiwgImhhc1Byb3AiLCAicGFyZW50MSIsICJpIiwgImNoaWxkIiwgImoiLCAibGVuIiwgInJlZjIiLCAic3RyIiwgInZhbHVlIiwgInBhcmVudCIsICJyZXN1bHRzIiwgIm5hbWUiLCAiYXR0cmlidXRlcyIsICJ0ZXh0IiwgImNoaWxkTm9kZSIsICJpdGVtIiwgImsiLCAia2V5IiwgImxhc3RDaGlsZCIsICJsZW4xIiwgInJlZjMiLCAidmFsIiwgIm5ld0NoaWxkIiwgInJlZkNoaWxkIiwgInJlbW92ZWQiLCAidGFyZ2V0IiwgImluc1RhcmdldCIsICJpbnNWYWx1ZSIsICJpbnN0cnVjdGlvbiIsICJ2ZXJzaW9uIiwgImVuY29kaW5nIiwgInN0YW5kYWxvbmUiLCAiZG9jIiwgInhtbGRlYyIsICJwdWJJRCIsICJzeXNJRCIsICJkb2N0eXBlIiwgIm5vZGUiLCAib3B0aW9ucyIsICJjbG9uZWRSb290IiwgIm9sZENoaWxkIiwgImRlZXAiLCAiZmVhdHVyZSIsICJvdGhlciIsICJyZWYiLCAicmVzIiwgIm5hbWVzcGFjZVVSSSIsICJwcmVmaXgiLCAiZGF0YSIsICJoYW5kbGVyIiwgImlzRGVzY2VuZGFudENoaWxkIiwgIm5vZGVQb3MiLCAidGhpc1BvcyIsICJmb3VuZCIsICJwb3MiLCAiZnVuYyIsICJyZXF1aXJlX1hNTFN0cmluZ2lmaWVyIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiWE1MU3RyaW5naWZpZXIiLCAiYmluZCIsICJmbiIsICJtZSIsICJoYXNQcm9wIiwgIm9wdGlvbnMiLCAia2V5IiwgInJlZiIsICJ2YWx1ZSIsICJ2YWwiLCAic3RyIiwgInJlZ2V4IiwgInJlcyIsICJhbXByZWdleCIsICJyZXF1aXJlX1dyaXRlclN0YXRlIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVxdWlyZV9YTUxXcml0ZXJCYXNlIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiTm9kZVR5cGUiLCAiV3JpdGVyU3RhdGUiLCAiWE1MQ0RhdGEiLCAiWE1MQ29tbWVudCIsICJYTUxEVERBdHRMaXN0IiwgIlhNTERUREVsZW1lbnQiLCAiWE1MRFRERW50aXR5IiwgIlhNTERURE5vdGF0aW9uIiwgIlhNTERlY2xhcmF0aW9uIiwgIlhNTERvY1R5cGUiLCAiWE1MRHVtbXkiLCAiWE1MRWxlbWVudCIsICJYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iLCAiWE1MUmF3IiwgIlhNTFRleHQiLCAiWE1MV3JpdGVyQmFzZSIsICJhc3NpZ24iLCAiaGFzUHJvcCIsICJvcHRpb25zIiwgImtleSIsICJyZWYiLCAidmFsdWUiLCAiZmlsdGVyZWRPcHRpb25zIiwgInJlZjEiLCAicmVmMiIsICJyZWYzIiwgInJlZjQiLCAicmVmNSIsICJyZWY2IiwgIm5vZGUiLCAibGV2ZWwiLCAiaW5kZW50TGV2ZWwiLCAiYXR0IiwgInIiLCAiY2hpbGQiLCAiaSIsICJsZW4iLCAiY2hpbGROb2RlQ291bnQiLCAiZmlyc3RDaGlsZE5vZGUiLCAiaiIsICJsZW4xIiwgIm5hbWUiLCAicHJldHR5U3VwcHJlc3NlZCIsICJlIiwgInJlcXVpcmVfWE1MU3RyaW5nV3JpdGVyIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiWE1MU3RyaW5nV3JpdGVyIiwgIlhNTFdyaXRlckJhc2UiLCAiZXh0ZW5kIiwgImNoaWxkIiwgInBhcmVudCIsICJrZXkiLCAiaGFzUHJvcCIsICJjdG9yIiwgInN1cGVyQ2xhc3MiLCAib3B0aW9ucyIsICJkb2MiLCAiaSIsICJsZW4iLCAiciIsICJyZWYiLCAicmVxdWlyZV9YTUxEb2N1bWVudCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIk5vZGVUeXBlIiwgIlhNTERPTUNvbmZpZ3VyYXRpb24iLCAiWE1MRE9NSW1wbGVtZW50YXRpb24iLCAiWE1MRG9jdW1lbnQiLCAiWE1MTm9kZSIsICJYTUxTdHJpbmdXcml0ZXIiLCAiWE1MU3RyaW5naWZpZXIiLCAiaXNQbGFpbk9iamVjdCIsICJleHRlbmQiLCAiY2hpbGQiLCAicGFyZW50IiwgImtleSIsICJoYXNQcm9wIiwgImN0b3IiLCAic3VwZXJDbGFzcyIsICJvcHRpb25zIiwgImkiLCAibGVuIiwgInJlZiIsICJ3cml0ZXIiLCAid3JpdGVyT3B0aW9ucyIsICJ0YWdOYW1lIiwgImRhdGEiLCAidGFyZ2V0IiwgIm5hbWUiLCAidGFnbmFtZSIsICJpbXBvcnRlZE5vZGUiLCAiZGVlcCIsICJuYW1lc3BhY2VVUkkiLCAicXVhbGlmaWVkTmFtZSIsICJsb2NhbE5hbWUiLCAiZWxlbWVudElkIiwgInNvdXJjZSIsICJub2RlIiwgImNsYXNzTmFtZXMiLCAiZXZlbnRJbnRlcmZhY2UiLCAicm9vdCIsICJ3aGF0VG9TaG93IiwgImZpbHRlciIsICJyZXF1aXJlX1hNTERvY3VtZW50Q0IiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJOb2RlVHlwZSIsICJXcml0ZXJTdGF0ZSIsICJYTUxBdHRyaWJ1dGUiLCAiWE1MQ0RhdGEiLCAiWE1MQ29tbWVudCIsICJYTUxEVERBdHRMaXN0IiwgIlhNTERUREVsZW1lbnQiLCAiWE1MRFRERW50aXR5IiwgIlhNTERURE5vdGF0aW9uIiwgIlhNTERlY2xhcmF0aW9uIiwgIlhNTERvY1R5cGUiLCAiWE1MRG9jdW1lbnQiLCAiWE1MRG9jdW1lbnRDQiIsICJYTUxFbGVtZW50IiwgIlhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbiIsICJYTUxSYXciLCAiWE1MU3RyaW5nV3JpdGVyIiwgIlhNTFN0cmluZ2lmaWVyIiwgIlhNTFRleHQiLCAiZ2V0VmFsdWUiLCAiaXNGdW5jdGlvbiIsICJpc09iamVjdCIsICJpc1BsYWluT2JqZWN0IiwgInJlZiIsICJoYXNQcm9wIiwgIm9wdGlvbnMiLCAib25EYXRhIiwgIm9uRW5kIiwgIndyaXRlck9wdGlvbnMiLCAibm9kZSIsICJhdHQiLCAiYXR0TmFtZSIsICJhdHRyaWJ1dGVzIiwgImNoaWxkIiwgImkiLCAibGVuIiwgInJlZjEiLCAicmVmMiIsICJuYW1lIiwgInRleHQiLCAib2xkVmFsaWRhdGlvbkZsYWciLCAicm9vdCIsICJ2YWx1ZSIsICJhdHRWYWx1ZSIsICJ0YXJnZXQiLCAiaW5zVGFyZ2V0IiwgImluc1ZhbHVlIiwgInZlcnNpb24iLCAiZW5jb2RpbmciLCAic3RhbmRhbG9uZSIsICJwdWJJRCIsICJzeXNJRCIsICJlbGVtZW50TmFtZSIsICJhdHRyaWJ1dGVOYW1lIiwgImF0dHJpYnV0ZVR5cGUiLCAiZGVmYXVsdFZhbHVlVHlwZSIsICJkZWZhdWx0VmFsdWUiLCAiY2h1bmsiLCAibGV2ZWwiLCAicmVxdWlyZV9YTUxTdHJlYW1Xcml0ZXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJOb2RlVHlwZSIsICJXcml0ZXJTdGF0ZSIsICJYTUxTdHJlYW1Xcml0ZXIiLCAiWE1MV3JpdGVyQmFzZSIsICJleHRlbmQiLCAiY2hpbGQiLCAicGFyZW50IiwgImtleSIsICJoYXNQcm9wIiwgImN0b3IiLCAic3VwZXJDbGFzcyIsICJzdHJlYW0iLCAib3B0aW9ucyIsICJub2RlIiwgImxldmVsIiwgImRvYyIsICJpIiwgImoiLCAiayIsICJsZW4iLCAibGVuMSIsICJyZWYiLCAicmVmMSIsICJyZXN1bHRzIiwgImF0dCIsICJjaGlsZE5vZGVDb3VudCIsICJmaXJzdENoaWxkTm9kZSIsICJuYW1lIiwgInByZXR0eVN1cHByZXNzZWQiLCAiZSIsICJyZXF1aXJlX2xpYiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIk5vZGVUeXBlIiwgIldyaXRlclN0YXRlIiwgIlhNTERPTUltcGxlbWVudGF0aW9uIiwgIlhNTERvY3VtZW50IiwgIlhNTERvY3VtZW50Q0IiLCAiWE1MU3RyZWFtV3JpdGVyIiwgIlhNTFN0cmluZ1dyaXRlciIsICJhc3NpZ24iLCAiaXNGdW5jdGlvbiIsICJyZWYiLCAibmFtZSIsICJ4bWxkZWMiLCAiZG9jdHlwZSIsICJvcHRpb25zIiwgImRvYyIsICJyb290IiwgIm9uRGF0YSIsICJvbkVuZCIsICJyZWYxIiwgInN0cmVhbSIsICJyZXF1aXJlX2J1aWxkZXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImJ1aWxkZXIiLCAiZGVmYXVsdHMiLCAiZXNjYXBlQ0RBVEEiLCAicmVxdWlyZXNDREFUQSIsICJ3cmFwQ0RBVEEiLCAiaGFzUHJvcCIsICJlbnRyeSIsICJCdWlsZGVyIiwgIm9wdHMiLCAia2V5IiwgInJlZiIsICJ2YWx1ZSIsICJyb290T2JqIiwgImF0dHJrZXkiLCAiY2hhcmtleSIsICJyZW5kZXIiLCAicm9vdEVsZW1lbnQiLCAicm9vdE5hbWUiLCAiX3RoaXMiLCAiZWxlbWVudCIsICJvYmoiLCAiYXR0ciIsICJjaGlsZCIsICJpbmRleCIsICJyZXF1aXJlX3NheCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAic2F4IiwgInN0cmljdCIsICJvcHQiLCAiU0FYUGFyc2VyIiwgIlNBWFN0cmVhbSIsICJjcmVhdGVTdHJlYW0iLCAiYnVmZmVycyIsICJwYXJzZXIiLCAiY2xlYXJCdWZmZXJzIiwgIlMiLCAicm9vdE5TIiwgImVtaXQiLCAibyIsICJGIiwgIm5ld2YiLCAiYSIsICJpIiwgImNoZWNrQnVmZmVyTGVuZ3RoIiwgIm1heEFsbG93ZWQiLCAibWF4QWN0dWFsIiwgImwiLCAibGVuIiwgImNsb3NlVGV4dCIsICJlbWl0Tm9kZSIsICJlcnJvciIsICJtIiwgImZsdXNoQnVmZmVycyIsICJlbmQiLCAid3JpdGUiLCAiU3RyZWFtIiwgInN0cmVhbVdyYXBzIiwgImV2IiwgIm1lIiwgImVyIiwgImgiLCAiZGF0YSIsICJTRCIsICJjaHVuayIsICJoYW5kbGVyIiwgImFyZ3MiLCAiQ0RBVEEiLCAiRE9DVFlQRSIsICJYTUxfTkFNRVNQQUNFIiwgIlhNTE5TX05BTUVTUEFDRSIsICJuYW1lU3RhcnQiLCAibmFtZUJvZHkiLCAiZW50aXR5U3RhcnQiLCAiZW50aXR5Qm9keSIsICJpc1doaXRlc3BhY2UiLCAiYyIsICJpc1F1b3RlIiwgImlzQXR0cmliRW5kIiwgImlzTWF0Y2giLCAicmVnZXgiLCAibm90TWF0Y2giLCAia2V5IiwgImUiLCAicyIsICJldmVudCIsICJub2RlVHlwZSIsICJ0ZXh0b3B0cyIsICJ0ZXh0IiwgInN0cmljdEZhaWwiLCAibWVzc2FnZSIsICJuZXdUYWciLCAicGFyZW50IiwgInRhZyIsICJxbmFtZSIsICJuYW1lIiwgImF0dHJpYnV0ZSIsICJxdWFsTmFtZSIsICJwcmVmaXgiLCAibG9jYWwiLCAiYXR0cmliIiwgInFuIiwgIm9wZW5UYWciLCAic2VsZkNsb3NpbmciLCAicCIsICJudiIsICJ2YWx1ZSIsICJ1cmkiLCAiY2xvc2VUYWciLCAidCIsICJ0YWdOYW1lIiwgImNsb3NlVG8iLCAiY2xvc2UiLCAieCIsICJuIiwgInBhcnNlRW50aXR5IiwgImVudGl0eSIsICJlbnRpdHlMQyIsICJudW0iLCAibnVtU3RyIiwgImJlZ2luV2hpdGVTcGFjZSIsICJjaGFyQXQiLCAicmVzdWx0IiwgInN0YXJ0aSIsICJwYWQiLCAicmV0dXJuU3RhdGUiLCAiYnVmZmVyIiwgInBhcnNlZEVudGl0eSIsICJzdHJpbmdGcm9tQ2hhckNvZGUiLCAiZmxvb3IiLCAiZnJvbUNvZGVQb2ludCIsICJNQVhfU0laRSIsICJjb2RlVW5pdHMiLCAiaGlnaFN1cnJvZ2F0ZSIsICJsb3dTdXJyb2dhdGUiLCAiaW5kZXgiLCAibGVuZ3RoIiwgImNvZGVQb2ludCIsICJyZXF1aXJlX2JvbSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAic3RyIiwgInJlcXVpcmVfcHJvY2Vzc29ycyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAicHJlZml4TWF0Y2giLCAic3RyIiwgInJlcXVpcmVfcGFyc2VyIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJib20iLCAiZGVmYXVsdHMiLCAiZGVmaW5lUHJvcGVydHkiLCAiZXZlbnRzIiwgImlzRW1wdHkiLCAicHJvY2Vzc0l0ZW0iLCAicHJvY2Vzc29ycyIsICJzYXgiLCAic2V0SW1tZWRpYXRlIiwgImJpbmQiLCAiZm4iLCAibWUiLCAiZXh0ZW5kIiwgImNoaWxkIiwgInBhcmVudCIsICJrZXkiLCAiaGFzUHJvcCIsICJjdG9yIiwgInRoaW5nIiwgIml0ZW0iLCAiaSIsICJsZW4iLCAicHJvY2VzcyIsICJvYmoiLCAidmFsdWUiLCAiZGVzY3JpcHRvciIsICJzdXBlckNsYXNzIiwgIlBhcnNlciIsICJvcHRzIiwgInJlZiIsICJjaHVuayIsICJlcnIiLCAiZXJyb3IxIiwgIm5ld1ZhbHVlIiwgImF0dHJrZXkiLCAiY2hhcmtleSIsICJvbnRleHQiLCAic3RhY2siLCAiX3RoaXMiLCAiZXJyb3IiLCAibm9kZSIsICJwcm9jZXNzZWRLZXkiLCAiY2RhdGEiLCAiZW1wdHlTdHIiLCAibm9kZU5hbWUiLCAib2JqQ2xvbmUiLCAib2xkIiwgInMiLCAieHBhdGgiLCAicmVzdWx0cyIsICJ0ZXh0IiwgImNoYXJDaGlsZCIsICJzdHIiLCAiY2IiLCAicmVzdWx0IiwgInJlc29sdmUiLCAicmVqZWN0IiwgImEiLCAiYiIsICJvcHRpb25zIiwgInBhcnNlciIsICJyZXF1aXJlX3htbDJqcyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiYnVpbGRlciIsICJkZWZhdWx0cyIsICJwYXJzZXIiLCAicHJvY2Vzc29ycyIsICJleHRlbmQiLCAiY2hpbGQiLCAicGFyZW50IiwgImtleSIsICJoYXNQcm9wIiwgImN0b3IiLCAic3VwZXJDbGFzcyIsICJWYWxpZGF0aW9uRXJyb3IiLCAibWVzc2FnZSIsICJyZXF1aXJlX3V0aWxzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJyZWdFeHBDaGFycyIsICJoYXNPd25Qcm9wZXJ0eSIsICJoYXNPd24iLCAib2JqIiwgImtleSIsICJzdHJpbmciLCAiX0VOQ09ERV9IVE1MX1JVTEVTIiwgIl9NQVRDSF9IVE1MIiwgImVuY29kZV9jaGFyIiwgImMiLCAiZXNjYXBlRnVuY1N0ciIsICJtYXJrdXAiLCAiZXNjYXBlWE1MVG9TdHJpbmciLCAidG8iLCAiZnJvbSIsICJwIiwgImxpc3QiLCAiaSIsICJ2YWwiLCAic3RyIiwgIm1hdGNoIiwgIm8iLCAicmVxdWlyZV9wYWNrYWdlIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVxdWlyZV9lanMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImZzIiwgInBhdGgiLCAidXRpbHMiLCAic2NvcGVPcHRpb25XYXJuZWQiLCAiX1ZFUlNJT05fU1RSSU5HIiwgIl9ERUZBVUxUX09QRU5fREVMSU1JVEVSIiwgIl9ERUZBVUxUX0NMT1NFX0RFTElNSVRFUiIsICJfREVGQVVMVF9ERUxJTUlURVIiLCAiX0RFRkFVTFRfTE9DQUxTX05BTUUiLCAiX05BTUUiLCAiX1JFR0VYX1NUUklORyIsICJfT1BUU19QQVNTQUJMRV9XSVRIX0RBVEEiLCAiX09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBX0VYUFJFU1MiLCAiX0JPTSIsICJfSlNfSURFTlRJRklFUiIsICJuYW1lIiwgImZpbGVuYW1lIiwgImlzRGlyIiwgImRpcm5hbWUiLCAiZXh0bmFtZSIsICJyZXNvbHZlIiwgImluY2x1ZGVQYXRoIiwgImV4dCIsICJyZXNvbHZlUGF0aHMiLCAicGF0aHMiLCAiZmlsZVBhdGgiLCAidiIsICJnZXRJbmNsdWRlUGF0aCIsICJvcHRpb25zIiwgInZpZXdzIiwgIm1hdGNoIiwgImhhbmRsZUNhY2hlIiwgInRlbXBsYXRlIiwgImZ1bmMiLCAiaGFzVGVtcGxhdGUiLCAiZmlsZUxvYWRlciIsICJ0cnlIYW5kbGVDYWNoZSIsICJkYXRhIiwgImNiIiwgInJlc3VsdCIsICJlcnIiLCAicmVqZWN0IiwgImluY2x1ZGVGaWxlIiwgIm9wdHMiLCAiaW5jbHVkZXJSZXN1bHQiLCAicmV0aHJvdyIsICJzdHIiLCAiZmxubSIsICJsaW5lbm8iLCAiZXNjIiwgImxpbmVzIiwgInN0YXJ0IiwgImVuZCIsICJjb250ZXh0IiwgImxpbmUiLCAiaSIsICJjdXJyIiwgInN0cmlwU2VtaSIsICJ0ZW1wbCIsICJUZW1wbGF0ZSIsICJkIiwgIm8iLCAiYXJncyIsICJ2aWV3T3B0cyIsICJ0ZXh0IiwgIm9wdHNQYXJhbSIsICJkZWxpbSIsICJvcGVuIiwgImNsb3NlIiwgInNyYyIsICJmbiIsICJwcmVwZW5kZWQiLCAiYXBwZW5kZWQiLCAiZXNjYXBlRm4iLCAiY3RvciIsICJzYW5pdGl6ZWRGaWxlbmFtZSIsICJkZXN0cnVjdHVyaW5nIiwgImUiLCAicmV0dXJuZWRGbiIsICJpbmNsdWRlIiwgImluY2x1ZGVEYXRhIiwgImJhc2VuYW1lIiwgInNlbGYiLCAibWF0Y2hlcyIsICJjIiwgImluZGV4IiwgImNsb3NpbmciLCAicGF0IiwgImFyciIsICJmaXJzdFBvcyIsICJuZXdMaW5lQ291bnQiLCAic3JjX2V4cG9ydHMiLCAiX19leHBvcnQiLCAicnVuIiwgIl9fdG9Db21tb25KUyIsICJpbXBvcnRfZnMiLCAiaW1wb3J0X29zIiwgImltcG9ydF9wYXRoIiwgImltcG9ydF9hZG1femlwIiwgImltcG9ydF9taW5pbWlzdCIsICJpbXBvcnRfcHJvbXB0cyIsICJlbmFibGVkIiwgImdsb2JhbFZhciIsICJzdXBwb3J0TGV2ZWwiLCAiRk9SQ0VfQ09MT1IiLCAiTk9ERV9ESVNBQkxFX0NPTE9SUyIsICJOT19DT0xPUiIsICJURVJNIiwgIkNPTE9SVEVSTSIsICJ2ZW5kb3IiLCAib3B0aW9ucyIsICJrb2xvcmlzdCIsICJzdGFydCIsICJlbmQiLCAibGV2ZWwiLCAib3BlbiIsICJjbG9zZSIsICJyZWdleCIsICJzdHIiLCAicmVzZXQiLCAia29sb3Jpc3QiLCAiYm9sZCIsICJkaW0iLCAiaXRhbGljIiwgInVuZGVybGluZSIsICJpbnZlcnNlIiwgImhpZGRlbiIsICJzdHJpa2V0aHJvdWdoIiwgImJsYWNrIiwgInJlZCIsICJncmVlbiIsICJ5ZWxsb3ciLCAiYmx1ZSIsICJtYWdlbnRhIiwgImN5YW4iLCAid2hpdGUiLCAiZ3JheSIsICJsaWdodEdyYXkiLCAibGlnaHRSZWQiLCAibGlnaHRHcmVlbiIsICJsaWdodFllbGxvdyIsICJsaWdodEJsdWUiLCAibGlnaHRNYWdlbnRhIiwgImxpZ2h0Q3lhbiIsICJiZ0JsYWNrIiwgImJnUmVkIiwgImJnR3JlZW4iLCAiYmdZZWxsb3ciLCAiYmdCbHVlIiwgImJnTWFnZW50YSIsICJiZ0N5YW4iLCAiYmdXaGl0ZSIsICJiZ0dyYXkiLCAiYmdMaWdodFJlZCIsICJiZ0xpZ2h0R3JlZW4iLCAiYmdMaWdodFllbGxvdyIsICJiZ0xpZ2h0Qmx1ZSIsICJiZ0xpZ2h0TWFnZW50YSIsICJiZ0xpZ2h0Q3lhbiIsICJiZ0xpZ2h0R3JheSIsICJiaW5kIiwgImZuIiwgInRoaXNBcmciLCAidG9TdHJpbmciLCAiZ2V0UHJvdG90eXBlT2YiLCAia2luZE9mIiwgImNhY2hlIiwgInRoaW5nIiwgInN0ciIsICJraW5kT2ZUZXN0IiwgInR5cGUiLCAidHlwZU9mVGVzdCIsICJpc0FycmF5IiwgImlzVW5kZWZpbmVkIiwgImlzQnVmZmVyIiwgInZhbCIsICJpc0Z1bmN0aW9uIiwgImlzQXJyYXlCdWZmZXIiLCAiaXNBcnJheUJ1ZmZlclZpZXciLCAicmVzdWx0IiwgImlzU3RyaW5nIiwgImlzTnVtYmVyIiwgImlzT2JqZWN0IiwgImlzQm9vbGVhbiIsICJpc1BsYWluT2JqZWN0IiwgInByb3RvdHlwZSIsICJpc0RhdGUiLCAiaXNGaWxlIiwgImlzQmxvYiIsICJpc0ZpbGVMaXN0IiwgImlzU3RyZWFtIiwgImlzRm9ybURhdGEiLCAia2luZCIsICJpc1VSTFNlYXJjaFBhcmFtcyIsICJpc1JlYWRhYmxlU3RyZWFtIiwgImlzUmVxdWVzdCIsICJpc1Jlc3BvbnNlIiwgImlzSGVhZGVycyIsICJ0cmltIiwgImZvckVhY2giLCAib2JqIiwgImZuIiwgImFsbE93bktleXMiLCAiaSIsICJsIiwgImtleXMiLCAibGVuIiwgImtleSIsICJmaW5kS2V5IiwgIl9rZXkiLCAiX2dsb2JhbCIsICJpc0NvbnRleHREZWZpbmVkIiwgImNvbnRleHQiLCAibWVyZ2UiLCAiY2FzZWxlc3MiLCAiYXNzaWduVmFsdWUiLCAidGFyZ2V0S2V5IiwgImV4dGVuZCIsICJhIiwgImIiLCAidGhpc0FyZyIsICJiaW5kIiwgInN0cmlwQk9NIiwgImNvbnRlbnQiLCAiaW5oZXJpdHMiLCAiY29uc3RydWN0b3IiLCAic3VwZXJDb25zdHJ1Y3RvciIsICJwcm9wcyIsICJkZXNjcmlwdG9ycyIsICJ0b0ZsYXRPYmplY3QiLCAic291cmNlT2JqIiwgImRlc3RPYmoiLCAiZmlsdGVyIiwgInByb3BGaWx0ZXIiLCAicHJvcCIsICJtZXJnZWQiLCAiZW5kc1dpdGgiLCAic2VhcmNoU3RyaW5nIiwgInBvc2l0aW9uIiwgImxhc3RJbmRleCIsICJ0b0FycmF5IiwgImFyciIsICJpc1R5cGVkQXJyYXkiLCAiVHlwZWRBcnJheSIsICJmb3JFYWNoRW50cnkiLCAiaXRlcmF0b3IiLCAicGFpciIsICJtYXRjaEFsbCIsICJyZWdFeHAiLCAibWF0Y2hlcyIsICJpc0hUTUxGb3JtIiwgInRvQ2FtZWxDYXNlIiwgIm0iLCAicDEiLCAicDIiLCAiaGFzT3duUHJvcGVydHkiLCAiaXNSZWdFeHAiLCAicmVkdWNlRGVzY3JpcHRvcnMiLCAicmVkdWNlciIsICJyZWR1Y2VkRGVzY3JpcHRvcnMiLCAiZGVzY3JpcHRvciIsICJuYW1lIiwgInJldCIsICJmcmVlemVNZXRob2RzIiwgInZhbHVlIiwgInRvT2JqZWN0U2V0IiwgImFycmF5T3JTdHJpbmciLCAiZGVsaW1pdGVyIiwgImRlZmluZSIsICJub29wIiwgInRvRmluaXRlTnVtYmVyIiwgImRlZmF1bHRWYWx1ZSIsICJBTFBIQSIsICJESUdJVCIsICJBTFBIQUJFVCIsICJnZW5lcmF0ZVN0cmluZyIsICJzaXplIiwgImFscGhhYmV0IiwgImxlbmd0aCIsICJpc1NwZWNDb21wbGlhbnRGb3JtIiwgInRvSlNPTk9iamVjdCIsICJzdGFjayIsICJ2aXNpdCIsICJzb3VyY2UiLCAidGFyZ2V0IiwgInJlZHVjZWRWYWx1ZSIsICJpc0FzeW5jRm4iLCAiaXNUaGVuYWJsZSIsICJ1dGlsc19kZWZhdWx0IiwgIkF4aW9zRXJyb3IiLCAibWVzc2FnZSIsICJjb2RlIiwgImNvbmZpZyIsICJyZXF1ZXN0IiwgInJlc3BvbnNlIiwgInV0aWxzX2RlZmF1bHQiLCAicHJvdG90eXBlIiwgImRlc2NyaXB0b3JzIiwgImVycm9yIiwgImN1c3RvbVByb3BzIiwgImF4aW9zRXJyb3IiLCAib2JqIiwgInByb3AiLCAiQXhpb3NFcnJvcl9kZWZhdWx0IiwgImltcG9ydF9mb3JtX2RhdGEiLCAiRm9ybURhdGFfZGVmYXVsdCIsICJGb3JtRGF0YSIsICJpc1Zpc2l0YWJsZSIsICJ0aGluZyIsICJ1dGlsc19kZWZhdWx0IiwgInJlbW92ZUJyYWNrZXRzIiwgImtleSIsICJyZW5kZXJLZXkiLCAicGF0aCIsICJkb3RzIiwgInRva2VuIiwgImkiLCAiaXNGbGF0QXJyYXkiLCAiYXJyIiwgInByZWRpY2F0ZXMiLCAicHJvcCIsICJ0b0Zvcm1EYXRhIiwgIm9iaiIsICJmb3JtRGF0YSIsICJvcHRpb25zIiwgIkZvcm1EYXRhX2RlZmF1bHQiLCAib3B0aW9uIiwgInNvdXJjZSIsICJtZXRhVG9rZW5zIiwgInZpc2l0b3IiLCAiZGVmYXVsdFZpc2l0b3IiLCAiaW5kZXhlcyIsICJ1c2VCbG9iIiwgImNvbnZlcnRWYWx1ZSIsICJ2YWx1ZSIsICJBeGlvc0Vycm9yX2RlZmF1bHQiLCAiZWwiLCAiaW5kZXgiLCAic3RhY2siLCAiZXhwb3NlZEhlbHBlcnMiLCAiYnVpbGQiLCAidG9Gb3JtRGF0YV9kZWZhdWx0IiwgImVuY29kZSIsICJzdHIiLCAiY2hhck1hcCIsICJtYXRjaCIsICJBeGlvc1VSTFNlYXJjaFBhcmFtcyIsICJwYXJhbXMiLCAib3B0aW9ucyIsICJ0b0Zvcm1EYXRhX2RlZmF1bHQiLCAicHJvdG90eXBlIiwgIm5hbWUiLCAidmFsdWUiLCAiZW5jb2RlciIsICJfZW5jb2RlIiwgInBhaXIiLCAiQXhpb3NVUkxTZWFyY2hQYXJhbXNfZGVmYXVsdCIsICJlbmNvZGUiLCAidmFsIiwgImJ1aWxkVVJMIiwgInVybCIsICJwYXJhbXMiLCAib3B0aW9ucyIsICJfZW5jb2RlIiwgInNlcmlhbGl6ZUZuIiwgInNlcmlhbGl6ZWRQYXJhbXMiLCAidXRpbHNfZGVmYXVsdCIsICJBeGlvc1VSTFNlYXJjaFBhcmFtc19kZWZhdWx0IiwgImhhc2htYXJrSW5kZXgiLCAiSW50ZXJjZXB0b3JNYW5hZ2VyIiwgImZ1bGZpbGxlZCIsICJyZWplY3RlZCIsICJvcHRpb25zIiwgImlkIiwgImZuIiwgInV0aWxzX2RlZmF1bHQiLCAiaCIsICJJbnRlcmNlcHRvck1hbmFnZXJfZGVmYXVsdCIsICJ0cmFuc2l0aW9uYWxfZGVmYXVsdCIsICJpbXBvcnRfdXJsIiwgIlVSTFNlYXJjaFBhcmFtc19kZWZhdWx0IiwgInVybCIsICJub2RlX2RlZmF1bHQiLCAiVVJMU2VhcmNoUGFyYW1zX2RlZmF1bHQiLCAiRm9ybURhdGFfZGVmYXVsdCIsICJ1dGlsc19leHBvcnRzIiwgIl9fZXhwb3J0IiwgImhhc0Jyb3dzZXJFbnYiLCAiaGFzU3RhbmRhcmRCcm93c2VyRW52IiwgImhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudiIsICJvcmlnaW4iLCAicHJvZHVjdCIsICJwbGF0Zm9ybV9kZWZhdWx0IiwgInV0aWxzX2V4cG9ydHMiLCAibm9kZV9kZWZhdWx0IiwgInRvVVJMRW5jb2RlZEZvcm0iLCAiZGF0YSIsICJvcHRpb25zIiwgInRvRm9ybURhdGFfZGVmYXVsdCIsICJwbGF0Zm9ybV9kZWZhdWx0IiwgInZhbHVlIiwgImtleSIsICJwYXRoIiwgImhlbHBlcnMiLCAidXRpbHNfZGVmYXVsdCIsICJwYXJzZVByb3BQYXRoIiwgIm5hbWUiLCAidXRpbHNfZGVmYXVsdCIsICJtYXRjaCIsICJhcnJheVRvT2JqZWN0IiwgImFyciIsICJvYmoiLCAia2V5cyIsICJpIiwgImxlbiIsICJrZXkiLCAiZm9ybURhdGFUb0pTT04iLCAiZm9ybURhdGEiLCAiYnVpbGRQYXRoIiwgInBhdGgiLCAidmFsdWUiLCAidGFyZ2V0IiwgImluZGV4IiwgImlzTnVtZXJpY0tleSIsICJpc0xhc3QiLCAiZm9ybURhdGFUb0pTT05fZGVmYXVsdCIsICJzdHJpbmdpZnlTYWZlbHkiLCAicmF3VmFsdWUiLCAicGFyc2VyIiwgImVuY29kZXIiLCAidXRpbHNfZGVmYXVsdCIsICJlIiwgImRlZmF1bHRzIiwgInRyYW5zaXRpb25hbF9kZWZhdWx0IiwgImRhdGEiLCAiaGVhZGVycyIsICJjb250ZW50VHlwZSIsICJoYXNKU09OQ29udGVudFR5cGUiLCAiaXNPYmplY3RQYXlsb2FkIiwgImZvcm1EYXRhVG9KU09OX2RlZmF1bHQiLCAiaXNGaWxlTGlzdCIsICJ0b1VSTEVuY29kZWRGb3JtIiwgIl9Gb3JtRGF0YSIsICJ0b0Zvcm1EYXRhX2RlZmF1bHQiLCAidHJhbnNpdGlvbmFsIiwgImZvcmNlZEpTT05QYXJzaW5nIiwgIkpTT05SZXF1ZXN0ZWQiLCAic3RyaWN0SlNPTlBhcnNpbmciLCAiQXhpb3NFcnJvcl9kZWZhdWx0IiwgInBsYXRmb3JtX2RlZmF1bHQiLCAic3RhdHVzIiwgIm1ldGhvZCIsICJkZWZhdWx0c19kZWZhdWx0IiwgImlnbm9yZUR1cGxpY2F0ZU9mIiwgInV0aWxzX2RlZmF1bHQiLCAicGFyc2VIZWFkZXJzX2RlZmF1bHQiLCAicmF3SGVhZGVycyIsICJwYXJzZWQiLCAia2V5IiwgInZhbCIsICJpIiwgImxpbmUiLCAiJGludGVybmFscyIsICJub3JtYWxpemVIZWFkZXIiLCAiaGVhZGVyIiwgIm5vcm1hbGl6ZVZhbHVlIiwgInZhbHVlIiwgInV0aWxzX2RlZmF1bHQiLCAicGFyc2VUb2tlbnMiLCAic3RyIiwgInRva2VucyIsICJ0b2tlbnNSRSIsICJtYXRjaCIsICJpc1ZhbGlkSGVhZGVyTmFtZSIsICJtYXRjaEhlYWRlclZhbHVlIiwgImNvbnRleHQiLCAiZmlsdGVyIiwgImlzSGVhZGVyTmFtZUZpbHRlciIsICJmb3JtYXRIZWFkZXIiLCAidyIsICJjaGFyIiwgImJ1aWxkQWNjZXNzb3JzIiwgIm9iaiIsICJhY2Nlc3Nvck5hbWUiLCAibWV0aG9kTmFtZSIsICJhcmcxIiwgImFyZzIiLCAiYXJnMyIsICJBeGlvc0hlYWRlcnMiLCAiaGVhZGVycyIsICJ2YWx1ZU9yUmV3cml0ZSIsICJyZXdyaXRlIiwgInNlbGYiLCAic2V0SGVhZGVyIiwgIl92YWx1ZSIsICJfaGVhZGVyIiwgIl9yZXdyaXRlIiwgImxIZWFkZXIiLCAia2V5IiwgInNldEhlYWRlcnMiLCAicGFyc2VIZWFkZXJzX2RlZmF1bHQiLCAicGFyc2VyIiwgIm1hdGNoZXIiLCAiZGVsZXRlZCIsICJkZWxldGVIZWFkZXIiLCAia2V5cyIsICJpIiwgImZvcm1hdCIsICJub3JtYWxpemVkIiwgInRhcmdldHMiLCAiYXNTdHJpbmdzIiwgInRoaW5nIiwgImZpcnN0IiwgImNvbXB1dGVkIiwgInRhcmdldCIsICJhY2Nlc3NvcnMiLCAicHJvdG90eXBlIiwgImRlZmluZUFjY2Vzc29yIiwgIm1hcHBlZCIsICJoZWFkZXJWYWx1ZSIsICJBeGlvc0hlYWRlcnNfZGVmYXVsdCIsICJ0cmFuc2Zvcm1EYXRhIiwgImZucyIsICJyZXNwb25zZSIsICJjb25maWciLCAiZGVmYXVsdHNfZGVmYXVsdCIsICJjb250ZXh0IiwgImhlYWRlcnMiLCAiQXhpb3NIZWFkZXJzX2RlZmF1bHQiLCAiZGF0YSIsICJ1dGlsc19kZWZhdWx0IiwgImZuIiwgImlzQ2FuY2VsIiwgInZhbHVlIiwgIkNhbmNlbGVkRXJyb3IiLCAibWVzc2FnZSIsICJjb25maWciLCAicmVxdWVzdCIsICJBeGlvc0Vycm9yX2RlZmF1bHQiLCAidXRpbHNfZGVmYXVsdCIsICJDYW5jZWxlZEVycm9yX2RlZmF1bHQiLCAic2V0dGxlIiwgInJlc29sdmUiLCAicmVqZWN0IiwgInJlc3BvbnNlIiwgInZhbGlkYXRlU3RhdHVzIiwgIkF4aW9zRXJyb3JfZGVmYXVsdCIsICJpc0Fic29sdXRlVVJMIiwgInVybCIsICJjb21iaW5lVVJMcyIsICJiYXNlVVJMIiwgInJlbGF0aXZlVVJMIiwgImJ1aWxkRnVsbFBhdGgiLCAiYmFzZVVSTCIsICJyZXF1ZXN0ZWRVUkwiLCAiaXNBYnNvbHV0ZVVSTCIsICJjb21iaW5lVVJMcyIsICJpbXBvcnRfcHJveHlfZnJvbV9lbnYiLCAiaW1wb3J0X2h0dHAiLCAiaW1wb3J0X2h0dHBzIiwgImltcG9ydF91dGlsIiwgImltcG9ydF9mb2xsb3dfcmVkaXJlY3RzIiwgImltcG9ydF96bGliIiwgIlZFUlNJT04iLCAicGFyc2VQcm90b2NvbCIsICJ1cmwiLCAibWF0Y2giLCAiREFUQV9VUkxfUEFUVEVSTiIsICJmcm9tRGF0YVVSSSIsICJ1cmkiLCAiYXNCbG9iIiwgIm9wdGlvbnMiLCAiX0Jsb2IiLCAicGxhdGZvcm1fZGVmYXVsdCIsICJwcm90b2NvbCIsICJwYXJzZVByb3RvY29sIiwgIm1hdGNoIiwgIkF4aW9zRXJyb3JfZGVmYXVsdCIsICJtaW1lIiwgImlzQmFzZTY0IiwgImJvZHkiLCAiYnVmZmVyIiwgImltcG9ydF9zdHJlYW0iLCAiaW1wb3J0X3N0cmVhbSIsICJ0aHJvdHRsZSIsICJmbiIsICJmcmVxIiwgInRpbWVzdGFtcCIsICJ0aHJlc2hvbGQiLCAidGltZXIiLCAiZm9yY2UiLCAibm93IiwgInRocm90dGxlX2RlZmF1bHQiLCAic3BlZWRvbWV0ZXIiLCAic2FtcGxlc0NvdW50IiwgIm1pbiIsICJieXRlcyIsICJ0aW1lc3RhbXBzIiwgImhlYWQiLCAidGFpbCIsICJmaXJzdFNhbXBsZVRTIiwgImNodW5rTGVuZ3RoIiwgIm5vdyIsICJzdGFydGVkQXQiLCAiaSIsICJieXRlc0NvdW50IiwgInBhc3NlZCIsICJzcGVlZG9tZXRlcl9kZWZhdWx0IiwgImtJbnRlcm5hbHMiLCAiQXhpb3NUcmFuc2Zvcm1TdHJlYW0iLCAic3RyZWFtIiwgIm9wdGlvbnMiLCAidXRpbHNfZGVmYXVsdCIsICJwcm9wIiwgInNvdXJjZSIsICJzZWxmIiwgImludGVybmFscyIsICJfc3BlZWRvbWV0ZXIiLCAic3BlZWRvbWV0ZXJfZGVmYXVsdCIsICJldmVudCIsICJieXRlc05vdGlmaWVkIiwgInRocm90dGxlX2RlZmF1bHQiLCAidG90YWxCeXRlcyIsICJieXRlc1RyYW5zZmVycmVkIiwgInByb2dyZXNzQnl0ZXMiLCAicmF0ZSIsICJvbkZpbmlzaCIsICJzaXplIiwgImNodW5rIiwgImVuY29kaW5nIiwgImNhbGxiYWNrIiwgIm1heFJhdGUiLCAicmVhZGFibGVIaWdoV2F0ZXJNYXJrIiwgInRpbWVXaW5kb3ciLCAiZGl2aWRlciIsICJieXRlc1RocmVzaG9sZCIsICJtaW5DaHVua1NpemUiLCAicHVzaENodW5rIiwgIl9jaHVuayIsICJfY2FsbGJhY2siLCAiYnl0ZXMiLCAidHJhbnNmb3JtQ2h1bmsiLCAiY2h1bmtTaXplIiwgImNodW5rUmVtYWluZGVyIiwgIm1heENodW5rU2l6ZSIsICJieXRlc0xlZnQiLCAicGFzc2VkIiwgIm5vdyIsICJ0cmFuc2Zvcm1OZXh0Q2h1bmsiLCAiZXJyIiwgImxlbmd0aCIsICJBeGlvc1RyYW5zZm9ybVN0cmVhbV9kZWZhdWx0IiwgImltcG9ydF9ldmVudHMiLCAiaW1wb3J0X3V0aWwiLCAiaW1wb3J0X3N0cmVhbSIsICJhc3luY0l0ZXJhdG9yIiwgInJlYWRCbG9iIiwgImJsb2IiLCAicmVhZEJsb2JfZGVmYXVsdCIsICJCT1VOREFSWV9BTFBIQUJFVCIsICJ1dGlsc19kZWZhdWx0IiwgInRleHRFbmNvZGVyIiwgIkNSTEYiLCAiQ1JMRl9CWVRFUyIsICJDUkxGX0JZVEVTX0NPVU5UIiwgIkZvcm1EYXRhUGFydCIsICJuYW1lIiwgInZhbHVlIiwgImVzY2FwZU5hbWUiLCAiaXNTdHJpbmdWYWx1ZSIsICJoZWFkZXJzIiwgInJlYWRCbG9iX2RlZmF1bHQiLCAibWF0Y2giLCAiZm9ybURhdGFUb1N0cmVhbSIsICJmb3JtIiwgImhlYWRlcnNIYW5kbGVyIiwgIm9wdGlvbnMiLCAidGFnIiwgInNpemUiLCAiYm91bmRhcnkiLCAiYm91bmRhcnlCeXRlcyIsICJmb290ZXJCeXRlcyIsICJjb250ZW50TGVuZ3RoIiwgInBhcnRzIiwgInBhcnQiLCAiY29tcHV0ZWRIZWFkZXJzIiwgImZvcm1EYXRhVG9TdHJlYW1fZGVmYXVsdCIsICJpbXBvcnRfc3RyZWFtIiwgIlpsaWJIZWFkZXJUcmFuc2Zvcm1TdHJlYW0iLCAic3RyZWFtIiwgImNodW5rIiwgImVuY29kaW5nIiwgImNhbGxiYWNrIiwgImhlYWRlciIsICJabGliSGVhZGVyVHJhbnNmb3JtU3RyZWFtX2RlZmF1bHQiLCAiY2FsbGJhY2tpZnkiLCAiZm4iLCAicmVkdWNlciIsICJ1dGlsc19kZWZhdWx0IiwgImFyZ3MiLCAiY2IiLCAidmFsdWUiLCAiZXJyIiwgImNhbGxiYWNraWZ5X2RlZmF1bHQiLCAiemxpYk9wdGlvbnMiLCAiemxpYiIsICJicm90bGlPcHRpb25zIiwgImlzQnJvdGxpU3VwcG9ydGVkIiwgInV0aWxzX2RlZmF1bHQiLCAiaHR0cEZvbGxvdyIsICJodHRwc0ZvbGxvdyIsICJmb2xsb3dSZWRpcmVjdHMiLCAiaXNIdHRwcyIsICJzdXBwb3J0ZWRQcm90b2NvbHMiLCAicGxhdGZvcm1fZGVmYXVsdCIsICJwcm90b2NvbCIsICJkaXNwYXRjaEJlZm9yZVJlZGlyZWN0IiwgIm9wdGlvbnMiLCAicmVzcG9uc2VEZXRhaWxzIiwgInNldFByb3h5IiwgImNvbmZpZ1Byb3h5IiwgImxvY2F0aW9uIiwgInByb3h5IiwgInByb3h5VXJsIiwgImJhc2U2NCIsICJwcm94eUhvc3QiLCAicmVkaXJlY3RPcHRpb25zIiwgImlzSHR0cEFkYXB0ZXJTdXBwb3J0ZWQiLCAid3JhcEFzeW5jIiwgImFzeW5jRXhlY3V0b3IiLCAicmVzb2x2ZSIsICJyZWplY3QiLCAib25Eb25lIiwgImlzRG9uZSIsICJkb25lIiwgInZhbHVlIiwgImlzUmVqZWN0ZWQiLCAiX3Jlc29sdmUiLCAiX3JlamVjdCIsICJyZWFzb24iLCAib25Eb25lSGFuZGxlciIsICJyZXNvbHZlRmFtaWx5IiwgImFkZHJlc3MiLCAiZmFtaWx5IiwgImJ1aWxkQWRkcmVzc0VudHJ5IiwgImh0dHBfZGVmYXVsdCIsICJjb25maWciLCAiZGF0YSIsICJsb29rdXAiLCAicmVzcG9uc2VUeXBlIiwgInJlc3BvbnNlRW5jb2RpbmciLCAibWV0aG9kIiwgInJlamVjdGVkIiwgInJlcSIsICJfbG9va3VwIiwgImNhbGxiYWNraWZ5X2RlZmF1bHQiLCAiaG9zdG5hbWUiLCAib3B0IiwgImNiIiwgImVyciIsICJhcmcwIiwgImFyZzEiLCAiYWRkcmVzc2VzIiwgImFkZHIiLCAiZW1pdHRlciIsICJvbkZpbmlzaGVkIiwgImFib3J0IiwgIkNhbmNlbGVkRXJyb3JfZGVmYXVsdCIsICJmdWxsUGF0aCIsICJidWlsZEZ1bGxQYXRoIiwgInBhcnNlZCIsICJjb252ZXJ0ZWREYXRhIiwgInNldHRsZSIsICJmcm9tRGF0YVVSSSIsICJBeGlvc0Vycm9yX2RlZmF1bHQiLCAic3RyZWFtIiwgIkF4aW9zSGVhZGVyc19kZWZhdWx0IiwgImhlYWRlcnMiLCAiVkVSU0lPTiIsICJvbkRvd25sb2FkUHJvZ3Jlc3MiLCAib25VcGxvYWRQcm9ncmVzcyIsICJtYXhSYXRlIiwgIm1heFVwbG9hZFJhdGUiLCAibWF4RG93bmxvYWRSYXRlIiwgInVzZXJCb3VuZGFyeSIsICJmb3JtRGF0YVRvU3RyZWFtX2RlZmF1bHQiLCAiZm9ybUhlYWRlcnMiLCAia25vd25MZW5ndGgiLCAidXRpbCIsICJyZWFkQmxvYl9kZWZhdWx0IiwgImNvbnRlbnRMZW5ndGgiLCAiQXhpb3NUcmFuc2Zvcm1TdHJlYW1fZGVmYXVsdCIsICJwcm9ncmVzcyIsICJhdXRoIiwgInVzZXJuYW1lIiwgInBhc3N3b3JkIiwgInVybFVzZXJuYW1lIiwgInVybFBhc3N3b3JkIiwgInBhdGgiLCAiYnVpbGRVUkwiLCAiY3VzdG9tRXJyIiwgInRyYW5zcG9ydCIsICJpc0h0dHBzUmVxdWVzdCIsICJodHRwcyIsICJodHRwIiwgInJlcyIsICJzdHJlYW1zIiwgInJlc3BvbnNlTGVuZ3RoIiwgInRyYW5zZm9ybVN0cmVhbSIsICJyZXNwb25zZVN0cmVhbSIsICJsYXN0UmVxdWVzdCIsICJabGliSGVhZGVyVHJhbnNmb3JtU3RyZWFtX2RlZmF1bHQiLCAib2ZmTGlzdGVuZXJzIiwgInJlc3BvbnNlIiwgInJlc3BvbnNlQnVmZmVyIiwgInRvdGFsUmVzcG9uc2VCeXRlcyIsICJjaHVuayIsICJyZXNwb25zZURhdGEiLCAic29ja2V0IiwgInRpbWVvdXQiLCAidGltZW91dEVycm9yTWVzc2FnZSIsICJ0cmFuc2l0aW9uYWwiLCAidHJhbnNpdGlvbmFsX2RlZmF1bHQiLCAiZW5kZWQiLCAiZXJyb3JlZCIsICJwcm9ncmVzc0V2ZW50UmVkdWNlcl9kZWZhdWx0IiwgImxpc3RlbmVyIiwgImlzRG93bmxvYWRTdHJlYW0iLCAiZnJlcSIsICJieXRlc05vdGlmaWVkIiwgIl9zcGVlZG9tZXRlciIsICJzcGVlZG9tZXRlcl9kZWZhdWx0IiwgInRocm90dGxlX2RlZmF1bHQiLCAiZSIsICJsb2FkZWQiLCAidG90YWwiLCAicHJvZ3Jlc3NCeXRlcyIsICJyYXRlIiwgImluUmFuZ2UiLCAiZGF0YSIsICJpc1VSTFNhbWVPcmlnaW5fZGVmYXVsdCIsICJwbGF0Zm9ybV9kZWZhdWx0IiwgIm1zaWUiLCAidXJsUGFyc2luZ05vZGUiLCAib3JpZ2luVVJMIiwgInJlc29sdmVVUkwiLCAidXJsIiwgImhyZWYiLCAicmVxdWVzdFVSTCIsICJwYXJzZWQiLCAidXRpbHNfZGVmYXVsdCIsICJjb29raWVzX2RlZmF1bHQiLCAicGxhdGZvcm1fZGVmYXVsdCIsICJuYW1lIiwgInZhbHVlIiwgImV4cGlyZXMiLCAicGF0aCIsICJkb21haW4iLCAic2VjdXJlIiwgImNvb2tpZSIsICJ1dGlsc19kZWZhdWx0IiwgIm1hdGNoIiwgImhlYWRlcnNUb09iamVjdCIsICJ0aGluZyIsICJBeGlvc0hlYWRlcnNfZGVmYXVsdCIsICJtZXJnZUNvbmZpZyIsICJjb25maWcxIiwgImNvbmZpZzIiLCAiY29uZmlnIiwgImdldE1lcmdlZFZhbHVlIiwgInRhcmdldCIsICJzb3VyY2UiLCAiY2FzZWxlc3MiLCAidXRpbHNfZGVmYXVsdCIsICJtZXJnZURlZXBQcm9wZXJ0aWVzIiwgImEiLCAiYiIsICJ2YWx1ZUZyb21Db25maWcyIiwgImRlZmF1bHRUb0NvbmZpZzIiLCAibWVyZ2VEaXJlY3RLZXlzIiwgInByb3AiLCAibWVyZ2VNYXAiLCAibWVyZ2UiLCAiY29uZmlnVmFsdWUiLCAicmVzb2x2ZUNvbmZpZ19kZWZhdWx0IiwgImNvbmZpZyIsICJuZXdDb25maWciLCAibWVyZ2VDb25maWciLCAiZGF0YSIsICJ3aXRoWFNSRlRva2VuIiwgInhzcmZIZWFkZXJOYW1lIiwgInhzcmZDb29raWVOYW1lIiwgImhlYWRlcnMiLCAiYXV0aCIsICJBeGlvc0hlYWRlcnNfZGVmYXVsdCIsICJidWlsZFVSTCIsICJidWlsZEZ1bGxQYXRoIiwgImNvbnRlbnRUeXBlIiwgInV0aWxzX2RlZmF1bHQiLCAicGxhdGZvcm1fZGVmYXVsdCIsICJ0eXBlIiwgInRva2VucyIsICJ0b2tlbiIsICJpc1VSTFNhbWVPcmlnaW5fZGVmYXVsdCIsICJ4c3JmVmFsdWUiLCAiY29va2llc19kZWZhdWx0IiwgImlzWEhSQWRhcHRlclN1cHBvcnRlZCIsICJ4aHJfZGVmYXVsdCIsICJjb25maWciLCAicmVzb2x2ZSIsICJyZWplY3QiLCAiX2NvbmZpZyIsICJyZXNvbHZlQ29uZmlnX2RlZmF1bHQiLCAicmVxdWVzdERhdGEiLCAicmVxdWVzdEhlYWRlcnMiLCAiQXhpb3NIZWFkZXJzX2RlZmF1bHQiLCAicmVzcG9uc2VUeXBlIiwgIm9uQ2FuY2VsZWQiLCAiZG9uZSIsICJyZXF1ZXN0IiwgIm9ubG9hZGVuZCIsICJyZXNwb25zZUhlYWRlcnMiLCAicmVzcG9uc2UiLCAic2V0dGxlIiwgInZhbHVlIiwgImVyciIsICJBeGlvc0Vycm9yX2RlZmF1bHQiLCAidGltZW91dEVycm9yTWVzc2FnZSIsICJ0cmFuc2l0aW9uYWwiLCAidHJhbnNpdGlvbmFsX2RlZmF1bHQiLCAidXRpbHNfZGVmYXVsdCIsICJ2YWwiLCAia2V5IiwgInByb2dyZXNzRXZlbnRSZWR1Y2VyX2RlZmF1bHQiLCAiY2FuY2VsIiwgIkNhbmNlbGVkRXJyb3JfZGVmYXVsdCIsICJwcm90b2NvbCIsICJwYXJzZVByb3RvY29sIiwgInBsYXRmb3JtX2RlZmF1bHQiLCAiY29tcG9zZVNpZ25hbHMiLCAic2lnbmFscyIsICJ0aW1lb3V0IiwgImNvbnRyb2xsZXIiLCAiYWJvcnRlZCIsICJvbmFib3J0IiwgImNhbmNlbCIsICJ1bnN1YnNjcmliZSIsICJlcnIiLCAiQXhpb3NFcnJvcl9kZWZhdWx0IiwgIkNhbmNlbGVkRXJyb3JfZGVmYXVsdCIsICJ0aW1lciIsICJzaWduYWwiLCAiY29tcG9zZVNpZ25hbHNfZGVmYXVsdCIsICJzdHJlYW1DaHVuayIsICJjaHVuayIsICJjaHVua1NpemUiLCAibGVuIiwgInBvcyIsICJlbmQiLCAicmVhZEJ5dGVzIiwgIml0ZXJhYmxlIiwgImVuY29kZSIsICJ0cmFja1N0cmVhbSIsICJzdHJlYW0iLCAib25Qcm9ncmVzcyIsICJvbkZpbmlzaCIsICJpdGVyYXRvciIsICJieXRlcyIsICJjb250cm9sbGVyIiwgImRvbmUiLCAidmFsdWUiLCAicmVhc29uIiwgImZldGNoUHJvZ3Jlc3NEZWNvcmF0b3IiLCAidG90YWwiLCAiZm4iLCAibGVuZ3RoQ29tcHV0YWJsZSIsICJsb2FkZWQiLCAiaXNGZXRjaFN1cHBvcnRlZCIsICJpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkIiwgImVuY29kZVRleHQiLCAiZW5jb2RlciIsICJzdHIiLCAic3VwcG9ydHNSZXF1ZXN0U3RyZWFtIiwgImR1cGxleEFjY2Vzc2VkIiwgImhhc0NvbnRlbnRUeXBlIiwgInBsYXRmb3JtX2RlZmF1bHQiLCAiREVGQVVMVF9DSFVOS19TSVpFIiwgInN1cHBvcnRzUmVzcG9uc2VTdHJlYW0iLCAidXRpbHNfZGVmYXVsdCIsICJyZXNvbHZlcnMiLCAicmVzIiwgInR5cGUiLCAiXyIsICJjb25maWciLCAiQXhpb3NFcnJvcl9kZWZhdWx0IiwgImdldEJvZHlMZW5ndGgiLCAiYm9keSIsICJyZXNvbHZlQm9keUxlbmd0aCIsICJoZWFkZXJzIiwgImxlbmd0aCIsICJmZXRjaF9kZWZhdWx0IiwgInVybCIsICJtZXRob2QiLCAiZGF0YSIsICJzaWduYWwiLCAiY2FuY2VsVG9rZW4iLCAidGltZW91dCIsICJvbkRvd25sb2FkUHJvZ3Jlc3MiLCAib25VcGxvYWRQcm9ncmVzcyIsICJyZXNwb25zZVR5cGUiLCAid2l0aENyZWRlbnRpYWxzIiwgImZldGNoT3B0aW9ucyIsICJyZXNvbHZlQ29uZmlnX2RlZmF1bHQiLCAiY29tcG9zZWRTaWduYWwiLCAic3RvcFRpbWVvdXQiLCAiY29tcG9zZVNpZ25hbHNfZGVmYXVsdCIsICJmaW5pc2hlZCIsICJyZXF1ZXN0IiwgIm9uRmluaXNoIiwgInJlcXVlc3RDb250ZW50TGVuZ3RoIiwgIl9yZXF1ZXN0IiwgImNvbnRlbnRUeXBlSGVhZGVyIiwgInRyYWNrU3RyZWFtIiwgInByb2dyZXNzRXZlbnRSZWR1Y2VyX2RlZmF1bHQiLCAicmVzcG9uc2UiLCAiaXNTdHJlYW1SZXNwb25zZSIsICJvcHRpb25zIiwgInByb3AiLCAicmVzcG9uc2VDb250ZW50TGVuZ3RoIiwgInJlc3BvbnNlRGF0YSIsICJyZXNvbHZlIiwgInJlamVjdCIsICJzZXR0bGUiLCAiQXhpb3NIZWFkZXJzX2RlZmF1bHQiLCAiZXJyIiwgImtub3duQWRhcHRlcnMiLCAiaHR0cF9kZWZhdWx0IiwgInhocl9kZWZhdWx0IiwgImZldGNoX2RlZmF1bHQiLCAidXRpbHNfZGVmYXVsdCIsICJmbiIsICJ2YWx1ZSIsICJyZW5kZXJSZWFzb24iLCAicmVhc29uIiwgImlzUmVzb2x2ZWRIYW5kbGUiLCAiYWRhcHRlciIsICJhZGFwdGVyc19kZWZhdWx0IiwgImFkYXB0ZXJzIiwgImxlbmd0aCIsICJuYW1lT3JBZGFwdGVyIiwgInJlamVjdGVkUmVhc29ucyIsICJpIiwgImlkIiwgIkF4aW9zRXJyb3JfZGVmYXVsdCIsICJyZWFzb25zIiwgInN0YXRlIiwgInMiLCAidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsICJjb25maWciLCAiQ2FuY2VsZWRFcnJvcl9kZWZhdWx0IiwgImRpc3BhdGNoUmVxdWVzdCIsICJBeGlvc0hlYWRlcnNfZGVmYXVsdCIsICJ0cmFuc2Zvcm1EYXRhIiwgImFkYXB0ZXJzX2RlZmF1bHQiLCAiZGVmYXVsdHNfZGVmYXVsdCIsICJyZXNwb25zZSIsICJyZWFzb24iLCAiaXNDYW5jZWwiLCAidmFsaWRhdG9ycyIsICJ0eXBlIiwgImkiLCAidGhpbmciLCAiZGVwcmVjYXRlZFdhcm5pbmdzIiwgInZhbGlkYXRvciIsICJ2ZXJzaW9uIiwgIm1lc3NhZ2UiLCAiZm9ybWF0TWVzc2FnZSIsICJvcHQiLCAiZGVzYyIsICJWRVJTSU9OIiwgInZhbHVlIiwgIm9wdHMiLCAiQXhpb3NFcnJvcl9kZWZhdWx0IiwgImFzc2VydE9wdGlvbnMiLCAib3B0aW9ucyIsICJzY2hlbWEiLCAiYWxsb3dVbmtub3duIiwgImtleXMiLCAicmVzdWx0IiwgInZhbGlkYXRvcl9kZWZhdWx0IiwgInZhbGlkYXRvcnMiLCAidmFsaWRhdG9yX2RlZmF1bHQiLCAiQXhpb3MiLCAiaW5zdGFuY2VDb25maWciLCAiSW50ZXJjZXB0b3JNYW5hZ2VyX2RlZmF1bHQiLCAiY29uZmlnT3JVcmwiLCAiY29uZmlnIiwgImVyciIsICJkdW1teSIsICJzdGFjayIsICJtZXJnZUNvbmZpZyIsICJ0cmFuc2l0aW9uYWwiLCAicGFyYW1zU2VyaWFsaXplciIsICJoZWFkZXJzIiwgInV0aWxzX2RlZmF1bHQiLCAiY29udGV4dEhlYWRlcnMiLCAibWV0aG9kIiwgIkF4aW9zSGVhZGVyc19kZWZhdWx0IiwgInJlcXVlc3RJbnRlcmNlcHRvckNoYWluIiwgInN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyIsICJpbnRlcmNlcHRvciIsICJyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4iLCAicHJvbWlzZSIsICJpIiwgImxlbiIsICJjaGFpbiIsICJkaXNwYXRjaFJlcXVlc3QiLCAibmV3Q29uZmlnIiwgIm9uRnVsZmlsbGVkIiwgIm9uUmVqZWN0ZWQiLCAiZXJyb3IiLCAiZnVsbFBhdGgiLCAiYnVpbGRGdWxsUGF0aCIsICJidWlsZFVSTCIsICJ1cmwiLCAiZ2VuZXJhdGVIVFRQTWV0aG9kIiwgImlzRm9ybSIsICJkYXRhIiwgIkF4aW9zX2RlZmF1bHQiLCAiQ2FuY2VsVG9rZW4iLCAiX0NhbmNlbFRva2VuIiwgImV4ZWN1dG9yIiwgInJlc29sdmVQcm9taXNlIiwgInJlc29sdmUiLCAidG9rZW4iLCAiY2FuY2VsIiwgImkiLCAib25mdWxmaWxsZWQiLCAiX3Jlc29sdmUiLCAicHJvbWlzZSIsICJtZXNzYWdlIiwgImNvbmZpZyIsICJyZXF1ZXN0IiwgIkNhbmNlbGVkRXJyb3JfZGVmYXVsdCIsICJsaXN0ZW5lciIsICJpbmRleCIsICJjIiwgIkNhbmNlbFRva2VuX2RlZmF1bHQiLCAic3ByZWFkIiwgImNhbGxiYWNrIiwgImFyciIsICJpc0F4aW9zRXJyb3IiLCAicGF5bG9hZCIsICJ1dGlsc19kZWZhdWx0IiwgIkh0dHBTdGF0dXNDb2RlIiwgImtleSIsICJ2YWx1ZSIsICJIdHRwU3RhdHVzQ29kZV9kZWZhdWx0IiwgImNyZWF0ZUluc3RhbmNlIiwgImRlZmF1bHRDb25maWciLCAiY29udGV4dCIsICJBeGlvc19kZWZhdWx0IiwgImluc3RhbmNlIiwgImJpbmQiLCAidXRpbHNfZGVmYXVsdCIsICJpbnN0YW5jZUNvbmZpZyIsICJtZXJnZUNvbmZpZyIsICJheGlvcyIsICJkZWZhdWx0c19kZWZhdWx0IiwgIkNhbmNlbGVkRXJyb3JfZGVmYXVsdCIsICJDYW5jZWxUb2tlbl9kZWZhdWx0IiwgImlzQ2FuY2VsIiwgIlZFUlNJT04iLCAidG9Gb3JtRGF0YV9kZWZhdWx0IiwgIkF4aW9zRXJyb3JfZGVmYXVsdCIsICJwcm9taXNlcyIsICJzcHJlYWQiLCAiaXNBeGlvc0Vycm9yIiwgIkF4aW9zSGVhZGVyc19kZWZhdWx0IiwgInRoaW5nIiwgImZvcm1EYXRhVG9KU09OX2RlZmF1bHQiLCAiYWRhcHRlcnNfZGVmYXVsdCIsICJIdHRwU3RhdHVzQ29kZV9kZWZhdWx0IiwgImF4aW9zX2RlZmF1bHQiLCAiQXhpb3MiLCAiQXhpb3NFcnJvciIsICJDYW5jZWxlZEVycm9yIiwgImlzQ2FuY2VsIiwgIkNhbmNlbFRva2VuIiwgIlZFUlNJT04iLCAiYWxsIiwgIkNhbmNlbCIsICJpc0F4aW9zRXJyb3IiLCAic3ByZWFkIiwgInRvRm9ybURhdGEiLCAiQXhpb3NIZWFkZXJzIiwgIkh0dHBTdGF0dXNDb2RlIiwgImZvcm1Ub0pTT04iLCAiZ2V0QWRhcHRlciIsICJtZXJnZUNvbmZpZyIsICJheGlvc19kZWZhdWx0IiwgImltcG9ydF9maWxlX2V4aXN0cyIsICJpbXBvcnRfZGVidWciLCAiaW1wb3J0X2NoaWxkX3Byb2Nlc3MiLCAiaW1wb3J0X3Byb21pc2VfZGVmZXJyZWQiLCAiaW1wb3J0X25vZGVfZXZlbnRzIiwgInBhdGhzcGVjIiwgInBhdGhzIiwgImtleSIsICJjYWNoZSIsICJpc1BhdGhTcGVjIiwgInBhdGgiLCAidG9QYXRocyIsICJwYXRoU3BlYyIsICJpbml0X3BhdGhzcGVjIiwgIl9fZXNtIiwgIkdpdEVycm9yIiwgImluaXRfZ2l0X2Vycm9yIiwgInRhc2siLCAibWVzc2FnZSIsICJHaXRSZXNwb25zZUVycm9yIiwgImluaXRfZ2l0X3Jlc3BvbnNlX2Vycm9yIiwgImdpdCIsICJUYXNrQ29uZmlndXJhdGlvbkVycm9yIiwgImluaXRfdGFza19jb25maWd1cmF0aW9uX2Vycm9yIiwgImFzRnVuY3Rpb24iLCAic291cmNlIiwgIk5PT1AiLCAiaXNVc2VyRnVuY3Rpb24iLCAic3BsaXRPbiIsICJpbnB1dCIsICJjaGFyIiwgImluZGV4IiwgImZpcnN0IiwgIm9mZnNldCIsICJpc0FycmF5TGlrZSIsICJsYXN0IiwgInRvTGluZXNXaXRoQ29udGVudCIsICJ0cmltbWVkIiwgInNlcGFyYXRvciIsICJvdXRwdXQiLCAibGluZSIsICJsaW5lQ29udGVudCIsICJmb3JFYWNoTGluZVdpdGhDb250ZW50IiwgImNhbGxiYWNrIiwgImZvbGRlckV4aXN0cyIsICJhcHBlbmQiLCAidGFyZ2V0IiwgIml0ZW0iLCAiaW5jbHVkaW5nIiwgInJlbW92ZSIsICJhc0FycmF5IiwgImFzQ2FtZWxDYXNlIiwgInN0ciIsICJfYWxsIiwgImNociIsICJhc1N0cmluZ0FycmF5IiwgImFzTnVtYmVyIiwgIm9uTmFOIiwgIm51bSIsICJwcmVmaXhlZEFycmF5IiwgInByZWZpeCIsICJpIiwgIm1heCIsICJidWZmZXJUb1N0cmluZyIsICJwaWNrIiwgInByb3BlcnRpZXMiLCAicHJvcGVydHkiLCAiZGVsYXkiLCAiZHVyYXRpb24iLCAiZG9uZSIsICJvclZvaWQiLCAiTlVMTCIsICJvYmplY3RUb1N0cmluZyIsICJpbml0X3V0aWwiLCAiZmlsdGVyVHlwZSIsICJmaWx0ZXIiLCAiZGVmIiwgImZpbHRlclByaW1pdGl2ZXMiLCAib21pdCIsICJ0eXBlIiwgImZpbHRlclBsYWluT2JqZWN0IiwgImZpbHRlckZ1bmN0aW9uIiwgImZpbHRlckFycmF5IiwgImZpbHRlclN0cmluZyIsICJmaWx0ZXJTdHJpbmdBcnJheSIsICJmaWx0ZXJTdHJpbmdPclN0cmluZ0FycmF5IiwgImZpbHRlckhhc0xlbmd0aCIsICJpbml0X2FyZ3VtZW50X2ZpbHRlcnMiLCAiRXhpdENvZGVzIiwgImluaXRfZXhpdF9jb2RlcyIsICJHaXRPdXRwdXRTdHJlYW1zIiwgImluaXRfZ2l0X291dHB1dF9zdHJlYW1zIiwgInN0ZE91dCIsICJzdGRFcnIiLCAiTGluZVBhcnNlciIsICJSZW1vdGVMaW5lUGFyc2VyIiwgImluaXRfbGluZV9wYXJzZXIiLCAicmVnRXhwIiwgInVzZU1hdGNoZXMiLCAicmVnIiwgIm1hdGNoIiwgIm1hdGNoZWQiLCAiX2luZGV4IiwgImNyZWF0ZUluc3RhbmNlQ29uZmlnIiwgIm9wdGlvbnMiLCAiYmFzZURpciIsICJjb25maWciLCAiX19zcHJlYWRWYWx1ZXMiLCAiZGVmYXVsdE9wdGlvbnMiLCAibyIsICJpbml0X3NpbXBsZV9naXRfb3B0aW9ucyIsICJhcHBlbmRUYXNrT3B0aW9ucyIsICJjb21tYW5kcyIsICJ2YWx1ZSIsICJnZXRUcmFpbGluZ09wdGlvbnMiLCAiYXJncyIsICJpbml0aWFsUHJpbWl0aXZlIiwgIm9iamVjdE9ubHkiLCAiY29tbWFuZCIsICJ0cmFpbGluZ09wdGlvbnNBcmd1bWVudCIsICJ0cmFpbGluZ0FycmF5QXJndW1lbnQiLCAiaGFzVHJhaWxpbmdDYWxsYmFjayIsICJ0cmFpbGluZ0Z1bmN0aW9uQXJndW1lbnQiLCAiaW5jbHVkZU5vb3AiLCAiaW5pdF90YXNrX29wdGlvbnMiLCAiY2FsbFRhc2tQYXJzZXIiLCAicGFyc2VyIiwgInN0cmVhbXMiLCAicGFyc2VTdHJpbmdSZXNwb25zZSIsICJyZXN1bHQiLCAicGFyc2VycyIsICJ0ZXh0cyIsICJ0cmltIiwgInRleHQiLCAibGluZXMiLCAicGFyc2UiLCAiaW5pdF90YXNrX3BhcnNlciIsICJ1dGlsc19leHBvcnRzIiwgIl9fZXhwb3J0IiwgImluaXRfdXRpbHMiLCAiY2hlY2tfaXNfcmVwb19leHBvcnRzIiwgIkNoZWNrUmVwb0FjdGlvbnMiLCAiY2hlY2tJc0JhcmVSZXBvVGFzayIsICJjaGVja0lzUmVwb1Jvb3RUYXNrIiwgImNoZWNrSXNSZXBvVGFzayIsICJhY3Rpb24iLCAib25FcnJvciIsICJpc05vdFJlcG9NZXNzYWdlIiwgImVycm9yIiwgImluaXRfY2hlY2tfaXNfcmVwbyIsICJleGl0Q29kZSIsICJmYWlsIiwgImNsZWFuU3VtbWFyeVBhcnNlciIsICJkcnlSdW4iLCAic3VtbWFyeSIsICJDbGVhblJlc3BvbnNlIiwgInJlZ2V4cCIsICJkcnlSdW5SZW1vdmFsUmVnZXhwIiwgInJlbW92YWxSZWdleHAiLCAicmVtb3ZlZCIsICJpc0ZvbGRlclJlZ2V4cCIsICJpbml0X0NsZWFuU3VtbWFyeSIsICJ0YXNrX2V4cG9ydHMiLCAiRU1QVFlfQ09NTUFORFMiLCAiYWRob2NFeGVjVGFzayIsICJjb25maWd1cmF0aW9uRXJyb3JUYXNrIiwgImlzQnVmZmVyVGFzayIsICJpc0VtcHR5VGFzayIsICJzdHJhaWdodFRocm91Z2hCdWZmZXJUYXNrIiwgInN0cmFpZ2h0VGhyb3VnaFN0cmluZ1Rhc2siLCAiYnVmZmVyIiwgImluaXRfdGFzayIsICJjbGVhbl9leHBvcnRzIiwgIkNPTkZJR19FUlJPUl9JTlRFUkFDVElWRV9NT0RFIiwgIkNPTkZJR19FUlJPUl9NT0RFX1JFUVVJUkVEIiwgIkNPTkZJR19FUlJPUl9VTktOT1dOX09QVElPTiIsICJDbGVhbk9wdGlvbnMiLCAiY2xlYW5UYXNrIiwgImNsZWFuV2l0aE9wdGlvbnNUYXNrIiwgImlzQ2xlYW5PcHRpb25zQXJyYXkiLCAibW9kZSIsICJjdXN0b21BcmdzIiwgImNsZWFuTW9kZSIsICJ2YWxpZCIsICJnZXRDbGVhbk9wdGlvbnMiLCAiaXNJbnRlcmFjdGl2ZU1vZGUiLCAidGVzdCIsICJDbGVhbk9wdGlvblZhbHVlcyIsICJpc0NsZWFuTW9kZSIsICJpc0tub3duT3B0aW9uIiwgIm9wdGlvbiIsICJpbml0X2NsZWFuIiwgImNvbmZpZ0xpc3RQYXJzZXIiLCAiQ29uZmlnTGlzdCIsICJjb25maWdQYXJzZXIiLCAiY29uZmlnR2V0UGFyc2VyIiwgInZhbHVlcyIsICJzY29wZXMiLCAiY29uZmlnRmlsZVBhdGgiLCAiZmlsZVBhdGgiLCAicmVxdWVzdGVkS2V5IiwgImZpbGUiLCAiaW5pdF9Db25maWdMaXN0IiwgImFsbCIsICJsYXRlc3QiLCAiYXNDb25maWdTY29wZSIsICJzY29wZSIsICJmYWxsYmFjayIsICJHaXRDb25maWdTY29wZSIsICJhZGRDb25maWdUYXNrIiwgImdldENvbmZpZ1Rhc2siLCAibGlzdENvbmZpZ1Rhc2siLCAiY29uZmlnX2RlZmF1bHQiLCAicmVzdCIsICJpbml0X2NvbmZpZyIsICJpc0RpZmZOYW1lU3RhdHVzIiwgImRpZmZOYW1lU3RhdHVzIiwgIkRpZmZOYW1lU3RhdHVzIiwgImluaXRfZGlmZl9uYW1lX3N0YXR1cyIsICJncmVwUXVlcnlCdWlsZGVyIiwgInBhcmFtcyIsICJHcmVwUXVlcnkiLCAicGFyc2VHcmVwIiwgImdyZXAiLCAicmVzdWx0cyIsICJwcmV2aWV3IiwgImdyZXBfZGVmYXVsdCIsICJzZWFyY2hUZXJtIiwgInRoZW4iLCAiZGlzYWxsb3dlZE9wdGlvbnMiLCAiUXVlcnkiLCAiX2EiLCAiaW5pdF9ncmVwIiwgInF1ZXJ5IiwgImFuZCIsICJwYXJhbSIsICJyZXNldF9leHBvcnRzIiwgIlJlc2V0TW9kZSIsICJnZXRSZXNldE1vZGUiLCAicmVzZXRUYXNrIiwgImlzVmFsaWRSZXNldE1vZGUiLCAiUmVzZXRNb2RlcyIsICJpbml0X3Jlc2V0IiwgImNyZWF0ZUxvZyIsICJkZWJ1ZyIsICJwcmVmaXhlZExvZ2dlciIsICJ0byIsICJmb3J3YXJkIiwgImNoaWxkTG9nZ2VyTmFtZSIsICJuYW1lIiwgImNoaWxkRGVidWdnZXIiLCAicGFyZW50TmFtZXNwYWNlIiwgImNoaWxkTmFtZXNwYWNlIiwgImNyZWF0ZUxvZ2dlciIsICJsYWJlbCIsICJ2ZXJib3NlIiwgImluaXRpYWxTdGVwIiwgImluZm9EZWJ1Z2dlciIsICJsYWJlbFByZWZpeCIsICJzcGF3bmVkIiwgImRlYnVnRGVidWdnZXIiLCAic3RlcCIsICJzaWJsaW5nIiwgImluaXRpYWwiLCAicGhhc2UiLCAic3RlcFByZWZpeCIsICJpbmZvIiwgImluaXRfZ2l0X2xvZ2dlciIsICJfVGFza3NQZW5kaW5nUXVldWUiLCAiVGFza3NQZW5kaW5nUXVldWUiLCAiaW5pdF90YXNrc19wZW5kaW5nX3F1ZXVlIiwgImxvZ0xhYmVsIiwgImxvZ2dlciIsICJwcm9ncmVzcyIsICJlcnIiLCAicGx1Z2luQ29udGV4dCIsICJvbkVycm9yUmVjZWl2ZWQiLCAib25EYXRhUmVjZWl2ZWQiLCAiR2l0RXhlY3V0b3JDaGFpbiIsICJpbml0X2dpdF9leGVjdXRvcl9jaGFpbiIsICJfZXhlY3V0b3IiLCAiX3NjaGVkdWxlciIsICJfcGx1Z2lucyIsICJjd2QiLCAiX19hc3luYyIsICJvblNjaGVkdWxlQ29tcGxldGUiLCAib25RdWV1ZUNvbXBsZXRlIiwgImUiLCAiZ2l0RXJyb3IiLCAiYmluYXJ5IiwgInJhdyIsICJvdXRwdXRTdHJlYW1zIiwgInJlamVjdGlvbiIsICJuZXdTdGRPdXQiLCAib3V0cHV0SGFuZGxlciIsICJvdXRwdXRMb2dnZXIiLCAic3Bhd25PcHRpb25zIiwgIl9fc3ByZWFkUHJvcHMiLCAicmVhc29uIiwgImdpdF9leGVjdXRvcl9leHBvcnRzIiwgIkdpdEV4ZWN1dG9yIiwgImluaXRfZ2l0X2V4ZWN1dG9yIiwgInRhc2tDYWxsYmFjayIsICJyZXNwb25zZSIsICJvblN1Y2Nlc3MiLCAiZGF0YSIsICJhZGREZXByZWNhdGlvbk5vdGljZVRvRXJyb3IiLCAibG9nIiwgImRlc2NyaXB0b3JSZWR1Y2VyIiwgImluaXRfdGFza19jYWxsYmFjayIsICJjaGFuZ2VXb3JraW5nRGlyZWN0b3J5VGFzayIsICJkaXJlY3RvcnkiLCAicm9vdCIsICJpbnN0YW5jZSIsICJpbml0X2NoYW5nZV93b3JraW5nX2RpcmVjdG9yeSIsICJjaGVja291dFRhc2siLCAiY2hlY2tvdXRfZGVmYXVsdCIsICJicmFuY2hOYW1lIiwgInN0YXJ0UG9pbnQiLCAiaW5pdF9jaGVja291dCIsICJjb3VudE9iamVjdHNSZXNwb25zZSIsICJjb3VudF9vYmplY3RzX2RlZmF1bHQiLCAiaW5pdF9jb3VudF9vYmplY3RzIiwgInBhcnNlQ29tbWl0UmVzdWx0IiwgImluaXRfcGFyc2VfY29tbWl0IiwgImJyYW5jaCIsICJjb21taXQiLCAiYXV0aG9yIiwgInBhcnRzIiwgImVtYWlsIiwgImNoYW5nZXMiLCAiaW5zZXJ0aW9ucyIsICJkZWxldGlvbnMiLCAiZGlyZWN0aW9uIiwgImNvdW50IiwgImNvbW1pdFRhc2siLCAiZmlsZXMiLCAiY29tbWl0X2RlZmF1bHQiLCAibmV4dCIsICJyZWplY3REZXByZWNhdGVkU2lnbmF0dXJlcyIsICJpbml0X2NvbW1pdCIsICJmaXJzdF9jb21taXRfZGVmYXVsdCIsICJpbml0X2ZpcnN0X2NvbW1pdCIsICJoYXNoT2JqZWN0VGFzayIsICJ3cml0ZSIsICJpbml0X2hhc2hfb2JqZWN0IiwgInBhcnNlSW5pdCIsICJiYXJlIiwgImluaXRSZXNwb25zZVJlZ2V4IiwgIkluaXRTdW1tYXJ5IiwgInJlSW5pdFJlc3BvbnNlUmVnZXgiLCAiZ2l0RGlyIiwgInRva2VucyIsICJpbml0X0luaXRTdW1tYXJ5IiwgImV4aXN0aW5nIiwgImhhc0JhcmVDb21tYW5kIiwgImJhcmVDb21tYW5kIiwgImluaXRUYXNrIiwgImluaXRfaW5pdCIsICJsb2dGb3JtYXRGcm9tQ29tbWFuZCIsICJmb3JtYXQiLCAibG9nRm9ybWF0UmVnZXgiLCAiaXNMb2dGb3JtYXQiLCAiY3VzdG9tQXJnIiwgImluaXRfbG9nX2Zvcm1hdCIsICJEaWZmU3VtbWFyeSIsICJpbml0X0RpZmZTdW1tYXJ5IiwgImdldERpZmZQYXJzZXIiLCAiZGlmZlN1bW1hcnlQYXJzZXJzIiwgInN0YXRQYXJzZXIiLCAibnVtU3RhdFBhcnNlciIsICJuYW1lT25seVBhcnNlciIsICJuYW1lU3RhdHVzUGFyc2VyIiwgImluaXRfcGFyc2VfZGlmZl9zdW1tYXJ5IiwgImFsdGVyYXRpb25zIiwgImJlZm9yZSIsICJhZnRlciIsICJjaGFuZ2VkIiwgImluc2VydGVkIiwgImRlbGV0ZWQiLCAiY2hhbmdlc0luc2VydCIsICJjaGFuZ2VzRGVsZXRlIiwgInN0YXR1cyIsICJfc2ltaWxhcml0eSIsICJmcm9tIiwgIl90byIsICJsaW5lQnVpbGRlciIsICJmaWVsZHMiLCAiZmllbGQiLCAiY3JlYXRlTGlzdExvZ1N1bW1hcnlQYXJzZXIiLCAic3BsaXR0ZXIiLCAiU1BMSVRURVIiLCAiZGVmYXVsdEZpZWxkTmFtZXMiLCAibG9nRm9ybWF0IiwgInBhcnNlRGlmZlJlc3VsdCIsICJTVEFSVF9CT1VOREFSWSIsICJsaW5lRGV0YWlsIiwgIkNPTU1JVF9CT1VOREFSWSIsICJsaXN0TG9nTGluZSIsICJpbml0X3BhcnNlX2xpc3RfbG9nX3N1bW1hcnkiLCAiZGlmZl9leHBvcnRzIiwgImRpZmZTdW1tYXJ5VGFzayIsICJ2YWxpZGF0ZUxvZ0Zvcm1hdENvbmZpZyIsICJmbGFncyIsICJpbml0X2RpZmYiLCAicHJldHR5Rm9ybWF0IiwgImZvcm1hdFN0ciIsICJ1c2VyT3B0aW9ucyIsICJvdXQiLCAiZXhjbHVkZU9wdGlvbnMiLCAicGFyc2VMb2dPcHRpb25zIiwgIm9wdCIsICJzdWZmaXgiLCAibWF4Q291bnQiLCAicmFuZ2VPcGVyYXRvciIsICJsb2dUYXNrIiwgImxvZ19kZWZhdWx0IiwgImNyZWF0ZUxvZ1Rhc2siLCAiaW5pdF9sb2ciLCAiTWVyZ2VTdW1tYXJ5Q29uZmxpY3QiLCAiTWVyZ2VTdW1tYXJ5RGV0YWlsIiwgImluaXRfTWVyZ2VTdW1tYXJ5IiwgIm1ldGEiLCAiUHVsbFN1bW1hcnkiLCAiUHVsbEZhaWxlZFN1bW1hcnkiLCAiaW5pdF9QdWxsU3VtbWFyeSIsICJvYmplY3RFbnVtZXJhdGlvblJlc3VsdCIsICJyZW1vdGVNZXNzYWdlcyIsICJhc09iamVjdENvdW50IiwgImRlbHRhIiwgInJlbW90ZU1lc3NhZ2VzT2JqZWN0UGFyc2VycyIsICJpbml0X3BhcnNlX3JlbW90ZV9vYmplY3RzIiwgImVudW1lcmF0aW9uIiwgInRvdGFsIiwgInJldXNlZCIsICJwYWNrUmV1c2VkIiwgIm9iamVjdHMiLCAicGFyc2VSZW1vdGVNZXNzYWdlcyIsICJfc3RkT3V0IiwgIlJlbW90ZU1lc3NhZ2VTdW1tYXJ5IiwgImluaXRfcGFyc2VfcmVtb3RlX21lc3NhZ2VzIiwgInB1bGxSZXF1ZXN0VXJsIiwgInVybCIsICJwYXJzZVB1bGxFcnJvclJlc3VsdCIsICJwdWxsRXJyb3IiLCAiZXJyb3JQYXJzZXJzIiwgIkZJTEVfVVBEQVRFX1JFR0VYIiwgIlNVTU1BUllfUkVHRVgiLCAiQUNUSU9OX1JFR0VYIiwgInBhcnNlUHVsbERldGFpbCIsICJwYXJzZVB1bGxSZXN1bHQiLCAiaW5pdF9wYXJzZV9wdWxsIiwgInJlbW90ZSIsICJoYXNoTG9jYWwiLCAiaGFzaFJlbW90ZSIsICJicmFuY2hMb2NhbCIsICJicmFuY2hSZW1vdGUiLCAicGFyc2VNZXJnZVJlc3VsdCIsICJwYXJzZU1lcmdlRGV0YWlsIiwgImluaXRfcGFyc2VfbWVyZ2UiLCAiYXV0b01lcmdlIiwgImRlbGV0ZVJlZiIsICJtZXJnZVRhc2siLCAibWVyZ2UiLCAiaW5pdF9tZXJnZSIsICJwdXNoUmVzdWx0UHVzaGVkSXRlbSIsICJsb2NhbCIsICJ0YWciLCAiYWxyZWFkeVVwZGF0ZWQiLCAicGFyc2VQdXNoUmVzdWx0IiwgInBhcnNlUHVzaERldGFpbCIsICJpbml0X3BhcnNlX3B1c2giLCAicmVwbyIsICJyZW1vdGVOYW1lIiwgInB1c2hEZXRhaWwiLCAicmVzcG9uc2VEZXRhaWwiLCAicHVzaF9leHBvcnRzIiwgInB1c2hUYWdzVGFzayIsICJwdXNoVGFzayIsICJyZWYiLCAiaW5pdF9wdXNoIiwgInNob3dfZGVmYXVsdCIsICJpbml0X3Nob3ciLCAiZnJvbVBhdGhSZWdleCIsICJGaWxlU3RhdHVzU3VtbWFyeSIsICJpbml0X0ZpbGVTdGF0dXNTdW1tYXJ5IiwgIndvcmtpbmdfZGlyIiwgImRldGFpbCIsICJyZW5hbWVkRmlsZSIsICJpbmRleFgiLCAiaW5kZXhZIiwgImhhbmRsZXIiLCAiY29uZmxpY3RzIiwgInkiLCAic3BsaXRMaW5lIiwgImxpbmVTdHIiLCAid29ya2luZ0RpciIsICJTdGF0dXNTdW1tYXJ5IiwgInBhcnNlU3RhdHVzU3VtbWFyeSIsICJpbml0X1N0YXR1c1N1bW1hcnkiLCAicmVuYW1lZCIsICJfcmVzdWx0IiwgIl9maWxlIiwgImFoZWFkUmVnIiwgImJlaGluZFJlZyIsICJjdXJyZW50UmVnIiwgInRyYWNraW5nUmVnIiwgIm9uRW1wdHlCcmFuY2hSZWciLCAicmVnZXhSZXN1bHQiLCAibCIsICJzdGF0dXNUYXNrIiwgImFyZyIsICJpZ25vcmVkT3B0aW9ucyIsICJpbml0X3N0YXR1cyIsICJ2ZXJzaW9uUmVzcG9uc2UiLCAibWFqb3IiLCAibWlub3IiLCAicGF0Y2giLCAiYWdlbnQiLCAiaW5zdGFsbGVkIiwgIm5vdEluc3RhbGxlZFJlc3BvbnNlIiwgInZlcnNpb25fZGVmYXVsdCIsICJ2ZXJzaW9uUGFyc2VyIiwgIk5PVF9JTlNUQUxMRUQiLCAiaW5pdF92ZXJzaW9uIiwgInNpbXBsZV9naXRfYXBpX2V4cG9ydHMiLCAiU2ltcGxlR2l0QXBpIiwgImluaXRfc2ltcGxlX2dpdF9hcGkiLCAiY2hhaW4iLCAicHJvbWlzZSIsICJzY2hlZHVsZXJfZXhwb3J0cyIsICJTY2hlZHVsZXIiLCAiY3JlYXRlU2NoZWR1bGVkVGFzayIsICJpbml0X3NjaGVkdWxlciIsICJpZCIsICJjb25jdXJyZW5jeSIsICJhcHBseV9wYXRjaF9leHBvcnRzIiwgImFwcGx5UGF0Y2hUYXNrIiwgInBhdGNoZXMiLCAiaW5pdF9hcHBseV9wYXRjaCIsICJicmFuY2hEZWxldGlvblN1Y2Nlc3MiLCAiaGFzaCIsICJicmFuY2hEZWxldGlvbkZhaWx1cmUiLCAiQnJhbmNoRGVsZXRpb25CYXRjaCIsICJpbml0X0JyYW5jaERlbGV0ZVN1bW1hcnkiLCAiaGFzQnJhbmNoRGVsZXRpb25FcnJvciIsICJwcm9jZXNzRXhpdENvZGUiLCAiZGVsZXRlRXJyb3JSZWdleCIsICJkZWxldGVTdWNjZXNzUmVnZXgiLCAicGFyc2VCcmFuY2hEZWxldGlvbnMiLCAiaW5pdF9wYXJzZV9icmFuY2hfZGVsZXRlIiwgImRlbGV0aW9uIiwgIkJyYW5jaFN1bW1hcnlSZXN1bHQiLCAiaW5pdF9CcmFuY2hTdW1tYXJ5IiwgImRldGFjaGVkIiwgImJyYW5jaFN0YXR1cyIsICJwYXJzZUJyYW5jaFN1bW1hcnkiLCAiaW5pdF9wYXJzZV9icmFuY2giLCAiY3VycmVudCIsICJicmFuY2hfZXhwb3J0cyIsICJicmFuY2hMb2NhbFRhc2siLCAiYnJhbmNoVGFzayIsICJjb250YWluc0RlbGV0ZUJyYW5jaENvbW1hbmQiLCAiZGVsZXRlQnJhbmNoVGFzayIsICJkZWxldGVCcmFuY2hlc1Rhc2siLCAiZGVsZXRlQ29tbWFuZHMiLCAiaXNEZWxldGUiLCAiYnJhbmNoZXMiLCAiZm9yY2VEZWxldGUiLCAiXyIsICJpbml0X2JyYW5jaCIsICJwYXJzZUNoZWNrSWdub3JlIiwgImluaXRfQ2hlY2tJZ25vcmUiLCAiY2hlY2tfaWdub3JlX2V4cG9ydHMiLCAiY2hlY2tJZ25vcmVUYXNrIiwgImluaXRfY2hlY2tfaWdub3JlIiwgImNsb25lX2V4cG9ydHMiLCAiY2xvbmVNaXJyb3JUYXNrIiwgImNsb25lVGFzayIsICJkaXNhbGxvd2VkQ29tbWFuZCIsICJpbml0X2Nsb25lIiwgInBhcnNlRmV0Y2hSZXN1bHQiLCAiaW5pdF9wYXJzZV9mZXRjaCIsICJ0cmFja2luZyIsICJmZXRjaF9leHBvcnRzIiwgImZldGNoVGFzayIsICJpbml0X2ZldGNoIiwgInBhcnNlTW92ZVJlc3VsdCIsICJpbml0X3BhcnNlX21vdmUiLCAibW92ZV9leHBvcnRzIiwgIm1vdmVUYXNrIiwgImluaXRfbW92ZSIsICJwdWxsX2V4cG9ydHMiLCAicHVsbFRhc2siLCAiX2Vycm9yIiwgIl9kb25lIiwgImluaXRfcHVsbCIsICJwYXJzZUdldFJlbW90ZXMiLCAicmVtb3RlcyIsICJmb3JFYWNoIiwgInBhcnNlR2V0UmVtb3Rlc1ZlcmJvc2UiLCAicHVycG9zZSIsICJpbml0X0dldFJlbW90ZVN1bW1hcnkiLCAicmVtb3RlX2V4cG9ydHMiLCAiYWRkUmVtb3RlVGFzayIsICJnZXRSZW1vdGVzVGFzayIsICJsaXN0UmVtb3Rlc1Rhc2siLCAicmVtb3RlVGFzayIsICJyZW1vdmVSZW1vdGVUYXNrIiwgInJlbW90ZVJlcG8iLCAiaW5pdF9yZW1vdGUiLCAic3Rhc2hfbGlzdF9leHBvcnRzIiwgInN0YXNoTGlzdFRhc2siLCAiaW5pdF9zdGFzaF9saXN0IiwgInN1Yl9tb2R1bGVfZXhwb3J0cyIsICJhZGRTdWJNb2R1bGVUYXNrIiwgImluaXRTdWJNb2R1bGVUYXNrIiwgInN1Yk1vZHVsZVRhc2siLCAidXBkYXRlU3ViTW9kdWxlVGFzayIsICJpbml0X3N1Yl9tb2R1bGUiLCAic2luZ2xlU29ydGVkIiwgImEiLCAiYiIsICJhSXNOdW0iLCAiYklzTnVtIiwgInNvcnRlZCIsICJ0b051bWJlciIsICJUYWdMaXN0IiwgInBhcnNlVGFnTGlzdCIsICJpbml0X1RhZ0xpc3QiLCAiY3VzdG9tU29ydCIsICJ0YWdzIiwgInRhZ0EiLCAidGFnQiIsICJwYXJ0c0EiLCAicGFydHNCIiwgImRpZmYiLCAidGFnX2V4cG9ydHMiLCAiYWRkQW5ub3RhdGVkVGFnVGFzayIsICJhZGRUYWdUYXNrIiwgInRhZ0xpc3RUYXNrIiwgImhhc0N1c3RvbVNvcnQiLCAidGFnTWVzc2FnZSIsICJpbml0X3RhZyIsICJyZXF1aXJlX2dpdCIsICJfX2NvbW1vbkpTIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fdG9Db21tb25KUyIsICJHaXQiLCAicGx1Z2lucyIsICJjcmVhdGVDbG9uZVRhc2siLCAiYXBpIiwgInJlcG9QYXRoIiwgImxvY2FsUGF0aCIsICJzaWxlbmNlIiwgInRhZ05hbWUiLCAiYnJhbmNoTmFtZXMiLCAiY3JlYXRlUmVzdENvbW1hbmRzIiwgInVzaW5nQ2xlYW5PcHRpb25zQXJyYXkiLCAicGF0aG5hbWVzIiwgImNoZWNrVHlwZSIsICJHaXRDb25zdHJ1Y3RFcnJvciIsICJHaXRQbHVnaW5FcnJvciIsICJwbHVnaW4iLCAiYWJvcnRQbHVnaW4iLCAic2lnbmFsIiwgIl9kYXRhIiwgImNvbnRleHQiLCAia2lsbCIsICJpc0NvbmZpZ1N3aXRjaCIsICJwcmV2ZW50UHJvdG9jb2xPdmVycmlkZSIsICJwcmV2ZW50VXBsb2FkUGFjayIsICJtZXRob2QiLCAiYmxvY2tVbnNhZmVPcGVyYXRpb25zUGx1Z2luIiwgImFsbG93VW5zYWZlUHJvdG9jb2xPdmVycmlkZSIsICJhbGxvd1Vuc2FmZVBhY2siLCAiY29tbWFuZENvbmZpZ1ByZWZpeGluZ1BsdWdpbiIsICJjb25maWd1cmF0aW9uIiwgIm5ldmVyIiwgImNvbXBsZXRpb25EZXRlY3Rpb25QbHVnaW4iLCAib25DbG9zZSIsICJvbkV4aXQiLCAiY3JlYXRlRXZlbnRzIiwgImV2ZW50cyIsICJjb25maWd1cmVUaW1lb3V0IiwgImNvZGUiLCAiZmxhZyIsICJldmVudCIsICJ0aW1lb3V0IiwgIl8wIiwgIl8xIiwgImNsb3NlIiwgIl9iIiwgImRlZmVyQ2xvc2UiLCAicXVpY2tDbG9zZSIsICJXUk9OR19OVU1CRVJfRVJSIiwgIldST05HX0NIQVJTX0VSUiIsICJpc0JhZEFyZ3VtZW50IiwgInRvQmluYXJ5Q29uZmlnIiwgImFsbG93VW5zYWZlIiwgImN1c3RvbUJpbmFyeVBsdWdpbiIsICJpc1Rhc2tFcnJvciIsICJnZXRFcnJvck1lc3NhZ2UiLCAiZXJyb3JEZXRlY3Rpb25IYW5kbGVyIiwgIm92ZXJ3cml0ZSIsICJpc0Vycm9yIiwgImVycm9yTWVzc2FnZSIsICJlcnJvckRldGVjdGlvblBsdWdpbiIsICJQbHVnaW5TdG9yZSIsICJsaXN0ZW5lciIsICJjb250ZXh0dWFsIiwgInByb2dyZXNzTW9uaXRvclBsdWdpbiIsICJwcm9ncmVzc0NvbW1hbmQiLCAicHJvZ3Jlc3NNZXRob2RzIiwgImNodW5rIiwgInByb2dyZXNzRXZlbnRTdGFnZSIsICJzcGF3bk9wdGlvbnNQbHVnaW4iLCAidGltZW91dFBsdWdpbiIsICJibG9jayIsICJ3YWl0IiwgInN0b3AiLCAic3VmZml4UGF0aHNQbHVnaW4iLCAiZ2l0SW5zdGFuY2VGYWN0b3J5IiwgInNpbXBsZUdpdCIsICJnaXRJbnN0YW5jZUZhY3RvcnkiLCAiaW1wb3J0X2NoaWxkX3Byb2Nlc3MiLCAiaW1wb3J0X3doaWNoIiwgImltcG9ydF9mcyIsICJpbXBvcnRfcGF0aCIsICJpbXBvcnRfZnMiLCAiYXNzZXJ0TnVtYmVyIiwgIm4iLCAiaXNCeXRlcyIsICJhIiwgImNoYWluIiwgImFyZ3MiLCAiaWQiLCAid3JhcCIsICJiIiwgImMiLCAiZW5jb2RlIiwgIngiLCAiZGVjb2RlIiwgImFscGhhYmV0IiwgImRpZ2l0cyIsICJpbnB1dCIsICJsZXR0ZXIiLCAiaW5kZXgiLCAiam9pbiIsICJzZXBhcmF0b3IiLCAiZnJvbSIsICJ0byIsICJjb252ZXJ0UmFkaXgiLCAiZGF0YSIsICJmcm9tIiwgInRvIiwgInBvcyIsICJyZXMiLCAiZGlnaXRzIiwgImQiLCAiY2FycnkiLCAiZG9uZSIsICJpIiwgImRpZ2l0IiwgImRpZ2l0QmFzZSIsICJyb3VuZGVkIiwgInJhZGl4IiwgIm51bSIsICJieXRlcyIsICJpc0J5dGVzIiwgImNvbnZlcnRSYWRpeCIsICJkaWdpdHMiLCAiZ2VuQmFzZTU4IiwgImFiYyIsICJjaGFpbiIsICJyYWRpeCIsICJhbHBoYWJldCIsICJqb2luIiwgImJhc2U1OCIsICJpbXBvcnRfcGF0aCIsICJpbXBvcnRfaWdub3JlIiwgImltcG9ydF9mcyIsICJERUZBVUxUX1NSQ19ST09UIiwgIkRFRkFVTFRfUk9VVEUiLCAiQ09ORklHX1NJR05BVFVSRSIsICJERUZBVUxUX1RBU0tESVIiLCAiZGVjb2RlIiwgImNvbmZpZyIsICJDT05GSUdfU0lHTkFUVVJFIiwgImJhc2U1OCIsICJlbmNvZGUiLCAiQ29tbWFuZHMiLCAiX0NvbW1hbmRzIiwgImNvbW1hbmQiLCAiZmlsdGVyIiwgImNtZHMiLCAiY29tbWFuZHMiLCAiY21kIiwgIlNjYWZmb2xkbHlDb25maWciLCAiX1NjYWZmb2xkbHlDb25maWciLCAiYmFzZURpciIsICJ3b3JrRGlyIiwgImNvbmZpZ3MiLCAibW9kZSIsICJwcm9qZWN0SnNvbiIsICJzZXJ2aWNlQ29uZmlnIiwgInNjYWZmb2xkbHkiLCAibmFtZSIsICJ2ZXJzaW9uIiwgImlkIiwgInJlIiwgInNhbml0aXplZCIsICJtYXRjaGVzIiwgInJ1bnRpbWUiLCAiaGFuZGxlciIsICJmaWxlcyIsICJzcmMiLCAiREVGQVVMVF9TUkNfUk9PVCIsICJiaW4iLCAic2NyaXB0cyIsICJzZXJ2aWNlcyIsICJzZXJ2aWNlIiwgIml4IiwgInJvdXRlcyIsICJERUZBVUxUX1JPVVRFIiwgInNjcmlwdCIsICJ3b3JrZGlyIiwgInNjaGVkdWxlIiwgInRhc2tkaXIiLCAicm9vdGRpciIsICJzaGVsbCIsICJzY2hlZHVsZXMiLCAicmVzb3VyY2VzIiwgInJ1bnRpbWVzIiwgInRpbWVvdXQiLCAibWVtb3J5U2l6ZSIsICJpZyIsICJpZ25vcmUiLCAiZmlsZW5hbWUiLCAiZmlsZSIsICJwYXRoIiwgInJlbGF0aXZlUGF0aCIsICJnZW5lcmF0ZWRGaWxlcyIsICJ1c2VyIiwgImltcG9ydF9wYXRoIiwgIkFic3RyYWN0UHJvamVjdCIsICJnaXRTZXJ2aWNlIiwgIndvcmtEaXIiLCAic3RhbmRhbG9uZUNvbmZpZ0ZpbGUiLCAic2NhZmZvbGRseUNvbmZpZyIsICJwYXJzZWQiLCAicHJvamVjdEpzb24iLCAiU2NhZmZvbGRseUNvbmZpZyIsICJOb2RlUHJvamVjdCIsICJBYnN0cmFjdFByb2plY3QiLCAibmFtZSIsICJwYWNrYWdlSnNvbkZpbGUiLCAicGFja2FnZUpzb24iLCAid29ya0RpciIsICJpc05vdGhpbmciLCAic3ViamVjdCIsICJpc09iamVjdCIsICJ0b0FycmF5IiwgInNlcXVlbmNlIiwgImV4dGVuZCIsICJ0YXJnZXQiLCAic291cmNlIiwgImluZGV4IiwgImxlbmd0aCIsICJrZXkiLCAic291cmNlS2V5cyIsICJyZXBlYXQiLCAic3RyaW5nIiwgImNvdW50IiwgInJlc3VsdCIsICJjeWNsZSIsICJpc05lZ2F0aXZlWmVybyIsICJudW1iZXIiLCAiaXNOb3RoaW5nXzEiLCAiaXNPYmplY3RfMSIsICJ0b0FycmF5XzEiLCAicmVwZWF0XzEiLCAiaXNOZWdhdGl2ZVplcm9fMSIsICJleHRlbmRfMSIsICJjb21tb24iLCAiZm9ybWF0RXJyb3IiLCAiZXhjZXB0aW9uIiwgImNvbXBhY3QiLCAid2hlcmUiLCAibWVzc2FnZSIsICJZQU1MRXhjZXB0aW9uJDEiLCAicmVhc29uIiwgIm1hcmsiLCAiZ2V0TGluZSIsICJidWZmZXIiLCAibGluZVN0YXJ0IiwgImxpbmVFbmQiLCAicG9zaXRpb24iLCAibWF4TGluZUxlbmd0aCIsICJoZWFkIiwgInRhaWwiLCAibWF4SGFsZkxlbmd0aCIsICJwYWRTdGFydCIsICJtYXgiLCAibWFrZVNuaXBwZXQiLCAib3B0aW9ucyIsICJyZSIsICJsaW5lU3RhcnRzIiwgImxpbmVFbmRzIiwgIm1hdGNoIiwgImZvdW5kTGluZU5vIiwgImkiLCAibGluZSIsICJsaW5lTm9MZW5ndGgiLCAic25pcHBldCIsICJUWVBFX0NPTlNUUlVDVE9SX09QVElPTlMiLCAiWUFNTF9OT0RFX0tJTkRTIiwgImNvbXBpbGVTdHlsZUFsaWFzZXMiLCAibWFwIiwgInN0eWxlIiwgImFsaWFzIiwgIlR5cGUkMSIsICJ0YWciLCAibmFtZSIsICJkYXRhIiwgInR5cGUiLCAiY29tcGlsZUxpc3QiLCAic2NoZW1hIiwgImN1cnJlbnRUeXBlIiwgIm5ld0luZGV4IiwgInByZXZpb3VzVHlwZSIsICJwcmV2aW91c0luZGV4IiwgImNvbXBpbGVNYXAiLCAiY29sbGVjdFR5cGUiLCAiU2NoZW1hJDEiLCAiZGVmaW5pdGlvbiIsICJpbXBsaWNpdCIsICJleHBsaWNpdCIsICJ0eXBlJDEiLCAic3RyIiwgInNlcSIsICJmYWlsc2FmZSIsICJyZXNvbHZlWWFtbE51bGwiLCAiY29uc3RydWN0WWFtbE51bGwiLCAiaXNOdWxsIiwgIm9iamVjdCIsICJfbnVsbCIsICJyZXNvbHZlWWFtbEJvb2xlYW4iLCAiY29uc3RydWN0WWFtbEJvb2xlYW4iLCAiaXNCb29sZWFuIiwgImJvb2wiLCAiaXNIZXhDb2RlIiwgImMiLCAiaXNPY3RDb2RlIiwgImlzRGVjQ29kZSIsICJyZXNvbHZlWWFtbEludGVnZXIiLCAiaGFzRGlnaXRzIiwgImNoIiwgImNvbnN0cnVjdFlhbWxJbnRlZ2VyIiwgInZhbHVlIiwgInNpZ24iLCAiaXNJbnRlZ2VyIiwgImludCIsICJvYmoiLCAiWUFNTF9GTE9BVF9QQVRURVJOIiwgInJlc29sdmVZYW1sRmxvYXQiLCAiY29uc3RydWN0WWFtbEZsb2F0IiwgIlNDSUVOVElGSUNfV0lUSE9VVF9ET1QiLCAicmVwcmVzZW50WWFtbEZsb2F0IiwgInJlcyIsICJpc0Zsb2F0IiwgImZsb2F0IiwgImpzb24iLCAiY29yZSIsICJZQU1MX0RBVEVfUkVHRVhQIiwgIllBTUxfVElNRVNUQU1QX1JFR0VYUCIsICJyZXNvbHZlWWFtbFRpbWVzdGFtcCIsICJjb25zdHJ1Y3RZYW1sVGltZXN0YW1wIiwgInllYXIiLCAibW9udGgiLCAiZGF5IiwgImhvdXIiLCAibWludXRlIiwgInNlY29uZCIsICJmcmFjdGlvbiIsICJkZWx0YSIsICJ0el9ob3VyIiwgInR6X21pbnV0ZSIsICJkYXRlIiwgInJlcHJlc2VudFlhbWxUaW1lc3RhbXAiLCAidGltZXN0YW1wIiwgInJlc29sdmVZYW1sTWVyZ2UiLCAibWVyZ2UiLCAiQkFTRTY0X01BUCIsICJyZXNvbHZlWWFtbEJpbmFyeSIsICJjb2RlIiwgImlkeCIsICJiaXRsZW4iLCAiY29uc3RydWN0WWFtbEJpbmFyeSIsICJ0YWlsYml0cyIsICJpbnB1dCIsICJiaXRzIiwgInJlcHJlc2VudFlhbWxCaW5hcnkiLCAiaXNCaW5hcnkiLCAiYmluYXJ5IiwgIl9oYXNPd25Qcm9wZXJ0eSQzIiwgIl90b1N0cmluZyQyIiwgInJlc29sdmVZYW1sT21hcCIsICJvYmplY3RLZXlzIiwgInBhaXIiLCAicGFpcktleSIsICJwYWlySGFzS2V5IiwgImNvbnN0cnVjdFlhbWxPbWFwIiwgIm9tYXAiLCAiX3RvU3RyaW5nJDEiLCAicmVzb2x2ZVlhbWxQYWlycyIsICJrZXlzIiwgImNvbnN0cnVjdFlhbWxQYWlycyIsICJwYWlycyIsICJfaGFzT3duUHJvcGVydHkkMiIsICJyZXNvbHZlWWFtbFNldCIsICJjb25zdHJ1Y3RZYW1sU2V0IiwgInNldCIsICJfZGVmYXVsdCIsICJfaGFzT3duUHJvcGVydHkkMSIsICJDT05URVhUX0ZMT1dfSU4iLCAiQ09OVEVYVF9GTE9XX09VVCIsICJDT05URVhUX0JMT0NLX0lOIiwgIkNPTlRFWFRfQkxPQ0tfT1VUIiwgIkNIT01QSU5HX0NMSVAiLCAiQ0hPTVBJTkdfU1RSSVAiLCAiQ0hPTVBJTkdfS0VFUCIsICJQQVRURVJOX05PTl9QUklOVEFCTEUiLCAiUEFUVEVSTl9OT05fQVNDSUlfTElORV9CUkVBS1MiLCAiUEFUVEVSTl9GTE9XX0lORElDQVRPUlMiLCAiUEFUVEVSTl9UQUdfSEFORExFIiwgIlBBVFRFUk5fVEFHX1VSSSIsICJfY2xhc3MiLCAiaXNfRU9MIiwgImlzX1dISVRFX1NQQUNFIiwgImlzX1dTX09SX0VPTCIsICJpc19GTE9XX0lORElDQVRPUiIsICJmcm9tSGV4Q29kZSIsICJsYyIsICJlc2NhcGVkSGV4TGVuIiwgImZyb21EZWNpbWFsQ29kZSIsICJzaW1wbGVFc2NhcGVTZXF1ZW5jZSIsICJjaGFyRnJvbUNvZGVwb2ludCIsICJzaW1wbGVFc2NhcGVDaGVjayIsICJzaW1wbGVFc2NhcGVNYXAiLCAiU3RhdGUkMSIsICJnZW5lcmF0ZUVycm9yIiwgInN0YXRlIiwgInRocm93RXJyb3IiLCAidGhyb3dXYXJuaW5nIiwgImRpcmVjdGl2ZUhhbmRsZXJzIiwgImFyZ3MiLCAibWFqb3IiLCAibWlub3IiLCAiaGFuZGxlIiwgInByZWZpeCIsICJjYXB0dXJlU2VnbWVudCIsICJzdGFydCIsICJlbmQiLCAiY2hlY2tKc29uIiwgIl9wb3NpdGlvbiIsICJfbGVuZ3RoIiwgIl9jaGFyYWN0ZXIiLCAiX3Jlc3VsdCIsICJtZXJnZU1hcHBpbmdzIiwgImRlc3RpbmF0aW9uIiwgIm92ZXJyaWRhYmxlS2V5cyIsICJxdWFudGl0eSIsICJzdG9yZU1hcHBpbmdQYWlyIiwgImtleVRhZyIsICJrZXlOb2RlIiwgInZhbHVlTm9kZSIsICJzdGFydExpbmUiLCAic3RhcnRMaW5lU3RhcnQiLCAic3RhcnRQb3MiLCAicmVhZExpbmVCcmVhayIsICJza2lwU2VwYXJhdGlvblNwYWNlIiwgImFsbG93Q29tbWVudHMiLCAiY2hlY2tJbmRlbnQiLCAibGluZUJyZWFrcyIsICJ0ZXN0RG9jdW1lbnRTZXBhcmF0b3IiLCAid3JpdGVGb2xkZWRMaW5lcyIsICJyZWFkUGxhaW5TY2FsYXIiLCAibm9kZUluZGVudCIsICJ3aXRoaW5GbG93Q29sbGVjdGlvbiIsICJwcmVjZWRpbmciLCAiZm9sbG93aW5nIiwgImNhcHR1cmVTdGFydCIsICJjYXB0dXJlRW5kIiwgImhhc1BlbmRpbmdDb250ZW50IiwgIl9saW5lIiwgIl9saW5lU3RhcnQiLCAiX2xpbmVJbmRlbnQiLCAiX2tpbmQiLCAicmVhZFNpbmdsZVF1b3RlZFNjYWxhciIsICJyZWFkRG91YmxlUXVvdGVkU2NhbGFyIiwgImhleExlbmd0aCIsICJoZXhSZXN1bHQiLCAidG1wIiwgInJlYWRGbG93Q29sbGVjdGlvbiIsICJyZWFkTmV4dCIsICJfcG9zIiwgIl90YWciLCAiX2FuY2hvciIsICJ0ZXJtaW5hdG9yIiwgImlzUGFpciIsICJpc0V4cGxpY2l0UGFpciIsICJpc01hcHBpbmciLCAiY29tcG9zZU5vZGUiLCAicmVhZEJsb2NrU2NhbGFyIiwgImZvbGRpbmciLCAiY2hvbXBpbmciLCAiZGlkUmVhZENvbnRlbnQiLCAiZGV0ZWN0ZWRJbmRlbnQiLCAidGV4dEluZGVudCIsICJlbXB0eUxpbmVzIiwgImF0TW9yZUluZGVudGVkIiwgInJlYWRCbG9ja1NlcXVlbmNlIiwgImRldGVjdGVkIiwgInJlYWRCbG9ja01hcHBpbmciLCAiZmxvd0luZGVudCIsICJhbGxvd0NvbXBhY3QiLCAiX2tleUxpbmUiLCAiX2tleUxpbmVTdGFydCIsICJfa2V5UG9zIiwgImF0RXhwbGljaXRLZXkiLCAicmVhZFRhZ1Byb3BlcnR5IiwgImlzVmVyYmF0aW0iLCAiaXNOYW1lZCIsICJ0YWdIYW5kbGUiLCAidGFnTmFtZSIsICJyZWFkQW5jaG9yUHJvcGVydHkiLCAicmVhZEFsaWFzIiwgInBhcmVudEluZGVudCIsICJub2RlQ29udGV4dCIsICJhbGxvd1RvU2VlayIsICJhbGxvd0Jsb2NrU3R5bGVzIiwgImFsbG93QmxvY2tTY2FsYXJzIiwgImFsbG93QmxvY2tDb2xsZWN0aW9ucyIsICJpbmRlbnRTdGF0dXMiLCAiYXROZXdMaW5lIiwgImhhc0NvbnRlbnQiLCAidHlwZUluZGV4IiwgInR5cGVRdWFudGl0eSIsICJ0eXBlTGlzdCIsICJibG9ja0luZGVudCIsICJyZWFkRG9jdW1lbnQiLCAiZG9jdW1lbnRTdGFydCIsICJkaXJlY3RpdmVOYW1lIiwgImRpcmVjdGl2ZUFyZ3MiLCAiaGFzRGlyZWN0aXZlcyIsICJsb2FkRG9jdW1lbnRzIiwgIm51bGxwb3MiLCAibG9hZEFsbCQxIiwgIml0ZXJhdG9yIiwgImRvY3VtZW50cyIsICJsb2FkJDEiLCAibG9hZEFsbF8xIiwgImxvYWRfMSIsICJsb2FkZXIiLCAiX3RvU3RyaW5nIiwgIl9oYXNPd25Qcm9wZXJ0eSIsICJDSEFSX0JPTSIsICJDSEFSX1RBQiIsICJDSEFSX0xJTkVfRkVFRCIsICJDSEFSX0NBUlJJQUdFX1JFVFVSTiIsICJDSEFSX1NQQUNFIiwgIkNIQVJfRVhDTEFNQVRJT04iLCAiQ0hBUl9ET1VCTEVfUVVPVEUiLCAiQ0hBUl9TSEFSUCIsICJDSEFSX1BFUkNFTlQiLCAiQ0hBUl9BTVBFUlNBTkQiLCAiQ0hBUl9TSU5HTEVfUVVPVEUiLCAiQ0hBUl9BU1RFUklTSyIsICJDSEFSX0NPTU1BIiwgIkNIQVJfTUlOVVMiLCAiQ0hBUl9DT0xPTiIsICJDSEFSX0VRVUFMUyIsICJDSEFSX0dSRUFURVJfVEhBTiIsICJDSEFSX1FVRVNUSU9OIiwgIkNIQVJfQ09NTUVSQ0lBTF9BVCIsICJDSEFSX0xFRlRfU1FVQVJFX0JSQUNLRVQiLCAiQ0hBUl9SSUdIVF9TUVVBUkVfQlJBQ0tFVCIsICJDSEFSX0dSQVZFX0FDQ0VOVCIsICJDSEFSX0xFRlRfQ1VSTFlfQlJBQ0tFVCIsICJDSEFSX1ZFUlRJQ0FMX0xJTkUiLCAiQ0hBUl9SSUdIVF9DVVJMWV9CUkFDS0VUIiwgIkVTQ0FQRV9TRVFVRU5DRVMiLCAiREVQUkVDQVRFRF9CT09MRUFOU19TWU5UQVgiLCAiREVQUkVDQVRFRF9CQVNFNjBfU1lOVEFYIiwgImNvbXBpbGVTdHlsZU1hcCIsICJlbmNvZGVIZXgiLCAiY2hhcmFjdGVyIiwgIlFVT1RJTkdfVFlQRV9TSU5HTEUiLCAiUVVPVElOR19UWVBFX0RPVUJMRSIsICJTdGF0ZSIsICJpbmRlbnRTdHJpbmciLCAic3BhY2VzIiwgImluZCIsICJuZXh0IiwgImdlbmVyYXRlTmV4dExpbmUiLCAibGV2ZWwiLCAidGVzdEltcGxpY2l0UmVzb2x2aW5nIiwgImlzV2hpdGVzcGFjZSIsICJpc1ByaW50YWJsZSIsICJpc05zQ2hhck9yV2hpdGVzcGFjZSIsICJpc1BsYWluU2FmZSIsICJwcmV2IiwgImluYmxvY2siLCAiY0lzTnNDaGFyT3JXaGl0ZXNwYWNlIiwgImNJc05zQ2hhciIsICJpc1BsYWluU2FmZUZpcnN0IiwgImlzUGxhaW5TYWZlTGFzdCIsICJjb2RlUG9pbnRBdCIsICJwb3MiLCAiZmlyc3QiLCAibmVlZEluZGVudEluZGljYXRvciIsICJsZWFkaW5nU3BhY2VSZSIsICJTVFlMRV9QTEFJTiIsICJTVFlMRV9TSU5HTEUiLCAiU1RZTEVfTElURVJBTCIsICJTVFlMRV9GT0xERUQiLCAiU1RZTEVfRE9VQkxFIiwgImNob29zZVNjYWxhclN0eWxlIiwgInNpbmdsZUxpbmVPbmx5IiwgImluZGVudFBlckxldmVsIiwgImxpbmVXaWR0aCIsICJ0ZXN0QW1iaWd1b3VzVHlwZSIsICJxdW90aW5nVHlwZSIsICJmb3JjZVF1b3RlcyIsICJjaGFyIiwgInByZXZDaGFyIiwgImhhc0xpbmVCcmVhayIsICJoYXNGb2xkYWJsZUxpbmUiLCAic2hvdWxkVHJhY2tXaWR0aCIsICJwcmV2aW91c0xpbmVCcmVhayIsICJwbGFpbiIsICJ3cml0ZVNjYWxhciIsICJpc2tleSIsICJpbmRlbnQiLCAidGVzdEFtYmlndWl0eSIsICJibG9ja0hlYWRlciIsICJkcm9wRW5kaW5nTmV3bGluZSIsICJmb2xkU3RyaW5nIiwgImVzY2FwZVN0cmluZyIsICJpbmRlbnRJbmRpY2F0b3IiLCAiY2xpcCIsICJrZWVwIiwgImNob21wIiwgIndpZHRoIiwgImxpbmVSZSIsICJuZXh0TEYiLCAiZm9sZExpbmUiLCAicHJldk1vcmVJbmRlbnRlZCIsICJtb3JlSW5kZW50ZWQiLCAiYnJlYWtSZSIsICJjdXJyIiwgImVzY2FwZVNlcSIsICJ3cml0ZUZsb3dTZXF1ZW5jZSIsICJ3cml0ZU5vZGUiLCAid3JpdGVCbG9ja1NlcXVlbmNlIiwgIndyaXRlRmxvd01hcHBpbmciLCAib2JqZWN0S2V5TGlzdCIsICJvYmplY3RLZXkiLCAib2JqZWN0VmFsdWUiLCAicGFpckJ1ZmZlciIsICJ3cml0ZUJsb2NrTWFwcGluZyIsICJleHBsaWNpdFBhaXIiLCAiZGV0ZWN0VHlwZSIsICJibG9jayIsICJpc2Jsb2Nrc2VxIiwgInRhZ1N0ciIsICJvYmplY3RPckFycmF5IiwgImR1cGxpY2F0ZUluZGV4IiwgImR1cGxpY2F0ZSIsICJnZXREdXBsaWNhdGVSZWZlcmVuY2VzIiwgIm9iamVjdHMiLCAiZHVwbGljYXRlc0luZGV4ZXMiLCAiaW5zcGVjdE5vZGUiLCAiZHVtcCQxIiwgImR1bXBfMSIsICJkdW1wZXIiLCAicmVuYW1lZCIsICJmcm9tIiwgInRvIiwgImxvYWQiLCAibG9hZGVyIiwgImxvYWRBbGwiLCAiZHVtcCIsICJkdW1wZXIiLCAic2FmZUxvYWQiLCAicmVuYW1lZCIsICJzYWZlTG9hZEFsbCIsICJzYWZlRHVtcCIsICJpbXBvcnRfZnMiLCAiaW1wb3J0X3BhdGgiLCAiR29sYW5nUHJvamVjdCIsICJBYnN0cmFjdFByb2plY3QiLCAibmFtZSIsICJnb01vZEZpbGUiLCAibmV3TGluZXMiLCAibGluZSIsICJ3b3JrRGlyIiwgImxpbmVzIiwgInByb2plY3ROYW1lIiwgImluc2lkZVJlcXVpcmVCbG9jayIsICJwYXJzZWQiLCAibW9kdWxlTWF0Y2giLCAicmVxdWlyZU1hdGNoIiwgInJlcXVpcmVTdGFydE1hdGNoIiwgInJlcXVpcmVFbmRNYXRjaCIsICJwcm9qZWN0TmFtZU1hdGNoIiwgIm11bHRpbGluZVJlcXVpcmVNYXRjaCIsICJwcm9qZWN0IiwgImNvbmZpZyIsICJwcm9qZWN0SnNvbiIsICJnb01vZCIsICJhY2MiLCAiZGVwIiwgImltcG9ydF9mcyIsICJpbXBvcnRfcGF0aCIsICJpbXBvcnRfeG1sMmpzIiwgIkRvdG5ldFByb2plY3QiLCAiQWJzdHJhY3RQcm9qZWN0IiwgIl9uYW1lIiwgIndvcmtEaXIiLCAiZmlsZXMiLCAiZmlsZSIsICJwcm9qZWN0RmlsZSIsICJjc1Byb2oiLCAicHJvamVjdCIsICJwcm9qZWN0SnNvbiIsICJwcm9qZWN0TmFtZSIsICJjc1Byb2plY3QiLCAicHJvcGVydHlHcm91cCIsICJ2ZXJzaW9uIiwgIlNjYWZmb2xkbHkiLCAiYmluIiwgImFjYyIsICJiaW5FbnRyeSIsICJuYW1lIiwgInZhbHVlIiwgInNlcnZpY2VzIiwgInNlcnZpY2UiLCAic2NyaXB0cyIsICJzY3JpcHQiLCAiaW1wb3J0X2ZzIiwgImltcG9ydF9wYXRoIiwgImdldExpbmVDb2xGcm9tUHRyIiwgInN0cmluZyIsICJwdHIiLCAibGluZXMiLCAibWFrZUNvZGVCbG9jayIsICJsaW5lIiwgImNvbHVtbiIsICJjb2RlYmxvY2siLCAibnVtYmVyTGVuIiwgImkiLCAibCIsICJUb21sRXJyb3IiLCAibWVzc2FnZSIsICJvcHRpb25zIiwgImluZGV4T2ZOZXdsaW5lIiwgInN0ciIsICJzdGFydCIsICJlbmQiLCAiaWR4IiwgInNraXBDb21tZW50IiwgInB0ciIsICJjIiwgIlRvbWxFcnJvciIsICJza2lwVm9pZCIsICJiYW5OZXdMaW5lcyIsICJiYW5Db21tZW50cyIsICJza2lwVW50aWwiLCAic2VwIiwgImkiLCAiZ2V0U3RyaW5nRW5kIiwgInNlZWsiLCAiZmlyc3QiLCAidGFyZ2V0IiwgIkRBVEVfVElNRV9SRSIsICJUb21sRGF0ZSIsICJfVG9tbERhdGUiLCAiI2hhc0RhdGUiLCAiI2hhc1RpbWUiLCAiI29mZnNldCIsICJkYXRlIiwgImhhc0RhdGUiLCAiaGFzVGltZSIsICJvZmZzZXQiLCAibWF0Y2giLCAiaXNvIiwgImpzRGF0ZSIsICJJTlRfUkVHRVgiLCAiRkxPQVRfUkVHRVgiLCAiTEVBRElOR19aRVJPIiwgIkVTQ0FQRV9SRUdFWCIsICJFU0NfTUFQIiwgInBhcnNlU3RyaW5nIiwgInN0ciIsICJwdHIiLCAiZW5kUHRyIiwgImlzTGl0ZXJhbCIsICJpc011bHRpbGluZSIsICJ0bXAiLCAiaXNFc2NhcGUiLCAicGFyc2VkIiwgInNsaWNlU3RhcnQiLCAiYyIsICJUb21sRXJyb3IiLCAiY29kZSIsICJza2lwVm9pZCIsICJwYXJzZVZhbHVlIiwgInZhbHVlIiwgInRvbWwiLCAiaXNJbnQiLCAibnVtZXJpYyIsICJkYXRlIiwgIlRvbWxEYXRlIiwgInNsaWNlQW5kVHJpbUVuZE9mIiwgInN0ciIsICJzdGFydFB0ciIsICJlbmRQdHIiLCAiYWxsb3dOZXdMaW5lcyIsICJ2YWx1ZSIsICJjb21tZW50SWR4IiwgInNraXBDb21tZW50IiwgInRyaW1tZWQiLCAibmV3bGluZUlkeCIsICJUb21sRXJyb3IiLCAiZXh0cmFjdFZhbHVlIiwgInB0ciIsICJlbmQiLCAiYyIsICJwYXJzZUFycmF5IiwgInBhcnNlSW5saW5lVGFibGUiLCAibmV3UHRyIiwgInNraXBVbnRpbCIsICJuZXh0TmV3TGluZSIsICJpbmRleE9mTmV3bGluZSIsICJnZXRTdHJpbmdFbmQiLCAicGFyc2VkIiwgInBhcnNlU3RyaW5nIiwgInNraXBWb2lkIiwgInNsaWNlIiwgInBhcnNlVmFsdWUiLCAiS0VZX1BBUlRfUkUiLCAicGFyc2VLZXkiLCAic3RyIiwgInB0ciIsICJlbmQiLCAiZG90IiwgInBhcnNlZCIsICJlbmRQdHIiLCAiVG9tbEVycm9yIiwgImMiLCAiZW9zIiwgImdldFN0cmluZ0VuZCIsICJzdHJFbmQiLCAibmV3TGluZSIsICJpbmRleE9mTmV3bGluZSIsICJwYXJzZVN0cmluZyIsICJwYXJ0IiwgInNraXBWb2lkIiwgInBhcnNlSW5saW5lVGFibGUiLCAicmVzIiwgInNlZW4iLCAiY29tbWEiLCAiayIsICJ0IiwgImhhc093biIsICJrZXkiLCAia2V5RW5kUHRyIiwgImkiLCAidmFsdWUiLCAidmFsdWVFbmRQdHIiLCAiZXh0cmFjdFZhbHVlIiwgInBhcnNlQXJyYXkiLCAic2tpcENvbW1lbnQiLCAiZSIsICJwZWVrVGFibGUiLCAia2V5IiwgInRhYmxlIiwgIm1ldGEiLCAidHlwZSIsICJ0IiwgIm0iLCAiayIsICJoYXNPd24iLCAic3RhdGUiLCAiaSIsICJsIiwgInBhcnNlIiwgInRvbWwiLCAicmVzIiwgInRibCIsICJwdHIiLCAic2tpcFZvaWQiLCAiaXNUYWJsZUFycmF5IiwgInBhcnNlS2V5IiwgIlRvbWxFcnJvciIsICJwIiwgInYiLCAiZXh0cmFjdFZhbHVlIiwgIkJBUkVfS0VZIiwgImV4dGVuZGVkVHlwZU9mIiwgIm9iaiIsICJ0eXBlIiwgImlzQXJyYXlPZlRhYmxlcyIsICJpIiwgImZvcm1hdFN0cmluZyIsICJzIiwgInN0cmluZ2lmeVZhbHVlIiwgInZhbCIsICJzdHJpbmdpZnlJbmxpbmVUYWJsZSIsICJzdHJpbmdpZnlBcnJheSIsICJrZXlzIiwgInJlcyIsICJrIiwgImFycmF5IiwgInN0cmluZ2lmeUFycmF5VGFibGUiLCAia2V5IiwgInN0cmluZ2lmeVRhYmxlIiwgInByZWZpeCIsICJwcmVhbWJsZSIsICJ0YWJsZXMiLCAidGJsS2V5IiwgInN0cmluZ2lmeSIsICJQeXRob25Qcm9qZWN0IiwgIkFic3RyYWN0UHJvamVjdCIsICJuYW1lIiwgInB5UHJvamVjdEZpbGUiLCAicHlQcm9qZWN0IiwgInBhcnNlIiwgInN0cmluZ2lmeSIsICJ3b3JrRGlyIiwgInByb2plY3QiLCAicHJvamVjdEpzb24iLCAicHlwcm9qZWN0VG9tbCIsICJkZXBlbmRlbmNpZXMiLCAiYWNjIiwgImtleSIsICJ2YWx1ZSIsICJzZXJ2aWNlcyIsICJzY2FmZm9sZGx5IiwgInBrZyIsICJpbXBvcnRfZnMiLCAiaW1wb3J0X3BhdGgiLCAiUnVzdFByb2plY3QiLCAiQWJzdHJhY3RQcm9qZWN0IiwgIm5hbWUiLCAiY2FyZ29Ub21sRmlsZSIsICJjYXJnb1RvbWwiLCAicGFyc2UiLCAic3RyaW5naWZ5IiwgIndvcmtEaXIiLCAicHJvamVjdCIsICJwcm9qZWN0SnNvbiIsICJhY2MiLCAia2V5IiwgInZhbHVlIiwgImltcG9ydF9lanMiLCAiY3dkIiwgImZldGNoRnJhbWV3b3JrcyIsICJpbmRleFlhbWwiLCAiYXhpb3NfZGVmYXVsdCIsICJpbmRleCIsICJsb2FkIiwgImFjYyIsICJsYW5ndWFnZSIsICJ2YXJpYW50cyIsICJ5ZWxsb3ciLCAiYWNjViIsICJ2YXJpYW50IiwgImZyYW1ld29ya1ZhcmlhbnQiLCAiZ2VuZXJhdGVSZWFkbWUiLCAicmVhZG1lVGVtcGxhdGUiLCAiZWpzIiwgInRlbXBsYXRlcyIsICJmcmFtZXdvcmtzIiwgImYiLCAidiIsICJhIiwgImIiLCAiZ2V0VmFyaWFudCIsICJicmFuY2giLCAiZnJhbWV3b3JrIiwgInJlbmFtZUZpbGVzIiwgImRlZmF1bHRUYXJnZXREaXIiLCAiZXhlYyIsICJ3b3JraW5nRGlyZWN0b3J5IiwgImFyZ3MiLCAicmVzb2x2ZSIsICJyZWplY3QiLCAiZW52IiwgImNvbW1hbmQiLCAid2hpY2giLCAicCIsICJwcm9jIiwgImVyciIsICJjb2RlIiwgImZvcm1hdFRhcmdldERpciIsICJ0YXJnZXREaXIiLCAiaXNFbXB0eSIsICJmaWxlUGF0aCIsICJmaWxlcyIsICJmcyIsICJpc1ZhbGlkUGFja2FnZU5hbWUiLCAicHJvamVjdE5hbWUiLCAidG9WYWxpZFBhY2thZ2VOYW1lIiwgImVtcHR5RGlyIiwgImRpciIsICJmaWxlIiwgInBhdGgiLCAiZG93bmxvYWRBbmRFeHRyYWN0WmlwIiwgImRvd25sb2FkVXJsIiwgInJlcG8iLCAidXJsIiwgInJlc3BvbnNlIiwgInRlbXBEaXJQYXRoIiwgIm9zIiwgInRlbXBGaWxlTmFtZSIsICJ0ZW1wWmlwUGF0aCIsICJBZG1aaXAiLCAiZXJyb3IiLCAiY29weSIsICJzcmMiLCAiZGVzdCIsICJzcmNGaWxlIiwgImRlc3RGaWxlIiwgInNhbml0aXplIiwgImZpbGVuYW1lIiwgInN0YXJ0TWFya2VyIiwgImVuZE1hcmtlciIsICJsaW5lcyIsICJzdGFydExpbmUiLCAiZW5kTGluZSIsICJpIiwgImdldFByb2plY3QiLCAicHJvamVjdFR5cGUiLCAid29ya2RpciIsICJOb2RlUHJvamVjdCIsICJHb2xhbmdQcm9qZWN0IiwgIkRvdG5ldFByb2plY3QiLCAiUHl0aG9uUHJvamVjdCIsICJSdXN0UHJvamVjdCIsICJydW4iLCAiYXJndiIsICJtaW5pbWlzdCIsICJhcmciLCAiYXJnVGFyZ2V0RGlyIiwgImFyZ1RlbXBsYXRlIiwgImdldFByb2plY3ROYW1lIiwgInJlc3VsdCIsICJwcm9tcHRzIiwgInJlc2V0IiwgInN0YXRlIiwgIl8iLCAib3ZlcndyaXRlIiwgInJlZCIsICJmcmFtZXdvcmtDb2xvciIsICJ2YXJpYW50Q29sb3IiLCAiY2FuY2VsbGVkIiwgInBhY2thZ2VOYW1lIiwgImV4Y2x1ZGVGaWxlcyIsICJ0eXBlIiwgImRldkNvbW1hbmQiLCAidmFyaWFudEJyYW5jaCIsICJyb290IiwgInRlbXBsYXRlRGlyIiwgIndyaXRlIiwgImNvbnRlbnQiLCAidGFyZ2V0UGF0aCIsICJwcm9qZWN0IiwgImluc3RhbGxDb21tYW5kcyIsICJnaXQiLCAic2ltcGxlR2l0IiwgImNkUHJvamVjdE5hbWUiXQp9Cg==