"use strict";var M0=Object.create;var ln=Object.defineProperty;var q0=Object.getOwnPropertyDescriptor;var B0=Object.getOwnPropertyNames;var U0=Object.getPrototypeOf,$0=Object.prototype.hasOwnProperty;var k=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),al=(e,t)=>{for(var i in t)ln(e,i,{get:t[i],enumerable:!0})},cl=(e,t,i,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of B0(t))!$0.call(e,n)&&n!==i&&ln(e,n,{get:()=>t[n],enumerable:!(r=q0(t,n))||r.enumerable});return e};var se=(e,t,i)=>(i=e!=null?M0(U0(e)):{},cl(t||!e||!e.__esModule?ln(i,"default",{value:e,enumerable:!0}):i,e)),z0=e=>cl(ln({},"__esModule",{value:!0}),e);var co=k((dR,ul)=>{"use strict";ul.exports={LOCHDR:30,LOCSIG:67324752,LOCVER:4,LOCFLG:6,LOCHOW:8,LOCTIM:10,LOCCRC:14,LOCSIZ:18,LOCLEN:22,LOCNAM:26,LOCEXT:28,EXTSIG:134695760,EXTHDR:16,EXTCRC:4,EXTSIZ:8,EXTLEN:12,CENHDR:46,CENSIG:33639248,CENVEM:4,CENVER:6,CENFLG:8,CENHOW:10,CENTIM:12,CENCRC:16,CENSIZ:20,CENLEN:24,CENNAM:28,CENEXT:30,CENCOM:32,CENDSK:34,CENATT:36,CENATX:38,CENOFF:42,ENDHDR:22,ENDSIG:101010256,ENDSUB:8,ENDTOT:10,ENDSIZ:12,ENDOFF:16,ENDCOM:20,END64HDR:20,END64SIG:117853008,END64START:4,END64OFF:8,END64NUMDISKS:16,ZIP64SIG:101075792,ZIP64HDR:56,ZIP64LEAD:12,ZIP64SIZE:4,ZIP64VEM:12,ZIP64VER:14,ZIP64DSK:16,ZIP64DSKDIR:20,ZIP64SUB:24,ZIP64TOT:32,ZIP64SIZB:40,ZIP64OFF:48,ZIP64EXTRA:56,STORED:0,SHRUNK:1,REDUCED1:2,REDUCED2:3,REDUCED3:4,REDUCED4:5,IMPLODED:6,DEFLATED:8,ENHANCED_DEFLATED:9,PKWARE:10,BZIP2:12,LZMA:14,IBM_TERSE:18,IBM_LZ77:19,AES_ENCRYPT:99,FLG_ENC:1,FLG_COMP1:2,FLG_COMP2:4,FLG_DESC:8,FLG_ENH:16,FLG_PATCH:32,FLG_STR:64,FLG_EFS:2048,FLG_MSK:4096,FILE:2,BUFFER:1,NONE:0,EF_ID:0,EF_SIZE:2,ID_ZIP64:1,ID_AVINFO:7,ID_PFS:8,ID_OS2:9,ID_NTFS:10,ID_OPENVMS:12,ID_UNIX:13,ID_FORK:14,ID_PATCH:15,ID_X509_PKCS7:20,ID_X509_CERTID_F:21,ID_X509_CERTID_C:22,ID_STRONGENC:23,ID_RECORD_MGT:24,ID_X509_PKCS7_RL:25,ID_IBM1:101,ID_IBM2:102,ID_POSZIP:18064,EF_ZIP64_OR_32:4294967295,EF_ZIP64_OR_16:65535,EF_ZIP64_SUNCOMP:0,EF_ZIP64_SCOMP:8,EF_ZIP64_RHO:16,EF_ZIP64_DSN:24}});var pn=k(pl=>{"use strict";var ll={INVALID_LOC:"Invalid LOC header (bad signature)",INVALID_CEN:"Invalid CEN header (bad signature)",INVALID_END:"Invalid END header (bad signature)",DESCRIPTOR_NOT_EXIST:"No descriptor present",DESCRIPTOR_UNKNOWN:"Unknown descriptor format",DESCRIPTOR_FAULTY:"Descriptor data is malformed",NO_DATA:"Nothing to decompress",BAD_CRC:"CRC32 checksum failed {0}",FILE_IN_THE_WAY:"There is a file in the way: {0}",UNKNOWN_METHOD:"Invalid/unsupported compression method",AVAIL_DATA:"inflate::Available inflate data did not terminate",INVALID_DISTANCE:"inflate::Invalid literal/length or distance code in fixed or dynamic block",TO_MANY_CODES:"inflate::Dynamic block code description: too many length or distance codes",INVALID_REPEAT_LEN:"inflate::Dynamic block code description: repeat more than specified lengths",INVALID_REPEAT_FIRST:"inflate::Dynamic block code description: repeat lengths with no first length",INCOMPLETE_CODES:"inflate::Dynamic block code description: code lengths codes incomplete",INVALID_DYN_DISTANCE:"inflate::Dynamic block code description: invalid distance code lengths",INVALID_CODES_LEN:"inflate::Dynamic block code description: invalid literal/length code lengths",INVALID_STORE_BLOCK:"inflate::Stored block length did not match one's complement",INVALID_BLOCK_TYPE:"inflate::Invalid block type (type == 3)",CANT_EXTRACT_FILE:"Could not extract the file",CANT_OVERRIDE:"Target file already exists",DISK_ENTRY_TOO_LARGE:"Number of disk entries is too large",NO_ZIP:"No zip file was loaded",NO_ENTRY:"Entry doesn't exist",DIRECTORY_CONTENT_ERROR:"A directory cannot have content",FILE_NOT_FOUND:'File not found: "{0}"',NOT_IMPLEMENTED:"Not implemented",INVALID_FILENAME:"Invalid filename",INVALID_FORMAT:"Invalid or unsupported zip format. No END header found",INVALID_PASS_PARAM:"Incompatible password parameter",WRONG_PASSWORD:"Wrong Password",COMMENT_TOO_LONG:"Comment is too long",EXTRA_FIELD_PARSE_ERROR:"Extra field parsing error"};function H0(e){return function(...t){return t.length&&(e=e.replace(/\{(\d)\}/g,(i,r)=>t[r]||"")),new Error("ADM-ZIP: "+e)}}for(let e of Object.keys(ll))pl[e]=H0(ll[e])});var gl=k((hR,ml)=>{"use strict";var G0=require("fs"),ke=require("path"),dl=co(),V0=pn(),X0=typeof process=="object"&&process.platform==="win32",fl=e=>typeof e=="object"&&e!==null,hl=new Uint32Array(256).map((e,t)=>{for(let i=0;i<8;i++)t&1?t=3988292384^t>>>1:t>>>=1;return t>>>0});function ge(e){this.sep=ke.sep,this.fs=G0,fl(e)&&fl(e.fs)&&typeof e.fs.statSync=="function"&&(this.fs=e.fs)}ml.exports=ge;ge.prototype.makeDir=function(e){let t=this;function i(r){let n=r.split(t.sep)[0];r.split(t.sep).forEach(function(s){if(!(!s||s.substr(-1,1)===":")){n+=t.sep+s;var o;try{o=t.fs.statSync(n)}catch{t.fs.mkdirSync(n)}if(o&&o.isFile())throw V0.FILE_IN_THE_WAY(`"${n}"`)}})}i(e)};ge.prototype.writeFileTo=function(e,t,i,r){let n=this;if(n.fs.existsSync(e)){if(!i)return!1;var s=n.fs.statSync(e);if(s.isDirectory())return!1}var o=ke.dirname(e);n.fs.existsSync(o)||n.makeDir(o);var a;try{a=n.fs.openSync(e,"w",438)}catch{n.fs.chmodSync(e,438),a=n.fs.openSync(e,"w",438)}if(a)try{n.fs.writeSync(a,t,0,t.length,0)}finally{n.fs.closeSync(a)}return n.fs.chmodSync(e,r||438),!0};ge.prototype.writeFileToAsync=function(e,t,i,r,n){typeof r=="function"&&(n=r,r=void 0);let s=this;s.fs.exists(e,function(o){if(o&&!i)return n(!1);s.fs.stat(e,function(a,c){if(o&&c.isDirectory())return n(!1);var u=ke.dirname(e);s.fs.exists(u,function(f){f||s.makeDir(u),s.fs.open(e,"w",438,function(g,x){g?s.fs.chmod(e,438,function(){s.fs.open(e,"w",438,function(l,m){s.fs.write(m,t,0,t.length,0,function(){s.fs.close(m,function(){s.fs.chmod(e,r||438,function(){n(!0)})})})})}):x?s.fs.write(x,t,0,t.length,0,function(){s.fs.close(x,function(){s.fs.chmod(e,r||438,function(){n(!0)})})}):s.fs.chmod(e,r||438,function(){n(!0)})})})})})};ge.prototype.findFiles=function(e){let t=this;function i(r,n,s){typeof n=="boolean"&&(s=n,n=void 0);let o=[];return t.fs.readdirSync(r).forEach(function(a){let c=ke.join(r,a),u=t.fs.statSync(c);(!n||n.test(c))&&o.push(ke.normalize(c)+(u.isDirectory()?t.sep:"")),u.isDirectory()&&s&&(o=o.concat(i(c,n,s)))}),o}return i(e,void 0,!0)};ge.prototype.findFilesAsync=function(e,t){let i=this,r=[];i.fs.readdir(e,function(n,s){if(n)return t(n);let o=s.length;if(!o)return t(null,r);s.forEach(function(a){a=ke.join(e,a),i.fs.stat(a,function(c,u){if(c)return t(c);u&&(r.push(ke.normalize(a)+(u.isDirectory()?i.sep:"")),u.isDirectory()?i.findFilesAsync(a,function(f,g){if(f)return t(f);r=r.concat(g),--o||t(null,r)}):--o||t(null,r))})})})};ge.prototype.getAttributes=function(){};ge.prototype.setAttributes=function(){};ge.crc32update=function(e,t){return hl[(e^t)&255]^e>>>8};ge.crc32=function(e){typeof e=="string"&&(e=Buffer.from(e,"utf8"));let t=e.length,i=-1;for(let r=0;r<t;)i=ge.crc32update(i,e[r++]);return~i>>>0};ge.methodToString=function(e){switch(e){case dl.STORED:return"STORED ("+e+")";case dl.DEFLATED:return"DEFLATED ("+e+")";default:return"UNSUPPORTED ("+e+")"}};ge.canonical=function(e){if(!e)return"";let t=ke.posix.normalize("/"+e.split("\\").join("/"));return ke.join(".",t)};ge.zipnamefix=function(e){if(!e)return"";let t=ke.posix.normalize("/"+e.split("\\").join("/"));return ke.posix.join(".",t)};ge.findLast=function(e,t){if(!Array.isArray(e))throw new TypeError("arr is not array");let i=e.length>>>0;for(let r=i-1;r>=0;r--)if(t(e[r],r,e))return e[r]};ge.sanitize=function(e,t){e=ke.resolve(ke.normalize(e));for(var i=t.split("/"),r=0,n=i.length;r<n;r++){var s=ke.normalize(ke.join(e,i.slice(r,n).join(ke.sep)));if(s.indexOf(e)===0)return s}return ke.normalize(ke.join(e,ke.basename(t)))};ge.toBuffer=function(t,i){return Buffer.isBuffer(t)?t:t instanceof Uint8Array?Buffer.from(t):typeof t=="string"?i(t):Buffer.alloc(0)};ge.readBigUInt64LE=function(e,t){var i=Buffer.from(e.slice(t,t+8));return i.swap64(),parseInt(`0x${i.toString("hex")}`)};ge.fromDOS2Date=function(e){return new Date((e>>25&127)+1980,Math.max((e>>21&15)-1,0),Math.max(e>>16&31,1),e>>11&31,e>>5&63,(e&31)<<1)};ge.fromDate2DOS=function(e){let t=0,i=0;return e.getFullYear()>1979&&(t=(e.getFullYear()-1980&127)<<9|e.getMonth()+1<<5|e.getDate(),i=e.getHours()<<11|e.getMinutes()<<5|e.getSeconds()>>1),t<<16|i};ge.isWin=X0;ge.crcTable=hl});var vl=k((mR,xl)=>{"use strict";var Y0=require("path");xl.exports=function(e,{fs:t}){var i=e||"",r=s(),n=null;function s(){return{directory:!1,readonly:!1,hidden:!1,executable:!1,mtime:0,atime:0}}return i&&t.existsSync(i)?(n=t.statSync(i),r.directory=n.isDirectory(),r.mtime=n.mtime,r.atime=n.atime,r.executable=(73&n.mode)!==0,r.readonly=(128&n.mode)===0,r.hidden=Y0.basename(i)[0]==="."):console.warn("Invalid path: "+i),{get directory(){return r.directory},get readOnly(){return r.readonly},get hidden(){return r.hidden},get mtime(){return r.mtime},get atime(){return r.atime},get executable(){return r.executable},decodeAttributes:function(){},encodeAttributes:function(){},toJSON:function(){return{path:i,isDirectory:r.directory,isReadOnly:r.readonly,isHidden:r.hidden,isExecutable:r.executable,mTime:r.mtime,aTime:r.atime}},toString:function(){return JSON.stringify(this.toJSON(),null,"	")}}}});var bl=k((gR,yl)=>{"use strict";yl.exports={efs:!0,encode:e=>Buffer.from(e,"utf8"),decode:e=>e.toString("utf8")}});var ki=k((xR,Li)=>{"use strict";Li.exports=gl();Li.exports.Constants=co();Li.exports.Errors=pn();Li.exports.FileAttr=vl();Li.exports.decoder=bl()});var El=k((vR,wl)=>{"use strict";var Wt=ki(),U=Wt.Constants;wl.exports=function(){var e=20,t=10,i=0,r=0,n=0,s=0,o=0,a=0,c=0,u=0,f=0,g=0,x=0,l=0,m=0;e|=Wt.isWin?2560:768,i|=U.FLG_EFS;let v={extraLen:0},w=p=>Math.max(0,p)>>>0,_=p=>Math.max(0,p)&65535,E=p=>Math.max(0,p)&255;return n=Wt.fromDate2DOS(new Date),{get made(){return e},set made(p){e=p},get version(){return t},set version(p){t=p},get flags(){return i},set flags(p){i=p},get flags_efs(){return(i&U.FLG_EFS)>0},set flags_efs(p){p?i|=U.FLG_EFS:i&=~U.FLG_EFS},get flags_desc(){return(i&U.FLG_DESC)>0},set flags_desc(p){p?i|=U.FLG_DESC:i&=~U.FLG_DESC},get method(){return r},set method(p){switch(p){case U.STORED:this.version=10;case U.DEFLATED:default:this.version=20}r=p},get time(){return Wt.fromDOS2Date(this.timeval)},set time(p){this.timeval=Wt.fromDate2DOS(p)},get timeval(){return n},set timeval(p){n=w(p)},get timeHighByte(){return E(n>>>8)},get crc(){return s},set crc(p){s=w(p)},get compressedSize(){return o},set compressedSize(p){o=w(p)},get size(){return a},set size(p){a=w(p)},get fileNameLength(){return c},set fileNameLength(p){c=p},get extraLength(){return u},set extraLength(p){u=p},get extraLocalLength(){return v.extraLen},set extraLocalLength(p){v.extraLen=p},get commentLength(){return f},set commentLength(p){f=p},get diskNumStart(){return g},set diskNumStart(p){g=w(p)},get inAttr(){return x},set inAttr(p){x=w(p)},get attr(){return l},set attr(p){l=w(p)},get fileAttr(){return(l||0)>>16&4095},get offset(){return m},set offset(p){m=w(p)},get encrypted(){return(i&U.FLG_ENC)===U.FLG_ENC},get centralHeaderSize(){return U.CENHDR+c+u+f},get realDataOffset(){return m+U.LOCHDR+v.fnameLen+v.extraLen},get localHeader(){return v},loadLocalHeaderFromBinary:function(p){var d=p.slice(m,m+U.LOCHDR);if(d.readUInt32LE(0)!==U.LOCSIG)throw Wt.Errors.INVALID_LOC();v.version=d.readUInt16LE(U.LOCVER),v.flags=d.readUInt16LE(U.LOCFLG),v.method=d.readUInt16LE(U.LOCHOW),v.time=d.readUInt32LE(U.LOCTIM),v.crc=d.readUInt32LE(U.LOCCRC),v.compressedSize=d.readUInt32LE(U.LOCSIZ),v.size=d.readUInt32LE(U.LOCLEN),v.fnameLen=d.readUInt16LE(U.LOCNAM),v.extraLen=d.readUInt16LE(U.LOCEXT);let h=m+U.LOCHDR+v.fnameLen,b=h+v.extraLen;return p.slice(h,b)},loadFromBinary:function(p){if(p.length!==U.CENHDR||p.readUInt32LE(0)!==U.CENSIG)throw Wt.Errors.INVALID_CEN();e=p.readUInt16LE(U.CENVEM),t=p.readUInt16LE(U.CENVER),i=p.readUInt16LE(U.CENFLG),r=p.readUInt16LE(U.CENHOW),n=p.readUInt32LE(U.CENTIM),s=p.readUInt32LE(U.CENCRC),o=p.readUInt32LE(U.CENSIZ),a=p.readUInt32LE(U.CENLEN),c=p.readUInt16LE(U.CENNAM),u=p.readUInt16LE(U.CENEXT),f=p.readUInt16LE(U.CENCOM),g=p.readUInt16LE(U.CENDSK),x=p.readUInt16LE(U.CENATT),l=p.readUInt32LE(U.CENATX),m=p.readUInt32LE(U.CENOFF)},localHeaderToBinary:function(){var p=Buffer.alloc(U.LOCHDR);return p.writeUInt32LE(U.LOCSIG,0),p.writeUInt16LE(t,U.LOCVER),p.writeUInt16LE(i,U.LOCFLG),p.writeUInt16LE(r,U.LOCHOW),p.writeUInt32LE(n,U.LOCTIM),p.writeUInt32LE(s,U.LOCCRC),p.writeUInt32LE(o,U.LOCSIZ),p.writeUInt32LE(a,U.LOCLEN),p.writeUInt16LE(c,U.LOCNAM),p.writeUInt16LE(v.extraLen,U.LOCEXT),p},centralHeaderToBinary:function(){var p=Buffer.alloc(U.CENHDR+c+u+f);return p.writeUInt32LE(U.CENSIG,0),p.writeUInt16LE(e,U.CENVEM),p.writeUInt16LE(t,U.CENVER),p.writeUInt16LE(i,U.CENFLG),p.writeUInt16LE(r,U.CENHOW),p.writeUInt32LE(n,U.CENTIM),p.writeUInt32LE(s,U.CENCRC),p.writeUInt32LE(o,U.CENSIZ),p.writeUInt32LE(a,U.CENLEN),p.writeUInt16LE(c,U.CENNAM),p.writeUInt16LE(u,U.CENEXT),p.writeUInt16LE(f,U.CENCOM),p.writeUInt16LE(g,U.CENDSK),p.writeUInt16LE(x,U.CENATT),p.writeUInt32LE(l,U.CENATX),p.writeUInt32LE(m,U.CENOFF),p},toJSON:function(){let p=function(d){return d+" bytes"};return{made:e,version:t,flags:i,method:Wt.methodToString(r),time:this.time,crc:"0x"+s.toString(16).toUpperCase(),compressedSize:p(o),size:p(a),fileNameLength:p(c),extraLength:p(u),commentLength:p(f),diskNumStart:g,inAttr:x,attr:l,offset:m,centralHeaderSize:p(U.CENHDR+c+u+f)}},toString:function(){return JSON.stringify(this.toJSON(),null,"	")}}}});var Tl=k((yR,_l)=>{"use strict";var Ri=ki(),ue=Ri.Constants;_l.exports=function(){var e=0,t=0,i=0,r=0,n=0;return{get diskEntries(){return e},set diskEntries(s){e=t=s},get totalEntries(){return t},set totalEntries(s){t=e=s},get size(){return i},set size(s){i=s},get offset(){return r},set offset(s){r=s},get commentLength(){return n},set commentLength(s){n=s},get mainHeaderSize(){return ue.ENDHDR+n},loadFromBinary:function(s){if((s.length!==ue.ENDHDR||s.readUInt32LE(0)!==ue.ENDSIG)&&(s.length<ue.ZIP64HDR||s.readUInt32LE(0)!==ue.ZIP64SIG))throw Ri.Errors.INVALID_END();s.readUInt32LE(0)===ue.ENDSIG?(e=s.readUInt16LE(ue.ENDSUB),t=s.readUInt16LE(ue.ENDTOT),i=s.readUInt32LE(ue.ENDSIZ),r=s.readUInt32LE(ue.ENDOFF),n=s.readUInt16LE(ue.ENDCOM)):(e=Ri.readBigUInt64LE(s,ue.ZIP64SUB),t=Ri.readBigUInt64LE(s,ue.ZIP64TOT),i=Ri.readBigUInt64LE(s,ue.ZIP64SIZE),r=Ri.readBigUInt64LE(s,ue.ZIP64OFF),n=0)},toBinary:function(){var s=Buffer.alloc(ue.ENDHDR+n);return s.writeUInt32LE(ue.ENDSIG,0),s.writeUInt32LE(0,4),s.writeUInt16LE(e,ue.ENDSUB),s.writeUInt16LE(t,ue.ENDTOT),s.writeUInt32LE(i,ue.ENDSIZ),s.writeUInt32LE(r,ue.ENDOFF),s.writeUInt16LE(n,ue.ENDCOM),s.fill(" ",ue.ENDHDR),s},toJSON:function(){let s=function(o,a){let c=o.toString(16).toUpperCase();for(;c.length<a;)c="0"+c;return"0x"+c};return{diskEntries:e,totalEntries:t,size:i+" bytes",offset:s(r,4),commentLength:n}},toString:function(){return JSON.stringify(this.toJSON(),null,"	")}}}});var lo=k(uo=>{"use strict";uo.EntryHeader=El();uo.MainHeader=Tl()});var Cl=k((wR,Sl)=>{"use strict";Sl.exports=function(e){var t=require("zlib"),i={chunkSize:(parseInt(e.length/1024)+1)*1024};return{deflate:function(){return t.deflateRawSync(e,i)},deflateAsync:function(r){var n=t.createDeflateRaw(i),s=[],o=0;n.on("data",function(a){s.push(a),o+=a.length}),n.on("end",function(){var a=Buffer.alloc(o),c=0;a.fill(0);for(var u=0;u<s.length;u++){var f=s[u];f.copy(a,c),c+=f.length}r&&r(a)}),n.end(e)}}}});var Al=k((ER,Ol)=>{"use strict";var W0=+(process.versions?process.versions.node:"").split(".")[0]||0;Ol.exports=function(e,t){var i=require("zlib");let r=W0>=15&&t>0?{maxOutputLength:t}:{};return{inflate:function(){return i.inflateRawSync(e,r)},inflateAsync:function(n){var s=i.createInflateRaw(r),o=[],a=0;s.on("data",function(c){o.push(c),a+=c.length}),s.on("end",function(){var c=Buffer.alloc(a),u=0;c.fill(0);for(var f=0;f<o.length;f++){var g=o[f];g.copy(c,u),u+=g.length}n&&n(c)}),s.end(e)}}}});var kl=k((_R,Ll)=>{"use strict";var{randomFillSync:Dl}=require("crypto"),K0=pn(),J0=new Uint32Array(256).map((e,t)=>{for(let i=0;i<8;i++)t&1?t=t>>>1^3988292384:t>>>=1;return t>>>0}),Nl=(e,t)=>Math.imul(e,t)>>>0,Il=(e,t)=>J0[(e^t)&255]^e>>>8,lr=()=>typeof Dl=="function"?Dl(Buffer.alloc(12)):lr.node();lr.node=()=>{let e=Buffer.alloc(12),t=e.length;for(let i=0;i<t;i++)e[i]=Math.random()*256&255;return e};var dn={genSalt:lr};function fn(e){let t=Buffer.isBuffer(e)?e:Buffer.from(e);this.keys=new Uint32Array([305419896,591751049,878082192]);for(let i=0;i<t.length;i++)this.updateKeys(t[i])}fn.prototype.updateKeys=function(e){let t=this.keys;return t[0]=Il(t[0],e),t[1]+=t[0]&255,t[1]=Nl(t[1],134775813)+1,t[2]=Il(t[2],t[1]>>>24),e};fn.prototype.next=function(){let e=(this.keys[2]|2)>>>0;return Nl(e,e^1)>>8&255};function Z0(e){let t=new fn(e);return function(i){let r=Buffer.alloc(i.length),n=0;for(let s of i)r[n++]=t.updateKeys(s^t.next());return r}}function Q0(e){let t=new fn(e);return function(i,r,n=0){r||(r=Buffer.alloc(i.length));for(let s of i){let o=t.next();r[n++]=s^o,t.updateKeys(s)}return r}}function eE(e,t,i){if(!e||!Buffer.isBuffer(e)||e.length<12)return Buffer.alloc(0);let r=Z0(i),n=r(e.slice(0,12)),s=(t.flags&8)===8?t.timeHighByte:t.crc>>>24;if(n[11]!==s)throw K0.WRONG_PASSWORD();return r(e.slice(12))}function tE(e){Buffer.isBuffer(e)&&e.length>=12?dn.genSalt=function(){return e.slice(0,12)}:e==="node"?dn.genSalt=lr.node:dn.genSalt=lr}function iE(e,t,i,r=!1){e==null&&(e=Buffer.alloc(0)),Buffer.isBuffer(e)||(e=Buffer.from(e.toString()));let n=Q0(i),s=dn.genSalt();s[11]=t.crc>>>24&255,r&&(s[10]=t.crc>>>16&255);let o=Buffer.alloc(e.length+12);return n(s,o),n(e,o,12)}Ll.exports={decrypt:eE,encrypt:iE,_salter:tE}});var Rl=k(hn=>{"use strict";hn.Deflater=Cl();hn.Inflater=Al();hn.ZipCrypto=kl()});var fo=k((SR,Pl)=>{"use strict";var re=ki(),rE=lo(),xe=re.Constants,po=Rl();Pl.exports=function(e,t){var i=new rE.EntryHeader,r=Buffer.alloc(0),n=Buffer.alloc(0),s=!1,o=null,a=Buffer.alloc(0),c=Buffer.alloc(0),u=!0;let f=e,g=typeof f.decoder=="object"?f.decoder:re.decoder;u=g.hasOwnProperty("efs")?g.efs:!1;function x(){return!t||!(t instanceof Uint8Array)?Buffer.alloc(0):(c=i.loadLocalHeaderFromBinary(t),t.slice(i.realDataOffset,i.realDataOffset+i.compressedSize))}function l(p){if(i.flags_desc){let d={},h=i.realDataOffset+i.compressedSize;if(t.readUInt32LE(h)==xe.LOCSIG||t.readUInt32LE(h)==xe.CENSIG)throw re.Errors.DESCRIPTOR_NOT_EXIST();if(t.readUInt32LE(h)==xe.EXTSIG)d.crc=t.readUInt32LE(h+xe.EXTCRC),d.compressedSize=t.readUInt32LE(h+xe.EXTSIZ),d.size=t.readUInt32LE(h+xe.EXTLEN);else if(t.readUInt16LE(h+12)===19280)d.crc=t.readUInt32LE(h+xe.EXTCRC-4),d.compressedSize=t.readUInt32LE(h+xe.EXTSIZ-4),d.size=t.readUInt32LE(h+xe.EXTLEN-4);else throw re.Errors.DESCRIPTOR_UNKNOWN();if(d.compressedSize!==i.compressedSize||d.size!==i.size||d.crc!==i.crc)throw re.Errors.DESCRIPTOR_FAULTY();if(re.crc32(p)!==d.crc)return!1}else if(re.crc32(p)!==i.localHeader.crc)return!1;return!0}function m(p,d,h){if(typeof d>"u"&&typeof p=="string"&&(h=p,p=void 0),s)return p&&d&&d(Buffer.alloc(0),re.Errors.DIRECTORY_CONTENT_ERROR()),Buffer.alloc(0);var b=x();if(b.length===0)return p&&d&&d(b),b;if(i.encrypted){if(typeof h!="string"&&!Buffer.isBuffer(h))throw re.Errors.INVALID_PASS_PARAM();b=po.ZipCrypto.decrypt(b,i,h)}var O=Buffer.alloc(i.size);switch(i.method){case re.Constants.STORED:if(b.copy(O),l(O))return p&&d&&d(O),O;throw p&&d&&d(O,re.Errors.BAD_CRC()),re.Errors.BAD_CRC();case re.Constants.DEFLATED:var A=new po.Inflater(b,i.size);if(p)A.inflateAsync(function(D){D.copy(D,0),d&&(l(D)?d(D):d(D,re.Errors.BAD_CRC()))});else{if(A.inflate(O).copy(O,0),!l(O))throw re.Errors.BAD_CRC(`"${g.decode(r)}"`);return O}break;default:throw p&&d&&d(Buffer.alloc(0),re.Errors.UNKNOWN_METHOD()),re.Errors.UNKNOWN_METHOD()}}function v(p,d){if((!o||!o.length)&&Buffer.isBuffer(t))return p&&d&&d(x()),x();if(o.length&&!s){var h;switch(i.method){case re.Constants.STORED:return i.compressedSize=i.size,h=Buffer.alloc(o.length),o.copy(h),p&&d&&d(h),h;default:case re.Constants.DEFLATED:var b=new po.Deflater(o);if(p)b.deflateAsync(function(A){h=Buffer.alloc(A.length),i.compressedSize=A.length,A.copy(h),d&&d(h)});else{var O=b.deflate();return i.compressedSize=O.length,O}b=null;break}}else if(p&&d)d(Buffer.alloc(0));else return Buffer.alloc(0)}function w(p,d){return(p.readUInt32LE(d+4)<<4)+p.readUInt32LE(d)}function _(p){try{for(var d=0,h,b,O;d+4<p.length;)h=p.readUInt16LE(d),d+=2,b=p.readUInt16LE(d),d+=2,O=p.slice(d,d+b),d+=b,xe.ID_ZIP64===h&&E(O)}catch{throw re.Errors.EXTRA_FIELD_PARSE_ERROR()}}function E(p){var d,h,b,O;p.length>=xe.EF_ZIP64_SCOMP&&(d=w(p,xe.EF_ZIP64_SUNCOMP),i.size===xe.EF_ZIP64_OR_32&&(i.size=d)),p.length>=xe.EF_ZIP64_RHO&&(h=w(p,xe.EF_ZIP64_SCOMP),i.compressedSize===xe.EF_ZIP64_OR_32&&(i.compressedSize=h)),p.length>=xe.EF_ZIP64_DSN&&(b=w(p,xe.EF_ZIP64_RHO),i.offset===xe.EF_ZIP64_OR_32&&(i.offset=b)),p.length>=xe.EF_ZIP64_DSN+4&&(O=p.readUInt32LE(xe.EF_ZIP64_DSN),i.diskNumStart===xe.EF_ZIP64_OR_16&&(i.diskNumStart=O))}return{get entryName(){return g.decode(r)},get rawEntryName(){return r},set entryName(p){r=re.toBuffer(p,g.encode);var d=r[r.length-1];s=d===47||d===92,i.fileNameLength=r.length},get efs(){return typeof u=="function"?u(this.entryName):u},get extra(){return a},set extra(p){a=p,i.extraLength=p.length,_(p)},get comment(){return g.decode(n)},set comment(p){if(n=re.toBuffer(p,g.encode),i.commentLength=n.length,n.length>65535)throw re.Errors.COMMENT_TOO_LONG()},get name(){var p=g.decode(r);return s?p.substr(p.length-1).split("/").pop():p.split("/").pop()},get isDirectory(){return s},getCompressedData:function(){return v(!1,null)},getCompressedDataAsync:function(p){v(!0,p)},setData:function(p){o=re.toBuffer(p,re.decoder.encode),!s&&o.length?(i.size=o.length,i.method=re.Constants.DEFLATED,i.crc=re.crc32(p),i.changed=!0):i.method=re.Constants.STORED},getData:function(p){return i.changed?o:m(!1,null,p)},getDataAsync:function(p,d){i.changed?p(o):m(!0,p,d)},set attr(p){i.attr=p},get attr(){return i.attr},set header(p){i.loadFromBinary(p)},get header(){return i},packCentralHeader:function(){i.flags_efs=this.efs,i.extraLength=a.length;var p=i.centralHeaderToBinary(),d=re.Constants.CENHDR;return r.copy(p,d),d+=r.length,a.copy(p,d),d+=i.extraLength,n.copy(p,d),p},packLocalHeader:function(){let p=0;i.flags_efs=this.efs,i.extraLocalLength=c.length;let d=i.localHeaderToBinary(),h=Buffer.alloc(d.length+r.length+i.extraLocalLength);return d.copy(h,p),p+=d.length,r.copy(h,p),p+=r.length,c.copy(h,p),p+=c.length,h},toJSON:function(){let p=function(d){return"<"+(d&&d.length+" bytes buffer"||"null")+">"};return{entryName:this.entryName,name:this.name,comment:this.comment,isDirectory:this.isDirectory,header:i.toJSON(),compressedData:p(t),data:p(o)}},toString:function(){return JSON.stringify(this.toJSON(),null,"	")}}}});var Ml=k((CR,jl)=>{"use strict";var Fl=fo(),nE=lo(),Be=ki();jl.exports=function(e,t){var i=[],r={},n=Buffer.alloc(0),s=new nE.MainHeader,o=!1,a=null;let c=new Set,u=t,{noSort:f,decoder:g}=u;e?m(u.readEntries):o=!0;function x(){let w=new Set;for(let _ of Object.keys(r)){let E=_.split("/");if(E.pop(),!!E.length)for(let p=0;p<E.length;p++){let d=E.slice(0,p+1).join("/")+"/";w.add(d)}}for(let _ of w)if(!(_ in r)){let E=new Fl(u);E.entryName=_,E.attr=16,E.temporary=!0,i.push(E),r[E.entryName]=E,c.add(E)}}function l(){if(o=!0,r={},s.diskEntries>(e.length-s.offset)/Be.Constants.CENHDR)throw Be.Errors.DISK_ENTRY_TOO_LARGE();i=new Array(s.diskEntries);for(var w=s.offset,_=0;_<i.length;_++){var E=w,p=new Fl(u,e);p.header=e.slice(E,E+=Be.Constants.CENHDR),p.entryName=e.slice(E,E+=p.header.fileNameLength),p.header.extraLength&&(p.extra=e.slice(E,E+=p.header.extraLength)),p.header.commentLength&&(p.comment=e.slice(E,E+p.header.commentLength)),w+=p.header.centralHeaderSize,i[_]=p,r[p.entryName]=p}c.clear(),x()}function m(w){var _=e.length-Be.Constants.ENDHDR,E=Math.max(0,_-65535),p=E,d=e.length,h=-1,b=0;for((typeof u.trailingSpace=="boolean"?u.trailingSpace:!1)&&(E=0),_;_>=p;_--)if(e[_]===80){if(e.readUInt32LE(_)===Be.Constants.ENDSIG){h=_,b=_,d=_+Be.Constants.ENDHDR,p=_-Be.Constants.END64HDR;continue}if(e.readUInt32LE(_)===Be.Constants.END64SIG){p=E;continue}if(e.readUInt32LE(_)===Be.Constants.ZIP64SIG){h=_,d=_+Be.readBigUInt64LE(e,_+Be.Constants.ZIP64SIZE)+Be.Constants.ZIP64LEAD;break}}if(h==-1)throw Be.Errors.INVALID_FORMAT();s.loadFromBinary(e.slice(h,d)),s.commentLength&&(n=e.slice(b+Be.Constants.ENDHDR)),w&&l()}function v(){i.length>1&&!f&&i.sort((w,_)=>w.entryName.toLowerCase().localeCompare(_.entryName.toLowerCase()))}return{get entries(){return o||l(),i.filter(w=>!c.has(w))},get comment(){return g.decode(n)},set comment(w){n=Be.toBuffer(w,g.encode),s.commentLength=n.length},getEntryCount:function(){return o?i.length:s.diskEntries},forEach:function(w){this.entries.forEach(w)},getEntry:function(w){return o||l(),r[w]||null},setEntry:function(w){o||l(),i.push(w),r[w.entryName]=w,s.totalEntries=i.length},deleteFile:function(w,_=!0){o||l();let E=r[w];this.getEntryChildren(E,_).map(d=>d.entryName).forEach(this.deleteEntry)},deleteEntry:function(w){o||l();let _=r[w],E=i.indexOf(_);E>=0&&(i.splice(E,1),delete r[w],s.totalEntries=i.length)},getEntryChildren:function(w,_=!0){if(o||l(),typeof w=="object")if(w.isDirectory&&_){let E=[],p=w.entryName;for(let d of i)d.entryName.startsWith(p)&&E.push(d);return E}else return[w];return[]},getChildCount:function(w){if(w&&w.isDirectory){let _=this.getEntryChildren(w);return _.includes(w)?_.length-1:_.length}return 0},compressToBuffer:function(){o||l(),v();let w=[],_=[],E=0,p=0;s.size=0,s.offset=0;let d=0;for(let O of this.entries){let A=O.getCompressedData();O.header.offset=p;let D=O.packLocalHeader(),S=D.length+A.length;p+=S,w.push(D),w.push(A);let L=O.packCentralHeader();_.push(L),s.size+=L.length,E+=S+L.length,d++}E+=s.mainHeaderSize,s.offset=p,s.totalEntries=d,p=0;let h=Buffer.alloc(E);for(let O of w)O.copy(h,p),p+=O.length;for(let O of _)O.copy(h,p),p+=O.length;let b=s.toBinary();return n&&n.copy(b,Be.Constants.ENDHDR),b.copy(h,p),e=h,o=!1,h},toAsyncBuffer:function(w,_,E,p){try{o||l(),v();let d=[],h=[],b=0,O=0,A=0;s.size=0,s.offset=0;let D=function(S){if(S.length>0){let L=S.shift(),C=L.entryName+L.extra.toString();E&&E(C),L.getCompressedDataAsync(function(F){p&&p(C),L.header.offset=O;let z=L.packLocalHeader(),H=z.length+F.length;O+=H,d.push(z),d.push(F);let V=L.packCentralHeader();h.push(V),s.size+=V.length,b+=H+V.length,A++,D(S)})}else{b+=s.mainHeaderSize,s.offset=O,s.totalEntries=A,O=0;let L=Buffer.alloc(b);d.forEach(function(F){F.copy(L,O),O+=F.length}),h.forEach(function(F){F.copy(L,O),O+=F.length});let C=s.toBinary();n&&n.copy(C,Be.Constants.ENDHDR),C.copy(L,O),e=L,o=!1,w(L)}};D(Array.from(this.entries))}catch(d){_(d)}}}}});var Ul=k((OR,Bl)=>{"use strict";var le=ki(),ve=require("path"),sE=fo(),oE=Ml(),li=(...e)=>le.findLast(e,t=>typeof t=="boolean"),ql=(...e)=>le.findLast(e,t=>typeof t=="string"),aE=(...e)=>le.findLast(e,t=>typeof t=="function"),cE={noSort:!1,readEntries:!1,method:le.Constants.NONE,fs:null};Bl.exports=function(e,t){let i=null,r=Object.assign(Object.create(null),cE);e&&typeof e=="object"&&(e instanceof Uint8Array||(Object.assign(r,e),e=r.input?r.input:void 0,r.input&&delete r.input),Buffer.isBuffer(e)&&(i=e,r.method=le.Constants.BUFFER,e=void 0)),Object.assign(r,t);let n=new le(r);if((typeof r.decoder!="object"||typeof r.decoder.encode!="function"||typeof r.decoder.decode!="function")&&(r.decoder=le.decoder),e&&typeof e=="string")if(n.fs.existsSync(e))r.method=le.Constants.FILE,r.filename=e,i=n.fs.readFileSync(e);else throw le.Errors.INVALID_FILENAME();let s=new oE(i,r),{canonical:o,sanitize:a,zipnamefix:c}=le;function u(l){if(l&&s){var m;if(typeof l=="string"&&(m=s.getEntry(ve.posix.normalize(l))),typeof l=="object"&&typeof l.entryName<"u"&&typeof l.header<"u"&&(m=s.getEntry(l.entryName)),m)return m}return null}function f(l){let{join:m,normalize:v,sep:w}=ve.posix;return m(".",v(w+l.split("\\").join(w)+w))}function g(l){return l instanceof RegExp?function(m){return function(v){return m.test(v)}}(l):typeof l!="function"?()=>!0:l}let x=(l,m)=>{let v=m.slice(-1);return v=v===n.sep?n.sep:"",ve.relative(l,m)+v};return{readFile:function(l,m){var v=u(l);return v&&v.getData(m)||null},childCount:function(l){let m=u(l);if(m)return s.getChildCount(m)},readFileAsync:function(l,m){var v=u(l);v?v.getDataAsync(m):m(null,"getEntry failed for:"+l)},readAsText:function(l,m){var v=u(l);if(v){var w=v.getData();if(w&&w.length)return w.toString(m||"utf8")}return""},readAsTextAsync:function(l,m,v){var w=u(l);w?w.getDataAsync(function(_,E){if(E){m(_,E);return}_&&_.length?m(_.toString(v||"utf8")):m("")}):m("")},deleteFile:function(l,m=!0){var v=u(l);v&&s.deleteFile(v.entryName,m)},deleteEntry:function(l){var m=u(l);m&&s.deleteEntry(m.entryName)},addZipComment:function(l){s.comment=l},getZipComment:function(){return s.comment||""},addZipEntryComment:function(l,m){var v=u(l);v&&(v.comment=m)},getZipEntryComment:function(l){var m=u(l);return m&&m.comment||""},updateFile:function(l,m){var v=u(l);v&&v.setData(m)},addLocalFile:function(l,m,v,w){if(n.fs.existsSync(l)){m=m?f(m):"";let _=ve.win32.basename(ve.win32.normalize(l));m+=v||_;let E=n.fs.statSync(l),p=E.isFile()?n.fs.readFileSync(l):Buffer.alloc(0);E.isDirectory()&&(m+=n.sep),this.addFile(m,p,w,E)}else throw le.Errors.FILE_NOT_FOUND(l)},addLocalFileAsync:function(l,m){l=typeof l=="object"?l:{localPath:l};let v=ve.resolve(l.localPath),{comment:w}=l,{zipPath:_,zipName:E}=l,p=this;n.fs.stat(v,function(d,h){if(d)return m(d,!1);_=_?f(_):"";let b=ve.win32.basename(ve.win32.normalize(v));if(_+=E||b,h.isFile())n.fs.readFile(v,function(O,A){return O?m(O,!1):(p.addFile(_,A,w,h),setImmediate(m,void 0,!0))});else if(h.isDirectory())return _+=n.sep,p.addFile(_,Buffer.alloc(0),w,h),setImmediate(m,void 0,!0)})},addLocalFolder:function(l,m,v){if(v=g(v),m=m?f(m):"",l=ve.normalize(l),n.fs.existsSync(l)){let w=n.findFiles(l),_=this;if(w.length)for(let E of w){let p=ve.join(m,x(l,E));v(p)&&_.addLocalFile(E,ve.dirname(p))}}else throw le.Errors.FILE_NOT_FOUND(l)},addLocalFolderAsync:function(l,m,v,w){w=g(w),v=v?f(v):"",l=ve.normalize(l);var _=this;n.fs.open(l,"r",function(E){if(E&&E.code==="ENOENT")m(void 0,le.Errors.FILE_NOT_FOUND(l));else if(E)m(void 0,E);else{var p=n.findFiles(l),d=-1,h=function(){if(d+=1,d<p.length){var b=p[d],O=x(l,b).split("\\").join("/");O=O.normalize("NFD").replace(/[\u0300-\u036f]/g,"").replace(/[^\x20-\x7E]/g,""),w(O)?n.fs.stat(b,function(A,D){A&&m(void 0,A),D.isFile()?n.fs.readFile(b,function(S,L){S?m(void 0,S):(_.addFile(v+O,L,"",D),h())}):(_.addFile(v+O+"/",Buffer.alloc(0),"",D),h())}):process.nextTick(()=>{h()})}else m(!0,void 0)};h()}})},addLocalFolderAsync2:function(l,m){let v=this;l=typeof l=="object"?l:{localPath:l},localPath=ve.resolve(f(l.localPath));let{zipPath:w,filter:_,namefix:E}=l;_ instanceof RegExp?_=function(h){return function(b){return h.test(b)}}(_):typeof _!="function"&&(_=function(){return!0}),w=w?f(w):"",E=="latin1"&&(E=h=>h.normalize("NFD").replace(/[\u0300-\u036f]/g,"").replace(/[^\x20-\x7E]/g,"")),typeof E!="function"&&(E=h=>h);let p=h=>ve.join(w,E(x(localPath,h))),d=h=>ve.win32.basename(ve.win32.normalize(E(h)));n.fs.open(localPath,"r",function(h){h&&h.code==="ENOENT"?m(void 0,le.Errors.FILE_NOT_FOUND(localPath)):h?m(void 0,h):n.findFilesAsync(localPath,function(b,O){if(b)return m(b);O=O.filter(A=>_(p(A))),O.length||m(void 0,!1),setImmediate(O.reverse().reduce(function(A,D){return function(S,L){if(S||L===!1)return setImmediate(A,S,!1);v.addLocalFileAsync({localPath:D,zipPath:ve.dirname(p(D)),zipName:d(D)},A)}},m))})})},addLocalFolderPromise:function(l,m){return new Promise((v,w)=>{this.addLocalFolderAsync2(Object.assign({localPath:l},m),(_,E)=>{_&&w(_),E&&v(this)})})},addFile:function(l,m,v,w){l=c(l);let _=u(l),E=_!=null;E||(_=new sE(r),_.entryName=l),_.comment=v||"";let p=typeof w=="object"&&w instanceof n.fs.Stats;p&&(_.header.time=w.mtime);var d=_.isDirectory?16:0;let h=_.isDirectory?16384:32768;return p?h|=4095&w.mode:typeof w=="number"?h|=4095&w:h|=_.isDirectory?493:420,d=(d|h<<16)>>>0,_.attr=d,_.setData(m),E||s.setEntry(_),_},getEntries:function(l){return s.password=l,s?s.entries:[]},getEntry:function(l){return u(l)},getEntryCount:function(){return s.getEntryCount()},forEach:function(l){return s.forEach(l)},extractEntryTo:function(l,m,v,w,_,E){w=li(!1,w),_=li(!1,_),v=li(!0,v),E=ql(_,E);var p=u(l);if(!p)throw le.Errors.NO_ENTRY();var d=o(p.entryName),h=a(m,E&&!p.isDirectory?E:v?d:ve.basename(d));if(p.isDirectory){var b=s.getEntryChildren(p);return b.forEach(function(D){if(D.isDirectory)return;var S=D.getData();if(!S)throw le.Errors.CANT_EXTRACT_FILE();var L=o(D.entryName),C=a(m,v?L:ve.basename(L));let F=_?D.header.fileAttr:void 0;n.writeFileTo(C,S,w,F)}),!0}var O=p.getData(s.password);if(!O)throw le.Errors.CANT_EXTRACT_FILE();if(n.fs.existsSync(h)&&!w)throw le.Errors.CANT_OVERRIDE();let A=_?l.header.fileAttr:void 0;return n.writeFileTo(h,O,w,A),!0},test:function(l){if(!s)return!1;for(var m in s.entries)try{if(m.isDirectory)continue;var v=s.entries[m].getData(l);if(!v)return!1}catch{return!1}return!0},extractAllTo:function(l,m,v,w){if(v=li(!1,v),w=ql(v,w),m=li(!1,m),!s)throw le.Errors.NO_ZIP();s.entries.forEach(function(_){var E=a(l,o(_.entryName));if(_.isDirectory){n.makeDir(E);return}var p=_.getData(w);if(!p)throw le.Errors.CANT_EXTRACT_FILE();let d=v?_.header.fileAttr:void 0;n.writeFileTo(E,p,m,d);try{n.fs.utimesSync(E,_.header.time,_.header.time)}catch{throw le.Errors.CANT_EXTRACT_FILE()}})},extractAllToAsync:function(l,m,v,w){if(w=aE(m,v,w),v=li(!1,v),m=li(!1,m),!w)return new Promise((h,b)=>{this.extractAllToAsync(l,m,v,function(O){O?b(O):h(this)})});if(!s){w(le.Errors.NO_ZIP());return}l=ve.resolve(l);let _=h=>a(l,ve.normalize(o(h.entryName))),E=(h,b)=>new Error(h+': "'+b+'"'),p=[],d=[];s.entries.forEach(h=>{h.isDirectory?p.push(h):d.push(h)});for(let h of p){let b=_(h),O=v?h.header.fileAttr:void 0;try{n.makeDir(b),O&&n.fs.chmodSync(b,O),n.fs.utimesSync(b,h.header.time,h.header.time)}catch{w(E("Unable to create folder",b))}}d.reverse().reduce(function(h,b){return function(O){if(O)h(O);else{let A=ve.normalize(o(b.entryName)),D=a(l,A);b.getDataAsync(function(S,L){if(L)h(L);else if(!S)h(le.Errors.CANT_EXTRACT_FILE());else{let C=v?b.header.fileAttr:void 0;n.writeFileToAsync(D,S,m,C,function(F){F||h(E("Unable to write file",D)),n.fs.utimes(D,b.header.time,b.header.time,function(z){z?h(E("Unable to set times",D)):h()})})}})}}},w)()},writeZip:function(l,m){if(arguments.length===1&&typeof l=="function"&&(m=l,l=""),!l&&r.filename&&(l=r.filename),!!l){var v=s.compressToBuffer();if(v){var w=n.writeFileTo(l,v,!0);typeof m=="function"&&m(w?null:new Error("failed"),"")}}},writeZipPromise:function(l,m){let{overwrite:v,perm:w}=Object.assign({overwrite:!0},m);return new Promise((_,E)=>{!l&&r.filename&&(l=r.filename),l||E("ADM-ZIP: ZIP File Name Missing"),this.toBufferPromise().then(p=>{let d=h=>h?_(h):E("ADM-ZIP: Wasn't able to write zip file");n.writeFileToAsync(l,p,v,w,d)},E)})},toBufferPromise:function(){return new Promise((l,m)=>{s.toAsyncBuffer(l,m)})},toBuffer:function(l,m,v,w){return typeof l=="function"?(s.toAsyncBuffer(l,m,v,w),null):s.compressToBuffer()}}}});var Gl=k((AR,Hl)=>{"use strict";function uE(e,t){var i=e;t.slice(0,-1).forEach(function(n){i=i[n]||{}});var r=t[t.length-1];return r in i}function $l(e){return typeof e=="number"||/^0x[0-9a-f]+$/i.test(e)?!0:/^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(e)}function zl(e,t){return t==="constructor"&&typeof e[t]=="function"||t==="__proto__"}Hl.exports=function(e,t){t||(t={});var i={bools:{},strings:{},unknownFn:null};typeof t.unknown=="function"&&(i.unknownFn=t.unknown),typeof t.boolean=="boolean"&&t.boolean?i.allBools=!0:[].concat(t.boolean).filter(Boolean).forEach(function(d){i.bools[d]=!0});var r={};function n(d){return r[d].some(function(h){return i.bools[h]})}Object.keys(t.alias||{}).forEach(function(d){r[d]=[].concat(t.alias[d]),r[d].forEach(function(h){r[h]=[d].concat(r[d].filter(function(b){return h!==b}))})}),[].concat(t.string).filter(Boolean).forEach(function(d){i.strings[d]=!0,r[d]&&[].concat(r[d]).forEach(function(h){i.strings[h]=!0})});var s=t.default||{},o={_:[]};function a(d,h){return i.allBools&&/^--[^=]+$/.test(h)||i.strings[d]||i.bools[d]||r[d]}function c(d,h,b){for(var O=d,A=0;A<h.length-1;A++){var D=h[A];if(zl(O,D))return;O[D]===void 0&&(O[D]={}),(O[D]===Object.prototype||O[D]===Number.prototype||O[D]===String.prototype)&&(O[D]={}),O[D]===Array.prototype&&(O[D]=[]),O=O[D]}var S=h[h.length-1];zl(O,S)||((O===Object.prototype||O===Number.prototype||O===String.prototype)&&(O={}),O===Array.prototype&&(O=[]),O[S]===void 0||i.bools[S]||typeof O[S]=="boolean"?O[S]=b:Array.isArray(O[S])?O[S].push(b):O[S]=[O[S],b])}function u(d,h,b){if(!(b&&i.unknownFn&&!a(d,b)&&i.unknownFn(b)===!1)){var O=!i.strings[d]&&$l(h)?Number(h):h;c(o,d.split("."),O),(r[d]||[]).forEach(function(A){c(o,A.split("."),O)})}}Object.keys(i.bools).forEach(function(d){u(d,s[d]===void 0?!1:s[d])});var f=[];e.indexOf("--")!==-1&&(f=e.slice(e.indexOf("--")+1),e=e.slice(0,e.indexOf("--")));for(var g=0;g<e.length;g++){var x=e[g],l,m;if(/^--.+=/.test(x)){var v=x.match(/^--([^=]+)=([\s\S]*)$/);l=v[1];var w=v[2];i.bools[l]&&(w=w!=="false"),u(l,w,x)}else if(/^--no-.+/.test(x))l=x.match(/^--no-(.+)/)[1],u(l,!1,x);else if(/^--.+/.test(x))l=x.match(/^--(.+)/)[1],m=e[g+1],m!==void 0&&!/^(-|--)[^-]/.test(m)&&!i.bools[l]&&!i.allBools&&(!r[l]||!n(l))?(u(l,m,x),g+=1):/^(true|false)$/.test(m)?(u(l,m==="true",x),g+=1):u(l,i.strings[l]?"":!0,x);else if(/^-[^-]+/.test(x)){for(var _=x.slice(1,-1).split(""),E=!1,p=0;p<_.length;p++){if(m=x.slice(p+2),m==="-"){u(_[p],m,x);continue}if(/[A-Za-z]/.test(_[p])&&m[0]==="="){u(_[p],m.slice(1),x),E=!0;break}if(/[A-Za-z]/.test(_[p])&&/-?\d+(\.\d*)?(e-?\d+)?$/.test(m)){u(_[p],m,x),E=!0;break}if(_[p+1]&&_[p+1].match(/\W/)){u(_[p],x.slice(p+2),x),E=!0;break}else u(_[p],i.strings[_[p]]?"":!0,x)}l=x.slice(-1)[0],!E&&l!=="-"&&(e[g+1]&&!/^(-|--)[^-]/.test(e[g+1])&&!i.bools[l]&&(!r[l]||!n(l))?(u(l,e[g+1],x),g+=1):e[g+1]&&/^(true|false)$/.test(e[g+1])?(u(l,e[g+1]==="true",x),g+=1):u(l,i.strings[l]?"":!0,x))}else if((!i.unknownFn||i.unknownFn(x)!==!1)&&o._.push(i.strings._||!$l(x)?x:Number(x)),t.stopEarly){o._.push.apply(o._,e.slice(g+1));break}}return Object.keys(s).forEach(function(d){uE(o,d.split("."))||(c(o,d.split("."),s[d]),(r[d]||[]).forEach(function(h){c(o,h.split("."),s[d])}))}),t["--"]?o["--"]=f.slice():f.forEach(function(d){o._.push(d)}),o}});var pe=k((DR,Xl)=>{"use strict";var{FORCE_COLOR:lE,NODE_DISABLE_COLORS:pE,TERM:dE}=process.env,ne={enabled:!pE&&dE!=="dumb"&&lE!=="0",reset:oe(0,0),bold:oe(1,22),dim:oe(2,22),italic:oe(3,23),underline:oe(4,24),inverse:oe(7,27),hidden:oe(8,28),strikethrough:oe(9,29),black:oe(30,39),red:oe(31,39),green:oe(32,39),yellow:oe(33,39),blue:oe(34,39),magenta:oe(35,39),cyan:oe(36,39),white:oe(37,39),gray:oe(90,39),grey:oe(90,39),bgBlack:oe(40,49),bgRed:oe(41,49),bgGreen:oe(42,49),bgYellow:oe(43,49),bgBlue:oe(44,49),bgMagenta:oe(45,49),bgCyan:oe(46,49),bgWhite:oe(47,49)};function Vl(e,t){let i=0,r,n="",s="";for(;i<e.length;i++)r=e[i],n+=r.open,s+=r.close,t.includes(r.close)&&(t=t.replace(r.rgx,r.close+r.open));return n+t+s}function fE(e,t){let i={has:e,keys:t};return i.reset=ne.reset.bind(i),i.bold=ne.bold.bind(i),i.dim=ne.dim.bind(i),i.italic=ne.italic.bind(i),i.underline=ne.underline.bind(i),i.inverse=ne.inverse.bind(i),i.hidden=ne.hidden.bind(i),i.strikethrough=ne.strikethrough.bind(i),i.black=ne.black.bind(i),i.red=ne.red.bind(i),i.green=ne.green.bind(i),i.yellow=ne.yellow.bind(i),i.blue=ne.blue.bind(i),i.magenta=ne.magenta.bind(i),i.cyan=ne.cyan.bind(i),i.white=ne.white.bind(i),i.gray=ne.gray.bind(i),i.grey=ne.grey.bind(i),i.bgBlack=ne.bgBlack.bind(i),i.bgRed=ne.bgRed.bind(i),i.bgGreen=ne.bgGreen.bind(i),i.bgYellow=ne.bgYellow.bind(i),i.bgBlue=ne.bgBlue.bind(i),i.bgMagenta=ne.bgMagenta.bind(i),i.bgCyan=ne.bgCyan.bind(i),i.bgWhite=ne.bgWhite.bind(i),i}function oe(e,t){let i={open:`\x1B[${e}m`,close:`\x1B[${t}m`,rgx:new RegExp(`\\x1b\\[${t}m`,"g")};return function(r){return this!==void 0&&this.has!==void 0?(this.has.includes(e)||(this.has.push(e),this.keys.push(i)),r===void 0?this:ne.enabled?Vl(this.keys,r+""):r+""):r===void 0?fE([e],[i]):ne.enabled?Vl([i],r+""):r+""}}Xl.exports=ne});var Wl=k((IR,Yl)=>{"use strict";Yl.exports=(e,t)=>{if(!(e.meta&&e.name!=="escape")){if(e.ctrl){if(e.name==="a")return"first";if(e.name==="c"||e.name==="d")return"abort";if(e.name==="e")return"last";if(e.name==="g")return"reset"}if(t){if(e.name==="j")return"down";if(e.name==="k")return"up"}return e.name==="return"||e.name==="enter"?"submit":e.name==="backspace"?"delete":e.name==="delete"?"deleteForward":e.name==="abort"?"abort":e.name==="escape"?"exit":e.name==="tab"?"next":e.name==="pagedown"?"nextPage":e.name==="pageup"?"prevPage":e.name==="home"?"home":e.name==="end"?"end":e.name==="up"?"up":e.name==="down"?"down":e.name==="right"?"right":e.name==="left"?"left":!1}}});var mn=k((NR,Kl)=>{"use strict";Kl.exports=e=>{let t=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))"].join("|"),i=new RegExp(t,"g");return typeof e=="string"?e.replace(i,""):e}});var fe=k((LR,Jl)=>{"use strict";var ho="\x1B",de=`${ho}[`,hE="\x07",mo={to(e,t){return t?`${de}${t+1};${e+1}H`:`${de}${e+1}G`},move(e,t){let i="";return e<0?i+=`${de}${-e}D`:e>0&&(i+=`${de}${e}C`),t<0?i+=`${de}${-t}A`:t>0&&(i+=`${de}${t}B`),i},up:(e=1)=>`${de}${e}A`,down:(e=1)=>`${de}${e}B`,forward:(e=1)=>`${de}${e}C`,backward:(e=1)=>`${de}${e}D`,nextLine:(e=1)=>`${de}E`.repeat(e),prevLine:(e=1)=>`${de}F`.repeat(e),left:`${de}G`,hide:`${de}?25l`,show:`${de}?25h`,save:`${ho}7`,restore:`${ho}8`},mE={up:(e=1)=>`${de}S`.repeat(e),down:(e=1)=>`${de}T`.repeat(e)},gE={screen:`${de}2J`,up:(e=1)=>`${de}1J`.repeat(e),down:(e=1)=>`${de}J`.repeat(e),line:`${de}2K`,lineEnd:`${de}K`,lineStart:`${de}1K`,lines(e){let t="";for(let i=0;i<e;i++)t+=this.line+(i<e-1?mo.up():"");return e&&(t+=mo.left),t}};Jl.exports={cursor:mo,scroll:mE,erase:gE,beep:hE}});var ip=k((kR,tp)=>{"use strict";function xE(e,t){var i=typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(!i){if(Array.isArray(e)||(i=vE(e))||t&&e&&typeof e.length=="number"){i&&(e=i);var r=0,n=function(){};return{s:n,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(u){throw u},f:n}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var s=!0,o=!1,a;return{s:function(){i=i.call(e)},n:function(){var u=i.next();return s=u.done,u},e:function(u){o=!0,a=u},f:function(){try{!s&&i.return!=null&&i.return()}finally{if(o)throw a}}}}function vE(e,t){if(e){if(typeof e=="string")return Zl(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);if(i==="Object"&&e.constructor&&(i=e.constructor.name),i==="Map"||i==="Set")return Array.from(e);if(i==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return Zl(e,t)}}function Zl(e,t){(t==null||t>e.length)&&(t=e.length);for(var i=0,r=new Array(t);i<t;i++)r[i]=e[i];return r}var yE=mn(),ep=fe(),Ql=ep.erase,bE=ep.cursor,wE=e=>[...yE(e)].length;tp.exports=function(e,t){if(!t)return Ql.line+bE.to(0);let i=0,r=e.split(/\r?\n/);var n=xE(r),s;try{for(n.s();!(s=n.n()).done;){let o=s.value;i+=1+Math.floor(Math.max(wE(o)-1,0)/t)}}catch(o){n.e(o)}finally{n.f()}return Ql.lines(i)}});var go=k((RR,rp)=>{"use strict";var pr={arrowUp:"\u2191",arrowDown:"\u2193",arrowLeft:"\u2190",arrowRight:"\u2192",radioOn:"\u25C9",radioOff:"\u25EF",tick:"\u2714",cross:"\u2716",ellipsis:"\u2026",pointerSmall:"\u203A",line:"\u2500",pointer:"\u276F"},EE={arrowUp:pr.arrowUp,arrowDown:pr.arrowDown,arrowLeft:pr.arrowLeft,arrowRight:pr.arrowRight,radioOn:"(*)",radioOff:"( )",tick:"\u221A",cross:"\xD7",ellipsis:"...",pointerSmall:"\xBB",line:"\u2500",pointer:">"},_E=process.platform==="win32"?EE:pr;rp.exports=_E});var sp=k((PR,np)=>{"use strict";var Pi=pe(),pi=go(),xo=Object.freeze({password:{scale:1,render:e=>"*".repeat(e.length)},emoji:{scale:2,render:e=>"\u{1F603}".repeat(e.length)},invisible:{scale:0,render:e=>""},default:{scale:1,render:e=>`${e}`}}),TE=e=>xo[e]||xo.default,dr=Object.freeze({aborted:Pi.red(pi.cross),done:Pi.green(pi.tick),exited:Pi.yellow(pi.cross),default:Pi.cyan("?")}),SE=(e,t,i)=>t?dr.aborted:i?dr.exited:e?dr.done:dr.default,CE=e=>Pi.gray(e?pi.ellipsis:pi.pointerSmall),OE=(e,t)=>Pi.gray(e?t?pi.pointerSmall:"+":pi.line);np.exports={styles:xo,render:TE,symbols:dr,symbol:SE,delimiter:CE,item:OE}});var ap=k((FR,op)=>{"use strict";var AE=mn();op.exports=function(e,t){let i=String(AE(e)||"").split(/\r?\n/);return t?i.map(r=>Math.ceil(r.length/t)).reduce((r,n)=>r+n):i.length}});var up=k((jR,cp)=>{"use strict";cp.exports=(e,t={})=>{let i=Number.isSafeInteger(parseInt(t.margin))?new Array(parseInt(t.margin)).fill(" ").join(""):t.margin||"",r=t.width;return(e||"").split(/\r?\n/g).map(n=>n.split(/\s+/g).reduce((s,o)=>(o.length+i.length>=r||s[s.length-1].length+o.length+1<r?s[s.length-1]+=` ${o}`:s.push(`${i}${o}`),s),[i]).join(`
`)).join(`
`)}});var pp=k((MR,lp)=>{"use strict";lp.exports=(e,t,i)=>{i=i||t;let r=Math.min(t-i,e-Math.floor(i/2));r<0&&(r=0);let n=Math.min(r+i,t);return{startIndex:r,endIndex:n}}});var ht=k((qR,dp)=>{"use strict";dp.exports={action:Wl(),clear:ip(),style:sp(),strip:mn(),figures:go(),lines:ap(),wrap:up(),entriesToDisplay:pp()}});var kt=k((BR,mp)=>{"use strict";var fp=require("readline"),DE=ht(),IE=DE.action,NE=require("events"),hp=fe(),LE=hp.beep,kE=hp.cursor,RE=pe(),vo=class extends NE{constructor(t={}){super(),this.firstRender=!0,this.in=t.stdin||process.stdin,this.out=t.stdout||process.stdout,this.onRender=(t.onRender||(()=>{})).bind(this);let i=fp.createInterface({input:this.in,escapeCodeTimeout:50});fp.emitKeypressEvents(this.in,i),this.in.isTTY&&this.in.setRawMode(!0);let r=["SelectPrompt","MultiselectPrompt"].indexOf(this.constructor.name)>-1,n=(s,o)=>{let a=IE(o,r);a===!1?this._&&this._(s,o):typeof this[a]=="function"?this[a](o):this.bell()};this.close=()=>{this.out.write(kE.show),this.in.removeListener("keypress",n),this.in.isTTY&&this.in.setRawMode(!1),i.close(),this.emit(this.aborted?"abort":this.exited?"exit":"submit",this.value),this.closed=!0},this.in.on("keypress",n)}fire(){this.emit("state",{value:this.value,aborted:!!this.aborted,exited:!!this.exited})}bell(){this.out.write(LE)}render(){this.onRender(RE),this.firstRender&&(this.firstRender=!1)}};mp.exports=vo});var bp=k((UR,yp)=>{"use strict";function gp(e,t,i,r,n,s,o){try{var a=e[s](o),c=a.value}catch(u){i(u);return}a.done?t(c):Promise.resolve(c).then(r,n)}function xp(e){return function(){var t=this,i=arguments;return new Promise(function(r,n){var s=e.apply(t,i);function o(c){gp(s,r,n,o,a,"next",c)}function a(c){gp(s,r,n,o,a,"throw",c)}o(void 0)})}}var gn=pe(),PE=kt(),vp=fe(),FE=vp.erase,fr=vp.cursor,xn=ht(),yo=xn.style,bo=xn.clear,jE=xn.lines,ME=xn.figures,wo=class extends PE{constructor(t={}){super(t),this.transform=yo.render(t.style),this.scale=this.transform.scale,this.msg=t.message,this.initial=t.initial||"",this.validator=t.validate||(()=>!0),this.value="",this.errorMsg=t.error||"Please Enter A Valid Value",this.cursor=+!!this.initial,this.cursorOffset=0,this.clear=bo("",this.out.columns),this.render()}set value(t){!t&&this.initial?(this.placeholder=!0,this.rendered=gn.gray(this.transform.render(this.initial))):(this.placeholder=!1,this.rendered=this.transform.render(t)),this._value=t,this.fire()}get value(){return this._value}reset(){this.value="",this.cursor=+!!this.initial,this.cursorOffset=0,this.fire(),this.render()}exit(){this.abort()}abort(){this.value=this.value||this.initial,this.done=this.aborted=!0,this.error=!1,this.red=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}validate(){var t=this;return xp(function*(){let i=yield t.validator(t.value);typeof i=="string"&&(t.errorMsg=i,i=!1),t.error=!i})()}submit(){var t=this;return xp(function*(){if(t.value=t.value||t.initial,t.cursorOffset=0,t.cursor=t.rendered.length,yield t.validate(),t.error){t.red=!0,t.fire(),t.render();return}t.done=!0,t.aborted=!1,t.fire(),t.render(),t.out.write(`
`),t.close()})()}next(){if(!this.placeholder)return this.bell();this.value=this.initial,this.cursor=this.rendered.length,this.fire(),this.render()}moveCursor(t){this.placeholder||(this.cursor=this.cursor+t,this.cursorOffset+=t)}_(t,i){let r=this.value.slice(0,this.cursor),n=this.value.slice(this.cursor);this.value=`${r}${t}${n}`,this.red=!1,this.cursor=this.placeholder?0:r.length+1,this.render()}delete(){if(this.isCursorAtStart())return this.bell();let t=this.value.slice(0,this.cursor-1),i=this.value.slice(this.cursor);this.value=`${t}${i}`,this.red=!1,this.isCursorAtStart()?this.cursorOffset=0:(this.cursorOffset++,this.moveCursor(-1)),this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();let t=this.value.slice(0,this.cursor),i=this.value.slice(this.cursor+1);this.value=`${t}${i}`,this.red=!1,this.isCursorAtEnd()?this.cursorOffset=0:this.cursorOffset++,this.render()}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length,this.render()}left(){if(this.cursor<=0||this.placeholder)return this.bell();this.moveCursor(-1),this.render()}right(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();this.moveCursor(1),this.render()}isCursorAtStart(){return this.cursor===0||this.placeholder&&this.cursor===1}isCursorAtEnd(){return this.cursor===this.rendered.length||this.placeholder&&this.cursor===this.rendered.length+1}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(fr.down(jE(this.outputError,this.out.columns)-1)+bo(this.outputError,this.out.columns)),this.out.write(bo(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[yo.symbol(this.done,this.aborted),gn.bold(this.msg),yo.delimiter(this.done),this.red?gn.red(this.rendered):this.rendered].join(" "),this.error&&(this.outputError+=this.errorMsg.split(`
`).reduce((t,i,r)=>t+`
${r?" ":ME.pointerSmall} ${gn.red().italic(i)}`,"")),this.out.write(FE.line+fr.to(0)+this.outputText+fr.save+this.outputError+fr.restore+fr.move(this.cursorOffset,0)))}};yp.exports=wo});var Tp=k(($R,_p)=>{"use strict";var Rt=pe(),qE=kt(),hr=ht(),wp=hr.style,Ep=hr.clear,vn=hr.figures,BE=hr.wrap,UE=hr.entriesToDisplay,$E=fe(),zE=$E.cursor,Eo=class extends qE{constructor(t={}){super(t),this.msg=t.message,this.hint=t.hint||"- Use arrow-keys. Return to submit.",this.warn=t.warn||"- This option is disabled",this.cursor=t.initial||0,this.choices=t.choices.map((i,r)=>(typeof i=="string"&&(i={title:i,value:r}),{title:i&&(i.title||i.value||i),value:i&&(i.value===void 0?r:i.value),description:i&&i.description,selected:i&&i.selected,disabled:i&&i.disabled})),this.optionsPerPage=t.optionsPerPage||10,this.value=(this.choices[this.cursor]||{}).value,this.clear=Ep("",this.out.columns),this.render()}moveCursor(t){this.cursor=t,this.value=this.choices[t].value,this.fire()}reset(){this.moveCursor(0),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.selection.disabled?this.bell():(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close())}first(){this.moveCursor(0),this.render()}last(){this.moveCursor(this.choices.length-1),this.render()}up(){this.cursor===0?this.moveCursor(this.choices.length-1):this.moveCursor(this.cursor-1),this.render()}down(){this.cursor===this.choices.length-1?this.moveCursor(0):this.moveCursor(this.cursor+1),this.render()}next(){this.moveCursor((this.cursor+1)%this.choices.length),this.render()}_(t,i){if(t===" ")return this.submit()}get selection(){return this.choices[this.cursor]}render(){if(this.closed)return;this.firstRender?this.out.write(zE.hide):this.out.write(Ep(this.outputText,this.out.columns)),super.render();let t=UE(this.cursor,this.choices.length,this.optionsPerPage),i=t.startIndex,r=t.endIndex;if(this.outputText=[wp.symbol(this.done,this.aborted),Rt.bold(this.msg),wp.delimiter(!1),this.done?this.selection.title:this.selection.disabled?Rt.yellow(this.warn):Rt.gray(this.hint)].join(" "),!this.done){this.outputText+=`
`;for(let n=i;n<r;n++){let s,o,a="",c=this.choices[n];n===i&&i>0?o=vn.arrowUp:n===r-1&&r<this.choices.length?o=vn.arrowDown:o=" ",c.disabled?(s=this.cursor===n?Rt.gray().underline(c.title):Rt.strikethrough().gray(c.title),o=(this.cursor===n?Rt.bold().gray(vn.pointer)+" ":"  ")+o):(s=this.cursor===n?Rt.cyan().underline(c.title):c.title,o=(this.cursor===n?Rt.cyan(vn.pointer)+" ":"  ")+o,c.description&&this.cursor===n&&(a=` - ${c.description}`,(o.length+s.length+a.length>=this.out.columns||c.description.split(/\r?\n/).length>1)&&(a=`
`+BE(c.description,{margin:3,width:this.out.columns})))),this.outputText+=`${o} ${s}${Rt.gray(a)}
`}}this.out.write(this.outputText)}};_p.exports=Eo});var Ip=k((zR,Dp)=>{"use strict";var yn=pe(),HE=kt(),Op=ht(),Sp=Op.style,GE=Op.clear,Ap=fe(),Cp=Ap.cursor,VE=Ap.erase,_o=class extends HE{constructor(t={}){super(t),this.msg=t.message,this.value=!!t.initial,this.active=t.active||"on",this.inactive=t.inactive||"off",this.initialValue=this.value,this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}deactivate(){if(this.value===!1)return this.bell();this.value=!1,this.render()}activate(){if(this.value===!0)return this.bell();this.value=!0,this.render()}delete(){this.deactivate()}left(){this.deactivate()}right(){this.activate()}down(){this.deactivate()}up(){this.activate()}next(){this.value=!this.value,this.fire(),this.render()}_(t,i){if(t===" ")this.value=!this.value;else if(t==="1")this.value=!0;else if(t==="0")this.value=!1;else return this.bell();this.render()}render(){this.closed||(this.firstRender?this.out.write(Cp.hide):this.out.write(GE(this.outputText,this.out.columns)),super.render(),this.outputText=[Sp.symbol(this.done,this.aborted),yn.bold(this.msg),Sp.delimiter(this.done),this.value?this.inactive:yn.cyan().underline(this.inactive),yn.gray("/"),this.value?yn.cyan().underline(this.active):this.active].join(" "),this.out.write(VE.line+Cp.to(0)+this.outputText))}};Dp.exports=_o});var bt=k((HR,Np)=>{"use strict";var To=class e{constructor({token:t,date:i,parts:r,locales:n}){this.token=t,this.date=i||new Date,this.parts=r||[this],this.locales=n||{}}up(){}down(){}next(){let t=this.parts.indexOf(this);return this.parts.find((i,r)=>r>t&&i instanceof e)}setTo(t){}prev(){let t=[].concat(this.parts).reverse(),i=t.indexOf(this);return t.find((r,n)=>n>i&&r instanceof e)}toString(){return String(this.date)}};Np.exports=To});var kp=k((GR,Lp)=>{"use strict";var XE=bt(),So=class extends XE{constructor(t={}){super(t)}up(){this.date.setHours((this.date.getHours()+12)%24)}down(){this.up()}toString(){let t=this.date.getHours()>12?"pm":"am";return/\A/.test(this.token)?t.toUpperCase():t}};Lp.exports=So});var Pp=k((VR,Rp)=>{"use strict";var YE=bt(),WE=e=>(e=e%10,e===1?"st":e===2?"nd":e===3?"rd":"th"),Co=class extends YE{constructor(t={}){super(t)}up(){this.date.setDate(this.date.getDate()+1)}down(){this.date.setDate(this.date.getDate()-1)}setTo(t){this.date.setDate(parseInt(t.substr(-2)))}toString(){let t=this.date.getDate(),i=this.date.getDay();return this.token==="DD"?String(t).padStart(2,"0"):this.token==="Do"?t+WE(t):this.token==="d"?i+1:this.token==="ddd"?this.locales.weekdaysShort[i]:this.token==="dddd"?this.locales.weekdays[i]:t}};Rp.exports=Co});var jp=k((XR,Fp)=>{"use strict";var KE=bt(),Oo=class extends KE{constructor(t={}){super(t)}up(){this.date.setHours(this.date.getHours()+1)}down(){this.date.setHours(this.date.getHours()-1)}setTo(t){this.date.setHours(parseInt(t.substr(-2)))}toString(){let t=this.date.getHours();return/h/.test(this.token)&&(t=t%12||12),this.token.length>1?String(t).padStart(2,"0"):t}};Fp.exports=Oo});var qp=k((YR,Mp)=>{"use strict";var JE=bt(),Ao=class extends JE{constructor(t={}){super(t)}up(){this.date.setMilliseconds(this.date.getMilliseconds()+1)}down(){this.date.setMilliseconds(this.date.getMilliseconds()-1)}setTo(t){this.date.setMilliseconds(parseInt(t.substr(-this.token.length)))}toString(){return String(this.date.getMilliseconds()).padStart(4,"0").substr(0,this.token.length)}};Mp.exports=Ao});var Up=k((WR,Bp)=>{"use strict";var ZE=bt(),Do=class extends ZE{constructor(t={}){super(t)}up(){this.date.setMinutes(this.date.getMinutes()+1)}down(){this.date.setMinutes(this.date.getMinutes()-1)}setTo(t){this.date.setMinutes(parseInt(t.substr(-2)))}toString(){let t=this.date.getMinutes();return this.token.length>1?String(t).padStart(2,"0"):t}};Bp.exports=Do});var zp=k((KR,$p)=>{"use strict";var QE=bt(),Io=class extends QE{constructor(t={}){super(t)}up(){this.date.setMonth(this.date.getMonth()+1)}down(){this.date.setMonth(this.date.getMonth()-1)}setTo(t){t=parseInt(t.substr(-2))-1,this.date.setMonth(t<0?0:t)}toString(){let t=this.date.getMonth(),i=this.token.length;return i===2?String(t+1).padStart(2,"0"):i===3?this.locales.monthsShort[t]:i===4?this.locales.months[t]:String(t+1)}};$p.exports=Io});var Gp=k((JR,Hp)=>{"use strict";var e_=bt(),No=class extends e_{constructor(t={}){super(t)}up(){this.date.setSeconds(this.date.getSeconds()+1)}down(){this.date.setSeconds(this.date.getSeconds()-1)}setTo(t){this.date.setSeconds(parseInt(t.substr(-2)))}toString(){let t=this.date.getSeconds();return this.token.length>1?String(t).padStart(2,"0"):t}};Hp.exports=No});var Xp=k((ZR,Vp)=>{"use strict";var t_=bt(),Lo=class extends t_{constructor(t={}){super(t)}up(){this.date.setFullYear(this.date.getFullYear()+1)}down(){this.date.setFullYear(this.date.getFullYear()-1)}setTo(t){this.date.setFullYear(t.substr(-4))}toString(){let t=String(this.date.getFullYear()).padStart(4,"0");return this.token.length===2?t.substr(-2):t}};Vp.exports=Lo});var Wp=k((QR,Yp)=>{"use strict";Yp.exports={DatePart:bt(),Meridiem:kp(),Day:Pp(),Hours:jp(),Milliseconds:qp(),Minutes:Up(),Month:zp(),Seconds:Gp(),Year:Xp()}});var sd=k((eP,nd)=>{"use strict";function Kp(e,t,i,r,n,s,o){try{var a=e[s](o),c=a.value}catch(u){i(u);return}a.done?t(c):Promise.resolve(c).then(r,n)}function Jp(e){return function(){var t=this,i=arguments;return new Promise(function(r,n){var s=e.apply(t,i);function o(c){Kp(s,r,n,o,a,"next",c)}function a(c){Kp(s,r,n,o,a,"throw",c)}o(void 0)})}}var ko=pe(),i_=kt(),Po=ht(),Zp=Po.style,Qp=Po.clear,r_=Po.figures,rd=fe(),n_=rd.erase,ed=rd.cursor,Pt=Wp(),td=Pt.DatePart,s_=Pt.Meridiem,o_=Pt.Day,a_=Pt.Hours,c_=Pt.Milliseconds,u_=Pt.Minutes,l_=Pt.Month,p_=Pt.Seconds,d_=Pt.Year,f_=/\\(.)|"((?:\\["\\]|[^"])+)"|(D[Do]?|d{3,4}|d)|(M{1,4})|(YY(?:YY)?)|([aA])|([Hh]{1,2})|(m{1,2})|(s{1,2})|(S{1,4})|./g,id={1:({token:e})=>e.replace(/\\(.)/g,"$1"),2:e=>new o_(e),3:e=>new l_(e),4:e=>new d_(e),5:e=>new s_(e),6:e=>new a_(e),7:e=>new u_(e),8:e=>new p_(e),9:e=>new c_(e)},h_={months:"January,February,March,April,May,June,July,August,September,October,November,December".split(","),monthsShort:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),weekdays:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),weekdaysShort:"Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(",")},Ro=class extends i_{constructor(t={}){super(t),this.msg=t.message,this.cursor=0,this.typed="",this.locales=Object.assign(h_,t.locales),this._date=t.initial||new Date,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.mask=t.mask||"YYYY-MM-DD HH:mm:ss",this.clear=Qp("",this.out.columns),this.render()}get value(){return this.date}get date(){return this._date}set date(t){t&&this._date.setTime(t.getTime())}set mask(t){let i;for(this.parts=[];i=f_.exec(t);){let n=i.shift(),s=i.findIndex(o=>o!=null);this.parts.push(s in id?id[s]({token:i[s]||n,date:this.date,parts:this.parts,locales:this.locales}):i[s]||n)}let r=this.parts.reduce((n,s)=>(typeof s=="string"&&typeof n[n.length-1]=="string"?n[n.length-1]+=s:n.push(s),n),[]);this.parts.splice(0),this.parts.push(...r),this.reset()}moveCursor(t){this.typed="",this.cursor=t,this.fire()}reset(){this.moveCursor(this.parts.findIndex(t=>t instanceof td)),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}validate(){var t=this;return Jp(function*(){let i=yield t.validator(t.value);typeof i=="string"&&(t.errorMsg=i,i=!1),t.error=!i})()}submit(){var t=this;return Jp(function*(){if(yield t.validate(),t.error){t.color="red",t.fire(),t.render();return}t.done=!0,t.aborted=!1,t.fire(),t.render(),t.out.write(`
`),t.close()})()}up(){this.typed="",this.parts[this.cursor].up(),this.render()}down(){this.typed="",this.parts[this.cursor].down(),this.render()}left(){let t=this.parts[this.cursor].prev();if(t==null)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}right(){let t=this.parts[this.cursor].next();if(t==null)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}next(){let t=this.parts[this.cursor].next();this.moveCursor(t?this.parts.indexOf(t):this.parts.findIndex(i=>i instanceof td)),this.render()}_(t){/\d/.test(t)&&(this.typed+=t,this.parts[this.cursor].setTo(this.typed),this.render())}render(){this.closed||(this.firstRender?this.out.write(ed.hide):this.out.write(Qp(this.outputText,this.out.columns)),super.render(),this.outputText=[Zp.symbol(this.done,this.aborted),ko.bold(this.msg),Zp.delimiter(!1),this.parts.reduce((t,i,r)=>t.concat(r===this.cursor&&!this.done?ko.cyan().underline(i.toString()):i),[]).join("")].join(" "),this.error&&(this.outputText+=this.errorMsg.split(`
`).reduce((t,i,r)=>t+`
${r?" ":r_.pointerSmall} ${ko.red().italic(i)}`,"")),this.out.write(n_.line+ed.to(0)+this.outputText))}};nd.exports=Ro});var dd=k((tP,pd)=>{"use strict";function od(e,t,i,r,n,s,o){try{var a=e[s](o),c=a.value}catch(u){i(u);return}a.done?t(c):Promise.resolve(c).then(r,n)}function ad(e){return function(){var t=this,i=arguments;return new Promise(function(r,n){var s=e.apply(t,i);function o(c){od(s,r,n,o,a,"next",c)}function a(c){od(s,r,n,o,a,"throw",c)}o(void 0)})}}var bn=pe(),m_=kt(),ld=fe(),wn=ld.cursor,g_=ld.erase,En=ht(),Fo=En.style,x_=En.figures,cd=En.clear,v_=En.lines,y_=/[0-9]/,jo=e=>e!==void 0,ud=(e,t)=>{let i=Math.pow(10,t);return Math.round(e*i)/i},Mo=class extends m_{constructor(t={}){super(t),this.transform=Fo.render(t.style),this.msg=t.message,this.initial=jo(t.initial)?t.initial:"",this.float=!!t.float,this.round=t.round||2,this.inc=t.increment||1,this.min=jo(t.min)?t.min:-1/0,this.max=jo(t.max)?t.max:1/0,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.color="cyan",this.value="",this.typed="",this.lastHit=0,this.render()}set value(t){!t&&t!==0?(this.placeholder=!0,this.rendered=bn.gray(this.transform.render(`${this.initial}`)),this._value=""):(this.placeholder=!1,this.rendered=this.transform.render(`${ud(t,this.round)}`),this._value=ud(t,this.round)),this.fire()}get value(){return this._value}parse(t){return this.float?parseFloat(t):parseInt(t)}valid(t){return t==="-"||t==="."&&this.float||y_.test(t)}reset(){this.typed="",this.value="",this.fire(),this.render()}exit(){this.abort()}abort(){let t=this.value;this.value=t!==""?t:this.initial,this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}validate(){var t=this;return ad(function*(){let i=yield t.validator(t.value);typeof i=="string"&&(t.errorMsg=i,i=!1),t.error=!i})()}submit(){var t=this;return ad(function*(){if(yield t.validate(),t.error){t.color="red",t.fire(),t.render();return}let i=t.value;t.value=i!==""?i:t.initial,t.done=!0,t.aborted=!1,t.error=!1,t.fire(),t.render(),t.out.write(`
`),t.close()})()}up(){if(this.typed="",this.value===""&&(this.value=this.min-this.inc),this.value>=this.max)return this.bell();this.value+=this.inc,this.color="cyan",this.fire(),this.render()}down(){if(this.typed="",this.value===""&&(this.value=this.min+this.inc),this.value<=this.min)return this.bell();this.value-=this.inc,this.color="cyan",this.fire(),this.render()}delete(){let t=this.value.toString();if(t.length===0)return this.bell();this.value=this.parse(t=t.slice(0,-1))||"",this.value!==""&&this.value<this.min&&(this.value=this.min),this.color="cyan",this.fire(),this.render()}next(){this.value=this.initial,this.fire(),this.render()}_(t,i){if(!this.valid(t))return this.bell();let r=Date.now();if(r-this.lastHit>1e3&&(this.typed=""),this.typed+=t,this.lastHit=r,this.color="cyan",t===".")return this.fire();this.value=Math.min(this.parse(this.typed),this.max),this.value>this.max&&(this.value=this.max),this.value<this.min&&(this.value=this.min),this.fire(),this.render()}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(wn.down(v_(this.outputError,this.out.columns)-1)+cd(this.outputError,this.out.columns)),this.out.write(cd(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[Fo.symbol(this.done,this.aborted),bn.bold(this.msg),Fo.delimiter(this.done),!this.done||!this.done&&!this.placeholder?bn[this.color]().underline(this.rendered):this.rendered].join(" "),this.error&&(this.outputError+=this.errorMsg.split(`
`).reduce((t,i,r)=>t+`
${r?" ":x_.pointerSmall} ${bn.red().italic(i)}`,"")),this.out.write(g_.line+wn.to(0)+this.outputText+wn.save+this.outputError+wn.restore))}};pd.exports=Mo});var Bo=k((iP,md)=>{"use strict";var wt=pe(),b_=fe(),w_=b_.cursor,E_=kt(),mr=ht(),fd=mr.clear,Kt=mr.figures,hd=mr.style,__=mr.wrap,T_=mr.entriesToDisplay,qo=class extends E_{constructor(t={}){super(t),this.msg=t.message,this.cursor=t.cursor||0,this.scrollIndex=t.cursor||0,this.hint=t.hint||"",this.warn=t.warn||"- This option is disabled -",this.minSelected=t.min,this.showMinError=!1,this.maxChoices=t.max,this.instructions=t.instructions,this.optionsPerPage=t.optionsPerPage||10,this.value=t.choices.map((i,r)=>(typeof i=="string"&&(i={title:i,value:r}),{title:i&&(i.title||i.value||i),description:i&&i.description,value:i&&(i.value===void 0?r:i.value),selected:i&&i.selected,disabled:i&&i.disabled})),this.clear=fd("",this.out.columns),t.overrideRender||this.render()}reset(){this.value.map(t=>!t.selected),this.cursor=0,this.fire(),this.render()}selected(){return this.value.filter(t=>t.selected)}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){let t=this.value.filter(i=>i.selected);this.minSelected&&t.length<this.minSelected?(this.showMinError=!0,this.render()):(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close())}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.value.length,this.render()}up(){this.cursor===0?this.cursor=this.value.length-1:this.cursor--,this.render()}down(){this.cursor===this.value.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.value[this.cursor].selected=!1,this.render()}right(){if(this.value.filter(t=>t.selected).length>=this.maxChoices)return this.bell();this.value[this.cursor].selected=!0,this.render()}handleSpaceToggle(){let t=this.value[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter(i=>i.selected).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}toggleAll(){if(this.maxChoices!==void 0||this.value[this.cursor].disabled)return this.bell();let t=!this.value[this.cursor].selected;this.value.filter(i=>!i.disabled).forEach(i=>i.selected=t),this.render()}_(t,i){if(t===" ")this.handleSpaceToggle();else if(t==="a")this.toggleAll();else return this.bell()}renderInstructions(){return this.instructions===void 0||this.instructions?typeof this.instructions=="string"?this.instructions:`
Instructions:
    ${Kt.arrowUp}/${Kt.arrowDown}: Highlight option
    ${Kt.arrowLeft}/${Kt.arrowRight}/[space]: Toggle selection
`+(this.maxChoices===void 0?`    a: Toggle all
`:"")+"    enter/return: Complete answer":""}renderOption(t,i,r,n){let s=(i.selected?wt.green(Kt.radioOn):Kt.radioOff)+" "+n+" ",o,a;return i.disabled?o=t===r?wt.gray().underline(i.title):wt.strikethrough().gray(i.title):(o=t===r?wt.cyan().underline(i.title):i.title,t===r&&i.description&&(a=` - ${i.description}`,(s.length+o.length+a.length>=this.out.columns||i.description.split(/\r?\n/).length>1)&&(a=`
`+__(i.description,{margin:s.length,width:this.out.columns})))),s+o+wt.gray(a||"")}paginateOptions(t){if(t.length===0)return wt.red("No matches for this query.");let i=T_(this.cursor,t.length,this.optionsPerPage),r=i.startIndex,n=i.endIndex,s,o=[];for(let a=r;a<n;a++)a===r&&r>0?s=Kt.arrowUp:a===n-1&&n<t.length?s=Kt.arrowDown:s=" ",o.push(this.renderOption(this.cursor,t[a],a,s));return`
`+o.join(`
`)}renderOptions(t){return this.done?"":this.paginateOptions(t)}renderDoneOrInstructions(){if(this.done)return this.value.filter(i=>i.selected).map(i=>i.title).join(", ");let t=[wt.gray(this.hint),this.renderInstructions()];return this.value[this.cursor].disabled&&t.push(wt.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(w_.hide),super.render();let t=[hd.symbol(this.done,this.aborted),wt.bold(this.msg),hd.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=wt.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.value),this.out.write(this.clear+t),this.clear=fd(t,this.out.columns)}};md.exports=qo});var Ed=k((rP,wd)=>{"use strict";function gd(e,t,i,r,n,s,o){try{var a=e[s](o),c=a.value}catch(u){i(u);return}a.done?t(c):Promise.resolve(c).then(r,n)}function S_(e){return function(){var t=this,i=arguments;return new Promise(function(r,n){var s=e.apply(t,i);function o(c){gd(s,r,n,o,a,"next",c)}function a(c){gd(s,r,n,o,a,"throw",c)}o(void 0)})}}var gr=pe(),C_=kt(),bd=fe(),O_=bd.erase,xd=bd.cursor,xr=ht(),Uo=xr.style,vd=xr.clear,$o=xr.figures,A_=xr.wrap,D_=xr.entriesToDisplay,yd=(e,t)=>e[t]&&(e[t].value||e[t].title||e[t]),I_=(e,t)=>e[t]&&(e[t].title||e[t].value||e[t]),N_=(e,t)=>{let i=e.findIndex(r=>r.value===t||r.title===t);return i>-1?i:void 0},zo=class extends C_{constructor(t={}){super(t),this.msg=t.message,this.suggest=t.suggest,this.choices=t.choices,this.initial=typeof t.initial=="number"?t.initial:N_(t.choices,t.initial),this.select=this.initial||t.cursor||0,this.i18n={noMatches:t.noMatches||"no matches found"},this.fallback=t.fallback||this.initial,this.clearFirst=t.clearFirst||!1,this.suggestions=[],this.input="",this.limit=t.limit||10,this.cursor=0,this.transform=Uo.render(t.style),this.scale=this.transform.scale,this.render=this.render.bind(this),this.complete=this.complete.bind(this),this.clear=vd("",this.out.columns),this.complete(this.render),this.render()}set fallback(t){this._fb=Number.isSafeInteger(parseInt(t))?parseInt(t):t}get fallback(){let t;return typeof this._fb=="number"?t=this.choices[this._fb]:typeof this._fb=="string"&&(t={title:this._fb}),t||this._fb||{title:this.i18n.noMatches}}moveSelect(t){this.select=t,this.suggestions.length>0?this.value=yd(this.suggestions,t):this.value=this.fallback.value,this.fire()}complete(t){var i=this;return S_(function*(){let r=i.completing=i.suggest(i.input,i.choices),n=yield r;if(i.completing!==r)return;i.suggestions=n.map((o,a,c)=>({title:I_(c,a),value:yd(c,a),description:o.description})),i.completing=!1;let s=Math.max(n.length-1,0);i.moveSelect(Math.min(s,i.select)),t&&t()})()}reset(){this.input="",this.complete(()=>{this.moveSelect(this.initial!==void 0?this.initial:0),this.render()}),this.render()}exit(){this.clearFirst&&this.input.length>0?this.reset():(this.done=this.exited=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close())}abort(){this.done=this.aborted=!0,this.exited=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.done=!0,this.aborted=this.exited=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}_(t,i){let r=this.input.slice(0,this.cursor),n=this.input.slice(this.cursor);this.input=`${r}${t}${n}`,this.cursor=r.length+1,this.complete(this.render),this.render()}delete(){if(this.cursor===0)return this.bell();let t=this.input.slice(0,this.cursor-1),i=this.input.slice(this.cursor);this.input=`${t}${i}`,this.complete(this.render),this.cursor=this.cursor-1,this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();let t=this.input.slice(0,this.cursor),i=this.input.slice(this.cursor+1);this.input=`${t}${i}`,this.complete(this.render),this.render()}first(){this.moveSelect(0),this.render()}last(){this.moveSelect(this.suggestions.length-1),this.render()}up(){this.select===0?this.moveSelect(this.suggestions.length-1):this.moveSelect(this.select-1),this.render()}down(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}next(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}nextPage(){this.moveSelect(Math.min(this.select+this.limit,this.suggestions.length-1)),this.render()}prevPage(){this.moveSelect(Math.max(this.select-this.limit,0)),this.render()}left(){if(this.cursor<=0)return this.bell();this.cursor=this.cursor-1,this.render()}right(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();this.cursor=this.cursor+1,this.render()}renderOption(t,i,r,n){let s,o=r?$o.arrowUp:n?$o.arrowDown:" ",a=i?gr.cyan().underline(t.title):t.title;return o=(i?gr.cyan($o.pointer)+" ":"  ")+o,t.description&&(s=` - ${t.description}`,(o.length+a.length+s.length>=this.out.columns||t.description.split(/\r?\n/).length>1)&&(s=`
`+A_(t.description,{margin:3,width:this.out.columns}))),o+" "+a+gr.gray(s||"")}render(){if(this.closed)return;this.firstRender?this.out.write(xd.hide):this.out.write(vd(this.outputText,this.out.columns)),super.render();let t=D_(this.select,this.choices.length,this.limit),i=t.startIndex,r=t.endIndex;if(this.outputText=[Uo.symbol(this.done,this.aborted,this.exited),gr.bold(this.msg),Uo.delimiter(this.completing),this.done&&this.suggestions[this.select]?this.suggestions[this.select].title:this.rendered=this.transform.render(this.input)].join(" "),!this.done){let n=this.suggestions.slice(i,r).map((s,o)=>this.renderOption(s,this.select===o+i,o===0&&i>0,o+i===r-1&&r<this.choices.length)).join(`
`);this.outputText+=`
`+(n||gr.gray(this.fallback.title))}this.out.write(O_.line+xd.to(0)+this.outputText)}};wd.exports=zo});var Cd=k((nP,Sd)=>{"use strict";var Ft=pe(),L_=fe(),k_=L_.cursor,R_=Bo(),Go=ht(),_d=Go.clear,Td=Go.style,Fi=Go.figures,Ho=class extends R_{constructor(t={}){t.overrideRender=!0,super(t),this.inputValue="",this.clear=_d("",this.out.columns),this.filteredOptions=this.value,this.render()}last(){this.cursor=this.filteredOptions.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.filteredOptions.length,this.render()}up(){this.cursor===0?this.cursor=this.filteredOptions.length-1:this.cursor--,this.render()}down(){this.cursor===this.filteredOptions.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.filteredOptions[this.cursor].selected=!1,this.render()}right(){if(this.value.filter(t=>t.selected).length>=this.maxChoices)return this.bell();this.filteredOptions[this.cursor].selected=!0,this.render()}delete(){this.inputValue.length&&(this.inputValue=this.inputValue.substr(0,this.inputValue.length-1),this.updateFilteredOptions())}updateFilteredOptions(){let t=this.filteredOptions[this.cursor];this.filteredOptions=this.value.filter(r=>this.inputValue?!!(typeof r.title=="string"&&r.title.toLowerCase().includes(this.inputValue.toLowerCase())||typeof r.value=="string"&&r.value.toLowerCase().includes(this.inputValue.toLowerCase())):!0);let i=this.filteredOptions.findIndex(r=>r===t);this.cursor=i<0?0:i,this.render()}handleSpaceToggle(){let t=this.filteredOptions[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter(i=>i.selected).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}handleInputChange(t){this.inputValue=this.inputValue+t,this.updateFilteredOptions()}_(t,i){t===" "?this.handleSpaceToggle():this.handleInputChange(t)}renderInstructions(){return this.instructions===void 0||this.instructions?typeof this.instructions=="string"?this.instructions:`
Instructions:
    ${Fi.arrowUp}/${Fi.arrowDown}: Highlight option
    ${Fi.arrowLeft}/${Fi.arrowRight}/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer
`:""}renderCurrentInput(){return`
Filtered results for: ${this.inputValue?this.inputValue:Ft.gray("Enter something to filter")}
`}renderOption(t,i,r){let n;return i.disabled?n=t===r?Ft.gray().underline(i.title):Ft.strikethrough().gray(i.title):n=t===r?Ft.cyan().underline(i.title):i.title,(i.selected?Ft.green(Fi.radioOn):Fi.radioOff)+"  "+n}renderDoneOrInstructions(){if(this.done)return this.value.filter(i=>i.selected).map(i=>i.title).join(", ");let t=[Ft.gray(this.hint),this.renderInstructions(),this.renderCurrentInput()];return this.filteredOptions.length&&this.filteredOptions[this.cursor].disabled&&t.push(Ft.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(k_.hide),super.render();let t=[Td.symbol(this.done,this.aborted),Ft.bold(this.msg),Td.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=Ft.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.filteredOptions),this.out.write(this.clear+t),this.clear=_d(t,this.out.columns)}};Sd.exports=Ho});var kd=k((sP,Ld)=>{"use strict";var Od=pe(),P_=kt(),Id=ht(),Ad=Id.style,F_=Id.clear,Nd=fe(),j_=Nd.erase,Dd=Nd.cursor,Vo=class extends P_{constructor(t={}){super(t),this.msg=t.message,this.value=t.initial,this.initialValue=!!t.initial,this.yesMsg=t.yes||"yes",this.yesOption=t.yesOption||"(Y/n)",this.noMsg=t.no||"no",this.noOption=t.noOption||"(y/N)",this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.value=this.value||!1,this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}_(t,i){return t.toLowerCase()==="y"?(this.value=!0,this.submit()):t.toLowerCase()==="n"?(this.value=!1,this.submit()):this.bell()}render(){this.closed||(this.firstRender?this.out.write(Dd.hide):this.out.write(F_(this.outputText,this.out.columns)),super.render(),this.outputText=[Ad.symbol(this.done,this.aborted),Od.bold(this.msg),Ad.delimiter(this.done),this.done?this.value?this.yesMsg:this.noMsg:Od.gray(this.initialValue?this.yesOption:this.noOption)].join(" "),this.out.write(j_.line+Dd.to(0)+this.outputText))}};Ld.exports=Vo});var Pd=k((oP,Rd)=>{"use strict";Rd.exports={TextPrompt:bp(),SelectPrompt:Tp(),TogglePrompt:Ip(),DatePrompt:sd(),NumberPrompt:dd(),MultiselectPrompt:Bo(),AutocompletePrompt:Ed(),AutocompleteMultiselectPrompt:Cd(),ConfirmPrompt:kd()}});var jd=k(Fd=>{"use strict";var Xe=Fd,M_=Pd(),_n=e=>e;function Et(e,t,i={}){return new Promise((r,n)=>{let s=new M_[e](t),o=i.onAbort||_n,a=i.onSubmit||_n,c=i.onExit||_n;s.on("state",t.onState||_n),s.on("submit",u=>r(a(u))),s.on("exit",u=>r(c(u))),s.on("abort",u=>n(o(u)))})}Xe.text=e=>Et("TextPrompt",e);Xe.password=e=>(e.style="password",Xe.text(e));Xe.invisible=e=>(e.style="invisible",Xe.text(e));Xe.number=e=>Et("NumberPrompt",e);Xe.date=e=>Et("DatePrompt",e);Xe.confirm=e=>Et("ConfirmPrompt",e);Xe.list=e=>{let t=e.separator||",";return Et("TextPrompt",e,{onSubmit:i=>i.split(t).map(r=>r.trim())})};Xe.toggle=e=>Et("TogglePrompt",e);Xe.select=e=>Et("SelectPrompt",e);Xe.multiselect=e=>{e.choices=[].concat(e.choices||[]);let t=i=>i.filter(r=>r.selected).map(r=>r.value);return Et("MultiselectPrompt",e,{onAbort:t,onSubmit:t})};Xe.autocompleteMultiselect=e=>{e.choices=[].concat(e.choices||[]);let t=i=>i.filter(r=>r.selected).map(r=>r.value);return Et("AutocompleteMultiselectPrompt",e,{onAbort:t,onSubmit:t})};var q_=(e,t)=>Promise.resolve(t.filter(i=>i.title.slice(0,e.length).toLowerCase()===e.toLowerCase()));Xe.autocomplete=e=>(e.suggest=e.suggest||q_,e.choices=[].concat(e.choices||[]),Et("AutocompletePrompt",e))});var Gd=k((cP,Hd)=>{"use strict";function Md(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),i.push.apply(i,r)}return i}function qd(e){for(var t=1;t<arguments.length;t++){var i=arguments[t]!=null?arguments[t]:{};t%2?Md(Object(i),!0).forEach(function(r){B_(e,r,i[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):Md(Object(i)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(i,r))})}return e}function B_(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function U_(e,t){var i=typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(!i){if(Array.isArray(e)||(i=$_(e))||t&&e&&typeof e.length=="number"){i&&(e=i);var r=0,n=function(){};return{s:n,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(u){throw u},f:n}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var s=!0,o=!1,a;return{s:function(){i=i.call(e)},n:function(){var u=i.next();return s=u.done,u},e:function(u){o=!0,a=u},f:function(){try{!s&&i.return!=null&&i.return()}finally{if(o)throw a}}}}function $_(e,t){if(e){if(typeof e=="string")return Bd(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);if(i==="Object"&&e.constructor&&(i=e.constructor.name),i==="Map"||i==="Set")return Array.from(e);if(i==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return Bd(e,t)}}function Bd(e,t){(t==null||t>e.length)&&(t=e.length);for(var i=0,r=new Array(t);i<t;i++)r[i]=e[i];return r}function Ud(e,t,i,r,n,s,o){try{var a=e[s](o),c=a.value}catch(u){i(u);return}a.done?t(c):Promise.resolve(c).then(r,n)}function $d(e){return function(){var t=this,i=arguments;return new Promise(function(r,n){var s=e.apply(t,i);function o(c){Ud(s,r,n,o,a,"next",c)}function a(c){Ud(s,r,n,o,a,"throw",c)}o(void 0)})}}var Xo=jd(),z_=["suggest","format","onState","validate","onRender","type"],zd=()=>{};function Jt(){return Yo.apply(this,arguments)}function Yo(){return Yo=$d(function*(e=[],{onSubmit:t=zd,onCancel:i=zd}={}){let r={},n=Jt._override||{};e=[].concat(e);let s,o,a,c,u,f,g=function(){var w=$d(function*(_,E,p=!1){if(!(!p&&_.validate&&_.validate(E)!==!0))return _.format?yield _.format(E,r):E});return function(E,p){return w.apply(this,arguments)}}();var x=U_(e),l;try{for(x.s();!(l=x.n()).done;){o=l.value;var m=o;if(c=m.name,u=m.type,typeof u=="function"&&(u=yield u(s,qd({},r),o),o.type=u),!!u){for(let w in o){if(z_.includes(w))continue;let _=o[w];o[w]=typeof _=="function"?yield _(s,qd({},r),f):_}if(f=o,typeof o.message!="string")throw new Error("prompt message is required");var v=o;if(c=v.name,u=v.type,Xo[u]===void 0)throw new Error(`prompt type (${u}) is not defined`);if(n[o.name]!==void 0&&(s=yield g(o,n[o.name]),s!==void 0)){r[c]=s;continue}try{s=Jt._injected?H_(Jt._injected,o.initial):yield Xo[u](o),r[c]=s=yield g(o,s,!0),a=yield t(o,s,r)}catch{a=!(yield i(o,r))}if(a)return r}}}catch(w){x.e(w)}finally{x.f()}return r}),Yo.apply(this,arguments)}function H_(e,t){let i=e.shift();if(i instanceof Error)throw i;return i===void 0?t:i}function G_(e){Jt._injected=(Jt._injected||[]).concat(e)}function V_(e){Jt._override=Object.assign({},e)}Hd.exports=Object.assign(Jt,{prompt:Jt,prompts:Xo,inject:G_,override:V_})});var Xd=k((uP,Vd)=>{"use strict";Vd.exports=(e,t)=>{if(!(e.meta&&e.name!=="escape")){if(e.ctrl){if(e.name==="a")return"first";if(e.name==="c"||e.name==="d")return"abort";if(e.name==="e")return"last";if(e.name==="g")return"reset"}if(t){if(e.name==="j")return"down";if(e.name==="k")return"up"}return e.name==="return"||e.name==="enter"?"submit":e.name==="backspace"?"delete":e.name==="delete"?"deleteForward":e.name==="abort"?"abort":e.name==="escape"?"exit":e.name==="tab"?"next":e.name==="pagedown"?"nextPage":e.name==="pageup"?"prevPage":e.name==="home"?"home":e.name==="end"?"end":e.name==="up"?"up":e.name==="down"?"down":e.name==="right"?"right":e.name==="left"?"left":!1}}});var Tn=k((lP,Yd)=>{"use strict";Yd.exports=e=>{let t=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))"].join("|"),i=new RegExp(t,"g");return typeof e=="string"?e.replace(i,""):e}});var Jd=k((pP,Kd)=>{"use strict";var X_=Tn(),{erase:Wd,cursor:Y_}=fe(),W_=e=>[...X_(e)].length;Kd.exports=function(e,t){if(!t)return Wd.line+Y_.to(0);let i=0,r=e.split(/\r?\n/);for(let n of r)i+=1+Math.floor(Math.max(W_(n)-1,0)/t);return Wd.lines(i)}});var Wo=k((dP,Zd)=>{"use strict";var vr={arrowUp:"\u2191",arrowDown:"\u2193",arrowLeft:"\u2190",arrowRight:"\u2192",radioOn:"\u25C9",radioOff:"\u25EF",tick:"\u2714",cross:"\u2716",ellipsis:"\u2026",pointerSmall:"\u203A",line:"\u2500",pointer:"\u276F"},K_={arrowUp:vr.arrowUp,arrowDown:vr.arrowDown,arrowLeft:vr.arrowLeft,arrowRight:vr.arrowRight,radioOn:"(*)",radioOff:"( )",tick:"\u221A",cross:"\xD7",ellipsis:"...",pointerSmall:"\xBB",line:"\u2500",pointer:">"},J_=process.platform==="win32"?K_:vr;Zd.exports=J_});var ef=k((fP,Qd)=>{"use strict";var ji=pe(),di=Wo(),Ko=Object.freeze({password:{scale:1,render:e=>"*".repeat(e.length)},emoji:{scale:2,render:e=>"\u{1F603}".repeat(e.length)},invisible:{scale:0,render:e=>""},default:{scale:1,render:e=>`${e}`}}),Z_=e=>Ko[e]||Ko.default,yr=Object.freeze({aborted:ji.red(di.cross),done:ji.green(di.tick),exited:ji.yellow(di.cross),default:ji.cyan("?")}),Q_=(e,t,i)=>t?yr.aborted:i?yr.exited:e?yr.done:yr.default,eT=e=>ji.gray(e?di.ellipsis:di.pointerSmall),tT=(e,t)=>ji.gray(e?t?di.pointerSmall:"+":di.line);Qd.exports={styles:Ko,render:Z_,symbols:yr,symbol:Q_,delimiter:eT,item:tT}});var rf=k((hP,tf)=>{"use strict";var iT=Tn();tf.exports=function(e,t){let i=String(iT(e)||"").split(/\r?\n/);return t?i.map(r=>Math.ceil(r.length/t)).reduce((r,n)=>r+n):i.length}});var sf=k((mP,nf)=>{"use strict";nf.exports=(e,t={})=>{let i=Number.isSafeInteger(parseInt(t.margin))?new Array(parseInt(t.margin)).fill(" ").join(""):t.margin||"",r=t.width;return(e||"").split(/\r?\n/g).map(n=>n.split(/\s+/g).reduce((s,o)=>(o.length+i.length>=r||s[s.length-1].length+o.length+1<r?s[s.length-1]+=` ${o}`:s.push(`${i}${o}`),s),[i]).join(`
`)).join(`
`)}});var af=k((gP,of)=>{"use strict";of.exports=(e,t,i)=>{i=i||t;let r=Math.min(t-i,e-Math.floor(i/2));r<0&&(r=0);let n=Math.min(r+i,t);return{startIndex:r,endIndex:n}}});var mt=k((xP,cf)=>{"use strict";cf.exports={action:Xd(),clear:Jd(),style:ef(),strip:Tn(),figures:Wo(),lines:rf(),wrap:sf(),entriesToDisplay:af()}});var jt=k((vP,lf)=>{"use strict";var uf=require("readline"),{action:rT}=mt(),nT=require("events"),{beep:sT,cursor:oT}=fe(),aT=pe(),Jo=class extends nT{constructor(t={}){super(),this.firstRender=!0,this.in=t.stdin||process.stdin,this.out=t.stdout||process.stdout,this.onRender=(t.onRender||(()=>{})).bind(this);let i=uf.createInterface({input:this.in,escapeCodeTimeout:50});uf.emitKeypressEvents(this.in,i),this.in.isTTY&&this.in.setRawMode(!0);let r=["SelectPrompt","MultiselectPrompt"].indexOf(this.constructor.name)>-1,n=(s,o)=>{let a=rT(o,r);a===!1?this._&&this._(s,o):typeof this[a]=="function"?this[a](o):this.bell()};this.close=()=>{this.out.write(oT.show),this.in.removeListener("keypress",n),this.in.isTTY&&this.in.setRawMode(!1),i.close(),this.emit(this.aborted?"abort":this.exited?"exit":"submit",this.value),this.closed=!0},this.in.on("keypress",n)}fire(){this.emit("state",{value:this.value,aborted:!!this.aborted,exited:!!this.exited})}bell(){this.out.write(sT)}render(){this.onRender(aT),this.firstRender&&(this.firstRender=!1)}};lf.exports=Jo});var df=k((yP,pf)=>{"use strict";var Sn=pe(),cT=jt(),{erase:uT,cursor:br}=fe(),{style:Zo,clear:Qo,lines:lT,figures:pT}=mt(),ea=class extends cT{constructor(t={}){super(t),this.transform=Zo.render(t.style),this.scale=this.transform.scale,this.msg=t.message,this.initial=t.initial||"",this.validator=t.validate||(()=>!0),this.value="",this.errorMsg=t.error||"Please Enter A Valid Value",this.cursor=+!!this.initial,this.cursorOffset=0,this.clear=Qo("",this.out.columns),this.render()}set value(t){!t&&this.initial?(this.placeholder=!0,this.rendered=Sn.gray(this.transform.render(this.initial))):(this.placeholder=!1,this.rendered=this.transform.render(t)),this._value=t,this.fire()}get value(){return this._value}reset(){this.value="",this.cursor=+!!this.initial,this.cursorOffset=0,this.fire(),this.render()}exit(){this.abort()}abort(){this.value=this.value||this.initial,this.done=this.aborted=!0,this.error=!1,this.red=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}async validate(){let t=await this.validator(this.value);typeof t=="string"&&(this.errorMsg=t,t=!1),this.error=!t}async submit(){if(this.value=this.value||this.initial,this.cursorOffset=0,this.cursor=this.rendered.length,await this.validate(),this.error){this.red=!0,this.fire(),this.render();return}this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}next(){if(!this.placeholder)return this.bell();this.value=this.initial,this.cursor=this.rendered.length,this.fire(),this.render()}moveCursor(t){this.placeholder||(this.cursor=this.cursor+t,this.cursorOffset+=t)}_(t,i){let r=this.value.slice(0,this.cursor),n=this.value.slice(this.cursor);this.value=`${r}${t}${n}`,this.red=!1,this.cursor=this.placeholder?0:r.length+1,this.render()}delete(){if(this.isCursorAtStart())return this.bell();let t=this.value.slice(0,this.cursor-1),i=this.value.slice(this.cursor);this.value=`${t}${i}`,this.red=!1,this.isCursorAtStart()?this.cursorOffset=0:(this.cursorOffset++,this.moveCursor(-1)),this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();let t=this.value.slice(0,this.cursor),i=this.value.slice(this.cursor+1);this.value=`${t}${i}`,this.red=!1,this.isCursorAtEnd()?this.cursorOffset=0:this.cursorOffset++,this.render()}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length,this.render()}left(){if(this.cursor<=0||this.placeholder)return this.bell();this.moveCursor(-1),this.render()}right(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();this.moveCursor(1),this.render()}isCursorAtStart(){return this.cursor===0||this.placeholder&&this.cursor===1}isCursorAtEnd(){return this.cursor===this.rendered.length||this.placeholder&&this.cursor===this.rendered.length+1}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(br.down(lT(this.outputError,this.out.columns)-1)+Qo(this.outputError,this.out.columns)),this.out.write(Qo(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[Zo.symbol(this.done,this.aborted),Sn.bold(this.msg),Zo.delimiter(this.done),this.red?Sn.red(this.rendered):this.rendered].join(" "),this.error&&(this.outputError+=this.errorMsg.split(`
`).reduce((t,i,r)=>t+`
${r?" ":pT.pointerSmall} ${Sn.red().italic(i)}`,"")),this.out.write(uT.line+br.to(0)+this.outputText+br.save+this.outputError+br.restore+br.move(this.cursorOffset,0)))}};pf.exports=ea});var gf=k((bP,mf)=>{"use strict";var Mt=pe(),dT=jt(),{style:ff,clear:hf,figures:Cn,wrap:fT,entriesToDisplay:hT}=mt(),{cursor:mT}=fe(),ta=class extends dT{constructor(t={}){super(t),this.msg=t.message,this.hint=t.hint||"- Use arrow-keys. Return to submit.",this.warn=t.warn||"- This option is disabled",this.cursor=t.initial||0,this.choices=t.choices.map((i,r)=>(typeof i=="string"&&(i={title:i,value:r}),{title:i&&(i.title||i.value||i),value:i&&(i.value===void 0?r:i.value),description:i&&i.description,selected:i&&i.selected,disabled:i&&i.disabled})),this.optionsPerPage=t.optionsPerPage||10,this.value=(this.choices[this.cursor]||{}).value,this.clear=hf("",this.out.columns),this.render()}moveCursor(t){this.cursor=t,this.value=this.choices[t].value,this.fire()}reset(){this.moveCursor(0),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.selection.disabled?this.bell():(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close())}first(){this.moveCursor(0),this.render()}last(){this.moveCursor(this.choices.length-1),this.render()}up(){this.cursor===0?this.moveCursor(this.choices.length-1):this.moveCursor(this.cursor-1),this.render()}down(){this.cursor===this.choices.length-1?this.moveCursor(0):this.moveCursor(this.cursor+1),this.render()}next(){this.moveCursor((this.cursor+1)%this.choices.length),this.render()}_(t,i){if(t===" ")return this.submit()}get selection(){return this.choices[this.cursor]}render(){if(this.closed)return;this.firstRender?this.out.write(mT.hide):this.out.write(hf(this.outputText,this.out.columns)),super.render();let{startIndex:t,endIndex:i}=hT(this.cursor,this.choices.length,this.optionsPerPage);if(this.outputText=[ff.symbol(this.done,this.aborted),Mt.bold(this.msg),ff.delimiter(!1),this.done?this.selection.title:this.selection.disabled?Mt.yellow(this.warn):Mt.gray(this.hint)].join(" "),!this.done){this.outputText+=`
`;for(let r=t;r<i;r++){let n,s,o="",a=this.choices[r];r===t&&t>0?s=Cn.arrowUp:r===i-1&&i<this.choices.length?s=Cn.arrowDown:s=" ",a.disabled?(n=this.cursor===r?Mt.gray().underline(a.title):Mt.strikethrough().gray(a.title),s=(this.cursor===r?Mt.bold().gray(Cn.pointer)+" ":"  ")+s):(n=this.cursor===r?Mt.cyan().underline(a.title):a.title,s=(this.cursor===r?Mt.cyan(Cn.pointer)+" ":"  ")+s,a.description&&this.cursor===r&&(o=` - ${a.description}`,(s.length+n.length+o.length>=this.out.columns||a.description.split(/\r?\n/).length>1)&&(o=`
`+fT(a.description,{margin:3,width:this.out.columns})))),this.outputText+=`${s} ${n}${Mt.gray(o)}
`}}this.out.write(this.outputText)}};mf.exports=ta});var bf=k((wP,yf)=>{"use strict";var On=pe(),gT=jt(),{style:xf,clear:xT}=mt(),{cursor:vf,erase:vT}=fe(),ia=class extends gT{constructor(t={}){super(t),this.msg=t.message,this.value=!!t.initial,this.active=t.active||"on",this.inactive=t.inactive||"off",this.initialValue=this.value,this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}deactivate(){if(this.value===!1)return this.bell();this.value=!1,this.render()}activate(){if(this.value===!0)return this.bell();this.value=!0,this.render()}delete(){this.deactivate()}left(){this.deactivate()}right(){this.activate()}down(){this.deactivate()}up(){this.activate()}next(){this.value=!this.value,this.fire(),this.render()}_(t,i){if(t===" ")this.value=!this.value;else if(t==="1")this.value=!0;else if(t==="0")this.value=!1;else return this.bell();this.render()}render(){this.closed||(this.firstRender?this.out.write(vf.hide):this.out.write(xT(this.outputText,this.out.columns)),super.render(),this.outputText=[xf.symbol(this.done,this.aborted),On.bold(this.msg),xf.delimiter(this.done),this.value?this.inactive:On.cyan().underline(this.inactive),On.gray("/"),this.value?On.cyan().underline(this.active):this.active].join(" "),this.out.write(vT.line+vf.to(0)+this.outputText))}};yf.exports=ia});var _t=k((EP,wf)=>{"use strict";var ra=class e{constructor({token:t,date:i,parts:r,locales:n}){this.token=t,this.date=i||new Date,this.parts=r||[this],this.locales=n||{}}up(){}down(){}next(){let t=this.parts.indexOf(this);return this.parts.find((i,r)=>r>t&&i instanceof e)}setTo(t){}prev(){let t=[].concat(this.parts).reverse(),i=t.indexOf(this);return t.find((r,n)=>n>i&&r instanceof e)}toString(){return String(this.date)}};wf.exports=ra});var _f=k((_P,Ef)=>{"use strict";var yT=_t(),na=class extends yT{constructor(t={}){super(t)}up(){this.date.setHours((this.date.getHours()+12)%24)}down(){this.up()}toString(){let t=this.date.getHours()>12?"pm":"am";return/\A/.test(this.token)?t.toUpperCase():t}};Ef.exports=na});var Sf=k((TP,Tf)=>{"use strict";var bT=_t(),wT=e=>(e=e%10,e===1?"st":e===2?"nd":e===3?"rd":"th"),sa=class extends bT{constructor(t={}){super(t)}up(){this.date.setDate(this.date.getDate()+1)}down(){this.date.setDate(this.date.getDate()-1)}setTo(t){this.date.setDate(parseInt(t.substr(-2)))}toString(){let t=this.date.getDate(),i=this.date.getDay();return this.token==="DD"?String(t).padStart(2,"0"):this.token==="Do"?t+wT(t):this.token==="d"?i+1:this.token==="ddd"?this.locales.weekdaysShort[i]:this.token==="dddd"?this.locales.weekdays[i]:t}};Tf.exports=sa});var Of=k((SP,Cf)=>{"use strict";var ET=_t(),oa=class extends ET{constructor(t={}){super(t)}up(){this.date.setHours(this.date.getHours()+1)}down(){this.date.setHours(this.date.getHours()-1)}setTo(t){this.date.setHours(parseInt(t.substr(-2)))}toString(){let t=this.date.getHours();return/h/.test(this.token)&&(t=t%12||12),this.token.length>1?String(t).padStart(2,"0"):t}};Cf.exports=oa});var Df=k((CP,Af)=>{"use strict";var _T=_t(),aa=class extends _T{constructor(t={}){super(t)}up(){this.date.setMilliseconds(this.date.getMilliseconds()+1)}down(){this.date.setMilliseconds(this.date.getMilliseconds()-1)}setTo(t){this.date.setMilliseconds(parseInt(t.substr(-this.token.length)))}toString(){return String(this.date.getMilliseconds()).padStart(4,"0").substr(0,this.token.length)}};Af.exports=aa});var Nf=k((OP,If)=>{"use strict";var TT=_t(),ca=class extends TT{constructor(t={}){super(t)}up(){this.date.setMinutes(this.date.getMinutes()+1)}down(){this.date.setMinutes(this.date.getMinutes()-1)}setTo(t){this.date.setMinutes(parseInt(t.substr(-2)))}toString(){let t=this.date.getMinutes();return this.token.length>1?String(t).padStart(2,"0"):t}};If.exports=ca});var kf=k((AP,Lf)=>{"use strict";var ST=_t(),ua=class extends ST{constructor(t={}){super(t)}up(){this.date.setMonth(this.date.getMonth()+1)}down(){this.date.setMonth(this.date.getMonth()-1)}setTo(t){t=parseInt(t.substr(-2))-1,this.date.setMonth(t<0?0:t)}toString(){let t=this.date.getMonth(),i=this.token.length;return i===2?String(t+1).padStart(2,"0"):i===3?this.locales.monthsShort[t]:i===4?this.locales.months[t]:String(t+1)}};Lf.exports=ua});var Pf=k((DP,Rf)=>{"use strict";var CT=_t(),la=class extends CT{constructor(t={}){super(t)}up(){this.date.setSeconds(this.date.getSeconds()+1)}down(){this.date.setSeconds(this.date.getSeconds()-1)}setTo(t){this.date.setSeconds(parseInt(t.substr(-2)))}toString(){let t=this.date.getSeconds();return this.token.length>1?String(t).padStart(2,"0"):t}};Rf.exports=la});var jf=k((IP,Ff)=>{"use strict";var OT=_t(),pa=class extends OT{constructor(t={}){super(t)}up(){this.date.setFullYear(this.date.getFullYear()+1)}down(){this.date.setFullYear(this.date.getFullYear()-1)}setTo(t){this.date.setFullYear(t.substr(-4))}toString(){let t=String(this.date.getFullYear()).padStart(4,"0");return this.token.length===2?t.substr(-2):t}};Ff.exports=pa});var qf=k((NP,Mf)=>{"use strict";Mf.exports={DatePart:_t(),Meridiem:_f(),Day:Sf(),Hours:Of(),Milliseconds:Df(),Minutes:Nf(),Month:kf(),Seconds:Pf(),Year:jf()}});var Vf=k((LP,Gf)=>{"use strict";var da=pe(),AT=jt(),{style:Bf,clear:Uf,figures:DT}=mt(),{erase:IT,cursor:$f}=fe(),{DatePart:zf,Meridiem:NT,Day:LT,Hours:kT,Milliseconds:RT,Minutes:PT,Month:FT,Seconds:jT,Year:MT}=qf(),qT=/\\(.)|"((?:\\["\\]|[^"])+)"|(D[Do]?|d{3,4}|d)|(M{1,4})|(YY(?:YY)?)|([aA])|([Hh]{1,2})|(m{1,2})|(s{1,2})|(S{1,4})|./g,Hf={1:({token:e})=>e.replace(/\\(.)/g,"$1"),2:e=>new LT(e),3:e=>new FT(e),4:e=>new MT(e),5:e=>new NT(e),6:e=>new kT(e),7:e=>new PT(e),8:e=>new jT(e),9:e=>new RT(e)},BT={months:"January,February,March,April,May,June,July,August,September,October,November,December".split(","),monthsShort:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),weekdays:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),weekdaysShort:"Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(",")},fa=class extends AT{constructor(t={}){super(t),this.msg=t.message,this.cursor=0,this.typed="",this.locales=Object.assign(BT,t.locales),this._date=t.initial||new Date,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.mask=t.mask||"YYYY-MM-DD HH:mm:ss",this.clear=Uf("",this.out.columns),this.render()}get value(){return this.date}get date(){return this._date}set date(t){t&&this._date.setTime(t.getTime())}set mask(t){let i;for(this.parts=[];i=qT.exec(t);){let n=i.shift(),s=i.findIndex(o=>o!=null);this.parts.push(s in Hf?Hf[s]({token:i[s]||n,date:this.date,parts:this.parts,locales:this.locales}):i[s]||n)}let r=this.parts.reduce((n,s)=>(typeof s=="string"&&typeof n[n.length-1]=="string"?n[n.length-1]+=s:n.push(s),n),[]);this.parts.splice(0),this.parts.push(...r),this.reset()}moveCursor(t){this.typed="",this.cursor=t,this.fire()}reset(){this.moveCursor(this.parts.findIndex(t=>t instanceof zf)),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}async validate(){let t=await this.validator(this.value);typeof t=="string"&&(this.errorMsg=t,t=!1),this.error=!t}async submit(){if(await this.validate(),this.error){this.color="red",this.fire(),this.render();return}this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}up(){this.typed="",this.parts[this.cursor].up(),this.render()}down(){this.typed="",this.parts[this.cursor].down(),this.render()}left(){let t=this.parts[this.cursor].prev();if(t==null)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}right(){let t=this.parts[this.cursor].next();if(t==null)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}next(){let t=this.parts[this.cursor].next();this.moveCursor(t?this.parts.indexOf(t):this.parts.findIndex(i=>i instanceof zf)),this.render()}_(t){/\d/.test(t)&&(this.typed+=t,this.parts[this.cursor].setTo(this.typed),this.render())}render(){this.closed||(this.firstRender?this.out.write($f.hide):this.out.write(Uf(this.outputText,this.out.columns)),super.render(),this.outputText=[Bf.symbol(this.done,this.aborted),da.bold(this.msg),Bf.delimiter(!1),this.parts.reduce((t,i,r)=>t.concat(r===this.cursor&&!this.done?da.cyan().underline(i.toString()):i),[]).join("")].join(" "),this.error&&(this.outputText+=this.errorMsg.split(`
`).reduce((t,i,r)=>t+`
${r?" ":DT.pointerSmall} ${da.red().italic(i)}`,"")),this.out.write(IT.line+$f.to(0)+this.outputText))}};Gf.exports=fa});var Kf=k((kP,Wf)=>{"use strict";var An=pe(),UT=jt(),{cursor:Dn,erase:$T}=fe(),{style:ha,figures:zT,clear:Xf,lines:HT}=mt(),GT=/[0-9]/,ma=e=>e!==void 0,Yf=(e,t)=>{let i=Math.pow(10,t);return Math.round(e*i)/i},ga=class extends UT{constructor(t={}){super(t),this.transform=ha.render(t.style),this.msg=t.message,this.initial=ma(t.initial)?t.initial:"",this.float=!!t.float,this.round=t.round||2,this.inc=t.increment||1,this.min=ma(t.min)?t.min:-1/0,this.max=ma(t.max)?t.max:1/0,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.color="cyan",this.value="",this.typed="",this.lastHit=0,this.render()}set value(t){!t&&t!==0?(this.placeholder=!0,this.rendered=An.gray(this.transform.render(`${this.initial}`)),this._value=""):(this.placeholder=!1,this.rendered=this.transform.render(`${Yf(t,this.round)}`),this._value=Yf(t,this.round)),this.fire()}get value(){return this._value}parse(t){return this.float?parseFloat(t):parseInt(t)}valid(t){return t==="-"||t==="."&&this.float||GT.test(t)}reset(){this.typed="",this.value="",this.fire(),this.render()}exit(){this.abort()}abort(){let t=this.value;this.value=t!==""?t:this.initial,this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}async validate(){let t=await this.validator(this.value);typeof t=="string"&&(this.errorMsg=t,t=!1),this.error=!t}async submit(){if(await this.validate(),this.error){this.color="red",this.fire(),this.render();return}let t=this.value;this.value=t!==""?t:this.initial,this.done=!0,this.aborted=!1,this.error=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}up(){if(this.typed="",this.value===""&&(this.value=this.min-this.inc),this.value>=this.max)return this.bell();this.value+=this.inc,this.color="cyan",this.fire(),this.render()}down(){if(this.typed="",this.value===""&&(this.value=this.min+this.inc),this.value<=this.min)return this.bell();this.value-=this.inc,this.color="cyan",this.fire(),this.render()}delete(){let t=this.value.toString();if(t.length===0)return this.bell();this.value=this.parse(t=t.slice(0,-1))||"",this.value!==""&&this.value<this.min&&(this.value=this.min),this.color="cyan",this.fire(),this.render()}next(){this.value=this.initial,this.fire(),this.render()}_(t,i){if(!this.valid(t))return this.bell();let r=Date.now();if(r-this.lastHit>1e3&&(this.typed=""),this.typed+=t,this.lastHit=r,this.color="cyan",t===".")return this.fire();this.value=Math.min(this.parse(this.typed),this.max),this.value>this.max&&(this.value=this.max),this.value<this.min&&(this.value=this.min),this.fire(),this.render()}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(Dn.down(HT(this.outputError,this.out.columns)-1)+Xf(this.outputError,this.out.columns)),this.out.write(Xf(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[ha.symbol(this.done,this.aborted),An.bold(this.msg),ha.delimiter(this.done),!this.done||!this.done&&!this.placeholder?An[this.color]().underline(this.rendered):this.rendered].join(" "),this.error&&(this.outputError+=this.errorMsg.split(`
`).reduce((t,i,r)=>t+`
${r?" ":zT.pointerSmall} ${An.red().italic(i)}`,"")),this.out.write($T.line+Dn.to(0)+this.outputText+Dn.save+this.outputError+Dn.restore))}};Wf.exports=ga});var va=k((RP,Qf)=>{"use strict";var Tt=pe(),{cursor:VT}=fe(),XT=jt(),{clear:Jf,figures:Zt,style:Zf,wrap:YT,entriesToDisplay:WT}=mt(),xa=class extends XT{constructor(t={}){super(t),this.msg=t.message,this.cursor=t.cursor||0,this.scrollIndex=t.cursor||0,this.hint=t.hint||"",this.warn=t.warn||"- This option is disabled -",this.minSelected=t.min,this.showMinError=!1,this.maxChoices=t.max,this.instructions=t.instructions,this.optionsPerPage=t.optionsPerPage||10,this.value=t.choices.map((i,r)=>(typeof i=="string"&&(i={title:i,value:r}),{title:i&&(i.title||i.value||i),description:i&&i.description,value:i&&(i.value===void 0?r:i.value),selected:i&&i.selected,disabled:i&&i.disabled})),this.clear=Jf("",this.out.columns),t.overrideRender||this.render()}reset(){this.value.map(t=>!t.selected),this.cursor=0,this.fire(),this.render()}selected(){return this.value.filter(t=>t.selected)}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){let t=this.value.filter(i=>i.selected);this.minSelected&&t.length<this.minSelected?(this.showMinError=!0,this.render()):(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close())}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.value.length,this.render()}up(){this.cursor===0?this.cursor=this.value.length-1:this.cursor--,this.render()}down(){this.cursor===this.value.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.value[this.cursor].selected=!1,this.render()}right(){if(this.value.filter(t=>t.selected).length>=this.maxChoices)return this.bell();this.value[this.cursor].selected=!0,this.render()}handleSpaceToggle(){let t=this.value[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter(i=>i.selected).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}toggleAll(){if(this.maxChoices!==void 0||this.value[this.cursor].disabled)return this.bell();let t=!this.value[this.cursor].selected;this.value.filter(i=>!i.disabled).forEach(i=>i.selected=t),this.render()}_(t,i){if(t===" ")this.handleSpaceToggle();else if(t==="a")this.toggleAll();else return this.bell()}renderInstructions(){return this.instructions===void 0||this.instructions?typeof this.instructions=="string"?this.instructions:`
Instructions:
    ${Zt.arrowUp}/${Zt.arrowDown}: Highlight option
    ${Zt.arrowLeft}/${Zt.arrowRight}/[space]: Toggle selection
`+(this.maxChoices===void 0?`    a: Toggle all
`:"")+"    enter/return: Complete answer":""}renderOption(t,i,r,n){let s=(i.selected?Tt.green(Zt.radioOn):Zt.radioOff)+" "+n+" ",o,a;return i.disabled?o=t===r?Tt.gray().underline(i.title):Tt.strikethrough().gray(i.title):(o=t===r?Tt.cyan().underline(i.title):i.title,t===r&&i.description&&(a=` - ${i.description}`,(s.length+o.length+a.length>=this.out.columns||i.description.split(/\r?\n/).length>1)&&(a=`
`+YT(i.description,{margin:s.length,width:this.out.columns})))),s+o+Tt.gray(a||"")}paginateOptions(t){if(t.length===0)return Tt.red("No matches for this query.");let{startIndex:i,endIndex:r}=WT(this.cursor,t.length,this.optionsPerPage),n,s=[];for(let o=i;o<r;o++)o===i&&i>0?n=Zt.arrowUp:o===r-1&&r<t.length?n=Zt.arrowDown:n=" ",s.push(this.renderOption(this.cursor,t[o],o,n));return`
`+s.join(`
`)}renderOptions(t){return this.done?"":this.paginateOptions(t)}renderDoneOrInstructions(){if(this.done)return this.value.filter(i=>i.selected).map(i=>i.title).join(", ");let t=[Tt.gray(this.hint),this.renderInstructions()];return this.value[this.cursor].disabled&&t.push(Tt.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(VT.hide),super.render();let t=[Zf.symbol(this.done,this.aborted),Tt.bold(this.msg),Zf.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=Tt.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.value),this.out.write(this.clear+t),this.clear=Jf(t,this.out.columns)}};Qf.exports=xa});var nh=k((PP,rh)=>{"use strict";var wr=pe(),KT=jt(),{erase:JT,cursor:eh}=fe(),{style:ya,clear:th,figures:ba,wrap:ZT,entriesToDisplay:QT}=mt(),ih=(e,t)=>e[t]&&(e[t].value||e[t].title||e[t]),eS=(e,t)=>e[t]&&(e[t].title||e[t].value||e[t]),tS=(e,t)=>{let i=e.findIndex(r=>r.value===t||r.title===t);return i>-1?i:void 0},wa=class extends KT{constructor(t={}){super(t),this.msg=t.message,this.suggest=t.suggest,this.choices=t.choices,this.initial=typeof t.initial=="number"?t.initial:tS(t.choices,t.initial),this.select=this.initial||t.cursor||0,this.i18n={noMatches:t.noMatches||"no matches found"},this.fallback=t.fallback||this.initial,this.clearFirst=t.clearFirst||!1,this.suggestions=[],this.input="",this.limit=t.limit||10,this.cursor=0,this.transform=ya.render(t.style),this.scale=this.transform.scale,this.render=this.render.bind(this),this.complete=this.complete.bind(this),this.clear=th("",this.out.columns),this.complete(this.render),this.render()}set fallback(t){this._fb=Number.isSafeInteger(parseInt(t))?parseInt(t):t}get fallback(){let t;return typeof this._fb=="number"?t=this.choices[this._fb]:typeof this._fb=="string"&&(t={title:this._fb}),t||this._fb||{title:this.i18n.noMatches}}moveSelect(t){this.select=t,this.suggestions.length>0?this.value=ih(this.suggestions,t):this.value=this.fallback.value,this.fire()}async complete(t){let i=this.completing=this.suggest(this.input,this.choices),r=await i;if(this.completing!==i)return;this.suggestions=r.map((s,o,a)=>({title:eS(a,o),value:ih(a,o),description:s.description})),this.completing=!1;let n=Math.max(r.length-1,0);this.moveSelect(Math.min(n,this.select)),t&&t()}reset(){this.input="",this.complete(()=>{this.moveSelect(this.initial!==void 0?this.initial:0),this.render()}),this.render()}exit(){this.clearFirst&&this.input.length>0?this.reset():(this.done=this.exited=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close())}abort(){this.done=this.aborted=!0,this.exited=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.done=!0,this.aborted=this.exited=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}_(t,i){let r=this.input.slice(0,this.cursor),n=this.input.slice(this.cursor);this.input=`${r}${t}${n}`,this.cursor=r.length+1,this.complete(this.render),this.render()}delete(){if(this.cursor===0)return this.bell();let t=this.input.slice(0,this.cursor-1),i=this.input.slice(this.cursor);this.input=`${t}${i}`,this.complete(this.render),this.cursor=this.cursor-1,this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();let t=this.input.slice(0,this.cursor),i=this.input.slice(this.cursor+1);this.input=`${t}${i}`,this.complete(this.render),this.render()}first(){this.moveSelect(0),this.render()}last(){this.moveSelect(this.suggestions.length-1),this.render()}up(){this.select===0?this.moveSelect(this.suggestions.length-1):this.moveSelect(this.select-1),this.render()}down(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}next(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}nextPage(){this.moveSelect(Math.min(this.select+this.limit,this.suggestions.length-1)),this.render()}prevPage(){this.moveSelect(Math.max(this.select-this.limit,0)),this.render()}left(){if(this.cursor<=0)return this.bell();this.cursor=this.cursor-1,this.render()}right(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();this.cursor=this.cursor+1,this.render()}renderOption(t,i,r,n){let s,o=r?ba.arrowUp:n?ba.arrowDown:" ",a=i?wr.cyan().underline(t.title):t.title;return o=(i?wr.cyan(ba.pointer)+" ":"  ")+o,t.description&&(s=` - ${t.description}`,(o.length+a.length+s.length>=this.out.columns||t.description.split(/\r?\n/).length>1)&&(s=`
`+ZT(t.description,{margin:3,width:this.out.columns}))),o+" "+a+wr.gray(s||"")}render(){if(this.closed)return;this.firstRender?this.out.write(eh.hide):this.out.write(th(this.outputText,this.out.columns)),super.render();let{startIndex:t,endIndex:i}=QT(this.select,this.choices.length,this.limit);if(this.outputText=[ya.symbol(this.done,this.aborted,this.exited),wr.bold(this.msg),ya.delimiter(this.completing),this.done&&this.suggestions[this.select]?this.suggestions[this.select].title:this.rendered=this.transform.render(this.input)].join(" "),!this.done){let r=this.suggestions.slice(t,i).map((n,s)=>this.renderOption(n,this.select===s+t,s===0&&t>0,s+t===i-1&&i<this.choices.length)).join(`
`);this.outputText+=`
`+(r||wr.gray(this.fallback.title))}this.out.write(JT.line+eh.to(0)+this.outputText)}};rh.exports=wa});var ch=k((FP,ah)=>{"use strict";var qt=pe(),{cursor:iS}=fe(),rS=va(),{clear:sh,style:oh,figures:Mi}=mt(),Ea=class extends rS{constructor(t={}){t.overrideRender=!0,super(t),this.inputValue="",this.clear=sh("",this.out.columns),this.filteredOptions=this.value,this.render()}last(){this.cursor=this.filteredOptions.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.filteredOptions.length,this.render()}up(){this.cursor===0?this.cursor=this.filteredOptions.length-1:this.cursor--,this.render()}down(){this.cursor===this.filteredOptions.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.filteredOptions[this.cursor].selected=!1,this.render()}right(){if(this.value.filter(t=>t.selected).length>=this.maxChoices)return this.bell();this.filteredOptions[this.cursor].selected=!0,this.render()}delete(){this.inputValue.length&&(this.inputValue=this.inputValue.substr(0,this.inputValue.length-1),this.updateFilteredOptions())}updateFilteredOptions(){let t=this.filteredOptions[this.cursor];this.filteredOptions=this.value.filter(r=>this.inputValue?!!(typeof r.title=="string"&&r.title.toLowerCase().includes(this.inputValue.toLowerCase())||typeof r.value=="string"&&r.value.toLowerCase().includes(this.inputValue.toLowerCase())):!0);let i=this.filteredOptions.findIndex(r=>r===t);this.cursor=i<0?0:i,this.render()}handleSpaceToggle(){let t=this.filteredOptions[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter(i=>i.selected).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}handleInputChange(t){this.inputValue=this.inputValue+t,this.updateFilteredOptions()}_(t,i){t===" "?this.handleSpaceToggle():this.handleInputChange(t)}renderInstructions(){return this.instructions===void 0||this.instructions?typeof this.instructions=="string"?this.instructions:`
Instructions:
    ${Mi.arrowUp}/${Mi.arrowDown}: Highlight option
    ${Mi.arrowLeft}/${Mi.arrowRight}/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer
`:""}renderCurrentInput(){return`
Filtered results for: ${this.inputValue?this.inputValue:qt.gray("Enter something to filter")}
`}renderOption(t,i,r){let n;return i.disabled?n=t===r?qt.gray().underline(i.title):qt.strikethrough().gray(i.title):n=t===r?qt.cyan().underline(i.title):i.title,(i.selected?qt.green(Mi.radioOn):Mi.radioOff)+"  "+n}renderDoneOrInstructions(){if(this.done)return this.value.filter(i=>i.selected).map(i=>i.title).join(", ");let t=[qt.gray(this.hint),this.renderInstructions(),this.renderCurrentInput()];return this.filteredOptions.length&&this.filteredOptions[this.cursor].disabled&&t.push(qt.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(iS.hide),super.render();let t=[oh.symbol(this.done,this.aborted),qt.bold(this.msg),oh.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=qt.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.filteredOptions),this.out.write(this.clear+t),this.clear=sh(t,this.out.columns)}};ah.exports=Ea});var fh=k((jP,dh)=>{"use strict";var uh=pe(),nS=jt(),{style:lh,clear:sS}=mt(),{erase:oS,cursor:ph}=fe(),_a=class extends nS{constructor(t={}){super(t),this.msg=t.message,this.value=t.initial,this.initialValue=!!t.initial,this.yesMsg=t.yes||"yes",this.yesOption=t.yesOption||"(Y/n)",this.noMsg=t.no||"no",this.noOption=t.noOption||"(y/N)",this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write(`
`),this.close()}submit(){this.value=this.value||!1,this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write(`
`),this.close()}_(t,i){return t.toLowerCase()==="y"?(this.value=!0,this.submit()):t.toLowerCase()==="n"?(this.value=!1,this.submit()):this.bell()}render(){this.closed||(this.firstRender?this.out.write(ph.hide):this.out.write(sS(this.outputText,this.out.columns)),super.render(),this.outputText=[lh.symbol(this.done,this.aborted),uh.bold(this.msg),lh.delimiter(this.done),this.done?this.value?this.yesMsg:this.noMsg:uh.gray(this.initialValue?this.yesOption:this.noOption)].join(" "),this.out.write(oS.line+ph.to(0)+this.outputText))}};dh.exports=_a});var mh=k((MP,hh)=>{"use strict";hh.exports={TextPrompt:df(),SelectPrompt:gf(),TogglePrompt:bf(),DatePrompt:Vf(),NumberPrompt:Kf(),MultiselectPrompt:va(),AutocompletePrompt:nh(),AutocompleteMultiselectPrompt:ch(),ConfirmPrompt:fh()}});var xh=k(gh=>{"use strict";var Ye=gh,aS=mh(),In=e=>e;function St(e,t,i={}){return new Promise((r,n)=>{let s=new aS[e](t),o=i.onAbort||In,a=i.onSubmit||In,c=i.onExit||In;s.on("state",t.onState||In),s.on("submit",u=>r(a(u))),s.on("exit",u=>r(c(u))),s.on("abort",u=>n(o(u)))})}Ye.text=e=>St("TextPrompt",e);Ye.password=e=>(e.style="password",Ye.text(e));Ye.invisible=e=>(e.style="invisible",Ye.text(e));Ye.number=e=>St("NumberPrompt",e);Ye.date=e=>St("DatePrompt",e);Ye.confirm=e=>St("ConfirmPrompt",e);Ye.list=e=>{let t=e.separator||",";return St("TextPrompt",e,{onSubmit:i=>i.split(t).map(r=>r.trim())})};Ye.toggle=e=>St("TogglePrompt",e);Ye.select=e=>St("SelectPrompt",e);Ye.multiselect=e=>{e.choices=[].concat(e.choices||[]);let t=i=>i.filter(r=>r.selected).map(r=>r.value);return St("MultiselectPrompt",e,{onAbort:t,onSubmit:t})};Ye.autocompleteMultiselect=e=>{e.choices=[].concat(e.choices||[]);let t=i=>i.filter(r=>r.selected).map(r=>r.value);return St("AutocompleteMultiselectPrompt",e,{onAbort:t,onSubmit:t})};var cS=(e,t)=>Promise.resolve(t.filter(i=>i.title.slice(0,e.length).toLowerCase()===e.toLowerCase()));Ye.autocomplete=e=>(e.suggest=e.suggest||cS,e.choices=[].concat(e.choices||[]),St("AutocompletePrompt",e))});var bh=k((BP,yh)=>{"use strict";var Ta=xh(),uS=["suggest","format","onState","validate","onRender","type"],vh=()=>{};async function Qt(e=[],{onSubmit:t=vh,onCancel:i=vh}={}){let r={},n=Qt._override||{};e=[].concat(e);let s,o,a,c,u,f,g=async(x,l,m=!1)=>{if(!(!m&&x.validate&&x.validate(l)!==!0))return x.format?await x.format(l,r):l};for(o of e)if({name:c,type:u}=o,typeof u=="function"&&(u=await u(s,{...r},o),o.type=u),!!u){for(let x in o){if(uS.includes(x))continue;let l=o[x];o[x]=typeof l=="function"?await l(s,{...r},f):l}if(f=o,typeof o.message!="string")throw new Error("prompt message is required");if({name:c,type:u}=o,Ta[u]===void 0)throw new Error(`prompt type (${u}) is not defined`);if(n[o.name]!==void 0&&(s=await g(o,n[o.name]),s!==void 0)){r[c]=s;continue}try{s=Qt._injected?lS(Qt._injected,o.initial):await Ta[u](o),r[c]=s=await g(o,s,!0),a=await t(o,s,r)}catch{a=!await i(o,r)}if(a)return r}return r}function lS(e,t){let i=e.shift();if(i instanceof Error)throw i;return i===void 0?t:i}function pS(e){Qt._injected=(Qt._injected||[]).concat(e)}function dS(e){Qt._override=Object.assign({},e)}yh.exports=Object.assign(Qt,{prompt:Qt,prompts:Ta,inject:pS,override:dS})});var Eh=k((UP,wh)=>{"use strict";function fS(e){e=(Array.isArray(e)?e:e.split(".")).map(Number);let t=0,i=process.versions.node.split(".").map(Number);for(;t<e.length;t++){if(i[t]>e[t])return!1;if(e[t]>i[t])return!0}return!1}wh.exports=fS("8.6.0")?Gd():bh()});var jh=k((N2,Fh)=>{"use strict";var Ph=require("stream").Stream,ZS=require("util");Fh.exports=xt;function xt(){this.source=null,this.dataSize=0,this.maxDataSize=1024*1024,this.pauseStream=!0,this._maxDataSizeExceeded=!1,this._released=!1,this._bufferedEvents=[]}ZS.inherits(xt,Ph);xt.create=function(e,t){var i=new this;t=t||{};for(var r in t)i[r]=t[r];i.source=e;var n=e.emit;return e.emit=function(){return i._handleEmit(arguments),n.apply(e,arguments)},e.on("error",function(){}),i.pauseStream&&e.pause(),i};Object.defineProperty(xt.prototype,"readable",{configurable:!0,enumerable:!0,get:function(){return this.source.readable}});xt.prototype.setEncoding=function(){return this.source.setEncoding.apply(this.source,arguments)};xt.prototype.resume=function(){this._released||this.release(),this.source.resume()};xt.prototype.pause=function(){this.source.pause()};xt.prototype.release=function(){this._released=!0,this._bufferedEvents.forEach(function(e){this.emit.apply(this,e)}.bind(this)),this._bufferedEvents=[]};xt.prototype.pipe=function(){var e=Ph.prototype.pipe.apply(this,arguments);return this.resume(),e};xt.prototype._handleEmit=function(e){if(this._released){this.emit.apply(this,e);return}e[0]==="data"&&(this.dataSize+=e[1].length,this._checkIfMaxDataSizeExceeded()),this._bufferedEvents.push(e)};xt.prototype._checkIfMaxDataSizeExceeded=function(){if(!this._maxDataSizeExceeded&&!(this.dataSize<=this.maxDataSize)){this._maxDataSizeExceeded=!0;var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this.emit("error",new Error(e))}}});var Uh=k((L2,Bh)=>{"use strict";var QS=require("util"),qh=require("stream").Stream,Mh=jh();Bh.exports=ye;function ye(){this.writable=!1,this.readable=!0,this.dataSize=0,this.maxDataSize=2*1024*1024,this.pauseStreams=!0,this._released=!1,this._streams=[],this._currentStream=null,this._insideLoop=!1,this._pendingNext=!1}QS.inherits(ye,qh);ye.create=function(e){var t=new this;e=e||{};for(var i in e)t[i]=e[i];return t};ye.isStreamLike=function(e){return typeof e!="function"&&typeof e!="string"&&typeof e!="boolean"&&typeof e!="number"&&!Buffer.isBuffer(e)};ye.prototype.append=function(e){var t=ye.isStreamLike(e);if(t){if(!(e instanceof Mh)){var i=Mh.create(e,{maxDataSize:1/0,pauseStream:this.pauseStreams});e.on("data",this._checkDataSize.bind(this)),e=i}this._handleErrors(e),this.pauseStreams&&e.pause()}return this._streams.push(e),this};ye.prototype.pipe=function(e,t){return qh.prototype.pipe.call(this,e,t),this.resume(),e};ye.prototype._getNext=function(){if(this._currentStream=null,this._insideLoop){this._pendingNext=!0;return}this._insideLoop=!0;try{do this._pendingNext=!1,this._realGetNext();while(this._pendingNext)}finally{this._insideLoop=!1}};ye.prototype._realGetNext=function(){var e=this._streams.shift();if(typeof e>"u"){this.end();return}if(typeof e!="function"){this._pipeNext(e);return}var t=e;t(function(i){var r=ye.isStreamLike(i);r&&(i.on("data",this._checkDataSize.bind(this)),this._handleErrors(i)),this._pipeNext(i)}.bind(this))};ye.prototype._pipeNext=function(e){this._currentStream=e;var t=ye.isStreamLike(e);if(t){e.on("end",this._getNext.bind(this)),e.pipe(this,{end:!1});return}var i=e;this.write(i),this._getNext()};ye.prototype._handleErrors=function(e){var t=this;e.on("error",function(i){t._emitError(i)})};ye.prototype.write=function(e){this.emit("data",e)};ye.prototype.pause=function(){this.pauseStreams&&(this.pauseStreams&&this._currentStream&&typeof this._currentStream.pause=="function"&&this._currentStream.pause(),this.emit("pause"))};ye.prototype.resume=function(){this._released||(this._released=!0,this.writable=!0,this._getNext()),this.pauseStreams&&this._currentStream&&typeof this._currentStream.resume=="function"&&this._currentStream.resume(),this.emit("resume")};ye.prototype.end=function(){this._reset(),this.emit("end")};ye.prototype.destroy=function(){this._reset(),this.emit("close")};ye.prototype._reset=function(){this.writable=!1,this._streams=[],this._currentStream=null};ye.prototype._checkDataSize=function(){if(this._updateDataSize(),!(this.dataSize<=this.maxDataSize)){var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this._emitError(new Error(e))}};ye.prototype._updateDataSize=function(){this.dataSize=0;var e=this;this._streams.forEach(function(t){t.dataSize&&(e.dataSize+=t.dataSize)}),this._currentStream&&this._currentStream.dataSize&&(this.dataSize+=this._currentStream.dataSize)};ye.prototype._emitError=function(e){this._reset(),this.emit("error",e)}});var $h=k((k2,eC)=>{eC.exports={"application/1d-interleaved-parityfec":{source:"iana"},"application/3gpdash-qoe-report+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/3gpp-ims+xml":{source:"iana",compressible:!0},"application/3gpphal+json":{source:"iana",compressible:!0},"application/3gpphalforms+json":{source:"iana",compressible:!0},"application/a2l":{source:"iana"},"application/ace+cbor":{source:"iana"},"application/activemessage":{source:"iana"},"application/activity+json":{source:"iana",compressible:!0},"application/alto-costmap+json":{source:"iana",compressible:!0},"application/alto-costmapfilter+json":{source:"iana",compressible:!0},"application/alto-directory+json":{source:"iana",compressible:!0},"application/alto-endpointcost+json":{source:"iana",compressible:!0},"application/alto-endpointcostparams+json":{source:"iana",compressible:!0},"application/alto-endpointprop+json":{source:"iana",compressible:!0},"application/alto-endpointpropparams+json":{source:"iana",compressible:!0},"application/alto-error+json":{source:"iana",compressible:!0},"application/alto-networkmap+json":{source:"iana",compressible:!0},"application/alto-networkmapfilter+json":{source:"iana",compressible:!0},"application/alto-updatestreamcontrol+json":{source:"iana",compressible:!0},"application/alto-updatestreamparams+json":{source:"iana",compressible:!0},"application/aml":{source:"iana"},"application/andrew-inset":{source:"iana",extensions:["ez"]},"application/applefile":{source:"iana"},"application/applixware":{source:"apache",extensions:["aw"]},"application/at+jwt":{source:"iana"},"application/atf":{source:"iana"},"application/atfx":{source:"iana"},"application/atom+xml":{source:"iana",compressible:!0,extensions:["atom"]},"application/atomcat+xml":{source:"iana",compressible:!0,extensions:["atomcat"]},"application/atomdeleted+xml":{source:"iana",compressible:!0,extensions:["atomdeleted"]},"application/atomicmail":{source:"iana"},"application/atomsvc+xml":{source:"iana",compressible:!0,extensions:["atomsvc"]},"application/atsc-dwd+xml":{source:"iana",compressible:!0,extensions:["dwd"]},"application/atsc-dynamic-event-message":{source:"iana"},"application/atsc-held+xml":{source:"iana",compressible:!0,extensions:["held"]},"application/atsc-rdt+json":{source:"iana",compressible:!0},"application/atsc-rsat+xml":{source:"iana",compressible:!0,extensions:["rsat"]},"application/atxml":{source:"iana"},"application/auth-policy+xml":{source:"iana",compressible:!0},"application/bacnet-xdd+zip":{source:"iana",compressible:!1},"application/batch-smtp":{source:"iana"},"application/bdoc":{compressible:!1,extensions:["bdoc"]},"application/beep+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/calendar+json":{source:"iana",compressible:!0},"application/calendar+xml":{source:"iana",compressible:!0,extensions:["xcs"]},"application/call-completion":{source:"iana"},"application/cals-1840":{source:"iana"},"application/captive+json":{source:"iana",compressible:!0},"application/cbor":{source:"iana"},"application/cbor-seq":{source:"iana"},"application/cccex":{source:"iana"},"application/ccmp+xml":{source:"iana",compressible:!0},"application/ccxml+xml":{source:"iana",compressible:!0,extensions:["ccxml"]},"application/cdfx+xml":{source:"iana",compressible:!0,extensions:["cdfx"]},"application/cdmi-capability":{source:"iana",extensions:["cdmia"]},"application/cdmi-container":{source:"iana",extensions:["cdmic"]},"application/cdmi-domain":{source:"iana",extensions:["cdmid"]},"application/cdmi-object":{source:"iana",extensions:["cdmio"]},"application/cdmi-queue":{source:"iana",extensions:["cdmiq"]},"application/cdni":{source:"iana"},"application/cea":{source:"iana"},"application/cea-2018+xml":{source:"iana",compressible:!0},"application/cellml+xml":{source:"iana",compressible:!0},"application/cfw":{source:"iana"},"application/city+json":{source:"iana",compressible:!0},"application/clr":{source:"iana"},"application/clue+xml":{source:"iana",compressible:!0},"application/clue_info+xml":{source:"iana",compressible:!0},"application/cms":{source:"iana"},"application/cnrp+xml":{source:"iana",compressible:!0},"application/coap-group+json":{source:"iana",compressible:!0},"application/coap-payload":{source:"iana"},"application/commonground":{source:"iana"},"application/conference-info+xml":{source:"iana",compressible:!0},"application/cose":{source:"iana"},"application/cose-key":{source:"iana"},"application/cose-key-set":{source:"iana"},"application/cpl+xml":{source:"iana",compressible:!0,extensions:["cpl"]},"application/csrattrs":{source:"iana"},"application/csta+xml":{source:"iana",compressible:!0},"application/cstadata+xml":{source:"iana",compressible:!0},"application/csvm+json":{source:"iana",compressible:!0},"application/cu-seeme":{source:"apache",extensions:["cu"]},"application/cwt":{source:"iana"},"application/cybercash":{source:"iana"},"application/dart":{compressible:!0},"application/dash+xml":{source:"iana",compressible:!0,extensions:["mpd"]},"application/dash-patch+xml":{source:"iana",compressible:!0,extensions:["mpp"]},"application/dashdelta":{source:"iana"},"application/davmount+xml":{source:"iana",compressible:!0,extensions:["davmount"]},"application/dca-rft":{source:"iana"},"application/dcd":{source:"iana"},"application/dec-dx":{source:"iana"},"application/dialog-info+xml":{source:"iana",compressible:!0},"application/dicom":{source:"iana"},"application/dicom+json":{source:"iana",compressible:!0},"application/dicom+xml":{source:"iana",compressible:!0},"application/dii":{source:"iana"},"application/dit":{source:"iana"},"application/dns":{source:"iana"},"application/dns+json":{source:"iana",compressible:!0},"application/dns-message":{source:"iana"},"application/docbook+xml":{source:"apache",compressible:!0,extensions:["dbk"]},"application/dots+cbor":{source:"iana"},"application/dskpp+xml":{source:"iana",compressible:!0},"application/dssc+der":{source:"iana",extensions:["dssc"]},"application/dssc+xml":{source:"iana",compressible:!0,extensions:["xdssc"]},"application/dvcs":{source:"iana"},"application/ecmascript":{source:"iana",compressible:!0,extensions:["es","ecma"]},"application/edi-consent":{source:"iana"},"application/edi-x12":{source:"iana",compressible:!1},"application/edifact":{source:"iana",compressible:!1},"application/efi":{source:"iana"},"application/elm+json":{source:"iana",charset:"UTF-8",compressible:!0},"application/elm+xml":{source:"iana",compressible:!0},"application/emergencycalldata.cap+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/emergencycalldata.comment+xml":{source:"iana",compressible:!0},"application/emergencycalldata.control+xml":{source:"iana",compressible:!0},"application/emergencycalldata.deviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.ecall.msd":{source:"iana"},"application/emergencycalldata.providerinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.serviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.subscriberinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.veds+xml":{source:"iana",compressible:!0},"application/emma+xml":{source:"iana",compressible:!0,extensions:["emma"]},"application/emotionml+xml":{source:"iana",compressible:!0,extensions:["emotionml"]},"application/encaprtp":{source:"iana"},"application/epp+xml":{source:"iana",compressible:!0},"application/epub+zip":{source:"iana",compressible:!1,extensions:["epub"]},"application/eshop":{source:"iana"},"application/exi":{source:"iana",extensions:["exi"]},"application/expect-ct-report+json":{source:"iana",compressible:!0},"application/express":{source:"iana",extensions:["exp"]},"application/fastinfoset":{source:"iana"},"application/fastsoap":{source:"iana"},"application/fdt+xml":{source:"iana",compressible:!0,extensions:["fdt"]},"application/fhir+json":{source:"iana",charset:"UTF-8",compressible:!0},"application/fhir+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/fido.trusted-apps+json":{compressible:!0},"application/fits":{source:"iana"},"application/flexfec":{source:"iana"},"application/font-sfnt":{source:"iana"},"application/font-tdpfr":{source:"iana",extensions:["pfr"]},"application/font-woff":{source:"iana",compressible:!1},"application/framework-attributes+xml":{source:"iana",compressible:!0},"application/geo+json":{source:"iana",compressible:!0,extensions:["geojson"]},"application/geo+json-seq":{source:"iana"},"application/geopackage+sqlite3":{source:"iana"},"application/geoxacml+xml":{source:"iana",compressible:!0},"application/gltf-buffer":{source:"iana"},"application/gml+xml":{source:"iana",compressible:!0,extensions:["gml"]},"application/gpx+xml":{source:"apache",compressible:!0,extensions:["gpx"]},"application/gxf":{source:"apache",extensions:["gxf"]},"application/gzip":{source:"iana",compressible:!1,extensions:["gz"]},"application/h224":{source:"iana"},"application/held+xml":{source:"iana",compressible:!0},"application/hjson":{extensions:["hjson"]},"application/http":{source:"iana"},"application/hyperstudio":{source:"iana",extensions:["stk"]},"application/ibe-key-request+xml":{source:"iana",compressible:!0},"application/ibe-pkg-reply+xml":{source:"iana",compressible:!0},"application/ibe-pp-data":{source:"iana"},"application/iges":{source:"iana"},"application/im-iscomposing+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/index":{source:"iana"},"application/index.cmd":{source:"iana"},"application/index.obj":{source:"iana"},"application/index.response":{source:"iana"},"application/index.vnd":{source:"iana"},"application/inkml+xml":{source:"iana",compressible:!0,extensions:["ink","inkml"]},"application/iotp":{source:"iana"},"application/ipfix":{source:"iana",extensions:["ipfix"]},"application/ipp":{source:"iana"},"application/isup":{source:"iana"},"application/its+xml":{source:"iana",compressible:!0,extensions:["its"]},"application/java-archive":{source:"apache",compressible:!1,extensions:["jar","war","ear"]},"application/java-serialized-object":{source:"apache",compressible:!1,extensions:["ser"]},"application/java-vm":{source:"apache",compressible:!1,extensions:["class"]},"application/javascript":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["js","mjs"]},"application/jf2feed+json":{source:"iana",compressible:!0},"application/jose":{source:"iana"},"application/jose+json":{source:"iana",compressible:!0},"application/jrd+json":{source:"iana",compressible:!0},"application/jscalendar+json":{source:"iana",compressible:!0},"application/json":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["json","map"]},"application/json-patch+json":{source:"iana",compressible:!0},"application/json-seq":{source:"iana"},"application/json5":{extensions:["json5"]},"application/jsonml+json":{source:"apache",compressible:!0,extensions:["jsonml"]},"application/jwk+json":{source:"iana",compressible:!0},"application/jwk-set+json":{source:"iana",compressible:!0},"application/jwt":{source:"iana"},"application/kpml-request+xml":{source:"iana",compressible:!0},"application/kpml-response+xml":{source:"iana",compressible:!0},"application/ld+json":{source:"iana",compressible:!0,extensions:["jsonld"]},"application/lgr+xml":{source:"iana",compressible:!0,extensions:["lgr"]},"application/link-format":{source:"iana"},"application/load-control+xml":{source:"iana",compressible:!0},"application/lost+xml":{source:"iana",compressible:!0,extensions:["lostxml"]},"application/lostsync+xml":{source:"iana",compressible:!0},"application/lpf+zip":{source:"iana",compressible:!1},"application/lxf":{source:"iana"},"application/mac-binhex40":{source:"iana",extensions:["hqx"]},"application/mac-compactpro":{source:"apache",extensions:["cpt"]},"application/macwriteii":{source:"iana"},"application/mads+xml":{source:"iana",compressible:!0,extensions:["mads"]},"application/manifest+json":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["webmanifest"]},"application/marc":{source:"iana",extensions:["mrc"]},"application/marcxml+xml":{source:"iana",compressible:!0,extensions:["mrcx"]},"application/mathematica":{source:"iana",extensions:["ma","nb","mb"]},"application/mathml+xml":{source:"iana",compressible:!0,extensions:["mathml"]},"application/mathml-content+xml":{source:"iana",compressible:!0},"application/mathml-presentation+xml":{source:"iana",compressible:!0},"application/mbms-associated-procedure-description+xml":{source:"iana",compressible:!0},"application/mbms-deregister+xml":{source:"iana",compressible:!0},"application/mbms-envelope+xml":{source:"iana",compressible:!0},"application/mbms-msk+xml":{source:"iana",compressible:!0},"application/mbms-msk-response+xml":{source:"iana",compressible:!0},"application/mbms-protection-description+xml":{source:"iana",compressible:!0},"application/mbms-reception-report+xml":{source:"iana",compressible:!0},"application/mbms-register+xml":{source:"iana",compressible:!0},"application/mbms-register-response+xml":{source:"iana",compressible:!0},"application/mbms-schedule+xml":{source:"iana",compressible:!0},"application/mbms-user-service-description+xml":{source:"iana",compressible:!0},"application/mbox":{source:"iana",extensions:["mbox"]},"application/media-policy-dataset+xml":{source:"iana",compressible:!0,extensions:["mpf"]},"application/media_control+xml":{source:"iana",compressible:!0},"application/mediaservercontrol+xml":{source:"iana",compressible:!0,extensions:["mscml"]},"application/merge-patch+json":{source:"iana",compressible:!0},"application/metalink+xml":{source:"apache",compressible:!0,extensions:["metalink"]},"application/metalink4+xml":{source:"iana",compressible:!0,extensions:["meta4"]},"application/mets+xml":{source:"iana",compressible:!0,extensions:["mets"]},"application/mf4":{source:"iana"},"application/mikey":{source:"iana"},"application/mipc":{source:"iana"},"application/missing-blocks+cbor-seq":{source:"iana"},"application/mmt-aei+xml":{source:"iana",compressible:!0,extensions:["maei"]},"application/mmt-usd+xml":{source:"iana",compressible:!0,extensions:["musd"]},"application/mods+xml":{source:"iana",compressible:!0,extensions:["mods"]},"application/moss-keys":{source:"iana"},"application/moss-signature":{source:"iana"},"application/mosskey-data":{source:"iana"},"application/mosskey-request":{source:"iana"},"application/mp21":{source:"iana",extensions:["m21","mp21"]},"application/mp4":{source:"iana",extensions:["mp4s","m4p"]},"application/mpeg4-generic":{source:"iana"},"application/mpeg4-iod":{source:"iana"},"application/mpeg4-iod-xmt":{source:"iana"},"application/mrb-consumer+xml":{source:"iana",compressible:!0},"application/mrb-publish+xml":{source:"iana",compressible:!0},"application/msc-ivr+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/msc-mixer+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/msword":{source:"iana",compressible:!1,extensions:["doc","dot"]},"application/mud+json":{source:"iana",compressible:!0},"application/multipart-core":{source:"iana"},"application/mxf":{source:"iana",extensions:["mxf"]},"application/n-quads":{source:"iana",extensions:["nq"]},"application/n-triples":{source:"iana",extensions:["nt"]},"application/nasdata":{source:"iana"},"application/news-checkgroups":{source:"iana",charset:"US-ASCII"},"application/news-groupinfo":{source:"iana",charset:"US-ASCII"},"application/news-transmission":{source:"iana"},"application/nlsml+xml":{source:"iana",compressible:!0},"application/node":{source:"iana",extensions:["cjs"]},"application/nss":{source:"iana"},"application/oauth-authz-req+jwt":{source:"iana"},"application/oblivious-dns-message":{source:"iana"},"application/ocsp-request":{source:"iana"},"application/ocsp-response":{source:"iana"},"application/octet-stream":{source:"iana",compressible:!1,extensions:["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{source:"iana",extensions:["oda"]},"application/odm+xml":{source:"iana",compressible:!0},"application/odx":{source:"iana"},"application/oebps-package+xml":{source:"iana",compressible:!0,extensions:["opf"]},"application/ogg":{source:"iana",compressible:!1,extensions:["ogx"]},"application/omdoc+xml":{source:"apache",compressible:!0,extensions:["omdoc"]},"application/onenote":{source:"apache",extensions:["onetoc","onetoc2","onetmp","onepkg"]},"application/opc-nodeset+xml":{source:"iana",compressible:!0},"application/oscore":{source:"iana"},"application/oxps":{source:"iana",extensions:["oxps"]},"application/p21":{source:"iana"},"application/p21+zip":{source:"iana",compressible:!1},"application/p2p-overlay+xml":{source:"iana",compressible:!0,extensions:["relo"]},"application/parityfec":{source:"iana"},"application/passport":{source:"iana"},"application/patch-ops-error+xml":{source:"iana",compressible:!0,extensions:["xer"]},"application/pdf":{source:"iana",compressible:!1,extensions:["pdf"]},"application/pdx":{source:"iana"},"application/pem-certificate-chain":{source:"iana"},"application/pgp-encrypted":{source:"iana",compressible:!1,extensions:["pgp"]},"application/pgp-keys":{source:"iana",extensions:["asc"]},"application/pgp-signature":{source:"iana",extensions:["asc","sig"]},"application/pics-rules":{source:"apache",extensions:["prf"]},"application/pidf+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/pidf-diff+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/pkcs10":{source:"iana",extensions:["p10"]},"application/pkcs12":{source:"iana"},"application/pkcs7-mime":{source:"iana",extensions:["p7m","p7c"]},"application/pkcs7-signature":{source:"iana",extensions:["p7s"]},"application/pkcs8":{source:"iana",extensions:["p8"]},"application/pkcs8-encrypted":{source:"iana"},"application/pkix-attr-cert":{source:"iana",extensions:["ac"]},"application/pkix-cert":{source:"iana",extensions:["cer"]},"application/pkix-crl":{source:"iana",extensions:["crl"]},"application/pkix-pkipath":{source:"iana",extensions:["pkipath"]},"application/pkixcmp":{source:"iana",extensions:["pki"]},"application/pls+xml":{source:"iana",compressible:!0,extensions:["pls"]},"application/poc-settings+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/postscript":{source:"iana",compressible:!0,extensions:["ai","eps","ps"]},"application/ppsp-tracker+json":{source:"iana",compressible:!0},"application/problem+json":{source:"iana",compressible:!0},"application/problem+xml":{source:"iana",compressible:!0},"application/provenance+xml":{source:"iana",compressible:!0,extensions:["provx"]},"application/prs.alvestrand.titrax-sheet":{source:"iana"},"application/prs.cww":{source:"iana",extensions:["cww"]},"application/prs.cyn":{source:"iana",charset:"7-BIT"},"application/prs.hpub+zip":{source:"iana",compressible:!1},"application/prs.nprend":{source:"iana"},"application/prs.plucker":{source:"iana"},"application/prs.rdf-xml-crypt":{source:"iana"},"application/prs.xsf+xml":{source:"iana",compressible:!0},"application/pskc+xml":{source:"iana",compressible:!0,extensions:["pskcxml"]},"application/pvd+json":{source:"iana",compressible:!0},"application/qsig":{source:"iana"},"application/raml+yaml":{compressible:!0,extensions:["raml"]},"application/raptorfec":{source:"iana"},"application/rdap+json":{source:"iana",compressible:!0},"application/rdf+xml":{source:"iana",compressible:!0,extensions:["rdf","owl"]},"application/reginfo+xml":{source:"iana",compressible:!0,extensions:["rif"]},"application/relax-ng-compact-syntax":{source:"iana",extensions:["rnc"]},"application/remote-printing":{source:"iana"},"application/reputon+json":{source:"iana",compressible:!0},"application/resource-lists+xml":{source:"iana",compressible:!0,extensions:["rl"]},"application/resource-lists-diff+xml":{source:"iana",compressible:!0,extensions:["rld"]},"application/rfc+xml":{source:"iana",compressible:!0},"application/riscos":{source:"iana"},"application/rlmi+xml":{source:"iana",compressible:!0},"application/rls-services+xml":{source:"iana",compressible:!0,extensions:["rs"]},"application/route-apd+xml":{source:"iana",compressible:!0,extensions:["rapd"]},"application/route-s-tsid+xml":{source:"iana",compressible:!0,extensions:["sls"]},"application/route-usd+xml":{source:"iana",compressible:!0,extensions:["rusd"]},"application/rpki-ghostbusters":{source:"iana",extensions:["gbr"]},"application/rpki-manifest":{source:"iana",extensions:["mft"]},"application/rpki-publication":{source:"iana"},"application/rpki-roa":{source:"iana",extensions:["roa"]},"application/rpki-updown":{source:"iana"},"application/rsd+xml":{source:"apache",compressible:!0,extensions:["rsd"]},"application/rss+xml":{source:"apache",compressible:!0,extensions:["rss"]},"application/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"application/rtploopback":{source:"iana"},"application/rtx":{source:"iana"},"application/samlassertion+xml":{source:"iana",compressible:!0},"application/samlmetadata+xml":{source:"iana",compressible:!0},"application/sarif+json":{source:"iana",compressible:!0},"application/sarif-external-properties+json":{source:"iana",compressible:!0},"application/sbe":{source:"iana"},"application/sbml+xml":{source:"iana",compressible:!0,extensions:["sbml"]},"application/scaip+xml":{source:"iana",compressible:!0},"application/scim+json":{source:"iana",compressible:!0},"application/scvp-cv-request":{source:"iana",extensions:["scq"]},"application/scvp-cv-response":{source:"iana",extensions:["scs"]},"application/scvp-vp-request":{source:"iana",extensions:["spq"]},"application/scvp-vp-response":{source:"iana",extensions:["spp"]},"application/sdp":{source:"iana",extensions:["sdp"]},"application/secevent+jwt":{source:"iana"},"application/senml+cbor":{source:"iana"},"application/senml+json":{source:"iana",compressible:!0},"application/senml+xml":{source:"iana",compressible:!0,extensions:["senmlx"]},"application/senml-etch+cbor":{source:"iana"},"application/senml-etch+json":{source:"iana",compressible:!0},"application/senml-exi":{source:"iana"},"application/sensml+cbor":{source:"iana"},"application/sensml+json":{source:"iana",compressible:!0},"application/sensml+xml":{source:"iana",compressible:!0,extensions:["sensmlx"]},"application/sensml-exi":{source:"iana"},"application/sep+xml":{source:"iana",compressible:!0},"application/sep-exi":{source:"iana"},"application/session-info":{source:"iana"},"application/set-payment":{source:"iana"},"application/set-payment-initiation":{source:"iana",extensions:["setpay"]},"application/set-registration":{source:"iana"},"application/set-registration-initiation":{source:"iana",extensions:["setreg"]},"application/sgml":{source:"iana"},"application/sgml-open-catalog":{source:"iana"},"application/shf+xml":{source:"iana",compressible:!0,extensions:["shf"]},"application/sieve":{source:"iana",extensions:["siv","sieve"]},"application/simple-filter+xml":{source:"iana",compressible:!0},"application/simple-message-summary":{source:"iana"},"application/simplesymbolcontainer":{source:"iana"},"application/sipc":{source:"iana"},"application/slate":{source:"iana"},"application/smil":{source:"iana"},"application/smil+xml":{source:"iana",compressible:!0,extensions:["smi","smil"]},"application/smpte336m":{source:"iana"},"application/soap+fastinfoset":{source:"iana"},"application/soap+xml":{source:"iana",compressible:!0},"application/sparql-query":{source:"iana",extensions:["rq"]},"application/sparql-results+xml":{source:"iana",compressible:!0,extensions:["srx"]},"application/spdx+json":{source:"iana",compressible:!0},"application/spirits-event+xml":{source:"iana",compressible:!0},"application/sql":{source:"iana"},"application/srgs":{source:"iana",extensions:["gram"]},"application/srgs+xml":{source:"iana",compressible:!0,extensions:["grxml"]},"application/sru+xml":{source:"iana",compressible:!0,extensions:["sru"]},"application/ssdl+xml":{source:"apache",compressible:!0,extensions:["ssdl"]},"application/ssml+xml":{source:"iana",compressible:!0,extensions:["ssml"]},"application/stix+json":{source:"iana",compressible:!0},"application/swid+xml":{source:"iana",compressible:!0,extensions:["swidtag"]},"application/tamp-apex-update":{source:"iana"},"application/tamp-apex-update-confirm":{source:"iana"},"application/tamp-community-update":{source:"iana"},"application/tamp-community-update-confirm":{source:"iana"},"application/tamp-error":{source:"iana"},"application/tamp-sequence-adjust":{source:"iana"},"application/tamp-sequence-adjust-confirm":{source:"iana"},"application/tamp-status-query":{source:"iana"},"application/tamp-status-response":{source:"iana"},"application/tamp-update":{source:"iana"},"application/tamp-update-confirm":{source:"iana"},"application/tar":{compressible:!0},"application/taxii+json":{source:"iana",compressible:!0},"application/td+json":{source:"iana",compressible:!0},"application/tei+xml":{source:"iana",compressible:!0,extensions:["tei","teicorpus"]},"application/tetra_isi":{source:"iana"},"application/thraud+xml":{source:"iana",compressible:!0,extensions:["tfi"]},"application/timestamp-query":{source:"iana"},"application/timestamp-reply":{source:"iana"},"application/timestamped-data":{source:"iana",extensions:["tsd"]},"application/tlsrpt+gzip":{source:"iana"},"application/tlsrpt+json":{source:"iana",compressible:!0},"application/tnauthlist":{source:"iana"},"application/token-introspection+jwt":{source:"iana"},"application/toml":{compressible:!0,extensions:["toml"]},"application/trickle-ice-sdpfrag":{source:"iana"},"application/trig":{source:"iana",extensions:["trig"]},"application/ttml+xml":{source:"iana",compressible:!0,extensions:["ttml"]},"application/tve-trigger":{source:"iana"},"application/tzif":{source:"iana"},"application/tzif-leap":{source:"iana"},"application/ubjson":{compressible:!1,extensions:["ubj"]},"application/ulpfec":{source:"iana"},"application/urc-grpsheet+xml":{source:"iana",compressible:!0},"application/urc-ressheet+xml":{source:"iana",compressible:!0,extensions:["rsheet"]},"application/urc-targetdesc+xml":{source:"iana",compressible:!0,extensions:["td"]},"application/urc-uisocketdesc+xml":{source:"iana",compressible:!0},"application/vcard+json":{source:"iana",compressible:!0},"application/vcard+xml":{source:"iana",compressible:!0},"application/vemmi":{source:"iana"},"application/vividence.scriptfile":{source:"apache"},"application/vnd.1000minds.decision-model+xml":{source:"iana",compressible:!0,extensions:["1km"]},"application/vnd.3gpp-prose+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-prose-pc3ch+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-v2x-local-service-information":{source:"iana"},"application/vnd.3gpp.5gnas":{source:"iana"},"application/vnd.3gpp.access-transfer-events+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.bsf+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.gmop+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.gtpc":{source:"iana"},"application/vnd.3gpp.interworking-data":{source:"iana"},"application/vnd.3gpp.lpp":{source:"iana"},"application/vnd.3gpp.mc-signalling-ear":{source:"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-payload":{source:"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-signalling":{source:"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-floor-request+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-location-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-signed+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-ue-init-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-location-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-transmission-request+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mid-call+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.ngap":{source:"iana"},"application/vnd.3gpp.pfcp":{source:"iana"},"application/vnd.3gpp.pic-bw-large":{source:"iana",extensions:["plb"]},"application/vnd.3gpp.pic-bw-small":{source:"iana",extensions:["psb"]},"application/vnd.3gpp.pic-bw-var":{source:"iana",extensions:["pvb"]},"application/vnd.3gpp.s1ap":{source:"iana"},"application/vnd.3gpp.sms":{source:"iana"},"application/vnd.3gpp.sms+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-ext+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.state-and-event-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.ussd+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.bcmcsinfo+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.sms":{source:"iana"},"application/vnd.3gpp2.tcap":{source:"iana",extensions:["tcap"]},"application/vnd.3lightssoftware.imagescal":{source:"iana"},"application/vnd.3m.post-it-notes":{source:"iana",extensions:["pwn"]},"application/vnd.accpac.simply.aso":{source:"iana",extensions:["aso"]},"application/vnd.accpac.simply.imp":{source:"iana",extensions:["imp"]},"application/vnd.acucobol":{source:"iana",extensions:["acu"]},"application/vnd.acucorp":{source:"iana",extensions:["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{source:"apache",compressible:!1,extensions:["air"]},"application/vnd.adobe.flash.movie":{source:"iana"},"application/vnd.adobe.formscentral.fcdt":{source:"iana",extensions:["fcdt"]},"application/vnd.adobe.fxp":{source:"iana",extensions:["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{source:"iana"},"application/vnd.adobe.xdp+xml":{source:"iana",compressible:!0,extensions:["xdp"]},"application/vnd.adobe.xfdf":{source:"iana",extensions:["xfdf"]},"application/vnd.aether.imp":{source:"iana"},"application/vnd.afpc.afplinedata":{source:"iana"},"application/vnd.afpc.afplinedata-pagedef":{source:"iana"},"application/vnd.afpc.cmoca-cmresource":{source:"iana"},"application/vnd.afpc.foca-charset":{source:"iana"},"application/vnd.afpc.foca-codedfont":{source:"iana"},"application/vnd.afpc.foca-codepage":{source:"iana"},"application/vnd.afpc.modca":{source:"iana"},"application/vnd.afpc.modca-cmtable":{source:"iana"},"application/vnd.afpc.modca-formdef":{source:"iana"},"application/vnd.afpc.modca-mediummap":{source:"iana"},"application/vnd.afpc.modca-objectcontainer":{source:"iana"},"application/vnd.afpc.modca-overlay":{source:"iana"},"application/vnd.afpc.modca-pagesegment":{source:"iana"},"application/vnd.age":{source:"iana",extensions:["age"]},"application/vnd.ah-barcode":{source:"iana"},"application/vnd.ahead.space":{source:"iana",extensions:["ahead"]},"application/vnd.airzip.filesecure.azf":{source:"iana",extensions:["azf"]},"application/vnd.airzip.filesecure.azs":{source:"iana",extensions:["azs"]},"application/vnd.amadeus+json":{source:"iana",compressible:!0},"application/vnd.amazon.ebook":{source:"apache",extensions:["azw"]},"application/vnd.amazon.mobi8-ebook":{source:"iana"},"application/vnd.americandynamics.acc":{source:"iana",extensions:["acc"]},"application/vnd.amiga.ami":{source:"iana",extensions:["ami"]},"application/vnd.amundsen.maze+xml":{source:"iana",compressible:!0},"application/vnd.android.ota":{source:"iana"},"application/vnd.android.package-archive":{source:"apache",compressible:!1,extensions:["apk"]},"application/vnd.anki":{source:"iana"},"application/vnd.anser-web-certificate-issue-initiation":{source:"iana",extensions:["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{source:"apache",extensions:["fti"]},"application/vnd.antix.game-component":{source:"iana",extensions:["atx"]},"application/vnd.apache.arrow.file":{source:"iana"},"application/vnd.apache.arrow.stream":{source:"iana"},"application/vnd.apache.thrift.binary":{source:"iana"},"application/vnd.apache.thrift.compact":{source:"iana"},"application/vnd.apache.thrift.json":{source:"iana"},"application/vnd.api+json":{source:"iana",compressible:!0},"application/vnd.aplextor.warrp+json":{source:"iana",compressible:!0},"application/vnd.apothekende.reservation+json":{source:"iana",compressible:!0},"application/vnd.apple.installer+xml":{source:"iana",compressible:!0,extensions:["mpkg"]},"application/vnd.apple.keynote":{source:"iana",extensions:["key"]},"application/vnd.apple.mpegurl":{source:"iana",extensions:["m3u8"]},"application/vnd.apple.numbers":{source:"iana",extensions:["numbers"]},"application/vnd.apple.pages":{source:"iana",extensions:["pages"]},"application/vnd.apple.pkpass":{compressible:!1,extensions:["pkpass"]},"application/vnd.arastra.swi":{source:"iana"},"application/vnd.aristanetworks.swi":{source:"iana",extensions:["swi"]},"application/vnd.artisan+json":{source:"iana",compressible:!0},"application/vnd.artsquare":{source:"iana"},"application/vnd.astraea-software.iota":{source:"iana",extensions:["iota"]},"application/vnd.audiograph":{source:"iana",extensions:["aep"]},"application/vnd.autopackage":{source:"iana"},"application/vnd.avalon+json":{source:"iana",compressible:!0},"application/vnd.avistar+xml":{source:"iana",compressible:!0},"application/vnd.balsamiq.bmml+xml":{source:"iana",compressible:!0,extensions:["bmml"]},"application/vnd.balsamiq.bmpr":{source:"iana"},"application/vnd.banana-accounting":{source:"iana"},"application/vnd.bbf.usp.error":{source:"iana"},"application/vnd.bbf.usp.msg":{source:"iana"},"application/vnd.bbf.usp.msg+json":{source:"iana",compressible:!0},"application/vnd.bekitzur-stech+json":{source:"iana",compressible:!0},"application/vnd.bint.med-content":{source:"iana"},"application/vnd.biopax.rdf+xml":{source:"iana",compressible:!0},"application/vnd.blink-idb-value-wrapper":{source:"iana"},"application/vnd.blueice.multipass":{source:"iana",extensions:["mpm"]},"application/vnd.bluetooth.ep.oob":{source:"iana"},"application/vnd.bluetooth.le.oob":{source:"iana"},"application/vnd.bmi":{source:"iana",extensions:["bmi"]},"application/vnd.bpf":{source:"iana"},"application/vnd.bpf3":{source:"iana"},"application/vnd.businessobjects":{source:"iana",extensions:["rep"]},"application/vnd.byu.uapi+json":{source:"iana",compressible:!0},"application/vnd.cab-jscript":{source:"iana"},"application/vnd.canon-cpdl":{source:"iana"},"application/vnd.canon-lips":{source:"iana"},"application/vnd.capasystems-pg+json":{source:"iana",compressible:!0},"application/vnd.cendio.thinlinc.clientconf":{source:"iana"},"application/vnd.century-systems.tcp_stream":{source:"iana"},"application/vnd.chemdraw+xml":{source:"iana",compressible:!0,extensions:["cdxml"]},"application/vnd.chess-pgn":{source:"iana"},"application/vnd.chipnuts.karaoke-mmd":{source:"iana",extensions:["mmd"]},"application/vnd.ciedi":{source:"iana"},"application/vnd.cinderella":{source:"iana",extensions:["cdy"]},"application/vnd.cirpack.isdn-ext":{source:"iana"},"application/vnd.citationstyles.style+xml":{source:"iana",compressible:!0,extensions:["csl"]},"application/vnd.claymore":{source:"iana",extensions:["cla"]},"application/vnd.cloanto.rp9":{source:"iana",extensions:["rp9"]},"application/vnd.clonk.c4group":{source:"iana",extensions:["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{source:"iana",extensions:["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{source:"iana",extensions:["c11amz"]},"application/vnd.coffeescript":{source:"iana"},"application/vnd.collabio.xodocuments.document":{source:"iana"},"application/vnd.collabio.xodocuments.document-template":{source:"iana"},"application/vnd.collabio.xodocuments.presentation":{source:"iana"},"application/vnd.collabio.xodocuments.presentation-template":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{source:"iana"},"application/vnd.collection+json":{source:"iana",compressible:!0},"application/vnd.collection.doc+json":{source:"iana",compressible:!0},"application/vnd.collection.next+json":{source:"iana",compressible:!0},"application/vnd.comicbook+zip":{source:"iana",compressible:!1},"application/vnd.comicbook-rar":{source:"iana"},"application/vnd.commerce-battelle":{source:"iana"},"application/vnd.commonspace":{source:"iana",extensions:["csp"]},"application/vnd.contact.cmsg":{source:"iana",extensions:["cdbcmsg"]},"application/vnd.coreos.ignition+json":{source:"iana",compressible:!0},"application/vnd.cosmocaller":{source:"iana",extensions:["cmc"]},"application/vnd.crick.clicker":{source:"iana",extensions:["clkx"]},"application/vnd.crick.clicker.keyboard":{source:"iana",extensions:["clkk"]},"application/vnd.crick.clicker.palette":{source:"iana",extensions:["clkp"]},"application/vnd.crick.clicker.template":{source:"iana",extensions:["clkt"]},"application/vnd.crick.clicker.wordbank":{source:"iana",extensions:["clkw"]},"application/vnd.criticaltools.wbs+xml":{source:"iana",compressible:!0,extensions:["wbs"]},"application/vnd.cryptii.pipe+json":{source:"iana",compressible:!0},"application/vnd.crypto-shade-file":{source:"iana"},"application/vnd.cryptomator.encrypted":{source:"iana"},"application/vnd.cryptomator.vault":{source:"iana"},"application/vnd.ctc-posml":{source:"iana",extensions:["pml"]},"application/vnd.ctct.ws+xml":{source:"iana",compressible:!0},"application/vnd.cups-pdf":{source:"iana"},"application/vnd.cups-postscript":{source:"iana"},"application/vnd.cups-ppd":{source:"iana",extensions:["ppd"]},"application/vnd.cups-raster":{source:"iana"},"application/vnd.cups-raw":{source:"iana"},"application/vnd.curl":{source:"iana"},"application/vnd.curl.car":{source:"apache",extensions:["car"]},"application/vnd.curl.pcurl":{source:"apache",extensions:["pcurl"]},"application/vnd.cyan.dean.root+xml":{source:"iana",compressible:!0},"application/vnd.cybank":{source:"iana"},"application/vnd.cyclonedx+json":{source:"iana",compressible:!0},"application/vnd.cyclonedx+xml":{source:"iana",compressible:!0},"application/vnd.d2l.coursepackage1p0+zip":{source:"iana",compressible:!1},"application/vnd.d3m-dataset":{source:"iana"},"application/vnd.d3m-problem":{source:"iana"},"application/vnd.dart":{source:"iana",compressible:!0,extensions:["dart"]},"application/vnd.data-vision.rdz":{source:"iana",extensions:["rdz"]},"application/vnd.datapackage+json":{source:"iana",compressible:!0},"application/vnd.dataresource+json":{source:"iana",compressible:!0},"application/vnd.dbf":{source:"iana",extensions:["dbf"]},"application/vnd.debian.binary-package":{source:"iana"},"application/vnd.dece.data":{source:"iana",extensions:["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{source:"iana",compressible:!0,extensions:["uvt","uvvt"]},"application/vnd.dece.unspecified":{source:"iana",extensions:["uvx","uvvx"]},"application/vnd.dece.zip":{source:"iana",extensions:["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{source:"iana",extensions:["fe_launch"]},"application/vnd.desmume.movie":{source:"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{source:"iana"},"application/vnd.dm.delegation+xml":{source:"iana",compressible:!0},"application/vnd.dna":{source:"iana",extensions:["dna"]},"application/vnd.document+json":{source:"iana",compressible:!0},"application/vnd.dolby.mlp":{source:"apache",extensions:["mlp"]},"application/vnd.dolby.mobile.1":{source:"iana"},"application/vnd.dolby.mobile.2":{source:"iana"},"application/vnd.doremir.scorecloud-binary-document":{source:"iana"},"application/vnd.dpgraph":{source:"iana",extensions:["dpg"]},"application/vnd.dreamfactory":{source:"iana",extensions:["dfac"]},"application/vnd.drive+json":{source:"iana",compressible:!0},"application/vnd.ds-keypoint":{source:"apache",extensions:["kpxx"]},"application/vnd.dtg.local":{source:"iana"},"application/vnd.dtg.local.flash":{source:"iana"},"application/vnd.dtg.local.html":{source:"iana"},"application/vnd.dvb.ait":{source:"iana",extensions:["ait"]},"application/vnd.dvb.dvbisl+xml":{source:"iana",compressible:!0},"application/vnd.dvb.dvbj":{source:"iana"},"application/vnd.dvb.esgcontainer":{source:"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess2":{source:"iana"},"application/vnd.dvb.ipdcesgpdd":{source:"iana"},"application/vnd.dvb.ipdcroaming":{source:"iana"},"application/vnd.dvb.iptv.alfec-base":{source:"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{source:"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-container+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-generic+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-msglist+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-request+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-response+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-init+xml":{source:"iana",compressible:!0},"application/vnd.dvb.pfr":{source:"iana"},"application/vnd.dvb.service":{source:"iana",extensions:["svc"]},"application/vnd.dxr":{source:"iana"},"application/vnd.dynageo":{source:"iana",extensions:["geo"]},"application/vnd.dzr":{source:"iana"},"application/vnd.easykaraoke.cdgdownload":{source:"iana"},"application/vnd.ecdis-update":{source:"iana"},"application/vnd.ecip.rlp":{source:"iana"},"application/vnd.eclipse.ditto+json":{source:"iana",compressible:!0},"application/vnd.ecowin.chart":{source:"iana",extensions:["mag"]},"application/vnd.ecowin.filerequest":{source:"iana"},"application/vnd.ecowin.fileupdate":{source:"iana"},"application/vnd.ecowin.series":{source:"iana"},"application/vnd.ecowin.seriesrequest":{source:"iana"},"application/vnd.ecowin.seriesupdate":{source:"iana"},"application/vnd.efi.img":{source:"iana"},"application/vnd.efi.iso":{source:"iana"},"application/vnd.emclient.accessrequest+xml":{source:"iana",compressible:!0},"application/vnd.enliven":{source:"iana",extensions:["nml"]},"application/vnd.enphase.envoy":{source:"iana"},"application/vnd.eprints.data+xml":{source:"iana",compressible:!0},"application/vnd.epson.esf":{source:"iana",extensions:["esf"]},"application/vnd.epson.msf":{source:"iana",extensions:["msf"]},"application/vnd.epson.quickanime":{source:"iana",extensions:["qam"]},"application/vnd.epson.salt":{source:"iana",extensions:["slt"]},"application/vnd.epson.ssf":{source:"iana",extensions:["ssf"]},"application/vnd.ericsson.quickcall":{source:"iana"},"application/vnd.espass-espass+zip":{source:"iana",compressible:!1},"application/vnd.eszigno3+xml":{source:"iana",compressible:!0,extensions:["es3","et3"]},"application/vnd.etsi.aoc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.asic-e+zip":{source:"iana",compressible:!1},"application/vnd.etsi.asic-s+zip":{source:"iana",compressible:!1},"application/vnd.etsi.cug+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvcommand+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-bc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-cod+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-npvr+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvservice+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsync+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvueprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mcid+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mheg5":{source:"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{source:"iana",compressible:!0},"application/vnd.etsi.pstn+xml":{source:"iana",compressible:!0},"application/vnd.etsi.sci+xml":{source:"iana",compressible:!0},"application/vnd.etsi.simservs+xml":{source:"iana",compressible:!0},"application/vnd.etsi.timestamp-token":{source:"iana"},"application/vnd.etsi.tsl+xml":{source:"iana",compressible:!0},"application/vnd.etsi.tsl.der":{source:"iana"},"application/vnd.eu.kasparian.car+json":{source:"iana",compressible:!0},"application/vnd.eudora.data":{source:"iana"},"application/vnd.evolv.ecig.profile":{source:"iana"},"application/vnd.evolv.ecig.settings":{source:"iana"},"application/vnd.evolv.ecig.theme":{source:"iana"},"application/vnd.exstream-empower+zip":{source:"iana",compressible:!1},"application/vnd.exstream-package":{source:"iana"},"application/vnd.ezpix-album":{source:"iana",extensions:["ez2"]},"application/vnd.ezpix-package":{source:"iana",extensions:["ez3"]},"application/vnd.f-secure.mobile":{source:"iana"},"application/vnd.familysearch.gedcom+zip":{source:"iana",compressible:!1},"application/vnd.fastcopy-disk-image":{source:"iana"},"application/vnd.fdf":{source:"iana",extensions:["fdf"]},"application/vnd.fdsn.mseed":{source:"iana",extensions:["mseed"]},"application/vnd.fdsn.seed":{source:"iana",extensions:["seed","dataless"]},"application/vnd.ffsns":{source:"iana"},"application/vnd.ficlab.flb+zip":{source:"iana",compressible:!1},"application/vnd.filmit.zfc":{source:"iana"},"application/vnd.fints":{source:"iana"},"application/vnd.firemonkeys.cloudcell":{source:"iana"},"application/vnd.flographit":{source:"iana",extensions:["gph"]},"application/vnd.fluxtime.clip":{source:"iana",extensions:["ftc"]},"application/vnd.font-fontforge-sfd":{source:"iana"},"application/vnd.framemaker":{source:"iana",extensions:["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{source:"iana",extensions:["fnc"]},"application/vnd.frogans.ltf":{source:"iana",extensions:["ltf"]},"application/vnd.fsc.weblaunch":{source:"iana",extensions:["fsc"]},"application/vnd.fujifilm.fb.docuworks":{source:"iana"},"application/vnd.fujifilm.fb.docuworks.binder":{source:"iana"},"application/vnd.fujifilm.fb.docuworks.container":{source:"iana"},"application/vnd.fujifilm.fb.jfi+xml":{source:"iana",compressible:!0},"application/vnd.fujitsu.oasys":{source:"iana",extensions:["oas"]},"application/vnd.fujitsu.oasys2":{source:"iana",extensions:["oa2"]},"application/vnd.fujitsu.oasys3":{source:"iana",extensions:["oa3"]},"application/vnd.fujitsu.oasysgp":{source:"iana",extensions:["fg5"]},"application/vnd.fujitsu.oasysprs":{source:"iana",extensions:["bh2"]},"application/vnd.fujixerox.art-ex":{source:"iana"},"application/vnd.fujixerox.art4":{source:"iana"},"application/vnd.fujixerox.ddd":{source:"iana",extensions:["ddd"]},"application/vnd.fujixerox.docuworks":{source:"iana",extensions:["xdw"]},"application/vnd.fujixerox.docuworks.binder":{source:"iana",extensions:["xbd"]},"application/vnd.fujixerox.docuworks.container":{source:"iana"},"application/vnd.fujixerox.hbpl":{source:"iana"},"application/vnd.fut-misnet":{source:"iana"},"application/vnd.futoin+cbor":{source:"iana"},"application/vnd.futoin+json":{source:"iana",compressible:!0},"application/vnd.fuzzysheet":{source:"iana",extensions:["fzs"]},"application/vnd.genomatix.tuxedo":{source:"iana",extensions:["txd"]},"application/vnd.gentics.grd+json":{source:"iana",compressible:!0},"application/vnd.geo+json":{source:"iana",compressible:!0},"application/vnd.geocube+xml":{source:"iana",compressible:!0},"application/vnd.geogebra.file":{source:"iana",extensions:["ggb"]},"application/vnd.geogebra.slides":{source:"iana"},"application/vnd.geogebra.tool":{source:"iana",extensions:["ggt"]},"application/vnd.geometry-explorer":{source:"iana",extensions:["gex","gre"]},"application/vnd.geonext":{source:"iana",extensions:["gxt"]},"application/vnd.geoplan":{source:"iana",extensions:["g2w"]},"application/vnd.geospace":{source:"iana",extensions:["g3w"]},"application/vnd.gerber":{source:"iana"},"application/vnd.globalplatform.card-content-mgt":{source:"iana"},"application/vnd.globalplatform.card-content-mgt-response":{source:"iana"},"application/vnd.gmx":{source:"iana",extensions:["gmx"]},"application/vnd.google-apps.document":{compressible:!1,extensions:["gdoc"]},"application/vnd.google-apps.presentation":{compressible:!1,extensions:["gslides"]},"application/vnd.google-apps.spreadsheet":{compressible:!1,extensions:["gsheet"]},"application/vnd.google-earth.kml+xml":{source:"iana",compressible:!0,extensions:["kml"]},"application/vnd.google-earth.kmz":{source:"iana",compressible:!1,extensions:["kmz"]},"application/vnd.gov.sk.e-form+xml":{source:"iana",compressible:!0},"application/vnd.gov.sk.e-form+zip":{source:"iana",compressible:!1},"application/vnd.gov.sk.xmldatacontainer+xml":{source:"iana",compressible:!0},"application/vnd.grafeq":{source:"iana",extensions:["gqf","gqs"]},"application/vnd.gridmp":{source:"iana"},"application/vnd.groove-account":{source:"iana",extensions:["gac"]},"application/vnd.groove-help":{source:"iana",extensions:["ghf"]},"application/vnd.groove-identity-message":{source:"iana",extensions:["gim"]},"application/vnd.groove-injector":{source:"iana",extensions:["grv"]},"application/vnd.groove-tool-message":{source:"iana",extensions:["gtm"]},"application/vnd.groove-tool-template":{source:"iana",extensions:["tpl"]},"application/vnd.groove-vcard":{source:"iana",extensions:["vcg"]},"application/vnd.hal+json":{source:"iana",compressible:!0},"application/vnd.hal+xml":{source:"iana",compressible:!0,extensions:["hal"]},"application/vnd.handheld-entertainment+xml":{source:"iana",compressible:!0,extensions:["zmm"]},"application/vnd.hbci":{source:"iana",extensions:["hbci"]},"application/vnd.hc+json":{source:"iana",compressible:!0},"application/vnd.hcl-bireports":{source:"iana"},"application/vnd.hdt":{source:"iana"},"application/vnd.heroku+json":{source:"iana",compressible:!0},"application/vnd.hhe.lesson-player":{source:"iana",extensions:["les"]},"application/vnd.hl7cda+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.hl7v2+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.hp-hpgl":{source:"iana",extensions:["hpgl"]},"application/vnd.hp-hpid":{source:"iana",extensions:["hpid"]},"application/vnd.hp-hps":{source:"iana",extensions:["hps"]},"application/vnd.hp-jlyt":{source:"iana",extensions:["jlt"]},"application/vnd.hp-pcl":{source:"iana",extensions:["pcl"]},"application/vnd.hp-pclxl":{source:"iana",extensions:["pclxl"]},"application/vnd.httphone":{source:"iana"},"application/vnd.hydrostatix.sof-data":{source:"iana",extensions:["sfd-hdstx"]},"application/vnd.hyper+json":{source:"iana",compressible:!0},"application/vnd.hyper-item+json":{source:"iana",compressible:!0},"application/vnd.hyperdrive+json":{source:"iana",compressible:!0},"application/vnd.hzn-3d-crossword":{source:"iana"},"application/vnd.ibm.afplinedata":{source:"iana"},"application/vnd.ibm.electronic-media":{source:"iana"},"application/vnd.ibm.minipay":{source:"iana",extensions:["mpy"]},"application/vnd.ibm.modcap":{source:"iana",extensions:["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{source:"iana",extensions:["irm"]},"application/vnd.ibm.secure-container":{source:"iana",extensions:["sc"]},"application/vnd.iccprofile":{source:"iana",extensions:["icc","icm"]},"application/vnd.ieee.1905":{source:"iana"},"application/vnd.igloader":{source:"iana",extensions:["igl"]},"application/vnd.imagemeter.folder+zip":{source:"iana",compressible:!1},"application/vnd.imagemeter.image+zip":{source:"iana",compressible:!1},"application/vnd.immervision-ivp":{source:"iana",extensions:["ivp"]},"application/vnd.immervision-ivu":{source:"iana",extensions:["ivu"]},"application/vnd.ims.imsccv1p1":{source:"iana"},"application/vnd.ims.imsccv1p2":{source:"iana"},"application/vnd.ims.imsccv1p3":{source:"iana"},"application/vnd.ims.lis.v2.result+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy.id+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings.simple+json":{source:"iana",compressible:!0},"application/vnd.informedcontrol.rms+xml":{source:"iana",compressible:!0},"application/vnd.informix-visionary":{source:"iana"},"application/vnd.infotech.project":{source:"iana"},"application/vnd.infotech.project+xml":{source:"iana",compressible:!0},"application/vnd.innopath.wamp.notification":{source:"iana"},"application/vnd.insors.igm":{source:"iana",extensions:["igm"]},"application/vnd.intercon.formnet":{source:"iana",extensions:["xpw","xpx"]},"application/vnd.intergeo":{source:"iana",extensions:["i2g"]},"application/vnd.intertrust.digibox":{source:"iana"},"application/vnd.intertrust.nncp":{source:"iana"},"application/vnd.intu.qbo":{source:"iana",extensions:["qbo"]},"application/vnd.intu.qfx":{source:"iana",extensions:["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.conceptitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.knowledgeitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsmessage+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.packageitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.planningitem+xml":{source:"iana",compressible:!0},"application/vnd.ipunplugged.rcprofile":{source:"iana",extensions:["rcprofile"]},"application/vnd.irepository.package+xml":{source:"iana",compressible:!0,extensions:["irp"]},"application/vnd.is-xpr":{source:"iana",extensions:["xpr"]},"application/vnd.isac.fcs":{source:"iana",extensions:["fcs"]},"application/vnd.iso11783-10+zip":{source:"iana",compressible:!1},"application/vnd.jam":{source:"iana",extensions:["jam"]},"application/vnd.japannet-directory-service":{source:"iana"},"application/vnd.japannet-jpnstore-wakeup":{source:"iana"},"application/vnd.japannet-payment-wakeup":{source:"iana"},"application/vnd.japannet-registration":{source:"iana"},"application/vnd.japannet-registration-wakeup":{source:"iana"},"application/vnd.japannet-setstore-wakeup":{source:"iana"},"application/vnd.japannet-verification":{source:"iana"},"application/vnd.japannet-verification-wakeup":{source:"iana"},"application/vnd.jcp.javame.midlet-rms":{source:"iana",extensions:["rms"]},"application/vnd.jisp":{source:"iana",extensions:["jisp"]},"application/vnd.joost.joda-archive":{source:"iana",extensions:["joda"]},"application/vnd.jsk.isdn-ngn":{source:"iana"},"application/vnd.kahootz":{source:"iana",extensions:["ktz","ktr"]},"application/vnd.kde.karbon":{source:"iana",extensions:["karbon"]},"application/vnd.kde.kchart":{source:"iana",extensions:["chrt"]},"application/vnd.kde.kformula":{source:"iana",extensions:["kfo"]},"application/vnd.kde.kivio":{source:"iana",extensions:["flw"]},"application/vnd.kde.kontour":{source:"iana",extensions:["kon"]},"application/vnd.kde.kpresenter":{source:"iana",extensions:["kpr","kpt"]},"application/vnd.kde.kspread":{source:"iana",extensions:["ksp"]},"application/vnd.kde.kword":{source:"iana",extensions:["kwd","kwt"]},"application/vnd.kenameaapp":{source:"iana",extensions:["htke"]},"application/vnd.kidspiration":{source:"iana",extensions:["kia"]},"application/vnd.kinar":{source:"iana",extensions:["kne","knp"]},"application/vnd.koan":{source:"iana",extensions:["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{source:"iana",extensions:["sse"]},"application/vnd.las":{source:"iana"},"application/vnd.las.las+json":{source:"iana",compressible:!0},"application/vnd.las.las+xml":{source:"iana",compressible:!0,extensions:["lasxml"]},"application/vnd.laszip":{source:"iana"},"application/vnd.leap+json":{source:"iana",compressible:!0},"application/vnd.liberty-request+xml":{source:"iana",compressible:!0},"application/vnd.llamagraphics.life-balance.desktop":{source:"iana",extensions:["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{source:"iana",compressible:!0,extensions:["lbe"]},"application/vnd.logipipe.circuit+zip":{source:"iana",compressible:!1},"application/vnd.loom":{source:"iana"},"application/vnd.lotus-1-2-3":{source:"iana",extensions:["123"]},"application/vnd.lotus-approach":{source:"iana",extensions:["apr"]},"application/vnd.lotus-freelance":{source:"iana",extensions:["pre"]},"application/vnd.lotus-notes":{source:"iana",extensions:["nsf"]},"application/vnd.lotus-organizer":{source:"iana",extensions:["org"]},"application/vnd.lotus-screencam":{source:"iana",extensions:["scm"]},"application/vnd.lotus-wordpro":{source:"iana",extensions:["lwp"]},"application/vnd.macports.portpkg":{source:"iana",extensions:["portpkg"]},"application/vnd.mapbox-vector-tile":{source:"iana",extensions:["mvt"]},"application/vnd.marlin.drm.actiontoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.conftoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.license+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.mdcf":{source:"iana"},"application/vnd.mason+json":{source:"iana",compressible:!0},"application/vnd.maxar.archive.3tz+zip":{source:"iana",compressible:!1},"application/vnd.maxmind.maxmind-db":{source:"iana"},"application/vnd.mcd":{source:"iana",extensions:["mcd"]},"application/vnd.medcalcdata":{source:"iana",extensions:["mc1"]},"application/vnd.mediastation.cdkey":{source:"iana",extensions:["cdkey"]},"application/vnd.meridian-slingshot":{source:"iana"},"application/vnd.mfer":{source:"iana",extensions:["mwf"]},"application/vnd.mfmp":{source:"iana",extensions:["mfm"]},"application/vnd.micro+json":{source:"iana",compressible:!0},"application/vnd.micrografx.flo":{source:"iana",extensions:["flo"]},"application/vnd.micrografx.igx":{source:"iana",extensions:["igx"]},"application/vnd.microsoft.portable-executable":{source:"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{source:"iana"},"application/vnd.miele+json":{source:"iana",compressible:!0},"application/vnd.mif":{source:"iana",extensions:["mif"]},"application/vnd.minisoft-hp3000-save":{source:"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{source:"iana"},"application/vnd.mobius.daf":{source:"iana",extensions:["daf"]},"application/vnd.mobius.dis":{source:"iana",extensions:["dis"]},"application/vnd.mobius.mbk":{source:"iana",extensions:["mbk"]},"application/vnd.mobius.mqy":{source:"iana",extensions:["mqy"]},"application/vnd.mobius.msl":{source:"iana",extensions:["msl"]},"application/vnd.mobius.plc":{source:"iana",extensions:["plc"]},"application/vnd.mobius.txf":{source:"iana",extensions:["txf"]},"application/vnd.mophun.application":{source:"iana",extensions:["mpn"]},"application/vnd.mophun.certificate":{source:"iana",extensions:["mpc"]},"application/vnd.motorola.flexsuite":{source:"iana"},"application/vnd.motorola.flexsuite.adsi":{source:"iana"},"application/vnd.motorola.flexsuite.fis":{source:"iana"},"application/vnd.motorola.flexsuite.gotap":{source:"iana"},"application/vnd.motorola.flexsuite.kmr":{source:"iana"},"application/vnd.motorola.flexsuite.ttc":{source:"iana"},"application/vnd.motorola.flexsuite.wem":{source:"iana"},"application/vnd.motorola.iprm":{source:"iana"},"application/vnd.mozilla.xul+xml":{source:"iana",compressible:!0,extensions:["xul"]},"application/vnd.ms-3mfdocument":{source:"iana"},"application/vnd.ms-artgalry":{source:"iana",extensions:["cil"]},"application/vnd.ms-asf":{source:"iana"},"application/vnd.ms-cab-compressed":{source:"iana",extensions:["cab"]},"application/vnd.ms-color.iccprofile":{source:"apache"},"application/vnd.ms-excel":{source:"iana",compressible:!1,extensions:["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{source:"iana",extensions:["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{source:"iana",extensions:["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{source:"iana",extensions:["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{source:"iana",extensions:["xltm"]},"application/vnd.ms-fontobject":{source:"iana",compressible:!0,extensions:["eot"]},"application/vnd.ms-htmlhelp":{source:"iana",extensions:["chm"]},"application/vnd.ms-ims":{source:"iana",extensions:["ims"]},"application/vnd.ms-lrm":{source:"iana",extensions:["lrm"]},"application/vnd.ms-office.activex+xml":{source:"iana",compressible:!0},"application/vnd.ms-officetheme":{source:"iana",extensions:["thmx"]},"application/vnd.ms-opentype":{source:"apache",compressible:!0},"application/vnd.ms-outlook":{compressible:!1,extensions:["msg"]},"application/vnd.ms-package.obfuscated-opentype":{source:"apache"},"application/vnd.ms-pki.seccat":{source:"apache",extensions:["cat"]},"application/vnd.ms-pki.stl":{source:"apache",extensions:["stl"]},"application/vnd.ms-playready.initiator+xml":{source:"iana",compressible:!0},"application/vnd.ms-powerpoint":{source:"iana",compressible:!1,extensions:["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{source:"iana",extensions:["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{source:"iana",extensions:["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{source:"iana",extensions:["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{source:"iana",extensions:["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{source:"iana",extensions:["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{source:"iana",compressible:!0},"application/vnd.ms-printing.printticket+xml":{source:"apache",compressible:!0},"application/vnd.ms-printschematicket+xml":{source:"iana",compressible:!0},"application/vnd.ms-project":{source:"iana",extensions:["mpp","mpt"]},"application/vnd.ms-tnef":{source:"iana"},"application/vnd.ms-windows.devicepairing":{source:"iana"},"application/vnd.ms-windows.nwprinting.oob":{source:"iana"},"application/vnd.ms-windows.printerpairing":{source:"iana"},"application/vnd.ms-windows.wsd.oob":{source:"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.lic-resp":{source:"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.meter-resp":{source:"iana"},"application/vnd.ms-word.document.macroenabled.12":{source:"iana",extensions:["docm"]},"application/vnd.ms-word.template.macroenabled.12":{source:"iana",extensions:["dotm"]},"application/vnd.ms-works":{source:"iana",extensions:["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{source:"iana",extensions:["wpl"]},"application/vnd.ms-xpsdocument":{source:"iana",compressible:!1,extensions:["xps"]},"application/vnd.msa-disk-image":{source:"iana"},"application/vnd.mseq":{source:"iana",extensions:["mseq"]},"application/vnd.msign":{source:"iana"},"application/vnd.multiad.creator":{source:"iana"},"application/vnd.multiad.creator.cif":{source:"iana"},"application/vnd.music-niff":{source:"iana"},"application/vnd.musician":{source:"iana",extensions:["mus"]},"application/vnd.muvee.style":{source:"iana",extensions:["msty"]},"application/vnd.mynfc":{source:"iana",extensions:["taglet"]},"application/vnd.nacamar.ybrid+json":{source:"iana",compressible:!0},"application/vnd.ncd.control":{source:"iana"},"application/vnd.ncd.reference":{source:"iana"},"application/vnd.nearst.inv+json":{source:"iana",compressible:!0},"application/vnd.nebumind.line":{source:"iana"},"application/vnd.nervana":{source:"iana"},"application/vnd.netfpx":{source:"iana"},"application/vnd.neurolanguage.nlu":{source:"iana",extensions:["nlu"]},"application/vnd.nimn":{source:"iana"},"application/vnd.nintendo.nitro.rom":{source:"iana"},"application/vnd.nintendo.snes.rom":{source:"iana"},"application/vnd.nitf":{source:"iana",extensions:["ntf","nitf"]},"application/vnd.noblenet-directory":{source:"iana",extensions:["nnd"]},"application/vnd.noblenet-sealer":{source:"iana",extensions:["nns"]},"application/vnd.noblenet-web":{source:"iana",extensions:["nnw"]},"application/vnd.nokia.catalogs":{source:"iana"},"application/vnd.nokia.conml+wbxml":{source:"iana"},"application/vnd.nokia.conml+xml":{source:"iana",compressible:!0},"application/vnd.nokia.iptv.config+xml":{source:"iana",compressible:!0},"application/vnd.nokia.isds-radio-presets":{source:"iana"},"application/vnd.nokia.landmark+wbxml":{source:"iana"},"application/vnd.nokia.landmark+xml":{source:"iana",compressible:!0},"application/vnd.nokia.landmarkcollection+xml":{source:"iana",compressible:!0},"application/vnd.nokia.n-gage.ac+xml":{source:"iana",compressible:!0,extensions:["ac"]},"application/vnd.nokia.n-gage.data":{source:"iana",extensions:["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{source:"iana",extensions:["n-gage"]},"application/vnd.nokia.ncd":{source:"iana"},"application/vnd.nokia.pcd+wbxml":{source:"iana"},"application/vnd.nokia.pcd+xml":{source:"iana",compressible:!0},"application/vnd.nokia.radio-preset":{source:"iana",extensions:["rpst"]},"application/vnd.nokia.radio-presets":{source:"iana",extensions:["rpss"]},"application/vnd.novadigm.edm":{source:"iana",extensions:["edm"]},"application/vnd.novadigm.edx":{source:"iana",extensions:["edx"]},"application/vnd.novadigm.ext":{source:"iana",extensions:["ext"]},"application/vnd.ntt-local.content-share":{source:"iana"},"application/vnd.ntt-local.file-transfer":{source:"iana"},"application/vnd.ntt-local.ogw_remote-access":{source:"iana"},"application/vnd.ntt-local.sip-ta_remote":{source:"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{source:"iana"},"application/vnd.oasis.opendocument.chart":{source:"iana",extensions:["odc"]},"application/vnd.oasis.opendocument.chart-template":{source:"iana",extensions:["otc"]},"application/vnd.oasis.opendocument.database":{source:"iana",extensions:["odb"]},"application/vnd.oasis.opendocument.formula":{source:"iana",extensions:["odf"]},"application/vnd.oasis.opendocument.formula-template":{source:"iana",extensions:["odft"]},"application/vnd.oasis.opendocument.graphics":{source:"iana",compressible:!1,extensions:["odg"]},"application/vnd.oasis.opendocument.graphics-template":{source:"iana",extensions:["otg"]},"application/vnd.oasis.opendocument.image":{source:"iana",extensions:["odi"]},"application/vnd.oasis.opendocument.image-template":{source:"iana",extensions:["oti"]},"application/vnd.oasis.opendocument.presentation":{source:"iana",compressible:!1,extensions:["odp"]},"application/vnd.oasis.opendocument.presentation-template":{source:"iana",extensions:["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{source:"iana",compressible:!1,extensions:["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{source:"iana",extensions:["ots"]},"application/vnd.oasis.opendocument.text":{source:"iana",compressible:!1,extensions:["odt"]},"application/vnd.oasis.opendocument.text-master":{source:"iana",extensions:["odm"]},"application/vnd.oasis.opendocument.text-template":{source:"iana",extensions:["ott"]},"application/vnd.oasis.opendocument.text-web":{source:"iana",extensions:["oth"]},"application/vnd.obn":{source:"iana"},"application/vnd.ocf+cbor":{source:"iana"},"application/vnd.oci.image.manifest.v1+json":{source:"iana",compressible:!0},"application/vnd.oftn.l10n+json":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessdownload+xml":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessstreaming+xml":{source:"iana",compressible:!0},"application/vnd.oipf.cspg-hexbinary":{source:"iana"},"application/vnd.oipf.dae.svg+xml":{source:"iana",compressible:!0},"application/vnd.oipf.dae.xhtml+xml":{source:"iana",compressible:!0},"application/vnd.oipf.mippvcontrolmessage+xml":{source:"iana",compressible:!0},"application/vnd.oipf.pae.gem":{source:"iana"},"application/vnd.oipf.spdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.oipf.spdlist+xml":{source:"iana",compressible:!0},"application/vnd.oipf.ueprofile+xml":{source:"iana",compressible:!0},"application/vnd.oipf.userprofile+xml":{source:"iana",compressible:!0},"application/vnd.olpc-sugar":{source:"iana",extensions:["xo"]},"application/vnd.oma-scws-config":{source:"iana"},"application/vnd.oma-scws-http-request":{source:"iana"},"application/vnd.oma-scws-http-response":{source:"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.drm-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.imd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.ltkm":{source:"iana"},"application/vnd.oma.bcast.notification+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.provisioningtrigger":{source:"iana"},"application/vnd.oma.bcast.sgboot":{source:"iana"},"application/vnd.oma.bcast.sgdd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sgdu":{source:"iana"},"application/vnd.oma.bcast.simple-symbol-container":{source:"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sprov+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.stkm":{source:"iana"},"application/vnd.oma.cab-address-book+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-feature-handler+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-pcc+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-subs-invite+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-user-prefs+xml":{source:"iana",compressible:!0},"application/vnd.oma.dcd":{source:"iana"},"application/vnd.oma.dcdc":{source:"iana"},"application/vnd.oma.dd2+xml":{source:"iana",compressible:!0,extensions:["dd2"]},"application/vnd.oma.drm.risd+xml":{source:"iana",compressible:!0},"application/vnd.oma.group-usage-list+xml":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+cbor":{source:"iana"},"application/vnd.oma.lwm2m+json":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+tlv":{source:"iana"},"application/vnd.oma.pal+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.detailed-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.final-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.groups+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.invocation-descriptor+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.optimized-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.push":{source:"iana"},"application/vnd.oma.scidm.messages+xml":{source:"iana",compressible:!0},"application/vnd.oma.xcap-directory+xml":{source:"iana",compressible:!0},"application/vnd.omads-email+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omads-file+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omads-folder+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omaloc-supl-init":{source:"iana"},"application/vnd.onepager":{source:"iana"},"application/vnd.onepagertamp":{source:"iana"},"application/vnd.onepagertamx":{source:"iana"},"application/vnd.onepagertat":{source:"iana"},"application/vnd.onepagertatp":{source:"iana"},"application/vnd.onepagertatx":{source:"iana"},"application/vnd.openblox.game+xml":{source:"iana",compressible:!0,extensions:["obgx"]},"application/vnd.openblox.game-binary":{source:"iana"},"application/vnd.openeye.oeb":{source:"iana"},"application/vnd.openofficeorg.extension":{source:"apache",extensions:["oxt"]},"application/vnd.openstreetmap.data+xml":{source:"iana",compressible:!0,extensions:["osm"]},"application/vnd.opentimestamps.ots":{source:"iana"},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawing+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{source:"iana",compressible:!1,extensions:["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slide":{source:"iana",extensions:["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{source:"iana",extensions:["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.template":{source:"iana",extensions:["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{source:"iana",compressible:!1,extensions:["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{source:"iana",extensions:["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.theme+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.vmldrawing":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{source:"iana",compressible:!1,extensions:["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{source:"iana",extensions:["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.core-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.relationships+xml":{source:"iana",compressible:!0},"application/vnd.oracle.resource+json":{source:"iana",compressible:!0},"application/vnd.orange.indata":{source:"iana"},"application/vnd.osa.netdeploy":{source:"iana"},"application/vnd.osgeo.mapguide.package":{source:"iana",extensions:["mgp"]},"application/vnd.osgi.bundle":{source:"iana"},"application/vnd.osgi.dp":{source:"iana",extensions:["dp"]},"application/vnd.osgi.subsystem":{source:"iana",extensions:["esa"]},"application/vnd.otps.ct-kip+xml":{source:"iana",compressible:!0},"application/vnd.oxli.countgraph":{source:"iana"},"application/vnd.pagerduty+json":{source:"iana",compressible:!0},"application/vnd.palm":{source:"iana",extensions:["pdb","pqa","oprc"]},"application/vnd.panoply":{source:"iana"},"application/vnd.paos.xml":{source:"iana"},"application/vnd.patentdive":{source:"iana"},"application/vnd.patientecommsdoc":{source:"iana"},"application/vnd.pawaafile":{source:"iana",extensions:["paw"]},"application/vnd.pcos":{source:"iana"},"application/vnd.pg.format":{source:"iana",extensions:["str"]},"application/vnd.pg.osasli":{source:"iana",extensions:["ei6"]},"application/vnd.piaccess.application-licence":{source:"iana"},"application/vnd.picsel":{source:"iana",extensions:["efif"]},"application/vnd.pmi.widget":{source:"iana",extensions:["wg"]},"application/vnd.poc.group-advertisement+xml":{source:"iana",compressible:!0},"application/vnd.pocketlearn":{source:"iana",extensions:["plf"]},"application/vnd.powerbuilder6":{source:"iana",extensions:["pbd"]},"application/vnd.powerbuilder6-s":{source:"iana"},"application/vnd.powerbuilder7":{source:"iana"},"application/vnd.powerbuilder7-s":{source:"iana"},"application/vnd.powerbuilder75":{source:"iana"},"application/vnd.powerbuilder75-s":{source:"iana"},"application/vnd.preminet":{source:"iana"},"application/vnd.previewsystems.box":{source:"iana",extensions:["box"]},"application/vnd.proteus.magazine":{source:"iana",extensions:["mgz"]},"application/vnd.psfs":{source:"iana"},"application/vnd.publishare-delta-tree":{source:"iana",extensions:["qps"]},"application/vnd.pvi.ptid1":{source:"iana",extensions:["ptid"]},"application/vnd.pwg-multiplexed":{source:"iana"},"application/vnd.pwg-xhtml-print+xml":{source:"iana",compressible:!0},"application/vnd.qualcomm.brew-app-res":{source:"iana"},"application/vnd.quarantainenet":{source:"iana"},"application/vnd.quark.quarkxpress":{source:"iana",extensions:["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{source:"iana"},"application/vnd.radisys.moml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conn+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-stream+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-base+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-detect+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-group+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-speech+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-transform+xml":{source:"iana",compressible:!0},"application/vnd.rainstor.data":{source:"iana"},"application/vnd.rapid":{source:"iana"},"application/vnd.rar":{source:"iana",extensions:["rar"]},"application/vnd.realvnc.bed":{source:"iana",extensions:["bed"]},"application/vnd.recordare.musicxml":{source:"iana",extensions:["mxl"]},"application/vnd.recordare.musicxml+xml":{source:"iana",compressible:!0,extensions:["musicxml"]},"application/vnd.renlearn.rlprint":{source:"iana"},"application/vnd.resilient.logic":{source:"iana"},"application/vnd.restful+json":{source:"iana",compressible:!0},"application/vnd.rig.cryptonote":{source:"iana",extensions:["cryptonote"]},"application/vnd.rim.cod":{source:"apache",extensions:["cod"]},"application/vnd.rn-realmedia":{source:"apache",extensions:["rm"]},"application/vnd.rn-realmedia-vbr":{source:"apache",extensions:["rmvb"]},"application/vnd.route66.link66+xml":{source:"iana",compressible:!0,extensions:["link66"]},"application/vnd.rs-274x":{source:"iana"},"application/vnd.ruckus.download":{source:"iana"},"application/vnd.s3sms":{source:"iana"},"application/vnd.sailingtracker.track":{source:"iana",extensions:["st"]},"application/vnd.sar":{source:"iana"},"application/vnd.sbm.cid":{source:"iana"},"application/vnd.sbm.mid2":{source:"iana"},"application/vnd.scribus":{source:"iana"},"application/vnd.sealed.3df":{source:"iana"},"application/vnd.sealed.csf":{source:"iana"},"application/vnd.sealed.doc":{source:"iana"},"application/vnd.sealed.eml":{source:"iana"},"application/vnd.sealed.mht":{source:"iana"},"application/vnd.sealed.net":{source:"iana"},"application/vnd.sealed.ppt":{source:"iana"},"application/vnd.sealed.tiff":{source:"iana"},"application/vnd.sealed.xls":{source:"iana"},"application/vnd.sealedmedia.softseal.html":{source:"iana"},"application/vnd.sealedmedia.softseal.pdf":{source:"iana"},"application/vnd.seemail":{source:"iana",extensions:["see"]},"application/vnd.seis+json":{source:"iana",compressible:!0},"application/vnd.sema":{source:"iana",extensions:["sema"]},"application/vnd.semd":{source:"iana",extensions:["semd"]},"application/vnd.semf":{source:"iana",extensions:["semf"]},"application/vnd.shade-save-file":{source:"iana"},"application/vnd.shana.informed.formdata":{source:"iana",extensions:["ifm"]},"application/vnd.shana.informed.formtemplate":{source:"iana",extensions:["itp"]},"application/vnd.shana.informed.interchange":{source:"iana",extensions:["iif"]},"application/vnd.shana.informed.package":{source:"iana",extensions:["ipk"]},"application/vnd.shootproof+json":{source:"iana",compressible:!0},"application/vnd.shopkick+json":{source:"iana",compressible:!0},"application/vnd.shp":{source:"iana"},"application/vnd.shx":{source:"iana"},"application/vnd.sigrok.session":{source:"iana"},"application/vnd.simtech-mindmapper":{source:"iana",extensions:["twd","twds"]},"application/vnd.siren+json":{source:"iana",compressible:!0},"application/vnd.smaf":{source:"iana",extensions:["mmf"]},"application/vnd.smart.notebook":{source:"iana"},"application/vnd.smart.teacher":{source:"iana",extensions:["teacher"]},"application/vnd.snesdev-page-table":{source:"iana"},"application/vnd.software602.filler.form+xml":{source:"iana",compressible:!0,extensions:["fo"]},"application/vnd.software602.filler.form-xml-zip":{source:"iana"},"application/vnd.solent.sdkm+xml":{source:"iana",compressible:!0,extensions:["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{source:"iana",extensions:["dxp"]},"application/vnd.spotfire.sfs":{source:"iana",extensions:["sfs"]},"application/vnd.sqlite3":{source:"iana"},"application/vnd.sss-cod":{source:"iana"},"application/vnd.sss-dtf":{source:"iana"},"application/vnd.sss-ntf":{source:"iana"},"application/vnd.stardivision.calc":{source:"apache",extensions:["sdc"]},"application/vnd.stardivision.draw":{source:"apache",extensions:["sda"]},"application/vnd.stardivision.impress":{source:"apache",extensions:["sdd"]},"application/vnd.stardivision.math":{source:"apache",extensions:["smf"]},"application/vnd.stardivision.writer":{source:"apache",extensions:["sdw","vor"]},"application/vnd.stardivision.writer-global":{source:"apache",extensions:["sgl"]},"application/vnd.stepmania.package":{source:"iana",extensions:["smzip"]},"application/vnd.stepmania.stepchart":{source:"iana",extensions:["sm"]},"application/vnd.street-stream":{source:"iana"},"application/vnd.sun.wadl+xml":{source:"iana",compressible:!0,extensions:["wadl"]},"application/vnd.sun.xml.calc":{source:"apache",extensions:["sxc"]},"application/vnd.sun.xml.calc.template":{source:"apache",extensions:["stc"]},"application/vnd.sun.xml.draw":{source:"apache",extensions:["sxd"]},"application/vnd.sun.xml.draw.template":{source:"apache",extensions:["std"]},"application/vnd.sun.xml.impress":{source:"apache",extensions:["sxi"]},"application/vnd.sun.xml.impress.template":{source:"apache",extensions:["sti"]},"application/vnd.sun.xml.math":{source:"apache",extensions:["sxm"]},"application/vnd.sun.xml.writer":{source:"apache",extensions:["sxw"]},"application/vnd.sun.xml.writer.global":{source:"apache",extensions:["sxg"]},"application/vnd.sun.xml.writer.template":{source:"apache",extensions:["stw"]},"application/vnd.sus-calendar":{source:"iana",extensions:["sus","susp"]},"application/vnd.svd":{source:"iana",extensions:["svd"]},"application/vnd.swiftview-ics":{source:"iana"},"application/vnd.sycle+xml":{source:"iana",compressible:!0},"application/vnd.syft+json":{source:"iana",compressible:!0},"application/vnd.symbian.install":{source:"apache",extensions:["sis","sisx"]},"application/vnd.syncml+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["xsm"]},"application/vnd.syncml.dm+wbxml":{source:"iana",charset:"UTF-8",extensions:["bdm"]},"application/vnd.syncml.dm+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["xdm"]},"application/vnd.syncml.dm.notification":{source:"iana"},"application/vnd.syncml.dmddf+wbxml":{source:"iana"},"application/vnd.syncml.dmddf+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{source:"iana"},"application/vnd.syncml.dmtnds+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.syncml.ds.notification":{source:"iana"},"application/vnd.tableschema+json":{source:"iana",compressible:!0},"application/vnd.tao.intent-module-archive":{source:"iana",extensions:["tao"]},"application/vnd.tcpdump.pcap":{source:"iana",extensions:["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{source:"iana",compressible:!0},"application/vnd.tmd.mediaflex.api+xml":{source:"iana",compressible:!0},"application/vnd.tml":{source:"iana"},"application/vnd.tmobile-livetv":{source:"iana",extensions:["tmo"]},"application/vnd.tri.onesource":{source:"iana"},"application/vnd.trid.tpt":{source:"iana",extensions:["tpt"]},"application/vnd.triscape.mxs":{source:"iana",extensions:["mxs"]},"application/vnd.trueapp":{source:"iana",extensions:["tra"]},"application/vnd.truedoc":{source:"iana"},"application/vnd.ubisoft.webplayer":{source:"iana"},"application/vnd.ufdl":{source:"iana",extensions:["ufd","ufdl"]},"application/vnd.uiq.theme":{source:"iana",extensions:["utz"]},"application/vnd.umajin":{source:"iana",extensions:["umj"]},"application/vnd.unity":{source:"iana",extensions:["unityweb"]},"application/vnd.uoml+xml":{source:"iana",compressible:!0,extensions:["uoml"]},"application/vnd.uplanet.alert":{source:"iana"},"application/vnd.uplanet.alert-wbxml":{source:"iana"},"application/vnd.uplanet.bearer-choice":{source:"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{source:"iana"},"application/vnd.uplanet.cacheop":{source:"iana"},"application/vnd.uplanet.cacheop-wbxml":{source:"iana"},"application/vnd.uplanet.channel":{source:"iana"},"application/vnd.uplanet.channel-wbxml":{source:"iana"},"application/vnd.uplanet.list":{source:"iana"},"application/vnd.uplanet.list-wbxml":{source:"iana"},"application/vnd.uplanet.listcmd":{source:"iana"},"application/vnd.uplanet.listcmd-wbxml":{source:"iana"},"application/vnd.uplanet.signal":{source:"iana"},"application/vnd.uri-map":{source:"iana"},"application/vnd.valve.source.material":{source:"iana"},"application/vnd.vcx":{source:"iana",extensions:["vcx"]},"application/vnd.vd-study":{source:"iana"},"application/vnd.vectorworks":{source:"iana"},"application/vnd.vel+json":{source:"iana",compressible:!0},"application/vnd.verimatrix.vcas":{source:"iana"},"application/vnd.veritone.aion+json":{source:"iana",compressible:!0},"application/vnd.veryant.thin":{source:"iana"},"application/vnd.ves.encrypted":{source:"iana"},"application/vnd.vidsoft.vidconference":{source:"iana"},"application/vnd.visio":{source:"iana",extensions:["vsd","vst","vss","vsw"]},"application/vnd.visionary":{source:"iana",extensions:["vis"]},"application/vnd.vividence.scriptfile":{source:"iana"},"application/vnd.vsf":{source:"iana",extensions:["vsf"]},"application/vnd.wap.sic":{source:"iana"},"application/vnd.wap.slc":{source:"iana"},"application/vnd.wap.wbxml":{source:"iana",charset:"UTF-8",extensions:["wbxml"]},"application/vnd.wap.wmlc":{source:"iana",extensions:["wmlc"]},"application/vnd.wap.wmlscriptc":{source:"iana",extensions:["wmlsc"]},"application/vnd.webturbo":{source:"iana",extensions:["wtb"]},"application/vnd.wfa.dpp":{source:"iana"},"application/vnd.wfa.p2p":{source:"iana"},"application/vnd.wfa.wsc":{source:"iana"},"application/vnd.windows.devicepairing":{source:"iana"},"application/vnd.wmc":{source:"iana"},"application/vnd.wmf.bootstrap":{source:"iana"},"application/vnd.wolfram.mathematica":{source:"iana"},"application/vnd.wolfram.mathematica.package":{source:"iana"},"application/vnd.wolfram.player":{source:"iana",extensions:["nbp"]},"application/vnd.wordperfect":{source:"iana",extensions:["wpd"]},"application/vnd.wqd":{source:"iana",extensions:["wqd"]},"application/vnd.wrq-hp3000-labelled":{source:"iana"},"application/vnd.wt.stf":{source:"iana",extensions:["stf"]},"application/vnd.wv.csp+wbxml":{source:"iana"},"application/vnd.wv.csp+xml":{source:"iana",compressible:!0},"application/vnd.wv.ssp+xml":{source:"iana",compressible:!0},"application/vnd.xacml+json":{source:"iana",compressible:!0},"application/vnd.xara":{source:"iana",extensions:["xar"]},"application/vnd.xfdl":{source:"iana",extensions:["xfdl"]},"application/vnd.xfdl.webform":{source:"iana"},"application/vnd.xmi+xml":{source:"iana",compressible:!0},"application/vnd.xmpie.cpkg":{source:"iana"},"application/vnd.xmpie.dpkg":{source:"iana"},"application/vnd.xmpie.plan":{source:"iana"},"application/vnd.xmpie.ppkg":{source:"iana"},"application/vnd.xmpie.xlim":{source:"iana"},"application/vnd.yamaha.hv-dic":{source:"iana",extensions:["hvd"]},"application/vnd.yamaha.hv-script":{source:"iana",extensions:["hvs"]},"application/vnd.yamaha.hv-voice":{source:"iana",extensions:["hvp"]},"application/vnd.yamaha.openscoreformat":{source:"iana",extensions:["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{source:"iana",compressible:!0,extensions:["osfpvg"]},"application/vnd.yamaha.remote-setup":{source:"iana"},"application/vnd.yamaha.smaf-audio":{source:"iana",extensions:["saf"]},"application/vnd.yamaha.smaf-phrase":{source:"iana",extensions:["spf"]},"application/vnd.yamaha.through-ngn":{source:"iana"},"application/vnd.yamaha.tunnel-udpencap":{source:"iana"},"application/vnd.yaoweme":{source:"iana"},"application/vnd.yellowriver-custom-menu":{source:"iana",extensions:["cmp"]},"application/vnd.youtube.yt":{source:"iana"},"application/vnd.zul":{source:"iana",extensions:["zir","zirz"]},"application/vnd.zzazz.deck+xml":{source:"iana",compressible:!0,extensions:["zaz"]},"application/voicexml+xml":{source:"iana",compressible:!0,extensions:["vxml"]},"application/voucher-cms+json":{source:"iana",compressible:!0},"application/vq-rtcpxr":{source:"iana"},"application/wasm":{source:"iana",compressible:!0,extensions:["wasm"]},"application/watcherinfo+xml":{source:"iana",compressible:!0,extensions:["wif"]},"application/webpush-options+json":{source:"iana",compressible:!0},"application/whoispp-query":{source:"iana"},"application/whoispp-response":{source:"iana"},"application/widget":{source:"iana",extensions:["wgt"]},"application/winhlp":{source:"apache",extensions:["hlp"]},"application/wita":{source:"iana"},"application/wordperfect5.1":{source:"iana"},"application/wsdl+xml":{source:"iana",compressible:!0,extensions:["wsdl"]},"application/wspolicy+xml":{source:"iana",compressible:!0,extensions:["wspolicy"]},"application/x-7z-compressed":{source:"apache",compressible:!1,extensions:["7z"]},"application/x-abiword":{source:"apache",extensions:["abw"]},"application/x-ace-compressed":{source:"apache",extensions:["ace"]},"application/x-amf":{source:"apache"},"application/x-apple-diskimage":{source:"apache",extensions:["dmg"]},"application/x-arj":{compressible:!1,extensions:["arj"]},"application/x-authorware-bin":{source:"apache",extensions:["aab","x32","u32","vox"]},"application/x-authorware-map":{source:"apache",extensions:["aam"]},"application/x-authorware-seg":{source:"apache",extensions:["aas"]},"application/x-bcpio":{source:"apache",extensions:["bcpio"]},"application/x-bdoc":{compressible:!1,extensions:["bdoc"]},"application/x-bittorrent":{source:"apache",extensions:["torrent"]},"application/x-blorb":{source:"apache",extensions:["blb","blorb"]},"application/x-bzip":{source:"apache",compressible:!1,extensions:["bz"]},"application/x-bzip2":{source:"apache",compressible:!1,extensions:["bz2","boz"]},"application/x-cbr":{source:"apache",extensions:["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{source:"apache",extensions:["vcd"]},"application/x-cfs-compressed":{source:"apache",extensions:["cfs"]},"application/x-chat":{source:"apache",extensions:["chat"]},"application/x-chess-pgn":{source:"apache",extensions:["pgn"]},"application/x-chrome-extension":{extensions:["crx"]},"application/x-cocoa":{source:"nginx",extensions:["cco"]},"application/x-compress":{source:"apache"},"application/x-conference":{source:"apache",extensions:["nsc"]},"application/x-cpio":{source:"apache",extensions:["cpio"]},"application/x-csh":{source:"apache",extensions:["csh"]},"application/x-deb":{compressible:!1},"application/x-debian-package":{source:"apache",extensions:["deb","udeb"]},"application/x-dgc-compressed":{source:"apache",extensions:["dgc"]},"application/x-director":{source:"apache",extensions:["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{source:"apache",extensions:["wad"]},"application/x-dtbncx+xml":{source:"apache",compressible:!0,extensions:["ncx"]},"application/x-dtbook+xml":{source:"apache",compressible:!0,extensions:["dtb"]},"application/x-dtbresource+xml":{source:"apache",compressible:!0,extensions:["res"]},"application/x-dvi":{source:"apache",compressible:!1,extensions:["dvi"]},"application/x-envoy":{source:"apache",extensions:["evy"]},"application/x-eva":{source:"apache",extensions:["eva"]},"application/x-font-bdf":{source:"apache",extensions:["bdf"]},"application/x-font-dos":{source:"apache"},"application/x-font-framemaker":{source:"apache"},"application/x-font-ghostscript":{source:"apache",extensions:["gsf"]},"application/x-font-libgrx":{source:"apache"},"application/x-font-linux-psf":{source:"apache",extensions:["psf"]},"application/x-font-pcf":{source:"apache",extensions:["pcf"]},"application/x-font-snf":{source:"apache",extensions:["snf"]},"application/x-font-speedo":{source:"apache"},"application/x-font-sunos-news":{source:"apache"},"application/x-font-type1":{source:"apache",extensions:["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{source:"apache"},"application/x-freearc":{source:"apache",extensions:["arc"]},"application/x-futuresplash":{source:"apache",extensions:["spl"]},"application/x-gca-compressed":{source:"apache",extensions:["gca"]},"application/x-glulx":{source:"apache",extensions:["ulx"]},"application/x-gnumeric":{source:"apache",extensions:["gnumeric"]},"application/x-gramps-xml":{source:"apache",extensions:["gramps"]},"application/x-gtar":{source:"apache",extensions:["gtar"]},"application/x-gzip":{source:"apache"},"application/x-hdf":{source:"apache",extensions:["hdf"]},"application/x-httpd-php":{compressible:!0,extensions:["php"]},"application/x-install-instructions":{source:"apache",extensions:["install"]},"application/x-iso9660-image":{source:"apache",extensions:["iso"]},"application/x-iwork-keynote-sffkey":{extensions:["key"]},"application/x-iwork-numbers-sffnumbers":{extensions:["numbers"]},"application/x-iwork-pages-sffpages":{extensions:["pages"]},"application/x-java-archive-diff":{source:"nginx",extensions:["jardiff"]},"application/x-java-jnlp-file":{source:"apache",compressible:!1,extensions:["jnlp"]},"application/x-javascript":{compressible:!0},"application/x-keepass2":{extensions:["kdbx"]},"application/x-latex":{source:"apache",compressible:!1,extensions:["latex"]},"application/x-lua-bytecode":{extensions:["luac"]},"application/x-lzh-compressed":{source:"apache",extensions:["lzh","lha"]},"application/x-makeself":{source:"nginx",extensions:["run"]},"application/x-mie":{source:"apache",extensions:["mie"]},"application/x-mobipocket-ebook":{source:"apache",extensions:["prc","mobi"]},"application/x-mpegurl":{compressible:!1},"application/x-ms-application":{source:"apache",extensions:["application"]},"application/x-ms-shortcut":{source:"apache",extensions:["lnk"]},"application/x-ms-wmd":{source:"apache",extensions:["wmd"]},"application/x-ms-wmz":{source:"apache",extensions:["wmz"]},"application/x-ms-xbap":{source:"apache",extensions:["xbap"]},"application/x-msaccess":{source:"apache",extensions:["mdb"]},"application/x-msbinder":{source:"apache",extensions:["obd"]},"application/x-mscardfile":{source:"apache",extensions:["crd"]},"application/x-msclip":{source:"apache",extensions:["clp"]},"application/x-msdos-program":{extensions:["exe"]},"application/x-msdownload":{source:"apache",extensions:["exe","dll","com","bat","msi"]},"application/x-msmediaview":{source:"apache",extensions:["mvb","m13","m14"]},"application/x-msmetafile":{source:"apache",extensions:["wmf","wmz","emf","emz"]},"application/x-msmoney":{source:"apache",extensions:["mny"]},"application/x-mspublisher":{source:"apache",extensions:["pub"]},"application/x-msschedule":{source:"apache",extensions:["scd"]},"application/x-msterminal":{source:"apache",extensions:["trm"]},"application/x-mswrite":{source:"apache",extensions:["wri"]},"application/x-netcdf":{source:"apache",extensions:["nc","cdf"]},"application/x-ns-proxy-autoconfig":{compressible:!0,extensions:["pac"]},"application/x-nzb":{source:"apache",extensions:["nzb"]},"application/x-perl":{source:"nginx",extensions:["pl","pm"]},"application/x-pilot":{source:"nginx",extensions:["prc","pdb"]},"application/x-pkcs12":{source:"apache",compressible:!1,extensions:["p12","pfx"]},"application/x-pkcs7-certificates":{source:"apache",extensions:["p7b","spc"]},"application/x-pkcs7-certreqresp":{source:"apache",extensions:["p7r"]},"application/x-pki-message":{source:"iana"},"application/x-rar-compressed":{source:"apache",compressible:!1,extensions:["rar"]},"application/x-redhat-package-manager":{source:"nginx",extensions:["rpm"]},"application/x-research-info-systems":{source:"apache",extensions:["ris"]},"application/x-sea":{source:"nginx",extensions:["sea"]},"application/x-sh":{source:"apache",compressible:!0,extensions:["sh"]},"application/x-shar":{source:"apache",extensions:["shar"]},"application/x-shockwave-flash":{source:"apache",compressible:!1,extensions:["swf"]},"application/x-silverlight-app":{source:"apache",extensions:["xap"]},"application/x-sql":{source:"apache",extensions:["sql"]},"application/x-stuffit":{source:"apache",compressible:!1,extensions:["sit"]},"application/x-stuffitx":{source:"apache",extensions:["sitx"]},"application/x-subrip":{source:"apache",extensions:["srt"]},"application/x-sv4cpio":{source:"apache",extensions:["sv4cpio"]},"application/x-sv4crc":{source:"apache",extensions:["sv4crc"]},"application/x-t3vm-image":{source:"apache",extensions:["t3"]},"application/x-tads":{source:"apache",extensions:["gam"]},"application/x-tar":{source:"apache",compressible:!0,extensions:["tar"]},"application/x-tcl":{source:"apache",extensions:["tcl","tk"]},"application/x-tex":{source:"apache",extensions:["tex"]},"application/x-tex-tfm":{source:"apache",extensions:["tfm"]},"application/x-texinfo":{source:"apache",extensions:["texinfo","texi"]},"application/x-tgif":{source:"apache",extensions:["obj"]},"application/x-ustar":{source:"apache",extensions:["ustar"]},"application/x-virtualbox-hdd":{compressible:!0,extensions:["hdd"]},"application/x-virtualbox-ova":{compressible:!0,extensions:["ova"]},"application/x-virtualbox-ovf":{compressible:!0,extensions:["ovf"]},"application/x-virtualbox-vbox":{compressible:!0,extensions:["vbox"]},"application/x-virtualbox-vbox-extpack":{compressible:!1,extensions:["vbox-extpack"]},"application/x-virtualbox-vdi":{compressible:!0,extensions:["vdi"]},"application/x-virtualbox-vhd":{compressible:!0,extensions:["vhd"]},"application/x-virtualbox-vmdk":{compressible:!0,extensions:["vmdk"]},"application/x-wais-source":{source:"apache",extensions:["src"]},"application/x-web-app-manifest+json":{compressible:!0,extensions:["webapp"]},"application/x-www-form-urlencoded":{source:"iana",compressible:!0},"application/x-x509-ca-cert":{source:"iana",extensions:["der","crt","pem"]},"application/x-x509-ca-ra-cert":{source:"iana"},"application/x-x509-next-ca-cert":{source:"iana"},"application/x-xfig":{source:"apache",extensions:["fig"]},"application/x-xliff+xml":{source:"apache",compressible:!0,extensions:["xlf"]},"application/x-xpinstall":{source:"apache",compressible:!1,extensions:["xpi"]},"application/x-xz":{source:"apache",extensions:["xz"]},"application/x-zmachine":{source:"apache",extensions:["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{source:"iana"},"application/xacml+xml":{source:"iana",compressible:!0},"application/xaml+xml":{source:"apache",compressible:!0,extensions:["xaml"]},"application/xcap-att+xml":{source:"iana",compressible:!0,extensions:["xav"]},"application/xcap-caps+xml":{source:"iana",compressible:!0,extensions:["xca"]},"application/xcap-diff+xml":{source:"iana",compressible:!0,extensions:["xdf"]},"application/xcap-el+xml":{source:"iana",compressible:!0,extensions:["xel"]},"application/xcap-error+xml":{source:"iana",compressible:!0},"application/xcap-ns+xml":{source:"iana",compressible:!0,extensions:["xns"]},"application/xcon-conference-info+xml":{source:"iana",compressible:!0},"application/xcon-conference-info-diff+xml":{source:"iana",compressible:!0},"application/xenc+xml":{source:"iana",compressible:!0,extensions:["xenc"]},"application/xhtml+xml":{source:"iana",compressible:!0,extensions:["xhtml","xht"]},"application/xhtml-voice+xml":{source:"apache",compressible:!0},"application/xliff+xml":{source:"iana",compressible:!0,extensions:["xlf"]},"application/xml":{source:"iana",compressible:!0,extensions:["xml","xsl","xsd","rng"]},"application/xml-dtd":{source:"iana",compressible:!0,extensions:["dtd"]},"application/xml-external-parsed-entity":{source:"iana"},"application/xml-patch+xml":{source:"iana",compressible:!0},"application/xmpp+xml":{source:"iana",compressible:!0},"application/xop+xml":{source:"iana",compressible:!0,extensions:["xop"]},"application/xproc+xml":{source:"apache",compressible:!0,extensions:["xpl"]},"application/xslt+xml":{source:"iana",compressible:!0,extensions:["xsl","xslt"]},"application/xspf+xml":{source:"apache",compressible:!0,extensions:["xspf"]},"application/xv+xml":{source:"iana",compressible:!0,extensions:["mxml","xhvml","xvml","xvm"]},"application/yang":{source:"iana",extensions:["yang"]},"application/yang-data+json":{source:"iana",compressible:!0},"application/yang-data+xml":{source:"iana",compressible:!0},"application/yang-patch+json":{source:"iana",compressible:!0},"application/yang-patch+xml":{source:"iana",compressible:!0},"application/yin+xml":{source:"iana",compressible:!0,extensions:["yin"]},"application/zip":{source:"iana",compressible:!1,extensions:["zip"]},"application/zlib":{source:"iana"},"application/zstd":{source:"iana"},"audio/1d-interleaved-parityfec":{source:"iana"},"audio/32kadpcm":{source:"iana"},"audio/3gpp":{source:"iana",compressible:!1,extensions:["3gpp"]},"audio/3gpp2":{source:"iana"},"audio/aac":{source:"iana"},"audio/ac3":{source:"iana"},"audio/adpcm":{source:"apache",extensions:["adp"]},"audio/amr":{source:"iana",extensions:["amr"]},"audio/amr-wb":{source:"iana"},"audio/amr-wb+":{source:"iana"},"audio/aptx":{source:"iana"},"audio/asc":{source:"iana"},"audio/atrac-advanced-lossless":{source:"iana"},"audio/atrac-x":{source:"iana"},"audio/atrac3":{source:"iana"},"audio/basic":{source:"iana",compressible:!1,extensions:["au","snd"]},"audio/bv16":{source:"iana"},"audio/bv32":{source:"iana"},"audio/clearmode":{source:"iana"},"audio/cn":{source:"iana"},"audio/dat12":{source:"iana"},"audio/dls":{source:"iana"},"audio/dsr-es201108":{source:"iana"},"audio/dsr-es202050":{source:"iana"},"audio/dsr-es202211":{source:"iana"},"audio/dsr-es202212":{source:"iana"},"audio/dv":{source:"iana"},"audio/dvi4":{source:"iana"},"audio/eac3":{source:"iana"},"audio/encaprtp":{source:"iana"},"audio/evrc":{source:"iana"},"audio/evrc-qcp":{source:"iana"},"audio/evrc0":{source:"iana"},"audio/evrc1":{source:"iana"},"audio/evrcb":{source:"iana"},"audio/evrcb0":{source:"iana"},"audio/evrcb1":{source:"iana"},"audio/evrcnw":{source:"iana"},"audio/evrcnw0":{source:"iana"},"audio/evrcnw1":{source:"iana"},"audio/evrcwb":{source:"iana"},"audio/evrcwb0":{source:"iana"},"audio/evrcwb1":{source:"iana"},"audio/evs":{source:"iana"},"audio/flexfec":{source:"iana"},"audio/fwdred":{source:"iana"},"audio/g711-0":{source:"iana"},"audio/g719":{source:"iana"},"audio/g722":{source:"iana"},"audio/g7221":{source:"iana"},"audio/g723":{source:"iana"},"audio/g726-16":{source:"iana"},"audio/g726-24":{source:"iana"},"audio/g726-32":{source:"iana"},"audio/g726-40":{source:"iana"},"audio/g728":{source:"iana"},"audio/g729":{source:"iana"},"audio/g7291":{source:"iana"},"audio/g729d":{source:"iana"},"audio/g729e":{source:"iana"},"audio/gsm":{source:"iana"},"audio/gsm-efr":{source:"iana"},"audio/gsm-hr-08":{source:"iana"},"audio/ilbc":{source:"iana"},"audio/ip-mr_v2.5":{source:"iana"},"audio/isac":{source:"apache"},"audio/l16":{source:"iana"},"audio/l20":{source:"iana"},"audio/l24":{source:"iana",compressible:!1},"audio/l8":{source:"iana"},"audio/lpc":{source:"iana"},"audio/melp":{source:"iana"},"audio/melp1200":{source:"iana"},"audio/melp2400":{source:"iana"},"audio/melp600":{source:"iana"},"audio/mhas":{source:"iana"},"audio/midi":{source:"apache",extensions:["mid","midi","kar","rmi"]},"audio/mobile-xmf":{source:"iana",extensions:["mxmf"]},"audio/mp3":{compressible:!1,extensions:["mp3"]},"audio/mp4":{source:"iana",compressible:!1,extensions:["m4a","mp4a"]},"audio/mp4a-latm":{source:"iana"},"audio/mpa":{source:"iana"},"audio/mpa-robust":{source:"iana"},"audio/mpeg":{source:"iana",compressible:!1,extensions:["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{source:"iana"},"audio/musepack":{source:"apache"},"audio/ogg":{source:"iana",compressible:!1,extensions:["oga","ogg","spx","opus"]},"audio/opus":{source:"iana"},"audio/parityfec":{source:"iana"},"audio/pcma":{source:"iana"},"audio/pcma-wb":{source:"iana"},"audio/pcmu":{source:"iana"},"audio/pcmu-wb":{source:"iana"},"audio/prs.sid":{source:"iana"},"audio/qcelp":{source:"iana"},"audio/raptorfec":{source:"iana"},"audio/red":{source:"iana"},"audio/rtp-enc-aescm128":{source:"iana"},"audio/rtp-midi":{source:"iana"},"audio/rtploopback":{source:"iana"},"audio/rtx":{source:"iana"},"audio/s3m":{source:"apache",extensions:["s3m"]},"audio/scip":{source:"iana"},"audio/silk":{source:"apache",extensions:["sil"]},"audio/smv":{source:"iana"},"audio/smv-qcp":{source:"iana"},"audio/smv0":{source:"iana"},"audio/sofa":{source:"iana"},"audio/sp-midi":{source:"iana"},"audio/speex":{source:"iana"},"audio/t140c":{source:"iana"},"audio/t38":{source:"iana"},"audio/telephone-event":{source:"iana"},"audio/tetra_acelp":{source:"iana"},"audio/tetra_acelp_bb":{source:"iana"},"audio/tone":{source:"iana"},"audio/tsvcis":{source:"iana"},"audio/uemclip":{source:"iana"},"audio/ulpfec":{source:"iana"},"audio/usac":{source:"iana"},"audio/vdvi":{source:"iana"},"audio/vmr-wb":{source:"iana"},"audio/vnd.3gpp.iufp":{source:"iana"},"audio/vnd.4sb":{source:"iana"},"audio/vnd.audiokoz":{source:"iana"},"audio/vnd.celp":{source:"iana"},"audio/vnd.cisco.nse":{source:"iana"},"audio/vnd.cmles.radio-events":{source:"iana"},"audio/vnd.cns.anp1":{source:"iana"},"audio/vnd.cns.inf1":{source:"iana"},"audio/vnd.dece.audio":{source:"iana",extensions:["uva","uvva"]},"audio/vnd.digital-winds":{source:"iana",extensions:["eol"]},"audio/vnd.dlna.adts":{source:"iana"},"audio/vnd.dolby.heaac.1":{source:"iana"},"audio/vnd.dolby.heaac.2":{source:"iana"},"audio/vnd.dolby.mlp":{source:"iana"},"audio/vnd.dolby.mps":{source:"iana"},"audio/vnd.dolby.pl2":{source:"iana"},"audio/vnd.dolby.pl2x":{source:"iana"},"audio/vnd.dolby.pl2z":{source:"iana"},"audio/vnd.dolby.pulse.1":{source:"iana"},"audio/vnd.dra":{source:"iana",extensions:["dra"]},"audio/vnd.dts":{source:"iana",extensions:["dts"]},"audio/vnd.dts.hd":{source:"iana",extensions:["dtshd"]},"audio/vnd.dts.uhd":{source:"iana"},"audio/vnd.dvb.file":{source:"iana"},"audio/vnd.everad.plj":{source:"iana"},"audio/vnd.hns.audio":{source:"iana"},"audio/vnd.lucent.voice":{source:"iana",extensions:["lvp"]},"audio/vnd.ms-playready.media.pya":{source:"iana",extensions:["pya"]},"audio/vnd.nokia.mobile-xmf":{source:"iana"},"audio/vnd.nortel.vbk":{source:"iana"},"audio/vnd.nuera.ecelp4800":{source:"iana",extensions:["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{source:"iana",extensions:["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{source:"iana",extensions:["ecelp9600"]},"audio/vnd.octel.sbc":{source:"iana"},"audio/vnd.presonus.multitrack":{source:"iana"},"audio/vnd.qcelp":{source:"iana"},"audio/vnd.rhetorex.32kadpcm":{source:"iana"},"audio/vnd.rip":{source:"iana",extensions:["rip"]},"audio/vnd.rn-realaudio":{compressible:!1},"audio/vnd.sealedmedia.softseal.mpeg":{source:"iana"},"audio/vnd.vmx.cvsd":{source:"iana"},"audio/vnd.wave":{compressible:!1},"audio/vorbis":{source:"iana",compressible:!1},"audio/vorbis-config":{source:"iana"},"audio/wav":{compressible:!1,extensions:["wav"]},"audio/wave":{compressible:!1,extensions:["wav"]},"audio/webm":{source:"apache",compressible:!1,extensions:["weba"]},"audio/x-aac":{source:"apache",compressible:!1,extensions:["aac"]},"audio/x-aiff":{source:"apache",extensions:["aif","aiff","aifc"]},"audio/x-caf":{source:"apache",compressible:!1,extensions:["caf"]},"audio/x-flac":{source:"apache",extensions:["flac"]},"audio/x-m4a":{source:"nginx",extensions:["m4a"]},"audio/x-matroska":{source:"apache",extensions:["mka"]},"audio/x-mpegurl":{source:"apache",extensions:["m3u"]},"audio/x-ms-wax":{source:"apache",extensions:["wax"]},"audio/x-ms-wma":{source:"apache",extensions:["wma"]},"audio/x-pn-realaudio":{source:"apache",extensions:["ram","ra"]},"audio/x-pn-realaudio-plugin":{source:"apache",extensions:["rmp"]},"audio/x-realaudio":{source:"nginx",extensions:["ra"]},"audio/x-tta":{source:"apache"},"audio/x-wav":{source:"apache",extensions:["wav"]},"audio/xm":{source:"apache",extensions:["xm"]},"chemical/x-cdx":{source:"apache",extensions:["cdx"]},"chemical/x-cif":{source:"apache",extensions:["cif"]},"chemical/x-cmdf":{source:"apache",extensions:["cmdf"]},"chemical/x-cml":{source:"apache",extensions:["cml"]},"chemical/x-csml":{source:"apache",extensions:["csml"]},"chemical/x-pdb":{source:"apache"},"chemical/x-xyz":{source:"apache",extensions:["xyz"]},"font/collection":{source:"iana",extensions:["ttc"]},"font/otf":{source:"iana",compressible:!0,extensions:["otf"]},"font/sfnt":{source:"iana"},"font/ttf":{source:"iana",compressible:!0,extensions:["ttf"]},"font/woff":{source:"iana",extensions:["woff"]},"font/woff2":{source:"iana",extensions:["woff2"]},"image/aces":{source:"iana",extensions:["exr"]},"image/apng":{compressible:!1,extensions:["apng"]},"image/avci":{source:"iana",extensions:["avci"]},"image/avcs":{source:"iana",extensions:["avcs"]},"image/avif":{source:"iana",compressible:!1,extensions:["avif"]},"image/bmp":{source:"iana",compressible:!0,extensions:["bmp"]},"image/cgm":{source:"iana",extensions:["cgm"]},"image/dicom-rle":{source:"iana",extensions:["drle"]},"image/emf":{source:"iana",extensions:["emf"]},"image/fits":{source:"iana",extensions:["fits"]},"image/g3fax":{source:"iana",extensions:["g3"]},"image/gif":{source:"iana",compressible:!1,extensions:["gif"]},"image/heic":{source:"iana",extensions:["heic"]},"image/heic-sequence":{source:"iana",extensions:["heics"]},"image/heif":{source:"iana",extensions:["heif"]},"image/heif-sequence":{source:"iana",extensions:["heifs"]},"image/hej2k":{source:"iana",extensions:["hej2"]},"image/hsj2":{source:"iana",extensions:["hsj2"]},"image/ief":{source:"iana",extensions:["ief"]},"image/jls":{source:"iana",extensions:["jls"]},"image/jp2":{source:"iana",compressible:!1,extensions:["jp2","jpg2"]},"image/jpeg":{source:"iana",compressible:!1,extensions:["jpeg","jpg","jpe"]},"image/jph":{source:"iana",extensions:["jph"]},"image/jphc":{source:"iana",extensions:["jhc"]},"image/jpm":{source:"iana",compressible:!1,extensions:["jpm"]},"image/jpx":{source:"iana",compressible:!1,extensions:["jpx","jpf"]},"image/jxr":{source:"iana",extensions:["jxr"]},"image/jxra":{source:"iana",extensions:["jxra"]},"image/jxrs":{source:"iana",extensions:["jxrs"]},"image/jxs":{source:"iana",extensions:["jxs"]},"image/jxsc":{source:"iana",extensions:["jxsc"]},"image/jxsi":{source:"iana",extensions:["jxsi"]},"image/jxss":{source:"iana",extensions:["jxss"]},"image/ktx":{source:"iana",extensions:["ktx"]},"image/ktx2":{source:"iana",extensions:["ktx2"]},"image/naplps":{source:"iana"},"image/pjpeg":{compressible:!1},"image/png":{source:"iana",compressible:!1,extensions:["png"]},"image/prs.btif":{source:"iana",extensions:["btif"]},"image/prs.pti":{source:"iana",extensions:["pti"]},"image/pwg-raster":{source:"iana"},"image/sgi":{source:"apache",extensions:["sgi"]},"image/svg+xml":{source:"iana",compressible:!0,extensions:["svg","svgz"]},"image/t38":{source:"iana",extensions:["t38"]},"image/tiff":{source:"iana",compressible:!1,extensions:["tif","tiff"]},"image/tiff-fx":{source:"iana",extensions:["tfx"]},"image/vnd.adobe.photoshop":{source:"iana",compressible:!0,extensions:["psd"]},"image/vnd.airzip.accelerator.azv":{source:"iana",extensions:["azv"]},"image/vnd.cns.inf2":{source:"iana"},"image/vnd.dece.graphic":{source:"iana",extensions:["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{source:"iana",extensions:["djvu","djv"]},"image/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"image/vnd.dwg":{source:"iana",extensions:["dwg"]},"image/vnd.dxf":{source:"iana",extensions:["dxf"]},"image/vnd.fastbidsheet":{source:"iana",extensions:["fbs"]},"image/vnd.fpx":{source:"iana",extensions:["fpx"]},"image/vnd.fst":{source:"iana",extensions:["fst"]},"image/vnd.fujixerox.edmics-mmr":{source:"iana",extensions:["mmr"]},"image/vnd.fujixerox.edmics-rlc":{source:"iana",extensions:["rlc"]},"image/vnd.globalgraphics.pgb":{source:"iana"},"image/vnd.microsoft.icon":{source:"iana",compressible:!0,extensions:["ico"]},"image/vnd.mix":{source:"iana"},"image/vnd.mozilla.apng":{source:"iana"},"image/vnd.ms-dds":{compressible:!0,extensions:["dds"]},"image/vnd.ms-modi":{source:"iana",extensions:["mdi"]},"image/vnd.ms-photo":{source:"apache",extensions:["wdp"]},"image/vnd.net-fpx":{source:"iana",extensions:["npx"]},"image/vnd.pco.b16":{source:"iana",extensions:["b16"]},"image/vnd.radiance":{source:"iana"},"image/vnd.sealed.png":{source:"iana"},"image/vnd.sealedmedia.softseal.gif":{source:"iana"},"image/vnd.sealedmedia.softseal.jpg":{source:"iana"},"image/vnd.svf":{source:"iana"},"image/vnd.tencent.tap":{source:"iana",extensions:["tap"]},"image/vnd.valve.source.texture":{source:"iana",extensions:["vtf"]},"image/vnd.wap.wbmp":{source:"iana",extensions:["wbmp"]},"image/vnd.xiff":{source:"iana",extensions:["xif"]},"image/vnd.zbrush.pcx":{source:"iana",extensions:["pcx"]},"image/webp":{source:"apache",extensions:["webp"]},"image/wmf":{source:"iana",extensions:["wmf"]},"image/x-3ds":{source:"apache",extensions:["3ds"]},"image/x-cmu-raster":{source:"apache",extensions:["ras"]},"image/x-cmx":{source:"apache",extensions:["cmx"]},"image/x-freehand":{source:"apache",extensions:["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{source:"apache",compressible:!0,extensions:["ico"]},"image/x-jng":{source:"nginx",extensions:["jng"]},"image/x-mrsid-image":{source:"apache",extensions:["sid"]},"image/x-ms-bmp":{source:"nginx",compressible:!0,extensions:["bmp"]},"image/x-pcx":{source:"apache",extensions:["pcx"]},"image/x-pict":{source:"apache",extensions:["pic","pct"]},"image/x-portable-anymap":{source:"apache",extensions:["pnm"]},"image/x-portable-bitmap":{source:"apache",extensions:["pbm"]},"image/x-portable-graymap":{source:"apache",extensions:["pgm"]},"image/x-portable-pixmap":{source:"apache",extensions:["ppm"]},"image/x-rgb":{source:"apache",extensions:["rgb"]},"image/x-tga":{source:"apache",extensions:["tga"]},"image/x-xbitmap":{source:"apache",extensions:["xbm"]},"image/x-xcf":{compressible:!1},"image/x-xpixmap":{source:"apache",extensions:["xpm"]},"image/x-xwindowdump":{source:"apache",extensions:["xwd"]},"message/cpim":{source:"iana"},"message/delivery-status":{source:"iana"},"message/disposition-notification":{source:"iana",extensions:["disposition-notification"]},"message/external-body":{source:"iana"},"message/feedback-report":{source:"iana"},"message/global":{source:"iana",extensions:["u8msg"]},"message/global-delivery-status":{source:"iana",extensions:["u8dsn"]},"message/global-disposition-notification":{source:"iana",extensions:["u8mdn"]},"message/global-headers":{source:"iana",extensions:["u8hdr"]},"message/http":{source:"iana",compressible:!1},"message/imdn+xml":{source:"iana",compressible:!0},"message/news":{source:"iana"},"message/partial":{source:"iana",compressible:!1},"message/rfc822":{source:"iana",compressible:!0,extensions:["eml","mime"]},"message/s-http":{source:"iana"},"message/sip":{source:"iana"},"message/sipfrag":{source:"iana"},"message/tracking-status":{source:"iana"},"message/vnd.si.simp":{source:"iana"},"message/vnd.wfa.wsc":{source:"iana",extensions:["wsc"]},"model/3mf":{source:"iana",extensions:["3mf"]},"model/e57":{source:"iana"},"model/gltf+json":{source:"iana",compressible:!0,extensions:["gltf"]},"model/gltf-binary":{source:"iana",compressible:!0,extensions:["glb"]},"model/iges":{source:"iana",compressible:!1,extensions:["igs","iges"]},"model/mesh":{source:"iana",compressible:!1,extensions:["msh","mesh","silo"]},"model/mtl":{source:"iana",extensions:["mtl"]},"model/obj":{source:"iana",extensions:["obj"]},"model/step":{source:"iana"},"model/step+xml":{source:"iana",compressible:!0,extensions:["stpx"]},"model/step+zip":{source:"iana",compressible:!1,extensions:["stpz"]},"model/step-xml+zip":{source:"iana",compressible:!1,extensions:["stpxz"]},"model/stl":{source:"iana",extensions:["stl"]},"model/vnd.collada+xml":{source:"iana",compressible:!0,extensions:["dae"]},"model/vnd.dwf":{source:"iana",extensions:["dwf"]},"model/vnd.flatland.3dml":{source:"iana"},"model/vnd.gdl":{source:"iana",extensions:["gdl"]},"model/vnd.gs-gdl":{source:"apache"},"model/vnd.gs.gdl":{source:"iana"},"model/vnd.gtw":{source:"iana",extensions:["gtw"]},"model/vnd.moml+xml":{source:"iana",compressible:!0},"model/vnd.mts":{source:"iana",extensions:["mts"]},"model/vnd.opengex":{source:"iana",extensions:["ogex"]},"model/vnd.parasolid.transmit.binary":{source:"iana",extensions:["x_b"]},"model/vnd.parasolid.transmit.text":{source:"iana",extensions:["x_t"]},"model/vnd.pytha.pyox":{source:"iana"},"model/vnd.rosette.annotated-data-model":{source:"iana"},"model/vnd.sap.vds":{source:"iana",extensions:["vds"]},"model/vnd.usdz+zip":{source:"iana",compressible:!1,extensions:["usdz"]},"model/vnd.valve.source.compiled-map":{source:"iana",extensions:["bsp"]},"model/vnd.vtu":{source:"iana",extensions:["vtu"]},"model/vrml":{source:"iana",compressible:!1,extensions:["wrl","vrml"]},"model/x3d+binary":{source:"apache",compressible:!1,extensions:["x3db","x3dbz"]},"model/x3d+fastinfoset":{source:"iana",extensions:["x3db"]},"model/x3d+vrml":{source:"apache",compressible:!1,extensions:["x3dv","x3dvz"]},"model/x3d+xml":{source:"iana",compressible:!0,extensions:["x3d","x3dz"]},"model/x3d-vrml":{source:"iana",extensions:["x3dv"]},"multipart/alternative":{source:"iana",compressible:!1},"multipart/appledouble":{source:"iana"},"multipart/byteranges":{source:"iana"},"multipart/digest":{source:"iana"},"multipart/encrypted":{source:"iana",compressible:!1},"multipart/form-data":{source:"iana",compressible:!1},"multipart/header-set":{source:"iana"},"multipart/mixed":{source:"iana"},"multipart/multilingual":{source:"iana"},"multipart/parallel":{source:"iana"},"multipart/related":{source:"iana",compressible:!1},"multipart/report":{source:"iana"},"multipart/signed":{source:"iana",compressible:!1},"multipart/vnd.bint.med-plus":{source:"iana"},"multipart/voice-message":{source:"iana"},"multipart/x-mixed-replace":{source:"iana"},"text/1d-interleaved-parityfec":{source:"iana"},"text/cache-manifest":{source:"iana",compressible:!0,extensions:["appcache","manifest"]},"text/calendar":{source:"iana",extensions:["ics","ifb"]},"text/calender":{compressible:!0},"text/cmd":{compressible:!0},"text/coffeescript":{extensions:["coffee","litcoffee"]},"text/cql":{source:"iana"},"text/cql-expression":{source:"iana"},"text/cql-identifier":{source:"iana"},"text/css":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["css"]},"text/csv":{source:"iana",compressible:!0,extensions:["csv"]},"text/csv-schema":{source:"iana"},"text/directory":{source:"iana"},"text/dns":{source:"iana"},"text/ecmascript":{source:"iana"},"text/encaprtp":{source:"iana"},"text/enriched":{source:"iana"},"text/fhirpath":{source:"iana"},"text/flexfec":{source:"iana"},"text/fwdred":{source:"iana"},"text/gff3":{source:"iana"},"text/grammar-ref-list":{source:"iana"},"text/html":{source:"iana",compressible:!0,extensions:["html","htm","shtml"]},"text/jade":{extensions:["jade"]},"text/javascript":{source:"iana",compressible:!0},"text/jcr-cnd":{source:"iana"},"text/jsx":{compressible:!0,extensions:["jsx"]},"text/less":{compressible:!0,extensions:["less"]},"text/markdown":{source:"iana",compressible:!0,extensions:["markdown","md"]},"text/mathml":{source:"nginx",extensions:["mml"]},"text/mdx":{compressible:!0,extensions:["mdx"]},"text/mizar":{source:"iana"},"text/n3":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["n3"]},"text/parameters":{source:"iana",charset:"UTF-8"},"text/parityfec":{source:"iana"},"text/plain":{source:"iana",compressible:!0,extensions:["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{source:"iana",charset:"UTF-8"},"text/prs.fallenstein.rst":{source:"iana"},"text/prs.lines.tag":{source:"iana",extensions:["dsc"]},"text/prs.prop.logic":{source:"iana"},"text/raptorfec":{source:"iana"},"text/red":{source:"iana"},"text/rfc822-headers":{source:"iana"},"text/richtext":{source:"iana",compressible:!0,extensions:["rtx"]},"text/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"text/rtp-enc-aescm128":{source:"iana"},"text/rtploopback":{source:"iana"},"text/rtx":{source:"iana"},"text/sgml":{source:"iana",extensions:["sgml","sgm"]},"text/shaclc":{source:"iana"},"text/shex":{source:"iana",extensions:["shex"]},"text/slim":{extensions:["slim","slm"]},"text/spdx":{source:"iana",extensions:["spdx"]},"text/strings":{source:"iana"},"text/stylus":{extensions:["stylus","styl"]},"text/t140":{source:"iana"},"text/tab-separated-values":{source:"iana",compressible:!0,extensions:["tsv"]},"text/troff":{source:"iana",extensions:["t","tr","roff","man","me","ms"]},"text/turtle":{source:"iana",charset:"UTF-8",extensions:["ttl"]},"text/ulpfec":{source:"iana"},"text/uri-list":{source:"iana",compressible:!0,extensions:["uri","uris","urls"]},"text/vcard":{source:"iana",compressible:!0,extensions:["vcard"]},"text/vnd.a":{source:"iana"},"text/vnd.abc":{source:"iana"},"text/vnd.ascii-art":{source:"iana"},"text/vnd.curl":{source:"iana",extensions:["curl"]},"text/vnd.curl.dcurl":{source:"apache",extensions:["dcurl"]},"text/vnd.curl.mcurl":{source:"apache",extensions:["mcurl"]},"text/vnd.curl.scurl":{source:"apache",extensions:["scurl"]},"text/vnd.debian.copyright":{source:"iana",charset:"UTF-8"},"text/vnd.dmclientscript":{source:"iana"},"text/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"text/vnd.esmertec.theme-descriptor":{source:"iana",charset:"UTF-8"},"text/vnd.familysearch.gedcom":{source:"iana",extensions:["ged"]},"text/vnd.ficlab.flt":{source:"iana"},"text/vnd.fly":{source:"iana",extensions:["fly"]},"text/vnd.fmi.flexstor":{source:"iana",extensions:["flx"]},"text/vnd.gml":{source:"iana"},"text/vnd.graphviz":{source:"iana",extensions:["gv"]},"text/vnd.hans":{source:"iana"},"text/vnd.hgl":{source:"iana"},"text/vnd.in3d.3dml":{source:"iana",extensions:["3dml"]},"text/vnd.in3d.spot":{source:"iana",extensions:["spot"]},"text/vnd.iptc.newsml":{source:"iana"},"text/vnd.iptc.nitf":{source:"iana"},"text/vnd.latex-z":{source:"iana"},"text/vnd.motorola.reflex":{source:"iana"},"text/vnd.ms-mediapackage":{source:"iana"},"text/vnd.net2phone.commcenter.command":{source:"iana"},"text/vnd.radisys.msml-basic-layout":{source:"iana"},"text/vnd.senx.warpscript":{source:"iana"},"text/vnd.si.uricatalogue":{source:"iana"},"text/vnd.sosi":{source:"iana"},"text/vnd.sun.j2me.app-descriptor":{source:"iana",charset:"UTF-8",extensions:["jad"]},"text/vnd.trolltech.linguist":{source:"iana",charset:"UTF-8"},"text/vnd.wap.si":{source:"iana"},"text/vnd.wap.sl":{source:"iana"},"text/vnd.wap.wml":{source:"iana",extensions:["wml"]},"text/vnd.wap.wmlscript":{source:"iana",extensions:["wmls"]},"text/vtt":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["vtt"]},"text/x-asm":{source:"apache",extensions:["s","asm"]},"text/x-c":{source:"apache",extensions:["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{source:"nginx",extensions:["htc"]},"text/x-fortran":{source:"apache",extensions:["f","for","f77","f90"]},"text/x-gwt-rpc":{compressible:!0},"text/x-handlebars-template":{extensions:["hbs"]},"text/x-java-source":{source:"apache",extensions:["java"]},"text/x-jquery-tmpl":{compressible:!0},"text/x-lua":{extensions:["lua"]},"text/x-markdown":{compressible:!0,extensions:["mkd"]},"text/x-nfo":{source:"apache",extensions:["nfo"]},"text/x-opml":{source:"apache",extensions:["opml"]},"text/x-org":{compressible:!0,extensions:["org"]},"text/x-pascal":{source:"apache",extensions:["p","pas"]},"text/x-processing":{compressible:!0,extensions:["pde"]},"text/x-sass":{extensions:["sass"]},"text/x-scss":{extensions:["scss"]},"text/x-setext":{source:"apache",extensions:["etx"]},"text/x-sfv":{source:"apache",extensions:["sfv"]},"text/x-suse-ymp":{compressible:!0,extensions:["ymp"]},"text/x-uuencode":{source:"apache",extensions:["uu"]},"text/x-vcalendar":{source:"apache",extensions:["vcs"]},"text/x-vcard":{source:"apache",extensions:["vcf"]},"text/xml":{source:"iana",compressible:!0,extensions:["xml"]},"text/xml-external-parsed-entity":{source:"iana"},"text/yaml":{compressible:!0,extensions:["yaml","yml"]},"video/1d-interleaved-parityfec":{source:"iana"},"video/3gpp":{source:"iana",extensions:["3gp","3gpp"]},"video/3gpp-tt":{source:"iana"},"video/3gpp2":{source:"iana",extensions:["3g2"]},"video/av1":{source:"iana"},"video/bmpeg":{source:"iana"},"video/bt656":{source:"iana"},"video/celb":{source:"iana"},"video/dv":{source:"iana"},"video/encaprtp":{source:"iana"},"video/ffv1":{source:"iana"},"video/flexfec":{source:"iana"},"video/h261":{source:"iana",extensions:["h261"]},"video/h263":{source:"iana",extensions:["h263"]},"video/h263-1998":{source:"iana"},"video/h263-2000":{source:"iana"},"video/h264":{source:"iana",extensions:["h264"]},"video/h264-rcdo":{source:"iana"},"video/h264-svc":{source:"iana"},"video/h265":{source:"iana"},"video/iso.segment":{source:"iana",extensions:["m4s"]},"video/jpeg":{source:"iana",extensions:["jpgv"]},"video/jpeg2000":{source:"iana"},"video/jpm":{source:"apache",extensions:["jpm","jpgm"]},"video/jxsv":{source:"iana"},"video/mj2":{source:"iana",extensions:["mj2","mjp2"]},"video/mp1s":{source:"iana"},"video/mp2p":{source:"iana"},"video/mp2t":{source:"iana",extensions:["ts"]},"video/mp4":{source:"iana",compressible:!1,extensions:["mp4","mp4v","mpg4"]},"video/mp4v-es":{source:"iana"},"video/mpeg":{source:"iana",compressible:!1,extensions:["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{source:"iana"},"video/mpv":{source:"iana"},"video/nv":{source:"iana"},"video/ogg":{source:"iana",compressible:!1,extensions:["ogv"]},"video/parityfec":{source:"iana"},"video/pointer":{source:"iana"},"video/quicktime":{source:"iana",compressible:!1,extensions:["qt","mov"]},"video/raptorfec":{source:"iana"},"video/raw":{source:"iana"},"video/rtp-enc-aescm128":{source:"iana"},"video/rtploopback":{source:"iana"},"video/rtx":{source:"iana"},"video/scip":{source:"iana"},"video/smpte291":{source:"iana"},"video/smpte292m":{source:"iana"},"video/ulpfec":{source:"iana"},"video/vc1":{source:"iana"},"video/vc2":{source:"iana"},"video/vnd.cctv":{source:"iana"},"video/vnd.dece.hd":{source:"iana",extensions:["uvh","uvvh"]},"video/vnd.dece.mobile":{source:"iana",extensions:["uvm","uvvm"]},"video/vnd.dece.mp4":{source:"iana"},"video/vnd.dece.pd":{source:"iana",extensions:["uvp","uvvp"]},"video/vnd.dece.sd":{source:"iana",extensions:["uvs","uvvs"]},"video/vnd.dece.video":{source:"iana",extensions:["uvv","uvvv"]},"video/vnd.directv.mpeg":{source:"iana"},"video/vnd.directv.mpeg-tts":{source:"iana"},"video/vnd.dlna.mpeg-tts":{source:"iana"},"video/vnd.dvb.file":{source:"iana",extensions:["dvb"]},"video/vnd.fvt":{source:"iana",extensions:["fvt"]},"video/vnd.hns.video":{source:"iana"},"video/vnd.iptvforum.1dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.1dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.2dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.2dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.ttsavc":{source:"iana"},"video/vnd.iptvforum.ttsmpeg2":{source:"iana"},"video/vnd.motorola.video":{source:"iana"},"video/vnd.motorola.videop":{source:"iana"},"video/vnd.mpegurl":{source:"iana",extensions:["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{source:"iana",extensions:["pyv"]},"video/vnd.nokia.interleaved-multimedia":{source:"iana"},"video/vnd.nokia.mp4vr":{source:"iana"},"video/vnd.nokia.videovoip":{source:"iana"},"video/vnd.objectvideo":{source:"iana"},"video/vnd.radgamettools.bink":{source:"iana"},"video/vnd.radgamettools.smacker":{source:"iana"},"video/vnd.sealed.mpeg1":{source:"iana"},"video/vnd.sealed.mpeg4":{source:"iana"},"video/vnd.sealed.swf":{source:"iana"},"video/vnd.sealedmedia.softseal.mov":{source:"iana"},"video/vnd.uvvu.mp4":{source:"iana",extensions:["uvu","uvvu"]},"video/vnd.vivo":{source:"iana",extensions:["viv"]},"video/vnd.youtube.yt":{source:"iana"},"video/vp8":{source:"iana"},"video/vp9":{source:"iana"},"video/webm":{source:"apache",compressible:!1,extensions:["webm"]},"video/x-f4v":{source:"apache",extensions:["f4v"]},"video/x-fli":{source:"apache",extensions:["fli"]},"video/x-flv":{source:"apache",compressible:!1,extensions:["flv"]},"video/x-m4v":{source:"apache",extensions:["m4v"]},"video/x-matroska":{source:"apache",compressible:!1,extensions:["mkv","mk3d","mks"]},"video/x-mng":{source:"apache",extensions:["mng"]},"video/x-ms-asf":{source:"apache",extensions:["asf","asx"]},"video/x-ms-vob":{source:"apache",extensions:["vob"]},"video/x-ms-wm":{source:"apache",extensions:["wm"]},"video/x-ms-wmv":{source:"apache",compressible:!1,extensions:["wmv"]},"video/x-ms-wmx":{source:"apache",extensions:["wmx"]},"video/x-ms-wvx":{source:"apache",extensions:["wvx"]},"video/x-msvideo":{source:"apache",extensions:["avi"]},"video/x-sgi-movie":{source:"apache",extensions:["movie"]},"video/x-smv":{source:"apache",extensions:["smv"]},"x-conference/x-cooltalk":{source:"apache",extensions:["ice"]},"x-shader/x-fragment":{compressible:!0},"x-shader/x-vertex":{compressible:!0}}});var Hh=k((R2,zh)=>{"use strict";zh.exports=$h()});var Xh=k(We=>{"use strict";var Pn=Hh(),tC=require("path").extname,Gh=/^\s*([^;\s]*)(?:;|\s|$)/,iC=/^text\//i;We.charset=Vh;We.charsets={lookup:Vh};We.contentType=rC;We.extension=nC;We.extensions=Object.create(null);We.lookup=sC;We.types=Object.create(null);oC(We.extensions,We.types);function Vh(e){if(!e||typeof e!="string")return!1;var t=Gh.exec(e),i=t&&Pn[t[1].toLowerCase()];return i&&i.charset?i.charset:t&&iC.test(t[1])?"UTF-8":!1}function rC(e){if(!e||typeof e!="string")return!1;var t=e.indexOf("/")===-1?We.lookup(e):e;if(!t)return!1;if(t.indexOf("charset")===-1){var i=We.charset(t);i&&(t+="; charset="+i.toLowerCase())}return t}function nC(e){if(!e||typeof e!="string")return!1;var t=Gh.exec(e),i=t&&We.extensions[t[1].toLowerCase()];return!i||!i.length?!1:i[0]}function sC(e){if(!e||typeof e!="string")return!1;var t=tC("x."+e).toLowerCase().substr(1);return t&&We.types[t]||!1}function oC(e,t){var i=["nginx","apache",void 0,"iana"];Object.keys(Pn).forEach(function(n){var s=Pn[n],o=s.extensions;if(!(!o||!o.length)){e[n]=o;for(var a=0;a<o.length;a++){var c=o[a];if(t[c]){var u=i.indexOf(Pn[t[c]].source),f=i.indexOf(s.source);if(t[c]!=="application/octet-stream"&&(u>f||u===f&&t[c].substr(0,12)==="application/"))continue}t[c]=n}}})}});var Wh=k((F2,Yh)=>{"use strict";Yh.exports=aC;function aC(e){var t=typeof setImmediate=="function"?setImmediate:typeof process=="object"&&typeof process.nextTick=="function"?process.nextTick:null;t?t(e):setTimeout(e,0)}});var Ia=k((j2,Jh)=>{"use strict";var Kh=Wh();Jh.exports=cC;function cC(e){var t=!1;return Kh(function(){t=!0}),function(r,n){t?e(r,n):Kh(function(){e(r,n)})}}});var Na=k((M2,Zh)=>{"use strict";Zh.exports=uC;function uC(e){Object.keys(e.jobs).forEach(lC.bind(e)),e.jobs={}}function lC(e){typeof this.jobs[e]=="function"&&this.jobs[e]()}});var La=k((q2,em)=>{"use strict";var Qh=Ia(),pC=Na();em.exports=dC;function dC(e,t,i,r){var n=i.keyedList?i.keyedList[i.index]:i.index;i.jobs[n]=fC(t,n,e[n],function(s,o){n in i.jobs&&(delete i.jobs[n],s?pC(i):i.results[n]=o,r(s,i.results))})}function fC(e,t,i,r){var n;return e.length==2?n=e(i,Qh(r)):n=e(i,t,Qh(r)),n}});var ka=k((B2,tm)=>{"use strict";tm.exports=hC;function hC(e,t){var i=!Array.isArray(e),r={index:0,keyedList:i||t?Object.keys(e):null,jobs:{},results:i?{}:[],size:i?Object.keys(e).length:e.length};return t&&r.keyedList.sort(i?t:function(n,s){return t(e[n],e[s])}),r}});var Ra=k((U2,im)=>{"use strict";var mC=Na(),gC=Ia();im.exports=xC;function xC(e){Object.keys(this.jobs).length&&(this.index=this.size,mC(this),gC(e)(null,this.results))}});var nm=k(($2,rm)=>{"use strict";var vC=La(),yC=ka(),bC=Ra();rm.exports=wC;function wC(e,t,i){for(var r=yC(e);r.index<(r.keyedList||e).length;)vC(e,t,r,function(n,s){if(n){i(n,s);return}if(Object.keys(r.jobs).length===0){i(null,r.results);return}}),r.index++;return bC.bind(r,i)}});var Pa=k((z2,Fn)=>{"use strict";var sm=La(),EC=ka(),_C=Ra();Fn.exports=TC;Fn.exports.ascending=om;Fn.exports.descending=SC;function TC(e,t,i,r){var n=EC(e,i);return sm(e,t,n,function s(o,a){if(o){r(o,a);return}if(n.index++,n.index<(n.keyedList||e).length){sm(e,t,n,s);return}r(null,n.results)}),_C.bind(n,r)}function om(e,t){return e<t?-1:e>t?1:0}function SC(e,t){return-1*om(e,t)}});var cm=k((H2,am)=>{"use strict";var CC=Pa();am.exports=OC;function OC(e,t,i){return CC(e,t,null,i)}});var lm=k((G2,um)=>{"use strict";um.exports={parallel:nm(),serial:cm(),serialOrdered:Pa()}});var dm=k((V2,pm)=>{"use strict";pm.exports=function(e,t){return Object.keys(t).forEach(function(i){e[i]=e[i]||t[i]}),e}});var mm=k((X2,hm)=>{"use strict";var qa=Uh(),fm=require("util"),Fa=require("path"),AC=require("http"),DC=require("https"),IC=require("url").parse,NC=require("fs"),LC=require("stream").Stream,ja=Xh(),kC=lm(),Ma=dm();hm.exports=Q;fm.inherits(Q,qa);function Q(e){if(!(this instanceof Q))return new Q(e);this._overheadLength=0,this._valueLength=0,this._valuesToMeasure=[],qa.call(this),e=e||{};for(var t in e)this[t]=e[t]}Q.LINE_BREAK=`\r
`;Q.DEFAULT_CONTENT_TYPE="application/octet-stream";Q.prototype.append=function(e,t,i){i=i||{},typeof i=="string"&&(i={filename:i});var r=qa.prototype.append.bind(this);if(typeof t=="number"&&(t=""+t),fm.isArray(t)){this._error(new Error("Arrays are not supported."));return}var n=this._multiPartHeader(e,t,i),s=this._multiPartFooter();r(n),r(t),r(s),this._trackLength(n,t,i)};Q.prototype._trackLength=function(e,t,i){var r=0;i.knownLength!=null?r+=+i.knownLength:Buffer.isBuffer(t)?r=t.length:typeof t=="string"&&(r=Buffer.byteLength(t)),this._valueLength+=r,this._overheadLength+=Buffer.byteLength(e)+Q.LINE_BREAK.length,!(!t||!t.path&&!(t.readable&&t.hasOwnProperty("httpVersion"))&&!(t instanceof LC))&&(i.knownLength||this._valuesToMeasure.push(t))};Q.prototype._lengthRetriever=function(e,t){e.hasOwnProperty("fd")?e.end!=null&&e.end!=1/0&&e.start!=null?t(null,e.end+1-(e.start?e.start:0)):NC.stat(e.path,function(i,r){var n;if(i){t(i);return}n=r.size-(e.start?e.start:0),t(null,n)}):e.hasOwnProperty("httpVersion")?t(null,+e.headers["content-length"]):e.hasOwnProperty("httpModule")?(e.on("response",function(i){e.pause(),t(null,+i.headers["content-length"])}),e.resume()):t("Unknown stream")};Q.prototype._multiPartHeader=function(e,t,i){if(typeof i.header=="string")return i.header;var r=this._getContentDisposition(t,i),n=this._getContentType(t,i),s="",o={"Content-Disposition":["form-data",'name="'+e+'"'].concat(r||[]),"Content-Type":[].concat(n||[])};typeof i.header=="object"&&Ma(o,i.header);var a;for(var c in o)o.hasOwnProperty(c)&&(a=o[c],a!=null&&(Array.isArray(a)||(a=[a]),a.length&&(s+=c+": "+a.join("; ")+Q.LINE_BREAK)));return"--"+this.getBoundary()+Q.LINE_BREAK+s+Q.LINE_BREAK};Q.prototype._getContentDisposition=function(e,t){var i,r;return typeof t.filepath=="string"?i=Fa.normalize(t.filepath).replace(/\\/g,"/"):t.filename||e.name||e.path?i=Fa.basename(t.filename||e.name||e.path):e.readable&&e.hasOwnProperty("httpVersion")&&(i=Fa.basename(e.client._httpMessage.path||"")),i&&(r='filename="'+i+'"'),r};Q.prototype._getContentType=function(e,t){var i=t.contentType;return!i&&e.name&&(i=ja.lookup(e.name)),!i&&e.path&&(i=ja.lookup(e.path)),!i&&e.readable&&e.hasOwnProperty("httpVersion")&&(i=e.headers["content-type"]),!i&&(t.filepath||t.filename)&&(i=ja.lookup(t.filepath||t.filename)),!i&&typeof e=="object"&&(i=Q.DEFAULT_CONTENT_TYPE),i};Q.prototype._multiPartFooter=function(){return function(e){var t=Q.LINE_BREAK,i=this._streams.length===0;i&&(t+=this._lastBoundary()),e(t)}.bind(this)};Q.prototype._lastBoundary=function(){return"--"+this.getBoundary()+"--"+Q.LINE_BREAK};Q.prototype.getHeaders=function(e){var t,i={"content-type":"multipart/form-data; boundary="+this.getBoundary()};for(t in e)e.hasOwnProperty(t)&&(i[t.toLowerCase()]=e[t]);return i};Q.prototype.setBoundary=function(e){this._boundary=e};Q.prototype.getBoundary=function(){return this._boundary||this._generateBoundary(),this._boundary};Q.prototype.getBuffer=function(){for(var e=new Buffer.alloc(0),t=this.getBoundary(),i=0,r=this._streams.length;i<r;i++)typeof this._streams[i]!="function"&&(Buffer.isBuffer(this._streams[i])?e=Buffer.concat([e,this._streams[i]]):e=Buffer.concat([e,Buffer.from(this._streams[i])]),(typeof this._streams[i]!="string"||this._streams[i].substring(2,t.length+2)!==t)&&(e=Buffer.concat([e,Buffer.from(Q.LINE_BREAK)])));return Buffer.concat([e,Buffer.from(this._lastBoundary())])};Q.prototype._generateBoundary=function(){for(var e="--------------------------",t=0;t<24;t++)e+=Math.floor(Math.random()*10).toString(16);this._boundary=e};Q.prototype.getLengthSync=function(){var e=this._overheadLength+this._valueLength;return this._streams.length&&(e+=this._lastBoundary().length),this.hasKnownLength()||this._error(new Error("Cannot calculate proper length in synchronous way.")),e};Q.prototype.hasKnownLength=function(){var e=!0;return this._valuesToMeasure.length&&(e=!1),e};Q.prototype.getLength=function(e){var t=this._overheadLength+this._valueLength;if(this._streams.length&&(t+=this._lastBoundary().length),!this._valuesToMeasure.length){process.nextTick(e.bind(this,null,t));return}kC.parallel(this._valuesToMeasure,this._lengthRetriever,function(i,r){if(i){e(i);return}r.forEach(function(n){t+=n}),e(null,t)})};Q.prototype.submit=function(e,t){var i,r,n={method:"post"};return typeof e=="string"?(e=IC(e),r=Ma({port:e.port,path:e.pathname,host:e.hostname,protocol:e.protocol},n)):(r=Ma(e,n),r.port||(r.port=r.protocol=="https:"?443:80)),r.headers=this.getHeaders(e.headers),r.protocol=="https:"?i=DC.request(r):i=AC.request(r),this.getLength(function(s,o){if(s&&s!=="Unknown stream"){this._error(s);return}if(o&&i.setHeader("Content-Length",o),this.pipe(i),t){var a,c=function(u,f){return i.removeListener("error",c),i.removeListener("response",a),t.call(this,u,f)};a=c.bind(this,null),i.on("error",c),i.on("response",a)}}.bind(this)),i};Q.prototype._error=function(e){this.error||(this.error=e,this.pause(),this.emit("error",e))};Q.prototype.toString=function(){return"[object FormData]"}});var Im=k(Dm=>{"use strict";var KC=require("url").parse,JC={ftp:21,gopher:70,http:80,https:443,ws:80,wss:443},ZC=String.prototype.endsWith||function(e){return e.length<=this.length&&this.indexOf(e,this.length-e.length)!==-1};function QC(e){var t=typeof e=="string"?KC(e):e||{},i=t.protocol,r=t.host,n=t.port;if(typeof r!="string"||!r||typeof i!="string"||(i=i.split(":",1)[0],r=r.replace(/:\d*$/,""),n=parseInt(n)||JC[i]||0,!eO(r,n)))return"";var s=Vi("npm_config_"+i+"_proxy")||Vi(i+"_proxy")||Vi("npm_config_proxy")||Vi("all_proxy");return s&&s.indexOf("://")===-1&&(s=i+"://"+s),s}function eO(e,t){var i=(Vi("npm_config_no_proxy")||Vi("no_proxy")).toLowerCase();return i?i==="*"?!1:i.split(/[,\s]/).every(function(r){if(!r)return!0;var n=r.match(/^(.+):(\d+)$/),s=n?n[1]:r,o=n?parseInt(n[2]):0;return o&&o!==t?!0:/^[.*]/.test(s)?(s.charAt(0)==="*"&&(s=s.slice(1)),!ZC.call(e,s)):e!==s}):!0}function Vi(e){return process.env[e.toLowerCase()]||process.env[e.toUpperCase()]||""}Dm.getProxyForUrl=QC});var Lm=k((YF,Nm)=>{"use strict";var Xi=1e3,Yi=Xi*60,Wi=Yi*60,gi=Wi*24,tO=gi*7,iO=gi*365.25;Nm.exports=function(e,t){t=t||{};var i=typeof e;if(i==="string"&&e.length>0)return rO(e);if(i==="number"&&isFinite(e))return t.long?sO(e):nO(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))};function rO(e){if(e=String(e),!(e.length>100)){var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(t){var i=parseFloat(t[1]),r=(t[2]||"ms").toLowerCase();switch(r){case"years":case"year":case"yrs":case"yr":case"y":return i*iO;case"weeks":case"week":case"w":return i*tO;case"days":case"day":case"d":return i*gi;case"hours":case"hour":case"hrs":case"hr":case"h":return i*Wi;case"minutes":case"minute":case"mins":case"min":case"m":return i*Yi;case"seconds":case"second":case"secs":case"sec":case"s":return i*Xi;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return i;default:return}}}}function nO(e){var t=Math.abs(e);return t>=gi?Math.round(e/gi)+"d":t>=Wi?Math.round(e/Wi)+"h":t>=Yi?Math.round(e/Yi)+"m":t>=Xi?Math.round(e/Xi)+"s":e+"ms"}function sO(e){var t=Math.abs(e);return t>=gi?Bn(e,t,gi,"day"):t>=Wi?Bn(e,t,Wi,"hour"):t>=Yi?Bn(e,t,Yi,"minute"):t>=Xi?Bn(e,t,Xi,"second"):e+" ms"}function Bn(e,t,i,r){var n=t>=i*1.5;return Math.round(e/i)+" "+r+(n?"s":"")}});var Ka=k((WF,km)=>{"use strict";function oO(e){i.debug=i,i.default=i,i.coerce=c,i.disable=s,i.enable=n,i.enabled=o,i.humanize=Lm(),i.destroy=u,Object.keys(e).forEach(f=>{i[f]=e[f]}),i.names=[],i.skips=[],i.formatters={};function t(f){let g=0;for(let x=0;x<f.length;x++)g=(g<<5)-g+f.charCodeAt(x),g|=0;return i.colors[Math.abs(g)%i.colors.length]}i.selectColor=t;function i(f){let g,x=null,l,m;function v(...w){if(!v.enabled)return;let _=v,E=Number(new Date),p=E-(g||E);_.diff=p,_.prev=g,_.curr=E,g=E,w[0]=i.coerce(w[0]),typeof w[0]!="string"&&w.unshift("%O");let d=0;w[0]=w[0].replace(/%([a-zA-Z%])/g,(b,O)=>{if(b==="%%")return"%";d++;let A=i.formatters[O];if(typeof A=="function"){let D=w[d];b=A.call(_,D),w.splice(d,1),d--}return b}),i.formatArgs.call(_,w),(_.log||i.log).apply(_,w)}return v.namespace=f,v.useColors=i.useColors(),v.color=i.selectColor(f),v.extend=r,v.destroy=i.destroy,Object.defineProperty(v,"enabled",{enumerable:!0,configurable:!1,get:()=>x!==null?x:(l!==i.namespaces&&(l=i.namespaces,m=i.enabled(f)),m),set:w=>{x=w}}),typeof i.init=="function"&&i.init(v),v}function r(f,g){let x=i(this.namespace+(typeof g>"u"?":":g)+f);return x.log=this.log,x}function n(f){i.save(f),i.namespaces=f,i.names=[],i.skips=[];let g,x=(typeof f=="string"?f:"").split(/[\s,]+/),l=x.length;for(g=0;g<l;g++)x[g]&&(f=x[g].replace(/\*/g,".*?"),f[0]==="-"?i.skips.push(new RegExp("^"+f.slice(1)+"$")):i.names.push(new RegExp("^"+f+"$")))}function s(){let f=[...i.names.map(a),...i.skips.map(a).map(g=>"-"+g)].join(",");return i.enable(""),f}function o(f){if(f[f.length-1]==="*")return!0;let g,x;for(g=0,x=i.skips.length;g<x;g++)if(i.skips[g].test(f))return!1;for(g=0,x=i.names.length;g<x;g++)if(i.names[g].test(f))return!0;return!1}function a(f){return f.toString().substring(2,f.toString().length-2).replace(/\.\*\?$/,"*")}function c(f){return f instanceof Error?f.stack||f.message:f}function u(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return i.enable(i.load()),i}km.exports=oO});var Rm=k((rt,Un)=>{"use strict";rt.formatArgs=cO;rt.save=uO;rt.load=lO;rt.useColors=aO;rt.storage=pO();rt.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})();rt.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function aO(){return typeof window<"u"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs)?!0:typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)?!1:typeof document<"u"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window<"u"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function cO(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+Un.exports.humanize(this.diff),!this.useColors)return;let t="color: "+this.color;e.splice(1,0,t,"color: inherit");let i=0,r=0;e[0].replace(/%[a-zA-Z%]/g,n=>{n!=="%%"&&(i++,n==="%c"&&(r=i))}),e.splice(r,0,t)}rt.log=console.debug||console.log||(()=>{});function uO(e){try{e?rt.storage.setItem("debug",e):rt.storage.removeItem("debug")}catch{}}function lO(){let e;try{e=rt.storage.getItem("debug")}catch{}return!e&&typeof process<"u"&&"env"in process&&(e=process.env.DEBUG),e}function pO(){try{return localStorage}catch{}}Un.exports=Ka()(rt);var{formatters:dO}=Un.exports;dO.j=function(e){try{return JSON.stringify(e)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}});var Fm=k((KF,Pm)=>{"use strict";Pm.exports=(e,t=process.argv)=>{let i=e.startsWith("-")?"":e.length===1?"-":"--",r=t.indexOf(i+e),n=t.indexOf("--");return r!==-1&&(n===-1||r<n)}});var qm=k((JF,Mm)=>{"use strict";var fO=require("os"),jm=require("tty"),lt=Fm(),{env:Fe}=process,ti;lt("no-color")||lt("no-colors")||lt("color=false")||lt("color=never")?ti=0:(lt("color")||lt("colors")||lt("color=true")||lt("color=always"))&&(ti=1);"FORCE_COLOR"in Fe&&(Fe.FORCE_COLOR==="true"?ti=1:Fe.FORCE_COLOR==="false"?ti=0:ti=Fe.FORCE_COLOR.length===0?1:Math.min(parseInt(Fe.FORCE_COLOR,10),3));function Ja(e){return e===0?!1:{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}function Za(e,t){if(ti===0)return 0;if(lt("color=16m")||lt("color=full")||lt("color=truecolor"))return 3;if(lt("color=256"))return 2;if(e&&!t&&ti===void 0)return 0;let i=ti||0;if(Fe.TERM==="dumb")return i;if(process.platform==="win32"){let r=fO.release().split(".");return Number(r[0])>=10&&Number(r[2])>=10586?Number(r[2])>=14931?3:2:1}if("CI"in Fe)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI","GITHUB_ACTIONS","BUILDKITE"].some(r=>r in Fe)||Fe.CI_NAME==="codeship"?1:i;if("TEAMCITY_VERSION"in Fe)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(Fe.TEAMCITY_VERSION)?1:0;if(Fe.COLORTERM==="truecolor")return 3;if("TERM_PROGRAM"in Fe){let r=parseInt((Fe.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(Fe.TERM_PROGRAM){case"iTerm.app":return r>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(Fe.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(Fe.TERM)||"COLORTERM"in Fe?1:i}function hO(e){let t=Za(e,e&&e.isTTY);return Ja(t)}Mm.exports={supportsColor:hO,stdout:Ja(Za(!0,jm.isatty(1))),stderr:Ja(Za(!0,jm.isatty(2)))}});var Um=k((je,zn)=>{"use strict";var mO=require("tty"),$n=require("util");je.init=EO;je.log=yO;je.formatArgs=xO;je.save=bO;je.load=wO;je.useColors=gO;je.destroy=$n.deprecate(()=>{},"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");je.colors=[6,2,3,4,5,1];try{let e=qm();e&&(e.stderr||e).level>=2&&(je.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch{}je.inspectOpts=Object.keys(process.env).filter(e=>/^debug_/i.test(e)).reduce((e,t)=>{let i=t.substring(6).toLowerCase().replace(/_([a-z])/g,(n,s)=>s.toUpperCase()),r=process.env[t];return/^(yes|on|true|enabled)$/i.test(r)?r=!0:/^(no|off|false|disabled)$/i.test(r)?r=!1:r==="null"?r=null:r=Number(r),e[i]=r,e},{});function gO(){return"colors"in je.inspectOpts?!!je.inspectOpts.colors:mO.isatty(process.stderr.fd)}function xO(e){let{namespace:t,useColors:i}=this;if(i){let r=this.color,n="\x1B[3"+(r<8?r:"8;5;"+r),s=`  ${n};1m${t} \x1B[0m`;e[0]=s+e[0].split(`
`).join(`
`+s),e.push(n+"m+"+zn.exports.humanize(this.diff)+"\x1B[0m")}else e[0]=vO()+t+" "+e[0]}function vO(){return je.inspectOpts.hideDate?"":new Date().toISOString()+" "}function yO(...e){return process.stderr.write($n.formatWithOptions(je.inspectOpts,...e)+`
`)}function bO(e){e?process.env.DEBUG=e:delete process.env.DEBUG}function wO(){return process.env.DEBUG}function EO(e){e.inspectOpts={};let t=Object.keys(je.inspectOpts);for(let i=0;i<t.length;i++)e.inspectOpts[t[i]]=je.inspectOpts[t[i]]}zn.exports=Ka()(je);var{formatters:Bm}=zn.exports;Bm.o=function(e){return this.inspectOpts.colors=this.useColors,$n.inspect(e,this.inspectOpts).split(`
`).map(t=>t.trim()).join(" ")};Bm.O=function(e){return this.inspectOpts.colors=this.useColors,$n.inspect(e,this.inspectOpts)}});var Hn=k((ZF,Qa)=>{"use strict";typeof process>"u"||process.type==="renderer"||process.browser===!0||process.__nwjs?Qa.exports=Rm():Qa.exports=Um()});var zm=k((QF,$m)=>{"use strict";var Dr;$m.exports=function(){if(!Dr){try{Dr=Hn()("follow-redirects")}catch{}typeof Dr!="function"&&(Dr=function(){})}Dr.apply(null,arguments)}});var Ym=k((ej,pc)=>{"use strict";var Lr=require("url"),Ir=Lr.URL,_O=require("http"),TO=require("https"),nc=require("stream").Writable,sc=require("assert"),Hm=zm(),oc=!1;try{sc(new Ir)}catch(e){oc=e.code==="ERR_INVALID_URL"}var SO=["auth","host","hostname","href","path","pathname","port","protocol","query","search","hash"],ac=["abort","aborted","connect","error","socket","timeout"],cc=Object.create(null);ac.forEach(function(e){cc[e]=function(t,i,r){this._redirectable.emit(e,t,i,r)}});var tc=kr("ERR_INVALID_URL","Invalid URL",TypeError),ic=kr("ERR_FR_REDIRECTION_FAILURE","Redirected request failed"),CO=kr("ERR_FR_TOO_MANY_REDIRECTS","Maximum number of redirects exceeded",ic),OO=kr("ERR_FR_MAX_BODY_LENGTH_EXCEEDED","Request body larger than maxBodyLength limit"),AO=kr("ERR_STREAM_WRITE_AFTER_END","write after end"),DO=nc.prototype.destroy||Vm;function Ke(e,t){nc.call(this),this._sanitizeOptions(e),this._options=e,this._ended=!1,this._ending=!1,this._redirectCount=0,this._redirects=[],this._requestBodyLength=0,this._requestBodyBuffers=[],t&&this.on("response",t);var i=this;this._onNativeResponse=function(r){try{i._processResponse(r)}catch(n){i.emit("error",n instanceof ic?n:new ic({cause:n}))}},this._performRequest()}Ke.prototype=Object.create(nc.prototype);Ke.prototype.abort=function(){lc(this._currentRequest),this._currentRequest.abort(),this.emit("abort")};Ke.prototype.destroy=function(e){return lc(this._currentRequest,e),DO.call(this,e),this};Ke.prototype.write=function(e,t,i){if(this._ending)throw new AO;if(!xi(e)&&!LO(e))throw new TypeError("data should be a string, Buffer or Uint8Array");if(Nr(t)&&(i=t,t=null),e.length===0){i&&i();return}this._requestBodyLength+e.length<=this._options.maxBodyLength?(this._requestBodyLength+=e.length,this._requestBodyBuffers.push({data:e,encoding:t}),this._currentRequest.write(e,t,i)):(this.emit("error",new OO),this.abort())};Ke.prototype.end=function(e,t,i){if(Nr(e)?(i=e,e=t=null):Nr(t)&&(i=t,t=null),!e)this._ended=this._ending=!0,this._currentRequest.end(null,null,i);else{var r=this,n=this._currentRequest;this.write(e,t,function(){r._ended=!0,n.end(null,null,i)}),this._ending=!0}};Ke.prototype.setHeader=function(e,t){this._options.headers[e]=t,this._currentRequest.setHeader(e,t)};Ke.prototype.removeHeader=function(e){delete this._options.headers[e],this._currentRequest.removeHeader(e)};Ke.prototype.setTimeout=function(e,t){var i=this;function r(o){o.setTimeout(e),o.removeListener("timeout",o.destroy),o.addListener("timeout",o.destroy)}function n(o){i._timeout&&clearTimeout(i._timeout),i._timeout=setTimeout(function(){i.emit("timeout"),s()},e),r(o)}function s(){i._timeout&&(clearTimeout(i._timeout),i._timeout=null),i.removeListener("abort",s),i.removeListener("error",s),i.removeListener("response",s),i.removeListener("close",s),t&&i.removeListener("timeout",t),i.socket||i._currentRequest.removeListener("socket",n)}return t&&this.on("timeout",t),this.socket?n(this.socket):this._currentRequest.once("socket",n),this.on("socket",r),this.on("abort",s),this.on("error",s),this.on("response",s),this.on("close",s),this};["flushHeaders","getHeader","setNoDelay","setSocketKeepAlive"].forEach(function(e){Ke.prototype[e]=function(t,i){return this._currentRequest[e](t,i)}});["aborted","connection","socket"].forEach(function(e){Object.defineProperty(Ke.prototype,e,{get:function(){return this._currentRequest[e]}})});Ke.prototype._sanitizeOptions=function(e){if(e.headers||(e.headers={}),e.host&&(e.hostname||(e.hostname=e.host),delete e.host),!e.pathname&&e.path){var t=e.path.indexOf("?");t<0?e.pathname=e.path:(e.pathname=e.path.substring(0,t),e.search=e.path.substring(t))}};Ke.prototype._performRequest=function(){var e=this._options.protocol,t=this._options.nativeProtocols[e];if(!t)throw new TypeError("Unsupported protocol "+e);if(this._options.agents){var i=e.slice(0,-1);this._options.agent=this._options.agents[i]}var r=this._currentRequest=t.request(this._options,this._onNativeResponse);r._redirectable=this;for(var n of ac)r.on(n,cc[n]);if(this._currentUrl=/^\//.test(this._options.path)?Lr.format(this._options):this._options.path,this._isRedirect){var s=0,o=this,a=this._requestBodyBuffers;(function c(u){if(r===o._currentRequest)if(u)o.emit("error",u);else if(s<a.length){var f=a[s++];r.finished||r.write(f.data,f.encoding,c)}else o._ended&&r.end()})()}};Ke.prototype._processResponse=function(e){var t=e.statusCode;this._options.trackRedirects&&this._redirects.push({url:this._currentUrl,headers:e.headers,statusCode:t});var i=e.headers.location;if(!i||this._options.followRedirects===!1||t<300||t>=400){e.responseUrl=this._currentUrl,e.redirects=this._redirects,this.emit("response",e),this._requestBodyBuffers=[];return}if(lc(this._currentRequest),e.destroy(),++this._redirectCount>this._options.maxRedirects)throw new CO;var r,n=this._options.beforeRedirect;n&&(r=Object.assign({Host:e.req.getHeader("host")},this._options.headers));var s=this._options.method;((t===301||t===302)&&this._options.method==="POST"||t===303&&!/^(?:GET|HEAD)$/.test(this._options.method))&&(this._options.method="GET",this._requestBodyBuffers=[],ec(/^content-/i,this._options.headers));var o=ec(/^host$/i,this._options.headers),a=uc(this._currentUrl),c=o||a.host,u=/^\w+:/.test(i)?this._currentUrl:Lr.format(Object.assign(a,{host:c})),f=IO(i,u);if(Hm("redirecting to",f.href),this._isRedirect=!0,rc(f,this._options),(f.protocol!==a.protocol&&f.protocol!=="https:"||f.host!==c&&!NO(f.host,c))&&ec(/^(?:(?:proxy-)?authorization|cookie)$/i,this._options.headers),Nr(n)){var g={headers:e.headers,statusCode:t},x={url:u,method:s,headers:r};n(this._options,g,x),this._sanitizeOptions(this._options)}this._performRequest()};function Gm(e){var t={maxRedirects:21,maxBodyLength:10485760},i={};return Object.keys(e).forEach(function(r){var n=r+":",s=i[n]=e[r],o=t[r]=Object.create(s);function a(u,f,g){return kO(u)?u=rc(u):xi(u)?u=rc(uc(u)):(g=f,f=Xm(u),u={protocol:n}),Nr(f)&&(g=f,f=null),f=Object.assign({maxRedirects:t.maxRedirects,maxBodyLength:t.maxBodyLength},u,f),f.nativeProtocols=i,!xi(f.host)&&!xi(f.hostname)&&(f.hostname="::1"),sc.equal(f.protocol,n,"protocol mismatch"),Hm("options",f),new Ke(f,g)}function c(u,f,g){var x=o.request(u,f,g);return x.end(),x}Object.defineProperties(o,{request:{value:a,configurable:!0,enumerable:!0,writable:!0},get:{value:c,configurable:!0,enumerable:!0,writable:!0}})}),t}function Vm(){}function uc(e){var t;if(oc)t=new Ir(e);else if(t=Xm(Lr.parse(e)),!xi(t.protocol))throw new tc({input:e});return t}function IO(e,t){return oc?new Ir(e,t):uc(Lr.resolve(t,e))}function Xm(e){if(/^\[/.test(e.hostname)&&!/^\[[:0-9a-f]+\]$/i.test(e.hostname))throw new tc({input:e.href||e});if(/^\[/.test(e.host)&&!/^\[[:0-9a-f]+\](:\d+)?$/i.test(e.host))throw new tc({input:e.href||e});return e}function rc(e,t){var i=t||{};for(var r of SO)i[r]=e[r];return i.hostname.startsWith("[")&&(i.hostname=i.hostname.slice(1,-1)),i.port!==""&&(i.port=Number(i.port)),i.path=i.search?i.pathname+i.search:i.pathname,i}function ec(e,t){var i;for(var r in t)e.test(r)&&(i=t[r],delete t[r]);return i===null||typeof i>"u"?void 0:String(i).trim()}function kr(e,t,i){function r(n){Error.captureStackTrace(this,this.constructor),Object.assign(this,n||{}),this.code=e,this.message=this.cause?t+": "+this.cause.message:t}return r.prototype=new(i||Error),Object.defineProperties(r.prototype,{constructor:{value:r,enumerable:!1},name:{value:"Error ["+e+"]",enumerable:!1}}),r}function lc(e,t){for(var i of ac)e.removeListener(i,cc[i]);e.on("error",Vm),e.destroy(t)}function NO(e,t){sc(xi(e)&&xi(t));var i=e.length-t.length-1;return i>0&&e[i]==="."&&e.endsWith(t)}function xi(e){return typeof e=="string"||e instanceof String}function Nr(e){return typeof e=="function"}function LO(e){return typeof e=="object"&&"length"in e}function kO(e){return Ir&&e instanceof Ir}pc.exports=Gm({http:_O,https:TO});pc.exports.wrap=Gm});var Dg=k(nt=>{"use strict";var o1=nt&&nt.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(nt,"__esModule",{value:!0});var a1=require("fs"),c1=o1(Hn()),Qi=c1.default("@kwsites/file-exists");function u1(e,t,i){Qi("checking %s",e);try{let r=a1.statSync(e);return r.isFile()&&t?(Qi("[OK] path represents a file"),!0):r.isDirectory()&&i?(Qi("[OK] path represents a directory"),!0):(Qi("[FAIL] path represents something other than a file or directory"),!1)}catch(r){if(r.code==="ENOENT")return Qi("[FAIL] path is not accessible: %o",r),!1;throw Qi("[FATAL] %o",r),r}}function l1(e,t=nt.READABLE){return u1(e,(t&nt.FILE)>0,(t&nt.FOLDER)>0)}nt.exists=l1;nt.FILE=1;nt.FOLDER=2;nt.READABLE=nt.FILE+nt.FOLDER});var Ig=k(ts=>{"use strict";function p1(e){for(var t in e)ts.hasOwnProperty(t)||(ts[t]=e[t])}Object.defineProperty(ts,"__esModule",{value:!0});p1(Dg())});var Ac=k(bi=>{"use strict";Object.defineProperty(bi,"__esModule",{value:!0});bi.createDeferred=bi.deferred=void 0;function Oc(){let e,t,i="pending";return{promise:new Promise((n,s)=>{e=n,t=s}),done(n){i==="pending"&&(i="resolved",e(n))},fail(n){i==="pending"&&(i="rejected",t(n))},get fulfilled(){return i!=="pending"},get status(){return i}}}bi.deferred=Oc;bi.createDeferred=Oc;bi.default=Oc});var vy=k((w3,xy)=>{"use strict";xy.exports=gy;gy.sync=_I;var hy=require("fs");function EI(e,t){var i=t.pathExt!==void 0?t.pathExt:process.env.PATHEXT;if(!i||(i=i.split(";"),i.indexOf("")!==-1))return!0;for(var r=0;r<i.length;r++){var n=i[r].toLowerCase();if(n&&e.substr(-n.length).toLowerCase()===n)return!0}return!1}function my(e,t,i){return!e.isSymbolicLink()&&!e.isFile()?!1:EI(t,i)}function gy(e,t,i){hy.stat(e,function(r,n){i(r,r?!1:my(n,e,t))})}function _I(e,t){return my(hy.statSync(e),e,t)}});var _y=k((E3,Ey)=>{"use strict";Ey.exports=by;by.sync=TI;var yy=require("fs");function by(e,t,i){yy.stat(e,function(r,n){i(r,r?!1:wy(n,t))})}function TI(e,t){return wy(yy.statSync(e),t)}function wy(e,t){return e.isFile()&&SI(e,t)}function SI(e,t){var i=e.mode,r=e.uid,n=e.gid,s=t.uid!==void 0?t.uid:process.getuid&&process.getuid(),o=t.gid!==void 0?t.gid:process.getgid&&process.getgid(),a=parseInt("100",8),c=parseInt("010",8),u=parseInt("001",8),f=a|c,g=i&u||i&c&&n===o||i&a&&r===s||i&f&&s===0;return g}});var Sy=k((T3,Ty)=>{"use strict";var _3=require("fs"),Es;process.platform==="win32"||global.TESTING_WINDOWS?Es=vy():Es=_y();Ty.exports=xu;xu.sync=CI;function xu(e,t,i){if(typeof t=="function"&&(i=t,t={}),!i){if(typeof Promise!="function")throw new TypeError("callback not provided");return new Promise(function(r,n){xu(e,t||{},function(s,o){s?n(s):r(o)})})}Es(e,t||{},function(r,n){r&&(r.code==="EACCES"||t&&t.ignoreErrors)&&(r=null,n=!1),i(r,n)})}function CI(e,t){try{return Es.sync(e,t||{})}catch(i){if(t&&t.ignoreErrors||i.code==="EACCES")return!1;throw i}}});var Ly=k((S3,Ny)=>{"use strict";var rr=process.platform==="win32"||process.env.OSTYPE==="cygwin"||process.env.OSTYPE==="msys",Cy=require("path"),OI=rr?";":":",Oy=Sy(),Ay=e=>Object.assign(new Error(`not found: ${e}`),{code:"ENOENT"}),Dy=(e,t)=>{let i=t.colon||OI,r=e.match(/\//)||rr&&e.match(/\\/)?[""]:[...rr?[process.cwd()]:[],...(t.path||process.env.PATH||"").split(i)],n=rr?t.pathExt||process.env.PATHEXT||".EXE;.CMD;.BAT;.COM":"",s=rr?n.split(i):[""];return rr&&e.indexOf(".")!==-1&&s[0]!==""&&s.unshift(""),{pathEnv:r,pathExt:s,pathExtExe:n}},Iy=(e,t,i)=>{typeof t=="function"&&(i=t,t={}),t||(t={});let{pathEnv:r,pathExt:n,pathExtExe:s}=Dy(e,t),o=[],a=u=>new Promise((f,g)=>{if(u===r.length)return t.all&&o.length?f(o):g(Ay(e));let x=r[u],l=/^".*"$/.test(x)?x.slice(1,-1):x,m=Cy.join(l,e),v=!l&&/^\.[\\\/]/.test(e)?e.slice(0,2)+m:m;f(c(v,u,0))}),c=(u,f,g)=>new Promise((x,l)=>{if(g===n.length)return x(a(f+1));let m=n[g];Oy(u+m,{pathExt:s},(v,w)=>{if(!v&&w)if(t.all)o.push(u+m);else return x(u+m);return x(c(u,f,g+1))})});return i?a(0).then(u=>i(null,u),i):a(0)},AI=(e,t)=>{t=t||{};let{pathEnv:i,pathExt:r,pathExtExe:n}=Dy(e,t),s=[];for(let o=0;o<i.length;o++){let a=i[o],c=/^".*"$/.test(a)?a.slice(1,-1):a,u=Cy.join(c,e),f=!c&&/^\.[\\\/]/.test(e)?e.slice(0,2)+u:u;for(let g=0;g<r.length;g++){let x=f+r[g];try{if(Oy.sync(x,{pathExt:n}))if(t.all)s.push(x);else return x}catch{}}}if(t.all&&s.length)return s;if(t.nothrow)return null;throw Ay(e)};Ny.exports=Iy;Iy.sync=AI});var $y=k((O3,Uy)=>{"use strict";function Ry(e){return Array.isArray(e)?e:[e]}var Eu="",Py=" ",bu="\\",PI=/^\s+$/,FI=/(?:[^\\]|^)\\$/,jI=/^\\!/,MI=/^\\#/,qI=/\r?\n/g,BI=/^\.*\/|^\.+$/,wu="/",My="node-ignore";typeof Symbol<"u"&&(My=Symbol.for("node-ignore"));var Fy=My,UI=(e,t,i)=>Object.defineProperty(e,t,{value:i}),$I=/([0-z])-([0-z])/g,qy=()=>!1,zI=e=>e.replace($I,(t,i,r)=>i.charCodeAt(0)<=r.charCodeAt(0)?t:Eu),HI=e=>{let{length:t}=e;return e.slice(0,t-t%2)},GI=[[/^\uFEFF/,()=>Eu],[/((?:\\\\)*?)(\\?\s+)$/,(e,t,i)=>t+(i.indexOf("\\")===0?Py:Eu)],[/(\\+?)\s/g,(e,t)=>{let{length:i}=t;return t.slice(0,i-i%2)+Py}],[/[\\$.|*+(){^]/g,e=>`\\${e}`],[/(?!\\)\?/g,()=>"[^/]"],[/^\//,()=>"^"],[/\//g,()=>"\\/"],[/^\^*\\\*\\\*\\\//,()=>"^(?:.*\\/)?"],[/^(?=[^^])/,function(){return/\/(?!$)/.test(this)?"^":"(?:^|\\/)"}],[/\\\/\\\*\\\*(?=\\\/|$)/g,(e,t,i)=>t+6<i.length?"(?:\\/[^\\/]+)*":"\\/.+"],[/(^|[^\\]+)(\\\*)+(?=.+)/g,(e,t,i)=>{let r=i.replace(/\\\*/g,"[^\\/]*");return t+r}],[/\\\\\\(?=[$.|*+(){^])/g,()=>bu],[/\\\\/g,()=>bu],[/(\\)?\[([^\]/]*?)(\\*)($|\])/g,(e,t,i,r,n)=>t===bu?`\\[${i}${HI(r)}${n}`:n==="]"&&r.length%2===0?`[${zI(i)}${r}]`:"[]"],[/(?:[^*])$/,e=>/\/$/.test(e)?`${e}$`:`${e}(?=$|\\/$)`],[/(\^|\\\/)?\\\*$/,(e,t)=>`${t?`${t}[^/]+`:"[^/]*"}(?=$|\\/$)`]],jy=Object.create(null),VI=(e,t)=>{let i=jy[e];return i||(i=GI.reduce((r,[n,s])=>r.replace(n,s.bind(e)),e),jy[e]=i),t?new RegExp(i,"i"):new RegExp(i)},Su=e=>typeof e=="string",XI=e=>e&&Su(e)&&!PI.test(e)&&!FI.test(e)&&e.indexOf("#")!==0,YI=e=>e.split(qI),_u=class{constructor(t,i,r,n){this.origin=t,this.pattern=i,this.negative=r,this.regex=n}},WI=(e,t)=>{let i=e,r=!1;e.indexOf("!")===0&&(r=!0,e=e.substr(1)),e=e.replace(jI,"!").replace(MI,"#");let n=VI(e,t);return new _u(i,e,r,n)},KI=(e,t)=>{throw new t(e)},zt=(e,t,i)=>Su(e)?e?zt.isNotRelative(e)?i(`path should be a \`path.relative()\`d string, but got "${t}"`,RangeError):!0:i("path must not be empty",TypeError):i(`path must be a string, but got \`${t}\``,TypeError),By=e=>BI.test(e);zt.isNotRelative=By;zt.convert=e=>e;var Tu=class{constructor({ignorecase:t=!0,ignoreCase:i=t,allowRelativePaths:r=!1}={}){UI(this,Fy,!0),this._rules=[],this._ignoreCase=i,this._allowRelativePaths=r,this._initCache()}_initCache(){this._ignoreCache=Object.create(null),this._testCache=Object.create(null)}_addPattern(t){if(t&&t[Fy]){this._rules=this._rules.concat(t._rules),this._added=!0;return}if(XI(t)){let i=WI(t,this._ignoreCase);this._added=!0,this._rules.push(i)}}add(t){return this._added=!1,Ry(Su(t)?YI(t):t).forEach(this._addPattern,this),this._added&&this._initCache(),this}addPattern(t){return this.add(t)}_testOne(t,i){let r=!1,n=!1;return this._rules.forEach(s=>{let{negative:o}=s;if(n===o&&r!==n||o&&!r&&!n&&!i)return;s.regex.test(t)&&(r=!o,n=o)}),{ignored:r,unignored:n}}_test(t,i,r,n){let s=t&&zt.convert(t);return zt(s,t,this._allowRelativePaths?qy:KI),this._t(s,i,r,n)}_t(t,i,r,n){if(t in i)return i[t];if(n||(n=t.split(wu)),n.pop(),!n.length)return i[t]=this._testOne(t,r);let s=this._t(n.join(wu)+wu,i,r,n);return i[t]=s.ignored?s:this._testOne(t,r)}ignores(t){return this._test(t,this._ignoreCache,!1).ignored}createFilter(){return t=>!this.ignores(t)}filter(t){return Ry(t).filter(this.createFilter())}test(t){return this._test(t,this._testCache,!0)}},_s=e=>new Tu(e),JI=e=>zt(e&&zt.convert(e),e,qy);_s.isPathValid=JI;_s.default=_s;Uy.exports=_s;if(typeof process<"u"&&(process.env&&process.env.IGNORE_TEST_WIN32||process.platform==="win32")){let e=i=>/^\\\\\?\\/.test(i)||/["<>|\u0000-\u001F]+/u.test(i)?i:i.replace(/\\/g,"/");zt.convert=e;let t=/^[a-z]:\//i;zt.isNotRelative=i=>t.test(i)||By(i)}});var Fs=k(qu=>{"use strict";(function(){qu.defaults={"0.1":{explicitCharkey:!1,trim:!0,normalize:!0,normalizeTags:!1,attrkey:"@",charkey:"#",explicitArray:!1,ignoreAttrs:!1,mergeAttrs:!1,explicitRoot:!1,validator:null,xmlns:!1,explicitChildren:!1,childkey:"@@",charsAsChildren:!1,includeWhiteChars:!1,async:!1,strict:!0,attrNameProcessors:null,attrValueProcessors:null,tagNameProcessors:null,valueProcessors:null,emptyTag:""},"0.2":{explicitCharkey:!1,trim:!1,normalize:!1,normalizeTags:!1,attrkey:"$",charkey:"_",explicitArray:!0,ignoreAttrs:!1,mergeAttrs:!1,explicitRoot:!0,validator:null,xmlns:!1,explicitChildren:!1,preserveChildrenOrder:!1,childkey:"$$",charsAsChildren:!1,includeWhiteChars:!1,async:!1,strict:!0,attrNameProcessors:null,attrValueProcessors:null,tagNameProcessors:null,valueProcessors:null,rootName:"root",xmldec:{version:"1.0",encoding:"UTF-8",standalone:!0},doctype:null,renderOpts:{pretty:!0,indent:"  ",newline:`
`},headless:!1,chunkSize:1e4,emptyTag:"",cdata:!1}}}).call(qu)});var It=k((Pb,ci)=>{"use strict";(function(){var e,t,i,r,n,s,o,a=[].slice,c={}.hasOwnProperty;e=function(){var u,f,g,x,l,m;if(m=arguments[0],l=2<=arguments.length?a.call(arguments,1):[],n(Object.assign))Object.assign.apply(null,arguments);else for(u=0,g=l.length;u<g;u++)if(x=l[u],x!=null)for(f in x)c.call(x,f)&&(m[f]=x[f]);return m},n=function(u){return!!u&&Object.prototype.toString.call(u)==="[object Function]"},s=function(u){var f;return!!u&&((f=typeof u)=="function"||f==="object")},i=function(u){return n(Array.isArray)?Array.isArray(u):Object.prototype.toString.call(u)==="[object Array]"},r=function(u){var f;if(i(u))return!u.length;for(f in u)if(c.call(u,f))return!1;return!0},o=function(u){var f,g;return s(u)&&(g=Object.getPrototypeOf(u))&&(f=g.constructor)&&typeof f=="function"&&f instanceof f&&Function.prototype.toString.call(f)===Function.prototype.toString.call(Object)},t=function(u){return n(u.valueOf)?u.valueOf():u},ci.exports.assign=e,ci.exports.isFunction=n,ci.exports.isObject=s,ci.exports.isArray=i,ci.exports.isEmpty=r,ci.exports.isPlainObject=o,ci.exports.getValue=t}).call(Pb)});var Bu=k((Fb,jb)=>{"use strict";(function(){var e;jb.exports=e=function(){function t(){}return t.prototype.hasFeature=function(i,r){return!0},t.prototype.createDocumentType=function(i,r,n){throw new Error("This DOM method is not implemented.")},t.prototype.createDocument=function(i,r,n){throw new Error("This DOM method is not implemented.")},t.prototype.createHTMLDocument=function(i){throw new Error("This DOM method is not implemented.")},t.prototype.getFeature=function(i,r){throw new Error("This DOM method is not implemented.")},t}()}).call(Fb)});var Bb=k((Mb,qb)=>{"use strict";(function(){var e;qb.exports=e=function(){function t(){}return t.prototype.handleError=function(i){throw new Error(i)},t}()}).call(Mb)});var zb=k((Ub,$b)=>{"use strict";(function(){var e;$b.exports=e=function(){function t(i){this.arr=i||[]}return Object.defineProperty(t.prototype,"length",{get:function(){return this.arr.length}}),t.prototype.item=function(i){return this.arr[i]||null},t.prototype.contains=function(i){return this.arr.indexOf(i)!==-1},t}()}).call(Ub)});var Vb=k((Hb,Gb)=>{"use strict";(function(){var e,t,i;t=Bb(),i=zb(),Gb.exports=e=function(){function r(){var n;this.defaultParams={"canonical-form":!1,"cdata-sections":!1,comments:!1,"datatype-normalization":!1,"element-content-whitespace":!0,entities:!0,"error-handler":new t,infoset:!0,"validate-if-schema":!1,namespaces:!0,"namespace-declarations":!0,"normalize-characters":!1,"schema-location":"","schema-type":"","split-cdata-sections":!0,validate:!1,"well-formed":!0},this.params=n=Object.create(this.defaultParams)}return Object.defineProperty(r.prototype,"parameterNames",{get:function(){return new i(Object.keys(this.defaultParams))}}),r.prototype.getParameter=function(n){return this.params.hasOwnProperty(n)?this.params[n]:null},r.prototype.canSetParameter=function(n,s){return!0},r.prototype.setParameter=function(n,s){return s!=null?this.params[n]=s:delete this.params[n]},r}()}).call(Hb)});var Ce=k((Xb,Yb)=>{"use strict";(function(){Yb.exports={Element:1,Attribute:2,Text:3,CData:4,EntityReference:5,EntityDeclaration:6,ProcessingInstruction:7,Comment:8,Document:9,DocType:10,DocumentFragment:11,NotationDeclaration:12,Declaration:201,Raw:202,AttributeDeclaration:203,ElementDeclaration:204,Dummy:205}}).call(Xb)});var Uu=k((Wb,Kb)=>{"use strict";(function(){var e,t,i;e=Ce(),i=at(),Kb.exports=t=function(){function r(n,s,o){if(this.parent=n,this.parent&&(this.options=this.parent.options,this.stringify=this.parent.stringify),s==null)throw new Error("Missing attribute name. "+this.debugInfo(s));this.name=this.stringify.name(s),this.value=this.stringify.attValue(o),this.type=e.Attribute,this.isId=!1,this.schemaTypeInfo=null}return Object.defineProperty(r.prototype,"nodeType",{get:function(){return this.type}}),Object.defineProperty(r.prototype,"ownerElement",{get:function(){return this.parent}}),Object.defineProperty(r.prototype,"textContent",{get:function(){return this.value},set:function(n){return this.value=n||""}}),Object.defineProperty(r.prototype,"namespaceURI",{get:function(){return""}}),Object.defineProperty(r.prototype,"prefix",{get:function(){return""}}),Object.defineProperty(r.prototype,"localName",{get:function(){return this.name}}),Object.defineProperty(r.prototype,"specified",{get:function(){return!0}}),r.prototype.clone=function(){return Object.create(this)},r.prototype.toString=function(n){return this.options.writer.attribute(this,this.options.writer.filterOptions(n))},r.prototype.debugInfo=function(n){return n=n||this.name,n==null?"parent: <"+this.parent.name+">":"attribute: {"+n+"}, parent: <"+this.parent.name+">"},r.prototype.isEqualNode=function(n){return!(n.namespaceURI!==this.namespaceURI||n.prefix!==this.prefix||n.localName!==this.localName||n.value!==this.value)},r}()}).call(Wb)});var js=k((Jb,Zb)=>{"use strict";(function(){var e;Zb.exports=e=function(){function t(i){this.nodes=i}return Object.defineProperty(t.prototype,"length",{get:function(){return Object.keys(this.nodes).length||0}}),t.prototype.clone=function(){return this.nodes=null},t.prototype.getNamedItem=function(i){return this.nodes[i]},t.prototype.setNamedItem=function(i){var r;return r=this.nodes[i.nodeName],this.nodes[i.nodeName]=i,r||null},t.prototype.removeNamedItem=function(i){var r;return r=this.nodes[i],delete this.nodes[i],r||null},t.prototype.item=function(i){return this.nodes[Object.keys(this.nodes)[i]]||null},t.prototype.getNamedItemNS=function(i,r){throw new Error("This DOM method is not implemented.")},t.prototype.setNamedItemNS=function(i){throw new Error("This DOM method is not implemented.")},t.prototype.removeNamedItemNS=function(i,r){throw new Error("This DOM method is not implemented.")},t}()}).call(Jb)});var Ms=k((Qb,ew)=>{"use strict";(function(){var e,t,i,r,n,s,o,a,c,u=function(g,x){for(var l in x)f.call(x,l)&&(g[l]=x[l]);function m(){this.constructor=g}return m.prototype=x.prototype,g.prototype=new m,g.__super__=x.prototype,g},f={}.hasOwnProperty;c=It(),a=c.isObject,o=c.isFunction,s=c.getValue,n=at(),e=Ce(),t=Uu(),r=js(),ew.exports=i=function(g){u(x,g);function x(l,m,v){var w,_,E,p;if(x.__super__.constructor.call(this,l),m==null)throw new Error("Missing element name. "+this.debugInfo());if(this.name=this.stringify.name(m),this.type=e.Element,this.attribs={},this.schemaTypeInfo=null,v!=null&&this.attribute(v),l.type===e.Document&&(this.isRoot=!0,this.documentObject=l,l.rootObject=this,l.children)){for(p=l.children,_=0,E=p.length;_<E;_++)if(w=p[_],w.type===e.DocType){w.name=this.name;break}}}return Object.defineProperty(x.prototype,"tagName",{get:function(){return this.name}}),Object.defineProperty(x.prototype,"namespaceURI",{get:function(){return""}}),Object.defineProperty(x.prototype,"prefix",{get:function(){return""}}),Object.defineProperty(x.prototype,"localName",{get:function(){return this.name}}),Object.defineProperty(x.prototype,"id",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(x.prototype,"className",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(x.prototype,"classList",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(x.prototype,"attributes",{get:function(){return(!this.attributeMap||!this.attributeMap.nodes)&&(this.attributeMap=new r(this.attribs)),this.attributeMap}}),x.prototype.clone=function(){var l,m,v,w;v=Object.create(this),v.isRoot&&(v.documentObject=null),v.attribs={},w=this.attribs;for(m in w)f.call(w,m)&&(l=w[m],v.attribs[m]=l.clone());return v.children=[],this.children.forEach(function(_){var E;return E=_.clone(),E.parent=v,v.children.push(E)}),v},x.prototype.attribute=function(l,m){var v,w;if(l!=null&&(l=s(l)),a(l))for(v in l)f.call(l,v)&&(w=l[v],this.attribute(v,w));else o(m)&&(m=m.apply()),this.options.keepNullAttributes&&m==null?this.attribs[l]=new t(this,l,""):m!=null&&(this.attribs[l]=new t(this,l,m));return this},x.prototype.removeAttribute=function(l){var m,v,w;if(l==null)throw new Error("Missing attribute name. "+this.debugInfo());if(l=s(l),Array.isArray(l))for(v=0,w=l.length;v<w;v++)m=l[v],delete this.attribs[m];else delete this.attribs[l];return this},x.prototype.toString=function(l){return this.options.writer.element(this,this.options.writer.filterOptions(l))},x.prototype.att=function(l,m){return this.attribute(l,m)},x.prototype.a=function(l,m){return this.attribute(l,m)},x.prototype.getAttribute=function(l){return this.attribs.hasOwnProperty(l)?this.attribs[l].value:null},x.prototype.setAttribute=function(l,m){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getAttributeNode=function(l){return this.attribs.hasOwnProperty(l)?this.attribs[l]:null},x.prototype.setAttributeNode=function(l){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.removeAttributeNode=function(l){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getElementsByTagName=function(l){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getAttributeNS=function(l,m){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.setAttributeNS=function(l,m,v){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.removeAttributeNS=function(l,m){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getAttributeNodeNS=function(l,m){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.setAttributeNodeNS=function(l){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getElementsByTagNameNS=function(l,m){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.hasAttribute=function(l){return this.attribs.hasOwnProperty(l)},x.prototype.hasAttributeNS=function(l,m){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.setIdAttribute=function(l,m){return this.attribs.hasOwnProperty(l)?this.attribs[l].isId:m},x.prototype.setIdAttributeNS=function(l,m,v){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.setIdAttributeNode=function(l,m){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getElementsByTagName=function(l){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getElementsByTagNameNS=function(l,m){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.getElementsByClassName=function(l){throw new Error("This DOM method is not implemented."+this.debugInfo())},x.prototype.isEqualNode=function(l){var m,v,w;if(!x.__super__.isEqualNode.apply(this,arguments).isEqualNode(l)||l.namespaceURI!==this.namespaceURI||l.prefix!==this.prefix||l.localName!==this.localName||l.attribs.length!==this.attribs.length)return!1;for(m=v=0,w=this.attribs.length-1;0<=w?v<=w:v>=w;m=0<=w?++v:--v)if(!this.attribs[m].isEqualNode(l.attribs[m]))return!1;return!0},x}(n)}).call(Qb)});var tn=k((tw,iw)=>{"use strict";(function(){var e,t,i=function(n,s){for(var o in s)r.call(s,o)&&(n[o]=s[o]);function a(){this.constructor=n}return a.prototype=s.prototype,n.prototype=new a,n.__super__=s.prototype,n},r={}.hasOwnProperty;t=at(),iw.exports=e=function(n){i(s,n);function s(o){s.__super__.constructor.call(this,o),this.value=""}return Object.defineProperty(s.prototype,"data",{get:function(){return this.value},set:function(o){return this.value=o||""}}),Object.defineProperty(s.prototype,"length",{get:function(){return this.value.length}}),Object.defineProperty(s.prototype,"textContent",{get:function(){return this.value},set:function(o){return this.value=o||""}}),s.prototype.clone=function(){return Object.create(this)},s.prototype.substringData=function(o,a){throw new Error("This DOM method is not implemented."+this.debugInfo())},s.prototype.appendData=function(o){throw new Error("This DOM method is not implemented."+this.debugInfo())},s.prototype.insertData=function(o,a){throw new Error("This DOM method is not implemented."+this.debugInfo())},s.prototype.deleteData=function(o,a){throw new Error("This DOM method is not implemented."+this.debugInfo())},s.prototype.replaceData=function(o,a,c){throw new Error("This DOM method is not implemented."+this.debugInfo())},s.prototype.isEqualNode=function(o){return!(!s.__super__.isEqualNode.apply(this,arguments).isEqualNode(o)||o.data!==this.data)},s}(t)}).call(tw)});var qs=k((rw,nw)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;e=Ce(),i=tn(),nw.exports=t=function(s){r(o,s);function o(a,c){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing CDATA text. "+this.debugInfo());this.name="#cdata-section",this.type=e.CData,this.value=this.stringify.cdata(c)}return o.prototype.clone=function(){return Object.create(this)},o.prototype.toString=function(a){return this.options.writer.cdata(this,this.options.writer.filterOptions(a))},o}(i)}).call(rw)});var Bs=k((sw,ow)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;e=Ce(),t=tn(),ow.exports=i=function(s){r(o,s);function o(a,c){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing comment text. "+this.debugInfo());this.name="#comment",this.type=e.Comment,this.value=this.stringify.comment(c)}return o.prototype.clone=function(){return Object.create(this)},o.prototype.toString=function(a){return this.options.writer.comment(this,this.options.writer.filterOptions(a))},o}(t)}).call(sw)});var Us=k((aw,cw)=>{"use strict";(function(){var e,t,i,r,n=function(o,a){for(var c in a)s.call(a,c)&&(o[c]=a[c]);function u(){this.constructor=o}return u.prototype=a.prototype,o.prototype=new u,o.__super__=a.prototype,o},s={}.hasOwnProperty;r=It().isObject,i=at(),e=Ce(),cw.exports=t=function(o){n(a,o);function a(c,u,f,g){var x;a.__super__.constructor.call(this,c),r(u)&&(x=u,u=x.version,f=x.encoding,g=x.standalone),u||(u="1.0"),this.type=e.Declaration,this.version=this.stringify.xmlVersion(u),f!=null&&(this.encoding=this.stringify.xmlEncoding(f)),g!=null&&(this.standalone=this.stringify.xmlStandalone(g))}return a.prototype.toString=function(c){return this.options.writer.declaration(this,this.options.writer.filterOptions(c))},a}(i)}).call(aw)});var $s=k((uw,lw)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;i=at(),e=Ce(),lw.exports=t=function(s){r(o,s);function o(a,c,u,f,g,x){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing DTD element name. "+this.debugInfo());if(u==null)throw new Error("Missing DTD attribute name. "+this.debugInfo(c));if(!f)throw new Error("Missing DTD attribute type. "+this.debugInfo(c));if(!g)throw new Error("Missing DTD attribute default. "+this.debugInfo(c));if(g.indexOf("#")!==0&&(g="#"+g),!g.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/))throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. "+this.debugInfo(c));if(x&&!g.match(/^(#FIXED|#DEFAULT)$/))throw new Error("Default value only applies to #FIXED or #DEFAULT. "+this.debugInfo(c));this.elementName=this.stringify.name(c),this.type=e.AttributeDeclaration,this.attributeName=this.stringify.name(u),this.attributeType=this.stringify.dtdAttType(f),x&&(this.defaultValue=this.stringify.dtdAttDefault(x)),this.defaultValueType=g}return o.prototype.toString=function(a){return this.options.writer.dtdAttList(this,this.options.writer.filterOptions(a))},o}(i)}).call(uw)});var zs=k((pw,dw)=>{"use strict";(function(){var e,t,i,r,n=function(o,a){for(var c in a)s.call(a,c)&&(o[c]=a[c]);function u(){this.constructor=o}return u.prototype=a.prototype,o.prototype=new u,o.__super__=a.prototype,o},s={}.hasOwnProperty;r=It().isObject,i=at(),e=Ce(),dw.exports=t=function(o){n(a,o);function a(c,u,f,g){if(a.__super__.constructor.call(this,c),f==null)throw new Error("Missing DTD entity name. "+this.debugInfo(f));if(g==null)throw new Error("Missing DTD entity value. "+this.debugInfo(f));if(this.pe=!!u,this.name=this.stringify.name(f),this.type=e.EntityDeclaration,!r(g))this.value=this.stringify.dtdEntityValue(g),this.internal=!0;else{if(!g.pubID&&!g.sysID)throw new Error("Public and/or system identifiers are required for an external entity. "+this.debugInfo(f));if(g.pubID&&!g.sysID)throw new Error("System identifier is required for a public external entity. "+this.debugInfo(f));if(this.internal=!1,g.pubID!=null&&(this.pubID=this.stringify.dtdPubID(g.pubID)),g.sysID!=null&&(this.sysID=this.stringify.dtdSysID(g.sysID)),g.nData!=null&&(this.nData=this.stringify.dtdNData(g.nData)),this.pe&&this.nData)throw new Error("Notation declaration is not allowed in a parameter entity. "+this.debugInfo(f))}}return Object.defineProperty(a.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(a.prototype,"systemId",{get:function(){return this.sysID}}),Object.defineProperty(a.prototype,"notationName",{get:function(){return this.nData||null}}),Object.defineProperty(a.prototype,"inputEncoding",{get:function(){return null}}),Object.defineProperty(a.prototype,"xmlEncoding",{get:function(){return null}}),Object.defineProperty(a.prototype,"xmlVersion",{get:function(){return null}}),a.prototype.toString=function(c){return this.options.writer.dtdEntity(this,this.options.writer.filterOptions(c))},a}(i)}).call(pw)});var Hs=k((fw,hw)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;i=at(),e=Ce(),hw.exports=t=function(s){r(o,s);function o(a,c,u){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing DTD element name. "+this.debugInfo());u||(u="(#PCDATA)"),Array.isArray(u)&&(u="("+u.join(",")+")"),this.name=this.stringify.name(c),this.type=e.ElementDeclaration,this.value=this.stringify.dtdElementValue(u)}return o.prototype.toString=function(a){return this.options.writer.dtdElement(this,this.options.writer.filterOptions(a))},o}(i)}).call(fw)});var Gs=k((mw,gw)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;i=at(),e=Ce(),gw.exports=t=function(s){r(o,s);function o(a,c,u){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing DTD notation name. "+this.debugInfo(c));if(!u.pubID&&!u.sysID)throw new Error("Public or system identifiers are required for an external entity. "+this.debugInfo(c));this.name=this.stringify.name(c),this.type=e.NotationDeclaration,u.pubID!=null&&(this.pubID=this.stringify.dtdPubID(u.pubID)),u.sysID!=null&&(this.sysID=this.stringify.dtdSysID(u.sysID))}return Object.defineProperty(o.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(o.prototype,"systemId",{get:function(){return this.sysID}}),o.prototype.toString=function(a){return this.options.writer.dtdNotation(this,this.options.writer.filterOptions(a))},o}(i)}).call(mw)});var Vs=k((xw,vw)=>{"use strict";(function(){var e,t,i,r,n,s,o,a,c,u=function(g,x){for(var l in x)f.call(x,l)&&(g[l]=x[l]);function m(){this.constructor=g}return m.prototype=x.prototype,g.prototype=new m,g.__super__=x.prototype,g},f={}.hasOwnProperty;c=It().isObject,a=at(),e=Ce(),t=$s(),r=zs(),i=Hs(),n=Gs(),o=js(),vw.exports=s=function(g){u(x,g);function x(l,m,v){var w,_,E,p,d,h;if(x.__super__.constructor.call(this,l),this.type=e.DocType,l.children){for(p=l.children,_=0,E=p.length;_<E;_++)if(w=p[_],w.type===e.Element){this.name=w.name;break}}this.documentObject=l,c(m)&&(d=m,m=d.pubID,v=d.sysID),v==null&&(h=[m,v],v=h[0],m=h[1]),m!=null&&(this.pubID=this.stringify.dtdPubID(m)),v!=null&&(this.sysID=this.stringify.dtdSysID(v))}return Object.defineProperty(x.prototype,"entities",{get:function(){var l,m,v,w,_;for(w={},_=this.children,m=0,v=_.length;m<v;m++)l=_[m],l.type===e.EntityDeclaration&&!l.pe&&(w[l.name]=l);return new o(w)}}),Object.defineProperty(x.prototype,"notations",{get:function(){var l,m,v,w,_;for(w={},_=this.children,m=0,v=_.length;m<v;m++)l=_[m],l.type===e.NotationDeclaration&&(w[l.name]=l);return new o(w)}}),Object.defineProperty(x.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(x.prototype,"systemId",{get:function(){return this.sysID}}),Object.defineProperty(x.prototype,"internalSubset",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),x.prototype.element=function(l,m){var v;return v=new i(this,l,m),this.children.push(v),this},x.prototype.attList=function(l,m,v,w,_){var E;return E=new t(this,l,m,v,w,_),this.children.push(E),this},x.prototype.entity=function(l,m){var v;return v=new r(this,!1,l,m),this.children.push(v),this},x.prototype.pEntity=function(l,m){var v;return v=new r(this,!0,l,m),this.children.push(v),this},x.prototype.notation=function(l,m){var v;return v=new n(this,l,m),this.children.push(v),this},x.prototype.toString=function(l){return this.options.writer.docType(this,this.options.writer.filterOptions(l))},x.prototype.ele=function(l,m){return this.element(l,m)},x.prototype.att=function(l,m,v,w,_){return this.attList(l,m,v,w,_)},x.prototype.ent=function(l,m){return this.entity(l,m)},x.prototype.pent=function(l,m){return this.pEntity(l,m)},x.prototype.not=function(l,m){return this.notation(l,m)},x.prototype.up=function(){return this.root()||this.documentObject},x.prototype.isEqualNode=function(l){return!(!x.__super__.isEqualNode.apply(this,arguments).isEqualNode(l)||l.name!==this.name||l.publicId!==this.publicId||l.systemId!==this.systemId)},x}(a)}).call(xw)});var Xs=k((yw,bw)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;e=Ce(),t=at(),bw.exports=i=function(s){r(o,s);function o(a,c){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing raw text. "+this.debugInfo());this.type=e.Raw,this.value=this.stringify.raw(c)}return o.prototype.clone=function(){return Object.create(this)},o.prototype.toString=function(a){return this.options.writer.raw(this,this.options.writer.filterOptions(a))},o}(t)}).call(yw)});var Ys=k((ww,Ew)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;e=Ce(),t=tn(),Ew.exports=i=function(s){r(o,s);function o(a,c){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing element text. "+this.debugInfo());this.name="#text",this.type=e.Text,this.value=this.stringify.text(c)}return Object.defineProperty(o.prototype,"isElementContentWhitespace",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(o.prototype,"wholeText",{get:function(){var a,c,u;for(u="",c=this.previousSibling;c;)u=c.data+u,c=c.previousSibling;for(u+=this.data,a=this.nextSibling;a;)u=u+a.data,a=a.nextSibling;return u}}),o.prototype.clone=function(){return Object.create(this)},o.prototype.toString=function(a){return this.options.writer.text(this,this.options.writer.filterOptions(a))},o.prototype.splitText=function(a){throw new Error("This DOM method is not implemented."+this.debugInfo())},o.prototype.replaceWholeText=function(a){throw new Error("This DOM method is not implemented."+this.debugInfo())},o}(t)}).call(ww)});var Ws=k((_w,Tw)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;e=Ce(),t=tn(),Tw.exports=i=function(s){r(o,s);function o(a,c,u){if(o.__super__.constructor.call(this,a),c==null)throw new Error("Missing instruction target. "+this.debugInfo());this.type=e.ProcessingInstruction,this.target=this.stringify.insTarget(c),this.name=this.target,u&&(this.value=this.stringify.insValue(u))}return o.prototype.clone=function(){return Object.create(this)},o.prototype.toString=function(a){return this.options.writer.processingInstruction(this,this.options.writer.filterOptions(a))},o.prototype.isEqualNode=function(a){return!(!o.__super__.isEqualNode.apply(this,arguments).isEqualNode(a)||a.target!==this.target)},o}(t)}).call(_w)});var $u=k((Sw,Cw)=>{"use strict";(function(){var e,t,i,r=function(s,o){for(var a in o)n.call(o,a)&&(s[a]=o[a]);function c(){this.constructor=s}return c.prototype=o.prototype,s.prototype=new c,s.__super__=o.prototype,s},n={}.hasOwnProperty;i=at(),e=Ce(),Cw.exports=t=function(s){r(o,s);function o(a){o.__super__.constructor.call(this,a),this.type=e.Dummy}return o.prototype.clone=function(){return Object.create(this)},o.prototype.toString=function(a){return""},o}(i)}).call(Sw)});var Dw=k((Ow,Aw)=>{"use strict";(function(){var e;Aw.exports=e=function(){function t(i){this.nodes=i}return Object.defineProperty(t.prototype,"length",{get:function(){return this.nodes.length||0}}),t.prototype.clone=function(){return this.nodes=null},t.prototype.item=function(i){return this.nodes[i]||null},t}()}).call(Ow)});var Lw=k((Iw,Nw)=>{"use strict";(function(){Nw.exports={Disconnected:1,Preceding:2,Following:4,Contains:8,ContainedBy:16,ImplementationSpecific:32}}).call(Iw)});var at=k((kw,Rw)=>{"use strict";(function(){var e,t,i,r,n,s,o,a,c,u,f,g,x,l,m,v,w,_,E,p={}.hasOwnProperty;E=It(),_=E.isObject,w=E.isFunction,v=E.isEmpty,m=E.getValue,a=null,i=null,r=null,n=null,s=null,x=null,l=null,g=null,o=null,t=null,f=null,c=null,e=null,Rw.exports=u=function(){function d(h){this.parent=h,this.parent&&(this.options=this.parent.options,this.stringify=this.parent.stringify),this.value=null,this.children=[],this.baseURI=null,a||(a=Ms(),i=qs(),r=Bs(),n=Us(),s=Vs(),x=Xs(),l=Ys(),g=Ws(),o=$u(),t=Ce(),f=Dw(),c=js(),e=Lw())}return Object.defineProperty(d.prototype,"nodeName",{get:function(){return this.name}}),Object.defineProperty(d.prototype,"nodeType",{get:function(){return this.type}}),Object.defineProperty(d.prototype,"nodeValue",{get:function(){return this.value}}),Object.defineProperty(d.prototype,"parentNode",{get:function(){return this.parent}}),Object.defineProperty(d.prototype,"childNodes",{get:function(){return(!this.childNodeList||!this.childNodeList.nodes)&&(this.childNodeList=new f(this.children)),this.childNodeList}}),Object.defineProperty(d.prototype,"firstChild",{get:function(){return this.children[0]||null}}),Object.defineProperty(d.prototype,"lastChild",{get:function(){return this.children[this.children.length-1]||null}}),Object.defineProperty(d.prototype,"previousSibling",{get:function(){var h;return h=this.parent.children.indexOf(this),this.parent.children[h-1]||null}}),Object.defineProperty(d.prototype,"nextSibling",{get:function(){var h;return h=this.parent.children.indexOf(this),this.parent.children[h+1]||null}}),Object.defineProperty(d.prototype,"ownerDocument",{get:function(){return this.document()||null}}),Object.defineProperty(d.prototype,"textContent",{get:function(){var h,b,O,A,D;if(this.nodeType===t.Element||this.nodeType===t.DocumentFragment){for(D="",A=this.children,b=0,O=A.length;b<O;b++)h=A[b],h.textContent&&(D+=h.textContent);return D}else return null},set:function(h){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),d.prototype.setParent=function(h){var b,O,A,D,S;for(this.parent=h,h&&(this.options=h.options,this.stringify=h.stringify),D=this.children,S=[],O=0,A=D.length;O<A;O++)b=D[O],S.push(b.setParent(this));return S},d.prototype.element=function(h,b,O){var A,D,S,L,C,F,z,H,V,$,j;if(F=null,b===null&&O==null&&(V=[{},null],b=V[0],O=V[1]),b==null&&(b={}),b=m(b),_(b)||($=[b,O],O=$[0],b=$[1]),h!=null&&(h=m(h)),Array.isArray(h))for(S=0,z=h.length;S<z;S++)D=h[S],F=this.element(D);else if(w(h))F=this.element(h.apply());else if(_(h)){for(C in h)if(p.call(h,C))if(j=h[C],w(j)&&(j=j.apply()),!this.options.ignoreDecorators&&this.stringify.convertAttKey&&C.indexOf(this.stringify.convertAttKey)===0)F=this.attribute(C.substr(this.stringify.convertAttKey.length),j);else if(!this.options.separateArrayItems&&Array.isArray(j)&&v(j))F=this.dummy();else if(_(j)&&v(j))F=this.element(C);else if(!this.options.keepNullNodes&&j==null)F=this.dummy();else if(!this.options.separateArrayItems&&Array.isArray(j))for(L=0,H=j.length;L<H;L++)D=j[L],A={},A[C]=D,F=this.element(A);else _(j)?!this.options.ignoreDecorators&&this.stringify.convertTextKey&&C.indexOf(this.stringify.convertTextKey)===0?F=this.element(j):(F=this.element(C),F.element(j)):F=this.element(C,j)}else!this.options.keepNullNodes&&O===null?F=this.dummy():!this.options.ignoreDecorators&&this.stringify.convertTextKey&&h.indexOf(this.stringify.convertTextKey)===0?F=this.text(O):!this.options.ignoreDecorators&&this.stringify.convertCDataKey&&h.indexOf(this.stringify.convertCDataKey)===0?F=this.cdata(O):!this.options.ignoreDecorators&&this.stringify.convertCommentKey&&h.indexOf(this.stringify.convertCommentKey)===0?F=this.comment(O):!this.options.ignoreDecorators&&this.stringify.convertRawKey&&h.indexOf(this.stringify.convertRawKey)===0?F=this.raw(O):!this.options.ignoreDecorators&&this.stringify.convertPIKey&&h.indexOf(this.stringify.convertPIKey)===0?F=this.instruction(h.substr(this.stringify.convertPIKey.length),O):F=this.node(h,b,O);if(F==null)throw new Error("Could not create any elements with: "+h+". "+this.debugInfo());return F},d.prototype.insertBefore=function(h,b,O){var A,D,S,L,C;if(h?.type)return S=h,L=b,S.setParent(this),L?(D=children.indexOf(L),C=children.splice(D),children.push(S),Array.prototype.push.apply(children,C)):children.push(S),S;if(this.isRoot)throw new Error("Cannot insert elements at root level. "+this.debugInfo(h));return D=this.parent.children.indexOf(this),C=this.parent.children.splice(D),A=this.parent.element(h,b,O),Array.prototype.push.apply(this.parent.children,C),A},d.prototype.insertAfter=function(h,b,O){var A,D,S;if(this.isRoot)throw new Error("Cannot insert elements at root level. "+this.debugInfo(h));return D=this.parent.children.indexOf(this),S=this.parent.children.splice(D+1),A=this.parent.element(h,b,O),Array.prototype.push.apply(this.parent.children,S),A},d.prototype.remove=function(){var h,b;if(this.isRoot)throw new Error("Cannot remove the root element. "+this.debugInfo());return h=this.parent.children.indexOf(this),[].splice.apply(this.parent.children,[h,h-h+1].concat(b=[])),this.parent},d.prototype.node=function(h,b,O){var A,D;return h!=null&&(h=m(h)),b||(b={}),b=m(b),_(b)||(D=[b,O],O=D[0],b=D[1]),A=new a(this,h,b),O!=null&&A.text(O),this.children.push(A),A},d.prototype.text=function(h){var b;return _(h)&&this.element(h),b=new l(this,h),this.children.push(b),this},d.prototype.cdata=function(h){var b;return b=new i(this,h),this.children.push(b),this},d.prototype.comment=function(h){var b;return b=new r(this,h),this.children.push(b),this},d.prototype.commentBefore=function(h){var b,O,A;return O=this.parent.children.indexOf(this),A=this.parent.children.splice(O),b=this.parent.comment(h),Array.prototype.push.apply(this.parent.children,A),this},d.prototype.commentAfter=function(h){var b,O,A;return O=this.parent.children.indexOf(this),A=this.parent.children.splice(O+1),b=this.parent.comment(h),Array.prototype.push.apply(this.parent.children,A),this},d.prototype.raw=function(h){var b;return b=new x(this,h),this.children.push(b),this},d.prototype.dummy=function(){var h;return h=new o(this),h},d.prototype.instruction=function(h,b){var O,A,D,S,L;if(h!=null&&(h=m(h)),b!=null&&(b=m(b)),Array.isArray(h))for(S=0,L=h.length;S<L;S++)O=h[S],this.instruction(O);else if(_(h))for(O in h)p.call(h,O)&&(A=h[O],this.instruction(O,A));else w(b)&&(b=b.apply()),D=new g(this,h,b),this.children.push(D);return this},d.prototype.instructionBefore=function(h,b){var O,A,D;return A=this.parent.children.indexOf(this),D=this.parent.children.splice(A),O=this.parent.instruction(h,b),Array.prototype.push.apply(this.parent.children,D),this},d.prototype.instructionAfter=function(h,b){var O,A,D;return A=this.parent.children.indexOf(this),D=this.parent.children.splice(A+1),O=this.parent.instruction(h,b),Array.prototype.push.apply(this.parent.children,D),this},d.prototype.declaration=function(h,b,O){var A,D;return A=this.document(),D=new n(A,h,b,O),A.children.length===0?A.children.unshift(D):A.children[0].type===t.Declaration?A.children[0]=D:A.children.unshift(D),A.root()||A},d.prototype.dtd=function(h,b){var O,A,D,S,L,C,F,z,H,V;for(A=this.document(),D=new s(A,h,b),H=A.children,S=L=0,F=H.length;L<F;S=++L)if(O=H[S],O.type===t.DocType)return A.children[S]=D,D;for(V=A.children,S=C=0,z=V.length;C<z;S=++C)if(O=V[S],O.isRoot)return A.children.splice(S,0,D),D;return A.children.push(D),D},d.prototype.up=function(){if(this.isRoot)throw new Error("The root node has no parent. Use doc() if you need to get the document object.");return this.parent},d.prototype.root=function(){var h;for(h=this;h;){if(h.type===t.Document)return h.rootObject;if(h.isRoot)return h;h=h.parent}},d.prototype.document=function(){var h;for(h=this;h;){if(h.type===t.Document)return h;h=h.parent}},d.prototype.end=function(h){return this.document().end(h)},d.prototype.prev=function(){var h;if(h=this.parent.children.indexOf(this),h<1)throw new Error("Already at the first node. "+this.debugInfo());return this.parent.children[h-1]},d.prototype.next=function(){var h;if(h=this.parent.children.indexOf(this),h===-1||h===this.parent.children.length-1)throw new Error("Already at the last node. "+this.debugInfo());return this.parent.children[h+1]},d.prototype.importDocument=function(h){var b;return b=h.root().clone(),b.parent=this,b.isRoot=!1,this.children.push(b),this},d.prototype.debugInfo=function(h){var b,O;return h=h||this.name,h==null&&!((b=this.parent)!=null&&b.name)?"":h==null?"parent: <"+this.parent.name+">":(O=this.parent)!=null&&O.name?"node: <"+h+">, parent: <"+this.parent.name+">":"node: <"+h+">"},d.prototype.ele=function(h,b,O){return this.element(h,b,O)},d.prototype.nod=function(h,b,O){return this.node(h,b,O)},d.prototype.txt=function(h){return this.text(h)},d.prototype.dat=function(h){return this.cdata(h)},d.prototype.com=function(h){return this.comment(h)},d.prototype.ins=function(h,b){return this.instruction(h,b)},d.prototype.doc=function(){return this.document()},d.prototype.dec=function(h,b,O){return this.declaration(h,b,O)},d.prototype.e=function(h,b,O){return this.element(h,b,O)},d.prototype.n=function(h,b,O){return this.node(h,b,O)},d.prototype.t=function(h){return this.text(h)},d.prototype.d=function(h){return this.cdata(h)},d.prototype.c=function(h){return this.comment(h)},d.prototype.r=function(h){return this.raw(h)},d.prototype.i=function(h,b){return this.instruction(h,b)},d.prototype.u=function(){return this.up()},d.prototype.importXMLBuilder=function(h){return this.importDocument(h)},d.prototype.replaceChild=function(h,b){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.removeChild=function(h){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.appendChild=function(h){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.hasChildNodes=function(){return this.children.length!==0},d.prototype.cloneNode=function(h){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.normalize=function(){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.isSupported=function(h,b){return!0},d.prototype.hasAttributes=function(){return this.attribs.length!==0},d.prototype.compareDocumentPosition=function(h){var b,O;return b=this,b===h?0:this.document()!==h.document()?(O=e.Disconnected|e.ImplementationSpecific,Math.random()<.5?O|=e.Preceding:O|=e.Following,O):b.isAncestor(h)?e.Contains|e.Preceding:b.isDescendant(h)?e.Contains|e.Following:b.isPreceding(h)?e.Preceding:e.Following},d.prototype.isSameNode=function(h){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.lookupPrefix=function(h){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.isDefaultNamespace=function(h){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.lookupNamespaceURI=function(h){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.isEqualNode=function(h){var b,O,A;if(h.nodeType!==this.nodeType||h.children.length!==this.children.length)return!1;for(b=O=0,A=this.children.length-1;0<=A?O<=A:O>=A;b=0<=A?++O:--O)if(!this.children[b].isEqualNode(h.children[b]))return!1;return!0},d.prototype.getFeature=function(h,b){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.setUserData=function(h,b,O){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.getUserData=function(h){throw new Error("This DOM method is not implemented."+this.debugInfo())},d.prototype.contains=function(h){return h?h===this||this.isDescendant(h):!1},d.prototype.isDescendant=function(h){var b,O,A,D,S;for(S=this.children,A=0,D=S.length;A<D;A++)if(b=S[A],h===b||(O=b.isDescendant(h),O))return!0;return!1},d.prototype.isAncestor=function(h){return h.isDescendant(this)},d.prototype.isPreceding=function(h){var b,O;return b=this.treePosition(h),O=this.treePosition(this),b===-1||O===-1?!1:b<O},d.prototype.isFollowing=function(h){var b,O;return b=this.treePosition(h),O=this.treePosition(this),b===-1||O===-1?!1:b>O},d.prototype.treePosition=function(h){var b,O;return O=0,b=!1,this.foreachTreeNode(this.document(),function(A){if(O++,!b&&A===h)return b=!0}),b?O:-1},d.prototype.foreachTreeNode=function(h,b){var O,A,D,S,L;for(h||(h=this.document()),S=h.children,A=0,D=S.length;A<D;A++){if(O=S[A],L=b(O))return L;if(L=this.foreachTreeNode(O,b),L)return L}},d}()}).call(kw)});var zu=k((Pw,Fw)=>{"use strict";(function(){var e,t=function(r,n){return function(){return r.apply(n,arguments)}},i={}.hasOwnProperty;Fw.exports=e=function(){function r(n){this.assertLegalName=t(this.assertLegalName,this),this.assertLegalChar=t(this.assertLegalChar,this);var s,o,a;n||(n={}),this.options=n,this.options.version||(this.options.version="1.0"),o=n.stringify||{};for(s in o)i.call(o,s)&&(a=o[s],this[s]=a)}return r.prototype.name=function(n){return this.options.noValidation?n:this.assertLegalName(""+n||"")},r.prototype.text=function(n){return this.options.noValidation?n:this.assertLegalChar(this.textEscape(""+n||""))},r.prototype.cdata=function(n){return this.options.noValidation?n:(n=""+n||"",n=n.replace("]]>","]]]]><![CDATA[>"),this.assertLegalChar(n))},r.prototype.comment=function(n){if(this.options.noValidation)return n;if(n=""+n||"",n.match(/--/))throw new Error("Comment text cannot contain double-hypen: "+n);return this.assertLegalChar(n)},r.prototype.raw=function(n){return this.options.noValidation?n:""+n||""},r.prototype.attValue=function(n){return this.options.noValidation?n:this.assertLegalChar(this.attEscape(n=""+n||""))},r.prototype.insTarget=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.insValue=function(n){if(this.options.noValidation)return n;if(n=""+n||"",n.match(/\?>/))throw new Error("Invalid processing instruction value: "+n);return this.assertLegalChar(n)},r.prototype.xmlVersion=function(n){if(this.options.noValidation)return n;if(n=""+n||"",!n.match(/1\.[0-9]+/))throw new Error("Invalid version number: "+n);return n},r.prototype.xmlEncoding=function(n){if(this.options.noValidation)return n;if(n=""+n||"",!n.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/))throw new Error("Invalid encoding: "+n);return this.assertLegalChar(n)},r.prototype.xmlStandalone=function(n){return this.options.noValidation?n:n?"yes":"no"},r.prototype.dtdPubID=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.dtdSysID=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.dtdElementValue=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.dtdAttType=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.dtdAttDefault=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.dtdEntityValue=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.dtdNData=function(n){return this.options.noValidation?n:this.assertLegalChar(""+n||"")},r.prototype.convertAttKey="@",r.prototype.convertPIKey="?",r.prototype.convertTextKey="#text",r.prototype.convertCDataKey="#cdata",r.prototype.convertCommentKey="#comment",r.prototype.convertRawKey="#raw",r.prototype.assertLegalChar=function(n){var s,o;if(this.options.noValidation)return n;if(s="",this.options.version==="1.0"){if(s=/[\0-\x08\x0B\f\x0E-\x1F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,o=n.match(s))throw new Error("Invalid character in string: "+n+" at index "+o.index)}else if(this.options.version==="1.1"&&(s=/[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,o=n.match(s)))throw new Error("Invalid character in string: "+n+" at index "+o.index);return n},r.prototype.assertLegalName=function(n){var s;if(this.options.noValidation)return n;if(this.assertLegalChar(n),s=/^([:A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])([\x2D\.0-:A-Z_a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*$/,!n.match(s))throw new Error("Invalid character in name");return n},r.prototype.textEscape=function(n){var s;return this.options.noValidation?n:(s=this.options.noDoubleEncoding?/(?!&\S+;)&/g:/&/g,n.replace(s,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/\r/g,"&#xD;"))},r.prototype.attEscape=function(n){var s;return this.options.noValidation?n:(s=this.options.noDoubleEncoding?/(?!&\S+;)&/g:/&/g,n.replace(s,"&amp;").replace(/</g,"&lt;").replace(/"/g,"&quot;").replace(/\t/g,"&#x9;").replace(/\n/g,"&#xA;").replace(/\r/g,"&#xD;"))},r}()}).call(Pw)});var rn=k((jw,Mw)=>{"use strict";(function(){Mw.exports={None:0,OpenTag:1,InsideTag:2,CloseTag:3}}).call(jw)});var Hu=k((qw,Bw)=>{"use strict";(function(){var e,t,i,r,n,s,o,a,c,u,f,g,x,l,m,v,w,_={}.hasOwnProperty;w=It().assign,e=Ce(),c=Us(),u=Vs(),i=qs(),r=Bs(),g=Ms(),l=Xs(),m=Ys(),x=Ws(),f=$u(),n=$s(),s=Hs(),o=zs(),a=Gs(),t=rn(),Bw.exports=v=function(){function E(p){var d,h,b;p||(p={}),this.options=p,h=p.writer||{};for(d in h)_.call(h,d)&&(b=h[d],this["_"+d]=this[d],this[d]=b)}return E.prototype.filterOptions=function(p){var d,h,b,O,A,D,S,L;return p||(p={}),p=w({},this.options,p),d={writer:this},d.pretty=p.pretty||!1,d.allowEmpty=p.allowEmpty||!1,d.indent=(h=p.indent)!=null?h:"  ",d.newline=(b=p.newline)!=null?b:`
`,d.offset=(O=p.offset)!=null?O:0,d.dontPrettyTextNodes=(A=(D=p.dontPrettyTextNodes)!=null?D:p.dontprettytextnodes)!=null?A:0,d.spaceBeforeSlash=(S=(L=p.spaceBeforeSlash)!=null?L:p.spacebeforeslash)!=null?S:"",d.spaceBeforeSlash===!0&&(d.spaceBeforeSlash=" "),d.suppressPrettyCount=0,d.user={},d.state=t.None,d},E.prototype.indent=function(p,d,h){var b;return!d.pretty||d.suppressPrettyCount?"":d.pretty&&(b=(h||0)+d.offset+1,b>0)?new Array(b).join(d.indent):""},E.prototype.endline=function(p,d,h){return!d.pretty||d.suppressPrettyCount?"":d.newline},E.prototype.attribute=function(p,d,h){var b;return this.openAttribute(p,d,h),b=" "+p.name+'="'+p.value+'"',this.closeAttribute(p,d,h),b},E.prototype.cdata=function(p,d,h){var b;return this.openNode(p,d,h),d.state=t.OpenTag,b=this.indent(p,d,h)+"<![CDATA[",d.state=t.InsideTag,b+=p.value,d.state=t.CloseTag,b+="]]>"+this.endline(p,d,h),d.state=t.None,this.closeNode(p,d,h),b},E.prototype.comment=function(p,d,h){var b;return this.openNode(p,d,h),d.state=t.OpenTag,b=this.indent(p,d,h)+"<!-- ",d.state=t.InsideTag,b+=p.value,d.state=t.CloseTag,b+=" -->"+this.endline(p,d,h),d.state=t.None,this.closeNode(p,d,h),b},E.prototype.declaration=function(p,d,h){var b;return this.openNode(p,d,h),d.state=t.OpenTag,b=this.indent(p,d,h)+"<?xml",d.state=t.InsideTag,b+=' version="'+p.version+'"',p.encoding!=null&&(b+=' encoding="'+p.encoding+'"'),p.standalone!=null&&(b+=' standalone="'+p.standalone+'"'),d.state=t.CloseTag,b+=d.spaceBeforeSlash+"?>",b+=this.endline(p,d,h),d.state=t.None,this.closeNode(p,d,h),b},E.prototype.docType=function(p,d,h){var b,O,A,D,S;if(h||(h=0),this.openNode(p,d,h),d.state=t.OpenTag,D=this.indent(p,d,h),D+="<!DOCTYPE "+p.root().name,p.pubID&&p.sysID?D+=' PUBLIC "'+p.pubID+'" "'+p.sysID+'"':p.sysID&&(D+=' SYSTEM "'+p.sysID+'"'),p.children.length>0){for(D+=" [",D+=this.endline(p,d,h),d.state=t.InsideTag,S=p.children,O=0,A=S.length;O<A;O++)b=S[O],D+=this.writeChildNode(b,d,h+1);d.state=t.CloseTag,D+="]"}return d.state=t.CloseTag,D+=d.spaceBeforeSlash+">",D+=this.endline(p,d,h),d.state=t.None,this.closeNode(p,d,h),D},E.prototype.element=function(p,d,h){var b,O,A,D,S,L,C,F,z,H,V,$,j,ae;h||(h=0),H=!1,V="",this.openNode(p,d,h),d.state=t.OpenTag,V+=this.indent(p,d,h)+"<"+p.name,$=p.attribs;for(z in $)_.call($,z)&&(b=$[z],V+=this.attribute(b,d,h));if(A=p.children.length,D=A===0?null:p.children[0],A===0||p.children.every(function(J){return(J.type===e.Text||J.type===e.Raw)&&J.value===""}))d.allowEmpty?(V+=">",d.state=t.CloseTag,V+="</"+p.name+">"+this.endline(p,d,h)):(d.state=t.CloseTag,V+=d.spaceBeforeSlash+"/>"+this.endline(p,d,h));else if(d.pretty&&A===1&&(D.type===e.Text||D.type===e.Raw)&&D.value!=null)V+=">",d.state=t.InsideTag,d.suppressPrettyCount++,H=!0,V+=this.writeChildNode(D,d,h+1),d.suppressPrettyCount--,H=!1,d.state=t.CloseTag,V+="</"+p.name+">"+this.endline(p,d,h);else{if(d.dontPrettyTextNodes){for(j=p.children,S=0,C=j.length;S<C;S++)if(O=j[S],(O.type===e.Text||O.type===e.Raw)&&O.value!=null){d.suppressPrettyCount++,H=!0;break}}for(V+=">"+this.endline(p,d,h),d.state=t.InsideTag,ae=p.children,L=0,F=ae.length;L<F;L++)O=ae[L],V+=this.writeChildNode(O,d,h+1);d.state=t.CloseTag,V+=this.indent(p,d,h)+"</"+p.name+">",H&&d.suppressPrettyCount--,V+=this.endline(p,d,h),d.state=t.None}return this.closeNode(p,d,h),V},E.prototype.writeChildNode=function(p,d,h){switch(p.type){case e.CData:return this.cdata(p,d,h);case e.Comment:return this.comment(p,d,h);case e.Element:return this.element(p,d,h);case e.Raw:return this.raw(p,d,h);case e.Text:return this.text(p,d,h);case e.ProcessingInstruction:return this.processingInstruction(p,d,h);case e.Dummy:return"";case e.Declaration:return this.declaration(p,d,h);case e.DocType:return this.docType(p,d,h);case e.AttributeDeclaration:return this.dtdAttList(p,d,h);case e.ElementDeclaration:return this.dtdElement(p,d,h);case e.EntityDeclaration:return this.dtdEntity(p,d,h);case e.NotationDeclaration:return this.dtdNotation(p,d,h);default:throw new Error("Unknown XML node type: "+p.constructor.name)}},E.prototype.processingInstruction=function(p,d,h){var b;return this.openNode(p,d,h),d.state=t.OpenTag,b=this.indent(p,d,h)+"<?",d.state=t.InsideTag,b+=p.target,p.value&&(b+=" "+p.value),d.state=t.CloseTag,b+=d.spaceBeforeSlash+"?>",b+=this.endline(p,d,h),d.state=t.None,this.closeNode(p,d,h),b},E.prototype.raw=function(p,d,h){var b;return this.openNode(p,d,h),d.state=t.OpenTag,b=this.indent(p,d,h),d.state=t.InsideTag,b+=p.value,d.state=t.CloseTag,b+=this.endline(p,d,h),d.state=t.None,this.closeNode(p,d,h),b},E.prototype.text=function(p,d,h){var b;return this.openNode(p,d,h),d.state=t.OpenTag,b=this.indent(p,d,h),d.state=t.InsideTag,b+=p.value,d.state=t.CloseTag,b+=this.endline(p,d,h),d.state=t.None,this.closeNode(p,d,h),b},E.prototype.dtdAttList=function(p,d,h){var b;return this.openNode(p,d,h),d.state=t.OpenTag,b=this.indent(p,d,h)+"<!ATTLIST",d.state=t.InsideTag,b+=" "+p.elementName+" "+p.attributeName+" "+p.attributeType,p.defaultValueType!=="#DEFAULT"&&(b+=" "+p.defaultValueType),p.defaultValue&&(b+=' "'+p.defaultValue+'"'),d.state=t.CloseTag,b+=d.spaceBeforeSlash+">"+this.endline(p,d,h),d.state=t.None,this.closeNode(p,d,h),b},E.prototype.dtdElement=function(p,d,h){var b;return this.openNode(p,d,h),d.state=t.OpenTag,b=this.indent(p,d,h)+"<!ELEMENT",d.state=t.InsideTag,b+=" "+p.name+" "+p.value,d.state=t.CloseTag,b+=d.spaceBeforeSlash+">"+this.endline(p,d,h),d.state=t.None,this.closeNode(p,d,h),b},E.prototype.dtdEntity=function(p,d,h){var b;return this.openNode(p,d,h),d.state=t.OpenTag,b=this.indent(p,d,h)+"<!ENTITY",d.state=t.InsideTag,p.pe&&(b+=" %"),b+=" "+p.name,p.value?b+=' "'+p.value+'"':(p.pubID&&p.sysID?b+=' PUBLIC "'+p.pubID+'" "'+p.sysID+'"':p.sysID&&(b+=' SYSTEM "'+p.sysID+'"'),p.nData&&(b+=" NDATA "+p.nData)),d.state=t.CloseTag,b+=d.spaceBeforeSlash+">"+this.endline(p,d,h),d.state=t.None,this.closeNode(p,d,h),b},E.prototype.dtdNotation=function(p,d,h){var b;return this.openNode(p,d,h),d.state=t.OpenTag,b=this.indent(p,d,h)+"<!NOTATION",d.state=t.InsideTag,b+=" "+p.name,p.pubID&&p.sysID?b+=' PUBLIC "'+p.pubID+'" "'+p.sysID+'"':p.pubID?b+=' PUBLIC "'+p.pubID+'"':p.sysID&&(b+=' SYSTEM "'+p.sysID+'"'),d.state=t.CloseTag,b+=d.spaceBeforeSlash+">"+this.endline(p,d,h),d.state=t.None,this.closeNode(p,d,h),b},E.prototype.openNode=function(p,d,h){},E.prototype.closeNode=function(p,d,h){},E.prototype.openAttribute=function(p,d,h){},E.prototype.closeAttribute=function(p,d,h){},E}()}).call(qw)});var Ks=k((Uw,$w)=>{"use strict";(function(){var e,t,i=function(n,s){for(var o in s)r.call(s,o)&&(n[o]=s[o]);function a(){this.constructor=n}return a.prototype=s.prototype,n.prototype=new a,n.__super__=s.prototype,n},r={}.hasOwnProperty;t=Hu(),$w.exports=e=function(n){i(s,n);function s(o){s.__super__.constructor.call(this,o)}return s.prototype.document=function(o,a){var c,u,f,g,x;for(a=this.filterOptions(a),g="",x=o.children,u=0,f=x.length;u<f;u++)c=x[u],g+=this.writeChildNode(c,a,0);return a.pretty&&g.slice(-a.newline.length)===a.newline&&(g=g.slice(0,-a.newline.length)),g},s}(t)}).call(Uw)});var Gu=k((zw,Hw)=>{"use strict";(function(){var e,t,i,r,n,s,o,a,c=function(f,g){for(var x in g)u.call(g,x)&&(f[x]=g[x]);function l(){this.constructor=f}return l.prototype=g.prototype,f.prototype=new l,f.__super__=g.prototype,f},u={}.hasOwnProperty;a=It().isPlainObject,i=Bu(),t=Vb(),n=at(),e=Ce(),o=zu(),s=Ks(),Hw.exports=r=function(f){c(g,f);function g(x){g.__super__.constructor.call(this,null),this.name="#document",this.type=e.Document,this.documentURI=null,this.domConfig=new t,x||(x={}),x.writer||(x.writer=new s),this.options=x,this.stringify=new o(x)}return Object.defineProperty(g.prototype,"implementation",{value:new i}),Object.defineProperty(g.prototype,"doctype",{get:function(){var x,l,m,v;for(v=this.children,l=0,m=v.length;l<m;l++)if(x=v[l],x.type===e.DocType)return x;return null}}),Object.defineProperty(g.prototype,"documentElement",{get:function(){return this.rootObject||null}}),Object.defineProperty(g.prototype,"inputEncoding",{get:function(){return null}}),Object.defineProperty(g.prototype,"strictErrorChecking",{get:function(){return!1}}),Object.defineProperty(g.prototype,"xmlEncoding",{get:function(){return this.children.length!==0&&this.children[0].type===e.Declaration?this.children[0].encoding:null}}),Object.defineProperty(g.prototype,"xmlStandalone",{get:function(){return this.children.length!==0&&this.children[0].type===e.Declaration?this.children[0].standalone==="yes":!1}}),Object.defineProperty(g.prototype,"xmlVersion",{get:function(){return this.children.length!==0&&this.children[0].type===e.Declaration?this.children[0].version:"1.0"}}),Object.defineProperty(g.prototype,"URL",{get:function(){return this.documentURI}}),Object.defineProperty(g.prototype,"origin",{get:function(){return null}}),Object.defineProperty(g.prototype,"compatMode",{get:function(){return null}}),Object.defineProperty(g.prototype,"characterSet",{get:function(){return null}}),Object.defineProperty(g.prototype,"contentType",{get:function(){return null}}),g.prototype.end=function(x){var l;return l={},x?a(x)&&(l=x,x=this.options.writer):x=this.options.writer,x.document(this,x.filterOptions(l))},g.prototype.toString=function(x){return this.options.writer.document(this,this.options.writer.filterOptions(x))},g.prototype.createElement=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createDocumentFragment=function(){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createTextNode=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createComment=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createCDATASection=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createProcessingInstruction=function(x,l){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createAttribute=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createEntityReference=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.getElementsByTagName=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.importNode=function(x,l){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createElementNS=function(x,l){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createAttributeNS=function(x,l){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.getElementsByTagNameNS=function(x,l){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.getElementById=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.adoptNode=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.normalizeDocument=function(){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.renameNode=function(x,l,m){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.getElementsByClassName=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createEvent=function(x){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createRange=function(){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createNodeIterator=function(x,l,m){throw new Error("This DOM method is not implemented."+this.debugInfo())},g.prototype.createTreeWalker=function(x,l,m){throw new Error("This DOM method is not implemented."+this.debugInfo())},g}(n)}).call(zw)});var Xw=k((Gw,Vw)=>{"use strict";(function(){var e,t,i,r,n,s,o,a,c,u,f,g,x,l,m,v,w,_,E,p,d,h,b,O,A={}.hasOwnProperty;O=It(),h=O.isObject,d=O.isFunction,b=O.isPlainObject,p=O.getValue,e=Ce(),g=Gu(),l=Ms(),r=qs(),n=Bs(),v=Xs(),E=Ys(),m=Ws(),u=Us(),f=Vs(),s=$s(),a=zs(),o=Hs(),c=Gs(),i=Uu(),_=zu(),w=Ks(),t=rn(),Vw.exports=x=function(){function D(S,L,C){var F;this.name="?xml",this.type=e.Document,S||(S={}),F={},S.writer?b(S.writer)&&(F=S.writer,S.writer=new w):S.writer=new w,this.options=S,this.writer=S.writer,this.writerOptions=this.writer.filterOptions(F),this.stringify=new _(S),this.onDataCallback=L||function(){},this.onEndCallback=C||function(){},this.currentNode=null,this.currentLevel=-1,this.openTags={},this.documentStarted=!1,this.documentCompleted=!1,this.root=null}return D.prototype.createChildNode=function(S){var L,C,F,z,H,V,$,j;switch(S.type){case e.CData:this.cdata(S.value);break;case e.Comment:this.comment(S.value);break;case e.Element:F={},$=S.attribs;for(C in $)A.call($,C)&&(L=$[C],F[C]=L.value);this.node(S.name,F);break;case e.Dummy:this.dummy();break;case e.Raw:this.raw(S.value);break;case e.Text:this.text(S.value);break;case e.ProcessingInstruction:this.instruction(S.target,S.value);break;default:throw new Error("This XML node type is not supported in a JS object: "+S.constructor.name)}for(j=S.children,H=0,V=j.length;H<V;H++)z=j[H],this.createChildNode(z),z.type===e.Element&&this.up();return this},D.prototype.dummy=function(){return this},D.prototype.node=function(S,L,C){var F;if(S==null)throw new Error("Missing node name.");if(this.root&&this.currentLevel===-1)throw new Error("Document can only have one root node. "+this.debugInfo(S));return this.openCurrent(),S=p(S),L==null&&(L={}),L=p(L),h(L)||(F=[L,C],C=F[0],L=F[1]),this.currentNode=new l(this,S,L),this.currentNode.children=!1,this.currentLevel++,this.openTags[this.currentLevel]=this.currentNode,C!=null&&this.text(C),this},D.prototype.element=function(S,L,C){var F,z,H,V,$,j;if(this.currentNode&&this.currentNode.type===e.DocType)this.dtdElement.apply(this,arguments);else if(Array.isArray(S)||h(S)||d(S))for(V=this.options.noValidation,this.options.noValidation=!0,j=new g(this.options).element("TEMP_ROOT"),j.element(S),this.options.noValidation=V,$=j.children,z=0,H=$.length;z<H;z++)F=$[z],this.createChildNode(F),F.type===e.Element&&this.up();else this.node(S,L,C);return this},D.prototype.attribute=function(S,L){var C,F;if(!this.currentNode||this.currentNode.children)throw new Error("att() can only be used immediately after an ele() call in callback mode. "+this.debugInfo(S));if(S!=null&&(S=p(S)),h(S))for(C in S)A.call(S,C)&&(F=S[C],this.attribute(C,F));else d(L)&&(L=L.apply()),this.options.keepNullAttributes&&L==null?this.currentNode.attribs[S]=new i(this,S,""):L!=null&&(this.currentNode.attribs[S]=new i(this,S,L));return this},D.prototype.text=function(S){var L;return this.openCurrent(),L=new E(this,S),this.onData(this.writer.text(L,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},D.prototype.cdata=function(S){var L;return this.openCurrent(),L=new r(this,S),this.onData(this.writer.cdata(L,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},D.prototype.comment=function(S){var L;return this.openCurrent(),L=new n(this,S),this.onData(this.writer.comment(L,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},D.prototype.raw=function(S){var L;return this.openCurrent(),L=new v(this,S),this.onData(this.writer.raw(L,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},D.prototype.instruction=function(S,L){var C,F,z,H,V;if(this.openCurrent(),S!=null&&(S=p(S)),L!=null&&(L=p(L)),Array.isArray(S))for(C=0,H=S.length;C<H;C++)F=S[C],this.instruction(F);else if(h(S))for(F in S)A.call(S,F)&&(z=S[F],this.instruction(F,z));else d(L)&&(L=L.apply()),V=new m(this,S,L),this.onData(this.writer.processingInstruction(V,this.writerOptions,this.currentLevel+1),this.currentLevel+1);return this},D.prototype.declaration=function(S,L,C){var F;if(this.openCurrent(),this.documentStarted)throw new Error("declaration() must be the first node.");return F=new u(this,S,L,C),this.onData(this.writer.declaration(F,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},D.prototype.doctype=function(S,L,C){if(this.openCurrent(),S==null)throw new Error("Missing root node name.");if(this.root)throw new Error("dtd() must come before the root node.");return this.currentNode=new f(this,L,C),this.currentNode.rootNodeName=S,this.currentNode.children=!1,this.currentLevel++,this.openTags[this.currentLevel]=this.currentNode,this},D.prototype.dtdElement=function(S,L){var C;return this.openCurrent(),C=new o(this,S,L),this.onData(this.writer.dtdElement(C,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},D.prototype.attList=function(S,L,C,F,z){var H;return this.openCurrent(),H=new s(this,S,L,C,F,z),this.onData(this.writer.dtdAttList(H,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},D.prototype.entity=function(S,L){var C;return this.openCurrent(),C=new a(this,!1,S,L),this.onData(this.writer.dtdEntity(C,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},D.prototype.pEntity=function(S,L){var C;return this.openCurrent(),C=new a(this,!0,S,L),this.onData(this.writer.dtdEntity(C,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},D.prototype.notation=function(S,L){var C;return this.openCurrent(),C=new c(this,S,L),this.onData(this.writer.dtdNotation(C,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},D.prototype.up=function(){if(this.currentLevel<0)throw new Error("The document node has no parent.");return this.currentNode?(this.currentNode.children?this.closeNode(this.currentNode):this.openNode(this.currentNode),this.currentNode=null):this.closeNode(this.openTags[this.currentLevel]),delete this.openTags[this.currentLevel],this.currentLevel--,this},D.prototype.end=function(){for(;this.currentLevel>=0;)this.up();return this.onEnd()},D.prototype.openCurrent=function(){if(this.currentNode)return this.currentNode.children=!0,this.openNode(this.currentNode)},D.prototype.openNode=function(S){var L,C,F,z;if(!S.isOpen){if(!this.root&&this.currentLevel===0&&S.type===e.Element&&(this.root=S),C="",S.type===e.Element){this.writerOptions.state=t.OpenTag,C=this.writer.indent(S,this.writerOptions,this.currentLevel)+"<"+S.name,z=S.attribs;for(F in z)A.call(z,F)&&(L=z[F],C+=this.writer.attribute(L,this.writerOptions,this.currentLevel));C+=(S.children?">":"/>")+this.writer.endline(S,this.writerOptions,this.currentLevel),this.writerOptions.state=t.InsideTag}else this.writerOptions.state=t.OpenTag,C=this.writer.indent(S,this.writerOptions,this.currentLevel)+"<!DOCTYPE "+S.rootNodeName,S.pubID&&S.sysID?C+=' PUBLIC "'+S.pubID+'" "'+S.sysID+'"':S.sysID&&(C+=' SYSTEM "'+S.sysID+'"'),S.children?(C+=" [",this.writerOptions.state=t.InsideTag):(this.writerOptions.state=t.CloseTag,C+=">"),C+=this.writer.endline(S,this.writerOptions,this.currentLevel);return this.onData(C,this.currentLevel),S.isOpen=!0}},D.prototype.closeNode=function(S){var L;if(!S.isClosed)return L="",this.writerOptions.state=t.CloseTag,S.type===e.Element?L=this.writer.indent(S,this.writerOptions,this.currentLevel)+"</"+S.name+">"+this.writer.endline(S,this.writerOptions,this.currentLevel):L=this.writer.indent(S,this.writerOptions,this.currentLevel)+"]>"+this.writer.endline(S,this.writerOptions,this.currentLevel),this.writerOptions.state=t.None,this.onData(L,this.currentLevel),S.isClosed=!0},D.prototype.onData=function(S,L){return this.documentStarted=!0,this.onDataCallback(S,L+1)},D.prototype.onEnd=function(){return this.documentCompleted=!0,this.onEndCallback()},D.prototype.debugInfo=function(S){return S==null?"":"node: <"+S+">"},D.prototype.ele=function(){return this.element.apply(this,arguments)},D.prototype.nod=function(S,L,C){return this.node(S,L,C)},D.prototype.txt=function(S){return this.text(S)},D.prototype.dat=function(S){return this.cdata(S)},D.prototype.com=function(S){return this.comment(S)},D.prototype.ins=function(S,L){return this.instruction(S,L)},D.prototype.dec=function(S,L,C){return this.declaration(S,L,C)},D.prototype.dtd=function(S,L,C){return this.doctype(S,L,C)},D.prototype.e=function(S,L,C){return this.element(S,L,C)},D.prototype.n=function(S,L,C){return this.node(S,L,C)},D.prototype.t=function(S){return this.text(S)},D.prototype.d=function(S){return this.cdata(S)},D.prototype.c=function(S){return this.comment(S)},D.prototype.r=function(S){return this.raw(S)},D.prototype.i=function(S,L){return this.instruction(S,L)},D.prototype.att=function(){return this.currentNode&&this.currentNode.type===e.DocType?this.attList.apply(this,arguments):this.attribute.apply(this,arguments)},D.prototype.a=function(){return this.currentNode&&this.currentNode.type===e.DocType?this.attList.apply(this,arguments):this.attribute.apply(this,arguments)},D.prototype.ent=function(S,L){return this.entity(S,L)},D.prototype.pent=function(S,L){return this.pEntity(S,L)},D.prototype.not=function(S,L){return this.notation(S,L)},D}()}).call(Gw)});var Kw=k((Yw,Ww)=>{"use strict";(function(){var e,t,i,r,n=function(o,a){for(var c in a)s.call(a,c)&&(o[c]=a[c]);function u(){this.constructor=o}return u.prototype=a.prototype,o.prototype=new u,o.__super__=a.prototype,o},s={}.hasOwnProperty;e=Ce(),r=Hu(),t=rn(),Ww.exports=i=function(o){n(a,o);function a(c,u){this.stream=c,a.__super__.constructor.call(this,u)}return a.prototype.endline=function(c,u,f){return c.isLastRootNode&&u.state===t.CloseTag?"":a.__super__.endline.call(this,c,u,f)},a.prototype.document=function(c,u){var f,g,x,l,m,v,w,_,E;for(w=c.children,g=x=0,m=w.length;x<m;g=++x)f=w[g],f.isLastRootNode=g===c.children.length-1;for(u=this.filterOptions(u),_=c.children,E=[],l=0,v=_.length;l<v;l++)f=_[l],E.push(this.writeChildNode(f,u,0));return E},a.prototype.attribute=function(c,u,f){return this.stream.write(a.__super__.attribute.call(this,c,u,f))},a.prototype.cdata=function(c,u,f){return this.stream.write(a.__super__.cdata.call(this,c,u,f))},a.prototype.comment=function(c,u,f){return this.stream.write(a.__super__.comment.call(this,c,u,f))},a.prototype.declaration=function(c,u,f){return this.stream.write(a.__super__.declaration.call(this,c,u,f))},a.prototype.docType=function(c,u,f){var g,x,l,m;if(f||(f=0),this.openNode(c,u,f),u.state=t.OpenTag,this.stream.write(this.indent(c,u,f)),this.stream.write("<!DOCTYPE "+c.root().name),c.pubID&&c.sysID?this.stream.write(' PUBLIC "'+c.pubID+'" "'+c.sysID+'"'):c.sysID&&this.stream.write(' SYSTEM "'+c.sysID+'"'),c.children.length>0){for(this.stream.write(" ["),this.stream.write(this.endline(c,u,f)),u.state=t.InsideTag,m=c.children,x=0,l=m.length;x<l;x++)g=m[x],this.writeChildNode(g,u,f+1);u.state=t.CloseTag,this.stream.write("]")}return u.state=t.CloseTag,this.stream.write(u.spaceBeforeSlash+">"),this.stream.write(this.endline(c,u,f)),u.state=t.None,this.closeNode(c,u,f)},a.prototype.element=function(c,u,f){var g,x,l,m,v,w,_,E,p,d;f||(f=0),this.openNode(c,u,f),u.state=t.OpenTag,this.stream.write(this.indent(c,u,f)+"<"+c.name),p=c.attribs;for(_ in p)s.call(p,_)&&(g=p[_],this.attribute(g,u,f));if(l=c.children.length,m=l===0?null:c.children[0],l===0||c.children.every(function(h){return(h.type===e.Text||h.type===e.Raw)&&h.value===""}))u.allowEmpty?(this.stream.write(">"),u.state=t.CloseTag,this.stream.write("</"+c.name+">")):(u.state=t.CloseTag,this.stream.write(u.spaceBeforeSlash+"/>"));else if(u.pretty&&l===1&&(m.type===e.Text||m.type===e.Raw)&&m.value!=null)this.stream.write(">"),u.state=t.InsideTag,u.suppressPrettyCount++,E=!0,this.writeChildNode(m,u,f+1),u.suppressPrettyCount--,E=!1,u.state=t.CloseTag,this.stream.write("</"+c.name+">");else{for(this.stream.write(">"+this.endline(c,u,f)),u.state=t.InsideTag,d=c.children,v=0,w=d.length;v<w;v++)x=d[v],this.writeChildNode(x,u,f+1);u.state=t.CloseTag,this.stream.write(this.indent(c,u,f)+"</"+c.name+">")}return this.stream.write(this.endline(c,u,f)),u.state=t.None,this.closeNode(c,u,f)},a.prototype.processingInstruction=function(c,u,f){return this.stream.write(a.__super__.processingInstruction.call(this,c,u,f))},a.prototype.raw=function(c,u,f){return this.stream.write(a.__super__.raw.call(this,c,u,f))},a.prototype.text=function(c,u,f){return this.stream.write(a.__super__.text.call(this,c,u,f))},a.prototype.dtdAttList=function(c,u,f){return this.stream.write(a.__super__.dtdAttList.call(this,c,u,f))},a.prototype.dtdElement=function(c,u,f){return this.stream.write(a.__super__.dtdElement.call(this,c,u,f))},a.prototype.dtdEntity=function(c,u,f){return this.stream.write(a.__super__.dtdEntity.call(this,c,u,f))},a.prototype.dtdNotation=function(c,u,f){return this.stream.write(a.__super__.dtdNotation.call(this,c,u,f))},a}(r)}).call(Yw)});var Zw=k((Jw,ui)=>{"use strict";(function(){var e,t,i,r,n,s,o,a,c,u;u=It(),a=u.assign,c=u.isFunction,i=Bu(),r=Gu(),n=Xw(),o=Ks(),s=Kw(),e=Ce(),t=rn(),ui.exports.create=function(f,g,x,l){var m,v;if(f==null)throw new Error("Root element needs a name.");return l=a({},g,x,l),m=new r(l),v=m.element(f),l.headless||(m.declaration(l),(l.pubID!=null||l.sysID!=null)&&m.dtd(l)),v},ui.exports.begin=function(f,g,x){var l;return c(f)&&(l=[f,g],g=l[0],x=l[1],f={}),g?new n(f,g,x):new r(f)},ui.exports.stringWriter=function(f){return new o(f)},ui.exports.streamWriter=function(f,g){return new s(f,g)},ui.exports.implementation=new i,ui.exports.nodeType=e,ui.exports.writerState=t}).call(Jw)});var Qw=k(Vu=>{"use strict";(function(){"use strict";var e,t,i,r,n,s={}.hasOwnProperty;e=Zw(),t=Fs().defaults,r=function(o){return typeof o=="string"&&(o.indexOf("&")>=0||o.indexOf(">")>=0||o.indexOf("<")>=0)},n=function(o){return"<![CDATA["+i(o)+"]]>"},i=function(o){return o.replace("]]>","]]]]><![CDATA[>")},Vu.Builder=function(){function o(a){var c,u,f;this.options={},u=t["0.2"];for(c in u)s.call(u,c)&&(f=u[c],this.options[c]=f);for(c in a)s.call(a,c)&&(f=a[c],this.options[c]=f)}return o.prototype.buildObject=function(a){var c,u,f,g,x;return c=this.options.attrkey,u=this.options.charkey,Object.keys(a).length===1&&this.options.rootName===t["0.2"].rootName?(x=Object.keys(a)[0],a=a[x]):x=this.options.rootName,f=function(l){return function(m,v){var w,_,E,p,d,h;if(typeof v!="object")l.options.cdata&&r(v)?m.raw(n(v)):m.txt(v);else if(Array.isArray(v)){for(p in v)if(s.call(v,p)){_=v[p];for(d in _)E=_[d],m=f(m.ele(d),E).up()}}else for(d in v)if(s.call(v,d))if(_=v[d],d===c){if(typeof _=="object")for(w in _)h=_[w],m=m.att(w,h)}else if(d===u)l.options.cdata&&r(_)?m=m.raw(n(_)):m=m.txt(_);else if(Array.isArray(_))for(p in _)s.call(_,p)&&(E=_[p],typeof E=="string"?l.options.cdata&&r(E)?m=m.ele(d).raw(n(E)).up():m=m.ele(d,E).up():m=f(m.ele(d),E).up());else typeof _=="object"?m=f(m.ele(d),_).up():typeof _=="string"&&l.options.cdata&&r(_)?m=m.ele(d).raw(n(_)).up():(_==null&&(_=""),m=m.ele(d,_.toString()).up());return m}}(this),g=e.create(x,this.options.xmldec,this.options.doctype,{headless:this.options.headless,allowSurrogateChars:this.options.allowSurrogateChars}),f(g,a).end(this.options.renderOpts)},o}()}).call(Vu)});var e0=k(Js=>{"use strict";(function(e){e.parser=function(T,y){return new i(T,y)},e.SAXParser=i,e.SAXStream=u,e.createStream=c,e.MAX_BUFFER_LENGTH=64*1024;var t=["comment","sgmlDecl","textNode","tagName","doctype","procInstName","procInstBody","entity","attribName","attribValue","cdata","script"];e.EVENTS=["text","processinginstruction","sgmldeclaration","doctype","comment","opentagstart","attribute","opentag","closetag","opencdata","cdata","closecdata","error","end","ready","script","opennamespace","closenamespace"];function i(T,y){if(!(this instanceof i))return new i(T,y);var R=this;n(R),R.q=R.c="",R.bufferCheckPosition=e.MAX_BUFFER_LENGTH,R.opt=y||{},R.opt.lowercase=R.opt.lowercase||R.opt.lowercasetags,R.looseCase=R.opt.lowercase?"toLowerCase":"toUpperCase",R.tags=[],R.closed=R.closedRoot=R.sawRoot=!1,R.tag=R.error=null,R.strict=!!T,R.noscript=!!(T||R.opt.noscript),R.state=C.BEGIN,R.strictEntities=R.opt.strictEntities,R.ENTITIES=R.strictEntities?Object.create(e.XML_ENTITIES):Object.create(e.ENTITIES),R.attribList=[],R.opt.xmlns&&(R.ns=Object.create(p)),R.trackPosition=R.opt.position!==!1,R.trackPosition&&(R.position=R.line=R.column=0),z(R,"onready")}Object.create||(Object.create=function(T){function y(){}y.prototype=T;var R=new y;return R}),Object.keys||(Object.keys=function(T){var y=[];for(var R in T)T.hasOwnProperty(R)&&y.push(R);return y});function r(T){for(var y=Math.max(e.MAX_BUFFER_LENGTH,10),R=0,N=0,P=t.length;N<P;N++){var q=T[t[N]].length;if(q>y)switch(t[N]){case"textNode":V(T);break;case"cdata":H(T,"oncdata",T.cdata),T.cdata="";break;case"script":H(T,"onscript",T.script),T.script="";break;default:j(T,"Max buffer length exceeded: "+t[N])}R=Math.max(R,q)}var X=e.MAX_BUFFER_LENGTH-R;T.bufferCheckPosition=X+T.position}function n(T){for(var y=0,R=t.length;y<R;y++)T[t[y]]=""}function s(T){V(T),T.cdata!==""&&(H(T,"oncdata",T.cdata),T.cdata=""),T.script!==""&&(H(T,"onscript",T.script),T.script="")}i.prototype={end:function(){ae(this)},write:oo,resume:function(){return this.error=null,this},close:function(){return this.write(null)},flush:function(){s(this)}};var o;try{o=require("stream").Stream}catch{o=function(){}}var a=e.EVENTS.filter(function(T){return T!=="error"&&T!=="end"});function c(T,y){return new u(T,y)}function u(T,y){if(!(this instanceof u))return new u(T,y);o.apply(this),this._parser=new i(T,y),this.writable=!0,this.readable=!0;var R=this;this._parser.onend=function(){R.emit("end")},this._parser.onerror=function(N){R.emit("error",N),R._parser.error=null},this._decoder=null,a.forEach(function(N){Object.defineProperty(R,"on"+N,{get:function(){return R._parser["on"+N]},set:function(P){if(!P)return R.removeAllListeners(N),R._parser["on"+N]=P,P;R.on(N,P)},enumerable:!0,configurable:!1})})}u.prototype=Object.create(o.prototype,{constructor:{value:u}}),u.prototype.write=function(T){if(typeof Buffer=="function"&&typeof Buffer.isBuffer=="function"&&Buffer.isBuffer(T)){if(!this._decoder){var y=require("string_decoder").StringDecoder;this._decoder=new y("utf8")}T=this._decoder.write(T)}return this._parser.write(T.toString()),this.emit("data",T),!0},u.prototype.end=function(T){return T&&T.length&&this.write(T),this._parser.end(),!0},u.prototype.on=function(T,y){var R=this;return!R._parser["on"+T]&&a.indexOf(T)!==-1&&(R._parser["on"+T]=function(){var N=arguments.length===1?[arguments[0]]:Array.apply(null,arguments);N.splice(0,0,T),R.emit.apply(R,N)}),o.prototype.on.call(R,T,y)};var f=`\r
	 `,g="0124356789",x="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",l=`'"`,m=f+">",v="[CDATA[",w="DOCTYPE",_="http://www.w3.org/XML/1998/namespace",E="http://www.w3.org/2000/xmlns/",p={xml:_,xmlns:E};f=A(f),g=A(g),x=A(x);var d=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,h=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/,b=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,O=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/;l=A(l),m=A(m);function A(T){return T.split("").reduce(function(y,R){return y[R]=!0,y},{})}function D(T){return Object.prototype.toString.call(T)==="[object RegExp]"}function S(T,y){return D(T)?!!y.match(T):T[y]}function L(T,y){return!S(T,y)}var C=0;e.STATE={BEGIN:C++,BEGIN_WHITESPACE:C++,TEXT:C++,TEXT_ENTITY:C++,OPEN_WAKA:C++,SGML_DECL:C++,SGML_DECL_QUOTED:C++,DOCTYPE:C++,DOCTYPE_QUOTED:C++,DOCTYPE_DTD:C++,DOCTYPE_DTD_QUOTED:C++,COMMENT_STARTING:C++,COMMENT:C++,COMMENT_ENDING:C++,COMMENT_ENDED:C++,CDATA:C++,CDATA_ENDING:C++,CDATA_ENDING_2:C++,PROC_INST:C++,PROC_INST_BODY:C++,PROC_INST_ENDING:C++,OPEN_TAG:C++,OPEN_TAG_SLASH:C++,ATTRIB:C++,ATTRIB_NAME:C++,ATTRIB_NAME_SAW_WHITE:C++,ATTRIB_VALUE:C++,ATTRIB_VALUE_QUOTED:C++,ATTRIB_VALUE_CLOSED:C++,ATTRIB_VALUE_UNQUOTED:C++,ATTRIB_VALUE_ENTITY_Q:C++,ATTRIB_VALUE_ENTITY_U:C++,CLOSE_TAG:C++,CLOSE_TAG_SAW_WHITE:C++,SCRIPT:C++,SCRIPT_ENDING:C++},e.XML_ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'"},e.ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'",AElig:198,Aacute:193,Acirc:194,Agrave:192,Aring:197,Atilde:195,Auml:196,Ccedil:199,ETH:208,Eacute:201,Ecirc:202,Egrave:200,Euml:203,Iacute:205,Icirc:206,Igrave:204,Iuml:207,Ntilde:209,Oacute:211,Ocirc:212,Ograve:210,Oslash:216,Otilde:213,Ouml:214,THORN:222,Uacute:218,Ucirc:219,Ugrave:217,Uuml:220,Yacute:221,aacute:225,acirc:226,aelig:230,agrave:224,aring:229,atilde:227,auml:228,ccedil:231,eacute:233,ecirc:234,egrave:232,eth:240,euml:235,iacute:237,icirc:238,igrave:236,iuml:239,ntilde:241,oacute:243,ocirc:244,ograve:242,oslash:248,otilde:245,ouml:246,szlig:223,thorn:254,uacute:250,ucirc:251,ugrave:249,uuml:252,yacute:253,yuml:255,copy:169,reg:174,nbsp:160,iexcl:161,cent:162,pound:163,curren:164,yen:165,brvbar:166,sect:167,uml:168,ordf:170,laquo:171,not:172,shy:173,macr:175,deg:176,plusmn:177,sup1:185,sup2:178,sup3:179,acute:180,micro:181,para:182,middot:183,cedil:184,ordm:186,raquo:187,frac14:188,frac12:189,frac34:190,iquest:191,times:215,divide:247,OElig:338,oelig:339,Scaron:352,scaron:353,Yuml:376,fnof:402,circ:710,tilde:732,Alpha:913,Beta:914,Gamma:915,Delta:916,Epsilon:917,Zeta:918,Eta:919,Theta:920,Iota:921,Kappa:922,Lambda:923,Mu:924,Nu:925,Xi:926,Omicron:927,Pi:928,Rho:929,Sigma:931,Tau:932,Upsilon:933,Phi:934,Chi:935,Psi:936,Omega:937,alpha:945,beta:946,gamma:947,delta:948,epsilon:949,zeta:950,eta:951,theta:952,iota:953,kappa:954,lambda:955,mu:956,nu:957,xi:958,omicron:959,pi:960,rho:961,sigmaf:962,sigma:963,tau:964,upsilon:965,phi:966,chi:967,psi:968,omega:969,thetasym:977,upsih:978,piv:982,ensp:8194,emsp:8195,thinsp:8201,zwnj:8204,zwj:8205,lrm:8206,rlm:8207,ndash:8211,mdash:8212,lsquo:8216,rsquo:8217,sbquo:8218,ldquo:8220,rdquo:8221,bdquo:8222,dagger:8224,Dagger:8225,bull:8226,hellip:8230,permil:8240,prime:8242,Prime:8243,lsaquo:8249,rsaquo:8250,oline:8254,frasl:8260,euro:8364,image:8465,weierp:8472,real:8476,trade:8482,alefsym:8501,larr:8592,uarr:8593,rarr:8594,darr:8595,harr:8596,crarr:8629,lArr:8656,uArr:8657,rArr:8658,dArr:8659,hArr:8660,forall:8704,part:8706,exist:8707,empty:8709,nabla:8711,isin:8712,notin:8713,ni:8715,prod:8719,sum:8721,minus:8722,lowast:8727,radic:8730,prop:8733,infin:8734,ang:8736,and:8743,or:8744,cap:8745,cup:8746,int:8747,there4:8756,sim:8764,cong:8773,asymp:8776,ne:8800,equiv:8801,le:8804,ge:8805,sub:8834,sup:8835,nsub:8836,sube:8838,supe:8839,oplus:8853,otimes:8855,perp:8869,sdot:8901,lceil:8968,rceil:8969,lfloor:8970,rfloor:8971,lang:9001,rang:9002,loz:9674,spades:9824,clubs:9827,hearts:9829,diams:9830},Object.keys(e.ENTITIES).forEach(function(T){var y=e.ENTITIES[T],R=typeof y=="number"?String.fromCharCode(y):y;e.ENTITIES[T]=R});for(var F in e.STATE)e.STATE[e.STATE[F]]=F;C=e.STATE;function z(T,y,R){T[y]&&T[y](R)}function H(T,y,R){T.textNode&&V(T),z(T,y,R)}function V(T){T.textNode=$(T.opt,T.textNode),T.textNode&&z(T,"ontext",T.textNode),T.textNode=""}function $(T,y){return T.trim&&(y=y.trim()),T.normalize&&(y=y.replace(/\s+/g," ")),y}function j(T,y){return V(T),T.trackPosition&&(y+=`
Line: `+T.line+`
Column: `+T.column+`
Char: `+T.c),y=new Error(y),T.error=y,z(T,"onerror",y),T}function ae(T){return T.sawRoot&&!T.closedRoot&&J(T,"Unclosed root tag"),T.state!==C.BEGIN&&T.state!==C.BEGIN_WHITESPACE&&T.state!==C.TEXT&&j(T,"Unexpected end"),V(T),T.c="",T.closed=!0,z(T,"onend"),i.call(T,T.strict,T.opt),T}function J(T,y){if(typeof T!="object"||!(T instanceof i))throw new Error("bad call to strictFail");T.strict&&j(T,y)}function _e(T){T.strict||(T.tagName=T.tagName[T.looseCase]());var y=T.tags[T.tags.length-1]||T,R=T.tag={name:T.tagName,attributes:{}};T.opt.xmlns&&(R.ns=y.ns),T.attribList.length=0,H(T,"onopentagstart",R)}function Ve(T,y){var R=T.indexOf(":"),N=R<0?["",T]:T.split(":"),P=N[0],q=N[1];return y&&T==="xmlns"&&(P="xmlns",q=""),{prefix:P,local:q}}function Nt(T){if(T.strict||(T.attribName=T.attribName[T.looseCase]()),T.attribList.indexOf(T.attribName)!==-1||T.tag.attributes.hasOwnProperty(T.attribName)){T.attribName=T.attribValue="";return}if(T.opt.xmlns){var y=Ve(T.attribName,!0),R=y.prefix,N=y.local;if(R==="xmlns")if(N==="xml"&&T.attribValue!==_)J(T,"xml: prefix must be bound to "+_+`
Actual: `+T.attribValue);else if(N==="xmlns"&&T.attribValue!==E)J(T,"xmlns: prefix must be bound to "+E+`
Actual: `+T.attribValue);else{var P=T.tag,q=T.tags[T.tags.length-1]||T;P.ns===q.ns&&(P.ns=Object.create(q.ns)),P.ns[N]=T.attribValue}T.attribList.push([T.attribName,T.attribValue])}else T.tag.attributes[T.attribName]=T.attribValue,H(T,"onattribute",{name:T.attribName,value:T.attribValue});T.attribName=T.attribValue=""}function De(T,y){if(T.opt.xmlns){var R=T.tag,N=Ve(T.tagName);R.prefix=N.prefix,R.local=N.local,R.uri=R.ns[N.prefix]||"",R.prefix&&!R.uri&&(J(T,"Unbound namespace prefix: "+JSON.stringify(T.tagName)),R.uri=N.prefix);var P=T.tags[T.tags.length-1]||T;R.ns&&P.ns!==R.ns&&Object.keys(R.ns).forEach(function(ol){H(T,"onopennamespace",{prefix:ol,uri:R.ns[ol]})});for(var q=0,X=T.attribList.length;q<X;q++){var ie=T.attribList[q],me=ie[0],yt=ie[1],qe=Ve(me,!0),Lt=qe.prefix,j0=qe.local,sl=Lt===""?"":R.ns[Lt]||"",ao={name:me,value:yt,prefix:Lt,local:j0,uri:sl};Lt&&Lt!=="xmlns"&&!sl&&(J(T,"Unbound namespace prefix: "+JSON.stringify(Lt)),ao.uri=Lt),T.tag.attributes[me]=ao,H(T,"onattribute",ao)}T.attribList.length=0}T.tag.isSelfClosing=!!y,T.sawRoot=!0,T.tags.push(T.tag),H(T,"onopentag",T.tag),y||(!T.noscript&&T.tagName.toLowerCase()==="script"?T.state=C.SCRIPT:T.state=C.TEXT,T.tag=null,T.tagName=""),T.attribName=T.attribValue="",T.attribList.length=0}function Me(T){if(!T.tagName){J(T,"Weird empty close tag."),T.textNode+="</>",T.state=C.TEXT;return}if(T.script){if(T.tagName!=="script"){T.script+="</"+T.tagName+">",T.tagName="",T.state=C.SCRIPT;return}H(T,"onscript",T.script),T.script=""}var y=T.tags.length,R=T.tagName;T.strict||(R=R[T.looseCase]());for(var N=R;y--;){var P=T.tags[y];if(P.name!==N)J(T,"Unexpected close tag");else break}if(y<0){J(T,"Unmatched closing tag: "+T.tagName),T.textNode+="</"+T.tagName+">",T.state=C.TEXT;return}T.tagName=R;for(var q=T.tags.length;q-- >y;){var X=T.tag=T.tags.pop();T.tagName=T.tag.name,H(T,"onclosetag",T.tagName);var ie={};for(var me in X.ns)ie[me]=X.ns[me];var yt=T.tags[T.tags.length-1]||T;T.opt.xmlns&&X.ns!==yt.ns&&Object.keys(X.ns).forEach(function(qe){var Lt=X.ns[qe];H(T,"onclosenamespace",{prefix:qe,uri:Lt})})}y===0&&(T.closedRoot=!0),T.tagName=T.attribValue=T.attribName="",T.attribList.length=0,T.state=C.TEXT}function Xt(T){var y=T.entity,R=y.toLowerCase(),N,P="";return T.ENTITIES[y]?T.ENTITIES[y]:T.ENTITIES[R]?T.ENTITIES[R]:(y=R,y.charAt(0)==="#"&&(y.charAt(1)==="x"?(y=y.slice(2),N=parseInt(y,16),P=N.toString(16)):(y=y.slice(1),N=parseInt(y,10),P=N.toString(10))),y=y.replace(/^0+/,""),P.toLowerCase()!==y?(J(T,"Invalid character entity"),"&"+T.entity+";"):String.fromCodePoint(N))}function Yt(T,y){y==="<"?(T.state=C.OPEN_WAKA,T.startTagPosition=T.position):L(f,y)&&(J(T,"Non-whitespace before first tag."),T.textNode=y,T.state=C.TEXT)}function Ie(T,y){var R="";return y<T.length&&(R=T.charAt(y)),R}function oo(T){var y=this;if(this.error)throw this.error;if(y.closed)return j(y,"Cannot write after close. Assign an onready handler.");if(T===null)return ae(y);typeof T=="object"&&(T=T.toString());for(var R=0,N="";N=Ie(T,R++),y.c=N,!!N;)switch(y.trackPosition&&(y.position++,N===`
`?(y.line++,y.column=0):y.column++),y.state){case C.BEGIN:if(y.state=C.BEGIN_WHITESPACE,N==="\uFEFF")continue;Yt(y,N);continue;case C.BEGIN_WHITESPACE:Yt(y,N);continue;case C.TEXT:if(y.sawRoot&&!y.closedRoot){for(var P=R-1;N&&N!=="<"&&N!=="&";)N=Ie(T,R++),N&&y.trackPosition&&(y.position++,N===`
`?(y.line++,y.column=0):y.column++);y.textNode+=T.substring(P,R-1)}N==="<"&&!(y.sawRoot&&y.closedRoot&&!y.strict)?(y.state=C.OPEN_WAKA,y.startTagPosition=y.position):(L(f,N)&&(!y.sawRoot||y.closedRoot)&&J(y,"Text data outside of root node."),N==="&"?y.state=C.TEXT_ENTITY:y.textNode+=N);continue;case C.SCRIPT:N==="<"?y.state=C.SCRIPT_ENDING:y.script+=N;continue;case C.SCRIPT_ENDING:N==="/"?y.state=C.CLOSE_TAG:(y.script+="<"+N,y.state=C.SCRIPT);continue;case C.OPEN_WAKA:if(N==="!")y.state=C.SGML_DECL,y.sgmlDecl="";else if(!S(f,N))if(S(d,N))y.state=C.OPEN_TAG,y.tagName=N;else if(N==="/")y.state=C.CLOSE_TAG,y.tagName="";else if(N==="?")y.state=C.PROC_INST,y.procInstName=y.procInstBody="";else{if(J(y,"Unencoded <"),y.startTagPosition+1<y.position){var q=y.position-y.startTagPosition;N=new Array(q).join(" ")+N}y.textNode+="<"+N,y.state=C.TEXT}continue;case C.SGML_DECL:(y.sgmlDecl+N).toUpperCase()===v?(H(y,"onopencdata"),y.state=C.CDATA,y.sgmlDecl="",y.cdata=""):y.sgmlDecl+N==="--"?(y.state=C.COMMENT,y.comment="",y.sgmlDecl=""):(y.sgmlDecl+N).toUpperCase()===w?(y.state=C.DOCTYPE,(y.doctype||y.sawRoot)&&J(y,"Inappropriately located doctype declaration"),y.doctype="",y.sgmlDecl=""):N===">"?(H(y,"onsgmldeclaration",y.sgmlDecl),y.sgmlDecl="",y.state=C.TEXT):(S(l,N)&&(y.state=C.SGML_DECL_QUOTED),y.sgmlDecl+=N);continue;case C.SGML_DECL_QUOTED:N===y.q&&(y.state=C.SGML_DECL,y.q=""),y.sgmlDecl+=N;continue;case C.DOCTYPE:N===">"?(y.state=C.TEXT,H(y,"ondoctype",y.doctype),y.doctype=!0):(y.doctype+=N,N==="["?y.state=C.DOCTYPE_DTD:S(l,N)&&(y.state=C.DOCTYPE_QUOTED,y.q=N));continue;case C.DOCTYPE_QUOTED:y.doctype+=N,N===y.q&&(y.q="",y.state=C.DOCTYPE);continue;case C.DOCTYPE_DTD:y.doctype+=N,N==="]"?y.state=C.DOCTYPE:S(l,N)&&(y.state=C.DOCTYPE_DTD_QUOTED,y.q=N);continue;case C.DOCTYPE_DTD_QUOTED:y.doctype+=N,N===y.q&&(y.state=C.DOCTYPE_DTD,y.q="");continue;case C.COMMENT:N==="-"?y.state=C.COMMENT_ENDING:y.comment+=N;continue;case C.COMMENT_ENDING:N==="-"?(y.state=C.COMMENT_ENDED,y.comment=$(y.opt,y.comment),y.comment&&H(y,"oncomment",y.comment),y.comment=""):(y.comment+="-"+N,y.state=C.COMMENT);continue;case C.COMMENT_ENDED:N!==">"?(J(y,"Malformed comment"),y.comment+="--"+N,y.state=C.COMMENT):y.state=C.TEXT;continue;case C.CDATA:N==="]"?y.state=C.CDATA_ENDING:y.cdata+=N;continue;case C.CDATA_ENDING:N==="]"?y.state=C.CDATA_ENDING_2:(y.cdata+="]"+N,y.state=C.CDATA);continue;case C.CDATA_ENDING_2:N===">"?(y.cdata&&H(y,"oncdata",y.cdata),H(y,"onclosecdata"),y.cdata="",y.state=C.TEXT):N==="]"?y.cdata+="]":(y.cdata+="]]"+N,y.state=C.CDATA);continue;case C.PROC_INST:N==="?"?y.state=C.PROC_INST_ENDING:S(f,N)?y.state=C.PROC_INST_BODY:y.procInstName+=N;continue;case C.PROC_INST_BODY:if(!y.procInstBody&&S(f,N))continue;N==="?"?y.state=C.PROC_INST_ENDING:y.procInstBody+=N;continue;case C.PROC_INST_ENDING:N===">"?(H(y,"onprocessinginstruction",{name:y.procInstName,body:y.procInstBody}),y.procInstName=y.procInstBody="",y.state=C.TEXT):(y.procInstBody+="?"+N,y.state=C.PROC_INST_BODY);continue;case C.OPEN_TAG:S(h,N)?y.tagName+=N:(_e(y),N===">"?De(y):N==="/"?y.state=C.OPEN_TAG_SLASH:(L(f,N)&&J(y,"Invalid character in tag name"),y.state=C.ATTRIB));continue;case C.OPEN_TAG_SLASH:N===">"?(De(y,!0),Me(y)):(J(y,"Forward-slash in opening tag not followed by >"),y.state=C.ATTRIB);continue;case C.ATTRIB:if(S(f,N))continue;N===">"?De(y):N==="/"?y.state=C.OPEN_TAG_SLASH:S(d,N)?(y.attribName=N,y.attribValue="",y.state=C.ATTRIB_NAME):J(y,"Invalid attribute name");continue;case C.ATTRIB_NAME:N==="="?y.state=C.ATTRIB_VALUE:N===">"?(J(y,"Attribute without value"),y.attribValue=y.attribName,Nt(y),De(y)):S(f,N)?y.state=C.ATTRIB_NAME_SAW_WHITE:S(h,N)?y.attribName+=N:J(y,"Invalid attribute name");continue;case C.ATTRIB_NAME_SAW_WHITE:if(N==="=")y.state=C.ATTRIB_VALUE;else{if(S(f,N))continue;J(y,"Attribute without value"),y.tag.attributes[y.attribName]="",y.attribValue="",H(y,"onattribute",{name:y.attribName,value:""}),y.attribName="",N===">"?De(y):S(d,N)?(y.attribName=N,y.state=C.ATTRIB_NAME):(J(y,"Invalid attribute name"),y.state=C.ATTRIB)}continue;case C.ATTRIB_VALUE:if(S(f,N))continue;S(l,N)?(y.q=N,y.state=C.ATTRIB_VALUE_QUOTED):(J(y,"Unquoted attribute value"),y.state=C.ATTRIB_VALUE_UNQUOTED,y.attribValue=N);continue;case C.ATTRIB_VALUE_QUOTED:if(N!==y.q){N==="&"?y.state=C.ATTRIB_VALUE_ENTITY_Q:y.attribValue+=N;continue}Nt(y),y.q="",y.state=C.ATTRIB_VALUE_CLOSED;continue;case C.ATTRIB_VALUE_CLOSED:S(f,N)?y.state=C.ATTRIB:N===">"?De(y):N==="/"?y.state=C.OPEN_TAG_SLASH:S(d,N)?(J(y,"No whitespace between attributes"),y.attribName=N,y.attribValue="",y.state=C.ATTRIB_NAME):J(y,"Invalid attribute name");continue;case C.ATTRIB_VALUE_UNQUOTED:if(L(m,N)){N==="&"?y.state=C.ATTRIB_VALUE_ENTITY_U:y.attribValue+=N;continue}Nt(y),N===">"?De(y):y.state=C.ATTRIB;continue;case C.CLOSE_TAG:if(y.tagName)N===">"?Me(y):S(h,N)?y.tagName+=N:y.script?(y.script+="</"+y.tagName,y.tagName="",y.state=C.SCRIPT):(L(f,N)&&J(y,"Invalid tagname in closing tag"),y.state=C.CLOSE_TAG_SAW_WHITE);else{if(S(f,N))continue;L(d,N)?y.script?(y.script+="</"+N,y.state=C.SCRIPT):J(y,"Invalid tagname in closing tag."):y.tagName=N}continue;case C.CLOSE_TAG_SAW_WHITE:if(S(f,N))continue;N===">"?Me(y):J(y,"Invalid characters in closing tag");continue;case C.TEXT_ENTITY:case C.ATTRIB_VALUE_ENTITY_Q:case C.ATTRIB_VALUE_ENTITY_U:var X,ie;switch(y.state){case C.TEXT_ENTITY:X=C.TEXT,ie="textNode";break;case C.ATTRIB_VALUE_ENTITY_Q:X=C.ATTRIB_VALUE_QUOTED,ie="attribValue";break;case C.ATTRIB_VALUE_ENTITY_U:X=C.ATTRIB_VALUE_UNQUOTED,ie="attribValue";break}N===";"?(y[ie]+=Xt(y),y.entity="",y.state=X):S(y.entity.length?O:b,N)?y.entity+=N:(J(y,"Invalid character in entity name"),y[ie]+="&"+y.entity+N,y.entity="",y.state=X);continue;default:throw new Error(y,"Unknown state: "+y.state)}return y.position>=y.bufferCheckPosition&&r(y),y}String.fromCodePoint||function(){var T=String.fromCharCode,y=Math.floor,R=function(){var N=16384,P=[],q,X,ie=-1,me=arguments.length;if(!me)return"";for(var yt="";++ie<me;){var qe=Number(arguments[ie]);if(!isFinite(qe)||qe<0||qe>1114111||y(qe)!==qe)throw RangeError("Invalid code point: "+qe);qe<=65535?P.push(qe):(qe-=65536,q=(qe>>10)+55296,X=qe%1024+56320,P.push(q,X)),(ie+1===me||P.length>N)&&(yt+=T.apply(null,P),P.length=0)}return yt};Object.defineProperty?Object.defineProperty(String,"fromCodePoint",{value:R,configurable:!0,writable:!0}):String.fromCodePoint=R}()})(typeof Js>"u"?Js.sax={}:Js)});var t0=k(Xu=>{"use strict";(function(){"use strict";Xu.stripBOM=function(e){return e[0]==="\uFEFF"?e.substring(1):e}}).call(Xu)});var Yu=k(Ai=>{"use strict";(function(){"use strict";var e;e=new RegExp(/(?!xmlns)^.*:/),Ai.normalize=function(t){return t.toLowerCase()},Ai.firstCharLowerCase=function(t){return t.charAt(0).toLowerCase()+t.slice(1)},Ai.stripPrefix=function(t){return t.replace(e,"")},Ai.parseNumbers=function(t){return isNaN(t)||(t=t%1===0?parseInt(t,10):parseFloat(t)),t},Ai.parseBooleans=function(t){return/^(?:true|false)$/i.test(t)&&(t=t.toLowerCase()==="true"),t}}).call(Ai)});var i0=k(Gt=>{"use strict";(function(){"use strict";var e,t,i,r,n,s,o,a,c,u=function(x,l){return function(){return x.apply(l,arguments)}},f=function(x,l){for(var m in l)g.call(l,m)&&(x[m]=l[m]);function v(){this.constructor=x}return v.prototype=l.prototype,x.prototype=new v,x.__super__=l.prototype,x},g={}.hasOwnProperty;a=e0(),r=require("events"),e=t0(),o=Yu(),c=require("timers").setImmediate,t=Fs().defaults,n=function(x){return typeof x=="object"&&x!=null&&Object.keys(x).length===0},s=function(x,l,m){var v,w,_;for(v=0,w=x.length;v<w;v++)_=x[v],l=_(l,m);return l},i=function(x,l,m){var v;return v=Object.create(null),v.value=m,v.writable=!0,v.enumerable=!0,v.configurable=!0,Object.defineProperty(x,l,v)},Gt.Parser=function(x){f(l,x);function l(m){this.parseStringPromise=u(this.parseStringPromise,this),this.parseString=u(this.parseString,this),this.reset=u(this.reset,this),this.assignOrPush=u(this.assignOrPush,this),this.processAsync=u(this.processAsync,this);var v,w,_;if(!(this instanceof Gt.Parser))return new Gt.Parser(m);this.options={},w=t["0.2"];for(v in w)g.call(w,v)&&(_=w[v],this.options[v]=_);for(v in m)g.call(m,v)&&(_=m[v],this.options[v]=_);this.options.xmlns&&(this.options.xmlnskey=this.options.attrkey+"ns"),this.options.normalizeTags&&(this.options.tagNameProcessors||(this.options.tagNameProcessors=[]),this.options.tagNameProcessors.unshift(o.normalize)),this.reset()}return l.prototype.processAsync=function(){var m,v;try{return this.remaining.length<=this.options.chunkSize?(m=this.remaining,this.remaining="",this.saxParser=this.saxParser.write(m),this.saxParser.close()):(m=this.remaining.substr(0,this.options.chunkSize),this.remaining=this.remaining.substr(this.options.chunkSize,this.remaining.length),this.saxParser=this.saxParser.write(m),c(this.processAsync))}catch(w){if(v=w,!this.saxParser.errThrown)return this.saxParser.errThrown=!0,this.emit(v)}},l.prototype.assignOrPush=function(m,v,w){return v in m?(m[v]instanceof Array||i(m,v,[m[v]]),m[v].push(w)):this.options.explicitArray?i(m,v,[w]):i(m,v,w)},l.prototype.reset=function(){var m,v,w,_;return this.removeAllListeners(),this.saxParser=a.parser(this.options.strict,{trim:!1,normalize:!1,xmlns:this.options.xmlns}),this.saxParser.errThrown=!1,this.saxParser.onerror=function(E){return function(p){if(E.saxParser.resume(),!E.saxParser.errThrown)return E.saxParser.errThrown=!0,E.emit("error",p)}}(this),this.saxParser.onend=function(E){return function(){if(!E.saxParser.ended)return E.saxParser.ended=!0,E.emit("end",E.resultObject)}}(this),this.saxParser.ended=!1,this.EXPLICIT_CHARKEY=this.options.explicitCharkey,this.resultObject=null,_=[],m=this.options.attrkey,v=this.options.charkey,this.saxParser.onopentag=function(E){return function(p){var d,h,b,O,A;if(b={},b[v]="",!E.options.ignoreAttrs){A=p.attributes;for(d in A)g.call(A,d)&&(!(m in b)&&!E.options.mergeAttrs&&(b[m]={}),h=E.options.attrValueProcessors?s(E.options.attrValueProcessors,p.attributes[d],d):p.attributes[d],O=E.options.attrNameProcessors?s(E.options.attrNameProcessors,d):d,E.options.mergeAttrs?E.assignOrPush(b,O,h):i(b[m],O,h))}return b["#name"]=E.options.tagNameProcessors?s(E.options.tagNameProcessors,p.name):p.name,E.options.xmlns&&(b[E.options.xmlnskey]={uri:p.uri,local:p.local}),_.push(b)}}(this),this.saxParser.onclosetag=function(E){return function(){var p,d,h,b,O,A,D,S,L,C;if(A=_.pop(),O=A["#name"],(!E.options.explicitChildren||!E.options.preserveChildrenOrder)&&delete A["#name"],A.cdata===!0&&(p=A.cdata,delete A.cdata),L=_[_.length-1],A[v].match(/^\s*$/)&&!p?(d=A[v],delete A[v]):(E.options.trim&&(A[v]=A[v].trim()),E.options.normalize&&(A[v]=A[v].replace(/\s{2,}/g," ").trim()),A[v]=E.options.valueProcessors?s(E.options.valueProcessors,A[v],O):A[v],Object.keys(A).length===1&&v in A&&!E.EXPLICIT_CHARKEY&&(A=A[v])),n(A)&&(typeof E.options.emptyTag=="function"?A=E.options.emptyTag():A=E.options.emptyTag!==""?E.options.emptyTag:d),E.options.validator!=null&&(C="/"+function(){var F,z,H;for(H=[],F=0,z=_.length;F<z;F++)b=_[F],H.push(b["#name"]);return H}().concat(O).join("/"),function(){var F;try{return A=E.options.validator(C,L&&L[O],A)}catch(z){return F=z,E.emit("error",F)}}()),E.options.explicitChildren&&!E.options.mergeAttrs&&typeof A=="object"){if(!E.options.preserveChildrenOrder)b={},E.options.attrkey in A&&(b[E.options.attrkey]=A[E.options.attrkey],delete A[E.options.attrkey]),!E.options.charsAsChildren&&E.options.charkey in A&&(b[E.options.charkey]=A[E.options.charkey],delete A[E.options.charkey]),Object.getOwnPropertyNames(A).length>0&&(b[E.options.childkey]=A),A=b;else if(L){L[E.options.childkey]=L[E.options.childkey]||[],D={};for(h in A)g.call(A,h)&&i(D,h,A[h]);L[E.options.childkey].push(D),delete A["#name"],Object.keys(A).length===1&&v in A&&!E.EXPLICIT_CHARKEY&&(A=A[v])}}return _.length>0?E.assignOrPush(L,O,A):(E.options.explicitRoot&&(S=A,A={},i(A,O,S)),E.resultObject=A,E.saxParser.ended=!0,E.emit("end",E.resultObject))}}(this),w=function(E){return function(p){var d,h;if(h=_[_.length-1],h)return h[v]+=p,E.options.explicitChildren&&E.options.preserveChildrenOrder&&E.options.charsAsChildren&&(E.options.includeWhiteChars||p.replace(/\\n/g,"").trim()!=="")&&(h[E.options.childkey]=h[E.options.childkey]||[],d={"#name":"__text__"},d[v]=p,E.options.normalize&&(d[v]=d[v].replace(/\s{2,}/g," ").trim()),h[E.options.childkey].push(d)),h}}(this),this.saxParser.ontext=w,this.saxParser.oncdata=function(E){return function(p){var d;if(d=w(p),d)return d.cdata=!0}}(this)},l.prototype.parseString=function(m,v){var w;v!=null&&typeof v=="function"&&(this.on("end",function(_){return this.reset(),v(null,_)}),this.on("error",function(_){return this.reset(),v(_)}));try{return m=m.toString(),m.trim()===""?(this.emit("end",null),!0):(m=e.stripBOM(m),this.options.async?(this.remaining=m,c(this.processAsync),this.saxParser):this.saxParser.write(m).close())}catch(_){if(w=_,this.saxParser.errThrown||this.saxParser.ended){if(this.saxParser.ended)throw w}else return this.emit("error",w),this.saxParser.errThrown=!0}},l.prototype.parseStringPromise=function(m){return new Promise(function(v){return function(w,_){return v.parseString(m,function(E,p){return E?_(E):w(p)})}}(this))},l}(r),Gt.parseString=function(x,l,m){var v,w,_;return m!=null?(typeof m=="function"&&(v=m),typeof l=="object"&&(w=l)):(typeof l=="function"&&(v=l),w={}),_=new Gt.Parser(w),_.parseString(x,v)},Gt.parseStringPromise=function(x,l){var m,v;return typeof l=="object"&&(m=l),v=new Gt.Parser(m),v.parseStringPromise(x)}}).call(Gt)});var r0=k(Vt=>{"use strict";(function(){"use strict";var e,t,i,r,n=function(o,a){for(var c in a)s.call(a,c)&&(o[c]=a[c]);function u(){this.constructor=o}return u.prototype=a.prototype,o.prototype=new u,o.__super__=a.prototype,o},s={}.hasOwnProperty;t=Fs(),e=Qw(),i=i0(),r=Yu(),Vt.defaults=t.defaults,Vt.processors=r,Vt.ValidationError=function(o){n(a,o);function a(c){this.message=c}return a}(Error),Vt.Builder=e.Builder,Vt.Parser=i.Parser,Vt.parseString=i.parseString,Vt.parseStringPromise=i.parseStringPromise}).call(Vt)});var m0=k(ft=>{"use strict";var Fk=/[|\\{}()[\]^$+*?.]/g,jk=Object.prototype.hasOwnProperty,Qu=function(e,t){return jk.apply(e,[t])};ft.escapeRegExpChars=function(e){return e?String(e).replace(Fk,"\\$&"):""};var Mk={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&#34;","'":"&#39;"},qk=/[&<>'"]/g;function Bk(e){return Mk[e]||e}var Uk=`var _ENCODE_HTML_RULES = {
      "&": "&amp;"
    , "<": "&lt;"
    , ">": "&gt;"
    , '"': "&#34;"
    , "'": "&#39;"
    }
  , _MATCH_HTML = /[&<>'"]/g;
function encode_char(c) {
  return _ENCODE_HTML_RULES[c] || c;
};
`;ft.escapeXML=function(e){return e==null?"":String(e).replace(qk,Bk)};function h0(){return Function.prototype.toString.call(this)+`;
`+Uk}try{typeof Object.defineProperty=="function"?Object.defineProperty(ft.escapeXML,"toString",{value:h0}):ft.escapeXML.toString=h0}catch{console.warn("Unable to set escapeXML.toString (is the Function prototype frozen?)")}ft.shallowCopy=function(e,t){if(t=t||{},e!=null)for(var i in t)Qu(t,i)&&(i==="__proto__"||i==="constructor"||(e[i]=t[i]));return e};ft.shallowCopyFromList=function(e,t,i){if(i=i||[],t=t||{},e!=null)for(var r=0;r<i.length;r++){var n=i[r];if(typeof t[n]<"u"){if(!Qu(t,n)||n==="__proto__"||n==="constructor")continue;e[n]=t[n]}}return e};ft.cache={_data:{},set:function(e,t){this._data[e]=t},get:function(e){return this._data[e]},remove:function(e){delete this._data[e]},reset:function(){this._data={}}};ft.hyphenToCamel=function(e){return e.replace(/-[a-z]/g,function(t){return t[1].toUpperCase()})};ft.createNullProtoObjWherePossible=function(){return typeof Object.create=="function"?function(){return Object.create(null)}:{__proto__:null}instanceof Object?function(){return{}}:function(){return{__proto__:null}}}();ft.hasOwnOnlyObject=function(e){var t=ft.createNullProtoObjWherePossible();for(var i in e)Qu(e,i)&&(t[i]=e[i]);return t}});var g0=k((FB,$k)=>{$k.exports={name:"ejs",description:"Embedded JavaScript templates",keywords:["template","engine","ejs"],version:"3.1.10",author:"Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)",license:"Apache-2.0",bin:{ejs:"./bin/cli.js"},main:"./lib/ejs.js",jsdelivr:"ejs.min.js",unpkg:"ejs.min.js",repository:{type:"git",url:"git://github.com/mde/ejs.git"},bugs:"https://github.com/mde/ejs/issues",homepage:"https://github.com/mde/ejs",dependencies:{jake:"^10.8.5"},devDependencies:{browserify:"^16.5.1",eslint:"^6.8.0","git-directory-deploy":"^1.5.1",jsdoc:"^4.0.2","lru-cache":"^4.0.1",mocha:"^10.2.0","uglify-js":"^3.3.16"},engines:{node:">=0.10.0"},scripts:{test:"npx jake test"}}});var S0=k(te=>{"use strict";var tl=require("fs"),cn=require("path"),Oe=m0(),x0=!1,zk=g0().version,Hk="<",Gk=">",Vk="%",_0="locals",Xk="ejs",Yk="(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)",T0=["delimiter","scope","context","debug","compileDebug","client","_with","rmWhitespace","strict","filename","async"],Wk=T0.concat("cache"),v0=/^\uFEFF/,el=/^[a-zA-Z_$][0-9a-zA-Z_$]*$/;te.cache=Oe.cache;te.fileLoader=tl.readFileSync;te.localsName=_0;te.promiseImpl=new Function("return this;")().Promise;te.resolveInclude=function(e,t,i){var r=cn.dirname,n=cn.extname,s=cn.resolve,o=s(i?t:r(t),e),a=n(e);return a||(o+=".ejs"),o};function y0(e,t){var i;if(t.some(function(r){return i=te.resolveInclude(e,r,!0),tl.existsSync(i)}))return i}function Kk(e,t){var i,r,n=t.views,s=/^[A-Za-z]+:\\|^\//.exec(e);if(s&&s.length)e=e.replace(/^\/*/,""),Array.isArray(t.root)?i=y0(e,t.root):i=te.resolveInclude(e,t.root||"/",!0);else if(t.filename&&(r=te.resolveInclude(e,t.filename),tl.existsSync(r)&&(i=r)),!i&&Array.isArray(n)&&(i=y0(e,n)),!i&&typeof t.includer!="function")throw new Error('Could not find the include file "'+t.escapeFunction(e)+'"');return i}function un(e,t){var i,r=e.filename,n=arguments.length>1;if(e.cache){if(!r)throw new Error("cache option requires a filename");if(i=te.cache.get(r),i)return i;n||(t=b0(r).toString().replace(v0,""))}else if(!n){if(!r)throw new Error("Internal EJS error: no file name or template provided");t=b0(r).toString().replace(v0,"")}return i=te.compile(t,e),e.cache&&te.cache.set(r,i),i}function Jk(e,t,i){var r;if(i){try{r=un(e)(t)}catch(n){return i(n)}i(null,r)}else{if(typeof te.promiseImpl=="function")return new te.promiseImpl(function(n,s){try{r=un(e)(t),n(r)}catch(o){s(o)}});throw new Error("Please provide a callback function")}}function b0(e){return te.fileLoader(e)}function Zk(e,t){var i=Oe.shallowCopy(Oe.createNullProtoObjWherePossible(),t);if(i.filename=Kk(e,i),typeof t.includer=="function"){var r=t.includer(e,i.filename);if(r&&(r.filename&&(i.filename=r.filename),r.template))return un(i,r.template)}return un(i)}function w0(e,t,i,r,n){var s=t.split(`
`),o=Math.max(r-3,0),a=Math.min(s.length,r+3),c=n(i),u=s.slice(o,a).map(function(f,g){var x=g+o+1;return(x==r?" >> ":"    ")+x+"| "+f}).join(`
`);throw e.path=c,e.message=(c||"ejs")+":"+r+`
`+u+`

`+e.message,e}function E0(e){return e.replace(/;(\s*$)/,"$1")}te.compile=function(t,i){var r;return i&&i.scope&&(x0||(console.warn("`scope` option is deprecated and will be removed in EJS 3"),x0=!0),i.context||(i.context=i.scope),delete i.scope),r=new Pe(t,i),r.compile()};te.render=function(e,t,i){var r=t||Oe.createNullProtoObjWherePossible(),n=i||Oe.createNullProtoObjWherePossible();return arguments.length==2&&Oe.shallowCopyFromList(n,r,T0),un(n,e)(r)};te.renderFile=function(){var e=Array.prototype.slice.call(arguments),t=e.shift(),i,r={filename:t},n,s;return typeof arguments[arguments.length-1]=="function"&&(i=e.pop()),e.length?(n=e.shift(),e.length?Oe.shallowCopy(r,e.pop()):(n.settings&&(n.settings.views&&(r.views=n.settings.views),n.settings["view cache"]&&(r.cache=!0),s=n.settings["view options"],s&&Oe.shallowCopy(r,s)),Oe.shallowCopyFromList(r,n,Wk)),r.filename=t):n=Oe.createNullProtoObjWherePossible(),Jk(r,n,i)};te.Template=Pe;te.clearCache=function(){te.cache.reset()};function Pe(e,t){var i=Oe.hasOwnOnlyObject(t),r=Oe.createNullProtoObjWherePossible();this.templateText=e,this.mode=null,this.truncate=!1,this.currentLine=1,this.source="",r.client=i.client||!1,r.escapeFunction=i.escape||i.escapeFunction||Oe.escapeXML,r.compileDebug=i.compileDebug!==!1,r.debug=!!i.debug,r.filename=i.filename,r.openDelimiter=i.openDelimiter||te.openDelimiter||Hk,r.closeDelimiter=i.closeDelimiter||te.closeDelimiter||Gk,r.delimiter=i.delimiter||te.delimiter||Vk,r.strict=i.strict||!1,r.context=i.context,r.cache=i.cache||!1,r.rmWhitespace=i.rmWhitespace,r.root=i.root,r.includer=i.includer,r.outputFunctionName=i.outputFunctionName,r.localsName=i.localsName||te.localsName||_0,r.views=i.views,r.async=i.async,r.destructuredLocals=i.destructuredLocals,r.legacyInclude=typeof i.legacyInclude<"u"?!!i.legacyInclude:!0,r.strict?r._with=!1:r._with=typeof i._with<"u"?i._with:!0,this.opts=r,this.regex=this.createRegex()}Pe.modes={EVAL:"eval",ESCAPED:"escaped",RAW:"raw",COMMENT:"comment",LITERAL:"literal"};Pe.prototype={createRegex:function(){var e=Yk,t=Oe.escapeRegExpChars(this.opts.delimiter),i=Oe.escapeRegExpChars(this.opts.openDelimiter),r=Oe.escapeRegExpChars(this.opts.closeDelimiter);return e=e.replace(/%/g,t).replace(/</g,i).replace(/>/g,r),new RegExp(e)},compile:function(){var e,t,i=this.opts,r="",n="",s=i.escapeFunction,o,a=i.filename?JSON.stringify(i.filename):"undefined";if(!this.source){if(this.generateSource(),r+=`  var __output = "";
  function __append(s) { if (s !== undefined && s !== null) __output += s }
`,i.outputFunctionName){if(!el.test(i.outputFunctionName))throw new Error("outputFunctionName is not a valid JS identifier.");r+="  var "+i.outputFunctionName+` = __append;
`}if(i.localsName&&!el.test(i.localsName))throw new Error("localsName is not a valid JS identifier.");if(i.destructuredLocals&&i.destructuredLocals.length){for(var c="  var __locals = ("+i.localsName+` || {}),
`,u=0;u<i.destructuredLocals.length;u++){var f=i.destructuredLocals[u];if(!el.test(f))throw new Error("destructuredLocals["+u+"] is not a valid JS identifier.");u>0&&(c+=`,
  `),c+=f+" = __locals."+f}r+=c+`;
`}i._with!==!1&&(r+="  with ("+i.localsName+` || {}) {
`,n+=`  }
`),n+=`  return __output;
`,this.source=r+this.source+n}i.compileDebug?e=`var __line = 1
  , __lines = `+JSON.stringify(this.templateText)+`
  , __filename = `+a+`;
try {
`+this.source+`} catch (e) {
  rethrow(e, __lines, __filename, __line, escapeFn);
}
`:e=this.source,i.client&&(e="escapeFn = escapeFn || "+s.toString()+`;
`+e,i.compileDebug&&(e="rethrow = rethrow || "+w0.toString()+`;
`+e)),i.strict&&(e=`"use strict";
`+e),i.debug&&console.log(e),i.compileDebug&&i.filename&&(e=e+`
//# sourceURL=`+a+`
`);try{if(i.async)try{o=new Function("return (async function(){}).constructor;")()}catch(m){throw m instanceof SyntaxError?new Error("This environment does not support async/await"):m}else o=Function;t=new o(i.localsName+", escapeFn, include, rethrow",e)}catch(m){throw m instanceof SyntaxError&&(i.filename&&(m.message+=" in "+i.filename),m.message+=` while compiling ejs

`,m.message+=`If the above error is not helpful, you may want to try EJS-Lint:
`,m.message+="https://github.com/RyanZim/EJS-Lint",i.async||(m.message+=`
`,m.message+="Or, if you meant to create an async function, pass `async: true` as an option.")),m}var g=i.client?t:function(v){var w=function(_,E){var p=Oe.shallowCopy(Oe.createNullProtoObjWherePossible(),v);return E&&(p=Oe.shallowCopy(p,E)),Zk(_,i)(p)};return t.apply(i.context,[v||Oe.createNullProtoObjWherePossible(),s,w,w0])};if(i.filename&&typeof Object.defineProperty=="function"){var x=i.filename,l=cn.basename(x,cn.extname(x));try{Object.defineProperty(g,"name",{value:l,writable:!1,enumerable:!1,configurable:!0})}catch{}}return g},generateSource:function(){var e=this.opts;e.rmWhitespace&&(this.templateText=this.templateText.replace(/[\r\n]+/g,`
`).replace(/^\s+|\s+$/gm,"")),this.templateText=this.templateText.replace(/[ \t]*<%_/gm,"<%_").replace(/_%>[ \t]*/gm,"_%>");var t=this,i=this.parseTemplateText(),r=this.opts.delimiter,n=this.opts.openDelimiter,s=this.opts.closeDelimiter;i&&i.length&&i.forEach(function(o,a){var c;if(o.indexOf(n+r)===0&&o.indexOf(n+r+r)!==0&&(c=i[a+2],!(c==r+s||c=="-"+r+s||c=="_"+r+s)))throw new Error('Could not find matching close tag for "'+o+'".');t.scanLine(o)})},parseTemplateText:function(){for(var e=this.templateText,t=this.regex,i=t.exec(e),r=[],n;i;)n=i.index,n!==0&&(r.push(e.substring(0,n)),e=e.slice(n)),r.push(i[0]),e=e.slice(i[0].length),i=t.exec(e);return e&&r.push(e),r},_addOutput:function(e){if(this.truncate&&(e=e.replace(/^(?:\r\n|\r|\n)/,""),this.truncate=!1),!e)return e;e=e.replace(/\\/g,"\\\\"),e=e.replace(/\n/g,"\\n"),e=e.replace(/\r/g,"\\r"),e=e.replace(/"/g,'\\"'),this.source+='    ; __append("'+e+`")
`},scanLine:function(e){var t=this,i=this.opts.delimiter,r=this.opts.openDelimiter,n=this.opts.closeDelimiter,s=0;switch(s=e.split(`
`).length-1,e){case r+i:case r+i+"_":this.mode=Pe.modes.EVAL;break;case r+i+"=":this.mode=Pe.modes.ESCAPED;break;case r+i+"-":this.mode=Pe.modes.RAW;break;case r+i+"#":this.mode=Pe.modes.COMMENT;break;case r+i+i:this.mode=Pe.modes.LITERAL,this.source+='    ; __append("'+e.replace(r+i+i,r+i)+`")
`;break;case i+i+n:this.mode=Pe.modes.LITERAL,this.source+='    ; __append("'+e.replace(i+i+n,i+n)+`")
`;break;case i+n:case"-"+i+n:case"_"+i+n:this.mode==Pe.modes.LITERAL&&this._addOutput(e),this.mode=null,this.truncate=e.indexOf("-")===0||e.indexOf("_")===0;break;default:if(this.mode){switch(this.mode){case Pe.modes.EVAL:case Pe.modes.ESCAPED:case Pe.modes.RAW:e.lastIndexOf("//")>e.lastIndexOf(`
`)&&(e+=`
`)}switch(this.mode){case Pe.modes.EVAL:this.source+="    ; "+e+`
`;break;case Pe.modes.ESCAPED:this.source+="    ; __append(escapeFn("+E0(e)+`))
`;break;case Pe.modes.RAW:this.source+="    ; __append("+E0(e)+`)
`;break;case Pe.modes.COMMENT:break;case Pe.modes.LITERAL:this._addOutput(e);break}}else this._addOutput(e)}t.opts.compileDebug&&s&&(this.currentLine+=s,this.source+="    ; __line = "+this.currentLine+`
`)}};te.escapeXML=Oe.escapeXML;te.__express=te.renderFile;te.VERSION=zk;te.name=Xk;typeof window<"u"&&(window.ejs=te)});var lR={};al(lR,{createApp:()=>F0});module.exports=z0(lR);var Ae=se(require("fs")),D0=se(require("os")),Ue=se(require("path")),I0=se(Ul()),N0=se(Gl()),nl=se(Eh());var fi=!0,qi=typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{},Er=0;if(qi.process&&qi.process.env&&qi.process.stdout){let{FORCE_COLOR:e,NODE_DISABLE_COLORS:t,NO_COLOR:i,TERM:r,COLORTERM:n}=qi.process.env;t||i||e==="0"?fi=!1:e==="1"||e==="2"||e==="3"?fi=!0:r==="dumb"?fi=!1:"CI"in qi.process.env&&["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI","GITHUB_ACTIONS","BUILDKITE","DRONE"].some(s=>s in qi.process.env)?fi=!0:fi=process.stdout.isTTY,fi&&(process.platform==="win32"||n&&(n==="truecolor"||n==="24bit")?Er=3:r&&(r.endsWith("-256color")||r.endsWith("256"))?Er=2:Er=1)}var _h={enabled:fi,supportLevel:Er};function Z(e,t,i=1){let r=`\x1B[${e}m`,n=`\x1B[${t}m`,s=new RegExp(`\\x1b\\[${t}m`,"g");return o=>_h.enabled&&_h.supportLevel>=i?r+(""+o).replace(s,r)+n:""+o}var Bi=Z(0,0),$P=Z(1,22),zP=Z(2,22),HP=Z(3,23),GP=Z(4,24),VP=Z(7,27),XP=Z(8,28),YP=Z(9,29),WP=Z(30,39),Sa=Z(31,39),KP=Z(32,39),Ca=Z(33,39),JP=Z(34,39),ZP=Z(35,39),QP=Z(36,39),e2=Z(97,39),t2=Z(90,39),i2=Z(37,39),r2=Z(91,39),n2=Z(92,39),s2=Z(93,39),o2=Z(94,39),a2=Z(95,39),c2=Z(96,39),u2=Z(40,49),l2=Z(41,49),p2=Z(42,49),d2=Z(43,49),f2=Z(44,49),h2=Z(45,49),m2=Z(46,49),g2=Z(107,49),x2=Z(100,49),v2=Z(101,49),y2=Z(102,49),b2=Z(103,49),w2=Z(104,49),E2=Z(105,49),_2=Z(106,49),T2=Z(47,49);function _r(e,t){return function(){return e.apply(t,arguments)}}var{toString:hS}=Object.prototype,{getPrototypeOf:Da}=Object,Ln=(e=>t=>{let i=hS.call(t);return e[i]||(e[i]=i.slice(8,-1).toLowerCase())})(Object.create(null)),gt=e=>(e=e.toLowerCase(),t=>Ln(t)===e),kn=e=>t=>typeof t===e,{isArray:Ui}=Array,Tr=kn("undefined");function mS(e){return e!==null&&!Tr(e)&&e.constructor!==null&&!Tr(e.constructor)&&ut(e.constructor.isBuffer)&&e.constructor.isBuffer(e)}var Ch=gt("ArrayBuffer");function gS(e){let t;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?t=ArrayBuffer.isView(e):t=e&&e.buffer&&Ch(e.buffer),t}var xS=kn("string"),ut=kn("function"),Oh=kn("number"),Rn=e=>e!==null&&typeof e=="object",vS=e=>e===!0||e===!1,Nn=e=>{if(Ln(e)!=="object")return!1;let t=Da(e);return(t===null||t===Object.prototype||Object.getPrototypeOf(t)===null)&&!(Symbol.toStringTag in e)&&!(Symbol.iterator in e)},yS=gt("Date"),bS=gt("File"),wS=gt("Blob"),ES=gt("FileList"),_S=e=>Rn(e)&&ut(e.pipe),TS=e=>{let t;return e&&(typeof FormData=="function"&&e instanceof FormData||ut(e.append)&&((t=Ln(e))==="formdata"||t==="object"&&ut(e.toString)&&e.toString()==="[object FormData]"))},SS=gt("URLSearchParams"),[CS,OS,AS,DS]=["ReadableStream","Request","Response","Headers"].map(gt),IS=e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"");function Sr(e,t,{allOwnKeys:i=!1}={}){if(e===null||typeof e>"u")return;let r,n;if(typeof e!="object"&&(e=[e]),Ui(e))for(r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else{let s=i?Object.getOwnPropertyNames(e):Object.keys(e),o=s.length,a;for(r=0;r<o;r++)a=s[r],t.call(null,e[a],a,e)}}function Ah(e,t){t=t.toLowerCase();let i=Object.keys(e),r=i.length,n;for(;r-- >0;)if(n=i[r],t===n.toLowerCase())return n;return null}var Dh=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:global,Ih=e=>!Tr(e)&&e!==Dh;function Aa(){let{caseless:e}=Ih(this)&&this||{},t={},i=(r,n)=>{let s=e&&Ah(t,n)||n;Nn(t[s])&&Nn(r)?t[s]=Aa(t[s],r):Nn(r)?t[s]=Aa({},r):Ui(r)?t[s]=r.slice():t[s]=r};for(let r=0,n=arguments.length;r<n;r++)arguments[r]&&Sr(arguments[r],i);return t}var NS=(e,t,i,{allOwnKeys:r}={})=>(Sr(t,(n,s)=>{i&&ut(n)?e[s]=_r(n,i):e[s]=n},{allOwnKeys:r}),e),LS=e=>(e.charCodeAt(0)===65279&&(e=e.slice(1)),e),kS=(e,t,i,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),i&&Object.assign(e.prototype,i)},RS=(e,t,i,r)=>{let n,s,o,a={};if(t=t||{},e==null)return t;do{for(n=Object.getOwnPropertyNames(e),s=n.length;s-- >0;)o=n[s],(!r||r(o,e,t))&&!a[o]&&(t[o]=e[o],a[o]=!0);e=i!==!1&&Da(e)}while(e&&(!i||i(e,t))&&e!==Object.prototype);return t},PS=(e,t,i)=>{e=String(e),(i===void 0||i>e.length)&&(i=e.length),i-=t.length;let r=e.indexOf(t,i);return r!==-1&&r===i},FS=e=>{if(!e)return null;if(Ui(e))return e;let t=e.length;if(!Oh(t))return null;let i=new Array(t);for(;t-- >0;)i[t]=e[t];return i},jS=(e=>t=>e&&t instanceof e)(typeof Uint8Array<"u"&&Da(Uint8Array)),MS=(e,t)=>{let r=(e&&e[Symbol.iterator]).call(e),n;for(;(n=r.next())&&!n.done;){let s=n.value;t.call(e,s[0],s[1])}},qS=(e,t)=>{let i,r=[];for(;(i=e.exec(t))!==null;)r.push(i);return r},BS=gt("HTMLFormElement"),US=e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(i,r,n){return r.toUpperCase()+n}),Th=(({hasOwnProperty:e})=>(t,i)=>e.call(t,i))(Object.prototype),$S=gt("RegExp"),Nh=(e,t)=>{let i=Object.getOwnPropertyDescriptors(e),r={};Sr(i,(n,s)=>{let o;(o=t(n,s,e))!==!1&&(r[s]=o||n)}),Object.defineProperties(e,r)},zS=e=>{Nh(e,(t,i)=>{if(ut(e)&&["arguments","caller","callee"].indexOf(i)!==-1)return!1;let r=e[i];if(ut(r)){if(t.enumerable=!1,"writable"in t){t.writable=!1;return}t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+i+"'")})}})},HS=(e,t)=>{let i={},r=n=>{n.forEach(s=>{i[s]=!0})};return Ui(e)?r(e):r(String(e).split(t)),i},GS=()=>{},VS=(e,t)=>e!=null&&Number.isFinite(e=+e)?e:t,Oa="abcdefghijklmnopqrstuvwxyz",Sh="0123456789",Lh={DIGIT:Sh,ALPHA:Oa,ALPHA_DIGIT:Oa+Oa.toUpperCase()+Sh},XS=(e=16,t=Lh.ALPHA_DIGIT)=>{let i="",{length:r}=t;for(;e--;)i+=t[Math.random()*r|0];return i};function YS(e){return!!(e&&ut(e.append)&&e[Symbol.toStringTag]==="FormData"&&e[Symbol.iterator])}var WS=e=>{let t=new Array(10),i=(r,n)=>{if(Rn(r)){if(t.indexOf(r)>=0)return;if(!("toJSON"in r)){t[n]=r;let s=Ui(r)?[]:{};return Sr(r,(o,a)=>{let c=i(o,n+1);!Tr(c)&&(s[a]=c)}),t[n]=void 0,s}}return r};return i(e,0)},KS=gt("AsyncFunction"),JS=e=>e&&(Rn(e)||ut(e))&&ut(e.then)&&ut(e.catch),I={isArray:Ui,isArrayBuffer:Ch,isBuffer:mS,isFormData:TS,isArrayBufferView:gS,isString:xS,isNumber:Oh,isBoolean:vS,isObject:Rn,isPlainObject:Nn,isReadableStream:CS,isRequest:OS,isResponse:AS,isHeaders:DS,isUndefined:Tr,isDate:yS,isFile:bS,isBlob:wS,isRegExp:$S,isFunction:ut,isStream:_S,isURLSearchParams:SS,isTypedArray:jS,isFileList:ES,forEach:Sr,merge:Aa,extend:NS,trim:IS,stripBOM:LS,inherits:kS,toFlatObject:RS,kindOf:Ln,kindOfTest:gt,endsWith:PS,toArray:FS,forEachEntry:MS,matchAll:qS,isHTMLForm:BS,hasOwnProperty:Th,hasOwnProp:Th,reduceDescriptors:Nh,freezeMethods:zS,toObjectSet:HS,toCamelCase:US,noop:GS,toFiniteNumber:VS,findKey:Ah,global:Dh,isContextDefined:Ih,ALPHABET:Lh,generateString:XS,isSpecCompliantForm:YS,toJSONObject:WS,isAsyncFn:KS,isThenable:JS};function $i(e,t,i,r,n){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack,this.message=e,this.name="AxiosError",t&&(this.code=t),i&&(this.config=i),r&&(this.request=r),n&&(this.response=n)}I.inherits($i,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:I.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var kh=$i.prototype,Rh={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(e=>{Rh[e]={value:e}});Object.defineProperties($i,Rh);Object.defineProperty(kh,"isAxiosError",{value:!0});$i.from=(e,t,i,r,n,s)=>{let o=Object.create(kh);return I.toFlatObject(e,o,function(c){return c!==Error.prototype},a=>a!=="isAxiosError"),$i.call(o,e.message,t,i,r,n),o.cause=e,o.name=e.name,s&&Object.assign(o,s),o};var B=$i;var gm=se(mm(),1),jn=gm.default;function Ba(e){return I.isPlainObject(e)||I.isArray(e)}function vm(e){return I.endsWith(e,"[]")?e.slice(0,-2):e}function xm(e,t,i){return e?e.concat(t).map(function(n,s){return n=vm(n),!i&&s?"["+n+"]":n}).join(i?".":""):t}function RC(e){return I.isArray(e)&&!e.some(Ba)}var PC=I.toFlatObject(I,{},null,function(t){return/^is[A-Z]/.test(t)});function FC(e,t,i){if(!I.isObject(e))throw new TypeError("target must be an object");t=t||new(jn||FormData),i=I.toFlatObject(i,{metaTokens:!0,dots:!1,indexes:!1},!1,function(v,w){return!I.isUndefined(w[v])});let r=i.metaTokens,n=i.visitor||f,s=i.dots,o=i.indexes,c=(i.Blob||typeof Blob<"u"&&Blob)&&I.isSpecCompliantForm(t);if(!I.isFunction(n))throw new TypeError("visitor must be a function");function u(m){if(m===null)return"";if(I.isDate(m))return m.toISOString();if(!c&&I.isBlob(m))throw new B("Blob is not supported. Use a Buffer instead.");return I.isArrayBuffer(m)||I.isTypedArray(m)?c&&typeof Blob=="function"?new Blob([m]):Buffer.from(m):m}function f(m,v,w){let _=m;if(m&&!w&&typeof m=="object"){if(I.endsWith(v,"{}"))v=r?v:v.slice(0,-2),m=JSON.stringify(m);else if(I.isArray(m)&&RC(m)||(I.isFileList(m)||I.endsWith(v,"[]"))&&(_=I.toArray(m)))return v=vm(v),_.forEach(function(p,d){!(I.isUndefined(p)||p===null)&&t.append(o===!0?xm([v],d,s):o===null?v:v+"[]",u(p))}),!1}return Ba(m)?!0:(t.append(xm(w,v,s),u(m)),!1)}let g=[],x=Object.assign(PC,{defaultVisitor:f,convertValue:u,isVisitable:Ba});function l(m,v){if(!I.isUndefined(m)){if(g.indexOf(m)!==-1)throw Error("Circular reference detected in "+v.join("."));g.push(m),I.forEach(m,function(_,E){(!(I.isUndefined(_)||_===null)&&n.call(t,_,I.isString(E)?E.trim():E,v,x))===!0&&l(_,v?v.concat(E):[E])}),g.pop()}}if(!I.isObject(e))throw new TypeError("data must be an object");return l(e),t}var ei=FC;function ym(e){let t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,function(r){return t[r]})}function bm(e,t){this._pairs=[],e&&ei(e,this,t)}var wm=bm.prototype;wm.append=function(t,i){this._pairs.push([t,i])};wm.toString=function(t){let i=t?function(r){return t.call(this,r,ym)}:ym;return this._pairs.map(function(n){return i(n[0])+"="+i(n[1])},"").join("&")};var Em=bm;function jC(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function hi(e,t,i){if(!t)return e;let r=i&&i.encode||jC,n=i&&i.serialize,s;if(n?s=n(t,i):s=I.isURLSearchParams(t)?t.toString():new Em(t,i).toString(r),s){let o=e.indexOf("#");o!==-1&&(e=e.slice(0,o)),e+=(e.indexOf("?")===-1?"?":"&")+s}return e}var Ua=class{constructor(){this.handlers=[]}use(t,i,r){return this.handlers.push({fulfilled:t,rejected:i,synchronous:r?r.synchronous:!1,runWhen:r?r.runWhen:null}),this.handlers.length-1}eject(t){this.handlers[t]&&(this.handlers[t]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(t){I.forEach(this.handlers,function(r){r!==null&&t(r)})}},$a=Ua;var zi={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1};var _m=se(require("url"),1),Tm=_m.default.URLSearchParams;var Sm={isNode:!0,classes:{URLSearchParams:Tm,FormData:jn,Blob:typeof Blob<"u"&&Blob||null},protocols:["http","https","file","data"]};var Ha={};al(Ha,{hasBrowserEnv:()=>za,hasStandardBrowserEnv:()=>MC,hasStandardBrowserWebWorkerEnv:()=>qC,origin:()=>BC});var za=typeof window<"u"&&typeof document<"u",MC=(e=>za&&["ReactNative","NativeScript","NS"].indexOf(e)<0)(typeof navigator<"u"&&navigator.product),qC=typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&typeof self.importScripts=="function",BC=za&&window.location.href||"http://localhost";var be={...Ha,...Sm};function Ga(e,t){return ei(e,new be.classes.URLSearchParams,Object.assign({visitor:function(i,r,n,s){return be.isNode&&I.isBuffer(i)?(this.append(r,i.toString("base64")),!1):s.defaultVisitor.apply(this,arguments)}},t))}function UC(e){return I.matchAll(/\w+|\[(\w*)]/g,e).map(t=>t[0]==="[]"?"":t[1]||t[0])}function $C(e){let t={},i=Object.keys(e),r,n=i.length,s;for(r=0;r<n;r++)s=i[r],t[s]=e[s];return t}function zC(e){function t(i,r,n,s){let o=i[s++];if(o==="__proto__")return!0;let a=Number.isFinite(+o),c=s>=i.length;return o=!o&&I.isArray(n)?n.length:o,c?(I.hasOwnProp(n,o)?n[o]=[n[o],r]:n[o]=r,!a):((!n[o]||!I.isObject(n[o]))&&(n[o]=[]),t(i,r,n[o],s)&&I.isArray(n[o])&&(n[o]=$C(n[o])),!a)}if(I.isFormData(e)&&I.isFunction(e.entries)){let i={};return I.forEachEntry(e,(r,n)=>{t(UC(r),n,i,0)}),i}return null}var Mn=zC;function HC(e,t,i){if(I.isString(e))try{return(t||JSON.parse)(e),I.trim(e)}catch(r){if(r.name!=="SyntaxError")throw r}return(i||JSON.stringify)(e)}var Va={transitional:zi,adapter:["xhr","http","fetch"],transformRequest:[function(t,i){let r=i.getContentType()||"",n=r.indexOf("application/json")>-1,s=I.isObject(t);if(s&&I.isHTMLForm(t)&&(t=new FormData(t)),I.isFormData(t))return n?JSON.stringify(Mn(t)):t;if(I.isArrayBuffer(t)||I.isBuffer(t)||I.isStream(t)||I.isFile(t)||I.isBlob(t)||I.isReadableStream(t))return t;if(I.isArrayBufferView(t))return t.buffer;if(I.isURLSearchParams(t))return i.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),t.toString();let a;if(s){if(r.indexOf("application/x-www-form-urlencoded")>-1)return Ga(t,this.formSerializer).toString();if((a=I.isFileList(t))||r.indexOf("multipart/form-data")>-1){let c=this.env&&this.env.FormData;return ei(a?{"files[]":t}:t,c&&new c,this.formSerializer)}}return s||n?(i.setContentType("application/json",!1),HC(t)):t}],transformResponse:[function(t){let i=this.transitional||Va.transitional,r=i&&i.forcedJSONParsing,n=this.responseType==="json";if(I.isResponse(t)||I.isReadableStream(t))return t;if(t&&I.isString(t)&&(r&&!this.responseType||n)){let o=!(i&&i.silentJSONParsing)&&n;try{return JSON.parse(t)}catch(a){if(o)throw a.name==="SyntaxError"?B.from(a,B.ERR_BAD_RESPONSE,this,null,this.response):a}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:be.classes.FormData,Blob:be.classes.Blob},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};I.forEach(["delete","get","head","post","put","patch"],e=>{Va.headers[e]={}});var Hi=Va;var GC=I.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Cm=e=>{let t={},i,r,n;return e&&e.split(`
`).forEach(function(o){n=o.indexOf(":"),i=o.substring(0,n).trim().toLowerCase(),r=o.substring(n+1).trim(),!(!i||t[i]&&GC[i])&&(i==="set-cookie"?t[i]?t[i].push(r):t[i]=[r]:t[i]=t[i]?t[i]+", "+r:r)}),t};var Om=Symbol("internals");function Cr(e){return e&&String(e).trim().toLowerCase()}function qn(e){return e===!1||e==null?e:I.isArray(e)?e.map(qn):String(e)}function VC(e){let t=Object.create(null),i=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g,r;for(;r=i.exec(e);)t[r[1]]=r[2];return t}var XC=e=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim());function Xa(e,t,i,r,n){if(I.isFunction(r))return r.call(this,t,i);if(n&&(t=i),!!I.isString(t)){if(I.isString(r))return t.indexOf(r)!==-1;if(I.isRegExp(r))return r.test(t)}}function YC(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(t,i,r)=>i.toUpperCase()+r)}function WC(e,t){let i=I.toCamelCase(" "+t);["get","set","has"].forEach(r=>{Object.defineProperty(e,r+i,{value:function(n,s,o){return this[r].call(this,t,n,s,o)},configurable:!0})})}var Gi=class{constructor(t){t&&this.set(t)}set(t,i,r){let n=this;function s(a,c,u){let f=Cr(c);if(!f)throw new Error("header name must be a non-empty string");let g=I.findKey(n,f);(!g||n[g]===void 0||u===!0||u===void 0&&n[g]!==!1)&&(n[g||c]=qn(a))}let o=(a,c)=>I.forEach(a,(u,f)=>s(u,f,c));if(I.isPlainObject(t)||t instanceof this.constructor)o(t,i);else if(I.isString(t)&&(t=t.trim())&&!XC(t))o(Cm(t),i);else if(I.isHeaders(t))for(let[a,c]of t.entries())s(c,a,r);else t!=null&&s(i,t,r);return this}get(t,i){if(t=Cr(t),t){let r=I.findKey(this,t);if(r){let n=this[r];if(!i)return n;if(i===!0)return VC(n);if(I.isFunction(i))return i.call(this,n,r);if(I.isRegExp(i))return i.exec(n);throw new TypeError("parser must be boolean|regexp|function")}}}has(t,i){if(t=Cr(t),t){let r=I.findKey(this,t);return!!(r&&this[r]!==void 0&&(!i||Xa(this,this[r],r,i)))}return!1}delete(t,i){let r=this,n=!1;function s(o){if(o=Cr(o),o){let a=I.findKey(r,o);a&&(!i||Xa(r,r[a],a,i))&&(delete r[a],n=!0)}}return I.isArray(t)?t.forEach(s):s(t),n}clear(t){let i=Object.keys(this),r=i.length,n=!1;for(;r--;){let s=i[r];(!t||Xa(this,this[s],s,t,!0))&&(delete this[s],n=!0)}return n}normalize(t){let i=this,r={};return I.forEach(this,(n,s)=>{let o=I.findKey(r,s);if(o){i[o]=qn(n),delete i[s];return}let a=t?YC(s):String(s).trim();a!==s&&delete i[s],i[a]=qn(n),r[a]=!0}),this}concat(...t){return this.constructor.concat(this,...t)}toJSON(t){let i=Object.create(null);return I.forEach(this,(r,n)=>{r!=null&&r!==!1&&(i[n]=t&&I.isArray(r)?r.join(", "):r)}),i}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([t,i])=>t+": "+i).join(`
`)}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(t){return t instanceof this?t:new this(t)}static concat(t,...i){let r=new this(t);return i.forEach(n=>r.set(n)),r}static accessor(t){let r=(this[Om]=this[Om]={accessors:{}}).accessors,n=this.prototype;function s(o){let a=Cr(o);r[a]||(WC(n,o),r[a]=!0)}return I.isArray(t)?t.forEach(s):s(t),this}};Gi.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]);I.reduceDescriptors(Gi.prototype,({value:e},t)=>{let i=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(r){this[i]=r}}});I.freezeMethods(Gi);var he=Gi;function Or(e,t){let i=this||Hi,r=t||i,n=he.from(r.headers),s=r.data;return I.forEach(e,function(a){s=a.call(i,s,n.normalize(),t?t.status:void 0)}),n.normalize(),s}function Ar(e){return!!(e&&e.__CANCEL__)}function Am(e,t,i){B.call(this,e??"canceled",B.ERR_CANCELED,t,i),this.name="CanceledError"}I.inherits(Am,B,{__CANCEL__:!0});var it=Am;function Ct(e,t,i){let r=i.config.validateStatus;!i.status||!r||r(i.status)?e(i):t(new B("Request failed with status code "+i.status,[B.ERR_BAD_REQUEST,B.ERR_BAD_RESPONSE][Math.floor(i.status/100)-4],i.config,i.request,i))}function Ya(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}function Wa(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}function mi(e,t){return e&&!Ya(t)?Wa(e,t):t}var ag=se(Im(),1),cg=se(require("http"),1),ug=se(require("https"),1),lg=se(require("util"),1),pg=se(Ym(),1),Bt=se(require("zlib"),1);var vi="1.7.2";function Rr(e){let t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}var RO=/^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\s\S]*)$/;function dc(e,t,i){let r=i&&i.Blob||be.classes.Blob,n=Rr(e);if(t===void 0&&r&&(t=!0),n==="data"){e=n.length?e.slice(n.length+1):e;let s=RO.exec(e);if(!s)throw new B("Invalid URL",B.ERR_INVALID_URL);let o=s[1],a=s[2],c=s[3],u=Buffer.from(decodeURIComponent(c),a?"base64":"utf8");if(t){if(!r)throw new B("Blob is not supported",B.ERR_NOT_SUPPORT);return new r([u],{type:o})}return u}throw new B("Unsupported protocol "+n,B.ERR_NOT_SUPPORT)}var yi=se(require("stream"),1);var Wm=se(require("stream"),1);function PO(e,t){let i=0,r=1e3/t,n=null;return function(){let o=this===!0,a=Date.now();if(o||a-i>r)return n&&(clearTimeout(n),n=null),i=a,e.apply(null,arguments);n||(n=setTimeout(()=>(n=null,i=Date.now(),e.apply(null,arguments)),r-(a-i)))}}var Gn=PO;function FO(e,t){e=e||10;let i=new Array(e),r=new Array(e),n=0,s=0,o;return t=t!==void 0?t:1e3,function(c){let u=Date.now(),f=r[s];o||(o=u),i[n]=c,r[n]=u;let g=s,x=0;for(;g!==n;)x+=i[g++],g=g%e;if(n=(n+1)%e,n===s&&(s=(s+1)%e),u-o<t)return;let l=f&&u-f;return l?Math.round(x*1e3/l):void 0}}var Vn=FO;var Xn=Symbol("internals"),fc=class extends Wm.default.Transform{constructor(t){t=I.toFlatObject(t,{maxRate:0,chunkSize:64*1024,minChunkSize:100,timeWindow:500,ticksRate:2,samplesCount:15},null,(a,c)=>!I.isUndefined(c[a])),super({readableHighWaterMark:t.chunkSize});let i=this,r=this[Xn]={length:t.length,timeWindow:t.timeWindow,ticksRate:t.ticksRate,chunkSize:t.chunkSize,maxRate:t.maxRate,minChunkSize:t.minChunkSize,bytesSeen:0,isCaptured:!1,notifiedBytesLoaded:0,ts:Date.now(),bytes:0,onReadCallback:null},n=Vn(r.ticksRate*t.samplesCount,r.timeWindow);this.on("newListener",a=>{a==="progress"&&(r.isCaptured||(r.isCaptured=!0))});let s=0;r.updateProgress=Gn(function(){let c=r.length,u=r.bytesSeen,f=u-s;if(!f||i.destroyed)return;let g=n(f);s=u,process.nextTick(()=>{i.emit("progress",{loaded:u,total:c,progress:c?u/c:void 0,bytes:f,rate:g||void 0,estimated:g&&c&&u<=c?(c-u)/g:void 0,lengthComputable:c!=null})})},r.ticksRate);let o=()=>{r.updateProgress.call(!0)};this.once("end",o),this.once("error",o)}_read(t){let i=this[Xn];return i.onReadCallback&&i.onReadCallback(),super._read(t)}_transform(t,i,r){let n=this,s=this[Xn],o=s.maxRate,a=this.readableHighWaterMark,c=s.timeWindow,u=1e3/c,f=o/u,g=s.minChunkSize!==!1?Math.max(s.minChunkSize,f*.01):0;function x(m,v){let w=Buffer.byteLength(m);s.bytesSeen+=w,s.bytes+=w,s.isCaptured&&s.updateProgress(),n.push(m)?process.nextTick(v):s.onReadCallback=()=>{s.onReadCallback=null,process.nextTick(v)}}let l=(m,v)=>{let w=Buffer.byteLength(m),_=null,E=a,p,d=0;if(o){let h=Date.now();(!s.ts||(d=h-s.ts)>=c)&&(s.ts=h,p=f-s.bytes,s.bytes=p<0?-p:0,d=0),p=f-s.bytes}if(o){if(p<=0)return setTimeout(()=>{v(null,m)},c-d);p<E&&(E=p)}E&&w>E&&w-E>g&&(_=m.subarray(E),m=m.subarray(0,E)),x(m,_?()=>{process.nextTick(v,null,_)}:v)};l(t,function m(v,w){if(v)return r(v);w?l(w,m):r(null)})}setLength(t){return this[Xn].length=+t,this}},hc=fc;var dg=require("events");var Jm=require("util"),Zm=require("stream");var{asyncIterator:Km}=Symbol,jO=async function*(e){e.stream?yield*e.stream():e.arrayBuffer?yield await e.arrayBuffer():e[Km]?yield*e[Km]():yield e},Yn=jO;var MO=I.ALPHABET.ALPHA_DIGIT+"-_",Pr=new Jm.TextEncoder,ii=`\r
`,qO=Pr.encode(ii),BO=2,mc=class{constructor(t,i){let{escapeName:r}=this.constructor,n=I.isString(i),s=`Content-Disposition: form-data; name="${r(t)}"${!n&&i.name?`; filename="${r(i.name)}"`:""}${ii}`;n?i=Pr.encode(String(i).replace(/\r?\n|\r\n?/g,ii)):s+=`Content-Type: ${i.type||"application/octet-stream"}${ii}`,this.headers=Pr.encode(s+ii),this.contentLength=n?i.byteLength:i.size,this.size=this.headers.byteLength+this.contentLength+BO,this.name=t,this.value=i}async*encode(){yield this.headers;let{value:t}=this;I.isTypedArray(t)?yield t:yield*Yn(t),yield qO}static escapeName(t){return String(t).replace(/[\r\n"]/g,i=>({"\r":"%0D","\n":"%0A",'"':"%22"})[i])}},UO=(e,t,i)=>{let{tag:r="form-data-boundary",size:n=25,boundary:s=r+"-"+I.generateString(n,MO)}=i||{};if(!I.isFormData(e))throw TypeError("FormData instance required");if(s.length<1||s.length>70)throw Error("boundary must be 10-70 characters long");let o=Pr.encode("--"+s+ii),a=Pr.encode("--"+s+"--"+ii+ii),c=a.byteLength,u=Array.from(e.entries()).map(([g,x])=>{let l=new mc(g,x);return c+=l.size,l});c+=o.byteLength*u.length,c=I.toFiniteNumber(c);let f={"Content-Type":`multipart/form-data; boundary=${s}`};return Number.isFinite(c)&&(f["Content-Length"]=c),t&&t(f),Zm.Readable.from(async function*(){for(let g of u)yield o,yield*g.encode();yield a}())},Qm=UO;var eg=se(require("stream"),1),gc=class extends eg.default.Transform{__transform(t,i,r){this.push(t),r()}_transform(t,i,r){if(t.length!==0&&(this._transform=this.__transform,t[0]!==120)){let n=Buffer.alloc(2);n[0]=120,n[1]=156,this.push(n,i)}this.__transform(t,i,r)}},tg=gc;var $O=(e,t)=>I.isAsyncFn(e)?function(...i){let r=i.pop();e.apply(this,i).then(n=>{try{t?r(null,...t(n)):r(null,n)}catch(s){r(s)}},r)}:e,ig=$O;var rg={flush:Bt.default.constants.Z_SYNC_FLUSH,finishFlush:Bt.default.constants.Z_SYNC_FLUSH},zO={flush:Bt.default.constants.BROTLI_OPERATION_FLUSH,finishFlush:Bt.default.constants.BROTLI_OPERATION_FLUSH},ng=I.isFunction(Bt.default.createBrotliDecompress),{http:HO,https:GO}=pg.default,VO=/https:?/,sg=be.protocols.map(e=>e+":");function XO(e,t){e.beforeRedirects.proxy&&e.beforeRedirects.proxy(e),e.beforeRedirects.config&&e.beforeRedirects.config(e,t)}function fg(e,t,i){let r=t;if(!r&&r!==!1){let n=(0,ag.getProxyForUrl)(i);n&&(r=new URL(n))}if(r){if(r.username&&(r.auth=(r.username||"")+":"+(r.password||"")),r.auth){(r.auth.username||r.auth.password)&&(r.auth=(r.auth.username||"")+":"+(r.auth.password||""));let s=Buffer.from(r.auth,"utf8").toString("base64");e.headers["Proxy-Authorization"]="Basic "+s}e.headers.host=e.hostname+(e.port?":"+e.port:"");let n=r.hostname||r.host;e.hostname=n,e.host=n,e.port=r.port,e.path=i,r.protocol&&(e.protocol=r.protocol.includes(":")?r.protocol:`${r.protocol}:`)}e.beforeRedirects.proxy=function(s){fg(s,t,s.href)}}var YO=typeof process<"u"&&I.kindOf(process)==="process",WO=e=>new Promise((t,i)=>{let r,n,s=(c,u)=>{n||(n=!0,r&&r(c,u))},o=c=>{s(c),t(c)},a=c=>{s(c,!0),i(c)};e(o,a,c=>r=c).catch(a)}),KO=({address:e,family:t})=>{if(!I.isString(e))throw TypeError("address must be a string");return{address:e,family:t||(e.indexOf(".")<0?6:4)}},og=(e,t)=>KO(I.isObject(e)?e:{address:e,family:t}),hg=YO&&function(t){return WO(async function(r,n,s){let{data:o,lookup:a,family:c}=t,{responseType:u,responseEncoding:f}=t,g=t.method.toUpperCase(),x,l=!1,m;if(a){let $=ig(a,j=>I.isArray(j)?j:[j]);a=(j,ae,J)=>{$(j,ae,(_e,Ve,Nt)=>{if(_e)return J(_e);let De=I.isArray(Ve)?Ve.map(Me=>og(Me)):[og(Ve,Nt)];ae.all?J(_e,De):J(_e,De[0].address,De[0].family)})}}let v=new dg.EventEmitter,w=()=>{t.cancelToken&&t.cancelToken.unsubscribe(_),t.signal&&t.signal.removeEventListener("abort",_),v.removeAllListeners()};s(($,j)=>{x=!0,j&&(l=!0,w())});function _($){v.emit("abort",!$||$.type?new it(null,t,m):$)}v.once("abort",n),(t.cancelToken||t.signal)&&(t.cancelToken&&t.cancelToken.subscribe(_),t.signal&&(t.signal.aborted?_():t.signal.addEventListener("abort",_)));let E=mi(t.baseURL,t.url),p=new URL(E,"http://localhost"),d=p.protocol||sg[0];if(d==="data:"){let $;if(g!=="GET")return Ct(r,n,{status:405,statusText:"method not allowed",headers:{},config:t});try{$=dc(t.url,u==="blob",{Blob:t.env&&t.env.Blob})}catch(j){throw B.from(j,B.ERR_BAD_REQUEST,t)}return u==="text"?($=$.toString(f),(!f||f==="utf8")&&($=I.stripBOM($))):u==="stream"&&($=yi.default.Readable.from($)),Ct(r,n,{data:$,status:200,statusText:"OK",headers:new he,config:t})}if(sg.indexOf(d)===-1)return n(new B("Unsupported protocol "+d,B.ERR_BAD_REQUEST,t));let h=he.from(t.headers).normalize();h.set("User-Agent","axios/"+vi,!1);let b=t.onDownloadProgress,O=t.onUploadProgress,A=t.maxRate,D,S;if(I.isSpecCompliantForm(o)){let $=h.getContentType(/boundary=([-_\w\d]{10,70})/i);o=Qm(o,j=>{h.set(j)},{tag:`axios-${vi}-boundary`,boundary:$&&$[1]||void 0})}else if(I.isFormData(o)&&I.isFunction(o.getHeaders)){if(h.set(o.getHeaders()),!h.hasContentLength())try{let $=await lg.default.promisify(o.getLength).call(o);Number.isFinite($)&&$>=0&&h.setContentLength($)}catch{}}else if(I.isBlob(o))o.size&&h.setContentType(o.type||"application/octet-stream"),h.setContentLength(o.size||0),o=yi.default.Readable.from(Yn(o));else if(o&&!I.isStream(o)){if(!Buffer.isBuffer(o))if(I.isArrayBuffer(o))o=Buffer.from(new Uint8Array(o));else if(I.isString(o))o=Buffer.from(o,"utf-8");else return n(new B("Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream",B.ERR_BAD_REQUEST,t));if(h.setContentLength(o.length,!1),t.maxBodyLength>-1&&o.length>t.maxBodyLength)return n(new B("Request body larger than maxBodyLength limit",B.ERR_BAD_REQUEST,t))}let L=I.toFiniteNumber(h.getContentLength());I.isArray(A)?(D=A[0],S=A[1]):D=S=A,o&&(O||D)&&(I.isStream(o)||(o=yi.default.Readable.from(o,{objectMode:!1})),o=yi.default.pipeline([o,new hc({length:L,maxRate:I.toFiniteNumber(D)})],I.noop),O&&o.on("progress",$=>{O(Object.assign($,{upload:!0}))}));let C;if(t.auth){let $=t.auth.username||"",j=t.auth.password||"";C=$+":"+j}if(!C&&p.username){let $=p.username,j=p.password;C=$+":"+j}C&&h.delete("authorization");let F;try{F=hi(p.pathname+p.search,t.params,t.paramsSerializer).replace(/^\?/,"")}catch($){let j=new Error($.message);return j.config=t,j.url=t.url,j.exists=!0,n(j)}h.set("Accept-Encoding","gzip, compress, deflate"+(ng?", br":""),!1);let z={path:F,method:g,headers:h.toJSON(),agents:{http:t.httpAgent,https:t.httpsAgent},auth:C,protocol:d,family:c,beforeRedirect:XO,beforeRedirects:{}};!I.isUndefined(a)&&(z.lookup=a),t.socketPath?z.socketPath=t.socketPath:(z.hostname=p.hostname,z.port=p.port,fg(z,t.proxy,d+"//"+p.hostname+(p.port?":"+p.port:"")+z.path));let H,V=VO.test(z.protocol);if(z.agent=V?t.httpsAgent:t.httpAgent,t.transport?H=t.transport:t.maxRedirects===0?H=V?ug.default:cg.default:(t.maxRedirects&&(z.maxRedirects=t.maxRedirects),t.beforeRedirect&&(z.beforeRedirects.config=t.beforeRedirect),H=V?GO:HO),t.maxBodyLength>-1?z.maxBodyLength=t.maxBodyLength:z.maxBodyLength=1/0,t.insecureHTTPParser&&(z.insecureHTTPParser=t.insecureHTTPParser),m=H.request(z,function(j){if(m.destroyed)return;let ae=[j],J=+j.headers["content-length"];if(b){let Me=new hc({length:I.toFiniteNumber(J),maxRate:I.toFiniteNumber(S)});b&&Me.on("progress",Xt=>{b(Object.assign(Xt,{download:!0}))}),ae.push(Me)}let _e=j,Ve=j.req||m;if(t.decompress!==!1&&j.headers["content-encoding"])switch((g==="HEAD"||j.statusCode===204)&&delete j.headers["content-encoding"],(j.headers["content-encoding"]||"").toLowerCase()){case"gzip":case"x-gzip":case"compress":case"x-compress":ae.push(Bt.default.createUnzip(rg)),delete j.headers["content-encoding"];break;case"deflate":ae.push(new tg),ae.push(Bt.default.createUnzip(rg)),delete j.headers["content-encoding"];break;case"br":ng&&(ae.push(Bt.default.createBrotliDecompress(zO)),delete j.headers["content-encoding"])}_e=ae.length>1?yi.default.pipeline(ae,I.noop):ae[0];let Nt=yi.default.finished(_e,()=>{Nt(),w()}),De={status:j.statusCode,statusText:j.statusMessage,headers:new he(j.headers),config:t,request:Ve};if(u==="stream")De.data=_e,Ct(r,n,De);else{let Me=[],Xt=0;_e.on("data",function(Ie){Me.push(Ie),Xt+=Ie.length,t.maxContentLength>-1&&Xt>t.maxContentLength&&(l=!0,_e.destroy(),n(new B("maxContentLength size of "+t.maxContentLength+" exceeded",B.ERR_BAD_RESPONSE,t,Ve)))}),_e.on("aborted",function(){if(l)return;let Ie=new B("maxContentLength size of "+t.maxContentLength+" exceeded",B.ERR_BAD_RESPONSE,t,Ve);_e.destroy(Ie),n(Ie)}),_e.on("error",function(Ie){m.destroyed||n(B.from(Ie,null,t,Ve))}),_e.on("end",function(){try{let Ie=Me.length===1?Me[0]:Buffer.concat(Me);u!=="arraybuffer"&&(Ie=Ie.toString(f),(!f||f==="utf8")&&(Ie=I.stripBOM(Ie))),De.data=Ie}catch(Ie){return n(B.from(Ie,null,t,De.request,De))}Ct(r,n,De)})}v.once("abort",Me=>{_e.destroyed||(_e.emit("error",Me),_e.destroy())})}),v.once("abort",$=>{n($),m.destroy($)}),m.on("error",function(j){n(B.from(j,null,t,m))}),m.on("socket",function(j){j.setKeepAlive(!0,1e3*60)}),t.timeout){let $=parseInt(t.timeout,10);if(Number.isNaN($)){n(new B("error trying to parse `config.timeout` to int",B.ERR_BAD_OPTION_VALUE,t,m));return}m.setTimeout($,function(){if(x)return;let ae=t.timeout?"timeout of "+t.timeout+"ms exceeded":"timeout exceeded",J=t.transitional||zi;t.timeoutErrorMessage&&(ae=t.timeoutErrorMessage),n(new B(ae,J.clarifyTimeoutError?B.ETIMEDOUT:B.ECONNABORTED,t,m)),_()})}if(I.isStream(o)){let $=!1,j=!1;o.on("end",()=>{$=!0}),o.once("error",ae=>{j=!0,m.destroy(ae)}),o.on("close",()=>{!$&&!j&&_(new it("Request stream has been aborted",t,m))}),o.pipe(m)}else m.end(o)})};var Ki=(e,t,i=3)=>{let r=0,n=Vn(50,250);return Gn(s=>{let o=s.loaded,a=s.lengthComputable?s.total:void 0,c=o-r,u=n(c),f=o<=a;r=o;let g={loaded:o,total:a,progress:a?o/a:void 0,bytes:c,rate:u||void 0,estimated:u&&a&&f?(a-o)/u:void 0,event:s,lengthComputable:a!=null};g[t?"download":"upload"]=!0,e(g)},i)};var mg=be.hasStandardBrowserEnv?function(){let t=/(msie|trident)/i.test(navigator.userAgent),i=document.createElement("a"),r;function n(s){let o=s;return t&&(i.setAttribute("href",o),o=i.href),i.setAttribute("href",o),{href:i.href,protocol:i.protocol?i.protocol.replace(/:$/,""):"",host:i.host,search:i.search?i.search.replace(/^\?/,""):"",hash:i.hash?i.hash.replace(/^#/,""):"",hostname:i.hostname,port:i.port,pathname:i.pathname.charAt(0)==="/"?i.pathname:"/"+i.pathname}}return r=n(window.location.href),function(o){let a=I.isString(o)?n(o):o;return a.protocol===r.protocol&&a.host===r.host}}():function(){return function(){return!0}}();var gg=be.hasStandardBrowserEnv?{write(e,t,i,r,n,s){let o=[e+"="+encodeURIComponent(t)];I.isNumber(i)&&o.push("expires="+new Date(i).toGMTString()),I.isString(r)&&o.push("path="+r),I.isString(n)&&o.push("domain="+n),s===!0&&o.push("secure"),document.cookie=o.join("; ")},read(e){let t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read(){return null},remove(){}};var xg=e=>e instanceof he?{...e}:e;function vt(e,t){t=t||{};let i={};function r(u,f,g){return I.isPlainObject(u)&&I.isPlainObject(f)?I.merge.call({caseless:g},u,f):I.isPlainObject(f)?I.merge({},f):I.isArray(f)?f.slice():f}function n(u,f,g){if(I.isUndefined(f)){if(!I.isUndefined(u))return r(void 0,u,g)}else return r(u,f,g)}function s(u,f){if(!I.isUndefined(f))return r(void 0,f)}function o(u,f){if(I.isUndefined(f)){if(!I.isUndefined(u))return r(void 0,u)}else return r(void 0,f)}function a(u,f,g){if(g in t)return r(u,f);if(g in e)return r(void 0,u)}let c={url:s,method:s,data:s,baseURL:o,transformRequest:o,transformResponse:o,paramsSerializer:o,timeout:o,timeoutMessage:o,withCredentials:o,withXSRFToken:o,adapter:o,responseType:o,xsrfCookieName:o,xsrfHeaderName:o,onUploadProgress:o,onDownloadProgress:o,decompress:o,maxContentLength:o,maxBodyLength:o,beforeRedirect:o,transport:o,httpAgent:o,httpsAgent:o,cancelToken:o,socketPath:o,responseEncoding:o,validateStatus:a,headers:(u,f)=>n(xg(u),xg(f),!0)};return I.forEach(Object.keys(Object.assign({},e,t)),function(f){let g=c[f]||n,x=g(e[f],t[f],f);I.isUndefined(x)&&g!==a||(i[f]=x)}),i}var Wn=e=>{let t=vt({},e),{data:i,withXSRFToken:r,xsrfHeaderName:n,xsrfCookieName:s,headers:o,auth:a}=t;t.headers=o=he.from(o),t.url=hi(mi(t.baseURL,t.url),e.params,e.paramsSerializer),a&&o.set("Authorization","Basic "+btoa((a.username||"")+":"+(a.password?unescape(encodeURIComponent(a.password)):"")));let c;if(I.isFormData(i)){if(be.hasStandardBrowserEnv||be.hasStandardBrowserWebWorkerEnv)o.setContentType(void 0);else if((c=o.getContentType())!==!1){let[u,...f]=c?c.split(";").map(g=>g.trim()).filter(Boolean):[];o.setContentType([u||"multipart/form-data",...f].join("; "))}}if(be.hasStandardBrowserEnv&&(r&&I.isFunction(r)&&(r=r(t)),r||r!==!1&&mg(t.url))){let u=n&&s&&gg.read(s);u&&o.set(n,u)}return t};var JO=typeof XMLHttpRequest<"u",vg=JO&&function(e){return new Promise(function(i,r){let n=Wn(e),s=n.data,o=he.from(n.headers).normalize(),{responseType:a}=n,c;function u(){n.cancelToken&&n.cancelToken.unsubscribe(c),n.signal&&n.signal.removeEventListener("abort",c)}let f=new XMLHttpRequest;f.open(n.method.toUpperCase(),n.url,!0),f.timeout=n.timeout;function g(){if(!f)return;let l=he.from("getAllResponseHeaders"in f&&f.getAllResponseHeaders()),v={data:!a||a==="text"||a==="json"?f.responseText:f.response,status:f.status,statusText:f.statusText,headers:l,config:e,request:f};Ct(function(_){i(_),u()},function(_){r(_),u()},v),f=null}"onloadend"in f?f.onloadend=g:f.onreadystatechange=function(){!f||f.readyState!==4||f.status===0&&!(f.responseURL&&f.responseURL.indexOf("file:")===0)||setTimeout(g)},f.onabort=function(){f&&(r(new B("Request aborted",B.ECONNABORTED,n,f)),f=null)},f.onerror=function(){r(new B("Network Error",B.ERR_NETWORK,n,f)),f=null},f.ontimeout=function(){let m=n.timeout?"timeout of "+n.timeout+"ms exceeded":"timeout exceeded",v=n.transitional||zi;n.timeoutErrorMessage&&(m=n.timeoutErrorMessage),r(new B(m,v.clarifyTimeoutError?B.ETIMEDOUT:B.ECONNABORTED,n,f)),f=null},s===void 0&&o.setContentType(null),"setRequestHeader"in f&&I.forEach(o.toJSON(),function(m,v){f.setRequestHeader(v,m)}),I.isUndefined(n.withCredentials)||(f.withCredentials=!!n.withCredentials),a&&a!=="json"&&(f.responseType=n.responseType),typeof n.onDownloadProgress=="function"&&f.addEventListener("progress",Ki(n.onDownloadProgress,!0)),typeof n.onUploadProgress=="function"&&f.upload&&f.upload.addEventListener("progress",Ki(n.onUploadProgress)),(n.cancelToken||n.signal)&&(c=l=>{f&&(r(!l||l.type?new it(null,e,f):l),f.abort(),f=null)},n.cancelToken&&n.cancelToken.subscribe(c),n.signal&&(n.signal.aborted?c():n.signal.addEventListener("abort",c)));let x=Rr(n.url);if(x&&be.protocols.indexOf(x)===-1){r(new B("Unsupported protocol "+x+":",B.ERR_BAD_REQUEST,e));return}f.send(s||null)})};var ZO=(e,t)=>{let i=new AbortController,r,n=function(c){if(!r){r=!0,o();let u=c instanceof Error?c:this.reason;i.abort(u instanceof B?u:new it(u instanceof Error?u.message:u))}},s=t&&setTimeout(()=>{n(new B(`timeout ${t} of ms exceeded`,B.ETIMEDOUT))},t),o=()=>{e&&(s&&clearTimeout(s),s=null,e.forEach(c=>{c&&(c.removeEventListener?c.removeEventListener("abort",n):c.unsubscribe(n))}),e=null)};e.forEach(c=>c&&c.addEventListener&&c.addEventListener("abort",n));let{signal:a}=i;return a.unsubscribe=o,[a,()=>{s&&clearTimeout(s),s=null}]},yg=ZO;var QO=function*(e,t){let i=e.byteLength;if(!t||i<t){yield e;return}let r=0,n;for(;r<i;)n=r+t,yield e.slice(r,n),r=n},e1=async function*(e,t,i){for await(let r of e)yield*QO(ArrayBuffer.isView(r)?r:await i(String(r)),t)},xc=(e,t,i,r,n)=>{let s=e1(e,t,n),o=0;return new ReadableStream({type:"bytes",async pull(a){let{done:c,value:u}=await s.next();if(c){a.close(),r();return}let f=u.byteLength;i&&i(o+=f),a.enqueue(new Uint8Array(u))},cancel(a){return r(a),s.return()}},{highWaterMark:2})};var bg=(e,t)=>{let i=e!=null;return r=>setTimeout(()=>t({lengthComputable:i,total:e,loaded:r}))},Jn=typeof fetch=="function"&&typeof Request=="function"&&typeof Response=="function",Eg=Jn&&typeof ReadableStream=="function",vc=Jn&&(typeof TextEncoder=="function"?(e=>t=>e.encode(t))(new TextEncoder):async e=>new Uint8Array(await new Response(e).arrayBuffer())),t1=Eg&&(()=>{let e=!1,t=new Request(be.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!t})(),wg=64*1024,yc=Eg&&!!(()=>{try{return I.isReadableStream(new Response("").body)}catch{}})(),Kn={stream:yc&&(e=>e.body)};Jn&&(e=>{["text","arrayBuffer","blob","formData","stream"].forEach(t=>{!Kn[t]&&(Kn[t]=I.isFunction(e[t])?i=>i[t]():(i,r)=>{throw new B(`Response type '${t}' is not supported`,B.ERR_NOT_SUPPORT,r)})})})(new Response);var i1=async e=>{if(e==null)return 0;if(I.isBlob(e))return e.size;if(I.isSpecCompliantForm(e))return(await new Request(e).arrayBuffer()).byteLength;if(I.isArrayBufferView(e))return e.byteLength;if(I.isURLSearchParams(e)&&(e=e+""),I.isString(e))return(await vc(e)).byteLength},r1=async(e,t)=>{let i=I.toFiniteNumber(e.getContentLength());return i??i1(t)},_g=Jn&&(async e=>{let{url:t,method:i,data:r,signal:n,cancelToken:s,timeout:o,onDownloadProgress:a,onUploadProgress:c,responseType:u,headers:f,withCredentials:g="same-origin",fetchOptions:x}=Wn(e);u=u?(u+"").toLowerCase():"text";let[l,m]=n||s||o?yg([n,s],o):[],v,w,_=()=>{!v&&setTimeout(()=>{l&&l.unsubscribe()}),v=!0},E;try{if(c&&t1&&i!=="get"&&i!=="head"&&(E=await r1(f,r))!==0){let b=new Request(t,{method:"POST",body:r,duplex:"half"}),O;I.isFormData(r)&&(O=b.headers.get("content-type"))&&f.setContentType(O),b.body&&(r=xc(b.body,wg,bg(E,Ki(c)),null,vc))}I.isString(g)||(g=g?"cors":"omit"),w=new Request(t,{...x,signal:l,method:i.toUpperCase(),headers:f.normalize().toJSON(),body:r,duplex:"half",withCredentials:g});let p=await fetch(w),d=yc&&(u==="stream"||u==="response");if(yc&&(a||d)){let b={};["status","statusText","headers"].forEach(A=>{b[A]=p[A]});let O=I.toFiniteNumber(p.headers.get("content-length"));p=new Response(xc(p.body,wg,a&&bg(O,Ki(a,!0)),d&&_,vc),b)}u=u||"text";let h=await Kn[I.findKey(Kn,u)||"text"](p,e);return!d&&_(),m&&m(),await new Promise((b,O)=>{Ct(b,O,{data:h,headers:he.from(p.headers),status:p.status,statusText:p.statusText,config:e,request:w})})}catch(p){throw _(),p&&p.name==="TypeError"&&/fetch/i.test(p.message)?Object.assign(new B("Network Error",B.ERR_NETWORK,e,w),{cause:p.cause||p}):B.from(p,p&&p.code,e,w)}});var bc={http:hg,xhr:vg,fetch:_g};I.forEach(bc,(e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch{}Object.defineProperty(e,"adapterName",{value:t})}});var Tg=e=>`- ${e}`,n1=e=>I.isFunction(e)||e===null||e===!1,Zn={getAdapter:e=>{e=I.isArray(e)?e:[e];let{length:t}=e,i,r,n={};for(let s=0;s<t;s++){i=e[s];let o;if(r=i,!n1(i)&&(r=bc[(o=String(i)).toLowerCase()],r===void 0))throw new B(`Unknown adapter '${o}'`);if(r)break;n[o||"#"+s]=r}if(!r){let s=Object.entries(n).map(([a,c])=>`adapter ${a} `+(c===!1?"is not supported by the environment":"is not available in the build")),o=t?s.length>1?`since :
`+s.map(Tg).join(`
`):" "+Tg(s[0]):"as no adapter specified";throw new B("There is no suitable adapter to dispatch the request "+o,"ERR_NOT_SUPPORT")}return r},adapters:bc};function wc(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new it(null,e)}function Qn(e){return wc(e),e.headers=he.from(e.headers),e.data=Or.call(e,e.transformRequest),["post","put","patch"].indexOf(e.method)!==-1&&e.headers.setContentType("application/x-www-form-urlencoded",!1),Zn.getAdapter(e.adapter||Hi.adapter)(e).then(function(r){return wc(e),r.data=Or.call(e,e.transformResponse,r),r.headers=he.from(r.headers),r},function(r){return Ar(r)||(wc(e),r&&r.response&&(r.response.data=Or.call(e,e.transformResponse,r.response),r.response.headers=he.from(r.response.headers))),Promise.reject(r)})}var Ec={};["object","boolean","number","function","string","symbol"].forEach((e,t)=>{Ec[e]=function(r){return typeof r===e||"a"+(t<1?"n ":" ")+e}});var Sg={};Ec.transitional=function(t,i,r){function n(s,o){return"[Axios v"+vi+"] Transitional option '"+s+"'"+o+(r?". "+r:"")}return(s,o,a)=>{if(t===!1)throw new B(n(o," has been removed"+(i?" in "+i:"")),B.ERR_DEPRECATED);return i&&!Sg[o]&&(Sg[o]=!0,console.warn(n(o," has been deprecated since v"+i+" and will be removed in the near future"))),t?t(s,o,a):!0}};function s1(e,t,i){if(typeof e!="object")throw new B("options must be an object",B.ERR_BAD_OPTION_VALUE);let r=Object.keys(e),n=r.length;for(;n-- >0;){let s=r[n],o=t[s];if(o){let a=e[s],c=a===void 0||o(a,s,e);if(c!==!0)throw new B("option "+s+" must be "+c,B.ERR_BAD_OPTION_VALUE);continue}if(i!==!0)throw new B("Unknown option "+s,B.ERR_BAD_OPTION)}}var es={assertOptions:s1,validators:Ec};var ri=es.validators,Ji=class{constructor(t){this.defaults=t,this.interceptors={request:new $a,response:new $a}}async request(t,i){try{return await this._request(t,i)}catch(r){if(r instanceof Error){let n;Error.captureStackTrace?Error.captureStackTrace(n={}):n=new Error;let s=n.stack?n.stack.replace(/^.+\n/,""):"";try{r.stack?s&&!String(r.stack).endsWith(s.replace(/^.+\n.+\n/,""))&&(r.stack+=`
`+s):r.stack=s}catch{}}throw r}}_request(t,i){typeof t=="string"?(i=i||{},i.url=t):i=t||{},i=vt(this.defaults,i);let{transitional:r,paramsSerializer:n,headers:s}=i;r!==void 0&&es.assertOptions(r,{silentJSONParsing:ri.transitional(ri.boolean),forcedJSONParsing:ri.transitional(ri.boolean),clarifyTimeoutError:ri.transitional(ri.boolean)},!1),n!=null&&(I.isFunction(n)?i.paramsSerializer={serialize:n}:es.assertOptions(n,{encode:ri.function,serialize:ri.function},!0)),i.method=(i.method||this.defaults.method||"get").toLowerCase();let o=s&&I.merge(s.common,s[i.method]);s&&I.forEach(["delete","get","head","post","put","patch","common"],m=>{delete s[m]}),i.headers=he.concat(o,s);let a=[],c=!0;this.interceptors.request.forEach(function(v){typeof v.runWhen=="function"&&v.runWhen(i)===!1||(c=c&&v.synchronous,a.unshift(v.fulfilled,v.rejected))});let u=[];this.interceptors.response.forEach(function(v){u.push(v.fulfilled,v.rejected)});let f,g=0,x;if(!c){let m=[Qn.bind(this),void 0];for(m.unshift.apply(m,a),m.push.apply(m,u),x=m.length,f=Promise.resolve(i);g<x;)f=f.then(m[g++],m[g++]);return f}x=a.length;let l=i;for(g=0;g<x;){let m=a[g++],v=a[g++];try{l=m(l)}catch(w){v.call(this,w);break}}try{f=Qn.call(this,l)}catch(m){return Promise.reject(m)}for(g=0,x=u.length;g<x;)f=f.then(u[g++],u[g++]);return f}getUri(t){t=vt(this.defaults,t);let i=mi(t.baseURL,t.url);return hi(i,t.params,t.paramsSerializer)}};I.forEach(["delete","get","head","options"],function(t){Ji.prototype[t]=function(i,r){return this.request(vt(r||{},{method:t,url:i,data:(r||{}).data}))}});I.forEach(["post","put","patch"],function(t){function i(r){return function(s,o,a){return this.request(vt(a||{},{method:t,headers:r?{"Content-Type":"multipart/form-data"}:{},url:s,data:o}))}}Ji.prototype[t]=i(),Ji.prototype[t+"Form"]=i(!0)});var Fr=Ji;var _c=class e{constructor(t){if(typeof t!="function")throw new TypeError("executor must be a function.");let i;this.promise=new Promise(function(s){i=s});let r=this;this.promise.then(n=>{if(!r._listeners)return;let s=r._listeners.length;for(;s-- >0;)r._listeners[s](n);r._listeners=null}),this.promise.then=n=>{let s,o=new Promise(a=>{r.subscribe(a),s=a}).then(n);return o.cancel=function(){r.unsubscribe(s)},o},t(function(s,o,a){r.reason||(r.reason=new it(s,o,a),i(r.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(t){if(this.reason){t(this.reason);return}this._listeners?this._listeners.push(t):this._listeners=[t]}unsubscribe(t){if(!this._listeners)return;let i=this._listeners.indexOf(t);i!==-1&&this._listeners.splice(i,1)}static source(){let t;return{token:new e(function(n){t=n}),cancel:t}}},Cg=_c;function Tc(e){return function(i){return e.apply(null,i)}}function Sc(e){return I.isObject(e)&&e.isAxiosError===!0}var Cc={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Cc).forEach(([e,t])=>{Cc[t]=e});var Og=Cc;function Ag(e){let t=new Fr(e),i=_r(Fr.prototype.request,t);return I.extend(i,Fr.prototype,t,{allOwnKeys:!0}),I.extend(i,t,null,{allOwnKeys:!0}),i.create=function(n){return Ag(vt(e,n))},i}var Ne=Ag(Hi);Ne.Axios=Fr;Ne.CanceledError=it;Ne.CancelToken=Cg;Ne.isCancel=Ar;Ne.VERSION=vi;Ne.toFormData=ei;Ne.AxiosError=B;Ne.Cancel=Ne.CanceledError;Ne.all=function(t){return Promise.all(t)};Ne.spread=Tc;Ne.isAxiosError=Sc;Ne.mergeConfig=vt;Ne.AxiosHeaders=he;Ne.formToJSON=e=>Mn(I.isHTMLForm(e)?new FormData(e):e);Ne.getAdapter=Zn.getAdapter;Ne.HttpStatusCode=Og;Ne.default=Ne;var Zi=Ne;var{Axios:Sq,AxiosError:Cq,CanceledError:Oq,isCancel:Aq,CancelToken:Dq,VERSION:Iq,all:Nq,Cancel:Lq,isAxiosError:kq,spread:Rq,toFormData:Pq,AxiosHeaders:Fq,HttpStatusCode:jq,formToJSON:Mq,getAdapter:qq,mergeConfig:Bq}=Zi;var hs=se(Ig(),1),ls=se(Hn(),1),rv=require("child_process"),Bv=se(Ac(),1),er=se(Ac(),1),dy=require("events"),ds=Object.defineProperty,d1=Object.defineProperties,f1=Object.getOwnPropertyDescriptor,h1=Object.getOwnPropertyDescriptors,Xc=Object.getOwnPropertyNames,Ng=Object.getOwnPropertySymbols,lx=Object.prototype.hasOwnProperty,m1=Object.prototype.propertyIsEnumerable,Lg=(e,t,i)=>t in e?ds(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i,pt=(e,t)=>{for(var i in t||(t={}))lx.call(t,i)&&Lg(e,i,t[i]);if(Ng)for(var i of Ng(t))m1.call(t,i)&&Lg(e,i,t[i]);return e},qr=(e,t)=>d1(e,h1(t)),M=(e,t)=>function(){return e&&(t=(0,e[Xc(e)[0]])(e=0)),t},g1=(e,t)=>function(){return t||(0,e[Xc(e)[0]])((t={exports:{}}).exports,t),t.exports},Se=(e,t)=>{for(var i in t)ds(e,i,{get:t[i],enumerable:!0})},x1=(e,t,i,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Xc(t))!lx.call(e,n)&&n!==i&&ds(e,n,{get:()=>t[n],enumerable:!(r=f1(t,n))||r.enumerable});return e},we=e=>x1(ds({},"__esModule",{value:!0}),e),Mr=(e,t,i)=>new Promise((r,n)=>{var s=c=>{try{a(i.next(c))}catch(u){n(u)}},o=c=>{try{a(i.throw(c))}catch(u){n(u)}},a=c=>c.done?r(c.value):Promise.resolve(c.value).then(s,o);a((i=i.apply(e,t)).next())});function v1(...e){let t=new String(e);return fs.set(t,e),t}function cs(e){return e instanceof String&&fs.has(e)}function kg(e){return fs.get(e)||[]}var fs,zr=M({"src/lib/args/pathspec.ts"(){"use strict";fs=new WeakMap}}),$t,si=M({"src/lib/errors/git-error.ts"(){"use strict";$t=class extends Error{constructor(e,t){super(t),this.task=e,Object.setPrototypeOf(this,new.target.prototype)}}}}),Hr,ir=M({"src/lib/errors/git-response-error.ts"(){"use strict";si(),Hr=class extends $t{constructor(e,t){super(void 0,t||String(e)),this.git=e}}}}),px,dx=M({"src/lib/errors/task-configuration-error.ts"(){"use strict";si(),px=class extends $t{constructor(e){super(void 0,e)}}}});function fx(e){return typeof e=="function"?e:_i}function hx(e){return typeof e=="function"&&e!==_i}function mx(e,t){let i=e.indexOf(t);return i<=0?[e,""]:[e.substr(0,i),e.substr(i+1)]}function gx(e,t=0){return xx(e)&&e.length>t?e[t]:void 0}function Ei(e,t=0){if(xx(e)&&e.length>t)return e[e.length-1-t]}function xx(e){return!!(e&&typeof e.length=="number")}function Gr(e="",t=!0,i=`
`){return e.split(i).reduce((r,n)=>{let s=t?n.trim():n;return s&&r.push(s),r},[])}function Yc(e,t){return Gr(e,!0).map(i=>t(i))}function Wc(e){return(0,hs.exists)(e,hs.FOLDER)}function ee(e,t){return Array.isArray(e)?e.includes(t)||e.push(t):e.add(t),t}function vx(e,t){return Array.isArray(e)&&!e.includes(t)&&e.push(t),e}function ms(e,t){if(Array.isArray(e)){let i=e.indexOf(t);i>=0&&e.splice(i,1)}else e.delete(t);return t}function Ot(e){return Array.isArray(e)?e:[e]}function yx(e){return e.replace(/[\s-]+(.)/g,(t,i)=>i.toUpperCase())}function bx(e){return Ot(e).map(String)}function ce(e,t=0){if(e==null)return t;let i=parseInt(e,10);return isNaN(i)?t:i}function Br(e,t){let i=[];for(let r=0,n=e.length;r<n;r++)i.push(t,e[r]);return i}function Ur(e){return(Array.isArray(e)?Buffer.concat(e):e).toString("utf-8")}function wx(e,t){return Object.assign({},...t.map(i=>i in e?{[i]:e[i]}:{}))}function Pc(e=0){return new Promise(t=>setTimeout(t,e))}function Ex(e){if(e!==!1)return e}var tr,_i,Vr,gs=M({"src/lib/utils/util.ts"(){"use strict";tr="\0",_i=()=>{},Vr=Object.prototype.toString.call.bind(Object.prototype.toString)}});function At(e,t,i){return t(e)?e:arguments.length>2?i:void 0}function Kc(e,t){let i=cs(e)?"string":typeof e;return/number|string|boolean/.test(i)&&(!t||!t.includes(i))}function Jc(e){return!!e&&Vr(e)==="[object Object]"}function _x(e){return typeof e=="function"}var Xr,$e,Tx,us,Zc,Sx=M({"src/lib/utils/argument-filters.ts"(){"use strict";gs(),zr(),Xr=e=>Array.isArray(e),$e=e=>typeof e=="string",Tx=e=>Array.isArray(e)&&e.every($e),us=e=>$e(e)||Array.isArray(e)&&e.every($e),Zc=e=>e==null||"number|boolean|function".includes(typeof e)?!1:Array.isArray(e)||typeof e=="string"||typeof e.length=="number"}}),Fc,y1=M({"src/lib/utils/exit-codes.ts"(){"use strict";Fc=(e=>(e[e.SUCCESS=0]="SUCCESS",e[e.ERROR=1]="ERROR",e[e.NOT_FOUND=-2]="NOT_FOUND",e[e.UNCLEAN=128]="UNCLEAN",e))(Fc||{})}}),$r,b1=M({"src/lib/utils/git-output-streams.ts"(){"use strict";$r=class{constructor(e,t){this.stdOut=e,this.stdErr=t}asStrings(){return new $r(this.stdOut.toString("utf8"),this.stdErr.toString("utf8"))}}}}),K,ni,w1=M({"src/lib/utils/line-parser.ts"(){"use strict";K=class{constructor(e,t){this.matches=[],this.parse=(i,r)=>(this.resetMatches(),this._regExp.every((n,s)=>this.addMatch(n,s,i(s)))?this.useMatches(r,this.prepareMatches())!==!1:!1),this._regExp=Array.isArray(e)?e:[e],t&&(this.useMatches=t)}useMatches(e,t){throw new Error("LineParser:useMatches not implemented")}resetMatches(){this.matches.length=0}prepareMatches(){return this.matches}addMatch(e,t,i){let r=i&&e.exec(i);return r&&this.pushMatch(t,r),!!r}pushMatch(e,t){this.matches.push(...t.slice(1))}},ni=class extends K{addMatch(e,t,i){return/^remote:\s/.test(String(i))&&super.addMatch(e,t,i)}pushMatch(e,t){(e>0||t.length>1)&&super.pushMatch(e,t)}}}});function Cx(...e){let t=process.cwd(),i=Object.assign(pt({baseDir:t},Ox),...e.filter(r=>typeof r=="object"&&r));return i.baseDir=i.baseDir||t,i.trimmed=i.trimmed===!0,i}var Ox,E1=M({"src/lib/utils/simple-git-options.ts"(){"use strict";Ox={binary:"git",maxConcurrentProcesses:5,config:[],trimmed:!1}}});function Qc(e,t=[]){return Jc(e)?Object.keys(e).reduce((i,r)=>{let n=e[r];return cs(n)?i.push(n):Kc(n,["boolean"])?i.push(r+"="+n):i.push(r),i},t):t}function Je(e,t=0,i=!1){let r=[];for(let n=0,s=t<0?e.length:t;n<s;n++)"string|number".includes(typeof e[n])&&r.push(String(e[n]));return Qc(eu(e),r),i||r.push(..._1(e)),r}function _1(e){let t=typeof Ei(e)=="function";return At(Ei(e,t?1:0),Xr,[])}function eu(e){let t=_x(Ei(e));return At(Ei(e,t?1:0),Jc)}function Ee(e,t=!0){let i=fx(Ei(e));return t||hx(i)?i:void 0}var T1=M({"src/lib/utils/task-options.ts"(){"use strict";Sx(),gs(),zr()}});function jc(e,t){return e(t.stdOut,t.stdErr)}function Qe(e,t,i,r=!0){return Ot(i).forEach(n=>{for(let s=Gr(n,r),o=0,a=s.length;o<a;o++){let c=(u=0)=>{if(!(o+u>=a))return s[o+u]};t.some(({parse:u})=>u(c,e))}}),e}var S1=M({"src/lib/utils/task-parser.ts"(){"use strict";gs()}}),Ax={};Se(Ax,{ExitCodes:()=>Fc,GitOutputStreams:()=>$r,LineParser:()=>K,NOOP:()=>_i,NULL:()=>tr,RemoteLineParser:()=>ni,append:()=>ee,appendTaskOptions:()=>Qc,asArray:()=>Ot,asCamelCase:()=>yx,asFunction:()=>fx,asNumber:()=>ce,asStringArray:()=>bx,bufferToString:()=>Ur,callTaskParser:()=>jc,createInstanceConfig:()=>Cx,delay:()=>Pc,filterArray:()=>Xr,filterFunction:()=>_x,filterHasLength:()=>Zc,filterPlainObject:()=>Jc,filterPrimitives:()=>Kc,filterString:()=>$e,filterStringArray:()=>Tx,filterStringOrStringArray:()=>us,filterType:()=>At,first:()=>gx,folderExists:()=>Wc,forEachLineWithContent:()=>Yc,getTrailingOptions:()=>Je,including:()=>vx,isUserFunction:()=>hx,last:()=>Ei,objectToString:()=>Vr,orVoid:()=>Ex,parseStringResponse:()=>Qe,pick:()=>wx,prefixedArray:()=>Br,remove:()=>ms,splitOn:()=>mx,toLinesWithContent:()=>Gr,trailingFunctionArgument:()=>Ee,trailingOptionsArgument:()=>eu});var Y=M({"src/lib/utils/index.ts"(){"use strict";Sx(),y1(),b1(),w1(),E1(),T1(),S1(),gs()}}),Dx={};Se(Dx,{CheckRepoActions:()=>Mc,checkIsBareRepoTask:()=>Nx,checkIsRepoRootTask:()=>Ix,checkIsRepoTask:()=>C1});function C1(e){switch(e){case"bare":return Nx();case"root":return Ix()}return{commands:["rev-parse","--is-inside-work-tree"],format:"utf-8",onError:xs,parser:tu}}function Ix(){return{commands:["rev-parse","--git-dir"],format:"utf-8",onError:xs,parser(t){return/^\.(git)?$/.test(t.trim())}}}function Nx(){return{commands:["rev-parse","--is-bare-repository"],format:"utf-8",onError:xs,parser:tu}}function O1(e){return/(Not a git repository|Kein Git-Repository)/i.test(String(e))}var Mc,xs,tu,Lx=M({"src/lib/tasks/check-is-repo.ts"(){"use strict";Y(),Mc=(e=>(e.BARE="bare",e.IN_TREE="tree",e.IS_REPO_ROOT="root",e))(Mc||{}),xs=({exitCode:e},t,i,r)=>{if(e===128&&O1(t))return i(Buffer.from("false"));r(t)},tu=e=>e.trim()==="true"}});function A1(e,t){let i=new kx(e),r=e?Px:Rx;return Gr(t).forEach(n=>{let s=n.replace(r,"");i.paths.push(s),(Fx.test(s)?i.folders:i.files).push(s)}),i}var kx,Rx,Px,Fx,D1=M({"src/lib/responses/CleanSummary.ts"(){"use strict";Y(),kx=class{constructor(e){this.dryRun=e,this.paths=[],this.files=[],this.folders=[]}},Rx=/^[a-z]+\s*/i,Px=/^[a-z]+\s+[a-z]+\s*/i,Fx=/\/$/}}),qc={};Se(qc,{EMPTY_COMMANDS:()=>vs,adhocExecTask:()=>jx,configurationErrorTask:()=>Ze,isBufferTask:()=>qx,isEmptyTask:()=>Bx,straightThroughBufferTask:()=>Mx,straightThroughStringTask:()=>Ge});function jx(e){return{commands:vs,format:"empty",parser:e}}function Ze(e){return{commands:vs,format:"empty",parser(){throw typeof e=="string"?new px(e):e}}}function Ge(e,t=!1){return{commands:e,format:"utf-8",parser(i){return t?String(i).trim():i}}}function Mx(e){return{commands:e,format:"buffer",parser(t){return t}}}function qx(e){return e.format==="buffer"}function Bx(e){return e.format==="empty"||!e.commands.length}var vs,Te=M({"src/lib/tasks/task.ts"(){"use strict";dx(),vs=[]}}),Ux={};Se(Ux,{CONFIG_ERROR_INTERACTIVE_MODE:()=>iu,CONFIG_ERROR_MODE_REQUIRED:()=>ru,CONFIG_ERROR_UNKNOWN_OPTION:()=>nu,CleanOptions:()=>ns,cleanTask:()=>$x,cleanWithOptionsTask:()=>I1,isCleanOptionsArray:()=>N1});function I1(e,t){let{cleanMode:i,options:r,valid:n}=L1(e);return i?n.options?(r.push(...t),r.some(P1)?Ze(iu):$x(i,r)):Ze(nu+JSON.stringify(e)):Ze(ru)}function $x(e,t){return{commands:["clean",`-${e}`,...t],format:"utf-8",parser(r){return A1(e==="n",r)}}}function N1(e){return Array.isArray(e)&&e.every(t=>su.has(t))}function L1(e){let t,i=[],r={cleanMode:!1,options:!0};return e.replace(/[^a-z]i/g,"").split("").forEach(n=>{k1(n)?(t=n,r.cleanMode=!0):r.options=r.options&&R1(i[i.length]=`-${n}`)}),{cleanMode:t,options:i,valid:r}}function k1(e){return e==="f"||e==="n"}function R1(e){return/^-[a-z]$/i.test(e)&&su.has(e.charAt(1))}function P1(e){return/^-[^\-]/.test(e)?e.indexOf("i")>0:e==="--interactive"}var iu,ru,nu,ns,su,zx=M({"src/lib/tasks/clean.ts"(){"use strict";D1(),Y(),Te(),iu="Git clean interactive mode is not supported",ru='Git clean mode parameter ("n" or "f") is required',nu="Git clean unknown option found in: ",ns=(e=>(e.DRY_RUN="n",e.FORCE="f",e.IGNORED_INCLUDED="x",e.IGNORED_ONLY="X",e.EXCLUDING="e",e.QUIET="q",e.RECURSIVE="d",e))(ns||{}),su=new Set(["i",...bx(Object.values(ns))])}});function F1(e){let t=new Gx;for(let i of Hx(e))t.addValue(i.file,String(i.key),i.value);return t}function j1(e,t){let i=null,r=[],n=new Map;for(let s of Hx(e,t))s.key===t&&(r.push(i=s.value),n.has(s.file)||n.set(s.file,[]),n.get(s.file).push(i));return{key:t,paths:Array.from(n.keys()),scopes:n,value:i,values:r}}function M1(e){return e.replace(/^(file):/,"")}function*Hx(e,t=null){let i=e.split("\0");for(let r=0,n=i.length-1;r<n;){let s=M1(i[r++]),o=i[r++],a=t;if(o.includes(`
`)){let c=mx(o,`
`);a=c[0],o=c[1]}yield{file:s,key:a,value:o}}}var Gx,q1=M({"src/lib/responses/ConfigList.ts"(){"use strict";Y(),Gx=class{constructor(){this.files=[],this.values=Object.create(null)}get all(){return this._all||(this._all=this.files.reduce((e,t)=>Object.assign(e,this.values[t]),{})),this._all}addFile(e){if(!(e in this.values)){let t=Ei(this.files);this.values[e]=t?Object.create(this.values[t]):{},this.files.push(e)}return this.values[e]}addValue(e,t,i){let r=this.addFile(e);r.hasOwnProperty(t)?Array.isArray(r[t])?r[t].push(i):r[t]=[r[t],i]:r[t]=i,this._all=void 0}}}});function Dc(e,t){return typeof e=="string"&&Bc.hasOwnProperty(e)?e:t}function B1(e,t,i,r){let n=["config",`--${r}`];return i&&n.push("--add"),n.push(e,t),{commands:n,format:"utf-8",parser(s){return s}}}function U1(e,t){let i=["config","--null","--show-origin","--get-all",e];return t&&i.splice(1,0,`--${t}`),{commands:i,format:"utf-8",parser(r){return j1(r,e)}}}function $1(e){let t=["config","--list","--show-origin","--null"];return e&&t.push(`--${e}`),{commands:t,format:"utf-8",parser(i){return F1(i)}}}function z1(){return{addConfig(e,t,...i){return this._runTask(B1(e,t,i[0]===!0,Dc(i[1],"local")),Ee(arguments))},getConfig(e,t){return this._runTask(U1(e,Dc(t,void 0)),Ee(arguments))},listConfig(...e){return this._runTask($1(Dc(e[0],void 0)),Ee(arguments))}}}var Bc,Vx=M({"src/lib/tasks/config.ts"(){"use strict";q1(),Y(),Bc=(e=>(e.system="system",e.global="global",e.local="local",e.worktree="worktree",e))(Bc||{})}});function H1(e){return Xx.has(e)}var Ic,Xx,Yx=M({"src/lib/tasks/diff-name-status.ts"(){"use strict";Ic=(e=>(e.ADDED="A",e.COPIED="C",e.DELETED="D",e.MODIFIED="M",e.RENAMED="R",e.CHANGED="T",e.UNMERGED="U",e.UNKNOWN="X",e.BROKEN="B",e))(Ic||{}),Xx=new Set(Object.values(Ic))}});function G1(...e){return new Kx().param(...e)}function V1(e){let t=new Set,i={};return Yc(e,r=>{let[n,s,o]=r.split(tr);t.add(n),(i[n]=i[n]||[]).push({line:ce(s),path:n,preview:o})}),{paths:t,results:i}}function X1(){return{grep(e){let t=Ee(arguments),i=Je(arguments);for(let n of Wx)if(i.includes(n))return this._runTask(Ze(`git.grep: use of "${n}" is not supported.`),t);typeof e=="string"&&(e=G1().param(e));let r=["grep","--null","-n","--full-name",...i,...e];return this._runTask({commands:r,format:"utf-8",parser(n){return V1(n)}},t)}}}var Wx,jr,Rg,Kx,Jx=M({"src/lib/tasks/grep.ts"(){"use strict";Y(),Te(),Wx=["-h"],jr=Symbol("grepQuery"),Kx=class{constructor(){this[Rg]=[]}*[(Rg=jr,Symbol.iterator)](){for(let e of this[jr])yield e}and(...e){return e.length&&this[jr].push("--and","(",...Br(e,"-e"),")"),this}param(...e){return this[jr].push(...Br(e,"-e")),this}}}}),Zx={};Se(Zx,{ResetMode:()=>ss,getResetMode:()=>W1,resetTask:()=>Y1});function Y1(e,t){let i=["reset"];return Qx(e)&&i.push(`--${e}`),i.push(...t),Ge(i)}function W1(e){if(Qx(e))return e;switch(typeof e){case"string":case"undefined":return"soft"}}function Qx(e){return ev.includes(e)}var ss,ev,tv=M({"src/lib/tasks/reset.ts"(){"use strict";Te(),ss=(e=>(e.MIXED="mixed",e.SOFT="soft",e.HARD="hard",e.MERGE="merge",e.KEEP="keep",e))(ss||{}),ev=Array.from(Object.values(ss))}});function K1(){return(0,ls.default)("simple-git")}function Pg(e,t,i){return!t||!String(t).replace(/\s*/,"")?i?(r,...n)=>{e(r,...n),i(r,...n)}:e:(r,...n)=>{e(`%s ${r}`,t,...n),i&&i(r,...n)}}function J1(e,t,{namespace:i}){if(typeof e=="string")return e;let r=t&&t.namespace||"";return r.startsWith(i)?r.substr(i.length+1):r||i}function ou(e,t,i,r=K1()){let n=e&&`[${e}]`||"",s=[],o=typeof t=="string"?r.extend(t):t,a=J1(At(t,$e),o,r);return u(i);function c(f,g){return ee(s,ou(e,a.replace(/^[^:]+/,f),g,r))}function u(f){let g=f&&`[${f}]`||"",x=o&&Pg(o,g)||_i,l=Pg(r,`${n} ${g}`,x);return Object.assign(o?x:l,{label:e,sibling:c,info:l,step:u})}}var iv=M({"src/lib/git-logger.ts"(){"use strict";Y(),ls.default.formatters.L=e=>String(Zc(e)?e.length:"-"),ls.default.formatters.B=e=>Buffer.isBuffer(e)?e.toString("utf8"):Vr(e)}}),is,Uc,Z1=M({"src/lib/runners/tasks-pending-queue.ts"(){"use strict";si(),iv(),is=class{constructor(e="GitExecutor"){this.logLabel=e,this._queue=new Map}withProgress(e){return this._queue.get(e)}createProgress(e){let t=is.getName(e.commands[0]),i=ou(this.logLabel,t);return{task:e,logger:i,name:t}}push(e){let t=this.createProgress(e);return t.logger("Adding task to the queue, commands = %o",e.commands),this._queue.set(e,t),t}fatal(e){for(let[t,{logger:i}]of Array.from(this._queue.entries()))t===e.task?(i.info("Failed %o",e),i("Fatal exception, any as-yet un-started tasks run through this executor will not be attempted")):i.info("A fatal exception occurred in a previous task, the queue has been purged: %o",e.message),this.complete(t);if(this._queue.size!==0)throw new Error(`Queue size should be zero after fatal: ${this._queue.size}`)}complete(e){this.withProgress(e)&&this._queue.delete(e)}attempt(e){let t=this.withProgress(e);if(!t)throw new $t(void 0,"TasksPendingQueue: attempt called for an unknown task");return t.logger("Starting task"),t}static getName(e="empty"){return`task:${e}:${++is.counter}`}},Uc=is,Uc.counter=0}});function wi(e,t){return{method:gx(e.commands)||"",commands:t}}function Q1(e,t){return i=>{t("[ERROR] child process exception %o",i),e.push(Buffer.from(String(i.stack),"ascii"))}}function Fg(e,t,i,r){return n=>{i("%s received %L bytes",t,n),r("%B",n),e.push(n)}}var $c,eA=M({"src/lib/runners/git-executor-chain.ts"(){"use strict";si(),Te(),Y(),Z1(),$c=class{constructor(e,t,i){this._executor=e,this._scheduler=t,this._plugins=i,this._chain=Promise.resolve(),this._queue=new Uc}get cwd(){return this._cwd||this._executor.cwd}set cwd(e){this._cwd=e}get env(){return this._executor.env}get outputHandler(){return this._executor.outputHandler}chain(){return this}push(e){return this._queue.push(e),this._chain=this._chain.then(()=>this.attemptTask(e))}attemptTask(e){return Mr(this,null,function*(){let t=yield this._scheduler.next(),i=()=>this._queue.complete(e);try{let{logger:r}=this._queue.attempt(e);return yield Bx(e)?this.attemptEmptyTask(e,r):this.attemptRemoteTask(e,r)}catch(r){throw this.onFatalException(e,r)}finally{i(),t()}})}onFatalException(e,t){let i=t instanceof $t?Object.assign(t,{task:e}):new $t(e,t&&String(t));return this._chain=Promise.resolve(),this._queue.fatal(i),i}attemptRemoteTask(e,t){return Mr(this,null,function*(){let i=this._plugins.exec("spawn.binary","",wi(e,e.commands)),r=this._plugins.exec("spawn.args",[...e.commands],wi(e,e.commands)),n=yield this.gitResponse(e,i,r,this.outputHandler,t.step("SPAWN")),s=yield this.handleTaskData(e,r,n,t.step("HANDLE"));return t("passing response to task's parser as a %s",e.format),qx(e)?jc(e.parser,s):jc(e.parser,s.asStrings())})}attemptEmptyTask(e,t){return Mr(this,null,function*(){return t("empty task bypassing child process to call to task's parser"),e.parser(this)})}handleTaskData(e,t,i,r){let{exitCode:n,rejection:s,stdOut:o,stdErr:a}=i;return new Promise((c,u)=>{r("Preparing to handle process response exitCode=%d stdOut=",n);let{error:f}=this._plugins.exec("task.error",{error:s},pt(pt({},wi(e,t)),i));if(f&&e.onError)return r.info("exitCode=%s handling with custom error handler"),e.onError(i,f,g=>{r.info("custom error handler treated as success"),r("custom error returned a %s",Vr(g)),c(new $r(Array.isArray(g)?Buffer.concat(g):g,Buffer.concat(a)))},u);if(f)return r.info("handling as error: exitCode=%s stdErr=%s rejection=%o",n,a.length,s),u(f);r.info("retrieving task output complete"),c(new $r(Buffer.concat(o),Buffer.concat(a)))})}gitResponse(e,t,i,r,n){return Mr(this,null,function*(){let s=n.sibling("output"),o=this._plugins.exec("spawn.options",{cwd:this.cwd,env:this.env,windowsHide:!0},wi(e,e.commands));return new Promise(a=>{let c=[],u=[];n.info("%s %o",t,i),n("%O",o);let f=this._beforeSpawn(e,i);if(f)return a({stdOut:c,stdErr:u,exitCode:9901,rejection:f});this._plugins.exec("spawn.before",void 0,qr(pt({},wi(e,i)),{kill(x){f=x||f}}));let g=(0,rv.spawn)(t,i,o);g.stdout.on("data",Fg(c,"stdOut",n,s.step("stdOut"))),g.stderr.on("data",Fg(u,"stdErr",n,s.step("stdErr"))),g.on("error",Q1(u,n)),r&&(n("Passing child process stdOut/stdErr to custom outputHandler"),r(t,g.stdout,g.stderr,[...i])),this._plugins.exec("spawn.after",void 0,qr(pt({},wi(e,i)),{spawned:g,close(x,l){a({stdOut:c,stdErr:u,exitCode:x,rejection:f||l})},kill(x){g.killed||(f=x,g.kill("SIGINT"))}}))})})}_beforeSpawn(e,t){let i;return this._plugins.exec("spawn.before",void 0,qr(pt({},wi(e,t)),{kill(r){i=r||i}})),i}}}}),nv={};Se(nv,{GitExecutor:()=>sv});var sv,tA=M({"src/lib/runners/git-executor.ts"(){"use strict";eA(),sv=class{constructor(e,t,i){this.cwd=e,this._scheduler=t,this._plugins=i,this._chain=new $c(this,this._scheduler,this._plugins)}chain(){return new $c(this,this._scheduler,this._plugins)}push(e){return this._chain.push(e)}}}});function iA(e,t,i=_i){let r=s=>{i(null,s)},n=s=>{s?.task===e&&i(s instanceof Hr?rA(s):s,void 0)};t.then(r,n)}function rA(e){let t=r=>{console.warn(`simple-git deprecation notice: accessing GitResponseError.${r} should be GitResponseError.git.${r}, this will no longer be available in version 3`),t=_i};return Object.create(e,Object.getOwnPropertyNames(e.git).reduce(i,{}));function i(r,n){return n in e||(r[n]={enumerable:!1,configurable:!1,get(){return t(n),e.git[n]}}),r}}var nA=M({"src/lib/task-callback.ts"(){"use strict";ir(),Y()}});function jg(e,t){return jx(i=>{if(!Wc(e))throw new Error(`Git.cwd: cannot change to non-directory "${e}"`);return(t||i).cwd=e})}var sA=M({"src/lib/tasks/change-working-directory.ts"(){"use strict";Y(),Te()}});function Nc(e){let t=["checkout",...e];return t[1]==="-b"&&t.includes("-B")&&(t[1]=ms(t,"-B")),Ge(t)}function oA(){return{checkout(){return this._runTask(Nc(Je(arguments,1)),Ee(arguments))},checkoutBranch(e,t){return this._runTask(Nc(["-b",e,t,...Je(arguments)]),Ee(arguments))},checkoutLocalBranch(e){return this._runTask(Nc(["-b",e,...Je(arguments)]),Ee(arguments))}}}var aA=M({"src/lib/tasks/checkout.ts"(){"use strict";Y(),Te()}});function cA(){return{count:0,garbage:0,inPack:0,packs:0,prunePackable:0,size:0,sizeGarbage:0,sizePack:0}}function uA(){return{countObjects(){return this._runTask({commands:["count-objects","--verbose"],format:"utf-8",parser(e){return Qe(cA(),[ov],e)}})}}}var ov,lA=M({"src/lib/tasks/count-objects.ts"(){"use strict";Y(),ov=new K(/([a-z-]+): (\d+)$/,(e,[t,i])=>{let r=yx(t);e.hasOwnProperty(r)&&(e[r]=ce(i))})}});function pA(e){return Qe({author:null,branch:"",commit:"",root:!1,summary:{changes:0,insertions:0,deletions:0}},av,e)}var av,dA=M({"src/lib/parsers/parse-commit.ts"(){"use strict";Y(),av=[new K(/^\[([^\s]+)( \([^)]+\))? ([^\]]+)/,(e,[t,i,r])=>{e.branch=t,e.commit=r,e.root=!!i}),new K(/\s*Author:\s(.+)/i,(e,[t])=>{let i=t.split("<"),r=i.pop();!r||!r.includes("@")||(e.author={email:r.substr(0,r.length-1),name:i.join("<").trim()})}),new K(/(\d+)[^,]*(?:,\s*(\d+)[^,]*)(?:,\s*(\d+))/g,(e,[t,i,r])=>{e.summary.changes=parseInt(t,10)||0,e.summary.insertions=parseInt(i,10)||0,e.summary.deletions=parseInt(r,10)||0}),new K(/^(\d+)[^,]*(?:,\s*(\d+)[^(]+\(([+-]))?/,(e,[t,i,r])=>{e.summary.changes=parseInt(t,10)||0;let n=parseInt(i,10)||0;r==="-"?e.summary.deletions=n:r==="+"&&(e.summary.insertions=n)})]}});function fA(e,t,i){return{commands:["-c","core.abbrev=40","commit",...Br(e,"-m"),...t,...i],format:"utf-8",parser:pA}}function hA(){return{commit(t,...i){let r=Ee(arguments),n=e(t)||fA(Ot(t),Ot(At(i[0],us,[])),[...At(i[1],Xr,[]),...Je(arguments,0,!0)]);return this._runTask(n,r)}};function e(t){return!us(t)&&Ze("git.commit: requires the commit message to be supplied as a string/string[]")}}var mA=M({"src/lib/tasks/commit.ts"(){"use strict";dA(),Y(),Te()}});function gA(){return{firstCommit(){return this._runTask(Ge(["rev-list","--max-parents=0","HEAD"],!0),Ee(arguments))}}}var xA=M({"src/lib/tasks/first-commit.ts"(){"use strict";Y(),Te()}});function vA(e,t){let i=["hash-object",e];return t&&i.push("-w"),Ge(i,!0)}var yA=M({"src/lib/tasks/hash-object.ts"(){"use strict";Te()}});function bA(e,t,i){let r=String(i).trim(),n;if(n=cv.exec(r))return new os(e,t,!1,n[1]);if(n=uv.exec(r))return new os(e,t,!0,n[1]);let s="",o=r.split(" ");for(;o.length;)if(o.shift()==="in"){s=o.join(" ");break}return new os(e,t,/^re/i.test(r),s)}var os,cv,uv,wA=M({"src/lib/responses/InitSummary.ts"(){"use strict";os=class{constructor(e,t,i,r){this.bare=e,this.path=t,this.existing=i,this.gitDir=r}},cv=/^Init.+ repository in (.+)$/,uv=/^Rein.+ in (.+)$/}});function EA(e){return e.includes(au)}function _A(e=!1,t,i){let r=["init",...i];return e&&!EA(r)&&r.splice(1,0,au),{commands:r,format:"utf-8",parser(n){return bA(r.includes("--bare"),t,n)}}}var au,TA=M({"src/lib/tasks/init.ts"(){"use strict";wA(),au="--bare"}});function cu(e){for(let t=0;t<e.length;t++){let i=uu.exec(e[t]);if(i)return`--${i[1]}`}return""}function SA(e){return uu.test(e)}var uu,Yr=M({"src/lib/args/log-format.ts"(){"use strict";uu=/^--(stat|numstat|name-only|name-status)(=|$)/}}),lv,CA=M({"src/lib/responses/DiffSummary.ts"(){"use strict";lv=class{constructor(){this.changed=0,this.deletions=0,this.insertions=0,this.files=[]}}}});function pv(e=""){let t=dv[e];return i=>Qe(new lv,t,i,!1)}var Lc,Mg,qg,Bg,dv,fv=M({"src/lib/parsers/parse-diff-summary.ts"(){"use strict";Yr(),CA(),Yx(),Y(),Lc=[new K(/^(.+)\s+\|\s+(\d+)(\s+[+\-]+)?$/,(e,[t,i,r=""])=>{e.files.push({file:t.trim(),changes:ce(i),insertions:r.replace(/[^+]/g,"").length,deletions:r.replace(/[^-]/g,"").length,binary:!1})}),new K(/^(.+) \|\s+Bin ([0-9.]+) -> ([0-9.]+) ([a-z]+)/,(e,[t,i,r])=>{e.files.push({file:t.trim(),before:ce(i),after:ce(r),binary:!0})}),new K(/(\d+) files? changed\s*((?:, \d+ [^,]+){0,2})/,(e,[t,i])=>{let r=/(\d+) i/.exec(i),n=/(\d+) d/.exec(i);e.changed=ce(t),e.insertions=ce(r?.[1]),e.deletions=ce(n?.[1])})],Mg=[new K(/(\d+)\t(\d+)\t(.+)$/,(e,[t,i,r])=>{let n=ce(t),s=ce(i);e.changed++,e.insertions+=n,e.deletions+=s,e.files.push({file:r,changes:n+s,insertions:n,deletions:s,binary:!1})}),new K(/-\t-\t(.+)$/,(e,[t])=>{e.changed++,e.files.push({file:t,after:0,before:0,binary:!0})})],qg=[new K(/(.+)$/,(e,[t])=>{e.changed++,e.files.push({file:t,changes:0,insertions:0,deletions:0,binary:!1})})],Bg=[new K(/([ACDMRTUXB])([0-9]{0,3})\t(.[^\t]*)(\t(.[^\t]*))?$/,(e,[t,i,r,n,s])=>{e.changed++,e.files.push({file:s??r,changes:0,status:Ex(H1(t)&&t),insertions:0,deletions:0,binary:!1})})],dv={"":Lc,"--stat":Lc,"--numstat":Mg,"--name-status":Bg,"--name-only":qg}}});function OA(e,t){return t.reduce((i,r,n)=>(i[r]=e[n]||"",i),Object.create({diff:null}))}function hv(e=du,t=mv,i=""){let r=pv(i);return function(n){let s=Gr(n,!0,lu).map(function(o){let a=o.trim().split(pu),c=OA(a[0].trim().split(e),t);return a.length>1&&a[1].trim()&&(c.diff=r(a[1])),c});return{all:s,latest:s.length&&s[0]||null,total:s.length}}}var lu,pu,du,mv,gv=M({"src/lib/parsers/parse-list-log-summary.ts"(){"use strict";Y(),fv(),Yr(),lu="\xF2\xF2\xF2\xF2\xF2\xF2 ",pu=" \xF2\xF2",du=" \xF2 ",mv=["hash","date","message","refs","author_name","author_email"]}}),xv={};Se(xv,{diffSummaryTask:()=>AA,validateLogFormatConfig:()=>ys});function AA(e){let t=cu(e),i=["diff"];return t===""&&(t="--stat",i.push("--stat=4096")),i.push(...e),ys(i)||{commands:i,format:"utf-8",parser:pv(t)}}function ys(e){let t=e.filter(SA);if(t.length>1)return Ze(`Summary flags are mutually exclusive - pick one of ${t.join(",")}`);if(t.length&&e.includes("-z"))return Ze(`Summary flag ${t} parsing is not compatible with null termination option '-z'`)}var fu=M({"src/lib/tasks/diff.ts"(){"use strict";Yr(),fv(),Te()}});function DA(e,t){let i=[],r=[];return Object.keys(e).forEach(n=>{i.push(n),r.push(String(e[n]))}),[i,r.join(t)]}function IA(e){return Object.keys(e).reduce((t,i)=>(i in zc||(t[i]=e[i]),t),{})}function vv(e={},t=[]){let i=At(e.splitter,$e,du),r=!Kc(e.format)&&e.format?e.format:{hash:"%H",date:e.strictDate===!1?"%ai":"%aI",message:"%s",refs:"%D",body:e.multiLine?"%B":"%b",author_name:e.mailMap!==!1?"%aN":"%an",author_email:e.mailMap!==!1?"%aE":"%ae"},[n,s]=DA(r,i),o=[],a=[`--pretty=format:${lu}${s}${pu}`,...t],c=e.n||e["max-count"]||e.maxCount;if(c&&a.push(`--max-count=${c}`),e.from||e.to){let u=e.symmetric!==!1?"...":"..";o.push(`${e.from||""}${u}${e.to||""}`)}return $e(e.file)&&a.push("--follow",v1(e.file)),Qc(IA(e),a),{fields:n,splitter:i,commands:[...a,...o]}}function NA(e,t,i){let r=hv(e,t,cu(i));return{commands:["log",...i],format:"utf-8",parser:r}}function LA(){return{log(...i){let r=Ee(arguments),n=vv(eu(arguments),At(arguments[0],Xr)),s=t(...i)||ys(n.commands)||e(n);return this._runTask(s,r)}};function e(i){return NA(i.splitter,i.fields,i.commands)}function t(i,r){return $e(i)&&$e(r)&&Ze("git.log(string, string) should be replaced with git.log({ from: string, to: string })")}}var zc,yv=M({"src/lib/tasks/log.ts"(){"use strict";Yr(),zr(),gv(),Y(),Te(),fu(),zc=(e=>(e[e["--pretty"]=0]="--pretty",e[e["max-count"]=1]="max-count",e[e.maxCount=2]="maxCount",e[e.n=3]="n",e[e.file=4]="file",e[e.format=5]="format",e[e.from=6]="from",e[e.to=7]="to",e[e.splitter=8]="splitter",e[e.symmetric=9]="symmetric",e[e.mailMap=10]="mailMap",e[e.multiLine=11]="multiLine",e[e.strictDate=12]="strictDate",e))(zc||{})}}),as,bv,kA=M({"src/lib/responses/MergeSummary.ts"(){"use strict";as=class{constructor(e,t=null,i){this.reason=e,this.file=t,this.meta=i}toString(){return`${this.file}:${this.reason}`}},bv=class{constructor(){this.conflicts=[],this.merges=[],this.result="success"}get failed(){return this.conflicts.length>0}get reason(){return this.result}toString(){return this.conflicts.length?`CONFLICTS: ${this.conflicts.join(", ")}`:"OK"}}}}),Hc,wv,RA=M({"src/lib/responses/PullSummary.ts"(){"use strict";Hc=class{constructor(){this.remoteMessages={all:[]},this.created=[],this.deleted=[],this.files=[],this.deletions={},this.insertions={},this.summary={changes:0,deletions:0,insertions:0}}},wv=class{constructor(){this.remote="",this.hash={local:"",remote:""},this.branch={local:"",remote:""},this.message=""}toString(){return this.message}}}});function kc(e){return e.objects=e.objects||{compressing:0,counting:0,enumerating:0,packReused:0,reused:{count:0,delta:0},total:{count:0,delta:0}}}function Ug(e){let t=/^\s*(\d+)/.exec(e),i=/delta (\d+)/i.exec(e);return{count:ce(t&&t[1]||"0"),delta:ce(i&&i[1]||"0")}}var Ev,PA=M({"src/lib/parsers/parse-remote-objects.ts"(){"use strict";Y(),Ev=[new ni(/^remote:\s*(enumerating|counting|compressing) objects: (\d+),/i,(e,[t,i])=>{let r=t.toLowerCase(),n=kc(e.remoteMessages);Object.assign(n,{[r]:ce(i)})}),new ni(/^remote:\s*(enumerating|counting|compressing) objects: \d+% \(\d+\/(\d+)\),/i,(e,[t,i])=>{let r=t.toLowerCase(),n=kc(e.remoteMessages);Object.assign(n,{[r]:ce(i)})}),new ni(/total ([^,]+), reused ([^,]+), pack-reused (\d+)/i,(e,[t,i,r])=>{let n=kc(e.remoteMessages);n.total=Ug(t),n.reused=Ug(i),n.packReused=ce(r)})]}});function _v(e,t){return Qe({remoteMessages:new Sv},Tv,t)}var Tv,Sv,Cv=M({"src/lib/parsers/parse-remote-messages.ts"(){"use strict";Y(),PA(),Tv=[new ni(/^remote:\s*(.+)$/,(e,[t])=>(e.remoteMessages.all.push(t.trim()),!1)),...Ev,new ni([/create a (?:pull|merge) request/i,/\s(https?:\/\/\S+)$/],(e,[t])=>{e.remoteMessages.pullRequestUrl=t}),new ni([/found (\d+) vulnerabilities.+\(([^)]+)\)/i,/\s(https?:\/\/\S+)$/],(e,[t,i,r])=>{e.remoteMessages.vulnerabilities={count:ce(t),summary:i,url:r}})],Sv=class{constructor(){this.all=[]}}}});function FA(e,t){let i=Qe(new wv,Ov,[e,t]);return i.message&&i}var $g,zg,Hg,Gg,Ov,Vg,hu,Av=M({"src/lib/parsers/parse-pull.ts"(){"use strict";RA(),Y(),Cv(),$g=/^\s*(.+?)\s+\|\s+\d+\s*(\+*)(-*)/,zg=/(\d+)\D+((\d+)\D+\(\+\))?(\D+(\d+)\D+\(-\))?/,Hg=/^(create|delete) mode \d+ (.+)/,Gg=[new K($g,(e,[t,i,r])=>{e.files.push(t),i&&(e.insertions[t]=i.length),r&&(e.deletions[t]=r.length)}),new K(zg,(e,[t,,i,,r])=>i!==void 0||r!==void 0?(e.summary.changes=+t||0,e.summary.insertions=+i||0,e.summary.deletions=+r||0,!0):!1),new K(Hg,(e,[t,i])=>{ee(e.files,i),ee(t==="create"?e.created:e.deleted,i)})],Ov=[new K(/^from\s(.+)$/i,(e,[t])=>void(e.remote=t)),new K(/^fatal:\s(.+)$/,(e,[t])=>void(e.message=t)),new K(/([a-z0-9]+)\.\.([a-z0-9]+)\s+(\S+)\s+->\s+(\S+)$/,(e,[t,i,r,n])=>{e.branch.local=r,e.hash.local=t,e.branch.remote=n,e.hash.remote=i})],Vg=(e,t)=>Qe(new Hc,Gg,[e,t]),hu=(e,t)=>Object.assign(new Hc,Vg(e,t),_v(e,t))}}),Xg,Dv,Yg,jA=M({"src/lib/parsers/parse-merge.ts"(){"use strict";kA(),Y(),Av(),Xg=[new K(/^Auto-merging\s+(.+)$/,(e,[t])=>{e.merges.push(t)}),new K(/^CONFLICT\s+\((.+)\): Merge conflict in (.+)$/,(e,[t,i])=>{e.conflicts.push(new as(t,i))}),new K(/^CONFLICT\s+\((.+\/delete)\): (.+) deleted in (.+) and/,(e,[t,i,r])=>{e.conflicts.push(new as(t,i,{deleteRef:r}))}),new K(/^CONFLICT\s+\((.+)\):/,(e,[t])=>{e.conflicts.push(new as(t,null))}),new K(/^Automatic merge failed;\s+(.+)$/,(e,[t])=>{e.result=t})],Dv=(e,t)=>Object.assign(Yg(e,t),hu(e,t)),Yg=e=>Qe(new bv,Xg,e)}});function Wg(e){return e.length?{commands:["merge",...e],format:"utf-8",parser(t,i){let r=Dv(t,i);if(r.failed)throw new Hr(r);return r}}:Ze("Git.merge requires at least one option")}var MA=M({"src/lib/tasks/merge.ts"(){"use strict";ir(),jA(),Te()}});function qA(e,t,i){let r=i.includes("deleted"),n=i.includes("tag")||/^refs\/tags/.test(e),s=!i.includes("new");return{deleted:r,tag:n,branch:!n,new:!s,alreadyUpdated:s,local:e,remote:t}}var Kg,Iv,Jg,BA=M({"src/lib/parsers/parse-push.ts"(){"use strict";Y(),Cv(),Kg=[new K(/^Pushing to (.+)$/,(e,[t])=>{e.repo=t}),new K(/^updating local tracking ref '(.+)'/,(e,[t])=>{e.ref=qr(pt({},e.ref||{}),{local:t})}),new K(/^[=*-]\s+([^:]+):(\S+)\s+\[(.+)]$/,(e,[t,i,r])=>{e.pushed.push(qA(t,i,r))}),new K(/^Branch '([^']+)' set up to track remote branch '([^']+)' from '([^']+)'/,(e,[t,i,r])=>{e.branch=qr(pt({},e.branch||{}),{local:t,remote:i,remoteName:r})}),new K(/^([^:]+):(\S+)\s+([a-z0-9]+)\.\.([a-z0-9]+)$/,(e,[t,i,r,n])=>{e.update={head:{local:t,remote:i},hash:{from:r,to:n}}})],Iv=(e,t)=>{let i=Jg(e,t),r=_v(e,t);return pt(pt({},i),r)},Jg=(e,t)=>Qe({pushed:[]},Kg,[e,t])}}),Nv={};Se(Nv,{pushTagsTask:()=>UA,pushTask:()=>mu});function UA(e={},t){return ee(t,"--tags"),mu(e,t)}function mu(e={},t){let i=["push",...t];return e.branch&&i.splice(1,0,e.branch),e.remote&&i.splice(1,0,e.remote),ms(i,"-v"),ee(i,"--verbose"),ee(i,"--porcelain"),{commands:i,format:"utf-8",parser:Iv}}var Lv=M({"src/lib/tasks/push.ts"(){"use strict";BA(),Y()}});function $A(){return{showBuffer(){let e=["show",...Je(arguments,1)];return e.includes("--binary")||e.splice(1,0,"--binary"),this._runTask(Mx(e),Ee(arguments))},show(){let e=["show",...Je(arguments,1)];return this._runTask(Ge(e),Ee(arguments))}}}var zA=M({"src/lib/tasks/show.ts"(){"use strict";Y(),Te()}}),Zg,kv,HA=M({"src/lib/responses/FileStatusSummary.ts"(){"use strict";Zg=/^(.+) -> (.+)$/,kv=class{constructor(e,t,i){if(this.path=e,this.index=t,this.working_dir=i,t+i==="R"){let r=Zg.exec(e)||[null,e,e];this.from=r[1]||"",this.path=r[2]||""}}}}});function Qg(e){let[t,i]=e.split(tr);return{from:i||t,to:t}}function st(e,t,i){return[`${e}${t}`,i]}function Rc(e,...t){return t.map(i=>st(e,i,(r,n)=>ee(r.conflicted,n)))}function GA(e,t){let i=t.trim();switch(" "){case i.charAt(2):return r(i.charAt(0),i.charAt(1),i.substr(3));case i.charAt(1):return r(" ",i.charAt(0),i.substr(2));default:return}function r(n,s,o){let a=`${n}${s}`,c=Rv.get(a);c&&c(e,o),a!=="##"&&a!=="!!"&&e.files.push(new kv(o.replace(/\0.+$/,""),n,s))}}var ex,Rv,Pv,VA=M({"src/lib/responses/StatusSummary.ts"(){"use strict";Y(),HA(),ex=class{constructor(){this.not_added=[],this.conflicted=[],this.created=[],this.deleted=[],this.ignored=void 0,this.modified=[],this.renamed=[],this.files=[],this.staged=[],this.ahead=0,this.behind=0,this.current=null,this.tracking=null,this.detached=!1,this.isClean=()=>!this.files.length}},Rv=new Map([st(" ","A",(e,t)=>ee(e.created,t)),st(" ","D",(e,t)=>ee(e.deleted,t)),st(" ","M",(e,t)=>ee(e.modified,t)),st("A"," ",(e,t)=>ee(e.created,t)&&ee(e.staged,t)),st("A","M",(e,t)=>ee(e.created,t)&&ee(e.staged,t)&&ee(e.modified,t)),st("D"," ",(e,t)=>ee(e.deleted,t)&&ee(e.staged,t)),st("M"," ",(e,t)=>ee(e.modified,t)&&ee(e.staged,t)),st("M","M",(e,t)=>ee(e.modified,t)&&ee(e.staged,t)),st("R"," ",(e,t)=>{ee(e.renamed,Qg(t))}),st("R","M",(e,t)=>{let i=Qg(t);ee(e.renamed,i),ee(e.modified,i.to)}),st("!","!",(e,t)=>{ee(e.ignored=e.ignored||[],t)}),st("?","?",(e,t)=>ee(e.not_added,t)),...Rc("A","A","U"),...Rc("D","D","U"),...Rc("U","A","D","U"),["##",(e,t)=>{let i=/ahead (\d+)/,r=/behind (\d+)/,n=/^(.+?(?=(?:\.{3}|\s|$)))/,s=/\.{3}(\S*)/,o=/\son\s([\S]+)$/,a;a=i.exec(t),e.ahead=a&&+a[1]||0,a=r.exec(t),e.behind=a&&+a[1]||0,a=n.exec(t),e.current=a&&a[1],a=s.exec(t),e.tracking=a&&a[1],a=o.exec(t),e.current=a&&a[1]||e.current,e.detached=/\(no branch\)/.test(t)}]]),Pv=function(e){let t=e.split(tr),i=new ex;for(let r=0,n=t.length;r<n;){let s=t[r++].trim();s&&(s.charAt(0)==="R"&&(s+=tr+(t[r++]||"")),GA(i,s))}return i}}});function XA(e){return{format:"utf-8",commands:["status","--porcelain","-b","-u","--null",...e.filter(i=>!Fv.includes(i))],parser(i){return Pv(i)}}}var Fv,YA=M({"src/lib/tasks/status.ts"(){"use strict";VA(),Fv=["--null","-z"]}});function ps(e=0,t=0,i=0,r="",n=!0){return Object.defineProperty({major:e,minor:t,patch:i,agent:r,installed:n},"toString",{value(){return`${this.major}.${this.minor}.${this.patch}`},configurable:!1,enumerable:!1})}function WA(){return ps(0,0,0,"",!1)}function KA(){return{version(){return this._runTask({commands:["--version"],format:"utf-8",parser:JA,onError(e,t,i,r){if(e.exitCode===-2)return i(Buffer.from(gu));r(t)}})}}}function JA(e){return e===gu?WA():Qe(ps(0,0,0,e),jv,e)}var gu,jv,ZA=M({"src/lib/tasks/version.ts"(){"use strict";Y(),gu="installed=false",jv=[new K(/version (\d+)\.(\d+)\.(\d+)(?:\s*\((.+)\))?/,(e,[t,i,r,n=""])=>{Object.assign(e,ps(ce(t),ce(i),ce(r),n))}),new K(/version (\d+)\.(\d+)\.(\D+)(.+)?$/,(e,[t,i,r,n=""])=>{Object.assign(e,ps(ce(t),ce(i),r,n))})]}}),Mv={};Se(Mv,{SimpleGitApi:()=>Gc});var Gc,QA=M({"src/lib/simple-git-api.ts"(){"use strict";nA(),sA(),aA(),lA(),mA(),Vx(),xA(),Jx(),yA(),TA(),yv(),MA(),Lv(),zA(),YA(),Te(),ZA(),Y(),Gc=class{constructor(e){this._executor=e}_runTask(e,t){let i=this._executor.chain(),r=i.push(e);return t&&iA(e,r,t),Object.create(this,{then:{value:r.then.bind(r)},catch:{value:r.catch.bind(r)},_executor:{value:i}})}add(e){return this._runTask(Ge(["add",...Ot(e)]),Ee(arguments))}cwd(e){let t=Ee(arguments);return typeof e=="string"?this._runTask(jg(e,this._executor),t):typeof e?.path=="string"?this._runTask(jg(e.path,e.root&&this._executor||void 0),t):this._runTask(Ze("Git.cwd: workingDirectory must be supplied as a string"),t)}hashObject(e,t){return this._runTask(vA(e,t===!0),Ee(arguments))}init(e){return this._runTask(_A(e===!0,this._executor.cwd,Je(arguments)),Ee(arguments))}merge(){return this._runTask(Wg(Je(arguments)),Ee(arguments))}mergeFromTo(e,t){return $e(e)&&$e(t)?this._runTask(Wg([e,t,...Je(arguments)]),Ee(arguments,!1)):this._runTask(Ze("Git.mergeFromTo requires that the 'remote' and 'branch' arguments are supplied as strings"))}outputHandler(e){return this._executor.outputHandler=e,this}push(){let e=mu({remote:At(arguments[0],$e),branch:At(arguments[1],$e)},Je(arguments));return this._runTask(e,Ee(arguments))}stash(){return this._runTask(Ge(["stash",...Je(arguments)]),Ee(arguments))}status(){return this._runTask(XA(Je(arguments)),Ee(arguments))}},Object.assign(Gc.prototype,oA(),hA(),z1(),uA(),gA(),X1(),LA(),$A(),KA())}}),qv={};Se(qv,{Scheduler:()=>Uv});var tx,Uv,eD=M({"src/lib/runners/scheduler.ts"(){"use strict";Y(),iv(),tx=(()=>{let e=0;return()=>{e++;let{promise:t,done:i}=(0,Bv.createDeferred)();return{promise:t,done:i,id:e}}})(),Uv=class{constructor(e=2){this.concurrency=e,this.logger=ou("","scheduler"),this.pending=[],this.running=[],this.logger("Constructed, concurrency=%s",e)}schedule(){if(!this.pending.length||this.running.length>=this.concurrency){this.logger("Schedule attempt ignored, pending=%s running=%s concurrency=%s",this.pending.length,this.running.length,this.concurrency);return}let e=ee(this.running,this.pending.shift());this.logger("Attempting id=%s",e.id),e.done(()=>{this.logger("Completing id=",e.id),ms(this.running,e),this.schedule()})}next(){let{promise:e,id:t}=ee(this.pending,tx());return this.logger("Scheduling id=%s",t),this.schedule(),e}}}}),$v={};Se($v,{applyPatchTask:()=>tD});function tD(e,t){return Ge(["apply",...t,...e])}var iD=M({"src/lib/tasks/apply-patch.ts"(){"use strict";Te()}});function rD(e,t){return{branch:e,hash:t,success:!0}}function nD(e){return{branch:e,hash:null,success:!1}}var zv,sD=M({"src/lib/responses/BranchDeleteSummary.ts"(){"use strict";zv=class{constructor(){this.all=[],this.branches={},this.errors=[]}get success(){return!this.errors.length}}}});function Hv(e,t){return t===1&&Vc.test(e)}var ix,Vc,rx,bs,oD=M({"src/lib/parsers/parse-branch-delete.ts"(){"use strict";sD(),Y(),ix=/(\S+)\s+\(\S+\s([^)]+)\)/,Vc=/^error[^']+'([^']+)'/m,rx=[new K(ix,(e,[t,i])=>{let r=rD(t,i);e.all.push(r),e.branches[t]=r}),new K(Vc,(e,[t])=>{let i=nD(t);e.errors.push(i),e.all.push(i),e.branches[t]=i})],bs=(e,t)=>Qe(new zv,rx,[e,t])}}),Gv,aD=M({"src/lib/responses/BranchSummary.ts"(){"use strict";Gv=class{constructor(){this.all=[],this.branches={},this.current="",this.detached=!1}push(e,t,i,r,n){e==="*"&&(this.detached=t,this.current=i),this.all.push(i),this.branches[i]={current:e==="*",linkedWorkTree:e==="+",name:i,commit:r,label:n}}}}});function nx(e){return e?e.charAt(0):""}function Vv(e){return Qe(new Gv,Xv,e)}var Xv,cD=M({"src/lib/parsers/parse-branch.ts"(){"use strict";aD(),Y(),Xv=[new K(/^([*+]\s)?\((?:HEAD )?detached (?:from|at) (\S+)\)\s+([a-z0-9]+)\s(.*)$/,(e,[t,i,r,n])=>{e.push(nx(t),!0,i,r,n)}),new K(new RegExp("^([*+]\\s)?(\\S+)\\s+([a-z0-9]+)\\s?(.*)$","s"),(e,[t,i,r,n])=>{e.push(nx(t),!1,i,r,n)})]}}),Yv={};Se(Yv,{branchLocalTask:()=>lD,branchTask:()=>uD,containsDeleteBranchCommand:()=>Wv,deleteBranchTask:()=>dD,deleteBranchesTask:()=>pD});function Wv(e){let t=["-d","-D","--delete"];return e.some(i=>t.includes(i))}function uD(e){let t=Wv(e),i=["branch",...e];return i.length===1&&i.push("-a"),i.includes("-v")||i.splice(1,0,"-v"),{format:"utf-8",commands:i,parser(r,n){return t?bs(r,n).all[0]:Vv(r)}}}function lD(){return{format:"utf-8",commands:["branch","-v"],parser:Vv}}function pD(e,t=!1){return{format:"utf-8",commands:["branch","-v",t?"-D":"-d",...e],parser(i,r){return bs(i,r)},onError({exitCode:i,stdOut:r},n,s,o){if(!Hv(String(n),i))return o(n);s(r)}}}function dD(e,t=!1){let i={format:"utf-8",commands:["branch","-v",t?"-D":"-d",e],parser(r,n){return bs(r,n).branches[e]},onError({exitCode:r,stdErr:n,stdOut:s},o,a,c){if(!Hv(String(o),r))return c(o);throw new Hr(i.parser(Ur(s),Ur(n)),String(o))}};return i}var fD=M({"src/lib/tasks/branch.ts"(){"use strict";ir(),oD(),cD(),Y()}}),Kv,hD=M({"src/lib/responses/CheckIgnore.ts"(){"use strict";Kv=e=>e.split(/\n/g).map(t=>t.trim()).filter(t=>!!t)}}),Jv={};Se(Jv,{checkIgnoreTask:()=>mD});function mD(e){return{commands:["check-ignore",...e],format:"utf-8",parser:Kv}}var gD=M({"src/lib/tasks/check-ignore.ts"(){"use strict";hD()}}),Zv={};Se(Zv,{cloneMirrorTask:()=>vD,cloneTask:()=>Qv});function xD(e){return/^--upload-pack(=|$)/.test(e)}function Qv(e,t,i){let r=["clone",...i];return $e(e)&&r.push(e),$e(t)&&r.push(t),r.find(xD)?Ze("git.fetch: potential exploit argument blocked."):Ge(r)}function vD(e,t,i){return ee(i,"--mirror"),Qv(e,t,i)}var yD=M({"src/lib/tasks/clone.ts"(){"use strict";Te(),Y()}});function bD(e,t){return Qe({raw:e,remote:null,branches:[],tags:[],updated:[],deleted:[]},ey,[e,t])}var ey,wD=M({"src/lib/parsers/parse-fetch.ts"(){"use strict";Y(),ey=[new K(/From (.+)$/,(e,[t])=>{e.remote=t}),new K(/\* \[new branch]\s+(\S+)\s*-> (.+)$/,(e,[t,i])=>{e.branches.push({name:t,tracking:i})}),new K(/\* \[new tag]\s+(\S+)\s*-> (.+)$/,(e,[t,i])=>{e.tags.push({name:t,tracking:i})}),new K(/- \[deleted]\s+\S+\s*-> (.+)$/,(e,[t])=>{e.deleted.push({tracking:t})}),new K(/\s*([^.]+)\.\.(\S+)\s+(\S+)\s*-> (.+)$/,(e,[t,i,r,n])=>{e.updated.push({name:r,tracking:n,to:i,from:t})})]}}),ty={};Se(ty,{fetchTask:()=>_D});function ED(e){return/^--upload-pack(=|$)/.test(e)}function _D(e,t,i){let r=["fetch",...i];return e&&t&&r.push(e,t),r.find(ED)?Ze("git.fetch: potential exploit argument blocked."):{commands:r,format:"utf-8",parser:bD}}var TD=M({"src/lib/tasks/fetch.ts"(){"use strict";wD(),Te()}});function SD(e){return Qe({moves:[]},iy,e)}var iy,CD=M({"src/lib/parsers/parse-move.ts"(){"use strict";Y(),iy=[new K(/^Renaming (.+) to (.+)$/,(e,[t,i])=>{e.moves.push({from:t,to:i})})]}}),ry={};Se(ry,{moveTask:()=>OD});function OD(e,t){return{commands:["mv","-v",...Ot(e),t],format:"utf-8",parser:SD}}var AD=M({"src/lib/tasks/move.ts"(){"use strict";CD(),Y()}}),ny={};Se(ny,{pullTask:()=>DD});function DD(e,t,i){let r=["pull",...i];return e&&t&&r.splice(1,0,e,t),{commands:r,format:"utf-8",parser(n,s){return hu(n,s)},onError(n,s,o,a){let c=FA(Ur(n.stdOut),Ur(n.stdErr));if(c)return a(new Hr(c));a(s)}}}var ID=M({"src/lib/tasks/pull.ts"(){"use strict";ir(),Av(),Y()}});function ND(e){let t={};return sy(e,([i])=>t[i]={name:i}),Object.values(t)}function LD(e){let t={};return sy(e,([i,r,n])=>{t.hasOwnProperty(i)||(t[i]={name:i,refs:{fetch:"",push:""}}),n&&r&&(t[i].refs[n.replace(/[^a-z]/g,"")]=r)}),Object.values(t)}function sy(e,t){Yc(e,i=>t(i.split(/\s+/)))}var kD=M({"src/lib/responses/GetRemoteSummary.ts"(){"use strict";Y()}}),oy={};Se(oy,{addRemoteTask:()=>RD,getRemotesTask:()=>PD,listRemotesTask:()=>FD,remoteTask:()=>jD,removeRemoteTask:()=>MD});function RD(e,t,i){return Ge(["remote","add",...i,e,t])}function PD(e){let t=["remote"];return e&&t.push("-v"),{commands:t,format:"utf-8",parser:e?LD:ND}}function FD(e){let t=[...e];return t[0]!=="ls-remote"&&t.unshift("ls-remote"),Ge(t)}function jD(e){let t=[...e];return t[0]!=="remote"&&t.unshift("remote"),Ge(t)}function MD(e){return Ge(["remote","remove",e])}var qD=M({"src/lib/tasks/remote.ts"(){"use strict";kD(),Te()}}),ay={};Se(ay,{stashListTask:()=>BD});function BD(e={},t){let i=vv(e),r=["stash","list",...i.commands,...t],n=hv(i.splitter,i.fields,cu(r));return ys(r)||{commands:r,format:"utf-8",parser:n}}var UD=M({"src/lib/tasks/stash-list.ts"(){"use strict";Yr(),gv(),fu(),yv()}}),cy={};Se(cy,{addSubModuleTask:()=>$D,initSubModuleTask:()=>zD,subModuleTask:()=>ws,updateSubModuleTask:()=>HD});function $D(e,t){return ws(["add",e,t])}function zD(e){return ws(["init",...e])}function ws(e){let t=[...e];return t[0]!=="submodule"&&t.unshift("submodule"),Ge(t)}function HD(e){return ws(["update",...e])}var GD=M({"src/lib/tasks/sub-module.ts"(){"use strict";Te()}});function VD(e,t){let i=isNaN(e),r=isNaN(t);return i!==r?i?1:-1:i?uy(e,t):0}function uy(e,t){return e===t?0:e>t?1:-1}function XD(e){return e.trim()}function rs(e){return typeof e=="string"&&parseInt(e.replace(/^\D+/g,""),10)||0}var sx,ly,YD=M({"src/lib/responses/TagList.ts"(){"use strict";sx=class{constructor(e,t){this.all=e,this.latest=t}},ly=function(e,t=!1){let i=e.split(`
`).map(XD).filter(Boolean);t||i.sort(function(n,s){let o=n.split("."),a=s.split(".");if(o.length===1||a.length===1)return VD(rs(o[0]),rs(a[0]));for(let c=0,u=Math.max(o.length,a.length);c<u;c++){let f=uy(rs(o[c]),rs(a[c]));if(f)return f}return 0});let r=t?i[0]:[...i].reverse().find(n=>n.indexOf(".")>=0);return new sx(i,r)}}}),py={};Se(py,{addAnnotatedTagTask:()=>JD,addTagTask:()=>KD,tagListTask:()=>WD});function WD(e=[]){let t=e.some(i=>/^--sort=/.test(i));return{format:"utf-8",commands:["tag","-l",...e],parser(i){return ly(i,t)}}}function KD(e){return{format:"utf-8",commands:["tag",e],parser(){return{name:e}}}}function JD(e,t){return{format:"utf-8",commands:["tag","-a","-m",t,e],parser(){return{name:e}}}}var ZD=M({"src/lib/tasks/tag.ts"(){"use strict";YD()}}),QD=g1({"src/git.js"(e,t){"use strict";var{GitExecutor:i}=(tA(),we(nv)),{SimpleGitApi:r}=(QA(),we(Mv)),{Scheduler:n}=(eD(),we(qv)),{configurationErrorTask:s}=(Te(),we(qc)),{asArray:o,filterArray:a,filterPrimitives:c,filterString:u,filterStringOrStringArray:f,filterType:g,getTrailingOptions:x,trailingFunctionArgument:l,trailingOptionsArgument:m}=(Y(),we(Ax)),{applyPatchTask:v}=(iD(),we($v)),{branchTask:w,branchLocalTask:_,deleteBranchesTask:E,deleteBranchTask:p}=(fD(),we(Yv)),{checkIgnoreTask:d}=(gD(),we(Jv)),{checkIsRepoTask:h}=(Lx(),we(Dx)),{cloneTask:b,cloneMirrorTask:O}=(yD(),we(Zv)),{cleanWithOptionsTask:A,isCleanOptionsArray:D}=(zx(),we(Ux)),{diffSummaryTask:S}=(fu(),we(xv)),{fetchTask:L}=(TD(),we(ty)),{moveTask:C}=(AD(),we(ry)),{pullTask:F}=(ID(),we(ny)),{pushTagsTask:z}=(Lv(),we(Nv)),{addRemoteTask:H,getRemotesTask:V,listRemotesTask:$,remoteTask:j,removeRemoteTask:ae}=(qD(),we(oy)),{getResetMode:J,resetTask:_e}=(tv(),we(Zx)),{stashListTask:Ve}=(UD(),we(ay)),{addSubModuleTask:Nt,initSubModuleTask:De,subModuleTask:Me,updateSubModuleTask:Xt}=(GD(),we(cy)),{addAnnotatedTagTask:Yt,addTagTask:Ie,tagListTask:oo}=(ZD(),we(py)),{straightThroughBufferTask:T,straightThroughStringTask:y}=(Te(),we(qc));function R(P,q){this._plugins=q,this._executor=new i(P.baseDir,new n(P.maxConcurrentProcesses),q),this._trimmed=P.trimmed}(R.prototype=Object.create(r.prototype)).constructor=R,R.prototype.customBinary=function(P){return this._plugins.reconfigure("binary",P),this},R.prototype.env=function(P,q){return arguments.length===1&&typeof P=="object"?this._executor.env=P:(this._executor.env=this._executor.env||{})[P]=q,this},R.prototype.stashList=function(P){return this._runTask(Ve(m(arguments)||{},a(P)&&P||[]),l(arguments))};function N(P,q,X,ie){return typeof X!="string"?s(`git.${P}() requires a string 'repoPath'`):q(X,g(ie,u),x(arguments))}R.prototype.clone=function(){return this._runTask(N("clone",b,...arguments),l(arguments))},R.prototype.mirror=function(){return this._runTask(N("mirror",O,...arguments),l(arguments))},R.prototype.mv=function(P,q){return this._runTask(C(P,q),l(arguments))},R.prototype.checkoutLatestTag=function(P){var q=this;return this.pull(function(){q.tags(function(X,ie){q.checkout(ie.latest,P)})})},R.prototype.pull=function(P,q,X,ie){return this._runTask(F(g(P,u),g(q,u),x(arguments)),l(arguments))},R.prototype.fetch=function(P,q){return this._runTask(L(g(P,u),g(q,u),x(arguments)),l(arguments))},R.prototype.silent=function(P){return console.warn("simple-git deprecation notice: git.silent: logging should be configured using the `debug` library / `DEBUG` environment variable, this will be an error in version 3"),this},R.prototype.tags=function(P,q){return this._runTask(oo(x(arguments)),l(arguments))},R.prototype.rebase=function(){return this._runTask(y(["rebase",...x(arguments)]),l(arguments))},R.prototype.reset=function(P){return this._runTask(_e(J(P),x(arguments)),l(arguments))},R.prototype.revert=function(P){let q=l(arguments);return typeof P!="string"?this._runTask(s("Commit must be a string"),q):this._runTask(y(["revert",...x(arguments,0,!0),P]),q)},R.prototype.addTag=function(P){let q=typeof P=="string"?Ie(P):s("Git.addTag requires a tag name");return this._runTask(q,l(arguments))},R.prototype.addAnnotatedTag=function(P,q){return this._runTask(Yt(P,q),l(arguments))},R.prototype.deleteLocalBranch=function(P,q,X){return this._runTask(p(P,typeof q=="boolean"?q:!1),l(arguments))},R.prototype.deleteLocalBranches=function(P,q,X){return this._runTask(E(P,typeof q=="boolean"?q:!1),l(arguments))},R.prototype.branch=function(P,q){return this._runTask(w(x(arguments)),l(arguments))},R.prototype.branchLocal=function(P){return this._runTask(_(),l(arguments))},R.prototype.raw=function(P){let q=!Array.isArray(P),X=[].slice.call(q?arguments:P,0);for(let me=0;me<X.length&&q;me++)if(!c(X[me])){X.splice(me,X.length-me);break}X.push(...x(arguments,0,!0));var ie=l(arguments);return X.length?this._runTask(y(X,this._trimmed),ie):this._runTask(s("Raw: must supply one or more command to execute"),ie)},R.prototype.submoduleAdd=function(P,q,X){return this._runTask(Nt(P,q),l(arguments))},R.prototype.submoduleUpdate=function(P,q){return this._runTask(Xt(x(arguments,!0)),l(arguments))},R.prototype.submoduleInit=function(P,q){return this._runTask(De(x(arguments,!0)),l(arguments))},R.prototype.subModule=function(P,q){return this._runTask(Me(x(arguments)),l(arguments))},R.prototype.listRemote=function(){return this._runTask($(x(arguments)),l(arguments))},R.prototype.addRemote=function(P,q,X){return this._runTask(H(P,q,x(arguments)),l(arguments))},R.prototype.removeRemote=function(P,q){return this._runTask(ae(P),l(arguments))},R.prototype.getRemotes=function(P,q){return this._runTask(V(P===!0),l(arguments))},R.prototype.remote=function(P,q){return this._runTask(j(x(arguments)),l(arguments))},R.prototype.tag=function(P,q){let X=x(arguments);return X[0]!=="tag"&&X.unshift("tag"),this._runTask(y(X),l(arguments))},R.prototype.updateServerInfo=function(P){return this._runTask(y(["update-server-info"]),l(arguments))},R.prototype.pushTags=function(P,q){let X=z({remote:g(P,u)},x(arguments));return this._runTask(X,l(arguments))},R.prototype.rm=function(P){return this._runTask(y(["rm","-f",...o(P)]),l(arguments))},R.prototype.rmKeepLocal=function(P){return this._runTask(y(["rm","--cached",...o(P)]),l(arguments))},R.prototype.catFile=function(P,q){return this._catFile("utf-8",arguments)},R.prototype.binaryCatFile=function(){return this._catFile("buffer",arguments)},R.prototype._catFile=function(P,q){var X=l(q),ie=["cat-file"],me=q[0];if(typeof me=="string")return this._runTask(s("Git.catFile: options must be supplied as an array of strings"),X);Array.isArray(me)&&ie.push.apply(ie,me);let yt=P==="buffer"?T(ie):y(ie);return this._runTask(yt,X)},R.prototype.diff=function(P,q){let X=u(P)?s("git.diff: supplying options as a single string is no longer supported, switch to an array of strings"):y(["diff",...x(arguments)]);return this._runTask(X,l(arguments))},R.prototype.diffSummary=function(){return this._runTask(S(x(arguments,1)),l(arguments))},R.prototype.applyPatch=function(P){let q=f(P)?v(o(P),x([].slice.call(arguments,1))):s("git.applyPatch requires one or more string patches as the first argument");return this._runTask(q,l(arguments))},R.prototype.revparse=function(){let P=["rev-parse",...x(arguments,!0)];return this._runTask(y(P,!0),l(arguments))},R.prototype.clean=function(P,q,X){let ie=D(P),me=ie&&P.join("")||g(P,u)||"",yt=x([].slice.call(arguments,ie?1:0));return this._runTask(A(me,yt),l(arguments))},R.prototype.exec=function(P){let q={commands:[],format:"utf-8",parser(){typeof P=="function"&&P()}};return this._runTask(q)},R.prototype.clearQueue=function(){return this},R.prototype.checkIgnore=function(P,q){return this._runTask(d(o(g(P,f,[]))),l(arguments))},R.prototype.checkIsRepo=function(P,q){return this._runTask(h(g(P,u)),l(arguments))},t.exports=R}});zr();si();var eI=class extends $t{constructor(e,t){super(void 0,t),this.config=e}};si();si();var Ut=class extends $t{constructor(e,t,i){super(e,i),this.task=e,this.plugin=t,Object.setPrototypeOf(this,new.target.prototype)}};ir();dx();Lx();zx();Vx();Yx();Jx();tv();function tI(e){return e?[{type:"spawn.before",action(r,n){e.aborted&&n.kill(new Ut(void 0,"abort","Abort already signaled"))}},{type:"spawn.after",action(r,n){function s(){n.kill(new Ut(void 0,"abort","Abort signal received"))}e.addEventListener("abort",s),n.spawned.on("close",()=>e.removeEventListener("abort",s))}}]:void 0}function iI(e){return typeof e=="string"&&e.trim().toLowerCase()==="-c"}function rI(e,t){if(iI(e)&&/^\s*protocol(.[a-z]+)?.allow/.test(t))throw new Ut(void 0,"unsafe","Configuring protocol.allow is not permitted without enabling allowUnsafeExtProtocol")}function nI(e,t){if(/^\s*--(upload|receive)-pack/.test(e))throw new Ut(void 0,"unsafe","Use of --upload-pack or --receive-pack is not permitted without enabling allowUnsafePack");if(t==="clone"&&/^\s*-u\b/.test(e))throw new Ut(void 0,"unsafe","Use of clone with option -u is not permitted without enabling allowUnsafePack");if(t==="push"&&/^\s*--exec\b/.test(e))throw new Ut(void 0,"unsafe","Use of push with option --exec is not permitted without enabling allowUnsafePack")}function sI({allowUnsafeProtocolOverride:e=!1,allowUnsafePack:t=!1}={}){return{type:"spawn.args",action(i,r){return i.forEach((n,s)=>{let o=s<i.length?i[s+1]:"";e||rI(n,o),t||nI(n,r.method)}),i}}}Y();function oI(e){let t=Br(e,"-c");return{type:"spawn.args",action(i){return[...t,...i]}}}Y();var ox=(0,er.deferred)().promise;function aI({onClose:e=!0,onExit:t=50}={}){function i(){let n=-1,s={close:(0,er.deferred)(),closeTimeout:(0,er.deferred)(),exit:(0,er.deferred)(),exitTimeout:(0,er.deferred)()},o=Promise.race([e===!1?ox:s.closeTimeout.promise,t===!1?ox:s.exitTimeout.promise]);return r(e,s.close,s.closeTimeout),r(t,s.exit,s.exitTimeout),{close(a){n=a,s.close.done()},exit(a){n=a,s.exit.done()},get exitCode(){return n},result:o}}function r(n,s,o){n!==!1&&(n===!0?s.promise:s.promise.then(()=>Pc(n))).then(o.done)}return{type:"spawn.after",action(n,s){return Mr(this,arguments,function*(o,{spawned:a,close:c}){var u,f;let g=i(),x=!0,l=()=>void(x=!1);(u=a.stdout)==null||u.on("data",l),(f=a.stderr)==null||f.on("data",l),a.on("error",l),a.on("close",m=>g.close(m)),a.on("exit",m=>g.exit(m));try{yield g.result,x&&(yield Pc(50)),c(g.exitCode)}catch(m){c(g.exitCode,m)}})}}}Y();var cI="Invalid value supplied for custom binary, requires a single string or an array containing either one or two strings",ax="Invalid value supplied for custom binary, restricted characters must be removed or supply the unsafe.allowUnsafeCustomBinary option";function uI(e){return!e||!/^([a-z]:)?([a-z0-9/.\\_-]+)$/i.test(e)}function cx(e,t){if(e.length<1||e.length>2)throw new Ut(void 0,"binary",cI);if(e.some(uI))if(t)console.warn(ax);else throw new Ut(void 0,"binary",ax);let[r,n]=e;return{binary:r,prefix:n}}function lI(e,t=["git"],i=!1){let r=cx(Ot(t),i);e.on("binary",n=>{r=cx(Ot(n),i)}),e.append("spawn.binary",()=>r.binary),e.append("spawn.args",n=>r.prefix?[r.prefix,...n]:n)}si();function pI(e){return!!(e.exitCode&&e.stdErr.length)}function dI(e){return Buffer.concat([...e.stdOut,...e.stdErr])}function fI(e=!1,t=pI,i=dI){return(r,n)=>!e&&r||!t(n)?r:i(n)}function ux(e){return{type:"task.error",action(t,i){let r=e(t.error,{stdErr:i.stdErr,stdOut:i.stdOut,exitCode:i.exitCode});return Buffer.isBuffer(r)?{error:new $t(void 0,r.toString("utf-8"))}:{error:r}}}}Y();var hI=class{constructor(){this.plugins=new Set,this.events=new dy.EventEmitter}on(e,t){this.events.on(e,t)}reconfigure(e,t){this.events.emit(e,t)}append(e,t){let i=ee(this.plugins,{type:e,action:t});return()=>this.plugins.delete(i)}add(e){let t=[];return Ot(e).forEach(i=>i&&this.plugins.add(ee(t,i))),()=>{t.forEach(i=>this.plugins.delete(i))}}exec(e,t,i){let r=t,n=Object.freeze(Object.create(i));for(let s of this.plugins)s.type===e&&(r=s.action(r,n));return r}};Y();function mI(e){let t="--progress",i=["checkout","clone","fetch","pull","push"];return[{type:"spawn.args",action(s,o){return i.includes(o.method)?vx(s,t):s}},{type:"spawn.after",action(s,o){var a;o.commands.includes(t)&&((a=o.spawned.stderr)==null||a.on("data",c=>{let u=/^([\s\S]+?):\s*(\d+)% \((\d+)\/(\d+)\)/.exec(c.toString("utf8"));u&&e({method:o.method,stage:gI(u[1]),progress:ce(u[2]),processed:ce(u[3]),total:ce(u[4])})}))}}]}function gI(e){return String(e.toLowerCase().split(" ",1))||"unknown"}Y();function xI(e){let t=wx(e,["uid","gid"]);return{type:"spawn.options",action(i){return pt(pt({},t),i)}}}function vI({block:e,stdErr:t=!0,stdOut:i=!0}){if(e>0)return{type:"spawn.after",action(r,n){var s,o;let a;function c(){a&&clearTimeout(a),a=setTimeout(f,e)}function u(){var g,x;(g=n.spawned.stdout)==null||g.off("data",c),(x=n.spawned.stderr)==null||x.off("data",c),n.spawned.off("exit",u),n.spawned.off("close",u),a&&clearTimeout(a)}function f(){u(),n.kill(new Ut(void 0,"timeout","block timeout reached"))}i&&((s=n.spawned.stdout)==null||s.on("data",c)),t&&((o=n.spawned.stderr)==null||o.on("data",c)),n.spawned.on("exit",u),n.spawned.on("close",u),c()}}}zr();function yI(){return{type:"spawn.args",action(e){let t=[],i;function r(n){(i=i||[]).push(...n)}for(let n=0;n<e.length;n++){let s=e[n];if(cs(s)){r(kg(s));continue}if(s==="--"){r(e.slice(n+1).flatMap(o=>cs(o)&&kg(o)||o));break}t.push(s)}return i?[...t,"--",...i.map(String)]:t}}}Y();var bI=QD();function wI(e,t){var i;let r=new hI,n=Cx(e&&(typeof e=="string"?{baseDir:e}:e)||{},t);if(!Wc(n.baseDir))throw new eI(n,"Cannot use simple-git on a directory that does not exist");return Array.isArray(n.config)&&r.add(oI(n.config)),r.add(sI(n.unsafe)),r.add(yI()),r.add(aI(n.completion)),n.abort&&r.add(tI(n.abort)),n.progress&&r.add(mI(n.progress)),n.timeout&&r.add(vI(n.timeout)),n.spawnOptions&&r.add(xI(n.spawnOptions)),r.add(ux(fI(!0))),n.errors&&r.add(ux(n.errors)),lI(r,n.binary,(i=n.unsafe)==null?void 0:i.allowUnsafeCustomBinary),new bI(n,r)}ir();var fy=wI;var L0=se(require("child_process")),k0=se(Ly());var Ti=require("fs"),Vy=require("path");var Os=require("fs");function vu(e){if(!Number.isSafeInteger(e))throw new Error(`Wrong integer: ${e}`)}function DI(e){return e instanceof Uint8Array||e!=null&&typeof e=="object"&&e.constructor.name==="Uint8Array"}function II(...e){let t=s=>s,i=(s,o)=>a=>s(o(a)),r=e.map(s=>s.encode).reduceRight(i,t),n=e.map(s=>s.decode).reduce(i,t);return{encode:r,decode:n}}function NI(e){return{encode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="number")throw new Error("alphabet.encode input should be an array of numbers");return t.map(i=>{if(i<0||i>=e.length)throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${e.length})`);return e[i]})},decode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="string")throw new Error("alphabet.decode input should be array of strings");return t.map(i=>{if(typeof i!="string")throw new Error(`alphabet.decode: not string element=${i}`);let r=e.indexOf(i);if(r===-1)throw new Error(`Unknown letter: "${i}". Allowed: ${e}`);return r})}}}function LI(e=""){if(typeof e!="string")throw new Error("join separator should be string");return{encode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="string")throw new Error("join.encode input should be array of strings");for(let i of t)if(typeof i!="string")throw new Error(`join.encode: non-string input=${i}`);return t.join(e)},decode:t=>{if(typeof t!="string")throw new Error("join.decode input should be string");return t.split(e)}}}function ky(e,t,i){if(t<2)throw new Error(`convertRadix: wrong from=${t}, base cannot be less than 2`);if(i<2)throw new Error(`convertRadix: wrong to=${i}, base cannot be less than 2`);if(!Array.isArray(e))throw new Error("convertRadix: data should be array");if(!e.length)return[];let r=0,n=[],s=Array.from(e);for(s.forEach(o=>{if(o<0||o>=t)throw new Error(`Wrong integer: ${o}`)});;){let o=0,a=!0;for(let c=r;c<s.length;c++){let u=s[c],f=t*o+u;if(!Number.isSafeInteger(f)||t*o/t!==o||f-u!==t*o)throw new Error("convertRadix: carry overflow");o=f%i;let g=Math.floor(f/i);if(s[c]=g,!Number.isSafeInteger(g)||g*i+o!==f)throw new Error("convertRadix: carry overflow");if(a)g?a=!1:r=c;else continue}if(n.push(o),a)break}for(let o=0;o<e.length-1&&e[o]===0;o++)n.push(0);return n.reverse()}function kI(e){return{encode:t=>{if(!DI(t))throw new Error("radix.encode input should be Uint8Array");return ky(Array.from(t),2**8,e)},decode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="number")throw new Error("radix.decode input should be array of numbers");return Uint8Array.from(ky(t,e,2**8))}}}var RI=e=>II(kI(58),NI(e),LI("")),yu=RI("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");var ot=require("path"),Hy=se($y()),nr=require("fs"),Wr=".",zy="/*",Ts="scaffoldly/scaffoldly:1";var ZI=(0,ot.join)(ot.sep,"var","task"),QI=e=>{if(e.startsWith(`${Ts}:`))return JSON.parse(new TextDecoder().decode(yu.decode(e.split(`${Ts}:`)[1])));throw new Error(`Invalid config: ${e}`)},eN=e=>`${Ts}:${yu.encode(new TextEncoder().encode(JSON.stringify(e)))}`,Ss=class e{commands;constructor(){this.commands=[]}add=t=>(this.commands.push(t),this);isEmpty=t=>(t?this.commands.filter(r=>r.schedule===t.schedule):this.commands).length===0;toString=t=>(t?this.commands.filter(r=>r.schedule===t.schedule):this.commands).map(r=>r.workdir?`( cd ${r.workdir} && ${r.cmd} )`:`( ${r.cmd} )`).join(" & ");encode=()=>eN(this.commands);static decode=t=>{let i=QI(t),r=new e;return i.forEach(n=>{r.add(n)}),r}},Cs=class e{constructor(t,i,r={},n="production"){this.baseDir=t;this.workDir=i;this.mode=n;let{projectJson:s,serviceConfig:o}=r;if(this.projectJson=s,s){let{scaffoldly:a={},name:c="unknown",version:u="0.0.0-0"}=s;this.scaffoldly=a,this._name=c,this._version=u,this._bin={...s.bin||{},...a.bin||{}},this._files=[...s.files||[],...a.files||[]],this._packages=a.packages||[],o&&(this.scaffoldly={...a,runtime:o.runtime||a.runtime,services:[],routes:void 0},this.serviceConfig=o,this._name=o.name,this._packages=[...o.packages||[]],this._files=[...new Set([...this._files||[],...o.files||[]])],this._bin={...this._bin||{},...o.bin||{}});return}throw new Error("Unable to create scaffoldly config")}projectJson;scaffoldly;serviceConfig;mode;_id="";_name;_version;_bin;_files;_packages;_ignoreFilter;set id(t){this._id=t}get id(){let{_id:t}=this;return t||""}get name(){let t=this.serviceConfig?.name||this._name||"unknown-service",i=/[a-z0-9]+(?:[._-][a-z0-9]+)*/,n=t.replace(/\//g,"-").toLowerCase().replace(/[^a-z0-9._-]/g,""),s=n.match(i);if(!s||!s[0])throw new Error(`Invalid service name: '${t}' (sanitized: ${n})`);t=s[0];let o=this.serviceConfig?.id||this._id;return o&&(t=`${t}-${o}`),t}get version(){let{_version:t}=this;return t}get runtime(){let{runtime:t="alpine:3"}=this.serviceConfig||this.scaffoldly;return t}get handler(){let{handler:t="localhost:3000"}=this.serviceConfig||this.scaffoldly;return t}get files(){let{_files:t=[]}=this;return[...new Set(t)]}get src(){let{src:t=Wr}=this.serviceConfig||this.scaffoldly;return t}get bin(){let{_bin:t={}}=this;return t}get scripts(){let{scripts:t={}}=this.serviceConfig||this.scaffoldly;return t}get services(){let{services:t=[]}=this.scaffoldly;return t.map((i,r)=>new e(this.baseDir,this.workDir,{projectJson:this.projectJson,serviceConfig:{id:i.id||"",name:i.name||`${r+1}`,runtime:i.runtime||this.runtime,handler:i.handler||this.handler,src:i.src||this.src,files:i.files||[],bin:i.bin||{},packages:i.packages||[],shell:i.shell,scripts:i.scripts||{},schedules:i.schedules||{}}},this.mode))}get routes(){let{routes:t}=this.scaffoldly;return t||(t={}),t[zy]||(t[zy]=this.handler),t}get installCommands(){let t="install",i=new Ss,r=this.src!==Wr?this.src:void 0;return this.scripts[t]&&i.add({cmd:this.scripts[t],workdir:r}),this.services.forEach(n=>{r=n.src!==Wr?n.src:void 0,n.scripts[t]&&i.add({cmd:n.scripts[t],workdir:r})}),i}get serveCommands(){let t=this.mode==="development"?"dev":"start",i=new Ss,r=this.src!==Wr?this.src:void 0;return this.scripts[t]&&i.add({cmd:this.scripts[t],workdir:r}),Object.entries(this.schedules).forEach(([n,s])=>{i.add({cmd:s,workdir:r,schedule:n})}),this.services.forEach(n=>{r=n.src!==Wr?n.src:void 0,n.scripts[t]&&i.add({cmd:n.scripts[t],workdir:r}),Object.entries(n.schedules).forEach(([s,o])=>{i.add({cmd:o,workdir:r,schedule:s})})}),i}get rootdir(){let{taskdir:t}=this.scaffoldly;return t||(t=ZI),t}get taskdir(){let{rootdir:t}=this;return(0,ot.join)(t,(0,ot.relative)(this.baseDir,(0,ot.join)(this.workDir)))}get packages(){return this._packages||[]}get shell(){let{shell:t}=this.serviceConfig||this.scaffoldly;return t}get schedules(){let{schedules:t={}}=this.serviceConfig||this.scaffoldly;return t}get resources(){let{resources:t=[]}=this.scaffoldly;return t}get runtimes(){let t=[Ts,this.runtime,...this.services.map(i=>i.runtime)];return[...new Set(t)]}get timeout(){let{timeout:t=900}=this.scaffoldly;return t}get memorySize(){let{memorySize:t=1024}=this.scaffoldly;return t}get ignoreFilter(){if(this._ignoreFilter)return this._ignoreFilter;let t=(0,Hy.default)();return[".gitignore",".dockerignore"].map(i=>{[(0,ot.join)(this.baseDir,i),(0,ot.join)(this.workDir,i),(0,ot.join)(this.workDir,this.src,i)].forEach(r=>{(0,nr.existsSync)(r)&&t.add((0,nr.readFileSync)(r).toString())})}),this._ignoreFilter=t.createFilter(),this._ignoreFilter}get ignoredFiles(){let t=(0,ot.join)(this.workDir,this.src);return(0,nr.readdirSync)(t).filter(r=>{let n=(0,ot.relative)(this.workDir,r);return!this.ignoreFilter(n)})}get generatedFiles(){let{generatedFiles:t=[]}=this.scaffoldly;return t}get user(){let{user:t}=this.scaffoldly;return t}};var Gy=require("path"),dt=class{constructor(t,i){this.gitService=t;this.workDir=i}get workdir(){if(this.gitService)return this.gitService.workDir;if(this.workDir)return Promise.resolve(this.workDir);throw new Error("Workdir is unknown")}get standaloneConfigFile(){return this.workdir.then(t=>{let i=(0,Gy.join)(t,"scaffoldly.json");if((0,Os.existsSync)(i))return i})}get standaloneConfig(){return this.standaloneConfigFile.then(t=>{if(!t)return;let i={},r=JSON.parse((0,Os.readFileSync)(t,"utf-8"));return Object.assign(i,r),i})}get installCommands(){return Promise.all([this.workDir,this.projectJson]).then(([t,i])=>!i||!t?void 0:new Cs(t,t,{projectJson:i}).installCommands)}};var As=class extends dt{async setProject(t){return this.packageJsonFile.then(i=>{if(!i)return;let r=JSON.parse((0,Ti.readFileSync)(i,"utf8"));r.name=t,delete r.license,delete r.description,(0,Ti.writeFileSync)(i,JSON.stringify(r,null,2))})}get packageJsonFile(){return this.workdir.then(t=>(0,Vy.join)(t,"package.json")).then(t=>{if((0,Ti.existsSync)(t))return t})}get packageJson(){return this.packageJsonFile.then(t=>{if(t)try{let i=JSON.parse((0,Ti.readFileSync)(t,"utf8"));return i.type="node",i}catch{return}})}get projectJson(){return this.packageJson}};function cb(e){return typeof e>"u"||e===null}function tN(e){return typeof e=="object"&&e!==null}function iN(e){return Array.isArray(e)?e:cb(e)?[]:[e]}function rN(e,t){var i,r,n,s;if(t)for(s=Object.keys(t),i=0,r=s.length;i<r;i+=1)n=s[i],e[n]=t[n];return e}function nN(e,t){var i="",r;for(r=0;r<t;r+=1)i+=e;return i}function sN(e){return e===0&&Number.NEGATIVE_INFINITY===1/e}var oN=cb,aN=tN,cN=iN,uN=nN,lN=sN,pN=rN,Re={isNothing:oN,isObject:aN,toArray:cN,repeat:uN,isNegativeZero:lN,extend:pN};function ub(e,t){var i="",r=e.reason||"(unknown reason)";return e.mark?(e.mark.name&&(i+='in "'+e.mark.name+'" '),i+="("+(e.mark.line+1)+":"+(e.mark.column+1)+")",!t&&e.mark.snippet&&(i+=`

`+e.mark.snippet),r+" "+i):r}function Jr(e,t){Error.call(this),this.name="YAMLException",this.reason=e,this.mark=t,this.message=ub(this,!1),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack||""}Jr.prototype=Object.create(Error.prototype);Jr.prototype.constructor=Jr;Jr.prototype.toString=function(t){return this.name+": "+ub(this,t)};var et=Jr;function Cu(e,t,i,r,n){var s="",o="",a=Math.floor(n/2)-1;return r-t>a&&(s=" ... ",t=r-a+s.length),i-r>a&&(o=" ...",i=r+a-o.length),{str:s+e.slice(t,i).replace(/\t/g,"\u2192")+o,pos:r-t+s.length}}function Ou(e,t){return Re.repeat(" ",t-e.length)+e}function dN(e,t){if(t=Object.create(t||null),!e.buffer)return null;t.maxLength||(t.maxLength=79),typeof t.indent!="number"&&(t.indent=1),typeof t.linesBefore!="number"&&(t.linesBefore=3),typeof t.linesAfter!="number"&&(t.linesAfter=2);for(var i=/\r?\n|\r|\0/g,r=[0],n=[],s,o=-1;s=i.exec(e.buffer);)n.push(s.index),r.push(s.index+s[0].length),e.position<=s.index&&o<0&&(o=r.length-2);o<0&&(o=r.length-1);var a="",c,u,f=Math.min(e.line+t.linesAfter,n.length).toString().length,g=t.maxLength-(t.indent+f+3);for(c=1;c<=t.linesBefore&&!(o-c<0);c++)u=Cu(e.buffer,r[o-c],n[o-c],e.position-(r[o]-r[o-c]),g),a=Re.repeat(" ",t.indent)+Ou((e.line-c+1).toString(),f)+" | "+u.str+`
`+a;for(u=Cu(e.buffer,r[o],n[o],e.position,g),a+=Re.repeat(" ",t.indent)+Ou((e.line+1).toString(),f)+" | "+u.str+`
`,a+=Re.repeat("-",t.indent+f+3+u.pos)+`^
`,c=1;c<=t.linesAfter&&!(o+c>=n.length);c++)u=Cu(e.buffer,r[o+c],n[o+c],e.position-(r[o]-r[o+c]),g),a+=Re.repeat(" ",t.indent)+Ou((e.line+c+1).toString(),f)+" | "+u.str+`
`;return a.replace(/\n$/,"")}var fN=dN,hN=["kind","multi","resolve","construct","instanceOf","predicate","represent","representName","defaultStyle","styleAliases"],mN=["scalar","sequence","mapping"];function gN(e){var t={};return e!==null&&Object.keys(e).forEach(function(i){e[i].forEach(function(r){t[String(r)]=i})}),t}function xN(e,t){if(t=t||{},Object.keys(t).forEach(function(i){if(hN.indexOf(i)===-1)throw new et('Unknown option "'+i+'" is met in definition of "'+e+'" YAML type.')}),this.options=t,this.tag=e,this.kind=t.kind||null,this.resolve=t.resolve||function(){return!0},this.construct=t.construct||function(i){return i},this.instanceOf=t.instanceOf||null,this.predicate=t.predicate||null,this.represent=t.represent||null,this.representName=t.representName||null,this.defaultStyle=t.defaultStyle||null,this.multi=t.multi||!1,this.styleAliases=gN(t.styleAliases||null),mN.indexOf(this.kind)===-1)throw new et('Unknown kind "'+this.kind+'" is specified for "'+e+'" YAML type.')}var ze=xN;function Xy(e,t){var i=[];return e[t].forEach(function(r){var n=i.length;i.forEach(function(s,o){s.tag===r.tag&&s.kind===r.kind&&s.multi===r.multi&&(n=o)}),i[n]=r}),i}function vN(){var e={scalar:{},sequence:{},mapping:{},fallback:{},multi:{scalar:[],sequence:[],mapping:[],fallback:[]}},t,i;function r(n){n.multi?(e.multi[n.kind].push(n),e.multi.fallback.push(n)):e[n.kind][n.tag]=e.fallback[n.tag]=n}for(t=0,i=arguments.length;t<i;t+=1)arguments[t].forEach(r);return e}function Du(e){return this.extend(e)}Du.prototype.extend=function(t){var i=[],r=[];if(t instanceof ze)r.push(t);else if(Array.isArray(t))r=r.concat(t);else if(t&&(Array.isArray(t.implicit)||Array.isArray(t.explicit)))t.implicit&&(i=i.concat(t.implicit)),t.explicit&&(r=r.concat(t.explicit));else throw new et("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");i.forEach(function(s){if(!(s instanceof ze))throw new et("Specified list of YAML types (or a single Type object) contains a non-Type object.");if(s.loadKind&&s.loadKind!=="scalar")throw new et("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");if(s.multi)throw new et("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.")}),r.forEach(function(s){if(!(s instanceof ze))throw new et("Specified list of YAML types (or a single Type object) contains a non-Type object.")});var n=Object.create(Du.prototype);return n.implicit=(this.implicit||[]).concat(i),n.explicit=(this.explicit||[]).concat(r),n.compiledImplicit=Xy(n,"implicit"),n.compiledExplicit=Xy(n,"explicit"),n.compiledTypeMap=vN(n.compiledImplicit,n.compiledExplicit),n};var yN=Du,bN=new ze("tag:yaml.org,2002:str",{kind:"scalar",construct:function(e){return e!==null?e:""}}),wN=new ze("tag:yaml.org,2002:seq",{kind:"sequence",construct:function(e){return e!==null?e:[]}}),EN=new ze("tag:yaml.org,2002:map",{kind:"mapping",construct:function(e){return e!==null?e:{}}}),_N=new yN({explicit:[bN,wN,EN]});function TN(e){if(e===null)return!0;var t=e.length;return t===1&&e==="~"||t===4&&(e==="null"||e==="Null"||e==="NULL")}function SN(){return null}function CN(e){return e===null}var ON=new ze("tag:yaml.org,2002:null",{kind:"scalar",resolve:TN,construct:SN,predicate:CN,represent:{canonical:function(){return"~"},lowercase:function(){return"null"},uppercase:function(){return"NULL"},camelcase:function(){return"Null"},empty:function(){return""}},defaultStyle:"lowercase"});function AN(e){if(e===null)return!1;var t=e.length;return t===4&&(e==="true"||e==="True"||e==="TRUE")||t===5&&(e==="false"||e==="False"||e==="FALSE")}function DN(e){return e==="true"||e==="True"||e==="TRUE"}function IN(e){return Object.prototype.toString.call(e)==="[object Boolean]"}var NN=new ze("tag:yaml.org,2002:bool",{kind:"scalar",resolve:AN,construct:DN,predicate:IN,represent:{lowercase:function(e){return e?"true":"false"},uppercase:function(e){return e?"TRUE":"FALSE"},camelcase:function(e){return e?"True":"False"}},defaultStyle:"lowercase"});function LN(e){return 48<=e&&e<=57||65<=e&&e<=70||97<=e&&e<=102}function kN(e){return 48<=e&&e<=55}function RN(e){return 48<=e&&e<=57}function PN(e){if(e===null)return!1;var t=e.length,i=0,r=!1,n;if(!t)return!1;if(n=e[i],(n==="-"||n==="+")&&(n=e[++i]),n==="0"){if(i+1===t)return!0;if(n=e[++i],n==="b"){for(i++;i<t;i++)if(n=e[i],n!=="_"){if(n!=="0"&&n!=="1")return!1;r=!0}return r&&n!=="_"}if(n==="x"){for(i++;i<t;i++)if(n=e[i],n!=="_"){if(!LN(e.charCodeAt(i)))return!1;r=!0}return r&&n!=="_"}if(n==="o"){for(i++;i<t;i++)if(n=e[i],n!=="_"){if(!kN(e.charCodeAt(i)))return!1;r=!0}return r&&n!=="_"}}if(n==="_")return!1;for(;i<t;i++)if(n=e[i],n!=="_"){if(!RN(e.charCodeAt(i)))return!1;r=!0}return!(!r||n==="_")}function FN(e){var t=e,i=1,r;if(t.indexOf("_")!==-1&&(t=t.replace(/_/g,"")),r=t[0],(r==="-"||r==="+")&&(r==="-"&&(i=-1),t=t.slice(1),r=t[0]),t==="0")return 0;if(r==="0"){if(t[1]==="b")return i*parseInt(t.slice(2),2);if(t[1]==="x")return i*parseInt(t.slice(2),16);if(t[1]==="o")return i*parseInt(t.slice(2),8)}return i*parseInt(t,10)}function jN(e){return Object.prototype.toString.call(e)==="[object Number]"&&e%1===0&&!Re.isNegativeZero(e)}var MN=new ze("tag:yaml.org,2002:int",{kind:"scalar",resolve:PN,construct:FN,predicate:jN,represent:{binary:function(e){return e>=0?"0b"+e.toString(2):"-0b"+e.toString(2).slice(1)},octal:function(e){return e>=0?"0o"+e.toString(8):"-0o"+e.toString(8).slice(1)},decimal:function(e){return e.toString(10)},hexadecimal:function(e){return e>=0?"0x"+e.toString(16).toUpperCase():"-0x"+e.toString(16).toUpperCase().slice(1)}},defaultStyle:"decimal",styleAliases:{binary:[2,"bin"],octal:[8,"oct"],decimal:[10,"dec"],hexadecimal:[16,"hex"]}}),qN=new RegExp("^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");function BN(e){return!(e===null||!qN.test(e)||e[e.length-1]==="_")}function UN(e){var t,i;return t=e.replace(/_/g,"").toLowerCase(),i=t[0]==="-"?-1:1,"+-".indexOf(t[0])>=0&&(t=t.slice(1)),t===".inf"?i===1?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY:t===".nan"?NaN:i*parseFloat(t,10)}var $N=/^[-+]?[0-9]+e/;function zN(e,t){var i;if(isNaN(e))switch(t){case"lowercase":return".nan";case"uppercase":return".NAN";case"camelcase":return".NaN"}else if(Number.POSITIVE_INFINITY===e)switch(t){case"lowercase":return".inf";case"uppercase":return".INF";case"camelcase":return".Inf"}else if(Number.NEGATIVE_INFINITY===e)switch(t){case"lowercase":return"-.inf";case"uppercase":return"-.INF";case"camelcase":return"-.Inf"}else if(Re.isNegativeZero(e))return"-0.0";return i=e.toString(10),$N.test(i)?i.replace("e",".e"):i}function HN(e){return Object.prototype.toString.call(e)==="[object Number]"&&(e%1!==0||Re.isNegativeZero(e))}var GN=new ze("tag:yaml.org,2002:float",{kind:"scalar",resolve:BN,construct:UN,predicate:HN,represent:zN,defaultStyle:"lowercase"}),VN=_N.extend({implicit:[ON,NN,MN,GN]}),XN=VN,lb=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"),pb=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");function YN(e){return e===null?!1:lb.exec(e)!==null||pb.exec(e)!==null}function WN(e){var t,i,r,n,s,o,a,c=0,u=null,f,g,x;if(t=lb.exec(e),t===null&&(t=pb.exec(e)),t===null)throw new Error("Date resolve error");if(i=+t[1],r=+t[2]-1,n=+t[3],!t[4])return new Date(Date.UTC(i,r,n));if(s=+t[4],o=+t[5],a=+t[6],t[7]){for(c=t[7].slice(0,3);c.length<3;)c+="0";c=+c}return t[9]&&(f=+t[10],g=+(t[11]||0),u=(f*60+g)*6e4,t[9]==="-"&&(u=-u)),x=new Date(Date.UTC(i,r,n,s,o,a,c)),u&&x.setTime(x.getTime()-u),x}function KN(e){return e.toISOString()}var JN=new ze("tag:yaml.org,2002:timestamp",{kind:"scalar",resolve:YN,construct:WN,instanceOf:Date,represent:KN});function ZN(e){return e==="<<"||e===null}var QN=new ze("tag:yaml.org,2002:merge",{kind:"scalar",resolve:ZN}),Ru=`ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=
\r`;function eL(e){if(e===null)return!1;var t,i,r=0,n=e.length,s=Ru;for(i=0;i<n;i++)if(t=s.indexOf(e.charAt(i)),!(t>64)){if(t<0)return!1;r+=6}return r%8===0}function tL(e){var t,i,r=e.replace(/[\r\n=]/g,""),n=r.length,s=Ru,o=0,a=[];for(t=0;t<n;t++)t%4===0&&t&&(a.push(o>>16&255),a.push(o>>8&255),a.push(o&255)),o=o<<6|s.indexOf(r.charAt(t));return i=n%4*6,i===0?(a.push(o>>16&255),a.push(o>>8&255),a.push(o&255)):i===18?(a.push(o>>10&255),a.push(o>>2&255)):i===12&&a.push(o>>4&255),new Uint8Array(a)}function iL(e){var t="",i=0,r,n,s=e.length,o=Ru;for(r=0;r<s;r++)r%3===0&&r&&(t+=o[i>>18&63],t+=o[i>>12&63],t+=o[i>>6&63],t+=o[i&63]),i=(i<<8)+e[r];return n=s%3,n===0?(t+=o[i>>18&63],t+=o[i>>12&63],t+=o[i>>6&63],t+=o[i&63]):n===2?(t+=o[i>>10&63],t+=o[i>>4&63],t+=o[i<<2&63],t+=o[64]):n===1&&(t+=o[i>>2&63],t+=o[i<<4&63],t+=o[64],t+=o[64]),t}function rL(e){return Object.prototype.toString.call(e)==="[object Uint8Array]"}var nL=new ze("tag:yaml.org,2002:binary",{kind:"scalar",resolve:eL,construct:tL,predicate:rL,represent:iL}),sL=Object.prototype.hasOwnProperty,oL=Object.prototype.toString;function aL(e){if(e===null)return!0;var t=[],i,r,n,s,o,a=e;for(i=0,r=a.length;i<r;i+=1){if(n=a[i],o=!1,oL.call(n)!=="[object Object]")return!1;for(s in n)if(sL.call(n,s))if(!o)o=!0;else return!1;if(!o)return!1;if(t.indexOf(s)===-1)t.push(s);else return!1}return!0}function cL(e){return e!==null?e:[]}var uL=new ze("tag:yaml.org,2002:omap",{kind:"sequence",resolve:aL,construct:cL}),lL=Object.prototype.toString;function pL(e){if(e===null)return!0;var t,i,r,n,s,o=e;for(s=new Array(o.length),t=0,i=o.length;t<i;t+=1){if(r=o[t],lL.call(r)!=="[object Object]"||(n=Object.keys(r),n.length!==1))return!1;s[t]=[n[0],r[n[0]]]}return!0}function dL(e){if(e===null)return[];var t,i,r,n,s,o=e;for(s=new Array(o.length),t=0,i=o.length;t<i;t+=1)r=o[t],n=Object.keys(r),s[t]=[n[0],r[n[0]]];return s}var fL=new ze("tag:yaml.org,2002:pairs",{kind:"sequence",resolve:pL,construct:dL}),hL=Object.prototype.hasOwnProperty;function mL(e){if(e===null)return!0;var t,i=e;for(t in i)if(hL.call(i,t)&&i[t]!==null)return!1;return!0}function gL(e){return e!==null?e:{}}var xL=new ze("tag:yaml.org,2002:set",{kind:"mapping",resolve:mL,construct:gL}),db=XN.extend({implicit:[JN,QN],explicit:[nL,uL,fL,xL]}),ai=Object.prototype.hasOwnProperty,Ds=1,fb=2,hb=3,Is=4,Au=1,vL=2,Yy=3,yL=/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,bL=/[\x85\u2028\u2029]/,wL=/[,\[\]\{\}]/,mb=/^(?:!|!!|![a-z\-]+!)$/i,gb=/^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;function Wy(e){return Object.prototype.toString.call(e)}function Dt(e){return e===10||e===13}function Ci(e){return e===9||e===32}function tt(e){return e===9||e===32||e===10||e===13}function or(e){return e===44||e===91||e===93||e===123||e===125}function EL(e){var t;return 48<=e&&e<=57?e-48:(t=e|32,97<=t&&t<=102?t-97+10:-1)}function _L(e){return e===120?2:e===117?4:e===85?8:0}function TL(e){return 48<=e&&e<=57?e-48:-1}function Ky(e){return e===48?"\0":e===97?"\x07":e===98?"\b":e===116||e===9?"	":e===110?`
`:e===118?"\v":e===102?"\f":e===114?"\r":e===101?"\x1B":e===32?" ":e===34?'"':e===47?"/":e===92?"\\":e===78?"\x85":e===95?"\xA0":e===76?"\u2028":e===80?"\u2029":""}function SL(e){return e<=65535?String.fromCharCode(e):String.fromCharCode((e-65536>>10)+55296,(e-65536&1023)+56320)}var xb=new Array(256),vb=new Array(256);for(Si=0;Si<256;Si++)xb[Si]=Ky(Si)?1:0,vb[Si]=Ky(Si);var Si;function CL(e,t){this.input=e,this.filename=t.filename||null,this.schema=t.schema||db,this.onWarning=t.onWarning||null,this.legacy=t.legacy||!1,this.json=t.json||!1,this.listener=t.listener||null,this.implicitTypes=this.schema.compiledImplicit,this.typeMap=this.schema.compiledTypeMap,this.length=e.length,this.position=0,this.line=0,this.lineStart=0,this.lineIndent=0,this.firstTabInLine=-1,this.documents=[]}function yb(e,t){var i={name:e.filename,buffer:e.input.slice(0,-1),position:e.position,line:e.line,column:e.position-e.lineStart};return i.snippet=fN(i),new et(t,i)}function G(e,t){throw yb(e,t)}function Ns(e,t){e.onWarning&&e.onWarning.call(null,yb(e,t))}var Jy={YAML:function(t,i,r){var n,s,o;t.version!==null&&G(t,"duplication of %YAML directive"),r.length!==1&&G(t,"YAML directive accepts exactly one argument"),n=/^([0-9]+)\.([0-9]+)$/.exec(r[0]),n===null&&G(t,"ill-formed argument of the YAML directive"),s=parseInt(n[1],10),o=parseInt(n[2],10),s!==1&&G(t,"unacceptable YAML version of the document"),t.version=r[0],t.checkLineBreaks=o<2,o!==1&&o!==2&&Ns(t,"unsupported YAML version of the document")},TAG:function(t,i,r){var n,s;r.length!==2&&G(t,"TAG directive accepts exactly two arguments"),n=r[0],s=r[1],mb.test(n)||G(t,"ill-formed tag handle (first argument) of the TAG directive"),ai.call(t.tagMap,n)&&G(t,'there is a previously declared suffix for "'+n+'" tag handle'),gb.test(s)||G(t,"ill-formed tag prefix (second argument) of the TAG directive");try{s=decodeURIComponent(s)}catch{G(t,"tag prefix is malformed: "+s)}t.tagMap[n]=s}};function oi(e,t,i,r){var n,s,o,a;if(t<i){if(a=e.input.slice(t,i),r)for(n=0,s=a.length;n<s;n+=1)o=a.charCodeAt(n),o===9||32<=o&&o<=1114111||G(e,"expected valid JSON character");else yL.test(a)&&G(e,"the stream contains non-printable characters");e.result+=a}}function Zy(e,t,i,r){var n,s,o,a;for(Re.isObject(i)||G(e,"cannot merge mappings; the provided source object is unacceptable"),n=Object.keys(i),o=0,a=n.length;o<a;o+=1)s=n[o],ai.call(t,s)||(t[s]=i[s],r[s]=!0)}function ar(e,t,i,r,n,s,o,a,c){var u,f;if(Array.isArray(n))for(n=Array.prototype.slice.call(n),u=0,f=n.length;u<f;u+=1)Array.isArray(n[u])&&G(e,"nested arrays are not supported inside keys"),typeof n=="object"&&Wy(n[u])==="[object Object]"&&(n[u]="[object Object]");if(typeof n=="object"&&Wy(n)==="[object Object]"&&(n="[object Object]"),n=String(n),t===null&&(t={}),r==="tag:yaml.org,2002:merge")if(Array.isArray(s))for(u=0,f=s.length;u<f;u+=1)Zy(e,t,s[u],i);else Zy(e,t,s,i);else!e.json&&!ai.call(i,n)&&ai.call(t,n)&&(e.line=o||e.line,e.lineStart=a||e.lineStart,e.position=c||e.position,G(e,"duplicated mapping key")),n==="__proto__"?Object.defineProperty(t,n,{configurable:!0,enumerable:!0,writable:!0,value:s}):t[n]=s,delete i[n];return t}function Pu(e){var t;t=e.input.charCodeAt(e.position),t===10?e.position++:t===13?(e.position++,e.input.charCodeAt(e.position)===10&&e.position++):G(e,"a line break is expected"),e.line+=1,e.lineStart=e.position,e.firstTabInLine=-1}function Le(e,t,i){for(var r=0,n=e.input.charCodeAt(e.position);n!==0;){for(;Ci(n);)n===9&&e.firstTabInLine===-1&&(e.firstTabInLine=e.position),n=e.input.charCodeAt(++e.position);if(t&&n===35)do n=e.input.charCodeAt(++e.position);while(n!==10&&n!==13&&n!==0);if(Dt(n))for(Pu(e),n=e.input.charCodeAt(e.position),r++,e.lineIndent=0;n===32;)e.lineIndent++,n=e.input.charCodeAt(++e.position);else break}return i!==-1&&r!==0&&e.lineIndent<i&&Ns(e,"deficient indentation"),r}function Rs(e){var t=e.position,i;return i=e.input.charCodeAt(t),!!((i===45||i===46)&&i===e.input.charCodeAt(t+1)&&i===e.input.charCodeAt(t+2)&&(t+=3,i=e.input.charCodeAt(t),i===0||tt(i)))}function Fu(e,t){t===1?e.result+=" ":t>1&&(e.result+=Re.repeat(`
`,t-1))}function OL(e,t,i){var r,n,s,o,a,c,u,f,g=e.kind,x=e.result,l;if(l=e.input.charCodeAt(e.position),tt(l)||or(l)||l===35||l===38||l===42||l===33||l===124||l===62||l===39||l===34||l===37||l===64||l===96||(l===63||l===45)&&(n=e.input.charCodeAt(e.position+1),tt(n)||i&&or(n)))return!1;for(e.kind="scalar",e.result="",s=o=e.position,a=!1;l!==0;){if(l===58){if(n=e.input.charCodeAt(e.position+1),tt(n)||i&&or(n))break}else if(l===35){if(r=e.input.charCodeAt(e.position-1),tt(r))break}else{if(e.position===e.lineStart&&Rs(e)||i&&or(l))break;if(Dt(l))if(c=e.line,u=e.lineStart,f=e.lineIndent,Le(e,!1,-1),e.lineIndent>=t){a=!0,l=e.input.charCodeAt(e.position);continue}else{e.position=o,e.line=c,e.lineStart=u,e.lineIndent=f;break}}a&&(oi(e,s,o,!1),Fu(e,e.line-c),s=o=e.position,a=!1),Ci(l)||(o=e.position+1),l=e.input.charCodeAt(++e.position)}return oi(e,s,o,!1),e.result?!0:(e.kind=g,e.result=x,!1)}function AL(e,t){var i,r,n;if(i=e.input.charCodeAt(e.position),i!==39)return!1;for(e.kind="scalar",e.result="",e.position++,r=n=e.position;(i=e.input.charCodeAt(e.position))!==0;)if(i===39)if(oi(e,r,e.position,!0),i=e.input.charCodeAt(++e.position),i===39)r=e.position,e.position++,n=e.position;else return!0;else Dt(i)?(oi(e,r,n,!0),Fu(e,Le(e,!1,t)),r=n=e.position):e.position===e.lineStart&&Rs(e)?G(e,"unexpected end of the document within a single quoted scalar"):(e.position++,n=e.position);G(e,"unexpected end of the stream within a single quoted scalar")}function DL(e,t){var i,r,n,s,o,a;if(a=e.input.charCodeAt(e.position),a!==34)return!1;for(e.kind="scalar",e.result="",e.position++,i=r=e.position;(a=e.input.charCodeAt(e.position))!==0;){if(a===34)return oi(e,i,e.position,!0),e.position++,!0;if(a===92){if(oi(e,i,e.position,!0),a=e.input.charCodeAt(++e.position),Dt(a))Le(e,!1,t);else if(a<256&&xb[a])e.result+=vb[a],e.position++;else if((o=_L(a))>0){for(n=o,s=0;n>0;n--)a=e.input.charCodeAt(++e.position),(o=EL(a))>=0?s=(s<<4)+o:G(e,"expected hexadecimal character");e.result+=SL(s),e.position++}else G(e,"unknown escape sequence");i=r=e.position}else Dt(a)?(oi(e,i,r,!0),Fu(e,Le(e,!1,t)),i=r=e.position):e.position===e.lineStart&&Rs(e)?G(e,"unexpected end of the document within a double quoted scalar"):(e.position++,r=e.position)}G(e,"unexpected end of the stream within a double quoted scalar")}function IL(e,t){var i=!0,r,n,s,o=e.tag,a,c=e.anchor,u,f,g,x,l,m=Object.create(null),v,w,_,E;if(E=e.input.charCodeAt(e.position),E===91)f=93,l=!1,a=[];else if(E===123)f=125,l=!0,a={};else return!1;for(e.anchor!==null&&(e.anchorMap[e.anchor]=a),E=e.input.charCodeAt(++e.position);E!==0;){if(Le(e,!0,t),E=e.input.charCodeAt(e.position),E===f)return e.position++,e.tag=o,e.anchor=c,e.kind=l?"mapping":"sequence",e.result=a,!0;i?E===44&&G(e,"expected the node content, but found ','"):G(e,"missed comma between flow collection entries"),w=v=_=null,g=x=!1,E===63&&(u=e.input.charCodeAt(e.position+1),tt(u)&&(g=x=!0,e.position++,Le(e,!0,t))),r=e.line,n=e.lineStart,s=e.position,cr(e,t,Ds,!1,!0),w=e.tag,v=e.result,Le(e,!0,t),E=e.input.charCodeAt(e.position),(x||e.line===r)&&E===58&&(g=!0,E=e.input.charCodeAt(++e.position),Le(e,!0,t),cr(e,t,Ds,!1,!0),_=e.result),l?ar(e,a,m,w,v,_,r,n,s):g?a.push(ar(e,null,m,w,v,_,r,n,s)):a.push(v),Le(e,!0,t),E=e.input.charCodeAt(e.position),E===44?(i=!0,E=e.input.charCodeAt(++e.position)):i=!1}G(e,"unexpected end of the stream within a flow collection")}function NL(e,t){var i,r,n=Au,s=!1,o=!1,a=t,c=0,u=!1,f,g;if(g=e.input.charCodeAt(e.position),g===124)r=!1;else if(g===62)r=!0;else return!1;for(e.kind="scalar",e.result="";g!==0;)if(g=e.input.charCodeAt(++e.position),g===43||g===45)Au===n?n=g===43?Yy:vL:G(e,"repeat of a chomping mode identifier");else if((f=TL(g))>=0)f===0?G(e,"bad explicit indentation width of a block scalar; it cannot be less than one"):o?G(e,"repeat of an indentation width identifier"):(a=t+f-1,o=!0);else break;if(Ci(g)){do g=e.input.charCodeAt(++e.position);while(Ci(g));if(g===35)do g=e.input.charCodeAt(++e.position);while(!Dt(g)&&g!==0)}for(;g!==0;){for(Pu(e),e.lineIndent=0,g=e.input.charCodeAt(e.position);(!o||e.lineIndent<a)&&g===32;)e.lineIndent++,g=e.input.charCodeAt(++e.position);if(!o&&e.lineIndent>a&&(a=e.lineIndent),Dt(g)){c++;continue}if(e.lineIndent<a){n===Yy?e.result+=Re.repeat(`
`,s?1+c:c):n===Au&&s&&(e.result+=`
`);break}for(r?Ci(g)?(u=!0,e.result+=Re.repeat(`
`,s?1+c:c)):u?(u=!1,e.result+=Re.repeat(`
`,c+1)):c===0?s&&(e.result+=" "):e.result+=Re.repeat(`
`,c):e.result+=Re.repeat(`
`,s?1+c:c),s=!0,o=!0,c=0,i=e.position;!Dt(g)&&g!==0;)g=e.input.charCodeAt(++e.position);oi(e,i,e.position,!1)}return!0}function Qy(e,t){var i,r=e.tag,n=e.anchor,s=[],o,a=!1,c;if(e.firstTabInLine!==-1)return!1;for(e.anchor!==null&&(e.anchorMap[e.anchor]=s),c=e.input.charCodeAt(e.position);c!==0&&(e.firstTabInLine!==-1&&(e.position=e.firstTabInLine,G(e,"tab characters must not be used in indentation")),!(c!==45||(o=e.input.charCodeAt(e.position+1),!tt(o))));){if(a=!0,e.position++,Le(e,!0,-1)&&e.lineIndent<=t){s.push(null),c=e.input.charCodeAt(e.position);continue}if(i=e.line,cr(e,t,hb,!1,!0),s.push(e.result),Le(e,!0,-1),c=e.input.charCodeAt(e.position),(e.line===i||e.lineIndent>t)&&c!==0)G(e,"bad indentation of a sequence entry");else if(e.lineIndent<t)break}return a?(e.tag=r,e.anchor=n,e.kind="sequence",e.result=s,!0):!1}function LL(e,t,i){var r,n,s,o,a,c,u=e.tag,f=e.anchor,g={},x=Object.create(null),l=null,m=null,v=null,w=!1,_=!1,E;if(e.firstTabInLine!==-1)return!1;for(e.anchor!==null&&(e.anchorMap[e.anchor]=g),E=e.input.charCodeAt(e.position);E!==0;){if(!w&&e.firstTabInLine!==-1&&(e.position=e.firstTabInLine,G(e,"tab characters must not be used in indentation")),r=e.input.charCodeAt(e.position+1),s=e.line,(E===63||E===58)&&tt(r))E===63?(w&&(ar(e,g,x,l,m,null,o,a,c),l=m=v=null),_=!0,w=!0,n=!0):w?(w=!1,n=!0):G(e,"incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line"),e.position+=1,E=r;else{if(o=e.line,a=e.lineStart,c=e.position,!cr(e,i,fb,!1,!0))break;if(e.line===s){for(E=e.input.charCodeAt(e.position);Ci(E);)E=e.input.charCodeAt(++e.position);if(E===58)E=e.input.charCodeAt(++e.position),tt(E)||G(e,"a whitespace character is expected after the key-value separator within a block mapping"),w&&(ar(e,g,x,l,m,null,o,a,c),l=m=v=null),_=!0,w=!1,n=!1,l=e.tag,m=e.result;else if(_)G(e,"can not read an implicit mapping pair; a colon is missed");else return e.tag=u,e.anchor=f,!0}else if(_)G(e,"can not read a block mapping entry; a multiline key may not be an implicit key");else return e.tag=u,e.anchor=f,!0}if((e.line===s||e.lineIndent>t)&&(w&&(o=e.line,a=e.lineStart,c=e.position),cr(e,t,Is,!0,n)&&(w?m=e.result:v=e.result),w||(ar(e,g,x,l,m,v,o,a,c),l=m=v=null),Le(e,!0,-1),E=e.input.charCodeAt(e.position)),(e.line===s||e.lineIndent>t)&&E!==0)G(e,"bad indentation of a mapping entry");else if(e.lineIndent<t)break}return w&&ar(e,g,x,l,m,null,o,a,c),_&&(e.tag=u,e.anchor=f,e.kind="mapping",e.result=g),_}function kL(e){var t,i=!1,r=!1,n,s,o;if(o=e.input.charCodeAt(e.position),o!==33)return!1;if(e.tag!==null&&G(e,"duplication of a tag property"),o=e.input.charCodeAt(++e.position),o===60?(i=!0,o=e.input.charCodeAt(++e.position)):o===33?(r=!0,n="!!",o=e.input.charCodeAt(++e.position)):n="!",t=e.position,i){do o=e.input.charCodeAt(++e.position);while(o!==0&&o!==62);e.position<e.length?(s=e.input.slice(t,e.position),o=e.input.charCodeAt(++e.position)):G(e,"unexpected end of the stream within a verbatim tag")}else{for(;o!==0&&!tt(o);)o===33&&(r?G(e,"tag suffix cannot contain exclamation marks"):(n=e.input.slice(t-1,e.position+1),mb.test(n)||G(e,"named tag handle cannot contain such characters"),r=!0,t=e.position+1)),o=e.input.charCodeAt(++e.position);s=e.input.slice(t,e.position),wL.test(s)&&G(e,"tag suffix cannot contain flow indicator characters")}s&&!gb.test(s)&&G(e,"tag name cannot contain such characters: "+s);try{s=decodeURIComponent(s)}catch{G(e,"tag name is malformed: "+s)}return i?e.tag=s:ai.call(e.tagMap,n)?e.tag=e.tagMap[n]+s:n==="!"?e.tag="!"+s:n==="!!"?e.tag="tag:yaml.org,2002:"+s:G(e,'undeclared tag handle "'+n+'"'),!0}function RL(e){var t,i;if(i=e.input.charCodeAt(e.position),i!==38)return!1;for(e.anchor!==null&&G(e,"duplication of an anchor property"),i=e.input.charCodeAt(++e.position),t=e.position;i!==0&&!tt(i)&&!or(i);)i=e.input.charCodeAt(++e.position);return e.position===t&&G(e,"name of an anchor node must contain at least one character"),e.anchor=e.input.slice(t,e.position),!0}function PL(e){var t,i,r;if(r=e.input.charCodeAt(e.position),r!==42)return!1;for(r=e.input.charCodeAt(++e.position),t=e.position;r!==0&&!tt(r)&&!or(r);)r=e.input.charCodeAt(++e.position);return e.position===t&&G(e,"name of an alias node must contain at least one character"),i=e.input.slice(t,e.position),ai.call(e.anchorMap,i)||G(e,'unidentified alias "'+i+'"'),e.result=e.anchorMap[i],Le(e,!0,-1),!0}function cr(e,t,i,r,n){var s,o,a,c=1,u=!1,f=!1,g,x,l,m,v,w;if(e.listener!==null&&e.listener("open",e),e.tag=null,e.anchor=null,e.kind=null,e.result=null,s=o=a=Is===i||hb===i,r&&Le(e,!0,-1)&&(u=!0,e.lineIndent>t?c=1:e.lineIndent===t?c=0:e.lineIndent<t&&(c=-1)),c===1)for(;kL(e)||RL(e);)Le(e,!0,-1)?(u=!0,a=s,e.lineIndent>t?c=1:e.lineIndent===t?c=0:e.lineIndent<t&&(c=-1)):a=!1;if(a&&(a=u||n),(c===1||Is===i)&&(Ds===i||fb===i?v=t:v=t+1,w=e.position-e.lineStart,c===1?a&&(Qy(e,w)||LL(e,w,v))||IL(e,v)?f=!0:(o&&NL(e,v)||AL(e,v)||DL(e,v)?f=!0:PL(e)?(f=!0,(e.tag!==null||e.anchor!==null)&&G(e,"alias node should not have any properties")):OL(e,v,Ds===i)&&(f=!0,e.tag===null&&(e.tag="?")),e.anchor!==null&&(e.anchorMap[e.anchor]=e.result)):c===0&&(f=a&&Qy(e,w))),e.tag===null)e.anchor!==null&&(e.anchorMap[e.anchor]=e.result);else if(e.tag==="?"){for(e.result!==null&&e.kind!=="scalar"&&G(e,'unacceptable node kind for !<?> tag; it should be "scalar", not "'+e.kind+'"'),g=0,x=e.implicitTypes.length;g<x;g+=1)if(m=e.implicitTypes[g],m.resolve(e.result)){e.result=m.construct(e.result),e.tag=m.tag,e.anchor!==null&&(e.anchorMap[e.anchor]=e.result);break}}else if(e.tag!=="!"){if(ai.call(e.typeMap[e.kind||"fallback"],e.tag))m=e.typeMap[e.kind||"fallback"][e.tag];else for(m=null,l=e.typeMap.multi[e.kind||"fallback"],g=0,x=l.length;g<x;g+=1)if(e.tag.slice(0,l[g].tag.length)===l[g].tag){m=l[g];break}m||G(e,"unknown tag !<"+e.tag+">"),e.result!==null&&m.kind!==e.kind&&G(e,"unacceptable node kind for !<"+e.tag+'> tag; it should be "'+m.kind+'", not "'+e.kind+'"'),m.resolve(e.result,e.tag)?(e.result=m.construct(e.result,e.tag),e.anchor!==null&&(e.anchorMap[e.anchor]=e.result)):G(e,"cannot resolve a node with !<"+e.tag+"> explicit tag")}return e.listener!==null&&e.listener("close",e),e.tag!==null||e.anchor!==null||f}function FL(e){var t=e.position,i,r,n,s=!1,o;for(e.version=null,e.checkLineBreaks=e.legacy,e.tagMap=Object.create(null),e.anchorMap=Object.create(null);(o=e.input.charCodeAt(e.position))!==0&&(Le(e,!0,-1),o=e.input.charCodeAt(e.position),!(e.lineIndent>0||o!==37));){for(s=!0,o=e.input.charCodeAt(++e.position),i=e.position;o!==0&&!tt(o);)o=e.input.charCodeAt(++e.position);for(r=e.input.slice(i,e.position),n=[],r.length<1&&G(e,"directive name must not be less than one character in length");o!==0;){for(;Ci(o);)o=e.input.charCodeAt(++e.position);if(o===35){do o=e.input.charCodeAt(++e.position);while(o!==0&&!Dt(o));break}if(Dt(o))break;for(i=e.position;o!==0&&!tt(o);)o=e.input.charCodeAt(++e.position);n.push(e.input.slice(i,e.position))}o!==0&&Pu(e),ai.call(Jy,r)?Jy[r](e,r,n):Ns(e,'unknown document directive "'+r+'"')}if(Le(e,!0,-1),e.lineIndent===0&&e.input.charCodeAt(e.position)===45&&e.input.charCodeAt(e.position+1)===45&&e.input.charCodeAt(e.position+2)===45?(e.position+=3,Le(e,!0,-1)):s&&G(e,"directives end mark is expected"),cr(e,e.lineIndent-1,Is,!1,!0),Le(e,!0,-1),e.checkLineBreaks&&bL.test(e.input.slice(t,e.position))&&Ns(e,"non-ASCII line breaks are interpreted as content"),e.documents.push(e.result),e.position===e.lineStart&&Rs(e)){e.input.charCodeAt(e.position)===46&&(e.position+=3,Le(e,!0,-1));return}if(e.position<e.length-1)G(e,"end of the stream or a document separator is expected");else return}function bb(e,t){e=String(e),t=t||{},e.length!==0&&(e.charCodeAt(e.length-1)!==10&&e.charCodeAt(e.length-1)!==13&&(e+=`
`),e.charCodeAt(0)===65279&&(e=e.slice(1)));var i=new CL(e,t),r=e.indexOf("\0");for(r!==-1&&(i.position=r,G(i,"null byte is not allowed in input")),i.input+="\0";i.input.charCodeAt(i.position)===32;)i.lineIndent+=1,i.position+=1;for(;i.position<i.length-1;)FL(i);return i.documents}function jL(e,t,i){t!==null&&typeof t=="object"&&typeof i>"u"&&(i=t,t=null);var r=bb(e,i);if(typeof t!="function")return r;for(var n=0,s=r.length;n<s;n+=1)t(r[n])}function ML(e,t){var i=bb(e,t);if(i.length!==0){if(i.length===1)return i[0];throw new et("expected a single document in the stream, but found more")}}var qL=jL,BL=ML,wb={loadAll:qL,load:BL},Eb=Object.prototype.toString,_b=Object.prototype.hasOwnProperty,ju=65279,UL=9,Zr=10,$L=13,zL=32,HL=33,GL=34,Iu=35,VL=37,XL=38,YL=39,WL=42,Tb=44,KL=45,Ls=58,JL=61,ZL=62,QL=63,ek=64,Sb=91,Cb=93,tk=96,Ob=123,ik=124,Ab=125,He={};He[0]="\\0";He[7]="\\a";He[8]="\\b";He[9]="\\t";He[10]="\\n";He[11]="\\v";He[12]="\\f";He[13]="\\r";He[27]="\\e";He[34]='\\"';He[92]="\\\\";He[133]="\\N";He[160]="\\_";He[8232]="\\L";He[8233]="\\P";var rk=["y","Y","yes","Yes","YES","on","On","ON","n","N","no","No","NO","off","Off","OFF"],nk=/^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;function sk(e,t){var i,r,n,s,o,a,c;if(t===null)return{};for(i={},r=Object.keys(t),n=0,s=r.length;n<s;n+=1)o=r[n],a=String(t[o]),o.slice(0,2)==="!!"&&(o="tag:yaml.org,2002:"+o.slice(2)),c=e.compiledTypeMap.fallback[o],c&&_b.call(c.styleAliases,a)&&(a=c.styleAliases[a]),i[o]=a;return i}function ok(e){var t,i,r;if(t=e.toString(16).toUpperCase(),e<=255)i="x",r=2;else if(e<=65535)i="u",r=4;else if(e<=4294967295)i="U",r=8;else throw new et("code point within a string may not be greater than 0xFFFFFFFF");return"\\"+i+Re.repeat("0",r-t.length)+t}var ak=1,Qr=2;function ck(e){this.schema=e.schema||db,this.indent=Math.max(1,e.indent||2),this.noArrayIndent=e.noArrayIndent||!1,this.skipInvalid=e.skipInvalid||!1,this.flowLevel=Re.isNothing(e.flowLevel)?-1:e.flowLevel,this.styleMap=sk(this.schema,e.styles||null),this.sortKeys=e.sortKeys||!1,this.lineWidth=e.lineWidth||80,this.noRefs=e.noRefs||!1,this.noCompatMode=e.noCompatMode||!1,this.condenseFlow=e.condenseFlow||!1,this.quotingType=e.quotingType==='"'?Qr:ak,this.forceQuotes=e.forceQuotes||!1,this.replacer=typeof e.replacer=="function"?e.replacer:null,this.implicitTypes=this.schema.compiledImplicit,this.explicitTypes=this.schema.compiledExplicit,this.tag=null,this.result="",this.duplicates=[],this.usedDuplicates=null}function eb(e,t){for(var i=Re.repeat(" ",t),r=0,n=-1,s="",o,a=e.length;r<a;)n=e.indexOf(`
`,r),n===-1?(o=e.slice(r),r=a):(o=e.slice(r,n+1),r=n+1),o.length&&o!==`
`&&(s+=i),s+=o;return s}function Nu(e,t){return`
`+Re.repeat(" ",e.indent*t)}function uk(e,t){var i,r,n;for(i=0,r=e.implicitTypes.length;i<r;i+=1)if(n=e.implicitTypes[i],n.resolve(t))return!0;return!1}function ks(e){return e===zL||e===UL}function en(e){return 32<=e&&e<=126||161<=e&&e<=55295&&e!==8232&&e!==8233||57344<=e&&e<=65533&&e!==ju||65536<=e&&e<=1114111}function tb(e){return en(e)&&e!==ju&&e!==$L&&e!==Zr}function ib(e,t,i){var r=tb(e),n=r&&!ks(e);return(i?r:r&&e!==Tb&&e!==Sb&&e!==Cb&&e!==Ob&&e!==Ab)&&e!==Iu&&!(t===Ls&&!n)||tb(t)&&!ks(t)&&e===Iu||t===Ls&&n}function lk(e){return en(e)&&e!==ju&&!ks(e)&&e!==KL&&e!==QL&&e!==Ls&&e!==Tb&&e!==Sb&&e!==Cb&&e!==Ob&&e!==Ab&&e!==Iu&&e!==XL&&e!==WL&&e!==HL&&e!==ik&&e!==JL&&e!==ZL&&e!==YL&&e!==GL&&e!==VL&&e!==ek&&e!==tk}function pk(e){return!ks(e)&&e!==Ls}function Kr(e,t){var i=e.charCodeAt(t),r;return i>=55296&&i<=56319&&t+1<e.length&&(r=e.charCodeAt(t+1),r>=56320&&r<=57343)?(i-55296)*1024+r-56320+65536:i}function Db(e){var t=/^\n* /;return t.test(e)}var Ib=1,Lu=2,Nb=3,Lb=4,sr=5;function dk(e,t,i,r,n,s,o,a){var c,u=0,f=null,g=!1,x=!1,l=r!==-1,m=-1,v=lk(Kr(e,0))&&pk(Kr(e,e.length-1));if(t||o)for(c=0;c<e.length;u>=65536?c+=2:c++){if(u=Kr(e,c),!en(u))return sr;v=v&&ib(u,f,a),f=u}else{for(c=0;c<e.length;u>=65536?c+=2:c++){if(u=Kr(e,c),u===Zr)g=!0,l&&(x=x||c-m-1>r&&e[m+1]!==" ",m=c);else if(!en(u))return sr;v=v&&ib(u,f,a),f=u}x=x||l&&c-m-1>r&&e[m+1]!==" "}return!g&&!x?v&&!o&&!n(e)?Ib:s===Qr?sr:Lu:i>9&&Db(e)?sr:o?s===Qr?sr:Lu:x?Lb:Nb}function fk(e,t,i,r,n){e.dump=function(){if(t.length===0)return e.quotingType===Qr?'""':"''";if(!e.noCompatMode&&(rk.indexOf(t)!==-1||nk.test(t)))return e.quotingType===Qr?'"'+t+'"':"'"+t+"'";var s=e.indent*Math.max(1,i),o=e.lineWidth===-1?-1:Math.max(Math.min(e.lineWidth,40),e.lineWidth-s),a=r||e.flowLevel>-1&&i>=e.flowLevel;function c(u){return uk(e,u)}switch(dk(t,a,e.indent,o,c,e.quotingType,e.forceQuotes&&!r,n)){case Ib:return t;case Lu:return"'"+t.replace(/'/g,"''")+"'";case Nb:return"|"+rb(t,e.indent)+nb(eb(t,s));case Lb:return">"+rb(t,e.indent)+nb(eb(hk(t,o),s));case sr:return'"'+mk(t)+'"';default:throw new et("impossible error: invalid scalar style")}}()}function rb(e,t){var i=Db(e)?String(t):"",r=e[e.length-1]===`
`,n=r&&(e[e.length-2]===`
`||e===`
`),s=n?"+":r?"":"-";return i+s+`
`}function nb(e){return e[e.length-1]===`
`?e.slice(0,-1):e}function hk(e,t){for(var i=/(\n+)([^\n]*)/g,r=function(){var u=e.indexOf(`
`);return u=u!==-1?u:e.length,i.lastIndex=u,sb(e.slice(0,u),t)}(),n=e[0]===`
`||e[0]===" ",s,o;o=i.exec(e);){var a=o[1],c=o[2];s=c[0]===" ",r+=a+(!n&&!s&&c!==""?`
`:"")+sb(c,t),n=s}return r}function sb(e,t){if(e===""||e[0]===" ")return e;for(var i=/ [^ ]/g,r,n=0,s,o=0,a=0,c="";r=i.exec(e);)a=r.index,a-n>t&&(s=o>n?o:a,c+=`
`+e.slice(n,s),n=s+1),o=a;return c+=`
`,e.length-n>t&&o>n?c+=e.slice(n,o)+`
`+e.slice(o+1):c+=e.slice(n),c.slice(1)}function mk(e){for(var t="",i=0,r,n=0;n<e.length;i>=65536?n+=2:n++)i=Kr(e,n),r=He[i],!r&&en(i)?(t+=e[n],i>=65536&&(t+=e[n+1])):t+=r||ok(i);return t}function gk(e,t,i){var r="",n=e.tag,s,o,a;for(s=0,o=i.length;s<o;s+=1)a=i[s],e.replacer&&(a=e.replacer.call(i,String(s),a)),(Ht(e,t,a,!1,!1)||typeof a>"u"&&Ht(e,t,null,!1,!1))&&(r!==""&&(r+=","+(e.condenseFlow?"":" ")),r+=e.dump);e.tag=n,e.dump="["+r+"]"}function ob(e,t,i,r){var n="",s=e.tag,o,a,c;for(o=0,a=i.length;o<a;o+=1)c=i[o],e.replacer&&(c=e.replacer.call(i,String(o),c)),(Ht(e,t+1,c,!0,!0,!1,!0)||typeof c>"u"&&Ht(e,t+1,null,!0,!0,!1,!0))&&((!r||n!=="")&&(n+=Nu(e,t)),e.dump&&Zr===e.dump.charCodeAt(0)?n+="-":n+="- ",n+=e.dump);e.tag=s,e.dump=n||"[]"}function xk(e,t,i){var r="",n=e.tag,s=Object.keys(i),o,a,c,u,f;for(o=0,a=s.length;o<a;o+=1)f="",r!==""&&(f+=", "),e.condenseFlow&&(f+='"'),c=s[o],u=i[c],e.replacer&&(u=e.replacer.call(i,c,u)),Ht(e,t,c,!1,!1)&&(e.dump.length>1024&&(f+="? "),f+=e.dump+(e.condenseFlow?'"':"")+":"+(e.condenseFlow?"":" "),Ht(e,t,u,!1,!1)&&(f+=e.dump,r+=f));e.tag=n,e.dump="{"+r+"}"}function vk(e,t,i,r){var n="",s=e.tag,o=Object.keys(i),a,c,u,f,g,x;if(e.sortKeys===!0)o.sort();else if(typeof e.sortKeys=="function")o.sort(e.sortKeys);else if(e.sortKeys)throw new et("sortKeys must be a boolean or a function");for(a=0,c=o.length;a<c;a+=1)x="",(!r||n!=="")&&(x+=Nu(e,t)),u=o[a],f=i[u],e.replacer&&(f=e.replacer.call(i,u,f)),Ht(e,t+1,u,!0,!0,!0)&&(g=e.tag!==null&&e.tag!=="?"||e.dump&&e.dump.length>1024,g&&(e.dump&&Zr===e.dump.charCodeAt(0)?x+="?":x+="? "),x+=e.dump,g&&(x+=Nu(e,t)),Ht(e,t+1,f,!0,g)&&(e.dump&&Zr===e.dump.charCodeAt(0)?x+=":":x+=": ",x+=e.dump,n+=x));e.tag=s,e.dump=n||"{}"}function ab(e,t,i){var r,n,s,o,a,c;for(n=i?e.explicitTypes:e.implicitTypes,s=0,o=n.length;s<o;s+=1)if(a=n[s],(a.instanceOf||a.predicate)&&(!a.instanceOf||typeof t=="object"&&t instanceof a.instanceOf)&&(!a.predicate||a.predicate(t))){if(i?a.multi&&a.representName?e.tag=a.representName(t):e.tag=a.tag:e.tag="?",a.represent){if(c=e.styleMap[a.tag]||a.defaultStyle,Eb.call(a.represent)==="[object Function]")r=a.represent(t,c);else if(_b.call(a.represent,c))r=a.represent[c](t,c);else throw new et("!<"+a.tag+'> tag resolver accepts not "'+c+'" style');e.dump=r}return!0}return!1}function Ht(e,t,i,r,n,s,o){e.tag=null,e.dump=i,ab(e,i,!1)||ab(e,i,!0);var a=Eb.call(e.dump),c=r,u;r&&(r=e.flowLevel<0||e.flowLevel>t);var f=a==="[object Object]"||a==="[object Array]",g,x;if(f&&(g=e.duplicates.indexOf(i),x=g!==-1),(e.tag!==null&&e.tag!=="?"||x||e.indent!==2&&t>0)&&(n=!1),x&&e.usedDuplicates[g])e.dump="*ref_"+g;else{if(f&&x&&!e.usedDuplicates[g]&&(e.usedDuplicates[g]=!0),a==="[object Object]")r&&Object.keys(e.dump).length!==0?(vk(e,t,e.dump,n),x&&(e.dump="&ref_"+g+e.dump)):(xk(e,t,e.dump),x&&(e.dump="&ref_"+g+" "+e.dump));else if(a==="[object Array]")r&&e.dump.length!==0?(e.noArrayIndent&&!o&&t>0?ob(e,t-1,e.dump,n):ob(e,t,e.dump,n),x&&(e.dump="&ref_"+g+e.dump)):(gk(e,t,e.dump),x&&(e.dump="&ref_"+g+" "+e.dump));else if(a==="[object String]")e.tag!=="?"&&fk(e,e.dump,t,s,c);else{if(a==="[object Undefined]")return!1;if(e.skipInvalid)return!1;throw new et("unacceptable kind of an object to dump "+a)}e.tag!==null&&e.tag!=="?"&&(u=encodeURI(e.tag[0]==="!"?e.tag.slice(1):e.tag).replace(/!/g,"%21"),e.tag[0]==="!"?u="!"+u:u.slice(0,18)==="tag:yaml.org,2002:"?u="!!"+u.slice(18):u="!<"+u+">",e.dump=u+" "+e.dump)}return!0}function yk(e,t){var i=[],r=[],n,s;for(ku(e,i,r),n=0,s=r.length;n<s;n+=1)t.duplicates.push(i[r[n]]);t.usedDuplicates=new Array(s)}function ku(e,t,i){var r,n,s;if(e!==null&&typeof e=="object")if(n=t.indexOf(e),n!==-1)i.indexOf(n)===-1&&i.push(n);else if(t.push(e),Array.isArray(e))for(n=0,s=e.length;n<s;n+=1)ku(e[n],t,i);else for(r=Object.keys(e),n=0,s=r.length;n<s;n+=1)ku(e[r[n]],t,i)}function bk(e,t){t=t||{};var i=new ck(t);i.noRefs||yk(e,i);var r=e;return i.replacer&&(r=i.replacer.call({"":r},"",r)),Ht(i,0,r,!0,!0)?i.dump+`
`:""}var wk=bk,Ek={dump:wk};function Mu(e,t){return function(){throw new Error("Function yaml."+e+" is removed in js-yaml 4. Use yaml."+t+" instead, which is now safe by default.")}}var kb=wb.load,j3=wb.loadAll,M3=Ek.dump;var q3=Mu("safeLoad","load"),B3=Mu("safeLoadAll","loadAll"),U3=Mu("safeDump","dump");var Oi=require("fs"),Rb=require("path");var Ps=class extends dt{async setProject(t){this.goModFile.then(i=>{if(!i)return;let n=(0,Oi.readFileSync)(i,"utf8").split(`
`).map(s=>s.match(/^module\s+(\S+)/)?`module ${t}`:s);(0,Oi.writeFileSync)(i,n.join(`
`))})}get goModFile(){return this.workdir.then(t=>(0,Rb.join)(t,"go.mod")).then(t=>{if((0,Oi.existsSync)(t))return t})}get goProject(){return this.goModFile.then(t=>{if(!t)return;let i=(0,Oi.readFileSync)(t,"utf8").split(`
`),r,n=!1,s={};return i.forEach(o=>{let a=o.match(/^module\s+(\S+)/),c=o.match(/^require\s+(\S+)\s+(\S+)/),u=o.match(/^require\s*\(\s*$/),f=o.match(/^\s*\)\s*$/);if(a){s.module=a[1];let g=o.match(/(?:^module\s+|\/)([^/\s]+)$/);g&&(r=g[1])}else if(u)n=!0;else if(f)n=!1;else if(n){let g=o.match(/^\s*(\S+)\s+(\S+)\s(.*)$/);g&&(s.require||(s.require=[]),s.require.push({module:g[1],version:g[2]}))}else c&&(s.require||(s.require=[]),s.require.push({module:c[1],version:c[2]}))}),{projectName:r,goMod:s}})}get projectJson(){return Promise.all([this.goProject,this.standaloneConfig]).then(([t,i])=>{let r={type:"golang"};if(!t)return;let{projectName:n,goMod:s}=t;return r.name=n,r.dependencies=s.require?.reduce((o,a)=>(o[a.module]=a.version,o),{}),i&&(r.scaffoldly=i),r})}};var Qs=require("fs"),n0=require("path");var s0=se(r0()),Zs=class extends dt{async setProject(t){throw new Error("Not implemented")}get projectFile(){return this.workdir.then(t=>{let i=(0,Qs.readdirSync)(t).filter(r=>r.endsWith(".csproj"));if(i.length!==0){if(i.length>1)throw new Error(`Multiple .csproj files found: ${i.join(", ")}.`);return i[0]}})}get project(){return Promise.all([this.projectFile,this.workdir]).then(([t,i])=>{if(t)return(0,s0.parseStringPromise)((0,Qs.readFileSync)((0,n0.join)(i,t))).then(r=>({projectName:t.replace(".csproj",""),csProj:r}))})}get projectJson(){return this.project.then(t=>{let i={type:"dotnet"};if(!t)return;let{projectName:r,csProj:n}=t;i.name=r;let s=n?.Project;if(!s)return;let o=s.PropertyGroup?.[0];if(!o)return;let a=o.Version?.[0];i.version=a;let c=o.Scaffoldly?.[0];if(!c)return;let u=(c.Bin||[]).reduce((g,x)=>{let l=x.$?.name,m=x._;return!l||!m||(g[l]=m),g},{}),f=(c.Service||[]).map(g=>{let x=(g.Script||[]).reduce((l,m)=>{let v=m.$?.name,w=m._;return!v||!w||(l[v]=w),l},{});return{name:g.$?.name,scripts:x,files:g.File}});return i.scaffoldly={runtime:c.Runtime?.[0],handler:c.Handler?.[0],bin:u,services:f},i})}};var Ii=require("fs"),d0=require("path");function _k(e,t){let i=e.slice(0,t).split(/\r\n|\n|\r/g);return[i.length,i.pop().length+1]}function Tk(e,t,i){let r=e.split(/\r\n|\n|\r/g),n="",s=(Math.log10(t+1)|0)+1;for(let o=t-1;o<=t+1;o++){let a=r[o-1];a&&(n+=o.toString().padEnd(s," "),n+=":  ",n+=a,n+=`
`,o===t&&(n+=" ".repeat(s+i+2),n+=`^
`))}return n}var W=class extends Error{line;column;codeblock;constructor(t,i){let[r,n]=_k(i.toml,i.ptr),s=Tk(i.toml,r,n);super(`Invalid TOML document: ${t}

${s}`,i),this.line=r,this.column=n,this.codeblock=s}};function ur(e,t=0,i=e.length){let r=e.indexOf(`
`,t);return e[r-1]==="\r"&&r--,r<=i?r:-1}function nn(e,t){for(let i=t;i<e.length;i++){let r=e[i];if(r===`
`)return i;if(r==="\r"&&e[i+1]===`
`)return i+1;if(r<" "&&r!=="	"||r==="\x7F")throw new W("control characters are not allowed in comments",{toml:e,ptr:t})}return e.length}function ct(e,t,i,r){let n;for(;(n=e[t])===" "||n==="	"||!i&&(n===`
`||n==="\r"&&e[t+1]===`
`);)t++;return r||n!=="#"?t:ct(e,nn(e,t),i)}function Wu(e,t,i,r,n=!1){if(!r)return t=ur(e,t),t<0?e.length:t;for(let s=t;s<e.length;s++){let o=e[s];if(o==="#")s=ur(e,s);else{if(o===i)return s+1;if(o===r)return s;if(n&&(o===`
`||o==="\r"&&e[s+1]===`
`))return s}}throw new W("cannot find end of structure",{toml:e,ptr:t})}function eo(e,t){let i=e[t],r=i===e[t+1]&&e[t+1]===e[t+2]?e.slice(t,t+3):i;t+=r.length-1;do t=e.indexOf(r,++t);while(t>-1&&i!=="'"&&e[t-1]==="\\"&&e[t-2]!=="\\");return t>-1&&(t+=r.length,r.length>1&&(e[t]===i&&t++,e[t]===i&&t++)),t}var Sk=/^(\d{4}-\d{2}-\d{2})?[T ]?(?:(\d{2}):\d{2}:\d{2}(?:\.\d+)?)?(Z|[-+]\d{2}:\d{2})?$/i,sn=class e extends Date{#t=!1;#i=!1;#e=null;constructor(t){let i=!0,r=!0,n="Z";if(typeof t=="string"){let s=t.match(Sk);s?(s[1]||(i=!1,t=`0000-01-01T${t}`),r=!!s[2],s[2]&&+s[2]>23?t="":(n=s[3]||null,t=t.toUpperCase(),!n&&r&&(t+="Z"))):t=""}super(t),isNaN(this.getTime())||(this.#t=i,this.#i=r,this.#e=n)}isDateTime(){return this.#t&&this.#i}isLocal(){return!this.#t||!this.#i||!this.#e}isDate(){return this.#t&&!this.#i}isTime(){return this.#i&&!this.#t}isValid(){return this.#t||this.#i}toISOString(){let t=super.toISOString();if(this.isDate())return t.slice(0,10);if(this.isTime())return t.slice(11,23);if(this.#e===null)return t.slice(0,-1);if(this.#e==="Z")return t;let i=+this.#e.slice(1,3)*60+ +this.#e.slice(4,6);return i=this.#e[0]==="-"?i:-i,new Date(this.getTime()-i*6e4).toISOString().slice(0,-1)+this.#e}static wrapAsOffsetDateTime(t,i="Z"){let r=new e(t);return r.#e=i,r}static wrapAsLocalDateTime(t){let i=new e(t);return i.#e=null,i}static wrapAsLocalDate(t){let i=new e(t);return i.#i=!1,i.#e=null,i}static wrapAsLocalTime(t){let i=new e(t);return i.#t=!1,i.#e=null,i}};var Ck=/^((0x[0-9a-fA-F](_?[0-9a-fA-F])*)|(([+-]|0[ob])?\d(_?\d)*))$/,Ok=/^[+-]?\d(_?\d)*(\.\d(_?\d)*)?([eE][+-]?\d(_?\d)*)?$/,Ak=/^[+-]?0[0-9_]/,Dk=/^[0-9a-f]{4,8}$/i,o0={b:"\b",t:"	",n:`
`,f:"\f",r:"\r",'"':'"',"\\":"\\"};function to(e,t=0,i=e.length){let r=e[t]==="'",n=e[t++]===e[t]&&e[t]===e[t+1];n&&(i-=2,e[t+=2]==="\r"&&t++,e[t]===`
`&&t++);let s=0,o,a="",c=t;for(;t<i-1;){let u=e[t++];if(u===`
`||u==="\r"&&e[t]===`
`){if(!n)throw new W("newlines are not allowed in strings",{toml:e,ptr:t-1})}else if(u<" "&&u!=="	"||u==="\x7F")throw new W("control characters are not allowed in strings",{toml:e,ptr:t-1});if(o){if(o=!1,u==="u"||u==="U"){let f=e.slice(t,t+=u==="u"?4:8);if(!Dk.test(f))throw new W("invalid unicode escape",{toml:e,ptr:s});try{a+=String.fromCodePoint(parseInt(f,16))}catch{throw new W("invalid unicode escape",{toml:e,ptr:s})}}else if(n&&(u===`
`||u===" "||u==="	"||u==="\r")){if(t=ct(e,t-1,!0),e[t]!==`
`&&e[t]!=="\r")throw new W("invalid escape: only line-ending whitespace may be escaped",{toml:e,ptr:s});t=ct(e,t)}else if(u in o0)a+=o0[u];else throw new W("unrecognized escape sequence",{toml:e,ptr:s});c=t}else!r&&u==="\\"&&(s=t-1,o=!0,a+=e.slice(c,s))}return a+e.slice(c,i-1)}function a0(e,t,i){if(e==="true")return!0;if(e==="false")return!1;if(e==="-inf")return-1/0;if(e==="inf"||e==="+inf")return 1/0;if(e==="nan"||e==="+nan"||e==="-nan")return NaN;if(e==="-0")return 0;let r;if((r=Ck.test(e))||Ok.test(e)){if(Ak.test(e))throw new W("leading zeroes are not allowed",{toml:t,ptr:i});let s=+e.replace(/_/g,"");if(isNaN(s))throw new W("invalid number",{toml:t,ptr:i});if(r&&!Number.isSafeInteger(s))throw new W("integer value cannot be represented losslessly",{toml:t,ptr:i});return s}let n=new sn(e);if(!n.isValid())throw new W("invalid value",{toml:t,ptr:i});return n}function Ik(e,t,i,r){let n=e.slice(t,i),s=n.indexOf("#");s>-1&&(nn(e,s),n=n.slice(0,s));let o=n.trimEnd();if(!r){let a=n.indexOf(`
`,o.length);if(a>-1)throw new W("newlines are not allowed in inline tables",{toml:e,ptr:t+a})}return[o,s]}function on(e,t,i){let r=e[t];if(r==="["||r==="{"){let[o,a]=r==="["?u0(e,t):c0(e,t),c=Wu(e,a,",",i);if(i==="}"){let u=ur(e,a,c);if(u>-1)throw new W("newlines are not allowed in inline tables",{toml:e,ptr:u})}return[o,c]}let n;if(r==='"'||r==="'"){n=eo(e,t);let o=to(e,t,n);if(i){if(n=ct(e,n,i!=="]"),e[n]&&e[n]!==","&&e[n]!==i&&e[n]!==`
`&&e[n]!=="\r")throw new W("unexpected character encountered",{toml:e,ptr:n});n+=+(e[n]===",")}return[o,n]}n=Wu(e,t,",",i);let s=Ik(e,t,n-+(e[n-1]===","),i==="]");if(!s[0])throw new W("incomplete key-value declaration: no value specified",{toml:e,ptr:t});return i&&s[1]>-1&&(n=ct(e,t+s[1]),n+=+(e[n]===",")),[a0(s[0],e,t),n]}var Nk=/^[a-zA-Z0-9-_]+[ \t]*$/;function io(e,t,i="="){let r=t-1,n=[],s=e.indexOf(i,t);if(s<0)throw new W("incomplete key-value: cannot find end of key",{toml:e,ptr:t});do{let o=e[t=++r];if(o!==" "&&o!=="	")if(o==='"'||o==="'"){if(o===e[t+1]&&o===e[t+2])throw new W("multiline strings are not allowed in keys",{toml:e,ptr:t});let a=eo(e,t);if(a<0)throw new W("unfinished string encountered",{toml:e,ptr:t});r=e.indexOf(".",a);let c=e.slice(a,r<0||r>s?s:r),u=ur(c);if(u>-1)throw new W("newlines are not allowed in keys",{toml:e,ptr:t+r+u});if(c.trimStart())throw new W("found extra tokens after the string part",{toml:e,ptr:a});if(s<a&&(s=e.indexOf(i,a),s<0))throw new W("incomplete key-value: cannot find end of key",{toml:e,ptr:t});n.push(to(e,t,a))}else{r=e.indexOf(".",t);let a=e.slice(t,r<0||r>s?s:r);if(!Nk.test(a))throw new W("only letter, numbers, dashes and underscores are allowed in keys",{toml:e,ptr:t});n.push(a.trimEnd())}}while(r+1&&r<s);return[n,ct(e,s+1,!0,!0)]}function c0(e,t){let i={},r=new Set,n,s=0;for(t++;(n=e[t++])!=="}"&&n;){if(n===`
`)throw new W("newlines are not allowed in inline tables",{toml:e,ptr:t-1});if(n==="#")throw new W("inline tables cannot contain comments",{toml:e,ptr:t-1});if(n===",")throw new W("expected key-value, found comma",{toml:e,ptr:t-1});if(n!==" "&&n!=="	"){let o,a=i,c=!1,[u,f]=io(e,t-1);for(let l=0;l<u.length;l++){if(l&&(a=c?a[o]:a[o]={}),o=u[l],(c=Object.hasOwn(a,o))&&(typeof a[o]!="object"||r.has(a[o])))throw new W("trying to redefine an already defined value",{toml:e,ptr:t});!c&&o==="__proto__"&&Object.defineProperty(a,o,{enumerable:!0,configurable:!0,writable:!0})}if(c)throw new W("trying to redefine an already defined value",{toml:e,ptr:t});let[g,x]=on(e,f,"}");r.add(g),a[o]=g,t=x,s=e[t-1]===","?t-1:0}}if(s)throw new W("trailing commas are not allowed in inline tables",{toml:e,ptr:s});if(!n)throw new W("unfinished table encountered",{toml:e,ptr:t});return[i,t]}function u0(e,t){let i=[],r;for(t++;(r=e[t++])!=="]"&&r;){if(r===",")throw new W("expected value, found comma",{toml:e,ptr:t-1});if(r==="#")t=nn(e,t);else if(r!==" "&&r!=="	"&&r!==`
`&&r!=="\r"){let n=on(e,t-1,"]");i.push(n[0]),t=n[1]}}if(!r)throw new W("unfinished array encountered",{toml:e,ptr:t});return[i,t]}function l0(e,t,i,r){let n=t,s=i,o,a=!1,c;for(let u=0;u<e.length;u++){if(u){if(n=a?n[o]:n[o]={},s=(c=s[o]).c,r===0&&(c.t===1||c.t===2))return null;if(c.t===2){let f=n.length-1;n=n[f],s=s[f].c}}if(o=e[u],(a=Object.hasOwn(n,o))&&s[o]?.t===0&&s[o]?.d)return null;a||(o==="__proto__"&&(Object.defineProperty(n,o,{enumerable:!0,configurable:!0,writable:!0}),Object.defineProperty(s,o,{enumerable:!0,configurable:!0,writable:!0})),s[o]={t:u<e.length-1&&r===2?3:r,d:!1,i:0,c:{}})}if(c=s[o],c.t!==r&&!(r===1&&c.t===3)||(r===2&&(c.d||(c.d=!0,n[o]=[]),n[o].push(n={}),c.c[c.i++]=c={t:1,d:!1,i:0,c:{}}),c.d))return null;if(c.d=!0,r===1)n=a?n[o]:n[o]={};else if(r===0&&a)return null;return[o,n,c.c]}function Di(e){let t={},i={},r=t,n=i;for(let s=ct(e,0);s<e.length;){if(e[s]==="["){let o=e[++s]==="[",a=io(e,s+=+o,"]");if(o){if(e[a[1]-1]!=="]")throw new W("expected end of table declaration",{toml:e,ptr:a[1]-1});a[1]++}let c=l0(a[0],t,i,o?2:1);if(!c)throw new W("trying to redefine an already defined table or value",{toml:e,ptr:s});n=c[2],r=c[1],s=a[1]}else{let o=io(e,s),a=l0(o[0],r,n,0);if(!a)throw new W("trying to redefine an already defined table or value",{toml:e,ptr:s});let c=on(e,o[1]);a[1][a[0]]=c[0],s=c[1]}if(s=ct(e,s,!0),e[s]&&e[s]!==`
`&&e[s]!=="\r")throw new W("each key-value declaration must be followed by an end-of-line",{toml:e,ptr:s});s=ct(e,s)}return t}var p0=/^[a-z0-9-_]+$/i;function ro(e){let t=typeof e;if(t==="object"){if(Array.isArray(e))return"array";if(e instanceof Date)return"date"}return t}function Lk(e){for(let t=0;t<e.length;t++)if(ro(e[t])!=="object")return!1;return e.length!=0}function Ku(e){return JSON.stringify(e).replace(/\x7f/g,"\\u007f")}function Ju(e,t=ro(e)){if(t==="number")return isNaN(e)?"nan":e===1/0?"inf":e===-1/0?"-inf":e.toString();if(t==="bigint"||t==="boolean")return e.toString();if(t==="string")return Ku(e);if(t==="date"){if(isNaN(e.getTime()))throw new TypeError("cannot serialize invalid date");return e.toISOString()}if(t==="object")return kk(e);if(t==="array")return Rk(e)}function kk(e){let t=Object.keys(e);if(t.length===0)return"{}";let i="{ ";for(let r=0;r<t.length;r++){let n=t[r];r&&(i+=", "),i+=p0.test(n)?n:Ku(n),i+=" = ",i+=Ju(e[n])}return i+" }"}function Rk(e){if(e.length===0)return"[]";let t="[ ";for(let i=0;i<e.length;i++){if(i&&(t+=", "),e[i]===null||e[i]===void 0)throw new TypeError("arrays cannot contain null or undefined values");t+=Ju(e[i])}return t+" ]"}function Pk(e,t){let i="";for(let r=0;r<e.length;r++)i+=`[[${t}]]
`,i+=Zu(e[r],t),i+=`

`;return i}function Zu(e,t=""){let i="",r="",n=Object.keys(e);for(let s=0;s<n.length;s++){let o=n[s];if(e[o]!==null&&e[o]!==void 0){let a=ro(e[o]);if(a==="symbol"||a==="function")throw new TypeError(`cannot serialize values of type '${a}'`);let c=p0.test(o)?o:Ku(o);if(a==="array"&&Lk(e[o]))r+=Pk(e[o],t?`${t}.${c}`:c);else if(a==="object"){let u=t?`${t}.${c}`:c;r+=`[${u}]
`,r+=Zu(e[o],u),r+=`

`}else i+=c,i+=" = ",i+=Ju(e[o],a),i+=`
`}}return`${i}
${r}`.trim()}function an(e){if(ro(e)!=="object")throw new TypeError("stringify can only be called with an object");return Zu(e)}var no=class extends dt{async setProject(t){return this.pyProjectFile.then(i=>{if(!i)return;let r=Di((0,Ii.readFileSync)(i,"utf-8"));r.tool?.poetry&&(r.tool.poetry.name=t),(0,Ii.writeFileSync)(i,an(r))})}get pyProjectFile(){return this.workdir.then(t=>(0,d0.join)(t,"pyproject.toml")).then(t=>{if((0,Ii.existsSync)(t))return t})}get pyProject(){return this.pyProjectFile.then(t=>t?{pyprojectToml:Di((0,Ii.readFileSync)(t,"utf-8"))}:void 0)}get projectJson(){return Promise.all([this.pyProject]).then(([t])=>{let i={type:"python"};if(!t)return;let{pyprojectToml:r}=t,n=r.tool?.poetry?.dependencies||{};r.tool?.poetry&&(i.name=r.tool.poetry.name,i.version=r.tool.poetry.version),i.dependencies=Object.entries(n||{}).reduce((a,[c,u])=>(typeof u=="string"?a[c]=u:typeof u=="object"&&typeof u.version=="string"&&(a[c]=u.version),a),{});let s=r.tool?.scaffoldly?.services&&Array.isArray(r.tool?.scaffoldly?.services)?r.tool.scaffoldly.services:Object.entries(r.tool?.scaffoldly?.services||{}).map(([a,c])=>({...c,name:a})),o={...r.tool?.scaffoldly,packages:[...r.tool?.scaffoldly?.packages||[],...(r["build-system"]?.requires||[]).map(a=>`pip:${a}`)],services:s};return i.scaffoldly=o,i})}};var Ni=require("fs"),f0=require("path");var so=class extends dt{async setProject(t){return this.cargoTomlFile.then(i=>{if(!i)return;let r=Di((0,Ni.readFileSync)(i,"utf-8"));r.package&&(r.package&&(r.package.name=t),(0,Ni.writeFileSync)(i,an(r)))})}get cargoTomlFile(){return this.workdir.then(t=>(0,f0.join)(t,"Cargo.toml")).then(t=>{if((0,Ni.existsSync)(t))return t})}get rustProject(){return this.cargoTomlFile.then(t=>t?{cargoToml:Di((0,Ni.readFileSync)(t,"utf-8"))}:void 0)}get projectJson(){return Promise.all([this.rustProject]).then(([t])=>{let i={type:"rust"};if(!t)return;let{cargoToml:r}=t;return i.name=r.package?.name,i.version=r.package?.version,i.dependencies=Object.entries(r.dependencies||{}).reduce((n,[s,o])=>(typeof o=="string"?n[s]=o:typeof o=="object"&&typeof o.version=="string"&&(n[s]=o.version),n),{}),i.scaffoldly=r.package?.metadata?.scaffoldly,i})}};var R0=se(S0()),il=process.cwd(),Qk=async()=>{let{data:e}=await Zi.get("https://raw.githubusercontent.com/scaffoldly/scaffoldly-examples/refs/heads/main/index.yml",{headers:{"Cache-Control":"no-cache, no-store, must-revalidate",Pragma:"no-cache",Expires:"0"}}),t=kb(e);return Object.entries(t.Frameworks).reduce((r,[n,s])=>(r.push({display:n,downloadUrl:"https://codeload.github.com/scaffoldly",repo:"scaffoldly-examples",color:Ca,variants:Object.entries(s).reduce((o,[a,c])=>(o.push({configFile:c.projectFile,...c,display:a,color:Ca}),o),[])}),r),[])},eR=async e=>{let{data:t}=await Zi.get("https://raw.githubusercontent.com/scaffoldly/scaffoldly-examples/refs/heads/main/.templates/csa/README.md.tpl",{headers:{"Cache-Control":"no-cache, no-store, must-revalidate",Pragma:"no-cache",Expires:"0"}});return R0.default.render(t,e,{async:!0})};function C0(e){return e.map(t=>t.variants&&t.variants.map(i=>i.branch)||[t.repo]).reduce((t,i)=>t.concat(i),[])}function tR(e,t){for(let i of e){let r=i.variants.find(n=>n.branch===t);if(r)return{framework:i,variant:r}}return{}}var iR={_gitignore:".gitignore"},rl="my-app",rR=async(e,t)=>new Promise((i,r)=>{let n={...process.env},s;try{s=k0.default.sync(t[0])}catch{r(new Error(`Unable to locate the \`${t[0]}\` command on this system.`));return}let o=L0.default.spawn(`"${s}"`,t.slice(1),{cwd:e,shell:!0,env:n});o.on("error",a=>{console.error(a),r(a)}),o.on("exit",a=>{if(a!==0){r(new Error(`Command failed with code ${a}`));return}i()}),o.stdin.pipe(process.stdin),o.stdout.pipe(process.stdout),o.stderr.pipe(process.stderr)});function O0(e){return e?.trim().replace(/\/+$/g,"")}function nR(e){let t=Ae.default.readdirSync(e);return t.length===0||t.length===1&&t[0]===".git"}function A0(e){return/^(?:@[a-z\d\-*~][a-z\d\-*._~]*\/)?[a-z\d\-~][a-z\d\-._~]*$/.test(e)}function sR(e){return e.trim().toLowerCase().replace(/\s+/g,"-").replace(/^[._]/,"").replace(/[^a-z\d\-~]+/g,"-")}function oR(e){if(Ae.default.existsSync(e))for(let t of Ae.default.readdirSync(e))t!==".git"&&Ae.default.rmSync(Ue.default.resolve(e,t),{recursive:!0,force:!0})}async function aR(e,t){let{downloadUrl:i,repo:r}=e,n=new URL(`${i}/${r}/zip/refs/heads/${t}`);console.log(""),console.log(`Downloading template from the \`${t}\` branch from \`${r}\`...`),console.log("");try{let s=await Zi({method:"get",url:n.toString(),responseType:"arraybuffer"}),o=Ae.default.mkdtempSync(Ue.default.join(D0.default.tmpdir(),"template-")),a=n.pathname.split("/").pop();if(!a)throw new Error(`Error extracting ZIP file: ${n}`);let c=Ue.default.join(o,a);return Ae.default.writeFileSync(c,s.data),new I0.default(c).extractAllTo(o,!0),Ae.default.unlinkSync(c),Ue.default.join(o,`${r}-${t}`)}catch(s){throw new Error(`Error downloading or extracting ZIP file: ${s}`)}}function P0(e,t){if(Ae.default.statSync(e).isDirectory()){Ae.default.mkdirSync(t,{recursive:!0});for(let r of Ae.default.readdirSync(e)){let n=Ue.default.resolve(e,r),s=Ue.default.resolve(t,r);P0(n,s)}}else Ae.default.copyFileSync(e,t)}function cR(e,t,i){let n=Ae.default.readFileSync(e,"utf-8").split(`
`),s=-1,o=-1;for(let a=0;a<n.length;a++)if(n[a].includes(t))s=a;else if(n[a].includes(i)){o=a;break}s!==-1&&o!==-1&&n.splice(s,o-s+1),Ae.default.writeFileSync(e,n.join(`
`),{encoding:"utf-8"})}var uR=(e,t)=>{switch(e){case"node":return new As(void 0,t);case"go":return new Ps(void 0,t);case"dotnet":return new Zs(void 0,t);case"python":return new no(void 0,t);case"rust":return new so(void 0,t);default:return}},F0=async()=>{let e=await Qk(),t=(0,N0.default)(process.argv.slice(2).filter(A=>A.toLowerCase()!=="create"&&A.toLowerCase()!=="app"),{string:["_"]}),i=O0(t._[0]),r=t.template||t.t,n=i||rl,s=()=>n==="."?Ue.default.basename(Ue.default.resolve()):n,o;nl.default.override({overwrite:t.overwrite});try{o=await(0,nl.default)([{type:i?null:"text",name:"projectName",message:Bi("Project name:"),initial:rl,onState:A=>{n=O0(A.value)||rl}},{type:()=>!Ae.default.existsSync(n)||nR(n)?null:"select",name:"overwrite",message:()=>(n==="."?"Current directory":`Target directory "${n}"`)+" is not empty. Please choose how to proceed:",initial:0,choices:[{title:"Remove existing files and continue",value:"yes"},{title:"Cancel operation",value:"no"},{title:"Ignore files and continue",value:"ignore"}]},{type:(A,{overwrite:D})=>{if(D==="no")throw new Error(Sa("\u2716")+" Operation cancelled");return null},name:"overwriteChecker"},{type:()=>A0(s())?null:"text",name:"packageName",message:Bi("Package name:"),initial:()=>sR(s()),validate:A=>A0(A)||"Invalid name"},{type:r&&C0(e).includes(r)?null:"select",name:"framework",message:typeof r=="string"&&!C0(e).includes(r)?Bi(`"${r}" isn't a valid template. Please choose from below: `):Bi("Select a framework:"),initial:0,choices:e.map(A=>{let D=A.color;return{title:D(A.display||A.repo),value:A}})},{type:A=>A&&A.variants?"select":null,name:"variant",message:Bi("Select a variant:"),choices:A=>A.variants.map(D=>{let S=D.color;return{title:S(D.display),value:D.branch}})}],{onCancel:()=>{throw new Error(Sa("\u2716")+" Operation cancelled")}})}catch(A){console.log(A.message);return}let{overwrite:a,packageName:c,variant:u}=o,{framework:f,variant:g}=tR(e,u||r);if(!f||!g)throw new Error(`Invalid variant: ${g}`);let{rm:x,type:l,devCommand:m,branch:v}=g;if(!l)throw new Error("Invalid or missing project type");if(!v)throw new Error("Invalid or missing variant branch");let w=Ue.default.join(il,n);a==="yes"?oR(w):Ae.default.existsSync(w)||Ae.default.mkdirSync(w,{recursive:!0}),console.log(`
Creating project in ${w}...`);let _=await aR(f,v),E=(A,D)=>{let S=Ue.default.join(w,iR[A]??A);D?Ae.default.writeFileSync(S,D):P0(Ue.default.join(_,A),S)},p=Ae.default.readdirSync(_);for(let A of p.filter(D=>D!=="README.md"&&D!=="LICENSE"&&D!=="LICENSE.md"&&x&&!x.includes(D)))E(A);let d=uR(l,w);if(!d)throw new Error(`Invalid project type: ${g.type}`);await d.setProject(c||s()),(0,Ae.writeFileSync)(Ue.default.join(w,"README.md"),await eR(g)),cR(Ue.default.join(w,".gitignore"),"### +CSA-OMIT ###","### -CSA-OMIT ###");let h=await d.installCommands;h&&await Promise.all(h.commands.map(A=>{let D=(0,Ue.join)(w,A.workdir||".");return console.log(`Installing dependencies using \`${A.cmd}\` in ${D}...`),rR(D,A.cmd.split(" "))})),console.log(""),console.log(`Initializing git in ${w}...`);let b=fy(w);await b.init({"--initial-branch":"main"}),await b.add("."),await b.commit("Initial commit");let O=Ue.default.relative(il,w);console.log(""),console.log("\u2728 Done. Begin development with the following commands:"),console.log(""),w!==il&&console.log(`    cd ${O.includes(" ")?`"${O}"`:O}`),console.log(`    ${m}`),console.log(""),console.log("Push this repository to GitHub:"),console.log(""),console.log("    1) Create a new repository on GitHub"),console.log("    2) Run: `git remote add origin <repository-url>`"),console.log("    3) Run: `git push -u origin main`"),console.log(""),console.log("Scaffoldly can package and deploy your application:"),console.log(""),console.log("    1) Run: `npx scaffoldly deploy`"),console.log(""),console.log("    \u{1F4A1} A `git push` will also package and deploy using GitHub Actions!"),console.log(""),console.log("See our documentation at https://scaffoldly.dev/docs"),console.log(""),console.log("\u{1F680} Happy coding, and thanks for using Scaffoldly!"),console.log("")};0&&(module.exports={createApp});
/*! Bundled license information:

mime-db/index.js:
  (*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   *)

mime-types/index.js:
  (*!
   * mime-types
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

sax/lib/sax.js:
  (*! http://mths.be/fromcodepoint v0.1.0 by @mathias *)

ejs/lib/ejs.js:
  (**
   * @file Embedded JavaScript templating engine. {@link http://ejs.co}
   * @author Matthew Eernisse <mde@fleegix.org>
   * @author Tiancheng "Timothy" Gu <timothygu99@gmail.com>
   * @project EJS
   * @license {@link http://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0}
   *)

@scure/base/lib/esm/index.js:
  (*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

js-yaml/dist/js-yaml.mjs:
  (*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT *)

smol-toml/dist/error.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/util.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/date.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/primitive.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/extract.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/struct.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/parse.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/stringify.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)

smol-toml/dist/index.js:
  (*!
   * Copyright (c) Squirrel Chat et al., All rights reserved.
   * SPDX-License-Identifier: BSD-3-Clause
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   * 3. Neither the name of the copyright holder nor the names of its contributors
   *    may be used to endorse or promote products derived from this software without
   *    specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *)
*/
//# sourceMappingURL=data:application/json;base64,